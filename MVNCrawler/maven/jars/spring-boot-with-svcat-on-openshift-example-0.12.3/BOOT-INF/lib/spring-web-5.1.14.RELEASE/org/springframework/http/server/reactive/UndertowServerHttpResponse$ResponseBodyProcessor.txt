Compiled from "UndertowServerHttpResponse.java"
class org.springframework.http.server.reactive.UndertowServerHttpResponse$ResponseBodyProcessor extends org.springframework.http.server.reactive.AbstractListenerWriteProcessor<org.springframework.core.io.buffer.DataBuffer> {
  private final org.xnio.channels.StreamSinkChannel channel;

  private volatile java.nio.ByteBuffer byteBuffer;

  private volatile boolean writePossible;

  final org.springframework.http.server.reactive.UndertowServerHttpResponse this$0;

  public org.springframework.http.server.reactive.UndertowServerHttpResponse$ResponseBodyProcessor(org.springframework.http.server.reactive.UndertowServerHttpResponse, org.xnio.channels.StreamSinkChannel);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lorg/springframework/http/server/reactive/UndertowServerHttpResponse;
       5: aload_0
       6: aload_1
       7: invokestatic  #2                  // Method org/springframework/http/server/reactive/UndertowServerHttpResponse.access$000:(Lorg/springframework/http/server/reactive/UndertowServerHttpResponse;)Lorg/springframework/http/server/reactive/UndertowServerHttpRequest;
      10: invokevirtual #3                  // Method org/springframework/http/server/reactive/UndertowServerHttpRequest.getLogPrefix:()Ljava/lang/String;
      13: invokespecial #4                  // Method org/springframework/http/server/reactive/AbstractListenerWriteProcessor."<init>":(Ljava/lang/String;)V
      16: aload_2
      17: ldc           #5                  // String StreamSinkChannel must not be null
      19: invokestatic  #6                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      22: aload_0
      23: aload_2
      24: putfield      #7                  // Field channel:Lorg/xnio/channels/StreamSinkChannel;
      27: aload_0
      28: getfield      #7                  // Field channel:Lorg/xnio/channels/StreamSinkChannel;
      31: invokeinterface #8,  1            // InterfaceMethod org/xnio/channels/StreamSinkChannel.getWriteSetter:()Lorg/xnio/ChannelListener$Setter;
      36: aload_0
      37: invokedynamic #9,  0              // InvokeDynamic #0:handleEvent:(Lorg/springframework/http/server/reactive/UndertowServerHttpResponse$ResponseBodyProcessor;)Lorg/xnio/ChannelListener;
      42: invokeinterface #10,  2           // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
      47: aload_0
      48: getfield      #7                  // Field channel:Lorg/xnio/channels/StreamSinkChannel;
      51: invokeinterface #11,  1           // InterfaceMethod org/xnio/channels/StreamSinkChannel.suspendWrites:()V
      56: return

  protected boolean isWritePossible();
    Code:
       0: aload_0
       1: getfield      #7                  // Field channel:Lorg/xnio/channels/StreamSinkChannel;
       4: invokeinterface #12,  1           // InterfaceMethod org/xnio/channels/StreamSinkChannel.resumeWrites:()V
       9: aload_0
      10: getfield      #13                 // Field writePossible:Z
      13: ireturn

  protected boolean write(org.springframework.core.io.buffer.DataBuffer) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #14                 // Field byteBuffer:Ljava/nio/ByteBuffer;
       4: astore_2
       5: aload_2
       6: ifnonnull     11
       9: iconst_0
      10: ireturn
      11: aload_0
      12: iconst_0
      13: putfield      #13                 // Field writePossible:Z
      16: aload_2
      17: invokevirtual #15                 // Method java/nio/ByteBuffer.remaining:()I
      20: istore_3
      21: aload_0
      22: aload_2
      23: invokespecial #16                 // Method writeByteBuffer:(Ljava/nio/ByteBuffer;)I
      26: istore        4
      28: aload_0
      29: getfield      #1                  // Field this$0:Lorg/springframework/http/server/reactive/UndertowServerHttpResponse;
      32: getfield      #17                 // Field org/springframework/http/server/reactive/UndertowServerHttpResponse.logger:Lorg/apache/commons/logging/Log;
      35: invokeinterface #18,  1           // InterfaceMethod org/apache/commons/logging/Log.isTraceEnabled:()Z
      40: ifeq          99
      43: aload_0
      44: getfield      #1                  // Field this$0:Lorg/springframework/http/server/reactive/UndertowServerHttpResponse;
      47: getfield      #17                 // Field org/springframework/http/server/reactive/UndertowServerHttpResponse.logger:Lorg/apache/commons/logging/Log;
      50: new           #19                 // class java/lang/StringBuilder
      53: dup
      54: invokespecial #20                 // Method java/lang/StringBuilder."<init>":()V
      57: aload_0
      58: invokevirtual #21                 // Method getLogPrefix:()Ljava/lang/String;
      61: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      64: ldc           #23                 // String Wrote
      66: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      69: iload         4
      71: invokevirtual #24                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      74: ldc           #25                 // String  of
      76: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      79: iload_3
      80: invokevirtual #24                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      83: ldc           #26                 // String  bytes
      85: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      88: invokevirtual #27                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      91: invokeinterface #28,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      96: goto          159
      99: getstatic     #29                 // Field rsWriteLogger:Lorg/apache/commons/logging/Log;
     102: invokeinterface #18,  1           // InterfaceMethod org/apache/commons/logging/Log.isTraceEnabled:()Z
     107: ifeq          159
     110: getstatic     #29                 // Field rsWriteLogger:Lorg/apache/commons/logging/Log;
     113: new           #19                 // class java/lang/StringBuilder
     116: dup
     117: invokespecial #20                 // Method java/lang/StringBuilder."<init>":()V
     120: aload_0
     121: invokevirtual #21                 // Method getLogPrefix:()Ljava/lang/String;
     124: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     127: ldc           #23                 // String Wrote
     129: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     132: iload         4
     134: invokevirtual #24                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     137: ldc           #25                 // String  of
     139: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     142: iload_3
     143: invokevirtual #24                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     146: ldc           #26                 // String  bytes
     148: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     151: invokevirtual #27                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     154: invokeinterface #28,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
     159: iload         4
     161: iload_3
     162: if_icmpeq     167
     165: iconst_0
     166: ireturn
     167: aload_0
     168: iconst_1
     169: putfield      #13                 // Field writePossible:Z
     172: aload_1
     173: invokestatic  #30                 // Method org/springframework/core/io/buffer/DataBufferUtils.release:(Lorg/springframework/core/io/buffer/DataBuffer;)Z
     176: pop
     177: aload_0
     178: aconst_null
     179: putfield      #14                 // Field byteBuffer:Ljava/nio/ByteBuffer;
     182: iconst_1
     183: ireturn

  private int writeByteBuffer(java.nio.ByteBuffer) throws java.io.IOException;
    Code:
       0: iconst_0
       1: istore_3
       2: aload_0
       3: getfield      #7                  // Field channel:Lorg/xnio/channels/StreamSinkChannel;
       6: aload_1
       7: invokeinterface #31,  2           // InterfaceMethod org/xnio/channels/StreamSinkChannel.write:(Ljava/nio/ByteBuffer;)I
      12: istore_2
      13: iload_3
      14: iload_2
      15: iadd
      16: istore_3
      17: aload_1
      18: invokevirtual #32                 // Method java/nio/ByteBuffer.hasRemaining:()Z
      21: ifeq          28
      24: iload_2
      25: ifgt          2
      28: iload_3
      29: ireturn

  protected void dataReceived(org.springframework.core.io.buffer.DataBuffer);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #33                 // Method org/springframework/http/server/reactive/AbstractListenerWriteProcessor.dataReceived:(Ljava/lang/Object;)V
       5: aload_0
       6: aload_1
       7: invokeinterface #34,  1           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.asByteBuffer:()Ljava/nio/ByteBuffer;
      12: putfield      #14                 // Field byteBuffer:Ljava/nio/ByteBuffer;
      15: return

  protected boolean isDataEmpty(org.springframework.core.io.buffer.DataBuffer);
    Code:
       0: aload_1
       1: invokeinterface #35,  1           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.readableByteCount:()I
       6: ifne          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  protected void writingComplete();
    Code:
       0: aload_0
       1: getfield      #7                  // Field channel:Lorg/xnio/channels/StreamSinkChannel;
       4: invokeinterface #8,  1            // InterfaceMethod org/xnio/channels/StreamSinkChannel.getWriteSetter:()Lorg/xnio/ChannelListener$Setter;
       9: aconst_null
      10: invokeinterface #10,  2           // InterfaceMethod org/xnio/ChannelListener$Setter.set:(Lorg/xnio/ChannelListener;)V
      15: aload_0
      16: getfield      #7                  // Field channel:Lorg/xnio/channels/StreamSinkChannel;
      19: invokeinterface #12,  1           // InterfaceMethod org/xnio/channels/StreamSinkChannel.resumeWrites:()V
      24: return

  protected void writingFailed(java.lang.Throwable);
    Code:
       0: aload_0
       1: invokevirtual #36                 // Method cancel:()V
       4: aload_0
       5: aload_1
       6: invokevirtual #37                 // Method onError:(Ljava/lang/Throwable;)V
       9: return

  protected void discardData(org.springframework.core.io.buffer.DataBuffer);
    Code:
       0: aload_1
       1: invokestatic  #30                 // Method org/springframework/core/io/buffer/DataBufferUtils.release:(Lorg/springframework/core/io/buffer/DataBuffer;)Z
       4: pop
       5: return

  protected void discardData(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #38                 // class org/springframework/core/io/buffer/DataBuffer
       5: invokevirtual #39                 // Method discardData:(Lorg/springframework/core/io/buffer/DataBuffer;)V
       8: return

  protected boolean write(java.lang.Object) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #38                 // class org/springframework/core/io/buffer/DataBuffer
       5: invokevirtual #40                 // Method write:(Lorg/springframework/core/io/buffer/DataBuffer;)Z
       8: ireturn

  protected void dataReceived(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #38                 // class org/springframework/core/io/buffer/DataBuffer
       5: invokevirtual #41                 // Method dataReceived:(Lorg/springframework/core/io/buffer/DataBuffer;)V
       8: return

  protected boolean isDataEmpty(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #38                 // class org/springframework/core/io/buffer/DataBuffer
       5: invokevirtual #42                 // Method isDataEmpty:(Lorg/springframework/core/io/buffer/DataBuffer;)Z
       8: ireturn

  private void lambda$new$0(org.xnio.channels.StreamSinkChannel);
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #13                 // Field writePossible:Z
       5: aload_0
       6: invokevirtual #43                 // Method onWritePossible:()V
       9: return
}
