Compiled from "ReactorServerHttpResponse.java"
class org.springframework.http.server.reactive.ReactorServerHttpResponse extends org.springframework.http.server.reactive.AbstractServerHttpResponse implements org.springframework.http.ZeroCopyHttpOutputMessage {
  private final reactor.netty.http.server.HttpServerResponse response;

  public org.springframework.http.server.reactive.ReactorServerHttpResponse(reactor.netty.http.server.HttpServerResponse, org.springframework.core.io.buffer.DataBufferFactory);
    Code:
       0: aload_0
       1: aload_2
       2: new           #1                  // class org/springframework/http/HttpHeaders
       5: dup
       6: new           #2                  // class org/springframework/http/server/reactive/NettyHeadersAdapter
       9: dup
      10: aload_1
      11: invokeinterface #3,  1            // InterfaceMethod reactor/netty/http/server/HttpServerResponse.responseHeaders:()Lio/netty/handler/codec/http/HttpHeaders;
      16: invokespecial #4                  // Method org/springframework/http/server/reactive/NettyHeadersAdapter."<init>":(Lio/netty/handler/codec/http/HttpHeaders;)V
      19: invokespecial #5                  // Method org/springframework/http/HttpHeaders."<init>":(Lorg/springframework/util/MultiValueMap;)V
      22: invokespecial #6                  // Method org/springframework/http/server/reactive/AbstractServerHttpResponse."<init>":(Lorg/springframework/core/io/buffer/DataBufferFactory;Lorg/springframework/http/HttpHeaders;)V
      25: aload_1
      26: ldc           #7                  // String HttpServerResponse must not be null
      28: invokestatic  #8                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      31: aload_0
      32: aload_1
      33: putfield      #9                  // Field response:Lreactor/netty/http/server/HttpServerResponse;
      36: return

  public <T> T getNativeResponse();
    Code:
       0: aload_0
       1: getfield      #9                  // Field response:Lreactor/netty/http/server/HttpServerResponse;
       4: areturn

  public org.springframework.http.HttpStatus getStatusCode();
    Code:
       0: aload_0
       1: invokespecial #10                 // Method org/springframework/http/server/reactive/AbstractServerHttpResponse.getStatusCode:()Lorg/springframework/http/HttpStatus;
       4: astore_1
       5: aload_1
       6: ifnull        13
       9: aload_1
      10: goto          28
      13: aload_0
      14: getfield      #9                  // Field response:Lreactor/netty/http/server/HttpServerResponse;
      17: invokeinterface #11,  1           // InterfaceMethod reactor/netty/http/server/HttpServerResponse.status:()Lio/netty/handler/codec/http/HttpResponseStatus;
      22: invokevirtual #12                 // Method io/netty/handler/codec/http/HttpResponseStatus.code:()I
      25: invokestatic  #13                 // Method org/springframework/http/HttpStatus.resolve:(I)Lorg/springframework/http/HttpStatus;
      28: areturn

  protected void applyStatusCode();
    Code:
       0: aload_0
       1: invokevirtual #14                 // Method getStatusCodeValue:()Ljava/lang/Integer;
       4: astore_1
       5: aload_1
       6: ifnull        23
       9: aload_0
      10: getfield      #9                  // Field response:Lreactor/netty/http/server/HttpServerResponse;
      13: aload_1
      14: invokevirtual #15                 // Method java/lang/Integer.intValue:()I
      17: invokeinterface #16,  2           // InterfaceMethod reactor/netty/http/server/HttpServerResponse.status:(I)Lreactor/netty/http/server/HttpServerResponse;
      22: pop
      23: return

  protected reactor.core.publisher.Mono<java.lang.Void> writeWithInternal(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>);
    Code:
       0: aload_0
       1: getfield      #9                  // Field response:Lreactor/netty/http/server/HttpServerResponse;
       4: aload_0
       5: aload_1
       6: invokespecial #17                 // Method toByteBufs:(Lorg/reactivestreams/Publisher;)Lorg/reactivestreams/Publisher;
       9: invokeinterface #18,  2           // InterfaceMethod reactor/netty/http/server/HttpServerResponse.send:(Lorg/reactivestreams/Publisher;)Lreactor/netty/NettyOutbound;
      14: invokeinterface #19,  1           // InterfaceMethod reactor/netty/NettyOutbound.then:()Lreactor/core/publisher/Mono;
      19: areturn

  protected reactor.core.publisher.Mono<java.lang.Void> writeAndFlushWithInternal(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>>);
    Code:
       0: aload_0
       1: getfield      #9                  // Field response:Lreactor/netty/http/server/HttpServerResponse;
       4: aload_1
       5: invokestatic  #20                 // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       8: aload_0
       9: invokedynamic #21,  0             // InvokeDynamic #0:apply:(Lorg/springframework/http/server/reactive/ReactorServerHttpResponse;)Ljava/util/function/Function;
      14: invokevirtual #22                 // Method reactor/core/publisher/Flux.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      17: invokeinterface #23,  2           // InterfaceMethod reactor/netty/http/server/HttpServerResponse.sendGroups:(Lorg/reactivestreams/Publisher;)Lreactor/netty/NettyOutbound;
      22: invokeinterface #19,  1           // InterfaceMethod reactor/netty/NettyOutbound.then:()Lreactor/core/publisher/Mono;
      27: areturn

  protected void applyHeaders();
    Code:
       0: return

  protected void applyCookies();
    Code:
       0: aload_0
       1: invokevirtual #24                 // Method getCookies:()Lorg/springframework/util/MultiValueMap;
       4: invokeinterface #25,  1           // InterfaceMethod org/springframework/util/MultiValueMap.values:()Ljava/util/Collection;
       9: invokeinterface #26,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      14: astore_1
      15: aload_1
      16: invokeinterface #27,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          84
      24: aload_1
      25: invokeinterface #28,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #29                 // class java/util/List
      33: astore_2
      34: aload_2
      35: invokeinterface #30,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      40: astore_3
      41: aload_3
      42: invokeinterface #27,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      47: ifeq          81
      50: aload_3
      51: invokeinterface #28,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      56: checkcast     #31                 // class org/springframework/http/ResponseCookie
      59: astore        4
      61: aload_0
      62: getfield      #9                  // Field response:Lreactor/netty/http/server/HttpServerResponse;
      65: ldc           #32                 // String Set-Cookie
      67: aload         4
      69: invokevirtual #33                 // Method org/springframework/http/ResponseCookie.toString:()Ljava/lang/String;
      72: invokeinterface #34,  3           // InterfaceMethod reactor/netty/http/server/HttpServerResponse.addHeader:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Lreactor/netty/http/server/HttpServerResponse;
      77: pop
      78: goto          41
      81: goto          15
      84: return

  public reactor.core.publisher.Mono<java.lang.Void> writeWith(java.nio.file.Path, long, long);
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: lload_2
       4: lload         4
       6: invokedynamic #35,  0             // InvokeDynamic #1:get:(Lorg/springframework/http/server/reactive/ReactorServerHttpResponse;Ljava/nio/file/Path;JJ)Ljava/util/function/Supplier;
      11: invokevirtual #36                 // Method doCommit:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Mono;
      14: areturn

  private org.reactivestreams.Publisher<io.netty.buffer.ByteBuf> toByteBufs(org.reactivestreams.Publisher<? extends org.springframework.core.io.buffer.DataBuffer>);
    Code:
       0: aload_1
       1: instanceof    #37                 // class reactor/core/publisher/Mono
       4: ifeq          22
       7: aload_1
       8: invokestatic  #38                 // Method reactor/core/publisher/Mono.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
      11: invokedynamic #39,  0             // InvokeDynamic #2:apply:()Ljava/util/function/Function;
      16: invokevirtual #40                 // Method reactor/core/publisher/Mono.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      19: goto          34
      22: aload_1
      23: invokestatic  #20                 // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      26: invokedynamic #39,  0             // InvokeDynamic #2:apply:()Ljava/util/function/Function;
      31: invokevirtual #22                 // Method reactor/core/publisher/Flux.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      34: areturn

  private reactor.core.publisher.Mono lambda$writeWith$0(java.nio.file.Path, long, long);
    Code:
       0: aload_0
       1: getfield      #9                  // Field response:Lreactor/netty/http/server/HttpServerResponse;
       4: aload_1
       5: lload_2
       6: lload         4
       8: invokeinterface #41,  6           // InterfaceMethod reactor/netty/http/server/HttpServerResponse.sendFile:(Ljava/nio/file/Path;JJ)Lreactor/netty/NettyOutbound;
      13: invokeinterface #19,  1           // InterfaceMethod reactor/netty/NettyOutbound.then:()Lreactor/core/publisher/Mono;
      18: areturn
}
