Compiled from "EncoderHttpMessageWriter.java"
public class org.springframework.http.codec.EncoderHttpMessageWriter<T> implements org.springframework.http.codec.HttpMessageWriter<T> {
  private final org.springframework.core.codec.Encoder<T> encoder;

  private final java.util.List<org.springframework.http.MediaType> mediaTypes;

  private final org.springframework.http.MediaType defaultMediaType;

  public org.springframework.http.codec.EncoderHttpMessageWriter(org.springframework.core.codec.Encoder<T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_1
       5: ldc           #2                  // String Encoder is required
       7: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      10: aload_1
      11: invokestatic  #4                  // Method initLogger:(Lorg/springframework/core/codec/Encoder;)V
      14: aload_0
      15: aload_1
      16: putfield      #5                  // Field encoder:Lorg/springframework/core/codec/Encoder;
      19: aload_0
      20: aload_1
      21: invokeinterface #6,  1            // InterfaceMethod org/springframework/core/codec/Encoder.getEncodableMimeTypes:()Ljava/util/List;
      26: invokestatic  #7                  // Method org/springframework/http/MediaType.asMediaTypes:(Ljava/util/List;)Ljava/util/List;
      29: putfield      #8                  // Field mediaTypes:Ljava/util/List;
      32: aload_0
      33: aload_0
      34: getfield      #8                  // Field mediaTypes:Ljava/util/List;
      37: invokestatic  #9                  // Method initDefaultMediaType:(Ljava/util/List;)Lorg/springframework/http/MediaType;
      40: putfield      #10                 // Field defaultMediaType:Lorg/springframework/http/MediaType;
      43: return

  private static void initLogger(org.springframework.core.codec.Encoder<?>);
    Code:
       0: aload_0
       1: instanceof    #11                 // class org/springframework/core/codec/AbstractEncoder
       4: ifeq          41
       7: aload_0
       8: invokevirtual #12                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      11: invokevirtual #13                 // Method java/lang/Class.getName:()Ljava/lang/String;
      14: ldc           #14                 // String org.springframework.core.codec
      16: invokevirtual #15                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      19: ifeq          41
      22: aload_0
      23: checkcast     #11                 // class org/springframework/core/codec/AbstractEncoder
      26: invokevirtual #16                 // Method org/springframework/core/codec/AbstractEncoder.getLogger:()Lorg/apache/commons/logging/Log;
      29: invokestatic  #17                 // Method org/springframework/http/HttpLogging.forLog:(Lorg/apache/commons/logging/Log;)Lorg/apache/commons/logging/Log;
      32: astore_1
      33: aload_0
      34: checkcast     #11                 // class org/springframework/core/codec/AbstractEncoder
      37: aload_1
      38: invokevirtual #18                 // Method org/springframework/core/codec/AbstractEncoder.setLogger:(Lorg/apache/commons/logging/Log;)V
      41: return

  private static org.springframework.http.MediaType initDefaultMediaType(java.util.List<org.springframework.http.MediaType>);
    Code:
       0: aload_0
       1: invokeinterface #19,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
       6: invokedynamic #20,  0             // InvokeDynamic #0:test:()Ljava/util/function/Predicate;
      11: invokeinterface #21,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      16: invokeinterface #22,  1           // InterfaceMethod java/util/stream/Stream.findFirst:()Ljava/util/Optional;
      21: aconst_null
      22: invokevirtual #23                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      25: checkcast     #24                 // class org/springframework/http/MediaType
      28: areturn

  public org.springframework.core.codec.Encoder<T> getEncoder();
    Code:
       0: aload_0
       1: getfield      #5                  // Field encoder:Lorg/springframework/core/codec/Encoder;
       4: areturn

  public java.util.List<org.springframework.http.MediaType> getWritableMediaTypes();
    Code:
       0: aload_0
       1: getfield      #8                  // Field mediaTypes:Ljava/util/List;
       4: areturn

  public boolean canWrite(org.springframework.core.ResolvableType, org.springframework.http.MediaType);
    Code:
       0: aload_0
       1: getfield      #5                  // Field encoder:Lorg/springframework/core/codec/Encoder;
       4: aload_1
       5: aload_2
       6: invokeinterface #25,  3           // InterfaceMethod org/springframework/core/codec/Encoder.canEncode:(Lorg/springframework/core/ResolvableType;Lorg/springframework/util/MimeType;)Z
      11: ireturn

  public reactor.core.publisher.Mono<java.lang.Void> write(org.reactivestreams.Publisher<? extends T>, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.ReactiveHttpOutputMessage, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: aload         4
       3: aload_3
       4: invokespecial #26                 // Method updateContentType:(Lorg/springframework/http/ReactiveHttpOutputMessage;Lorg/springframework/http/MediaType;)Lorg/springframework/http/MediaType;
       7: astore        6
       9: aload_0
      10: getfield      #5                  // Field encoder:Lorg/springframework/core/codec/Encoder;
      13: aload_1
      14: aload         4
      16: invokeinterface #27,  1           // InterfaceMethod org/springframework/http/ReactiveHttpOutputMessage.bufferFactory:()Lorg/springframework/core/io/buffer/DataBufferFactory;
      21: aload_2
      22: aload         6
      24: aload         5
      26: invokeinterface #28,  6           // InterfaceMethod org/springframework/core/codec/Encoder.encode:(Lorg/reactivestreams/Publisher;Lorg/springframework/core/io/buffer/DataBufferFactory;Lorg/springframework/core/ResolvableType;Lorg/springframework/util/MimeType;Ljava/util/Map;)Lreactor/core/publisher/Flux;
      31: astore        7
      33: aload_1
      34: instanceof    #29                 // class reactor/core/publisher/Mono
      37: ifeq          82
      40: aload         4
      42: invokeinterface #30,  1           // InterfaceMethod org/springframework/http/ReactiveHttpOutputMessage.getHeaders:()Lorg/springframework/http/HttpHeaders;
      47: astore        8
      49: aload         7
      51: invokevirtual #31                 // Method reactor/core/publisher/Flux.singleOrEmpty:()Lreactor/core/publisher/Mono;
      54: aload         8
      56: aload         4
      58: invokedynamic #32,  0             // InvokeDynamic #1:get:(Lorg/springframework/http/HttpHeaders;Lorg/springframework/http/ReactiveHttpOutputMessage;)Ljava/util/function/Supplier;
      63: invokestatic  #33                 // Method reactor/core/publisher/Mono.defer:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Mono;
      66: invokevirtual #34                 // Method reactor/core/publisher/Mono.switchIfEmpty:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      69: aload         8
      71: aload         4
      73: invokedynamic #35,  0             // InvokeDynamic #2:apply:(Lorg/springframework/http/HttpHeaders;Lorg/springframework/http/ReactiveHttpOutputMessage;)Ljava/util/function/Function;
      78: invokevirtual #36                 // Method reactor/core/publisher/Mono.flatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      81: areturn
      82: aload_0
      83: aload         6
      85: invokespecial #37                 // Method isStreamingMediaType:(Lorg/springframework/http/MediaType;)Z
      88: ifeq          109
      91: aload         4
      93: aload         7
      95: invokedynamic #38,  0             // InvokeDynamic #3:apply:()Ljava/util/function/Function;
     100: invokevirtual #39                 // Method reactor/core/publisher/Flux.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
     103: invokeinterface #40,  2           // InterfaceMethod org/springframework/http/ReactiveHttpOutputMessage.writeAndFlushWith:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
     108: areturn
     109: aload         4
     111: aload         7
     113: invokeinterface #41,  2           // InterfaceMethod org/springframework/http/ReactiveHttpOutputMessage.writeWith:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
     118: areturn

  private org.springframework.http.MediaType updateContentType(org.springframework.http.ReactiveHttpOutputMessage, org.springframework.http.MediaType);
    Code:
       0: aload_1
       1: invokeinterface #30,  1           // InterfaceMethod org/springframework/http/ReactiveHttpOutputMessage.getHeaders:()Lorg/springframework/http/HttpHeaders;
       6: invokevirtual #42                 // Method org/springframework/http/HttpHeaders.getContentType:()Lorg/springframework/http/MediaType;
       9: astore_3
      10: aload_3
      11: ifnull        16
      14: aload_3
      15: areturn
      16: aload_0
      17: getfield      #10                 // Field defaultMediaType:Lorg/springframework/http/MediaType;
      20: astore        4
      22: aload_2
      23: aload         4
      25: invokestatic  #43                 // Method useFallback:(Lorg/springframework/http/MediaType;Lorg/springframework/http/MediaType;)Z
      28: ifeq          36
      31: aload         4
      33: goto          37
      36: aload_2
      37: astore_3
      38: aload_3
      39: ifnull        59
      42: aload_3
      43: aload         4
      45: invokestatic  #44                 // Method addDefaultCharset:(Lorg/springframework/http/MediaType;Lorg/springframework/http/MediaType;)Lorg/springframework/http/MediaType;
      48: astore_3
      49: aload_1
      50: invokeinterface #30,  1           // InterfaceMethod org/springframework/http/ReactiveHttpOutputMessage.getHeaders:()Lorg/springframework/http/HttpHeaders;
      55: aload_3
      56: invokevirtual #45                 // Method org/springframework/http/HttpHeaders.setContentType:(Lorg/springframework/http/MediaType;)V
      59: aload_3
      60: areturn

  private static boolean useFallback(org.springframework.http.MediaType, org.springframework.http.MediaType);
    Code:
       0: aload_0
       1: ifnull        25
       4: aload_0
       5: invokevirtual #46                 // Method org/springframework/http/MediaType.isConcrete:()Z
       8: ifeq          25
      11: aload_0
      12: getstatic     #47                 // Field org/springframework/http/MediaType.APPLICATION_OCTET_STREAM:Lorg/springframework/http/MediaType;
      15: invokevirtual #48                 // Method org/springframework/http/MediaType.equals:(Ljava/lang/Object;)Z
      18: ifeq          29
      21: aload_1
      22: ifnull        29
      25: iconst_1
      26: goto          30
      29: iconst_0
      30: ireturn

  private static org.springframework.http.MediaType addDefaultCharset(org.springframework.http.MediaType, org.springframework.http.MediaType);
    Code:
       0: aload_0
       1: invokevirtual #49                 // Method org/springframework/http/MediaType.getCharset:()Ljava/nio/charset/Charset;
       4: ifnonnull     31
       7: aload_1
       8: ifnull        31
      11: aload_1
      12: invokevirtual #49                 // Method org/springframework/http/MediaType.getCharset:()Ljava/nio/charset/Charset;
      15: ifnull        31
      18: new           #24                 // class org/springframework/http/MediaType
      21: dup
      22: aload_0
      23: aload_1
      24: invokevirtual #49                 // Method org/springframework/http/MediaType.getCharset:()Ljava/nio/charset/Charset;
      27: invokespecial #50                 // Method org/springframework/http/MediaType."<init>":(Lorg/springframework/http/MediaType;Ljava/nio/charset/Charset;)V
      30: areturn
      31: aload_0
      32: areturn

  private boolean isStreamingMediaType(org.springframework.http.MediaType);
    Code:
       0: aload_1
       1: ifnull        14
       4: aload_0
       5: getfield      #5                  // Field encoder:Lorg/springframework/core/codec/Encoder;
       8: instanceof    #51                 // class org/springframework/http/codec/HttpMessageEncoder
      11: ifne          16
      14: iconst_0
      15: ireturn
      16: aload_0
      17: getfield      #5                  // Field encoder:Lorg/springframework/core/codec/Encoder;
      20: checkcast     #51                 // class org/springframework/http/codec/HttpMessageEncoder
      23: invokeinterface #52,  1           // InterfaceMethod org/springframework/http/codec/HttpMessageEncoder.getStreamingMediaTypes:()Ljava/util/List;
      28: invokeinterface #53,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      33: astore_2
      34: aload_2
      35: invokeinterface #54,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      40: ifeq          75
      43: aload_2
      44: invokeinterface #55,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      49: checkcast     #24                 // class org/springframework/http/MediaType
      52: astore_3
      53: aload_1
      54: aload_3
      55: invokevirtual #56                 // Method org/springframework/http/MediaType.isCompatibleWith:(Lorg/springframework/http/MediaType;)Z
      58: ifeq          72
      61: aload_0
      62: aload_1
      63: aload_3
      64: invokespecial #57                 // Method matchParameters:(Lorg/springframework/http/MediaType;Lorg/springframework/http/MediaType;)Z
      67: ifeq          72
      70: iconst_1
      71: ireturn
      72: goto          34
      75: iconst_0
      76: ireturn

  private boolean matchParameters(org.springframework.http.MediaType, org.springframework.http.MediaType);
    Code:
       0: aload_1
       1: invokevirtual #58                 // Method org/springframework/http/MediaType.getParameters:()Ljava/util/Map;
       4: invokeinterface #59,  1           // InterfaceMethod java/util/Map.keySet:()Ljava/util/Set;
       9: invokeinterface #60,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      14: astore_3
      15: aload_3
      16: invokeinterface #54,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          82
      24: aload_3
      25: invokeinterface #55,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #61                 // class java/lang/String
      33: astore        4
      35: aload_1
      36: aload         4
      38: invokevirtual #62                 // Method org/springframework/http/MediaType.getParameter:(Ljava/lang/String;)Ljava/lang/String;
      41: astore        5
      43: aload_2
      44: aload         4
      46: invokevirtual #62                 // Method org/springframework/http/MediaType.getParameter:(Ljava/lang/String;)Ljava/lang/String;
      49: astore        6
      51: aload         5
      53: invokestatic  #63                 // Method org/springframework/util/StringUtils.hasText:(Ljava/lang/String;)Z
      56: ifeq          79
      59: aload         6
      61: invokestatic  #63                 // Method org/springframework/util/StringUtils.hasText:(Ljava/lang/String;)Z
      64: ifeq          79
      67: aload         5
      69: aload         6
      71: invokevirtual #64                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      74: ifne          79
      77: iconst_0
      78: ireturn
      79: goto          15
      82: iconst_1
      83: ireturn

  public reactor.core.publisher.Mono<java.lang.Void> write(org.reactivestreams.Publisher<? extends T>, org.springframework.core.ResolvableType, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload         7
       2: aload_0
       3: aload_2
       4: aload_3
       5: aload         4
       7: aload         5
       9: aload         6
      11: invokevirtual #65                 // Method getWriteHints:(Lorg/springframework/core/ResolvableType;Lorg/springframework/core/ResolvableType;Lorg/springframework/http/MediaType;Lorg/springframework/http/server/reactive/ServerHttpRequest;Lorg/springframework/http/server/reactive/ServerHttpResponse;)Ljava/util/Map;
      14: invokestatic  #66                 // Method org/springframework/core/codec/Hints.merge:(Ljava/util/Map;Ljava/util/Map;)Ljava/util/Map;
      17: astore        8
      19: aload_0
      20: aload_1
      21: aload_3
      22: aload         4
      24: aload         6
      26: aload         8
      28: invokevirtual #67                 // Method write:(Lorg/reactivestreams/Publisher;Lorg/springframework/core/ResolvableType;Lorg/springframework/http/MediaType;Lorg/springframework/http/ReactiveHttpOutputMessage;Ljava/util/Map;)Lreactor/core/publisher/Mono;
      31: areturn

  protected java.util.Map<java.lang.String, java.lang.Object> getWriteHints(org.springframework.core.ResolvableType, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse);
    Code:
       0: aload_0
       1: getfield      #5                  // Field encoder:Lorg/springframework/core/codec/Encoder;
       4: instanceof    #51                 // class org/springframework/http/codec/HttpMessageEncoder
       7: ifeq          34
      10: aload_0
      11: getfield      #5                  // Field encoder:Lorg/springframework/core/codec/Encoder;
      14: checkcast     #51                 // class org/springframework/http/codec/HttpMessageEncoder
      17: astore        6
      19: aload         6
      21: aload_1
      22: aload_2
      23: aload_3
      24: aload         4
      26: aload         5
      28: invokeinterface #68,  6           // InterfaceMethod org/springframework/http/codec/HttpMessageEncoder.getEncodeHints:(Lorg/springframework/core/ResolvableType;Lorg/springframework/core/ResolvableType;Lorg/springframework/http/MediaType;Lorg/springframework/http/server/reactive/ServerHttpRequest;Lorg/springframework/http/server/reactive/ServerHttpResponse;)Ljava/util/Map;
      33: areturn
      34: invokestatic  #69                 // Method org/springframework/core/codec/Hints.none:()Ljava/util/Map;
      37: areturn

  private static reactor.core.publisher.Mono lambda$write$2(org.springframework.core.io.buffer.DataBuffer);
    Code:
       0: aload_0
       1: invokestatic  #70                 // Method reactor/core/publisher/Mono.just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
       4: ldc           #71                 // class org/springframework/core/io/buffer/PooledDataBuffer
       6: invokedynamic #72,  0             // InvokeDynamic #4:accept:()Ljava/util/function/Consumer;
      11: invokevirtual #73                 // Method reactor/core/publisher/Mono.doOnDiscard:(Ljava/lang/Class;Ljava/util/function/Consumer;)Lreactor/core/publisher/Mono;
      14: areturn

  private static reactor.core.publisher.Mono lambda$write$1(org.springframework.http.HttpHeaders, org.springframework.http.ReactiveHttpOutputMessage, org.springframework.core.io.buffer.DataBuffer);
    Code:
       0: aload_0
       1: aload_2
       2: invokeinterface #74,  1           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.readableByteCount:()I
       7: i2l
       8: invokevirtual #75                 // Method org/springframework/http/HttpHeaders.setContentLength:(J)V
      11: aload_1
      12: aload_2
      13: invokestatic  #70                 // Method reactor/core/publisher/Mono.just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
      16: ldc           #71                 // class org/springframework/core/io/buffer/PooledDataBuffer
      18: invokedynamic #72,  0             // InvokeDynamic #4:accept:()Ljava/util/function/Consumer;
      23: invokevirtual #73                 // Method reactor/core/publisher/Mono.doOnDiscard:(Ljava/lang/Class;Ljava/util/function/Consumer;)Lreactor/core/publisher/Mono;
      26: invokeinterface #41,  2           // InterfaceMethod org/springframework/http/ReactiveHttpOutputMessage.writeWith:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
      31: areturn

  private static reactor.core.publisher.Mono lambda$write$0(org.springframework.http.HttpHeaders, org.springframework.http.ReactiveHttpOutputMessage);
    Code:
       0: aload_0
       1: lconst_0
       2: invokevirtual #75                 // Method org/springframework/http/HttpHeaders.setContentLength:(J)V
       5: aload_1
       6: invokeinterface #76,  1           // InterfaceMethod org/springframework/http/ReactiveHttpOutputMessage.setComplete:()Lreactor/core/publisher/Mono;
      11: invokestatic  #77                 // Method reactor/core/publisher/Mono.empty:()Lreactor/core/publisher/Mono;
      14: invokevirtual #78                 // Method reactor/core/publisher/Mono.then:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      17: areturn
}
