Compiled from "ServerSentEventHttpMessageWriter.java"
public class org.springframework.http.codec.ServerSentEventHttpMessageWriter implements org.springframework.http.codec.HttpMessageWriter<java.lang.Object> {
  private static final org.springframework.http.MediaType DEFAULT_MEDIA_TYPE;

  private static final java.util.List<org.springframework.http.MediaType> WRITABLE_MEDIA_TYPES;

  private final org.springframework.core.codec.Encoder<?> encoder;

  public org.springframework.http.codec.ServerSentEventHttpMessageWriter();
    Code:
       0: aload_0
       1: aconst_null
       2: invokespecial #1                  // Method "<init>":(Lorg/springframework/core/codec/Encoder;)V
       5: return

  public org.springframework.http.codec.ServerSentEventHttpMessageWriter(org.springframework.core.codec.Encoder<?>);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #3                  // Field encoder:Lorg/springframework/core/codec/Encoder;
       9: return

  public org.springframework.core.codec.Encoder<?> getEncoder();
    Code:
       0: aload_0
       1: getfield      #3                  // Field encoder:Lorg/springframework/core/codec/Encoder;
       4: areturn

  public java.util.List<org.springframework.http.MediaType> getWritableMediaTypes();
    Code:
       0: getstatic     #4                  // Field WRITABLE_MEDIA_TYPES:Ljava/util/List;
       3: areturn

  public boolean canWrite(org.springframework.core.ResolvableType, org.springframework.http.MediaType);
    Code:
       0: aload_2
       1: ifnull        26
       4: getstatic     #5                  // Field org/springframework/http/MediaType.TEXT_EVENT_STREAM:Lorg/springframework/http/MediaType;
       7: aload_2
       8: invokevirtual #6                  // Method org/springframework/http/MediaType.includes:(Lorg/springframework/http/MediaType;)Z
      11: ifne          26
      14: ldc           #7                  // class org/springframework/http/codec/ServerSentEvent
      16: aload_1
      17: invokevirtual #8                  // Method org/springframework/core/ResolvableType.toClass:()Ljava/lang/Class;
      20: invokevirtual #9                  // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
      23: ifeq          30
      26: iconst_1
      27: goto          31
      30: iconst_0
      31: ireturn

  public reactor.core.publisher.Mono<java.lang.Void> write(org.reactivestreams.Publisher<?>, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.ReactiveHttpOutputMessage, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_3
       1: ifnull        15
       4: aload_3
       5: invokevirtual #10                 // Method org/springframework/http/MediaType.getCharset:()Ljava/nio/charset/Charset;
       8: ifnull        15
      11: aload_3
      12: goto          18
      15: getstatic     #11                 // Field DEFAULT_MEDIA_TYPE:Lorg/springframework/http/MediaType;
      18: astore_3
      19: aload         4
      21: invokeinterface #12,  1           // InterfaceMethod org/springframework/http/ReactiveHttpOutputMessage.bufferFactory:()Lorg/springframework/core/io/buffer/DataBufferFactory;
      26: astore        6
      28: aload         4
      30: invokeinterface #13,  1           // InterfaceMethod org/springframework/http/ReactiveHttpOutputMessage.getHeaders:()Lorg/springframework/http/HttpHeaders;
      35: aload_3
      36: invokevirtual #14                 // Method org/springframework/http/HttpHeaders.setContentType:(Lorg/springframework/http/MediaType;)V
      39: aload         4
      41: aload_0
      42: aload_1
      43: aload_2
      44: aload_3
      45: aload         6
      47: aload         5
      49: invokespecial #15                 // Method encode:(Lorg/reactivestreams/Publisher;Lorg/springframework/core/ResolvableType;Lorg/springframework/http/MediaType;Lorg/springframework/core/io/buffer/DataBufferFactory;Ljava/util/Map;)Lreactor/core/publisher/Flux;
      52: invokeinterface #16,  2           // InterfaceMethod org/springframework/http/ReactiveHttpOutputMessage.writeAndFlushWith:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Mono;
      57: areturn

  private reactor.core.publisher.Flux<org.reactivestreams.Publisher<org.springframework.core.io.buffer.DataBuffer>> encode(org.reactivestreams.Publisher<?>, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.core.io.buffer.DataBufferFactory, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: ldc           #7                  // class org/springframework/http/codec/ServerSentEvent
       2: aload_2
       3: invokevirtual #8                  // Method org/springframework/core/ResolvableType.toClass:()Ljava/lang/Class;
       6: invokevirtual #9                  // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
       9: ifeq          22
      12: aload_2
      13: iconst_0
      14: newarray       int
      16: invokevirtual #17                 // Method org/springframework/core/ResolvableType.getGeneric:([I)Lorg/springframework/core/ResolvableType;
      19: goto          23
      22: aload_2
      23: astore        6
      25: aload_1
      26: invokestatic  #18                 // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      29: aload_0
      30: aload_3
      31: aload         4
      33: aload         6
      35: aload         5
      37: invokedynamic #19,  0             // InvokeDynamic #0:apply:(Lorg/springframework/http/codec/ServerSentEventHttpMessageWriter;Lorg/springframework/http/MediaType;Lorg/springframework/core/io/buffer/DataBufferFactory;Lorg/springframework/core/ResolvableType;Ljava/util/Map;)Ljava/util/function/Function;
      42: invokevirtual #20                 // Method reactor/core/publisher/Flux.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      45: areturn

  private void writeField(java.lang.String, java.lang.Object, java.lang.StringBuilder);
    Code:
       0: aload_3
       1: aload_1
       2: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
       5: pop
       6: aload_3
       7: bipush        58
       9: invokevirtual #22                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      12: pop
      13: aload_3
      14: aload_2
      15: invokevirtual #23                 // Method java/lang/Object.toString:()Ljava/lang/String;
      18: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      21: pop
      22: aload_3
      23: ldc           #24                 // String \n
      25: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: pop
      29: return

  private <T> reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> encodeData(T, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.core.io.buffer.DataBufferFactory, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_1
       1: ifnonnull     8
       4: invokestatic  #25                 // Method reactor/core/publisher/Flux.empty:()Lreactor/core/publisher/Flux;
       7: areturn
       8: aload_1
       9: instanceof    #26                 // class java/lang/String
      12: ifeq          59
      15: aload_1
      16: checkcast     #26                 // class java/lang/String
      19: astore        6
      21: aload_0
      22: new           #27                 // class java/lang/StringBuilder
      25: dup
      26: invokespecial #28                 // Method java/lang/StringBuilder."<init>":()V
      29: aload         6
      31: ldc           #24                 // String \n
      33: ldc           #29                 // String \ndata:
      35: invokestatic  #30                 // Method org/springframework/util/StringUtils.replace:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      38: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      41: ldc           #24                 // String \n
      43: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      46: invokevirtual #31                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      49: aload_3
      50: aload         4
      52: invokespecial #32                 // Method encodeText:(Ljava/lang/CharSequence;Lorg/springframework/http/MediaType;Lorg/springframework/core/io/buffer/DataBufferFactory;)Lreactor/core/publisher/Mono;
      55: invokestatic  #18                 // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      58: areturn
      59: aload_0
      60: getfield      #3                  // Field encoder:Lorg/springframework/core/codec/Encoder;
      63: ifnonnull     79
      66: new           #33                 // class org/springframework/core/codec/CodecException
      69: dup
      70: ldc           #34                 // String No SSE encoder configured and the data is not String.
      72: invokespecial #35                 // Method org/springframework/core/codec/CodecException."<init>":(Ljava/lang/String;)V
      75: invokestatic  #36                 // Method reactor/core/publisher/Flux.error:(Ljava/lang/Throwable;)Lreactor/core/publisher/Flux;
      78: areturn
      79: aload_0
      80: getfield      #3                  // Field encoder:Lorg/springframework/core/codec/Encoder;
      83: aload_1
      84: invokestatic  #37                 // Method reactor/core/publisher/Mono.just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
      87: aload         4
      89: aload_2
      90: aload_3
      91: aload         5
      93: invokeinterface #38,  6           // InterfaceMethod org/springframework/core/codec/Encoder.encode:(Lorg/reactivestreams/Publisher;Lorg/springframework/core/io/buffer/DataBufferFactory;Lorg/springframework/core/ResolvableType;Lorg/springframework/util/MimeType;Ljava/util/Map;)Lreactor/core/publisher/Flux;
      98: aload_0
      99: ldc           #24                 // String \n
     101: aload_3
     102: aload         4
     104: invokespecial #32                 // Method encodeText:(Ljava/lang/CharSequence;Lorg/springframework/http/MediaType;Lorg/springframework/core/io/buffer/DataBufferFactory;)Lreactor/core/publisher/Mono;
     107: invokevirtual #39                 // Method reactor/core/publisher/Flux.concatWith:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
     110: areturn

  private reactor.core.publisher.Mono<org.springframework.core.io.buffer.DataBuffer> encodeText(java.lang.CharSequence, org.springframework.http.MediaType, org.springframework.core.io.buffer.DataBufferFactory);
    Code:
       0: aload_2
       1: invokevirtual #10                 // Method org/springframework/http/MediaType.getCharset:()Ljava/nio/charset/Charset;
       4: ldc           #40                 // String Expected MediaType with charset
       6: invokestatic  #41                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       9: aload_1
      10: invokeinterface #42,  1           // InterfaceMethod java/lang/CharSequence.toString:()Ljava/lang/String;
      15: aload_2
      16: invokevirtual #10                 // Method org/springframework/http/MediaType.getCharset:()Ljava/nio/charset/Charset;
      19: invokevirtual #43                 // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B
      22: astore        4
      24: aload_3
      25: aload         4
      27: invokeinterface #44,  2           // InterfaceMethod org/springframework/core/io/buffer/DataBufferFactory.wrap:([B)Lorg/springframework/core/io/buffer/DataBuffer;
      32: invokestatic  #37                 // Method reactor/core/publisher/Mono.just:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
      35: areturn

  public reactor.core.publisher.Mono<java.lang.Void> write(org.reactivestreams.Publisher<?>, org.springframework.core.ResolvableType, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload         7
       2: aload_0
       3: aload_2
       4: aload_3
       5: aload         4
       7: aload         5
       9: aload         6
      11: invokespecial #45                 // Method getEncodeHints:(Lorg/springframework/core/ResolvableType;Lorg/springframework/core/ResolvableType;Lorg/springframework/http/MediaType;Lorg/springframework/http/server/reactive/ServerHttpRequest;Lorg/springframework/http/server/reactive/ServerHttpResponse;)Ljava/util/Map;
      14: invokestatic  #46                 // Method org/springframework/core/codec/Hints.merge:(Ljava/util/Map;Ljava/util/Map;)Ljava/util/Map;
      17: astore        8
      19: aload_0
      20: aload_1
      21: aload_3
      22: aload         4
      24: aload         6
      26: aload         8
      28: invokevirtual #47                 // Method write:(Lorg/reactivestreams/Publisher;Lorg/springframework/core/ResolvableType;Lorg/springframework/http/MediaType;Lorg/springframework/http/ReactiveHttpOutputMessage;Ljava/util/Map;)Lreactor/core/publisher/Mono;
      31: areturn

  private java.util.Map<java.lang.String, java.lang.Object> getEncodeHints(org.springframework.core.ResolvableType, org.springframework.core.ResolvableType, org.springframework.http.MediaType, org.springframework.http.server.reactive.ServerHttpRequest, org.springframework.http.server.reactive.ServerHttpResponse);
    Code:
       0: aload_0
       1: getfield      #3                  // Field encoder:Lorg/springframework/core/codec/Encoder;
       4: instanceof    #48                 // class org/springframework/http/codec/HttpMessageEncoder
       7: ifeq          34
      10: aload_0
      11: getfield      #3                  // Field encoder:Lorg/springframework/core/codec/Encoder;
      14: checkcast     #48                 // class org/springframework/http/codec/HttpMessageEncoder
      17: astore        6
      19: aload         6
      21: aload_1
      22: aload_2
      23: aload_3
      24: aload         4
      26: aload         5
      28: invokeinterface #49,  6           // InterfaceMethod org/springframework/http/codec/HttpMessageEncoder.getEncodeHints:(Lorg/springframework/core/ResolvableType;Lorg/springframework/core/ResolvableType;Lorg/springframework/http/MediaType;Lorg/springframework/http/server/reactive/ServerHttpRequest;Lorg/springframework/http/server/reactive/ServerHttpResponse;)Ljava/util/Map;
      33: areturn
      34: invokestatic  #50                 // Method org/springframework/core/codec/Hints.none:()Ljava/util/Map;
      37: areturn

  private org.reactivestreams.Publisher lambda$encode$0(org.springframework.http.MediaType, org.springframework.core.io.buffer.DataBufferFactory, org.springframework.core.ResolvableType, java.util.Map, java.lang.Object);
    Code:
       0: aload         5
       2: instanceof    #7                  // class org/springframework/http/codec/ServerSentEvent
       5: ifeq          16
       8: aload         5
      10: checkcast     #7                  // class org/springframework/http/codec/ServerSentEvent
      13: goto          31
      16: invokestatic  #51                 // Method org/springframework/http/codec/ServerSentEvent.builder:()Lorg/springframework/http/codec/ServerSentEvent$Builder;
      19: aload         5
      21: invokeinterface #52,  2           // InterfaceMethod org/springframework/http/codec/ServerSentEvent$Builder.data:(Ljava/lang/Object;)Lorg/springframework/http/codec/ServerSentEvent$Builder;
      26: invokeinterface #53,  1           // InterfaceMethod org/springframework/http/codec/ServerSentEvent$Builder.build:()Lorg/springframework/http/codec/ServerSentEvent;
      31: astore        6
      33: new           #27                 // class java/lang/StringBuilder
      36: dup
      37: invokespecial #28                 // Method java/lang/StringBuilder."<init>":()V
      40: astore        7
      42: aload         6
      44: invokevirtual #54                 // Method org/springframework/http/codec/ServerSentEvent.id:()Ljava/lang/String;
      47: astore        8
      49: aload         6
      51: invokevirtual #55                 // Method org/springframework/http/codec/ServerSentEvent.event:()Ljava/lang/String;
      54: astore        9
      56: aload         6
      58: invokevirtual #56                 // Method org/springframework/http/codec/ServerSentEvent.retry:()Ljava/time/Duration;
      61: astore        10
      63: aload         6
      65: invokevirtual #57                 // Method org/springframework/http/codec/ServerSentEvent.comment:()Ljava/lang/String;
      68: astore        11
      70: aload         6
      72: invokevirtual #58                 // Method org/springframework/http/codec/ServerSentEvent.data:()Ljava/lang/Object;
      75: astore        12
      77: aload         8
      79: ifnull        92
      82: aload_0
      83: ldc           #59                 // String id
      85: aload         8
      87: aload         7
      89: invokespecial #60                 // Method writeField:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/StringBuilder;)V
      92: aload         9
      94: ifnull        107
      97: aload_0
      98: ldc           #61                 // String event
     100: aload         9
     102: aload         7
     104: invokespecial #60                 // Method writeField:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/StringBuilder;)V
     107: aload         10
     109: ifnull        128
     112: aload_0
     113: ldc           #62                 // String retry
     115: aload         10
     117: invokevirtual #63                 // Method java/time/Duration.toMillis:()J
     120: invokestatic  #64                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     123: aload         7
     125: invokespecial #60                 // Method writeField:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/StringBuilder;)V
     128: aload         11
     130: ifnull        158
     133: aload         7
     135: bipush        58
     137: invokevirtual #22                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
     140: aload         11
     142: ldc           #24                 // String \n
     144: ldc           #65                 // String \n:
     146: invokestatic  #30                 // Method org/springframework/util/StringUtils.replace:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
     149: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     152: ldc           #24                 // String \n
     154: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     157: pop
     158: aload         12
     160: ifnull        171
     163: aload         7
     165: ldc           #66                 // String data:
     167: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     170: pop
     171: iconst_3
     172: anewarray     #67                 // class org/reactivestreams/Publisher
     175: dup
     176: iconst_0
     177: aload_0
     178: aload         7
     180: aload_1
     181: aload_2
     182: invokespecial #32                 // Method encodeText:(Ljava/lang/CharSequence;Lorg/springframework/http/MediaType;Lorg/springframework/core/io/buffer/DataBufferFactory;)Lreactor/core/publisher/Mono;
     185: aastore
     186: dup
     187: iconst_1
     188: aload_0
     189: aload         12
     191: aload_3
     192: aload_1
     193: aload_2
     194: aload         4
     196: invokespecial #68                 // Method encodeData:(Ljava/lang/Object;Lorg/springframework/core/ResolvableType;Lorg/springframework/http/MediaType;Lorg/springframework/core/io/buffer/DataBufferFactory;Ljava/util/Map;)Lreactor/core/publisher/Flux;
     199: aastore
     200: dup
     201: iconst_2
     202: aload_0
     203: ldc           #24                 // String \n
     205: aload_1
     206: aload_2
     207: invokespecial #32                 // Method encodeText:(Ljava/lang/CharSequence;Lorg/springframework/http/MediaType;Lorg/springframework/core/io/buffer/DataBufferFactory;)Lreactor/core/publisher/Mono;
     210: aastore
     211: invokestatic  #69                 // Method reactor/core/publisher/Flux.concat:([Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
     214: astore        13
     216: aload         13
     218: ldc           #70                 // class org/springframework/core/io/buffer/PooledDataBuffer
     220: invokedynamic #71,  0             // InvokeDynamic #1:accept:()Ljava/util/function/Consumer;
     225: invokevirtual #72                 // Method reactor/core/publisher/Flux.doOnDiscard:(Ljava/lang/Class;Ljava/util/function/Consumer;)Lreactor/core/publisher/Flux;
     228: areturn

  static {};
    Code:
       0: new           #73                 // class org/springframework/http/MediaType
       3: dup
       4: ldc           #74                 // String text
       6: ldc           #75                 // String event-stream
       8: getstatic     #76                 // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
      11: invokespecial #77                 // Method org/springframework/http/MediaType."<init>":(Ljava/lang/String;Ljava/lang/String;Ljava/nio/charset/Charset;)V
      14: putstatic     #11                 // Field DEFAULT_MEDIA_TYPE:Lorg/springframework/http/MediaType;
      17: getstatic     #5                  // Field org/springframework/http/MediaType.TEXT_EVENT_STREAM:Lorg/springframework/http/MediaType;
      20: invokestatic  #78                 // Method java/util/Collections.singletonList:(Ljava/lang/Object;)Ljava/util/List;
      23: putstatic     #4                  // Field WRITABLE_MEDIA_TYPES:Ljava/util/List;
      26: return
}
