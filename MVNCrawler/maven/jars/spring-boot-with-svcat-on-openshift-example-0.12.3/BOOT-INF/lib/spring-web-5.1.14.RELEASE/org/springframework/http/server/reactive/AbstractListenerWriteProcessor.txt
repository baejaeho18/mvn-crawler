Compiled from "AbstractListenerWriteProcessor.java"
public abstract class org.springframework.http.server.reactive.AbstractListenerWriteProcessor<T> implements org.reactivestreams.Processor<T, java.lang.Void> {
  protected static final org.apache.commons.logging.Log rsWriteLogger;

  private final java.util.concurrent.atomic.AtomicReference<org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State> state;

  private org.reactivestreams.Subscription subscription;

  private volatile T currentData;

  private volatile boolean subscriberCompleted;

  private volatile boolean readyToCompleteAfterLastWrite;

  private final org.springframework.http.server.reactive.WriteResultPublisher resultPublisher;

  private final java.lang.String logPrefix;

  public org.springframework.http.server.reactive.AbstractListenerWriteProcessor();
    Code:
       0: aload_0
       1: ldc           #11                 // String
       3: invokespecial #12                 // Method "<init>":(Ljava/lang/String;)V
       6: return

  public org.springframework.http.server.reactive.AbstractListenerWriteProcessor(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #13                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #14                 // class java/util/concurrent/atomic/AtomicReference
       8: dup
       9: getstatic     #15                 // Field org/springframework/http/server/reactive/AbstractListenerWriteProcessor$State.UNSUBSCRIBED:Lorg/springframework/http/server/reactive/AbstractListenerWriteProcessor$State;
      12: invokespecial #16                 // Method java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
      15: putfield      #3                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      18: aload_0
      19: aload_1
      20: putfield      #17                 // Field logPrefix:Ljava/lang/String;
      23: aload_0
      24: new           #18                 // class org/springframework/http/server/reactive/WriteResultPublisher
      27: dup
      28: aload_1
      29: invokespecial #19                 // Method org/springframework/http/server/reactive/WriteResultPublisher."<init>":(Ljava/lang/String;)V
      32: putfield      #1                  // Field resultPublisher:Lorg/springframework/http/server/reactive/WriteResultPublisher;
      35: return

  public java.lang.String getLogPrefix();
    Code:
       0: aload_0
       1: getfield      #17                 // Field logPrefix:Ljava/lang/String;
       4: areturn

  public final void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #3                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #20                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #21                 // class org/springframework/http/server/reactive/AbstractListenerWriteProcessor$State
      10: aload_0
      11: aload_1
      12: invokevirtual #22                 // Method org/springframework/http/server/reactive/AbstractListenerWriteProcessor$State.onSubscribe:(Lorg/springframework/http/server/reactive/AbstractListenerWriteProcessor;Lorg/reactivestreams/Subscription;)V
      15: return

  public final void onNext(T);
    Code:
       0: getstatic     #23                 // Field rsWriteLogger:Lorg/apache/commons/logging/Log;
       3: invokeinterface #24,  1           // InterfaceMethod org/apache/commons/logging/Log.isTraceEnabled:()Z
       8: ifeq          41
      11: getstatic     #23                 // Field rsWriteLogger:Lorg/apache/commons/logging/Log;
      14: new           #25                 // class java/lang/StringBuilder
      17: dup
      18: invokespecial #26                 // Method java/lang/StringBuilder."<init>":()V
      21: aload_0
      22: invokevirtual #27                 // Method getLogPrefix:()Ljava/lang/String;
      25: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: ldc           #29                 // String Item to write
      30: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: invokevirtual #30                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      36: invokeinterface #31,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      41: aload_0
      42: getfield      #3                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      45: invokevirtual #20                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      48: checkcast     #21                 // class org/springframework/http/server/reactive/AbstractListenerWriteProcessor$State
      51: aload_0
      52: aload_1
      53: invokevirtual #32                 // Method org/springframework/http/server/reactive/AbstractListenerWriteProcessor$State.onNext:(Lorg/springframework/http/server/reactive/AbstractListenerWriteProcessor;Ljava/lang/Object;)V
      56: return

  public final void onError(java.lang.Throwable);
    Code:
       0: getstatic     #23                 // Field rsWriteLogger:Lorg/apache/commons/logging/Log;
       3: invokeinterface #24,  1           // InterfaceMethod org/apache/commons/logging/Log.isTraceEnabled:()Z
       8: ifeq          45
      11: getstatic     #23                 // Field rsWriteLogger:Lorg/apache/commons/logging/Log;
      14: new           #25                 // class java/lang/StringBuilder
      17: dup
      18: invokespecial #26                 // Method java/lang/StringBuilder."<init>":()V
      21: aload_0
      22: invokevirtual #27                 // Method getLogPrefix:()Ljava/lang/String;
      25: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: ldc           #33                 // String Write source error:
      30: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: aload_1
      34: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      37: invokevirtual #30                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      40: invokeinterface #31,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      45: aload_0
      46: getfield      #3                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      49: invokevirtual #20                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      52: checkcast     #21                 // class org/springframework/http/server/reactive/AbstractListenerWriteProcessor$State
      55: aload_0
      56: aload_1
      57: invokevirtual #35                 // Method org/springframework/http/server/reactive/AbstractListenerWriteProcessor$State.onError:(Lorg/springframework/http/server/reactive/AbstractListenerWriteProcessor;Ljava/lang/Throwable;)V
      60: return

  public final void onComplete();
    Code:
       0: getstatic     #23                 // Field rsWriteLogger:Lorg/apache/commons/logging/Log;
       3: invokeinterface #24,  1           // InterfaceMethod org/apache/commons/logging/Log.isTraceEnabled:()Z
       8: ifeq          41
      11: getstatic     #23                 // Field rsWriteLogger:Lorg/apache/commons/logging/Log;
      14: new           #25                 // class java/lang/StringBuilder
      17: dup
      18: invokespecial #26                 // Method java/lang/StringBuilder."<init>":()V
      21: aload_0
      22: invokevirtual #27                 // Method getLogPrefix:()Ljava/lang/String;
      25: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: ldc           #36                 // String No more items to write
      30: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: invokevirtual #30                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      36: invokeinterface #31,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      41: aload_0
      42: getfield      #3                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      45: invokevirtual #20                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      48: checkcast     #21                 // class org/springframework/http/server/reactive/AbstractListenerWriteProcessor$State
      51: aload_0
      52: invokevirtual #37                 // Method org/springframework/http/server/reactive/AbstractListenerWriteProcessor$State.onComplete:(Lorg/springframework/http/server/reactive/AbstractListenerWriteProcessor;)V
      55: return

  public final void onWritePossible();
    Code:
       0: getstatic     #23                 // Field rsWriteLogger:Lorg/apache/commons/logging/Log;
       3: invokeinterface #24,  1           // InterfaceMethod org/apache/commons/logging/Log.isTraceEnabled:()Z
       8: ifeq          41
      11: getstatic     #23                 // Field rsWriteLogger:Lorg/apache/commons/logging/Log;
      14: new           #25                 // class java/lang/StringBuilder
      17: dup
      18: invokespecial #26                 // Method java/lang/StringBuilder."<init>":()V
      21: aload_0
      22: invokevirtual #27                 // Method getLogPrefix:()Ljava/lang/String;
      25: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: ldc           #38                 // String onWritePossible
      30: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: invokevirtual #30                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      36: invokeinterface #31,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      41: aload_0
      42: getfield      #3                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      45: invokevirtual #20                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      48: checkcast     #21                 // class org/springframework/http/server/reactive/AbstractListenerWriteProcessor$State
      51: aload_0
      52: invokevirtual #39                 // Method org/springframework/http/server/reactive/AbstractListenerWriteProcessor$State.onWritePossible:(Lorg/springframework/http/server/reactive/AbstractListenerWriteProcessor;)V
      55: return

  public void cancel();
    Code:
       0: getstatic     #23                 // Field rsWriteLogger:Lorg/apache/commons/logging/Log;
       3: new           #25                 // class java/lang/StringBuilder
       6: dup
       7: invokespecial #26                 // Method java/lang/StringBuilder."<init>":()V
      10: aload_0
      11: invokevirtual #27                 // Method getLogPrefix:()Ljava/lang/String;
      14: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      17: ldc           #40                 // String Cancellation
      19: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: invokevirtual #30                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      25: invokeinterface #31,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      30: aload_0
      31: getfield      #9                  // Field subscription:Lorg/reactivestreams/Subscription;
      34: ifnull        46
      37: aload_0
      38: getfield      #9                  // Field subscription:Lorg/reactivestreams/Subscription;
      41: invokeinterface #41,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      46: return

  public final void subscribe(org.reactivestreams.Subscriber<? super java.lang.Void>);
    Code:
       0: aload_0
       1: getfield      #1                  // Field resultPublisher:Lorg/springframework/http/server/reactive/WriteResultPublisher;
       4: aload_1
       5: invokevirtual #42                 // Method org/springframework/http/server/reactive/WriteResultPublisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
       8: return

  protected abstract boolean isDataEmpty(T);

  protected void dataReceived(T);
    Code:
       0: aload_0
       1: getfield      #5                  // Field currentData:Ljava/lang/Object;
       4: astore_2
       5: aload_2
       6: ifnull        31
       9: aload_0
      10: aload_1
      11: invokevirtual #43                 // Method discardData:(Ljava/lang/Object;)V
      14: aload_0
      15: invokevirtual #44                 // Method cancel:()V
      18: aload_0
      19: new           #45                 // class java/lang/IllegalStateException
      22: dup
      23: ldc           #46                 // String Received new data while current not processed yet.
      25: invokespecial #47                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      28: invokevirtual #48                 // Method onError:(Ljava/lang/Throwable;)V
      31: aload_0
      32: aload_1
      33: putfield      #5                  // Field currentData:Ljava/lang/Object;
      36: return

  protected abstract boolean isWritePossible();

  protected abstract boolean write(T) throws java.io.IOException;

  protected void writingPaused();
    Code:
       0: return

  protected void writingComplete();
    Code:
       0: return

  protected void writingFailed(java.lang.Throwable);
    Code:
       0: return

  protected abstract void discardData(T);

  private boolean changeState(org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State, org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State);
    Code:
       0: aload_0
       1: getfield      #3                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: aload_1
       5: aload_2
       6: invokevirtual #49                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
       9: istore_3
      10: iload_3
      11: ifeq          63
      14: getstatic     #23                 // Field rsWriteLogger:Lorg/apache/commons/logging/Log;
      17: invokeinterface #24,  1           // InterfaceMethod org/apache/commons/logging/Log.isTraceEnabled:()Z
      22: ifeq          63
      25: getstatic     #23                 // Field rsWriteLogger:Lorg/apache/commons/logging/Log;
      28: new           #25                 // class java/lang/StringBuilder
      31: dup
      32: invokespecial #26                 // Method java/lang/StringBuilder."<init>":()V
      35: aload_0
      36: invokevirtual #27                 // Method getLogPrefix:()Ljava/lang/String;
      39: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      42: aload_1
      43: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      46: ldc           #50                 // String  ->
      48: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      51: aload_2
      52: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      55: invokevirtual #30                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      58: invokeinterface #31,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      63: iload_3
      64: ireturn

  private void changeStateToReceived(org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #51                 // Field org/springframework/http/server/reactive/AbstractListenerWriteProcessor$State.RECEIVED:Lorg/springframework/http/server/reactive/AbstractListenerWriteProcessor$State;
       5: invokespecial #10                 // Method changeState:(Lorg/springframework/http/server/reactive/AbstractListenerWriteProcessor$State;Lorg/springframework/http/server/reactive/AbstractListenerWriteProcessor$State;)Z
       8: ifeq          15
      11: aload_0
      12: invokespecial #52                 // Method writeIfPossible:()V
      15: return

  private void changeStateToComplete(org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #53                 // Field org/springframework/http/server/reactive/AbstractListenerWriteProcessor$State.COMPLETED:Lorg/springframework/http/server/reactive/AbstractListenerWriteProcessor$State;
       5: invokespecial #10                 // Method changeState:(Lorg/springframework/http/server/reactive/AbstractListenerWriteProcessor$State;Lorg/springframework/http/server/reactive/AbstractListenerWriteProcessor$State;)Z
       8: ifeq          29
      11: aload_0
      12: invokespecial #2                  // Method discardCurrentData:()V
      15: aload_0
      16: invokevirtual #54                 // Method writingComplete:()V
      19: aload_0
      20: getfield      #1                  // Field resultPublisher:Lorg/springframework/http/server/reactive/WriteResultPublisher;
      23: invokevirtual #55                 // Method org/springframework/http/server/reactive/WriteResultPublisher.publishComplete:()V
      26: goto          43
      29: aload_0
      30: getfield      #3                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      33: invokevirtual #20                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      36: checkcast     #21                 // class org/springframework/http/server/reactive/AbstractListenerWriteProcessor$State
      39: aload_0
      40: invokevirtual #37                 // Method org/springframework/http/server/reactive/AbstractListenerWriteProcessor$State.onComplete:(Lorg/springframework/http/server/reactive/AbstractListenerWriteProcessor;)V
      43: return

  private void writeIfPossible();
    Code:
       0: aload_0
       1: invokevirtual #56                 // Method isWritePossible:()Z
       4: istore_1
       5: iload_1
       6: ifne          50
       9: getstatic     #23                 // Field rsWriteLogger:Lorg/apache/commons/logging/Log;
      12: invokeinterface #24,  1           // InterfaceMethod org/apache/commons/logging/Log.isTraceEnabled:()Z
      17: ifeq          50
      20: getstatic     #23                 // Field rsWriteLogger:Lorg/apache/commons/logging/Log;
      23: new           #25                 // class java/lang/StringBuilder
      26: dup
      27: invokespecial #26                 // Method java/lang/StringBuilder."<init>":()V
      30: aload_0
      31: invokevirtual #27                 // Method getLogPrefix:()Ljava/lang/String;
      34: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      37: ldc           #57                 // String isWritePossible: false
      39: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      42: invokevirtual #30                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      45: invokeinterface #31,  2           // InterfaceMethod org/apache/commons/logging/Log.trace:(Ljava/lang/Object;)V
      50: iload_1
      51: ifeq          58
      54: aload_0
      55: invokevirtual #58                 // Method onWritePossible:()V
      58: return

  private void discardCurrentData();
    Code:
       0: aload_0
       1: getfield      #5                  // Field currentData:Ljava/lang/Object;
       4: astore_1
       5: aload_0
       6: aconst_null
       7: putfield      #5                  // Field currentData:Ljava/lang/Object;
      10: aload_1
      11: ifnull        19
      14: aload_0
      15: aload_1
      16: invokevirtual #43                 // Method discardData:(Ljava/lang/Object;)V
      19: return

  static boolean access$100(org.springframework.http.server.reactive.AbstractListenerWriteProcessor, org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State, org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #10                 // Method changeState:(Lorg/springframework/http/server/reactive/AbstractListenerWriteProcessor$State;Lorg/springframework/http/server/reactive/AbstractListenerWriteProcessor$State;)Z
       6: ireturn

  static org.reactivestreams.Subscription access$202(org.springframework.http.server.reactive.AbstractListenerWriteProcessor, org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #9                  // Field subscription:Lorg/reactivestreams/Subscription;
       6: areturn

  static void access$300(org.springframework.http.server.reactive.AbstractListenerWriteProcessor, org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #8                  // Method changeStateToComplete:(Lorg/springframework/http/server/reactive/AbstractListenerWriteProcessor$State;)V
       5: return

  static org.reactivestreams.Subscription access$200(org.springframework.http.server.reactive.AbstractListenerWriteProcessor);
    Code:
       0: aload_0
       1: getfield      #9                  // Field subscription:Lorg/reactivestreams/Subscription;
       4: areturn

  static void access$400(org.springframework.http.server.reactive.AbstractListenerWriteProcessor, org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #7                  // Method changeStateToReceived:(Lorg/springframework/http/server/reactive/AbstractListenerWriteProcessor$State;)V
       5: return

  static boolean access$502(org.springframework.http.server.reactive.AbstractListenerWriteProcessor, boolean);
    Code:
       0: aload_0
       1: iload_1
       2: dup_x1
       3: putfield      #6                  // Field readyToCompleteAfterLastWrite:Z
       6: ireturn

  static boolean access$500(org.springframework.http.server.reactive.AbstractListenerWriteProcessor);
    Code:
       0: aload_0
       1: getfield      #6                  // Field readyToCompleteAfterLastWrite:Z
       4: ireturn

  static java.lang.Object access$600(org.springframework.http.server.reactive.AbstractListenerWriteProcessor);
    Code:
       0: aload_0
       1: getfield      #5                  // Field currentData:Ljava/lang/Object;
       4: areturn

  static java.lang.Object access$602(org.springframework.http.server.reactive.AbstractListenerWriteProcessor, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #5                  // Field currentData:Ljava/lang/Object;
       6: areturn

  static boolean access$700(org.springframework.http.server.reactive.AbstractListenerWriteProcessor);
    Code:
       0: aload_0
       1: getfield      #4                  // Field subscriberCompleted:Z
       4: ireturn

  static boolean access$702(org.springframework.http.server.reactive.AbstractListenerWriteProcessor, boolean);
    Code:
       0: aload_0
       1: iload_1
       2: dup_x1
       3: putfield      #4                  // Field subscriberCompleted:Z
       6: ireturn

  static java.util.concurrent.atomic.AtomicReference access$800(org.springframework.http.server.reactive.AbstractListenerWriteProcessor);
    Code:
       0: aload_0
       1: getfield      #3                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: areturn

  static void access$900(org.springframework.http.server.reactive.AbstractListenerWriteProcessor);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method discardCurrentData:()V
       4: return

  static org.springframework.http.server.reactive.WriteResultPublisher access$1000(org.springframework.http.server.reactive.AbstractListenerWriteProcessor);
    Code:
       0: aload_0
       1: getfield      #1                  // Field resultPublisher:Lorg/springframework/http/server/reactive/WriteResultPublisher;
       4: areturn

  static {};
    Code:
       0: ldc           #59                 // class org/springframework/http/server/reactive/AbstractListenerWriteProcessor
       2: invokestatic  #60                 // Method org/springframework/core/log/LogDelegateFactory.getHiddenLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
       5: putstatic     #23                 // Field rsWriteLogger:Lorg/apache/commons/logging/Log;
       8: return
}
