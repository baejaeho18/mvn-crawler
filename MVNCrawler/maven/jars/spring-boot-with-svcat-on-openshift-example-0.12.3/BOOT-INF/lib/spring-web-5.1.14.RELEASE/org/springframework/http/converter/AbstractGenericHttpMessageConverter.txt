Compiled from "AbstractGenericHttpMessageConverter.java"
public abstract class org.springframework.http.converter.AbstractGenericHttpMessageConverter<T> extends org.springframework.http.converter.AbstractHttpMessageConverter<T> implements org.springframework.http.converter.GenericHttpMessageConverter<T> {
  protected org.springframework.http.converter.AbstractGenericHttpMessageConverter();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/springframework/http/converter/AbstractHttpMessageConverter."<init>":()V
       4: return

  protected org.springframework.http.converter.AbstractGenericHttpMessageConverter(org.springframework.http.MediaType);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #2                  // Method org/springframework/http/converter/AbstractHttpMessageConverter."<init>":(Lorg/springframework/http/MediaType;)V
       5: return

  protected org.springframework.http.converter.AbstractGenericHttpMessageConverter(org.springframework.http.MediaType...);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #3                  // Method org/springframework/http/converter/AbstractHttpMessageConverter."<init>":([Lorg/springframework/http/MediaType;)V
       5: return

  protected boolean supports(java.lang.Class<?>);
    Code:
       0: iconst_1
       1: ireturn

  public boolean canRead(java.lang.reflect.Type, java.lang.Class<?>, org.springframework.http.MediaType);
    Code:
       0: aload_1
       1: instanceof    #4                  // class java/lang/Class
       4: ifeq          19
       7: aload_0
       8: aload_1
       9: checkcast     #4                  // class java/lang/Class
      12: aload_3
      13: invokevirtual #5                  // Method canRead:(Ljava/lang/Class;Lorg/springframework/http/MediaType;)Z
      16: goto          24
      19: aload_0
      20: aload_3
      21: invokevirtual #6                  // Method canRead:(Lorg/springframework/http/MediaType;)Z
      24: ireturn

  public boolean canWrite(java.lang.reflect.Type, java.lang.Class<?>, org.springframework.http.MediaType);
    Code:
       0: aload_0
       1: aload_2
       2: aload_3
       3: invokevirtual #7                  // Method canWrite:(Ljava/lang/Class;Lorg/springframework/http/MediaType;)Z
       6: ireturn

  public final void write(T, java.lang.reflect.Type, org.springframework.http.MediaType, org.springframework.http.HttpOutputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotWritableException;
    Code:
       0: aload         4
       2: invokeinterface #8,  1            // InterfaceMethod org/springframework/http/HttpOutputMessage.getHeaders:()Lorg/springframework/http/HttpHeaders;
       7: astore        5
       9: aload_0
      10: aload         5
      12: aload_1
      13: aload_3
      14: invokevirtual #9                  // Method addDefaultHeaders:(Lorg/springframework/http/HttpHeaders;Ljava/lang/Object;Lorg/springframework/http/MediaType;)V
      17: aload         4
      19: instanceof    #10                 // class org/springframework/http/StreamingHttpOutputMessage
      22: ifeq          52
      25: aload         4
      27: checkcast     #10                 // class org/springframework/http/StreamingHttpOutputMessage
      30: astore        6
      32: aload         6
      34: aload_0
      35: aload_1
      36: aload_2
      37: aload         5
      39: invokedynamic #11,  0             // InvokeDynamic #0:writeTo:(Lorg/springframework/http/converter/AbstractGenericHttpMessageConverter;Ljava/lang/Object;Ljava/lang/reflect/Type;Lorg/springframework/http/HttpHeaders;)Lorg/springframework/http/StreamingHttpOutputMessage$Body;
      44: invokeinterface #12,  2           // InterfaceMethod org/springframework/http/StreamingHttpOutputMessage.setBody:(Lorg/springframework/http/StreamingHttpOutputMessage$Body;)V
      49: goto          70
      52: aload_0
      53: aload_1
      54: aload_2
      55: aload         4
      57: invokevirtual #13                 // Method writeInternal:(Ljava/lang/Object;Ljava/lang/reflect/Type;Lorg/springframework/http/HttpOutputMessage;)V
      60: aload         4
      62: invokeinterface #14,  1           // InterfaceMethod org/springframework/http/HttpOutputMessage.getBody:()Ljava/io/OutputStream;
      67: invokevirtual #15                 // Method java/io/OutputStream.flush:()V
      70: return

  protected void writeInternal(T, org.springframework.http.HttpOutputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotWritableException;
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: aload_2
       4: invokevirtual #13                 // Method writeInternal:(Ljava/lang/Object;Ljava/lang/reflect/Type;Lorg/springframework/http/HttpOutputMessage;)V
       7: return

  protected abstract void writeInternal(T, java.lang.reflect.Type, org.springframework.http.HttpOutputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotWritableException;

  private void lambda$write$0(java.lang.Object, java.lang.reflect.Type, org.springframework.http.HttpHeaders, java.io.OutputStream) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: new           #16                 // class org/springframework/http/converter/AbstractGenericHttpMessageConverter$1
       6: dup
       7: aload_0
       8: aload         4
      10: aload_3
      11: invokespecial #17                 // Method org/springframework/http/converter/AbstractGenericHttpMessageConverter$1."<init>":(Lorg/springframework/http/converter/AbstractGenericHttpMessageConverter;Ljava/io/OutputStream;Lorg/springframework/http/HttpHeaders;)V
      14: invokevirtual #13                 // Method writeInternal:(Ljava/lang/Object;Ljava/lang/reflect/Type;Lorg/springframework/http/HttpOutputMessage;)V
      17: return
}
