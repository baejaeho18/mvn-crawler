Compiled from "UndertowHeadersAdapter.java"
class org.springframework.http.server.reactive.UndertowHeadersAdapter implements org.springframework.util.MultiValueMap<java.lang.String, java.lang.String> {
  private final io.undertow.util.HeaderMap headers;

  org.springframework.http.server.reactive.UndertowHeadersAdapter(io.undertow.util.HeaderMap);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #1                  // Field headers:Lio/undertow/util/HeaderMap;
       9: return

  public java.lang.String getFirst(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #1                  // Field headers:Lio/undertow/util/HeaderMap;
       4: aload_1
       5: invokevirtual #3                  // Method io/undertow/util/HeaderMap.getFirst:(Ljava/lang/String;)Ljava/lang/String;
       8: areturn

  public void add(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #1                  // Field headers:Lio/undertow/util/HeaderMap;
       4: aload_1
       5: invokestatic  #4                  // Method io/undertow/util/HttpString.tryFromString:(Ljava/lang/String;)Lio/undertow/util/HttpString;
       8: aload_2
       9: invokevirtual #5                  // Method io/undertow/util/HeaderMap.add:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
      12: pop
      13: return

  public void addAll(java.lang.String, java.util.List<? extends java.lang.String>);
    Code:
       0: aload_0
       1: getfield      #1                  // Field headers:Lio/undertow/util/HeaderMap;
       4: aload_1
       5: invokestatic  #4                  // Method io/undertow/util/HttpString.tryFromString:(Ljava/lang/String;)Lio/undertow/util/HttpString;
       8: aload_2
       9: invokevirtual #6                  // Method io/undertow/util/HeaderMap.addAll:(Lio/undertow/util/HttpString;Ljava/util/Collection;)Lio/undertow/util/HeaderMap;
      12: pop
      13: return

  public void addAll(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>);
    Code:
       0: aload_1
       1: aload_0
       2: invokedynamic #7,  0              // InvokeDynamic #0:accept:(Lorg/springframework/http/server/reactive/UndertowHeadersAdapter;)Ljava/util/function/BiConsumer;
       7: invokeinterface #8,  2            // InterfaceMethod org/springframework/util/MultiValueMap.forEach:(Ljava/util/function/BiConsumer;)V
      12: return

  public void set(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #1                  // Field headers:Lio/undertow/util/HeaderMap;
       4: aload_1
       5: invokestatic  #4                  // Method io/undertow/util/HttpString.tryFromString:(Ljava/lang/String;)Lio/undertow/util/HttpString;
       8: aload_2
       9: invokevirtual #9                  // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
      12: pop
      13: return

  public void setAll(java.util.Map<java.lang.String, java.lang.String>);
    Code:
       0: aload_1
       1: aload_0
       2: invokedynamic #10,  0             // InvokeDynamic #1:accept:(Lorg/springframework/http/server/reactive/UndertowHeadersAdapter;)Ljava/util/function/BiConsumer;
       7: invokeinterface #11,  2           // InterfaceMethod java/util/Map.forEach:(Ljava/util/function/BiConsumer;)V
      12: return

  public java.util.Map<java.lang.String, java.lang.String> toSingleValueMap();
    Code:
       0: new           #12                 // class java/util/LinkedHashMap
       3: dup
       4: aload_0
       5: getfield      #1                  // Field headers:Lio/undertow/util/HeaderMap;
       8: invokevirtual #13                 // Method io/undertow/util/HeaderMap.size:()I
      11: invokespecial #14                 // Method java/util/LinkedHashMap."<init>":(I)V
      14: astore_1
      15: aload_0
      16: getfield      #1                  // Field headers:Lio/undertow/util/HeaderMap;
      19: aload_1
      20: invokedynamic #15,  0             // InvokeDynamic #2:accept:(Ljava/util/Map;)Ljava/util/function/Consumer;
      25: invokevirtual #16                 // Method io/undertow/util/HeaderMap.forEach:(Ljava/util/function/Consumer;)V
      28: aload_1
      29: areturn

  public int size();
    Code:
       0: aload_0
       1: getfield      #1                  // Field headers:Lio/undertow/util/HeaderMap;
       4: invokevirtual #13                 // Method io/undertow/util/HeaderMap.size:()I
       7: ireturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #1                  // Field headers:Lio/undertow/util/HeaderMap;
       4: invokevirtual #13                 // Method io/undertow/util/HeaderMap.size:()I
       7: ifne          14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public boolean containsKey(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #17                 // class java/lang/String
       4: ifeq          25
       7: aload_0
       8: getfield      #1                  // Field headers:Lio/undertow/util/HeaderMap;
      11: aload_1
      12: checkcast     #17                 // class java/lang/String
      15: invokevirtual #18                 // Method io/undertow/util/HeaderMap.contains:(Ljava/lang/String;)Z
      18: ifeq          25
      21: iconst_1
      22: goto          26
      25: iconst_0
      26: ireturn

  public boolean containsValue(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #17                 // class java/lang/String
       4: ifeq          56
       7: aload_0
       8: getfield      #1                  // Field headers:Lio/undertow/util/HeaderMap;
      11: invokevirtual #19                 // Method io/undertow/util/HeaderMap.getHeaderNames:()Ljava/util/Collection;
      14: invokeinterface #20,  1           // InterfaceMethod java/util/Collection.stream:()Ljava/util/stream/Stream;
      19: aload_0
      20: getfield      #1                  // Field headers:Lio/undertow/util/HeaderMap;
      23: dup
      24: invokevirtual #21                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      27: pop
      28: invokedynamic #22,  0             // InvokeDynamic #3:apply:(Lio/undertow/util/HeaderMap;)Ljava/util/function/Function;
      33: invokeinterface #23,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      38: aload_1
      39: invokedynamic #24,  0             // InvokeDynamic #4:test:(Ljava/lang/Object;)Ljava/util/function/Predicate;
      44: invokeinterface #25,  2           // InterfaceMethod java/util/stream/Stream.anyMatch:(Ljava/util/function/Predicate;)Z
      49: ifeq          56
      52: iconst_1
      53: goto          57
      56: iconst_0
      57: ireturn

  public java.util.List<java.lang.String> get(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #17                 // class java/lang/String
       4: ifeq          19
       7: aload_0
       8: getfield      #1                  // Field headers:Lio/undertow/util/HeaderMap;
      11: aload_1
      12: checkcast     #17                 // class java/lang/String
      15: invokevirtual #26                 // Method io/undertow/util/HeaderMap.get:(Ljava/lang/String;)Lio/undertow/util/HeaderValues;
      18: areturn
      19: aconst_null
      20: areturn

  public java.util.List<java.lang.String> put(java.lang.String, java.util.List<java.lang.String>);
    Code:
       0: aload_0
       1: getfield      #1                  // Field headers:Lio/undertow/util/HeaderMap;
       4: aload_1
       5: invokevirtual #26                 // Method io/undertow/util/HeaderMap.get:(Ljava/lang/String;)Lio/undertow/util/HeaderValues;
       8: astore_3
       9: aload_0
      10: getfield      #1                  // Field headers:Lio/undertow/util/HeaderMap;
      13: aload_1
      14: invokestatic  #4                  // Method io/undertow/util/HttpString.tryFromString:(Ljava/lang/String;)Lio/undertow/util/HttpString;
      17: aload_2
      18: invokevirtual #27                 // Method io/undertow/util/HeaderMap.putAll:(Lio/undertow/util/HttpString;Ljava/util/Collection;)Lio/undertow/util/HeaderMap;
      21: pop
      22: aload_3
      23: areturn

  public java.util.List<java.lang.String> remove(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #17                 // class java/lang/String
       4: ifeq          19
       7: aload_0
       8: getfield      #1                  // Field headers:Lio/undertow/util/HeaderMap;
      11: aload_1
      12: checkcast     #17                 // class java/lang/String
      15: invokevirtual #28                 // Method io/undertow/util/HeaderMap.remove:(Ljava/lang/String;)Ljava/util/Collection;
      18: pop
      19: aconst_null
      20: areturn

  public void putAll(java.util.Map<? extends java.lang.String, ? extends java.util.List<java.lang.String>>);
    Code:
       0: aload_1
       1: aload_0
       2: invokedynamic #29,  0             // InvokeDynamic #5:accept:(Lorg/springframework/http/server/reactive/UndertowHeadersAdapter;)Ljava/util/function/BiConsumer;
       7: invokeinterface #11,  2           // InterfaceMethod java/util/Map.forEach:(Ljava/util/function/BiConsumer;)V
      12: return

  public void clear();
    Code:
       0: aload_0
       1: getfield      #1                  // Field headers:Lio/undertow/util/HeaderMap;
       4: invokevirtual #30                 // Method io/undertow/util/HeaderMap.clear:()Lio/undertow/util/HeaderMap;
       7: pop
       8: return

  public java.util.Set<java.lang.String> keySet();
    Code:
       0: aload_0
       1: getfield      #1                  // Field headers:Lio/undertow/util/HeaderMap;
       4: invokevirtual #19                 // Method io/undertow/util/HeaderMap.getHeaderNames:()Ljava/util/Collection;
       7: invokeinterface #20,  1           // InterfaceMethod java/util/Collection.stream:()Ljava/util/stream/Stream;
      12: invokedynamic #31,  0             // InvokeDynamic #6:apply:()Ljava/util/function/Function;
      17: invokeinterface #23,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      22: invokestatic  #32                 // Method java/util/stream/Collectors.toSet:()Ljava/util/stream/Collector;
      25: invokeinterface #33,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      30: checkcast     #34                 // class java/util/Set
      33: areturn

  public java.util.Collection<java.util.List<java.lang.String>> values();
    Code:
       0: aload_0
       1: getfield      #1                  // Field headers:Lio/undertow/util/HeaderMap;
       4: invokevirtual #19                 // Method io/undertow/util/HeaderMap.getHeaderNames:()Ljava/util/Collection;
       7: invokeinterface #20,  1           // InterfaceMethod java/util/Collection.stream:()Ljava/util/stream/Stream;
      12: aload_0
      13: getfield      #1                  // Field headers:Lio/undertow/util/HeaderMap;
      16: dup
      17: invokevirtual #21                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      20: pop
      21: invokedynamic #22,  0             // InvokeDynamic #3:apply:(Lio/undertow/util/HeaderMap;)Ljava/util/function/Function;
      26: invokeinterface #23,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      31: invokestatic  #35                 // Method java/util/stream/Collectors.toList:()Ljava/util/stream/Collector;
      34: invokeinterface #33,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      39: checkcast     #36                 // class java/util/Collection
      42: areturn

  public java.util.Set<java.util.Map$Entry<java.lang.String, java.util.List<java.lang.String>>> entrySet();
    Code:
       0: new           #37                 // class org/springframework/http/server/reactive/UndertowHeadersAdapter$1
       3: dup
       4: aload_0
       5: invokespecial #38                 // Method org/springframework/http/server/reactive/UndertowHeadersAdapter$1."<init>":(Lorg/springframework/http/server/reactive/UndertowHeadersAdapter;)V
       8: areturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokestatic  #39                 // Method org/springframework/http/HttpHeaders.formatHeaders:(Lorg/springframework/util/MultiValueMap;)Ljava/lang/String;
       4: areturn

  public void set(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #17                 // class java/lang/String
       5: aload_2
       6: checkcast     #17                 // class java/lang/String
       9: invokevirtual #40                 // Method set:(Ljava/lang/String;Ljava/lang/String;)V
      12: return

  public void addAll(java.lang.Object, java.util.List);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #17                 // class java/lang/String
       5: aload_2
       6: invokevirtual #41                 // Method addAll:(Ljava/lang/String;Ljava/util/List;)V
       9: return

  public void add(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #17                 // class java/lang/String
       5: aload_2
       6: checkcast     #17                 // class java/lang/String
       9: invokevirtual #42                 // Method add:(Ljava/lang/String;Ljava/lang/String;)V
      12: return

  public java.lang.Object getFirst(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #17                 // class java/lang/String
       5: invokevirtual #43                 // Method getFirst:(Ljava/lang/String;)Ljava/lang/String;
       8: areturn

  public java.lang.Object remove(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #44                 // Method remove:(Ljava/lang/Object;)Ljava/util/List;
       5: areturn

  public java.lang.Object put(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #17                 // class java/lang/String
       5: aload_2
       6: checkcast     #45                 // class java/util/List
       9: invokevirtual #46                 // Method put:(Ljava/lang/String;Ljava/util/List;)Ljava/util/List;
      12: areturn

  public java.lang.Object get(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #47                 // Method get:(Ljava/lang/Object;)Ljava/util/List;
       5: areturn

  private void lambda$putAll$4(java.lang.String, java.util.List);
    Code:
       0: aload_0
       1: getfield      #1                  // Field headers:Lio/undertow/util/HeaderMap;
       4: aload_1
       5: invokestatic  #4                  // Method io/undertow/util/HttpString.tryFromString:(Ljava/lang/String;)Lio/undertow/util/HttpString;
       8: aload_2
       9: invokevirtual #27                 // Method io/undertow/util/HeaderMap.putAll:(Lio/undertow/util/HttpString;Ljava/util/Collection;)Lio/undertow/util/HeaderMap;
      12: pop
      13: return

  private static boolean lambda$containsValue$3(java.lang.Object, io.undertow.util.HeaderValues);
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #48                 // Method io/undertow/util/HeaderValues.contains:(Ljava/lang/Object;)Z
       5: ireturn

  private static void lambda$toSingleValueMap$2(java.util.Map, io.undertow.util.HeaderValues);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #49                 // Method io/undertow/util/HeaderValues.getHeaderName:()Lio/undertow/util/HttpString;
       5: invokevirtual #50                 // Method io/undertow/util/HttpString.toString:()Ljava/lang/String;
       8: aload_1
       9: invokevirtual #51                 // Method io/undertow/util/HeaderValues.getFirst:()Ljava/lang/String;
      12: invokeinterface #52,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      17: checkcast     #17                 // class java/lang/String
      20: pop
      21: return

  private void lambda$setAll$1(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #1                  // Field headers:Lio/undertow/util/HeaderMap;
       4: aload_1
       5: invokestatic  #4                  // Method io/undertow/util/HttpString.tryFromString:(Ljava/lang/String;)Lio/undertow/util/HttpString;
       8: aload_2
       9: invokevirtual #9                  // Method io/undertow/util/HeaderMap.put:(Lio/undertow/util/HttpString;Ljava/lang/String;)Lio/undertow/util/HeaderMap;
      12: pop
      13: return

  private void lambda$addAll$0(java.lang.String, java.util.List);
    Code:
       0: aload_0
       1: getfield      #1                  // Field headers:Lio/undertow/util/HeaderMap;
       4: aload_1
       5: invokestatic  #4                  // Method io/undertow/util/HttpString.tryFromString:(Ljava/lang/String;)Lio/undertow/util/HttpString;
       8: aload_2
       9: invokevirtual #6                  // Method io/undertow/util/HeaderMap.addAll:(Lio/undertow/util/HttpString;Ljava/util/Collection;)Lio/undertow/util/HeaderMap;
      12: pop
      13: return

  static io.undertow.util.HeaderMap access$100(org.springframework.http.server.reactive.UndertowHeadersAdapter);
    Code:
       0: aload_0
       1: getfield      #1                  // Field headers:Lio/undertow/util/HeaderMap;
       4: areturn
}
