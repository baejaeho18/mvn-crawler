Compiled from "XmlEventDecoder.java"
class org.springframework.http.codec.xml.XmlEventDecoder$AaltoDataBufferToXmlEvent implements java.util.function.Function<org.springframework.core.io.buffer.DataBuffer, java.util.List<? extends javax.xml.stream.events.XMLEvent>> {
  private static final com.fasterxml.aalto.AsyncXMLInputFactory inputFactory;

  private final com.fasterxml.aalto.AsyncXMLStreamReader<com.fasterxml.aalto.AsyncByteBufferFeeder> streamReader;

  private final javax.xml.stream.util.XMLEventAllocator eventAllocator;

  private final int maxInMemorySize;

  private int byteCount;

  private int elementDepth;

  public org.springframework.http.codec.xml.XmlEventDecoder$AaltoDataBufferToXmlEvent(int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: getstatic     #2                  // Field inputFactory:Lcom/fasterxml/aalto/AsyncXMLInputFactory;
       8: invokevirtual #3                  // Method com/fasterxml/aalto/AsyncXMLInputFactory.createAsyncForByteBuffer:()Lcom/fasterxml/aalto/AsyncXMLStreamReader;
      11: putfield      #4                  // Field streamReader:Lcom/fasterxml/aalto/AsyncXMLStreamReader;
      14: aload_0
      15: invokestatic  #5                  // Method com/fasterxml/aalto/evt/EventAllocatorImpl.getDefaultInstance:()Lcom/fasterxml/aalto/evt/EventAllocatorImpl;
      18: putfield      #6                  // Field eventAllocator:Ljavax/xml/stream/util/XMLEventAllocator;
      21: aload_0
      22: iload_1
      23: putfield      #7                  // Field maxInMemorySize:I
      26: return

  public java.util.List<? extends javax.xml.stream.events.XMLEvent> apply(org.springframework.core.io.buffer.DataBuffer);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #8                  // Method increaseByteCount:(Lorg/springframework/core/io/buffer/DataBuffer;)V
       5: aload_0
       6: getfield      #4                  // Field streamReader:Lcom/fasterxml/aalto/AsyncXMLStreamReader;
       9: invokeinterface #9,  1            // InterfaceMethod com/fasterxml/aalto/AsyncXMLStreamReader.getInputFeeder:()Lcom/fasterxml/aalto/AsyncInputFeeder;
      14: checkcast     #10                 // class com/fasterxml/aalto/AsyncByteBufferFeeder
      17: aload_1
      18: invokeinterface #11,  1           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.asByteBuffer:()Ljava/nio/ByteBuffer;
      23: invokeinterface #12,  2           // InterfaceMethod com/fasterxml/aalto/AsyncByteBufferFeeder.feedInput:(Ljava/nio/ByteBuffer;)V
      28: new           #13                 // class java/util/ArrayList
      31: dup
      32: invokespecial #14                 // Method java/util/ArrayList."<init>":()V
      35: astore_2
      36: aload_0
      37: getfield      #4                  // Field streamReader:Lcom/fasterxml/aalto/AsyncXMLStreamReader;
      40: invokeinterface #15,  1           // InterfaceMethod com/fasterxml/aalto/AsyncXMLStreamReader.next:()I
      45: sipush        257
      48: if_icmpne     54
      51: goto          96
      54: aload_0
      55: getfield      #6                  // Field eventAllocator:Ljavax/xml/stream/util/XMLEventAllocator;
      58: aload_0
      59: getfield      #4                  // Field streamReader:Lcom/fasterxml/aalto/AsyncXMLStreamReader;
      62: invokeinterface #17,  2           // InterfaceMethod javax/xml/stream/util/XMLEventAllocator.allocate:(Ljavax/xml/stream/XMLStreamReader;)Ljavax/xml/stream/events/XMLEvent;
      67: astore_3
      68: aload_2
      69: aload_3
      70: invokeinterface #18,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      75: pop
      76: aload_3
      77: invokeinterface #19,  1           // InterfaceMethod javax/xml/stream/events/XMLEvent.isEndDocument:()Z
      82: ifeq          88
      85: goto          96
      88: aload_0
      89: aload_3
      90: invokespecial #20                 // Method checkDepthAndResetByteCount:(Ljavax/xml/stream/events/XMLEvent;)V
      93: goto          36
      96: aload_0
      97: getfield      #7                  // Field maxInMemorySize:I
     100: ifle          118
     103: aload_0
     104: getfield      #21                 // Field byteCount:I
     107: aload_0
     108: getfield      #7                  // Field maxInMemorySize:I
     111: if_icmple     118
     114: aload_0
     115: invokespecial #22                 // Method raiseLimitException:()V
     118: aload_2
     119: astore_3
     120: aload_1
     121: invokestatic  #23                 // Method org/springframework/core/io/buffer/DataBufferUtils.release:(Lorg/springframework/core/io/buffer/DataBuffer;)Z
     124: pop
     125: aload_3
     126: areturn
     127: astore_2
     128: aload_2
     129: invokestatic  #25                 // Method reactor/core/Exceptions.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
     132: athrow
     133: astore        4
     135: aload_1
     136: invokestatic  #23                 // Method org/springframework/core/io/buffer/DataBufferUtils.release:(Lorg/springframework/core/io/buffer/DataBuffer;)Z
     139: pop
     140: aload         4
     142: athrow
    Exception table:
       from    to  target type
           0   120   127   Class javax/xml/stream/XMLStreamException
           0   120   133   any
         127   135   133   any

  private void increaseByteCount(org.springframework.core.io.buffer.DataBuffer);
    Code:
       0: aload_0
       1: getfield      #7                  // Field maxInMemorySize:I
       4: ifle          45
       7: aload_1
       8: invokeinterface #26,  1           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.readableByteCount:()I
      13: ldc           #28                 // int 2147483647
      15: aload_0
      16: getfield      #21                 // Field byteCount:I
      19: isub
      20: if_icmple     30
      23: aload_0
      24: invokespecial #22                 // Method raiseLimitException:()V
      27: goto          45
      30: aload_0
      31: dup
      32: getfield      #21                 // Field byteCount:I
      35: aload_1
      36: invokeinterface #26,  1           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.readableByteCount:()I
      41: iadd
      42: putfield      #21                 // Field byteCount:I
      45: return

  private void checkDepthAndResetByteCount(javax.xml.stream.events.XMLEvent);
    Code:
       0: aload_0
       1: getfield      #7                  // Field maxInMemorySize:I
       4: ifle          88
       7: aload_1
       8: invokeinterface #29,  1           // InterfaceMethod javax/xml/stream/events/XMLEvent.isStartElement:()Z
      13: ifeq          49
      16: aload_0
      17: aload_0
      18: getfield      #30                 // Field elementDepth:I
      21: iconst_1
      22: if_icmpne     29
      25: iconst_0
      26: goto          33
      29: aload_0
      30: getfield      #21                 // Field byteCount:I
      33: putfield      #21                 // Field byteCount:I
      36: aload_0
      37: dup
      38: getfield      #30                 // Field elementDepth:I
      41: iconst_1
      42: iadd
      43: putfield      #30                 // Field elementDepth:I
      46: goto          88
      49: aload_1
      50: invokeinterface #31,  1           // InterfaceMethod javax/xml/stream/events/XMLEvent.isEndElement:()Z
      55: ifeq          88
      58: aload_0
      59: dup
      60: getfield      #30                 // Field elementDepth:I
      63: iconst_1
      64: isub
      65: putfield      #30                 // Field elementDepth:I
      68: aload_0
      69: aload_0
      70: getfield      #30                 // Field elementDepth:I
      73: iconst_1
      74: if_icmpne     81
      77: iconst_0
      78: goto          85
      81: aload_0
      82: getfield      #21                 // Field byteCount:I
      85: putfield      #21                 // Field byteCount:I
      88: return

  private void raiseLimitException();
    Code:
       0: new           #32                 // class org/springframework/core/io/buffer/DataBufferLimitException
       3: dup
       4: new           #33                 // class java/lang/StringBuilder
       7: dup
       8: invokespecial #34                 // Method java/lang/StringBuilder."<init>":()V
      11: ldc           #35                 // String Exceeded limit on max bytes per XML top-level node:
      13: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      16: aload_0
      17: getfield      #7                  // Field maxInMemorySize:I
      20: invokevirtual #37                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      23: invokevirtual #38                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      26: invokespecial #39                 // Method org/springframework/core/io/buffer/DataBufferLimitException."<init>":(Ljava/lang/String;)V
      29: athrow

  public void endOfInput();
    Code:
       0: aload_0
       1: getfield      #4                  // Field streamReader:Lcom/fasterxml/aalto/AsyncXMLStreamReader;
       4: invokeinterface #9,  1            // InterfaceMethod com/fasterxml/aalto/AsyncXMLStreamReader.getInputFeeder:()Lcom/fasterxml/aalto/AsyncInputFeeder;
       9: checkcast     #10                 // class com/fasterxml/aalto/AsyncByteBufferFeeder
      12: invokeinterface #40,  1           // InterfaceMethod com/fasterxml/aalto/AsyncByteBufferFeeder.endOfInput:()V
      17: return

  public java.lang.Object apply(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #41                 // class org/springframework/core/io/buffer/DataBuffer
       5: invokevirtual #42                 // Method apply:(Lorg/springframework/core/io/buffer/DataBuffer;)Ljava/util/List;
       8: areturn

  static {};
    Code:
       0: invokedynamic #43,  0             // InvokeDynamic #0:get:()Ljava/util/function/Supplier;
       5: invokestatic  #44                 // Method org/springframework/util/xml/StaxUtils.createDefensiveInputFactory:(Ljava/util/function/Supplier;)Ljavax/xml/stream/XMLInputFactory;
       8: checkcast     #45                 // class com/fasterxml/aalto/AsyncXMLInputFactory
      11: putstatic     #2                  // Field inputFactory:Lcom/fasterxml/aalto/AsyncXMLInputFactory;
      14: return
}
