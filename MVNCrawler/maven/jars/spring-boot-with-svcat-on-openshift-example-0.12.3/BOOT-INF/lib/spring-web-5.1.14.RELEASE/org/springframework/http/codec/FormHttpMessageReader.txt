Compiled from "FormHttpMessageReader.java"
public class org.springframework.http.codec.FormHttpMessageReader extends org.springframework.http.codec.LoggingCodecSupport implements org.springframework.http.codec.HttpMessageReader<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>> {
  public static final java.nio.charset.Charset DEFAULT_CHARSET;

  private static final org.springframework.core.ResolvableType MULTIVALUE_STRINGS_TYPE;

  private java.nio.charset.Charset defaultCharset;

  private int maxInMemorySize;

  public org.springframework.http.codec.FormHttpMessageReader();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/springframework/http/codec/LoggingCodecSupport."<init>":()V
       4: aload_0
       5: getstatic     #2                  // Field DEFAULT_CHARSET:Ljava/nio/charset/Charset;
       8: putfield      #3                  // Field defaultCharset:Ljava/nio/charset/Charset;
      11: aload_0
      12: ldc           #4                  // int 262144
      14: putfield      #5                  // Field maxInMemorySize:I
      17: return

  public void setDefaultCharset(java.nio.charset.Charset);
    Code:
       0: aload_1
       1: ldc           #6                  // String Charset must not be null
       3: invokestatic  #7                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: putfield      #3                  // Field defaultCharset:Ljava/nio/charset/Charset;
      11: return

  public java.nio.charset.Charset getDefaultCharset();
    Code:
       0: aload_0
       1: getfield      #3                  // Field defaultCharset:Ljava/nio/charset/Charset;
       4: areturn

  public void setMaxInMemorySize(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #5                  // Field maxInMemorySize:I
       5: return

  public int getMaxInMemorySize();
    Code:
       0: aload_0
       1: getfield      #5                  // Field maxInMemorySize:I
       4: ireturn

  public boolean canRead(org.springframework.core.ResolvableType, org.springframework.http.MediaType);
    Code:
       0: aload_1
       1: invokevirtual #8                  // Method org/springframework/core/ResolvableType.hasUnresolvableGenerics:()Z
       4: ifeq          23
       7: ldc           #9                  // class org/springframework/util/MultiValueMap
       9: aload_1
      10: invokevirtual #10                 // Method org/springframework/core/ResolvableType.toClass:()Ljava/lang/Class;
      13: invokevirtual #11                 // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
      16: ifeq          23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: istore_3
      25: getstatic     #12                 // Field MULTIVALUE_STRINGS_TYPE:Lorg/springframework/core/ResolvableType;
      28: aload_1
      29: invokevirtual #13                 // Method org/springframework/core/ResolvableType.isAssignableFrom:(Lorg/springframework/core/ResolvableType;)Z
      32: ifne          39
      35: iload_3
      36: ifeq          57
      39: aload_2
      40: ifnull        53
      43: getstatic     #14                 // Field org/springframework/http/MediaType.APPLICATION_FORM_URLENCODED:Lorg/springframework/http/MediaType;
      46: aload_2
      47: invokevirtual #15                 // Method org/springframework/http/MediaType.isCompatibleWith:(Lorg/springframework/http/MediaType;)Z
      50: ifeq          57
      53: iconst_1
      54: goto          58
      57: iconst_0
      58: ireturn

  public reactor.core.publisher.Flux<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>> read(org.springframework.core.ResolvableType, org.springframework.http.ReactiveHttpInputMessage, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokevirtual #16                 // Method readMono:(Lorg/springframework/core/ResolvableType;Lorg/springframework/http/ReactiveHttpInputMessage;Ljava/util/Map;)Lreactor/core/publisher/Mono;
       7: invokestatic  #17                 // Method reactor/core/publisher/Flux.from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      10: areturn

  public reactor.core.publisher.Mono<org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>> readMono(org.springframework.core.ResolvableType, org.springframework.http.ReactiveHttpInputMessage, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_2
       1: invokeinterface #18,  1           // InterfaceMethod org/springframework/http/ReactiveHttpInputMessage.getHeaders:()Lorg/springframework/http/HttpHeaders;
       6: invokevirtual #19                 // Method org/springframework/http/HttpHeaders.getContentType:()Lorg/springframework/http/MediaType;
       9: astore        4
      11: aload_0
      12: aload         4
      14: invokespecial #20                 // Method getMediaTypeCharset:(Lorg/springframework/http/MediaType;)Ljava/nio/charset/Charset;
      17: astore        5
      19: aload_2
      20: invokeinterface #21,  1           // InterfaceMethod org/springframework/http/ReactiveHttpInputMessage.getBody:()Lreactor/core/publisher/Flux;
      25: aload_0
      26: invokevirtual #22                 // Method getMaxInMemorySize:()I
      29: invokestatic  #23                 // Method org/springframework/core/io/buffer/DataBufferUtils.join:(Lorg/reactivestreams/Publisher;I)Lreactor/core/publisher/Mono;
      32: aload_0
      33: aload         5
      35: aload_3
      36: invokedynamic #24,  0             // InvokeDynamic #0:apply:(Lorg/springframework/http/codec/FormHttpMessageReader;Ljava/nio/charset/Charset;Ljava/util/Map;)Ljava/util/function/Function;
      41: invokevirtual #25                 // Method reactor/core/publisher/Mono.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      44: areturn

  private void logFormData(org.springframework.util.MultiValueMap<java.lang.String, java.lang.String>, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: getfield      #26                 // Field logger:Lorg/apache/commons/logging/Log;
       4: aload_0
       5: aload_2
       6: aload_1
       7: invokedynamic #27,  0             // InvokeDynamic #1:apply:(Lorg/springframework/http/codec/FormHttpMessageReader;Ljava/util/Map;Lorg/springframework/util/MultiValueMap;)Ljava/util/function/Function;
      12: invokestatic  #28                 // Method org/springframework/core/log/LogFormatUtils.traceDebug:(Lorg/apache/commons/logging/Log;Ljava/util/function/Function;)V
      15: return

  private java.nio.charset.Charset getMediaTypeCharset(org.springframework.http.MediaType);
    Code:
       0: aload_1
       1: ifnull        16
       4: aload_1
       5: invokevirtual #29                 // Method org/springframework/http/MediaType.getCharset:()Ljava/nio/charset/Charset;
       8: ifnull        16
      11: aload_1
      12: invokevirtual #29                 // Method org/springframework/http/MediaType.getCharset:()Ljava/nio/charset/Charset;
      15: areturn
      16: aload_0
      17: invokevirtual #30                 // Method getDefaultCharset:()Ljava/nio/charset/Charset;
      20: areturn

  private org.springframework.util.MultiValueMap<java.lang.String, java.lang.String> parseFormData(java.nio.charset.Charset, java.lang.String);
    Code:
       0: aload_2
       1: ldc           #31                 // String &
       3: invokestatic  #32                 // Method org/springframework/util/StringUtils.tokenizeToStringArray:(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;
       6: astore_3
       7: new           #33                 // class org/springframework/util/LinkedMultiValueMap
      10: dup
      11: aload_3
      12: arraylength
      13: invokespecial #34                 // Method org/springframework/util/LinkedMultiValueMap."<init>":(I)V
      16: astore        4
      18: aload_3
      19: astore        5
      21: aload         5
      23: arraylength
      24: istore        6
      26: iconst_0
      27: istore        7
      29: iload         7
      31: iload         6
      33: if_icmpge     130
      36: aload         5
      38: iload         7
      40: aaload
      41: astore        8
      43: aload         8
      45: bipush        61
      47: invokevirtual #35                 // Method java/lang/String.indexOf:(I)I
      50: istore        9
      52: iload         9
      54: iconst_m1
      55: if_icmpne     78
      58: aload         4
      60: aload         8
      62: aload_1
      63: invokevirtual #36                 // Method java/nio/charset/Charset.name:()Ljava/lang/String;
      66: invokestatic  #37                 // Method java/net/URLDecoder.decode:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      69: aconst_null
      70: invokeinterface #38,  3           // InterfaceMethod org/springframework/util/MultiValueMap.add:(Ljava/lang/Object;Ljava/lang/Object;)V
      75: goto          124
      78: aload         8
      80: iconst_0
      81: iload         9
      83: invokevirtual #39                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      86: aload_1
      87: invokevirtual #36                 // Method java/nio/charset/Charset.name:()Ljava/lang/String;
      90: invokestatic  #37                 // Method java/net/URLDecoder.decode:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      93: astore        10
      95: aload         8
      97: iload         9
      99: iconst_1
     100: iadd
     101: invokevirtual #40                 // Method java/lang/String.substring:(I)Ljava/lang/String;
     104: aload_1
     105: invokevirtual #36                 // Method java/nio/charset/Charset.name:()Ljava/lang/String;
     108: invokestatic  #37                 // Method java/net/URLDecoder.decode:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
     111: astore        11
     113: aload         4
     115: aload         10
     117: aload         11
     119: invokeinterface #38,  3           // InterfaceMethod org/springframework/util/MultiValueMap.add:(Ljava/lang/Object;Ljava/lang/Object;)V
     124: iinc          7, 1
     127: goto          29
     130: goto          145
     133: astore        5
     135: new           #42                 // class java/lang/IllegalStateException
     138: dup
     139: aload         5
     141: invokespecial #43                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/Throwable;)V
     144: athrow
     145: aload         4
     147: areturn
    Exception table:
       from    to  target type
          18   130   133   Class java/io/UnsupportedEncodingException

  public java.util.List<org.springframework.http.MediaType> getReadableMediaTypes();
    Code:
       0: getstatic     #14                 // Field org/springframework/http/MediaType.APPLICATION_FORM_URLENCODED:Lorg/springframework/http/MediaType;
       3: invokestatic  #44                 // Method java/util/Collections.singletonList:(Ljava/lang/Object;)Ljava/util/List;
       6: areturn

  private java.lang.String lambda$logFormData$1(java.util.Map, org.springframework.util.MultiValueMap, java.lang.Boolean);
    Code:
       0: new           #45                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #46                 // Method java/lang/StringBuilder."<init>":()V
       7: aload_1
       8: invokestatic  #47                 // Method org/springframework/core/codec/Hints.getLogPrefix:(Ljava/util/Map;)Ljava/lang/String;
      11: invokevirtual #48                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      14: ldc           #49                 // String Read
      16: invokevirtual #48                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      19: aload_0
      20: invokevirtual #50                 // Method isEnableLoggingRequestDetails:()Z
      23: ifeq          45
      26: aload_2
      27: aload_3
      28: invokevirtual #51                 // Method java/lang/Boolean.booleanValue:()Z
      31: ifne          38
      34: iconst_1
      35: goto          39
      38: iconst_0
      39: invokestatic  #52                 // Method org/springframework/core/log/LogFormatUtils.formatValue:(Ljava/lang/Object;Z)Ljava/lang/String;
      42: goto          74
      45: new           #45                 // class java/lang/StringBuilder
      48: dup
      49: invokespecial #46                 // Method java/lang/StringBuilder."<init>":()V
      52: ldc           #53                 // String form fields
      54: invokevirtual #48                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      57: aload_2
      58: invokeinterface #54,  1           // InterfaceMethod org/springframework/util/MultiValueMap.keySet:()Ljava/util/Set;
      63: invokevirtual #55                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      66: ldc           #56                 // String  (content masked)
      68: invokevirtual #48                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      71: invokevirtual #57                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      74: invokevirtual #48                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      77: invokevirtual #57                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      80: areturn

  private org.springframework.util.MultiValueMap lambda$readMono$0(java.nio.charset.Charset, java.util.Map, org.springframework.core.io.buffer.DataBuffer);
    Code:
       0: aload_1
       1: aload_3
       2: invokeinterface #58,  1           // InterfaceMethod org/springframework/core/io/buffer/DataBuffer.asByteBuffer:()Ljava/nio/ByteBuffer;
       7: invokevirtual #59                 // Method java/nio/charset/Charset.decode:(Ljava/nio/ByteBuffer;)Ljava/nio/CharBuffer;
      10: astore        4
      12: aload         4
      14: invokevirtual #60                 // Method java/nio/CharBuffer.toString:()Ljava/lang/String;
      17: astore        5
      19: aload_3
      20: invokestatic  #61                 // Method org/springframework/core/io/buffer/DataBufferUtils.release:(Lorg/springframework/core/io/buffer/DataBuffer;)Z
      23: pop
      24: aload_0
      25: aload_1
      26: aload         5
      28: invokespecial #62                 // Method parseFormData:(Ljava/nio/charset/Charset;Ljava/lang/String;)Lorg/springframework/util/MultiValueMap;
      31: astore        6
      33: aload_0
      34: aload         6
      36: aload_2
      37: invokespecial #63                 // Method logFormData:(Lorg/springframework/util/MultiValueMap;Ljava/util/Map;)V
      40: aload         6
      42: areturn

  static {};
    Code:
       0: getstatic     #64                 // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
       3: putstatic     #2                  // Field DEFAULT_CHARSET:Ljava/nio/charset/Charset;
       6: ldc           #9                  // class org/springframework/util/MultiValueMap
       8: iconst_2
       9: anewarray     #65                 // class java/lang/Class
      12: dup
      13: iconst_0
      14: ldc           #66                 // class java/lang/String
      16: aastore
      17: dup
      18: iconst_1
      19: ldc           #66                 // class java/lang/String
      21: aastore
      22: invokestatic  #67                 // Method org/springframework/core/ResolvableType.forClassWithGenerics:(Ljava/lang/Class;[Ljava/lang/Class;)Lorg/springframework/core/ResolvableType;
      25: putstatic     #12                 // Field MULTIVALUE_STRINGS_TYPE:Lorg/springframework/core/ResolvableType;
      28: return
}
