Compiled from "BindingTypePattern.java"
public class org.aspectj.weaver.patterns.BindingTypePattern extends org.aspectj.weaver.patterns.ExactTypePattern implements org.aspectj.weaver.patterns.BindingPattern {
  private int formalIndex;

  private java.lang.String bindingName;

  public org.aspectj.weaver.patterns.BindingTypePattern(org.aspectj.weaver.UnresolvedType, int, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: iload_3
       4: invokespecial #1                  // Method org/aspectj/weaver/patterns/ExactTypePattern."<init>":(Lorg/aspectj/weaver/UnresolvedType;ZZ)V
       7: aload_0
       8: iload_2
       9: putfield      #2                  // Field formalIndex:I
      12: return

  public org.aspectj.weaver.patterns.BindingTypePattern(org.aspectj.weaver.patterns.FormalBinding, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #3                  // Method org/aspectj/weaver/patterns/FormalBinding.getType:()Lorg/aspectj/weaver/UnresolvedType;
       5: aload_1
       6: invokevirtual #4                  // Method org/aspectj/weaver/patterns/FormalBinding.getIndex:()I
       9: iload_2
      10: invokespecial #5                  // Method "<init>":(Lorg/aspectj/weaver/UnresolvedType;IZ)V
      13: aload_0
      14: aload_1
      15: invokevirtual #6                  // Method org/aspectj/weaver/patterns/FormalBinding.getName:()Ljava/lang/String;
      18: putfield      #7                  // Field bindingName:Ljava/lang/String;
      21: return

  public int getFormalIndex();
    Code:
       0: aload_0
       1: getfield      #2                  // Field formalIndex:I
       4: ireturn

  public java.lang.String getBindingName();
    Code:
       0: aload_0
       1: getfield      #7                  // Field bindingName:Ljava/lang/String;
       4: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #8                  // class org/aspectj/weaver/patterns/BindingTypePattern
       4: ifne          9
       7: iconst_0
       8: ireturn
       9: aload_1
      10: checkcast     #8                  // class org/aspectj/weaver/patterns/BindingTypePattern
      13: astore_2
      14: aload_0
      15: getfield      #9                  // Field includeSubtypes:Z
      18: aload_2
      19: getfield      #9                  // Field includeSubtypes:Z
      22: if_icmpeq     27
      25: iconst_0
      26: ireturn
      27: aload_0
      28: getfield      #10                 // Field isVarArgs:Z
      31: aload_2
      32: getfield      #10                 // Field isVarArgs:Z
      35: if_icmpeq     40
      38: iconst_0
      39: ireturn
      40: aload_2
      41: getfield      #11                 // Field type:Lorg/aspectj/weaver/UnresolvedType;
      44: aload_0
      45: getfield      #11                 // Field type:Lorg/aspectj/weaver/UnresolvedType;
      48: invokevirtual #12                 // Method org/aspectj/weaver/UnresolvedType.equals:(Ljava/lang/Object;)Z
      51: ifeq          69
      54: aload_2
      55: getfield      #2                  // Field formalIndex:I
      58: aload_0
      59: getfield      #2                  // Field formalIndex:I
      62: if_icmpne     69
      65: iconst_1
      66: goto          70
      69: iconst_0
      70: ireturn

  public int hashCode();
    Code:
       0: bipush        17
       2: istore_1
       3: bipush        37
       5: iload_1
       6: imul
       7: aload_0
       8: invokespecial #13                 // Method org/aspectj/weaver/patterns/ExactTypePattern.hashCode:()I
      11: iadd
      12: istore_1
      13: bipush        37
      15: iload_1
      16: imul
      17: aload_0
      18: getfield      #2                  // Field formalIndex:I
      21: iadd
      22: istore_1
      23: iload_1
      24: ireturn

  public void write(org.aspectj.weaver.CompressingDataOutputStream) throws java.io.IOException;
    Code:
       0: aload_1
       1: iconst_3
       2: invokevirtual #15                 // Method org/aspectj/weaver/CompressingDataOutputStream.writeByte:(I)V
       5: aload_0
       6: getfield      #11                 // Field type:Lorg/aspectj/weaver/UnresolvedType;
       9: aload_1
      10: invokevirtual #16                 // Method org/aspectj/weaver/UnresolvedType.write:(Lorg/aspectj/weaver/CompressingDataOutputStream;)V
      13: aload_1
      14: aload_0
      15: getfield      #2                  // Field formalIndex:I
      18: i2s
      19: invokevirtual #17                 // Method org/aspectj/weaver/CompressingDataOutputStream.writeShort:(I)V
      22: aload_1
      23: aload_0
      24: getfield      #10                 // Field isVarArgs:Z
      27: invokevirtual #18                 // Method org/aspectj/weaver/CompressingDataOutputStream.writeBoolean:(Z)V
      30: aload_0
      31: aload_1
      32: invokevirtual #19                 // Method writeLocation:(Ljava/io/DataOutputStream;)V
      35: return

  public static org.aspectj.weaver.patterns.TypePattern read(org.aspectj.weaver.VersionedDataInputStream, org.aspectj.weaver.ISourceContext) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokestatic  #20                 // Method org/aspectj/weaver/UnresolvedType.read:(Ljava/io/DataInputStream;)Lorg/aspectj/weaver/UnresolvedType;
       4: astore_2
       5: aload_0
       6: invokevirtual #21                 // Method org/aspectj/weaver/VersionedDataInputStream.readShort:()S
       9: istore_3
      10: iconst_0
      11: istore        4
      13: aload_0
      14: invokevirtual #22                 // Method org/aspectj/weaver/VersionedDataInputStream.getMajorVersion:()I
      17: iconst_2
      18: if_icmplt     27
      21: aload_0
      22: invokevirtual #24                 // Method org/aspectj/weaver/VersionedDataInputStream.readBoolean:()Z
      25: istore        4
      27: new           #8                  // class org/aspectj/weaver/patterns/BindingTypePattern
      30: dup
      31: aload_2
      32: iload_3
      33: iload         4
      35: invokespecial #5                  // Method "<init>":(Lorg/aspectj/weaver/UnresolvedType;IZ)V
      38: astore        5
      40: aload         5
      42: aload_1
      43: aload_0
      44: invokevirtual #25                 // Method org/aspectj/weaver/patterns/TypePattern.readLocation:(Lorg/aspectj/weaver/ISourceContext;Ljava/io/DataInputStream;)V
      47: aload         5
      49: areturn

  public org.aspectj.weaver.patterns.TypePattern remapAdviceFormals(org.aspectj.weaver.IntMap);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #2                  // Field formalIndex:I
       5: invokevirtual #26                 // Method org/aspectj/weaver/IntMap.hasKey:(I)Z
       8: ifne          28
      11: new           #27                 // class org/aspectj/weaver/patterns/ExactTypePattern
      14: dup
      15: aload_0
      16: getfield      #11                 // Field type:Lorg/aspectj/weaver/UnresolvedType;
      19: iconst_0
      20: aload_0
      21: getfield      #10                 // Field isVarArgs:Z
      24: invokespecial #1                  // Method org/aspectj/weaver/patterns/ExactTypePattern."<init>":(Lorg/aspectj/weaver/UnresolvedType;ZZ)V
      27: areturn
      28: aload_1
      29: aload_0
      30: getfield      #2                  // Field formalIndex:I
      33: invokevirtual #28                 // Method org/aspectj/weaver/IntMap.get:(I)I
      36: istore_2
      37: new           #8                  // class org/aspectj/weaver/patterns/BindingTypePattern
      40: dup
      41: aload_0
      42: getfield      #11                 // Field type:Lorg/aspectj/weaver/UnresolvedType;
      45: iload_2
      46: aload_0
      47: getfield      #10                 // Field isVarArgs:Z
      50: invokespecial #5                  // Method "<init>":(Lorg/aspectj/weaver/UnresolvedType;IZ)V
      53: areturn

  public org.aspectj.weaver.patterns.TypePattern parameterizeWith(java.util.Map<java.lang.String, org.aspectj.weaver.UnresolvedType>, org.aspectj.weaver.World);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #29                 // Method org/aspectj/weaver/patterns/ExactTypePattern.parameterizeWith:(Ljava/util/Map;Lorg/aspectj/weaver/World;)Lorg/aspectj/weaver/patterns/TypePattern;
       6: checkcast     #27                 // class org/aspectj/weaver/patterns/ExactTypePattern
       9: astore_3
      10: new           #8                  // class org/aspectj/weaver/patterns/BindingTypePattern
      13: dup
      14: aload_3
      15: invokevirtual #30                 // Method org/aspectj/weaver/patterns/ExactTypePattern.getExactType:()Lorg/aspectj/weaver/UnresolvedType;
      18: aload_0
      19: getfield      #2                  // Field formalIndex:I
      22: aload_0
      23: getfield      #10                 // Field isVarArgs:Z
      26: invokespecial #5                  // Method "<init>":(Lorg/aspectj/weaver/UnresolvedType;IZ)V
      29: astore        4
      31: aload         4
      33: aload_0
      34: invokevirtual #31                 // Method copyLocationFrom:(Lorg/aspectj/weaver/patterns/PatternNode;)V
      37: aload         4
      39: areturn

  public java.lang.String toString();
    Code:
       0: new           #32                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #33                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #34                 // String BindingTypePattern(
       9: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: invokespecial #36                 // Method org/aspectj/weaver/patterns/ExactTypePattern.toString:()Ljava/lang/String;
      16: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      19: ldc           #37                 // String ,
      21: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: aload_0
      25: getfield      #2                  // Field formalIndex:I
      28: invokevirtual #38                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      31: ldc           #39                 // String )
      33: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: invokevirtual #40                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      39: areturn
}
