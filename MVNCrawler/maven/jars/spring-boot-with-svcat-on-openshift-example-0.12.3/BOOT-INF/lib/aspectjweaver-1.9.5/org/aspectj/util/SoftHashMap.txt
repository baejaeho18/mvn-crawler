Compiled from "SoftHashMap.java"
public class org.aspectj.util.SoftHashMap<K, V> extends java.util.AbstractMap<K, V> {
  private java.util.Map<K, org.aspectj.util.SoftHashMap<K, V>.SpecialValue> map;

  private java.lang.ref.ReferenceQueue<? super V> rq;

  public org.aspectj.util.SoftHashMap();
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/util/AbstractMap."<init>":()V
       4: aload_0
       5: new           #3                  // class java/lang/ref/ReferenceQueue
       8: dup
       9: invokespecial #4                  // Method java/lang/ref/ReferenceQueue."<init>":()V
      12: putfield      #1                  // Field rq:Ljava/lang/ref/ReferenceQueue;
      15: aload_0
      16: new           #5                  // class java/util/HashMap
      19: dup
      20: invokespecial #6                  // Method java/util/HashMap."<init>":()V
      23: putfield      #7                  // Field map:Ljava/util/Map;
      26: return

  private void processQueue();
    Code:
       0: aconst_null
       1: astore_1
       2: aload_0
       3: getfield      #1                  // Field rq:Ljava/lang/ref/ReferenceQueue;
       6: invokevirtual #8                  // Method java/lang/ref/ReferenceQueue.poll:()Ljava/lang/ref/Reference;
       9: checkcast     #9                  // class org/aspectj/util/SoftHashMap$SpecialValue
      12: dup
      13: astore_1
      14: ifnull        34
      17: aload_0
      18: getfield      #7                  // Field map:Ljava/util/Map;
      21: aload_1
      22: invokestatic  #10                 // Method org/aspectj/util/SoftHashMap$SpecialValue.access$100:(Lorg/aspectj/util/SoftHashMap$SpecialValue;)Ljava/lang/Object;
      25: invokeinterface #11,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      30: pop
      31: goto          2
      34: return

  public V get(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #7                  // Field map:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #12,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #9                  // class org/aspectj/util/SoftHashMap$SpecialValue
      13: astore_2
      14: aload_2
      15: ifnonnull     31
      18: aload_0
      19: getfield      #7                  // Field map:Ljava/util/Map;
      22: aload_1
      23: invokeinterface #11,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      28: pop
      29: aconst_null
      30: areturn
      31: aload_2
      32: invokevirtual #13                 // Method org/aspectj/util/SoftHashMap$SpecialValue.get:()Ljava/lang/Object;
      35: astore_3
      36: aload_3
      37: ifnonnull     56
      40: aload_0
      41: getfield      #7                  // Field map:Ljava/util/Map;
      44: aload_2
      45: invokestatic  #10                 // Method org/aspectj/util/SoftHashMap$SpecialValue.access$100:(Lorg/aspectj/util/SoftHashMap$SpecialValue;)Ljava/lang/Object;
      48: invokeinterface #11,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      53: pop
      54: aconst_null
      55: areturn
      56: aload_3
      57: areturn

  public V put(K, V);
    Code:
       0: aload_0
       1: invokespecial #14                 // Method processQueue:()V
       4: new           #9                  // class org/aspectj/util/SoftHashMap$SpecialValue
       7: dup
       8: aload_0
       9: aload_1
      10: aload_2
      11: invokespecial #15                 // Method org/aspectj/util/SoftHashMap$SpecialValue."<init>":(Lorg/aspectj/util/SoftHashMap;Ljava/lang/Object;Ljava/lang/Object;)V
      14: astore_3
      15: aload_0
      16: getfield      #7                  // Field map:Ljava/util/Map;
      19: aload_1
      20: aload_3
      21: invokeinterface #16,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      26: checkcast     #9                  // class org/aspectj/util/SoftHashMap$SpecialValue
      29: astore        4
      31: aload         4
      33: ifnonnull     40
      36: aconst_null
      37: goto          45
      40: aload         4
      42: invokevirtual #13                 // Method org/aspectj/util/SoftHashMap$SpecialValue.get:()Ljava/lang/Object;
      45: areturn

  public java.util.Set<java.util.Map$Entry<K, V>> entrySet();
    Code:
       0: aload_0
       1: getfield      #7                  // Field map:Ljava/util/Map;
       4: invokeinterface #17,  1           // InterfaceMethod java/util/Map.isEmpty:()Z
       9: ifeq          21
      12: invokestatic  #18                 // Method java/util/Collections.emptyMap:()Ljava/util/Map;
      15: invokeinterface #19,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      20: areturn
      21: new           #5                  // class java/util/HashMap
      24: dup
      25: invokespecial #6                  // Method java/util/HashMap."<init>":()V
      28: astore_1
      29: aload_0
      30: getfield      #7                  // Field map:Ljava/util/Map;
      33: invokeinterface #19,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      38: invokeinterface #20,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      43: astore_2
      44: aload_2
      45: invokeinterface #21,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      50: ifeq          100
      53: aload_2
      54: invokeinterface #22,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      59: checkcast     #23                 // class java/util/Map$Entry
      62: astore_3
      63: aload_3
      64: invokeinterface #24,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      69: checkcast     #9                  // class org/aspectj/util/SoftHashMap$SpecialValue
      72: invokevirtual #13                 // Method org/aspectj/util/SoftHashMap$SpecialValue.get:()Ljava/lang/Object;
      75: astore        4
      77: aload         4
      79: ifnull        97
      82: aload_1
      83: aload_3
      84: invokeinterface #25,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      89: aload         4
      91: invokeinterface #16,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      96: pop
      97: goto          44
     100: aload_1
     101: invokeinterface #19,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
     106: areturn

  public void clear();
    Code:
       0: aload_0
       1: invokespecial #14                 // Method processQueue:()V
       4: aload_0
       5: getfield      #7                  // Field map:Ljava/util/Map;
       8: invokeinterface #26,  1           // InterfaceMethod java/util/Map.clear:()V
      13: return

  public int size();
    Code:
       0: aload_0
       1: invokespecial #14                 // Method processQueue:()V
       4: aload_0
       5: getfield      #7                  // Field map:Ljava/util/Map;
       8: invokeinterface #27,  1           // InterfaceMethod java/util/Map.size:()I
      13: ireturn

  public V remove(java.lang.Object);
    Code:
       0: aload_0
       1: invokespecial #14                 // Method processQueue:()V
       4: aload_0
       5: getfield      #7                  // Field map:Ljava/util/Map;
       8: aload_1
       9: invokeinterface #11,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      14: checkcast     #9                  // class org/aspectj/util/SoftHashMap$SpecialValue
      17: astore_2
      18: aload_2
      19: ifnonnull     24
      22: aconst_null
      23: areturn
      24: aload_2
      25: invokevirtual #13                 // Method org/aspectj/util/SoftHashMap$SpecialValue.get:()Ljava/lang/Object;
      28: areturn

  static java.lang.ref.ReferenceQueue access$000(org.aspectj.util.SoftHashMap);
    Code:
       0: aload_0
       1: getfield      #1                  // Field rq:Ljava/lang/ref/ReferenceQueue;
       4: areturn
}
