Compiled from "ConcreteTypeMunger.java"
public abstract class org.aspectj.weaver.ConcreteTypeMunger implements org.aspectj.util.PartialOrder$PartialComparable {
  protected org.aspectj.weaver.ResolvedTypeMunger munger;

  protected org.aspectj.weaver.ResolvedType aspectType;

  public org.aspectj.weaver.ConcreteTypeMunger(org.aspectj.weaver.ResolvedTypeMunger, org.aspectj.weaver.ResolvedType);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field munger:Lorg/aspectj/weaver/ResolvedTypeMunger;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field aspectType:Lorg/aspectj/weaver/ResolvedType;
      14: return

  public boolean equivalentTo(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #4                  // class org/aspectj/weaver/ConcreteTypeMunger
       4: ifne          9
       7: iconst_0
       8: ireturn
       9: aload_1
      10: checkcast     #4                  // class org/aspectj/weaver/ConcreteTypeMunger
      13: astore_2
      14: aload_2
      15: invokevirtual #5                  // Method getMunger:()Lorg/aspectj/weaver/ResolvedTypeMunger;
      18: astore_3
      19: aload_0
      20: invokevirtual #5                  // Method getMunger:()Lorg/aspectj/weaver/ResolvedTypeMunger;
      23: astore        4
      25: aload         4
      27: instanceof    #6                  // class org/aspectj/weaver/NewConstructorTypeMunger
      30: ifeq          89
      33: aload_3
      34: instanceof    #6                  // class org/aspectj/weaver/NewConstructorTypeMunger
      37: ifeq          89
      40: aload_3
      41: checkcast     #6                  // class org/aspectj/weaver/NewConstructorTypeMunger
      44: aload         4
      46: invokevirtual #7                  // Method org/aspectj/weaver/NewConstructorTypeMunger.equivalentTo:(Ljava/lang/Object;)Z
      49: ifeq          87
      52: aload_2
      53: invokevirtual #8                  // Method getAspectType:()Lorg/aspectj/weaver/ResolvedType;
      56: ifnonnull     69
      59: aload_0
      60: invokevirtual #8                  // Method getAspectType:()Lorg/aspectj/weaver/ResolvedType;
      63: ifnonnull     87
      66: goto          83
      69: aload_2
      70: invokevirtual #8                  // Method getAspectType:()Lorg/aspectj/weaver/ResolvedType;
      73: aload_0
      74: invokevirtual #8                  // Method getAspectType:()Lorg/aspectj/weaver/ResolvedType;
      77: invokevirtual #9                  // Method org/aspectj/weaver/ResolvedType.equals:(Ljava/lang/Object;)Z
      80: ifeq          87
      83: iconst_1
      84: goto          88
      87: iconst_0
      88: ireturn
      89: aload_3
      90: ifnonnull     101
      93: aload         4
      95: ifnonnull     145
      98: goto          110
     101: aload_3
     102: aload         4
     104: invokevirtual #10                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
     107: ifeq          145
     110: aload_2
     111: invokevirtual #8                  // Method getAspectType:()Lorg/aspectj/weaver/ResolvedType;
     114: ifnonnull     127
     117: aload_0
     118: invokevirtual #8                  // Method getAspectType:()Lorg/aspectj/weaver/ResolvedType;
     121: ifnonnull     145
     124: goto          141
     127: aload_2
     128: invokevirtual #8                  // Method getAspectType:()Lorg/aspectj/weaver/ResolvedType;
     131: aload_0
     132: invokevirtual #8                  // Method getAspectType:()Lorg/aspectj/weaver/ResolvedType;
     135: invokevirtual #9                  // Method org/aspectj/weaver/ResolvedType.equals:(Ljava/lang/Object;)Z
     138: ifeq          145
     141: iconst_1
     142: goto          146
     145: iconst_0
     146: ireturn

  public org.aspectj.weaver.ResolvedTypeMunger getMunger();
    Code:
       0: aload_0
       1: getfield      #2                  // Field munger:Lorg/aspectj/weaver/ResolvedTypeMunger;
       4: areturn

  public org.aspectj.weaver.ResolvedType getAspectType();
    Code:
       0: aload_0
       1: getfield      #3                  // Field aspectType:Lorg/aspectj/weaver/ResolvedType;
       4: areturn

  public org.aspectj.weaver.ResolvedMember getSignature();
    Code:
       0: aload_0
       1: getfield      #2                  // Field munger:Lorg/aspectj/weaver/ResolvedTypeMunger;
       4: invokevirtual #11                 // Method org/aspectj/weaver/ResolvedTypeMunger.getSignature:()Lorg/aspectj/weaver/ResolvedMember;
       7: areturn

  public org.aspectj.weaver.World getWorld();
    Code:
       0: aload_0
       1: getfield      #3                  // Field aspectType:Lorg/aspectj/weaver/ResolvedType;
       4: invokevirtual #12                 // Method org/aspectj/weaver/ResolvedType.getWorld:()Lorg/aspectj/weaver/World;
       7: areturn

  public org.aspectj.bridge.ISourceLocation getSourceLocation();
    Code:
       0: aload_0
       1: getfield      #2                  // Field munger:Lorg/aspectj/weaver/ResolvedTypeMunger;
       4: ifnonnull     9
       7: aconst_null
       8: areturn
       9: aload_0
      10: getfield      #2                  // Field munger:Lorg/aspectj/weaver/ResolvedTypeMunger;
      13: invokevirtual #13                 // Method org/aspectj/weaver/ResolvedTypeMunger.getSourceLocation:()Lorg/aspectj/bridge/ISourceLocation;
      16: areturn

  public boolean matches(org.aspectj.weaver.ResolvedType);
    Code:
       0: aload_0
       1: getfield      #2                  // Field munger:Lorg/aspectj/weaver/ResolvedTypeMunger;
       4: ifnonnull     34
       7: new           #14                 // class java/lang/RuntimeException
      10: dup
      11: new           #15                 // class java/lang/StringBuilder
      14: dup
      15: invokespecial #16                 // Method java/lang/StringBuilder."<init>":()V
      18: ldc           #17                 // String huh:
      20: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      23: aload_0
      24: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      27: invokevirtual #20                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      30: invokespecial #21                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;)V
      33: athrow
      34: aload_0
      35: getfield      #2                  // Field munger:Lorg/aspectj/weaver/ResolvedTypeMunger;
      38: aload_1
      39: aload_0
      40: getfield      #3                  // Field aspectType:Lorg/aspectj/weaver/ResolvedType;
      43: invokevirtual #22                 // Method org/aspectj/weaver/ResolvedTypeMunger.matches:(Lorg/aspectj/weaver/ResolvedType;Lorg/aspectj/weaver/ResolvedType;)Z
      46: ireturn

  public org.aspectj.weaver.ResolvedMember getMatchingSyntheticMember(org.aspectj.weaver.Member);
    Code:
       0: aload_0
       1: getfield      #2                  // Field munger:Lorg/aspectj/weaver/ResolvedTypeMunger;
       4: aload_1
       5: aload_0
       6: getfield      #3                  // Field aspectType:Lorg/aspectj/weaver/ResolvedType;
       9: invokevirtual #23                 // Method org/aspectj/weaver/ResolvedTypeMunger.getMatchingSyntheticMember:(Lorg/aspectj/weaver/Member;Lorg/aspectj/weaver/ResolvedType;)Lorg/aspectj/weaver/ResolvedMember;
      12: areturn

  public int compareTo(java.lang.Object);
    Code:
       0: aload_1
       1: checkcast     #4                  // class org/aspectj/weaver/ConcreteTypeMunger
       4: astore_2
       5: aload_2
       6: getfield      #3                  // Field aspectType:Lorg/aspectj/weaver/ResolvedType;
       9: astore_3
      10: aload_0
      11: getfield      #3                  // Field aspectType:Lorg/aspectj/weaver/ResolvedType;
      14: aload_3
      15: invokevirtual #9                  // Method org/aspectj/weaver/ResolvedType.equals:(Ljava/lang/Object;)Z
      18: ifeq          48
      21: aload_0
      22: invokevirtual #24                 // Method getSignature:()Lorg/aspectj/weaver/ResolvedMember;
      25: invokeinterface #25,  1           // InterfaceMethod org/aspectj/weaver/ResolvedMember.getStart:()I
      30: aload_2
      31: invokevirtual #24                 // Method getSignature:()Lorg/aspectj/weaver/ResolvedMember;
      34: invokeinterface #25,  1           // InterfaceMethod org/aspectj/weaver/ResolvedMember.getStart:()I
      39: if_icmpge     46
      42: iconst_m1
      43: goto          47
      46: iconst_1
      47: ireturn
      48: aload_0
      49: getfield      #3                  // Field aspectType:Lorg/aspectj/weaver/ResolvedType;
      52: aload_2
      53: getfield      #3                  // Field aspectType:Lorg/aspectj/weaver/ResolvedType;
      56: invokevirtual #26                 // Method org/aspectj/weaver/ResolvedType.isAssignableFrom:(Lorg/aspectj/weaver/ResolvedType;)Z
      59: ifeq          64
      62: iconst_1
      63: ireturn
      64: aload_2
      65: getfield      #3                  // Field aspectType:Lorg/aspectj/weaver/ResolvedType;
      68: aload_0
      69: getfield      #3                  // Field aspectType:Lorg/aspectj/weaver/ResolvedType;
      72: invokevirtual #26                 // Method org/aspectj/weaver/ResolvedType.isAssignableFrom:(Lorg/aspectj/weaver/ResolvedType;)Z
      75: ifeq          80
      78: iconst_m1
      79: ireturn
      80: iconst_0
      81: ireturn

  public int fallbackCompareTo(java.lang.Object);
    Code:
       0: iconst_0
       1: ireturn

  public boolean isTargetTypeParameterized();
    Code:
       0: aload_0
       1: getfield      #2                  // Field munger:Lorg/aspectj/weaver/ResolvedTypeMunger;
       4: ifnonnull     9
       7: iconst_0
       8: ireturn
       9: aload_0
      10: getfield      #2                  // Field munger:Lorg/aspectj/weaver/ResolvedTypeMunger;
      13: invokevirtual #27                 // Method org/aspectj/weaver/ResolvedTypeMunger.sharesTypeVariablesWithGenericType:()Z
      16: ireturn

  public abstract org.aspectj.weaver.ConcreteTypeMunger parameterizedFor(org.aspectj.weaver.ResolvedType);

  public boolean isLateMunger();
    Code:
       0: aload_0
       1: getfield      #2                  // Field munger:Lorg/aspectj/weaver/ResolvedTypeMunger;
       4: ifnonnull     9
       7: iconst_0
       8: ireturn
       9: aload_0
      10: getfield      #2                  // Field munger:Lorg/aspectj/weaver/ResolvedTypeMunger;
      13: invokevirtual #28                 // Method org/aspectj/weaver/ResolvedTypeMunger.isLateMunger:()Z
      16: ireturn

  public abstract org.aspectj.weaver.ConcreteTypeMunger parameterizeWith(java.util.Map<java.lang.String, org.aspectj.weaver.UnresolvedType>, org.aspectj.weaver.World);

  public boolean existsToSupportShadowMunging();
    Code:
       0: aload_0
       1: getfield      #2                  // Field munger:Lorg/aspectj/weaver/ResolvedTypeMunger;
       4: ifnull        15
       7: aload_0
       8: getfield      #2                  // Field munger:Lorg/aspectj/weaver/ResolvedTypeMunger;
      11: invokevirtual #29                 // Method org/aspectj/weaver/ResolvedTypeMunger.existsToSupportShadowMunging:()Z
      14: ireturn
      15: iconst_0
      16: ireturn

  public boolean shouldOverwrite();
    Code:
       0: iconst_1
       1: ireturn
}
