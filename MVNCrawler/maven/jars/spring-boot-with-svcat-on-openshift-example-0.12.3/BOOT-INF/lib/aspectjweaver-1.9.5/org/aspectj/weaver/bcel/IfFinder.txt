Compiled from "IfFinder.java"
class org.aspectj.weaver.bcel.IfFinder extends org.aspectj.weaver.patterns.AbstractPatternNodeVisitor {
  boolean hasIf;

  org.aspectj.weaver.bcel.IfFinder();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/aspectj/weaver/patterns/AbstractPatternNodeVisitor."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field hasIf:Z
       9: return

  public java.lang.Object visit(org.aspectj.weaver.patterns.IfPointcut, java.lang.Object);
    Code:
       0: aload_1
       1: invokevirtual #3                  // Method org/aspectj/weaver/patterns/IfPointcut.alwaysFalse:()Z
       4: ifne          22
       7: aload_1
       8: invokevirtual #4                  // Method org/aspectj/weaver/patterns/IfPointcut.alwaysTrue:()Z
      11: ifeq          17
      14: goto          22
      17: aload_0
      18: iconst_1
      19: putfield      #2                  // Field hasIf:Z
      22: aload_1
      23: areturn

  public java.lang.Object visit(org.aspectj.weaver.patterns.AndPointcut, java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #2                  // Field hasIf:Z
       4: ifne          17
       7: aload_1
       8: invokevirtual #5                  // Method org/aspectj/weaver/patterns/AndPointcut.getLeft:()Lorg/aspectj/weaver/patterns/Pointcut;
      11: aload_0
      12: aload_2
      13: invokevirtual #6                  // Method org/aspectj/weaver/patterns/Pointcut.accept:(Lorg/aspectj/weaver/patterns/PatternNodeVisitor;Ljava/lang/Object;)Ljava/lang/Object;
      16: pop
      17: aload_0
      18: getfield      #2                  // Field hasIf:Z
      21: ifne          34
      24: aload_1
      25: invokevirtual #7                  // Method org/aspectj/weaver/patterns/AndPointcut.getRight:()Lorg/aspectj/weaver/patterns/Pointcut;
      28: aload_0
      29: aload_2
      30: invokevirtual #6                  // Method org/aspectj/weaver/patterns/Pointcut.accept:(Lorg/aspectj/weaver/patterns/PatternNodeVisitor;Ljava/lang/Object;)Ljava/lang/Object;
      33: pop
      34: aload_1
      35: areturn

  public java.lang.Object visit(org.aspectj.weaver.patterns.NotPointcut, java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #2                  // Field hasIf:Z
       4: ifne          17
       7: aload_1
       8: invokevirtual #8                  // Method org/aspectj/weaver/patterns/NotPointcut.getNegatedPointcut:()Lorg/aspectj/weaver/patterns/Pointcut;
      11: aload_0
      12: aload_2
      13: invokevirtual #6                  // Method org/aspectj/weaver/patterns/Pointcut.accept:(Lorg/aspectj/weaver/patterns/PatternNodeVisitor;Ljava/lang/Object;)Ljava/lang/Object;
      16: pop
      17: aload_1
      18: areturn

  public java.lang.Object visit(org.aspectj.weaver.patterns.OrPointcut, java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #2                  // Field hasIf:Z
       4: ifne          17
       7: aload_1
       8: invokevirtual #9                  // Method org/aspectj/weaver/patterns/OrPointcut.getLeft:()Lorg/aspectj/weaver/patterns/Pointcut;
      11: aload_0
      12: aload_2
      13: invokevirtual #6                  // Method org/aspectj/weaver/patterns/Pointcut.accept:(Lorg/aspectj/weaver/patterns/PatternNodeVisitor;Ljava/lang/Object;)Ljava/lang/Object;
      16: pop
      17: aload_0
      18: getfield      #2                  // Field hasIf:Z
      21: ifne          34
      24: aload_1
      25: invokevirtual #10                 // Method org/aspectj/weaver/patterns/OrPointcut.getRight:()Lorg/aspectj/weaver/patterns/Pointcut;
      28: aload_0
      29: aload_2
      30: invokevirtual #6                  // Method org/aspectj/weaver/patterns/Pointcut.accept:(Lorg/aspectj/weaver/patterns/PatternNodeVisitor;Ljava/lang/Object;)Ljava/lang/Object;
      33: pop
      34: aload_1
      35: areturn
}
