Compiled from "TypePattern.java"
public abstract class org.aspectj.weaver.patterns.TypePattern extends org.aspectj.weaver.patterns.PatternNode {
  public static final org.aspectj.weaver.patterns.TypePattern$MatchKind STATIC;

  public static final org.aspectj.weaver.patterns.TypePattern$MatchKind DYNAMIC;

  public static final org.aspectj.weaver.patterns.TypePattern ELLIPSIS;

  public static final org.aspectj.weaver.patterns.TypePattern ANY;

  public static final org.aspectj.weaver.patterns.TypePattern NO;

  protected boolean includeSubtypes;

  protected boolean isVarArgs;

  protected org.aspectj.weaver.patterns.AnnotationTypePattern annotationPattern;

  protected org.aspectj.weaver.patterns.TypePatternList typeParameters;

  public static final byte WILD;

  public static final byte EXACT;

  public static final byte BINDING;

  public static final byte ELLIPSIS_KEY;

  public static final byte ANY_KEY;

  public static final byte NOT;

  public static final byte OR;

  public static final byte AND;

  public static final byte NO_KEY;

  public static final byte ANY_WITH_ANNO;

  public static final byte HAS_MEMBER;

  public static final byte TYPE_CATEGORY;

  protected org.aspectj.weaver.patterns.TypePattern(boolean, boolean, org.aspectj.weaver.patterns.TypePatternList);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/aspectj/weaver/patterns/PatternNode."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field isVarArgs:Z
       9: aload_0
      10: getstatic     #3                  // Field org/aspectj/weaver/patterns/AnnotationTypePattern.ANY:Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
      13: putfield      #4                  // Field annotationPattern:Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
      16: aload_0
      17: getstatic     #5                  // Field org/aspectj/weaver/patterns/TypePatternList.EMPTY:Lorg/aspectj/weaver/patterns/TypePatternList;
      20: putfield      #6                  // Field typeParameters:Lorg/aspectj/weaver/patterns/TypePatternList;
      23: aload_0
      24: iload_1
      25: putfield      #7                  // Field includeSubtypes:Z
      28: aload_0
      29: iload_2
      30: putfield      #2                  // Field isVarArgs:Z
      33: aload_0
      34: aload_3
      35: ifnonnull     44
      38: getstatic     #5                  // Field org/aspectj/weaver/patterns/TypePatternList.EMPTY:Lorg/aspectj/weaver/patterns/TypePatternList;
      41: goto          45
      44: aload_3
      45: putfield      #6                  // Field typeParameters:Lorg/aspectj/weaver/patterns/TypePatternList;
      48: return

  protected org.aspectj.weaver.patterns.TypePattern(boolean, boolean);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: aconst_null
       4: invokespecial #8                  // Method "<init>":(ZZLorg/aspectj/weaver/patterns/TypePatternList;)V
       7: return

  public org.aspectj.weaver.patterns.AnnotationTypePattern getAnnotationPattern();
    Code:
       0: aload_0
       1: getfield      #4                  // Field annotationPattern:Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
       4: areturn

  public boolean isVarArgs();
    Code:
       0: aload_0
       1: getfield      #2                  // Field isVarArgs:Z
       4: ireturn

  public boolean isStarAnnotation();
    Code:
       0: aload_0
       1: getfield      #4                  // Field annotationPattern:Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
       4: getstatic     #3                  // Field org/aspectj/weaver/patterns/AnnotationTypePattern.ANY:Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
       7: if_acmpne     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public boolean isArray();
    Code:
       0: iconst_0
       1: ireturn

  protected org.aspectj.weaver.patterns.TypePattern(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: iconst_0
       3: invokespecial #9                  // Method "<init>":(ZZ)V
       6: return

  public void setAnnotationTypePattern(org.aspectj.weaver.patterns.AnnotationTypePattern);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field annotationPattern:Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
       5: return

  public void setTypeParameters(org.aspectj.weaver.patterns.TypePatternList);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field typeParameters:Lorg/aspectj/weaver/patterns/TypePatternList;
       5: return

  public org.aspectj.weaver.patterns.TypePatternList getTypeParameters();
    Code:
       0: aload_0
       1: getfield      #6                  // Field typeParameters:Lorg/aspectj/weaver/patterns/TypePatternList;
       4: areturn

  public void setIsVarArgs(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field isVarArgs:Z
       5: return

  protected boolean couldEverMatchSameTypesAs(org.aspectj.weaver.patterns.TypePattern);
    Code:
       0: aload_0
       1: getfield      #7                  // Field includeSubtypes:Z
       4: ifne          14
       7: aload_1
       8: getfield      #7                  // Field includeSubtypes:Z
      11: ifeq          16
      14: iconst_1
      15: ireturn
      16: aload_0
      17: getfield      #4                  // Field annotationPattern:Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
      20: getstatic     #3                  // Field org/aspectj/weaver/patterns/AnnotationTypePattern.ANY:Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
      23: if_acmpeq     28
      26: iconst_1
      27: ireturn
      28: aload_1
      29: getfield      #4                  // Field annotationPattern:Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
      32: getstatic     #3                  // Field org/aspectj/weaver/patterns/AnnotationTypePattern.ANY:Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
      35: if_acmpeq     40
      38: iconst_1
      39: ireturn
      40: iconst_0
      41: ireturn

  public boolean matchesStatically(org.aspectj.weaver.ResolvedType);
    Code:
       0: aload_0
       1: getfield      #7                  // Field includeSubtypes:Z
       4: ifeq          13
       7: aload_0
       8: aload_1
       9: invokevirtual #10                 // Method matchesSubtypes:(Lorg/aspectj/weaver/ResolvedType;)Z
      12: ireturn
      13: aload_0
      14: aload_1
      15: invokevirtual #11                 // Method matchesExactly:(Lorg/aspectj/weaver/ResolvedType;)Z
      18: ireturn

  public abstract org.aspectj.util.FuzzyBoolean matchesInstanceof(org.aspectj.weaver.ResolvedType);

  public final org.aspectj.util.FuzzyBoolean matches(org.aspectj.weaver.ResolvedType, org.aspectj.weaver.patterns.TypePattern$MatchKind);
    Code:
       0: aload_1
       1: invokevirtual #12                 // Method org/aspectj/weaver/ResolvedType.isMissing:()Z
       4: ifeq          11
       7: getstatic     #13                 // Field org/aspectj/util/FuzzyBoolean.NO:Lorg/aspectj/util/FuzzyBoolean;
      10: areturn
      11: aload_2
      12: getstatic     #14                 // Field STATIC:Lorg/aspectj/weaver/patterns/TypePattern$MatchKind;
      15: if_acmpne     27
      18: aload_0
      19: aload_1
      20: invokevirtual #15                 // Method matchesStatically:(Lorg/aspectj/weaver/ResolvedType;)Z
      23: invokestatic  #16                 // Method org/aspectj/util/FuzzyBoolean.fromBoolean:(Z)Lorg/aspectj/util/FuzzyBoolean;
      26: areturn
      27: aload_2
      28: getstatic     #17                 // Field DYNAMIC:Lorg/aspectj/weaver/patterns/TypePattern$MatchKind;
      31: if_acmpne     40
      34: aload_0
      35: aload_1
      36: invokevirtual #18                 // Method matchesInstanceof:(Lorg/aspectj/weaver/ResolvedType;)Lorg/aspectj/util/FuzzyBoolean;
      39: areturn
      40: new           #19                 // class java/lang/IllegalArgumentException
      43: dup
      44: ldc           #20                 // String kind must be DYNAMIC or STATIC
      46: invokespecial #21                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      49: athrow

  protected abstract boolean matchesExactly(org.aspectj.weaver.ResolvedType);

  protected abstract boolean matchesExactly(org.aspectj.weaver.ResolvedType, org.aspectj.weaver.ResolvedType);

  protected boolean matchesSubtypes(org.aspectj.weaver.ResolvedType);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #11                 // Method matchesExactly:(Lorg/aspectj/weaver/ResolvedType;)Z
       5: ifeq          10
       8: iconst_1
       9: ireturn
      10: aconst_null
      11: astore_2
      12: aload_1
      13: invokevirtual #22                 // Method org/aspectj/weaver/ResolvedType.isTypeVariableReference:()Z
      16: ifeq          45
      19: aload_1
      20: checkcast     #23                 // class org/aspectj/weaver/TypeVariableReference
      23: invokeinterface #24,  1           // InterfaceMethod org/aspectj/weaver/TypeVariableReference.getTypeVariable:()Lorg/aspectj/weaver/TypeVariable;
      28: invokevirtual #25                 // Method org/aspectj/weaver/TypeVariable.getFirstBound:()Lorg/aspectj/weaver/UnresolvedType;
      31: aload_1
      32: invokevirtual #26                 // Method org/aspectj/weaver/ResolvedType.getWorld:()Lorg/aspectj/weaver/World;
      35: invokevirtual #27                 // Method org/aspectj/weaver/UnresolvedType.resolve:(Lorg/aspectj/weaver/World;)Lorg/aspectj/weaver/ResolvedType;
      38: invokevirtual #28                 // Method org/aspectj/weaver/ResolvedType.getDirectSupertypes:()Ljava/util/Iterator;
      41: astore_2
      42: goto          62
      45: aload_1
      46: invokevirtual #29                 // Method org/aspectj/weaver/ResolvedType.isRawType:()Z
      49: ifeq          57
      52: aload_1
      53: invokevirtual #30                 // Method org/aspectj/weaver/ResolvedType.getGenericType:()Lorg/aspectj/weaver/ReferenceType;
      56: astore_1
      57: aload_1
      58: invokevirtual #28                 // Method org/aspectj/weaver/ResolvedType.getDirectSupertypes:()Ljava/util/Iterator;
      61: astore_2
      62: aload_2
      63: astore_3
      64: aload_3
      65: invokeinterface #31,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      70: ifeq          99
      73: aload_3
      74: invokeinterface #32,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      79: checkcast     #33                 // class org/aspectj/weaver/ResolvedType
      82: astore        4
      84: aload_0
      85: aload         4
      87: aload_1
      88: invokevirtual #34                 // Method matchesSubtypes:(Lorg/aspectj/weaver/ResolvedType;Lorg/aspectj/weaver/ResolvedType;)Z
      91: ifeq          96
      94: iconst_1
      95: ireturn
      96: goto          64
      99: iconst_0
     100: ireturn

  protected boolean matchesSubtypes(org.aspectj.weaver.ResolvedType, org.aspectj.weaver.ResolvedType);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #35                 // Method matchesExactly:(Lorg/aspectj/weaver/ResolvedType;Lorg/aspectj/weaver/ResolvedType;)Z
       6: ifeq          11
       9: iconst_1
      10: ireturn
      11: aload_1
      12: invokevirtual #36                 // Method org/aspectj/weaver/ResolvedType.isParameterizedType:()Z
      15: ifne          25
      18: aload_1
      19: invokevirtual #29                 // Method org/aspectj/weaver/ResolvedType.isRawType:()Z
      22: ifeq          30
      25: aload_1
      26: invokevirtual #30                 // Method org/aspectj/weaver/ResolvedType.getGenericType:()Lorg/aspectj/weaver/ReferenceType;
      29: astore_1
      30: aload_1
      31: invokevirtual #28                 // Method org/aspectj/weaver/ResolvedType.getDirectSupertypes:()Ljava/util/Iterator;
      34: astore_3
      35: aload_3
      36: invokeinterface #31,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      41: ifeq          70
      44: aload_3
      45: invokeinterface #32,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      50: checkcast     #33                 // class org/aspectj/weaver/ResolvedType
      53: astore        4
      55: aload_0
      56: aload         4
      58: aload_2
      59: invokevirtual #34                 // Method matchesSubtypes:(Lorg/aspectj/weaver/ResolvedType;Lorg/aspectj/weaver/ResolvedType;)Z
      62: ifeq          67
      65: iconst_1
      66: ireturn
      67: goto          35
      70: iconst_0
      71: ireturn

  public org.aspectj.weaver.UnresolvedType resolveExactType(org.aspectj.weaver.patterns.IScope, org.aspectj.weaver.patterns.Bindings);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iconst_0
       4: iconst_1
       5: invokevirtual #37                 // Method resolveBindings:(Lorg/aspectj/weaver/patterns/IScope;Lorg/aspectj/weaver/patterns/Bindings;ZZ)Lorg/aspectj/weaver/patterns/TypePattern;
       8: astore_3
       9: aload_3
      10: instanceof    #38                 // class org/aspectj/weaver/patterns/ExactTypePattern
      13: ifne          20
      16: getstatic     #39                 // Field org/aspectj/weaver/ResolvedType.MISSING:Lorg/aspectj/weaver/ResolvedType$Missing;
      19: areturn
      20: aload_3
      21: checkcast     #38                 // class org/aspectj/weaver/patterns/ExactTypePattern
      24: invokevirtual #40                 // Method org/aspectj/weaver/patterns/ExactTypePattern.getType:()Lorg/aspectj/weaver/UnresolvedType;
      27: areturn

  public org.aspectj.weaver.UnresolvedType getExactType();
    Code:
       0: aload_0
       1: instanceof    #38                 // class org/aspectj/weaver/patterns/ExactTypePattern
       4: ifeq          15
       7: aload_0
       8: checkcast     #38                 // class org/aspectj/weaver/patterns/ExactTypePattern
      11: invokevirtual #40                 // Method org/aspectj/weaver/patterns/ExactTypePattern.getType:()Lorg/aspectj/weaver/UnresolvedType;
      14: areturn
      15: getstatic     #39                 // Field org/aspectj/weaver/ResolvedType.MISSING:Lorg/aspectj/weaver/ResolvedType$Missing;
      18: areturn

  protected org.aspectj.weaver.patterns.TypePattern notExactType(org.aspectj.weaver.patterns.IScope);
    Code:
       0: aload_1
       1: invokeinterface #41,  1           // InterfaceMethod org/aspectj/weaver/patterns/IScope.getMessageHandler:()Lorg/aspectj/bridge/IMessageHandler;
       6: ldc           #43                 // String exactTypePatternRequired
       8: invokestatic  #44                 // Method org/aspectj/weaver/WeaverMessages.format:(Ljava/lang/String;)Ljava/lang/String;
      11: aload_0
      12: invokevirtual #45                 // Method getSourceLocation:()Lorg/aspectj/bridge/ISourceLocation;
      15: invokestatic  #46                 // Method org/aspectj/bridge/MessageUtil.error:(Ljava/lang/String;Lorg/aspectj/bridge/ISourceLocation;)Lorg/aspectj/bridge/IMessage;
      18: invokeinterface #47,  2           // InterfaceMethod org/aspectj/bridge/IMessageHandler.handleMessage:(Lorg/aspectj/bridge/IMessage;)Z
      23: pop
      24: getstatic     #48                 // Field NO:Lorg/aspectj/weaver/patterns/TypePattern;
      27: areturn

  public org.aspectj.weaver.patterns.TypePattern resolveBindings(org.aspectj.weaver.patterns.IScope, org.aspectj.weaver.patterns.Bindings, boolean, boolean);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #4                  // Field annotationPattern:Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
       5: aload_1
       6: aload_2
       7: iload_3
       8: invokevirtual #49                 // Method org/aspectj/weaver/patterns/AnnotationTypePattern.resolveBindings:(Lorg/aspectj/weaver/patterns/IScope;Lorg/aspectj/weaver/patterns/Bindings;Z)Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
      11: putfield      #4                  // Field annotationPattern:Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
      14: aload_0
      15: areturn

  public void resolve(org.aspectj.weaver.World);
    Code:
       0: aload_0
       1: getfield      #4                  // Field annotationPattern:Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
       4: aload_1
       5: invokevirtual #50                 // Method org/aspectj/weaver/patterns/AnnotationTypePattern.resolve:(Lorg/aspectj/weaver/World;)V
       8: return

  public abstract org.aspectj.weaver.patterns.TypePattern parameterizeWith(java.util.Map<java.lang.String, org.aspectj.weaver.UnresolvedType>, org.aspectj.weaver.World);

  public void postRead(org.aspectj.weaver.ResolvedType);
    Code:
       0: return

  public boolean isEllipsis();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isStar();
    Code:
       0: iconst_0
       1: ireturn

  public org.aspectj.weaver.patterns.TypePattern remapAdviceFormals(org.aspectj.weaver.IntMap);
    Code:
       0: aload_0
       1: areturn

  public static org.aspectj.weaver.patterns.TypePattern read(org.aspectj.weaver.VersionedDataInputStream, org.aspectj.weaver.ISourceContext) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #51                 // Method org/aspectj/weaver/VersionedDataInputStream.readByte:()B
       4: istore_2
       5: iload_2
       6: tableswitch   { // 1 to 12
                     1: 68
                     2: 74
                     3: 80
                     4: 86
                     5: 90
                     6: 98
                     7: 104
                     8: 110
                     9: 94
                    10: 116
                    11: 122
                    12: 128
               default: 134
          }
      68: aload_0
      69: aload_1
      70: invokestatic  #52                 // Method org/aspectj/weaver/patterns/WildTypePattern.read:(Lorg/aspectj/weaver/VersionedDataInputStream;Lorg/aspectj/weaver/ISourceContext;)Lorg/aspectj/weaver/patterns/TypePattern;
      73: areturn
      74: aload_0
      75: aload_1
      76: invokestatic  #53                 // Method org/aspectj/weaver/patterns/ExactTypePattern.read:(Lorg/aspectj/weaver/VersionedDataInputStream;Lorg/aspectj/weaver/ISourceContext;)Lorg/aspectj/weaver/patterns/TypePattern;
      79: areturn
      80: aload_0
      81: aload_1
      82: invokestatic  #54                 // Method org/aspectj/weaver/patterns/BindingTypePattern.read:(Lorg/aspectj/weaver/VersionedDataInputStream;Lorg/aspectj/weaver/ISourceContext;)Lorg/aspectj/weaver/patterns/TypePattern;
      85: areturn
      86: getstatic     #55                 // Field ELLIPSIS:Lorg/aspectj/weaver/patterns/TypePattern;
      89: areturn
      90: getstatic     #56                 // Field ANY:Lorg/aspectj/weaver/patterns/TypePattern;
      93: areturn
      94: getstatic     #48                 // Field NO:Lorg/aspectj/weaver/patterns/TypePattern;
      97: areturn
      98: aload_0
      99: aload_1
     100: invokestatic  #57                 // Method org/aspectj/weaver/patterns/NotTypePattern.read:(Lorg/aspectj/weaver/VersionedDataInputStream;Lorg/aspectj/weaver/ISourceContext;)Lorg/aspectj/weaver/patterns/TypePattern;
     103: areturn
     104: aload_0
     105: aload_1
     106: invokestatic  #58                 // Method org/aspectj/weaver/patterns/OrTypePattern.read:(Lorg/aspectj/weaver/VersionedDataInputStream;Lorg/aspectj/weaver/ISourceContext;)Lorg/aspectj/weaver/patterns/TypePattern;
     109: areturn
     110: aload_0
     111: aload_1
     112: invokestatic  #59                 // Method org/aspectj/weaver/patterns/AndTypePattern.read:(Lorg/aspectj/weaver/VersionedDataInputStream;Lorg/aspectj/weaver/ISourceContext;)Lorg/aspectj/weaver/patterns/TypePattern;
     115: areturn
     116: aload_0
     117: aload_1
     118: invokestatic  #60                 // Method org/aspectj/weaver/patterns/AnyWithAnnotationTypePattern.read:(Lorg/aspectj/weaver/VersionedDataInputStream;Lorg/aspectj/weaver/ISourceContext;)Lorg/aspectj/weaver/patterns/TypePattern;
     121: areturn
     122: aload_0
     123: aload_1
     124: invokestatic  #61                 // Method org/aspectj/weaver/patterns/HasMemberTypePattern.read:(Lorg/aspectj/weaver/VersionedDataInputStream;Lorg/aspectj/weaver/ISourceContext;)Lorg/aspectj/weaver/patterns/TypePattern;
     127: areturn
     128: aload_0
     129: aload_1
     130: invokestatic  #62                 // Method org/aspectj/weaver/patterns/TypeCategoryTypePattern.read:(Lorg/aspectj/weaver/VersionedDataInputStream;Lorg/aspectj/weaver/ISourceContext;)Lorg/aspectj/weaver/patterns/TypePattern;
     133: areturn
     134: new           #63                 // class org/aspectj/weaver/BCException
     137: dup
     138: new           #64                 // class java/lang/StringBuilder
     141: dup
     142: invokespecial #65                 // Method java/lang/StringBuilder."<init>":()V
     145: ldc           #66                 // String unknown TypePattern kind:
     147: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     150: iload_2
     151: invokevirtual #68                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     154: invokevirtual #69                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     157: invokespecial #70                 // Method org/aspectj/weaver/BCException."<init>":(Ljava/lang/String;)V
     160: athrow

  public boolean isIncludeSubtypes();
    Code:
       0: aload_0
       1: getfield      #7                  // Field includeSubtypes:Z
       4: ireturn

  public boolean isBangVoid();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isVoid();
    Code:
       0: iconst_0
       1: ireturn

  public boolean hasFailedResolution();
    Code:
       0: iconst_0
       1: ireturn

  static {};
    Code:
       0: new           #71                 // class org/aspectj/weaver/patterns/TypePattern$MatchKind
       3: dup
       4: ldc           #72                 // String STATIC
       6: invokespecial #73                 // Method org/aspectj/weaver/patterns/TypePattern$MatchKind."<init>":(Ljava/lang/String;)V
       9: putstatic     #14                 // Field STATIC:Lorg/aspectj/weaver/patterns/TypePattern$MatchKind;
      12: new           #71                 // class org/aspectj/weaver/patterns/TypePattern$MatchKind
      15: dup
      16: ldc           #74                 // String DYNAMIC
      18: invokespecial #73                 // Method org/aspectj/weaver/patterns/TypePattern$MatchKind."<init>":(Ljava/lang/String;)V
      21: putstatic     #17                 // Field DYNAMIC:Lorg/aspectj/weaver/patterns/TypePattern$MatchKind;
      24: new           #75                 // class org/aspectj/weaver/patterns/EllipsisTypePattern
      27: dup
      28: invokespecial #76                 // Method org/aspectj/weaver/patterns/EllipsisTypePattern."<init>":()V
      31: putstatic     #55                 // Field ELLIPSIS:Lorg/aspectj/weaver/patterns/TypePattern;
      34: new           #77                 // class org/aspectj/weaver/patterns/AnyTypePattern
      37: dup
      38: invokespecial #78                 // Method org/aspectj/weaver/patterns/AnyTypePattern."<init>":()V
      41: putstatic     #56                 // Field ANY:Lorg/aspectj/weaver/patterns/TypePattern;
      44: new           #79                 // class org/aspectj/weaver/patterns/NoTypePattern
      47: dup
      48: invokespecial #80                 // Method org/aspectj/weaver/patterns/NoTypePattern."<init>":()V
      51: putstatic     #48                 // Field NO:Lorg/aspectj/weaver/patterns/TypePattern;
      54: return
}
