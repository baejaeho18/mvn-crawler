Compiled from "DeclareParentsImpl.java"
public class org.aspectj.internal.lang.reflect.DeclareParentsImpl implements org.aspectj.lang.reflect.DeclareParents {
  private org.aspectj.lang.reflect.AjType<?> declaringType;

  private org.aspectj.lang.reflect.TypePattern targetTypesPattern;

  private java.lang.reflect.Type[] parents;

  private java.lang.String parentsString;

  private java.lang.String firstMissingTypeName;

  private boolean isExtends;

  private boolean parentsError;

  public org.aspectj.internal.lang.reflect.DeclareParentsImpl(java.lang.String, java.lang.String, boolean, org.aspectj.lang.reflect.AjType<?>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field parentsError:Z
       9: aload_0
      10: new           #3                  // class org/aspectj/internal/lang/reflect/TypePatternImpl
      13: dup
      14: aload_1
      15: invokespecial #4                  // Method org/aspectj/internal/lang/reflect/TypePatternImpl."<init>":(Ljava/lang/String;)V
      18: putfield      #5                  // Field targetTypesPattern:Lorg/aspectj/lang/reflect/TypePattern;
      21: aload_0
      22: iload_3
      23: putfield      #6                  // Field isExtends:Z
      26: aload_0
      27: aload         4
      29: putfield      #7                  // Field declaringType:Lorg/aspectj/lang/reflect/AjType;
      32: aload_0
      33: aload_2
      34: putfield      #8                  // Field parentsString:Ljava/lang/String;
      37: aload_0
      38: aload_2
      39: aload         4
      41: invokeinterface #9,  1            // InterfaceMethod org/aspectj/lang/reflect/AjType.getJavaClass:()Ljava/lang/Class;
      46: invokestatic  #10                 // Method org/aspectj/internal/lang/reflect/StringToType.commaSeparatedListToTypeArray:(Ljava/lang/String;Ljava/lang/Class;)[Ljava/lang/reflect/Type;
      49: putfield      #11                 // Field parents:[Ljava/lang/reflect/Type;
      52: goto          71
      55: astore        5
      57: aload_0
      58: iconst_1
      59: putfield      #2                  // Field parentsError:Z
      62: aload_0
      63: aload         5
      65: invokevirtual #13                 // Method java/lang/ClassNotFoundException.getMessage:()Ljava/lang/String;
      68: putfield      #14                 // Field firstMissingTypeName:Ljava/lang/String;
      71: return
    Exception table:
       from    to  target type
          37    52    55   Class java/lang/ClassNotFoundException

  public org.aspectj.lang.reflect.AjType getDeclaringType();
    Code:
       0: aload_0
       1: getfield      #7                  // Field declaringType:Lorg/aspectj/lang/reflect/AjType;
       4: areturn

  public org.aspectj.lang.reflect.TypePattern getTargetTypesPattern();
    Code:
       0: aload_0
       1: getfield      #5                  // Field targetTypesPattern:Lorg/aspectj/lang/reflect/TypePattern;
       4: areturn

  public boolean isExtends();
    Code:
       0: aload_0
       1: getfield      #6                  // Field isExtends:Z
       4: ireturn

  public boolean isImplements();
    Code:
       0: aload_0
       1: getfield      #6                  // Field isExtends:Z
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public java.lang.reflect.Type[] getParentTypes() throws java.lang.ClassNotFoundException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field parentsError:Z
       4: ifeq          19
       7: new           #12                 // class java/lang/ClassNotFoundException
      10: dup
      11: aload_0
      12: getfield      #14                 // Field firstMissingTypeName:Ljava/lang/String;
      15: invokespecial #15                 // Method java/lang/ClassNotFoundException."<init>":(Ljava/lang/String;)V
      18: athrow
      19: aload_0
      20: getfield      #11                 // Field parents:[Ljava/lang/reflect/Type;
      23: areturn

  public java.lang.String toString();
    Code:
       0: new           #16                 // class java/lang/StringBuffer
       3: dup
       4: invokespecial #17                 // Method java/lang/StringBuffer."<init>":()V
       7: astore_1
       8: aload_1
       9: ldc           #18                 // String declare parents :
      11: invokevirtual #19                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      14: pop
      15: aload_1
      16: aload_0
      17: invokevirtual #20                 // Method getTargetTypesPattern:()Lorg/aspectj/lang/reflect/TypePattern;
      20: invokeinterface #21,  1           // InterfaceMethod org/aspectj/lang/reflect/TypePattern.asString:()Ljava/lang/String;
      25: invokevirtual #19                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      28: pop
      29: aload_1
      30: aload_0
      31: invokevirtual #22                 // Method isExtends:()Z
      34: ifeq          42
      37: ldc           #23                 // String  extends
      39: goto          44
      42: ldc           #24                 // String  implements
      44: invokevirtual #19                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      47: pop
      48: aload_1
      49: aload_0
      50: getfield      #8                  // Field parentsString:Ljava/lang/String;
      53: invokevirtual #19                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      56: pop
      57: aload_1
      58: invokevirtual #25                 // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
      61: areturn
}
