Compiled from "NotTypePattern.java"
public class org.aspectj.weaver.patterns.NotTypePattern extends org.aspectj.weaver.patterns.TypePattern {
  private org.aspectj.weaver.patterns.TypePattern negatedPattern;

  private boolean isBangVoid;

  private boolean checked;

  public org.aspectj.weaver.patterns.NotTypePattern(org.aspectj.weaver.patterns.TypePattern);
    Code:
       0: aload_0
       1: iconst_0
       2: iconst_0
       3: invokespecial #1                  // Method org/aspectj/weaver/patterns/TypePattern."<init>":(ZZ)V
       6: aload_0
       7: iconst_0
       8: putfield      #2                  // Field isBangVoid:Z
      11: aload_0
      12: iconst_0
      13: putfield      #3                  // Field checked:Z
      16: aload_0
      17: aload_1
      18: putfield      #4                  // Field negatedPattern:Lorg/aspectj/weaver/patterns/TypePattern;
      21: aload_0
      22: aload_1
      23: invokevirtual #5                  // Method org/aspectj/weaver/patterns/TypePattern.getSourceContext:()Lorg/aspectj/weaver/ISourceContext;
      26: aload_1
      27: invokevirtual #6                  // Method org/aspectj/weaver/patterns/TypePattern.getStart:()I
      30: aload_1
      31: invokevirtual #7                  // Method org/aspectj/weaver/patterns/TypePattern.getEnd:()I
      34: invokevirtual #8                  // Method setLocation:(Lorg/aspectj/weaver/ISourceContext;II)V
      37: return

  public org.aspectj.weaver.patterns.TypePattern getNegatedPattern();
    Code:
       0: aload_0
       1: getfield      #4                  // Field negatedPattern:Lorg/aspectj/weaver/patterns/TypePattern;
       4: areturn

  protected boolean couldEverMatchSameTypesAs(org.aspectj.weaver.patterns.TypePattern);
    Code:
       0: iconst_1
       1: ireturn

  public org.aspectj.util.FuzzyBoolean matchesInstanceof(org.aspectj.weaver.ResolvedType);
    Code:
       0: aload_0
       1: getfield      #4                  // Field negatedPattern:Lorg/aspectj/weaver/patterns/TypePattern;
       4: aload_1
       5: invokevirtual #9                  // Method org/aspectj/weaver/patterns/TypePattern.matchesInstanceof:(Lorg/aspectj/weaver/ResolvedType;)Lorg/aspectj/util/FuzzyBoolean;
       8: invokevirtual #10                 // Method org/aspectj/util/FuzzyBoolean.not:()Lorg/aspectj/util/FuzzyBoolean;
      11: areturn

  protected boolean matchesExactly(org.aspectj.weaver.ResolvedType);
    Code:
       0: aload_0
       1: getfield      #4                  // Field negatedPattern:Lorg/aspectj/weaver/patterns/TypePattern;
       4: aload_1
       5: invokevirtual #11                 // Method org/aspectj/weaver/patterns/TypePattern.matchesExactly:(Lorg/aspectj/weaver/ResolvedType;)Z
       8: ifne          29
      11: aload_0
      12: getfield      #12                 // Field annotationPattern:Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
      15: aload_1
      16: invokevirtual #13                 // Method org/aspectj/weaver/patterns/AnnotationTypePattern.matches:(Lorg/aspectj/weaver/AnnotatedElement;)Lorg/aspectj/util/FuzzyBoolean;
      19: invokevirtual #14                 // Method org/aspectj/util/FuzzyBoolean.alwaysTrue:()Z
      22: ifeq          29
      25: iconst_1
      26: goto          30
      29: iconst_0
      30: ireturn

  protected boolean matchesExactly(org.aspectj.weaver.ResolvedType, org.aspectj.weaver.ResolvedType);
    Code:
       0: aload_0
       1: getfield      #4                  // Field negatedPattern:Lorg/aspectj/weaver/patterns/TypePattern;
       4: aload_1
       5: aload_2
       6: invokevirtual #15                 // Method org/aspectj/weaver/patterns/TypePattern.matchesExactly:(Lorg/aspectj/weaver/ResolvedType;Lorg/aspectj/weaver/ResolvedType;)Z
       9: ifne          30
      12: aload_0
      13: getfield      #12                 // Field annotationPattern:Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
      16: aload_2
      17: invokevirtual #13                 // Method org/aspectj/weaver/patterns/AnnotationTypePattern.matches:(Lorg/aspectj/weaver/AnnotatedElement;)Lorg/aspectj/util/FuzzyBoolean;
      20: invokevirtual #14                 // Method org/aspectj/util/FuzzyBoolean.alwaysTrue:()Z
      23: ifeq          30
      26: iconst_1
      27: goto          31
      30: iconst_0
      31: ireturn

  public boolean matchesStatically(org.aspectj.weaver.ResolvedType);
    Code:
       0: aload_0
       1: getfield      #4                  // Field negatedPattern:Lorg/aspectj/weaver/patterns/TypePattern;
       4: aload_1
       5: invokevirtual #16                 // Method org/aspectj/weaver/patterns/TypePattern.matchesStatically:(Lorg/aspectj/weaver/ResolvedType;)Z
       8: ifne          15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  public void setAnnotationTypePattern(org.aspectj.weaver.patterns.AnnotationTypePattern);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #17                 // Method org/aspectj/weaver/patterns/TypePattern.setAnnotationTypePattern:(Lorg/aspectj/weaver/patterns/AnnotationTypePattern;)V
       5: return

  public void setIsVarArgs(boolean);
    Code:
       0: aload_0
       1: getfield      #4                  // Field negatedPattern:Lorg/aspectj/weaver/patterns/TypePattern;
       4: iload_1
       5: invokevirtual #18                 // Method org/aspectj/weaver/patterns/TypePattern.setIsVarArgs:(Z)V
       8: return

  public void write(org.aspectj.weaver.CompressingDataOutputStream) throws java.io.IOException;
    Code:
       0: aload_1
       1: bipush        6
       3: invokevirtual #20                 // Method org/aspectj/weaver/CompressingDataOutputStream.writeByte:(I)V
       6: aload_0
       7: getfield      #4                  // Field negatedPattern:Lorg/aspectj/weaver/patterns/TypePattern;
      10: aload_1
      11: invokevirtual #21                 // Method org/aspectj/weaver/patterns/TypePattern.write:(Lorg/aspectj/weaver/CompressingDataOutputStream;)V
      14: aload_0
      15: getfield      #12                 // Field annotationPattern:Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
      18: aload_1
      19: invokevirtual #22                 // Method org/aspectj/weaver/patterns/AnnotationTypePattern.write:(Lorg/aspectj/weaver/CompressingDataOutputStream;)V
      22: aload_0
      23: aload_1
      24: invokevirtual #23                 // Method writeLocation:(Ljava/io/DataOutputStream;)V
      27: return

  public static org.aspectj.weaver.patterns.TypePattern read(org.aspectj.weaver.VersionedDataInputStream, org.aspectj.weaver.ISourceContext) throws java.io.IOException;
    Code:
       0: new           #24                 // class org/aspectj/weaver/patterns/NotTypePattern
       3: dup
       4: aload_0
       5: aload_1
       6: invokestatic  #25                 // Method org/aspectj/weaver/patterns/TypePattern.read:(Lorg/aspectj/weaver/VersionedDataInputStream;Lorg/aspectj/weaver/ISourceContext;)Lorg/aspectj/weaver/patterns/TypePattern;
       9: invokespecial #26                 // Method "<init>":(Lorg/aspectj/weaver/patterns/TypePattern;)V
      12: astore_2
      13: aload_0
      14: invokevirtual #27                 // Method org/aspectj/weaver/VersionedDataInputStream.getMajorVersion:()I
      17: iconst_2
      18: if_icmplt     30
      21: aload_2
      22: aload_0
      23: aload_1
      24: invokestatic  #29                 // Method org/aspectj/weaver/patterns/AnnotationTypePattern.read:(Lorg/aspectj/weaver/VersionedDataInputStream;Lorg/aspectj/weaver/ISourceContext;)Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
      27: putfield      #30                 // Field org/aspectj/weaver/patterns/TypePattern.annotationPattern:Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
      30: aload_2
      31: aload_1
      32: aload_0
      33: invokevirtual #31                 // Method org/aspectj/weaver/patterns/TypePattern.readLocation:(Lorg/aspectj/weaver/ISourceContext;Ljava/io/DataInputStream;)V
      36: aload_2
      37: areturn

  public org.aspectj.weaver.patterns.TypePattern resolveBindings(org.aspectj.weaver.patterns.IScope, org.aspectj.weaver.patterns.Bindings, boolean, boolean);
    Code:
       0: iload         4
       2: ifeq          11
       5: aload_0
       6: aload_1
       7: invokevirtual #32                 // Method notExactType:(Lorg/aspectj/weaver/patterns/IScope;)Lorg/aspectj/weaver/patterns/TypePattern;
      10: areturn
      11: aload_0
      12: aload_0
      13: getfield      #4                  // Field negatedPattern:Lorg/aspectj/weaver/patterns/TypePattern;
      16: aload_1
      17: aload_2
      18: iconst_0
      19: iconst_0
      20: invokevirtual #33                 // Method org/aspectj/weaver/patterns/TypePattern.resolveBindings:(Lorg/aspectj/weaver/patterns/IScope;Lorg/aspectj/weaver/patterns/Bindings;ZZ)Lorg/aspectj/weaver/patterns/TypePattern;
      23: putfield      #4                  // Field negatedPattern:Lorg/aspectj/weaver/patterns/TypePattern;
      26: aload_0
      27: areturn

  public boolean isBangVoid();
    Code:
       0: aload_0
       1: getfield      #3                  // Field checked:Z
       4: ifne          26
       7: aload_0
       8: aload_0
       9: getfield      #4                  // Field negatedPattern:Lorg/aspectj/weaver/patterns/TypePattern;
      12: invokevirtual #34                 // Method org/aspectj/weaver/patterns/TypePattern.getExactType:()Lorg/aspectj/weaver/UnresolvedType;
      15: invokevirtual #35                 // Method org/aspectj/weaver/UnresolvedType.isVoid:()Z
      18: putfield      #2                  // Field isBangVoid:Z
      21: aload_0
      22: iconst_1
      23: putfield      #3                  // Field checked:Z
      26: aload_0
      27: getfield      #2                  // Field isBangVoid:Z
      30: ireturn

  public org.aspectj.weaver.patterns.TypePattern parameterizeWith(java.util.Map<java.lang.String, org.aspectj.weaver.UnresolvedType>, org.aspectj.weaver.World);
    Code:
       0: aload_0
       1: getfield      #4                  // Field negatedPattern:Lorg/aspectj/weaver/patterns/TypePattern;
       4: aload_1
       5: aload_2
       6: invokevirtual #36                 // Method org/aspectj/weaver/patterns/TypePattern.parameterizeWith:(Ljava/util/Map;Lorg/aspectj/weaver/World;)Lorg/aspectj/weaver/patterns/TypePattern;
       9: astore_3
      10: new           #24                 // class org/aspectj/weaver/patterns/NotTypePattern
      13: dup
      14: aload_3
      15: invokespecial #26                 // Method "<init>":(Lorg/aspectj/weaver/patterns/TypePattern;)V
      18: astore        4
      20: aload         4
      22: aload_0
      23: invokevirtual #37                 // Method copyLocationFrom:(Lorg/aspectj/weaver/patterns/PatternNode;)V
      26: aload         4
      28: areturn

  public java.lang.String toString();
    Code:
       0: new           #38                 // class java/lang/StringBuffer
       3: dup
       4: invokespecial #39                 // Method java/lang/StringBuffer."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #12                 // Field annotationPattern:Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
      12: getstatic     #40                 // Field org/aspectj/weaver/patterns/AnnotationTypePattern.ANY:Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
      15: if_acmpeq     44
      18: aload_1
      19: bipush        40
      21: invokevirtual #41                 // Method java/lang/StringBuffer.append:(C)Ljava/lang/StringBuffer;
      24: pop
      25: aload_1
      26: aload_0
      27: getfield      #12                 // Field annotationPattern:Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
      30: invokevirtual #42                 // Method java/lang/Object.toString:()Ljava/lang/String;
      33: invokevirtual #43                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      36: pop
      37: aload_1
      38: bipush        32
      40: invokevirtual #41                 // Method java/lang/StringBuffer.append:(C)Ljava/lang/StringBuffer;
      43: pop
      44: aload_1
      45: bipush        33
      47: invokevirtual #41                 // Method java/lang/StringBuffer.append:(C)Ljava/lang/StringBuffer;
      50: pop
      51: aload_1
      52: aload_0
      53: getfield      #4                  // Field negatedPattern:Lorg/aspectj/weaver/patterns/TypePattern;
      56: invokevirtual #44                 // Method java/lang/StringBuffer.append:(Ljava/lang/Object;)Ljava/lang/StringBuffer;
      59: pop
      60: aload_0
      61: getfield      #12                 // Field annotationPattern:Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
      64: getstatic     #40                 // Field org/aspectj/weaver/patterns/AnnotationTypePattern.ANY:Lorg/aspectj/weaver/patterns/AnnotationTypePattern;
      67: if_acmpeq     77
      70: aload_1
      71: bipush        41
      73: invokevirtual #41                 // Method java/lang/StringBuffer.append:(C)Ljava/lang/StringBuffer;
      76: pop
      77: aload_1
      78: invokevirtual #45                 // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
      81: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #24                 // class org/aspectj/weaver/patterns/NotTypePattern
       4: ifne          9
       7: iconst_0
       8: ireturn
       9: aload_0
      10: getfield      #4                  // Field negatedPattern:Lorg/aspectj/weaver/patterns/TypePattern;
      13: aload_1
      14: checkcast     #24                 // class org/aspectj/weaver/patterns/NotTypePattern
      17: getfield      #4                  // Field negatedPattern:Lorg/aspectj/weaver/patterns/TypePattern;
      20: invokevirtual #46                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      23: ireturn

  public int hashCode();
    Code:
       0: bipush        17
       2: bipush        37
       4: aload_0
       5: getfield      #4                  // Field negatedPattern:Lorg/aspectj/weaver/patterns/TypePattern;
       8: invokevirtual #47                 // Method java/lang/Object.hashCode:()I
      11: imul
      12: iadd
      13: ireturn

  public java.lang.Object accept(org.aspectj.weaver.patterns.PatternNodeVisitor, java.lang.Object);
    Code:
       0: aload_1
       1: aload_0
       2: aload_2
       3: invokeinterface #48,  3           // InterfaceMethod org/aspectj/weaver/patterns/PatternNodeVisitor.visit:(Lorg/aspectj/weaver/patterns/NotTypePattern;Ljava/lang/Object;)Ljava/lang/Object;
       8: areturn

  public java.lang.Object traverse(org.aspectj.weaver.patterns.PatternNodeVisitor, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #49                 // Method accept:(Lorg/aspectj/weaver/patterns/PatternNodeVisitor;Ljava/lang/Object;)Ljava/lang/Object;
       6: astore_3
       7: aload_0
       8: getfield      #4                  // Field negatedPattern:Lorg/aspectj/weaver/patterns/TypePattern;
      11: aload_1
      12: aload_3
      13: invokevirtual #50                 // Method org/aspectj/weaver/patterns/TypePattern.traverse:(Lorg/aspectj/weaver/patterns/PatternNodeVisitor;Ljava/lang/Object;)Ljava/lang/Object;
      16: pop
      17: aload_3
      18: areturn
}
