Compiled from "TypeCategoryTypePattern.java"
public class org.aspectj.weaver.patterns.TypeCategoryTypePattern extends org.aspectj.weaver.patterns.TypePattern {
  public static final int CLASS;

  public static final int INTERFACE;

  public static final int ASPECT;

  public static final int INNER;

  public static final int ANONYMOUS;

  public static final int ENUM;

  public static final int ANNOTATION;

  public static final int FINAL;

  public static final int ABSTRACT;

  private int category;

  private int VERSION;

  public org.aspectj.weaver.patterns.TypeCategoryTypePattern(int);
    Code:
       0: aload_0
       1: iconst_0
       2: invokespecial #1                  // Method org/aspectj/weaver/patterns/TypePattern."<init>":(Z)V
       5: aload_0
       6: iconst_1
       7: putfield      #2                  // Field VERSION:I
      10: aload_0
      11: iload_1
      12: putfield      #3                  // Field category:I
      15: return

  public int getTypeCategory();
    Code:
       0: aload_0
       1: getfield      #3                  // Field category:I
       4: ireturn

  protected boolean matchesExactly(org.aspectj.weaver.ResolvedType);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #4                  // Method isRightCategory:(Lorg/aspectj/weaver/ResolvedType;)Z
       5: ireturn

  protected boolean matchesExactly(org.aspectj.weaver.ResolvedType, org.aspectj.weaver.ResolvedType);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #4                  // Method isRightCategory:(Lorg/aspectj/weaver/ResolvedType;)Z
       5: ireturn

  public org.aspectj.util.FuzzyBoolean matchesInstanceof(org.aspectj.weaver.ResolvedType);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #4                  // Method isRightCategory:(Lorg/aspectj/weaver/ResolvedType;)Z
       5: invokestatic  #5                  // Method org/aspectj/util/FuzzyBoolean.fromBoolean:(Z)Lorg/aspectj/util/FuzzyBoolean;
       8: areturn

  public org.aspectj.weaver.patterns.TypePattern parameterizeWith(java.util.Map<java.lang.String, org.aspectj.weaver.UnresolvedType>, org.aspectj.weaver.World);
    Code:
       0: aload_0
       1: areturn

  public java.lang.Object accept(org.aspectj.weaver.patterns.PatternNodeVisitor, java.lang.Object);
    Code:
       0: aload_1
       1: aload_0
       2: aload_2
       3: invokeinterface #6,  3            // InterfaceMethod org/aspectj/weaver/patterns/PatternNodeVisitor.visit:(Lorg/aspectj/weaver/patterns/TypeCategoryTypePattern;Ljava/lang/Object;)Ljava/lang/Object;
       8: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #7                  // class org/aspectj/weaver/patterns/TypeCategoryTypePattern
       4: ifne          9
       7: iconst_0
       8: ireturn
       9: aload_1
      10: checkcast     #7                  // class org/aspectj/weaver/patterns/TypeCategoryTypePattern
      13: astore_2
      14: aload_2
      15: getfield      #3                  // Field category:I
      18: aload_0
      19: getfield      #3                  // Field category:I
      22: if_icmpne     29
      25: iconst_1
      26: goto          30
      29: iconst_0
      30: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #3                  // Field category:I
       4: bipush        37
       6: imul
       7: ireturn

  public void write(org.aspectj.weaver.CompressingDataOutputStream) throws java.io.IOException;
    Code:
       0: aload_1
       1: bipush        12
       3: invokevirtual #9                  // Method org/aspectj/weaver/CompressingDataOutputStream.writeByte:(I)V
       6: aload_1
       7: aload_0
       8: getfield      #2                  // Field VERSION:I
      11: invokevirtual #10                 // Method org/aspectj/weaver/CompressingDataOutputStream.writeInt:(I)V
      14: aload_1
      15: aload_0
      16: getfield      #3                  // Field category:I
      19: invokevirtual #10                 // Method org/aspectj/weaver/CompressingDataOutputStream.writeInt:(I)V
      22: aload_0
      23: aload_1
      24: invokevirtual #11                 // Method writeLocation:(Ljava/io/DataOutputStream;)V
      27: return

  public static org.aspectj.weaver.patterns.TypePattern read(org.aspectj.weaver.VersionedDataInputStream, org.aspectj.weaver.ISourceContext) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #12                 // Method org/aspectj/weaver/VersionedDataInputStream.readInt:()I
       4: istore_2
       5: aload_0
       6: invokevirtual #12                 // Method org/aspectj/weaver/VersionedDataInputStream.readInt:()I
       9: istore_3
      10: new           #7                  // class org/aspectj/weaver/patterns/TypeCategoryTypePattern
      13: dup
      14: iload_3
      15: invokespecial #13                 // Method "<init>":(I)V
      18: astore        4
      20: aload         4
      22: aload_1
      23: aload_0
      24: invokevirtual #14                 // Method readLocation:(Lorg/aspectj/weaver/ISourceContext;Ljava/io/DataInputStream;)V
      27: aload         4
      29: areturn

  private boolean isRightCategory(org.aspectj.weaver.ResolvedType);
    Code:
       0: aload_0
       1: getfield      #3                  // Field category:I
       4: tableswitch   { // 1 to 9
                     1: 56
                     2: 61
                     3: 66
                     4: 76
                     5: 71
                     6: 81
                     7: 86
                     8: 91
                     9: 99
               default: 107
          }
      56: aload_1
      57: invokevirtual #15                 // Method org/aspectj/weaver/ResolvedType.isClass:()Z
      60: ireturn
      61: aload_1
      62: invokevirtual #16                 // Method org/aspectj/weaver/ResolvedType.isInterface:()Z
      65: ireturn
      66: aload_1
      67: invokevirtual #17                 // Method org/aspectj/weaver/ResolvedType.isAspect:()Z
      70: ireturn
      71: aload_1
      72: invokevirtual #18                 // Method org/aspectj/weaver/ResolvedType.isAnonymous:()Z
      75: ireturn
      76: aload_1
      77: invokevirtual #19                 // Method org/aspectj/weaver/ResolvedType.isNested:()Z
      80: ireturn
      81: aload_1
      82: invokevirtual #20                 // Method org/aspectj/weaver/ResolvedType.isEnum:()Z
      85: ireturn
      86: aload_1
      87: invokevirtual #21                 // Method org/aspectj/weaver/ResolvedType.isAnnotation:()Z
      90: ireturn
      91: aload_1
      92: invokevirtual #22                 // Method org/aspectj/weaver/ResolvedType.getModifiers:()I
      95: invokestatic  #23                 // Method java/lang/reflect/Modifier.isFinal:(I)Z
      98: ireturn
      99: aload_1
     100: invokevirtual #22                 // Method org/aspectj/weaver/ResolvedType.getModifiers:()I
     103: invokestatic  #24                 // Method java/lang/reflect/Modifier.isAbstract:(I)Z
     106: ireturn
     107: iconst_0
     108: ireturn
}
