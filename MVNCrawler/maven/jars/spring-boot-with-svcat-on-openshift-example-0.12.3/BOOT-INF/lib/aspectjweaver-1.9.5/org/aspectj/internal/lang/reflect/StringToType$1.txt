Compiled from "StringToType.java"
final class org.aspectj.internal.lang.reflect.StringToType$1 implements java.lang.reflect.ParameterizedType {
  final java.lang.reflect.Type[] val$typeParams;

  final java.lang.Class val$baseClass;

  org.aspectj.internal.lang.reflect.StringToType$1(java.lang.reflect.Type[], java.lang.Class);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field val$typeParams:[Ljava/lang/reflect/Type;
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field val$baseClass:Ljava/lang/Class;
      10: aload_0
      11: invokespecial #3                  // Method java/lang/Object."<init>":()V
      14: return

  public java.lang.reflect.Type[] getActualTypeArguments();
    Code:
       0: aload_0
       1: getfield      #1                  // Field val$typeParams:[Ljava/lang/reflect/Type;
       4: areturn

  public java.lang.reflect.Type getRawType();
    Code:
       0: aload_0
       1: getfield      #2                  // Field val$baseClass:Ljava/lang/Class;
       4: areturn

  public java.lang.reflect.Type getOwnerType();
    Code:
       0: aload_0
       1: getfield      #2                  // Field val$baseClass:Ljava/lang/Class;
       4: invokevirtual #4                  // Method java/lang/Class.getEnclosingClass:()Ljava/lang/Class;
       7: areturn
}
