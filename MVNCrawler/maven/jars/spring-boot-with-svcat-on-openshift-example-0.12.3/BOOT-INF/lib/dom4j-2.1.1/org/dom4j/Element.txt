Compiled from "Element.java"
public interface org.dom4j.Element extends org.dom4j.Branch {
  public abstract org.dom4j.QName getQName();

  public abstract void setQName(org.dom4j.QName);

  public abstract org.dom4j.Namespace getNamespace();

  public abstract org.dom4j.QName getQName(java.lang.String);

  public abstract org.dom4j.Namespace getNamespaceForPrefix(java.lang.String);

  public abstract org.dom4j.Namespace getNamespaceForURI(java.lang.String);

  public abstract java.util.List<org.dom4j.Namespace> getNamespacesForURI(java.lang.String);

  public abstract java.lang.String getNamespacePrefix();

  public abstract java.lang.String getNamespaceURI();

  public abstract java.lang.String getQualifiedName();

  public abstract java.util.List<org.dom4j.Namespace> additionalNamespaces();

  public abstract java.util.List<org.dom4j.Namespace> declaredNamespaces();

  public abstract org.dom4j.Element addAttribute(java.lang.String, java.lang.String);

  public abstract org.dom4j.Element addAttribute(org.dom4j.QName, java.lang.String);

  public abstract org.dom4j.Element addComment(java.lang.String);

  public abstract org.dom4j.Element addCDATA(java.lang.String);

  public abstract org.dom4j.Element addEntity(java.lang.String, java.lang.String);

  public abstract org.dom4j.Element addNamespace(java.lang.String, java.lang.String);

  public abstract org.dom4j.Element addProcessingInstruction(java.lang.String, java.lang.String);

  public abstract org.dom4j.Element addProcessingInstruction(java.lang.String, java.util.Map<java.lang.String, java.lang.String>);

  public abstract org.dom4j.Element addText(java.lang.String);

  public abstract void add(org.dom4j.Attribute);

  public abstract void add(org.dom4j.CDATA);

  public abstract void add(org.dom4j.Entity);

  public abstract void add(org.dom4j.Text);

  public abstract void add(org.dom4j.Namespace);

  public abstract boolean remove(org.dom4j.Attribute);

  public abstract boolean remove(org.dom4j.CDATA);

  public abstract boolean remove(org.dom4j.Entity);

  public abstract boolean remove(org.dom4j.Namespace);

  public abstract boolean remove(org.dom4j.Text);

  public abstract java.lang.String getText();

  public abstract java.lang.String getTextTrim();

  public abstract java.lang.String getStringValue();

  public abstract java.lang.Object getData();

  public abstract void setData(java.lang.Object);

  public abstract java.util.List<org.dom4j.Attribute> attributes();

  public abstract void setAttributes(java.util.List<org.dom4j.Attribute>);

  public abstract int attributeCount();

  public abstract java.util.Iterator<org.dom4j.Attribute> attributeIterator();

  public abstract org.dom4j.Attribute attribute(int);

  public abstract org.dom4j.Attribute attribute(java.lang.String);

  public abstract org.dom4j.Attribute attribute(org.dom4j.QName);

  public abstract java.lang.String attributeValue(java.lang.String);

  public abstract java.lang.String attributeValue(java.lang.String, java.lang.String);

  public abstract java.lang.String attributeValue(org.dom4j.QName);

  public abstract java.lang.String attributeValue(org.dom4j.QName, java.lang.String);

  public abstract void setAttributeValue(java.lang.String, java.lang.String);

  public abstract void setAttributeValue(org.dom4j.QName, java.lang.String);

  public abstract org.dom4j.Element element(java.lang.String);

  public abstract org.dom4j.Element element(org.dom4j.QName);

  public abstract java.util.List<org.dom4j.Element> elements();

  public abstract java.util.List<org.dom4j.Element> elements(java.lang.String);

  public abstract java.util.List<org.dom4j.Element> elements(org.dom4j.QName);

  public abstract java.util.Iterator<org.dom4j.Element> elementIterator();

  public abstract java.util.Iterator<org.dom4j.Element> elementIterator(java.lang.String);

  public abstract java.util.Iterator<org.dom4j.Element> elementIterator(org.dom4j.QName);

  public abstract boolean isRootElement();

  public abstract boolean hasMixedContent();

  public abstract boolean isTextOnly();

  public abstract void appendAttributes(org.dom4j.Element);

  public abstract org.dom4j.Element createCopy();

  public abstract org.dom4j.Element createCopy(java.lang.String);

  public abstract org.dom4j.Element createCopy(org.dom4j.QName);

  public abstract java.lang.String elementText(java.lang.String);

  public abstract java.lang.String elementText(org.dom4j.QName);

  public abstract java.lang.String elementTextTrim(java.lang.String);

  public abstract java.lang.String elementTextTrim(org.dom4j.QName);

  public abstract org.dom4j.Node getXPathResult(int);
}
