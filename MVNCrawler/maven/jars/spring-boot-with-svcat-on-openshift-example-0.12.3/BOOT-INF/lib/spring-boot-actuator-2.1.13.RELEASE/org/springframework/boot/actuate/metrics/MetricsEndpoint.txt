Compiled from "MetricsEndpoint.java"
public class org.springframework.boot.actuate.metrics.MetricsEndpoint {
  private final io.micrometer.core.instrument.MeterRegistry registry;

  public org.springframework.boot.actuate.metrics.MetricsEndpoint(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field registry:Lio/micrometer/core/instrument/MeterRegistry;
       9: return

  public org.springframework.boot.actuate.metrics.MetricsEndpoint$ListNamesResponse listNames();
    Code:
       0: new           #3                  // class java/util/LinkedHashSet
       3: dup
       4: invokespecial #4                  // Method java/util/LinkedHashSet."<init>":()V
       7: astore_1
       8: aload_0
       9: aload_1
      10: aload_0
      11: getfield      #2                  // Field registry:Lio/micrometer/core/instrument/MeterRegistry;
      14: invokespecial #5                  // Method collectNames:(Ljava/util/Set;Lio/micrometer/core/instrument/MeterRegistry;)V
      17: new           #6                  // class org/springframework/boot/actuate/metrics/MetricsEndpoint$ListNamesResponse
      20: dup
      21: aload_1
      22: invokespecial #7                  // Method org/springframework/boot/actuate/metrics/MetricsEndpoint$ListNamesResponse."<init>":(Ljava/util/Set;)V
      25: areturn

  private void collectNames(java.util.Set<java.lang.String>, io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_2
       1: instanceof    #8                  // class io/micrometer/core/instrument/composite/CompositeMeterRegistry
       4: ifeq          29
       7: aload_2
       8: checkcast     #8                  // class io/micrometer/core/instrument/composite/CompositeMeterRegistry
      11: invokevirtual #9                  // Method io/micrometer/core/instrument/composite/CompositeMeterRegistry.getRegistries:()Ljava/util/Set;
      14: aload_0
      15: aload_1
      16: invokedynamic #10,  0             // InvokeDynamic #0:accept:(Lorg/springframework/boot/actuate/metrics/MetricsEndpoint;Ljava/util/Set;)Ljava/util/function/Consumer;
      21: invokeinterface #11,  2           // InterfaceMethod java/util/Set.forEach:(Ljava/util/function/Consumer;)V
      26: goto          65
      29: aload_2
      30: invokevirtual #12                 // Method io/micrometer/core/instrument/MeterRegistry.getMeters:()Ljava/util/List;
      33: invokeinterface #13,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
      38: aload_0
      39: invokedynamic #14,  0             // InvokeDynamic #1:apply:(Lorg/springframework/boot/actuate/metrics/MetricsEndpoint;)Ljava/util/function/Function;
      44: invokeinterface #15,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      49: aload_1
      50: dup
      51: invokevirtual #16                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      54: pop
      55: invokedynamic #17,  0             // InvokeDynamic #2:accept:(Ljava/util/Set;)Ljava/util/function/Consumer;
      60: invokeinterface #18,  2           // InterfaceMethod java/util/stream/Stream.forEach:(Ljava/util/function/Consumer;)V
      65: return

  private java.lang.String getName(io.micrometer.core.instrument.Meter);
    Code:
       0: aload_1
       1: invokeinterface #19,  1           // InterfaceMethod io/micrometer/core/instrument/Meter.getId:()Lio/micrometer/core/instrument/Meter$Id;
       6: invokevirtual #20                 // Method io/micrometer/core/instrument/Meter$Id.getName:()Ljava/lang/String;
       9: areturn

  public org.springframework.boot.actuate.metrics.MetricsEndpoint$MetricResponse metric(java.lang.String, java.util.List<java.lang.String>);
    Code:
       0: aload_0
       1: aload_2
       2: invokespecial #21                 // Method parseTags:(Ljava/util/List;)Ljava/util/List;
       5: astore_3
       6: aload_0
       7: aload_0
       8: getfield      #2                  // Field registry:Lio/micrometer/core/instrument/MeterRegistry;
      11: aload_1
      12: aload_3
      13: invokespecial #22                 // Method findFirstMatchingMeters:(Lio/micrometer/core/instrument/MeterRegistry;Ljava/lang/String;Ljava/lang/Iterable;)Ljava/util/Collection;
      16: astore        4
      18: aload         4
      20: invokeinterface #23,  1           // InterfaceMethod java/util/Collection.isEmpty:()Z
      25: ifeq          30
      28: aconst_null
      29: areturn
      30: aload_0
      31: aload         4
      33: invokespecial #24                 // Method getSamples:(Ljava/util/Collection;)Ljava/util/Map;
      36: astore        5
      38: aload_0
      39: aload         4
      41: invokespecial #25                 // Method getAvailableTags:(Ljava/util/Collection;)Ljava/util/Map;
      44: astore        6
      46: aload_3
      47: aload         6
      49: invokedynamic #26,  0             // InvokeDynamic #3:accept:(Ljava/util/Map;)Ljava/util/function/Consumer;
      54: invokeinterface #27,  2           // InterfaceMethod java/util/List.forEach:(Ljava/util/function/Consumer;)V
      59: aload         4
      61: invokeinterface #28,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      66: invokeinterface #29,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      71: checkcast     #30                 // class io/micrometer/core/instrument/Meter
      74: invokeinterface #19,  1           // InterfaceMethod io/micrometer/core/instrument/Meter.getId:()Lio/micrometer/core/instrument/Meter$Id;
      79: astore        7
      81: new           #31                 // class org/springframework/boot/actuate/metrics/MetricsEndpoint$MetricResponse
      84: dup
      85: aload_1
      86: aload         7
      88: invokevirtual #32                 // Method io/micrometer/core/instrument/Meter$Id.getDescription:()Ljava/lang/String;
      91: aload         7
      93: invokevirtual #33                 // Method io/micrometer/core/instrument/Meter$Id.getBaseUnit:()Ljava/lang/String;
      96: aload_0
      97: aload         5
      99: invokedynamic #34,  0             // InvokeDynamic #4:apply:()Ljava/util/function/BiFunction;
     104: invokespecial #35                 // Method asList:(Ljava/util/Map;Ljava/util/function/BiFunction;)Ljava/util/List;
     107: aload_0
     108: aload         6
     110: invokedynamic #36,  0             // InvokeDynamic #5:apply:()Ljava/util/function/BiFunction;
     115: invokespecial #35                 // Method asList:(Ljava/util/Map;Ljava/util/function/BiFunction;)Ljava/util/List;
     118: invokespecial #37                 // Method org/springframework/boot/actuate/metrics/MetricsEndpoint$MetricResponse."<init>":(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/util/List;)V
     121: areturn

  private java.util.List<io.micrometer.core.instrument.Tag> parseTags(java.util.List<java.lang.String>);
    Code:
       0: aload_1
       1: ifnonnull     8
       4: invokestatic  #38                 // Method java/util/Collections.emptyList:()Ljava/util/List;
       7: areturn
       8: aload_1
       9: invokeinterface #13,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
      14: aload_0
      15: invokedynamic #39,  0             // InvokeDynamic #6:apply:(Lorg/springframework/boot/actuate/metrics/MetricsEndpoint;)Ljava/util/function/Function;
      20: invokeinterface #15,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      25: invokestatic  #40                 // Method java/util/stream/Collectors.toList:()Ljava/util/stream/Collector;
      28: invokeinterface #41,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      33: checkcast     #42                 // class java/util/List
      36: areturn

  private io.micrometer.core.instrument.Tag parseTag(java.lang.String);
    Code:
       0: aload_1
       1: ldc           #43                 // String :
       3: iconst_2
       4: invokevirtual #44                 // Method java/lang/String.split:(Ljava/lang/String;I)[Ljava/lang/String;
       7: astore_2
       8: aload_2
       9: arraylength
      10: iconst_2
      11: if_icmpeq     43
      14: new           #45                 // class org/springframework/boot/actuate/endpoint/InvalidEndpointRequestException
      17: dup
      18: new           #46                 // class java/lang/StringBuilder
      21: dup
      22: invokespecial #47                 // Method java/lang/StringBuilder."<init>":()V
      25: ldc           #48                 // String Each tag parameter must be in the form \'key:value\' but was:
      27: invokevirtual #49                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: aload_1
      31: invokevirtual #49                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      34: invokevirtual #50                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      37: ldc           #51                 // String Each tag parameter must be in the form \'key:value\'
      39: invokespecial #52                 // Method org/springframework/boot/actuate/endpoint/InvalidEndpointRequestException."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      42: athrow
      43: aload_2
      44: iconst_0
      45: aaload
      46: aload_2
      47: iconst_1
      48: aaload
      49: invokestatic  #53                 // InterfaceMethod io/micrometer/core/instrument/Tag.of:(Ljava/lang/String;Ljava/lang/String;)Lio/micrometer/core/instrument/Tag;
      52: areturn

  private java.util.Collection<io.micrometer.core.instrument.Meter> findFirstMatchingMeters(io.micrometer.core.instrument.MeterRegistry, java.lang.String, java.lang.Iterable<io.micrometer.core.instrument.Tag>);
    Code:
       0: aload_1
       1: instanceof    #8                  // class io/micrometer/core/instrument/composite/CompositeMeterRegistry
       4: ifeq          18
       7: aload_0
       8: aload_1
       9: checkcast     #8                  // class io/micrometer/core/instrument/composite/CompositeMeterRegistry
      12: aload_2
      13: aload_3
      14: invokespecial #54                 // Method findFirstMatchingMeters:(Lio/micrometer/core/instrument/composite/CompositeMeterRegistry;Ljava/lang/String;Ljava/lang/Iterable;)Ljava/util/Collection;
      17: areturn
      18: aload_1
      19: aload_2
      20: invokevirtual #55                 // Method io/micrometer/core/instrument/MeterRegistry.find:(Ljava/lang/String;)Lio/micrometer/core/instrument/search/Search;
      23: aload_3
      24: invokevirtual #56                 // Method io/micrometer/core/instrument/search/Search.tags:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/search/Search;
      27: invokevirtual #57                 // Method io/micrometer/core/instrument/search/Search.meters:()Ljava/util/Collection;
      30: areturn

  private java.util.Collection<io.micrometer.core.instrument.Meter> findFirstMatchingMeters(io.micrometer.core.instrument.composite.CompositeMeterRegistry, java.lang.String, java.lang.Iterable<io.micrometer.core.instrument.Tag>);
    Code:
       0: aload_1
       1: invokevirtual #9                  // Method io/micrometer/core/instrument/composite/CompositeMeterRegistry.getRegistries:()Ljava/util/Set;
       4: invokeinterface #58,  1           // InterfaceMethod java/util/Set.stream:()Ljava/util/stream/Stream;
       9: aload_0
      10: aload_2
      11: aload_3
      12: invokedynamic #59,  0             // InvokeDynamic #7:apply:(Lorg/springframework/boot/actuate/metrics/MetricsEndpoint;Ljava/lang/String;Ljava/lang/Iterable;)Ljava/util/function/Function;
      17: invokeinterface #15,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      22: invokedynamic #60,  0             // InvokeDynamic #8:test:()Ljava/util/function/Predicate;
      27: invokeinterface #61,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      32: invokeinterface #62,  1           // InterfaceMethod java/util/stream/Stream.findFirst:()Ljava/util/Optional;
      37: invokestatic  #38                 // Method java/util/Collections.emptyList:()Ljava/util/List;
      40: invokevirtual #63                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      43: checkcast     #64                 // class java/util/Collection
      46: areturn

  private java.util.Map<io.micrometer.core.instrument.Statistic, java.lang.Double> getSamples(java.util.Collection<io.micrometer.core.instrument.Meter>);
    Code:
       0: new           #65                 // class java/util/LinkedHashMap
       3: dup
       4: invokespecial #66                 // Method java/util/LinkedHashMap."<init>":()V
       7: astore_2
       8: aload_1
       9: aload_0
      10: aload_2
      11: invokedynamic #67,  0             // InvokeDynamic #9:accept:(Lorg/springframework/boot/actuate/metrics/MetricsEndpoint;Ljava/util/Map;)Ljava/util/function/Consumer;
      16: invokeinterface #68,  2           // InterfaceMethod java/util/Collection.forEach:(Ljava/util/function/Consumer;)V
      21: aload_2
      22: areturn

  private void mergeMeasurements(java.util.Map<io.micrometer.core.instrument.Statistic, java.lang.Double>, io.micrometer.core.instrument.Meter);
    Code:
       0: aload_2
       1: invokeinterface #69,  1           // InterfaceMethod io/micrometer/core/instrument/Meter.measure:()Ljava/lang/Iterable;
       6: aload_0
       7: aload_1
       8: invokedynamic #70,  0             // InvokeDynamic #10:accept:(Lorg/springframework/boot/actuate/metrics/MetricsEndpoint;Ljava/util/Map;)Ljava/util/function/Consumer;
      13: invokeinterface #71,  2           // InterfaceMethod java/lang/Iterable.forEach:(Ljava/util/function/Consumer;)V
      18: return

  private java.util.function.BiFunction<java.lang.Double, java.lang.Double, java.lang.Double> mergeFunction(io.micrometer.core.instrument.Statistic);
    Code:
       0: getstatic     #72                 // Field io/micrometer/core/instrument/Statistic.MAX:Lio/micrometer/core/instrument/Statistic;
       3: aload_1
       4: invokevirtual #73                 // Method io/micrometer/core/instrument/Statistic.equals:(Ljava/lang/Object;)Z
       7: ifeq          18
      10: invokedynamic #74,  0             // InvokeDynamic #11:apply:()Ljava/util/function/BiFunction;
      15: goto          23
      18: invokedynamic #75,  0             // InvokeDynamic #12:apply:()Ljava/util/function/BiFunction;
      23: areturn

  private java.util.Map<java.lang.String, java.util.Set<java.lang.String>> getAvailableTags(java.util.Collection<io.micrometer.core.instrument.Meter>);
    Code:
       0: new           #76                 // class java/util/HashMap
       3: dup
       4: invokespecial #77                 // Method java/util/HashMap."<init>":()V
       7: astore_2
       8: aload_1
       9: aload_0
      10: aload_2
      11: invokedynamic #78,  0             // InvokeDynamic #13:accept:(Lorg/springframework/boot/actuate/metrics/MetricsEndpoint;Ljava/util/Map;)Ljava/util/function/Consumer;
      16: invokeinterface #68,  2           // InterfaceMethod java/util/Collection.forEach:(Ljava/util/function/Consumer;)V
      21: aload_2
      22: areturn

  private void mergeAvailableTags(java.util.Map<java.lang.String, java.util.Set<java.lang.String>>, io.micrometer.core.instrument.Meter);
    Code:
       0: aload_2
       1: invokeinterface #19,  1           // InterfaceMethod io/micrometer/core/instrument/Meter.getId:()Lio/micrometer/core/instrument/Meter$Id;
       6: invokevirtual #79                 // Method io/micrometer/core/instrument/Meter$Id.getTags:()Ljava/util/List;
       9: aload_0
      10: aload_1
      11: invokedynamic #80,  0             // InvokeDynamic #14:accept:(Lorg/springframework/boot/actuate/metrics/MetricsEndpoint;Ljava/util/Map;)Ljava/util/function/Consumer;
      16: invokeinterface #27,  2           // InterfaceMethod java/util/List.forEach:(Ljava/util/function/Consumer;)V
      21: return

  private <T> java.util.Set<T> merge(java.util.Set<T>, java.util.Set<T>);
    Code:
       0: new           #81                 // class java/util/HashSet
       3: dup
       4: aload_1
       5: invokeinterface #82,  1           // InterfaceMethod java/util/Set.size:()I
      10: aload_2
      11: invokeinterface #82,  1           // InterfaceMethod java/util/Set.size:()I
      16: iadd
      17: invokespecial #83                 // Method java/util/HashSet."<init>":(I)V
      20: astore_3
      21: aload_3
      22: aload_1
      23: invokeinterface #84,  2           // InterfaceMethod java/util/Set.addAll:(Ljava/util/Collection;)Z
      28: pop
      29: aload_3
      30: aload_2
      31: invokeinterface #84,  2           // InterfaceMethod java/util/Set.addAll:(Ljava/util/Collection;)Z
      36: pop
      37: aload_3
      38: areturn

  private <K, V, T> java.util.List<T> asList(java.util.Map<K, V>, java.util.function.BiFunction<K, V, T>);
    Code:
       0: aload_1
       1: invokeinterface #85,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
       6: invokeinterface #58,  1           // InterfaceMethod java/util/Set.stream:()Ljava/util/stream/Stream;
      11: aload_2
      12: invokedynamic #86,  0             // InvokeDynamic #15:apply:(Ljava/util/function/BiFunction;)Ljava/util/function/Function;
      17: invokeinterface #15,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      22: invokestatic  #40                 // Method java/util/stream/Collectors.toList:()Ljava/util/stream/Collector;
      25: invokeinterface #41,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      30: checkcast     #42                 // class java/util/List
      33: areturn

  private static java.lang.Object lambda$asList$8(java.util.function.BiFunction, java.util.Map$Entry);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #87,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
       7: aload_1
       8: invokeinterface #88,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      13: invokeinterface #89,  3           // InterfaceMethod java/util/function/BiFunction.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      18: areturn

  private void lambda$mergeAvailableTags$7(java.util.Map, io.micrometer.core.instrument.Tag);
    Code:
       0: aload_2
       1: invokeinterface #90,  1           // InterfaceMethod io/micrometer/core/instrument/Tag.getValue:()Ljava/lang/String;
       6: invokestatic  #91                 // Method java/util/Collections.singleton:(Ljava/lang/Object;)Ljava/util/Set;
       9: astore_3
      10: aload_1
      11: aload_2
      12: invokeinterface #92,  1           // InterfaceMethod io/micrometer/core/instrument/Tag.getKey:()Ljava/lang/String;
      17: aload_3
      18: aload_0
      19: invokedynamic #93,  0             // InvokeDynamic #16:apply:(Lorg/springframework/boot/actuate/metrics/MetricsEndpoint;)Ljava/util/function/BiFunction;
      24: invokeinterface #94,  4           // InterfaceMethod java/util/Map.merge:(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;
      29: pop
      30: return

  private void lambda$getAvailableTags$6(java.util.Map, io.micrometer.core.instrument.Meter);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #95                 // Method mergeAvailableTags:(Ljava/util/Map;Lio/micrometer/core/instrument/Meter;)V
       6: return

  private void lambda$mergeMeasurements$5(java.util.Map, io.micrometer.core.instrument.Measurement);
    Code:
       0: aload_1
       1: aload_2
       2: invokevirtual #96                 // Method io/micrometer/core/instrument/Measurement.getStatistic:()Lio/micrometer/core/instrument/Statistic;
       5: aload_2
       6: invokevirtual #97                 // Method io/micrometer/core/instrument/Measurement.getValue:()D
       9: invokestatic  #98                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      12: aload_0
      13: aload_2
      14: invokevirtual #96                 // Method io/micrometer/core/instrument/Measurement.getStatistic:()Lio/micrometer/core/instrument/Statistic;
      17: invokespecial #99                 // Method mergeFunction:(Lio/micrometer/core/instrument/Statistic;)Ljava/util/function/BiFunction;
      20: invokeinterface #94,  4           // InterfaceMethod java/util/Map.merge:(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;
      25: checkcast     #100                // class java/lang/Double
      28: pop
      29: return

  private void lambda$getSamples$4(java.util.Map, io.micrometer.core.instrument.Meter);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #101                // Method mergeMeasurements:(Ljava/util/Map;Lio/micrometer/core/instrument/Meter;)V
       6: return

  private static boolean lambda$findFirstMatchingMeters$3(java.util.Collection);
    Code:
       0: aload_0
       1: invokeinterface #23,  1           // InterfaceMethod java/util/Collection.isEmpty:()Z
       6: ifne          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  private java.util.Collection lambda$findFirstMatchingMeters$2(java.lang.String, java.lang.Iterable, io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_0
       1: aload_3
       2: aload_1
       3: aload_2
       4: invokespecial #22                 // Method findFirstMatchingMeters:(Lio/micrometer/core/instrument/MeterRegistry;Ljava/lang/String;Ljava/lang/Iterable;)Ljava/util/Collection;
       7: areturn

  private static void lambda$metric$1(java.util.Map, io.micrometer.core.instrument.Tag);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #92,  1           // InterfaceMethod io/micrometer/core/instrument/Tag.getKey:()Ljava/lang/String;
       7: invokeinterface #102,  2          // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      12: checkcast     #103                // class java/util/Set
      15: pop
      16: return

  private void lambda$collectNames$0(java.util.Set, io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #5                  // Method collectNames:(Ljava/util/Set;Lio/micrometer/core/instrument/MeterRegistry;)V
       6: return
}
