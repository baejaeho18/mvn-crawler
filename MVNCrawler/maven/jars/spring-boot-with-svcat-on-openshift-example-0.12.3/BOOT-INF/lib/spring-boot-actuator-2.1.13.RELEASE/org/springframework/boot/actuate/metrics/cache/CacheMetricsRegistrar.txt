Compiled from "CacheMetricsRegistrar.java"
public class org.springframework.boot.actuate.metrics.cache.CacheMetricsRegistrar {
  private final io.micrometer.core.instrument.MeterRegistry registry;

  private final java.util.Collection<org.springframework.boot.actuate.metrics.cache.CacheMeterBinderProvider<?>> binderProviders;

  public org.springframework.boot.actuate.metrics.cache.CacheMetricsRegistrar(io.micrometer.core.instrument.MeterRegistry, java.util.Collection<org.springframework.boot.actuate.metrics.cache.CacheMeterBinderProvider<?>>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field registry:Lio/micrometer/core/instrument/MeterRegistry;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field binderProviders:Ljava/util/Collection;
      14: return

  public boolean bindCacheToRegistry(org.springframework.cache.Cache, io.micrometer.core.instrument.Tag...);
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: invokespecial #4                  // Method unwrapIfNecessary:(Lorg/springframework/cache/Cache;)Lorg/springframework/cache/Cache;
       6: aload_2
       7: invokestatic  #5                  // Method io/micrometer/core/instrument/Tags.of:([Lio/micrometer/core/instrument/Tag;)Lio/micrometer/core/instrument/Tags;
      10: invokespecial #6                  // Method getMeterBinder:(Lorg/springframework/cache/Cache;Lio/micrometer/core/instrument/Tags;)Lio/micrometer/core/instrument/binder/MeterBinder;
      13: astore_3
      14: aload_3
      15: ifnull        30
      18: aload_3
      19: aload_0
      20: getfield      #2                  // Field registry:Lio/micrometer/core/instrument/MeterRegistry;
      23: invokeinterface #7,  2            // InterfaceMethod io/micrometer/core/instrument/binder/MeterBinder.bindTo:(Lio/micrometer/core/instrument/MeterRegistry;)V
      28: iconst_1
      29: ireturn
      30: iconst_0
      31: ireturn

  private io.micrometer.core.instrument.binder.MeterBinder getMeterBinder(org.springframework.cache.Cache, io.micrometer.core.instrument.Tags);
    Code:
       0: aload_2
       1: aload_0
       2: aload_1
       3: invokevirtual #8                  // Method getAdditionalTags:(Lorg/springframework/cache/Cache;)Ljava/lang/Iterable;
       6: invokevirtual #9                  // Method io/micrometer/core/instrument/Tags.and:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Tags;
       9: astore_3
      10: ldc           #10                 // class org/springframework/boot/actuate/metrics/cache/CacheMeterBinderProvider
      12: aload_0
      13: getfield      #3                  // Field binderProviders:Ljava/util/Collection;
      16: aload_1
      17: iconst_0
      18: anewarray     #11                 // class java/lang/Object
      21: invokestatic  #12                 // Method org/springframework/boot/util/LambdaSafe.callbacks:(Ljava/lang/Class;Ljava/util/Collection;Ljava/lang/Object;[Ljava/lang/Object;)Lorg/springframework/boot/util/LambdaSafe$Callbacks;
      24: ldc           #13                 // class org/springframework/boot/actuate/metrics/cache/CacheMetricsRegistrar
      26: invokevirtual #14                 // Method org/springframework/boot/util/LambdaSafe$Callbacks.withLogger:(Ljava/lang/Class;)Lorg/springframework/boot/util/LambdaSafe$LambdaSafeCallback;
      29: checkcast     #15                 // class org/springframework/boot/util/LambdaSafe$Callbacks
      32: aload_1
      33: aload_3
      34: invokedynamic #16,  0             // InvokeDynamic #0:apply:(Lorg/springframework/cache/Cache;Lio/micrometer/core/instrument/Tags;)Ljava/util/function/Function;
      39: invokevirtual #17                 // Method org/springframework/boot/util/LambdaSafe$Callbacks.invokeAnd:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      42: invokedynamic #18,  0             // InvokeDynamic #1:test:()Ljava/util/function/Predicate;
      47: invokeinterface #19,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      52: invokeinterface #20,  1           // InterfaceMethod java/util/stream/Stream.findFirst:()Ljava/util/Optional;
      57: aconst_null
      58: invokevirtual #21                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      61: checkcast     #22                 // class io/micrometer/core/instrument/binder/MeterBinder
      64: areturn

  protected java.lang.Iterable<io.micrometer.core.instrument.Tag> getAdditionalTags(org.springframework.cache.Cache);
    Code:
       0: ldc           #23                 // String name
       2: aload_1
       3: invokeinterface #24,  1           // InterfaceMethod org/springframework/cache/Cache.getName:()Ljava/lang/String;
       8: invokestatic  #25                 // Method io/micrometer/core/instrument/Tags.of:(Ljava/lang/String;Ljava/lang/String;)Lio/micrometer/core/instrument/Tags;
      11: areturn

  private org.springframework.cache.Cache unwrapIfNecessary(org.springframework.cache.Cache);
    Code:
       0: ldc           #26                 // String org.springframework.cache.transaction.TransactionAwareCacheDecorator
       2: aload_0
       3: invokevirtual #27                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
       6: invokevirtual #28                 // Method java/lang/Class.getClassLoader:()Ljava/lang/ClassLoader;
       9: invokestatic  #29                 // Method org/springframework/util/ClassUtils.isPresent:(Ljava/lang/String;Ljava/lang/ClassLoader;)Z
      12: ifeq          20
      15: aload_1
      16: invokestatic  #30                 // Method org/springframework/boot/actuate/metrics/cache/CacheMetricsRegistrar$TransactionAwareCacheDecoratorHandler.access$000:(Lorg/springframework/cache/Cache;)Lorg/springframework/cache/Cache;
      19: areturn
      20: aload_1
      21: areturn

  private static io.micrometer.core.instrument.binder.MeterBinder lambda$getMeterBinder$0(org.springframework.cache.Cache, io.micrometer.core.instrument.Tags, org.springframework.boot.actuate.metrics.cache.CacheMeterBinderProvider);
    Code:
       0: aload_2
       1: aload_0
       2: aload_1
       3: invokeinterface #31,  3           // InterfaceMethod org/springframework/boot/actuate/metrics/cache/CacheMeterBinderProvider.getMeterBinder:(Lorg/springframework/cache/Cache;Ljava/lang/Iterable;)Lio/micrometer/core/instrument/binder/MeterBinder;
       8: areturn
}
