Compiled from "MetricsWebFilter.java"
public class org.springframework.boot.actuate.metrics.web.reactive.server.MetricsWebFilter implements org.springframework.web.server.WebFilter {
  private final io.micrometer.core.instrument.MeterRegistry registry;

  private final org.springframework.boot.actuate.metrics.web.reactive.server.WebFluxTagsProvider tagsProvider;

  private final java.lang.String metricName;

  private final boolean autoTimeRequests;

  public org.springframework.boot.actuate.metrics.web.reactive.server.MetricsWebFilter(io.micrometer.core.instrument.MeterRegistry, org.springframework.boot.actuate.metrics.web.reactive.server.WebFluxTagsProvider, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: iconst_1
       5: invokespecial #1                  // Method "<init>":(Lio/micrometer/core/instrument/MeterRegistry;Lorg/springframework/boot/actuate/metrics/web/reactive/server/WebFluxTagsProvider;Ljava/lang/String;Z)V
       8: return

  public org.springframework.boot.actuate.metrics.web.reactive.server.MetricsWebFilter(io.micrometer.core.instrument.MeterRegistry, org.springframework.boot.actuate.metrics.web.reactive.server.WebFluxTagsProvider, java.lang.String, boolean);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #3                  // Field registry:Lio/micrometer/core/instrument/MeterRegistry;
       9: aload_0
      10: aload_2
      11: putfield      #4                  // Field tagsProvider:Lorg/springframework/boot/actuate/metrics/web/reactive/server/WebFluxTagsProvider;
      14: aload_0
      15: aload_3
      16: putfield      #5                  // Field metricName:Ljava/lang/String;
      19: aload_0
      20: iload         4
      22: putfield      #6                  // Field autoTimeRequests:Z
      25: return

  public reactor.core.publisher.Mono<java.lang.Void> filter(org.springframework.web.server.ServerWebExchange, org.springframework.web.server.WebFilterChain);
    Code:
       0: aload_0
       1: getfield      #6                  // Field autoTimeRequests:Z
       4: ifeq          25
       7: aload_2
       8: aload_1
       9: invokeinterface #7,  2            // InterfaceMethod org/springframework/web/server/WebFilterChain.filter:(Lorg/springframework/web/server/ServerWebExchange;)Lreactor/core/publisher/Mono;
      14: aload_0
      15: aload_1
      16: invokedynamic #8,  0              // InvokeDynamic #0:apply:(Lorg/springframework/boot/actuate/metrics/web/reactive/server/MetricsWebFilter;Lorg/springframework/web/server/ServerWebExchange;)Ljava/util/function/Function;
      21: invokevirtual #9                  // Method reactor/core/publisher/Mono.compose:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      24: areturn
      25: aload_2
      26: aload_1
      27: invokeinterface #7,  2            // InterfaceMethod org/springframework/web/server/WebFilterChain.filter:(Lorg/springframework/web/server/ServerWebExchange;)Lreactor/core/publisher/Mono;
      32: areturn

  private org.reactivestreams.Publisher<java.lang.Void> filter(org.springframework.web.server.ServerWebExchange, reactor.core.publisher.Mono<java.lang.Void>);
    Code:
       0: invokestatic  #10                 // Method java/lang/System.nanoTime:()J
       3: lstore_3
       4: aload_1
       5: invokeinterface #11,  1           // InterfaceMethod org/springframework/web/server/ServerWebExchange.getResponse:()Lorg/springframework/http/server/reactive/ServerHttpResponse;
      10: astore        5
      12: aload_2
      13: aload_0
      14: aload_1
      15: lload_3
      16: invokedynamic #12,  0             // InvokeDynamic #1:accept:(Lorg/springframework/boot/actuate/metrics/web/reactive/server/MetricsWebFilter;Lorg/springframework/web/server/ServerWebExchange;J)Ljava/util/function/Consumer;
      21: invokevirtual #13                 // Method reactor/core/publisher/Mono.doOnSuccess:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Mono;
      24: aload_0
      25: aload         5
      27: aload_1
      28: lload_3
      29: invokedynamic #14,  0             // InvokeDynamic #2:accept:(Lorg/springframework/boot/actuate/metrics/web/reactive/server/MetricsWebFilter;Lorg/springframework/http/server/reactive/ServerHttpResponse;Lorg/springframework/web/server/ServerWebExchange;J)Ljava/util/function/Consumer;
      34: invokevirtual #15                 // Method reactor/core/publisher/Mono.doOnError:(Ljava/util/function/Consumer;)Lreactor/core/publisher/Mono;
      37: areturn

  private void success(org.springframework.web.server.ServerWebExchange, long);
    Code:
       0: aload_0
       1: getfield      #4                  // Field tagsProvider:Lorg/springframework/boot/actuate/metrics/web/reactive/server/WebFluxTagsProvider;
       4: aload_1
       5: aconst_null
       6: invokeinterface #16,  3           // InterfaceMethod org/springframework/boot/actuate/metrics/web/reactive/server/WebFluxTagsProvider.httpRequestTags:(Lorg/springframework/web/server/ServerWebExchange;Ljava/lang/Throwable;)Ljava/lang/Iterable;
      11: astore        4
      13: aload_0
      14: getfield      #3                  // Field registry:Lio/micrometer/core/instrument/MeterRegistry;
      17: aload_0
      18: getfield      #5                  // Field metricName:Ljava/lang/String;
      21: aload         4
      23: invokevirtual #17                 // Method io/micrometer/core/instrument/MeterRegistry.timer:(Ljava/lang/String;Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Timer;
      26: invokestatic  #10                 // Method java/lang/System.nanoTime:()J
      29: lload_2
      30: lsub
      31: getstatic     #18                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      34: invokeinterface #19,  4           // InterfaceMethod io/micrometer/core/instrument/Timer.record:(JLjava/util/concurrent/TimeUnit;)V
      39: return

  private void error(org.springframework.web.server.ServerWebExchange, long, java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #4                  // Field tagsProvider:Lorg/springframework/boot/actuate/metrics/web/reactive/server/WebFluxTagsProvider;
       4: aload_1
       5: aload         4
       7: invokeinterface #16,  3           // InterfaceMethod org/springframework/boot/actuate/metrics/web/reactive/server/WebFluxTagsProvider.httpRequestTags:(Lorg/springframework/web/server/ServerWebExchange;Ljava/lang/Throwable;)Ljava/lang/Iterable;
      12: astore        5
      14: aload_0
      15: getfield      #3                  // Field registry:Lio/micrometer/core/instrument/MeterRegistry;
      18: aload_0
      19: getfield      #5                  // Field metricName:Ljava/lang/String;
      22: aload         5
      24: invokevirtual #17                 // Method io/micrometer/core/instrument/MeterRegistry.timer:(Ljava/lang/String;Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Timer;
      27: invokestatic  #10                 // Method java/lang/System.nanoTime:()J
      30: lload_2
      31: lsub
      32: getstatic     #18                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      35: invokeinterface #19,  4           // InterfaceMethod io/micrometer/core/instrument/Timer.record:(JLjava/util/concurrent/TimeUnit;)V
      40: return

  private void lambda$filter$3(org.springframework.http.server.reactive.ServerHttpResponse, org.springframework.web.server.ServerWebExchange, long, java.lang.Throwable);
    Code:
       0: aload_1
       1: invokeinterface #20,  1           // InterfaceMethod org/springframework/http/server/reactive/ServerHttpResponse.isCommitted:()Z
       6: ifeq          20
       9: aload_0
      10: aload_2
      11: lload_3
      12: aload         5
      14: invokespecial #21                 // Method error:(Lorg/springframework/web/server/ServerWebExchange;JLjava/lang/Throwable;)V
      17: goto          36
      20: aload_1
      21: aload_0
      22: aload_2
      23: lload_3
      24: aload         5
      26: invokedynamic #22,  0             // InvokeDynamic #3:get:(Lorg/springframework/boot/actuate/metrics/web/reactive/server/MetricsWebFilter;Lorg/springframework/web/server/ServerWebExchange;JLjava/lang/Throwable;)Ljava/util/function/Supplier;
      31: invokeinterface #23,  2           // InterfaceMethod org/springframework/http/server/reactive/ServerHttpResponse.beforeCommit:(Ljava/util/function/Supplier;)V
      36: return

  private reactor.core.publisher.Mono lambda$null$2(org.springframework.web.server.ServerWebExchange, long, java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: lload_2
       3: aload         4
       5: invokespecial #21                 // Method error:(Lorg/springframework/web/server/ServerWebExchange;JLjava/lang/Throwable;)V
       8: invokestatic  #24                 // Method reactor/core/publisher/Mono.empty:()Lreactor/core/publisher/Mono;
      11: areturn

  private void lambda$filter$1(org.springframework.web.server.ServerWebExchange, long, java.lang.Void);
    Code:
       0: aload_0
       1: aload_1
       2: lload_2
       3: invokespecial #25                 // Method success:(Lorg/springframework/web/server/ServerWebExchange;J)V
       6: return

  private org.reactivestreams.Publisher lambda$filter$0(org.springframework.web.server.ServerWebExchange, reactor.core.publisher.Mono);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #26                 // Method filter:(Lorg/springframework/web/server/ServerWebExchange;Lreactor/core/publisher/Mono;)Lorg/reactivestreams/Publisher;
       6: areturn
}
