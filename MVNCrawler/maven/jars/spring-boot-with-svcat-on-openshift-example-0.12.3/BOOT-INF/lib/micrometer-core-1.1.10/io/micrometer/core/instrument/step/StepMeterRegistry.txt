Compiled from "StepMeterRegistry.java"
public abstract class io.micrometer.core.instrument.step.StepMeterRegistry extends io.micrometer.core.instrument.push.PushMeterRegistry {
  private final io.micrometer.core.instrument.step.StepRegistryConfig config;

  public io.micrometer.core.instrument.step.StepMeterRegistry(io.micrometer.core.instrument.step.StepRegistryConfig, io.micrometer.core.instrument.Clock);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #25                 // Method io/micrometer/core/instrument/push/PushMeterRegistry."<init>":(Lio/micrometer/core/instrument/push/PushRegistryConfig;Lio/micrometer/core/instrument/Clock;)V
       6: aload_0
       7: aload_1
       8: putfield      #27                 // Field config:Lio/micrometer/core/instrument/step/StepRegistryConfig;
      11: return

  protected <T> io.micrometer.core.instrument.Gauge newGauge(io.micrometer.core.instrument.Meter$Id, T, java.util.function.ToDoubleFunction<T>);
    Code:
       0: new           #37                 // class io/micrometer/core/instrument/internal/DefaultGauge
       3: dup
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokespecial #40                 // Method io/micrometer/core/instrument/internal/DefaultGauge."<init>":(Lio/micrometer/core/instrument/Meter$Id;Ljava/lang/Object;Ljava/util/function/ToDoubleFunction;)V
      10: areturn

  protected io.micrometer.core.instrument.Counter newCounter(io.micrometer.core.instrument.Meter$Id);
    Code:
       0: new           #52                 // class io/micrometer/core/instrument/step/StepCounter
       3: dup
       4: aload_1
       5: aload_0
       6: getfield      #54                 // Field clock:Lio/micrometer/core/instrument/Clock;
       9: aload_0
      10: getfield      #27                 // Field config:Lio/micrometer/core/instrument/step/StepRegistryConfig;
      13: invokeinterface #60,  1           // InterfaceMethod io/micrometer/core/instrument/step/StepRegistryConfig.step:()Ljava/time/Duration;
      18: invokevirtual #66                 // Method java/time/Duration.toMillis:()J
      21: invokespecial #69                 // Method io/micrometer/core/instrument/step/StepCounter."<init>":(Lio/micrometer/core/instrument/Meter$Id;Lio/micrometer/core/instrument/Clock;J)V
      24: areturn

  protected io.micrometer.core.instrument.LongTaskTimer newLongTaskTimer(io.micrometer.core.instrument.Meter$Id);
    Code:
       0: new           #73                 // class io/micrometer/core/instrument/internal/DefaultLongTaskTimer
       3: dup
       4: aload_1
       5: aload_0
       6: getfield      #54                 // Field clock:Lio/micrometer/core/instrument/Clock;
       9: invokespecial #76                 // Method io/micrometer/core/instrument/internal/DefaultLongTaskTimer."<init>":(Lio/micrometer/core/instrument/Meter$Id;Lio/micrometer/core/instrument/Clock;)V
      12: areturn

  protected io.micrometer.core.instrument.Timer newTimer(io.micrometer.core.instrument.Meter$Id, io.micrometer.core.instrument.distribution.DistributionStatisticConfig, io.micrometer.core.instrument.distribution.pause.PauseDetector);
    Code:
       0: new           #80                 // class io/micrometer/core/instrument/step/StepTimer
       3: dup
       4: aload_1
       5: aload_0
       6: getfield      #54                 // Field clock:Lio/micrometer/core/instrument/Clock;
       9: aload_2
      10: aload_3
      11: aload_0
      12: invokevirtual #84                 // Method getBaseTimeUnit:()Ljava/util/concurrent/TimeUnit;
      15: aload_0
      16: getfield      #27                 // Field config:Lio/micrometer/core/instrument/step/StepRegistryConfig;
      19: invokeinterface #60,  1           // InterfaceMethod io/micrometer/core/instrument/step/StepRegistryConfig.step:()Ljava/time/Duration;
      24: invokevirtual #66                 // Method java/time/Duration.toMillis:()J
      27: iconst_0
      28: invokespecial #87                 // Method io/micrometer/core/instrument/step/StepTimer."<init>":(Lio/micrometer/core/instrument/Meter$Id;Lio/micrometer/core/instrument/Clock;Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;Lio/micrometer/core/instrument/distribution/pause/PauseDetector;Ljava/util/concurrent/TimeUnit;JZ)V
      31: astore        4
      33: aload         4
      35: aload_0
      36: invokestatic  #93                 // Method io/micrometer/core/instrument/distribution/HistogramGauges.registerWithCommonFormat:(Lio/micrometer/core/instrument/Timer;Lio/micrometer/core/instrument/MeterRegistry;)Lio/micrometer/core/instrument/distribution/HistogramGauges;
      39: pop
      40: aload         4
      42: areturn

  protected io.micrometer.core.instrument.DistributionSummary newDistributionSummary(io.micrometer.core.instrument.Meter$Id, io.micrometer.core.instrument.distribution.DistributionStatisticConfig, double);
    Code:
       0: new           #103                // class io/micrometer/core/instrument/step/StepDistributionSummary
       3: dup
       4: aload_1
       5: aload_0
       6: getfield      #54                 // Field clock:Lio/micrometer/core/instrument/Clock;
       9: aload_2
      10: dload_3
      11: aload_0
      12: getfield      #27                 // Field config:Lio/micrometer/core/instrument/step/StepRegistryConfig;
      15: invokeinterface #60,  1           // InterfaceMethod io/micrometer/core/instrument/step/StepRegistryConfig.step:()Ljava/time/Duration;
      20: invokevirtual #66                 // Method java/time/Duration.toMillis:()J
      23: iconst_0
      24: invokespecial #106                // Method io/micrometer/core/instrument/step/StepDistributionSummary."<init>":(Lio/micrometer/core/instrument/Meter$Id;Lio/micrometer/core/instrument/Clock;Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;DJZ)V
      27: astore        5
      29: aload         5
      31: aload_0
      32: invokestatic  #109                // Method io/micrometer/core/instrument/distribution/HistogramGauges.registerWithCommonFormat:(Lio/micrometer/core/instrument/DistributionSummary;Lio/micrometer/core/instrument/MeterRegistry;)Lio/micrometer/core/instrument/distribution/HistogramGauges;
      35: pop
      36: aload         5
      38: areturn

  protected <T> io.micrometer.core.instrument.FunctionTimer newFunctionTimer(io.micrometer.core.instrument.Meter$Id, T, java.util.function.ToLongFunction<T>, java.util.function.ToDoubleFunction<T>, java.util.concurrent.TimeUnit);
    Code:
       0: new           #118                // class io/micrometer/core/instrument/step/StepFunctionTimer
       3: dup
       4: aload_1
       5: aload_0
       6: getfield      #54                 // Field clock:Lio/micrometer/core/instrument/Clock;
       9: aload_0
      10: getfield      #27                 // Field config:Lio/micrometer/core/instrument/step/StepRegistryConfig;
      13: invokeinterface #60,  1           // InterfaceMethod io/micrometer/core/instrument/step/StepRegistryConfig.step:()Ljava/time/Duration;
      18: invokevirtual #66                 // Method java/time/Duration.toMillis:()J
      21: aload_2
      22: aload_3
      23: aload         4
      25: aload         5
      27: aload_0
      28: invokevirtual #84                 // Method getBaseTimeUnit:()Ljava/util/concurrent/TimeUnit;
      31: invokespecial #121                // Method io/micrometer/core/instrument/step/StepFunctionTimer."<init>":(Lio/micrometer/core/instrument/Meter$Id;Lio/micrometer/core/instrument/Clock;JLjava/lang/Object;Ljava/util/function/ToLongFunction;Ljava/util/function/ToDoubleFunction;Ljava/util/concurrent/TimeUnit;Ljava/util/concurrent/TimeUnit;)V
      34: areturn

  protected <T> io.micrometer.core.instrument.FunctionCounter newFunctionCounter(io.micrometer.core.instrument.Meter$Id, T, java.util.function.ToDoubleFunction<T>);
    Code:
       0: new           #132                // class io/micrometer/core/instrument/step/StepFunctionCounter
       3: dup
       4: aload_1
       5: aload_0
       6: getfield      #54                 // Field clock:Lio/micrometer/core/instrument/Clock;
       9: aload_0
      10: getfield      #27                 // Field config:Lio/micrometer/core/instrument/step/StepRegistryConfig;
      13: invokeinterface #60,  1           // InterfaceMethod io/micrometer/core/instrument/step/StepRegistryConfig.step:()Ljava/time/Duration;
      18: invokevirtual #66                 // Method java/time/Duration.toMillis:()J
      21: aload_2
      22: aload_3
      23: invokespecial #135                // Method io/micrometer/core/instrument/step/StepFunctionCounter."<init>":(Lio/micrometer/core/instrument/Meter$Id;Lio/micrometer/core/instrument/Clock;JLjava/lang/Object;Ljava/util/function/ToDoubleFunction;)V
      26: areturn

  protected io.micrometer.core.instrument.Meter newMeter(io.micrometer.core.instrument.Meter$Id, io.micrometer.core.instrument.Meter$Type, java.lang.Iterable<io.micrometer.core.instrument.Measurement>);
    Code:
       0: new           #140                // class io/micrometer/core/instrument/internal/DefaultMeter
       3: dup
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokespecial #143                // Method io/micrometer/core/instrument/internal/DefaultMeter."<init>":(Lio/micrometer/core/instrument/Meter$Id;Lio/micrometer/core/instrument/Meter$Type;Ljava/lang/Iterable;)V
      10: areturn

  protected io.micrometer.core.instrument.distribution.DistributionStatisticConfig defaultHistogramConfig();
    Code:
       0: invokestatic  #154                // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig.builder:()Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       3: aload_0
       4: getfield      #27                 // Field config:Lio/micrometer/core/instrument/step/StepRegistryConfig;
       7: invokeinterface #60,  1           // InterfaceMethod io/micrometer/core/instrument/step/StepRegistryConfig.step:()Ljava/time/Duration;
      12: invokevirtual #158                // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder.expiry:(Ljava/time/Duration;)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
      15: invokevirtual #161                // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder.build:()Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
      18: getstatic     #164                // Field io/micrometer/core/instrument/distribution/DistributionStatisticConfig.DEFAULT:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
      21: invokevirtual #168                // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig.merge:(Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
      24: areturn
}
