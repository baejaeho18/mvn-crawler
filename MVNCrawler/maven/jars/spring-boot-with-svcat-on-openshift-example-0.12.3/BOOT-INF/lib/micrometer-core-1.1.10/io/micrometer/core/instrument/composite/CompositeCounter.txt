Compiled from "CompositeCounter.java"
class io.micrometer.core.instrument.composite.CompositeCounter extends io.micrometer.core.instrument.composite.AbstractCompositeMeter<io.micrometer.core.instrument.Counter> implements io.micrometer.core.instrument.Counter {
  io.micrometer.core.instrument.composite.CompositeCounter(io.micrometer.core.instrument.Meter$Id);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #25                 // Method io/micrometer/core/instrument/composite/AbstractCompositeMeter."<init>":(Lio/micrometer/core/instrument/Meter$Id;)V
       5: return

  public void increment(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokedynamic #51,  0             // InvokeDynamic #0:accept:(D)Ljava/util/function/Consumer;
       7: invokevirtual #55                 // Method forEachChild:(Ljava/util/function/Consumer;)V
      10: return

  public double count();
    Code:
       0: aload_0
       1: invokevirtual #63                 // Method firstChild:()Lio/micrometer/core/instrument/Meter;
       4: checkcast     #7                  // class io/micrometer/core/instrument/Counter
       7: invokeinterface #65,  1           // InterfaceMethod io/micrometer/core/instrument/Counter.count:()D
      12: dreturn

  io.micrometer.core.instrument.Counter newNoopMeter();
    Code:
       0: new           #69                 // class io/micrometer/core/instrument/noop/NoopCounter
       3: dup
       4: aload_0
       5: invokevirtual #73                 // Method getId:()Lio/micrometer/core/instrument/Meter$Id;
       8: invokespecial #74                 // Method io/micrometer/core/instrument/noop/NoopCounter."<init>":(Lio/micrometer/core/instrument/Meter$Id;)V
      11: areturn

  io.micrometer.core.instrument.Counter registerNewMeter(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_0
       1: invokevirtual #73                 // Method getId:()Lio/micrometer/core/instrument/Meter$Id;
       4: invokevirtual #80                 // Method io/micrometer/core/instrument/Meter$Id.getName:()Ljava/lang/String;
       7: invokestatic  #84                 // InterfaceMethod io/micrometer/core/instrument/Counter.builder:(Ljava/lang/String;)Lio/micrometer/core/instrument/Counter$Builder;
      10: aload_0
      11: invokevirtual #73                 // Method getId:()Lio/micrometer/core/instrument/Meter$Id;
      14: invokevirtual #88                 // Method io/micrometer/core/instrument/Meter$Id.getTagsAsIterable:()Ljava/lang/Iterable;
      17: invokevirtual #92                 // Method io/micrometer/core/instrument/Counter$Builder.tags:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Counter$Builder;
      20: aload_0
      21: invokevirtual #73                 // Method getId:()Lio/micrometer/core/instrument/Meter$Id;
      24: invokevirtual #95                 // Method io/micrometer/core/instrument/Meter$Id.getDescription:()Ljava/lang/String;
      27: invokevirtual #98                 // Method io/micrometer/core/instrument/Counter$Builder.description:(Ljava/lang/String;)Lio/micrometer/core/instrument/Counter$Builder;
      30: aload_0
      31: invokevirtual #73                 // Method getId:()Lio/micrometer/core/instrument/Meter$Id;
      34: invokevirtual #101                // Method io/micrometer/core/instrument/Meter$Id.getBaseUnit:()Ljava/lang/String;
      37: invokevirtual #104                // Method io/micrometer/core/instrument/Counter$Builder.baseUnit:(Ljava/lang/String;)Lio/micrometer/core/instrument/Counter$Builder;
      40: aload_1
      41: invokevirtual #107                // Method io/micrometer/core/instrument/Counter$Builder.register:(Lio/micrometer/core/instrument/MeterRegistry;)Lio/micrometer/core/instrument/Counter;
      44: areturn

  io.micrometer.core.instrument.Meter registerNewMeter(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #112                // Method registerNewMeter:(Lio/micrometer/core/instrument/MeterRegistry;)Lio/micrometer/core/instrument/Counter;
       5: areturn

  io.micrometer.core.instrument.Meter newNoopMeter();
    Code:
       0: aload_0
       1: invokevirtual #114                // Method newNoopMeter:()Lio/micrometer/core/instrument/Counter;
       4: areturn

  private static void lambda$increment$0(double, io.micrometer.core.instrument.Counter);
    Code:
       0: aload_2
       1: dload_0
       2: invokeinterface #116,  3          // InterfaceMethod io/micrometer/core/instrument/Counter.increment:(D)V
       7: return
}
