Compiled from "DistributionStatisticConfig.java"
public class io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder {
  private final io.micrometer.core.instrument.distribution.DistributionStatisticConfig config;

  public io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder();
    Code:
       0: aload_0
       1: invokespecial #14                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #7                  // class io/micrometer/core/instrument/distribution/DistributionStatisticConfig
       8: dup
       9: invokespecial #15                 // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig."<init>":()V
      12: putfield      #17                 // Field config:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
      15: return

  public io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder percentilesHistogram(java.lang.Boolean);
    Code:
       0: aload_0
       1: getfield      #17                 // Field config:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
       4: aload_1
       5: invokestatic  #26                 // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig.access$002:(Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;Ljava/lang/Boolean;)Ljava/lang/Boolean;
       8: pop
       9: aload_0
      10: areturn

  public io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder percentiles(double...);
    Code:
       0: aload_0
       1: getfield      #17                 // Field config:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
       4: aload_1
       5: invokestatic  #34                 // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig.access$102:(Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;[D)[D
       8: pop
       9: aload_0
      10: areturn

  public io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder percentilePrecision(java.lang.Integer);
    Code:
       0: aload_0
       1: getfield      #17                 // Field config:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
       4: aload_1
       5: invokestatic  #41                 // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig.access$202:(Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;Ljava/lang/Integer;)Ljava/lang/Integer;
       8: pop
       9: aload_0
      10: areturn

  public io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder sla(long...);
    Code:
       0: aload_0
       1: getfield      #17                 // Field config:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
       4: aload_1
       5: invokestatic  #49                 // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig.access$302:(Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;[J)[J
       8: pop
       9: aload_0
      10: areturn

  public io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder minimumExpectedValue(java.lang.Long);
    Code:
       0: aload_0
       1: getfield      #17                 // Field config:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
       4: aload_1
       5: invokestatic  #56                 // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig.access$402:(Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;Ljava/lang/Long;)Ljava/lang/Long;
       8: pop
       9: aload_0
      10: areturn

  public io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder maximumExpectedValue(java.lang.Long);
    Code:
       0: aload_0
       1: getfield      #17                 // Field config:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
       4: aload_1
       5: invokestatic  #62                 // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig.access$502:(Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;Ljava/lang/Long;)Ljava/lang/Long;
       8: pop
       9: aload_0
      10: areturn

  public io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder expiry(java.time.Duration);
    Code:
       0: aload_0
       1: getfield      #17                 // Field config:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
       4: aload_1
       5: invokestatic  #69                 // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig.access$602:(Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;Ljava/time/Duration;)Ljava/time/Duration;
       8: pop
       9: aload_0
      10: areturn

  public io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder bufferLength(java.lang.Integer);
    Code:
       0: aload_0
       1: getfield      #17                 // Field config:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
       4: aload_1
       5: invokestatic  #74                 // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig.access$702:(Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;Ljava/lang/Integer;)Ljava/lang/Integer;
       8: pop
       9: aload_0
      10: areturn

  public io.micrometer.core.instrument.distribution.DistributionStatisticConfig build();
    Code:
       0: aload_0
       1: getfield      #17                 // Field config:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
       4: areturn
}
