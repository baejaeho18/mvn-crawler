Compiled from "Timer.java"
public class io.micrometer.core.instrument.Timer$Builder {
  private final java.lang.String name;

  private io.micrometer.core.instrument.Tags tags;

  private final io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder distributionConfigBuilder;

  private java.lang.String description;

  private io.micrometer.core.instrument.distribution.pause.PauseDetector pauseDetector;

  private io.micrometer.core.instrument.Timer$Builder(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #47                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #53                 // Method io/micrometer/core/instrument/Tags.empty:()Lio/micrometer/core/instrument/Tags;
       8: putfield      #55                 // Field tags:Lio/micrometer/core/instrument/Tags;
      11: aload_0
      12: aload_1
      13: putfield      #57                 // Field name:Ljava/lang/String;
      16: aload_0
      17: new           #7                  // class io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder
      20: dup
      21: invokespecial #58                 // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder."<init>":()V
      24: putfield      #60                 // Field distributionConfigBuilder:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
      27: aload_0
      28: lconst_1
      29: invokestatic  #66                 // Method java/time/Duration.ofMillis:(J)Ljava/time/Duration;
      32: invokevirtual #70                 // Method minimumExpectedValue:(Ljava/time/Duration;)Lio/micrometer/core/instrument/Timer$Builder;
      35: pop
      36: aload_0
      37: ldc2_w        #71                 // long 30l
      40: invokestatic  #75                 // Method java/time/Duration.ofSeconds:(J)Ljava/time/Duration;
      43: invokevirtual #78                 // Method maximumExpectedValue:(Ljava/time/Duration;)Lio/micrometer/core/instrument/Timer$Builder;
      46: pop
      47: return

  public io.micrometer.core.instrument.Timer$Builder tags(java.lang.String...);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #85                 // Method io/micrometer/core/instrument/Tags.of:([Ljava/lang/String;)Lio/micrometer/core/instrument/Tags;
       5: invokevirtual #88                 // Method tags:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Timer$Builder;
       8: areturn

  public io.micrometer.core.instrument.Timer$Builder tags(java.lang.Iterable<io.micrometer.core.instrument.Tag>);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #55                 // Field tags:Lio/micrometer/core/instrument/Tags;
       5: aload_1
       6: invokevirtual #94                 // Method io/micrometer/core/instrument/Tags.and:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Tags;
       9: putfield      #55                 // Field tags:Lio/micrometer/core/instrument/Tags;
      12: aload_0
      13: areturn

  public io.micrometer.core.instrument.Timer$Builder tag(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #55                 // Field tags:Lio/micrometer/core/instrument/Tags;
       5: aload_1
       6: aload_2
       7: invokevirtual #101                // Method io/micrometer/core/instrument/Tags.and:(Ljava/lang/String;Ljava/lang/String;)Lio/micrometer/core/instrument/Tags;
      10: putfield      #55                 // Field tags:Lio/micrometer/core/instrument/Tags;
      13: aload_0
      14: areturn

  public io.micrometer.core.instrument.Timer$Builder publishPercentiles(double...);
    Code:
       0: aload_0
       1: getfield      #60                 // Field distributionConfigBuilder:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       4: aload_1
       5: invokevirtual #109                // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder.percentiles:([D)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       8: pop
       9: aload_0
      10: areturn

  public io.micrometer.core.instrument.Timer$Builder percentilePrecision(java.lang.Integer);
    Code:
       0: aload_0
       1: getfield      #60                 // Field distributionConfigBuilder:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       4: aload_1
       5: invokevirtual #115                // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder.percentilePrecision:(Ljava/lang/Integer;)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       8: pop
       9: aload_0
      10: areturn

  public io.micrometer.core.instrument.Timer$Builder publishPercentileHistogram();
    Code:
       0: aload_0
       1: iconst_1
       2: invokestatic  #125                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       5: invokevirtual #128                // Method publishPercentileHistogram:(Ljava/lang/Boolean;)Lio/micrometer/core/instrument/Timer$Builder;
       8: areturn

  public io.micrometer.core.instrument.Timer$Builder publishPercentileHistogram(java.lang.Boolean);
    Code:
       0: aload_0
       1: getfield      #60                 // Field distributionConfigBuilder:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       4: aload_1
       5: invokevirtual #132                // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder.percentilesHistogram:(Ljava/lang/Boolean;)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       8: pop
       9: aload_0
      10: areturn

  public io.micrometer.core.instrument.Timer$Builder sla(java.time.Duration...);
    Code:
       0: aload_1
       1: ifnull        31
       4: aload_0
       5: getfield      #60                 // Field distributionConfigBuilder:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       8: aload_1
       9: invokestatic  #142                // Method java/util/Arrays.stream:([Ljava/lang/Object;)Ljava/util/stream/Stream;
      12: invokedynamic #162,  0            // InvokeDynamic #0:applyAsLong:()Ljava/util/function/ToLongFunction;
      17: invokeinterface #168,  2          // InterfaceMethod java/util/stream/Stream.mapToLong:(Ljava/util/function/ToLongFunction;)Ljava/util/stream/LongStream;
      22: invokeinterface #174,  1          // InterfaceMethod java/util/stream/LongStream.toArray:()[J
      27: invokevirtual #177                // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder.sla:([J)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
      30: pop
      31: aload_0
      32: areturn

  public io.micrometer.core.instrument.Timer$Builder minimumExpectedValue(java.time.Duration);
    Code:
       0: aload_1
       1: ifnull        19
       4: aload_0
       5: getfield      #60                 // Field distributionConfigBuilder:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       8: aload_1
       9: invokevirtual #155                // Method java/time/Duration.toNanos:()J
      12: invokestatic  #183                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      15: invokevirtual #186                // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder.minimumExpectedValue:(Ljava/lang/Long;)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
      18: pop
      19: aload_0
      20: areturn

  public io.micrometer.core.instrument.Timer$Builder maximumExpectedValue(java.time.Duration);
    Code:
       0: aload_1
       1: ifnull        19
       4: aload_0
       5: getfield      #60                 // Field distributionConfigBuilder:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       8: aload_1
       9: invokevirtual #155                // Method java/time/Duration.toNanos:()J
      12: invokestatic  #183                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      15: invokevirtual #190                // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder.maximumExpectedValue:(Ljava/lang/Long;)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
      18: pop
      19: aload_0
      20: areturn

  public io.micrometer.core.instrument.Timer$Builder distributionStatisticExpiry(java.time.Duration);
    Code:
       0: aload_0
       1: getfield      #60                 // Field distributionConfigBuilder:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       4: aload_1
       5: invokevirtual #196                // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder.expiry:(Ljava/time/Duration;)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       8: pop
       9: aload_0
      10: areturn

  public io.micrometer.core.instrument.Timer$Builder distributionStatisticBufferLength(java.lang.Integer);
    Code:
       0: aload_0
       1: getfield      #60                 // Field distributionConfigBuilder:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       4: aload_1
       5: invokevirtual #200                // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder.bufferLength:(Ljava/lang/Integer;)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       8: pop
       9: aload_0
      10: areturn

  public io.micrometer.core.instrument.Timer$Builder pauseDetector(io.micrometer.core.instrument.distribution.pause.PauseDetector);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #203                // Field pauseDetector:Lio/micrometer/core/instrument/distribution/pause/PauseDetector;
       5: aload_0
       6: areturn

  public io.micrometer.core.instrument.Timer$Builder description(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #206                // Field description:Ljava/lang/String;
       5: aload_0
       6: areturn

  public io.micrometer.core.instrument.Timer register(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_1
       1: new           #16                 // class io/micrometer/core/instrument/Meter$Id
       4: dup
       5: aload_0
       6: getfield      #57                 // Field name:Ljava/lang/String;
       9: aload_0
      10: getfield      #55                 // Field tags:Lio/micrometer/core/instrument/Tags;
      13: aconst_null
      14: aload_0
      15: getfield      #206                // Field description:Ljava/lang/String;
      18: getstatic     #212                // Field io/micrometer/core/instrument/Meter$Type.TIMER:Lio/micrometer/core/instrument/Meter$Type;
      21: invokespecial #215                // Method io/micrometer/core/instrument/Meter$Id."<init>":(Ljava/lang/String;Lio/micrometer/core/instrument/Tags;Ljava/lang/String;Ljava/lang/String;Lio/micrometer/core/instrument/Meter$Type;)V
      24: aload_0
      25: getfield      #60                 // Field distributionConfigBuilder:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
      28: invokevirtual #219                // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder.build:()Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
      31: aload_0
      32: getfield      #203                // Field pauseDetector:Lio/micrometer/core/instrument/distribution/pause/PauseDetector;
      35: ifnonnull     48
      38: aload_1
      39: invokevirtual #223                // Method io/micrometer/core/instrument/MeterRegistry.config:()Lio/micrometer/core/instrument/MeterRegistry$Config;
      42: invokevirtual #226                // Method io/micrometer/core/instrument/MeterRegistry$Config.pauseDetector:()Lio/micrometer/core/instrument/distribution/pause/PauseDetector;
      45: goto          52
      48: aload_0
      49: getfield      #203                // Field pauseDetector:Lio/micrometer/core/instrument/distribution/pause/PauseDetector;
      52: invokevirtual #232                // Method io/micrometer/core/instrument/MeterRegistry.timer:(Lio/micrometer/core/instrument/Meter$Id;Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;Lio/micrometer/core/instrument/distribution/pause/PauseDetector;)Lio/micrometer/core/instrument/Timer;
      55: areturn

  io.micrometer.core.instrument.Timer$Builder(java.lang.String, io.micrometer.core.instrument.Timer$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #237                // Method "<init>":(Ljava/lang/String;)V
       5: return
}
