Compiled from "HierarchicalNameMapper.java"
public interface io.micrometer.core.instrument.util.HierarchicalNameMapper {
  public static final io.micrometer.core.instrument.util.HierarchicalNameMapper DEFAULT;

  public abstract java.lang.String toHierarchicalName(io.micrometer.core.instrument.Meter$Id, io.micrometer.core.instrument.config.NamingConvention);

  private static java.lang.String lambda$static$2(io.micrometer.core.instrument.Meter$Id, io.micrometer.core.instrument.config.NamingConvention);
    Code:
       0: new           #22                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #26                 // Method java/lang/StringBuilder."<init>":()V
       7: aload_0
       8: aload_1
       9: invokevirtual #30                 // Method io/micrometer/core/instrument/Meter$Id.getConventionName:(Lio/micrometer/core/instrument/config/NamingConvention;)Ljava/lang/String;
      12: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      15: aload_0
      16: aload_1
      17: invokevirtual #38                 // Method io/micrometer/core/instrument/Meter$Id.getConventionTags:(Lio/micrometer/core/instrument/config/NamingConvention;)Ljava/util/List;
      20: invokeinterface #44,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
      25: invokedynamic #63,  0             // InvokeDynamic #0:apply:()Ljava/util/function/Function;
      30: invokeinterface #69,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      35: invokedynamic #76,  0             // InvokeDynamic #1:apply:()Ljava/util/function/Function;
      40: invokeinterface #69,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      45: ldc           #78                 // String
      47: invokestatic  #84                 // Method java/util/stream/Collectors.joining:(Ljava/lang/CharSequence;)Ljava/util/stream/Collector;
      50: invokeinterface #88,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      55: checkcast     #90                 // class java/lang/String
      58: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      61: invokevirtual #94                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      64: areturn

  private static java.lang.String lambda$null$1(java.lang.String);
    Code:
       0: aload_0
       1: ldc           #100                // String
       3: ldc           #102                // String _
       5: invokevirtual #106                // Method java/lang/String.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;
       8: areturn

  private static java.lang.String lambda$null$0(io.micrometer.core.instrument.Tag);
    Code:
       0: new           #22                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #26                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #110                // String .
       9: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: invokeinterface #115,  1          // InterfaceMethod io/micrometer/core/instrument/Tag.getKey:()Ljava/lang/String;
      18: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      21: ldc           #110                // String .
      23: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: aload_0
      27: invokeinterface #118,  1          // InterfaceMethod io/micrometer/core/instrument/Tag.getValue:()Ljava/lang/String;
      32: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: invokevirtual #94                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      38: areturn

  static {};
    Code:
       0: invokedynamic #128,  0            // InvokeDynamic #2:toHierarchicalName:()Lio/micrometer/core/instrument/util/HierarchicalNameMapper;
       5: putstatic     #130                // Field DEFAULT:Lio/micrometer/core/instrument/util/HierarchicalNameMapper;
       8: return
}
