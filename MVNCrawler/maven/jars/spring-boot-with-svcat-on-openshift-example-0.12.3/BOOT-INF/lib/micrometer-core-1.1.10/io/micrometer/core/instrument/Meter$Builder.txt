Compiled from "Meter.java"
public class io.micrometer.core.instrument.Meter$Builder {
  private final java.lang.String name;

  private final io.micrometer.core.instrument.Meter$Type type;

  private final java.lang.Iterable<io.micrometer.core.instrument.Measurement> measurements;

  private io.micrometer.core.instrument.Tags tags;

  private java.lang.String description;

  private java.lang.String baseUnit;

  private io.micrometer.core.instrument.Meter$Builder(java.lang.String, io.micrometer.core.instrument.Meter$Type, java.lang.Iterable<io.micrometer.core.instrument.Measurement>);
    Code:
       0: aload_0
       1: invokespecial #34                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #40                 // Method io/micrometer/core/instrument/Tags.empty:()Lio/micrometer/core/instrument/Tags;
       8: putfield      #42                 // Field tags:Lio/micrometer/core/instrument/Tags;
      11: aload_0
      12: aload_1
      13: putfield      #44                 // Field name:Ljava/lang/String;
      16: aload_0
      17: aload_2
      18: putfield      #46                 // Field type:Lio/micrometer/core/instrument/Meter$Type;
      21: aload_0
      22: aload_3
      23: putfield      #48                 // Field measurements:Ljava/lang/Iterable;
      26: return

  public io.micrometer.core.instrument.Meter$Builder tags(java.lang.String...);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #55                 // Method io/micrometer/core/instrument/Tags.of:([Ljava/lang/String;)Lio/micrometer/core/instrument/Tags;
       5: invokevirtual #58                 // Method tags:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Meter$Builder;
       8: areturn

  public io.micrometer.core.instrument.Meter$Builder tags(java.lang.Iterable<io.micrometer.core.instrument.Tag>);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #42                 // Field tags:Lio/micrometer/core/instrument/Tags;
       5: aload_1
       6: invokevirtual #64                 // Method io/micrometer/core/instrument/Tags.and:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Tags;
       9: putfield      #42                 // Field tags:Lio/micrometer/core/instrument/Tags;
      12: aload_0
      13: areturn

  public io.micrometer.core.instrument.Meter$Builder tag(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #42                 // Field tags:Lio/micrometer/core/instrument/Tags;
       5: aload_1
       6: aload_2
       7: invokevirtual #70                 // Method io/micrometer/core/instrument/Tags.and:(Ljava/lang/String;Ljava/lang/String;)Lio/micrometer/core/instrument/Tags;
      10: putfield      #42                 // Field tags:Lio/micrometer/core/instrument/Tags;
      13: aload_0
      14: areturn

  public io.micrometer.core.instrument.Meter$Builder description(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #75                 // Field description:Ljava/lang/String;
       5: aload_0
       6: areturn

  public io.micrometer.core.instrument.Meter$Builder baseUnit(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #77                 // Field baseUnit:Ljava/lang/String;
       5: aload_0
       6: areturn

  public io.micrometer.core.instrument.Meter register(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_1
       1: new           #15                 // class io/micrometer/core/instrument/Meter$Id
       4: dup
       5: aload_0
       6: getfield      #44                 // Field name:Ljava/lang/String;
       9: aload_0
      10: getfield      #42                 // Field tags:Lio/micrometer/core/instrument/Tags;
      13: aload_0
      14: getfield      #77                 // Field baseUnit:Ljava/lang/String;
      17: aload_0
      18: getfield      #75                 // Field description:Ljava/lang/String;
      21: aload_0
      22: getfield      #46                 // Field type:Lio/micrometer/core/instrument/Meter$Type;
      25: invokespecial #83                 // Method io/micrometer/core/instrument/Meter$Id."<init>":(Ljava/lang/String;Lio/micrometer/core/instrument/Tags;Ljava/lang/String;Ljava/lang/String;Lio/micrometer/core/instrument/Meter$Type;)V
      28: aload_0
      29: getfield      #46                 // Field type:Lio/micrometer/core/instrument/Meter$Type;
      32: aload_0
      33: getfield      #48                 // Field measurements:Ljava/lang/Iterable;
      36: invokevirtual #88                 // Method io/micrometer/core/instrument/MeterRegistry.register:(Lio/micrometer/core/instrument/Meter$Id;Lio/micrometer/core/instrument/Meter$Type;Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Meter;
      39: areturn

  io.micrometer.core.instrument.Meter$Builder(java.lang.String, io.micrometer.core.instrument.Meter$Type, java.lang.Iterable, io.micrometer.core.instrument.Meter$1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokespecial #93                 // Method "<init>":(Ljava/lang/String;Lio/micrometer/core/instrument/Meter$Type;Ljava/lang/Iterable;)V
       7: return
}
