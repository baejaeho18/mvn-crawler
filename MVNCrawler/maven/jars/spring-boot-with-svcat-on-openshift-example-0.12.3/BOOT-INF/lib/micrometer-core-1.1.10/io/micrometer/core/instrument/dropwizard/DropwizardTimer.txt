Compiled from "DropwizardTimer.java"
public class io.micrometer.core.instrument.dropwizard.DropwizardTimer extends io.micrometer.core.instrument.AbstractTimer {
  private final com.codahale.metrics.Timer impl;

  private final java.util.concurrent.atomic.AtomicLong totalTime;

  private final io.micrometer.core.instrument.distribution.TimeWindowMax max;

  io.micrometer.core.instrument.dropwizard.DropwizardTimer(io.micrometer.core.instrument.Meter$Id, com.codahale.metrics.Timer, io.micrometer.core.instrument.Clock, io.micrometer.core.instrument.distribution.DistributionStatisticConfig, io.micrometer.core.instrument.distribution.pause.PauseDetector);
    Code:
       0: aload_0
       1: aload_1
       2: aload_3
       3: aload         4
       5: aload         5
       7: getstatic     #24                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      10: iconst_0
      11: invokespecial #27                 // Method io/micrometer/core/instrument/AbstractTimer."<init>":(Lio/micrometer/core/instrument/Meter$Id;Lio/micrometer/core/instrument/Clock;Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;Lio/micrometer/core/instrument/distribution/pause/PauseDetector;Ljava/util/concurrent/TimeUnit;Z)V
      14: aload_0
      15: new           #29                 // class java/util/concurrent/atomic/AtomicLong
      18: dup
      19: lconst_0
      20: invokespecial #32                 // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      23: putfield      #34                 // Field totalTime:Ljava/util/concurrent/atomic/AtomicLong;
      26: aload_0
      27: aload_2
      28: putfield      #36                 // Field impl:Lcom/codahale/metrics/Timer;
      31: aload_0
      32: new           #38                 // class io/micrometer/core/instrument/distribution/TimeWindowMax
      35: dup
      36: aload_3
      37: aload         4
      39: invokespecial #41                 // Method io/micrometer/core/instrument/distribution/TimeWindowMax."<init>":(Lio/micrometer/core/instrument/Clock;Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;)V
      42: putfield      #43                 // Field max:Lio/micrometer/core/instrument/distribution/TimeWindowMax;
      45: return

  protected void recordNonNegative(long, java.util.concurrent.TimeUnit);
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: iflt          48
       6: aload_0
       7: getfield      #36                 // Field impl:Lcom/codahale/metrics/Timer;
      10: lload_1
      11: aload_3
      12: invokevirtual #60                 // Method com/codahale/metrics/Timer.update:(JLjava/util/concurrent/TimeUnit;)V
      15: getstatic     #63                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      18: lload_1
      19: aload_3
      20: invokevirtual #67                 // Method java/util/concurrent/TimeUnit.convert:(JLjava/util/concurrent/TimeUnit;)J
      23: lstore        4
      25: aload_0
      26: getfield      #43                 // Field max:Lio/micrometer/core/instrument/distribution/TimeWindowMax;
      29: lload         4
      31: l2d
      32: getstatic     #63                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      35: invokevirtual #71                 // Method io/micrometer/core/instrument/distribution/TimeWindowMax.record:(DLjava/util/concurrent/TimeUnit;)V
      38: aload_0
      39: getfield      #34                 // Field totalTime:Ljava/util/concurrent/atomic/AtomicLong;
      42: lload         4
      44: invokevirtual #75                 // Method java/util/concurrent/atomic/AtomicLong.addAndGet:(J)J
      47: pop2
      48: return

  public long count();
    Code:
       0: aload_0
       1: getfield      #36                 // Field impl:Lcom/codahale/metrics/Timer;
       4: invokevirtual #84                 // Method com/codahale/metrics/Timer.getCount:()J
       7: lreturn

  public double totalTime(java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: getfield      #34                 // Field totalTime:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #88                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: l2d
       8: aload_1
       9: invokestatic  #94                 // Method io/micrometer/core/instrument/util/TimeUtils.nanosToUnit:(DLjava/util/concurrent/TimeUnit;)D
      12: dreturn

  public double max(java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: getfield      #43                 // Field max:Lio/micrometer/core/instrument/distribution/TimeWindowMax;
       4: aload_1
       5: invokevirtual #97                 // Method io/micrometer/core/instrument/distribution/TimeWindowMax.poll:(Ljava/util/concurrent/TimeUnit;)D
       8: dreturn
}
