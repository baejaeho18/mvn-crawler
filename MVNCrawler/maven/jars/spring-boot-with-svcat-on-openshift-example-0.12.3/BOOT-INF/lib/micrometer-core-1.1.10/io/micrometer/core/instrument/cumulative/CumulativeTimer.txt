Compiled from "CumulativeTimer.java"
public class io.micrometer.core.instrument.cumulative.CumulativeTimer extends io.micrometer.core.instrument.AbstractTimer {
  private final java.util.concurrent.atomic.AtomicLong count;

  private final java.util.concurrent.atomic.AtomicLong total;

  private final io.micrometer.core.instrument.distribution.TimeWindowMax max;

  public io.micrometer.core.instrument.cumulative.CumulativeTimer(io.micrometer.core.instrument.Meter$Id, io.micrometer.core.instrument.Clock, io.micrometer.core.instrument.distribution.DistributionStatisticConfig, io.micrometer.core.instrument.distribution.pause.PauseDetector, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: iconst_0
       9: invokespecial #20                 // Method "<init>":(Lio/micrometer/core/instrument/Meter$Id;Lio/micrometer/core/instrument/Clock;Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;Lio/micrometer/core/instrument/distribution/pause/PauseDetector;Ljava/util/concurrent/TimeUnit;Z)V
      12: return

  public io.micrometer.core.instrument.cumulative.CumulativeTimer(io.micrometer.core.instrument.Meter$Id, io.micrometer.core.instrument.Clock, io.micrometer.core.instrument.distribution.DistributionStatisticConfig, io.micrometer.core.instrument.distribution.pause.PauseDetector, java.util.concurrent.TimeUnit, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: iload         6
      10: invokespecial #33                 // Method io/micrometer/core/instrument/AbstractTimer."<init>":(Lio/micrometer/core/instrument/Meter$Id;Lio/micrometer/core/instrument/Clock;Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;Lio/micrometer/core/instrument/distribution/pause/PauseDetector;Ljava/util/concurrent/TimeUnit;Z)V
      13: aload_0
      14: new           #35                 // class java/util/concurrent/atomic/AtomicLong
      17: dup
      18: invokespecial #38                 // Method java/util/concurrent/atomic/AtomicLong."<init>":()V
      21: putfield      #40                 // Field count:Ljava/util/concurrent/atomic/AtomicLong;
      24: aload_0
      25: new           #35                 // class java/util/concurrent/atomic/AtomicLong
      28: dup
      29: invokespecial #38                 // Method java/util/concurrent/atomic/AtomicLong."<init>":()V
      32: putfield      #42                 // Field total:Ljava/util/concurrent/atomic/AtomicLong;
      35: aload_0
      36: new           #44                 // class io/micrometer/core/instrument/distribution/TimeWindowMax
      39: dup
      40: aload_2
      41: aload_3
      42: invokespecial #47                 // Method io/micrometer/core/instrument/distribution/TimeWindowMax."<init>":(Lio/micrometer/core/instrument/Clock;Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;)V
      45: putfield      #49                 // Field max:Lio/micrometer/core/instrument/distribution/TimeWindowMax;
      48: return

  protected void recordNonNegative(long, java.util.concurrent.TimeUnit);
    Code:
       0: lload_1
       1: l2d
       2: aload_3
       3: getstatic     #58                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
       6: invokestatic  #64                 // Method io/micrometer/core/instrument/util/TimeUtils.convert:(DLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/TimeUnit;)D
       9: d2l
      10: lstore        4
      12: aload_0
      13: getfield      #40                 // Field count:Ljava/util/concurrent/atomic/AtomicLong;
      16: lconst_1
      17: invokevirtual #68                 // Method java/util/concurrent/atomic/AtomicLong.getAndAdd:(J)J
      20: pop2
      21: aload_0
      22: getfield      #42                 // Field total:Ljava/util/concurrent/atomic/AtomicLong;
      25: lload         4
      27: invokevirtual #68                 // Method java/util/concurrent/atomic/AtomicLong.getAndAdd:(J)J
      30: pop2
      31: aload_0
      32: getfield      #49                 // Field max:Lio/micrometer/core/instrument/distribution/TimeWindowMax;
      35: lload         4
      37: l2d
      38: getstatic     #58                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      41: invokevirtual #72                 // Method io/micrometer/core/instrument/distribution/TimeWindowMax.record:(DLjava/util/concurrent/TimeUnit;)V
      44: return

  public long count();
    Code:
       0: aload_0
       1: getfield      #40                 // Field count:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #80                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: lreturn

  public double totalTime(java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: getfield      #42                 // Field total:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #80                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: l2d
       8: aload_1
       9: invokestatic  #86                 // Method io/micrometer/core/instrument/util/TimeUtils.nanosToUnit:(DLjava/util/concurrent/TimeUnit;)D
      12: dreturn

  public double max(java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: getfield      #49                 // Field max:Lio/micrometer/core/instrument/distribution/TimeWindowMax;
       4: aload_1
       5: invokevirtual #89                 // Method io/micrometer/core/instrument/distribution/TimeWindowMax.poll:(Ljava/util/concurrent/TimeUnit;)D
       8: dreturn
}
