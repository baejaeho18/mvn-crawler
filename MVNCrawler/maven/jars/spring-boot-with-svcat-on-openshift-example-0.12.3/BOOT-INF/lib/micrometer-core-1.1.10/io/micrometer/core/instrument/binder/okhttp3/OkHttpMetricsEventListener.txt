Compiled from "OkHttpMetricsEventListener.java"
public class io.micrometer.core.instrument.binder.okhttp3.OkHttpMetricsEventListener extends okhttp3.EventListener {
  public static final java.lang.String URI_PATTERN;

  private final io.micrometer.core.instrument.MeterRegistry registry;

  private final java.lang.String requestsMetricName;

  private final java.util.function.Function<okhttp3.Request, java.lang.String> urlMapper;

  private final java.lang.Iterable<io.micrometer.core.instrument.Tag> extraTags;

  private final java.util.concurrent.ConcurrentMap<okhttp3.Call, io.micrometer.core.instrument.binder.okhttp3.OkHttpMetricsEventListener$CallState> callState;

  io.micrometer.core.instrument.binder.okhttp3.OkHttpMetricsEventListener(io.micrometer.core.instrument.MeterRegistry, java.lang.String, java.util.function.Function<okhttp3.Request, java.lang.String>, java.lang.Iterable<io.micrometer.core.instrument.Tag>);
    Code:
       0: aload_0
       1: invokespecial #48                 // Method okhttp3/EventListener."<init>":()V
       4: aload_0
       5: new           #50                 // class java/util/concurrent/ConcurrentHashMap
       8: dup
       9: invokespecial #51                 // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      12: putfield      #53                 // Field callState:Ljava/util/concurrent/ConcurrentMap;
      15: aload_0
      16: aload_1
      17: putfield      #55                 // Field registry:Lio/micrometer/core/instrument/MeterRegistry;
      20: aload_0
      21: aload_2
      22: putfield      #57                 // Field requestsMetricName:Ljava/lang/String;
      25: aload_0
      26: aload_3
      27: putfield      #59                 // Field urlMapper:Ljava/util/function/Function;
      30: aload_0
      31: aload         4
      33: putfield      #61                 // Field extraTags:Ljava/lang/Iterable;
      36: return

  public static io.micrometer.core.instrument.binder.okhttp3.OkHttpMetricsEventListener$Builder builder(io.micrometer.core.instrument.MeterRegistry, java.lang.String);
    Code:
       0: new           #9                  // class io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener$Builder
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #68                 // Method io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener$Builder."<init>":(Lio/micrometer/core/instrument/MeterRegistry;Ljava/lang/String;)V
       9: areturn

  public void callStart(okhttp3.Call);
    Code:
       0: aload_0
       1: getfield      #53                 // Field callState:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: new           #12                 // class io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener$CallState
       8: dup
       9: aload_0
      10: getfield      #55                 // Field registry:Lio/micrometer/core/instrument/MeterRegistry;
      13: invokevirtual #75                 // Method io/micrometer/core/instrument/MeterRegistry.config:()Lio/micrometer/core/instrument/MeterRegistry$Config;
      16: invokevirtual #79                 // Method io/micrometer/core/instrument/MeterRegistry$Config.clock:()Lio/micrometer/core/instrument/Clock;
      19: invokeinterface #85,  1           // InterfaceMethod io/micrometer/core/instrument/Clock.monotonicTime:()J
      24: invokespecial #88                 // Method io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener$CallState."<init>":(J)V
      27: invokeinterface #94,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      32: pop
      33: return

  public void requestHeadersEnd(okhttp3.Call, okhttp3.Request);
    Code:
       0: aload_0
       1: getfield      #53                 // Field callState:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: aload_2
       6: invokedynamic #117,  0            // InvokeDynamic #0:apply:(Lokhttp3/Request;)Ljava/util/function/BiFunction;
      11: invokeinterface #121,  3          // InterfaceMethod java/util/concurrent/ConcurrentMap.computeIfPresent:(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;
      16: pop
      17: return

  public void callFailed(okhttp3.Call, java.io.IOException);
    Code:
       0: aload_0
       1: getfield      #53                 // Field callState:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: invokeinterface #129,  2          // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #12                 // class io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener$CallState
      13: astore_3
      14: aload_3
      15: ifnull        28
      18: aload_3
      19: aload_2
      20: putfield      #133                // Field io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener$CallState.exception:Ljava/io/IOException;
      23: aload_0
      24: aload_3
      25: invokespecial #137                // Method time:(Lio/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener$CallState;)V
      28: return

  public void responseHeadersEnd(okhttp3.Call, okhttp3.Response);
    Code:
       0: aload_0
       1: getfield      #53                 // Field callState:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: invokeinterface #129,  2          // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #12                 // class io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener$CallState
      13: astore_3
      14: aload_3
      15: ifnull        28
      18: aload_3
      19: aload_2
      20: putfield      #146                // Field io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener$CallState.response:Lokhttp3/Response;
      23: aload_0
      24: aload_3
      25: invokespecial #137                // Method time:(Lio/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener$CallState;)V
      28: return

  private void time(io.micrometer.core.instrument.binder.okhttp3.OkHttpMetricsEventListener$CallState);
    Code:
       0: aload_1
       1: getfield      #146                // Field io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener$CallState.response:Lokhttp3/Response;
       4: ifnonnull     12
       7: ldc           #148                // String UNKNOWN
       9: goto          59
      12: aload_1
      13: getfield      #146                // Field io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener$CallState.response:Lokhttp3/Response;
      16: invokevirtual #154                // Method okhttp3/Response.code:()I
      19: sipush        404
      22: if_icmpeq     38
      25: aload_1
      26: getfield      #146                // Field io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener$CallState.response:Lokhttp3/Response;
      29: invokevirtual #154                // Method okhttp3/Response.code:()I
      32: sipush        301
      35: if_icmpne     43
      38: ldc           #156                // String NOT_FOUND
      40: goto          59
      43: aload_0
      44: getfield      #59                 // Field urlMapper:Ljava/util/function/Function;
      47: aload_1
      48: getfield      #158                // Field io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener$CallState.request:Lokhttp3/Request;
      51: invokeinterface #162,  2          // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      56: checkcast     #164                // class java/lang/String
      59: astore_2
      60: aload_0
      61: getfield      #61                 // Field extraTags:Ljava/lang/Iterable;
      64: bipush        8
      66: anewarray     #164                // class java/lang/String
      69: dup
      70: iconst_0
      71: ldc           #166                // String method
      73: aastore
      74: dup
      75: iconst_1
      76: aload_1
      77: getfield      #158                // Field io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener$CallState.request:Lokhttp3/Request;
      80: ifnull        93
      83: aload_1
      84: getfield      #158                // Field io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener$CallState.request:Lokhttp3/Request;
      87: invokevirtual #171                // Method okhttp3/Request.method:()Ljava/lang/String;
      90: goto          95
      93: ldc           #148                // String UNKNOWN
      95: aastore
      96: dup
      97: iconst_2
      98: ldc           #177                // String uri
     100: aastore
     101: dup
     102: iconst_3
     103: aload_2
     104: aastore
     105: dup
     106: iconst_4
     107: ldc           #179                // String status
     109: aastore
     110: dup
     111: iconst_5
     112: aload_0
     113: aload_1
     114: getfield      #146                // Field io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener$CallState.response:Lokhttp3/Response;
     117: aload_1
     118: getfield      #133                // Field io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener$CallState.exception:Ljava/io/IOException;
     121: invokespecial #183                // Method getStatusMessage:(Lokhttp3/Response;Ljava/io/IOException;)Ljava/lang/String;
     124: aastore
     125: dup
     126: bipush        6
     128: ldc           #185                // String host
     130: aastore
     131: dup
     132: bipush        7
     134: aload_1
     135: getfield      #158                // Field io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener$CallState.request:Lokhttp3/Request;
     138: ifnull        154
     141: aload_1
     142: getfield      #158                // Field io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener$CallState.request:Lokhttp3/Request;
     145: invokevirtual #189                // Method okhttp3/Request.url:()Lokhttp3/HttpUrl;
     148: invokevirtual #193                // Method okhttp3/HttpUrl.host:()Ljava/lang/String;
     151: goto          156
     154: ldc           #148                // String UNKNOWN
     156: aastore
     157: invokestatic  #199                // Method io/micrometer/core/instrument/Tags.of:([Ljava/lang/String;)Lio/micrometer/core/instrument/Tags;
     160: invokestatic  #203                // Method io/micrometer/core/instrument/Tags.concat:(Ljava/lang/Iterable;Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Tags;
     163: astore_3
     164: aload_0
     165: getfield      #57                 // Field requestsMetricName:Ljava/lang/String;
     168: invokestatic  #206                // InterfaceMethod io/micrometer/core/instrument/Timer.builder:(Ljava/lang/String;)Lio/micrometer/core/instrument/Timer$Builder;
     171: aload_3
     172: invokevirtual #210                // Method io/micrometer/core/instrument/Timer$Builder.tags:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Timer$Builder;
     175: ldc           #212                // String Timer of OkHttp operation
     177: invokevirtual #215                // Method io/micrometer/core/instrument/Timer$Builder.description:(Ljava/lang/String;)Lio/micrometer/core/instrument/Timer$Builder;
     180: aload_0
     181: getfield      #55                 // Field registry:Lio/micrometer/core/instrument/MeterRegistry;
     184: invokevirtual #219                // Method io/micrometer/core/instrument/Timer$Builder.register:(Lio/micrometer/core/instrument/MeterRegistry;)Lio/micrometer/core/instrument/Timer;
     187: aload_0
     188: getfield      #55                 // Field registry:Lio/micrometer/core/instrument/MeterRegistry;
     191: invokevirtual #75                 // Method io/micrometer/core/instrument/MeterRegistry.config:()Lio/micrometer/core/instrument/MeterRegistry$Config;
     194: invokevirtual #79                 // Method io/micrometer/core/instrument/MeterRegistry$Config.clock:()Lio/micrometer/core/instrument/Clock;
     197: invokeinterface #85,  1           // InterfaceMethod io/micrometer/core/instrument/Clock.monotonicTime:()J
     202: aload_1
     203: getfield      #223                // Field io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener$CallState.startTime:J
     206: lsub
     207: getstatic     #229                // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
     210: invokeinterface #233,  4          // InterfaceMethod io/micrometer/core/instrument/Timer.record:(JLjava/util/concurrent/TimeUnit;)V
     215: return

  private java.lang.String getStatusMessage(okhttp3.Response, java.io.IOException);
    Code:
       0: aload_2
       1: ifnull        7
       4: ldc           #236                // String IO_ERROR
       6: areturn
       7: aload_1
       8: ifnonnull     14
      11: ldc           #238                // String CLIENT_ERROR
      13: areturn
      14: aload_1
      15: invokevirtual #154                // Method okhttp3/Response.code:()I
      18: invokestatic  #244                // Method java/lang/Integer.toString:(I)Ljava/lang/String;
      21: areturn

  private static io.micrometer.core.instrument.binder.okhttp3.OkHttpMetricsEventListener$CallState lambda$requestHeadersEnd$0(okhttp3.Request, okhttp3.Call, io.micrometer.core.instrument.binder.okhttp3.OkHttpMetricsEventListener$CallState);
    Code:
       0: aload_2
       1: aload_0
       2: putfield      #158                // Field io/micrometer/core/instrument/binder/okhttp3/OkHttpMetricsEventListener$CallState.request:Lokhttp3/Request;
       5: aload_2
       6: areturn
}
