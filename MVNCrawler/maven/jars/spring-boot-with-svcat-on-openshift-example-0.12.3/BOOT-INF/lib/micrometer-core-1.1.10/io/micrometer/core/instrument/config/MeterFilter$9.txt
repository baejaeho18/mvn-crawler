Compiled from "MeterFilter.java"
final class io.micrometer.core.instrument.config.MeterFilter$9 implements io.micrometer.core.instrument.config.MeterFilter {
  private final java.util.Set<java.lang.String> observedTagValues;

  final int val$maximumTagValues;

  final io.micrometer.core.instrument.config.MeterFilter val$onMaxReached;

  final java.lang.String val$meterNamePrefix;

  final java.lang.String val$tagKey;

  io.micrometer.core.instrument.config.MeterFilter$9(int, io.micrometer.core.instrument.config.MeterFilter, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #34                 // Field val$maximumTagValues:I
       5: aload_0
       6: aload_2
       7: putfield      #36                 // Field val$onMaxReached:Lio/micrometer/core/instrument/config/MeterFilter;
      10: aload_0
      11: aload_3
      12: putfield      #38                 // Field val$meterNamePrefix:Ljava/lang/String;
      15: aload_0
      16: aload         4
      18: putfield      #40                 // Field val$tagKey:Ljava/lang/String;
      21: aload_0
      22: invokespecial #43                 // Method java/lang/Object."<init>":()V
      25: aload_0
      26: invokestatic  #47                 // Method java/util/concurrent/ConcurrentHashMap.newKeySet:()Ljava/util/concurrent/ConcurrentHashMap$KeySetView;
      29: putfield      #49                 // Field observedTagValues:Ljava/util/Set;
      32: return

  public io.micrometer.core.instrument.config.MeterFilterReply accept(io.micrometer.core.instrument.Meter$Id);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #57                 // Method matchNameAndGetTagValue:(Lio/micrometer/core/instrument/Meter$Id;)Ljava/lang/String;
       5: astore_2
       6: aload_2
       7: ifnull        61
      10: aload_0
      11: getfield      #49                 // Field observedTagValues:Ljava/util/Set;
      14: aload_2
      15: invokeinterface #63,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      20: ifne          61
      23: aload_0
      24: getfield      #49                 // Field observedTagValues:Ljava/util/Set;
      27: invokeinterface #67,  1           // InterfaceMethod java/util/Set.size:()I
      32: aload_0
      33: getfield      #34                 // Field val$maximumTagValues:I
      36: if_icmplt     50
      39: aload_0
      40: getfield      #36                 // Field val$onMaxReached:Lio/micrometer/core/instrument/config/MeterFilter;
      43: aload_1
      44: invokeinterface #69,  2           // InterfaceMethod io/micrometer/core/instrument/config/MeterFilter.accept:(Lio/micrometer/core/instrument/Meter$Id;)Lio/micrometer/core/instrument/config/MeterFilterReply;
      49: areturn
      50: aload_0
      51: getfield      #49                 // Field observedTagValues:Ljava/util/Set;
      54: aload_2
      55: invokeinterface #74,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      60: pop
      61: getstatic     #80                 // Field io/micrometer/core/instrument/config/MeterFilterReply.NEUTRAL:Lio/micrometer/core/instrument/config/MeterFilterReply;
      64: areturn

  private java.lang.String matchNameAndGetTagValue(io.micrometer.core.instrument.Meter$Id);
    Code:
       0: aload_1
       1: invokevirtual #88                 // Method io/micrometer/core/instrument/Meter$Id.getName:()Ljava/lang/String;
       4: aload_0
       5: getfield      #38                 // Field val$meterNamePrefix:Ljava/lang/String;
       8: invokevirtual #92                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      11: ifeq          25
      14: aload_1
      15: aload_0
      16: getfield      #40                 // Field val$tagKey:Ljava/lang/String;
      19: invokevirtual #96                 // Method io/micrometer/core/instrument/Meter$Id.getTag:(Ljava/lang/String;)Ljava/lang/String;
      22: goto          26
      25: aconst_null
      26: areturn

  public io.micrometer.core.instrument.distribution.DistributionStatisticConfig configure(io.micrometer.core.instrument.Meter$Id, io.micrometer.core.instrument.distribution.DistributionStatisticConfig);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #57                 // Method matchNameAndGetTagValue:(Lio/micrometer/core/instrument/Meter$Id;)Ljava/lang/String;
       5: astore_3
       6: aload_3
       7: ifnull        51
      10: aload_0
      11: getfield      #49                 // Field observedTagValues:Ljava/util/Set;
      14: aload_3
      15: invokeinterface #63,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      20: ifne          51
      23: aload_0
      24: getfield      #49                 // Field observedTagValues:Ljava/util/Set;
      27: invokeinterface #67,  1           // InterfaceMethod java/util/Set.size:()I
      32: aload_0
      33: getfield      #34                 // Field val$maximumTagValues:I
      36: if_icmplt     51
      39: aload_0
      40: getfield      #36                 // Field val$onMaxReached:Lio/micrometer/core/instrument/config/MeterFilter;
      43: aload_1
      44: aload_2
      45: invokeinterface #100,  3          // InterfaceMethod io/micrometer/core/instrument/config/MeterFilter.configure:(Lio/micrometer/core/instrument/Meter$Id;Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
      50: areturn
      51: aload_2
      52: areturn
}
