Compiled from "DistributionSummary.java"
public class io.micrometer.core.instrument.DistributionSummary$Builder {
  private final java.lang.String name;

  private io.micrometer.core.instrument.Tags tags;

  private io.micrometer.core.instrument.distribution.DistributionStatisticConfig$Builder distributionConfigBuilder;

  private java.lang.String description;

  private java.lang.String baseUnit;

  private double scale;

  private io.micrometer.core.instrument.DistributionSummary$Builder(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #38                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #44                 // Method io/micrometer/core/instrument/Tags.empty:()Lio/micrometer/core/instrument/Tags;
       8: putfield      #46                 // Field tags:Lio/micrometer/core/instrument/Tags;
      11: aload_0
      12: invokestatic  #50                 // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig.builder:()Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
      15: putfield      #52                 // Field distributionConfigBuilder:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
      18: aload_0
      19: dconst_1
      20: putfield      #54                 // Field scale:D
      23: aload_0
      24: aload_1
      25: putfield      #56                 // Field name:Ljava/lang/String;
      28: return

  public io.micrometer.core.instrument.DistributionSummary$Builder tags(java.lang.String...);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #63                 // Method io/micrometer/core/instrument/Tags.of:([Ljava/lang/String;)Lio/micrometer/core/instrument/Tags;
       5: invokevirtual #66                 // Method tags:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/DistributionSummary$Builder;
       8: areturn

  public io.micrometer.core.instrument.DistributionSummary$Builder tags(java.lang.Iterable<io.micrometer.core.instrument.Tag>);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #46                 // Field tags:Lio/micrometer/core/instrument/Tags;
       5: aload_1
       6: invokevirtual #72                 // Method io/micrometer/core/instrument/Tags.and:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Tags;
       9: putfield      #46                 // Field tags:Lio/micrometer/core/instrument/Tags;
      12: aload_0
      13: areturn

  public io.micrometer.core.instrument.DistributionSummary$Builder tag(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #46                 // Field tags:Lio/micrometer/core/instrument/Tags;
       5: aload_1
       6: aload_2
       7: invokevirtual #79                 // Method io/micrometer/core/instrument/Tags.and:(Ljava/lang/String;Ljava/lang/String;)Lio/micrometer/core/instrument/Tags;
      10: putfield      #46                 // Field tags:Lio/micrometer/core/instrument/Tags;
      13: aload_0
      14: areturn

  public io.micrometer.core.instrument.DistributionSummary$Builder description(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #84                 // Field description:Ljava/lang/String;
       5: aload_0
       6: areturn

  public io.micrometer.core.instrument.DistributionSummary$Builder baseUnit(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #86                 // Field baseUnit:Ljava/lang/String;
       5: aload_0
       6: areturn

  public io.micrometer.core.instrument.DistributionSummary$Builder publishPercentiles(double...);
    Code:
       0: aload_0
       1: getfield      #52                 // Field distributionConfigBuilder:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       4: aload_1
       5: invokevirtual #93                 // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder.percentiles:([D)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       8: pop
       9: aload_0
      10: areturn

  public io.micrometer.core.instrument.DistributionSummary$Builder percentilePrecision(java.lang.Integer);
    Code:
       0: aload_0
       1: getfield      #52                 // Field distributionConfigBuilder:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       4: aload_1
       5: invokevirtual #99                 // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder.percentilePrecision:(Ljava/lang/Integer;)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       8: pop
       9: aload_0
      10: areturn

  public io.micrometer.core.instrument.DistributionSummary$Builder publishPercentileHistogram();
    Code:
       0: aload_0
       1: iconst_1
       2: invokestatic  #109                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       5: invokevirtual #112                // Method publishPercentileHistogram:(Ljava/lang/Boolean;)Lio/micrometer/core/instrument/DistributionSummary$Builder;
       8: areturn

  public io.micrometer.core.instrument.DistributionSummary$Builder publishPercentileHistogram(java.lang.Boolean);
    Code:
       0: aload_0
       1: getfield      #52                 // Field distributionConfigBuilder:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       4: aload_1
       5: invokevirtual #116                // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder.percentilesHistogram:(Ljava/lang/Boolean;)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       8: pop
       9: aload_0
      10: areturn

  public io.micrometer.core.instrument.DistributionSummary$Builder sla(long...);
    Code:
       0: aload_0
       1: getfield      #52                 // Field distributionConfigBuilder:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       4: aload_1
       5: invokevirtual #123                // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder.sla:([J)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       8: pop
       9: aload_0
      10: areturn

  public io.micrometer.core.instrument.DistributionSummary$Builder minimumExpectedValue(java.lang.Long);
    Code:
       0: aload_0
       1: getfield      #52                 // Field distributionConfigBuilder:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       4: aload_1
       5: invokevirtual #129                // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder.minimumExpectedValue:(Ljava/lang/Long;)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       8: pop
       9: aload_0
      10: areturn

  public io.micrometer.core.instrument.DistributionSummary$Builder maximumExpectedValue(java.lang.Long);
    Code:
       0: aload_0
       1: getfield      #52                 // Field distributionConfigBuilder:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       4: aload_1
       5: invokevirtual #134                // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder.maximumExpectedValue:(Ljava/lang/Long;)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       8: pop
       9: aload_0
      10: areturn

  public io.micrometer.core.instrument.DistributionSummary$Builder distributionStatisticExpiry(java.time.Duration);
    Code:
       0: aload_0
       1: getfield      #52                 // Field distributionConfigBuilder:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       4: aload_1
       5: invokevirtual #141                // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder.expiry:(Ljava/time/Duration;)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       8: pop
       9: aload_0
      10: areturn

  public io.micrometer.core.instrument.DistributionSummary$Builder distributionStatisticBufferLength(java.lang.Integer);
    Code:
       0: aload_0
       1: getfield      #52                 // Field distributionConfigBuilder:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       4: aload_1
       5: invokevirtual #146                // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder.bufferLength:(Ljava/lang/Integer;)Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
       8: pop
       9: aload_0
      10: areturn

  public io.micrometer.core.instrument.DistributionSummary$Builder scale(double);
    Code:
       0: aload_0
       1: dload_1
       2: putfield      #54                 // Field scale:D
       5: aload_0
       6: areturn

  public io.micrometer.core.instrument.DistributionSummary register(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_1
       1: new           #16                 // class io/micrometer/core/instrument/Meter$Id
       4: dup
       5: aload_0
       6: getfield      #56                 // Field name:Ljava/lang/String;
       9: aload_0
      10: getfield      #46                 // Field tags:Lio/micrometer/core/instrument/Tags;
      13: aload_0
      14: getfield      #86                 // Field baseUnit:Ljava/lang/String;
      17: aload_0
      18: getfield      #84                 // Field description:Ljava/lang/String;
      21: getstatic     #153                // Field io/micrometer/core/instrument/Meter$Type.DISTRIBUTION_SUMMARY:Lio/micrometer/core/instrument/Meter$Type;
      24: invokespecial #156                // Method io/micrometer/core/instrument/Meter$Id."<init>":(Ljava/lang/String;Lio/micrometer/core/instrument/Tags;Ljava/lang/String;Ljava/lang/String;Lio/micrometer/core/instrument/Meter$Type;)V
      27: aload_0
      28: getfield      #52                 // Field distributionConfigBuilder:Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder;
      31: invokevirtual #160                // Method io/micrometer/core/instrument/distribution/DistributionStatisticConfig$Builder.build:()Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;
      34: aload_0
      35: getfield      #54                 // Field scale:D
      38: invokevirtual #166                // Method io/micrometer/core/instrument/MeterRegistry.summary:(Lio/micrometer/core/instrument/Meter$Id;Lio/micrometer/core/instrument/distribution/DistributionStatisticConfig;D)Lio/micrometer/core/instrument/DistributionSummary;
      41: areturn

  io.micrometer.core.instrument.DistributionSummary$Builder(java.lang.String, io.micrometer.core.instrument.DistributionSummary$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #171                // Method "<init>":(Ljava/lang/String;)V
       5: return
}
