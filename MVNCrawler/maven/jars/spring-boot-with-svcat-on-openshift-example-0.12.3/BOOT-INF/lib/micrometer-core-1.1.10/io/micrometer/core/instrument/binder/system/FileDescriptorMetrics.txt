Compiled from "FileDescriptorMetrics.java"
public class io.micrometer.core.instrument.binder.system.FileDescriptorMetrics implements io.micrometer.core.instrument.binder.MeterBinder {
  private static final java.util.List<java.lang.String> UNIX_OPERATING_SYSTEM_BEAN_CLASS_NAMES;

  private final java.lang.management.OperatingSystemMXBean osBean;

  private final java.lang.Iterable<io.micrometer.core.instrument.Tag> tags;

  private final java.lang.Class<?> osBeanClass;

  private final java.lang.reflect.Method openFilesMethod;

  private final java.lang.reflect.Method maxFilesMethod;

  public io.micrometer.core.instrument.binder.system.FileDescriptorMetrics();
    Code:
       0: aload_0
       1: invokestatic  #42                 // Method java/util/Collections.emptyList:()Ljava/util/List;
       4: invokespecial #45                 // Method "<init>":(Ljava/lang/Iterable;)V
       7: return

  public io.micrometer.core.instrument.binder.system.FileDescriptorMetrics(java.lang.Iterable<io.micrometer.core.instrument.Tag>);
    Code:
       0: aload_0
       1: invokestatic  #54                 // Method java/lang/management/ManagementFactory.getOperatingSystemMXBean:()Ljava/lang/management/OperatingSystemMXBean;
       4: aload_1
       5: invokespecial #57                 // Method "<init>":(Ljava/lang/management/OperatingSystemMXBean;Ljava/lang/Iterable;)V
       8: return

  io.micrometer.core.instrument.binder.system.FileDescriptorMetrics(java.lang.management.OperatingSystemMXBean, java.lang.Iterable<io.micrometer.core.instrument.Tag>);
    Code:
       0: aload_0
       1: invokespecial #60                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #62                 // Field osBean:Ljava/lang/management/OperatingSystemMXBean;
       9: aload_0
      10: aload_2
      11: putfield      #64                 // Field tags:Ljava/lang/Iterable;
      14: aload_0
      15: aload_0
      16: getstatic     #66                 // Field UNIX_OPERATING_SYSTEM_BEAN_CLASS_NAMES:Ljava/util/List;
      19: invokespecial #70                 // Method getFirstClassFound:(Ljava/util/List;)Ljava/lang/Class;
      22: putfield      #72                 // Field osBeanClass:Ljava/lang/Class;
      25: aload_0
      26: aload_0
      27: ldc           #74                 // String getOpenFileDescriptorCount
      29: invokespecial #78                 // Method detectMethod:(Ljava/lang/String;)Ljava/lang/reflect/Method;
      32: putfield      #80                 // Field openFilesMethod:Ljava/lang/reflect/Method;
      35: aload_0
      36: aload_0
      37: ldc           #82                 // String getMaxFileDescriptorCount
      39: invokespecial #78                 // Method detectMethod:(Ljava/lang/String;)Ljava/lang/reflect/Method;
      42: putfield      #84                 // Field maxFilesMethod:Ljava/lang/reflect/Method;
      45: return

  public void bindTo(io.micrometer.core.instrument.MeterRegistry);
    Code:
       0: aload_0
       1: getfield      #80                 // Field openFilesMethod:Ljava/lang/reflect/Method;
       4: ifnull        44
       7: ldc           #88                 // String process.files.open
       9: aload_0
      10: getfield      #62                 // Field osBean:Ljava/lang/management/OperatingSystemMXBean;
      13: aload_0
      14: invokedynamic #107,  0            // InvokeDynamic #0:applyAsDouble:(Lio/micrometer/core/instrument/binder/system/FileDescriptorMetrics;)Ljava/util/function/ToDoubleFunction;
      19: invokestatic  #111                // InterfaceMethod io/micrometer/core/instrument/Gauge.builder:(Ljava/lang/String;Ljava/lang/Object;Ljava/util/function/ToDoubleFunction;)Lio/micrometer/core/instrument/Gauge$Builder;
      22: aload_0
      23: getfield      #64                 // Field tags:Ljava/lang/Iterable;
      26: invokevirtual #114                // Method io/micrometer/core/instrument/Gauge$Builder.tags:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Gauge$Builder;
      29: ldc           #116                // String The open file descriptor count
      31: invokevirtual #120                // Method io/micrometer/core/instrument/Gauge$Builder.description:(Ljava/lang/String;)Lio/micrometer/core/instrument/Gauge$Builder;
      34: ldc           #122                // String files
      36: invokevirtual #125                // Method io/micrometer/core/instrument/Gauge$Builder.baseUnit:(Ljava/lang/String;)Lio/micrometer/core/instrument/Gauge$Builder;
      39: aload_1
      40: invokevirtual #129                // Method io/micrometer/core/instrument/Gauge$Builder.register:(Lio/micrometer/core/instrument/MeterRegistry;)Lio/micrometer/core/instrument/Gauge;
      43: pop
      44: aload_0
      45: getfield      #84                 // Field maxFilesMethod:Ljava/lang/reflect/Method;
      48: ifnull        88
      51: ldc           #131                // String process.files.max
      53: aload_0
      54: getfield      #62                 // Field osBean:Ljava/lang/management/OperatingSystemMXBean;
      57: aload_0
      58: invokedynamic #136,  0            // InvokeDynamic #1:applyAsDouble:(Lio/micrometer/core/instrument/binder/system/FileDescriptorMetrics;)Ljava/util/function/ToDoubleFunction;
      63: invokestatic  #111                // InterfaceMethod io/micrometer/core/instrument/Gauge.builder:(Ljava/lang/String;Ljava/lang/Object;Ljava/util/function/ToDoubleFunction;)Lio/micrometer/core/instrument/Gauge$Builder;
      66: aload_0
      67: getfield      #64                 // Field tags:Ljava/lang/Iterable;
      70: invokevirtual #114                // Method io/micrometer/core/instrument/Gauge$Builder.tags:(Ljava/lang/Iterable;)Lio/micrometer/core/instrument/Gauge$Builder;
      73: ldc           #138                // String The maximum file descriptor count
      75: invokevirtual #120                // Method io/micrometer/core/instrument/Gauge$Builder.description:(Ljava/lang/String;)Lio/micrometer/core/instrument/Gauge$Builder;
      78: ldc           #122                // String files
      80: invokevirtual #125                // Method io/micrometer/core/instrument/Gauge$Builder.baseUnit:(Ljava/lang/String;)Lio/micrometer/core/instrument/Gauge$Builder;
      83: aload_1
      84: invokevirtual #129                // Method io/micrometer/core/instrument/Gauge$Builder.register:(Lio/micrometer/core/instrument/MeterRegistry;)Lio/micrometer/core/instrument/Gauge;
      87: pop
      88: return

  private double invoke(java.lang.reflect.Method);
    Code:
       0: aload_1
       1: ifnull        26
       4: aload_1
       5: aload_0
       6: getfield      #62                 // Field osBean:Ljava/lang/management/OperatingSystemMXBean;
       9: iconst_0
      10: anewarray     #4                  // class java/lang/Object
      13: invokevirtual #153                // Method java/lang/reflect/Method.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;
      16: checkcast     #155                // class java/lang/Long
      19: invokevirtual #159                // Method java/lang/Long.longValue:()J
      22: l2d
      23: goto          29
      26: ldc2_w        #160                // double NaNd
      29: dreturn
      30: astore_2
      31: ldc2_w        #160                // double NaNd
      34: dreturn
    Exception table:
       from    to  target type
           0    29    30   Class java/lang/IllegalAccessException
           0    29    30   Class java/lang/IllegalArgumentException
           0    29    30   Class java/lang/reflect/InvocationTargetException

  private java.lang.reflect.Method detectMethod(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #72                 // Field osBeanClass:Ljava/lang/Class;
       4: ifnonnull     9
       7: aconst_null
       8: areturn
       9: aload_0
      10: getfield      #72                 // Field osBeanClass:Ljava/lang/Class;
      13: aload_0
      14: getfield      #62                 // Field osBean:Ljava/lang/management/OperatingSystemMXBean;
      17: invokevirtual #178                // Method java/lang/Class.cast:(Ljava/lang/Object;)Ljava/lang/Object;
      20: pop
      21: aload_0
      22: getfield      #72                 // Field osBeanClass:Ljava/lang/Class;
      25: aload_1
      26: iconst_0
      27: anewarray     #174                // class java/lang/Class
      30: invokevirtual #182                // Method java/lang/Class.getDeclaredMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
      33: areturn
      34: astore_2
      35: aconst_null
      36: areturn
    Exception table:
       from    to  target type
           9    33    34   Class java/lang/ClassCastException
           9    33    34   Class java/lang/NoSuchMethodException
           9    33    34   Class java/lang/SecurityException

  private java.lang.Class<?> getFirstClassFound(java.util.List<java.lang.String>);
    Code:
       0: aload_1
       1: invokeinterface #193,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       6: astore_2
       7: aload_2
       8: invokeinterface #199,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      13: ifeq          36
      16: aload_2
      17: invokeinterface #203,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      22: checkcast     #205                // class java/lang/String
      25: astore_3
      26: aload_3
      27: invokestatic  #209                // Method java/lang/Class.forName:(Ljava/lang/String;)Ljava/lang/Class;
      30: areturn
      31: astore        4
      33: goto          7
      36: aconst_null
      37: areturn
    Exception table:
       from    to  target type
          26    30    31   Class java/lang/ClassNotFoundException

  private double lambda$bindTo$1(java.lang.management.OperatingSystemMXBean);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #84                 // Field maxFilesMethod:Ljava/lang/reflect/Method;
       5: invokespecial #213                // Method invoke:(Ljava/lang/reflect/Method;)D
       8: dreturn

  private double lambda$bindTo$0(java.lang.management.OperatingSystemMXBean);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #80                 // Field openFilesMethod:Ljava/lang/reflect/Method;
       5: invokespecial #213                // Method invoke:(Ljava/lang/reflect/Method;)D
       8: dreturn

  static {};
    Code:
       0: iconst_2
       1: anewarray     #205                // class java/lang/String
       4: dup
       5: iconst_0
       6: ldc           #217                // String com.sun.management.UnixOperatingSystemMXBean
       8: aastore
       9: dup
      10: iconst_1
      11: ldc           #219                // String com.ibm.lang.management.UnixOperatingSystemMXBean
      13: aastore
      14: invokestatic  #225                // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      17: putstatic     #66                 // Field UNIX_OPERATING_SYSTEM_BEAN_CLASS_NAMES:Ljava/util/List;
      20: return
}
