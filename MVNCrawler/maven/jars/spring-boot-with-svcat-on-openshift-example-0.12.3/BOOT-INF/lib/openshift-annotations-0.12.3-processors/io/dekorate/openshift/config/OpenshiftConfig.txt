Compiled from "OpenshiftConfig.java"
public class io.dekorate.openshift.config.OpenshiftConfig extends io.dekorate.kubernetes.config.BaseConfig {
  private io.dekorate.kubernetes.config.Container[] initContainers;

  private int replicas;

  private boolean headless;

  public io.dekorate.openshift.config.OpenshiftConfig();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method io/dekorate/kubernetes/config/BaseConfig."<init>":()V
       4: aload_0
       5: iconst_0
       6: anewarray     #2                  // class io/dekorate/kubernetes/config/Container
       9: putfield      #3                  // Field initContainers:[Lio/dekorate/kubernetes/config/Container;
      12: aload_0
      13: iconst_1
      14: putfield      #4                  // Field replicas:I
      17: aload_0
      18: iconst_0
      19: putfield      #5                  // Field headless:Z
      22: return

  public io.dekorate.openshift.config.OpenshiftConfig(io.dekorate.project.Project, java.util.Map<io.dekorate.kubernetes.config.ConfigKey, java.lang.Object>, java.lang.String, java.lang.String, java.lang.String, io.dekorate.kubernetes.config.Label[], io.dekorate.kubernetes.config.Annotation[], io.dekorate.kubernetes.config.Env[], java.lang.String, java.lang.String[], java.lang.String[], java.lang.String, java.lang.String, io.dekorate.kubernetes.config.Port[], io.dekorate.kubernetes.annotation.ServiceType, io.dekorate.kubernetes.config.PersistentVolumeClaimVolume[], io.dekorate.kubernetes.config.SecretVolume[], io.dekorate.kubernetes.config.ConfigMapVolume[], io.dekorate.kubernetes.config.GitRepoVolume[], io.dekorate.kubernetes.config.AwsElasticBlockStoreVolume[], io.dekorate.kubernetes.config.AzureDiskVolume[], io.dekorate.kubernetes.config.AzureFileVolume[], io.dekorate.kubernetes.config.Mount[], io.dekorate.kubernetes.annotation.ImagePullPolicy, java.lang.String[], io.dekorate.kubernetes.config.Probe, io.dekorate.kubernetes.config.Probe, io.dekorate.kubernetes.config.Container[], boolean, boolean, io.dekorate.kubernetes.config.Container[], int, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: aload         7
      12: aload         8
      14: aload         9
      16: aload         10
      18: aload         11
      20: aload         12
      22: aload         13
      24: aload         14
      26: aload         15
      28: aload         16
      30: aload         17
      32: aload         18
      34: aload         19
      36: aload         20
      38: aload         21
      40: aload         22
      42: aload         23
      44: aload         24
      46: aload         25
      48: aload         26
      50: aload         27
      52: aload         28
      54: iload         29
      56: iload         30
      58: invokespecial #6                  // Method io/dekorate/kubernetes/config/BaseConfig."<init>":(Lio/dekorate/project/Project;Ljava/util/Map;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Lio/dekorate/kubernetes/config/Label;[Lio/dekorate/kubernetes/config/Annotation;[Lio/dekorate/kubernetes/config/Env;Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Lio/dekorate/kubernetes/config/Port;Lio/dekorate/kubernetes/annotation/ServiceType;[Lio/dekorate/kubernetes/config/PersistentVolumeClaimVolume;[Lio/dekorate/kubernetes/config/SecretVolume;[Lio/dekorate/kubernetes/config/ConfigMapVolume;[Lio/dekorate/kubernetes/config/GitRepoVolume;[Lio/dekorate/kubernetes/config/AwsElasticBlockStoreVolume;[Lio/dekorate/kubernetes/config/AzureDiskVolume;[Lio/dekorate/kubernetes/config/AzureFileVolume;[Lio/dekorate/kubernetes/config/Mount;Lio/dekorate/kubernetes/annotation/ImagePullPolicy;[Ljava/lang/String;Lio/dekorate/kubernetes/config/Probe;Lio/dekorate/kubernetes/config/Probe;[Lio/dekorate/kubernetes/config/Container;ZZ)V
      61: aload_0
      62: iconst_0
      63: anewarray     #2                  // class io/dekorate/kubernetes/config/Container
      66: putfield      #3                  // Field initContainers:[Lio/dekorate/kubernetes/config/Container;
      69: aload_0
      70: iconst_1
      71: putfield      #4                  // Field replicas:I
      74: aload_0
      75: iconst_0
      76: putfield      #5                  // Field headless:Z
      79: aload_0
      80: aload         31
      82: ifnull        90
      85: aload         31
      87: goto          94
      90: iconst_0
      91: anewarray     #2                  // class io/dekorate/kubernetes/config/Container
      94: putfield      #3                  // Field initContainers:[Lio/dekorate/kubernetes/config/Container;
      97: aload_0
      98: iload         32
     100: putfield      #4                  // Field replicas:I
     103: aload_0
     104: iload         33
     106: putfield      #5                  // Field headless:Z
     109: return

  public io.dekorate.kubernetes.config.Container[] getInitContainers();
    Code:
       0: aload_0
       1: getfield      #3                  // Field initContainers:[Lio/dekorate/kubernetes/config/Container;
       4: areturn

  public int getReplicas();
    Code:
       0: aload_0
       1: getfield      #4                  // Field replicas:I
       4: ireturn

  public boolean isHeadless();
    Code:
       0: aload_0
       1: getfield      #5                  // Field headless:Z
       4: ireturn

  public static io.dekorate.openshift.config.OpenshiftConfigBuilder newOpenshiftConfigBuilder();
    Code:
       0: new           #7                  // class io/dekorate/openshift/config/OpenshiftConfigBuilder
       3: dup
       4: invokespecial #8                  // Method io/dekorate/openshift/config/OpenshiftConfigBuilder."<init>":()V
       7: areturn
}
