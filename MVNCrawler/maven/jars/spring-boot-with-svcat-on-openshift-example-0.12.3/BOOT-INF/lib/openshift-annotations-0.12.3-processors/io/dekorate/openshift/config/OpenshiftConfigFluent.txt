Compiled from "OpenshiftConfigFluent.java"
public interface io.dekorate.openshift.config.OpenshiftConfigFluent<A extends io.dekorate.openshift.config.OpenshiftConfigFluent<A>> extends io.dekorate.kubernetes.config.BaseConfigFluent<A> {
  public abstract A withInitContainers(io.dekorate.kubernetes.config.Container...);

  public abstract io.dekorate.kubernetes.config.Container[] getInitContainers();

  public abstract io.dekorate.kubernetes.config.Container[] buildInitContainers();

  public abstract io.dekorate.kubernetes.config.Container buildInitContainer(int);

  public abstract io.dekorate.kubernetes.config.Container buildFirstInitContainer();

  public abstract io.dekorate.kubernetes.config.Container buildLastInitContainer();

  public abstract io.dekorate.kubernetes.config.Container buildMatchingInitContainer(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.ContainerBuilder>);

  public abstract java.lang.Boolean hasMatchingInitContainer(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.ContainerBuilder>);

  public abstract A addToInitContainers(int, io.dekorate.kubernetes.config.Container);

  public abstract A setToInitContainers(int, io.dekorate.kubernetes.config.Container);

  public abstract A addToInitContainers(io.dekorate.kubernetes.config.Container...);

  public abstract A addAllToConfigInitContainers(java.util.Collection<io.dekorate.kubernetes.config.Container>);

  public abstract A removeFromInitContainers(io.dekorate.kubernetes.config.Container...);

  public abstract A removeAllFromConfigInitContainers(java.util.Collection<io.dekorate.kubernetes.config.Container>);

  public abstract A removeMatchingFromConfigInitContainers(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.ContainerBuilder>);

  public abstract java.lang.Boolean hasInitContainers();

  public abstract io.dekorate.openshift.config.OpenshiftConfigFluent$ConfigInitContainersNested<A> addNewConfigInitContainer();

  public abstract io.dekorate.openshift.config.OpenshiftConfigFluent$ConfigInitContainersNested<A> addNewInitContainerLike(io.dekorate.kubernetes.config.Container);

  public abstract io.dekorate.openshift.config.OpenshiftConfigFluent$ConfigInitContainersNested<A> setNewInitContainerLike(int, io.dekorate.kubernetes.config.Container);

  public abstract io.dekorate.openshift.config.OpenshiftConfigFluent$ConfigInitContainersNested<A> editInitContainer(int);

  public abstract io.dekorate.openshift.config.OpenshiftConfigFluent$ConfigInitContainersNested<A> editFirstInitContainer();

  public abstract io.dekorate.openshift.config.OpenshiftConfigFluent$ConfigInitContainersNested<A> editLastInitContainer();

  public abstract io.dekorate.openshift.config.OpenshiftConfigFluent$ConfigInitContainersNested<A> editMatchingInitContainer(io.dekorate.deps.kubernetes.api.builder.Predicate<io.dekorate.kubernetes.config.ContainerBuilder>);

  public abstract int getReplicas();

  public abstract A withReplicas(int);

  public abstract java.lang.Boolean hasReplicas();

  public abstract boolean isHeadless();

  public abstract A withHeadless(boolean);

  public abstract java.lang.Boolean hasHeadless();
}
