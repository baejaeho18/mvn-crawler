Compiled from "SimpleQuery.java"
class org.postgresql.core.v3.SimpleQuery implements org.postgresql.core.v3.V3Query {
  private final org.postgresql.core.NativeQuery nativeQuery;

  private final org.postgresql.core.v3.ProtocolConnectionImpl protoConnection;

  private java.lang.String statementName;

  private byte[] encodedStatementName;

  private org.postgresql.core.Field[] fields;

  private boolean needUpdateFieldFormats;

  private boolean hasBinaryFields;

  private boolean portalDescribed;

  private boolean statementDescribed;

  private java.lang.ref.PhantomReference cleanupRef;

  private int[] preparedTypes;

  private java.lang.Integer cachedMaxResultRowSize;

  static final org.postgresql.core.v3.SimpleParameterList NO_PARAMETERS;

  org.postgresql.core.v3.SimpleQuery(org.postgresql.core.NativeQuery, org.postgresql.core.v3.ProtocolConnectionImpl);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field nativeQuery:Lorg/postgresql/core/NativeQuery;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field protoConnection:Lorg/postgresql/core/v3/ProtocolConnectionImpl;
      14: return

  public org.postgresql.core.ParameterList createParameterList();
    Code:
       0: aload_0
       1: getfield      #2                  // Field nativeQuery:Lorg/postgresql/core/NativeQuery;
       4: getfield      #4                  // Field org/postgresql/core/NativeQuery.bindPositions:[I
       7: arraylength
       8: ifne          15
      11: getstatic     #5                  // Field NO_PARAMETERS:Lorg/postgresql/core/v3/SimpleParameterList;
      14: areturn
      15: new           #6                  // class org/postgresql/core/v3/SimpleParameterList
      18: dup
      19: aload_0
      20: getfield      #2                  // Field nativeQuery:Lorg/postgresql/core/NativeQuery;
      23: getfield      #4                  // Field org/postgresql/core/NativeQuery.bindPositions:[I
      26: arraylength
      27: aload_0
      28: getfield      #3                  // Field protoConnection:Lorg/postgresql/core/v3/ProtocolConnectionImpl;
      31: invokespecial #7                  // Method org/postgresql/core/v3/SimpleParameterList."<init>":(ILorg/postgresql/core/v3/ProtocolConnectionImpl;)V
      34: areturn

  public java.lang.String toString(org.postgresql.core.ParameterList);
    Code:
       0: aload_0
       1: getfield      #2                  // Field nativeQuery:Lorg/postgresql/core/NativeQuery;
       4: aload_1
       5: invokevirtual #8                  // Method org/postgresql/core/NativeQuery.toString:(Lorg/postgresql/core/ParameterList;)Ljava/lang/String;
       8: areturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: aconst_null
       2: invokevirtual #9                  // Method toString:(Lorg/postgresql/core/ParameterList;)Ljava/lang/String;
       5: areturn

  public void close();
    Code:
       0: aload_0
       1: invokevirtual #10                 // Method unprepare:()V
       4: return

  public org.postgresql.core.v3.SimpleQuery[] getSubqueries();
    Code:
       0: aconst_null
       1: areturn

  public int getMaxResultRowSize();
    Code:
       0: aload_0
       1: getfield      #11                 // Field cachedMaxResultRowSize:Ljava/lang/Integer;
       4: ifnull        15
       7: aload_0
       8: getfield      #11                 // Field cachedMaxResultRowSize:Ljava/lang/Integer;
      11: invokevirtual #12                 // Method java/lang/Integer.intValue:()I
      14: ireturn
      15: aload_0
      16: getfield      #13                 // Field statementDescribed:Z
      19: ifne          32
      22: new           #14                 // class java/lang/IllegalStateException
      25: dup
      26: ldc           #15                 // String Cannot estimate result row size on a statement that is not described
      28: invokespecial #16                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      31: athrow
      32: iconst_0
      33: istore_1
      34: aload_0
      35: getfield      #17                 // Field fields:[Lorg/postgresql/core/Field;
      38: ifnull        100
      41: aload_0
      42: getfield      #17                 // Field fields:[Lorg/postgresql/core/Field;
      45: astore_2
      46: aload_2
      47: arraylength
      48: istore_3
      49: iconst_0
      50: istore        4
      52: iload         4
      54: iload_3
      55: if_icmpge     100
      58: aload_2
      59: iload         4
      61: aaload
      62: astore        5
      64: aload         5
      66: invokevirtual #18                 // Method org/postgresql/core/Field.getLength:()I
      69: istore        6
      71: iload         6
      73: iconst_1
      74: if_icmplt     84
      77: iload         6
      79: ldc           #19                 // int 65535
      81: if_icmplt     89
      84: iconst_m1
      85: istore_1
      86: goto          100
      89: iload_1
      90: iload         6
      92: iadd
      93: istore_1
      94: iinc          4, 1
      97: goto          52
     100: aload_0
     101: iload_1
     102: invokestatic  #20                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     105: putfield      #11                 // Field cachedMaxResultRowSize:Ljava/lang/Integer;
     108: iload_1
     109: ireturn

  java.lang.String getNativeSql();
    Code:
       0: aload_0
       1: getfield      #2                  // Field nativeQuery:Lorg/postgresql/core/NativeQuery;
       4: getfield      #21                 // Field org/postgresql/core/NativeQuery.nativeSql:Ljava/lang/String;
       7: areturn

  void setStatementName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #22                 // Field statementName:Ljava/lang/String;
       5: aload_0
       6: aload_1
       7: invokestatic  #23                 // Method org/postgresql/core/Utils.encodeUTF8:(Ljava/lang/String;)[B
      10: putfield      #24                 // Field encodedStatementName:[B
      13: return

  void setStatementTypes(int[]);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #25                 // Field preparedTypes:[I
       5: return

  int[] getStatementTypes();
    Code:
       0: aload_0
       1: getfield      #25                 // Field preparedTypes:[I
       4: areturn

  java.lang.String getStatementName();
    Code:
       0: aload_0
       1: getfield      #22                 // Field statementName:Ljava/lang/String;
       4: areturn

  boolean isPreparedFor(int[]);
    Code:
       0: aload_0
       1: getfield      #22                 // Field statementName:Ljava/lang/String;
       4: ifnonnull     9
       7: iconst_0
       8: ireturn
       9: iconst_0
      10: istore_2
      11: iload_2
      12: aload_1
      13: arraylength
      14: if_icmpge     43
      17: aload_1
      18: iload_2
      19: iaload
      20: ifeq          37
      23: aload_1
      24: iload_2
      25: iaload
      26: aload_0
      27: getfield      #25                 // Field preparedTypes:[I
      30: iload_2
      31: iaload
      32: if_icmpeq     37
      35: iconst_0
      36: ireturn
      37: iinc          2, 1
      40: goto          11
      43: iconst_1
      44: ireturn

  boolean hasUnresolvedTypes();
    Code:
       0: aload_0
       1: getfield      #25                 // Field preparedTypes:[I
       4: ifnonnull     9
       7: iconst_1
       8: ireturn
       9: aload_0
      10: getfield      #25                 // Field preparedTypes:[I
      13: astore_1
      14: aload_1
      15: arraylength
      16: istore_2
      17: iconst_0
      18: istore_3
      19: iload_3
      20: iload_2
      21: if_icmpge     42
      24: aload_1
      25: iload_3
      26: iaload
      27: istore        4
      29: iload         4
      31: ifne          36
      34: iconst_1
      35: ireturn
      36: iinc          3, 1
      39: goto          19
      42: iconst_0
      43: ireturn

  byte[] getEncodedStatementName();
    Code:
       0: aload_0
       1: getfield      #24                 // Field encodedStatementName:[B
       4: areturn

  void setFields(org.postgresql.core.Field[]);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #17                 // Field fields:[Lorg/postgresql/core/Field;
       5: aload_0
       6: aconst_null
       7: putfield      #11                 // Field cachedMaxResultRowSize:Ljava/lang/Integer;
      10: aload_0
      11: aload_1
      12: ifnull        19
      15: iconst_1
      16: goto          20
      19: iconst_0
      20: putfield      #26                 // Field needUpdateFieldFormats:Z
      23: aload_0
      24: iconst_0
      25: putfield      #27                 // Field hasBinaryFields:Z
      28: return

  org.postgresql.core.Field[] getFields();
    Code:
       0: aload_0
       1: getfield      #17                 // Field fields:[Lorg/postgresql/core/Field;
       4: areturn

  boolean needUpdateFieldFormats();
    Code:
       0: aload_0
       1: getfield      #26                 // Field needUpdateFieldFormats:Z
       4: ifeq          14
       7: aload_0
       8: iconst_0
       9: putfield      #26                 // Field needUpdateFieldFormats:Z
      12: iconst_1
      13: ireturn
      14: iconst_0
      15: ireturn

  public boolean hasBinaryFields();
    Code:
       0: aload_0
       1: getfield      #27                 // Field hasBinaryFields:Z
       4: ireturn

  public void setHasBinaryFields(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #27                 // Field hasBinaryFields:Z
       5: return

  boolean isPortalDescribed();
    Code:
       0: aload_0
       1: getfield      #28                 // Field portalDescribed:Z
       4: ireturn

  void setPortalDescribed(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #28                 // Field portalDescribed:Z
       5: aload_0
       6: aconst_null
       7: putfield      #11                 // Field cachedMaxResultRowSize:Ljava/lang/Integer;
      10: return

  public boolean isStatementDescribed();
    Code:
       0: aload_0
       1: getfield      #13                 // Field statementDescribed:Z
       4: ireturn

  void setStatementDescribed(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #13                 // Field statementDescribed:Z
       5: aload_0
       6: aconst_null
       7: putfield      #11                 // Field cachedMaxResultRowSize:Ljava/lang/Integer;
      10: return

  public boolean isEmpty();
    Code:
       0: aload_0
       1: invokevirtual #29                 // Method getNativeSql:()Ljava/lang/String;
       4: invokevirtual #30                 // Method java/lang/String.isEmpty:()Z
       7: ireturn

  void setCleanupRef(java.lang.ref.PhantomReference);
    Code:
       0: aload_0
       1: getfield      #31                 // Field cleanupRef:Ljava/lang/ref/PhantomReference;
       4: ifnull        22
       7: aload_0
       8: getfield      #31                 // Field cleanupRef:Ljava/lang/ref/PhantomReference;
      11: invokevirtual #32                 // Method java/lang/ref/PhantomReference.clear:()V
      14: aload_0
      15: getfield      #31                 // Field cleanupRef:Ljava/lang/ref/PhantomReference;
      18: invokevirtual #33                 // Method java/lang/ref/PhantomReference.enqueue:()Z
      21: pop
      22: aload_0
      23: aload_1
      24: putfield      #31                 // Field cleanupRef:Ljava/lang/ref/PhantomReference;
      27: return

  void unprepare();
    Code:
       0: aload_0
       1: getfield      #31                 // Field cleanupRef:Ljava/lang/ref/PhantomReference;
       4: ifnull        27
       7: aload_0
       8: getfield      #31                 // Field cleanupRef:Ljava/lang/ref/PhantomReference;
      11: invokevirtual #32                 // Method java/lang/ref/PhantomReference.clear:()V
      14: aload_0
      15: getfield      #31                 // Field cleanupRef:Ljava/lang/ref/PhantomReference;
      18: invokevirtual #33                 // Method java/lang/ref/PhantomReference.enqueue:()Z
      21: pop
      22: aload_0
      23: aconst_null
      24: putfield      #31                 // Field cleanupRef:Ljava/lang/ref/PhantomReference;
      27: aload_0
      28: aconst_null
      29: putfield      #22                 // Field statementName:Ljava/lang/String;
      32: aload_0
      33: aconst_null
      34: putfield      #24                 // Field encodedStatementName:[B
      37: aload_0
      38: aconst_null
      39: putfield      #17                 // Field fields:[Lorg/postgresql/core/Field;
      42: aload_0
      43: iconst_0
      44: putfield      #28                 // Field portalDescribed:Z
      47: aload_0
      48: iconst_0
      49: putfield      #13                 // Field statementDescribed:Z
      52: aload_0
      53: aconst_null
      54: putfield      #11                 // Field cachedMaxResultRowSize:Ljava/lang/Integer;
      57: return

  static {};
    Code:
       0: new           #6                  // class org/postgresql/core/v3/SimpleParameterList
       3: dup
       4: iconst_0
       5: aconst_null
       6: invokespecial #7                  // Method org/postgresql/core/v3/SimpleParameterList."<init>":(ILorg/postgresql/core/v3/ProtocolConnectionImpl;)V
       9: putstatic     #5                  // Field NO_PARAMETERS:Lorg/postgresql/core/v3/SimpleParameterList;
      12: return
}
