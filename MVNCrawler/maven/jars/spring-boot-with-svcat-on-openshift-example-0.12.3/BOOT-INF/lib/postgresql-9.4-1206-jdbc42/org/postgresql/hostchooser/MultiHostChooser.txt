Compiled from "MultiHostChooser.java"
public class org.postgresql.hostchooser.MultiHostChooser implements org.postgresql.hostchooser.HostChooser {
  private org.postgresql.util.HostSpec[] hostSpecs;

  private final org.postgresql.hostchooser.HostRequirement targetServerType;

  private int hostRecheckTime;

  private boolean loadBalance;

  protected org.postgresql.hostchooser.MultiHostChooser(org.postgresql.util.HostSpec[], org.postgresql.hostchooser.HostRequirement, java.util.Properties);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #3                  // Field hostSpecs:[Lorg/postgresql/util/HostSpec;
       9: aload_0
      10: aload_2
      11: putfield      #1                  // Field targetServerType:Lorg/postgresql/hostchooser/HostRequirement;
      14: aload_0
      15: aload_3
      16: ldc           #4                  // String hostRecheckSeconds
      18: ldc           #5                  // String 10
      20: invokevirtual #6                  // Method java/util/Properties.getProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      23: invokestatic  #7                  // Method java/lang/Integer.parseInt:(Ljava/lang/String;)I
      26: sipush        1000
      29: imul
      30: putfield      #8                  // Field hostRecheckTime:I
      33: aload_0
      34: aload_3
      35: ldc           #9                  // String loadBalanceHosts
      37: ldc           #10                 // String false
      39: invokevirtual #6                  // Method java/util/Properties.getProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      42: invokestatic  #11                 // Method java/lang/Boolean.parseBoolean:(Ljava/lang/String;)Z
      45: putfield      #12                 // Field loadBalance:Z
      48: return

  public java.util.Iterator<org.postgresql.util.HostSpec> iterator();
    Code:
       0: aload_0
       1: getfield      #3                  // Field hostSpecs:[Lorg/postgresql/util/HostSpec;
       4: aload_0
       5: getfield      #1                  // Field targetServerType:Lorg/postgresql/hostchooser/HostRequirement;
       8: aload_0
       9: getfield      #8                  // Field hostRecheckTime:I
      12: i2l
      13: invokestatic  #13                 // Method org/postgresql/hostchooser/GlobalHostStatusTracker.getCandidateHosts:([Lorg/postgresql/util/HostSpec;Lorg/postgresql/hostchooser/HostRequirement;J)Ljava/util/List;
      16: astore_1
      17: aload_1
      18: invokeinterface #14,  1           // InterfaceMethod java/util/List.isEmpty:()Z
      23: ifeq          39
      26: aload_0
      27: getfield      #3                  // Field hostSpecs:[Lorg/postgresql/util/HostSpec;
      30: invokestatic  #15                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      33: invokeinterface #16,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      38: areturn
      39: aload_1
      40: invokeinterface #17,  1           // InterfaceMethod java/util/List.size:()I
      45: iconst_1
      46: if_icmpne     78
      49: iconst_1
      50: anewarray     #18                 // class org/postgresql/util/HostSpec
      53: dup
      54: iconst_0
      55: aload_1
      56: iconst_0
      57: invokeinterface #19,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      62: checkcast     #20                 // class org/postgresql/hostchooser/GlobalHostStatusTracker$HostSpecStatus
      65: getfield      #21                 // Field org/postgresql/hostchooser/GlobalHostStatusTracker$HostSpecStatus.host:Lorg/postgresql/util/HostSpec;
      68: aastore
      69: invokestatic  #15                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      72: invokeinterface #16,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      77: areturn
      78: aload_0
      79: aload_1
      80: invokespecial #22                 // Method sortCandidates:(Ljava/util/List;)V
      83: aload_0
      84: aload_1
      85: invokespecial #23                 // Method shuffleGoodHosts:(Ljava/util/List;)V
      88: aload_0
      89: aload_1
      90: invokespecial #24                 // Method extractHostSpecs:(Ljava/util/List;)Ljava/util/List;
      93: invokeinterface #16,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      98: areturn

  private void sortCandidates(java.util.List<org.postgresql.hostchooser.GlobalHostStatusTracker$HostSpecStatus>);
    Code:
       0: aload_0
       1: getfield      #1                  // Field targetServerType:Lorg/postgresql/hostchooser/HostRequirement;
       4: getstatic     #25                 // Field org/postgresql/hostchooser/HostRequirement.any:Lorg/postgresql/hostchooser/HostRequirement;
       7: if_acmpne     11
      10: return
      11: aload_1
      12: new           #26                 // class org/postgresql/hostchooser/MultiHostChooser$HostSpecByTargetServerTypeComparator
      15: dup
      16: aload_0
      17: invokespecial #27                 // Method org/postgresql/hostchooser/MultiHostChooser$HostSpecByTargetServerTypeComparator."<init>":(Lorg/postgresql/hostchooser/MultiHostChooser;)V
      20: invokestatic  #28                 // Method java/util/Collections.sort:(Ljava/util/List;Ljava/util/Comparator;)V
      23: return

  private void shuffleGoodHosts(java.util.List<org.postgresql.hostchooser.GlobalHostStatusTracker$HostSpecStatus>);
    Code:
       0: aload_0
       1: getfield      #12                 // Field loadBalance:Z
       4: ifne          8
       7: return
       8: iconst_1
       9: istore_2
      10: iload_2
      11: aload_1
      12: invokeinterface #17,  1           // InterfaceMethod java/util/List.size:()I
      17: if_icmpge     61
      20: aload_1
      21: iload_2
      22: invokeinterface #19,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      27: checkcast     #20                 // class org/postgresql/hostchooser/GlobalHostStatusTracker$HostSpecStatus
      30: astore_3
      31: aload_3
      32: getfield      #29                 // Field org/postgresql/hostchooser/GlobalHostStatusTracker$HostSpecStatus.status:Lorg/postgresql/hostchooser/HostStatus;
      35: ifnull        55
      38: aload_0
      39: getfield      #1                  // Field targetServerType:Lorg/postgresql/hostchooser/HostRequirement;
      42: aload_3
      43: getfield      #29                 // Field org/postgresql/hostchooser/GlobalHostStatusTracker$HostSpecStatus.status:Lorg/postgresql/hostchooser/HostStatus;
      46: invokevirtual #30                 // Method org/postgresql/hostchooser/HostRequirement.allowConnectingTo:(Lorg/postgresql/hostchooser/HostStatus;)Z
      49: ifne          55
      52: goto          61
      55: iinc          2, 1
      58: goto          10
      61: iload_2
      62: iconst_1
      63: if_icmpne     67
      66: return
      67: aload_1
      68: iconst_0
      69: iload_2
      70: invokeinterface #31,  3           // InterfaceMethod java/util/List.subList:(II)Ljava/util/List;
      75: astore_3
      76: aload_3
      77: invokestatic  #32                 // Method java/util/Collections.shuffle:(Ljava/util/List;)V
      80: return

  private java.util.List<org.postgresql.util.HostSpec> extractHostSpecs(java.util.List<org.postgresql.hostchooser.GlobalHostStatusTracker$HostSpecStatus>);
    Code:
       0: new           #33                 // class java/util/ArrayList
       3: dup
       4: aload_1
       5: invokeinterface #17,  1           // InterfaceMethod java/util/List.size:()I
      10: invokespecial #34                 // Method java/util/ArrayList."<init>":(I)V
      13: astore_2
      14: aload_1
      15: invokeinterface #16,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      20: astore_3
      21: aload_3
      22: invokeinterface #35,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      27: ifeq          56
      30: aload_3
      31: invokeinterface #36,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      36: checkcast     #20                 // class org/postgresql/hostchooser/GlobalHostStatusTracker$HostSpecStatus
      39: astore        4
      41: aload_2
      42: aload         4
      44: getfield      #21                 // Field org/postgresql/hostchooser/GlobalHostStatusTracker$HostSpecStatus.host:Lorg/postgresql/util/HostSpec;
      47: invokeinterface #37,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      52: pop
      53: goto          21
      56: aload_2
      57: areturn

  static org.postgresql.hostchooser.HostRequirement access$000(org.postgresql.hostchooser.MultiHostChooser);
    Code:
       0: aload_0
       1: getfield      #1                  // Field targetServerType:Lorg/postgresql/hostchooser/HostRequirement;
       4: areturn
}
