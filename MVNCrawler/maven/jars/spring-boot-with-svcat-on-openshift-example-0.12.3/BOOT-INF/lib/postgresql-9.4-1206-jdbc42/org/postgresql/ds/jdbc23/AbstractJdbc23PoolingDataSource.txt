Compiled from "AbstractJdbc23PoolingDataSource.java"
public abstract class org.postgresql.ds.jdbc23.AbstractJdbc23PoolingDataSource extends org.postgresql.ds.common.BaseDataSource {
  protected static java.util.Map dataSources;

  protected java.lang.String dataSourceName;

  private int initialConnections;

  private int maxConnections;

  private boolean initialized;

  private java.util.Stack available;

  private java.util.Stack used;

  private java.lang.Object lock;

  private org.postgresql.ds.PGConnectionPoolDataSource source;

  private javax.sql.ConnectionEventListener connectionEventListener;

  public org.postgresql.ds.jdbc23.AbstractJdbc23PoolingDataSource();
    Code:
       0: aload_0
       1: invokespecial #4                  // Method org/postgresql/ds/common/BaseDataSource."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #5                  // Field initialConnections:I
       9: aload_0
      10: iconst_0
      11: putfield      #6                  // Field maxConnections:I
      14: aload_0
      15: iconst_0
      16: putfield      #7                  // Field initialized:Z
      19: aload_0
      20: new           #8                  // class java/util/Stack
      23: dup
      24: invokespecial #9                  // Method java/util/Stack."<init>":()V
      27: putfield      #2                  // Field available:Ljava/util/Stack;
      30: aload_0
      31: new           #8                  // class java/util/Stack
      34: dup
      35: invokespecial #9                  // Method java/util/Stack."<init>":()V
      38: putfield      #1                  // Field used:Ljava/util/Stack;
      41: aload_0
      42: new           #10                 // class java/lang/Object
      45: dup
      46: invokespecial #11                 // Method java/lang/Object."<init>":()V
      49: putfield      #3                  // Field lock:Ljava/lang/Object;
      52: aload_0
      53: new           #12                 // class org/postgresql/ds/jdbc23/AbstractJdbc23PoolingDataSource$1
      56: dup
      57: aload_0
      58: invokespecial #13                 // Method org/postgresql/ds/jdbc23/AbstractJdbc23PoolingDataSource$1."<init>":(Lorg/postgresql/ds/jdbc23/AbstractJdbc23PoolingDataSource;)V
      61: putfield      #14                 // Field connectionEventListener:Ljavax/sql/ConnectionEventListener;
      64: return

  public static org.postgresql.ds.PGPoolingDataSource getDataSource(java.lang.String);
    Code:
       0: getstatic     #15                 // Field dataSources:Ljava/util/Map;
       3: aload_0
       4: invokeinterface #16,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
       9: checkcast     #17                 // class org/postgresql/ds/PGPoolingDataSource
      12: areturn

  public java.lang.String getDescription();
    Code:
       0: new           #18                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #19                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #20                 // String Pooling DataSource \'
       9: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #22                 // Field dataSourceName:Ljava/lang/String;
      16: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      19: ldc           #23                 // String  from
      21: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: invokestatic  #24                 // Method org/postgresql/Driver.getVersion:()Ljava/lang/String;
      27: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: invokevirtual #25                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      33: areturn

  public void setServerName(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #7                  // Field initialized:Z
       4: ifeq          17
       7: new           #26                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #27                 // String Cannot set Data Source properties after DataSource has been used
      13: invokespecial #28                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: aload_1
      19: invokespecial #29                 // Method org/postgresql/ds/common/BaseDataSource.setServerName:(Ljava/lang/String;)V
      22: return

  public void setDatabaseName(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #7                  // Field initialized:Z
       4: ifeq          17
       7: new           #26                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #27                 // String Cannot set Data Source properties after DataSource has been used
      13: invokespecial #28                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: aload_1
      19: invokespecial #30                 // Method org/postgresql/ds/common/BaseDataSource.setDatabaseName:(Ljava/lang/String;)V
      22: return

  public void setUser(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #7                  // Field initialized:Z
       4: ifeq          17
       7: new           #26                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #27                 // String Cannot set Data Source properties after DataSource has been used
      13: invokespecial #28                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: aload_1
      19: invokespecial #31                 // Method org/postgresql/ds/common/BaseDataSource.setUser:(Ljava/lang/String;)V
      22: return

  public void setPassword(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #7                  // Field initialized:Z
       4: ifeq          17
       7: new           #26                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #27                 // String Cannot set Data Source properties after DataSource has been used
      13: invokespecial #28                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: aload_1
      19: invokespecial #32                 // Method org/postgresql/ds/common/BaseDataSource.setPassword:(Ljava/lang/String;)V
      22: return

  public void setPortNumber(int);
    Code:
       0: aload_0
       1: getfield      #7                  // Field initialized:Z
       4: ifeq          17
       7: new           #26                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #27                 // String Cannot set Data Source properties after DataSource has been used
      13: invokespecial #28                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: iload_1
      19: invokespecial #33                 // Method org/postgresql/ds/common/BaseDataSource.setPortNumber:(I)V
      22: return

  public int getInitialConnections();
    Code:
       0: aload_0
       1: getfield      #5                  // Field initialConnections:I
       4: ireturn

  public void setInitialConnections(int);
    Code:
       0: aload_0
       1: getfield      #7                  // Field initialized:Z
       4: ifeq          17
       7: new           #26                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #27                 // String Cannot set Data Source properties after DataSource has been used
      13: invokespecial #28                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: iload_1
      19: putfield      #5                  // Field initialConnections:I
      22: return

  public int getMaxConnections();
    Code:
       0: aload_0
       1: getfield      #6                  // Field maxConnections:I
       4: ireturn

  public void setMaxConnections(int);
    Code:
       0: aload_0
       1: getfield      #7                  // Field initialized:Z
       4: ifeq          17
       7: new           #26                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #27                 // String Cannot set Data Source properties after DataSource has been used
      13: invokespecial #28                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: iload_1
      19: putfield      #6                  // Field maxConnections:I
      22: return

  public java.lang.String getDataSourceName();
    Code:
       0: aload_0
       1: getfield      #22                 // Field dataSourceName:Ljava/lang/String;
       4: areturn

  public void setDataSourceName(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #7                  // Field initialized:Z
       4: ifeq          17
       7: new           #26                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #27                 // String Cannot set Data Source properties after DataSource has been used
      13: invokespecial #28                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #22                 // Field dataSourceName:Ljava/lang/String;
      21: ifnull        40
      24: aload_1
      25: ifnull        40
      28: aload_1
      29: aload_0
      30: getfield      #22                 // Field dataSourceName:Ljava/lang/String;
      33: invokevirtual #34                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      36: ifeq          40
      39: return
      40: getstatic     #15                 // Field dataSources:Ljava/util/Map;
      43: dup
      44: astore_2
      45: monitorenter
      46: aload_1
      47: invokestatic  #35                 // Method getDataSource:(Ljava/lang/String;)Lorg/postgresql/ds/PGPoolingDataSource;
      50: ifnull        85
      53: new           #36                 // class java/lang/IllegalArgumentException
      56: dup
      57: new           #18                 // class java/lang/StringBuilder
      60: dup
      61: invokespecial #19                 // Method java/lang/StringBuilder."<init>":()V
      64: ldc           #37                 // String DataSource with name \'
      66: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      69: aload_1
      70: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      73: ldc           #38                 // String \' already exists!
      75: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      78: invokevirtual #25                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      81: invokespecial #39                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      84: athrow
      85: aload_0
      86: getfield      #22                 // Field dataSourceName:Ljava/lang/String;
      89: ifnull        105
      92: getstatic     #15                 // Field dataSources:Ljava/util/Map;
      95: aload_0
      96: getfield      #22                 // Field dataSourceName:Ljava/lang/String;
      99: invokeinterface #40,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
     104: pop
     105: aload_0
     106: aload_1
     107: putfield      #22                 // Field dataSourceName:Ljava/lang/String;
     110: aload_0
     111: aload_1
     112: invokevirtual #41                 // Method addDataSource:(Ljava/lang/String;)V
     115: aload_2
     116: monitorexit
     117: goto          125
     120: astore_3
     121: aload_2
     122: monitorexit
     123: aload_3
     124: athrow
     125: return
    Exception table:
       from    to  target type
          46   117   120   any
         120   123   120   any

  public void initialize() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field lock:Ljava/lang/Object;
       4: dup
       5: astore_1
       6: monitorenter
       7: aload_0
       8: aload_0
       9: invokevirtual #42                 // Method createConnectionPool:()Lorg/postgresql/ds/PGConnectionPoolDataSource;
      12: putfield      #43                 // Field source:Lorg/postgresql/ds/PGConnectionPoolDataSource;
      15: aload_0
      16: getfield      #43                 // Field source:Lorg/postgresql/ds/PGConnectionPoolDataSource;
      19: aload_0
      20: invokevirtual #44                 // Method org/postgresql/ds/PGConnectionPoolDataSource.initializeFrom:(Lorg/postgresql/ds/common/BaseDataSource;)V
      23: goto          44
      26: astore_2
      27: new           #46                 // class org/postgresql/util/PSQLException
      30: dup
      31: ldc           #47                 // String Failed to setup DataSource.
      33: invokestatic  #48                 // Method org/postgresql/util/GT.tr:(Ljava/lang/String;)Ljava/lang/String;
      36: getstatic     #49                 // Field org/postgresql/util/PSQLState.UNEXPECTED_ERROR:Lorg/postgresql/util/PSQLState;
      39: aload_2
      40: invokespecial #50                 // Method org/postgresql/util/PSQLException."<init>":(Ljava/lang/String;Lorg/postgresql/util/PSQLState;Ljava/lang/Throwable;)V
      43: athrow
      44: aload_0
      45: getfield      #2                  // Field available:Ljava/util/Stack;
      48: invokevirtual #51                 // Method java/util/Stack.size:()I
      51: aload_0
      52: getfield      #5                  // Field initialConnections:I
      55: if_icmpge     76
      58: aload_0
      59: getfield      #2                  // Field available:Ljava/util/Stack;
      62: aload_0
      63: getfield      #43                 // Field source:Lorg/postgresql/ds/PGConnectionPoolDataSource;
      66: invokevirtual #52                 // Method org/postgresql/ds/PGConnectionPoolDataSource.getPooledConnection:()Ljavax/sql/PooledConnection;
      69: invokevirtual #53                 // Method java/util/Stack.push:(Ljava/lang/Object;)Ljava/lang/Object;
      72: pop
      73: goto          44
      76: aload_0
      77: iconst_1
      78: putfield      #7                  // Field initialized:Z
      81: aload_1
      82: monitorexit
      83: goto          91
      86: astore_3
      87: aload_1
      88: monitorexit
      89: aload_3
      90: athrow
      91: return
    Exception table:
       from    to  target type
          15    23    26   Class java/lang/Exception
           7    83    86   any
          86    89    86   any

  protected boolean isInitialized();
    Code:
       0: aload_0
       1: getfield      #7                  // Field initialized:Z
       4: ireturn

  protected org.postgresql.ds.PGConnectionPoolDataSource createConnectionPool();
    Code:
       0: new           #54                 // class org/postgresql/ds/PGConnectionPoolDataSource
       3: dup
       4: invokespecial #55                 // Method org/postgresql/ds/PGConnectionPoolDataSource."<init>":()V
       7: areturn

  public java.sql.Connection getConnection(java.lang.String, java.lang.String) throws java.sql.SQLException;
    Code:
       0: aload_1
       1: ifnull        41
       4: aload_1
       5: aload_0
       6: invokevirtual #56                 // Method getUser:()Ljava/lang/String;
       9: invokevirtual #34                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      12: ifeq          46
      15: aload_2
      16: ifnonnull     26
      19: aload_0
      20: invokevirtual #57                 // Method getPassword:()Ljava/lang/String;
      23: ifnull        41
      26: aload_2
      27: ifnull        46
      30: aload_2
      31: aload_0
      32: invokevirtual #57                 // Method getPassword:()Ljava/lang/String;
      35: invokevirtual #34                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      38: ifeq          46
      41: aload_0
      42: invokevirtual #58                 // Method getConnection:()Ljava/sql/Connection;
      45: areturn
      46: aload_0
      47: getfield      #7                  // Field initialized:Z
      50: ifne          57
      53: aload_0
      54: invokevirtual #59                 // Method initialize:()V
      57: aload_0
      58: aload_1
      59: aload_2
      60: invokespecial #60                 // Method org/postgresql/ds/common/BaseDataSource.getConnection:(Ljava/lang/String;Ljava/lang/String;)Ljava/sql/Connection;
      63: areturn

  public java.sql.Connection getConnection() throws java.sql.SQLException;
    Code:
       0: aload_0
       1: getfield      #7                  // Field initialized:Z
       4: ifne          11
       7: aload_0
       8: invokevirtual #59                 // Method initialize:()V
      11: aload_0
      12: invokespecial #61                 // Method getPooledConnection:()Ljava/sql/Connection;
      15: areturn

  public void close();
    Code:
       0: aload_0
       1: getfield      #3                  // Field lock:Ljava/lang/Object;
       4: dup
       5: astore_1
       6: monitorenter
       7: aload_0
       8: getfield      #2                  // Field available:Ljava/util/Stack;
      11: invokevirtual #51                 // Method java/util/Stack.size:()I
      14: ifle          39
      17: aload_0
      18: getfield      #2                  // Field available:Ljava/util/Stack;
      21: invokevirtual #62                 // Method java/util/Stack.pop:()Ljava/lang/Object;
      24: checkcast     #63                 // class org/postgresql/ds/PGPooledConnection
      27: astore_2
      28: aload_2
      29: invokevirtual #64                 // Method org/postgresql/ds/PGPooledConnection.close:()V
      32: goto          36
      35: astore_3
      36: goto          7
      39: aload_0
      40: aconst_null
      41: putfield      #2                  // Field available:Ljava/util/Stack;
      44: aload_0
      45: getfield      #1                  // Field used:Ljava/util/Stack;
      48: invokevirtual #51                 // Method java/util/Stack.size:()I
      51: ifle          84
      54: aload_0
      55: getfield      #1                  // Field used:Ljava/util/Stack;
      58: invokevirtual #62                 // Method java/util/Stack.pop:()Ljava/lang/Object;
      61: checkcast     #63                 // class org/postgresql/ds/PGPooledConnection
      64: astore_2
      65: aload_2
      66: aload_0
      67: getfield      #14                 // Field connectionEventListener:Ljavax/sql/ConnectionEventListener;
      70: invokevirtual #66                 // Method org/postgresql/ds/PGPooledConnection.removeConnectionEventListener:(Ljavax/sql/ConnectionEventListener;)V
      73: aload_2
      74: invokevirtual #64                 // Method org/postgresql/ds/PGPooledConnection.close:()V
      77: goto          81
      80: astore_3
      81: goto          44
      84: aload_0
      85: aconst_null
      86: putfield      #1                  // Field used:Ljava/util/Stack;
      89: aload_1
      90: monitorexit
      91: goto          101
      94: astore        4
      96: aload_1
      97: monitorexit
      98: aload         4
     100: athrow
     101: aload_0
     102: invokevirtual #67                 // Method removeStoredDataSource:()V
     105: return
    Exception table:
       from    to  target type
          28    32    35   Class java/sql/SQLException
          73    77    80   Class java/sql/SQLException
           7    91    94   any
          94    98    94   any

  protected void removeStoredDataSource();
    Code:
       0: getstatic     #15                 // Field dataSources:Ljava/util/Map;
       3: dup
       4: astore_1
       5: monitorenter
       6: getstatic     #15                 // Field dataSources:Ljava/util/Map;
       9: aload_0
      10: getfield      #22                 // Field dataSourceName:Ljava/lang/String;
      13: invokeinterface #40,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      18: pop
      19: aload_1
      20: monitorexit
      21: goto          29
      24: astore_2
      25: aload_1
      26: monitorexit
      27: aload_2
      28: athrow
      29: return
    Exception table:
       from    to  target type
           6    21    24   any
          24    27    24   any

  protected abstract void addDataSource(java.lang.String);

  private java.sql.Connection getPooledConnection() throws java.sql.SQLException;
    Code:
       0: aconst_null
       1: astore_1
       2: aload_0
       3: getfield      #3                  // Field lock:Ljava/lang/Object;
       6: dup
       7: astore_2
       8: monitorenter
       9: aload_0
      10: getfield      #2                  // Field available:Ljava/util/Stack;
      13: ifnonnull     32
      16: new           #46                 // class org/postgresql/util/PSQLException
      19: dup
      20: ldc           #68                 // String DataSource has been closed.
      22: invokestatic  #48                 // Method org/postgresql/util/GT.tr:(Ljava/lang/String;)Ljava/lang/String;
      25: getstatic     #69                 // Field org/postgresql/util/PSQLState.CONNECTION_DOES_NOT_EXIST:Lorg/postgresql/util/PSQLState;
      28: invokespecial #70                 // Method org/postgresql/util/PSQLException."<init>":(Ljava/lang/String;Lorg/postgresql/util/PSQLState;)V
      31: athrow
      32: aload_0
      33: getfield      #2                  // Field available:Ljava/util/Stack;
      36: invokevirtual #51                 // Method java/util/Stack.size:()I
      39: ifle          65
      42: aload_0
      43: getfield      #2                  // Field available:Ljava/util/Stack;
      46: invokevirtual #62                 // Method java/util/Stack.pop:()Ljava/lang/Object;
      49: checkcast     #71                 // class javax/sql/PooledConnection
      52: astore_1
      53: aload_0
      54: getfield      #1                  // Field used:Ljava/util/Stack;
      57: aload_1
      58: invokevirtual #53                 // Method java/util/Stack.push:(Ljava/lang/Object;)Ljava/lang/Object;
      61: pop
      62: goto          123
      65: aload_0
      66: getfield      #6                  // Field maxConnections:I
      69: ifeq          86
      72: aload_0
      73: getfield      #1                  // Field used:Ljava/util/Stack;
      76: invokevirtual #51                 // Method java/util/Stack.size:()I
      79: aload_0
      80: getfield      #6                  // Field maxConnections:I
      83: if_icmpge     106
      86: aload_0
      87: getfield      #43                 // Field source:Lorg/postgresql/ds/PGConnectionPoolDataSource;
      90: invokevirtual #52                 // Method org/postgresql/ds/PGConnectionPoolDataSource.getPooledConnection:()Ljavax/sql/PooledConnection;
      93: astore_1
      94: aload_0
      95: getfield      #1                  // Field used:Ljava/util/Stack;
      98: aload_1
      99: invokevirtual #53                 // Method java/util/Stack.push:(Ljava/lang/Object;)Ljava/lang/Object;
     102: pop
     103: goto          123
     106: aload_0
     107: getfield      #3                  // Field lock:Ljava/lang/Object;
     110: ldc2_w        #72                 // long 1000l
     113: invokevirtual #74                 // Method java/lang/Object.wait:(J)V
     116: goto          32
     119: astore_3
     120: goto          32
     123: aload_2
     124: monitorexit
     125: goto          135
     128: astore        4
     130: aload_2
     131: monitorexit
     132: aload         4
     134: athrow
     135: aload_1
     136: aload_0
     137: getfield      #14                 // Field connectionEventListener:Ljavax/sql/ConnectionEventListener;
     140: invokeinterface #76,  2           // InterfaceMethod javax/sql/PooledConnection.addConnectionEventListener:(Ljavax/sql/ConnectionEventListener;)V
     145: aload_1
     146: invokeinterface #77,  1           // InterfaceMethod javax/sql/PooledConnection.getConnection:()Ljava/sql/Connection;
     151: areturn
    Exception table:
       from    to  target type
         106   116   119   Class java/lang/InterruptedException
           9   125   128   any
         128   132   128   any

  public javax.naming.Reference getReference() throws javax.naming.NamingException;
    Code:
       0: aload_0
       1: invokespecial #78                 // Method org/postgresql/ds/common/BaseDataSource.getReference:()Ljavax/naming/Reference;
       4: astore_1
       5: aload_1
       6: new           #79                 // class javax/naming/StringRefAddr
       9: dup
      10: ldc           #80                 // String dataSourceName
      12: aload_0
      13: getfield      #22                 // Field dataSourceName:Ljava/lang/String;
      16: invokespecial #81                 // Method javax/naming/StringRefAddr."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      19: invokevirtual #82                 // Method javax/naming/Reference.add:(Ljavax/naming/RefAddr;)V
      22: aload_0
      23: getfield      #5                  // Field initialConnections:I
      26: ifle          49
      29: aload_1
      30: new           #79                 // class javax/naming/StringRefAddr
      33: dup
      34: ldc           #83                 // String initialConnections
      36: aload_0
      37: getfield      #5                  // Field initialConnections:I
      40: invokestatic  #84                 // Method java/lang/Integer.toString:(I)Ljava/lang/String;
      43: invokespecial #81                 // Method javax/naming/StringRefAddr."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      46: invokevirtual #82                 // Method javax/naming/Reference.add:(Ljavax/naming/RefAddr;)V
      49: aload_0
      50: getfield      #6                  // Field maxConnections:I
      53: ifle          76
      56: aload_1
      57: new           #79                 // class javax/naming/StringRefAddr
      60: dup
      61: ldc           #85                 // String maxConnections
      63: aload_0
      64: getfield      #6                  // Field maxConnections:I
      67: invokestatic  #84                 // Method java/lang/Integer.toString:(I)Ljava/lang/String;
      70: invokespecial #81                 // Method javax/naming/StringRefAddr."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      73: invokevirtual #82                 // Method javax/naming/Reference.add:(Ljavax/naming/RefAddr;)V
      76: aload_1
      77: areturn

  static java.lang.Object access$000(org.postgresql.ds.jdbc23.AbstractJdbc23PoolingDataSource);
    Code:
       0: aload_0
       1: getfield      #3                  // Field lock:Ljava/lang/Object;
       4: areturn

  static java.util.Stack access$100(org.postgresql.ds.jdbc23.AbstractJdbc23PoolingDataSource);
    Code:
       0: aload_0
       1: getfield      #2                  // Field available:Ljava/util/Stack;
       4: areturn

  static java.util.Stack access$200(org.postgresql.ds.jdbc23.AbstractJdbc23PoolingDataSource);
    Code:
       0: aload_0
       1: getfield      #1                  // Field used:Ljava/util/Stack;
       4: areturn

  static {};
    Code:
       0: new           #86                 // class java/util/HashMap
       3: dup
       4: invokespecial #87                 // Method java/util/HashMap."<init>":()V
       7: putstatic     #15                 // Field dataSources:Ljava/util/Map;
      10: return
}
