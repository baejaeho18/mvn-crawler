Compiled from "RandomCommon.java"
interface net.openhft.chronicle.bytes.RandomCommon extends net.openhft.chronicle.core.ReferenceCounted {
  public default long start();
    Code:
       0: lconst_0
       1: lreturn

  public default long capacity();
    Code:
       0: ldc2_w        #2                  // long 9223372036854775807l
       3: lreturn

  public default long readPosition();
    Code:
       0: aload_0
       1: invokeinterface #4,  1            // InterfaceMethod start:()J
       6: lreturn

  public default long writePosition();
    Code:
       0: aload_0
       1: invokeinterface #4,  1            // InterfaceMethod start:()J
       6: lreturn

  public default long readRemaining();
    Code:
       0: aload_0
       1: invokeinterface #5,  1            // InterfaceMethod readLimit:()J
       6: aload_0
       7: invokeinterface #6,  1            // InterfaceMethod readPosition:()J
      12: lsub
      13: lstore_1
      14: lload_1
      15: lreturn

  public default long writeRemaining();
    Code:
       0: aload_0
       1: invokeinterface #7,  1            // InterfaceMethod writeLimit:()J
       6: aload_0
       7: invokeinterface #8,  1            // InterfaceMethod writePosition:()J
      12: lsub
      13: lreturn

  public default long readLimit();
    Code:
       0: aload_0
       1: invokeinterface #9,  1            // InterfaceMethod capacity:()J
       6: lreturn

  public default long writeLimit();
    Code:
       0: aload_0
       1: invokeinterface #9,  1            // InterfaceMethod capacity:()J
       6: lreturn

  public abstract long addressForRead(long) throws java.lang.UnsupportedOperationException, java.nio.BufferUnderflowException;

  public default long addressForRead(long, int) throws java.lang.UnsupportedOperationException, java.nio.BufferUnderflowException;
    Code:
       0: aload_0
       1: lload_1
       2: invokeinterface #10,  3           // InterfaceMethod addressForRead:(J)J
       7: lreturn

  public abstract long addressForWrite(long) throws java.lang.UnsupportedOperationException, java.nio.BufferOverflowException;

  public default java.nio.ByteOrder byteOrder();
    Code:
       0: invokestatic  #11                 // Method java/nio/ByteOrder.nativeOrder:()Ljava/nio/ByteOrder;
       3: areturn

  public abstract net.openhft.chronicle.bytes.Bytes bytesForRead() throws java.lang.IllegalStateException;

  public abstract net.openhft.chronicle.bytes.Bytes bytesForWrite() throws java.lang.IllegalStateException;

  public abstract boolean compareAndSwapInt(long, int, int) throws java.nio.BufferOverflowException;

  public abstract boolean compareAndSwapLong(long, long, long) throws java.nio.BufferOverflowException;

  public default boolean compareAndSwapFloat(long, float, float) throws java.nio.BufferOverflowException;
    Code:
       0: aload_0
       1: lload_1
       2: fload_3
       3: invokestatic  #12                 // Method java/lang/Float.floatToRawIntBits:(F)I
       6: fload         4
       8: invokestatic  #12                 // Method java/lang/Float.floatToRawIntBits:(F)I
      11: invokeinterface #13,  5           // InterfaceMethod compareAndSwapInt:(JII)Z
      16: ireturn

  public default boolean compareAndSwapDouble(long, double, double) throws java.nio.BufferOverflowException;
    Code:
       0: aload_0
       1: lload_1
       2: dload_3
       3: invokestatic  #14                 // Method java/lang/Double.doubleToRawLongBits:(D)J
       6: dload         5
       8: invokestatic  #14                 // Method java/lang/Double.doubleToRawLongBits:(D)J
      11: invokeinterface #15,  7           // InterfaceMethod compareAndSwapLong:(JJJ)Z
      16: ireturn

  public abstract boolean sharedMemory();

  public abstract boolean isDirectMemory();
}
