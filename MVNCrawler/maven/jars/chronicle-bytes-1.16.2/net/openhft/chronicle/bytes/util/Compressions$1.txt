Compiled from "Compressions.java"
final class net.openhft.chronicle.bytes.util.Compressions$1 extends net.openhft.chronicle.bytes.util.Compressions {
  net.openhft.chronicle.bytes.util.Compressions$1(java.lang.String, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: aconst_null
       4: invokespecial #1                  // Method net/openhft/chronicle/bytes/util/Compressions."<init>":(Ljava/lang/String;ILnet/openhft/chronicle/bytes/util/Compressions$1;)V
       7: return

  public byte[] compress(byte[]);
    Code:
       0: aload_1
       1: areturn

  public byte[] uncompress(byte[]) throws net.openhft.chronicle.core.io.IORuntimeException;
    Code:
       0: aload_1
       1: areturn

  public void compress(net.openhft.chronicle.bytes.BytesIn, net.openhft.chronicle.bytes.BytesOut);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #2                  // Method copy:(Lnet/openhft/chronicle/bytes/BytesIn;Lnet/openhft/chronicle/bytes/BytesOut;)V
       6: return

  public void uncompress(net.openhft.chronicle.bytes.BytesIn, net.openhft.chronicle.bytes.BytesOut);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #2                  // Method copy:(Lnet/openhft/chronicle/bytes/BytesIn;Lnet/openhft/chronicle/bytes/BytesOut;)V
       6: return

  private void copy(net.openhft.chronicle.bytes.BytesIn, net.openhft.chronicle.bytes.BytesOut);
    Code:
       0: aload_1
       1: aload_2
       2: checkcast     #3                  // class net/openhft/chronicle/bytes/BytesStore
       5: invokeinterface #4,  2            // InterfaceMethod net/openhft/chronicle/bytes/BytesIn.copyTo:(Lnet/openhft/chronicle/bytes/BytesStore;)J
      10: lstore_3
      11: aload_2
      12: lload_3
      13: invokeinterface #5,  3            // InterfaceMethod net/openhft/chronicle/bytes/BytesOut.writeSkip:(J)Lnet/openhft/chronicle/bytes/StreamingDataOutput;
      18: pop
      19: return

  public java.io.InputStream decompressingStream(java.io.InputStream);
    Code:
       0: aload_1
       1: areturn

  public java.io.OutputStream compressingStream(java.io.OutputStream);
    Code:
       0: aload_1
       1: areturn
}
