Compiled from "AbstractTestContainersProvider.java"
public abstract class io.micronaut.testresources.testcontainers.AbstractTestContainersProvider<T extends org.testcontainers.containers.GenericContainer<? extends T>> implements io.micronaut.testresources.core.TestResourcesResolver {
  public io.micronaut.testresources.testcontainers.AbstractTestContainersProvider();
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: return

  public int getOrder();
    Code:
       0: iconst_0
       1: ireturn

  protected abstract java.lang.String getSimpleName();

  protected abstract java.lang.String getDefaultImageName();

  protected abstract T createContainer(org.testcontainers.utility.DockerImageName, java.util.Map<java.lang.String, java.lang.Object>, java.util.Map<java.lang.String, java.lang.Object>);

  protected boolean shouldAnswer(java.lang.String, java.util.Map<java.lang.String, java.lang.Object>, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: iconst_1
       1: ireturn

  protected java.util.Optional<java.lang.String> resolveWithoutContainer(java.lang.String, java.util.Map<java.lang.String, java.lang.Object>, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: invokestatic  #9                  // Method java/util/Optional.empty:()Ljava/util/Optional;
       3: areturn

  public final java.util.Optional<java.lang.String> resolve(java.lang.String, java.util.Map<java.lang.String, java.lang.Object>, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokevirtual #15                 // Method shouldAnswer:(Ljava/lang/String;Ljava/util/Map;Ljava/util/Map;)Z
       7: ifeq          57
      10: aload_0
      11: aload_1
      12: aload_2
      13: aload_3
      14: invokevirtual #21                 // Method resolveWithoutContainer:(Ljava/lang/String;Ljava/util/Map;Ljava/util/Map;)Ljava/util/Optional;
      17: astore        4
      19: aload         4
      21: invokevirtual #25                 // Method java/util/Optional.isPresent:()Z
      24: ifeq          30
      27: aload         4
      29: areturn
      30: aload_0
      31: aload_1
      32: aload_1
      33: aload_0
      34: invokevirtual #29                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      37: aload_0
      38: invokevirtual #33                 // Method getSimpleName:()Ljava/lang/String;
      41: aload_2
      42: aload_0
      43: aload_3
      44: aload_2
      45: invokedynamic #37,  0             // InvokeDynamic #0:get:(Lio/micronaut/testresources/testcontainers/AbstractTestContainersProvider;Ljava/util/Map;Ljava/util/Map;)Ljava/util/function/Supplier;
      50: invokestatic  #41                 // Method io/micronaut/testresources/testcontainers/TestContainers.getOrCreate:(Ljava/lang/String;Ljava/lang/Class;Ljava/lang/String;Ljava/util/Map;Ljava/util/function/Supplier;)Lorg/testcontainers/containers/GenericContainer;
      53: invokevirtual #47                 // Method resolveProperty:(Ljava/lang/String;Lorg/testcontainers/containers/GenericContainer;)Ljava/util/Optional;
      56: areturn
      57: invokestatic  #9                  // Method java/util/Optional.empty:()Ljava/util/Optional;
      60: areturn

  protected void configureContainer(T, java.util.Map<java.lang.String, java.lang.Object>, java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: return

  protected abstract java.util.Optional<java.lang.String> resolveProperty(java.lang.String, T);

  protected final java.lang.String stringOrNull(java.lang.Object);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: areturn
       6: aload_1
       7: invokestatic  #51                 // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
      10: areturn

  private org.testcontainers.containers.GenericContainer lambda$resolve$1(java.util.Map, java.util.Map);
    Code:
       0: aload_0
       1: invokevirtual #57                 // Method getDefaultImageName:()Ljava/lang/String;
       4: astore_3
       5: aload_3
       6: invokestatic  #60                 // Method org/testcontainers/utility/DockerImageName.parse:(Ljava/lang/String;)Lorg/testcontainers/utility/DockerImageName;
       9: astore        4
      11: aload_0
      12: invokevirtual #33                 // Method getSimpleName:()Ljava/lang/String;
      15: invokestatic  #66                 // Method java/util/Collections.singletonList:(Ljava/lang/Object;)Ljava/util/List;
      18: aload_1
      19: invokestatic  #72                 // Method io/micronaut/testresources/testcontainers/TestContainerMetadataSupport.containerMetadataFor:(Ljava/util/List;Ljava/util/Map;)Ljava/util/stream/Stream;
      22: invokeinterface #76,  1           // InterfaceMethod java/util/stream/Stream.findAny:()Ljava/util/Optional;
      27: astore        5
      29: aload         5
      31: invokevirtual #25                 // Method java/util/Optional.isPresent:()Z
      34: ifeq          107
      37: aload         5
      39: invokevirtual #81                 // Method java/util/Optional.get:()Ljava/lang/Object;
      42: checkcast     #84                 // class io/micronaut/testresources/testcontainers/TestContainerMetadata
      45: astore        6
      47: aload         6
      49: invokevirtual #86                 // Method io/micronaut/testresources/testcontainers/TestContainerMetadata.getImageName:()Ljava/util/Optional;
      52: invokevirtual #25                 // Method java/util/Optional.isPresent:()Z
      55: ifeq          78
      58: aload         6
      60: invokevirtual #86                 // Method io/micronaut/testresources/testcontainers/TestContainerMetadata.getImageName:()Ljava/util/Optional;
      63: invokevirtual #81                 // Method java/util/Optional.get:()Ljava/lang/Object;
      66: checkcast     #52                 // class java/lang/String
      69: invokestatic  #60                 // Method org/testcontainers/utility/DockerImageName.parse:(Ljava/lang/String;)Lorg/testcontainers/utility/DockerImageName;
      72: aload_3
      73: invokevirtual #89                 // Method org/testcontainers/utility/DockerImageName.asCompatibleSubstituteFor:(Ljava/lang/String;)Lorg/testcontainers/utility/DockerImageName;
      76: astore        4
      78: aload         6
      80: invokevirtual #92                 // Method io/micronaut/testresources/testcontainers/TestContainerMetadata.getImageTag:()Ljava/util/Optional;
      83: invokevirtual #25                 // Method java/util/Optional.isPresent:()Z
      86: ifeq          107
      89: aload         4
      91: aload         6
      93: invokevirtual #92                 // Method io/micronaut/testresources/testcontainers/TestContainerMetadata.getImageTag:()Ljava/util/Optional;
      96: invokevirtual #81                 // Method java/util/Optional.get:()Ljava/lang/Object;
      99: checkcast     #52                 // class java/lang/String
     102: invokevirtual #95                 // Method org/testcontainers/utility/DockerImageName.withTag:(Ljava/lang/String;)Lorg/testcontainers/utility/DockerImageName;
     105: astore        4
     107: aload_0
     108: aload         4
     110: aload_2
     111: aload_1
     112: invokevirtual #98                 // Method createContainer:(Lorg/testcontainers/utility/DockerImageName;Ljava/util/Map;Ljava/util/Map;)Lorg/testcontainers/containers/GenericContainer;
     115: astore        6
     117: aload_0
     118: aload         6
     120: aload_2
     121: aload_1
     122: invokevirtual #102                // Method configureContainer:(Lorg/testcontainers/containers/GenericContainer;Ljava/util/Map;Ljava/util/Map;)V
     125: aload         5
     127: aload         6
     129: invokedynamic #106,  0            // InvokeDynamic #1:accept:(Lorg/testcontainers/containers/GenericContainer;)Ljava/util/function/Consumer;
     134: invokevirtual #110                // Method java/util/Optional.ifPresent:(Ljava/util/function/Consumer;)V
     137: aload         6
     139: areturn

  private static void lambda$resolve$0(org.testcontainers.containers.GenericContainer, io.micronaut.testresources.testcontainers.TestContainerMetadata);
    Code:
       0: aload_1
       1: aload_0
       2: invokestatic  #114                // Method io/micronaut/testresources/testcontainers/TestContainerMetadataSupport.applyMetadata:(Lio/micronaut/testresources/testcontainers/TestContainerMetadata;Lorg/testcontainers/containers/GenericContainer;)Lorg/testcontainers/containers/GenericContainer;
       5: pop
       6: return
}
