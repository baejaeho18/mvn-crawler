Compiled from "ZstdEncoder.java"
public final class io.netty.handler.codec.compression.ZstdEncoder extends io.netty.handler.codec.MessageToByteEncoder<io.netty.buffer.ByteBuf> {
  private final int blockSize;

  private final int compressionLevel;

  private final int maxEncodeSize;

  private io.netty.buffer.ByteBuf buffer;

  public io.netty.handler.codec.compression.ZstdEncoder();
    Code:
       0: aload_0
       1: iconst_3
       2: ldc           #2                  // int 65536
       4: ldc           #3                  // int 33554432
       6: invokespecial #4                  // Method "<init>":(III)V
       9: return

  public io.netty.handler.codec.compression.ZstdEncoder(int);
    Code:
       0: aload_0
       1: iload_1
       2: ldc           #2                  // int 65536
       4: ldc           #3                  // int 33554432
       6: invokespecial #4                  // Method "<init>":(III)V
       9: return

  public io.netty.handler.codec.compression.ZstdEncoder(int, int);
    Code:
       0: aload_0
       1: iconst_3
       2: iload_1
       3: iload_2
       4: invokespecial #4                  // Method "<init>":(III)V
       7: return

  public io.netty.handler.codec.compression.ZstdEncoder(int, int, int);
    Code:
       0: aload_0
       1: iconst_1
       2: invokespecial #5                  // Method io/netty/handler/codec/MessageToByteEncoder."<init>":(Z)V
       5: aload_0
       6: iload_1
       7: iconst_0
       8: bipush        22
      10: ldc           #6                  // String compressionLevel
      12: invokestatic  #7                  // Method io/netty/util/internal/ObjectUtil.checkInRange:(IIILjava/lang/String;)I
      15: putfield      #8                  // Field compressionLevel:I
      18: aload_0
      19: iload_2
      20: ldc           #9                  // String blockSize
      22: invokestatic  #10                 // Method io/netty/util/internal/ObjectUtil.checkPositive:(ILjava/lang/String;)I
      25: putfield      #11                 // Field blockSize:I
      28: aload_0
      29: iload_3
      30: ldc           #12                 // String maxEncodeSize
      32: invokestatic  #10                 // Method io/netty/util/internal/ObjectUtil.checkPositive:(ILjava/lang/String;)I
      35: putfield      #13                 // Field maxEncodeSize:I
      38: return

  protected io.netty.buffer.ByteBuf allocateBuffer(io.netty.channel.ChannelHandlerContext, io.netty.buffer.ByteBuf, boolean);
    Code:
       0: aload_0
       1: getfield      #14                 // Field buffer:Lio/netty/buffer/ByteBuf;
       4: ifnonnull     17
       7: new           #15                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #16                 // String not added to a pipeline,or has been removed,buffer is null
      13: invokespecial #17                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_2
      18: invokevirtual #18                 // Method io/netty/buffer/ByteBuf.readableBytes:()I
      21: aload_0
      22: getfield      #14                 // Field buffer:Lio/netty/buffer/ByteBuf;
      25: invokevirtual #18                 // Method io/netty/buffer/ByteBuf.readableBytes:()I
      28: iadd
      29: istore        4
      31: iload         4
      33: ifge          46
      36: new           #19                 // class io/netty/handler/codec/EncoderException
      39: dup
      40: ldc           #20                 // String too much data to allocate a buffer for compression
      42: invokespecial #21                 // Method io/netty/handler/codec/EncoderException."<init>":(Ljava/lang/String;)V
      45: athrow
      46: lconst_0
      47: lstore        5
      49: iload         4
      51: ifle          86
      54: aload_0
      55: getfield      #11                 // Field blockSize:I
      58: iload         4
      60: invokestatic  #22                 // Method java/lang/Math.min:(II)I
      63: istore        7
      65: iload         4
      67: iload         7
      69: isub
      70: istore        4
      72: lload         5
      74: iload         7
      76: i2l
      77: invokestatic  #23                 // Method com/github/luben/zstd/Zstd.compressBound:(J)J
      80: ladd
      81: lstore        5
      83: goto          49
      86: lload         5
      88: aload_0
      89: getfield      #13                 // Field maxEncodeSize:I
      92: i2l
      93: lcmp
      94: ifgt          104
      97: lconst_0
      98: lload         5
     100: lcmp
     101: ifle          149
     104: new           #19                 // class io/netty/handler/codec/EncoderException
     107: dup
     108: new           #24                 // class java/lang/StringBuilder
     111: dup
     112: invokespecial #25                 // Method java/lang/StringBuilder."<init>":()V
     115: ldc           #26                 // String requested encode buffer size (
     117: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     120: lload         5
     122: invokevirtual #28                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
     125: ldc           #29                 // String  bytes) exceeds the maximum allowable size (
     127: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     130: aload_0
     131: getfield      #13                 // Field maxEncodeSize:I
     134: invokevirtual #30                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     137: ldc           #31                 // String  bytes)
     139: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     142: invokevirtual #32                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     145: invokespecial #21                 // Method io/netty/handler/codec/EncoderException."<init>":(Ljava/lang/String;)V
     148: athrow
     149: aload_1
     150: invokeinterface #33,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.alloc:()Lio/netty/buffer/ByteBufAllocator;
     155: lload         5
     157: l2i
     158: invokeinterface #34,  2           // InterfaceMethod io/netty/buffer/ByteBufAllocator.directBuffer:(I)Lio/netty/buffer/ByteBuf;
     163: areturn

  protected void encode(io.netty.channel.ChannelHandlerContext, io.netty.buffer.ByteBuf, io.netty.buffer.ByteBuf);
    Code:
       0: aload_0
       1: getfield      #14                 // Field buffer:Lio/netty/buffer/ByteBuf;
       4: ifnonnull     17
       7: new           #15                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #16                 // String not added to a pipeline,or has been removed,buffer is null
      13: invokespecial #17                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #14                 // Field buffer:Lio/netty/buffer/ByteBuf;
      21: astore        4
      23: aload_2
      24: invokevirtual #18                 // Method io/netty/buffer/ByteBuf.readableBytes:()I
      27: dup
      28: istore        5
      30: ifle          70
      33: iload         5
      35: aload         4
      37: invokevirtual #35                 // Method io/netty/buffer/ByteBuf.writableBytes:()I
      40: invokestatic  #22                 // Method java/lang/Math.min:(II)I
      43: istore        6
      45: aload_2
      46: aload         4
      48: iload         6
      50: invokevirtual #36                 // Method io/netty/buffer/ByteBuf.readBytes:(Lio/netty/buffer/ByteBuf;I)Lio/netty/buffer/ByteBuf;
      53: pop
      54: aload         4
      56: invokevirtual #37                 // Method io/netty/buffer/ByteBuf.isWritable:()Z
      59: ifne          67
      62: aload_0
      63: aload_3
      64: invokespecial #38                 // Method flushBufferedData:(Lio/netty/buffer/ByteBuf;)V
      67: goto          23
      70: return

  private void flushBufferedData(io.netty.buffer.ByteBuf);
    Code:
       0: aload_0
       1: getfield      #14                 // Field buffer:Lio/netty/buffer/ByteBuf;
       4: invokevirtual #18                 // Method io/netty/buffer/ByteBuf.readableBytes:()I
       7: istore_2
       8: iload_2
       9: ifne          13
      12: return
      13: iload_2
      14: i2l
      15: invokestatic  #23                 // Method com/github/luben/zstd/Zstd.compressBound:(J)J
      18: l2i
      19: istore_3
      20: aload_1
      21: iload_3
      22: invokevirtual #39                 // Method io/netty/buffer/ByteBuf.ensureWritable:(I)Lio/netty/buffer/ByteBuf;
      25: pop
      26: aload_1
      27: invokevirtual #40                 // Method io/netty/buffer/ByteBuf.writerIndex:()I
      30: istore        4
      32: aload_1
      33: iload         4
      35: aload_1
      36: invokevirtual #35                 // Method io/netty/buffer/ByteBuf.writableBytes:()I
      39: invokevirtual #41                 // Method io/netty/buffer/ByteBuf.internalNioBuffer:(II)Ljava/nio/ByteBuffer;
      42: astore        6
      44: aload         6
      46: aload_0
      47: getfield      #14                 // Field buffer:Lio/netty/buffer/ByteBuf;
      50: aload_0
      51: getfield      #14                 // Field buffer:Lio/netty/buffer/ByteBuf;
      54: invokevirtual #42                 // Method io/netty/buffer/ByteBuf.readerIndex:()I
      57: iload_2
      58: invokevirtual #41                 // Method io/netty/buffer/ByteBuf.internalNioBuffer:(II)Ljava/nio/ByteBuffer;
      61: aload_0
      62: getfield      #8                  // Field compressionLevel:I
      65: invokestatic  #43                 // Method com/github/luben/zstd/Zstd.compress:(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;I)I
      68: istore        5
      70: goto          85
      73: astore        6
      75: new           #45                 // class io/netty/handler/codec/compression/CompressionException
      78: dup
      79: aload         6
      81: invokespecial #46                 // Method io/netty/handler/codec/compression/CompressionException."<init>":(Ljava/lang/Throwable;)V
      84: athrow
      85: aload_1
      86: iload         4
      88: iload         5
      90: iadd
      91: invokevirtual #47                 // Method io/netty/buffer/ByteBuf.writerIndex:(I)Lio/netty/buffer/ByteBuf;
      94: pop
      95: aload_0
      96: getfield      #14                 // Field buffer:Lio/netty/buffer/ByteBuf;
      99: invokevirtual #48                 // Method io/netty/buffer/ByteBuf.clear:()Lio/netty/buffer/ByteBuf;
     102: pop
     103: return
    Exception table:
       from    to  target type
          32    70    73   Class java/lang/Exception

  public void flush(io.netty.channel.ChannelHandlerContext);
    Code:
       0: aload_0
       1: getfield      #14                 // Field buffer:Lio/netty/buffer/ByteBuf;
       4: ifnull        43
       7: aload_0
       8: getfield      #14                 // Field buffer:Lio/netty/buffer/ByteBuf;
      11: invokevirtual #49                 // Method io/netty/buffer/ByteBuf.isReadable:()Z
      14: ifeq          43
      17: aload_0
      18: aload_1
      19: getstatic     #50                 // Field io/netty/buffer/Unpooled.EMPTY_BUFFER:Lio/netty/buffer/ByteBuf;
      22: aload_0
      23: invokevirtual #51                 // Method isPreferDirect:()Z
      26: invokevirtual #52                 // Method allocateBuffer:(Lio/netty/channel/ChannelHandlerContext;Lio/netty/buffer/ByteBuf;Z)Lio/netty/buffer/ByteBuf;
      29: astore_2
      30: aload_0
      31: aload_2
      32: invokespecial #38                 // Method flushBufferedData:(Lio/netty/buffer/ByteBuf;)V
      35: aload_1
      36: aload_2
      37: invokeinterface #53,  2           // InterfaceMethod io/netty/channel/ChannelHandlerContext.write:(Ljava/lang/Object;)Lio/netty/channel/ChannelFuture;
      42: pop
      43: aload_1
      44: invokeinterface #54,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.flush:()Lio/netty/channel/ChannelHandlerContext;
      49: pop
      50: return

  public void handlerAdded(io.netty.channel.ChannelHandlerContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #33,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.alloc:()Lio/netty/buffer/ByteBufAllocator;
       7: aload_0
       8: getfield      #11                 // Field blockSize:I
      11: invokeinterface #34,  2           // InterfaceMethod io/netty/buffer/ByteBufAllocator.directBuffer:(I)Lio/netty/buffer/ByteBuf;
      16: putfield      #14                 // Field buffer:Lio/netty/buffer/ByteBuf;
      19: aload_0
      20: getfield      #14                 // Field buffer:Lio/netty/buffer/ByteBuf;
      23: invokevirtual #48                 // Method io/netty/buffer/ByteBuf.clear:()Lio/netty/buffer/ByteBuf;
      26: pop
      27: return

  public void handlerRemoved(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #55                 // Method io/netty/handler/codec/MessageToByteEncoder.handlerRemoved:(Lio/netty/channel/ChannelHandlerContext;)V
       5: aload_0
       6: getfield      #14                 // Field buffer:Lio/netty/buffer/ByteBuf;
       9: ifnull        25
      12: aload_0
      13: getfield      #14                 // Field buffer:Lio/netty/buffer/ByteBuf;
      16: invokevirtual #56                 // Method io/netty/buffer/ByteBuf.release:()Z
      19: pop
      20: aload_0
      21: aconst_null
      22: putfield      #14                 // Field buffer:Lio/netty/buffer/ByteBuf;
      25: return

  protected void encode(io.netty.channel.ChannelHandlerContext, java.lang.Object, io.netty.buffer.ByteBuf) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: checkcast     #57                 // class io/netty/buffer/ByteBuf
       6: aload_3
       7: invokevirtual #58                 // Method encode:(Lio/netty/channel/ChannelHandlerContext;Lio/netty/buffer/ByteBuf;Lio/netty/buffer/ByteBuf;)V
      10: return

  protected io.netty.buffer.ByteBuf allocateBuffer(io.netty.channel.ChannelHandlerContext, java.lang.Object, boolean) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: checkcast     #57                 // class io/netty/buffer/ByteBuf
       6: iload_3
       7: invokevirtual #52                 // Method allocateBuffer:(Lio/netty/channel/ChannelHandlerContext;Lio/netty/buffer/ByteBuf;Z)Lio/netty/buffer/ByteBuf;
      10: areturn
}
