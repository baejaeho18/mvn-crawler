Compiled from "JCommander.java"
class com.beust.jcommander.JCommander$Options {
  private java.util.ResourceBundle bundle;

  private com.beust.jcommander.IDefaultProvider defaultProvider;

  private java.util.Comparator<? super com.beust.jcommander.ParameterDescription> parameterDescriptionComparator;

  private int columnSize;

  private boolean acceptUnknownOptions;

  private boolean allowParameterOverwriting;

  private boolean expandAtSign;

  private int verbose;

  private boolean caseSensitiveOptions;

  private boolean allowAbbreviatedOptions;

  private final java.util.List<com.beust.jcommander.IStringConverterInstanceFactory> converterInstanceFactories;

  private java.nio.charset.Charset atFileCharset;

  private com.beust.jcommander.JCommander$Options();
    Code:
       0: aload_0
       1: invokespecial #14                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #15                 // class com/beust/jcommander/JCommander$Options$1
       8: dup
       9: aload_0
      10: invokespecial #16                 // Method com/beust/jcommander/JCommander$Options$1."<init>":(Lcom/beust/jcommander/JCommander$Options;)V
      13: putfield      #4                  // Field parameterDescriptionComparator:Ljava/util/Comparator;
      16: aload_0
      17: bipush        79
      19: putfield      #3                  // Field columnSize:I
      22: aload_0
      23: iconst_0
      24: putfield      #6                  // Field acceptUnknownOptions:Z
      27: aload_0
      28: iconst_0
      29: putfield      #1                  // Field allowParameterOverwriting:Z
      32: aload_0
      33: iconst_1
      34: putfield      #11                 // Field expandAtSign:Z
      37: aload_0
      38: iconst_0
      39: putfield      #2                  // Field verbose:I
      42: aload_0
      43: iconst_1
      44: putfield      #8                  // Field caseSensitiveOptions:Z
      47: aload_0
      48: iconst_0
      49: putfield      #7                  // Field allowAbbreviatedOptions:Z
      52: aload_0
      53: new           #17                 // class java/util/concurrent/CopyOnWriteArrayList
      56: dup
      57: invokespecial #18                 // Method java/util/concurrent/CopyOnWriteArrayList."<init>":()V
      60: putfield      #13                 // Field converterInstanceFactories:Ljava/util/List;
      63: aload_0
      64: invokestatic  #19                 // Method java/nio/charset/Charset.defaultCharset:()Ljava/nio/charset/Charset;
      67: putfield      #5                  // Field atFileCharset:Ljava/nio/charset/Charset;
      70: return

  static java.util.List access$000(com.beust.jcommander.JCommander$Options);
    Code:
       0: aload_0
       1: getfield      #13                 // Field converterInstanceFactories:Ljava/util/List;
       4: areturn

  com.beust.jcommander.JCommander$Options(com.beust.jcommander.JCommander$1);
    Code:
       0: aload_0
       1: invokespecial #12                 // Method "<init>":()V
       4: return

  static boolean access$202(com.beust.jcommander.JCommander$Options, boolean);
    Code:
       0: aload_0
       1: iload_1
       2: dup_x1
       3: putfield      #11                 // Field expandAtSign:Z
       6: ireturn

  static java.util.ResourceBundle access$302(com.beust.jcommander.JCommander$Options, java.util.ResourceBundle);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #10                 // Field bundle:Ljava/util/ResourceBundle;
       6: areturn

  static com.beust.jcommander.IDefaultProvider access$400(com.beust.jcommander.JCommander$Options);
    Code:
       0: aload_0
       1: getfield      #9                  // Field defaultProvider:Lcom/beust/jcommander/IDefaultProvider;
       4: areturn

  static boolean access$200(com.beust.jcommander.JCommander$Options);
    Code:
       0: aload_0
       1: getfield      #11                 // Field expandAtSign:Z
       4: ireturn

  static boolean access$600(com.beust.jcommander.JCommander$Options);
    Code:
       0: aload_0
       1: getfield      #8                  // Field caseSensitiveOptions:Z
       4: ireturn

  static boolean access$700(com.beust.jcommander.JCommander$Options);
    Code:
       0: aload_0
       1: getfield      #7                  // Field allowAbbreviatedOptions:Z
       4: ireturn

  static boolean access$800(com.beust.jcommander.JCommander$Options);
    Code:
       0: aload_0
       1: getfield      #6                  // Field acceptUnknownOptions:Z
       4: ireturn

  static java.nio.charset.Charset access$900(com.beust.jcommander.JCommander$Options);
    Code:
       0: aload_0
       1: getfield      #5                  // Field atFileCharset:Ljava/nio/charset/Charset;
       4: areturn

  static java.util.ResourceBundle access$300(com.beust.jcommander.JCommander$Options);
    Code:
       0: aload_0
       1: getfield      #10                 // Field bundle:Ljava/util/ResourceBundle;
       4: areturn

  static java.util.Comparator access$1600(com.beust.jcommander.JCommander$Options);
    Code:
       0: aload_0
       1: getfield      #4                  // Field parameterDescriptionComparator:Ljava/util/Comparator;
       4: areturn

  static java.util.Comparator access$1602(com.beust.jcommander.JCommander$Options, java.util.Comparator);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #4                  // Field parameterDescriptionComparator:Ljava/util/Comparator;
       6: areturn

  static int access$1702(com.beust.jcommander.JCommander$Options, int);
    Code:
       0: aload_0
       1: iload_1
       2: dup_x1
       3: putfield      #3                  // Field columnSize:I
       6: ireturn

  static int access$1700(com.beust.jcommander.JCommander$Options);
    Code:
       0: aload_0
       1: getfield      #3                  // Field columnSize:I
       4: ireturn

  static int access$1800(com.beust.jcommander.JCommander$Options);
    Code:
       0: aload_0
       1: getfield      #2                  // Field verbose:I
       4: ireturn

  static com.beust.jcommander.IDefaultProvider access$402(com.beust.jcommander.JCommander$Options, com.beust.jcommander.IDefaultProvider);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #9                  // Field defaultProvider:Lcom/beust/jcommander/IDefaultProvider;
       6: areturn

  static int access$1802(com.beust.jcommander.JCommander$Options, int);
    Code:
       0: aload_0
       1: iload_1
       2: dup_x1
       3: putfield      #2                  // Field verbose:I
       6: ireturn

  static boolean access$602(com.beust.jcommander.JCommander$Options, boolean);
    Code:
       0: aload_0
       1: iload_1
       2: dup_x1
       3: putfield      #8                  // Field caseSensitiveOptions:Z
       6: ireturn

  static boolean access$702(com.beust.jcommander.JCommander$Options, boolean);
    Code:
       0: aload_0
       1: iload_1
       2: dup_x1
       3: putfield      #7                  // Field allowAbbreviatedOptions:Z
       6: ireturn

  static boolean access$802(com.beust.jcommander.JCommander$Options, boolean);
    Code:
       0: aload_0
       1: iload_1
       2: dup_x1
       3: putfield      #6                  // Field acceptUnknownOptions:Z
       6: ireturn

  static boolean access$2002(com.beust.jcommander.JCommander$Options, boolean);
    Code:
       0: aload_0
       1: iload_1
       2: dup_x1
       3: putfield      #1                  // Field allowParameterOverwriting:Z
       6: ireturn

  static boolean access$2000(com.beust.jcommander.JCommander$Options);
    Code:
       0: aload_0
       1: getfield      #1                  // Field allowParameterOverwriting:Z
       4: ireturn

  static java.nio.charset.Charset access$902(com.beust.jcommander.JCommander$Options, java.nio.charset.Charset);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #5                  // Field atFileCharset:Ljava/nio/charset/Charset;
       6: areturn
}
