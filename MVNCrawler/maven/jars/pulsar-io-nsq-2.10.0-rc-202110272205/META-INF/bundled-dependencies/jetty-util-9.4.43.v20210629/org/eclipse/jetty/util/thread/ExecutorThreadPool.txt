Compiled from "ExecutorThreadPool.java"
public class org.eclipse.jetty.util.thread.ExecutorThreadPool extends org.eclipse.jetty.util.component.ContainerLifeCycle implements org.eclipse.jetty.util.thread.ThreadPool$SizedThreadPool,org.eclipse.jetty.util.thread.TryExecutor {
  private final java.util.concurrent.ThreadPoolExecutor _executor;

  private final org.eclipse.jetty.util.thread.ThreadPoolBudget _budget;

  private final java.lang.ThreadGroup _group;

  private java.lang.String _name;

  private int _minThreads;

  private int _reservedThreads;

  private org.eclipse.jetty.util.thread.TryExecutor _tryExecutor;

  private int _priority;

  private boolean _daemon;

  private boolean _detailedDump;

  public org.eclipse.jetty.util.thread.ExecutorThreadPool();
    Code:
       0: aload_0
       1: sipush        200
       4: bipush        8
       6: invokespecial #1                  // Method "<init>":(II)V
       9: return

  public org.eclipse.jetty.util.thread.ExecutorThreadPool(int);
    Code:
       0: aload_0
       1: iload_1
       2: bipush        8
       4: iload_1
       5: invokestatic  #2                  // Method java/lang/Math.min:(II)I
       8: invokespecial #1                  // Method "<init>":(II)V
      11: return

  public org.eclipse.jetty.util.thread.ExecutorThreadPool(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: new           #3                  // class java/util/concurrent/LinkedBlockingQueue
       6: dup
       7: invokespecial #4                  // Method java/util/concurrent/LinkedBlockingQueue."<init>":()V
      10: invokespecial #5                  // Method "<init>":(IILjava/util/concurrent/BlockingQueue;)V
      13: return

  public org.eclipse.jetty.util.thread.ExecutorThreadPool(int, int, java.util.concurrent.BlockingQueue<java.lang.Runnable>);
    Code:
       0: aload_0
       1: new           #6                  // class java/util/concurrent/ThreadPoolExecutor
       4: dup
       5: iload_1
       6: iload_1
       7: ldc2_w        #7                  // long 60l
      10: getstatic     #9                  // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
      13: aload_3
      14: invokespecial #10                 // Method java/util/concurrent/ThreadPoolExecutor."<init>":(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;)V
      17: iload_2
      18: iconst_m1
      19: aconst_null
      20: invokespecial #11                 // Method "<init>":(Ljava/util/concurrent/ThreadPoolExecutor;IILjava/lang/ThreadGroup;)V
      23: return

  public org.eclipse.jetty.util.thread.ExecutorThreadPool(java.util.concurrent.ThreadPoolExecutor);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_m1
       3: invokespecial #12                 // Method "<init>":(Ljava/util/concurrent/ThreadPoolExecutor;I)V
       6: return

  public org.eclipse.jetty.util.thread.ExecutorThreadPool(java.util.concurrent.ThreadPoolExecutor, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: aconst_null
       4: invokespecial #13                 // Method "<init>":(Ljava/util/concurrent/ThreadPoolExecutor;ILjava/lang/ThreadGroup;)V
       7: return

  public org.eclipse.jetty.util.thread.ExecutorThreadPool(java.util.concurrent.ThreadPoolExecutor, int, java.lang.ThreadGroup);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #14                 // Method org/eclipse/jetty/util/ProcessorUtils.availableProcessors:()I
       5: aload_1
       6: invokevirtual #15                 // Method java/util/concurrent/ThreadPoolExecutor.getCorePoolSize:()I
       9: invokestatic  #2                  // Method java/lang/Math.min:(II)I
      12: iload_2
      13: aload_3
      14: invokespecial #11                 // Method "<init>":(Ljava/util/concurrent/ThreadPoolExecutor;IILjava/lang/ThreadGroup;)V
      17: return

  private org.eclipse.jetty.util.thread.ExecutorThreadPool(java.util.concurrent.ThreadPoolExecutor, int, int, java.lang.ThreadGroup);
    Code:
       0: aload_0
       1: invokespecial #16                 // Method org/eclipse/jetty/util/component/ContainerLifeCycle."<init>":()V
       4: aload_0
       5: new           #17                 // class java/lang/StringBuilder
       8: dup
       9: invokespecial #18                 // Method java/lang/StringBuilder."<init>":()V
      12: ldc           #19                 // String etp
      14: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      17: aload_0
      18: invokevirtual #21                 // Method java/lang/Object.hashCode:()I
      21: invokevirtual #22                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      24: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      27: putfield      #24                 // Field _name:Ljava/lang/String;
      30: aload_0
      31: iconst_m1
      32: putfield      #25                 // Field _reservedThreads:I
      35: aload_0
      36: getstatic     #26                 // Field org/eclipse/jetty/util/thread/TryExecutor.NO_TRY:Lorg/eclipse/jetty/util/thread/TryExecutor;
      39: putfield      #27                 // Field _tryExecutor:Lorg/eclipse/jetty/util/thread/TryExecutor;
      42: aload_0
      43: iconst_5
      44: putfield      #29                 // Field _priority:I
      47: aload_1
      48: invokevirtual #30                 // Method java/util/concurrent/ThreadPoolExecutor.getMaximumPoolSize:()I
      51: istore        5
      53: iload         5
      55: iload_2
      56: if_icmpge     106
      59: aload_1
      60: invokevirtual #31                 // Method java/util/concurrent/ThreadPoolExecutor.shutdownNow:()Ljava/util/List;
      63: pop
      64: new           #32                 // class java/lang/IllegalArgumentException
      67: dup
      68: new           #17                 // class java/lang/StringBuilder
      71: dup
      72: invokespecial #18                 // Method java/lang/StringBuilder."<init>":()V
      75: ldc           #33                 // String max threads (
      77: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      80: iload         5
      82: invokevirtual #22                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      85: ldc           #34                 // String ) cannot be less than min threads (
      87: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      90: iload_2
      91: invokevirtual #22                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      94: ldc           #35                 // String )
      96: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      99: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     102: invokespecial #36                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     105: athrow
     106: aload_0
     107: aload_1
     108: putfield      #37                 // Field _executor:Ljava/util/concurrent/ThreadPoolExecutor;
     111: aload_0
     112: getfield      #37                 // Field _executor:Ljava/util/concurrent/ThreadPoolExecutor;
     115: aload_0
     116: invokedynamic #38,  0             // InvokeDynamic #0:newThread:(Lorg/eclipse/jetty/util/thread/ExecutorThreadPool;)Ljava/util/concurrent/ThreadFactory;
     121: invokevirtual #39                 // Method java/util/concurrent/ThreadPoolExecutor.setThreadFactory:(Ljava/util/concurrent/ThreadFactory;)V
     124: aload_0
     125: aload         4
     127: putfield      #40                 // Field _group:Ljava/lang/ThreadGroup;
     130: aload_0
     131: iload_2
     132: putfield      #41                 // Field _minThreads:I
     135: aload_0
     136: iload_3
     137: putfield      #25                 // Field _reservedThreads:I
     140: aload_0
     141: new           #42                 // class org/eclipse/jetty/util/thread/ThreadPoolBudget
     144: dup
     145: aload_0
     146: invokespecial #43                 // Method org/eclipse/jetty/util/thread/ThreadPoolBudget."<init>":(Lorg/eclipse/jetty/util/thread/ThreadPool$SizedThreadPool;)V
     149: putfield      #44                 // Field _budget:Lorg/eclipse/jetty/util/thread/ThreadPoolBudget;
     152: return

  public java.lang.String getName();
    Code:
       0: aload_0
       1: getfield      #24                 // Field _name:Ljava/lang/String;
       4: areturn

  public void setName(java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #45                 // Method isRunning:()Z
       4: ifeq          19
       7: new           #46                 // class java/lang/IllegalStateException
      10: dup
      11: aload_0
      12: invokevirtual #47                 // Method getState:()Ljava/lang/String;
      15: invokespecial #48                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      18: athrow
      19: aload_0
      20: aload_1
      21: putfield      #24                 // Field _name:Ljava/lang/String;
      24: return

  public int getMinThreads();
    Code:
       0: aload_0
       1: getfield      #41                 // Field _minThreads:I
       4: ireturn

  public void setMinThreads(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #41                 // Field _minThreads:I
       5: return

  public int getMaxThreads();
    Code:
       0: aload_0
       1: getfield      #37                 // Field _executor:Ljava/util/concurrent/ThreadPoolExecutor;
       4: invokevirtual #30                 // Method java/util/concurrent/ThreadPoolExecutor.getMaximumPoolSize:()I
       7: ireturn

  public void setMaxThreads(int);
    Code:
       0: aload_0
       1: getfield      #44                 // Field _budget:Lorg/eclipse/jetty/util/thread/ThreadPoolBudget;
       4: ifnull        16
       7: aload_0
       8: getfield      #44                 // Field _budget:Lorg/eclipse/jetty/util/thread/ThreadPoolBudget;
      11: iload_1
      12: invokevirtual #49                 // Method org/eclipse/jetty/util/thread/ThreadPoolBudget.check:(I)Z
      15: pop
      16: aload_0
      17: getfield      #37                 // Field _executor:Ljava/util/concurrent/ThreadPoolExecutor;
      20: iload_1
      21: invokevirtual #50                 // Method java/util/concurrent/ThreadPoolExecutor.setCorePoolSize:(I)V
      24: aload_0
      25: getfield      #37                 // Field _executor:Ljava/util/concurrent/ThreadPoolExecutor;
      28: iload_1
      29: invokevirtual #51                 // Method java/util/concurrent/ThreadPoolExecutor.setMaximumPoolSize:(I)V
      32: return

  public int getIdleTimeout();
    Code:
       0: aload_0
       1: getfield      #37                 // Field _executor:Ljava/util/concurrent/ThreadPoolExecutor;
       4: getstatic     #52                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
       7: invokevirtual #53                 // Method java/util/concurrent/ThreadPoolExecutor.getKeepAliveTime:(Ljava/util/concurrent/TimeUnit;)J
      10: l2i
      11: ireturn

  public void setIdleTimeout(int);
    Code:
       0: aload_0
       1: getfield      #37                 // Field _executor:Ljava/util/concurrent/ThreadPoolExecutor;
       4: iload_1
       5: i2l
       6: getstatic     #52                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
       9: invokevirtual #54                 // Method java/util/concurrent/ThreadPoolExecutor.setKeepAliveTime:(JLjava/util/concurrent/TimeUnit;)V
      12: return

  public int getReservedThreads();
    Code:
       0: aload_0
       1: invokevirtual #55                 // Method isStarted:()Z
       4: ifeq          20
       7: aload_0
       8: ldc           #56                 // class org/eclipse/jetty/util/thread/ReservedThreadExecutor
      10: invokevirtual #57                 // Method getBean:(Ljava/lang/Class;)Ljava/lang/Object;
      13: checkcast     #56                 // class org/eclipse/jetty/util/thread/ReservedThreadExecutor
      16: invokevirtual #58                 // Method org/eclipse/jetty/util/thread/ReservedThreadExecutor.getCapacity:()I
      19: ireturn
      20: aload_0
      21: getfield      #25                 // Field _reservedThreads:I
      24: ireturn

  public void setReservedThreads(int);
    Code:
       0: aload_0
       1: invokevirtual #45                 // Method isRunning:()Z
       4: ifeq          19
       7: new           #46                 // class java/lang/IllegalStateException
      10: dup
      11: aload_0
      12: invokevirtual #47                 // Method getState:()Ljava/lang/String;
      15: invokespecial #48                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      18: athrow
      19: aload_0
      20: iload_1
      21: putfield      #25                 // Field _reservedThreads:I
      24: return

  public void setThreadsPriority(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #29                 // Field _priority:I
       5: return

  public int getThreadsPriority();
    Code:
       0: aload_0
       1: getfield      #29                 // Field _priority:I
       4: ireturn

  public boolean isDaemon();
    Code:
       0: aload_0
       1: getfield      #59                 // Field _daemon:Z
       4: ireturn

  public void setDaemon(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #59                 // Field _daemon:Z
       5: return

  public boolean isDetailedDump();
    Code:
       0: aload_0
       1: getfield      #60                 // Field _detailedDump:Z
       4: ireturn

  public void setDetailedDump(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #60                 // Field _detailedDump:Z
       5: return

  public int getThreads();
    Code:
       0: aload_0
       1: getfield      #37                 // Field _executor:Ljava/util/concurrent/ThreadPoolExecutor;
       4: invokevirtual #61                 // Method java/util/concurrent/ThreadPoolExecutor.getPoolSize:()I
       7: ireturn

  public int getIdleThreads();
    Code:
       0: aload_0
       1: getfield      #37                 // Field _executor:Ljava/util/concurrent/ThreadPoolExecutor;
       4: invokevirtual #61                 // Method java/util/concurrent/ThreadPoolExecutor.getPoolSize:()I
       7: aload_0
       8: getfield      #37                 // Field _executor:Ljava/util/concurrent/ThreadPoolExecutor;
      11: invokevirtual #62                 // Method java/util/concurrent/ThreadPoolExecutor.getActiveCount:()I
      14: isub
      15: ireturn

  public void execute(java.lang.Runnable);
    Code:
       0: aload_0
       1: getfield      #37                 // Field _executor:Ljava/util/concurrent/ThreadPoolExecutor;
       4: aload_1
       5: invokevirtual #63                 // Method java/util/concurrent/ThreadPoolExecutor.execute:(Ljava/lang/Runnable;)V
       8: return

  public boolean tryExecute(java.lang.Runnable);
    Code:
       0: aload_0
       1: getfield      #27                 // Field _tryExecutor:Lorg/eclipse/jetty/util/thread/TryExecutor;
       4: astore_2
       5: aload_2
       6: ifnull        23
       9: aload_2
      10: aload_1
      11: invokeinterface #64,  2           // InterfaceMethod org/eclipse/jetty/util/thread/TryExecutor.tryExecute:(Ljava/lang/Runnable;)Z
      16: ifeq          23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: ireturn

  public boolean isLowOnThreads();
    Code:
       0: aload_0
       1: invokevirtual #65                 // Method getThreads:()I
       4: aload_0
       5: invokevirtual #66                 // Method getMaxThreads:()I
       8: if_icmpne     34
      11: aload_0
      12: getfield      #37                 // Field _executor:Ljava/util/concurrent/ThreadPoolExecutor;
      15: invokevirtual #67                 // Method java/util/concurrent/ThreadPoolExecutor.getQueue:()Ljava/util/concurrent/BlockingQueue;
      18: invokeinterface #68,  1           // InterfaceMethod java/util/concurrent/BlockingQueue.size:()I
      23: aload_0
      24: invokevirtual #69                 // Method getIdleThreads:()I
      27: if_icmplt     34
      30: iconst_1
      31: goto          35
      34: iconst_0
      35: ireturn

  protected void doStart() throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #37                 // Field _executor:Ljava/util/concurrent/ThreadPoolExecutor;
       4: invokevirtual #70                 // Method java/util/concurrent/ThreadPoolExecutor.isShutdown:()Z
       7: ifeq          20
      10: new           #46                 // class java/lang/IllegalStateException
      13: dup
      14: ldc           #71                 // String This thread pool is not restartable
      16: invokespecial #48                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      19: athrow
      20: iconst_0
      21: istore_1
      22: iload_1
      23: aload_0
      24: getfield      #41                 // Field _minThreads:I
      27: if_icmpge     44
      30: aload_0
      31: getfield      #37                 // Field _executor:Ljava/util/concurrent/ThreadPoolExecutor;
      34: invokevirtual #72                 // Method java/util/concurrent/ThreadPoolExecutor.prestartCoreThread:()Z
      37: pop
      38: iinc          1, 1
      41: goto          22
      44: aload_0
      45: new           #56                 // class org/eclipse/jetty/util/thread/ReservedThreadExecutor
      48: dup
      49: aload_0
      50: aload_0
      51: getfield      #25                 // Field _reservedThreads:I
      54: invokespecial #73                 // Method org/eclipse/jetty/util/thread/ReservedThreadExecutor."<init>":(Ljava/util/concurrent/Executor;I)V
      57: putfield      #27                 // Field _tryExecutor:Lorg/eclipse/jetty/util/thread/TryExecutor;
      60: aload_0
      61: aload_0
      62: getfield      #27                 // Field _tryExecutor:Lorg/eclipse/jetty/util/thread/TryExecutor;
      65: invokevirtual #74                 // Method addBean:(Ljava/lang/Object;)Z
      68: pop
      69: aload_0
      70: invokespecial #75                 // Method org/eclipse/jetty/util/component/ContainerLifeCycle.doStart:()V
      73: return

  protected void doStop() throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokespecial #76                 // Method org/eclipse/jetty/util/component/ContainerLifeCycle.doStop:()V
       4: aload_0
       5: aload_0
       6: getfield      #27                 // Field _tryExecutor:Lorg/eclipse/jetty/util/thread/TryExecutor;
       9: invokevirtual #77                 // Method removeBean:(Ljava/lang/Object;)Z
      12: pop
      13: aload_0
      14: getstatic     #26                 // Field org/eclipse/jetty/util/thread/TryExecutor.NO_TRY:Lorg/eclipse/jetty/util/thread/TryExecutor;
      17: putfield      #27                 // Field _tryExecutor:Lorg/eclipse/jetty/util/thread/TryExecutor;
      20: aload_0
      21: getfield      #37                 // Field _executor:Ljava/util/concurrent/ThreadPoolExecutor;
      24: invokevirtual #31                 // Method java/util/concurrent/ThreadPoolExecutor.shutdownNow:()Ljava/util/List;
      27: pop
      28: aload_0
      29: getfield      #44                 // Field _budget:Lorg/eclipse/jetty/util/thread/ThreadPoolBudget;
      32: invokevirtual #78                 // Method org/eclipse/jetty/util/thread/ThreadPoolBudget.reset:()V
      35: return

  public void join() throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: getfield      #37                 // Field _executor:Ljava/util/concurrent/ThreadPoolExecutor;
       4: ldc2_w        #80                 // long 9223372036854775807l
       7: getstatic     #52                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      10: invokevirtual #82                 // Method java/util/concurrent/ThreadPoolExecutor.awaitTermination:(JLjava/util/concurrent/TimeUnit;)Z
      13: pop
      14: return

  public org.eclipse.jetty.util.thread.ThreadPoolBudget getThreadPoolBudget();
    Code:
       0: aload_0
       1: getfield      #44                 // Field _budget:Lorg/eclipse/jetty/util/thread/ThreadPoolBudget;
       4: areturn

  protected java.lang.Thread newThread(java.lang.Runnable);
    Code:
       0: new           #28                 // class java/lang/Thread
       3: dup
       4: aload_0
       5: getfield      #40                 // Field _group:Ljava/lang/ThreadGroup;
       8: aload_1
       9: invokespecial #83                 // Method java/lang/Thread."<init>":(Ljava/lang/ThreadGroup;Ljava/lang/Runnable;)V
      12: astore_2
      13: aload_2
      14: aload_0
      15: invokevirtual #84                 // Method isDaemon:()Z
      18: invokevirtual #85                 // Method java/lang/Thread.setDaemon:(Z)V
      21: aload_2
      22: aload_0
      23: invokevirtual #86                 // Method getThreadsPriority:()I
      26: invokevirtual #87                 // Method java/lang/Thread.setPriority:(I)V
      29: aload_2
      30: new           #17                 // class java/lang/StringBuilder
      33: dup
      34: invokespecial #18                 // Method java/lang/StringBuilder."<init>":()V
      37: aload_0
      38: invokevirtual #88                 // Method getName:()Ljava/lang/String;
      41: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      44: ldc           #89                 // String -
      46: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      49: aload_2
      50: invokevirtual #90                 // Method java/lang/Thread.getId:()J
      53: invokevirtual #91                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      56: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      59: invokevirtual #92                 // Method java/lang/Thread.setName:(Ljava/lang/String;)V
      62: aload_2
      63: areturn

  public void dump(java.lang.Appendable, java.lang.String) throws java.io.IOException;
    Code:
       0: new           #17                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #18                 // Method java/lang/StringBuilder."<init>":()V
       7: aload_0
       8: invokevirtual #88                 // Method getName:()Ljava/lang/String;
      11: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      14: ldc           #89                 // String -
      16: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      19: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      22: astore_3
      23: invokestatic  #93                 // Method java/lang/Thread.getAllStackTraces:()Ljava/util/Map;
      26: invokeinterface #94,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      31: invokeinterface #95,  1           // InterfaceMethod java/util/Set.stream:()Ljava/util/stream/Stream;
      36: aload_3
      37: invokedynamic #96,  0             // InvokeDynamic #1:test:(Ljava/lang/String;)Ljava/util/function/Predicate;
      42: invokeinterface #97,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      47: aload_0
      48: invokedynamic #98,  0             // InvokeDynamic #2:apply:(Lorg/eclipse/jetty/util/thread/ExecutorThreadPool;)Ljava/util/function/Function;
      53: invokeinterface #99,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      58: invokestatic  #100                // Method java/util/stream/Collectors.toList:()Ljava/util/stream/Collector;
      61: invokeinterface #101,  2          // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      66: checkcast     #102                // class java/util/List
      69: astore        4
      71: invokestatic  #103                // Method java/util/Collections.emptyList:()Ljava/util/List;
      74: astore        5
      76: aload_0
      77: invokevirtual #104                // Method isDetailedDump:()Z
      80: ifeq          99
      83: new           #105                // class java/util/ArrayList
      86: dup
      87: aload_0
      88: getfield      #37                 // Field _executor:Ljava/util/concurrent/ThreadPoolExecutor;
      91: invokevirtual #67                 // Method java/util/concurrent/ThreadPoolExecutor.getQueue:()Ljava/util/concurrent/BlockingQueue;
      94: invokespecial #106                // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
      97: astore        5
      99: aload_0
     100: aload_1
     101: aload_2
     102: iconst_2
     103: anewarray     #107                // class java/lang/Object
     106: dup
     107: iconst_0
     108: aload         4
     110: aastore
     111: dup
     112: iconst_1
     113: new           #108                // class org/eclipse/jetty/util/component/DumpableCollection
     116: dup
     117: ldc           #109                // String jobs
     119: aload         5
     121: invokespecial #110                // Method org/eclipse/jetty/util/component/DumpableCollection."<init>":(Ljava/lang/String;Ljava/util/Collection;)V
     124: aastore
     125: invokevirtual #111                // Method dumpObjects:(Ljava/lang/Appendable;Ljava/lang/String;[Ljava/lang/Object;)V
     128: return

  public java.lang.String toString();
    Code:
       0: ldc           #112                // String %s[%s]@%x{%s,%d<=%d<=%d,i=%d,q=%d,%s}
       2: bipush        10
       4: anewarray     #107                // class java/lang/Object
       7: dup
       8: iconst_0
       9: aload_0
      10: invokevirtual #113                // Method java/lang/Object.getClass:()Ljava/lang/Class;
      13: invokevirtual #114                // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
      16: aastore
      17: dup
      18: iconst_1
      19: aload_0
      20: invokevirtual #88                 // Method getName:()Ljava/lang/String;
      23: aastore
      24: dup
      25: iconst_2
      26: aload_0
      27: invokevirtual #21                 // Method java/lang/Object.hashCode:()I
      30: invokestatic  #115                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      33: aastore
      34: dup
      35: iconst_3
      36: aload_0
      37: invokevirtual #47                 // Method getState:()Ljava/lang/String;
      40: aastore
      41: dup
      42: iconst_4
      43: aload_0
      44: invokevirtual #116                // Method getMinThreads:()I
      47: invokestatic  #115                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      50: aastore
      51: dup
      52: iconst_5
      53: aload_0
      54: invokevirtual #65                 // Method getThreads:()I
      57: invokestatic  #115                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      60: aastore
      61: dup
      62: bipush        6
      64: aload_0
      65: invokevirtual #66                 // Method getMaxThreads:()I
      68: invokestatic  #115                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      71: aastore
      72: dup
      73: bipush        7
      75: aload_0
      76: invokevirtual #69                 // Method getIdleThreads:()I
      79: invokestatic  #115                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      82: aastore
      83: dup
      84: bipush        8
      86: aload_0
      87: getfield      #37                 // Field _executor:Ljava/util/concurrent/ThreadPoolExecutor;
      90: invokevirtual #67                 // Method java/util/concurrent/ThreadPoolExecutor.getQueue:()Ljava/util/concurrent/BlockingQueue;
      93: invokeinterface #68,  1           // InterfaceMethod java/util/concurrent/BlockingQueue.size:()I
      98: invokestatic  #115                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     101: aastore
     102: dup
     103: bipush        9
     105: aload_0
     106: getfield      #27                 // Field _tryExecutor:Lorg/eclipse/jetty/util/thread/TryExecutor;
     109: aastore
     110: invokestatic  #117                // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     113: areturn

  private org.eclipse.jetty.util.thread.ExecutorThreadPool$1 lambda$dump$1(java.util.Map$Entry);
    Code:
       0: aload_1
       1: invokeinterface #118,  1          // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
       6: checkcast     #28                 // class java/lang/Thread
       9: astore_2
      10: aload_1
      11: invokeinterface #119,  1          // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      16: checkcast     #120                // class "[Ljava/lang/StackTraceElement;"
      19: astore_3
      20: aconst_null
      21: astore        4
      23: aload_3
      24: astore        5
      26: aload         5
      28: arraylength
      29: istore        6
      31: iconst_0
      32: istore        7
      34: iload         7
      36: iload         6
      38: if_icmpge     186
      41: aload         5
      43: iload         7
      45: aaload
      46: astore        8
      48: ldc           #121                // String getTask
      50: aload         8
      52: invokevirtual #122                // Method java/lang/StackTraceElement.getMethodName:()Ljava/lang/String;
      55: invokevirtual #123                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      58: ifeq          81
      61: aload         8
      63: invokevirtual #124                // Method java/lang/StackTraceElement.getClassName:()Ljava/lang/String;
      66: ldc           #125                // String ThreadPoolExecutor
      68: invokevirtual #126                // Method java/lang/String.endsWith:(Ljava/lang/String;)Z
      71: ifeq          81
      74: ldc           #127                // String IDLE
      76: astore        4
      78: goto          186
      81: ldc           #128                // String reservedWait
      83: aload         8
      85: invokevirtual #122                // Method java/lang/StackTraceElement.getMethodName:()Ljava/lang/String;
      88: invokevirtual #123                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      91: ifeq          114
      94: aload         8
      96: invokevirtual #124                // Method java/lang/StackTraceElement.getClassName:()Ljava/lang/String;
      99: ldc           #129                // String ReservedThread
     101: invokevirtual #126                // Method java/lang/String.endsWith:(Ljava/lang/String;)Z
     104: ifeq          114
     107: ldc           #130                // String RESERVED
     109: astore        4
     111: goto          186
     114: ldc           #131                // String select
     116: aload         8
     118: invokevirtual #122                // Method java/lang/StackTraceElement.getMethodName:()Ljava/lang/String;
     121: invokevirtual #123                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     124: ifeq          147
     127: aload         8
     129: invokevirtual #124                // Method java/lang/StackTraceElement.getClassName:()Ljava/lang/String;
     132: ldc           #132                // String SelectorProducer
     134: invokevirtual #126                // Method java/lang/String.endsWith:(Ljava/lang/String;)Z
     137: ifeq          147
     140: ldc           #133                // String SELECTING
     142: astore        4
     144: goto          186
     147: ldc           #134                // String accept
     149: aload         8
     151: invokevirtual #122                // Method java/lang/StackTraceElement.getMethodName:()Ljava/lang/String;
     154: invokevirtual #123                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     157: ifeq          180
     160: aload         8
     162: invokevirtual #124                // Method java/lang/StackTraceElement.getClassName:()Ljava/lang/String;
     165: ldc           #135                // String ServerConnector
     167: invokevirtual #136                // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
     170: ifeq          180
     173: ldc           #137                // String ACCEPTING
     175: astore        4
     177: goto          186
     180: iinc          7, 1
     183: goto          34
     186: aload         4
     188: ifnonnull     196
     191: ldc           #138                // String
     193: goto          198
     196: aload         4
     198: astore        5
     200: new           #139                // class org/eclipse/jetty/util/thread/ExecutorThreadPool$1
     203: dup
     204: aload_0
     205: aload_2
     206: aload         5
     208: aload_3
     209: invokespecial #140                // Method org/eclipse/jetty/util/thread/ExecutorThreadPool$1."<init>":(Lorg/eclipse/jetty/util/thread/ExecutorThreadPool;Ljava/lang/Thread;Ljava/lang/String;[Ljava/lang/StackTraceElement;)V
     212: areturn

  private static boolean lambda$dump$0(java.lang.String, java.util.Map$Entry);
    Code:
       0: aload_1
       1: invokeinterface #118,  1          // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
       6: checkcast     #28                 // class java/lang/Thread
       9: invokevirtual #141                // Method java/lang/Thread.getName:()Ljava/lang/String;
      12: aload_0
      13: invokevirtual #142                // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      16: ireturn
}
