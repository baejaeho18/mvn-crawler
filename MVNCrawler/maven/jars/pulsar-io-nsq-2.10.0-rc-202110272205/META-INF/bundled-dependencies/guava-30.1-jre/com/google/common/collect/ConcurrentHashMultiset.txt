Compiled from "ConcurrentHashMultiset.java"
public final class com.google.common.collect.ConcurrentHashMultiset<E> extends com.google.common.collect.AbstractMultiset<E> implements java.io.Serializable {
  private final transient java.util.concurrent.ConcurrentMap<E, java.util.concurrent.atomic.AtomicInteger> countMap;

  private static final long serialVersionUID;

  public static <E> com.google.common.collect.ConcurrentHashMultiset<E> create();
    Code:
       0: new           #2                  // class com/google/common/collect/ConcurrentHashMultiset
       3: dup
       4: new           #3                  // class java/util/concurrent/ConcurrentHashMap
       7: dup
       8: invokespecial #4                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      11: invokespecial #5                  // Method "<init>":(Ljava/util/concurrent/ConcurrentMap;)V
      14: areturn

  public static <E> com.google.common.collect.ConcurrentHashMultiset<E> create(java.lang.Iterable<? extends E>);
    Code:
       0: invokestatic  #6                  // Method create:()Lcom/google/common/collect/ConcurrentHashMultiset;
       3: astore_1
       4: aload_1
       5: aload_0
       6: invokestatic  #7                  // Method com/google/common/collect/Iterables.addAll:(Ljava/util/Collection;Ljava/lang/Iterable;)Z
       9: pop
      10: aload_1
      11: areturn

  public static <E> com.google.common.collect.ConcurrentHashMultiset<E> create(java.util.concurrent.ConcurrentMap<E, java.util.concurrent.atomic.AtomicInteger>);
    Code:
       0: new           #2                  // class com/google/common/collect/ConcurrentHashMultiset
       3: dup
       4: aload_0
       5: invokespecial #5                  // Method "<init>":(Ljava/util/concurrent/ConcurrentMap;)V
       8: areturn

  com.google.common.collect.ConcurrentHashMultiset(java.util.concurrent.ConcurrentMap<E, java.util.concurrent.atomic.AtomicInteger>);
    Code:
       0: aload_0
       1: invokespecial #8                  // Method com/google/common/collect/AbstractMultiset."<init>":()V
       4: aload_1
       5: invokeinterface #9,  1            // InterfaceMethod java/util/concurrent/ConcurrentMap.isEmpty:()Z
      10: ldc           #10                 // String the backing map (%s) must be empty
      12: aload_1
      13: invokestatic  #11                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/String;Ljava/lang/Object;)V
      16: aload_0
      17: aload_1
      18: putfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
      21: return

  public int count(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: invokestatic  #12                 // Method com/google/common/collect/Maps.safeGet:(Ljava/util/Map;Ljava/lang/Object;)Ljava/lang/Object;
       8: checkcast     #13                 // class java/util/concurrent/atomic/AtomicInteger
      11: astore_2
      12: aload_2
      13: ifnonnull     20
      16: iconst_0
      17: goto          24
      20: aload_2
      21: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      24: ireturn

  public int size();
    Code:
       0: lconst_0
       1: lstore_1
       2: aload_0
       3: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
       6: invokeinterface #15,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.values:()Ljava/util/Collection;
      11: invokeinterface #16,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      16: astore_3
      17: aload_3
      18: invokeinterface #17,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      23: ifeq          49
      26: aload_3
      27: invokeinterface #18,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      32: checkcast     #13                 // class java/util/concurrent/atomic/AtomicInteger
      35: astore        4
      37: lload_1
      38: aload         4
      40: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      43: i2l
      44: ladd
      45: lstore_1
      46: goto          17
      49: lload_1
      50: invokestatic  #19                 // Method com/google/common/primitives/Ints.saturatedCast:(J)I
      53: ireturn

  public java.lang.Object[] toArray();
    Code:
       0: aload_0
       1: invokespecial #20                 // Method snapshot:()Ljava/util/List;
       4: invokeinterface #21,  1           // InterfaceMethod java/util/List.toArray:()[Ljava/lang/Object;
       9: areturn

  public <T> T[] toArray(T[]);
    Code:
       0: aload_0
       1: invokespecial #20                 // Method snapshot:()Ljava/util/List;
       4: aload_1
       5: invokeinterface #22,  2           // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      10: areturn

  private java.util.List<E> snapshot();
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method size:()I
       4: invokestatic  #24                 // Method com/google/common/collect/Lists.newArrayListWithExpectedSize:(I)Ljava/util/ArrayList;
       7: astore_1
       8: aload_0
       9: invokevirtual #25                 // Method entrySet:()Ljava/util/Set;
      12: invokeinterface #26,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      17: astore_2
      18: aload_2
      19: invokeinterface #17,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      24: ifeq          76
      27: aload_2
      28: invokeinterface #18,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      33: checkcast     #27                 // class com/google/common/collect/Multiset$Entry
      36: astore_3
      37: aload_3
      38: invokeinterface #28,  1           // InterfaceMethod com/google/common/collect/Multiset$Entry.getElement:()Ljava/lang/Object;
      43: astore        4
      45: aload_3
      46: invokeinterface #29,  1           // InterfaceMethod com/google/common/collect/Multiset$Entry.getCount:()I
      51: istore        5
      53: iload         5
      55: ifle          73
      58: aload_1
      59: aload         4
      61: invokeinterface #30,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      66: pop
      67: iinc          5, -1
      70: goto          53
      73: goto          18
      76: aload_1
      77: areturn

  public int add(E, int);
    Code:
       0: aload_1
       1: invokestatic  #31                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: iload_2
       6: ifne          15
       9: aload_0
      10: aload_1
      11: invokevirtual #32                 // Method count:(Ljava/lang/Object;)I
      14: ireturn
      15: iload_2
      16: ldc           #33                 // String occurences
      18: invokestatic  #34                 // Method com/google/common/collect/CollectPreconditions.checkPositive:(ILjava/lang/String;)V
      21: aload_0
      22: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
      25: aload_1
      26: invokestatic  #12                 // Method com/google/common/collect/Maps.safeGet:(Ljava/util/Map;Ljava/lang/Object;)Ljava/lang/Object;
      29: checkcast     #13                 // class java/util/concurrent/atomic/AtomicInteger
      32: astore_3
      33: aload_3
      34: ifnonnull     65
      37: aload_0
      38: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
      41: aload_1
      42: new           #13                 // class java/util/concurrent/atomic/AtomicInteger
      45: dup
      46: iload_2
      47: invokespecial #35                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      50: invokeinterface #36,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      55: checkcast     #13                 // class java/util/concurrent/atomic/AtomicInteger
      58: astore_3
      59: aload_3
      60: ifnonnull     65
      63: iconst_0
      64: ireturn
      65: aload_3
      66: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      69: istore        4
      71: iload         4
      73: ifeq          143
      76: iload         4
      78: iload_2
      79: invokestatic  #37                 // Method com/google/common/math/IntMath.checkedAdd:(II)I
      82: istore        5
      84: aload_3
      85: iload         4
      87: iload         5
      89: invokevirtual #38                 // Method java/util/concurrent/atomic/AtomicInteger.compareAndSet:(II)Z
      92: ifeq          98
      95: iload         4
      97: ireturn
      98: goto          186
     101: astore        5
     103: new           #40                 // class java/lang/IllegalArgumentException
     106: dup
     107: bipush        65
     109: new           #41                 // class java/lang/StringBuilder
     112: dup_x1
     113: swap
     114: invokespecial #42                 // Method java/lang/StringBuilder."<init>":(I)V
     117: ldc           #43                 // String Overflow adding
     119: invokevirtual #44                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     122: iload_2
     123: invokevirtual #45                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     126: ldc           #46                 // String  occurrences to a count of
     128: invokevirtual #44                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     131: iload         4
     133: invokevirtual #45                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     136: invokevirtual #47                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     139: invokespecial #48                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     142: athrow
     143: new           #13                 // class java/util/concurrent/atomic/AtomicInteger
     146: dup
     147: iload_2
     148: invokespecial #35                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
     151: astore        5
     153: aload_0
     154: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
     157: aload_1
     158: aload         5
     160: invokeinterface #36,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     165: ifnull        184
     168: aload_0
     169: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
     172: aload_1
     173: aload_3
     174: aload         5
     176: invokeinterface #49,  4           // InterfaceMethod java/util/concurrent/ConcurrentMap.replace:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
     181: ifeq          189
     184: iconst_0
     185: ireturn
     186: goto          65
     189: goto          21
    Exception table:
       from    to  target type
          76    97   101   Class java/lang/ArithmeticException

  public int remove(java.lang.Object, int);
    Code:
       0: iload_2
       1: ifne          10
       4: aload_0
       5: aload_1
       6: invokevirtual #32                 // Method count:(Ljava/lang/Object;)I
       9: ireturn
      10: iload_2
      11: ldc           #33                 // String occurences
      13: invokestatic  #34                 // Method com/google/common/collect/CollectPreconditions.checkPositive:(ILjava/lang/String;)V
      16: aload_0
      17: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
      20: aload_1
      21: invokestatic  #12                 // Method com/google/common/collect/Maps.safeGet:(Ljava/util/Map;Ljava/lang/Object;)Ljava/lang/Object;
      24: checkcast     #13                 // class java/util/concurrent/atomic/AtomicInteger
      27: astore_3
      28: aload_3
      29: ifnonnull     34
      32: iconst_0
      33: ireturn
      34: aload_3
      35: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      38: istore        4
      40: iload         4
      42: ifeq          89
      45: iconst_0
      46: iload         4
      48: iload_2
      49: isub
      50: invokestatic  #50                 // Method java/lang/Math.max:(II)I
      53: istore        5
      55: aload_3
      56: iload         4
      58: iload         5
      60: invokevirtual #38                 // Method java/util/concurrent/atomic/AtomicInteger.compareAndSet:(II)Z
      63: ifeq          86
      66: iload         5
      68: ifne          83
      71: aload_0
      72: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
      75: aload_1
      76: aload_3
      77: invokeinterface #51,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;Ljava/lang/Object;)Z
      82: pop
      83: iload         4
      85: ireturn
      86: goto          91
      89: iconst_0
      90: ireturn
      91: goto          34

  public boolean removeExactly(java.lang.Object, int);
    Code:
       0: iload_2
       1: ifne          6
       4: iconst_1
       5: ireturn
       6: iload_2
       7: ldc           #33                 // String occurences
       9: invokestatic  #34                 // Method com/google/common/collect/CollectPreconditions.checkPositive:(ILjava/lang/String;)V
      12: aload_0
      13: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
      16: aload_1
      17: invokestatic  #12                 // Method com/google/common/collect/Maps.safeGet:(Ljava/util/Map;Ljava/lang/Object;)Ljava/lang/Object;
      20: checkcast     #13                 // class java/util/concurrent/atomic/AtomicInteger
      23: astore_3
      24: aload_3
      25: ifnonnull     30
      28: iconst_0
      29: ireturn
      30: aload_3
      31: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      34: istore        4
      36: iload         4
      38: iload_2
      39: if_icmpge     44
      42: iconst_0
      43: ireturn
      44: iload         4
      46: iload_2
      47: isub
      48: istore        5
      50: aload_3
      51: iload         4
      53: iload         5
      55: invokevirtual #38                 // Method java/util/concurrent/atomic/AtomicInteger.compareAndSet:(II)Z
      58: ifeq          80
      61: iload         5
      63: ifne          78
      66: aload_0
      67: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
      70: aload_1
      71: aload_3
      72: invokeinterface #51,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;Ljava/lang/Object;)Z
      77: pop
      78: iconst_1
      79: ireturn
      80: goto          30

  public int setCount(E, int);
    Code:
       0: aload_1
       1: invokestatic  #31                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: iload_2
       6: ldc           #52                 // String count
       8: invokestatic  #53                 // Method com/google/common/collect/CollectPreconditions.checkNonnegative:(ILjava/lang/String;)I
      11: pop
      12: aload_0
      13: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
      16: aload_1
      17: invokestatic  #12                 // Method com/google/common/collect/Maps.safeGet:(Ljava/util/Map;Ljava/lang/Object;)Ljava/lang/Object;
      20: checkcast     #13                 // class java/util/concurrent/atomic/AtomicInteger
      23: astore_3
      24: aload_3
      25: ifnonnull     62
      28: iload_2
      29: ifne          34
      32: iconst_0
      33: ireturn
      34: aload_0
      35: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
      38: aload_1
      39: new           #13                 // class java/util/concurrent/atomic/AtomicInteger
      42: dup
      43: iload_2
      44: invokespecial #35                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      47: invokeinterface #36,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      52: checkcast     #13                 // class java/util/concurrent/atomic/AtomicInteger
      55: astore_3
      56: aload_3
      57: ifnonnull     62
      60: iconst_0
      61: ireturn
      62: aload_3
      63: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      66: istore        4
      68: iload         4
      70: ifne          125
      73: iload_2
      74: ifne          79
      77: iconst_0
      78: ireturn
      79: new           #13                 // class java/util/concurrent/atomic/AtomicInteger
      82: dup
      83: iload_2
      84: invokespecial #35                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      87: astore        5
      89: aload_0
      90: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
      93: aload_1
      94: aload         5
      96: invokeinterface #36,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     101: ifnull        120
     104: aload_0
     105: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
     108: aload_1
     109: aload_3
     110: aload         5
     112: invokeinterface #49,  4           // InterfaceMethod java/util/concurrent/ConcurrentMap.replace:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
     117: ifeq          122
     120: iconst_0
     121: ireturn
     122: goto          157
     125: aload_3
     126: iload         4
     128: iload_2
     129: invokevirtual #38                 // Method java/util/concurrent/atomic/AtomicInteger.compareAndSet:(II)Z
     132: ifeq          154
     135: iload_2
     136: ifne          151
     139: aload_0
     140: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
     143: aload_1
     144: aload_3
     145: invokeinterface #51,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;Ljava/lang/Object;)Z
     150: pop
     151: iload         4
     153: ireturn
     154: goto          62
     157: goto          12

  public boolean setCount(E, int, int);
    Code:
       0: aload_1
       1: invokestatic  #31                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: iload_2
       6: ldc           #54                 // String oldCount
       8: invokestatic  #53                 // Method com/google/common/collect/CollectPreconditions.checkNonnegative:(ILjava/lang/String;)I
      11: pop
      12: iload_3
      13: ldc           #55                 // String newCount
      15: invokestatic  #53                 // Method com/google/common/collect/CollectPreconditions.checkNonnegative:(ILjava/lang/String;)I
      18: pop
      19: aload_0
      20: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
      23: aload_1
      24: invokestatic  #12                 // Method com/google/common/collect/Maps.safeGet:(Ljava/util/Map;Ljava/lang/Object;)Ljava/lang/Object;
      27: checkcast     #13                 // class java/util/concurrent/atomic/AtomicInteger
      30: astore        4
      32: aload         4
      34: ifnonnull     76
      37: iload_2
      38: ifeq          43
      41: iconst_0
      42: ireturn
      43: iload_3
      44: ifne          49
      47: iconst_1
      48: ireturn
      49: aload_0
      50: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
      53: aload_1
      54: new           #13                 // class java/util/concurrent/atomic/AtomicInteger
      57: dup
      58: iload_3
      59: invokespecial #35                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      62: invokeinterface #36,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      67: ifnonnull     74
      70: iconst_1
      71: goto          75
      74: iconst_0
      75: ireturn
      76: aload         4
      78: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      81: istore        5
      83: iload         5
      85: iload_2
      86: if_icmpne     191
      89: iload         5
      91: ifne          161
      94: iload_3
      95: ifne          113
      98: aload_0
      99: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
     102: aload_1
     103: aload         4
     105: invokeinterface #51,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;Ljava/lang/Object;)Z
     110: pop
     111: iconst_1
     112: ireturn
     113: new           #13                 // class java/util/concurrent/atomic/AtomicInteger
     116: dup
     117: iload_3
     118: invokespecial #35                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
     121: astore        6
     123: aload_0
     124: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
     127: aload_1
     128: aload         6
     130: invokeinterface #36,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     135: ifnull        155
     138: aload_0
     139: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
     142: aload_1
     143: aload         4
     145: aload         6
     147: invokeinterface #49,  4           // InterfaceMethod java/util/concurrent/ConcurrentMap.replace:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
     152: ifeq          159
     155: iconst_1
     156: goto          160
     159: iconst_0
     160: ireturn
     161: aload         4
     163: iload         5
     165: iload_3
     166: invokevirtual #38                 // Method java/util/concurrent/atomic/AtomicInteger.compareAndSet:(II)Z
     169: ifeq          191
     172: iload_3
     173: ifne          189
     176: aload_0
     177: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
     180: aload_1
     181: aload         4
     183: invokeinterface #51,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;Ljava/lang/Object;)Z
     188: pop
     189: iconst_1
     190: ireturn
     191: iconst_0
     192: ireturn

  java.util.Set<E> createElementSet();
    Code:
       0: aload_0
       1: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
       4: invokeinterface #56,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.keySet:()Ljava/util/Set;
       9: astore_1
      10: new           #57                 // class com/google/common/collect/ConcurrentHashMultiset$1
      13: dup
      14: aload_0
      15: aload_1
      16: invokespecial #58                 // Method com/google/common/collect/ConcurrentHashMultiset$1."<init>":(Lcom/google/common/collect/ConcurrentHashMultiset;Ljava/util/Set;)V
      19: areturn

  java.util.Iterator<E> elementIterator();
    Code:
       0: new           #59                 // class java/lang/AssertionError
       3: dup
       4: ldc           #60                 // String should never be called
       6: invokespecial #61                 // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
       9: athrow

  public java.util.Set<com.google.common.collect.Multiset$Entry<E>> createEntrySet();
    Code:
       0: new           #62                 // class com/google/common/collect/ConcurrentHashMultiset$EntrySet
       3: dup
       4: aload_0
       5: aconst_null
       6: invokespecial #63                 // Method com/google/common/collect/ConcurrentHashMultiset$EntrySet."<init>":(Lcom/google/common/collect/ConcurrentHashMultiset;Lcom/google/common/collect/ConcurrentHashMultiset$1;)V
       9: areturn

  int distinctElements();
    Code:
       0: aload_0
       1: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
       4: invokeinterface #64,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.size:()I
       9: ireturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
       4: invokeinterface #9,  1            // InterfaceMethod java/util/concurrent/ConcurrentMap.isEmpty:()Z
       9: ireturn

  java.util.Iterator<com.google.common.collect.Multiset$Entry<E>> entryIterator();
    Code:
       0: new           #65                 // class com/google/common/collect/ConcurrentHashMultiset$2
       3: dup
       4: aload_0
       5: invokespecial #66                 // Method com/google/common/collect/ConcurrentHashMultiset$2."<init>":(Lcom/google/common/collect/ConcurrentHashMultiset;)V
       8: astore_1
       9: new           #67                 // class com/google/common/collect/ConcurrentHashMultiset$3
      12: dup
      13: aload_0
      14: aload_1
      15: invokespecial #68                 // Method com/google/common/collect/ConcurrentHashMultiset$3."<init>":(Lcom/google/common/collect/ConcurrentHashMultiset;Ljava/util/Iterator;)V
      18: areturn

  public java.util.Iterator<E> iterator();
    Code:
       0: aload_0
       1: invokestatic  #69                 // Method com/google/common/collect/Multisets.iteratorImpl:(Lcom/google/common/collect/Multiset;)Ljava/util/Iterator;
       4: areturn

  public void clear();
    Code:
       0: aload_0
       1: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
       4: invokeinterface #70,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.clear:()V
       9: return

  private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokevirtual #71                 // Method java/io/ObjectOutputStream.defaultWriteObject:()V
       4: aload_1
       5: aload_0
       6: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
       9: invokevirtual #72                 // Method java/io/ObjectOutputStream.writeObject:(Ljava/lang/Object;)V
      12: return

  private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException;
    Code:
       0: aload_1
       1: invokevirtual #73                 // Method java/io/ObjectInputStream.defaultReadObject:()V
       4: aload_1
       5: invokevirtual #74                 // Method java/io/ObjectInputStream.readObject:()Ljava/lang/Object;
       8: checkcast     #75                 // class java/util/concurrent/ConcurrentMap
      11: astore_2
      12: getstatic     #76                 // Field com/google/common/collect/ConcurrentHashMultiset$FieldSettersHolder.COUNT_MAP_FIELD_SETTER:Lcom/google/common/collect/Serialization$FieldSetter;
      15: aload_0
      16: aload_2
      17: invokevirtual #77                 // Method com/google/common/collect/Serialization$FieldSetter.set:(Ljava/lang/Object;Ljava/lang/Object;)V
      20: return

  public java.util.Set entrySet();
    Code:
       0: aload_0
       1: invokespecial #78                 // Method com/google/common/collect/AbstractMultiset.entrySet:()Ljava/util/Set;
       4: areturn

  public java.util.Set elementSet();
    Code:
       0: aload_0
       1: invokespecial #79                 // Method com/google/common/collect/AbstractMultiset.elementSet:()Ljava/util/Set;
       4: areturn

  public boolean contains(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #80                 // Method com/google/common/collect/AbstractMultiset.contains:(Ljava/lang/Object;)Z
       5: ireturn

  static java.util.concurrent.ConcurrentMap access$100(com.google.common.collect.ConcurrentHashMultiset);
    Code:
       0: aload_0
       1: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
       4: areturn
}
