Compiled from "Striped.java"
class com.google.common.util.concurrent.Striped$SmallLazyStriped<L> extends com.google.common.util.concurrent.Striped$PowerOfTwoStriped<L> {
  final java.util.concurrent.atomic.AtomicReferenceArray<com.google.common.util.concurrent.Striped$SmallLazyStriped$ArrayReference<? extends L>> locks;

  final com.google.common.base.Supplier<L> supplier;

  final int size;

  final java.lang.ref.ReferenceQueue<L> queue;

  com.google.common.util.concurrent.Striped$SmallLazyStriped(int, com.google.common.base.Supplier<L>);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #2                  // Method com/google/common/util/concurrent/Striped$PowerOfTwoStriped."<init>":(I)V
       5: aload_0
       6: new           #3                  // class java/lang/ref/ReferenceQueue
       9: dup
      10: invokespecial #4                  // Method java/lang/ref/ReferenceQueue."<init>":()V
      13: putfield      #5                  // Field queue:Ljava/lang/ref/ReferenceQueue;
      16: aload_0
      17: aload_0
      18: getfield      #6                  // Field mask:I
      21: iconst_m1
      22: if_icmpne     30
      25: ldc           #8                  // int 2147483647
      27: goto          36
      30: aload_0
      31: getfield      #6                  // Field mask:I
      34: iconst_1
      35: iadd
      36: putfield      #9                  // Field size:I
      39: aload_0
      40: new           #10                 // class java/util/concurrent/atomic/AtomicReferenceArray
      43: dup
      44: aload_0
      45: getfield      #9                  // Field size:I
      48: invokespecial #11                 // Method java/util/concurrent/atomic/AtomicReferenceArray."<init>":(I)V
      51: putfield      #12                 // Field locks:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      54: aload_0
      55: aload_2
      56: putfield      #13                 // Field supplier:Lcom/google/common/base/Supplier;
      59: return

  public L getAt(int);
    Code:
       0: aload_0
       1: getfield      #9                  // Field size:I
       4: ldc           #8                  // int 2147483647
       6: if_icmpeq     18
       9: iload_1
      10: aload_0
      11: invokevirtual #14                 // Method size:()I
      14: invokestatic  #15                 // Method com/google/common/base/Preconditions.checkElementIndex:(II)I
      17: pop
      18: aload_0
      19: getfield      #12                 // Field locks:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      22: iload_1
      23: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicReferenceArray.get:(I)Ljava/lang/Object;
      26: checkcast     #17                 // class com/google/common/util/concurrent/Striped$SmallLazyStriped$ArrayReference
      29: astore_2
      30: aload_2
      31: ifnonnull     38
      34: aconst_null
      35: goto          42
      38: aload_2
      39: invokevirtual #18                 // Method com/google/common/util/concurrent/Striped$SmallLazyStriped$ArrayReference.get:()Ljava/lang/Object;
      42: astore_3
      43: aload_3
      44: ifnull        49
      47: aload_3
      48: areturn
      49: aload_0
      50: getfield      #13                 // Field supplier:Lcom/google/common/base/Supplier;
      53: invokeinterface #19,  1           // InterfaceMethod com/google/common/base/Supplier.get:()Ljava/lang/Object;
      58: astore        4
      60: new           #17                 // class com/google/common/util/concurrent/Striped$SmallLazyStriped$ArrayReference
      63: dup
      64: aload         4
      66: iload_1
      67: aload_0
      68: getfield      #5                  // Field queue:Ljava/lang/ref/ReferenceQueue;
      71: invokespecial #20                 // Method com/google/common/util/concurrent/Striped$SmallLazyStriped$ArrayReference."<init>":(Ljava/lang/Object;ILjava/lang/ref/ReferenceQueue;)V
      74: astore        5
      76: aload_0
      77: getfield      #12                 // Field locks:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      80: iload_1
      81: aload_2
      82: aload         5
      84: invokevirtual #21                 // Method java/util/concurrent/atomic/AtomicReferenceArray.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z
      87: ifne          121
      90: aload_0
      91: getfield      #12                 // Field locks:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      94: iload_1
      95: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicReferenceArray.get:(I)Ljava/lang/Object;
      98: checkcast     #17                 // class com/google/common/util/concurrent/Striped$SmallLazyStriped$ArrayReference
     101: astore_2
     102: aload_2
     103: ifnonnull     110
     106: aconst_null
     107: goto          114
     110: aload_2
     111: invokevirtual #18                 // Method com/google/common/util/concurrent/Striped$SmallLazyStriped$ArrayReference.get:()Ljava/lang/Object;
     114: astore_3
     115: aload_3
     116: ifnull        76
     119: aload_3
     120: areturn
     121: aload_0
     122: invokespecial #22                 // Method drainQueue:()V
     125: aload         4
     127: areturn

  private void drainQueue();
    Code:
       0: aload_0
       1: getfield      #5                  // Field queue:Ljava/lang/ref/ReferenceQueue;
       4: invokevirtual #23                 // Method java/lang/ref/ReferenceQueue.poll:()Ljava/lang/ref/Reference;
       7: dup
       8: astore_1
       9: ifnull        34
      12: aload_1
      13: checkcast     #17                 // class com/google/common/util/concurrent/Striped$SmallLazyStriped$ArrayReference
      16: astore_2
      17: aload_0
      18: getfield      #12                 // Field locks:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      21: aload_2
      22: getfield      #24                 // Field com/google/common/util/concurrent/Striped$SmallLazyStriped$ArrayReference.index:I
      25: aload_2
      26: aconst_null
      27: invokevirtual #21                 // Method java/util/concurrent/atomic/AtomicReferenceArray.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z
      30: pop
      31: goto          0
      34: return

  public int size();
    Code:
       0: aload_0
       1: getfield      #9                  // Field size:I
       4: ireturn
}
