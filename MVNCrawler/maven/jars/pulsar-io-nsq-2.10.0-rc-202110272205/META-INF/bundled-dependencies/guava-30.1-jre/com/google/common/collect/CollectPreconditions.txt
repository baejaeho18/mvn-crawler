Compiled from "CollectPreconditions.java"
final class com.google.common.collect.CollectPreconditions {
  com.google.common.collect.CollectPreconditions();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  static void checkEntryNotNull(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: ifnonnull     47
       4: new           #2                  // class java/lang/NullPointerException
       7: dup
       8: aload_1
       9: invokestatic  #3                  // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
      12: astore_2
      13: bipush        24
      15: aload_2
      16: invokestatic  #3                  // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
      19: invokevirtual #4                  // Method java/lang/String.length:()I
      22: iadd
      23: new           #5                  // class java/lang/StringBuilder
      26: dup_x1
      27: swap
      28: invokespecial #6                  // Method java/lang/StringBuilder."<init>":(I)V
      31: ldc           #7                  // String null key in entry: null=
      33: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: aload_2
      37: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      40: invokevirtual #9                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      43: invokespecial #10                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      46: athrow
      47: aload_1
      48: ifnonnull     99
      51: new           #2                  // class java/lang/NullPointerException
      54: dup
      55: aload_0
      56: invokestatic  #3                  // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
      59: astore_2
      60: bipush        26
      62: aload_2
      63: invokestatic  #3                  // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
      66: invokevirtual #4                  // Method java/lang/String.length:()I
      69: iadd
      70: new           #5                  // class java/lang/StringBuilder
      73: dup_x1
      74: swap
      75: invokespecial #6                  // Method java/lang/StringBuilder."<init>":(I)V
      78: ldc           #11                 // String null value in entry:
      80: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      83: aload_2
      84: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      87: ldc           #12                 // String =null
      89: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      92: invokevirtual #9                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      95: invokespecial #10                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      98: athrow
      99: return

  static int checkNonnegative(int, java.lang.String);
    Code:
       0: iload_0
       1: ifge          46
       4: new           #13                 // class java/lang/IllegalArgumentException
       7: dup
       8: bipush        40
      10: aload_1
      11: invokestatic  #3                  // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
      14: invokevirtual #4                  // Method java/lang/String.length:()I
      17: iadd
      18: new           #5                  // class java/lang/StringBuilder
      21: dup_x1
      22: swap
      23: invokespecial #6                  // Method java/lang/StringBuilder."<init>":(I)V
      26: aload_1
      27: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: ldc           #14                 // String  cannot be negative but was:
      32: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: iload_0
      36: invokevirtual #15                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      39: invokevirtual #9                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      42: invokespecial #16                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      45: athrow
      46: iload_0
      47: ireturn

  static long checkNonnegative(long, java.lang.String);
    Code:
       0: lload_0
       1: lconst_0
       2: lcmp
       3: ifge          48
       6: new           #13                 // class java/lang/IllegalArgumentException
       9: dup
      10: bipush        49
      12: aload_2
      13: invokestatic  #3                  // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
      16: invokevirtual #4                  // Method java/lang/String.length:()I
      19: iadd
      20: new           #5                  // class java/lang/StringBuilder
      23: dup_x1
      24: swap
      25: invokespecial #6                  // Method java/lang/StringBuilder."<init>":(I)V
      28: aload_2
      29: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      32: ldc           #14                 // String  cannot be negative but was:
      34: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      37: lload_0
      38: invokevirtual #17                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      41: invokevirtual #9                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      44: invokespecial #16                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      47: athrow
      48: lload_0
      49: lreturn

  static void checkPositive(int, java.lang.String);
    Code:
       0: iload_0
       1: ifgt          46
       4: new           #13                 // class java/lang/IllegalArgumentException
       7: dup
       8: bipush        38
      10: aload_1
      11: invokestatic  #3                  // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
      14: invokevirtual #4                  // Method java/lang/String.length:()I
      17: iadd
      18: new           #5                  // class java/lang/StringBuilder
      21: dup_x1
      22: swap
      23: invokespecial #6                  // Method java/lang/StringBuilder."<init>":(I)V
      26: aload_1
      27: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: ldc           #18                 // String  must be positive but was:
      32: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: iload_0
      36: invokevirtual #15                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      39: invokevirtual #9                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      42: invokespecial #16                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      45: athrow
      46: return

  static void checkRemove(boolean);
    Code:
       0: iload_0
       1: ldc           #19                 // String no calls to next() since the last call to remove()
       3: invokestatic  #20                 // Method com/google/common/base/Preconditions.checkState:(ZLjava/lang/Object;)V
       6: return
}
