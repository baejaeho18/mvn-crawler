Compiled from "PoolChunkList.java"
final class io.netty.buffer.PoolChunkList<T> implements io.netty.buffer.PoolChunkListMetric {
  private static final java.util.Iterator<io.netty.buffer.PoolChunkMetric> EMPTY_METRICS;

  private final io.netty.buffer.PoolArena<T> arena;

  private final io.netty.buffer.PoolChunkList<T> nextList;

  private final int minUsage;

  private final int maxUsage;

  private final int maxCapacity;

  private io.netty.buffer.PoolChunk<T> head;

  private final int freeMinThreshold;

  private final int freeMaxThreshold;

  private io.netty.buffer.PoolChunkList<T> prevList;

  static final boolean $assertionsDisabled;

  io.netty.buffer.PoolChunkList(io.netty.buffer.PoolArena<T>, io.netty.buffer.PoolChunkList<T>, int, int, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: getstatic     #2                  // Field $assertionsDisabled:Z
       7: ifne          24
      10: iload_3
      11: iload         4
      13: if_icmple     24
      16: new           #3                  // class java/lang/AssertionError
      19: dup
      20: invokespecial #4                  // Method java/lang/AssertionError."<init>":()V
      23: athrow
      24: aload_0
      25: aload_1
      26: putfield      #5                  // Field arena:Lio/netty/buffer/PoolArena;
      29: aload_0
      30: aload_2
      31: putfield      #6                  // Field nextList:Lio/netty/buffer/PoolChunkList;
      34: aload_0
      35: iload_3
      36: putfield      #7                  // Field minUsage:I
      39: aload_0
      40: iload         4
      42: putfield      #8                  // Field maxUsage:I
      45: aload_0
      46: iload_3
      47: iload         5
      49: invokestatic  #9                  // Method calculateMaxCapacity:(II)I
      52: putfield      #10                 // Field maxCapacity:I
      55: aload_0
      56: iload         4
      58: bipush        100
      60: if_icmpne     67
      63: iconst_0
      64: goto          87
      67: iload         5
      69: i2d
      70: ldc2_w        #11                 // double 100.0d
      73: iload         4
      75: i2d
      76: dsub
      77: ldc2_w        #13                 // double 0.99999999d
      80: dadd
      81: dmul
      82: ldc2_w        #11                 // double 100.0d
      85: ddiv
      86: d2i
      87: putfield      #15                 // Field freeMinThreshold:I
      90: aload_0
      91: iload_3
      92: bipush        100
      94: if_icmpne     101
      97: iconst_0
      98: goto          120
     101: iload         5
     103: i2d
     104: ldc2_w        #11                 // double 100.0d
     107: iload_3
     108: i2d
     109: dsub
     110: ldc2_w        #13                 // double 0.99999999d
     113: dadd
     114: dmul
     115: ldc2_w        #11                 // double 100.0d
     118: ddiv
     119: d2i
     120: putfield      #16                 // Field freeMaxThreshold:I
     123: return

  private static int calculateMaxCapacity(int, int);
    Code:
       0: iload_0
       1: invokestatic  #17                 // Method minUsage0:(I)I
       4: istore_0
       5: iload_0
       6: bipush        100
       8: if_icmpne     13
      11: iconst_0
      12: ireturn
      13: iload_1
      14: i2l
      15: ldc2_w        #18                 // long 100l
      18: iload_0
      19: i2l
      20: lsub
      21: lmul
      22: ldc2_w        #18                 // long 100l
      25: ldiv
      26: l2i
      27: ireturn

  void prevList(io.netty.buffer.PoolChunkList<T>);
    Code:
       0: getstatic     #2                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: getfield      #20                 // Field prevList:Lio/netty/buffer/PoolChunkList;
      10: ifnull        21
      13: new           #3                  // class java/lang/AssertionError
      16: dup
      17: invokespecial #4                  // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_1
      23: putfield      #20                 // Field prevList:Lio/netty/buffer/PoolChunkList;
      26: return

  boolean allocate(io.netty.buffer.PooledByteBuf<T>, int, int, io.netty.buffer.PoolThreadCache);
    Code:
       0: aload_0
       1: getfield      #5                  // Field arena:Lio/netty/buffer/PoolArena;
       4: iload_3
       5: invokevirtual #21                 // Method io/netty/buffer/PoolArena.sizeIdx2size:(I)I
       8: istore        5
      10: iload         5
      12: aload_0
      13: getfield      #10                 // Field maxCapacity:I
      16: if_icmple     21
      19: iconst_0
      20: ireturn
      21: aload_0
      22: getfield      #22                 // Field head:Lio/netty/buffer/PoolChunk;
      25: astore        6
      27: aload         6
      29: ifnull        84
      32: aload         6
      34: aload_1
      35: iload_2
      36: iload_3
      37: aload         4
      39: invokevirtual #23                 // Method io/netty/buffer/PoolChunk.allocate:(Lio/netty/buffer/PooledByteBuf;IILio/netty/buffer/PoolThreadCache;)Z
      42: ifeq          74
      45: aload         6
      47: getfield      #24                 // Field io/netty/buffer/PoolChunk.freeBytes:I
      50: aload_0
      51: getfield      #15                 // Field freeMinThreshold:I
      54: if_icmpgt     72
      57: aload_0
      58: aload         6
      60: invokespecial #25                 // Method remove:(Lio/netty/buffer/PoolChunk;)V
      63: aload_0
      64: getfield      #6                  // Field nextList:Lio/netty/buffer/PoolChunkList;
      67: aload         6
      69: invokevirtual #26                 // Method add:(Lio/netty/buffer/PoolChunk;)V
      72: iconst_1
      73: ireturn
      74: aload         6
      76: getfield      #27                 // Field io/netty/buffer/PoolChunk.next:Lio/netty/buffer/PoolChunk;
      79: astore        6
      81: goto          27
      84: iconst_0
      85: ireturn

  boolean free(io.netty.buffer.PoolChunk<T>, long, int, java.nio.ByteBuffer);
    Code:
       0: aload_1
       1: lload_2
       2: iload         4
       4: aload         5
       6: invokevirtual #28                 // Method io/netty/buffer/PoolChunk.free:(JILjava/nio/ByteBuffer;)V
       9: aload_1
      10: getfield      #24                 // Field io/netty/buffer/PoolChunk.freeBytes:I
      13: aload_0
      14: getfield      #16                 // Field freeMaxThreshold:I
      17: if_icmple     31
      20: aload_0
      21: aload_1
      22: invokespecial #25                 // Method remove:(Lio/netty/buffer/PoolChunk;)V
      25: aload_0
      26: aload_1
      27: invokespecial #29                 // Method move0:(Lio/netty/buffer/PoolChunk;)Z
      30: ireturn
      31: iconst_1
      32: ireturn

  private boolean move(io.netty.buffer.PoolChunk<T>);
    Code:
       0: getstatic     #2                  // Field $assertionsDisabled:Z
       3: ifne          25
       6: aload_1
       7: invokevirtual #30                 // Method io/netty/buffer/PoolChunk.usage:()I
      10: aload_0
      11: getfield      #8                  // Field maxUsage:I
      14: if_icmplt     25
      17: new           #3                  // class java/lang/AssertionError
      20: dup
      21: invokespecial #4                  // Method java/lang/AssertionError."<init>":()V
      24: athrow
      25: aload_1
      26: getfield      #24                 // Field io/netty/buffer/PoolChunk.freeBytes:I
      29: aload_0
      30: getfield      #16                 // Field freeMaxThreshold:I
      33: if_icmple     42
      36: aload_0
      37: aload_1
      38: invokespecial #29                 // Method move0:(Lio/netty/buffer/PoolChunk;)Z
      41: ireturn
      42: aload_0
      43: aload_1
      44: invokevirtual #31                 // Method add0:(Lio/netty/buffer/PoolChunk;)V
      47: iconst_1
      48: ireturn

  private boolean move0(io.netty.buffer.PoolChunk<T>);
    Code:
       0: aload_0
       1: getfield      #20                 // Field prevList:Lio/netty/buffer/PoolChunkList;
       4: ifnonnull     30
       7: getstatic     #2                  // Field $assertionsDisabled:Z
      10: ifne          28
      13: aload_1
      14: invokevirtual #30                 // Method io/netty/buffer/PoolChunk.usage:()I
      17: ifeq          28
      20: new           #3                  // class java/lang/AssertionError
      23: dup
      24: invokespecial #4                  // Method java/lang/AssertionError."<init>":()V
      27: athrow
      28: iconst_0
      29: ireturn
      30: aload_0
      31: getfield      #20                 // Field prevList:Lio/netty/buffer/PoolChunkList;
      34: aload_1
      35: invokespecial #32                 // Method move:(Lio/netty/buffer/PoolChunk;)Z
      38: ireturn

  void add(io.netty.buffer.PoolChunk<T>);
    Code:
       0: aload_1
       1: getfield      #24                 // Field io/netty/buffer/PoolChunk.freeBytes:I
       4: aload_0
       5: getfield      #15                 // Field freeMinThreshold:I
       8: if_icmpgt     20
      11: aload_0
      12: getfield      #6                  // Field nextList:Lio/netty/buffer/PoolChunkList;
      15: aload_1
      16: invokevirtual #26                 // Method add:(Lio/netty/buffer/PoolChunk;)V
      19: return
      20: aload_0
      21: aload_1
      22: invokevirtual #31                 // Method add0:(Lio/netty/buffer/PoolChunk;)V
      25: return

  void add0(io.netty.buffer.PoolChunk<T>);
    Code:
       0: aload_1
       1: aload_0
       2: putfield      #33                 // Field io/netty/buffer/PoolChunk.parent:Lio/netty/buffer/PoolChunkList;
       5: aload_0
       6: getfield      #22                 // Field head:Lio/netty/buffer/PoolChunk;
       9: ifnonnull     30
      12: aload_0
      13: aload_1
      14: putfield      #22                 // Field head:Lio/netty/buffer/PoolChunk;
      17: aload_1
      18: aconst_null
      19: putfield      #34                 // Field io/netty/buffer/PoolChunk.prev:Lio/netty/buffer/PoolChunk;
      22: aload_1
      23: aconst_null
      24: putfield      #27                 // Field io/netty/buffer/PoolChunk.next:Lio/netty/buffer/PoolChunk;
      27: goto          56
      30: aload_1
      31: aconst_null
      32: putfield      #34                 // Field io/netty/buffer/PoolChunk.prev:Lio/netty/buffer/PoolChunk;
      35: aload_1
      36: aload_0
      37: getfield      #22                 // Field head:Lio/netty/buffer/PoolChunk;
      40: putfield      #27                 // Field io/netty/buffer/PoolChunk.next:Lio/netty/buffer/PoolChunk;
      43: aload_0
      44: getfield      #22                 // Field head:Lio/netty/buffer/PoolChunk;
      47: aload_1
      48: putfield      #34                 // Field io/netty/buffer/PoolChunk.prev:Lio/netty/buffer/PoolChunk;
      51: aload_0
      52: aload_1
      53: putfield      #22                 // Field head:Lio/netty/buffer/PoolChunk;
      56: return

  private void remove(io.netty.buffer.PoolChunk<T>);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #22                 // Field head:Lio/netty/buffer/PoolChunk;
       5: if_acmpne     34
       8: aload_0
       9: aload_1
      10: getfield      #27                 // Field io/netty/buffer/PoolChunk.next:Lio/netty/buffer/PoolChunk;
      13: putfield      #22                 // Field head:Lio/netty/buffer/PoolChunk;
      16: aload_0
      17: getfield      #22                 // Field head:Lio/netty/buffer/PoolChunk;
      20: ifnull        59
      23: aload_0
      24: getfield      #22                 // Field head:Lio/netty/buffer/PoolChunk;
      27: aconst_null
      28: putfield      #34                 // Field io/netty/buffer/PoolChunk.prev:Lio/netty/buffer/PoolChunk;
      31: goto          59
      34: aload_1
      35: getfield      #27                 // Field io/netty/buffer/PoolChunk.next:Lio/netty/buffer/PoolChunk;
      38: astore_2
      39: aload_1
      40: getfield      #34                 // Field io/netty/buffer/PoolChunk.prev:Lio/netty/buffer/PoolChunk;
      43: aload_2
      44: putfield      #27                 // Field io/netty/buffer/PoolChunk.next:Lio/netty/buffer/PoolChunk;
      47: aload_2
      48: ifnull        59
      51: aload_2
      52: aload_1
      53: getfield      #34                 // Field io/netty/buffer/PoolChunk.prev:Lio/netty/buffer/PoolChunk;
      56: putfield      #34                 // Field io/netty/buffer/PoolChunk.prev:Lio/netty/buffer/PoolChunk;
      59: return

  public int minUsage();
    Code:
       0: aload_0
       1: getfield      #7                  // Field minUsage:I
       4: invokestatic  #17                 // Method minUsage0:(I)I
       7: ireturn

  public int maxUsage();
    Code:
       0: aload_0
       1: getfield      #8                  // Field maxUsage:I
       4: bipush        100
       6: invokestatic  #35                 // Method java/lang/Math.min:(II)I
       9: ireturn

  private static int minUsage0(int);
    Code:
       0: iconst_1
       1: iload_0
       2: invokestatic  #36                 // Method java/lang/Math.max:(II)I
       5: ireturn

  public java.util.Iterator<io.netty.buffer.PoolChunkMetric> iterator();
    Code:
       0: aload_0
       1: getfield      #5                  // Field arena:Lio/netty/buffer/PoolArena;
       4: dup
       5: astore_1
       6: monitorenter
       7: aload_0
       8: getfield      #22                 // Field head:Lio/netty/buffer/PoolChunk;
      11: ifnonnull     20
      14: getstatic     #37                 // Field EMPTY_METRICS:Ljava/util/Iterator;
      17: aload_1
      18: monitorexit
      19: areturn
      20: new           #38                 // class java/util/ArrayList
      23: dup
      24: invokespecial #39                 // Method java/util/ArrayList."<init>":()V
      27: astore_2
      28: aload_0
      29: getfield      #22                 // Field head:Lio/netty/buffer/PoolChunk;
      32: astore_3
      33: aload_2
      34: aload_3
      35: invokeinterface #40,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      40: pop
      41: aload_3
      42: getfield      #27                 // Field io/netty/buffer/PoolChunk.next:Lio/netty/buffer/PoolChunk;
      45: astore_3
      46: aload_3
      47: ifnonnull     33
      50: goto          53
      53: aload_2
      54: invokeinterface #41,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      59: aload_1
      60: monitorexit
      61: areturn
      62: astore        4
      64: aload_1
      65: monitorexit
      66: aload         4
      68: athrow
    Exception table:
       from    to  target type
           7    19    62   any
          20    61    62   any
          62    66    62   any

  public java.lang.String toString();
    Code:
       0: new           #42                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #43                 // Method java/lang/StringBuilder."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #5                  // Field arena:Lio/netty/buffer/PoolArena;
      12: dup
      13: astore_2
      14: monitorenter
      15: aload_0
      16: getfield      #22                 // Field head:Lio/netty/buffer/PoolChunk;
      19: ifnonnull     27
      22: ldc           #44                 // String none
      24: aload_2
      25: monitorexit
      26: areturn
      27: aload_0
      28: getfield      #22                 // Field head:Lio/netty/buffer/PoolChunk;
      31: astore_3
      32: aload_1
      33: aload_3
      34: invokevirtual #45                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      37: pop
      38: aload_3
      39: getfield      #27                 // Field io/netty/buffer/PoolChunk.next:Lio/netty/buffer/PoolChunk;
      42: astore_3
      43: aload_3
      44: ifnonnull     50
      47: goto          61
      50: aload_1
      51: getstatic     #46                 // Field io/netty/util/internal/StringUtil.NEWLINE:Ljava/lang/String;
      54: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      57: pop
      58: goto          32
      61: aload_2
      62: monitorexit
      63: goto          73
      66: astore        4
      68: aload_2
      69: monitorexit
      70: aload         4
      72: athrow
      73: aload_1
      74: invokevirtual #48                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      77: areturn
    Exception table:
       from    to  target type
          15    26    66   any
          27    63    66   any
          66    70    66   any

  void destroy(io.netty.buffer.PoolArena<T>);
    Code:
       0: aload_0
       1: getfield      #22                 // Field head:Lio/netty/buffer/PoolChunk;
       4: astore_2
       5: aload_2
       6: ifnull        22
       9: aload_1
      10: aload_2
      11: invokevirtual #49                 // Method io/netty/buffer/PoolArena.destroyChunk:(Lio/netty/buffer/PoolChunk;)V
      14: aload_2
      15: getfield      #27                 // Field io/netty/buffer/PoolChunk.next:Lio/netty/buffer/PoolChunk;
      18: astore_2
      19: goto          5
      22: aload_0
      23: aconst_null
      24: putfield      #22                 // Field head:Lio/netty/buffer/PoolChunk;
      27: return

  static {};
    Code:
       0: ldc           #50                 // class io/netty/buffer/PoolChunkList
       2: invokevirtual #51                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #2                  // Field $assertionsDisabled:Z
      16: invokestatic  #52                 // Method java/util/Collections.emptyList:()Ljava/util/List;
      19: invokeinterface #41,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      24: putstatic     #37                 // Field EMPTY_METRICS:Ljava/util/Iterator;
      27: return
}
