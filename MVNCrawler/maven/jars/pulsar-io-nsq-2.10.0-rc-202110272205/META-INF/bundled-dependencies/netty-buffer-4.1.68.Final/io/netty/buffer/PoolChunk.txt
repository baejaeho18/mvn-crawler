Compiled from "PoolChunk.java"
final class io.netty.buffer.PoolChunk<T> implements io.netty.buffer.PoolChunkMetric {
  private static final int SIZE_BIT_LENGTH;

  private static final int INUSED_BIT_LENGTH;

  private static final int SUBPAGE_BIT_LENGTH;

  private static final int BITMAP_IDX_BIT_LENGTH;

  static final int IS_SUBPAGE_SHIFT;

  static final int IS_USED_SHIFT;

  static final int SIZE_SHIFT;

  static final int RUN_OFFSET_SHIFT;

  final io.netty.buffer.PoolArena<T> arena;

  final java.lang.Object base;

  final T memory;

  final boolean unpooled;

  private final io.netty.buffer.LongLongHashMap runsAvailMap;

  private final io.netty.buffer.LongPriorityQueue[] runsAvail;

  private final io.netty.buffer.PoolSubpage<T>[] subpages;

  private final int pageSize;

  private final int pageShifts;

  private final int chunkSize;

  private final java.util.Deque<java.nio.ByteBuffer> cachedNioBuffers;

  int freeBytes;

  io.netty.buffer.PoolChunkList<T> parent;

  io.netty.buffer.PoolChunk<T> prev;

  io.netty.buffer.PoolChunk<T> next;

  static final boolean $assertionsDisabled;

  io.netty.buffer.PoolChunk(io.netty.buffer.PoolArena<T>, java.lang.Object, T, int, int, int, int);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #3                  // Field unpooled:Z
       9: aload_0
      10: aload_1
      11: putfield      #4                  // Field arena:Lio/netty/buffer/PoolArena;
      14: aload_0
      15: aload_2
      16: putfield      #5                  // Field base:Ljava/lang/Object;
      19: aload_0
      20: aload_3
      21: putfield      #6                  // Field memory:Ljava/lang/Object;
      24: aload_0
      25: iload         4
      27: putfield      #7                  // Field pageSize:I
      30: aload_0
      31: iload         5
      33: putfield      #8                  // Field pageShifts:I
      36: aload_0
      37: iload         6
      39: putfield      #9                  // Field chunkSize:I
      42: aload_0
      43: iload         6
      45: putfield      #10                 // Field freeBytes:I
      48: aload_0
      49: iload         7
      51: invokestatic  #11                 // Method newRunsAvailqueueArray:(I)[Lio/netty/buffer/LongPriorityQueue;
      54: putfield      #12                 // Field runsAvail:[Lio/netty/buffer/LongPriorityQueue;
      57: aload_0
      58: new           #13                 // class io/netty/buffer/LongLongHashMap
      61: dup
      62: ldc2_w        #14                 // long -1l
      65: invokespecial #16                 // Method io/netty/buffer/LongLongHashMap."<init>":(J)V
      68: putfield      #17                 // Field runsAvailMap:Lio/netty/buffer/LongLongHashMap;
      71: aload_0
      72: iload         6
      74: iload         5
      76: ishr
      77: anewarray     #18                 // class io/netty/buffer/PoolSubpage
      80: putfield      #19                 // Field subpages:[Lio/netty/buffer/PoolSubpage;
      83: iload         6
      85: iload         5
      87: ishr
      88: istore        8
      90: iload         8
      92: i2l
      93: bipush        34
      95: lshl
      96: lstore        9
      98: aload_0
      99: iconst_0
     100: iload         8
     102: lload         9
     104: invokespecial #20                 // Method insertAvailRun:(IIJ)V
     107: aload_0
     108: new           #21                 // class java/util/ArrayDeque
     111: dup
     112: bipush        8
     114: invokespecial #22                 // Method java/util/ArrayDeque."<init>":(I)V
     117: putfield      #23                 // Field cachedNioBuffers:Ljava/util/Deque;
     120: return

  io.netty.buffer.PoolChunk(io.netty.buffer.PoolArena<T>, java.lang.Object, T, int);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #3                  // Field unpooled:Z
       9: aload_0
      10: aload_1
      11: putfield      #4                  // Field arena:Lio/netty/buffer/PoolArena;
      14: aload_0
      15: aload_2
      16: putfield      #5                  // Field base:Ljava/lang/Object;
      19: aload_0
      20: aload_3
      21: putfield      #6                  // Field memory:Ljava/lang/Object;
      24: aload_0
      25: iconst_0
      26: putfield      #7                  // Field pageSize:I
      29: aload_0
      30: iconst_0
      31: putfield      #8                  // Field pageShifts:I
      34: aload_0
      35: aconst_null
      36: putfield      #17                 // Field runsAvailMap:Lio/netty/buffer/LongLongHashMap;
      39: aload_0
      40: aconst_null
      41: putfield      #12                 // Field runsAvail:[Lio/netty/buffer/LongPriorityQueue;
      44: aload_0
      45: aconst_null
      46: putfield      #19                 // Field subpages:[Lio/netty/buffer/PoolSubpage;
      49: aload_0
      50: iload         4
      52: putfield      #9                  // Field chunkSize:I
      55: aload_0
      56: aconst_null
      57: putfield      #23                 // Field cachedNioBuffers:Ljava/util/Deque;
      60: return

  private static io.netty.buffer.LongPriorityQueue[] newRunsAvailqueueArray(int);
    Code:
       0: iload_0
       1: anewarray     #24                 // class io/netty/buffer/LongPriorityQueue
       4: astore_1
       5: iconst_0
       6: istore_2
       7: iload_2
       8: aload_1
       9: arraylength
      10: if_icmpge     29
      13: aload_1
      14: iload_2
      15: new           #24                 // class io/netty/buffer/LongPriorityQueue
      18: dup
      19: invokespecial #25                 // Method io/netty/buffer/LongPriorityQueue."<init>":()V
      22: aastore
      23: iinc          2, 1
      26: goto          7
      29: aload_1
      30: areturn

  private void insertAvailRun(int, int, long);
    Code:
       0: aload_0
       1: getfield      #4                  // Field arena:Lio/netty/buffer/PoolArena;
       4: iload_2
       5: invokevirtual #26                 // Method io/netty/buffer/PoolArena.pages2pageIdxFloor:(I)I
       8: istore        5
      10: aload_0
      11: getfield      #12                 // Field runsAvail:[Lio/netty/buffer/LongPriorityQueue;
      14: iload         5
      16: aaload
      17: astore        6
      19: aload         6
      21: lload_3
      22: invokevirtual #27                 // Method io/netty/buffer/LongPriorityQueue.offer:(J)V
      25: aload_0
      26: iload_1
      27: lload_3
      28: invokespecial #28                 // Method insertAvailRun0:(IJ)V
      31: iload_2
      32: iconst_1
      33: if_icmple     46
      36: aload_0
      37: iload_1
      38: iload_2
      39: invokestatic  #29                 // Method lastPage:(II)I
      42: lload_3
      43: invokespecial #28                 // Method insertAvailRun0:(IJ)V
      46: return

  private void insertAvailRun0(int, long);
    Code:
       0: aload_0
       1: getfield      #17                 // Field runsAvailMap:Lio/netty/buffer/LongLongHashMap;
       4: iload_1
       5: i2l
       6: lload_2
       7: invokevirtual #30                 // Method io/netty/buffer/LongLongHashMap.put:(JJ)J
      10: lstore        4
      12: getstatic     #31                 // Field $assertionsDisabled:Z
      15: ifne          35
      18: lload         4
      20: ldc2_w        #14                 // long -1l
      23: lcmp
      24: ifeq          35
      27: new           #32                 // class java/lang/AssertionError
      30: dup
      31: invokespecial #33                 // Method java/lang/AssertionError."<init>":()V
      34: athrow
      35: return

  private void removeAvailRun(long);
    Code:
       0: aload_0
       1: getfield      #4                  // Field arena:Lio/netty/buffer/PoolArena;
       4: lload_1
       5: invokestatic  #34                 // Method runPages:(J)I
       8: invokevirtual #26                 // Method io/netty/buffer/PoolArena.pages2pageIdxFloor:(I)I
      11: istore_3
      12: aload_0
      13: getfield      #12                 // Field runsAvail:[Lio/netty/buffer/LongPriorityQueue;
      16: iload_3
      17: aaload
      18: astore        4
      20: aload_0
      21: aload         4
      23: lload_1
      24: invokespecial #35                 // Method removeAvailRun:(Lio/netty/buffer/LongPriorityQueue;J)V
      27: return

  private void removeAvailRun(io.netty.buffer.LongPriorityQueue, long);
    Code:
       0: aload_1
       1: lload_2
       2: invokevirtual #36                 // Method io/netty/buffer/LongPriorityQueue.remove:(J)V
       5: lload_2
       6: invokestatic  #37                 // Method runOffset:(J)I
       9: istore        4
      11: lload_2
      12: invokestatic  #34                 // Method runPages:(J)I
      15: istore        5
      17: aload_0
      18: getfield      #17                 // Field runsAvailMap:Lio/netty/buffer/LongLongHashMap;
      21: iload         4
      23: i2l
      24: invokevirtual #38                 // Method io/netty/buffer/LongLongHashMap.remove:(J)V
      27: iload         5
      29: iconst_1
      30: if_icmple     48
      33: aload_0
      34: getfield      #17                 // Field runsAvailMap:Lio/netty/buffer/LongLongHashMap;
      37: iload         4
      39: iload         5
      41: invokestatic  #29                 // Method lastPage:(II)I
      44: i2l
      45: invokevirtual #38                 // Method io/netty/buffer/LongLongHashMap.remove:(J)V
      48: return

  private static int lastPage(int, int);
    Code:
       0: iload_0
       1: iload_1
       2: iadd
       3: iconst_1
       4: isub
       5: ireturn

  private long getAvailRunByOffset(int);
    Code:
       0: aload_0
       1: getfield      #17                 // Field runsAvailMap:Lio/netty/buffer/LongLongHashMap;
       4: iload_1
       5: i2l
       6: invokevirtual #39                 // Method io/netty/buffer/LongLongHashMap.get:(J)J
       9: lreturn

  public int usage();
    Code:
       0: aload_0
       1: getfield      #4                  // Field arena:Lio/netty/buffer/PoolArena;
       4: dup
       5: astore_2
       6: monitorenter
       7: aload_0
       8: getfield      #10                 // Field freeBytes:I
      11: istore_1
      12: aload_2
      13: monitorexit
      14: goto          22
      17: astore_3
      18: aload_2
      19: monitorexit
      20: aload_3
      21: athrow
      22: aload_0
      23: iload_1
      24: invokespecial #40                 // Method usage:(I)I
      27: ireturn
    Exception table:
       from    to  target type
           7    14    17   any
          17    20    17   any

  private int usage(int);
    Code:
       0: iload_1
       1: ifne          7
       4: bipush        100
       6: ireturn
       7: iload_1
       8: i2l
       9: ldc2_w        #41                 // long 100l
      12: lmul
      13: aload_0
      14: getfield      #9                  // Field chunkSize:I
      17: i2l
      18: ldiv
      19: l2i
      20: istore_2
      21: iload_2
      22: ifne          28
      25: bipush        99
      27: ireturn
      28: bipush        100
      30: iload_2
      31: isub
      32: ireturn

  boolean allocate(io.netty.buffer.PooledByteBuf<T>, int, int, io.netty.buffer.PoolThreadCache);
    Code:
       0: iload_3
       1: aload_0
       2: getfield      #4                  // Field arena:Lio/netty/buffer/PoolArena;
       5: getfield      #43                 // Field io/netty/buffer/PoolArena.smallMaxSizeIdx:I
       8: if_icmpgt     49
      11: aload_0
      12: iload_3
      13: invokespecial #44                 // Method allocateSubpage:(I)J
      16: lstore        5
      18: lload         5
      20: lconst_0
      21: lcmp
      22: ifge          27
      25: iconst_0
      26: ireturn
      27: getstatic     #31                 // Field $assertionsDisabled:Z
      30: ifne          76
      33: lload         5
      35: invokestatic  #45                 // Method isSubpage:(J)Z
      38: ifne          76
      41: new           #32                 // class java/lang/AssertionError
      44: dup
      45: invokespecial #33                 // Method java/lang/AssertionError."<init>":()V
      48: athrow
      49: aload_0
      50: getfield      #4                  // Field arena:Lio/netty/buffer/PoolArena;
      53: iload_3
      54: invokevirtual #46                 // Method io/netty/buffer/PoolArena.sizeIdx2size:(I)I
      57: istore        7
      59: aload_0
      60: iload         7
      62: invokespecial #47                 // Method allocateRun:(I)J
      65: lstore        5
      67: lload         5
      69: lconst_0
      70: lcmp
      71: ifge          76
      74: iconst_0
      75: ireturn
      76: aload_0
      77: getfield      #23                 // Field cachedNioBuffers:Ljava/util/Deque;
      80: ifnull        98
      83: aload_0
      84: getfield      #23                 // Field cachedNioBuffers:Ljava/util/Deque;
      87: invokeinterface #48,  1           // InterfaceMethod java/util/Deque.pollLast:()Ljava/lang/Object;
      92: checkcast     #49                 // class java/nio/ByteBuffer
      95: goto          99
      98: aconst_null
      99: astore        7
     101: aload_0
     102: aload_1
     103: aload         7
     105: lload         5
     107: iload_2
     108: aload         4
     110: invokevirtual #50                 // Method initBuf:(Lio/netty/buffer/PooledByteBuf;Ljava/nio/ByteBuffer;JILio/netty/buffer/PoolThreadCache;)V
     113: iconst_1
     114: ireturn

  private long allocateRun(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #8                  // Field pageShifts:I
       5: ishr
       6: istore_2
       7: aload_0
       8: getfield      #4                  // Field arena:Lio/netty/buffer/PoolArena;
      11: iload_2
      12: invokevirtual #51                 // Method io/netty/buffer/PoolArena.pages2pageIdx:(I)I
      15: istore_3
      16: aload_0
      17: getfield      #12                 // Field runsAvail:[Lio/netty/buffer/LongPriorityQueue;
      20: dup
      21: astore        4
      23: monitorenter
      24: aload_0
      25: iload_3
      26: invokespecial #52                 // Method runFirstBestFit:(I)I
      29: istore        5
      31: iload         5
      33: iconst_m1
      34: if_icmpne     44
      37: ldc2_w        #14                 // long -1l
      40: aload         4
      42: monitorexit
      43: lreturn
      44: aload_0
      45: getfield      #12                 // Field runsAvail:[Lio/netty/buffer/LongPriorityQueue;
      48: iload         5
      50: aaload
      51: astore        6
      53: aload         6
      55: invokevirtual #53                 // Method io/netty/buffer/LongPriorityQueue.poll:()J
      58: lstore        7
      60: getstatic     #31                 // Field $assertionsDisabled:Z
      63: ifne          111
      66: lload         7
      68: ldc2_w        #14                 // long -1l
      71: lcmp
      72: ifeq          83
      75: lload         7
      77: invokestatic  #54                 // Method isUsed:(J)Z
      80: ifeq          111
      83: new           #32                 // class java/lang/AssertionError
      86: dup
      87: new           #55                 // class java/lang/StringBuilder
      90: dup
      91: invokespecial #56                 // Method java/lang/StringBuilder."<init>":()V
      94: ldc           #57                 // String invalid handle:
      96: invokevirtual #58                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      99: lload         7
     101: invokevirtual #59                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
     104: invokevirtual #60                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     107: invokespecial #61                 // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
     110: athrow
     111: aload_0
     112: aload         6
     114: lload         7
     116: invokespecial #35                 // Method removeAvailRun:(Lio/netty/buffer/LongPriorityQueue;J)V
     119: lload         7
     121: ldc2_w        #14                 // long -1l
     124: lcmp
     125: ifeq          137
     128: aload_0
     129: lload         7
     131: iload_2
     132: invokespecial #62                 // Method splitLargeRun:(JI)J
     135: lstore        7
     137: aload_0
     138: dup
     139: getfield      #10                 // Field freeBytes:I
     142: aload_0
     143: getfield      #8                  // Field pageShifts:I
     146: lload         7
     148: invokestatic  #63                 // Method runSize:(IJ)I
     151: isub
     152: putfield      #10                 // Field freeBytes:I
     155: lload         7
     157: aload         4
     159: monitorexit
     160: lreturn
     161: astore        9
     163: aload         4
     165: monitorexit
     166: aload         9
     168: athrow
    Exception table:
       from    to  target type
          24    43   161   any
          44   160   161   any
         161   166   161   any

  private int calculateRunSize(int);
    Code:
       0: iconst_1
       1: aload_0
       2: getfield      #8                  // Field pageShifts:I
       5: iconst_4
       6: isub
       7: ishl
       8: istore_2
       9: iconst_0
      10: istore_3
      11: aload_0
      12: getfield      #4                  // Field arena:Lio/netty/buffer/PoolArena;
      15: iload_1
      16: invokevirtual #46                 // Method io/netty/buffer/PoolArena.sizeIdx2size:(I)I
      19: istore        5
      21: iload_3
      22: aload_0
      23: getfield      #7                  // Field pageSize:I
      26: iadd
      27: istore_3
      28: iload_3
      29: iload         5
      31: idiv
      32: istore        4
      34: iload         4
      36: iload_2
      37: if_icmpge     49
      40: iload_3
      41: iload         4
      43: iload         5
      45: imul
      46: if_icmpne     21
      49: iload         4
      51: iload_2
      52: if_icmple     71
      55: iload_3
      56: aload_0
      57: getfield      #7                  // Field pageSize:I
      60: isub
      61: istore_3
      62: iload_3
      63: iload         5
      65: idiv
      66: istore        4
      68: goto          49
      71: getstatic     #31                 // Field $assertionsDisabled:Z
      74: ifne          90
      77: iload         4
      79: ifgt          90
      82: new           #32                 // class java/lang/AssertionError
      85: dup
      86: invokespecial #33                 // Method java/lang/AssertionError."<init>":()V
      89: athrow
      90: getstatic     #31                 // Field $assertionsDisabled:Z
      93: ifne          112
      96: iload_3
      97: aload_0
      98: getfield      #9                  // Field chunkSize:I
     101: if_icmple     112
     104: new           #32                 // class java/lang/AssertionError
     107: dup
     108: invokespecial #33                 // Method java/lang/AssertionError."<init>":()V
     111: athrow
     112: getstatic     #31                 // Field $assertionsDisabled:Z
     115: ifne          132
     118: iload_3
     119: iload         5
     121: if_icmpge     132
     124: new           #32                 // class java/lang/AssertionError
     127: dup
     128: invokespecial #33                 // Method java/lang/AssertionError."<init>":()V
     131: athrow
     132: iload_3
     133: ireturn

  private int runFirstBestFit(int);
    Code:
       0: aload_0
       1: getfield      #10                 // Field freeBytes:I
       4: aload_0
       5: getfield      #9                  // Field chunkSize:I
       8: if_icmpne     21
      11: aload_0
      12: getfield      #4                  // Field arena:Lio/netty/buffer/PoolArena;
      15: getfield      #65                 // Field io/netty/buffer/PoolArena.nPSizes:I
      18: iconst_1
      19: isub
      20: ireturn
      21: iload_1
      22: istore_2
      23: iload_2
      24: aload_0
      25: getfield      #4                  // Field arena:Lio/netty/buffer/PoolArena;
      28: getfield      #65                 // Field io/netty/buffer/PoolArena.nPSizes:I
      31: if_icmpge     60
      34: aload_0
      35: getfield      #12                 // Field runsAvail:[Lio/netty/buffer/LongPriorityQueue;
      38: iload_2
      39: aaload
      40: astore_3
      41: aload_3
      42: ifnull        54
      45: aload_3
      46: invokevirtual #66                 // Method io/netty/buffer/LongPriorityQueue.isEmpty:()Z
      49: ifne          54
      52: iload_2
      53: ireturn
      54: iinc          2, 1
      57: goto          23
      60: iconst_m1
      61: ireturn

  private long splitLargeRun(long, int);
    Code:
       0: getstatic     #31                 // Field $assertionsDisabled:Z
       3: ifne          18
       6: iload_3
       7: ifgt          18
      10: new           #32                 // class java/lang/AssertionError
      13: dup
      14: invokespecial #33                 // Method java/lang/AssertionError."<init>":()V
      17: athrow
      18: lload_1
      19: invokestatic  #34                 // Method runPages:(J)I
      22: istore        4
      24: getstatic     #31                 // Field $assertionsDisabled:Z
      27: ifne          44
      30: iload_3
      31: iload         4
      33: if_icmple     44
      36: new           #32                 // class java/lang/AssertionError
      39: dup
      40: invokespecial #33                 // Method java/lang/AssertionError."<init>":()V
      43: athrow
      44: iload         4
      46: iload_3
      47: isub
      48: istore        5
      50: iload         5
      52: ifle          95
      55: lload_1
      56: invokestatic  #37                 // Method runOffset:(J)I
      59: istore        6
      61: iload         6
      63: iload_3
      64: iadd
      65: istore        7
      67: iload         7
      69: iload         5
      71: iconst_0
      72: invokestatic  #67                 // Method toRunHandle:(III)J
      75: lstore        8
      77: aload_0
      78: iload         7
      80: iload         5
      82: lload         8
      84: invokespecial #20                 // Method insertAvailRun:(IIJ)V
      87: iload         6
      89: iload_3
      90: iconst_1
      91: invokestatic  #67                 // Method toRunHandle:(III)J
      94: lreturn
      95: lload_1
      96: ldc2_w        #68                 // long 8589934592l
      99: lor
     100: lstore_1
     101: lload_1
     102: lreturn

  private long allocateSubpage(int);
    Code:
       0: aload_0
       1: getfield      #4                  // Field arena:Lio/netty/buffer/PoolArena;
       4: iload_1
       5: invokevirtual #70                 // Method io/netty/buffer/PoolArena.findSubpagePoolHead:(I)Lio/netty/buffer/PoolSubpage;
       8: astore_2
       9: aload_2
      10: dup
      11: astore_3
      12: monitorenter
      13: aload_0
      14: iload_1
      15: invokespecial #71                 // Method calculateRunSize:(I)I
      18: istore        4
      20: aload_0
      21: iload         4
      23: invokespecial #47                 // Method allocateRun:(I)J
      26: lstore        5
      28: lload         5
      30: lconst_0
      31: lcmp
      32: ifge          41
      35: ldc2_w        #14                 // long -1l
      38: aload_3
      39: monitorexit
      40: lreturn
      41: lload         5
      43: invokestatic  #37                 // Method runOffset:(J)I
      46: istore        7
      48: getstatic     #31                 // Field $assertionsDisabled:Z
      51: ifne          72
      54: aload_0
      55: getfield      #19                 // Field subpages:[Lio/netty/buffer/PoolSubpage;
      58: iload         7
      60: aaload
      61: ifnull        72
      64: new           #32                 // class java/lang/AssertionError
      67: dup
      68: invokespecial #33                 // Method java/lang/AssertionError."<init>":()V
      71: athrow
      72: aload_0
      73: getfield      #4                  // Field arena:Lio/netty/buffer/PoolArena;
      76: iload_1
      77: invokevirtual #46                 // Method io/netty/buffer/PoolArena.sizeIdx2size:(I)I
      80: istore        8
      82: new           #18                 // class io/netty/buffer/PoolSubpage
      85: dup
      86: aload_2
      87: aload_0
      88: aload_0
      89: getfield      #8                  // Field pageShifts:I
      92: iload         7
      94: aload_0
      95: getfield      #8                  // Field pageShifts:I
      98: lload         5
     100: invokestatic  #63                 // Method runSize:(IJ)I
     103: iload         8
     105: invokespecial #72                 // Method io/netty/buffer/PoolSubpage."<init>":(Lio/netty/buffer/PoolSubpage;Lio/netty/buffer/PoolChunk;IIII)V
     108: astore        9
     110: aload_0
     111: getfield      #19                 // Field subpages:[Lio/netty/buffer/PoolSubpage;
     114: iload         7
     116: aload         9
     118: aastore
     119: aload         9
     121: invokevirtual #73                 // Method io/netty/buffer/PoolSubpage.allocate:()J
     124: aload_3
     125: monitorexit
     126: lreturn
     127: astore        10
     129: aload_3
     130: monitorexit
     131: aload         10
     133: athrow
    Exception table:
       from    to  target type
          13    40   127   any
          41   126   127   any
         127   131   127   any

  void free(long, int, java.nio.ByteBuffer);
    Code:
       0: lload_1
       1: invokestatic  #45                 // Method isSubpage:(J)Z
       4: ifeq          138
       7: aload_0
       8: getfield      #4                  // Field arena:Lio/netty/buffer/PoolArena;
      11: iload_3
      12: invokevirtual #74                 // Method io/netty/buffer/PoolArena.size2SizeIdx:(I)I
      15: istore        5
      17: aload_0
      18: getfield      #4                  // Field arena:Lio/netty/buffer/PoolArena;
      21: iload         5
      23: invokevirtual #70                 // Method io/netty/buffer/PoolArena.findSubpagePoolHead:(I)Lio/netty/buffer/PoolSubpage;
      26: astore        6
      28: lload_1
      29: invokestatic  #37                 // Method runOffset:(J)I
      32: istore        7
      34: aload_0
      35: getfield      #19                 // Field subpages:[Lio/netty/buffer/PoolSubpage;
      38: iload         7
      40: aaload
      41: astore        8
      43: getstatic     #31                 // Field $assertionsDisabled:Z
      46: ifne          70
      49: aload         8
      51: ifnull        62
      54: aload         8
      56: getfield      #75                 // Field io/netty/buffer/PoolSubpage.doNotDestroy:Z
      59: ifne          70
      62: new           #32                 // class java/lang/AssertionError
      65: dup
      66: invokespecial #33                 // Method java/lang/AssertionError."<init>":()V
      69: athrow
      70: aload         6
      72: dup
      73: astore        9
      75: monitorenter
      76: aload         8
      78: aload         6
      80: lload_1
      81: invokestatic  #76                 // Method bitmapIdx:(J)I
      84: invokevirtual #77                 // Method io/netty/buffer/PoolSubpage.free:(Lio/netty/buffer/PoolSubpage;I)Z
      87: ifeq          94
      90: aload         9
      92: monitorexit
      93: return
      94: getstatic     #31                 // Field $assertionsDisabled:Z
      97: ifne          116
     100: aload         8
     102: getfield      #75                 // Field io/netty/buffer/PoolSubpage.doNotDestroy:Z
     105: ifeq          116
     108: new           #32                 // class java/lang/AssertionError
     111: dup
     112: invokespecial #33                 // Method java/lang/AssertionError."<init>":()V
     115: athrow
     116: aload_0
     117: getfield      #19                 // Field subpages:[Lio/netty/buffer/PoolSubpage;
     120: iload         7
     122: aconst_null
     123: aastore
     124: aload         9
     126: monitorexit
     127: goto          138
     130: astore        10
     132: aload         9
     134: monitorexit
     135: aload         10
     137: athrow
     138: lload_1
     139: invokestatic  #34                 // Method runPages:(J)I
     142: istore        5
     144: aload_0
     145: getfield      #12                 // Field runsAvail:[Lio/netty/buffer/LongPriorityQueue;
     148: dup
     149: astore        6
     151: monitorenter
     152: aload_0
     153: lload_1
     154: invokespecial #78                 // Method collapseRuns:(J)J
     157: lstore        7
     159: lload         7
     161: ldc2_w        #79                 // long -8589934593l
     164: land
     165: lstore        7
     167: lload         7
     169: ldc2_w        #81                 // long -4294967297l
     172: land
     173: lstore        7
     175: aload_0
     176: lload         7
     178: invokestatic  #37                 // Method runOffset:(J)I
     181: lload         7
     183: invokestatic  #34                 // Method runPages:(J)I
     186: lload         7
     188: invokespecial #20                 // Method insertAvailRun:(IIJ)V
     191: aload_0
     192: dup
     193: getfield      #10                 // Field freeBytes:I
     196: iload         5
     198: aload_0
     199: getfield      #8                  // Field pageShifts:I
     202: ishl
     203: iadd
     204: putfield      #10                 // Field freeBytes:I
     207: aload         6
     209: monitorexit
     210: goto          221
     213: astore        11
     215: aload         6
     217: monitorexit
     218: aload         11
     220: athrow
     221: aload         4
     223: ifnull        260
     226: aload_0
     227: getfield      #23                 // Field cachedNioBuffers:Ljava/util/Deque;
     230: ifnull        260
     233: aload_0
     234: getfield      #23                 // Field cachedNioBuffers:Ljava/util/Deque;
     237: invokeinterface #83,  1           // InterfaceMethod java/util/Deque.size:()I
     242: getstatic     #84                 // Field io/netty/buffer/PooledByteBufAllocator.DEFAULT_MAX_CACHED_BYTEBUFFERS_PER_CHUNK:I
     245: if_icmpge     260
     248: aload_0
     249: getfield      #23                 // Field cachedNioBuffers:Ljava/util/Deque;
     252: aload         4
     254: invokeinterface #85,  2           // InterfaceMethod java/util/Deque.offer:(Ljava/lang/Object;)Z
     259: pop
     260: return
    Exception table:
       from    to  target type
          76    93   130   any
          94   127   130   any
         130   135   130   any
         152   210   213   any
         213   218   213   any

  private long collapseRuns(long);
    Code:
       0: aload_0
       1: aload_0
       2: lload_1
       3: invokespecial #86                 // Method collapsePast:(J)J
       6: invokespecial #87                 // Method collapseNext:(J)J
       9: lreturn

  private long collapsePast(long);
    Code:
       0: lload_1
       1: invokestatic  #37                 // Method runOffset:(J)I
       4: istore_3
       5: lload_1
       6: invokestatic  #34                 // Method runPages:(J)I
       9: istore        4
      11: aload_0
      12: iload_3
      13: iconst_1
      14: isub
      15: invokespecial #88                 // Method getAvailRunByOffset:(I)J
      18: lstore        5
      20: lload         5
      22: ldc2_w        #14                 // long -1l
      25: lcmp
      26: ifne          31
      29: lload_1
      30: lreturn
      31: lload         5
      33: invokestatic  #37                 // Method runOffset:(J)I
      36: istore        7
      38: lload         5
      40: invokestatic  #34                 // Method runPages:(J)I
      43: istore        8
      45: lload         5
      47: lload_1
      48: lcmp
      49: ifeq          82
      52: iload         7
      54: iload         8
      56: iadd
      57: iload_3
      58: if_icmpne     82
      61: aload_0
      62: lload         5
      64: invokespecial #89                 // Method removeAvailRun:(J)V
      67: iload         7
      69: iload         8
      71: iload         4
      73: iadd
      74: iconst_0
      75: invokestatic  #67                 // Method toRunHandle:(III)J
      78: lstore_1
      79: goto          84
      82: lload_1
      83: lreturn
      84: goto          0

  private long collapseNext(long);
    Code:
       0: lload_1
       1: invokestatic  #37                 // Method runOffset:(J)I
       4: istore_3
       5: lload_1
       6: invokestatic  #34                 // Method runPages:(J)I
       9: istore        4
      11: aload_0
      12: iload_3
      13: iload         4
      15: iadd
      16: invokespecial #88                 // Method getAvailRunByOffset:(I)J
      19: lstore        5
      21: lload         5
      23: ldc2_w        #14                 // long -1l
      26: lcmp
      27: ifne          32
      30: lload_1
      31: lreturn
      32: lload         5
      34: invokestatic  #37                 // Method runOffset:(J)I
      37: istore        7
      39: lload         5
      41: invokestatic  #34                 // Method runPages:(J)I
      44: istore        8
      46: lload         5
      48: lload_1
      49: lcmp
      50: ifeq          82
      53: iload_3
      54: iload         4
      56: iadd
      57: iload         7
      59: if_icmpne     82
      62: aload_0
      63: lload         5
      65: invokespecial #89                 // Method removeAvailRun:(J)V
      68: iload_3
      69: iload         4
      71: iload         8
      73: iadd
      74: iconst_0
      75: invokestatic  #67                 // Method toRunHandle:(III)J
      78: lstore_1
      79: goto          84
      82: lload_1
      83: lreturn
      84: goto          0

  private static long toRunHandle(int, int, int);
    Code:
       0: iload_0
       1: i2l
       2: bipush        49
       4: lshl
       5: iload_1
       6: i2l
       7: bipush        34
       9: lshl
      10: lor
      11: iload_2
      12: i2l
      13: bipush        33
      15: lshl
      16: lor
      17: lreturn

  void initBuf(io.netty.buffer.PooledByteBuf<T>, java.nio.ByteBuffer, long, int, io.netty.buffer.PoolThreadCache);
    Code:
       0: lload_3
       1: invokestatic  #90                 // Method isRun:(J)Z
       4: ifeq          46
       7: aload_1
       8: aload_0
       9: aload_2
      10: lload_3
      11: lload_3
      12: invokestatic  #37                 // Method runOffset:(J)I
      15: aload_0
      16: getfield      #8                  // Field pageShifts:I
      19: ishl
      20: iload         5
      22: aload_0
      23: getfield      #8                  // Field pageShifts:I
      26: lload_3
      27: invokestatic  #63                 // Method runSize:(IJ)I
      30: aload_0
      31: getfield      #4                  // Field arena:Lio/netty/buffer/PoolArena;
      34: getfield      #91                 // Field io/netty/buffer/PoolArena.parent:Lio/netty/buffer/PooledByteBufAllocator;
      37: invokevirtual #92                 // Method io/netty/buffer/PooledByteBufAllocator.threadCache:()Lio/netty/buffer/PoolThreadCache;
      40: invokevirtual #93                 // Method io/netty/buffer/PooledByteBuf.init:(Lio/netty/buffer/PoolChunk;Ljava/nio/ByteBuffer;JIIILio/netty/buffer/PoolThreadCache;)V
      43: goto          57
      46: aload_0
      47: aload_1
      48: aload_2
      49: lload_3
      50: iload         5
      52: aload         6
      54: invokevirtual #94                 // Method initBufWithSubpage:(Lio/netty/buffer/PooledByteBuf;Ljava/nio/ByteBuffer;JILio/netty/buffer/PoolThreadCache;)V
      57: return

  void initBufWithSubpage(io.netty.buffer.PooledByteBuf<T>, java.nio.ByteBuffer, long, int, io.netty.buffer.PoolThreadCache);
    Code:
       0: lload_3
       1: invokestatic  #37                 // Method runOffset:(J)I
       4: istore        7
       6: lload_3
       7: invokestatic  #76                 // Method bitmapIdx:(J)I
      10: istore        8
      12: aload_0
      13: getfield      #19                 // Field subpages:[Lio/netty/buffer/PoolSubpage;
      16: iload         7
      18: aaload
      19: astore        9
      21: getstatic     #31                 // Field $assertionsDisabled:Z
      24: ifne          43
      27: aload         9
      29: getfield      #75                 // Field io/netty/buffer/PoolSubpage.doNotDestroy:Z
      32: ifne          43
      35: new           #32                 // class java/lang/AssertionError
      38: dup
      39: invokespecial #33                 // Method java/lang/AssertionError."<init>":()V
      42: athrow
      43: getstatic     #31                 // Field $assertionsDisabled:Z
      46: ifne          67
      49: iload         5
      51: aload         9
      53: getfield      #95                 // Field io/netty/buffer/PoolSubpage.elemSize:I
      56: if_icmple     67
      59: new           #32                 // class java/lang/AssertionError
      62: dup
      63: invokespecial #33                 // Method java/lang/AssertionError."<init>":()V
      66: athrow
      67: iload         7
      69: aload_0
      70: getfield      #8                  // Field pageShifts:I
      73: ishl
      74: iload         8
      76: aload         9
      78: getfield      #95                 // Field io/netty/buffer/PoolSubpage.elemSize:I
      81: imul
      82: iadd
      83: istore        10
      85: aload_1
      86: aload_0
      87: aload_2
      88: lload_3
      89: iload         10
      91: iload         5
      93: aload         9
      95: getfield      #95                 // Field io/netty/buffer/PoolSubpage.elemSize:I
      98: aload         6
     100: invokevirtual #93                 // Method io/netty/buffer/PooledByteBuf.init:(Lio/netty/buffer/PoolChunk;Ljava/nio/ByteBuffer;JIIILio/netty/buffer/PoolThreadCache;)V
     103: return

  public int chunkSize();
    Code:
       0: aload_0
       1: getfield      #9                  // Field chunkSize:I
       4: ireturn

  public int freeBytes();
    Code:
       0: aload_0
       1: getfield      #4                  // Field arena:Lio/netty/buffer/PoolArena;
       4: dup
       5: astore_1
       6: monitorenter
       7: aload_0
       8: getfield      #10                 // Field freeBytes:I
      11: aload_1
      12: monitorexit
      13: ireturn
      14: astore_2
      15: aload_1
      16: monitorexit
      17: aload_2
      18: athrow
    Exception table:
       from    to  target type
           7    13    14   any
          14    17    14   any

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #4                  // Field arena:Lio/netty/buffer/PoolArena;
       4: dup
       5: astore_2
       6: monitorenter
       7: aload_0
       8: getfield      #10                 // Field freeBytes:I
      11: istore_1
      12: aload_2
      13: monitorexit
      14: goto          22
      17: astore_3
      18: aload_2
      19: monitorexit
      20: aload_3
      21: athrow
      22: new           #55                 // class java/lang/StringBuilder
      25: dup
      26: invokespecial #56                 // Method java/lang/StringBuilder."<init>":()V
      29: ldc           #96                 // String Chunk(
      31: invokevirtual #58                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      34: aload_0
      35: invokestatic  #97                 // Method java/lang/System.identityHashCode:(Ljava/lang/Object;)I
      38: invokestatic  #98                 // Method java/lang/Integer.toHexString:(I)Ljava/lang/String;
      41: invokevirtual #58                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      44: ldc           #99                 // String :
      46: invokevirtual #58                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      49: aload_0
      50: iload_1
      51: invokespecial #40                 // Method usage:(I)I
      54: invokevirtual #100                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      57: ldc           #101                // String %,
      59: invokevirtual #58                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      62: aload_0
      63: getfield      #9                  // Field chunkSize:I
      66: iload_1
      67: isub
      68: invokevirtual #100                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      71: bipush        47
      73: invokevirtual #102                // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      76: aload_0
      77: getfield      #9                  // Field chunkSize:I
      80: invokevirtual #100                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      83: bipush        41
      85: invokevirtual #102                // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      88: invokevirtual #60                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      91: areturn
    Exception table:
       from    to  target type
           7    14    17   any
          17    20    17   any

  void destroy();
    Code:
       0: aload_0
       1: getfield      #4                  // Field arena:Lio/netty/buffer/PoolArena;
       4: aload_0
       5: invokevirtual #103                // Method io/netty/buffer/PoolArena.destroyChunk:(Lio/netty/buffer/PoolChunk;)V
       8: return

  static int runOffset(long);
    Code:
       0: lload_0
       1: bipush        49
       3: lshr
       4: l2i
       5: ireturn

  static int runSize(int, long);
    Code:
       0: lload_1
       1: invokestatic  #34                 // Method runPages:(J)I
       4: iload_0
       5: ishl
       6: ireturn

  static int runPages(long);
    Code:
       0: lload_0
       1: bipush        34
       3: lshr
       4: ldc2_w        #104                // long 32767l
       7: land
       8: l2i
       9: ireturn

  static boolean isUsed(long);
    Code:
       0: lload_0
       1: bipush        33
       3: lshr
       4: lconst_1
       5: land
       6: lconst_1
       7: lcmp
       8: ifne          15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  static boolean isRun(long);
    Code:
       0: lload_0
       1: invokestatic  #45                 // Method isSubpage:(J)Z
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  static boolean isSubpage(long);
    Code:
       0: lload_0
       1: bipush        32
       3: lshr
       4: lconst_1
       5: land
       6: lconst_1
       7: lcmp
       8: ifne          15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  static int bitmapIdx(long);
    Code:
       0: lload_0
       1: l2i
       2: ireturn

  static {};
    Code:
       0: ldc           #1                  // class io/netty/buffer/PoolChunk
       2: invokevirtual #106                // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #31                 // Field $assertionsDisabled:Z
      16: return
}
