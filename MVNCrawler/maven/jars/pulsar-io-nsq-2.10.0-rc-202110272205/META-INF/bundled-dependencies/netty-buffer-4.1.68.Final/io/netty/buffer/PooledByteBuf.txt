Compiled from "PooledByteBuf.java"
abstract class io.netty.buffer.PooledByteBuf<T> extends io.netty.buffer.AbstractReferenceCountedByteBuf {
  private final io.netty.util.internal.ObjectPool$Handle<io.netty.buffer.PooledByteBuf<T>> recyclerHandle;

  protected io.netty.buffer.PoolChunk<T> chunk;

  protected long handle;

  protected T memory;

  protected int offset;

  protected int length;

  int maxLength;

  io.netty.buffer.PoolThreadCache cache;

  java.nio.ByteBuffer tmpNioBuf;

  private io.netty.buffer.ByteBufAllocator allocator;

  static final boolean $assertionsDisabled;

  protected io.netty.buffer.PooledByteBuf(io.netty.util.internal.ObjectPool$Handle<? extends io.netty.buffer.PooledByteBuf<T>>, int);
    Code:
       0: aload_0
       1: iload_2
       2: invokespecial #1                  // Method io/netty/buffer/AbstractReferenceCountedByteBuf."<init>":(I)V
       5: aload_0
       6: aload_1
       7: putfield      #2                  // Field recyclerHandle:Lio/netty/util/internal/ObjectPool$Handle;
      10: return

  void init(io.netty.buffer.PoolChunk<T>, java.nio.ByteBuffer, long, int, int, int, io.netty.buffer.PoolThreadCache);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: lload_3
       4: iload         5
       6: iload         6
       8: iload         7
      10: aload         8
      12: invokespecial #3                  // Method init0:(Lio/netty/buffer/PoolChunk;Ljava/nio/ByteBuffer;JIIILio/netty/buffer/PoolThreadCache;)V
      15: return

  void initUnpooled(io.netty.buffer.PoolChunk<T>, int);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: lconst_0
       4: iconst_0
       5: iload_2
       6: iload_2
       7: aconst_null
       8: invokespecial #3                  // Method init0:(Lio/netty/buffer/PoolChunk;Ljava/nio/ByteBuffer;JIIILio/netty/buffer/PoolThreadCache;)V
      11: return

  private void init0(io.netty.buffer.PoolChunk<T>, java.nio.ByteBuffer, long, int, int, int, io.netty.buffer.PoolThreadCache);
    Code:
       0: getstatic     #4                  // Field $assertionsDisabled:Z
       3: ifne          20
       6: lload_3
       7: lconst_0
       8: lcmp
       9: ifge          20
      12: new           #5                  // class java/lang/AssertionError
      15: dup
      16: invokespecial #6                  // Method java/lang/AssertionError."<init>":()V
      19: athrow
      20: getstatic     #4                  // Field $assertionsDisabled:Z
      23: ifne          38
      26: aload_1
      27: ifnonnull     38
      30: new           #5                  // class java/lang/AssertionError
      33: dup
      34: invokespecial #6                  // Method java/lang/AssertionError."<init>":()V
      37: athrow
      38: aload_0
      39: aload_1
      40: putfield      #7                  // Field chunk:Lio/netty/buffer/PoolChunk;
      43: aload_0
      44: aload_1
      45: getfield      #8                  // Field io/netty/buffer/PoolChunk.memory:Ljava/lang/Object;
      48: putfield      #9                  // Field memory:Ljava/lang/Object;
      51: aload_0
      52: aload_2
      53: putfield      #10                 // Field tmpNioBuf:Ljava/nio/ByteBuffer;
      56: aload_0
      57: aload_1
      58: getfield      #11                 // Field io/netty/buffer/PoolChunk.arena:Lio/netty/buffer/PoolArena;
      61: getfield      #12                 // Field io/netty/buffer/PoolArena.parent:Lio/netty/buffer/PooledByteBufAllocator;
      64: putfield      #13                 // Field allocator:Lio/netty/buffer/ByteBufAllocator;
      67: aload_0
      68: aload         8
      70: putfield      #14                 // Field cache:Lio/netty/buffer/PoolThreadCache;
      73: aload_0
      74: lload_3
      75: putfield      #15                 // Field handle:J
      78: aload_0
      79: iload         5
      81: putfield      #16                 // Field offset:I
      84: aload_0
      85: iload         6
      87: putfield      #17                 // Field length:I
      90: aload_0
      91: iload         7
      93: putfield      #18                 // Field maxLength:I
      96: return

  final void reuse(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #19                 // Method maxCapacity:(I)V
       5: aload_0
       6: invokevirtual #20                 // Method resetRefCnt:()V
       9: aload_0
      10: iconst_0
      11: iconst_0
      12: invokevirtual #21                 // Method setIndex0:(II)V
      15: aload_0
      16: invokevirtual #22                 // Method discardMarks:()V
      19: return

  public final int capacity();
    Code:
       0: aload_0
       1: getfield      #17                 // Field length:I
       4: ireturn

  public int maxFastWritableBytes();
    Code:
       0: aload_0
       1: getfield      #18                 // Field maxLength:I
       4: aload_0
       5: invokevirtual #23                 // Method maxCapacity:()I
       8: invokestatic  #24                 // Method java/lang/Math.min:(II)I
      11: aload_0
      12: getfield      #25                 // Field writerIndex:I
      15: isub
      16: ireturn

  public final io.netty.buffer.ByteBuf capacity(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #17                 // Field length:I
       5: if_icmpne     14
       8: aload_0
       9: invokevirtual #26                 // Method ensureAccessible:()V
      12: aload_0
      13: areturn
      14: aload_0
      15: iload_1
      16: invokevirtual #27                 // Method checkNewCapacity:(I)V
      19: aload_0
      20: getfield      #7                  // Field chunk:Lio/netty/buffer/PoolChunk;
      23: getfield      #28                 // Field io/netty/buffer/PoolChunk.unpooled:Z
      26: ifne          95
      29: iload_1
      30: aload_0
      31: getfield      #17                 // Field length:I
      34: if_icmple     52
      37: iload_1
      38: aload_0
      39: getfield      #18                 // Field maxLength:I
      42: if_icmpgt     95
      45: aload_0
      46: iload_1
      47: putfield      #17                 // Field length:I
      50: aload_0
      51: areturn
      52: iload_1
      53: aload_0
      54: getfield      #18                 // Field maxLength:I
      57: iconst_1
      58: iushr
      59: if_icmple     95
      62: aload_0
      63: getfield      #18                 // Field maxLength:I
      66: sipush        512
      69: if_icmpgt     83
      72: iload_1
      73: aload_0
      74: getfield      #18                 // Field maxLength:I
      77: bipush        16
      79: isub
      80: if_icmple     95
      83: aload_0
      84: iload_1
      85: putfield      #17                 // Field length:I
      88: aload_0
      89: iload_1
      90: invokevirtual #29                 // Method trimIndicesToCapacity:(I)V
      93: aload_0
      94: areturn
      95: aload_0
      96: getfield      #7                  // Field chunk:Lio/netty/buffer/PoolChunk;
      99: getfield      #11                 // Field io/netty/buffer/PoolChunk.arena:Lio/netty/buffer/PoolArena;
     102: aload_0
     103: iload_1
     104: iconst_1
     105: invokevirtual #30                 // Method io/netty/buffer/PoolArena.reallocate:(Lio/netty/buffer/PooledByteBuf;IZ)V
     108: aload_0
     109: areturn

  public final io.netty.buffer.ByteBufAllocator alloc();
    Code:
       0: aload_0
       1: getfield      #13                 // Field allocator:Lio/netty/buffer/ByteBufAllocator;
       4: areturn

  public final java.nio.ByteOrder order();
    Code:
       0: getstatic     #31                 // Field java/nio/ByteOrder.BIG_ENDIAN:Ljava/nio/ByteOrder;
       3: areturn

  public final io.netty.buffer.ByteBuf unwrap();
    Code:
       0: aconst_null
       1: areturn

  public final io.netty.buffer.ByteBuf retainedDuplicate();
    Code:
       0: aload_0
       1: aload_0
       2: aload_0
       3: invokevirtual #32                 // Method readerIndex:()I
       6: aload_0
       7: invokevirtual #33                 // Method writerIndex:()I
      10: invokestatic  #34                 // Method io/netty/buffer/PooledDuplicatedByteBuf.newInstance:(Lio/netty/buffer/AbstractByteBuf;Lio/netty/buffer/ByteBuf;II)Lio/netty/buffer/PooledDuplicatedByteBuf;
      13: areturn

  public final io.netty.buffer.ByteBuf retainedSlice();
    Code:
       0: aload_0
       1: invokevirtual #32                 // Method readerIndex:()I
       4: istore_1
       5: aload_0
       6: iload_1
       7: aload_0
       8: invokevirtual #33                 // Method writerIndex:()I
      11: iload_1
      12: isub
      13: invokevirtual #35                 // Method retainedSlice:(II)Lio/netty/buffer/ByteBuf;
      16: areturn

  public final io.netty.buffer.ByteBuf retainedSlice(int, int);
    Code:
       0: aload_0
       1: aload_0
       2: iload_1
       3: iload_2
       4: invokestatic  #36                 // Method io/netty/buffer/PooledSlicedByteBuf.newInstance:(Lio/netty/buffer/AbstractByteBuf;Lio/netty/buffer/ByteBuf;II)Lio/netty/buffer/PooledSlicedByteBuf;
       7: areturn

  protected final java.nio.ByteBuffer internalNioBuffer();
    Code:
       0: aload_0
       1: getfield      #10                 // Field tmpNioBuf:Ljava/nio/ByteBuffer;
       4: astore_1
       5: aload_1
       6: ifnonnull     26
       9: aload_0
      10: aload_0
      11: aload_0
      12: getfield      #9                  // Field memory:Ljava/lang/Object;
      15: invokevirtual #37                 // Method newInternalNioBuffer:(Ljava/lang/Object;)Ljava/nio/ByteBuffer;
      18: dup
      19: astore_1
      20: putfield      #10                 // Field tmpNioBuf:Ljava/nio/ByteBuffer;
      23: goto          31
      26: aload_1
      27: invokevirtual #38                 // Method java/nio/ByteBuffer.clear:()Ljava/nio/Buffer;
      30: pop
      31: aload_1
      32: areturn

  protected abstract java.nio.ByteBuffer newInternalNioBuffer(T);

  protected final void deallocate();
    Code:
       0: aload_0
       1: getfield      #15                 // Field handle:J
       4: lconst_0
       5: lcmp
       6: iflt          67
       9: aload_0
      10: getfield      #15                 // Field handle:J
      13: lstore_1
      14: aload_0
      15: ldc2_w        #39                 // long -1l
      18: putfield      #15                 // Field handle:J
      21: aload_0
      22: aconst_null
      23: putfield      #9                  // Field memory:Ljava/lang/Object;
      26: aload_0
      27: getfield      #7                  // Field chunk:Lio/netty/buffer/PoolChunk;
      30: getfield      #11                 // Field io/netty/buffer/PoolChunk.arena:Lio/netty/buffer/PoolArena;
      33: aload_0
      34: getfield      #7                  // Field chunk:Lio/netty/buffer/PoolChunk;
      37: aload_0
      38: getfield      #10                 // Field tmpNioBuf:Ljava/nio/ByteBuffer;
      41: lload_1
      42: aload_0
      43: getfield      #18                 // Field maxLength:I
      46: aload_0
      47: getfield      #14                 // Field cache:Lio/netty/buffer/PoolThreadCache;
      50: invokevirtual #41                 // Method io/netty/buffer/PoolArena.free:(Lio/netty/buffer/PoolChunk;Ljava/nio/ByteBuffer;JILio/netty/buffer/PoolThreadCache;)V
      53: aload_0
      54: aconst_null
      55: putfield      #10                 // Field tmpNioBuf:Ljava/nio/ByteBuffer;
      58: aload_0
      59: aconst_null
      60: putfield      #7                  // Field chunk:Lio/netty/buffer/PoolChunk;
      63: aload_0
      64: invokespecial #42                 // Method recycle:()V
      67: return

  private void recycle();
    Code:
       0: aload_0
       1: getfield      #2                  // Field recyclerHandle:Lio/netty/util/internal/ObjectPool$Handle;
       4: aload_0
       5: invokeinterface #43,  2           // InterfaceMethod io/netty/util/internal/ObjectPool$Handle.recycle:(Ljava/lang/Object;)V
      10: return

  protected final int idx(int);
    Code:
       0: aload_0
       1: getfield      #16                 // Field offset:I
       4: iload_1
       5: iadd
       6: ireturn

  final java.nio.ByteBuffer _internalNioBuffer(int, int, boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #44                 // Method idx:(I)I
       5: istore_1
       6: iload_3
       7: ifeq          21
      10: aload_0
      11: aload_0
      12: getfield      #9                  // Field memory:Ljava/lang/Object;
      15: invokevirtual #37                 // Method newInternalNioBuffer:(Ljava/lang/Object;)Ljava/nio/ByteBuffer;
      18: goto          25
      21: aload_0
      22: invokevirtual #45                 // Method internalNioBuffer:()Ljava/nio/ByteBuffer;
      25: astore        4
      27: aload         4
      29: iload_1
      30: iload_2
      31: iadd
      32: invokevirtual #46                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
      35: iload_1
      36: invokevirtual #47                 // Method java/nio/Buffer.position:(I)Ljava/nio/Buffer;
      39: pop
      40: aload         4
      42: areturn

  java.nio.ByteBuffer duplicateInternalNioBuffer(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokevirtual #48                 // Method checkIndex:(II)V
       6: aload_0
       7: iload_1
       8: iload_2
       9: iconst_1
      10: invokevirtual #49                 // Method _internalNioBuffer:(IIZ)Ljava/nio/ByteBuffer;
      13: areturn

  public final java.nio.ByteBuffer internalNioBuffer(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokevirtual #48                 // Method checkIndex:(II)V
       6: aload_0
       7: iload_1
       8: iload_2
       9: iconst_0
      10: invokevirtual #49                 // Method _internalNioBuffer:(IIZ)Ljava/nio/ByteBuffer;
      13: areturn

  public final int nioBufferCount();
    Code:
       0: iconst_1
       1: ireturn

  public final java.nio.ByteBuffer nioBuffer(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokevirtual #50                 // Method duplicateInternalNioBuffer:(II)Ljava/nio/ByteBuffer;
       6: invokevirtual #51                 // Method java/nio/ByteBuffer.slice:()Ljava/nio/ByteBuffer;
       9: areturn

  public final java.nio.ByteBuffer[] nioBuffers(int, int);
    Code:
       0: iconst_1
       1: anewarray     #52                 // class java/nio/ByteBuffer
       4: dup
       5: iconst_0
       6: aload_0
       7: iload_1
       8: iload_2
       9: invokevirtual #53                 // Method nioBuffer:(II)Ljava/nio/ByteBuffer;
      12: aastore
      13: areturn

  public final boolean isContiguous();
    Code:
       0: iconst_1
       1: ireturn

  public final int getBytes(int, java.nio.channels.GatheringByteChannel, int) throws java.io.IOException;
    Code:
       0: aload_2
       1: aload_0
       2: iload_1
       3: iload_3
       4: invokevirtual #50                 // Method duplicateInternalNioBuffer:(II)Ljava/nio/ByteBuffer;
       7: invokeinterface #54,  2           // InterfaceMethod java/nio/channels/GatheringByteChannel.write:(Ljava/nio/ByteBuffer;)I
      12: ireturn

  public final int readBytes(java.nio.channels.GatheringByteChannel, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_2
       2: invokevirtual #55                 // Method checkReadableBytes:(I)V
       5: aload_1
       6: aload_0
       7: aload_0
       8: getfield      #56                 // Field readerIndex:I
      11: iload_2
      12: iconst_0
      13: invokevirtual #49                 // Method _internalNioBuffer:(IIZ)Ljava/nio/ByteBuffer;
      16: invokeinterface #54,  2           // InterfaceMethod java/nio/channels/GatheringByteChannel.write:(Ljava/nio/ByteBuffer;)I
      21: istore_3
      22: aload_0
      23: dup
      24: getfield      #56                 // Field readerIndex:I
      27: iload_3
      28: iadd
      29: putfield      #56                 // Field readerIndex:I
      32: iload_3
      33: ireturn

  public final int getBytes(int, java.nio.channels.FileChannel, long, int) throws java.io.IOException;
    Code:
       0: aload_2
       1: aload_0
       2: iload_1
       3: iload         5
       5: invokevirtual #50                 // Method duplicateInternalNioBuffer:(II)Ljava/nio/ByteBuffer;
       8: lload_3
       9: invokevirtual #57                 // Method java/nio/channels/FileChannel.write:(Ljava/nio/ByteBuffer;J)I
      12: ireturn

  public final int readBytes(java.nio.channels.FileChannel, long, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload         4
       3: invokevirtual #55                 // Method checkReadableBytes:(I)V
       6: aload_1
       7: aload_0
       8: aload_0
       9: getfield      #56                 // Field readerIndex:I
      12: iload         4
      14: iconst_0
      15: invokevirtual #49                 // Method _internalNioBuffer:(IIZ)Ljava/nio/ByteBuffer;
      18: lload_2
      19: invokevirtual #57                 // Method java/nio/channels/FileChannel.write:(Ljava/nio/ByteBuffer;J)I
      22: istore        5
      24: aload_0
      25: dup
      26: getfield      #56                 // Field readerIndex:I
      29: iload         5
      31: iadd
      32: putfield      #56                 // Field readerIndex:I
      35: iload         5
      37: ireturn

  public final int setBytes(int, java.nio.channels.ScatteringByteChannel, int) throws java.io.IOException;
    Code:
       0: aload_2
       1: aload_0
       2: iload_1
       3: iload_3
       4: invokevirtual #58                 // Method internalNioBuffer:(II)Ljava/nio/ByteBuffer;
       7: invokeinterface #59,  2           // InterfaceMethod java/nio/channels/ScatteringByteChannel.read:(Ljava/nio/ByteBuffer;)I
      12: ireturn
      13: astore        4
      15: iconst_m1
      16: ireturn
    Exception table:
       from    to  target type
           0    12    13   Class java/nio/channels/ClosedChannelException

  public final int setBytes(int, java.nio.channels.FileChannel, long, int) throws java.io.IOException;
    Code:
       0: aload_2
       1: aload_0
       2: iload_1
       3: iload         5
       5: invokevirtual #58                 // Method internalNioBuffer:(II)Ljava/nio/ByteBuffer;
       8: lload_3
       9: invokevirtual #61                 // Method java/nio/channels/FileChannel.read:(Ljava/nio/ByteBuffer;J)I
      12: ireturn
      13: astore        6
      15: iconst_m1
      16: ireturn
    Exception table:
       from    to  target type
           0    12    13   Class java/nio/channels/ClosedChannelException

  static {};
    Code:
       0: ldc           #62                 // class io/netty/buffer/PooledByteBuf
       2: invokevirtual #63                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #4                  // Field $assertionsDisabled:Z
      16: return
}
