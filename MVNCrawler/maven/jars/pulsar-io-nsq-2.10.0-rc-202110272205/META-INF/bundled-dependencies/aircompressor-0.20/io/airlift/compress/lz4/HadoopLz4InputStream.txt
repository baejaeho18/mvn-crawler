Compiled from "HadoopLz4InputStream.java"
class io.airlift.compress.lz4.HadoopLz4InputStream extends org.apache.hadoop.io.compress.CompressionInputStream {
  private final io.airlift.compress.lz4.Lz4Decompressor decompressor;

  private final java.io.InputStream in;

  private final byte[] uncompressedChunk;

  private int uncompressedBlockLength;

  private int uncompressedChunkOffset;

  private int uncompressedChunkLength;

  private byte[] compressed;

  public io.airlift.compress.lz4.HadoopLz4InputStream(java.io.InputStream, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #3                  // Method org/apache/hadoop/io/compress/CompressionInputStream."<init>":(Ljava/io/InputStream;)V
       5: aload_0
       6: new           #9                  // class io/airlift/compress/lz4/Lz4Decompressor
       9: dup
      10: invokespecial #11                 // Method io/airlift/compress/lz4/Lz4Decompressor."<init>":()V
      13: putfield      #14                 // Field decompressor:Lio/airlift/compress/lz4/Lz4Decompressor;
      16: aload_0
      17: iconst_0
      18: newarray       byte
      20: putfield      #20                 // Field compressed:[B
      23: aload_0
      24: aload_1
      25: putfield      #24                 // Field in:Ljava/io/InputStream;
      28: aload_0
      29: iload_2
      30: bipush        8
      32: iadd
      33: newarray       byte
      35: putfield      #28                 // Field uncompressedChunk:[B
      38: return

  public int read() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #31                 // Field uncompressedChunkOffset:I
       4: aload_0
       5: getfield      #35                 // Field uncompressedChunkLength:I
       8: if_icmplt     52
      11: aload_0
      12: invokespecial #38                 // Method bufferCompressedData:()I
      15: istore_1
      16: iload_1
      17: ifge          22
      20: iconst_m1
      21: ireturn
      22: aload_0
      23: aload_0
      24: getfield      #14                 // Field decompressor:Lio/airlift/compress/lz4/Lz4Decompressor;
      27: aload_0
      28: getfield      #20                 // Field compressed:[B
      31: iconst_0
      32: iload_1
      33: aload_0
      34: getfield      #28                 // Field uncompressedChunk:[B
      37: iconst_0
      38: aload_0
      39: getfield      #28                 // Field uncompressedChunk:[B
      42: arraylength
      43: invokevirtual #42                 // Method io/airlift/compress/lz4/Lz4Decompressor.decompress:([BII[BII)I
      46: putfield      #35                 // Field uncompressedChunkLength:I
      49: goto          0
      52: aload_0
      53: getfield      #28                 // Field uncompressedChunk:[B
      56: aload_0
      57: dup
      58: getfield      #31                 // Field uncompressedChunkOffset:I
      61: dup_x1
      62: iconst_1
      63: iadd
      64: putfield      #31                 // Field uncompressedChunkOffset:I
      67: baload
      68: sipush        255
      71: iand
      72: ireturn

  public int read(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #31                 // Field uncompressedChunkOffset:I
       4: aload_0
       5: getfield      #35                 // Field uncompressedChunkLength:I
       8: if_icmplt     97
      11: aload_0
      12: invokespecial #38                 // Method bufferCompressedData:()I
      15: istore        4
      17: iload         4
      19: ifge          24
      22: iconst_m1
      23: ireturn
      24: iload_3
      25: aload_0
      26: getfield      #46                 // Field uncompressedBlockLength:I
      29: if_icmplt     66
      32: aload_0
      33: aload_0
      34: getfield      #14                 // Field decompressor:Lio/airlift/compress/lz4/Lz4Decompressor;
      37: aload_0
      38: getfield      #20                 // Field compressed:[B
      41: iconst_0
      42: iload         4
      44: aload_1
      45: iload_2
      46: iload_3
      47: invokevirtual #42                 // Method io/airlift/compress/lz4/Lz4Decompressor.decompress:([BII[BII)I
      50: putfield      #35                 // Field uncompressedChunkLength:I
      53: aload_0
      54: aload_0
      55: getfield      #35                 // Field uncompressedChunkLength:I
      58: putfield      #31                 // Field uncompressedChunkOffset:I
      61: aload_0
      62: getfield      #35                 // Field uncompressedChunkLength:I
      65: ireturn
      66: aload_0
      67: aload_0
      68: getfield      #14                 // Field decompressor:Lio/airlift/compress/lz4/Lz4Decompressor;
      71: aload_0
      72: getfield      #20                 // Field compressed:[B
      75: iconst_0
      76: iload         4
      78: aload_0
      79: getfield      #28                 // Field uncompressedChunk:[B
      82: iconst_0
      83: aload_0
      84: getfield      #28                 // Field uncompressedChunk:[B
      87: arraylength
      88: invokevirtual #42                 // Method io/airlift/compress/lz4/Lz4Decompressor.decompress:([BII[BII)I
      91: putfield      #35                 // Field uncompressedChunkLength:I
      94: goto          0
      97: iload_3
      98: aload_0
      99: getfield      #35                 // Field uncompressedChunkLength:I
     102: aload_0
     103: getfield      #31                 // Field uncompressedChunkOffset:I
     106: isub
     107: invokestatic  #49                 // Method java/lang/Math.min:(II)I
     110: istore        4
     112: aload_0
     113: getfield      #28                 // Field uncompressedChunk:[B
     116: aload_0
     117: getfield      #31                 // Field uncompressedChunkOffset:I
     120: aload_1
     121: iload_2
     122: iload         4
     124: invokestatic  #55                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     127: aload_0
     128: dup
     129: getfield      #31                 // Field uncompressedChunkOffset:I
     132: iload         4
     134: iadd
     135: putfield      #31                 // Field uncompressedChunkOffset:I
     138: iload         4
     140: ireturn

  public void resetState() throws java.io.IOException;
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #46                 // Field uncompressedBlockLength:I
       5: aload_0
       6: iconst_0
       7: putfield      #31                 // Field uncompressedChunkOffset:I
      10: aload_0
      11: iconst_0
      12: putfield      #35                 // Field uncompressedChunkLength:I
      15: return

  private int bufferCompressedData() throws java.io.IOException;
    Code:
       0: aload_0
       1: dup
       2: getfield      #46                 // Field uncompressedBlockLength:I
       5: aload_0
       6: getfield      #31                 // Field uncompressedChunkOffset:I
       9: isub
      10: putfield      #46                 // Field uncompressedBlockLength:I
      13: aload_0
      14: iconst_0
      15: putfield      #31                 // Field uncompressedChunkOffset:I
      18: aload_0
      19: iconst_0
      20: putfield      #35                 // Field uncompressedChunkLength:I
      23: aload_0
      24: getfield      #46                 // Field uncompressedBlockLength:I
      27: ifne          53
      30: aload_0
      31: aload_0
      32: invokespecial #61                 // Method readBigEndianInt:()I
      35: putfield      #46                 // Field uncompressedBlockLength:I
      38: aload_0
      39: getfield      #46                 // Field uncompressedBlockLength:I
      42: iconst_m1
      43: if_icmpne     23
      46: aload_0
      47: iconst_0
      48: putfield      #46                 // Field uncompressedBlockLength:I
      51: iconst_m1
      52: ireturn
      53: aload_0
      54: invokespecial #61                 // Method readBigEndianInt:()I
      57: istore_1
      58: iload_1
      59: iconst_m1
      60: if_icmpne     65
      63: iconst_m1
      64: ireturn
      65: aload_0
      66: getfield      #20                 // Field compressed:[B
      69: arraylength
      70: iload_1
      71: if_icmpge     84
      74: aload_0
      75: iload_1
      76: bipush        8
      78: iadd
      79: newarray       byte
      81: putfield      #20                 // Field compressed:[B
      84: aload_0
      85: iload_1
      86: aload_0
      87: getfield      #20                 // Field compressed:[B
      90: invokespecial #64                 // Method readInput:(I[B)V
      93: iload_1
      94: ireturn

  private void readInput(int, byte[]) throws java.io.IOException;
    Code:
       0: iconst_0
       1: istore_3
       2: iload_3
       3: iload_1
       4: if_icmpge     45
       7: aload_0
       8: getfield      #24                 // Field in:Ljava/io/InputStream;
      11: aload_2
      12: iload_3
      13: iload_1
      14: iload_3
      15: isub
      16: invokevirtual #68                 // Method java/io/InputStream.read:([BII)I
      19: istore        4
      21: iload         4
      23: iconst_m1
      24: if_icmpne     37
      27: new           #74                 // class java/io/EOFException
      30: dup
      31: ldc           #76                 // String encountered EOF while reading block data
      33: invokespecial #78                 // Method java/io/EOFException."<init>":(Ljava/lang/String;)V
      36: athrow
      37: iload_3
      38: iload         4
      40: iadd
      41: istore_3
      42: goto          2
      45: return

  private int readBigEndianInt() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #24                 // Field in:Ljava/io/InputStream;
       4: invokevirtual #81                 // Method java/io/InputStream.read:()I
       7: istore_1
       8: iload_1
       9: ifge          14
      12: iconst_m1
      13: ireturn
      14: aload_0
      15: getfield      #24                 // Field in:Ljava/io/InputStream;
      18: invokevirtual #81                 // Method java/io/InputStream.read:()I
      21: istore_2
      22: aload_0
      23: getfield      #24                 // Field in:Ljava/io/InputStream;
      26: invokevirtual #81                 // Method java/io/InputStream.read:()I
      29: istore_3
      30: aload_0
      31: getfield      #24                 // Field in:Ljava/io/InputStream;
      34: invokevirtual #81                 // Method java/io/InputStream.read:()I
      37: istore        4
      39: iload_2
      40: iload_3
      41: ior
      42: iload         4
      44: ior
      45: ifge          58
      48: new           #83                 // class java/io/IOException
      51: dup
      52: ldc           #85                 // String Stream is truncated
      54: invokespecial #87                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      57: athrow
      58: iload_1
      59: bipush        24
      61: ishl
      62: iload_2
      63: bipush        16
      65: ishl
      66: iadd
      67: iload_3
      68: bipush        8
      70: ishl
      71: iadd
      72: iload         4
      74: iadd
      75: ireturn
}
