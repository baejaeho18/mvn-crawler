Compiled from "AbstractChannelPoolMap.java"
class io.netty.channel.pool.AbstractChannelPoolMap$1 implements io.netty.util.concurrent.GenericFutureListener<io.netty.util.concurrent.Future<? super java.lang.Void>> {
  final io.netty.util.concurrent.Promise val$removePromise;

  final io.netty.channel.pool.AbstractChannelPoolMap this$0;

  io.netty.channel.pool.AbstractChannelPoolMap$1(io.netty.channel.pool.AbstractChannelPoolMap, io.netty.util.concurrent.Promise);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lio/netty/channel/pool/AbstractChannelPoolMap;
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field val$removePromise:Lio/netty/util/concurrent/Promise;
      10: aload_0
      11: invokespecial #3                  // Method java/lang/Object."<init>":()V
      14: return

  public void operationComplete(io.netty.util.concurrent.Future<? super java.lang.Void>) throws java.lang.Exception;
    Code:
       0: aload_1
       1: invokeinterface #4,  1            // InterfaceMethod io/netty/util/concurrent/Future.isSuccess:()Z
       6: ifeq          25
       9: aload_0
      10: getfield      #2                  // Field val$removePromise:Lio/netty/util/concurrent/Promise;
      13: getstatic     #5                  // Field java/lang/Boolean.TRUE:Ljava/lang/Boolean;
      16: invokeinterface #6,  2            // InterfaceMethod io/netty/util/concurrent/Promise.setSuccess:(Ljava/lang/Object;)Lio/netty/util/concurrent/Promise;
      21: pop
      22: goto          41
      25: aload_0
      26: getfield      #2                  // Field val$removePromise:Lio/netty/util/concurrent/Promise;
      29: aload_1
      30: invokeinterface #7,  1            // InterfaceMethod io/netty/util/concurrent/Future.cause:()Ljava/lang/Throwable;
      35: invokeinterface #8,  2            // InterfaceMethod io/netty/util/concurrent/Promise.setFailure:(Ljava/lang/Throwable;)Lio/netty/util/concurrent/Promise;
      40: pop
      41: return
}
