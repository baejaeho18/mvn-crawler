Compiled from "ProducerBuilder.java"
public interface org.apache.pulsar.client.api.ProducerBuilder<T> extends java.lang.Cloneable {
  public abstract org.apache.pulsar.client.api.Producer<T> create() throws org.apache.pulsar.client.api.PulsarClientException;

  public abstract java.util.concurrent.CompletableFuture<org.apache.pulsar.client.api.Producer<T>> createAsync();

  public abstract org.apache.pulsar.client.api.ProducerBuilder<T> loadConf(java.util.Map<java.lang.String, java.lang.Object>);

  public abstract org.apache.pulsar.client.api.ProducerBuilder<T> clone();

  public abstract org.apache.pulsar.client.api.ProducerBuilder<T> topic(java.lang.String);

  public abstract org.apache.pulsar.client.api.ProducerBuilder<T> producerName(java.lang.String);

  public abstract org.apache.pulsar.client.api.ProducerBuilder<T> accessMode(org.apache.pulsar.client.api.ProducerAccessMode);

  public abstract org.apache.pulsar.client.api.ProducerBuilder<T> sendTimeout(int, java.util.concurrent.TimeUnit);

  public abstract org.apache.pulsar.client.api.ProducerBuilder<T> maxPendingMessages(int);

  public abstract org.apache.pulsar.client.api.ProducerBuilder<T> maxPendingMessagesAcrossPartitions(int);

  public abstract org.apache.pulsar.client.api.ProducerBuilder<T> blockIfQueueFull(boolean);

  public abstract org.apache.pulsar.client.api.ProducerBuilder<T> messageRoutingMode(org.apache.pulsar.client.api.MessageRoutingMode);

  public abstract org.apache.pulsar.client.api.ProducerBuilder<T> hashingScheme(org.apache.pulsar.client.api.HashingScheme);

  public abstract org.apache.pulsar.client.api.ProducerBuilder<T> compressionType(org.apache.pulsar.client.api.CompressionType);

  public abstract org.apache.pulsar.client.api.ProducerBuilder<T> messageRouter(org.apache.pulsar.client.api.MessageRouter);

  public abstract org.apache.pulsar.client.api.ProducerBuilder<T> enableBatching(boolean);

  public abstract org.apache.pulsar.client.api.ProducerBuilder<T> enableChunking(boolean);

  public abstract org.apache.pulsar.client.api.ProducerBuilder<T> cryptoKeyReader(org.apache.pulsar.client.api.CryptoKeyReader);

  public abstract org.apache.pulsar.client.api.ProducerBuilder<T> defaultCryptoKeyReader(java.lang.String);

  public abstract org.apache.pulsar.client.api.ProducerBuilder<T> defaultCryptoKeyReader(java.util.Map<java.lang.String, java.lang.String>);

  public abstract org.apache.pulsar.client.api.ProducerBuilder<T> addEncryptionKey(java.lang.String);

  public abstract org.apache.pulsar.client.api.ProducerBuilder<T> cryptoFailureAction(org.apache.pulsar.client.api.ProducerCryptoFailureAction);

  public abstract org.apache.pulsar.client.api.ProducerBuilder<T> batchingMaxPublishDelay(long, java.util.concurrent.TimeUnit);

  public abstract org.apache.pulsar.client.api.ProducerBuilder<T> roundRobinRouterBatchingPartitionSwitchFrequency(int);

  public abstract org.apache.pulsar.client.api.ProducerBuilder<T> batchingMaxMessages(int);

  public abstract org.apache.pulsar.client.api.ProducerBuilder<T> batchingMaxBytes(int);

  public abstract org.apache.pulsar.client.api.ProducerBuilder<T> batcherBuilder(org.apache.pulsar.client.api.BatcherBuilder);

  public abstract org.apache.pulsar.client.api.ProducerBuilder<T> initialSequenceId(long);

  public abstract org.apache.pulsar.client.api.ProducerBuilder<T> property(java.lang.String, java.lang.String);

  public abstract org.apache.pulsar.client.api.ProducerBuilder<T> properties(java.util.Map<java.lang.String, java.lang.String>);

  public abstract org.apache.pulsar.client.api.ProducerBuilder<T> intercept(org.apache.pulsar.client.api.ProducerInterceptor<T>...);

  public abstract org.apache.pulsar.client.api.ProducerBuilder<T> intercept(org.apache.pulsar.client.api.interceptor.ProducerInterceptor...);

  public abstract org.apache.pulsar.client.api.ProducerBuilder<T> autoUpdatePartitions(boolean);

  public abstract org.apache.pulsar.client.api.ProducerBuilder<T> autoUpdatePartitionsInterval(int, java.util.concurrent.TimeUnit);

  public abstract org.apache.pulsar.client.api.ProducerBuilder<T> enableMultiSchema(boolean);

  public abstract org.apache.pulsar.client.api.ProducerBuilder<T> enableLazyStartPartitionedProducers(boolean);
}
