Compiled from "JavaCrc32.java"
final class com.scurrilous.circe.crc.JavaCrc32 extends com.scurrilous.circe.impl.AbstractStatefulHash implements com.scurrilous.circe.StatefulIntHash {
  private static final java.lang.String ALGORITHM;

  private static final int LENGTH;

  private final java.util.zip.CRC32 impl;

  com.scurrilous.circe.crc.JavaCrc32();
    Code:
       0: aload_0
       1: invokespecial #2                  // Method com/scurrilous/circe/impl/AbstractStatefulHash."<init>":()V
       4: aload_0
       5: new           #3                  // class java/util/zip/CRC32
       8: dup
       9: invokespecial #4                  // Method java/util/zip/CRC32."<init>":()V
      12: putfield      #5                  // Field impl:Ljava/util/zip/CRC32;
      15: return

  public java.lang.String algorithm();
    Code:
       0: getstatic     #1                  // Field ALGORITHM:Ljava/lang/String;
       3: areturn

  public int length();
    Code:
       0: iconst_4
       1: ireturn

  public com.scurrilous.circe.StatefulHash createNew();
    Code:
       0: new           #6                  // class com/scurrilous/circe/crc/JavaCrc32
       3: dup
       4: invokespecial #7                  // Method "<init>":()V
       7: areturn

  public boolean supportsIncremental();
    Code:
       0: iconst_1
       1: ireturn

  public void reset();
    Code:
       0: aload_0
       1: getfield      #5                  // Field impl:Ljava/util/zip/CRC32;
       4: invokevirtual #8                  // Method java/util/zip/CRC32.reset:()V
       7: return

  protected void updateUnchecked(byte[], int, int);
    Code:
       0: aload_0
       1: getfield      #5                  // Field impl:Ljava/util/zip/CRC32;
       4: aload_1
       5: iload_2
       6: iload_3
       7: invokevirtual #9                  // Method java/util/zip/CRC32.update:([BII)V
      10: return

  public int getInt();
    Code:
       0: aload_0
       1: getfield      #5                  // Field impl:Ljava/util/zip/CRC32;
       4: invokevirtual #10                 // Method java/util/zip/CRC32.getValue:()J
       7: l2i
       8: ireturn

  public long getLong();
    Code:
       0: aload_0
       1: getfield      #5                  // Field impl:Ljava/util/zip/CRC32;
       4: invokevirtual #10                 // Method java/util/zip/CRC32.getValue:()J
       7: lreturn

  public com.scurrilous.circe.StatelessIntHash asStateless();
    Code:
       0: new           #11                 // class com/scurrilous/circe/crc/JavaCrc32$1
       3: dup
       4: aload_0
       5: invokespecial #12                 // Method com/scurrilous/circe/crc/JavaCrc32$1."<init>":(Lcom/scurrilous/circe/crc/JavaCrc32;)V
       8: areturn

  static java.lang.String access$000();
    Code:
       0: getstatic     #1                  // Field ALGORITHM:Ljava/lang/String;
       3: areturn

  static {};
    Code:
       0: getstatic     #13                 // Field com/scurrilous/circe/params/CrcParameters.CRC32:Lcom/scurrilous/circe/params/CrcParameters;
       3: invokevirtual #14                 // Method com/scurrilous/circe/params/CrcParameters.algorithm:()Ljava/lang/String;
       6: putstatic     #1                  // Field ALGORITHM:Ljava/lang/String;
       9: return
}
