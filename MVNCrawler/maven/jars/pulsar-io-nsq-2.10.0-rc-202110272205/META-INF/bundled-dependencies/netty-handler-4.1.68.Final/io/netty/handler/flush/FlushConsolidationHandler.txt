Compiled from "FlushConsolidationHandler.java"
public class io.netty.handler.flush.FlushConsolidationHandler extends io.netty.channel.ChannelDuplexHandler {
  private final int explicitFlushAfterFlushes;

  private final boolean consolidateWhenNoReadInProgress;

  private final java.lang.Runnable flushTask;

  private int flushPendingCount;

  private boolean readInProgress;

  private io.netty.channel.ChannelHandlerContext ctx;

  private java.util.concurrent.Future<?> nextScheduledFlush;

  public static final int DEFAULT_EXPLICIT_FLUSH_AFTER_FLUSHES;

  public io.netty.handler.flush.FlushConsolidationHandler();
    Code:
       0: aload_0
       1: sipush        256
       4: iconst_0
       5: invokespecial #6                  // Method "<init>":(IZ)V
       8: return

  public io.netty.handler.flush.FlushConsolidationHandler(int);
    Code:
       0: aload_0
       1: iload_1
       2: iconst_0
       3: invokespecial #6                  // Method "<init>":(IZ)V
       6: return

  public io.netty.handler.flush.FlushConsolidationHandler(int, boolean);
    Code:
       0: aload_0
       1: invokespecial #7                  // Method io/netty/channel/ChannelDuplexHandler."<init>":()V
       4: aload_0
       5: iload_1
       6: ldc           #8                  // String explicitFlushAfterFlushes
       8: invokestatic  #9                  // Method io/netty/util/internal/ObjectUtil.checkPositive:(ILjava/lang/String;)I
      11: putfield      #10                 // Field explicitFlushAfterFlushes:I
      14: aload_0
      15: iload_2
      16: putfield      #11                 // Field consolidateWhenNoReadInProgress:Z
      19: aload_0
      20: iload_2
      21: ifeq          35
      24: new           #12                 // class io/netty/handler/flush/FlushConsolidationHandler$1
      27: dup
      28: aload_0
      29: invokespecial #13                 // Method io/netty/handler/flush/FlushConsolidationHandler$1."<init>":(Lio/netty/handler/flush/FlushConsolidationHandler;)V
      32: goto          36
      35: aconst_null
      36: putfield      #14                 // Field flushTask:Ljava/lang/Runnable;
      39: return

  public void handlerAdded(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field ctx:Lio/netty/channel/ChannelHandlerContext;
       5: return

  public void flush(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #3                  // Field readInProgress:Z
       4: ifeq          33
       7: aload_0
       8: dup
       9: getfield      #4                  // Field flushPendingCount:I
      12: iconst_1
      13: iadd
      14: dup_x1
      15: putfield      #4                  // Field flushPendingCount:I
      18: aload_0
      19: getfield      #10                 // Field explicitFlushAfterFlushes:I
      22: if_icmpne     79
      25: aload_0
      26: aload_1
      27: invokespecial #15                 // Method flushNow:(Lio/netty/channel/ChannelHandlerContext;)V
      30: goto          79
      33: aload_0
      34: getfield      #11                 // Field consolidateWhenNoReadInProgress:Z
      37: ifeq          74
      40: aload_0
      41: dup
      42: getfield      #4                  // Field flushPendingCount:I
      45: iconst_1
      46: iadd
      47: dup_x1
      48: putfield      #4                  // Field flushPendingCount:I
      51: aload_0
      52: getfield      #10                 // Field explicitFlushAfterFlushes:I
      55: if_icmpne     66
      58: aload_0
      59: aload_1
      60: invokespecial #15                 // Method flushNow:(Lio/netty/channel/ChannelHandlerContext;)V
      63: goto          79
      66: aload_0
      67: aload_1
      68: invokespecial #16                 // Method scheduleFlush:(Lio/netty/channel/ChannelHandlerContext;)V
      71: goto          79
      74: aload_0
      75: aload_1
      76: invokespecial #15                 // Method flushNow:(Lio/netty/channel/ChannelHandlerContext;)V
      79: return

  public void channelReadComplete(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #17                 // Method resetReadAndFlushIfNeeded:(Lio/netty/channel/ChannelHandlerContext;)V
       5: aload_1
       6: invokeinterface #18,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.fireChannelReadComplete:()Lio/netty/channel/ChannelHandlerContext;
      11: pop
      12: return

  public void channelRead(io.netty.channel.ChannelHandlerContext, java.lang.Object) throws java.lang.Exception;
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #3                  // Field readInProgress:Z
       5: aload_1
       6: aload_2
       7: invokeinterface #19,  2           // InterfaceMethod io/netty/channel/ChannelHandlerContext.fireChannelRead:(Ljava/lang/Object;)Lio/netty/channel/ChannelHandlerContext;
      12: pop
      13: return

  public void exceptionCaught(io.netty.channel.ChannelHandlerContext, java.lang.Throwable) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #17                 // Method resetReadAndFlushIfNeeded:(Lio/netty/channel/ChannelHandlerContext;)V
       5: aload_1
       6: aload_2
       7: invokeinterface #20,  2           // InterfaceMethod io/netty/channel/ChannelHandlerContext.fireExceptionCaught:(Ljava/lang/Throwable;)Lio/netty/channel/ChannelHandlerContext;
      12: pop
      13: return

  public void disconnect(io.netty.channel.ChannelHandlerContext, io.netty.channel.ChannelPromise) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #17                 // Method resetReadAndFlushIfNeeded:(Lio/netty/channel/ChannelHandlerContext;)V
       5: aload_1
       6: aload_2
       7: invokeinterface #21,  2           // InterfaceMethod io/netty/channel/ChannelHandlerContext.disconnect:(Lio/netty/channel/ChannelPromise;)Lio/netty/channel/ChannelFuture;
      12: pop
      13: return

  public void close(io.netty.channel.ChannelHandlerContext, io.netty.channel.ChannelPromise) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #17                 // Method resetReadAndFlushIfNeeded:(Lio/netty/channel/ChannelHandlerContext;)V
       5: aload_1
       6: aload_2
       7: invokeinterface #22,  2           // InterfaceMethod io/netty/channel/ChannelHandlerContext.close:(Lio/netty/channel/ChannelPromise;)Lio/netty/channel/ChannelFuture;
      12: pop
      13: return

  public void channelWritabilityChanged(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception;
    Code:
       0: aload_1
       1: invokeinterface #23,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.channel:()Lio/netty/channel/Channel;
       6: invokeinterface #24,  1           // InterfaceMethod io/netty/channel/Channel.isWritable:()Z
      11: ifne          19
      14: aload_0
      15: aload_1
      16: invokespecial #25                 // Method flushIfNeeded:(Lio/netty/channel/ChannelHandlerContext;)V
      19: aload_1
      20: invokeinterface #26,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.fireChannelWritabilityChanged:()Lio/netty/channel/ChannelHandlerContext;
      25: pop
      26: return

  public void handlerRemoved(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #25                 // Method flushIfNeeded:(Lio/netty/channel/ChannelHandlerContext;)V
       5: return

  private void resetReadAndFlushIfNeeded(io.netty.channel.ChannelHandlerContext);
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #3                  // Field readInProgress:Z
       5: aload_0
       6: aload_1
       7: invokespecial #25                 // Method flushIfNeeded:(Lio/netty/channel/ChannelHandlerContext;)V
      10: return

  private void flushIfNeeded(io.netty.channel.ChannelHandlerContext);
    Code:
       0: aload_0
       1: getfield      #4                  // Field flushPendingCount:I
       4: ifle          12
       7: aload_0
       8: aload_1
       9: invokespecial #15                 // Method flushNow:(Lio/netty/channel/ChannelHandlerContext;)V
      12: return

  private void flushNow(io.netty.channel.ChannelHandlerContext);
    Code:
       0: aload_0
       1: invokespecial #27                 // Method cancelScheduledFlush:()V
       4: aload_0
       5: iconst_0
       6: putfield      #4                  // Field flushPendingCount:I
       9: aload_1
      10: invokeinterface #28,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.flush:()Lio/netty/channel/ChannelHandlerContext;
      15: pop
      16: return

  private void scheduleFlush(io.netty.channel.ChannelHandlerContext);
    Code:
       0: aload_0
       1: getfield      #2                  // Field nextScheduledFlush:Ljava/util/concurrent/Future;
       4: ifnonnull     31
       7: aload_0
       8: aload_1
       9: invokeinterface #23,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.channel:()Lio/netty/channel/Channel;
      14: invokeinterface #29,  1           // InterfaceMethod io/netty/channel/Channel.eventLoop:()Lio/netty/channel/EventLoop;
      19: aload_0
      20: getfield      #14                 // Field flushTask:Ljava/lang/Runnable;
      23: invokeinterface #30,  2           // InterfaceMethod io/netty/channel/EventLoop.submit:(Ljava/lang/Runnable;)Lio/netty/util/concurrent/Future;
      28: putfield      #2                  // Field nextScheduledFlush:Ljava/util/concurrent/Future;
      31: return

  private void cancelScheduledFlush();
    Code:
       0: aload_0
       1: getfield      #2                  // Field nextScheduledFlush:Ljava/util/concurrent/Future;
       4: ifnull        23
       7: aload_0
       8: getfield      #2                  // Field nextScheduledFlush:Ljava/util/concurrent/Future;
      11: iconst_0
      12: invokeinterface #31,  2           // InterfaceMethod java/util/concurrent/Future.cancel:(Z)Z
      17: pop
      18: aload_0
      19: aconst_null
      20: putfield      #2                  // Field nextScheduledFlush:Ljava/util/concurrent/Future;
      23: return

  static int access$000(io.netty.handler.flush.FlushConsolidationHandler);
    Code:
       0: aload_0
       1: getfield      #4                  // Field flushPendingCount:I
       4: ireturn

  static boolean access$100(io.netty.handler.flush.FlushConsolidationHandler);
    Code:
       0: aload_0
       1: getfield      #3                  // Field readInProgress:Z
       4: ireturn

  static int access$002(io.netty.handler.flush.FlushConsolidationHandler, int);
    Code:
       0: aload_0
       1: iload_1
       2: dup_x1
       3: putfield      #4                  // Field flushPendingCount:I
       6: ireturn

  static java.util.concurrent.Future access$202(io.netty.handler.flush.FlushConsolidationHandler, java.util.concurrent.Future);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #2                  // Field nextScheduledFlush:Ljava/util/concurrent/Future;
       6: areturn

  static io.netty.channel.ChannelHandlerContext access$300(io.netty.handler.flush.FlushConsolidationHandler);
    Code:
       0: aload_0
       1: getfield      #1                  // Field ctx:Lio/netty/channel/ChannelHandlerContext;
       4: areturn
}
