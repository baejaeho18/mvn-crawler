Compiled from "OptionalSslHandler.java"
public class io.netty.handler.ssl.OptionalSslHandler extends io.netty.handler.codec.ByteToMessageDecoder {
  private final io.netty.handler.ssl.SslContext sslContext;

  public io.netty.handler.ssl.OptionalSslHandler(io.netty.handler.ssl.SslContext);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method io/netty/handler/codec/ByteToMessageDecoder."<init>":()V
       4: aload_0
       5: aload_1
       6: ldc           #2                  // String sslContext
       8: invokestatic  #3                  // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      11: checkcast     #4                  // class io/netty/handler/ssl/SslContext
      14: putfield      #5                  // Field sslContext:Lio/netty/handler/ssl/SslContext;
      17: return

  protected void decode(io.netty.channel.ChannelHandlerContext, io.netty.buffer.ByteBuf, java.util.List<java.lang.Object>) throws java.lang.Exception;
    Code:
       0: aload_2
       1: invokevirtual #6                  // Method io/netty/buffer/ByteBuf.readableBytes:()I
       4: iconst_5
       5: if_icmpge     9
       8: return
       9: aload_2
      10: invokestatic  #8                  // Method io/netty/handler/ssl/SslHandler.isEncrypted:(Lio/netty/buffer/ByteBuf;)Z
      13: ifeq          24
      16: aload_0
      17: aload_1
      18: invokespecial #9                  // Method handleSsl:(Lio/netty/channel/ChannelHandlerContext;)V
      21: goto          29
      24: aload_0
      25: aload_1
      26: invokespecial #10                 // Method handleNonSsl:(Lio/netty/channel/ChannelHandlerContext;)V
      29: return

  private void handleSsl(io.netty.channel.ChannelHandlerContext);
    Code:
       0: aconst_null
       1: astore_2
       2: aload_0
       3: aload_1
       4: aload_0
       5: getfield      #5                  // Field sslContext:Lio/netty/handler/ssl/SslContext;
       8: invokevirtual #11                 // Method newSslHandler:(Lio/netty/channel/ChannelHandlerContext;Lio/netty/handler/ssl/SslContext;)Lio/netty/handler/ssl/SslHandler;
      11: astore_2
      12: aload_1
      13: invokeinterface #12,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.pipeline:()Lio/netty/channel/ChannelPipeline;
      18: aload_0
      19: aload_0
      20: invokevirtual #13                 // Method newSslHandlerName:()Ljava/lang/String;
      23: aload_2
      24: invokeinterface #14,  4           // InterfaceMethod io/netty/channel/ChannelPipeline.replace:(Lio/netty/channel/ChannelHandler;Ljava/lang/String;Lio/netty/channel/ChannelHandler;)Lio/netty/channel/ChannelPipeline;
      29: pop
      30: aconst_null
      31: astore_2
      32: aload_2
      33: ifnull        60
      36: aload_2
      37: invokevirtual #15                 // Method io/netty/handler/ssl/SslHandler.engine:()Ljavax/net/ssl/SSLEngine;
      40: invokestatic  #16                 // Method io/netty/util/ReferenceCountUtil.safeRelease:(Ljava/lang/Object;)V
      43: goto          60
      46: astore_3
      47: aload_2
      48: ifnull        58
      51: aload_2
      52: invokevirtual #15                 // Method io/netty/handler/ssl/SslHandler.engine:()Ljavax/net/ssl/SSLEngine;
      55: invokestatic  #16                 // Method io/netty/util/ReferenceCountUtil.safeRelease:(Ljava/lang/Object;)V
      58: aload_3
      59: athrow
      60: return
    Exception table:
       from    to  target type
           2    32    46   any

  private void handleNonSsl(io.netty.channel.ChannelHandlerContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #17                 // Method newNonSslHandler:(Lio/netty/channel/ChannelHandlerContext;)Lio/netty/channel/ChannelHandler;
       5: astore_2
       6: aload_2
       7: ifnull        31
      10: aload_1
      11: invokeinterface #12,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.pipeline:()Lio/netty/channel/ChannelPipeline;
      16: aload_0
      17: aload_0
      18: invokevirtual #18                 // Method newNonSslHandlerName:()Ljava/lang/String;
      21: aload_2
      22: invokeinterface #14,  4           // InterfaceMethod io/netty/channel/ChannelPipeline.replace:(Lio/netty/channel/ChannelHandler;Ljava/lang/String;Lio/netty/channel/ChannelHandler;)Lio/netty/channel/ChannelPipeline;
      27: pop
      28: goto          44
      31: aload_1
      32: invokeinterface #12,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.pipeline:()Lio/netty/channel/ChannelPipeline;
      37: aload_0
      38: invokeinterface #19,  2           // InterfaceMethod io/netty/channel/ChannelPipeline.remove:(Lio/netty/channel/ChannelHandler;)Lio/netty/channel/ChannelPipeline;
      43: pop
      44: return

  protected java.lang.String newSslHandlerName();
    Code:
       0: aconst_null
       1: areturn

  protected io.netty.handler.ssl.SslHandler newSslHandler(io.netty.channel.ChannelHandlerContext, io.netty.handler.ssl.SslContext);
    Code:
       0: aload_2
       1: aload_1
       2: invokeinterface #20,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.alloc:()Lio/netty/buffer/ByteBufAllocator;
       7: invokevirtual #21                 // Method io/netty/handler/ssl/SslContext.newHandler:(Lio/netty/buffer/ByteBufAllocator;)Lio/netty/handler/ssl/SslHandler;
      10: areturn

  protected java.lang.String newNonSslHandlerName();
    Code:
       0: aconst_null
       1: areturn

  protected io.netty.channel.ChannelHandler newNonSslHandler(io.netty.channel.ChannelHandlerContext);
    Code:
       0: aconst_null
       1: areturn
}
