Compiled from "Recycler.java"
final class io.netty.util.Recycler$WeakOrderQueue$Head {
  private final java.util.concurrent.atomic.AtomicInteger availableSharedCapacity;

  io.netty.util.Recycler$WeakOrderQueue$Link link;

  io.netty.util.Recycler$WeakOrderQueue$Head(java.util.concurrent.atomic.AtomicInteger);
    Code:
       0: aload_0
       1: invokespecial #23                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #25                 // Field availableSharedCapacity:Ljava/util/concurrent/atomic/AtomicInteger;
       9: return

  void reclaimAllSpaceAndUnlink();
    Code:
       0: aload_0
       1: getfield      #30                 // Field link:Lio/netty/util/Recycler$WeakOrderQueue$Link;
       4: astore_1
       5: aload_0
       6: aconst_null
       7: putfield      #30                 // Field link:Lio/netty/util/Recycler$WeakOrderQueue$Link;
      10: iconst_0
      11: istore_2
      12: aload_1
      13: ifnull        37
      16: iload_2
      17: invokestatic  #34                 // Method io/netty/util/Recycler.access$600:()I
      20: iadd
      21: istore_2
      22: aload_1
      23: getfield      #37                 // Field io/netty/util/Recycler$WeakOrderQueue$Link.next:Lio/netty/util/Recycler$WeakOrderQueue$Link;
      26: astore_3
      27: aload_1
      28: aconst_null
      29: putfield      #37                 // Field io/netty/util/Recycler$WeakOrderQueue$Link.next:Lio/netty/util/Recycler$WeakOrderQueue$Link;
      32: aload_3
      33: astore_1
      34: goto          12
      37: iload_2
      38: ifle          46
      41: aload_0
      42: iload_2
      43: invokespecial #41                 // Method reclaimSpace:(I)V
      46: return

  private void reclaimSpace(int);
    Code:
       0: aload_0
       1: getfield      #25                 // Field availableSharedCapacity:Ljava/util/concurrent/atomic/AtomicInteger;
       4: iload_1
       5: invokevirtual #49                 // Method java/util/concurrent/atomic/AtomicInteger.addAndGet:(I)I
       8: pop
       9: return

  void relink(io.netty.util.Recycler$WeakOrderQueue$Link);
    Code:
       0: aload_0
       1: invokestatic  #34                 // Method io/netty/util/Recycler.access$600:()I
       4: invokespecial #41                 // Method reclaimSpace:(I)V
       7: aload_0
       8: aload_1
       9: putfield      #30                 // Field link:Lio/netty/util/Recycler$WeakOrderQueue$Link;
      12: return

  io.netty.util.Recycler$WeakOrderQueue$Link newLink();
    Code:
       0: aload_0
       1: getfield      #25                 // Field availableSharedCapacity:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokestatic  #58                 // Method reserveSpaceForLink:(Ljava/util/concurrent/atomic/AtomicInteger;)Z
       7: ifeq          20
      10: new           #12                 // class io/netty/util/Recycler$WeakOrderQueue$Link
      13: dup
      14: invokespecial #59                 // Method io/netty/util/Recycler$WeakOrderQueue$Link."<init>":()V
      17: goto          21
      20: aconst_null
      21: areturn

  static boolean reserveSpaceForLink(java.util.concurrent.atomic.AtomicInteger);
    Code:
       0: aload_0
       1: invokevirtual #62                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       4: istore_1
       5: iload_1
       6: invokestatic  #34                 // Method io/netty/util/Recycler.access$600:()I
       9: if_icmpge     14
      12: iconst_0
      13: ireturn
      14: aload_0
      15: iload_1
      16: iload_1
      17: invokestatic  #34                 // Method io/netty/util/Recycler.access$600:()I
      20: isub
      21: invokevirtual #66                 // Method java/util/concurrent/atomic/AtomicInteger.compareAndSet:(II)Z
      24: ifeq          29
      27: iconst_1
      28: ireturn
      29: goto          0
}
