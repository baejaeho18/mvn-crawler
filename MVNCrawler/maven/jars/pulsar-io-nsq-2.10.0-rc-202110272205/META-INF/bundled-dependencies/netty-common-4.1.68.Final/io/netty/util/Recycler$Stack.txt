Compiled from "Recycler.java"
final class io.netty.util.Recycler$Stack<T> {
  final io.netty.util.Recycler<T> parent;

  final java.lang.ref.WeakReference<java.lang.Thread> threadRef;

  final java.util.concurrent.atomic.AtomicInteger availableSharedCapacity;

  private final int maxDelayedQueues;

  private final int maxCapacity;

  private final int interval;

  private final int delayedQueueInterval;

  io.netty.util.Recycler$DefaultHandle<?>[] elements;

  int size;

  private int handleRecycleCount;

  private io.netty.util.Recycler$WeakOrderQueue cursor;

  private io.netty.util.Recycler$WeakOrderQueue prev;

  private volatile io.netty.util.Recycler$WeakOrderQueue head;

  io.netty.util.Recycler$Stack(io.netty.util.Recycler<T>, java.lang.Thread, int, int, int, int, int);
    Code:
       0: aload_0
       1: invokespecial #43                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #45                 // Field parent:Lio/netty/util/Recycler;
       9: aload_0
      10: new           #47                 // class java/lang/ref/WeakReference
      13: dup
      14: aload_2
      15: invokespecial #50                 // Method java/lang/ref/WeakReference."<init>":(Ljava/lang/Object;)V
      18: putfield      #52                 // Field threadRef:Ljava/lang/ref/WeakReference;
      21: aload_0
      22: iload_3
      23: putfield      #54                 // Field maxCapacity:I
      26: aload_0
      27: new           #56                 // class java/util/concurrent/atomic/AtomicInteger
      30: dup
      31: iload_3
      32: iload         4
      34: idiv
      35: invokestatic  #60                 // Method io/netty/util/Recycler.access$600:()I
      38: invokestatic  #66                 // Method java/lang/Math.max:(II)I
      41: invokespecial #69                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      44: putfield      #71                 // Field availableSharedCapacity:Ljava/util/concurrent/atomic/AtomicInteger;
      47: aload_0
      48: invokestatic  #74                 // Method io/netty/util/Recycler.access$900:()I
      51: iload_3
      52: invokestatic  #77                 // Method java/lang/Math.min:(II)I
      55: anewarray     #8                  // class io/netty/util/Recycler$DefaultHandle
      58: putfield      #79                 // Field elements:[Lio/netty/util/Recycler$DefaultHandle;
      61: aload_0
      62: iload         5
      64: putfield      #81                 // Field interval:I
      67: aload_0
      68: iload         7
      70: putfield      #83                 // Field delayedQueueInterval:I
      73: aload_0
      74: iload         5
      76: putfield      #85                 // Field handleRecycleCount:I
      79: aload_0
      80: iload         6
      82: putfield      #87                 // Field maxDelayedQueues:I
      85: return

  synchronized void setHead(io.netty.util.Recycler$WeakOrderQueue);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #97                 // Field head:Lio/netty/util/Recycler$WeakOrderQueue;
       5: invokevirtual #100                // Method io/netty/util/Recycler$WeakOrderQueue.setNext:(Lio/netty/util/Recycler$WeakOrderQueue;)V
       8: aload_0
       9: aload_1
      10: putfield      #97                 // Field head:Lio/netty/util/Recycler$WeakOrderQueue;
      13: return

  int increaseCapacity(int);
    Code:
       0: aload_0
       1: getfield      #79                 // Field elements:[Lio/netty/util/Recycler$DefaultHandle;
       4: arraylength
       5: istore_2
       6: aload_0
       7: getfield      #54                 // Field maxCapacity:I
      10: istore_3
      11: iload_2
      12: iconst_1
      13: ishl
      14: istore_2
      15: iload_2
      16: iload_1
      17: if_icmpge     25
      20: iload_2
      21: iload_3
      22: if_icmplt     11
      25: iload_2
      26: iload_3
      27: invokestatic  #77                 // Method java/lang/Math.min:(II)I
      30: istore_2
      31: iload_2
      32: aload_0
      33: getfield      #79                 // Field elements:[Lio/netty/util/Recycler$DefaultHandle;
      36: arraylength
      37: if_icmpeq     55
      40: aload_0
      41: aload_0
      42: getfield      #79                 // Field elements:[Lio/netty/util/Recycler$DefaultHandle;
      45: iload_2
      46: invokestatic  #109                // Method java/util/Arrays.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;
      49: checkcast     #110                // class "[Lio/netty/util/Recycler$DefaultHandle;"
      52: putfield      #79                 // Field elements:[Lio/netty/util/Recycler$DefaultHandle;
      55: iload_2
      56: ireturn

  io.netty.util.Recycler$DefaultHandle<T> pop();
    Code:
       0: aload_0
       1: getfield      #117                // Field size:I
       4: istore_1
       5: iload_1
       6: ifne          29
       9: aload_0
      10: invokespecial #121                // Method scavenge:()Z
      13: ifne          18
      16: aconst_null
      17: areturn
      18: aload_0
      19: getfield      #117                // Field size:I
      22: istore_1
      23: iload_1
      24: ifgt          29
      27: aconst_null
      28: areturn
      29: iinc          1, -1
      32: aload_0
      33: getfield      #79                 // Field elements:[Lio/netty/util/Recycler$DefaultHandle;
      36: iload_1
      37: aaload
      38: astore_2
      39: aload_0
      40: getfield      #79                 // Field elements:[Lio/netty/util/Recycler$DefaultHandle;
      43: iload_1
      44: aconst_null
      45: aastore
      46: aload_0
      47: iload_1
      48: putfield      #117                // Field size:I
      51: aload_2
      52: getfield      #124                // Field io/netty/util/Recycler$DefaultHandle.lastRecycledId:I
      55: aload_2
      56: getfield      #127                // Field io/netty/util/Recycler$DefaultHandle.recycleId:I
      59: if_icmpeq     72
      62: new           #129                // class java/lang/IllegalStateException
      65: dup
      66: ldc           #131                // String recycled multiple times
      68: invokespecial #134                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      71: athrow
      72: aload_2
      73: iconst_0
      74: putfield      #127                // Field io/netty/util/Recycler$DefaultHandle.recycleId:I
      77: aload_2
      78: iconst_0
      79: putfield      #124                // Field io/netty/util/Recycler$DefaultHandle.lastRecycledId:I
      82: aload_2
      83: areturn

  private boolean scavenge();
    Code:
       0: aload_0
       1: invokespecial #139                // Method scavengeSome:()Z
       4: ifeq          9
       7: iconst_1
       8: ireturn
       9: aload_0
      10: aconst_null
      11: putfield      #141                // Field prev:Lio/netty/util/Recycler$WeakOrderQueue;
      14: aload_0
      15: aload_0
      16: getfield      #97                 // Field head:Lio/netty/util/Recycler$WeakOrderQueue;
      19: putfield      #143                // Field cursor:Lio/netty/util/Recycler$WeakOrderQueue;
      22: iconst_0
      23: ireturn

  private boolean scavengeSome();
    Code:
       0: aload_0
       1: getfield      #143                // Field cursor:Lio/netty/util/Recycler$WeakOrderQueue;
       4: astore_2
       5: aload_2
       6: ifnonnull     22
       9: aconst_null
      10: astore_1
      11: aload_0
      12: getfield      #97                 // Field head:Lio/netty/util/Recycler$WeakOrderQueue;
      15: astore_2
      16: aload_2
      17: ifnonnull     27
      20: iconst_0
      21: ireturn
      22: aload_0
      23: getfield      #141                // Field prev:Lio/netty/util/Recycler$WeakOrderQueue;
      26: astore_1
      27: iconst_0
      28: istore_3
      29: aload_2
      30: aload_0
      31: invokevirtual #147                // Method io/netty/util/Recycler$WeakOrderQueue.transfer:(Lio/netty/util/Recycler$Stack;)Z
      34: ifeq          42
      37: iconst_1
      38: istore_3
      39: goto          105
      42: aload_2
      43: invokevirtual #151                // Method io/netty/util/Recycler$WeakOrderQueue.getNext:()Lio/netty/util/Recycler$WeakOrderQueue;
      46: astore        4
      48: aload_2
      49: invokevirtual #155                // Method io/netty/util/Recycler$WeakOrderQueue.get:()Ljava/lang/Object;
      52: ifnonnull     92
      55: aload_2
      56: invokevirtual #158                // Method io/netty/util/Recycler$WeakOrderQueue.hasFinalData:()Z
      59: ifeq          75
      62: aload_2
      63: aload_0
      64: invokevirtual #147                // Method io/netty/util/Recycler$WeakOrderQueue.transfer:(Lio/netty/util/Recycler$Stack;)Z
      67: ifeq          75
      70: iconst_1
      71: istore_3
      72: goto          62
      75: aload_1
      76: ifnull        94
      79: aload_2
      80: invokevirtual #161                // Method io/netty/util/Recycler$WeakOrderQueue.reclaimAllSpaceAndUnlink:()V
      83: aload_1
      84: aload         4
      86: invokevirtual #100                // Method io/netty/util/Recycler$WeakOrderQueue.setNext:(Lio/netty/util/Recycler$WeakOrderQueue;)V
      89: goto          94
      92: aload_2
      93: astore_1
      94: aload         4
      96: astore_2
      97: aload_2
      98: ifnull        105
     101: iload_3
     102: ifeq          29
     105: aload_0
     106: aload_1
     107: putfield      #141                // Field prev:Lio/netty/util/Recycler$WeakOrderQueue;
     110: aload_0
     111: aload_2
     112: putfield      #143                // Field cursor:Lio/netty/util/Recycler$WeakOrderQueue;
     115: iload_3
     116: ireturn

  void push(io.netty.util.Recycler$DefaultHandle<?>);
    Code:
       0: invokestatic  #173                // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       3: astore_2
       4: aload_0
       5: getfield      #52                 // Field threadRef:Ljava/lang/ref/WeakReference;
       8: invokevirtual #174                // Method java/lang/ref/WeakReference.get:()Ljava/lang/Object;
      11: aload_2
      12: if_acmpne     23
      15: aload_0
      16: aload_1
      17: invokespecial #177                // Method pushNow:(Lio/netty/util/Recycler$DefaultHandle;)V
      20: goto          29
      23: aload_0
      24: aload_1
      25: aload_2
      26: invokespecial #181                // Method pushLater:(Lio/netty/util/Recycler$DefaultHandle;Ljava/lang/Thread;)V
      29: return

  private void pushNow(io.netty.util.Recycler$DefaultHandle<?>);
    Code:
       0: aload_1
       1: getfield      #127                // Field io/netty/util/Recycler$DefaultHandle.recycleId:I
       4: ifne          18
       7: aload_1
       8: iconst_0
       9: invokestatic  #186                // Method io/netty/util/Recycler.access$1000:()I
      12: invokevirtual #190                // Method io/netty/util/Recycler$DefaultHandle.compareAndSetLastRecycledId:(II)Z
      15: ifne          28
      18: new           #129                // class java/lang/IllegalStateException
      21: dup
      22: ldc           #192                // String recycled already
      24: invokespecial #134                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      27: athrow
      28: aload_1
      29: invokestatic  #186                // Method io/netty/util/Recycler.access$1000:()I
      32: putfield      #127                // Field io/netty/util/Recycler$DefaultHandle.recycleId:I
      35: aload_0
      36: getfield      #117                // Field size:I
      39: istore_2
      40: iload_2
      41: aload_0
      42: getfield      #54                 // Field maxCapacity:I
      45: if_icmpge     56
      48: aload_0
      49: aload_1
      50: invokevirtual #196                // Method dropHandle:(Lio/netty/util/Recycler$DefaultHandle;)Z
      53: ifeq          57
      56: return
      57: iload_2
      58: aload_0
      59: getfield      #79                 // Field elements:[Lio/netty/util/Recycler$DefaultHandle;
      62: arraylength
      63: if_icmpne     90
      66: aload_0
      67: aload_0
      68: getfield      #79                 // Field elements:[Lio/netty/util/Recycler$DefaultHandle;
      71: iload_2
      72: iconst_1
      73: ishl
      74: aload_0
      75: getfield      #54                 // Field maxCapacity:I
      78: invokestatic  #77                 // Method java/lang/Math.min:(II)I
      81: invokestatic  #109                // Method java/util/Arrays.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;
      84: checkcast     #110                // class "[Lio/netty/util/Recycler$DefaultHandle;"
      87: putfield      #79                 // Field elements:[Lio/netty/util/Recycler$DefaultHandle;
      90: aload_0
      91: getfield      #79                 // Field elements:[Lio/netty/util/Recycler$DefaultHandle;
      94: iload_2
      95: aload_1
      96: aastore
      97: aload_0
      98: iload_2
      99: iconst_1
     100: iadd
     101: putfield      #117                // Field size:I
     104: return

  private void pushLater(io.netty.util.Recycler$DefaultHandle<?>, java.lang.Thread);
    Code:
       0: aload_0
       1: getfield      #87                 // Field maxDelayedQueues:I
       4: ifne          8
       7: return
       8: invokestatic  #201                // Method io/netty/util/Recycler.access$500:()Lio/netty/util/concurrent/FastThreadLocal;
      11: invokevirtual #204                // Method io/netty/util/concurrent/FastThreadLocal.get:()Ljava/lang/Object;
      14: checkcast     #206                // class java/util/Map
      17: astore_3
      18: aload_3
      19: aload_0
      20: invokeinterface #209,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      25: checkcast     #13                 // class io/netty/util/Recycler$WeakOrderQueue
      28: astore        4
      30: aload         4
      32: ifnonnull     85
      35: aload_3
      36: invokeinterface #211,  1          // InterfaceMethod java/util/Map.size:()I
      41: aload_0
      42: getfield      #87                 // Field maxDelayedQueues:I
      45: if_icmplt     60
      48: aload_3
      49: aload_0
      50: getstatic     #214                // Field io/netty/util/Recycler$WeakOrderQueue.DUMMY:Lio/netty/util/Recycler$WeakOrderQueue;
      53: invokeinterface #218,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      58: pop
      59: return
      60: aload_0
      61: aload_2
      62: invokespecial #222                // Method newWeakOrderQueue:(Ljava/lang/Thread;)Lio/netty/util/Recycler$WeakOrderQueue;
      65: dup
      66: astore        4
      68: ifnonnull     72
      71: return
      72: aload_3
      73: aload_0
      74: aload         4
      76: invokeinterface #218,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      81: pop
      82: goto          94
      85: aload         4
      87: getstatic     #214                // Field io/netty/util/Recycler$WeakOrderQueue.DUMMY:Lio/netty/util/Recycler$WeakOrderQueue;
      90: if_acmpne     94
      93: return
      94: aload         4
      96: aload_1
      97: invokevirtual #225                // Method io/netty/util/Recycler$WeakOrderQueue.add:(Lio/netty/util/Recycler$DefaultHandle;)V
     100: return

  private io.netty.util.Recycler$WeakOrderQueue newWeakOrderQueue(java.lang.Thread);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #232                // Method io/netty/util/Recycler$WeakOrderQueue.newQueue:(Lio/netty/util/Recycler$Stack;Ljava/lang/Thread;)Lio/netty/util/Recycler$WeakOrderQueue;
       5: areturn

  boolean dropHandle(io.netty.util.Recycler$DefaultHandle<?>);
    Code:
       0: aload_1
       1: getfield      #236                // Field io/netty/util/Recycler$DefaultHandle.hasBeenRecycled:Z
       4: ifne          40
       7: aload_0
       8: getfield      #85                 // Field handleRecycleCount:I
      11: aload_0
      12: getfield      #81                 // Field interval:I
      15: if_icmpge     30
      18: aload_0
      19: dup
      20: getfield      #85                 // Field handleRecycleCount:I
      23: iconst_1
      24: iadd
      25: putfield      #85                 // Field handleRecycleCount:I
      28: iconst_1
      29: ireturn
      30: aload_0
      31: iconst_0
      32: putfield      #85                 // Field handleRecycleCount:I
      35: aload_1
      36: iconst_1
      37: putfield      #236                // Field io/netty/util/Recycler$DefaultHandle.hasBeenRecycled:Z
      40: iconst_0
      41: ireturn

  io.netty.util.Recycler$DefaultHandle<T> newHandle();
    Code:
       0: new           #8                  // class io/netty/util/Recycler$DefaultHandle
       3: dup
       4: aload_0
       5: invokespecial #241                // Method io/netty/util/Recycler$DefaultHandle."<init>":(Lio/netty/util/Recycler$Stack;)V
       8: areturn

  static int access$800(io.netty.util.Recycler$Stack);
    Code:
       0: aload_0
       1: getfield      #83                 // Field delayedQueueInterval:I
       4: ireturn
}
