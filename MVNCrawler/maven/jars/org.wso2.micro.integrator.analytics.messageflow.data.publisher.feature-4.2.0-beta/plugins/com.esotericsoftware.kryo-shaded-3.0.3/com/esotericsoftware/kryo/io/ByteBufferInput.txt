Compiled from "ByteBufferInput.java"
public class com.esotericsoftware.kryo.io.ByteBufferInput extends com.esotericsoftware.kryo.io.Input {
  protected java.nio.ByteBuffer niobuffer;

  protected boolean varIntsEnabled;

  java.nio.ByteOrder byteOrder;

  protected static final java.nio.ByteOrder nativeOrder;

  public com.esotericsoftware.kryo.io.ByteBufferInput();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/esotericsoftware/kryo/io/Input."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #2                  // Field varIntsEnabled:Z
       9: aload_0
      10: getstatic     #3                  // Field java/nio/ByteOrder.BIG_ENDIAN:Ljava/nio/ByteOrder;
      13: putfield      #4                  // Field byteOrder:Ljava/nio/ByteOrder;
      16: return

  public com.esotericsoftware.kryo.io.ByteBufferInput(int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/esotericsoftware/kryo/io/Input."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #2                  // Field varIntsEnabled:Z
       9: aload_0
      10: getstatic     #3                  // Field java/nio/ByteOrder.BIG_ENDIAN:Ljava/nio/ByteOrder;
      13: putfield      #4                  // Field byteOrder:Ljava/nio/ByteOrder;
      16: aload_0
      17: iload_1
      18: putfield      #5                  // Field capacity:I
      21: aload_0
      22: iload_1
      23: invokestatic  #6                  // Method java/nio/ByteBuffer.allocateDirect:(I)Ljava/nio/ByteBuffer;
      26: putfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      29: aload_0
      30: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      33: aload_0
      34: getfield      #4                  // Field byteOrder:Ljava/nio/ByteOrder;
      37: invokevirtual #8                  // Method java/nio/ByteBuffer.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;
      40: pop
      41: return

  public com.esotericsoftware.kryo.io.ByteBufferInput(byte[]);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/esotericsoftware/kryo/io/Input."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #2                  // Field varIntsEnabled:Z
       9: aload_0
      10: getstatic     #3                  // Field java/nio/ByteOrder.BIG_ENDIAN:Ljava/nio/ByteOrder;
      13: putfield      #4                  // Field byteOrder:Ljava/nio/ByteOrder;
      16: aload_0
      17: aload_1
      18: invokevirtual #9                  // Method setBuffer:([B)V
      21: return

  public com.esotericsoftware.kryo.io.ByteBufferInput(java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/esotericsoftware/kryo/io/Input."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #2                  // Field varIntsEnabled:Z
       9: aload_0
      10: getstatic     #3                  // Field java/nio/ByteOrder.BIG_ENDIAN:Ljava/nio/ByteOrder;
      13: putfield      #4                  // Field byteOrder:Ljava/nio/ByteOrder;
      16: aload_0
      17: aload_1
      18: invokevirtual #10                 // Method setBuffer:(Ljava/nio/ByteBuffer;)V
      21: return

  public com.esotericsoftware.kryo.io.ByteBufferInput(java.io.InputStream);
    Code:
       0: aload_0
       1: sipush        4096
       4: invokespecial #11                 // Method "<init>":(I)V
       7: aload_1
       8: ifnonnull     21
      11: new           #12                 // class java/lang/IllegalArgumentException
      14: dup
      15: ldc           #13                 // String inputStream cannot be null.
      17: invokespecial #14                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      20: athrow
      21: aload_0
      22: aload_1
      23: putfield      #15                 // Field inputStream:Ljava/io/InputStream;
      26: return

  public com.esotericsoftware.kryo.io.ByteBufferInput(java.io.InputStream, int);
    Code:
       0: aload_0
       1: iload_2
       2: invokespecial #11                 // Method "<init>":(I)V
       5: aload_1
       6: ifnonnull     19
       9: new           #12                 // class java/lang/IllegalArgumentException
      12: dup
      13: ldc           #13                 // String inputStream cannot be null.
      15: invokespecial #14                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      18: athrow
      19: aload_0
      20: aload_1
      21: putfield      #15                 // Field inputStream:Ljava/io/InputStream;
      24: return

  public java.nio.ByteOrder order();
    Code:
       0: aload_0
       1: getfield      #4                  // Field byteOrder:Ljava/nio/ByteOrder;
       4: areturn

  public void order(java.nio.ByteOrder);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field byteOrder:Ljava/nio/ByteOrder;
       5: return

  public void setBuffer(byte[]);
    Code:
       0: aload_1
       1: arraylength
       2: invokestatic  #6                  // Method java/nio/ByteBuffer.allocateDirect:(I)Ljava/nio/ByteBuffer;
       5: astore_2
       6: aload_2
       7: aload_1
       8: invokevirtual #16                 // Method java/nio/ByteBuffer.put:([B)Ljava/nio/ByteBuffer;
      11: pop
      12: aload_2
      13: iconst_0
      14: invokevirtual #17                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      17: pop
      18: aload_2
      19: aload_1
      20: arraylength
      21: invokevirtual #18                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
      24: pop
      25: aload_2
      26: aload_0
      27: getfield      #4                  // Field byteOrder:Ljava/nio/ByteOrder;
      30: invokevirtual #8                  // Method java/nio/ByteBuffer.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;
      33: pop
      34: aload_0
      35: aload_2
      36: invokevirtual #10                 // Method setBuffer:(Ljava/nio/ByteBuffer;)V
      39: return

  public void setBuffer(java.nio.ByteBuffer);
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #12                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #19                 // String buffer cannot be null.
      10: invokespecial #14                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_0
      15: aload_1
      16: putfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      19: aload_0
      20: aload_1
      21: invokevirtual #20                 // Method java/nio/ByteBuffer.position:()I
      24: putfield      #21                 // Field position:I
      27: aload_0
      28: aload_1
      29: invokevirtual #22                 // Method java/nio/ByteBuffer.limit:()I
      32: putfield      #23                 // Field limit:I
      35: aload_0
      36: aload_1
      37: invokevirtual #24                 // Method java/nio/ByteBuffer.capacity:()I
      40: putfield      #5                  // Field capacity:I
      43: aload_0
      44: lconst_0
      45: putfield      #25                 // Field total:J
      48: aload_0
      49: aconst_null
      50: putfield      #15                 // Field inputStream:Ljava/io/InputStream;
      53: return

  public void release();
    Code:
       0: aload_0
       1: invokevirtual #26                 // Method close:()V
       4: aload_0
       5: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
       8: invokestatic  #27                 // Method com/esotericsoftware/kryo/util/UnsafeUtil.releaseBuffer:(Ljava/nio/ByteBuffer;)V
      11: aload_0
      12: aconst_null
      13: putfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      16: return

  public com.esotericsoftware.kryo.io.ByteBufferInput(long, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/esotericsoftware/kryo/io/Input."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #2                  // Field varIntsEnabled:Z
       9: aload_0
      10: getstatic     #3                  // Field java/nio/ByteOrder.BIG_ENDIAN:Ljava/nio/ByteOrder;
      13: putfield      #4                  // Field byteOrder:Ljava/nio/ByteOrder;
      16: aload_0
      17: lload_1
      18: iload_3
      19: invokestatic  #28                 // Method com/esotericsoftware/kryo/util/UnsafeUtil.getDirectBufferAt:(JI)Ljava/nio/ByteBuffer;
      22: invokevirtual #10                 // Method setBuffer:(Ljava/nio/ByteBuffer;)V
      25: return

  public java.nio.ByteBuffer getByteBuffer();
    Code:
       0: aload_0
       1: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
       4: areturn

  public java.io.InputStream getInputStream();
    Code:
       0: aload_0
       1: getfield      #15                 // Field inputStream:Ljava/io/InputStream;
       4: areturn

  public void setInputStream(java.io.InputStream);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #15                 // Field inputStream:Ljava/io/InputStream;
       5: aload_0
       6: iconst_0
       7: putfield      #23                 // Field limit:I
      10: aload_0
      11: invokevirtual #29                 // Method rewind:()V
      14: return

  public void rewind();
    Code:
       0: aload_0
       1: invokespecial #30                 // Method com/esotericsoftware/kryo/io/Input.rewind:()V
       4: aload_0
       5: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
       8: iconst_0
       9: invokevirtual #17                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      12: pop
      13: return

  protected int fill(java.nio.ByteBuffer, int, int) throws com.esotericsoftware.kryo.KryoException;
    Code:
       0: aload_0
       1: getfield      #15                 // Field inputStream:Ljava/io/InputStream;
       4: ifnonnull     9
       7: iconst_m1
       8: ireturn
       9: iload_3
      10: newarray       byte
      12: astore        4
      14: aload_0
      15: getfield      #15                 // Field inputStream:Ljava/io/InputStream;
      18: aload         4
      20: iconst_0
      21: iload_3
      22: invokevirtual #31                 // Method java/io/InputStream.read:([BII)I
      25: istore        5
      27: aload_1
      28: iload_2
      29: invokevirtual #17                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      32: pop
      33: iload         5
      35: iflt          54
      38: aload_1
      39: aload         4
      41: iconst_0
      42: iload         5
      44: invokevirtual #32                 // Method java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;
      47: pop
      48: aload_1
      49: iload_2
      50: invokevirtual #17                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      53: pop
      54: iload         5
      56: ireturn
      57: astore        4
      59: new           #34                 // class com/esotericsoftware/kryo/KryoException
      62: dup
      63: aload         4
      65: invokespecial #35                 // Method com/esotericsoftware/kryo/KryoException."<init>":(Ljava/lang/Throwable;)V
      68: athrow
    Exception table:
       from    to  target type
           9    56    57   Class java/io/IOException

  protected final int require(int) throws com.esotericsoftware.kryo.KryoException;
    Code:
       0: aload_0
       1: getfield      #23                 // Field limit:I
       4: aload_0
       5: getfield      #21                 // Field position:I
       8: isub
       9: istore_2
      10: iload_2
      11: iload_1
      12: if_icmplt     17
      15: iload_2
      16: ireturn
      17: iload_1
      18: aload_0
      19: getfield      #5                  // Field capacity:I
      22: if_icmple     64
      25: new           #34                 // class com/esotericsoftware/kryo/KryoException
      28: dup
      29: new           #36                 // class java/lang/StringBuilder
      32: dup
      33: invokespecial #37                 // Method java/lang/StringBuilder."<init>":()V
      36: ldc           #38                 // String Buffer too small: capacity:
      38: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      41: aload_0
      42: getfield      #5                  // Field capacity:I
      45: invokevirtual #40                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      48: ldc           #41                 // String , required:
      50: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      53: iload_1
      54: invokevirtual #40                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      57: invokevirtual #42                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      60: invokespecial #43                 // Method com/esotericsoftware/kryo/KryoException."<init>":(Ljava/lang/String;)V
      63: athrow
      64: iload_2
      65: ifle          126
      68: aload_0
      69: aload_0
      70: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      73: aload_0
      74: getfield      #23                 // Field limit:I
      77: aload_0
      78: getfield      #5                  // Field capacity:I
      81: aload_0
      82: getfield      #23                 // Field limit:I
      85: isub
      86: invokevirtual #44                 // Method fill:(Ljava/nio/ByteBuffer;II)I
      89: istore_3
      90: iload_3
      91: iconst_m1
      92: if_icmpne     105
      95: new           #34                 // class com/esotericsoftware/kryo/KryoException
      98: dup
      99: ldc           #45                 // String Buffer underflow.
     101: invokespecial #43                 // Method com/esotericsoftware/kryo/KryoException."<init>":(Ljava/lang/String;)V
     104: athrow
     105: iload_2
     106: iload_3
     107: iadd
     108: istore_2
     109: iload_2
     110: iload_1
     111: if_icmplt     126
     114: aload_0
     115: dup
     116: getfield      #23                 // Field limit:I
     119: iload_3
     120: iadd
     121: putfield      #23                 // Field limit:I
     124: iload_2
     125: ireturn
     126: aload_0
     127: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
     130: aload_0
     131: getfield      #21                 // Field position:I
     134: invokevirtual #17                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
     137: pop
     138: aload_0
     139: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
     142: invokevirtual #46                 // Method java/nio/ByteBuffer.compact:()Ljava/nio/ByteBuffer;
     145: pop
     146: aload_0
     147: dup
     148: getfield      #25                 // Field total:J
     151: aload_0
     152: getfield      #21                 // Field position:I
     155: i2l
     156: ladd
     157: putfield      #25                 // Field total:J
     160: aload_0
     161: iconst_0
     162: putfield      #21                 // Field position:I
     165: aload_0
     166: aload_0
     167: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
     170: iload_2
     171: aload_0
     172: getfield      #5                  // Field capacity:I
     175: iload_2
     176: isub
     177: invokevirtual #44                 // Method fill:(Ljava/nio/ByteBuffer;II)I
     180: istore_3
     181: iload_3
     182: iconst_m1
     183: if_icmpne     204
     186: iload_2
     187: iload_1
     188: if_icmplt     194
     191: goto          216
     194: new           #34                 // class com/esotericsoftware/kryo/KryoException
     197: dup
     198: ldc           #45                 // String Buffer underflow.
     200: invokespecial #43                 // Method com/esotericsoftware/kryo/KryoException."<init>":(Ljava/lang/String;)V
     203: athrow
     204: iload_2
     205: iload_3
     206: iadd
     207: istore_2
     208: iload_2
     209: iload_1
     210: if_icmplt     165
     213: goto          216
     216: aload_0
     217: iload_2
     218: putfield      #23                 // Field limit:I
     221: aload_0
     222: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
     225: iconst_0
     226: invokevirtual #17                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
     229: pop
     230: iload_2
     231: ireturn

  private int optional(int) throws com.esotericsoftware.kryo.KryoException;
    Code:
       0: aload_0
       1: getfield      #23                 // Field limit:I
       4: aload_0
       5: getfield      #21                 // Field position:I
       8: isub
       9: istore_2
      10: iload_2
      11: iload_1
      12: if_icmplt     17
      15: iload_1
      16: ireturn
      17: iload_1
      18: aload_0
      19: getfield      #5                  // Field capacity:I
      22: invokestatic  #47                 // Method java/lang/Math.min:(II)I
      25: istore_1
      26: aload_0
      27: aload_0
      28: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      31: aload_0
      32: getfield      #23                 // Field limit:I
      35: aload_0
      36: getfield      #5                  // Field capacity:I
      39: aload_0
      40: getfield      #23                 // Field limit:I
      43: isub
      44: invokevirtual #44                 // Method fill:(Ljava/nio/ByteBuffer;II)I
      47: istore_3
      48: iload_3
      49: iconst_m1
      50: if_icmpne     67
      53: iload_2
      54: ifne          61
      57: iconst_m1
      58: goto          66
      61: iload_2
      62: iload_1
      63: invokestatic  #47                 // Method java/lang/Math.min:(II)I
      66: ireturn
      67: iload_2
      68: iload_3
      69: iadd
      70: istore_2
      71: iload_2
      72: iload_1
      73: if_icmplt     88
      76: aload_0
      77: dup
      78: getfield      #23                 // Field limit:I
      81: iload_3
      82: iadd
      83: putfield      #23                 // Field limit:I
      86: iload_1
      87: ireturn
      88: aload_0
      89: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      92: invokevirtual #46                 // Method java/nio/ByteBuffer.compact:()Ljava/nio/ByteBuffer;
      95: pop
      96: aload_0
      97: dup
      98: getfield      #25                 // Field total:J
     101: aload_0
     102: getfield      #21                 // Field position:I
     105: i2l
     106: ladd
     107: putfield      #25                 // Field total:J
     110: aload_0
     111: iconst_0
     112: putfield      #21                 // Field position:I
     115: aload_0
     116: aload_0
     117: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
     120: iload_2
     121: aload_0
     122: getfield      #5                  // Field capacity:I
     125: iload_2
     126: isub
     127: invokevirtual #44                 // Method fill:(Ljava/nio/ByteBuffer;II)I
     130: istore_3
     131: iload_3
     132: iconst_m1
     133: if_icmpne     139
     136: goto          151
     139: iload_2
     140: iload_3
     141: iadd
     142: istore_2
     143: iload_2
     144: iload_1
     145: if_icmplt     115
     148: goto          151
     151: aload_0
     152: iload_2
     153: putfield      #23                 // Field limit:I
     156: aload_0
     157: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
     160: aload_0
     161: getfield      #21                 // Field position:I
     164: invokevirtual #17                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
     167: pop
     168: iload_2
     169: ifne          176
     172: iconst_m1
     173: goto          181
     176: iload_2
     177: iload_1
     178: invokestatic  #47                 // Method java/lang/Math.min:(II)I
     181: ireturn

  public int read() throws com.esotericsoftware.kryo.KryoException;
    Code:
       0: aload_0
       1: iconst_1
       2: invokespecial #48                 // Method optional:(I)I
       5: ifgt          10
       8: iconst_m1
       9: ireturn
      10: aload_0
      11: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      14: aload_0
      15: getfield      #21                 // Field position:I
      18: invokevirtual #17                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      21: pop
      22: aload_0
      23: dup
      24: getfield      #21                 // Field position:I
      27: iconst_1
      28: iadd
      29: putfield      #21                 // Field position:I
      32: aload_0
      33: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      36: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
      39: sipush        255
      42: iand
      43: ireturn

  public int read(byte[]) throws com.esotericsoftware.kryo.KryoException;
    Code:
       0: aload_0
       1: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
       4: aload_0
       5: getfield      #21                 // Field position:I
       8: invokevirtual #17                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      11: pop
      12: aload_0
      13: aload_1
      14: iconst_0
      15: aload_1
      16: arraylength
      17: invokevirtual #50                 // Method read:([BII)I
      20: ireturn

  public int read(byte[], int, int) throws com.esotericsoftware.kryo.KryoException;
    Code:
       0: aload_0
       1: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
       4: aload_0
       5: getfield      #21                 // Field position:I
       8: invokevirtual #17                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      11: pop
      12: aload_1
      13: ifnonnull     26
      16: new           #12                 // class java/lang/IllegalArgumentException
      19: dup
      20: ldc           #51                 // String bytes cannot be null.
      22: invokespecial #14                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      25: athrow
      26: iload_3
      27: istore        4
      29: aload_0
      30: getfield      #23                 // Field limit:I
      33: aload_0
      34: getfield      #21                 // Field position:I
      37: isub
      38: iload_3
      39: invokestatic  #47                 // Method java/lang/Math.min:(II)I
      42: istore        5
      44: aload_0
      45: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      48: aload_1
      49: iload_2
      50: iload         5
      52: invokevirtual #52                 // Method java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;
      55: pop
      56: aload_0
      57: dup
      58: getfield      #21                 // Field position:I
      61: iload         5
      63: iadd
      64: putfield      #21                 // Field position:I
      67: iload_3
      68: iload         5
      70: isub
      71: istore_3
      72: iload_3
      73: ifne          79
      76: goto          119
      79: iload_2
      80: iload         5
      82: iadd
      83: istore_2
      84: aload_0
      85: iload_3
      86: invokespecial #48                 // Method optional:(I)I
      89: istore        5
      91: iload         5
      93: iconst_m1
      94: if_icmpne     105
      97: iload         4
      99: iload_3
     100: if_icmpne     119
     103: iconst_m1
     104: ireturn
     105: aload_0
     106: getfield      #21                 // Field position:I
     109: aload_0
     110: getfield      #23                 // Field limit:I
     113: if_icmpne     44
     116: goto          119
     119: iload         4
     121: iload_3
     122: isub
     123: ireturn

  public long skip(long) throws com.esotericsoftware.kryo.KryoException;
    Code:
       0: lload_1
       1: lstore_3
       2: lload_3
       3: lconst_0
       4: lcmp
       5: ifle          33
       8: ldc2_w        #54                 // long 2147483647l
      11: lload_3
      12: invokestatic  #56                 // Method java/lang/Math.min:(JJ)J
      15: l2i
      16: istore        5
      18: aload_0
      19: iload         5
      21: invokevirtual #57                 // Method skip:(I)V
      24: lload_3
      25: iload         5
      27: i2l
      28: lsub
      29: lstore_3
      30: goto          2
      33: lload_1
      34: lreturn

  public void close() throws com.esotericsoftware.kryo.KryoException;
    Code:
       0: aload_0
       1: getfield      #15                 // Field inputStream:Ljava/io/InputStream;
       4: ifnull        18
       7: aload_0
       8: getfield      #15                 // Field inputStream:Ljava/io/InputStream;
      11: invokevirtual #58                 // Method java/io/InputStream.close:()V
      14: goto          18
      17: astore_1
      18: return
    Exception table:
       from    to  target type
           7    14    17   Class java/io/IOException

  public byte readByte() throws com.esotericsoftware.kryo.KryoException;
    Code:
       0: aload_0
       1: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
       4: aload_0
       5: getfield      #21                 // Field position:I
       8: invokevirtual #17                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      11: pop
      12: aload_0
      13: iconst_1
      14: invokevirtual #59                 // Method require:(I)I
      17: pop
      18: aload_0
      19: dup
      20: getfield      #21                 // Field position:I
      23: iconst_1
      24: iadd
      25: putfield      #21                 // Field position:I
      28: aload_0
      29: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      32: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
      35: ireturn

  public int readByteUnsigned() throws com.esotericsoftware.kryo.KryoException;
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #59                 // Method require:(I)I
       5: pop
       6: aload_0
       7: dup
       8: getfield      #21                 // Field position:I
      11: iconst_1
      12: iadd
      13: putfield      #21                 // Field position:I
      16: aload_0
      17: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      20: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
      23: sipush        255
      26: iand
      27: ireturn

  public byte[] readBytes(int) throws com.esotericsoftware.kryo.KryoException;
    Code:
       0: iload_1
       1: newarray       byte
       3: astore_2
       4: aload_0
       5: aload_2
       6: iconst_0
       7: iload_1
       8: invokevirtual #60                 // Method readBytes:([BII)V
      11: aload_2
      12: areturn

  public void readBytes(byte[]) throws com.esotericsoftware.kryo.KryoException;
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_1
       4: arraylength
       5: invokevirtual #60                 // Method readBytes:([BII)V
       8: return

  public void readBytes(byte[], int, int) throws com.esotericsoftware.kryo.KryoException;
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #12                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #51                 // String bytes cannot be null.
      10: invokespecial #14                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_0
      15: getfield      #23                 // Field limit:I
      18: aload_0
      19: getfield      #21                 // Field position:I
      22: isub
      23: iload_3
      24: invokestatic  #47                 // Method java/lang/Math.min:(II)I
      27: istore        4
      29: aload_0
      30: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      33: aload_1
      34: iload_2
      35: iload         4
      37: invokevirtual #52                 // Method java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;
      40: pop
      41: aload_0
      42: dup
      43: getfield      #21                 // Field position:I
      46: iload         4
      48: iadd
      49: putfield      #21                 // Field position:I
      52: iload_3
      53: iload         4
      55: isub
      56: istore_3
      57: iload_3
      58: ifne          64
      61: goto          89
      64: iload_2
      65: iload         4
      67: iadd
      68: istore_2
      69: iload_3
      70: aload_0
      71: getfield      #5                  // Field capacity:I
      74: invokestatic  #47                 // Method java/lang/Math.min:(II)I
      77: istore        4
      79: aload_0
      80: iload         4
      82: invokevirtual #59                 // Method require:(I)I
      85: pop
      86: goto          29
      89: return

  public int readInt() throws com.esotericsoftware.kryo.KryoException;
    Code:
       0: aload_0
       1: iconst_4
       2: invokevirtual #59                 // Method require:(I)I
       5: pop
       6: aload_0
       7: dup
       8: getfield      #21                 // Field position:I
      11: iconst_4
      12: iadd
      13: putfield      #21                 // Field position:I
      16: aload_0
      17: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      20: invokevirtual #61                 // Method java/nio/ByteBuffer.getInt:()I
      23: ireturn

  public int readInt(boolean) throws com.esotericsoftware.kryo.KryoException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field varIntsEnabled:Z
       4: ifeq          13
       7: aload_0
       8: iload_1
       9: invokevirtual #62                 // Method readVarInt:(Z)I
      12: ireturn
      13: aload_0
      14: invokevirtual #63                 // Method readInt:()I
      17: ireturn

  public int readVarInt(boolean) throws com.esotericsoftware.kryo.KryoException;
    Code:
       0: aload_0
       1: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
       4: aload_0
       5: getfield      #21                 // Field position:I
       8: invokevirtual #17                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      11: pop
      12: aload_0
      13: iconst_1
      14: invokevirtual #59                 // Method require:(I)I
      17: iconst_5
      18: if_icmpge     27
      21: aload_0
      22: iload_1
      23: invokespecial #64                 // Method readInt_slow:(Z)I
      26: ireturn
      27: aload_0
      28: dup
      29: getfield      #21                 // Field position:I
      32: iconst_1
      33: iadd
      34: putfield      #21                 // Field position:I
      37: aload_0
      38: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      41: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
      44: istore_2
      45: iload_2
      46: bipush        127
      48: iand
      49: istore_3
      50: iload_2
      51: sipush        128
      54: iand
      55: ifeq          194
      58: aload_0
      59: dup
      60: getfield      #21                 // Field position:I
      63: iconst_1
      64: iadd
      65: putfield      #21                 // Field position:I
      68: aload_0
      69: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      72: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
      75: istore_2
      76: iload_3
      77: iload_2
      78: bipush        127
      80: iand
      81: bipush        7
      83: ishl
      84: ior
      85: istore_3
      86: iload_2
      87: sipush        128
      90: iand
      91: ifeq          194
      94: aload_0
      95: dup
      96: getfield      #21                 // Field position:I
      99: iconst_1
     100: iadd
     101: putfield      #21                 // Field position:I
     104: aload_0
     105: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
     108: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
     111: istore_2
     112: iload_3
     113: iload_2
     114: bipush        127
     116: iand
     117: bipush        14
     119: ishl
     120: ior
     121: istore_3
     122: iload_2
     123: sipush        128
     126: iand
     127: ifeq          194
     130: aload_0
     131: dup
     132: getfield      #21                 // Field position:I
     135: iconst_1
     136: iadd
     137: putfield      #21                 // Field position:I
     140: aload_0
     141: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
     144: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
     147: istore_2
     148: iload_3
     149: iload_2
     150: bipush        127
     152: iand
     153: bipush        21
     155: ishl
     156: ior
     157: istore_3
     158: iload_2
     159: sipush        128
     162: iand
     163: ifeq          194
     166: aload_0
     167: dup
     168: getfield      #21                 // Field position:I
     171: iconst_1
     172: iadd
     173: putfield      #21                 // Field position:I
     176: aload_0
     177: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
     180: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
     183: istore_2
     184: iload_3
     185: iload_2
     186: bipush        127
     188: iand
     189: bipush        28
     191: ishl
     192: ior
     193: istore_3
     194: iload_1
     195: ifeq          202
     198: iload_3
     199: goto          210
     202: iload_3
     203: iconst_1
     204: iushr
     205: iload_3
     206: iconst_1
     207: iand
     208: ineg
     209: ixor
     210: ireturn

  private int readInt_slow(boolean);
    Code:
       0: aload_0
       1: dup
       2: getfield      #21                 // Field position:I
       5: iconst_1
       6: iadd
       7: putfield      #21                 // Field position:I
      10: aload_0
      11: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      14: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
      17: istore_2
      18: iload_2
      19: bipush        127
      21: iand
      22: istore_3
      23: iload_2
      24: sipush        128
      27: iand
      28: ifeq          191
      31: aload_0
      32: iconst_1
      33: invokevirtual #59                 // Method require:(I)I
      36: pop
      37: aload_0
      38: dup
      39: getfield      #21                 // Field position:I
      42: iconst_1
      43: iadd
      44: putfield      #21                 // Field position:I
      47: aload_0
      48: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      51: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
      54: istore_2
      55: iload_3
      56: iload_2
      57: bipush        127
      59: iand
      60: bipush        7
      62: ishl
      63: ior
      64: istore_3
      65: iload_2
      66: sipush        128
      69: iand
      70: ifeq          191
      73: aload_0
      74: iconst_1
      75: invokevirtual #59                 // Method require:(I)I
      78: pop
      79: aload_0
      80: dup
      81: getfield      #21                 // Field position:I
      84: iconst_1
      85: iadd
      86: putfield      #21                 // Field position:I
      89: aload_0
      90: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      93: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
      96: istore_2
      97: iload_3
      98: iload_2
      99: bipush        127
     101: iand
     102: bipush        14
     104: ishl
     105: ior
     106: istore_3
     107: iload_2
     108: sipush        128
     111: iand
     112: ifeq          191
     115: aload_0
     116: iconst_1
     117: invokevirtual #59                 // Method require:(I)I
     120: pop
     121: aload_0
     122: dup
     123: getfield      #21                 // Field position:I
     126: iconst_1
     127: iadd
     128: putfield      #21                 // Field position:I
     131: aload_0
     132: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
     135: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
     138: istore_2
     139: iload_3
     140: iload_2
     141: bipush        127
     143: iand
     144: bipush        21
     146: ishl
     147: ior
     148: istore_3
     149: iload_2
     150: sipush        128
     153: iand
     154: ifeq          191
     157: aload_0
     158: iconst_1
     159: invokevirtual #59                 // Method require:(I)I
     162: pop
     163: aload_0
     164: dup
     165: getfield      #21                 // Field position:I
     168: iconst_1
     169: iadd
     170: putfield      #21                 // Field position:I
     173: aload_0
     174: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
     177: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
     180: istore_2
     181: iload_3
     182: iload_2
     183: bipush        127
     185: iand
     186: bipush        28
     188: ishl
     189: ior
     190: istore_3
     191: iload_1
     192: ifeq          199
     195: iload_3
     196: goto          207
     199: iload_3
     200: iconst_1
     201: iushr
     202: iload_3
     203: iconst_1
     204: iand
     205: ineg
     206: ixor
     207: ireturn

  public boolean canReadInt() throws com.esotericsoftware.kryo.KryoException;
    Code:
       0: aload_0
       1: getfield      #23                 // Field limit:I
       4: aload_0
       5: getfield      #21                 // Field position:I
       8: isub
       9: iconst_5
      10: if_icmplt     15
      13: iconst_1
      14: ireturn
      15: aload_0
      16: iconst_5
      17: invokespecial #48                 // Method optional:(I)I
      20: ifgt          25
      23: iconst_0
      24: ireturn
      25: aload_0
      26: getfield      #21                 // Field position:I
      29: istore_1
      30: aload_0
      31: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      34: iload_1
      35: iinc          1, 1
      38: invokevirtual #65                 // Method java/nio/ByteBuffer.get:(I)B
      41: sipush        128
      44: iand
      45: ifne          50
      48: iconst_1
      49: ireturn
      50: iload_1
      51: aload_0
      52: getfield      #23                 // Field limit:I
      55: if_icmpne     60
      58: iconst_0
      59: ireturn
      60: aload_0
      61: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      64: iload_1
      65: iinc          1, 1
      68: invokevirtual #65                 // Method java/nio/ByteBuffer.get:(I)B
      71: sipush        128
      74: iand
      75: ifne          80
      78: iconst_1
      79: ireturn
      80: iload_1
      81: aload_0
      82: getfield      #23                 // Field limit:I
      85: if_icmpne     90
      88: iconst_0
      89: ireturn
      90: aload_0
      91: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      94: iload_1
      95: iinc          1, 1
      98: invokevirtual #65                 // Method java/nio/ByteBuffer.get:(I)B
     101: sipush        128
     104: iand
     105: ifne          110
     108: iconst_1
     109: ireturn
     110: iload_1
     111: aload_0
     112: getfield      #23                 // Field limit:I
     115: if_icmpne     120
     118: iconst_0
     119: ireturn
     120: aload_0
     121: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
     124: iload_1
     125: iinc          1, 1
     128: invokevirtual #65                 // Method java/nio/ByteBuffer.get:(I)B
     131: sipush        128
     134: iand
     135: ifne          140
     138: iconst_1
     139: ireturn
     140: iload_1
     141: aload_0
     142: getfield      #23                 // Field limit:I
     145: if_icmpne     150
     148: iconst_0
     149: ireturn
     150: iconst_1
     151: ireturn

  public boolean canReadLong() throws com.esotericsoftware.kryo.KryoException;
    Code:
       0: aload_0
       1: getfield      #23                 // Field limit:I
       4: aload_0
       5: getfield      #21                 // Field position:I
       8: isub
       9: bipush        9
      11: if_icmplt     16
      14: iconst_1
      15: ireturn
      16: aload_0
      17: iconst_5
      18: invokespecial #48                 // Method optional:(I)I
      21: ifgt          26
      24: iconst_0
      25: ireturn
      26: aload_0
      27: getfield      #21                 // Field position:I
      30: istore_1
      31: aload_0
      32: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      35: iload_1
      36: iinc          1, 1
      39: invokevirtual #65                 // Method java/nio/ByteBuffer.get:(I)B
      42: sipush        128
      45: iand
      46: ifne          51
      49: iconst_1
      50: ireturn
      51: iload_1
      52: aload_0
      53: getfield      #23                 // Field limit:I
      56: if_icmpne     61
      59: iconst_0
      60: ireturn
      61: aload_0
      62: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      65: iload_1
      66: iinc          1, 1
      69: invokevirtual #65                 // Method java/nio/ByteBuffer.get:(I)B
      72: sipush        128
      75: iand
      76: ifne          81
      79: iconst_1
      80: ireturn
      81: iload_1
      82: aload_0
      83: getfield      #23                 // Field limit:I
      86: if_icmpne     91
      89: iconst_0
      90: ireturn
      91: aload_0
      92: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      95: iload_1
      96: iinc          1, 1
      99: invokevirtual #65                 // Method java/nio/ByteBuffer.get:(I)B
     102: sipush        128
     105: iand
     106: ifne          111
     109: iconst_1
     110: ireturn
     111: iload_1
     112: aload_0
     113: getfield      #23                 // Field limit:I
     116: if_icmpne     121
     119: iconst_0
     120: ireturn
     121: aload_0
     122: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
     125: iload_1
     126: iinc          1, 1
     129: invokevirtual #65                 // Method java/nio/ByteBuffer.get:(I)B
     132: sipush        128
     135: iand
     136: ifne          141
     139: iconst_1
     140: ireturn
     141: iload_1
     142: aload_0
     143: getfield      #23                 // Field limit:I
     146: if_icmpne     151
     149: iconst_0
     150: ireturn
     151: aload_0
     152: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
     155: iload_1
     156: iinc          1, 1
     159: invokevirtual #65                 // Method java/nio/ByteBuffer.get:(I)B
     162: sipush        128
     165: iand
     166: ifne          171
     169: iconst_1
     170: ireturn
     171: iload_1
     172: aload_0
     173: getfield      #23                 // Field limit:I
     176: if_icmpne     181
     179: iconst_0
     180: ireturn
     181: aload_0
     182: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
     185: iload_1
     186: iinc          1, 1
     189: invokevirtual #65                 // Method java/nio/ByteBuffer.get:(I)B
     192: sipush        128
     195: iand
     196: ifne          201
     199: iconst_1
     200: ireturn
     201: iload_1
     202: aload_0
     203: getfield      #23                 // Field limit:I
     206: if_icmpne     211
     209: iconst_0
     210: ireturn
     211: aload_0
     212: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
     215: iload_1
     216: iinc          1, 1
     219: invokevirtual #65                 // Method java/nio/ByteBuffer.get:(I)B
     222: sipush        128
     225: iand
     226: ifne          231
     229: iconst_1
     230: ireturn
     231: iload_1
     232: aload_0
     233: getfield      #23                 // Field limit:I
     236: if_icmpne     241
     239: iconst_0
     240: ireturn
     241: aload_0
     242: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
     245: iload_1
     246: iinc          1, 1
     249: invokevirtual #65                 // Method java/nio/ByteBuffer.get:(I)B
     252: sipush        128
     255: iand
     256: ifne          261
     259: iconst_1
     260: ireturn
     261: iload_1
     262: aload_0
     263: getfield      #23                 // Field limit:I
     266: if_icmpne     271
     269: iconst_0
     270: ireturn
     271: iconst_1
     272: ireturn

  public java.lang.String readString();
    Code:
       0: aload_0
       1: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
       4: aload_0
       5: getfield      #21                 // Field position:I
       8: invokevirtual #17                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      11: pop
      12: aload_0
      13: iconst_1
      14: invokevirtual #59                 // Method require:(I)I
      17: istore_1
      18: aload_0
      19: dup
      20: getfield      #21                 // Field position:I
      23: iconst_1
      24: iadd
      25: putfield      #21                 // Field position:I
      28: aload_0
      29: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      32: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
      35: istore_2
      36: iload_2
      37: sipush        128
      40: iand
      41: ifne          49
      44: aload_0
      45: invokespecial #66                 // Method readAscii:()Ljava/lang/String;
      48: areturn
      49: iload_1
      50: iconst_5
      51: if_icmplt     62
      54: aload_0
      55: iload_2
      56: invokespecial #67                 // Method readUtf8Length:(I)I
      59: goto          67
      62: aload_0
      63: iload_2
      64: invokespecial #68                 // Method readUtf8Length_slow:(I)I
      67: istore_3
      68: iload_3
      69: lookupswitch  { // 2
                     0: 96
                     1: 98
               default: 101
          }
      96: aconst_null
      97: areturn
      98: ldc           #69                 // String
     100: areturn
     101: iinc          3, -1
     104: aload_0
     105: getfield      #70                 // Field chars:[C
     108: arraylength
     109: iload_3
     110: if_icmpge     120
     113: aload_0
     114: iload_3
     115: newarray       char
     117: putfield      #70                 // Field chars:[C
     120: aload_0
     121: iload_3
     122: invokespecial #71                 // Method readUtf8:(I)V
     125: new           #72                 // class java/lang/String
     128: dup
     129: aload_0
     130: getfield      #70                 // Field chars:[C
     133: iconst_0
     134: iload_3
     135: invokespecial #73                 // Method java/lang/String."<init>":([CII)V
     138: areturn

  private int readUtf8Length(int);
    Code:
       0: iload_1
       1: bipush        63
       3: iand
       4: istore_2
       5: iload_1
       6: bipush        64
       8: iand
       9: ifeq          148
      12: aload_0
      13: dup
      14: getfield      #21                 // Field position:I
      17: iconst_1
      18: iadd
      19: putfield      #21                 // Field position:I
      22: aload_0
      23: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      26: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
      29: istore_1
      30: iload_2
      31: iload_1
      32: bipush        127
      34: iand
      35: bipush        6
      37: ishl
      38: ior
      39: istore_2
      40: iload_1
      41: sipush        128
      44: iand
      45: ifeq          148
      48: aload_0
      49: dup
      50: getfield      #21                 // Field position:I
      53: iconst_1
      54: iadd
      55: putfield      #21                 // Field position:I
      58: aload_0
      59: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      62: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
      65: istore_1
      66: iload_2
      67: iload_1
      68: bipush        127
      70: iand
      71: bipush        13
      73: ishl
      74: ior
      75: istore_2
      76: iload_1
      77: sipush        128
      80: iand
      81: ifeq          148
      84: aload_0
      85: dup
      86: getfield      #21                 // Field position:I
      89: iconst_1
      90: iadd
      91: putfield      #21                 // Field position:I
      94: aload_0
      95: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      98: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
     101: istore_1
     102: iload_2
     103: iload_1
     104: bipush        127
     106: iand
     107: bipush        20
     109: ishl
     110: ior
     111: istore_2
     112: iload_1
     113: sipush        128
     116: iand
     117: ifeq          148
     120: aload_0
     121: dup
     122: getfield      #21                 // Field position:I
     125: iconst_1
     126: iadd
     127: putfield      #21                 // Field position:I
     130: aload_0
     131: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
     134: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
     137: istore_1
     138: iload_2
     139: iload_1
     140: bipush        127
     142: iand
     143: bipush        27
     145: ishl
     146: ior
     147: istore_2
     148: iload_2
     149: ireturn

  private int readUtf8Length_slow(int);
    Code:
       0: iload_1
       1: bipush        63
       3: iand
       4: istore_2
       5: iload_1
       6: bipush        64
       8: iand
       9: ifeq          172
      12: aload_0
      13: iconst_1
      14: invokevirtual #59                 // Method require:(I)I
      17: pop
      18: aload_0
      19: dup
      20: getfield      #21                 // Field position:I
      23: iconst_1
      24: iadd
      25: putfield      #21                 // Field position:I
      28: aload_0
      29: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      32: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
      35: istore_1
      36: iload_2
      37: iload_1
      38: bipush        127
      40: iand
      41: bipush        6
      43: ishl
      44: ior
      45: istore_2
      46: iload_1
      47: sipush        128
      50: iand
      51: ifeq          172
      54: aload_0
      55: iconst_1
      56: invokevirtual #59                 // Method require:(I)I
      59: pop
      60: aload_0
      61: dup
      62: getfield      #21                 // Field position:I
      65: iconst_1
      66: iadd
      67: putfield      #21                 // Field position:I
      70: aload_0
      71: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      74: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
      77: istore_1
      78: iload_2
      79: iload_1
      80: bipush        127
      82: iand
      83: bipush        13
      85: ishl
      86: ior
      87: istore_2
      88: iload_1
      89: sipush        128
      92: iand
      93: ifeq          172
      96: aload_0
      97: iconst_1
      98: invokevirtual #59                 // Method require:(I)I
     101: pop
     102: aload_0
     103: dup
     104: getfield      #21                 // Field position:I
     107: iconst_1
     108: iadd
     109: putfield      #21                 // Field position:I
     112: aload_0
     113: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
     116: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
     119: istore_1
     120: iload_2
     121: iload_1
     122: bipush        127
     124: iand
     125: bipush        20
     127: ishl
     128: ior
     129: istore_2
     130: iload_1
     131: sipush        128
     134: iand
     135: ifeq          172
     138: aload_0
     139: iconst_1
     140: invokevirtual #59                 // Method require:(I)I
     143: pop
     144: aload_0
     145: dup
     146: getfield      #21                 // Field position:I
     149: iconst_1
     150: iadd
     151: putfield      #21                 // Field position:I
     154: aload_0
     155: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
     158: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
     161: istore_1
     162: iload_2
     163: iload_1
     164: bipush        127
     166: iand
     167: bipush        27
     169: ishl
     170: ior
     171: istore_2
     172: iload_2
     173: ireturn

  private void readUtf8(int);
    Code:
       0: aload_0
       1: getfield      #70                 // Field chars:[C
       4: astore_2
       5: iconst_0
       6: istore_3
       7: aload_0
       8: iconst_1
       9: invokevirtual #59                 // Method require:(I)I
      12: iload_1
      13: invokestatic  #47                 // Method java/lang/Math.min:(II)I
      16: istore        4
      18: aload_0
      19: getfield      #21                 // Field position:I
      22: istore        5
      24: iload_3
      25: iload         4
      27: if_icmpge     65
      30: iinc          5, 1
      33: aload_0
      34: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      37: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
      40: istore        6
      42: iload         6
      44: ifge          53
      47: iinc          5, -1
      50: goto          65
      53: aload_2
      54: iload_3
      55: iinc          3, 1
      58: iload         6
      60: i2c
      61: castore
      62: goto          24
      65: aload_0
      66: iload         5
      68: putfield      #21                 // Field position:I
      71: iload_3
      72: iload_1
      73: if_icmpge     92
      76: aload_0
      77: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      80: iload         5
      82: invokevirtual #17                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      85: pop
      86: aload_0
      87: iload_1
      88: iload_3
      89: invokespecial #74                 // Method readUtf8_slow:(II)V
      92: return

  private void readUtf8_slow(int, int);
    Code:
       0: aload_0
       1: getfield      #70                 // Field chars:[C
       4: astore_3
       5: iload_2
       6: iload_1
       7: if_icmpge     257
      10: aload_0
      11: getfield      #21                 // Field position:I
      14: aload_0
      15: getfield      #23                 // Field limit:I
      18: if_icmpne     27
      21: aload_0
      22: iconst_1
      23: invokevirtual #59                 // Method require:(I)I
      26: pop
      27: aload_0
      28: dup
      29: getfield      #21                 // Field position:I
      32: iconst_1
      33: iadd
      34: putfield      #21                 // Field position:I
      37: aload_0
      38: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      41: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
      44: sipush        255
      47: iand
      48: istore        4
      50: iload         4
      52: iconst_4
      53: ishr
      54: tableswitch   { // 0 to 14
                     0: 128
                     1: 128
                     2: 128
                     3: 128
                     4: 128
                     5: 128
                     6: 128
                     7: 128
                     8: 251
                     9: 251
                    10: 251
                    11: 251
                    12: 137
                    13: 137
                    14: 190
               default: 251
          }
     128: aload_3
     129: iload_2
     130: iload         4
     132: i2c
     133: castore
     134: goto          251
     137: aload_0
     138: getfield      #21                 // Field position:I
     141: aload_0
     142: getfield      #23                 // Field limit:I
     145: if_icmpne     154
     148: aload_0
     149: iconst_1
     150: invokevirtual #59                 // Method require:(I)I
     153: pop
     154: aload_0
     155: dup
     156: getfield      #21                 // Field position:I
     159: iconst_1
     160: iadd
     161: putfield      #21                 // Field position:I
     164: aload_3
     165: iload_2
     166: iload         4
     168: bipush        31
     170: iand
     171: bipush        6
     173: ishl
     174: aload_0
     175: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
     178: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
     181: bipush        63
     183: iand
     184: ior
     185: i2c
     186: castore
     187: goto          251
     190: aload_0
     191: iconst_2
     192: invokevirtual #59                 // Method require:(I)I
     195: pop
     196: aload_0
     197: dup
     198: getfield      #21                 // Field position:I
     201: iconst_2
     202: iadd
     203: putfield      #21                 // Field position:I
     206: aload_0
     207: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
     210: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
     213: istore        5
     215: aload_0
     216: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
     219: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
     222: istore        6
     224: aload_3
     225: iload_2
     226: iload         4
     228: bipush        15
     230: iand
     231: bipush        12
     233: ishl
     234: iload         5
     236: bipush        63
     238: iand
     239: bipush        6
     241: ishl
     242: ior
     243: iload         6
     245: bipush        63
     247: iand
     248: ior
     249: i2c
     250: castore
     251: iinc          2, 1
     254: goto          5
     257: return

  private java.lang.String readAscii();
    Code:
       0: aload_0
       1: getfield      #21                 // Field position:I
       4: istore_1
       5: iload_1
       6: iconst_1
       7: isub
       8: istore_2
       9: aload_0
      10: getfield      #23                 // Field limit:I
      13: istore_3
      14: iload_1
      15: iload_3
      16: if_icmpne     24
      19: aload_0
      20: invokespecial #75                 // Method readAscii_slow:()Ljava/lang/String;
      23: areturn
      24: iinc          1, 1
      27: aload_0
      28: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      31: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
      34: istore        4
      36: iload         4
      38: sipush        128
      41: iand
      42: ifeq          14
      45: aload_0
      46: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      49: iload_1
      50: iconst_1
      51: isub
      52: aload_0
      53: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      56: iload_1
      57: iconst_1
      58: isub
      59: invokevirtual #65                 // Method java/nio/ByteBuffer.get:(I)B
      62: bipush        127
      64: iand
      65: i2b
      66: invokevirtual #76                 // Method java/nio/ByteBuffer.put:(IB)Ljava/nio/ByteBuffer;
      69: pop
      70: iload_1
      71: iload_2
      72: isub
      73: newarray       byte
      75: astore        5
      77: aload_0
      78: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      81: iload_2
      82: invokevirtual #17                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      85: pop
      86: aload_0
      87: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      90: aload         5
      92: invokevirtual #77                 // Method java/nio/ByteBuffer.get:([B)Ljava/nio/ByteBuffer;
      95: pop
      96: new           #72                 // class java/lang/String
      99: dup
     100: aload         5
     102: iconst_0
     103: iconst_0
     104: iload_1
     105: iload_2
     106: isub
     107: invokespecial #78                 // Method java/lang/String."<init>":([BIII)V
     110: astore        6
     112: aload_0
     113: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
     116: iload_1
     117: iconst_1
     118: isub
     119: aload_0
     120: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
     123: iload_1
     124: iconst_1
     125: isub
     126: invokevirtual #65                 // Method java/nio/ByteBuffer.get:(I)B
     129: sipush        128
     132: ior
     133: i2b
     134: invokevirtual #76                 // Method java/nio/ByteBuffer.put:(IB)Ljava/nio/ByteBuffer;
     137: pop
     138: aload_0
     139: iload_1
     140: putfield      #21                 // Field position:I
     143: aload_0
     144: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
     147: aload_0
     148: getfield      #21                 // Field position:I
     151: invokevirtual #17                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
     154: pop
     155: aload         6
     157: areturn

  private java.lang.String readAscii_slow();
    Code:
       0: aload_0
       1: dup
       2: getfield      #21                 // Field position:I
       5: iconst_1
       6: isub
       7: putfield      #21                 // Field position:I
      10: aload_0
      11: getfield      #23                 // Field limit:I
      14: aload_0
      15: getfield      #21                 // Field position:I
      18: isub
      19: istore_1
      20: iload_1
      21: aload_0
      22: getfield      #70                 // Field chars:[C
      25: arraylength
      26: if_icmple     38
      29: aload_0
      30: iload_1
      31: iconst_2
      32: imul
      33: newarray       char
      35: putfield      #70                 // Field chars:[C
      38: aload_0
      39: getfield      #70                 // Field chars:[C
      42: astore_2
      43: aload_0
      44: getfield      #21                 // Field position:I
      47: istore_3
      48: iconst_0
      49: istore        4
      51: aload_0
      52: getfield      #23                 // Field limit:I
      55: istore        5
      57: iload_3
      58: iload         5
      60: if_icmpge     85
      63: aload_2
      64: iload         4
      66: aload_0
      67: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      70: iload_3
      71: invokevirtual #65                 // Method java/nio/ByteBuffer.get:(I)B
      74: i2c
      75: castore
      76: iinc          3, 1
      79: iinc          4, 1
      82: goto          57
      85: aload_0
      86: aload_0
      87: getfield      #23                 // Field limit:I
      90: putfield      #21                 // Field position:I
      93: aload_0
      94: iconst_1
      95: invokevirtual #59                 // Method require:(I)I
      98: pop
      99: aload_0
     100: dup
     101: getfield      #21                 // Field position:I
     104: iconst_1
     105: iadd
     106: putfield      #21                 // Field position:I
     109: aload_0
     110: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
     113: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
     116: istore_3
     117: iload_1
     118: aload_2
     119: arraylength
     120: if_icmpne     148
     123: iload_1
     124: iconst_2
     125: imul
     126: newarray       char
     128: astore        4
     130: aload_2
     131: iconst_0
     132: aload         4
     134: iconst_0
     135: iload_1
     136: invokestatic  #79                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     139: aload         4
     141: astore_2
     142: aload_0
     143: aload         4
     145: putfield      #70                 // Field chars:[C
     148: iload_3
     149: sipush        128
     152: iand
     153: sipush        128
     156: if_icmpne     173
     159: aload_2
     160: iload_1
     161: iinc          1, 1
     164: iload_3
     165: bipush        127
     167: iand
     168: i2c
     169: castore
     170: goto          184
     173: aload_2
     174: iload_1
     175: iinc          1, 1
     178: iload_3
     179: i2c
     180: castore
     181: goto          93
     184: new           #72                 // class java/lang/String
     187: dup
     188: aload_2
     189: iconst_0
     190: iload_1
     191: invokespecial #73                 // Method java/lang/String."<init>":([CII)V
     194: areturn

  public java.lang.StringBuilder readStringBuilder();
    Code:
       0: aload_0
       1: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
       4: aload_0
       5: getfield      #21                 // Field position:I
       8: invokevirtual #17                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      11: pop
      12: aload_0
      13: iconst_1
      14: invokevirtual #59                 // Method require:(I)I
      17: istore_1
      18: aload_0
      19: dup
      20: getfield      #21                 // Field position:I
      23: iconst_1
      24: iadd
      25: putfield      #21                 // Field position:I
      28: aload_0
      29: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      32: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
      35: istore_2
      36: iload_2
      37: sipush        128
      40: iand
      41: ifne          56
      44: new           #36                 // class java/lang/StringBuilder
      47: dup
      48: aload_0
      49: invokespecial #66                 // Method readAscii:()Ljava/lang/String;
      52: invokespecial #80                 // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
      55: areturn
      56: iload_1
      57: iconst_5
      58: if_icmplt     69
      61: aload_0
      62: iload_2
      63: invokespecial #67                 // Method readUtf8Length:(I)I
      66: goto          74
      69: aload_0
      70: iload_2
      71: invokespecial #68                 // Method readUtf8Length_slow:(I)I
      74: istore_3
      75: iload_3
      76: lookupswitch  { // 2
                     0: 104
                     1: 106
               default: 116
          }
     104: aconst_null
     105: areturn
     106: new           #36                 // class java/lang/StringBuilder
     109: dup
     110: ldc           #69                 // String
     112: invokespecial #80                 // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
     115: areturn
     116: iinc          3, -1
     119: aload_0
     120: getfield      #70                 // Field chars:[C
     123: arraylength
     124: iload_3
     125: if_icmpge     135
     128: aload_0
     129: iload_3
     130: newarray       char
     132: putfield      #70                 // Field chars:[C
     135: aload_0
     136: iload_3
     137: invokespecial #71                 // Method readUtf8:(I)V
     140: new           #36                 // class java/lang/StringBuilder
     143: dup
     144: iload_3
     145: invokespecial #81                 // Method java/lang/StringBuilder."<init>":(I)V
     148: astore        4
     150: aload         4
     152: aload_0
     153: getfield      #70                 // Field chars:[C
     156: iconst_0
     157: iload_3
     158: invokevirtual #82                 // Method java/lang/StringBuilder.append:([CII)Ljava/lang/StringBuilder;
     161: pop
     162: aload         4
     164: areturn

  public float readFloat() throws com.esotericsoftware.kryo.KryoException;
    Code:
       0: aload_0
       1: iconst_4
       2: invokevirtual #59                 // Method require:(I)I
       5: pop
       6: aload_0
       7: dup
       8: getfield      #21                 // Field position:I
      11: iconst_4
      12: iadd
      13: putfield      #21                 // Field position:I
      16: aload_0
      17: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      20: invokevirtual #83                 // Method java/nio/ByteBuffer.getFloat:()F
      23: freturn

  public float readFloat(float, boolean) throws com.esotericsoftware.kryo.KryoException;
    Code:
       0: aload_0
       1: iload_2
       2: invokevirtual #84                 // Method readInt:(Z)I
       5: i2f
       6: fload_1
       7: fdiv
       8: freturn

  public short readShort() throws com.esotericsoftware.kryo.KryoException;
    Code:
       0: aload_0
       1: iconst_2
       2: invokevirtual #59                 // Method require:(I)I
       5: pop
       6: aload_0
       7: dup
       8: getfield      #21                 // Field position:I
      11: iconst_2
      12: iadd
      13: putfield      #21                 // Field position:I
      16: aload_0
      17: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      20: invokevirtual #85                 // Method java/nio/ByteBuffer.getShort:()S
      23: ireturn

  public int readShortUnsigned() throws com.esotericsoftware.kryo.KryoException;
    Code:
       0: aload_0
       1: iconst_2
       2: invokevirtual #59                 // Method require:(I)I
       5: pop
       6: aload_0
       7: dup
       8: getfield      #21                 // Field position:I
      11: iconst_2
      12: iadd
      13: putfield      #21                 // Field position:I
      16: aload_0
      17: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      20: invokevirtual #85                 // Method java/nio/ByteBuffer.getShort:()S
      23: ireturn

  public long readLong() throws com.esotericsoftware.kryo.KryoException;
    Code:
       0: aload_0
       1: bipush        8
       3: invokevirtual #59                 // Method require:(I)I
       6: pop
       7: aload_0
       8: dup
       9: getfield      #21                 // Field position:I
      12: bipush        8
      14: iadd
      15: putfield      #21                 // Field position:I
      18: aload_0
      19: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      22: invokevirtual #86                 // Method java/nio/ByteBuffer.getLong:()J
      25: lreturn

  public long readLong(boolean) throws com.esotericsoftware.kryo.KryoException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field varIntsEnabled:Z
       4: ifeq          13
       7: aload_0
       8: iload_1
       9: invokevirtual #87                 // Method readVarLong:(Z)J
      12: lreturn
      13: aload_0
      14: invokevirtual #88                 // Method readLong:()J
      17: lreturn

  public long readVarLong(boolean) throws com.esotericsoftware.kryo.KryoException;
    Code:
       0: aload_0
       1: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
       4: aload_0
       5: getfield      #21                 // Field position:I
       8: invokevirtual #17                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      11: pop
      12: aload_0
      13: iconst_1
      14: invokevirtual #59                 // Method require:(I)I
      17: bipush        9
      19: if_icmpge     28
      22: aload_0
      23: iload_1
      24: invokespecial #89                 // Method readLong_slow:(Z)J
      27: lreturn
      28: aload_0
      29: dup
      30: getfield      #21                 // Field position:I
      33: iconst_1
      34: iadd
      35: putfield      #21                 // Field position:I
      38: aload_0
      39: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      42: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
      45: istore_2
      46: iload_2
      47: bipush        127
      49: iand
      50: i2l
      51: lstore_3
      52: iload_2
      53: sipush        128
      56: iand
      57: ifeq          345
      60: aload_0
      61: dup
      62: getfield      #21                 // Field position:I
      65: iconst_1
      66: iadd
      67: putfield      #21                 // Field position:I
      70: aload_0
      71: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      74: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
      77: istore_2
      78: lload_3
      79: iload_2
      80: bipush        127
      82: iand
      83: bipush        7
      85: ishl
      86: i2l
      87: lor
      88: lstore_3
      89: iload_2
      90: sipush        128
      93: iand
      94: ifeq          345
      97: aload_0
      98: dup
      99: getfield      #21                 // Field position:I
     102: iconst_1
     103: iadd
     104: putfield      #21                 // Field position:I
     107: aload_0
     108: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
     111: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
     114: istore_2
     115: lload_3
     116: iload_2
     117: bipush        127
     119: iand
     120: bipush        14
     122: ishl
     123: i2l
     124: lor
     125: lstore_3
     126: iload_2
     127: sipush        128
     130: iand
     131: ifeq          345
     134: aload_0
     135: dup
     136: getfield      #21                 // Field position:I
     139: iconst_1
     140: iadd
     141: putfield      #21                 // Field position:I
     144: aload_0
     145: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
     148: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
     151: istore_2
     152: lload_3
     153: iload_2
     154: bipush        127
     156: iand
     157: bipush        21
     159: ishl
     160: i2l
     161: lor
     162: lstore_3
     163: iload_2
     164: sipush        128
     167: iand
     168: ifeq          345
     171: aload_0
     172: dup
     173: getfield      #21                 // Field position:I
     176: iconst_1
     177: iadd
     178: putfield      #21                 // Field position:I
     181: aload_0
     182: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
     185: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
     188: istore_2
     189: lload_3
     190: iload_2
     191: bipush        127
     193: iand
     194: i2l
     195: bipush        28
     197: lshl
     198: lor
     199: lstore_3
     200: iload_2
     201: sipush        128
     204: iand
     205: ifeq          345
     208: aload_0
     209: dup
     210: getfield      #21                 // Field position:I
     213: iconst_1
     214: iadd
     215: putfield      #21                 // Field position:I
     218: aload_0
     219: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
     222: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
     225: istore_2
     226: lload_3
     227: iload_2
     228: bipush        127
     230: iand
     231: i2l
     232: bipush        35
     234: lshl
     235: lor
     236: lstore_3
     237: iload_2
     238: sipush        128
     241: iand
     242: ifeq          345
     245: aload_0
     246: dup
     247: getfield      #21                 // Field position:I
     250: iconst_1
     251: iadd
     252: putfield      #21                 // Field position:I
     255: aload_0
     256: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
     259: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
     262: istore_2
     263: lload_3
     264: iload_2
     265: bipush        127
     267: iand
     268: i2l
     269: bipush        42
     271: lshl
     272: lor
     273: lstore_3
     274: iload_2
     275: sipush        128
     278: iand
     279: ifeq          345
     282: aload_0
     283: dup
     284: getfield      #21                 // Field position:I
     287: iconst_1
     288: iadd
     289: putfield      #21                 // Field position:I
     292: aload_0
     293: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
     296: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
     299: istore_2
     300: lload_3
     301: iload_2
     302: bipush        127
     304: iand
     305: i2l
     306: bipush        49
     308: lshl
     309: lor
     310: lstore_3
     311: iload_2
     312: sipush        128
     315: iand
     316: ifeq          345
     319: aload_0
     320: dup
     321: getfield      #21                 // Field position:I
     324: iconst_1
     325: iadd
     326: putfield      #21                 // Field position:I
     329: aload_0
     330: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
     333: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
     336: istore_2
     337: lload_3
     338: iload_2
     339: i2l
     340: bipush        56
     342: lshl
     343: lor
     344: lstore_3
     345: iload_1
     346: ifne          358
     349: lload_3
     350: iconst_1
     351: lushr
     352: lload_3
     353: lconst_1
     354: land
     355: lneg
     356: lxor
     357: lstore_3
     358: lload_3
     359: lreturn

  private long readLong_slow(boolean);
    Code:
       0: aload_0
       1: dup
       2: getfield      #21                 // Field position:I
       5: iconst_1
       6: iadd
       7: putfield      #21                 // Field position:I
      10: aload_0
      11: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      14: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
      17: istore_2
      18: iload_2
      19: bipush        127
      21: iand
      22: i2l
      23: lstore_3
      24: iload_2
      25: sipush        128
      28: iand
      29: ifeq          365
      32: aload_0
      33: iconst_1
      34: invokevirtual #59                 // Method require:(I)I
      37: pop
      38: aload_0
      39: dup
      40: getfield      #21                 // Field position:I
      43: iconst_1
      44: iadd
      45: putfield      #21                 // Field position:I
      48: aload_0
      49: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      52: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
      55: istore_2
      56: lload_3
      57: iload_2
      58: bipush        127
      60: iand
      61: bipush        7
      63: ishl
      64: i2l
      65: lor
      66: lstore_3
      67: iload_2
      68: sipush        128
      71: iand
      72: ifeq          365
      75: aload_0
      76: iconst_1
      77: invokevirtual #59                 // Method require:(I)I
      80: pop
      81: aload_0
      82: dup
      83: getfield      #21                 // Field position:I
      86: iconst_1
      87: iadd
      88: putfield      #21                 // Field position:I
      91: aload_0
      92: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      95: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
      98: istore_2
      99: lload_3
     100: iload_2
     101: bipush        127
     103: iand
     104: bipush        14
     106: ishl
     107: i2l
     108: lor
     109: lstore_3
     110: iload_2
     111: sipush        128
     114: iand
     115: ifeq          365
     118: aload_0
     119: iconst_1
     120: invokevirtual #59                 // Method require:(I)I
     123: pop
     124: aload_0
     125: dup
     126: getfield      #21                 // Field position:I
     129: iconst_1
     130: iadd
     131: putfield      #21                 // Field position:I
     134: aload_0
     135: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
     138: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
     141: istore_2
     142: lload_3
     143: iload_2
     144: bipush        127
     146: iand
     147: bipush        21
     149: ishl
     150: i2l
     151: lor
     152: lstore_3
     153: iload_2
     154: sipush        128
     157: iand
     158: ifeq          365
     161: aload_0
     162: iconst_1
     163: invokevirtual #59                 // Method require:(I)I
     166: pop
     167: aload_0
     168: dup
     169: getfield      #21                 // Field position:I
     172: iconst_1
     173: iadd
     174: putfield      #21                 // Field position:I
     177: aload_0
     178: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
     181: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
     184: istore_2
     185: lload_3
     186: iload_2
     187: bipush        127
     189: iand
     190: i2l
     191: bipush        28
     193: lshl
     194: lor
     195: lstore_3
     196: iload_2
     197: sipush        128
     200: iand
     201: ifeq          365
     204: aload_0
     205: iconst_1
     206: invokevirtual #59                 // Method require:(I)I
     209: pop
     210: aload_0
     211: dup
     212: getfield      #21                 // Field position:I
     215: iconst_1
     216: iadd
     217: putfield      #21                 // Field position:I
     220: aload_0
     221: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
     224: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
     227: istore_2
     228: lload_3
     229: iload_2
     230: bipush        127
     232: iand
     233: i2l
     234: bipush        35
     236: lshl
     237: lor
     238: lstore_3
     239: iload_2
     240: sipush        128
     243: iand
     244: ifeq          365
     247: aload_0
     248: iconst_1
     249: invokevirtual #59                 // Method require:(I)I
     252: pop
     253: aload_0
     254: dup
     255: getfield      #21                 // Field position:I
     258: iconst_1
     259: iadd
     260: putfield      #21                 // Field position:I
     263: aload_0
     264: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
     267: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
     270: istore_2
     271: lload_3
     272: iload_2
     273: bipush        127
     275: iand
     276: i2l
     277: bipush        42
     279: lshl
     280: lor
     281: lstore_3
     282: iload_2
     283: sipush        128
     286: iand
     287: ifeq          365
     290: aload_0
     291: iconst_1
     292: invokevirtual #59                 // Method require:(I)I
     295: pop
     296: aload_0
     297: dup
     298: getfield      #21                 // Field position:I
     301: iconst_1
     302: iadd
     303: putfield      #21                 // Field position:I
     306: aload_0
     307: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
     310: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
     313: istore_2
     314: lload_3
     315: iload_2
     316: bipush        127
     318: iand
     319: i2l
     320: bipush        49
     322: lshl
     323: lor
     324: lstore_3
     325: iload_2
     326: sipush        128
     329: iand
     330: ifeq          365
     333: aload_0
     334: iconst_1
     335: invokevirtual #59                 // Method require:(I)I
     338: pop
     339: aload_0
     340: dup
     341: getfield      #21                 // Field position:I
     344: iconst_1
     345: iadd
     346: putfield      #21                 // Field position:I
     349: aload_0
     350: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
     353: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
     356: istore_2
     357: lload_3
     358: iload_2
     359: i2l
     360: bipush        56
     362: lshl
     363: lor
     364: lstore_3
     365: iload_1
     366: ifne          378
     369: lload_3
     370: iconst_1
     371: lushr
     372: lload_3
     373: lconst_1
     374: land
     375: lneg
     376: lxor
     377: lstore_3
     378: lload_3
     379: lreturn

  public boolean readBoolean() throws com.esotericsoftware.kryo.KryoException;
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #59                 // Method require:(I)I
       5: pop
       6: aload_0
       7: dup
       8: getfield      #21                 // Field position:I
      11: iconst_1
      12: iadd
      13: putfield      #21                 // Field position:I
      16: aload_0
      17: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      20: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
      23: iconst_1
      24: if_icmpne     31
      27: iconst_1
      28: goto          32
      31: iconst_0
      32: ireturn

  public char readChar() throws com.esotericsoftware.kryo.KryoException;
    Code:
       0: aload_0
       1: iconst_2
       2: invokevirtual #59                 // Method require:(I)I
       5: pop
       6: aload_0
       7: dup
       8: getfield      #21                 // Field position:I
      11: iconst_2
      12: iadd
      13: putfield      #21                 // Field position:I
      16: aload_0
      17: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      20: invokevirtual #90                 // Method java/nio/ByteBuffer.getChar:()C
      23: ireturn

  public double readDouble() throws com.esotericsoftware.kryo.KryoException;
    Code:
       0: aload_0
       1: bipush        8
       3: invokevirtual #59                 // Method require:(I)I
       6: pop
       7: aload_0
       8: dup
       9: getfield      #21                 // Field position:I
      12: bipush        8
      14: iadd
      15: putfield      #21                 // Field position:I
      18: aload_0
      19: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      22: invokevirtual #91                 // Method java/nio/ByteBuffer.getDouble:()D
      25: dreturn

  public double readDouble(double, boolean) throws com.esotericsoftware.kryo.KryoException;
    Code:
       0: aload_0
       1: iload_3
       2: invokevirtual #92                 // Method readLong:(Z)J
       5: l2d
       6: dload_1
       7: ddiv
       8: dreturn

  public int[] readInts(int) throws com.esotericsoftware.kryo.KryoException;
    Code:
       0: aload_0
       1: getfield      #5                  // Field capacity:I
       4: aload_0
       5: getfield      #21                 // Field position:I
       8: isub
       9: iload_1
      10: iconst_4
      11: imul
      12: if_icmplt     66
      15: aload_0
      16: invokespecial #93                 // Method isNativeOrder:()Z
      19: ifeq          66
      22: iload_1
      23: newarray       int
      25: astore_2
      26: aload_0
      27: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      30: invokevirtual #94                 // Method java/nio/ByteBuffer.asIntBuffer:()Ljava/nio/IntBuffer;
      33: astore_3
      34: aload_3
      35: aload_2
      36: invokevirtual #95                 // Method java/nio/IntBuffer.get:([I)Ljava/nio/IntBuffer;
      39: pop
      40: aload_0
      41: dup
      42: getfield      #21                 // Field position:I
      45: iload_1
      46: iconst_4
      47: imul
      48: iadd
      49: putfield      #21                 // Field position:I
      52: aload_0
      53: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      56: aload_0
      57: getfield      #21                 // Field position:I
      60: invokevirtual #17                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      63: pop
      64: aload_2
      65: areturn
      66: aload_0
      67: iload_1
      68: invokespecial #96                 // Method com/esotericsoftware/kryo/io/Input.readInts:(I)[I
      71: areturn

  public long[] readLongs(int) throws com.esotericsoftware.kryo.KryoException;
    Code:
       0: aload_0
       1: getfield      #5                  // Field capacity:I
       4: aload_0
       5: getfield      #21                 // Field position:I
       8: isub
       9: iload_1
      10: bipush        8
      12: imul
      13: if_icmplt     68
      16: aload_0
      17: invokespecial #93                 // Method isNativeOrder:()Z
      20: ifeq          68
      23: iload_1
      24: newarray       long
      26: astore_2
      27: aload_0
      28: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      31: invokevirtual #97                 // Method java/nio/ByteBuffer.asLongBuffer:()Ljava/nio/LongBuffer;
      34: astore_3
      35: aload_3
      36: aload_2
      37: invokevirtual #98                 // Method java/nio/LongBuffer.get:([J)Ljava/nio/LongBuffer;
      40: pop
      41: aload_0
      42: dup
      43: getfield      #21                 // Field position:I
      46: iload_1
      47: bipush        8
      49: imul
      50: iadd
      51: putfield      #21                 // Field position:I
      54: aload_0
      55: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      58: aload_0
      59: getfield      #21                 // Field position:I
      62: invokevirtual #17                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      65: pop
      66: aload_2
      67: areturn
      68: aload_0
      69: iload_1
      70: invokespecial #99                 // Method com/esotericsoftware/kryo/io/Input.readLongs:(I)[J
      73: areturn

  public float[] readFloats(int) throws com.esotericsoftware.kryo.KryoException;
    Code:
       0: aload_0
       1: getfield      #5                  // Field capacity:I
       4: aload_0
       5: getfield      #21                 // Field position:I
       8: isub
       9: iload_1
      10: iconst_4
      11: imul
      12: if_icmplt     66
      15: aload_0
      16: invokespecial #93                 // Method isNativeOrder:()Z
      19: ifeq          66
      22: iload_1
      23: newarray       float
      25: astore_2
      26: aload_0
      27: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      30: invokevirtual #100                // Method java/nio/ByteBuffer.asFloatBuffer:()Ljava/nio/FloatBuffer;
      33: astore_3
      34: aload_3
      35: aload_2
      36: invokevirtual #101                // Method java/nio/FloatBuffer.get:([F)Ljava/nio/FloatBuffer;
      39: pop
      40: aload_0
      41: dup
      42: getfield      #21                 // Field position:I
      45: iload_1
      46: iconst_4
      47: imul
      48: iadd
      49: putfield      #21                 // Field position:I
      52: aload_0
      53: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      56: aload_0
      57: getfield      #21                 // Field position:I
      60: invokevirtual #17                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      63: pop
      64: aload_2
      65: areturn
      66: aload_0
      67: iload_1
      68: invokespecial #102                // Method com/esotericsoftware/kryo/io/Input.readFloats:(I)[F
      71: areturn

  public short[] readShorts(int) throws com.esotericsoftware.kryo.KryoException;
    Code:
       0: aload_0
       1: getfield      #5                  // Field capacity:I
       4: aload_0
       5: getfield      #21                 // Field position:I
       8: isub
       9: iload_1
      10: iconst_2
      11: imul
      12: if_icmplt     66
      15: aload_0
      16: invokespecial #93                 // Method isNativeOrder:()Z
      19: ifeq          66
      22: iload_1
      23: newarray       short
      25: astore_2
      26: aload_0
      27: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      30: invokevirtual #103                // Method java/nio/ByteBuffer.asShortBuffer:()Ljava/nio/ShortBuffer;
      33: astore_3
      34: aload_3
      35: aload_2
      36: invokevirtual #104                // Method java/nio/ShortBuffer.get:([S)Ljava/nio/ShortBuffer;
      39: pop
      40: aload_0
      41: dup
      42: getfield      #21                 // Field position:I
      45: iload_1
      46: iconst_2
      47: imul
      48: iadd
      49: putfield      #21                 // Field position:I
      52: aload_0
      53: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      56: aload_0
      57: getfield      #21                 // Field position:I
      60: invokevirtual #17                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      63: pop
      64: aload_2
      65: areturn
      66: aload_0
      67: iload_1
      68: invokespecial #105                // Method com/esotericsoftware/kryo/io/Input.readShorts:(I)[S
      71: areturn

  public char[] readChars(int) throws com.esotericsoftware.kryo.KryoException;
    Code:
       0: aload_0
       1: getfield      #5                  // Field capacity:I
       4: aload_0
       5: getfield      #21                 // Field position:I
       8: isub
       9: iload_1
      10: iconst_2
      11: imul
      12: if_icmplt     66
      15: aload_0
      16: invokespecial #93                 // Method isNativeOrder:()Z
      19: ifeq          66
      22: iload_1
      23: newarray       char
      25: astore_2
      26: aload_0
      27: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      30: invokevirtual #106                // Method java/nio/ByteBuffer.asCharBuffer:()Ljava/nio/CharBuffer;
      33: astore_3
      34: aload_3
      35: aload_2
      36: invokevirtual #107                // Method java/nio/CharBuffer.get:([C)Ljava/nio/CharBuffer;
      39: pop
      40: aload_0
      41: dup
      42: getfield      #21                 // Field position:I
      45: iload_1
      46: iconst_2
      47: imul
      48: iadd
      49: putfield      #21                 // Field position:I
      52: aload_0
      53: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      56: aload_0
      57: getfield      #21                 // Field position:I
      60: invokevirtual #17                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      63: pop
      64: aload_2
      65: areturn
      66: aload_0
      67: iload_1
      68: invokespecial #108                // Method com/esotericsoftware/kryo/io/Input.readChars:(I)[C
      71: areturn

  public double[] readDoubles(int) throws com.esotericsoftware.kryo.KryoException;
    Code:
       0: aload_0
       1: getfield      #5                  // Field capacity:I
       4: aload_0
       5: getfield      #21                 // Field position:I
       8: isub
       9: iload_1
      10: bipush        8
      12: imul
      13: if_icmplt     68
      16: aload_0
      17: invokespecial #93                 // Method isNativeOrder:()Z
      20: ifeq          68
      23: iload_1
      24: newarray       double
      26: astore_2
      27: aload_0
      28: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      31: invokevirtual #109                // Method java/nio/ByteBuffer.asDoubleBuffer:()Ljava/nio/DoubleBuffer;
      34: astore_3
      35: aload_3
      36: aload_2
      37: invokevirtual #110                // Method java/nio/DoubleBuffer.get:([D)Ljava/nio/DoubleBuffer;
      40: pop
      41: aload_0
      42: dup
      43: getfield      #21                 // Field position:I
      46: iload_1
      47: bipush        8
      49: imul
      50: iadd
      51: putfield      #21                 // Field position:I
      54: aload_0
      55: getfield      #7                  // Field niobuffer:Ljava/nio/ByteBuffer;
      58: aload_0
      59: getfield      #21                 // Field position:I
      62: invokevirtual #17                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      65: pop
      66: aload_2
      67: areturn
      68: aload_0
      69: iload_1
      70: invokespecial #111                // Method com/esotericsoftware/kryo/io/Input.readDoubles:(I)[D
      73: areturn

  private boolean isNativeOrder();
    Code:
       0: aload_0
       1: getfield      #4                  // Field byteOrder:Ljava/nio/ByteOrder;
       4: getstatic     #112                // Field nativeOrder:Ljava/nio/ByteOrder;
       7: if_acmpne     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public boolean getVarIntsEnabled();
    Code:
       0: aload_0
       1: getfield      #2                  // Field varIntsEnabled:Z
       4: ireturn

  public void setVarIntsEnabled(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field varIntsEnabled:Z
       5: return

  static {};
    Code:
       0: invokestatic  #113                // Method java/nio/ByteOrder.nativeOrder:()Ljava/nio/ByteOrder;
       3: putstatic     #112                // Field nativeOrder:Ljava/nio/ByteOrder;
       6: return
}
