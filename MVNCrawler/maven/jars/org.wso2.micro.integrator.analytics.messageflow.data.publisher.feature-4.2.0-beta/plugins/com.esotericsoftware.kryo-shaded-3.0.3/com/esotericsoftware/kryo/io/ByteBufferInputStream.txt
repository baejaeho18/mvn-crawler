Compiled from "ByteBufferInputStream.java"
public class com.esotericsoftware.kryo.io.ByteBufferInputStream extends java.io.InputStream {
  private java.nio.ByteBuffer byteBuffer;

  public com.esotericsoftware.kryo.io.ByteBufferInputStream();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/io/InputStream."<init>":()V
       4: return

  public com.esotericsoftware.kryo.io.ByteBufferInputStream(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #2                  // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;
       5: invokespecial #3                  // Method "<init>":(Ljava/nio/ByteBuffer;)V
       8: aload_0
       9: getfield      #4                  // Field byteBuffer:Ljava/nio/ByteBuffer;
      12: invokevirtual #5                  // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;
      15: pop
      16: return

  public com.esotericsoftware.kryo.io.ByteBufferInputStream(java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/io/InputStream."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #4                  // Field byteBuffer:Ljava/nio/ByteBuffer;
       9: return

  public java.nio.ByteBuffer getByteBuffer();
    Code:
       0: aload_0
       1: getfield      #4                  // Field byteBuffer:Ljava/nio/ByteBuffer;
       4: areturn

  public void setByteBuffer(java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field byteBuffer:Ljava/nio/ByteBuffer;
       5: return

  public int read() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field byteBuffer:Ljava/nio/ByteBuffer;
       4: invokevirtual #6                  // Method java/nio/ByteBuffer.hasRemaining:()Z
       7: ifne          12
      10: iconst_m1
      11: ireturn
      12: aload_0
      13: getfield      #4                  // Field byteBuffer:Ljava/nio/ByteBuffer;
      16: invokevirtual #7                  // Method java/nio/ByteBuffer.get:()B
      19: ireturn

  public int read(byte[], int, int) throws java.io.IOException;
    Code:
       0: iload_3
       1: ifne          6
       4: iconst_0
       5: ireturn
       6: aload_0
       7: getfield      #4                  // Field byteBuffer:Ljava/nio/ByteBuffer;
      10: invokevirtual #8                  // Method java/nio/ByteBuffer.remaining:()I
      13: iload_3
      14: invokestatic  #9                  // Method java/lang/Math.min:(II)I
      17: istore        4
      19: iload         4
      21: ifne          26
      24: iconst_m1
      25: ireturn
      26: aload_0
      27: getfield      #4                  // Field byteBuffer:Ljava/nio/ByteBuffer;
      30: aload_1
      31: iload_2
      32: iload         4
      34: invokevirtual #10                 // Method java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;
      37: pop
      38: iload         4
      40: ireturn

  public int available() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field byteBuffer:Ljava/nio/ByteBuffer;
       4: invokevirtual #8                  // Method java/nio/ByteBuffer.remaining:()I
       7: ireturn
}
