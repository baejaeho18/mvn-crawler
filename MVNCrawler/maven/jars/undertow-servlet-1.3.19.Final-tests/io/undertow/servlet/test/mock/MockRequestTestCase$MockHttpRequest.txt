Compiled from "MockRequestTestCase.java"
final class io.undertow.servlet.test.mock.MockRequestTestCase$MockHttpRequest implements javax.servlet.http.HttpServletRequest {
  private io.undertow.servlet.test.mock.MockRequestTestCase$MockHttpRequest();
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: return

  public java.lang.String getAuthType();
    Code:
       0: aconst_null
       1: areturn

  public javax.servlet.http.Cookie[] getCookies();
    Code:
       0: iconst_0
       1: anewarray     #3                  // class javax/servlet/http/Cookie
       4: areturn

  public long getDateHeader(java.lang.String);
    Code:
       0: lconst_0
       1: lreturn

  public java.lang.String getHeader(java.lang.String);
    Code:
       0: aconst_null
       1: areturn

  public java.util.Enumeration<java.lang.String> getHeaders(java.lang.String);
    Code:
       0: aconst_null
       1: areturn

  public java.util.Enumeration<java.lang.String> getHeaderNames();
    Code:
       0: aconst_null
       1: areturn

  public int getIntHeader(java.lang.String);
    Code:
       0: iconst_0
       1: ireturn

  public java.lang.String getMethod();
    Code:
       0: ldc           #4                  // String GET
       2: areturn

  public java.lang.String getPathInfo();
    Code:
       0: aconst_null
       1: areturn

  public java.lang.String getPathTranslated();
    Code:
       0: aconst_null
       1: areturn

  public java.lang.String getContextPath();
    Code:
       0: aconst_null
       1: areturn

  public java.lang.String getQueryString();
    Code:
       0: aconst_null
       1: areturn

  public java.lang.String getRemoteUser();
    Code:
       0: aconst_null
       1: areturn

  public boolean isUserInRole(java.lang.String);
    Code:
       0: iconst_0
       1: ireturn

  public java.security.Principal getUserPrincipal();
    Code:
       0: aconst_null
       1: areturn

  public java.lang.String getRequestedSessionId();
    Code:
       0: aconst_null
       1: areturn

  public java.lang.String getRequestURI();
    Code:
       0: aconst_null
       1: areturn

  public java.lang.StringBuffer getRequestURL();
    Code:
       0: aconst_null
       1: areturn

  public java.lang.String getServletPath();
    Code:
       0: ldc           #5                  // String /aa
       2: areturn

  public javax.servlet.http.HttpSession getSession(boolean);
    Code:
       0: aconst_null
       1: areturn

  public javax.servlet.http.HttpSession getSession();
    Code:
       0: aconst_null
       1: areturn

  public java.lang.String changeSessionId();
    Code:
       0: aconst_null
       1: areturn

  public boolean isRequestedSessionIdValid();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isRequestedSessionIdFromCookie();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isRequestedSessionIdFromURL();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isRequestedSessionIdFromUrl();
    Code:
       0: iconst_0
       1: ireturn

  public boolean authenticate(javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException;
    Code:
       0: iconst_0
       1: ireturn

  public void login(java.lang.String, java.lang.String) throws javax.servlet.ServletException;
    Code:
       0: return

  public void logout() throws javax.servlet.ServletException;
    Code:
       0: return

  public java.util.Collection<javax.servlet.http.Part> getParts() throws java.io.IOException, javax.servlet.ServletException;
    Code:
       0: aconst_null
       1: areturn

  public javax.servlet.http.Part getPart(java.lang.String) throws java.io.IOException, javax.servlet.ServletException;
    Code:
       0: aconst_null
       1: areturn

  public <T extends javax.servlet.http.HttpUpgradeHandler> T upgrade(java.lang.Class<T>) throws java.io.IOException, javax.servlet.ServletException;
    Code:
       0: aconst_null
       1: areturn

  public java.lang.Object getAttribute(java.lang.String);
    Code:
       0: aconst_null
       1: areturn

  public java.util.Enumeration<java.lang.String> getAttributeNames();
    Code:
       0: aconst_null
       1: areturn

  public java.lang.String getCharacterEncoding();
    Code:
       0: aconst_null
       1: areturn

  public void setCharacterEncoding(java.lang.String) throws java.io.UnsupportedEncodingException;
    Code:
       0: return

  public int getContentLength();
    Code:
       0: iconst_0
       1: ireturn

  public long getContentLengthLong();
    Code:
       0: lconst_0
       1: lreturn

  public java.lang.String getContentType();
    Code:
       0: aconst_null
       1: areturn

  public javax.servlet.ServletInputStream getInputStream() throws java.io.IOException;
    Code:
       0: aconst_null
       1: areturn

  public java.lang.String getParameter(java.lang.String);
    Code:
       0: aconst_null
       1: areturn

  public java.util.Enumeration<java.lang.String> getParameterNames();
    Code:
       0: aconst_null
       1: areturn

  public java.lang.String[] getParameterValues(java.lang.String);
    Code:
       0: iconst_0
       1: anewarray     #6                  // class java/lang/String
       4: areturn

  public java.util.Map<java.lang.String, java.lang.String[]> getParameterMap();
    Code:
       0: aconst_null
       1: areturn

  public java.lang.String getProtocol();
    Code:
       0: aconst_null
       1: areturn

  public java.lang.String getScheme();
    Code:
       0: ldc           #7                  // String http
       2: areturn

  public java.lang.String getServerName();
    Code:
       0: aconst_null
       1: areturn

  public int getServerPort();
    Code:
       0: iconst_0
       1: ireturn

  public java.io.BufferedReader getReader() throws java.io.IOException;
    Code:
       0: aconst_null
       1: areturn

  public java.lang.String getRemoteAddr();
    Code:
       0: aconst_null
       1: areturn

  public java.lang.String getRemoteHost();
    Code:
       0: aconst_null
       1: areturn

  public void setAttribute(java.lang.String, java.lang.Object);
    Code:
       0: return

  public void removeAttribute(java.lang.String);
    Code:
       0: return

  public java.util.Locale getLocale();
    Code:
       0: aconst_null
       1: areturn

  public java.util.Enumeration<java.util.Locale> getLocales();
    Code:
       0: aconst_null
       1: areturn

  public boolean isSecure();
    Code:
       0: iconst_0
       1: ireturn

  public javax.servlet.RequestDispatcher getRequestDispatcher(java.lang.String);
    Code:
       0: aconst_null
       1: areturn

  public java.lang.String getRealPath(java.lang.String);
    Code:
       0: aconst_null
       1: areturn

  public int getRemotePort();
    Code:
       0: iconst_0
       1: ireturn

  public java.lang.String getLocalName();
    Code:
       0: aconst_null
       1: areturn

  public java.lang.String getLocalAddr();
    Code:
       0: aconst_null
       1: areturn

  public int getLocalPort();
    Code:
       0: iconst_0
       1: ireturn

  public javax.servlet.ServletContext getServletContext();
    Code:
       0: aconst_null
       1: areturn

  public javax.servlet.AsyncContext startAsync() throws java.lang.IllegalStateException;
    Code:
       0: aconst_null
       1: areturn

  public javax.servlet.AsyncContext startAsync(javax.servlet.ServletRequest, javax.servlet.ServletResponse) throws java.lang.IllegalStateException;
    Code:
       0: aconst_null
       1: areturn

  public boolean isAsyncStarted();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isAsyncSupported();
    Code:
       0: iconst_0
       1: ireturn

  public javax.servlet.AsyncContext getAsyncContext();
    Code:
       0: aconst_null
       1: areturn

  public javax.servlet.DispatcherType getDispatcherType();
    Code:
       0: aconst_null
       1: areturn

  io.undertow.servlet.test.mock.MockRequestTestCase$MockHttpRequest(io.undertow.servlet.test.mock.MockRequestTestCase$1);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method "<init>":()V
       4: return
}
