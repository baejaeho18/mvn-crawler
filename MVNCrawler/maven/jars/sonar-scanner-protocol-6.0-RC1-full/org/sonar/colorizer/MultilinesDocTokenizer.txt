Compiled from "MultilinesDocTokenizer.java"
public class org.sonar.colorizer.MultilinesDocTokenizer extends org.sonar.colorizer.Tokenizer {
  private static final java.lang.String COMMENT_STARTED_ON_PREVIOUS_LINE;

  private static final java.lang.String COMMENT_TOKENIZER;

  private final char[] startToken;

  private final char[] endToken;

  private final java.lang.String tagBefore;

  private final java.lang.String tagAfter;

  public org.sonar.colorizer.MultilinesDocTokenizer(java.lang.String, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: ldc           #24                 // String */
       4: aload_2
       5: aload_3
       6: invokespecial #27                 // Method "<init>":(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
       9: return

  public org.sonar.colorizer.MultilinesDocTokenizer(java.lang.String, java.lang.String, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #32                 // Method org/sonar/colorizer/Tokenizer."<init>":()V
       4: aload_0
       5: aload_3
       6: putfield      #34                 // Field tagBefore:Ljava/lang/String;
       9: aload_0
      10: aload         4
      12: putfield      #36                 // Field tagAfter:Ljava/lang/String;
      15: aload_0
      16: aload_1
      17: invokevirtual #42                 // Method java/lang/String.toCharArray:()[C
      20: putfield      #44                 // Field startToken:[C
      23: aload_0
      24: aload_2
      25: invokevirtual #42                 // Method java/lang/String.toCharArray:()[C
      28: putfield      #46                 // Field endToken:[C
      31: return

  public boolean hasNextToken(org.sonar.channel.CodeReader, org.sonar.colorizer.HtmlCodeBuilder);
    Code:
       0: aload_1
       1: invokevirtual #54                 // Method org/sonar/channel/CodeReader.peek:()I
       4: bipush        10
       6: if_icmpeq     62
       9: aload_1
      10: invokevirtual #54                 // Method org/sonar/channel/CodeReader.peek:()I
      13: bipush        13
      15: if_icmpeq     62
      18: aload_0
      19: aload_2
      20: invokespecial #58                 // Method isCommentStartedOnPreviousLine:(Lorg/sonar/colorizer/HtmlCodeBuilder;)Z
      23: ifne          58
      26: aload_1
      27: invokevirtual #54                 // Method org/sonar/channel/CodeReader.peek:()I
      30: aload_0
      31: getfield      #44                 // Field startToken:[C
      34: iconst_0
      35: caload
      36: if_icmpne     62
      39: aload_1
      40: aload_0
      41: getfield      #44                 // Field startToken:[C
      44: arraylength
      45: invokevirtual #61                 // Method org/sonar/channel/CodeReader.peek:(I)[C
      48: aload_0
      49: getfield      #44                 // Field startToken:[C
      52: invokestatic  #67                 // Method java/util/Arrays.equals:([C[C)Z
      55: ifeq          62
      58: iconst_1
      59: goto          63
      62: iconst_0
      63: ireturn

  public boolean consume(org.sonar.channel.CodeReader, org.sonar.colorizer.HtmlCodeBuilder);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #74                 // Method hasNextToken:(Lorg/sonar/channel/CodeReader;Lorg/sonar/colorizer/HtmlCodeBuilder;)Z
       6: ifeq          42
       9: aload_2
      10: aload_0
      11: getfield      #34                 // Field tagBefore:Ljava/lang/String;
      14: invokevirtual #80                 // Method org/sonar/colorizer/HtmlCodeBuilder.appendWithoutTransforming:(Ljava/lang/String;)V
      17: aload_1
      18: new           #8                  // class org/sonar/colorizer/MultilinesDocTokenizer$MultilineEndTokenMatcher
      21: dup
      22: aload_0
      23: aload_1
      24: aload_2
      25: invokespecial #83                 // Method org/sonar/colorizer/MultilinesDocTokenizer$MultilineEndTokenMatcher."<init>":(Lorg/sonar/colorizer/MultilinesDocTokenizer;Lorg/sonar/channel/CodeReader;Lorg/sonar/colorizer/HtmlCodeBuilder;)V
      28: aload_2
      29: invokevirtual #87                 // Method org/sonar/channel/CodeReader.popTo:(Lorg/sonar/channel/EndMatcher;Ljava/lang/Appendable;)V
      32: aload_2
      33: aload_0
      34: getfield      #36                 // Field tagAfter:Ljava/lang/String;
      37: invokevirtual #80                 // Method org/sonar/colorizer/HtmlCodeBuilder.appendWithoutTransforming:(Ljava/lang/String;)V
      40: iconst_1
      41: ireturn
      42: iconst_0
      43: ireturn

  private boolean isCommentStartedOnPreviousLine(org.sonar.colorizer.HtmlCodeBuilder);
    Code:
       0: aload_1
       1: ldc           #12                 // String COMMENT_STARTED_ON_PREVIOUS_LINE
       3: getstatic     #93                 // Field java/lang/Boolean.FALSE:Ljava/lang/Boolean;
       6: invokevirtual #97                 // Method org/sonar/colorizer/HtmlCodeBuilder.getVariable:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       9: checkcast     #89                 // class java/lang/Boolean
      12: astore_2
      13: aload_2
      14: getstatic     #100                // Field java/lang/Boolean.TRUE:Ljava/lang/Boolean;
      17: if_acmpne     37
      20: aload_0
      21: aload_1
      22: ldc           #15                 // String MULTILINE_COMMENT_TOKENIZER
      24: invokevirtual #103                // Method org/sonar/colorizer/HtmlCodeBuilder.getVariable:(Ljava/lang/Object;)Ljava/lang/Object;
      27: invokevirtual #108                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      30: ifeq          37
      33: iconst_1
      34: goto          38
      37: iconst_0
      38: ireturn

  private void setCommentStartedOnPreviousLine(org.sonar.colorizer.HtmlCodeBuilder, java.lang.Boolean);
    Code:
       0: aload_1
       1: ldc           #12                 // String COMMENT_STARTED_ON_PREVIOUS_LINE
       3: aload_2
       4: invokevirtual #115                // Method org/sonar/colorizer/HtmlCodeBuilder.setVariable:(Ljava/lang/Object;Ljava/lang/Object;)V
       7: aload_1
       8: ldc           #15                 // String MULTILINE_COMMENT_TOKENIZER
      10: aload_2
      11: invokevirtual #119                // Method java/lang/Boolean.booleanValue:()Z
      14: ifeq          21
      17: aload_0
      18: goto          22
      21: aconst_null
      22: invokevirtual #115                // Method org/sonar/colorizer/HtmlCodeBuilder.setVariable:(Ljava/lang/Object;Ljava/lang/Object;)V
      25: return

  public boolean consume(org.sonar.channel.CodeReader, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: checkcast     #76                 // class org/sonar/colorizer/HtmlCodeBuilder
       6: invokevirtual #122                // Method consume:(Lorg/sonar/channel/CodeReader;Lorg/sonar/colorizer/HtmlCodeBuilder;)Z
       9: ireturn

  static char[] access$000(org.sonar.colorizer.MultilinesDocTokenizer);
    Code:
       0: aload_0
       1: getfield      #46                 // Field endToken:[C
       4: areturn

  static char[] access$100(org.sonar.colorizer.MultilinesDocTokenizer);
    Code:
       0: aload_0
       1: getfield      #44                 // Field startToken:[C
       4: areturn

  static boolean access$200(org.sonar.colorizer.MultilinesDocTokenizer, org.sonar.colorizer.HtmlCodeBuilder);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #58                 // Method isCommentStartedOnPreviousLine:(Lorg/sonar/colorizer/HtmlCodeBuilder;)Z
       5: ireturn

  static void access$300(org.sonar.colorizer.MultilinesDocTokenizer, org.sonar.colorizer.HtmlCodeBuilder, java.lang.Boolean);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #133                // Method setCommentStartedOnPreviousLine:(Lorg/sonar/colorizer/HtmlCodeBuilder;Ljava/lang/Boolean;)V
       6: return
}
