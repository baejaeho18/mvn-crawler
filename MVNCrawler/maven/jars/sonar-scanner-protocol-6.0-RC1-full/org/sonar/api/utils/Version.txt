Compiled from "Version.java"
public class org.sonar.api.utils.Version implements java.lang.Comparable<org.sonar.api.utils.Version> {
  private static final java.lang.String QUALIFIER_SEPARATOR;

  private static final char SEQUENCE_SEPARATOR;

  private static final org.sonar.api.internal.google.common.base.Splitter SEQUENCE_SPLITTER;

  private final int major;

  private final int minor;

  private final int patch;

  private final java.lang.String qualifier;

  private org.sonar.api.utils.Version(int, int, int, java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #28                 // Method java/lang/Object."<init>":()V
       4: aload         4
       6: ldc           #30                 // String Version qualifier must not be null
       8: invokestatic  #36                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      11: pop
      12: aload_0
      13: iload_1
      14: putfield      #38                 // Field major:I
      17: aload_0
      18: iload_2
      19: putfield      #40                 // Field minor:I
      22: aload_0
      23: iload_3
      24: putfield      #42                 // Field patch:I
      27: aload_0
      28: aload         4
      30: putfield      #44                 // Field qualifier:Ljava/lang/String;
      33: return

  public int major();
    Code:
       0: aload_0
       1: getfield      #38                 // Field major:I
       4: ireturn

  public int minor();
    Code:
       0: aload_0
       1: getfield      #40                 // Field minor:I
       4: ireturn

  public int patch();
    Code:
       0: aload_0
       1: getfield      #42                 // Field patch:I
       4: ireturn

  public java.lang.String qualifier();
    Code:
       0: aload_0
       1: getfield      #44                 // Field qualifier:Ljava/lang/String;
       4: areturn

  public static org.sonar.api.utils.Version parse(java.lang.String);
    Code:
       0: aload_0
       1: invokestatic  #56                 // Method org/sonar/api/internal/apachecommons/lang/StringUtils.trimToEmpty:(Ljava/lang/String;)Ljava/lang/String;
       4: astore_1
       5: aload_1
       6: ldc           #13                 // String -
       8: invokestatic  #60                 // Method org/sonar/api/internal/apachecommons/lang/StringUtils.substringAfter:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      11: astore_2
      12: aload_2
      13: invokevirtual #66                 // Method java/lang/String.isEmpty:()Z
      16: ifne          26
      19: aload_1
      20: ldc           #13                 // String -
      22: invokestatic  #69                 // Method org/sonar/api/internal/apachecommons/lang/StringUtils.substringBefore:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      25: astore_1
      26: getstatic     #71                 // Field SEQUENCE_SPLITTER:Lorg/sonar/api/internal/google/common/base/Splitter;
      29: aload_1
      30: invokevirtual #77                 // Method org/sonar/api/internal/google/common/base/Splitter.splitToList:(Ljava/lang/CharSequence;)Ljava/util/List;
      33: astore_3
      34: iconst_0
      35: istore        4
      37: iconst_0
      38: istore        5
      40: iconst_0
      41: istore        6
      43: aload_3
      44: invokeinterface #82,  1           // InterfaceMethod java/util/List.size:()I
      49: istore        7
      51: iload         7
      53: ifle          129
      56: aload_3
      57: iconst_0
      58: invokeinterface #86,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      63: checkcast     #62                 // class java/lang/String
      66: invokestatic  #90                 // Method parseSequence:(Ljava/lang/String;)I
      69: istore        4
      71: iload         7
      73: iconst_1
      74: if_icmple     129
      77: aload_3
      78: iconst_1
      79: invokeinterface #86,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      84: checkcast     #62                 // class java/lang/String
      87: invokestatic  #90                 // Method parseSequence:(Ljava/lang/String;)I
      90: istore        5
      92: iload         7
      94: iconst_2
      95: if_icmple     129
      98: aload_3
      99: iconst_2
     100: invokeinterface #86,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
     105: checkcast     #62                 // class java/lang/String
     108: invokestatic  #90                 // Method parseSequence:(Ljava/lang/String;)I
     111: istore        6
     113: iload         7
     115: iconst_3
     116: if_icmple     129
     119: new           #92                 // class java/lang/IllegalArgumentException
     122: dup
     123: ldc           #94                 // String Only 3 sequences are accepted
     125: invokespecial #97                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     128: athrow
     129: new           #2                  // class org/sonar/api/utils/Version
     132: dup
     133: iload         4
     135: iload         5
     137: iload         6
     139: aload_2
     140: invokespecial #99                 // Method "<init>":(IIILjava/lang/String;)V
     143: areturn

  public static org.sonar.api.utils.Version create(int, int);
    Code:
       0: new           #2                  // class org/sonar/api/utils/Version
       3: dup
       4: iload_0
       5: iload_1
       6: iconst_0
       7: ldc           #108                // String
       9: invokespecial #99                 // Method "<init>":(IIILjava/lang/String;)V
      12: areturn

  public static org.sonar.api.utils.Version create(int, int, int);
    Code:
       0: new           #2                  // class org/sonar/api/utils/Version
       3: dup
       4: iload_0
       5: iload_1
       6: iload_2
       7: ldc           #108                // String
       9: invokespecial #99                 // Method "<init>":(IIILjava/lang/String;)V
      12: areturn

  public static org.sonar.api.utils.Version create(int, int, int, java.lang.String);
    Code:
       0: new           #2                  // class org/sonar/api/utils/Version
       3: dup
       4: iload_0
       5: iload_1
       6: iload_2
       7: aload_3
       8: invokespecial #99                 // Method "<init>":(IIILjava/lang/String;)V
      11: areturn

  private static int parseSequence(java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #66                 // Method java/lang/String.isEmpty:()Z
       4: ifeq          9
       7: iconst_0
       8: ireturn
       9: aload_0
      10: invokestatic  #115                // Method java/lang/Integer.parseInt:(Ljava/lang/String;)I
      13: ireturn

  public boolean isGreaterThanOrEqual(org.sonar.api.utils.Version);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #122                // Method compareTo:(Lorg/sonar/api/utils/Version;)I
       5: iflt          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: instanceof    #2                  // class org/sonar/api/utils/Version
      11: ifne          16
      14: iconst_0
      15: ireturn
      16: aload_1
      17: checkcast     #2                  // class org/sonar/api/utils/Version
      20: astore_2
      21: aload_0
      22: getfield      #38                 // Field major:I
      25: aload_2
      26: getfield      #38                 // Field major:I
      29: if_icmpne     58
      32: aload_0
      33: getfield      #40                 // Field minor:I
      36: aload_2
      37: getfield      #40                 // Field minor:I
      40: if_icmpne     58
      43: aload_0
      44: getfield      #42                 // Field patch:I
      47: aload_2
      48: getfield      #42                 // Field patch:I
      51: if_icmpne     58
      54: iconst_1
      55: goto          59
      58: iconst_0
      59: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #38                 // Field major:I
       4: istore_1
       5: bipush        31
       7: iload_1
       8: imul
       9: aload_0
      10: getfield      #40                 // Field minor:I
      13: iadd
      14: istore_1
      15: bipush        31
      17: iload_1
      18: imul
      19: aload_0
      20: getfield      #42                 // Field patch:I
      23: iadd
      24: istore_1
      25: iload_1
      26: ireturn

  public int compareTo(org.sonar.api.utils.Version);
    Code:
       0: aload_0
       1: getfield      #38                 // Field major:I
       4: aload_1
       5: getfield      #38                 // Field major:I
       8: isub
       9: istore_2
      10: iload_2
      11: ifne          38
      14: aload_0
      15: getfield      #40                 // Field minor:I
      18: aload_1
      19: getfield      #40                 // Field minor:I
      22: isub
      23: istore_2
      24: iload_2
      25: ifne          38
      28: aload_0
      29: getfield      #42                 // Field patch:I
      32: aload_1
      33: getfield      #42                 // Field patch:I
      36: isub
      37: istore_2
      38: iload_2
      39: ireturn

  public java.lang.String toString();
    Code:
       0: new           #134                // class java/lang/StringBuilder
       3: dup
       4: invokespecial #135                // Method java/lang/StringBuilder."<init>":()V
       7: astore_1
       8: aload_1
       9: aload_0
      10: getfield      #38                 // Field major:I
      13: invokevirtual #139                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      16: bipush        46
      18: invokevirtual #142                // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      21: aload_0
      22: getfield      #40                 // Field minor:I
      25: invokevirtual #139                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      28: pop
      29: aload_0
      30: getfield      #42                 // Field patch:I
      33: ifle          50
      36: aload_1
      37: bipush        46
      39: invokevirtual #142                // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      42: aload_0
      43: getfield      #42                 // Field patch:I
      46: invokevirtual #139                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      49: pop
      50: aload_0
      51: getfield      #44                 // Field qualifier:Ljava/lang/String;
      54: invokevirtual #66                 // Method java/lang/String.isEmpty:()Z
      57: ifne          74
      60: aload_1
      61: ldc           #13                 // String -
      63: invokevirtual #145                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      66: aload_0
      67: getfield      #44                 // Field qualifier:Ljava/lang/String;
      70: invokevirtual #145                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      73: pop
      74: aload_1
      75: invokevirtual #147                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      78: areturn

  public int compareTo(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #2                  // class org/sonar/api/utils/Version
       5: invokevirtual #122                // Method compareTo:(Lorg/sonar/api/utils/Version;)I
       8: ireturn

  static {};
    Code:
       0: bipush        46
       2: invokestatic  #155                // Method org/sonar/api/internal/google/common/base/Splitter.on:(C)Lorg/sonar/api/internal/google/common/base/Splitter;
       5: putstatic     #71                 // Field SEQUENCE_SPLITTER:Lorg/sonar/api/internal/google/common/base/Splitter;
       8: return
}
