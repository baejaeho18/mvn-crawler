Compiled from "ProxyOutputStream.java"
public class org.sonar.api.internal.apachecommons.io.output.ProxyOutputStream extends java.io.FilterOutputStream {
  public org.sonar.api.internal.apachecommons.io.output.ProxyOutputStream(java.io.OutputStream);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #9                  // Method java/io/FilterOutputStream."<init>":(Ljava/io/OutputStream;)V
       5: return

  public void write(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #20                 // Method beforeWrite:(I)V
       5: aload_0
       6: getfield      #23                 // Field out:Ljava/io/OutputStream;
       9: iload_1
      10: invokevirtual #27                 // Method java/io/OutputStream.write:(I)V
      13: aload_0
      14: iconst_1
      15: invokevirtual #30                 // Method afterWrite:(I)V
      18: goto          27
      21: astore_2
      22: aload_0
      23: aload_2
      24: invokevirtual #34                 // Method handleIOException:(Ljava/io/IOException;)V
      27: return
    Exception table:
       from    to  target type
           0    18    21   Class java/io/IOException

  public void write(byte[]) throws java.io.IOException;
    Code:
       0: aload_1
       1: ifnull        9
       4: aload_1
       5: arraylength
       6: goto          10
       9: iconst_0
      10: istore_2
      11: aload_0
      12: iload_2
      13: invokevirtual #20                 // Method beforeWrite:(I)V
      16: aload_0
      17: getfield      #23                 // Field out:Ljava/io/OutputStream;
      20: aload_1
      21: invokevirtual #41                 // Method java/io/OutputStream.write:([B)V
      24: aload_0
      25: iload_2
      26: invokevirtual #30                 // Method afterWrite:(I)V
      29: goto          38
      32: astore_2
      33: aload_0
      34: aload_2
      35: invokevirtual #34                 // Method handleIOException:(Ljava/io/IOException;)V
      38: return
    Exception table:
       from    to  target type
           0    29    32   Class java/io/IOException

  public void write(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_3
       2: invokevirtual #20                 // Method beforeWrite:(I)V
       5: aload_0
       6: getfield      #23                 // Field out:Ljava/io/OutputStream;
       9: aload_1
      10: iload_2
      11: iload_3
      12: invokevirtual #47                 // Method java/io/OutputStream.write:([BII)V
      15: aload_0
      16: iload_3
      17: invokevirtual #30                 // Method afterWrite:(I)V
      20: goto          31
      23: astore        4
      25: aload_0
      26: aload         4
      28: invokevirtual #34                 // Method handleIOException:(Ljava/io/IOException;)V
      31: return
    Exception table:
       from    to  target type
           0    20    23   Class java/io/IOException

  public void flush() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #23                 // Field out:Ljava/io/OutputStream;
       4: invokevirtual #53                 // Method java/io/OutputStream.flush:()V
       7: goto          16
      10: astore_1
      11: aload_0
      12: aload_1
      13: invokevirtual #34                 // Method handleIOException:(Ljava/io/IOException;)V
      16: return
    Exception table:
       from    to  target type
           0     7    10   Class java/io/IOException

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #23                 // Field out:Ljava/io/OutputStream;
       4: invokevirtual #56                 // Method java/io/OutputStream.close:()V
       7: goto          16
      10: astore_1
      11: aload_0
      12: aload_1
      13: invokevirtual #34                 // Method handleIOException:(Ljava/io/IOException;)V
      16: return
    Exception table:
       from    to  target type
           0     7    10   Class java/io/IOException

  protected void beforeWrite(int) throws java.io.IOException;
    Code:
       0: return

  protected void afterWrite(int) throws java.io.IOException;
    Code:
       0: return

  protected void handleIOException(java.io.IOException) throws java.io.IOException;
    Code:
       0: aload_1
       1: athrow
}
