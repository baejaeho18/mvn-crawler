Compiled from "DoubleRange.java"
public final class org.sonar.api.internal.apachecommons.lang.math.DoubleRange extends org.sonar.api.internal.apachecommons.lang.math.Range implements java.io.Serializable {
  private static final long serialVersionUID;

  private final double min;

  private final double max;

  private transient java.lang.Double minObject;

  private transient java.lang.Double maxObject;

  private transient int hashCode;

  private transient java.lang.String toString;

  public org.sonar.api.internal.apachecommons.lang.math.DoubleRange(double);
    Code:
       0: aload_0
       1: invokespecial #26                 // Method org/sonar/api/internal/apachecommons/lang/math/Range."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #28                 // Field minObject:Ljava/lang/Double;
       9: aload_0
      10: aconst_null
      11: putfield      #30                 // Field maxObject:Ljava/lang/Double;
      14: aload_0
      15: iconst_0
      16: putfield      #32                 // Field hashCode:I
      19: aload_0
      20: aconst_null
      21: putfield      #34                 // Field toString:Ljava/lang/String;
      24: dload_1
      25: invokestatic  #40                 // Method java/lang/Double.isNaN:(D)Z
      28: ifeq          41
      31: new           #42                 // class java/lang/IllegalArgumentException
      34: dup
      35: ldc           #44                 // String The number must not be NaN
      37: invokespecial #47                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      40: athrow
      41: aload_0
      42: dload_1
      43: putfield      #49                 // Field min:D
      46: aload_0
      47: dload_1
      48: putfield      #51                 // Field max:D
      51: return

  public org.sonar.api.internal.apachecommons.lang.math.DoubleRange(java.lang.Number);
    Code:
       0: aload_0
       1: invokespecial #26                 // Method org/sonar/api/internal/apachecommons/lang/math/Range."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #28                 // Field minObject:Ljava/lang/Double;
       9: aload_0
      10: aconst_null
      11: putfield      #30                 // Field maxObject:Ljava/lang/Double;
      14: aload_0
      15: iconst_0
      16: putfield      #32                 // Field hashCode:I
      19: aload_0
      20: aconst_null
      21: putfield      #34                 // Field toString:Ljava/lang/String;
      24: aload_1
      25: ifnonnull     38
      28: new           #42                 // class java/lang/IllegalArgumentException
      31: dup
      32: ldc           #57                 // String The number must not be null
      34: invokespecial #47                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      37: athrow
      38: aload_0
      39: aload_1
      40: invokevirtual #63                 // Method java/lang/Number.doubleValue:()D
      43: putfield      #49                 // Field min:D
      46: aload_0
      47: aload_1
      48: invokevirtual #63                 // Method java/lang/Number.doubleValue:()D
      51: putfield      #51                 // Field max:D
      54: aload_0
      55: getfield      #49                 // Field min:D
      58: invokestatic  #40                 // Method java/lang/Double.isNaN:(D)Z
      61: ifne          74
      64: aload_0
      65: getfield      #51                 // Field max:D
      68: invokestatic  #40                 // Method java/lang/Double.isNaN:(D)Z
      71: ifeq          84
      74: new           #42                 // class java/lang/IllegalArgumentException
      77: dup
      78: ldc           #44                 // String The number must not be NaN
      80: invokespecial #47                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      83: athrow
      84: aload_1
      85: instanceof    #36                 // class java/lang/Double
      88: ifeq          107
      91: aload_0
      92: aload_1
      93: checkcast     #36                 // class java/lang/Double
      96: putfield      #28                 // Field minObject:Ljava/lang/Double;
      99: aload_0
     100: aload_1
     101: checkcast     #36                 // class java/lang/Double
     104: putfield      #30                 // Field maxObject:Ljava/lang/Double;
     107: return

  public org.sonar.api.internal.apachecommons.lang.math.DoubleRange(double, double);
    Code:
       0: aload_0
       1: invokespecial #26                 // Method org/sonar/api/internal/apachecommons/lang/math/Range."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #28                 // Field minObject:Ljava/lang/Double;
       9: aload_0
      10: aconst_null
      11: putfield      #30                 // Field maxObject:Ljava/lang/Double;
      14: aload_0
      15: iconst_0
      16: putfield      #32                 // Field hashCode:I
      19: aload_0
      20: aconst_null
      21: putfield      #34                 // Field toString:Ljava/lang/String;
      24: dload_1
      25: invokestatic  #40                 // Method java/lang/Double.isNaN:(D)Z
      28: ifne          38
      31: dload_3
      32: invokestatic  #40                 // Method java/lang/Double.isNaN:(D)Z
      35: ifeq          48
      38: new           #42                 // class java/lang/IllegalArgumentException
      41: dup
      42: ldc           #67                 // String The numbers must not be NaN
      44: invokespecial #47                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      47: athrow
      48: dload_3
      49: dload_1
      50: dcmpg
      51: ifge          67
      54: aload_0
      55: dload_3
      56: putfield      #49                 // Field min:D
      59: aload_0
      60: dload_1
      61: putfield      #51                 // Field max:D
      64: goto          77
      67: aload_0
      68: dload_1
      69: putfield      #49                 // Field min:D
      72: aload_0
      73: dload_3
      74: putfield      #51                 // Field max:D
      77: return

  public org.sonar.api.internal.apachecommons.lang.math.DoubleRange(java.lang.Number, java.lang.Number);
    Code:
       0: aload_0
       1: invokespecial #26                 // Method org/sonar/api/internal/apachecommons/lang/math/Range."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #28                 // Field minObject:Ljava/lang/Double;
       9: aload_0
      10: aconst_null
      11: putfield      #30                 // Field maxObject:Ljava/lang/Double;
      14: aload_0
      15: iconst_0
      16: putfield      #32                 // Field hashCode:I
      19: aload_0
      20: aconst_null
      21: putfield      #34                 // Field toString:Ljava/lang/String;
      24: aload_1
      25: ifnull        32
      28: aload_2
      29: ifnonnull     42
      32: new           #42                 // class java/lang/IllegalArgumentException
      35: dup
      36: ldc           #72                 // String The numbers must not be null
      38: invokespecial #47                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      41: athrow
      42: aload_1
      43: invokevirtual #63                 // Method java/lang/Number.doubleValue:()D
      46: dstore_3
      47: aload_2
      48: invokevirtual #63                 // Method java/lang/Number.doubleValue:()D
      51: dstore        5
      53: dload_3
      54: invokestatic  #40                 // Method java/lang/Double.isNaN:(D)Z
      57: ifne          68
      60: dload         5
      62: invokestatic  #40                 // Method java/lang/Double.isNaN:(D)Z
      65: ifeq          78
      68: new           #42                 // class java/lang/IllegalArgumentException
      71: dup
      72: ldc           #67                 // String The numbers must not be NaN
      74: invokespecial #47                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      77: athrow
      78: dload         5
      80: dload_3
      81: dcmpg
      82: ifge          129
      85: aload_0
      86: dload         5
      88: putfield      #49                 // Field min:D
      91: aload_0
      92: dload_3
      93: putfield      #51                 // Field max:D
      96: aload_2
      97: instanceof    #36                 // class java/lang/Double
     100: ifeq          111
     103: aload_0
     104: aload_2
     105: checkcast     #36                 // class java/lang/Double
     108: putfield      #28                 // Field minObject:Ljava/lang/Double;
     111: aload_1
     112: instanceof    #36                 // class java/lang/Double
     115: ifeq          170
     118: aload_0
     119: aload_1
     120: checkcast     #36                 // class java/lang/Double
     123: putfield      #30                 // Field maxObject:Ljava/lang/Double;
     126: goto          170
     129: aload_0
     130: dload_3
     131: putfield      #49                 // Field min:D
     134: aload_0
     135: dload         5
     137: putfield      #51                 // Field max:D
     140: aload_1
     141: instanceof    #36                 // class java/lang/Double
     144: ifeq          155
     147: aload_0
     148: aload_1
     149: checkcast     #36                 // class java/lang/Double
     152: putfield      #28                 // Field minObject:Ljava/lang/Double;
     155: aload_2
     156: instanceof    #36                 // class java/lang/Double
     159: ifeq          170
     162: aload_0
     163: aload_2
     164: checkcast     #36                 // class java/lang/Double
     167: putfield      #30                 // Field maxObject:Ljava/lang/Double;
     170: return

  public java.lang.Number getMinimumNumber();
    Code:
       0: aload_0
       1: getfield      #28                 // Field minObject:Ljava/lang/Double;
       4: ifnonnull     22
       7: aload_0
       8: new           #36                 // class java/lang/Double
      11: dup
      12: aload_0
      13: getfield      #49                 // Field min:D
      16: invokespecial #78                 // Method java/lang/Double."<init>":(D)V
      19: putfield      #28                 // Field minObject:Ljava/lang/Double;
      22: aload_0
      23: getfield      #28                 // Field minObject:Ljava/lang/Double;
      26: areturn

  public long getMinimumLong();
    Code:
       0: aload_0
       1: getfield      #49                 // Field min:D
       4: d2l
       5: lreturn

  public int getMinimumInteger();
    Code:
       0: aload_0
       1: getfield      #49                 // Field min:D
       4: d2i
       5: ireturn

  public double getMinimumDouble();
    Code:
       0: aload_0
       1: getfield      #49                 // Field min:D
       4: dreturn

  public float getMinimumFloat();
    Code:
       0: aload_0
       1: getfield      #49                 // Field min:D
       4: d2f
       5: freturn

  public java.lang.Number getMaximumNumber();
    Code:
       0: aload_0
       1: getfield      #30                 // Field maxObject:Ljava/lang/Double;
       4: ifnonnull     22
       7: aload_0
       8: new           #36                 // class java/lang/Double
      11: dup
      12: aload_0
      13: getfield      #51                 // Field max:D
      16: invokespecial #78                 // Method java/lang/Double."<init>":(D)V
      19: putfield      #30                 // Field maxObject:Ljava/lang/Double;
      22: aload_0
      23: getfield      #30                 // Field maxObject:Ljava/lang/Double;
      26: areturn

  public long getMaximumLong();
    Code:
       0: aload_0
       1: getfield      #51                 // Field max:D
       4: d2l
       5: lreturn

  public int getMaximumInteger();
    Code:
       0: aload_0
       1: getfield      #51                 // Field max:D
       4: d2i
       5: ireturn

  public double getMaximumDouble();
    Code:
       0: aload_0
       1: getfield      #51                 // Field max:D
       4: dreturn

  public float getMaximumFloat();
    Code:
       0: aload_0
       1: getfield      #51                 // Field max:D
       4: d2f
       5: freturn

  public boolean containsNumber(java.lang.Number);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: iconst_0
       5: ireturn
       6: aload_0
       7: aload_1
       8: invokevirtual #63                 // Method java/lang/Number.doubleValue:()D
      11: invokevirtual #95                 // Method containsDouble:(D)Z
      14: ireturn

  public boolean containsDouble(double);
    Code:
       0: dload_1
       1: aload_0
       2: getfield      #49                 // Field min:D
       5: dcmpl
       6: iflt          22
       9: dload_1
      10: aload_0
      11: getfield      #51                 // Field max:D
      14: dcmpg
      15: ifgt          22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: ireturn

  public boolean containsRange(org.sonar.api.internal.apachecommons.lang.math.Range);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: iconst_0
       5: ireturn
       6: aload_0
       7: aload_1
       8: invokevirtual #100                // Method org/sonar/api/internal/apachecommons/lang/math/Range.getMinimumDouble:()D
      11: invokevirtual #95                 // Method containsDouble:(D)Z
      14: ifeq          32
      17: aload_0
      18: aload_1
      19: invokevirtual #102                // Method org/sonar/api/internal/apachecommons/lang/math/Range.getMaximumDouble:()D
      22: invokevirtual #95                 // Method containsDouble:(D)Z
      25: ifeq          32
      28: iconst_1
      29: goto          33
      32: iconst_0
      33: ireturn

  public boolean overlapsRange(org.sonar.api.internal.apachecommons.lang.math.Range);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: iconst_0
       5: ireturn
       6: aload_1
       7: aload_0
       8: getfield      #49                 // Field min:D
      11: invokevirtual #106                // Method org/sonar/api/internal/apachecommons/lang/math/Range.containsDouble:(D)Z
      14: ifne          39
      17: aload_1
      18: aload_0
      19: getfield      #51                 // Field max:D
      22: invokevirtual #106                // Method org/sonar/api/internal/apachecommons/lang/math/Range.containsDouble:(D)Z
      25: ifne          39
      28: aload_0
      29: aload_1
      30: invokevirtual #100                // Method org/sonar/api/internal/apachecommons/lang/math/Range.getMinimumDouble:()D
      33: invokevirtual #95                 // Method containsDouble:(D)Z
      36: ifeq          43
      39: iconst_1
      40: goto          44
      43: iconst_0
      44: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: aload_0
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: instanceof    #2                  // class org/sonar/api/internal/apachecommons/lang/math/DoubleRange
      11: ifne          16
      14: iconst_0
      15: ireturn
      16: aload_1
      17: checkcast     #2                  // class org/sonar/api/internal/apachecommons/lang/math/DoubleRange
      20: astore_2
      21: aload_0
      22: getfield      #49                 // Field min:D
      25: invokestatic  #112                // Method java/lang/Double.doubleToLongBits:(D)J
      28: aload_2
      29: getfield      #49                 // Field min:D
      32: invokestatic  #112                // Method java/lang/Double.doubleToLongBits:(D)J
      35: lcmp
      36: ifne          61
      39: aload_0
      40: getfield      #51                 // Field max:D
      43: invokestatic  #112                // Method java/lang/Double.doubleToLongBits:(D)J
      46: aload_2
      47: getfield      #51                 // Field max:D
      50: invokestatic  #112                // Method java/lang/Double.doubleToLongBits:(D)J
      53: lcmp
      54: ifne          61
      57: iconst_1
      58: goto          62
      61: iconst_0
      62: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #32                 // Field hashCode:I
       4: ifne          86
       7: aload_0
       8: bipush        17
      10: putfield      #32                 // Field hashCode:I
      13: aload_0
      14: bipush        37
      16: aload_0
      17: getfield      #32                 // Field hashCode:I
      20: imul
      21: aload_0
      22: invokevirtual #120                // Method java/lang/Object.getClass:()Ljava/lang/Class;
      25: invokevirtual #122                // Method java/lang/Object.hashCode:()I
      28: iadd
      29: putfield      #32                 // Field hashCode:I
      32: aload_0
      33: getfield      #49                 // Field min:D
      36: invokestatic  #112                // Method java/lang/Double.doubleToLongBits:(D)J
      39: lstore_1
      40: aload_0
      41: bipush        37
      43: aload_0
      44: getfield      #32                 // Field hashCode:I
      47: imul
      48: lload_1
      49: lload_1
      50: bipush        32
      52: lshr
      53: lxor
      54: l2i
      55: iadd
      56: putfield      #32                 // Field hashCode:I
      59: aload_0
      60: getfield      #51                 // Field max:D
      63: invokestatic  #112                // Method java/lang/Double.doubleToLongBits:(D)J
      66: lstore_1
      67: aload_0
      68: bipush        37
      70: aload_0
      71: getfield      #32                 // Field hashCode:I
      74: imul
      75: lload_1
      76: lload_1
      77: bipush        32
      79: lshr
      80: lxor
      81: l2i
      82: iadd
      83: putfield      #32                 // Field hashCode:I
      86: aload_0
      87: getfield      #32                 // Field hashCode:I
      90: ireturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #34                 // Field toString:Ljava/lang/String;
       4: ifnonnull     64
       7: new           #126                // class org/sonar/api/internal/apachecommons/lang/text/StrBuilder
      10: dup
      11: bipush        32
      13: invokespecial #129                // Method org/sonar/api/internal/apachecommons/lang/text/StrBuilder."<init>":(I)V
      16: astore_1
      17: aload_1
      18: ldc           #131                // String Range[
      20: invokevirtual #135                // Method org/sonar/api/internal/apachecommons/lang/text/StrBuilder.append:(Ljava/lang/String;)Lorg/sonar/api/internal/apachecommons/lang/text/StrBuilder;
      23: pop
      24: aload_1
      25: aload_0
      26: getfield      #49                 // Field min:D
      29: invokevirtual #138                // Method org/sonar/api/internal/apachecommons/lang/text/StrBuilder.append:(D)Lorg/sonar/api/internal/apachecommons/lang/text/StrBuilder;
      32: pop
      33: aload_1
      34: bipush        44
      36: invokevirtual #141                // Method org/sonar/api/internal/apachecommons/lang/text/StrBuilder.append:(C)Lorg/sonar/api/internal/apachecommons/lang/text/StrBuilder;
      39: pop
      40: aload_1
      41: aload_0
      42: getfield      #51                 // Field max:D
      45: invokevirtual #138                // Method org/sonar/api/internal/apachecommons/lang/text/StrBuilder.append:(D)Lorg/sonar/api/internal/apachecommons/lang/text/StrBuilder;
      48: pop
      49: aload_1
      50: bipush        93
      52: invokevirtual #141                // Method org/sonar/api/internal/apachecommons/lang/text/StrBuilder.append:(C)Lorg/sonar/api/internal/apachecommons/lang/text/StrBuilder;
      55: pop
      56: aload_0
      57: aload_1
      58: invokevirtual #143                // Method org/sonar/api/internal/apachecommons/lang/text/StrBuilder.toString:()Ljava/lang/String;
      61: putfield      #34                 // Field toString:Ljava/lang/String;
      64: aload_0
      65: getfield      #34                 // Field toString:Ljava/lang/String;
      68: areturn
}
