Compiled from "ByteStreams.java"
final class org.sonar.api.internal.google.common.io.ByteStreams$LimitedInputStream extends java.io.FilterInputStream {
  private long left;

  private long mark;

  org.sonar.api.internal.google.common.io.ByteStreams$LimitedInputStream(java.io.InputStream, long);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #16                 // Method java/io/FilterInputStream."<init>":(Ljava/io/InputStream;)V
       5: aload_0
       6: ldc2_w        #17                 // long -1l
       9: putfield      #20                 // Field mark:J
      12: aload_1
      13: invokestatic  #26                 // Method org/sonar/api/internal/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
      16: pop
      17: lload_2
      18: lconst_0
      19: lcmp
      20: iflt          27
      23: iconst_1
      24: goto          28
      27: iconst_0
      28: ldc           #30                 // String limit must be non-negative
      30: invokestatic  #34                 // Method org/sonar/api/internal/google/common/base/Preconditions.checkArgument:(ZLjava/lang/Object;)V
      33: aload_0
      34: lload_2
      35: putfield      #36                 // Field left:J
      38: return

  public int available() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #47                 // Field in:Ljava/io/InputStream;
       4: invokevirtual #49                 // Method java/io/InputStream.available:()I
       7: i2l
       8: aload_0
       9: getfield      #36                 // Field left:J
      12: invokestatic  #55                 // Method java/lang/Math.min:(JJ)J
      15: l2i
      16: ireturn

  public synchronized void mark(int);
    Code:
       0: aload_0
       1: getfield      #47                 // Field in:Ljava/io/InputStream;
       4: iload_1
       5: invokevirtual #58                 // Method java/io/InputStream.mark:(I)V
       8: aload_0
       9: aload_0
      10: getfield      #36                 // Field left:J
      13: putfield      #20                 // Field mark:J
      16: return

  public int read() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #36                 // Field left:J
       4: lconst_0
       5: lcmp
       6: ifne          11
       9: iconst_m1
      10: ireturn
      11: aload_0
      12: getfield      #47                 // Field in:Ljava/io/InputStream;
      15: invokevirtual #63                 // Method java/io/InputStream.read:()I
      18: istore_1
      19: iload_1
      20: iconst_m1
      21: if_icmpeq     34
      24: aload_0
      25: dup
      26: getfield      #36                 // Field left:J
      29: lconst_1
      30: lsub
      31: putfield      #36                 // Field left:J
      34: iload_1
      35: ireturn

  public int read(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #36                 // Field left:J
       4: lconst_0
       5: lcmp
       6: ifne          11
       9: iconst_m1
      10: ireturn
      11: iload_3
      12: i2l
      13: aload_0
      14: getfield      #36                 // Field left:J
      17: invokestatic  #55                 // Method java/lang/Math.min:(JJ)J
      20: l2i
      21: istore_3
      22: aload_0
      23: getfield      #47                 // Field in:Ljava/io/InputStream;
      26: aload_1
      27: iload_2
      28: iload_3
      29: invokevirtual #67                 // Method java/io/InputStream.read:([BII)I
      32: istore        4
      34: iload         4
      36: iconst_m1
      37: if_icmpeq     52
      40: aload_0
      41: dup
      42: getfield      #36                 // Field left:J
      45: iload         4
      47: i2l
      48: lsub
      49: putfield      #36                 // Field left:J
      52: iload         4
      54: ireturn

  public synchronized void reset() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #47                 // Field in:Ljava/io/InputStream;
       4: invokevirtual #77                 // Method java/io/InputStream.markSupported:()Z
       7: ifne          20
      10: new           #45                 // class java/io/IOException
      13: dup
      14: ldc           #79                 // String Mark not supported
      16: invokespecial #82                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      19: athrow
      20: aload_0
      21: getfield      #20                 // Field mark:J
      24: ldc2_w        #17                 // long -1l
      27: lcmp
      28: ifne          41
      31: new           #45                 // class java/io/IOException
      34: dup
      35: ldc           #84                 // String Mark not set
      37: invokespecial #82                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      40: athrow
      41: aload_0
      42: getfield      #47                 // Field in:Ljava/io/InputStream;
      45: invokevirtual #86                 // Method java/io/InputStream.reset:()V
      48: aload_0
      49: aload_0
      50: getfield      #20                 // Field mark:J
      53: putfield      #36                 // Field left:J
      56: return

  public long skip(long) throws java.io.IOException;
    Code:
       0: lload_1
       1: aload_0
       2: getfield      #36                 // Field left:J
       5: invokestatic  #55                 // Method java/lang/Math.min:(JJ)J
       8: lstore_1
       9: aload_0
      10: getfield      #47                 // Field in:Ljava/io/InputStream;
      13: lload_1
      14: invokevirtual #90                 // Method java/io/InputStream.skip:(J)J
      17: lstore_3
      18: aload_0
      19: dup
      20: getfield      #36                 // Field left:J
      23: lload_3
      24: lsub
      25: putfield      #36                 // Field left:J
      28: lload_3
      29: lreturn
}
