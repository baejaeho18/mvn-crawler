Compiled from "MagicNumberFileFilter.java"
public class org.sonar.api.internal.apachecommons.io.filefilter.MagicNumberFileFilter extends org.sonar.api.internal.apachecommons.io.filefilter.AbstractFileFilter implements java.io.Serializable {
  private static final long serialVersionUID;

  private final byte[] magicNumbers;

  private final long byteOffset;

  public org.sonar.api.internal.apachecommons.io.filefilter.MagicNumberFileFilter(byte[]);
    Code:
       0: aload_0
       1: aload_1
       2: lconst_0
       3: invokespecial #19                 // Method "<init>":([BJ)V
       6: return

  public org.sonar.api.internal.apachecommons.io.filefilter.MagicNumberFileFilter(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: lconst_0
       3: invokespecial #26                 // Method "<init>":(Ljava/lang/String;J)V
       6: return

  public org.sonar.api.internal.apachecommons.io.filefilter.MagicNumberFileFilter(java.lang.String, long);
    Code:
       0: aload_0
       1: invokespecial #30                 // Method org/sonar/api/internal/apachecommons/io/filefilter/AbstractFileFilter."<init>":()V
       4: aload_1
       5: ifnonnull     18
       8: new           #32                 // class java/lang/IllegalArgumentException
      11: dup
      12: ldc           #34                 // String The magic number cannot be null
      14: invokespecial #36                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      17: athrow
      18: aload_1
      19: invokevirtual #42                 // Method java/lang/String.length:()I
      22: ifne          35
      25: new           #32                 // class java/lang/IllegalArgumentException
      28: dup
      29: ldc           #44                 // String The magic number must contain at least one byte
      31: invokespecial #36                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      34: athrow
      35: lload_2
      36: lconst_0
      37: lcmp
      38: ifge          51
      41: new           #32                 // class java/lang/IllegalArgumentException
      44: dup
      45: ldc           #46                 // String The offset cannot be negative
      47: invokespecial #36                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      50: athrow
      51: aload_0
      52: aload_1
      53: invokevirtual #50                 // Method java/lang/String.getBytes:()[B
      56: putfield      #52                 // Field magicNumbers:[B
      59: aload_0
      60: lload_2
      61: putfield      #54                 // Field byteOffset:J
      64: return

  public org.sonar.api.internal.apachecommons.io.filefilter.MagicNumberFileFilter(byte[], long);
    Code:
       0: aload_0
       1: invokespecial #30                 // Method org/sonar/api/internal/apachecommons/io/filefilter/AbstractFileFilter."<init>":()V
       4: aload_1
       5: ifnonnull     18
       8: new           #32                 // class java/lang/IllegalArgumentException
      11: dup
      12: ldc           #34                 // String The magic number cannot be null
      14: invokespecial #36                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      17: athrow
      18: aload_1
      19: arraylength
      20: ifne          33
      23: new           #32                 // class java/lang/IllegalArgumentException
      26: dup
      27: ldc           #44                 // String The magic number must contain at least one byte
      29: invokespecial #36                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      32: athrow
      33: lload_2
      34: lconst_0
      35: lcmp
      36: ifge          49
      39: new           #32                 // class java/lang/IllegalArgumentException
      42: dup
      43: ldc           #46                 // String The offset cannot be negative
      45: invokespecial #36                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      48: athrow
      49: aload_0
      50: aload_1
      51: arraylength
      52: newarray       byte
      54: putfield      #52                 // Field magicNumbers:[B
      57: aload_1
      58: iconst_0
      59: aload_0
      60: getfield      #52                 // Field magicNumbers:[B
      63: iconst_0
      64: aload_1
      65: arraylength
      66: invokestatic  #62                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      69: aload_0
      70: lload_2
      71: putfield      #54                 // Field byteOffset:J
      74: return

  public boolean accept(java.io.File);
    Code:
       0: aload_1
       1: ifnull        108
       4: aload_1
       5: invokevirtual #72                 // Method java/io/File.isFile:()Z
       8: ifeq          108
      11: aload_1
      12: invokevirtual #75                 // Method java/io/File.canRead:()Z
      15: ifeq          108
      18: aconst_null
      19: astore_2
      20: aload_0
      21: getfield      #52                 // Field magicNumbers:[B
      24: arraylength
      25: newarray       byte
      27: astore_3
      28: new           #77                 // class java/io/RandomAccessFile
      31: dup
      32: aload_1
      33: ldc           #79                 // String r
      35: invokespecial #82                 // Method java/io/RandomAccessFile."<init>":(Ljava/io/File;Ljava/lang/String;)V
      38: astore_2
      39: aload_2
      40: aload_0
      41: getfield      #54                 // Field byteOffset:J
      44: invokevirtual #86                 // Method java/io/RandomAccessFile.seek:(J)V
      47: aload_2
      48: aload_3
      49: invokevirtual #90                 // Method java/io/RandomAccessFile.read:([B)I
      52: istore        4
      54: iload         4
      56: aload_0
      57: getfield      #52                 // Field magicNumbers:[B
      60: arraylength
      61: if_icmpeq     74
      64: iconst_0
      65: istore        5
      67: aload_2
      68: invokestatic  #96                 // Method org/sonar/api/internal/apachecommons/io/IOUtils.closeQuietly:(Ljava/io/Closeable;)V
      71: iload         5
      73: ireturn
      74: aload_0
      75: getfield      #52                 // Field magicNumbers:[B
      78: aload_3
      79: invokestatic  #102                // Method java/util/Arrays.equals:([B[B)Z
      82: istore        5
      84: aload_2
      85: invokestatic  #96                 // Method org/sonar/api/internal/apachecommons/io/IOUtils.closeQuietly:(Ljava/io/Closeable;)V
      88: iload         5
      90: ireturn
      91: astore_3
      92: aload_2
      93: invokestatic  #96                 // Method org/sonar/api/internal/apachecommons/io/IOUtils.closeQuietly:(Ljava/io/Closeable;)V
      96: goto          108
      99: astore        6
     101: aload_2
     102: invokestatic  #96                 // Method org/sonar/api/internal/apachecommons/io/IOUtils.closeQuietly:(Ljava/io/Closeable;)V
     105: aload         6
     107: athrow
     108: iconst_0
     109: ireturn
    Exception table:
       from    to  target type
          20    67    91   Class java/io/IOException
          74    84    91   Class java/io/IOException
          20    67    99   any
          74    84    99   any
          91    92    99   any
          99   101    99   any

  public java.lang.String toString();
    Code:
       0: new           #116                // class java/lang/StringBuilder
       3: dup
       4: aload_0
       5: invokespecial #118                // Method org/sonar/api/internal/apachecommons/io/filefilter/AbstractFileFilter.toString:()Ljava/lang/String;
       8: invokespecial #119                // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
      11: astore_1
      12: aload_1
      13: ldc           #121                // String (
      15: invokevirtual #125                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      18: pop
      19: aload_1
      20: new           #38                 // class java/lang/String
      23: dup
      24: aload_0
      25: getfield      #52                 // Field magicNumbers:[B
      28: invokespecial #127                // Method java/lang/String."<init>":([B)V
      31: invokevirtual #125                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      34: pop
      35: aload_1
      36: ldc           #129                // String ,
      38: invokevirtual #125                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      41: pop
      42: aload_1
      43: aload_0
      44: getfield      #54                 // Field byteOffset:J
      47: invokevirtual #132                // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      50: pop
      51: aload_1
      52: ldc           #134                // String )
      54: invokevirtual #125                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      57: pop
      58: aload_1
      59: invokevirtual #135                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      62: areturn
}
