Compiled from "SmoothRateLimiter.java"
abstract class org.sonar.api.internal.google.common.util.concurrent.SmoothRateLimiter extends org.sonar.api.internal.google.common.util.concurrent.RateLimiter {
  double storedPermits;

  double maxPermits;

  double stableIntervalMicros;

  private long nextFreeTicketMicros;

  private org.sonar.api.internal.google.common.util.concurrent.SmoothRateLimiter(org.sonar.api.internal.google.common.util.concurrent.RateLimiter$SleepingStopwatch);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #26                 // Method org/sonar/api/internal/google/common/util/concurrent/RateLimiter."<init>":(Lorg/sonar/api/internal/google/common/util/concurrent/RateLimiter$SleepingStopwatch;)V
       5: aload_0
       6: lconst_0
       7: putfield      #28                 // Field nextFreeTicketMicros:J
      10: return

  final void doSetRate(double, long);
    Code:
       0: aload_0
       1: lload_3
       2: invokespecial #38                 // Method resync:(J)V
       5: getstatic     #44                 // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
       8: lconst_1
       9: invokevirtual #48                 // Method java/util/concurrent/TimeUnit.toMicros:(J)J
      12: l2d
      13: dload_1
      14: ddiv
      15: dstore        5
      17: aload_0
      18: dload         5
      20: putfield      #50                 // Field stableIntervalMicros:D
      23: aload_0
      24: dload_1
      25: dload         5
      27: invokevirtual #53                 // Method doSetRate:(DD)V
      30: return

  abstract void doSetRate(double, double);

  final double doGetRate();
    Code:
       0: getstatic     #44                 // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
       3: lconst_1
       4: invokevirtual #48                 // Method java/util/concurrent/TimeUnit.toMicros:(J)J
       7: l2d
       8: aload_0
       9: getfield      #50                 // Field stableIntervalMicros:D
      12: ddiv
      13: dreturn

  final long queryEarliestAvailable(long);
    Code:
       0: aload_0
       1: getfield      #28                 // Field nextFreeTicketMicros:J
       4: lreturn

  final long reserveEarliestAvailable(int, long);
    Code:
       0: aload_0
       1: lload_2
       2: invokespecial #38                 // Method resync:(J)V
       5: aload_0
       6: getfield      #28                 // Field nextFreeTicketMicros:J
       9: lstore        4
      11: iload_1
      12: i2d
      13: aload_0
      14: getfield      #62                 // Field storedPermits:D
      17: invokestatic  #68                 // Method java/lang/Math.min:(DD)D
      20: dstore        6
      22: iload_1
      23: i2d
      24: dload         6
      26: dsub
      27: dstore        8
      29: aload_0
      30: aload_0
      31: getfield      #62                 // Field storedPermits:D
      34: dload         6
      36: invokevirtual #72                 // Method storedPermitsToWaitTime:(DD)J
      39: dload         8
      41: aload_0
      42: getfield      #50                 // Field stableIntervalMicros:D
      45: dmul
      46: d2l
      47: ladd
      48: lstore        10
      50: aload_0
      51: aload_0
      52: getfield      #28                 // Field nextFreeTicketMicros:J
      55: lload         10
      57: ladd
      58: putfield      #28                 // Field nextFreeTicketMicros:J
      61: aload_0
      62: dup
      63: getfield      #62                 // Field storedPermits:D
      66: dload         6
      68: dsub
      69: putfield      #62                 // Field storedPermits:D
      72: lload         4
      74: lreturn

  abstract long storedPermitsToWaitTime(double, double);

  private void resync(long);
    Code:
       0: lload_1
       1: aload_0
       2: getfield      #28                 // Field nextFreeTicketMicros:J
       5: lcmp
       6: ifle          42
       9: aload_0
      10: aload_0
      11: getfield      #80                 // Field maxPermits:D
      14: aload_0
      15: getfield      #62                 // Field storedPermits:D
      18: lload_1
      19: aload_0
      20: getfield      #28                 // Field nextFreeTicketMicros:J
      23: lsub
      24: l2d
      25: aload_0
      26: getfield      #50                 // Field stableIntervalMicros:D
      29: ddiv
      30: dadd
      31: invokestatic  #68                 // Method java/lang/Math.min:(DD)D
      34: putfield      #62                 // Field storedPermits:D
      37: aload_0
      38: lload_1
      39: putfield      #28                 // Field nextFreeTicketMicros:J
      42: return

  org.sonar.api.internal.google.common.util.concurrent.SmoothRateLimiter(org.sonar.api.internal.google.common.util.concurrent.RateLimiter$SleepingStopwatch, org.sonar.api.internal.google.common.util.concurrent.SmoothRateLimiter$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #82                 // Method "<init>":(Lorg/sonar/api/internal/google/common/util/concurrent/RateLimiter$SleepingStopwatch;)V
       5: return
}
