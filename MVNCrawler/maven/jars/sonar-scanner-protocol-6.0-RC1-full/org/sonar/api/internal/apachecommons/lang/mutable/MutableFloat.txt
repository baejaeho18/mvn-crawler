Compiled from "MutableFloat.java"
public class org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat extends java.lang.Number implements java.lang.Comparable,org.sonar.api.internal.apachecommons.lang.mutable.Mutable {
  private static final long serialVersionUID;

  private float value;

  public org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat();
    Code:
       0: aload_0
       1: invokespecial #19                 // Method java/lang/Number."<init>":()V
       4: return

  public org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat(float);
    Code:
       0: aload_0
       1: invokespecial #19                 // Method java/lang/Number."<init>":()V
       4: aload_0
       5: fload_1
       6: putfield      #24                 // Field value:F
       9: return

  public org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat(java.lang.Number);
    Code:
       0: aload_0
       1: invokespecial #19                 // Method java/lang/Number."<init>":()V
       4: aload_0
       5: aload_1
       6: invokevirtual #29                 // Method java/lang/Number.floatValue:()F
       9: putfield      #24                 // Field value:F
      12: return

  public org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat(java.lang.String) throws java.lang.NumberFormatException;
    Code:
       0: aload_0
       1: invokespecial #19                 // Method java/lang/Number."<init>":()V
       4: aload_0
       5: aload_1
       6: invokestatic  #39                 // Method java/lang/Float.parseFloat:(Ljava/lang/String;)F
       9: putfield      #24                 // Field value:F
      12: return

  public java.lang.Object getValue();
    Code:
       0: new           #35                 // class java/lang/Float
       3: dup
       4: aload_0
       5: getfield      #24                 // Field value:F
       8: invokespecial #44                 // Method java/lang/Float."<init>":(F)V
      11: areturn

  public void setValue(float);
    Code:
       0: aload_0
       1: fload_1
       2: putfield      #24                 // Field value:F
       5: return

  public void setValue(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #4                  // class java/lang/Number
       5: invokevirtual #29                 // Method java/lang/Number.floatValue:()F
       8: invokevirtual #48                 // Method setValue:(F)V
      11: return

  public boolean isNaN();
    Code:
       0: aload_0
       1: getfield      #24                 // Field value:F
       4: invokestatic  #54                 // Method java/lang/Float.isNaN:(F)Z
       7: ireturn

  public boolean isInfinite();
    Code:
       0: aload_0
       1: getfield      #24                 // Field value:F
       4: invokestatic  #57                 // Method java/lang/Float.isInfinite:(F)Z
       7: ireturn

  public void increment();
    Code:
       0: aload_0
       1: dup
       2: getfield      #24                 // Field value:F
       5: fconst_1
       6: fadd
       7: putfield      #24                 // Field value:F
      10: return

  public void decrement();
    Code:
       0: aload_0
       1: dup
       2: getfield      #24                 // Field value:F
       5: fconst_1
       6: fsub
       7: putfield      #24                 // Field value:F
      10: return

  public void add(float);
    Code:
       0: aload_0
       1: dup
       2: getfield      #24                 // Field value:F
       5: fload_1
       6: fadd
       7: putfield      #24                 // Field value:F
      10: return

  public void add(java.lang.Number);
    Code:
       0: aload_0
       1: dup
       2: getfield      #24                 // Field value:F
       5: aload_1
       6: invokevirtual #29                 // Method java/lang/Number.floatValue:()F
       9: fadd
      10: putfield      #24                 // Field value:F
      13: return

  public void subtract(float);
    Code:
       0: aload_0
       1: dup
       2: getfield      #24                 // Field value:F
       5: fload_1
       6: fsub
       7: putfield      #24                 // Field value:F
      10: return

  public void subtract(java.lang.Number);
    Code:
       0: aload_0
       1: dup
       2: getfield      #24                 // Field value:F
       5: aload_1
       6: invokevirtual #29                 // Method java/lang/Number.floatValue:()F
       9: fsub
      10: putfield      #24                 // Field value:F
      13: return

  public int intValue();
    Code:
       0: aload_0
       1: getfield      #24                 // Field value:F
       4: f2i
       5: ireturn

  public long longValue();
    Code:
       0: aload_0
       1: getfield      #24                 // Field value:F
       4: f2l
       5: lreturn

  public float floatValue();
    Code:
       0: aload_0
       1: getfield      #24                 // Field value:F
       4: freturn

  public double doubleValue();
    Code:
       0: aload_0
       1: getfield      #24                 // Field value:F
       4: f2d
       5: dreturn

  public java.lang.Float toFloat();
    Code:
       0: new           #35                 // class java/lang/Float
       3: dup
       4: aload_0
       5: invokevirtual #71                 // Method floatValue:()F
       8: invokespecial #44                 // Method java/lang/Float."<init>":(F)V
      11: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #2                  // class org/sonar/api/internal/apachecommons/lang/mutable/MutableFloat
       4: ifeq          31
       7: aload_1
       8: checkcast     #2                  // class org/sonar/api/internal/apachecommons/lang/mutable/MutableFloat
      11: getfield      #24                 // Field value:F
      14: invokestatic  #77                 // Method java/lang/Float.floatToIntBits:(F)I
      17: aload_0
      18: getfield      #24                 // Field value:F
      21: invokestatic  #77                 // Method java/lang/Float.floatToIntBits:(F)I
      24: if_icmpne     31
      27: iconst_1
      28: goto          32
      31: iconst_0
      32: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #24                 // Field value:F
       4: invokestatic  #77                 // Method java/lang/Float.floatToIntBits:(F)I
       7: ireturn

  public int compareTo(java.lang.Object);
    Code:
       0: aload_1
       1: checkcast     #2                  // class org/sonar/api/internal/apachecommons/lang/mutable/MutableFloat
       4: astore_2
       5: aload_2
       6: getfield      #24                 // Field value:F
       9: fstore_3
      10: aload_0
      11: getfield      #24                 // Field value:F
      14: fload_3
      15: invokestatic  #87                 // Method org/sonar/api/internal/apachecommons/lang/math/NumberUtils.compare:(FF)I
      18: ireturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #24                 // Field value:F
       4: invokestatic  #97                 // Method java/lang/String.valueOf:(F)Ljava/lang/String;
       7: areturn
}
