Compiled from "IssueExclusionProperties.java"
public final class org.sonar.core.config.IssueExclusionProperties {
  public static final java.lang.String SUB_CATEGORY_IGNORE_ISSUES;

  public static final java.lang.String EXCLUSION_KEY_PREFIX;

  public static final java.lang.String INCLUSION_KEY_PREFIX;

  public static final java.lang.String MULTICRITERIA_SUFFIX;

  public static final java.lang.String PATTERNS_MULTICRITERIA_EXCLUSION_KEY;

  public static final java.lang.String PATTERNS_MULTICRITERIA_INCLUSION_KEY;

  public static final java.lang.String RESOURCE_KEY;

  private static final java.lang.String PROPERTY_FILE_PATH_PATTERN;

  public static final java.lang.String RULE_KEY;

  private static final java.lang.String PROPERTY_RULE_KEY_PATTERN;

  private static final java.lang.String PROPERTY_RULE_KEY_PATTERN_HELP;

  public static final java.lang.String BLOCK_SUFFIX;

  public static final java.lang.String PATTERNS_BLOCK_KEY;

  public static final java.lang.String BEGIN_BLOCK_REGEXP;

  public static final java.lang.String END_BLOCK_REGEXP;

  public static final java.lang.String ALLFILE_SUFFIX;

  public static final java.lang.String PATTERNS_ALLFILE_KEY;

  public static final java.lang.String FILE_REGEXP;

  public static final int LARGE_SIZE;

  private org.sonar.core.config.IssueExclusionProperties();
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: return

  public static java.util.List<org.sonar.api.config.PropertyDefinition> all();
    Code:
       0: ldc           #3                  // String sonar.issue.ignore.multicriteria
       2: invokestatic  #4                  // Method org/sonar/api/config/PropertyDefinition.builder:(Ljava/lang/String;)Lorg/sonar/api/config/PropertyDefinition$Builder;
       5: ldc           #6                  // String exclusions
       7: invokevirtual #7                  // Method org/sonar/api/config/PropertyDefinition$Builder.category:(Ljava/lang/String;)Lorg/sonar/api/config/PropertyDefinition$Builder;
      10: ldc           #8                  // String issues
      12: invokevirtual #9                  // Method org/sonar/api/config/PropertyDefinition$Builder.subCategory:(Ljava/lang/String;)Lorg/sonar/api/config/PropertyDefinition$Builder;
      15: ldc           #10                 // String Ignore Issues on Multiple Criteria
      17: invokevirtual #11                 // Method org/sonar/api/config/PropertyDefinition$Builder.name:(Ljava/lang/String;)Lorg/sonar/api/config/PropertyDefinition$Builder;
      20: ldc           #12                 // String Patterns to ignore issues on certain components and for certain coding rules.<br/>A rule key pattern consists of the rule repository name, followed by a colon, followed by a rule key or rule name fragment. For example:<ul><li>squid:S1195</li><li>squid:*Naming*</li></ul>
      22: invokevirtual #13                 // Method org/sonar/api/config/PropertyDefinition$Builder.description:(Ljava/lang/String;)Lorg/sonar/api/config/PropertyDefinition$Builder;
      25: ldc           #15                 // String TRK
      27: iconst_0
      28: anewarray     #16                 // class java/lang/String
      31: invokevirtual #17                 // Method org/sonar/api/config/PropertyDefinition$Builder.onQualifiers:(Ljava/lang/String;[Ljava/lang/String;)Lorg/sonar/api/config/PropertyDefinition$Builder;
      34: iconst_3
      35: invokevirtual #18                 // Method org/sonar/api/config/PropertyDefinition$Builder.index:(I)Lorg/sonar/api/config/PropertyDefinition$Builder;
      38: ldc           #19                 // String ruleKey
      40: invokestatic  #20                 // Method org/sonar/api/config/PropertyFieldDefinition.build:(Ljava/lang/String;)Lorg/sonar/api/config/PropertyFieldDefinition$Builder;
      43: ldc           #21                 // String Rule Key Pattern
      45: invokevirtual #22                 // Method org/sonar/api/config/PropertyFieldDefinition$Builder.name:(Ljava/lang/String;)Lorg/sonar/api/config/PropertyFieldDefinition$Builder;
      48: ldc           #23                 // String Pattern to match rules which should be ignored.
      50: invokevirtual #24                 // Method org/sonar/api/config/PropertyFieldDefinition$Builder.description:(Ljava/lang/String;)Lorg/sonar/api/config/PropertyFieldDefinition$Builder;
      53: getstatic     #25                 // Field org/sonar/api/PropertyType.STRING:Lorg/sonar/api/PropertyType;
      56: invokevirtual #26                 // Method org/sonar/api/config/PropertyFieldDefinition$Builder.type:(Lorg/sonar/api/PropertyType;)Lorg/sonar/api/config/PropertyFieldDefinition$Builder;
      59: bipush        40
      61: invokevirtual #27                 // Method org/sonar/api/config/PropertyFieldDefinition$Builder.indicativeSize:(I)Lorg/sonar/api/config/PropertyFieldDefinition$Builder;
      64: invokevirtual #28                 // Method org/sonar/api/config/PropertyFieldDefinition$Builder.build:()Lorg/sonar/api/config/PropertyFieldDefinition;
      67: iconst_1
      68: anewarray     #29                 // class org/sonar/api/config/PropertyFieldDefinition
      71: dup
      72: iconst_0
      73: ldc           #30                 // String resourceKey
      75: invokestatic  #20                 // Method org/sonar/api/config/PropertyFieldDefinition.build:(Ljava/lang/String;)Lorg/sonar/api/config/PropertyFieldDefinition$Builder;
      78: ldc           #31                 // String File Path Pattern
      80: invokevirtual #22                 // Method org/sonar/api/config/PropertyFieldDefinition$Builder.name:(Ljava/lang/String;)Lorg/sonar/api/config/PropertyFieldDefinition$Builder;
      83: ldc           #32                 // String Pattern to match files which should be ignored.
      85: invokevirtual #24                 // Method org/sonar/api/config/PropertyFieldDefinition$Builder.description:(Ljava/lang/String;)Lorg/sonar/api/config/PropertyFieldDefinition$Builder;
      88: getstatic     #25                 // Field org/sonar/api/PropertyType.STRING:Lorg/sonar/api/PropertyType;
      91: invokevirtual #26                 // Method org/sonar/api/config/PropertyFieldDefinition$Builder.type:(Lorg/sonar/api/PropertyType;)Lorg/sonar/api/config/PropertyFieldDefinition$Builder;
      94: bipush        40
      96: invokevirtual #27                 // Method org/sonar/api/config/PropertyFieldDefinition$Builder.indicativeSize:(I)Lorg/sonar/api/config/PropertyFieldDefinition$Builder;
      99: invokevirtual #28                 // Method org/sonar/api/config/PropertyFieldDefinition$Builder.build:()Lorg/sonar/api/config/PropertyFieldDefinition;
     102: aastore
     103: invokevirtual #33                 // Method org/sonar/api/config/PropertyDefinition$Builder.fields:(Lorg/sonar/api/config/PropertyFieldDefinition;[Lorg/sonar/api/config/PropertyFieldDefinition;)Lorg/sonar/api/config/PropertyDefinition$Builder;
     106: invokevirtual #34                 // Method org/sonar/api/config/PropertyDefinition$Builder.build:()Lorg/sonar/api/config/PropertyDefinition;
     109: ldc           #35                 // String sonar.issue.ignore.block
     111: invokestatic  #4                  // Method org/sonar/api/config/PropertyDefinition.builder:(Ljava/lang/String;)Lorg/sonar/api/config/PropertyDefinition$Builder;
     114: ldc           #6                  // String exclusions
     116: invokevirtual #7                  // Method org/sonar/api/config/PropertyDefinition$Builder.category:(Ljava/lang/String;)Lorg/sonar/api/config/PropertyDefinition$Builder;
     119: ldc           #8                  // String issues
     121: invokevirtual #9                  // Method org/sonar/api/config/PropertyDefinition$Builder.subCategory:(Ljava/lang/String;)Lorg/sonar/api/config/PropertyDefinition$Builder;
     124: ldc           #36                 // String Ignore Issues in Blocks
     126: invokevirtual #11                 // Method org/sonar/api/config/PropertyDefinition$Builder.name:(Ljava/lang/String;)Lorg/sonar/api/config/PropertyDefinition$Builder;
     129: ldc           #37                 // String Patterns to ignore all issues on specific blocks of code, while continuing to scan and mark issues on the remainder of the file.
     131: invokevirtual #13                 // Method org/sonar/api/config/PropertyDefinition$Builder.description:(Ljava/lang/String;)Lorg/sonar/api/config/PropertyDefinition$Builder;
     134: ldc           #15                 // String TRK
     136: iconst_0
     137: anewarray     #16                 // class java/lang/String
     140: invokevirtual #17                 // Method org/sonar/api/config/PropertyDefinition$Builder.onQualifiers:(Ljava/lang/String;[Ljava/lang/String;)Lorg/sonar/api/config/PropertyDefinition$Builder;
     143: iconst_2
     144: invokevirtual #18                 // Method org/sonar/api/config/PropertyDefinition$Builder.index:(I)Lorg/sonar/api/config/PropertyDefinition$Builder;
     147: ldc           #38                 // String beginBlockRegexp
     149: invokestatic  #20                 // Method org/sonar/api/config/PropertyFieldDefinition.build:(Ljava/lang/String;)Lorg/sonar/api/config/PropertyFieldDefinition$Builder;
     152: ldc           #39                 // String Regular Expression for Start of Block
     154: invokevirtual #22                 // Method org/sonar/api/config/PropertyFieldDefinition$Builder.name:(Ljava/lang/String;)Lorg/sonar/api/config/PropertyFieldDefinition$Builder;
     157: ldc           #40                 // String If this regular expression is found in a file, then following lines are ignored until end of block.
     159: invokevirtual #24                 // Method org/sonar/api/config/PropertyFieldDefinition$Builder.description:(Ljava/lang/String;)Lorg/sonar/api/config/PropertyFieldDefinition$Builder;
     162: getstatic     #25                 // Field org/sonar/api/PropertyType.STRING:Lorg/sonar/api/PropertyType;
     165: invokevirtual #26                 // Method org/sonar/api/config/PropertyFieldDefinition$Builder.type:(Lorg/sonar/api/PropertyType;)Lorg/sonar/api/config/PropertyFieldDefinition$Builder;
     168: bipush        40
     170: invokevirtual #27                 // Method org/sonar/api/config/PropertyFieldDefinition$Builder.indicativeSize:(I)Lorg/sonar/api/config/PropertyFieldDefinition$Builder;
     173: invokevirtual #28                 // Method org/sonar/api/config/PropertyFieldDefinition$Builder.build:()Lorg/sonar/api/config/PropertyFieldDefinition;
     176: iconst_1
     177: anewarray     #29                 // class org/sonar/api/config/PropertyFieldDefinition
     180: dup
     181: iconst_0
     182: ldc           #41                 // String endBlockRegexp
     184: invokestatic  #20                 // Method org/sonar/api/config/PropertyFieldDefinition.build:(Ljava/lang/String;)Lorg/sonar/api/config/PropertyFieldDefinition$Builder;
     187: ldc           #42                 // String Regular Expression for End of Block
     189: invokevirtual #22                 // Method org/sonar/api/config/PropertyFieldDefinition$Builder.name:(Ljava/lang/String;)Lorg/sonar/api/config/PropertyFieldDefinition$Builder;
     192: ldc           #43                 // String If specified, this regular expression is used to determine the end of code blocks to ignore. If not, then block ends at the end of file.
     194: invokevirtual #24                 // Method org/sonar/api/config/PropertyFieldDefinition$Builder.description:(Ljava/lang/String;)Lorg/sonar/api/config/PropertyFieldDefinition$Builder;
     197: getstatic     #25                 // Field org/sonar/api/PropertyType.STRING:Lorg/sonar/api/PropertyType;
     200: invokevirtual #26                 // Method org/sonar/api/config/PropertyFieldDefinition$Builder.type:(Lorg/sonar/api/PropertyType;)Lorg/sonar/api/config/PropertyFieldDefinition$Builder;
     203: bipush        40
     205: invokevirtual #27                 // Method org/sonar/api/config/PropertyFieldDefinition$Builder.indicativeSize:(I)Lorg/sonar/api/config/PropertyFieldDefinition$Builder;
     208: invokevirtual #28                 // Method org/sonar/api/config/PropertyFieldDefinition$Builder.build:()Lorg/sonar/api/config/PropertyFieldDefinition;
     211: aastore
     212: invokevirtual #33                 // Method org/sonar/api/config/PropertyDefinition$Builder.fields:(Lorg/sonar/api/config/PropertyFieldDefinition;[Lorg/sonar/api/config/PropertyFieldDefinition;)Lorg/sonar/api/config/PropertyDefinition$Builder;
     215: invokevirtual #34                 // Method org/sonar/api/config/PropertyDefinition$Builder.build:()Lorg/sonar/api/config/PropertyDefinition;
     218: ldc           #44                 // String sonar.issue.ignore.allfile
     220: invokestatic  #4                  // Method org/sonar/api/config/PropertyDefinition.builder:(Ljava/lang/String;)Lorg/sonar/api/config/PropertyDefinition$Builder;
     223: ldc           #6                  // String exclusions
     225: invokevirtual #7                  // Method org/sonar/api/config/PropertyDefinition$Builder.category:(Ljava/lang/String;)Lorg/sonar/api/config/PropertyDefinition$Builder;
     228: ldc           #8                  // String issues
     230: invokevirtual #9                  // Method org/sonar/api/config/PropertyDefinition$Builder.subCategory:(Ljava/lang/String;)Lorg/sonar/api/config/PropertyDefinition$Builder;
     233: ldc           #45                 // String Ignore Issues on Files
     235: invokevirtual #11                 // Method org/sonar/api/config/PropertyDefinition$Builder.name:(Ljava/lang/String;)Lorg/sonar/api/config/PropertyDefinition$Builder;
     238: ldc           #46                 // String Patterns to ignore all issues on files that contain a block of code matching a given regular expression.
     240: invokevirtual #13                 // Method org/sonar/api/config/PropertyDefinition$Builder.description:(Ljava/lang/String;)Lorg/sonar/api/config/PropertyDefinition$Builder;
     243: ldc           #15                 // String TRK
     245: iconst_0
     246: anewarray     #16                 // class java/lang/String
     249: invokevirtual #17                 // Method org/sonar/api/config/PropertyDefinition$Builder.onQualifiers:(Ljava/lang/String;[Ljava/lang/String;)Lorg/sonar/api/config/PropertyDefinition$Builder;
     252: iconst_1
     253: invokevirtual #18                 // Method org/sonar/api/config/PropertyDefinition$Builder.index:(I)Lorg/sonar/api/config/PropertyDefinition$Builder;
     256: ldc           #47                 // String fileRegexp
     258: invokestatic  #20                 // Method org/sonar/api/config/PropertyFieldDefinition.build:(Ljava/lang/String;)Lorg/sonar/api/config/PropertyFieldDefinition$Builder;
     261: ldc           #48                 // String Regular Expression
     263: invokevirtual #22                 // Method org/sonar/api/config/PropertyFieldDefinition$Builder.name:(Ljava/lang/String;)Lorg/sonar/api/config/PropertyFieldDefinition$Builder;
     266: ldc           #49                 // String If this regular expression is found in a file, then the whole file is ignored.
     268: invokevirtual #24                 // Method org/sonar/api/config/PropertyFieldDefinition$Builder.description:(Ljava/lang/String;)Lorg/sonar/api/config/PropertyFieldDefinition$Builder;
     271: getstatic     #25                 // Field org/sonar/api/PropertyType.STRING:Lorg/sonar/api/PropertyType;
     274: invokevirtual #26                 // Method org/sonar/api/config/PropertyFieldDefinition$Builder.type:(Lorg/sonar/api/PropertyType;)Lorg/sonar/api/config/PropertyFieldDefinition$Builder;
     277: bipush        40
     279: invokevirtual #27                 // Method org/sonar/api/config/PropertyFieldDefinition$Builder.indicativeSize:(I)Lorg/sonar/api/config/PropertyFieldDefinition$Builder;
     282: invokevirtual #28                 // Method org/sonar/api/config/PropertyFieldDefinition$Builder.build:()Lorg/sonar/api/config/PropertyFieldDefinition;
     285: iconst_0
     286: anewarray     #29                 // class org/sonar/api/config/PropertyFieldDefinition
     289: invokevirtual #33                 // Method org/sonar/api/config/PropertyDefinition$Builder.fields:(Lorg/sonar/api/config/PropertyFieldDefinition;[Lorg/sonar/api/config/PropertyFieldDefinition;)Lorg/sonar/api/config/PropertyDefinition$Builder;
     292: invokevirtual #34                 // Method org/sonar/api/config/PropertyDefinition$Builder.build:()Lorg/sonar/api/config/PropertyDefinition;
     295: ldc           #50                 // String sonar.issue.enforce.multicriteria
     297: invokestatic  #4                  // Method org/sonar/api/config/PropertyDefinition.builder:(Ljava/lang/String;)Lorg/sonar/api/config/PropertyDefinition$Builder;
     300: ldc           #6                  // String exclusions
     302: invokevirtual #7                  // Method org/sonar/api/config/PropertyDefinition$Builder.category:(Ljava/lang/String;)Lorg/sonar/api/config/PropertyDefinition$Builder;
     305: ldc           #8                  // String issues
     307: invokevirtual #9                  // Method org/sonar/api/config/PropertyDefinition$Builder.subCategory:(Ljava/lang/String;)Lorg/sonar/api/config/PropertyDefinition$Builder;
     310: ldc           #51                 // String Restrict Scope of Coding Rules
     312: invokevirtual #11                 // Method org/sonar/api/config/PropertyDefinition$Builder.name:(Ljava/lang/String;)Lorg/sonar/api/config/PropertyDefinition$Builder;
     315: ldc           #52                 // String Patterns to restrict the application of a rule to only certain components, ignoring all others.<br/>A rule key pattern consists of the rule repository name, followed by a colon, followed by a rule key or rule name fragment. For example:<ul><li>squid:S1195</li><li>squid:*Naming*</li></ul>
     317: invokevirtual #13                 // Method org/sonar/api/config/PropertyDefinition$Builder.description:(Ljava/lang/String;)Lorg/sonar/api/config/PropertyDefinition$Builder;
     320: ldc           #15                 // String TRK
     322: iconst_0
     323: anewarray     #16                 // class java/lang/String
     326: invokevirtual #17                 // Method org/sonar/api/config/PropertyDefinition$Builder.onQualifiers:(Ljava/lang/String;[Ljava/lang/String;)Lorg/sonar/api/config/PropertyDefinition$Builder;
     329: iconst_4
     330: invokevirtual #18                 // Method org/sonar/api/config/PropertyDefinition$Builder.index:(I)Lorg/sonar/api/config/PropertyDefinition$Builder;
     333: ldc           #19                 // String ruleKey
     335: invokestatic  #20                 // Method org/sonar/api/config/PropertyFieldDefinition.build:(Ljava/lang/String;)Lorg/sonar/api/config/PropertyFieldDefinition$Builder;
     338: ldc           #21                 // String Rule Key Pattern
     340: invokevirtual #22                 // Method org/sonar/api/config/PropertyFieldDefinition$Builder.name:(Ljava/lang/String;)Lorg/sonar/api/config/PropertyFieldDefinition$Builder;
     343: ldc           #53                 // String Pattern used to match rules which should be restricted.
     345: invokevirtual #24                 // Method org/sonar/api/config/PropertyFieldDefinition$Builder.description:(Ljava/lang/String;)Lorg/sonar/api/config/PropertyFieldDefinition$Builder;
     348: getstatic     #25                 // Field org/sonar/api/PropertyType.STRING:Lorg/sonar/api/PropertyType;
     351: invokevirtual #26                 // Method org/sonar/api/config/PropertyFieldDefinition$Builder.type:(Lorg/sonar/api/PropertyType;)Lorg/sonar/api/config/PropertyFieldDefinition$Builder;
     354: bipush        40
     356: invokevirtual #27                 // Method org/sonar/api/config/PropertyFieldDefinition$Builder.indicativeSize:(I)Lorg/sonar/api/config/PropertyFieldDefinition$Builder;
     359: invokevirtual #28                 // Method org/sonar/api/config/PropertyFieldDefinition$Builder.build:()Lorg/sonar/api/config/PropertyFieldDefinition;
     362: iconst_1
     363: anewarray     #29                 // class org/sonar/api/config/PropertyFieldDefinition
     366: dup
     367: iconst_0
     368: ldc           #30                 // String resourceKey
     370: invokestatic  #20                 // Method org/sonar/api/config/PropertyFieldDefinition.build:(Ljava/lang/String;)Lorg/sonar/api/config/PropertyFieldDefinition$Builder;
     373: ldc           #31                 // String File Path Pattern
     375: invokevirtual #22                 // Method org/sonar/api/config/PropertyFieldDefinition$Builder.name:(Ljava/lang/String;)Lorg/sonar/api/config/PropertyFieldDefinition$Builder;
     378: ldc           #54                 // String Pattern used to match files to which the rules should be restricted.
     380: invokevirtual #24                 // Method org/sonar/api/config/PropertyFieldDefinition$Builder.description:(Ljava/lang/String;)Lorg/sonar/api/config/PropertyFieldDefinition$Builder;
     383: getstatic     #25                 // Field org/sonar/api/PropertyType.STRING:Lorg/sonar/api/PropertyType;
     386: invokevirtual #26                 // Method org/sonar/api/config/PropertyFieldDefinition$Builder.type:(Lorg/sonar/api/PropertyType;)Lorg/sonar/api/config/PropertyFieldDefinition$Builder;
     389: bipush        40
     391: invokevirtual #27                 // Method org/sonar/api/config/PropertyFieldDefinition$Builder.indicativeSize:(I)Lorg/sonar/api/config/PropertyFieldDefinition$Builder;
     394: invokevirtual #28                 // Method org/sonar/api/config/PropertyFieldDefinition$Builder.build:()Lorg/sonar/api/config/PropertyFieldDefinition;
     397: aastore
     398: invokevirtual #33                 // Method org/sonar/api/config/PropertyDefinition$Builder.fields:(Lorg/sonar/api/config/PropertyFieldDefinition;[Lorg/sonar/api/config/PropertyFieldDefinition;)Lorg/sonar/api/config/PropertyDefinition$Builder;
     401: invokevirtual #34                 // Method org/sonar/api/config/PropertyDefinition$Builder.build:()Lorg/sonar/api/config/PropertyDefinition;
     404: invokestatic  #55                 // Method com/google/common/collect/ImmutableList.of:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableList;
     407: areturn
}
