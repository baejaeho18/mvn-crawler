Compiled from "PluginClassLoaderDef.java"
class org.sonar.core.platform.PluginClassLoaderDef {
  private final java.lang.String basePluginKey;

  private final java.util.Map<java.lang.String, java.lang.String> mainClassesByPluginKey;

  private final java.util.List<java.io.File> files;

  private final org.sonar.classloader.Mask mask;

  private boolean selfFirstStrategy;

  private boolean compatibilityMode;

  private boolean privileged;

  org.sonar.core.platform.PluginClassLoaderDef(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/HashMap
       8: dup
       9: invokespecial #3                  // Method java/util/HashMap."<init>":()V
      12: putfield      #4                  // Field mainClassesByPluginKey:Ljava/util/Map;
      15: aload_0
      16: new           #5                  // class java/util/ArrayList
      19: dup
      20: invokespecial #6                  // Method java/util/ArrayList."<init>":()V
      23: putfield      #7                  // Field files:Ljava/util/List;
      26: aload_0
      27: new           #8                  // class org/sonar/classloader/Mask
      30: dup
      31: invokespecial #9                  // Method org/sonar/classloader/Mask."<init>":()V
      34: putfield      #10                 // Field mask:Lorg/sonar/classloader/Mask;
      37: aload_0
      38: iconst_0
      39: putfield      #11                 // Field selfFirstStrategy:Z
      42: aload_0
      43: iconst_0
      44: putfield      #12                 // Field compatibilityMode:Z
      47: aload_0
      48: iconst_0
      49: putfield      #13                 // Field privileged:Z
      52: aload_1
      53: invokestatic  #14                 // Method com/google/common/base/Strings.isNullOrEmpty:(Ljava/lang/String;)Z
      56: ifne          63
      59: iconst_1
      60: goto          64
      63: iconst_0
      64: invokestatic  #15                 // Method com/google/common/base/Preconditions.checkArgument:(Z)V
      67: aload_0
      68: aload_1
      69: putfield      #16                 // Field basePluginKey:Ljava/lang/String;
      72: return

  java.lang.String getBasePluginKey();
    Code:
       0: aload_0
       1: getfield      #16                 // Field basePluginKey:Ljava/lang/String;
       4: areturn

  java.util.List<java.io.File> getFiles();
    Code:
       0: aload_0
       1: getfield      #7                  // Field files:Ljava/util/List;
       4: areturn

  void addFiles(java.util.Collection<java.io.File>);
    Code:
       0: aload_0
       1: getfield      #7                  // Field files:Ljava/util/List;
       4: aload_1
       5: invokeinterface #17,  2           // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
      10: pop
      11: return

  org.sonar.classloader.Mask getExportMask();
    Code:
       0: aload_0
       1: getfield      #10                 // Field mask:Lorg/sonar/classloader/Mask;
       4: areturn

  boolean isSelfFirstStrategy();
    Code:
       0: aload_0
       1: getfield      #11                 // Field selfFirstStrategy:Z
       4: ireturn

  void setSelfFirstStrategy(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #11                 // Field selfFirstStrategy:Z
       5: return

  java.util.Map<java.lang.String, java.lang.String> getMainClassesByPluginKey();
    Code:
       0: aload_0
       1: getfield      #4                  // Field mainClassesByPluginKey:Ljava/util/Map;
       4: areturn

  void addMainClass(java.lang.String, java.lang.String);
    Code:
       0: aload_2
       1: invokestatic  #14                 // Method com/google/common/base/Strings.isNullOrEmpty:(Ljava/lang/String;)Z
       4: ifne          19
       7: aload_0
       8: getfield      #4                  // Field mainClassesByPluginKey:Ljava/util/Map;
      11: aload_1
      12: aload_2
      13: invokeinterface #18,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      18: pop
      19: return

  boolean isCompatibilityMode();
    Code:
       0: aload_0
       1: getfield      #12                 // Field compatibilityMode:Z
       4: ireturn

  void setCompatibilityMode(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #12                 // Field compatibilityMode:Z
       5: return

  boolean isPrivileged();
    Code:
       0: aload_0
       1: getfield      #13                 // Field privileged:Z
       4: ireturn

  void setPrivileged(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #13                 // Field privileged:Z
       5: return

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: ifnull        22
      11: aload_0
      12: invokevirtual #19                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      15: aload_1
      16: invokevirtual #19                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      19: if_acmpeq     24
      22: iconst_0
      23: ireturn
      24: aload_1
      25: checkcast     #20                 // class org/sonar/core/platform/PluginClassLoaderDef
      28: astore_2
      29: aload_0
      30: getfield      #16                 // Field basePluginKey:Ljava/lang/String;
      33: aload_2
      34: getfield      #16                 // Field basePluginKey:Ljava/lang/String;
      37: invokevirtual #21                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      40: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #16                 // Field basePluginKey:Ljava/lang/String;
       4: invokevirtual #22                 // Method java/lang/String.hashCode:()I
       7: ireturn
}
