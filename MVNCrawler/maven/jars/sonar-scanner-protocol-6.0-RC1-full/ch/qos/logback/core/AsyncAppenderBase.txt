Compiled from "AsyncAppenderBase.java"
public class ch.qos.logback.core.AsyncAppenderBase<E> extends ch.qos.logback.core.UnsynchronizedAppenderBase<E> implements ch.qos.logback.core.spi.AppenderAttachable<E> {
  ch.qos.logback.core.spi.AppenderAttachableImpl<E> aai;

  java.util.concurrent.BlockingQueue<E> blockingQueue;

  public static final int DEFAULT_QUEUE_SIZE;

  int queueSize;

  int appenderCount;

  static final int UNDEFINED;

  int discardingThreshold;

  ch.qos.logback.core.AsyncAppenderBase<E>.Worker worker;

  public static final int DEFAULT_MAX_FLUSH_TIME;

  int maxFlushTime;

  public ch.qos.logback.core.AsyncAppenderBase();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method ch/qos/logback/core/UnsynchronizedAppenderBase."<init>":()V
       4: aload_0
       5: new           #2                  // class ch/qos/logback/core/spi/AppenderAttachableImpl
       8: dup
       9: invokespecial #3                  // Method ch/qos/logback/core/spi/AppenderAttachableImpl."<init>":()V
      12: putfield      #4                  // Field aai:Lch/qos/logback/core/spi/AppenderAttachableImpl;
      15: aload_0
      16: sipush        256
      19: putfield      #5                  // Field queueSize:I
      22: aload_0
      23: iconst_0
      24: putfield      #6                  // Field appenderCount:I
      27: aload_0
      28: iconst_m1
      29: putfield      #7                  // Field discardingThreshold:I
      32: aload_0
      33: new           #8                  // class ch/qos/logback/core/AsyncAppenderBase$Worker
      36: dup
      37: aload_0
      38: invokespecial #9                  // Method ch/qos/logback/core/AsyncAppenderBase$Worker."<init>":(Lch/qos/logback/core/AsyncAppenderBase;)V
      41: putfield      #10                 // Field worker:Lch/qos/logback/core/AsyncAppenderBase$Worker;
      44: aload_0
      45: sipush        1000
      48: putfield      #11                 // Field maxFlushTime:I
      51: return

  protected boolean isDiscardable(E);
    Code:
       0: iconst_0
       1: ireturn

  protected void preprocess(E);
    Code:
       0: return

  public void start();
    Code:
       0: aload_0
       1: getfield      #6                  // Field appenderCount:I
       4: ifne          14
       7: aload_0
       8: ldc           #12                 // String No attached appenders found.
      10: invokevirtual #13                 // Method addError:(Ljava/lang/String;)V
      13: return
      14: aload_0
      15: getfield      #5                  // Field queueSize:I
      18: iconst_1
      19: if_icmpge     54
      22: aload_0
      23: new           #14                 // class java/lang/StringBuilder
      26: dup
      27: invokespecial #15                 // Method java/lang/StringBuilder."<init>":()V
      30: ldc           #16                 // String Invalid queue size [
      32: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: aload_0
      36: getfield      #5                  // Field queueSize:I
      39: invokevirtual #18                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      42: ldc           #19                 // String ]
      44: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      47: invokevirtual #20                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      50: invokevirtual #13                 // Method addError:(Ljava/lang/String;)V
      53: return
      54: aload_0
      55: new           #21                 // class java/util/concurrent/ArrayBlockingQueue
      58: dup
      59: aload_0
      60: getfield      #5                  // Field queueSize:I
      63: invokespecial #22                 // Method java/util/concurrent/ArrayBlockingQueue."<init>":(I)V
      66: putfield      #23                 // Field blockingQueue:Ljava/util/concurrent/BlockingQueue;
      69: aload_0
      70: getfield      #7                  // Field discardingThreshold:I
      73: iconst_m1
      74: if_icmpne     87
      77: aload_0
      78: aload_0
      79: getfield      #5                  // Field queueSize:I
      82: iconst_5
      83: idiv
      84: putfield      #7                  // Field discardingThreshold:I
      87: aload_0
      88: new           #14                 // class java/lang/StringBuilder
      91: dup
      92: invokespecial #15                 // Method java/lang/StringBuilder."<init>":()V
      95: ldc           #24                 // String Setting discardingThreshold to
      97: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     100: aload_0
     101: getfield      #7                  // Field discardingThreshold:I
     104: invokevirtual #18                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     107: invokevirtual #20                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     110: invokevirtual #25                 // Method addInfo:(Ljava/lang/String;)V
     113: aload_0
     114: getfield      #10                 // Field worker:Lch/qos/logback/core/AsyncAppenderBase$Worker;
     117: iconst_1
     118: invokevirtual #26                 // Method ch/qos/logback/core/AsyncAppenderBase$Worker.setDaemon:(Z)V
     121: aload_0
     122: getfield      #10                 // Field worker:Lch/qos/logback/core/AsyncAppenderBase$Worker;
     125: new           #14                 // class java/lang/StringBuilder
     128: dup
     129: invokespecial #15                 // Method java/lang/StringBuilder."<init>":()V
     132: ldc           #27                 // String AsyncAppender-Worker-
     134: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     137: aload_0
     138: invokevirtual #28                 // Method getName:()Ljava/lang/String;
     141: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     144: invokevirtual #20                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     147: invokevirtual #29                 // Method ch/qos/logback/core/AsyncAppenderBase$Worker.setName:(Ljava/lang/String;)V
     150: aload_0
     151: invokespecial #30                 // Method ch/qos/logback/core/UnsynchronizedAppenderBase.start:()V
     154: aload_0
     155: getfield      #10                 // Field worker:Lch/qos/logback/core/AsyncAppenderBase$Worker;
     158: invokevirtual #31                 // Method ch/qos/logback/core/AsyncAppenderBase$Worker.start:()V
     161: return

  public void stop();
    Code:
       0: aload_0
       1: invokevirtual #32                 // Method isStarted:()Z
       4: ifne          8
       7: return
       8: aload_0
       9: invokespecial #33                 // Method ch/qos/logback/core/UnsynchronizedAppenderBase.stop:()V
      12: aload_0
      13: getfield      #10                 // Field worker:Lch/qos/logback/core/AsyncAppenderBase$Worker;
      16: invokevirtual #34                 // Method ch/qos/logback/core/AsyncAppenderBase$Worker.interrupt:()V
      19: aload_0
      20: getfield      #10                 // Field worker:Lch/qos/logback/core/AsyncAppenderBase$Worker;
      23: aload_0
      24: getfield      #11                 // Field maxFlushTime:I
      27: i2l
      28: invokevirtual #35                 // Method ch/qos/logback/core/AsyncAppenderBase$Worker.join:(J)V
      31: aload_0
      32: getfield      #10                 // Field worker:Lch/qos/logback/core/AsyncAppenderBase$Worker;
      35: invokevirtual #36                 // Method ch/qos/logback/core/AsyncAppenderBase$Worker.isAlive:()Z
      38: ifeq          92
      41: aload_0
      42: new           #14                 // class java/lang/StringBuilder
      45: dup
      46: invokespecial #15                 // Method java/lang/StringBuilder."<init>":()V
      49: ldc           #37                 // String Max queue flush timeout (
      51: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      54: aload_0
      55: getfield      #11                 // Field maxFlushTime:I
      58: invokevirtual #18                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      61: ldc           #38                 // String  ms) exceeded. Approximately
      63: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      66: aload_0
      67: getfield      #23                 // Field blockingQueue:Ljava/util/concurrent/BlockingQueue;
      70: invokeinterface #39,  1           // InterfaceMethod java/util/concurrent/BlockingQueue.size:()I
      75: invokevirtual #18                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      78: ldc           #40                 // String  queued events were possibly discarded.
      80: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      83: invokevirtual #20                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      86: invokevirtual #41                 // Method addWarn:(Ljava/lang/String;)V
      89: goto          98
      92: aload_0
      93: ldc           #42                 // String Queue flush finished successfully within timeout.
      95: invokevirtual #25                 // Method addInfo:(Ljava/lang/String;)V
      98: goto          139
     101: astore_1
     102: aload_0
     103: new           #14                 // class java/lang/StringBuilder
     106: dup
     107: invokespecial #15                 // Method java/lang/StringBuilder."<init>":()V
     110: ldc           #44                 // String Failed to join worker thread.
     112: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     115: aload_0
     116: getfield      #23                 // Field blockingQueue:Ljava/util/concurrent/BlockingQueue;
     119: invokeinterface #39,  1           // InterfaceMethod java/util/concurrent/BlockingQueue.size:()I
     124: invokevirtual #18                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     127: ldc           #45                 // String  queued events may be discarded.
     129: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     132: invokevirtual #20                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     135: aload_1
     136: invokevirtual #46                 // Method addError:(Ljava/lang/String;Ljava/lang/Throwable;)V
     139: return
    Exception table:
       from    to  target type
          19    98   101   Class java/lang/InterruptedException

  protected void append(E);
    Code:
       0: aload_0
       1: invokespecial #47                 // Method isQueueBelowDiscardingThreshold:()Z
       4: ifeq          16
       7: aload_0
       8: aload_1
       9: invokevirtual #48                 // Method isDiscardable:(Ljava/lang/Object;)Z
      12: ifeq          16
      15: return
      16: aload_0
      17: aload_1
      18: invokevirtual #49                 // Method preprocess:(Ljava/lang/Object;)V
      21: aload_0
      22: aload_1
      23: invokespecial #50                 // Method put:(Ljava/lang/Object;)V
      26: return

  private boolean isQueueBelowDiscardingThreshold();
    Code:
       0: aload_0
       1: getfield      #23                 // Field blockingQueue:Ljava/util/concurrent/BlockingQueue;
       4: invokeinterface #51,  1           // InterfaceMethod java/util/concurrent/BlockingQueue.remainingCapacity:()I
       9: aload_0
      10: getfield      #7                  // Field discardingThreshold:I
      13: if_icmpge     20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: ireturn

  private void put(E);
    Code:
       0: aload_0
       1: getfield      #23                 // Field blockingQueue:Ljava/util/concurrent/BlockingQueue;
       4: aload_1
       5: invokeinterface #52,  2           // InterfaceMethod java/util/concurrent/BlockingQueue.put:(Ljava/lang/Object;)V
      10: goto          14
      13: astore_2
      14: return
    Exception table:
       from    to  target type
           0    10    13   Class java/lang/InterruptedException

  public int getQueueSize();
    Code:
       0: aload_0
       1: getfield      #5                  // Field queueSize:I
       4: ireturn

  public void setQueueSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #5                  // Field queueSize:I
       5: return

  public int getDiscardingThreshold();
    Code:
       0: aload_0
       1: getfield      #7                  // Field discardingThreshold:I
       4: ireturn

  public void setDiscardingThreshold(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #7                  // Field discardingThreshold:I
       5: return

  public int getMaxFlushTime();
    Code:
       0: aload_0
       1: getfield      #11                 // Field maxFlushTime:I
       4: ireturn

  public void setMaxFlushTime(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #11                 // Field maxFlushTime:I
       5: return

  public int getNumberOfElementsInQueue();
    Code:
       0: aload_0
       1: getfield      #23                 // Field blockingQueue:Ljava/util/concurrent/BlockingQueue;
       4: invokeinterface #39,  1           // InterfaceMethod java/util/concurrent/BlockingQueue.size:()I
       9: ireturn

  public int getRemainingCapacity();
    Code:
       0: aload_0
       1: getfield      #23                 // Field blockingQueue:Ljava/util/concurrent/BlockingQueue;
       4: invokeinterface #51,  1           // InterfaceMethod java/util/concurrent/BlockingQueue.remainingCapacity:()I
       9: ireturn

  public void addAppender(ch.qos.logback.core.Appender<E>);
    Code:
       0: aload_0
       1: getfield      #6                  // Field appenderCount:I
       4: ifne          61
       7: aload_0
       8: dup
       9: getfield      #6                  // Field appenderCount:I
      12: iconst_1
      13: iadd
      14: putfield      #6                  // Field appenderCount:I
      17: aload_0
      18: new           #14                 // class java/lang/StringBuilder
      21: dup
      22: invokespecial #15                 // Method java/lang/StringBuilder."<init>":()V
      25: ldc           #53                 // String Attaching appender named [
      27: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: aload_1
      31: invokeinterface #54,  1           // InterfaceMethod ch/qos/logback/core/Appender.getName:()Ljava/lang/String;
      36: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: ldc           #55                 // String ] to AsyncAppender.
      41: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      44: invokevirtual #20                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      47: invokevirtual #25                 // Method addInfo:(Ljava/lang/String;)V
      50: aload_0
      51: getfield      #4                  // Field aai:Lch/qos/logback/core/spi/AppenderAttachableImpl;
      54: aload_1
      55: invokevirtual #56                 // Method ch/qos/logback/core/spi/AppenderAttachableImpl.addAppender:(Lch/qos/logback/core/Appender;)V
      58: goto          100
      61: aload_0
      62: ldc           #57                 // String One and only one appender may be attached to AsyncAppender.
      64: invokevirtual #41                 // Method addWarn:(Ljava/lang/String;)V
      67: aload_0
      68: new           #14                 // class java/lang/StringBuilder
      71: dup
      72: invokespecial #15                 // Method java/lang/StringBuilder."<init>":()V
      75: ldc           #58                 // String Ignoring additional appender named [
      77: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      80: aload_1
      81: invokeinterface #54,  1           // InterfaceMethod ch/qos/logback/core/Appender.getName:()Ljava/lang/String;
      86: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      89: ldc           #19                 // String ]
      91: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      94: invokevirtual #20                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      97: invokevirtual #41                 // Method addWarn:(Ljava/lang/String;)V
     100: return

  public java.util.Iterator<ch.qos.logback.core.Appender<E>> iteratorForAppenders();
    Code:
       0: aload_0
       1: getfield      #4                  // Field aai:Lch/qos/logback/core/spi/AppenderAttachableImpl;
       4: invokevirtual #59                 // Method ch/qos/logback/core/spi/AppenderAttachableImpl.iteratorForAppenders:()Ljava/util/Iterator;
       7: areturn

  public ch.qos.logback.core.Appender<E> getAppender(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #4                  // Field aai:Lch/qos/logback/core/spi/AppenderAttachableImpl;
       4: aload_1
       5: invokevirtual #60                 // Method ch/qos/logback/core/spi/AppenderAttachableImpl.getAppender:(Ljava/lang/String;)Lch/qos/logback/core/Appender;
       8: areturn

  public boolean isAttached(ch.qos.logback.core.Appender<E>);
    Code:
       0: aload_0
       1: getfield      #4                  // Field aai:Lch/qos/logback/core/spi/AppenderAttachableImpl;
       4: aload_1
       5: invokevirtual #61                 // Method ch/qos/logback/core/spi/AppenderAttachableImpl.isAttached:(Lch/qos/logback/core/Appender;)Z
       8: ireturn

  public void detachAndStopAllAppenders();
    Code:
       0: aload_0
       1: getfield      #4                  // Field aai:Lch/qos/logback/core/spi/AppenderAttachableImpl;
       4: invokevirtual #62                 // Method ch/qos/logback/core/spi/AppenderAttachableImpl.detachAndStopAllAppenders:()V
       7: return

  public boolean detachAppender(ch.qos.logback.core.Appender<E>);
    Code:
       0: aload_0
       1: getfield      #4                  // Field aai:Lch/qos/logback/core/spi/AppenderAttachableImpl;
       4: aload_1
       5: invokevirtual #63                 // Method ch/qos/logback/core/spi/AppenderAttachableImpl.detachAppender:(Lch/qos/logback/core/Appender;)Z
       8: ireturn

  public boolean detachAppender(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #4                  // Field aai:Lch/qos/logback/core/spi/AppenderAttachableImpl;
       4: aload_1
       5: invokevirtual #64                 // Method ch/qos/logback/core/spi/AppenderAttachableImpl.detachAppender:(Ljava/lang/String;)Z
       8: ireturn
}
