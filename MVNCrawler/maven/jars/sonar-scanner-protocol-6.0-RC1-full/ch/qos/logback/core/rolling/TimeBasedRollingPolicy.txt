Compiled from "TimeBasedRollingPolicy.java"
public class ch.qos.logback.core.rolling.TimeBasedRollingPolicy<E> extends ch.qos.logback.core.rolling.RollingPolicyBase implements ch.qos.logback.core.rolling.TriggeringPolicy<E> {
  static final java.lang.String FNP_NOT_SET;

  static final int INFINITE_HISTORY;

  ch.qos.logback.core.rolling.helper.FileNamePattern fileNamePatternWCS;

  private ch.qos.logback.core.rolling.helper.Compressor compressor;

  private ch.qos.logback.core.rolling.helper.RenameUtil renameUtil;

  java.util.concurrent.Future<?> future;

  private int maxHistory;

  private ch.qos.logback.core.rolling.helper.ArchiveRemover archiveRemover;

  ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy<E> timeBasedFileNamingAndTriggeringPolicy;

  boolean cleanHistoryOnStart;

  public ch.qos.logback.core.rolling.TimeBasedRollingPolicy();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method ch/qos/logback/core/rolling/RollingPolicyBase."<init>":()V
       4: aload_0
       5: new           #2                  // class ch/qos/logback/core/rolling/helper/RenameUtil
       8: dup
       9: invokespecial #3                  // Method ch/qos/logback/core/rolling/helper/RenameUtil."<init>":()V
      12: putfield      #4                  // Field renameUtil:Lch/qos/logback/core/rolling/helper/RenameUtil;
      15: aload_0
      16: iconst_0
      17: putfield      #5                  // Field maxHistory:I
      20: aload_0
      21: iconst_0
      22: putfield      #6                  // Field cleanHistoryOnStart:Z
      25: return

  public void start();
    Code:
       0: aload_0
       1: getfield      #4                  // Field renameUtil:Lch/qos/logback/core/rolling/helper/RenameUtil;
       4: aload_0
       5: getfield      #7                  // Field context:Lch/qos/logback/core/Context;
       8: invokevirtual #8                  // Method ch/qos/logback/core/rolling/helper/RenameUtil.setContext:(Lch/qos/logback/core/Context;)V
      11: aload_0
      12: getfield      #9                  // Field fileNamePatternStr:Ljava/lang/String;
      15: ifnull        44
      18: aload_0
      19: new           #10                 // class ch/qos/logback/core/rolling/helper/FileNamePattern
      22: dup
      23: aload_0
      24: getfield      #9                  // Field fileNamePatternStr:Ljava/lang/String;
      27: aload_0
      28: getfield      #7                  // Field context:Lch/qos/logback/core/Context;
      31: invokespecial #11                 // Method ch/qos/logback/core/rolling/helper/FileNamePattern."<init>":(Ljava/lang/String;Lch/qos/logback/core/Context;)V
      34: putfield      #12                 // Field fileNamePattern:Lch/qos/logback/core/rolling/helper/FileNamePattern;
      37: aload_0
      38: invokevirtual #13                 // Method determineCompressionMode:()V
      41: goto          66
      44: aload_0
      45: ldc           #14                 // String The FileNamePattern option must be set before using TimeBasedRollingPolicy.
      47: invokevirtual #15                 // Method addWarn:(Ljava/lang/String;)V
      50: aload_0
      51: ldc           #16                 // String See also http://logback.qos.ch/codes.html#tbr_fnp_not_set
      53: invokevirtual #15                 // Method addWarn:(Ljava/lang/String;)V
      56: new           #17                 // class java/lang/IllegalStateException
      59: dup
      60: ldc           #18                 // String The FileNamePattern option must be set before using TimeBasedRollingPolicy. See also http://logback.qos.ch/codes.html#tbr_fnp_not_set
      62: invokespecial #19                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      65: athrow
      66: aload_0
      67: new           #20                 // class ch/qos/logback/core/rolling/helper/Compressor
      70: dup
      71: aload_0
      72: getfield      #21                 // Field compressionMode:Lch/qos/logback/core/rolling/helper/CompressionMode;
      75: invokespecial #22                 // Method ch/qos/logback/core/rolling/helper/Compressor."<init>":(Lch/qos/logback/core/rolling/helper/CompressionMode;)V
      78: putfield      #23                 // Field compressor:Lch/qos/logback/core/rolling/helper/Compressor;
      81: aload_0
      82: getfield      #23                 // Field compressor:Lch/qos/logback/core/rolling/helper/Compressor;
      85: aload_0
      86: getfield      #7                  // Field context:Lch/qos/logback/core/Context;
      89: invokevirtual #24                 // Method ch/qos/logback/core/rolling/helper/Compressor.setContext:(Lch/qos/logback/core/Context;)V
      92: aload_0
      93: new           #10                 // class ch/qos/logback/core/rolling/helper/FileNamePattern
      96: dup
      97: aload_0
      98: getfield      #9                  // Field fileNamePatternStr:Ljava/lang/String;
     101: aload_0
     102: getfield      #21                 // Field compressionMode:Lch/qos/logback/core/rolling/helper/CompressionMode;
     105: invokestatic  #25                 // Method ch/qos/logback/core/rolling/helper/Compressor.computeFileNameStr_WCS:(Ljava/lang/String;Lch/qos/logback/core/rolling/helper/CompressionMode;)Ljava/lang/String;
     108: aload_0
     109: getfield      #7                  // Field context:Lch/qos/logback/core/Context;
     112: invokespecial #11                 // Method ch/qos/logback/core/rolling/helper/FileNamePattern."<init>":(Ljava/lang/String;Lch/qos/logback/core/Context;)V
     115: putfield      #26                 // Field fileNamePatternWCS:Lch/qos/logback/core/rolling/helper/FileNamePattern;
     118: aload_0
     119: new           #27                 // class java/lang/StringBuilder
     122: dup
     123: invokespecial #28                 // Method java/lang/StringBuilder."<init>":()V
     126: ldc           #29                 // String Will use the pattern
     128: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     131: aload_0
     132: getfield      #26                 // Field fileNamePatternWCS:Lch/qos/logback/core/rolling/helper/FileNamePattern;
     135: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     138: ldc           #32                 // String  for the active file
     140: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     143: invokevirtual #33                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     146: invokevirtual #34                 // Method addInfo:(Ljava/lang/String;)V
     149: aload_0
     150: getfield      #21                 // Field compressionMode:Lch/qos/logback/core/rolling/helper/CompressionMode;
     153: getstatic     #35                 // Field ch/qos/logback/core/rolling/helper/CompressionMode.ZIP:Lch/qos/logback/core/rolling/helper/CompressionMode;
     156: if_acmpne     184
     159: aload_0
     160: aload_0
     161: getfield      #9                  // Field fileNamePatternStr:Ljava/lang/String;
     164: invokespecial #36                 // Method transformFileNamePattern2ZipEntry:(Ljava/lang/String;)Ljava/lang/String;
     167: astore_1
     168: aload_0
     169: new           #10                 // class ch/qos/logback/core/rolling/helper/FileNamePattern
     172: dup
     173: aload_1
     174: aload_0
     175: getfield      #7                  // Field context:Lch/qos/logback/core/Context;
     178: invokespecial #11                 // Method ch/qos/logback/core/rolling/helper/FileNamePattern."<init>":(Ljava/lang/String;Lch/qos/logback/core/Context;)V
     181: putfield      #37                 // Field zipEntryFileNamePattern:Lch/qos/logback/core/rolling/helper/FileNamePattern;
     184: aload_0
     185: getfield      #38                 // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
     188: ifnonnull     202
     191: aload_0
     192: new           #39                 // class ch/qos/logback/core/rolling/DefaultTimeBasedFileNamingAndTriggeringPolicy
     195: dup
     196: invokespecial #40                 // Method ch/qos/logback/core/rolling/DefaultTimeBasedFileNamingAndTriggeringPolicy."<init>":()V
     199: putfield      #38                 // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
     202: aload_0
     203: getfield      #38                 // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
     206: aload_0
     207: getfield      #7                  // Field context:Lch/qos/logback/core/Context;
     210: invokeinterface #41,  2           // InterfaceMethod ch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy.setContext:(Lch/qos/logback/core/Context;)V
     215: aload_0
     216: getfield      #38                 // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
     219: aload_0
     220: invokeinterface #42,  2           // InterfaceMethod ch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy.setTimeBasedRollingPolicy:(Lch/qos/logback/core/rolling/TimeBasedRollingPolicy;)V
     225: aload_0
     226: getfield      #38                 // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
     229: invokeinterface #43,  1           // InterfaceMethod ch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy.start:()V
     234: aload_0
     235: getfield      #5                  // Field maxHistory:I
     238: ifeq          305
     241: aload_0
     242: aload_0
     243: getfield      #38                 // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
     246: invokeinterface #44,  1           // InterfaceMethod ch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy.getArchiveRemover:()Lch/qos/logback/core/rolling/helper/ArchiveRemover;
     251: putfield      #45                 // Field archiveRemover:Lch/qos/logback/core/rolling/helper/ArchiveRemover;
     254: aload_0
     255: getfield      #45                 // Field archiveRemover:Lch/qos/logback/core/rolling/helper/ArchiveRemover;
     258: aload_0
     259: getfield      #5                  // Field maxHistory:I
     262: invokeinterface #46,  2           // InterfaceMethod ch/qos/logback/core/rolling/helper/ArchiveRemover.setMaxHistory:(I)V
     267: aload_0
     268: getfield      #6                  // Field cleanHistoryOnStart:Z
     271: ifeq          305
     274: aload_0
     275: ldc           #47                 // String Cleaning on start up
     277: invokevirtual #34                 // Method addInfo:(Ljava/lang/String;)V
     280: aload_0
     281: getfield      #45                 // Field archiveRemover:Lch/qos/logback/core/rolling/helper/ArchiveRemover;
     284: new           #48                 // class java/util/Date
     287: dup
     288: aload_0
     289: getfield      #38                 // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
     292: invokeinterface #49,  1           // InterfaceMethod ch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy.getCurrentTime:()J
     297: invokespecial #50                 // Method java/util/Date."<init>":(J)V
     300: invokeinterface #51,  2           // InterfaceMethod ch/qos/logback/core/rolling/helper/ArchiveRemover.clean:(Ljava/util/Date;)V
     305: aload_0
     306: invokespecial #52                 // Method ch/qos/logback/core/rolling/RollingPolicyBase.start:()V
     309: return

  public void stop();
    Code:
       0: aload_0
       1: invokevirtual #53                 // Method isStarted:()Z
       4: ifne          8
       7: return
       8: aload_0
       9: invokespecial #54                 // Method waitForAsynchronousJobToStop:()V
      12: aload_0
      13: invokespecial #55                 // Method ch/qos/logback/core/rolling/RollingPolicyBase.stop:()V
      16: return

  private void waitForAsynchronousJobToStop();
    Code:
       0: aload_0
       1: getfield      #56                 // Field future:Ljava/util/concurrent/Future;
       4: ifnull        45
       7: aload_0
       8: getfield      #56                 // Field future:Ljava/util/concurrent/Future;
      11: ldc2_w        #57                 // long 30l
      14: getstatic     #59                 // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
      17: invokeinterface #60,  4           // InterfaceMethod java/util/concurrent/Future.get:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;
      22: pop
      23: goto          45
      26: astore_1
      27: aload_0
      28: ldc           #62                 // String Timeout while waiting for compression job to finish
      30: aload_1
      31: invokevirtual #63                 // Method addError:(Ljava/lang/String;Ljava/lang/Throwable;)V
      34: goto          45
      37: astore_1
      38: aload_0
      39: ldc           #65                 // String Unexpected exception while waiting for compression job to finish
      41: aload_1
      42: invokevirtual #63                 // Method addError:(Ljava/lang/String;Ljava/lang/Throwable;)V
      45: return
    Exception table:
       from    to  target type
           7    23    26   Class java/util/concurrent/TimeoutException
           7    23    37   Class java/lang/Exception

  private java.lang.String transformFileNamePattern2ZipEntry(java.lang.String);
    Code:
       0: aload_1
       1: invokestatic  #66                 // Method ch/qos/logback/core/rolling/helper/FileFilterUtil.slashify:(Ljava/lang/String;)Ljava/lang/String;
       4: astore_2
       5: aload_2
       6: invokestatic  #67                 // Method ch/qos/logback/core/rolling/helper/FileFilterUtil.afterLastSlash:(Ljava/lang/String;)Ljava/lang/String;
       9: areturn

  public void setTimeBasedFileNamingAndTriggeringPolicy(ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy<E>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #38                 // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
       5: return

  public ch.qos.logback.core.rolling.TimeBasedFileNamingAndTriggeringPolicy<E> getTimeBasedFileNamingAndTriggeringPolicy();
    Code:
       0: aload_0
       1: getfield      #38                 // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
       4: areturn

  public void rollover() throws ch.qos.logback.core.rolling.RolloverFailure;
    Code:
       0: aload_0
       1: getfield      #38                 // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
       4: invokeinterface #68,  1           // InterfaceMethod ch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy.getElapsedPeriodsFileName:()Ljava/lang/String;
       9: astore_1
      10: aload_1
      11: invokestatic  #67                 // Method ch/qos/logback/core/rolling/helper/FileFilterUtil.afterLastSlash:(Ljava/lang/String;)Ljava/lang/String;
      14: astore_2
      15: aload_0
      16: getfield      #21                 // Field compressionMode:Lch/qos/logback/core/rolling/helper/CompressionMode;
      19: getstatic     #69                 // Field ch/qos/logback/core/rolling/helper/CompressionMode.NONE:Lch/qos/logback/core/rolling/helper/CompressionMode;
      22: if_acmpne     47
      25: aload_0
      26: invokevirtual #70                 // Method getParentsRawFileProperty:()Ljava/lang/String;
      29: ifnull        78
      32: aload_0
      33: getfield      #4                  // Field renameUtil:Lch/qos/logback/core/rolling/helper/RenameUtil;
      36: aload_0
      37: invokevirtual #70                 // Method getParentsRawFileProperty:()Ljava/lang/String;
      40: aload_1
      41: invokevirtual #71                 // Method ch/qos/logback/core/rolling/helper/RenameUtil.rename:(Ljava/lang/String;Ljava/lang/String;)V
      44: goto          78
      47: aload_0
      48: invokevirtual #70                 // Method getParentsRawFileProperty:()Ljava/lang/String;
      51: ifnonnull     68
      54: aload_0
      55: aload_0
      56: aload_1
      57: aload_1
      58: aload_2
      59: invokevirtual #72                 // Method asyncCompress:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/util/concurrent/Future;
      62: putfield      #56                 // Field future:Ljava/util/concurrent/Future;
      65: goto          78
      68: aload_0
      69: aload_0
      70: aload_1
      71: aload_2
      72: invokevirtual #73                 // Method renamedRawAndAsyncCompress:(Ljava/lang/String;Ljava/lang/String;)Ljava/util/concurrent/Future;
      75: putfield      #56                 // Field future:Ljava/util/concurrent/Future;
      78: aload_0
      79: getfield      #45                 // Field archiveRemover:Lch/qos/logback/core/rolling/helper/ArchiveRemover;
      82: ifnull        110
      85: aload_0
      86: getfield      #45                 // Field archiveRemover:Lch/qos/logback/core/rolling/helper/ArchiveRemover;
      89: new           #48                 // class java/util/Date
      92: dup
      93: aload_0
      94: getfield      #38                 // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
      97: invokeinterface #49,  1           // InterfaceMethod ch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy.getCurrentTime:()J
     102: invokespecial #50                 // Method java/util/Date."<init>":(J)V
     105: invokeinterface #51,  2           // InterfaceMethod ch/qos/logback/core/rolling/helper/ArchiveRemover.clean:(Ljava/util/Date;)V
     110: return

  java.util.concurrent.Future asyncCompress(java.lang.String, java.lang.String, java.lang.String) throws ch.qos.logback.core.rolling.RolloverFailure;
    Code:
       0: new           #74                 // class ch/qos/logback/core/rolling/helper/AsynchronousCompressor
       3: dup
       4: aload_0
       5: getfield      #23                 // Field compressor:Lch/qos/logback/core/rolling/helper/Compressor;
       8: invokespecial #75                 // Method ch/qos/logback/core/rolling/helper/AsynchronousCompressor."<init>":(Lch/qos/logback/core/rolling/helper/Compressor;)V
      11: astore        4
      13: aload         4
      15: aload_1
      16: aload_2
      17: aload_3
      18: invokevirtual #76                 // Method ch/qos/logback/core/rolling/helper/AsynchronousCompressor.compressAsynchronously:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/util/concurrent/Future;
      21: areturn

  java.util.concurrent.Future renamedRawAndAsyncCompress(java.lang.String, java.lang.String) throws ch.qos.logback.core.rolling.RolloverFailure;
    Code:
       0: aload_0
       1: invokevirtual #70                 // Method getParentsRawFileProperty:()Ljava/lang/String;
       4: astore_3
       5: new           #27                 // class java/lang/StringBuilder
       8: dup
       9: invokespecial #28                 // Method java/lang/StringBuilder."<init>":()V
      12: aload_3
      13: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      16: invokestatic  #77                 // Method java/lang/System.nanoTime:()J
      19: invokevirtual #78                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      22: ldc           #79                 // String .tmp
      24: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      27: invokevirtual #33                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      30: astore        4
      32: aload_0
      33: getfield      #4                  // Field renameUtil:Lch/qos/logback/core/rolling/helper/RenameUtil;
      36: aload_3
      37: aload         4
      39: invokevirtual #71                 // Method ch/qos/logback/core/rolling/helper/RenameUtil.rename:(Ljava/lang/String;Ljava/lang/String;)V
      42: aload_0
      43: aload         4
      45: aload_1
      46: aload_2
      47: invokevirtual #72                 // Method asyncCompress:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/util/concurrent/Future;
      50: areturn

  public java.lang.String getActiveFileName();
    Code:
       0: aload_0
       1: invokevirtual #70                 // Method getParentsRawFileProperty:()Ljava/lang/String;
       4: astore_1
       5: aload_1
       6: ifnull        11
       9: aload_1
      10: areturn
      11: aload_0
      12: getfield      #38                 // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
      15: invokeinterface #80,  1           // InterfaceMethod ch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy.getCurrentPeriodsFileNameWithoutCompressionSuffix:()Ljava/lang/String;
      20: areturn

  public boolean isTriggeringEvent(java.io.File, E);
    Code:
       0: aload_0
       1: getfield      #38                 // Field timeBasedFileNamingAndTriggeringPolicy:Lch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy;
       4: aload_1
       5: aload_2
       6: invokeinterface #81,  3           // InterfaceMethod ch/qos/logback/core/rolling/TimeBasedFileNamingAndTriggeringPolicy.isTriggeringEvent:(Ljava/io/File;Ljava/lang/Object;)Z
      11: ireturn

  public int getMaxHistory();
    Code:
       0: aload_0
       1: getfield      #5                  // Field maxHistory:I
       4: ireturn

  public void setMaxHistory(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #5                  // Field maxHistory:I
       5: return

  public boolean isCleanHistoryOnStart();
    Code:
       0: aload_0
       1: getfield      #6                  // Field cleanHistoryOnStart:Z
       4: ireturn

  public void setCleanHistoryOnStart(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #6                  // Field cleanHistoryOnStart:Z
       5: return

  public java.lang.String toString();
    Code:
       0: ldc           #82                 // String c.q.l.core.rolling.TimeBasedRollingPolicy
       2: areturn
}
