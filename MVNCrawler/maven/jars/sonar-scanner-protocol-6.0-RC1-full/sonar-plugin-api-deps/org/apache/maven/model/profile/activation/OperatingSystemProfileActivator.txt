Compiled from "OperatingSystemProfileActivator.java"
public class org.apache.maven.model.profile.activation.OperatingSystemProfileActivator implements org.apache.maven.model.profile.activation.ProfileActivator {
  public org.apache.maven.model.profile.activation.OperatingSystemProfileActivator();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public boolean isActive(org.apache.maven.model.Profile, org.apache.maven.model.profile.ProfileActivationContext, org.apache.maven.model.building.ModelProblemCollector);
    Code:
       0: iconst_0
       1: istore        4
       3: aload_1
       4: invokevirtual #2                  // Method org/apache/maven/model/Profile.getActivation:()Lorg/apache/maven/model/Activation;
       7: astore        5
       9: aload         5
      11: ifnull        130
      14: aload         5
      16: invokevirtual #3                  // Method org/apache/maven/model/Activation.getOs:()Lorg/apache/maven/model/ActivationOS;
      19: astore        6
      21: aload         6
      23: ifnull        130
      26: aload_0
      27: aload         6
      29: invokespecial #4                  // Method ensureAtLeastOneNonNull:(Lorg/apache/maven/model/ActivationOS;)Z
      32: istore        4
      34: iload         4
      36: ifeq          58
      39: aload         6
      41: invokevirtual #5                  // Method org/apache/maven/model/ActivationOS.getFamily:()Ljava/lang/String;
      44: ifnull        58
      47: aload_0
      48: aload         6
      50: invokevirtual #5                  // Method org/apache/maven/model/ActivationOS.getFamily:()Ljava/lang/String;
      53: invokespecial #6                  // Method determineFamilyMatch:(Ljava/lang/String;)Z
      56: istore        4
      58: iload         4
      60: ifeq          82
      63: aload         6
      65: invokevirtual #7                  // Method org/apache/maven/model/ActivationOS.getName:()Ljava/lang/String;
      68: ifnull        82
      71: aload_0
      72: aload         6
      74: invokevirtual #7                  // Method org/apache/maven/model/ActivationOS.getName:()Ljava/lang/String;
      77: invokespecial #8                  // Method determineNameMatch:(Ljava/lang/String;)Z
      80: istore        4
      82: iload         4
      84: ifeq          106
      87: aload         6
      89: invokevirtual #9                  // Method org/apache/maven/model/ActivationOS.getArch:()Ljava/lang/String;
      92: ifnull        106
      95: aload_0
      96: aload         6
      98: invokevirtual #9                  // Method org/apache/maven/model/ActivationOS.getArch:()Ljava/lang/String;
     101: invokespecial #10                 // Method determineArchMatch:(Ljava/lang/String;)Z
     104: istore        4
     106: iload         4
     108: ifeq          130
     111: aload         6
     113: invokevirtual #11                 // Method org/apache/maven/model/ActivationOS.getVersion:()Ljava/lang/String;
     116: ifnull        130
     119: aload_0
     120: aload         6
     122: invokevirtual #11                 // Method org/apache/maven/model/ActivationOS.getVersion:()Ljava/lang/String;
     125: invokespecial #12                 // Method determineVersionMatch:(Ljava/lang/String;)Z
     128: istore        4
     130: iload         4
     132: ireturn

  private boolean ensureAtLeastOneNonNull(org.apache.maven.model.ActivationOS);
    Code:
       0: aload_1
       1: invokevirtual #9                  // Method org/apache/maven/model/ActivationOS.getArch:()Ljava/lang/String;
       4: ifnonnull     28
       7: aload_1
       8: invokevirtual #5                  // Method org/apache/maven/model/ActivationOS.getFamily:()Ljava/lang/String;
      11: ifnonnull     28
      14: aload_1
      15: invokevirtual #7                  // Method org/apache/maven/model/ActivationOS.getName:()Ljava/lang/String;
      18: ifnonnull     28
      21: aload_1
      22: invokevirtual #11                 // Method org/apache/maven/model/ActivationOS.getVersion:()Ljava/lang/String;
      25: ifnull        32
      28: iconst_1
      29: goto          33
      32: iconst_0
      33: ireturn

  private boolean determineVersionMatch(java.lang.String);
    Code:
       0: aload_1
       1: astore_2
       2: iconst_0
       3: istore_3
       4: aload_2
       5: ldc           #13                 // String !
       7: invokevirtual #14                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      10: ifeq          21
      13: iconst_1
      14: istore_3
      15: aload_2
      16: iconst_1
      17: invokevirtual #15                 // Method java/lang/String.substring:(I)Ljava/lang/String;
      20: astore_2
      21: aload_2
      22: invokestatic  #16                 // Method org/codehaus/plexus/util/Os.isVersion:(Ljava/lang/String;)Z
      25: istore        4
      27: iload_3
      28: ifeq          42
      31: iload         4
      33: ifne          40
      36: iconst_1
      37: goto          41
      40: iconst_0
      41: ireturn
      42: iload         4
      44: ireturn

  private boolean determineArchMatch(java.lang.String);
    Code:
       0: aload_1
       1: astore_2
       2: iconst_0
       3: istore_3
       4: aload_2
       5: ldc           #13                 // String !
       7: invokevirtual #14                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      10: ifeq          21
      13: iconst_1
      14: istore_3
      15: aload_2
      16: iconst_1
      17: invokevirtual #15                 // Method java/lang/String.substring:(I)Ljava/lang/String;
      20: astore_2
      21: aload_2
      22: invokestatic  #17                 // Method org/codehaus/plexus/util/Os.isArch:(Ljava/lang/String;)Z
      25: istore        4
      27: iload_3
      28: ifeq          42
      31: iload         4
      33: ifne          40
      36: iconst_1
      37: goto          41
      40: iconst_0
      41: ireturn
      42: iload         4
      44: ireturn

  private boolean determineNameMatch(java.lang.String);
    Code:
       0: aload_1
       1: astore_2
       2: iconst_0
       3: istore_3
       4: aload_2
       5: ldc           #13                 // String !
       7: invokevirtual #14                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      10: ifeq          21
      13: iconst_1
      14: istore_3
      15: aload_2
      16: iconst_1
      17: invokevirtual #15                 // Method java/lang/String.substring:(I)Ljava/lang/String;
      20: astore_2
      21: aload_2
      22: invokestatic  #18                 // Method org/codehaus/plexus/util/Os.isName:(Ljava/lang/String;)Z
      25: istore        4
      27: iload_3
      28: ifeq          42
      31: iload         4
      33: ifne          40
      36: iconst_1
      37: goto          41
      40: iconst_0
      41: ireturn
      42: iload         4
      44: ireturn

  private boolean determineFamilyMatch(java.lang.String);
    Code:
       0: aload_1
       1: astore_2
       2: iconst_0
       3: istore_3
       4: aload_2
       5: ldc           #13                 // String !
       7: invokevirtual #14                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      10: ifeq          21
      13: iconst_1
      14: istore_3
      15: aload_2
      16: iconst_1
      17: invokevirtual #15                 // Method java/lang/String.substring:(I)Ljava/lang/String;
      20: astore_2
      21: aload_2
      22: invokestatic  #19                 // Method org/codehaus/plexus/util/Os.isFamily:(Ljava/lang/String;)Z
      25: istore        4
      27: iload_3
      28: ifeq          42
      31: iload         4
      33: ifne          40
      36: iconst_1
      37: goto          41
      40: iconst_0
      41: ireturn
      42: iload         4
      44: ireturn
}
