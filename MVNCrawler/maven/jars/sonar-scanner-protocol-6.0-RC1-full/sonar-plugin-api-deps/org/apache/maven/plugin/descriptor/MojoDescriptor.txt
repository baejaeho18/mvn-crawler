Compiled from "MojoDescriptor.java"
public class org.apache.maven.plugin.descriptor.MojoDescriptor extends org.codehaus.plexus.component.repository.ComponentDescriptor<org.apache.maven.plugin.Mojo> implements java.lang.Cloneable {
  public static final java.lang.String MAVEN_PLUGIN;

  public static final java.lang.String SINGLE_PASS_EXEC_STRATEGY;

  public static final java.lang.String MULTI_PASS_EXEC_STRATEGY;

  private static final java.lang.String DEFAULT_INSTANTIATION_STRATEGY;

  private static final java.lang.String DEFAULT_LANGUAGE;

  private java.util.List<org.apache.maven.plugin.descriptor.Parameter> parameters;

  private java.util.Map<java.lang.String, org.apache.maven.plugin.descriptor.Parameter> parameterMap;

  private java.lang.String executionStrategy;

  private java.lang.String goal;

  private java.lang.String phase;

  private java.lang.String since;

  private java.lang.String executePhase;

  private java.lang.String executeGoal;

  private java.lang.String executeLifecycle;

  private java.lang.String deprecated;

  private boolean aggregator;

  private java.lang.String dependencyResolutionRequired;

  private java.lang.String dependencyCollectionRequired;

  private boolean projectRequired;

  private boolean onlineRequired;

  private org.codehaus.plexus.configuration.PlexusConfiguration mojoConfiguration;

  private org.apache.maven.plugin.descriptor.PluginDescriptor pluginDescriptor;

  private boolean inheritedByDefault;

  private boolean directInvocationOnly;

  private boolean requiresReports;

  private boolean threadSafe;

  public org.apache.maven.plugin.descriptor.MojoDescriptor();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/codehaus/plexus/component/repository/ComponentDescriptor."<init>":()V
       4: aload_0
       5: ldc           #2                  // String once-per-session
       7: putfield      #3                  // Field executionStrategy:Ljava/lang/String;
      10: aload_0
      11: iconst_0
      12: putfield      #4                  // Field aggregator:Z
      15: aload_0
      16: aconst_null
      17: putfield      #5                  // Field dependencyResolutionRequired:Ljava/lang/String;
      20: aload_0
      21: iconst_1
      22: putfield      #6                  // Field projectRequired:Z
      25: aload_0
      26: iconst_0
      27: putfield      #7                  // Field onlineRequired:Z
      30: aload_0
      31: iconst_1
      32: putfield      #8                  // Field inheritedByDefault:Z
      35: aload_0
      36: iconst_0
      37: putfield      #9                  // Field directInvocationOnly:Z
      40: aload_0
      41: iconst_0
      42: putfield      #10                 // Field requiresReports:Z
      45: aload_0
      46: iconst_0
      47: putfield      #11                 // Field threadSafe:Z
      50: aload_0
      51: ldc           #12                 // String per-lookup
      53: invokevirtual #13                 // Method setInstantiationStrategy:(Ljava/lang/String;)V
      56: aload_0
      57: ldc           #14                 // String java
      59: invokevirtual #15                 // Method setComponentFactory:(Ljava/lang/String;)V
      62: return

  public java.lang.String getLanguage();
    Code:
       0: aload_0
       1: invokevirtual #16                 // Method getComponentFactory:()Ljava/lang/String;
       4: areturn

  public void setLanguage(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #15                 // Method setComponentFactory:(Ljava/lang/String;)V
       5: return

  public java.lang.String getDeprecated();
    Code:
       0: aload_0
       1: getfield      #17                 // Field deprecated:Ljava/lang/String;
       4: areturn

  public void setDeprecated(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #17                 // Field deprecated:Ljava/lang/String;
       5: return

  public java.util.List<org.apache.maven.plugin.descriptor.Parameter> getParameters();
    Code:
       0: aload_0
       1: getfield      #18                 // Field parameters:Ljava/util/List;
       4: areturn

  public void setParameters(java.util.List<org.apache.maven.plugin.descriptor.Parameter>) throws org.apache.maven.plugin.descriptor.DuplicateParameterException;
    Code:
       0: aload_1
       1: invokeinterface #19,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       6: astore_2
       7: aload_2
       8: invokeinterface #20,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      13: ifeq          34
      16: aload_2
      17: invokeinterface #21,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      22: checkcast     #22                 // class org/apache/maven/plugin/descriptor/Parameter
      25: astore_3
      26: aload_0
      27: aload_3
      28: invokevirtual #23                 // Method addParameter:(Lorg/apache/maven/plugin/descriptor/Parameter;)V
      31: goto          7
      34: return

  public void addParameter(org.apache.maven.plugin.descriptor.Parameter) throws org.apache.maven.plugin.descriptor.DuplicateParameterException;
    Code:
       0: aload_0
       1: getfield      #18                 // Field parameters:Ljava/util/List;
       4: ifnull        74
       7: aload_0
       8: getfield      #18                 // Field parameters:Ljava/util/List;
      11: aload_1
      12: invokeinterface #24,  2           // InterfaceMethod java/util/List.contains:(Ljava/lang/Object;)Z
      17: ifeq          74
      20: new           #25                 // class org/apache/maven/plugin/descriptor/DuplicateParameterException
      23: dup
      24: new           #26                 // class java/lang/StringBuilder
      27: dup
      28: invokespecial #27                 // Method java/lang/StringBuilder."<init>":()V
      31: aload_1
      32: invokevirtual #28                 // Method org/apache/maven/plugin/descriptor/Parameter.getName:()Ljava/lang/String;
      35: invokevirtual #29                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      38: ldc           #30                 // String  has been declared multiple times in mojo with goal:
      40: invokevirtual #29                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      43: aload_0
      44: invokevirtual #31                 // Method getGoal:()Ljava/lang/String;
      47: invokevirtual #29                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      50: ldc           #32                 // String  (implementation:
      52: invokevirtual #29                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      55: aload_0
      56: invokevirtual #33                 // Method getImplementation:()Ljava/lang/String;
      59: invokevirtual #29                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      62: ldc           #34                 // String )
      64: invokevirtual #29                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      67: invokevirtual #35                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      70: invokespecial #36                 // Method org/apache/maven/plugin/descriptor/DuplicateParameterException."<init>":(Ljava/lang/String;)V
      73: athrow
      74: aload_0
      75: getfield      #18                 // Field parameters:Ljava/util/List;
      78: ifnonnull     92
      81: aload_0
      82: new           #37                 // class java/util/LinkedList
      85: dup
      86: invokespecial #38                 // Method java/util/LinkedList."<init>":()V
      89: putfield      #18                 // Field parameters:Ljava/util/List;
      92: aload_0
      93: getfield      #18                 // Field parameters:Ljava/util/List;
      96: aload_1
      97: invokeinterface #39,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     102: pop
     103: return

  public java.util.Map<java.lang.String, org.apache.maven.plugin.descriptor.Parameter> getParameterMap();
    Code:
       0: aload_0
       1: getfield      #40                 // Field parameterMap:Ljava/util/Map;
       4: ifnonnull     72
       7: aload_0
       8: new           #41                 // class java/util/HashMap
      11: dup
      12: invokespecial #42                 // Method java/util/HashMap."<init>":()V
      15: putfield      #40                 // Field parameterMap:Ljava/util/Map;
      18: aload_0
      19: getfield      #18                 // Field parameters:Ljava/util/List;
      22: ifnull        72
      25: aload_0
      26: getfield      #18                 // Field parameters:Ljava/util/List;
      29: invokeinterface #19,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      34: astore_1
      35: aload_1
      36: invokeinterface #20,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      41: ifeq          72
      44: aload_1
      45: invokeinterface #21,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      50: checkcast     #22                 // class org/apache/maven/plugin/descriptor/Parameter
      53: astore_2
      54: aload_0
      55: getfield      #40                 // Field parameterMap:Ljava/util/Map;
      58: aload_2
      59: invokevirtual #28                 // Method org/apache/maven/plugin/descriptor/Parameter.getName:()Ljava/lang/String;
      62: aload_2
      63: invokeinterface #43,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      68: pop
      69: goto          35
      72: aload_0
      73: getfield      #40                 // Field parameterMap:Ljava/util/Map;
      76: areturn

  public void setDependencyResolutionRequired(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field dependencyResolutionRequired:Ljava/lang/String;
       5: return

  public java.lang.String getDependencyResolutionRequired();
    Code:
       0: aload_0
       1: getfield      #5                  // Field dependencyResolutionRequired:Ljava/lang/String;
       4: areturn

  public java.lang.String isDependencyResolutionRequired();
    Code:
       0: aload_0
       1: getfield      #5                  // Field dependencyResolutionRequired:Ljava/lang/String;
       4: areturn

  public void setDependencyCollectionRequired(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #44                 // Field dependencyCollectionRequired:Ljava/lang/String;
       5: return

  public java.lang.String getDependencyCollectionRequired();
    Code:
       0: aload_0
       1: getfield      #44                 // Field dependencyCollectionRequired:Ljava/lang/String;
       4: areturn

  public void setProjectRequired(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #6                  // Field projectRequired:Z
       5: return

  public boolean isProjectRequired();
    Code:
       0: aload_0
       1: getfield      #6                  // Field projectRequired:Z
       4: ireturn

  public void setOnlineRequired(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #7                  // Field onlineRequired:Z
       5: return

  public boolean isOnlineRequired();
    Code:
       0: aload_0
       1: getfield      #7                  // Field onlineRequired:Z
       4: ireturn

  public boolean requiresOnline();
    Code:
       0: aload_0
       1: getfield      #7                  // Field onlineRequired:Z
       4: ireturn

  public java.lang.String getPhase();
    Code:
       0: aload_0
       1: getfield      #45                 // Field phase:Ljava/lang/String;
       4: areturn

  public void setPhase(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #45                 // Field phase:Ljava/lang/String;
       5: return

  public java.lang.String getSince();
    Code:
       0: aload_0
       1: getfield      #46                 // Field since:Ljava/lang/String;
       4: areturn

  public void setSince(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #46                 // Field since:Ljava/lang/String;
       5: return

  public java.lang.String getGoal();
    Code:
       0: aload_0
       1: getfield      #47                 // Field goal:Ljava/lang/String;
       4: areturn

  public void setGoal(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #47                 // Field goal:Ljava/lang/String;
       5: return

  public java.lang.String getExecutePhase();
    Code:
       0: aload_0
       1: getfield      #48                 // Field executePhase:Ljava/lang/String;
       4: areturn

  public void setExecutePhase(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #48                 // Field executePhase:Ljava/lang/String;
       5: return

  public boolean alwaysExecute();
    Code:
       0: ldc           #49                 // String always
       2: aload_0
       3: getfield      #3                  // Field executionStrategy:Ljava/lang/String;
       6: invokevirtual #50                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
       9: ireturn

  public java.lang.String getExecutionStrategy();
    Code:
       0: aload_0
       1: getfield      #3                  // Field executionStrategy:Ljava/lang/String;
       4: areturn

  public void setExecutionStrategy(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #3                  // Field executionStrategy:Ljava/lang/String;
       5: return

  public org.codehaus.plexus.configuration.PlexusConfiguration getMojoConfiguration();
    Code:
       0: aload_0
       1: getfield      #51                 // Field mojoConfiguration:Lorg/codehaus/plexus/configuration/PlexusConfiguration;
       4: ifnonnull     20
       7: aload_0
       8: new           #52                 // class org/codehaus/plexus/configuration/xml/XmlPlexusConfiguration
      11: dup
      12: ldc           #53                 // String configuration
      14: invokespecial #54                 // Method org/codehaus/plexus/configuration/xml/XmlPlexusConfiguration."<init>":(Ljava/lang/String;)V
      17: putfield      #51                 // Field mojoConfiguration:Lorg/codehaus/plexus/configuration/PlexusConfiguration;
      20: aload_0
      21: getfield      #51                 // Field mojoConfiguration:Lorg/codehaus/plexus/configuration/PlexusConfiguration;
      24: areturn

  public void setMojoConfiguration(org.codehaus.plexus.configuration.PlexusConfiguration);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #51                 // Field mojoConfiguration:Lorg/codehaus/plexus/configuration/PlexusConfiguration;
       5: return

  public java.lang.String getRole();
    Code:
       0: getstatic     #55                 // Field org/apache/maven/plugin/Mojo.ROLE:Ljava/lang/String;
       3: areturn

  public java.lang.String getRoleHint();
    Code:
       0: aload_0
       1: invokevirtual #56                 // Method getId:()Ljava/lang/String;
       4: areturn

  public java.lang.String getId();
    Code:
       0: new           #26                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #27                 // Method java/lang/StringBuilder."<init>":()V
       7: aload_0
       8: invokevirtual #57                 // Method getPluginDescriptor:()Lorg/apache/maven/plugin/descriptor/PluginDescriptor;
      11: invokevirtual #58                 // Method org/apache/maven/plugin/descriptor/PluginDescriptor.getId:()Ljava/lang/String;
      14: invokevirtual #29                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      17: ldc           #59                 // String :
      19: invokevirtual #29                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: aload_0
      23: invokevirtual #31                 // Method getGoal:()Ljava/lang/String;
      26: invokevirtual #29                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: invokevirtual #35                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      32: areturn

  public java.lang.String getFullGoalName();
    Code:
       0: new           #26                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #27                 // Method java/lang/StringBuilder."<init>":()V
       7: aload_0
       8: invokevirtual #57                 // Method getPluginDescriptor:()Lorg/apache/maven/plugin/descriptor/PluginDescriptor;
      11: invokevirtual #60                 // Method org/apache/maven/plugin/descriptor/PluginDescriptor.getGoalPrefix:()Ljava/lang/String;
      14: invokevirtual #29                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      17: ldc           #59                 // String :
      19: invokevirtual #29                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: aload_0
      23: invokevirtual #31                 // Method getGoal:()Ljava/lang/String;
      26: invokevirtual #29                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: invokevirtual #35                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      32: areturn

  public java.lang.String getComponentType();
    Code:
       0: ldc           #61                 // String maven-plugin
       2: areturn

  public org.apache.maven.plugin.descriptor.PluginDescriptor getPluginDescriptor();
    Code:
       0: aload_0
       1: getfield      #62                 // Field pluginDescriptor:Lorg/apache/maven/plugin/descriptor/PluginDescriptor;
       4: areturn

  public void setPluginDescriptor(org.apache.maven.plugin.descriptor.PluginDescriptor);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #62                 // Field pluginDescriptor:Lorg/apache/maven/plugin/descriptor/PluginDescriptor;
       5: return

  public boolean isInheritedByDefault();
    Code:
       0: aload_0
       1: getfield      #8                  // Field inheritedByDefault:Z
       4: ireturn

  public void setInheritedByDefault(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #8                  // Field inheritedByDefault:Z
       5: return

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: instanceof    #63                 // class org/apache/maven/plugin/descriptor/MojoDescriptor
      11: ifeq          55
      14: aload_1
      15: checkcast     #63                 // class org/apache/maven/plugin/descriptor/MojoDescriptor
      18: astore_2
      19: aload_0
      20: aload_0
      21: invokevirtual #57                 // Method getPluginDescriptor:()Lorg/apache/maven/plugin/descriptor/PluginDescriptor;
      24: aload_2
      25: invokevirtual #57                 // Method getPluginDescriptor:()Lorg/apache/maven/plugin/descriptor/PluginDescriptor;
      28: invokespecial #64                 // Method compareObjects:(Ljava/lang/Object;Ljava/lang/Object;)Z
      31: ifne          36
      34: iconst_0
      35: ireturn
      36: aload_0
      37: aload_0
      38: invokevirtual #31                 // Method getGoal:()Ljava/lang/String;
      41: aload_2
      42: invokevirtual #31                 // Method getGoal:()Ljava/lang/String;
      45: invokespecial #64                 // Method compareObjects:(Ljava/lang/Object;Ljava/lang/Object;)Z
      48: ifne          53
      51: iconst_0
      52: ireturn
      53: iconst_1
      54: ireturn
      55: iconst_0
      56: ireturn

  private boolean compareObjects(java.lang.Object, java.lang.Object);
    Code:
       0: aload_1
       1: ifnonnull     8
       4: aload_2
       5: ifnonnull     16
       8: aload_1
       9: ifnull        18
      12: aload_2
      13: ifnonnull     18
      16: iconst_0
      17: ireturn
      18: aload_1
      19: aload_2
      20: invokevirtual #65                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      23: ireturn

  public int hashCode();
    Code:
       0: iconst_1
       1: istore_1
       2: aload_0
       3: invokevirtual #31                 // Method getGoal:()Ljava/lang/String;
       6: astore_2
       7: aload_2
       8: ifnull        18
      11: iload_1
      12: aload_2
      13: invokevirtual #66                 // Method java/lang/String.hashCode:()I
      16: iadd
      17: istore_1
      18: aload_0
      19: invokevirtual #57                 // Method getPluginDescriptor:()Lorg/apache/maven/plugin/descriptor/PluginDescriptor;
      22: astore_3
      23: aload_3
      24: ifnull        34
      27: iload_1
      28: aload_3
      29: invokevirtual #67                 // Method org/apache/maven/plugin/descriptor/PluginDescriptor.hashCode:()I
      32: isub
      33: istore_1
      34: iload_1
      35: ireturn

  public java.lang.String getExecuteLifecycle();
    Code:
       0: aload_0
       1: getfield      #68                 // Field executeLifecycle:Ljava/lang/String;
       4: areturn

  public void setExecuteLifecycle(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #68                 // Field executeLifecycle:Ljava/lang/String;
       5: return

  public void setAggregator(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #4                  // Field aggregator:Z
       5: return

  public boolean isAggregator();
    Code:
       0: aload_0
       1: getfield      #4                  // Field aggregator:Z
       4: ireturn

  public boolean isDirectInvocationOnly();
    Code:
       0: aload_0
       1: getfield      #9                  // Field directInvocationOnly:Z
       4: ireturn

  public void setDirectInvocationOnly(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #9                  // Field directInvocationOnly:Z
       5: return

  public boolean isRequiresReports();
    Code:
       0: aload_0
       1: getfield      #10                 // Field requiresReports:Z
       4: ireturn

  public void setRequiresReports(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #10                 // Field requiresReports:Z
       5: return

  public void setExecuteGoal(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #69                 // Field executeGoal:Ljava/lang/String;
       5: return

  public java.lang.String getExecuteGoal();
    Code:
       0: aload_0
       1: getfield      #69                 // Field executeGoal:Ljava/lang/String;
       4: areturn

  public boolean isThreadSafe();
    Code:
       0: aload_0
       1: getfield      #11                 // Field threadSafe:Z
       4: ireturn

  public void setThreadSafe(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #11                 // Field threadSafe:Z
       5: return

  public boolean isForking();
    Code:
       0: aload_0
       1: invokevirtual #70                 // Method getExecuteGoal:()Ljava/lang/String;
       4: ifnull        17
       7: aload_0
       8: invokevirtual #70                 // Method getExecuteGoal:()Ljava/lang/String;
      11: invokevirtual #71                 // Method java/lang/String.length:()I
      14: ifgt          34
      17: aload_0
      18: invokevirtual #72                 // Method getExecutePhase:()Ljava/lang/String;
      21: ifnull        38
      24: aload_0
      25: invokevirtual #72                 // Method getExecutePhase:()Ljava/lang/String;
      28: invokevirtual #71                 // Method java/lang/String.length:()I
      31: ifle          38
      34: iconst_1
      35: goto          39
      38: iconst_0
      39: ireturn

  public org.apache.maven.plugin.descriptor.MojoDescriptor clone();
    Code:
       0: aload_0
       1: invokespecial #73                 // Method java/lang/Object.clone:()Ljava/lang/Object;
       4: checkcast     #63                 // class org/apache/maven/plugin/descriptor/MojoDescriptor
       7: areturn
       8: astore_1
       9: new           #75                 // class java/lang/UnsupportedOperationException
      12: dup
      13: aload_1
      14: invokespecial #76                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/Throwable;)V
      17: athrow
    Exception table:
       from    to  target type
           0     7     8   Class java/lang/CloneNotSupportedException

  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    Code:
       0: aload_0
       1: invokevirtual #77                 // Method clone:()Lorg/apache/maven/plugin/descriptor/MojoDescriptor;
       4: areturn
}
