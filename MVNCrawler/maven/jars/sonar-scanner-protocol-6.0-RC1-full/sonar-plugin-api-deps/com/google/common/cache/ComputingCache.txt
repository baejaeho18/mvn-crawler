Compiled from "ComputingCache.java"
class com.google.common.cache.ComputingCache<K, V> extends com.google.common.cache.AbstractCache<K, V> implements java.io.Serializable {
  final com.google.common.cache.CustomConcurrentHashMap<K, V> map;

  private static final long serialVersionUID;

  com.google.common.cache.ComputingCache(com.google.common.cache.CacheBuilder<? super K, ? super V>, com.google.common.base.Supplier<? extends com.google.common.cache.AbstractCache$StatsCounter>, com.google.common.cache.CacheLoader<? super K, V>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/google/common/cache/AbstractCache."<init>":()V
       4: aload_0
       5: new           #2                  // class com/google/common/cache/CustomConcurrentHashMap
       8: dup
       9: aload_1
      10: aload_2
      11: aload_3
      12: invokespecial #3                  // Method com/google/common/cache/CustomConcurrentHashMap."<init>":(Lcom/google/common/cache/CacheBuilder;Lcom/google/common/base/Supplier;Lcom/google/common/cache/CacheLoader;)V
      15: putfield      #4                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
      18: return

  public V get(K) throws java.util.concurrent.ExecutionException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
       4: aload_1
       5: invokevirtual #5                  // Method com/google/common/cache/CustomConcurrentHashMap.getOrCompute:(Ljava/lang/Object;)Ljava/lang/Object;
       8: areturn

  public void invalidate(java.lang.Object);
    Code:
       0: aload_1
       1: invokestatic  #6                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_0
       6: getfield      #4                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
       9: aload_1
      10: invokevirtual #7                  // Method com/google/common/cache/CustomConcurrentHashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      13: pop
      14: return

  public void invalidateAll();
    Code:
       0: aload_0
       1: getfield      #4                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
       4: invokevirtual #8                  // Method com/google/common/cache/CustomConcurrentHashMap.clear:()V
       7: return

  public long size();
    Code:
       0: aload_0
       1: getfield      #4                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
       4: invokevirtual #9                  // Method com/google/common/cache/CustomConcurrentHashMap.longSize:()J
       7: lreturn

  public java.util.concurrent.ConcurrentMap<K, V> asMap();
    Code:
       0: aload_0
       1: getfield      #4                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
       4: areturn

  public com.google.common.cache.CacheStats stats();
    Code:
       0: new           #10                 // class com/google/common/cache/AbstractCache$SimpleStatsCounter
       3: dup
       4: invokespecial #11                 // Method com/google/common/cache/AbstractCache$SimpleStatsCounter."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #4                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
      12: getfield      #12                 // Field com/google/common/cache/CustomConcurrentHashMap.segments:[Lcom/google/common/cache/CustomConcurrentHashMap$Segment;
      15: astore_2
      16: aload_2
      17: arraylength
      18: istore_3
      19: iconst_0
      20: istore        4
      22: iload         4
      24: iload_3
      25: if_icmpge     49
      28: aload_2
      29: iload         4
      31: aaload
      32: astore        5
      34: aload_1
      35: aload         5
      37: getfield      #13                 // Field com/google/common/cache/CustomConcurrentHashMap$Segment.statsCounter:Lcom/google/common/cache/AbstractCache$StatsCounter;
      40: invokevirtual #14                 // Method com/google/common/cache/AbstractCache$SimpleStatsCounter.incrementBy:(Lcom/google/common/cache/AbstractCache$StatsCounter;)V
      43: iinc          4, 1
      46: goto          22
      49: aload_1
      50: invokevirtual #15                 // Method com/google/common/cache/AbstractCache$SimpleStatsCounter.snapshot:()Lcom/google/common/cache/CacheStats;
      53: areturn

  public void cleanUp();
    Code:
       0: aload_0
       1: getfield      #4                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
       4: invokevirtual #16                 // Method com/google/common/cache/CustomConcurrentHashMap.cleanUp:()V
       7: return

  java.lang.Object writeReplace();
    Code:
       0: aload_0
       1: getfield      #4                  // Field map:Lcom/google/common/cache/CustomConcurrentHashMap;
       4: invokevirtual #17                 // Method com/google/common/cache/CustomConcurrentHashMap.cacheSerializationProxy:()Lcom/google/common/cache/Cache;
       7: areturn
}
