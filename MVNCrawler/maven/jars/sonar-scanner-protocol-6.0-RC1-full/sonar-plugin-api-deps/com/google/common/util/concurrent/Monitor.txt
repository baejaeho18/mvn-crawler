Compiled from "Monitor.java"
public final class com.google.common.util.concurrent.Monitor {
  private final java.util.concurrent.locks.ReentrantLock lock;

  private final java.util.ArrayList<com.google.common.util.concurrent.Monitor$Guard> activeGuards;

  public com.google.common.util.concurrent.Monitor();
    Code:
       0: aload_0
       1: iconst_0
       2: invokespecial #2                  // Method "<init>":(Z)V
       5: return

  public com.google.common.util.concurrent.Monitor(boolean);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_1
       6: invokestatic  #4                  // Method com/google/common/collect/Lists.newArrayListWithCapacity:(I)Ljava/util/ArrayList;
       9: putfield      #5                  // Field activeGuards:Ljava/util/ArrayList;
      12: aload_0
      13: new           #6                  // class java/util/concurrent/locks/ReentrantLock
      16: dup
      17: iload_1
      18: invokespecial #7                  // Method java/util/concurrent/locks/ReentrantLock."<init>":(Z)V
      21: putfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      24: return

  public void enter();
    Code:
       0: aload_0
       1: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #8                  // Method java/util/concurrent/locks/ReentrantLock.lock:()V
       7: return

  public void enterInterruptibly() throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #9                  // Method java/util/concurrent/locks/ReentrantLock.lockInterruptibly:()V
       7: return

  public boolean enter(long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: astore        4
       6: invokestatic  #10                 // Method java/lang/System.nanoTime:()J
       9: lstore        5
      11: aload_3
      12: lload_1
      13: invokevirtual #11                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      16: lstore        7
      18: lload         7
      20: lstore        9
      22: iconst_0
      23: istore        11
      25: aload         4
      27: lload         9
      29: getstatic     #12                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      32: invokevirtual #13                 // Method java/util/concurrent/locks/ReentrantLock.tryLock:(JLjava/util/concurrent/TimeUnit;)Z
      35: istore        12
      37: iload         11
      39: ifeq          48
      42: invokestatic  #14                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      45: invokevirtual #15                 // Method java/lang/Thread.interrupt:()V
      48: iload         12
      50: ireturn
      51: astore        12
      53: iconst_1
      54: istore        11
      56: lload         7
      58: invokestatic  #10                 // Method java/lang/System.nanoTime:()J
      61: lload         5
      63: lsub
      64: lsub
      65: lstore        9
      67: goto          25
      70: astore        13
      72: iload         11
      74: ifeq          83
      77: invokestatic  #14                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      80: invokevirtual #15                 // Method java/lang/Thread.interrupt:()V
      83: aload         13
      85: athrow
    Exception table:
       from    to  target type
          25    37    51   Class java/lang/InterruptedException
          25    37    70   any
          51    72    70   any

  public boolean enterInterruptibly(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: lload_1
       5: aload_3
       6: invokevirtual #13                 // Method java/util/concurrent/locks/ReentrantLock.tryLock:(JLjava/util/concurrent/TimeUnit;)Z
       9: ireturn

  public boolean tryEnter();
    Code:
       0: aload_0
       1: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #17                 // Method java/util/concurrent/locks/ReentrantLock.tryLock:()Z
       7: ireturn

  public void enterWhen(com.google.common.util.concurrent.Monitor$Guard) throws java.lang.InterruptedException;
    Code:
       0: aload_1
       1: getfield      #18                 // Field com/google/common/util/concurrent/Monitor$Guard.monitor:Lcom/google/common/util/concurrent/Monitor;
       4: aload_0
       5: if_acmpeq     16
       8: new           #19                 // class java/lang/IllegalMonitorStateException
      11: dup
      12: invokespecial #20                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      20: astore_2
      21: aload_2
      22: invokevirtual #21                 // Method java/util/concurrent/locks/ReentrantLock.isHeldByCurrentThread:()Z
      25: istore_3
      26: aload_2
      27: invokevirtual #9                  // Method java/util/concurrent/locks/ReentrantLock.lockInterruptibly:()V
      30: aload_0
      31: aload_1
      32: iload_3
      33: invokespecial #22                 // Method waitInterruptibly:(Lcom/google/common/util/concurrent/Monitor$Guard;Z)V
      36: goto          51
      39: astore        4
      41: aload_2
      42: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      45: aload         4
      47: invokestatic  #25                 // Method com/google/common/base/Throwables.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
      50: athrow
      51: return
    Exception table:
       from    to  target type
          30    36    39   Class java/lang/Throwable

  public void enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor$Guard);
    Code:
       0: aload_1
       1: getfield      #18                 // Field com/google/common/util/concurrent/Monitor$Guard.monitor:Lcom/google/common/util/concurrent/Monitor;
       4: aload_0
       5: if_acmpeq     16
       8: new           #19                 // class java/lang/IllegalMonitorStateException
      11: dup
      12: invokespecial #20                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      20: astore_2
      21: aload_2
      22: invokevirtual #21                 // Method java/util/concurrent/locks/ReentrantLock.isHeldByCurrentThread:()Z
      25: istore_3
      26: aload_2
      27: invokevirtual #8                  // Method java/util/concurrent/locks/ReentrantLock.lock:()V
      30: aload_0
      31: aload_1
      32: iload_3
      33: invokespecial #26                 // Method waitUninterruptibly:(Lcom/google/common/util/concurrent/Monitor$Guard;Z)V
      36: goto          51
      39: astore        4
      41: aload_2
      42: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      45: aload         4
      47: invokestatic  #25                 // Method com/google/common/base/Throwables.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
      50: athrow
      51: return
    Exception table:
       from    to  target type
          30    36    39   Class java/lang/Throwable

  public boolean enterWhen(com.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
    Code:
       0: aload_1
       1: getfield      #18                 // Field com/google/common/util/concurrent/Monitor$Guard.monitor:Lcom/google/common/util/concurrent/Monitor;
       4: aload_0
       5: if_acmpeq     16
       8: new           #19                 // class java/lang/IllegalMonitorStateException
      11: dup
      12: invokespecial #20                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      20: astore        5
      22: aload         5
      24: invokevirtual #21                 // Method java/util/concurrent/locks/ReentrantLock.isHeldByCurrentThread:()Z
      27: istore        6
      29: invokestatic  #10                 // Method java/lang/System.nanoTime:()J
      32: lstore        7
      34: aload         5
      36: lload_2
      37: aload         4
      39: invokevirtual #13                 // Method java/util/concurrent/locks/ReentrantLock.tryLock:(JLjava/util/concurrent/TimeUnit;)Z
      42: ifne          47
      45: iconst_0
      46: ireturn
      47: aload         4
      49: lload_2
      50: invokevirtual #11                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      53: invokestatic  #10                 // Method java/lang/System.nanoTime:()J
      56: lload         7
      58: lsub
      59: lsub
      60: lstore        10
      62: aload_0
      63: aload_1
      64: lload         10
      66: iload         6
      68: invokespecial #27                 // Method waitInterruptibly:(Lcom/google/common/util/concurrent/Monitor$Guard;JZ)Z
      71: istore        9
      73: goto          89
      76: astore        10
      78: aload         5
      80: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      83: aload         10
      85: invokestatic  #25                 // Method com/google/common/base/Throwables.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
      88: athrow
      89: iload         9
      91: ifeq          96
      94: iconst_1
      95: ireturn
      96: aload         5
      98: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
     101: iconst_0
     102: ireturn
    Exception table:
       from    to  target type
          47    73    76   Class java/lang/Throwable

  public boolean enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_1
       1: getfield      #18                 // Field com/google/common/util/concurrent/Monitor$Guard.monitor:Lcom/google/common/util/concurrent/Monitor;
       4: aload_0
       5: if_acmpeq     16
       8: new           #19                 // class java/lang/IllegalMonitorStateException
      11: dup
      12: invokespecial #20                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      20: astore        5
      22: aload         5
      24: invokevirtual #21                 // Method java/util/concurrent/locks/ReentrantLock.isHeldByCurrentThread:()Z
      27: istore        6
      29: invokestatic  #10                 // Method java/lang/System.nanoTime:()J
      32: lstore        7
      34: aload         4
      36: lload_2
      37: invokevirtual #11                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      40: lstore        9
      42: lload         9
      44: lstore        11
      46: iconst_0
      47: istore        13
      49: aload         5
      51: lload         11
      53: getstatic     #12                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      56: invokevirtual #13                 // Method java/util/concurrent/locks/ReentrantLock.tryLock:(JLjava/util/concurrent/TimeUnit;)Z
      59: ifeq          76
      62: lload         9
      64: invokestatic  #10                 // Method java/lang/System.nanoTime:()J
      67: lload         7
      69: lsub
      70: lsub
      71: lstore        11
      73: goto          142
      76: iconst_0
      77: istore        14
      79: lload         9
      81: invokestatic  #10                 // Method java/lang/System.nanoTime:()J
      84: lload         7
      86: lsub
      87: lsub
      88: lstore        11
      90: iload         13
      92: ifeq          101
      95: invokestatic  #14                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      98: invokevirtual #15                 // Method java/lang/Thread.interrupt:()V
     101: iload         14
     103: ireturn
     104: astore        14
     106: iconst_1
     107: istore        13
     109: lload         9
     111: invokestatic  #10                 // Method java/lang/System.nanoTime:()J
     114: lload         7
     116: lsub
     117: lsub
     118: lstore        11
     120: goto          139
     123: astore        15
     125: lload         9
     127: invokestatic  #10                 // Method java/lang/System.nanoTime:()J
     130: lload         7
     132: lsub
     133: lsub
     134: lstore        11
     136: aload         15
     138: athrow
     139: goto          49
     142: aload_0
     143: aload_1
     144: lload         11
     146: iload         6
     148: invokespecial #28                 // Method waitUninterruptibly:(Lcom/google/common/util/concurrent/Monitor$Guard;JZ)Z
     151: istore        14
     153: goto          169
     156: astore        15
     158: aload         5
     160: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
     163: aload         15
     165: invokestatic  #25                 // Method com/google/common/base/Throwables.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
     168: athrow
     169: iload         14
     171: ifeq          191
     174: iconst_1
     175: istore        15
     177: iload         13
     179: ifeq          188
     182: invokestatic  #14                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
     185: invokevirtual #15                 // Method java/lang/Thread.interrupt:()V
     188: iload         15
     190: ireturn
     191: aload         5
     193: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
     196: iconst_0
     197: istore        15
     199: iload         13
     201: ifeq          210
     204: invokestatic  #14                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
     207: invokevirtual #15                 // Method java/lang/Thread.interrupt:()V
     210: iload         15
     212: ireturn
     213: astore        16
     215: iload         13
     217: ifeq          226
     220: invokestatic  #14                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
     223: invokevirtual #15                 // Method java/lang/Thread.interrupt:()V
     226: aload         16
     228: athrow
    Exception table:
       from    to  target type
          49    62   104   Class java/lang/InterruptedException
          76    79   104   Class java/lang/InterruptedException
          49    62   123   any
          76    79   123   any
         104   109   123   any
         123   125   123   any
         142   153   156   Class java/lang/Throwable
          49    90   213   any
         104   177   213   any
         191   199   213   any
         213   215   213   any

  public boolean enterIf(com.google.common.util.concurrent.Monitor$Guard);
    Code:
       0: aload_1
       1: getfield      #18                 // Field com/google/common/util/concurrent/Monitor$Guard.monitor:Lcom/google/common/util/concurrent/Monitor;
       4: aload_0
       5: if_acmpeq     16
       8: new           #19                 // class java/lang/IllegalMonitorStateException
      11: dup
      12: invokespecial #20                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      20: astore_2
      21: aload_2
      22: invokevirtual #8                  // Method java/util/concurrent/locks/ReentrantLock.lock:()V
      25: aload_1
      26: invokevirtual #29                 // Method com/google/common/util/concurrent/Monitor$Guard.isSatisfied:()Z
      29: istore_3
      30: goto          45
      33: astore        4
      35: aload_2
      36: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      39: aload         4
      41: invokestatic  #25                 // Method com/google/common/base/Throwables.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
      44: athrow
      45: iload_3
      46: ifeq          51
      49: iconst_1
      50: ireturn
      51: aload_2
      52: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      55: iconst_0
      56: ireturn
    Exception table:
       from    to  target type
          25    30    33   Class java/lang/Throwable

  public boolean enterIfInterruptibly(com.google.common.util.concurrent.Monitor$Guard) throws java.lang.InterruptedException;
    Code:
       0: aload_1
       1: getfield      #18                 // Field com/google/common/util/concurrent/Monitor$Guard.monitor:Lcom/google/common/util/concurrent/Monitor;
       4: aload_0
       5: if_acmpeq     16
       8: new           #19                 // class java/lang/IllegalMonitorStateException
      11: dup
      12: invokespecial #20                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      20: astore_2
      21: aload_2
      22: invokevirtual #9                  // Method java/util/concurrent/locks/ReentrantLock.lockInterruptibly:()V
      25: aload_1
      26: invokevirtual #29                 // Method com/google/common/util/concurrent/Monitor$Guard.isSatisfied:()Z
      29: istore_3
      30: goto          45
      33: astore        4
      35: aload_2
      36: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      39: aload         4
      41: invokestatic  #25                 // Method com/google/common/base/Throwables.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
      44: athrow
      45: iload_3
      46: ifeq          51
      49: iconst_1
      50: ireturn
      51: aload_2
      52: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      55: iconst_0
      56: ireturn
    Exception table:
       from    to  target type
          25    30    33   Class java/lang/Throwable

  public boolean enterIf(com.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_1
       1: getfield      #18                 // Field com/google/common/util/concurrent/Monitor$Guard.monitor:Lcom/google/common/util/concurrent/Monitor;
       4: aload_0
       5: if_acmpeq     16
       8: new           #19                 // class java/lang/IllegalMonitorStateException
      11: dup
      12: invokespecial #20                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      20: astore        5
      22: aload_0
      23: lload_2
      24: aload         4
      26: invokevirtual #30                 // Method enter:(JLjava/util/concurrent/TimeUnit;)Z
      29: ifne          34
      32: iconst_0
      33: ireturn
      34: aload_1
      35: invokevirtual #29                 // Method com/google/common/util/concurrent/Monitor$Guard.isSatisfied:()Z
      38: istore        6
      40: goto          56
      43: astore        7
      45: aload         5
      47: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      50: aload         7
      52: invokestatic  #25                 // Method com/google/common/base/Throwables.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
      55: athrow
      56: iload         6
      58: ifeq          63
      61: iconst_1
      62: ireturn
      63: aload         5
      65: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      68: iconst_0
      69: ireturn
    Exception table:
       from    to  target type
          34    40    43   Class java/lang/Throwable

  public boolean enterIfInterruptibly(com.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
    Code:
       0: aload_1
       1: getfield      #18                 // Field com/google/common/util/concurrent/Monitor$Guard.monitor:Lcom/google/common/util/concurrent/Monitor;
       4: aload_0
       5: if_acmpeq     16
       8: new           #19                 // class java/lang/IllegalMonitorStateException
      11: dup
      12: invokespecial #20                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      20: astore        5
      22: aload         5
      24: lload_2
      25: aload         4
      27: invokevirtual #13                 // Method java/util/concurrent/locks/ReentrantLock.tryLock:(JLjava/util/concurrent/TimeUnit;)Z
      30: ifne          35
      33: iconst_0
      34: ireturn
      35: aload_1
      36: invokevirtual #29                 // Method com/google/common/util/concurrent/Monitor$Guard.isSatisfied:()Z
      39: istore        6
      41: goto          57
      44: astore        7
      46: aload         5
      48: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      51: aload         7
      53: invokestatic  #25                 // Method com/google/common/base/Throwables.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
      56: athrow
      57: iload         6
      59: ifeq          64
      62: iconst_1
      63: ireturn
      64: aload         5
      66: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      69: iconst_0
      70: ireturn
    Exception table:
       from    to  target type
          35    41    44   Class java/lang/Throwable

  public boolean tryEnterIf(com.google.common.util.concurrent.Monitor$Guard);
    Code:
       0: aload_1
       1: getfield      #18                 // Field com/google/common/util/concurrent/Monitor$Guard.monitor:Lcom/google/common/util/concurrent/Monitor;
       4: aload_0
       5: if_acmpeq     16
       8: new           #19                 // class java/lang/IllegalMonitorStateException
      11: dup
      12: invokespecial #20                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      20: astore_2
      21: aload_2
      22: invokevirtual #17                 // Method java/util/concurrent/locks/ReentrantLock.tryLock:()Z
      25: ifne          30
      28: iconst_0
      29: ireturn
      30: aload_1
      31: invokevirtual #29                 // Method com/google/common/util/concurrent/Monitor$Guard.isSatisfied:()Z
      34: istore_3
      35: goto          50
      38: astore        4
      40: aload_2
      41: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      44: aload         4
      46: invokestatic  #25                 // Method com/google/common/base/Throwables.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
      49: athrow
      50: iload_3
      51: ifeq          56
      54: iconst_1
      55: ireturn
      56: aload_2
      57: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      60: iconst_0
      61: ireturn
    Exception table:
       from    to  target type
          30    35    38   Class java/lang/Throwable

  public void waitFor(com.google.common.util.concurrent.Monitor$Guard) throws java.lang.InterruptedException;
    Code:
       0: aload_1
       1: getfield      #18                 // Field com/google/common/util/concurrent/Monitor$Guard.monitor:Lcom/google/common/util/concurrent/Monitor;
       4: aload_0
       5: if_acmpeq     16
       8: new           #19                 // class java/lang/IllegalMonitorStateException
      11: dup
      12: invokespecial #20                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      20: invokevirtual #21                 // Method java/util/concurrent/locks/ReentrantLock.isHeldByCurrentThread:()Z
      23: ifne          34
      26: new           #19                 // class java/lang/IllegalMonitorStateException
      29: dup
      30: invokespecial #20                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      33: athrow
      34: aload_0
      35: aload_1
      36: iconst_1
      37: invokespecial #22                 // Method waitInterruptibly:(Lcom/google/common/util/concurrent/Monitor$Guard;Z)V
      40: return

  public void waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard);
    Code:
       0: aload_1
       1: getfield      #18                 // Field com/google/common/util/concurrent/Monitor$Guard.monitor:Lcom/google/common/util/concurrent/Monitor;
       4: aload_0
       5: if_acmpeq     16
       8: new           #19                 // class java/lang/IllegalMonitorStateException
      11: dup
      12: invokespecial #20                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      20: invokevirtual #21                 // Method java/util/concurrent/locks/ReentrantLock.isHeldByCurrentThread:()Z
      23: ifne          34
      26: new           #19                 // class java/lang/IllegalMonitorStateException
      29: dup
      30: invokespecial #20                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      33: athrow
      34: aload_0
      35: aload_1
      36: iconst_1
      37: invokespecial #26                 // Method waitUninterruptibly:(Lcom/google/common/util/concurrent/Monitor$Guard;Z)V
      40: return

  public boolean waitFor(com.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
    Code:
       0: aload_1
       1: getfield      #18                 // Field com/google/common/util/concurrent/Monitor$Guard.monitor:Lcom/google/common/util/concurrent/Monitor;
       4: aload_0
       5: if_acmpeq     16
       8: new           #19                 // class java/lang/IllegalMonitorStateException
      11: dup
      12: invokespecial #20                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      20: invokevirtual #21                 // Method java/util/concurrent/locks/ReentrantLock.isHeldByCurrentThread:()Z
      23: ifne          34
      26: new           #19                 // class java/lang/IllegalMonitorStateException
      29: dup
      30: invokespecial #20                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      33: athrow
      34: aload_0
      35: aload_1
      36: aload         4
      38: lload_2
      39: invokevirtual #11                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      42: iconst_1
      43: invokespecial #27                 // Method waitInterruptibly:(Lcom/google/common/util/concurrent/Monitor$Guard;JZ)Z
      46: ireturn

  public boolean waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_1
       1: getfield      #18                 // Field com/google/common/util/concurrent/Monitor$Guard.monitor:Lcom/google/common/util/concurrent/Monitor;
       4: aload_0
       5: if_acmpeq     16
       8: new           #19                 // class java/lang/IllegalMonitorStateException
      11: dup
      12: invokespecial #20                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      20: invokevirtual #21                 // Method java/util/concurrent/locks/ReentrantLock.isHeldByCurrentThread:()Z
      23: ifne          34
      26: new           #19                 // class java/lang/IllegalMonitorStateException
      29: dup
      30: invokespecial #20                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      33: athrow
      34: aload_0
      35: aload_1
      36: aload         4
      38: lload_2
      39: invokevirtual #11                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      42: iconst_1
      43: invokespecial #28                 // Method waitUninterruptibly:(Lcom/google/common/util/concurrent/Monitor$Guard;JZ)Z
      46: ireturn

  public void leave();
    Code:
       0: aload_0
       1: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: astore_1
       5: aload_1
       6: invokevirtual #21                 // Method java/util/concurrent/locks/ReentrantLock.isHeldByCurrentThread:()Z
       9: ifne          20
      12: new           #19                 // class java/lang/IllegalMonitorStateException
      15: dup
      16: invokespecial #20                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      19: athrow
      20: aload_0
      21: aconst_null
      22: invokespecial #31                 // Method signalConditionsOfSatisfiedGuards:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
      25: aload_1
      26: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      29: goto          39
      32: astore_2
      33: aload_1
      34: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      37: aload_2
      38: athrow
      39: return
    Exception table:
       from    to  target type
          20    25    32   any
          32    33    32   any

  public void reevaluateGuards();
    Code:
       0: aload_0
       1: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: astore_1
       5: aload_1
       6: invokevirtual #8                  // Method java/util/concurrent/locks/ReentrantLock.lock:()V
       9: aload_0
      10: aconst_null
      11: invokespecial #31                 // Method signalConditionsOfSatisfiedGuards:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
      14: aload_1
      15: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      18: goto          28
      21: astore_2
      22: aload_1
      23: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      26: aload_2
      27: athrow
      28: return
    Exception table:
       from    to  target type
           9    14    21   any
          21    22    21   any

  public boolean isFair();
    Code:
       0: aload_0
       1: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #32                 // Method java/util/concurrent/locks/ReentrantLock.isFair:()Z
       7: ireturn

  public boolean isOccupied();
    Code:
       0: aload_0
       1: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #33                 // Method java/util/concurrent/locks/ReentrantLock.isLocked:()Z
       7: ireturn

  public boolean isOccupiedByCurrentThread();
    Code:
       0: aload_0
       1: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #21                 // Method java/util/concurrent/locks/ReentrantLock.isHeldByCurrentThread:()Z
       7: ireturn

  public int getOccupiedDepth();
    Code:
       0: aload_0
       1: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #34                 // Method java/util/concurrent/locks/ReentrantLock.getHoldCount:()I
       7: ireturn

  public int getQueueLength();
    Code:
       0: aload_0
       1: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #35                 // Method java/util/concurrent/locks/ReentrantLock.getQueueLength:()I
       7: ireturn

  public boolean hasQueuedThreads();
    Code:
       0: aload_0
       1: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #36                 // Method java/util/concurrent/locks/ReentrantLock.hasQueuedThreads:()Z
       7: ireturn

  public boolean hasQueuedThread(java.lang.Thread);
    Code:
       0: aload_0
       1: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: aload_1
       5: invokevirtual #37                 // Method java/util/concurrent/locks/ReentrantLock.hasQueuedThread:(Ljava/lang/Thread;)Z
       8: ireturn

  public boolean hasWaiters(com.google.common.util.concurrent.Monitor$Guard);
    Code:
       0: aload_1
       1: getfield      #18                 // Field com/google/common/util/concurrent/Monitor$Guard.monitor:Lcom/google/common/util/concurrent/Monitor;
       4: aload_0
       5: if_acmpeq     16
       8: new           #19                 // class java/lang/IllegalMonitorStateException
      11: dup
      12: invokespecial #20                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      20: invokevirtual #8                  // Method java/util/concurrent/locks/ReentrantLock.lock:()V
      23: aload_1
      24: getfield      #38                 // Field com/google/common/util/concurrent/Monitor$Guard.waiterCount:I
      27: ifle          34
      30: iconst_1
      31: goto          35
      34: iconst_0
      35: istore_2
      36: aload_0
      37: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      40: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      43: iload_2
      44: ireturn
      45: astore_3
      46: aload_0
      47: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      50: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      53: aload_3
      54: athrow
    Exception table:
       from    to  target type
          23    36    45   any
          45    46    45   any

  public int getWaitQueueLength(com.google.common.util.concurrent.Monitor$Guard);
    Code:
       0: aload_1
       1: getfield      #18                 // Field com/google/common/util/concurrent/Monitor$Guard.monitor:Lcom/google/common/util/concurrent/Monitor;
       4: aload_0
       5: if_acmpeq     16
       8: new           #19                 // class java/lang/IllegalMonitorStateException
      11: dup
      12: invokespecial #20                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      20: invokevirtual #8                  // Method java/util/concurrent/locks/ReentrantLock.lock:()V
      23: aload_1
      24: getfield      #38                 // Field com/google/common/util/concurrent/Monitor$Guard.waiterCount:I
      27: istore_2
      28: aload_0
      29: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      32: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      35: iload_2
      36: ireturn
      37: astore_3
      38: aload_0
      39: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      42: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      45: aload_3
      46: athrow
    Exception table:
       from    to  target type
          23    28    37   any
          37    38    37   any

  private void signalConditionsOfSatisfiedGuards(com.google.common.util.concurrent.Monitor$Guard);
    Code:
       0: aload_0
       1: getfield      #5                  // Field activeGuards:Ljava/util/ArrayList;
       4: astore_2
       5: aload_2
       6: invokevirtual #39                 // Method java/util/ArrayList.size:()I
       9: istore_3
      10: iconst_0
      11: istore        4
      13: iload         4
      15: iload_3
      16: if_icmpge     73
      19: aload_2
      20: iload         4
      22: invokevirtual #40                 // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
      25: checkcast     #41                 // class com/google/common/util/concurrent/Monitor$Guard
      28: astore        5
      30: aload         5
      32: aload_1
      33: if_acmpne     48
      36: aload         5
      38: getfield      #38                 // Field com/google/common/util/concurrent/Monitor$Guard.waiterCount:I
      41: iconst_1
      42: if_icmpne     48
      45: goto          67
      48: aload         5
      50: invokevirtual #29                 // Method com/google/common/util/concurrent/Monitor$Guard.isSatisfied:()Z
      53: ifeq          67
      56: aload         5
      58: getfield      #42                 // Field com/google/common/util/concurrent/Monitor$Guard.condition:Ljava/util/concurrent/locks/Condition;
      61: invokeinterface #43,  1           // InterfaceMethod java/util/concurrent/locks/Condition.signal:()V
      66: return
      67: iinc          4, 1
      70: goto          13
      73: goto          120
      76: astore        4
      78: iconst_0
      79: istore        5
      81: iload         5
      83: iload_3
      84: if_icmpge     114
      87: aload_2
      88: iload         5
      90: invokevirtual #40                 // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
      93: checkcast     #41                 // class com/google/common/util/concurrent/Monitor$Guard
      96: astore        6
      98: aload         6
     100: getfield      #42                 // Field com/google/common/util/concurrent/Monitor$Guard.condition:Ljava/util/concurrent/locks/Condition;
     103: invokeinterface #44,  1           // InterfaceMethod java/util/concurrent/locks/Condition.signalAll:()V
     108: iinc          5, 1
     111: goto          81
     114: aload         4
     116: invokestatic  #25                 // Method com/google/common/base/Throwables.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
     119: athrow
     120: return
    Exception table:
       from    to  target type
          10    66    76   Class java/lang/Throwable
          67    73    76   Class java/lang/Throwable

  private void incrementWaiters(com.google.common.util.concurrent.Monitor$Guard);
    Code:
       0: aload_1
       1: dup
       2: getfield      #38                 // Field com/google/common/util/concurrent/Monitor$Guard.waiterCount:I
       5: dup_x1
       6: iconst_1
       7: iadd
       8: putfield      #38                 // Field com/google/common/util/concurrent/Monitor$Guard.waiterCount:I
      11: istore_2
      12: iload_2
      13: ifne          25
      16: aload_0
      17: getfield      #5                  // Field activeGuards:Ljava/util/ArrayList;
      20: aload_1
      21: invokevirtual #45                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
      24: pop
      25: return

  private void decrementWaiters(com.google.common.util.concurrent.Monitor$Guard);
    Code:
       0: aload_1
       1: dup
       2: getfield      #38                 // Field com/google/common/util/concurrent/Monitor$Guard.waiterCount:I
       5: iconst_1
       6: isub
       7: dup_x1
       8: putfield      #38                 // Field com/google/common/util/concurrent/Monitor$Guard.waiterCount:I
      11: istore_2
      12: iload_2
      13: ifne          25
      16: aload_0
      17: getfield      #5                  // Field activeGuards:Ljava/util/ArrayList;
      20: aload_1
      21: invokevirtual #46                 // Method java/util/ArrayList.remove:(Ljava/lang/Object;)Z
      24: pop
      25: return

  private void waitInterruptibly(com.google.common.util.concurrent.Monitor$Guard, boolean) throws java.lang.InterruptedException;
    Code:
       0: aload_1
       1: invokevirtual #29                 // Method com/google/common/util/concurrent/Monitor$Guard.isSatisfied:()Z
       4: ifne          87
       7: iload_2
       8: ifeq          16
      11: aload_0
      12: aconst_null
      13: invokespecial #31                 // Method signalConditionsOfSatisfiedGuards:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
      16: aload_0
      17: aload_1
      18: invokespecial #47                 // Method incrementWaiters:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
      21: aload_1
      22: getfield      #42                 // Field com/google/common/util/concurrent/Monitor$Guard.condition:Ljava/util/concurrent/locks/Condition;
      25: astore_3
      26: aload_3
      27: invokeinterface #48,  1           // InterfaceMethod java/util/concurrent/locks/Condition.await:()V
      32: goto          62
      35: astore        4
      37: aload_0
      38: aload_1
      39: invokespecial #31                 // Method signalConditionsOfSatisfiedGuards:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
      42: goto          59
      45: astore        5
      47: invokestatic  #14                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      50: invokevirtual #15                 // Method java/lang/Thread.interrupt:()V
      53: aload         5
      55: invokestatic  #25                 // Method com/google/common/base/Throwables.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
      58: athrow
      59: aload         4
      61: athrow
      62: aload_1
      63: invokevirtual #29                 // Method com/google/common/util/concurrent/Monitor$Guard.isSatisfied:()Z
      66: ifeq          26
      69: aload_0
      70: aload_1
      71: invokespecial #49                 // Method decrementWaiters:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
      74: goto          87
      77: astore        6
      79: aload_0
      80: aload_1
      81: invokespecial #49                 // Method decrementWaiters:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
      84: aload         6
      86: athrow
      87: return
    Exception table:
       from    to  target type
          26    32    35   Class java/lang/InterruptedException
          37    42    45   Class java/lang/Throwable
          21    69    77   any
          77    79    77   any

  private void waitUninterruptibly(com.google.common.util.concurrent.Monitor$Guard, boolean);
    Code:
       0: aload_1
       1: invokevirtual #29                 // Method com/google/common/util/concurrent/Monitor$Guard.isSatisfied:()Z
       4: ifne          57
       7: iload_2
       8: ifeq          16
      11: aload_0
      12: aconst_null
      13: invokespecial #31                 // Method signalConditionsOfSatisfiedGuards:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
      16: aload_0
      17: aload_1
      18: invokespecial #47                 // Method incrementWaiters:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
      21: aload_1
      22: getfield      #42                 // Field com/google/common/util/concurrent/Monitor$Guard.condition:Ljava/util/concurrent/locks/Condition;
      25: astore_3
      26: aload_3
      27: invokeinterface #50,  1           // InterfaceMethod java/util/concurrent/locks/Condition.awaitUninterruptibly:()V
      32: aload_1
      33: invokevirtual #29                 // Method com/google/common/util/concurrent/Monitor$Guard.isSatisfied:()Z
      36: ifeq          26
      39: aload_0
      40: aload_1
      41: invokespecial #49                 // Method decrementWaiters:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
      44: goto          57
      47: astore        4
      49: aload_0
      50: aload_1
      51: invokespecial #49                 // Method decrementWaiters:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
      54: aload         4
      56: athrow
      57: return
    Exception table:
       from    to  target type
          21    39    47   any
          47    49    47   any

  private boolean waitInterruptibly(com.google.common.util.concurrent.Monitor$Guard, long, boolean) throws java.lang.InterruptedException;
    Code:
       0: aload_1
       1: invokevirtual #29                 // Method com/google/common/util/concurrent/Monitor$Guard.isSatisfied:()Z
       4: ifne          109
       7: iload         4
       9: ifeq          17
      12: aload_0
      13: aconst_null
      14: invokespecial #31                 // Method signalConditionsOfSatisfiedGuards:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
      17: aload_0
      18: aload_1
      19: invokespecial #47                 // Method incrementWaiters:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
      22: aload_1
      23: getfield      #42                 // Field com/google/common/util/concurrent/Monitor$Guard.condition:Ljava/util/concurrent/locks/Condition;
      26: astore        5
      28: lload_2
      29: lconst_0
      30: lcmp
      31: ifgt          45
      34: iconst_0
      35: istore        6
      37: aload_0
      38: aload_1
      39: invokespecial #49                 // Method decrementWaiters:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
      42: iload         6
      44: ireturn
      45: aload         5
      47: lload_2
      48: invokeinterface #51,  3           // InterfaceMethod java/util/concurrent/locks/Condition.awaitNanos:(J)J
      53: lstore_2
      54: goto          84
      57: astore        6
      59: aload_0
      60: aload_1
      61: invokespecial #31                 // Method signalConditionsOfSatisfiedGuards:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
      64: goto          81
      67: astore        7
      69: invokestatic  #14                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      72: invokevirtual #15                 // Method java/lang/Thread.interrupt:()V
      75: aload         7
      77: invokestatic  #25                 // Method com/google/common/base/Throwables.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
      80: athrow
      81: aload         6
      83: athrow
      84: aload_1
      85: invokevirtual #29                 // Method com/google/common/util/concurrent/Monitor$Guard.isSatisfied:()Z
      88: ifeq          28
      91: aload_0
      92: aload_1
      93: invokespecial #49                 // Method decrementWaiters:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
      96: goto          109
      99: astore        8
     101: aload_0
     102: aload_1
     103: invokespecial #49                 // Method decrementWaiters:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
     106: aload         8
     108: athrow
     109: iconst_1
     110: ireturn
    Exception table:
       from    to  target type
          45    54    57   Class java/lang/InterruptedException
          59    64    67   Class java/lang/Throwable
          22    37    99   any
          45    91    99   any
          99   101    99   any

  private boolean waitUninterruptibly(com.google.common.util.concurrent.Monitor$Guard, long, boolean);
    Code:
       0: aload_1
       1: invokevirtual #29                 // Method com/google/common/util/concurrent/Monitor$Guard.isSatisfied:()Z
       4: ifne          174
       7: invokestatic  #10                 // Method java/lang/System.nanoTime:()J
      10: lstore        5
      12: iload         4
      14: ifeq          22
      17: aload_0
      18: aconst_null
      19: invokespecial #31                 // Method signalConditionsOfSatisfiedGuards:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
      22: iconst_0
      23: istore        7
      25: aload_0
      26: aload_1
      27: invokespecial #47                 // Method incrementWaiters:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
      30: aload_1
      31: getfield      #42                 // Field com/google/common/util/concurrent/Monitor$Guard.condition:Ljava/util/concurrent/locks/Condition;
      34: astore        8
      36: lload_2
      37: lstore        9
      39: lload         9
      41: lconst_0
      42: lcmp
      43: ifgt          68
      46: iconst_0
      47: istore        11
      49: aload_0
      50: aload_1
      51: invokespecial #49                 // Method decrementWaiters:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
      54: iload         7
      56: ifeq          65
      59: invokestatic  #14                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      62: invokevirtual #15                 // Method java/lang/Thread.interrupt:()V
      65: iload         11
      67: ireturn
      68: aload         8
      70: lload         9
      72: invokeinterface #51,  3           // InterfaceMethod java/util/concurrent/locks/Condition.awaitNanos:(J)J
      77: lstore        9
      79: goto          119
      82: astore        11
      84: aload_0
      85: aload_1
      86: invokespecial #31                 // Method signalConditionsOfSatisfiedGuards:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
      89: goto          106
      92: astore        12
      94: invokestatic  #14                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      97: invokevirtual #15                 // Method java/lang/Thread.interrupt:()V
     100: aload         12
     102: invokestatic  #25                 // Method com/google/common/base/Throwables.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
     105: athrow
     106: iconst_1
     107: istore        7
     109: lload_2
     110: invokestatic  #10                 // Method java/lang/System.nanoTime:()J
     113: lload         5
     115: lsub
     116: lsub
     117: lstore        9
     119: aload_1
     120: invokevirtual #29                 // Method com/google/common/util/concurrent/Monitor$Guard.isSatisfied:()Z
     123: ifeq          39
     126: aload_0
     127: aload_1
     128: invokespecial #49                 // Method decrementWaiters:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
     131: goto          144
     134: astore        13
     136: aload_0
     137: aload_1
     138: invokespecial #49                 // Method decrementWaiters:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
     141: aload         13
     143: athrow
     144: iload         7
     146: ifeq          174
     149: invokestatic  #14                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
     152: invokevirtual #15                 // Method java/lang/Thread.interrupt:()V
     155: goto          174
     158: astore        14
     160: iload         7
     162: ifeq          171
     165: invokestatic  #14                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
     168: invokevirtual #15                 // Method java/lang/Thread.interrupt:()V
     171: aload         14
     173: athrow
     174: iconst_1
     175: ireturn
    Exception table:
       from    to  target type
          68    79    82   Class java/lang/InterruptedException
          84    89    92   Class java/lang/Throwable
          30    49   134   any
          68   126   134   any
         134   136   134   any
          25    54   158   any
          68   144   158   any
         158   160   158   any

  static java.util.concurrent.locks.ReentrantLock access$000(com.google.common.util.concurrent.Monitor);
    Code:
       0: aload_0
       1: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: areturn
}
