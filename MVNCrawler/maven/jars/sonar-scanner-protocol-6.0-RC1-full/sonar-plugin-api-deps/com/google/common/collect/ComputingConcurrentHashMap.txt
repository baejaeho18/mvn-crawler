Compiled from "ComputingConcurrentHashMap.java"
class com.google.common.collect.ComputingConcurrentHashMap<K, V> extends com.google.common.collect.CustomConcurrentHashMap<K, V> {
  final com.google.common.base.Function<? super K, ? extends V> computingFunction;

  private static final long serialVersionUID;

  com.google.common.collect.ComputingConcurrentHashMap(com.google.common.collect.MapMaker, com.google.common.base.Function<? super K, ? extends V>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method com/google/common/collect/CustomConcurrentHashMap."<init>":(Lcom/google/common/collect/MapMaker;)V
       5: aload_0
       6: aload_2
       7: invokestatic  #2                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #3                  // class com/google/common/base/Function
      13: putfield      #4                  // Field computingFunction:Lcom/google/common/base/Function;
      16: return

  com.google.common.collect.CustomConcurrentHashMap$Segment<K, V> createSegment(int, int);
    Code:
       0: new           #5                  // class com/google/common/collect/ComputingConcurrentHashMap$ComputingSegment
       3: dup
       4: aload_0
       5: iload_1
       6: iload_2
       7: invokespecial #6                  // Method com/google/common/collect/ComputingConcurrentHashMap$ComputingSegment."<init>":(Lcom/google/common/collect/CustomConcurrentHashMap;II)V
      10: areturn

  com.google.common.collect.ComputingConcurrentHashMap$ComputingSegment<K, V> segmentFor(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #7                  // Method com/google/common/collect/CustomConcurrentHashMap.segmentFor:(I)Lcom/google/common/collect/CustomConcurrentHashMap$Segment;
       5: checkcast     #5                  // class com/google/common/collect/ComputingConcurrentHashMap$ComputingSegment
       8: areturn

  V getOrCompute(K) throws java.util.concurrent.ExecutionException;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #2                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       5: invokevirtual #8                  // Method hash:(Ljava/lang/Object;)I
       8: istore_2
       9: aload_0
      10: iload_2
      11: invokevirtual #9                  // Method segmentFor:(I)Lcom/google/common/collect/ComputingConcurrentHashMap$ComputingSegment;
      14: aload_1
      15: iload_2
      16: aload_0
      17: getfield      #4                  // Field computingFunction:Lcom/google/common/base/Function;
      20: invokevirtual #10                 // Method com/google/common/collect/ComputingConcurrentHashMap$ComputingSegment.getOrCompute:(Ljava/lang/Object;ILcom/google/common/base/Function;)Ljava/lang/Object;
      23: areturn

  java.lang.Object writeReplace();
    Code:
       0: new           #11                 // class com/google/common/collect/ComputingConcurrentHashMap$ComputingSerializationProxy
       3: dup
       4: aload_0
       5: getfield      #12                 // Field keyStrength:Lcom/google/common/collect/CustomConcurrentHashMap$Strength;
       8: aload_0
       9: getfield      #13                 // Field valueStrength:Lcom/google/common/collect/CustomConcurrentHashMap$Strength;
      12: aload_0
      13: getfield      #14                 // Field keyEquivalence:Lcom/google/common/base/Equivalence;
      16: aload_0
      17: getfield      #15                 // Field valueEquivalence:Lcom/google/common/base/Equivalence;
      20: aload_0
      21: getfield      #16                 // Field expireAfterWriteNanos:J
      24: aload_0
      25: getfield      #17                 // Field expireAfterAccessNanos:J
      28: aload_0
      29: getfield      #18                 // Field maximumSize:I
      32: aload_0
      33: getfield      #19                 // Field concurrencyLevel:I
      36: aload_0
      37: getfield      #20                 // Field removalListener:Lcom/google/common/collect/MapMaker$RemovalListener;
      40: aload_0
      41: aload_0
      42: getfield      #4                  // Field computingFunction:Lcom/google/common/base/Function;
      45: invokespecial #21                 // Method com/google/common/collect/ComputingConcurrentHashMap$ComputingSerializationProxy."<init>":(Lcom/google/common/collect/CustomConcurrentHashMap$Strength;Lcom/google/common/collect/CustomConcurrentHashMap$Strength;Lcom/google/common/base/Equivalence;Lcom/google/common/base/Equivalence;JJIILcom/google/common/collect/MapMaker$RemovalListener;Ljava/util/concurrent/ConcurrentMap;Lcom/google/common/base/Function;)V
      48: areturn

  com.google.common.collect.CustomConcurrentHashMap$Segment segmentFor(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #9                  // Method segmentFor:(I)Lcom/google/common/collect/ComputingConcurrentHashMap$ComputingSegment;
       5: areturn
}
