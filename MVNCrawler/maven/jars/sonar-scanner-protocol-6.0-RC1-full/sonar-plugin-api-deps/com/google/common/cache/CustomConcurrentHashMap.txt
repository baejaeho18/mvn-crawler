Compiled from "CustomConcurrentHashMap.java"
class com.google.common.cache.CustomConcurrentHashMap<K, V> extends java.util.AbstractMap<K, V> implements java.util.concurrent.ConcurrentMap<K, V> {
  static final int MAXIMUM_CAPACITY;

  static final int MAX_SEGMENTS;

  static final int CONTAINS_VALUE_RETRIES;

  static final int DRAIN_THRESHOLD;

  static final int DRAIN_MAX;

  private static final java.util.logging.Logger logger;

  final int segmentMask;

  final int segmentShift;

  final com.google.common.cache.CustomConcurrentHashMap$Segment<K, V>[] segments;

  final com.google.common.cache.CacheLoader<? super K, V> loader;

  final int concurrencyLevel;

  final com.google.common.base.Equivalence<java.lang.Object> keyEquivalence;

  final com.google.common.base.Equivalence<java.lang.Object> valueEquivalence;

  final com.google.common.cache.CustomConcurrentHashMap$Strength keyStrength;

  final com.google.common.cache.CustomConcurrentHashMap$Strength valueStrength;

  final int maximumSize;

  final long expireAfterAccessNanos;

  final long expireAfterWriteNanos;

  final java.util.Queue<com.google.common.cache.RemovalNotification<K, V>> removalNotificationQueue;

  final com.google.common.cache.RemovalListener<K, V> removalListener;

  final com.google.common.cache.CustomConcurrentHashMap$EntryFactory entryFactory;

  final com.google.common.base.Ticker ticker;

  static final com.google.common.cache.CustomConcurrentHashMap$ValueReference<java.lang.Object, java.lang.Object> UNSET;

  static final java.util.Queue<? extends java.lang.Object> DISCARDING_QUEUE;

  java.util.Set<K> keySet;

  java.util.Collection<V> values;

  java.util.Set<java.util.Map$Entry<K, V>> entrySet;

  com.google.common.cache.CustomConcurrentHashMap(com.google.common.cache.CacheBuilder<? super K, ? super V>, com.google.common.base.Supplier<? extends com.google.common.cache.AbstractCache$StatsCounter>, com.google.common.cache.CacheLoader<? super K, V>);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/util/AbstractMap."<init>":()V
       4: aload_0
       5: aload_3
       6: invokestatic  #3                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       9: checkcast     #4                  // class com/google/common/cache/CacheLoader
      12: putfield      #5                  // Field loader:Lcom/google/common/cache/CacheLoader;
      15: aload_0
      16: aload_1
      17: invokevirtual #6                  // Method com/google/common/cache/CacheBuilder.getConcurrencyLevel:()I
      20: ldc           #7                  // int 65536
      22: invokestatic  #8                  // Method java/lang/Math.min:(II)I
      25: putfield      #9                  // Field concurrencyLevel:I
      28: aload_0
      29: aload_1
      30: invokevirtual #10                 // Method com/google/common/cache/CacheBuilder.getKeyStrength:()Lcom/google/common/cache/CustomConcurrentHashMap$Strength;
      33: putfield      #11                 // Field keyStrength:Lcom/google/common/cache/CustomConcurrentHashMap$Strength;
      36: aload_0
      37: aload_1
      38: invokevirtual #12                 // Method com/google/common/cache/CacheBuilder.getValueStrength:()Lcom/google/common/cache/CustomConcurrentHashMap$Strength;
      41: putfield      #13                 // Field valueStrength:Lcom/google/common/cache/CustomConcurrentHashMap$Strength;
      44: aload_0
      45: aload_1
      46: invokevirtual #14                 // Method com/google/common/cache/CacheBuilder.getKeyEquivalence:()Lcom/google/common/base/Equivalence;
      49: putfield      #15                 // Field keyEquivalence:Lcom/google/common/base/Equivalence;
      52: aload_0
      53: aload_1
      54: invokevirtual #16                 // Method com/google/common/cache/CacheBuilder.getValueEquivalence:()Lcom/google/common/base/Equivalence;
      57: putfield      #17                 // Field valueEquivalence:Lcom/google/common/base/Equivalence;
      60: aload_0
      61: aload_1
      62: getfield      #18                 // Field com/google/common/cache/CacheBuilder.maximumSize:I
      65: putfield      #19                 // Field maximumSize:I
      68: aload_0
      69: aload_1
      70: invokevirtual #20                 // Method com/google/common/cache/CacheBuilder.getExpireAfterAccessNanos:()J
      73: putfield      #21                 // Field expireAfterAccessNanos:J
      76: aload_0
      77: aload_1
      78: invokevirtual #22                 // Method com/google/common/cache/CacheBuilder.getExpireAfterWriteNanos:()J
      81: putfield      #23                 // Field expireAfterWriteNanos:J
      84: aload_0
      85: aload_0
      86: getfield      #11                 // Field keyStrength:Lcom/google/common/cache/CustomConcurrentHashMap$Strength;
      89: aload_0
      90: invokevirtual #24                 // Method expires:()Z
      93: aload_0
      94: invokevirtual #25                 // Method evictsBySize:()Z
      97: invokestatic  #26                 // Method com/google/common/cache/CustomConcurrentHashMap$EntryFactory.getFactory:(Lcom/google/common/cache/CustomConcurrentHashMap$Strength;ZZ)Lcom/google/common/cache/CustomConcurrentHashMap$EntryFactory;
     100: putfield      #27                 // Field entryFactory:Lcom/google/common/cache/CustomConcurrentHashMap$EntryFactory;
     103: aload_0
     104: aload_1
     105: invokevirtual #28                 // Method com/google/common/cache/CacheBuilder.getTicker:()Lcom/google/common/base/Ticker;
     108: putfield      #29                 // Field ticker:Lcom/google/common/base/Ticker;
     111: aload_0
     112: aload_1
     113: invokevirtual #30                 // Method com/google/common/cache/CacheBuilder.getRemovalListener:()Lcom/google/common/cache/RemovalListener;
     116: putfield      #31                 // Field removalListener:Lcom/google/common/cache/RemovalListener;
     119: aload_0
     120: aload_0
     121: getfield      #31                 // Field removalListener:Lcom/google/common/cache/RemovalListener;
     124: getstatic     #32                 // Field com/google/common/cache/CacheBuilder$NullListener.INSTANCE:Lcom/google/common/cache/CacheBuilder$NullListener;
     127: if_acmpne     136
     130: invokestatic  #33                 // Method discardingQueue:()Ljava/util/Queue;
     133: goto          143
     136: new           #34                 // class java/util/concurrent/ConcurrentLinkedQueue
     139: dup
     140: invokespecial #35                 // Method java/util/concurrent/ConcurrentLinkedQueue."<init>":()V
     143: putfield      #36                 // Field removalNotificationQueue:Ljava/util/Queue;
     146: aload_1
     147: invokevirtual #37                 // Method com/google/common/cache/CacheBuilder.getInitialCapacity:()I
     150: ldc           #38                 // int 1073741824
     152: invokestatic  #8                  // Method java/lang/Math.min:(II)I
     155: istore        4
     157: aload_0
     158: invokevirtual #25                 // Method evictsBySize:()Z
     161: ifeq          175
     164: iload         4
     166: aload_0
     167: getfield      #19                 // Field maximumSize:I
     170: invokestatic  #8                  // Method java/lang/Math.min:(II)I
     173: istore        4
     175: iconst_0
     176: istore        5
     178: iconst_1
     179: istore        6
     181: iload         6
     183: aload_0
     184: getfield      #9                  // Field concurrencyLevel:I
     187: if_icmpge     220
     190: aload_0
     191: invokevirtual #25                 // Method evictsBySize:()Z
     194: ifeq          208
     197: iload         6
     199: iconst_2
     200: imul
     201: aload_0
     202: getfield      #19                 // Field maximumSize:I
     205: if_icmpgt     220
     208: iinc          5, 1
     211: iload         6
     213: iconst_1
     214: ishl
     215: istore        6
     217: goto          181
     220: aload_0
     221: bipush        32
     223: iload         5
     225: isub
     226: putfield      #39                 // Field segmentShift:I
     229: aload_0
     230: iload         6
     232: iconst_1
     233: isub
     234: putfield      #40                 // Field segmentMask:I
     237: aload_0
     238: aload_0
     239: iload         6
     241: invokevirtual #41                 // Method newSegmentArray:(I)[Lcom/google/common/cache/CustomConcurrentHashMap$Segment;
     244: putfield      #42                 // Field segments:[Lcom/google/common/cache/CustomConcurrentHashMap$Segment;
     247: iload         4
     249: iload         6
     251: idiv
     252: istore        7
     254: iload         7
     256: iload         6
     258: imul
     259: iload         4
     261: if_icmpge     267
     264: iinc          7, 1
     267: iconst_1
     268: istore        8
     270: iload         8
     272: iload         7
     274: if_icmpge     286
     277: iload         8
     279: iconst_1
     280: ishl
     281: istore        8
     283: goto          270
     286: aload_0
     287: invokevirtual #25                 // Method evictsBySize:()Z
     290: ifeq          369
     293: aload_0
     294: getfield      #19                 // Field maximumSize:I
     297: iload         6
     299: idiv
     300: iconst_1
     301: iadd
     302: istore        9
     304: aload_0
     305: getfield      #19                 // Field maximumSize:I
     308: iload         6
     310: irem
     311: istore        10
     313: iconst_0
     314: istore        11
     316: iload         11
     318: aload_0
     319: getfield      #42                 // Field segments:[Lcom/google/common/cache/CustomConcurrentHashMap$Segment;
     322: arraylength
     323: if_icmpge     366
     326: iload         11
     328: iload         10
     330: if_icmpne     336
     333: iinc          9, -1
     336: aload_0
     337: getfield      #42                 // Field segments:[Lcom/google/common/cache/CustomConcurrentHashMap$Segment;
     340: iload         11
     342: aload_0
     343: iload         8
     345: iload         9
     347: aload_2
     348: invokeinterface #43,  1           // InterfaceMethod com/google/common/base/Supplier.get:()Ljava/lang/Object;
     353: checkcast     #44                 // class com/google/common/cache/AbstractCache$StatsCounter
     356: invokevirtual #45                 // Method createSegment:(IILcom/google/common/cache/AbstractCache$StatsCounter;)Lcom/google/common/cache/CustomConcurrentHashMap$Segment;
     359: aastore
     360: iinc          11, 1
     363: goto          316
     366: goto          411
     369: iconst_0
     370: istore        9
     372: iload         9
     374: aload_0
     375: getfield      #42                 // Field segments:[Lcom/google/common/cache/CustomConcurrentHashMap$Segment;
     378: arraylength
     379: if_icmpge     411
     382: aload_0
     383: getfield      #42                 // Field segments:[Lcom/google/common/cache/CustomConcurrentHashMap$Segment;
     386: iload         9
     388: aload_0
     389: iload         8
     391: iconst_m1
     392: aload_2
     393: invokeinterface #43,  1           // InterfaceMethod com/google/common/base/Supplier.get:()Ljava/lang/Object;
     398: checkcast     #44                 // class com/google/common/cache/AbstractCache$StatsCounter
     401: invokevirtual #45                 // Method createSegment:(IILcom/google/common/cache/AbstractCache$StatsCounter;)Lcom/google/common/cache/CustomConcurrentHashMap$Segment;
     404: aastore
     405: iinc          9, 1
     408: goto          372
     411: return

  boolean evictsBySize();
    Code:
       0: aload_0
       1: getfield      #19                 // Field maximumSize:I
       4: iconst_m1
       5: if_icmpeq     12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  boolean expires();
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method expiresAfterWrite:()Z
       4: ifne          14
       7: aload_0
       8: invokevirtual #47                 // Method expiresAfterAccess:()Z
      11: ifeq          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn

  boolean expiresAfterWrite();
    Code:
       0: aload_0
       1: getfield      #23                 // Field expireAfterWriteNanos:J
       4: lconst_0
       5: lcmp
       6: ifle          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  boolean expiresAfterAccess();
    Code:
       0: aload_0
       1: getfield      #21                 // Field expireAfterAccessNanos:J
       4: lconst_0
       5: lcmp
       6: ifle          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  boolean usesKeyReferences();
    Code:
       0: aload_0
       1: getfield      #11                 // Field keyStrength:Lcom/google/common/cache/CustomConcurrentHashMap$Strength;
       4: getstatic     #48                 // Field com/google/common/cache/CustomConcurrentHashMap$Strength.STRONG:Lcom/google/common/cache/CustomConcurrentHashMap$Strength;
       7: if_acmpeq     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  boolean usesValueReferences();
    Code:
       0: aload_0
       1: getfield      #13                 // Field valueStrength:Lcom/google/common/cache/CustomConcurrentHashMap$Strength;
       4: getstatic     #48                 // Field com/google/common/cache/CustomConcurrentHashMap$Strength.STRONG:Lcom/google/common/cache/CustomConcurrentHashMap$Strength;
       7: if_acmpeq     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  static <K, V> com.google.common.cache.CustomConcurrentHashMap$ValueReference<K, V> unset();
    Code:
       0: getstatic     #49                 // Field UNSET:Lcom/google/common/cache/CustomConcurrentHashMap$ValueReference;
       3: areturn

  static <K, V> com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V> nullEntry();
    Code:
       0: getstatic     #50                 // Field com/google/common/cache/CustomConcurrentHashMap$NullEntry.INSTANCE:Lcom/google/common/cache/CustomConcurrentHashMap$NullEntry;
       3: areturn

  static <E> java.util.Queue<E> discardingQueue();
    Code:
       0: getstatic     #51                 // Field DISCARDING_QUEUE:Ljava/util/Queue;
       3: areturn

  static int rehash(int);
    Code:
       0: iload_0
       1: iload_0
       2: bipush        15
       4: ishl
       5: sipush        -12931
       8: ixor
       9: iadd
      10: istore_0
      11: iload_0
      12: iload_0
      13: bipush        10
      15: iushr
      16: ixor
      17: istore_0
      18: iload_0
      19: iload_0
      20: iconst_3
      21: ishl
      22: iadd
      23: istore_0
      24: iload_0
      25: iload_0
      26: bipush        6
      28: iushr
      29: ixor
      30: istore_0
      31: iload_0
      32: iload_0
      33: iconst_2
      34: ishl
      35: iload_0
      36: bipush        14
      38: ishl
      39: iadd
      40: iadd
      41: istore_0
      42: iload_0
      43: iload_0
      44: bipush        16
      46: iushr
      47: ixor
      48: ireturn

  com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V> newEntry(K, int, com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V>);
    Code:
       0: aload_0
       1: iload_2
       2: invokevirtual #52                 // Method segmentFor:(I)Lcom/google/common/cache/CustomConcurrentHashMap$Segment;
       5: aload_1
       6: iload_2
       7: aload_3
       8: invokevirtual #53                 // Method com/google/common/cache/CustomConcurrentHashMap$Segment.newEntry:(Ljava/lang/Object;ILcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
      11: areturn

  com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V> copyEntry(com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V>, com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V>);
    Code:
       0: aload_1
       1: invokeinterface #54,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getHash:()I
       6: istore_3
       7: aload_0
       8: iload_3
       9: invokevirtual #52                 // Method segmentFor:(I)Lcom/google/common/cache/CustomConcurrentHashMap$Segment;
      12: aload_1
      13: aload_2
      14: invokevirtual #55                 // Method com/google/common/cache/CustomConcurrentHashMap$Segment.copyEntry:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
      17: areturn

  com.google.common.cache.CustomConcurrentHashMap$ValueReference<K, V> newValueReference(com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V>, V);
    Code:
       0: aload_1
       1: invokeinterface #54,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getHash:()I
       6: istore_3
       7: aload_0
       8: getfield      #13                 // Field valueStrength:Lcom/google/common/cache/CustomConcurrentHashMap$Strength;
      11: aload_0
      12: iload_3
      13: invokevirtual #52                 // Method segmentFor:(I)Lcom/google/common/cache/CustomConcurrentHashMap$Segment;
      16: aload_1
      17: aload_2
      18: invokevirtual #56                 // Method com/google/common/cache/CustomConcurrentHashMap$Strength.referenceValue:(Lcom/google/common/cache/CustomConcurrentHashMap$Segment;Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;Ljava/lang/Object;)Lcom/google/common/cache/CustomConcurrentHashMap$ValueReference;
      21: areturn

  int hash(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #15                 // Field keyEquivalence:Lcom/google/common/base/Equivalence;
       4: aload_1
       5: invokevirtual #57                 // Method com/google/common/base/Equivalence.hash:(Ljava/lang/Object;)I
       8: istore_2
       9: iload_2
      10: invokestatic  #58                 // Method rehash:(I)I
      13: ireturn

  void reclaimValue(com.google.common.cache.CustomConcurrentHashMap$ValueReference<K, V>);
    Code:
       0: aload_1
       1: invokeinterface #59,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ValueReference.getEntry:()Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
       6: astore_2
       7: aload_2
       8: invokeinterface #54,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getHash:()I
      13: istore_3
      14: aload_0
      15: iload_3
      16: invokevirtual #52                 // Method segmentFor:(I)Lcom/google/common/cache/CustomConcurrentHashMap$Segment;
      19: aload_2
      20: invokeinterface #60,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getKey:()Ljava/lang/Object;
      25: iload_3
      26: aload_1
      27: invokevirtual #61                 // Method com/google/common/cache/CustomConcurrentHashMap$Segment.reclaimValue:(Ljava/lang/Object;ILcom/google/common/cache/CustomConcurrentHashMap$ValueReference;)Z
      30: pop
      31: return

  void reclaimKey(com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V>);
    Code:
       0: aload_1
       1: invokeinterface #54,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getHash:()I
       6: istore_2
       7: aload_0
       8: iload_2
       9: invokevirtual #52                 // Method segmentFor:(I)Lcom/google/common/cache/CustomConcurrentHashMap$Segment;
      12: aload_1
      13: iload_2
      14: invokevirtual #62                 // Method com/google/common/cache/CustomConcurrentHashMap$Segment.reclaimKey:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;I)Z
      17: pop
      18: return

  boolean isLive(com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V>);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #54,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getHash:()I
       7: invokevirtual #52                 // Method segmentFor:(I)Lcom/google/common/cache/CustomConcurrentHashMap$Segment;
      10: aload_1
      11: invokevirtual #63                 // Method com/google/common/cache/CustomConcurrentHashMap$Segment.getLiveValue:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)Ljava/lang/Object;
      14: ifnull        21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: ireturn

  com.google.common.cache.CustomConcurrentHashMap$Segment<K, V> segmentFor(int);
    Code:
       0: aload_0
       1: getfield      #42                 // Field segments:[Lcom/google/common/cache/CustomConcurrentHashMap$Segment;
       4: iload_1
       5: aload_0
       6: getfield      #39                 // Field segmentShift:I
       9: iushr
      10: aload_0
      11: getfield      #40                 // Field segmentMask:I
      14: iand
      15: aaload
      16: areturn

  com.google.common.cache.CustomConcurrentHashMap$Segment<K, V> createSegment(int, int, com.google.common.cache.AbstractCache$StatsCounter);
    Code:
       0: new           #64                 // class com/google/common/cache/CustomConcurrentHashMap$Segment
       3: dup
       4: aload_0
       5: iload_1
       6: iload_2
       7: aload_3
       8: invokespecial #65                 // Method com/google/common/cache/CustomConcurrentHashMap$Segment."<init>":(Lcom/google/common/cache/CustomConcurrentHashMap;IILcom/google/common/cache/AbstractCache$StatsCounter;)V
      11: areturn

  V getLiveValue(com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V>);
    Code:
       0: aload_1
       1: invokeinterface #60,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getKey:()Ljava/lang/Object;
       6: ifnonnull     11
       9: aconst_null
      10: areturn
      11: aload_1
      12: invokeinterface #66,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getValueReference:()Lcom/google/common/cache/CustomConcurrentHashMap$ValueReference;
      17: invokeinterface #67,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ValueReference.get:()Ljava/lang/Object;
      22: astore_2
      23: aload_2
      24: ifnonnull     29
      27: aconst_null
      28: areturn
      29: aload_0
      30: invokevirtual #24                 // Method expires:()Z
      33: ifeq          46
      36: aload_0
      37: aload_1
      38: invokevirtual #68                 // Method isExpired:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)Z
      41: ifeq          46
      44: aconst_null
      45: areturn
      46: aload_2
      47: areturn

  boolean isExpired(com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_0
       3: getfield      #29                 // Field ticker:Lcom/google/common/base/Ticker;
       6: invokevirtual #69                 // Method com/google/common/base/Ticker.read:()J
       9: invokevirtual #70                 // Method isExpired:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;J)Z
      12: ireturn

  boolean isExpired(com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V>, long);
    Code:
       0: lload_2
       1: aload_1
       2: invokeinterface #71,  1           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getExpirationTime:()J
       7: lsub
       8: lconst_0
       9: lcmp
      10: ifle          17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ireturn

  static <K, V> void connectExpirables(com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V>, com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V>);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #72,  2           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.setNextExpirable:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)V
       7: aload_1
       8: aload_0
       9: invokeinterface #73,  2           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.setPreviousExpirable:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)V
      14: return

  static <K, V> void nullifyExpirable(com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V>);
    Code:
       0: invokestatic  #74                 // Method nullEntry:()Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
       3: astore_1
       4: aload_0
       5: aload_1
       6: invokeinterface #72,  2           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.setNextExpirable:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)V
      11: aload_0
      12: aload_1
      13: invokeinterface #73,  2           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.setPreviousExpirable:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)V
      18: return

  void processPendingNotifications();
    Code:
       0: aload_0
       1: getfield      #36                 // Field removalNotificationQueue:Ljava/util/Queue;
       4: invokeinterface #75,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
       9: checkcast     #76                 // class com/google/common/cache/RemovalNotification
      12: dup
      13: astore_1
      14: ifnull        46
      17: aload_0
      18: getfield      #31                 // Field removalListener:Lcom/google/common/cache/RemovalListener;
      21: aload_1
      22: invokeinterface #77,  2           // InterfaceMethod com/google/common/cache/RemovalListener.onRemoval:(Lcom/google/common/cache/RemovalNotification;)V
      27: goto          0
      30: astore_2
      31: getstatic     #79                 // Field logger:Ljava/util/logging/Logger;
      34: getstatic     #80                 // Field java/util/logging/Level.WARNING:Ljava/util/logging/Level;
      37: ldc           #81                 // String Exception thrown by removal listener
      39: aload_2
      40: invokevirtual #82                 // Method java/util/logging/Logger.log:(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Throwable;)V
      43: goto          0
      46: return
    Exception table:
       from    to  target type
          17    27    30   Class java/lang/Exception

  static <K, V> void connectEvictables(com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V>, com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V>);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #83,  2           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.setNextEvictable:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)V
       7: aload_1
       8: aload_0
       9: invokeinterface #84,  2           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.setPreviousEvictable:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)V
      14: return

  static <K, V> void nullifyEvictable(com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V>);
    Code:
       0: invokestatic  #74                 // Method nullEntry:()Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
       3: astore_1
       4: aload_0
       5: aload_1
       6: invokeinterface #83,  2           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.setNextEvictable:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)V
      11: aload_0
      12: aload_1
      13: invokeinterface #84,  2           // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.setPreviousEvictable:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)V
      18: return

  final com.google.common.cache.CustomConcurrentHashMap$Segment<K, V>[] newSegmentArray(int);
    Code:
       0: iload_1
       1: anewarray     #64                 // class com/google/common/cache/CustomConcurrentHashMap$Segment
       4: areturn

  public void cleanUp();
    Code:
       0: aload_0
       1: getfield      #42                 // Field segments:[Lcom/google/common/cache/CustomConcurrentHashMap$Segment;
       4: astore_1
       5: aload_1
       6: arraylength
       7: istore_2
       8: iconst_0
       9: istore_3
      10: iload_3
      11: iload_2
      12: if_icmpge     31
      15: aload_1
      16: iload_3
      17: aaload
      18: astore        4
      20: aload         4
      22: invokevirtual #85                 // Method com/google/common/cache/CustomConcurrentHashMap$Segment.cleanUp:()V
      25: iinc          3, 1
      28: goto          10
      31: return

  public boolean isEmpty();
    Code:
       0: lconst_0
       1: lstore_1
       2: aload_0
       3: getfield      #42                 // Field segments:[Lcom/google/common/cache/CustomConcurrentHashMap$Segment;
       6: astore_3
       7: iconst_0
       8: istore        4
      10: iload         4
      12: aload_3
      13: arraylength
      14: if_icmpge     46
      17: aload_3
      18: iload         4
      20: aaload
      21: getfield      #86                 // Field com/google/common/cache/CustomConcurrentHashMap$Segment.count:I
      24: ifeq          29
      27: iconst_0
      28: ireturn
      29: lload_1
      30: aload_3
      31: iload         4
      33: aaload
      34: getfield      #87                 // Field com/google/common/cache/CustomConcurrentHashMap$Segment.modCount:I
      37: i2l
      38: ladd
      39: lstore_1
      40: iinc          4, 1
      43: goto          10
      46: lload_1
      47: lconst_0
      48: lcmp
      49: ifeq          99
      52: iconst_0
      53: istore        4
      55: iload         4
      57: aload_3
      58: arraylength
      59: if_icmpge     91
      62: aload_3
      63: iload         4
      65: aaload
      66: getfield      #86                 // Field com/google/common/cache/CustomConcurrentHashMap$Segment.count:I
      69: ifeq          74
      72: iconst_0
      73: ireturn
      74: lload_1
      75: aload_3
      76: iload         4
      78: aaload
      79: getfield      #87                 // Field com/google/common/cache/CustomConcurrentHashMap$Segment.modCount:I
      82: i2l
      83: lsub
      84: lstore_1
      85: iinc          4, 1
      88: goto          55
      91: lload_1
      92: lconst_0
      93: lcmp
      94: ifeq          99
      97: iconst_0
      98: ireturn
      99: iconst_1
     100: ireturn

  long longSize();
    Code:
       0: aload_0
       1: getfield      #42                 // Field segments:[Lcom/google/common/cache/CustomConcurrentHashMap$Segment;
       4: astore_1
       5: lconst_0
       6: lstore_2
       7: iconst_0
       8: istore        4
      10: iload         4
      12: aload_1
      13: arraylength
      14: if_icmpge     34
      17: lload_2
      18: aload_1
      19: iload         4
      21: aaload
      22: getfield      #86                 // Field com/google/common/cache/CustomConcurrentHashMap$Segment.count:I
      25: i2l
      26: ladd
      27: lstore_2
      28: iinc          4, 1
      31: goto          10
      34: lload_2
      35: lreturn

  public int size();
    Code:
       0: aload_0
       1: invokevirtual #88                 // Method longSize:()J
       4: invokestatic  #89                 // Method com/google/common/primitives/Ints.saturatedCast:(J)I
       7: ireturn

  public V get(java.lang.Object);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: areturn
       6: aload_0
       7: aload_1
       8: invokevirtual #90                 // Method hash:(Ljava/lang/Object;)I
      11: istore_2
      12: aload_0
      13: iload_2
      14: invokevirtual #52                 // Method segmentFor:(I)Lcom/google/common/cache/CustomConcurrentHashMap$Segment;
      17: aload_1
      18: iload_2
      19: invokevirtual #91                 // Method com/google/common/cache/CustomConcurrentHashMap$Segment.get:(Ljava/lang/Object;I)Ljava/lang/Object;
      22: areturn

  V getOrCompute(K) throws java.util.concurrent.ExecutionException;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #3                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       5: invokevirtual #90                 // Method hash:(Ljava/lang/Object;)I
       8: istore_2
       9: aload_0
      10: iload_2
      11: invokevirtual #52                 // Method segmentFor:(I)Lcom/google/common/cache/CustomConcurrentHashMap$Segment;
      14: aload_1
      15: iload_2
      16: aload_0
      17: getfield      #5                  // Field loader:Lcom/google/common/cache/CacheLoader;
      20: invokevirtual #92                 // Method com/google/common/cache/CustomConcurrentHashMap$Segment.getOrCompute:(Ljava/lang/Object;ILcom/google/common/cache/CacheLoader;)Ljava/lang/Object;
      23: areturn

  com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V> getEntry(java.lang.Object);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: areturn
       6: aload_0
       7: aload_1
       8: invokevirtual #90                 // Method hash:(Ljava/lang/Object;)I
      11: istore_2
      12: aload_0
      13: iload_2
      14: invokevirtual #52                 // Method segmentFor:(I)Lcom/google/common/cache/CustomConcurrentHashMap$Segment;
      17: aload_1
      18: iload_2
      19: invokevirtual #93                 // Method com/google/common/cache/CustomConcurrentHashMap$Segment.getEntry:(Ljava/lang/Object;I)Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
      22: areturn

  com.google.common.cache.CustomConcurrentHashMap$ReferenceEntry<K, V> getLiveEntry(java.lang.Object);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: areturn
       6: aload_0
       7: aload_1
       8: invokevirtual #90                 // Method hash:(Ljava/lang/Object;)I
      11: istore_2
      12: aload_0
      13: iload_2
      14: invokevirtual #52                 // Method segmentFor:(I)Lcom/google/common/cache/CustomConcurrentHashMap$Segment;
      17: aload_1
      18: iload_2
      19: invokevirtual #94                 // Method com/google/common/cache/CustomConcurrentHashMap$Segment.getLiveEntry:(Ljava/lang/Object;I)Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
      22: areturn

  public boolean containsKey(java.lang.Object);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: iconst_0
       5: ireturn
       6: aload_0
       7: aload_1
       8: invokevirtual #90                 // Method hash:(Ljava/lang/Object;)I
      11: istore_2
      12: aload_0
      13: iload_2
      14: invokevirtual #52                 // Method segmentFor:(I)Lcom/google/common/cache/CustomConcurrentHashMap$Segment;
      17: aload_1
      18: iload_2
      19: invokevirtual #95                 // Method com/google/common/cache/CustomConcurrentHashMap$Segment.containsKey:(Ljava/lang/Object;I)Z
      22: ireturn

  public boolean containsValue(java.lang.Object);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: iconst_0
       5: ireturn
       6: aload_0
       7: getfield      #42                 // Field segments:[Lcom/google/common/cache/CustomConcurrentHashMap$Segment;
      10: astore_2
      11: ldc2_w        #96                 // long -1l
      14: lstore_3
      15: iconst_0
      16: istore        5
      18: iload         5
      20: iconst_3
      21: if_icmpge     179
      24: lconst_0
      25: lstore        6
      27: aload_2
      28: astore        8
      30: aload         8
      32: arraylength
      33: istore        9
      35: iconst_0
      36: istore        10
      38: iload         10
      40: iload         9
      42: if_icmpge     160
      45: aload         8
      47: iload         10
      49: aaload
      50: astore        11
      52: aload         11
      54: getfield      #86                 // Field com/google/common/cache/CustomConcurrentHashMap$Segment.count:I
      57: istore        12
      59: aload         11
      61: getfield      #98                 // Field com/google/common/cache/CustomConcurrentHashMap$Segment.table:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      64: astore        13
      66: iconst_0
      67: istore        14
      69: iload         14
      71: aload         13
      73: invokevirtual #99                 // Method java/util/concurrent/atomic/AtomicReferenceArray.length:()I
      76: if_icmpge     143
      79: aload         13
      81: iload         14
      83: invokevirtual #100                // Method java/util/concurrent/atomic/AtomicReferenceArray.get:(I)Ljava/lang/Object;
      86: checkcast     #101                // class com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry
      89: astore        15
      91: aload         15
      93: ifnull        137
      96: aload         11
      98: aload         15
     100: invokevirtual #63                 // Method com/google/common/cache/CustomConcurrentHashMap$Segment.getLiveValue:(Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;)Ljava/lang/Object;
     103: astore        16
     105: aload         16
     107: ifnull        125
     110: aload_0
     111: getfield      #17                 // Field valueEquivalence:Lcom/google/common/base/Equivalence;
     114: aload_1
     115: aload         16
     117: invokevirtual #102                // Method com/google/common/base/Equivalence.equivalent:(Ljava/lang/Object;Ljava/lang/Object;)Z
     120: ifeq          125
     123: iconst_1
     124: ireturn
     125: aload         15
     127: invokeinterface #103,  1          // InterfaceMethod com/google/common/cache/CustomConcurrentHashMap$ReferenceEntry.getNext:()Lcom/google/common/cache/CustomConcurrentHashMap$ReferenceEntry;
     132: astore        15
     134: goto          91
     137: iinc          14, 1
     140: goto          69
     143: lload         6
     145: aload         11
     147: getfield      #87                 // Field com/google/common/cache/CustomConcurrentHashMap$Segment.modCount:I
     150: i2l
     151: ladd
     152: lstore        6
     154: iinc          10, 1
     157: goto          38
     160: lload         6
     162: lload_3
     163: lcmp
     164: ifne          170
     167: goto          179
     170: lload         6
     172: lstore_3
     173: iinc          5, 1
     176: goto          18
     179: iconst_0
     180: ireturn

  public V put(K, V);
    Code:
       0: aload_1
       1: invokestatic  #3                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_2
       6: invokestatic  #3                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       9: pop
      10: aload_0
      11: aload_1
      12: invokevirtual #90                 // Method hash:(Ljava/lang/Object;)I
      15: istore_3
      16: aload_0
      17: iload_3
      18: invokevirtual #52                 // Method segmentFor:(I)Lcom/google/common/cache/CustomConcurrentHashMap$Segment;
      21: aload_1
      22: iload_3
      23: aload_2
      24: iconst_0
      25: invokevirtual #104                // Method com/google/common/cache/CustomConcurrentHashMap$Segment.put:(Ljava/lang/Object;ILjava/lang/Object;Z)Ljava/lang/Object;
      28: areturn

  public V putIfAbsent(K, V);
    Code:
       0: aload_1
       1: invokestatic  #3                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_2
       6: invokestatic  #3                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       9: pop
      10: aload_0
      11: aload_1
      12: invokevirtual #90                 // Method hash:(Ljava/lang/Object;)I
      15: istore_3
      16: aload_0
      17: iload_3
      18: invokevirtual #52                 // Method segmentFor:(I)Lcom/google/common/cache/CustomConcurrentHashMap$Segment;
      21: aload_1
      22: iload_3
      23: aload_2
      24: iconst_1
      25: invokevirtual #104                // Method com/google/common/cache/CustomConcurrentHashMap$Segment.put:(Ljava/lang/Object;ILjava/lang/Object;Z)Ljava/lang/Object;
      28: areturn

  public void putAll(java.util.Map<? extends K, ? extends V>);
    Code:
       0: aload_1
       1: invokeinterface #105,  1          // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
       6: invokeinterface #106,  1          // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      11: astore_2
      12: aload_2
      13: invokeinterface #107,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      18: ifeq          51
      21: aload_2
      22: invokeinterface #108,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      27: checkcast     #109                // class java/util/Map$Entry
      30: astore_3
      31: aload_0
      32: aload_3
      33: invokeinterface #110,  1          // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      38: aload_3
      39: invokeinterface #111,  1          // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      44: invokevirtual #112                // Method put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      47: pop
      48: goto          12
      51: return

  public V remove(java.lang.Object);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: areturn
       6: aload_0
       7: aload_1
       8: invokevirtual #90                 // Method hash:(Ljava/lang/Object;)I
      11: istore_2
      12: aload_0
      13: iload_2
      14: invokevirtual #52                 // Method segmentFor:(I)Lcom/google/common/cache/CustomConcurrentHashMap$Segment;
      17: aload_1
      18: iload_2
      19: invokevirtual #113                // Method com/google/common/cache/CustomConcurrentHashMap$Segment.remove:(Ljava/lang/Object;I)Ljava/lang/Object;
      22: areturn

  public boolean remove(java.lang.Object, java.lang.Object);
    Code:
       0: aload_1
       1: ifnull        8
       4: aload_2
       5: ifnonnull     10
       8: iconst_0
       9: ireturn
      10: aload_0
      11: aload_1
      12: invokevirtual #90                 // Method hash:(Ljava/lang/Object;)I
      15: istore_3
      16: aload_0
      17: iload_3
      18: invokevirtual #52                 // Method segmentFor:(I)Lcom/google/common/cache/CustomConcurrentHashMap$Segment;
      21: aload_1
      22: iload_3
      23: aload_2
      24: invokevirtual #114                // Method com/google/common/cache/CustomConcurrentHashMap$Segment.remove:(Ljava/lang/Object;ILjava/lang/Object;)Z
      27: ireturn

  public boolean replace(K, V, V);
    Code:
       0: aload_1
       1: invokestatic  #3                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_3
       6: invokestatic  #3                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       9: pop
      10: aload_2
      11: ifnonnull     16
      14: iconst_0
      15: ireturn
      16: aload_0
      17: aload_1
      18: invokevirtual #90                 // Method hash:(Ljava/lang/Object;)I
      21: istore        4
      23: aload_0
      24: iload         4
      26: invokevirtual #52                 // Method segmentFor:(I)Lcom/google/common/cache/CustomConcurrentHashMap$Segment;
      29: aload_1
      30: iload         4
      32: aload_2
      33: aload_3
      34: invokevirtual #115                // Method com/google/common/cache/CustomConcurrentHashMap$Segment.replace:(Ljava/lang/Object;ILjava/lang/Object;Ljava/lang/Object;)Z
      37: ireturn

  public V replace(K, V);
    Code:
       0: aload_1
       1: invokestatic  #3                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_2
       6: invokestatic  #3                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       9: pop
      10: aload_0
      11: aload_1
      12: invokevirtual #90                 // Method hash:(Ljava/lang/Object;)I
      15: istore_3
      16: aload_0
      17: iload_3
      18: invokevirtual #52                 // Method segmentFor:(I)Lcom/google/common/cache/CustomConcurrentHashMap$Segment;
      21: aload_1
      22: iload_3
      23: aload_2
      24: invokevirtual #116                // Method com/google/common/cache/CustomConcurrentHashMap$Segment.replace:(Ljava/lang/Object;ILjava/lang/Object;)Ljava/lang/Object;
      27: areturn

  public void clear();
    Code:
       0: aload_0
       1: getfield      #42                 // Field segments:[Lcom/google/common/cache/CustomConcurrentHashMap$Segment;
       4: astore_1
       5: aload_1
       6: arraylength
       7: istore_2
       8: iconst_0
       9: istore_3
      10: iload_3
      11: iload_2
      12: if_icmpge     31
      15: aload_1
      16: iload_3
      17: aaload
      18: astore        4
      20: aload         4
      22: invokevirtual #117                // Method com/google/common/cache/CustomConcurrentHashMap$Segment.clear:()V
      25: iinc          3, 1
      28: goto          10
      31: return

  public java.util.Set<K> keySet();
    Code:
       0: aload_0
       1: getfield      #118                // Field keySet:Ljava/util/Set;
       4: astore_1
       5: aload_1
       6: ifnull        13
       9: aload_1
      10: goto          26
      13: aload_0
      14: new           #119                // class com/google/common/cache/CustomConcurrentHashMap$KeySet
      17: dup
      18: aload_0
      19: invokespecial #120                // Method com/google/common/cache/CustomConcurrentHashMap$KeySet."<init>":(Lcom/google/common/cache/CustomConcurrentHashMap;)V
      22: dup_x1
      23: putfield      #118                // Field keySet:Ljava/util/Set;
      26: areturn

  public java.util.Collection<V> values();
    Code:
       0: aload_0
       1: getfield      #121                // Field values:Ljava/util/Collection;
       4: astore_1
       5: aload_1
       6: ifnull        13
       9: aload_1
      10: goto          26
      13: aload_0
      14: new           #122                // class com/google/common/cache/CustomConcurrentHashMap$Values
      17: dup
      18: aload_0
      19: invokespecial #123                // Method com/google/common/cache/CustomConcurrentHashMap$Values."<init>":(Lcom/google/common/cache/CustomConcurrentHashMap;)V
      22: dup_x1
      23: putfield      #121                // Field values:Ljava/util/Collection;
      26: areturn

  public java.util.Set<java.util.Map$Entry<K, V>> entrySet();
    Code:
       0: aload_0
       1: getfield      #124                // Field entrySet:Ljava/util/Set;
       4: astore_1
       5: aload_1
       6: ifnull        13
       9: aload_1
      10: goto          26
      13: aload_0
      14: new           #125                // class com/google/common/cache/CustomConcurrentHashMap$EntrySet
      17: dup
      18: aload_0
      19: invokespecial #126                // Method com/google/common/cache/CustomConcurrentHashMap$EntrySet."<init>":(Lcom/google/common/cache/CustomConcurrentHashMap;)V
      22: dup_x1
      23: putfield      #124                // Field entrySet:Ljava/util/Set;
      26: areturn

  com.google.common.cache.Cache<K, V> cacheSerializationProxy();
    Code:
       0: new           #127                // class com/google/common/cache/CustomConcurrentHashMap$SerializationProxy
       3: dup
       4: aload_0
       5: getfield      #5                  // Field loader:Lcom/google/common/cache/CacheLoader;
       8: aload_0
       9: getfield      #11                 // Field keyStrength:Lcom/google/common/cache/CustomConcurrentHashMap$Strength;
      12: aload_0
      13: getfield      #13                 // Field valueStrength:Lcom/google/common/cache/CustomConcurrentHashMap$Strength;
      16: aload_0
      17: getfield      #15                 // Field keyEquivalence:Lcom/google/common/base/Equivalence;
      20: aload_0
      21: getfield      #17                 // Field valueEquivalence:Lcom/google/common/base/Equivalence;
      24: aload_0
      25: getfield      #23                 // Field expireAfterWriteNanos:J
      28: aload_0
      29: getfield      #21                 // Field expireAfterAccessNanos:J
      32: aload_0
      33: getfield      #19                 // Field maximumSize:I
      36: aload_0
      37: getfield      #9                  // Field concurrencyLevel:I
      40: aload_0
      41: getfield      #31                 // Field removalListener:Lcom/google/common/cache/RemovalListener;
      44: aload_0
      45: getfield      #29                 // Field ticker:Lcom/google/common/base/Ticker;
      48: invokespecial #128                // Method com/google/common/cache/CustomConcurrentHashMap$SerializationProxy."<init>":(Lcom/google/common/cache/CacheLoader;Lcom/google/common/cache/CustomConcurrentHashMap$Strength;Lcom/google/common/cache/CustomConcurrentHashMap$Strength;Lcom/google/common/base/Equivalence;Lcom/google/common/base/Equivalence;JJIILcom/google/common/cache/RemovalListener;Lcom/google/common/base/Ticker;)V
      51: areturn

  static {};
    Code:
       0: ldc_w         #129                // class com/google/common/cache/CustomConcurrentHashMap
       3: invokevirtual #130                // Method java/lang/Class.getName:()Ljava/lang/String;
       6: invokestatic  #131                // Method java/util/logging/Logger.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;
       9: putstatic     #79                 // Field logger:Ljava/util/logging/Logger;
      12: new           #132                // class com/google/common/cache/CustomConcurrentHashMap$1
      15: dup
      16: invokespecial #133                // Method com/google/common/cache/CustomConcurrentHashMap$1."<init>":()V
      19: putstatic     #49                 // Field UNSET:Lcom/google/common/cache/CustomConcurrentHashMap$ValueReference;
      22: new           #134                // class com/google/common/cache/CustomConcurrentHashMap$2
      25: dup
      26: invokespecial #135                // Method com/google/common/cache/CustomConcurrentHashMap$2."<init>":()V
      29: putstatic     #51                 // Field DISCARDING_QUEUE:Ljava/util/Queue;
      32: return
}
