Compiled from "ConcurrentHashMultiset.java"
public final class com.google.common.collect.ConcurrentHashMultiset<E> extends com.google.common.collect.AbstractMultiset<E> implements java.io.Serializable {
  private final transient java.util.concurrent.ConcurrentMap<E, java.util.concurrent.atomic.AtomicInteger> countMap;

  private transient com.google.common.collect.ConcurrentHashMultiset<E>.EntrySet entrySet;

  private static final long serialVersionUID;

  public static <E> com.google.common.collect.ConcurrentHashMultiset<E> create();
    Code:
       0: new           #3                  // class com/google/common/collect/ConcurrentHashMultiset
       3: dup
       4: new           #4                  // class java/util/concurrent/ConcurrentHashMap
       7: dup
       8: invokespecial #5                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      11: invokespecial #6                  // Method "<init>":(Ljava/util/concurrent/ConcurrentMap;)V
      14: areturn

  public static <E> com.google.common.collect.ConcurrentHashMultiset<E> create(java.lang.Iterable<? extends E>);
    Code:
       0: invokestatic  #7                  // Method create:()Lcom/google/common/collect/ConcurrentHashMultiset;
       3: astore_1
       4: aload_1
       5: aload_0
       6: invokestatic  #8                  // Method com/google/common/collect/Iterables.addAll:(Ljava/util/Collection;Ljava/lang/Iterable;)Z
       9: pop
      10: aload_1
      11: areturn

  public static <E> com.google.common.collect.ConcurrentHashMultiset<E> create(com.google.common.collect.GenericMapMaker<? super E, ? super java.lang.Number>);
    Code:
       0: new           #3                  // class com/google/common/collect/ConcurrentHashMultiset
       3: dup
       4: aload_0
       5: invokevirtual #9                  // Method com/google/common/collect/GenericMapMaker.makeMap:()Ljava/util/concurrent/ConcurrentMap;
       8: invokespecial #6                  // Method "<init>":(Ljava/util/concurrent/ConcurrentMap;)V
      11: areturn

  com.google.common.collect.ConcurrentHashMultiset(java.util.concurrent.ConcurrentMap<E, java.util.concurrent.atomic.AtomicInteger>);
    Code:
       0: aload_0
       1: invokespecial #10                 // Method com/google/common/collect/AbstractMultiset."<init>":()V
       4: aload_1
       5: invokeinterface #11,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.isEmpty:()Z
      10: invokestatic  #12                 // Method com/google/common/base/Preconditions.checkArgument:(Z)V
      13: aload_0
      14: aload_1
      15: putfield      #2                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
      18: return

  public int count(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #13                 // Method safeGet:(Ljava/lang/Object;)Ljava/util/concurrent/atomic/AtomicInteger;
       5: astore_2
       6: aload_2
       7: ifnonnull     14
      10: iconst_0
      11: goto          18
      14: aload_2
      15: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      18: ireturn

  private java.util.concurrent.atomic.AtomicInteger safeGet(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #2                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: invokeinterface #15,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #16                 // class java/util/concurrent/atomic/AtomicInteger
      13: areturn
      14: astore_2
      15: aconst_null
      16: areturn
      17: astore_2
      18: aconst_null
      19: areturn
    Exception table:
       from    to  target type
           0    13    14   Class java/lang/NullPointerException
           0    13    17   Class java/lang/ClassCastException

  public int size();
    Code:
       0: lconst_0
       1: lstore_1
       2: aload_0
       3: getfield      #2                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
       6: invokeinterface #19,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.values:()Ljava/util/Collection;
      11: invokeinterface #20,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      16: astore_3
      17: aload_3
      18: invokeinterface #21,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      23: ifeq          49
      26: aload_3
      27: invokeinterface #22,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      32: checkcast     #16                 // class java/util/concurrent/atomic/AtomicInteger
      35: astore        4
      37: lload_1
      38: aload         4
      40: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      43: i2l
      44: ladd
      45: lstore_1
      46: goto          17
      49: lload_1
      50: invokestatic  #23                 // Method com/google/common/primitives/Ints.saturatedCast:(J)I
      53: ireturn

  public java.lang.Object[] toArray();
    Code:
       0: aload_0
       1: invokespecial #24                 // Method snapshot:()Ljava/util/List;
       4: invokeinterface #25,  1           // InterfaceMethod java/util/List.toArray:()[Ljava/lang/Object;
       9: areturn

  public <T> T[] toArray(T[]);
    Code:
       0: aload_0
       1: invokespecial #24                 // Method snapshot:()Ljava/util/List;
       4: aload_1
       5: invokeinterface #26,  2           // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      10: areturn

  private java.util.List<E> snapshot();
    Code:
       0: aload_0
       1: invokevirtual #27                 // Method size:()I
       4: invokestatic  #28                 // Method com/google/common/collect/Lists.newArrayListWithExpectedSize:(I)Ljava/util/ArrayList;
       7: astore_1
       8: aload_0
       9: invokevirtual #29                 // Method entrySet:()Ljava/util/Set;
      12: invokeinterface #30,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      17: astore_2
      18: aload_2
      19: invokeinterface #21,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      24: ifeq          76
      27: aload_2
      28: invokeinterface #22,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      33: checkcast     #31                 // class com/google/common/collect/Multiset$Entry
      36: astore_3
      37: aload_3
      38: invokeinterface #32,  1           // InterfaceMethod com/google/common/collect/Multiset$Entry.getElement:()Ljava/lang/Object;
      43: astore        4
      45: aload_3
      46: invokeinterface #33,  1           // InterfaceMethod com/google/common/collect/Multiset$Entry.getCount:()I
      51: istore        5
      53: iload         5
      55: ifle          73
      58: aload_1
      59: aload         4
      61: invokeinterface #34,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      66: pop
      67: iinc          5, -1
      70: goto          53
      73: goto          18
      76: aload_1
      77: areturn

  public int add(E, int);
    Code:
       0: iload_2
       1: ifne          10
       4: aload_0
       5: aload_1
       6: invokevirtual #35                 // Method count:(Ljava/lang/Object;)I
       9: ireturn
      10: iload_2
      11: ifle          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ldc           #36                 // String Invalid occurrences: %s
      21: iconst_1
      22: anewarray     #37                 // class java/lang/Object
      25: dup
      26: iconst_0
      27: iload_2
      28: invokestatic  #38                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      31: aastore
      32: invokestatic  #39                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/String;[Ljava/lang/Object;)V
      35: aload_0
      36: aload_1
      37: invokespecial #13                 // Method safeGet:(Ljava/lang/Object;)Ljava/util/concurrent/atomic/AtomicInteger;
      40: astore_3
      41: aload_3
      42: ifnonnull     73
      45: aload_0
      46: getfield      #2                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
      49: aload_1
      50: new           #16                 // class java/util/concurrent/atomic/AtomicInteger
      53: dup
      54: iload_2
      55: invokespecial #40                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      58: invokeinterface #41,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      63: checkcast     #16                 // class java/util/concurrent/atomic/AtomicInteger
      66: astore_3
      67: aload_3
      68: ifnonnull     73
      71: iconst_0
      72: ireturn
      73: aload_3
      74: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      77: istore        4
      79: iload         4
      81: ifeq          145
      84: iload_2
      85: ldc           #42                 // int 2147483647
      87: iload         4
      89: isub
      90: if_icmpgt     97
      93: iconst_1
      94: goto          98
      97: iconst_0
      98: ldc           #43                 // String Overflow adding %s occurrences to a count of %s
     100: iconst_2
     101: anewarray     #37                 // class java/lang/Object
     104: dup
     105: iconst_0
     106: iload_2
     107: invokestatic  #38                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     110: aastore
     111: dup
     112: iconst_1
     113: iload         4
     115: invokestatic  #38                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     118: aastore
     119: invokestatic  #39                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/String;[Ljava/lang/Object;)V
     122: iload         4
     124: iload_2
     125: iadd
     126: istore        5
     128: aload_3
     129: iload         4
     131: iload         5
     133: invokevirtual #44                 // Method java/util/concurrent/atomic/AtomicInteger.compareAndSet:(II)Z
     136: ifeq          142
     139: iload         4
     141: ireturn
     142: goto          188
     145: new           #16                 // class java/util/concurrent/atomic/AtomicInteger
     148: dup
     149: iload_2
     150: invokespecial #40                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
     153: astore        5
     155: aload_0
     156: getfield      #2                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
     159: aload_1
     160: aload         5
     162: invokeinterface #41,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     167: ifnull        186
     170: aload_0
     171: getfield      #2                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
     174: aload_1
     175: aload_3
     176: aload         5
     178: invokeinterface #45,  4           // InterfaceMethod java/util/concurrent/ConcurrentMap.replace:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
     183: ifeq          191
     186: iconst_0
     187: ireturn
     188: goto          73
     191: goto          35

  public int remove(java.lang.Object, int);
    Code:
       0: iload_2
       1: ifne          10
       4: aload_0
       5: aload_1
       6: invokevirtual #35                 // Method count:(Ljava/lang/Object;)I
       9: ireturn
      10: iload_2
      11: ifle          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ldc           #36                 // String Invalid occurrences: %s
      21: iconst_1
      22: anewarray     #37                 // class java/lang/Object
      25: dup
      26: iconst_0
      27: iload_2
      28: invokestatic  #38                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      31: aastore
      32: invokestatic  #39                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/String;[Ljava/lang/Object;)V
      35: aload_0
      36: aload_1
      37: invokespecial #13                 // Method safeGet:(Ljava/lang/Object;)Ljava/util/concurrent/atomic/AtomicInteger;
      40: astore_3
      41: aload_3
      42: ifnonnull     47
      45: iconst_0
      46: ireturn
      47: aload_3
      48: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      51: istore        4
      53: iload         4
      55: ifeq          102
      58: iconst_0
      59: iload         4
      61: iload_2
      62: isub
      63: invokestatic  #46                 // Method java/lang/Math.max:(II)I
      66: istore        5
      68: aload_3
      69: iload         4
      71: iload         5
      73: invokevirtual #44                 // Method java/util/concurrent/atomic/AtomicInteger.compareAndSet:(II)Z
      76: ifeq          99
      79: iload         5
      81: ifne          96
      84: aload_0
      85: getfield      #2                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
      88: aload_1
      89: aload_3
      90: invokeinterface #47,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;Ljava/lang/Object;)Z
      95: pop
      96: iload         4
      98: ireturn
      99: goto          104
     102: iconst_0
     103: ireturn
     104: goto          47

  public boolean removeExactly(java.lang.Object, int);
    Code:
       0: iload_2
       1: ifne          6
       4: iconst_1
       5: ireturn
       6: iload_2
       7: ifle          14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ldc           #36                 // String Invalid occurrences: %s
      17: iconst_1
      18: anewarray     #37                 // class java/lang/Object
      21: dup
      22: iconst_0
      23: iload_2
      24: invokestatic  #38                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      27: aastore
      28: invokestatic  #39                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/String;[Ljava/lang/Object;)V
      31: aload_0
      32: aload_1
      33: invokespecial #13                 // Method safeGet:(Ljava/lang/Object;)Ljava/util/concurrent/atomic/AtomicInteger;
      36: astore_3
      37: aload_3
      38: ifnonnull     43
      41: iconst_0
      42: ireturn
      43: aload_3
      44: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      47: istore        4
      49: iload         4
      51: iload_2
      52: if_icmpge     57
      55: iconst_0
      56: ireturn
      57: iload         4
      59: iload_2
      60: isub
      61: istore        5
      63: aload_3
      64: iload         4
      66: iload         5
      68: invokevirtual #44                 // Method java/util/concurrent/atomic/AtomicInteger.compareAndSet:(II)Z
      71: ifeq          93
      74: iload         5
      76: ifne          91
      79: aload_0
      80: getfield      #2                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
      83: aload_1
      84: aload_3
      85: invokeinterface #47,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;Ljava/lang/Object;)Z
      90: pop
      91: iconst_1
      92: ireturn
      93: goto          43

  public int setCount(E, int);
    Code:
       0: iload_2
       1: ldc           #48                 // String count
       3: invokestatic  #49                 // Method com/google/common/collect/Multisets.checkNonnegative:(ILjava/lang/String;)V
       6: aload_0
       7: aload_1
       8: invokespecial #13                 // Method safeGet:(Ljava/lang/Object;)Ljava/util/concurrent/atomic/AtomicInteger;
      11: astore_3
      12: aload_3
      13: ifnonnull     50
      16: iload_2
      17: ifne          22
      20: iconst_0
      21: ireturn
      22: aload_0
      23: getfield      #2                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
      26: aload_1
      27: new           #16                 // class java/util/concurrent/atomic/AtomicInteger
      30: dup
      31: iload_2
      32: invokespecial #40                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      35: invokeinterface #41,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      40: checkcast     #16                 // class java/util/concurrent/atomic/AtomicInteger
      43: astore_3
      44: aload_3
      45: ifnonnull     50
      48: iconst_0
      49: ireturn
      50: aload_3
      51: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      54: istore        4
      56: iload         4
      58: ifne          113
      61: iload_2
      62: ifne          67
      65: iconst_0
      66: ireturn
      67: new           #16                 // class java/util/concurrent/atomic/AtomicInteger
      70: dup
      71: iload_2
      72: invokespecial #40                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      75: astore        5
      77: aload_0
      78: getfield      #2                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
      81: aload_1
      82: aload         5
      84: invokeinterface #41,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      89: ifnull        108
      92: aload_0
      93: getfield      #2                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
      96: aload_1
      97: aload_3
      98: aload         5
     100: invokeinterface #45,  4           // InterfaceMethod java/util/concurrent/ConcurrentMap.replace:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
     105: ifeq          110
     108: iconst_0
     109: ireturn
     110: goto          145
     113: aload_3
     114: iload         4
     116: iload_2
     117: invokevirtual #44                 // Method java/util/concurrent/atomic/AtomicInteger.compareAndSet:(II)Z
     120: ifeq          142
     123: iload_2
     124: ifne          139
     127: aload_0
     128: getfield      #2                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
     131: aload_1
     132: aload_3
     133: invokeinterface #47,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;Ljava/lang/Object;)Z
     138: pop
     139: iload         4
     141: ireturn
     142: goto          50
     145: goto          6

  public boolean setCount(E, int, int);
    Code:
       0: iload_2
       1: ldc           #50                 // String oldCount
       3: invokestatic  #49                 // Method com/google/common/collect/Multisets.checkNonnegative:(ILjava/lang/String;)V
       6: iload_3
       7: ldc           #51                 // String newCount
       9: invokestatic  #49                 // Method com/google/common/collect/Multisets.checkNonnegative:(ILjava/lang/String;)V
      12: aload_0
      13: aload_1
      14: invokespecial #13                 // Method safeGet:(Ljava/lang/Object;)Ljava/util/concurrent/atomic/AtomicInteger;
      17: astore        4
      19: aload         4
      21: ifnonnull     63
      24: iload_2
      25: ifeq          30
      28: iconst_0
      29: ireturn
      30: iload_3
      31: ifne          36
      34: iconst_1
      35: ireturn
      36: aload_0
      37: getfield      #2                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
      40: aload_1
      41: new           #16                 // class java/util/concurrent/atomic/AtomicInteger
      44: dup
      45: iload_3
      46: invokespecial #40                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      49: invokeinterface #41,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      54: ifnonnull     61
      57: iconst_1
      58: goto          62
      61: iconst_0
      62: ireturn
      63: aload         4
      65: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      68: istore        5
      70: iload         5
      72: iload_2
      73: if_icmpne     178
      76: iload         5
      78: ifne          148
      81: iload_3
      82: ifne          100
      85: aload_0
      86: getfield      #2                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
      89: aload_1
      90: aload         4
      92: invokeinterface #47,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;Ljava/lang/Object;)Z
      97: pop
      98: iconst_1
      99: ireturn
     100: new           #16                 // class java/util/concurrent/atomic/AtomicInteger
     103: dup
     104: iload_3
     105: invokespecial #40                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
     108: astore        6
     110: aload_0
     111: getfield      #2                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
     114: aload_1
     115: aload         6
     117: invokeinterface #41,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     122: ifnull        142
     125: aload_0
     126: getfield      #2                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
     129: aload_1
     130: aload         4
     132: aload         6
     134: invokeinterface #45,  4           // InterfaceMethod java/util/concurrent/ConcurrentMap.replace:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
     139: ifeq          146
     142: iconst_1
     143: goto          147
     146: iconst_0
     147: ireturn
     148: aload         4
     150: iload         5
     152: iload_3
     153: invokevirtual #44                 // Method java/util/concurrent/atomic/AtomicInteger.compareAndSet:(II)Z
     156: ifeq          178
     159: iload_3
     160: ifne          176
     163: aload_0
     164: getfield      #2                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
     167: aload_1
     168: aload         4
     170: invokeinterface #47,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;Ljava/lang/Object;)Z
     175: pop
     176: iconst_1
     177: ireturn
     178: iconst_0
     179: ireturn

  java.util.Set<E> createElementSet();
    Code:
       0: aload_0
       1: getfield      #2                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
       4: invokeinterface #52,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.keySet:()Ljava/util/Set;
       9: astore_1
      10: new           #53                 // class com/google/common/collect/ConcurrentHashMultiset$1
      13: dup
      14: aload_0
      15: aload_1
      16: invokespecial #54                 // Method com/google/common/collect/ConcurrentHashMultiset$1."<init>":(Lcom/google/common/collect/ConcurrentHashMultiset;Ljava/util/Set;)V
      19: areturn

  public java.util.Set<com.google.common.collect.Multiset$Entry<E>> entrySet();
    Code:
       0: aload_0
       1: getfield      #55                 // Field entrySet:Lcom/google/common/collect/ConcurrentHashMultiset$EntrySet;
       4: astore_1
       5: aload_1
       6: ifnonnull     24
       9: aload_0
      10: new           #56                 // class com/google/common/collect/ConcurrentHashMultiset$EntrySet
      13: dup
      14: aload_0
      15: aconst_null
      16: invokespecial #57                 // Method com/google/common/collect/ConcurrentHashMultiset$EntrySet."<init>":(Lcom/google/common/collect/ConcurrentHashMultiset;Lcom/google/common/collect/ConcurrentHashMultiset$1;)V
      19: dup
      20: astore_1
      21: putfield      #55                 // Field entrySet:Lcom/google/common/collect/ConcurrentHashMultiset$EntrySet;
      24: aload_1
      25: areturn

  int distinctElements();
    Code:
       0: aload_0
       1: getfield      #2                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
       4: invokeinterface #58,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.size:()I
       9: ireturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #2                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
       4: invokeinterface #11,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.isEmpty:()Z
       9: ireturn

  java.util.Iterator<com.google.common.collect.Multiset$Entry<E>> entryIterator();
    Code:
       0: new           #59                 // class com/google/common/collect/ConcurrentHashMultiset$2
       3: dup
       4: aload_0
       5: invokespecial #60                 // Method com/google/common/collect/ConcurrentHashMultiset$2."<init>":(Lcom/google/common/collect/ConcurrentHashMultiset;)V
       8: astore_1
       9: new           #61                 // class com/google/common/collect/ConcurrentHashMultiset$3
      12: dup
      13: aload_0
      14: aload_1
      15: invokespecial #62                 // Method com/google/common/collect/ConcurrentHashMultiset$3."<init>":(Lcom/google/common/collect/ConcurrentHashMultiset;Ljava/util/Iterator;)V
      18: areturn

  public void clear();
    Code:
       0: aload_0
       1: getfield      #2                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
       4: invokeinterface #63,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.clear:()V
       9: return

  private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokevirtual #64                 // Method java/io/ObjectOutputStream.defaultWriteObject:()V
       4: aload_1
       5: aload_0
       6: getfield      #2                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
       9: invokevirtual #65                 // Method java/io/ObjectOutputStream.writeObject:(Ljava/lang/Object;)V
      12: return

  private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException;
    Code:
       0: aload_1
       1: invokevirtual #66                 // Method java/io/ObjectInputStream.defaultReadObject:()V
       4: aload_1
       5: invokevirtual #67                 // Method java/io/ObjectInputStream.readObject:()Ljava/lang/Object;
       8: checkcast     #68                 // class java/util/concurrent/ConcurrentMap
      11: astore_2
      12: getstatic     #69                 // Field com/google/common/collect/ConcurrentHashMultiset$FieldSettersHolder.COUNT_MAP_FIELD_SETTER:Lcom/google/common/collect/Serialization$FieldSetter;
      15: aload_0
      16: aload_2
      17: invokevirtual #70                 // Method com/google/common/collect/Serialization$FieldSetter.set:(Ljava/lang/Object;Ljava/lang/Object;)V
      20: return

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokespecial #71                 // Method com/google/common/collect/AbstractMultiset.toString:()Ljava/lang/String;
       4: areturn

  public int hashCode();
    Code:
       0: aload_0
       1: invokespecial #72                 // Method com/google/common/collect/AbstractMultiset.hashCode:()I
       4: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #73                 // Method com/google/common/collect/AbstractMultiset.equals:(Ljava/lang/Object;)Z
       5: ireturn

  public java.util.Set elementSet();
    Code:
       0: aload_0
       1: invokespecial #74                 // Method com/google/common/collect/AbstractMultiset.elementSet:()Ljava/util/Set;
       4: areturn

  public boolean retainAll(java.util.Collection);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #75                 // Method com/google/common/collect/AbstractMultiset.retainAll:(Ljava/util/Collection;)Z
       5: ireturn

  public boolean removeAll(java.util.Collection);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #76                 // Method com/google/common/collect/AbstractMultiset.removeAll:(Ljava/util/Collection;)Z
       5: ireturn

  public boolean addAll(java.util.Collection);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #77                 // Method com/google/common/collect/AbstractMultiset.addAll:(Ljava/util/Collection;)Z
       5: ireturn

  public boolean remove(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #78                 // Method com/google/common/collect/AbstractMultiset.remove:(Ljava/lang/Object;)Z
       5: ireturn

  public boolean add(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #79                 // Method com/google/common/collect/AbstractMultiset.add:(Ljava/lang/Object;)Z
       5: ireturn

  public java.util.Iterator iterator();
    Code:
       0: aload_0
       1: invokespecial #80                 // Method com/google/common/collect/AbstractMultiset.iterator:()Ljava/util/Iterator;
       4: areturn

  public boolean contains(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #81                 // Method com/google/common/collect/AbstractMultiset.contains:(Ljava/lang/Object;)Z
       5: ireturn

  static java.util.concurrent.ConcurrentMap access$100(com.google.common.collect.ConcurrentHashMultiset);
    Code:
       0: aload_0
       1: getfield      #2                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
       4: areturn
}
