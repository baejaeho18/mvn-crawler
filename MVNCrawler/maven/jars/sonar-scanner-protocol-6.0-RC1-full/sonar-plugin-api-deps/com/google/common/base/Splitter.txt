Compiled from "Splitter.java"
public final class com.google.common.base.Splitter {
  private final com.google.common.base.CharMatcher trimmer;

  private final boolean omitEmptyStrings;

  private final com.google.common.base.Splitter$Strategy strategy;

  private final int limit;

  private com.google.common.base.Splitter(com.google.common.base.Splitter$Strategy);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: getstatic     #6                  // Field com/google/common/base/CharMatcher.NONE:Lcom/google/common/base/CharMatcher;
       6: ldc           #7                  // int 2147483647
       8: invokespecial #8                  // Method "<init>":(Lcom/google/common/base/Splitter$Strategy;ZLcom/google/common/base/CharMatcher;I)V
      11: return

  private com.google.common.base.Splitter(com.google.common.base.Splitter$Strategy, boolean, com.google.common.base.CharMatcher, int);
    Code:
       0: aload_0
       1: invokespecial #9                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #10                 // Field strategy:Lcom/google/common/base/Splitter$Strategy;
       9: aload_0
      10: iload_2
      11: putfield      #3                  // Field omitEmptyStrings:Z
      14: aload_0
      15: aload_3
      16: putfield      #4                  // Field trimmer:Lcom/google/common/base/CharMatcher;
      19: aload_0
      20: iload         4
      22: putfield      #2                  // Field limit:I
      25: return

  public static com.google.common.base.Splitter on(char);
    Code:
       0: iload_0
       1: invokestatic  #11                 // Method com/google/common/base/CharMatcher.is:(C)Lcom/google/common/base/CharMatcher;
       4: invokestatic  #12                 // Method on:(Lcom/google/common/base/CharMatcher;)Lcom/google/common/base/Splitter;
       7: areturn

  public static com.google.common.base.Splitter on(com.google.common.base.CharMatcher);
    Code:
       0: aload_0
       1: invokestatic  #13                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: new           #14                 // class com/google/common/base/Splitter
       8: dup
       9: new           #15                 // class com/google/common/base/Splitter$1
      12: dup
      13: aload_0
      14: invokespecial #16                 // Method com/google/common/base/Splitter$1."<init>":(Lcom/google/common/base/CharMatcher;)V
      17: invokespecial #17                 // Method "<init>":(Lcom/google/common/base/Splitter$Strategy;)V
      20: areturn

  public static com.google.common.base.Splitter on(java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #18                 // Method java/lang/String.length:()I
       4: ifeq          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ldc           #19                 // String The separator may not be the empty string.
      14: invokestatic  #20                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/Object;)V
      17: new           #14                 // class com/google/common/base/Splitter
      20: dup
      21: new           #21                 // class com/google/common/base/Splitter$2
      24: dup
      25: aload_0
      26: invokespecial #22                 // Method com/google/common/base/Splitter$2."<init>":(Ljava/lang/String;)V
      29: invokespecial #17                 // Method "<init>":(Lcom/google/common/base/Splitter$Strategy;)V
      32: areturn

  public static com.google.common.base.Splitter on(java.util.regex.Pattern);
    Code:
       0: aload_0
       1: invokestatic  #13                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_0
       6: ldc           #23                 // String
       8: invokevirtual #24                 // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
      11: invokevirtual #25                 // Method java/util/regex/Matcher.matches:()Z
      14: ifne          21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: ldc           #26                 // String The pattern may not match the empty string: %s
      24: iconst_1
      25: anewarray     #27                 // class java/lang/Object
      28: dup
      29: iconst_0
      30: aload_0
      31: aastore
      32: invokestatic  #28                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/String;[Ljava/lang/Object;)V
      35: new           #14                 // class com/google/common/base/Splitter
      38: dup
      39: new           #29                 // class com/google/common/base/Splitter$3
      42: dup
      43: aload_0
      44: invokespecial #30                 // Method com/google/common/base/Splitter$3."<init>":(Ljava/util/regex/Pattern;)V
      47: invokespecial #17                 // Method "<init>":(Lcom/google/common/base/Splitter$Strategy;)V
      50: areturn

  public static com.google.common.base.Splitter onPattern(java.lang.String);
    Code:
       0: aload_0
       1: invokestatic  #31                 // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
       4: invokestatic  #32                 // Method on:(Ljava/util/regex/Pattern;)Lcom/google/common/base/Splitter;
       7: areturn

  public static com.google.common.base.Splitter fixedLength(int);
    Code:
       0: iload_0
       1: ifle          8
       4: iconst_1
       5: goto          9
       8: iconst_0
       9: ldc           #33                 // String The length may not be less than 1
      11: invokestatic  #20                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/Object;)V
      14: new           #14                 // class com/google/common/base/Splitter
      17: dup
      18: new           #34                 // class com/google/common/base/Splitter$4
      21: dup
      22: iload_0
      23: invokespecial #35                 // Method com/google/common/base/Splitter$4."<init>":(I)V
      26: invokespecial #17                 // Method "<init>":(Lcom/google/common/base/Splitter$Strategy;)V
      29: areturn

  public com.google.common.base.Splitter omitEmptyStrings();
    Code:
       0: new           #14                 // class com/google/common/base/Splitter
       3: dup
       4: aload_0
       5: getfield      #10                 // Field strategy:Lcom/google/common/base/Splitter$Strategy;
       8: iconst_1
       9: aload_0
      10: getfield      #4                  // Field trimmer:Lcom/google/common/base/CharMatcher;
      13: aload_0
      14: getfield      #2                  // Field limit:I
      17: invokespecial #8                  // Method "<init>":(Lcom/google/common/base/Splitter$Strategy;ZLcom/google/common/base/CharMatcher;I)V
      20: areturn

  public com.google.common.base.Splitter limit(int);
    Code:
       0: iload_1
       1: ifle          8
       4: iconst_1
       5: goto          9
       8: iconst_0
       9: ldc           #36                 // String must be greater then zero: %s
      11: iconst_1
      12: anewarray     #27                 // class java/lang/Object
      15: dup
      16: iconst_0
      17: iload_1
      18: invokestatic  #37                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      21: aastore
      22: invokestatic  #28                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/String;[Ljava/lang/Object;)V
      25: new           #14                 // class com/google/common/base/Splitter
      28: dup
      29: aload_0
      30: getfield      #10                 // Field strategy:Lcom/google/common/base/Splitter$Strategy;
      33: aload_0
      34: getfield      #3                  // Field omitEmptyStrings:Z
      37: aload_0
      38: getfield      #4                  // Field trimmer:Lcom/google/common/base/CharMatcher;
      41: iload_1
      42: invokespecial #8                  // Method "<init>":(Lcom/google/common/base/Splitter$Strategy;ZLcom/google/common/base/CharMatcher;I)V
      45: areturn

  public com.google.common.base.Splitter trimResults();
    Code:
       0: aload_0
       1: getstatic     #38                 // Field com/google/common/base/CharMatcher.WHITESPACE:Lcom/google/common/base/CharMatcher;
       4: invokevirtual #39                 // Method trimResults:(Lcom/google/common/base/CharMatcher;)Lcom/google/common/base/Splitter;
       7: areturn

  public com.google.common.base.Splitter trimResults(com.google.common.base.CharMatcher);
    Code:
       0: aload_1
       1: invokestatic  #13                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: new           #14                 // class com/google/common/base/Splitter
       8: dup
       9: aload_0
      10: getfield      #10                 // Field strategy:Lcom/google/common/base/Splitter$Strategy;
      13: aload_0
      14: getfield      #3                  // Field omitEmptyStrings:Z
      17: aload_1
      18: aload_0
      19: getfield      #2                  // Field limit:I
      22: invokespecial #8                  // Method "<init>":(Lcom/google/common/base/Splitter$Strategy;ZLcom/google/common/base/CharMatcher;I)V
      25: areturn

  public java.lang.Iterable<java.lang.String> split(java.lang.CharSequence);
    Code:
       0: aload_1
       1: invokestatic  #13                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: new           #40                 // class com/google/common/base/Splitter$5
       8: dup
       9: aload_0
      10: aload_1
      11: invokespecial #41                 // Method com/google/common/base/Splitter$5."<init>":(Lcom/google/common/base/Splitter;Ljava/lang/CharSequence;)V
      14: areturn

  private java.util.Iterator<java.lang.String> spliterator(java.lang.CharSequence);
    Code:
       0: aload_0
       1: getfield      #10                 // Field strategy:Lcom/google/common/base/Splitter$Strategy;
       4: aload_0
       5: aload_1
       6: invokeinterface #42,  3           // InterfaceMethod com/google/common/base/Splitter$Strategy.iterator:(Lcom/google/common/base/Splitter;Ljava/lang/CharSequence;)Ljava/util/Iterator;
      11: areturn

  public com.google.common.base.Splitter$MapSplitter withKeyValueSeparator(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #43                 // Method on:(Ljava/lang/String;)Lcom/google/common/base/Splitter;
       5: invokevirtual #44                 // Method withKeyValueSeparator:(Lcom/google/common/base/Splitter;)Lcom/google/common/base/Splitter$MapSplitter;
       8: areturn

  public com.google.common.base.Splitter$MapSplitter withKeyValueSeparator(com.google.common.base.Splitter);
    Code:
       0: new           #45                 // class com/google/common/base/Splitter$MapSplitter
       3: dup
       4: aload_0
       5: aload_1
       6: aconst_null
       7: invokespecial #46                 // Method com/google/common/base/Splitter$MapSplitter."<init>":(Lcom/google/common/base/Splitter;Lcom/google/common/base/Splitter;Lcom/google/common/base/Splitter$1;)V
      10: areturn

  static java.util.Iterator access$000(com.google.common.base.Splitter, java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #5                  // Method spliterator:(Ljava/lang/CharSequence;)Ljava/util/Iterator;
       5: areturn

  static com.google.common.base.CharMatcher access$300(com.google.common.base.Splitter);
    Code:
       0: aload_0
       1: getfield      #4                  // Field trimmer:Lcom/google/common/base/CharMatcher;
       4: areturn

  static boolean access$400(com.google.common.base.Splitter);
    Code:
       0: aload_0
       1: getfield      #3                  // Field omitEmptyStrings:Z
       4: ireturn

  static int access$500(com.google.common.base.Splitter);
    Code:
       0: aload_0
       1: getfield      #2                  // Field limit:I
       4: ireturn
}
