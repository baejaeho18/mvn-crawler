Compiled from "GridFSDBFile.java"
public class com.mongodb.gridfs.GridFSDBFile extends com.mongodb.gridfs.GridFSFile {
  public com.mongodb.gridfs.GridFSDBFile();
    Code:
       0: aload_0
       1: invokespecial #2                  // Method com/mongodb/gridfs/GridFSFile."<init>":()V
       4: return

  public java.io.InputStream getInputStream();
    Code:
       0: new           #3                  // class com/mongodb/gridfs/GridFSDBFile$GridFSInputStream
       3: dup
       4: aload_0
       5: invokespecial #4                  // Method com/mongodb/gridfs/GridFSDBFile$GridFSInputStream."<init>":(Lcom/mongodb/gridfs/GridFSDBFile;)V
       8: areturn

  public long writeTo(java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: new           #5                  // class java/io/File
       4: dup
       5: aload_1
       6: invokespecial #6                  // Method java/io/File."<init>":(Ljava/lang/String;)V
       9: invokevirtual #7                  // Method writeTo:(Ljava/io/File;)J
      12: lreturn

  public long writeTo(java.io.File) throws java.io.IOException;
    Code:
       0: aconst_null
       1: astore_2
       2: new           #8                  // class java/io/FileOutputStream
       5: dup
       6: aload_1
       7: invokespecial #9                  // Method java/io/FileOutputStream."<init>":(Ljava/io/File;)V
      10: astore_2
      11: aload_0
      12: aload_2
      13: invokevirtual #10                 // Method writeTo:(Ljava/io/OutputStream;)J
      16: lstore_3
      17: aload_2
      18: ifnull        25
      21: aload_2
      22: invokevirtual #11                 // Method java/io/FileOutputStream.close:()V
      25: lload_3
      26: lreturn
      27: astore        5
      29: aload_2
      30: ifnull        37
      33: aload_2
      34: invokevirtual #11                 // Method java/io/FileOutputStream.close:()V
      37: aload         5
      39: athrow
    Exception table:
       from    to  target type
           2    17    27   any
          27    29    27   any

  public long writeTo(java.io.OutputStream) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #12                 // Method numChunks:()I
       4: istore_2
       5: iconst_0
       6: istore_3
       7: iload_3
       8: iload_2
       9: if_icmpge     27
      12: aload_1
      13: aload_0
      14: iload_3
      15: invokespecial #1                  // Method getChunk:(I)[B
      18: invokevirtual #13                 // Method java/io/OutputStream.write:([B)V
      21: iinc          3, 1
      24: goto          7
      27: aload_0
      28: getfield      #14                 // Field length:J
      31: lreturn

  private byte[] getChunk(int);
    Code:
       0: aload_0
       1: getfield      #15                 // Field fs:Lcom/mongodb/gridfs/GridFS;
       4: ifnonnull     17
       7: new           #16                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #17                 // String No GridFS instance defined!
      13: invokespecial #18                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #15                 // Field fs:Lcom/mongodb/gridfs/GridFS;
      21: invokevirtual #19                 // Method com/mongodb/gridfs/GridFS.getChunksCollection:()Lcom/mongodb/DBCollection;
      24: new           #20                 // class com/mongodb/BasicDBObject
      27: dup
      28: ldc           #21                 // String files_id
      30: aload_0
      31: getfield      #22                 // Field id:Ljava/lang/Object;
      34: invokespecial #23                 // Method com/mongodb/BasicDBObject."<init>":(Ljava/lang/String;Ljava/lang/Object;)V
      37: ldc           #24                 // String n
      39: iload_1
      40: invokestatic  #25                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      43: invokevirtual #26                 // Method com/mongodb/BasicDBObject.append:(Ljava/lang/String;Ljava/lang/Object;)Lcom/mongodb/BasicDBObject;
      46: invokevirtual #27                 // Method com/mongodb/DBCollection.findOne:(Lcom/mongodb/DBObject;)Lcom/mongodb/DBObject;
      49: astore_2
      50: aload_2
      51: ifnonnull     93
      54: new           #28                 // class com/mongodb/MongoException
      57: dup
      58: new           #29                 // class java/lang/StringBuilder
      61: dup
      62: invokespecial #30                 // Method java/lang/StringBuilder."<init>":()V
      65: ldc           #31                 // String Can\'t find a chunk!  file id:
      67: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      70: aload_0
      71: getfield      #22                 // Field id:Ljava/lang/Object;
      74: invokevirtual #33                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      77: ldc           #34                 // String  chunk:
      79: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      82: iload_1
      83: invokevirtual #35                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      86: invokevirtual #36                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      89: invokespecial #37                 // Method com/mongodb/MongoException."<init>":(Ljava/lang/String;)V
      92: athrow
      93: aload_2
      94: ldc           #38                 // String data
      96: invokeinterface #39,  2           // InterfaceMethod com/mongodb/DBObject.get:(Ljava/lang/String;)Ljava/lang/Object;
     101: checkcast     #40                 // class "[B"
     104: areturn

  void remove();
    Code:
       0: aload_0
       1: getfield      #15                 // Field fs:Lcom/mongodb/gridfs/GridFS;
       4: invokevirtual #41                 // Method com/mongodb/gridfs/GridFS.getFilesCollection:()Lcom/mongodb/DBCollection;
       7: new           #20                 // class com/mongodb/BasicDBObject
      10: dup
      11: ldc           #42                 // String _id
      13: aload_0
      14: getfield      #22                 // Field id:Ljava/lang/Object;
      17: invokespecial #23                 // Method com/mongodb/BasicDBObject."<init>":(Ljava/lang/String;Ljava/lang/Object;)V
      20: invokevirtual #43                 // Method com/mongodb/DBCollection.remove:(Lcom/mongodb/DBObject;)Lcom/mongodb/WriteResult;
      23: pop
      24: aload_0
      25: getfield      #15                 // Field fs:Lcom/mongodb/gridfs/GridFS;
      28: invokevirtual #19                 // Method com/mongodb/gridfs/GridFS.getChunksCollection:()Lcom/mongodb/DBCollection;
      31: new           #20                 // class com/mongodb/BasicDBObject
      34: dup
      35: ldc           #21                 // String files_id
      37: aload_0
      38: getfield      #22                 // Field id:Ljava/lang/Object;
      41: invokespecial #23                 // Method com/mongodb/BasicDBObject."<init>":(Ljava/lang/String;Ljava/lang/Object;)V
      44: invokevirtual #43                 // Method com/mongodb/DBCollection.remove:(Lcom/mongodb/DBObject;)Lcom/mongodb/WriteResult;
      47: pop
      48: return

  static byte[] access$000(com.mongodb.gridfs.GridFSDBFile, int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #1                  // Method getChunk:(I)[B
       5: areturn
}
