Compiled from "BackendProviderSet.java"
class io.tracee.BackendProviderSet extends java.util.AbstractSet<io.tracee.spi.TraceeBackendProvider> {
  private java.util.Set<java.lang.ref.SoftReference<io.tracee.spi.TraceeBackendProvider>> values;

  private boolean valid;

  io.tracee.BackendProviderSet(java.util.Set<io.tracee.spi.TraceeBackendProvider>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/util/AbstractSet."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #2                  // Field valid:Z
       9: aload_0
      10: new           #3                  // class java/util/HashSet
      13: dup
      14: invokespecial #4                  // Method java/util/HashSet."<init>":()V
      17: putfield      #5                  // Field values:Ljava/util/Set;
      20: aload_0
      21: aload_1
      22: invokespecial #6                  // Method addAllInternal:(Ljava/util/Collection;)V
      25: return

  private void addAllInternal(java.util.Collection<io.tracee.spi.TraceeBackendProvider>);
    Code:
       0: aload_1
       1: invokeinterface #7,  1            // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
       6: astore_2
       7: aload_2
       8: invokeinterface #8,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      13: ifeq          47
      16: aload_2
      17: invokeinterface #9,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      22: checkcast     #10                 // class io/tracee/spi/TraceeBackendProvider
      25: astore_3
      26: aload_0
      27: getfield      #5                  // Field values:Ljava/util/Set;
      30: new           #11                 // class java/lang/ref/SoftReference
      33: dup
      34: aload_3
      35: invokespecial #12                 // Method java/lang/ref/SoftReference."<init>":(Ljava/lang/Object;)V
      38: invokeinterface #13,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      43: pop
      44: goto          7
      47: return

  public java.util.Iterator<io.tracee.spi.TraceeBackendProvider> iterator();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #5                  // Field values:Ljava/util/Set;
       5: invokespecial #14                 // Method createStrongView:(Ljava/util/Collection;)Ljava/util/Collection;
       8: astore_1
       9: aload_0
      10: aload_1
      11: invokespecial #15                 // Method determineValidity:(Ljava/util/Collection;)V
      14: aload_0
      15: getfield      #2                  // Field valid:Z
      18: ifeq          28
      21: aload_1
      22: invokeinterface #16,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      27: areturn
      28: invokestatic  #17                 // Method java/util/Collections.emptyList:()Ljava/util/List;
      31: invokeinterface #18,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      36: areturn

  public int size();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #5                  // Field values:Ljava/util/Set;
       5: invokespecial #14                 // Method createStrongView:(Ljava/util/Collection;)Ljava/util/Collection;
       8: astore_1
       9: aload_0
      10: aload_1
      11: invokespecial #15                 // Method determineValidity:(Ljava/util/Collection;)V
      14: aload_0
      15: getfield      #2                  // Field valid:Z
      18: ifeq          28
      21: aload_1
      22: invokeinterface #19,  1           // InterfaceMethod java/util/Collection.size:()I
      27: ireturn
      28: iconst_0
      29: ireturn

  private void determineValidity(java.util.Collection<io.tracee.spi.TraceeBackendProvider>);
    Code:
       0: aload_0
       1: getfield      #2                  // Field valid:Z
       4: ifne          8
       7: return
       8: aload_1
       9: invokeinterface #7,  1            // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      14: astore_2
      15: aload_2
      16: invokeinterface #8,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          46
      24: aload_2
      25: invokeinterface #9,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #10                 // class io/tracee/spi/TraceeBackendProvider
      33: astore_3
      34: aload_3
      35: ifnonnull     43
      38: aload_0
      39: iconst_0
      40: putfield      #2                  // Field valid:Z
      43: goto          15
      46: return

  private java.util.Collection<io.tracee.spi.TraceeBackendProvider> createStrongView(java.util.Collection<java.lang.ref.SoftReference<io.tracee.spi.TraceeBackendProvider>>);
    Code:
       0: new           #20                 // class java/util/ArrayList
       3: dup
       4: aload_1
       5: invokeinterface #19,  1           // InterfaceMethod java/util/Collection.size:()I
      10: invokespecial #21                 // Method java/util/ArrayList."<init>":(I)V
      13: astore_2
      14: aload_1
      15: invokeinterface #7,  1            // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      20: astore_3
      21: aload_3
      22: invokeinterface #8,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      27: ifeq          56
      30: aload_3
      31: invokeinterface #9,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      36: checkcast     #11                 // class java/lang/ref/SoftReference
      39: astore        4
      41: aload_2
      42: aload         4
      44: invokevirtual #22                 // Method java/lang/ref/SoftReference.get:()Ljava/lang/Object;
      47: invokeinterface #23,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      52: pop
      53: goto          21
      56: aload_2
      57: areturn
}
