Compiled from "IWorkbench.java"
public interface org.eclipse.ui.IWorkbench extends org.eclipse.core.runtime.IAdaptable,org.eclipse.ui.services.IServiceLocator {
  public abstract org.eclipse.swt.widgets.Display getDisplay();

  public abstract org.eclipse.ui.progress.IProgressService getProgressService();

  public abstract void addWorkbenchListener(org.eclipse.ui.IWorkbenchListener);

  public abstract void removeWorkbenchListener(org.eclipse.ui.IWorkbenchListener);

  public abstract void addWindowListener(org.eclipse.ui.IWindowListener);

  public abstract void removeWindowListener(org.eclipse.ui.IWindowListener);

  public abstract boolean close();

  public abstract org.eclipse.ui.IWorkbenchWindow getActiveWorkbenchWindow();

  public abstract org.eclipse.ui.IEditorRegistry getEditorRegistry();

  public abstract org.eclipse.ui.operations.IWorkbenchOperationSupport getOperationSupport();

  public abstract org.eclipse.ui.IPerspectiveRegistry getPerspectiveRegistry();

  public abstract org.eclipse.jface.preference.PreferenceManager getPreferenceManager();

  public abstract org.eclipse.jface.preference.IPreferenceStore getPreferenceStore();

  public abstract org.eclipse.ui.ISharedImages getSharedImages();

  public abstract int getWorkbenchWindowCount();

  public abstract org.eclipse.ui.IWorkbenchWindow[] getWorkbenchWindows();

  public abstract org.eclipse.ui.IWorkingSetManager getWorkingSetManager();

  public abstract org.eclipse.ui.ILocalWorkingSetManager createLocalWorkingSetManager();

  public abstract org.eclipse.ui.IWorkbenchWindow openWorkbenchWindow(java.lang.String, org.eclipse.core.runtime.IAdaptable) throws org.eclipse.ui.WorkbenchException;

  public abstract org.eclipse.ui.IWorkbenchWindow openWorkbenchWindow(org.eclipse.core.runtime.IAdaptable) throws org.eclipse.ui.WorkbenchException;

  public abstract boolean restart();

  public abstract boolean restart(boolean);

  public abstract org.eclipse.ui.IWorkbenchPage showPerspective(java.lang.String, org.eclipse.ui.IWorkbenchWindow) throws org.eclipse.ui.WorkbenchException;

  public abstract org.eclipse.ui.IWorkbenchPage showPerspective(java.lang.String, org.eclipse.ui.IWorkbenchWindow, org.eclipse.core.runtime.IAdaptable) throws org.eclipse.ui.WorkbenchException;

  public abstract org.eclipse.ui.IDecoratorManager getDecoratorManager();

  public abstract boolean saveAllEditors(boolean);

  public abstract org.eclipse.ui.IElementFactory getElementFactory(java.lang.String);

  public abstract org.eclipse.ui.activities.IWorkbenchActivitySupport getActivitySupport();

  public abstract org.eclipse.ui.commands.IWorkbenchCommandSupport getCommandSupport();

  public abstract org.eclipse.ui.contexts.IWorkbenchContextSupport getContextSupport();

  public abstract org.eclipse.ui.themes.IThemeManager getThemeManager();

  public abstract org.eclipse.ui.intro.IIntroManager getIntroManager();

  public abstract org.eclipse.ui.help.IWorkbenchHelpSystem getHelpSystem();

  public abstract org.eclipse.ui.browser.IWorkbenchBrowserSupport getBrowserSupport();

  public abstract boolean isStarting();

  public abstract boolean isClosing();

  public abstract org.eclipse.core.runtime.dynamichelpers.IExtensionTracker getExtensionTracker();

  public abstract org.eclipse.ui.views.IViewRegistry getViewRegistry();

  public abstract org.eclipse.ui.wizards.IWizardRegistry getNewWizardRegistry();

  public abstract org.eclipse.ui.wizards.IWizardRegistry getImportWizardRegistry();

  public abstract org.eclipse.ui.wizards.IWizardRegistry getExportWizardRegistry();

  public abstract boolean saveAll(org.eclipse.jface.window.IShellProvider, org.eclipse.jface.operation.IRunnableContext, org.eclipse.ui.ISaveableFilter, boolean);

  public abstract org.eclipse.jface.window.IShellProvider getModalDialogShellProvider();
}
