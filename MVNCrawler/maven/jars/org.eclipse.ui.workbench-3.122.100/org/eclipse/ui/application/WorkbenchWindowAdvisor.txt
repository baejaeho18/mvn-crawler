Compiled from "WorkbenchWindowAdvisor.java"
public class org.eclipse.ui.application.WorkbenchWindowAdvisor {
  private org.eclipse.ui.application.IWorkbenchWindowConfigurer windowConfigurer;

  public org.eclipse.ui.application.WorkbenchWindowAdvisor(org.eclipse.ui.application.IWorkbenchWindowConfigurer);
    Code:
       0: aload_0
       1: invokespecial #138                // Method java/lang/Object."<init>":()V
       4: aload_1
       5: invokestatic  #139                // Method org/eclipse/core/runtime/Assert.isNotNull:(Ljava/lang/Object;)V
       8: aload_0
       9: aload_1
      10: putfield      #136                // Field windowConfigurer:Lorg/eclipse/ui/application/IWorkbenchWindowConfigurer;
      13: return

  protected org.eclipse.ui.application.IWorkbenchWindowConfigurer getWindowConfigurer();
    Code:
       0: aload_0
       1: getfield      #136                // Field windowConfigurer:Lorg/eclipse/ui/application/IWorkbenchWindowConfigurer;
       4: areturn

  public void preWindowOpen();
    Code:
       0: return

  public org.eclipse.ui.application.ActionBarAdvisor createActionBarAdvisor(org.eclipse.ui.application.IActionBarConfigurer);
    Code:
       0: new           #74                 // class org/eclipse/ui/application/ActionBarAdvisor
       3: dup
       4: aload_1
       5: invokespecial #140                // Method org/eclipse/ui/application/ActionBarAdvisor."<init>":(Lorg/eclipse/ui/application/IActionBarConfigurer;)V
       8: areturn

  public void postWindowRestore() throws org.eclipse.ui.WorkbenchException;
    Code:
       0: return

  protected void cleanUpEditorArea();
    Code:
       0: return

  public void openIntro();
    Code:
       0: aload_0
       1: invokevirtual #141                // Method getWindowConfigurer:()Lorg/eclipse/ui/application/IWorkbenchWindowConfigurer;
       4: invokeinterface #152,  1          // InterfaceMethod org/eclipse/ui/application/IWorkbenchWindowConfigurer.getWorkbenchConfigurer:()Lorg/eclipse/ui/application/IWorkbenchConfigurer;
       9: astore_1
      10: aload_1
      11: ldc           #1                  // String introOpened
      13: invokeinterface #149,  2          // InterfaceMethod org/eclipse/ui/application/IWorkbenchConfigurer.getData:(Ljava/lang/String;)Ljava/lang/Object;
      18: checkcast     #67                 // class java/lang/Boolean
      21: astore_2
      22: aload_2
      23: ifnull        34
      26: aload_2
      27: invokevirtual #137                // Method java/lang/Boolean.booleanValue:()Z
      30: ifeq          34
      33: return
      34: aload_1
      35: ldc           #1                  // String introOpened
      37: getstatic     #134                // Field java/lang/Boolean.TRUE:Ljava/lang/Boolean;
      40: invokeinterface #150,  3          // InterfaceMethod org/eclipse/ui/application/IWorkbenchConfigurer.setData:(Ljava/lang/String;Ljava/lang/Object;)V
      45: invokestatic  #144                // Method org/eclipse/ui/internal/util/PrefUtil.getAPIPreferenceStore:()Lorg/eclipse/jface/preference/IPreferenceStore;
      48: ldc           #2                  // String showIntro
      50: invokeinterface #145,  2          // InterfaceMethod org/eclipse/jface/preference/IPreferenceStore.getBoolean:(Ljava/lang/String;)Z
      55: istore_3
      56: aload_1
      57: invokeinterface #148,  1          // InterfaceMethod org/eclipse/ui/application/IWorkbenchConfigurer.getWorkbench:()Lorg/eclipse/ui/IWorkbench;
      62: invokeinterface #147,  1          // InterfaceMethod org/eclipse/ui/IWorkbench.getIntroManager:()Lorg/eclipse/ui/intro/IIntroManager;
      67: astore        4
      69: aload         4
      71: invokeinterface #153,  1          // InterfaceMethod org/eclipse/ui/intro/IIntroManager.hasIntro:()Z
      76: istore        5
      78: aload         4
      80: invokeinterface #154,  1          // InterfaceMethod org/eclipse/ui/intro/IIntroManager.isNewContentAvailable:()Z
      85: istore        6
      87: iload         5
      89: ifeq          133
      92: iload_3
      93: ifne          101
      96: iload         6
      98: ifeq          133
     101: invokestatic  #144                // Method org/eclipse/ui/internal/util/PrefUtil.getAPIPreferenceStore:()Lorg/eclipse/jface/preference/IPreferenceStore;
     104: ldc           #2                  // String showIntro
     106: iconst_0
     107: invokeinterface #146,  3          // InterfaceMethod org/eclipse/jface/preference/IPreferenceStore.setValue:(Ljava/lang/String;Z)V
     112: invokestatic  #143                // Method org/eclipse/ui/internal/util/PrefUtil.saveAPIPrefs:()V
     115: aload         4
     117: aload_0
     118: invokevirtual #141                // Method getWindowConfigurer:()Lorg/eclipse/ui/application/IWorkbenchWindowConfigurer;
     121: invokeinterface #151,  1          // InterfaceMethod org/eclipse/ui/application/IWorkbenchWindowConfigurer.getWindow:()Lorg/eclipse/ui/IWorkbenchWindow;
     126: iconst_0
     127: invokeinterface #155,  3          // InterfaceMethod org/eclipse/ui/intro/IIntroManager.showIntro:(Lorg/eclipse/ui/IWorkbenchWindow;Z)Lorg/eclipse/ui/intro/IIntroPart;
     132: pop
     133: return

  public void postWindowCreate();
    Code:
       0: return

  public void postWindowOpen();
    Code:
       0: return

  public boolean preWindowShellClose();
    Code:
       0: iconst_1
       1: ireturn

  public void postWindowClose();
    Code:
       0: return

  public void createWindowContents(org.eclipse.swt.widgets.Shell);
    Code:
       0: aload_0
       1: invokevirtual #141                // Method getWindowConfigurer:()Lorg/eclipse/ui/application/IWorkbenchWindowConfigurer;
       4: checkcast     #78                 // class org/eclipse/ui/internal/WorkbenchWindowConfigurer
       7: aload_1
       8: invokevirtual #142                // Method org/eclipse/ui/internal/WorkbenchWindowConfigurer.createDefaultContents:(Lorg/eclipse/swt/widgets/Shell;)V
      11: return

  public org.eclipse.swt.widgets.Control createEmptyWindowContents(org.eclipse.swt.widgets.Composite);
    Code:
       0: aconst_null
       1: areturn

  public boolean isDurableFolder(java.lang.String, java.lang.String);
    Code:
       0: iconst_0
       1: ireturn

  public void dispose();
    Code:
       0: return

  public org.eclipse.core.runtime.IStatus saveState(org.eclipse.ui.IMemento);
    Code:
       0: getstatic     #135                // Field org/eclipse/core/runtime/Status.OK_STATUS:Lorg/eclipse/core/runtime/IStatus;
       3: areturn

  public org.eclipse.core.runtime.IStatus restoreState(org.eclipse.ui.IMemento);
    Code:
       0: getstatic     #135                // Field org/eclipse/core/runtime/Status.OK_STATUS:Lorg/eclipse/core/runtime/IStatus;
       3: areturn
}
