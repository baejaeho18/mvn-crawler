Compiled from "Indexer.java"
class org.springframework.expression.spel.ast.Indexer$MapIndexingValueRef implements org.springframework.expression.spel.ast.ValueRef {
  private final org.springframework.expression.TypeConverter typeConverter;

  private final java.util.Map map;

  private final java.lang.Object key;

  private final org.springframework.core.convert.TypeDescriptor mapEntryTypeDescriptor;

  public org.springframework.expression.spel.ast.Indexer$MapIndexingValueRef(org.springframework.expression.TypeConverter, java.util.Map, java.lang.Object, org.springframework.core.convert.TypeDescriptor);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field typeConverter:Lorg/springframework/expression/TypeConverter;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field map:Ljava/util/Map;
      14: aload_0
      15: aload_3
      16: putfield      #4                  // Field key:Ljava/lang/Object;
      19: aload_0
      20: aload         4
      22: putfield      #5                  // Field mapEntryTypeDescriptor:Lorg/springframework/core/convert/TypeDescriptor;
      25: return

  public org.springframework.expression.TypedValue getValue();
    Code:
       0: aload_0
       1: getfield      #3                  // Field map:Ljava/util/Map;
       4: aload_0
       5: getfield      #4                  // Field key:Ljava/lang/Object;
       8: invokeinterface #6,  2            // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      13: astore_1
      14: new           #7                  // class org/springframework/expression/TypedValue
      17: dup
      18: aload_1
      19: aload_0
      20: getfield      #5                  // Field mapEntryTypeDescriptor:Lorg/springframework/core/convert/TypeDescriptor;
      23: aload_1
      24: invokevirtual #8                  // Method org/springframework/core/convert/TypeDescriptor.getMapValueTypeDescriptor:(Ljava/lang/Object;)Lorg/springframework/core/convert/TypeDescriptor;
      27: invokespecial #9                  // Method org/springframework/expression/TypedValue."<init>":(Ljava/lang/Object;Lorg/springframework/core/convert/TypeDescriptor;)V
      30: areturn

  public void setValue(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #5                  // Field mapEntryTypeDescriptor:Lorg/springframework/core/convert/TypeDescriptor;
       4: invokevirtual #10                 // Method org/springframework/core/convert/TypeDescriptor.getMapValueTypeDescriptor:()Lorg/springframework/core/convert/TypeDescriptor;
       7: ifnull        32
      10: aload_0
      11: getfield      #2                  // Field typeConverter:Lorg/springframework/expression/TypeConverter;
      14: aload_1
      15: aload_1
      16: invokestatic  #11                 // Method org/springframework/core/convert/TypeDescriptor.forObject:(Ljava/lang/Object;)Lorg/springframework/core/convert/TypeDescriptor;
      19: aload_0
      20: getfield      #5                  // Field mapEntryTypeDescriptor:Lorg/springframework/core/convert/TypeDescriptor;
      23: invokevirtual #10                 // Method org/springframework/core/convert/TypeDescriptor.getMapValueTypeDescriptor:()Lorg/springframework/core/convert/TypeDescriptor;
      26: invokeinterface #12,  4           // InterfaceMethod org/springframework/expression/TypeConverter.convertValue:(Ljava/lang/Object;Lorg/springframework/core/convert/TypeDescriptor;Lorg/springframework/core/convert/TypeDescriptor;)Ljava/lang/Object;
      31: astore_1
      32: aload_0
      33: getfield      #3                  // Field map:Ljava/util/Map;
      36: aload_0
      37: getfield      #4                  // Field key:Ljava/lang/Object;
      40: aload_1
      41: invokeinterface #13,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      46: pop
      47: return

  public boolean isWritable();
    Code:
       0: iconst_1
       1: ireturn
}
