Compiled from "StdArraySerializers.java"
public final class com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer extends com.fasterxml.jackson.databind.ser.std.StdArraySerializers$TypedPrimitiveArraySerializer<short[]> {
  private static final com.fasterxml.jackson.databind.JavaType VALUE_TYPE;

  public com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer();
    Code:
       0: aload_0
       1: ldc_w         #1                  // class "[S"
       4: invokespecial #2                  // Method com/fasterxml/jackson/databind/ser/std/StdArraySerializers$TypedPrimitiveArraySerializer."<init>":(Ljava/lang/Class;)V
       7: return

  public com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer(com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer, com.fasterxml.jackson.databind.BeanProperty, com.fasterxml.jackson.databind.jsontype.TypeSerializer);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokespecial #3                  // Method com/fasterxml/jackson/databind/ser/std/StdArraySerializers$TypedPrimitiveArraySerializer."<init>":(Lcom/fasterxml/jackson/databind/ser/std/StdArraySerializers$TypedPrimitiveArraySerializer;Lcom/fasterxml/jackson/databind/BeanProperty;Lcom/fasterxml/jackson/databind/jsontype/TypeSerializer;)V
       7: return

  public com.fasterxml.jackson.databind.ser.ContainerSerializer<?> _withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer);
    Code:
       0: new           #4                  // class com/fasterxml/jackson/databind/ser/std/StdArraySerializers$ShortArraySerializer
       3: dup
       4: aload_0
       5: aload_0
       6: getfield      #5                  // Field _property:Lcom/fasterxml/jackson/databind/BeanProperty;
       9: aload_1
      10: invokespecial #6                  // Method "<init>":(Lcom/fasterxml/jackson/databind/ser/std/StdArraySerializers$ShortArraySerializer;Lcom/fasterxml/jackson/databind/BeanProperty;Lcom/fasterxml/jackson/databind/jsontype/TypeSerializer;)V
      13: areturn

  public com.fasterxml.jackson.databind.JavaType getContentType();
    Code:
       0: getstatic     #7                  // Field VALUE_TYPE:Lcom/fasterxml/jackson/databind/JavaType;
       3: areturn

  public com.fasterxml.jackson.databind.JsonSerializer<?> getContentSerializer();
    Code:
       0: aconst_null
       1: areturn

  public boolean isEmpty(short[]);
    Code:
       0: aload_1
       1: ifnull        9
       4: aload_1
       5: arraylength
       6: ifne          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  public boolean hasSingleElement(short[]);
    Code:
       0: aload_1
       1: arraylength
       2: iconst_1
       3: if_icmpne     10
       6: iconst_1
       7: goto          11
      10: iconst_0
      11: ireturn

  public void serializeContents(short[], com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider) throws java.io.IOException, com.fasterxml.jackson.core.JsonGenerationException;
    Code:
       0: aload_0
       1: getfield      #8                  // Field _valueTypeSerializer:Lcom/fasterxml/jackson/databind/jsontype/TypeSerializer;
       4: ifnull        57
       7: iconst_0
       8: istore        4
      10: aload_1
      11: arraylength
      12: istore        5
      14: iload         4
      16: iload         5
      18: if_icmpge     56
      21: aload_0
      22: getfield      #8                  // Field _valueTypeSerializer:Lcom/fasterxml/jackson/databind/jsontype/TypeSerializer;
      25: aconst_null
      26: aload_2
      27: getstatic     #9                  // Field java/lang/Short.TYPE:Ljava/lang/Class;
      30: invokevirtual #10                 // Method com/fasterxml/jackson/databind/jsontype/TypeSerializer.writeTypePrefixForScalar:(Ljava/lang/Object;Lcom/fasterxml/jackson/core/JsonGenerator;Ljava/lang/Class;)V
      33: aload_2
      34: aload_1
      35: iload         4
      37: saload
      38: invokevirtual #11                 // Method com/fasterxml/jackson/core/JsonGenerator.writeNumber:(I)V
      41: aload_0
      42: getfield      #8                  // Field _valueTypeSerializer:Lcom/fasterxml/jackson/databind/jsontype/TypeSerializer;
      45: aconst_null
      46: aload_2
      47: invokevirtual #12                 // Method com/fasterxml/jackson/databind/jsontype/TypeSerializer.writeTypeSuffixForScalar:(Ljava/lang/Object;Lcom/fasterxml/jackson/core/JsonGenerator;)V
      50: iinc          4, 1
      53: goto          14
      56: return
      57: iconst_0
      58: istore        4
      60: aload_1
      61: arraylength
      62: istore        5
      64: iload         4
      66: iload         5
      68: if_icmpge     85
      71: aload_2
      72: aload_1
      73: iload         4
      75: saload
      76: invokevirtual #11                 // Method com/fasterxml/jackson/core/JsonGenerator.writeNumber:(I)V
      79: iinc          4, 1
      82: goto          64
      85: return

  public com.fasterxml.jackson.databind.JsonNode getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type);
    Code:
       0: aload_0
       1: ldc           #13                 // String array
       3: iconst_1
       4: invokevirtual #14                 // Method createSchemaNode:(Ljava/lang/String;Z)Lcom/fasterxml/jackson/databind/node/ObjectNode;
       7: astore_3
       8: aload_3
       9: ldc           #15                 // String items
      11: aload_0
      12: ldc           #16                 // String integer
      14: invokevirtual #17                 // Method createSchemaNode:(Ljava/lang/String;)Lcom/fasterxml/jackson/databind/node/ObjectNode;
      17: invokevirtual #18                 // Method com/fasterxml/jackson/databind/node/ObjectNode.put:(Ljava/lang/String;Lcom/fasterxml/jackson/databind/JsonNode;)Lcom/fasterxml/jackson/databind/JsonNode;
      20: pop
      21: aload_3
      22: areturn

  public void acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType);
    Code:
       0: aload_1
       1: aload_2
       2: invokeinterface #19,  2           // InterfaceMethod com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatVisitorWrapper.expectArrayFormat:(Lcom/fasterxml/jackson/databind/JavaType;)Lcom/fasterxml/jackson/databind/jsonFormatVisitors/JsonArrayFormatVisitor;
       7: getstatic     #20                 // Field com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatTypes.INTEGER:Lcom/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatTypes;
      10: invokeinterface #21,  2           // InterfaceMethod com/fasterxml/jackson/databind/jsonFormatVisitors/JsonArrayFormatVisitor.itemsFormat:(Lcom/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatTypes;)V
      15: return

  public void serializeContents(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider) throws java.io.IOException, com.fasterxml.jackson.core.JsonGenerationException;
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #1                  // class "[S"
       5: aload_2
       6: aload_3
       7: invokevirtual #22                 // Method serializeContents:([SLcom/fasterxml/jackson/core/JsonGenerator;Lcom/fasterxml/jackson/databind/SerializerProvider;)V
      10: return

  public boolean hasSingleElement(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #1                  // class "[S"
       5: invokevirtual #23                 // Method hasSingleElement:([S)Z
       8: ireturn

  public boolean isEmpty(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #1                  // class "[S"
       5: invokevirtual #24                 // Method isEmpty:([S)Z
       8: ireturn

  static {};
    Code:
       0: invokestatic  #25                 // Method com/fasterxml/jackson/databind/type/TypeFactory.defaultInstance:()Lcom/fasterxml/jackson/databind/type/TypeFactory;
       3: getstatic     #9                  // Field java/lang/Short.TYPE:Ljava/lang/Class;
       6: invokevirtual #26                 // Method com/fasterxml/jackson/databind/type/TypeFactory.uncheckedSimpleType:(Ljava/lang/Class;)Lcom/fasterxml/jackson/databind/JavaType;
       9: putstatic     #7                  // Field VALUE_TYPE:Lcom/fasterxml/jackson/databind/JavaType;
      12: return
}
