Compiled from "StdArraySerializers.java"
public final class com.fasterxml.jackson.databind.ser.std.StdArraySerializers$BooleanArraySerializer extends com.fasterxml.jackson.databind.ser.std.ArraySerializerBase<boolean[]> {
  private static final com.fasterxml.jackson.databind.JavaType VALUE_TYPE;

  public com.fasterxml.jackson.databind.ser.std.StdArraySerializers$BooleanArraySerializer();
    Code:
       0: aload_0
       1: ldc_w         #1                  // class "[Z"
       4: aconst_null
       5: invokespecial #2                  // Method com/fasterxml/jackson/databind/ser/std/ArraySerializerBase."<init>":(Ljava/lang/Class;Lcom/fasterxml/jackson/databind/BeanProperty;)V
       8: return

  public com.fasterxml.jackson.databind.ser.ContainerSerializer<?> _withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer);
    Code:
       0: aload_0
       1: areturn

  public com.fasterxml.jackson.databind.JavaType getContentType();
    Code:
       0: getstatic     #3                  // Field VALUE_TYPE:Lcom/fasterxml/jackson/databind/JavaType;
       3: areturn

  public com.fasterxml.jackson.databind.JsonSerializer<?> getContentSerializer();
    Code:
       0: aconst_null
       1: areturn

  public boolean isEmpty(boolean[]);
    Code:
       0: aload_1
       1: ifnull        9
       4: aload_1
       5: arraylength
       6: ifne          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  public boolean hasSingleElement(boolean[]);
    Code:
       0: aload_1
       1: arraylength
       2: iconst_1
       3: if_icmpne     10
       6: iconst_1
       7: goto          11
      10: iconst_0
      11: ireturn

  public void serializeContents(boolean[], com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider) throws java.io.IOException, com.fasterxml.jackson.core.JsonGenerationException;
    Code:
       0: iconst_0
       1: istore        4
       3: aload_1
       4: arraylength
       5: istore        5
       7: iload         4
       9: iload         5
      11: if_icmpge     28
      14: aload_2
      15: aload_1
      16: iload         4
      18: baload
      19: invokevirtual #4                  // Method com/fasterxml/jackson/core/JsonGenerator.writeBoolean:(Z)V
      22: iinc          4, 1
      25: goto          7
      28: return

  public com.fasterxml.jackson.databind.JsonNode getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type);
    Code:
       0: aload_0
       1: ldc           #5                  // String array
       3: iconst_1
       4: invokevirtual #6                  // Method createSchemaNode:(Ljava/lang/String;Z)Lcom/fasterxml/jackson/databind/node/ObjectNode;
       7: astore_3
       8: aload_3
       9: ldc           #7                  // String items
      11: aload_0
      12: ldc           #8                  // String boolean
      14: invokevirtual #9                  // Method createSchemaNode:(Ljava/lang/String;)Lcom/fasterxml/jackson/databind/node/ObjectNode;
      17: invokevirtual #10                 // Method com/fasterxml/jackson/databind/node/ObjectNode.put:(Ljava/lang/String;Lcom/fasterxml/jackson/databind/JsonNode;)Lcom/fasterxml/jackson/databind/JsonNode;
      20: pop
      21: aload_3
      22: areturn

  public void acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType);
    Code:
       0: aload_1
       1: aload_2
       2: invokeinterface #11,  2           // InterfaceMethod com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatVisitorWrapper.expectArrayFormat:(Lcom/fasterxml/jackson/databind/JavaType;)Lcom/fasterxml/jackson/databind/jsonFormatVisitors/JsonArrayFormatVisitor;
       7: getstatic     #12                 // Field com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatTypes.BOOLEAN:Lcom/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatTypes;
      10: invokeinterface #13,  2           // InterfaceMethod com/fasterxml/jackson/databind/jsonFormatVisitors/JsonArrayFormatVisitor.itemsFormat:(Lcom/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatTypes;)V
      15: return

  public void serializeContents(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider) throws java.io.IOException, com.fasterxml.jackson.core.JsonGenerationException;
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #1                  // class "[Z"
       5: aload_2
       6: aload_3
       7: invokevirtual #14                 // Method serializeContents:([ZLcom/fasterxml/jackson/core/JsonGenerator;Lcom/fasterxml/jackson/databind/SerializerProvider;)V
      10: return

  public boolean hasSingleElement(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #1                  // class "[Z"
       5: invokevirtual #15                 // Method hasSingleElement:([Z)Z
       8: ireturn

  public boolean isEmpty(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #1                  // class "[Z"
       5: invokevirtual #16                 // Method isEmpty:([Z)Z
       8: ireturn

  static {};
    Code:
       0: invokestatic  #17                 // Method com/fasterxml/jackson/databind/type/TypeFactory.defaultInstance:()Lcom/fasterxml/jackson/databind/type/TypeFactory;
       3: ldc_w         #18                 // class java/lang/Boolean
       6: invokevirtual #19                 // Method com/fasterxml/jackson/databind/type/TypeFactory.uncheckedSimpleType:(Ljava/lang/Class;)Lcom/fasterxml/jackson/databind/JavaType;
       9: putstatic     #3                  // Field VALUE_TYPE:Lcom/fasterxml/jackson/databind/JavaType;
      12: return
}
