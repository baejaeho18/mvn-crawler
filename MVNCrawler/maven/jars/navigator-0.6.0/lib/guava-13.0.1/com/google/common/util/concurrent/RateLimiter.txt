Compiled from "RateLimiter.java"
public abstract class com.google.common.util.concurrent.RateLimiter {
  private final com.google.common.util.concurrent.RateLimiter$SleepingTicker ticker;

  private final long offsetNanos;

  double storedPermits;

  double maxPermits;

  double stableIntervalMicros;

  private long nextFreeTicketMicros;

  public static com.google.common.util.concurrent.RateLimiter create(double);
    Code:
       0: getstatic     #2                  // Field com/google/common/util/concurrent/RateLimiter$SleepingTicker.SYSTEM_TICKER:Lcom/google/common/util/concurrent/RateLimiter$SleepingTicker;
       3: dload_0
       4: invokestatic  #3                  // Method create:(Lcom/google/common/util/concurrent/RateLimiter$SleepingTicker;D)Lcom/google/common/util/concurrent/RateLimiter;
       7: areturn

  static com.google.common.util.concurrent.RateLimiter create(com.google.common.util.concurrent.RateLimiter$SleepingTicker, double);
    Code:
       0: new           #4                  // class com/google/common/util/concurrent/RateLimiter$Bursty
       3: dup
       4: aload_0
       5: invokespecial #5                  // Method com/google/common/util/concurrent/RateLimiter$Bursty."<init>":(Lcom/google/common/util/concurrent/RateLimiter$SleepingTicker;)V
       8: astore_3
       9: aload_3
      10: dload_1
      11: invokevirtual #6                  // Method setRate:(D)V
      14: aload_3
      15: areturn

  public static com.google.common.util.concurrent.RateLimiter create(double, long, java.util.concurrent.TimeUnit);
    Code:
       0: getstatic     #2                  // Field com/google/common/util/concurrent/RateLimiter$SleepingTicker.SYSTEM_TICKER:Lcom/google/common/util/concurrent/RateLimiter$SleepingTicker;
       3: dload_0
       4: lload_2
       5: aload         4
       7: invokestatic  #7                  // Method create:(Lcom/google/common/util/concurrent/RateLimiter$SleepingTicker;DJLjava/util/concurrent/TimeUnit;)Lcom/google/common/util/concurrent/RateLimiter;
      10: areturn

  static com.google.common.util.concurrent.RateLimiter create(com.google.common.util.concurrent.RateLimiter$SleepingTicker, double, long, java.util.concurrent.TimeUnit);
    Code:
       0: new           #8                  // class com/google/common/util/concurrent/RateLimiter$WarmingUp
       3: dup
       4: aload_0
       5: lload_3
       6: aload         5
       8: invokespecial #9                  // Method com/google/common/util/concurrent/RateLimiter$WarmingUp."<init>":(Lcom/google/common/util/concurrent/RateLimiter$SleepingTicker;JLjava/util/concurrent/TimeUnit;)V
      11: astore        6
      13: aload         6
      15: dload_1
      16: invokevirtual #6                  // Method setRate:(D)V
      19: aload         6
      21: areturn

  static com.google.common.util.concurrent.RateLimiter createBursty(com.google.common.util.concurrent.RateLimiter$SleepingTicker, double, int);
    Code:
       0: new           #4                  // class com/google/common/util/concurrent/RateLimiter$Bursty
       3: dup
       4: aload_0
       5: invokespecial #5                  // Method com/google/common/util/concurrent/RateLimiter$Bursty."<init>":(Lcom/google/common/util/concurrent/RateLimiter$SleepingTicker;)V
       8: astore        4
      10: aload         4
      12: dload_1
      13: invokevirtual #10                 // Method com/google/common/util/concurrent/RateLimiter$Bursty.setRate:(D)V
      16: aload         4
      18: iload_3
      19: i2d
      20: putfield      #11                 // Field com/google/common/util/concurrent/RateLimiter$Bursty.maxPermits:D
      23: aload         4
      25: areturn

  private com.google.common.util.concurrent.RateLimiter(com.google.common.util.concurrent.RateLimiter$SleepingTicker);
    Code:
       0: aload_0
       1: invokespecial #12                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: lconst_0
       6: putfield      #13                 // Field nextFreeTicketMicros:J
       9: aload_0
      10: aload_1
      11: putfield      #14                 // Field ticker:Lcom/google/common/util/concurrent/RateLimiter$SleepingTicker;
      14: aload_0
      15: aload_1
      16: invokevirtual #15                 // Method com/google/common/util/concurrent/RateLimiter$SleepingTicker.read:()J
      19: putfield      #16                 // Field offsetNanos:J
      22: return

  public final synchronized void setRate(double);
    Code:
       0: dload_1
       1: dconst_0
       2: dcmpl
       3: ifle          17
       6: dload_1
       7: invokestatic  #17                 // Method java/lang/Double.isNaN:(D)Z
      10: ifne          17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ldc           #18                 // String rate must be positive
      20: invokestatic  #19                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/Object;)V
      23: aload_0
      24: aload_0
      25: invokespecial #20                 // Method readSafeMicros:()J
      28: invokespecial #21                 // Method resync:(J)V
      31: getstatic     #22                 // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
      34: lconst_1
      35: invokevirtual #23                 // Method java/util/concurrent/TimeUnit.toMicros:(J)J
      38: l2d
      39: dload_1
      40: ddiv
      41: dstore_3
      42: aload_0
      43: dload_3
      44: putfield      #24                 // Field stableIntervalMicros:D
      47: aload_0
      48: dload_1
      49: dload_3
      50: invokevirtual #25                 // Method doSetRate:(DD)V
      53: return

  abstract void doSetRate(double, double);

  public final synchronized double getRate();
    Code:
       0: getstatic     #22                 // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
       3: lconst_1
       4: invokevirtual #23                 // Method java/util/concurrent/TimeUnit.toMicros:(J)J
       7: l2d
       8: aload_0
       9: getfield      #24                 // Field stableIntervalMicros:D
      12: ddiv
      13: dreturn

  public void acquire();
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #26                 // Method acquire:(I)V
       5: return

  public void acquire(int);
    Code:
       0: iload_1
       1: invokestatic  #27                 // Method checkPermits:(I)V
       4: aload_0
       5: dup
       6: astore        4
       8: monitorenter
       9: aload_0
      10: iload_1
      11: i2d
      12: aload_0
      13: invokespecial #20                 // Method readSafeMicros:()J
      16: invokespecial #28                 // Method reserveNextTicket:(DJ)J
      19: lstore_2
      20: aload         4
      22: monitorexit
      23: goto          34
      26: astore        5
      28: aload         4
      30: monitorexit
      31: aload         5
      33: athrow
      34: aload_0
      35: getfield      #14                 // Field ticker:Lcom/google/common/util/concurrent/RateLimiter$SleepingTicker;
      38: lload_2
      39: invokevirtual #29                 // Method com/google/common/util/concurrent/RateLimiter$SleepingTicker.sleepMicrosUninterruptibly:(J)V
      42: return
    Exception table:
       from    to  target type
           9    23    26   any
          26    31    26   any

  public boolean tryAcquire(long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: iconst_1
       2: lload_1
       3: aload_3
       4: invokevirtual #30                 // Method tryAcquire:(IJLjava/util/concurrent/TimeUnit;)Z
       7: ireturn

  public boolean tryAcquire(int, long, java.util.concurrent.TimeUnit);
    Code:
       0: iload_1
       1: invokestatic  #27                 // Method checkPermits:(I)V
       4: aload         4
       6: lload_2
       7: invokevirtual #23                 // Method java/util/concurrent/TimeUnit.toMicros:(J)J
      10: lstore        5
      12: aload_0
      13: dup
      14: astore        9
      16: monitorenter
      17: aload_0
      18: invokespecial #20                 // Method readSafeMicros:()J
      21: lstore        10
      23: aload_0
      24: getfield      #13                 // Field nextFreeTicketMicros:J
      27: lload         10
      29: lload         5
      31: ladd
      32: lcmp
      33: ifle          41
      36: iconst_0
      37: aload         9
      39: monitorexit
      40: ireturn
      41: aload_0
      42: iload_1
      43: i2d
      44: lload         10
      46: invokespecial #28                 // Method reserveNextTicket:(DJ)J
      49: lstore        7
      51: aload         9
      53: monitorexit
      54: goto          65
      57: astore        12
      59: aload         9
      61: monitorexit
      62: aload         12
      64: athrow
      65: aload_0
      66: getfield      #14                 // Field ticker:Lcom/google/common/util/concurrent/RateLimiter$SleepingTicker;
      69: lload         7
      71: invokevirtual #29                 // Method com/google/common/util/concurrent/RateLimiter$SleepingTicker.sleepMicrosUninterruptibly:(J)V
      74: iconst_1
      75: ireturn
    Exception table:
       from    to  target type
          17    40    57   any
          41    54    57   any
          57    62    57   any

  private static void checkPermits(int);
    Code:
       0: iload_0
       1: ifle          8
       4: iconst_1
       5: goto          9
       8: iconst_0
       9: ldc           #31                 // String Requested permits must be positive
      11: invokestatic  #19                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/Object;)V
      14: return

  private long reserveNextTicket(double, long);
    Code:
       0: aload_0
       1: lload_3
       2: invokespecial #21                 // Method resync:(J)V
       5: aload_0
       6: getfield      #13                 // Field nextFreeTicketMicros:J
       9: lload_3
      10: lsub
      11: lstore        5
      13: dload_1
      14: aload_0
      15: getfield      #32                 // Field storedPermits:D
      18: invokestatic  #33                 // Method java/lang/Math.min:(DD)D
      21: dstore        7
      23: dload_1
      24: dload         7
      26: dsub
      27: dstore        9
      29: aload_0
      30: aload_0
      31: getfield      #32                 // Field storedPermits:D
      34: dload         7
      36: invokevirtual #34                 // Method storedPermitsToWaitTime:(DD)J
      39: dload         9
      41: aload_0
      42: getfield      #24                 // Field stableIntervalMicros:D
      45: dmul
      46: d2l
      47: ladd
      48: lstore        11
      50: aload_0
      51: aload_0
      52: getfield      #13                 // Field nextFreeTicketMicros:J
      55: lload         11
      57: ladd
      58: putfield      #13                 // Field nextFreeTicketMicros:J
      61: aload_0
      62: dup
      63: getfield      #32                 // Field storedPermits:D
      66: dload         7
      68: dsub
      69: putfield      #32                 // Field storedPermits:D
      72: lload         5
      74: lreturn

  abstract long storedPermitsToWaitTime(double, double);

  private void resync(long);
    Code:
       0: lload_1
       1: aload_0
       2: getfield      #13                 // Field nextFreeTicketMicros:J
       5: lcmp
       6: ifle          42
       9: aload_0
      10: aload_0
      11: getfield      #35                 // Field maxPermits:D
      14: aload_0
      15: getfield      #32                 // Field storedPermits:D
      18: lload_1
      19: aload_0
      20: getfield      #13                 // Field nextFreeTicketMicros:J
      23: lsub
      24: l2d
      25: aload_0
      26: getfield      #24                 // Field stableIntervalMicros:D
      29: ddiv
      30: dadd
      31: invokestatic  #33                 // Method java/lang/Math.min:(DD)D
      34: putfield      #32                 // Field storedPermits:D
      37: aload_0
      38: lload_1
      39: putfield      #13                 // Field nextFreeTicketMicros:J
      42: return

  private long readSafeMicros();
    Code:
       0: getstatic     #36                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
       3: aload_0
       4: getfield      #14                 // Field ticker:Lcom/google/common/util/concurrent/RateLimiter$SleepingTicker;
       7: invokevirtual #15                 // Method com/google/common/util/concurrent/RateLimiter$SleepingTicker.read:()J
      10: aload_0
      11: getfield      #16                 // Field offsetNanos:J
      14: lsub
      15: invokevirtual #23                 // Method java/util/concurrent/TimeUnit.toMicros:(J)J
      18: lreturn

  public java.lang.String toString();
    Code:
       0: ldc           #37                 // String RateLimiter[stableRate=%3.1fqps]
       2: iconst_1
       3: anewarray     #38                 // class java/lang/Object
       6: dup
       7: iconst_0
       8: ldc2_w        #39                 // double 1000000.0d
      11: aload_0
      12: getfield      #24                 // Field stableIntervalMicros:D
      15: ddiv
      16: invokestatic  #41                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      19: aastore
      20: invokestatic  #42                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      23: areturn

  com.google.common.util.concurrent.RateLimiter(com.google.common.util.concurrent.RateLimiter$SleepingTicker, com.google.common.util.concurrent.RateLimiter$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method "<init>":(Lcom/google/common/util/concurrent/RateLimiter$SleepingTicker;)V
       5: return
}
