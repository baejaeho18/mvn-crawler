Compiled from "ConcurrentHashMultiset.java"
public final class com.google.common.collect.ConcurrentHashMultiset<E> extends com.google.common.collect.AbstractMultiset<E> implements java.io.Serializable {
  private final transient java.util.concurrent.ConcurrentMap<E, java.util.concurrent.atomic.AtomicInteger> countMap;

  private transient com.google.common.collect.ConcurrentHashMultiset<E>.EntrySet entrySet;

  private static final long serialVersionUID;

  public static <E> com.google.common.collect.ConcurrentHashMultiset<E> create();
    Code:
       0: new           #2                  // class com/google/common/collect/ConcurrentHashMultiset
       3: dup
       4: new           #3                  // class java/util/concurrent/ConcurrentHashMap
       7: dup
       8: invokespecial #4                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      11: invokespecial #5                  // Method "<init>":(Ljava/util/concurrent/ConcurrentMap;)V
      14: areturn

  public static <E> com.google.common.collect.ConcurrentHashMultiset<E> create(java.lang.Iterable<? extends E>);
    Code:
       0: invokestatic  #6                  // Method create:()Lcom/google/common/collect/ConcurrentHashMultiset;
       3: astore_1
       4: aload_1
       5: aload_0
       6: invokestatic  #7                  // Method com/google/common/collect/Iterables.addAll:(Ljava/util/Collection;Ljava/lang/Iterable;)Z
       9: pop
      10: aload_1
      11: areturn

  public static <E> com.google.common.collect.ConcurrentHashMultiset<E> create(com.google.common.collect.GenericMapMaker<? super E, ? super java.lang.Number>);
    Code:
       0: new           #2                  // class com/google/common/collect/ConcurrentHashMultiset
       3: dup
       4: aload_0
       5: invokevirtual #8                  // Method com/google/common/collect/GenericMapMaker.makeMap:()Ljava/util/concurrent/ConcurrentMap;
       8: invokespecial #5                  // Method "<init>":(Ljava/util/concurrent/ConcurrentMap;)V
      11: areturn

  com.google.common.collect.ConcurrentHashMultiset(java.util.concurrent.ConcurrentMap<E, java.util.concurrent.atomic.AtomicInteger>);
    Code:
       0: aload_0
       1: invokespecial #9                  // Method com/google/common/collect/AbstractMultiset."<init>":()V
       4: aload_1
       5: invokeinterface #10,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.isEmpty:()Z
      10: invokestatic  #11                 // Method com/google/common/base/Preconditions.checkArgument:(Z)V
      13: aload_0
      14: aload_1
      15: putfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
      18: return

  public int count(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #12                 // Method safeGet:(Ljava/lang/Object;)Ljava/util/concurrent/atomic/AtomicInteger;
       5: astore_2
       6: aload_2
       7: ifnonnull     14
      10: iconst_0
      11: goto          18
      14: aload_2
      15: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      18: ireturn

  private java.util.concurrent.atomic.AtomicInteger safeGet(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: invokeinterface #14,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #15                 // class java/util/concurrent/atomic/AtomicInteger
      13: areturn
      14: astore_2
      15: aconst_null
      16: areturn
      17: astore_2
      18: aconst_null
      19: areturn
    Exception table:
       from    to  target type
           0    13    14   Class java/lang/NullPointerException
           0    13    17   Class java/lang/ClassCastException

  public int size();
    Code:
       0: lconst_0
       1: lstore_1
       2: aload_0
       3: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
       6: invokeinterface #18,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.values:()Ljava/util/Collection;
      11: invokeinterface #19,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      16: astore_3
      17: aload_3
      18: invokeinterface #20,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      23: ifeq          49
      26: aload_3
      27: invokeinterface #21,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      32: checkcast     #15                 // class java/util/concurrent/atomic/AtomicInteger
      35: astore        4
      37: lload_1
      38: aload         4
      40: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      43: i2l
      44: ladd
      45: lstore_1
      46: goto          17
      49: lload_1
      50: invokestatic  #22                 // Method com/google/common/primitives/Ints.saturatedCast:(J)I
      53: ireturn

  public java.lang.Object[] toArray();
    Code:
       0: aload_0
       1: invokespecial #23                 // Method snapshot:()Ljava/util/List;
       4: invokeinterface #24,  1           // InterfaceMethod java/util/List.toArray:()[Ljava/lang/Object;
       9: areturn

  public <T> T[] toArray(T[]);
    Code:
       0: aload_0
       1: invokespecial #23                 // Method snapshot:()Ljava/util/List;
       4: aload_1
       5: invokeinterface #25,  2           // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      10: areturn

  private java.util.List<E> snapshot();
    Code:
       0: aload_0
       1: invokevirtual #26                 // Method size:()I
       4: invokestatic  #27                 // Method com/google/common/collect/Lists.newArrayListWithExpectedSize:(I)Ljava/util/ArrayList;
       7: astore_1
       8: aload_0
       9: invokevirtual #28                 // Method entrySet:()Ljava/util/Set;
      12: invokeinterface #29,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      17: astore_2
      18: aload_2
      19: invokeinterface #20,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      24: ifeq          76
      27: aload_2
      28: invokeinterface #21,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      33: checkcast     #30                 // class com/google/common/collect/Multiset$Entry
      36: astore_3
      37: aload_3
      38: invokeinterface #31,  1           // InterfaceMethod com/google/common/collect/Multiset$Entry.getElement:()Ljava/lang/Object;
      43: astore        4
      45: aload_3
      46: invokeinterface #32,  1           // InterfaceMethod com/google/common/collect/Multiset$Entry.getCount:()I
      51: istore        5
      53: iload         5
      55: ifle          73
      58: aload_1
      59: aload         4
      61: invokeinterface #33,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      66: pop
      67: iinc          5, -1
      70: goto          53
      73: goto          18
      76: aload_1
      77: areturn

  public int add(E, int);
    Code:
       0: aload_1
       1: invokestatic  #34                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: iload_2
       6: ifne          15
       9: aload_0
      10: aload_1
      11: invokevirtual #35                 // Method count:(Ljava/lang/Object;)I
      14: ireturn
      15: iload_2
      16: ifle          23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: ldc           #36                 // String Invalid occurrences: %s
      26: iconst_1
      27: anewarray     #37                 // class java/lang/Object
      30: dup
      31: iconst_0
      32: iload_2
      33: invokestatic  #38                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      36: aastore
      37: invokestatic  #39                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/String;[Ljava/lang/Object;)V
      40: aload_0
      41: aload_1
      42: invokespecial #12                 // Method safeGet:(Ljava/lang/Object;)Ljava/util/concurrent/atomic/AtomicInteger;
      45: astore_3
      46: aload_3
      47: ifnonnull     78
      50: aload_0
      51: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
      54: aload_1
      55: new           #15                 // class java/util/concurrent/atomic/AtomicInteger
      58: dup
      59: iload_2
      60: invokespecial #40                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      63: invokeinterface #41,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      68: checkcast     #15                 // class java/util/concurrent/atomic/AtomicInteger
      71: astore_3
      72: aload_3
      73: ifnonnull     78
      76: iconst_0
      77: ireturn
      78: aload_3
      79: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      82: istore        4
      84: iload         4
      86: ifeq          153
      89: iload         4
      91: iload_2
      92: invokestatic  #42                 // Method com/google/common/math/IntMath.checkedAdd:(II)I
      95: istore        5
      97: aload_3
      98: iload         4
     100: iload         5
     102: invokevirtual #43                 // Method java/util/concurrent/atomic/AtomicInteger.compareAndSet:(II)Z
     105: ifeq          111
     108: iload         4
     110: ireturn
     111: goto          196
     114: astore        5
     116: new           #45                 // class java/lang/IllegalArgumentException
     119: dup
     120: new           #46                 // class java/lang/StringBuilder
     123: dup
     124: invokespecial #47                 // Method java/lang/StringBuilder."<init>":()V
     127: ldc           #48                 // String Overflow adding
     129: invokevirtual #49                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     132: iload_2
     133: invokevirtual #50                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     136: ldc           #51                 // String  occurrences to a count of
     138: invokevirtual #49                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     141: iload         4
     143: invokevirtual #50                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     146: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     149: invokespecial #53                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     152: athrow
     153: new           #15                 // class java/util/concurrent/atomic/AtomicInteger
     156: dup
     157: iload_2
     158: invokespecial #40                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
     161: astore        5
     163: aload_0
     164: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
     167: aload_1
     168: aload         5
     170: invokeinterface #41,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     175: ifnull        194
     178: aload_0
     179: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
     182: aload_1
     183: aload_3
     184: aload         5
     186: invokeinterface #54,  4           // InterfaceMethod java/util/concurrent/ConcurrentMap.replace:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
     191: ifeq          199
     194: iconst_0
     195: ireturn
     196: goto          78
     199: goto          40
    Exception table:
       from    to  target type
          89   110   114   Class java/lang/ArithmeticException

  public int remove(java.lang.Object, int);
    Code:
       0: iload_2
       1: ifne          10
       4: aload_0
       5: aload_1
       6: invokevirtual #35                 // Method count:(Ljava/lang/Object;)I
       9: ireturn
      10: iload_2
      11: ifle          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ldc           #36                 // String Invalid occurrences: %s
      21: iconst_1
      22: anewarray     #37                 // class java/lang/Object
      25: dup
      26: iconst_0
      27: iload_2
      28: invokestatic  #38                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      31: aastore
      32: invokestatic  #39                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/String;[Ljava/lang/Object;)V
      35: aload_0
      36: aload_1
      37: invokespecial #12                 // Method safeGet:(Ljava/lang/Object;)Ljava/util/concurrent/atomic/AtomicInteger;
      40: astore_3
      41: aload_3
      42: ifnonnull     47
      45: iconst_0
      46: ireturn
      47: aload_3
      48: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      51: istore        4
      53: iload         4
      55: ifeq          102
      58: iconst_0
      59: iload         4
      61: iload_2
      62: isub
      63: invokestatic  #55                 // Method java/lang/Math.max:(II)I
      66: istore        5
      68: aload_3
      69: iload         4
      71: iload         5
      73: invokevirtual #43                 // Method java/util/concurrent/atomic/AtomicInteger.compareAndSet:(II)Z
      76: ifeq          99
      79: iload         5
      81: ifne          96
      84: aload_0
      85: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
      88: aload_1
      89: aload_3
      90: invokeinterface #56,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;Ljava/lang/Object;)Z
      95: pop
      96: iload         4
      98: ireturn
      99: goto          104
     102: iconst_0
     103: ireturn
     104: goto          47

  public boolean removeExactly(java.lang.Object, int);
    Code:
       0: iload_2
       1: ifne          6
       4: iconst_1
       5: ireturn
       6: iload_2
       7: ifle          14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ldc           #36                 // String Invalid occurrences: %s
      17: iconst_1
      18: anewarray     #37                 // class java/lang/Object
      21: dup
      22: iconst_0
      23: iload_2
      24: invokestatic  #38                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      27: aastore
      28: invokestatic  #39                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/String;[Ljava/lang/Object;)V
      31: aload_0
      32: aload_1
      33: invokespecial #12                 // Method safeGet:(Ljava/lang/Object;)Ljava/util/concurrent/atomic/AtomicInteger;
      36: astore_3
      37: aload_3
      38: ifnonnull     43
      41: iconst_0
      42: ireturn
      43: aload_3
      44: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      47: istore        4
      49: iload         4
      51: iload_2
      52: if_icmpge     57
      55: iconst_0
      56: ireturn
      57: iload         4
      59: iload_2
      60: isub
      61: istore        5
      63: aload_3
      64: iload         4
      66: iload         5
      68: invokevirtual #43                 // Method java/util/concurrent/atomic/AtomicInteger.compareAndSet:(II)Z
      71: ifeq          93
      74: iload         5
      76: ifne          91
      79: aload_0
      80: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
      83: aload_1
      84: aload_3
      85: invokeinterface #56,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;Ljava/lang/Object;)Z
      90: pop
      91: iconst_1
      92: ireturn
      93: goto          43

  public int setCount(E, int);
    Code:
       0: aload_1
       1: invokestatic  #34                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: iload_2
       6: ldc           #57                 // String count
       8: invokestatic  #58                 // Method com/google/common/collect/Multisets.checkNonnegative:(ILjava/lang/String;)V
      11: aload_0
      12: aload_1
      13: invokespecial #12                 // Method safeGet:(Ljava/lang/Object;)Ljava/util/concurrent/atomic/AtomicInteger;
      16: astore_3
      17: aload_3
      18: ifnonnull     55
      21: iload_2
      22: ifne          27
      25: iconst_0
      26: ireturn
      27: aload_0
      28: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
      31: aload_1
      32: new           #15                 // class java/util/concurrent/atomic/AtomicInteger
      35: dup
      36: iload_2
      37: invokespecial #40                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      40: invokeinterface #41,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      45: checkcast     #15                 // class java/util/concurrent/atomic/AtomicInteger
      48: astore_3
      49: aload_3
      50: ifnonnull     55
      53: iconst_0
      54: ireturn
      55: aload_3
      56: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      59: istore        4
      61: iload         4
      63: ifne          118
      66: iload_2
      67: ifne          72
      70: iconst_0
      71: ireturn
      72: new           #15                 // class java/util/concurrent/atomic/AtomicInteger
      75: dup
      76: iload_2
      77: invokespecial #40                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      80: astore        5
      82: aload_0
      83: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
      86: aload_1
      87: aload         5
      89: invokeinterface #41,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      94: ifnull        113
      97: aload_0
      98: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
     101: aload_1
     102: aload_3
     103: aload         5
     105: invokeinterface #54,  4           // InterfaceMethod java/util/concurrent/ConcurrentMap.replace:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
     110: ifeq          115
     113: iconst_0
     114: ireturn
     115: goto          150
     118: aload_3
     119: iload         4
     121: iload_2
     122: invokevirtual #43                 // Method java/util/concurrent/atomic/AtomicInteger.compareAndSet:(II)Z
     125: ifeq          147
     128: iload_2
     129: ifne          144
     132: aload_0
     133: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
     136: aload_1
     137: aload_3
     138: invokeinterface #56,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;Ljava/lang/Object;)Z
     143: pop
     144: iload         4
     146: ireturn
     147: goto          55
     150: goto          11

  public boolean setCount(E, int, int);
    Code:
       0: aload_1
       1: invokestatic  #34                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: iload_2
       6: ldc           #59                 // String oldCount
       8: invokestatic  #58                 // Method com/google/common/collect/Multisets.checkNonnegative:(ILjava/lang/String;)V
      11: iload_3
      12: ldc           #60                 // String newCount
      14: invokestatic  #58                 // Method com/google/common/collect/Multisets.checkNonnegative:(ILjava/lang/String;)V
      17: aload_0
      18: aload_1
      19: invokespecial #12                 // Method safeGet:(Ljava/lang/Object;)Ljava/util/concurrent/atomic/AtomicInteger;
      22: astore        4
      24: aload         4
      26: ifnonnull     68
      29: iload_2
      30: ifeq          35
      33: iconst_0
      34: ireturn
      35: iload_3
      36: ifne          41
      39: iconst_1
      40: ireturn
      41: aload_0
      42: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
      45: aload_1
      46: new           #15                 // class java/util/concurrent/atomic/AtomicInteger
      49: dup
      50: iload_3
      51: invokespecial #40                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      54: invokeinterface #41,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      59: ifnonnull     66
      62: iconst_1
      63: goto          67
      66: iconst_0
      67: ireturn
      68: aload         4
      70: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      73: istore        5
      75: iload         5
      77: iload_2
      78: if_icmpne     183
      81: iload         5
      83: ifne          153
      86: iload_3
      87: ifne          105
      90: aload_0
      91: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
      94: aload_1
      95: aload         4
      97: invokeinterface #56,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;Ljava/lang/Object;)Z
     102: pop
     103: iconst_1
     104: ireturn
     105: new           #15                 // class java/util/concurrent/atomic/AtomicInteger
     108: dup
     109: iload_3
     110: invokespecial #40                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
     113: astore        6
     115: aload_0
     116: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
     119: aload_1
     120: aload         6
     122: invokeinterface #41,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     127: ifnull        147
     130: aload_0
     131: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
     134: aload_1
     135: aload         4
     137: aload         6
     139: invokeinterface #54,  4           // InterfaceMethod java/util/concurrent/ConcurrentMap.replace:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
     144: ifeq          151
     147: iconst_1
     148: goto          152
     151: iconst_0
     152: ireturn
     153: aload         4
     155: iload         5
     157: iload_3
     158: invokevirtual #43                 // Method java/util/concurrent/atomic/AtomicInteger.compareAndSet:(II)Z
     161: ifeq          183
     164: iload_3
     165: ifne          181
     168: aload_0
     169: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
     172: aload_1
     173: aload         4
     175: invokeinterface #56,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;Ljava/lang/Object;)Z
     180: pop
     181: iconst_1
     182: ireturn
     183: iconst_0
     184: ireturn

  java.util.Set<E> createElementSet();
    Code:
       0: aload_0
       1: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
       4: invokeinterface #61,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.keySet:()Ljava/util/Set;
       9: astore_1
      10: new           #62                 // class com/google/common/collect/ConcurrentHashMultiset$1
      13: dup
      14: aload_0
      15: aload_1
      16: invokespecial #63                 // Method com/google/common/collect/ConcurrentHashMultiset$1."<init>":(Lcom/google/common/collect/ConcurrentHashMultiset;Ljava/util/Set;)V
      19: areturn

  public java.util.Set<com.google.common.collect.Multiset$Entry<E>> entrySet();
    Code:
       0: aload_0
       1: getfield      #64                 // Field entrySet:Lcom/google/common/collect/ConcurrentHashMultiset$EntrySet;
       4: astore_1
       5: aload_1
       6: ifnonnull     24
       9: aload_0
      10: new           #65                 // class com/google/common/collect/ConcurrentHashMultiset$EntrySet
      13: dup
      14: aload_0
      15: aconst_null
      16: invokespecial #66                 // Method com/google/common/collect/ConcurrentHashMultiset$EntrySet."<init>":(Lcom/google/common/collect/ConcurrentHashMultiset;Lcom/google/common/collect/ConcurrentHashMultiset$1;)V
      19: dup
      20: astore_1
      21: putfield      #64                 // Field entrySet:Lcom/google/common/collect/ConcurrentHashMultiset$EntrySet;
      24: aload_1
      25: areturn

  int distinctElements();
    Code:
       0: aload_0
       1: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
       4: invokeinterface #67,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.size:()I
       9: ireturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
       4: invokeinterface #10,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.isEmpty:()Z
       9: ireturn

  java.util.Iterator<com.google.common.collect.Multiset$Entry<E>> entryIterator();
    Code:
       0: new           #68                 // class com/google/common/collect/ConcurrentHashMultiset$2
       3: dup
       4: aload_0
       5: invokespecial #69                 // Method com/google/common/collect/ConcurrentHashMultiset$2."<init>":(Lcom/google/common/collect/ConcurrentHashMultiset;)V
       8: astore_1
       9: new           #70                 // class com/google/common/collect/ConcurrentHashMultiset$3
      12: dup
      13: aload_0
      14: aload_1
      15: invokespecial #71                 // Method com/google/common/collect/ConcurrentHashMultiset$3."<init>":(Lcom/google/common/collect/ConcurrentHashMultiset;Ljava/util/Iterator;)V
      18: areturn

  public void clear();
    Code:
       0: aload_0
       1: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
       4: invokeinterface #72,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.clear:()V
       9: return

  private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokevirtual #73                 // Method java/io/ObjectOutputStream.defaultWriteObject:()V
       4: aload_1
       5: aload_0
       6: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
       9: invokevirtual #74                 // Method java/io/ObjectOutputStream.writeObject:(Ljava/lang/Object;)V
      12: return

  private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException;
    Code:
       0: aload_1
       1: invokevirtual #75                 // Method java/io/ObjectInputStream.defaultReadObject:()V
       4: aload_1
       5: invokevirtual #76                 // Method java/io/ObjectInputStream.readObject:()Ljava/lang/Object;
       8: checkcast     #77                 // class java/util/concurrent/ConcurrentMap
      11: astore_2
      12: getstatic     #78                 // Field com/google/common/collect/ConcurrentHashMultiset$FieldSettersHolder.COUNT_MAP_FIELD_SETTER:Lcom/google/common/collect/Serialization$FieldSetter;
      15: aload_0
      16: aload_2
      17: invokevirtual #79                 // Method com/google/common/collect/Serialization$FieldSetter.set:(Ljava/lang/Object;Ljava/lang/Object;)V
      20: return

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokespecial #80                 // Method com/google/common/collect/AbstractMultiset.toString:()Ljava/lang/String;
       4: areturn

  public int hashCode();
    Code:
       0: aload_0
       1: invokespecial #81                 // Method com/google/common/collect/AbstractMultiset.hashCode:()I
       4: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #82                 // Method com/google/common/collect/AbstractMultiset.equals:(Ljava/lang/Object;)Z
       5: ireturn

  public java.util.Set elementSet();
    Code:
       0: aload_0
       1: invokespecial #83                 // Method com/google/common/collect/AbstractMultiset.elementSet:()Ljava/util/Set;
       4: areturn

  public boolean retainAll(java.util.Collection);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #84                 // Method com/google/common/collect/AbstractMultiset.retainAll:(Ljava/util/Collection;)Z
       5: ireturn

  public boolean removeAll(java.util.Collection);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #85                 // Method com/google/common/collect/AbstractMultiset.removeAll:(Ljava/util/Collection;)Z
       5: ireturn

  public boolean addAll(java.util.Collection);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #86                 // Method com/google/common/collect/AbstractMultiset.addAll:(Ljava/util/Collection;)Z
       5: ireturn

  public boolean remove(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #87                 // Method com/google/common/collect/AbstractMultiset.remove:(Ljava/lang/Object;)Z
       5: ireturn

  public boolean add(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #88                 // Method com/google/common/collect/AbstractMultiset.add:(Ljava/lang/Object;)Z
       5: ireturn

  public java.util.Iterator iterator();
    Code:
       0: aload_0
       1: invokespecial #89                 // Method com/google/common/collect/AbstractMultiset.iterator:()Ljava/util/Iterator;
       4: areturn

  public boolean contains(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #90                 // Method com/google/common/collect/AbstractMultiset.contains:(Ljava/lang/Object;)Z
       5: ireturn

  static java.util.concurrent.ConcurrentMap access$100(com.google.common.collect.ConcurrentHashMultiset);
    Code:
       0: aload_0
       1: getfield      #1                  // Field countMap:Ljava/util/concurrent/ConcurrentMap;
       4: areturn
}
