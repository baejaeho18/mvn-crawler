Compiled from "CycleDetectingLockFactory.java"
public class com.google.common.util.concurrent.CycleDetectingLockFactory {
  private static final java.util.Map<java.lang.Class<? extends java.lang.Enum>, java.util.Map<? extends java.lang.Enum, com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode>> lockGraphNodesPerType;

  private static final java.util.logging.Logger logger;

  final com.google.common.util.concurrent.CycleDetectingLockFactory$Policy policy;

  private static final java.lang.ThreadLocal<java.util.ArrayList<com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode>> acquiredLocks;

  public static com.google.common.util.concurrent.CycleDetectingLockFactory newInstance(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy);
    Code:
       0: new           #5                  // class com/google/common/util/concurrent/CycleDetectingLockFactory
       3: dup
       4: aload_0
       5: invokespecial #3                  // Method "<init>":(Lcom/google/common/util/concurrent/CycleDetectingLockFactory$Policy;)V
       8: areturn

  public java.util.concurrent.locks.ReentrantLock newReentrantLock(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: invokevirtual #6                  // Method newReentrantLock:(Ljava/lang/String;Z)Ljava/util/concurrent/locks/ReentrantLock;
       6: areturn

  public java.util.concurrent.locks.ReentrantLock newReentrantLock(java.lang.String, boolean);
    Code:
       0: aload_0
       1: getfield      #7                  // Field policy:Lcom/google/common/util/concurrent/CycleDetectingLockFactory$Policy;
       4: getstatic     #8                  // Field com/google/common/util/concurrent/CycleDetectingLockFactory$Policies.DISABLED:Lcom/google/common/util/concurrent/CycleDetectingLockFactory$Policies;
       7: if_acmpne     21
      10: new           #9                  // class java/util/concurrent/locks/ReentrantLock
      13: dup
      14: iload_2
      15: invokespecial #10                 // Method java/util/concurrent/locks/ReentrantLock."<init>":(Z)V
      18: goto          39
      21: new           #11                 // class com/google/common/util/concurrent/CycleDetectingLockFactory$CycleDetectingReentrantLock
      24: dup
      25: aload_0
      26: new           #12                 // class com/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode
      29: dup
      30: aload_1
      31: invokespecial #13                 // Method com/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode."<init>":(Ljava/lang/String;)V
      34: iload_2
      35: aconst_null
      36: invokespecial #14                 // Method com/google/common/util/concurrent/CycleDetectingLockFactory$CycleDetectingReentrantLock."<init>":(Lcom/google/common/util/concurrent/CycleDetectingLockFactory;Lcom/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode;ZLcom/google/common/util/concurrent/CycleDetectingLockFactory$1;)V
      39: areturn

  public java.util.concurrent.locks.ReentrantReadWriteLock newReentrantReadWriteLock(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: invokevirtual #15                 // Method newReentrantReadWriteLock:(Ljava/lang/String;Z)Ljava/util/concurrent/locks/ReentrantReadWriteLock;
       6: areturn

  public java.util.concurrent.locks.ReentrantReadWriteLock newReentrantReadWriteLock(java.lang.String, boolean);
    Code:
       0: aload_0
       1: getfield      #7                  // Field policy:Lcom/google/common/util/concurrent/CycleDetectingLockFactory$Policy;
       4: getstatic     #8                  // Field com/google/common/util/concurrent/CycleDetectingLockFactory$Policies.DISABLED:Lcom/google/common/util/concurrent/CycleDetectingLockFactory$Policies;
       7: if_acmpne     21
      10: new           #16                 // class java/util/concurrent/locks/ReentrantReadWriteLock
      13: dup
      14: iload_2
      15: invokespecial #17                 // Method java/util/concurrent/locks/ReentrantReadWriteLock."<init>":(Z)V
      18: goto          39
      21: new           #18                 // class com/google/common/util/concurrent/CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock
      24: dup
      25: aload_0
      26: new           #12                 // class com/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode
      29: dup
      30: aload_1
      31: invokespecial #13                 // Method com/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode."<init>":(Ljava/lang/String;)V
      34: iload_2
      35: aconst_null
      36: invokespecial #19                 // Method com/google/common/util/concurrent/CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock."<init>":(Lcom/google/common/util/concurrent/CycleDetectingLockFactory;Lcom/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode;ZLcom/google/common/util/concurrent/CycleDetectingLockFactory$1;)V
      39: areturn

  public static <E extends java.lang.Enum<E>> com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering<E> newInstanceWithExplicitOrdering(java.lang.Class<E>, com.google.common.util.concurrent.CycleDetectingLockFactory$Policy);
    Code:
       0: getstatic     #20                 // Field lockGraphNodesPerType:Ljava/util/Map;
       3: aload_0
       4: invokeinterface #21,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
       9: checkcast     #22                 // class java/util/Map
      12: astore_2
      13: new           #23                 // class com/google/common/util/concurrent/CycleDetectingLockFactory$WithExplicitOrdering
      16: dup
      17: aload_1
      18: aload_2
      19: invokespecial #24                 // Method com/google/common/util/concurrent/CycleDetectingLockFactory$WithExplicitOrdering."<init>":(Lcom/google/common/util/concurrent/CycleDetectingLockFactory$Policy;Ljava/util/Map;)V
      22: areturn

  private com.google.common.util.concurrent.CycleDetectingLockFactory(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy);
    Code:
       0: aload_0
       1: invokespecial #25                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #7                  // Field policy:Lcom/google/common/util/concurrent/CycleDetectingLockFactory$Policy;
       9: return

  private void aboutToAcquire(com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock);
    Code:
       0: aload_1
       1: invokeinterface #26,  1           // InterfaceMethod com/google/common/util/concurrent/CycleDetectingLockFactory$CycleDetectingLock.isAcquiredByCurrentThread:()Z
       6: ifne          41
       9: getstatic     #27                 // Field acquiredLocks:Ljava/lang/ThreadLocal;
      12: invokevirtual #28                 // Method java/lang/ThreadLocal.get:()Ljava/lang/Object;
      15: checkcast     #29                 // class java/util/ArrayList
      18: astore_2
      19: aload_1
      20: invokeinterface #30,  1           // InterfaceMethod com/google/common/util/concurrent/CycleDetectingLockFactory$CycleDetectingLock.getLockGraphNode:()Lcom/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode;
      25: astore_3
      26: aload_3
      27: aload_0
      28: getfield      #7                  // Field policy:Lcom/google/common/util/concurrent/CycleDetectingLockFactory$Policy;
      31: aload_2
      32: invokevirtual #31                 // Method com/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode.checkAcquiredLocks:(Lcom/google/common/util/concurrent/CycleDetectingLockFactory$Policy;Ljava/util/List;)V
      35: aload_2
      36: aload_3
      37: invokevirtual #32                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
      40: pop
      41: return

  private void lockStateChanged(com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock);
    Code:
       0: aload_1
       1: invokeinterface #26,  1           // InterfaceMethod com/google/common/util/concurrent/CycleDetectingLockFactory$CycleDetectingLock.isAcquiredByCurrentThread:()Z
       6: ifne          65
       9: getstatic     #27                 // Field acquiredLocks:Ljava/lang/ThreadLocal;
      12: invokevirtual #28                 // Method java/lang/ThreadLocal.get:()Ljava/lang/Object;
      15: checkcast     #29                 // class java/util/ArrayList
      18: astore_2
      19: aload_1
      20: invokeinterface #30,  1           // InterfaceMethod com/google/common/util/concurrent/CycleDetectingLockFactory$CycleDetectingLock.getLockGraphNode:()Lcom/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode;
      25: astore_3
      26: aload_2
      27: invokevirtual #33                 // Method java/util/ArrayList.size:()I
      30: iconst_1
      31: isub
      32: istore        4
      34: iload         4
      36: iflt          65
      39: aload_2
      40: iload         4
      42: invokevirtual #34                 // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
      45: aload_3
      46: if_acmpne     59
      49: aload_2
      50: iload         4
      52: invokevirtual #35                 // Method java/util/ArrayList.remove:(I)Ljava/lang/Object;
      55: pop
      56: goto          65
      59: iinc          4, -1
      62: goto          34
      65: return

  static java.util.logging.Logger access$100();
    Code:
       0: getstatic     #4                  // Field logger:Ljava/util/logging/Logger;
       3: areturn

  com.google.common.util.concurrent.CycleDetectingLockFactory(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy, com.google.common.util.concurrent.CycleDetectingLockFactory$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #3                  // Method "<init>":(Lcom/google/common/util/concurrent/CycleDetectingLockFactory$Policy;)V
       5: return

  static void access$600(com.google.common.util.concurrent.CycleDetectingLockFactory, com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #2                  // Method aboutToAcquire:(Lcom/google/common/util/concurrent/CycleDetectingLockFactory$CycleDetectingLock;)V
       5: return

  static void access$700(com.google.common.util.concurrent.CycleDetectingLockFactory, com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method lockStateChanged:(Lcom/google/common/util/concurrent/CycleDetectingLockFactory$CycleDetectingLock;)V
       5: return

  static {};
    Code:
       0: new           #36                 // class com/google/common/collect/MapMaker
       3: dup
       4: invokespecial #37                 // Method com/google/common/collect/MapMaker."<init>":()V
       7: invokevirtual #38                 // Method com/google/common/collect/MapMaker.weakKeys:()Lcom/google/common/collect/MapMaker;
      10: new           #39                 // class com/google/common/util/concurrent/CycleDetectingLockFactory$OrderedLockGraphNodesCreator
      13: dup
      14: invokespecial #40                 // Method com/google/common/util/concurrent/CycleDetectingLockFactory$OrderedLockGraphNodesCreator."<init>":()V
      17: invokevirtual #41                 // Method com/google/common/collect/MapMaker.makeComputingMap:(Lcom/google/common/base/Function;)Ljava/util/concurrent/ConcurrentMap;
      20: putstatic     #20                 // Field lockGraphNodesPerType:Ljava/util/Map;
      23: ldc_w         #5                  // class com/google/common/util/concurrent/CycleDetectingLockFactory
      26: invokevirtual #42                 // Method java/lang/Class.getName:()Ljava/lang/String;
      29: invokestatic  #43                 // Method java/util/logging/Logger.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;
      32: putstatic     #4                  // Field logger:Ljava/util/logging/Logger;
      35: new           #44                 // class com/google/common/util/concurrent/CycleDetectingLockFactory$1
      38: dup
      39: invokespecial #45                 // Method com/google/common/util/concurrent/CycleDetectingLockFactory$1."<init>":()V
      42: putstatic     #27                 // Field acquiredLocks:Ljava/lang/ThreadLocal;
      45: return
}
