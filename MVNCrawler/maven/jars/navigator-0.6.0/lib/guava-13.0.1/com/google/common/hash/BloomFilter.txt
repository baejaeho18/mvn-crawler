Compiled from "BloomFilter.java"
public final class com.google.common.hash.BloomFilter<T> implements java.io.Serializable {
  private final com.google.common.hash.BloomFilterStrategies$BitArray bits;

  private final int numHashFunctions;

  private final com.google.common.hash.Funnel<T> funnel;

  private final com.google.common.hash.BloomFilter$Strategy strategy;

  private static final double LN2;

  private static final double LN2_SQUARED;

  private com.google.common.hash.BloomFilter(com.google.common.hash.BloomFilterStrategies$BitArray, int, com.google.common.hash.Funnel<T>, com.google.common.hash.BloomFilter$Strategy);
    Code:
       0: aload_0
       1: invokespecial #6                  // Method java/lang/Object."<init>":()V
       4: iload_2
       5: ifle          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ldc           #7                  // String numHashFunctions zero or negative
      15: invokestatic  #8                  // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/Object;)V
      18: aload_0
      19: aload_1
      20: invokestatic  #9                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
      23: checkcast     #10                 // class com/google/common/hash/BloomFilterStrategies$BitArray
      26: putfield      #5                  // Field bits:Lcom/google/common/hash/BloomFilterStrategies$BitArray;
      29: aload_0
      30: iload_2
      31: putfield      #4                  // Field numHashFunctions:I
      34: aload_0
      35: aload_3
      36: invokestatic  #9                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
      39: checkcast     #11                 // class com/google/common/hash/Funnel
      42: putfield      #3                  // Field funnel:Lcom/google/common/hash/Funnel;
      45: aload_0
      46: aload         4
      48: putfield      #2                  // Field strategy:Lcom/google/common/hash/BloomFilter$Strategy;
      51: iload_2
      52: sipush        255
      55: if_icmple     68
      58: new           #12                 // class java/lang/AssertionError
      61: dup
      62: ldc           #13                 // String Currently we don\'t allow BloomFilters that would use more than255 hash functions, please contact the guava team
      64: invokespecial #14                 // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
      67: athrow
      68: return

  public com.google.common.hash.BloomFilter<T> copy();
    Code:
       0: new           #15                 // class com/google/common/hash/BloomFilter
       3: dup
       4: aload_0
       5: getfield      #5                  // Field bits:Lcom/google/common/hash/BloomFilterStrategies$BitArray;
       8: invokevirtual #16                 // Method com/google/common/hash/BloomFilterStrategies$BitArray.copy:()Lcom/google/common/hash/BloomFilterStrategies$BitArray;
      11: aload_0
      12: getfield      #4                  // Field numHashFunctions:I
      15: aload_0
      16: getfield      #3                  // Field funnel:Lcom/google/common/hash/Funnel;
      19: aload_0
      20: getfield      #2                  // Field strategy:Lcom/google/common/hash/BloomFilter$Strategy;
      23: invokespecial #1                  // Method "<init>":(Lcom/google/common/hash/BloomFilterStrategies$BitArray;ILcom/google/common/hash/Funnel;Lcom/google/common/hash/BloomFilter$Strategy;)V
      26: areturn

  public boolean mightContain(T);
    Code:
       0: aload_0
       1: getfield      #2                  // Field strategy:Lcom/google/common/hash/BloomFilter$Strategy;
       4: aload_1
       5: aload_0
       6: getfield      #3                  // Field funnel:Lcom/google/common/hash/Funnel;
       9: aload_0
      10: getfield      #4                  // Field numHashFunctions:I
      13: aload_0
      14: getfield      #5                  // Field bits:Lcom/google/common/hash/BloomFilterStrategies$BitArray;
      17: invokeinterface #17,  5           // InterfaceMethod com/google/common/hash/BloomFilter$Strategy.mightContain:(Ljava/lang/Object;Lcom/google/common/hash/Funnel;ILcom/google/common/hash/BloomFilterStrategies$BitArray;)Z
      22: ireturn

  public boolean put(T);
    Code:
       0: aload_0
       1: getfield      #2                  // Field strategy:Lcom/google/common/hash/BloomFilter$Strategy;
       4: aload_1
       5: aload_0
       6: getfield      #3                  // Field funnel:Lcom/google/common/hash/Funnel;
       9: aload_0
      10: getfield      #4                  // Field numHashFunctions:I
      13: aload_0
      14: getfield      #5                  // Field bits:Lcom/google/common/hash/BloomFilterStrategies$BitArray;
      17: invokeinterface #18,  5           // InterfaceMethod com/google/common/hash/BloomFilter$Strategy.put:(Ljava/lang/Object;Lcom/google/common/hash/Funnel;ILcom/google/common/hash/BloomFilterStrategies$BitArray;)Z
      22: ireturn

  public double expectedFalsePositiveProbability();
    Code:
       0: aload_0
       1: getfield      #5                  // Field bits:Lcom/google/common/hash/BloomFilterStrategies$BitArray;
       4: invokevirtual #19                 // Method com/google/common/hash/BloomFilterStrategies$BitArray.bitCount:()I
       7: i2d
       8: aload_0
       9: getfield      #5                  // Field bits:Lcom/google/common/hash/BloomFilterStrategies$BitArray;
      12: invokevirtual #20                 // Method com/google/common/hash/BloomFilterStrategies$BitArray.size:()I
      15: i2d
      16: ddiv
      17: aload_0
      18: getfield      #4                  // Field numHashFunctions:I
      21: i2d
      22: invokestatic  #21                 // Method java/lang/Math.pow:(DD)D
      25: dreturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #15                 // class com/google/common/hash/BloomFilter
       4: ifeq          65
       7: aload_1
       8: checkcast     #15                 // class com/google/common/hash/BloomFilter
      11: astore_2
      12: aload_0
      13: getfield      #4                  // Field numHashFunctions:I
      16: aload_2
      17: getfield      #4                  // Field numHashFunctions:I
      20: if_icmpne     63
      23: aload_0
      24: getfield      #5                  // Field bits:Lcom/google/common/hash/BloomFilterStrategies$BitArray;
      27: aload_2
      28: getfield      #5                  // Field bits:Lcom/google/common/hash/BloomFilterStrategies$BitArray;
      31: invokevirtual #22                 // Method com/google/common/hash/BloomFilterStrategies$BitArray.equals:(Ljava/lang/Object;)Z
      34: ifeq          63
      37: aload_0
      38: getfield      #3                  // Field funnel:Lcom/google/common/hash/Funnel;
      41: aload_2
      42: getfield      #3                  // Field funnel:Lcom/google/common/hash/Funnel;
      45: if_acmpne     63
      48: aload_0
      49: getfield      #2                  // Field strategy:Lcom/google/common/hash/BloomFilter$Strategy;
      52: aload_2
      53: getfield      #2                  // Field strategy:Lcom/google/common/hash/BloomFilter$Strategy;
      56: if_acmpne     63
      59: iconst_1
      60: goto          64
      63: iconst_0
      64: ireturn
      65: iconst_0
      66: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #5                  // Field bits:Lcom/google/common/hash/BloomFilterStrategies$BitArray;
       4: invokevirtual #23                 // Method com/google/common/hash/BloomFilterStrategies$BitArray.hashCode:()I
       7: ireturn

  int getHashCount();
    Code:
       0: aload_0
       1: getfield      #4                  // Field numHashFunctions:I
       4: ireturn

  public static <T> com.google.common.hash.BloomFilter<T> create(com.google.common.hash.Funnel<T>, int, double);
    Code:
       0: aload_0
       1: invokestatic  #9                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: iload_1
       6: iflt          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ldc           #24                 // String Expected insertions cannot be negative
      16: invokestatic  #8                  // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/Object;)V
      19: dload_2
      20: dconst_0
      21: dcmpl
      22: ifle          29
      25: iconst_1
      26: goto          30
      29: iconst_0
      30: dload_2
      31: dconst_1
      32: dcmpg
      33: ifge          40
      36: iconst_1
      37: goto          41
      40: iconst_0
      41: iand
      42: ldc           #25                 // String False positive probability in (0.0, 1.0)
      44: invokestatic  #8                  // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/Object;)V
      47: iload_1
      48: ifne          53
      51: iconst_1
      52: istore_1
      53: iload_1
      54: dload_2
      55: invokestatic  #26                 // Method optimalNumOfBits:(ID)I
      58: istore        4
      60: iload_1
      61: iload         4
      63: invokestatic  #27                 // Method optimalNumOfHashFunctions:(II)I
      66: istore        5
      68: new           #15                 // class com/google/common/hash/BloomFilter
      71: dup
      72: new           #10                 // class com/google/common/hash/BloomFilterStrategies$BitArray
      75: dup
      76: iload         4
      78: invokespecial #28                 // Method com/google/common/hash/BloomFilterStrategies$BitArray."<init>":(I)V
      81: iload         5
      83: aload_0
      84: getstatic     #29                 // Field com/google/common/hash/BloomFilterStrategies.MURMUR128_MITZ_32:Lcom/google/common/hash/BloomFilterStrategies;
      87: invokespecial #1                  // Method "<init>":(Lcom/google/common/hash/BloomFilterStrategies$BitArray;ILcom/google/common/hash/Funnel;Lcom/google/common/hash/BloomFilter$Strategy;)V
      90: areturn

  public static <T> com.google.common.hash.BloomFilter<T> create(com.google.common.hash.Funnel<T>, int);
    Code:
       0: aload_0
       1: iload_1
       2: ldc2_w        #30                 // double 0.03d
       5: invokestatic  #32                 // Method create:(Lcom/google/common/hash/Funnel;ID)Lcom/google/common/hash/BloomFilter;
       8: areturn

  static int optimalNumOfHashFunctions(int, int);
    Code:
       0: iconst_1
       1: iload_1
       2: iload_0
       3: idiv
       4: i2d
       5: getstatic     #33                 // Field LN2:D
       8: dmul
       9: invokestatic  #34                 // Method java/lang/Math.round:(D)J
      12: l2i
      13: invokestatic  #35                 // Method java/lang/Math.max:(II)I
      16: ireturn

  static int optimalNumOfBits(int, double);
    Code:
       0: iload_0
       1: ineg
       2: i2d
       3: dload_1
       4: invokestatic  #36                 // Method java/lang/Math.log:(D)D
       7: dmul
       8: getstatic     #37                 // Field LN2_SQUARED:D
      11: ddiv
      12: d2i
      13: ireturn

  private java.lang.Object writeReplace();
    Code:
       0: new           #38                 // class com/google/common/hash/BloomFilter$SerialForm
       3: dup
       4: aload_0
       5: invokespecial #39                 // Method com/google/common/hash/BloomFilter$SerialForm."<init>":(Lcom/google/common/hash/BloomFilter;)V
       8: areturn

  static com.google.common.hash.BloomFilterStrategies$BitArray access$000(com.google.common.hash.BloomFilter);
    Code:
       0: aload_0
       1: getfield      #5                  // Field bits:Lcom/google/common/hash/BloomFilterStrategies$BitArray;
       4: areturn

  static int access$100(com.google.common.hash.BloomFilter);
    Code:
       0: aload_0
       1: getfield      #4                  // Field numHashFunctions:I
       4: ireturn

  static com.google.common.hash.Funnel access$200(com.google.common.hash.BloomFilter);
    Code:
       0: aload_0
       1: getfield      #3                  // Field funnel:Lcom/google/common/hash/Funnel;
       4: areturn

  static com.google.common.hash.BloomFilter$Strategy access$300(com.google.common.hash.BloomFilter);
    Code:
       0: aload_0
       1: getfield      #2                  // Field strategy:Lcom/google/common/hash/BloomFilter$Strategy;
       4: areturn

  com.google.common.hash.BloomFilter(com.google.common.hash.BloomFilterStrategies$BitArray, int, com.google.common.hash.Funnel, com.google.common.hash.BloomFilter$Strategy, com.google.common.hash.BloomFilter$1);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: aload_3
       4: aload         4
       6: invokespecial #1                  // Method "<init>":(Lcom/google/common/hash/BloomFilterStrategies$BitArray;ILcom/google/common/hash/Funnel;Lcom/google/common/hash/BloomFilter$Strategy;)V
       9: return

  static {};
    Code:
       0: ldc2_w        #40                 // double 2.0d
       3: invokestatic  #36                 // Method java/lang/Math.log:(D)D
       6: putstatic     #33                 // Field LN2:D
       9: getstatic     #33                 // Field LN2:D
      12: getstatic     #33                 // Field LN2:D
      15: dmul
      16: putstatic     #37                 // Field LN2_SQUARED:D
      19: return
}
