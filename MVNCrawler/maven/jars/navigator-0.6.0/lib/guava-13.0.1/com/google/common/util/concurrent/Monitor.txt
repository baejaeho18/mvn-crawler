Compiled from "Monitor.java"
public final class com.google.common.util.concurrent.Monitor {
  private final boolean fair;

  private final java.util.concurrent.locks.ReentrantLock lock;

  private final java.util.ArrayList<com.google.common.util.concurrent.Monitor$Guard> activeGuards;

  public com.google.common.util.concurrent.Monitor();
    Code:
       0: aload_0
       1: iconst_0
       2: invokespecial #2                  // Method "<init>":(Z)V
       5: return

  public com.google.common.util.concurrent.Monitor(boolean);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_1
       6: invokestatic  #4                  // Method com/google/common/collect/Lists.newArrayListWithCapacity:(I)Ljava/util/ArrayList;
       9: putfield      #5                  // Field activeGuards:Ljava/util/ArrayList;
      12: aload_0
      13: iload_1
      14: putfield      #6                  // Field fair:Z
      17: aload_0
      18: new           #7                  // class java/util/concurrent/locks/ReentrantLock
      21: dup
      22: iload_1
      23: invokespecial #8                  // Method java/util/concurrent/locks/ReentrantLock."<init>":(Z)V
      26: putfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      29: return

  public void enter();
    Code:
       0: aload_0
       1: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #9                  // Method java/util/concurrent/locks/ReentrantLock.lock:()V
       7: return

  public void enterInterruptibly() throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #10                 // Method java/util/concurrent/locks/ReentrantLock.lockInterruptibly:()V
       7: return

  public boolean enter(long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: astore        4
       6: aload_0
       7: getfield      #6                  // Field fair:Z
      10: ifne          23
      13: aload         4
      15: invokevirtual #11                 // Method java/util/concurrent/locks/ReentrantLock.tryLock:()Z
      18: ifeq          23
      21: iconst_1
      22: ireturn
      23: invokestatic  #12                 // Method java/lang/System.nanoTime:()J
      26: lstore        5
      28: aload_3
      29: lload_1
      30: invokevirtual #13                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      33: lstore        7
      35: lload         7
      37: lstore        9
      39: iconst_0
      40: istore        11
      42: aload         4
      44: lload         9
      46: getstatic     #14                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      49: invokevirtual #15                 // Method java/util/concurrent/locks/ReentrantLock.tryLock:(JLjava/util/concurrent/TimeUnit;)Z
      52: istore        12
      54: iload         11
      56: ifeq          65
      59: invokestatic  #16                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      62: invokevirtual #17                 // Method java/lang/Thread.interrupt:()V
      65: iload         12
      67: ireturn
      68: astore        12
      70: iconst_1
      71: istore        11
      73: lload         7
      75: invokestatic  #12                 // Method java/lang/System.nanoTime:()J
      78: lload         5
      80: lsub
      81: lsub
      82: lstore        9
      84: goto          42
      87: astore        13
      89: iload         11
      91: ifeq          100
      94: invokestatic  #16                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      97: invokevirtual #17                 // Method java/lang/Thread.interrupt:()V
     100: aload         13
     102: athrow
    Exception table:
       from    to  target type
          42    54    68   Class java/lang/InterruptedException
          42    54    87   any
          68    89    87   any

  public boolean enterInterruptibly(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: lload_1
       5: aload_3
       6: invokevirtual #15                 // Method java/util/concurrent/locks/ReentrantLock.tryLock:(JLjava/util/concurrent/TimeUnit;)Z
       9: ireturn

  public boolean tryEnter();
    Code:
       0: aload_0
       1: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #11                 // Method java/util/concurrent/locks/ReentrantLock.tryLock:()Z
       7: ireturn

  public void enterWhen(com.google.common.util.concurrent.Monitor$Guard) throws java.lang.InterruptedException;
    Code:
       0: aload_1
       1: getfield      #19                 // Field com/google/common/util/concurrent/Monitor$Guard.monitor:Lcom/google/common/util/concurrent/Monitor;
       4: aload_0
       5: if_acmpeq     16
       8: new           #20                 // class java/lang/IllegalMonitorStateException
      11: dup
      12: invokespecial #21                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      20: astore_2
      21: aload_2
      22: invokevirtual #22                 // Method java/util/concurrent/locks/ReentrantLock.isHeldByCurrentThread:()Z
      25: istore_3
      26: iconst_0
      27: istore        4
      29: aload_2
      30: invokevirtual #10                 // Method java/util/concurrent/locks/ReentrantLock.lockInterruptibly:()V
      33: aload_0
      34: aload_1
      35: iload_3
      36: invokespecial #23                 // Method waitInterruptibly:(Lcom/google/common/util/concurrent/Monitor$Guard;Z)V
      39: iconst_1
      40: istore        4
      42: iload         4
      44: ifne          68
      47: aload_2
      48: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      51: goto          68
      54: astore        5
      56: iload         4
      58: ifne          65
      61: aload_2
      62: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      65: aload         5
      67: athrow
      68: return
    Exception table:
       from    to  target type
          33    42    54   any
          54    56    54   any

  public void enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor$Guard);
    Code:
       0: aload_1
       1: getfield      #19                 // Field com/google/common/util/concurrent/Monitor$Guard.monitor:Lcom/google/common/util/concurrent/Monitor;
       4: aload_0
       5: if_acmpeq     16
       8: new           #20                 // class java/lang/IllegalMonitorStateException
      11: dup
      12: invokespecial #21                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      20: astore_2
      21: aload_2
      22: invokevirtual #22                 // Method java/util/concurrent/locks/ReentrantLock.isHeldByCurrentThread:()Z
      25: istore_3
      26: iconst_0
      27: istore        4
      29: aload_2
      30: invokevirtual #9                  // Method java/util/concurrent/locks/ReentrantLock.lock:()V
      33: aload_0
      34: aload_1
      35: iload_3
      36: invokespecial #25                 // Method waitUninterruptibly:(Lcom/google/common/util/concurrent/Monitor$Guard;Z)V
      39: iconst_1
      40: istore        4
      42: iload         4
      44: ifne          68
      47: aload_2
      48: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      51: goto          68
      54: astore        5
      56: iload         4
      58: ifne          65
      61: aload_2
      62: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      65: aload         5
      67: athrow
      68: return
    Exception table:
       from    to  target type
          33    42    54   any
          54    56    54   any

  public boolean enterWhen(com.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
    Code:
       0: aload_1
       1: getfield      #19                 // Field com/google/common/util/concurrent/Monitor$Guard.monitor:Lcom/google/common/util/concurrent/Monitor;
       4: aload_0
       5: if_acmpeq     16
       8: new           #20                 // class java/lang/IllegalMonitorStateException
      11: dup
      12: invokespecial #21                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      20: astore        5
      22: aload         5
      24: invokevirtual #22                 // Method java/util/concurrent/locks/ReentrantLock.isHeldByCurrentThread:()Z
      27: istore        6
      29: aload_0
      30: getfield      #6                  // Field fair:Z
      33: ifne          55
      36: aload         5
      38: invokevirtual #11                 // Method java/util/concurrent/locks/ReentrantLock.tryLock:()Z
      41: ifeq          55
      44: aload         4
      46: lload_2
      47: invokevirtual #13                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      50: lstore        7
      52: goto          88
      55: invokestatic  #12                 // Method java/lang/System.nanoTime:()J
      58: lstore        9
      60: aload         5
      62: lload_2
      63: aload         4
      65: invokevirtual #15                 // Method java/util/concurrent/locks/ReentrantLock.tryLock:(JLjava/util/concurrent/TimeUnit;)Z
      68: ifne          73
      71: iconst_0
      72: ireturn
      73: aload         4
      75: lload_2
      76: invokevirtual #13                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      79: invokestatic  #12                 // Method java/lang/System.nanoTime:()J
      82: lload         9
      84: lsub
      85: lsub
      86: lstore        7
      88: iconst_0
      89: istore        9
      91: aload_0
      92: aload_1
      93: lload         7
      95: iload         6
      97: invokespecial #26                 // Method waitInterruptibly:(Lcom/google/common/util/concurrent/Monitor$Guard;JZ)Z
     100: istore        9
     102: iload         9
     104: ifne          130
     107: aload         5
     109: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
     112: goto          130
     115: astore        11
     117: iload         9
     119: ifne          127
     122: aload         5
     124: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
     127: aload         11
     129: athrow
     130: iload         9
     132: ireturn
    Exception table:
       from    to  target type
          91   102   115   any
         115   117   115   any

  public boolean enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_1
       1: getfield      #19                 // Field com/google/common/util/concurrent/Monitor$Guard.monitor:Lcom/google/common/util/concurrent/Monitor;
       4: aload_0
       5: if_acmpeq     16
       8: new           #20                 // class java/lang/IllegalMonitorStateException
      11: dup
      12: invokespecial #21                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      20: astore        5
      22: aload         5
      24: invokevirtual #22                 // Method java/util/concurrent/locks/ReentrantLock.isHeldByCurrentThread:()Z
      27: istore        6
      29: iconst_0
      30: istore        7
      32: aload_0
      33: getfield      #6                  // Field fair:Z
      36: ifne          58
      39: aload         5
      41: invokevirtual #11                 // Method java/util/concurrent/locks/ReentrantLock.tryLock:()Z
      44: ifeq          58
      47: aload         4
      49: lload_2
      50: invokevirtual #13                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      53: lstore        8
      55: goto          168
      58: invokestatic  #12                 // Method java/lang/System.nanoTime:()J
      61: lstore        10
      63: aload         4
      65: lload_2
      66: invokevirtual #13                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      69: lstore        12
      71: lload         12
      73: lstore        8
      75: aload         5
      77: lload         8
      79: getstatic     #14                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      82: invokevirtual #15                 // Method java/util/concurrent/locks/ReentrantLock.tryLock:(JLjava/util/concurrent/TimeUnit;)Z
      85: ifeq          102
      88: lload         12
      90: invokestatic  #12                 // Method java/lang/System.nanoTime:()J
      93: lload         10
      95: lsub
      96: lsub
      97: lstore        8
      99: goto          168
     102: iconst_0
     103: istore        14
     105: lload         12
     107: invokestatic  #12                 // Method java/lang/System.nanoTime:()J
     110: lload         10
     112: lsub
     113: lsub
     114: lstore        8
     116: iload         7
     118: ifeq          127
     121: invokestatic  #16                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
     124: invokevirtual #17                 // Method java/lang/Thread.interrupt:()V
     127: iload         14
     129: ireturn
     130: astore        14
     132: iconst_1
     133: istore        7
     135: lload         12
     137: invokestatic  #12                 // Method java/lang/System.nanoTime:()J
     140: lload         10
     142: lsub
     143: lsub
     144: lstore        8
     146: goto          165
     149: astore        15
     151: lload         12
     153: invokestatic  #12                 // Method java/lang/System.nanoTime:()J
     156: lload         10
     158: lsub
     159: lsub
     160: lstore        8
     162: aload         15
     164: athrow
     165: goto          75
     168: iconst_0
     169: istore        10
     171: aload_0
     172: aload_1
     173: lload         8
     175: iload         6
     177: invokespecial #27                 // Method waitUninterruptibly:(Lcom/google/common/util/concurrent/Monitor$Guard;JZ)Z
     180: istore        10
     182: iload         10
     184: ifne          210
     187: aload         5
     189: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
     192: goto          210
     195: astore        16
     197: iload         10
     199: ifne          207
     202: aload         5
     204: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
     207: aload         16
     209: athrow
     210: iload         10
     212: istore        11
     214: iload         7
     216: ifeq          225
     219: invokestatic  #16                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
     222: invokevirtual #17                 // Method java/lang/Thread.interrupt:()V
     225: iload         11
     227: ireturn
     228: astore        17
     230: iload         7
     232: ifeq          241
     235: invokestatic  #16                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
     238: invokevirtual #17                 // Method java/lang/Thread.interrupt:()V
     241: aload         17
     243: athrow
    Exception table:
       from    to  target type
          75    88   130   Class java/lang/InterruptedException
         102   105   130   Class java/lang/InterruptedException
          75    88   149   any
         102   105   149   any
         130   135   149   any
         149   151   149   any
         171   182   195   any
         195   197   195   any
          32   116   228   any
         130   214   228   any
         228   230   228   any

  public boolean enterIf(com.google.common.util.concurrent.Monitor$Guard);
    Code:
       0: aload_1
       1: getfield      #19                 // Field com/google/common/util/concurrent/Monitor$Guard.monitor:Lcom/google/common/util/concurrent/Monitor;
       4: aload_0
       5: if_acmpeq     16
       8: new           #20                 // class java/lang/IllegalMonitorStateException
      11: dup
      12: invokespecial #21                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      20: astore_2
      21: aload_2
      22: invokevirtual #9                  // Method java/util/concurrent/locks/ReentrantLock.lock:()V
      25: iconst_0
      26: istore_3
      27: aload_1
      28: invokevirtual #28                 // Method com/google/common/util/concurrent/Monitor$Guard.isSatisfied:()Z
      31: istore_3
      32: iload_3
      33: ifne          56
      36: aload_2
      37: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      40: goto          56
      43: astore        4
      45: iload_3
      46: ifne          53
      49: aload_2
      50: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      53: aload         4
      55: athrow
      56: iload_3
      57: ireturn
    Exception table:
       from    to  target type
          27    32    43   any
          43    45    43   any

  public boolean enterIfInterruptibly(com.google.common.util.concurrent.Monitor$Guard) throws java.lang.InterruptedException;
    Code:
       0: aload_1
       1: getfield      #19                 // Field com/google/common/util/concurrent/Monitor$Guard.monitor:Lcom/google/common/util/concurrent/Monitor;
       4: aload_0
       5: if_acmpeq     16
       8: new           #20                 // class java/lang/IllegalMonitorStateException
      11: dup
      12: invokespecial #21                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      20: astore_2
      21: aload_2
      22: invokevirtual #10                 // Method java/util/concurrent/locks/ReentrantLock.lockInterruptibly:()V
      25: iconst_0
      26: istore_3
      27: aload_1
      28: invokevirtual #28                 // Method com/google/common/util/concurrent/Monitor$Guard.isSatisfied:()Z
      31: istore_3
      32: iload_3
      33: ifne          56
      36: aload_2
      37: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      40: goto          56
      43: astore        4
      45: iload_3
      46: ifne          53
      49: aload_2
      50: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      53: aload         4
      55: athrow
      56: iload_3
      57: ireturn
    Exception table:
       from    to  target type
          27    32    43   any
          43    45    43   any

  public boolean enterIf(com.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_1
       1: getfield      #19                 // Field com/google/common/util/concurrent/Monitor$Guard.monitor:Lcom/google/common/util/concurrent/Monitor;
       4: aload_0
       5: if_acmpeq     16
       8: new           #20                 // class java/lang/IllegalMonitorStateException
      11: dup
      12: invokespecial #21                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      20: astore        5
      22: aload_0
      23: lload_2
      24: aload         4
      26: invokevirtual #29                 // Method enter:(JLjava/util/concurrent/TimeUnit;)Z
      29: ifne          34
      32: iconst_0
      33: ireturn
      34: iconst_0
      35: istore        6
      37: aload_1
      38: invokevirtual #28                 // Method com/google/common/util/concurrent/Monitor$Guard.isSatisfied:()Z
      41: istore        6
      43: iload         6
      45: ifne          71
      48: aload         5
      50: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      53: goto          71
      56: astore        7
      58: iload         6
      60: ifne          68
      63: aload         5
      65: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      68: aload         7
      70: athrow
      71: iload         6
      73: ireturn
    Exception table:
       from    to  target type
          37    43    56   any
          56    58    56   any

  public boolean enterIfInterruptibly(com.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
    Code:
       0: aload_1
       1: getfield      #19                 // Field com/google/common/util/concurrent/Monitor$Guard.monitor:Lcom/google/common/util/concurrent/Monitor;
       4: aload_0
       5: if_acmpeq     16
       8: new           #20                 // class java/lang/IllegalMonitorStateException
      11: dup
      12: invokespecial #21                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      20: astore        5
      22: aload         5
      24: lload_2
      25: aload         4
      27: invokevirtual #15                 // Method java/util/concurrent/locks/ReentrantLock.tryLock:(JLjava/util/concurrent/TimeUnit;)Z
      30: ifne          35
      33: iconst_0
      34: ireturn
      35: iconst_0
      36: istore        6
      38: aload_1
      39: invokevirtual #28                 // Method com/google/common/util/concurrent/Monitor$Guard.isSatisfied:()Z
      42: istore        6
      44: iload         6
      46: ifne          72
      49: aload         5
      51: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      54: goto          72
      57: astore        7
      59: iload         6
      61: ifne          69
      64: aload         5
      66: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      69: aload         7
      71: athrow
      72: iload         6
      74: ireturn
    Exception table:
       from    to  target type
          38    44    57   any
          57    59    57   any

  public boolean tryEnterIf(com.google.common.util.concurrent.Monitor$Guard);
    Code:
       0: aload_1
       1: getfield      #19                 // Field com/google/common/util/concurrent/Monitor$Guard.monitor:Lcom/google/common/util/concurrent/Monitor;
       4: aload_0
       5: if_acmpeq     16
       8: new           #20                 // class java/lang/IllegalMonitorStateException
      11: dup
      12: invokespecial #21                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      20: astore_2
      21: aload_2
      22: invokevirtual #11                 // Method java/util/concurrent/locks/ReentrantLock.tryLock:()Z
      25: ifne          30
      28: iconst_0
      29: ireturn
      30: iconst_0
      31: istore_3
      32: aload_1
      33: invokevirtual #28                 // Method com/google/common/util/concurrent/Monitor$Guard.isSatisfied:()Z
      36: istore_3
      37: iload_3
      38: ifne          61
      41: aload_2
      42: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      45: goto          61
      48: astore        4
      50: iload_3
      51: ifne          58
      54: aload_2
      55: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      58: aload         4
      60: athrow
      61: iload_3
      62: ireturn
    Exception table:
       from    to  target type
          32    37    48   any
          48    50    48   any

  public void waitFor(com.google.common.util.concurrent.Monitor$Guard) throws java.lang.InterruptedException;
    Code:
       0: aload_1
       1: getfield      #19                 // Field com/google/common/util/concurrent/Monitor$Guard.monitor:Lcom/google/common/util/concurrent/Monitor;
       4: aload_0
       5: if_acmpeq     16
       8: new           #20                 // class java/lang/IllegalMonitorStateException
      11: dup
      12: invokespecial #21                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      20: invokevirtual #22                 // Method java/util/concurrent/locks/ReentrantLock.isHeldByCurrentThread:()Z
      23: ifne          34
      26: new           #20                 // class java/lang/IllegalMonitorStateException
      29: dup
      30: invokespecial #21                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      33: athrow
      34: aload_0
      35: aload_1
      36: iconst_1
      37: invokespecial #23                 // Method waitInterruptibly:(Lcom/google/common/util/concurrent/Monitor$Guard;Z)V
      40: return

  public void waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard);
    Code:
       0: aload_1
       1: getfield      #19                 // Field com/google/common/util/concurrent/Monitor$Guard.monitor:Lcom/google/common/util/concurrent/Monitor;
       4: aload_0
       5: if_acmpeq     16
       8: new           #20                 // class java/lang/IllegalMonitorStateException
      11: dup
      12: invokespecial #21                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      20: invokevirtual #22                 // Method java/util/concurrent/locks/ReentrantLock.isHeldByCurrentThread:()Z
      23: ifne          34
      26: new           #20                 // class java/lang/IllegalMonitorStateException
      29: dup
      30: invokespecial #21                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      33: athrow
      34: aload_0
      35: aload_1
      36: iconst_1
      37: invokespecial #25                 // Method waitUninterruptibly:(Lcom/google/common/util/concurrent/Monitor$Guard;Z)V
      40: return

  public boolean waitFor(com.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
    Code:
       0: aload_1
       1: getfield      #19                 // Field com/google/common/util/concurrent/Monitor$Guard.monitor:Lcom/google/common/util/concurrent/Monitor;
       4: aload_0
       5: if_acmpeq     16
       8: new           #20                 // class java/lang/IllegalMonitorStateException
      11: dup
      12: invokespecial #21                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      20: invokevirtual #22                 // Method java/util/concurrent/locks/ReentrantLock.isHeldByCurrentThread:()Z
      23: ifne          34
      26: new           #20                 // class java/lang/IllegalMonitorStateException
      29: dup
      30: invokespecial #21                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      33: athrow
      34: aload_0
      35: aload_1
      36: aload         4
      38: lload_2
      39: invokevirtual #13                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      42: iconst_1
      43: invokespecial #26                 // Method waitInterruptibly:(Lcom/google/common/util/concurrent/Monitor$Guard;JZ)Z
      46: ireturn

  public boolean waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_1
       1: getfield      #19                 // Field com/google/common/util/concurrent/Monitor$Guard.monitor:Lcom/google/common/util/concurrent/Monitor;
       4: aload_0
       5: if_acmpeq     16
       8: new           #20                 // class java/lang/IllegalMonitorStateException
      11: dup
      12: invokespecial #21                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      20: invokevirtual #22                 // Method java/util/concurrent/locks/ReentrantLock.isHeldByCurrentThread:()Z
      23: ifne          34
      26: new           #20                 // class java/lang/IllegalMonitorStateException
      29: dup
      30: invokespecial #21                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      33: athrow
      34: aload_0
      35: aload_1
      36: aload         4
      38: lload_2
      39: invokevirtual #13                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      42: iconst_1
      43: invokespecial #27                 // Method waitUninterruptibly:(Lcom/google/common/util/concurrent/Monitor$Guard;JZ)Z
      46: ireturn

  public void leave();
    Code:
       0: aload_0
       1: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: astore_1
       5: aload_1
       6: invokevirtual #22                 // Method java/util/concurrent/locks/ReentrantLock.isHeldByCurrentThread:()Z
       9: ifne          20
      12: new           #20                 // class java/lang/IllegalMonitorStateException
      15: dup
      16: invokespecial #21                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      19: athrow
      20: aload_0
      21: aconst_null
      22: invokespecial #30                 // Method signalConditionsOfSatisfiedGuards:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
      25: aload_1
      26: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      29: goto          39
      32: astore_2
      33: aload_1
      34: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      37: aload_2
      38: athrow
      39: return
    Exception table:
       from    to  target type
          20    25    32   any
          32    33    32   any

  public boolean isFair();
    Code:
       0: aload_0
       1: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #31                 // Method java/util/concurrent/locks/ReentrantLock.isFair:()Z
       7: ireturn

  public boolean isOccupied();
    Code:
       0: aload_0
       1: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #32                 // Method java/util/concurrent/locks/ReentrantLock.isLocked:()Z
       7: ireturn

  public boolean isOccupiedByCurrentThread();
    Code:
       0: aload_0
       1: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #22                 // Method java/util/concurrent/locks/ReentrantLock.isHeldByCurrentThread:()Z
       7: ireturn

  public int getOccupiedDepth();
    Code:
       0: aload_0
       1: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #33                 // Method java/util/concurrent/locks/ReentrantLock.getHoldCount:()I
       7: ireturn

  public int getQueueLength();
    Code:
       0: aload_0
       1: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #34                 // Method java/util/concurrent/locks/ReentrantLock.getQueueLength:()I
       7: ireturn

  public boolean hasQueuedThreads();
    Code:
       0: aload_0
       1: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #35                 // Method java/util/concurrent/locks/ReentrantLock.hasQueuedThreads:()Z
       7: ireturn

  public boolean hasQueuedThread(java.lang.Thread);
    Code:
       0: aload_0
       1: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: aload_1
       5: invokevirtual #36                 // Method java/util/concurrent/locks/ReentrantLock.hasQueuedThread:(Ljava/lang/Thread;)Z
       8: ireturn

  public boolean hasWaiters(com.google.common.util.concurrent.Monitor$Guard);
    Code:
       0: aload_1
       1: getfield      #19                 // Field com/google/common/util/concurrent/Monitor$Guard.monitor:Lcom/google/common/util/concurrent/Monitor;
       4: aload_0
       5: if_acmpeq     16
       8: new           #20                 // class java/lang/IllegalMonitorStateException
      11: dup
      12: invokespecial #21                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      20: invokevirtual #9                  // Method java/util/concurrent/locks/ReentrantLock.lock:()V
      23: aload_1
      24: getfield      #37                 // Field com/google/common/util/concurrent/Monitor$Guard.waiterCount:I
      27: ifle          34
      30: iconst_1
      31: goto          35
      34: iconst_0
      35: istore_2
      36: aload_0
      37: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      40: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      43: iload_2
      44: ireturn
      45: astore_3
      46: aload_0
      47: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      50: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      53: aload_3
      54: athrow
    Exception table:
       from    to  target type
          23    36    45   any
          45    46    45   any

  public int getWaitQueueLength(com.google.common.util.concurrent.Monitor$Guard);
    Code:
       0: aload_1
       1: getfield      #19                 // Field com/google/common/util/concurrent/Monitor$Guard.monitor:Lcom/google/common/util/concurrent/Monitor;
       4: aload_0
       5: if_acmpeq     16
       8: new           #20                 // class java/lang/IllegalMonitorStateException
      11: dup
      12: invokespecial #21                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      15: athrow
      16: aload_0
      17: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      20: invokevirtual #9                  // Method java/util/concurrent/locks/ReentrantLock.lock:()V
      23: aload_1
      24: getfield      #37                 // Field com/google/common/util/concurrent/Monitor$Guard.waiterCount:I
      27: istore_2
      28: aload_0
      29: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      32: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      35: iload_2
      36: ireturn
      37: astore_3
      38: aload_0
      39: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      42: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      45: aload_3
      46: athrow
    Exception table:
       from    to  target type
          23    28    37   any
          37    38    37   any

  private void signalConditionsOfSatisfiedGuards(com.google.common.util.concurrent.Monitor$Guard);
    Code:
       0: aload_0
       1: getfield      #5                  // Field activeGuards:Ljava/util/ArrayList;
       4: astore_2
       5: aload_2
       6: invokevirtual #38                 // Method java/util/ArrayList.size:()I
       9: istore_3
      10: iconst_0
      11: istore        4
      13: iload         4
      15: iload_3
      16: if_icmpge     73
      19: aload_2
      20: iload         4
      22: invokevirtual #39                 // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
      25: checkcast     #40                 // class com/google/common/util/concurrent/Monitor$Guard
      28: astore        5
      30: aload         5
      32: aload_1
      33: if_acmpne     48
      36: aload         5
      38: getfield      #37                 // Field com/google/common/util/concurrent/Monitor$Guard.waiterCount:I
      41: iconst_1
      42: if_icmpne     48
      45: goto          67
      48: aload         5
      50: invokevirtual #28                 // Method com/google/common/util/concurrent/Monitor$Guard.isSatisfied:()Z
      53: ifeq          67
      56: aload         5
      58: getfield      #41                 // Field com/google/common/util/concurrent/Monitor$Guard.condition:Ljava/util/concurrent/locks/Condition;
      61: invokeinterface #42,  1           // InterfaceMethod java/util/concurrent/locks/Condition.signal:()V
      66: return
      67: iinc          4, 1
      70: goto          13
      73: goto          120
      76: astore        4
      78: iconst_0
      79: istore        5
      81: iload         5
      83: iload_3
      84: if_icmpge     114
      87: aload_2
      88: iload         5
      90: invokevirtual #39                 // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
      93: checkcast     #40                 // class com/google/common/util/concurrent/Monitor$Guard
      96: astore        6
      98: aload         6
     100: getfield      #41                 // Field com/google/common/util/concurrent/Monitor$Guard.condition:Ljava/util/concurrent/locks/Condition;
     103: invokeinterface #44,  1           // InterfaceMethod java/util/concurrent/locks/Condition.signalAll:()V
     108: iinc          5, 1
     111: goto          81
     114: aload         4
     116: invokestatic  #45                 // Method com/google/common/base/Throwables.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
     119: athrow
     120: return
    Exception table:
       from    to  target type
          10    66    76   Class java/lang/Throwable
          67    73    76   Class java/lang/Throwable

  private void incrementWaiters(com.google.common.util.concurrent.Monitor$Guard);
    Code:
       0: aload_1
       1: dup
       2: getfield      #37                 // Field com/google/common/util/concurrent/Monitor$Guard.waiterCount:I
       5: dup_x1
       6: iconst_1
       7: iadd
       8: putfield      #37                 // Field com/google/common/util/concurrent/Monitor$Guard.waiterCount:I
      11: istore_2
      12: iload_2
      13: ifne          25
      16: aload_0
      17: getfield      #5                  // Field activeGuards:Ljava/util/ArrayList;
      20: aload_1
      21: invokevirtual #46                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
      24: pop
      25: return

  private void decrementWaiters(com.google.common.util.concurrent.Monitor$Guard);
    Code:
       0: aload_1
       1: dup
       2: getfield      #37                 // Field com/google/common/util/concurrent/Monitor$Guard.waiterCount:I
       5: iconst_1
       6: isub
       7: dup_x1
       8: putfield      #37                 // Field com/google/common/util/concurrent/Monitor$Guard.waiterCount:I
      11: istore_2
      12: iload_2
      13: ifne          25
      16: aload_0
      17: getfield      #5                  // Field activeGuards:Ljava/util/ArrayList;
      20: aload_1
      21: invokevirtual #47                 // Method java/util/ArrayList.remove:(Ljava/lang/Object;)Z
      24: pop
      25: return

  private void waitInterruptibly(com.google.common.util.concurrent.Monitor$Guard, boolean) throws java.lang.InterruptedException;
    Code:
       0: aload_1
       1: invokevirtual #28                 // Method com/google/common/util/concurrent/Monitor$Guard.isSatisfied:()Z
       4: ifne          87
       7: iload_2
       8: ifeq          16
      11: aload_0
      12: aconst_null
      13: invokespecial #30                 // Method signalConditionsOfSatisfiedGuards:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
      16: aload_0
      17: aload_1
      18: invokespecial #48                 // Method incrementWaiters:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
      21: aload_1
      22: getfield      #41                 // Field com/google/common/util/concurrent/Monitor$Guard.condition:Ljava/util/concurrent/locks/Condition;
      25: astore_3
      26: aload_3
      27: invokeinterface #49,  1           // InterfaceMethod java/util/concurrent/locks/Condition.await:()V
      32: goto          62
      35: astore        4
      37: aload_0
      38: aload_1
      39: invokespecial #30                 // Method signalConditionsOfSatisfiedGuards:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
      42: goto          59
      45: astore        5
      47: invokestatic  #16                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      50: invokevirtual #17                 // Method java/lang/Thread.interrupt:()V
      53: aload         5
      55: invokestatic  #45                 // Method com/google/common/base/Throwables.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
      58: athrow
      59: aload         4
      61: athrow
      62: aload_1
      63: invokevirtual #28                 // Method com/google/common/util/concurrent/Monitor$Guard.isSatisfied:()Z
      66: ifeq          26
      69: aload_0
      70: aload_1
      71: invokespecial #50                 // Method decrementWaiters:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
      74: goto          87
      77: astore        6
      79: aload_0
      80: aload_1
      81: invokespecial #50                 // Method decrementWaiters:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
      84: aload         6
      86: athrow
      87: return
    Exception table:
       from    to  target type
          26    32    35   Class java/lang/InterruptedException
          37    42    45   Class java/lang/Throwable
          21    69    77   any
          77    79    77   any

  private void waitUninterruptibly(com.google.common.util.concurrent.Monitor$Guard, boolean);
    Code:
       0: aload_1
       1: invokevirtual #28                 // Method com/google/common/util/concurrent/Monitor$Guard.isSatisfied:()Z
       4: ifne          57
       7: iload_2
       8: ifeq          16
      11: aload_0
      12: aconst_null
      13: invokespecial #30                 // Method signalConditionsOfSatisfiedGuards:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
      16: aload_0
      17: aload_1
      18: invokespecial #48                 // Method incrementWaiters:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
      21: aload_1
      22: getfield      #41                 // Field com/google/common/util/concurrent/Monitor$Guard.condition:Ljava/util/concurrent/locks/Condition;
      25: astore_3
      26: aload_3
      27: invokeinterface #51,  1           // InterfaceMethod java/util/concurrent/locks/Condition.awaitUninterruptibly:()V
      32: aload_1
      33: invokevirtual #28                 // Method com/google/common/util/concurrent/Monitor$Guard.isSatisfied:()Z
      36: ifeq          26
      39: aload_0
      40: aload_1
      41: invokespecial #50                 // Method decrementWaiters:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
      44: goto          57
      47: astore        4
      49: aload_0
      50: aload_1
      51: invokespecial #50                 // Method decrementWaiters:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
      54: aload         4
      56: athrow
      57: return
    Exception table:
       from    to  target type
          21    39    47   any
          47    49    47   any

  private boolean waitInterruptibly(com.google.common.util.concurrent.Monitor$Guard, long, boolean) throws java.lang.InterruptedException;
    Code:
       0: aload_1
       1: invokevirtual #28                 // Method com/google/common/util/concurrent/Monitor$Guard.isSatisfied:()Z
       4: ifne          109
       7: iload         4
       9: ifeq          17
      12: aload_0
      13: aconst_null
      14: invokespecial #30                 // Method signalConditionsOfSatisfiedGuards:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
      17: aload_0
      18: aload_1
      19: invokespecial #48                 // Method incrementWaiters:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
      22: aload_1
      23: getfield      #41                 // Field com/google/common/util/concurrent/Monitor$Guard.condition:Ljava/util/concurrent/locks/Condition;
      26: astore        5
      28: lload_2
      29: lconst_0
      30: lcmp
      31: ifgt          45
      34: iconst_0
      35: istore        6
      37: aload_0
      38: aload_1
      39: invokespecial #50                 // Method decrementWaiters:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
      42: iload         6
      44: ireturn
      45: aload         5
      47: lload_2
      48: invokeinterface #52,  3           // InterfaceMethod java/util/concurrent/locks/Condition.awaitNanos:(J)J
      53: lstore_2
      54: goto          84
      57: astore        6
      59: aload_0
      60: aload_1
      61: invokespecial #30                 // Method signalConditionsOfSatisfiedGuards:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
      64: goto          81
      67: astore        7
      69: invokestatic  #16                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      72: invokevirtual #17                 // Method java/lang/Thread.interrupt:()V
      75: aload         7
      77: invokestatic  #45                 // Method com/google/common/base/Throwables.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
      80: athrow
      81: aload         6
      83: athrow
      84: aload_1
      85: invokevirtual #28                 // Method com/google/common/util/concurrent/Monitor$Guard.isSatisfied:()Z
      88: ifeq          28
      91: aload_0
      92: aload_1
      93: invokespecial #50                 // Method decrementWaiters:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
      96: goto          109
      99: astore        8
     101: aload_0
     102: aload_1
     103: invokespecial #50                 // Method decrementWaiters:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
     106: aload         8
     108: athrow
     109: iconst_1
     110: ireturn
    Exception table:
       from    to  target type
          45    54    57   Class java/lang/InterruptedException
          59    64    67   Class java/lang/Throwable
          22    37    99   any
          45    91    99   any
          99   101    99   any

  private boolean waitUninterruptibly(com.google.common.util.concurrent.Monitor$Guard, long, boolean);
    Code:
       0: aload_1
       1: invokevirtual #28                 // Method com/google/common/util/concurrent/Monitor$Guard.isSatisfied:()Z
       4: ifne          174
       7: invokestatic  #12                 // Method java/lang/System.nanoTime:()J
      10: lstore        5
      12: iload         4
      14: ifeq          22
      17: aload_0
      18: aconst_null
      19: invokespecial #30                 // Method signalConditionsOfSatisfiedGuards:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
      22: iconst_0
      23: istore        7
      25: aload_0
      26: aload_1
      27: invokespecial #48                 // Method incrementWaiters:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
      30: aload_1
      31: getfield      #41                 // Field com/google/common/util/concurrent/Monitor$Guard.condition:Ljava/util/concurrent/locks/Condition;
      34: astore        8
      36: lload_2
      37: lstore        9
      39: lload         9
      41: lconst_0
      42: lcmp
      43: ifgt          68
      46: iconst_0
      47: istore        11
      49: aload_0
      50: aload_1
      51: invokespecial #50                 // Method decrementWaiters:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
      54: iload         7
      56: ifeq          65
      59: invokestatic  #16                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      62: invokevirtual #17                 // Method java/lang/Thread.interrupt:()V
      65: iload         11
      67: ireturn
      68: aload         8
      70: lload         9
      72: invokeinterface #52,  3           // InterfaceMethod java/util/concurrent/locks/Condition.awaitNanos:(J)J
      77: lstore        9
      79: goto          119
      82: astore        11
      84: aload_0
      85: aload_1
      86: invokespecial #30                 // Method signalConditionsOfSatisfiedGuards:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
      89: goto          106
      92: astore        12
      94: invokestatic  #16                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      97: invokevirtual #17                 // Method java/lang/Thread.interrupt:()V
     100: aload         12
     102: invokestatic  #45                 // Method com/google/common/base/Throwables.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
     105: athrow
     106: iconst_1
     107: istore        7
     109: lload_2
     110: invokestatic  #12                 // Method java/lang/System.nanoTime:()J
     113: lload         5
     115: lsub
     116: lsub
     117: lstore        9
     119: aload_1
     120: invokevirtual #28                 // Method com/google/common/util/concurrent/Monitor$Guard.isSatisfied:()Z
     123: ifeq          39
     126: aload_0
     127: aload_1
     128: invokespecial #50                 // Method decrementWaiters:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
     131: goto          144
     134: astore        13
     136: aload_0
     137: aload_1
     138: invokespecial #50                 // Method decrementWaiters:(Lcom/google/common/util/concurrent/Monitor$Guard;)V
     141: aload         13
     143: athrow
     144: iload         7
     146: ifeq          174
     149: invokestatic  #16                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
     152: invokevirtual #17                 // Method java/lang/Thread.interrupt:()V
     155: goto          174
     158: astore        14
     160: iload         7
     162: ifeq          171
     165: invokestatic  #16                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
     168: invokevirtual #17                 // Method java/lang/Thread.interrupt:()V
     171: aload         14
     173: athrow
     174: iconst_1
     175: ireturn
    Exception table:
       from    to  target type
          68    79    82   Class java/lang/InterruptedException
          84    89    92   Class java/lang/Throwable
          30    49   134   any
          68   126   134   any
         134   136   134   any
          25    54   158   any
          68   144   158   any
         158   160   158   any

  static java.util.concurrent.locks.ReentrantLock access$000(com.google.common.util.concurrent.Monitor);
    Code:
       0: aload_0
       1: getfield      #1                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: areturn
}
