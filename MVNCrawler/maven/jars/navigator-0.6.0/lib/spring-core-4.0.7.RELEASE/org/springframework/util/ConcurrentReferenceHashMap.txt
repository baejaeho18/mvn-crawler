Compiled from "ConcurrentReferenceHashMap.java"
public class org.springframework.util.ConcurrentReferenceHashMap<K, V> extends java.util.AbstractMap<K, V> implements java.util.concurrent.ConcurrentMap<K, V> {
  private static final int DEFAULT_INITIAL_CAPACITY;

  private static final float DEFAULT_LOAD_FACTOR;

  private static final int DEFAULT_CONCURRENCY_LEVEL;

  private static final org.springframework.util.ConcurrentReferenceHashMap$ReferenceType DEFAULT_REFERENCE_TYPE;

  private static final int MAXIMUM_CONCURRENCY_LEVEL;

  private static final int MAXIMUM_SEGMENT_SIZE;

  private final org.springframework.util.ConcurrentReferenceHashMap<K, V>.Segment[] segments;

  private final float loadFactor;

  private final org.springframework.util.ConcurrentReferenceHashMap$ReferenceType referenceType;

  private final int shift;

  private java.util.Set<java.util.Map$Entry<K, V>> entrySet;

  public org.springframework.util.ConcurrentReferenceHashMap();
    Code:
       0: aload_0
       1: bipush        16
       3: ldc           #4                  // float 0.75f
       5: bipush        16
       7: getstatic     #5                  // Field DEFAULT_REFERENCE_TYPE:Lorg/springframework/util/ConcurrentReferenceHashMap$ReferenceType;
      10: invokespecial #6                  // Method "<init>":(IFILorg/springframework/util/ConcurrentReferenceHashMap$ReferenceType;)V
      13: return

  public org.springframework.util.ConcurrentReferenceHashMap(int);
    Code:
       0: aload_0
       1: iload_1
       2: ldc           #4                  // float 0.75f
       4: bipush        16
       6: getstatic     #5                  // Field DEFAULT_REFERENCE_TYPE:Lorg/springframework/util/ConcurrentReferenceHashMap$ReferenceType;
       9: invokespecial #6                  // Method "<init>":(IFILorg/springframework/util/ConcurrentReferenceHashMap$ReferenceType;)V
      12: return

  public org.springframework.util.ConcurrentReferenceHashMap(int, float);
    Code:
       0: aload_0
       1: iload_1
       2: fload_2
       3: bipush        16
       5: getstatic     #5                  // Field DEFAULT_REFERENCE_TYPE:Lorg/springframework/util/ConcurrentReferenceHashMap$ReferenceType;
       8: invokespecial #6                  // Method "<init>":(IFILorg/springframework/util/ConcurrentReferenceHashMap$ReferenceType;)V
      11: return

  public org.springframework.util.ConcurrentReferenceHashMap(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: ldc           #4                  // float 0.75f
       4: iload_2
       5: getstatic     #5                  // Field DEFAULT_REFERENCE_TYPE:Lorg/springframework/util/ConcurrentReferenceHashMap$ReferenceType;
       8: invokespecial #6                  // Method "<init>":(IFILorg/springframework/util/ConcurrentReferenceHashMap$ReferenceType;)V
      11: return

  public org.springframework.util.ConcurrentReferenceHashMap(int, org.springframework.util.ConcurrentReferenceHashMap$ReferenceType);
    Code:
       0: aload_0
       1: iload_1
       2: ldc           #4                  // float 0.75f
       4: bipush        16
       6: aload_2
       7: invokespecial #6                  // Method "<init>":(IFILorg/springframework/util/ConcurrentReferenceHashMap$ReferenceType;)V
      10: return

  public org.springframework.util.ConcurrentReferenceHashMap(int, float, int);
    Code:
       0: aload_0
       1: iload_1
       2: fload_2
       3: iload_3
       4: getstatic     #5                  // Field DEFAULT_REFERENCE_TYPE:Lorg/springframework/util/ConcurrentReferenceHashMap$ReferenceType;
       7: invokespecial #6                  // Method "<init>":(IFILorg/springframework/util/ConcurrentReferenceHashMap$ReferenceType;)V
      10: return

  public org.springframework.util.ConcurrentReferenceHashMap(int, float, int, org.springframework.util.ConcurrentReferenceHashMap$ReferenceType);
    Code:
       0: aload_0
       1: invokespecial #7                  // Method java/util/AbstractMap."<init>":()V
       4: iload_1
       5: iflt          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ldc           #8                  // String Initial capacity must not be negative
      15: invokestatic  #9                  // Method org/springframework/util/Assert.isTrue:(ZLjava/lang/String;)V
      18: fload_2
      19: fconst_0
      20: fcmpl
      21: ifle          28
      24: iconst_1
      25: goto          29
      28: iconst_0
      29: ldc           #10                 // String Load factor must be positive
      31: invokestatic  #9                  // Method org/springframework/util/Assert.isTrue:(ZLjava/lang/String;)V
      34: iload_3
      35: ifle          42
      38: iconst_1
      39: goto          43
      42: iconst_0
      43: ldc           #11                 // String Concurrency level must be positive
      45: invokestatic  #9                  // Method org/springframework/util/Assert.isTrue:(ZLjava/lang/String;)V
      48: aload         4
      50: ldc           #12                 // String Reference type must not be null
      52: invokestatic  #13                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      55: aload_0
      56: fload_2
      57: putfield      #14                 // Field loadFactor:F
      60: aload_0
      61: iload_3
      62: ldc           #15                 // int 65536
      64: invokestatic  #16                 // Method calculateShift:(II)I
      67: putfield      #17                 // Field shift:I
      70: iconst_1
      71: aload_0
      72: getfield      #17                 // Field shift:I
      75: ishl
      76: istore        5
      78: aload_0
      79: aload         4
      81: putfield      #1                  // Field referenceType:Lorg/springframework/util/ConcurrentReferenceHashMap$ReferenceType;
      84: iload_1
      85: iload         5
      87: iadd
      88: i2l
      89: lconst_1
      90: lsub
      91: iload         5
      93: i2l
      94: ldiv
      95: l2i
      96: istore        6
      98: aload_0
      99: ldc           #18                 // class org/springframework/util/ConcurrentReferenceHashMap$Segment
     101: iload         5
     103: invokestatic  #19                 // Method java/lang/reflect/Array.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;
     106: checkcast     #20                 // class "[Lorg/springframework/util/ConcurrentReferenceHashMap$Segment;"
     109: checkcast     #20                 // class "[Lorg/springframework/util/ConcurrentReferenceHashMap$Segment;"
     112: putfield      #2                  // Field segments:[Lorg/springframework/util/ConcurrentReferenceHashMap$Segment;
     115: iconst_0
     116: istore        7
     118: iload         7
     120: aload_0
     121: getfield      #2                  // Field segments:[Lorg/springframework/util/ConcurrentReferenceHashMap$Segment;
     124: arraylength
     125: if_icmpge     151
     128: aload_0
     129: getfield      #2                  // Field segments:[Lorg/springframework/util/ConcurrentReferenceHashMap$Segment;
     132: iload         7
     134: new           #18                 // class org/springframework/util/ConcurrentReferenceHashMap$Segment
     137: dup
     138: aload_0
     139: iload         6
     141: invokespecial #21                 // Method org/springframework/util/ConcurrentReferenceHashMap$Segment."<init>":(Lorg/springframework/util/ConcurrentReferenceHashMap;I)V
     144: aastore
     145: iinc          7, 1
     148: goto          118
     151: return

  protected final float getLoadFactor();
    Code:
       0: aload_0
       1: getfield      #14                 // Field loadFactor:F
       4: freturn

  protected final int getSegmentsSize();
    Code:
       0: aload_0
       1: getfield      #2                  // Field segments:[Lorg/springframework/util/ConcurrentReferenceHashMap$Segment;
       4: arraylength
       5: ireturn

  protected final org.springframework.util.ConcurrentReferenceHashMap<K, V>.Segment getSegment(int);
    Code:
       0: aload_0
       1: getfield      #2                  // Field segments:[Lorg/springframework/util/ConcurrentReferenceHashMap$Segment;
       4: iload_1
       5: aaload
       6: areturn

  protected org.springframework.util.ConcurrentReferenceHashMap<K, V>.ReferenceManager createReferenceManager();
    Code:
       0: new           #22                 // class org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager
       3: dup
       4: aload_0
       5: invokespecial #23                 // Method org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager."<init>":(Lorg/springframework/util/ConcurrentReferenceHashMap;)V
       8: areturn

  protected int getHash(java.lang.Object);
    Code:
       0: aload_1
       1: ifnonnull     8
       4: iconst_0
       5: goto          12
       8: aload_1
       9: invokevirtual #24                 // Method java/lang/Object.hashCode:()I
      12: istore_2
      13: iload_2
      14: iload_2
      15: bipush        15
      17: ishl
      18: sipush        -12931
      21: ixor
      22: iadd
      23: istore_2
      24: iload_2
      25: iload_2
      26: bipush        10
      28: iushr
      29: ixor
      30: istore_2
      31: iload_2
      32: iload_2
      33: iconst_3
      34: ishl
      35: iadd
      36: istore_2
      37: iload_2
      38: iload_2
      39: bipush        6
      41: iushr
      42: ixor
      43: istore_2
      44: iload_2
      45: iload_2
      46: iconst_2
      47: ishl
      48: iload_2
      49: bipush        14
      51: ishl
      52: iadd
      53: iadd
      54: istore_2
      55: iload_2
      56: iload_2
      57: bipush        16
      59: iushr
      60: ixor
      61: istore_2
      62: iload_2
      63: ireturn

  public V get(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #25                 // Field org/springframework/util/ConcurrentReferenceHashMap$Restructure.WHEN_NECESSARY:Lorg/springframework/util/ConcurrentReferenceHashMap$Restructure;
       5: invokevirtual #26                 // Method getReference:(Ljava/lang/Object;Lorg/springframework/util/ConcurrentReferenceHashMap$Restructure;)Lorg/springframework/util/ConcurrentReferenceHashMap$Reference;
       8: astore_2
       9: aload_2
      10: ifnull        22
      13: aload_2
      14: invokeinterface #27,  1           // InterfaceMethod org/springframework/util/ConcurrentReferenceHashMap$Reference.get:()Lorg/springframework/util/ConcurrentReferenceHashMap$Entry;
      19: goto          23
      22: aconst_null
      23: astore_3
      24: aload_3
      25: ifnull        35
      28: aload_3
      29: invokevirtual #28                 // Method org/springframework/util/ConcurrentReferenceHashMap$Entry.getValue:()Ljava/lang/Object;
      32: goto          36
      35: aconst_null
      36: areturn

  public boolean containsKey(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #25                 // Field org/springframework/util/ConcurrentReferenceHashMap$Restructure.WHEN_NECESSARY:Lorg/springframework/util/ConcurrentReferenceHashMap$Restructure;
       5: invokevirtual #26                 // Method getReference:(Ljava/lang/Object;Lorg/springframework/util/ConcurrentReferenceHashMap$Restructure;)Lorg/springframework/util/ConcurrentReferenceHashMap$Reference;
       8: astore_2
       9: aload_2
      10: ifnull        22
      13: aload_2
      14: invokeinterface #27,  1           // InterfaceMethod org/springframework/util/ConcurrentReferenceHashMap$Reference.get:()Lorg/springframework/util/ConcurrentReferenceHashMap$Entry;
      19: goto          23
      22: aconst_null
      23: astore_3
      24: aload_3
      25: ifnull        43
      28: aload_3
      29: invokevirtual #29                 // Method org/springframework/util/ConcurrentReferenceHashMap$Entry.getKey:()Ljava/lang/Object;
      32: aload_1
      33: invokestatic  #30                 // Method org/springframework/util/ObjectUtils.nullSafeEquals:(Ljava/lang/Object;Ljava/lang/Object;)Z
      36: ifeq          43
      39: iconst_1
      40: goto          44
      43: iconst_0
      44: ireturn

  protected final org.springframework.util.ConcurrentReferenceHashMap$Reference<K, V> getReference(java.lang.Object, org.springframework.util.ConcurrentReferenceHashMap$Restructure);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #31                 // Method getHash:(Ljava/lang/Object;)I
       5: istore_3
       6: aload_0
       7: iload_3
       8: invokespecial #32                 // Method getSegmentForHash:(I)Lorg/springframework/util/ConcurrentReferenceHashMap$Segment;
      11: aload_1
      12: iload_3
      13: aload_2
      14: invokevirtual #33                 // Method org/springframework/util/ConcurrentReferenceHashMap$Segment.getReference:(Ljava/lang/Object;ILorg/springframework/util/ConcurrentReferenceHashMap$Restructure;)Lorg/springframework/util/ConcurrentReferenceHashMap$Reference;
      17: areturn

  public V put(K, V);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iconst_1
       4: invokespecial #34                 // Method put:(Ljava/lang/Object;Ljava/lang/Object;Z)Ljava/lang/Object;
       7: areturn

  public V putIfAbsent(K, V);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iconst_0
       4: invokespecial #34                 // Method put:(Ljava/lang/Object;Ljava/lang/Object;Z)Ljava/lang/Object;
       7: areturn

  private V put(K, V, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: new           #35                 // class org/springframework/util/ConcurrentReferenceHashMap$1
       5: dup
       6: aload_0
       7: iconst_2
       8: anewarray     #36                 // class org/springframework/util/ConcurrentReferenceHashMap$TaskOption
      11: dup
      12: iconst_0
      13: getstatic     #37                 // Field org/springframework/util/ConcurrentReferenceHashMap$TaskOption.RESTRUCTURE_BEFORE:Lorg/springframework/util/ConcurrentReferenceHashMap$TaskOption;
      16: aastore
      17: dup
      18: iconst_1
      19: getstatic     #38                 // Field org/springframework/util/ConcurrentReferenceHashMap$TaskOption.RESIZE:Lorg/springframework/util/ConcurrentReferenceHashMap$TaskOption;
      22: aastore
      23: iload_3
      24: aload_2
      25: invokespecial #39                 // Method org/springframework/util/ConcurrentReferenceHashMap$1."<init>":(Lorg/springframework/util/ConcurrentReferenceHashMap;[Lorg/springframework/util/ConcurrentReferenceHashMap$TaskOption;ZLjava/lang/Object;)V
      28: invokespecial #40                 // Method doTask:(Ljava/lang/Object;Lorg/springframework/util/ConcurrentReferenceHashMap$Task;)Ljava/lang/Object;
      31: areturn

  public V remove(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: new           #41                 // class org/springframework/util/ConcurrentReferenceHashMap$2
       5: dup
       6: aload_0
       7: iconst_2
       8: anewarray     #36                 // class org/springframework/util/ConcurrentReferenceHashMap$TaskOption
      11: dup
      12: iconst_0
      13: getstatic     #42                 // Field org/springframework/util/ConcurrentReferenceHashMap$TaskOption.RESTRUCTURE_AFTER:Lorg/springframework/util/ConcurrentReferenceHashMap$TaskOption;
      16: aastore
      17: dup
      18: iconst_1
      19: getstatic     #43                 // Field org/springframework/util/ConcurrentReferenceHashMap$TaskOption.SKIP_IF_EMPTY:Lorg/springframework/util/ConcurrentReferenceHashMap$TaskOption;
      22: aastore
      23: invokespecial #44                 // Method org/springframework/util/ConcurrentReferenceHashMap$2."<init>":(Lorg/springframework/util/ConcurrentReferenceHashMap;[Lorg/springframework/util/ConcurrentReferenceHashMap$TaskOption;)V
      26: invokespecial #40                 // Method doTask:(Ljava/lang/Object;Lorg/springframework/util/ConcurrentReferenceHashMap$Task;)Ljava/lang/Object;
      29: areturn

  public boolean remove(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: new           #45                 // class org/springframework/util/ConcurrentReferenceHashMap$3
       5: dup
       6: aload_0
       7: iconst_2
       8: anewarray     #36                 // class org/springframework/util/ConcurrentReferenceHashMap$TaskOption
      11: dup
      12: iconst_0
      13: getstatic     #42                 // Field org/springframework/util/ConcurrentReferenceHashMap$TaskOption.RESTRUCTURE_AFTER:Lorg/springframework/util/ConcurrentReferenceHashMap$TaskOption;
      16: aastore
      17: dup
      18: iconst_1
      19: getstatic     #43                 // Field org/springframework/util/ConcurrentReferenceHashMap$TaskOption.SKIP_IF_EMPTY:Lorg/springframework/util/ConcurrentReferenceHashMap$TaskOption;
      22: aastore
      23: aload_2
      24: invokespecial #46                 // Method org/springframework/util/ConcurrentReferenceHashMap$3."<init>":(Lorg/springframework/util/ConcurrentReferenceHashMap;[Lorg/springframework/util/ConcurrentReferenceHashMap$TaskOption;Ljava/lang/Object;)V
      27: invokespecial #40                 // Method doTask:(Ljava/lang/Object;Lorg/springframework/util/ConcurrentReferenceHashMap$Task;)Ljava/lang/Object;
      30: checkcast     #47                 // class java/lang/Boolean
      33: invokevirtual #48                 // Method java/lang/Boolean.booleanValue:()Z
      36: ireturn

  public boolean replace(K, V, V);
    Code:
       0: aload_0
       1: aload_1
       2: new           #49                 // class org/springframework/util/ConcurrentReferenceHashMap$4
       5: dup
       6: aload_0
       7: iconst_2
       8: anewarray     #36                 // class org/springframework/util/ConcurrentReferenceHashMap$TaskOption
      11: dup
      12: iconst_0
      13: getstatic     #37                 // Field org/springframework/util/ConcurrentReferenceHashMap$TaskOption.RESTRUCTURE_BEFORE:Lorg/springframework/util/ConcurrentReferenceHashMap$TaskOption;
      16: aastore
      17: dup
      18: iconst_1
      19: getstatic     #43                 // Field org/springframework/util/ConcurrentReferenceHashMap$TaskOption.SKIP_IF_EMPTY:Lorg/springframework/util/ConcurrentReferenceHashMap$TaskOption;
      22: aastore
      23: aload_2
      24: aload_3
      25: invokespecial #50                 // Method org/springframework/util/ConcurrentReferenceHashMap$4."<init>":(Lorg/springframework/util/ConcurrentReferenceHashMap;[Lorg/springframework/util/ConcurrentReferenceHashMap$TaskOption;Ljava/lang/Object;Ljava/lang/Object;)V
      28: invokespecial #40                 // Method doTask:(Ljava/lang/Object;Lorg/springframework/util/ConcurrentReferenceHashMap$Task;)Ljava/lang/Object;
      31: checkcast     #47                 // class java/lang/Boolean
      34: invokevirtual #48                 // Method java/lang/Boolean.booleanValue:()Z
      37: ireturn

  public V replace(K, V);
    Code:
       0: aload_0
       1: aload_1
       2: new           #51                 // class org/springframework/util/ConcurrentReferenceHashMap$5
       5: dup
       6: aload_0
       7: iconst_2
       8: anewarray     #36                 // class org/springframework/util/ConcurrentReferenceHashMap$TaskOption
      11: dup
      12: iconst_0
      13: getstatic     #37                 // Field org/springframework/util/ConcurrentReferenceHashMap$TaskOption.RESTRUCTURE_BEFORE:Lorg/springframework/util/ConcurrentReferenceHashMap$TaskOption;
      16: aastore
      17: dup
      18: iconst_1
      19: getstatic     #43                 // Field org/springframework/util/ConcurrentReferenceHashMap$TaskOption.SKIP_IF_EMPTY:Lorg/springframework/util/ConcurrentReferenceHashMap$TaskOption;
      22: aastore
      23: aload_2
      24: invokespecial #52                 // Method org/springframework/util/ConcurrentReferenceHashMap$5."<init>":(Lorg/springframework/util/ConcurrentReferenceHashMap;[Lorg/springframework/util/ConcurrentReferenceHashMap$TaskOption;Ljava/lang/Object;)V
      27: invokespecial #40                 // Method doTask:(Ljava/lang/Object;Lorg/springframework/util/ConcurrentReferenceHashMap$Task;)Ljava/lang/Object;
      30: areturn

  public void clear();
    Code:
       0: aload_0
       1: getfield      #2                  // Field segments:[Lorg/springframework/util/ConcurrentReferenceHashMap$Segment;
       4: astore_1
       5: aload_1
       6: arraylength
       7: istore_2
       8: iconst_0
       9: istore_3
      10: iload_3
      11: iload_2
      12: if_icmpge     31
      15: aload_1
      16: iload_3
      17: aaload
      18: astore        4
      20: aload         4
      22: invokevirtual #53                 // Method org/springframework/util/ConcurrentReferenceHashMap$Segment.clear:()V
      25: iinc          3, 1
      28: goto          10
      31: return

  public void purgeUnreferencedEntries();
    Code:
       0: aload_0
       1: getfield      #2                  // Field segments:[Lorg/springframework/util/ConcurrentReferenceHashMap$Segment;
       4: astore_1
       5: aload_1
       6: arraylength
       7: istore_2
       8: iconst_0
       9: istore_3
      10: iload_3
      11: iload_2
      12: if_icmpge     32
      15: aload_1
      16: iload_3
      17: aaload
      18: astore        4
      20: aload         4
      22: iconst_0
      23: invokevirtual #54                 // Method org/springframework/util/ConcurrentReferenceHashMap$Segment.restructureIfNecessary:(Z)V
      26: iinc          3, 1
      29: goto          10
      32: return

  public int size();
    Code:
       0: iconst_0
       1: istore_1
       2: aload_0
       3: getfield      #2                  // Field segments:[Lorg/springframework/util/ConcurrentReferenceHashMap$Segment;
       6: astore_2
       7: aload_2
       8: arraylength
       9: istore_3
      10: iconst_0
      11: istore        4
      13: iload         4
      15: iload_3
      16: if_icmpge     39
      19: aload_2
      20: iload         4
      22: aaload
      23: astore        5
      25: iload_1
      26: aload         5
      28: invokevirtual #55                 // Method org/springframework/util/ConcurrentReferenceHashMap$Segment.getCount:()I
      31: iadd
      32: istore_1
      33: iinc          4, 1
      36: goto          13
      39: iload_1
      40: ireturn

  public java.util.Set<java.util.Map$Entry<K, V>> entrySet();
    Code:
       0: aload_0
       1: getfield      #56                 // Field entrySet:Ljava/util/Set;
       4: ifnonnull     20
       7: aload_0
       8: new           #57                 // class org/springframework/util/ConcurrentReferenceHashMap$EntrySet
      11: dup
      12: aload_0
      13: aconst_null
      14: invokespecial #58                 // Method org/springframework/util/ConcurrentReferenceHashMap$EntrySet."<init>":(Lorg/springframework/util/ConcurrentReferenceHashMap;Lorg/springframework/util/ConcurrentReferenceHashMap$1;)V
      17: putfield      #56                 // Field entrySet:Ljava/util/Set;
      20: aload_0
      21: getfield      #56                 // Field entrySet:Ljava/util/Set;
      24: areturn

  private <T> T doTask(java.lang.Object, org.springframework.util.ConcurrentReferenceHashMap<K, V>.Task<T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #31                 // Method getHash:(Ljava/lang/Object;)I
       5: istore_3
       6: aload_0
       7: iload_3
       8: invokespecial #32                 // Method getSegmentForHash:(I)Lorg/springframework/util/ConcurrentReferenceHashMap$Segment;
      11: iload_3
      12: aload_1
      13: aload_2
      14: invokevirtual #59                 // Method org/springframework/util/ConcurrentReferenceHashMap$Segment.doTask:(ILjava/lang/Object;Lorg/springframework/util/ConcurrentReferenceHashMap$Task;)Ljava/lang/Object;
      17: areturn

  private org.springframework.util.ConcurrentReferenceHashMap<K, V>.Segment getSegmentForHash(int);
    Code:
       0: aload_0
       1: getfield      #2                  // Field segments:[Lorg/springframework/util/ConcurrentReferenceHashMap$Segment;
       4: iload_1
       5: bipush        32
       7: aload_0
       8: getfield      #17                 // Field shift:I
      11: isub
      12: iushr
      13: aload_0
      14: getfield      #2                  // Field segments:[Lorg/springframework/util/ConcurrentReferenceHashMap$Segment;
      17: arraylength
      18: iconst_1
      19: isub
      20: iand
      21: aaload
      22: areturn

  protected static int calculateShift(int, int);
    Code:
       0: iconst_0
       1: istore_2
       2: iconst_1
       3: istore_3
       4: iload_3
       5: iload_0
       6: if_icmpge     24
       9: iload_3
      10: iload_1
      11: if_icmpge     24
      14: iload_3
      15: iconst_1
      16: ishl
      17: istore_3
      18: iinc          2, 1
      21: goto          4
      24: iload_2
      25: ireturn

  static org.springframework.util.ConcurrentReferenceHashMap$Segment[] access$600(org.springframework.util.ConcurrentReferenceHashMap);
    Code:
       0: aload_0
       1: getfield      #2                  // Field segments:[Lorg/springframework/util/ConcurrentReferenceHashMap$Segment;
       4: areturn

  static org.springframework.util.ConcurrentReferenceHashMap$ReferenceType access$700(org.springframework.util.ConcurrentReferenceHashMap);
    Code:
       0: aload_0
       1: getfield      #1                  // Field referenceType:Lorg/springframework/util/ConcurrentReferenceHashMap$ReferenceType;
       4: areturn

  static {};
    Code:
       0: getstatic     #60                 // Field org/springframework/util/ConcurrentReferenceHashMap$ReferenceType.SOFT:Lorg/springframework/util/ConcurrentReferenceHashMap$ReferenceType;
       3: putstatic     #5                  // Field DEFAULT_REFERENCE_TYPE:Lorg/springframework/util/ConcurrentReferenceHashMap$ReferenceType;
       6: return
}
