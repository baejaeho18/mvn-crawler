Compiled from "MappingJacksonHttpMessageConverter.java"
public class org.springframework.http.converter.json.MappingJacksonHttpMessageConverter extends org.springframework.http.converter.AbstractHttpMessageConverter<java.lang.Object> implements org.springframework.http.converter.GenericHttpMessageConverter<java.lang.Object> {
  public static final java.nio.charset.Charset DEFAULT_CHARSET;

  private org.codehaus.jackson.map.ObjectMapper objectMapper;

  private java.lang.String jsonPrefix;

  private java.lang.Boolean prettyPrint;

  public org.springframework.http.converter.json.MappingJacksonHttpMessageConverter();
    Code:
       0: aload_0
       1: iconst_2
       2: anewarray     #1                  // class org/springframework/http/MediaType
       5: dup
       6: iconst_0
       7: new           #1                  // class org/springframework/http/MediaType
      10: dup
      11: ldc           #2                  // String application
      13: ldc           #3                  // String json
      15: getstatic     #4                  // Field DEFAULT_CHARSET:Ljava/nio/charset/Charset;
      18: invokespecial #5                  // Method org/springframework/http/MediaType."<init>":(Ljava/lang/String;Ljava/lang/String;Ljava/nio/charset/Charset;)V
      21: aastore
      22: dup
      23: iconst_1
      24: new           #1                  // class org/springframework/http/MediaType
      27: dup
      28: ldc           #2                  // String application
      30: ldc           #6                  // String *+json
      32: getstatic     #4                  // Field DEFAULT_CHARSET:Ljava/nio/charset/Charset;
      35: invokespecial #5                  // Method org/springframework/http/MediaType."<init>":(Ljava/lang/String;Ljava/lang/String;Ljava/nio/charset/Charset;)V
      38: aastore
      39: invokespecial #7                  // Method org/springframework/http/converter/AbstractHttpMessageConverter."<init>":([Lorg/springframework/http/MediaType;)V
      42: aload_0
      43: new           #8                  // class org/codehaus/jackson/map/ObjectMapper
      46: dup
      47: invokespecial #9                  // Method org/codehaus/jackson/map/ObjectMapper."<init>":()V
      50: putfield      #10                 // Field objectMapper:Lorg/codehaus/jackson/map/ObjectMapper;
      53: return

  public void setObjectMapper(org.codehaus.jackson.map.ObjectMapper);
    Code:
       0: aload_1
       1: ldc           #11                 // String ObjectMapper must not be null
       3: invokestatic  #12                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: putfield      #10                 // Field objectMapper:Lorg/codehaus/jackson/map/ObjectMapper;
      11: aload_0
      12: invokespecial #13                 // Method configurePrettyPrint:()V
      15: return

  public org.codehaus.jackson.map.ObjectMapper getObjectMapper();
    Code:
       0: aload_0
       1: getfield      #10                 // Field objectMapper:Lorg/codehaus/jackson/map/ObjectMapper;
       4: areturn

  public void setJsonPrefix(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #14                 // Field jsonPrefix:Ljava/lang/String;
       5: return

  public void setPrefixJson(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: ifeq          10
       5: ldc           #15                 // String {} &&
       7: goto          11
      10: aconst_null
      11: putfield      #14                 // Field jsonPrefix:Ljava/lang/String;
      14: return

  public void setPrettyPrint(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #16                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       5: putfield      #17                 // Field prettyPrint:Ljava/lang/Boolean;
       8: aload_0
       9: invokespecial #13                 // Method configurePrettyPrint:()V
      12: return

  private void configurePrettyPrint();
    Code:
       0: aload_0
       1: getfield      #17                 // Field prettyPrint:Ljava/lang/Boolean;
       4: ifnull        25
       7: aload_0
       8: getfield      #10                 // Field objectMapper:Lorg/codehaus/jackson/map/ObjectMapper;
      11: getstatic     #18                 // Field org/codehaus/jackson/map/SerializationConfig$Feature.INDENT_OUTPUT:Lorg/codehaus/jackson/map/SerializationConfig$Feature;
      14: aload_0
      15: getfield      #17                 // Field prettyPrint:Ljava/lang/Boolean;
      18: invokevirtual #19                 // Method java/lang/Boolean.booleanValue:()Z
      21: invokevirtual #20                 // Method org/codehaus/jackson/map/ObjectMapper.configure:(Lorg/codehaus/jackson/map/SerializationConfig$Feature;Z)Lorg/codehaus/jackson/map/ObjectMapper;
      24: pop
      25: return

  public boolean canRead(java.lang.Class<?>, org.springframework.http.MediaType);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: aload_2
       4: invokevirtual #21                 // Method canRead:(Ljava/lang/reflect/Type;Ljava/lang/Class;Lorg/springframework/http/MediaType;)Z
       7: ireturn

  public boolean canRead(java.lang.reflect.Type, java.lang.Class<?>, org.springframework.http.MediaType);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #22                 // Method getJavaType:(Ljava/lang/reflect/Type;Ljava/lang/Class;)Lorg/codehaus/jackson/type/JavaType;
       6: astore        4
       8: aload_0
       9: getfield      #10                 // Field objectMapper:Lorg/codehaus/jackson/map/ObjectMapper;
      12: aload         4
      14: invokevirtual #23                 // Method org/codehaus/jackson/map/ObjectMapper.canDeserialize:(Lorg/codehaus/jackson/type/JavaType;)Z
      17: ifeq          32
      20: aload_0
      21: aload_3
      22: invokevirtual #24                 // Method canRead:(Lorg/springframework/http/MediaType;)Z
      25: ifeq          32
      28: iconst_1
      29: goto          33
      32: iconst_0
      33: ireturn

  public boolean canWrite(java.lang.Class<?>, org.springframework.http.MediaType);
    Code:
       0: aload_0
       1: getfield      #10                 // Field objectMapper:Lorg/codehaus/jackson/map/ObjectMapper;
       4: aload_1
       5: invokevirtual #25                 // Method org/codehaus/jackson/map/ObjectMapper.canSerialize:(Ljava/lang/Class;)Z
       8: ifeq          23
      11: aload_0
      12: aload_2
      13: invokevirtual #26                 // Method canWrite:(Lorg/springframework/http/MediaType;)Z
      16: ifeq          23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: ireturn

  protected boolean supports(java.lang.Class<?>);
    Code:
       0: new           #27                 // class java/lang/UnsupportedOperationException
       3: dup
       4: invokespecial #28                 // Method java/lang/UnsupportedOperationException."<init>":()V
       7: athrow

  protected java.lang.Object readInternal(java.lang.Class<?>, org.springframework.http.HttpInputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotReadableException;
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: invokevirtual #22                 // Method getJavaType:(Ljava/lang/reflect/Type;Ljava/lang/Class;)Lorg/codehaus/jackson/type/JavaType;
       6: astore_3
       7: aload_0
       8: aload_3
       9: aload_2
      10: invokespecial #29                 // Method readJavaType:(Lorg/codehaus/jackson/type/JavaType;Lorg/springframework/http/HttpInputMessage;)Ljava/lang/Object;
      13: areturn

  public java.lang.Object read(java.lang.reflect.Type, java.lang.Class<?>, org.springframework.http.HttpInputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotReadableException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #22                 // Method getJavaType:(Ljava/lang/reflect/Type;Ljava/lang/Class;)Lorg/codehaus/jackson/type/JavaType;
       6: astore        4
       8: aload_0
       9: aload         4
      11: aload_3
      12: invokespecial #29                 // Method readJavaType:(Lorg/codehaus/jackson/type/JavaType;Lorg/springframework/http/HttpInputMessage;)Ljava/lang/Object;
      15: areturn

  private java.lang.Object readJavaType(org.codehaus.jackson.type.JavaType, org.springframework.http.HttpInputMessage);
    Code:
       0: aload_0
       1: getfield      #10                 // Field objectMapper:Lorg/codehaus/jackson/map/ObjectMapper;
       4: aload_2
       5: invokeinterface #30,  1           // InterfaceMethod org/springframework/http/HttpInputMessage.getBody:()Ljava/io/InputStream;
      10: aload_1
      11: invokevirtual #31                 // Method org/codehaus/jackson/map/ObjectMapper.readValue:(Ljava/io/InputStream;Lorg/codehaus/jackson/type/JavaType;)Ljava/lang/Object;
      14: areturn
      15: astore_3
      16: new           #33                 // class org/springframework/http/converter/HttpMessageNotReadableException
      19: dup
      20: new           #34                 // class java/lang/StringBuilder
      23: dup
      24: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
      27: ldc           #36                 // String Could not read JSON:
      29: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      32: aload_3
      33: invokevirtual #38                 // Method java/io/IOException.getMessage:()Ljava/lang/String;
      36: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: invokevirtual #39                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      42: aload_3
      43: invokespecial #40                 // Method org/springframework/http/converter/HttpMessageNotReadableException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      46: athrow
    Exception table:
       from    to  target type
           0    14    15   Class java/io/IOException

  protected void writeInternal(java.lang.Object, org.springframework.http.HttpOutputMessage) throws java.io.IOException, org.springframework.http.converter.HttpMessageNotWritableException;
    Code:
       0: aload_0
       1: aload_2
       2: invokeinterface #41,  1           // InterfaceMethod org/springframework/http/HttpOutputMessage.getHeaders:()Lorg/springframework/http/HttpHeaders;
       7: invokevirtual #42                 // Method org/springframework/http/HttpHeaders.getContentType:()Lorg/springframework/http/MediaType;
      10: invokevirtual #43                 // Method getJsonEncoding:(Lorg/springframework/http/MediaType;)Lorg/codehaus/jackson/JsonEncoding;
      13: astore_3
      14: aload_0
      15: getfield      #10                 // Field objectMapper:Lorg/codehaus/jackson/map/ObjectMapper;
      18: invokevirtual #44                 // Method org/codehaus/jackson/map/ObjectMapper.getJsonFactory:()Lorg/codehaus/jackson/JsonFactory;
      21: aload_2
      22: invokeinterface #45,  1           // InterfaceMethod org/springframework/http/HttpOutputMessage.getBody:()Ljava/io/OutputStream;
      27: aload_3
      28: invokevirtual #46                 // Method org/codehaus/jackson/JsonFactory.createJsonGenerator:(Ljava/io/OutputStream;Lorg/codehaus/jackson/JsonEncoding;)Lorg/codehaus/jackson/JsonGenerator;
      31: astore        4
      33: aload_0
      34: getfield      #10                 // Field objectMapper:Lorg/codehaus/jackson/map/ObjectMapper;
      37: invokevirtual #47                 // Method org/codehaus/jackson/map/ObjectMapper.getSerializationConfig:()Lorg/codehaus/jackson/map/SerializationConfig;
      40: getstatic     #18                 // Field org/codehaus/jackson/map/SerializationConfig$Feature.INDENT_OUTPUT:Lorg/codehaus/jackson/map/SerializationConfig$Feature;
      43: invokevirtual #48                 // Method org/codehaus/jackson/map/SerializationConfig.isEnabled:(Lorg/codehaus/jackson/map/SerializationConfig$Feature;)Z
      46: ifeq          55
      49: aload         4
      51: invokevirtual #49                 // Method org/codehaus/jackson/JsonGenerator.useDefaultPrettyPrinter:()Lorg/codehaus/jackson/JsonGenerator;
      54: pop
      55: aload_0
      56: getfield      #14                 // Field jsonPrefix:Ljava/lang/String;
      59: ifnull        71
      62: aload         4
      64: aload_0
      65: getfield      #14                 // Field jsonPrefix:Ljava/lang/String;
      68: invokevirtual #50                 // Method org/codehaus/jackson/JsonGenerator.writeRaw:(Ljava/lang/String;)V
      71: aload_0
      72: getfield      #10                 // Field objectMapper:Lorg/codehaus/jackson/map/ObjectMapper;
      75: aload         4
      77: aload_1
      78: invokevirtual #51                 // Method org/codehaus/jackson/map/ObjectMapper.writeValue:(Lorg/codehaus/jackson/JsonGenerator;Ljava/lang/Object;)V
      81: goto          119
      84: astore        5
      86: new           #53                 // class org/springframework/http/converter/HttpMessageNotWritableException
      89: dup
      90: new           #34                 // class java/lang/StringBuilder
      93: dup
      94: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
      97: ldc           #54                 // String Could not write JSON:
      99: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     102: aload         5
     104: invokevirtual #55                 // Method org/codehaus/jackson/JsonProcessingException.getMessage:()Ljava/lang/String;
     107: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     110: invokevirtual #39                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     113: aload         5
     115: invokespecial #56                 // Method org/springframework/http/converter/HttpMessageNotWritableException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
     118: athrow
     119: return
    Exception table:
       from    to  target type
          55    81    84   Class org/codehaus/jackson/JsonProcessingException

  protected org.codehaus.jackson.type.JavaType getJavaType(java.lang.reflect.Type, java.lang.Class<?>);
    Code:
       0: aload_0
       1: getfield      #10                 // Field objectMapper:Lorg/codehaus/jackson/map/ObjectMapper;
       4: invokevirtual #57                 // Method org/codehaus/jackson/map/ObjectMapper.getTypeFactory:()Lorg/codehaus/jackson/map/type/TypeFactory;
       7: aload_1
       8: aload_2
       9: invokevirtual #58                 // Method org/codehaus/jackson/map/type/TypeFactory.constructType:(Ljava/lang/reflect/Type;Ljava/lang/Class;)Lorg/codehaus/jackson/type/JavaType;
      12: areturn

  protected org.codehaus.jackson.JsonEncoding getJsonEncoding(org.springframework.http.MediaType);
    Code:
       0: aload_1
       1: ifnull        64
       4: aload_1
       5: invokevirtual #59                 // Method org/springframework/http/MediaType.getCharSet:()Ljava/nio/charset/Charset;
       8: ifnull        64
      11: aload_1
      12: invokevirtual #59                 // Method org/springframework/http/MediaType.getCharSet:()Ljava/nio/charset/Charset;
      15: astore_2
      16: invokestatic  #60                 // Method org/codehaus/jackson/JsonEncoding.values:()[Lorg/codehaus/jackson/JsonEncoding;
      19: astore_3
      20: aload_3
      21: arraylength
      22: istore        4
      24: iconst_0
      25: istore        5
      27: iload         5
      29: iload         4
      31: if_icmpge     64
      34: aload_3
      35: iload         5
      37: aaload
      38: astore        6
      40: aload_2
      41: invokevirtual #61                 // Method java/nio/charset/Charset.name:()Ljava/lang/String;
      44: aload         6
      46: invokevirtual #62                 // Method org/codehaus/jackson/JsonEncoding.getJavaName:()Ljava/lang/String;
      49: invokevirtual #63                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      52: ifeq          58
      55: aload         6
      57: areturn
      58: iinc          5, 1
      61: goto          27
      64: getstatic     #64                 // Field org/codehaus/jackson/JsonEncoding.UTF8:Lorg/codehaus/jackson/JsonEncoding;
      67: areturn

  static {};
    Code:
       0: ldc           #65                 // String UTF-8
       2: invokestatic  #66                 // Method java/nio/charset/Charset.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;
       5: putstatic     #4                  // Field DEFAULT_CHARSET:Ljava/nio/charset/Charset;
       8: return
}
