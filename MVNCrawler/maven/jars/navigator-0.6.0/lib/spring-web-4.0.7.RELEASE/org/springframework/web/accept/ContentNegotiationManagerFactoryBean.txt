Compiled from "ContentNegotiationManagerFactoryBean.java"
public class org.springframework.web.accept.ContentNegotiationManagerFactoryBean implements org.springframework.beans.factory.FactoryBean<org.springframework.web.accept.ContentNegotiationManager>, org.springframework.web.context.ServletContextAware, org.springframework.beans.factory.InitializingBean {
  private boolean favorPathExtension;

  private boolean favorParameter;

  private boolean ignoreAcceptHeader;

  private java.util.Map<java.lang.String, org.springframework.http.MediaType> mediaTypes;

  private java.lang.Boolean useJaf;

  private java.lang.String parameterName;

  private org.springframework.http.MediaType defaultContentType;

  private org.springframework.web.accept.ContentNegotiationManager contentNegotiationManager;

  private javax.servlet.ServletContext servletContext;

  public org.springframework.web.accept.ContentNegotiationManagerFactoryBean();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #2                  // Field favorPathExtension:Z
       9: aload_0
      10: iconst_0
      11: putfield      #3                  // Field favorParameter:Z
      14: aload_0
      15: iconst_0
      16: putfield      #4                  // Field ignoreAcceptHeader:Z
      19: aload_0
      20: new           #5                  // class java/util/HashMap
      23: dup
      24: invokespecial #6                  // Method java/util/HashMap."<init>":()V
      27: putfield      #7                  // Field mediaTypes:Ljava/util/Map;
      30: aload_0
      31: ldc           #8                  // String format
      33: putfield      #9                  // Field parameterName:Ljava/lang/String;
      36: return

  public void setFavorPathExtension(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field favorPathExtension:Z
       5: return

  public void setMediaTypes(java.util.Properties);
    Code:
       0: aload_1
       1: invokestatic  #10                 // Method org/springframework/util/CollectionUtils.isEmpty:(Ljava/util/Map;)Z
       4: ifne          80
       7: aload_1
       8: invokevirtual #11                 // Method java/util/Properties.entrySet:()Ljava/util/Set;
      11: invokeinterface #12,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      16: astore_2
      17: aload_2
      18: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      23: ifeq          80
      26: aload_2
      27: invokeinterface #14,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      32: checkcast     #15                 // class java/util/Map$Entry
      35: astore_3
      36: aload_3
      37: invokeinterface #16,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      42: checkcast     #17                 // class java/lang/String
      45: getstatic     #18                 // Field java/util/Locale.ENGLISH:Ljava/util/Locale;
      48: invokevirtual #19                 // Method java/lang/String.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;
      51: astore        4
      53: aload_0
      54: getfield      #7                  // Field mediaTypes:Ljava/util/Map;
      57: aload         4
      59: aload_3
      60: invokeinterface #20,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      65: checkcast     #17                 // class java/lang/String
      68: invokestatic  #21                 // Method org/springframework/http/MediaType.valueOf:(Ljava/lang/String;)Lorg/springframework/http/MediaType;
      71: invokeinterface #22,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      76: pop
      77: goto          17
      80: return

  public void addMediaType(java.lang.String, org.springframework.http.MediaType);
    Code:
       0: aload_0
       1: getfield      #7                  // Field mediaTypes:Ljava/util/Map;
       4: aload_1
       5: aload_2
       6: invokeinterface #22,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      11: pop
      12: return

  public void addMediaTypes(java.util.Map<java.lang.String, org.springframework.http.MediaType>);
    Code:
       0: aload_1
       1: ifnull        14
       4: aload_0
       5: getfield      #7                  // Field mediaTypes:Ljava/util/Map;
       8: aload_1
       9: invokeinterface #23,  2           // InterfaceMethod java/util/Map.putAll:(Ljava/util/Map;)V
      14: return

  public void setUseJaf(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #24                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       5: putfield      #25                 // Field useJaf:Ljava/lang/Boolean;
       8: return

  public void setFavorParameter(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #3                  // Field favorParameter:Z
       5: return

  public void setParameterName(java.lang.String);
    Code:
       0: aload_1
       1: ldc           #26                 // String parameterName is required
       3: invokestatic  #27                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: putfield      #9                  // Field parameterName:Ljava/lang/String;
      11: return

  public void setIgnoreAcceptHeader(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #4                  // Field ignoreAcceptHeader:Z
       5: return

  public void setDefaultContentType(org.springframework.http.MediaType);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #28                 // Field defaultContentType:Lorg/springframework/http/MediaType;
       5: return

  public void setServletContext(javax.servlet.ServletContext);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #29                 // Field servletContext:Ljavax/servlet/ServletContext;
       5: return

  public void afterPropertiesSet();
    Code:
       0: new           #30                 // class java/util/ArrayList
       3: dup
       4: invokespecial #31                 // Method java/util/ArrayList."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #2                  // Field favorPathExtension:Z
      12: ifeq          79
      15: aload_0
      16: getfield      #29                 // Field servletContext:Ljavax/servlet/ServletContext;
      19: ifnull        41
      22: new           #32                 // class org/springframework/web/accept/ServletPathExtensionContentNegotiationStrategy
      25: dup
      26: aload_0
      27: getfield      #29                 // Field servletContext:Ljavax/servlet/ServletContext;
      30: aload_0
      31: getfield      #7                  // Field mediaTypes:Ljava/util/Map;
      34: invokespecial #33                 // Method org/springframework/web/accept/ServletPathExtensionContentNegotiationStrategy."<init>":(Ljavax/servlet/ServletContext;Ljava/util/Map;)V
      37: astore_2
      38: goto          53
      41: new           #34                 // class org/springframework/web/accept/PathExtensionContentNegotiationStrategy
      44: dup
      45: aload_0
      46: getfield      #7                  // Field mediaTypes:Ljava/util/Map;
      49: invokespecial #35                 // Method org/springframework/web/accept/PathExtensionContentNegotiationStrategy."<init>":(Ljava/util/Map;)V
      52: astore_2
      53: aload_0
      54: getfield      #25                 // Field useJaf:Ljava/lang/Boolean;
      57: ifnull        71
      60: aload_2
      61: aload_0
      62: getfield      #25                 // Field useJaf:Ljava/lang/Boolean;
      65: invokevirtual #36                 // Method java/lang/Boolean.booleanValue:()Z
      68: invokevirtual #37                 // Method org/springframework/web/accept/PathExtensionContentNegotiationStrategy.setUseJaf:(Z)V
      71: aload_1
      72: aload_2
      73: invokeinterface #38,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      78: pop
      79: aload_0
      80: getfield      #3                  // Field favorParameter:Z
      83: ifeq          114
      86: new           #39                 // class org/springframework/web/accept/ParameterContentNegotiationStrategy
      89: dup
      90: aload_0
      91: getfield      #7                  // Field mediaTypes:Ljava/util/Map;
      94: invokespecial #40                 // Method org/springframework/web/accept/ParameterContentNegotiationStrategy."<init>":(Ljava/util/Map;)V
      97: astore_2
      98: aload_2
      99: aload_0
     100: getfield      #9                  // Field parameterName:Ljava/lang/String;
     103: invokevirtual #41                 // Method org/springframework/web/accept/ParameterContentNegotiationStrategy.setParameterName:(Ljava/lang/String;)V
     106: aload_1
     107: aload_2
     108: invokeinterface #38,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     113: pop
     114: aload_0
     115: getfield      #4                  // Field ignoreAcceptHeader:Z
     118: ifne          135
     121: aload_1
     122: new           #42                 // class org/springframework/web/accept/HeaderContentNegotiationStrategy
     125: dup
     126: invokespecial #43                 // Method org/springframework/web/accept/HeaderContentNegotiationStrategy."<init>":()V
     129: invokeinterface #38,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     134: pop
     135: aload_0
     136: getfield      #28                 // Field defaultContentType:Lorg/springframework/http/MediaType;
     139: ifnull        160
     142: aload_1
     143: new           #44                 // class org/springframework/web/accept/FixedContentNegotiationStrategy
     146: dup
     147: aload_0
     148: getfield      #28                 // Field defaultContentType:Lorg/springframework/http/MediaType;
     151: invokespecial #45                 // Method org/springframework/web/accept/FixedContentNegotiationStrategy."<init>":(Lorg/springframework/http/MediaType;)V
     154: invokeinterface #38,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     159: pop
     160: aload_0
     161: new           #46                 // class org/springframework/web/accept/ContentNegotiationManager
     164: dup
     165: aload_1
     166: invokespecial #47                 // Method org/springframework/web/accept/ContentNegotiationManager."<init>":(Ljava/util/Collection;)V
     169: putfield      #48                 // Field contentNegotiationManager:Lorg/springframework/web/accept/ContentNegotiationManager;
     172: return

  public org.springframework.web.accept.ContentNegotiationManager getObject();
    Code:
       0: aload_0
       1: getfield      #48                 // Field contentNegotiationManager:Lorg/springframework/web/accept/ContentNegotiationManager;
       4: areturn

  public java.lang.Class<?> getObjectType();
    Code:
       0: ldc           #46                 // class org/springframework/web/accept/ContentNegotiationManager
       2: areturn

  public boolean isSingleton();
    Code:
       0: iconst_1
       1: ireturn

  public java.lang.Object getObject() throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokevirtual #49                 // Method getObject:()Lorg/springframework/web/accept/ContentNegotiationManager;
       4: areturn
}
