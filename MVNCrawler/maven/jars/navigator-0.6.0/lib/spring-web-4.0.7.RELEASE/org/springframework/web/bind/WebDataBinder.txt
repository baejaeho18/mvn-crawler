Compiled from "WebDataBinder.java"
public class org.springframework.web.bind.WebDataBinder extends org.springframework.validation.DataBinder {
  public static final java.lang.String DEFAULT_FIELD_MARKER_PREFIX;

  public static final java.lang.String DEFAULT_FIELD_DEFAULT_PREFIX;

  private java.lang.String fieldMarkerPrefix;

  private java.lang.String fieldDefaultPrefix;

  private boolean bindEmptyMultipartFiles;

  public org.springframework.web.bind.WebDataBinder(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method org/springframework/validation/DataBinder."<init>":(Ljava/lang/Object;)V
       5: aload_0
       6: ldc           #3                  // String _
       8: putfield      #4                  // Field fieldMarkerPrefix:Ljava/lang/String;
      11: aload_0
      12: ldc           #5                  // String !
      14: putfield      #6                  // Field fieldDefaultPrefix:Ljava/lang/String;
      17: aload_0
      18: iconst_1
      19: putfield      #7                  // Field bindEmptyMultipartFiles:Z
      22: return

  public org.springframework.web.bind.WebDataBinder(java.lang.Object, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #8                  // Method org/springframework/validation/DataBinder."<init>":(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: ldc           #3                  // String _
       9: putfield      #4                  // Field fieldMarkerPrefix:Ljava/lang/String;
      12: aload_0
      13: ldc           #5                  // String !
      15: putfield      #6                  // Field fieldDefaultPrefix:Ljava/lang/String;
      18: aload_0
      19: iconst_1
      20: putfield      #7                  // Field bindEmptyMultipartFiles:Z
      23: return

  public void setFieldMarkerPrefix(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field fieldMarkerPrefix:Ljava/lang/String;
       5: return

  public java.lang.String getFieldMarkerPrefix();
    Code:
       0: aload_0
       1: getfield      #4                  // Field fieldMarkerPrefix:Ljava/lang/String;
       4: areturn

  public void setFieldDefaultPrefix(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field fieldDefaultPrefix:Ljava/lang/String;
       5: return

  public java.lang.String getFieldDefaultPrefix();
    Code:
       0: aload_0
       1: getfield      #6                  // Field fieldDefaultPrefix:Ljava/lang/String;
       4: areturn

  public void setBindEmptyMultipartFiles(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #7                  // Field bindEmptyMultipartFiles:Z
       5: return

  public boolean isBindEmptyMultipartFiles();
    Code:
       0: aload_0
       1: getfield      #7                  // Field bindEmptyMultipartFiles:Z
       4: ireturn

  protected void doBind(org.springframework.beans.MutablePropertyValues);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #9                  // Method checkFieldDefaults:(Lorg/springframework/beans/MutablePropertyValues;)V
       5: aload_0
       6: aload_1
       7: invokevirtual #10                 // Method checkFieldMarkers:(Lorg/springframework/beans/MutablePropertyValues;)V
      10: aload_0
      11: aload_1
      12: invokespecial #11                 // Method org/springframework/validation/DataBinder.doBind:(Lorg/springframework/beans/MutablePropertyValues;)V
      15: return

  protected void checkFieldDefaults(org.springframework.beans.MutablePropertyValues);
    Code:
       0: aload_0
       1: invokevirtual #12                 // Method getFieldDefaultPrefix:()Ljava/lang/String;
       4: ifnull        115
       7: aload_0
       8: invokevirtual #12                 // Method getFieldDefaultPrefix:()Ljava/lang/String;
      11: astore_2
      12: aload_1
      13: invokevirtual #13                 // Method org/springframework/beans/MutablePropertyValues.getPropertyValues:()[Lorg/springframework/beans/PropertyValue;
      16: astore_3
      17: aload_3
      18: astore        4
      20: aload         4
      22: arraylength
      23: istore        5
      25: iconst_0
      26: istore        6
      28: iload         6
      30: iload         5
      32: if_icmpge     115
      35: aload         4
      37: iload         6
      39: aaload
      40: astore        7
      42: aload         7
      44: invokevirtual #14                 // Method org/springframework/beans/PropertyValue.getName:()Ljava/lang/String;
      47: aload_2
      48: invokevirtual #15                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      51: ifeq          109
      54: aload         7
      56: invokevirtual #14                 // Method org/springframework/beans/PropertyValue.getName:()Ljava/lang/String;
      59: aload_2
      60: invokevirtual #16                 // Method java/lang/String.length:()I
      63: invokevirtual #17                 // Method java/lang/String.substring:(I)Ljava/lang/String;
      66: astore        8
      68: aload_0
      69: invokevirtual #18                 // Method getPropertyAccessor:()Lorg/springframework/beans/ConfigurablePropertyAccessor;
      72: aload         8
      74: invokeinterface #19,  2           // InterfaceMethod org/springframework/beans/ConfigurablePropertyAccessor.isWritableProperty:(Ljava/lang/String;)Z
      79: ifeq          103
      82: aload_1
      83: aload         8
      85: invokevirtual #20                 // Method org/springframework/beans/MutablePropertyValues.contains:(Ljava/lang/String;)Z
      88: ifne          103
      91: aload_1
      92: aload         8
      94: aload         7
      96: invokevirtual #21                 // Method org/springframework/beans/PropertyValue.getValue:()Ljava/lang/Object;
      99: invokevirtual #22                 // Method org/springframework/beans/MutablePropertyValues.add:(Ljava/lang/String;Ljava/lang/Object;)Lorg/springframework/beans/MutablePropertyValues;
     102: pop
     103: aload_1
     104: aload         7
     106: invokevirtual #23                 // Method org/springframework/beans/MutablePropertyValues.removePropertyValue:(Lorg/springframework/beans/PropertyValue;)V
     109: iinc          6, 1
     112: goto          28
     115: return

  protected void checkFieldMarkers(org.springframework.beans.MutablePropertyValues);
    Code:
       0: aload_0
       1: invokevirtual #24                 // Method getFieldMarkerPrefix:()Ljava/lang/String;
       4: ifnull        131
       7: aload_0
       8: invokevirtual #24                 // Method getFieldMarkerPrefix:()Ljava/lang/String;
      11: astore_2
      12: aload_1
      13: invokevirtual #13                 // Method org/springframework/beans/MutablePropertyValues.getPropertyValues:()[Lorg/springframework/beans/PropertyValue;
      16: astore_3
      17: aload_3
      18: astore        4
      20: aload         4
      22: arraylength
      23: istore        5
      25: iconst_0
      26: istore        6
      28: iload         6
      30: iload         5
      32: if_icmpge     131
      35: aload         4
      37: iload         6
      39: aaload
      40: astore        7
      42: aload         7
      44: invokevirtual #14                 // Method org/springframework/beans/PropertyValue.getName:()Ljava/lang/String;
      47: aload_2
      48: invokevirtual #15                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      51: ifeq          125
      54: aload         7
      56: invokevirtual #14                 // Method org/springframework/beans/PropertyValue.getName:()Ljava/lang/String;
      59: aload_2
      60: invokevirtual #16                 // Method java/lang/String.length:()I
      63: invokevirtual #17                 // Method java/lang/String.substring:(I)Ljava/lang/String;
      66: astore        8
      68: aload_0
      69: invokevirtual #18                 // Method getPropertyAccessor:()Lorg/springframework/beans/ConfigurablePropertyAccessor;
      72: aload         8
      74: invokeinterface #19,  2           // InterfaceMethod org/springframework/beans/ConfigurablePropertyAccessor.isWritableProperty:(Ljava/lang/String;)Z
      79: ifeq          119
      82: aload_1
      83: aload         8
      85: invokevirtual #20                 // Method org/springframework/beans/MutablePropertyValues.contains:(Ljava/lang/String;)Z
      88: ifne          119
      91: aload_0
      92: invokevirtual #18                 // Method getPropertyAccessor:()Lorg/springframework/beans/ConfigurablePropertyAccessor;
      95: aload         8
      97: invokeinterface #25,  2           // InterfaceMethod org/springframework/beans/ConfigurablePropertyAccessor.getPropertyType:(Ljava/lang/String;)Ljava/lang/Class;
     102: astore        9
     104: aload_1
     105: aload         8
     107: aload_0
     108: aload         8
     110: aload         9
     112: invokevirtual #26                 // Method getEmptyValue:(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;
     115: invokevirtual #22                 // Method org/springframework/beans/MutablePropertyValues.add:(Ljava/lang/String;Ljava/lang/Object;)Lorg/springframework/beans/MutablePropertyValues;
     118: pop
     119: aload_1
     120: aload         7
     122: invokevirtual #23                 // Method org/springframework/beans/MutablePropertyValues.removePropertyValue:(Lorg/springframework/beans/PropertyValue;)V
     125: iinc          6, 1
     128: goto          28
     131: return

  protected java.lang.Object getEmptyValue(java.lang.String, java.lang.Class<?>);
    Code:
       0: aload_2
       1: ifnull        14
       4: getstatic     #27                 // Field java/lang/Boolean.TYPE:Ljava/lang/Class;
       7: aload_2
       8: invokevirtual #28                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      11: ifne          23
      14: ldc           #29                 // class java/lang/Boolean
      16: aload_2
      17: invokevirtual #28                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      20: ifeq          27
      23: getstatic     #30                 // Field java/lang/Boolean.FALSE:Ljava/lang/Boolean;
      26: areturn
      27: aload_2
      28: ifnull        47
      31: aload_2
      32: invokevirtual #31                 // Method java/lang/Class.isArray:()Z
      35: ifeq          47
      38: aload_2
      39: invokevirtual #32                 // Method java/lang/Class.getComponentType:()Ljava/lang/Class;
      42: iconst_0
      43: invokestatic  #33                 // Method java/lang/reflect/Array.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;
      46: areturn
      47: aconst_null
      48: areturn

  protected void bindMultipart(java.util.Map<java.lang.String, java.util.List<org.springframework.web.multipart.MultipartFile>>, org.springframework.beans.MutablePropertyValues);
    Code:
       0: aload_1
       1: invokeinterface #34,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
       6: invokeinterface #35,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      11: astore_3
      12: aload_3
      13: invokeinterface #36,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      18: ifeq          121
      21: aload_3
      22: invokeinterface #37,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      27: checkcast     #38                 // class java/util/Map$Entry
      30: astore        4
      32: aload         4
      34: invokeinterface #39,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      39: checkcast     #40                 // class java/lang/String
      42: astore        5
      44: aload         4
      46: invokeinterface #41,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      51: checkcast     #42                 // class java/util/List
      54: astore        6
      56: aload         6
      58: invokeinterface #43,  1           // InterfaceMethod java/util/List.size:()I
      63: iconst_1
      64: if_icmpne     109
      67: aload         6
      69: iconst_0
      70: invokeinterface #44,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      75: checkcast     #45                 // class org/springframework/web/multipart/MultipartFile
      78: astore        7
      80: aload_0
      81: invokevirtual #46                 // Method isBindEmptyMultipartFiles:()Z
      84: ifne          97
      87: aload         7
      89: invokeinterface #47,  1           // InterfaceMethod org/springframework/web/multipart/MultipartFile.isEmpty:()Z
      94: ifne          106
      97: aload_2
      98: aload         5
     100: aload         7
     102: invokevirtual #22                 // Method org/springframework/beans/MutablePropertyValues.add:(Ljava/lang/String;Ljava/lang/Object;)Lorg/springframework/beans/MutablePropertyValues;
     105: pop
     106: goto          118
     109: aload_2
     110: aload         5
     112: aload         6
     114: invokevirtual #22                 // Method org/springframework/beans/MutablePropertyValues.add:(Ljava/lang/String;Ljava/lang/Object;)Lorg/springframework/beans/MutablePropertyValues;
     117: pop
     118: goto          12
     121: return
}
