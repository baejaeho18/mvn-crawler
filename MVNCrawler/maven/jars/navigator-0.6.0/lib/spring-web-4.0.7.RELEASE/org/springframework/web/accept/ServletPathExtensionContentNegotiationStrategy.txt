Compiled from "ServletPathExtensionContentNegotiationStrategy.java"
public class org.springframework.web.accept.ServletPathExtensionContentNegotiationStrategy extends org.springframework.web.accept.PathExtensionContentNegotiationStrategy {
  private final javax.servlet.ServletContext servletContext;

  public org.springframework.web.accept.ServletPathExtensionContentNegotiationStrategy(javax.servlet.ServletContext, java.util.Map<java.lang.String, org.springframework.http.MediaType>);
    Code:
       0: aload_0
       1: aload_2
       2: invokespecial #1                  // Method org/springframework/web/accept/PathExtensionContentNegotiationStrategy."<init>":(Ljava/util/Map;)V
       5: aload_1
       6: ldc           #2                  // String ServletContext is required!
       8: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      11: aload_0
      12: aload_1
      13: putfield      #4                  // Field servletContext:Ljavax/servlet/ServletContext;
      16: return

  public org.springframework.web.accept.ServletPathExtensionContentNegotiationStrategy(javax.servlet.ServletContext);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: invokespecial #5                  // Method "<init>":(Ljavax/servlet/ServletContext;Ljava/util/Map;)V
       6: return

  protected org.springframework.http.MediaType handleNoMatch(org.springframework.web.context.request.NativeWebRequest, java.lang.String);
    Code:
       0: aconst_null
       1: astore_3
       2: aload_0
       3: getfield      #4                  // Field servletContext:Ljavax/servlet/ServletContext;
       6: ifnull        53
       9: aload_0
      10: getfield      #4                  // Field servletContext:Ljavax/servlet/ServletContext;
      13: new           #6                  // class java/lang/StringBuilder
      16: dup
      17: invokespecial #7                  // Method java/lang/StringBuilder."<init>":()V
      20: ldc           #8                  // String file.
      22: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      25: aload_2
      26: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: invokevirtual #10                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      32: invokeinterface #11,  2           // InterfaceMethod javax/servlet/ServletContext.getMimeType:(Ljava/lang/String;)Ljava/lang/String;
      37: astore        4
      39: aload         4
      41: invokestatic  #12                 // Method org/springframework/util/StringUtils.hasText:(Ljava/lang/String;)Z
      44: ifeq          53
      47: aload         4
      49: invokestatic  #13                 // Method org/springframework/http/MediaType.parseMediaType:(Ljava/lang/String;)Lorg/springframework/http/MediaType;
      52: astore_3
      53: aload_3
      54: ifnull        67
      57: getstatic     #14                 // Field org/springframework/http/MediaType.APPLICATION_OCTET_STREAM:Lorg/springframework/http/MediaType;
      60: aload_3
      61: invokevirtual #15                 // Method org/springframework/http/MediaType.equals:(Ljava/lang/Object;)Z
      64: ifeq          83
      67: aload_0
      68: aload_1
      69: aload_2
      70: invokespecial #16                 // Method org/springframework/web/accept/PathExtensionContentNegotiationStrategy.handleNoMatch:(Lorg/springframework/web/context/request/NativeWebRequest;Ljava/lang/String;)Lorg/springframework/http/MediaType;
      73: astore        4
      75: aload         4
      77: ifnull        83
      80: aload         4
      82: astore_3
      83: aload_3
      84: areturn
}
