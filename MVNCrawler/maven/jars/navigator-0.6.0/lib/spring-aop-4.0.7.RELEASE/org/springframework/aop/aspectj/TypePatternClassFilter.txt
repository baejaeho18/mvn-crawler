Compiled from "TypePatternClassFilter.java"
public class org.springframework.aop.aspectj.TypePatternClassFilter implements org.springframework.aop.ClassFilter {
  private java.lang.String typePattern;

  private org.aspectj.weaver.tools.TypePatternMatcher aspectJTypePatternMatcher;

  public org.springframework.aop.aspectj.TypePatternClassFilter();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public org.springframework.aop.aspectj.TypePatternClassFilter(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: invokevirtual #2                  // Method setTypePattern:(Ljava/lang/String;)V
       9: return

  public void setTypePattern(java.lang.String);
    Code:
       0: aload_1
       1: invokestatic  #3                  // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;)V
       4: aload_0
       5: aload_1
       6: putfield      #4                  // Field typePattern:Ljava/lang/String;
       9: aload_0
      10: invokestatic  #5                  // Method org/aspectj/weaver/tools/PointcutParser.getPointcutParserSupportingAllPrimitivesAndUsingContextClassloaderForResolution:()Lorg/aspectj/weaver/tools/PointcutParser;
      13: aload_0
      14: aload_1
      15: invokespecial #6                  // Method replaceBooleanOperators:(Ljava/lang/String;)Ljava/lang/String;
      18: invokevirtual #7                  // Method org/aspectj/weaver/tools/PointcutParser.parseTypePattern:(Ljava/lang/String;)Lorg/aspectj/weaver/tools/TypePatternMatcher;
      21: putfield      #8                  // Field aspectJTypePatternMatcher:Lorg/aspectj/weaver/tools/TypePatternMatcher;
      24: return

  public java.lang.String getTypePattern();
    Code:
       0: aload_0
       1: getfield      #4                  // Field typePattern:Ljava/lang/String;
       4: areturn

  public boolean matches(java.lang.Class<?>);
    Code:
       0: aload_0
       1: getfield      #8                  // Field aspectJTypePatternMatcher:Lorg/aspectj/weaver/tools/TypePatternMatcher;
       4: ifnonnull     17
       7: new           #9                  // class java/lang/IllegalStateException
      10: dup
      11: ldc           #10                 // String No \'typePattern\' has been set via ctor/setter.
      13: invokespecial #11                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #8                  // Field aspectJTypePatternMatcher:Lorg/aspectj/weaver/tools/TypePatternMatcher;
      21: aload_1
      22: invokeinterface #12,  2           // InterfaceMethod org/aspectj/weaver/tools/TypePatternMatcher.matches:(Ljava/lang/Class;)Z
      27: ireturn

  private java.lang.String replaceBooleanOperators(java.lang.String);
    Code:
       0: aload_1
       1: ldc           #13                 // String  and
       3: ldc           #14                 // String  &&
       5: invokestatic  #15                 // Method org/springframework/util/StringUtils.replace:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
       8: astore_1
       9: aload_1
      10: ldc           #16                 // String  or
      12: ldc           #17                 // String  ||
      14: invokestatic  #15                 // Method org/springframework/util/StringUtils.replace:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      17: astore_1
      18: aload_1
      19: ldc           #18                 // String  not
      21: ldc           #19                 // String  !
      23: invokestatic  #15                 // Method org/springframework/util/StringUtils.replace:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      26: astore_1
      27: aload_1
      28: areturn
}
