Compiled from "AspectJAroundAdvice.java"
public class org.springframework.aop.aspectj.AspectJAroundAdvice extends org.springframework.aop.aspectj.AbstractAspectJAdvice implements org.aopalliance.intercept.MethodInterceptor {
  public org.springframework.aop.aspectj.AspectJAroundAdvice(java.lang.reflect.Method, org.springframework.aop.aspectj.AspectJExpressionPointcut, org.springframework.aop.aspectj.AspectInstanceFactory);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokespecial #1                  // Method org/springframework/aop/aspectj/AbstractAspectJAdvice."<init>":(Ljava/lang/reflect/Method;Lorg/springframework/aop/aspectj/AspectJExpressionPointcut;Lorg/springframework/aop/aspectj/AspectInstanceFactory;)V
       7: return

  public boolean isBeforeAdvice();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isAfterAdvice();
    Code:
       0: iconst_0
       1: ireturn

  protected boolean supportsProceedingJoinPoint();
    Code:
       0: iconst_1
       1: ireturn

  public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable;
    Code:
       0: aload_1
       1: instanceof    #2                  // class org/springframework/aop/ProxyMethodInvocation
       4: ifne          34
       7: new           #3                  // class java/lang/IllegalStateException
      10: dup
      11: new           #4                  // class java/lang/StringBuilder
      14: dup
      15: invokespecial #5                  // Method java/lang/StringBuilder."<init>":()V
      18: ldc           #6                  // String MethodInvocation is not a Spring ProxyMethodInvocation:
      20: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      23: aload_1
      24: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      27: invokevirtual #9                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      30: invokespecial #10                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      33: athrow
      34: aload_1
      35: checkcast     #2                  // class org/springframework/aop/ProxyMethodInvocation
      38: astore_2
      39: aload_0
      40: aload_2
      41: invokevirtual #11                 // Method lazyGetProceedingJoinPoint:(Lorg/springframework/aop/ProxyMethodInvocation;)Lorg/aspectj/lang/ProceedingJoinPoint;
      44: astore_3
      45: aload_0
      46: aload_2
      47: invokevirtual #12                 // Method getJoinPointMatch:(Lorg/springframework/aop/ProxyMethodInvocation;)Lorg/aspectj/weaver/tools/JoinPointMatch;
      50: astore        4
      52: aload_0
      53: aload_3
      54: aload         4
      56: aconst_null
      57: aconst_null
      58: invokevirtual #13                 // Method invokeAdviceMethod:(Lorg/aspectj/lang/JoinPoint;Lorg/aspectj/weaver/tools/JoinPointMatch;Ljava/lang/Object;Ljava/lang/Throwable;)Ljava/lang/Object;
      61: areturn

  protected org.aspectj.lang.ProceedingJoinPoint lazyGetProceedingJoinPoint(org.springframework.aop.ProxyMethodInvocation);
    Code:
       0: new           #14                 // class org/springframework/aop/aspectj/MethodInvocationProceedingJoinPoint
       3: dup
       4: aload_1
       5: invokespecial #15                 // Method org/springframework/aop/aspectj/MethodInvocationProceedingJoinPoint."<init>":(Lorg/springframework/aop/ProxyMethodInvocation;)V
       8: areturn
}
