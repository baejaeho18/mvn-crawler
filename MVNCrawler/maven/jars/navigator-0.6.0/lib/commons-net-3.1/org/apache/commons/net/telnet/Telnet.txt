Compiled from "Telnet.java"
class org.apache.commons.net.telnet.Telnet extends org.apache.commons.net.SocketClient {
  static final boolean debug;

  static final boolean debugoptions;

  static final byte[] _COMMAND_DO;

  static final byte[] _COMMAND_DONT;

  static final byte[] _COMMAND_WILL;

  static final byte[] _COMMAND_WONT;

  static final byte[] _COMMAND_SB;

  static final byte[] _COMMAND_SE;

  static final int _WILL_MASK;

  static final int _DO_MASK;

  static final int _REQUESTED_WILL_MASK;

  static final int _REQUESTED_DO_MASK;

  static final int DEFAULT_PORT;

  int[] _doResponse;

  int[] _willResponse;

  int[] _options;

  protected static final int TERMINAL_TYPE;

  protected static final int TERMINAL_TYPE_SEND;

  protected static final int TERMINAL_TYPE_IS;

  static final byte[] _COMMAND_IS;

  private java.lang.String terminalType;

  private org.apache.commons.net.telnet.TelnetOptionHandler[] optionHandlers;

  static final byte[] _COMMAND_AYT;

  private java.lang.Object aytMonitor;

  private volatile boolean aytFlag;

  private volatile java.io.OutputStream spyStream;

  private org.apache.commons.net.telnet.TelnetNotificationHandler __notifhand;

  org.apache.commons.net.telnet.Telnet();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/commons/net/SocketClient."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #2                  // Field terminalType:Ljava/lang/String;
       9: aload_0
      10: new           #3                  // class java/lang/Object
      13: dup
      14: invokespecial #4                  // Method java/lang/Object."<init>":()V
      17: putfield      #5                  // Field aytMonitor:Ljava/lang/Object;
      20: aload_0
      21: iconst_1
      22: putfield      #6                  // Field aytFlag:Z
      25: aload_0
      26: aconst_null
      27: putfield      #7                  // Field spyStream:Ljava/io/OutputStream;
      30: aload_0
      31: aconst_null
      32: putfield      #8                  // Field __notifhand:Lorg/apache/commons/net/telnet/TelnetNotificationHandler;
      35: aload_0
      36: bipush        23
      38: invokevirtual #9                  // Method setDefaultPort:(I)V
      41: aload_0
      42: sipush        256
      45: newarray       int
      47: putfield      #10                 // Field _doResponse:[I
      50: aload_0
      51: sipush        256
      54: newarray       int
      56: putfield      #11                 // Field _willResponse:[I
      59: aload_0
      60: sipush        256
      63: newarray       int
      65: putfield      #12                 // Field _options:[I
      68: aload_0
      69: sipush        256
      72: anewarray     #13                 // class org/apache/commons/net/telnet/TelnetOptionHandler
      75: putfield      #14                 // Field optionHandlers:[Lorg/apache/commons/net/telnet/TelnetOptionHandler;
      78: return

  org.apache.commons.net.telnet.Telnet(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/commons/net/SocketClient."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #2                  // Field terminalType:Ljava/lang/String;
       9: aload_0
      10: new           #3                  // class java/lang/Object
      13: dup
      14: invokespecial #4                  // Method java/lang/Object."<init>":()V
      17: putfield      #5                  // Field aytMonitor:Ljava/lang/Object;
      20: aload_0
      21: iconst_1
      22: putfield      #6                  // Field aytFlag:Z
      25: aload_0
      26: aconst_null
      27: putfield      #7                  // Field spyStream:Ljava/io/OutputStream;
      30: aload_0
      31: aconst_null
      32: putfield      #8                  // Field __notifhand:Lorg/apache/commons/net/telnet/TelnetNotificationHandler;
      35: aload_0
      36: bipush        23
      38: invokevirtual #9                  // Method setDefaultPort:(I)V
      41: aload_0
      42: sipush        256
      45: newarray       int
      47: putfield      #10                 // Field _doResponse:[I
      50: aload_0
      51: sipush        256
      54: newarray       int
      56: putfield      #11                 // Field _willResponse:[I
      59: aload_0
      60: sipush        256
      63: newarray       int
      65: putfield      #12                 // Field _options:[I
      68: aload_0
      69: aload_1
      70: putfield      #2                  // Field terminalType:Ljava/lang/String;
      73: aload_0
      74: sipush        256
      77: anewarray     #13                 // class org/apache/commons/net/telnet/TelnetOptionHandler
      80: putfield      #14                 // Field optionHandlers:[Lorg/apache/commons/net/telnet/TelnetOptionHandler;
      83: return

  boolean _stateIsWill(int);
    Code:
       0: aload_0
       1: getfield      #12                 // Field _options:[I
       4: iload_1
       5: iaload
       6: iconst_1
       7: iand
       8: ifeq          15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  boolean _stateIsWont(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #15                 // Method _stateIsWill:(I)Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  boolean _stateIsDo(int);
    Code:
       0: aload_0
       1: getfield      #12                 // Field _options:[I
       4: iload_1
       5: iaload
       6: iconst_2
       7: iand
       8: ifeq          15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  boolean _stateIsDont(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #16                 // Method _stateIsDo:(I)Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  boolean _requestedWill(int);
    Code:
       0: aload_0
       1: getfield      #12                 // Field _options:[I
       4: iload_1
       5: iaload
       6: iconst_4
       7: iand
       8: ifeq          15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  boolean _requestedWont(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #17                 // Method _requestedWill:(I)Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  boolean _requestedDo(int);
    Code:
       0: aload_0
       1: getfield      #12                 // Field _options:[I
       4: iload_1
       5: iaload
       6: bipush        8
       8: iand
       9: ifeq          16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: ireturn

  boolean _requestedDont(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #18                 // Method _requestedDo:(I)Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  void _setWill(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #12                 // Field _options:[I
       4: iload_1
       5: dup2
       6: iaload
       7: iconst_1
       8: ior
       9: iastore
      10: aload_0
      11: iload_1
      12: invokevirtual #17                 // Method _requestedWill:(I)Z
      15: ifeq          56
      18: aload_0
      19: getfield      #14                 // Field optionHandlers:[Lorg/apache/commons/net/telnet/TelnetOptionHandler;
      22: iload_1
      23: aaload
      24: ifnull        56
      27: aload_0
      28: getfield      #14                 // Field optionHandlers:[Lorg/apache/commons/net/telnet/TelnetOptionHandler;
      31: iload_1
      32: aaload
      33: iconst_1
      34: invokevirtual #19                 // Method org/apache/commons/net/telnet/TelnetOptionHandler.setWill:(Z)V
      37: aload_0
      38: getfield      #14                 // Field optionHandlers:[Lorg/apache/commons/net/telnet/TelnetOptionHandler;
      41: iload_1
      42: aaload
      43: invokevirtual #20                 // Method org/apache/commons/net/telnet/TelnetOptionHandler.startSubnegotiationLocal:()[I
      46: astore_2
      47: aload_2
      48: ifnull        56
      51: aload_0
      52: aload_2
      53: invokevirtual #21                 // Method _sendSubnegotiation:([I)V
      56: return

  void _setDo(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #12                 // Field _options:[I
       4: iload_1
       5: dup2
       6: iaload
       7: iconst_2
       8: ior
       9: iastore
      10: aload_0
      11: iload_1
      12: invokevirtual #18                 // Method _requestedDo:(I)Z
      15: ifeq          56
      18: aload_0
      19: getfield      #14                 // Field optionHandlers:[Lorg/apache/commons/net/telnet/TelnetOptionHandler;
      22: iload_1
      23: aaload
      24: ifnull        56
      27: aload_0
      28: getfield      #14                 // Field optionHandlers:[Lorg/apache/commons/net/telnet/TelnetOptionHandler;
      31: iload_1
      32: aaload
      33: iconst_1
      34: invokevirtual #22                 // Method org/apache/commons/net/telnet/TelnetOptionHandler.setDo:(Z)V
      37: aload_0
      38: getfield      #14                 // Field optionHandlers:[Lorg/apache/commons/net/telnet/TelnetOptionHandler;
      41: iload_1
      42: aaload
      43: invokevirtual #23                 // Method org/apache/commons/net/telnet/TelnetOptionHandler.startSubnegotiationRemote:()[I
      46: astore_2
      47: aload_2
      48: ifnull        56
      51: aload_0
      52: aload_2
      53: invokevirtual #21                 // Method _sendSubnegotiation:([I)V
      56: return

  void _setWantWill(int);
    Code:
       0: aload_0
       1: getfield      #12                 // Field _options:[I
       4: iload_1
       5: dup2
       6: iaload
       7: iconst_4
       8: ior
       9: iastore
      10: return

  void _setWantDo(int);
    Code:
       0: aload_0
       1: getfield      #12                 // Field _options:[I
       4: iload_1
       5: dup2
       6: iaload
       7: bipush        8
       9: ior
      10: iastore
      11: return

  void _setWont(int);
    Code:
       0: aload_0
       1: getfield      #12                 // Field _options:[I
       4: iload_1
       5: dup2
       6: iaload
       7: bipush        -2
       9: iand
      10: iastore
      11: aload_0
      12: getfield      #14                 // Field optionHandlers:[Lorg/apache/commons/net/telnet/TelnetOptionHandler;
      15: iload_1
      16: aaload
      17: ifnull        30
      20: aload_0
      21: getfield      #14                 // Field optionHandlers:[Lorg/apache/commons/net/telnet/TelnetOptionHandler;
      24: iload_1
      25: aaload
      26: iconst_0
      27: invokevirtual #19                 // Method org/apache/commons/net/telnet/TelnetOptionHandler.setWill:(Z)V
      30: return

  void _setDont(int);
    Code:
       0: aload_0
       1: getfield      #12                 // Field _options:[I
       4: iload_1
       5: dup2
       6: iaload
       7: bipush        -3
       9: iand
      10: iastore
      11: aload_0
      12: getfield      #14                 // Field optionHandlers:[Lorg/apache/commons/net/telnet/TelnetOptionHandler;
      15: iload_1
      16: aaload
      17: ifnull        30
      20: aload_0
      21: getfield      #14                 // Field optionHandlers:[Lorg/apache/commons/net/telnet/TelnetOptionHandler;
      24: iload_1
      25: aaload
      26: iconst_0
      27: invokevirtual #22                 // Method org/apache/commons/net/telnet/TelnetOptionHandler.setDo:(Z)V
      30: return

  void _setWantWont(int);
    Code:
       0: aload_0
       1: getfield      #12                 // Field _options:[I
       4: iload_1
       5: dup2
       6: iaload
       7: bipush        -5
       9: iand
      10: iastore
      11: return

  void _setWantDont(int);
    Code:
       0: aload_0
       1: getfield      #12                 // Field _options:[I
       4: iload_1
       5: dup2
       6: iaload
       7: bipush        -9
       9: iand
      10: iastore
      11: return

  void _processCommand(int);
    Code:
       0: aload_0
       1: getfield      #8                  // Field __notifhand:Lorg/apache/commons/net/telnet/TelnetNotificationHandler;
       4: ifnull        18
       7: aload_0
       8: getfield      #8                  // Field __notifhand:Lorg/apache/commons/net/telnet/TelnetNotificationHandler;
      11: iconst_5
      12: iload_1
      13: invokeinterface #24,  3           // InterfaceMethod org/apache/commons/net/telnet/TelnetNotificationHandler.receivedNegotiation:(II)V
      18: return

  void _processDo(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #8                  // Field __notifhand:Lorg/apache/commons/net/telnet/TelnetNotificationHandler;
       4: ifnull        18
       7: aload_0
       8: getfield      #8                  // Field __notifhand:Lorg/apache/commons/net/telnet/TelnetNotificationHandler;
      11: iconst_1
      12: iload_1
      13: invokeinterface #24,  3           // InterfaceMethod org/apache/commons/net/telnet/TelnetNotificationHandler.receivedNegotiation:(II)V
      18: iconst_0
      19: istore_2
      20: aload_0
      21: getfield      #14                 // Field optionHandlers:[Lorg/apache/commons/net/telnet/TelnetOptionHandler;
      24: iload_1
      25: aaload
      26: ifnull        42
      29: aload_0
      30: getfield      #14                 // Field optionHandlers:[Lorg/apache/commons/net/telnet/TelnetOptionHandler;
      33: iload_1
      34: aaload
      35: invokevirtual #25                 // Method org/apache/commons/net/telnet/TelnetOptionHandler.getAcceptLocal:()Z
      38: istore_2
      39: goto          67
      42: iload_1
      43: bipush        24
      45: if_icmpne     67
      48: aload_0
      49: getfield      #2                  // Field terminalType:Ljava/lang/String;
      52: ifnull        67
      55: aload_0
      56: getfield      #2                  // Field terminalType:Ljava/lang/String;
      59: invokevirtual #26                 // Method java/lang/String.length:()I
      62: ifle          67
      65: iconst_1
      66: istore_2
      67: aload_0
      68: getfield      #11                 // Field _willResponse:[I
      71: iload_1
      72: iaload
      73: ifle          113
      76: aload_0
      77: getfield      #11                 // Field _willResponse:[I
      80: iload_1
      81: dup2
      82: iaload
      83: iconst_1
      84: isub
      85: iastore
      86: aload_0
      87: getfield      #11                 // Field _willResponse:[I
      90: iload_1
      91: iaload
      92: ifle          113
      95: aload_0
      96: iload_1
      97: invokevirtual #15                 // Method _stateIsWill:(I)Z
     100: ifeq          113
     103: aload_0
     104: getfield      #11                 // Field _willResponse:[I
     107: iload_1
     108: dup2
     109: iaload
     110: iconst_1
     111: isub
     112: iastore
     113: aload_0
     114: getfield      #11                 // Field _willResponse:[I
     117: iload_1
     118: iaload
     119: ifne          188
     122: aload_0
     123: iload_1
     124: invokevirtual #27                 // Method _requestedWont:(I)Z
     127: ifeq          175
     130: iload_1
     131: lookupswitch  { // 0
               default: 140
          }
     140: iload_2
     141: ifeq          157
     144: aload_0
     145: iload_1
     146: invokevirtual #28                 // Method _setWantWill:(I)V
     149: aload_0
     150: iload_1
     151: invokevirtual #29                 // Method _sendWill:(I)V
     154: goto          188
     157: aload_0
     158: getfield      #11                 // Field _willResponse:[I
     161: iload_1
     162: dup2
     163: iaload
     164: iconst_1
     165: iadd
     166: iastore
     167: aload_0
     168: iload_1
     169: invokevirtual #30                 // Method _sendWont:(I)V
     172: goto          188
     175: iload_1
     176: lookupswitch  { // 0
               default: 188
          }
     188: aload_0
     189: iload_1
     190: invokevirtual #31                 // Method _setWill:(I)V
     193: return

  void _processDont(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #8                  // Field __notifhand:Lorg/apache/commons/net/telnet/TelnetNotificationHandler;
       4: ifnull        18
       7: aload_0
       8: getfield      #8                  // Field __notifhand:Lorg/apache/commons/net/telnet/TelnetNotificationHandler;
      11: iconst_2
      12: iload_1
      13: invokeinterface #24,  3           // InterfaceMethod org/apache/commons/net/telnet/TelnetNotificationHandler.receivedNegotiation:(II)V
      18: aload_0
      19: getfield      #11                 // Field _willResponse:[I
      22: iload_1
      23: iaload
      24: ifle          64
      27: aload_0
      28: getfield      #11                 // Field _willResponse:[I
      31: iload_1
      32: dup2
      33: iaload
      34: iconst_1
      35: isub
      36: iastore
      37: aload_0
      38: getfield      #11                 // Field _willResponse:[I
      41: iload_1
      42: iaload
      43: ifle          64
      46: aload_0
      47: iload_1
      48: invokevirtual #32                 // Method _stateIsWont:(I)Z
      51: ifeq          64
      54: aload_0
      55: getfield      #11                 // Field _willResponse:[I
      58: iload_1
      59: dup2
      60: iaload
      61: iconst_1
      62: isub
      63: iastore
      64: aload_0
      65: getfield      #11                 // Field _willResponse:[I
      68: iload_1
      69: iaload
      70: ifne          118
      73: aload_0
      74: iload_1
      75: invokevirtual #17                 // Method _requestedWill:(I)Z
      78: ifeq          118
      81: iload_1
      82: lookupswitch  { // 0
               default: 92
          }
      92: aload_0
      93: iload_1
      94: invokevirtual #15                 // Method _stateIsWill:(I)Z
      97: ifne          108
     100: aload_0
     101: iload_1
     102: invokevirtual #17                 // Method _requestedWill:(I)Z
     105: ifeq          113
     108: aload_0
     109: iload_1
     110: invokevirtual #30                 // Method _sendWont:(I)V
     113: aload_0
     114: iload_1
     115: invokevirtual #33                 // Method _setWantWont:(I)V
     118: aload_0
     119: iload_1
     120: invokevirtual #34                 // Method _setWont:(I)V
     123: return

  void _processWill(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #8                  // Field __notifhand:Lorg/apache/commons/net/telnet/TelnetNotificationHandler;
       4: ifnull        18
       7: aload_0
       8: getfield      #8                  // Field __notifhand:Lorg/apache/commons/net/telnet/TelnetNotificationHandler;
      11: iconst_3
      12: iload_1
      13: invokeinterface #24,  3           // InterfaceMethod org/apache/commons/net/telnet/TelnetNotificationHandler.receivedNegotiation:(II)V
      18: iconst_0
      19: istore_2
      20: aload_0
      21: getfield      #14                 // Field optionHandlers:[Lorg/apache/commons/net/telnet/TelnetOptionHandler;
      24: iload_1
      25: aaload
      26: ifnull        39
      29: aload_0
      30: getfield      #14                 // Field optionHandlers:[Lorg/apache/commons/net/telnet/TelnetOptionHandler;
      33: iload_1
      34: aaload
      35: invokevirtual #35                 // Method org/apache/commons/net/telnet/TelnetOptionHandler.getAcceptRemote:()Z
      38: istore_2
      39: aload_0
      40: getfield      #10                 // Field _doResponse:[I
      43: iload_1
      44: iaload
      45: ifle          85
      48: aload_0
      49: getfield      #10                 // Field _doResponse:[I
      52: iload_1
      53: dup2
      54: iaload
      55: iconst_1
      56: isub
      57: iastore
      58: aload_0
      59: getfield      #10                 // Field _doResponse:[I
      62: iload_1
      63: iaload
      64: ifle          85
      67: aload_0
      68: iload_1
      69: invokevirtual #16                 // Method _stateIsDo:(I)Z
      72: ifeq          85
      75: aload_0
      76: getfield      #10                 // Field _doResponse:[I
      79: iload_1
      80: dup2
      81: iaload
      82: iconst_1
      83: isub
      84: iastore
      85: aload_0
      86: getfield      #10                 // Field _doResponse:[I
      89: iload_1
      90: iaload
      91: ifne          144
      94: aload_0
      95: iload_1
      96: invokevirtual #36                 // Method _requestedDont:(I)Z
      99: ifeq          144
     102: iload_1
     103: lookupswitch  { // 0
               default: 112
          }
     112: iload_2
     113: ifeq          129
     116: aload_0
     117: iload_1
     118: invokevirtual #37                 // Method _setWantDo:(I)V
     121: aload_0
     122: iload_1
     123: invokevirtual #38                 // Method _sendDo:(I)V
     126: goto          144
     129: aload_0
     130: getfield      #10                 // Field _doResponse:[I
     133: iload_1
     134: dup2
     135: iaload
     136: iconst_1
     137: iadd
     138: iastore
     139: aload_0
     140: iload_1
     141: invokevirtual #39                 // Method _sendDont:(I)V
     144: aload_0
     145: iload_1
     146: invokevirtual #40                 // Method _setDo:(I)V
     149: return

  void _processWont(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #8                  // Field __notifhand:Lorg/apache/commons/net/telnet/TelnetNotificationHandler;
       4: ifnull        18
       7: aload_0
       8: getfield      #8                  // Field __notifhand:Lorg/apache/commons/net/telnet/TelnetNotificationHandler;
      11: iconst_4
      12: iload_1
      13: invokeinterface #24,  3           // InterfaceMethod org/apache/commons/net/telnet/TelnetNotificationHandler.receivedNegotiation:(II)V
      18: aload_0
      19: getfield      #10                 // Field _doResponse:[I
      22: iload_1
      23: iaload
      24: ifle          64
      27: aload_0
      28: getfield      #10                 // Field _doResponse:[I
      31: iload_1
      32: dup2
      33: iaload
      34: iconst_1
      35: isub
      36: iastore
      37: aload_0
      38: getfield      #10                 // Field _doResponse:[I
      41: iload_1
      42: iaload
      43: ifle          64
      46: aload_0
      47: iload_1
      48: invokevirtual #41                 // Method _stateIsDont:(I)Z
      51: ifeq          64
      54: aload_0
      55: getfield      #10                 // Field _doResponse:[I
      58: iload_1
      59: dup2
      60: iaload
      61: iconst_1
      62: isub
      63: iastore
      64: aload_0
      65: getfield      #10                 // Field _doResponse:[I
      68: iload_1
      69: iaload
      70: ifne          118
      73: aload_0
      74: iload_1
      75: invokevirtual #18                 // Method _requestedDo:(I)Z
      78: ifeq          118
      81: iload_1
      82: lookupswitch  { // 0
               default: 92
          }
      92: aload_0
      93: iload_1
      94: invokevirtual #16                 // Method _stateIsDo:(I)Z
      97: ifne          108
     100: aload_0
     101: iload_1
     102: invokevirtual #18                 // Method _requestedDo:(I)Z
     105: ifeq          113
     108: aload_0
     109: iload_1
     110: invokevirtual #39                 // Method _sendDont:(I)V
     113: aload_0
     114: iload_1
     115: invokevirtual #42                 // Method _setWantDont:(I)V
     118: aload_0
     119: iload_1
     120: invokevirtual #43                 // Method _setDont:(I)V
     123: return

  void _processSuboption(int[], int) throws java.io.IOException;
    Code:
       0: iload_2
       1: ifle          61
       4: aload_0
       5: getfield      #14                 // Field optionHandlers:[Lorg/apache/commons/net/telnet/TelnetOptionHandler;
       8: aload_1
       9: iconst_0
      10: iaload
      11: aaload
      12: ifnull        37
      15: aload_0
      16: getfield      #14                 // Field optionHandlers:[Lorg/apache/commons/net/telnet/TelnetOptionHandler;
      19: aload_1
      20: iconst_0
      21: iaload
      22: aaload
      23: aload_1
      24: iload_2
      25: invokevirtual #44                 // Method org/apache/commons/net/telnet/TelnetOptionHandler.answerSubnegotiation:([II)[I
      28: astore_3
      29: aload_0
      30: aload_3
      31: invokevirtual #21                 // Method _sendSubnegotiation:([I)V
      34: goto          61
      37: iload_2
      38: iconst_1
      39: if_icmple     61
      42: aload_1
      43: iconst_0
      44: iaload
      45: bipush        24
      47: if_icmpne     61
      50: aload_1
      51: iconst_1
      52: iaload
      53: iconst_1
      54: if_icmpne     61
      57: aload_0
      58: invokevirtual #45                 // Method _sendTerminalType:()V
      61: return

  final synchronized void _sendTerminalType() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field terminalType:Ljava/lang/String;
       4: ifnull        58
       7: aload_0
       8: getfield      #46                 // Field _output_:Ljava/io/OutputStream;
      11: getstatic     #47                 // Field _COMMAND_SB:[B
      14: invokevirtual #48                 // Method java/io/OutputStream.write:([B)V
      17: aload_0
      18: getfield      #46                 // Field _output_:Ljava/io/OutputStream;
      21: getstatic     #49                 // Field _COMMAND_IS:[B
      24: invokevirtual #48                 // Method java/io/OutputStream.write:([B)V
      27: aload_0
      28: getfield      #46                 // Field _output_:Ljava/io/OutputStream;
      31: aload_0
      32: getfield      #2                  // Field terminalType:Ljava/lang/String;
      35: invokevirtual #50                 // Method java/lang/String.getBytes:()[B
      38: invokevirtual #48                 // Method java/io/OutputStream.write:([B)V
      41: aload_0
      42: getfield      #46                 // Field _output_:Ljava/io/OutputStream;
      45: getstatic     #51                 // Field _COMMAND_SE:[B
      48: invokevirtual #48                 // Method java/io/OutputStream.write:([B)V
      51: aload_0
      52: getfield      #46                 // Field _output_:Ljava/io/OutputStream;
      55: invokevirtual #52                 // Method java/io/OutputStream.flush:()V
      58: return

  final synchronized void _sendSubnegotiation(int[]) throws java.io.IOException;
    Code:
       0: aload_1
       1: ifnull        71
       4: aload_0
       5: getfield      #46                 // Field _output_:Ljava/io/OutputStream;
       8: getstatic     #47                 // Field _COMMAND_SB:[B
      11: invokevirtual #48                 // Method java/io/OutputStream.write:([B)V
      14: iconst_0
      15: istore_2
      16: iload_2
      17: aload_1
      18: arraylength
      19: if_icmpge     54
      22: aload_1
      23: iload_2
      24: iaload
      25: i2b
      26: istore_3
      27: iload_3
      28: iconst_m1
      29: if_icmpne     40
      32: aload_0
      33: getfield      #46                 // Field _output_:Ljava/io/OutputStream;
      36: iload_3
      37: invokevirtual #53                 // Method java/io/OutputStream.write:(I)V
      40: aload_0
      41: getfield      #46                 // Field _output_:Ljava/io/OutputStream;
      44: iload_3
      45: invokevirtual #53                 // Method java/io/OutputStream.write:(I)V
      48: iinc          2, 1
      51: goto          16
      54: aload_0
      55: getfield      #46                 // Field _output_:Ljava/io/OutputStream;
      58: getstatic     #51                 // Field _COMMAND_SE:[B
      61: invokevirtual #48                 // Method java/io/OutputStream.write:([B)V
      64: aload_0
      65: getfield      #46                 // Field _output_:Ljava/io/OutputStream;
      68: invokevirtual #52                 // Method java/io/OutputStream.flush:()V
      71: return

  final synchronized void _sendCommand(byte) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #46                 // Field _output_:Ljava/io/OutputStream;
       4: sipush        255
       7: invokevirtual #53                 // Method java/io/OutputStream.write:(I)V
      10: aload_0
      11: getfield      #46                 // Field _output_:Ljava/io/OutputStream;
      14: iload_1
      15: invokevirtual #53                 // Method java/io/OutputStream.write:(I)V
      18: aload_0
      19: getfield      #46                 // Field _output_:Ljava/io/OutputStream;
      22: invokevirtual #52                 // Method java/io/OutputStream.flush:()V
      25: return

  final synchronized void _processAYTResponse();
    Code:
       0: aload_0
       1: getfield      #6                  // Field aytFlag:Z
       4: ifne          36
       7: aload_0
       8: getfield      #5                  // Field aytMonitor:Ljava/lang/Object;
      11: dup
      12: astore_1
      13: monitorenter
      14: aload_0
      15: iconst_1
      16: putfield      #6                  // Field aytFlag:Z
      19: aload_0
      20: getfield      #5                  // Field aytMonitor:Ljava/lang/Object;
      23: invokevirtual #54                 // Method java/lang/Object.notifyAll:()V
      26: aload_1
      27: monitorexit
      28: goto          36
      31: astore_2
      32: aload_1
      33: monitorexit
      34: aload_2
      35: athrow
      36: return
    Exception table:
       from    to  target type
          14    28    31   any
          31    34    31   any

  protected void _connectAction_() throws java.io.IOException;
    Code:
       0: iconst_0
       1: istore_1
       2: iload_1
       3: sipush        256
       6: if_icmpge     65
       9: aload_0
      10: getfield      #10                 // Field _doResponse:[I
      13: iload_1
      14: iconst_0
      15: iastore
      16: aload_0
      17: getfield      #11                 // Field _willResponse:[I
      20: iload_1
      21: iconst_0
      22: iastore
      23: aload_0
      24: getfield      #12                 // Field _options:[I
      27: iload_1
      28: iconst_0
      29: iastore
      30: aload_0
      31: getfield      #14                 // Field optionHandlers:[Lorg/apache/commons/net/telnet/TelnetOptionHandler;
      34: iload_1
      35: aaload
      36: ifnull        59
      39: aload_0
      40: getfield      #14                 // Field optionHandlers:[Lorg/apache/commons/net/telnet/TelnetOptionHandler;
      43: iload_1
      44: aaload
      45: iconst_0
      46: invokevirtual #22                 // Method org/apache/commons/net/telnet/TelnetOptionHandler.setDo:(Z)V
      49: aload_0
      50: getfield      #14                 // Field optionHandlers:[Lorg/apache/commons/net/telnet/TelnetOptionHandler;
      53: iload_1
      54: aaload
      55: iconst_0
      56: invokevirtual #19                 // Method org/apache/commons/net/telnet/TelnetOptionHandler.setWill:(Z)V
      59: iinc          1, 1
      62: goto          2
      65: aload_0
      66: invokespecial #55                 // Method org/apache/commons/net/SocketClient._connectAction_:()V
      69: aload_0
      70: new           #56                 // class java/io/BufferedInputStream
      73: dup
      74: aload_0
      75: getfield      #57                 // Field _input_:Ljava/io/InputStream;
      78: invokespecial #58                 // Method java/io/BufferedInputStream."<init>":(Ljava/io/InputStream;)V
      81: putfield      #57                 // Field _input_:Ljava/io/InputStream;
      84: aload_0
      85: new           #59                 // class java/io/BufferedOutputStream
      88: dup
      89: aload_0
      90: getfield      #46                 // Field _output_:Ljava/io/OutputStream;
      93: invokespecial #60                 // Method java/io/BufferedOutputStream."<init>":(Ljava/io/OutputStream;)V
      96: putfield      #46                 // Field _output_:Ljava/io/OutputStream;
      99: iconst_0
     100: istore_1
     101: iload_1
     102: sipush        256
     105: if_icmpge     173
     108: aload_0
     109: getfield      #14                 // Field optionHandlers:[Lorg/apache/commons/net/telnet/TelnetOptionHandler;
     112: iload_1
     113: aaload
     114: ifnull        167
     117: aload_0
     118: getfield      #14                 // Field optionHandlers:[Lorg/apache/commons/net/telnet/TelnetOptionHandler;
     121: iload_1
     122: aaload
     123: invokevirtual #61                 // Method org/apache/commons/net/telnet/TelnetOptionHandler.getInitLocal:()Z
     126: ifeq          142
     129: aload_0
     130: aload_0
     131: getfield      #14                 // Field optionHandlers:[Lorg/apache/commons/net/telnet/TelnetOptionHandler;
     134: iload_1
     135: aaload
     136: invokevirtual #62                 // Method org/apache/commons/net/telnet/TelnetOptionHandler.getOptionCode:()I
     139: invokevirtual #63                 // Method _requestWill:(I)V
     142: aload_0
     143: getfield      #14                 // Field optionHandlers:[Lorg/apache/commons/net/telnet/TelnetOptionHandler;
     146: iload_1
     147: aaload
     148: invokevirtual #64                 // Method org/apache/commons/net/telnet/TelnetOptionHandler.getInitRemote:()Z
     151: ifeq          167
     154: aload_0
     155: aload_0
     156: getfield      #14                 // Field optionHandlers:[Lorg/apache/commons/net/telnet/TelnetOptionHandler;
     159: iload_1
     160: aaload
     161: invokevirtual #62                 // Method org/apache/commons/net/telnet/TelnetOptionHandler.getOptionCode:()I
     164: invokevirtual #65                 // Method _requestDo:(I)V
     167: iinc          1, 1
     170: goto          101
     173: return

  final synchronized void _sendDo(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #46                 // Field _output_:Ljava/io/OutputStream;
       4: getstatic     #66                 // Field _COMMAND_DO:[B
       7: invokevirtual #48                 // Method java/io/OutputStream.write:([B)V
      10: aload_0
      11: getfield      #46                 // Field _output_:Ljava/io/OutputStream;
      14: iload_1
      15: invokevirtual #53                 // Method java/io/OutputStream.write:(I)V
      18: aload_0
      19: getfield      #46                 // Field _output_:Ljava/io/OutputStream;
      22: invokevirtual #52                 // Method java/io/OutputStream.flush:()V
      25: return

  final synchronized void _requestDo(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #10                 // Field _doResponse:[I
       4: iload_1
       5: iaload
       6: ifne          17
       9: aload_0
      10: iload_1
      11: invokevirtual #16                 // Method _stateIsDo:(I)Z
      14: ifne          25
      17: aload_0
      18: iload_1
      19: invokevirtual #18                 // Method _requestedDo:(I)Z
      22: ifeq          26
      25: return
      26: aload_0
      27: iload_1
      28: invokevirtual #37                 // Method _setWantDo:(I)V
      31: aload_0
      32: getfield      #10                 // Field _doResponse:[I
      35: iload_1
      36: dup2
      37: iaload
      38: iconst_1
      39: iadd
      40: iastore
      41: aload_0
      42: iload_1
      43: invokevirtual #38                 // Method _sendDo:(I)V
      46: return

  final synchronized void _sendDont(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #46                 // Field _output_:Ljava/io/OutputStream;
       4: getstatic     #67                 // Field _COMMAND_DONT:[B
       7: invokevirtual #48                 // Method java/io/OutputStream.write:([B)V
      10: aload_0
      11: getfield      #46                 // Field _output_:Ljava/io/OutputStream;
      14: iload_1
      15: invokevirtual #53                 // Method java/io/OutputStream.write:(I)V
      18: aload_0
      19: getfield      #46                 // Field _output_:Ljava/io/OutputStream;
      22: invokevirtual #52                 // Method java/io/OutputStream.flush:()V
      25: return

  final synchronized void _requestDont(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #10                 // Field _doResponse:[I
       4: iload_1
       5: iaload
       6: ifne          17
       9: aload_0
      10: iload_1
      11: invokevirtual #41                 // Method _stateIsDont:(I)Z
      14: ifne          25
      17: aload_0
      18: iload_1
      19: invokevirtual #36                 // Method _requestedDont:(I)Z
      22: ifeq          26
      25: return
      26: aload_0
      27: iload_1
      28: invokevirtual #42                 // Method _setWantDont:(I)V
      31: aload_0
      32: getfield      #10                 // Field _doResponse:[I
      35: iload_1
      36: dup2
      37: iaload
      38: iconst_1
      39: iadd
      40: iastore
      41: aload_0
      42: iload_1
      43: invokevirtual #39                 // Method _sendDont:(I)V
      46: return

  final synchronized void _sendWill(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #46                 // Field _output_:Ljava/io/OutputStream;
       4: getstatic     #68                 // Field _COMMAND_WILL:[B
       7: invokevirtual #48                 // Method java/io/OutputStream.write:([B)V
      10: aload_0
      11: getfield      #46                 // Field _output_:Ljava/io/OutputStream;
      14: iload_1
      15: invokevirtual #53                 // Method java/io/OutputStream.write:(I)V
      18: aload_0
      19: getfield      #46                 // Field _output_:Ljava/io/OutputStream;
      22: invokevirtual #52                 // Method java/io/OutputStream.flush:()V
      25: return

  final synchronized void _requestWill(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #11                 // Field _willResponse:[I
       4: iload_1
       5: iaload
       6: ifne          17
       9: aload_0
      10: iload_1
      11: invokevirtual #15                 // Method _stateIsWill:(I)Z
      14: ifne          25
      17: aload_0
      18: iload_1
      19: invokevirtual #17                 // Method _requestedWill:(I)Z
      22: ifeq          26
      25: return
      26: aload_0
      27: iload_1
      28: invokevirtual #28                 // Method _setWantWill:(I)V
      31: aload_0
      32: getfield      #10                 // Field _doResponse:[I
      35: iload_1
      36: dup2
      37: iaload
      38: iconst_1
      39: iadd
      40: iastore
      41: aload_0
      42: iload_1
      43: invokevirtual #29                 // Method _sendWill:(I)V
      46: return

  final synchronized void _sendWont(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #46                 // Field _output_:Ljava/io/OutputStream;
       4: getstatic     #69                 // Field _COMMAND_WONT:[B
       7: invokevirtual #48                 // Method java/io/OutputStream.write:([B)V
      10: aload_0
      11: getfield      #46                 // Field _output_:Ljava/io/OutputStream;
      14: iload_1
      15: invokevirtual #53                 // Method java/io/OutputStream.write:(I)V
      18: aload_0
      19: getfield      #46                 // Field _output_:Ljava/io/OutputStream;
      22: invokevirtual #52                 // Method java/io/OutputStream.flush:()V
      25: return

  final synchronized void _requestWont(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #11                 // Field _willResponse:[I
       4: iload_1
       5: iaload
       6: ifne          17
       9: aload_0
      10: iload_1
      11: invokevirtual #32                 // Method _stateIsWont:(I)Z
      14: ifne          25
      17: aload_0
      18: iload_1
      19: invokevirtual #27                 // Method _requestedWont:(I)Z
      22: ifeq          26
      25: return
      26: aload_0
      27: iload_1
      28: invokevirtual #33                 // Method _setWantWont:(I)V
      31: aload_0
      32: getfield      #10                 // Field _doResponse:[I
      35: iload_1
      36: dup2
      37: iaload
      38: iconst_1
      39: iadd
      40: iastore
      41: aload_0
      42: iload_1
      43: invokevirtual #30                 // Method _sendWont:(I)V
      46: return

  final synchronized void _sendByte(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #46                 // Field _output_:Ljava/io/OutputStream;
       4: iload_1
       5: invokevirtual #53                 // Method java/io/OutputStream.write:(I)V
       8: aload_0
       9: iload_1
      10: invokevirtual #70                 // Method _spyWrite:(I)V
      13: return

  final boolean _sendAYT(long) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.InterruptedException;
    Code:
       0: iconst_0
       1: istore_3
       2: aload_0
       3: getfield      #5                  // Field aytMonitor:Ljava/lang/Object;
       6: dup
       7: astore        4
       9: monitorenter
      10: aload_0
      11: dup
      12: astore        5
      14: monitorenter
      15: aload_0
      16: iconst_0
      17: putfield      #6                  // Field aytFlag:Z
      20: aload_0
      21: getfield      #46                 // Field _output_:Ljava/io/OutputStream;
      24: getstatic     #71                 // Field _COMMAND_AYT:[B
      27: invokevirtual #48                 // Method java/io/OutputStream.write:([B)V
      30: aload_0
      31: getfield      #46                 // Field _output_:Ljava/io/OutputStream;
      34: invokevirtual #52                 // Method java/io/OutputStream.flush:()V
      37: aload         5
      39: monitorexit
      40: goto          51
      43: astore        6
      45: aload         5
      47: monitorexit
      48: aload         6
      50: athrow
      51: aload_0
      52: getfield      #5                  // Field aytMonitor:Ljava/lang/Object;
      55: lload_1
      56: invokevirtual #72                 // Method java/lang/Object.wait:(J)V
      59: aload_0
      60: getfield      #6                  // Field aytFlag:Z
      63: ifne          76
      66: iconst_0
      67: istore_3
      68: aload_0
      69: iconst_1
      70: putfield      #6                  // Field aytFlag:Z
      73: goto          78
      76: iconst_1
      77: istore_3
      78: aload         4
      80: monitorexit
      81: goto          92
      84: astore        7
      86: aload         4
      88: monitorexit
      89: aload         7
      91: athrow
      92: iload_3
      93: ireturn
    Exception table:
       from    to  target type
          15    40    43   any
          43    48    43   any
          10    81    84   any
          84    89    84   any

  void addOptionHandler(org.apache.commons.net.telnet.TelnetOptionHandler) throws org.apache.commons.net.telnet.InvalidTelnetOptionException, java.io.IOException;
    Code:
       0: aload_1
       1: invokevirtual #62                 // Method org/apache/commons/net/telnet/TelnetOptionHandler.getOptionCode:()I
       4: istore_2
       5: iload_2
       6: invokestatic  #73                 // Method org/apache/commons/net/telnet/TelnetOption.isValidOption:(I)Z
       9: ifeq          73
      12: aload_0
      13: getfield      #14                 // Field optionHandlers:[Lorg/apache/commons/net/telnet/TelnetOptionHandler;
      16: iload_2
      17: aaload
      18: ifnonnull     62
      21: aload_0
      22: getfield      #14                 // Field optionHandlers:[Lorg/apache/commons/net/telnet/TelnetOptionHandler;
      25: iload_2
      26: aload_1
      27: aastore
      28: aload_0
      29: invokevirtual #74                 // Method isConnected:()Z
      32: ifeq          84
      35: aload_1
      36: invokevirtual #61                 // Method org/apache/commons/net/telnet/TelnetOptionHandler.getInitLocal:()Z
      39: ifeq          47
      42: aload_0
      43: iload_2
      44: invokevirtual #63                 // Method _requestWill:(I)V
      47: aload_1
      48: invokevirtual #64                 // Method org/apache/commons/net/telnet/TelnetOptionHandler.getInitRemote:()Z
      51: ifeq          84
      54: aload_0
      55: iload_2
      56: invokevirtual #65                 // Method _requestDo:(I)V
      59: goto          84
      62: new           #75                 // class org/apache/commons/net/telnet/InvalidTelnetOptionException
      65: dup
      66: ldc           #76                 // String Already registered option
      68: iload_2
      69: invokespecial #77                 // Method org/apache/commons/net/telnet/InvalidTelnetOptionException."<init>":(Ljava/lang/String;I)V
      72: athrow
      73: new           #75                 // class org/apache/commons/net/telnet/InvalidTelnetOptionException
      76: dup
      77: ldc           #78                 // String Invalid Option Code
      79: iload_2
      80: invokespecial #77                 // Method org/apache/commons/net/telnet/InvalidTelnetOptionException."<init>":(Ljava/lang/String;I)V
      83: athrow
      84: return

  void deleteOptionHandler(int) throws org.apache.commons.net.telnet.InvalidTelnetOptionException, java.io.IOException;
    Code:
       0: iload_1
       1: invokestatic  #73                 // Method org/apache/commons/net/telnet/TelnetOption.isValidOption:(I)Z
       4: ifeq          68
       7: aload_0
       8: getfield      #14                 // Field optionHandlers:[Lorg/apache/commons/net/telnet/TelnetOptionHandler;
      11: iload_1
      12: aaload
      13: ifnonnull     27
      16: new           #75                 // class org/apache/commons/net/telnet/InvalidTelnetOptionException
      19: dup
      20: ldc           #79                 // String Unregistered option
      22: iload_1
      23: invokespecial #77                 // Method org/apache/commons/net/telnet/InvalidTelnetOptionException."<init>":(Ljava/lang/String;I)V
      26: athrow
      27: aload_0
      28: getfield      #14                 // Field optionHandlers:[Lorg/apache/commons/net/telnet/TelnetOptionHandler;
      31: iload_1
      32: aaload
      33: astore_2
      34: aload_0
      35: getfield      #14                 // Field optionHandlers:[Lorg/apache/commons/net/telnet/TelnetOptionHandler;
      38: iload_1
      39: aconst_null
      40: aastore
      41: aload_2
      42: invokevirtual #80                 // Method org/apache/commons/net/telnet/TelnetOptionHandler.getWill:()Z
      45: ifeq          53
      48: aload_0
      49: iload_1
      50: invokevirtual #81                 // Method _requestWont:(I)V
      53: aload_2
      54: invokevirtual #82                 // Method org/apache/commons/net/telnet/TelnetOptionHandler.getDo:()Z
      57: ifeq          65
      60: aload_0
      61: iload_1
      62: invokevirtual #83                 // Method _requestDont:(I)V
      65: goto          79
      68: new           #75                 // class org/apache/commons/net/telnet/InvalidTelnetOptionException
      71: dup
      72: ldc           #78                 // String Invalid Option Code
      74: iload_1
      75: invokespecial #77                 // Method org/apache/commons/net/telnet/InvalidTelnetOptionException."<init>":(Ljava/lang/String;I)V
      78: athrow
      79: return

  void _registerSpyStream(java.io.OutputStream);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #7                  // Field spyStream:Ljava/io/OutputStream;
       5: return

  void _stopSpyStream();
    Code:
       0: aload_0
       1: aconst_null
       2: putfield      #7                  // Field spyStream:Ljava/io/OutputStream;
       5: return

  void _spyRead(int);
    Code:
       0: aload_0
       1: getfield      #7                  // Field spyStream:Ljava/io/OutputStream;
       4: astore_2
       5: aload_2
       6: ifnull        45
       9: iload_1
      10: bipush        13
      12: if_icmpeq     36
      15: aload_2
      16: iload_1
      17: invokevirtual #53                 // Method java/io/OutputStream.write:(I)V
      20: iload_1
      21: bipush        10
      23: if_icmpne     32
      26: aload_2
      27: bipush        13
      29: invokevirtual #53                 // Method java/io/OutputStream.write:(I)V
      32: aload_2
      33: invokevirtual #52                 // Method java/io/OutputStream.flush:()V
      36: goto          45
      39: astore_3
      40: aload_0
      41: aconst_null
      42: putfield      #7                  // Field spyStream:Ljava/io/OutputStream;
      45: return
    Exception table:
       from    to  target type
           9    36    39   Class java/io/IOException

  void _spyWrite(int);
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #16                 // Method _stateIsDo:(I)Z
       5: ifeq          16
       8: aload_0
       9: iconst_1
      10: invokevirtual #18                 // Method _requestedDo:(I)Z
      13: ifne          43
      16: aload_0
      17: getfield      #7                  // Field spyStream:Ljava/io/OutputStream;
      20: astore_2
      21: aload_2
      22: ifnull        43
      25: aload_2
      26: iload_1
      27: invokevirtual #53                 // Method java/io/OutputStream.write:(I)V
      30: aload_2
      31: invokevirtual #52                 // Method java/io/OutputStream.flush:()V
      34: goto          43
      37: astore_3
      38: aload_0
      39: aconst_null
      40: putfield      #7                  // Field spyStream:Ljava/io/OutputStream;
      43: return
    Exception table:
       from    to  target type
          25    34    37   Class java/io/IOException

  public void registerNotifHandler(org.apache.commons.net.telnet.TelnetNotificationHandler);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #8                  // Field __notifhand:Lorg/apache/commons/net/telnet/TelnetNotificationHandler;
       5: return

  public void unregisterNotifHandler();
    Code:
       0: aload_0
       1: aconst_null
       2: putfield      #8                  // Field __notifhand:Lorg/apache/commons/net/telnet/TelnetNotificationHandler;
       5: return

  static {};
    Code:
       0: iconst_2
       1: newarray       byte
       3: dup
       4: iconst_0
       5: iconst_m1
       6: bastore
       7: dup
       8: iconst_1
       9: bipush        -3
      11: bastore
      12: putstatic     #66                 // Field _COMMAND_DO:[B
      15: iconst_2
      16: newarray       byte
      18: dup
      19: iconst_0
      20: iconst_m1
      21: bastore
      22: dup
      23: iconst_1
      24: bipush        -2
      26: bastore
      27: putstatic     #67                 // Field _COMMAND_DONT:[B
      30: iconst_2
      31: newarray       byte
      33: dup
      34: iconst_0
      35: iconst_m1
      36: bastore
      37: dup
      38: iconst_1
      39: bipush        -5
      41: bastore
      42: putstatic     #68                 // Field _COMMAND_WILL:[B
      45: iconst_2
      46: newarray       byte
      48: dup
      49: iconst_0
      50: iconst_m1
      51: bastore
      52: dup
      53: iconst_1
      54: bipush        -4
      56: bastore
      57: putstatic     #69                 // Field _COMMAND_WONT:[B
      60: iconst_2
      61: newarray       byte
      63: dup
      64: iconst_0
      65: iconst_m1
      66: bastore
      67: dup
      68: iconst_1
      69: bipush        -6
      71: bastore
      72: putstatic     #47                 // Field _COMMAND_SB:[B
      75: iconst_2
      76: newarray       byte
      78: dup
      79: iconst_0
      80: iconst_m1
      81: bastore
      82: dup
      83: iconst_1
      84: bipush        -16
      86: bastore
      87: putstatic     #51                 // Field _COMMAND_SE:[B
      90: iconst_2
      91: newarray       byte
      93: dup
      94: iconst_0
      95: bipush        24
      97: bastore
      98: dup
      99: iconst_1
     100: iconst_0
     101: bastore
     102: putstatic     #49                 // Field _COMMAND_IS:[B
     105: iconst_2
     106: newarray       byte
     108: dup
     109: iconst_0
     110: iconst_m1
     111: bastore
     112: dup
     113: iconst_1
     114: bipush        -10
     116: bastore
     117: putstatic     #71                 // Field _COMMAND_AYT:[B
     120: return
}
