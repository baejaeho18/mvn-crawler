Compiled from "SnappyInputStream.java"
public class org.xerial.snappy.SnappyInputStream extends java.io.InputStream {
  private boolean finishedReading;

  protected final java.io.InputStream in;

  private byte[] compressed;

  private byte[] uncompressed;

  private int uncompressedCursor;

  private int uncompressedLimit;

  private byte[] chunkSizeBuf;

  public org.xerial.snappy.SnappyInputStream(java.io.InputStream) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/io/InputStream."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field finishedReading:Z
       9: aload_0
      10: iconst_0
      11: putfield      #3                  // Field uncompressedCursor:I
      14: aload_0
      15: iconst_0
      16: putfield      #4                  // Field uncompressedLimit:I
      19: aload_0
      20: iconst_4
      21: newarray       byte
      23: putfield      #5                  // Field chunkSizeBuf:[B
      26: aload_0
      27: aload_1
      28: putfield      #6                  // Field in:Ljava/io/InputStream;
      31: aload_0
      32: invokevirtual #7                  // Method readHeader:()V
      35: return

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: aconst_null
       2: putfield      #8                  // Field compressed:[B
       5: aload_0
       6: aconst_null
       7: putfield      #9                  // Field uncompressed:[B
      10: aload_0
      11: getfield      #6                  // Field in:Ljava/io/InputStream;
      14: ifnull        24
      17: aload_0
      18: getfield      #6                  // Field in:Ljava/io/InputStream;
      21: invokevirtual #10                 // Method java/io/InputStream.close:()V
      24: return

  protected void readHeader() throws java.io.IOException;
    Code:
       0: invokestatic  #11                 // Method org/xerial/snappy/SnappyCodec.headerSize:()I
       3: newarray       byte
       5: astore_1
       6: iconst_0
       7: istore_2
       8: iload_2
       9: aload_1
      10: arraylength
      11: if_icmpge     43
      14: aload_0
      15: getfield      #6                  // Field in:Ljava/io/InputStream;
      18: aload_1
      19: iload_2
      20: aload_1
      21: arraylength
      22: iload_2
      23: isub
      24: invokevirtual #12                 // Method java/io/InputStream.read:([BII)I
      27: istore_3
      28: iload_3
      29: iconst_m1
      30: if_icmpne     36
      33: goto          43
      36: iload_2
      37: iload_3
      38: iadd
      39: istore_2
      40: goto          8
      43: iload_2
      44: ifne          60
      47: new           #13                 // class org/xerial/snappy/SnappyIOException
      50: dup
      51: getstatic     #14                 // Field org/xerial/snappy/SnappyErrorCode.EMPTY_INPUT:Lorg/xerial/snappy/SnappyErrorCode;
      54: ldc           #15                 // String Cannot decompress empty stream
      56: invokespecial #16                 // Method org/xerial/snappy/SnappyIOException."<init>":(Lorg/xerial/snappy/SnappyErrorCode;Ljava/lang/String;)V
      59: athrow
      60: iload_2
      61: aload_1
      62: arraylength
      63: if_icmplt     77
      66: aload_1
      67: iconst_0
      68: baload
      69: getstatic     #17                 // Field org/xerial/snappy/SnappyCodec.MAGIC_HEADER:[B
      72: iconst_0
      73: baload
      74: if_icmpeq     84
      77: aload_0
      78: aload_1
      79: iload_2
      80: invokevirtual #18                 // Method readFully:([BI)V
      83: return
      84: new           #19                 // class java/io/ByteArrayInputStream
      87: dup
      88: aload_1
      89: invokespecial #20                 // Method java/io/ByteArrayInputStream."<init>":([B)V
      92: invokestatic  #21                 // Method org/xerial/snappy/SnappyCodec.readHeader:(Ljava/io/InputStream;)Lorg/xerial/snappy/SnappyCodec;
      95: astore_3
      96: aload_3
      97: invokevirtual #22                 // Method org/xerial/snappy/SnappyCodec.isValidMagicHeader:()Z
     100: ifeq          148
     103: aload_3
     104: getfield      #23                 // Field org/xerial/snappy/SnappyCodec.version:I
     107: iconst_1
     108: if_icmpge     155
     111: new           #13                 // class org/xerial/snappy/SnappyIOException
     114: dup
     115: getstatic     #25                 // Field org/xerial/snappy/SnappyErrorCode.INCOMPATIBLE_VERSION:Lorg/xerial/snappy/SnappyErrorCode;
     118: ldc           #26                 // String Compressed with an incompatible codec version %d. At least version %d is required
     120: iconst_2
     121: anewarray     #27                 // class java/lang/Object
     124: dup
     125: iconst_0
     126: aload_3
     127: getfield      #23                 // Field org/xerial/snappy/SnappyCodec.version:I
     130: invokestatic  #28                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     133: aastore
     134: dup
     135: iconst_1
     136: iconst_1
     137: invokestatic  #28                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     140: aastore
     141: invokestatic  #29                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     144: invokespecial #16                 // Method org/xerial/snappy/SnappyIOException."<init>":(Lorg/xerial/snappy/SnappyErrorCode;Ljava/lang/String;)V
     147: athrow
     148: aload_0
     149: aload_1
     150: iload_2
     151: invokevirtual #18                 // Method readFully:([BI)V
     154: return
     155: return

  protected void readFully(byte[], int) throws java.io.IOException;
    Code:
       0: iload_2
       1: ifne          10
       4: aload_0
       5: iconst_1
       6: putfield      #2                  // Field finishedReading:Z
       9: return
      10: aload_0
      11: sipush        8192
      14: iload_2
      15: invokestatic  #30                 // Method java/lang/Math.max:(II)I
      18: newarray       byte
      20: putfield      #8                  // Field compressed:[B
      23: aload_1
      24: iconst_0
      25: aload_0
      26: getfield      #8                  // Field compressed:[B
      29: iconst_0
      30: iload_2
      31: invokestatic  #31                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      34: iload_2
      35: istore_3
      36: iconst_0
      37: istore        4
      39: aload_0
      40: getfield      #6                  // Field in:Ljava/io/InputStream;
      43: aload_0
      44: getfield      #8                  // Field compressed:[B
      47: iload_3
      48: aload_0
      49: getfield      #8                  // Field compressed:[B
      52: arraylength
      53: iload_3
      54: isub
      55: invokevirtual #12                 // Method java/io/InputStream.read:([BII)I
      58: dup
      59: istore        4
      61: iconst_m1
      62: if_icmpeq     115
      65: iload_3
      66: iload         4
      68: iadd
      69: istore_3
      70: iload_3
      71: aload_0
      72: getfield      #8                  // Field compressed:[B
      75: arraylength
      76: if_icmplt     39
      79: aload_0
      80: getfield      #8                  // Field compressed:[B
      83: arraylength
      84: iconst_2
      85: imul
      86: newarray       byte
      88: astore        5
      90: aload_0
      91: getfield      #8                  // Field compressed:[B
      94: iconst_0
      95: aload         5
      97: iconst_0
      98: aload_0
      99: getfield      #8                  // Field compressed:[B
     102: arraylength
     103: invokestatic  #31                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     106: aload_0
     107: aload         5
     109: putfield      #8                  // Field compressed:[B
     112: goto          39
     115: aload_0
     116: iconst_1
     117: putfield      #2                  // Field finishedReading:Z
     120: aload_0
     121: getfield      #8                  // Field compressed:[B
     124: iconst_0
     125: iload_3
     126: invokestatic  #32                 // Method org/xerial/snappy/Snappy.uncompressedLength:([BII)I
     129: istore        4
     131: aload_0
     132: iload         4
     134: newarray       byte
     136: putfield      #9                  // Field uncompressed:[B
     139: aload_0
     140: getfield      #8                  // Field compressed:[B
     143: iconst_0
     144: iload_3
     145: aload_0
     146: getfield      #9                  // Field uncompressed:[B
     149: iconst_0
     150: invokestatic  #33                 // Method org/xerial/snappy/Snappy.uncompress:([BII[BI)I
     153: pop
     154: aload_0
     155: iconst_0
     156: putfield      #3                  // Field uncompressedCursor:I
     159: aload_0
     160: iload         4
     162: putfield      #4                  // Field uncompressedLimit:I
     165: return

  public int read(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: invokevirtual #34                 // Method rawRead:(Ljava/lang/Object;II)I
       7: ireturn

  public int rawRead(java.lang.Object, int, int) throws java.io.IOException;
    Code:
       0: iconst_0
       1: istore        4
       3: iload         4
       5: iload_3
       6: if_icmpge     99
       9: aload_0
      10: getfield      #3                  // Field uncompressedCursor:I
      13: aload_0
      14: getfield      #4                  // Field uncompressedLimit:I
      17: if_icmplt     42
      20: aload_0
      21: invokevirtual #35                 // Method hasNextChunk:()Z
      24: ifeq          30
      27: goto          3
      30: iload         4
      32: ifne          39
      35: iconst_m1
      36: goto          41
      39: iload         4
      41: ireturn
      42: aload_0
      43: getfield      #4                  // Field uncompressedLimit:I
      46: aload_0
      47: getfield      #3                  // Field uncompressedCursor:I
      50: isub
      51: iload_3
      52: iload         4
      54: isub
      55: invokestatic  #36                 // Method java/lang/Math.min:(II)I
      58: istore        5
      60: aload_0
      61: getfield      #9                  // Field uncompressed:[B
      64: aload_0
      65: getfield      #3                  // Field uncompressedCursor:I
      68: iload         5
      70: aload_1
      71: iload_2
      72: iload         4
      74: iadd
      75: invokestatic  #37                 // Method org/xerial/snappy/Snappy.arrayCopy:(Ljava/lang/Object;IILjava/lang/Object;I)V
      78: iload         4
      80: iload         5
      82: iadd
      83: istore        4
      85: aload_0
      86: dup
      87: getfield      #3                  // Field uncompressedCursor:I
      90: iload         5
      92: iadd
      93: putfield      #3                  // Field uncompressedCursor:I
      96: goto          3
      99: iload         4
     101: ireturn

  public int read(long[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: bipush        8
       5: imul
       6: iload_3
       7: bipush        8
       9: imul
      10: invokevirtual #34                 // Method rawRead:(Ljava/lang/Object;II)I
      13: ireturn

  public int read(long[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_1
       4: arraylength
       5: invokevirtual #38                 // Method read:([JII)I
       8: ireturn

  public int read(double[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: bipush        8
       5: imul
       6: iload_3
       7: bipush        8
       9: imul
      10: invokevirtual #34                 // Method rawRead:(Ljava/lang/Object;II)I
      13: ireturn

  public int read(double[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_1
       4: arraylength
       5: invokevirtual #39                 // Method read:([DII)I
       8: ireturn

  public int read(int[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_1
       4: arraylength
       5: invokevirtual #40                 // Method read:([III)I
       8: ireturn

  public int read(int[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iconst_4
       4: imul
       5: iload_3
       6: iconst_4
       7: imul
       8: invokevirtual #34                 // Method rawRead:(Ljava/lang/Object;II)I
      11: ireturn

  public int read(float[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iconst_4
       4: imul
       5: iload_3
       6: iconst_4
       7: imul
       8: invokevirtual #34                 // Method rawRead:(Ljava/lang/Object;II)I
      11: ireturn

  public int read(float[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_1
       4: arraylength
       5: invokevirtual #41                 // Method read:([FII)I
       8: ireturn

  public int read(short[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iconst_2
       4: imul
       5: iload_3
       6: iconst_2
       7: imul
       8: invokevirtual #34                 // Method rawRead:(Ljava/lang/Object;II)I
      11: ireturn

  public int read(short[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_1
       4: arraylength
       5: invokevirtual #42                 // Method read:([SII)I
       8: ireturn

  protected boolean hasNextChunk() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field finishedReading:Z
       4: ifeq          9
       7: iconst_0
       8: ireturn
       9: aload_0
      10: iconst_0
      11: putfield      #3                  // Field uncompressedCursor:I
      14: aload_0
      15: iconst_0
      16: putfield      #4                  // Field uncompressedLimit:I
      19: iconst_0
      20: istore_1
      21: iload_1
      22: iconst_4
      23: if_icmpge     61
      26: aload_0
      27: getfield      #6                  // Field in:Ljava/io/InputStream;
      30: aload_0
      31: getfield      #5                  // Field chunkSizeBuf:[B
      34: iload_1
      35: iconst_4
      36: iload_1
      37: isub
      38: invokevirtual #12                 // Method java/io/InputStream.read:([BII)I
      41: istore_2
      42: iload_2
      43: iconst_m1
      44: if_icmpne     54
      47: aload_0
      48: iconst_1
      49: putfield      #2                  // Field finishedReading:Z
      52: iconst_0
      53: ireturn
      54: iload_1
      55: iload_2
      56: iadd
      57: istore_1
      58: goto          21
      61: aload_0
      62: getfield      #5                  // Field chunkSizeBuf:[B
      65: iconst_0
      66: invokestatic  #43                 // Method org/xerial/snappy/SnappyOutputStream.readInt:([BI)I
      69: istore_2
      70: aload_0
      71: getfield      #8                  // Field compressed:[B
      74: ifnull        86
      77: iload_2
      78: aload_0
      79: getfield      #8                  // Field compressed:[B
      82: arraylength
      83: if_icmple     93
      86: aload_0
      87: iload_2
      88: newarray       byte
      90: putfield      #8                  // Field compressed:[B
      93: iconst_0
      94: istore_1
      95: iload_1
      96: iload_2
      97: if_icmpge     131
     100: aload_0
     101: getfield      #6                  // Field in:Ljava/io/InputStream;
     104: aload_0
     105: getfield      #8                  // Field compressed:[B
     108: iload_1
     109: iload_2
     110: iload_1
     111: isub
     112: invokevirtual #12                 // Method java/io/InputStream.read:([BII)I
     115: istore_3
     116: iload_3
     117: iconst_m1
     118: if_icmpne     124
     121: goto          131
     124: iload_1
     125: iload_3
     126: iadd
     127: istore_1
     128: goto          95
     131: iload_1
     132: iload_2
     133: if_icmpge     146
     136: new           #44                 // class java/io/IOException
     139: dup
     140: ldc           #45                 // String failed to read chunk
     142: invokespecial #46                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     145: athrow
     146: aload_0
     147: getfield      #8                  // Field compressed:[B
     150: iconst_0
     151: iload_2
     152: invokestatic  #32                 // Method org/xerial/snappy/Snappy.uncompressedLength:([BII)I
     155: istore_3
     156: aload_0
     157: getfield      #9                  // Field uncompressed:[B
     160: ifnull        172
     163: iload_3
     164: aload_0
     165: getfield      #9                  // Field uncompressed:[B
     168: arraylength
     169: if_icmple     179
     172: aload_0
     173: iload_3
     174: newarray       byte
     176: putfield      #9                  // Field uncompressed:[B
     179: aload_0
     180: getfield      #8                  // Field compressed:[B
     183: iconst_0
     184: iload_2
     185: aload_0
     186: getfield      #9                  // Field uncompressed:[B
     189: iconst_0
     190: invokestatic  #33                 // Method org/xerial/snappy/Snappy.uncompress:([BII[BI)I
     193: istore        4
     195: iload_3
     196: iload         4
     198: if_icmpeq     236
     201: new           #13                 // class org/xerial/snappy/SnappyIOException
     204: dup
     205: getstatic     #47                 // Field org/xerial/snappy/SnappyErrorCode.INVALID_CHUNK_SIZE:Lorg/xerial/snappy/SnappyErrorCode;
     208: ldc           #48                 // String expected %,d bytes, but decompressed chunk has %,d bytes
     210: iconst_2
     211: anewarray     #27                 // class java/lang/Object
     214: dup
     215: iconst_0
     216: iload_3
     217: invokestatic  #28                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     220: aastore
     221: dup
     222: iconst_1
     223: iload         4
     225: invokestatic  #28                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     228: aastore
     229: invokestatic  #29                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     232: invokespecial #16                 // Method org/xerial/snappy/SnappyIOException."<init>":(Lorg/xerial/snappy/SnappyErrorCode;Ljava/lang/String;)V
     235: athrow
     236: aload_0
     237: iload         4
     239: putfield      #4                  // Field uncompressedLimit:I
     242: iconst_1
     243: ireturn

  public int read() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field uncompressedCursor:I
       4: aload_0
       5: getfield      #4                  // Field uncompressedLimit:I
       8: if_icmpge     32
      11: aload_0
      12: getfield      #9                  // Field uncompressed:[B
      15: aload_0
      16: dup
      17: getfield      #3                  // Field uncompressedCursor:I
      20: dup_x1
      21: iconst_1
      22: iadd
      23: putfield      #3                  // Field uncompressedCursor:I
      26: baload
      27: sipush        255
      30: iand
      31: ireturn
      32: aload_0
      33: invokevirtual #35                 // Method hasNextChunk:()Z
      36: ifeq          44
      39: aload_0
      40: invokevirtual #49                 // Method read:()I
      43: ireturn
      44: iconst_m1
      45: ireturn

  public int available() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field uncompressedCursor:I
       4: aload_0
       5: getfield      #4                  // Field uncompressedLimit:I
       8: if_icmpge     21
      11: aload_0
      12: getfield      #4                  // Field uncompressedLimit:I
      15: aload_0
      16: getfield      #3                  // Field uncompressedCursor:I
      19: isub
      20: ireturn
      21: aload_0
      22: invokevirtual #35                 // Method hasNextChunk:()Z
      25: ifeq          38
      28: aload_0
      29: getfield      #4                  // Field uncompressedLimit:I
      32: aload_0
      33: getfield      #3                  // Field uncompressedCursor:I
      36: isub
      37: ireturn
      38: iconst_0
      39: ireturn
}
