Compiled from "SnappyFramedInputStream.java"
public final class org.xerial.snappy.SnappyFramedInputStream extends java.io.InputStream implements java.nio.channels.ReadableByteChannel {
  private final java.nio.channels.ReadableByteChannel rbc;

  private final java.nio.ByteBuffer frameHeader;

  private final boolean verifyChecksums;

  private java.nio.ByteBuffer input;

  private java.nio.ByteBuffer uncompressedDirect;

  private boolean closed;

  private boolean eof;

  private int valid;

  private int position;

  private byte[] buffer;

  static final boolean $assertionsDisabled;

  public org.xerial.snappy.SnappyFramedInputStream(java.io.InputStream) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iconst_1
       3: invokespecial #3                  // Method "<init>":(Ljava/io/InputStream;Z)V
       6: return

  public org.xerial.snappy.SnappyFramedInputStream(java.io.InputStream, boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #4                  // Method java/nio/channels/Channels.newChannel:(Ljava/io/InputStream;)Ljava/nio/channels/ReadableByteChannel;
       5: iload_2
       6: invokespecial #5                  // Method "<init>":(Ljava/nio/channels/ReadableByteChannel;Z)V
       9: return

  public org.xerial.snappy.SnappyFramedInputStream(java.nio.channels.ReadableByteChannel) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iconst_1
       3: invokespecial #5                  // Method "<init>":(Ljava/nio/channels/ReadableByteChannel;Z)V
       6: return

  public org.xerial.snappy.SnappyFramedInputStream(java.nio.channels.ReadableByteChannel, boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #6                  // Method java/io/InputStream."<init>":()V
       4: aload_1
       5: ifnonnull     18
       8: new           #7                  // class java/lang/NullPointerException
      11: dup
      12: ldc           #8                  // String in is null
      14: invokespecial #9                  // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      17: athrow
      18: aload_0
      19: aload_1
      20: putfield      #10                 // Field rbc:Ljava/nio/channels/ReadableByteChannel;
      23: aload_0
      24: iload_2
      25: putfield      #11                 // Field verifyChecksums:Z
      28: aload_0
      29: ldc           #12                 // int 65541
      31: invokespecial #13                 // Method allocateBuffersBasedOnSize:(I)V
      34: aload_0
      35: iconst_4
      36: invokestatic  #14                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;
      39: putfield      #15                 // Field frameHeader:Ljava/nio/ByteBuffer;
      42: getstatic     #16                 // Field org/xerial/snappy/SnappyFramed.HEADER_BYTES:[B
      45: astore_3
      46: aload_3
      47: arraylength
      48: newarray       byte
      50: astore        4
      52: aload         4
      54: invokestatic  #17                 // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;
      57: astore        5
      59: aload_1
      60: aload         5
      62: invokestatic  #18                 // Method org/xerial/snappy/SnappyFramed.readBytes:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)I
      65: istore        6
      67: iload         6
      69: aload_3
      70: arraylength
      71: if_icmpge     84
      74: new           #19                 // class java/io/EOFException
      77: dup
      78: ldc           #20                 // String encountered EOF while reading stream header
      80: invokespecial #21                 // Method java/io/EOFException."<init>":(Ljava/lang/String;)V
      83: athrow
      84: aload_3
      85: aload         4
      87: invokestatic  #22                 // Method java/util/Arrays.equals:([B[B)Z
      90: ifne          103
      93: new           #23                 // class java/io/IOException
      96: dup
      97: ldc           #24                 // String invalid stream header
      99: invokespecial #25                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     102: athrow
     103: return

  private void allocateBuffersBasedOnSize(int);
    Code:
       0: aload_0
       1: getfield      #26                 // Field input:Ljava/nio/ByteBuffer;
       4: ifnull        14
       7: aload_0
       8: getfield      #26                 // Field input:Ljava/nio/ByteBuffer;
      11: invokestatic  #27                 // Method org/xerial/snappy/SnappyFramed.releaseDirectByteBuffer:(Ljava/nio/ByteBuffer;)V
      14: aload_0
      15: getfield      #28                 // Field uncompressedDirect:Ljava/nio/ByteBuffer;
      18: ifnull        28
      21: aload_0
      22: getfield      #28                 // Field uncompressedDirect:Ljava/nio/ByteBuffer;
      25: invokestatic  #27                 // Method org/xerial/snappy/SnappyFramed.releaseDirectByteBuffer:(Ljava/nio/ByteBuffer;)V
      28: aload_0
      29: iload_1
      30: invokestatic  #29                 // Method java/nio/ByteBuffer.allocateDirect:(I)Ljava/nio/ByteBuffer;
      33: putfield      #26                 // Field input:Ljava/nio/ByteBuffer;
      36: iload_1
      37: invokestatic  #30                 // Method org/xerial/snappy/Snappy.maxCompressedLength:(I)I
      40: istore_2
      41: aload_0
      42: iload_2
      43: invokestatic  #29                 // Method java/nio/ByteBuffer.allocateDirect:(I)Ljava/nio/ByteBuffer;
      46: putfield      #28                 // Field uncompressedDirect:Ljava/nio/ByteBuffer;
      49: aload_0
      50: iload_2
      51: newarray       byte
      53: putfield      #31                 // Field buffer:[B
      56: return

  public int read() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #32                 // Field closed:Z
       4: ifeq          9
       7: iconst_m1
       8: ireturn
       9: aload_0
      10: invokespecial #33                 // Method ensureBuffer:()Z
      13: ifne          18
      16: iconst_m1
      17: ireturn
      18: aload_0
      19: getfield      #31                 // Field buffer:[B
      22: aload_0
      23: dup
      24: getfield      #34                 // Field position:I
      27: dup_x1
      28: iconst_1
      29: iadd
      30: putfield      #34                 // Field position:I
      33: baload
      34: sipush        255
      37: iand
      38: ireturn

  public int read(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #35                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #36                 // String output is null
      10: invokespecial #37                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: iload_2
      15: iflt          30
      18: iload_3
      19: iflt          30
      22: iload_2
      23: iload_3
      24: iadd
      25: aload_1
      26: arraylength
      27: if_icmple     71
      30: new           #35                 // class java/lang/IllegalArgumentException
      33: dup
      34: new           #38                 // class java/lang/StringBuilder
      37: dup
      38: invokespecial #39                 // Method java/lang/StringBuilder."<init>":()V
      41: ldc           #40                 // String invalid offset [
      43: invokevirtual #41                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      46: iload_2
      47: invokevirtual #42                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      50: ldc           #43                 // String ] and length [
      52: invokevirtual #41                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      55: iload_3
      56: invokevirtual #42                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      59: bipush        93
      61: invokevirtual #44                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      64: invokevirtual #45                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      67: invokespecial #37                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      70: athrow
      71: aload_0
      72: getfield      #32                 // Field closed:Z
      75: ifeq          86
      78: new           #46                 // class java/nio/channels/ClosedChannelException
      81: dup
      82: invokespecial #47                 // Method java/nio/channels/ClosedChannelException."<init>":()V
      85: athrow
      86: iload_3
      87: ifne          92
      90: iconst_0
      91: ireturn
      92: aload_0
      93: invokespecial #33                 // Method ensureBuffer:()Z
      96: ifne          101
      99: iconst_m1
     100: ireturn
     101: iload_3
     102: aload_0
     103: invokevirtual #48                 // Method available:()I
     106: invokestatic  #49                 // Method java/lang/Math.min:(II)I
     109: istore        4
     111: aload_0
     112: getfield      #31                 // Field buffer:[B
     115: aload_0
     116: getfield      #34                 // Field position:I
     119: aload_1
     120: iload_2
     121: iload         4
     123: invokestatic  #50                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     126: aload_0
     127: dup
     128: getfield      #34                 // Field position:I
     131: iload         4
     133: iadd
     134: putfield      #34                 // Field position:I
     137: iload         4
     139: ireturn

  public int available() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #32                 // Field closed:Z
       4: ifeq          9
       7: iconst_0
       8: ireturn
       9: aload_0
      10: getfield      #51                 // Field valid:I
      13: aload_0
      14: getfield      #34                 // Field position:I
      17: isub
      18: ireturn

  public boolean isOpen();
    Code:
       0: aload_0
       1: getfield      #32                 // Field closed:Z
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public int read(java.nio.ByteBuffer) throws java.io.IOException;
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #35                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #52                 // String dst is null
      10: invokespecial #37                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_0
      15: getfield      #32                 // Field closed:Z
      18: ifeq          29
      21: new           #46                 // class java/nio/channels/ClosedChannelException
      24: dup
      25: invokespecial #47                 // Method java/nio/channels/ClosedChannelException."<init>":()V
      28: athrow
      29: aload_1
      30: invokevirtual #53                 // Method java/nio/ByteBuffer.remaining:()I
      33: ifne          38
      36: iconst_0
      37: ireturn
      38: aload_0
      39: invokespecial #33                 // Method ensureBuffer:()Z
      42: ifne          47
      45: iconst_m1
      46: ireturn
      47: aload_1
      48: invokevirtual #53                 // Method java/nio/ByteBuffer.remaining:()I
      51: aload_0
      52: invokevirtual #48                 // Method available:()I
      55: invokestatic  #49                 // Method java/lang/Math.min:(II)I
      58: istore_2
      59: aload_1
      60: aload_0
      61: getfield      #31                 // Field buffer:[B
      64: aload_0
      65: getfield      #34                 // Field position:I
      68: iload_2
      69: invokevirtual #54                 // Method java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;
      72: pop
      73: aload_0
      74: dup
      75: getfield      #34                 // Field position:I
      78: iload_2
      79: iadd
      80: putfield      #34                 // Field position:I
      83: iload_2
      84: ireturn

  public long transferTo(java.io.OutputStream) throws java.io.IOException;
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #35                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #55                 // String os is null
      10: invokespecial #37                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_0
      15: getfield      #32                 // Field closed:Z
      18: ifeq          29
      21: new           #46                 // class java/nio/channels/ClosedChannelException
      24: dup
      25: invokespecial #47                 // Method java/nio/channels/ClosedChannelException."<init>":()V
      28: athrow
      29: lconst_0
      30: lstore_2
      31: aload_0
      32: invokespecial #33                 // Method ensureBuffer:()Z
      35: ifeq          78
      38: aload_0
      39: invokevirtual #48                 // Method available:()I
      42: istore        4
      44: aload_1
      45: aload_0
      46: getfield      #31                 // Field buffer:[B
      49: aload_0
      50: getfield      #34                 // Field position:I
      53: iload         4
      55: invokevirtual #56                 // Method java/io/OutputStream.write:([BII)V
      58: aload_0
      59: dup
      60: getfield      #34                 // Field position:I
      63: iload         4
      65: iadd
      66: putfield      #34                 // Field position:I
      69: lload_2
      70: iload         4
      72: i2l
      73: ladd
      74: lstore_2
      75: goto          31
      78: lload_2
      79: lreturn

  public long transferTo(java.nio.channels.WritableByteChannel) throws java.io.IOException;
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #35                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #57                 // String wbc is null
      10: invokespecial #37                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_0
      15: getfield      #32                 // Field closed:Z
      18: ifeq          29
      21: new           #46                 // class java/nio/channels/ClosedChannelException
      24: dup
      25: invokespecial #47                 // Method java/nio/channels/ClosedChannelException."<init>":()V
      28: athrow
      29: aload_0
      30: getfield      #31                 // Field buffer:[B
      33: invokestatic  #17                 // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;
      36: astore_2
      37: lconst_0
      38: lstore_3
      39: aload_0
      40: invokespecial #33                 // Method ensureBuffer:()Z
      43: ifeq          113
      46: aload_2
      47: invokevirtual #58                 // Method java/nio/ByteBuffer.clear:()Ljava/nio/Buffer;
      50: pop
      51: aload_2
      52: aload_0
      53: getfield      #34                 // Field position:I
      56: invokevirtual #59                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      59: pop
      60: aload_2
      61: aload_0
      62: getfield      #34                 // Field position:I
      65: aload_0
      66: invokevirtual #48                 // Method available:()I
      69: iadd
      70: invokevirtual #60                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
      73: pop
      74: aload_1
      75: aload_2
      76: invokeinterface #61,  2           // InterfaceMethod java/nio/channels/WritableByteChannel.write:(Ljava/nio/ByteBuffer;)I
      81: pop
      82: aload_2
      83: invokevirtual #62                 // Method java/nio/ByteBuffer.position:()I
      86: aload_0
      87: getfield      #34                 // Field position:I
      90: isub
      91: istore        5
      93: aload_0
      94: dup
      95: getfield      #34                 // Field position:I
      98: iload         5
     100: iadd
     101: putfield      #34                 // Field position:I
     104: lload_3
     105: iload         5
     107: i2l
     108: ladd
     109: lstore_3
     110: goto          39
     113: lload_3
     114: lreturn

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #10                 // Field rbc:Ljava/nio/channels/ReadableByteChannel;
       4: invokeinterface #63,  1           // InterfaceMethod java/nio/channels/ReadableByteChannel.close:()V
       9: aload_0
      10: getfield      #32                 // Field closed:Z
      13: ifne          21
      16: aload_0
      17: iconst_1
      18: putfield      #32                 // Field closed:Z
      21: aload_0
      22: getfield      #26                 // Field input:Ljava/nio/ByteBuffer;
      25: ifnull        35
      28: aload_0
      29: getfield      #26                 // Field input:Ljava/nio/ByteBuffer;
      32: invokestatic  #27                 // Method org/xerial/snappy/SnappyFramed.releaseDirectByteBuffer:(Ljava/nio/ByteBuffer;)V
      35: aload_0
      36: getfield      #28                 // Field uncompressedDirect:Ljava/nio/ByteBuffer;
      39: ifnull        95
      42: aload_0
      43: getfield      #28                 // Field uncompressedDirect:Ljava/nio/ByteBuffer;
      46: invokestatic  #27                 // Method org/xerial/snappy/SnappyFramed.releaseDirectByteBuffer:(Ljava/nio/ByteBuffer;)V
      49: goto          95
      52: astore_1
      53: aload_0
      54: getfield      #32                 // Field closed:Z
      57: ifne          65
      60: aload_0
      61: iconst_1
      62: putfield      #32                 // Field closed:Z
      65: aload_0
      66: getfield      #26                 // Field input:Ljava/nio/ByteBuffer;
      69: ifnull        79
      72: aload_0
      73: getfield      #26                 // Field input:Ljava/nio/ByteBuffer;
      76: invokestatic  #27                 // Method org/xerial/snappy/SnappyFramed.releaseDirectByteBuffer:(Ljava/nio/ByteBuffer;)V
      79: aload_0
      80: getfield      #28                 // Field uncompressedDirect:Ljava/nio/ByteBuffer;
      83: ifnull        93
      86: aload_0
      87: getfield      #28                 // Field uncompressedDirect:Ljava/nio/ByteBuffer;
      90: invokestatic  #27                 // Method org/xerial/snappy/SnappyFramed.releaseDirectByteBuffer:(Ljava/nio/ByteBuffer;)V
      93: aload_1
      94: athrow
      95: return
    Exception table:
       from    to  target type
           0     9    52   any

  private boolean ensureBuffer() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #48                 // Method available:()I
       4: ifle          9
       7: iconst_1
       8: ireturn
       9: aload_0
      10: getfield      #64                 // Field eof:Z
      13: ifeq          18
      16: iconst_0
      17: ireturn
      18: aload_0
      19: invokespecial #65                 // Method readBlockHeader:()Z
      22: ifne          32
      25: aload_0
      26: iconst_1
      27: putfield      #64                 // Field eof:Z
      30: iconst_0
      31: ireturn
      32: aload_0
      33: aload_0
      34: getfield      #15                 // Field frameHeader:Ljava/nio/ByteBuffer;
      37: invokespecial #66                 // Method getFrameMetaData:(Ljava/nio/ByteBuffer;)Lorg/xerial/snappy/SnappyFramedInputStream$FrameMetaData;
      40: astore_1
      41: getstatic     #67                 // Field org/xerial/snappy/SnappyFramedInputStream$FrameAction.SKIP:Lorg/xerial/snappy/SnappyFramedInputStream$FrameAction;
      44: aload_1
      45: getfield      #68                 // Field org/xerial/snappy/SnappyFramedInputStream$FrameMetaData.frameAction:Lorg/xerial/snappy/SnappyFramedInputStream$FrameAction;
      48: if_acmpne     75
      51: aload_0
      52: getfield      #10                 // Field rbc:Ljava/nio/channels/ReadableByteChannel;
      55: aload_1
      56: getfield      #69                 // Field org/xerial/snappy/SnappyFramedInputStream$FrameMetaData.length:I
      59: aload_0
      60: getfield      #31                 // Field buffer:[B
      63: invokestatic  #17                 // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;
      66: invokestatic  #70                 // Method org/xerial/snappy/SnappyFramed.skip:(Ljava/nio/channels/ReadableByteChannel;ILjava/nio/ByteBuffer;)I
      69: pop
      70: aload_0
      71: invokespecial #33                 // Method ensureBuffer:()Z
      74: ireturn
      75: aload_1
      76: getfield      #69                 // Field org/xerial/snappy/SnappyFramedInputStream$FrameMetaData.length:I
      79: aload_0
      80: getfield      #26                 // Field input:Ljava/nio/ByteBuffer;
      83: invokevirtual #71                 // Method java/nio/ByteBuffer.capacity:()I
      86: if_icmple     97
      89: aload_0
      90: aload_1
      91: getfield      #69                 // Field org/xerial/snappy/SnappyFramedInputStream$FrameMetaData.length:I
      94: invokespecial #13                 // Method allocateBuffersBasedOnSize:(I)V
      97: aload_0
      98: getfield      #26                 // Field input:Ljava/nio/ByteBuffer;
     101: invokevirtual #58                 // Method java/nio/ByteBuffer.clear:()Ljava/nio/Buffer;
     104: pop
     105: aload_0
     106: getfield      #26                 // Field input:Ljava/nio/ByteBuffer;
     109: aload_1
     110: getfield      #69                 // Field org/xerial/snappy/SnappyFramedInputStream$FrameMetaData.length:I
     113: invokevirtual #60                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
     116: pop
     117: aload_0
     118: getfield      #10                 // Field rbc:Ljava/nio/channels/ReadableByteChannel;
     121: aload_0
     122: getfield      #26                 // Field input:Ljava/nio/ByteBuffer;
     125: invokestatic  #18                 // Method org/xerial/snappy/SnappyFramed.readBytes:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)I
     128: istore_2
     129: iload_2
     130: aload_1
     131: getfield      #69                 // Field org/xerial/snappy/SnappyFramedInputStream$FrameMetaData.length:I
     134: if_icmpeq     147
     137: new           #19                 // class java/io/EOFException
     140: dup
     141: ldc           #72                 // String unexpectd EOF when reading frame
     143: invokespecial #21                 // Method java/io/EOFException."<init>":(Ljava/lang/String;)V
     146: athrow
     147: aload_0
     148: getfield      #26                 // Field input:Ljava/nio/ByteBuffer;
     151: invokevirtual #73                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;
     154: pop
     155: aload_0
     156: aload_0
     157: getfield      #26                 // Field input:Ljava/nio/ByteBuffer;
     160: invokespecial #74                 // Method getFrameData:(Ljava/nio/ByteBuffer;)Lorg/xerial/snappy/SnappyFramedInputStream$FrameData;
     163: astore_3
     164: getstatic     #75                 // Field org/xerial/snappy/SnappyFramedInputStream$FrameAction.UNCOMPRESS:Lorg/xerial/snappy/SnappyFramedInputStream$FrameAction;
     167: aload_1
     168: getfield      #68                 // Field org/xerial/snappy/SnappyFramedInputStream$FrameMetaData.frameAction:Lorg/xerial/snappy/SnappyFramedInputStream$FrameAction;
     171: if_acmpne     282
     174: aload_0
     175: getfield      #26                 // Field input:Ljava/nio/ByteBuffer;
     178: aload_3
     179: getfield      #76                 // Field org/xerial/snappy/SnappyFramedInputStream$FrameData.offset:I
     182: invokevirtual #59                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
     185: pop
     186: aload_0
     187: getfield      #26                 // Field input:Ljava/nio/ByteBuffer;
     190: invokestatic  #77                 // Method org/xerial/snappy/Snappy.uncompressedLength:(Ljava/nio/ByteBuffer;)I
     193: istore        4
     195: iload         4
     197: aload_0
     198: getfield      #28                 // Field uncompressedDirect:Ljava/nio/ByteBuffer;
     201: invokevirtual #71                 // Method java/nio/ByteBuffer.capacity:()I
     204: if_icmple     234
     207: aload_0
     208: iload         4
     210: invokestatic  #29                 // Method java/nio/ByteBuffer.allocateDirect:(I)Ljava/nio/ByteBuffer;
     213: putfield      #28                 // Field uncompressedDirect:Ljava/nio/ByteBuffer;
     216: aload_0
     217: aload_0
     218: getfield      #26                 // Field input:Ljava/nio/ByteBuffer;
     221: invokevirtual #71                 // Method java/nio/ByteBuffer.capacity:()I
     224: iload         4
     226: invokestatic  #78                 // Method java/lang/Math.max:(II)I
     229: newarray       byte
     231: putfield      #31                 // Field buffer:[B
     234: aload_0
     235: getfield      #28                 // Field uncompressedDirect:Ljava/nio/ByteBuffer;
     238: invokevirtual #58                 // Method java/nio/ByteBuffer.clear:()Ljava/nio/Buffer;
     241: pop
     242: aload_0
     243: aload_0
     244: getfield      #26                 // Field input:Ljava/nio/ByteBuffer;
     247: aload_0
     248: getfield      #28                 // Field uncompressedDirect:Ljava/nio/ByteBuffer;
     251: invokestatic  #79                 // Method org/xerial/snappy/Snappy.uncompress:(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)I
     254: putfield      #51                 // Field valid:I
     257: aload_0
     258: getfield      #28                 // Field uncompressedDirect:Ljava/nio/ByteBuffer;
     261: aload_0
     262: getfield      #31                 // Field buffer:[B
     265: iconst_0
     266: aload_0
     267: getfield      #51                 // Field valid:I
     270: invokevirtual #80                 // Method java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;
     273: pop
     274: aload_0
     275: iconst_0
     276: putfield      #34                 // Field position:I
     279: goto          330
     282: aload_0
     283: getfield      #26                 // Field input:Ljava/nio/ByteBuffer;
     286: aload_3
     287: getfield      #76                 // Field org/xerial/snappy/SnappyFramedInputStream$FrameData.offset:I
     290: invokevirtual #59                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
     293: pop
     294: aload_0
     295: iconst_0
     296: putfield      #34                 // Field position:I
     299: aload_0
     300: aload_0
     301: getfield      #26                 // Field input:Ljava/nio/ByteBuffer;
     304: invokevirtual #53                 // Method java/nio/ByteBuffer.remaining:()I
     307: putfield      #51                 // Field valid:I
     310: aload_0
     311: getfield      #26                 // Field input:Ljava/nio/ByteBuffer;
     314: aload_0
     315: getfield      #31                 // Field buffer:[B
     318: iconst_0
     319: aload_0
     320: getfield      #26                 // Field input:Ljava/nio/ByteBuffer;
     323: invokevirtual #53                 // Method java/nio/ByteBuffer.remaining:()I
     326: invokevirtual #80                 // Method java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;
     329: pop
     330: aload_0
     331: getfield      #11                 // Field verifyChecksums:Z
     334: ifeq          378
     337: aload_0
     338: getfield      #31                 // Field buffer:[B
     341: aload_0
     342: getfield      #34                 // Field position:I
     345: aload_0
     346: getfield      #51                 // Field valid:I
     349: aload_0
     350: getfield      #34                 // Field position:I
     353: isub
     354: invokestatic  #81                 // Method org/xerial/snappy/SnappyFramed.maskedCrc32c:([BII)I
     357: istore        4
     359: aload_3
     360: getfield      #82                 // Field org/xerial/snappy/SnappyFramedInputStream$FrameData.checkSum:I
     363: iload         4
     365: if_icmpeq     378
     368: new           #23                 // class java/io/IOException
     371: dup
     372: ldc           #83                 // String Corrupt input: invalid checksum
     374: invokespecial #25                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     377: athrow
     378: iconst_1
     379: ireturn

  private boolean readBlockHeader() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #15                 // Field frameHeader:Ljava/nio/ByteBuffer;
       4: invokevirtual #58                 // Method java/nio/ByteBuffer.clear:()Ljava/nio/Buffer;
       7: pop
       8: aload_0
       9: getfield      #10                 // Field rbc:Ljava/nio/channels/ReadableByteChannel;
      12: aload_0
      13: getfield      #15                 // Field frameHeader:Ljava/nio/ByteBuffer;
      16: invokestatic  #18                 // Method org/xerial/snappy/SnappyFramed.readBytes:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)I
      19: istore_1
      20: iload_1
      21: iconst_m1
      22: if_icmpne     27
      25: iconst_0
      26: ireturn
      27: iload_1
      28: aload_0
      29: getfield      #15                 // Field frameHeader:Ljava/nio/ByteBuffer;
      32: invokevirtual #71                 // Method java/nio/ByteBuffer.capacity:()I
      35: if_icmpge     48
      38: new           #19                 // class java/io/EOFException
      41: dup
      42: ldc           #84                 // String encountered EOF while reading block header
      44: invokespecial #21                 // Method java/io/EOFException."<init>":(Ljava/lang/String;)V
      47: athrow
      48: aload_0
      49: getfield      #15                 // Field frameHeader:Ljava/nio/ByteBuffer;
      52: invokevirtual #73                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;
      55: pop
      56: iconst_1
      57: ireturn

  private org.xerial.snappy.SnappyFramedInputStream$FrameMetaData getFrameMetaData(java.nio.ByteBuffer) throws java.io.IOException;
    Code:
       0: getstatic     #85                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_1
       7: invokevirtual #86                 // Method java/nio/ByteBuffer.hasArray:()Z
      10: ifne          21
      13: new           #87                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #88                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_1
      22: invokevirtual #89                 // Method java/nio/ByteBuffer.array:()[B
      25: astore_2
      26: aload_2
      27: iconst_1
      28: baload
      29: sipush        255
      32: iand
      33: istore_3
      34: iload_3
      35: aload_2
      36: iconst_2
      37: baload
      38: sipush        255
      41: iand
      42: bipush        8
      44: ishl
      45: ior
      46: istore_3
      47: iload_3
      48: aload_2
      49: iconst_3
      50: baload
      51: sipush        255
      54: iand
      55: bipush        16
      57: ishl
      58: ior
      59: istore_3
      60: iconst_0
      61: istore        4
      63: aload_2
      64: iconst_0
      65: baload
      66: sipush        255
      69: iand
      70: istore        6
      72: iload         6
      74: lookupswitch  { // 3
                     0: 108
                     1: 119
                   255: 130
               default: 175
          }
     108: getstatic     #75                 // Field org/xerial/snappy/SnappyFramedInputStream$FrameAction.UNCOMPRESS:Lorg/xerial/snappy/SnappyFramedInputStream$FrameAction;
     111: astore        5
     113: iconst_5
     114: istore        4
     116: goto          221
     119: getstatic     #90                 // Field org/xerial/snappy/SnappyFramedInputStream$FrameAction.RAW:Lorg/xerial/snappy/SnappyFramedInputStream$FrameAction;
     122: astore        5
     124: iconst_5
     125: istore        4
     127: goto          221
     130: iload_3
     131: bipush        6
     133: if_icmpeq     163
     136: new           #23                 // class java/io/IOException
     139: dup
     140: new           #38                 // class java/lang/StringBuilder
     143: dup
     144: invokespecial #39                 // Method java/lang/StringBuilder."<init>":()V
     147: ldc           #91                 // String stream identifier chunk with invalid length:
     149: invokevirtual #41                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     152: iload_3
     153: invokevirtual #42                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     156: invokevirtual #45                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     159: invokespecial #25                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     162: athrow
     163: getstatic     #67                 // Field org/xerial/snappy/SnappyFramedInputStream$FrameAction.SKIP:Lorg/xerial/snappy/SnappyFramedInputStream$FrameAction;
     166: astore        5
     168: bipush        6
     170: istore        4
     172: goto          221
     175: iload         6
     177: bipush        127
     179: if_icmpgt     213
     182: new           #23                 // class java/io/IOException
     185: dup
     186: new           #38                 // class java/lang/StringBuilder
     189: dup
     190: invokespecial #39                 // Method java/lang/StringBuilder."<init>":()V
     193: ldc           #92                 // String unsupported unskippable chunk:
     195: invokevirtual #41                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     198: iload         6
     200: invokestatic  #93                 // Method java/lang/Integer.toHexString:(I)Ljava/lang/String;
     203: invokevirtual #41                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     206: invokevirtual #45                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     209: invokespecial #25                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     212: athrow
     213: getstatic     #67                 // Field org/xerial/snappy/SnappyFramedInputStream$FrameAction.SKIP:Lorg/xerial/snappy/SnappyFramedInputStream$FrameAction;
     216: astore        5
     218: iconst_0
     219: istore        4
     221: iload_3
     222: iload         4
     224: if_icmpge     267
     227: new           #23                 // class java/io/IOException
     230: dup
     231: new           #38                 // class java/lang/StringBuilder
     234: dup
     235: invokespecial #39                 // Method java/lang/StringBuilder."<init>":()V
     238: ldc           #94                 // String invalid length:
     240: invokevirtual #41                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     243: iload_3
     244: invokevirtual #42                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     247: ldc           #95                 // String  for chunk flag:
     249: invokevirtual #41                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     252: iload         6
     254: invokestatic  #93                 // Method java/lang/Integer.toHexString:(I)Ljava/lang/String;
     257: invokevirtual #41                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     260: invokevirtual #45                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     263: invokespecial #25                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     266: athrow
     267: new           #96                 // class org/xerial/snappy/SnappyFramedInputStream$FrameMetaData
     270: dup
     271: aload         5
     273: iload_3
     274: invokespecial #97                 // Method org/xerial/snappy/SnappyFramedInputStream$FrameMetaData."<init>":(Lorg/xerial/snappy/SnappyFramedInputStream$FrameAction;I)V
     277: areturn

  private org.xerial.snappy.SnappyFramedInputStream$FrameData getFrameData(java.nio.ByteBuffer) throws java.io.IOException;
    Code:
       0: new           #98                 // class org/xerial/snappy/SnappyFramedInputStream$FrameData
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #99                 // Method getCrc32c:(Ljava/nio/ByteBuffer;)I
       9: iconst_4
      10: invokespecial #100                // Method org/xerial/snappy/SnappyFramedInputStream$FrameData."<init>":(II)V
      13: areturn

  private int getCrc32c(java.nio.ByteBuffer);
    Code:
       0: aload_1
       1: invokevirtual #62                 // Method java/nio/ByteBuffer.position:()I
       4: istore_2
       5: aload_1
       6: iload_2
       7: iconst_3
       8: iadd
       9: invokevirtual #101                // Method java/nio/ByteBuffer.get:(I)B
      12: sipush        255
      15: iand
      16: bipush        24
      18: ishl
      19: aload_1
      20: iload_2
      21: iconst_2
      22: iadd
      23: invokevirtual #101                // Method java/nio/ByteBuffer.get:(I)B
      26: sipush        255
      29: iand
      30: bipush        16
      32: ishl
      33: ior
      34: aload_1
      35: iload_2
      36: iconst_1
      37: iadd
      38: invokevirtual #101                // Method java/nio/ByteBuffer.get:(I)B
      41: sipush        255
      44: iand
      45: bipush        8
      47: ishl
      48: ior
      49: aload_1
      50: iload_2
      51: invokevirtual #101                // Method java/nio/ByteBuffer.get:(I)B
      54: sipush        255
      57: iand
      58: ior
      59: ireturn

  static {};
    Code:
       0: ldc           #102                // class org/xerial/snappy/SnappyFramedInputStream
       2: invokevirtual #103                // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #85                 // Field $assertionsDisabled:Z
      16: return
}
