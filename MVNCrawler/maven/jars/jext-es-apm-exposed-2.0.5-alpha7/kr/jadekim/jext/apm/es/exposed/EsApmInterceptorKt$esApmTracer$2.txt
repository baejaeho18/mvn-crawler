Compiled from "EsApmInterceptor.kt"
public final class kr.jadekim.jext.apm.es.exposed.EsApmInterceptorKt$esApmTracer$2 implements org.jetbrains.exposed.sql.statements.StatementInterceptor {
  private co.elastic.apm.api.Span span;

  final kr.jadekim.jext.apm.es.EsApmContext $apm;

  kr.jadekim.jext.apm.es.exposed.EsApmInterceptorKt$esApmTracer$2(kr.jadekim.jext.apm.es.EsApmContext);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #12                 // Field $apm:Lkr/jadekim/jext/apm/es/EsApmContext;
       5: aload_0
       6: invokespecial #15                 // Method java/lang/Object."<init>":()V
       9: return

  public void beforeExecution(org.jetbrains.exposed.sql.Transaction, org.jetbrains.exposed.sql.statements.StatementContext);
    Code:
       0: aload_1
       1: ldc           #22                 // String transaction
       3: invokestatic  #28                 // Method kotlin/jvm/internal/Intrinsics.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_2
       7: ldc           #30                 // String context
       9: invokestatic  #28                 // Method kotlin/jvm/internal/Intrinsics.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V
      12: aload_0
      13: aload_0
      14: getfield      #12                 // Field $apm:Lkr/jadekim/jext/apm/es/EsApmContext;
      17: invokevirtual #36                 // Method kr/jadekim/jext/apm/es/EsApmContext.getTransaction:()Lco/elastic/apm/api/Transaction;
      20: ldc           #38                 // String db
      22: aload_1
      23: invokevirtual #44                 // Method org/jetbrains/exposed/sql/Transaction.getDb:()Lorg/jetbrains/exposed/sql/Database;
      26: invokevirtual #50                 // Method org/jetbrains/exposed/sql/Database.getVendor:()Ljava/lang/String;
      29: aload_2
      30: invokevirtual #56                 // Method org/jetbrains/exposed/sql/statements/StatementContext.getStatement:()Lorg/jetbrains/exposed/sql/statements/Statement;
      33: invokevirtual #62                 // Method org/jetbrains/exposed/sql/statements/Statement.getType:()Lorg/jetbrains/exposed/sql/statements/StatementType;
      36: invokevirtual #67                 // Method org/jetbrains/exposed/sql/statements/StatementType.name:()Ljava/lang/String;
      39: aload_2
      40: invokevirtual #56                 // Method org/jetbrains/exposed/sql/statements/StatementContext.getStatement:()Lorg/jetbrains/exposed/sql/statements/Statement;
      43: aload_1
      44: invokevirtual #71                 // Method org/jetbrains/exposed/sql/statements/Statement.prepareSQL:(Lorg/jetbrains/exposed/sql/Transaction;)Ljava/lang/String;
      47: invokestatic  #77                 // Method kr/jadekim/jext/apm/es/ExtensionsKt.newSpan:(Lco/elastic/apm/api/Transaction;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lco/elastic/apm/api/Span;
      50: ldc           #79                 // String url
      52: aload_1
      53: invokevirtual #44                 // Method org/jetbrains/exposed/sql/Transaction.getDb:()Lorg/jetbrains/exposed/sql/Database;
      56: invokevirtual #82                 // Method org/jetbrains/exposed/sql/Database.getUrl:()Ljava/lang/String;
      59: invokeinterface #88,  3           // InterfaceMethod co/elastic/apm/api/Span.setLabel:(Ljava/lang/String;Ljava/lang/String;)Lco/elastic/apm/api/Span;
      64: putfield      #92                 // Field span:Lco/elastic/apm/api/Span;
      67: return

  public void afterCommit();
    Code:
       0: aload_0
       1: getfield      #92                 // Field span:Lco/elastic/apm/api/Span;
       4: dup
       5: ifnull        29
       8: ldc           #97                 // String result
      10: ldc           #99                 // String commit
      12: invokeinterface #88,  3           // InterfaceMethod co/elastic/apm/api/Span.setLabel:(Ljava/lang/String;Ljava/lang/String;)Lco/elastic/apm/api/Span;
      17: dup
      18: ifnull        29
      21: invokeinterface #102,  1          // InterfaceMethod co/elastic/apm/api/Span.end:()V
      26: goto          30
      29: pop
      30: return

  public void afterRollback();
    Code:
       0: aload_0
       1: getfield      #92                 // Field span:Lco/elastic/apm/api/Span;
       4: dup
       5: ifnull        29
       8: ldc           #97                 // String result
      10: ldc           #105                // String rollback
      12: invokeinterface #88,  3           // InterfaceMethod co/elastic/apm/api/Span.setLabel:(Ljava/lang/String;Ljava/lang/String;)Lco/elastic/apm/api/Span;
      17: dup
      18: ifnull        29
      21: invokeinterface #102,  1          // InterfaceMethod co/elastic/apm/api/Span.end:()V
      26: goto          30
      29: pop
      30: return

  public void afterCommit(org.jetbrains.exposed.sql.Transaction);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #111                // Method org/jetbrains/exposed/sql/statements/StatementInterceptor$DefaultImpls.afterCommit:(Lorg/jetbrains/exposed/sql/statements/StatementInterceptor;Lorg/jetbrains/exposed/sql/Transaction;)V
       5: return

  public void afterRollback(org.jetbrains.exposed.sql.Transaction);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #113                // Method org/jetbrains/exposed/sql/statements/StatementInterceptor$DefaultImpls.afterRollback:(Lorg/jetbrains/exposed/sql/statements/StatementInterceptor;Lorg/jetbrains/exposed/sql/Transaction;)V
       5: return

  public void afterExecution(org.jetbrains.exposed.sql.Transaction, java.util.List<org.jetbrains.exposed.sql.statements.StatementContext>, org.jetbrains.exposed.sql.statements.api.PreparedStatementApi);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #119                // Method org/jetbrains/exposed/sql/statements/StatementInterceptor$DefaultImpls.afterExecution:(Lorg/jetbrains/exposed/sql/statements/StatementInterceptor;Lorg/jetbrains/exposed/sql/Transaction;Ljava/util/List;Lorg/jetbrains/exposed/sql/statements/api/PreparedStatementApi;)V
       7: return

  public void beforeCommit(org.jetbrains.exposed.sql.Transaction);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #126                // Method org/jetbrains/exposed/sql/statements/StatementInterceptor$DefaultImpls.beforeCommit:(Lorg/jetbrains/exposed/sql/statements/StatementInterceptor;Lorg/jetbrains/exposed/sql/Transaction;)V
       5: return

  public void beforeRollback(org.jetbrains.exposed.sql.Transaction);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #129                // Method org/jetbrains/exposed/sql/statements/StatementInterceptor$DefaultImpls.beforeRollback:(Lorg/jetbrains/exposed/sql/statements/StatementInterceptor;Lorg/jetbrains/exposed/sql/Transaction;)V
       5: return

  public java.util.Map<org.jetbrains.exposed.sql.Key<?>, java.lang.Object> keepUserDataInTransactionStoreOnCommit(java.util.Map<org.jetbrains.exposed.sql.Key<?>, ? extends java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #135                // Method org/jetbrains/exposed/sql/statements/StatementInterceptor$DefaultImpls.keepUserDataInTransactionStoreOnCommit:(Lorg/jetbrains/exposed/sql/statements/StatementInterceptor;Ljava/util/Map;)Ljava/util/Map;
       5: areturn
}
