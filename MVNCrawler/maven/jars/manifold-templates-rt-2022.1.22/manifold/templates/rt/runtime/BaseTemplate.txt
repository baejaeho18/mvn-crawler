Compiled from "BaseTemplate.java"
public abstract class manifold.templates.rt.runtime.BaseTemplate {
  private manifold.templates.rt.runtime.ILayout _explicitLayout;

  private manifold.util.concurrent.LocklessLazyVar<java.lang.String> _templateText;

  public manifold.templates.rt.runtime.BaseTemplate();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #2                  // Field _explicitLayout:Lmanifold/templates/rt/runtime/ILayout;
       9: aload_0
      10: aload_0
      11: invokedynamic #3,  0              // InvokeDynamic #0:init:(Lmanifold/templates/rt/runtime/BaseTemplate;)Lmanifold/util/concurrent/LocklessLazyVar$LazyVarInit;
      16: invokestatic  #4                  // Method manifold/util/concurrent/LocklessLazyVar.make:(Lmanifold/util/concurrent/LocklessLazyVar$LazyVarInit;)Lmanifold/util/concurrent/LocklessLazyVar;
      19: putfield      #5                  // Field _templateText:Lmanifold/util/concurrent/LocklessLazyVar;
      22: return

  protected abstract java.io.InputStream getTemplateResourceAsStream();

  protected java.lang.String getTemplateText();
    Code:
       0: aload_0
       1: getfield      #5                  // Field _templateText:Lmanifold/util/concurrent/LocklessLazyVar;
       4: invokevirtual #6                  // Method manifold/util/concurrent/LocklessLazyVar.get:()Ljava/lang/Object;
       7: checkcast     #7                  // class java/lang/String
      10: areturn

  protected void setLayout(manifold.templates.rt.runtime.ILayout);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2                  // Field _explicitLayout:Lmanifold/templates/rt/runtime/ILayout;
       5: return

  protected manifold.templates.rt.runtime.ILayout getTemplateLayout();
    Code:
       0: aload_0
       1: getfield      #2                  // Field _explicitLayout:Lmanifold/templates/rt/runtime/ILayout;
       4: ifnull        12
       7: aload_0
       8: getfield      #2                  // Field _explicitLayout:Lmanifold/templates/rt/runtime/ILayout;
      11: areturn
      12: aload_0
      13: invokevirtual #8                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
      16: invokevirtual #9                  // Method java/lang/Class.getName:()Ljava/lang/String;
      19: invokestatic  #10                 // Method manifold/templates/rt/ManifoldTemplates.getDefaultLayout:(Ljava/lang/String;)Lmanifold/templates/rt/runtime/ILayout;
      22: areturn

  protected manifold.templates.rt.runtime.ILayout getExplicitLayout();
    Code:
       0: aload_0
       1: getfield      #2                  // Field _explicitLayout:Lmanifold/templates/rt/runtime/ILayout;
       4: areturn

  protected void beforeRender(java.lang.Appendable, manifold.templates.rt.runtime.ILayout, boolean) throws java.io.IOException;
    Code:
       0: iload_3
       1: ifeq          26
       4: aload_2
       5: ifnonnull     15
       8: aload_0
       9: invokevirtual #11                 // Method getTemplateLayout:()Lmanifold/templates/rt/runtime/ILayout;
      12: goto          16
      15: aload_2
      16: astore        4
      18: aload         4
      20: aload_1
      21: invokeinterface #12,  2           // InterfaceMethod manifold/templates/rt/runtime/ILayout.header:(Ljava/lang/Appendable;)V
      26: return

  protected void afterRender(java.lang.Appendable, manifold.templates.rt.runtime.ILayout, boolean, long) throws java.io.IOException;
    Code:
       0: iload_3
       1: ifeq          26
       4: aload_2
       5: ifnonnull     15
       8: aload_0
       9: invokevirtual #11                 // Method getTemplateLayout:()Lmanifold/templates/rt/runtime/ILayout;
      12: goto          16
      15: aload_2
      16: astore        6
      18: aload         6
      20: aload_1
      21: invokeinterface #13,  2           // InterfaceMethod manifold/templates/rt/runtime/ILayout.footer:(Ljava/lang/Appendable;)V
      26: aload_1
      27: instanceof    #14                 // class manifold/templates/rt/runtime/WrapAppendable
      30: ifeq          40
      33: aload_1
      34: checkcast     #14                 // class manifold/templates/rt/runtime/WrapAppendable
      37: invokevirtual #15                 // Method manifold/templates/rt/runtime/WrapAppendable.complete:()V
      40: invokestatic  #16                 // Method manifold/templates/rt/ManifoldTemplates.getTracer:()Lmanifold/templates/rt/ManifoldTemplates$TraceCallback;
      43: aload_0
      44: invokevirtual #8                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
      47: lload         4
      49: invokeinterface #17,  4           // InterfaceMethod manifold/templates/rt/ManifoldTemplates$TraceCallback.trace:(Ljava/lang/Class;J)V
      54: return

  protected void handleException(java.lang.Exception, java.lang.String, int, int[]);
    Code:
       0: aload_1
       1: invokevirtual #18                 // Method java/lang/Exception.getStackTrace:()[Ljava/lang/StackTraceElement;
       4: astore        5
       6: aload_0
       7: invokevirtual #8                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
      10: invokevirtual #9                  // Method java/lang/Class.getName:()Ljava/lang/String;
      13: astore        6
      15: iconst_0
      16: istore        7
      18: iload         7
      20: aload         5
      22: arraylength
      23: if_icmpge     116
      26: aload         5
      28: iload         7
      30: aaload
      31: astore        8
      33: aload         8
      35: invokevirtual #19                 // Method java/lang/StackTraceElement.getClassName:()Ljava/lang/String;
      38: aload         6
      40: invokevirtual #20                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      43: ifeq          110
      46: aload         8
      48: invokevirtual #21                 // Method java/lang/StackTraceElement.getMethodName:()Ljava/lang/String;
      51: ldc           #22                 // String renderImpl
      53: invokevirtual #20                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      56: ifeq          73
      59: aload_0
      60: aload_1
      61: aload_2
      62: iload_3
      63: aload         4
      65: iload         7
      67: invokespecial #23                 // Method handleTemplateException:(Ljava/lang/Exception;Ljava/lang/String;I[II)V
      70: goto          110
      73: aload         8
      75: invokevirtual #21                 // Method java/lang/StackTraceElement.getMethodName:()Ljava/lang/String;
      78: ldc           #24                 // String footer
      80: invokevirtual #20                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      83: ifne          99
      86: aload         8
      88: invokevirtual #21                 // Method java/lang/StackTraceElement.getMethodName:()Ljava/lang/String;
      91: ldc           #25                 // String header
      93: invokevirtual #20                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      96: ifeq          110
      99: aload_0
     100: aload_1
     101: aload_2
     102: iload_3
     103: aload         4
     105: iload         7
     107: invokespecial #26                 // Method handleLayoutException:(Ljava/lang/Exception;Ljava/lang/String;I[II)V
     110: iinc          7, 1
     113: goto          18
     116: return

  private void handleTemplateException(java.lang.Exception, java.lang.String, int, int[], int);
    Code:
       0: aload_1
       1: invokevirtual #18                 // Method java/lang/Exception.getStackTrace:()[Ljava/lang/StackTraceElement;
       4: astore        6
       6: aload         6
       8: iload         5
      10: aaload
      11: invokevirtual #27                 // Method java/lang/StackTraceElement.getLineNumber:()I
      14: istore        7
      16: iload         7
      18: iload_3
      19: isub
      20: istore        8
      22: aload         6
      24: iload         5
      26: iconst_1
      27: iadd
      28: aaload
      29: invokevirtual #19                 // Method java/lang/StackTraceElement.getClassName:()Ljava/lang/String;
      32: astore        9
      34: aload         6
      36: iload         5
      38: iconst_1
      39: iadd
      40: aaload
      41: invokevirtual #21                 // Method java/lang/StackTraceElement.getMethodName:()Ljava/lang/String;
      44: astore        10
      46: new           #28                 // class java/lang/StackTraceElement
      49: dup
      50: aload         9
      52: aload         10
      54: aload_2
      55: aload         4
      57: iload         8
      59: iaload
      60: invokespecial #29                 // Method java/lang/StackTraceElement."<init>":(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V
      63: astore        11
      65: aload         6
      67: iload         5
      69: iconst_1
      70: iadd
      71: aload         11
      73: aastore
      74: aload         6
      76: iload         5
      78: iconst_1
      79: iadd
      80: aload         6
      82: iload         5
      84: aload         6
      86: arraylength
      87: iconst_1
      88: isub
      89: iload         5
      91: isub
      92: invokestatic  #30                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      95: aload_0
      96: aload_1
      97: aload         6
      99: invokespecial #31                 // Method throwUnchecked:(Ljava/lang/Exception;[Ljava/lang/StackTraceElement;)V
     102: return

  private void handleLayoutException(java.lang.Exception, java.lang.String, int, int[], int);
    Code:
       0: aload_1
       1: invokevirtual #18                 // Method java/lang/Exception.getStackTrace:()[Ljava/lang/StackTraceElement;
       4: astore        6
       6: aload         6
       8: iload         5
      10: aaload
      11: invokevirtual #27                 // Method java/lang/StackTraceElement.getLineNumber:()I
      14: istore        7
      16: iload         7
      18: iload_3
      19: isub
      20: istore        8
      22: aload         6
      24: iload         5
      26: aaload
      27: invokevirtual #19                 // Method java/lang/StackTraceElement.getClassName:()Ljava/lang/String;
      30: astore        9
      32: aload         6
      34: iload         5
      36: aaload
      37: invokevirtual #21                 // Method java/lang/StackTraceElement.getMethodName:()Ljava/lang/String;
      40: astore        10
      42: new           #28                 // class java/lang/StackTraceElement
      45: dup
      46: aload         9
      48: aload         10
      50: aload_2
      51: aload         4
      53: iload         8
      55: iaload
      56: invokespecial #29                 // Method java/lang/StackTraceElement."<init>":(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V
      59: astore        11
      61: aload         6
      63: iload         5
      65: aload         11
      67: aastore
      68: aload_0
      69: aload_1
      70: aload         6
      72: invokespecial #31                 // Method throwUnchecked:(Ljava/lang/Exception;[Ljava/lang/StackTraceElement;)V
      75: return

  private void throwUnchecked(java.lang.Exception, java.lang.StackTraceElement[]);
    Code:
       0: aload_1
       1: aload_2
       2: invokevirtual #32                 // Method java/lang/Exception.setStackTrace:([Ljava/lang/StackTraceElement;)V
       5: aload_1
       6: invokestatic  #33                 // Method manifold/util/ManExceptionUtil.unchecked:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
       9: athrow

  public java.lang.String toS(java.lang.Object);
    Code:
       0: aload_1
       1: ifnonnull     9
       4: ldc           #34                 // String
       6: goto          13
       9: aload_1
      10: invokevirtual #35                 // Method java/lang/Object.toString:()Ljava/lang/String;
      13: areturn

  private java.lang.String lambda$new$0();
    Code:
       0: new           #36                 // class java/io/InputStreamReader
       3: dup
       4: aload_0
       5: invokevirtual #37                 // Method getTemplateResourceAsStream:()Ljava/io/InputStream;
       8: getstatic     #38                 // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
      11: invokespecial #39                 // Method java/io/InputStreamReader."<init>":(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V
      14: astore_1
      15: aload_1
      16: invokestatic  #40                 // Method manifold/rt/api/util/StreamUtil.getContent:(Ljava/io/Reader;)Ljava/lang/String;
      19: ldc           #41                 // String \r\n
      21: ldc           #42                 // String \n
      23: invokevirtual #43                 // Method java/lang/String.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;
      26: areturn
      27: astore_1
      28: aload_1
      29: invokestatic  #33                 // Method manifold/util/ManExceptionUtil.unchecked:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
      32: athrow
    Exception table:
       from    to  target type
           0    26    27   Class java/lang/Exception
}
