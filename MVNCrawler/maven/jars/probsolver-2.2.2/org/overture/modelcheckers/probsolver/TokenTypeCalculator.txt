Compiled from "TokenTypeCalculator.java"
public class org.overture.modelcheckers.probsolver.TokenTypeCalculator extends org.overture.ast.analysis.DepthFirstAnalysisAdaptor {
  final java.util.List<org.overture.ast.types.PType> types;

  protected org.overture.typechecker.assistant.ITypeCheckerAssistantFactory af;

  public org.overture.modelcheckers.probsolver.TokenTypeCalculator(org.overture.typechecker.assistant.ITypeCheckerAssistantFactory);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/overture/ast/analysis/DepthFirstAnalysisAdaptor."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/Vector
       8: dup
       9: invokespecial #3                  // Method java/util/Vector."<init>":()V
      12: putfield      #4                  // Field types:Ljava/util/List;
      15: aload_0
      16: aload_1
      17: putfield      #5                  // Field af:Lorg/overture/typechecker/assistant/ITypeCheckerAssistantFactory;
      20: return

  public void caseAMkBasicExp(org.overture.ast.expressions.AMkBasicExp) throws org.overture.ast.analysis.AnalysisException;
    Code:
       0: aload_1
       1: invokevirtual #6                  // Method org/overture/ast/expressions/AMkBasicExp.getType:()Lorg/overture/ast/types/PType;
       4: instanceof    #7                  // class org/overture/ast/types/ATokenBasicType
       7: ifeq          46
      10: aload_1
      11: invokevirtual #8                  // Method org/overture/ast/expressions/AMkBasicExp.getArg:()Lorg/overture/ast/expressions/PExp;
      14: invokeinterface #9,  1            // InterfaceMethod org/overture/ast/expressions/PExp.getType:()Lorg/overture/ast/types/PType;
      19: ifnull        46
      22: aload_0
      23: getfield      #4                  // Field types:Ljava/util/List;
      26: aload_1
      27: invokevirtual #8                  // Method org/overture/ast/expressions/AMkBasicExp.getArg:()Lorg/overture/ast/expressions/PExp;
      30: invokeinterface #9,  1            // InterfaceMethod org/overture/ast/expressions/PExp.getType:()Lorg/overture/ast/types/PType;
      35: invokeinterface #10,  1           // InterfaceMethod org/overture/ast/types/PType.clone:()Lorg/overture/ast/types/PType;
      40: invokeinterface #11,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      45: pop
      46: return

  public org.overture.ast.types.PType getTokenType();
    Code:
       0: aload_0
       1: getfield      #4                  // Field types:Ljava/util/List;
       4: invokeinterface #12,  1           // InterfaceMethod java/util/List.isEmpty:()Z
       9: ifeq          20
      12: new           #13                 // class org/overture/ast/types/AIntNumericBasicType
      15: dup
      16: invokespecial #14                 // Method org/overture/ast/types/AIntNumericBasicType."<init>":()V
      19: areturn
      20: new           #15                 // class org/overture/ast/util/PTypeSet
      23: dup
      24: aload_0
      25: getfield      #4                  // Field types:Ljava/util/List;
      28: aload_0
      29: getfield      #5                  // Field af:Lorg/overture/typechecker/assistant/ITypeCheckerAssistantFactory;
      32: invokespecial #16                 // Method org/overture/ast/util/PTypeSet."<init>":(Ljava/util/List;Lorg/overture/ast/assistant/IAstAssistantFactory;)V
      35: astore_1
      36: aload_1
      37: aconst_null
      38: invokevirtual #17                 // Method org/overture/ast/util/PTypeSet.getType:(Lorg/overture/ast/intf/lex/ILexLocation;)Lorg/overture/ast/types/PType;
      41: areturn
}
