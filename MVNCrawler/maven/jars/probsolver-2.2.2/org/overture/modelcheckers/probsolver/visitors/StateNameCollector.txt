Compiled from "StateNameCollector.java"
public class org.overture.modelcheckers.probsolver.visitors.StateNameCollector extends org.overture.ast.analysis.DepthFirstAnalysisAdaptor {
  public final java.util.Collection<org.overture.ast.intf.lex.ILexNameToken> names;

  public org.overture.modelcheckers.probsolver.visitors.StateNameCollector();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/overture/ast/analysis/DepthFirstAnalysisAdaptor."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/HashSet
       8: dup
       9: invokespecial #3                  // Method java/util/HashSet."<init>":()V
      12: putfield      #4                  // Field names:Ljava/util/Collection;
      15: return

  public static java.util.Collection<org.overture.ast.intf.lex.ILexNameToken> collectStateNamesFromOwningDefinition(org.overture.ast.definitions.PDefinition);
    Code:
       0: aload_0
       1: ldc_w         #5                  // class org/overture/ast/definitions/SClassDefinition
       4: invokeinterface #6,  2            // InterfaceMethod org/overture/ast/definitions/PDefinition.getAncestor:(Ljava/lang/Class;)Lorg/overture/ast/node/INode;
       9: astore_1
      10: aload_1
      11: ifnonnull     24
      14: aload_0
      15: ldc_w         #7                  // class org/overture/ast/modules/AModuleModules
      18: invokeinterface #6,  2            // InterfaceMethod org/overture/ast/definitions/PDefinition.getAncestor:(Ljava/lang/Class;)Lorg/overture/ast/node/INode;
      23: astore_1
      24: aload_1
      25: new           #8                  // class org/overture/modelcheckers/probsolver/visitors/StateNameCollector
      28: dup
      29: invokespecial #9                  // Method "<init>":()V
      32: invokeinterface #10,  2           // InterfaceMethod org/overture/ast/node/INode.apply:(Lorg/overture/ast/analysis/intf/IAnalysis;)V
      37: goto          51
      40: astore_2
      41: aload_2
      42: getfield      #12                 // Field org/overture/modelcheckers/probsolver/visitors/StateNameCollector$StateNamedObtainedException.names:Ljava/util/Collection;
      45: areturn
      46: astore_2
      47: aload_2
      48: invokevirtual #14                 // Method org/overture/ast/analysis/AnalysisException.printStackTrace:()V
      51: new           #15                 // class java/util/Vector
      54: dup
      55: invokespecial #16                 // Method java/util/Vector."<init>":()V
      58: areturn
    Exception table:
       from    to  target type
          24    37    40   Class org/overture/modelcheckers/probsolver/visitors/StateNameCollector$StateNamedObtainedException
          24    37    46   Class org/overture/ast/analysis/AnalysisException

  public void outAStateDefinition(org.overture.ast.definitions.AStateDefinition) throws org.overture.ast.analysis.AnalysisException;
    Code:
       0: new           #11                 // class org/overture/modelcheckers/probsolver/visitors/StateNameCollector$StateNamedObtainedException
       3: dup
       4: aload_0
       5: aload_0
       6: getfield      #4                  // Field names:Ljava/util/Collection;
       9: invokespecial #17                 // Method org/overture/modelcheckers/probsolver/visitors/StateNameCollector$StateNamedObtainedException."<init>":(Lorg/overture/modelcheckers/probsolver/visitors/StateNameCollector;Ljava/util/Collection;)V
      12: athrow

  public void outAClassClassDefinition(org.overture.ast.definitions.AClassClassDefinition) throws org.overture.ast.analysis.AnalysisException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #18                 // Method outSClassDefinition:(Lorg/overture/ast/definitions/SClassDefinition;)V
       5: return

  public void outSClassDefinition(org.overture.ast.definitions.SClassDefinition) throws org.overture.ast.analysis.AnalysisException;
    Code:
       0: new           #11                 // class org/overture/modelcheckers/probsolver/visitors/StateNameCollector$StateNamedObtainedException
       3: dup
       4: aload_0
       5: aload_0
       6: getfield      #4                  // Field names:Ljava/util/Collection;
       9: invokespecial #17                 // Method org/overture/modelcheckers/probsolver/visitors/StateNameCollector$StateNamedObtainedException."<init>":(Lorg/overture/modelcheckers/probsolver/visitors/StateNameCollector;Ljava/util/Collection;)V
      12: athrow

  public void caseAInstanceVariableDefinition(org.overture.ast.definitions.AInstanceVariableDefinition) throws org.overture.ast.analysis.AnalysisException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field names:Ljava/util/Collection;
       4: aload_1
       5: invokevirtual #19                 // Method org/overture/ast/definitions/AInstanceVariableDefinition.getName:()Lorg/overture/ast/intf/lex/ILexNameToken;
       8: invokeinterface #20,  2           // InterfaceMethod java/util/Collection.add:(Ljava/lang/Object;)Z
      13: pop
      14: return

  public void caseAFieldField(org.overture.ast.types.AFieldField) throws org.overture.ast.analysis.AnalysisException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field names:Ljava/util/Collection;
       4: aload_1
       5: invokevirtual #21                 // Method org/overture/ast/types/AFieldField.getTagname:()Lorg/overture/ast/intf/lex/ILexNameToken;
       8: invokeinterface #20,  2           // InterfaceMethod java/util/Collection.add:(Ljava/lang/Object;)Z
      13: pop
      14: return
}
