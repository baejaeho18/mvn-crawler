Compiled from "BackgroundInitializer.java"
public abstract class org.apache.commons.lang3.concurrent.BackgroundInitializer<T> implements org.apache.commons.lang3.concurrent.ConcurrentInitializer<T> {
  private java.util.concurrent.ExecutorService externalExecutor;

  private java.util.concurrent.ExecutorService executor;

  private java.util.concurrent.Future<T> future;

  protected org.apache.commons.lang3.concurrent.BackgroundInitializer();
    Code:
       0: aload_0
       1: aconst_null
       2: invokespecial #1                  // Method "<init>":(Ljava/util/concurrent/ExecutorService;)V
       5: return

  protected org.apache.commons.lang3.concurrent.BackgroundInitializer(java.util.concurrent.ExecutorService);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: invokevirtual #3                  // Method setExternalExecutor:(Ljava/util/concurrent/ExecutorService;)V
       9: return

  public final synchronized java.util.concurrent.ExecutorService getExternalExecutor();
    Code:
       0: aload_0
       1: getfield      #4                  // Field externalExecutor:Ljava/util/concurrent/ExecutorService;
       4: areturn

  public synchronized boolean isStarted();
    Code:
       0: aload_0
       1: getfield      #5                  // Field future:Ljava/util/concurrent/Future;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public final synchronized void setExternalExecutor(java.util.concurrent.ExecutorService);
    Code:
       0: aload_0
       1: invokevirtual #6                  // Method isStarted:()Z
       4: ifeq          17
       7: new           #7                  // class java/lang/IllegalStateException
      10: dup
      11: ldc           #8                  // String Cannot set ExecutorService after start()!
      13: invokespecial #9                  // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: aload_1
      19: putfield      #4                  // Field externalExecutor:Ljava/util/concurrent/ExecutorService;
      22: return

  public synchronized boolean start();
    Code:
       0: aload_0
       1: invokevirtual #6                  // Method isStarted:()Z
       4: ifne          57
       7: aload_0
       8: aload_0
       9: invokevirtual #10                 // Method getExternalExecutor:()Ljava/util/concurrent/ExecutorService;
      12: putfield      #11                 // Field executor:Ljava/util/concurrent/ExecutorService;
      15: aload_0
      16: getfield      #11                 // Field executor:Ljava/util/concurrent/ExecutorService;
      19: ifnonnull     35
      22: aload_0
      23: aload_0
      24: invokespecial #12                 // Method createExecutor:()Ljava/util/concurrent/ExecutorService;
      27: dup
      28: astore_1
      29: putfield      #11                 // Field executor:Ljava/util/concurrent/ExecutorService;
      32: goto          37
      35: aconst_null
      36: astore_1
      37: aload_0
      38: aload_0
      39: getfield      #11                 // Field executor:Ljava/util/concurrent/ExecutorService;
      42: aload_0
      43: aload_1
      44: invokespecial #13                 // Method createTask:(Ljava/util/concurrent/ExecutorService;)Ljava/util/concurrent/Callable;
      47: invokeinterface #14,  2           // InterfaceMethod java/util/concurrent/ExecutorService.submit:(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;
      52: putfield      #5                  // Field future:Ljava/util/concurrent/Future;
      55: iconst_1
      56: ireturn
      57: iconst_0
      58: ireturn

  public T get() throws org.apache.commons.lang3.concurrent.ConcurrentException;
    Code:
       0: aload_0
       1: invokevirtual #15                 // Method getFuture:()Ljava/util/concurrent/Future;
       4: invokeinterface #16,  1           // InterfaceMethod java/util/concurrent/Future.get:()Ljava/lang/Object;
       9: areturn
      10: astore_1
      11: aload_1
      12: invokestatic  #18                 // Method org/apache/commons/lang3/concurrent/ConcurrentUtils.handleCause:(Ljava/util/concurrent/ExecutionException;)V
      15: aconst_null
      16: areturn
      17: astore_1
      18: invokestatic  #20                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      21: invokevirtual #21                 // Method java/lang/Thread.interrupt:()V
      24: new           #22                 // class org/apache/commons/lang3/concurrent/ConcurrentException
      27: dup
      28: aload_1
      29: invokespecial #23                 // Method org/apache/commons/lang3/concurrent/ConcurrentException."<init>":(Ljava/lang/Throwable;)V
      32: athrow
    Exception table:
       from    to  target type
           0     9    10   Class java/util/concurrent/ExecutionException
           0     9    17   Class java/lang/InterruptedException

  public synchronized java.util.concurrent.Future<T> getFuture();
    Code:
       0: aload_0
       1: getfield      #5                  // Field future:Ljava/util/concurrent/Future;
       4: ifnonnull     17
       7: new           #7                  // class java/lang/IllegalStateException
      10: dup
      11: ldc           #24                 // String start() must be called first!
      13: invokespecial #9                  // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #5                  // Field future:Ljava/util/concurrent/Future;
      21: areturn

  protected final synchronized java.util.concurrent.ExecutorService getActiveExecutor();
    Code:
       0: aload_0
       1: getfield      #11                 // Field executor:Ljava/util/concurrent/ExecutorService;
       4: areturn

  protected int getTaskCount();
    Code:
       0: iconst_1
       1: ireturn

  protected abstract T initialize() throws java.lang.Exception;

  private java.util.concurrent.Callable<T> createTask(java.util.concurrent.ExecutorService);
    Code:
       0: new           #25                 // class org/apache/commons/lang3/concurrent/BackgroundInitializer$InitializationTask
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #26                 // Method org/apache/commons/lang3/concurrent/BackgroundInitializer$InitializationTask."<init>":(Lorg/apache/commons/lang3/concurrent/BackgroundInitializer;Ljava/util/concurrent/ExecutorService;)V
       9: areturn

  private java.util.concurrent.ExecutorService createExecutor();
    Code:
       0: aload_0
       1: invokevirtual #27                 // Method getTaskCount:()I
       4: invokestatic  #28                 // Method java/util/concurrent/Executors.newFixedThreadPool:(I)Ljava/util/concurrent/ExecutorService;
       7: areturn
}
