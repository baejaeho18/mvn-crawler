Compiled from "AsExistingPropertyTypeSerializer.java"
public class com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer extends com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeSerializer {
  public com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeIdResolver, com.fasterxml.jackson.databind.BeanProperty, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokespecial #1                  // Method com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeSerializer."<init>":(Lcom/fasterxml/jackson/databind/jsontype/TypeIdResolver;Lcom/fasterxml/jackson/databind/BeanProperty;Ljava/lang/String;)V
       7: return

  public com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer forProperty(com.fasterxml.jackson.databind.BeanProperty);
    Code:
       0: aload_0
       1: getfield      #2                  // Field _property:Lcom/fasterxml/jackson/databind/BeanProperty;
       4: aload_1
       5: if_acmpne     12
       8: aload_0
       9: goto          28
      12: new           #3                  // class com/fasterxml/jackson/databind/jsontype/impl/AsExistingPropertyTypeSerializer
      15: dup
      16: aload_0
      17: getfield      #4                  // Field _idResolver:Lcom/fasterxml/jackson/databind/jsontype/TypeIdResolver;
      20: aload_1
      21: aload_0
      22: getfield      #5                  // Field _typePropertyName:Ljava/lang/String;
      25: invokespecial #6                  // Method "<init>":(Lcom/fasterxml/jackson/databind/jsontype/TypeIdResolver;Lcom/fasterxml/jackson/databind/BeanProperty;Ljava/lang/String;)V
      28: areturn

  public com.fasterxml.jackson.annotation.JsonTypeInfo$As getTypeInclusion();
    Code:
       0: getstatic     #7                  // Field com/fasterxml/jackson/annotation/JsonTypeInfo$As.EXISTING_PROPERTY:Lcom/fasterxml/jackson/annotation/JsonTypeInfo$As;
       3: areturn

  public void writeTypePrefixForObject(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #8                  // Method idFromValue:(Ljava/lang/Object;)Ljava/lang/String;
       5: astore_3
       6: aload_3
       7: ifnull        22
      10: aload_2
      11: invokevirtual #9                  // Method com/fasterxml/jackson/core/JsonGenerator.canWriteTypeId:()Z
      14: ifeq          22
      17: aload_2
      18: aload_3
      19: invokevirtual #10                 // Method com/fasterxml/jackson/core/JsonGenerator.writeTypeId:(Ljava/lang/Object;)V
      22: aload_2
      23: invokevirtual #11                 // Method com/fasterxml/jackson/core/JsonGenerator.writeStartObject:()V
      26: return

  public void writeTypePrefixForObject(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, java.lang.Class<?>) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_3
       3: invokevirtual #12                 // Method idFromValueAndType:(Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/String;
       6: astore        4
       8: aload         4
      10: ifnull        26
      13: aload_2
      14: invokevirtual #9                  // Method com/fasterxml/jackson/core/JsonGenerator.canWriteTypeId:()Z
      17: ifeq          26
      20: aload_2
      21: aload         4
      23: invokevirtual #10                 // Method com/fasterxml/jackson/core/JsonGenerator.writeTypeId:(Ljava/lang/Object;)V
      26: aload_2
      27: invokevirtual #11                 // Method com/fasterxml/jackson/core/JsonGenerator.writeStartObject:()V
      30: return

  public void writeCustomTypePrefixForObject(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_3
       1: ifnull        16
       4: aload_2
       5: invokevirtual #9                  // Method com/fasterxml/jackson/core/JsonGenerator.canWriteTypeId:()Z
       8: ifeq          16
      11: aload_2
      12: aload_3
      13: invokevirtual #10                 // Method com/fasterxml/jackson/core/JsonGenerator.writeTypeId:(Ljava/lang/Object;)V
      16: aload_2
      17: invokevirtual #11                 // Method com/fasterxml/jackson/core/JsonGenerator.writeStartObject:()V
      20: return

  public com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeSerializer forProperty(com.fasterxml.jackson.databind.BeanProperty);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #13                 // Method forProperty:(Lcom/fasterxml/jackson/databind/BeanProperty;)Lcom/fasterxml/jackson/databind/jsontype/impl/AsExistingPropertyTypeSerializer;
       5: areturn

  public com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeSerializer forProperty(com.fasterxml.jackson.databind.BeanProperty);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #13                 // Method forProperty:(Lcom/fasterxml/jackson/databind/BeanProperty;)Lcom/fasterxml/jackson/databind/jsontype/impl/AsExistingPropertyTypeSerializer;
       5: areturn

  public com.fasterxml.jackson.databind.jsontype.TypeSerializer forProperty(com.fasterxml.jackson.databind.BeanProperty);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #13                 // Method forProperty:(Lcom/fasterxml/jackson/databind/BeanProperty;)Lcom/fasterxml/jackson/databind/jsontype/impl/AsExistingPropertyTypeSerializer;
       5: areturn
}
