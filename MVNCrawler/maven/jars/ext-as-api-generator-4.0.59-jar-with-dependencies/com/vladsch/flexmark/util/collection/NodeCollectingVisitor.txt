Compiled from "NodeCollectingVisitor.java"
public class com.vladsch.flexmark.util.collection.NodeCollectingVisitor {
  public static final com.vladsch.flexmark.util.Computable<java.lang.Class, com.vladsch.flexmark.ast.Node> NODE_CLASSIFIER;

  private final java.util.HashMap<java.lang.Class, java.util.List<java.lang.Class>> mySubClassMap;

  private final java.util.HashSet<java.lang.Class> myIncluded;

  private final java.util.HashSet<java.lang.Class> myExcluded;

  private final com.vladsch.flexmark.util.collection.ClassificationBag<java.lang.Class, com.vladsch.flexmark.ast.Node> myNodes;

  private final java.lang.Class[] myClasses;

  public com.vladsch.flexmark.util.collection.NodeCollectingVisitor(java.util.Set<java.lang.Class>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: aload_1
       7: invokeinterface #2,  1            // InterfaceMethod java/util/Set.size:()I
      12: anewarray     #3                  // class java/lang/Class
      15: invokeinterface #4,  2            // InterfaceMethod java/util/Set.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      20: checkcast     #5                  // class "[Ljava/lang/Class;"
      23: putfield      #6                  // Field myClasses:[Ljava/lang/Class;
      26: aload_0
      27: new           #7                  // class java/util/HashMap
      30: dup
      31: invokespecial #8                  // Method java/util/HashMap."<init>":()V
      34: putfield      #9                  // Field mySubClassMap:Ljava/util/HashMap;
      37: aload_0
      38: new           #10                 // class java/util/HashSet
      41: dup
      42: invokespecial #11                 // Method java/util/HashSet."<init>":()V
      45: putfield      #12                 // Field myIncluded:Ljava/util/HashSet;
      48: aload_0
      49: getfield      #12                 // Field myIncluded:Ljava/util/HashSet;
      52: aload_1
      53: invokevirtual #13                 // Method java/util/HashSet.addAll:(Ljava/util/Collection;)Z
      56: pop
      57: aload_1
      58: invokeinterface #14,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      63: astore_2
      64: aload_2
      65: invokeinterface #15,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      70: ifeq          114
      73: aload_2
      74: invokeinterface #16,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      79: checkcast     #3                  // class java/lang/Class
      82: astore_3
      83: new           #17                 // class java/util/ArrayList
      86: dup
      87: iconst_1
      88: invokespecial #18                 // Method java/util/ArrayList."<init>":(I)V
      91: astore        4
      93: aload         4
      95: aload_3
      96: invokevirtual #19                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
      99: pop
     100: aload_0
     101: getfield      #9                  // Field mySubClassMap:Ljava/util/HashMap;
     104: aload_3
     105: aload         4
     107: invokevirtual #20                 // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     110: pop
     111: goto          64
     114: aload_0
     115: new           #10                 // class java/util/HashSet
     118: dup
     119: invokespecial #11                 // Method java/util/HashSet."<init>":()V
     122: putfield      #21                 // Field myExcluded:Ljava/util/HashSet;
     125: aload_0
     126: new           #22                 // class com/vladsch/flexmark/util/collection/ClassificationBag
     129: dup
     130: getstatic     #23                 // Field NODE_CLASSIFIER:Lcom/vladsch/flexmark/util/Computable;
     133: invokespecial #24                 // Method com/vladsch/flexmark/util/collection/ClassificationBag."<init>":(Lcom/vladsch/flexmark/util/Computable;)V
     136: putfield      #25                 // Field myNodes:Lcom/vladsch/flexmark/util/collection/ClassificationBag;
     139: return

  public void collect(com.vladsch.flexmark.ast.Node);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #26                 // Method visit:(Lcom/vladsch/flexmark/ast/Node;)V
       5: return

  public com.vladsch.flexmark.util.collection.SubClassingBag<com.vladsch.flexmark.ast.Node> getSubClassingBag();
    Code:
       0: new           #27                 // class com/vladsch/flexmark/util/collection/SubClassingBag
       3: dup
       4: aload_0
       5: getfield      #25                 // Field myNodes:Lcom/vladsch/flexmark/util/collection/ClassificationBag;
       8: aload_0
       9: getfield      #9                  // Field mySubClassMap:Ljava/util/HashMap;
      12: invokespecial #28                 // Method com/vladsch/flexmark/util/collection/SubClassingBag."<init>":(Lcom/vladsch/flexmark/util/collection/ClassificationBag;Ljava/util/HashMap;)V
      15: areturn

  private void visit(com.vladsch.flexmark.ast.Node);
    Code:
       0: aload_1
       1: invokevirtual #29                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
       4: astore_2
       5: aload_0
       6: getfield      #12                 // Field myIncluded:Ljava/util/HashSet;
       9: aload_2
      10: invokevirtual #30                 // Method java/util/HashSet.contains:(Ljava/lang/Object;)Z
      13: ifeq          28
      16: aload_0
      17: getfield      #25                 // Field myNodes:Lcom/vladsch/flexmark/util/collection/ClassificationBag;
      20: aload_1
      21: invokevirtual #31                 // Method com/vladsch/flexmark/util/collection/ClassificationBag.add:(Ljava/lang/Object;)Z
      24: pop
      25: goto          184
      28: aload_0
      29: getfield      #21                 // Field myExcluded:Ljava/util/HashSet;
      32: aload_2
      33: invokevirtual #30                 // Method java/util/HashSet.contains:(Ljava/lang/Object;)Z
      36: ifne          184
      39: aload_0
      40: getfield      #6                  // Field myClasses:[Ljava/lang/Class;
      43: astore_3
      44: aload_3
      45: arraylength
      46: istore        4
      48: iconst_0
      49: istore        5
      51: iload         5
      53: iload         4
      55: if_icmpge     175
      58: aload_3
      59: iload         5
      61: aaload
      62: astore        6
      64: aload         6
      66: aload_1
      67: invokevirtual #32                 // Method java/lang/Class.isInstance:(Ljava/lang/Object;)Z
      70: ifeq          169
      73: aload_0
      74: getfield      #12                 // Field myIncluded:Ljava/util/HashSet;
      77: aload_2
      78: invokevirtual #33                 // Method java/util/HashSet.add:(Ljava/lang/Object;)Z
      81: pop
      82: aload_0
      83: getfield      #9                  // Field mySubClassMap:Ljava/util/HashMap;
      86: aload         6
      88: invokevirtual #34                 // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      91: checkcast     #35                 // class java/util/List
      94: astore        7
      96: aload         7
      98: ifnonnull     145
     101: new           #17                 // class java/util/ArrayList
     104: dup
     105: iconst_2
     106: invokespecial #18                 // Method java/util/ArrayList."<init>":(I)V
     109: astore        7
     111: aload         7
     113: aload         6
     115: invokeinterface #36,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     120: pop
     121: aload         7
     123: aload_2
     124: invokeinterface #36,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     129: pop
     130: aload_0
     131: getfield      #9                  // Field mySubClassMap:Ljava/util/HashMap;
     134: aload         6
     136: aload         7
     138: invokevirtual #20                 // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     141: pop
     142: goto          154
     145: aload         7
     147: aload_2
     148: invokeinterface #36,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     153: pop
     154: aload_0
     155: getfield      #25                 // Field myNodes:Lcom/vladsch/flexmark/util/collection/ClassificationBag;
     158: aload_1
     159: invokevirtual #31                 // Method com/vladsch/flexmark/util/collection/ClassificationBag.add:(Ljava/lang/Object;)Z
     162: pop
     163: aload_0
     164: aload_1
     165: invokespecial #37                 // Method visitChildren:(Lcom/vladsch/flexmark/ast/Node;)V
     168: return
     169: iinc          5, 1
     172: goto          51
     175: aload_0
     176: getfield      #21                 // Field myExcluded:Ljava/util/HashSet;
     179: aload_2
     180: invokevirtual #33                 // Method java/util/HashSet.add:(Ljava/lang/Object;)Z
     183: pop
     184: aload_0
     185: aload_1
     186: invokespecial #37                 // Method visitChildren:(Lcom/vladsch/flexmark/ast/Node;)V
     189: return

  private void visitChildren(com.vladsch.flexmark.ast.Node);
    Code:
       0: aload_1
       1: invokevirtual #38                 // Method com/vladsch/flexmark/ast/Node.getFirstChild:()Lcom/vladsch/flexmark/ast/Node;
       4: astore_2
       5: aload_2
       6: ifnull        24
       9: aload_2
      10: invokevirtual #39                 // Method com/vladsch/flexmark/ast/Node.getNext:()Lcom/vladsch/flexmark/ast/Node;
      13: astore_3
      14: aload_0
      15: aload_2
      16: invokespecial #26                 // Method visit:(Lcom/vladsch/flexmark/ast/Node;)V
      19: aload_3
      20: astore_2
      21: goto          5
      24: return

  static {};
    Code:
       0: new           #40                 // class com/vladsch/flexmark/util/collection/NodeCollectingVisitor$1
       3: dup
       4: invokespecial #41                 // Method com/vladsch/flexmark/util/collection/NodeCollectingVisitor$1."<init>":()V
       7: putstatic     #23                 // Field NODE_CLASSIFIER:Lcom/vladsch/flexmark/util/Computable;
      10: return
}
