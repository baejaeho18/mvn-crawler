Compiled from "OrderedSet.java"
public class com.vladsch.flexmark.util.collection.OrderedSet<E> implements java.util.Set<E>, java.lang.Iterable<E> {
  private final java.util.HashMap<E, java.lang.Integer> myKeyMap;

  private final java.util.ArrayList<E> myValueList;

  private final com.vladsch.flexmark.util.collection.CollectionHost<E> myHost;

  private com.vladsch.flexmark.util.collection.iteration.Indexed<E> myIndexedProxy;

  private com.vladsch.flexmark.util.collection.iteration.Indexed<E> myAllowConcurrentModsIndexedProxy;

  private java.util.BitSet myValidIndices;

  private int myModificationCount;

  static final boolean $assertionsDisabled;

  public com.vladsch.flexmark.util.collection.OrderedSet();
    Code:
       0: aload_0
       1: iconst_0
       2: invokespecial #3                  // Method "<init>":(I)V
       5: return

  public com.vladsch.flexmark.util.collection.OrderedSet(int);
    Code:
       0: aload_0
       1: iload_1
       2: aconst_null
       3: invokespecial #4                  // Method "<init>":(ILcom/vladsch/flexmark/util/collection/CollectionHost;)V
       6: return

  public com.vladsch.flexmark.util.collection.OrderedSet(com.vladsch.flexmark.util.collection.CollectionHost<E>);
    Code:
       0: aload_0
       1: iconst_0
       2: aload_1
       3: invokespecial #4                  // Method "<init>":(ILcom/vladsch/flexmark/util/collection/CollectionHost;)V
       6: return

  public com.vladsch.flexmark.util.collection.OrderedSet(int, com.vladsch.flexmark.util.collection.CollectionHost<E>);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #6                  // class java/util/HashMap
       8: dup
       9: iload_1
      10: invokespecial #7                  // Method java/util/HashMap."<init>":(I)V
      13: putfield      #8                  // Field myKeyMap:Ljava/util/HashMap;
      16: aload_0
      17: new           #9                  // class java/util/ArrayList
      20: dup
      21: iload_1
      22: invokespecial #10                 // Method java/util/ArrayList."<init>":(I)V
      25: putfield      #2                  // Field myValueList:Ljava/util/ArrayList;
      28: aload_0
      29: new           #11                 // class java/util/BitSet
      32: dup
      33: invokespecial #12                 // Method java/util/BitSet."<init>":()V
      36: putfield      #13                 // Field myValidIndices:Ljava/util/BitSet;
      39: aload_0
      40: aload_2
      41: putfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      44: aload_0
      45: ldc           #16                 // int -2147483648
      47: putfield      #17                 // Field myModificationCount:I
      50: aload_0
      51: aconst_null
      52: putfield      #18                 // Field myIndexedProxy:Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
      55: aload_0
      56: aconst_null
      57: putfield      #19                 // Field myAllowConcurrentModsIndexedProxy:Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
      60: return

  public java.util.BitSet indexBitSet(java.lang.Iterable<? extends E>);
    Code:
       0: new           #11                 // class java/util/BitSet
       3: dup
       4: invokespecial #12                 // Method java/util/BitSet."<init>":()V
       7: astore_2
       8: aload_1
       9: invokeinterface #20,  1           // InterfaceMethod java/lang/Iterable.iterator:()Ljava/util/Iterator;
      14: astore_3
      15: aload_3
      16: invokeinterface #21,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          55
      24: aload_3
      25: invokeinterface #22,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: astore        4
      32: aload_0
      33: aload         4
      35: invokevirtual #23                 // Method indexOf:(Ljava/lang/Object;)I
      38: istore        5
      40: iload         5
      42: iconst_m1
      43: if_icmpeq     52
      46: aload_2
      47: iload         5
      49: invokevirtual #24                 // Method java/util/BitSet.set:(I)V
      52: goto          15
      55: aload_2
      56: areturn

  public java.util.BitSet differenceBitSet(java.lang.Iterable<? extends E>);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #20,  1           // InterfaceMethod java/lang/Iterable.iterator:()Ljava/util/Iterator;
       7: invokevirtual #25                 // Method differenceBitSet:(Ljava/util/Iterator;)Ljava/util/BitSet;
      10: areturn

  public java.util.BitSet differenceBitSet(java.util.Iterator<? extends E>);
    Code:
       0: new           #11                 // class java/util/BitSet
       3: dup
       4: invokespecial #12                 // Method java/util/BitSet."<init>":()V
       7: astore_2
       8: iconst_0
       9: istore_3
      10: aload_1
      11: invokeinterface #21,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          53
      19: aload_1
      20: invokeinterface #22,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: astore        4
      27: aload_0
      28: aload         4
      30: invokevirtual #23                 // Method indexOf:(Ljava/lang/Object;)I
      33: istore        5
      35: iload         5
      37: iload_3
      38: if_icmpeq     47
      41: aload_2
      42: iload         5
      44: invokevirtual #24                 // Method java/util/BitSet.set:(I)V
      47: iinc          3, 1
      50: goto          10
      53: aload_2
      54: areturn

  public java.util.BitSet keyDifferenceBitSet(java.lang.Iterable<? extends java.util.Map$Entry<? extends E, ?>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #20,  1           // InterfaceMethod java/lang/Iterable.iterator:()Ljava/util/Iterator;
       7: invokevirtual #26                 // Method keyDifferenceBitSet:(Ljava/util/Iterator;)Ljava/util/BitSet;
      10: areturn

  public java.util.BitSet keyDifferenceBitSet(java.util.Iterator<? extends java.util.Map$Entry<? extends E, ?>>);
    Code:
       0: new           #11                 // class java/util/BitSet
       3: dup
       4: invokespecial #12                 // Method java/util/BitSet."<init>":()V
       7: astore_2
       8: iconst_0
       9: istore_3
      10: aload_1
      11: invokeinterface #21,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          61
      19: aload_1
      20: invokeinterface #22,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #27                 // class java/util/Map$Entry
      28: astore        4
      30: aload_0
      31: aload         4
      33: invokeinterface #28,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      38: invokevirtual #23                 // Method indexOf:(Ljava/lang/Object;)I
      41: istore        5
      43: iload         5
      45: iload_3
      46: if_icmpeq     55
      49: aload_2
      50: iload         5
      52: invokevirtual #24                 // Method java/util/BitSet.set:(I)V
      55: iinc          3, 1
      58: goto          10
      61: aload_2
      62: areturn

  public java.util.BitSet valueDifferenceBitSet(java.lang.Iterable<? extends java.util.Map$Entry<?, ? extends E>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #20,  1           // InterfaceMethod java/lang/Iterable.iterator:()Ljava/util/Iterator;
       7: invokevirtual #29                 // Method valueDifferenceBitSet:(Ljava/util/Iterator;)Ljava/util/BitSet;
      10: areturn

  public java.util.BitSet valueDifferenceBitSet(java.util.Iterator<? extends java.util.Map$Entry<?, ? extends E>>);
    Code:
       0: new           #11                 // class java/util/BitSet
       3: dup
       4: invokespecial #12                 // Method java/util/BitSet."<init>":()V
       7: astore_2
       8: iconst_0
       9: istore_3
      10: aload_1
      11: invokeinterface #21,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          61
      19: aload_1
      20: invokeinterface #22,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #27                 // class java/util/Map$Entry
      28: astore        4
      30: aload_0
      31: aload         4
      33: invokeinterface #30,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      38: invokevirtual #23                 // Method indexOf:(Ljava/lang/Object;)I
      41: istore        5
      43: iload         5
      45: iload_3
      46: if_icmpeq     55
      49: aload_2
      50: iload         5
      52: invokevirtual #24                 // Method java/util/BitSet.set:(I)V
      55: iinc          3, 1
      58: goto          10
      61: aload_2
      62: areturn

  public com.vladsch.flexmark.util.collection.iteration.Indexed<E> getIndexedProxy();
    Code:
       0: aload_0
       1: getfield      #18                 // Field myIndexedProxy:Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
       4: ifnull        12
       7: aload_0
       8: getfield      #18                 // Field myIndexedProxy:Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
      11: areturn
      12: aload_0
      13: new           #31                 // class com/vladsch/flexmark/util/collection/OrderedSet$IndexedProxy
      16: dup
      17: aload_0
      18: iconst_0
      19: invokespecial #32                 // Method com/vladsch/flexmark/util/collection/OrderedSet$IndexedProxy."<init>":(Lcom/vladsch/flexmark/util/collection/OrderedSet;Z)V
      22: putfield      #18                 // Field myIndexedProxy:Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
      25: aload_0
      26: getfield      #18                 // Field myIndexedProxy:Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
      29: areturn

  public com.vladsch.flexmark.util.collection.iteration.Indexed<E> getConcurrentModsIndexedProxy();
    Code:
       0: aload_0
       1: getfield      #19                 // Field myAllowConcurrentModsIndexedProxy:Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
       4: ifnull        12
       7: aload_0
       8: getfield      #19                 // Field myAllowConcurrentModsIndexedProxy:Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
      11: areturn
      12: aload_0
      13: new           #31                 // class com/vladsch/flexmark/util/collection/OrderedSet$IndexedProxy
      16: dup
      17: aload_0
      18: iconst_1
      19: invokespecial #32                 // Method com/vladsch/flexmark/util/collection/OrderedSet$IndexedProxy."<init>":(Lcom/vladsch/flexmark/util/collection/OrderedSet;Z)V
      22: putfield      #19                 // Field myAllowConcurrentModsIndexedProxy:Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
      25: aload_0
      26: getfield      #19                 // Field myAllowConcurrentModsIndexedProxy:Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
      29: areturn

  public int getModificationCount();
    Code:
       0: aload_0
       1: getfield      #17                 // Field myModificationCount:I
       4: ireturn

  private int getIteratorModificationCount();
    Code:
       0: aload_0
       1: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
       4: ifnull        19
       7: aload_0
       8: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      11: invokeinterface #33,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.getIteratorModificationCount:()I
      16: goto          23
      19: aload_0
      20: getfield      #17                 // Field myModificationCount:I
      23: ireturn

  public static <T1> T1 ifNull(T1, T1);
    Code:
       0: aload_0
       1: ifnonnull     8
       4: aload_1
       5: goto          9
       8: aload_0
       9: areturn

  public boolean inHostUpdate();
    Code:
       0: aload_0
       1: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
       4: ifnull        23
       7: aload_0
       8: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      11: invokeinterface #34,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.skipHostUpdate:()Z
      16: ifeq          23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: ireturn

  public int indexOf(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #8                  // Field myKeyMap:Ljava/util/HashMap;
       4: aload_1
       5: invokevirtual #35                 // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
       8: iconst_m1
       9: invokestatic  #36                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      12: invokestatic  #37                 // Method ifNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      15: checkcast     #15                 // class java/lang/Integer
      18: invokevirtual #38                 // Method java/lang/Integer.intValue:()I
      21: ireturn

  public boolean isValidIndex(int);
    Code:
       0: iload_1
       1: iflt          30
       4: iload_1
       5: aload_0
       6: getfield      #2                  // Field myValueList:Ljava/util/ArrayList;
       9: invokevirtual #39                 // Method java/util/ArrayList.size:()I
      12: if_icmpge     30
      15: aload_0
      16: getfield      #13                 // Field myValidIndices:Ljava/util/BitSet;
      19: iload_1
      20: invokevirtual #40                 // Method java/util/BitSet.get:(I)Z
      23: ifeq          30
      26: iconst_1
      27: goto          31
      30: iconst_0
      31: ireturn

  public void validateIndex(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #41                 // Method isValidIndex:(I)Z
       5: ifne          75
       8: new           #42                 // class java/lang/IndexOutOfBoundsException
      11: dup
      12: new           #43                 // class java/lang/StringBuilder
      15: dup
      16: invokespecial #44                 // Method java/lang/StringBuilder."<init>":()V
      19: ldc           #45                 // String Index
      21: invokevirtual #46                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: iload_1
      25: invokevirtual #47                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      28: ldc           #48                 // String  is not valid, size=
      30: invokevirtual #46                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: aload_0
      34: getfield      #2                  // Field myValueList:Ljava/util/ArrayList;
      37: invokevirtual #39                 // Method java/util/ArrayList.size:()I
      40: invokevirtual #47                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      43: ldc           #49                 // String  validIndices[
      45: invokevirtual #46                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      48: iload_1
      49: invokevirtual #47                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      52: ldc           #50                 // String ]=
      54: invokevirtual #46                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      57: aload_0
      58: getfield      #13                 // Field myValidIndices:Ljava/util/BitSet;
      61: iload_1
      62: invokevirtual #40                 // Method java/util/BitSet.get:(I)Z
      65: invokevirtual #51                 // Method java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;
      68: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      71: invokespecial #53                 // Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      74: athrow
      75: return

  public E getValue(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #54                 // Method validateIndex:(I)V
       5: aload_0
       6: getfield      #2                  // Field myValueList:Ljava/util/ArrayList;
       9: iload_1
      10: invokevirtual #55                 // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
      13: areturn

  public E getValueOrNull(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #41                 // Method isValidIndex:(I)Z
       5: ifeq          19
       8: aload_0
       9: getfield      #2                  // Field myValueList:Ljava/util/ArrayList;
      12: iload_1
      13: invokevirtual #55                 // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
      16: goto          20
      19: aconst_null
      20: areturn

  public int size();
    Code:
       0: aload_0
       1: getfield      #8                  // Field myKeyMap:Ljava/util/HashMap;
       4: invokevirtual #56                 // Method java/util/HashMap.size:()I
       7: ireturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #8                  // Field myKeyMap:Ljava/util/HashMap;
       4: invokevirtual #57                 // Method java/util/HashMap.isEmpty:()Z
       7: ireturn

  public boolean contains(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #8                  // Field myKeyMap:Ljava/util/HashMap;
       4: aload_1
       5: invokevirtual #58                 // Method java/util/HashMap.containsKey:(Ljava/lang/Object;)Z
       8: ireturn

  public java.util.List<E> getValueList();
    Code:
       0: aload_0
       1: getfield      #2                  // Field myValueList:Ljava/util/ArrayList;
       4: areturn

  public java.util.List<E> values();
    Code:
       0: aload_0
       1: invokevirtual #59                 // Method isSparse:()Z
       4: ifne          12
       7: aload_0
       8: getfield      #2                  // Field myValueList:Ljava/util/ArrayList;
      11: areturn
      12: new           #9                  // class java/util/ArrayList
      15: dup
      16: invokespecial #60                 // Method java/util/ArrayList."<init>":()V
      19: astore_1
      20: aload_0
      21: invokevirtual #61                 // Method iterable:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterable;
      24: invokeinterface #62,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/iteration/ReversibleIterable.iterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterator;
      29: astore_2
      30: aload_2
      31: invokeinterface #21,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      36: ifeq          57
      39: aload_2
      40: invokeinterface #22,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      45: astore_3
      46: aload_1
      47: aload_3
      48: invokeinterface #63,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      53: pop
      54: goto          30
      57: aload_1
      58: areturn

  public boolean setValueAt(int, E, java.lang.Object);
    Code:
       0: aload_0
       1: aload_2
       2: invokevirtual #23                 // Method indexOf:(Ljava/lang/Object;)I
       5: istore        4
       7: iload         4
       9: iconst_m1
      10: if_icmpeq     67
      13: iload_1
      14: iload         4
      16: if_icmpeq     65
      19: new           #64                 // class java/lang/IllegalStateException
      22: dup
      23: new           #43                 // class java/lang/StringBuilder
      26: dup
      27: invokespecial #44                 // Method java/lang/StringBuilder."<init>":()V
      30: ldc           #65                 // String Trying to add existing element
      32: invokevirtual #46                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: aload_2
      36: invokevirtual #66                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      39: ldc           #67                 // String [
      41: invokevirtual #46                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      44: iload         4
      46: invokevirtual #47                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      49: ldc           #68                 // String ] at index
      51: invokevirtual #46                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      54: iload_1
      55: invokevirtual #47                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      58: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      61: invokespecial #69                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      64: athrow
      65: iconst_0
      66: ireturn
      67: iload_1
      68: aload_0
      69: getfield      #2                  // Field myValueList:Ljava/util/ArrayList;
      72: invokevirtual #39                 // Method java/util/ArrayList.size:()I
      75: if_icmpge     141
      78: aload_0
      79: getfield      #13                 // Field myValidIndices:Ljava/util/BitSet;
      82: iload_1
      83: invokevirtual #40                 // Method java/util/BitSet.get:(I)Z
      86: ifeq          159
      89: new           #64                 // class java/lang/IllegalStateException
      92: dup
      93: new           #43                 // class java/lang/StringBuilder
      96: dup
      97: invokespecial #44                 // Method java/lang/StringBuilder."<init>":()V
     100: ldc           #70                 // String Trying to add new element
     102: invokevirtual #46                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     105: aload_2
     106: invokevirtual #66                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     109: ldc           #71                 // String  at index
     111: invokevirtual #46                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     114: iload_1
     115: invokevirtual #47                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     118: ldc           #72                 // String , already occupied by
     120: invokevirtual #46                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     123: aload_0
     124: getfield      #2                  // Field myValueList:Ljava/util/ArrayList;
     127: iload_1
     128: invokevirtual #55                 // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
     131: invokevirtual #66                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     134: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     137: invokespecial #69                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     140: athrow
     141: iload_1
     142: aload_0
     143: getfield      #2                  // Field myValueList:Ljava/util/ArrayList;
     146: invokevirtual #39                 // Method java/util/ArrayList.size:()I
     149: if_icmple     159
     152: aload_0
     153: iload_1
     154: iconst_1
     155: isub
     156: invokevirtual #73                 // Method addNulls:(I)V
     159: aload_0
     160: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
     163: ifnull        190
     166: aload_0
     167: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
     170: invokeinterface #34,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.skipHostUpdate:()Z
     175: ifne          190
     178: aload_0
     179: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
     182: iload_1
     183: aload_2
     184: aload_3
     185: invokeinterface #74,  4           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.adding:(ILjava/lang/Object;Ljava/lang/Object;)V
     190: aload_0
     191: getfield      #8                  // Field myKeyMap:Ljava/util/HashMap;
     194: aload_2
     195: iload_1
     196: invokestatic  #36                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     199: invokevirtual #75                 // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     202: pop
     203: aload_0
     204: getfield      #2                  // Field myValueList:Ljava/util/ArrayList;
     207: iload_1
     208: aload_2
     209: invokevirtual #76                 // Method java/util/ArrayList.set:(ILjava/lang/Object;)Ljava/lang/Object;
     212: pop
     213: aload_0
     214: getfield      #13                 // Field myValidIndices:Ljava/util/BitSet;
     217: iload_1
     218: invokevirtual #24                 // Method java/util/BitSet.set:(I)V
     221: iconst_1
     222: ireturn

  public boolean isSparse();
    Code:
       0: aload_0
       1: getfield      #13                 // Field myValidIndices:Ljava/util/BitSet;
       4: iconst_0
       5: invokevirtual #77                 // Method java/util/BitSet.nextClearBit:(I)I
       8: aload_0
       9: getfield      #2                  // Field myValueList:Ljava/util/ArrayList;
      12: invokevirtual #39                 // Method java/util/ArrayList.size:()I
      15: if_icmpge     22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: ireturn

  public void addNull();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #2                  // Field myValueList:Ljava/util/ArrayList;
       5: invokevirtual #39                 // Method java/util/ArrayList.size:()I
       8: invokevirtual #73                 // Method addNulls:(I)V
      11: return

  public void addNulls(int);
    Code:
       0: getstatic     #78                 // Field $assertionsDisabled:Z
       3: ifne          25
       6: iload_1
       7: aload_0
       8: getfield      #2                  // Field myValueList:Ljava/util/ArrayList;
      11: invokevirtual #39                 // Method java/util/ArrayList.size:()I
      14: if_icmpge     25
      17: new           #79                 // class java/lang/AssertionError
      20: dup
      21: invokespecial #80                 // Method java/lang/AssertionError."<init>":()V
      24: athrow
      25: aload_0
      26: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      29: ifnull        54
      32: aload_0
      33: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      36: invokeinterface #34,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.skipHostUpdate:()Z
      41: ifne          54
      44: aload_0
      45: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      48: iload_1
      49: invokeinterface #81,  2           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.addingNulls:(I)V
      54: aload_0
      55: getfield      #2                  // Field myValueList:Ljava/util/ArrayList;
      58: invokevirtual #39                 // Method java/util/ArrayList.size:()I
      61: istore_2
      62: aload_0
      63: dup
      64: getfield      #17                 // Field myModificationCount:I
      67: iconst_1
      68: iadd
      69: putfield      #17                 // Field myModificationCount:I
      72: aload_0
      73: getfield      #2                  // Field myValueList:Ljava/util/ArrayList;
      76: invokevirtual #39                 // Method java/util/ArrayList.size:()I
      79: iload_1
      80: if_icmpgt     95
      83: aload_0
      84: getfield      #2                  // Field myValueList:Ljava/util/ArrayList;
      87: aconst_null
      88: invokevirtual #82                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
      91: pop
      92: goto          72
      95: return

  public com.vladsch.flexmark.util.collection.iteration.ReversibleIterator<java.lang.Integer> indexIterator();
    Code:
       0: new           #83                 // class com/vladsch/flexmark/util/collection/iteration/BitSetIterator
       3: dup
       4: aload_0
       5: getfield      #13                 // Field myValidIndices:Ljava/util/BitSet;
       8: invokespecial #84                 // Method com/vladsch/flexmark/util/collection/iteration/BitSetIterator."<init>":(Ljava/util/BitSet;)V
      11: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversibleIterator<java.lang.Integer> reversedIndexIterator();
    Code:
       0: new           #83                 // class com/vladsch/flexmark/util/collection/iteration/BitSetIterator
       3: dup
       4: aload_0
       5: getfield      #13                 // Field myValidIndices:Ljava/util/BitSet;
       8: iconst_1
       9: invokespecial #85                 // Method com/vladsch/flexmark/util/collection/iteration/BitSetIterator."<init>":(Ljava/util/BitSet;Z)V
      12: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversibleIterable<java.lang.Integer> indexIterable();
    Code:
       0: new           #86                 // class com/vladsch/flexmark/util/collection/iteration/BitSetIterable
       3: dup
       4: aload_0
       5: getfield      #13                 // Field myValidIndices:Ljava/util/BitSet;
       8: invokespecial #87                 // Method com/vladsch/flexmark/util/collection/iteration/BitSetIterable."<init>":(Ljava/util/BitSet;)V
      11: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversibleIterable<java.lang.Integer> reversedIndexIterable();
    Code:
       0: new           #86                 // class com/vladsch/flexmark/util/collection/iteration/BitSetIterable
       3: dup
       4: aload_0
       5: getfield      #13                 // Field myValidIndices:Ljava/util/BitSet;
       8: iconst_1
       9: invokespecial #88                 // Method com/vladsch/flexmark/util/collection/iteration/BitSetIterable."<init>":(Ljava/util/BitSet;Z)V
      12: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversibleIndexedIterator<E> iterator();
    Code:
       0: new           #89                 // class com/vladsch/flexmark/util/collection/iteration/IndexedIterator
       3: dup
       4: aload_0
       5: invokevirtual #90                 // Method getIndexedProxy:()Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
       8: aload_0
       9: invokevirtual #91                 // Method indexIterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterator;
      12: invokespecial #92                 // Method com/vladsch/flexmark/util/collection/iteration/IndexedIterator."<init>":(Lcom/vladsch/flexmark/util/collection/iteration/Indexed;Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterator;)V
      15: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversibleIndexedIterator<E> reversedIterator();
    Code:
       0: new           #89                 // class com/vladsch/flexmark/util/collection/iteration/IndexedIterator
       3: dup
       4: aload_0
       5: invokevirtual #90                 // Method getIndexedProxy:()Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
       8: aload_0
       9: invokevirtual #93                 // Method reversedIndexIterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterator;
      12: invokespecial #92                 // Method com/vladsch/flexmark/util/collection/iteration/IndexedIterator."<init>":(Lcom/vladsch/flexmark/util/collection/iteration/Indexed;Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterator;)V
      15: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversibleIterable<E> iterable();
    Code:
       0: new           #94                 // class com/vladsch/flexmark/util/collection/iteration/IndexedIterable
       3: dup
       4: aload_0
       5: invokevirtual #90                 // Method getIndexedProxy:()Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
       8: aload_0
       9: invokevirtual #95                 // Method indexIterable:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterable;
      12: invokespecial #96                 // Method com/vladsch/flexmark/util/collection/iteration/IndexedIterable."<init>":(Lcom/vladsch/flexmark/util/collection/iteration/Indexed;Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterable;)V
      15: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversibleIterable<E> reversedIterable();
    Code:
       0: new           #94                 // class com/vladsch/flexmark/util/collection/iteration/IndexedIterable
       3: dup
       4: aload_0
       5: invokevirtual #90                 // Method getIndexedProxy:()Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
       8: aload_0
       9: invokevirtual #97                 // Method reversedIndexIterable:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterable;
      12: invokespecial #96                 // Method com/vladsch/flexmark/util/collection/iteration/IndexedIterable."<init>":(Lcom/vladsch/flexmark/util/collection/iteration/Indexed;Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterable;)V
      15: areturn

  public java.lang.Object[] toArray();
    Code:
       0: aload_0
       1: getfield      #8                  // Field myKeyMap:Ljava/util/HashMap;
       4: invokevirtual #56                 // Method java/util/HashMap.size:()I
       7: anewarray     #98                 // class java/lang/Object
      10: astore_1
      11: iconst_m1
      12: istore_2
      13: iconst_m1
      14: istore_3
      15: iload_2
      16: iconst_1
      17: iadd
      18: aload_0
      19: getfield      #2                  // Field myValueList:Ljava/util/ArrayList;
      22: invokevirtual #39                 // Method java/util/ArrayList.size:()I
      25: if_icmpge     62
      28: aload_0
      29: getfield      #13                 // Field myValidIndices:Ljava/util/BitSet;
      32: iinc          2, 1
      35: iload_2
      36: invokevirtual #40                 // Method java/util/BitSet.get:(I)Z
      39: ifne          45
      42: goto          15
      45: aload_1
      46: iinc          3, 1
      49: iload_3
      50: aload_0
      51: getfield      #2                  // Field myValueList:Ljava/util/ArrayList;
      54: iload_2
      55: invokevirtual #55                 // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
      58: aastore
      59: goto          15
      62: aload_1
      63: areturn

  public <T> T[] toArray(T[]);
    Code:
       0: aload_1
       1: astore_2
       2: aload_1
       3: arraylength
       4: aload_0
       5: getfield      #8                  // Field myKeyMap:Ljava/util/HashMap;
       8: invokevirtual #56                 // Method java/util/HashMap.size:()I
      11: if_icmpge     60
      14: aload_1
      15: invokevirtual #99                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      18: ldc           #100                // class "[Ljava/lang/Object;"
      20: if_acmpne     36
      23: aload_0
      24: getfield      #8                  // Field myKeyMap:Ljava/util/HashMap;
      27: invokevirtual #56                 // Method java/util/HashMap.size:()I
      30: anewarray     #98                 // class java/lang/Object
      33: goto          59
      36: aload_1
      37: invokevirtual #99                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      40: invokevirtual #101                // Method java/lang/Class.getComponentType:()Ljava/lang/Class;
      43: aload_0
      44: getfield      #8                  // Field myKeyMap:Ljava/util/HashMap;
      47: invokevirtual #56                 // Method java/util/HashMap.size:()I
      50: invokestatic  #102                // Method java/lang/reflect/Array.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;
      53: checkcast     #100                // class "[Ljava/lang/Object;"
      56: checkcast     #100                // class "[Ljava/lang/Object;"
      59: astore_2
      60: iconst_m1
      61: istore_3
      62: iconst_m1
      63: istore        4
      65: iload_3
      66: iconst_1
      67: iadd
      68: aload_0
      69: getfield      #2                  // Field myValueList:Ljava/util/ArrayList;
      72: invokevirtual #39                 // Method java/util/ArrayList.size:()I
      75: if_icmpge     113
      78: aload_0
      79: getfield      #13                 // Field myValidIndices:Ljava/util/BitSet;
      82: iinc          3, 1
      85: iload_3
      86: invokevirtual #40                 // Method java/util/BitSet.get:(I)Z
      89: ifne          95
      92: goto          65
      95: aload_2
      96: iinc          4, 1
      99: iload         4
     101: aload_0
     102: getfield      #2                  // Field myValueList:Ljava/util/ArrayList;
     105: iload_3
     106: invokevirtual #55                 // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
     109: aastore
     110: goto          65
     113: aload_2
     114: arraylength
     115: iinc          4, 1
     118: iload         4
     120: if_icmple     128
     123: aload_2
     124: iload         4
     126: aconst_null
     127: aastore
     128: aload_2
     129: checkcast     #100                // class "[Ljava/lang/Object;"
     132: areturn

  public boolean add(E);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: invokevirtual #103                // Method add:(Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ireturn

  public boolean add(E, java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #8                  // Field myKeyMap:Ljava/util/HashMap;
       4: aload_1
       5: invokevirtual #58                 // Method java/util/HashMap.containsKey:(Ljava/lang/Object;)Z
       8: ifeq          13
      11: iconst_0
      12: ireturn
      13: aload_0
      14: getfield      #2                  // Field myValueList:Ljava/util/ArrayList;
      17: invokevirtual #39                 // Method java/util/ArrayList.size:()I
      20: istore_3
      21: aload_0
      22: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      25: ifnull        52
      28: aload_0
      29: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      32: invokeinterface #34,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.skipHostUpdate:()Z
      37: ifne          52
      40: aload_0
      41: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      44: iload_3
      45: aload_1
      46: aload_2
      47: invokeinterface #74,  4           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.adding:(ILjava/lang/Object;Ljava/lang/Object;)V
      52: aload_0
      53: dup
      54: getfield      #17                 // Field myModificationCount:I
      57: iconst_1
      58: iadd
      59: putfield      #17                 // Field myModificationCount:I
      62: aload_0
      63: getfield      #8                  // Field myKeyMap:Ljava/util/HashMap;
      66: aload_1
      67: iload_3
      68: invokestatic  #36                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      71: invokevirtual #75                 // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      74: pop
      75: aload_0
      76: getfield      #2                  // Field myValueList:Ljava/util/ArrayList;
      79: aload_1
      80: invokevirtual #82                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
      83: pop
      84: aload_0
      85: getfield      #13                 // Field myValidIndices:Ljava/util/BitSet;
      88: iload_3
      89: invokevirtual #24                 // Method java/util/BitSet.set:(I)V
      92: iconst_1
      93: ireturn

  public boolean removeIndex(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #104                // Method removeIndexHosted:(I)Ljava/lang/Object;
       5: ifnull        12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  public java.lang.Object removeIndexHosted(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #54                 // Method validateIndex:(I)V
       5: aload_0
       6: getfield      #2                  // Field myValueList:Ljava/util/ArrayList;
       9: iload_1
      10: invokevirtual #55                 // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
      13: astore_2
      14: aconst_null
      15: astore_3
      16: aload_0
      17: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      20: ifnull        50
      23: aload_0
      24: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      27: invokeinterface #34,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.skipHostUpdate:()Z
      32: ifne          50
      35: aload_0
      36: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      39: iload_1
      40: aload_2
      41: invokeinterface #105,  3          // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.removing:(ILjava/lang/Object;)Ljava/lang/Object;
      46: astore_3
      47: goto          52
      50: aload_2
      51: astore_3
      52: aload_0
      53: dup
      54: getfield      #17                 // Field myModificationCount:I
      57: iconst_1
      58: iadd
      59: putfield      #17                 // Field myModificationCount:I
      62: aload_0
      63: getfield      #8                  // Field myKeyMap:Ljava/util/HashMap;
      66: aload_2
      67: invokevirtual #106                // Method java/util/HashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      70: pop
      71: aload_0
      72: getfield      #8                  // Field myKeyMap:Ljava/util/HashMap;
      75: invokevirtual #56                 // Method java/util/HashMap.size:()I
      78: ifne          126
      81: aload_0
      82: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      85: ifnull        109
      88: aload_0
      89: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      92: invokeinterface #34,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.skipHostUpdate:()Z
      97: ifne          109
     100: aload_0
     101: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
     104: invokeinterface #107,  1          // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.clearing:()V
     109: aload_0
     110: getfield      #2                  // Field myValueList:Ljava/util/ArrayList;
     113: invokevirtual #108                // Method java/util/ArrayList.clear:()V
     116: aload_0
     117: getfield      #13                 // Field myValidIndices:Ljava/util/BitSet;
     120: invokevirtual #109                // Method java/util/BitSet.clear:()V
     123: goto          163
     126: aload_0
     127: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
     130: ifnonnull     155
     133: iload_1
     134: aload_0
     135: getfield      #2                  // Field myValueList:Ljava/util/ArrayList;
     138: invokevirtual #39                 // Method java/util/ArrayList.size:()I
     141: iconst_1
     142: isub
     143: if_icmpne     155
     146: aload_0
     147: getfield      #2                  // Field myValueList:Ljava/util/ArrayList;
     150: iload_1
     151: invokevirtual #110                // Method java/util/ArrayList.remove:(I)Ljava/lang/Object;
     154: pop
     155: aload_0
     156: getfield      #13                 // Field myValidIndices:Ljava/util/BitSet;
     159: iload_1
     160: invokevirtual #111                // Method java/util/BitSet.clear:(I)V
     163: aload_3
     164: areturn

  public boolean remove(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #112                // Method removeHosted:(Ljava/lang/Object;)Ljava/lang/Object;
       5: ifnull        12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  public java.lang.Object removeHosted(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #8                  // Field myKeyMap:Ljava/util/HashMap;
       4: aload_1
       5: invokevirtual #35                 // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
       8: checkcast     #15                 // class java/lang/Integer
      11: astore_2
      12: aload_2
      13: ifnonnull     18
      16: aconst_null
      17: areturn
      18: aload_0
      19: aload_2
      20: invokevirtual #38                 // Method java/lang/Integer.intValue:()I
      23: invokevirtual #104                // Method removeIndexHosted:(I)Ljava/lang/Object;
      26: areturn

  public boolean containsAll(java.util.Collection<?>);
    Code:
       0: aload_1
       1: invokeinterface #113,  1          // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
       6: astore_2
       7: aload_2
       8: invokeinterface #21,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      13: ifeq          39
      16: aload_2
      17: invokeinterface #22,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      22: astore_3
      23: aload_0
      24: getfield      #8                  // Field myKeyMap:Ljava/util/HashMap;
      27: aload_3
      28: invokevirtual #58                 // Method java/util/HashMap.containsKey:(Ljava/lang/Object;)Z
      31: ifne          36
      34: iconst_0
      35: ireturn
      36: goto          7
      39: iconst_1
      40: ireturn

  public boolean addAll(java.util.Collection<? extends E>);
    Code:
       0: iconst_1
       1: newarray       boolean
       3: dup
       4: iconst_0
       5: iconst_0
       6: bastore
       7: astore_2
       8: aload_1
       9: invokeinterface #113,  1          // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      14: astore_3
      15: aload_3
      16: invokeinterface #21,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          48
      24: aload_3
      25: invokeinterface #22,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: astore        4
      32: aload_0
      33: aload         4
      35: invokevirtual #114                // Method add:(Ljava/lang/Object;)Z
      38: ifeq          45
      41: aload_2
      42: iconst_0
      43: iconst_1
      44: bastore
      45: goto          15
      48: aload_2
      49: iconst_0
      50: baload
      51: ireturn

  public boolean retainAll(java.util.Collection<?>);
    Code:
       0: new           #11                 // class java/util/BitSet
       3: dup
       4: aload_0
       5: getfield      #2                  // Field myValueList:Ljava/util/ArrayList;
       8: invokevirtual #39                 // Method java/util/ArrayList.size:()I
      11: invokespecial #115                // Method java/util/BitSet."<init>":(I)V
      14: astore_2
      15: aload_2
      16: iconst_0
      17: aload_0
      18: getfield      #2                  // Field myValueList:Ljava/util/ArrayList;
      21: invokevirtual #39                 // Method java/util/ArrayList.size:()I
      24: invokevirtual #116                // Method java/util/BitSet.set:(II)V
      27: aload_2
      28: aload_0
      29: getfield      #13                 // Field myValidIndices:Ljava/util/BitSet;
      32: invokevirtual #117                // Method java/util/BitSet.and:(Ljava/util/BitSet;)V
      35: aload_1
      36: invokeinterface #113,  1          // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      41: astore_3
      42: aload_3
      43: invokeinterface #21,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      48: ifeq          82
      51: aload_3
      52: invokeinterface #22,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      57: astore        4
      59: aload_0
      60: aload         4
      62: invokevirtual #23                 // Method indexOf:(Ljava/lang/Object;)I
      65: istore        5
      67: iload         5
      69: iconst_m1
      70: if_icmpeq     79
      73: aload_2
      74: iload         5
      76: invokevirtual #111                // Method java/util/BitSet.clear:(I)V
      79: goto          42
      82: aload_0
      83: getfield      #2                  // Field myValueList:Ljava/util/ArrayList;
      86: invokevirtual #39                 // Method java/util/ArrayList.size:()I
      89: istore_3
      90: iload_3
      91: ifne          96
      94: iconst_0
      95: ireturn
      96: iconst_0
      97: istore        4
      99: iload_3
     100: iinc          3, -1
     103: ifle          139
     106: aload_2
     107: iload_3
     108: invokevirtual #118                // Method java/util/BitSet.previousSetBit:(I)I
     111: istore_3
     112: iload_3
     113: iconst_m1
     114: if_icmpne     120
     117: goto          139
     120: aload_0
     121: aload_0
     122: getfield      #2                  // Field myValueList:Ljava/util/ArrayList;
     125: iload_3
     126: invokevirtual #55                 // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
     129: invokevirtual #119                // Method remove:(Ljava/lang/Object;)Z
     132: pop
     133: iconst_1
     134: istore        4
     136: goto          99
     139: iload         4
     141: ireturn

  public boolean removeAll(java.util.Collection<?>);
    Code:
       0: iconst_0
       1: istore_2
       2: aload_1
       3: invokeinterface #113,  1          // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
       8: astore_3
       9: aload_3
      10: invokeinterface #21,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      15: ifeq          52
      18: aload_3
      19: invokeinterface #22,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      24: astore        4
      26: aload_0
      27: getfield      #8                  // Field myKeyMap:Ljava/util/HashMap;
      30: aload         4
      32: invokevirtual #58                 // Method java/util/HashMap.containsKey:(Ljava/lang/Object;)Z
      35: ifeq          49
      38: aload_0
      39: aload         4
      41: invokevirtual #119                // Method remove:(Ljava/lang/Object;)Z
      44: ifeq          49
      47: iconst_1
      48: istore_2
      49: goto          9
      52: iload_2
      53: ireturn

  public void clear();
    Code:
       0: aload_0
       1: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
       4: ifnull        28
       7: aload_0
       8: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      11: invokeinterface #34,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.skipHostUpdate:()Z
      16: ifne          28
      19: aload_0
      20: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      23: invokeinterface #107,  1          // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.clearing:()V
      28: aload_0
      29: dup
      30: getfield      #17                 // Field myModificationCount:I
      33: iconst_1
      34: iadd
      35: putfield      #17                 // Field myModificationCount:I
      38: aload_0
      39: getfield      #8                  // Field myKeyMap:Ljava/util/HashMap;
      42: invokevirtual #120                // Method java/util/HashMap.clear:()V
      45: aload_0
      46: getfield      #2                  // Field myValueList:Ljava/util/ArrayList;
      49: invokevirtual #108                // Method java/util/ArrayList.clear:()V
      52: aload_0
      53: getfield      #13                 // Field myValidIndices:Ljava/util/BitSet;
      56: invokevirtual #109                // Method java/util/BitSet.clear:()V
      59: return

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: ifnull        22
      11: aload_0
      12: invokevirtual #99                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      15: aload_1
      16: invokevirtual #99                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      19: if_acmpeq     24
      22: iconst_0
      23: ireturn
      24: aload_1
      25: checkcast     #121                // class com/vladsch/flexmark/util/collection/OrderedSet
      28: astore_2
      29: aload_0
      30: invokevirtual #122                // Method size:()I
      33: aload_2
      34: invokevirtual #122                // Method size:()I
      37: if_icmpeq     42
      40: iconst_0
      41: ireturn
      42: aload_2
      43: invokevirtual #123                // Method iterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIndexedIterator;
      46: astore_3
      47: aload_0
      48: invokevirtual #123                // Method iterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIndexedIterator;
      51: astore        4
      53: aload         4
      55: invokeinterface #21,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      60: ifeq          95
      63: aload         4
      65: invokeinterface #22,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      70: astore        5
      72: aload_3
      73: invokeinterface #22,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      78: astore        6
      80: aload         5
      82: aload         6
      84: invokevirtual #124                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      87: ifne          92
      90: iconst_0
      91: ireturn
      92: goto          53
      95: iconst_1
      96: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #8                  // Field myKeyMap:Ljava/util/HashMap;
       4: invokevirtual #125                // Method java/util/HashMap.hashCode:()I
       7: istore_1
       8: bipush        31
      10: iload_1
      11: imul
      12: aload_0
      13: getfield      #2                  // Field myValueList:Ljava/util/ArrayList;
      16: invokevirtual #126                // Method java/util/ArrayList.hashCode:()I
      19: iadd
      20: istore_1
      21: bipush        31
      23: iload_1
      24: imul
      25: aload_0
      26: getfield      #13                 // Field myValidIndices:Ljava/util/BitSet;
      29: invokevirtual #127                // Method java/util/BitSet.hashCode:()I
      32: iadd
      33: istore_1
      34: iload_1
      35: ireturn

  public java.util.BitSet getValidIndices();
    Code:
       0: aload_0
       1: getfield      #13                 // Field myValidIndices:Ljava/util/BitSet;
       4: areturn

  public java.util.Iterator iterator();
    Code:
       0: aload_0
       1: invokevirtual #123                // Method iterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIndexedIterator;
       4: areturn

  static java.util.ArrayList access$000(com.vladsch.flexmark.util.collection.OrderedSet);
    Code:
       0: aload_0
       1: getfield      #2                  // Field myValueList:Ljava/util/ArrayList;
       4: areturn

  static int access$100(com.vladsch.flexmark.util.collection.OrderedSet);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method getIteratorModificationCount:()I
       4: ireturn

  static {};
    Code:
       0: ldc           #121                // class com/vladsch/flexmark/util/collection/OrderedSet
       2: invokevirtual #128                // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #78                 // Field $assertionsDisabled:Z
      16: return
}
