Compiled from "ClassifyingNodeTracker.java"
public class com.vladsch.flexmark.util.collection.ClassifyingNodeTracker implements com.vladsch.flexmark.util.NodeTracker {
  protected final com.vladsch.flexmark.util.collection.ClassificationBag<java.lang.Class<?>, com.vladsch.flexmark.ast.Node> myNodeClassifier;

  private final com.vladsch.flexmark.util.NodeTracker myHost;

  private final com.vladsch.flexmark.util.collection.OrderedMap<java.lang.Class<?>, java.util.Set<java.lang.Class<?>>> myExclusionMap;

  private final com.vladsch.flexmark.util.collection.OrderedSet<java.lang.Class<?>> myExclusionSet;

  private final java.util.HashMap<java.lang.Integer, java.util.BitSet> myNodeAncestryMap;

  public com.vladsch.flexmark.util.collection.ClassifyingNodeTracker(com.vladsch.flexmark.util.NodeTracker, java.util.Map<java.lang.Class<? extends com.vladsch.flexmark.ast.Node>, java.util.Set<java.lang.Class<?>>>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field myHost:Lcom/vladsch/flexmark/util/NodeTracker;
       9: aload_0
      10: new           #3                  // class com/vladsch/flexmark/util/collection/ClassificationBag
      13: dup
      14: getstatic     #4                  // Field com/vladsch/flexmark/util/mappers/NodeClassifier.INSTANCE:Lcom/vladsch/flexmark/util/mappers/NodeClassifier;
      17: invokespecial #5                  // Method com/vladsch/flexmark/util/collection/ClassificationBag."<init>":(Lcom/vladsch/flexmark/util/Computable;)V
      20: putfield      #6                  // Field myNodeClassifier:Lcom/vladsch/flexmark/util/collection/ClassificationBag;
      23: aload_0
      24: new           #7                  // class com/vladsch/flexmark/util/collection/OrderedMap
      27: dup
      28: aload_2
      29: invokeinterface #8,  1            // InterfaceMethod java/util/Map.size:()I
      34: invokespecial #9                  // Method com/vladsch/flexmark/util/collection/OrderedMap."<init>":(I)V
      37: putfield      #10                 // Field myExclusionMap:Lcom/vladsch/flexmark/util/collection/OrderedMap;
      40: aload_0
      41: getfield      #10                 // Field myExclusionMap:Lcom/vladsch/flexmark/util/collection/OrderedMap;
      44: aload_2
      45: invokevirtual #11                 // Method com/vladsch/flexmark/util/collection/OrderedMap.putAll:(Ljava/util/Map;)V
      48: aload_0
      49: new           #12                 // class com/vladsch/flexmark/util/collection/OrderedSet
      52: dup
      53: invokespecial #13                 // Method com/vladsch/flexmark/util/collection/OrderedSet."<init>":()V
      56: putfield      #14                 // Field myExclusionSet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      59: aload_0
      60: getfield      #10                 // Field myExclusionMap:Lcom/vladsch/flexmark/util/collection/OrderedMap;
      63: invokevirtual #15                 // Method com/vladsch/flexmark/util/collection/OrderedMap.valueIterable:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterable;
      66: invokeinterface #16,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/iteration/ReversibleIterable.iterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterator;
      71: astore_3
      72: aload_3
      73: invokeinterface #17,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/iteration/ReversibleIterator.hasNext:()Z
      78: ifeq          101
      81: aload_0
      82: getfield      #14                 // Field myExclusionSet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      85: aload_3
      86: invokeinterface #18,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/iteration/ReversibleIterator.next:()Ljava/lang/Object;
      91: checkcast     #19                 // class java/util/Collection
      94: invokevirtual #20                 // Method com/vladsch/flexmark/util/collection/OrderedSet.addAll:(Ljava/util/Collection;)Z
      97: pop
      98: goto          72
     101: aload_0
     102: new           #21                 // class java/util/HashMap
     105: dup
     106: invokespecial #22                 // Method java/util/HashMap."<init>":()V
     109: putfield      #23                 // Field myNodeAncestryMap:Ljava/util/HashMap;
     112: return

  public com.vladsch.flexmark.util.collection.OrderedMap<java.lang.Class<?>, java.util.Set<java.lang.Class<?>>> getExclusionMap();
    Code:
       0: aload_0
       1: getfield      #10                 // Field myExclusionMap:Lcom/vladsch/flexmark/util/collection/OrderedMap;
       4: areturn

  public java.util.HashMap<java.lang.Integer, java.util.BitSet> getNodeAncestryMap();
    Code:
       0: aload_0
       1: getfield      #23                 // Field myNodeAncestryMap:Ljava/util/HashMap;
       4: areturn

  public com.vladsch.flexmark.util.collection.OrderedSet<java.lang.Class<?>> getExclusionSet();
    Code:
       0: aload_0
       1: getfield      #14                 // Field myExclusionSet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: areturn

  public com.vladsch.flexmark.util.collection.ClassificationBag<java.lang.Class<?>, com.vladsch.flexmark.ast.Node> getNodeClassifier();
    Code:
       0: aload_0
       1: getfield      #6                  // Field myNodeClassifier:Lcom/vladsch/flexmark/util/collection/ClassificationBag;
       4: areturn

  private void validateLinked(com.vladsch.flexmark.ast.Node);
    Code:
       0: aload_1
       1: invokevirtual #24                 // Method com/vladsch/flexmark/ast/Node.getNext:()Lcom/vladsch/flexmark/ast/Node;
       4: ifnonnull     46
       7: aload_1
       8: invokevirtual #25                 // Method com/vladsch/flexmark/ast/Node.getParent:()Lcom/vladsch/flexmark/ast/Node;
      11: ifnonnull     46
      14: new           #26                 // class java/lang/IllegalStateException
      17: dup
      18: new           #27                 // class java/lang/StringBuilder
      21: dup
      22: invokespecial #28                 // Method java/lang/StringBuilder."<init>":()V
      25: ldc           #29                 // String Added block
      27: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: aload_1
      31: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      34: ldc           #32                 // String  is not linked into the AST
      36: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: invokevirtual #33                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      42: invokespecial #34                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      45: athrow
      46: return

  public void nodeAdded(com.vladsch.flexmark.ast.Node);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #35                 // Method validateLinked:(Lcom/vladsch/flexmark/ast/Node;)V
       5: aload_0
       6: getfield      #6                  // Field myNodeClassifier:Lcom/vladsch/flexmark/util/collection/ClassificationBag;
       9: aload_1
      10: invokevirtual #36                 // Method com/vladsch/flexmark/util/collection/ClassificationBag.add:(Ljava/lang/Object;)Z
      13: pop
      14: aload_0
      15: getfield      #2                  // Field myHost:Lcom/vladsch/flexmark/util/NodeTracker;
      18: ifnull        31
      21: aload_0
      22: getfield      #2                  // Field myHost:Lcom/vladsch/flexmark/util/NodeTracker;
      25: aload_1
      26: invokeinterface #37,  2           // InterfaceMethod com/vladsch/flexmark/util/NodeTracker.nodeAdded:(Lcom/vladsch/flexmark/ast/Node;)V
      31: return

  public void nodeAddedWithChildren(com.vladsch.flexmark.ast.Node);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #35                 // Method validateLinked:(Lcom/vladsch/flexmark/ast/Node;)V
       5: aload_0
       6: getfield      #6                  // Field myNodeClassifier:Lcom/vladsch/flexmark/util/collection/ClassificationBag;
       9: aload_1
      10: invokevirtual #36                 // Method com/vladsch/flexmark/util/collection/ClassificationBag.add:(Ljava/lang/Object;)Z
      13: pop
      14: aload_0
      15: aload_1
      16: invokevirtual #38                 // Method com/vladsch/flexmark/ast/Node.getChildren:()Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterable;
      19: invokespecial #39                 // Method addNodes:(Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterable;)V
      22: aload_0
      23: getfield      #2                  // Field myHost:Lcom/vladsch/flexmark/util/NodeTracker;
      26: ifnull        39
      29: aload_0
      30: getfield      #2                  // Field myHost:Lcom/vladsch/flexmark/util/NodeTracker;
      33: aload_1
      34: invokeinterface #40,  2           // InterfaceMethod com/vladsch/flexmark/util/NodeTracker.nodeAddedWithChildren:(Lcom/vladsch/flexmark/ast/Node;)V
      39: return

  public void nodeAddedWithDescendants(com.vladsch.flexmark.ast.Node);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #35                 // Method validateLinked:(Lcom/vladsch/flexmark/ast/Node;)V
       5: aload_0
       6: getfield      #6                  // Field myNodeClassifier:Lcom/vladsch/flexmark/util/collection/ClassificationBag;
       9: aload_1
      10: invokevirtual #36                 // Method com/vladsch/flexmark/util/collection/ClassificationBag.add:(Ljava/lang/Object;)Z
      13: pop
      14: aload_0
      15: aload_1
      16: invokevirtual #41                 // Method com/vladsch/flexmark/ast/Node.getDescendants:()Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterable;
      19: invokespecial #39                 // Method addNodes:(Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterable;)V
      22: aload_0
      23: getfield      #2                  // Field myHost:Lcom/vladsch/flexmark/util/NodeTracker;
      26: ifnull        39
      29: aload_0
      30: getfield      #2                  // Field myHost:Lcom/vladsch/flexmark/util/NodeTracker;
      33: aload_1
      34: invokeinterface #42,  2           // InterfaceMethod com/vladsch/flexmark/util/NodeTracker.nodeAddedWithDescendants:(Lcom/vladsch/flexmark/ast/Node;)V
      39: return

  private void addNodes(com.vladsch.flexmark.util.collection.iteration.ReversiblePeekingIterable<com.vladsch.flexmark.ast.Node>);
    Code:
       0: aload_1
       1: invokeinterface #43,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterable.iterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterator;
       6: astore_2
       7: aload_2
       8: invokeinterface #44,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      13: ifeq          38
      16: aload_2
      17: invokeinterface #45,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      22: checkcast     #46                 // class com/vladsch/flexmark/ast/Node
      25: astore_3
      26: aload_0
      27: getfield      #6                  // Field myNodeClassifier:Lcom/vladsch/flexmark/util/collection/ClassificationBag;
      30: aload_3
      31: invokevirtual #36                 // Method com/vladsch/flexmark/util/collection/ClassificationBag.add:(Ljava/lang/Object;)Z
      34: pop
      35: goto          7
      38: return

  private void validateUnlinked(com.vladsch.flexmark.ast.Node);
    Code:
       0: aload_1
       1: invokevirtual #24                 // Method com/vladsch/flexmark/ast/Node.getNext:()Lcom/vladsch/flexmark/ast/Node;
       4: ifnonnull     14
       7: aload_1
       8: invokevirtual #25                 // Method com/vladsch/flexmark/ast/Node.getParent:()Lcom/vladsch/flexmark/ast/Node;
      11: ifnull        46
      14: new           #26                 // class java/lang/IllegalStateException
      17: dup
      18: new           #27                 // class java/lang/StringBuilder
      21: dup
      22: invokespecial #28                 // Method java/lang/StringBuilder."<init>":()V
      25: ldc           #47                 // String Removed block
      27: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: aload_1
      31: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      34: ldc           #48                 // String  is still linked in the AST
      36: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: invokevirtual #33                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      42: invokespecial #34                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      45: athrow
      46: return

  public void nodeRemoved(com.vladsch.flexmark.ast.Node);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #49                 // Method nodeRemovedWithDescendants:(Lcom/vladsch/flexmark/ast/Node;)V
       5: return

  public void nodeRemovedWithChildren(com.vladsch.flexmark.ast.Node);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #49                 // Method nodeRemovedWithDescendants:(Lcom/vladsch/flexmark/ast/Node;)V
       5: return

  public void nodeRemovedWithDescendants(com.vladsch.flexmark.ast.Node);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #50                 // Method validateUnlinked:(Lcom/vladsch/flexmark/ast/Node;)V
       5: aload_0
       6: getfield      #6                  // Field myNodeClassifier:Lcom/vladsch/flexmark/util/collection/ClassificationBag;
       9: aload_1
      10: invokevirtual #36                 // Method com/vladsch/flexmark/util/collection/ClassificationBag.add:(Ljava/lang/Object;)Z
      13: pop
      14: aload_0
      15: aload_1
      16: invokevirtual #41                 // Method com/vladsch/flexmark/ast/Node.getDescendants:()Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterable;
      19: invokespecial #51                 // Method removeNodes:(Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterable;)V
      22: aload_0
      23: getfield      #2                  // Field myHost:Lcom/vladsch/flexmark/util/NodeTracker;
      26: ifnull        39
      29: aload_0
      30: getfield      #2                  // Field myHost:Lcom/vladsch/flexmark/util/NodeTracker;
      33: aload_1
      34: invokeinterface #52,  2           // InterfaceMethod com/vladsch/flexmark/util/NodeTracker.nodeRemovedWithDescendants:(Lcom/vladsch/flexmark/ast/Node;)V
      39: return

  private void removeNodes(com.vladsch.flexmark.util.collection.iteration.ReversiblePeekingIterable<com.vladsch.flexmark.ast.Node>);
    Code:
       0: aload_1
       1: invokeinterface #43,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterable.iterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterator;
       6: astore_2
       7: aload_2
       8: invokeinterface #44,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      13: ifeq          38
      16: aload_2
      17: invokeinterface #45,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      22: checkcast     #46                 // class com/vladsch/flexmark/ast/Node
      25: astore_3
      26: aload_0
      27: getfield      #6                  // Field myNodeClassifier:Lcom/vladsch/flexmark/util/collection/ClassificationBag;
      30: aload_3
      31: invokevirtual #36                 // Method com/vladsch/flexmark/util/collection/ClassificationBag.add:(Ljava/lang/Object;)Z
      34: pop
      35: goto          7
      38: return

  public com.vladsch.flexmark.util.collection.OrderedSet<com.vladsch.flexmark.ast.Node> getItems();
    Code:
       0: aload_0
       1: getfield      #6                  // Field myNodeClassifier:Lcom/vladsch/flexmark/util/collection/ClassificationBag;
       4: invokevirtual #53                 // Method com/vladsch/flexmark/util/collection/ClassificationBag.getItems:()Lcom/vladsch/flexmark/util/collection/OrderedSet;
       7: areturn

  public <X> com.vladsch.flexmark.util.collection.iteration.ReversibleIterable<X> getCategoryItems(java.lang.Class<? extends X>, java.util.Set<? extends java.lang.Class<?>>);
    Code:
       0: aload_0
       1: getfield      #6                  // Field myNodeClassifier:Lcom/vladsch/flexmark/util/collection/ClassificationBag;
       4: aload_1
       5: aload_2
       6: invokevirtual #54                 // Method com/vladsch/flexmark/util/collection/ClassificationBag.getCategoryItems:(Ljava/lang/Class;Ljava/util/Collection;)Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterable;
       9: areturn
}
