Compiled from "ItemFactoryMap.java"
public class com.vladsch.flexmark.util.collection.ItemFactoryMap<I, P> implements java.util.Map<com.vladsch.flexmark.util.ComputableFactory<I, P>, I> {
  protected final java.util.HashMap<com.vladsch.flexmark.util.ComputableFactory<I, P>, I> itemMap;

  protected final P param;

  public com.vladsch.flexmark.util.collection.ItemFactoryMap(P);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: invokespecial #1                  // Method "<init>":(Ljava/lang/Object;I)V
       6: return

  public com.vladsch.flexmark.util.collection.ItemFactoryMap(P, int);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #3                  // class java/util/HashMap
       8: dup
       9: iload_2
      10: invokespecial #4                  // Method java/util/HashMap."<init>":(I)V
      13: putfield      #5                  // Field itemMap:Ljava/util/HashMap;
      16: aload_0
      17: aload_1
      18: putfield      #6                  // Field param:Ljava/lang/Object;
      21: return

  public I getItem(com.vladsch.flexmark.util.ComputableFactory<I, P>);
    Code:
       0: aload_0
       1: getfield      #5                  // Field itemMap:Ljava/util/HashMap;
       4: aload_1
       5: invokevirtual #7                  // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
       8: astore_2
       9: aload_2
      10: ifnonnull     34
      13: aload_1
      14: aload_0
      15: getfield      #6                  // Field param:Ljava/lang/Object;
      18: invokeinterface #8,  2            // InterfaceMethod com/vladsch/flexmark/util/ComputableFactory.create:(Ljava/lang/Object;)Ljava/lang/Object;
      23: astore_2
      24: aload_0
      25: getfield      #5                  // Field itemMap:Ljava/util/HashMap;
      28: aload_1
      29: aload_2
      30: invokevirtual #9                  // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      33: pop
      34: aload_2
      35: areturn

  public I get(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #10                 // class com/vladsch/flexmark/util/ComputableFactory
       4: ifeq          16
       7: aload_0
       8: aload_1
       9: checkcast     #10                 // class com/vladsch/flexmark/util/ComputableFactory
      12: invokevirtual #11                 // Method getItem:(Lcom/vladsch/flexmark/util/ComputableFactory;)Ljava/lang/Object;
      15: areturn
      16: aconst_null
      17: areturn

  public int size();
    Code:
       0: aload_0
       1: getfield      #5                  // Field itemMap:Ljava/util/HashMap;
       4: invokevirtual #12                 // Method java/util/HashMap.size:()I
       7: ireturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #5                  // Field itemMap:Ljava/util/HashMap;
       4: invokevirtual #13                 // Method java/util/HashMap.isEmpty:()Z
       7: ireturn

  public boolean containsKey(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #5                  // Field itemMap:Ljava/util/HashMap;
       4: aload_1
       5: invokevirtual #14                 // Method java/util/HashMap.containsKey:(Ljava/lang/Object;)Z
       8: ireturn

  public I put(com.vladsch.flexmark.util.ComputableFactory<I, P>, I);
    Code:
       0: aload_0
       1: getfield      #5                  // Field itemMap:Ljava/util/HashMap;
       4: aload_1
       5: aload_2
       6: invokevirtual #9                  // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       9: areturn

  public void putAll(java.util.Map<? extends com.vladsch.flexmark.util.ComputableFactory<I, P>, ? extends I>);
    Code:
       0: aload_0
       1: getfield      #5                  // Field itemMap:Ljava/util/HashMap;
       4: aload_1
       5: invokevirtual #15                 // Method java/util/HashMap.putAll:(Ljava/util/Map;)V
       8: return

  public I remove(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #5                  // Field itemMap:Ljava/util/HashMap;
       4: aload_1
       5: invokevirtual #16                 // Method java/util/HashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
       8: areturn

  public void clear();
    Code:
       0: aload_0
       1: getfield      #5                  // Field itemMap:Ljava/util/HashMap;
       4: invokevirtual #17                 // Method java/util/HashMap.clear:()V
       7: return

  public boolean containsValue(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #5                  // Field itemMap:Ljava/util/HashMap;
       4: aload_1
       5: invokevirtual #18                 // Method java/util/HashMap.containsValue:(Ljava/lang/Object;)Z
       8: ireturn

  public java.util.Set<com.vladsch.flexmark.util.ComputableFactory<I, P>> keySet();
    Code:
       0: aload_0
       1: getfield      #5                  // Field itemMap:Ljava/util/HashMap;
       4: invokevirtual #19                 // Method java/util/HashMap.keySet:()Ljava/util/Set;
       7: areturn

  public java.util.Collection<I> values();
    Code:
       0: aload_0
       1: getfield      #5                  // Field itemMap:Ljava/util/HashMap;
       4: invokevirtual #20                 // Method java/util/HashMap.values:()Ljava/util/Collection;
       7: areturn

  public java.util.Set<java.util.Map$Entry<com.vladsch.flexmark.util.ComputableFactory<I, P>, I>> entrySet();
    Code:
       0: aload_0
       1: getfield      #5                  // Field itemMap:Ljava/util/HashMap;
       4: invokevirtual #21                 // Method java/util/HashMap.entrySet:()Ljava/util/Set;
       7: areturn

  public java.lang.Object put(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #10                 // class com/vladsch/flexmark/util/ComputableFactory
       5: aload_2
       6: invokevirtual #22                 // Method put:(Lcom/vladsch/flexmark/util/ComputableFactory;Ljava/lang/Object;)Ljava/lang/Object;
       9: areturn
}
