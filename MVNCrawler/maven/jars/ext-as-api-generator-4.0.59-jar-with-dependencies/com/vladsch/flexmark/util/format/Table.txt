Compiled from "Table.java"
public class com.vladsch.flexmark.util.format.Table {
  public final com.vladsch.flexmark.util.format.Table$TableSection heading;

  public final com.vladsch.flexmark.util.format.Table$TableSection separator;

  public final com.vladsch.flexmark.util.format.Table$TableSection body;

  public final com.vladsch.flexmark.util.format.TableFormatOptions options;

  private com.vladsch.flexmark.util.sequence.BasedSequence captionOpen;

  private com.vladsch.flexmark.util.sequence.BasedSequence caption;

  private com.vladsch.flexmark.util.sequence.BasedSequence captionClose;

  private boolean isHeading;

  private boolean isSeparator;

  public com.vladsch.flexmark.util.html.CellAlignment[] alignments;

  public int[] columnWidths;

  public com.vladsch.flexmark.util.format.Table(com.vladsch.flexmark.util.options.DataHolder);
    Code:
       0: aload_0
       1: new           #1                  // class com/vladsch/flexmark/util/format/TableFormatOptions
       4: dup
       5: aload_1
       6: invokespecial #2                  // Method com/vladsch/flexmark/util/format/TableFormatOptions."<init>":(Lcom/vladsch/flexmark/util/options/DataHolder;)V
       9: invokespecial #3                  // Method "<init>":(Lcom/vladsch/flexmark/util/format/TableFormatOptions;)V
      12: return

  public com.vladsch.flexmark.util.format.Table(com.vladsch.flexmark.util.format.TableFormatOptions);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #5                  // class com/vladsch/flexmark/util/format/Table$TableSection
       8: dup
       9: invokespecial #6                  // Method com/vladsch/flexmark/util/format/Table$TableSection."<init>":()V
      12: putfield      #7                  // Field heading:Lcom/vladsch/flexmark/util/format/Table$TableSection;
      15: aload_0
      16: new           #5                  // class com/vladsch/flexmark/util/format/Table$TableSection
      19: dup
      20: invokespecial #6                  // Method com/vladsch/flexmark/util/format/Table$TableSection."<init>":()V
      23: putfield      #8                  // Field separator:Lcom/vladsch/flexmark/util/format/Table$TableSection;
      26: aload_0
      27: new           #5                  // class com/vladsch/flexmark/util/format/Table$TableSection
      30: dup
      31: invokespecial #6                  // Method com/vladsch/flexmark/util/format/Table$TableSection."<init>":()V
      34: putfield      #9                  // Field body:Lcom/vladsch/flexmark/util/format/Table$TableSection;
      37: aload_0
      38: iconst_1
      39: putfield      #10                 // Field isHeading:Z
      42: aload_0
      43: iconst_0
      44: putfield      #11                 // Field isSeparator:Z
      47: aload_0
      48: aload_1
      49: putfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
      52: return

  public boolean isHeading();
    Code:
       0: aload_0
       1: getfield      #10                 // Field isHeading:Z
       4: ireturn

  public void setHeading(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #10                 // Field isHeading:Z
       5: return

  public boolean isSeparator();
    Code:
       0: aload_0
       1: getfield      #11                 // Field isSeparator:Z
       4: ireturn

  public com.vladsch.flexmark.util.sequence.BasedSequence getCaptionOpen();
    Code:
       0: aload_0
       1: getfield      #13                 // Field captionOpen:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence getCaption();
    Code:
       0: aload_0
       1: getfield      #14                 // Field caption:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: areturn

  public void setCaption(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #15                 // Method com/vladsch/flexmark/util/sequence/BasedSequenceImpl.of:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       5: putfield      #14                 // Field caption:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       8: return

  public void setCaption(java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #15                 // Method com/vladsch/flexmark/util/sequence/BasedSequenceImpl.of:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       5: putfield      #13                 // Field captionOpen:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       8: aload_0
       9: aload_2
      10: invokestatic  #15                 // Method com/vladsch/flexmark/util/sequence/BasedSequenceImpl.of:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      13: putfield      #14                 // Field caption:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      16: aload_0
      17: aload_3
      18: invokestatic  #15                 // Method com/vladsch/flexmark/util/sequence/BasedSequenceImpl.of:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      21: putfield      #16                 // Field captionClose:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      24: return

  public com.vladsch.flexmark.util.sequence.BasedSequence getCaptionClose();
    Code:
       0: aload_0
       1: getfield      #16                 // Field captionClose:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: areturn

  public void setSeparator(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #11                 // Field isSeparator:Z
       5: return

  public void nextRow();
    Code:
       0: aload_0
       1: getfield      #11                 // Field isSeparator:Z
       4: ifeq          17
       7: new           #17                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #18                 // String Only one separator row allowed
      13: invokespecial #19                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #10                 // Field isHeading:Z
      21: ifeq          34
      24: aload_0
      25: getfield      #7                  // Field heading:Lcom/vladsch/flexmark/util/format/Table$TableSection;
      28: invokevirtual #20                 // Method com/vladsch/flexmark/util/format/Table$TableSection.nextRow:()V
      31: goto          41
      34: aload_0
      35: getfield      #9                  // Field body:Lcom/vladsch/flexmark/util/format/Table$TableSection;
      38: invokevirtual #20                 // Method com/vladsch/flexmark/util/format/Table$TableSection.nextRow:()V
      41: return

  public int getHeadingRows();
    Code:
       0: aload_0
       1: getfield      #7                  // Field heading:Lcom/vladsch/flexmark/util/format/Table$TableSection;
       4: getfield      #21                 // Field com/vladsch/flexmark/util/format/Table$TableSection.rows:Ljava/util/List;
       7: invokeinterface #22,  1           // InterfaceMethod java/util/List.size:()I
      12: ireturn

  public int getBodyRows();
    Code:
       0: aload_0
       1: getfield      #9                  // Field body:Lcom/vladsch/flexmark/util/format/Table$TableSection;
       4: getfield      #21                 // Field com/vladsch/flexmark/util/format/Table$TableSection.rows:Ljava/util/List;
       7: invokeinterface #22,  1           // InterfaceMethod java/util/List.size:()I
      12: ireturn

  public int getHeadingColumns();
    Code:
       0: aload_0
       1: getfield      #7                  // Field heading:Lcom/vladsch/flexmark/util/format/Table$TableSection;
       4: invokevirtual #23                 // Method com/vladsch/flexmark/util/format/Table$TableSection.getMaxColumns:()I
       7: ireturn

  public int getSeparatorColumns();
    Code:
       0: aload_0
       1: getfield      #9                  // Field body:Lcom/vladsch/flexmark/util/format/Table$TableSection;
       4: invokevirtual #23                 // Method com/vladsch/flexmark/util/format/Table$TableSection.getMaxColumns:()I
       7: ireturn

  public int getBodyColumns();
    Code:
       0: aload_0
       1: getfield      #9                  // Field body:Lcom/vladsch/flexmark/util/format/Table$TableSection;
       4: invokevirtual #23                 // Method com/vladsch/flexmark/util/format/Table$TableSection.getMaxColumns:()I
       7: ireturn

  public void addCell(com.vladsch.flexmark.util.format.Table$TableCell);
    Code:
       0: aload_0
       1: getfield      #11                 // Field isSeparator:Z
       4: ifeq          14
       7: aload_0
       8: getfield      #8                  // Field separator:Lcom/vladsch/flexmark/util/format/Table$TableSection;
      11: goto          32
      14: aload_0
      15: getfield      #10                 // Field isHeading:Z
      18: ifeq          28
      21: aload_0
      22: getfield      #7                  // Field heading:Lcom/vladsch/flexmark/util/format/Table$TableSection;
      25: goto          32
      28: aload_0
      29: getfield      #9                  // Field body:Lcom/vladsch/flexmark/util/format/Table$TableSection;
      32: astore_2
      33: aload_0
      34: getfield      #11                 // Field isSeparator:Z
      37: ifeq          66
      40: aload_1
      41: getfield      #24                 // Field com/vladsch/flexmark/util/format/Table$TableCell.columnSpan:I
      44: iconst_1
      45: if_icmpne     56
      48: aload_1
      49: getfield      #25                 // Field com/vladsch/flexmark/util/format/Table$TableCell.rowSpan:I
      52: iconst_1
      53: if_icmpeq     66
      56: new           #17                 // class java/lang/IllegalStateException
      59: dup
      60: ldc           #26                 // String Separator columns cannot span rows/columns
      62: invokespecial #19                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      65: athrow
      66: aload_2
      67: aload_2
      68: getfield      #27                 // Field com/vladsch/flexmark/util/format/Table$TableSection.row:I
      71: invokevirtual #28                 // Method com/vladsch/flexmark/util/format/Table$TableSection.get:(I)Lcom/vladsch/flexmark/util/format/Table$TableRow;
      74: astore_3
      75: aload_2
      76: getfield      #29                 // Field com/vladsch/flexmark/util/format/Table$TableSection.column:I
      79: aload_3
      80: getfield      #30                 // Field com/vladsch/flexmark/util/format/Table$TableRow.cells:Ljava/util/List;
      83: invokeinterface #22,  1           // InterfaceMethod java/util/List.size:()I
      88: if_icmpge     120
      91: aload_3
      92: getfield      #30                 // Field com/vladsch/flexmark/util/format/Table$TableRow.cells:Ljava/util/List;
      95: aload_2
      96: getfield      #29                 // Field com/vladsch/flexmark/util/format/Table$TableSection.column:I
      99: invokeinterface #31,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
     104: ifnull        120
     107: aload_2
     108: dup
     109: getfield      #29                 // Field com/vladsch/flexmark/util/format/Table$TableSection.column:I
     112: iconst_1
     113: iadd
     114: putfield      #29                 // Field com/vladsch/flexmark/util/format/Table$TableSection.column:I
     117: goto          75
     120: iconst_0
     121: istore        4
     123: iload         4
     125: aload_1
     126: getfield      #25                 // Field com/vladsch/flexmark/util/format/Table$TableCell.rowSpan:I
     129: if_icmpge     258
     132: aload_2
     133: aload_2
     134: getfield      #27                 // Field com/vladsch/flexmark/util/format/Table$TableSection.row:I
     137: iload         4
     139: iadd
     140: invokevirtual #28                 // Method com/vladsch/flexmark/util/format/Table$TableSection.get:(I)Lcom/vladsch/flexmark/util/format/Table$TableRow;
     143: aload_2
     144: getfield      #29                 // Field com/vladsch/flexmark/util/format/Table$TableSection.column:I
     147: aload_1
     148: invokevirtual #32                 // Method com/vladsch/flexmark/util/format/Table$TableRow.set:(ILcom/vladsch/flexmark/util/format/Table$TableCell;)V
     151: iconst_1
     152: istore        5
     154: iload         5
     156: aload_1
     157: getfield      #24                 // Field com/vladsch/flexmark/util/format/Table$TableCell.columnSpan:I
     160: if_icmpge     252
     163: aload_2
     164: aload_2
     165: getfield      #27                 // Field com/vladsch/flexmark/util/format/Table$TableSection.row:I
     168: iload         4
     170: iadd
     171: aload_2
     172: getfield      #29                 // Field com/vladsch/flexmark/util/format/Table$TableSection.column:I
     175: iload         5
     177: iadd
     178: invokevirtual #33                 // Method com/vladsch/flexmark/util/format/Table$TableSection.expandTo:(II)Lcom/vladsch/flexmark/util/format/Table$TableRow;
     181: pop
     182: aload_2
     183: aload_2
     184: getfield      #27                 // Field com/vladsch/flexmark/util/format/Table$TableSection.row:I
     187: iload         4
     189: iadd
     190: invokevirtual #28                 // Method com/vladsch/flexmark/util/format/Table$TableSection.get:(I)Lcom/vladsch/flexmark/util/format/Table$TableRow;
     193: getfield      #30                 // Field com/vladsch/flexmark/util/format/Table$TableRow.cells:Ljava/util/List;
     196: aload_2
     197: getfield      #29                 // Field com/vladsch/flexmark/util/format/Table$TableSection.column:I
     200: iload         5
     202: iadd
     203: invokeinterface #31,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
     208: ifnull        214
     211: goto          252
     214: aload_2
     215: getfield      #21                 // Field com/vladsch/flexmark/util/format/Table$TableSection.rows:Ljava/util/List;
     218: aload_2
     219: getfield      #27                 // Field com/vladsch/flexmark/util/format/Table$TableSection.row:I
     222: iload         4
     224: iadd
     225: invokeinterface #31,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
     230: checkcast     #34                 // class com/vladsch/flexmark/util/format/Table$TableRow
     233: aload_2
     234: getfield      #29                 // Field com/vladsch/flexmark/util/format/Table$TableSection.column:I
     237: iload         5
     239: iadd
     240: getstatic     #35                 // Field com/vladsch/flexmark/util/format/Table$TableCell.NULL:Lcom/vladsch/flexmark/util/format/Table$TableCell;
     243: invokevirtual #32                 // Method com/vladsch/flexmark/util/format/Table$TableRow.set:(ILcom/vladsch/flexmark/util/format/Table$TableCell;)V
     246: iinc          5, 1
     249: goto          154
     252: iinc          4, 1
     255: goto          123
     258: aload_2
     259: dup
     260: getfield      #29                 // Field com/vladsch/flexmark/util/format/Table$TableSection.column:I
     263: aload_1
     264: getfield      #24                 // Field com/vladsch/flexmark/util/format/Table$TableCell.columnSpan:I
     267: iadd
     268: putfield      #29                 // Field com/vladsch/flexmark/util/format/Table$TableSection.column:I
     271: return

  public int getMinColumns();
    Code:
       0: aload_0
       1: getfield      #7                  // Field heading:Lcom/vladsch/flexmark/util/format/Table$TableSection;
       4: invokevirtual #36                 // Method com/vladsch/flexmark/util/format/Table$TableSection.getMinColumns:()I
       7: istore_1
       8: aload_0
       9: getfield      #8                  // Field separator:Lcom/vladsch/flexmark/util/format/Table$TableSection;
      12: invokevirtual #36                 // Method com/vladsch/flexmark/util/format/Table$TableSection.getMinColumns:()I
      15: istore_2
      16: aload_0
      17: getfield      #9                  // Field body:Lcom/vladsch/flexmark/util/format/Table$TableSection;
      20: invokevirtual #36                 // Method com/vladsch/flexmark/util/format/Table$TableSection.getMinColumns:()I
      23: istore_3
      24: iload_1
      25: iconst_2
      26: newarray       int
      28: dup
      29: iconst_0
      30: iload_2
      31: iastore
      32: dup
      33: iconst_1
      34: iload_3
      35: iastore
      36: invokestatic  #37                 // Method com/vladsch/flexmark/util/Utils.min:(I[I)I
      39: ireturn

  public int getMaxColumns();
    Code:
       0: aload_0
       1: getfield      #7                  // Field heading:Lcom/vladsch/flexmark/util/format/Table$TableSection;
       4: invokevirtual #23                 // Method com/vladsch/flexmark/util/format/Table$TableSection.getMaxColumns:()I
       7: istore_1
       8: aload_0
       9: getfield      #8                  // Field separator:Lcom/vladsch/flexmark/util/format/Table$TableSection;
      12: invokevirtual #23                 // Method com/vladsch/flexmark/util/format/Table$TableSection.getMaxColumns:()I
      15: istore_2
      16: aload_0
      17: getfield      #9                  // Field body:Lcom/vladsch/flexmark/util/format/Table$TableSection;
      20: invokevirtual #23                 // Method com/vladsch/flexmark/util/format/Table$TableSection.getMaxColumns:()I
      23: istore_3
      24: iload_1
      25: iconst_2
      26: newarray       int
      28: dup
      29: iconst_0
      30: iload_2
      31: iastore
      32: dup
      33: iconst_1
      34: iload_3
      35: iastore
      36: invokestatic  #38                 // Method com/vladsch/flexmark/util/Utils.max:(I[I)I
      39: ireturn

  public com.vladsch.flexmark.util.sequence.BasedSequence cellText(java.lang.CharSequence, int, com.vladsch.flexmark.util.html.CellAlignment, com.vladsch.flexmark.util.Ref<java.lang.Integer>);
    Code:
       0: aload_1
       1: invokestatic  #15                 // Method com/vladsch/flexmark/util/sequence/BasedSequenceImpl.of:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: astore        5
       6: aload_0
       7: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
      10: getfield      #39                 // Field com/vladsch/flexmark/util/format/TableFormatOptions.charWidthProvider:Lcom/vladsch/flexmark/util/mappers/CharWidthProvider;
      13: aload         5
      15: invokeinterface #40,  2           // InterfaceMethod com/vladsch/flexmark/util/mappers/CharWidthProvider.charWidth:(Ljava/lang/CharSequence;)I
      20: istore        6
      22: iload         6
      24: iload_2
      25: if_icmpge     271
      28: aload_0
      29: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
      32: getfield      #41                 // Field com/vladsch/flexmark/util/format/TableFormatOptions.adjustColumnWidth:Z
      35: ifeq          271
      38: aload_0
      39: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
      42: getfield      #42                 // Field com/vladsch/flexmark/util/format/TableFormatOptions.applyColumnAlignment:Z
      45: ifeq          59
      48: aload_3
      49: ifnull        59
      52: aload_3
      53: getstatic     #43                 // Field com/vladsch/flexmark/util/html/CellAlignment.NONE:Lcom/vladsch/flexmark/util/html/CellAlignment;
      56: if_acmpne     63
      59: getstatic     #44                 // Field com/vladsch/flexmark/util/html/CellAlignment.LEFT:Lcom/vladsch/flexmark/util/html/CellAlignment;
      62: astore_3
      63: iload_2
      64: iload         6
      66: isub
      67: istore        7
      69: iload         7
      71: aload_0
      72: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
      75: getfield      #45                 // Field com/vladsch/flexmark/util/format/TableFormatOptions.spaceWidth:I
      78: idiv
      79: istore        8
      81: aload         4
      83: getfield      #46                 // Field com/vladsch/flexmark/util/Ref.value:Ljava/lang/Object;
      86: checkcast     #47                 // class java/lang/Integer
      89: invokevirtual #48                 // Method java/lang/Integer.intValue:()I
      92: iconst_2
      93: imul
      94: aload_0
      95: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
      98: getfield      #45                 // Field com/vladsch/flexmark/util/format/TableFormatOptions.spaceWidth:I
     101: if_icmplt     140
     104: iinc          8, 1
     107: aload         4
     109: astore        9
     111: aload         9
     113: aload         9
     115: getfield      #46                 // Field com/vladsch/flexmark/util/Ref.value:Ljava/lang/Object;
     118: checkcast     #47                 // class java/lang/Integer
     121: invokevirtual #48                 // Method java/lang/Integer.intValue:()I
     124: aload_0
     125: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
     128: getfield      #45                 // Field com/vladsch/flexmark/util/format/TableFormatOptions.spaceWidth:I
     131: isub
     132: invokestatic  #49                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     135: dup_x1
     136: putfield      #46                 // Field com/vladsch/flexmark/util/Ref.value:Ljava/lang/Object;
     139: pop
     140: getstatic     #50                 // Field com/vladsch/flexmark/util/format/Table$1.$SwitchMap$com$vladsch$flexmark$util$html$CellAlignment:[I
     143: aload_3
     144: invokevirtual #51                 // Method com/vladsch/flexmark/util/html/CellAlignment.ordinal:()I
     147: iaload
     148: tableswitch   { // 1 to 3
                     1: 176
                     2: 211
                     3: 225
               default: 271
          }
     176: aload         5
     178: iconst_1
     179: anewarray     #52                 // class java/lang/CharSequence
     182: dup
     183: iconst_0
     184: ldc           #53                 // String
     186: iload         8
     188: aload         5
     190: iconst_0
     191: iconst_0
     192: invokeinterface #54,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     197: invokestatic  #55                 // Method com/vladsch/flexmark/util/sequence/PrefixedSubSequence.repeatOf:(Ljava/lang/String;ILcom/vladsch/flexmark/util/sequence/BasedSequence;)Lcom/vladsch/flexmark/util/sequence/PrefixedSubSequence;
     200: aastore
     201: invokeinterface #56,  2           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.append:([Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     206: astore        5
     208: goto          271
     211: ldc           #53                 // String
     213: iload         8
     215: aload         5
     217: invokestatic  #55                 // Method com/vladsch/flexmark/util/sequence/PrefixedSubSequence.repeatOf:(Ljava/lang/String;ILcom/vladsch/flexmark/util/sequence/BasedSequence;)Lcom/vladsch/flexmark/util/sequence/PrefixedSubSequence;
     220: astore        5
     222: goto          271
     225: iload         8
     227: iconst_2
     228: idiv
     229: istore        9
     231: ldc           #53                 // String
     233: iload         9
     235: aload         5
     237: invokestatic  #55                 // Method com/vladsch/flexmark/util/sequence/PrefixedSubSequence.repeatOf:(Ljava/lang/String;ILcom/vladsch/flexmark/util/sequence/BasedSequence;)Lcom/vladsch/flexmark/util/sequence/PrefixedSubSequence;
     240: iconst_1
     241: anewarray     #52                 // class java/lang/CharSequence
     244: dup
     245: iconst_0
     246: ldc           #53                 // String
     248: iload         8
     250: iload         9
     252: isub
     253: aload         5
     255: iconst_0
     256: iconst_0
     257: invokeinterface #54,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     262: invokestatic  #55                 // Method com/vladsch/flexmark/util/sequence/PrefixedSubSequence.repeatOf:(Ljava/lang/String;ILcom/vladsch/flexmark/util/sequence/BasedSequence;)Lcom/vladsch/flexmark/util/sequence/PrefixedSubSequence;
     265: aastore
     266: invokevirtual #57                 // Method com/vladsch/flexmark/util/sequence/PrefixedSubSequence.append:([Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     269: astore        5
     271: aload         5
     273: areturn

  public int spanWidth(int, int);
    Code:
       0: iload_2
       1: iconst_1
       2: if_icmple     36
       5: iconst_0
       6: istore_3
       7: iconst_0
       8: istore        4
      10: iload         4
      12: iload_2
      13: if_icmpge     34
      16: iload_3
      17: aload_0
      18: getfield      #58                 // Field columnWidths:[I
      21: iload         4
      23: iload_1
      24: iadd
      25: iaload
      26: iadd
      27: istore_3
      28: iinc          4, 1
      31: goto          10
      34: iload_3
      35: ireturn
      36: aload_0
      37: getfield      #58                 // Field columnWidths:[I
      40: iload_1
      41: iaload
      42: ireturn

  public int spanFixedWidth(java.util.BitSet, int, int);
    Code:
       0: iload_3
       1: iconst_1
       2: if_icmple     49
       5: iconst_0
       6: istore        4
       8: iconst_0
       9: istore        5
      11: iload         5
      13: iload_3
      14: if_icmpge     46
      17: aload_1
      18: iload         5
      20: invokevirtual #59                 // Method java/util/BitSet.get:(I)Z
      23: ifne          40
      26: iload         4
      28: aload_0
      29: getfield      #58                 // Field columnWidths:[I
      32: iload         5
      34: iload_2
      35: iadd
      36: iaload
      37: iadd
      38: istore        4
      40: iinc          5, 1
      43: goto          11
      46: iload         4
      48: ireturn
      49: aload_0
      50: getfield      #58                 // Field columnWidths:[I
      53: iload_2
      54: iaload
      55: ireturn

  private com.vladsch.flexmark.util.html.CellAlignment adjustCellAlignment(com.vladsch.flexmark.util.html.CellAlignment);
    Code:
       0: getstatic     #60                 // Field com/vladsch/flexmark/util/format/Table$1.$SwitchMap$com$vladsch$flexmark$util$format$options$DiscretionaryText:[I
       3: aload_0
       4: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
       7: getfield      #61                 // Field com/vladsch/flexmark/util/format/TableFormatOptions.leftAlignMarker:Lcom/vladsch/flexmark/util/format/options/DiscretionaryText;
      10: invokevirtual #62                 // Method com/vladsch/flexmark/util/format/options/DiscretionaryText.ordinal:()I
      13: iaload
      14: lookupswitch  { // 2
                     1: 40
                     2: 58
               default: 72
          }
      40: aload_1
      41: ifnull        51
      44: aload_1
      45: getstatic     #43                 // Field com/vladsch/flexmark/util/html/CellAlignment.NONE:Lcom/vladsch/flexmark/util/html/CellAlignment;
      48: if_acmpne     72
      51: getstatic     #44                 // Field com/vladsch/flexmark/util/html/CellAlignment.LEFT:Lcom/vladsch/flexmark/util/html/CellAlignment;
      54: astore_1
      55: goto          72
      58: aload_1
      59: getstatic     #44                 // Field com/vladsch/flexmark/util/html/CellAlignment.LEFT:Lcom/vladsch/flexmark/util/html/CellAlignment;
      62: if_acmpne     72
      65: getstatic     #43                 // Field com/vladsch/flexmark/util/html/CellAlignment.NONE:Lcom/vladsch/flexmark/util/html/CellAlignment;
      68: astore_1
      69: goto          72
      72: aload_1
      73: areturn

  public void finalizeTable();
    Code:
       0: aload_0
       1: getfield      #7                  // Field heading:Lcom/vladsch/flexmark/util/format/Table$TableSection;
       4: invokevirtual #63                 // Method com/vladsch/flexmark/util/format/Table$TableSection.cleanup:()V
       7: aload_0
       8: getfield      #9                  // Field body:Lcom/vladsch/flexmark/util/format/Table$TableSection;
      11: invokevirtual #63                 // Method com/vladsch/flexmark/util/format/Table$TableSection.cleanup:()V
      14: aload_0
      15: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
      18: getfield      #64                 // Field com/vladsch/flexmark/util/format/TableFormatOptions.fillMissingColumns:Z
      21: ifeq          149
      24: aload_0
      25: invokevirtual #65                 // Method getMinColumns:()I
      28: istore_1
      29: aload_0
      30: invokevirtual #66                 // Method getMaxColumns:()I
      33: istore_2
      34: iload_1
      35: iload_2
      36: if_icmpge     149
      39: new           #67                 // class com/vladsch/flexmark/util/format/Table$TableCell
      42: dup
      43: ldc           #68                 // String
      45: iconst_1
      46: iconst_1
      47: invokespecial #69                 // Method com/vladsch/flexmark/util/format/Table$TableCell."<init>":(Ljava/lang/CharSequence;II)V
      50: astore_3
      51: aload_0
      52: getfield      #7                  // Field heading:Lcom/vladsch/flexmark/util/format/Table$TableSection;
      55: getfield      #21                 // Field com/vladsch/flexmark/util/format/Table$TableSection.rows:Ljava/util/List;
      58: invokeinterface #70,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      63: astore        4
      65: aload         4
      67: invokeinterface #71,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      72: ifeq          100
      75: aload         4
      77: invokeinterface #72,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      82: checkcast     #34                 // class com/vladsch/flexmark/util/format/Table$TableRow
      85: astore        5
      87: aload         5
      89: iload_2
      90: iconst_1
      91: isub
      92: aload_3
      93: invokevirtual #73                 // Method com/vladsch/flexmark/util/format/Table$TableRow.expandTo:(ILcom/vladsch/flexmark/util/format/Table$TableCell;)Lcom/vladsch/flexmark/util/format/Table$TableRow;
      96: pop
      97: goto          65
     100: aload_0
     101: getfield      #9                  // Field body:Lcom/vladsch/flexmark/util/format/Table$TableSection;
     104: getfield      #21                 // Field com/vladsch/flexmark/util/format/Table$TableSection.rows:Ljava/util/List;
     107: invokeinterface #70,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     112: astore        4
     114: aload         4
     116: invokeinterface #71,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     121: ifeq          149
     124: aload         4
     126: invokeinterface #72,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     131: checkcast     #34                 // class com/vladsch/flexmark/util/format/Table$TableRow
     134: astore        5
     136: aload         5
     138: iload_2
     139: iconst_1
     140: isub
     141: aload_3
     142: invokevirtual #73                 // Method com/vladsch/flexmark/util/format/Table$TableRow.expandTo:(ILcom/vladsch/flexmark/util/format/Table$TableCell;)Lcom/vladsch/flexmark/util/format/Table$TableRow;
     145: pop
     146: goto          114
     149: aload_0
     150: invokevirtual #66                 // Method getMaxColumns:()I
     153: istore_1
     154: aload_0
     155: iload_1
     156: anewarray     #74                 // class com/vladsch/flexmark/util/html/CellAlignment
     159: putfield      #75                 // Field alignments:[Lcom/vladsch/flexmark/util/html/CellAlignment;
     162: aload_0
     163: iload_1
     164: newarray       int
     166: putfield      #58                 // Field columnWidths:[I
     169: new           #76                 // class java/util/BitSet
     172: dup
     173: iload_1
     174: invokespecial #77                 // Method java/util/BitSet."<init>":(I)V
     177: astore_2
     178: new           #78                 // class java/util/ArrayList
     181: dup
     182: invokespecial #79                 // Method java/util/ArrayList."<init>":()V
     185: astore_3
     186: new           #80                 // class com/vladsch/flexmark/util/Ref
     189: dup
     190: iconst_0
     191: invokestatic  #49                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     194: invokespecial #81                 // Method com/vladsch/flexmark/util/Ref."<init>":(Ljava/lang/Object;)V
     197: astore        4
     199: aload_0
     200: getfield      #8                  // Field separator:Lcom/vladsch/flexmark/util/format/Table$TableSection;
     203: getfield      #21                 // Field com/vladsch/flexmark/util/format/Table$TableSection.rows:Ljava/util/List;
     206: invokeinterface #22,  1           // InterfaceMethod java/util/List.size:()I
     211: ifle          363
     214: aload_0
     215: getfield      #8                  // Field separator:Lcom/vladsch/flexmark/util/format/Table$TableSection;
     218: getfield      #21                 // Field com/vladsch/flexmark/util/format/Table$TableSection.rows:Ljava/util/List;
     221: iconst_0
     222: invokeinterface #31,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
     227: checkcast     #34                 // class com/vladsch/flexmark/util/format/Table$TableRow
     230: astore        5
     232: iconst_0
     233: istore        6
     235: iconst_0
     236: istore        7
     238: aload         4
     240: iconst_0
     241: invokestatic  #49                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     244: putfield      #46                 // Field com/vladsch/flexmark/util/Ref.value:Ljava/lang/Object;
     247: aload         5
     249: getfield      #30                 // Field com/vladsch/flexmark/util/format/Table$TableRow.cells:Ljava/util/List;
     252: invokeinterface #70,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     257: astore        8
     259: aload         8
     261: invokeinterface #71,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     266: ifeq          363
     269: aload         8
     271: invokeinterface #72,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     276: checkcast     #67                 // class com/vladsch/flexmark/util/format/Table$TableCell
     279: astore        9
     281: aload_0
     282: getfield      #75                 // Field alignments:[Lcom/vladsch/flexmark/util/html/CellAlignment;
     285: iload         7
     287: aaload
     288: ifnull        309
     291: aload         9
     293: getfield      #24                 // Field com/vladsch/flexmark/util/format/Table$TableCell.columnSpan:I
     296: iconst_1
     297: if_icmpne     347
     300: aload_2
     301: iload         7
     303: invokevirtual #59                 // Method java/util/BitSet.get:(I)Z
     306: ifeq          347
     309: aload         9
     311: getfield      #82                 // Field com/vladsch/flexmark/util/format/Table$TableCell.alignment:Lcom/vladsch/flexmark/util/html/CellAlignment;
     314: getstatic     #43                 // Field com/vladsch/flexmark/util/html/CellAlignment.NONE:Lcom/vladsch/flexmark/util/html/CellAlignment;
     317: if_acmpeq     347
     320: aload_0
     321: getfield      #75                 // Field alignments:[Lcom/vladsch/flexmark/util/html/CellAlignment;
     324: iload         7
     326: aload         9
     328: getfield      #82                 // Field com/vladsch/flexmark/util/format/Table$TableCell.alignment:Lcom/vladsch/flexmark/util/html/CellAlignment;
     331: aastore
     332: aload         9
     334: getfield      #24                 // Field com/vladsch/flexmark/util/format/Table$TableCell.columnSpan:I
     337: iconst_1
     338: if_icmple     347
     341: aload_2
     342: iload         7
     344: invokevirtual #83                 // Method java/util/BitSet.set:(I)V
     347: iinc          6, 1
     350: iload         7
     352: aload         9
     354: getfield      #24                 // Field com/vladsch/flexmark/util/format/Table$TableCell.columnSpan:I
     357: iadd
     358: istore        7
     360: goto          259
     363: aload_0
     364: getfield      #7                  // Field heading:Lcom/vladsch/flexmark/util/format/Table$TableSection;
     367: getfield      #21                 // Field com/vladsch/flexmark/util/format/Table$TableSection.rows:Ljava/util/List;
     370: invokeinterface #22,  1           // InterfaceMethod java/util/List.size:()I
     375: ifle          663
     378: iconst_0
     379: istore        5
     381: aload_0
     382: getfield      #7                  // Field heading:Lcom/vladsch/flexmark/util/format/Table$TableSection;
     385: getfield      #21                 // Field com/vladsch/flexmark/util/format/Table$TableSection.rows:Ljava/util/List;
     388: invokeinterface #70,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     393: astore        6
     395: aload         6
     397: invokeinterface #71,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     402: ifeq          663
     405: aload         6
     407: invokeinterface #72,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     412: checkcast     #34                 // class com/vladsch/flexmark/util/format/Table$TableRow
     415: astore        7
     417: iconst_0
     418: istore        8
     420: iconst_0
     421: istore        9
     423: aload         4
     425: iconst_0
     426: invokestatic  #49                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     429: putfield      #46                 // Field com/vladsch/flexmark/util/Ref.value:Ljava/lang/Object;
     432: aload         7
     434: getfield      #30                 // Field com/vladsch/flexmark/util/format/Table$TableRow.cells:Ljava/util/List;
     437: invokeinterface #70,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     442: astore        10
     444: aload         10
     446: invokeinterface #71,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     451: ifeq          657
     454: aload         10
     456: invokeinterface #72,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     461: checkcast     #67                 // class com/vladsch/flexmark/util/format/Table$TableCell
     464: astore        11
     466: aload_0
     467: getfield      #75                 // Field alignments:[Lcom/vladsch/flexmark/util/html/CellAlignment;
     470: iload         9
     472: aaload
     473: ifnull        494
     476: aload         11
     478: getfield      #24                 // Field com/vladsch/flexmark/util/format/Table$TableCell.columnSpan:I
     481: iconst_1
     482: if_icmpne     532
     485: aload_2
     486: iload         9
     488: invokevirtual #59                 // Method java/util/BitSet.get:(I)Z
     491: ifeq          532
     494: aload         11
     496: getfield      #82                 // Field com/vladsch/flexmark/util/format/Table$TableCell.alignment:Lcom/vladsch/flexmark/util/html/CellAlignment;
     499: getstatic     #43                 // Field com/vladsch/flexmark/util/html/CellAlignment.NONE:Lcom/vladsch/flexmark/util/html/CellAlignment;
     502: if_acmpeq     532
     505: aload_0
     506: getfield      #75                 // Field alignments:[Lcom/vladsch/flexmark/util/html/CellAlignment;
     509: iload         9
     511: aload         11
     513: getfield      #82                 // Field com/vladsch/flexmark/util/format/Table$TableCell.alignment:Lcom/vladsch/flexmark/util/html/CellAlignment;
     516: aastore
     517: aload         11
     519: getfield      #24                 // Field com/vladsch/flexmark/util/format/Table$TableCell.columnSpan:I
     522: iconst_1
     523: if_icmple     532
     526: aload_2
     527: iload         9
     529: invokevirtual #83                 // Method java/util/BitSet.set:(I)V
     532: aload_0
     533: aload         11
     535: getfield      #84                 // Field com/vladsch/flexmark/util/format/Table$TableCell.text:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     538: iconst_0
     539: aconst_null
     540: aload         4
     542: invokevirtual #85                 // Method cellText:(Ljava/lang/CharSequence;ILcom/vladsch/flexmark/util/html/CellAlignment;Lcom/vladsch/flexmark/util/Ref;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     545: astore        12
     547: aload_0
     548: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
     551: getfield      #39                 // Field com/vladsch/flexmark/util/format/TableFormatOptions.charWidthProvider:Lcom/vladsch/flexmark/util/mappers/CharWidthProvider;
     554: aload         12
     556: invokeinterface #40,  2           // InterfaceMethod com/vladsch/flexmark/util/mappers/CharWidthProvider.charWidth:(Ljava/lang/CharSequence;)I
     561: aload_0
     562: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
     565: getfield      #86                 // Field com/vladsch/flexmark/util/format/TableFormatOptions.spacePad:I
     568: iadd
     569: aload_0
     570: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
     573: getfield      #87                 // Field com/vladsch/flexmark/util/format/TableFormatOptions.pipeWidth:I
     576: aload         11
     578: getfield      #24                 // Field com/vladsch/flexmark/util/format/Table$TableCell.columnSpan:I
     581: imul
     582: iadd
     583: istore        13
     585: aload         11
     587: getfield      #24                 // Field com/vladsch/flexmark/util/format/Table$TableCell.columnSpan:I
     590: iconst_1
     591: if_icmple     620
     594: aload_3
     595: new           #88                 // class com/vladsch/flexmark/util/format/Table$ColumnSpan
     598: dup
     599: iload         8
     601: aload         11
     603: getfield      #24                 // Field com/vladsch/flexmark/util/format/Table$TableCell.columnSpan:I
     606: iload         13
     608: invokespecial #89                 // Method com/vladsch/flexmark/util/format/Table$ColumnSpan."<init>":(III)V
     611: invokeinterface #90,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     616: pop
     617: goto          641
     620: aload_0
     621: getfield      #58                 // Field columnWidths:[I
     624: iload         9
     626: iaload
     627: iload         13
     629: if_icmpge     641
     632: aload_0
     633: getfield      #58                 // Field columnWidths:[I
     636: iload         9
     638: iload         13
     640: iastore
     641: iinc          8, 1
     644: iload         9
     646: aload         11
     648: getfield      #24                 // Field com/vladsch/flexmark/util/format/Table$TableCell.columnSpan:I
     651: iadd
     652: istore        9
     654: goto          444
     657: iinc          5, 1
     660: goto          395
     663: aload_0
     664: getfield      #9                  // Field body:Lcom/vladsch/flexmark/util/format/Table$TableSection;
     667: getfield      #21                 // Field com/vladsch/flexmark/util/format/Table$TableSection.rows:Ljava/util/List;
     670: invokeinterface #22,  1           // InterfaceMethod java/util/List.size:()I
     675: ifle          897
     678: iconst_0
     679: istore        5
     681: aload         4
     683: iconst_0
     684: invokestatic  #49                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     687: putfield      #46                 // Field com/vladsch/flexmark/util/Ref.value:Ljava/lang/Object;
     690: aload_0
     691: getfield      #9                  // Field body:Lcom/vladsch/flexmark/util/format/Table$TableSection;
     694: getfield      #21                 // Field com/vladsch/flexmark/util/format/Table$TableSection.rows:Ljava/util/List;
     697: invokeinterface #70,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     702: astore        6
     704: aload         6
     706: invokeinterface #71,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     711: ifeq          897
     714: aload         6
     716: invokeinterface #72,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     721: checkcast     #34                 // class com/vladsch/flexmark/util/format/Table$TableRow
     724: astore        7
     726: iconst_0
     727: istore        8
     729: iconst_0
     730: istore        9
     732: aload         7
     734: getfield      #30                 // Field com/vladsch/flexmark/util/format/Table$TableRow.cells:Ljava/util/List;
     737: invokeinterface #70,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     742: astore        10
     744: aload         10
     746: invokeinterface #71,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     751: ifeq          891
     754: aload         10
     756: invokeinterface #72,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     761: checkcast     #67                 // class com/vladsch/flexmark/util/format/Table$TableCell
     764: astore        11
     766: aload_0
     767: aload         11
     769: getfield      #84                 // Field com/vladsch/flexmark/util/format/Table$TableCell.text:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     772: iconst_0
     773: aconst_null
     774: aload         4
     776: invokevirtual #85                 // Method cellText:(Ljava/lang/CharSequence;ILcom/vladsch/flexmark/util/html/CellAlignment;Lcom/vladsch/flexmark/util/Ref;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     779: astore        12
     781: aload_0
     782: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
     785: getfield      #39                 // Field com/vladsch/flexmark/util/format/TableFormatOptions.charWidthProvider:Lcom/vladsch/flexmark/util/mappers/CharWidthProvider;
     788: aload         12
     790: invokeinterface #40,  2           // InterfaceMethod com/vladsch/flexmark/util/mappers/CharWidthProvider.charWidth:(Ljava/lang/CharSequence;)I
     795: aload_0
     796: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
     799: getfield      #86                 // Field com/vladsch/flexmark/util/format/TableFormatOptions.spacePad:I
     802: iadd
     803: aload_0
     804: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
     807: getfield      #87                 // Field com/vladsch/flexmark/util/format/TableFormatOptions.pipeWidth:I
     810: aload         11
     812: getfield      #24                 // Field com/vladsch/flexmark/util/format/Table$TableCell.columnSpan:I
     815: imul
     816: iadd
     817: istore        13
     819: aload         11
     821: getfield      #24                 // Field com/vladsch/flexmark/util/format/Table$TableCell.columnSpan:I
     824: iconst_1
     825: if_icmple     854
     828: aload_3
     829: new           #88                 // class com/vladsch/flexmark/util/format/Table$ColumnSpan
     832: dup
     833: iload         9
     835: aload         11
     837: getfield      #24                 // Field com/vladsch/flexmark/util/format/Table$TableCell.columnSpan:I
     840: iload         13
     842: invokespecial #89                 // Method com/vladsch/flexmark/util/format/Table$ColumnSpan."<init>":(III)V
     845: invokeinterface #90,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     850: pop
     851: goto          875
     854: aload_0
     855: getfield      #58                 // Field columnWidths:[I
     858: iload         9
     860: iaload
     861: iload         13
     863: if_icmpge     875
     866: aload_0
     867: getfield      #58                 // Field columnWidths:[I
     870: iload         9
     872: iload         13
     874: iastore
     875: iinc          8, 1
     878: iload         9
     880: aload         11
     882: getfield      #24                 // Field com/vladsch/flexmark/util/format/Table$TableCell.columnSpan:I
     885: iadd
     886: istore        9
     888: goto          744
     891: iinc          5, 1
     894: goto          704
     897: aload_0
     898: getfield      #8                  // Field separator:Lcom/vladsch/flexmark/util/format/Table$TableSection;
     901: getfield      #21                 // Field com/vladsch/flexmark/util/format/Table$TableSection.rows:Ljava/util/List;
     904: invokeinterface #22,  1           // InterfaceMethod java/util/List.size:()I
     909: ifeq          942
     912: aload_0
     913: getfield      #9                  // Field body:Lcom/vladsch/flexmark/util/format/Table$TableSection;
     916: getfield      #21                 // Field com/vladsch/flexmark/util/format/Table$TableSection.rows:Ljava/util/List;
     919: invokeinterface #22,  1           // InterfaceMethod java/util/List.size:()I
     924: ifgt          942
     927: aload_0
     928: getfield      #7                  // Field heading:Lcom/vladsch/flexmark/util/format/Table$TableSection;
     931: getfield      #21                 // Field com/vladsch/flexmark/util/format/Table$TableSection.rows:Ljava/util/List;
     934: invokeinterface #22,  1           // InterfaceMethod java/util/List.size:()I
     939: ifle          1136
     942: iconst_0
     943: istore        5
     945: aload         4
     947: iconst_0
     948: invokestatic  #49                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     951: putfield      #46                 // Field com/vladsch/flexmark/util/Ref.value:Ljava/lang/Object;
     954: aload_0
     955: getfield      #75                 // Field alignments:[Lcom/vladsch/flexmark/util/html/CellAlignment;
     958: astore        6
     960: aload         6
     962: arraylength
     963: istore        7
     965: iconst_0
     966: istore        8
     968: iload         8
     970: iload         7
     972: if_icmpge     1133
     975: aload         6
     977: iload         8
     979: aaload
     980: astore        9
     982: aload_0
     983: aload         9
     985: invokespecial #91                 // Method adjustCellAlignment:(Lcom/vladsch/flexmark/util/html/CellAlignment;)Lcom/vladsch/flexmark/util/html/CellAlignment;
     988: astore        10
     990: aload         10
     992: getstatic     #44                 // Field com/vladsch/flexmark/util/html/CellAlignment.LEFT:Lcom/vladsch/flexmark/util/html/CellAlignment;
     995: if_acmpeq     1006
     998: aload         10
    1000: getstatic     #92                 // Field com/vladsch/flexmark/util/html/CellAlignment.RIGHT:Lcom/vladsch/flexmark/util/html/CellAlignment;
    1003: if_acmpne     1010
    1006: iconst_1
    1007: goto          1023
    1010: aload         10
    1012: getstatic     #93                 // Field com/vladsch/flexmark/util/html/CellAlignment.CENTER:Lcom/vladsch/flexmark/util/html/CellAlignment;
    1015: if_acmpne     1022
    1018: iconst_2
    1019: goto          1023
    1022: iconst_0
    1023: istore        11
    1025: iconst_0
    1026: istore        12
    1028: iload         12
    1030: iconst_2
    1031: newarray       int
    1033: dup
    1034: iconst_0
    1035: aload_0
    1036: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
    1039: getfield      #94                 // Field com/vladsch/flexmark/util/format/TableFormatOptions.minSeparatorColumnWidth:I
    1042: iload         11
    1044: isub
    1045: iastore
    1046: dup
    1047: iconst_1
    1048: aload_0
    1049: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
    1052: getfield      #95                 // Field com/vladsch/flexmark/util/format/TableFormatOptions.minSeparatorDashes:I
    1055: iastore
    1056: invokestatic  #96                 // Method com/vladsch/flexmark/util/Utils.minLimit:(I[I)I
    1059: istore        13
    1061: iload         12
    1063: iload         13
    1065: if_icmpge     1072
    1068: iload         13
    1070: istore        12
    1072: iload         12
    1074: aload_0
    1075: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
    1078: getfield      #97                 // Field com/vladsch/flexmark/util/format/TableFormatOptions.dashWidth:I
    1081: imul
    1082: iload         11
    1084: aload_0
    1085: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
    1088: getfield      #98                 // Field com/vladsch/flexmark/util/format/TableFormatOptions.colonWidth:I
    1091: imul
    1092: iadd
    1093: aload_0
    1094: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
    1097: getfield      #87                 // Field com/vladsch/flexmark/util/format/TableFormatOptions.pipeWidth:I
    1100: iadd
    1101: istore        14
    1103: aload_0
    1104: getfield      #58                 // Field columnWidths:[I
    1107: iload         5
    1109: iaload
    1110: iload         14
    1112: if_icmpge     1124
    1115: aload_0
    1116: getfield      #58                 // Field columnWidths:[I
    1119: iload         5
    1121: iload         14
    1123: iastore
    1124: iinc          5, 1
    1127: iinc          8, 1
    1130: goto          968
    1133: goto          1363
    1136: iconst_0
    1137: istore        5
    1139: aload         4
    1141: iconst_0
    1142: invokestatic  #49                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
    1145: putfield      #46                 // Field com/vladsch/flexmark/util/Ref.value:Ljava/lang/Object;
    1148: aload_0
    1149: getfield      #8                  // Field separator:Lcom/vladsch/flexmark/util/format/Table$TableSection;
    1152: getfield      #21                 // Field com/vladsch/flexmark/util/format/Table$TableSection.rows:Ljava/util/List;
    1155: iconst_0
    1156: invokeinterface #31,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
    1161: checkcast     #34                 // class com/vladsch/flexmark/util/format/Table$TableRow
    1164: getfield      #30                 // Field com/vladsch/flexmark/util/format/Table$TableRow.cells:Ljava/util/List;
    1167: invokeinterface #70,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
    1172: astore        6
    1174: aload         6
    1176: invokeinterface #71,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
    1181: ifeq          1363
    1184: aload         6
    1186: invokeinterface #72,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
    1191: checkcast     #67                 // class com/vladsch/flexmark/util/format/Table$TableCell
    1194: astore        7
    1196: aload_0
    1197: aload         7
    1199: getfield      #82                 // Field com/vladsch/flexmark/util/format/Table$TableCell.alignment:Lcom/vladsch/flexmark/util/html/CellAlignment;
    1202: invokespecial #91                 // Method adjustCellAlignment:(Lcom/vladsch/flexmark/util/html/CellAlignment;)Lcom/vladsch/flexmark/util/html/CellAlignment;
    1205: astore        8
    1207: aload         8
    1209: getstatic     #44                 // Field com/vladsch/flexmark/util/html/CellAlignment.LEFT:Lcom/vladsch/flexmark/util/html/CellAlignment;
    1212: if_acmpeq     1223
    1215: aload         8
    1217: getstatic     #92                 // Field com/vladsch/flexmark/util/html/CellAlignment.RIGHT:Lcom/vladsch/flexmark/util/html/CellAlignment;
    1220: if_acmpne     1227
    1223: iconst_1
    1224: goto          1240
    1227: aload         8
    1229: getstatic     #93                 // Field com/vladsch/flexmark/util/html/CellAlignment.CENTER:Lcom/vladsch/flexmark/util/html/CellAlignment;
    1232: if_acmpne     1239
    1235: iconst_2
    1236: goto          1240
    1239: iconst_0
    1240: istore        9
    1242: aload         7
    1244: getfield      #84                 // Field com/vladsch/flexmark/util/format/Table$TableCell.text:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1247: ldc           #99                 // String :
    1249: invokeinterface #100,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.trim:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1254: invokeinterface #101,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
    1259: istore        10
    1261: iload         10
    1263: iconst_2
    1264: newarray       int
    1266: dup
    1267: iconst_0
    1268: aload_0
    1269: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
    1272: getfield      #94                 // Field com/vladsch/flexmark/util/format/TableFormatOptions.minSeparatorColumnWidth:I
    1275: iload         9
    1277: isub
    1278: iastore
    1279: dup
    1280: iconst_1
    1281: aload_0
    1282: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
    1285: getfield      #95                 // Field com/vladsch/flexmark/util/format/TableFormatOptions.minSeparatorDashes:I
    1288: iastore
    1289: invokestatic  #96                 // Method com/vladsch/flexmark/util/Utils.minLimit:(I[I)I
    1292: istore        11
    1294: iload         10
    1296: iload         11
    1298: if_icmpge     1305
    1301: iload         11
    1303: istore        10
    1305: iload         10
    1307: aload_0
    1308: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
    1311: getfield      #97                 // Field com/vladsch/flexmark/util/format/TableFormatOptions.dashWidth:I
    1314: imul
    1315: iload         9
    1317: aload_0
    1318: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
    1321: getfield      #98                 // Field com/vladsch/flexmark/util/format/TableFormatOptions.colonWidth:I
    1324: imul
    1325: iadd
    1326: aload_0
    1327: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
    1330: getfield      #87                 // Field com/vladsch/flexmark/util/format/TableFormatOptions.pipeWidth:I
    1333: iadd
    1334: istore        12
    1336: aload_0
    1337: getfield      #58                 // Field columnWidths:[I
    1340: iload         5
    1342: iaload
    1343: iload         12
    1345: if_icmpge     1357
    1348: aload_0
    1349: getfield      #58                 // Field columnWidths:[I
    1352: iload         5
    1354: iload         12
    1356: iastore
    1357: iinc          5, 1
    1360: goto          1174
    1363: aload_3
    1364: invokeinterface #102,  1          // InterfaceMethod java/util/List.isEmpty:()Z
    1369: ifne          1862
    1372: iload_1
    1373: newarray       int
    1375: astore        5
    1377: new           #76                 // class java/util/BitSet
    1380: dup
    1381: iload_1
    1382: invokespecial #77                 // Method java/util/BitSet."<init>":(I)V
    1385: astore        6
    1387: new           #78                 // class java/util/ArrayList
    1390: dup
    1391: aload_3
    1392: invokeinterface #22,  1           // InterfaceMethod java/util/List.size:()I
    1397: invokespecial #103                // Method java/util/ArrayList."<init>":(I)V
    1400: astore        7
    1402: aload_3
    1403: invokeinterface #70,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
    1408: astore        8
    1410: aload         8
    1412: invokeinterface #71,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
    1417: ifeq          1492
    1420: aload         8
    1422: invokeinterface #72,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
    1427: checkcast     #88                 // class com/vladsch/flexmark/util/format/Table$ColumnSpan
    1430: astore        9
    1432: aload_0
    1433: aload         9
    1435: getfield      #104                // Field com/vladsch/flexmark/util/format/Table$ColumnSpan.startColumn:I
    1438: aload         9
    1440: getfield      #105                // Field com/vladsch/flexmark/util/format/Table$ColumnSpan.columnSpan:I
    1443: invokevirtual #106                // Method spanWidth:(II)I
    1446: istore        10
    1448: iload         10
    1450: aload         9
    1452: getfield      #107                // Field com/vladsch/flexmark/util/format/Table$ColumnSpan.width:I
    1455: if_icmpge     1489
    1458: aload         6
    1460: aload         9
    1462: getfield      #104                // Field com/vladsch/flexmark/util/format/Table$ColumnSpan.startColumn:I
    1465: aload         9
    1467: getfield      #104                // Field com/vladsch/flexmark/util/format/Table$ColumnSpan.startColumn:I
    1470: aload         9
    1472: getfield      #105                // Field com/vladsch/flexmark/util/format/Table$ColumnSpan.columnSpan:I
    1475: iadd
    1476: invokevirtual #108                // Method java/util/BitSet.set:(II)V
    1479: aload         7
    1481: aload         9
    1483: invokeinterface #90,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
    1488: pop
    1489: goto          1410
    1492: aload         7
    1494: invokeinterface #102,  1          // InterfaceMethod java/util/List.isEmpty:()Z
    1499: ifne          1862
    1502: aload         7
    1504: astore_3
    1505: new           #76                 // class java/util/BitSet
    1508: dup
    1509: iload_1
    1510: invokespecial #77                 // Method java/util/BitSet."<init>":(I)V
    1513: astore        8
    1515: aload         7
    1517: invokeinterface #109,  1          // InterfaceMethod java/util/List.clear:()V
    1522: aload_3
    1523: invokeinterface #70,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
    1528: astore        9
    1530: aload         9
    1532: invokeinterface #71,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
    1537: ifeq          1630
    1540: aload         9
    1542: invokeinterface #72,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
    1547: checkcast     #88                 // class com/vladsch/flexmark/util/format/Table$ColumnSpan
    1550: astore        10
    1552: aload_0
    1553: aload         10
    1555: getfield      #104                // Field com/vladsch/flexmark/util/format/Table$ColumnSpan.startColumn:I
    1558: aload         10
    1560: getfield      #105                // Field com/vladsch/flexmark/util/format/Table$ColumnSpan.columnSpan:I
    1563: invokevirtual #106                // Method spanWidth:(II)I
    1566: istore        11
    1568: aload_0
    1569: aload         6
    1571: aload         10
    1573: getfield      #104                // Field com/vladsch/flexmark/util/format/Table$ColumnSpan.startColumn:I
    1576: aload         10
    1578: getfield      #105                // Field com/vladsch/flexmark/util/format/Table$ColumnSpan.columnSpan:I
    1581: invokevirtual #110                // Method spanFixedWidth:(Ljava/util/BitSet;II)I
    1584: istore        12
    1586: iload         11
    1588: iload         12
    1590: if_icmpgt     1617
    1593: aload         8
    1595: aload         10
    1597: getfield      #104                // Field com/vladsch/flexmark/util/format/Table$ColumnSpan.startColumn:I
    1600: aload         10
    1602: getfield      #104                // Field com/vladsch/flexmark/util/format/Table$ColumnSpan.startColumn:I
    1605: aload         10
    1607: getfield      #105                // Field com/vladsch/flexmark/util/format/Table$ColumnSpan.columnSpan:I
    1610: iadd
    1611: invokevirtual #108                // Method java/util/BitSet.set:(II)V
    1614: goto          1627
    1617: aload         7
    1619: aload         10
    1621: invokeinterface #90,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
    1626: pop
    1627: goto          1530
    1630: aload         6
    1632: aload         8
    1634: invokevirtual #111                // Method java/util/BitSet.andNot:(Ljava/util/BitSet;)V
    1637: aload         7
    1639: astore_3
    1640: aload         7
    1642: invokeinterface #109,  1          // InterfaceMethod java/util/List.clear:()V
    1647: aload_3
    1648: invokeinterface #70,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
    1653: astore        9
    1655: aload         9
    1657: invokeinterface #71,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
    1662: ifeq          1859
    1665: aload         9
    1667: invokeinterface #72,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
    1672: checkcast     #88                 // class com/vladsch/flexmark/util/format/Table$ColumnSpan
    1675: astore        10
    1677: aload_0
    1678: aload         10
    1680: getfield      #104                // Field com/vladsch/flexmark/util/format/Table$ColumnSpan.startColumn:I
    1683: aload         10
    1685: getfield      #105                // Field com/vladsch/flexmark/util/format/Table$ColumnSpan.columnSpan:I
    1688: invokevirtual #106                // Method spanWidth:(II)I
    1691: istore        11
    1693: aload_0
    1694: aload         6
    1696: aload         10
    1698: getfield      #104                // Field com/vladsch/flexmark/util/format/Table$ColumnSpan.startColumn:I
    1701: aload         10
    1703: getfield      #105                // Field com/vladsch/flexmark/util/format/Table$ColumnSpan.columnSpan:I
    1706: invokevirtual #110                // Method spanFixedWidth:(Ljava/util/BitSet;II)I
    1709: istore        12
    1711: iload         11
    1713: iload         12
    1715: if_icmple     1856
    1718: iload         11
    1720: iload         12
    1722: isub
    1723: istore        13
    1725: aload         6
    1727: aload         10
    1729: getfield      #104                // Field com/vladsch/flexmark/util/format/Table$ColumnSpan.startColumn:I
    1732: aload         10
    1734: getfield      #104                // Field com/vladsch/flexmark/util/format/Table$ColumnSpan.startColumn:I
    1737: aload         10
    1739: getfield      #105                // Field com/vladsch/flexmark/util/format/Table$ColumnSpan.columnSpan:I
    1742: iadd
    1743: invokevirtual #112                // Method java/util/BitSet.get:(II)Ljava/util/BitSet;
    1746: invokevirtual #113                // Method java/util/BitSet.cardinality:()I
    1749: istore        14
    1751: iload         13
    1753: iload         14
    1755: idiv
    1756: istore        15
    1758: iload         13
    1760: iload         15
    1762: iload         14
    1764: imul
    1765: isub
    1766: istore        16
    1768: iconst_0
    1769: istore        17
    1771: iload         17
    1773: aload         10
    1775: getfield      #105                // Field com/vladsch/flexmark/util/format/Table$ColumnSpan.columnSpan:I
    1778: if_icmpge     1846
    1781: aload         6
    1783: aload         10
    1785: getfield      #104                // Field com/vladsch/flexmark/util/format/Table$ColumnSpan.startColumn:I
    1788: iload         17
    1790: iadd
    1791: invokevirtual #59                 // Method java/util/BitSet.get:(I)Z
    1794: ifeq          1840
    1797: aload_0
    1798: getfield      #58                 // Field columnWidths:[I
    1801: aload         10
    1803: getfield      #104                // Field com/vladsch/flexmark/util/format/Table$ColumnSpan.startColumn:I
    1806: iload         17
    1808: iadd
    1809: dup2
    1810: iaload
    1811: iload         15
    1813: iadd
    1814: iastore
    1815: iload         16
    1817: ifle          1840
    1820: aload_0
    1821: getfield      #58                 // Field columnWidths:[I
    1824: aload         10
    1826: getfield      #104                // Field com/vladsch/flexmark/util/format/Table$ColumnSpan.startColumn:I
    1829: iload         17
    1831: iadd
    1832: dup2
    1833: iaload
    1834: iconst_1
    1835: iadd
    1836: iastore
    1837: iinc          16, -1
    1840: iinc          17, 1
    1843: goto          1771
    1846: aload         7
    1848: aload         10
    1850: invokeinterface #90,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
    1855: pop
    1856: goto          1655
    1859: goto          1492
    1862: return

  public void appendTable(com.vladsch.flexmark.util.html.FormattingAppendable);
    Code:
       0: aload_1
       1: invokeinterface #114,  1          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.getOptions:()I
       6: istore_2
       7: aload_1
       8: iload_2
       9: bipush        -3
      11: iand
      12: invokeinterface #116,  2          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.setOptions:(I)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      17: pop
      18: new           #80                 // class com/vladsch/flexmark/util/Ref
      21: dup
      22: iconst_0
      23: invokestatic  #49                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      26: invokespecial #81                 // Method com/vladsch/flexmark/util/Ref."<init>":(Ljava/lang/Object;)V
      29: astore_3
      30: aload_0
      31: getfield      #7                  // Field heading:Lcom/vladsch/flexmark/util/format/Table$TableSection;
      34: getfield      #21                 // Field com/vladsch/flexmark/util/format/Table$TableSection.rows:Ljava/util/List;
      37: invokeinterface #22,  1           // InterfaceMethod java/util/List.size:()I
      42: ifle          432
      45: aload_0
      46: getfield      #7                  // Field heading:Lcom/vladsch/flexmark/util/format/Table$TableSection;
      49: getfield      #21                 // Field com/vladsch/flexmark/util/format/Table$TableSection.rows:Ljava/util/List;
      52: invokeinterface #70,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      57: astore        4
      59: aload         4
      61: invokeinterface #71,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      66: ifeq          432
      69: aload         4
      71: invokeinterface #72,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      76: checkcast     #34                 // class com/vladsch/flexmark/util/format/Table$TableRow
      79: astore        5
      81: iconst_0
      82: istore        6
      84: iconst_0
      85: istore        7
      87: aload_3
      88: iconst_0
      89: invokestatic  #49                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      92: putfield      #46                 // Field com/vladsch/flexmark/util/Ref.value:Ljava/lang/Object;
      95: aload         5
      97: getfield      #30                 // Field com/vladsch/flexmark/util/format/Table$TableRow.cells:Ljava/util/List;
     100: invokeinterface #70,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     105: astore        8
     107: aload         8
     109: invokeinterface #71,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     114: ifeq          417
     117: aload         8
     119: invokeinterface #72,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     124: checkcast     #67                 // class com/vladsch/flexmark/util/format/Table$TableCell
     127: astore        9
     129: iload         6
     131: ifne          175
     134: aload_0
     135: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
     138: getfield      #117                // Field com/vladsch/flexmark/util/format/TableFormatOptions.leadTrailPipes:Z
     141: ifeq          194
     144: aload_1
     145: bipush        124
     147: invokeinterface #118,  2          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(C)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     152: pop
     153: aload_0
     154: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
     157: getfield      #119                // Field com/vladsch/flexmark/util/format/TableFormatOptions.spaceAroundPipes:Z
     160: ifeq          194
     163: aload_1
     164: bipush        32
     166: invokeinterface #118,  2          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(C)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     171: pop
     172: goto          194
     175: aload_0
     176: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
     179: getfield      #119                // Field com/vladsch/flexmark/util/format/TableFormatOptions.spaceAroundPipes:Z
     182: ifeq          194
     185: aload_1
     186: bipush        32
     188: invokeinterface #118,  2          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(C)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     193: pop
     194: aload         9
     196: getfield      #82                 // Field com/vladsch/flexmark/util/format/Table$TableCell.alignment:Lcom/vladsch/flexmark/util/html/CellAlignment;
     199: getstatic     #43                 // Field com/vladsch/flexmark/util/html/CellAlignment.NONE:Lcom/vladsch/flexmark/util/html/CellAlignment;
     202: if_acmpeq     213
     205: aload         9
     207: getfield      #82                 // Field com/vladsch/flexmark/util/format/Table$TableCell.alignment:Lcom/vladsch/flexmark/util/html/CellAlignment;
     210: goto          220
     213: aload_0
     214: getfield      #75                 // Field alignments:[Lcom/vladsch/flexmark/util/html/CellAlignment;
     217: iload         7
     219: aaload
     220: astore        10
     222: aload_1
     223: aload_0
     224: aload         9
     226: getfield      #84                 // Field com/vladsch/flexmark/util/format/Table$TableCell.text:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     229: aload_0
     230: iload         7
     232: aload         9
     234: getfield      #24                 // Field com/vladsch/flexmark/util/format/Table$TableCell.columnSpan:I
     237: invokevirtual #106                // Method spanWidth:(II)I
     240: aload_0
     241: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
     244: getfield      #86                 // Field com/vladsch/flexmark/util/format/TableFormatOptions.spacePad:I
     247: isub
     248: aload_0
     249: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
     252: getfield      #87                 // Field com/vladsch/flexmark/util/format/TableFormatOptions.pipeWidth:I
     255: aload         9
     257: getfield      #24                 // Field com/vladsch/flexmark/util/format/Table$TableCell.columnSpan:I
     260: imul
     261: isub
     262: aload         10
     264: aload_3
     265: invokevirtual #85                 // Method cellText:(Ljava/lang/CharSequence;ILcom/vladsch/flexmark/util/html/CellAlignment;Lcom/vladsch/flexmark/util/Ref;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     268: invokeinterface #120,  2          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     273: pop
     274: iinc          6, 1
     277: iload         7
     279: aload         9
     281: getfield      #24                 // Field com/vladsch/flexmark/util/format/Table$TableCell.columnSpan:I
     284: iadd
     285: istore        7
     287: iload         6
     289: aload_0
     290: getfield      #75                 // Field alignments:[Lcom/vladsch/flexmark/util/html/CellAlignment;
     293: arraylength
     294: if_icmpge     333
     297: aload_0
     298: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
     301: getfield      #119                // Field com/vladsch/flexmark/util/format/TableFormatOptions.spaceAroundPipes:Z
     304: ifeq          316
     307: aload_1
     308: bipush        32
     310: invokeinterface #118,  2          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(C)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     315: pop
     316: aload_1
     317: bipush        124
     319: aload         9
     321: getfield      #24                 // Field com/vladsch/flexmark/util/format/Table$TableCell.columnSpan:I
     324: invokeinterface #121,  3          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.repeat:(CI)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     329: pop
     330: goto          414
     333: aload_0
     334: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
     337: getfield      #117                // Field com/vladsch/flexmark/util/format/TableFormatOptions.leadTrailPipes:Z
     340: ifeq          379
     343: aload_0
     344: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
     347: getfield      #119                // Field com/vladsch/flexmark/util/format/TableFormatOptions.spaceAroundPipes:Z
     350: ifeq          362
     353: aload_1
     354: bipush        32
     356: invokeinterface #118,  2          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(C)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     361: pop
     362: aload_1
     363: bipush        124
     365: aload         9
     367: getfield      #24                 // Field com/vladsch/flexmark/util/format/Table$TableCell.columnSpan:I
     370: invokeinterface #121,  3          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.repeat:(CI)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     375: pop
     376: goto          414
     379: aload_0
     380: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
     383: getfield      #119                // Field com/vladsch/flexmark/util/format/TableFormatOptions.spaceAroundPipes:Z
     386: ifeq          398
     389: aload_1
     390: bipush        32
     392: invokeinterface #118,  2          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(C)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     397: pop
     398: aload_1
     399: bipush        124
     401: aload         9
     403: getfield      #24                 // Field com/vladsch/flexmark/util/format/Table$TableCell.columnSpan:I
     406: iconst_1
     407: isub
     408: invokeinterface #121,  3          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.repeat:(CI)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     413: pop
     414: goto          107
     417: iload         6
     419: ifle          429
     422: aload_1
     423: invokeinterface #122,  1          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.line:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     428: pop
     429: goto          59
     432: iconst_0
     433: istore        4
     435: aload_3
     436: iconst_0
     437: invokestatic  #49                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     440: putfield      #46                 // Field com/vladsch/flexmark/util/Ref.value:Ljava/lang/Object;
     443: aload_0
     444: getfield      #75                 // Field alignments:[Lcom/vladsch/flexmark/util/html/CellAlignment;
     447: astore        5
     449: aload         5
     451: arraylength
     452: istore        6
     454: iconst_0
     455: istore        7
     457: iload         7
     459: iload         6
     461: if_icmpge     774
     464: aload         5
     466: iload         7
     468: aaload
     469: astore        8
     471: aload_0
     472: aload         8
     474: invokespecial #91                 // Method adjustCellAlignment:(Lcom/vladsch/flexmark/util/html/CellAlignment;)Lcom/vladsch/flexmark/util/html/CellAlignment;
     477: astore        9
     479: aload         9
     481: getstatic     #44                 // Field com/vladsch/flexmark/util/html/CellAlignment.LEFT:Lcom/vladsch/flexmark/util/html/CellAlignment;
     484: if_acmpeq     495
     487: aload         9
     489: getstatic     #92                 // Field com/vladsch/flexmark/util/html/CellAlignment.RIGHT:Lcom/vladsch/flexmark/util/html/CellAlignment;
     492: if_acmpne     499
     495: iconst_1
     496: goto          512
     499: aload         9
     501: getstatic     #93                 // Field com/vladsch/flexmark/util/html/CellAlignment.CENTER:Lcom/vladsch/flexmark/util/html/CellAlignment;
     504: if_acmpne     511
     507: iconst_2
     508: goto          512
     511: iconst_0
     512: istore        10
     514: aload_0
     515: getfield      #58                 // Field columnWidths:[I
     518: iload         4
     520: iaload
     521: iload         10
     523: aload_0
     524: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
     527: getfield      #98                 // Field com/vladsch/flexmark/util/format/TableFormatOptions.colonWidth:I
     530: imul
     531: isub
     532: aload_0
     533: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
     536: getfield      #87                 // Field com/vladsch/flexmark/util/format/TableFormatOptions.pipeWidth:I
     539: isub
     540: aload_0
     541: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
     544: getfield      #97                 // Field com/vladsch/flexmark/util/format/TableFormatOptions.dashWidth:I
     547: idiv
     548: istore        11
     550: iload         11
     552: iconst_2
     553: newarray       int
     555: dup
     556: iconst_0
     557: aload_0
     558: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
     561: getfield      #94                 // Field com/vladsch/flexmark/util/format/TableFormatOptions.minSeparatorColumnWidth:I
     564: iload         10
     566: isub
     567: iastore
     568: dup
     569: iconst_1
     570: aload_0
     571: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
     574: getfield      #95                 // Field com/vladsch/flexmark/util/format/TableFormatOptions.minSeparatorDashes:I
     577: iastore
     578: invokestatic  #96                 // Method com/vladsch/flexmark/util/Utils.minLimit:(I[I)I
     581: istore        12
     583: iload         11
     585: iload         12
     587: if_icmpge     594
     590: iload         12
     592: istore        11
     594: aload_3
     595: getfield      #46                 // Field com/vladsch/flexmark/util/Ref.value:Ljava/lang/Object;
     598: checkcast     #47                 // class java/lang/Integer
     601: invokevirtual #48                 // Method java/lang/Integer.intValue:()I
     604: iconst_2
     605: imul
     606: aload_0
     607: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
     610: getfield      #97                 // Field com/vladsch/flexmark/util/format/TableFormatOptions.dashWidth:I
     613: if_icmplt     651
     616: iinc          11, 1
     619: aload_3
     620: astore        13
     622: aload         13
     624: aload         13
     626: getfield      #46                 // Field com/vladsch/flexmark/util/Ref.value:Ljava/lang/Object;
     629: checkcast     #47                 // class java/lang/Integer
     632: invokevirtual #48                 // Method java/lang/Integer.intValue:()I
     635: aload_0
     636: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
     639: getfield      #97                 // Field com/vladsch/flexmark/util/format/TableFormatOptions.dashWidth:I
     642: isub
     643: invokestatic  #49                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     646: dup_x1
     647: putfield      #46                 // Field com/vladsch/flexmark/util/Ref.value:Ljava/lang/Object;
     650: pop
     651: aload_0
     652: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
     655: getfield      #117                // Field com/vladsch/flexmark/util/format/TableFormatOptions.leadTrailPipes:Z
     658: ifeq          675
     661: iload         4
     663: ifne          675
     666: aload_1
     667: bipush        124
     669: invokeinterface #118,  2          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(C)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     674: pop
     675: aload         9
     677: getstatic     #44                 // Field com/vladsch/flexmark/util/html/CellAlignment.LEFT:Lcom/vladsch/flexmark/util/html/CellAlignment;
     680: if_acmpeq     691
     683: aload         9
     685: getstatic     #93                 // Field com/vladsch/flexmark/util/html/CellAlignment.CENTER:Lcom/vladsch/flexmark/util/html/CellAlignment;
     688: if_acmpne     700
     691: aload_1
     692: bipush        58
     694: invokeinterface #118,  2          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(C)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     699: pop
     700: aload_1
     701: bipush        45
     703: iload         11
     705: invokeinterface #121,  3          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.repeat:(CI)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     710: pop
     711: aload         9
     713: getstatic     #92                 // Field com/vladsch/flexmark/util/html/CellAlignment.RIGHT:Lcom/vladsch/flexmark/util/html/CellAlignment;
     716: if_acmpeq     727
     719: aload         9
     721: getstatic     #93                 // Field com/vladsch/flexmark/util/html/CellAlignment.CENTER:Lcom/vladsch/flexmark/util/html/CellAlignment;
     724: if_acmpne     736
     727: aload_1
     728: bipush        58
     730: invokeinterface #118,  2          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(C)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     735: pop
     736: iinc          4, 1
     739: aload_0
     740: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
     743: getfield      #117                // Field com/vladsch/flexmark/util/format/TableFormatOptions.leadTrailPipes:Z
     746: ifne          759
     749: iload         4
     751: aload_0
     752: getfield      #75                 // Field alignments:[Lcom/vladsch/flexmark/util/html/CellAlignment;
     755: arraylength
     756: if_icmpge     768
     759: aload_1
     760: bipush        124
     762: invokeinterface #118,  2          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(C)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     767: pop
     768: iinc          7, 1
     771: goto          457
     774: aload_1
     775: invokeinterface #122,  1          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.line:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     780: pop
     781: aload_0
     782: getfield      #9                  // Field body:Lcom/vladsch/flexmark/util/format/Table$TableSection;
     785: getfield      #21                 // Field com/vladsch/flexmark/util/format/Table$TableSection.rows:Ljava/util/List;
     788: invokeinterface #22,  1           // InterfaceMethod java/util/List.size:()I
     793: ifle          1160
     796: aload_0
     797: getfield      #9                  // Field body:Lcom/vladsch/flexmark/util/format/Table$TableSection;
     800: getfield      #21                 // Field com/vladsch/flexmark/util/format/Table$TableSection.rows:Ljava/util/List;
     803: invokeinterface #70,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     808: astore        4
     810: aload         4
     812: invokeinterface #71,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     817: ifeq          1160
     820: aload         4
     822: invokeinterface #72,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     827: checkcast     #34                 // class com/vladsch/flexmark/util/format/Table$TableRow
     830: astore        5
     832: iconst_0
     833: istore        6
     835: iconst_0
     836: istore        7
     838: aload_3
     839: iconst_0
     840: invokestatic  #49                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     843: putfield      #46                 // Field com/vladsch/flexmark/util/Ref.value:Ljava/lang/Object;
     846: aload         5
     848: getfield      #30                 // Field com/vladsch/flexmark/util/format/Table$TableRow.cells:Ljava/util/List;
     851: invokeinterface #70,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     856: astore        8
     858: aload         8
     860: invokeinterface #71,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     865: ifeq          1145
     868: aload         8
     870: invokeinterface #72,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     875: checkcast     #67                 // class com/vladsch/flexmark/util/format/Table$TableCell
     878: astore        9
     880: iload         6
     882: ifne          926
     885: aload_0
     886: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
     889: getfield      #117                // Field com/vladsch/flexmark/util/format/TableFormatOptions.leadTrailPipes:Z
     892: ifeq          945
     895: aload_1
     896: bipush        124
     898: invokeinterface #118,  2          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(C)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     903: pop
     904: aload_0
     905: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
     908: getfield      #119                // Field com/vladsch/flexmark/util/format/TableFormatOptions.spaceAroundPipes:Z
     911: ifeq          945
     914: aload_1
     915: bipush        32
     917: invokeinterface #118,  2          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(C)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     922: pop
     923: goto          945
     926: aload_0
     927: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
     930: getfield      #119                // Field com/vladsch/flexmark/util/format/TableFormatOptions.spaceAroundPipes:Z
     933: ifeq          945
     936: aload_1
     937: bipush        32
     939: invokeinterface #118,  2          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(C)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     944: pop
     945: aload_1
     946: aload_0
     947: aload         9
     949: getfield      #84                 // Field com/vladsch/flexmark/util/format/Table$TableCell.text:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     952: aload_0
     953: iload         7
     955: aload         9
     957: getfield      #24                 // Field com/vladsch/flexmark/util/format/Table$TableCell.columnSpan:I
     960: invokevirtual #106                // Method spanWidth:(II)I
     963: aload_0
     964: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
     967: getfield      #86                 // Field com/vladsch/flexmark/util/format/TableFormatOptions.spacePad:I
     970: isub
     971: aload_0
     972: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
     975: getfield      #87                 // Field com/vladsch/flexmark/util/format/TableFormatOptions.pipeWidth:I
     978: aload         9
     980: getfield      #24                 // Field com/vladsch/flexmark/util/format/Table$TableCell.columnSpan:I
     983: imul
     984: isub
     985: aload_0
     986: getfield      #75                 // Field alignments:[Lcom/vladsch/flexmark/util/html/CellAlignment;
     989: iload         7
     991: aaload
     992: aload_3
     993: invokevirtual #85                 // Method cellText:(Ljava/lang/CharSequence;ILcom/vladsch/flexmark/util/html/CellAlignment;Lcom/vladsch/flexmark/util/Ref;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     996: invokeinterface #120,  2          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
    1001: pop
    1002: iinc          6, 1
    1005: iload         7
    1007: aload         9
    1009: getfield      #24                 // Field com/vladsch/flexmark/util/format/Table$TableCell.columnSpan:I
    1012: iadd
    1013: istore        7
    1015: iload         6
    1017: aload_0
    1018: getfield      #75                 // Field alignments:[Lcom/vladsch/flexmark/util/html/CellAlignment;
    1021: arraylength
    1022: if_icmpge     1061
    1025: aload_0
    1026: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
    1029: getfield      #119                // Field com/vladsch/flexmark/util/format/TableFormatOptions.spaceAroundPipes:Z
    1032: ifeq          1044
    1035: aload_1
    1036: bipush        32
    1038: invokeinterface #118,  2          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(C)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
    1043: pop
    1044: aload_1
    1045: bipush        124
    1047: aload         9
    1049: getfield      #24                 // Field com/vladsch/flexmark/util/format/Table$TableCell.columnSpan:I
    1052: invokeinterface #121,  3          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.repeat:(CI)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
    1057: pop
    1058: goto          1142
    1061: aload_0
    1062: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
    1065: getfield      #117                // Field com/vladsch/flexmark/util/format/TableFormatOptions.leadTrailPipes:Z
    1068: ifeq          1107
    1071: aload_0
    1072: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
    1075: getfield      #119                // Field com/vladsch/flexmark/util/format/TableFormatOptions.spaceAroundPipes:Z
    1078: ifeq          1090
    1081: aload_1
    1082: bipush        32
    1084: invokeinterface #118,  2          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(C)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
    1089: pop
    1090: aload_1
    1091: bipush        124
    1093: aload         9
    1095: getfield      #24                 // Field com/vladsch/flexmark/util/format/Table$TableCell.columnSpan:I
    1098: invokeinterface #121,  3          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.repeat:(CI)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
    1103: pop
    1104: goto          1142
    1107: aload_0
    1108: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
    1111: getfield      #119                // Field com/vladsch/flexmark/util/format/TableFormatOptions.spaceAroundPipes:Z
    1114: ifeq          1126
    1117: aload_1
    1118: bipush        32
    1120: invokeinterface #118,  2          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(C)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
    1125: pop
    1126: aload_1
    1127: bipush        124
    1129: aload         9
    1131: getfield      #24                 // Field com/vladsch/flexmark/util/format/Table$TableCell.columnSpan:I
    1134: iconst_1
    1135: isub
    1136: invokeinterface #121,  3          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.repeat:(CI)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
    1141: pop
    1142: goto          858
    1145: iload         6
    1147: ifle          1157
    1150: aload_1
    1151: invokeinterface #122,  1          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.line:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
    1156: pop
    1157: goto          810
    1160: aload_1
    1161: iload_2
    1162: invokeinterface #116,  2          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.setOptions:(I)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
    1167: pop
    1168: aload_0
    1169: getfield      #14                 // Field caption:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1172: ifnull        1220
    1175: aload_0
    1176: getfield      #12                 // Field options:Lcom/vladsch/flexmark/util/format/TableFormatOptions;
    1179: getfield      #123                // Field com/vladsch/flexmark/util/format/TableFormatOptions.removeCaption:Z
    1182: ifne          1220
    1185: aload_1
    1186: invokeinterface #122,  1          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.line:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
    1191: bipush        91
    1193: invokeinterface #118,  2          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(C)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
    1198: aload_0
    1199: getfield      #14                 // Field caption:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1202: invokeinterface #120,  2          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
    1207: bipush        93
    1209: invokeinterface #118,  2          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(C)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
    1214: invokeinterface #122,  1          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.line:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
    1219: pop
    1220: return
}
