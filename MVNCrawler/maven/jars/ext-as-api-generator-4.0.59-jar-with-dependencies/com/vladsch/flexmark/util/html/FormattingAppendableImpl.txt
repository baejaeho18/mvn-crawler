Compiled from "FormattingAppendableImpl.java"
public class com.vladsch.flexmark.util.html.FormattingAppendableImpl implements com.vladsch.flexmark.util.html.FormattingAppendable {
  private final com.vladsch.flexmark.util.html.LengthTrackingAppendable myAppendable;

  private final java.util.Stack<com.vladsch.flexmark.util.html.FormattingAppendableImpl$ConditionalFrame> myConditionalFrames;

  private final java.util.Stack<java.lang.Integer> myIndentLineCounts;

  private final char myEOL;

  private final java.util.ArrayList<com.vladsch.flexmark.util.Ref<java.lang.Integer>> myOffsetBeforeList;

  private final java.util.HashMap<java.lang.Integer, java.util.List<java.lang.Runnable>> myAfterEolRunnables;

  private java.lang.String myWhitespace;

  private java.lang.String myWhitespaceEOL;

  private int myOptions;

  private int myEolOptions;

  private java.io.IOException myIOException;

  private int myModCount;

  private int myOffsetBefore;

  private int myPendingEOL;

  private boolean myPendingPreFormattedPrefix;

  private int myLineCount;

  private int myModCountOfLastEOL;

  private int myLastEOLCount;

  private int myIndent;

  private boolean myWillIndent;

  private int myIndentOffset;

  private com.vladsch.flexmark.util.sequence.BasedSequence myPrefix;

  private com.vladsch.flexmark.util.sequence.BasedSequence myIndentPrefix;

  private int myPreFormattedNesting;

  private int myPendingSpaces;

  private final java.util.Stack<com.vladsch.flexmark.util.sequence.BasedSequence> myPrefixStack;

  static final boolean $assertionsDisabled;

  public com.vladsch.flexmark.util.html.FormattingAppendableImpl(boolean);
    Code:
       0: aload_0
       1: new           #2                  // class java/lang/StringBuilder
       4: dup
       5: invokespecial #3                  // Method java/lang/StringBuilder."<init>":()V
       8: iload_1
       9: invokespecial #4                  // Method "<init>":(Ljava/lang/Appendable;Z)V
      12: return

  public com.vladsch.flexmark.util.html.FormattingAppendableImpl(int);
    Code:
       0: aload_0
       1: new           #2                  // class java/lang/StringBuilder
       4: dup
       5: invokespecial #3                  // Method java/lang/StringBuilder."<init>":()V
       8: iload_1
       9: invokespecial #5                  // Method "<init>":(Ljava/lang/Appendable;I)V
      12: return

  public com.vladsch.flexmark.util.html.FormattingAppendableImpl(java.lang.Appendable, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: ifeq          11
       6: bipush        7
       8: goto          12
      11: iconst_0
      12: invokespecial #5                  // Method "<init>":(Ljava/lang/Appendable;I)V
      15: return

  public com.vladsch.flexmark.util.html.FormattingAppendableImpl(java.lang.Appendable, int);
    Code:
       0: aload_0
       1: invokespecial #7                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #8                  // class com/vladsch/flexmark/util/html/LengthTrackingAppendableImpl
       8: dup
       9: aload_1
      10: invokespecial #9                  // Method com/vladsch/flexmark/util/html/LengthTrackingAppendableImpl."<init>":(Ljava/lang/Appendable;)V
      13: putfield      #10                 // Field myAppendable:Lcom/vladsch/flexmark/util/html/LengthTrackingAppendable;
      16: aload_0
      17: new           #11                 // class java/util/Stack
      20: dup
      21: invokespecial #12                 // Method java/util/Stack."<init>":()V
      24: putfield      #13                 // Field myConditionalFrames:Ljava/util/Stack;
      27: aload_0
      28: new           #11                 // class java/util/Stack
      31: dup
      32: invokespecial #12                 // Method java/util/Stack."<init>":()V
      35: putfield      #14                 // Field myIndentLineCounts:Ljava/util/Stack;
      38: aload_0
      39: new           #11                 // class java/util/Stack
      42: dup
      43: invokespecial #12                 // Method java/util/Stack."<init>":()V
      46: putfield      #15                 // Field myPrefixStack:Ljava/util/Stack;
      49: aload_0
      50: new           #16                 // class java/util/ArrayList
      53: dup
      54: invokespecial #17                 // Method java/util/ArrayList."<init>":()V
      57: putfield      #18                 // Field myOffsetBeforeList:Ljava/util/ArrayList;
      60: aload_0
      61: new           #19                 // class java/util/HashMap
      64: dup
      65: invokespecial #20                 // Method java/util/HashMap."<init>":()V
      68: putfield      #21                 // Field myAfterEolRunnables:Ljava/util/HashMap;
      71: aload_0
      72: bipush        10
      74: putfield      #22                 // Field myEOL:C
      77: aload_0
      78: iload_2
      79: putfield      #23                 // Field myOptions:I
      82: aload_0
      83: aconst_null
      84: putfield      #24                 // Field myIOException:Ljava/io/IOException;
      87: aload_0
      88: iconst_0
      89: putfield      #25                 // Field myModCount:I
      92: aload_0
      93: iconst_0
      94: putfield      #26                 // Field myOffsetBefore:I
      97: aload_0
      98: iconst_0
      99: putfield      #27                 // Field myPendingEOL:I
     102: aload_0
     103: iconst_0
     104: putfield      #28                 // Field myPendingPreFormattedPrefix:Z
     107: aload_0
     108: iconst_0
     109: putfield      #29                 // Field myLineCount:I
     112: aload_0
     113: iconst_0
     114: putfield      #30                 // Field myModCountOfLastEOL:I
     117: aload_0
     118: iconst_0
     119: putfield      #31                 // Field myLastEOLCount:I
     122: aload_0
     123: iconst_0
     124: putfield      #32                 // Field myIndent:I
     127: aload_0
     128: iconst_0
     129: putfield      #33                 // Field myWillIndent:Z
     132: aload_0
     133: iconst_0
     134: putfield      #34                 // Field myIndentOffset:I
     137: aload_0
     138: getstatic     #35                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     141: putfield      #1                  // Field myPrefix:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     144: aload_0
     145: getstatic     #35                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     148: putfield      #36                 // Field myIndentPrefix:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     151: aload_0
     152: iconst_0
     153: putfield      #37                 // Field myPreFormattedNesting:I
     156: aload_0
     157: aload_0
     158: getfield      #23                 // Field myOptions:I
     161: putfield      #38                 // Field myEolOptions:I
     164: aload_0
     165: invokespecial #39                 // Method setWhitespace:()V
     168: return

  private void setWhitespace();
    Code:
       0: aload_0
       1: aload_0
       2: invokespecial #40                 // Method isConvertingTabs:()Z
       5: ifeq          13
       8: ldc           #42                 // String  \t
      10: goto          15
      13: ldc           #43                 // String
      15: putfield      #44                 // Field myWhitespace:Ljava/lang/String;
      18: aload_0
      19: aload_0
      20: invokespecial #40                 // Method isConvertingTabs:()Z
      23: ifeq          31
      26: ldc           #45                 // String  \t\r\n
      28: goto          33
      31: ldc           #46                 // String  \n
      33: putfield      #47                 // Field myWhitespaceEOL:Ljava/lang/String;
      36: return

  public int getOptions();
    Code:
       0: aload_0
       1: getfield      #23                 // Field myOptions:I
       4: ireturn

  public com.vladsch.flexmark.util.html.FormattingAppendable setOptions(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #23                 // Field myOptions:I
       5: aload_0
       6: invokespecial #39                 // Method setWhitespace:()V
       9: aload_0
      10: areturn

  private boolean haveOptions(int);
    Code:
       0: aload_0
       1: getfield      #23                 // Field myOptions:I
       4: iload_1
       5: iand
       6: ifeq          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  private boolean haveEolOptions(int);
    Code:
       0: aload_0
       1: getfield      #38                 // Field myEolOptions:I
       4: iload_1
       5: iand
       6: ifeq          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  private boolean isConvertingTabs();
    Code:
       0: aload_0
       1: iconst_3
       2: invokespecial #48                 // Method haveOptions:(I)Z
       5: ireturn

  private boolean isSuppressingTrailingWhitespace();
    Code:
       0: aload_0
       1: iconst_4
       2: invokespecial #48                 // Method haveOptions:(I)Z
       5: ireturn

  private boolean isCollapseWhitespace();
    Code:
       0: aload_0
       1: iconst_2
       2: invokespecial #48                 // Method haveOptions:(I)Z
       5: ireturn

  private boolean isPrefixAfterPendingEol();
    Code:
       0: aload_0
       1: bipush        8
       3: invokespecial #48                 // Method haveOptions:(I)Z
       6: ireturn

  private void appendIndent() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field myPrefix:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: invokeinterface #49,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.isEmpty:()Z
       9: ifne          26
      12: aload_0
      13: getfield      #10                 // Field myAppendable:Lcom/vladsch/flexmark/util/html/LengthTrackingAppendable;
      16: aload_0
      17: getfield      #1                  // Field myPrefix:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      20: invokeinterface #50,  2           // InterfaceMethod com/vladsch/flexmark/util/html/LengthTrackingAppendable.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;
      25: pop
      26: aload_0
      27: getfield      #32                 // Field myIndent:I
      30: aload_0
      31: getfield      #34                 // Field myIndentOffset:I
      34: iadd
      35: ifle          85
      38: aload_0
      39: getfield      #36                 // Field myIndentPrefix:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      42: invokeinterface #49,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.isEmpty:()Z
      47: ifne          85
      50: iconst_0
      51: istore_1
      52: iload_1
      53: aload_0
      54: getfield      #32                 // Field myIndent:I
      57: aload_0
      58: getfield      #34                 // Field myIndentOffset:I
      61: iadd
      62: if_icmpge     85
      65: aload_0
      66: getfield      #10                 // Field myAppendable:Lcom/vladsch/flexmark/util/html/LengthTrackingAppendable;
      69: aload_0
      70: getfield      #36                 // Field myIndentPrefix:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      73: invokeinterface #50,  2           // InterfaceMethod com/vladsch/flexmark/util/html/LengthTrackingAppendable.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;
      78: pop
      79: iinc          1, 1
      82: goto          52
      85: return

  private void addPendingSpaces(int);
    Code:
       0: iload_1
       1: ifle          61
       4: aload_0
       5: getfield      #37                 // Field myPreFormattedNesting:I
       8: ifne          61
      11: aload_0
      12: getfield      #27                 // Field myPendingEOL:I
      15: ifne          61
      18: aload_0
      19: getfield      #30                 // Field myModCountOfLastEOL:I
      22: aload_0
      23: getfield      #25                 // Field myModCount:I
      26: if_icmpeq     61
      29: aload_0
      30: invokespecial #51                 // Method isCollapseWhitespace:()Z
      33: ifeq          51
      36: aload_0
      37: getfield      #52                 // Field myPendingSpaces:I
      40: ifne          61
      43: aload_0
      44: iconst_1
      45: putfield      #52                 // Field myPendingSpaces:I
      48: goto          61
      51: aload_0
      52: dup
      53: getfield      #52                 // Field myPendingSpaces:I
      56: iload_1
      57: iadd
      58: putfield      #52                 // Field myPendingSpaces:I
      61: return

  private void appendSpaces() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #52                 // Field myPendingSpaces:I
       4: ifle          49
       7: aload_0
       8: getfield      #52                 // Field myPendingSpaces:I
      11: ifle          39
      14: aload_0
      15: getfield      #10                 // Field myAppendable:Lcom/vladsch/flexmark/util/html/LengthTrackingAppendable;
      18: bipush        32
      20: invokeinterface #53,  2           // InterfaceMethod com/vladsch/flexmark/util/html/LengthTrackingAppendable.append:(C)Ljava/lang/Appendable;
      25: pop
      26: aload_0
      27: dup
      28: getfield      #52                 // Field myPendingSpaces:I
      31: iconst_1
      32: isub
      33: putfield      #52                 // Field myPendingSpaces:I
      36: goto          7
      39: aload_0
      40: dup
      41: getfield      #25                 // Field myModCount:I
      44: iconst_1
      45: iadd
      46: putfield      #25                 // Field myModCount:I
      49: return

  private void setPendingEOL(int);
    Code:
       0: aload_0
       1: getfield      #37                 // Field myPreFormattedNesting:I
       4: ifne          75
       7: iload_1
       8: aload_0
       9: getfield      #27                 // Field myPendingEOL:I
      12: if_icmple     75
      15: aload_0
      16: getfield      #30                 // Field myModCountOfLastEOL:I
      19: aload_0
      20: getfield      #25                 // Field myModCount:I
      23: if_icmpeq     42
      26: aload_0
      27: iload_1
      28: putfield      #27                 // Field myPendingEOL:I
      31: aload_0
      32: aload_0
      33: getfield      #23                 // Field myOptions:I
      36: putfield      #38                 // Field myEolOptions:I
      39: goto          75
      42: aload_0
      43: getfield      #29                 // Field myLineCount:I
      46: ifle          75
      49: iload_1
      50: aload_0
      51: getfield      #31                 // Field myLastEOLCount:I
      54: if_icmple     75
      57: aload_0
      58: iload_1
      59: aload_0
      60: getfield      #31                 // Field myLastEOLCount:I
      63: isub
      64: putfield      #27                 // Field myPendingEOL:I
      67: aload_0
      68: aload_0
      69: getfield      #23                 // Field myOptions:I
      72: putfield      #38                 // Field myEolOptions:I
      75: return

  private void resetPendingEOL();
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #27                 // Field myPendingEOL:I
       5: aload_0
       6: iconst_0
       7: putfield      #52                 // Field myPendingSpaces:I
      10: aload_0
      11: aload_0
      12: getfield      #25                 // Field myModCount:I
      15: putfield      #30                 // Field myModCountOfLastEOL:I
      18: aload_0
      19: aload_0
      20: getfield      #23                 // Field myOptions:I
      23: putfield      #38                 // Field myEolOptions:I
      26: return

  public com.vladsch.flexmark.util.html.FormattingAppendableImpl addAfterEolRunnable(int, java.lang.Runnable);
    Code:
       0: aload_0
       1: getfield      #21                 // Field myAfterEolRunnables:Ljava/util/HashMap;
       4: iload_1
       5: invokestatic  #54                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       8: invokevirtual #55                 // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      11: checkcast     #56                 // class java/util/List
      14: astore_3
      15: aload_3
      16: ifnonnull     40
      19: new           #16                 // class java/util/ArrayList
      22: dup
      23: invokespecial #17                 // Method java/util/ArrayList."<init>":()V
      26: astore_3
      27: aload_0
      28: getfield      #21                 // Field myAfterEolRunnables:Ljava/util/HashMap;
      31: iload_1
      32: invokestatic  #54                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      35: aload_3
      36: invokevirtual #57                 // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      39: pop
      40: aload_3
      41: aload_2
      42: invokeinterface #58,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      47: pop
      48: aload_0
      49: areturn

  private void runAllAfterEol();
    Code:
       0: aload_0
       1: getfield      #21                 // Field myAfterEolRunnables:Ljava/util/HashMap;
       4: aload_0
       5: getfield      #27                 // Field myPendingEOL:I
       8: invokestatic  #54                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      11: invokevirtual #55                 // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      14: checkcast     #56                 // class java/util/List
      17: astore_1
      18: aload_1
      19: ifnull        72
      22: aload_1
      23: invokeinterface #59,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      28: astore_2
      29: aload_2
      30: invokeinterface #60,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      35: ifeq          57
      38: aload_2
      39: invokeinterface #61,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      44: checkcast     #62                 // class java/lang/Runnable
      47: astore_3
      48: aload_3
      49: invokeinterface #63,  1           // InterfaceMethod java/lang/Runnable.run:()V
      54: goto          29
      57: aload_0
      58: getfield      #21                 // Field myAfterEolRunnables:Ljava/util/HashMap;
      61: aload_0
      62: getfield      #27                 // Field myPendingEOL:I
      65: invokestatic  #54                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      68: invokevirtual #64                 // Method java/util/HashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      71: pop
      72: return

  private void appendEOL(boolean, boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #29                 // Field myLineCount:I
       4: istore_3
       5: aload_0
       6: getfield      #27                 // Field myPendingEOL:I
       9: ifle          131
      12: aload_0
      13: getfield      #52                 // Field myPendingSpaces:I
      16: ifle          31
      19: aload_0
      20: iconst_4
      21: invokespecial #65                 // Method haveEolOptions:(I)Z
      24: ifne          31
      27: aload_0
      28: invokespecial #66                 // Method appendSpaces:()V
      31: aload_0
      32: getfield      #27                 // Field myPendingEOL:I
      35: ifle          112
      38: aload_0
      39: getfield      #10                 // Field myAppendable:Lcom/vladsch/flexmark/util/html/LengthTrackingAppendable;
      42: aload_0
      43: getfield      #22                 // Field myEOL:C
      46: invokeinterface #53,  2           // InterfaceMethod com/vladsch/flexmark/util/html/LengthTrackingAppendable.append:(C)Ljava/lang/Appendable;
      51: pop
      52: aload_0
      53: dup
      54: getfield      #29                 // Field myLineCount:I
      57: iconst_1
      58: iadd
      59: putfield      #29                 // Field myLineCount:I
      62: aload_0
      63: invokespecial #67                 // Method runAllAfterEol:()V
      66: aload_0
      67: dup
      68: getfield      #27                 // Field myPendingEOL:I
      71: iconst_1
      72: isub
      73: putfield      #27                 // Field myPendingEOL:I
      76: aload_0
      77: getfield      #27                 // Field myPendingEOL:I
      80: ifle          31
      83: aload_0
      84: getfield      #1                  // Field myPrefix:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      87: invokeinterface #68,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.isBlank:()Z
      92: ifne          31
      95: aload_0
      96: getfield      #10                 // Field myAppendable:Lcom/vladsch/flexmark/util/html/LengthTrackingAppendable;
      99: aload_0
     100: getfield      #1                  // Field myPrefix:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     103: invokeinterface #50,  2           // InterfaceMethod com/vladsch/flexmark/util/html/LengthTrackingAppendable.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;
     108: pop
     109: goto          31
     112: aload_0
     113: invokespecial #69                 // Method resetPendingEOL:()V
     116: aload_0
     117: invokespecial #67                 // Method runAllAfterEol:()V
     120: iload_1
     121: ifeq          166
     124: aload_0
     125: invokespecial #70                 // Method appendIndent:()V
     128: goto          166
     131: aload_0
     132: getfield      #30                 // Field myModCountOfLastEOL:I
     135: aload_0
     136: getfield      #25                 // Field myModCount:I
     139: if_icmpne     158
     142: aload_0
     143: iconst_0
     144: putfield      #52                 // Field myPendingSpaces:I
     147: iload_1
     148: ifeq          166
     151: aload_0
     152: invokespecial #70                 // Method appendIndent:()V
     155: goto          166
     158: iload_2
     159: ifeq          166
     162: aload_0
     163: invokespecial #66                 // Method appendSpaces:()V
     166: aload_0
     167: aload_0
     168: getfield      #29                 // Field myLineCount:I
     171: iload_3
     172: isub
     173: putfield      #31                 // Field myLastEOLCount:I
     176: return

  private void beforeAppendText(boolean, boolean, boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #31                 // Field myLastEOLCount:I
       5: aload_0
       6: getfield      #13                 // Field myConditionalFrames:Ljava/util/Stack;
       9: invokevirtual #71                 // Method java/util/Stack.size:()I
      12: ifle          277
      15: aload_0
      16: getfield      #13                 // Field myConditionalFrames:Ljava/util/Stack;
      19: invokevirtual #72                 // Method java/util/Stack.peek:()Ljava/lang/Object;
      22: checkcast     #73                 // class com/vladsch/flexmark/util/html/FormattingAppendableImpl$ConditionalFrame
      25: astore        4
      27: aload         4
      29: getfield      #74                 // Field com/vladsch/flexmark/util/html/FormattingAppendableImpl$ConditionalFrame.myInFormatter:Z
      32: ifne          277
      35: aload         4
      37: getfield      #75                 // Field com/vladsch/flexmark/util/html/FormattingAppendableImpl$ConditionalFrame.myModCount:I
      40: aload_0
      41: getfield      #25                 // Field myModCount:I
      44: if_icmpne     51
      47: iconst_1
      48: goto          52
      51: iconst_0
      52: istore        5
      54: iload         5
      56: ifeq          69
      59: aload_0
      60: dup
      61: getfield      #25                 // Field myModCount:I
      64: iconst_1
      65: iadd
      66: putfield      #25                 // Field myModCount:I
      69: iload         5
      71: ifne          101
      74: aload         4
      76: getfield      #76                 // Field com/vladsch/flexmark/util/html/FormattingAppendableImpl$ConditionalFrame.myOnIndent:Z
      79: ifne          277
      82: aload_0
      83: getfield      #33                 // Field myWillIndent:Z
      86: ifne          101
      89: aload         4
      91: getfield      #77                 // Field com/vladsch/flexmark/util/html/FormattingAppendableImpl$ConditionalFrame.myIndent:I
      94: aload_0
      95: getfield      #32                 // Field myIndent:I
      98: if_icmpge     277
     101: aload         4
     103: iconst_1
     104: putfield      #74                 // Field com/vladsch/flexmark/util/html/FormattingAppendableImpl$ConditionalFrame.myInFormatter:Z
     107: aload         4
     109: aload_0
     110: getfield      #33                 // Field myWillIndent:Z
     113: ifne          128
     116: aload         4
     118: getfield      #77                 // Field com/vladsch/flexmark/util/html/FormattingAppendableImpl$ConditionalFrame.myIndent:I
     121: aload_0
     122: getfield      #32                 // Field myIndent:I
     125: if_icmpge     132
     128: iconst_1
     129: goto          133
     132: iconst_0
     133: putfield      #76                 // Field com/vladsch/flexmark/util/html/FormattingAppendableImpl$ConditionalFrame.myOnIndent:Z
     136: aload         4
     138: aload         4
     140: getfield      #78                 // Field com/vladsch/flexmark/util/html/FormattingAppendableImpl$ConditionalFrame.myLineCount:I
     143: aload_0
     144: getfield      #29                 // Field myLineCount:I
     147: aload_0
     148: getfield      #27                 // Field myPendingEOL:I
     151: iadd
     152: if_icmpge     159
     155: iconst_1
     156: goto          160
     159: iconst_0
     160: putfield      #79                 // Field com/vladsch/flexmark/util/html/FormattingAppendableImpl$ConditionalFrame.myOnLine:Z
     163: aload_0
     164: getfield      #32                 // Field myIndent:I
     167: istore        6
     169: aload_0
     170: aload         4
     172: getfield      #77                 // Field com/vladsch/flexmark/util/html/FormattingAppendableImpl$ConditionalFrame.myIndent:I
     175: putfield      #32                 // Field myIndent:I
     178: aload_0
     179: iconst_0
     180: putfield      #27                 // Field myPendingEOL:I
     183: aload_0
     184: invokespecial #67                 // Method runAllAfterEol:()V
     187: aload_0
     188: getfield      #29                 // Field myLineCount:I
     191: istore        7
     193: aload         4
     195: getfield      #80                 // Field com/vladsch/flexmark/util/html/FormattingAppendableImpl$ConditionalFrame.myOpenFormatter:Lcom/vladsch/flexmark/util/html/ConditionalFormatter;
     198: iload         5
     200: aload         4
     202: getfield      #76                 // Field com/vladsch/flexmark/util/html/FormattingAppendableImpl$ConditionalFrame.myOnIndent:Z
     205: aload         4
     207: getfield      #79                 // Field com/vladsch/flexmark/util/html/FormattingAppendableImpl$ConditionalFrame.myOnLine:Z
     210: iconst_1
     211: invokeinterface #81,  5           // InterfaceMethod com/vladsch/flexmark/util/html/ConditionalFormatter.apply:(ZZZZ)V
     216: aload_0
     217: dup
     218: getfield      #32                 // Field myIndent:I
     221: iload         6
     223: aload         4
     225: getfield      #77                 // Field com/vladsch/flexmark/util/html/FormattingAppendableImpl$ConditionalFrame.myIndent:I
     228: isub
     229: iadd
     230: putfield      #32                 // Field myIndent:I
     233: aload         4
     235: getfield      #82                 // Field com/vladsch/flexmark/util/html/FormattingAppendableImpl$ConditionalFrame.myLineRef:Lcom/vladsch/flexmark/util/Ref;
     238: ifnull        271
     241: iload         5
     243: ifeq          271
     246: aload         4
     248: getfield      #82                 // Field com/vladsch/flexmark/util/html/FormattingAppendableImpl$ConditionalFrame.myLineRef:Lcom/vladsch/flexmark/util/Ref;
     251: iload         7
     253: aload_0
     254: getfield      #29                 // Field myLineCount:I
     257: if_icmpeq     264
     260: iconst_1
     261: goto          265
     264: iconst_0
     265: invokestatic  #83                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     268: putfield      #84                 // Field com/vladsch/flexmark/util/Ref.value:Ljava/lang/Object;
     271: aload         4
     273: iconst_0
     274: putfield      #74                 // Field com/vladsch/flexmark/util/html/FormattingAppendableImpl$ConditionalFrame.myInFormatter:Z
     277: iload_1
     278: ifeq          290
     281: aload_0
     282: iload_2
     283: iload_3
     284: invokespecial #85                 // Method appendEOL:(ZZ)V
     287: goto          298
     290: iload_3
     291: ifeq          298
     294: aload_0
     295: invokespecial #66                 // Method appendSpaces:()V
     298: return

  private void setOffsetBefore(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #26                 // Field myOffsetBefore:I
       5: aload_0
       6: getfield      #18                 // Field myOffsetBeforeList:Ljava/util/ArrayList;
       9: invokevirtual #86                 // Method java/util/ArrayList.isEmpty:()Z
      12: ifne          60
      15: aload_0
      16: getfield      #18                 // Field myOffsetBeforeList:Ljava/util/ArrayList;
      19: invokevirtual #87                 // Method java/util/ArrayList.iterator:()Ljava/util/Iterator;
      22: astore_2
      23: aload_2
      24: invokeinterface #60,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      29: ifeq          53
      32: aload_2
      33: invokeinterface #61,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      38: checkcast     #88                 // class com/vladsch/flexmark/util/Ref
      41: astore_3
      42: aload_3
      43: iload_1
      44: invokestatic  #54                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      47: putfield      #84                 // Field com/vladsch/flexmark/util/Ref.value:Ljava/lang/Object;
      50: goto          23
      53: aload_0
      54: getfield      #18                 // Field myOffsetBeforeList:Ljava/util/ArrayList;
      57: invokevirtual #89                 // Method java/util/ArrayList.clear:()V
      60: return

  private void beforePre() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #27                 // Field myPendingEOL:I
       4: ifle          75
       7: aload_0
       8: getfield      #10                 // Field myAppendable:Lcom/vladsch/flexmark/util/html/LengthTrackingAppendable;
      11: bipush        10
      13: invokeinterface #53,  2           // InterfaceMethod com/vladsch/flexmark/util/html/LengthTrackingAppendable.append:(C)Ljava/lang/Appendable;
      18: pop
      19: aload_0
      20: dup
      21: getfield      #29                 // Field myLineCount:I
      24: iconst_1
      25: iadd
      26: putfield      #29                 // Field myLineCount:I
      29: aload_0
      30: getfield      #28                 // Field myPendingPreFormattedPrefix:Z
      33: ifeq          62
      36: aload_0
      37: getfield      #1                  // Field myPrefix:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      40: invokeinterface #49,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.isEmpty:()Z
      45: ifne          62
      48: aload_0
      49: getfield      #10                 // Field myAppendable:Lcom/vladsch/flexmark/util/html/LengthTrackingAppendable;
      52: aload_0
      53: getfield      #1                  // Field myPrefix:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      56: invokeinterface #50,  2           // InterfaceMethod com/vladsch/flexmark/util/html/LengthTrackingAppendable.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;
      61: pop
      62: aload_0
      63: dup
      64: getfield      #27                 // Field myPendingEOL:I
      67: iconst_1
      68: isub
      69: putfield      #27                 // Field myPendingEOL:I
      72: goto          0
      75: aload_0
      76: iconst_0
      77: putfield      #28                 // Field myPendingPreFormattedPrefix:Z
      80: return

  private void appendImpl(char) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #37                 // Field myPreFormattedNesting:I
       4: ifle          111
       7: aload_0
       8: aload_0
       9: getfield      #10                 // Field myAppendable:Lcom/vladsch/flexmark/util/html/LengthTrackingAppendable;
      12: invokeinterface #90,  1           // InterfaceMethod com/vladsch/flexmark/util/html/LengthTrackingAppendable.getLength:()I
      17: invokespecial #91                 // Method setOffsetBefore:(I)V
      20: aload_0
      21: invokespecial #92                 // Method beforePre:()V
      24: aload_0
      25: getfield      #28                 // Field myPendingPreFormattedPrefix:Z
      28: ifeq          57
      31: aload_0
      32: getfield      #1                  // Field myPrefix:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      35: invokeinterface #49,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.isEmpty:()Z
      40: ifne          57
      43: aload_0
      44: getfield      #10                 // Field myAppendable:Lcom/vladsch/flexmark/util/html/LengthTrackingAppendable;
      47: aload_0
      48: getfield      #1                  // Field myPrefix:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      51: invokeinterface #50,  2           // InterfaceMethod com/vladsch/flexmark/util/html/LengthTrackingAppendable.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;
      56: pop
      57: aload_0
      58: iconst_0
      59: putfield      #28                 // Field myPendingPreFormattedPrefix:Z
      62: iload_1
      63: aload_0
      64: getfield      #22                 // Field myEOL:C
      67: if_icmpne     83
      70: aload_0
      71: iconst_1
      72: putfield      #27                 // Field myPendingEOL:I
      75: aload_0
      76: iconst_1
      77: putfield      #28                 // Field myPendingPreFormattedPrefix:Z
      80: goto          188
      83: aload_0
      84: getfield      #10                 // Field myAppendable:Lcom/vladsch/flexmark/util/html/LengthTrackingAppendable;
      87: iload_1
      88: invokeinterface #53,  2           // InterfaceMethod com/vladsch/flexmark/util/html/LengthTrackingAppendable.append:(C)Ljava/lang/Appendable;
      93: pop
      94: aload_0
      95: dup
      96: getfield      #25                 // Field myModCount:I
      99: iconst_1
     100: iadd
     101: putfield      #25                 // Field myModCount:I
     104: aload_0
     105: invokespecial #69                 // Method resetPendingEOL:()V
     108: goto          188
     111: iload_1
     112: aload_0
     113: getfield      #22                 // Field myEOL:C
     116: if_icmpne     127
     119: aload_0
     120: iconst_1
     121: invokespecial #93                 // Method setPendingEOL:(I)V
     124: goto          188
     127: aload_0
     128: getfield      #44                 // Field myWhitespace:Ljava/lang/String;
     131: iload_1
     132: invokevirtual #94                 // Method java/lang/String.indexOf:(I)I
     135: iconst_m1
     136: if_icmpeq     147
     139: aload_0
     140: iconst_1
     141: invokespecial #95                 // Method addPendingSpaces:(I)V
     144: goto          188
     147: aload_0
     148: iconst_1
     149: iconst_1
     150: iconst_1
     151: invokespecial #96                 // Method beforeAppendText:(ZZZ)V
     154: aload_0
     155: aload_0
     156: getfield      #10                 // Field myAppendable:Lcom/vladsch/flexmark/util/html/LengthTrackingAppendable;
     159: invokeinterface #90,  1           // InterfaceMethod com/vladsch/flexmark/util/html/LengthTrackingAppendable.getLength:()I
     164: invokespecial #91                 // Method setOffsetBefore:(I)V
     167: aload_0
     168: getfield      #10                 // Field myAppendable:Lcom/vladsch/flexmark/util/html/LengthTrackingAppendable;
     171: iload_1
     172: invokeinterface #53,  2           // InterfaceMethod com/vladsch/flexmark/util/html/LengthTrackingAppendable.append:(C)Ljava/lang/Appendable;
     177: pop
     178: aload_0
     179: dup
     180: getfield      #25                 // Field myModCount:I
     183: iconst_1
     184: iadd
     185: putfield      #25                 // Field myModCount:I
     188: return

  private void appendImpl(java.lang.CharSequence, int, int) throws java.io.IOException;
    Code:
       0: iload_2
       1: istore        4
       3: aload_1
       4: invokestatic  #97                 // Method com/vladsch/flexmark/util/sequence/BasedSequenceImpl.of:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       7: astore        5
       9: aload_0
      10: getfield      #37                 // Field myPreFormattedNesting:I
      13: ifle          236
      16: aload_0
      17: aload_0
      18: getfield      #10                 // Field myAppendable:Lcom/vladsch/flexmark/util/html/LengthTrackingAppendable;
      21: invokeinterface #90,  1           // InterfaceMethod com/vladsch/flexmark/util/html/LengthTrackingAppendable.getLength:()I
      26: invokespecial #91                 // Method setOffsetBefore:(I)V
      29: iload_2
      30: aload         5
      32: iload_2
      33: iload_3
      34: invokeinterface #98,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      39: ldc           #99                 // String \n
      41: invokeinterface #100,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.removeSuffix:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      46: invokeinterface #101,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      51: iadd
      52: istore        6
      54: iload         4
      56: iload_3
      57: if_icmpge     64
      60: aload_0
      61: invokespecial #92                 // Method beforePre:()V
      64: iload         4
      66: iload         6
      68: if_icmpge     200
      71: aload         5
      73: aload_0
      74: getfield      #22                 // Field myEOL:C
      77: iload         4
      79: iload         6
      81: invokeinterface #102,  4          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.indexOf:(CII)I
      86: istore        7
      88: iload         7
      90: iconst_m1
      91: if_icmpne     99
      94: iload         6
      96: goto          103
      99: iload         7
     101: iconst_1
     102: iadd
     103: istore        8
     105: iload         4
     107: iload         8
     109: if_icmpge     169
     112: aload_0
     113: getfield      #28                 // Field myPendingPreFormattedPrefix:Z
     116: ifeq          145
     119: aload_0
     120: getfield      #1                  // Field myPrefix:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     123: invokeinterface #49,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.isEmpty:()Z
     128: ifne          145
     131: aload_0
     132: getfield      #10                 // Field myAppendable:Lcom/vladsch/flexmark/util/html/LengthTrackingAppendable;
     135: aload_0
     136: getfield      #1                  // Field myPrefix:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     139: invokeinterface #50,  2           // InterfaceMethod com/vladsch/flexmark/util/html/LengthTrackingAppendable.append:(Ljava/lang/CharSequence;)Ljava/lang/Appendable;
     144: pop
     145: aload_0
     146: iconst_0
     147: putfield      #28                 // Field myPendingPreFormattedPrefix:Z
     150: aload_0
     151: getfield      #10                 // Field myAppendable:Lcom/vladsch/flexmark/util/html/LengthTrackingAppendable;
     154: aload_1
     155: iload         4
     157: iload         8
     159: invokeinterface #103,  4          // InterfaceMethod com/vladsch/flexmark/util/html/LengthTrackingAppendable.append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;
     164: pop
     165: iload         8
     167: istore        4
     169: iload         7
     171: iconst_m1
     172: if_icmpne     178
     175: goto          200
     178: aload_0
     179: dup
     180: getfield      #29                 // Field myLineCount:I
     183: iconst_1
     184: iadd
     185: putfield      #29                 // Field myLineCount:I
     188: aload_0
     189: iconst_1
     190: putfield      #28                 // Field myPendingPreFormattedPrefix:Z
     193: iload         8
     195: istore        4
     197: goto          64
     200: aload_0
     201: dup
     202: getfield      #25                 // Field myModCount:I
     205: iconst_1
     206: iadd
     207: putfield      #25                 // Field myModCount:I
     210: iload         4
     212: iload         6
     214: if_icmpne     233
     217: iload         6
     219: iload_3
     220: if_icmpeq     233
     223: aload_0
     224: iconst_1
     225: putfield      #27                 // Field myPendingEOL:I
     228: aload_0
     229: iconst_1
     230: putfield      #28                 // Field myPendingPreFormattedPrefix:Z
     233: goto          445
     236: iconst_1
     237: istore        6
     239: iload         4
     241: iload_3
     242: if_icmpge     445
     245: aload         5
     247: aload_0
     248: getfield      #47                 // Field myWhitespaceEOL:Ljava/lang/String;
     251: iload         4
     253: iload_3
     254: invokeinterface #104,  4          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.indexOfAny:(Ljava/lang/CharSequence;II)I
     259: istore        7
     261: iload         7
     263: iconst_m1
     264: if_icmpne     271
     267: iload_3
     268: goto          273
     271: iload         7
     273: istore        8
     275: iload         4
     277: iload         8
     279: if_icmpge     335
     282: aload_0
     283: iconst_1
     284: iconst_1
     285: iconst_1
     286: invokespecial #96                 // Method beforeAppendText:(ZZZ)V
     289: iload         6
     291: ifeq          310
     294: aload_0
     295: aload_0
     296: getfield      #10                 // Field myAppendable:Lcom/vladsch/flexmark/util/html/LengthTrackingAppendable;
     299: invokeinterface #90,  1           // InterfaceMethod com/vladsch/flexmark/util/html/LengthTrackingAppendable.getLength:()I
     304: invokespecial #91                 // Method setOffsetBefore:(I)V
     307: iconst_0
     308: istore        6
     310: aload_0
     311: getfield      #10                 // Field myAppendable:Lcom/vladsch/flexmark/util/html/LengthTrackingAppendable;
     314: aload_1
     315: iload         4
     317: iload         8
     319: invokeinterface #103,  4          // InterfaceMethod com/vladsch/flexmark/util/html/LengthTrackingAppendable.append:(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;
     324: pop
     325: aload_0
     326: dup
     327: getfield      #25                 // Field myModCount:I
     330: iconst_1
     331: iadd
     332: putfield      #25                 // Field myModCount:I
     335: iload         7
     337: iconst_m1
     338: if_icmpne     344
     341: goto          445
     344: aload         5
     346: aload_0
     347: getfield      #47                 // Field myWhitespaceEOL:Ljava/lang/String;
     350: iload         7
     352: iload_3
     353: invokeinterface #105,  4          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.countChars:(Ljava/lang/CharSequence;II)I
     358: istore        9
     360: aload_0
     361: getfield      #27                 // Field myPendingEOL:I
     364: ifne          431
     367: aload         5
     369: aload_0
     370: getfield      #22                 // Field myEOL:C
     373: iload         7
     375: iload         7
     377: iload         9
     379: iadd
     380: invokeinterface #102,  4          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.indexOf:(CII)I
     385: istore        10
     387: iload         10
     389: iconst_m1
     390: if_icmpeq     425
     393: iload         10
     395: iload         7
     397: if_icmple     417
     400: aload_0
     401: iconst_4
     402: invokespecial #48                 // Method haveOptions:(I)Z
     405: ifne          417
     408: aload_0
     409: iload         10
     411: iload         7
     413: isub
     414: invokespecial #95                 // Method addPendingSpaces:(I)V
     417: aload_0
     418: iconst_1
     419: invokespecial #93                 // Method setPendingEOL:(I)V
     422: goto          431
     425: aload_0
     426: iload         9
     428: invokespecial #95                 // Method addPendingSpaces:(I)V
     431: iload         7
     433: iload         9
     435: iadd
     436: istore        7
     438: iload         7
     440: istore        4
     442: goto          239
     445: return

  public java.io.IOException getIOException();
    Code:
       0: aload_0
       1: getfield      #24                 // Field myIOException:Ljava/io/IOException;
       4: areturn

  private void setIOException(java.io.IOException);
    Code:
       0: aload_0
       1: getfield      #24                 // Field myIOException:Ljava/io/IOException;
       4: ifnonnull     12
       7: aload_0
       8: aload_1
       9: putfield      #24                 // Field myIOException:Ljava/io/IOException;
      12: return

  public com.vladsch.flexmark.util.html.FormattingAppendable append(java.lang.CharSequence);
    Code:
       0: aload_0
       1: getfield      #24                 // Field myIOException:Ljava/io/IOException;
       4: ifnonnull     19
       7: aload_0
       8: aload_1
       9: iconst_0
      10: aload_1
      11: invokeinterface #106,  1          // InterfaceMethod java/lang/CharSequence.length:()I
      16: invokespecial #107                // Method appendImpl:(Ljava/lang/CharSequence;II)V
      19: goto          28
      22: astore_2
      23: aload_0
      24: aload_2
      25: invokespecial #109                // Method setIOException:(Ljava/io/IOException;)V
      28: aload_0
      29: areturn
    Exception table:
       from    to  target type
           0    19    22   Class java/io/IOException

  public com.vladsch.flexmark.util.html.FormattingAppendable append(java.lang.CharSequence, int, int);
    Code:
       0: aload_0
       1: getfield      #24                 // Field myIOException:Ljava/io/IOException;
       4: ifnonnull     14
       7: aload_0
       8: aload_1
       9: iload_2
      10: iload_3
      11: invokespecial #107                // Method appendImpl:(Ljava/lang/CharSequence;II)V
      14: goto          25
      17: astore        4
      19: aload_0
      20: aload         4
      22: invokespecial #109                // Method setIOException:(Ljava/io/IOException;)V
      25: aload_0
      26: areturn
    Exception table:
       from    to  target type
           0    14    17   Class java/io/IOException

  public com.vladsch.flexmark.util.html.FormattingAppendable append(char);
    Code:
       0: aload_0
       1: getfield      #24                 // Field myIOException:Ljava/io/IOException;
       4: ifnonnull     12
       7: aload_0
       8: iload_1
       9: invokespecial #110                // Method appendImpl:(C)V
      12: goto          21
      15: astore_2
      16: aload_0
      17: aload_2
      18: invokespecial #109                // Method setIOException:(Ljava/io/IOException;)V
      21: aload_0
      22: areturn
    Exception table:
       from    to  target type
           0    12    15   Class java/io/IOException

  public com.vladsch.flexmark.util.html.FormattingAppendable repeat(char, int);
    Code:
       0: iload_2
       1: istore_3
       2: iload_3
       3: iinc          3, -1
       6: ifle          18
       9: aload_0
      10: iload_1
      11: invokevirtual #111                // Method append:(C)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      14: pop
      15: goto          2
      18: aload_0
      19: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable repeat(java.lang.CharSequence, int);
    Code:
       0: iload_2
       1: istore_3
       2: iload_3
       3: iinc          3, -1
       6: ifle          18
       9: aload_0
      10: aload_1
      11: invokevirtual #112                // Method append:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      14: pop
      15: goto          2
      18: aload_0
      19: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable repeat(java.lang.CharSequence, int, int, int);
    Code:
       0: iload         4
       2: istore        5
       4: iload         5
       6: iinc          5, -1
       9: ifle          23
      12: aload_0
      13: aload_1
      14: iload_2
      15: iload_3
      16: invokevirtual #113                // Method append:(Ljava/lang/CharSequence;II)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      19: pop
      20: goto          4
      23: aload_0
      24: areturn

  public java.lang.Appendable getAppendable();
    Code:
       0: aload_0
       1: getfield      #10                 // Field myAppendable:Lcom/vladsch/flexmark/util/html/LengthTrackingAppendable;
       4: areturn

  public java.lang.String getText();
    Code:
       0: aload_0
       1: invokevirtual #114                // Method flush:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #115,  1          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.getAppendable:()Ljava/lang/Appendable;
       9: astore_1
      10: aload_1
      11: invokevirtual #116                // Method java/lang/Object.toString:()Ljava/lang/String;
      14: astore_2
      15: aload_2
      16: areturn

  public java.lang.String getText(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #117                // Method flush:(I)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       5: invokeinterface #115,  1          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.getAppendable:()Ljava/lang/Appendable;
      10: astore_2
      11: aload_2
      12: invokevirtual #116                // Method java/lang/Object.toString:()Ljava/lang/String;
      15: astore_3
      16: aload_3
      17: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable flush();
    Code:
       0: aload_0
       1: iconst_0
       2: invokevirtual #117                // Method flush:(I)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       5: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable flushWhitespaces();
    Code:
       0: aload_0
       1: invokespecial #66                 // Method appendSpaces:()V
       4: goto          13
       7: astore_1
       8: aload_0
       9: aload_1
      10: invokespecial #109                // Method setIOException:(Ljava/io/IOException;)V
      13: aload_0
      14: areturn
    Exception table:
       from    to  target type
           0     4     7   Class java/io/IOException

  public com.vladsch.flexmark.util.html.FormattingAppendable flush(int);
    Code:
       0: getstatic     #118                // Field $assertionsDisabled:Z
       3: ifne          24
       6: aload_0
       7: getfield      #13                 // Field myConditionalFrames:Ljava/util/Stack;
      10: invokevirtual #71                 // Method java/util/Stack.size:()I
      13: ifeq          24
      16: new           #119                // class java/lang/AssertionError
      19: dup
      20: invokespecial #120                // Method java/lang/AssertionError."<init>":()V
      23: athrow
      24: getstatic     #118                // Field $assertionsDisabled:Z
      27: ifne          45
      30: aload_0
      31: getfield      #37                 // Field myPreFormattedNesting:I
      34: ifeq          45
      37: new           #119                // class java/lang/AssertionError
      40: dup
      41: invokespecial #120                // Method java/lang/AssertionError."<init>":()V
      44: athrow
      45: iload_1
      46: iconst_m1
      47: if_icmplt     54
      50: iload_1
      51: goto          55
      54: iconst_m1
      55: istore_2
      56: aload_0
      57: getfield      #27                 // Field myPendingEOL:I
      60: iload_2
      61: iconst_1
      62: iadd
      63: if_icmple     73
      66: aload_0
      67: iload_1
      68: iconst_1
      69: iadd
      70: putfield      #27                 // Field myPendingEOL:I
      73: aload_0
      74: getfield      #24                 // Field myIOException:Ljava/io/IOException;
      77: ifnonnull     99
      80: aload_0
      81: aload_0
      82: getfield      #10                 // Field myAppendable:Lcom/vladsch/flexmark/util/html/LengthTrackingAppendable;
      85: invokeinterface #90,  1           // InterfaceMethod com/vladsch/flexmark/util/html/LengthTrackingAppendable.getLength:()I
      90: putfield      #26                 // Field myOffsetBefore:I
      93: aload_0
      94: iconst_0
      95: iconst_0
      96: invokespecial #85                 // Method appendEOL:(ZZ)V
      99: goto          108
     102: astore_3
     103: aload_0
     104: aload_3
     105: invokespecial #109                // Method setIOException:(Ljava/io/IOException;)V
     108: aload_0
     109: areturn
    Exception table:
       from    to  target type
          73    99   102   Class java/io/IOException

  public java.lang.CharSequence getIndentPrefix();
    Code:
       0: aload_0
       1: getfield      #36                 // Field myIndentPrefix:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable setIndentPrefix(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #121                // Method com/vladsch/flexmark/util/sequence/CharSubSequence.of:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/sequence/CharSubSequence;
       5: putfield      #36                 // Field myIndentPrefix:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       8: aload_0
       9: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence getPrefix();
    Code:
       0: aload_0
       1: getfield      #1                  // Field myPrefix:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: areturn

  public java.lang.CharSequence getTotalIndentPrefix();
    Code:
       0: new           #2                  // class java/lang/StringBuilder
       3: dup
       4: invokespecial #3                  // Method java/lang/StringBuilder."<init>":()V
       7: astore_1
       8: aload_1
       9: aload_0
      10: getfield      #36                 // Field myIndentPrefix:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      13: aload_0
      14: getfield      #32                 // Field myIndent:I
      17: invokestatic  #122                // Method com/vladsch/flexmark/util/sequence/RepeatedCharSequence.of:(Ljava/lang/CharSequence;I)Lcom/vladsch/flexmark/util/sequence/RepeatedCharSequence;
      20: invokevirtual #123                // Method java/lang/StringBuilder.append:(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;
      23: pop
      24: aload_1
      25: invokevirtual #124                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      28: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable setPrefix(java.lang.CharSequence);
    Code:
       0: aload_1
       1: invokestatic  #121                // Method com/vladsch/flexmark/util/sequence/CharSubSequence.of:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/sequence/CharSubSequence;
       4: astore_2
       5: aload_0
       6: getfield      #27                 // Field myPendingEOL:I
       9: ifle          37
      12: aload_0
      13: invokespecial #125                // Method isPrefixAfterPendingEol:()Z
      16: ifeq          37
      19: aload_0
      20: iconst_0
      21: new           #126                // class com/vladsch/flexmark/util/html/FormattingAppendableImpl$1
      24: dup
      25: aload_0
      26: aload_2
      27: invokespecial #127                // Method com/vladsch/flexmark/util/html/FormattingAppendableImpl$1."<init>":(Lcom/vladsch/flexmark/util/html/FormattingAppendableImpl;Lcom/vladsch/flexmark/util/sequence/CharSubSequence;)V
      30: invokevirtual #128                // Method addAfterEolRunnable:(ILjava/lang/Runnable;)Lcom/vladsch/flexmark/util/html/FormattingAppendableImpl;
      33: pop
      34: goto          42
      37: aload_0
      38: aload_2
      39: putfield      #1                  // Field myPrefix:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      42: aload_0
      43: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable addPrefix(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #1                  // Field myPrefix:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       5: iconst_1
       6: anewarray     #129                // class java/lang/CharSequence
       9: dup
      10: iconst_0
      11: aload_1
      12: aastore
      13: invokeinterface #130,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.append:([Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      18: invokevirtual #131                // Method setPrefix:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      21: pop
      22: aload_0
      23: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable pushPrefix();
    Code:
       0: aload_0
       1: getfield      #15                 // Field myPrefixStack:Ljava/util/Stack;
       4: aload_0
       5: getfield      #1                  // Field myPrefix:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       8: invokevirtual #132                // Method java/util/Stack.push:(Ljava/lang/Object;)Ljava/lang/Object;
      11: pop
      12: aload_0
      13: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable popPrefix();
    Code:
       0: aload_0
       1: getfield      #15                 // Field myPrefixStack:Ljava/util/Stack;
       4: invokevirtual #133                // Method java/util/Stack.isEmpty:()Z
       7: ifeq          20
      10: new           #134                // class java/lang/IllegalStateException
      13: dup
      14: ldc           #135                // String popPrefix with an empty stack
      16: invokespecial #136                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      19: athrow
      20: aload_0
      21: getfield      #15                 // Field myPrefixStack:Ljava/util/Stack;
      24: invokevirtual #137                // Method java/util/Stack.pop:()Ljava/lang/Object;
      27: checkcast     #41                 // class com/vladsch/flexmark/util/sequence/BasedSequence
      30: astore_1
      31: aload_0
      32: aload_1
      33: invokevirtual #131                // Method setPrefix:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      36: pop
      37: aload_0
      38: areturn

  public int getPushedPrefixCount();
    Code:
       0: aload_0
       1: getfield      #15                 // Field myPrefixStack:Ljava/util/Stack;
       4: invokevirtual #71                 // Method java/util/Stack.size:()I
       7: ireturn

  public com.vladsch.flexmark.util.html.FormattingAppendable line();
    Code:
       0: aload_0
       1: iconst_1
       2: invokespecial #93                 // Method setPendingEOL:(I)V
       5: aload_0
       6: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable addLine();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #27                 // Field myPendingEOL:I
       5: iconst_1
       6: iadd
       7: invokespecial #93                 // Method setPendingEOL:(I)V
      10: aload_0
      11: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable lineIf(boolean);
    Code:
       0: iload_1
       1: ifeq          9
       4: aload_0
       5: invokevirtual #138                // Method line:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       8: pop
       9: aload_0
      10: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable line(com.vladsch.flexmark.util.Ref<java.lang.Boolean>);
    Code:
       0: aload_1
       1: iconst_1
       2: invokestatic  #83                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       5: putfield      #84                 // Field com/vladsch/flexmark/util/Ref.value:Ljava/lang/Object;
       8: aload_0
       9: getfield      #13                 // Field myConditionalFrames:Ljava/util/Stack;
      12: invokevirtual #71                 // Method java/util/Stack.size:()I
      15: ifle          63
      18: aload_0
      19: getfield      #13                 // Field myConditionalFrames:Ljava/util/Stack;
      22: invokevirtual #72                 // Method java/util/Stack.peek:()Ljava/lang/Object;
      25: checkcast     #73                 // class com/vladsch/flexmark/util/html/FormattingAppendableImpl$ConditionalFrame
      28: astore_2
      29: aload_2
      30: getfield      #75                 // Field com/vladsch/flexmark/util/html/FormattingAppendableImpl$ConditionalFrame.myModCount:I
      33: aload_0
      34: getfield      #25                 // Field myModCount:I
      37: if_icmpne     63
      40: aload_2
      41: getfield      #82                 // Field com/vladsch/flexmark/util/html/FormattingAppendableImpl$ConditionalFrame.myLineRef:Lcom/vladsch/flexmark/util/Ref;
      44: ifnull        58
      47: aload_2
      48: getfield      #82                 // Field com/vladsch/flexmark/util/html/FormattingAppendableImpl$ConditionalFrame.myLineRef:Lcom/vladsch/flexmark/util/Ref;
      51: iconst_0
      52: invokestatic  #83                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      55: putfield      #84                 // Field com/vladsch/flexmark/util/Ref.value:Ljava/lang/Object;
      58: aload_2
      59: aload_1
      60: putfield      #82                 // Field com/vladsch/flexmark/util/html/FormattingAppendableImpl$ConditionalFrame.myLineRef:Lcom/vladsch/flexmark/util/Ref;
      63: aload_0
      64: iconst_1
      65: invokespecial #93                 // Method setPendingEOL:(I)V
      68: aload_0
      69: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable lineIf(com.vladsch.flexmark.util.Ref<java.lang.Boolean>);
    Code:
       0: aload_1
       1: getfield      #84                 // Field com/vladsch/flexmark/util/Ref.value:Ljava/lang/Object;
       4: checkcast     #139                // class java/lang/Boolean
       7: invokevirtual #140                // Method java/lang/Boolean.booleanValue:()Z
      10: ifeq          18
      13: aload_0
      14: invokevirtual #138                // Method line:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      17: pop
      18: aload_0
      19: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable blankLine();
    Code:
       0: aload_0
       1: iconst_2
       2: invokespecial #93                 // Method setPendingEOL:(I)V
       5: aload_0
       6: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable blankLineIf(boolean);
    Code:
       0: iload_1
       1: ifeq          9
       4: aload_0
       5: invokevirtual #141                // Method blankLine:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       8: pop
       9: aload_0
      10: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable blankLine(int);
    Code:
       0: iload_1
       1: ifle          11
       4: aload_0
       5: iload_1
       6: iconst_1
       7: iadd
       8: invokespecial #93                 // Method setPendingEOL:(I)V
      11: aload_0
      12: areturn

  public int getIndent();
    Code:
       0: aload_0
       1: getfield      #32                 // Field myIndent:I
       4: aload_0
       5: getfield      #34                 // Field myIndentOffset:I
       8: iadd
       9: ireturn

  public com.vladsch.flexmark.util.html.FormattingAppendable setIndentOffset(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #34                 // Field myIndentOffset:I
       5: aload_0
       6: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable indent();
    Code:
       0: aload_0
       1: getfield      #37                 // Field myPreFormattedNesting:I
       4: ifeq          17
       7: new           #134                // class java/lang/IllegalStateException
      10: dup
      11: ldc           #142                // String indent should not be called inside preFormatted
      13: invokespecial #136                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: invokevirtual #138                // Method line:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      21: pop
      22: aload_0
      23: dup
      24: getfield      #32                 // Field myIndent:I
      27: iconst_1
      28: iadd
      29: putfield      #32                 // Field myIndent:I
      32: aload_0
      33: getfield      #14                 // Field myIndentLineCounts:Ljava/util/Stack;
      36: aload_0
      37: getfield      #29                 // Field myLineCount:I
      40: invokestatic  #54                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      43: invokevirtual #132                // Method java/util/Stack.push:(Ljava/lang/Object;)Ljava/lang/Object;
      46: pop
      47: aload_0
      48: iconst_0
      49: putfield      #33                 // Field myWillIndent:Z
      52: aload_0
      53: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable willIndent();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #33                 // Field myWillIndent:Z
       5: aload_0
       6: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable unIndent();
    Code:
       0: aload_0
       1: getfield      #32                 // Field myIndent:I
       4: ifgt          17
       7: new           #134                // class java/lang/IllegalStateException
      10: dup
      11: ldc           #143                // String unIndent called with nesting == 0
      13: invokespecial #136                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #37                 // Field myPreFormattedNesting:I
      21: ifeq          34
      24: new           #134                // class java/lang/IllegalStateException
      27: dup
      28: ldc           #144                // String unIndent should not be called inside preFormatted
      30: invokespecial #136                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      33: athrow
      34: aload_0
      35: getfield      #14                 // Field myIndentLineCounts:Ljava/util/Stack;
      38: invokevirtual #137                // Method java/util/Stack.pop:()Ljava/lang/Object;
      41: checkcast     #145                // class java/lang/Integer
      44: invokevirtual #146                // Method java/lang/Integer.intValue:()I
      47: istore_1
      48: iload_1
      49: aload_0
      50: getfield      #29                 // Field myLineCount:I
      53: if_icmpne     68
      56: aload_0
      57: iconst_0
      58: putfield      #27                 // Field myPendingEOL:I
      61: aload_0
      62: invokespecial #67                 // Method runAllAfterEol:()V
      65: goto          73
      68: aload_0
      69: invokevirtual #138                // Method line:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      72: pop
      73: aload_0
      74: dup
      75: getfield      #32                 // Field myIndent:I
      78: iconst_1
      79: isub
      80: putfield      #32                 // Field myIndent:I
      83: aload_0
      84: areturn

  public int getModCount();
    Code:
       0: aload_0
       1: getfield      #25                 // Field myModCount:I
       4: ireturn

  public int getLineCount();
    Code:
       0: aload_0
       1: getfield      #29                 // Field myLineCount:I
       4: ireturn

  public com.vladsch.flexmark.util.html.FormattingAppendable lastOffset(com.vladsch.flexmark.util.Ref<java.lang.Integer>);
    Code:
       0: aload_0
       1: getfield      #18                 // Field myOffsetBeforeList:Ljava/util/ArrayList;
       4: aload_1
       5: invokevirtual #147                // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
       8: pop
       9: aload_0
      10: areturn

  public int lastOffset();
    Code:
       0: aload_0
       1: getfield      #26                 // Field myOffsetBefore:I
       4: ireturn

  public int offset();
    Code:
       0: aload_0
       1: getfield      #10                 // Field myAppendable:Lcom/vladsch/flexmark/util/html/LengthTrackingAppendable;
       4: invokeinterface #90,  1           // InterfaceMethod com/vladsch/flexmark/util/html/LengthTrackingAppendable.getLength:()I
       9: ireturn

  public com.vladsch.flexmark.util.html.FormattingAppendable openPreFormatted(boolean);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #10                 // Field myAppendable:Lcom/vladsch/flexmark/util/html/LengthTrackingAppendable;
       5: invokeinterface #90,  1           // InterfaceMethod com/vladsch/flexmark/util/html/LengthTrackingAppendable.getLength:()I
      10: invokespecial #91                 // Method setOffsetBefore:(I)V
      13: iload_1
      14: ifne          33
      17: aload_0
      18: aload_0
      19: getfield      #27                 // Field myPendingEOL:I
      22: ifle          29
      25: iconst_1
      26: goto          30
      29: iconst_0
      30: putfield      #28                 // Field myPendingPreFormattedPrefix:Z
      33: aload_0
      34: iconst_1
      35: iload_1
      36: iload_1
      37: invokespecial #96                 // Method beforeAppendText:(ZZZ)V
      40: goto          49
      43: astore_2
      44: aload_0
      45: aload_2
      46: invokespecial #109                // Method setIOException:(Ljava/io/IOException;)V
      49: aload_0
      50: iconst_0
      51: putfield      #52                 // Field myPendingSpaces:I
      54: aload_0
      55: iconst_0
      56: putfield      #27                 // Field myPendingEOL:I
      59: aload_0
      60: invokespecial #67                 // Method runAllAfterEol:()V
      63: aload_0
      64: dup
      65: getfield      #37                 // Field myPreFormattedNesting:I
      68: iconst_1
      69: iadd
      70: putfield      #37                 // Field myPreFormattedNesting:I
      73: aload_0
      74: areturn
    Exception table:
       from    to  target type
           0    40    43   Class java/io/IOException

  public com.vladsch.flexmark.util.html.FormattingAppendable closePreFormatted();
    Code:
       0: aload_0
       1: getfield      #37                 // Field myPreFormattedNesting:I
       4: ifgt          17
       7: new           #134                // class java/lang/IllegalStateException
      10: dup
      11: ldc           #148                // String closePreFormatted called with nesting == 0
      13: invokespecial #136                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: iconst_0
      19: putfield      #28                 // Field myPendingPreFormattedPrefix:Z
      22: aload_0
      23: dup
      24: getfield      #37                 // Field myPreFormattedNesting:I
      27: iconst_1
      28: isub
      29: putfield      #37                 // Field myPreFormattedNesting:I
      32: aload_0
      33: areturn

  public boolean isPendingSpace();
    Code:
       0: aload_0
       1: getfield      #52                 // Field myPendingSpaces:I
       4: ifle          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public boolean isPendingEOL();
    Code:
       0: aload_0
       1: getfield      #27                 // Field myPendingEOL:I
       4: ifle          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public int getPendingEOL();
    Code:
       0: aload_0
       1: getfield      #27                 // Field myPendingEOL:I
       4: ireturn

  public boolean isPreFormatted();
    Code:
       0: aload_0
       1: getfield      #37                 // Field myPreFormattedNesting:I
       4: ifle          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public com.vladsch.flexmark.util.html.FormattingAppendable openConditional(com.vladsch.flexmark.util.html.ConditionalFormatter);
    Code:
       0: new           #73                 // class com/vladsch/flexmark/util/html/FormattingAppendableImpl$ConditionalFrame
       3: dup
       4: aload_1
       5: aload_0
       6: getfield      #25                 // Field myModCount:I
       9: aload_0
      10: getfield      #32                 // Field myIndent:I
      13: aload_0
      14: getfield      #29                 // Field myLineCount:I
      17: invokespecial #149                // Method com/vladsch/flexmark/util/html/FormattingAppendableImpl$ConditionalFrame."<init>":(Lcom/vladsch/flexmark/util/html/ConditionalFormatter;III)V
      20: astore_2
      21: aload_0
      22: getfield      #13                 // Field myConditionalFrames:Ljava/util/Stack;
      25: aload_2
      26: invokevirtual #132                // Method java/util/Stack.push:(Ljava/lang/Object;)Ljava/lang/Object;
      29: pop
      30: aload_0
      31: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable closeConditional(com.vladsch.flexmark.util.html.ConditionalFormatter);
    Code:
       0: aload_0
       1: getfield      #13                 // Field myConditionalFrames:Ljava/util/Stack;
       4: invokevirtual #71                 // Method java/util/Stack.size:()I
       7: ifne          20
      10: new           #134                // class java/lang/IllegalStateException
      13: dup
      14: ldc           #150                // String closeConditional called with no conditionals open
      16: invokespecial #136                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      19: athrow
      20: aload_0
      21: getfield      #13                 // Field myConditionalFrames:Ljava/util/Stack;
      24: invokevirtual #137                // Method java/util/Stack.pop:()Ljava/lang/Object;
      27: checkcast     #73                 // class com/vladsch/flexmark/util/html/FormattingAppendableImpl$ConditionalFrame
      30: astore_2
      31: aload_1
      32: iconst_1
      33: aload_2
      34: getfield      #76                 // Field com/vladsch/flexmark/util/html/FormattingAppendableImpl$ConditionalFrame.myOnIndent:Z
      37: aload_2
      38: getfield      #79                 // Field com/vladsch/flexmark/util/html/FormattingAppendableImpl$ConditionalFrame.myOnLine:Z
      41: aload_2
      42: getfield      #75                 // Field com/vladsch/flexmark/util/html/FormattingAppendableImpl$ConditionalFrame.myModCount:I
      45: aload_0
      46: getfield      #25                 // Field myModCount:I
      49: if_icmpeq     56
      52: iconst_1
      53: goto          57
      56: iconst_0
      57: invokeinterface #81,  5           // InterfaceMethod com/vladsch/flexmark/util/html/ConditionalFormatter.apply:(ZZZZ)V
      62: aload_0
      63: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable addAfterEolRunnable(int, java.lang.Runnable);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokevirtual #128                // Method addAfterEolRunnable:(ILjava/lang/Runnable;)Lcom/vladsch/flexmark/util/html/FormattingAppendableImpl;
       6: areturn

  public java.lang.CharSequence getPrefix();
    Code:
       0: aload_0
       1: invokevirtual #151                // Method getPrefix:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: areturn

  public java.lang.Appendable append(char) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #111                // Method append:(C)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       5: areturn

  public java.lang.Appendable append(java.lang.CharSequence, int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: invokevirtual #113                // Method append:(Ljava/lang/CharSequence;II)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       7: areturn

  public java.lang.Appendable append(java.lang.CharSequence) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #112                // Method append:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       5: areturn

  static com.vladsch.flexmark.util.sequence.BasedSequence access$002(com.vladsch.flexmark.util.html.FormattingAppendableImpl, com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #1                  // Field myPrefix:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       6: areturn

  static {};
    Code:
       0: ldc           #152                // class com/vladsch/flexmark/util/html/FormattingAppendableImpl
       2: invokevirtual #153                // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #118                // Field $assertionsDisabled:Z
      16: return
}
