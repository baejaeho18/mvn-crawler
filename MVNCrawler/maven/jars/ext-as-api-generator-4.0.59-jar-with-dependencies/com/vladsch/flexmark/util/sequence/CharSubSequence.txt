Compiled from "CharSubSequence.java"
public final class com.vladsch.flexmark.util.sequence.CharSubSequence extends com.vladsch.flexmark.util.sequence.BasedSequenceImpl {
  private final char[] baseChars;

  private final com.vladsch.flexmark.util.sequence.CharSubSequence base;

  private final int startOffset;

  private final int endOffset;

  static final boolean $assertionsDisabled;

  public com.vladsch.flexmark.util.sequence.CharSubSequence getBaseSequence();
    Code:
       0: aload_0
       1: getfield      #1                  // Field base:Lcom/vladsch/flexmark/util/sequence/CharSubSequence;
       4: areturn

  public char[] getBase();
    Code:
       0: aload_0
       1: getfield      #2                  // Field baseChars:[C
       4: areturn

  public int getStartOffset();
    Code:
       0: aload_0
       1: getfield      #3                  // Field startOffset:I
       4: ireturn

  public int getEndOffset();
    Code:
       0: aload_0
       1: getfield      #4                  // Field endOffset:I
       4: ireturn

  private com.vladsch.flexmark.util.sequence.CharSubSequence(char[]);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method com/vladsch/flexmark/util/sequence/BasedSequenceImpl."<init>":()V
       4: aload_1
       5: arraylength
       6: istore_2
       7: iconst_0
       8: istore_3
       9: iload_3
      10: iload_2
      11: if_icmpge     31
      14: aload_1
      15: iload_3
      16: caload
      17: ifne          25
      20: aload_1
      21: iload_3
      22: ldc           #6                  // int 65533
      24: castore
      25: iinc          3, 1
      28: goto          9
      31: aload_0
      32: aload_1
      33: putfield      #2                  // Field baseChars:[C
      36: aload_0
      37: iconst_0
      38: putfield      #3                  // Field startOffset:I
      41: aload_0
      42: aload_0
      43: getfield      #2                  // Field baseChars:[C
      46: arraylength
      47: putfield      #4                  // Field endOffset:I
      50: aload_0
      51: aload_0
      52: putfield      #1                  // Field base:Lcom/vladsch/flexmark/util/sequence/CharSubSequence;
      55: return

  private com.vladsch.flexmark.util.sequence.CharSubSequence(com.vladsch.flexmark.util.sequence.CharSubSequence, int, int);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method com/vladsch/flexmark/util/sequence/BasedSequenceImpl."<init>":()V
       4: getstatic     #7                  // Field $assertionsDisabled:Z
       7: ifne          30
      10: iload_2
      11: ifgt          30
      14: iload_3
      15: aload_1
      16: invokevirtual #8                  // Method length:()I
      19: if_icmplt     30
      22: new           #9                  // class java/lang/AssertionError
      25: dup
      26: invokespecial #10                 // Method java/lang/AssertionError."<init>":()V
      29: athrow
      30: aload_0
      31: aload_1
      32: putfield      #1                  // Field base:Lcom/vladsch/flexmark/util/sequence/CharSubSequence;
      35: aload_0
      36: aload_1
      37: getfield      #2                  // Field baseChars:[C
      40: putfield      #2                  // Field baseChars:[C
      43: aload_0
      44: aload_0
      45: getfield      #1                  // Field base:Lcom/vladsch/flexmark/util/sequence/CharSubSequence;
      48: getfield      #3                  // Field startOffset:I
      51: iload_2
      52: iadd
      53: putfield      #3                  // Field startOffset:I
      56: aload_0
      57: aload_0
      58: getfield      #1                  // Field base:Lcom/vladsch/flexmark/util/sequence/CharSubSequence;
      61: getfield      #3                  // Field startOffset:I
      64: iload_3
      65: iadd
      66: putfield      #4                  // Field endOffset:I
      69: return

  public int length();
    Code:
       0: aload_0
       1: getfield      #4                  // Field endOffset:I
       4: aload_0
       5: getfield      #3                  // Field startOffset:I
       8: isub
       9: ireturn

  public com.vladsch.flexmark.util.sequence.Range getSourceRange();
    Code:
       0: new           #11                 // class com/vladsch/flexmark/util/sequence/Range
       3: dup
       4: aload_0
       5: getfield      #3                  // Field startOffset:I
       8: aload_0
       9: getfield      #4                  // Field endOffset:I
      12: invokespecial #12                 // Method com/vladsch/flexmark/util/sequence/Range."<init>":(II)V
      15: areturn

  public int getIndexOffset(int);
    Code:
       0: iload_1
       1: ifge          17
       4: iload_1
       5: aload_0
       6: getfield      #4                  // Field endOffset:I
       9: aload_0
      10: getfield      #3                  // Field startOffset:I
      13: isub
      14: if_icmpgt     24
      17: aload_0
      18: getfield      #3                  // Field startOffset:I
      21: iload_1
      22: iadd
      23: ireturn
      24: new           #13                 // class java/lang/StringIndexOutOfBoundsException
      27: dup
      28: new           #14                 // class java/lang/StringBuilder
      31: dup
      32: invokespecial #15                 // Method java/lang/StringBuilder."<init>":()V
      35: ldc           #16                 // String SubCharSequence index:
      37: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      40: iload_1
      41: invokevirtual #18                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      44: ldc           #19                 // String  out of range: 0,
      46: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      49: aload_0
      50: invokevirtual #8                  // Method length:()I
      53: invokevirtual #18                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      56: invokevirtual #20                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      59: invokespecial #21                 // Method java/lang/StringIndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      62: athrow

  public char charAt(int);
    Code:
       0: iload_1
       1: ifge          17
       4: iload_1
       5: aload_0
       6: getfield      #4                  // Field endOffset:I
       9: aload_0
      10: getfield      #3                  // Field startOffset:I
      13: isub
      14: if_icmpge     29
      17: aload_0
      18: getfield      #2                  // Field baseChars:[C
      21: iload_1
      22: aload_0
      23: getfield      #3                  // Field startOffset:I
      26: iadd
      27: caload
      28: ireturn
      29: new           #13                 // class java/lang/StringIndexOutOfBoundsException
      32: dup
      33: new           #14                 // class java/lang/StringBuilder
      36: dup
      37: invokespecial #15                 // Method java/lang/StringBuilder."<init>":()V
      40: ldc           #16                 // String SubCharSequence index:
      42: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      45: iload_1
      46: invokevirtual #18                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      49: ldc           #19                 // String  out of range: 0,
      51: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      54: aload_0
      55: invokevirtual #8                  // Method length:()I
      58: invokevirtual #18                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      61: invokevirtual #20                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      64: invokespecial #21                 // Method java/lang/StringIndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      67: athrow

  public com.vladsch.flexmark.util.sequence.CharSubSequence subSequence(com.vladsch.flexmark.util.sequence.Range);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #22                 // Method com/vladsch/flexmark/util/sequence/Range.getStart:()I
       5: aload_1
       6: invokevirtual #23                 // Method com/vladsch/flexmark/util/sequence/Range.getEnd:()I
       9: invokevirtual #24                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/CharSubSequence;
      12: areturn

  public com.vladsch.flexmark.util.sequence.CharSubSequence subSequence(int);
    Code:
       0: aload_0
       1: iload_1
       2: aload_0
       3: invokevirtual #8                  // Method length:()I
       6: invokevirtual #24                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/CharSubSequence;
       9: areturn

  public com.vladsch.flexmark.util.sequence.CharSubSequence subSequence(int, int);
    Code:
       0: iload_1
       1: iflt          37
       4: iload_2
       5: aload_0
       6: getfield      #4                  // Field endOffset:I
       9: aload_0
      10: getfield      #3                  // Field startOffset:I
      13: isub
      14: if_icmpgt     37
      17: aload_0
      18: getfield      #1                  // Field base:Lcom/vladsch/flexmark/util/sequence/CharSubSequence;
      21: aload_0
      22: getfield      #3                  // Field startOffset:I
      25: iload_1
      26: iadd
      27: aload_0
      28: getfield      #3                  // Field startOffset:I
      31: iload_2
      32: iadd
      33: invokevirtual #25                 // Method baseSubSequence:(II)Lcom/vladsch/flexmark/util/sequence/CharSubSequence;
      36: areturn
      37: iload_1
      38: iflt          54
      41: aload_0
      42: getfield      #3                  // Field startOffset:I
      45: iload_1
      46: iadd
      47: aload_0
      48: getfield      #4                  // Field endOffset:I
      51: if_icmple     93
      54: new           #13                 // class java/lang/StringIndexOutOfBoundsException
      57: dup
      58: new           #14                 // class java/lang/StringBuilder
      61: dup
      62: invokespecial #15                 // Method java/lang/StringBuilder."<init>":()V
      65: ldc           #16                 // String SubCharSequence index:
      67: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      70: iload_1
      71: invokevirtual #18                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      74: ldc           #19                 // String  out of range: 0,
      76: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      79: aload_0
      80: invokevirtual #8                  // Method length:()I
      83: invokevirtual #18                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      86: invokevirtual #20                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      89: invokespecial #21                 // Method java/lang/StringIndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      92: athrow
      93: new           #13                 // class java/lang/StringIndexOutOfBoundsException
      96: dup
      97: new           #14                 // class java/lang/StringBuilder
     100: dup
     101: invokespecial #15                 // Method java/lang/StringBuilder."<init>":()V
     104: ldc           #16                 // String SubCharSequence index:
     106: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     109: iload_2
     110: invokevirtual #18                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     113: ldc           #19                 // String  out of range: 0,
     115: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     118: aload_0
     119: invokevirtual #8                  // Method length:()I
     122: invokevirtual #18                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     125: invokevirtual #20                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     128: invokespecial #21                 // Method java/lang/StringIndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
     131: athrow

  public com.vladsch.flexmark.util.sequence.CharSubSequence baseSubSequence(int, int);
    Code:
       0: iload_1
       1: iflt          67
       4: iload_2
       5: aload_0
       6: getfield      #2                  // Field baseChars:[C
       9: arraylength
      10: if_icmpgt     67
      13: iload_1
      14: aload_0
      15: getfield      #3                  // Field startOffset:I
      18: if_icmpne     33
      21: iload_2
      22: aload_0
      23: getfield      #4                  // Field endOffset:I
      26: if_icmpne     33
      29: aload_0
      30: goto          66
      33: aload_0
      34: getfield      #1                  // Field base:Lcom/vladsch/flexmark/util/sequence/CharSubSequence;
      37: aload_0
      38: if_acmpeq     53
      41: aload_0
      42: getfield      #1                  // Field base:Lcom/vladsch/flexmark/util/sequence/CharSubSequence;
      45: iload_1
      46: iload_2
      47: invokevirtual #25                 // Method baseSubSequence:(II)Lcom/vladsch/flexmark/util/sequence/CharSubSequence;
      50: goto          66
      53: new           #26                 // class com/vladsch/flexmark/util/sequence/CharSubSequence
      56: dup
      57: aload_0
      58: getfield      #1                  // Field base:Lcom/vladsch/flexmark/util/sequence/CharSubSequence;
      61: iload_1
      62: iload_2
      63: invokespecial #27                 // Method "<init>":(Lcom/vladsch/flexmark/util/sequence/CharSubSequence;II)V
      66: areturn
      67: iload_1
      68: iflt          82
      71: iload_1
      72: aload_0
      73: getfield      #1                  // Field base:Lcom/vladsch/flexmark/util/sequence/CharSubSequence;
      76: invokevirtual #8                  // Method length:()I
      79: if_icmple     121
      82: new           #13                 // class java/lang/StringIndexOutOfBoundsException
      85: dup
      86: new           #14                 // class java/lang/StringBuilder
      89: dup
      90: invokespecial #15                 // Method java/lang/StringBuilder."<init>":()V
      93: ldc           #16                 // String SubCharSequence index:
      95: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      98: iload_1
      99: invokevirtual #18                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     102: ldc           #19                 // String  out of range: 0,
     104: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     107: aload_0
     108: invokevirtual #8                  // Method length:()I
     111: invokevirtual #18                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     114: invokevirtual #20                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     117: invokespecial #21                 // Method java/lang/StringIndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
     120: athrow
     121: new           #13                 // class java/lang/StringIndexOutOfBoundsException
     124: dup
     125: new           #14                 // class java/lang/StringBuilder
     128: dup
     129: invokespecial #15                 // Method java/lang/StringBuilder."<init>":()V
     132: ldc           #16                 // String SubCharSequence index:
     134: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     137: iload_2
     138: invokevirtual #18                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     141: ldc           #19                 // String  out of range: 0,
     143: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     146: aload_0
     147: invokevirtual #8                  // Method length:()I
     150: invokevirtual #18                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     153: invokevirtual #20                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     156: invokespecial #21                 // Method java/lang/StringIndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
     159: athrow

  public com.vladsch.flexmark.util.sequence.BasedSequence appendTo(java.lang.StringBuilder, int, int);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #2                  // Field baseChars:[C
       5: aload_0
       6: getfield      #3                  // Field startOffset:I
       9: iload_2
      10: iadd
      11: iload_3
      12: iload_2
      13: isub
      14: invokevirtual #28                 // Method java/lang/StringBuilder.append:([CII)Ljava/lang/StringBuilder;
      17: pop
      18: aload_0
      19: areturn

  public int hashCode();
    Code:
       0: aload_0
       1: invokevirtual #29                 // Method toString:()Ljava/lang/String;
       4: invokevirtual #30                 // Method java/lang/String.hashCode:()I
       7: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: aload_0
       2: if_acmpeq     26
       5: aload_1
       6: instanceof    #31                 // class java/lang/CharSequence
       9: ifeq          30
      12: aload_0
      13: invokevirtual #29                 // Method toString:()Ljava/lang/String;
      16: aload_1
      17: invokevirtual #32                 // Method java/lang/Object.toString:()Ljava/lang/String;
      20: invokevirtual #33                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      23: ifeq          30
      26: iconst_1
      27: goto          31
      30: iconst_0
      31: ireturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #2                  // Field baseChars:[C
       4: aload_0
       5: getfield      #3                  // Field startOffset:I
       8: aload_0
       9: getfield      #4                  // Field endOffset:I
      12: aload_0
      13: getfield      #3                  // Field startOffset:I
      16: isub
      17: invokestatic  #34                 // Method java/lang/String.valueOf:([CII)Ljava/lang/String;
      20: areturn

  public static com.vladsch.flexmark.util.sequence.CharSubSequence of(java.lang.CharSequence);
    Code:
       0: aload_0
       1: iconst_0
       2: aload_0
       3: invokeinterface #35,  1           // InterfaceMethod java/lang/CharSequence.length:()I
       8: invokestatic  #36                 // Method of:(Ljava/lang/CharSequence;II)Lcom/vladsch/flexmark/util/sequence/CharSubSequence;
      11: areturn

  public static com.vladsch.flexmark.util.sequence.CharSubSequence of(java.lang.CharSequence, int);
    Code:
       0: aload_0
       1: iload_1
       2: aload_0
       3: invokeinterface #35,  1           // InterfaceMethod java/lang/CharSequence.length:()I
       8: invokestatic  #36                 // Method of:(Ljava/lang/CharSequence;II)Lcom/vladsch/flexmark/util/sequence/CharSubSequence;
      11: areturn

  public static com.vladsch.flexmark.util.sequence.CharSubSequence of(char[], int, int);
    Code:
       0: aload_0
       1: arraylength
       2: newarray       char
       4: astore_3
       5: aload_0
       6: iconst_0
       7: aload_3
       8: iconst_0
       9: aload_0
      10: arraylength
      11: invokestatic  #37                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      14: iload_1
      15: ifne          35
      18: iload_2
      19: aload_0
      20: arraylength
      21: if_icmpne     35
      24: new           #26                 // class com/vladsch/flexmark/util/sequence/CharSubSequence
      27: dup
      28: aload_3
      29: invokespecial #38                 // Method "<init>":([C)V
      32: goto          48
      35: new           #26                 // class com/vladsch/flexmark/util/sequence/CharSubSequence
      38: dup
      39: aload_3
      40: invokespecial #38                 // Method "<init>":([C)V
      43: iload_1
      44: iload_2
      45: invokevirtual #24                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/CharSubSequence;
      48: areturn

  public static com.vladsch.flexmark.util.sequence.CharSubSequence of(java.lang.CharSequence, int, int);
    Code:
       0: iload_1
       1: ifne          106
       4: iload_2
       5: aload_0
       6: invokeinterface #35,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      11: if_icmpne     106
      14: aload_0
      15: instanceof    #26                 // class com/vladsch/flexmark/util/sequence/CharSubSequence
      18: ifeq          26
      21: aload_0
      22: checkcast     #26                 // class com/vladsch/flexmark/util/sequence/CharSubSequence
      25: areturn
      26: aload_0
      27: instanceof    #39                 // class java/lang/String
      30: ifeq          48
      33: new           #26                 // class com/vladsch/flexmark/util/sequence/CharSubSequence
      36: dup
      37: aload_0
      38: checkcast     #39                 // class java/lang/String
      41: invokevirtual #40                 // Method java/lang/String.toCharArray:()[C
      44: invokespecial #38                 // Method "<init>":([C)V
      47: areturn
      48: aload_0
      49: instanceof    #14                 // class java/lang/StringBuilder
      52: ifeq          89
      55: aload_0
      56: invokeinterface #35,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      61: newarray       char
      63: astore_3
      64: aload_0
      65: checkcast     #14                 // class java/lang/StringBuilder
      68: iconst_0
      69: aload_0
      70: invokeinterface #35,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      75: aload_3
      76: iconst_0
      77: invokevirtual #41                 // Method java/lang/StringBuilder.getChars:(II[CI)V
      80: new           #26                 // class com/vladsch/flexmark/util/sequence/CharSubSequence
      83: dup
      84: aload_3
      85: invokespecial #38                 // Method "<init>":([C)V
      88: areturn
      89: new           #26                 // class com/vladsch/flexmark/util/sequence/CharSubSequence
      92: dup
      93: aload_0
      94: invokeinterface #42,  1           // InterfaceMethod java/lang/CharSequence.toString:()Ljava/lang/String;
      99: invokevirtual #40                 // Method java/lang/String.toCharArray:()[C
     102: invokespecial #38                 // Method "<init>":([C)V
     105: areturn
     106: aload_0
     107: instanceof    #26                 // class com/vladsch/flexmark/util/sequence/CharSubSequence
     110: ifeq          123
     113: aload_0
     114: checkcast     #26                 // class com/vladsch/flexmark/util/sequence/CharSubSequence
     117: iload_1
     118: iload_2
     119: invokevirtual #24                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/CharSubSequence;
     122: areturn
     123: aload_0
     124: instanceof    #39                 // class java/lang/String
     127: ifeq          150
     130: new           #26                 // class com/vladsch/flexmark/util/sequence/CharSubSequence
     133: dup
     134: aload_0
     135: checkcast     #39                 // class java/lang/String
     138: invokevirtual #40                 // Method java/lang/String.toCharArray:()[C
     141: invokespecial #38                 // Method "<init>":([C)V
     144: iload_1
     145: iload_2
     146: invokevirtual #24                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/CharSubSequence;
     149: areturn
     150: aload_0
     151: instanceof    #14                 // class java/lang/StringBuilder
     154: ifeq          196
     157: aload_0
     158: invokeinterface #35,  1           // InterfaceMethod java/lang/CharSequence.length:()I
     163: newarray       char
     165: astore_3
     166: aload_0
     167: checkcast     #14                 // class java/lang/StringBuilder
     170: iconst_0
     171: aload_0
     172: invokeinterface #35,  1           // InterfaceMethod java/lang/CharSequence.length:()I
     177: aload_3
     178: iconst_0
     179: invokevirtual #41                 // Method java/lang/StringBuilder.getChars:(II[CI)V
     182: new           #26                 // class com/vladsch/flexmark/util/sequence/CharSubSequence
     185: dup
     186: aload_3
     187: invokespecial #38                 // Method "<init>":([C)V
     190: iload_1
     191: iload_2
     192: invokevirtual #24                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/CharSubSequence;
     195: areturn
     196: new           #26                 // class com/vladsch/flexmark/util/sequence/CharSubSequence
     199: dup
     200: aload_0
     201: invokeinterface #42,  1           // InterfaceMethod java/lang/CharSequence.toString:()Ljava/lang/String;
     206: invokevirtual #40                 // Method java/lang/String.toCharArray:()[C
     209: invokespecial #38                 // Method "<init>":([C)V
     212: iload_1
     213: iload_2
     214: invokevirtual #24                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/CharSubSequence;
     217: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence subSequence(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #43                 // Method subSequence:(I)Lcom/vladsch/flexmark/util/sequence/CharSubSequence;
       5: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence subSequence(com.vladsch.flexmark.util.sequence.Range);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #44                 // Method subSequence:(Lcom/vladsch/flexmark/util/sequence/Range;)Lcom/vladsch/flexmark/util/sequence/CharSubSequence;
       5: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence baseSubSequence(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokevirtual #25                 // Method baseSubSequence:(II)Lcom/vladsch/flexmark/util/sequence/CharSubSequence;
       6: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence subSequence(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokevirtual #24                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/CharSubSequence;
       6: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence getBaseSequence();
    Code:
       0: aload_0
       1: invokevirtual #45                 // Method getBaseSequence:()Lcom/vladsch/flexmark/util/sequence/CharSubSequence;
       4: areturn

  public java.lang.Object getBase();
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method getBase:()[C
       4: areturn

  public java.lang.CharSequence subSequence(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokevirtual #24                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/CharSubSequence;
       6: areturn

  static {};
    Code:
       0: ldc           #26                 // class com/vladsch/flexmark/util/sequence/CharSubSequence
       2: invokevirtual #47                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #7                  // Field $assertionsDisabled:Z
      16: return
}
