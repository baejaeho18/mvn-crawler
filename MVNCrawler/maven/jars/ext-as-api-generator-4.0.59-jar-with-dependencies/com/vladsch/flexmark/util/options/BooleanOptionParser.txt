Compiled from "BooleanOptionParser.java"
public abstract class com.vladsch.flexmark.util.options.BooleanOptionParser<T> implements com.vladsch.flexmark.util.options.OptionParser<T> {
  public static final java.lang.String OPTION_0_PARAMETERS_1_IGNORED;

  public static final java.lang.String KEY_OPTION_0_PARAMETERS_1_IGNORED;

  private final java.lang.String myOptionName;

  public com.vladsch.flexmark.util.options.BooleanOptionParser(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field myOptionName:Ljava/lang/String;
       9: return

  protected abstract T setOptions(T);

  protected abstract boolean isOptionSet(T);

  public java.lang.String getOptionName();
    Code:
       0: aload_0
       1: getfield      #2                  // Field myOptionName:Ljava/lang/String;
       4: areturn

  public com.vladsch.flexmark.util.Pair<T, java.util.List<com.vladsch.flexmark.util.options.ParsedOption<T>>> parseOption(com.vladsch.flexmark.util.sequence.BasedSequence, T, com.vladsch.flexmark.util.options.MessageProvider);
    Code:
       0: aload_1
       1: invokeinterface #3,  1            // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.isEmpty:()Z
       6: ifeq          37
       9: new           #4                  // class com/vladsch/flexmark/util/Pair
      12: dup
      13: aload_0
      14: aload_2
      15: invokevirtual #5                  // Method setOptions:(Ljava/lang/Object;)Ljava/lang/Object;
      18: new           #6                  // class com/vladsch/flexmark/util/options/ParsedOption
      21: dup
      22: aload_1
      23: aload_0
      24: getstatic     #7                  // Field com/vladsch/flexmark/util/options/ParsedOptionStatus.VALID:Lcom/vladsch/flexmark/util/options/ParsedOptionStatus;
      27: invokespecial #8                  // Method com/vladsch/flexmark/util/options/ParsedOption."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;Lcom/vladsch/flexmark/util/options/OptionParser;Lcom/vladsch/flexmark/util/options/ParsedOptionStatus;)V
      30: invokestatic  #9                  // Method java/util/Collections.singletonList:(Ljava/lang/Object;)Ljava/util/List;
      33: invokespecial #10                 // Method com/vladsch/flexmark/util/Pair."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      36: areturn
      37: aload_3
      38: ifnonnull     45
      41: getstatic     #11                 // Field com/vladsch/flexmark/util/options/MessageProvider.DEFAULT:Lcom/vladsch/flexmark/util/options/MessageProvider;
      44: astore_3
      45: aload_3
      46: ldc           #13                 // String options.parser.boolean-option.ignored
      48: ldc           #14                 // String Option {0} does not have any parameters. {1} was ignored
      50: iconst_2
      51: anewarray     #15                 // class java/lang/Object
      54: dup
      55: iconst_0
      56: aload_0
      57: getfield      #2                  // Field myOptionName:Ljava/lang/String;
      60: aastore
      61: dup
      62: iconst_1
      63: aload_1
      64: aastore
      65: invokeinterface #16,  4           // InterfaceMethod com/vladsch/flexmark/util/options/MessageProvider.message:(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      70: astore        4
      72: new           #4                  // class com/vladsch/flexmark/util/Pair
      75: dup
      76: aload_0
      77: aload_2
      78: invokevirtual #5                  // Method setOptions:(Ljava/lang/Object;)Ljava/lang/Object;
      81: new           #6                  // class com/vladsch/flexmark/util/options/ParsedOption
      84: dup
      85: aload_1
      86: aload_0
      87: getstatic     #17                 // Field com/vladsch/flexmark/util/options/ParsedOptionStatus.IGNORED:Lcom/vladsch/flexmark/util/options/ParsedOptionStatus;
      90: new           #18                 // class com/vladsch/flexmark/util/options/ParserMessage
      93: dup
      94: aload_1
      95: getstatic     #17                 // Field com/vladsch/flexmark/util/options/ParsedOptionStatus.IGNORED:Lcom/vladsch/flexmark/util/options/ParsedOptionStatus;
      98: aload         4
     100: invokespecial #19                 // Method com/vladsch/flexmark/util/options/ParserMessage."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;Lcom/vladsch/flexmark/util/options/ParsedOptionStatus;Ljava/lang/String;)V
     103: invokestatic  #9                  // Method java/util/Collections.singletonList:(Ljava/lang/Object;)Ljava/util/List;
     106: invokespecial #20                 // Method com/vladsch/flexmark/util/options/ParsedOption."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;Lcom/vladsch/flexmark/util/options/OptionParser;Lcom/vladsch/flexmark/util/options/ParsedOptionStatus;Ljava/util/List;)V
     109: invokestatic  #9                  // Method java/util/Collections.singletonList:(Ljava/lang/Object;)Ljava/util/List;
     112: invokespecial #10                 // Method com/vladsch/flexmark/util/Pair."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
     115: areturn

  public java.lang.String getOptionText(T, T);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #21                 // Method isOptionSet:(Ljava/lang/Object;)Z
       5: ifeq          27
       8: aload_2
       9: ifnull        20
      12: aload_0
      13: aload_2
      14: invokevirtual #21                 // Method isOptionSet:(Ljava/lang/Object;)Z
      17: ifne          27
      20: aload_0
      21: getfield      #2                  // Field myOptionName:Ljava/lang/String;
      24: goto          29
      27: ldc           #22                 // String
      29: areturn
}
