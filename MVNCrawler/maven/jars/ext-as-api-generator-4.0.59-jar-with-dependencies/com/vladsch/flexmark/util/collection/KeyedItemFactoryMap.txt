Compiled from "KeyedItemFactoryMap.java"
public class com.vladsch.flexmark.util.collection.KeyedItemFactoryMap<K, I, P> implements java.util.Map<K, com.vladsch.flexmark.util.ComputableFactory<I, P>> {
  protected final java.util.HashMap<K, com.vladsch.flexmark.util.ComputableFactory<I, P>> factoryMap;

  protected final java.util.HashMap<K, I> itemMap;

  protected final P param;

  public com.vladsch.flexmark.util.collection.KeyedItemFactoryMap(P);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: invokespecial #1                  // Method "<init>":(Ljava/lang/Object;I)V
       6: return

  public com.vladsch.flexmark.util.collection.KeyedItemFactoryMap(P, int);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #3                  // class java/util/HashMap
       8: dup
       9: iload_2
      10: invokespecial #4                  // Method java/util/HashMap."<init>":(I)V
      13: putfield      #5                  // Field factoryMap:Ljava/util/HashMap;
      16: aload_0
      17: new           #3                  // class java/util/HashMap
      20: dup
      21: invokespecial #6                  // Method java/util/HashMap."<init>":()V
      24: putfield      #7                  // Field itemMap:Ljava/util/HashMap;
      27: aload_0
      28: aload_1
      29: putfield      #8                  // Field param:Ljava/lang/Object;
      32: return

  public I getItem(K);
    Code:
       0: aload_0
       1: getfield      #7                  // Field itemMap:Ljava/util/HashMap;
       4: aload_1
       5: invokevirtual #9                  // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
       8: astore_2
       9: aload_2
      10: ifnonnull     82
      13: aload_0
      14: getfield      #5                  // Field factoryMap:Ljava/util/HashMap;
      17: aload_1
      18: invokevirtual #9                  // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      21: checkcast     #10                 // class com/vladsch/flexmark/util/ComputableFactory
      24: astore_3
      25: aload_3
      26: ifnonnull     61
      29: new           #11                 // class java/lang/IllegalStateException
      32: dup
      33: new           #12                 // class java/lang/StringBuilder
      36: dup
      37: invokespecial #13                 // Method java/lang/StringBuilder."<init>":()V
      40: ldc           #14                 // String Factory for key:
      42: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      45: aload_1
      46: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      49: ldc           #17                 // String  is not defined
      51: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      54: invokevirtual #18                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      57: invokespecial #19                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      60: athrow
      61: aload_3
      62: aload_0
      63: getfield      #8                  // Field param:Ljava/lang/Object;
      66: invokeinterface #20,  2           // InterfaceMethod com/vladsch/flexmark/util/ComputableFactory.create:(Ljava/lang/Object;)Ljava/lang/Object;
      71: astore_2
      72: aload_0
      73: getfield      #7                  // Field itemMap:Ljava/util/HashMap;
      76: aload_1
      77: aload_2
      78: invokevirtual #21                 // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      81: pop
      82: aload_2
      83: areturn

  public int size();
    Code:
       0: aload_0
       1: getfield      #5                  // Field factoryMap:Ljava/util/HashMap;
       4: invokevirtual #22                 // Method java/util/HashMap.size:()I
       7: ireturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #5                  // Field factoryMap:Ljava/util/HashMap;
       4: invokevirtual #23                 // Method java/util/HashMap.isEmpty:()Z
       7: ireturn

  public com.vladsch.flexmark.util.ComputableFactory<I, P> get(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #5                  // Field factoryMap:Ljava/util/HashMap;
       4: aload_1
       5: invokevirtual #9                  // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
       8: checkcast     #10                 // class com/vladsch/flexmark/util/ComputableFactory
      11: areturn

  public boolean containsKey(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #5                  // Field factoryMap:Ljava/util/HashMap;
       4: aload_1
       5: invokevirtual #24                 // Method java/util/HashMap.containsKey:(Ljava/lang/Object;)Z
       8: ireturn

  public com.vladsch.flexmark.util.ComputableFactory<I, P> put(K, com.vladsch.flexmark.util.ComputableFactory<I, P>);
    Code:
       0: aload_0
       1: getfield      #5                  // Field factoryMap:Ljava/util/HashMap;
       4: aload_1
       5: aload_2
       6: invokevirtual #21                 // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       9: checkcast     #10                 // class com/vladsch/flexmark/util/ComputableFactory
      12: areturn

  public void putAll(java.util.Map<? extends K, ? extends com.vladsch.flexmark.util.ComputableFactory<I, P>>);
    Code:
       0: aload_0
       1: getfield      #5                  // Field factoryMap:Ljava/util/HashMap;
       4: aload_1
       5: invokevirtual #25                 // Method java/util/HashMap.putAll:(Ljava/util/Map;)V
       8: return

  public com.vladsch.flexmark.util.ComputableFactory<I, P> remove(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #5                  // Field factoryMap:Ljava/util/HashMap;
       4: aload_1
       5: invokevirtual #26                 // Method java/util/HashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
       8: checkcast     #10                 // class com/vladsch/flexmark/util/ComputableFactory
      11: areturn

  public void clear();
    Code:
       0: aload_0
       1: getfield      #5                  // Field factoryMap:Ljava/util/HashMap;
       4: invokevirtual #27                 // Method java/util/HashMap.clear:()V
       7: return

  public boolean containsValue(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #5                  // Field factoryMap:Ljava/util/HashMap;
       4: aload_1
       5: invokevirtual #28                 // Method java/util/HashMap.containsValue:(Ljava/lang/Object;)Z
       8: ireturn

  public java.util.Set<K> keySet();
    Code:
       0: aload_0
       1: getfield      #5                  // Field factoryMap:Ljava/util/HashMap;
       4: invokevirtual #29                 // Method java/util/HashMap.keySet:()Ljava/util/Set;
       7: areturn

  public java.util.Collection<com.vladsch.flexmark.util.ComputableFactory<I, P>> values();
    Code:
       0: aload_0
       1: getfield      #5                  // Field factoryMap:Ljava/util/HashMap;
       4: invokevirtual #30                 // Method java/util/HashMap.values:()Ljava/util/Collection;
       7: areturn

  public java.util.Set<java.util.Map$Entry<K, com.vladsch.flexmark.util.ComputableFactory<I, P>>> entrySet();
    Code:
       0: aload_0
       1: getfield      #5                  // Field factoryMap:Ljava/util/HashMap;
       4: invokevirtual #31                 // Method java/util/HashMap.entrySet:()Ljava/util/Set;
       7: areturn

  public java.lang.Object remove(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #32                 // Method remove:(Ljava/lang/Object;)Lcom/vladsch/flexmark/util/ComputableFactory;
       5: areturn

  public java.lang.Object put(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: checkcast     #10                 // class com/vladsch/flexmark/util/ComputableFactory
       6: invokevirtual #33                 // Method put:(Ljava/lang/Object;Lcom/vladsch/flexmark/util/ComputableFactory;)Lcom/vladsch/flexmark/util/ComputableFactory;
       9: areturn

  public java.lang.Object get(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #34                 // Method get:(Ljava/lang/Object;)Lcom/vladsch/flexmark/util/ComputableFactory;
       5: areturn
}
