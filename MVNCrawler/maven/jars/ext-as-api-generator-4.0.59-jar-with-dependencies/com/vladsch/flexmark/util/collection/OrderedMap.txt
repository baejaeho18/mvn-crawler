Compiled from "OrderedMap.java"
public class com.vladsch.flexmark.util.collection.OrderedMap<K, V> implements java.util.Map<K, V>, java.lang.Iterable<java.util.Map$Entry<K, V>> {
  private final com.vladsch.flexmark.util.collection.OrderedSet<K> keySet;

  private final java.util.ArrayList<V> valueList;

  private final com.vladsch.flexmark.util.collection.CollectionHost<K> host;

  private boolean inUpdate;

  private com.vladsch.flexmark.util.collection.iteration.Indexed<java.util.Map$Entry<K, V>> myIndexedEntryProxy;

  private com.vladsch.flexmark.util.collection.iteration.Indexed<V> myIndexedValueProxy;

  public com.vladsch.flexmark.util.collection.OrderedMap();
    Code:
       0: aload_0
       1: iconst_0
       2: aconst_null
       3: invokespecial #4                  // Method "<init>":(ILcom/vladsch/flexmark/util/collection/CollectionHost;)V
       6: return

  public com.vladsch.flexmark.util.collection.OrderedMap(int);
    Code:
       0: aload_0
       1: iload_1
       2: aconst_null
       3: invokespecial #4                  // Method "<init>":(ILcom/vladsch/flexmark/util/collection/CollectionHost;)V
       6: return

  public com.vladsch.flexmark.util.collection.OrderedMap(com.vladsch.flexmark.util.collection.CollectionHost<K>);
    Code:
       0: aload_0
       1: iconst_0
       2: aload_1
       3: invokespecial #4                  // Method "<init>":(ILcom/vladsch/flexmark/util/collection/CollectionHost;)V
       6: return

  public com.vladsch.flexmark.util.collection.OrderedMap(int, com.vladsch.flexmark.util.collection.CollectionHost<K>);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #6                  // class java/util/ArrayList
       8: dup
       9: iload_1
      10: invokespecial #7                  // Method java/util/ArrayList."<init>":(I)V
      13: putfield      #8                  // Field valueList:Ljava/util/ArrayList;
      16: aload_0
      17: aload_2
      18: putfield      #9                  // Field host:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      21: aload_0
      22: aconst_null
      23: putfield      #10                 // Field myIndexedEntryProxy:Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
      26: aload_0
      27: aconst_null
      28: putfield      #11                 // Field myIndexedValueProxy:Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
      31: aload_0
      32: new           #12                 // class com/vladsch/flexmark/util/collection/OrderedSet
      35: dup
      36: iload_1
      37: new           #13                 // class com/vladsch/flexmark/util/collection/OrderedMap$1
      40: dup
      41: aload_0
      42: invokespecial #14                 // Method com/vladsch/flexmark/util/collection/OrderedMap$1."<init>":(Lcom/vladsch/flexmark/util/collection/OrderedMap;)V
      45: invokespecial #15                 // Method com/vladsch/flexmark/util/collection/OrderedSet."<init>":(ILcom/vladsch/flexmark/util/collection/CollectionHost;)V
      48: putfield      #1                  // Field keySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      51: return

  public com.vladsch.flexmark.util.collection.iteration.Indexed<java.util.Map$Entry<K, V>> getIndexedEntryProxy();
    Code:
       0: aload_0
       1: getfield      #10                 // Field myIndexedEntryProxy:Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
       4: ifnull        12
       7: aload_0
       8: getfield      #10                 // Field myIndexedEntryProxy:Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
      11: areturn
      12: aload_0
      13: new           #16                 // class com/vladsch/flexmark/util/collection/OrderedMap$2
      16: dup
      17: aload_0
      18: invokespecial #17                 // Method com/vladsch/flexmark/util/collection/OrderedMap$2."<init>":(Lcom/vladsch/flexmark/util/collection/OrderedMap;)V
      21: putfield      #10                 // Field myIndexedEntryProxy:Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
      24: aload_0
      25: getfield      #10                 // Field myIndexedEntryProxy:Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
      28: areturn

  public com.vladsch.flexmark.util.collection.iteration.Indexed<V> getIndexedValueProxy();
    Code:
       0: aload_0
       1: getfield      #11                 // Field myIndexedValueProxy:Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
       4: ifnull        12
       7: aload_0
       8: getfield      #11                 // Field myIndexedValueProxy:Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
      11: areturn
      12: aload_0
      13: new           #18                 // class com/vladsch/flexmark/util/collection/OrderedMap$3
      16: dup
      17: aload_0
      18: invokespecial #19                 // Method com/vladsch/flexmark/util/collection/OrderedMap$3."<init>":(Lcom/vladsch/flexmark/util/collection/OrderedMap;)V
      21: putfield      #11                 // Field myIndexedValueProxy:Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
      24: aload_0
      25: getfield      #11                 // Field myIndexedValueProxy:Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
      28: areturn

  private java.util.Map$Entry<K, V> getEntry(int);
    Code:
       0: new           #20                 // class com/vladsch/flexmark/util/collection/MapEntry
       3: dup
       4: aload_0
       5: getfield      #1                  // Field keySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       8: iload_1
       9: invokevirtual #21                 // Method com/vladsch/flexmark/util/collection/OrderedSet.getValue:(I)Ljava/lang/Object;
      12: aload_0
      13: getfield      #8                  // Field valueList:Ljava/util/ArrayList;
      16: iload_1
      17: invokevirtual #22                 // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
      20: invokespecial #23                 // Method com/vladsch/flexmark/util/collection/MapEntry."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      23: areturn

  public int getModificationCount();
    Code:
       0: aload_0
       1: getfield      #1                  // Field keySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: invokevirtual #24                 // Method com/vladsch/flexmark/util/collection/OrderedSet.getModificationCount:()I
       7: ireturn

  void adding(int, K, java.lang.Object);
    Code:
       0: aload_3
       1: ifnonnull     12
       4: new           #25                 // class java/lang/IllegalArgumentException
       7: dup
       8: invokespecial #26                 // Method java/lang/IllegalArgumentException."<init>":()V
      11: athrow
      12: aload_0
      13: getfield      #9                  // Field host:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      16: ifnull        43
      19: aload_0
      20: getfield      #9                  // Field host:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      23: invokeinterface #27,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.skipHostUpdate:()Z
      28: ifne          43
      31: aload_0
      32: getfield      #9                  // Field host:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      35: iload_1
      36: aload_2
      37: aload_3
      38: invokeinterface #28,  4           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.adding:(ILjava/lang/Object;Ljava/lang/Object;)V
      43: aload_0
      44: getfield      #8                  // Field valueList:Ljava/util/ArrayList;
      47: aload_3
      48: invokevirtual #29                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
      51: pop
      52: return

  void addingNull(int);
    Code:
       0: aload_0
       1: getfield      #9                  // Field host:Lcom/vladsch/flexmark/util/collection/CollectionHost;
       4: ifnull        29
       7: aload_0
       8: getfield      #9                  // Field host:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      11: invokeinterface #27,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.skipHostUpdate:()Z
      16: ifne          29
      19: aload_0
      20: getfield      #9                  // Field host:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      23: iload_1
      24: invokeinterface #30,  2           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.addingNulls:(I)V
      29: aload_0
      30: iload_1
      31: invokevirtual #31                 // Method addNulls:(I)V
      34: return

  java.lang.Object removing(int, K);
    Code:
       0: aload_0
       1: getfield      #9                  // Field host:Lcom/vladsch/flexmark/util/collection/CollectionHost;
       4: ifnull        31
       7: aload_0
       8: getfield      #9                  // Field host:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      11: invokeinterface #27,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.skipHostUpdate:()Z
      16: ifne          31
      19: aload_0
      20: getfield      #9                  // Field host:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      23: iload_1
      24: aload_2
      25: invokeinterface #32,  3           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.removing:(ILjava/lang/Object;)Ljava/lang/Object;
      30: pop
      31: aload_0
      32: getfield      #8                  // Field valueList:Ljava/util/ArrayList;
      35: iload_1
      36: invokevirtual #22                 // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
      39: areturn

  void clearing();
    Code:
       0: aload_0
       1: getfield      #9                  // Field host:Lcom/vladsch/flexmark/util/collection/CollectionHost;
       4: ifnull        28
       7: aload_0
       8: getfield      #9                  // Field host:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      11: invokeinterface #27,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.skipHostUpdate:()Z
      16: ifne          28
      19: aload_0
      20: getfield      #9                  // Field host:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      23: invokeinterface #33,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.clearing:()V
      28: aload_0
      29: getfield      #8                  // Field valueList:Ljava/util/ArrayList;
      32: invokevirtual #34                 // Method java/util/ArrayList.clear:()V
      35: return

  public int size();
    Code:
       0: aload_0
       1: getfield      #1                  // Field keySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: invokevirtual #35                 // Method com/vladsch/flexmark/util/collection/OrderedSet.size:()I
       7: ireturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #1                  // Field keySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: invokevirtual #36                 // Method com/vladsch/flexmark/util/collection/OrderedSet.isEmpty:()Z
       7: ireturn

  public boolean containsKey(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #1                  // Field keySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: aload_1
       5: invokevirtual #37                 // Method com/vladsch/flexmark/util/collection/OrderedSet.contains:(Ljava/lang/Object;)Z
       8: ireturn

  public boolean containsValue(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #8                  // Field valueList:Ljava/util/ArrayList;
       4: aload_1
       5: invokevirtual #38                 // Method java/util/ArrayList.indexOf:(Ljava/lang/Object;)I
       8: istore_2
       9: aload_0
      10: getfield      #1                  // Field keySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      13: iload_2
      14: invokevirtual #39                 // Method com/vladsch/flexmark/util/collection/OrderedSet.isValidIndex:(I)Z
      17: ireturn

  public void addNull();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field valueList:Ljava/util/ArrayList;
       5: invokevirtual #40                 // Method java/util/ArrayList.size:()I
       8: invokevirtual #31                 // Method addNulls:(I)V
      11: return

  public void addNulls(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #8                  // Field valueList:Ljava/util/ArrayList;
       5: invokevirtual #40                 // Method java/util/ArrayList.size:()I
       8: if_icmpge     53
      11: new           #25                 // class java/lang/IllegalArgumentException
      14: dup
      15: new           #41                 // class java/lang/StringBuilder
      18: dup
      19: invokespecial #42                 // Method java/lang/StringBuilder."<init>":()V
      22: ldc           #43                 // String addNulls(
      24: invokevirtual #44                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      27: iload_1
      28: invokevirtual #45                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      31: ldc           #46                 // String ) called when valueList size is
      33: invokevirtual #44                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: aload_0
      37: getfield      #8                  // Field valueList:Ljava/util/ArrayList;
      40: invokevirtual #40                 // Method java/util/ArrayList.size:()I
      43: invokevirtual #45                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      46: invokevirtual #47                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      49: invokespecial #48                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      52: athrow
      53: aload_0
      54: getfield      #8                  // Field valueList:Ljava/util/ArrayList;
      57: invokevirtual #40                 // Method java/util/ArrayList.size:()I
      60: iload_1
      61: if_icmpgt     76
      64: aload_0
      65: getfield      #8                  // Field valueList:Ljava/util/ArrayList;
      68: aconst_null
      69: invokevirtual #29                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
      72: pop
      73: goto          53
      76: return

  public V get(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #1                  // Field keySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: aload_1
       5: invokevirtual #49                 // Method com/vladsch/flexmark/util/collection/OrderedSet.indexOf:(Ljava/lang/Object;)I
       8: istore_2
       9: iload_2
      10: iconst_m1
      11: if_icmpne     18
      14: aconst_null
      15: goto          26
      18: aload_0
      19: getfield      #8                  // Field valueList:Ljava/util/ArrayList;
      22: iload_2
      23: invokevirtual #22                 // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
      26: areturn

  public V put(K, V);
    Code:
       0: aload_0
       1: getfield      #1                  // Field keySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: aload_1
       5: invokevirtual #49                 // Method com/vladsch/flexmark/util/collection/OrderedSet.indexOf:(Ljava/lang/Object;)I
       8: istore_3
       9: iload_3
      10: iconst_m1
      11: if_icmpne     26
      14: aload_0
      15: getfield      #1                  // Field keySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      18: aload_1
      19: aload_2
      20: invokevirtual #50                 // Method com/vladsch/flexmark/util/collection/OrderedSet.add:(Ljava/lang/Object;Ljava/lang/Object;)Z
      23: pop
      24: aconst_null
      25: areturn
      26: aload_0
      27: getfield      #8                  // Field valueList:Ljava/util/ArrayList;
      30: iload_3
      31: invokevirtual #22                 // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
      34: astore        4
      36: aload_0
      37: getfield      #8                  // Field valueList:Ljava/util/ArrayList;
      40: iload_3
      41: aload_2
      42: invokevirtual #51                 // Method java/util/ArrayList.set:(ILjava/lang/Object;)Ljava/lang/Object;
      45: pop
      46: aload         4
      48: areturn

  public V computeIfMissing(K, com.vladsch.flexmark.util.Function<? super K, ? extends V>);
    Code:
       0: aload_0
       1: getfield      #1                  // Field keySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: aload_1
       5: invokevirtual #49                 // Method com/vladsch/flexmark/util/collection/OrderedSet.indexOf:(Ljava/lang/Object;)I
       8: istore_3
       9: iload_3
      10: iconst_m1
      11: if_icmpne     37
      14: aload_2
      15: aload_1
      16: invokeinterface #52,  2           // InterfaceMethod com/vladsch/flexmark/util/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      21: astore        4
      23: aload_0
      24: getfield      #1                  // Field keySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      27: aload_1
      28: aload         4
      30: invokevirtual #50                 // Method com/vladsch/flexmark/util/collection/OrderedSet.add:(Ljava/lang/Object;Ljava/lang/Object;)Z
      33: pop
      34: aload         4
      36: areturn
      37: aload_0
      38: getfield      #8                  // Field valueList:Ljava/util/ArrayList;
      41: iload_3
      42: invokevirtual #22                 // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
      45: areturn

  public V remove(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #1                  // Field keySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: aload_1
       5: invokevirtual #53                 // Method com/vladsch/flexmark/util/collection/OrderedSet.removeHosted:(Ljava/lang/Object;)Ljava/lang/Object;
       8: areturn

  public void putAll(java.util.Map<? extends K, ? extends V>);
    Code:
       0: aload_1
       1: invokeinterface #54,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
       6: invokeinterface #55,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      11: astore_2
      12: aload_2
      13: invokeinterface #56,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      18: ifeq          51
      21: aload_2
      22: invokeinterface #57,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      27: checkcast     #58                 // class java/util/Map$Entry
      30: astore_3
      31: aload_0
      32: aload_3
      33: invokeinterface #59,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      38: aload_3
      39: invokeinterface #60,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      44: invokevirtual #61                 // Method put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      47: pop
      48: goto          12
      51: return

  public void addAll(java.util.Collection<? extends java.util.Map$Entry<? extends K, ? extends V>>);
    Code:
       0: aload_1
       1: invokeinterface #62,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
       6: astore_2
       7: aload_2
       8: invokeinterface #56,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      13: ifeq          46
      16: aload_2
      17: invokeinterface #57,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      22: checkcast     #58                 // class java/util/Map$Entry
      25: astore_3
      26: aload_0
      27: aload_3
      28: invokeinterface #59,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      33: aload_3
      34: invokeinterface #60,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      39: invokevirtual #61                 // Method put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      42: pop
      43: goto          7
      46: return

  public void clear();
    Code:
       0: aload_0
       1: getfield      #1                  // Field keySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: invokevirtual #63                 // Method com/vladsch/flexmark/util/collection/OrderedSet.clear:()V
       7: return

  public com.vladsch.flexmark.util.collection.OrderedSet<K> keySet();
    Code:
       0: aload_0
       1: getfield      #1                  // Field keySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: areturn

  public java.util.Collection<V> values();
    Code:
       0: aload_0
       1: getfield      #1                  // Field keySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: invokevirtual #64                 // Method com/vladsch/flexmark/util/collection/OrderedSet.isSparse:()Z
       7: ifne          15
      10: aload_0
      11: getfield      #8                  // Field valueList:Ljava/util/ArrayList;
      14: areturn
      15: new           #6                  // class java/util/ArrayList
      18: dup
      19: aload_0
      20: getfield      #1                  // Field keySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      23: invokevirtual #35                 // Method com/vladsch/flexmark/util/collection/OrderedSet.size:()I
      26: invokespecial #7                  // Method java/util/ArrayList."<init>":(I)V
      29: astore_1
      30: aload_0
      31: getfield      #1                  // Field keySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      34: invokevirtual #65                 // Method com/vladsch/flexmark/util/collection/OrderedSet.indexIterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterator;
      37: astore_2
      38: aload_2
      39: invokeinterface #56,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      44: ifeq          74
      47: aload_1
      48: aload_0
      49: getfield      #8                  // Field valueList:Ljava/util/ArrayList;
      52: aload_2
      53: invokeinterface #57,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      58: checkcast     #66                 // class java/lang/Integer
      61: invokevirtual #67                 // Method java/lang/Integer.intValue:()I
      64: invokevirtual #22                 // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
      67: invokevirtual #29                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
      70: pop
      71: goto          38
      74: aload_1
      75: areturn

  public K getKey(int);
    Code:
       0: aload_0
       1: getfield      #1                  // Field keySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: iload_1
       5: invokevirtual #39                 // Method com/vladsch/flexmark/util/collection/OrderedSet.isValidIndex:(I)Z
       8: ifne          13
      11: aconst_null
      12: areturn
      13: aload_0
      14: getfield      #1                  // Field keySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      17: invokevirtual #68                 // Method com/vladsch/flexmark/util/collection/OrderedSet.getValueList:()Ljava/util/List;
      20: iload_1
      21: invokeinterface #69,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      26: areturn

  public V getValue(int);
    Code:
       0: aload_0
       1: getfield      #1                  // Field keySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: iload_1
       5: invokevirtual #39                 // Method com/vladsch/flexmark/util/collection/OrderedSet.isValidIndex:(I)Z
       8: ifne          13
      11: aconst_null
      12: areturn
      13: aload_0
      14: getfield      #8                  // Field valueList:Ljava/util/ArrayList;
      17: iload_1
      18: invokevirtual #22                 // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
      21: areturn

  public com.vladsch.flexmark.util.collection.OrderedSet<java.util.Map$Entry<K, V>> entrySet();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #3                  // Field inUpdate:Z
       5: new           #12                 // class com/vladsch/flexmark/util/collection/OrderedSet
       8: dup
       9: aload_0
      10: getfield      #1                  // Field keySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      13: invokevirtual #35                 // Method com/vladsch/flexmark/util/collection/OrderedSet.size:()I
      16: new           #70                 // class com/vladsch/flexmark/util/collection/OrderedMap$EntryCollectionHost
      19: dup
      20: aload_0
      21: aconst_null
      22: invokespecial #71                 // Method com/vladsch/flexmark/util/collection/OrderedMap$EntryCollectionHost."<init>":(Lcom/vladsch/flexmark/util/collection/OrderedMap;Lcom/vladsch/flexmark/util/collection/OrderedMap$1;)V
      25: invokespecial #15                 // Method com/vladsch/flexmark/util/collection/OrderedSet."<init>":(ILcom/vladsch/flexmark/util/collection/CollectionHost;)V
      28: astore_1
      29: aload_0
      30: invokevirtual #72                 // Method entryIterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIndexedIterator;
      33: astore_2
      34: aload_2
      35: invokeinterface #56,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      40: ifeq          57
      43: aload_1
      44: aload_2
      45: invokeinterface #57,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      50: invokevirtual #73                 // Method com/vladsch/flexmark/util/collection/OrderedSet.add:(Ljava/lang/Object;)Z
      53: pop
      54: goto          34
      57: aload_0
      58: iconst_0
      59: putfield      #3                  // Field inUpdate:Z
      62: aload_1
      63: areturn

  public java.util.List<java.util.Map$Entry<K, V>> entries();
    Code:
       0: new           #6                  // class java/util/ArrayList
       3: dup
       4: invokespecial #74                 // Method java/util/ArrayList."<init>":()V
       7: astore_1
       8: aload_0
       9: invokevirtual #72                 // Method entryIterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIndexedIterator;
      12: astore_2
      13: aload_2
      14: invokeinterface #56,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      19: ifeq          38
      22: aload_1
      23: aload_2
      24: invokeinterface #57,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      29: invokeinterface #75,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      34: pop
      35: goto          13
      38: aload_1
      39: areturn

  public java.util.List<K> keys();
    Code:
       0: aload_0
       1: getfield      #1                  // Field keySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: invokevirtual #76                 // Method com/vladsch/flexmark/util/collection/OrderedSet.values:()Ljava/util/List;
       7: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversibleIndexedIterator<V> valueIterator();
    Code:
       0: new           #77                 // class com/vladsch/flexmark/util/collection/iteration/IndexedIterator
       3: dup
       4: aload_0
       5: invokevirtual #78                 // Method getIndexedValueProxy:()Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
       8: aload_0
       9: getfield      #1                  // Field keySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      12: invokevirtual #65                 // Method com/vladsch/flexmark/util/collection/OrderedSet.indexIterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterator;
      15: invokespecial #79                 // Method com/vladsch/flexmark/util/collection/iteration/IndexedIterator."<init>":(Lcom/vladsch/flexmark/util/collection/iteration/Indexed;Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterator;)V
      18: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversibleIndexedIterator<V> reversedValueIterator();
    Code:
       0: new           #77                 // class com/vladsch/flexmark/util/collection/iteration/IndexedIterator
       3: dup
       4: aload_0
       5: invokevirtual #78                 // Method getIndexedValueProxy:()Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
       8: aload_0
       9: getfield      #1                  // Field keySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      12: invokevirtual #80                 // Method com/vladsch/flexmark/util/collection/OrderedSet.reversedIndexIterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterator;
      15: invokespecial #79                 // Method com/vladsch/flexmark/util/collection/iteration/IndexedIterator."<init>":(Lcom/vladsch/flexmark/util/collection/iteration/Indexed;Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterator;)V
      18: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversibleIndexedIterator<K> keyIterator();
    Code:
       0: aload_0
       1: getfield      #1                  // Field keySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: invokevirtual #81                 // Method com/vladsch/flexmark/util/collection/OrderedSet.iterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIndexedIterator;
       7: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversibleIndexedIterator<K> reversedKeyIterator();
    Code:
       0: aload_0
       1: getfield      #1                  // Field keySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: invokevirtual #82                 // Method com/vladsch/flexmark/util/collection/OrderedSet.reversedIterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIndexedIterator;
       7: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversibleIndexedIterator<java.util.Map$Entry<K, V>> entryIterator();
    Code:
       0: new           #77                 // class com/vladsch/flexmark/util/collection/iteration/IndexedIterator
       3: dup
       4: aload_0
       5: invokevirtual #83                 // Method getIndexedEntryProxy:()Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
       8: aload_0
       9: getfield      #1                  // Field keySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      12: invokevirtual #65                 // Method com/vladsch/flexmark/util/collection/OrderedSet.indexIterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterator;
      15: invokespecial #79                 // Method com/vladsch/flexmark/util/collection/iteration/IndexedIterator."<init>":(Lcom/vladsch/flexmark/util/collection/iteration/Indexed;Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterator;)V
      18: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversibleIndexedIterator<java.util.Map$Entry<K, V>> reversedEntryIterator();
    Code:
       0: new           #77                 // class com/vladsch/flexmark/util/collection/iteration/IndexedIterator
       3: dup
       4: aload_0
       5: invokevirtual #83                 // Method getIndexedEntryProxy:()Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
       8: aload_0
       9: getfield      #1                  // Field keySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      12: invokevirtual #80                 // Method com/vladsch/flexmark/util/collection/OrderedSet.reversedIndexIterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterator;
      15: invokespecial #79                 // Method com/vladsch/flexmark/util/collection/iteration/IndexedIterator."<init>":(Lcom/vladsch/flexmark/util/collection/iteration/Indexed;Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterator;)V
      18: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversibleIndexedIterator<java.util.Map$Entry<K, V>> reversedIterator();
    Code:
       0: aload_0
       1: invokevirtual #84                 // Method reversedEntryIterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIndexedIterator;
       4: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversibleIterable<V> valueIterable();
    Code:
       0: new           #85                 // class com/vladsch/flexmark/util/collection/iteration/IndexedIterable
       3: dup
       4: aload_0
       5: invokevirtual #78                 // Method getIndexedValueProxy:()Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
       8: aload_0
       9: getfield      #1                  // Field keySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      12: invokevirtual #86                 // Method com/vladsch/flexmark/util/collection/OrderedSet.indexIterable:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterable;
      15: invokespecial #87                 // Method com/vladsch/flexmark/util/collection/iteration/IndexedIterable."<init>":(Lcom/vladsch/flexmark/util/collection/iteration/Indexed;Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterable;)V
      18: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversibleIterable<V> reversedValueIterable();
    Code:
       0: new           #85                 // class com/vladsch/flexmark/util/collection/iteration/IndexedIterable
       3: dup
       4: aload_0
       5: invokevirtual #78                 // Method getIndexedValueProxy:()Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
       8: aload_0
       9: getfield      #1                  // Field keySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      12: invokevirtual #88                 // Method com/vladsch/flexmark/util/collection/OrderedSet.reversedIndexIterable:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterable;
      15: invokespecial #87                 // Method com/vladsch/flexmark/util/collection/iteration/IndexedIterable."<init>":(Lcom/vladsch/flexmark/util/collection/iteration/Indexed;Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterable;)V
      18: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversibleIterable<K> keyIterable();
    Code:
       0: aload_0
       1: getfield      #1                  // Field keySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: invokevirtual #89                 // Method com/vladsch/flexmark/util/collection/OrderedSet.iterable:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterable;
       7: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversibleIterable<K> reversedKeyIterable();
    Code:
       0: aload_0
       1: getfield      #1                  // Field keySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: invokevirtual #90                 // Method com/vladsch/flexmark/util/collection/OrderedSet.reversedIterable:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterable;
       7: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversibleIterable<java.util.Map$Entry<K, V>> entryIterable();
    Code:
       0: new           #85                 // class com/vladsch/flexmark/util/collection/iteration/IndexedIterable
       3: dup
       4: aload_0
       5: invokevirtual #83                 // Method getIndexedEntryProxy:()Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
       8: aload_0
       9: getfield      #1                  // Field keySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      12: invokevirtual #86                 // Method com/vladsch/flexmark/util/collection/OrderedSet.indexIterable:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterable;
      15: invokespecial #87                 // Method com/vladsch/flexmark/util/collection/iteration/IndexedIterable."<init>":(Lcom/vladsch/flexmark/util/collection/iteration/Indexed;Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterable;)V
      18: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversibleIterable<java.util.Map$Entry<K, V>> reversedEntryIterable();
    Code:
       0: new           #85                 // class com/vladsch/flexmark/util/collection/iteration/IndexedIterable
       3: dup
       4: aload_0
       5: invokevirtual #83                 // Method getIndexedEntryProxy:()Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
       8: aload_0
       9: getfield      #1                  // Field keySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      12: invokevirtual #88                 // Method com/vladsch/flexmark/util/collection/OrderedSet.reversedIndexIterable:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterable;
      15: invokespecial #87                 // Method com/vladsch/flexmark/util/collection/iteration/IndexedIterable."<init>":(Lcom/vladsch/flexmark/util/collection/iteration/Indexed;Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterable;)V
      18: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversibleIterable<java.util.Map$Entry<K, V>> reversedIterable();
    Code:
       0: aload_0
       1: invokevirtual #91                 // Method reversedEntryIterable:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterable;
       4: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversibleIndexedIterator<java.util.Map$Entry<K, V>> iterator();
    Code:
       0: aload_0
       1: invokevirtual #72                 // Method entryIterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIndexedIterator;
       4: areturn

  public void forEach(com.vladsch.flexmark.util.collection.Consumer<? super java.util.Map$Entry<K, V>>);
    Code:
       0: aload_0
       1: invokevirtual #92                 // Method iterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIndexedIterator;
       4: astore_2
       5: aload_2
       6: invokeinterface #56,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      11: ifeq          29
      14: aload_1
      15: aload_2
      16: invokeinterface #57,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      21: invokeinterface #93,  2           // InterfaceMethod com/vladsch/flexmark/util/collection/Consumer.accept:(Ljava/lang/Object;)V
      26: goto          5
      29: return

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: ifnull        22
      11: aload_0
      12: invokevirtual #94                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      15: aload_1
      16: invokevirtual #94                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      19: if_acmpeq     24
      22: iconst_0
      23: ireturn
      24: aload_1
      25: checkcast     #95                 // class com/vladsch/flexmark/util/collection/OrderedMap
      28: astore_2
      29: aload_0
      30: invokevirtual #96                 // Method size:()I
      33: aload_2
      34: invokevirtual #96                 // Method size:()I
      37: if_icmpeq     42
      40: iconst_0
      41: ireturn
      42: aload_0
      43: invokevirtual #97                 // Method entrySet:()Lcom/vladsch/flexmark/util/collection/OrderedSet;
      46: aload_2
      47: invokevirtual #97                 // Method entrySet:()Lcom/vladsch/flexmark/util/collection/OrderedSet;
      50: invokevirtual #98                 // Method com/vladsch/flexmark/util/collection/OrderedSet.equals:(Ljava/lang/Object;)Z
      53: ifne          58
      56: iconst_0
      57: ireturn
      58: iconst_1
      59: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #1                  // Field keySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: invokevirtual #99                 // Method com/vladsch/flexmark/util/collection/OrderedSet.hashCode:()I
       7: istore_1
       8: bipush        31
      10: iload_1
      11: imul
      12: aload_0
      13: getfield      #8                  // Field valueList:Ljava/util/ArrayList;
      16: invokevirtual #100                // Method java/util/ArrayList.hashCode:()I
      19: iadd
      20: istore_1
      21: iload_1
      22: ireturn

  public java.util.Set entrySet();
    Code:
       0: aload_0
       1: invokevirtual #97                 // Method entrySet:()Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: areturn

  public java.util.Set keySet();
    Code:
       0: aload_0
       1: invokevirtual #101                // Method keySet:()Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: areturn

  public java.util.Iterator iterator();
    Code:
       0: aload_0
       1: invokevirtual #92                 // Method iterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIndexedIterator;
       4: areturn

  static boolean access$000(com.vladsch.flexmark.util.collection.OrderedMap);
    Code:
       0: aload_0
       1: getfield      #3                  // Field inUpdate:Z
       4: ireturn

  static java.util.Map$Entry access$100(com.vladsch.flexmark.util.collection.OrderedMap, int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #2                  // Method getEntry:(I)Ljava/util/Map$Entry;
       5: areturn

  static com.vladsch.flexmark.util.collection.OrderedSet access$200(com.vladsch.flexmark.util.collection.OrderedMap);
    Code:
       0: aload_0
       1: getfield      #1                  // Field keySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: areturn
}
