Compiled from "MappedSequence.java"
public final class com.vladsch.flexmark.util.sequence.MappedSequence extends com.vladsch.flexmark.util.sequence.BasedSequenceImpl {
  private final com.vladsch.flexmark.util.mappers.CharMapper mapper;

  private final com.vladsch.flexmark.util.sequence.BasedSequence base;

  public com.vladsch.flexmark.util.mappers.CharMapper getCharMapper();
    Code:
       0: aload_0
       1: getfield      #1                  // Field mapper:Lcom/vladsch/flexmark/util/mappers/CharMapper;
       4: areturn

  private com.vladsch.flexmark.util.sequence.MappedSequence(com.vladsch.flexmark.util.mappers.CharMapper, java.lang.CharSequence);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method com/vladsch/flexmark/util/sequence/BasedSequenceImpl."<init>":()V
       4: aload_0
       5: aload_2
       6: invokestatic  #3                  // Method of:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       9: putfield      #4                  // Field base:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      12: aload_0
      13: aload_1
      14: putfield      #1                  // Field mapper:Lcom/vladsch/flexmark/util/mappers/CharMapper;
      17: return

  private com.vladsch.flexmark.util.sequence.MappedSequence(com.vladsch.flexmark.util.mappers.CharMapper, java.lang.CharSequence, int);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method com/vladsch/flexmark/util/sequence/BasedSequenceImpl."<init>":()V
       4: aload_0
       5: aload_2
       6: iload_3
       7: invokestatic  #5                  // Method of:(Ljava/lang/CharSequence;I)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      10: putfield      #4                  // Field base:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      13: aload_0
      14: aload_1
      15: putfield      #1                  // Field mapper:Lcom/vladsch/flexmark/util/mappers/CharMapper;
      18: return

  private com.vladsch.flexmark.util.sequence.MappedSequence(com.vladsch.flexmark.util.mappers.CharMapper, java.lang.CharSequence, int, int);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method com/vladsch/flexmark/util/sequence/BasedSequenceImpl."<init>":()V
       4: aload_0
       5: aload_2
       6: iload_3
       7: iload         4
       9: invokestatic  #6                  // Method of:(Ljava/lang/CharSequence;II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      12: putfield      #4                  // Field base:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      15: aload_0
      16: aload_1
      17: putfield      #1                  // Field mapper:Lcom/vladsch/flexmark/util/mappers/CharMapper;
      20: return

  public static com.vladsch.flexmark.util.sequence.MappedSequence of(com.vladsch.flexmark.util.mappers.CharMapper, java.lang.CharSequence);
    Code:
       0: new           #7                  // class com/vladsch/flexmark/util/sequence/MappedSequence
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #8                  // Method "<init>":(Lcom/vladsch/flexmark/util/mappers/CharMapper;Ljava/lang/CharSequence;)V
       9: areturn

  public static com.vladsch.flexmark.util.sequence.MappedSequence of(com.vladsch.flexmark.util.mappers.CharMapper, java.lang.CharSequence, int);
    Code:
       0: new           #7                  // class com/vladsch/flexmark/util/sequence/MappedSequence
       3: dup
       4: aload_0
       5: aload_1
       6: iload_2
       7: invokespecial #9                  // Method "<init>":(Lcom/vladsch/flexmark/util/mappers/CharMapper;Ljava/lang/CharSequence;I)V
      10: areturn

  public static com.vladsch.flexmark.util.sequence.MappedSequence of(com.vladsch.flexmark.util.mappers.CharMapper, java.lang.CharSequence, int, int);
    Code:
       0: new           #7                  // class com/vladsch/flexmark/util/sequence/MappedSequence
       3: dup
       4: aload_0
       5: aload_1
       6: iload_2
       7: iload_3
       8: invokespecial #10                 // Method "<init>":(Lcom/vladsch/flexmark/util/mappers/CharMapper;Ljava/lang/CharSequence;II)V
      11: areturn

  public char charAt(int);
    Code:
       0: aload_0
       1: getfield      #4                  // Field base:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: iload_1
       5: invokeinterface #11,  2           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.charAt:(I)C
      10: istore_2
      11: aload_0
      12: getfield      #1                  // Field mapper:Lcom/vladsch/flexmark/util/mappers/CharMapper;
      15: iload_2
      16: invokeinterface #12,  2           // InterfaceMethod com/vladsch/flexmark/util/mappers/CharMapper.map:(C)C
      21: ireturn

  public com.vladsch.flexmark.util.sequence.BasedSequence subSequence(int, int);
    Code:
       0: aload_0
       1: getfield      #4                  // Field base:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: iload_1
       5: iload_2
       6: invokeinterface #13,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      11: astore_3
      12: aload_3
      13: aload_0
      14: getfield      #4                  // Field base:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      17: if_acmpne     24
      20: aload_0
      21: goto          36
      24: new           #7                  // class com/vladsch/flexmark/util/sequence/MappedSequence
      27: dup
      28: aload_0
      29: getfield      #1                  // Field mapper:Lcom/vladsch/flexmark/util/mappers/CharMapper;
      32: aload_3
      33: invokespecial #8                  // Method "<init>":(Lcom/vladsch/flexmark/util/mappers/CharMapper;Ljava/lang/CharSequence;)V
      36: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence baseSubSequence(int, int);
    Code:
       0: aload_0
       1: getfield      #4                  // Field base:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: iload_1
       5: iload_2
       6: invokeinterface #13,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      11: astore_3
      12: aload_3
      13: aload_0
      14: getfield      #4                  // Field base:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      17: if_acmpne     24
      20: aload_0
      21: goto          36
      24: new           #7                  // class com/vladsch/flexmark/util/sequence/MappedSequence
      27: dup
      28: aload_0
      29: getfield      #1                  // Field mapper:Lcom/vladsch/flexmark/util/mappers/CharMapper;
      32: aload_3
      33: invokespecial #8                  // Method "<init>":(Lcom/vladsch/flexmark/util/mappers/CharMapper;Ljava/lang/CharSequence;)V
      36: areturn

  public java.lang.Object getBase();
    Code:
       0: aload_0
       1: getfield      #4                  // Field base:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: invokeinterface #14,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getBase:()Ljava/lang/Object;
       9: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence getBaseSequence();
    Code:
       0: aload_0
       1: getfield      #4                  // Field base:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: invokeinterface #15,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getBaseSequence:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       9: areturn

  public int getStartOffset();
    Code:
       0: aload_0
       1: getfield      #4                  // Field base:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: invokeinterface #16,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
       9: ireturn

  public int getEndOffset();
    Code:
       0: aload_0
       1: getfield      #4                  // Field base:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: invokeinterface #17,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
       9: ireturn

  public int getIndexOffset(int);
    Code:
       0: aload_0
       1: getfield      #4                  // Field base:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: iload_1
       5: invokeinterface #18,  2           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getIndexOffset:(I)I
      10: ireturn

  public com.vladsch.flexmark.util.sequence.Range getSourceRange();
    Code:
       0: aload_0
       1: getfield      #4                  // Field base:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: invokeinterface #19,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getSourceRange:()Lcom/vladsch/flexmark/util/sequence/Range;
       9: areturn

  public int length();
    Code:
       0: aload_0
       1: getfield      #4                  // Field base:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: invokeinterface #20,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
       9: ireturn

  public java.lang.String toString();
    Code:
       0: new           #21                 // class java/lang/StringBuilder
       3: dup
       4: aload_0
       5: invokevirtual #22                 // Method length:()I
       8: invokespecial #23                 // Method java/lang/StringBuilder."<init>":(I)V
      11: astore_1
      12: aload_1
      13: aload_0
      14: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;
      17: pop
      18: aload_1
      19: invokevirtual #25                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      22: areturn

  public java.lang.CharSequence subSequence(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokevirtual #26                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       6: areturn
}
