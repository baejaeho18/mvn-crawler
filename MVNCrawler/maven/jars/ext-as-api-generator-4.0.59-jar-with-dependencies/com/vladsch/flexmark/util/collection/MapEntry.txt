Compiled from "MapEntry.java"
public final class com.vladsch.flexmark.util.collection.MapEntry<K, V> implements java.util.Map$Entry<K, V> {
  private final K myKey;

  private final V myValue;

  public com.vladsch.flexmark.util.collection.MapEntry(K, V);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field myKey:Ljava/lang/Object;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field myValue:Ljava/lang/Object;
      14: return

  public K getKey();
    Code:
       0: aload_0
       1: getfield      #2                  // Field myKey:Ljava/lang/Object;
       4: areturn

  public V getValue();
    Code:
       0: aload_0
       1: getfield      #3                  // Field myValue:Ljava/lang/Object;
       4: areturn

  public V setValue(V);
    Code:
       0: new           #4                  // class java/lang/UnsupportedOperationException
       3: dup
       4: invokespecial #5                  // Method java/lang/UnsupportedOperationException."<init>":()V
       7: athrow

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: ifnull        22
      11: aload_0
      12: invokevirtual #6                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
      15: aload_1
      16: invokevirtual #6                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
      19: if_acmpeq     24
      22: iconst_0
      23: ireturn
      24: aload_1
      25: checkcast     #7                  // class com/vladsch/flexmark/util/collection/MapEntry
      28: astore_2
      29: aload_0
      30: getfield      #2                  // Field myKey:Ljava/lang/Object;
      33: ifnull        53
      36: aload_0
      37: getfield      #2                  // Field myKey:Ljava/lang/Object;
      40: aload_2
      41: getfield      #2                  // Field myKey:Ljava/lang/Object;
      44: invokevirtual #8                  // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      47: ifne          62
      50: goto          60
      53: aload_2
      54: getfield      #2                  // Field myKey:Ljava/lang/Object;
      57: ifnull        62
      60: iconst_0
      61: ireturn
      62: aload_0
      63: getfield      #3                  // Field myValue:Ljava/lang/Object;
      66: ifnull        83
      69: aload_0
      70: getfield      #3                  // Field myValue:Ljava/lang/Object;
      73: aload_2
      74: getfield      #3                  // Field myValue:Ljava/lang/Object;
      77: invokevirtual #8                  // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      80: goto          95
      83: aload_2
      84: getfield      #3                  // Field myValue:Ljava/lang/Object;
      87: ifnonnull     94
      90: iconst_1
      91: goto          95
      94: iconst_0
      95: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #2                  // Field myKey:Ljava/lang/Object;
       4: ifnull        17
       7: aload_0
       8: getfield      #2                  // Field myKey:Ljava/lang/Object;
      11: invokevirtual #9                  // Method java/lang/Object.hashCode:()I
      14: goto          18
      17: iconst_0
      18: istore_1
      19: bipush        31
      21: iload_1
      22: imul
      23: aload_0
      24: getfield      #3                  // Field myValue:Ljava/lang/Object;
      27: ifnull        40
      30: aload_0
      31: getfield      #3                  // Field myValue:Ljava/lang/Object;
      34: invokevirtual #9                  // Method java/lang/Object.hashCode:()I
      37: goto          41
      40: iconst_0
      41: iadd
      42: istore_1
      43: iload_1
      44: ireturn
}
