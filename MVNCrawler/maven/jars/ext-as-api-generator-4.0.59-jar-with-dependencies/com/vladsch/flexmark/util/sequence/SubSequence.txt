Compiled from "SubSequence.java"
public final class com.vladsch.flexmark.util.sequence.SubSequence extends com.vladsch.flexmark.util.sequence.BasedSequenceImpl {
  private final java.lang.CharSequence baseSeq;

  private final com.vladsch.flexmark.util.sequence.SubSequence base;

  private final int startOffset;

  private final int endOffset;

  static final boolean $assertionsDisabled;

  public com.vladsch.flexmark.util.sequence.SubSequence getBaseSequence();
    Code:
       0: aload_0
       1: getfield      #1                  // Field base:Lcom/vladsch/flexmark/util/sequence/SubSequence;
       4: areturn

  public java.lang.Object getBase();
    Code:
       0: aload_0
       1: getfield      #2                  // Field baseSeq:Ljava/lang/CharSequence;
       4: areturn

  public int getStartOffset();
    Code:
       0: aload_0
       1: getfield      #3                  // Field startOffset:I
       4: ireturn

  public int getEndOffset();
    Code:
       0: aload_0
       1: getfield      #4                  // Field endOffset:I
       4: ireturn

  private com.vladsch.flexmark.util.sequence.SubSequence(java.lang.CharSequence);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method com/vladsch/flexmark/util/sequence/BasedSequenceImpl."<init>":()V
       4: getstatic     #6                  // Field $assertionsDisabled:Z
       7: ifne          25
      10: aload_1
      11: instanceof    #7                  // class com/vladsch/flexmark/util/sequence/BasedSequence
      14: ifeq          25
      17: new           #8                  // class java/lang/AssertionError
      20: dup
      21: invokespecial #9                  // Method java/lang/AssertionError."<init>":()V
      24: athrow
      25: aload_0
      26: aload_0
      27: putfield      #1                  // Field base:Lcom/vladsch/flexmark/util/sequence/SubSequence;
      30: aload_0
      31: aload_1
      32: putfield      #2                  // Field baseSeq:Ljava/lang/CharSequence;
      35: aload_0
      36: iconst_0
      37: putfield      #3                  // Field startOffset:I
      40: aload_0
      41: aload_1
      42: invokeinterface #10,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      47: putfield      #4                  // Field endOffset:I
      50: return

  private com.vladsch.flexmark.util.sequence.SubSequence(com.vladsch.flexmark.util.sequence.SubSequence, int, int);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method com/vladsch/flexmark/util/sequence/BasedSequenceImpl."<init>":()V
       4: getstatic     #6                  // Field $assertionsDisabled:Z
       7: ifne          30
      10: iload_2
      11: ifgt          30
      14: iload_3
      15: aload_1
      16: invokevirtual #11                 // Method length:()I
      19: if_icmplt     30
      22: new           #8                  // class java/lang/AssertionError
      25: dup
      26: invokespecial #9                  // Method java/lang/AssertionError."<init>":()V
      29: athrow
      30: aload_0
      31: aload_1
      32: putfield      #1                  // Field base:Lcom/vladsch/flexmark/util/sequence/SubSequence;
      35: aload_0
      36: aload_1
      37: getfield      #2                  // Field baseSeq:Ljava/lang/CharSequence;
      40: putfield      #2                  // Field baseSeq:Ljava/lang/CharSequence;
      43: aload_0
      44: aload_1
      45: getfield      #3                  // Field startOffset:I
      48: iload_2
      49: iadd
      50: putfield      #3                  // Field startOffset:I
      53: aload_0
      54: aload_1
      55: getfield      #3                  // Field startOffset:I
      58: iload_3
      59: iadd
      60: putfield      #4                  // Field endOffset:I
      63: return

  public int length();
    Code:
       0: aload_0
       1: getfield      #4                  // Field endOffset:I
       4: aload_0
       5: getfield      #3                  // Field startOffset:I
       8: isub
       9: ireturn

  public com.vladsch.flexmark.util.sequence.Range getSourceRange();
    Code:
       0: new           #12                 // class com/vladsch/flexmark/util/sequence/Range
       3: dup
       4: aload_0
       5: getfield      #3                  // Field startOffset:I
       8: aload_0
       9: getfield      #4                  // Field endOffset:I
      12: invokespecial #13                 // Method com/vladsch/flexmark/util/sequence/Range."<init>":(II)V
      15: areturn

  public int getIndexOffset(int);
    Code:
       0: iload_1
       1: iflt          24
       4: iload_1
       5: aload_0
       6: getfield      #4                  // Field endOffset:I
       9: aload_0
      10: getfield      #3                  // Field startOffset:I
      13: isub
      14: if_icmpgt     24
      17: aload_0
      18: getfield      #3                  // Field startOffset:I
      21: iload_1
      22: iadd
      23: ireturn
      24: new           #14                 // class java/lang/StringIndexOutOfBoundsException
      27: dup
      28: new           #15                 // class java/lang/StringBuilder
      31: dup
      32: invokespecial #16                 // Method java/lang/StringBuilder."<init>":()V
      35: ldc           #17                 // String SubCharSequence index:
      37: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      40: iload_1
      41: invokevirtual #19                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      44: ldc           #20                 // String  out of range: 0,
      46: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      49: aload_0
      50: invokevirtual #11                 // Method length:()I
      53: invokevirtual #19                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      56: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      59: invokespecial #22                 // Method java/lang/StringIndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      62: athrow

  public char charAt(int);
    Code:
       0: iload_1
       1: iflt          44
       4: iload_1
       5: aload_0
       6: getfield      #4                  // Field endOffset:I
       9: aload_0
      10: getfield      #3                  // Field startOffset:I
      13: isub
      14: if_icmpge     44
      17: aload_0
      18: getfield      #2                  // Field baseSeq:Ljava/lang/CharSequence;
      21: iload_1
      22: aload_0
      23: getfield      #3                  // Field startOffset:I
      26: iadd
      27: invokeinterface #23,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      32: istore_2
      33: iload_2
      34: ifne          42
      37: ldc           #24                 // int 65533
      39: goto          43
      42: iload_2
      43: ireturn
      44: new           #14                 // class java/lang/StringIndexOutOfBoundsException
      47: dup
      48: new           #15                 // class java/lang/StringBuilder
      51: dup
      52: invokespecial #16                 // Method java/lang/StringBuilder."<init>":()V
      55: ldc           #17                 // String SubCharSequence index:
      57: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      60: iload_1
      61: invokevirtual #19                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      64: ldc           #20                 // String  out of range: 0,
      66: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      69: aload_0
      70: invokevirtual #11                 // Method length:()I
      73: invokevirtual #19                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      76: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      79: invokespecial #22                 // Method java/lang/StringIndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      82: athrow

  public com.vladsch.flexmark.util.sequence.SubSequence subSequence(com.vladsch.flexmark.util.sequence.Range);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #25                 // Method com/vladsch/flexmark/util/sequence/Range.getStart:()I
       5: aload_1
       6: invokevirtual #26                 // Method com/vladsch/flexmark/util/sequence/Range.getEnd:()I
       9: invokevirtual #27                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/SubSequence;
      12: areturn

  public com.vladsch.flexmark.util.sequence.SubSequence subSequence(int);
    Code:
       0: aload_0
       1: iload_1
       2: aload_0
       3: invokevirtual #11                 // Method length:()I
       6: invokevirtual #27                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/SubSequence;
       9: areturn

  public com.vladsch.flexmark.util.sequence.SubSequence subSequence(int, int);
    Code:
       0: iload_1
       1: iflt          34
       4: iload_2
       5: aload_0
       6: getfield      #4                  // Field endOffset:I
       9: aload_0
      10: getfield      #3                  // Field startOffset:I
      13: isub
      14: if_icmpgt     34
      17: aload_0
      18: aload_0
      19: getfield      #3                  // Field startOffset:I
      22: iload_1
      23: iadd
      24: aload_0
      25: getfield      #3                  // Field startOffset:I
      28: iload_2
      29: iadd
      30: invokevirtual #28                 // Method baseSubSequence:(II)Lcom/vladsch/flexmark/util/sequence/SubSequence;
      33: areturn
      34: iload_1
      35: iflt          51
      38: aload_0
      39: getfield      #3                  // Field startOffset:I
      42: iload_1
      43: iadd
      44: aload_0
      45: getfield      #4                  // Field endOffset:I
      48: if_icmple     90
      51: new           #14                 // class java/lang/StringIndexOutOfBoundsException
      54: dup
      55: new           #15                 // class java/lang/StringBuilder
      58: dup
      59: invokespecial #16                 // Method java/lang/StringBuilder."<init>":()V
      62: ldc           #17                 // String SubCharSequence index:
      64: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      67: iload_1
      68: invokevirtual #19                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      71: ldc           #20                 // String  out of range: 0,
      73: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      76: aload_0
      77: invokevirtual #11                 // Method length:()I
      80: invokevirtual #19                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      83: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      86: invokespecial #22                 // Method java/lang/StringIndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      89: athrow
      90: new           #14                 // class java/lang/StringIndexOutOfBoundsException
      93: dup
      94: new           #15                 // class java/lang/StringBuilder
      97: dup
      98: invokespecial #16                 // Method java/lang/StringBuilder."<init>":()V
     101: ldc           #17                 // String SubCharSequence index:
     103: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     106: iload_2
     107: invokevirtual #19                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     110: ldc           #20                 // String  out of range: 0,
     112: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     115: aload_0
     116: invokevirtual #11                 // Method length:()I
     119: invokevirtual #19                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     122: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     125: invokespecial #22                 // Method java/lang/StringIndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
     128: athrow

  public com.vladsch.flexmark.util.sequence.SubSequence baseSubSequence(int, int);
    Code:
       0: iload_1
       1: iflt          66
       4: iload_2
       5: aload_0
       6: getfield      #1                  // Field base:Lcom/vladsch/flexmark/util/sequence/SubSequence;
       9: invokevirtual #11                 // Method length:()I
      12: if_icmpgt     66
      15: iload_1
      16: aload_0
      17: getfield      #3                  // Field startOffset:I
      20: if_icmpne     35
      23: iload_2
      24: aload_0
      25: getfield      #4                  // Field endOffset:I
      28: if_icmpne     35
      31: aload_0
      32: goto          65
      35: aload_0
      36: getfield      #1                  // Field base:Lcom/vladsch/flexmark/util/sequence/SubSequence;
      39: aload_0
      40: if_acmpeq     55
      43: aload_0
      44: getfield      #1                  // Field base:Lcom/vladsch/flexmark/util/sequence/SubSequence;
      47: iload_1
      48: iload_2
      49: invokevirtual #28                 // Method baseSubSequence:(II)Lcom/vladsch/flexmark/util/sequence/SubSequence;
      52: goto          65
      55: new           #29                 // class com/vladsch/flexmark/util/sequence/SubSequence
      58: dup
      59: aload_0
      60: iload_1
      61: iload_2
      62: invokespecial #30                 // Method "<init>":(Lcom/vladsch/flexmark/util/sequence/SubSequence;II)V
      65: areturn
      66: iload_1
      67: iflt          81
      70: iload_1
      71: aload_0
      72: getfield      #1                  // Field base:Lcom/vladsch/flexmark/util/sequence/SubSequence;
      75: invokevirtual #11                 // Method length:()I
      78: if_icmple     120
      81: new           #14                 // class java/lang/StringIndexOutOfBoundsException
      84: dup
      85: new           #15                 // class java/lang/StringBuilder
      88: dup
      89: invokespecial #16                 // Method java/lang/StringBuilder."<init>":()V
      92: ldc           #17                 // String SubCharSequence index:
      94: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      97: iload_1
      98: invokevirtual #19                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     101: ldc           #20                 // String  out of range: 0,
     103: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     106: aload_0
     107: invokevirtual #11                 // Method length:()I
     110: invokevirtual #19                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     113: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     116: invokespecial #22                 // Method java/lang/StringIndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
     119: athrow
     120: new           #14                 // class java/lang/StringIndexOutOfBoundsException
     123: dup
     124: new           #15                 // class java/lang/StringBuilder
     127: dup
     128: invokespecial #16                 // Method java/lang/StringBuilder."<init>":()V
     131: ldc           #17                 // String SubCharSequence index:
     133: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     136: iload_2
     137: invokevirtual #19                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     140: ldc           #20                 // String  out of range: 0,
     142: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     145: aload_0
     146: invokevirtual #11                 // Method length:()I
     149: invokevirtual #19                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     152: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     155: invokespecial #22                 // Method java/lang/StringIndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
     158: athrow

  public com.vladsch.flexmark.util.sequence.BasedSequence appendTo(java.lang.StringBuilder, int, int);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #2                  // Field baseSeq:Ljava/lang/CharSequence;
       5: aload_0
       6: getfield      #3                  // Field startOffset:I
       9: iload_2
      10: iadd
      11: aload_0
      12: getfield      #3                  // Field startOffset:I
      15: iload_3
      16: iadd
      17: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;
      20: pop
      21: aload_0
      22: areturn

  public int hashCode();
    Code:
       0: aload_0
       1: invokevirtual #32                 // Method toString:()Ljava/lang/String;
       4: invokevirtual #33                 // Method java/lang/String.hashCode:()I
       7: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: aload_0
       2: if_acmpeq     26
       5: aload_1
       6: instanceof    #34                 // class java/lang/CharSequence
       9: ifeq          30
      12: aload_0
      13: invokevirtual #32                 // Method toString:()Ljava/lang/String;
      16: aload_1
      17: invokevirtual #35                 // Method java/lang/Object.toString:()Ljava/lang/String;
      20: invokevirtual #36                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      23: ifeq          30
      26: iconst_1
      27: goto          31
      30: iconst_0
      31: ireturn

  public java.lang.String toString();
    Code:
       0: new           #15                 // class java/lang/StringBuilder
       3: dup
       4: aload_0
       5: invokevirtual #11                 // Method length:()I
       8: invokespecial #37                 // Method java/lang/StringBuilder."<init>":(I)V
      11: astore_1
      12: aload_0
      13: aload_1
      14: iconst_0
      15: aload_0
      16: invokevirtual #11                 // Method length:()I
      19: invokevirtual #38                 // Method appendTo:(Ljava/lang/StringBuilder;II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      22: pop
      23: aload_1
      24: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      27: areturn

  public static com.vladsch.flexmark.util.sequence.BasedSequence of(java.lang.CharSequence);
    Code:
       0: aload_0
       1: instanceof    #7                  // class com/vladsch/flexmark/util/sequence/BasedSequence
       4: ifeq          12
       7: aload_0
       8: checkcast     #7                  // class com/vladsch/flexmark/util/sequence/BasedSequence
      11: areturn
      12: aload_0
      13: ifnonnull     22
      16: getstatic     #39                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      19: goto          30
      22: new           #29                 // class com/vladsch/flexmark/util/sequence/SubSequence
      25: dup
      26: aload_0
      27: invokespecial #40                 // Method "<init>":(Ljava/lang/CharSequence;)V
      30: areturn

  public static com.vladsch.flexmark.util.sequence.BasedSequence of(java.lang.CharSequence, int);
    Code:
       0: aload_0
       1: instanceof    #7                  // class com/vladsch/flexmark/util/sequence/BasedSequence
       4: ifeq          18
       7: aload_0
       8: checkcast     #7                  // class com/vladsch/flexmark/util/sequence/BasedSequence
      11: iload_1
      12: invokeinterface #41,  2           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(I)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      17: areturn
      18: aload_0
      19: ifnonnull     28
      22: getstatic     #39                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      25: goto          61
      28: iload_1
      29: ifne          43
      32: new           #29                 // class com/vladsch/flexmark/util/sequence/SubSequence
      35: dup
      36: aload_0
      37: invokespecial #40                 // Method "<init>":(Ljava/lang/CharSequence;)V
      40: goto          61
      43: new           #29                 // class com/vladsch/flexmark/util/sequence/SubSequence
      46: dup
      47: aload_0
      48: invokespecial #40                 // Method "<init>":(Ljava/lang/CharSequence;)V
      51: iload_1
      52: aload_0
      53: invokeinterface #10,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      58: invokevirtual #27                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/SubSequence;
      61: areturn

  public static com.vladsch.flexmark.util.sequence.BasedSequence of(java.lang.CharSequence, int, int);
    Code:
       0: aload_0
       1: instanceof    #7                  // class com/vladsch/flexmark/util/sequence/BasedSequence
       4: ifeq          19
       7: aload_0
       8: checkcast     #7                  // class com/vladsch/flexmark/util/sequence/BasedSequence
      11: iload_1
      12: iload_2
      13: invokeinterface #42,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      18: areturn
      19: aload_0
      20: ifnonnull     29
      23: getstatic     #39                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      26: goto          67
      29: iload_1
      30: ifne          54
      33: iload_2
      34: aload_0
      35: invokeinterface #10,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      40: if_icmpne     54
      43: new           #29                 // class com/vladsch/flexmark/util/sequence/SubSequence
      46: dup
      47: aload_0
      48: invokespecial #40                 // Method "<init>":(Ljava/lang/CharSequence;)V
      51: goto          67
      54: new           #29                 // class com/vladsch/flexmark/util/sequence/SubSequence
      57: dup
      58: aload_0
      59: invokespecial #40                 // Method "<init>":(Ljava/lang/CharSequence;)V
      62: iload_1
      63: iload_2
      64: invokevirtual #27                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/SubSequence;
      67: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence subSequence(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #43                 // Method subSequence:(I)Lcom/vladsch/flexmark/util/sequence/SubSequence;
       5: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence subSequence(com.vladsch.flexmark.util.sequence.Range);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #44                 // Method subSequence:(Lcom/vladsch/flexmark/util/sequence/Range;)Lcom/vladsch/flexmark/util/sequence/SubSequence;
       5: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence baseSubSequence(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokevirtual #28                 // Method baseSubSequence:(II)Lcom/vladsch/flexmark/util/sequence/SubSequence;
       6: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence subSequence(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokevirtual #27                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/SubSequence;
       6: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence getBaseSequence();
    Code:
       0: aload_0
       1: invokevirtual #45                 // Method getBaseSequence:()Lcom/vladsch/flexmark/util/sequence/SubSequence;
       4: areturn

  public java.lang.CharSequence subSequence(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokevirtual #27                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/SubSequence;
       6: areturn

  static {};
    Code:
       0: ldc           #29                 // class com/vladsch/flexmark/util/sequence/SubSequence
       2: invokevirtual #46                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #6                  // Field $assertionsDisabled:Z
      16: return
}
