Compiled from "BasedSequence.java"
public class com.vladsch.flexmark.util.sequence.BasedSequence$EmptyBasedSequence extends com.vladsch.flexmark.util.sequence.BasedSequenceImpl {
  public com.vladsch.flexmark.util.sequence.BasedSequence$EmptyBasedSequence();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/vladsch/flexmark/util/sequence/BasedSequenceImpl."<init>":()V
       4: return

  public int length();
    Code:
       0: iconst_0
       1: ireturn

  public char charAt(int);
    Code:
       0: new           #2                  // class java/lang/StringIndexOutOfBoundsException
       3: dup
       4: new           #3                  // class java/lang/StringBuilder
       7: dup
       8: invokespecial #4                  // Method java/lang/StringBuilder."<init>":()V
      11: ldc           #5                  // String String index:
      13: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      16: iload_1
      17: invokevirtual #7                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      20: ldc           #8                  // String  out of range: 0,
      22: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      25: aload_0
      26: invokevirtual #9                  // Method length:()I
      29: invokevirtual #7                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      32: invokevirtual #10                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      35: invokespecial #11                 // Method java/lang/StringIndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      38: athrow

  public int getIndexOffset(int);
    Code:
       0: iload_1
       1: ifne          6
       4: iconst_0
       5: ireturn
       6: new           #2                  // class java/lang/StringIndexOutOfBoundsException
       9: dup
      10: new           #3                  // class java/lang/StringBuilder
      13: dup
      14: invokespecial #4                  // Method java/lang/StringBuilder."<init>":()V
      17: ldc           #5                  // String String index:
      19: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: iload_1
      23: invokevirtual #7                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      26: ldc           #8                  // String  out of range: 0,
      28: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      31: aload_0
      32: invokevirtual #9                  // Method length:()I
      35: invokevirtual #7                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      38: invokevirtual #10                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      41: invokespecial #11                 // Method java/lang/StringIndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      44: athrow

  public com.vladsch.flexmark.util.sequence.BasedSequence subSequence(int, int);
    Code:
       0: iload_1
       1: ifne          10
       4: iload_2
       5: ifne          10
       8: aload_0
       9: areturn
      10: new           #2                  // class java/lang/StringIndexOutOfBoundsException
      13: dup
      14: new           #3                  // class java/lang/StringBuilder
      17: dup
      18: invokespecial #4                  // Method java/lang/StringBuilder."<init>":()V
      21: ldc           #12                 // String EMPTY subSequence(
      23: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: iload_1
      27: invokevirtual #7                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      30: ldc           #13                 // String ,
      32: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: iload_2
      36: invokevirtual #7                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      39: ldc           #14                 // String ) only subSequence(0, 0) is allowed
      41: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      44: invokevirtual #10                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      47: invokespecial #11                 // Method java/lang/StringIndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      50: athrow

  public com.vladsch.flexmark.util.sequence.BasedSequence baseSubSequence(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokevirtual #15                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       6: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence getBaseSequence();
    Code:
       0: getstatic     #16                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       3: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence getBase();
    Code:
       0: getstatic     #16                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       3: areturn

  public int getStartOffset();
    Code:
       0: iconst_0
       1: ireturn

  public int getEndOffset();
    Code:
       0: iconst_0
       1: ireturn

  public com.vladsch.flexmark.util.sequence.Range getSourceRange();
    Code:
       0: getstatic     #17                 // Field com/vladsch/flexmark/util/sequence/Range.NULL:Lcom/vladsch/flexmark/util/sequence/Range;
       3: areturn

  public java.lang.String toString();
    Code:
       0: ldc           #18                 // String
       2: areturn

  public java.lang.Object getBase();
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method getBase:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: areturn

  public java.lang.CharSequence subSequence(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokevirtual #15                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       6: areturn
}
