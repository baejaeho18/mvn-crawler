Compiled from "OrderedMultiMap.java"
public class com.vladsch.flexmark.util.collection.OrderedMultiMap<K, V> implements java.util.Map<K, V>, java.lang.Iterable<java.util.Map$Entry<K, V>> {
  private final com.vladsch.flexmark.util.collection.OrderedSet<K> myKeySet;

  private final com.vladsch.flexmark.util.collection.OrderedSet<V> myValueSet;

  private final com.vladsch.flexmark.util.collection.CollectionHost<com.vladsch.flexmark.util.Paired<K, V>> myHost;

  private boolean myInKeyUpdate;

  private boolean myInValueUpdate;

  private com.vladsch.flexmark.util.collection.iteration.Indexed<java.util.Map$Entry<K, V>> myIndexedProxy;

  static final boolean $assertionsDisabled;

  public com.vladsch.flexmark.util.collection.OrderedMultiMap();
    Code:
       0: aload_0
       1: iconst_0
       2: aconst_null
       3: invokespecial #12                 // Method "<init>":(ILcom/vladsch/flexmark/util/collection/CollectionHost;)V
       6: return

  public com.vladsch.flexmark.util.collection.OrderedMultiMap(int);
    Code:
       0: aload_0
       1: iload_1
       2: aconst_null
       3: invokespecial #12                 // Method "<init>":(ILcom/vladsch/flexmark/util/collection/CollectionHost;)V
       6: return

  public com.vladsch.flexmark.util.collection.OrderedMultiMap(com.vladsch.flexmark.util.collection.CollectionHost<com.vladsch.flexmark.util.Paired<K, V>>);
    Code:
       0: aload_0
       1: iconst_0
       2: aload_1
       3: invokespecial #12                 // Method "<init>":(ILcom/vladsch/flexmark/util/collection/CollectionHost;)V
       6: return

  public com.vladsch.flexmark.util.collection.OrderedMultiMap(int, com.vladsch.flexmark.util.collection.CollectionHost<com.vladsch.flexmark.util.Paired<K, V>>);
    Code:
       0: aload_0
       1: invokespecial #13                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_2
       6: putfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
       9: aload_0
      10: aconst_null
      11: putfield      #15                 // Field myIndexedProxy:Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
      14: aload_0
      15: new           #16                 // class com/vladsch/flexmark/util/collection/OrderedSet
      18: dup
      19: iload_1
      20: new           #17                 // class com/vladsch/flexmark/util/collection/OrderedMultiMap$1
      23: dup
      24: aload_0
      25: invokespecial #18                 // Method com/vladsch/flexmark/util/collection/OrderedMultiMap$1."<init>":(Lcom/vladsch/flexmark/util/collection/OrderedMultiMap;)V
      28: invokespecial #19                 // Method com/vladsch/flexmark/util/collection/OrderedSet."<init>":(ILcom/vladsch/flexmark/util/collection/CollectionHost;)V
      31: putfield      #20                 // Field myValueSet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      34: aload_0
      35: new           #16                 // class com/vladsch/flexmark/util/collection/OrderedSet
      38: dup
      39: iload_1
      40: new           #21                 // class com/vladsch/flexmark/util/collection/OrderedMultiMap$2
      43: dup
      44: aload_0
      45: invokespecial #22                 // Method com/vladsch/flexmark/util/collection/OrderedMultiMap$2."<init>":(Lcom/vladsch/flexmark/util/collection/OrderedMultiMap;)V
      48: invokespecial #19                 // Method com/vladsch/flexmark/util/collection/OrderedSet."<init>":(ILcom/vladsch/flexmark/util/collection/CollectionHost;)V
      51: putfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      54: return

  public com.vladsch.flexmark.util.collection.iteration.Indexed<java.util.Map$Entry<K, V>> getIndexedProxy();
    Code:
       0: aload_0
       1: getfield      #15                 // Field myIndexedProxy:Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
       4: ifnull        12
       7: aload_0
       8: getfield      #15                 // Field myIndexedProxy:Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
      11: areturn
      12: aload_0
      13: new           #24                 // class com/vladsch/flexmark/util/collection/OrderedMultiMap$3
      16: dup
      17: aload_0
      18: invokespecial #25                 // Method com/vladsch/flexmark/util/collection/OrderedMultiMap$3."<init>":(Lcom/vladsch/flexmark/util/collection/OrderedMultiMap;)V
      21: putfield      #15                 // Field myIndexedProxy:Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
      24: aload_0
      25: getfield      #15                 // Field myIndexedProxy:Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
      28: areturn

  private java.util.Map$Entry<K, V> getEntry(int);
    Code:
       0: new           #26                 // class com/vladsch/flexmark/util/collection/MapEntry
       3: dup
       4: aload_0
       5: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       8: iload_1
       9: invokevirtual #27                 // Method com/vladsch/flexmark/util/collection/OrderedSet.getValueOrNull:(I)Ljava/lang/Object;
      12: aload_0
      13: getfield      #20                 // Field myValueSet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      16: iload_1
      17: invokevirtual #27                 // Method com/vladsch/flexmark/util/collection/OrderedSet.getValueOrNull:(I)Ljava/lang/Object;
      20: invokespecial #28                 // Method com/vladsch/flexmark/util/collection/MapEntry."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      23: areturn

  public int getModificationCount();
    Code:
       0: aload_0
       1: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: invokevirtual #29                 // Method com/vladsch/flexmark/util/collection/OrderedSet.getModificationCount:()I
       7: i2l
       8: aload_0
       9: getfield      #20                 // Field myValueSet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      12: invokevirtual #29                 // Method com/vladsch/flexmark/util/collection/OrderedSet.getModificationCount:()I
      15: i2l
      16: ladd
      17: l2i
      18: ireturn

  private void addingKey(int, K, java.lang.Object);
    Code:
       0: getstatic     #30                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: getfield      #4                  // Field myInValueUpdate:Z
      10: ifeq          21
      13: new           #31                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #32                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: iconst_1
      23: putfield      #4                  // Field myInValueUpdate:Z
      26: aload_0
      27: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      30: ifnull        65
      33: aload_0
      34: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      37: invokeinterface #33,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.skipHostUpdate:()Z
      42: ifne          65
      45: aload_0
      46: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      49: iload_1
      50: new           #34                 // class com/vladsch/flexmark/util/Pair
      53: dup
      54: aload_2
      55: aload_3
      56: invokespecial #35                 // Method com/vladsch/flexmark/util/Pair."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      59: aconst_null
      60: invokeinterface #36,  4           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.adding:(ILjava/lang/Object;Ljava/lang/Object;)V
      65: aload_3
      66: ifnonnull     80
      69: aload_0
      70: getfield      #20                 // Field myValueSet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      73: iload_1
      74: invokevirtual #37                 // Method com/vladsch/flexmark/util/collection/OrderedSet.addNulls:(I)V
      77: goto          89
      80: aload_0
      81: getfield      #20                 // Field myValueSet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      84: aload_3
      85: invokevirtual #38                 // Method com/vladsch/flexmark/util/collection/OrderedSet.add:(Ljava/lang/Object;)Z
      88: pop
      89: aload_0
      90: iconst_0
      91: putfield      #4                  // Field myInValueUpdate:Z
      94: return

  private void addingNullKey(int);
    Code:
       0: getstatic     #30                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: getfield      #4                  // Field myInValueUpdate:Z
      10: ifeq          21
      13: new           #31                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #32                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: iconst_1
      23: putfield      #4                  // Field myInValueUpdate:Z
      26: aload_0
      27: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      30: ifnull        55
      33: aload_0
      34: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      37: invokeinterface #33,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.skipHostUpdate:()Z
      42: ifne          55
      45: aload_0
      46: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      49: iload_1
      50: invokeinterface #39,  2           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.addingNulls:(I)V
      55: aload_0
      56: invokevirtual #40                 // Method valueSet:()Lcom/vladsch/flexmark/util/collection/OrderedSet;
      59: invokevirtual #41                 // Method com/vladsch/flexmark/util/collection/OrderedSet.size:()I
      62: iload_1
      63: if_icmpgt     78
      66: aload_0
      67: getfield      #20                 // Field myValueSet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      70: aconst_null
      71: invokevirtual #38                 // Method com/vladsch/flexmark/util/collection/OrderedSet.add:(Ljava/lang/Object;)Z
      74: pop
      75: goto          55
      78: aload_0
      79: iconst_0
      80: putfield      #4                  // Field myInValueUpdate:Z
      83: return

  private java.lang.Object removingKey(int, K);
    Code:
       0: getstatic     #30                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: getfield      #4                  // Field myInValueUpdate:Z
      10: ifeq          21
      13: new           #31                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #32                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: iconst_1
      23: putfield      #4                  // Field myInValueUpdate:Z
      26: aload_0
      27: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      30: ifnull        65
      33: aload_0
      34: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      37: invokeinterface #33,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.skipHostUpdate:()Z
      42: ifne          65
      45: aload_0
      46: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      49: iload_1
      50: new           #34                 // class com/vladsch/flexmark/util/Pair
      53: dup
      54: aload_2
      55: aconst_null
      56: invokespecial #35                 // Method com/vladsch/flexmark/util/Pair."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      59: invokeinterface #42,  3           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.removing:(ILjava/lang/Object;)Ljava/lang/Object;
      64: pop
      65: aload_0
      66: getfield      #20                 // Field myValueSet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      69: iload_1
      70: invokevirtual #43                 // Method com/vladsch/flexmark/util/collection/OrderedSet.removeIndexHosted:(I)Ljava/lang/Object;
      73: astore_3
      74: aload_0
      75: iconst_0
      76: putfield      #4                  // Field myInValueUpdate:Z
      79: aload_3
      80: areturn

  private void addingValue(int, V, java.lang.Object);
    Code:
       0: getstatic     #30                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: getfield      #8                  // Field myInKeyUpdate:Z
      10: ifeq          21
      13: new           #31                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #32                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: iconst_1
      23: putfield      #8                  // Field myInKeyUpdate:Z
      26: aload_0
      27: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      30: ifnull        65
      33: aload_0
      34: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      37: invokeinterface #33,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.skipHostUpdate:()Z
      42: ifne          65
      45: aload_0
      46: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      49: iload_1
      50: new           #34                 // class com/vladsch/flexmark/util/Pair
      53: dup
      54: aload_3
      55: aload_2
      56: invokespecial #35                 // Method com/vladsch/flexmark/util/Pair."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      59: aconst_null
      60: invokeinterface #36,  4           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.adding:(ILjava/lang/Object;Ljava/lang/Object;)V
      65: aload_3
      66: ifnonnull     80
      69: aload_0
      70: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      73: iload_1
      74: invokevirtual #37                 // Method com/vladsch/flexmark/util/collection/OrderedSet.addNulls:(I)V
      77: goto          89
      80: aload_0
      81: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      84: aload_3
      85: invokevirtual #38                 // Method com/vladsch/flexmark/util/collection/OrderedSet.add:(Ljava/lang/Object;)Z
      88: pop
      89: aload_0
      90: iconst_0
      91: putfield      #8                  // Field myInKeyUpdate:Z
      94: return

  private void addingNullValue(int);
    Code:
       0: getstatic     #30                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: getfield      #8                  // Field myInKeyUpdate:Z
      10: ifeq          21
      13: new           #31                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #32                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: iconst_1
      23: putfield      #8                  // Field myInKeyUpdate:Z
      26: aload_0
      27: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      30: ifnull        55
      33: aload_0
      34: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      37: invokeinterface #33,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.skipHostUpdate:()Z
      42: ifne          55
      45: aload_0
      46: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      49: iload_1
      50: invokeinterface #39,  2           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.addingNulls:(I)V
      55: aload_0
      56: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      59: invokevirtual #41                 // Method com/vladsch/flexmark/util/collection/OrderedSet.size:()I
      62: iload_1
      63: if_icmpgt     78
      66: aload_0
      67: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      70: aconst_null
      71: invokevirtual #38                 // Method com/vladsch/flexmark/util/collection/OrderedSet.add:(Ljava/lang/Object;)Z
      74: pop
      75: goto          55
      78: aload_0
      79: iconst_0
      80: putfield      #8                  // Field myInKeyUpdate:Z
      83: return

  private java.lang.Object removingValue(int, V);
    Code:
       0: getstatic     #30                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: getfield      #8                  // Field myInKeyUpdate:Z
      10: ifeq          21
      13: new           #31                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #32                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: iconst_1
      23: putfield      #8                  // Field myInKeyUpdate:Z
      26: aload_0
      27: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      30: ifnull        65
      33: aload_0
      34: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      37: invokeinterface #33,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.skipHostUpdate:()Z
      42: ifne          65
      45: aload_0
      46: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      49: iload_1
      50: new           #34                 // class com/vladsch/flexmark/util/Pair
      53: dup
      54: aconst_null
      55: aload_2
      56: invokespecial #35                 // Method com/vladsch/flexmark/util/Pair."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      59: invokeinterface #42,  3           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.removing:(ILjava/lang/Object;)Ljava/lang/Object;
      64: pop
      65: aload_0
      66: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      69: iload_1
      70: invokevirtual #43                 // Method com/vladsch/flexmark/util/collection/OrderedSet.removeIndexHosted:(I)Ljava/lang/Object;
      73: astore_3
      74: aload_0
      75: iconst_0
      76: putfield      #8                  // Field myInKeyUpdate:Z
      79: aload_3
      80: areturn

  public int size();
    Code:
       0: aload_0
       1: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: invokevirtual #41                 // Method com/vladsch/flexmark/util/collection/OrderedSet.size:()I
       7: ireturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: invokevirtual #44                 // Method com/vladsch/flexmark/util/collection/OrderedSet.isEmpty:()Z
       7: ireturn

  public boolean containsKey(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: aload_1
       5: invokevirtual #45                 // Method com/vladsch/flexmark/util/collection/OrderedSet.contains:(Ljava/lang/Object;)Z
       8: ireturn

  public boolean containsValue(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #20                 // Field myValueSet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: aload_1
       5: invokevirtual #46                 // Method com/vladsch/flexmark/util/collection/OrderedSet.indexOf:(Ljava/lang/Object;)I
       8: istore_2
       9: aload_0
      10: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      13: iload_2
      14: invokevirtual #47                 // Method com/vladsch/flexmark/util/collection/OrderedSet.isValidIndex:(I)Z
      17: ireturn

  public V get(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #48                 // Method getKeyValue:(Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public V getKeyValue(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: aload_1
       5: invokevirtual #46                 // Method com/vladsch/flexmark/util/collection/OrderedSet.indexOf:(Ljava/lang/Object;)I
       8: istore_2
       9: iload_2
      10: iconst_m1
      11: if_icmpne     18
      14: aconst_null
      15: goto          26
      18: aload_0
      19: getfield      #20                 // Field myValueSet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      22: iload_2
      23: invokevirtual #49                 // Method com/vladsch/flexmark/util/collection/OrderedSet.getValue:(I)Ljava/lang/Object;
      26: areturn

  public K getValueKey(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #20                 // Field myValueSet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: aload_1
       5: invokevirtual #46                 // Method com/vladsch/flexmark/util/collection/OrderedSet.indexOf:(Ljava/lang/Object;)I
       8: istore_2
       9: iload_2
      10: iconst_m1
      11: if_icmpne     18
      14: aconst_null
      15: goto          26
      18: aload_0
      19: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      22: iload_2
      23: invokevirtual #49                 // Method com/vladsch/flexmark/util/collection/OrderedSet.getValue:(I)Ljava/lang/Object;
      26: areturn

  public V put(K, V);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #50                 // Method putKeyValue:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  public void addNullEntry(int);
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #8                  // Field myInKeyUpdate:Z
       5: aload_0
       6: iconst_1
       7: putfield      #4                  // Field myInValueUpdate:Z
      10: aload_0
      11: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      14: ifnull        39
      17: aload_0
      18: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      21: invokeinterface #33,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.skipHostUpdate:()Z
      26: ifne          39
      29: aload_0
      30: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      33: iload_1
      34: invokeinterface #39,  2           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.addingNulls:(I)V
      39: aload_0
      40: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      43: iload_1
      44: invokevirtual #37                 // Method com/vladsch/flexmark/util/collection/OrderedSet.addNulls:(I)V
      47: aload_0
      48: getfield      #20                 // Field myValueSet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      51: iload_1
      52: invokevirtual #37                 // Method com/vladsch/flexmark/util/collection/OrderedSet.addNulls:(I)V
      55: aload_0
      56: iconst_0
      57: putfield      #4                  // Field myInValueUpdate:Z
      60: aload_0
      61: iconst_0
      62: putfield      #8                  // Field myInKeyUpdate:Z
      65: return

  public boolean putEntry(java.util.Map$Entry<K, V>);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #51,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
       7: aload_1
       8: invokeinterface #52,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      13: invokespecial #53                 // Method addKeyValue:(Ljava/lang/Object;Ljava/lang/Object;)Z
      16: ireturn

  public boolean putKeyValueEntry(java.util.Map$Entry<K, V>);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #51,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
       7: aload_1
       8: invokeinterface #52,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      13: invokespecial #53                 // Method addKeyValue:(Ljava/lang/Object;Ljava/lang/Object;)Z
      16: ireturn

  public boolean putValueKeyEntry(java.util.Map$Entry<V, K>);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #52,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
       7: aload_1
       8: invokeinterface #51,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      13: invokespecial #53                 // Method addKeyValue:(Ljava/lang/Object;Ljava/lang/Object;)Z
      16: ireturn

  public boolean putKeyValuePair(com.vladsch.flexmark.util.Paired<K, V>);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #54,  1           // InterfaceMethod com/vladsch/flexmark/util/Paired.getFirst:()Ljava/lang/Object;
       7: aload_1
       8: invokeinterface #55,  1           // InterfaceMethod com/vladsch/flexmark/util/Paired.getSecond:()Ljava/lang/Object;
      13: invokespecial #53                 // Method addKeyValue:(Ljava/lang/Object;Ljava/lang/Object;)Z
      16: ireturn

  public boolean putValueKeyPair(com.vladsch.flexmark.util.Paired<V, K>);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #55,  1           // InterfaceMethod com/vladsch/flexmark/util/Paired.getSecond:()Ljava/lang/Object;
       7: aload_1
       8: invokeinterface #54,  1           // InterfaceMethod com/vladsch/flexmark/util/Paired.getFirst:()Ljava/lang/Object;
      13: invokespecial #53                 // Method addKeyValue:(Ljava/lang/Object;Ljava/lang/Object;)Z
      16: ireturn

  public V putKeyValue(K, V);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #53                 // Method addKeyValue:(Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ifne          13
       9: aload_2
      10: goto          14
      13: aconst_null
      14: areturn

  public K putValueKey(V, K);
    Code:
       0: aload_0
       1: aload_2
       2: aload_1
       3: invokespecial #53                 // Method addKeyValue:(Ljava/lang/Object;Ljava/lang/Object;)Z
       6: ifne          13
       9: aload_2
      10: goto          14
      13: aconst_null
      14: areturn

  private boolean addKeyValue(K, V);
    Code:
       0: aload_0
       1: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: aload_1
       5: invokevirtual #46                 // Method com/vladsch/flexmark/util/collection/OrderedSet.indexOf:(Ljava/lang/Object;)I
       8: istore_3
       9: aload_0
      10: getfield      #20                 // Field myValueSet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      13: aload_2
      14: invokevirtual #46                 // Method com/vladsch/flexmark/util/collection/OrderedSet.indexOf:(Ljava/lang/Object;)I
      17: istore        4
      19: iload_3
      20: iconst_m1
      21: if_icmpne     150
      24: iload         4
      26: iconst_m1
      27: if_icmpne     150
      30: aload_0
      31: iconst_1
      32: putfield      #8                  // Field myInKeyUpdate:Z
      35: aload_0
      36: iconst_1
      37: putfield      #4                  // Field myInValueUpdate:Z
      40: aload_0
      41: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      44: ifnull        90
      47: aload_0
      48: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      51: invokeinterface #33,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.skipHostUpdate:()Z
      56: ifne          90
      59: aload_0
      60: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      63: aload_0
      64: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      67: invokevirtual #56                 // Method com/vladsch/flexmark/util/collection/OrderedSet.getValueList:()Ljava/util/List;
      70: invokeinterface #57,  1           // InterfaceMethod java/util/List.size:()I
      75: new           #34                 // class com/vladsch/flexmark/util/Pair
      78: dup
      79: aload_1
      80: aload_2
      81: invokespecial #35                 // Method com/vladsch/flexmark/util/Pair."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      84: aconst_null
      85: invokeinterface #36,  4           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.adding:(ILjava/lang/Object;Ljava/lang/Object;)V
      90: aload_1
      91: ifnonnull     104
      94: aload_0
      95: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      98: invokevirtual #58                 // Method com/vladsch/flexmark/util/collection/OrderedSet.addNull:()V
     101: goto          114
     104: aload_0
     105: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
     108: aload_1
     109: aload_2
     110: invokevirtual #59                 // Method com/vladsch/flexmark/util/collection/OrderedSet.add:(Ljava/lang/Object;Ljava/lang/Object;)Z
     113: pop
     114: aload_1
     115: ifnonnull     128
     118: aload_0
     119: getfield      #20                 // Field myValueSet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
     122: invokevirtual #58                 // Method com/vladsch/flexmark/util/collection/OrderedSet.addNull:()V
     125: goto          138
     128: aload_0
     129: getfield      #20                 // Field myValueSet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
     132: aload_2
     133: aload_1
     134: invokevirtual #59                 // Method com/vladsch/flexmark/util/collection/OrderedSet.add:(Ljava/lang/Object;Ljava/lang/Object;)Z
     137: pop
     138: aload_0
     139: iconst_0
     140: putfield      #4                  // Field myInValueUpdate:Z
     143: aload_0
     144: iconst_0
     145: putfield      #8                  // Field myInKeyUpdate:Z
     148: iconst_1
     149: ireturn
     150: iload_3
     151: iconst_m1
     152: if_icmpne     246
     155: aload_0
     156: iconst_1
     157: putfield      #8                  // Field myInKeyUpdate:Z
     160: aload_0
     161: iconst_1
     162: putfield      #4                  // Field myInValueUpdate:Z
     165: aload_0
     166: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
     169: ifnull        205
     172: aload_0
     173: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
     176: invokeinterface #33,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.skipHostUpdate:()Z
     181: ifne          205
     184: aload_0
     185: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
     188: iload         4
     190: new           #34                 // class com/vladsch/flexmark/util/Pair
     193: dup
     194: aload_1
     195: aload_2
     196: invokespecial #35                 // Method com/vladsch/flexmark/util/Pair."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
     199: aconst_null
     200: invokeinterface #36,  4           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.adding:(ILjava/lang/Object;Ljava/lang/Object;)V
     205: aload_1
     206: ifnonnull     222
     209: aload_0
     210: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
     213: iload         4
     215: invokevirtual #60                 // Method com/vladsch/flexmark/util/collection/OrderedSet.removeIndex:(I)Z
     218: pop
     219: goto          234
     222: aload_0
     223: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
     226: iload         4
     228: aload_1
     229: aload_2
     230: invokevirtual #61                 // Method com/vladsch/flexmark/util/collection/OrderedSet.setValueAt:(ILjava/lang/Object;Ljava/lang/Object;)Z
     233: pop
     234: aload_0
     235: iconst_0
     236: putfield      #4                  // Field myInValueUpdate:Z
     239: aload_0
     240: iconst_0
     241: putfield      #8                  // Field myInKeyUpdate:Z
     244: iconst_1
     245: ireturn
     246: iload         4
     248: iconst_m1
     249: if_icmpne     341
     252: aload_0
     253: iconst_1
     254: putfield      #8                  // Field myInKeyUpdate:Z
     257: aload_0
     258: iconst_1
     259: putfield      #4                  // Field myInValueUpdate:Z
     262: aload_0
     263: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
     266: ifnull        301
     269: aload_0
     270: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
     273: invokeinterface #33,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.skipHostUpdate:()Z
     278: ifne          301
     281: aload_0
     282: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
     285: iload_3
     286: new           #34                 // class com/vladsch/flexmark/util/Pair
     289: dup
     290: aload_1
     291: aload_2
     292: invokespecial #35                 // Method com/vladsch/flexmark/util/Pair."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
     295: aconst_null
     296: invokeinterface #36,  4           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.adding:(ILjava/lang/Object;Ljava/lang/Object;)V
     301: aload_1
     302: ifnonnull     318
     305: aload_0
     306: getfield      #20                 // Field myValueSet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
     309: iload         4
     311: invokevirtual #60                 // Method com/vladsch/flexmark/util/collection/OrderedSet.removeIndex:(I)Z
     314: pop
     315: goto          329
     318: aload_0
     319: getfield      #20                 // Field myValueSet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
     322: iload_3
     323: aload_2
     324: aload_1
     325: invokevirtual #61                 // Method com/vladsch/flexmark/util/collection/OrderedSet.setValueAt:(ILjava/lang/Object;Ljava/lang/Object;)Z
     328: pop
     329: aload_0
     330: iconst_0
     331: putfield      #4                  // Field myInValueUpdate:Z
     334: aload_0
     335: iconst_0
     336: putfield      #4                  // Field myInValueUpdate:Z
     339: iconst_1
     340: ireturn
     341: iload         4
     343: iload_3
     344: if_icmpeq     407
     347: new           #62                 // class java/lang/IllegalStateException
     350: dup
     351: new           #63                 // class java/lang/StringBuilder
     354: dup
     355: invokespecial #64                 // Method java/lang/StringBuilder."<init>":()V
     358: ldc           #65                 // String keySet[
     360: invokevirtual #66                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     363: iload_3
     364: invokevirtual #67                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     367: ldc           #68                 // String ]=
     369: invokevirtual #66                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     372: aload_1
     373: invokevirtual #69                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     376: ldc           #70                 // String  and valueSet[
     378: invokevirtual #66                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     381: iload         4
     383: invokevirtual #67                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     386: ldc           #68                 // String ]=
     388: invokevirtual #66                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     391: aload_2
     392: invokevirtual #69                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     395: ldc           #71                 // String  are out of sync
     397: invokevirtual #66                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     400: invokevirtual #72                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     403: invokespecial #73                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     406: athrow
     407: iconst_0
     408: ireturn

  public V remove(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #74                 // Method removeKey:(Ljava/lang/Object;)Ljava/lang/Object;
       5: areturn

  public java.util.Map$Entry<K, V> removeEntry(java.util.Map$Entry<K, V>);
    Code:
       0: aload_0
       1: iconst_m1
       2: aload_1
       3: invokeinterface #51,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
       8: aload_1
       9: invokeinterface #52,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      14: invokespecial #1                  // Method removeEntryIndex:(ILjava/lang/Object;Ljava/lang/Object;)Z
      17: istore_2
      18: iload_2
      19: ifeq          26
      22: aload_1
      23: goto          27
      26: aconst_null
      27: areturn

  private boolean removeEntryIndex(int);
    Code:
       0: aload_0
       1: iload_1
       2: aload_0
       3: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       6: iload_1
       7: invokevirtual #27                 // Method com/vladsch/flexmark/util/collection/OrderedSet.getValueOrNull:(I)Ljava/lang/Object;
      10: aload_0
      11: getfield      #20                 // Field myValueSet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      14: iload_1
      15: invokevirtual #27                 // Method com/vladsch/flexmark/util/collection/OrderedSet.getValueOrNull:(I)Ljava/lang/Object;
      18: invokespecial #1                  // Method removeEntryIndex:(ILjava/lang/Object;Ljava/lang/Object;)Z
      21: ireturn

  private boolean removeEntryIndex(int, K, V);
    Code:
       0: aload_0
       1: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: aload_2
       5: invokevirtual #46                 // Method com/vladsch/flexmark/util/collection/OrderedSet.indexOf:(Ljava/lang/Object;)I
       8: istore        4
      10: aload_0
      11: getfield      #20                 // Field myValueSet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      14: aload_3
      15: invokevirtual #46                 // Method com/vladsch/flexmark/util/collection/OrderedSet.indexOf:(Ljava/lang/Object;)I
      18: istore        5
      20: iload         4
      22: iload         5
      24: if_icmpeq     88
      27: new           #62                 // class java/lang/IllegalStateException
      30: dup
      31: new           #63                 // class java/lang/StringBuilder
      34: dup
      35: invokespecial #64                 // Method java/lang/StringBuilder."<init>":()V
      38: ldc           #65                 // String keySet[
      40: invokevirtual #66                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      43: iload         4
      45: invokevirtual #67                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      48: ldc           #68                 // String ]=
      50: invokevirtual #66                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      53: aload_2
      54: invokevirtual #69                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      57: ldc           #70                 // String  and valueSet[
      59: invokevirtual #66                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      62: iload         5
      64: invokevirtual #67                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      67: ldc           #68                 // String ]=
      69: invokevirtual #66                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      72: aload_3
      73: invokevirtual #69                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      76: ldc           #71                 // String  are out of sync
      78: invokevirtual #66                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      81: invokevirtual #72                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      84: invokespecial #73                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      87: athrow
      88: iload_1
      89: iconst_m1
      90: if_icmpeq     169
      93: iload         4
      95: iload_1
      96: if_icmpeq     169
      99: new           #62                 // class java/lang/IllegalStateException
     102: dup
     103: new           #63                 // class java/lang/StringBuilder
     106: dup
     107: invokespecial #64                 // Method java/lang/StringBuilder."<init>":()V
     110: ldc           #75                 // String removeEntryIndex
     112: invokevirtual #66                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     115: iload_1
     116: invokevirtual #67                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     119: ldc           #76                 // String  does not match keySet[
     121: invokevirtual #66                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     124: iload         4
     126: invokevirtual #67                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     129: ldc           #68                 // String ]=
     131: invokevirtual #66                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     134: aload_2
     135: invokevirtual #69                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     138: ldc           #70                 // String  and valueSet[
     140: invokevirtual #66                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     143: iload         5
     145: invokevirtual #67                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     148: ldc           #68                 // String ]=
     150: invokevirtual #66                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     153: aload_3
     154: invokevirtual #69                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     157: ldc           #71                 // String  are out of sync
     159: invokevirtual #66                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     162: invokevirtual #72                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     165: invokespecial #73                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     168: athrow
     169: iload         4
     171: iconst_m1
     172: if_icmpeq     255
     175: aload_0
     176: iconst_1
     177: putfield      #8                  // Field myInKeyUpdate:Z
     180: aload_0
     181: iconst_1
     182: putfield      #4                  // Field myInValueUpdate:Z
     185: aload_0
     186: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
     189: ifnull        225
     192: aload_0
     193: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
     196: invokeinterface #33,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.skipHostUpdate:()Z
     201: ifne          225
     204: aload_0
     205: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
     208: iload         4
     210: new           #34                 // class com/vladsch/flexmark/util/Pair
     213: dup
     214: aload_2
     215: aload_3
     216: invokespecial #35                 // Method com/vladsch/flexmark/util/Pair."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
     219: invokeinterface #42,  3           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.removing:(ILjava/lang/Object;)Ljava/lang/Object;
     224: pop
     225: aload_0
     226: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
     229: aload_2
     230: invokevirtual #77                 // Method com/vladsch/flexmark/util/collection/OrderedSet.removeHosted:(Ljava/lang/Object;)Ljava/lang/Object;
     233: pop
     234: aload_0
     235: getfield      #20                 // Field myValueSet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
     238: aload_3
     239: invokevirtual #77                 // Method com/vladsch/flexmark/util/collection/OrderedSet.removeHosted:(Ljava/lang/Object;)Ljava/lang/Object;
     242: pop
     243: aload_0
     244: iconst_0
     245: putfield      #4                  // Field myInValueUpdate:Z
     248: aload_0
     249: iconst_0
     250: putfield      #8                  // Field myInKeyUpdate:Z
     253: iconst_1
     254: ireturn
     255: iconst_0
     256: ireturn

  public V removeKey(java.lang.Object);
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #8                  // Field myInKeyUpdate:Z
       5: aload_0
       6: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
       9: ifnull        80
      12: aload_0
      13: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      16: invokeinterface #33,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.skipHostUpdate:()Z
      21: ifne          80
      24: aload_0
      25: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      28: aload_1
      29: invokevirtual #46                 // Method com/vladsch/flexmark/util/collection/OrderedSet.indexOf:(Ljava/lang/Object;)I
      32: istore_2
      33: iload_2
      34: iconst_m1
      35: if_icmpeq     80
      38: aload_0
      39: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      42: iload_2
      43: new           #34                 // class com/vladsch/flexmark/util/Pair
      46: dup
      47: aload_1
      48: aload_0
      49: getfield      #20                 // Field myValueSet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      52: iload_2
      53: invokevirtual #47                 // Method com/vladsch/flexmark/util/collection/OrderedSet.isValidIndex:(I)Z
      56: ifeq          70
      59: aload_0
      60: getfield      #20                 // Field myValueSet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      63: iload_2
      64: invokevirtual #49                 // Method com/vladsch/flexmark/util/collection/OrderedSet.getValue:(I)Ljava/lang/Object;
      67: goto          71
      70: aconst_null
      71: invokespecial #35                 // Method com/vladsch/flexmark/util/Pair."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      74: invokeinterface #42,  3           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.removing:(ILjava/lang/Object;)Ljava/lang/Object;
      79: pop
      80: aload_0
      81: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      84: aload_1
      85: invokevirtual #77                 // Method com/vladsch/flexmark/util/collection/OrderedSet.removeHosted:(Ljava/lang/Object;)Ljava/lang/Object;
      88: astore_2
      89: aload_0
      90: iconst_0
      91: putfield      #8                  // Field myInKeyUpdate:Z
      94: aload_2
      95: areturn

  public K removeValue(java.lang.Object);
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #4                  // Field myInValueUpdate:Z
       5: aload_0
       6: getfield      #20                 // Field myValueSet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       9: aload_1
      10: invokevirtual #46                 // Method com/vladsch/flexmark/util/collection/OrderedSet.indexOf:(Ljava/lang/Object;)I
      13: istore_2
      14: aload_0
      15: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      18: ifnull        80
      21: aload_0
      22: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      25: invokeinterface #33,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.skipHostUpdate:()Z
      30: ifne          80
      33: iload_2
      34: iconst_m1
      35: if_icmpeq     80
      38: aload_0
      39: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      42: iload_2
      43: new           #34                 // class com/vladsch/flexmark/util/Pair
      46: dup
      47: aload_0
      48: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      51: iload_2
      52: invokevirtual #47                 // Method com/vladsch/flexmark/util/collection/OrderedSet.isValidIndex:(I)Z
      55: ifeq          69
      58: aload_0
      59: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      62: iload_2
      63: invokevirtual #49                 // Method com/vladsch/flexmark/util/collection/OrderedSet.getValue:(I)Ljava/lang/Object;
      66: goto          70
      69: aconst_null
      70: aload_1
      71: invokespecial #35                 // Method com/vladsch/flexmark/util/Pair."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      74: invokeinterface #42,  3           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.removing:(ILjava/lang/Object;)Ljava/lang/Object;
      79: pop
      80: aload_0
      81: getfield      #20                 // Field myValueSet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      84: aload_1
      85: invokevirtual #77                 // Method com/vladsch/flexmark/util/collection/OrderedSet.removeHosted:(Ljava/lang/Object;)Ljava/lang/Object;
      88: astore_3
      89: aload_0
      90: iconst_0
      91: putfield      #4                  // Field myInValueUpdate:Z
      94: aload_3
      95: areturn

  public void putAll(java.util.Map<? extends K, ? extends V>);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #78                 // Method putAllKeyValues:(Ljava/util/Map;)V
       5: return

  public void putAllKeyValues(java.util.Map<? extends K, ? extends V>);
    Code:
       0: aload_1
       1: invokeinterface #79,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
       6: invokeinterface #80,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      11: astore_2
      12: aload_2
      13: invokeinterface #81,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      18: ifeq          51
      21: aload_2
      22: invokeinterface #82,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      27: checkcast     #83                 // class java/util/Map$Entry
      30: astore_3
      31: aload_0
      32: aload_3
      33: invokeinterface #51,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      38: aload_3
      39: invokeinterface #52,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      44: invokevirtual #84                 // Method put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      47: pop
      48: goto          12
      51: return

  public void putAllValueKeys(java.util.Map<? extends V, ? extends K>);
    Code:
       0: aload_1
       1: invokeinterface #79,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
       6: invokeinterface #80,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      11: astore_2
      12: aload_2
      13: invokeinterface #81,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      18: ifeq          51
      21: aload_2
      22: invokeinterface #82,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      27: checkcast     #83                 // class java/util/Map$Entry
      30: astore_3
      31: aload_0
      32: aload_3
      33: invokeinterface #51,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      38: aload_3
      39: invokeinterface #52,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      44: invokevirtual #85                 // Method putValueKey:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      47: pop
      48: goto          12
      51: return

  public void clear();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #4                  // Field myInValueUpdate:Z
       5: aload_0
       6: iconst_1
       7: putfield      #8                  // Field myInKeyUpdate:Z
      10: aload_0
      11: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      14: ifnull        38
      17: aload_0
      18: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      21: invokeinterface #33,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.skipHostUpdate:()Z
      26: ifne          38
      29: aload_0
      30: getfield      #14                 // Field myHost:Lcom/vladsch/flexmark/util/collection/CollectionHost;
      33: invokeinterface #86,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/CollectionHost.clearing:()V
      38: aload_0
      39: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      42: invokevirtual #87                 // Method com/vladsch/flexmark/util/collection/OrderedSet.clear:()V
      45: aload_0
      46: getfield      #20                 // Field myValueSet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      49: invokevirtual #87                 // Method com/vladsch/flexmark/util/collection/OrderedSet.clear:()V
      52: aload_0
      53: iconst_0
      54: putfield      #8                  // Field myInKeyUpdate:Z
      57: aload_0
      58: iconst_0
      59: putfield      #4                  // Field myInValueUpdate:Z
      62: return

  public com.vladsch.flexmark.util.collection.OrderedSet<K> keySet();
    Code:
       0: aload_0
       1: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: areturn

  public java.util.Collection<V> values();
    Code:
       0: aload_0
       1: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: invokevirtual #88                 // Method com/vladsch/flexmark/util/collection/OrderedSet.isSparse:()Z
       7: ifne          15
      10: aload_0
      11: getfield      #20                 // Field myValueSet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      14: areturn
      15: new           #89                 // class java/util/ArrayList
      18: dup
      19: aload_0
      20: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      23: invokevirtual #41                 // Method com/vladsch/flexmark/util/collection/OrderedSet.size:()I
      26: invokespecial #90                 // Method java/util/ArrayList."<init>":(I)V
      29: astore_1
      30: aload_0
      31: getfield      #20                 // Field myValueSet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      34: invokevirtual #91                 // Method com/vladsch/flexmark/util/collection/OrderedSet.iterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIndexedIterator;
      37: astore_2
      38: aload_2
      39: invokeinterface #92,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/iteration/ReversibleIndexedIterator.hasNext:()Z
      44: ifeq          61
      47: aload_1
      48: aload_2
      49: invokeinterface #93,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/iteration/ReversibleIndexedIterator.next:()Ljava/lang/Object;
      54: invokevirtual #94                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
      57: pop
      58: goto          38
      61: aload_1
      62: areturn

  public com.vladsch.flexmark.util.collection.OrderedSet<V> valueSet();
    Code:
       0: aload_0
       1: getfield      #20                 // Field myValueSet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: areturn

  public java.util.Collection<K> keys();
    Code:
       0: aload_0
       1: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: invokevirtual #88                 // Method com/vladsch/flexmark/util/collection/OrderedSet.isSparse:()Z
       7: ifne          15
      10: aload_0
      11: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      14: areturn
      15: new           #89                 // class java/util/ArrayList
      18: dup
      19: aload_0
      20: getfield      #20                 // Field myValueSet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      23: invokevirtual #41                 // Method com/vladsch/flexmark/util/collection/OrderedSet.size:()I
      26: invokespecial #90                 // Method java/util/ArrayList."<init>":(I)V
      29: astore_1
      30: aload_0
      31: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      34: invokevirtual #91                 // Method com/vladsch/flexmark/util/collection/OrderedSet.iterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIndexedIterator;
      37: astore_2
      38: aload_2
      39: invokeinterface #92,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/iteration/ReversibleIndexedIterator.hasNext:()Z
      44: ifeq          61
      47: aload_1
      48: aload_2
      49: invokeinterface #93,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/iteration/ReversibleIndexedIterator.next:()Ljava/lang/Object;
      54: invokevirtual #94                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
      57: pop
      58: goto          38
      61: aload_1
      62: areturn

  public K getKey(int);
    Code:
       0: aload_0
       1: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: iload_1
       5: invokevirtual #47                 // Method com/vladsch/flexmark/util/collection/OrderedSet.isValidIndex:(I)Z
       8: ifne          13
      11: aconst_null
      12: areturn
      13: aload_0
      14: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      17: invokevirtual #56                 // Method com/vladsch/flexmark/util/collection/OrderedSet.getValueList:()Ljava/util/List;
      20: iload_1
      21: invokeinterface #95,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      26: areturn

  public V getValue(int);
    Code:
       0: aload_0
       1: getfield      #20                 // Field myValueSet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: iload_1
       5: invokevirtual #47                 // Method com/vladsch/flexmark/util/collection/OrderedSet.isValidIndex:(I)Z
       8: ifne          13
      11: aconst_null
      12: areturn
      13: aload_0
      14: getfield      #20                 // Field myValueSet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      17: iload_1
      18: invokevirtual #49                 // Method com/vladsch/flexmark/util/collection/OrderedSet.getValue:(I)Ljava/lang/Object;
      21: areturn

  public com.vladsch.flexmark.util.collection.OrderedSet<java.util.Map$Entry<K, V>> entrySet();
    Code:
       0: aload_0
       1: invokevirtual #96                 // Method keyValueEntrySet:()Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversibleIndexedIterator<V> valueIterator();
    Code:
       0: aload_0
       1: getfield      #20                 // Field myValueSet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: invokevirtual #91                 // Method com/vladsch/flexmark/util/collection/OrderedSet.iterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIndexedIterator;
       7: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversibleIndexedIterator<V> reversedValueIterator();
    Code:
       0: aload_0
       1: getfield      #20                 // Field myValueSet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: invokevirtual #97                 // Method com/vladsch/flexmark/util/collection/OrderedSet.reversedIterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIndexedIterator;
       7: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversibleIterable<V> valueIterable();
    Code:
       0: new           #98                 // class com/vladsch/flexmark/util/collection/iteration/IndexedIterable
       3: dup
       4: aload_0
       5: getfield      #20                 // Field myValueSet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       8: invokevirtual #99                 // Method com/vladsch/flexmark/util/collection/OrderedSet.getIndexedProxy:()Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
      11: aload_0
      12: getfield      #20                 // Field myValueSet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      15: invokevirtual #100                // Method com/vladsch/flexmark/util/collection/OrderedSet.indexIterable:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterable;
      18: invokespecial #101                // Method com/vladsch/flexmark/util/collection/iteration/IndexedIterable."<init>":(Lcom/vladsch/flexmark/util/collection/iteration/Indexed;Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterable;)V
      21: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversibleIterable<V> reversedValueIterable();
    Code:
       0: new           #98                 // class com/vladsch/flexmark/util/collection/iteration/IndexedIterable
       3: dup
       4: aload_0
       5: getfield      #20                 // Field myValueSet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       8: invokevirtual #99                 // Method com/vladsch/flexmark/util/collection/OrderedSet.getIndexedProxy:()Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
      11: aload_0
      12: getfield      #20                 // Field myValueSet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      15: invokevirtual #102                // Method com/vladsch/flexmark/util/collection/OrderedSet.reversedIndexIterable:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterable;
      18: invokespecial #101                // Method com/vladsch/flexmark/util/collection/iteration/IndexedIterable."<init>":(Lcom/vladsch/flexmark/util/collection/iteration/Indexed;Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterable;)V
      21: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversibleIndexedIterator<K> keyIterator();
    Code:
       0: aload_0
       1: invokevirtual #103                // Method keySet:()Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: invokevirtual #91                 // Method com/vladsch/flexmark/util/collection/OrderedSet.iterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIndexedIterator;
       7: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversibleIndexedIterator<K> reversedKeyIterator();
    Code:
       0: aload_0
       1: invokevirtual #103                // Method keySet:()Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: invokevirtual #97                 // Method com/vladsch/flexmark/util/collection/OrderedSet.reversedIterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIndexedIterator;
       7: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversibleIterable<K> keyIterable();
    Code:
       0: new           #98                 // class com/vladsch/flexmark/util/collection/iteration/IndexedIterable
       3: dup
       4: aload_0
       5: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       8: invokevirtual #99                 // Method com/vladsch/flexmark/util/collection/OrderedSet.getIndexedProxy:()Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
      11: aload_0
      12: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      15: invokevirtual #100                // Method com/vladsch/flexmark/util/collection/OrderedSet.indexIterable:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterable;
      18: invokespecial #101                // Method com/vladsch/flexmark/util/collection/iteration/IndexedIterable."<init>":(Lcom/vladsch/flexmark/util/collection/iteration/Indexed;Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterable;)V
      21: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversibleIterable<K> reversedKeyIterable();
    Code:
       0: new           #98                 // class com/vladsch/flexmark/util/collection/iteration/IndexedIterable
       3: dup
       4: aload_0
       5: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       8: invokevirtual #99                 // Method com/vladsch/flexmark/util/collection/OrderedSet.getIndexedProxy:()Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
      11: aload_0
      12: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      15: invokevirtual #102                // Method com/vladsch/flexmark/util/collection/OrderedSet.reversedIndexIterable:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterable;
      18: invokespecial #101                // Method com/vladsch/flexmark/util/collection/iteration/IndexedIterable."<init>":(Lcom/vladsch/flexmark/util/collection/iteration/Indexed;Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterable;)V
      21: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversibleIndexedIterator<java.util.Map$Entry<K, V>> entrySetIterator();
    Code:
       0: aload_0
       1: invokespecial #104                // Method getKeyValueUnionSet:()Ljava/util/BitSet;
       4: astore_1
       5: new           #105                // class com/vladsch/flexmark/util/collection/iteration/IndexedIterator
       8: dup
       9: aload_0
      10: invokevirtual #106                // Method getIndexedProxy:()Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
      13: new           #107                // class com/vladsch/flexmark/util/collection/iteration/BitSetIterator
      16: dup
      17: aload_1
      18: invokespecial #108                // Method com/vladsch/flexmark/util/collection/iteration/BitSetIterator."<init>":(Ljava/util/BitSet;)V
      21: invokespecial #109                // Method com/vladsch/flexmark/util/collection/iteration/IndexedIterator."<init>":(Lcom/vladsch/flexmark/util/collection/iteration/Indexed;Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterator;)V
      24: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversibleIndexedIterator<java.util.Map$Entry<K, V>> reversedEntrySetIterator();
    Code:
       0: aload_0
       1: invokespecial #104                // Method getKeyValueUnionSet:()Ljava/util/BitSet;
       4: astore_1
       5: new           #105                // class com/vladsch/flexmark/util/collection/iteration/IndexedIterator
       8: dup
       9: aload_0
      10: invokevirtual #106                // Method getIndexedProxy:()Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
      13: new           #107                // class com/vladsch/flexmark/util/collection/iteration/BitSetIterator
      16: dup
      17: aload_1
      18: iconst_1
      19: invokespecial #110                // Method com/vladsch/flexmark/util/collection/iteration/BitSetIterator."<init>":(Ljava/util/BitSet;Z)V
      22: invokespecial #109                // Method com/vladsch/flexmark/util/collection/iteration/IndexedIterator."<init>":(Lcom/vladsch/flexmark/util/collection/iteration/Indexed;Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterator;)V
      25: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversibleIterable<java.util.Map$Entry<K, V>> entrySetIterable();
    Code:
       0: aload_0
       1: invokespecial #104                // Method getKeyValueUnionSet:()Ljava/util/BitSet;
       4: astore_1
       5: new           #98                 // class com/vladsch/flexmark/util/collection/iteration/IndexedIterable
       8: dup
       9: aload_0
      10: invokevirtual #106                // Method getIndexedProxy:()Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
      13: new           #111                // class com/vladsch/flexmark/util/collection/iteration/BitSetIterable
      16: dup
      17: aload_1
      18: invokespecial #112                // Method com/vladsch/flexmark/util/collection/iteration/BitSetIterable."<init>":(Ljava/util/BitSet;)V
      21: invokespecial #101                // Method com/vladsch/flexmark/util/collection/iteration/IndexedIterable."<init>":(Lcom/vladsch/flexmark/util/collection/iteration/Indexed;Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterable;)V
      24: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversibleIterable<java.util.Map$Entry<K, V>> reversedEntrySetIterable();
    Code:
       0: aload_0
       1: invokespecial #104                // Method getKeyValueUnionSet:()Ljava/util/BitSet;
       4: astore_1
       5: new           #98                 // class com/vladsch/flexmark/util/collection/iteration/IndexedIterable
       8: dup
       9: aload_0
      10: invokevirtual #106                // Method getIndexedProxy:()Lcom/vladsch/flexmark/util/collection/iteration/Indexed;
      13: new           #111                // class com/vladsch/flexmark/util/collection/iteration/BitSetIterable
      16: dup
      17: aload_1
      18: invokespecial #112                // Method com/vladsch/flexmark/util/collection/iteration/BitSetIterable."<init>":(Ljava/util/BitSet;)V
      21: invokespecial #101                // Method com/vladsch/flexmark/util/collection/iteration/IndexedIterable."<init>":(Lcom/vladsch/flexmark/util/collection/iteration/Indexed;Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterable;)V
      24: areturn

  private java.util.BitSet getKeyValueUnionSet();
    Code:
       0: new           #113                // class java/util/BitSet
       3: dup
       4: aload_0
       5: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       8: invokevirtual #41                 // Method com/vladsch/flexmark/util/collection/OrderedSet.size:()I
      11: invokespecial #114                // Method java/util/BitSet."<init>":(I)V
      14: astore_1
      15: aload_1
      16: aload_0
      17: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      20: invokevirtual #115                // Method com/vladsch/flexmark/util/collection/OrderedSet.getValidIndices:()Ljava/util/BitSet;
      23: invokevirtual #116                // Method java/util/BitSet.or:(Ljava/util/BitSet;)V
      26: aload_1
      27: aload_0
      28: getfield      #20                 // Field myValueSet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      31: invokevirtual #115                // Method com/vladsch/flexmark/util/collection/OrderedSet.getValidIndices:()Ljava/util/BitSet;
      34: invokevirtual #116                // Method java/util/BitSet.or:(Ljava/util/BitSet;)V
      37: aload_1
      38: areturn

  private java.util.BitSet getKeyValueIntersectionSet();
    Code:
       0: new           #113                // class java/util/BitSet
       3: dup
       4: aload_0
       5: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       8: invokevirtual #41                 // Method com/vladsch/flexmark/util/collection/OrderedSet.size:()I
      11: invokespecial #114                // Method java/util/BitSet."<init>":(I)V
      14: astore_1
      15: aload_1
      16: aload_0
      17: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      20: invokevirtual #115                // Method com/vladsch/flexmark/util/collection/OrderedSet.getValidIndices:()Ljava/util/BitSet;
      23: invokevirtual #116                // Method java/util/BitSet.or:(Ljava/util/BitSet;)V
      26: aload_1
      27: aload_0
      28: getfield      #20                 // Field myValueSet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      31: invokevirtual #115                // Method com/vladsch/flexmark/util/collection/OrderedSet.getValidIndices:()Ljava/util/BitSet;
      34: invokevirtual #117                // Method java/util/BitSet.and:(Ljava/util/BitSet;)V
      37: aload_1
      38: areturn

  public java.util.Iterator<java.util.Map$Entry<K, V>> iterator();
    Code:
       0: aload_0
       1: invokevirtual #118                // Method entrySetIterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIndexedIterator;
       4: areturn

  public void forEach(com.vladsch.flexmark.util.collection.Consumer<? super java.util.Map$Entry<K, V>>);
    Code:
       0: aload_0
       1: invokevirtual #118                // Method entrySetIterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIndexedIterator;
       4: astore_2
       5: aload_2
       6: invokeinterface #81,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      11: ifeq          29
      14: aload_1
      15: aload_2
      16: invokeinterface #82,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      21: invokeinterface #119,  2          // InterfaceMethod com/vladsch/flexmark/util/collection/Consumer.accept:(Ljava/lang/Object;)V
      26: goto          5
      29: return

  public com.vladsch.flexmark.util.collection.OrderedSet<java.util.Map$Entry<K, V>> keyValueEntrySet();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #4                  // Field myInValueUpdate:Z
       5: aload_0
       6: iconst_1
       7: putfield      #8                  // Field myInKeyUpdate:Z
      10: new           #16                 // class com/vladsch/flexmark/util/collection/OrderedSet
      13: dup
      14: aload_0
      15: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      18: invokevirtual #41                 // Method com/vladsch/flexmark/util/collection/OrderedSet.size:()I
      21: new           #120                // class com/vladsch/flexmark/util/collection/OrderedMultiMap$4
      24: dup
      25: aload_0
      26: invokespecial #121                // Method com/vladsch/flexmark/util/collection/OrderedMultiMap$4."<init>":(Lcom/vladsch/flexmark/util/collection/OrderedMultiMap;)V
      29: invokespecial #19                 // Method com/vladsch/flexmark/util/collection/OrderedSet."<init>":(ILcom/vladsch/flexmark/util/collection/CollectionHost;)V
      32: astore_1
      33: aload_0
      34: invokevirtual #118                // Method entrySetIterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIndexedIterator;
      37: astore_2
      38: aload_2
      39: invokeinterface #81,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      44: ifeq          61
      47: aload_1
      48: aload_2
      49: invokeinterface #82,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      54: invokevirtual #38                 // Method com/vladsch/flexmark/util/collection/OrderedSet.add:(Ljava/lang/Object;)Z
      57: pop
      58: goto          38
      61: aload_0
      62: iconst_0
      63: putfield      #4                  // Field myInValueUpdate:Z
      66: aload_0
      67: iconst_0
      68: putfield      #8                  // Field myInKeyUpdate:Z
      71: aload_1
      72: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: ifnull        22
      11: aload_0
      12: invokevirtual #122                // Method java/lang/Object.getClass:()Ljava/lang/Class;
      15: aload_1
      16: invokevirtual #122                // Method java/lang/Object.getClass:()Ljava/lang/Class;
      19: if_acmpeq     24
      22: iconst_0
      23: ireturn
      24: aload_1
      25: checkcast     #123                // class com/vladsch/flexmark/util/collection/OrderedMultiMap
      28: astore_2
      29: aload_0
      30: invokevirtual #124                // Method size:()I
      33: aload_2
      34: invokevirtual #124                // Method size:()I
      37: if_icmpeq     42
      40: iconst_0
      41: ireturn
      42: aload_0
      43: invokevirtual #125                // Method entrySet:()Lcom/vladsch/flexmark/util/collection/OrderedSet;
      46: aload_2
      47: invokevirtual #125                // Method entrySet:()Lcom/vladsch/flexmark/util/collection/OrderedSet;
      50: invokevirtual #126                // Method com/vladsch/flexmark/util/collection/OrderedSet.equals:(Ljava/lang/Object;)Z
      53: ifne          58
      56: iconst_0
      57: ireturn
      58: iconst_1
      59: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #23                 // Field myKeySet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: invokevirtual #127                // Method com/vladsch/flexmark/util/collection/OrderedSet.hashCode:()I
       7: istore_1
       8: bipush        31
      10: iload_1
      11: imul
      12: aload_0
      13: getfield      #20                 // Field myValueSet:Lcom/vladsch/flexmark/util/collection/OrderedSet;
      16: invokevirtual #127                // Method com/vladsch/flexmark/util/collection/OrderedSet.hashCode:()I
      19: iadd
      20: istore_1
      21: iload_1
      22: ireturn

  public java.util.Set entrySet();
    Code:
       0: aload_0
       1: invokevirtual #125                // Method entrySet:()Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: areturn

  public java.util.Set keySet();
    Code:
       0: aload_0
       1: invokevirtual #103                // Method keySet:()Lcom/vladsch/flexmark/util/collection/OrderedSet;
       4: areturn

  static void access$000(com.vladsch.flexmark.util.collection.OrderedMultiMap, int, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: aload_3
       4: invokespecial #11                 // Method addingValue:(ILjava/lang/Object;Ljava/lang/Object;)V
       7: return

  static java.lang.Object access$100(com.vladsch.flexmark.util.collection.OrderedMultiMap, int, java.lang.Object);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokespecial #10                 // Method removingValue:(ILjava/lang/Object;)Ljava/lang/Object;
       6: areturn

  static void access$200(com.vladsch.flexmark.util.collection.OrderedMultiMap, int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #9                  // Method addingNullValue:(I)V
       5: return

  static boolean access$300(com.vladsch.flexmark.util.collection.OrderedMultiMap);
    Code:
       0: aload_0
       1: getfield      #8                  // Field myInKeyUpdate:Z
       4: ireturn

  static void access$400(com.vladsch.flexmark.util.collection.OrderedMultiMap, int, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: aload_3
       4: invokespecial #7                  // Method addingKey:(ILjava/lang/Object;Ljava/lang/Object;)V
       7: return

  static java.lang.Object access$500(com.vladsch.flexmark.util.collection.OrderedMultiMap, int, java.lang.Object);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokespecial #6                  // Method removingKey:(ILjava/lang/Object;)Ljava/lang/Object;
       6: areturn

  static void access$600(com.vladsch.flexmark.util.collection.OrderedMultiMap, int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #5                  // Method addingNullKey:(I)V
       5: return

  static boolean access$700(com.vladsch.flexmark.util.collection.OrderedMultiMap);
    Code:
       0: aload_0
       1: getfield      #4                  // Field myInValueUpdate:Z
       4: ireturn

  static java.util.Map$Entry access$800(com.vladsch.flexmark.util.collection.OrderedMultiMap, int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #3                  // Method getEntry:(I)Ljava/util/Map$Entry;
       5: areturn

  static boolean access$900(com.vladsch.flexmark.util.collection.OrderedMultiMap, int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #2                  // Method removeEntryIndex:(I)Z
       5: ireturn

  static boolean access$1000(com.vladsch.flexmark.util.collection.OrderedMultiMap, int, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: aload_3
       4: invokespecial #1                  // Method removeEntryIndex:(ILjava/lang/Object;Ljava/lang/Object;)Z
       7: ireturn

  static {};
    Code:
       0: ldc           #123                // class com/vladsch/flexmark/util/collection/OrderedMultiMap
       2: invokevirtual #128                // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #30                 // Field $assertionsDisabled:Z
      16: return
}
