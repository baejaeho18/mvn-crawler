Compiled from "HtmlFormattingAppendableBase.java"
class com.vladsch.flexmark.util.html.HtmlFormattingAppendableBase$1 implements com.vladsch.flexmark.util.html.ConditionalFormatter {
  final boolean val$isIndentIndentingChildren;

  final boolean val$isLineOnChildText;

  final com.vladsch.flexmark.util.html.HtmlFormattingAppendableBase this$0;

  com.vladsch.flexmark.util.html.HtmlFormattingAppendableBase$1(com.vladsch.flexmark.util.html.HtmlFormattingAppendableBase, boolean, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       5: aload_0
       6: iload_2
       7: putfield      #2                  // Field val$isIndentIndentingChildren:Z
      10: aload_0
      11: iload_3
      12: putfield      #3                  // Field val$isLineOnChildText:Z
      15: aload_0
      16: invokespecial #4                  // Method java/lang/Object."<init>":()V
      19: return

  public void apply(boolean, boolean, boolean, boolean);
    Code:
       0: iload_2
       1: ifeq          43
       4: aload_0
       5: getfield      #2                  // Field val$isIndentIndentingChildren:Z
       8: ifeq          27
      11: aload_0
      12: getfield      #1                  // Field this$0:Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
      15: invokestatic  #5                  // Method com/vladsch/flexmark/util/html/HtmlFormattingAppendableBase.access$000:(Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      18: invokeinterface #6,  1            // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.indent:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      23: pop
      24: goto          87
      27: aload_0
      28: getfield      #1                  // Field this$0:Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
      31: invokestatic  #5                  // Method com/vladsch/flexmark/util/html/HtmlFormattingAppendableBase.access$000:(Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      34: invokeinterface #7,  1            // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.line:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      39: pop
      40: goto          87
      43: iload_1
      44: ifeq          87
      47: aload_0
      48: getfield      #3                  // Field val$isLineOnChildText:Z
      51: ifeq          70
      54: aload_0
      55: getfield      #1                  // Field this$0:Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
      58: invokestatic  #5                  // Method com/vladsch/flexmark/util/html/HtmlFormattingAppendableBase.access$000:(Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      61: invokeinterface #7,  1            // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.line:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      66: pop
      67: goto          87
      70: iload_3
      71: ifeq          87
      74: aload_0
      75: getfield      #1                  // Field this$0:Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
      78: invokestatic  #5                  // Method com/vladsch/flexmark/util/html/HtmlFormattingAppendableBase.access$000:(Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      81: invokeinterface #7,  1            // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.line:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      86: pop
      87: return
}
