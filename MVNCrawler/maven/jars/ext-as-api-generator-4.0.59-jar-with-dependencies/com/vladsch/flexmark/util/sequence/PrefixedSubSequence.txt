Compiled from "PrefixedSubSequence.java"
public final class com.vladsch.flexmark.util.sequence.PrefixedSubSequence extends com.vladsch.flexmark.util.sequence.BasedSequenceImpl {
  private final java.lang.String prefix;

  private final int prefixLength;

  private final com.vladsch.flexmark.util.sequence.BasedSequence base;

  public java.lang.Object getBase();
    Code:
       0: aload_0
       1: getfield      #1                  // Field base:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: invokeinterface #2,  1            // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getBase:()Ljava/lang/Object;
       9: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence getBaseSequence();
    Code:
       0: aload_0
       1: getfield      #1                  // Field base:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: invokeinterface #3,  1            // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getBaseSequence:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       9: areturn

  public int getStartOffset();
    Code:
       0: aload_0
       1: getfield      #1                  // Field base:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: invokeinterface #4,  1            // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
       9: ireturn

  public int getEndOffset();
    Code:
       0: aload_0
       1: getfield      #1                  // Field base:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: invokeinterface #5,  1            // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
       9: ireturn

  public com.vladsch.flexmark.util.sequence.Range getSourceRange();
    Code:
       0: aload_0
       1: getfield      #1                  // Field base:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: invokeinterface #6,  1            // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getSourceRange:()Lcom/vladsch/flexmark/util/sequence/Range;
       9: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence baseSubSequence(int, int);
    Code:
       0: aload_0
       1: getfield      #1                  // Field base:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: iload_1
       5: iload_2
       6: invokeinterface #7,  3            // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.baseSubSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      11: areturn

  private com.vladsch.flexmark.util.sequence.PrefixedSubSequence(java.lang.String, com.vladsch.flexmark.util.sequence.BasedSequence, int, int, boolean);
    Code:
       0: aload_0
       1: invokespecial #8                  // Method com/vladsch/flexmark/util/sequence/BasedSequenceImpl."<init>":()V
       4: aload_0
       5: iload         5
       7: ifeq          20
      10: aload_1
      11: iconst_0
      12: ldc           #9                  // int 65533
      14: invokevirtual #10                 // Method java/lang/String.replace:(CC)Ljava/lang/String;
      17: goto          21
      20: aload_1
      21: putfield      #11                 // Field prefix:Ljava/lang/String;
      24: aload_0
      25: aload_1
      26: invokevirtual #12                 // Method java/lang/String.length:()I
      29: putfield      #13                 // Field prefixLength:I
      32: aload_0
      33: aload_2
      34: iload_3
      35: iload         4
      37: invokestatic  #14                 // Method of:(Ljava/lang/CharSequence;II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      40: putfield      #1                  // Field base:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      43: return

  public int length();
    Code:
       0: aload_0
       1: getfield      #13                 // Field prefixLength:I
       4: aload_0
       5: getfield      #1                  // Field base:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       8: invokeinterface #15,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      13: iadd
      14: ireturn

  public int getIndexOffset(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #13                 // Field prefixLength:I
       5: if_icmpge     10
       8: iconst_m1
       9: ireturn
      10: aload_0
      11: getfield      #1                  // Field base:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      14: iload_1
      15: aload_0
      16: getfield      #13                 // Field prefixLength:I
      19: isub
      20: invokeinterface #16,  2           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getIndexOffset:(I)I
      25: ireturn

  public char charAt(int);
    Code:
       0: iload_1
       1: iflt          55
       4: iload_1
       5: aload_0
       6: getfield      #1                  // Field base:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       9: invokeinterface #15,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      14: aload_0
      15: getfield      #13                 // Field prefixLength:I
      18: iadd
      19: if_icmpge     55
      22: iload_1
      23: aload_0
      24: getfield      #13                 // Field prefixLength:I
      27: if_icmpge     39
      30: aload_0
      31: getfield      #11                 // Field prefix:Ljava/lang/String;
      34: iload_1
      35: invokevirtual #17                 // Method java/lang/String.charAt:(I)C
      38: ireturn
      39: aload_0
      40: getfield      #1                  // Field base:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      43: iload_1
      44: aload_0
      45: getfield      #13                 // Field prefixLength:I
      48: isub
      49: invokeinterface #18,  2           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.charAt:(I)C
      54: ireturn
      55: new           #19                 // class java/lang/StringIndexOutOfBoundsException
      58: dup
      59: new           #20                 // class java/lang/StringBuilder
      62: dup
      63: invokespecial #21                 // Method java/lang/StringBuilder."<init>":()V
      66: ldc           #22                 // String String index out of range:
      68: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      71: iload_1
      72: invokevirtual #24                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      75: invokevirtual #25                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      78: invokespecial #26                 // Method java/lang/StringIndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      81: athrow

  public com.vladsch.flexmark.util.sequence.BasedSequence subSequence(int, int);
    Code:
       0: iload_1
       1: iflt          119
       4: iload_2
       5: aload_0
       6: getfield      #1                  // Field base:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       9: invokeinterface #15,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      14: aload_0
      15: getfield      #13                 // Field prefixLength:I
      18: iadd
      19: if_icmpgt     119
      22: iload_1
      23: aload_0
      24: getfield      #13                 // Field prefixLength:I
      27: if_icmpge     97
      30: iload_2
      31: aload_0
      32: getfield      #13                 // Field prefixLength:I
      35: if_icmpgt     69
      38: new           #27                 // class com/vladsch/flexmark/util/sequence/PrefixedSubSequence
      41: dup
      42: aload_0
      43: getfield      #11                 // Field prefix:Ljava/lang/String;
      46: iload_1
      47: iload_2
      48: invokevirtual #28                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      51: aload_0
      52: getfield      #1                  // Field base:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      55: iconst_0
      56: iconst_0
      57: invokeinterface #29,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      62: iconst_0
      63: iconst_0
      64: iconst_0
      65: invokespecial #30                 // Method "<init>":(Ljava/lang/String;Lcom/vladsch/flexmark/util/sequence/BasedSequence;IIZ)V
      68: areturn
      69: new           #27                 // class com/vladsch/flexmark/util/sequence/PrefixedSubSequence
      72: dup
      73: aload_0
      74: getfield      #11                 // Field prefix:Ljava/lang/String;
      77: iload_1
      78: invokevirtual #31                 // Method java/lang/String.substring:(I)Ljava/lang/String;
      81: aload_0
      82: getfield      #1                  // Field base:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      85: iconst_0
      86: iload_2
      87: aload_0
      88: getfield      #13                 // Field prefixLength:I
      91: isub
      92: iconst_0
      93: invokespecial #30                 // Method "<init>":(Ljava/lang/String;Lcom/vladsch/flexmark/util/sequence/BasedSequence;IIZ)V
      96: areturn
      97: aload_0
      98: getfield      #1                  // Field base:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     101: iload_1
     102: aload_0
     103: getfield      #13                 // Field prefixLength:I
     106: isub
     107: iload_2
     108: aload_0
     109: getfield      #13                 // Field prefixLength:I
     112: isub
     113: invokeinterface #29,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     118: areturn
     119: iload_1
     120: iflt          141
     123: iload_1
     124: aload_0
     125: getfield      #1                  // Field base:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     128: invokeinterface #15,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
     133: aload_0
     134: getfield      #13                 // Field prefixLength:I
     137: iadd
     138: if_icmple     168
     141: new           #19                 // class java/lang/StringIndexOutOfBoundsException
     144: dup
     145: new           #20                 // class java/lang/StringBuilder
     148: dup
     149: invokespecial #21                 // Method java/lang/StringBuilder."<init>":()V
     152: ldc           #22                 // String String index out of range:
     154: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     157: iload_1
     158: invokevirtual #24                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     161: invokevirtual #25                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     164: invokespecial #26                 // Method java/lang/StringIndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
     167: athrow
     168: new           #19                 // class java/lang/StringIndexOutOfBoundsException
     171: dup
     172: new           #20                 // class java/lang/StringBuilder
     175: dup
     176: invokespecial #21                 // Method java/lang/StringBuilder."<init>":()V
     179: ldc           #22                 // String String index out of range:
     181: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     184: iload_2
     185: invokevirtual #24                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     188: invokevirtual #25                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     191: invokespecial #26                 // Method java/lang/StringIndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
     194: athrow

  public java.lang.String toString();
    Code:
       0: new           #20                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #21                 // Method java/lang/StringBuilder."<init>":()V
       7: aload_0
       8: getfield      #11                 // Field prefix:Ljava/lang/String;
      11: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      14: aload_0
      15: getfield      #1                  // Field base:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      18: invokestatic  #32                 // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
      21: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: invokevirtual #25                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      27: areturn

  public int hashCode();
    Code:
       0: aload_0
       1: invokevirtual #33                 // Method toString:()Ljava/lang/String;
       4: invokevirtual #34                 // Method java/lang/String.hashCode:()I
       7: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: aload_0
       2: if_acmpeq     26
       5: aload_1
       6: instanceof    #35                 // class java/lang/CharSequence
       9: ifeq          30
      12: aload_0
      13: invokevirtual #33                 // Method toString:()Ljava/lang/String;
      16: aload_1
      17: invokevirtual #36                 // Method java/lang/Object.toString:()Ljava/lang/String;
      20: invokevirtual #37                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      23: ifeq          30
      26: iconst_1
      27: goto          31
      30: iconst_0
      31: ireturn

  public static com.vladsch.flexmark.util.sequence.PrefixedSubSequence repeatOf(java.lang.String, int, com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #38                 // Method com/vladsch/flexmark/util/sequence/RepeatedCharSequence.of:(Ljava/lang/CharSequence;I)Lcom/vladsch/flexmark/util/sequence/RepeatedCharSequence;
       5: invokevirtual #39                 // Method com/vladsch/flexmark/util/sequence/RepeatedCharSequence.toString:()Ljava/lang/String;
       8: aload_2
       9: iconst_0
      10: aload_2
      11: invokeinterface #15,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      16: invokestatic  #40                 // Method of:(Ljava/lang/String;Lcom/vladsch/flexmark/util/sequence/BasedSequence;II)Lcom/vladsch/flexmark/util/sequence/PrefixedSubSequence;
      19: areturn

  public static com.vladsch.flexmark.util.sequence.PrefixedSubSequence of(java.lang.String, com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_1
       4: invokeinterface #15,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
       9: invokestatic  #40                 // Method of:(Ljava/lang/String;Lcom/vladsch/flexmark/util/sequence/BasedSequence;II)Lcom/vladsch/flexmark/util/sequence/PrefixedSubSequence;
      12: areturn

  public static com.vladsch.flexmark.util.sequence.PrefixedSubSequence of(java.lang.String, com.vladsch.flexmark.util.sequence.BasedSequence, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: aload_1
       4: invokeinterface #15,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
       9: invokestatic  #40                 // Method of:(Ljava/lang/String;Lcom/vladsch/flexmark/util/sequence/BasedSequence;II)Lcom/vladsch/flexmark/util/sequence/PrefixedSubSequence;
      12: areturn

  public static com.vladsch.flexmark.util.sequence.PrefixedSubSequence of(java.lang.String, com.vladsch.flexmark.util.sequence.BasedSequence, int, int);
    Code:
       0: new           #27                 // class com/vladsch/flexmark/util/sequence/PrefixedSubSequence
       3: dup
       4: aload_0
       5: aload_1
       6: iload_2
       7: iload_3
       8: iconst_1
       9: invokespecial #30                 // Method "<init>":(Ljava/lang/String;Lcom/vladsch/flexmark/util/sequence/BasedSequence;IIZ)V
      12: areturn

  public java.lang.CharSequence subSequence(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokevirtual #41                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       6: areturn
}
