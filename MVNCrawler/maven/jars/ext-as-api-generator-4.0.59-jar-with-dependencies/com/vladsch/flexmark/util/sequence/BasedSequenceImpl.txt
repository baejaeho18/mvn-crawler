Compiled from "BasedSequenceImpl.java"
public abstract class com.vladsch.flexmark.util.sequence.BasedSequenceImpl implements com.vladsch.flexmark.util.sequence.BasedSequence {
  private static int[] EMPTY_INDICES;

  private static final java.util.Map<java.lang.Character, java.lang.String> visibleSpacesMap;

  static final boolean $assertionsDisabled;

  public com.vladsch.flexmark.util.sequence.BasedSequenceImpl();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static com.vladsch.flexmark.util.sequence.BasedSequence firstNonNull(com.vladsch.flexmark.util.sequence.BasedSequence...);
    Code:
       0: aload_0
       1: astore_1
       2: aload_1
       3: arraylength
       4: istore_2
       5: iconst_0
       6: istore_3
       7: iload_3
       8: iload_2
       9: if_icmpge     39
      12: aload_1
      13: iload_3
      14: aaload
      15: astore        4
      17: aload         4
      19: ifnull        33
      22: aload         4
      24: getstatic     #2                  // Field NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      27: if_acmpeq     33
      30: aload         4
      32: areturn
      33: iinc          3, 1
      36: goto          7
      39: getstatic     #2                  // Field NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      42: areturn

  static boolean isVisibleWhitespace(char);
    Code:
       0: getstatic     #3                  // Field visibleSpacesMap:Ljava/util/Map;
       3: iload_0
       4: invokestatic  #4                  // Method java/lang/Character.valueOf:(C)Ljava/lang/Character;
       7: invokeinterface #5,  2            // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      12: ireturn

  public com.vladsch.flexmark.util.sequence.Range getIndexRange(int, int);
    Code:
       0: aload_0
       1: invokevirtual #6                  // Method getStartOffset:()I
       4: istore_3
       5: iload_1
       6: aload_0
       7: invokevirtual #7                  // Method getEndOffset:()I
      10: if_icmpgt     18
      13: iload_2
      14: iload_3
      15: if_icmpge     80
      18: new           #8                  // class java/lang/IllegalArgumentException
      21: dup
      22: new           #9                  // class java/lang/StringBuilder
      25: dup
      26: invokespecial #10                 // Method java/lang/StringBuilder."<init>":()V
      29: ldc           #11                 // String getIndexRange(
      31: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      34: iload_1
      35: invokevirtual #13                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      38: ldc           #14                 // String ,
      40: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      43: iload_2
      44: invokevirtual #13                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      47: ldc           #15                 // String ) not in range [
      49: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      52: iload_3
      53: invokevirtual #13                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      56: ldc           #14                 // String ,
      58: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      61: aload_0
      62: invokevirtual #7                  // Method getEndOffset:()I
      65: invokevirtual #13                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      68: ldc           #16                 // String ]
      70: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      73: invokevirtual #17                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      76: invokespecial #18                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      79: athrow
      80: iload_1
      81: iload_3
      82: isub
      83: iload_2
      84: iload_3
      85: isub
      86: invokestatic  #19                 // Method com/vladsch/flexmark/util/sequence/Range.of:(II)Lcom/vladsch/flexmark/util/sequence/Range;
      89: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence endSequence(int, int);
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method length:()I
       4: istore_3
       5: iload_3
       6: iload_1
       7: isub
       8: istore        4
      10: iload_3
      11: iload_2
      12: isub
      13: istore        5
      15: iload         4
      17: ifge          26
      20: iconst_0
      21: istore        4
      23: goto          35
      26: iload         4
      28: iload_3
      29: if_icmple     35
      32: iload_3
      33: istore        4
      35: iload         5
      37: ifge          46
      40: iconst_0
      41: istore        5
      43: goto          55
      46: iload         5
      48: iload_3
      49: if_icmple     55
      52: iload_3
      53: istore        5
      55: iload         4
      57: iload         5
      59: if_icmple     66
      62: iload         5
      64: istore        4
      66: iload         4
      68: ifne          79
      71: iload         5
      73: iload_3
      74: if_icmpne     79
      77: aload_0
      78: areturn
      79: aload_0
      80: iload         4
      82: iload         5
      84: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      87: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence endSequence(int);
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method length:()I
       4: istore_2
       5: iload_1
       6: ifgt          16
       9: aload_0
      10: iload_2
      11: iload_2
      12: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      15: areturn
      16: iload_1
      17: iload_2
      18: if_icmplt     23
      21: aload_0
      22: areturn
      23: aload_0
      24: iload_2
      25: iload_1
      26: isub
      27: iload_2
      28: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      31: areturn

  public char endCharAt(int);
    Code:
       0: iload_1
       1: iflt          12
       4: iload_1
       5: aload_0
       6: invokevirtual #20                 // Method length:()I
       9: if_icmplt     14
      12: iconst_0
      13: ireturn
      14: aload_0
      15: aload_0
      16: invokevirtual #20                 // Method length:()I
      19: iload_1
      20: isub
      21: invokevirtual #22                 // Method charAt:(I)C
      24: ireturn

  public com.vladsch.flexmark.util.sequence.BasedSequence midSequence(int, int);
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method length:()I
       4: istore_3
       5: iload_1
       6: ifge          15
       9: iload_3
      10: iload_1
      11: iadd
      12: goto          16
      15: iload_1
      16: istore        4
      18: iload_2
      19: ifge          28
      22: iload_3
      23: iload_2
      24: iadd
      25: goto          29
      28: iload_2
      29: istore        5
      31: iload         4
      33: ifge          42
      36: iconst_0
      37: istore        4
      39: goto          51
      42: iload         4
      44: iload_3
      45: if_icmple     51
      48: iload_3
      49: istore        4
      51: iload         5
      53: ifge          62
      56: iconst_0
      57: istore        5
      59: goto          71
      62: iload         5
      64: iload_3
      65: if_icmple     71
      68: iload_3
      69: istore        5
      71: iload         4
      73: iload         5
      75: if_icmple     82
      78: iload         5
      80: istore        4
      82: iload         4
      84: ifne          95
      87: iload         5
      89: iload_3
      90: if_icmpne     95
      93: aload_0
      94: areturn
      95: aload_0
      96: iload         4
      98: iload         5
     100: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     103: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence midSequence(int);
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method length:()I
       4: istore_2
       5: iload_1
       6: ifge          15
       9: iload_2
      10: iload_1
      11: iadd
      12: goto          16
      15: iload_1
      16: istore_3
      17: iload_3
      18: ifgt          23
      21: aload_0
      22: areturn
      23: iload_3
      24: iload_2
      25: if_icmplt     35
      28: aload_0
      29: iload_2
      30: iload_2
      31: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      34: areturn
      35: aload_0
      36: iload_3
      37: iload_2
      38: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      41: areturn

  public char midCharAt(int);
    Code:
       0: iload_1
       1: aload_0
       2: invokevirtual #20                 // Method length:()I
       5: ineg
       6: if_icmplt     17
       9: iload_1
      10: aload_0
      11: invokevirtual #20                 // Method length:()I
      14: if_icmplt     19
      17: iconst_0
      18: ireturn
      19: aload_0
      20: iload_1
      21: ifge          33
      24: aload_0
      25: invokevirtual #20                 // Method length:()I
      28: iload_1
      29: iadd
      30: goto          34
      33: iload_1
      34: invokevirtual #22                 // Method charAt:(I)C
      37: ireturn

  public char lastChar();
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method isEmpty:()Z
       4: ifeq          11
       7: iconst_0
       8: goto          21
      11: aload_0
      12: aload_0
      13: invokevirtual #20                 // Method length:()I
      16: iconst_1
      17: isub
      18: invokevirtual #22                 // Method charAt:(I)C
      21: ireturn

  public char firstChar();
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method isEmpty:()Z
       4: ifeq          11
       7: iconst_0
       8: goto          16
      11: aload_0
      12: iconst_0
      13: invokevirtual #22                 // Method charAt:(I)C
      16: ireturn

  public int indexOf(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #24                 // Method indexOf:(Ljava/lang/CharSequence;II)I
      10: ireturn

  public int indexOf(java.lang.CharSequence, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #24                 // Method indexOf:(Ljava/lang/CharSequence;II)I
      10: ireturn

  public int indexOf(java.lang.CharSequence, int, int);
    Code:
       0: aload_1
       1: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
       6: istore        4
       8: iload         4
      10: ifne          15
      13: iload_2
      14: ireturn
      15: iload_3
      16: aload_0
      17: invokevirtual #20                 // Method length:()I
      20: if_icmple     28
      23: aload_0
      24: invokevirtual #20                 // Method length:()I
      27: istore_3
      28: iload_2
      29: iload_3
      30: if_icmpge     97
      33: aload_1
      34: iconst_0
      35: invokeinterface #26,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      40: istore        5
      42: iload_2
      43: istore        6
      45: aload_0
      46: iload         5
      48: iload         6
      50: invokevirtual #27                 // Method indexOf:(CI)I
      53: istore        6
      55: iload         6
      57: iflt          97
      60: iload         6
      62: iload         4
      64: iadd
      65: iload_3
      66: if_icmple     72
      69: goto          97
      72: aload_0
      73: aload_1
      74: iload         6
      76: invokevirtual #28                 // Method matchChars:(Ljava/lang/CharSequence;I)Z
      79: ifeq          85
      82: iload         6
      84: ireturn
      85: iinc          6, 1
      88: iload         6
      90: iload         4
      92: iadd
      93: iload_3
      94: if_icmplt     45
      97: iconst_m1
      98: ireturn

  public int indexOf(char);
    Code:
       0: aload_0
       1: iload_1
       2: iconst_0
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #29                 // Method indexOf:(CII)I
      10: ireturn

  public int indexOfAny(char, char);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: iconst_0
       4: aload_0
       5: invokevirtual #20                 // Method length:()I
       8: invokevirtual #30                 // Method indexOfAny:(CCII)I
      11: ireturn

  public int indexOfAny(char, char, char);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: iload_3
       4: iconst_0
       5: aload_0
       6: invokevirtual #20                 // Method length:()I
       9: invokevirtual #31                 // Method indexOfAny:(CCCII)I
      12: ireturn

  public int indexOfAny(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #32                 // Method indexOfAny:(Ljava/lang/CharSequence;II)I
      10: ireturn

  public int indexOf(char, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #29                 // Method indexOf:(CII)I
      10: ireturn

  public int indexOfAny(char, char, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: iload_3
       4: aload_0
       5: invokevirtual #20                 // Method length:()I
       8: invokevirtual #30                 // Method indexOfAny:(CCII)I
      11: ireturn

  public int indexOfAny(char, char, char, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: iload_3
       4: iload         4
       6: aload_0
       7: invokevirtual #20                 // Method length:()I
      10: invokevirtual #31                 // Method indexOfAny:(CCCII)I
      13: ireturn

  public int indexOfAny(java.lang.CharSequence, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #32                 // Method indexOfAny:(Ljava/lang/CharSequence;II)I
      10: ireturn

  public int indexOf(char, int, int);
    Code:
       0: iload_2
       1: ifge          6
       4: iconst_0
       5: istore_2
       6: iload_3
       7: aload_0
       8: invokevirtual #20                 // Method length:()I
      11: if_icmple     19
      14: aload_0
      15: invokevirtual #20                 // Method length:()I
      18: istore_3
      19: iload_2
      20: istore        4
      22: iload         4
      24: iload_3
      25: if_icmpge     47
      28: aload_0
      29: iload         4
      31: invokevirtual #22                 // Method charAt:(I)C
      34: iload_1
      35: if_icmpne     41
      38: iload         4
      40: ireturn
      41: iinc          4, 1
      44: goto          22
      47: iconst_m1
      48: ireturn

  public int indexOfAny(char, char, int, int);
    Code:
       0: iload_3
       1: ifge          6
       4: iconst_0
       5: istore_3
       6: iload         4
       8: aload_0
       9: invokevirtual #20                 // Method length:()I
      12: if_icmple     21
      15: aload_0
      16: invokevirtual #20                 // Method length:()I
      19: istore        4
      21: iload_3
      22: istore        5
      24: iload         5
      26: iload         4
      28: if_icmpge     60
      31: aload_0
      32: iload         5
      34: invokevirtual #22                 // Method charAt:(I)C
      37: istore        6
      39: iload         6
      41: iload_1
      42: if_icmpeq     51
      45: iload         6
      47: iload_2
      48: if_icmpne     54
      51: iload         5
      53: ireturn
      54: iinc          5, 1
      57: goto          24
      60: iconst_m1
      61: ireturn

  public int indexOfAny(char, char, char, int, int);
    Code:
       0: iload         4
       2: ifge          8
       5: iconst_0
       6: istore        4
       8: iload         5
      10: aload_0
      11: invokevirtual #20                 // Method length:()I
      14: if_icmple     23
      17: aload_0
      18: invokevirtual #20                 // Method length:()I
      21: istore        5
      23: iload         4
      25: istore        6
      27: iload         6
      29: iload         5
      31: if_icmpge     69
      34: aload_0
      35: iload         6
      37: invokevirtual #22                 // Method charAt:(I)C
      40: istore        7
      42: iload         7
      44: iload_1
      45: if_icmpeq     60
      48: iload         7
      50: iload_2
      51: if_icmpeq     60
      54: iload         7
      56: iload_3
      57: if_icmpne     63
      60: iload         6
      62: ireturn
      63: iinc          6, 1
      66: goto          27
      69: iconst_m1
      70: ireturn

  public int indexOfAny(java.lang.CharSequence, int, int);
    Code:
       0: aload_1
       1: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
       6: tableswitch   { // 0 to 3
                     0: 36
                     1: 38
                     2: 52
                     3: 73
               default: 101
          }
      36: iload_2
      37: ireturn
      38: aload_0
      39: aload_1
      40: iconst_0
      41: invokeinterface #26,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      46: iload_2
      47: iload_3
      48: invokevirtual #29                 // Method indexOf:(CII)I
      51: ireturn
      52: aload_0
      53: aload_1
      54: iconst_0
      55: invokeinterface #26,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      60: aload_1
      61: iconst_1
      62: invokeinterface #26,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      67: iload_2
      68: iload_3
      69: invokevirtual #30                 // Method indexOfAny:(CCII)I
      72: ireturn
      73: aload_0
      74: aload_1
      75: iconst_0
      76: invokeinterface #26,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      81: aload_1
      82: iconst_1
      83: invokeinterface #26,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      88: aload_1
      89: iconst_2
      90: invokeinterface #26,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      95: iload_2
      96: iload_3
      97: invokevirtual #31                 // Method indexOfAny:(CCCII)I
     100: ireturn
     101: aload_1
     102: invokestatic  #33                 // Method of:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     105: astore        4
     107: iload_2
     108: ifge          113
     111: iconst_0
     112: istore_2
     113: iload_3
     114: aload_0
     115: invokevirtual #20                 // Method length:()I
     118: if_icmple     126
     121: aload_0
     122: invokevirtual #20                 // Method length:()I
     125: istore_3
     126: iload_2
     127: istore        5
     129: iload         5
     131: iload_3
     132: if_icmpge     165
     135: aload_0
     136: iload         5
     138: invokevirtual #22                 // Method charAt:(I)C
     141: istore        6
     143: aload         4
     145: iload         6
     147: invokeinterface #34,  2           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.indexOf:(C)I
     152: iconst_m1
     153: if_icmpeq     159
     156: iload         5
     158: ireturn
     159: iinc          5, 1
     162: goto          129
     165: iconst_m1
     166: ireturn

  public int indexOfNot(char);
    Code:
       0: aload_0
       1: iload_1
       2: iconst_0
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #35                 // Method indexOfNot:(CII)I
      10: ireturn

  public int indexOfAnyNot(char, char);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: iconst_0
       4: aload_0
       5: invokevirtual #20                 // Method length:()I
       8: invokevirtual #36                 // Method indexOfAnyNot:(CCII)I
      11: ireturn

  public int indexOfAnyNot(char, char, char);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: iload_3
       4: iconst_0
       5: aload_0
       6: invokevirtual #20                 // Method length:()I
       9: invokevirtual #37                 // Method indexOfAnyNot:(CCCII)I
      12: ireturn

  public int indexOfAnyNot(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #38                 // Method indexOfAnyNot:(Ljava/lang/CharSequence;II)I
      10: ireturn

  public int indexOfNot(char, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #35                 // Method indexOfNot:(CII)I
      10: ireturn

  public int indexOfAnyNot(char, char, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: iload_3
       4: aload_0
       5: invokevirtual #20                 // Method length:()I
       8: invokevirtual #36                 // Method indexOfAnyNot:(CCII)I
      11: ireturn

  public int indexOfAnyNot(char, char, char, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: iload_3
       4: iload         4
       6: aload_0
       7: invokevirtual #20                 // Method length:()I
      10: invokevirtual #37                 // Method indexOfAnyNot:(CCCII)I
      13: ireturn

  public int indexOfAnyNot(java.lang.CharSequence, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #38                 // Method indexOfAnyNot:(Ljava/lang/CharSequence;II)I
      10: ireturn

  public int indexOfNot(char, int, int);
    Code:
       0: iload_2
       1: ifge          6
       4: iconst_0
       5: istore_2
       6: iload_3
       7: aload_0
       8: invokevirtual #20                 // Method length:()I
      11: if_icmple     19
      14: aload_0
      15: invokevirtual #20                 // Method length:()I
      18: istore_3
      19: iload_2
      20: istore        4
      22: iload         4
      24: iload_3
      25: if_icmpge     47
      28: aload_0
      29: iload         4
      31: invokevirtual #22                 // Method charAt:(I)C
      34: iload_1
      35: if_icmpeq     41
      38: iload         4
      40: ireturn
      41: iinc          4, 1
      44: goto          22
      47: iconst_m1
      48: ireturn

  public int indexOfAnyNot(char, char, int, int);
    Code:
       0: iload_3
       1: ifge          6
       4: iconst_0
       5: istore_3
       6: iload         4
       8: aload_0
       9: invokevirtual #20                 // Method length:()I
      12: if_icmple     21
      15: aload_0
      16: invokevirtual #20                 // Method length:()I
      19: istore        4
      21: iload_3
      22: istore        5
      24: iload         5
      26: iload         4
      28: if_icmpge     60
      31: aload_0
      32: iload         5
      34: invokevirtual #22                 // Method charAt:(I)C
      37: istore        6
      39: iload         6
      41: iload_1
      42: if_icmpeq     54
      45: iload         6
      47: iload_2
      48: if_icmpeq     54
      51: iload         5
      53: ireturn
      54: iinc          5, 1
      57: goto          24
      60: iconst_m1
      61: ireturn

  public int indexOfAnyNot(char, char, char, int, int);
    Code:
       0: iload         4
       2: ifge          8
       5: iconst_0
       6: istore        4
       8: iload         5
      10: aload_0
      11: invokevirtual #20                 // Method length:()I
      14: if_icmple     23
      17: aload_0
      18: invokevirtual #20                 // Method length:()I
      21: istore        5
      23: iload         4
      25: istore        6
      27: iload         6
      29: iload         5
      31: if_icmpge     69
      34: aload_0
      35: iload         6
      37: invokevirtual #22                 // Method charAt:(I)C
      40: istore        7
      42: iload         7
      44: iload_1
      45: if_icmpeq     63
      48: iload         7
      50: iload_2
      51: if_icmpeq     63
      54: iload         7
      56: iload_3
      57: if_icmpeq     63
      60: iload         6
      62: ireturn
      63: iinc          6, 1
      66: goto          27
      69: iconst_m1
      70: ireturn

  public int indexOfAnyNot(java.lang.CharSequence, int, int);
    Code:
       0: aload_1
       1: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
       6: tableswitch   { // 0 to 3
                     0: 36
                     1: 38
                     2: 52
                     3: 73
               default: 101
          }
      36: iload_2
      37: ireturn
      38: aload_0
      39: aload_1
      40: iconst_0
      41: invokeinterface #26,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      46: iload_2
      47: iload_3
      48: invokevirtual #35                 // Method indexOfNot:(CII)I
      51: ireturn
      52: aload_0
      53: aload_1
      54: iconst_0
      55: invokeinterface #26,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      60: aload_1
      61: iconst_1
      62: invokeinterface #26,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      67: iload_2
      68: iload_3
      69: invokevirtual #36                 // Method indexOfAnyNot:(CCII)I
      72: ireturn
      73: aload_0
      74: aload_1
      75: iconst_0
      76: invokeinterface #26,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      81: aload_1
      82: iconst_1
      83: invokeinterface #26,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      88: aload_1
      89: iconst_2
      90: invokeinterface #26,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      95: iload_2
      96: iload_3
      97: invokevirtual #37                 // Method indexOfAnyNot:(CCCII)I
     100: ireturn
     101: aload_1
     102: invokestatic  #33                 // Method of:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     105: astore        4
     107: iload_2
     108: ifge          113
     111: iconst_0
     112: istore_2
     113: iload_3
     114: aload_0
     115: invokevirtual #20                 // Method length:()I
     118: if_icmple     126
     121: aload_0
     122: invokevirtual #20                 // Method length:()I
     125: istore_3
     126: iload_2
     127: istore        5
     129: iload         5
     131: iload_3
     132: if_icmpge     165
     135: aload_0
     136: iload         5
     138: invokevirtual #22                 // Method charAt:(I)C
     141: istore        6
     143: aload         4
     145: iload         6
     147: invokeinterface #34,  2           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.indexOf:(C)I
     152: iconst_m1
     153: if_icmpne     159
     156: iload         5
     158: ireturn
     159: iinc          5, 1
     162: goto          129
     165: iconst_m1
     166: ireturn

  public int lastIndexOf(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #39                 // Method lastIndexOf:(Ljava/lang/CharSequence;II)I
      10: ireturn

  public int lastIndexOf(java.lang.CharSequence, int);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: iload_2
       4: invokevirtual #39                 // Method lastIndexOf:(Ljava/lang/CharSequence;II)I
       7: ireturn

  public int lastIndexOf(java.lang.CharSequence, int, int);
    Code:
       0: aload_1
       1: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
       6: istore        4
       8: iload         4
      10: ifne          15
      13: iload_2
      14: ireturn
      15: iload_2
      16: ifge          21
      19: iconst_0
      20: istore_2
      21: iload_3
      22: aload_0
      23: invokevirtual #20                 // Method length:()I
      26: if_icmplt     34
      29: aload_0
      30: invokevirtual #20                 // Method length:()I
      33: istore_3
      34: iload_2
      35: iload_3
      36: if_icmpge     110
      39: iload_3
      40: istore        5
      42: aload_1
      43: iload         4
      45: iconst_1
      46: isub
      47: invokeinterface #26,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      52: istore        6
      54: aload_0
      55: iload         6
      57: iload         5
      59: invokevirtual #40                 // Method lastIndexOf:(CI)I
      62: istore        5
      64: iload         5
      66: iconst_1
      67: iadd
      68: iload_2
      69: iload         4
      71: iadd
      72: if_icmpge     78
      75: goto          110
      78: aload_0
      79: aload_1
      80: iload         5
      82: invokevirtual #41                 // Method matchCharsReversed:(Ljava/lang/CharSequence;I)Z
      85: ifeq          96
      88: iload         5
      90: iconst_1
      91: iadd
      92: iload         4
      94: isub
      95: ireturn
      96: iinc          5, -1
      99: iload         5
     101: iconst_1
     102: iadd
     103: iload_2
     104: iload         4
     106: iadd
     107: if_icmpge     54
     110: iconst_m1
     111: ireturn

  public int lastIndexOf(char);
    Code:
       0: aload_0
       1: iload_1
       2: iconst_0
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #42                 // Method lastIndexOf:(CII)I
      10: ireturn

  public int lastIndexOfAny(char, char);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: iconst_0
       4: aload_0
       5: invokevirtual #20                 // Method length:()I
       8: invokevirtual #43                 // Method lastIndexOfAny:(CCII)I
      11: ireturn

  public int lastIndexOfAny(char, char, char);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: iload_3
       4: iconst_0
       5: aload_0
       6: invokevirtual #20                 // Method length:()I
       9: invokevirtual #44                 // Method lastIndexOfAny:(CCCII)I
      12: ireturn

  public int lastIndexOfAny(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #32                 // Method indexOfAny:(Ljava/lang/CharSequence;II)I
      10: ireturn

  public int lastIndexOf(char, int);
    Code:
       0: aload_0
       1: iload_1
       2: iconst_0
       3: iload_2
       4: invokevirtual #42                 // Method lastIndexOf:(CII)I
       7: ireturn

  public int lastIndexOfAny(char, char, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: iconst_0
       4: iload_3
       5: invokevirtual #43                 // Method lastIndexOfAny:(CCII)I
       8: ireturn

  public int lastIndexOfAny(char, char, char, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: iload_3
       4: iconst_0
       5: iload         4
       7: invokevirtual #44                 // Method lastIndexOfAny:(CCCII)I
      10: ireturn

  public int lastIndexOfAny(java.lang.CharSequence, int);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: iload_2
       4: invokevirtual #45                 // Method lastIndexOfAny:(Ljava/lang/CharSequence;II)I
       7: ireturn

  public int lastIndexOf(char, int, int);
    Code:
       0: iload_2
       1: ifge          6
       4: iconst_0
       5: istore_2
       6: iload_3
       7: aload_0
       8: invokevirtual #20                 // Method length:()I
      11: if_icmplt     22
      14: aload_0
      15: invokevirtual #20                 // Method length:()I
      18: istore_3
      19: goto          25
      22: iinc          3, 1
      25: iload_3
      26: istore        4
      28: iload         4
      30: iinc          4, -1
      33: iload_2
      34: if_icmple     50
      37: aload_0
      38: iload         4
      40: invokevirtual #22                 // Method charAt:(I)C
      43: iload_1
      44: if_icmpne     28
      47: iload         4
      49: ireturn
      50: iconst_m1
      51: ireturn

  public int lastIndexOfAny(char, char, int, int);
    Code:
       0: iload_3
       1: ifge          6
       4: iconst_0
       5: istore_3
       6: iload         4
       8: aload_0
       9: invokevirtual #20                 // Method length:()I
      12: if_icmplt     24
      15: aload_0
      16: invokevirtual #20                 // Method length:()I
      19: istore        4
      21: goto          27
      24: iinc          4, 1
      27: iload         4
      29: istore        5
      31: iload         5
      33: iinc          5, -1
      36: iload_3
      37: if_icmple     66
      40: aload_0
      41: iload         5
      43: invokevirtual #22                 // Method charAt:(I)C
      46: istore        6
      48: iload         6
      50: iload_1
      51: if_icmpeq     60
      54: iload         6
      56: iload_2
      57: if_icmpne     63
      60: iload         5
      62: ireturn
      63: goto          31
      66: iconst_m1
      67: ireturn

  public int lastIndexOfAny(char, char, char, int, int);
    Code:
       0: iload         4
       2: ifge          8
       5: iconst_0
       6: istore        4
       8: iload         5
      10: aload_0
      11: invokevirtual #20                 // Method length:()I
      14: if_icmplt     26
      17: aload_0
      18: invokevirtual #20                 // Method length:()I
      21: istore        5
      23: goto          29
      26: iinc          5, 1
      29: iload         5
      31: istore        6
      33: iload         6
      35: iinc          6, -1
      38: iload         4
      40: if_icmple     75
      43: aload_0
      44: iload         6
      46: invokevirtual #22                 // Method charAt:(I)C
      49: istore        7
      51: iload         7
      53: iload_1
      54: if_icmpeq     69
      57: iload         7
      59: iload_2
      60: if_icmpeq     69
      63: iload         7
      65: iload_3
      66: if_icmpne     72
      69: iload         6
      71: ireturn
      72: goto          33
      75: iconst_m1
      76: ireturn

  public int lastIndexOfAny(java.lang.CharSequence, int, int);
    Code:
       0: aload_1
       1: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
       6: tableswitch   { // 0 to 3
                     0: 36
                     1: 38
                     2: 52
                     3: 73
               default: 101
          }
      36: iload_2
      37: ireturn
      38: aload_0
      39: aload_1
      40: iconst_0
      41: invokeinterface #26,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      46: iload_2
      47: iload_3
      48: invokevirtual #42                 // Method lastIndexOf:(CII)I
      51: ireturn
      52: aload_0
      53: aload_1
      54: iconst_0
      55: invokeinterface #26,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      60: aload_1
      61: iconst_1
      62: invokeinterface #26,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      67: iload_2
      68: iload_3
      69: invokevirtual #43                 // Method lastIndexOfAny:(CCII)I
      72: ireturn
      73: aload_0
      74: aload_1
      75: iconst_0
      76: invokeinterface #26,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      81: aload_1
      82: iconst_1
      83: invokeinterface #26,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      88: aload_1
      89: iconst_2
      90: invokeinterface #26,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      95: iload_2
      96: iload_3
      97: invokevirtual #44                 // Method lastIndexOfAny:(CCCII)I
     100: ireturn
     101: aload_1
     102: invokestatic  #33                 // Method of:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     105: astore        4
     107: iload_2
     108: ifge          113
     111: iconst_0
     112: istore_2
     113: iload_3
     114: aload_0
     115: invokevirtual #20                 // Method length:()I
     118: if_icmplt     129
     121: aload_0
     122: invokevirtual #20                 // Method length:()I
     125: istore_3
     126: goto          132
     129: iinc          3, 1
     132: iload_3
     133: istore        5
     135: iload         5
     137: iinc          5, -1
     140: iload_2
     141: if_icmple     171
     144: aload_0
     145: iload         5
     147: invokevirtual #22                 // Method charAt:(I)C
     150: istore        6
     152: aload         4
     154: iload         6
     156: invokeinterface #34,  2           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.indexOf:(C)I
     161: iconst_m1
     162: if_icmpeq     168
     165: iload         5
     167: ireturn
     168: goto          135
     171: iconst_m1
     172: ireturn

  public int lastIndexOfNot(char);
    Code:
       0: aload_0
       1: iload_1
       2: iconst_0
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #46                 // Method lastIndexOfNot:(CII)I
      10: ireturn

  public int lastIndexOfAnyNot(char, char);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: iconst_0
       4: aload_0
       5: invokevirtual #20                 // Method length:()I
       8: invokevirtual #47                 // Method lastIndexOfAnyNot:(CCII)I
      11: ireturn

  public int lastIndexOfAnyNot(char, char, char);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: iload_3
       4: iconst_0
       5: aload_0
       6: invokevirtual #20                 // Method length:()I
       9: invokevirtual #48                 // Method lastIndexOfAnyNot:(CCCII)I
      12: ireturn

  public int lastIndexOfAnyNot(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #38                 // Method indexOfAnyNot:(Ljava/lang/CharSequence;II)I
      10: ireturn

  public int lastIndexOfNot(char, int);
    Code:
       0: aload_0
       1: iload_1
       2: iconst_0
       3: iload_2
       4: invokevirtual #46                 // Method lastIndexOfNot:(CII)I
       7: ireturn

  public int lastIndexOfAnyNot(char, char, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: iconst_0
       4: iload_3
       5: invokevirtual #47                 // Method lastIndexOfAnyNot:(CCII)I
       8: ireturn

  public int lastIndexOfAnyNot(char, char, char, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: iload_3
       4: iconst_0
       5: iload         4
       7: invokevirtual #48                 // Method lastIndexOfAnyNot:(CCCII)I
      10: ireturn

  public int lastIndexOfAnyNot(java.lang.CharSequence, int);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: iload_2
       4: invokevirtual #49                 // Method lastIndexOfAnyNot:(Ljava/lang/CharSequence;II)I
       7: ireturn

  public int lastIndexOfNot(char, int, int);
    Code:
       0: iload_2
       1: ifge          6
       4: iconst_0
       5: istore_2
       6: iload_3
       7: aload_0
       8: invokevirtual #20                 // Method length:()I
      11: if_icmplt     22
      14: aload_0
      15: invokevirtual #20                 // Method length:()I
      18: istore_3
      19: goto          25
      22: iinc          3, 1
      25: iload_3
      26: istore        4
      28: iload         4
      30: iinc          4, -1
      33: iload_2
      34: if_icmple     50
      37: aload_0
      38: iload         4
      40: invokevirtual #22                 // Method charAt:(I)C
      43: iload_1
      44: if_icmpeq     28
      47: iload         4
      49: ireturn
      50: iconst_m1
      51: ireturn

  public int lastIndexOfAnyNot(char, char, int, int);
    Code:
       0: iload_3
       1: ifge          6
       4: iconst_0
       5: istore_3
       6: iload         4
       8: aload_0
       9: invokevirtual #20                 // Method length:()I
      12: if_icmplt     24
      15: aload_0
      16: invokevirtual #20                 // Method length:()I
      19: istore        4
      21: goto          27
      24: iinc          4, 1
      27: iload         4
      29: istore        5
      31: iload         5
      33: iinc          5, -1
      36: iload_3
      37: if_icmple     66
      40: aload_0
      41: iload         5
      43: invokevirtual #22                 // Method charAt:(I)C
      46: istore        6
      48: iload         6
      50: iload_1
      51: if_icmpeq     63
      54: iload         6
      56: iload_2
      57: if_icmpeq     63
      60: iload         5
      62: ireturn
      63: goto          31
      66: iconst_m1
      67: ireturn

  public int lastIndexOfAnyNot(char, char, char, int, int);
    Code:
       0: iload         4
       2: ifge          8
       5: iconst_0
       6: istore        4
       8: iload         5
      10: aload_0
      11: invokevirtual #20                 // Method length:()I
      14: if_icmplt     26
      17: aload_0
      18: invokevirtual #20                 // Method length:()I
      21: istore        5
      23: goto          29
      26: iinc          5, 1
      29: iload         5
      31: istore        6
      33: iload         6
      35: iinc          6, -1
      38: iload         4
      40: if_icmple     75
      43: aload_0
      44: iload         6
      46: invokevirtual #22                 // Method charAt:(I)C
      49: istore        7
      51: iload         7
      53: iload_1
      54: if_icmpeq     72
      57: iload         7
      59: iload_2
      60: if_icmpeq     72
      63: iload         7
      65: iload_3
      66: if_icmpeq     72
      69: iload         6
      71: ireturn
      72: goto          33
      75: iconst_m1
      76: ireturn

  public int lastIndexOfAnyNot(java.lang.CharSequence, int, int);
    Code:
       0: aload_1
       1: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
       6: tableswitch   { // 0 to 3
                     0: 36
                     1: 38
                     2: 52
                     3: 73
               default: 101
          }
      36: iload_2
      37: ireturn
      38: aload_0
      39: aload_1
      40: iconst_0
      41: invokeinterface #26,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      46: iload_2
      47: iload_3
      48: invokevirtual #46                 // Method lastIndexOfNot:(CII)I
      51: ireturn
      52: aload_0
      53: aload_1
      54: iconst_0
      55: invokeinterface #26,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      60: aload_1
      61: iconst_1
      62: invokeinterface #26,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      67: iload_2
      68: iload_3
      69: invokevirtual #47                 // Method lastIndexOfAnyNot:(CCII)I
      72: ireturn
      73: aload_0
      74: aload_1
      75: iconst_0
      76: invokeinterface #26,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      81: aload_1
      82: iconst_1
      83: invokeinterface #26,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      88: aload_1
      89: iconst_2
      90: invokeinterface #26,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      95: iload_2
      96: iload_3
      97: invokevirtual #48                 // Method lastIndexOfAnyNot:(CCCII)I
     100: ireturn
     101: aload_1
     102: invokestatic  #33                 // Method of:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     105: astore        4
     107: iload_2
     108: ifge          113
     111: iconst_0
     112: istore_2
     113: iload_3
     114: aload_0
     115: invokevirtual #20                 // Method length:()I
     118: if_icmplt     129
     121: aload_0
     122: invokevirtual #20                 // Method length:()I
     125: istore_3
     126: goto          132
     129: iinc          3, 1
     132: iload_3
     133: istore        5
     135: iload         5
     137: iinc          5, -1
     140: iload_2
     141: if_icmple     171
     144: aload_0
     145: iload         5
     147: invokevirtual #22                 // Method charAt:(I)C
     150: istore        6
     152: aload         4
     154: iload         6
     156: invokeinterface #34,  2           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.indexOf:(C)I
     161: iconst_m1
     162: if_icmpne     168
     165: iload         5
     167: ireturn
     168: goto          135
     171: iconst_m1
     172: ireturn

  public int startOfDelimitedBy(java.lang.CharSequence, int);
    Code:
       0: iload_2
       1: ifge          9
       4: iconst_0
       5: istore_2
       6: goto          22
       9: iload_2
      10: aload_0
      11: invokevirtual #20                 // Method length:()I
      14: if_icmple     22
      17: aload_0
      18: invokevirtual #20                 // Method length:()I
      21: istore_2
      22: aload_0
      23: aload_1
      24: iload_2
      25: iconst_1
      26: isub
      27: invokevirtual #50                 // Method lastIndexOf:(Ljava/lang/CharSequence;I)I
      30: istore_3
      31: iload_3
      32: iconst_m1
      33: if_icmpne     40
      36: iconst_0
      37: goto          43
      40: iload_3
      41: iconst_1
      42: iadd
      43: ireturn

  public int startOfDelimitedByAny(java.lang.CharSequence, int);
    Code:
       0: iload_2
       1: ifge          9
       4: iconst_0
       5: istore_2
       6: goto          22
       9: iload_2
      10: aload_0
      11: invokevirtual #20                 // Method length:()I
      14: if_icmple     22
      17: aload_0
      18: invokevirtual #20                 // Method length:()I
      21: istore_2
      22: aload_0
      23: aload_1
      24: iload_2
      25: iconst_1
      26: isub
      27: invokevirtual #51                 // Method lastIndexOfAny:(Ljava/lang/CharSequence;I)I
      30: istore_3
      31: iload_3
      32: iconst_m1
      33: if_icmpne     40
      36: iconst_0
      37: goto          43
      40: iload_3
      41: iconst_1
      42: iadd
      43: ireturn

  public int startOfDelimitedByAnyNot(java.lang.CharSequence, int);
    Code:
       0: iload_2
       1: ifge          9
       4: iconst_0
       5: istore_2
       6: goto          22
       9: iload_2
      10: aload_0
      11: invokevirtual #20                 // Method length:()I
      14: if_icmple     22
      17: aload_0
      18: invokevirtual #20                 // Method length:()I
      21: istore_2
      22: aload_0
      23: aload_1
      24: iload_2
      25: iconst_1
      26: isub
      27: invokevirtual #52                 // Method lastIndexOfAnyNot:(Ljava/lang/CharSequence;I)I
      30: istore_3
      31: iload_3
      32: iconst_m1
      33: if_icmpne     40
      36: iconst_0
      37: goto          43
      40: iload_3
      41: iconst_1
      42: iadd
      43: ireturn

  public int endOfDelimitedBy(java.lang.CharSequence, int);
    Code:
       0: iload_2
       1: ifge          9
       4: iconst_0
       5: istore_2
       6: goto          22
       9: iload_2
      10: aload_0
      11: invokevirtual #20                 // Method length:()I
      14: if_icmple     22
      17: aload_0
      18: invokevirtual #20                 // Method length:()I
      21: istore_2
      22: aload_0
      23: aload_1
      24: iload_2
      25: invokevirtual #53                 // Method indexOf:(Ljava/lang/CharSequence;I)I
      28: istore_3
      29: iload_3
      30: iconst_m1
      31: if_icmpne     41
      34: aload_0
      35: invokevirtual #20                 // Method length:()I
      38: goto          42
      41: iload_3
      42: ireturn

  public int endOfDelimitedByAny(java.lang.CharSequence, int);
    Code:
       0: iload_2
       1: ifge          9
       4: iconst_0
       5: istore_2
       6: goto          22
       9: iload_2
      10: aload_0
      11: invokevirtual #20                 // Method length:()I
      14: if_icmple     22
      17: aload_0
      18: invokevirtual #20                 // Method length:()I
      21: istore_2
      22: aload_0
      23: aload_1
      24: iload_2
      25: invokevirtual #54                 // Method indexOfAny:(Ljava/lang/CharSequence;I)I
      28: istore_3
      29: iload_3
      30: iconst_m1
      31: if_icmpne     41
      34: aload_0
      35: invokevirtual #20                 // Method length:()I
      38: goto          42
      41: iload_3
      42: ireturn

  public int endOfDelimitedByAnyNot(java.lang.CharSequence, int);
    Code:
       0: iload_2
       1: ifge          9
       4: iconst_0
       5: istore_2
       6: goto          22
       9: iload_2
      10: aload_0
      11: invokevirtual #20                 // Method length:()I
      14: if_icmple     22
      17: aload_0
      18: invokevirtual #20                 // Method length:()I
      21: istore_2
      22: aload_0
      23: aload_1
      24: iload_2
      25: invokevirtual #55                 // Method indexOfAnyNot:(Ljava/lang/CharSequence;I)I
      28: istore_3
      29: iload_3
      30: iconst_m1
      31: if_icmpne     41
      34: aload_0
      35: invokevirtual #20                 // Method length:()I
      38: goto          42
      41: iload_3
      42: ireturn

  public int endOfLine(int);
    Code:
       0: aload_0
       1: getstatic     #56                 // Field EOL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: iload_1
       5: invokevirtual #57                 // Method endOfDelimitedBy:(Ljava/lang/CharSequence;I)I
       8: ireturn

  public int endOfLineAnyEOL(int);
    Code:
       0: aload_0
       1: ldc           #59                 // String \r\n
       3: iload_1
       4: invokevirtual #60                 // Method endOfDelimitedByAny:(Ljava/lang/CharSequence;I)I
       7: ireturn

  public int startOfLine(int);
    Code:
       0: aload_0
       1: getstatic     #56                 // Field EOL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: iload_1
       5: invokevirtual #61                 // Method startOfDelimitedBy:(Ljava/lang/CharSequence;I)I
       8: ireturn

  public int startOfLineAnyEOL(int);
    Code:
       0: aload_0
       1: ldc           #59                 // String \r\n
       3: iload_1
       4: invokevirtual #62                 // Method startOfDelimitedByAny:(Ljava/lang/CharSequence;I)I
       7: ireturn

  public com.vladsch.flexmark.util.sequence.BasedSequence lineAt(int);
    Code:
       0: aload_0
       1: aload_0
       2: iload_1
       3: invokevirtual #63                 // Method startOfLine:(I)I
       6: aload_0
       7: iload_1
       8: invokevirtual #64                 // Method endOfLine:(I)I
      11: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      14: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence lineAtAnyEOL(int);
    Code:
       0: aload_0
       1: aload_0
       2: iload_1
       3: invokevirtual #65                 // Method startOfLineAnyEOL:(I)I
       6: aload_0
       7: iload_1
       8: invokevirtual #66                 // Method endOfLineAnyEOL:(I)I
      11: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      14: areturn

  public int countLeading(char);
    Code:
       0: aload_0
       1: iload_1
       2: iconst_0
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #67                 // Method countChars:(CII)I
      10: ireturn

  public int countLeadingNot(char);
    Code:
       0: aload_0
       1: iload_1
       2: iconst_0
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #68                 // Method countNotChars:(CII)I
      10: ireturn

  public int countLeading(char, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #67                 // Method countChars:(CII)I
      10: ireturn

  public int countLeadingNot(char, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #68                 // Method countNotChars:(CII)I
      10: ireturn

  public int countLeading(char, int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: iload_3
       4: invokevirtual #67                 // Method countChars:(CII)I
       7: ireturn

  public int countLeadingNot(char, int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: iload_3
       4: invokevirtual #68                 // Method countNotChars:(CII)I
       7: ireturn

  public int countTrailing(char);
    Code:
       0: aload_0
       1: iload_1
       2: iconst_0
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #69                 // Method countCharsReversed:(CII)I
      10: ireturn

  public int countTrailingNot(char);
    Code:
       0: aload_0
       1: iload_1
       2: iconst_0
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #70                 // Method countNotCharsReversed:(CII)I
      10: ireturn

  public int countTrailing(char, int);
    Code:
       0: aload_0
       1: iload_1
       2: iconst_0
       3: iload_2
       4: invokevirtual #69                 // Method countCharsReversed:(CII)I
       7: ireturn

  public int countTrailingNot(char, int);
    Code:
       0: aload_0
       1: iload_1
       2: iconst_0
       3: iload_2
       4: invokevirtual #70                 // Method countNotCharsReversed:(CII)I
       7: ireturn

  public int countTrailing(char, int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: iload_3
       4: invokevirtual #69                 // Method countCharsReversed:(CII)I
       7: ireturn

  public int countTrailingNot(char, int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: iload_3
       4: invokevirtual #70                 // Method countNotCharsReversed:(CII)I
       7: ireturn

  public int countChars(char);
    Code:
       0: aload_0
       1: iload_1
       2: iconst_0
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #67                 // Method countChars:(CII)I
      10: ireturn

  public int countNotChars(char);
    Code:
       0: aload_0
       1: iload_1
       2: iconst_0
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #68                 // Method countNotChars:(CII)I
      10: ireturn

  public int countChars(char, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #67                 // Method countChars:(CII)I
      10: ireturn

  public int countNotChars(char, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #68                 // Method countNotChars:(CII)I
      10: ireturn

  public int countCharsReversed(char);
    Code:
       0: aload_0
       1: iload_1
       2: iconst_0
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #69                 // Method countCharsReversed:(CII)I
      10: ireturn

  public int countNotCharsReversed(char);
    Code:
       0: aload_0
       1: iload_1
       2: iconst_0
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #70                 // Method countNotCharsReversed:(CII)I
      10: ireturn

  public int countCharsReversed(char, int);
    Code:
       0: aload_0
       1: iload_1
       2: iconst_0
       3: iload_2
       4: invokevirtual #69                 // Method countCharsReversed:(CII)I
       7: ireturn

  public int countNotCharsReversed(char, int);
    Code:
       0: aload_0
       1: iload_1
       2: iconst_0
       3: iload_2
       4: invokevirtual #70                 // Method countNotCharsReversed:(CII)I
       7: ireturn

  public int countChars(char, int, int);
    Code:
       0: iload_2
       1: ifge          6
       4: iconst_0
       5: istore_2
       6: iload_3
       7: aload_0
       8: invokevirtual #20                 // Method length:()I
      11: if_icmple     19
      14: aload_0
      15: invokevirtual #20                 // Method length:()I
      18: istore_3
      19: iload_2
      20: iload_3
      21: if_icmple     26
      24: iload_3
      25: istore_2
      26: aload_0
      27: iload_1
      28: iload_2
      29: iload_3
      30: invokevirtual #35                 // Method indexOfNot:(CII)I
      33: istore        4
      35: iload         4
      37: iconst_m1
      38: if_icmpne     47
      41: iload_3
      42: iload_2
      43: isub
      44: goto          51
      47: iload         4
      49: iload_2
      50: isub
      51: ireturn

  public int countCharsReversed(char, int, int);
    Code:
       0: iload_2
       1: ifge          6
       4: iconst_0
       5: istore_2
       6: iload_3
       7: aload_0
       8: invokevirtual #20                 // Method length:()I
      11: if_icmple     19
      14: aload_0
      15: invokevirtual #20                 // Method length:()I
      18: istore_3
      19: iload_2
      20: iload_3
      21: if_icmple     26
      24: iload_3
      25: istore_2
      26: aload_0
      27: iload_1
      28: iload_2
      29: iload_3
      30: invokevirtual #46                 // Method lastIndexOfNot:(CII)I
      33: istore        4
      35: iload         4
      37: iconst_m1
      38: if_icmpne     47
      41: iload_3
      42: iload_2
      43: isub
      44: goto          53
      47: iload_3
      48: iload         4
      50: isub
      51: iconst_1
      52: isub
      53: ireturn

  public int countNotChars(char, int, int);
    Code:
       0: iload_2
       1: ifge          6
       4: iconst_0
       5: istore_2
       6: iload_3
       7: aload_0
       8: invokevirtual #20                 // Method length:()I
      11: if_icmple     19
      14: aload_0
      15: invokevirtual #20                 // Method length:()I
      18: istore_3
      19: iload_2
      20: iload_3
      21: if_icmple     26
      24: iload_3
      25: istore_2
      26: aload_0
      27: iload_1
      28: iload_2
      29: iload_3
      30: invokevirtual #29                 // Method indexOf:(CII)I
      33: istore        4
      35: iload         4
      37: iconst_m1
      38: if_icmpne     47
      41: iload_3
      42: iload_2
      43: isub
      44: goto          51
      47: iload         4
      49: iload_2
      50: isub
      51: ireturn

  public int countNotCharsReversed(char, int, int);
    Code:
       0: iload_2
       1: ifge          6
       4: iconst_0
       5: istore_2
       6: iload_3
       7: aload_0
       8: invokevirtual #20                 // Method length:()I
      11: if_icmple     19
      14: aload_0
      15: invokevirtual #20                 // Method length:()I
      18: istore_3
      19: iload_2
      20: iload_3
      21: if_icmple     26
      24: iload_3
      25: istore_2
      26: aload_0
      27: iload_1
      28: iload_2
      29: iload_3
      30: invokevirtual #42                 // Method lastIndexOf:(CII)I
      33: istore        4
      35: iload         4
      37: iconst_m1
      38: if_icmpne     47
      41: iload_3
      42: iload_2
      43: isub
      44: goto          53
      47: iload_3
      48: iload         4
      50: isub
      51: iconst_1
      52: isub
      53: ireturn

  public int countLeading(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #71                 // Method countChars:(Ljava/lang/CharSequence;II)I
      10: ireturn

  public int countLeadingNot(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #72                 // Method countNotChars:(Ljava/lang/CharSequence;II)I
      10: ireturn

  public int countLeading(java.lang.CharSequence, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #71                 // Method countChars:(Ljava/lang/CharSequence;II)I
      10: ireturn

  public int countLeadingNot(java.lang.CharSequence, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #72                 // Method countNotChars:(Ljava/lang/CharSequence;II)I
      10: ireturn

  public int countLeading(java.lang.CharSequence, int, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: invokevirtual #71                 // Method countChars:(Ljava/lang/CharSequence;II)I
       7: ireturn

  public int countLeadingNot(java.lang.CharSequence, int, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: invokevirtual #72                 // Method countNotChars:(Ljava/lang/CharSequence;II)I
       7: ireturn

  public int countTrailing(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #73                 // Method countCharsReversed:(Ljava/lang/CharSequence;II)I
      10: ireturn

  public int countTrailingNot(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #74                 // Method countNotCharsReversed:(Ljava/lang/CharSequence;II)I
      10: ireturn

  public int countTrailing(java.lang.CharSequence, int);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: iload_2
       4: invokevirtual #73                 // Method countCharsReversed:(Ljava/lang/CharSequence;II)I
       7: ireturn

  public int countTrailingNot(java.lang.CharSequence, int);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: iload_2
       4: invokevirtual #74                 // Method countNotCharsReversed:(Ljava/lang/CharSequence;II)I
       7: ireturn

  public int countTrailing(java.lang.CharSequence, int, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: invokevirtual #73                 // Method countCharsReversed:(Ljava/lang/CharSequence;II)I
       7: ireturn

  public int countTrailingNot(java.lang.CharSequence, int, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: invokevirtual #74                 // Method countNotCharsReversed:(Ljava/lang/CharSequence;II)I
       7: ireturn

  public int countChars(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #71                 // Method countChars:(Ljava/lang/CharSequence;II)I
      10: ireturn

  public int countNotChars(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #72                 // Method countNotChars:(Ljava/lang/CharSequence;II)I
      10: ireturn

  public int countChars(java.lang.CharSequence, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #71                 // Method countChars:(Ljava/lang/CharSequence;II)I
      10: ireturn

  public int countNotChars(java.lang.CharSequence, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #72                 // Method countNotChars:(Ljava/lang/CharSequence;II)I
      10: ireturn

  public int countCharsReversed(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #73                 // Method countCharsReversed:(Ljava/lang/CharSequence;II)I
      10: ireturn

  public int countNotCharsReversed(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #74                 // Method countNotCharsReversed:(Ljava/lang/CharSequence;II)I
      10: ireturn

  public int countCharsReversed(java.lang.CharSequence, int);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: iload_2
       4: invokevirtual #73                 // Method countCharsReversed:(Ljava/lang/CharSequence;II)I
       7: ireturn

  public int countNotCharsReversed(java.lang.CharSequence, int);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: iload_2
       4: invokevirtual #74                 // Method countNotCharsReversed:(Ljava/lang/CharSequence;II)I
       7: ireturn

  public int countChars(java.lang.CharSequence, int, int);
    Code:
       0: iload_2
       1: ifge          6
       4: iconst_0
       5: istore_2
       6: iload_3
       7: aload_0
       8: invokevirtual #20                 // Method length:()I
      11: if_icmple     19
      14: aload_0
      15: invokevirtual #20                 // Method length:()I
      18: istore_3
      19: iload_2
      20: iload_3
      21: if_icmple     26
      24: iload_3
      25: istore_2
      26: aload_0
      27: aload_1
      28: iload_2
      29: iload_3
      30: invokevirtual #38                 // Method indexOfAnyNot:(Ljava/lang/CharSequence;II)I
      33: istore        4
      35: iload         4
      37: iconst_m1
      38: if_icmpne     47
      41: iload_3
      42: iload_2
      43: isub
      44: goto          51
      47: iload         4
      49: iload_2
      50: isub
      51: ireturn

  public static int columnsToNextTabStop(int);
    Code:
       0: iconst_4
       1: iload_0
       2: iconst_4
       3: irem
       4: isub
       5: ireturn

  public int countLeadingColumns(int, java.lang.CharSequence);
    Code:
       0: iconst_0
       1: istore_3
       2: aload_0
       3: invokevirtual #20                 // Method length:()I
       6: istore        4
       8: aload_0
       9: aload_2
      10: iload_3
      11: iload         4
      13: invokevirtual #38                 // Method indexOfAnyNot:(Ljava/lang/CharSequence;II)I
      16: istore        5
      18: iload         5
      20: iconst_m1
      21: if_icmpne     29
      24: iload         4
      26: goto          31
      29: iload         5
      31: istore        6
      33: iload         5
      35: iconst_m1
      36: if_icmpne     46
      39: iload         4
      41: iload_3
      42: isub
      43: goto          50
      46: iload         5
      48: iload_3
      49: isub
      50: istore        7
      52: aload_0
      53: bipush        9
      55: iload_3
      56: iload         6
      58: invokevirtual #29                 // Method indexOf:(CII)I
      61: istore        8
      63: iload         8
      65: iconst_m1
      66: if_icmpeq     119
      69: iload_1
      70: istore        9
      72: iload         9
      74: iload         8
      76: iload         8
      78: iload         9
      80: iadd
      81: invokestatic  #75                 // Method columnsToNextTabStop:(I)I
      84: iadd
      85: iadd
      86: istore        9
      88: aload_0
      89: bipush        9
      91: iload         8
      93: iconst_1
      94: iadd
      95: invokevirtual #27                 // Method indexOf:(CI)I
      98: istore        8
     100: iload         8
     102: iflt          112
     105: iload         8
     107: iload         4
     109: if_icmplt     72
     112: iload         7
     114: iload         9
     116: iadd
     117: istore        7
     119: iload         7
     121: ireturn

  public int countCharsReversed(java.lang.CharSequence, int, int);
    Code:
       0: iload_2
       1: ifge          6
       4: iconst_0
       5: istore_2
       6: iload_3
       7: aload_0
       8: invokevirtual #20                 // Method length:()I
      11: if_icmple     19
      14: aload_0
      15: invokevirtual #20                 // Method length:()I
      18: istore_3
      19: iload_2
      20: iload_3
      21: if_icmple     26
      24: iload_3
      25: istore_2
      26: aload_0
      27: aload_1
      28: iload_2
      29: iload_3
      30: invokevirtual #49                 // Method lastIndexOfAnyNot:(Ljava/lang/CharSequence;II)I
      33: istore        4
      35: iload         4
      37: iconst_m1
      38: if_icmpne     47
      41: iload_3
      42: iload_2
      43: isub
      44: goto          53
      47: iload_3
      48: iload         4
      50: isub
      51: iconst_1
      52: isub
      53: ireturn

  public int countNotChars(java.lang.CharSequence, int, int);
    Code:
       0: iload_2
       1: ifge          6
       4: iconst_0
       5: istore_2
       6: iload_3
       7: aload_0
       8: invokevirtual #20                 // Method length:()I
      11: if_icmple     19
      14: aload_0
      15: invokevirtual #20                 // Method length:()I
      18: istore_3
      19: iload_2
      20: iload_3
      21: if_icmple     26
      24: iload_3
      25: istore_2
      26: aload_0
      27: aload_1
      28: iload_2
      29: iload_3
      30: invokevirtual #32                 // Method indexOfAny:(Ljava/lang/CharSequence;II)I
      33: istore        4
      35: iload         4
      37: iconst_m1
      38: if_icmpne     47
      41: iload_3
      42: iload_2
      43: isub
      44: goto          51
      47: iload         4
      49: iload_2
      50: isub
      51: ireturn

  public int countNotCharsReversed(java.lang.CharSequence, int, int);
    Code:
       0: iload_2
       1: ifge          6
       4: iconst_0
       5: istore_2
       6: iload_3
       7: aload_0
       8: invokevirtual #20                 // Method length:()I
      11: if_icmple     19
      14: aload_0
      15: invokevirtual #20                 // Method length:()I
      18: istore_3
      19: iload_2
      20: iload_3
      21: if_icmple     26
      24: iload_3
      25: istore_2
      26: aload_0
      27: aload_1
      28: iload_2
      29: iload_3
      30: invokevirtual #45                 // Method lastIndexOfAny:(Ljava/lang/CharSequence;II)I
      33: istore        4
      35: iload         4
      37: iconst_m1
      38: if_icmpne     47
      41: iload_3
      42: iload_2
      43: isub
      44: goto          53
      47: iload_3
      48: iload         4
      50: isub
      51: iconst_1
      52: isub
      53: ireturn

  public com.vladsch.flexmark.util.sequence.BasedSequence trimStart(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #71                 // Method countChars:(Ljava/lang/CharSequence;II)I
      10: istore_2
      11: iload_2
      12: ifle          27
      15: aload_0
      16: iload_2
      17: aload_0
      18: invokevirtual #20                 // Method length:()I
      21: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      24: goto          28
      27: aload_0
      28: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence trimmedStart(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #71                 // Method countChars:(Ljava/lang/CharSequence;II)I
      10: istore_2
      11: iload_2
      12: ifle          24
      15: aload_0
      16: iconst_0
      17: iload_2
      18: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      21: goto          27
      24: getstatic     #76                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      27: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence trimEnd(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #73                 // Method countCharsReversed:(Ljava/lang/CharSequence;II)I
      10: istore_2
      11: iload_2
      12: ifle          29
      15: aload_0
      16: iconst_0
      17: aload_0
      18: invokevirtual #20                 // Method length:()I
      21: iload_2
      22: isub
      23: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      26: goto          30
      29: aload_0
      30: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence trimmedEnd(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #73                 // Method countCharsReversed:(Ljava/lang/CharSequence;II)I
      10: istore_2
      11: iload_2
      12: ifle          28
      15: aload_0
      16: aload_0
      17: invokevirtual #20                 // Method length:()I
      20: iload_2
      21: isub
      22: invokevirtual #77                 // Method subSequence:(I)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      25: goto          31
      28: getstatic     #76                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      31: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence trim(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #71                 // Method countChars:(Ljava/lang/CharSequence;II)I
      10: istore_2
      11: aload_0
      12: aload_1
      13: iconst_0
      14: aload_0
      15: invokevirtual #20                 // Method length:()I
      18: invokevirtual #73                 // Method countCharsReversed:(Ljava/lang/CharSequence;II)I
      21: istore_3
      22: iload_2
      23: iload_3
      24: iadd
      25: istore        4
      27: iload         4
      29: ifle          64
      32: iload         4
      34: aload_0
      35: invokevirtual #20                 // Method length:()I
      38: if_icmplt     50
      41: aload_0
      42: iconst_0
      43: iconst_0
      44: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      47: goto          65
      50: aload_0
      51: iload_2
      52: aload_0
      53: invokevirtual #20                 // Method length:()I
      56: iload_3
      57: isub
      58: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      61: goto          65
      64: aload_0
      65: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence trimStart();
    Code:
       0: aload_0
       1: ldc           #78                 // String  \t\r\n
       3: iconst_0
       4: aload_0
       5: invokevirtual #20                 // Method length:()I
       8: invokevirtual #71                 // Method countChars:(Ljava/lang/CharSequence;II)I
      11: istore_1
      12: iload_1
      13: ifle          28
      16: aload_0
      17: iload_1
      18: aload_0
      19: invokevirtual #20                 // Method length:()I
      22: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      25: goto          29
      28: aload_0
      29: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence trimmedStart();
    Code:
       0: aload_0
       1: ldc           #78                 // String  \t\r\n
       3: iconst_0
       4: aload_0
       5: invokevirtual #20                 // Method length:()I
       8: invokevirtual #71                 // Method countChars:(Ljava/lang/CharSequence;II)I
      11: istore_1
      12: iload_1
      13: ifle          25
      16: aload_0
      17: iconst_0
      18: iload_1
      19: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      22: goto          28
      25: getstatic     #76                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      28: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence trimEnd();
    Code:
       0: aload_0
       1: ldc           #78                 // String  \t\r\n
       3: iconst_0
       4: aload_0
       5: invokevirtual #20                 // Method length:()I
       8: invokevirtual #73                 // Method countCharsReversed:(Ljava/lang/CharSequence;II)I
      11: istore_1
      12: iload_1
      13: ifle          30
      16: aload_0
      17: iconst_0
      18: aload_0
      19: invokevirtual #20                 // Method length:()I
      22: iload_1
      23: isub
      24: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      27: goto          31
      30: aload_0
      31: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence trimmedEnd();
    Code:
       0: aload_0
       1: ldc           #78                 // String  \t\r\n
       3: iconst_0
       4: aload_0
       5: invokevirtual #20                 // Method length:()I
       8: invokevirtual #73                 // Method countCharsReversed:(Ljava/lang/CharSequence;II)I
      11: istore_1
      12: iload_1
      13: ifle          29
      16: aload_0
      17: aload_0
      18: invokevirtual #20                 // Method length:()I
      21: iload_1
      22: isub
      23: invokevirtual #77                 // Method subSequence:(I)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      26: goto          32
      29: getstatic     #76                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      32: areturn

  public int eolLength();
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method length:()I
       4: iconst_1
       5: isub
       6: istore_1
       7: iload_1
       8: istore_2
       9: iload_2
      10: iflt          57
      13: aload_0
      14: iload_2
      15: invokevirtual #22                 // Method charAt:(I)C
      18: istore_3
      19: iload_3
      20: bipush        13
      22: if_icmpne     48
      25: iinc          2, -1
      28: iload_2
      29: iflt          57
      32: aload_0
      33: iload_2
      34: invokevirtual #22                 // Method charAt:(I)C
      37: bipush        10
      39: if_icmpne     57
      42: iinc          2, -1
      45: goto          57
      48: iload_3
      49: bipush        10
      51: if_icmpne     57
      54: iinc          2, -1
      57: iload_1
      58: iload_2
      59: isub
      60: ireturn

  public int eolLength(int);
    Code:
       0: iload_1
       1: istore_2
       2: aload_0
       3: invokevirtual #20                 // Method length:()I
       6: istore_3
       7: iload_2
       8: iflt          64
      11: iload_2
      12: iload_3
      13: if_icmpge     64
      16: aload_0
      17: iload_2
      18: invokevirtual #22                 // Method charAt:(I)C
      21: istore        4
      23: iload         4
      25: bipush        13
      27: if_icmpne     54
      30: iinc          2, 1
      33: iload_2
      34: iload_3
      35: if_icmpge     64
      38: aload_0
      39: iload_2
      40: invokevirtual #22                 // Method charAt:(I)C
      43: bipush        10
      45: if_icmpne     64
      48: iinc          2, 1
      51: goto          64
      54: iload         4
      56: bipush        10
      58: if_icmpne     64
      61: iinc          2, 1
      64: iload_2
      65: iload_1
      66: isub
      67: ireturn

  public com.vladsch.flexmark.util.sequence.BasedSequence trimEOL();
    Code:
       0: aload_0
       1: invokevirtual #79                 // Method eolLength:()I
       4: istore_1
       5: iload_1
       6: ifle          23
       9: aload_0
      10: iconst_0
      11: aload_0
      12: invokevirtual #20                 // Method length:()I
      15: iload_1
      16: isub
      17: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      20: goto          24
      23: aload_0
      24: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence trimmedEOL();
    Code:
       0: aload_0
       1: invokevirtual #79                 // Method eolLength:()I
       4: istore_1
       5: iload_1
       6: ifle          22
       9: aload_0
      10: aload_0
      11: invokevirtual #20                 // Method length:()I
      14: iload_1
      15: isub
      16: invokevirtual #77                 // Method subSequence:(I)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      19: goto          25
      22: getstatic     #76                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      25: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence trim();
    Code:
       0: aload_0
       1: ldc           #78                 // String  \t\r\n
       3: iconst_0
       4: aload_0
       5: invokevirtual #20                 // Method length:()I
       8: invokevirtual #71                 // Method countChars:(Ljava/lang/CharSequence;II)I
      11: istore_1
      12: iload_1
      13: aload_0
      14: invokevirtual #20                 // Method length:()I
      17: if_icmpne     27
      20: aload_0
      21: iload_1
      22: iload_1
      23: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      26: areturn
      27: aload_0
      28: ldc           #78                 // String  \t\r\n
      30: iconst_0
      31: aload_0
      32: invokevirtual #20                 // Method length:()I
      35: invokevirtual #73                 // Method countCharsReversed:(Ljava/lang/CharSequence;II)I
      38: istore_2
      39: iload_1
      40: ifgt          47
      43: iload_2
      44: ifle          61
      47: aload_0
      48: iload_1
      49: aload_0
      50: invokevirtual #20                 // Method length:()I
      53: iload_2
      54: isub
      55: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      58: goto          62
      61: aload_0
      62: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence ifNull(com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: invokevirtual #80                 // Method isNull:()Z
       4: ifeq          11
       7: aload_1
       8: goto          12
      11: aload_0
      12: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence ifNullEmptyAfter(com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: invokevirtual #80                 // Method isNull:()Z
       4: ifeq          28
       7: aload_1
       8: aload_1
       9: invokeinterface #81,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      14: aload_1
      15: invokeinterface #81,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      20: invokeinterface #82,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      25: goto          29
      28: aload_0
      29: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence ifNullEmptyBefore(com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: invokevirtual #80                 // Method isNull:()Z
       4: ifeq          18
       7: aload_1
       8: iconst_0
       9: iconst_0
      10: invokeinterface #82,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      15: goto          19
      18: aload_0
      19: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence nullIfEmpty();
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method isEmpty:()Z
       4: ifeq          13
       7: getstatic     #76                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      10: goto          14
      13: aload_0
      14: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence nullIfBlank();
    Code:
       0: aload_0
       1: invokevirtual #83                 // Method isBlank:()Z
       4: ifeq          13
       7: getstatic     #76                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      10: goto          14
      13: aload_0
      14: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence nullIf(boolean);
    Code:
       0: iload_1
       1: ifeq          10
       4: getstatic     #76                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       7: goto          11
      10: aload_0
      11: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence nullIf(java.lang.CharSequence...);
    Code:
       0: aload_1
       1: astore_2
       2: aload_2
       3: arraylength
       4: istore_3
       5: iconst_0
       6: istore        4
       8: iload         4
      10: iload_3
      11: if_icmpge     39
      14: aload_2
      15: iload         4
      17: aaload
      18: astore        5
      20: aload_0
      21: aload         5
      23: invokevirtual #84                 // Method matches:(Ljava/lang/CharSequence;)Z
      26: ifeq          33
      29: getstatic     #76                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      32: areturn
      33: iinc          4, 1
      36: goto          8
      39: aload_0
      40: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence nullIfNot(java.lang.CharSequence...);
    Code:
       0: aload_1
       1: astore_2
       2: aload_2
       3: arraylength
       4: istore_3
       5: iconst_0
       6: istore        4
       8: iload         4
      10: iload_3
      11: if_icmpge     37
      14: aload_2
      15: iload         4
      17: aaload
      18: astore        5
      20: aload_0
      21: aload         5
      23: invokevirtual #84                 // Method matches:(Ljava/lang/CharSequence;)Z
      26: ifeq          31
      29: aload_0
      30: areturn
      31: iinc          4, 1
      34: goto          8
      37: getstatic     #76                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      40: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence nullIfStartsWith(java.lang.CharSequence...);
    Code:
       0: aload_1
       1: astore_2
       2: aload_2
       3: arraylength
       4: istore_3
       5: iconst_0
       6: istore        4
       8: iload         4
      10: iload_3
      11: if_icmpge     39
      14: aload_2
      15: iload         4
      17: aaload
      18: astore        5
      20: aload_0
      21: aload         5
      23: invokevirtual #85                 // Method startsWith:(Ljava/lang/CharSequence;)Z
      26: ifeq          33
      29: getstatic     #76                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      32: areturn
      33: iinc          4, 1
      36: goto          8
      39: aload_0
      40: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence nullIfStartsWithNot(java.lang.CharSequence...);
    Code:
       0: aload_1
       1: astore_2
       2: aload_2
       3: arraylength
       4: istore_3
       5: iconst_0
       6: istore        4
       8: iload         4
      10: iload_3
      11: if_icmpge     37
      14: aload_2
      15: iload         4
      17: aaload
      18: astore        5
      20: aload_0
      21: aload         5
      23: invokevirtual #85                 // Method startsWith:(Ljava/lang/CharSequence;)Z
      26: ifeq          31
      29: aload_0
      30: areturn
      31: iinc          4, 1
      34: goto          8
      37: getstatic     #76                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      40: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence nullIfEndsWith(java.lang.CharSequence...);
    Code:
       0: aload_1
       1: astore_2
       2: aload_2
       3: arraylength
       4: istore_3
       5: iconst_0
       6: istore        4
       8: iload         4
      10: iload_3
      11: if_icmpge     39
      14: aload_2
      15: iload         4
      17: aaload
      18: astore        5
      20: aload_0
      21: aload         5
      23: invokevirtual #86                 // Method endsWith:(Ljava/lang/CharSequence;)Z
      26: ifeq          33
      29: getstatic     #76                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      32: areturn
      33: iinc          4, 1
      36: goto          8
      39: aload_0
      40: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence nullIfEndsWithNot(java.lang.CharSequence...);
    Code:
       0: aload_1
       1: astore_2
       2: aload_2
       3: arraylength
       4: istore_3
       5: iconst_0
       6: istore        4
       8: iload         4
      10: iload_3
      11: if_icmpge     37
      14: aload_2
      15: iload         4
      17: aaload
      18: astore        5
      20: aload_0
      21: aload         5
      23: invokevirtual #86                 // Method endsWith:(Ljava/lang/CharSequence;)Z
      26: ifeq          31
      29: aload_0
      30: areturn
      31: iinc          4, 1
      34: goto          8
      37: getstatic     #76                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      40: areturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method length:()I
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public boolean isBlank();
    Code:
       0: aload_0
       1: ldc           #78                 // String  \t\r\n
       3: iconst_0
       4: aload_0
       5: invokevirtual #20                 // Method length:()I
       8: invokevirtual #71                 // Method countChars:(Ljava/lang/CharSequence;II)I
      11: istore_1
      12: iload_1
      13: aload_0
      14: invokevirtual #20                 // Method length:()I
      17: if_icmpne     24
      20: iconst_1
      21: goto          25
      24: iconst_0
      25: ireturn

  public boolean isNull();
    Code:
       0: aload_0
       1: getstatic     #76                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: if_acmpne     11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public boolean isNotNull();
    Code:
       0: aload_0
       1: getstatic     #76                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: if_acmpeq     11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public boolean endsWith(java.lang.CharSequence);
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method length:()I
       4: ifle          26
       7: aload_0
       8: aload_1
       9: aload_0
      10: invokevirtual #20                 // Method length:()I
      13: iconst_1
      14: isub
      15: iconst_0
      16: invokevirtual #87                 // Method matchCharsReversed:(Ljava/lang/CharSequence;IZ)Z
      19: ifeq          26
      22: iconst_1
      23: goto          27
      26: iconst_0
      27: ireturn

  public boolean startsWith(java.lang.CharSequence);
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method length:()I
       4: ifle          21
       7: aload_0
       8: aload_1
       9: iconst_0
      10: iconst_0
      11: invokevirtual #88                 // Method matchChars:(Ljava/lang/CharSequence;IZ)Z
      14: ifeq          21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: ireturn

  public com.vladsch.flexmark.util.sequence.BasedSequence removeSuffix(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #86                 // Method endsWith:(Ljava/lang/CharSequence;)Z
       5: ifne          12
       8: aload_0
       9: goto          28
      12: aload_0
      13: iconst_0
      14: aload_0
      15: invokevirtual #20                 // Method length:()I
      18: aload_1
      19: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      24: isub
      25: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      28: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence removePrefix(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #85                 // Method startsWith:(Ljava/lang/CharSequence;)Z
       5: ifne          12
       8: aload_0
       9: goto          26
      12: aload_0
      13: aload_1
      14: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      19: aload_0
      20: invokevirtual #20                 // Method length:()I
      23: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      26: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence removeProperSuffix(java.lang.CharSequence);
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method length:()I
       4: aload_1
       5: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      10: if_icmple     21
      13: aload_0
      14: aload_1
      15: invokevirtual #86                 // Method endsWith:(Ljava/lang/CharSequence;)Z
      18: ifne          25
      21: aload_0
      22: goto          41
      25: aload_0
      26: iconst_0
      27: aload_0
      28: invokevirtual #20                 // Method length:()I
      31: aload_1
      32: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      37: isub
      38: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      41: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence removeProperPrefix(java.lang.CharSequence);
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method length:()I
       4: aload_1
       5: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      10: if_icmple     21
      13: aload_0
      14: aload_1
      15: invokevirtual #85                 // Method startsWith:(Ljava/lang/CharSequence;)Z
      18: ifne          25
      21: aload_0
      22: goto          39
      25: aload_0
      26: aload_1
      27: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      32: aload_0
      33: invokevirtual #20                 // Method length:()I
      36: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      39: areturn

  public boolean endsWithIgnoreCase(java.lang.CharSequence);
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method length:()I
       4: ifle          26
       7: aload_0
       8: aload_1
       9: aload_0
      10: invokevirtual #20                 // Method length:()I
      13: iconst_1
      14: isub
      15: iconst_1
      16: invokevirtual #87                 // Method matchCharsReversed:(Ljava/lang/CharSequence;IZ)Z
      19: ifeq          26
      22: iconst_1
      23: goto          27
      26: iconst_0
      27: ireturn

  public boolean startsWithIgnoreCase(java.lang.CharSequence);
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method length:()I
       4: ifle          21
       7: aload_0
       8: aload_1
       9: iconst_0
      10: iconst_1
      11: invokevirtual #88                 // Method matchChars:(Ljava/lang/CharSequence;IZ)Z
      14: ifeq          21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: ireturn

  public com.vladsch.flexmark.util.sequence.BasedSequence removeSuffixIgnoreCase(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #89                 // Method endsWithIgnoreCase:(Ljava/lang/CharSequence;)Z
       5: ifne          12
       8: aload_0
       9: goto          28
      12: aload_0
      13: iconst_0
      14: aload_0
      15: invokevirtual #20                 // Method length:()I
      18: aload_1
      19: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      24: isub
      25: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      28: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence removePrefixIgnoreCase(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #90                 // Method startsWithIgnoreCase:(Ljava/lang/CharSequence;)Z
       5: ifne          12
       8: aload_0
       9: goto          26
      12: aload_0
      13: aload_1
      14: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      19: aload_0
      20: invokevirtual #20                 // Method length:()I
      23: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      26: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence removeProperSuffixIgnoreCase(java.lang.CharSequence);
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method length:()I
       4: aload_1
       5: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      10: if_icmple     21
      13: aload_0
      14: aload_1
      15: invokevirtual #89                 // Method endsWithIgnoreCase:(Ljava/lang/CharSequence;)Z
      18: ifne          25
      21: aload_0
      22: goto          41
      25: aload_0
      26: iconst_0
      27: aload_0
      28: invokevirtual #20                 // Method length:()I
      31: aload_1
      32: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      37: isub
      38: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      41: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence removeProperPrefixIgnoreCase(java.lang.CharSequence);
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method length:()I
       4: aload_1
       5: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      10: if_icmple     21
      13: aload_0
      14: aload_1
      15: invokevirtual #90                 // Method startsWithIgnoreCase:(Ljava/lang/CharSequence;)Z
      18: ifne          25
      21: aload_0
      22: goto          39
      25: aload_0
      26: aload_1
      27: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      32: aload_0
      33: invokevirtual #20                 // Method length:()I
      36: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      39: areturn

  public boolean endsWith(java.lang.CharSequence, boolean);
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method length:()I
       4: ifle          26
       7: aload_0
       8: aload_1
       9: aload_0
      10: invokevirtual #20                 // Method length:()I
      13: iconst_1
      14: isub
      15: iload_2
      16: invokevirtual #87                 // Method matchCharsReversed:(Ljava/lang/CharSequence;IZ)Z
      19: ifeq          26
      22: iconst_1
      23: goto          27
      26: iconst_0
      27: ireturn

  public boolean startsWith(java.lang.CharSequence, boolean);
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method length:()I
       4: ifle          21
       7: aload_0
       8: aload_1
       9: iconst_0
      10: iload_2
      11: invokevirtual #88                 // Method matchChars:(Ljava/lang/CharSequence;IZ)Z
      14: ifeq          21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: ireturn

  public com.vladsch.flexmark.util.sequence.BasedSequence removeSuffix(java.lang.CharSequence, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokevirtual #91                 // Method endsWith:(Ljava/lang/CharSequence;Z)Z
       6: ifne          13
       9: aload_0
      10: goto          29
      13: aload_0
      14: iconst_0
      15: aload_0
      16: invokevirtual #20                 // Method length:()I
      19: aload_1
      20: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      25: isub
      26: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      29: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence removePrefix(java.lang.CharSequence, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokevirtual #92                 // Method startsWith:(Ljava/lang/CharSequence;Z)Z
       6: ifne          13
       9: aload_0
      10: goto          27
      13: aload_0
      14: aload_1
      15: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      20: aload_0
      21: invokevirtual #20                 // Method length:()I
      24: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      27: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence removeProperSuffix(java.lang.CharSequence, boolean);
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method length:()I
       4: aload_1
       5: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      10: if_icmple     22
      13: aload_0
      14: aload_1
      15: iload_2
      16: invokevirtual #91                 // Method endsWith:(Ljava/lang/CharSequence;Z)Z
      19: ifne          26
      22: aload_0
      23: goto          42
      26: aload_0
      27: iconst_0
      28: aload_0
      29: invokevirtual #20                 // Method length:()I
      32: aload_1
      33: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      38: isub
      39: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      42: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence removeProperPrefix(java.lang.CharSequence, boolean);
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method length:()I
       4: aload_1
       5: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      10: if_icmple     22
      13: aload_0
      14: aload_1
      15: iload_2
      16: invokevirtual #92                 // Method startsWith:(Ljava/lang/CharSequence;Z)Z
      19: ifne          26
      22: aload_0
      23: goto          40
      26: aload_0
      27: aload_1
      28: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      33: aload_0
      34: invokevirtual #20                 // Method length:()I
      37: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      40: areturn

  public com.vladsch.flexmark.util.sequence.MappedSequence toLowerCase();
    Code:
       0: aload_0
       1: getstatic     #93                 // Field com/vladsch/flexmark/util/mappers/LowerCaseMapper.INSTANCE:Lcom/vladsch/flexmark/util/mappers/LowerCaseMapper;
       4: invokevirtual #94                 // Method toMapped:(Lcom/vladsch/flexmark/util/mappers/CharMapper;)Lcom/vladsch/flexmark/util/sequence/MappedSequence;
       7: areturn

  public com.vladsch.flexmark.util.sequence.MappedSequence toUpperCase();
    Code:
       0: aload_0
       1: getstatic     #95                 // Field com/vladsch/flexmark/util/mappers/UpperCaseMapper.INSTANCE:Lcom/vladsch/flexmark/util/mappers/UpperCaseMapper;
       4: invokevirtual #94                 // Method toMapped:(Lcom/vladsch/flexmark/util/mappers/CharMapper;)Lcom/vladsch/flexmark/util/sequence/MappedSequence;
       7: areturn

  public com.vladsch.flexmark.util.sequence.MappedSequence toLowerCase(java.util.Locale);
    Code:
       0: aload_0
       1: new           #96                 // class com/vladsch/flexmark/util/mappers/LowerCaseMapper
       4: dup
       5: aload_1
       6: invokespecial #97                 // Method com/vladsch/flexmark/util/mappers/LowerCaseMapper."<init>":(Ljava/util/Locale;)V
       9: invokevirtual #94                 // Method toMapped:(Lcom/vladsch/flexmark/util/mappers/CharMapper;)Lcom/vladsch/flexmark/util/sequence/MappedSequence;
      12: areturn

  public com.vladsch.flexmark.util.sequence.MappedSequence toUpperCase(java.util.Locale);
    Code:
       0: aload_0
       1: new           #98                 // class com/vladsch/flexmark/util/mappers/UpperCaseMapper
       4: dup
       5: aload_1
       6: invokespecial #99                 // Method com/vladsch/flexmark/util/mappers/UpperCaseMapper."<init>":(Ljava/util/Locale;)V
       9: invokevirtual #94                 // Method toMapped:(Lcom/vladsch/flexmark/util/mappers/CharMapper;)Lcom/vladsch/flexmark/util/sequence/MappedSequence;
      12: areturn

  public final com.vladsch.flexmark.util.sequence.MappedSequence toMapped(com.vladsch.flexmark.util.mappers.CharMapper);
    Code:
       0: aload_1
       1: aload_0
       2: invokestatic  #100                // Method com/vladsch/flexmark/util/sequence/MappedSequence.of:(Lcom/vladsch/flexmark/util/mappers/CharMapper;Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/sequence/MappedSequence;
       5: areturn

  public boolean matches(java.lang.CharSequence);
    Code:
       0: aload_1
       1: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
       6: aload_0
       7: invokevirtual #20                 // Method length:()I
      10: if_icmpne     27
      13: aload_0
      14: aload_1
      15: iconst_0
      16: iconst_0
      17: invokevirtual #88                 // Method matchChars:(Ljava/lang/CharSequence;IZ)Z
      20: ifeq          27
      23: iconst_1
      24: goto          28
      27: iconst_0
      28: ireturn

  public boolean matchesIgnoreCase(java.lang.CharSequence);
    Code:
       0: aload_1
       1: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
       6: aload_0
       7: invokevirtual #20                 // Method length:()I
      10: if_icmpne     27
      13: aload_0
      14: aload_1
      15: iconst_0
      16: iconst_1
      17: invokevirtual #88                 // Method matchChars:(Ljava/lang/CharSequence;IZ)Z
      20: ifeq          27
      23: iconst_1
      24: goto          28
      27: iconst_0
      28: ireturn

  public boolean matches(java.lang.CharSequence, boolean);
    Code:
       0: aload_1
       1: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
       6: aload_0
       7: invokevirtual #20                 // Method length:()I
      10: if_icmpne     27
      13: aload_0
      14: aload_1
      15: iconst_0
      16: iload_2
      17: invokevirtual #88                 // Method matchChars:(Ljava/lang/CharSequence;IZ)Z
      20: ifeq          27
      23: iconst_1
      24: goto          28
      27: iconst_0
      28: ireturn

  public boolean matchChars(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: iconst_0
       4: invokevirtual #88                 // Method matchChars:(Ljava/lang/CharSequence;IZ)Z
       7: ireturn

  public boolean matchCharsIgnoreCase(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: iconst_1
       4: invokevirtual #88                 // Method matchChars:(Ljava/lang/CharSequence;IZ)Z
       7: ireturn

  public boolean matchChars(java.lang.CharSequence, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: iload_2
       4: invokevirtual #88                 // Method matchChars:(Ljava/lang/CharSequence;IZ)Z
       7: ireturn

  public boolean matchChars(java.lang.CharSequence, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iconst_0
       4: invokevirtual #88                 // Method matchChars:(Ljava/lang/CharSequence;IZ)Z
       7: ireturn

  public boolean matchCharsIgnoreCase(java.lang.CharSequence, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iconst_0
       4: invokevirtual #88                 // Method matchChars:(Ljava/lang/CharSequence;IZ)Z
       7: ireturn

  public boolean matchChars(java.lang.CharSequence, int, boolean);
    Code:
       0: aload_1
       1: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
       6: istore        4
       8: iload         4
      10: aload_0
      11: invokevirtual #20                 // Method length:()I
      14: iload_2
      15: isub
      16: if_icmple     21
      19: iconst_0
      20: ireturn
      21: iload_3
      22: ifeq          113
      25: iconst_0
      26: istore        5
      28: iload         5
      30: iload         4
      32: if_icmpge     110
      35: aload_1
      36: iload         5
      38: invokeinterface #26,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      43: istore        6
      45: aload_0
      46: iload         5
      48: iload_2
      49: iadd
      50: invokevirtual #22                 // Method charAt:(I)C
      53: istore        7
      55: iload         6
      57: iload         7
      59: if_icmpeq     104
      62: iload         6
      64: invokestatic  #101                // Method java/lang/Character.toUpperCase:(C)C
      67: istore        8
      69: iload         7
      71: invokestatic  #101                // Method java/lang/Character.toUpperCase:(C)C
      74: istore        9
      76: iload         8
      78: iload         9
      80: if_icmpne     86
      83: goto          104
      86: iload         8
      88: invokestatic  #102                // Method java/lang/Character.toLowerCase:(C)C
      91: iload         9
      93: invokestatic  #102                // Method java/lang/Character.toLowerCase:(C)C
      96: if_icmpne     102
      99: goto          104
     102: iconst_0
     103: ireturn
     104: iinc          5, 1
     107: goto          28
     110: goto          150
     113: iconst_0
     114: istore        5
     116: iload         5
     118: iload         4
     120: if_icmpge     150
     123: aload_1
     124: iload         5
     126: invokeinterface #26,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
     131: aload_0
     132: iload         5
     134: iload_2
     135: iadd
     136: invokevirtual #22                 // Method charAt:(I)C
     139: if_icmpeq     144
     142: iconst_0
     143: ireturn
     144: iinc          5, 1
     147: goto          116
     150: iconst_1
     151: ireturn

  public boolean matchCharsReversed(java.lang.CharSequence, int);
    Code:
       0: iload_2
       1: iconst_1
       2: iadd
       3: aload_1
       4: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
       9: if_icmplt     35
      12: aload_0
      13: aload_1
      14: iload_2
      15: iconst_1
      16: iadd
      17: aload_1
      18: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      23: isub
      24: iconst_0
      25: invokevirtual #88                 // Method matchChars:(Ljava/lang/CharSequence;IZ)Z
      28: ifeq          35
      31: iconst_1
      32: goto          36
      35: iconst_0
      36: ireturn

  public boolean matchCharsReversedIgnoreCase(java.lang.CharSequence, int);
    Code:
       0: iload_2
       1: iconst_1
       2: iadd
       3: aload_1
       4: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
       9: if_icmplt     35
      12: aload_0
      13: aload_1
      14: iload_2
      15: iconst_1
      16: iadd
      17: aload_1
      18: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      23: isub
      24: iconst_1
      25: invokevirtual #88                 // Method matchChars:(Ljava/lang/CharSequence;IZ)Z
      28: ifeq          35
      31: iconst_1
      32: goto          36
      35: iconst_0
      36: ireturn

  public boolean matchCharsReversed(java.lang.CharSequence, int, boolean);
    Code:
       0: iload_2
       1: iconst_1
       2: iadd
       3: aload_1
       4: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
       9: if_icmplt     35
      12: aload_0
      13: aload_1
      14: iload_2
      15: iconst_1
      16: iadd
      17: aload_1
      18: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      23: isub
      24: iload_3
      25: invokevirtual #88                 // Method matchChars:(Ljava/lang/CharSequence;IZ)Z
      28: ifeq          35
      31: iconst_1
      32: goto          36
      35: iconst_0
      36: ireturn

  public com.vladsch.flexmark.util.sequence.BasedSequence subSequence(com.vladsch.flexmark.util.sequence.Range);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #103                // Method com/vladsch/flexmark/util/sequence/Range.getStart:()I
       5: aload_1
       6: invokevirtual #104                // Method com/vladsch/flexmark/util/sequence/Range.getEnd:()I
       9: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      12: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence subSequence(int);
    Code:
       0: aload_0
       1: iload_1
       2: aload_0
       3: invokevirtual #20                 // Method length:()I
       6: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       9: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence trimTailBlankLines();
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method length:()I
       4: istore_1
       5: iload_1
       6: istore_2
       7: iload_1
       8: istore_3
       9: iload_3
      10: iinc          3, -1
      13: ifle          62
      16: aload_0
      17: iload_3
      18: invokevirtual #22                 // Method charAt:(I)C
      21: istore        4
      23: iload         4
      25: bipush        10
      27: if_icmpne     37
      30: iload_3
      31: iconst_1
      32: iadd
      33: istore_2
      34: goto          59
      37: iload_2
      38: iload_1
      39: if_icmpeq     62
      42: iload         4
      44: bipush        32
      46: if_icmpeq     59
      49: iload         4
      51: bipush        9
      53: if_icmpeq     59
      56: goto          62
      59: goto          9
      62: iload_3
      63: ifge          73
      66: aload_0
      67: iconst_0
      68: iconst_0
      69: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      72: areturn
      73: iload_2
      74: iload_1
      75: if_icmpeq     85
      78: aload_0
      79: iconst_0
      80: iload_2
      81: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      84: areturn
      85: aload_0
      86: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence trimLeadBlankLines();
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method length:()I
       4: istore_1
       5: iconst_0
       6: istore_2
       7: iconst_0
       8: istore_3
       9: iload_3
      10: iload_1
      11: if_icmpge     58
      14: aload_0
      15: iload_3
      16: invokevirtual #22                 // Method charAt:(I)C
      19: istore        4
      21: iload         4
      23: bipush        10
      25: if_icmpne     35
      28: iload_3
      29: iconst_1
      30: iadd
      31: istore_2
      32: goto          52
      35: iload         4
      37: bipush        32
      39: if_icmpeq     52
      42: iload         4
      44: bipush        9
      46: if_icmpeq     52
      49: goto          58
      52: iinc          3, 1
      55: goto          9
      58: iload_3
      59: iload_1
      60: if_icmpne     70
      63: aload_0
      64: iload_1
      65: iload_1
      66: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      69: areturn
      70: iload_2
      71: ifeq          80
      74: aload_0
      75: iload_2
      76: invokevirtual #77                 // Method subSequence:(I)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      79: areturn
      80: aload_0
      81: areturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method length:()I
       4: istore_1
       5: new           #9                  // class java/lang/StringBuilder
       8: dup
       9: iload_1
      10: invokespecial #105                // Method java/lang/StringBuilder."<init>":(I)V
      13: astore_2
      14: iconst_0
      15: istore_3
      16: iload_3
      17: iload_1
      18: if_icmpge     37
      21: aload_2
      22: aload_0
      23: iload_3
      24: invokevirtual #22                 // Method charAt:(I)C
      27: invokevirtual #106                // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      30: pop
      31: iinc          3, 1
      34: goto          16
      37: aload_2
      38: invokevirtual #17                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      41: areturn

  public java.lang.String unescape();
    Code:
       0: aload_0
       1: invokestatic  #107                // Method com/vladsch/flexmark/util/html/Escaping.unescapeString:(Ljava/lang/CharSequence;)Ljava/lang/String;
       4: areturn

  public java.lang.String unescapeNoEntities();
    Code:
       0: aload_0
       1: iconst_0
       2: invokestatic  #108                // Method com/vladsch/flexmark/util/html/Escaping.unescapeString:(Ljava/lang/CharSequence;Z)Ljava/lang/String;
       5: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence unescape(com.vladsch.flexmark.util.sequence.ReplacedTextMapper);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #109                // Method com/vladsch/flexmark/util/html/Escaping.unescape:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;Lcom/vladsch/flexmark/util/sequence/ReplacedTextMapper;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       5: areturn

  public java.lang.String normalizeEOL();
    Code:
       0: aload_0
       1: invokevirtual #110                // Method toString:()Ljava/lang/String;
       4: invokestatic  #111                // Method com/vladsch/flexmark/util/html/Escaping.normalizeEOL:(Ljava/lang/CharSequence;)Ljava/lang/String;
       7: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence normalizeEOL(com.vladsch.flexmark.util.sequence.ReplacedTextMapper);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #112                // Method com/vladsch/flexmark/util/html/Escaping.normalizeEOL:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;Lcom/vladsch/flexmark/util/sequence/ReplacedTextMapper;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       5: areturn

  public java.lang.String normalizeEndWithEOL();
    Code:
       0: aload_0
       1: invokevirtual #110                // Method toString:()Ljava/lang/String;
       4: invokestatic  #113                // Method com/vladsch/flexmark/util/html/Escaping.normalizeEndWithEOL:(Ljava/lang/CharSequence;)Ljava/lang/String;
       7: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence normalizeEndWithEOL(com.vladsch.flexmark.util.sequence.ReplacedTextMapper);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #114                // Method com/vladsch/flexmark/util/html/Escaping.normalizeEndWithEOL:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;Lcom/vladsch/flexmark/util/sequence/ReplacedTextMapper;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       5: areturn

  public java.lang.String toVisibleWhitespaceString();
    Code:
       0: new           #9                  // class java/lang/StringBuilder
       3: dup
       4: invokespecial #10                 // Method java/lang/StringBuilder."<init>":()V
       7: astore_1
       8: aload_0
       9: invokevirtual #20                 // Method length:()I
      12: istore_2
      13: iconst_0
      14: istore_3
      15: iload_3
      16: iload_2
      17: if_icmpge     73
      20: aload_0
      21: iload_3
      22: invokevirtual #22                 // Method charAt:(I)C
      25: istore        4
      27: getstatic     #3                  // Field visibleSpacesMap:Ljava/util/Map;
      30: iload         4
      32: invokestatic  #4                  // Method java/lang/Character.valueOf:(C)Ljava/lang/Character;
      35: invokeinterface #115,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      40: checkcast     #116                // class java/lang/String
      43: astore        5
      45: aload         5
      47: ifnull        60
      50: aload_1
      51: aload         5
      53: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      56: pop
      57: goto          67
      60: aload_1
      61: iload         4
      63: invokevirtual #106                // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      66: pop
      67: iinc          3, 1
      70: goto          15
      73: aload_1
      74: invokevirtual #17                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      77: areturn

  public boolean isContinuedBy(com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_1
       1: invokeinterface #81,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
       6: ifle          46
       9: aload_0
      10: invokevirtual #20                 // Method length:()I
      13: ifle          46
      16: aload_1
      17: invokeinterface #117,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getBase:()Ljava/lang/Object;
      22: aload_0
      23: invokevirtual #118                // Method getBase:()Ljava/lang/Object;
      26: if_acmpne     46
      29: aload_1
      30: invokeinterface #119,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
      35: aload_0
      36: invokevirtual #7                  // Method getEndOffset:()I
      39: if_icmpne     46
      42: iconst_1
      43: goto          47
      46: iconst_0
      47: ireturn

  public boolean isContinuationOf(com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_1
       1: invokeinterface #81,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
       6: ifle          46
       9: aload_0
      10: invokevirtual #20                 // Method length:()I
      13: ifle          46
      16: aload_1
      17: invokeinterface #117,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getBase:()Ljava/lang/Object;
      22: aload_0
      23: invokevirtual #118                // Method getBase:()Ljava/lang/Object;
      26: if_acmpne     46
      29: aload_1
      30: invokeinterface #120,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
      35: aload_0
      36: invokevirtual #6                  // Method getStartOffset:()I
      39: if_icmpne     46
      42: iconst_1
      43: goto          47
      46: iconst_0
      47: ireturn

  public com.vladsch.flexmark.util.sequence.BasedSequence spliceAtEnd(com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: getstatic     #121                // Field $assertionsDisabled:Z
       3: ifne          89
       6: aload_0
       7: aload_1
       8: invokevirtual #122                // Method isContinuedBy:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)Z
      11: ifne          89
      14: new           #123                // class java/lang/AssertionError
      17: dup
      18: new           #9                  // class java/lang/StringBuilder
      21: dup
      22: invokespecial #10                 // Method java/lang/StringBuilder."<init>":()V
      25: ldc           #124                // String sequence[
      27: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: aload_0
      31: invokevirtual #6                  // Method getStartOffset:()I
      34: invokevirtual #13                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      37: ldc           #14                 // String ,
      39: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      42: aload_0
      43: invokevirtual #7                  // Method getEndOffset:()I
      46: invokevirtual #13                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      49: ldc           #125                // String ] is not continued by other[
      51: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      54: aload_1
      55: invokeinterface #119,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
      60: invokevirtual #13                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      63: ldc           #14                 // String ,
      65: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      68: aload_1
      69: invokeinterface #120,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
      74: invokevirtual #13                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      77: ldc           #16                 // String ]
      79: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      82: invokevirtual #17                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      85: invokespecial #126                // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
      88: athrow
      89: aload_0
      90: aload_0
      91: invokevirtual #6                  // Method getStartOffset:()I
      94: aload_1
      95: invokeinterface #120,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
     100: invokevirtual #127                // Method baseSubSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     103: areturn

  public boolean containsAllOf(com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: invokevirtual #118                // Method getBase:()Ljava/lang/Object;
       4: aload_1
       5: invokeinterface #117,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getBase:()Ljava/lang/Object;
      10: if_acmpne     43
      13: aload_1
      14: invokeinterface #119,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
      19: aload_0
      20: invokevirtual #6                  // Method getStartOffset:()I
      23: if_icmplt     43
      26: aload_1
      27: invokeinterface #120,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
      32: aload_0
      33: invokevirtual #7                  // Method getEndOffset:()I
      36: if_icmpgt     43
      39: iconst_1
      40: goto          44
      43: iconst_0
      44: ireturn

  public boolean containsSomeOf(com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: invokevirtual #118                // Method getBase:()Ljava/lang/Object;
       4: aload_1
       5: invokeinterface #117,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getBase:()Ljava/lang/Object;
      10: if_acmpne     43
      13: aload_0
      14: invokevirtual #6                  // Method getStartOffset:()I
      17: aload_1
      18: invokeinterface #120,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
      23: if_icmpge     43
      26: aload_0
      27: invokevirtual #7                  // Method getEndOffset:()I
      30: aload_1
      31: invokeinterface #119,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
      36: if_icmple     43
      39: iconst_1
      40: goto          44
      43: iconst_0
      44: ireturn

  public com.vladsch.flexmark.util.sequence.BasedSequence intersect(com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: invokevirtual #118                // Method getBase:()Ljava/lang/Object;
       4: aload_1
       5: invokeinterface #117,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getBase:()Ljava/lang/Object;
      10: if_acmpeq     17
      13: getstatic     #128                // Field com/vladsch/flexmark/util/sequence/SubSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      16: areturn
      17: aload_1
      18: invokeinterface #120,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
      23: aload_0
      24: invokevirtual #6                  // Method getStartOffset:()I
      27: if_icmpgt     37
      30: aload_0
      31: iconst_0
      32: iconst_0
      33: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      36: areturn
      37: aload_1
      38: invokeinterface #119,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
      43: aload_0
      44: invokevirtual #7                  // Method getEndOffset:()I
      47: if_icmplt     63
      50: aload_0
      51: aload_0
      52: invokevirtual #20                 // Method length:()I
      55: aload_0
      56: invokevirtual #20                 // Method length:()I
      59: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      62: areturn
      63: aload_0
      64: aload_0
      65: invokevirtual #6                  // Method getStartOffset:()I
      68: iconst_1
      69: newarray       int
      71: dup
      72: iconst_0
      73: aload_1
      74: invokeinterface #119,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
      79: iastore
      80: invokestatic  #129                // Method com/vladsch/flexmark/util/Utils.max:(I[I)I
      83: aload_0
      84: invokevirtual #7                  // Method getEndOffset:()I
      87: iconst_1
      88: newarray       int
      90: dup
      91: iconst_0
      92: aload_1
      93: invokeinterface #120,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
      98: iastore
      99: invokestatic  #130                // Method com/vladsch/flexmark/util/Utils.min:(I[I)I
     102: invokevirtual #127                // Method baseSubSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     105: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence prefixOf(com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: invokevirtual #118                // Method getBase:()Ljava/lang/Object;
       4: aload_1
       5: invokeinterface #117,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getBase:()Ljava/lang/Object;
      10: if_acmpeq     17
      13: getstatic     #128                // Field com/vladsch/flexmark/util/sequence/SubSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      16: areturn
      17: aload_1
      18: invokeinterface #119,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
      23: aload_0
      24: invokevirtual #6                  // Method getStartOffset:()I
      27: if_icmpgt     37
      30: aload_0
      31: iconst_0
      32: iconst_0
      33: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      36: areturn
      37: aload_1
      38: invokeinterface #119,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
      43: aload_0
      44: invokevirtual #7                  // Method getEndOffset:()I
      47: if_icmplt     52
      50: aload_0
      51: areturn
      52: aload_0
      53: aload_0
      54: invokevirtual #6                  // Method getStartOffset:()I
      57: aload_1
      58: invokeinterface #119,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
      63: invokevirtual #127                // Method baseSubSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      66: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence suffixOf(com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: invokevirtual #118                // Method getBase:()Ljava/lang/Object;
       4: aload_1
       5: invokeinterface #117,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getBase:()Ljava/lang/Object;
      10: if_acmpeq     17
      13: getstatic     #128                // Field com/vladsch/flexmark/util/sequence/SubSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      16: areturn
      17: aload_1
      18: invokeinterface #120,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
      23: aload_0
      24: invokevirtual #7                  // Method getEndOffset:()I
      27: if_icmplt     43
      30: aload_0
      31: aload_0
      32: invokevirtual #20                 // Method length:()I
      35: aload_0
      36: invokevirtual #20                 // Method length:()I
      39: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      42: areturn
      43: aload_1
      44: invokeinterface #120,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
      49: aload_0
      50: invokevirtual #6                  // Method getStartOffset:()I
      53: if_icmpgt     58
      56: aload_0
      57: areturn
      58: aload_0
      59: aload_1
      60: invokeinterface #120,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
      65: aload_0
      66: invokevirtual #7                  // Method getEndOffset:()I
      69: invokevirtual #127                // Method baseSubSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      72: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence[] split(char);
    Code:
       0: aload_0
       1: iload_1
       2: iconst_0
       3: invokevirtual #131                // Method split:(CI)[Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       6: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence[] split(char, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: iconst_0
       4: invokevirtual #132                // Method split:(CII)[Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       7: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence[] split(char, int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: iload_3
       4: ldc           #78                 // String  \t\r\n
       6: invokevirtual #133                // Method split:(CIILjava/lang/String;)[Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       9: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence[] split(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: invokevirtual #134                // Method split:(Ljava/lang/CharSequence;I)[Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       6: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence[] split(java.lang.CharSequence, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iconst_0
       4: invokevirtual #135                // Method split:(Ljava/lang/CharSequence;II)[Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       7: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence[] split(java.lang.CharSequence, int, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: ldc           #78                 // String  \t\r\n
       6: invokevirtual #136                // Method split:(Ljava/lang/CharSequence;IILjava/lang/String;)[Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       9: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence[] split(char, int, int, java.lang.String);
    Code:
       0: aload         4
       2: ifnonnull     9
       5: ldc           #78                 // String  \t\r\n
       7: astore        4
       9: iload_2
      10: iconst_1
      11: if_icmpge     17
      14: ldc           #138                // int 2147483647
      16: istore_2
      17: iload_3
      18: bipush        8
      20: iand
      21: ifeq          28
      24: iconst_1
      25: goto          29
      28: iconst_0
      29: istore        5
      31: iload         5
      33: ifne          46
      36: iload_3
      37: iconst_1
      38: iand
      39: ifeq          46
      42: iconst_1
      43: goto          47
      46: iconst_0
      47: istore        6
      49: iload_3
      50: iconst_2
      51: iand
      52: ifeq          59
      55: iconst_1
      56: goto          60
      59: iconst_0
      60: istore        7
      62: iload_3
      63: iconst_4
      64: iand
      65: ifeq          72
      68: iconst_1
      69: goto          73
      72: iconst_0
      73: istore        8
      75: new           #139                // class java/util/ArrayList
      78: dup
      79: invokespecial #140                // Method java/util/ArrayList."<init>":()V
      82: astore        9
      84: iconst_0
      85: istore        10
      87: aload_0
      88: invokevirtual #20                 // Method length:()I
      91: istore        11
      93: iload_2
      94: iconst_1
      95: if_icmple     236
      98: iload         10
     100: iload         11
     102: if_icmpge     236
     105: aload_0
     106: iload_1
     107: iload         10
     109: invokevirtual #27                 // Method indexOf:(CI)I
     112: istore        12
     114: iload         12
     116: ifge          122
     119: goto          236
     122: iload         10
     124: iload         12
     126: if_icmplt     134
     129: iload         8
     131: ifne          227
     134: aload_0
     135: iload         10
     137: iload         12
     139: iload         6
     141: iadd
     142: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     145: astore        13
     147: iload         7
     149: ifeq          163
     152: aload         13
     154: aload         4
     156: invokeinterface #141,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.trim:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     161: astore        13
     163: aload         13
     165: invokeinterface #142,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.isEmpty:()Z
     170: ifeq          178
     173: iload         8
     175: ifne          227
     178: aload         9
     180: aload         13
     182: invokevirtual #143                // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
     185: pop
     186: iload         5
     188: ifeq          207
     191: aload         9
     193: aload_0
     194: iload         12
     196: iload         12
     198: iconst_1
     199: iadd
     200: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     203: invokevirtual #143                // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
     206: pop
     207: aload         9
     209: invokevirtual #144                // Method java/util/ArrayList.size:()I
     212: iload_2
     213: iconst_1
     214: isub
     215: if_icmplt     227
     218: iload         12
     220: iconst_1
     221: iadd
     222: istore        10
     224: goto          236
     227: iload         12
     229: iconst_1
     230: iadd
     231: istore        10
     233: goto          98
     236: iload         10
     238: iload         11
     240: if_icmpge     292
     243: aload_0
     244: iload         10
     246: iload         11
     248: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     251: astore        12
     253: iload         7
     255: ifeq          269
     258: aload         12
     260: aload         4
     262: invokeinterface #141,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.trim:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     267: astore        12
     269: aload         12
     271: invokeinterface #142,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.isEmpty:()Z
     276: ifeq          284
     279: iload         8
     281: ifne          292
     284: aload         9
     286: aload         12
     288: invokevirtual #143                // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
     291: pop
     292: aload         9
     294: aload         9
     296: invokevirtual #144                // Method java/util/ArrayList.size:()I
     299: anewarray     #58                 // class com/vladsch/flexmark/util/sequence/BasedSequence
     302: invokevirtual #145                // Method java/util/ArrayList.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
     305: checkcast     #146                // class "[Lcom/vladsch/flexmark/util/sequence/BasedSequence;"
     308: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence[] split(java.lang.CharSequence, int, int, java.lang.String);
    Code:
       0: aload         4
       2: ifnonnull     9
       5: ldc           #78                 // String  \t\r\n
       7: astore        4
       9: iload_2
      10: iconst_1
      11: if_icmpge     17
      14: ldc           #138                // int 2147483647
      16: istore_2
      17: iload_3
      18: bipush        8
      20: iand
      21: ifeq          28
      24: iconst_1
      25: goto          29
      28: iconst_0
      29: istore        5
      31: iload         5
      33: ifne          51
      36: iload_3
      37: iconst_1
      38: iand
      39: ifeq          51
      42: aload_1
      43: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      48: goto          52
      51: iconst_0
      52: istore        6
      54: iload_3
      55: iconst_2
      56: iand
      57: ifeq          64
      60: iconst_1
      61: goto          65
      64: iconst_0
      65: istore        7
      67: iload_3
      68: iconst_4
      69: iand
      70: ifeq          77
      73: iconst_1
      74: goto          78
      77: iconst_0
      78: istore        8
      80: new           #139                // class java/util/ArrayList
      83: dup
      84: invokespecial #140                // Method java/util/ArrayList."<init>":()V
      87: astore        9
      89: iconst_0
      90: istore        10
      92: aload_0
      93: invokevirtual #20                 // Method length:()I
      96: istore        11
      98: iload_2
      99: iconst_1
     100: if_icmple     246
     103: iload         10
     105: iload         11
     107: if_icmpge     246
     110: aload_0
     111: aload_1
     112: iload         10
     114: invokevirtual #53                 // Method indexOf:(Ljava/lang/CharSequence;I)I
     117: istore        12
     119: iload         12
     121: ifge          127
     124: goto          246
     127: iload         10
     129: iload         12
     131: if_icmplt     139
     134: iload         8
     136: ifne          237
     139: aload_0
     140: iload         10
     142: iload         12
     144: iload         6
     146: iadd
     147: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     150: astore        13
     152: iload         7
     154: ifeq          168
     157: aload         13
     159: aload         4
     161: invokeinterface #141,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.trim:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     166: astore        13
     168: aload         13
     170: invokeinterface #142,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.isEmpty:()Z
     175: ifeq          183
     178: iload         8
     180: ifne          237
     183: aload         9
     185: aload         13
     187: invokevirtual #143                // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
     190: pop
     191: iload         5
     193: ifeq          217
     196: aload         9
     198: aload_0
     199: iload         12
     201: iload         12
     203: aload_1
     204: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
     209: iadd
     210: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     213: invokevirtual #143                // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
     216: pop
     217: aload         9
     219: invokevirtual #144                // Method java/util/ArrayList.size:()I
     222: iload_2
     223: iconst_1
     224: isub
     225: if_icmplt     237
     228: iload         12
     230: iconst_1
     231: iadd
     232: istore        10
     234: goto          246
     237: iload         12
     239: iconst_1
     240: iadd
     241: istore        10
     243: goto          103
     246: iload         10
     248: iload         11
     250: if_icmpge     302
     253: aload_0
     254: iload         10
     256: iload         11
     258: invokevirtual #21                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     261: astore        12
     263: iload         7
     265: ifeq          279
     268: aload         12
     270: aload         4
     272: invokeinterface #141,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.trim:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     277: astore        12
     279: aload         12
     281: invokeinterface #142,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.isEmpty:()Z
     286: ifeq          294
     289: iload         8
     291: ifne          302
     294: aload         9
     296: aload         12
     298: invokevirtual #143                // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
     301: pop
     302: aload         9
     304: aload         9
     306: invokevirtual #144                // Method java/util/ArrayList.size:()I
     309: anewarray     #58                 // class com/vladsch/flexmark/util/sequence/BasedSequence
     312: invokevirtual #145                // Method java/util/ArrayList.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
     315: checkcast     #146                // class "[Lcom/vladsch/flexmark/util/sequence/BasedSequence;"
     318: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence appendTo(java.lang.StringBuilder);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #147                // Method appendTo:(Ljava/lang/StringBuilder;II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      10: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence appendTo(java.lang.StringBuilder, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: aload_0
       4: invokevirtual #20                 // Method length:()I
       7: invokevirtual #147                // Method appendTo:(Ljava/lang/StringBuilder;II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      10: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence appendTo(java.lang.StringBuilder, int, int);
    Code:
       0: aload_1
       1: aload_0
       2: iload_2
       3: iload_3
       4: invokevirtual #148                // Method java/lang/StringBuilder.append:(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;
       7: pop
       8: aload_0
       9: areturn

  public static int[] expandTo(int[], int, int);
    Code:
       0: iload_1
       1: iload_2
       2: iand
       3: istore_3
       4: iload_1
       5: iload_3
       6: ifeq          13
       9: iload_2
      10: goto          14
      13: iconst_0
      14: iadd
      15: istore        4
      17: aload_0
      18: arraylength
      19: iload_1
      20: if_icmpge     41
      23: iload_1
      24: newarray       int
      26: astore        5
      28: aload_0
      29: iconst_0
      30: aload         5
      32: iconst_0
      33: aload_0
      34: arraylength
      35: invokestatic  #149                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      38: aload         5
      40: areturn
      41: aload_0
      42: areturn

  public static int[] truncateTo(int[], int);
    Code:
       0: aload_0
       1: arraylength
       2: iload_1
       3: if_icmple     20
       6: iload_1
       7: newarray       int
       9: astore_2
      10: aload_0
      11: iconst_0
      12: aload_2
      13: iconst_0
      14: iload_1
      15: invokestatic  #149                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      18: aload_2
      19: areturn
      20: aload_0
      21: areturn

  public int[] indexOfAll(java.lang.CharSequence);
    Code:
       0: aload_1
       1: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
       6: istore_2
       7: iload_2
       8: ifne          15
      11: getstatic     #150                // Field EMPTY_INDICES:[I
      14: areturn
      15: aload_0
      16: aload_1
      17: invokevirtual #151                // Method indexOf:(Ljava/lang/CharSequence;)I
      20: istore_3
      21: iload_3
      22: iconst_m1
      23: if_icmpne     30
      26: getstatic     #150                // Field EMPTY_INDICES:[I
      29: areturn
      30: iconst_0
      31: istore        4
      33: bipush        32
      35: newarray       int
      37: astore        5
      39: aload         5
      41: iload         4
      43: iinc          4, 1
      46: iload_3
      47: iastore
      48: aload_0
      49: aload_1
      50: iload_3
      51: iload_2
      52: iadd
      53: invokevirtual #53                 // Method indexOf:(Ljava/lang/CharSequence;I)I
      56: istore_3
      57: iload_3
      58: iconst_m1
      59: if_icmpne     65
      62: goto          96
      65: aload         5
      67: arraylength
      68: iload         4
      70: if_icmpge     84
      73: aload         5
      75: iload         4
      77: bipush        32
      79: invokestatic  #152                // Method expandTo:([III)[I
      82: astore        5
      84: aload         5
      86: iload         4
      88: iinc          4, 1
      91: iload_3
      92: iastore
      93: goto          48
      96: aload         5
      98: iload         4
     100: invokestatic  #153                // Method truncateTo:([II)[I
     103: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence replace(java.lang.CharSequence, java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #154                // Method indexOfAll:(Ljava/lang/CharSequence;)[I
       5: astore_3
       6: aload_3
       7: arraylength
       8: ifne          13
      11: aload_0
      12: areturn
      13: aload_3
      14: arraylength
      15: istore        4
      17: new           #9                  // class java/lang/StringBuilder
      20: dup
      21: aload_0
      22: invokevirtual #20                 // Method length:()I
      25: aload_2
      26: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      31: aload_1
      32: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      37: isub
      38: iload         4
      40: imul
      41: iadd
      42: invokespecial #105                // Method java/lang/StringBuilder."<init>":(I)V
      45: astore        5
      47: aload_2
      48: invokestatic  #155                // Method com/vladsch/flexmark/util/sequence/SubSequence.of:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      51: astore        6
      53: iconst_0
      54: istore        7
      56: iconst_0
      57: istore        8
      59: iload         7
      61: iload         4
      63: if_icmpge     117
      66: aload_3
      67: iload         7
      69: iinc          7, 1
      72: iaload
      73: istore        9
      75: iload         8
      77: iload         9
      79: if_icmpge     93
      82: aload_0
      83: aload         5
      85: iload         8
      87: iload         9
      89: invokevirtual #147                // Method appendTo:(Ljava/lang/StringBuilder;II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      92: pop
      93: iload         9
      95: aload_1
      96: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
     101: iadd
     102: istore        8
     104: aload         6
     106: aload         5
     108: invokeinterface #156,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.appendTo:(Ljava/lang/StringBuilder;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     113: pop
     114: goto          59
     117: iload         8
     119: aload_0
     120: invokevirtual #20                 // Method length:()I
     123: if_icmpge     139
     126: aload_0
     127: aload         5
     129: iload         8
     131: aload_0
     132: invokevirtual #20                 // Method length:()I
     135: invokevirtual #147                // Method appendTo:(Ljava/lang/StringBuilder;II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     138: pop
     139: aload         5
     141: invokestatic  #157                // Method com/vladsch/flexmark/util/sequence/CharSubSequence.of:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/sequence/CharSubSequence;
     144: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence append(java.lang.CharSequence...);
    Code:
       0: aload_1
       1: arraylength
       2: ifle          131
       5: iconst_0
       6: istore_2
       7: aload_1
       8: astore_3
       9: aload_3
      10: arraylength
      11: istore        4
      13: iconst_0
      14: istore        5
      16: iload         5
      18: iload         4
      20: if_icmpge     45
      23: aload_3
      24: iload         5
      26: aaload
      27: astore        6
      29: iload_2
      30: aload         6
      32: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      37: iadd
      38: istore_2
      39: iinc          5, 1
      42: goto          16
      45: new           #9                  // class java/lang/StringBuilder
      48: dup
      49: aload_0
      50: invokevirtual #20                 // Method length:()I
      53: iload_2
      54: iadd
      55: invokespecial #105                // Method java/lang/StringBuilder."<init>":(I)V
      58: astore_3
      59: aload_0
      60: aload_3
      61: invokevirtual #158                // Method appendTo:(Ljava/lang/StringBuilder;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      64: pop
      65: aload_1
      66: astore        4
      68: aload         4
      70: arraylength
      71: istore        5
      73: iconst_0
      74: istore        6
      76: iload         6
      78: iload         5
      80: if_icmpge     126
      83: aload         4
      85: iload         6
      87: aaload
      88: astore        7
      90: aload         7
      92: instanceof    #58                 // class com/vladsch/flexmark/util/sequence/BasedSequence
      95: ifeq          113
      98: aload         7
     100: checkcast     #58                 // class com/vladsch/flexmark/util/sequence/BasedSequence
     103: aload_3
     104: invokeinterface #156,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.appendTo:(Ljava/lang/StringBuilder;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     109: pop
     110: goto          120
     113: aload_3
     114: aload         7
     116: invokevirtual #159                // Method java/lang/StringBuilder.append:(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;
     119: pop
     120: iinc          6, 1
     123: goto          76
     126: aload_3
     127: invokestatic  #157                // Method com/vladsch/flexmark/util/sequence/CharSubSequence.of:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/sequence/CharSubSequence;
     130: areturn
     131: aload_0
     132: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpeq     45
       5: aload_1
       6: ifnull        49
       9: aload_1
      10: instanceof    #160                // class java/lang/CharSequence
      13: ifeq          49
      16: aload_1
      17: checkcast     #160                // class java/lang/CharSequence
      20: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      25: aload_0
      26: invokevirtual #20                 // Method length:()I
      29: if_icmpne     49
      32: aload_0
      33: aload_1
      34: checkcast     #160                // class java/lang/CharSequence
      37: iconst_0
      38: iconst_0
      39: invokevirtual #88                 // Method matchChars:(Ljava/lang/CharSequence;IZ)Z
      42: ifeq          49
      45: iconst_1
      46: goto          50
      49: iconst_0
      50: ireturn

  public boolean equalsIgnoreCase(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpeq     32
       5: aload_1
       6: ifnull        36
       9: aload_1
      10: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      15: aload_0
      16: invokevirtual #20                 // Method length:()I
      19: if_icmpne     36
      22: aload_0
      23: aload_1
      24: iconst_0
      25: iconst_1
      26: invokevirtual #88                 // Method matchChars:(Ljava/lang/CharSequence;IZ)Z
      29: ifeq          36
      32: iconst_1
      33: goto          37
      36: iconst_0
      37: ireturn

  public boolean equals(java.lang.Object, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpeq     45
       5: aload_1
       6: ifnull        49
       9: aload_1
      10: instanceof    #160                // class java/lang/CharSequence
      13: ifeq          49
      16: aload_1
      17: checkcast     #160                // class java/lang/CharSequence
      20: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      25: aload_0
      26: invokevirtual #20                 // Method length:()I
      29: if_icmpne     49
      32: aload_0
      33: aload_1
      34: checkcast     #160                // class java/lang/CharSequence
      37: iconst_0
      38: iload_2
      39: invokevirtual #88                 // Method matchChars:(Ljava/lang/CharSequence;IZ)Z
      42: ifeq          49
      45: iconst_1
      46: goto          50
      49: iconst_0
      50: ireturn

  public int compareTo(java.lang.CharSequence);
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method length:()I
       4: istore_2
       5: aload_1
       6: invokeinterface #25,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      11: istore_3
      12: iload_2
      13: iload_3
      14: if_icmpgt     21
      17: iload_2
      18: goto          22
      21: iload_3
      22: istore        4
      24: iconst_0
      25: istore        5
      27: iload         5
      29: iload         4
      31: if_icmpge     71
      34: aload_0
      35: iload         5
      37: invokevirtual #22                 // Method charAt:(I)C
      40: istore        6
      42: aload_1
      43: iload         5
      45: invokeinterface #26,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      50: istore        7
      52: iload         6
      54: iload         7
      56: if_icmpeq     65
      59: iload         6
      61: iload         7
      63: isub
      64: ireturn
      65: iinc          5, 1
      68: goto          27
      71: iload_2
      72: iload_3
      73: isub
      74: ireturn

  public static com.vladsch.flexmark.util.sequence.BasedSequence of(java.lang.CharSequence);
    Code:
       0: aload_0
       1: instanceof    #58                 // class com/vladsch/flexmark/util/sequence/BasedSequence
       4: ifeq          12
       7: aload_0
       8: checkcast     #58                 // class com/vladsch/flexmark/util/sequence/BasedSequence
      11: areturn
      12: aload_0
      13: instanceof    #116                // class java/lang/String
      16: ifeq          24
      19: aload_0
      20: invokestatic  #157                // Method com/vladsch/flexmark/util/sequence/CharSubSequence.of:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/sequence/CharSubSequence;
      23: areturn
      24: aload_0
      25: invokestatic  #155                // Method com/vladsch/flexmark/util/sequence/SubSequence.of:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      28: areturn

  public static com.vladsch.flexmark.util.sequence.BasedSequence of(java.lang.CharSequence, int);
    Code:
       0: aload_0
       1: instanceof    #58                 // class com/vladsch/flexmark/util/sequence/BasedSequence
       4: ifeq          18
       7: aload_0
       8: checkcast     #58                 // class com/vladsch/flexmark/util/sequence/BasedSequence
      11: iload_1
      12: invokeinterface #161,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(I)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      17: areturn
      18: aload_0
      19: instanceof    #116                // class java/lang/String
      22: ifeq          31
      25: aload_0
      26: iload_1
      27: invokestatic  #162                // Method com/vladsch/flexmark/util/sequence/CharSubSequence.of:(Ljava/lang/CharSequence;I)Lcom/vladsch/flexmark/util/sequence/CharSubSequence;
      30: areturn
      31: aload_0
      32: iload_1
      33: invokestatic  #163                // Method com/vladsch/flexmark/util/sequence/SubSequence.of:(Ljava/lang/CharSequence;I)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      36: areturn

  public static com.vladsch.flexmark.util.sequence.BasedSequence of(java.lang.CharSequence, int, int);
    Code:
       0: aload_0
       1: instanceof    #58                 // class com/vladsch/flexmark/util/sequence/BasedSequence
       4: ifeq          19
       7: aload_0
       8: checkcast     #58                 // class com/vladsch/flexmark/util/sequence/BasedSequence
      11: iload_1
      12: iload_2
      13: invokeinterface #82,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      18: areturn
      19: aload_0
      20: instanceof    #116                // class java/lang/String
      23: ifeq          33
      26: aload_0
      27: iload_1
      28: iload_2
      29: invokestatic  #164                // Method com/vladsch/flexmark/util/sequence/CharSubSequence.of:(Ljava/lang/CharSequence;II)Lcom/vladsch/flexmark/util/sequence/CharSubSequence;
      32: areturn
      33: aload_0
      34: iload_1
      35: iload_2
      36: invokestatic  #165                // Method com/vladsch/flexmark/util/sequence/SubSequence.of:(Ljava/lang/CharSequence;II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      39: areturn

  public int compareTo(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #160                // class java/lang/CharSequence
       5: invokevirtual #166                // Method compareTo:(Ljava/lang/CharSequence;)I
       8: ireturn

  static {};
    Code:
       0: ldc           #167                // class com/vladsch/flexmark/util/sequence/BasedSequenceImpl
       2: invokevirtual #168                // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #121                // Field $assertionsDisabled:Z
      16: iconst_0
      17: newarray       int
      19: putstatic     #150                // Field EMPTY_INDICES:[I
      22: new           #169                // class java/util/HashMap
      25: dup
      26: invokespecial #170                // Method java/util/HashMap."<init>":()V
      29: astore_0
      30: aload_0
      31: putstatic     #3                  // Field visibleSpacesMap:Ljava/util/Map;
      34: aload_0
      35: bipush        10
      37: invokestatic  #4                  // Method java/lang/Character.valueOf:(C)Ljava/lang/Character;
      40: ldc           #171                // String \\n
      42: invokevirtual #172                // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      45: pop
      46: aload_0
      47: bipush        13
      49: invokestatic  #4                  // Method java/lang/Character.valueOf:(C)Ljava/lang/Character;
      52: ldc           #173                // String \\r
      54: invokevirtual #172                // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      57: pop
      58: aload_0
      59: bipush        12
      61: invokestatic  #4                  // Method java/lang/Character.valueOf:(C)Ljava/lang/Character;
      64: ldc           #174                // String \\f
      66: invokevirtual #172                // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      69: pop
      70: aload_0
      71: bipush        9
      73: invokestatic  #4                  // Method java/lang/Character.valueOf:(C)Ljava/lang/Character;
      76: ldc           #175                // String \\u2192
      78: invokevirtual #172                // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      81: pop
      82: return
}
