Compiled from "HtmlFormattingAppendableBase.java"
public class com.vladsch.flexmark.util.html.HtmlFormattingAppendableBase<T extends com.vladsch.flexmark.util.html.HtmlFormattingAppendableBase> implements com.vladsch.flexmark.util.html.HtmlFormattingAppendable {
  private final com.vladsch.flexmark.util.html.FormattingAppendable out;

  private com.vladsch.flexmark.util.html.Attributes currentAttributes;

  private boolean indentIndentingChildren;

  private boolean lineOnChildText;

  private boolean withAttributes;

  private boolean suppressOpenTagLine;

  private boolean suppressCloseTagLine;

  private final java.util.Stack<java.lang.String> myOpenTags;

  public com.vladsch.flexmark.util.html.HtmlFormattingAppendableBase(java.lang.Appendable);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: iconst_0
       4: invokespecial #2                  // Method "<init>":(Ljava/lang/Appendable;IZ)V
       7: return

  public com.vladsch.flexmark.util.html.HtmlFormattingAppendableBase(com.vladsch.flexmark.util.html.FormattingAppendable, java.lang.Appendable, boolean);
    Code:
       0: aload_0
       1: aload_2
       2: iload_3
       3: ifeq          20
       6: aload_1
       7: invokeinterface #3,  1            // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.getIndentPrefix:()Ljava/lang/CharSequence;
      12: invokeinterface #4,  1            // InterfaceMethod java/lang/CharSequence.length:()I
      17: goto          21
      20: iconst_0
      21: iconst_0
      22: invokespecial #2                  // Method "<init>":(Ljava/lang/Appendable;IZ)V
      25: return

  public com.vladsch.flexmark.util.html.HtmlFormattingAppendableBase(java.lang.Appendable, int, boolean);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #6                  // Field indentIndentingChildren:Z
       9: aload_0
      10: iconst_0
      11: putfield      #7                  // Field lineOnChildText:Z
      14: aload_0
      15: iconst_0
      16: putfield      #8                  // Field withAttributes:Z
      19: aload_0
      20: iconst_0
      21: putfield      #9                  // Field suppressOpenTagLine:Z
      24: aload_0
      25: iconst_0
      26: putfield      #10                 // Field suppressCloseTagLine:Z
      29: aload_0
      30: new           #11                 // class java/util/Stack
      33: dup
      34: invokespecial #12                 // Method java/util/Stack."<init>":()V
      37: putfield      #13                 // Field myOpenTags:Ljava/util/Stack;
      40: aload_0
      41: new           #14                 // class com/vladsch/flexmark/util/html/FormattingAppendableImpl
      44: dup
      45: aload_1
      46: iload_3
      47: invokespecial #15                 // Method com/vladsch/flexmark/util/html/FormattingAppendableImpl."<init>":(Ljava/lang/Appendable;Z)V
      50: putfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      53: aload_0
      54: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      57: ldc           #16                 // String
      59: iload_2
      60: invokestatic  #17                 // Method com/vladsch/flexmark/util/sequence/RepeatedCharSequence.of:(Ljava/lang/CharSequence;I)Lcom/vladsch/flexmark/util/sequence/RepeatedCharSequence;
      63: invokevirtual #18                 // Method com/vladsch/flexmark/util/sequence/RepeatedCharSequence.toString:()Ljava/lang/String;
      66: invokeinterface #19,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.setIndentPrefix:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      71: pop
      72: return

  public com.vladsch.flexmark.util.html.HtmlFormattingAppendableBase(java.lang.Appendable, int, int);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #6                  // Field indentIndentingChildren:Z
       9: aload_0
      10: iconst_0
      11: putfield      #7                  // Field lineOnChildText:Z
      14: aload_0
      15: iconst_0
      16: putfield      #8                  // Field withAttributes:Z
      19: aload_0
      20: iconst_0
      21: putfield      #9                  // Field suppressOpenTagLine:Z
      24: aload_0
      25: iconst_0
      26: putfield      #10                 // Field suppressCloseTagLine:Z
      29: aload_0
      30: new           #11                 // class java/util/Stack
      33: dup
      34: invokespecial #12                 // Method java/util/Stack."<init>":()V
      37: putfield      #13                 // Field myOpenTags:Ljava/util/Stack;
      40: aload_0
      41: new           #14                 // class com/vladsch/flexmark/util/html/FormattingAppendableImpl
      44: dup
      45: aload_1
      46: iload_3
      47: invokespecial #20                 // Method com/vladsch/flexmark/util/html/FormattingAppendableImpl."<init>":(Ljava/lang/Appendable;I)V
      50: putfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      53: aload_0
      54: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      57: ldc           #16                 // String
      59: iload_2
      60: invokestatic  #17                 // Method com/vladsch/flexmark/util/sequence/RepeatedCharSequence.of:(Ljava/lang/CharSequence;I)Lcom/vladsch/flexmark/util/sequence/RepeatedCharSequence;
      63: invokevirtual #18                 // Method com/vladsch/flexmark/util/sequence/RepeatedCharSequence.toString:()Ljava/lang/String;
      66: invokeinterface #19,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.setIndentPrefix:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      71: pop
      72: return

  public boolean isSuppressOpenTagLine();
    Code:
       0: aload_0
       1: getfield      #9                  // Field suppressOpenTagLine:Z
       4: ireturn

  public void setSuppressOpenTagLine(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #9                  // Field suppressOpenTagLine:Z
       5: return

  public boolean isSuppressCloseTagLine();
    Code:
       0: aload_0
       1: getfield      #10                 // Field suppressCloseTagLine:Z
       4: ireturn

  public T setSuppressCloseTagLine(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #10                 // Field suppressCloseTagLine:Z
       5: aload_0
       6: areturn

  public T openPre();
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: iconst_1
       5: invokeinterface #21,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.openPreFormatted:(Z)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      10: pop
      11: aload_0
      12: areturn

  public T closePre();
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #22,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.closePreFormatted:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       9: pop
      10: aload_0
      11: areturn

  public boolean inPre();
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #23,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.isPreFormatted:()Z
       9: ireturn

  private boolean haveOptions(int);
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #24,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.getOptions:()I
       9: iload_1
      10: iand
      11: ifeq          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn

  public T raw(java.lang.CharSequence);
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: aload_1
       5: invokeinterface #25,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      10: pop
      11: aload_0
      12: areturn

  public T raw(java.lang.CharSequence, int);
    Code:
       0: iload_2
       1: istore_3
       2: iload_3
       3: iinc          3, -1
       6: ifle          23
       9: aload_0
      10: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      13: aload_1
      14: invokeinterface #25,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      19: pop
      20: goto          2
      23: aload_0
      24: areturn

  public T rawPre(java.lang.CharSequence);
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: iconst_1
       5: invokeinterface #21,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.openPreFormatted:(Z)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      10: aload_1
      11: invokeinterface #25,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      16: invokeinterface #22,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.closePreFormatted:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      21: pop
      22: aload_0
      23: areturn

  public T rawIndentedPre(java.lang.CharSequence);
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #26,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.getPrefix:()Ljava/lang/CharSequence;
       9: astore_2
      10: aload_0
      11: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      14: aload_0
      15: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      18: invokeinterface #27,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.getTotalIndentPrefix:()Ljava/lang/CharSequence;
      23: invokeinterface #28,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.setPrefix:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      28: pop
      29: aload_0
      30: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      33: iconst_0
      34: invokeinterface #21,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.openPreFormatted:(Z)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      39: aload_1
      40: invokeinterface #25,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      45: invokeinterface #22,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.closePreFormatted:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      50: pop
      51: aload_0
      52: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      55: aload_2
      56: invokeinterface #28,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.setPrefix:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      61: pop
      62: aload_0
      63: areturn

  public T text(java.lang.CharSequence);
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: aload_1
       5: iconst_0
       6: invokestatic  #29                 // Method com/vladsch/flexmark/util/html/Escaping.escapeHtml:(Ljava/lang/CharSequence;Z)Ljava/lang/String;
       9: invokeinterface #25,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      14: pop
      15: aload_0
      16: areturn

  public T attr(java.lang.CharSequence, java.lang.CharSequence);
    Code:
       0: aload_0
       1: getfield      #30                 // Field currentAttributes:Lcom/vladsch/flexmark/util/html/Attributes;
       4: ifnonnull     18
       7: aload_0
       8: new           #31                 // class com/vladsch/flexmark/util/html/Attributes
      11: dup
      12: invokespecial #32                 // Method com/vladsch/flexmark/util/html/Attributes."<init>":()V
      15: putfield      #30                 // Field currentAttributes:Lcom/vladsch/flexmark/util/html/Attributes;
      18: aload_0
      19: getfield      #30                 // Field currentAttributes:Lcom/vladsch/flexmark/util/html/Attributes;
      22: aload_1
      23: aload_2
      24: invokevirtual #33                 // Method com/vladsch/flexmark/util/html/Attributes.replaceValue:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/Attribute;
      27: pop
      28: aload_0
      29: areturn

  public T attr(com.vladsch.flexmark.util.html.Attribute...);
    Code:
       0: aload_0
       1: getfield      #30                 // Field currentAttributes:Lcom/vladsch/flexmark/util/html/Attributes;
       4: ifnonnull     18
       7: aload_0
       8: new           #31                 // class com/vladsch/flexmark/util/html/Attributes
      11: dup
      12: invokespecial #32                 // Method com/vladsch/flexmark/util/html/Attributes."<init>":()V
      15: putfield      #30                 // Field currentAttributes:Lcom/vladsch/flexmark/util/html/Attributes;
      18: aload_1
      19: astore_2
      20: aload_2
      21: arraylength
      22: istore_3
      23: iconst_0
      24: istore        4
      26: iload         4
      28: iload_3
      29: if_icmpge     66
      32: aload_2
      33: iload         4
      35: aaload
      36: astore        5
      38: aload_0
      39: getfield      #30                 // Field currentAttributes:Lcom/vladsch/flexmark/util/html/Attributes;
      42: aload         5
      44: invokeinterface #34,  1           // InterfaceMethod com/vladsch/flexmark/util/html/Attribute.getName:()Ljava/lang/String;
      49: aload         5
      51: invokeinterface #35,  1           // InterfaceMethod com/vladsch/flexmark/util/html/Attribute.getValue:()Ljava/lang/String;
      56: invokevirtual #36                 // Method com/vladsch/flexmark/util/html/Attributes.addValue:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/Attribute;
      59: pop
      60: iinc          4, 1
      63: goto          26
      66: aload_0
      67: areturn

  public T attr(com.vladsch.flexmark.util.html.Attributes);
    Code:
       0: aload_1
       1: ifnull        42
       4: aload_1
       5: invokevirtual #37                 // Method com/vladsch/flexmark/util/html/Attributes.isEmpty:()Z
       8: ifne          42
      11: aload_0
      12: getfield      #30                 // Field currentAttributes:Lcom/vladsch/flexmark/util/html/Attributes;
      15: ifnonnull     33
      18: aload_0
      19: new           #31                 // class com/vladsch/flexmark/util/html/Attributes
      22: dup
      23: aload_1
      24: invokespecial #38                 // Method com/vladsch/flexmark/util/html/Attributes."<init>":(Lcom/vladsch/flexmark/util/html/Attributes;)V
      27: putfield      #30                 // Field currentAttributes:Lcom/vladsch/flexmark/util/html/Attributes;
      30: goto          42
      33: aload_0
      34: getfield      #30                 // Field currentAttributes:Lcom/vladsch/flexmark/util/html/Attributes;
      37: aload_1
      38: invokevirtual #39                 // Method com/vladsch/flexmark/util/html/Attributes.addValues:(Lcom/vladsch/flexmark/util/html/Attributes;)Lcom/vladsch/flexmark/util/html/Attributes;
      41: pop
      42: aload_0
      43: areturn

  public T withAttr();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #8                  // Field withAttributes:Z
       5: aload_0
       6: areturn

  public com.vladsch.flexmark.util.html.Attributes getAttributes();
    Code:
       0: aload_0
       1: getfield      #30                 // Field currentAttributes:Lcom/vladsch/flexmark/util/html/Attributes;
       4: areturn

  public T setAttributes(com.vladsch.flexmark.util.html.Attributes);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #30                 // Field currentAttributes:Lcom/vladsch/flexmark/util/html/Attributes;
       5: aload_0
       6: areturn

  public T withCondLine();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #7                  // Field lineOnChildText:Z
       5: aload_0
       6: areturn

  public T withCondIndent();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #6                  // Field indentIndentingChildren:Z
       5: aload_0
       6: areturn

  public T tag(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: invokevirtual #40                 // Method tag:(Ljava/lang/CharSequence;Z)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       6: areturn

  public T tagVoid(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_1
       3: invokevirtual #40                 // Method tag:(Ljava/lang/CharSequence;Z)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       6: areturn

  protected java.lang.String getOpenTagText();
    Code:
       0: aload_0
       1: getfield      #13                 // Field myOpenTags:Ljava/util/Stack;
       4: ldc           #41                 // String ,
       6: iconst_1
       7: invokestatic  #42                 // Method com/vladsch/flexmark/util/Utils.splice:(Ljava/util/Collection;Ljava/lang/String;Z)Ljava/lang/String;
      10: areturn

  protected void pushTag(java.lang.CharSequence);
    Code:
       0: aload_0
       1: getfield      #13                 // Field myOpenTags:Ljava/util/Stack;
       4: aload_1
       5: instanceof    #43                 // class java/lang/String
       8: ifeq          18
      11: aload_1
      12: checkcast     #43                 // class java/lang/String
      15: goto          22
      18: aload_1
      19: invokestatic  #44                 // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
      22: invokevirtual #45                 // Method java/util/Stack.push:(Ljava/lang/Object;)Ljava/lang/Object;
      25: pop
      26: return

  protected void popTag(java.lang.CharSequence);
    Code:
       0: aload_0
       1: getfield      #13                 // Field myOpenTags:Ljava/util/Stack;
       4: invokevirtual #46                 // Method java/util/Stack.isEmpty:()Z
       7: ifeq          42
      10: new           #47                 // class java/lang/IllegalStateException
      13: dup
      14: new           #48                 // class java/lang/StringBuilder
      17: dup
      18: invokespecial #49                 // Method java/lang/StringBuilder."<init>":()V
      21: ldc           #50                 // String Close tag \'
      23: invokevirtual #51                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: aload_1
      27: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      30: ldc           #53                 // String \' with no tags open
      32: invokevirtual #51                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: invokevirtual #54                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      38: invokespecial #55                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      41: athrow
      42: aload_0
      43: getfield      #13                 // Field myOpenTags:Ljava/util/Stack;
      46: invokevirtual #56                 // Method java/util/Stack.peek:()Ljava/lang/Object;
      49: checkcast     #43                 // class java/lang/String
      52: astore_2
      53: aload_2
      54: aload_1
      55: instanceof    #43                 // class java/lang/String
      58: ifeq          68
      61: aload_1
      62: checkcast     #43                 // class java/lang/String
      65: goto          72
      68: aload_1
      69: invokestatic  #44                 // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
      72: invokevirtual #57                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      75: ifne          126
      78: new           #47                 // class java/lang/IllegalStateException
      81: dup
      82: new           #48                 // class java/lang/StringBuilder
      85: dup
      86: invokespecial #49                 // Method java/lang/StringBuilder."<init>":()V
      89: ldc           #50                 // String Close tag \'
      91: invokevirtual #51                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      94: aload_1
      95: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      98: ldc           #58                 // String \' does not match \'
     100: invokevirtual #51                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     103: aload_2
     104: invokevirtual #51                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     107: ldc           #59                 // String \' in
     109: invokevirtual #51                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     112: aload_0
     113: invokevirtual #60                 // Method getOpenTagText:()Ljava/lang/String;
     116: invokevirtual #51                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     119: invokevirtual #54                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     122: invokespecial #55                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     125: athrow
     126: aload_0
     127: getfield      #13                 // Field myOpenTags:Ljava/util/Stack;
     130: invokevirtual #61                 // Method java/util/Stack.pop:()Ljava/lang/Object;
     133: pop
     134: return

  protected void tagOpened(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #62                 // Method pushTag:(Ljava/lang/CharSequence;)V
       5: return

  protected void tagClosed(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #63                 // Method popTag:(Ljava/lang/CharSequence;)V
       5: return

  public java.util.Stack<java.lang.String> getOpenTags();
    Code:
       0: aload_0
       1: getfield      #13                 // Field myOpenTags:Ljava/util/Stack;
       4: areturn

  public java.util.List<java.lang.String> getOpenTagsAfterLast(java.lang.CharSequence);
    Code:
       0: aload_0
       1: getfield      #13                 // Field myOpenTags:Ljava/util/Stack;
       4: invokevirtual #46                 // Method java/util/Stack.isEmpty:()Z
       7: ifeq          14
      10: getstatic     #64                 // Field java/util/Collections.EMPTY_LIST:Ljava/util/List;
      13: areturn
      14: new           #65                 // class java/util/ArrayList
      17: dup
      18: aload_0
      19: getfield      #13                 // Field myOpenTags:Ljava/util/Stack;
      22: invokespecial #66                 // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
      25: astore_2
      26: aload_2
      27: invokeinterface #67,  1           // InterfaceMethod java/util/List.size:()I
      32: istore_3
      33: iload_3
      34: istore        4
      36: aload_1
      37: instanceof    #43                 // class java/lang/String
      40: ifeq          50
      43: aload_1
      44: checkcast     #43                 // class java/lang/String
      47: goto          54
      50: aload_1
      51: invokestatic  #44                 // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
      54: astore        5
      56: iload_3
      57: istore        6
      59: iload         6
      61: iinc          6, -1
      64: ifle          95
      67: aload_2
      68: iload         6
      70: invokeinterface #68,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      75: checkcast     #43                 // class java/lang/String
      78: aload         5
      80: invokevirtual #57                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      83: ifeq          59
      86: iload         6
      88: iconst_1
      89: iadd
      90: istore        4
      92: goto          95
      95: aload_2
      96: iload         4
      98: iload_3
      99: invokeinterface #69,  3           // InterfaceMethod java/util/List.subList:(II)Ljava/util/List;
     104: areturn

  public T tag(java.lang.CharSequence, boolean);
    Code:
       0: aload_1
       1: invokeinterface #4,  1            // InterfaceMethod java/lang/CharSequence.length:()I
       6: ifeq          21
       9: aload_1
      10: iconst_0
      11: invokeinterface #70,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      16: bipush        47
      18: if_icmpne     27
      21: aload_0
      22: aload_1
      23: invokevirtual #71                 // Method closeTag:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
      26: areturn
      27: aconst_null
      28: astore_3
      29: aload_0
      30: getfield      #8                  // Field withAttributes:Z
      33: ifeq          51
      36: aload_0
      37: getfield      #30                 // Field currentAttributes:Lcom/vladsch/flexmark/util/html/Attributes;
      40: astore_3
      41: aload_0
      42: aconst_null
      43: putfield      #30                 // Field currentAttributes:Lcom/vladsch/flexmark/util/html/Attributes;
      46: aload_0
      47: iconst_0
      48: putfield      #8                  // Field withAttributes:Z
      51: aload_0
      52: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      55: ldc           #72                 // String <
      57: invokeinterface #25,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      62: pop
      63: aload_0
      64: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      67: aload_1
      68: invokeinterface #25,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      73: pop
      74: aload_3
      75: ifnull        216
      78: aload_3
      79: invokevirtual #37                 // Method com/vladsch/flexmark/util/html/Attributes.isEmpty:()Z
      82: ifne          216
      85: aload_3
      86: invokevirtual #73                 // Method com/vladsch/flexmark/util/html/Attributes.values:()Ljava/util/Collection;
      89: invokeinterface #74,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      94: astore        4
      96: aload         4
      98: invokeinterface #75,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     103: ifeq          216
     106: aload         4
     108: invokeinterface #76,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     113: checkcast     #77                 // class com/vladsch/flexmark/util/html/Attribute
     116: astore        5
     118: aload         5
     120: invokeinterface #35,  1           // InterfaceMethod com/vladsch/flexmark/util/html/Attribute.getValue:()Ljava/lang/String;
     125: astore        6
     127: aload         5
     129: invokeinterface #78,  1           // InterfaceMethod com/vladsch/flexmark/util/html/Attribute.isNonRendering:()Z
     134: ifeq          140
     137: goto          96
     140: aload_0
     141: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     144: ldc           #16                 // String
     146: invokeinterface #25,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     151: pop
     152: aload_0
     153: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     156: aload         5
     158: invokeinterface #34,  1           // InterfaceMethod com/vladsch/flexmark/util/html/Attribute.getName:()Ljava/lang/String;
     163: iconst_1
     164: invokestatic  #29                 // Method com/vladsch/flexmark/util/html/Escaping.escapeHtml:(Ljava/lang/CharSequence;Z)Ljava/lang/String;
     167: invokeinterface #25,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     172: pop
     173: aload_0
     174: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     177: ldc           #79                 // String =\"
     179: invokeinterface #25,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     184: pop
     185: aload_0
     186: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     189: aload         6
     191: iconst_1
     192: invokestatic  #29                 // Method com/vladsch/flexmark/util/html/Escaping.escapeHtml:(Ljava/lang/CharSequence;Z)Ljava/lang/String;
     195: invokeinterface #25,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     200: pop
     201: aload_0
     202: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     205: ldc           #80                 // String \"
     207: invokeinterface #25,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     212: pop
     213: goto          96
     216: iload_2
     217: ifeq          235
     220: aload_0
     221: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     224: ldc           #81                 // String  />
     226: invokeinterface #25,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     231: pop
     232: goto          252
     235: aload_0
     236: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     239: ldc           #82                 // String >
     241: invokeinterface #25,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     246: pop
     247: aload_0
     248: aload_1
     249: invokevirtual #83                 // Method tagOpened:(Ljava/lang/CharSequence;)V
     252: aload_0
     253: areturn

  public T closeTag(java.lang.CharSequence);
    Code:
       0: aload_1
       1: invokeinterface #4,  1            // InterfaceMethod java/lang/CharSequence.length:()I
       6: ifne          41
       9: new           #47                 // class java/lang/IllegalStateException
      12: dup
      13: new           #48                 // class java/lang/StringBuilder
      16: dup
      17: invokespecial #49                 // Method java/lang/StringBuilder."<init>":()V
      20: ldc           #84                 // String closeTag called with tag:\'
      22: invokevirtual #51                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      25: aload_1
      26: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      29: ldc           #85                 // String \'
      31: invokevirtual #51                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      34: invokevirtual #54                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      37: invokespecial #55                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      40: athrow
      41: aload_1
      42: iconst_0
      43: invokeinterface #70,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      48: bipush        47
      50: if_icmpne     98
      53: aload_0
      54: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      57: ldc           #72                 // String <
      59: invokeinterface #25,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      64: aload_1
      65: invokeinterface #25,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      70: ldc           #82                 // String >
      72: invokeinterface #25,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      77: pop
      78: aload_0
      79: aload_1
      80: iconst_1
      81: aload_1
      82: invokeinterface #4,  1            // InterfaceMethod java/lang/CharSequence.length:()I
      87: invokeinterface #86,  3           // InterfaceMethod java/lang/CharSequence.subSequence:(II)Ljava/lang/CharSequence;
      92: invokevirtual #87                 // Method tagClosed:(Ljava/lang/CharSequence;)V
      95: goto          128
      98: aload_0
      99: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     102: ldc           #88                 // String </
     104: invokeinterface #25,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     109: aload_1
     110: invokeinterface #25,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     115: ldc           #82                 // String >
     117: invokeinterface #25,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     122: pop
     123: aload_0
     124: aload_1
     125: invokevirtual #87                 // Method tagClosed:(Ljava/lang/CharSequence;)V
     128: aload_0
     129: areturn

  public T tag(java.lang.CharSequence, boolean, boolean, java.lang.Runnable);
    Code:
       0: iload_2
       1: ifeq          31
       4: aload_0
       5: getfield      #9                  // Field suppressOpenTagLine:Z
       8: ifne          31
      11: aload_0
      12: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      15: invokeinterface #89,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.willIndent:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      20: pop
      21: aload_0
      22: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      25: invokeinterface #90,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.line:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      30: pop
      31: aload_0
      32: aload_1
      33: iconst_0
      34: invokevirtual #40                 // Method tag:(Ljava/lang/CharSequence;Z)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
      37: pop
      38: iload_2
      39: ifeq          52
      42: aload_0
      43: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      46: invokeinterface #91,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.indent:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      51: pop
      52: aload_0
      53: getfield      #7                  // Field lineOnChildText:Z
      56: istore        5
      58: aload_0
      59: getfield      #6                  // Field indentIndentingChildren:Z
      62: istore        6
      64: aload_0
      65: iconst_0
      66: putfield      #7                  // Field lineOnChildText:Z
      69: aload_0
      70: iconst_0
      71: putfield      #6                  // Field indentIndentingChildren:Z
      74: iload         5
      76: ifne          84
      79: iload         6
      81: ifeq          106
      84: aload_0
      85: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      88: new           #92                 // class com/vladsch/flexmark/util/html/HtmlFormattingAppendableBase$1
      91: dup
      92: aload_0
      93: iload         6
      95: iload         5
      97: invokespecial #93                 // Method com/vladsch/flexmark/util/html/HtmlFormattingAppendableBase$1."<init>":(Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;ZZ)V
     100: invokeinterface #94,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.openConditional:(Lcom/vladsch/flexmark/util/html/ConditionalFormatter;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     105: pop
     106: aload         4
     108: invokeinterface #95,  1           // InterfaceMethod java/lang/Runnable.run:()V
     113: iload         5
     115: ifne          123
     118: iload         6
     120: ifeq          145
     123: aload_0
     124: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     127: new           #96                 // class com/vladsch/flexmark/util/html/HtmlFormattingAppendableBase$2
     130: dup
     131: aload_0
     132: iload         6
     134: iload         5
     136: invokespecial #97                 // Method com/vladsch/flexmark/util/html/HtmlFormattingAppendableBase$2."<init>":(Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;ZZ)V
     139: invokeinterface #98,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.closeConditional:(Lcom/vladsch/flexmark/util/html/ConditionalFormatter;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     144: pop
     145: iload_2
     146: ifeq          159
     149: aload_0
     150: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     153: invokeinterface #99,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.unIndent:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     158: pop
     159: iload_3
     160: ifeq          180
     163: aload_0
     164: getfield      #10                 // Field suppressCloseTagLine:Z
     167: ifne          180
     170: aload_0
     171: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     174: invokeinterface #90,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.line:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
     179: pop
     180: aload_0
     181: aload_1
     182: invokevirtual #71                 // Method closeTag:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
     185: pop
     186: iload_2
     187: ifeq          202
     190: aload_0
     191: getfield      #10                 // Field suppressCloseTagLine:Z
     194: ifne          202
     197: aload_0
     198: invokevirtual #100                // Method line:()Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
     201: pop
     202: aload_0
     203: areturn

  public T tagVoidLine(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #9                  // Field suppressOpenTagLine:Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: invokevirtual #101                // Method lineIf:(Z)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
      16: aload_1
      17: invokevirtual #102                // Method tagVoid:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
      20: aload_0
      21: getfield      #10                 // Field suppressCloseTagLine:Z
      24: ifne          31
      27: iconst_1
      28: goto          32
      31: iconst_0
      32: invokevirtual #101                // Method lineIf:(Z)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
      35: pop
      36: aload_0
      37: areturn

  public T tagLine(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #9                  // Field suppressOpenTagLine:Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: invokevirtual #101                // Method lineIf:(Z)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
      16: aload_1
      17: invokevirtual #103                // Method tag:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
      20: aload_0
      21: getfield      #10                 // Field suppressCloseTagLine:Z
      24: ifne          31
      27: iconst_1
      28: goto          32
      31: iconst_0
      32: invokevirtual #101                // Method lineIf:(Z)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
      35: pop
      36: aload_0
      37: areturn

  public T tagLine(java.lang.CharSequence, boolean);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #9                  // Field suppressOpenTagLine:Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: invokevirtual #101                // Method lineIf:(Z)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
      16: aload_1
      17: iload_2
      18: invokevirtual #40                 // Method tag:(Ljava/lang/CharSequence;Z)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
      21: aload_0
      22: getfield      #10                 // Field suppressCloseTagLine:Z
      25: ifne          32
      28: iconst_1
      29: goto          33
      32: iconst_0
      33: invokevirtual #101                // Method lineIf:(Z)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
      36: pop
      37: aload_0
      38: areturn

  public T tagLine(java.lang.CharSequence, java.lang.Runnable);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #9                  // Field suppressOpenTagLine:Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: invokevirtual #101                // Method lineIf:(Z)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
      16: aload_1
      17: iconst_0
      18: iconst_0
      19: aload_2
      20: invokevirtual #104                // Method tag:(Ljava/lang/CharSequence;ZZLjava/lang/Runnable;)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
      23: aload_0
      24: getfield      #10                 // Field suppressCloseTagLine:Z
      27: ifne          34
      30: iconst_1
      31: goto          35
      34: iconst_0
      35: invokevirtual #101                // Method lineIf:(Z)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
      38: pop
      39: aload_0
      40: areturn

  public T tagIndent(java.lang.CharSequence, java.lang.Runnable);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_1
       3: iconst_0
       4: aload_2
       5: invokevirtual #104                // Method tag:(Ljava/lang/CharSequence;ZZLjava/lang/Runnable;)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       8: pop
       9: aload_0
      10: areturn

  public T tagLineIndent(java.lang.CharSequence, java.lang.Runnable);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_1
       3: iconst_1
       4: aload_2
       5: invokevirtual #104                // Method tag:(Ljava/lang/CharSequence;ZZLjava/lang/Runnable;)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       8: pop
       9: aload_0
      10: areturn

  public java.lang.Appendable getAppendable();
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #105,  1          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.getAppendable:()Ljava/lang/Appendable;
       9: areturn

  public int getOptions();
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #24,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.getOptions:()I
       9: ireturn

  public T setOptions(int);
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: iload_1
       5: invokeinterface #106,  2          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.setOptions:(I)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      10: pop
      11: aload_0
      12: areturn

  public int getModCount();
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #107,  1          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.getModCount:()I
       9: ireturn

  public boolean isPreFormatted();
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #23,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.isPreFormatted:()Z
       9: ireturn

  public T line();
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #90,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.line:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       9: pop
      10: aload_0
      11: areturn

  public T addLine();
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #108,  1          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.addLine:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       9: pop
      10: aload_0
      11: areturn

  public int getPushedPrefixCount();
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #109,  1          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.getPushedPrefixCount:()I
       9: ireturn

  public T blankLine();
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #110,  1          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.blankLine:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       9: pop
      10: aload_0
      11: areturn

  public T blankLine(int);
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: iload_1
       5: invokeinterface #111,  2          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.blankLine:(I)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      10: pop
      11: aload_0
      12: areturn

  public T blankLineIf(boolean);
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: iload_1
       5: invokeinterface #112,  2          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.blankLineIf:(Z)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      10: pop
      11: aload_0
      12: areturn

  public T lineIf(boolean);
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: iload_1
       5: invokeinterface #113,  2          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.lineIf:(Z)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      10: pop
      11: aload_0
      12: areturn

  public T indent();
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #91,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.indent:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       9: pop
      10: aload_0
      11: areturn

  public T willIndent();
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #89,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.willIndent:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       9: pop
      10: aload_0
      11: areturn

  public T unIndent();
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #99,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.unIndent:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       9: pop
      10: aload_0
      11: areturn

  public java.io.IOException getIOException();
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #114,  1          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.getIOException:()Ljava/io/IOException;
       9: areturn

  public T append(java.lang.CharSequence);
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: aload_1
       5: invokeinterface #25,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      10: pop
      11: aload_0
      12: areturn

  public T append(java.lang.CharSequence, int, int);
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: aload_1
       5: iload_2
       6: iload_3
       7: invokeinterface #115,  4          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(Ljava/lang/CharSequence;II)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      12: pop
      13: aload_0
      14: areturn

  public T append(char);
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: iload_1
       5: invokeinterface #116,  2          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(C)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      10: pop
      11: aload_0
      12: areturn

  public java.lang.String getText();
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #117,  1          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.getText:()Ljava/lang/String;
       9: areturn

  public java.lang.String getText(int);
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: iload_1
       5: invokeinterface #118,  2          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.getText:(I)Ljava/lang/String;
      10: areturn

  public T flush();
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #119,  1          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.flush:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       9: pop
      10: aload_0
      11: areturn

  public T flushWhitespaces();
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #119,  1          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.flush:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       9: pop
      10: aload_0
      11: areturn

  public T flush(int);
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: iload_1
       5: invokeinterface #120,  2          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.flush:(I)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      10: pop
      11: aload_0
      12: areturn

  public java.lang.CharSequence getIndentPrefix();
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #3,  1            // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.getIndentPrefix:()Ljava/lang/CharSequence;
       9: areturn

  public T setIndentPrefix(java.lang.CharSequence);
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: aload_1
       5: invokeinterface #19,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.setIndentPrefix:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      10: pop
      11: aload_0
      12: areturn

  public java.lang.CharSequence getPrefix();
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #26,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.getPrefix:()Ljava/lang/CharSequence;
       9: areturn

  public T setPrefix(java.lang.CharSequence);
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: aload_1
       5: invokeinterface #28,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.setPrefix:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      10: pop
      11: aload_0
      12: areturn

  public T addPrefix(java.lang.CharSequence);
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: aload_1
       5: invokeinterface #121,  2          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.addPrefix:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      10: pop
      11: aload_0
      12: areturn

  public T pushPrefix();
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #122,  1          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.pushPrefix:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       9: pop
      10: aload_0
      11: areturn

  public T popPrefix();
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #123,  1          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.popPrefix:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       9: pop
      10: aload_0
      11: areturn

  public T addAfterEolRunnable(int, java.lang.Runnable);
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: iload_1
       5: aload_2
       6: invokeinterface #124,  3          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.addAfterEolRunnable:(ILjava/lang/Runnable;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      11: pop
      12: aload_0
      13: areturn

  public java.lang.CharSequence getTotalIndentPrefix();
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #27,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.getTotalIndentPrefix:()Ljava/lang/CharSequence;
       9: areturn

  public T line(com.vladsch.flexmark.util.Ref<java.lang.Boolean>);
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: aload_1
       5: invokeinterface #125,  2          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.line:(Lcom/vladsch/flexmark/util/Ref;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      10: pop
      11: aload_0
      12: areturn

  public T lineIf(com.vladsch.flexmark.util.Ref<java.lang.Boolean>);
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: aload_1
       5: invokeinterface #126,  2          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.lineIf:(Lcom/vladsch/flexmark/util/Ref;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      10: pop
      11: aload_0
      12: areturn

  public T repeat(char, int);
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: iload_1
       5: iload_2
       6: invokeinterface #127,  3          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.repeat:(CI)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      11: pop
      12: aload_0
      13: areturn

  public T repeat(java.lang.CharSequence, int);
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: aload_1
       5: iload_2
       6: invokeinterface #128,  3          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.repeat:(Ljava/lang/CharSequence;I)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      11: pop
      12: aload_0
      13: areturn

  public T repeat(java.lang.CharSequence, int, int, int);
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: aload_1
       5: iload_2
       6: iload_3
       7: iload         4
       9: invokeinterface #129,  5          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.repeat:(Ljava/lang/CharSequence;III)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      14: pop
      15: aload_0
      16: areturn

  public boolean isPendingSpace();
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #130,  1          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.isPendingSpace:()Z
       9: ireturn

  public boolean isPendingEOL();
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #130,  1          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.isPendingSpace:()Z
       9: ireturn

  public int getPendingEOL();
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #131,  1          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.getPendingEOL:()I
       9: ireturn

  public int getIndent();
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #132,  1          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.getIndent:()I
       9: ireturn

  public T setIndentOffset(int);
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: iload_1
       5: invokeinterface #133,  2          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.setIndentOffset:(I)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      10: pop
      11: aload_0
      12: areturn

  public int getLineCount();
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #134,  1          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.getLineCount:()I
       9: ireturn

  public T lastOffset(com.vladsch.flexmark.util.Ref<java.lang.Integer>);
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: aload_1
       5: invokeinterface #135,  2          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.lastOffset:(Lcom/vladsch/flexmark/util/Ref;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      10: pop
      11: aload_0
      12: areturn

  public int lastOffset();
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #136,  1          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.lastOffset:()I
       9: ireturn

  public int offset();
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #137,  1          // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.offset:()I
       9: ireturn

  public T openPreFormatted(boolean);
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: iconst_1
       5: invokeinterface #21,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.openPreFormatted:(Z)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      10: pop
      11: aload_0
      12: areturn

  public T closePreFormatted();
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #22,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.closePreFormatted:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       9: pop
      10: aload_0
      11: areturn

  public T openConditional(com.vladsch.flexmark.util.html.ConditionalFormatter);
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: aload_1
       5: invokeinterface #94,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.openConditional:(Lcom/vladsch/flexmark/util/html/ConditionalFormatter;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      10: pop
      11: aload_0
      12: areturn

  public T closeConditional(com.vladsch.flexmark.util.html.ConditionalFormatter);
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: aload_1
       5: invokeinterface #98,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.closeConditional:(Lcom/vladsch/flexmark/util/html/ConditionalFormatter;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      10: pop
      11: aload_0
      12: areturn

  public com.vladsch.flexmark.util.html.HtmlFormattingAppendable closeTag(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #71                 // Method closeTag:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       5: areturn

  public com.vladsch.flexmark.util.html.HtmlFormattingAppendable tagLineIndent(java.lang.CharSequence, java.lang.Runnable);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #138                // Method tagLineIndent:(Ljava/lang/CharSequence;Ljava/lang/Runnable;)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       6: areturn

  public com.vladsch.flexmark.util.html.HtmlFormattingAppendable tagIndent(java.lang.CharSequence, java.lang.Runnable);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #139                // Method tagIndent:(Ljava/lang/CharSequence;Ljava/lang/Runnable;)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       6: areturn

  public com.vladsch.flexmark.util.html.HtmlFormattingAppendable tagLine(java.lang.CharSequence, java.lang.Runnable);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #140                // Method tagLine:(Ljava/lang/CharSequence;Ljava/lang/Runnable;)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       6: areturn

  public com.vladsch.flexmark.util.html.HtmlFormattingAppendable tagLine(java.lang.CharSequence, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokevirtual #141                // Method tagLine:(Ljava/lang/CharSequence;Z)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       6: areturn

  public com.vladsch.flexmark.util.html.HtmlFormattingAppendable tagLine(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #142                // Method tagLine:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       5: areturn

  public com.vladsch.flexmark.util.html.HtmlFormattingAppendable tagVoidLine(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #143                // Method tagVoidLine:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       5: areturn

  public com.vladsch.flexmark.util.html.HtmlFormattingAppendable tag(java.lang.CharSequence, boolean, boolean, java.lang.Runnable);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: aload         4
       6: invokevirtual #104                // Method tag:(Ljava/lang/CharSequence;ZZLjava/lang/Runnable;)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       9: areturn

  public com.vladsch.flexmark.util.html.HtmlFormattingAppendable tag(java.lang.CharSequence, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokevirtual #40                 // Method tag:(Ljava/lang/CharSequence;Z)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       6: areturn

  public com.vladsch.flexmark.util.html.HtmlFormattingAppendable tag(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #103                // Method tag:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       5: areturn

  public com.vladsch.flexmark.util.html.HtmlFormattingAppendable tagVoid(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #102                // Method tagVoid:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       5: areturn

  public com.vladsch.flexmark.util.html.HtmlFormattingAppendable withCondIndent();
    Code:
       0: aload_0
       1: invokevirtual #144                // Method withCondIndent:()Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       4: areturn

  public com.vladsch.flexmark.util.html.HtmlFormattingAppendable withCondLine();
    Code:
       0: aload_0
       1: invokevirtual #145                // Method withCondLine:()Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       4: areturn

  public com.vladsch.flexmark.util.html.HtmlFormattingAppendable withAttr();
    Code:
       0: aload_0
       1: invokevirtual #146                // Method withAttr:()Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       4: areturn

  public com.vladsch.flexmark.util.html.HtmlFormattingAppendable attr(com.vladsch.flexmark.util.html.Attributes);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #147                // Method attr:(Lcom/vladsch/flexmark/util/html/Attributes;)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       5: areturn

  public com.vladsch.flexmark.util.html.HtmlFormattingAppendable attr(com.vladsch.flexmark.util.html.Attribute[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #148                // Method attr:([Lcom/vladsch/flexmark/util/html/Attribute;)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       5: areturn

  public com.vladsch.flexmark.util.html.HtmlFormattingAppendable attr(java.lang.CharSequence, java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #149                // Method attr:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       6: areturn

  public com.vladsch.flexmark.util.html.HtmlFormattingAppendable text(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #150                // Method text:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       5: areturn

  public com.vladsch.flexmark.util.html.HtmlFormattingAppendable rawIndentedPre(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #151                // Method rawIndentedPre:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       5: areturn

  public com.vladsch.flexmark.util.html.HtmlFormattingAppendable rawPre(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #152                // Method rawPre:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       5: areturn

  public com.vladsch.flexmark.util.html.HtmlFormattingAppendable raw(java.lang.CharSequence, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokevirtual #153                // Method raw:(Ljava/lang/CharSequence;I)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       6: areturn

  public com.vladsch.flexmark.util.html.HtmlFormattingAppendable raw(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #154                // Method raw:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       5: areturn

  public com.vladsch.flexmark.util.html.HtmlFormattingAppendable closePre();
    Code:
       0: aload_0
       1: invokevirtual #155                // Method closePre:()Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       4: areturn

  public com.vladsch.flexmark.util.html.HtmlFormattingAppendable openPre();
    Code:
       0: aload_0
       1: invokevirtual #156                // Method openPre:()Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       4: areturn

  public com.vladsch.flexmark.util.html.HtmlFormattingAppendable setAttributes(com.vladsch.flexmark.util.html.Attributes);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #157                // Method setAttributes:(Lcom/vladsch/flexmark/util/html/Attributes;)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       5: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable closeConditional(com.vladsch.flexmark.util.html.ConditionalFormatter);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #158                // Method closeConditional:(Lcom/vladsch/flexmark/util/html/ConditionalFormatter;)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       5: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable openConditional(com.vladsch.flexmark.util.html.ConditionalFormatter);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #159                // Method openConditional:(Lcom/vladsch/flexmark/util/html/ConditionalFormatter;)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       5: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable closePreFormatted();
    Code:
       0: aload_0
       1: invokevirtual #160                // Method closePreFormatted:()Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       4: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable openPreFormatted(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #161                // Method openPreFormatted:(Z)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       5: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable lastOffset(com.vladsch.flexmark.util.Ref);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #162                // Method lastOffset:(Lcom/vladsch/flexmark/util/Ref;)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       5: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable unIndent();
    Code:
       0: aload_0
       1: invokevirtual #163                // Method unIndent:()Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       4: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable willIndent();
    Code:
       0: aload_0
       1: invokevirtual #164                // Method willIndent:()Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       4: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable indent();
    Code:
       0: aload_0
       1: invokevirtual #165                // Method indent:()Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       4: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable setIndentOffset(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #166                // Method setIndentOffset:(I)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       5: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable blankLine(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #167                // Method blankLine:(I)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       5: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable blankLineIf(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #168                // Method blankLineIf:(Z)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       5: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable blankLine();
    Code:
       0: aload_0
       1: invokevirtual #169                // Method blankLine:()Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       4: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable lineIf(com.vladsch.flexmark.util.Ref);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #170                // Method lineIf:(Lcom/vladsch/flexmark/util/Ref;)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       5: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable line(com.vladsch.flexmark.util.Ref);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #171                // Method line:(Lcom/vladsch/flexmark/util/Ref;)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       5: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable lineIf(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #101                // Method lineIf:(Z)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       5: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable addLine();
    Code:
       0: aload_0
       1: invokevirtual #172                // Method addLine:()Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       4: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable line();
    Code:
       0: aload_0
       1: invokevirtual #100                // Method line:()Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       4: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable addAfterEolRunnable(int, java.lang.Runnable);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokevirtual #173                // Method addAfterEolRunnable:(ILjava/lang/Runnable;)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       6: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable popPrefix();
    Code:
       0: aload_0
       1: invokevirtual #174                // Method popPrefix:()Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       4: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable pushPrefix();
    Code:
       0: aload_0
       1: invokevirtual #175                // Method pushPrefix:()Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       4: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable addPrefix(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #176                // Method addPrefix:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       5: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable setPrefix(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #177                // Method setPrefix:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       5: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable setIndentPrefix(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #178                // Method setIndentPrefix:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       5: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable flush(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #179                // Method flush:(I)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       5: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable flushWhitespaces();
    Code:
       0: aload_0
       1: invokevirtual #180                // Method flushWhitespaces:()Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       4: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable flush();
    Code:
       0: aload_0
       1: invokevirtual #181                // Method flush:()Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       4: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable setOptions(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #182                // Method setOptions:(I)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       5: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable repeat(java.lang.CharSequence, int, int, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: iload         4
       6: invokevirtual #183                // Method repeat:(Ljava/lang/CharSequence;III)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       9: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable repeat(java.lang.CharSequence, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokevirtual #184                // Method repeat:(Ljava/lang/CharSequence;I)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       6: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable repeat(char, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokevirtual #185                // Method repeat:(CI)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       6: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable append(char);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #186                // Method append:(C)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       5: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable append(java.lang.CharSequence, int, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: invokevirtual #187                // Method append:(Ljava/lang/CharSequence;II)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       7: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable append(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #188                // Method append:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       5: areturn

  public java.lang.Appendable append(char) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #186                // Method append:(C)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       5: areturn

  public java.lang.Appendable append(java.lang.CharSequence, int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: invokevirtual #187                // Method append:(Ljava/lang/CharSequence;II)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       7: areturn

  public java.lang.Appendable append(java.lang.CharSequence) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #188                // Method append:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       5: areturn

  static com.vladsch.flexmark.util.html.FormattingAppendable access$000(com.vladsch.flexmark.util.html.HtmlFormattingAppendableBase);
    Code:
       0: aload_0
       1: getfield      #1                  // Field out:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: areturn
}
