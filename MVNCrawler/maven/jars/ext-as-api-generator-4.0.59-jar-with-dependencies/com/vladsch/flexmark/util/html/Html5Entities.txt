Compiled from "Html5Entities.java"
public class com.vladsch.flexmark.util.html.Html5Entities {
  private static final java.util.Map<java.lang.String, java.lang.String> NAMED_CHARACTER_REFERENCES;

  private static final java.util.regex.Pattern NUMERIC_PATTERN;

  private static final java.lang.String ENTITY_PATH;

  public com.vladsch.flexmark.util.html.Html5Entities();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static java.lang.String entityToString(java.lang.String);
    Code:
       0: getstatic     #2                  // Field NUMERIC_PATTERN:Ljava/util/regex/Pattern;
       3: aload_0
       4: invokevirtual #3                  // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
       7: astore_1
       8: aload_1
       9: invokevirtual #4                  // Method java/util/regex/Matcher.find:()Z
      12: ifeq          73
      15: aload_1
      16: invokevirtual #5                  // Method java/util/regex/Matcher.end:()I
      19: iconst_2
      20: if_icmpne     28
      23: bipush        10
      25: goto          30
      28: bipush        16
      30: istore_2
      31: aload_0
      32: aload_1
      33: invokevirtual #5                  // Method java/util/regex/Matcher.end:()I
      36: aload_0
      37: invokevirtual #6                  // Method java/lang/String.length:()I
      40: iconst_1
      41: isub
      42: invokevirtual #7                  // Method java/lang/String.substring:(II)Ljava/lang/String;
      45: iload_2
      46: invokestatic  #8                  // Method java/lang/Integer.parseInt:(Ljava/lang/String;I)I
      49: istore_3
      50: iload_3
      51: ifne          57
      54: ldc           #9                  // String �
      56: areturn
      57: new           #10                 // class java/lang/String
      60: dup
      61: iload_3
      62: invokestatic  #11                 // Method java/lang/Character.toChars:(I)[C
      65: invokespecial #12                 // Method java/lang/String."<init>":([C)V
      68: areturn
      69: astore_3
      70: ldc           #9                  // String �
      72: areturn
      73: aload_0
      74: iconst_1
      75: aload_0
      76: invokevirtual #6                  // Method java/lang/String.length:()I
      79: iconst_1
      80: isub
      81: invokevirtual #7                  // Method java/lang/String.substring:(II)Ljava/lang/String;
      84: astore_2
      85: getstatic     #14                 // Field NAMED_CHARACTER_REFERENCES:Ljava/util/Map;
      88: aload_2
      89: invokeinterface #15,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      94: checkcast     #10                 // class java/lang/String
      97: astore_3
      98: aload_3
      99: ifnull        104
     102: aload_3
     103: areturn
     104: aload_0
     105: areturn
    Exception table:
       from    to  target type
          31    56    69   Class java/lang/IllegalArgumentException
          57    68    69   Class java/lang/IllegalArgumentException

  public static com.vladsch.flexmark.util.sequence.BasedSequence entityToSequence(com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: getstatic     #2                  // Field NUMERIC_PATTERN:Ljava/util/regex/Pattern;
       3: aload_0
       4: invokevirtual #3                  // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
       7: astore_1
       8: aload_0
       9: iconst_0
      10: iconst_0
      11: invokeinterface #16,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      16: astore_2
      17: aload_1
      18: invokevirtual #4                  // Method java/util/regex/Matcher.find:()Z
      21: ifeq          101
      24: aload_1
      25: invokevirtual #5                  // Method java/util/regex/Matcher.end:()I
      28: iconst_2
      29: if_icmpne     37
      32: bipush        10
      34: goto          39
      37: bipush        16
      39: istore_3
      40: aload_0
      41: aload_1
      42: invokevirtual #5                  // Method java/util/regex/Matcher.end:()I
      45: aload_0
      46: invokeinterface #17,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      51: iconst_1
      52: isub
      53: invokeinterface #16,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      58: invokevirtual #18                 // Method java/lang/Object.toString:()Ljava/lang/String;
      61: iload_3
      62: invokestatic  #8                  // Method java/lang/Integer.parseInt:(Ljava/lang/String;I)I
      65: istore        4
      67: iload         4
      69: ifne          79
      72: ldc           #9                  // String �
      74: aload_2
      75: invokestatic  #19                 // Method com/vladsch/flexmark/util/sequence/PrefixedSubSequence.of:(Ljava/lang/String;Lcom/vladsch/flexmark/util/sequence/BasedSequence;)Lcom/vladsch/flexmark/util/sequence/PrefixedSubSequence;
      78: areturn
      79: iload         4
      81: invokestatic  #11                 // Method java/lang/Character.toChars:(I)[C
      84: invokestatic  #20                 // Method java/util/Arrays.toString:([C)Ljava/lang/String;
      87: aload_2
      88: invokestatic  #19                 // Method com/vladsch/flexmark/util/sequence/PrefixedSubSequence.of:(Ljava/lang/String;Lcom/vladsch/flexmark/util/sequence/BasedSequence;)Lcom/vladsch/flexmark/util/sequence/PrefixedSubSequence;
      91: areturn
      92: astore        4
      94: ldc           #9                  // String �
      96: aload_2
      97: invokestatic  #19                 // Method com/vladsch/flexmark/util/sequence/PrefixedSubSequence.of:(Ljava/lang/String;Lcom/vladsch/flexmark/util/sequence/BasedSequence;)Lcom/vladsch/flexmark/util/sequence/PrefixedSubSequence;
     100: areturn
     101: aload_0
     102: iconst_1
     103: aload_0
     104: invokeinterface #17,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
     109: iconst_1
     110: isub
     111: invokeinterface #16,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     116: invokevirtual #18                 // Method java/lang/Object.toString:()Ljava/lang/String;
     119: astore_3
     120: getstatic     #14                 // Field NAMED_CHARACTER_REFERENCES:Ljava/util/Map;
     123: aload_3
     124: invokeinterface #15,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
     129: checkcast     #10                 // class java/lang/String
     132: astore        4
     134: aload         4
     136: ifnull        146
     139: aload         4
     141: aload_2
     142: invokestatic  #19                 // Method com/vladsch/flexmark/util/sequence/PrefixedSubSequence.of:(Ljava/lang/String;Lcom/vladsch/flexmark/util/sequence/BasedSequence;)Lcom/vladsch/flexmark/util/sequence/PrefixedSubSequence;
     145: areturn
     146: aload_0
     147: areturn
    Exception table:
       from    to  target type
          40    78    92   Class java/lang/IllegalArgumentException
          79    91    92   Class java/lang/IllegalArgumentException

  private static java.util.Map<java.lang.String, java.lang.String> readEntities();
    Code:
       0: new           #21                 // class java/util/HashMap
       3: dup
       4: invokespecial #22                 // Method java/util/HashMap."<init>":()V
       7: astore_0
       8: ldc           #23                 // class com/vladsch/flexmark/util/html/Html5Entities
      10: ldc           #24                 // String /com/vladsch/flexmark/internal/util/entities.properties
      12: invokevirtual #25                 // Method java/lang/Class.getResourceAsStream:(Ljava/lang/String;)Ljava/io/InputStream;
      15: astore_1
      16: ldc           #26                 // String UTF-8
      18: invokestatic  #27                 // Method java/nio/charset/Charset.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;
      21: astore_2
      22: new           #28                 // class java/io/InputStreamReader
      25: dup
      26: aload_1
      27: aload_2
      28: invokespecial #29                 // Method java/io/InputStreamReader."<init>":(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V
      31: astore        4
      33: new           #30                 // class java/io/BufferedReader
      36: dup
      37: aload         4
      39: invokespecial #31                 // Method java/io/BufferedReader."<init>":(Ljava/io/Reader;)V
      42: astore        5
      44: aload         5
      46: invokevirtual #32                 // Method java/io/BufferedReader.readLine:()Ljava/lang/String;
      49: dup
      50: astore_3
      51: ifnull        105
      54: aload_3
      55: invokevirtual #6                  // Method java/lang/String.length:()I
      58: ifne          64
      61: goto          44
      64: aload_3
      65: ldc           #33                 // String =
      67: invokevirtual #34                 // Method java/lang/String.indexOf:(Ljava/lang/String;)I
      70: istore        6
      72: aload_3
      73: iconst_0
      74: iload         6
      76: invokevirtual #7                  // Method java/lang/String.substring:(II)Ljava/lang/String;
      79: astore        7
      81: aload_3
      82: iload         6
      84: iconst_1
      85: iadd
      86: invokevirtual #35                 // Method java/lang/String.substring:(I)Ljava/lang/String;
      89: astore        8
      91: aload_0
      92: aload         7
      94: aload         8
      96: invokeinterface #36,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     101: pop
     102: goto          44
     105: goto          120
     108: astore_3
     109: new           #38                 // class java/lang/IllegalStateException
     112: dup
     113: ldc           #39                 // String Failed reading data for HTML named character references
     115: aload_3
     116: invokespecial #40                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
     119: athrow
     120: aload_0
     121: ldc           #41                 // String NewLine
     123: ldc           #42                 // String \n
     125: invokeinterface #36,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     130: pop
     131: aload_0
     132: areturn
    Exception table:
       from    to  target type
          22   105   108   Class java/io/IOException

  static {};
    Code:
       0: invokestatic  #43                 // Method readEntities:()Ljava/util/Map;
       3: putstatic     #14                 // Field NAMED_CHARACTER_REFERENCES:Ljava/util/Map;
       6: ldc           #44                 // String ^&#[Xx]?
       8: invokestatic  #45                 // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
      11: putstatic     #2                  // Field NUMERIC_PATTERN:Ljava/util/regex/Pattern;
      14: return
}
