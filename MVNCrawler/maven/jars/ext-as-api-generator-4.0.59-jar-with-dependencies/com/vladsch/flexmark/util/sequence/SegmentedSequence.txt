Compiled from "SegmentedSequence.java"
public final class com.vladsch.flexmark.util.sequence.SegmentedSequence extends com.vladsch.flexmark.util.sequence.BasedSequenceImpl {
  private final com.vladsch.flexmark.util.sequence.BasedSequence baseSeq;

  private final char[] nonBaseChars;

  private final int[] baseOffsets;

  private final int baseStartOffset;

  private final int length;

  static final boolean $assertionsDisabled;

  public java.lang.Object getBase();
    Code:
       0: aload_0
       1: getfield      #2                  // Field baseSeq:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: invokeinterface #3,  1            // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getBase:()Ljava/lang/Object;
       9: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence getBaseSequence();
    Code:
       0: aload_0
       1: getfield      #2                  // Field baseSeq:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: invokeinterface #4,  1            // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getBaseSequence:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       9: areturn

  public int getStartOffset();
    Code:
       0: aload_0
       1: getfield      #5                  // Field baseOffsets:[I
       4: arraylength
       5: istore_1
       6: aload_0
       7: getfield      #6                  // Field nonBaseChars:[C
      10: ifnull        47
      13: aload_0
      14: getfield      #7                  // Field baseStartOffset:I
      17: istore_2
      18: iload_2
      19: iload_1
      20: if_icmpge     45
      23: aload_0
      24: getfield      #5                  // Field baseOffsets:[I
      27: iload_2
      28: iaload
      29: iflt          39
      32: aload_0
      33: getfield      #5                  // Field baseOffsets:[I
      36: iload_2
      37: iaload
      38: ireturn
      39: iinc          2, 1
      42: goto          18
      45: iconst_0
      46: ireturn
      47: iload_1
      48: ifle          63
      51: aload_0
      52: getfield      #5                  // Field baseOffsets:[I
      55: aload_0
      56: getfield      #7                  // Field baseStartOffset:I
      59: iaload
      60: goto          64
      63: iconst_0
      64: ireturn

  public int getEndOffset();
    Code:
       0: aload_0
       1: getfield      #5                  // Field baseOffsets:[I
       4: arraylength
       5: istore_1
       6: aload_0
       7: getfield      #6                  // Field nonBaseChars:[C
      10: ifnull        44
      13: iload_1
      14: istore_2
      15: iload_2
      16: iinc          2, -1
      19: aload_0
      20: getfield      #7                  // Field baseStartOffset:I
      23: if_icmple     42
      26: aload_0
      27: getfield      #5                  // Field baseOffsets:[I
      30: iload_2
      31: iaload
      32: iflt          15
      35: aload_0
      36: getfield      #5                  // Field baseOffsets:[I
      39: iload_2
      40: iaload
      41: ireturn
      42: iconst_0
      43: ireturn
      44: aload_0
      45: getfield      #8                  // Field length:I
      48: ifne          69
      51: iload_1
      52: ifle          67
      55: aload_0
      56: getfield      #5                  // Field baseOffsets:[I
      59: aload_0
      60: getfield      #7                  // Field baseStartOffset:I
      63: iaload
      64: goto          68
      67: iconst_0
      68: ireturn
      69: iload_1
      70: ifle          94
      73: aload_0
      74: getfield      #5                  // Field baseOffsets:[I
      77: aload_0
      78: getfield      #7                  // Field baseStartOffset:I
      81: aload_0
      82: getfield      #8                  // Field length:I
      85: iadd
      86: iconst_1
      87: isub
      88: iaload
      89: iconst_1
      90: iadd
      91: goto          95
      94: iconst_0
      95: ireturn

  public com.vladsch.flexmark.util.sequence.Range getIndexRange(int, int);
    Code:
       0: ldc           #9                  // int -2147483648
       2: istore_3
       3: ldc           #9                  // int -2147483648
       5: istore        4
       7: iconst_0
       8: istore        5
      10: iload         5
      12: aload_0
      13: getfield      #5                  // Field baseOffsets:[I
      16: arraylength
      17: if_icmpge     71
      20: aload_0
      21: getfield      #5                  // Field baseOffsets:[I
      24: iload         5
      26: iaload
      27: iload_1
      28: if_icmpne     34
      31: iload         5
      33: istore_3
      34: aload_0
      35: getfield      #5                  // Field baseOffsets:[I
      38: iload         5
      40: iaload
      41: iload_2
      42: if_icmpne     49
      45: iload         5
      47: istore        4
      49: iload_3
      50: ldc           #9                  // int -2147483648
      52: if_icmpeq     65
      55: iload         4
      57: ldc           #9                  // int -2147483648
      59: if_icmpeq     65
      62: goto          71
      65: iinc          5, 1
      68: goto          10
      71: iload_3
      72: ifge          77
      75: iconst_0
      76: istore_3
      77: iload         4
      79: iload_3
      80: if_icmpge     86
      83: iload_3
      84: istore        4
      86: iload_3
      87: iload         4
      89: if_icmple     95
      92: iload         4
      94: istore_3
      95: iload_3
      96: iload         4
      98: invokestatic  #10                 // Method com/vladsch/flexmark/util/sequence/Range.of:(II)Lcom/vladsch/flexmark/util/sequence/Range;
     101: areturn

  public int[] getBaseOffsets();
    Code:
       0: aload_0
       1: getfield      #5                  // Field baseOffsets:[I
       4: areturn

  public int getBaseStartOffset();
    Code:
       0: aload_0
       1: getfield      #7                  // Field baseStartOffset:I
       4: ireturn

  public int getIndexOffset(int);
    Code:
       0: iload_1
       1: iflt          12
       4: iload_1
       5: aload_0
       6: getfield      #8                  // Field length:I
       9: if_icmple     51
      12: new           #11                 // class java/lang/StringIndexOutOfBoundsException
      15: dup
      16: new           #12                 // class java/lang/StringBuilder
      19: dup
      20: invokespecial #13                 // Method java/lang/StringBuilder."<init>":()V
      23: ldc           #14                 // String String index:
      25: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: iload_1
      29: invokevirtual #16                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      32: ldc           #17                 // String  out of range: 0,
      34: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      37: aload_0
      38: invokevirtual #18                 // Method length:()I
      41: invokevirtual #16                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      44: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      47: invokespecial #20                 // Method java/lang/StringIndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      50: athrow
      51: iload_1
      52: aload_0
      53: getfield      #8                  // Field length:I
      56: if_icmpne     126
      59: iload_1
      60: ifne          102
      63: new           #11                 // class java/lang/StringIndexOutOfBoundsException
      66: dup
      67: new           #12                 // class java/lang/StringBuilder
      70: dup
      71: invokespecial #13                 // Method java/lang/StringBuilder."<init>":()V
      74: ldc           #14                 // String String index:
      76: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      79: iload_1
      80: invokevirtual #16                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      83: ldc           #17                 // String  out of range: 0,
      85: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      88: aload_0
      89: invokevirtual #18                 // Method length:()I
      92: invokevirtual #16                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      95: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      98: invokespecial #20                 // Method java/lang/StringIndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
     101: athrow
     102: aload_0
     103: getfield      #5                  // Field baseOffsets:[I
     106: aload_0
     107: getfield      #7                  // Field baseStartOffset:I
     110: iload_1
     111: iadd
     112: iconst_1
     113: isub
     114: iaload
     115: istore_2
     116: iload_2
     117: ifge          122
     120: iconst_m1
     121: ireturn
     122: iload_2
     123: iconst_1
     124: iadd
     125: ireturn
     126: aload_0
     127: getfield      #5                  // Field baseOffsets:[I
     130: aload_0
     131: getfield      #7                  // Field baseStartOffset:I
     134: iload_1
     135: iadd
     136: iaload
     137: istore_2
     138: iload_2
     139: ifge          146
     142: iconst_m1
     143: goto          147
     146: iload_2
     147: ireturn

  public static com.vladsch.flexmark.util.sequence.BasedSequence of(java.util.List<com.vladsch.flexmark.util.sequence.BasedSequence>, com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: invokeinterface #21,  1           // InterfaceMethod java/util/List.size:()I
       6: ifne          11
       9: aload_1
      10: areturn
      11: aconst_null
      12: astore_2
      13: aload_0
      14: iconst_0
      15: invokeinterface #22,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      20: checkcast     #23                 // class com/vladsch/flexmark/util/sequence/BasedSequence
      23: astore_3
      24: aload_3
      25: invokeinterface #4,  1            // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getBaseSequence:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      30: astore        4
      32: new           #24                 // class java/util/ArrayList
      35: dup
      36: invokespecial #25                 // Method java/util/ArrayList."<init>":()V
      39: astore        5
      41: aload_0
      42: invokeinterface #26,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      47: astore        6
      49: aload         6
      51: invokeinterface #27,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      56: ifeq          226
      59: aload         6
      61: invokeinterface #28,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      66: checkcast     #23                 // class com/vladsch/flexmark/util/sequence/BasedSequence
      69: astore        7
      71: aload         4
      73: invokeinterface #3,  1            // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getBase:()Ljava/lang/Object;
      78: aload         7
      80: invokeinterface #3,  1            // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getBase:()Ljava/lang/Object;
      85: if_acmpeq     91
      88: iconst_0
      89: istore        8
      91: getstatic     #29                 // Field $assertionsDisabled:Z
      94: ifne          124
      97: aload         4
      99: invokeinterface #3,  1            // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getBase:()Ljava/lang/Object;
     104: aload         7
     106: invokeinterface #3,  1            // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getBase:()Ljava/lang/Object;
     111: if_acmpeq     124
     114: new           #30                 // class java/lang/AssertionError
     117: dup
     118: ldc           #31                 // String all segments must come from the same base sequence
     120: invokespecial #32                 // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
     123: athrow
     124: aload         7
     126: instanceof    #33                 // class com/vladsch/flexmark/util/sequence/PrefixedSubSequence
     129: ifne          140
     132: aload         7
     134: instanceof    #34                 // class com/vladsch/flexmark/util/sequence/SegmentedSequence
     137: ifeq          164
     140: aload_2
     141: ifnull        151
     144: aload         5
     146: aload_2
     147: invokevirtual #35                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
     150: pop
     151: aload         5
     153: aload         7
     155: invokevirtual #35                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
     158: pop
     159: aconst_null
     160: astore_2
     161: goto          223
     164: aload_2
     165: ifnonnull     174
     168: aload         7
     170: astore_2
     171: goto          223
     174: aload_2
     175: invokeinterface #36,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
     180: aload         7
     182: invokeinterface #37,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
     187: if_icmpeq     203
     190: aload         5
     192: aload_2
     193: invokevirtual #35                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
     196: pop
     197: aload         7
     199: astore_2
     200: goto          223
     203: aload_2
     204: aload_2
     205: invokeinterface #37,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
     210: aload         7
     212: invokeinterface #36,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
     217: invokeinterface #38,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.baseSubSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     222: astore_2
     223: goto          49
     226: aload_2
     227: ifnull        237
     230: aload         5
     232: aload_2
     233: invokevirtual #35                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
     236: pop
     237: aload         5
     239: invokevirtual #39                 // Method java/util/ArrayList.size:()I
     242: iconst_1
     243: if_icmpne     256
     246: aload         5
     248: iconst_0
     249: invokevirtual #40                 // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
     252: checkcast     #23                 // class com/vladsch/flexmark/util/sequence/BasedSequence
     255: areturn
     256: new           #34                 // class com/vladsch/flexmark/util/sequence/SegmentedSequence
     259: dup
     260: aload         5
     262: invokespecial #41                 // Method "<init>":(Ljava/util/List;)V
     265: areturn

  private com.vladsch.flexmark.util.sequence.SegmentedSequence(java.util.List<com.vladsch.flexmark.util.sequence.BasedSequence>);
    Code:
       0: aload_0
       1: invokespecial #42                 // Method com/vladsch/flexmark/util/sequence/BasedSequenceImpl."<init>":()V
       4: aload_0
       5: aload_1
       6: iconst_0
       7: invokeinterface #22,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      12: checkcast     #23                 // class com/vladsch/flexmark/util/sequence/BasedSequence
      15: invokeinterface #4,  1            // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getBaseSequence:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      20: putfield      #2                  // Field baseSeq:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      23: iconst_0
      24: istore_2
      25: aload_1
      26: invokeinterface #21,  1           // InterfaceMethod java/util/List.size:()I
      31: ifle          52
      34: aload_1
      35: iconst_0
      36: invokeinterface #22,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      41: checkcast     #23                 // class com/vladsch/flexmark/util/sequence/BasedSequence
      44: invokeinterface #4,  1            // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getBaseSequence:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      49: goto          55
      52: getstatic     #43                 // Field com/vladsch/flexmark/util/sequence/SubSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      55: astore_3
      56: aload_1
      57: invokeinterface #26,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      62: astore        4
      64: aload         4
      66: invokeinterface #27,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      71: ifeq          209
      74: aload         4
      76: invokeinterface #28,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      81: checkcast     #23                 // class com/vladsch/flexmark/util/sequence/BasedSequence
      84: astore        5
      86: aload_3
      87: invokeinterface #3,  1            // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getBase:()Ljava/lang/Object;
      92: aload         5
      94: invokeinterface #3,  1            // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getBase:()Ljava/lang/Object;
      99: if_acmpeq     105
     102: iconst_0
     103: istore        6
     105: getstatic     #29                 // Field $assertionsDisabled:Z
     108: ifne          137
     111: aload_3
     112: invokeinterface #3,  1            // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getBase:()Ljava/lang/Object;
     117: aload         5
     119: invokeinterface #3,  1            // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getBase:()Ljava/lang/Object;
     124: if_acmpeq     137
     127: new           #30                 // class java/lang/AssertionError
     130: dup
     131: ldc           #31                 // String all segments must come from the same base sequence
     133: invokespecial #32                 // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
     136: athrow
     137: getstatic     #29                 // Field $assertionsDisabled:Z
     140: ifne          196
     143: aload         5
     145: invokeinterface #37,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
     150: iload_2
     151: if_icmpge     196
     154: new           #30                 // class java/lang/AssertionError
     157: dup
     158: new           #12                 // class java/lang/StringBuilder
     161: dup
     162: invokespecial #13                 // Method java/lang/StringBuilder."<init>":()V
     165: ldc           #44                 // String segments must be in increasing index order from base sequence start=
     167: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     170: aload         5
     172: invokeinterface #37,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
     177: invokevirtual #16                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     180: ldc           #45                 // String , length=
     182: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     185: iload_2
     186: invokevirtual #16                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     189: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     192: invokespecial #32                 // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
     195: athrow
     196: iload_2
     197: aload         5
     199: invokeinterface #46,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
     204: iadd
     205: istore_2
     206: goto          64
     209: aload_0
     210: iconst_0
     211: putfield      #7                  // Field baseStartOffset:I
     214: aload_0
     215: iload_2
     216: putfield      #8                  // Field length:I
     219: aload_0
     220: iload_2
     221: newarray       int
     223: putfield      #5                  // Field baseOffsets:[I
     226: iconst_0
     227: istore_2
     228: aconst_null
     229: astore        4
     231: aload_1
     232: invokeinterface #26,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     237: astore        5
     239: aload         5
     241: invokeinterface #27,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     246: ifeq          358
     249: aload         5
     251: invokeinterface #28,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     256: checkcast     #23                 // class com/vladsch/flexmark/util/sequence/BasedSequence
     259: astore        6
     261: aload         6
     263: invokeinterface #46,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
     268: istore        7
     270: iconst_0
     271: istore        8
     273: iload         8
     275: iload         7
     277: if_icmpge     350
     280: aload         6
     282: iload         8
     284: invokeinterface #47,  2           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getIndexOffset:(I)I
     289: istore        9
     291: iload         9
     293: ifge          333
     296: aload         4
     298: ifnonnull     310
     301: new           #12                 // class java/lang/StringBuilder
     304: dup
     305: invokespecial #13                 // Method java/lang/StringBuilder."<init>":()V
     308: astore        4
     310: aload         4
     312: aload         6
     314: iload         8
     316: invokeinterface #48,  2           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.charAt:(I)C
     321: invokevirtual #49                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
     324: pop
     325: aload         4
     327: invokevirtual #50                 // Method java/lang/StringBuilder.length:()I
     330: ineg
     331: istore        9
     333: aload_0
     334: getfield      #5                  // Field baseOffsets:[I
     337: iload         8
     339: iload_2
     340: iadd
     341: iload         9
     343: iastore
     344: iinc          8, 1
     347: goto          273
     350: iload_2
     351: iload         7
     353: iadd
     354: istore_2
     355: goto          239
     358: aload         4
     360: ifnull        378
     363: aload_0
     364: aload         4
     366: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     369: invokevirtual #51                 // Method java/lang/String.toCharArray:()[C
     372: putfield      #6                  // Field nonBaseChars:[C
     375: goto          383
     378: aload_0
     379: aconst_null
     380: putfield      #6                  // Field nonBaseChars:[C
     383: return

  private com.vladsch.flexmark.util.sequence.SegmentedSequence(com.vladsch.flexmark.util.sequence.BasedSequence, int[], int, char[], int);
    Code:
       0: aload_0
       1: invokespecial #42                 // Method com/vladsch/flexmark/util/sequence/BasedSequenceImpl."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field baseSeq:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       9: aload_0
      10: aload_2
      11: putfield      #5                  // Field baseOffsets:[I
      14: aload_0
      15: iload_3
      16: putfield      #7                  // Field baseStartOffset:I
      19: aload_0
      20: aload         4
      22: putfield      #6                  // Field nonBaseChars:[C
      25: aload_0
      26: iload         5
      28: putfield      #8                  // Field length:I
      31: return

  public int length();
    Code:
       0: aload_0
       1: getfield      #8                  // Field length:I
       4: ireturn

  public com.vladsch.flexmark.util.sequence.Range getSourceRange();
    Code:
       0: new           #52                 // class com/vladsch/flexmark/util/sequence/Range
       3: dup
       4: aload_0
       5: invokevirtual #53                 // Method getStartOffset:()I
       8: aload_0
       9: invokevirtual #54                 // Method getEndOffset:()I
      12: invokespecial #55                 // Method com/vladsch/flexmark/util/sequence/Range."<init>":(II)V
      15: areturn

  public char charAt(int);
    Code:
       0: iload_1
       1: iflt          12
       4: iload_1
       5: aload_0
       6: getfield      #8                  // Field length:I
       9: if_icmplt     51
      12: new           #11                 // class java/lang/StringIndexOutOfBoundsException
      15: dup
      16: new           #12                 // class java/lang/StringBuilder
      19: dup
      20: invokespecial #13                 // Method java/lang/StringBuilder."<init>":()V
      23: ldc           #14                 // String String index:
      25: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: iload_1
      29: invokevirtual #16                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      32: ldc           #17                 // String  out of range: 0,
      34: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      37: aload_0
      38: invokevirtual #18                 // Method length:()I
      41: invokevirtual #16                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      44: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      47: invokespecial #20                 // Method java/lang/StringIndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      50: athrow
      51: aload_0
      52: getfield      #5                  // Field baseOffsets:[I
      55: aload_0
      56: getfield      #7                  // Field baseStartOffset:I
      59: iload_1
      60: iadd
      61: iaload
      62: istore_2
      63: iload_2
      64: ifge          77
      67: aload_0
      68: getfield      #6                  // Field nonBaseChars:[C
      71: iload_2
      72: ineg
      73: iconst_1
      74: isub
      75: caload
      76: ireturn
      77: aload_0
      78: getfield      #2                  // Field baseSeq:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      81: iload_2
      82: invokeinterface #48,  2           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.charAt:(I)C
      87: ireturn

  public com.vladsch.flexmark.util.sequence.BasedSequence baseSubSequence(int, int);
    Code:
       0: iload_1
       1: iflt          17
       4: iload_1
       5: aload_0
       6: getfield      #2                  // Field baseSeq:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       9: invokeinterface #46,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      14: if_icmple     44
      17: new           #11                 // class java/lang/StringIndexOutOfBoundsException
      20: dup
      21: new           #12                 // class java/lang/StringBuilder
      24: dup
      25: invokespecial #13                 // Method java/lang/StringBuilder."<init>":()V
      28: ldc           #56                 // String String index out of range:
      30: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: iload_1
      34: invokevirtual #16                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      37: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      40: invokespecial #20                 // Method java/lang/StringIndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      43: athrow
      44: iload_2
      45: iflt          61
      48: iload_2
      49: aload_0
      50: getfield      #2                  // Field baseSeq:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      53: invokeinterface #46,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      58: if_icmple     88
      61: new           #11                 // class java/lang/StringIndexOutOfBoundsException
      64: dup
      65: new           #12                 // class java/lang/StringBuilder
      68: dup
      69: invokespecial #13                 // Method java/lang/StringBuilder."<init>":()V
      72: ldc           #56                 // String String index out of range:
      74: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      77: iload_2
      78: invokevirtual #16                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      81: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      84: invokespecial #20                 // Method java/lang/StringIndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      87: athrow
      88: aload_0
      89: getfield      #2                  // Field baseSeq:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      92: iload_1
      93: iload_2
      94: invokeinterface #38,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.baseSubSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      99: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence subSequence(int, int);
    Code:
       0: iload_1
       1: iflt          12
       4: iload_1
       5: aload_0
       6: getfield      #8                  // Field length:I
       9: if_icmple     39
      12: new           #11                 // class java/lang/StringIndexOutOfBoundsException
      15: dup
      16: new           #12                 // class java/lang/StringBuilder
      19: dup
      20: invokespecial #13                 // Method java/lang/StringBuilder."<init>":()V
      23: ldc           #56                 // String String index out of range:
      25: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: iload_1
      29: invokevirtual #16                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      32: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      35: invokespecial #20                 // Method java/lang/StringIndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      38: athrow
      39: iload_2
      40: iflt          51
      43: iload_2
      44: aload_0
      45: getfield      #8                  // Field length:I
      48: if_icmple     78
      51: new           #11                 // class java/lang/StringIndexOutOfBoundsException
      54: dup
      55: new           #12                 // class java/lang/StringBuilder
      58: dup
      59: invokespecial #13                 // Method java/lang/StringBuilder."<init>":()V
      62: ldc           #56                 // String String index out of range:
      64: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      67: iload_2
      68: invokevirtual #16                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      71: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      74: invokespecial #20                 // Method java/lang/StringIndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      77: athrow
      78: iload_1
      79: ifne          92
      82: iload_2
      83: aload_0
      84: getfield      #8                  // Field length:I
      87: if_icmpne     92
      90: aload_0
      91: areturn
      92: new           #34                 // class com/vladsch/flexmark/util/sequence/SegmentedSequence
      95: dup
      96: aload_0
      97: getfield      #2                  // Field baseSeq:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     100: aload_0
     101: getfield      #5                  // Field baseOffsets:[I
     104: aload_0
     105: getfield      #7                  // Field baseStartOffset:I
     108: iload_1
     109: iadd
     110: aload_0
     111: getfield      #6                  // Field nonBaseChars:[C
     114: iload_2
     115: iload_1
     116: isub
     117: invokespecial #57                 // Method "<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;[II[CI)V
     120: areturn

  public int hashCode();
    Code:
       0: aload_0
       1: invokevirtual #58                 // Method toString:()Ljava/lang/String;
       4: invokevirtual #59                 // Method java/lang/String.hashCode:()I
       7: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: aload_0
       2: if_acmpeq     26
       5: aload_1
       6: instanceof    #60                 // class java/lang/CharSequence
       9: ifeq          30
      12: aload_0
      13: invokevirtual #58                 // Method toString:()Ljava/lang/String;
      16: aload_1
      17: invokevirtual #61                 // Method java/lang/Object.toString:()Ljava/lang/String;
      20: invokevirtual #62                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      23: ifeq          30
      26: iconst_1
      27: goto          31
      30: iconst_0
      31: ireturn

  public java.lang.CharSequence subSequence(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokevirtual #63                 // Method subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       6: areturn

  static {};
    Code:
       0: ldc           #34                 // class com/vladsch/flexmark/util/sequence/SegmentedSequence
       2: invokevirtual #64                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #29                 // Field $assertionsDisabled:Z
      16: return
}
