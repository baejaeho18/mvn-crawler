Compiled from "MutableAttributeImpl.java"
public class com.vladsch.flexmark.util.html.MutableAttributeImpl implements com.vladsch.flexmark.util.html.MutableAttribute {
  private final java.lang.String myName;

  private final char myValueListDelimiter;

  private final char myValueNameDelimiter;

  private java.lang.String myValue;

  private java.util.LinkedHashMap<java.lang.String, java.lang.String> myValues;

  private com.vladsch.flexmark.util.html.MutableAttributeImpl(java.lang.CharSequence, java.lang.CharSequence, char, char);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: instanceof    #3                  // class java/lang/String
       9: ifeq          19
      12: aload_1
      13: checkcast     #3                  // class java/lang/String
      16: goto          23
      19: aload_1
      20: invokestatic  #4                  // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
      23: putfield      #5                  // Field myName:Ljava/lang/String;
      26: aload_0
      27: iload_3
      28: putfield      #6                  // Field myValueListDelimiter:C
      31: aload_0
      32: iload         4
      34: putfield      #1                  // Field myValueNameDelimiter:C
      37: aload_0
      38: aload_2
      39: ifnonnull     47
      42: ldc           #7                  // String
      44: goto          65
      47: aload_2
      48: instanceof    #3                  // class java/lang/String
      51: ifeq          61
      54: aload_2
      55: checkcast     #3                  // class java/lang/String
      58: goto          65
      61: aload_2
      62: invokestatic  #4                  // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
      65: putfield      #8                  // Field myValue:Ljava/lang/String;
      68: aload_0
      69: aconst_null
      70: putfield      #9                  // Field myValues:Ljava/util/LinkedHashMap;
      73: return

  public char getValueListDelimiter();
    Code:
       0: aload_0
       1: getfield      #6                  // Field myValueListDelimiter:C
       4: ireturn

  public char getValueNameDelimiter();
    Code:
       0: aload_0
       1: getfield      #1                  // Field myValueNameDelimiter:C
       4: ireturn

  public com.vladsch.flexmark.util.html.Attribute toImmutable();
    Code:
       0: aload_0
       1: invokestatic  #10                 // Method com/vladsch/flexmark/util/html/AttributeImpl.of:(Lcom/vladsch/flexmark/util/html/Attribute;)Lcom/vladsch/flexmark/util/html/AttributeImpl;
       4: areturn

  public com.vladsch.flexmark.util.html.MutableAttribute toMutable();
    Code:
       0: aload_0
       1: areturn

  public com.vladsch.flexmark.util.html.MutableAttribute copy();
    Code:
       0: aload_0
       1: invokestatic  #11                 // Method of:(Lcom/vladsch/flexmark/util/html/Attribute;)Lcom/vladsch/flexmark/util/html/MutableAttributeImpl;
       4: areturn

  public java.lang.String getName();
    Code:
       0: aload_0
       1: getfield      #5                  // Field myName:Ljava/lang/String;
       4: areturn

  public java.lang.String getValue();
    Code:
       0: aload_0
       1: getfield      #8                  // Field myValue:Ljava/lang/String;
       4: ifnonnull     15
       7: aload_0
       8: aload_0
       9: invokevirtual #12                 // Method valueFromMap:()Ljava/lang/String;
      12: putfield      #8                  // Field myValue:Ljava/lang/String;
      15: aload_0
      16: getfield      #8                  // Field myValue:Ljava/lang/String;
      19: areturn

  public void resetToValuesMap();
    Code:
       0: aload_0
       1: getfield      #9                  // Field myValues:Ljava/util/LinkedHashMap;
       4: ifnonnull     17
       7: new           #13                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #14                 // String resetToValuesMap called when myValues is null
      13: invokespecial #15                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: aconst_null
      19: putfield      #8                  // Field myValue:Ljava/lang/String;
      22: return

  protected java.util.Map<java.lang.String, java.lang.String> getValueMap();
    Code:
       0: aload_0
       1: getfield      #9                  // Field myValues:Ljava/util/LinkedHashMap;
       4: ifnonnull     194
       7: aload_0
       8: new           #16                 // class java/util/LinkedHashMap
      11: dup
      12: invokespecial #17                 // Method java/util/LinkedHashMap."<init>":()V
      15: putfield      #9                  // Field myValues:Ljava/util/LinkedHashMap;
      18: aload_0
      19: getfield      #6                  // Field myValueListDelimiter:C
      22: ifeq          180
      25: aload_0
      26: getfield      #8                  // Field myValue:Ljava/lang/String;
      29: invokevirtual #18                 // Method java/lang/String.isEmpty:()Z
      32: ifne          194
      35: iconst_0
      36: istore_1
      37: iload_1
      38: aload_0
      39: getfield      #8                  // Field myValue:Ljava/lang/String;
      42: invokevirtual #19                 // Method java/lang/String.length:()I
      45: if_icmpge     177
      48: aload_0
      49: getfield      #8                  // Field myValue:Ljava/lang/String;
      52: aload_0
      53: getfield      #6                  // Field myValueListDelimiter:C
      56: iload_1
      57: invokevirtual #20                 // Method java/lang/String.indexOf:(II)I
      60: istore_2
      61: iload_2
      62: iconst_m1
      63: if_icmpne     76
      66: aload_0
      67: getfield      #8                  // Field myValue:Ljava/lang/String;
      70: invokevirtual #19                 // Method java/lang/String.length:()I
      73: goto          77
      76: iload_2
      77: istore_3
      78: iload_1
      79: iload_3
      80: if_icmpge     162
      83: aload_0
      84: getfield      #8                  // Field myValue:Ljava/lang/String;
      87: iload_1
      88: iload_3
      89: invokevirtual #21                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      92: astore        4
      94: aload_0
      95: getfield      #1                  // Field myValueNameDelimiter:C
      98: ifeq          113
     101: aload         4
     103: aload_0
     104: getfield      #1                  // Field myValueNameDelimiter:C
     107: invokevirtual #22                 // Method java/lang/String.indexOf:(I)I
     110: goto          114
     113: iconst_m1
     114: istore        5
     116: iload         5
     118: iconst_m1
     119: if_icmpne     137
     122: aload_0
     123: getfield      #9                  // Field myValues:Ljava/util/LinkedHashMap;
     126: aload         4
     128: ldc           #7                  // String
     130: invokevirtual #23                 // Method java/util/LinkedHashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     133: pop
     134: goto          162
     137: aload_0
     138: getfield      #9                  // Field myValues:Ljava/util/LinkedHashMap;
     141: aload         4
     143: iconst_0
     144: iload         5
     146: invokevirtual #21                 // Method java/lang/String.substring:(II)Ljava/lang/String;
     149: aload         4
     151: iload         5
     153: iconst_1
     154: iadd
     155: invokevirtual #24                 // Method java/lang/String.substring:(I)Ljava/lang/String;
     158: invokevirtual #23                 // Method java/util/LinkedHashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     161: pop
     162: iload_2
     163: iconst_m1
     164: if_icmpne     170
     167: goto          177
     170: iload_3
     171: iconst_1
     172: iadd
     173: istore_1
     174: goto          37
     177: goto          194
     180: aload_0
     181: getfield      #9                  // Field myValues:Ljava/util/LinkedHashMap;
     184: aload_0
     185: getfield      #8                  // Field myValue:Ljava/lang/String;
     188: ldc           #7                  // String
     190: invokevirtual #23                 // Method java/util/LinkedHashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     193: pop
     194: aload_0
     195: getfield      #9                  // Field myValues:Ljava/util/LinkedHashMap;
     198: areturn

  protected java.lang.String valueFromMap();
    Code:
       0: aload_0
       1: getfield      #6                  // Field myValueListDelimiter:C
       4: ifeq          227
       7: new           #25                 // class java/lang/StringBuilder
      10: dup
      11: invokespecial #26                 // Method java/lang/StringBuilder."<init>":()V
      14: astore_1
      15: aload_0
      16: getfield      #1                  // Field myValueNameDelimiter:C
      19: ifeq          130
      22: aload_0
      23: getfield      #9                  // Field myValues:Ljava/util/LinkedHashMap;
      26: invokevirtual #27                 // Method java/util/LinkedHashMap.entrySet:()Ljava/util/Set;
      29: invokeinterface #28,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      34: astore_2
      35: aload_2
      36: invokeinterface #29,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      41: ifeq          127
      44: aload_2
      45: invokeinterface #30,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      50: checkcast     #31                 // class java/util/Map$Entry
      53: astore_3
      54: aload_3
      55: invokeinterface #32,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      60: checkcast     #3                  // class java/lang/String
      63: invokevirtual #18                 // Method java/lang/String.isEmpty:()Z
      66: ifne          124
      69: aload_3
      70: invokeinterface #33,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      75: checkcast     #3                  // class java/lang/String
      78: invokevirtual #18                 // Method java/lang/String.isEmpty:()Z
      81: ifne          124
      84: aload_1
      85: aload_3
      86: invokeinterface #32,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      91: checkcast     #3                  // class java/lang/String
      94: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      97: aload_0
      98: getfield      #1                  // Field myValueNameDelimiter:C
     101: invokevirtual #35                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
     104: aload_3
     105: invokeinterface #33,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
     110: checkcast     #3                  // class java/lang/String
     113: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     116: aload_0
     117: getfield      #6                  // Field myValueListDelimiter:C
     120: invokevirtual #35                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
     123: pop
     124: goto          35
     127: goto          185
     130: aload_0
     131: getfield      #9                  // Field myValues:Ljava/util/LinkedHashMap;
     134: invokevirtual #36                 // Method java/util/LinkedHashMap.keySet:()Ljava/util/Set;
     137: invokeinterface #28,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
     142: astore_2
     143: aload_2
     144: invokeinterface #29,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     149: ifeq          185
     152: aload_2
     153: invokeinterface #30,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     158: checkcast     #3                  // class java/lang/String
     161: astore_3
     162: aload_3
     163: invokevirtual #18                 // Method java/lang/String.isEmpty:()Z
     166: ifne          182
     169: aload_1
     170: aload_3
     171: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     174: aload_0
     175: getfield      #6                  // Field myValueListDelimiter:C
     178: invokevirtual #35                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
     181: pop
     182: goto          143
     185: aload_0
     186: getfield      #6                  // Field myValueListDelimiter:C
     189: bipush        32
     191: if_icmpne     216
     194: aload_1
     195: invokevirtual #37                 // Method java/lang/StringBuilder.length:()I
     198: ifle          216
     201: aload_1
     202: aload_1
     203: invokevirtual #37                 // Method java/lang/StringBuilder.length:()I
     206: iconst_1
     207: isub
     208: aload_1
     209: invokevirtual #37                 // Method java/lang/StringBuilder.length:()I
     212: invokevirtual #38                 // Method java/lang/StringBuilder.delete:(II)Ljava/lang/StringBuilder;
     215: pop
     216: aload_0
     217: aload_1
     218: invokevirtual #39                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     221: putfield      #8                  // Field myValue:Ljava/lang/String;
     224: goto          273
     227: aload_0
     228: aload_0
     229: getfield      #9                  // Field myValues:Ljava/util/LinkedHashMap;
     232: ifnull        245
     235: aload_0
     236: getfield      #9                  // Field myValues:Ljava/util/LinkedHashMap;
     239: invokevirtual #40                 // Method java/util/LinkedHashMap.isEmpty:()Z
     242: ifeq          250
     245: ldc           #7                  // String
     247: goto          270
     250: aload_0
     251: getfield      #9                  // Field myValues:Ljava/util/LinkedHashMap;
     254: invokevirtual #36                 // Method java/util/LinkedHashMap.keySet:()Ljava/util/Set;
     257: invokeinterface #28,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
     262: invokeinterface #30,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     267: checkcast     #3                  // class java/lang/String
     270: putfield      #8                  // Field myValue:Ljava/lang/String;
     273: aload_0
     274: getfield      #8                  // Field myValue:Ljava/lang/String;
     277: areturn

  public boolean isNonRendering();
    Code:
       0: aload_0
       1: getfield      #5                  // Field myName:Ljava/lang/String;
       4: bipush        32
       6: invokevirtual #22                 // Method java/lang/String.indexOf:(I)I
       9: iconst_m1
      10: if_icmpne     38
      13: aload_0
      14: getfield      #8                  // Field myValue:Ljava/lang/String;
      17: invokevirtual #18                 // Method java/lang/String.isEmpty:()Z
      20: ifeq          42
      23: getstatic     #41                 // Field NON_RENDERING_WHEN_EMPTY:Ljava/util/Set;
      26: aload_0
      27: getfield      #5                  // Field myName:Ljava/lang/String;
      30: invokeinterface #42,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      35: ifeq          42
      38: iconst_1
      39: goto          43
      42: iconst_0
      43: ireturn

  public com.vladsch.flexmark.util.html.MutableAttributeImpl replaceValue(java.lang.CharSequence);
    Code:
       0: aload_1
       1: ifnonnull     9
       4: ldc           #7                  // String
       6: goto          27
       9: aload_1
      10: instanceof    #3                  // class java/lang/String
      13: ifeq          23
      16: aload_1
      17: checkcast     #3                  // class java/lang/String
      20: goto          27
      23: aload_1
      24: invokestatic  #4                  // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
      27: astore_2
      28: aload_0
      29: getfield      #8                  // Field myValue:Ljava/lang/String;
      32: ifnull        50
      35: aload_1
      36: ifnull        50
      39: aload_0
      40: getfield      #8                  // Field myValue:Ljava/lang/String;
      43: aload_2
      44: invokevirtual #43                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      47: ifne          60
      50: aload_0
      51: aload_2
      52: putfield      #8                  // Field myValue:Ljava/lang/String;
      55: aload_0
      56: aconst_null
      57: putfield      #9                  // Field myValues:Ljava/util/LinkedHashMap;
      60: aload_0
      61: areturn

  public com.vladsch.flexmark.util.html.MutableAttributeImpl setValue(java.lang.CharSequence);
    Code:
       0: aload_0
       1: getfield      #6                  // Field myValueListDelimiter:C
       4: ifeq          47
       7: aload_1
       8: ifnull        105
      11: aload_1
      12: invokeinterface #44,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      17: ifeq          105
      20: aload_0
      21: invokevirtual #45                 // Method getValueMap:()Ljava/util/Map;
      24: astore_2
      25: aload_0
      26: aload_1
      27: new           #46                 // class com/vladsch/flexmark/util/html/MutableAttributeImpl$1
      30: dup
      31: aload_0
      32: aload_2
      33: invokespecial #47                 // Method com/vladsch/flexmark/util/html/MutableAttributeImpl$1."<init>":(Lcom/vladsch/flexmark/util/html/MutableAttributeImpl;Ljava/util/Map;)V
      36: invokespecial #48                 // Method forEachValue:(Ljava/lang/CharSequence;Lcom/vladsch/flexmark/util/BiConsumer;)V
      39: aload_0
      40: aconst_null
      41: putfield      #8                  // Field myValue:Ljava/lang/String;
      44: goto          105
      47: aload_0
      48: getfield      #8                  // Field myValue:Ljava/lang/String;
      51: ifnull        69
      54: aload_1
      55: ifnull        69
      58: aload_0
      59: getfield      #8                  // Field myValue:Ljava/lang/String;
      62: aload_1
      63: invokevirtual #43                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      66: ifne          105
      69: aload_0
      70: aload_1
      71: ifnonnull     79
      74: ldc           #7                  // String
      76: goto          97
      79: aload_1
      80: instanceof    #3                  // class java/lang/String
      83: ifeq          93
      86: aload_1
      87: checkcast     #3                  // class java/lang/String
      90: goto          97
      93: aload_1
      94: invokestatic  #4                  // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
      97: putfield      #8                  // Field myValue:Ljava/lang/String;
     100: aload_0
     101: aconst_null
     102: putfield      #9                  // Field myValues:Ljava/util/LinkedHashMap;
     105: aload_0
     106: areturn

  private void forEachValue(java.lang.CharSequence, com.vladsch.flexmark.util.BiConsumer<java.lang.String, java.lang.String>);
    Code:
       0: aload_1
       1: ifnonnull     9
       4: ldc           #7                  // String
       6: goto          27
       9: aload_1
      10: instanceof    #3                  // class java/lang/String
      13: ifeq          23
      16: aload_1
      17: checkcast     #3                  // class java/lang/String
      20: goto          27
      23: aload_1
      24: invokestatic  #4                  // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
      27: astore_3
      28: iconst_0
      29: istore        4
      31: iload         4
      33: aload_3
      34: invokevirtual #19                 // Method java/lang/String.length:()I
      37: if_icmpge     190
      40: aload_3
      41: aload_0
      42: getfield      #6                  // Field myValueListDelimiter:C
      45: iload         4
      47: invokevirtual #20                 // Method java/lang/String.indexOf:(II)I
      50: istore        5
      52: iload         5
      54: iconst_m1
      55: if_icmpne     65
      58: aload_3
      59: invokevirtual #19                 // Method java/lang/String.length:()I
      62: goto          67
      65: iload         5
      67: istore        6
      69: iload         4
      71: iload         6
      73: if_icmpge     172
      76: aload_3
      77: iload         4
      79: iload         6
      81: invokevirtual #21                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      84: invokevirtual #49                 // Method java/lang/String.trim:()Ljava/lang/String;
      87: astore        7
      89: aload         7
      91: invokevirtual #18                 // Method java/lang/String.isEmpty:()Z
      94: ifne          172
      97: aload_0
      98: getfield      #1                  // Field myValueNameDelimiter:C
     101: ifne          108
     104: iconst_m1
     105: goto          117
     108: aload         7
     110: aload_0
     111: getfield      #1                  // Field myValueNameDelimiter:C
     114: invokevirtual #22                 // Method java/lang/String.indexOf:(I)I
     117: istore        8
     119: iload         8
     121: iconst_m1
     122: if_icmpne     130
     125: aload         7
     127: goto          138
     130: aload         7
     132: iconst_0
     133: iload         8
     135: invokevirtual #21                 // Method java/lang/String.substring:(II)Ljava/lang/String;
     138: astore        9
     140: iload         8
     142: iconst_m1
     143: if_icmpne     151
     146: ldc           #7                  // String
     148: goto          160
     151: aload         7
     153: iload         8
     155: iconst_1
     156: iadd
     157: invokevirtual #24                 // Method java/lang/String.substring:(I)Ljava/lang/String;
     160: astore        10
     162: aload_2
     163: aload         9
     165: aload         10
     167: invokeinterface #50,  3           // InterfaceMethod com/vladsch/flexmark/util/BiConsumer.accept:(Ljava/lang/Object;Ljava/lang/Object;)V
     172: iload         5
     174: iconst_m1
     175: if_icmpne     181
     178: goto          190
     181: iload         6
     183: iconst_1
     184: iadd
     185: istore        4
     187: goto          31
     190: return

  public com.vladsch.flexmark.util.html.MutableAttributeImpl removeValue(java.lang.CharSequence);
    Code:
       0: aload_0
       1: getfield      #6                  // Field myValueListDelimiter:C
       4: ifeq          62
       7: aload_1
       8: ifnull        91
      11: aload_1
      12: invokeinterface #44,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      17: ifeq          91
      20: aload_0
      21: invokevirtual #45                 // Method getValueMap:()Ljava/util/Map;
      24: astore_2
      25: iconst_1
      26: newarray       boolean
      28: dup
      29: iconst_0
      30: iconst_0
      31: bastore
      32: astore_3
      33: aload_0
      34: aload_1
      35: new           #51                 // class com/vladsch/flexmark/util/html/MutableAttributeImpl$2
      38: dup
      39: aload_0
      40: aload_2
      41: aload_3
      42: invokespecial #52                 // Method com/vladsch/flexmark/util/html/MutableAttributeImpl$2."<init>":(Lcom/vladsch/flexmark/util/html/MutableAttributeImpl;Ljava/util/Map;[Z)V
      45: invokespecial #48                 // Method forEachValue:(Ljava/lang/CharSequence;Lcom/vladsch/flexmark/util/BiConsumer;)V
      48: aload_3
      49: iconst_0
      50: baload
      51: ifeq          59
      54: aload_0
      55: aconst_null
      56: putfield      #8                  // Field myValue:Ljava/lang/String;
      59: goto          91
      62: aload_0
      63: getfield      #8                  // Field myValue:Ljava/lang/String;
      66: ifnull        80
      69: aload_0
      70: getfield      #8                  // Field myValue:Ljava/lang/String;
      73: aload_1
      74: invokevirtual #43                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      77: ifne          91
      80: aload_0
      81: ldc           #7                  // String
      83: putfield      #8                  // Field myValue:Ljava/lang/String;
      86: aload_0
      87: aconst_null
      88: putfield      #9                  // Field myValues:Ljava/util/LinkedHashMap;
      91: aload_0
      92: areturn

  public boolean containsValue(java.lang.CharSequence);
    Code:
       0: aload_0
       1: getfield      #8                  // Field myValue:Ljava/lang/String;
       4: aload_1
       5: aload_0
       6: getfield      #6                  // Field myValueListDelimiter:C
       9: aload_0
      10: getfield      #1                  // Field myValueNameDelimiter:C
      13: invokestatic  #53                 // Method com/vladsch/flexmark/util/html/AttributeImpl.indexOfValue:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;CC)I
      16: iconst_m1
      17: if_icmpeq     24
      20: iconst_1
      21: goto          25
      24: iconst_0
      25: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: instanceof    #54                 // class com/vladsch/flexmark/util/html/Attribute
      11: ifne          16
      14: iconst_0
      15: ireturn
      16: aload_1
      17: checkcast     #54                 // class com/vladsch/flexmark/util/html/Attribute
      20: astore_2
      21: aload_0
      22: getfield      #5                  // Field myName:Ljava/lang/String;
      25: aload_2
      26: invokeinterface #55,  1           // InterfaceMethod com/vladsch/flexmark/util/html/Attribute.getName:()Ljava/lang/String;
      31: invokevirtual #43                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      34: ifne          39
      37: iconst_0
      38: ireturn
      39: aload_0
      40: invokevirtual #56                 // Method getValue:()Ljava/lang/String;
      43: aload_2
      44: invokeinterface #57,  1           // InterfaceMethod com/vladsch/flexmark/util/html/Attribute.getValue:()Ljava/lang/String;
      49: invokevirtual #43                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      52: ifne          57
      55: iconst_0
      56: ireturn
      57: iconst_1
      58: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #5                  // Field myName:Ljava/lang/String;
       4: invokevirtual #58                 // Method java/lang/String.hashCode:()I
       7: istore_1
       8: bipush        31
      10: iload_1
      11: imul
      12: aload_0
      13: invokevirtual #56                 // Method getValue:()Ljava/lang/String;
      16: invokevirtual #58                 // Method java/lang/String.hashCode:()I
      19: iadd
      20: istore_1
      21: iload_1
      22: ireturn

  public java.lang.String toString();
    Code:
       0: new           #25                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #26                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #59                 // String MutableAttributeImpl { myName=\'
       9: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #5                  // Field myName:Ljava/lang/String;
      16: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      19: bipush        39
      21: invokevirtual #35                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      24: ldc           #60                 // String , myValue=\'
      26: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: aload_0
      30: invokevirtual #56                 // Method getValue:()Ljava/lang/String;
      33: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: bipush        39
      38: invokevirtual #35                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      41: ldc           #61                 // String  }
      43: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      46: invokevirtual #39                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      49: areturn

  public static com.vladsch.flexmark.util.html.MutableAttributeImpl of(com.vladsch.flexmark.util.html.Attribute);
    Code:
       0: aload_0
       1: invokeinterface #55,  1           // InterfaceMethod com/vladsch/flexmark/util/html/Attribute.getName:()Ljava/lang/String;
       6: aload_0
       7: invokeinterface #57,  1           // InterfaceMethod com/vladsch/flexmark/util/html/Attribute.getValue:()Ljava/lang/String;
      12: aload_0
      13: invokeinterface #62,  1           // InterfaceMethod com/vladsch/flexmark/util/html/Attribute.getValueListDelimiter:()C
      18: aload_0
      19: invokeinterface #63,  1           // InterfaceMethod com/vladsch/flexmark/util/html/Attribute.getValueNameDelimiter:()C
      24: invokestatic  #64                 // Method of:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;CC)Lcom/vladsch/flexmark/util/html/MutableAttributeImpl;
      27: areturn

  public static com.vladsch.flexmark.util.html.MutableAttributeImpl of(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_0
       2: iconst_0
       3: iconst_0
       4: invokestatic  #64                 // Method of:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;CC)Lcom/vladsch/flexmark/util/html/MutableAttributeImpl;
       7: areturn

  public static com.vladsch.flexmark.util.html.MutableAttributeImpl of(java.lang.CharSequence, java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: iconst_0
       4: invokestatic  #64                 // Method of:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;CC)Lcom/vladsch/flexmark/util/html/MutableAttributeImpl;
       7: areturn

  public static com.vladsch.flexmark.util.html.MutableAttributeImpl of(java.lang.CharSequence, java.lang.CharSequence, char);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iconst_0
       4: invokestatic  #64                 // Method of:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;CC)Lcom/vladsch/flexmark/util/html/MutableAttributeImpl;
       7: areturn

  public static com.vladsch.flexmark.util.html.MutableAttributeImpl of(java.lang.CharSequence, java.lang.CharSequence, char, char);
    Code:
       0: ldc           #65                 // String class
       2: aload_0
       3: invokevirtual #43                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
       6: ifeq          22
       9: new           #66                 // class com/vladsch/flexmark/util/html/MutableAttributeImpl
      12: dup
      13: aload_0
      14: aload_1
      15: bipush        32
      17: iconst_0
      18: invokespecial #67                 // Method "<init>":(Ljava/lang/CharSequence;Ljava/lang/CharSequence;CC)V
      21: areturn
      22: ldc           #68                 // String style
      24: aload_0
      25: invokevirtual #43                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      28: ifeq          45
      31: new           #66                 // class com/vladsch/flexmark/util/html/MutableAttributeImpl
      34: dup
      35: aload_0
      36: aload_1
      37: bipush        59
      39: bipush        58
      41: invokespecial #67                 // Method "<init>":(Ljava/lang/CharSequence;Ljava/lang/CharSequence;CC)V
      44: areturn
      45: new           #66                 // class com/vladsch/flexmark/util/html/MutableAttributeImpl
      48: dup
      49: aload_0
      50: aload_1
      51: iload_2
      52: iload_3
      53: invokespecial #67                 // Method "<init>":(Ljava/lang/CharSequence;Ljava/lang/CharSequence;CC)V
      56: areturn

  public com.vladsch.flexmark.util.html.MutableAttribute removeValue(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #69                 // Method removeValue:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/MutableAttributeImpl;
       5: areturn

  public com.vladsch.flexmark.util.html.MutableAttribute setValue(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #70                 // Method setValue:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/MutableAttributeImpl;
       5: areturn

  public com.vladsch.flexmark.util.html.MutableAttribute replaceValue(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #71                 // Method replaceValue:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/MutableAttributeImpl;
       5: areturn

  public com.vladsch.flexmark.util.html.Attribute removeValue(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #69                 // Method removeValue:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/MutableAttributeImpl;
       5: areturn

  public com.vladsch.flexmark.util.html.Attribute setValue(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #70                 // Method setValue:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/MutableAttributeImpl;
       5: areturn

  public com.vladsch.flexmark.util.html.Attribute replaceValue(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #71                 // Method replaceValue:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/MutableAttributeImpl;
       5: areturn

  public com.vladsch.flexmark.util.Mutable toMutable();
    Code:
       0: aload_0
       1: invokevirtual #72                 // Method toMutable:()Lcom/vladsch/flexmark/util/html/MutableAttribute;
       4: areturn

  public com.vladsch.flexmark.util.Immutable toImmutable();
    Code:
       0: aload_0
       1: invokevirtual #73                 // Method toImmutable:()Lcom/vladsch/flexmark/util/html/Attribute;
       4: areturn

  static char access$000(com.vladsch.flexmark.util.html.MutableAttributeImpl);
    Code:
       0: aload_0
       1: getfield      #1                  // Field myValueNameDelimiter:C
       4: ireturn
}
