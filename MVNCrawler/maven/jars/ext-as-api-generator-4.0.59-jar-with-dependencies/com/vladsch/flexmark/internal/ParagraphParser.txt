Compiled from "ParagraphParser.java"
public class com.vladsch.flexmark.internal.ParagraphParser extends com.vladsch.flexmark.parser.block.AbstractBlockParser {
  private final com.vladsch.flexmark.ast.Paragraph block;

  private com.vladsch.flexmark.ast.BlockContent content;

  public com.vladsch.flexmark.internal.ParagraphParser();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/vladsch/flexmark/parser/block/AbstractBlockParser."<init>":()V
       4: aload_0
       5: new           #2                  // class com/vladsch/flexmark/ast/Paragraph
       8: dup
       9: invokespecial #3                  // Method com/vladsch/flexmark/ast/Paragraph."<init>":()V
      12: putfield      #4                  // Field block:Lcom/vladsch/flexmark/ast/Paragraph;
      15: aload_0
      16: new           #5                  // class com/vladsch/flexmark/ast/BlockContent
      19: dup
      20: invokespecial #6                  // Method com/vladsch/flexmark/ast/BlockContent."<init>":()V
      23: putfield      #7                  // Field content:Lcom/vladsch/flexmark/ast/BlockContent;
      26: return

  public com.vladsch.flexmark.ast.BlockContent getBlockContent();
    Code:
       0: aload_0
       1: getfield      #7                  // Field content:Lcom/vladsch/flexmark/ast/BlockContent;
       4: areturn

  public com.vladsch.flexmark.ast.Paragraph getBlock();
    Code:
       0: aload_0
       1: getfield      #4                  // Field block:Lcom/vladsch/flexmark/ast/Paragraph;
       4: areturn

  public com.vladsch.flexmark.parser.block.BlockContinue tryContinue(com.vladsch.flexmark.parser.block.ParserState);
    Code:
       0: aload_1
       1: invokeinterface #8,  1            // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.isBlank:()Z
       6: ifne          19
       9: aload_1
      10: invokeinterface #9,  1            // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getIndex:()I
      15: invokestatic  #10                 // Method com/vladsch/flexmark/parser/block/BlockContinue.atIndex:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
      18: areturn
      19: aload_0
      20: getfield      #4                  // Field block:Lcom/vladsch/flexmark/ast/Paragraph;
      23: iconst_1
      24: invokevirtual #11                 // Method com/vladsch/flexmark/ast/Paragraph.setTrailingBlankLine:(Z)V
      27: invokestatic  #12                 // Method com/vladsch/flexmark/parser/block/BlockContinue.none:()Lcom/vladsch/flexmark/parser/block/BlockContinue;
      30: areturn

  public void addLine(com.vladsch.flexmark.parser.block.ParserState, com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: getfield      #7                  // Field content:Lcom/vladsch/flexmark/ast/BlockContent;
       4: aload_2
       5: aload_1
       6: invokeinterface #13,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getIndent:()I
      11: invokevirtual #14                 // Method com/vladsch/flexmark/ast/BlockContent.add:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;I)V
      14: return

  public boolean isParagraphParser();
    Code:
       0: iconst_1
       1: ireturn

  public boolean isInterruptible();
    Code:
       0: iconst_1
       1: ireturn

  public void closeBlock(com.vladsch.flexmark.parser.block.ParserState);
    Code:
       0: aload_0
       1: getfield      #4                  // Field block:Lcom/vladsch/flexmark/ast/Paragraph;
       4: aload_0
       5: getfield      #7                  // Field content:Lcom/vladsch/flexmark/ast/BlockContent;
       8: invokevirtual #15                 // Method com/vladsch/flexmark/ast/Paragraph.setContent:(Lcom/vladsch/flexmark/ast/BlockContent;)V
      11: aload_0
      12: aconst_null
      13: putfield      #7                  // Field content:Lcom/vladsch/flexmark/ast/BlockContent;
      16: return

  public void parseInlines(com.vladsch.flexmark.parser.InlineParser);
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #16                 // Method getBlock:()Lcom/vladsch/flexmark/ast/Paragraph;
       5: invokevirtual #17                 // Method com/vladsch/flexmark/ast/Paragraph.getContentChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       8: aload_0
       9: invokevirtual #16                 // Method getBlock:()Lcom/vladsch/flexmark/ast/Paragraph;
      12: invokeinterface #18,  3           // InterfaceMethod com/vladsch/flexmark/parser/InlineParser.parse:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;Lcom/vladsch/flexmark/ast/Node;)V
      17: return

  public com.vladsch.flexmark.ast.Block getBlock();
    Code:
       0: aload_0
       1: invokevirtual #16                 // Method getBlock:()Lcom/vladsch/flexmark/ast/Paragraph;
       4: areturn
}
