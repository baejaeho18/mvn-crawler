Compiled from "PostProcessorManager.java"
public class com.vladsch.flexmark.internal.PostProcessorManager$PostProcessorDependencyStage {
  private final java.util.Map<java.lang.Class<? extends com.vladsch.flexmark.ast.Node>, java.util.Set<java.lang.Class<?>>> myNodeMap;

  private final boolean myWithExclusions;

  private final java.util.List<com.vladsch.flexmark.parser.PostProcessorFactory> dependents;

  public com.vladsch.flexmark.internal.PostProcessorManager$PostProcessorDependencyStage(java.util.List<com.vladsch.flexmark.parser.PostProcessorFactory>);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method java/lang/Object."<init>":()V
       4: new           #5                  // class java/util/HashMap
       7: dup
       8: invokespecial #6                  // Method java/util/HashMap."<init>":()V
      11: astore_2
      12: iconst_1
      13: newarray       boolean
      15: dup
      16: iconst_0
      17: iconst_0
      18: bastore
      19: astore_3
      20: aload_1
      21: invokeinterface #7,  1            // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      26: astore        4
      28: aload         4
      30: invokeinterface #8,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      35: ifeq          267
      38: aload         4
      40: invokeinterface #9,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      45: checkcast     #10                 // class com/vladsch/flexmark/parser/PostProcessorFactory
      48: astore        5
      50: aload         5
      52: invokeinterface #11,  1           // InterfaceMethod com/vladsch/flexmark/parser/PostProcessorFactory.getNodeTypes:()Ljava/util/Map;
      57: astore        6
      59: aload         6
      61: ifnull        74
      64: aload         6
      66: invokeinterface #12,  1           // InterfaceMethod java/util/Map.isEmpty:()Z
      71: ifeq          117
      74: aload         5
      76: invokeinterface #13,  1           // InterfaceMethod com/vladsch/flexmark/parser/PostProcessorFactory.affectsGlobalScope:()Z
      81: ifne          117
      84: new           #14                 // class java/lang/IllegalStateException
      87: dup
      88: new           #15                 // class java/lang/StringBuilder
      91: dup
      92: invokespecial #16                 // Method java/lang/StringBuilder."<init>":()V
      95: ldc           #17                 // String PostProcessorFactory
      97: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     100: aload         5
     102: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     105: ldc           #20                 // String  is not document post processor and has empty node map, does nothing, should not be registered.
     107: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     110: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     113: invokespecial #22                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     116: athrow
     117: aload         6
     119: ifnull        264
     122: aload         6
     124: invokeinterface #23,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
     129: invokeinterface #24,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
     134: astore        7
     136: aload         7
     138: invokeinterface #8,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
     143: ifeq          264
     146: aload         7
     148: invokeinterface #9,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     153: checkcast     #25                 // class java/util/Map$Entry
     156: astore        8
     158: ldc           #26                 // class com/vladsch/flexmark/ast/Node
     160: aload         8
     162: invokeinterface #27,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
     167: checkcast     #28                 // class java/lang/Class
     170: invokevirtual #29                 // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
     173: ifeq          261
     176: aload_2
     177: aload         8
     179: invokeinterface #27,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
     184: invokevirtual #30                 // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
     187: checkcast     #31                 // class java/util/Set
     190: astore        9
     192: aload         9
     194: ifnonnull     229
     197: aload         8
     199: invokeinterface #32,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
     204: checkcast     #31                 // class java/util/Set
     207: astore        9
     209: aload_2
     210: aload         8
     212: invokeinterface #27,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
     217: checkcast     #28                 // class java/lang/Class
     220: aload         9
     222: invokevirtual #33                 // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     225: pop
     226: goto          247
     229: aload         9
     231: aload         8
     233: invokeinterface #32,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
     238: checkcast     #34                 // class java/util/Collection
     241: invokeinterface #35,  2           // InterfaceMethod java/util/Set.addAll:(Ljava/util/Collection;)Z
     246: pop
     247: aload         9
     249: invokeinterface #36,  1           // InterfaceMethod java/util/Set.isEmpty:()Z
     254: ifne          261
     257: aload_3
     258: iconst_0
     259: iconst_1
     260: bastore
     261: goto          136
     264: goto          28
     267: aload_0
     268: aload_1
     269: putfield      #3                  // Field dependents:Ljava/util/List;
     272: aload_0
     273: aload_2
     274: putfield      #2                  // Field myNodeMap:Ljava/util/Map;
     277: aload_0
     278: aload_3
     279: iconst_0
     280: baload
     281: putfield      #1                  // Field myWithExclusions:Z
     284: return

  static java.util.List access$100(com.vladsch.flexmark.internal.PostProcessorManager$PostProcessorDependencyStage);
    Code:
       0: aload_0
       1: getfield      #3                  // Field dependents:Ljava/util/List;
       4: areturn

  static java.util.Map access$200(com.vladsch.flexmark.internal.PostProcessorManager$PostProcessorDependencyStage);
    Code:
       0: aload_0
       1: getfield      #2                  // Field myNodeMap:Ljava/util/Map;
       4: areturn

  static boolean access$300(com.vladsch.flexmark.internal.PostProcessorManager$PostProcessorDependencyStage);
    Code:
       0: aload_0
       1: getfield      #1                  // Field myWithExclusions:Z
       4: ireturn
}
