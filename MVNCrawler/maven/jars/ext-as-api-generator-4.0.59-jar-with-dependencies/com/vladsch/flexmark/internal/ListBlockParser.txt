Compiled from "ListBlockParser.java"
public class com.vladsch.flexmark.internal.ListBlockParser extends com.vladsch.flexmark.parser.block.AbstractBlockParser {
  private final com.vladsch.flexmark.ast.ListBlock myBlock;

  private final com.vladsch.flexmark.parser.ListOptions myOptions;

  private final com.vladsch.flexmark.internal.ListBlockParser$ListData myListData;

  private com.vladsch.flexmark.internal.ListItemParser myLastChild;

  private com.vladsch.flexmark.util.sequence.BasedSequence myItemHandledLine;

  private boolean myItemHandledNewListLine;

  private boolean myItemHandledNewItemLine;

  private boolean myItemHandledSkipActiveLine;

  public com.vladsch.flexmark.internal.ListBlockParser(com.vladsch.flexmark.parser.ListOptions, com.vladsch.flexmark.internal.ListBlockParser$ListData, com.vladsch.flexmark.internal.ListItemParser);
    Code:
       0: aload_0
       1: invokespecial #6                  // Method com/vladsch/flexmark/parser/block/AbstractBlockParser."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #2                  // Field myLastChild:Lcom/vladsch/flexmark/internal/ListItemParser;
       9: aload_0
      10: aconst_null
      11: putfield      #5                  // Field myItemHandledLine:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      14: aload_0
      15: aload_1
      16: putfield      #7                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
      19: aload_0
      20: aload_2
      21: putfield      #8                  // Field myListData:Lcom/vladsch/flexmark/internal/ListBlockParser$ListData;
      24: aload_0
      25: aload_2
      26: getfield      #9                  // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.listBlock:Lcom/vladsch/flexmark/ast/ListBlock;
      29: putfield      #10                 // Field myBlock:Lcom/vladsch/flexmark/ast/ListBlock;
      32: aload_0
      33: getfield      #10                 // Field myBlock:Lcom/vladsch/flexmark/ast/ListBlock;
      36: iconst_1
      37: invokevirtual #11                 // Method com/vladsch/flexmark/ast/ListBlock.setTight:(Z)V
      40: aload_0
      41: aload_3
      42: putfield      #2                  // Field myLastChild:Lcom/vladsch/flexmark/internal/ListItemParser;
      45: aload_0
      46: iconst_0
      47: putfield      #4                  // Field myItemHandledNewListLine:Z
      50: aload_0
      51: iconst_0
      52: putfield      #3                  // Field myItemHandledNewItemLine:Z
      55: aload_0
      56: iconst_0
      57: putfield      #1                  // Field myItemHandledSkipActiveLine:Z
      60: return

  com.vladsch.flexmark.util.sequence.BasedSequence getItemHandledLine();
    Code:
       0: aload_0
       1: getfield      #5                  // Field myItemHandledLine:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: areturn

  void setItemHandledLine(com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field myItemHandledLine:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       5: aload_0
       6: iconst_0
       7: putfield      #4                  // Field myItemHandledNewListLine:Z
      10: aload_0
      11: iconst_0
      12: putfield      #3                  // Field myItemHandledNewItemLine:Z
      15: aload_0
      16: iconst_0
      17: putfield      #1                  // Field myItemHandledSkipActiveLine:Z
      20: return

  void setItemHandledNewListLine(com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field myItemHandledLine:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       5: aload_0
       6: iconst_1
       7: putfield      #4                  // Field myItemHandledNewListLine:Z
      10: aload_0
      11: iconst_0
      12: putfield      #3                  // Field myItemHandledNewItemLine:Z
      15: aload_0
      16: iconst_0
      17: putfield      #1                  // Field myItemHandledSkipActiveLine:Z
      20: return

  void setItemHandledNewItemLine(com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field myItemHandledLine:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       5: aload_0
       6: iconst_0
       7: putfield      #4                  // Field myItemHandledNewListLine:Z
      10: aload_0
      11: iconst_1
      12: putfield      #3                  // Field myItemHandledNewItemLine:Z
      15: aload_0
      16: iconst_0
      17: putfield      #1                  // Field myItemHandledSkipActiveLine:Z
      20: return

  void setItemHandledLineSkipActive(com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field myItemHandledLine:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       5: aload_0
       6: iconst_0
       7: putfield      #4                  // Field myItemHandledNewListLine:Z
      10: aload_0
      11: iconst_0
      12: putfield      #3                  // Field myItemHandledNewItemLine:Z
      15: aload_0
      16: iconst_1
      17: putfield      #1                  // Field myItemHandledSkipActiveLine:Z
      20: return

  public com.vladsch.flexmark.internal.ListItemParser getLastChild();
    Code:
       0: aload_0
       1: getfield      #2                  // Field myLastChild:Lcom/vladsch/flexmark/internal/ListItemParser;
       4: areturn

  public void setLastChild(com.vladsch.flexmark.internal.ListItemParser);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2                  // Field myLastChild:Lcom/vladsch/flexmark/internal/ListItemParser;
       5: return

  public com.vladsch.flexmark.parser.ListOptions getOptions();
    Code:
       0: aload_0
       1: getfield      #7                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
       4: areturn

  public com.vladsch.flexmark.internal.ListBlockParser$ListData getListData();
    Code:
       0: aload_0
       1: getfield      #8                  // Field myListData:Lcom/vladsch/flexmark/internal/ListBlockParser$ListData;
       4: areturn

  int getContentIndent();
    Code:
       0: aload_0
       1: getfield      #8                  // Field myListData:Lcom/vladsch/flexmark/internal/ListBlockParser$ListData;
       4: getfield      #12                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.markerIndent:I
       7: aload_0
       8: getfield      #8                  // Field myListData:Lcom/vladsch/flexmark/internal/ListBlockParser$ListData;
      11: getfield      #13                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.listMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      14: invokeinterface #14,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      19: iadd
      20: aload_0
      21: getfield      #8                  // Field myListData:Lcom/vladsch/flexmark/internal/ListBlockParser$ListData;
      24: getfield      #15                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.contentOffset:I
      27: iadd
      28: ireturn

  int getLastContentIndent();
    Code:
       0: aload_0
       1: getfield      #2                  // Field myLastChild:Lcom/vladsch/flexmark/internal/ListItemParser;
       4: invokevirtual #16                 // Method com/vladsch/flexmark/internal/ListItemParser.getContentIndent:()I
       7: ireturn

  public boolean isContainer();
    Code:
       0: iconst_1
       1: ireturn

  public boolean canContain(com.vladsch.flexmark.parser.block.ParserState, com.vladsch.flexmark.parser.block.BlockParser, com.vladsch.flexmark.ast.Block);
    Code:
       0: aload_3
       1: instanceof    #17                 // class com/vladsch/flexmark/ast/ListItem
       4: ireturn

  public com.vladsch.flexmark.ast.ListBlock getBlock();
    Code:
       0: aload_0
       1: getfield      #10                 // Field myBlock:Lcom/vladsch/flexmark/ast/ListBlock;
       4: areturn

  private void setTight(boolean);
    Code:
       0: aload_0
       1: getfield      #10                 // Field myBlock:Lcom/vladsch/flexmark/ast/ListBlock;
       4: iload_1
       5: invokevirtual #11                 // Method com/vladsch/flexmark/ast/ListBlock.setTight:(Z)V
       8: return

  public void closeBlock(com.vladsch.flexmark.parser.block.ParserState);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #18                 // Method finalizeListTight:(Lcom/vladsch/flexmark/parser/block/ParserState;)V
       5: aload_1
       6: invokeinterface #19,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getProperties:()Lcom/vladsch/flexmark/util/options/MutableDataHolder;
      11: getstatic     #20                 // Field com/vladsch/flexmark/parser/Parser.BLANK_LINES_IN_AST:Lcom/vladsch/flexmark/util/options/DataKey;
      14: invokeinterface #21,  2           // InterfaceMethod com/vladsch/flexmark/util/options/MutableDataHolder.get:(Lcom/vladsch/flexmark/util/options/DataKey;)Ljava/lang/Object;
      19: checkcast     #22                 // class java/lang/Boolean
      22: invokevirtual #23                 // Method java/lang/Boolean.booleanValue:()Z
      25: ifeq          49
      28: aload_0
      29: invokevirtual #24                 // Method getBlock:()Lcom/vladsch/flexmark/ast/ListBlock;
      32: astore_2
      33: aload_2
      34: invokevirtual #25                 // Method com/vladsch/flexmark/ast/ListBlock.getLastChild:()Lcom/vladsch/flexmark/ast/Node;
      37: astore_3
      38: aload_3
      39: instanceof    #17                 // class com/vladsch/flexmark/ast/ListItem
      42: ifeq          49
      45: aload_3
      46: invokevirtual #26                 // Method com/vladsch/flexmark/ast/Node.moveTrailingBlankLines:()V
      49: aload_0
      50: getfield      #10                 // Field myBlock:Lcom/vladsch/flexmark/ast/ListBlock;
      53: invokevirtual #27                 // Method com/vladsch/flexmark/ast/ListBlock.setCharsFromContentOnly:()V
      56: return

  public boolean breakOutOnDoubleBlankLine();
    Code:
       0: aload_0
       1: getfield      #7                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
       4: invokevirtual #28                 // Method com/vladsch/flexmark/parser/ListOptions.isEndOnDoubleBlank:()Z
       7: ireturn

  private static boolean hasNonItemChildren(com.vladsch.flexmark.ast.ListItem);
    Code:
       0: aload_0
       1: invokevirtual #29                 // Method com/vladsch/flexmark/ast/ListItem.hasChildren:()Z
       4: ifeq          61
       7: iconst_0
       8: istore_1
       9: aload_0
      10: invokevirtual #30                 // Method com/vladsch/flexmark/ast/ListItem.getChildren:()Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterable;
      13: invokeinterface #31,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterable.iterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterator;
      18: astore_2
      19: aload_2
      20: invokeinterface #32,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      25: ifeq          61
      28: aload_2
      29: invokeinterface #33,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      34: checkcast     #34                 // class com/vladsch/flexmark/ast/Node
      37: astore_3
      38: aload_3
      39: instanceof    #35                 // class com/vladsch/flexmark/ast/ListBlock
      42: ifeq          48
      45: goto          19
      48: iinc          1, 1
      51: iload_1
      52: iconst_2
      53: if_icmplt     58
      56: iconst_1
      57: ireturn
      58: goto          19
      61: iconst_0
      62: ireturn

  private void finalizeListTight(com.vladsch.flexmark.parser.block.ParserState);
    Code:
       0: aload_0
       1: invokevirtual #24                 // Method getBlock:()Lcom/vladsch/flexmark/ast/ListBlock;
       4: invokevirtual #36                 // Method com/vladsch/flexmark/ast/ListBlock.getFirstChild:()Lcom/vladsch/flexmark/ast/Node;
       7: astore_2
       8: iconst_1
       9: istore_3
      10: iconst_0
      11: istore        4
      13: iconst_0
      14: istore        5
      16: iconst_0
      17: istore        6
      19: iconst_0
      20: istore        7
      22: iconst_0
      23: istore        8
      25: iconst_0
      26: istore        9
      28: iconst_0
      29: istore        10
      31: aload_2
      32: ifnull        570
      35: iconst_0
      36: istore        11
      38: iconst_0
      39: istore        12
      41: iconst_0
      42: istore        13
      44: iconst_0
      45: istore        14
      47: iconst_0
      48: istore        15
      50: iconst_0
      51: istore        16
      53: aload_2
      54: instanceof    #17                 // class com/vladsch/flexmark/ast/ListItem
      57: ifeq          272
      60: aload_2
      61: checkcast     #17                 // class com/vladsch/flexmark/ast/ListItem
      64: invokevirtual #37                 // Method com/vladsch/flexmark/ast/ListItem.isHadBlankAfterItemParagraph:()Z
      67: ifeq          100
      70: aload_2
      71: invokevirtual #38                 // Method com/vladsch/flexmark/ast/Node.getNext:()Lcom/vladsch/flexmark/ast/Node;
      74: ifnonnull     97
      77: aload_2
      78: invokevirtual #39                 // Method com/vladsch/flexmark/ast/Node.getFirstChild:()Lcom/vladsch/flexmark/ast/Node;
      81: ifnull        100
      84: aload_2
      85: invokevirtual #39                 // Method com/vladsch/flexmark/ast/Node.getFirstChild:()Lcom/vladsch/flexmark/ast/Node;
      88: invokevirtual #38                 // Method com/vladsch/flexmark/ast/Node.getNext:()Lcom/vladsch/flexmark/ast/Node;
      91: ifnonnull     97
      94: goto          100
      97: iconst_1
      98: istore        11
     100: aload_2
     101: checkcast     #17                 // class com/vladsch/flexmark/ast/ListItem
     104: invokevirtual #40                 // Method com/vladsch/flexmark/ast/ListItem.isContainsBlankLine:()Z
     107: ifeq          113
     110: iconst_1
     111: istore        12
     113: aload_1
     114: aload_2
     115: invokeinterface #41,  2           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.endsWithBlankLine:(Lcom/vladsch/flexmark/ast/Node;)Z
     120: ifeq          133
     123: aload_2
     124: invokevirtual #38                 // Method com/vladsch/flexmark/ast/Node.getNext:()Lcom/vladsch/flexmark/ast/Node;
     127: ifnull        133
     130: iconst_1
     131: istore        14
     133: aload_2
     134: checkcast     #17                 // class com/vladsch/flexmark/ast/ListItem
     137: invokestatic  #42                 // Method hasNonItemChildren:(Lcom/vladsch/flexmark/ast/ListItem;)Z
     140: ifeq          146
     143: iconst_1
     144: istore        15
     146: iload         14
     148: ifeq          161
     151: aload_0
     152: getfield      #7                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
     155: invokevirtual #43                 // Method com/vladsch/flexmark/parser/ListOptions.isLooseWhenHasTrailingBlankLine:()Z
     158: ifne          250
     161: iload         11
     163: ifeq          176
     166: aload_0
     167: getfield      #7                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
     170: invokevirtual #44                 // Method com/vladsch/flexmark/parser/ListOptions.isLooseWhenBlankLineFollowsItemParagraph:()Z
     173: ifne          250
     176: iload         12
     178: ifeq          191
     181: aload_0
     182: getfield      #7                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
     185: invokevirtual #45                 // Method com/vladsch/flexmark/parser/ListOptions.isLooseWhenContainsBlankLine:()Z
     188: ifne          250
     191: iload         15
     193: ifeq          206
     196: aload_0
     197: getfield      #7                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
     200: invokevirtual #46                 // Method com/vladsch/flexmark/parser/ListOptions.isLooseWhenHasNonListChildren:()Z
     203: ifne          250
     206: iload         14
     208: ifeq          218
     211: aload_2
     212: invokevirtual #47                 // Method com/vladsch/flexmark/ast/Node.getPrevious:()Lcom/vladsch/flexmark/ast/Node;
     215: ifnull        223
     218: iload         6
     220: ifeq          254
     223: aload_0
     224: getfield      #7                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
     227: invokevirtual #48                 // Method com/vladsch/flexmark/parser/ListOptions.isLooseWhenPrevHasTrailingBlankLine:()Z
     230: ifne          250
     233: aload_0
     234: getfield      #7                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
     237: invokevirtual #49                 // Method com/vladsch/flexmark/parser/ListOptions.isLooseWhenLastItemPrevHasTrailingBlankLine:()Z
     240: ifeq          254
     243: aload_2
     244: invokevirtual #38                 // Method com/vladsch/flexmark/ast/Node.getNext:()Lcom/vladsch/flexmark/ast/Node;
     247: ifnonnull     254
     250: iconst_1
     251: goto          255
     254: iconst_0
     255: istore        16
     257: iload         16
     259: ifeq          272
     262: aload_2
     263: checkcast     #17                 // class com/vladsch/flexmark/ast/ListItem
     266: iconst_1
     267: invokevirtual #50                 // Method com/vladsch/flexmark/ast/ListItem.setLoose:(Z)V
     270: iconst_0
     271: istore_3
     272: aload_2
     273: invokevirtual #39                 // Method com/vladsch/flexmark/ast/Node.getFirstChild:()Lcom/vladsch/flexmark/ast/Node;
     276: astore        17
     278: aload         17
     280: ifnull        531
     283: aload_1
     284: aload         17
     286: invokeinterface #41,  2           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.endsWithBlankLine:(Lcom/vladsch/flexmark/ast/Node;)Z
     291: ifeq          376
     294: aload_2
     295: invokevirtual #38                 // Method com/vladsch/flexmark/ast/Node.getNext:()Lcom/vladsch/flexmark/ast/Node;
     298: ifnonnull     309
     301: aload         17
     303: invokevirtual #38                 // Method com/vladsch/flexmark/ast/Node.getNext:()Lcom/vladsch/flexmark/ast/Node;
     306: ifnull        376
     309: iconst_1
     310: istore        13
     312: aload         17
     314: aload_2
     315: invokevirtual #51                 // Method com/vladsch/flexmark/ast/Node.getLastChild:()Lcom/vladsch/flexmark/ast/Node;
     318: if_acmpne     324
     321: iconst_1
     322: istore        14
     324: iload         16
     326: ifne          376
     329: aload_0
     330: getfield      #7                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
     333: invokevirtual #43                 // Method com/vladsch/flexmark/parser/ListOptions.isLooseWhenHasTrailingBlankLine:()Z
     336: ifeq          341
     339: iconst_0
     340: istore_3
     341: iload         14
     343: ifeq          376
     346: aload_2
     347: invokevirtual #47                 // Method com/vladsch/flexmark/ast/Node.getPrevious:()Lcom/vladsch/flexmark/ast/Node;
     350: ifnonnull     376
     353: aload_0
     354: getfield      #7                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
     357: invokevirtual #48                 // Method com/vladsch/flexmark/parser/ListOptions.isLooseWhenPrevHasTrailingBlankLine:()Z
     360: ifeq          376
     363: iconst_0
     364: istore_3
     365: iconst_1
     366: istore        16
     368: aload_2
     369: checkcast     #17                 // class com/vladsch/flexmark/ast/ListItem
     372: iconst_1
     373: invokevirtual #50                 // Method com/vladsch/flexmark/ast/ListItem.setLoose:(Z)V
     376: aload         17
     378: instanceof    #35                 // class com/vladsch/flexmark/ast/ListBlock
     381: ifeq          466
     384: iconst_1
     385: istore        10
     387: iload         16
     389: ifne          466
     392: aload_0
     393: getfield      #7                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
     396: invokevirtual #52                 // Method com/vladsch/flexmark/parser/ListOptions.isLooseWhenHasLooseSubItem:()Z
     399: ifeq          466
     402: aload         17
     404: instanceof    #35                 // class com/vladsch/flexmark/ast/ListBlock
     407: ifeq          466
     410: aload         17
     412: invokevirtual #53                 // Method com/vladsch/flexmark/ast/Node.getChildIterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterator;
     415: astore        18
     417: aload         18
     419: invokeinterface #54,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterator.hasNext:()Z
     424: ifeq          466
     427: aload         18
     429: invokeinterface #55,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterator.next:()Ljava/lang/Object;
     434: checkcast     #17                 // class com/vladsch/flexmark/ast/ListItem
     437: astore        19
     439: aload         19
     441: invokevirtual #56                 // Method com/vladsch/flexmark/ast/ListItem.isTight:()Z
     444: ifne          463
     447: iconst_1
     448: istore        16
     450: iconst_0
     451: istore_3
     452: aload_2
     453: checkcast     #17                 // class com/vladsch/flexmark/ast/ListItem
     456: iconst_1
     457: invokevirtual #50                 // Method com/vladsch/flexmark/ast/ListItem.setLoose:(Z)V
     460: goto          466
     463: goto          417
     466: aload_0
     467: getfield      #7                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
     470: invokevirtual #52                 // Method com/vladsch/flexmark/parser/ListOptions.isLooseWhenHasLooseSubItem:()Z
     473: ifeq          499
     476: iload         16
     478: ifeq          521
     481: iload         10
     483: ifne          531
     486: aload_0
     487: getfield      #7                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
     490: invokevirtual #57                 // Method com/vladsch/flexmark/parser/ListOptions.isAutoLooseOneLevelLists:()Z
     493: ifne          521
     496: goto          531
     499: iload_3
     500: ifne          521
     503: iload         10
     505: ifne          531
     508: aload_0
     509: getfield      #7                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
     512: invokevirtual #57                 // Method com/vladsch/flexmark/parser/ListOptions.isAutoLooseOneLevelLists:()Z
     515: ifne          521
     518: goto          531
     521: aload         17
     523: invokevirtual #38                 // Method com/vladsch/flexmark/ast/Node.getNext:()Lcom/vladsch/flexmark/ast/Node;
     526: astore        17
     528: goto          278
     531: aload_2
     532: instanceof    #17                 // class com/vladsch/flexmark/ast/ListItem
     535: ifeq          562
     538: iload         16
     540: istore        9
     542: iload         11
     544: istore        4
     546: iload         13
     548: istore        5
     550: iload         14
     552: istore        6
     554: iload         12
     556: istore        7
     558: iload         15
     560: istore        8
     562: aload_2
     563: invokevirtual #38                 // Method com/vladsch/flexmark/ast/Node.getNext:()Lcom/vladsch/flexmark/ast/Node;
     566: astore_2
     567: goto          31
     570: aload_0
     571: getfield      #7                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
     574: invokevirtual #58                 // Method com/vladsch/flexmark/parser/ListOptions.isAutoLoose:()Z
     577: ifeq          626
     580: aload_0
     581: getfield      #7                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
     584: invokevirtual #57                 // Method com/vladsch/flexmark/parser/ListOptions.isAutoLooseOneLevelLists:()Z
     587: ifeq          626
     590: iload         10
     592: ifne          645
     595: aload_0
     596: invokevirtual #24                 // Method getBlock:()Lcom/vladsch/flexmark/ast/ListBlock;
     599: iconst_1
     600: anewarray     #59                 // class java/lang/Class
     603: dup
     604: iconst_0
     605: ldc           #35                 // class com/vladsch/flexmark/ast/ListBlock
     607: aastore
     608: invokevirtual #60                 // Method com/vladsch/flexmark/ast/ListBlock.getAncestorOfType:([Ljava/lang/Class;)Lcom/vladsch/flexmark/ast/Node;
     611: ifnonnull     645
     614: iload_3
     615: ifne          645
     618: aload_0
     619: iconst_0
     620: invokespecial #61                 // Method setTight:(Z)V
     623: goto          645
     626: aload_0
     627: getfield      #7                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
     630: invokevirtual #58                 // Method com/vladsch/flexmark/parser/ListOptions.isAutoLoose:()Z
     633: ifeq          645
     636: iload_3
     637: ifne          645
     640: aload_0
     641: iconst_0
     642: invokespecial #61                 // Method setTight:(Z)V
     645: return

  static com.vladsch.flexmark.internal.ListBlockParser$ListData parseListMarker(com.vladsch.flexmark.parser.ListOptions, int, com.vladsch.flexmark.parser.block.ParserState);
    Code:
       0: aload_2
       1: invokeinterface #62,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getParsing:()Lcom/vladsch/flexmark/ast/util/Parsing;
       6: astore_3
       7: aload_2
       8: invokeinterface #63,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      13: astore        4
      15: aload_2
      16: invokeinterface #64,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getNextNonSpaceIndex:()I
      21: istore        5
      23: aload_2
      24: invokeinterface #65,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getColumn:()I
      29: aload_2
      30: invokeinterface #66,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getIndent:()I
      35: iadd
      36: istore        6
      38: aload_2
      39: invokeinterface #66,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getIndent:()I
      44: istore        7
      46: aload         4
      48: iload         5
      50: aload         4
      52: invokeinterface #14,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      57: invokeinterface #67,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      62: astore        8
      64: aload_3
      65: getfield      #68                 // Field com/vladsch/flexmark/ast/util/Parsing.LIST_ITEM_MARKER:Ljava/util/regex/Pattern;
      68: aload         8
      70: invokevirtual #69                 // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
      73: astore        9
      75: aload         9
      77: invokevirtual #70                 // Method java/util/regex/Matcher.find:()Z
      80: ifne          85
      83: aconst_null
      84: areturn
      85: aload         9
      87: invokestatic  #71                 // Method createListBlock:(Ljava/util/regex/Matcher;)Lcom/vladsch/flexmark/ast/ListBlock;
      90: astore        10
      92: aload         9
      94: invokevirtual #72                 // Method java/util/regex/Matcher.end:()I
      97: aload         9
      99: invokevirtual #73                 // Method java/util/regex/Matcher.start:()I
     102: isub
     103: istore        11
     105: ldc           #74                 // String +-*
     107: aload         9
     109: invokevirtual #75                 // Method java/util/regex/Matcher.group:()Ljava/lang/String;
     112: invokevirtual #76                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
     115: ifne          122
     118: iconst_1
     119: goto          123
     122: iconst_0
     123: istore        12
     125: iload         5
     127: iload         11
     129: iadd
     130: istore        13
     132: iload         6
     134: iload         11
     136: iadd
     137: istore        14
     139: iconst_0
     140: istore        15
     142: iconst_0
     143: istore        16
     145: iload         13
     147: istore        17
     149: iload         13
     151: istore        18
     153: iload         18
     155: aload         4
     157: invokeinterface #14,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
     162: if_icmpge     230
     165: aload         4
     167: iload         18
     169: invokeinterface #77,  2           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.charAt:(I)C
     174: istore        19
     176: iload         19
     178: bipush        9
     180: if_icmpne     202
     183: iload         15
     185: iload         14
     187: iload         15
     189: iadd
     190: invokestatic  #78                 // Method com/vladsch/flexmark/ast/util/Parsing.columnsToNextTabStop:(I)I
     193: iadd
     194: istore        15
     196: iinc          17, 1
     199: goto          224
     202: iload         19
     204: bipush        32
     206: if_icmpne     218
     209: iinc          15, 1
     212: iinc          17, 1
     215: goto          224
     218: iconst_1
     219: istore        16
     221: goto          230
     224: iinc          18, 1
     227: goto          153
     230: getstatic     #79                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     233: astore        18
     235: iload         15
     237: istore        19
     239: iload         16
     241: ifeq          250
     244: iload         15
     246: iload_1
     247: if_icmple     259
     250: iconst_1
     251: dup
     252: istore        15
     254: istore        19
     256: goto          515
     259: iload         12
     261: ifeq          271
     264: aload_0
     265: invokevirtual #80                 // Method com/vladsch/flexmark/parser/ListOptions.isNumberedItemMarkerSuffixed:()Z
     268: ifeq          515
     271: aload_0
     272: invokevirtual #81                 // Method com/vladsch/flexmark/parser/ListOptions.getItemMarkerSuffixes:()[Ljava/lang/String;
     275: astore        20
     277: aload         20
     279: astore        21
     281: aload         21
     283: arraylength
     284: istore        22
     286: iconst_0
     287: istore        23
     289: iload         23
     291: iload         22
     293: if_icmpge     515
     296: aload         21
     298: iload         23
     300: aaload
     301: astore        24
     303: aload         24
     305: invokevirtual #82                 // Method java/lang/String.length:()I
     308: istore        25
     310: iload         25
     312: ifle          509
     315: aload         4
     317: aload         24
     319: iload         17
     321: invokeinterface #83,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.matchChars:(Ljava/lang/CharSequence;I)Z
     326: ifeq          509
     329: aload_0
     330: invokevirtual #84                 // Method com/vladsch/flexmark/parser/ListOptions.isItemMarkerSpace:()Z
     333: ifeq          367
     336: aload         4
     338: iload         17
     340: iload         25
     342: iadd
     343: invokeinterface #85,  2           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.midCharAt:(I)C
     348: istore        26
     350: iload         26
     352: bipush        32
     354: if_icmpeq     367
     357: iload         26
     359: bipush        9
     361: if_icmpeq     367
     364: goto          509
     367: aload         4
     369: iload         17
     371: iload         17
     373: iload         25
     375: iadd
     376: invokeinterface #67,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     381: astore        18
     383: iload         15
     385: iload         25
     387: iadd
     388: istore        15
     390: iload         17
     392: iload         25
     394: iadd
     395: istore        17
     397: iload         14
     399: iload         25
     401: iadd
     402: istore        14
     404: iconst_0
     405: istore        16
     407: iload         15
     409: istore        26
     411: iload         17
     413: istore        27
     415: iload         27
     417: aload         4
     419: invokeinterface #14,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
     424: if_icmpge     486
     427: aload         4
     429: iload         27
     431: invokeinterface #77,  2           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.charAt:(I)C
     436: istore        28
     438: iload         28
     440: bipush        9
     442: if_icmpne     461
     445: iload         15
     447: iload         14
     449: iload         15
     451: iadd
     452: invokestatic  #78                 // Method com/vladsch/flexmark/ast/util/Parsing.columnsToNextTabStop:(I)I
     455: iadd
     456: istore        15
     458: goto          480
     461: iload         28
     463: bipush        32
     465: if_icmpne     474
     468: iinc          15, 1
     471: goto          480
     474: iconst_1
     475: istore        16
     477: goto          486
     480: iinc          27, 1
     483: goto          415
     486: iload         16
     488: ifeq          500
     491: iload         15
     493: iload         26
     495: isub
     496: iload_1
     497: if_icmple     515
     500: iload         26
     502: iconst_1
     503: iadd
     504: istore        15
     506: goto          515
     509: iinc          23, 1
     512: goto          289
     515: new           #86                 // class com/vladsch/flexmark/internal/ListBlockParser$ListData
     518: dup
     519: aload         10
     521: iload         16
     523: ifne          530
     526: iconst_1
     527: goto          531
     530: iconst_0
     531: iload         5
     533: iload         6
     535: iload         7
     537: iload         15
     539: aload         8
     541: aload         9
     543: invokevirtual #73                 // Method java/util/regex/Matcher.start:()I
     546: aload         9
     548: invokevirtual #72                 // Method java/util/regex/Matcher.end:()I
     551: invokeinterface #67,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     556: iload         12
     558: aload         18
     560: iload         19
     562: invokespecial #87                 // Method com/vladsch/flexmark/internal/ListBlockParser$ListData."<init>":(Lcom/vladsch/flexmark/ast/ListBlock;ZIIIILcom/vladsch/flexmark/util/sequence/BasedSequence;ZLcom/vladsch/flexmark/util/sequence/BasedSequence;I)V
     565: areturn

  private static com.vladsch.flexmark.ast.ListBlock createListBlock(java.util.regex.Matcher);
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #88                 // Method java/util/regex/Matcher.group:(I)Ljava/lang/String;
       5: astore_1
       6: aload_1
       7: ifnull        29
      10: new           #89                 // class com/vladsch/flexmark/ast/BulletList
      13: dup
      14: invokespecial #90                 // Method com/vladsch/flexmark/ast/BulletList."<init>":()V
      17: astore_2
      18: aload_2
      19: aload_1
      20: iconst_0
      21: invokevirtual #91                 // Method java/lang/String.charAt:(I)C
      24: invokevirtual #92                 // Method com/vladsch/flexmark/ast/BulletList.setOpeningMarker:(C)V
      27: aload_2
      28: areturn
      29: aload_0
      30: iconst_2
      31: invokevirtual #88                 // Method java/util/regex/Matcher.group:(I)Ljava/lang/String;
      34: astore_2
      35: aload_0
      36: iconst_3
      37: invokevirtual #88                 // Method java/util/regex/Matcher.group:(I)Ljava/lang/String;
      40: astore_3
      41: new           #93                 // class com/vladsch/flexmark/ast/OrderedList
      44: dup
      45: invokespecial #94                 // Method com/vladsch/flexmark/ast/OrderedList."<init>":()V
      48: astore        4
      50: aload         4
      52: aload_2
      53: invokestatic  #95                 // Method java/lang/Integer.parseInt:(Ljava/lang/String;)I
      56: invokevirtual #96                 // Method com/vladsch/flexmark/ast/OrderedList.setStartNumber:(I)V
      59: aload         4
      61: aload_3
      62: iconst_0
      63: invokevirtual #91                 // Method java/lang/String.charAt:(I)C
      66: invokevirtual #97                 // Method com/vladsch/flexmark/ast/OrderedList.setDelimiter:(C)V
      69: aload         4
      71: areturn

  public com.vladsch.flexmark.parser.block.BlockContinue tryContinue(com.vladsch.flexmark.parser.block.ParserState);
    Code:
       0: aload_1
       1: invokeinterface #98,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getIndex:()I
       6: invokestatic  #99                 // Method com/vladsch/flexmark/parser/block/BlockContinue.atIndex:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
       9: areturn

  public com.vladsch.flexmark.ast.Block getBlock();
    Code:
       0: aload_0
       1: invokevirtual #24                 // Method getBlock:()Lcom/vladsch/flexmark/ast/ListBlock;
       4: areturn

  static com.vladsch.flexmark.util.sequence.BasedSequence access$000(com.vladsch.flexmark.internal.ListBlockParser);
    Code:
       0: aload_0
       1: getfield      #5                  // Field myItemHandledLine:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: areturn

  static boolean access$100(com.vladsch.flexmark.internal.ListBlockParser);
    Code:
       0: aload_0
       1: getfield      #4                  // Field myItemHandledNewListLine:Z
       4: ireturn

  static boolean access$200(com.vladsch.flexmark.internal.ListBlockParser);
    Code:
       0: aload_0
       1: getfield      #3                  // Field myItemHandledNewItemLine:Z
       4: ireturn

  static com.vladsch.flexmark.internal.ListItemParser access$302(com.vladsch.flexmark.internal.ListBlockParser, com.vladsch.flexmark.internal.ListItemParser);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #2                  // Field myLastChild:Lcom/vladsch/flexmark/internal/ListItemParser;
       6: areturn

  static com.vladsch.flexmark.util.sequence.BasedSequence access$002(com.vladsch.flexmark.internal.ListBlockParser, com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #5                  // Field myItemHandledLine:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       6: areturn

  static boolean access$400(com.vladsch.flexmark.internal.ListBlockParser);
    Code:
       0: aload_0
       1: getfield      #1                  // Field myItemHandledSkipActiveLine:Z
       4: ireturn
}
