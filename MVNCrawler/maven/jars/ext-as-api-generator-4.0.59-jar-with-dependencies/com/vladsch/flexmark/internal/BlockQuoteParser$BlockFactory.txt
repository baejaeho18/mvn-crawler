Compiled from "BlockQuoteParser.java"
class com.vladsch.flexmark.internal.BlockQuoteParser$BlockFactory extends com.vladsch.flexmark.parser.block.AbstractBlockParserFactory {
  private final boolean allowLeadingSpace;

  private final boolean interruptsParagraph;

  private final boolean interruptsItemParagraph;

  private final boolean withLeadSpacesInterruptsItemParagraph;

  com.vladsch.flexmark.internal.BlockQuoteParser$BlockFactory(com.vladsch.flexmark.util.options.DataHolder);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method com/vladsch/flexmark/parser/block/AbstractBlockParserFactory."<init>":(Lcom/vladsch/flexmark/util/options/DataHolder;)V
       5: aload_0
       6: aload_1
       7: getstatic     #2                  // Field com/vladsch/flexmark/parser/Parser.BLOCK_QUOTE_ALLOW_LEADING_SPACE:Lcom/vladsch/flexmark/util/options/DataKey;
      10: invokeinterface #3,  2            // InterfaceMethod com/vladsch/flexmark/util/options/DataHolder.get:(Lcom/vladsch/flexmark/util/options/DataKey;)Ljava/lang/Object;
      15: checkcast     #4                  // class java/lang/Boolean
      18: invokevirtual #5                  // Method java/lang/Boolean.booleanValue:()Z
      21: putfield      #6                  // Field allowLeadingSpace:Z
      24: aload_0
      25: aload_1
      26: getstatic     #7                  // Field com/vladsch/flexmark/parser/Parser.BLOCK_QUOTE_INTERRUPTS_PARAGRAPH:Lcom/vladsch/flexmark/util/options/DataKey;
      29: invokeinterface #3,  2            // InterfaceMethod com/vladsch/flexmark/util/options/DataHolder.get:(Lcom/vladsch/flexmark/util/options/DataKey;)Ljava/lang/Object;
      34: checkcast     #4                  // class java/lang/Boolean
      37: invokevirtual #5                  // Method java/lang/Boolean.booleanValue:()Z
      40: putfield      #8                  // Field interruptsParagraph:Z
      43: aload_0
      44: aload_1
      45: getstatic     #9                  // Field com/vladsch/flexmark/parser/Parser.BLOCK_QUOTE_INTERRUPTS_ITEM_PARAGRAPH:Lcom/vladsch/flexmark/util/options/DataKey;
      48: invokeinterface #3,  2            // InterfaceMethod com/vladsch/flexmark/util/options/DataHolder.get:(Lcom/vladsch/flexmark/util/options/DataKey;)Ljava/lang/Object;
      53: checkcast     #4                  // class java/lang/Boolean
      56: invokevirtual #5                  // Method java/lang/Boolean.booleanValue:()Z
      59: putfield      #10                 // Field interruptsItemParagraph:Z
      62: aload_0
      63: aload_1
      64: getstatic     #11                 // Field com/vladsch/flexmark/parser/Parser.BLOCK_QUOTE_WITH_LEAD_SPACES_INTERRUPTS_ITEM_PARAGRAPH:Lcom/vladsch/flexmark/util/options/DataKey;
      67: invokeinterface #3,  2            // InterfaceMethod com/vladsch/flexmark/util/options/DataHolder.get:(Lcom/vladsch/flexmark/util/options/DataKey;)Ljava/lang/Object;
      72: checkcast     #4                  // class java/lang/Boolean
      75: invokevirtual #5                  // Method java/lang/Boolean.booleanValue:()Z
      78: putfield      #12                 // Field withLeadSpacesInterruptsItemParagraph:Z
      81: return

  public com.vladsch.flexmark.parser.block.BlockStart tryStart(com.vladsch.flexmark.parser.block.ParserState, com.vladsch.flexmark.parser.block.MatchedBlockParser);
    Code:
       0: aload_1
       1: invokeinterface #13,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getNextNonSpaceIndex:()I
       6: istore_3
       7: aload_2
       8: invokeinterface #14,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/MatchedBlockParser.getBlockParser:()Lcom/vladsch/flexmark/parser/block/BlockParser;
      13: astore        4
      15: aload         4
      17: invokeinterface #15,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.isParagraphParser:()Z
      22: istore        5
      24: iload         5
      26: ifeq          72
      29: aload         4
      31: invokeinterface #16,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
      36: invokevirtual #17                 // Method com/vladsch/flexmark/ast/Block.getParent:()Lcom/vladsch/flexmark/ast/Block;
      39: instanceof    #18                 // class com/vladsch/flexmark/ast/ListItem
      42: ifeq          72
      45: aload         4
      47: invokeinterface #16,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
      52: aload         4
      54: invokeinterface #16,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
      59: invokevirtual #17                 // Method com/vladsch/flexmark/ast/Block.getParent:()Lcom/vladsch/flexmark/ast/Block;
      62: invokevirtual #19                 // Method com/vladsch/flexmark/ast/Block.getFirstChild:()Lcom/vladsch/flexmark/ast/Node;
      65: if_acmpne     72
      68: iconst_1
      69: goto          73
      72: iconst_0
      73: istore        6
      75: aload_1
      76: iload_3
      77: iload         5
      79: iload         6
      81: aload_0
      82: getfield      #6                  // Field allowLeadingSpace:Z
      85: aload_0
      86: getfield      #8                  // Field interruptsParagraph:Z
      89: aload_0
      90: getfield      #10                 // Field interruptsItemParagraph:Z
      93: aload_0
      94: getfield      #12                 // Field withLeadSpacesInterruptsItemParagraph:Z
      97: invokestatic  #20                 // Method com/vladsch/flexmark/internal/BlockQuoteParser.isMarker:(Lcom/vladsch/flexmark/parser/block/ParserState;IZZZZZZ)Z
     100: ifeq          182
     103: aload_1
     104: invokeinterface #21,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getColumn:()I
     109: aload_1
     110: invokeinterface #22,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getIndent:()I
     115: iadd
     116: iconst_1
     117: iadd
     118: istore        7
     120: aload_1
     121: invokeinterface #23,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     126: iload_3
     127: iconst_1
     128: iadd
     129: invokestatic  #24                 // Method com/vladsch/flexmark/ast/util/Parsing.isSpaceOrTab:(Ljava/lang/CharSequence;I)Z
     132: ifeq          138
     135: iinc          7, 1
     138: iconst_1
     139: anewarray     #25                 // class com/vladsch/flexmark/parser/block/BlockParser
     142: dup
     143: iconst_0
     144: new           #26                 // class com/vladsch/flexmark/internal/BlockQuoteParser
     147: dup
     148: aload_1
     149: invokeinterface #27,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getProperties:()Lcom/vladsch/flexmark/util/options/MutableDataHolder;
     154: aload_1
     155: invokeinterface #23,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     160: iload_3
     161: iload_3
     162: iconst_1
     163: iadd
     164: invokeinterface #28,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     169: invokespecial #29                 // Method com/vladsch/flexmark/internal/BlockQuoteParser."<init>":(Lcom/vladsch/flexmark/util/options/DataHolder;Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     172: aastore
     173: invokestatic  #30                 // Method com/vladsch/flexmark/parser/block/BlockStart.of:([Lcom/vladsch/flexmark/parser/block/BlockParser;)Lcom/vladsch/flexmark/parser/block/BlockStart;
     176: iload         7
     178: invokevirtual #31                 // Method com/vladsch/flexmark/parser/block/BlockStart.atColumn:(I)Lcom/vladsch/flexmark/parser/block/BlockStart;
     181: areturn
     182: invokestatic  #32                 // Method com/vladsch/flexmark/parser/block/BlockStart.none:()Lcom/vladsch/flexmark/parser/block/BlockStart;
     185: areturn
}
