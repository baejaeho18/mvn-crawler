Compiled from "FencedCodeBlockParser.java"
public class com.vladsch.flexmark.internal.FencedCodeBlockParser extends com.vladsch.flexmark.parser.block.AbstractBlockParser {
  private static final java.util.regex.Pattern OPENING_FENCE;

  private static final java.util.regex.Pattern CLOSING_FENCE;

  private final com.vladsch.flexmark.ast.FencedCodeBlock block;

  private com.vladsch.flexmark.ast.BlockContent content;

  private char fenceChar;

  private int fenceLength;

  private int fenceIndent;

  private int fenceMarkerIndent;

  private final boolean matchingCloser;

  private final boolean codeContentBlock;

  public com.vladsch.flexmark.internal.FencedCodeBlockParser(com.vladsch.flexmark.util.options.DataHolder, char, int, int, int);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method com/vladsch/flexmark/parser/block/AbstractBlockParser."<init>":()V
       4: aload_0
       5: new           #4                  // class com/vladsch/flexmark/ast/FencedCodeBlock
       8: dup
       9: invokespecial #5                  // Method com/vladsch/flexmark/ast/FencedCodeBlock."<init>":()V
      12: putfield      #1                  // Field block:Lcom/vladsch/flexmark/ast/FencedCodeBlock;
      15: aload_0
      16: new           #6                  // class com/vladsch/flexmark/ast/BlockContent
      19: dup
      20: invokespecial #7                  // Method com/vladsch/flexmark/ast/BlockContent."<init>":()V
      23: putfield      #8                  // Field content:Lcom/vladsch/flexmark/ast/BlockContent;
      26: aload_0
      27: iload_2
      28: putfield      #9                  // Field fenceChar:C
      31: aload_0
      32: iload_3
      33: putfield      #10                 // Field fenceLength:I
      36: aload_0
      37: iload         4
      39: putfield      #11                 // Field fenceIndent:I
      42: aload_0
      43: iload         4
      45: iload         5
      47: iadd
      48: putfield      #12                 // Field fenceMarkerIndent:I
      51: aload_0
      52: aload_1
      53: getstatic     #13                 // Field com/vladsch/flexmark/parser/Parser.MATCH_CLOSING_FENCE_CHARACTERS:Lcom/vladsch/flexmark/util/options/DataKey;
      56: invokeinterface #14,  2           // InterfaceMethod com/vladsch/flexmark/util/options/DataHolder.get:(Lcom/vladsch/flexmark/util/options/DataKey;)Ljava/lang/Object;
      61: checkcast     #15                 // class java/lang/Boolean
      64: invokevirtual #16                 // Method java/lang/Boolean.booleanValue:()Z
      67: putfield      #17                 // Field matchingCloser:Z
      70: aload_0
      71: aload_1
      72: getstatic     #18                 // Field com/vladsch/flexmark/parser/Parser.FENCED_CODE_CONTENT_BLOCK:Lcom/vladsch/flexmark/util/options/DataKey;
      75: invokeinterface #14,  2           // InterfaceMethod com/vladsch/flexmark/util/options/DataHolder.get:(Lcom/vladsch/flexmark/util/options/DataKey;)Ljava/lang/Object;
      80: checkcast     #15                 // class java/lang/Boolean
      83: invokevirtual #16                 // Method java/lang/Boolean.booleanValue:()Z
      86: putfield      #19                 // Field codeContentBlock:Z
      89: return

  public com.vladsch.flexmark.ast.Block getBlock();
    Code:
       0: aload_0
       1: getfield      #1                  // Field block:Lcom/vladsch/flexmark/ast/FencedCodeBlock;
       4: areturn

  public int getFenceIndent();
    Code:
       0: aload_0
       1: getfield      #11                 // Field fenceIndent:I
       4: ireturn

  public int getFenceMarkerIndent();
    Code:
       0: aload_0
       1: getfield      #12                 // Field fenceMarkerIndent:I
       4: ireturn

  public com.vladsch.flexmark.parser.block.BlockContinue tryContinue(com.vladsch.flexmark.parser.block.ParserState);
    Code:
       0: aload_1
       1: invokeinterface #20,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getNextNonSpaceIndex:()I
       6: istore_2
       7: aload_1
       8: invokeinterface #21,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getIndex:()I
      13: istore_3
      14: aload_1
      15: invokeinterface #22,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      20: astore        4
      22: aload_1
      23: invokeinterface #23,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getIndent:()I
      28: iconst_3
      29: if_icmpgt     69
      32: iload_2
      33: aload         4
      35: invokeinterface #24,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      40: if_icmpge     69
      43: aload_0
      44: getfield      #17                 // Field matchingCloser:Z
      47: ifeq          65
      50: aload         4
      52: iload_2
      53: invokeinterface #25,  2           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.charAt:(I)C
      58: aload_0
      59: getfield      #9                  // Field fenceChar:C
      62: if_icmpne     69
      65: iconst_1
      66: goto          70
      69: iconst_0
      70: istore        6
      72: iload         6
      74: ifeq          153
      77: aload         4
      79: iload_2
      80: aload         4
      82: invokeinterface #24,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      87: invokeinterface #26,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      92: astore        7
      94: getstatic     #27                 // Field CLOSING_FENCE:Ljava/util/regex/Pattern;
      97: aload         7
      99: invokevirtual #28                 // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
     102: astore        5
     104: aload         5
     106: invokevirtual #29                 // Method java/util/regex/Matcher.find:()Z
     109: ifeq          153
     112: aload         5
     114: iconst_0
     115: invokevirtual #30                 // Method java/util/regex/Matcher.group:(I)Ljava/lang/String;
     118: invokevirtual #31                 // Method java/lang/String.length:()I
     121: istore        8
     123: iload         8
     125: aload_0
     126: getfield      #10                 // Field fenceLength:I
     129: if_icmplt     153
     132: aload_0
     133: getfield      #1                  // Field block:Lcom/vladsch/flexmark/ast/FencedCodeBlock;
     136: aload         7
     138: iconst_0
     139: iload         8
     141: invokeinterface #26,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     146: invokevirtual #32                 // Method com/vladsch/flexmark/ast/FencedCodeBlock.setClosingMarker:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     149: invokestatic  #33                 // Method com/vladsch/flexmark/parser/block/BlockContinue.finished:()Lcom/vladsch/flexmark/parser/block/BlockContinue;
     152: areturn
     153: aload_0
     154: getfield      #11                 // Field fenceIndent:I
     157: istore        7
     159: iload         7
     161: ifle          197
     164: iload_3
     165: aload         4
     167: invokeinterface #24,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
     172: if_icmpge     197
     175: aload         4
     177: iload_3
     178: invokeinterface #25,  2           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.charAt:(I)C
     183: bipush        32
     185: if_icmpne     197
     188: iinc          3, 1
     191: iinc          7, -1
     194: goto          159
     197: iload_3
     198: invokestatic  #34                 // Method com/vladsch/flexmark/parser/block/BlockContinue.atIndex:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
     201: areturn

  public void addLine(com.vladsch.flexmark.parser.block.ParserState, com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: getfield      #8                  // Field content:Lcom/vladsch/flexmark/ast/BlockContent;
       4: aload_2
       5: aload_1
       6: invokeinterface #23,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getIndent:()I
      11: invokevirtual #35                 // Method com/vladsch/flexmark/ast/BlockContent.add:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;I)V
      14: return

  public boolean isPropagatingLastBlankLine(com.vladsch.flexmark.parser.block.BlockParser);
    Code:
       0: iconst_0
       1: ireturn

  public void closeBlock(com.vladsch.flexmark.parser.block.ParserState);
    Code:
       0: aload_0
       1: getfield      #8                  // Field content:Lcom/vladsch/flexmark/ast/BlockContent;
       4: invokevirtual #36                 // Method com/vladsch/flexmark/ast/BlockContent.getLines:()Ljava/util/List;
       7: astore_2
       8: aload_2
       9: invokeinterface #37,  1           // InterfaceMethod java/util/List.size:()I
      14: ifle          216
      17: aload_2
      18: iconst_0
      19: invokeinterface #38,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      24: checkcast     #39                 // class com/vladsch/flexmark/util/sequence/BasedSequence
      27: astore_3
      28: aload_3
      29: invokeinterface #40,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.isBlank:()Z
      34: ifne          50
      37: aload_0
      38: getfield      #1                  // Field block:Lcom/vladsch/flexmark/ast/FencedCodeBlock;
      41: aload_3
      42: invokeinterface #41,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.trim:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      47: invokevirtual #42                 // Method com/vladsch/flexmark/ast/FencedCodeBlock.setInfo:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
      50: aload_0
      51: getfield      #8                  // Field content:Lcom/vladsch/flexmark/ast/BlockContent;
      54: invokevirtual #43                 // Method com/vladsch/flexmark/ast/BlockContent.getSpanningChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      57: astore        4
      59: aload         4
      61: aload         4
      63: invokeinterface #44,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
      68: aload_2
      69: iconst_0
      70: invokeinterface #38,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      75: checkcast     #39                 // class com/vladsch/flexmark/util/sequence/BasedSequence
      78: invokeinterface #45,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
      83: invokeinterface #46,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.baseSubSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      88: astore        5
      90: aload_2
      91: invokeinterface #37,  1           // InterfaceMethod java/util/List.size:()I
      96: iconst_1
      97: if_icmple     201
     100: aload_2
     101: iconst_1
     102: aload_2
     103: invokeinterface #37,  1           // InterfaceMethod java/util/List.size:()I
     108: invokeinterface #47,  3           // InterfaceMethod java/util/List.subList:(II)Ljava/util/List;
     113: astore        6
     115: aload_0
     116: getfield      #1                  // Field block:Lcom/vladsch/flexmark/ast/FencedCodeBlock;
     119: aload         5
     121: aload         6
     123: invokevirtual #48                 // Method com/vladsch/flexmark/ast/FencedCodeBlock.setContent:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;Ljava/util/List;)V
     126: aload_0
     127: getfield      #19                 // Field codeContentBlock:Z
     130: ifeq          166
     133: new           #49                 // class com/vladsch/flexmark/ast/CodeBlock
     136: dup
     137: invokespecial #50                 // Method com/vladsch/flexmark/ast/CodeBlock."<init>":()V
     140: astore        7
     142: aload         7
     144: aload         6
     146: invokevirtual #51                 // Method com/vladsch/flexmark/ast/CodeBlock.setContent:(Ljava/util/List;)V
     149: aload         7
     151: invokevirtual #52                 // Method com/vladsch/flexmark/ast/CodeBlock.setCharsFromContent:()V
     154: aload_0
     155: getfield      #1                  // Field block:Lcom/vladsch/flexmark/ast/FencedCodeBlock;
     158: aload         7
     160: invokevirtual #53                 // Method com/vladsch/flexmark/ast/FencedCodeBlock.appendChild:(Lcom/vladsch/flexmark/ast/Node;)V
     163: goto          198
     166: new           #54                 // class com/vladsch/flexmark/ast/Text
     169: dup
     170: aload         6
     172: aload         4
     174: iconst_0
     175: iconst_0
     176: invokeinterface #26,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     181: invokestatic  #55                 // Method com/vladsch/flexmark/util/sequence/SegmentedSequence.of:(Ljava/util/List;Lcom/vladsch/flexmark/util/sequence/BasedSequence;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     184: invokespecial #56                 // Method com/vladsch/flexmark/ast/Text."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     187: astore        7
     189: aload_0
     190: getfield      #1                  // Field block:Lcom/vladsch/flexmark/ast/FencedCodeBlock;
     193: aload         7
     195: invokevirtual #53                 // Method com/vladsch/flexmark/ast/FencedCodeBlock.appendChild:(Lcom/vladsch/flexmark/ast/Node;)V
     198: goto          213
     201: aload_0
     202: getfield      #1                  // Field block:Lcom/vladsch/flexmark/ast/FencedCodeBlock;
     205: aload         5
     207: getstatic     #57                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.EMPTY_LIST:Ljava/util/List;
     210: invokevirtual #48                 // Method com/vladsch/flexmark/ast/FencedCodeBlock.setContent:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;Ljava/util/List;)V
     213: goto          227
     216: aload_0
     217: getfield      #1                  // Field block:Lcom/vladsch/flexmark/ast/FencedCodeBlock;
     220: aload_0
     221: getfield      #8                  // Field content:Lcom/vladsch/flexmark/ast/BlockContent;
     224: invokevirtual #58                 // Method com/vladsch/flexmark/ast/FencedCodeBlock.setContent:(Lcom/vladsch/flexmark/ast/BlockContent;)V
     227: aload_0
     228: getfield      #1                  // Field block:Lcom/vladsch/flexmark/ast/FencedCodeBlock;
     231: invokevirtual #59                 // Method com/vladsch/flexmark/ast/FencedCodeBlock.setCharsFromContent:()V
     234: aload_0
     235: aconst_null
     236: putfield      #8                  // Field content:Lcom/vladsch/flexmark/ast/BlockContent;
     239: return

  static java.util.regex.Pattern access$100();
    Code:
       0: getstatic     #2                  // Field OPENING_FENCE:Ljava/util/regex/Pattern;
       3: areturn

  static com.vladsch.flexmark.ast.FencedCodeBlock access$200(com.vladsch.flexmark.internal.FencedCodeBlockParser);
    Code:
       0: aload_0
       1: getfield      #1                  // Field block:Lcom/vladsch/flexmark/ast/FencedCodeBlock;
       4: areturn

  static {};
    Code:
       0: ldc           #60                 // String ^`{3,}(?!.*`)|^~{3,}(?!.*~)
       2: invokestatic  #61                 // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
       5: putstatic     #2                  // Field OPENING_FENCE:Ljava/util/regex/Pattern;
       8: ldc           #62                 // String ^(?:`{3,}|~{3,})(?=[ \t]*$)
      10: invokestatic  #61                 // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
      13: putstatic     #27                 // Field CLOSING_FENCE:Ljava/util/regex/Pattern;
      16: return
}
