Compiled from "ThematicBreakParser.java"
class com.vladsch.flexmark.internal.ThematicBreakParser$BlockFactory extends com.vladsch.flexmark.parser.block.AbstractBlockParserFactory {
  private final com.vladsch.flexmark.internal.ThematicBreakOptions options;

  private com.vladsch.flexmark.internal.ThematicBreakParser$BlockFactory(com.vladsch.flexmark.util.options.DataHolder);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #2                  // Method com/vladsch/flexmark/parser/block/AbstractBlockParserFactory."<init>":(Lcom/vladsch/flexmark/util/options/DataHolder;)V
       5: aload_0
       6: new           #3                  // class com/vladsch/flexmark/internal/ThematicBreakOptions
       9: dup
      10: aload_1
      11: invokespecial #4                  // Method com/vladsch/flexmark/internal/ThematicBreakOptions."<init>":(Lcom/vladsch/flexmark/util/options/DataHolder;)V
      14: putfield      #5                  // Field options:Lcom/vladsch/flexmark/internal/ThematicBreakOptions;
      17: return

  public com.vladsch.flexmark.parser.block.BlockStart tryStart(com.vladsch.flexmark.parser.block.ParserState, com.vladsch.flexmark.parser.block.MatchedBlockParser);
    Code:
       0: aload_1
       1: invokeinterface #6,  1            // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getIndent:()I
       6: iconst_4
       7: if_icmpge     34
      10: aload_2
      11: invokeinterface #7,  1            // InterfaceMethod com/vladsch/flexmark/parser/block/MatchedBlockParser.getBlockParser:()Lcom/vladsch/flexmark/parser/block/BlockParser;
      16: invokeinterface #8,  1            // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.isParagraphParser:()Z
      21: ifeq          38
      24: aload_0
      25: getfield      #5                  // Field options:Lcom/vladsch/flexmark/internal/ThematicBreakOptions;
      28: getfield      #9                  // Field com/vladsch/flexmark/internal/ThematicBreakOptions.relaxedStart:Z
      31: ifne          38
      34: invokestatic  #10                 // Method com/vladsch/flexmark/parser/block/BlockStart.none:()Lcom/vladsch/flexmark/parser/block/BlockStart;
      37: areturn
      38: aload_1
      39: invokeinterface #11,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      44: astore_3
      45: aload_3
      46: aload_1
      47: invokeinterface #12,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getNextNonSpaceIndex:()I
      52: aload_3
      53: invokeinterface #13,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      58: invokeinterface #14,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      63: astore        4
      65: invokestatic  #15                 // Method com/vladsch/flexmark/internal/ThematicBreakParser.access$100:()Ljava/util/regex/Pattern;
      68: aload         4
      70: invokevirtual #16                 // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
      73: invokevirtual #17                 // Method java/util/regex/Matcher.matches:()Z
      76: ifeq          118
      79: iconst_1
      80: anewarray     #18                 // class com/vladsch/flexmark/parser/block/BlockParser
      83: dup
      84: iconst_0
      85: new           #19                 // class com/vladsch/flexmark/internal/ThematicBreakParser
      88: dup
      89: aload_3
      90: aload_1
      91: invokeinterface #20,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getIndex:()I
      96: invokeinterface #21,  2           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(I)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     101: invokespecial #22                 // Method com/vladsch/flexmark/internal/ThematicBreakParser."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     104: aastore
     105: invokestatic  #23                 // Method com/vladsch/flexmark/parser/block/BlockStart.of:([Lcom/vladsch/flexmark/parser/block/BlockParser;)Lcom/vladsch/flexmark/parser/block/BlockStart;
     108: aload_3
     109: invokeinterface #13,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
     114: invokevirtual #24                 // Method com/vladsch/flexmark/parser/block/BlockStart.atIndex:(I)Lcom/vladsch/flexmark/parser/block/BlockStart;
     117: areturn
     118: invokestatic  #10                 // Method com/vladsch/flexmark/parser/block/BlockStart.none:()Lcom/vladsch/flexmark/parser/block/BlockStart;
     121: areturn

  com.vladsch.flexmark.internal.ThematicBreakParser$BlockFactory(com.vladsch.flexmark.util.options.DataHolder, com.vladsch.flexmark.internal.ThematicBreakParser$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method "<init>":(Lcom/vladsch/flexmark/util/options/DataHolder;)V
       5: return
}
