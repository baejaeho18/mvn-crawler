Compiled from "HtmlBlockParser.java"
class com.vladsch.flexmark.internal.HtmlBlockParser$BlockFactory extends com.vladsch.flexmark.parser.block.AbstractBlockParserFactory {
  private com.vladsch.flexmark.internal.HtmlBlockParser$Patterns myPatterns;

  private final boolean myHtmlCommentBlocksInterruptParagraph;

  private final boolean myHtmlBlockDeepParser;

  private final boolean myHtmlBlockDeepParseNonBlock;

  private final boolean myHtmlBlockDeepParseFirstOpenTagOnOneLine;

  private final boolean myHtmlBlockCommentOnlyFullLine;

  private final boolean myHtmlBlockStartOnlyOnBlockTags;

  private com.vladsch.flexmark.internal.HtmlBlockParser$BlockFactory(com.vladsch.flexmark.util.options.DataHolder);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #2                  // Method com/vladsch/flexmark/parser/block/AbstractBlockParserFactory."<init>":(Lcom/vladsch/flexmark/util/options/DataHolder;)V
       5: aload_0
       6: aconst_null
       7: putfield      #3                  // Field myPatterns:Lcom/vladsch/flexmark/internal/HtmlBlockParser$Patterns;
      10: aload_0
      11: getstatic     #4                  // Field com/vladsch/flexmark/parser/Parser.HTML_COMMENT_BLOCKS_INTERRUPT_PARAGRAPH:Lcom/vladsch/flexmark/util/options/DataKey;
      14: aload_1
      15: invokevirtual #5                  // Method com/vladsch/flexmark/util/options/DataKey.getFrom:(Lcom/vladsch/flexmark/util/options/DataHolder;)Ljava/lang/Object;
      18: checkcast     #6                  // class java/lang/Boolean
      21: invokevirtual #7                  // Method java/lang/Boolean.booleanValue:()Z
      24: putfield      #8                  // Field myHtmlCommentBlocksInterruptParagraph:Z
      27: aload_0
      28: aload_1
      29: getstatic     #9                  // Field com/vladsch/flexmark/parser/Parser.HTML_BLOCK_DEEP_PARSER:Lcom/vladsch/flexmark/util/options/DataKey;
      32: invokeinterface #10,  2           // InterfaceMethod com/vladsch/flexmark/util/options/DataHolder.get:(Lcom/vladsch/flexmark/util/options/DataKey;)Ljava/lang/Object;
      37: checkcast     #6                  // class java/lang/Boolean
      40: invokevirtual #7                  // Method java/lang/Boolean.booleanValue:()Z
      43: putfield      #11                 // Field myHtmlBlockDeepParser:Z
      46: aload_0
      47: aload_1
      48: getstatic     #12                 // Field com/vladsch/flexmark/parser/Parser.HTML_BLOCK_DEEP_PARSE_NON_BLOCK:Lcom/vladsch/flexmark/util/options/DataKey;
      51: invokeinterface #10,  2           // InterfaceMethod com/vladsch/flexmark/util/options/DataHolder.get:(Lcom/vladsch/flexmark/util/options/DataKey;)Ljava/lang/Object;
      56: checkcast     #6                  // class java/lang/Boolean
      59: invokevirtual #7                  // Method java/lang/Boolean.booleanValue:()Z
      62: putfield      #13                 // Field myHtmlBlockDeepParseNonBlock:Z
      65: aload_0
      66: aload_1
      67: getstatic     #14                 // Field com/vladsch/flexmark/parser/Parser.HTML_BLOCK_DEEP_PARSE_FIRST_OPEN_TAG_ON_ONE_LINE:Lcom/vladsch/flexmark/util/options/DataKey;
      70: invokeinterface #10,  2           // InterfaceMethod com/vladsch/flexmark/util/options/DataHolder.get:(Lcom/vladsch/flexmark/util/options/DataKey;)Ljava/lang/Object;
      75: checkcast     #6                  // class java/lang/Boolean
      78: invokevirtual #7                  // Method java/lang/Boolean.booleanValue:()Z
      81: putfield      #15                 // Field myHtmlBlockDeepParseFirstOpenTagOnOneLine:Z
      84: aload_0
      85: aload_1
      86: getstatic     #16                 // Field com/vladsch/flexmark/parser/Parser.HTML_BLOCK_COMMENT_ONLY_FULL_LINE:Lcom/vladsch/flexmark/util/options/DataKey;
      89: invokeinterface #10,  2           // InterfaceMethod com/vladsch/flexmark/util/options/DataHolder.get:(Lcom/vladsch/flexmark/util/options/DataKey;)Ljava/lang/Object;
      94: checkcast     #6                  // class java/lang/Boolean
      97: invokevirtual #7                  // Method java/lang/Boolean.booleanValue:()Z
     100: putfield      #17                 // Field myHtmlBlockCommentOnlyFullLine:Z
     103: aload_0
     104: aload_1
     105: getstatic     #18                 // Field com/vladsch/flexmark/parser/Parser.HTML_BLOCK_START_ONLY_ON_BLOCK_TAGS:Lcom/vladsch/flexmark/util/options/DataKey;
     108: invokeinterface #10,  2           // InterfaceMethod com/vladsch/flexmark/util/options/DataHolder.get:(Lcom/vladsch/flexmark/util/options/DataKey;)Ljava/lang/Object;
     113: checkcast     #6                  // class java/lang/Boolean
     116: invokevirtual #7                  // Method java/lang/Boolean.booleanValue:()Z
     119: putfield      #19                 // Field myHtmlBlockStartOnlyOnBlockTags:Z
     122: return

  public com.vladsch.flexmark.parser.block.BlockStart tryStart(com.vladsch.flexmark.parser.block.ParserState, com.vladsch.flexmark.parser.block.MatchedBlockParser);
    Code:
       0: aload_1
       1: invokeinterface #20,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getNextNonSpaceIndex:()I
       6: istore_3
       7: aload_1
       8: invokeinterface #21,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      13: astore        4
      15: aload_1
      16: invokeinterface #22,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getIndent:()I
      21: iconst_4
      22: if_icmpge     538
      25: aload         4
      27: iload_3
      28: invokeinterface #23,  2           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.charAt:(I)C
      33: bipush        60
      35: if_icmpne     538
      38: aload_2
      39: invokeinterface #24,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/MatchedBlockParser.getBlockParser:()Lcom/vladsch/flexmark/parser/block/BlockParser;
      44: instanceof    #25                 // class com/vladsch/flexmark/internal/HtmlBlockParser
      47: ifne          538
      50: aload_0
      51: getfield      #11                 // Field myHtmlBlockDeepParser:Z
      54: ifeq          210
      57: new           #26                 // class com/vladsch/flexmark/internal/HtmlDeepParser
      60: dup
      61: invokespecial #27                 // Method com/vladsch/flexmark/internal/HtmlDeepParser."<init>":()V
      64: astore        5
      66: aload         5
      68: aload         4
      70: iload_3
      71: aload         4
      73: invokeinterface #28,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      78: invokeinterface #29,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      83: aload_0
      84: getfield      #19                 // Field myHtmlBlockStartOnlyOnBlockTags:Z
      87: aload_0
      88: getfield      #13                 // Field myHtmlBlockDeepParseNonBlock:Z
      91: aload_0
      92: getfield      #15                 // Field myHtmlBlockDeepParseFirstOpenTagOnOneLine:Z
      95: invokevirtual #30                 // Method com/vladsch/flexmark/internal/HtmlDeepParser.parseHtmlChunk:(Ljava/lang/CharSequence;ZZZ)V
      98: aload         5
     100: invokevirtual #31                 // Method com/vladsch/flexmark/internal/HtmlDeepParser.hadHtml:()Z
     103: ifeq          207
     106: aload         5
     108: invokevirtual #32                 // Method com/vladsch/flexmark/internal/HtmlDeepParser.getHtmlMatch:()Lcom/vladsch/flexmark/internal/HtmlDeepParser$HtmlMatch;
     111: getstatic     #33                 // Field com/vladsch/flexmark/internal/HtmlDeepParser$HtmlMatch.OPEN_TAG:Lcom/vladsch/flexmark/internal/HtmlDeepParser$HtmlMatch;
     114: if_acmpeq     135
     117: aload_0
     118: getfield      #8                  // Field myHtmlCommentBlocksInterruptParagraph:Z
     121: ifne          155
     124: aload         5
     126: invokevirtual #32                 // Method com/vladsch/flexmark/internal/HtmlDeepParser.getHtmlMatch:()Lcom/vladsch/flexmark/internal/HtmlDeepParser$HtmlMatch;
     129: getstatic     #34                 // Field com/vladsch/flexmark/internal/HtmlDeepParser$HtmlMatch.COMMENT:Lcom/vladsch/flexmark/internal/HtmlDeepParser$HtmlMatch;
     132: if_acmpne     155
     135: aload_2
     136: invokeinterface #24,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/MatchedBlockParser.getBlockParser:()Lcom/vladsch/flexmark/parser/block/BlockParser;
     141: invokeinterface #35,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
     146: instanceof    #36                 // class com/vladsch/flexmark/ast/Paragraph
     149: ifeq          155
     152: goto          207
     155: iconst_1
     156: anewarray     #37                 // class com/vladsch/flexmark/parser/block/BlockParser
     159: dup
     160: iconst_0
     161: new           #25                 // class com/vladsch/flexmark/internal/HtmlBlockParser
     164: dup
     165: aload_1
     166: invokeinterface #38,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getProperties:()Lcom/vladsch/flexmark/util/options/MutableDataHolder;
     171: aconst_null
     172: aload         5
     174: invokevirtual #32                 // Method com/vladsch/flexmark/internal/HtmlDeepParser.getHtmlMatch:()Lcom/vladsch/flexmark/internal/HtmlDeepParser$HtmlMatch;
     177: getstatic     #34                 // Field com/vladsch/flexmark/internal/HtmlDeepParser$HtmlMatch.COMMENT:Lcom/vladsch/flexmark/internal/HtmlDeepParser$HtmlMatch;
     180: if_acmpne     187
     183: iconst_1
     184: goto          188
     187: iconst_0
     188: aload         5
     190: invokespecial #39                 // Method com/vladsch/flexmark/internal/HtmlBlockParser."<init>":(Lcom/vladsch/flexmark/util/options/DataHolder;Ljava/util/regex/Pattern;ZLcom/vladsch/flexmark/internal/HtmlDeepParser;)V
     193: aastore
     194: invokestatic  #40                 // Method com/vladsch/flexmark/parser/block/BlockStart.of:([Lcom/vladsch/flexmark/parser/block/BlockParser;)Lcom/vladsch/flexmark/parser/block/BlockStart;
     197: aload_1
     198: invokeinterface #41,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getIndex:()I
     203: invokevirtual #42                 // Method com/vladsch/flexmark/parser/block/BlockStart.atIndex:(I)Lcom/vladsch/flexmark/parser/block/BlockStart;
     206: areturn
     207: goto          538
     210: iconst_1
     211: istore        5
     213: iload         5
     215: bipush        7
     217: if_icmpgt     538
     220: iload         5
     222: bipush        7
     224: if_icmpne     254
     227: aload_0
     228: getfield      #19                 // Field myHtmlBlockStartOnlyOnBlockTags:Z
     231: ifne          532
     234: aload_2
     235: invokeinterface #24,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/MatchedBlockParser.getBlockParser:()Lcom/vladsch/flexmark/parser/block/BlockParser;
     240: invokeinterface #35,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
     245: instanceof    #36                 // class com/vladsch/flexmark/ast/Paragraph
     248: ifeq          254
     251: goto          532
     254: aload_0
     255: getfield      #3                  // Field myPatterns:Lcom/vladsch/flexmark/internal/HtmlBlockParser$Patterns;
     258: ifnonnull     278
     261: aload_0
     262: new           #43                 // class com/vladsch/flexmark/internal/HtmlBlockParser$Patterns
     265: dup
     266: aload_1
     267: invokeinterface #44,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getParsing:()Lcom/vladsch/flexmark/ast/util/Parsing;
     272: invokespecial #45                 // Method com/vladsch/flexmark/internal/HtmlBlockParser$Patterns."<init>":(Lcom/vladsch/flexmark/ast/util/Parsing;)V
     275: putfield      #3                  // Field myPatterns:Lcom/vladsch/flexmark/internal/HtmlBlockParser$Patterns;
     278: aload_0
     279: getfield      #3                  // Field myPatterns:Lcom/vladsch/flexmark/internal/HtmlBlockParser$Patterns;
     282: getfield      #46                 // Field com/vladsch/flexmark/internal/HtmlBlockParser$Patterns.BLOCK_PATTERNS:[[Ljava/util/regex/Pattern;
     285: iload         5
     287: aaload
     288: iconst_0
     289: aaload
     290: astore        6
     292: aload_0
     293: getfield      #3                  // Field myPatterns:Lcom/vladsch/flexmark/internal/HtmlBlockParser$Patterns;
     296: getfield      #46                 // Field com/vladsch/flexmark/internal/HtmlBlockParser$Patterns.BLOCK_PATTERNS:[[Ljava/util/regex/Pattern;
     299: iload         5
     301: aaload
     302: iconst_1
     303: aaload
     304: astore        7
     306: aload         6
     308: aload         4
     310: iload_3
     311: aload         4
     313: invokeinterface #28,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
     318: invokeinterface #29,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     323: invokevirtual #47                 // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
     326: astore        8
     328: aload         8
     330: invokevirtual #48                 // Method java/util/regex/Matcher.find:()Z
     333: istore        9
     335: iload         9
     337: ifeq          532
     340: aload_0
     341: getfield      #8                  // Field myHtmlCommentBlocksInterruptParagraph:Z
     344: ifne          371
     347: iload         5
     349: aload_0
     350: getfield      #3                  // Field myPatterns:Lcom/vladsch/flexmark/internal/HtmlBlockParser$Patterns;
     353: getfield      #49                 // Field com/vladsch/flexmark/internal/HtmlBlockParser$Patterns.COMMENT_PATTERN_INDEX:I
     356: if_icmpne     371
     359: aload_2
     360: invokeinterface #24,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/MatchedBlockParser.getBlockParser:()Lcom/vladsch/flexmark/parser/block/BlockParser;
     365: instanceof    #50                 // class com/vladsch/flexmark/internal/ParagraphParser
     368: ifne          532
     371: iload         5
     373: aload_0
     374: getfield      #3                  // Field myPatterns:Lcom/vladsch/flexmark/internal/HtmlBlockParser$Patterns;
     377: getfield      #49                 // Field com/vladsch/flexmark/internal/HtmlBlockParser$Patterns.COMMENT_PATTERN_INDEX:I
     380: if_icmpne     479
     383: aload_0
     384: getfield      #17                 // Field myHtmlBlockCommentOnlyFullLine:Z
     387: ifeq          479
     390: aload_0
     391: getfield      #3                  // Field myPatterns:Lcom/vladsch/flexmark/internal/HtmlBlockParser$Patterns;
     394: getfield      #46                 // Field com/vladsch/flexmark/internal/HtmlBlockParser$Patterns.BLOCK_PATTERNS:[[Ljava/util/regex/Pattern;
     397: aload_0
     398: getfield      #3                  // Field myPatterns:Lcom/vladsch/flexmark/internal/HtmlBlockParser$Patterns;
     401: getfield      #49                 // Field com/vladsch/flexmark/internal/HtmlBlockParser$Patterns.COMMENT_PATTERN_INDEX:I
     404: aaload
     405: iconst_1
     406: aaload
     407: aload         4
     409: aload         8
     411: invokevirtual #51                 // Method java/util/regex/Matcher.end:()I
     414: aload         4
     416: invokeinterface #28,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
     421: invokeinterface #29,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     426: invokevirtual #47                 // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
     429: astore        10
     431: aload         10
     433: invokevirtual #48                 // Method java/util/regex/Matcher.find:()Z
     436: ifeq          479
     439: aload         4
     441: aload         10
     443: invokevirtual #51                 // Method java/util/regex/Matcher.end:()I
     446: aload         4
     448: invokeinterface #28,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
     453: invokeinterface #29,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     458: invokeinterface #52,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.trim:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     463: astore        11
     465: aload         11
     467: ldc           #53                 // String -->
     469: invokevirtual #54                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
     472: ifne          479
     475: invokestatic  #55                 // Method com/vladsch/flexmark/parser/block/BlockStart.none:()Lcom/vladsch/flexmark/parser/block/BlockStart;
     478: areturn
     479: iconst_1
     480: anewarray     #37                 // class com/vladsch/flexmark/parser/block/BlockParser
     483: dup
     484: iconst_0
     485: new           #25                 // class com/vladsch/flexmark/internal/HtmlBlockParser
     488: dup
     489: aload_1
     490: invokeinterface #38,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getProperties:()Lcom/vladsch/flexmark/util/options/MutableDataHolder;
     495: aload         7
     497: iload         5
     499: aload_0
     500: getfield      #3                  // Field myPatterns:Lcom/vladsch/flexmark/internal/HtmlBlockParser$Patterns;
     503: getfield      #49                 // Field com/vladsch/flexmark/internal/HtmlBlockParser$Patterns.COMMENT_PATTERN_INDEX:I
     506: if_icmpne     513
     509: iconst_1
     510: goto          514
     513: iconst_0
     514: aconst_null
     515: invokespecial #39                 // Method com/vladsch/flexmark/internal/HtmlBlockParser."<init>":(Lcom/vladsch/flexmark/util/options/DataHolder;Ljava/util/regex/Pattern;ZLcom/vladsch/flexmark/internal/HtmlDeepParser;)V
     518: aastore
     519: invokestatic  #40                 // Method com/vladsch/flexmark/parser/block/BlockStart.of:([Lcom/vladsch/flexmark/parser/block/BlockParser;)Lcom/vladsch/flexmark/parser/block/BlockStart;
     522: aload_1
     523: invokeinterface #41,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getIndex:()I
     528: invokevirtual #42                 // Method com/vladsch/flexmark/parser/block/BlockStart.atIndex:(I)Lcom/vladsch/flexmark/parser/block/BlockStart;
     531: areturn
     532: iinc          5, 1
     535: goto          213
     538: invokestatic  #55                 // Method com/vladsch/flexmark/parser/block/BlockStart.none:()Lcom/vladsch/flexmark/parser/block/BlockStart;
     541: areturn

  com.vladsch.flexmark.internal.HtmlBlockParser$BlockFactory(com.vladsch.flexmark.util.options.DataHolder, com.vladsch.flexmark.internal.HtmlBlockParser$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method "<init>":(Lcom/vladsch/flexmark/util/options/DataHolder;)V
       5: return
}
