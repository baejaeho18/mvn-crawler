Compiled from "DocumentParser.java"
public class com.vladsch.flexmark.internal.DocumentParser implements com.vladsch.flexmark.parser.block.ParserState {
  public static final com.vladsch.flexmark.parser.InlineParserFactory INLINE_PARSER_FACTORY;

  private static final java.util.HashMap<com.vladsch.flexmark.parser.block.CustomBlockParserFactory, com.vladsch.flexmark.util.options.DataKey<java.lang.Boolean>> CORE_FACTORIES_DATA_KEYS;

  private static final java.util.HashMap<com.vladsch.flexmark.util.options.DataKey<java.lang.Boolean>, com.vladsch.flexmark.parser.block.ParagraphPreProcessorFactory> CORE_PARAGRAPH_PRE_PROCESSORS;

  private static final java.util.HashMap<com.vladsch.flexmark.util.options.DataKey<java.lang.Boolean>, com.vladsch.flexmark.parser.block.BlockPreProcessorFactory> CORE_BLOCK_PRE_PROCESSORS;

  private com.vladsch.flexmark.util.sequence.BasedSequence line;

  private com.vladsch.flexmark.util.sequence.BasedSequence lineWithEOL;

  private int lineNumber;

  private int lineStart;

  private int lineEOLIndex;

  private int lineEndIndex;

  private int index;

  private int column;

  private boolean columnIsInTab;

  private int nextNonSpace;

  private int nextNonSpaceColumn;

  private int indent;

  private boolean blank;

  private final java.util.List<com.vladsch.flexmark.parser.block.BlockParserFactory> blockParserFactories;

  private final com.vladsch.flexmark.internal.DocumentParser$ParagraphPreProcessorDependencies paragraphPreProcessorDependencies;

  private final com.vladsch.flexmark.internal.DocumentParser$BlockPreProcessorDependencies blockPreProcessorDependencies;

  private final com.vladsch.flexmark.parser.InlineParser inlineParser;

  private final com.vladsch.flexmark.internal.DocumentBlockParser documentBlockParser;

  private final boolean blankLinesInAst;

  private final boolean trackDocumentLines;

  private final java.util.List<com.vladsch.flexmark.util.sequence.BasedSequence> lineSegments;

  private java.util.List<com.vladsch.flexmark.parser.block.BlockParser> activeBlockParsers;

  private final com.vladsch.flexmark.ast.util.ClassifyingBlockTracker blockTracker;

  private java.util.Map<com.vladsch.flexmark.ast.Node, java.lang.Boolean> lastLineBlank;

  private final com.vladsch.flexmark.util.options.DataHolder options;

  private com.vladsch.flexmark.parser.block.ParserPhase currentPhase;

  private final com.vladsch.flexmark.ast.util.Parsing myParsing;

  public java.util.List<com.vladsch.flexmark.util.sequence.BasedSequence> getLineSegments();
    Code:
       0: aload_0
       1: getfield      #1                  // Field lineSegments:Ljava/util/List;
       4: areturn

  public void blockParserAdded(com.vladsch.flexmark.parser.block.BlockParser);
    Code:
       0: aload_0
       1: getfield      #2                  // Field blockTracker:Lcom/vladsch/flexmark/ast/util/ClassifyingBlockTracker;
       4: aload_1
       5: invokevirtual #3                  // Method com/vladsch/flexmark/ast/util/ClassifyingBlockTracker.blockParserAdded:(Lcom/vladsch/flexmark/parser/block/BlockParser;)V
       8: return

  public void blockParserRemoved(com.vladsch.flexmark.parser.block.BlockParser);
    Code:
       0: aload_0
       1: getfield      #2                  // Field blockTracker:Lcom/vladsch/flexmark/ast/util/ClassifyingBlockTracker;
       4: aload_1
       5: invokevirtual #4                  // Method com/vladsch/flexmark/ast/util/ClassifyingBlockTracker.blockParserRemoved:(Lcom/vladsch/flexmark/parser/block/BlockParser;)V
       8: return

  public void blockAdded(com.vladsch.flexmark.ast.Block);
    Code:
       0: aload_0
       1: getfield      #2                  // Field blockTracker:Lcom/vladsch/flexmark/ast/util/ClassifyingBlockTracker;
       4: aload_1
       5: invokevirtual #5                  // Method com/vladsch/flexmark/ast/util/ClassifyingBlockTracker.blockAdded:(Lcom/vladsch/flexmark/ast/Block;)V
       8: return

  public void blockAddedWithChildren(com.vladsch.flexmark.ast.Block);
    Code:
       0: aload_0
       1: getfield      #2                  // Field blockTracker:Lcom/vladsch/flexmark/ast/util/ClassifyingBlockTracker;
       4: aload_1
       5: invokevirtual #6                  // Method com/vladsch/flexmark/ast/util/ClassifyingBlockTracker.blockAddedWithChildren:(Lcom/vladsch/flexmark/ast/Block;)V
       8: return

  public void blockAddedWithDescendants(com.vladsch.flexmark.ast.Block);
    Code:
       0: aload_0
       1: getfield      #2                  // Field blockTracker:Lcom/vladsch/flexmark/ast/util/ClassifyingBlockTracker;
       4: aload_1
       5: invokevirtual #7                  // Method com/vladsch/flexmark/ast/util/ClassifyingBlockTracker.blockAddedWithDescendants:(Lcom/vladsch/flexmark/ast/Block;)V
       8: return

  public void blockRemoved(com.vladsch.flexmark.ast.Block);
    Code:
       0: aload_0
       1: getfield      #2                  // Field blockTracker:Lcom/vladsch/flexmark/ast/util/ClassifyingBlockTracker;
       4: aload_1
       5: invokevirtual #8                  // Method com/vladsch/flexmark/ast/util/ClassifyingBlockTracker.blockRemoved:(Lcom/vladsch/flexmark/ast/Block;)V
       8: return

  public void blockRemovedWithChildren(com.vladsch.flexmark.ast.Block);
    Code:
       0: aload_0
       1: getfield      #2                  // Field blockTracker:Lcom/vladsch/flexmark/ast/util/ClassifyingBlockTracker;
       4: aload_1
       5: invokevirtual #9                  // Method com/vladsch/flexmark/ast/util/ClassifyingBlockTracker.blockRemovedWithChildren:(Lcom/vladsch/flexmark/ast/Block;)V
       8: return

  public void blockRemovedWithDescendants(com.vladsch.flexmark.ast.Block);
    Code:
       0: aload_0
       1: getfield      #2                  // Field blockTracker:Lcom/vladsch/flexmark/ast/util/ClassifyingBlockTracker;
       4: aload_1
       5: invokevirtual #10                 // Method com/vladsch/flexmark/ast/util/ClassifyingBlockTracker.blockRemovedWithDescendants:(Lcom/vladsch/flexmark/ast/Block;)V
       8: return

  public com.vladsch.flexmark.parser.block.ParserPhase getParserPhase();
    Code:
       0: aload_0
       1: getfield      #11                 // Field currentPhase:Lcom/vladsch/flexmark/parser/block/ParserPhase;
       4: areturn

  public com.vladsch.flexmark.internal.DocumentParser(com.vladsch.flexmark.util.options.DataHolder, java.util.List<com.vladsch.flexmark.parser.block.CustomBlockParserFactory>, com.vladsch.flexmark.internal.DocumentParser$ParagraphPreProcessorDependencies, com.vladsch.flexmark.internal.DocumentParser$BlockPreProcessorDependencies, com.vladsch.flexmark.parser.InlineParser);
    Code:
       0: aload_0
       1: invokespecial #12                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #13                 // Field lineNumber:I
       9: aload_0
      10: iconst_0
      11: putfield      #14                 // Field lineStart:I
      14: aload_0
      15: iconst_0
      16: putfield      #15                 // Field lineEOLIndex:I
      19: aload_0
      20: iconst_0
      21: putfield      #16                 // Field lineEndIndex:I
      24: aload_0
      25: iconst_0
      26: putfield      #17                 // Field index:I
      29: aload_0
      30: iconst_0
      31: putfield      #18                 // Field column:I
      34: aload_0
      35: iconst_0
      36: putfield      #19                 // Field nextNonSpace:I
      39: aload_0
      40: iconst_0
      41: putfield      #20                 // Field nextNonSpaceColumn:I
      44: aload_0
      45: iconst_0
      46: putfield      #21                 // Field indent:I
      49: aload_0
      50: new           #22                 // class java/util/ArrayList
      53: dup
      54: invokespecial #23                 // Method java/util/ArrayList."<init>":()V
      57: putfield      #1                  // Field lineSegments:Ljava/util/List;
      60: aload_0
      61: new           #22                 // class java/util/ArrayList
      64: dup
      65: invokespecial #23                 // Method java/util/ArrayList."<init>":()V
      68: putfield      #24                 // Field activeBlockParsers:Ljava/util/List;
      71: aload_0
      72: new           #25                 // class com/vladsch/flexmark/ast/util/ClassifyingBlockTracker
      75: dup
      76: invokespecial #26                 // Method com/vladsch/flexmark/ast/util/ClassifyingBlockTracker."<init>":()V
      79: putfield      #2                  // Field blockTracker:Lcom/vladsch/flexmark/ast/util/ClassifyingBlockTracker;
      82: aload_0
      83: new           #27                 // class java/util/HashMap
      86: dup
      87: invokespecial #28                 // Method java/util/HashMap."<init>":()V
      90: putfield      #29                 // Field lastLineBlank:Ljava/util/Map;
      93: aload_0
      94: getstatic     #30                 // Field com/vladsch/flexmark/parser/block/ParserPhase.NONE:Lcom/vladsch/flexmark/parser/block/ParserPhase;
      97: putfield      #11                 // Field currentPhase:Lcom/vladsch/flexmark/parser/block/ParserPhase;
     100: aload_0
     101: aload_1
     102: putfield      #31                 // Field options:Lcom/vladsch/flexmark/util/options/DataHolder;
     105: aload_0
     106: new           #32                 // class com/vladsch/flexmark/ast/util/Parsing
     109: dup
     110: aload_1
     111: invokespecial #33                 // Method com/vladsch/flexmark/ast/util/Parsing."<init>":(Lcom/vladsch/flexmark/util/options/DataHolder;)V
     114: putfield      #34                 // Field myParsing:Lcom/vladsch/flexmark/ast/util/Parsing;
     117: new           #22                 // class java/util/ArrayList
     120: dup
     121: aload_2
     122: invokeinterface #35,  1           // InterfaceMethod java/util/List.size:()I
     127: invokespecial #36                 // Method java/util/ArrayList."<init>":(I)V
     130: astore        6
     132: aload_2
     133: invokeinterface #37,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     138: astore        7
     140: aload         7
     142: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     147: ifeq          179
     150: aload         7
     152: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     157: checkcast     #40                 // class com/vladsch/flexmark/parser/block/CustomBlockParserFactory
     160: astore        8
     162: aload         6
     164: aload         8
     166: aload_1
     167: invokeinterface #41,  2           // InterfaceMethod com/vladsch/flexmark/parser/block/CustomBlockParserFactory.create:(Lcom/vladsch/flexmark/util/options/DataHolder;)Lcom/vladsch/flexmark/parser/block/BlockParserFactory;
     172: invokevirtual #42                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
     175: pop
     176: goto          140
     179: aload_0
     180: aload         6
     182: putfield      #43                 // Field blockParserFactories:Ljava/util/List;
     185: aload_0
     186: aload_3
     187: putfield      #44                 // Field paragraphPreProcessorDependencies:Lcom/vladsch/flexmark/internal/DocumentParser$ParagraphPreProcessorDependencies;
     190: aload_0
     191: aload         4
     193: putfield      #45                 // Field blockPreProcessorDependencies:Lcom/vladsch/flexmark/internal/DocumentParser$BlockPreProcessorDependencies;
     196: aload_0
     197: aload         5
     199: putfield      #46                 // Field inlineParser:Lcom/vladsch/flexmark/parser/InlineParser;
     202: aload_0
     203: new           #47                 // class com/vladsch/flexmark/internal/DocumentBlockParser
     206: dup
     207: invokespecial #48                 // Method com/vladsch/flexmark/internal/DocumentBlockParser."<init>":()V
     210: putfield      #49                 // Field documentBlockParser:Lcom/vladsch/flexmark/internal/DocumentBlockParser;
     213: aload_0
     214: aload_0
     215: getfield      #49                 // Field documentBlockParser:Lcom/vladsch/flexmark/internal/DocumentBlockParser;
     218: invokespecial #50                 // Method activateBlockParser:(Lcom/vladsch/flexmark/parser/block/BlockParser;)V
     221: aload_0
     222: getstatic     #51                 // Field com/vladsch/flexmark/parser/block/ParserPhase.STARTING:Lcom/vladsch/flexmark/parser/block/ParserPhase;
     225: putfield      #11                 // Field currentPhase:Lcom/vladsch/flexmark/parser/block/ParserPhase;
     228: aload_0
     229: aload_1
     230: getstatic     #52                 // Field com/vladsch/flexmark/parser/Parser.BLANK_LINES_IN_AST:Lcom/vladsch/flexmark/util/options/DataKey;
     233: invokeinterface #53,  2           // InterfaceMethod com/vladsch/flexmark/util/options/DataHolder.get:(Lcom/vladsch/flexmark/util/options/DataKey;)Ljava/lang/Object;
     238: checkcast     #54                 // class java/lang/Boolean
     241: invokevirtual #55                 // Method java/lang/Boolean.booleanValue:()Z
     244: putfield      #56                 // Field blankLinesInAst:Z
     247: aload_0
     248: aload_1
     249: getstatic     #57                 // Field com/vladsch/flexmark/parser/Parser.TRACK_DOCUMENT_LINES:Lcom/vladsch/flexmark/util/options/DataKey;
     252: invokeinterface #53,  2           // InterfaceMethod com/vladsch/flexmark/util/options/DataHolder.get:(Lcom/vladsch/flexmark/util/options/DataKey;)Ljava/lang/Object;
     257: checkcast     #54                 // class java/lang/Boolean
     260: invokevirtual #55                 // Method java/lang/Boolean.booleanValue:()Z
     263: putfield      #58                 // Field trackDocumentLines:Z
     266: return

  public com.vladsch.flexmark.ast.util.Parsing getParsing();
    Code:
       0: aload_0
       1: getfield      #34                 // Field myParsing:Lcom/vladsch/flexmark/ast/util/Parsing;
       4: areturn

  public com.vladsch.flexmark.util.options.MutableDataHolder getProperties();
    Code:
       0: aload_0
       1: getfield      #49                 // Field documentBlockParser:Lcom/vladsch/flexmark/internal/DocumentBlockParser;
       4: invokevirtual #59                 // Method com/vladsch/flexmark/internal/DocumentBlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Document;
       7: areturn

  public static java.util.List<com.vladsch.flexmark.parser.block.CustomBlockParserFactory> calculateBlockParserFactories(com.vladsch.flexmark.util.options.DataHolder, java.util.List<com.vladsch.flexmark.parser.block.CustomBlockParserFactory>);
    Code:
       0: new           #22                 // class java/util/ArrayList
       3: dup
       4: invokespecial #23                 // Method java/util/ArrayList."<init>":()V
       7: astore_2
       8: aload_2
       9: aload_1
      10: invokeinterface #60,  2           // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
      15: pop
      16: getstatic     #61                 // Field CORE_FACTORIES_DATA_KEYS:Ljava/util/HashMap;
      19: invokevirtual #62                 // Method java/util/HashMap.entrySet:()Ljava/util/Set;
      22: invokeinterface #63,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      27: astore_3
      28: aload_3
      29: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      34: ifeq          90
      37: aload_3
      38: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      43: checkcast     #64                 // class java/util/Map$Entry
      46: astore        4
      48: aload_0
      49: aload         4
      51: invokeinterface #65,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      56: checkcast     #66                 // class com/vladsch/flexmark/util/options/DataKey
      59: invokeinterface #53,  2           // InterfaceMethod com/vladsch/flexmark/util/options/DataHolder.get:(Lcom/vladsch/flexmark/util/options/DataKey;)Ljava/lang/Object;
      64: checkcast     #54                 // class java/lang/Boolean
      67: invokevirtual #55                 // Method java/lang/Boolean.booleanValue:()Z
      70: ifeq          87
      73: aload_2
      74: aload         4
      76: invokeinterface #67,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      81: invokeinterface #68,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      86: pop
      87: goto          28
      90: new           #69                 // class com/vladsch/flexmark/internal/DocumentParser$CustomBlockParserDependencyHandler
      93: dup
      94: aconst_null
      95: invokespecial #70                 // Method com/vladsch/flexmark/internal/DocumentParser$CustomBlockParserDependencyHandler."<init>":(Lcom/vladsch/flexmark/internal/DocumentParser$1;)V
      98: astore_3
      99: aload_3
     100: aload_2
     101: invokevirtual #71                 // Method com/vladsch/flexmark/internal/DocumentParser$CustomBlockParserDependencyHandler.resolveDependencies:(Ljava/util/List;)Lcom/vladsch/flexmark/util/dependency/ResolvedDependencies;
     104: checkcast     #72                 // class com/vladsch/flexmark/internal/DocumentParser$CustomBlockParserDependencies
     107: astore        4
     109: new           #22                 // class java/util/ArrayList
     112: dup
     113: invokespecial #23                 // Method java/util/ArrayList."<init>":()V
     116: astore        5
     118: aload         4
     120: invokevirtual #73                 // Method com/vladsch/flexmark/internal/DocumentParser$CustomBlockParserDependencies.getDependentStages:()Ljava/util/List;
     123: invokeinterface #37,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     128: astore        6
     130: aload         6
     132: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     137: ifeq          166
     140: aload         6
     142: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     147: checkcast     #74                 // class com/vladsch/flexmark/internal/DocumentParser$CustomBlockParserDependencyStage
     150: astore        7
     152: aload         5
     154: aload         7
     156: invokestatic  #75                 // Method com/vladsch/flexmark/internal/DocumentParser$CustomBlockParserDependencyStage.access$300:(Lcom/vladsch/flexmark/internal/DocumentParser$CustomBlockParserDependencyStage;)Ljava/util/List;
     159: invokevirtual #76                 // Method java/util/ArrayList.addAll:(Ljava/util/Collection;)Z
     162: pop
     163: goto          130
     166: aload         5
     168: areturn

  public static com.vladsch.flexmark.internal.DocumentParser$ParagraphPreProcessorDependencies calculateParagraphPreProcessors(com.vladsch.flexmark.util.options.DataHolder, java.util.List<com.vladsch.flexmark.parser.block.ParagraphPreProcessorFactory>, com.vladsch.flexmark.parser.InlineParserFactory);
    Code:
       0: new           #22                 // class java/util/ArrayList
       3: dup
       4: invokespecial #23                 // Method java/util/ArrayList."<init>":()V
       7: astore_3
       8: aload_3
       9: aload_1
      10: invokeinterface #60,  2           // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
      15: pop
      16: aload_2
      17: getstatic     #77                 // Field INLINE_PARSER_FACTORY:Lcom/vladsch/flexmark/parser/InlineParserFactory;
      20: if_acmpne     98
      23: getstatic     #78                 // Field CORE_PARAGRAPH_PRE_PROCESSORS:Ljava/util/HashMap;
      26: invokevirtual #79                 // Method java/util/HashMap.keySet:()Ljava/util/Set;
      29: invokeinterface #63,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      34: astore        4
      36: aload         4
      38: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      43: ifeq          98
      46: aload         4
      48: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      53: checkcast     #66                 // class com/vladsch/flexmark/util/options/DataKey
      56: astore        5
      58: aload         5
      60: aload_0
      61: invokevirtual #80                 // Method com/vladsch/flexmark/util/options/DataKey.getFrom:(Lcom/vladsch/flexmark/util/options/DataHolder;)Ljava/lang/Object;
      64: checkcast     #54                 // class java/lang/Boolean
      67: invokevirtual #55                 // Method java/lang/Boolean.booleanValue:()Z
      70: ifeq          95
      73: getstatic     #78                 // Field CORE_PARAGRAPH_PRE_PROCESSORS:Ljava/util/HashMap;
      76: aload         5
      78: invokevirtual #81                 // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      81: checkcast     #82                 // class com/vladsch/flexmark/parser/block/ParagraphPreProcessorFactory
      84: astore        6
      86: aload_3
      87: aload         6
      89: invokeinterface #68,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      94: pop
      95: goto          36
      98: new           #83                 // class com/vladsch/flexmark/internal/DocumentParser$ParagraphDependencyHandler
     101: dup
     102: aconst_null
     103: invokespecial #84                 // Method com/vladsch/flexmark/internal/DocumentParser$ParagraphDependencyHandler."<init>":(Lcom/vladsch/flexmark/internal/DocumentParser$1;)V
     106: astore        4
     108: aload         4
     110: aload_3
     111: invokevirtual #85                 // Method com/vladsch/flexmark/internal/DocumentParser$ParagraphDependencyHandler.resolveDependencies:(Ljava/util/List;)Lcom/vladsch/flexmark/util/dependency/ResolvedDependencies;
     114: checkcast     #86                 // class com/vladsch/flexmark/internal/DocumentParser$ParagraphPreProcessorDependencies
     117: areturn

  public static com.vladsch.flexmark.internal.DocumentParser$BlockPreProcessorDependencies calculateBlockPreProcessors(com.vladsch.flexmark.util.options.DataHolder, java.util.List<com.vladsch.flexmark.parser.block.BlockPreProcessorFactory>, com.vladsch.flexmark.parser.InlineParserFactory);
    Code:
       0: new           #22                 // class java/util/ArrayList
       3: dup
       4: invokespecial #23                 // Method java/util/ArrayList."<init>":()V
       7: astore_3
       8: aload_3
       9: aload_1
      10: invokeinterface #60,  2           // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
      15: pop
      16: getstatic     #87                 // Field CORE_BLOCK_PRE_PROCESSORS:Ljava/util/HashMap;
      19: invokevirtual #79                 // Method java/util/HashMap.keySet:()Ljava/util/Set;
      22: invokeinterface #63,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      27: astore        4
      29: aload         4
      31: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      36: ifeq          91
      39: aload         4
      41: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      46: checkcast     #66                 // class com/vladsch/flexmark/util/options/DataKey
      49: astore        5
      51: aload         5
      53: aload_0
      54: invokevirtual #80                 // Method com/vladsch/flexmark/util/options/DataKey.getFrom:(Lcom/vladsch/flexmark/util/options/DataHolder;)Ljava/lang/Object;
      57: checkcast     #54                 // class java/lang/Boolean
      60: invokevirtual #55                 // Method java/lang/Boolean.booleanValue:()Z
      63: ifeq          88
      66: getstatic     #87                 // Field CORE_BLOCK_PRE_PROCESSORS:Ljava/util/HashMap;
      69: aload         5
      71: invokevirtual #81                 // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      74: checkcast     #88                 // class com/vladsch/flexmark/parser/block/BlockPreProcessorFactory
      77: astore        6
      79: aload_3
      80: aload         6
      82: invokeinterface #68,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      87: pop
      88: goto          29
      91: new           #89                 // class com/vladsch/flexmark/internal/DocumentParser$BlockDependencyHandler
      94: dup
      95: aconst_null
      96: invokespecial #90                 // Method com/vladsch/flexmark/internal/DocumentParser$BlockDependencyHandler."<init>":(Lcom/vladsch/flexmark/internal/DocumentParser$1;)V
      99: astore        4
     101: aload         4
     103: aload_3
     104: invokevirtual #91                 // Method com/vladsch/flexmark/internal/DocumentParser$BlockDependencyHandler.resolveDependencies:(Ljava/util/List;)Lcom/vladsch/flexmark/util/dependency/ResolvedDependencies;
     107: checkcast     #92                 // class com/vladsch/flexmark/internal/DocumentParser$BlockPreProcessorDependencies
     110: areturn

  public com.vladsch.flexmark.parser.InlineParser getInlineParser();
    Code:
       0: aload_0
       1: getfield      #46                 // Field inlineParser:Lcom/vladsch/flexmark/parser/InlineParser;
       4: areturn

  public com.vladsch.flexmark.ast.Document parse(java.lang.CharSequence);
    Code:
       0: aload_1
       1: instanceof    #93                 // class com/vladsch/flexmark/util/sequence/BasedSequence
       4: ifeq          14
       7: aload_1
       8: checkcast     #93                 // class com/vladsch/flexmark/util/sequence/BasedSequence
      11: goto          18
      14: aload_1
      15: invokestatic  #94                 // Method com/vladsch/flexmark/util/sequence/SubSequence.of:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      18: astore_2
      19: iconst_0
      20: istore_3
      21: aload_0
      22: iconst_0
      23: putfield      #13                 // Field lineNumber:I
      26: aload_0
      27: getfield      #49                 // Field documentBlockParser:Lcom/vladsch/flexmark/internal/DocumentBlockParser;
      30: aload_0
      31: getfield      #31                 // Field options:Lcom/vladsch/flexmark/util/options/DataHolder;
      34: aload_2
      35: invokevirtual #95                 // Method com/vladsch/flexmark/internal/DocumentBlockParser.initializeDocument:(Lcom/vladsch/flexmark/util/options/DataHolder;Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
      38: aload_0
      39: getfield      #46                 // Field inlineParser:Lcom/vladsch/flexmark/parser/InlineParser;
      42: aload_0
      43: getfield      #34                 // Field myParsing:Lcom/vladsch/flexmark/ast/util/Parsing;
      46: aload_0
      47: getfield      #49                 // Field documentBlockParser:Lcom/vladsch/flexmark/internal/DocumentBlockParser;
      50: invokevirtual #59                 // Method com/vladsch/flexmark/internal/DocumentBlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Document;
      53: invokeinterface #96,  3           // InterfaceMethod com/vladsch/flexmark/parser/InlineParser.initializeDocument:(Lcom/vladsch/flexmark/ast/util/Parsing;Lcom/vladsch/flexmark/ast/Document;)V
      58: aload_0
      59: getstatic     #97                 // Field com/vladsch/flexmark/parser/block/ParserPhase.PARSE_BLOCKS:Lcom/vladsch/flexmark/parser/block/ParserPhase;
      62: putfield      #11                 // Field currentPhase:Lcom/vladsch/flexmark/parser/block/ParserPhase;
      65: aload_2
      66: iload_3
      67: invokestatic  #98                 // Method com/vladsch/flexmark/ast/util/Parsing.findLineBreak:(Ljava/lang/CharSequence;I)I
      70: dup
      71: istore        4
      73: iconst_m1
      74: if_icmpeq     200
      77: aload_2
      78: iload_3
      79: iload         4
      81: invokeinterface #99,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      86: astore        7
      88: iload         4
      90: istore        5
      92: iload         4
      94: iconst_1
      95: iadd
      96: aload_2
      97: invokeinterface #100,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
     102: if_icmpge     142
     105: aload_2
     106: iload         4
     108: invokeinterface #101,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.charAt:(I)C
     113: bipush        13
     115: if_icmpne     142
     118: aload_2
     119: iload         4
     121: iconst_1
     122: iadd
     123: invokeinterface #101,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.charAt:(I)C
     128: bipush        10
     130: if_icmpne     142
     133: iload         4
     135: iconst_2
     136: iadd
     137: istore        6
     139: goto          148
     142: iload         4
     144: iconst_1
     145: iadd
     146: istore        6
     148: aload_0
     149: aload_2
     150: iload_3
     151: iload         6
     153: invokeinterface #99,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     158: putfield      #102                // Field lineWithEOL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     161: aload_0
     162: iload_3
     163: putfield      #14                 // Field lineStart:I
     166: aload_0
     167: iload         5
     169: putfield      #15                 // Field lineEOLIndex:I
     172: aload_0
     173: iload         6
     175: putfield      #16                 // Field lineEndIndex:I
     178: aload_0
     179: aload         7
     181: invokespecial #103                // Method incorporateLine:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     184: aload_0
     185: dup
     186: getfield      #13                 // Field lineNumber:I
     189: iconst_1
     190: iadd
     191: putfield      #13                 // Field lineNumber:I
     194: iload         6
     196: istore_3
     197: goto          65
     200: aload_2
     201: invokeinterface #100,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
     206: ifle          281
     209: iload_3
     210: ifeq          223
     213: iload_3
     214: aload_2
     215: invokeinterface #100,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
     220: if_icmpge     281
     223: aload_0
     224: aload_2
     225: iload_3
     226: aload_2
     227: invokeinterface #100,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
     232: invokeinterface #99,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     237: putfield      #102                // Field lineWithEOL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     240: aload_0
     241: iload_3
     242: putfield      #14                 // Field lineStart:I
     245: aload_0
     246: aload_2
     247: invokeinterface #100,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
     252: putfield      #15                 // Field lineEOLIndex:I
     255: aload_0
     256: aload_0
     257: getfield      #15                 // Field lineEOLIndex:I
     260: putfield      #16                 // Field lineEndIndex:I
     263: aload_0
     264: aload_0
     265: getfield      #102                // Field lineWithEOL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     268: invokespecial #103                // Method incorporateLine:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     271: aload_0
     272: dup
     273: getfield      #13                 // Field lineNumber:I
     276: iconst_1
     277: iadd
     278: putfield      #13                 // Field lineNumber:I
     281: aload_0
     282: invokespecial #104                // Method finalizeAndProcess:()Lcom/vladsch/flexmark/ast/Document;
     285: areturn

  public com.vladsch.flexmark.ast.Document parse(java.io.Reader) throws java.io.IOException;
    Code:
       0: aload_1
       1: instanceof    #105                // class java/io/BufferedReader
       4: ifeq          15
       7: aload_1
       8: checkcast     #105                // class java/io/BufferedReader
      11: astore_2
      12: goto          24
      15: new           #105                // class java/io/BufferedReader
      18: dup
      19: aload_1
      20: invokespecial #106                // Method java/io/BufferedReader."<init>":(Ljava/io/Reader;)V
      23: astore_2
      24: new           #107                // class java/lang/StringBuilder
      27: dup
      28: invokespecial #108                // Method java/lang/StringBuilder."<init>":()V
      31: astore_3
      32: sipush        16384
      35: newarray       char
      37: astore        4
      39: aload_2
      40: aload         4
      42: invokevirtual #109                // Method java/io/BufferedReader.read:([C)I
      45: istore        5
      47: iload         5
      49: ifge          55
      52: goto          79
      55: aload_3
      56: aload         4
      58: iconst_0
      59: iload         5
      61: invokevirtual #110                // Method java/lang/StringBuilder.append:([CII)Ljava/lang/StringBuilder;
      64: pop
      65: iload         5
      67: aload         4
      69: arraylength
      70: if_icmpge     76
      73: goto          79
      76: goto          39
      79: aload_3
      80: invokevirtual #111                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      83: invokestatic  #112                // Method com/vladsch/flexmark/util/sequence/CharSubSequence.of:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/sequence/CharSubSequence;
      86: astore        5
      88: aload_0
      89: aload         5
      91: invokevirtual #113                // Method parse:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/ast/Document;
      94: areturn

  public int getLineNumber();
    Code:
       0: aload_0
       1: getfield      #13                 // Field lineNumber:I
       4: ireturn

  public int getLineStart();
    Code:
       0: aload_0
       1: getfield      #14                 // Field lineStart:I
       4: ireturn

  public int getLineEndIndex();
    Code:
       0: aload_0
       1: getfield      #16                 // Field lineEndIndex:I
       4: ireturn

  public com.vladsch.flexmark.util.sequence.BasedSequence getLine();
    Code:
       0: aload_0
       1: getfield      #114                // Field line:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence getLineWithEOL();
    Code:
       0: aload_0
       1: getfield      #102                // Field lineWithEOL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: areturn

  public int getLineEolLength();
    Code:
       0: aload_0
       1: getfield      #16                 // Field lineEndIndex:I
       4: aload_0
       5: getfield      #15                 // Field lineEOLIndex:I
       8: isub
       9: ireturn

  public int getIndex();
    Code:
       0: aload_0
       1: getfield      #17                 // Field index:I
       4: ireturn

  public int getNextNonSpaceIndex();
    Code:
       0: aload_0
       1: getfield      #19                 // Field nextNonSpace:I
       4: ireturn

  public int getColumn();
    Code:
       0: aload_0
       1: getfield      #18                 // Field column:I
       4: ireturn

  public int getIndent();
    Code:
       0: aload_0
       1: getfield      #21                 // Field indent:I
       4: ireturn

  public boolean isBlank();
    Code:
       0: aload_0
       1: getfield      #115                // Field blank:Z
       4: ireturn

  public com.vladsch.flexmark.parser.block.BlockParser getActiveBlockParser();
    Code:
       0: aload_0
       1: getfield      #24                 // Field activeBlockParsers:Ljava/util/List;
       4: aload_0
       5: getfield      #24                 // Field activeBlockParsers:Ljava/util/List;
       8: invokeinterface #35,  1           // InterfaceMethod java/util/List.size:()I
      13: iconst_1
      14: isub
      15: invokeinterface #116,  2          // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      20: checkcast     #117                // class com/vladsch/flexmark/parser/block/BlockParser
      23: areturn

  public com.vladsch.flexmark.parser.block.BlockParser getActiveBlockParser(com.vladsch.flexmark.ast.Block);
    Code:
       0: aload_0
       1: getfield      #2                  // Field blockTracker:Lcom/vladsch/flexmark/ast/util/ClassifyingBlockTracker;
       4: aload_1
       5: invokevirtual #118                // Method com/vladsch/flexmark/ast/util/ClassifyingBlockTracker.getKey:(Lcom/vladsch/flexmark/ast/Block;)Lcom/vladsch/flexmark/parser/block/BlockParser;
       8: astore_2
       9: aload_2
      10: ifnull        22
      13: aload_2
      14: invokeinterface #119,  1          // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.isClosed:()Z
      19: ifeq          26
      22: aconst_null
      23: goto          27
      26: aload_2
      27: areturn

  public java.util.List<com.vladsch.flexmark.parser.block.BlockParser> getActiveBlockParsers();
    Code:
       0: aload_0
       1: getfield      #24                 // Field activeBlockParsers:Ljava/util/List;
       4: areturn

  private void incorporateLine(com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #114                // Field line:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       5: aload_0
       6: iconst_0
       7: putfield      #17                 // Field index:I
      10: aload_0
      11: iconst_0
      12: putfield      #18                 // Field column:I
      15: aload_0
      16: iconst_0
      17: putfield      #120                // Field columnIsInTab:Z
      20: aload_0
      21: getfield      #58                 // Field trackDocumentLines:Z
      24: ifeq          41
      27: aload_0
      28: getfield      #1                  // Field lineSegments:Ljava/util/List;
      31: aload_0
      32: getfield      #102                // Field lineWithEOL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      35: invokeinterface #68,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      40: pop
      41: iconst_1
      42: istore_2
      43: aconst_null
      44: astore_3
      45: aload_0
      46: getfield      #56                 // Field blankLinesInAst:Z
      49: ifeq          86
      52: aload_0
      53: invokespecial #121                // Method findNextNonSpace:()V
      56: aload_0
      57: getfield      #115                // Field blank:Z
      60: ifeq          86
      63: new           #122                // class com/vladsch/flexmark/ast/BlankLine
      66: dup
      67: aload_0
      68: getfield      #102                // Field lineWithEOL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      71: invokespecial #123                // Method com/vladsch/flexmark/ast/BlankLine."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
      74: astore_3
      75: aload_0
      76: getfield      #49                 // Field documentBlockParser:Lcom/vladsch/flexmark/internal/DocumentBlockParser;
      79: invokevirtual #59                 // Method com/vladsch/flexmark/internal/DocumentBlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Document;
      82: aload_3
      83: invokevirtual #124                // Method com/vladsch/flexmark/ast/Document.appendChild:(Lcom/vladsch/flexmark/ast/Node;)V
      86: aload_0
      87: getfield      #24                 // Field activeBlockParsers:Ljava/util/List;
      90: iconst_1
      91: aload_0
      92: getfield      #24                 // Field activeBlockParsers:Ljava/util/List;
      95: invokeinterface #35,  1           // InterfaceMethod java/util/List.size:()I
     100: invokeinterface #125,  3          // InterfaceMethod java/util/List.subList:(II)Ljava/util/List;
     105: invokeinterface #37,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     110: astore        4
     112: aload         4
     114: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     119: ifeq          296
     122: aload         4
     124: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     129: checkcast     #117                // class com/vladsch/flexmark/parser/block/BlockParser
     132: astore        5
     134: aload_0
     135: invokespecial #121                // Method findNextNonSpace:()V
     138: aload_0
     139: getfield      #56                 // Field blankLinesInAst:Z
     142: ifeq          179
     145: aload_0
     146: getfield      #115                // Field blank:Z
     149: ifeq          179
     152: aload_3
     153: ifnonnull     179
     156: new           #122                // class com/vladsch/flexmark/ast/BlankLine
     159: dup
     160: aload_0
     161: getfield      #102                // Field lineWithEOL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     164: invokespecial #123                // Method com/vladsch/flexmark/ast/BlankLine."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     167: astore_3
     168: aload_0
     169: getfield      #49                 // Field documentBlockParser:Lcom/vladsch/flexmark/internal/DocumentBlockParser;
     172: invokevirtual #59                 // Method com/vladsch/flexmark/internal/DocumentBlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Document;
     175: aload_3
     176: invokevirtual #124                // Method com/vladsch/flexmark/ast/Document.appendChild:(Lcom/vladsch/flexmark/ast/Node;)V
     179: aload         5
     181: aload_0
     182: invokeinterface #126,  2          // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.tryContinue:(Lcom/vladsch/flexmark/parser/block/ParserState;)Lcom/vladsch/flexmark/parser/block/BlockContinue;
     187: astore        6
     189: aload         6
     191: instanceof    #127                // class com/vladsch/flexmark/internal/BlockContinueImpl
     194: ifeq          296
     197: aload         6
     199: checkcast     #127                // class com/vladsch/flexmark/internal/BlockContinueImpl
     202: astore        7
     204: aload         7
     206: invokevirtual #128                // Method com/vladsch/flexmark/internal/BlockContinueImpl.isFinalize:()Z
     209: ifeq          219
     212: aload_0
     213: aload         5
     215: invokespecial #129                // Method finalize:(Lcom/vladsch/flexmark/parser/block/BlockParser;)V
     218: return
     219: aload         7
     221: invokevirtual #130                // Method com/vladsch/flexmark/internal/BlockContinueImpl.getNewIndex:()I
     224: iconst_m1
     225: if_icmpeq     240
     228: aload_0
     229: aload         7
     231: invokevirtual #130                // Method com/vladsch/flexmark/internal/BlockContinueImpl.getNewIndex:()I
     234: invokespecial #131                // Method setNewIndex:(I)V
     237: goto          258
     240: aload         7
     242: invokevirtual #132                // Method com/vladsch/flexmark/internal/BlockContinueImpl.getNewColumn:()I
     245: iconst_m1
     246: if_icmpeq     258
     249: aload_0
     250: aload         7
     252: invokevirtual #132                // Method com/vladsch/flexmark/internal/BlockContinueImpl.getNewColumn:()I
     255: invokespecial #133                // Method setNewColumn:(I)V
     258: iinc          2, 1
     261: aload_3
     262: ifnull        293
     265: aload         5
     267: invokeinterface #134,  1          // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
     272: instanceof    #135                // class com/vladsch/flexmark/ast/BlankLineContainer
     275: ifeq          293
     278: aload_3
     279: invokevirtual #136                // Method com/vladsch/flexmark/ast/Block.unlink:()V
     282: aload         5
     284: invokeinterface #134,  1          // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
     289: aload_3
     290: invokevirtual #137                // Method com/vladsch/flexmark/ast/Block.appendChild:(Lcom/vladsch/flexmark/ast/Node;)V
     293: goto          112
     296: new           #22                 // class java/util/ArrayList
     299: dup
     300: aload_0
     301: getfield      #24                 // Field activeBlockParsers:Ljava/util/List;
     304: iload_2
     305: aload_0
     306: getfield      #24                 // Field activeBlockParsers:Ljava/util/List;
     309: invokeinterface #35,  1           // InterfaceMethod java/util/List.size:()I
     314: invokeinterface #125,  3          // InterfaceMethod java/util/List.subList:(II)Ljava/util/List;
     319: invokespecial #138                // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
     322: astore        4
     324: aload_0
     325: getfield      #24                 // Field activeBlockParsers:Ljava/util/List;
     328: iload_2
     329: iconst_1
     330: isub
     331: invokeinterface #116,  2          // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
     336: checkcast     #117                // class com/vladsch/flexmark/parser/block/BlockParser
     339: astore        5
     341: aload         5
     343: astore        6
     345: aload         4
     347: invokeinterface #139,  1          // InterfaceMethod java/util/List.isEmpty:()Z
     352: istore        7
     354: aload_0
     355: invokevirtual #140                // Method isBlank:()Z
     358: ifeq          401
     361: aload_0
     362: aload         6
     364: invokeinterface #134,  1          // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
     369: invokevirtual #141                // Method isLastLineBlank:(Lcom/vladsch/flexmark/ast/Node;)Z
     372: ifeq          401
     375: new           #22                 // class java/util/ArrayList
     378: dup
     379: aload_0
     380: getfield      #24                 // Field activeBlockParsers:Ljava/util/List;
     383: iconst_0
     384: iload_2
     385: invokeinterface #125,  3          // InterfaceMethod java/util/List.subList:(II)Ljava/util/List;
     390: invokespecial #138                // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
     393: astore        8
     395: aload_0
     396: aload         8
     398: invokespecial #142                // Method breakOutOfLists:(Ljava/util/List;)V
     401: aload         6
     403: invokeinterface #143,  1          // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.isInterruptible:()Z
     408: ifne          421
     411: aload         6
     413: invokeinterface #144,  1          // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.isContainer:()Z
     418: ifeq          425
     421: iconst_1
     422: goto          426
     425: iconst_0
     426: istore        8
     428: iload         8
     430: ifeq          648
     433: aload_0
     434: invokespecial #121                // Method findNextNonSpace:()V
     437: aload_0
     438: invokevirtual #140                // Method isBlank:()Z
     441: ifne          472
     444: aload_0
     445: getfield      #21                 // Field indent:I
     448: aload_0
     449: getfield      #34                 // Field myParsing:Lcom/vladsch/flexmark/ast/util/Parsing;
     452: getfield      #145                // Field com/vladsch/flexmark/ast/util/Parsing.CODE_BLOCK_INDENT:I
     455: if_icmpge     483
     458: aload_0
     459: getfield      #114                // Field line:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     462: aload_0
     463: getfield      #19                 // Field nextNonSpace:I
     466: invokestatic  #146                // Method com/vladsch/flexmark/ast/util/Parsing.isLetter:(Ljava/lang/CharSequence;I)Z
     469: ifeq          483
     472: aload_0
     473: aload_0
     474: getfield      #19                 // Field nextNonSpace:I
     477: invokespecial #131                // Method setNewIndex:(I)V
     480: goto          648
     483: aload_0
     484: aload         6
     486: invokespecial #147                // Method findBlockStart:(Lcom/vladsch/flexmark/parser/block/BlockParser;)Lcom/vladsch/flexmark/internal/BlockStartImpl;
     489: astore        9
     491: aload         9
     493: ifnonnull     527
     496: aload         6
     498: invokeinterface #148,  1          // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.isRawText:()Z
     503: ifeq          516
     506: aload         6
     508: invokeinterface #143,  1          // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.isInterruptible:()Z
     513: ifne          648
     516: aload_0
     517: aload_0
     518: getfield      #19                 // Field nextNonSpace:I
     521: invokespecial #131                // Method setNewIndex:(I)V
     524: goto          648
     527: iload         7
     529: ifne          542
     532: aload_0
     533: aload         4
     535: invokespecial #149                // Method finalizeBlocks:(Ljava/util/List;)Z
     538: pop
     539: iconst_1
     540: istore        7
     542: aload         9
     544: invokevirtual #150                // Method com/vladsch/flexmark/internal/BlockStartImpl.getNewIndex:()I
     547: iconst_m1
     548: if_icmpeq     563
     551: aload_0
     552: aload         9
     554: invokevirtual #150                // Method com/vladsch/flexmark/internal/BlockStartImpl.getNewIndex:()I
     557: invokespecial #131                // Method setNewIndex:(I)V
     560: goto          581
     563: aload         9
     565: invokevirtual #151                // Method com/vladsch/flexmark/internal/BlockStartImpl.getNewColumn:()I
     568: iconst_m1
     569: if_icmpeq     581
     572: aload_0
     573: aload         9
     575: invokevirtual #151                // Method com/vladsch/flexmark/internal/BlockStartImpl.getNewColumn:()I
     578: invokespecial #133                // Method setNewColumn:(I)V
     581: aload         9
     583: invokevirtual #152                // Method com/vladsch/flexmark/internal/BlockStartImpl.isReplaceActiveBlockParser:()Z
     586: ifeq          593
     589: aload_0
     590: invokespecial #153                // Method removeActiveBlockParser:()V
     593: aload         9
     595: invokevirtual #154                // Method com/vladsch/flexmark/internal/BlockStartImpl.getBlockParsers:()[Lcom/vladsch/flexmark/parser/block/BlockParser;
     598: astore        10
     600: aload         10
     602: arraylength
     603: istore        11
     605: iconst_0
     606: istore        12
     608: iload         12
     610: iload         11
     612: if_icmpge     645
     615: aload         10
     617: iload         12
     619: aaload
     620: astore        13
     622: aload_0
     623: aload         13
     625: invokespecial #155                // Method addChild:(Lcom/vladsch/flexmark/parser/block/BlockParser;)Lcom/vladsch/flexmark/parser/block/BlockParser;
     628: astore        6
     630: aload         13
     632: invokeinterface #144,  1          // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.isContainer:()Z
     637: istore        8
     639: iinc          12, 1
     642: goto          608
     645: goto          428
     648: iload         7
     650: ifne          679
     653: aload_0
     654: invokevirtual #140                // Method isBlank:()Z
     657: ifne          679
     660: aload_0
     661: invokevirtual #156                // Method getActiveBlockParser:()Lcom/vladsch/flexmark/parser/block/BlockParser;
     664: invokeinterface #157,  1          // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.isParagraphParser:()Z
     669: ifeq          679
     672: aload_0
     673: invokespecial #158                // Method addLine:()V
     676: goto          739
     679: iload         7
     681: ifne          691
     684: aload_0
     685: aload         4
     687: invokespecial #149                // Method finalizeBlocks:(Ljava/util/List;)Z
     690: pop
     691: aload_0
     692: aload         6
     694: aload         5
     696: invokespecial #159                // Method propagateLastLineBlank:(Lcom/vladsch/flexmark/parser/block/BlockParser;Lcom/vladsch/flexmark/parser/block/BlockParser;)V
     699: aload         6
     701: invokeinterface #144,  1          // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.isContainer:()Z
     706: ifne          716
     709: aload_0
     710: invokespecial #158                // Method addLine:()V
     713: goto          739
     716: aload_0
     717: invokevirtual #140                // Method isBlank:()Z
     720: ifne          739
     723: aload_0
     724: new           #160                // class com/vladsch/flexmark/internal/ParagraphParser
     727: dup
     728: invokespecial #161                // Method com/vladsch/flexmark/internal/ParagraphParser."<init>":()V
     731: invokespecial #155                // Method addChild:(Lcom/vladsch/flexmark/parser/block/BlockParser;)Lcom/vladsch/flexmark/parser/block/BlockParser;
     734: pop
     735: aload_0
     736: invokespecial #158                // Method addLine:()V
     739: return

  private void findNextNonSpace();
    Code:
       0: aload_0
       1: getfield      #17                 // Field index:I
       4: istore_1
       5: aload_0
       6: getfield      #18                 // Field column:I
       9: istore_2
      10: aload_0
      11: iconst_1
      12: putfield      #115                // Field blank:Z
      15: iload_1
      16: aload_0
      17: getfield      #114                // Field line:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      20: invokeinterface #100,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      25: if_icmpge     99
      28: aload_0
      29: getfield      #114                // Field line:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      32: iload_1
      33: invokeinterface #101,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.charAt:(I)C
      38: istore_3
      39: iload_3
      40: lookupswitch  { // 2
                     9: 77
                    32: 68
               default: 91
          }
      68: iinc          1, 1
      71: iinc          2, 1
      74: goto          15
      77: iinc          1, 1
      80: iload_2
      81: iconst_4
      82: iload_2
      83: iconst_4
      84: irem
      85: isub
      86: iadd
      87: istore_2
      88: goto          15
      91: aload_0
      92: iconst_0
      93: putfield      #115                // Field blank:Z
      96: goto          99
      99: aload_0
     100: iload_1
     101: putfield      #19                 // Field nextNonSpace:I
     104: aload_0
     105: iload_2
     106: putfield      #20                 // Field nextNonSpaceColumn:I
     109: aload_0
     110: aload_0
     111: getfield      #20                 // Field nextNonSpaceColumn:I
     114: aload_0
     115: getfield      #18                 // Field column:I
     118: isub
     119: putfield      #21                 // Field indent:I
     122: return

  private void setNewIndex(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #19                 // Field nextNonSpace:I
       5: if_icmplt     24
       8: aload_0
       9: aload_0
      10: getfield      #19                 // Field nextNonSpace:I
      13: putfield      #17                 // Field index:I
      16: aload_0
      17: aload_0
      18: getfield      #20                 // Field nextNonSpaceColumn:I
      21: putfield      #18                 // Field column:I
      24: aload_0
      25: getfield      #17                 // Field index:I
      28: iload_1
      29: if_icmpge     55
      32: aload_0
      33: getfield      #17                 // Field index:I
      36: aload_0
      37: getfield      #114                // Field line:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      40: invokeinterface #100,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      45: if_icmpeq     55
      48: aload_0
      49: invokespecial #162                // Method advance:()V
      52: goto          24
      55: aload_0
      56: iconst_0
      57: putfield      #120                // Field columnIsInTab:Z
      60: return

  private void setNewColumn(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #20                 // Field nextNonSpaceColumn:I
       5: if_icmplt     24
       8: aload_0
       9: aload_0
      10: getfield      #19                 // Field nextNonSpace:I
      13: putfield      #17                 // Field index:I
      16: aload_0
      17: aload_0
      18: getfield      #20                 // Field nextNonSpaceColumn:I
      21: putfield      #18                 // Field column:I
      24: aload_0
      25: getfield      #18                 // Field column:I
      28: iload_1
      29: if_icmpge     55
      32: aload_0
      33: getfield      #17                 // Field index:I
      36: aload_0
      37: getfield      #114                // Field line:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      40: invokeinterface #100,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      45: if_icmpeq     55
      48: aload_0
      49: invokespecial #162                // Method advance:()V
      52: goto          24
      55: aload_0
      56: getfield      #18                 // Field column:I
      59: iload_1
      60: if_icmple     86
      63: aload_0
      64: dup
      65: getfield      #17                 // Field index:I
      68: iconst_1
      69: isub
      70: putfield      #17                 // Field index:I
      73: aload_0
      74: iload_1
      75: putfield      #18                 // Field column:I
      78: aload_0
      79: iconst_1
      80: putfield      #120                // Field columnIsInTab:Z
      83: goto          91
      86: aload_0
      87: iconst_0
      88: putfield      #120                // Field columnIsInTab:Z
      91: return

  private void advance();
    Code:
       0: aload_0
       1: getfield      #114                // Field line:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: aload_0
       5: getfield      #17                 // Field index:I
       8: invokeinterface #101,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.charAt:(I)C
      13: istore_1
      14: iload_1
      15: bipush        9
      17: if_icmpne     49
      20: aload_0
      21: dup
      22: getfield      #17                 // Field index:I
      25: iconst_1
      26: iadd
      27: putfield      #17                 // Field index:I
      30: aload_0
      31: dup
      32: getfield      #18                 // Field column:I
      35: aload_0
      36: getfield      #18                 // Field column:I
      39: invokestatic  #163                // Method com/vladsch/flexmark/ast/util/Parsing.columnsToNextTabStop:(I)I
      42: iadd
      43: putfield      #18                 // Field column:I
      46: goto          69
      49: aload_0
      50: dup
      51: getfield      #17                 // Field index:I
      54: iconst_1
      55: iadd
      56: putfield      #17                 // Field index:I
      59: aload_0
      60: dup
      61: getfield      #18                 // Field column:I
      64: iconst_1
      65: iadd
      66: putfield      #18                 // Field column:I
      69: return

  private void addLine();
    Code:
       0: aload_0
       1: getfield      #102                // Field lineWithEOL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: aload_0
       5: getfield      #17                 // Field index:I
       8: invokeinterface #164,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(I)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      13: astore_1
      14: aload_0
      15: getfield      #120                // Field columnIsInTab:Z
      18: ifeq          87
      21: aload_1
      22: iconst_1
      23: invokeinterface #164,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(I)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      28: astore_2
      29: aload_0
      30: getfield      #18                 // Field column:I
      33: invokestatic  #163                // Method com/vladsch/flexmark/ast/util/Parsing.columnsToNextTabStop:(I)I
      36: istore_3
      37: new           #107                // class java/lang/StringBuilder
      40: dup
      41: iload_3
      42: aload_2
      43: invokeinterface #100,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      48: iadd
      49: invokespecial #165                // Method java/lang/StringBuilder."<init>":(I)V
      52: astore        4
      54: iconst_0
      55: istore        5
      57: iload         5
      59: iload_3
      60: if_icmpge     77
      63: aload         4
      65: bipush        32
      67: invokevirtual #166                // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      70: pop
      71: iinc          5, 1
      74: goto          57
      77: aload         4
      79: invokevirtual #111                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      82: aload_2
      83: invokestatic  #167                // Method com/vladsch/flexmark/util/sequence/PrefixedSubSequence.of:(Ljava/lang/String;Lcom/vladsch/flexmark/util/sequence/BasedSequence;)Lcom/vladsch/flexmark/util/sequence/PrefixedSubSequence;
      86: astore_1
      87: aload_0
      88: invokevirtual #156                // Method getActiveBlockParser:()Lcom/vladsch/flexmark/parser/block/BlockParser;
      91: aload_0
      92: aload_1
      93: invokeinterface #168,  3          // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.addLine:(Lcom/vladsch/flexmark/parser/block/ParserState;Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
      98: return

  private com.vladsch.flexmark.internal.BlockStartImpl findBlockStart(com.vladsch.flexmark.parser.block.BlockParser);
    Code:
       0: new           #169                // class com/vladsch/flexmark/internal/MatchedBlockParserImpl
       3: dup
       4: aload_1
       5: invokespecial #170                // Method com/vladsch/flexmark/internal/MatchedBlockParserImpl."<init>":(Lcom/vladsch/flexmark/parser/block/BlockParser;)V
       8: astore_2
       9: aload_0
      10: getfield      #43                 // Field blockParserFactories:Ljava/util/List;
      13: invokeinterface #37,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      18: astore_3
      19: aload_3
      20: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      25: ifeq          78
      28: aload_3
      29: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      34: checkcast     #171                // class com/vladsch/flexmark/parser/block/BlockParserFactory
      37: astore        4
      39: aload_1
      40: aload         4
      42: invokeinterface #172,  2          // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.canInterruptBy:(Lcom/vladsch/flexmark/parser/block/BlockParserFactory;)Z
      47: ifeq          75
      50: aload         4
      52: aload_0
      53: aload_2
      54: invokeinterface #173,  3          // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParserFactory.tryStart:(Lcom/vladsch/flexmark/parser/block/ParserState;Lcom/vladsch/flexmark/parser/block/MatchedBlockParser;)Lcom/vladsch/flexmark/parser/block/BlockStart;
      59: astore        5
      61: aload         5
      63: instanceof    #174                // class com/vladsch/flexmark/internal/BlockStartImpl
      66: ifeq          75
      69: aload         5
      71: checkcast     #174                // class com/vladsch/flexmark/internal/BlockStartImpl
      74: areturn
      75: goto          19
      78: aconst_null
      79: areturn

  private void finalize(com.vladsch.flexmark.parser.block.BlockParser);
    Code:
       0: aload_0
       1: invokevirtual #156                // Method getActiveBlockParser:()Lcom/vladsch/flexmark/parser/block/BlockParser;
       4: aload_1
       5: if_acmpne     12
       8: aload_0
       9: invokespecial #175                // Method deactivateBlockParser:()V
      12: aload_1
      13: aload_0
      14: invokeinterface #176,  2          // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.closeBlock:(Lcom/vladsch/flexmark/parser/block/ParserState;)V
      19: aload_1
      20: invokeinterface #177,  1          // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.finalizeClosedBlock:()V
      25: return

  private void processInlines();
    Code:
       0: aload_0
       1: getfield      #2                  // Field blockTracker:Lcom/vladsch/flexmark/ast/util/ClassifyingBlockTracker;
       4: invokevirtual #178                // Method com/vladsch/flexmark/ast/util/ClassifyingBlockTracker.allBlockParsers:()Lcom/vladsch/flexmark/util/collection/OrderedSet;
       7: invokevirtual #179                // Method com/vladsch/flexmark/util/collection/OrderedSet.iterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIndexedIterator;
      10: astore_1
      11: aload_1
      12: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      17: ifeq          43
      20: aload_1
      21: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      26: checkcast     #117                // class com/vladsch/flexmark/parser/block/BlockParser
      29: astore_2
      30: aload_2
      31: aload_0
      32: getfield      #46                 // Field inlineParser:Lcom/vladsch/flexmark/parser/InlineParser;
      35: invokeinterface #180,  2          // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.parseInlines:(Lcom/vladsch/flexmark/parser/InlineParser;)V
      40: goto          11
      43: return

  public boolean endsWithBlankLine(com.vladsch.flexmark.ast.Node);
    Code:
       0: aload_1
       1: ifnull        22
       4: aload_0
       5: aload_1
       6: invokevirtual #141                // Method isLastLineBlank:(Lcom/vladsch/flexmark/ast/Node;)Z
       9: ifeq          14
      12: iconst_1
      13: ireturn
      14: aload_1
      15: invokevirtual #181                // Method com/vladsch/flexmark/ast/Node.getLastBlankLineChild:()Lcom/vladsch/flexmark/ast/Node;
      18: astore_1
      19: goto          0
      22: iconst_0
      23: ireturn

  private void breakOutOfLists(java.util.List<com.vladsch.flexmark.parser.block.BlockParser>);
    Code:
       0: iconst_m1
       1: istore_2
       2: aload_1
       3: invokeinterface #35,  1           // InterfaceMethod java/util/List.size:()I
       8: iconst_1
       9: isub
      10: istore_3
      11: iload_3
      12: iflt          45
      15: aload_1
      16: iload_3
      17: invokeinterface #116,  2          // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      22: checkcast     #117                // class com/vladsch/flexmark/parser/block/BlockParser
      25: astore        4
      27: aload         4
      29: invokeinterface #182,  1          // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.breakOutOnDoubleBlankLine:()Z
      34: ifeq          39
      37: iload_3
      38: istore_2
      39: iinc          3, -1
      42: goto          11
      45: iload_2
      46: iconst_m1
      47: if_icmpeq     68
      50: aload_0
      51: aload_1
      52: iload_2
      53: aload_1
      54: invokeinterface #35,  1           // InterfaceMethod java/util/List.size:()I
      59: invokeinterface #125,  3          // InterfaceMethod java/util/List.subList:(II)Ljava/util/List;
      64: invokespecial #149                // Method finalizeBlocks:(Ljava/util/List;)Z
      67: pop
      68: return

  private <T extends com.vladsch.flexmark.parser.block.BlockParser> T addChild(T);
    Code:
       0: aload_0
       1: invokevirtual #156                // Method getActiveBlockParser:()Lcom/vladsch/flexmark/parser/block/BlockParser;
       4: aload_0
       5: aload_1
       6: aload_1
       7: invokeinterface #134,  1          // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
      12: invokeinterface #183,  4          // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.canContain:(Lcom/vladsch/flexmark/parser/block/ParserState;Lcom/vladsch/flexmark/parser/block/BlockParser;Lcom/vladsch/flexmark/ast/Block;)Z
      17: ifne          31
      20: aload_0
      21: aload_0
      22: invokevirtual #156                // Method getActiveBlockParser:()Lcom/vladsch/flexmark/parser/block/BlockParser;
      25: invokespecial #129                // Method finalize:(Lcom/vladsch/flexmark/parser/block/BlockParser;)V
      28: goto          0
      31: aload_0
      32: invokevirtual #156                // Method getActiveBlockParser:()Lcom/vladsch/flexmark/parser/block/BlockParser;
      35: invokeinterface #134,  1          // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
      40: aload_1
      41: invokeinterface #134,  1          // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
      46: invokevirtual #137                // Method com/vladsch/flexmark/ast/Block.appendChild:(Lcom/vladsch/flexmark/ast/Node;)V
      49: aload_0
      50: aload_1
      51: invokespecial #50                 // Method activateBlockParser:(Lcom/vladsch/flexmark/parser/block/BlockParser;)V
      54: aload_1
      55: areturn

  private void activateBlockParser(com.vladsch.flexmark.parser.block.BlockParser);
    Code:
       0: aload_0
       1: getfield      #24                 // Field activeBlockParsers:Ljava/util/List;
       4: aload_1
       5: invokeinterface #68,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      10: pop
      11: aload_0
      12: getfield      #2                  // Field blockTracker:Lcom/vladsch/flexmark/ast/util/ClassifyingBlockTracker;
      15: aload_1
      16: invokevirtual #184                // Method com/vladsch/flexmark/ast/util/ClassifyingBlockTracker.containsKey:(Lcom/vladsch/flexmark/parser/block/BlockParser;)Z
      19: ifne          27
      22: aload_0
      23: aload_1
      24: invokevirtual #185                // Method blockParserAdded:(Lcom/vladsch/flexmark/parser/block/BlockParser;)V
      27: return

  private void deactivateBlockParser();
    Code:
       0: aload_0
       1: getfield      #24                 // Field activeBlockParsers:Ljava/util/List;
       4: aload_0
       5: getfield      #24                 // Field activeBlockParsers:Ljava/util/List;
       8: invokeinterface #35,  1           // InterfaceMethod java/util/List.size:()I
      13: iconst_1
      14: isub
      15: invokeinterface #186,  2          // InterfaceMethod java/util/List.remove:(I)Ljava/lang/Object;
      20: pop
      21: return

  private void removeActiveBlockParser();
    Code:
       0: aload_0
       1: invokevirtual #156                // Method getActiveBlockParser:()Lcom/vladsch/flexmark/parser/block/BlockParser;
       4: astore_1
       5: aload_0
       6: invokespecial #175                // Method deactivateBlockParser:()V
       9: aload_0
      10: aload_1
      11: invokevirtual #187                // Method blockParserRemoved:(Lcom/vladsch/flexmark/parser/block/BlockParser;)V
      14: aload_1
      15: invokeinterface #134,  1          // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
      20: invokevirtual #136                // Method com/vladsch/flexmark/ast/Block.unlink:()V
      23: return

  private void propagateLastLineBlank(com.vladsch.flexmark.parser.block.BlockParser, com.vladsch.flexmark.parser.block.BlockParser);
    Code:
       0: aload_0
       1: invokevirtual #140                // Method isBlank:()Z
       4: ifeq          33
       7: aload_1
       8: invokeinterface #134,  1          // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
      13: invokevirtual #188                // Method com/vladsch/flexmark/ast/Block.getLastChild:()Lcom/vladsch/flexmark/ast/Node;
      16: ifnull        33
      19: aload_0
      20: aload_1
      21: invokeinterface #134,  1          // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
      26: invokevirtual #188                // Method com/vladsch/flexmark/ast/Block.getLastChild:()Lcom/vladsch/flexmark/ast/Node;
      29: iconst_1
      30: invokespecial #189                // Method setLastLineBlank:(Lcom/vladsch/flexmark/ast/Node;Z)V
      33: aload_0
      34: invokevirtual #140                // Method isBlank:()Z
      37: ifeq          54
      40: aload_1
      41: aload_2
      42: invokeinterface #190,  2          // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.isPropagatingLastBlankLine:(Lcom/vladsch/flexmark/parser/block/BlockParser;)Z
      47: ifeq          54
      50: iconst_1
      51: goto          55
      54: iconst_0
      55: istore_3
      56: aload_1
      57: invokeinterface #134,  1          // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
      62: astore        4
      64: aload         4
      66: ifnull        86
      69: aload_0
      70: aload         4
      72: iload_3
      73: invokespecial #189                // Method setLastLineBlank:(Lcom/vladsch/flexmark/ast/Node;Z)V
      76: aload         4
      78: invokevirtual #191                // Method com/vladsch/flexmark/ast/Node.getParent:()Lcom/vladsch/flexmark/ast/Node;
      81: astore        4
      83: goto          64
      86: return

  private void setLastLineBlank(com.vladsch.flexmark.ast.Node, boolean);
    Code:
       0: aload_0
       1: getfield      #29                 // Field lastLineBlank:Ljava/util/Map;
       4: aload_1
       5: iload_2
       6: invokestatic  #192                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       9: invokeinterface #193,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      14: pop
      15: return

  public boolean isLastLineBlank(com.vladsch.flexmark.ast.Node);
    Code:
       0: aload_0
       1: getfield      #29                 // Field lastLineBlank:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #194,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #54                 // class java/lang/Boolean
      13: astore_2
      14: aload_2
      15: ifnull        29
      18: aload_2
      19: invokevirtual #55                 // Method java/lang/Boolean.booleanValue:()Z
      22: ifeq          29
      25: iconst_1
      26: goto          30
      29: iconst_0
      30: ireturn

  private boolean finalizeBlocks(java.util.List<com.vladsch.flexmark.parser.block.BlockParser>);
    Code:
       0: aload_1
       1: invokeinterface #35,  1           // InterfaceMethod java/util/List.size:()I
       6: iconst_1
       7: isub
       8: istore_2
       9: iload_2
      10: iflt          35
      13: aload_1
      14: iload_2
      15: invokeinterface #116,  2          // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      20: checkcast     #117                // class com/vladsch/flexmark/parser/block/BlockParser
      23: astore_3
      24: aload_0
      25: aload_3
      26: invokespecial #129                // Method finalize:(Lcom/vladsch/flexmark/parser/block/BlockParser;)V
      29: iinc          2, -1
      32: goto          9
      35: iconst_1
      36: ireturn

  private void preProcessParagraph(com.vladsch.flexmark.ast.Paragraph, com.vladsch.flexmark.internal.DocumentParser$ParagraphPreProcessorDependencyStage, com.vladsch.flexmark.internal.DocumentParser$ParagraphPreProcessorCache);
    Code:
       0: iconst_0
       1: istore        4
       3: aload_2
       4: invokestatic  #195                // Method com/vladsch/flexmark/internal/DocumentParser$ParagraphPreProcessorDependencyStage.access$600:(Lcom/vladsch/flexmark/internal/DocumentParser$ParagraphPreProcessorDependencyStage;)Ljava/util/List;
       7: invokeinterface #37,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      12: astore        5
      14: aload         5
      16: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          367
      24: aload         5
      26: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      31: checkcast     #82                 // class com/vladsch/flexmark/parser/block/ParagraphPreProcessorFactory
      34: astore        6
      36: aload_3
      37: aload         6
      39: invokevirtual #196                // Method com/vladsch/flexmark/internal/DocumentParser$ParagraphPreProcessorCache.getItem:(Lcom/vladsch/flexmark/util/ComputableFactory;)Ljava/lang/Object;
      42: checkcast     #197                // class com/vladsch/flexmark/parser/block/ParagraphPreProcessor
      45: astore        7
      47: aload         7
      49: aload_1
      50: aload_0
      51: invokeinterface #198,  3          // InterfaceMethod com/vladsch/flexmark/parser/block/ParagraphPreProcessor.preProcessBlock:(Lcom/vladsch/flexmark/ast/Paragraph;Lcom/vladsch/flexmark/parser/block/ParserState;)I
      56: istore        8
      58: iload         8
      60: ifle          364
      63: iconst_1
      64: istore        4
      66: aload_1
      67: invokevirtual #199                // Method com/vladsch/flexmark/ast/Paragraph.getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      70: astore        9
      72: aload         9
      74: iload         8
      76: aload         9
      78: ldc           #200                // String  \t\r\n
      80: iload         8
      82: aload         9
      84: invokeinterface #100,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      89: invokeinterface #201,  4          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.countChars:(Ljava/lang/CharSequence;II)I
      94: iadd
      95: invokeinterface #164,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(I)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     100: astore        10
     102: aload         10
     104: invokeinterface #202,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.isBlank:()Z
     109: ifeq          122
     112: aload_1
     113: invokevirtual #203                // Method com/vladsch/flexmark/ast/Paragraph.unlink:()V
     116: aload_0
     117: aload_1
     118: invokevirtual #204                // Method blockRemoved:(Lcom/vladsch/flexmark/ast/Block;)V
     121: return
     122: aload_1
     123: invokevirtual #205                // Method com/vladsch/flexmark/ast/Paragraph.getLineCount:()I
     126: istore        11
     128: iconst_0
     129: istore        12
     131: iload         12
     133: iload         11
     135: if_icmpge     168
     138: aload_1
     139: iload         12
     141: invokevirtual #206                // Method com/vladsch/flexmark/ast/Paragraph.getLineChars:(I)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     144: invokeinterface #207,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
     149: aload         10
     151: invokeinterface #208,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
     156: if_icmple     162
     159: goto          168
     162: iinc          12, 1
     165: goto          131
     168: iload         12
     170: iload         11
     172: if_icmplt     185
     175: aload_1
     176: invokevirtual #203                // Method com/vladsch/flexmark/ast/Paragraph.unlink:()V
     179: aload_0
     180: aload_1
     181: invokevirtual #204                // Method blockRemoved:(Lcom/vladsch/flexmark/ast/Block;)V
     184: return
     185: aload_1
     186: iload         12
     188: invokevirtual #206                // Method com/vladsch/flexmark/ast/Paragraph.getLineChars:(I)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     191: invokeinterface #207,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
     196: aload         10
     198: invokeinterface #208,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
     203: if_icmpne     218
     206: aload_1
     207: aload_1
     208: iload         12
     210: iload         11
     212: invokevirtual #209                // Method com/vladsch/flexmark/ast/Paragraph.setContent:(Lcom/vladsch/flexmark/ast/Paragraph;II)V
     215: goto          364
     218: new           #22                 // class java/util/ArrayList
     221: dup
     222: iload         11
     224: iload         12
     226: isub
     227: invokespecial #36                 // Method java/util/ArrayList."<init>":(I)V
     230: astore        13
     232: aload         13
     234: aload_1
     235: invokevirtual #210                // Method com/vladsch/flexmark/ast/Paragraph.getContentLines:()Ljava/util/List;
     238: iload         12
     240: iload         11
     242: invokeinterface #125,  3          // InterfaceMethod java/util/List.subList:(II)Ljava/util/List;
     247: invokevirtual #76                 // Method java/util/ArrayList.addAll:(Ljava/util/Collection;)Z
     250: pop
     251: aload         10
     253: invokeinterface #208,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
     258: aload         13
     260: iconst_0
     261: invokevirtual #211                // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
     264: checkcast     #93                 // class com/vladsch/flexmark/util/sequence/BasedSequence
     267: invokeinterface #208,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
     272: isub
     273: istore        14
     275: iload         14
     277: ifle          322
     280: iload         14
     282: aload         13
     284: iconst_0
     285: invokevirtual #211                // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
     288: checkcast     #93                 // class com/vladsch/flexmark/util/sequence/BasedSequence
     291: invokeinterface #100,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
     296: if_icmpge     322
     299: aload         13
     301: iconst_0
     302: aload         13
     304: iconst_0
     305: invokevirtual #211                // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
     308: checkcast     #93                 // class com/vladsch/flexmark/util/sequence/BasedSequence
     311: iload         14
     313: invokeinterface #164,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(I)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     318: invokevirtual #212                // Method java/util/ArrayList.set:(ILjava/lang/Object;)Ljava/lang/Object;
     321: pop
     322: iload         11
     324: iload         12
     326: isub
     327: newarray       int
     329: astore        15
     331: aload_1
     332: invokevirtual #213                // Method com/vladsch/flexmark/ast/Paragraph.getLineIndents:()[I
     335: iload         12
     337: aload         15
     339: iconst_0
     340: aload         15
     342: arraylength
     343: invokestatic  #214                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     346: aload_1
     347: aload         13
     349: invokevirtual #215                // Method com/vladsch/flexmark/ast/Paragraph.setContentLines:(Ljava/util/List;)V
     352: aload_1
     353: aload         15
     355: invokevirtual #216                // Method com/vladsch/flexmark/ast/Paragraph.setLineIndents:([I)V
     358: aload_1
     359: aload         10
     361: invokevirtual #217                // Method com/vladsch/flexmark/ast/Paragraph.setChars:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     364: goto          14
     367: iload         4
     369: ifeq          391
     372: aload_2
     373: invokestatic  #195                // Method com/vladsch/flexmark/internal/DocumentParser$ParagraphPreProcessorDependencyStage.access$600:(Lcom/vladsch/flexmark/internal/DocumentParser$ParagraphPreProcessorDependencyStage;)Ljava/util/List;
     376: invokeinterface #35,  1           // InterfaceMethod java/util/List.size:()I
     381: iconst_2
     382: if_icmpge     388
     385: goto          391
     388: goto          0
     391: return

  private void preProcessParagraphs();
    Code:
       0: aload_0
       1: getfield      #2                  // Field blockTracker:Lcom/vladsch/flexmark/ast/util/ClassifyingBlockTracker;
       4: invokevirtual #218                // Method com/vladsch/flexmark/ast/util/ClassifyingBlockTracker.getNodeClassifier:()Lcom/vladsch/flexmark/util/collection/ClassificationBag;
       7: ldc           #219                // class com/vladsch/flexmark/ast/Paragraph
       9: invokevirtual #220                // Method com/vladsch/flexmark/util/collection/ClassificationBag.containsCategory:(Ljava/lang/Object;)Z
      12: ifeq          120
      15: new           #221                // class com/vladsch/flexmark/internal/DocumentParser$ParagraphPreProcessorCache
      18: dup
      19: aload_0
      20: invokespecial #222                // Method com/vladsch/flexmark/internal/DocumentParser$ParagraphPreProcessorCache."<init>":(Lcom/vladsch/flexmark/parser/block/ParserState;)V
      23: astore_1
      24: aload_0
      25: getfield      #44                 // Field paragraphPreProcessorDependencies:Lcom/vladsch/flexmark/internal/DocumentParser$ParagraphPreProcessorDependencies;
      28: invokevirtual #223                // Method com/vladsch/flexmark/internal/DocumentParser$ParagraphPreProcessorDependencies.getDependentStages:()Ljava/util/List;
      31: invokeinterface #37,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      36: astore_2
      37: aload_2
      38: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      43: ifeq          120
      46: aload_2
      47: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      52: checkcast     #224                // class com/vladsch/flexmark/internal/DocumentParser$ParagraphPreProcessorDependencyStage
      55: astore_3
      56: aload_0
      57: getfield      #2                  // Field blockTracker:Lcom/vladsch/flexmark/ast/util/ClassifyingBlockTracker;
      60: invokevirtual #218                // Method com/vladsch/flexmark/ast/util/ClassifyingBlockTracker.getNodeClassifier:()Lcom/vladsch/flexmark/util/collection/ClassificationBag;
      63: ldc           #219                // class com/vladsch/flexmark/ast/Paragraph
      65: iconst_1
      66: anewarray     #225                // class java/lang/Class
      69: dup
      70: iconst_0
      71: ldc           #219                // class com/vladsch/flexmark/ast/Paragraph
      73: aastore
      74: invokevirtual #226                // Method com/vladsch/flexmark/util/collection/ClassificationBag.getCategoryItems:(Ljava/lang/Class;[Ljava/lang/Object;)Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterable;
      77: invokeinterface #227,  1          // InterfaceMethod com/vladsch/flexmark/util/collection/iteration/ReversibleIterable.iterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterator;
      82: astore        4
      84: aload         4
      86: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      91: ifeq          117
      94: aload         4
      96: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     101: checkcast     #219                // class com/vladsch/flexmark/ast/Paragraph
     104: astore        5
     106: aload_0
     107: aload         5
     109: aload_3
     110: aload_1
     111: invokespecial #228                // Method preProcessParagraph:(Lcom/vladsch/flexmark/ast/Paragraph;Lcom/vladsch/flexmark/internal/DocumentParser$ParagraphPreProcessorDependencyStage;Lcom/vladsch/flexmark/internal/DocumentParser$ParagraphPreProcessorCache;)V
     114: goto          84
     117: goto          37
     120: return

  private void preProcessBlocks();
    Code:
       0: aload_0
       1: getfield      #2                  // Field blockTracker:Lcom/vladsch/flexmark/ast/util/ClassifyingBlockTracker;
       4: invokevirtual #218                // Method com/vladsch/flexmark/ast/util/ClassifyingBlockTracker.getNodeClassifier:()Lcom/vladsch/flexmark/util/collection/ClassificationBag;
       7: aload_0
       8: getfield      #45                 // Field blockPreProcessorDependencies:Lcom/vladsch/flexmark/internal/DocumentParser$BlockPreProcessorDependencies;
      11: invokestatic  #229                // Method com/vladsch/flexmark/internal/DocumentParser$BlockPreProcessorDependencies.access$700:(Lcom/vladsch/flexmark/internal/DocumentParser$BlockPreProcessorDependencies;)Ljava/util/Set;
      14: invokevirtual #230                // Method com/vladsch/flexmark/util/collection/ClassificationBag.categoriesBitSet:(Ljava/util/Collection;)Ljava/util/BitSet;
      17: astore_1
      18: aload_1
      19: invokevirtual #231                // Method java/util/BitSet.isEmpty:()Z
      22: ifne          171
      25: aload_0
      26: getfield      #45                 // Field blockPreProcessorDependencies:Lcom/vladsch/flexmark/internal/DocumentParser$BlockPreProcessorDependencies;
      29: invokevirtual #232                // Method com/vladsch/flexmark/internal/DocumentParser$BlockPreProcessorDependencies.getDependentStages:()Ljava/util/List;
      32: invokeinterface #37,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      37: astore_2
      38: aload_2
      39: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      44: ifeq          171
      47: aload_2
      48: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      53: checkcast     #233                // class com/vladsch/flexmark/internal/DocumentParser$BlockPreProcessorDependencyStage
      56: astore_3
      57: aload_3
      58: invokestatic  #234                // Method com/vladsch/flexmark/internal/DocumentParser$BlockPreProcessorDependencyStage.access$100:(Lcom/vladsch/flexmark/internal/DocumentParser$BlockPreProcessorDependencyStage;)Ljava/util/List;
      61: invokeinterface #37,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      66: astore        4
      68: aload         4
      70: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      75: ifeq          168
      78: aload         4
      80: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      85: checkcast     #88                 // class com/vladsch/flexmark/parser/block/BlockPreProcessorFactory
      88: astore        5
      90: aload_0
      91: getfield      #2                  // Field blockTracker:Lcom/vladsch/flexmark/ast/util/ClassifyingBlockTracker;
      94: invokevirtual #218                // Method com/vladsch/flexmark/ast/util/ClassifyingBlockTracker.getNodeClassifier:()Lcom/vladsch/flexmark/util/collection/ClassificationBag;
      97: ldc           #235                // class com/vladsch/flexmark/ast/Block
      99: aload         5
     101: invokeinterface #236,  1          // InterfaceMethod com/vladsch/flexmark/parser/block/BlockPreProcessorFactory.getBlockTypes:()Ljava/util/Set;
     106: invokevirtual #237                // Method com/vladsch/flexmark/util/collection/ClassificationBag.getCategoryItems:(Ljava/lang/Class;Ljava/util/Collection;)Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterable;
     109: astore        6
     111: aload         5
     113: aload_0
     114: invokeinterface #238,  2          // InterfaceMethod com/vladsch/flexmark/parser/block/BlockPreProcessorFactory.create:(Lcom/vladsch/flexmark/parser/block/ParserState;)Lcom/vladsch/flexmark/parser/block/BlockPreProcessor;
     119: astore        7
     121: aload         6
     123: invokeinterface #227,  1          // InterfaceMethod com/vladsch/flexmark/util/collection/iteration/ReversibleIterable.iterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterator;
     128: astore        8
     130: aload         8
     132: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     137: ifeq          165
     140: aload         8
     142: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     147: checkcast     #235                // class com/vladsch/flexmark/ast/Block
     150: astore        9
     152: aload         7
     154: aload_0
     155: aload         9
     157: invokeinterface #239,  3          // InterfaceMethod com/vladsch/flexmark/parser/block/BlockPreProcessor.preProcess:(Lcom/vladsch/flexmark/parser/block/ParserState;Lcom/vladsch/flexmark/ast/Block;)V
     162: goto          130
     165: goto          68
     168: goto          38
     171: return

  private com.vladsch.flexmark.ast.Document finalizeAndProcess();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #24                 // Field activeBlockParsers:Ljava/util/List;
       5: invokespecial #149                // Method finalizeBlocks:(Ljava/util/List;)Z
       8: pop
       9: aload_0
      10: getstatic     #240                // Field com/vladsch/flexmark/parser/block/ParserPhase.PRE_PROCESS_PARAGRAPHS:Lcom/vladsch/flexmark/parser/block/ParserPhase;
      13: putfield      #11                 // Field currentPhase:Lcom/vladsch/flexmark/parser/block/ParserPhase;
      16: aload_0
      17: invokespecial #241                // Method preProcessParagraphs:()V
      20: aload_0
      21: getstatic     #242                // Field com/vladsch/flexmark/parser/block/ParserPhase.PRE_PROCESS_BLOCKS:Lcom/vladsch/flexmark/parser/block/ParserPhase;
      24: putfield      #11                 // Field currentPhase:Lcom/vladsch/flexmark/parser/block/ParserPhase;
      27: aload_0
      28: invokespecial #243                // Method preProcessBlocks:()V
      31: aload_0
      32: getstatic     #244                // Field com/vladsch/flexmark/parser/block/ParserPhase.PARSE_INLINES:Lcom/vladsch/flexmark/parser/block/ParserPhase;
      35: putfield      #11                 // Field currentPhase:Lcom/vladsch/flexmark/parser/block/ParserPhase;
      38: aload_0
      39: invokespecial #245                // Method processInlines:()V
      42: aload_0
      43: getstatic     #246                // Field com/vladsch/flexmark/parser/block/ParserPhase.DONE:Lcom/vladsch/flexmark/parser/block/ParserPhase;
      46: putfield      #11                 // Field currentPhase:Lcom/vladsch/flexmark/parser/block/ParserPhase;
      49: aload_0
      50: getfield      #49                 // Field documentBlockParser:Lcom/vladsch/flexmark/internal/DocumentBlockParser;
      53: invokevirtual #59                 // Method com/vladsch/flexmark/internal/DocumentBlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Document;
      56: astore_1
      57: aload_0
      58: getfield      #46                 // Field inlineParser:Lcom/vladsch/flexmark/parser/InlineParser;
      61: aload_1
      62: invokeinterface #247,  2          // InterfaceMethod com/vladsch/flexmark/parser/InlineParser.finalizeDocument:(Lcom/vladsch/flexmark/ast/Document;)V
      67: aload_0
      68: getfield      #31                 // Field options:Lcom/vladsch/flexmark/util/options/DataHolder;
      71: getstatic     #52                 // Field com/vladsch/flexmark/parser/Parser.BLANK_LINES_IN_AST:Lcom/vladsch/flexmark/util/options/DataKey;
      74: invokeinterface #53,  2           // InterfaceMethod com/vladsch/flexmark/util/options/DataHolder.get:(Lcom/vladsch/flexmark/util/options/DataKey;)Ljava/lang/Object;
      79: checkcast     #54                 // class java/lang/Boolean
      82: invokevirtual #55                 // Method java/lang/Boolean.booleanValue:()Z
      85: ifeq          165
      88: aload_1
      89: invokevirtual #248                // Method com/vladsch/flexmark/ast/Document.getFirstChild:()Lcom/vladsch/flexmark/ast/Node;
      92: astore_2
      93: aload_2
      94: ifnull        165
      97: aload_2
      98: invokevirtual #249                // Method com/vladsch/flexmark/ast/Node.getNext:()Lcom/vladsch/flexmark/ast/Node;
     101: astore_3
     102: aload_2
     103: instanceof    #135                // class com/vladsch/flexmark/ast/BlankLineContainer
     106: ifeq          160
     109: aload_2
     110: invokevirtual #250                // Method com/vladsch/flexmark/ast/Node.getLastChild:()Lcom/vladsch/flexmark/ast/Node;
     113: astore        4
     115: aload         4
     117: instanceof    #122                // class com/vladsch/flexmark/ast/BlankLine
     120: ifeq          160
     123: aload         4
     125: instanceof    #122                // class com/vladsch/flexmark/ast/BlankLine
     128: ifeq          156
     131: aload         4
     133: invokevirtual #251                // Method com/vladsch/flexmark/ast/Node.getPrevious:()Lcom/vladsch/flexmark/ast/Node;
     136: astore        5
     138: aload         4
     140: invokevirtual #252                // Method com/vladsch/flexmark/ast/Node.unlink:()V
     143: aload_2
     144: aload         4
     146: invokevirtual #253                // Method com/vladsch/flexmark/ast/Node.insertAfter:(Lcom/vladsch/flexmark/ast/Node;)V
     149: aload         5
     151: astore        4
     153: goto          123
     156: aload_2
     157: invokevirtual #254                // Method com/vladsch/flexmark/ast/Node.setCharsFromContentOnly:()V
     160: aload_3
     161: astore_2
     162: goto          93
     165: aload_1
     166: areturn

  static {};
    Code:
       0: new           #255                // class com/vladsch/flexmark/internal/DocumentParser$1
       3: dup
       4: invokespecial #256                // Method com/vladsch/flexmark/internal/DocumentParser$1."<init>":()V
       7: putstatic     #77                 // Field INLINE_PARSER_FACTORY:Lcom/vladsch/flexmark/parser/InlineParserFactory;
      10: new           #27                 // class java/util/HashMap
      13: dup
      14: invokespecial #28                 // Method java/util/HashMap."<init>":()V
      17: putstatic     #61                 // Field CORE_FACTORIES_DATA_KEYS:Ljava/util/HashMap;
      20: getstatic     #61                 // Field CORE_FACTORIES_DATA_KEYS:Ljava/util/HashMap;
      23: new           #257                // class com/vladsch/flexmark/internal/BlockQuoteParser$Factory
      26: dup
      27: invokespecial #258                // Method com/vladsch/flexmark/internal/BlockQuoteParser$Factory."<init>":()V
      30: getstatic     #259                // Field com/vladsch/flexmark/parser/Parser.BLOCK_QUOTE_PARSER:Lcom/vladsch/flexmark/util/options/DataKey;
      33: invokevirtual #260                // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      36: pop
      37: getstatic     #61                 // Field CORE_FACTORIES_DATA_KEYS:Ljava/util/HashMap;
      40: new           #261                // class com/vladsch/flexmark/internal/HeadingParser$Factory
      43: dup
      44: invokespecial #262                // Method com/vladsch/flexmark/internal/HeadingParser$Factory."<init>":()V
      47: getstatic     #263                // Field com/vladsch/flexmark/parser/Parser.HEADING_PARSER:Lcom/vladsch/flexmark/util/options/DataKey;
      50: invokevirtual #260                // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      53: pop
      54: getstatic     #61                 // Field CORE_FACTORIES_DATA_KEYS:Ljava/util/HashMap;
      57: new           #264                // class com/vladsch/flexmark/internal/FencedCodeBlockParser$Factory
      60: dup
      61: invokespecial #265                // Method com/vladsch/flexmark/internal/FencedCodeBlockParser$Factory."<init>":()V
      64: getstatic     #266                // Field com/vladsch/flexmark/parser/Parser.FENCED_CODE_BLOCK_PARSER:Lcom/vladsch/flexmark/util/options/DataKey;
      67: invokevirtual #260                // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      70: pop
      71: getstatic     #61                 // Field CORE_FACTORIES_DATA_KEYS:Ljava/util/HashMap;
      74: new           #267                // class com/vladsch/flexmark/internal/HtmlBlockParser$Factory
      77: dup
      78: invokespecial #268                // Method com/vladsch/flexmark/internal/HtmlBlockParser$Factory."<init>":()V
      81: getstatic     #269                // Field com/vladsch/flexmark/parser/Parser.HTML_BLOCK_PARSER:Lcom/vladsch/flexmark/util/options/DataKey;
      84: invokevirtual #260                // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      87: pop
      88: getstatic     #61                 // Field CORE_FACTORIES_DATA_KEYS:Ljava/util/HashMap;
      91: new           #270                // class com/vladsch/flexmark/internal/ThematicBreakParser$Factory
      94: dup
      95: invokespecial #271                // Method com/vladsch/flexmark/internal/ThematicBreakParser$Factory."<init>":()V
      98: getstatic     #272                // Field com/vladsch/flexmark/parser/Parser.THEMATIC_BREAK_PARSER:Lcom/vladsch/flexmark/util/options/DataKey;
     101: invokevirtual #260                // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     104: pop
     105: getstatic     #61                 // Field CORE_FACTORIES_DATA_KEYS:Ljava/util/HashMap;
     108: new           #273                // class com/vladsch/flexmark/internal/ListBlockParser$Factory
     111: dup
     112: invokespecial #274                // Method com/vladsch/flexmark/internal/ListBlockParser$Factory."<init>":()V
     115: getstatic     #275                // Field com/vladsch/flexmark/parser/Parser.LIST_BLOCK_PARSER:Lcom/vladsch/flexmark/util/options/DataKey;
     118: invokevirtual #260                // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     121: pop
     122: getstatic     #61                 // Field CORE_FACTORIES_DATA_KEYS:Ljava/util/HashMap;
     125: new           #276                // class com/vladsch/flexmark/internal/IndentedCodeBlockParser$Factory
     128: dup
     129: invokespecial #277                // Method com/vladsch/flexmark/internal/IndentedCodeBlockParser$Factory."<init>":()V
     132: getstatic     #278                // Field com/vladsch/flexmark/parser/Parser.INDENTED_CODE_BLOCK_PARSER:Lcom/vladsch/flexmark/util/options/DataKey;
     135: invokevirtual #260                // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     138: pop
     139: new           #27                 // class java/util/HashMap
     142: dup
     143: invokespecial #28                 // Method java/util/HashMap."<init>":()V
     146: putstatic     #78                 // Field CORE_PARAGRAPH_PRE_PROCESSORS:Ljava/util/HashMap;
     149: getstatic     #78                 // Field CORE_PARAGRAPH_PRE_PROCESSORS:Ljava/util/HashMap;
     152: getstatic     #279                // Field com/vladsch/flexmark/parser/Parser.REFERENCE_PARAGRAPH_PRE_PROCESSOR:Lcom/vladsch/flexmark/util/options/DataKey;
     155: new           #280                // class com/vladsch/flexmark/internal/ReferencePreProcessorFactory
     158: dup
     159: invokespecial #281                // Method com/vladsch/flexmark/internal/ReferencePreProcessorFactory."<init>":()V
     162: invokevirtual #260                // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     165: pop
     166: new           #27                 // class java/util/HashMap
     169: dup
     170: invokespecial #28                 // Method java/util/HashMap."<init>":()V
     173: putstatic     #87                 // Field CORE_BLOCK_PRE_PROCESSORS:Ljava/util/HashMap;
     176: return
}
