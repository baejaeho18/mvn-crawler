Compiled from "DocumentBlockParser.java"
public class com.vladsch.flexmark.internal.DocumentBlockParser extends com.vladsch.flexmark.parser.block.AbstractBlockParser {
  private com.vladsch.flexmark.ast.Document document;

  public com.vladsch.flexmark.internal.DocumentBlockParser();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/vladsch/flexmark/parser/block/AbstractBlockParser."<init>":()V
       4: return

  public void initializeDocument(com.vladsch.flexmark.util.options.DataHolder, com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: new           #2                  // class com/vladsch/flexmark/ast/Document
       4: dup
       5: aload_1
       6: aload_2
       7: invokespecial #3                  // Method com/vladsch/flexmark/ast/Document."<init>":(Lcom/vladsch/flexmark/util/options/DataHolder;Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
      10: putfield      #4                  // Field document:Lcom/vladsch/flexmark/ast/Document;
      13: return

  public boolean isContainer();
    Code:
       0: iconst_1
       1: ireturn

  public boolean canContain(com.vladsch.flexmark.parser.block.ParserState, com.vladsch.flexmark.parser.block.BlockParser, com.vladsch.flexmark.ast.Block);
    Code:
       0: iconst_1
       1: ireturn

  public com.vladsch.flexmark.ast.Document getBlock();
    Code:
       0: aload_0
       1: getfield      #4                  // Field document:Lcom/vladsch/flexmark/ast/Document;
       4: areturn

  public com.vladsch.flexmark.parser.block.BlockContinue tryContinue(com.vladsch.flexmark.parser.block.ParserState);
    Code:
       0: aload_1
       1: invokeinterface #5,  1            // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getIndex:()I
       6: invokestatic  #6                  // Method com/vladsch/flexmark/parser/block/BlockContinue.atIndex:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
       9: areturn

  public void addLine(com.vladsch.flexmark.parser.block.ParserState, com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: return

  public void closeBlock(com.vladsch.flexmark.parser.block.ParserState);
    Code:
       0: aload_1
       1: invokeinterface #7,  1            // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getProperties:()Lcom/vladsch/flexmark/util/options/MutableDataHolder;
       6: getstatic     #8                  // Field com/vladsch/flexmark/parser/Parser.TRACK_DOCUMENT_LINES:Lcom/vladsch/flexmark/util/options/DataKey;
       9: invokeinterface #9,  2            // InterfaceMethod com/vladsch/flexmark/util/options/MutableDataHolder.get:(Lcom/vladsch/flexmark/util/options/DataKey;)Ljava/lang/Object;
      14: checkcast     #10                 // class java/lang/Boolean
      17: invokevirtual #11                 // Method java/lang/Boolean.booleanValue:()Z
      20: ifeq          36
      23: aload_0
      24: getfield      #4                  // Field document:Lcom/vladsch/flexmark/ast/Document;
      27: aload_1
      28: invokeinterface #12,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLineSegments:()Ljava/util/List;
      33: invokevirtual #13                 // Method com/vladsch/flexmark/ast/Document.setContent:(Ljava/util/List;)V
      36: return

  public com.vladsch.flexmark.ast.Block getBlock();
    Code:
       0: aload_0
       1: invokevirtual #14                 // Method getBlock:()Lcom/vladsch/flexmark/ast/Document;
       4: areturn
}
