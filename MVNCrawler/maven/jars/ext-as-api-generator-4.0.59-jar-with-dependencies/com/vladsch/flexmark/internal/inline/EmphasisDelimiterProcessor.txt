Compiled from "EmphasisDelimiterProcessor.java"
public abstract class com.vladsch.flexmark.internal.inline.EmphasisDelimiterProcessor implements com.vladsch.flexmark.parser.delimiter.DelimiterProcessor {
  private final char delimiterChar;

  private final int multipleUse;

  protected com.vladsch.flexmark.internal.inline.EmphasisDelimiterProcessor(char, boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iload_1
       6: putfield      #2                  // Field delimiterChar:C
       9: aload_0
      10: iload_2
      11: ifeq          18
      14: iconst_1
      15: goto          19
      18: iconst_2
      19: putfield      #3                  // Field multipleUse:I
      22: return

  public char getOpeningCharacter();
    Code:
       0: aload_0
       1: getfield      #2                  // Field delimiterChar:C
       4: ireturn

  public char getClosingCharacter();
    Code:
       0: aload_0
       1: getfield      #2                  // Field delimiterChar:C
       4: ireturn

  public int getMinLength();
    Code:
       0: iconst_1
       1: ireturn

  public boolean canBeOpener(java.lang.String, java.lang.String, boolean, boolean, boolean, boolean, boolean, boolean);
    Code:
       0: iload_3
       1: ireturn

  public boolean canBeCloser(java.lang.String, java.lang.String, boolean, boolean, boolean, boolean, boolean, boolean);
    Code:
       0: iload         4
       2: ireturn

  public boolean skipNonOpenerCloser();
    Code:
       0: iconst_0
       1: ireturn

  public com.vladsch.flexmark.ast.Node unmatchedDelimiterNode(com.vladsch.flexmark.parser.InlineParser, com.vladsch.flexmark.parser.delimiter.DelimiterRun);
    Code:
       0: aconst_null
       1: areturn

  public int getDelimiterUse(com.vladsch.flexmark.parser.delimiter.DelimiterRun, com.vladsch.flexmark.parser.delimiter.DelimiterRun);
    Code:
       0: aload_1
       1: invokeinterface #4,  1            // InterfaceMethod com/vladsch/flexmark/parser/delimiter/DelimiterRun.canClose:()Z
       6: ifne          18
       9: aload_2
      10: invokeinterface #5,  1            // InterfaceMethod com/vladsch/flexmark/parser/delimiter/DelimiterRun.canOpen:()Z
      15: ifeq          38
      18: aload_1
      19: invokeinterface #6,  1            // InterfaceMethod com/vladsch/flexmark/parser/delimiter/DelimiterRun.length:()I
      24: aload_2
      25: invokeinterface #6,  1            // InterfaceMethod com/vladsch/flexmark/parser/delimiter/DelimiterRun.length:()I
      30: iadd
      31: iconst_3
      32: irem
      33: ifne          38
      36: iconst_0
      37: ireturn
      38: aload_1
      39: invokeinterface #6,  1            // InterfaceMethod com/vladsch/flexmark/parser/delimiter/DelimiterRun.length:()I
      44: iconst_3
      45: if_icmplt     58
      48: aload_2
      49: invokeinterface #6,  1            // InterfaceMethod com/vladsch/flexmark/parser/delimiter/DelimiterRun.length:()I
      54: iconst_3
      55: if_icmpge     80
      58: aload_2
      59: invokeinterface #6,  1            // InterfaceMethod com/vladsch/flexmark/parser/delimiter/DelimiterRun.length:()I
      64: iconst_1
      65: newarray       int
      67: dup
      68: iconst_0
      69: aload_1
      70: invokeinterface #6,  1            // InterfaceMethod com/vladsch/flexmark/parser/delimiter/DelimiterRun.length:()I
      75: iastore
      76: invokestatic  #7                  // Method com/vladsch/flexmark/util/Utils.min:(I[I)I
      79: ireturn
      80: aload_2
      81: invokeinterface #6,  1            // InterfaceMethod com/vladsch/flexmark/parser/delimiter/DelimiterRun.length:()I
      86: iconst_2
      87: irem
      88: ifne          95
      91: iconst_2
      92: goto          99
      95: aload_0
      96: getfield      #3                  // Field multipleUse:I
      99: ireturn

  public void process(com.vladsch.flexmark.internal.Delimiter, com.vladsch.flexmark.internal.Delimiter, int);
    Code:
       0: iload_3
       1: iconst_1
       2: if_icmpne     28
       5: new           #8                  // class com/vladsch/flexmark/ast/Emphasis
       8: dup
       9: aload_1
      10: iload_3
      11: invokevirtual #9                  // Method com/vladsch/flexmark/internal/Delimiter.getTailChars:(I)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      14: getstatic     #10                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      17: aload_2
      18: iload_3
      19: invokevirtual #11                 // Method com/vladsch/flexmark/internal/Delimiter.getLeadChars:(I)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      22: invokespecial #12                 // Method com/vladsch/flexmark/ast/Emphasis."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;Lcom/vladsch/flexmark/util/sequence/BasedSequence;Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
      25: goto          48
      28: new           #13                 // class com/vladsch/flexmark/ast/StrongEmphasis
      31: dup
      32: aload_1
      33: iload_3
      34: invokevirtual #9                  // Method com/vladsch/flexmark/internal/Delimiter.getTailChars:(I)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      37: getstatic     #10                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      40: aload_2
      41: iload_3
      42: invokevirtual #11                 // Method com/vladsch/flexmark/internal/Delimiter.getLeadChars:(I)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      45: invokespecial #14                 // Method com/vladsch/flexmark/ast/StrongEmphasis."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;Lcom/vladsch/flexmark/util/sequence/BasedSequence;Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
      48: astore        4
      50: aload_1
      51: aload         4
      53: aload_2
      54: invokevirtual #15                 // Method com/vladsch/flexmark/internal/Delimiter.moveNodesBetweenDelimitersTo:(Lcom/vladsch/flexmark/ast/DelimitedNode;Lcom/vladsch/flexmark/internal/Delimiter;)V
      57: return
}
