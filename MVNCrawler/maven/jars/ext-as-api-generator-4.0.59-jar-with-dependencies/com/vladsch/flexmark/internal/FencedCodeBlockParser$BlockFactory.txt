Compiled from "FencedCodeBlockParser.java"
class com.vladsch.flexmark.internal.FencedCodeBlockParser$BlockFactory extends com.vladsch.flexmark.parser.block.AbstractBlockParserFactory {
  private com.vladsch.flexmark.internal.FencedCodeBlockParser$BlockFactory(com.vladsch.flexmark.util.options.DataHolder);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #2                  // Method com/vladsch/flexmark/parser/block/AbstractBlockParserFactory."<init>":(Lcom/vladsch/flexmark/util/options/DataHolder;)V
       5: return

  public com.vladsch.flexmark.parser.block.BlockStart tryStart(com.vladsch.flexmark.parser.block.ParserState, com.vladsch.flexmark.parser.block.MatchedBlockParser);
    Code:
       0: aload_1
       1: invokeinterface #3,  1            // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getNextNonSpaceIndex:()I
       6: istore_3
       7: aload_1
       8: invokeinterface #4,  1            // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      13: astore        4
      15: aload_1
      16: invokeinterface #5,  1            // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getIndent:()I
      21: iconst_4
      22: if_icmpge     146
      25: aload         4
      27: iload_3
      28: aload         4
      30: invokeinterface #6,  1            // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      35: invokeinterface #7,  3            // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      40: astore        6
      42: invokestatic  #8                  // Method com/vladsch/flexmark/internal/FencedCodeBlockParser.access$100:()Ljava/util/regex/Pattern;
      45: aload         6
      47: invokevirtual #9                  // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
      50: dup
      51: astore        5
      53: invokevirtual #10                 // Method java/util/regex/Matcher.find:()Z
      56: ifeq          146
      59: aload         5
      61: iconst_0
      62: invokevirtual #11                 // Method java/util/regex/Matcher.group:(I)Ljava/lang/String;
      65: invokevirtual #12                 // Method java/lang/String.length:()I
      68: istore        7
      70: aload         5
      72: iconst_0
      73: invokevirtual #11                 // Method java/util/regex/Matcher.group:(I)Ljava/lang/String;
      76: iconst_0
      77: invokevirtual #13                 // Method java/lang/String.charAt:(I)C
      80: istore        8
      82: new           #14                 // class com/vladsch/flexmark/internal/FencedCodeBlockParser
      85: dup
      86: aload_1
      87: invokeinterface #15,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getProperties:()Lcom/vladsch/flexmark/util/options/MutableDataHolder;
      92: iload         8
      94: iload         7
      96: aload_1
      97: invokeinterface #5,  1            // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getIndent:()I
     102: iload_3
     103: invokespecial #16                 // Method com/vladsch/flexmark/internal/FencedCodeBlockParser."<init>":(Lcom/vladsch/flexmark/util/options/DataHolder;CIII)V
     106: astore        9
     108: aload         9
     110: invokestatic  #17                 // Method com/vladsch/flexmark/internal/FencedCodeBlockParser.access$200:(Lcom/vladsch/flexmark/internal/FencedCodeBlockParser;)Lcom/vladsch/flexmark/ast/FencedCodeBlock;
     113: aload         6
     115: iconst_0
     116: iload         7
     118: invokeinterface #7,  3            // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     123: invokevirtual #18                 // Method com/vladsch/flexmark/ast/FencedCodeBlock.setOpeningMarker:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     126: iconst_1
     127: anewarray     #19                 // class com/vladsch/flexmark/parser/block/BlockParser
     130: dup
     131: iconst_0
     132: aload         9
     134: aastore
     135: invokestatic  #20                 // Method com/vladsch/flexmark/parser/block/BlockStart.of:([Lcom/vladsch/flexmark/parser/block/BlockParser;)Lcom/vladsch/flexmark/parser/block/BlockStart;
     138: iload_3
     139: iload         7
     141: iadd
     142: invokevirtual #21                 // Method com/vladsch/flexmark/parser/block/BlockStart.atIndex:(I)Lcom/vladsch/flexmark/parser/block/BlockStart;
     145: areturn
     146: invokestatic  #22                 // Method com/vladsch/flexmark/parser/block/BlockStart.none:()Lcom/vladsch/flexmark/parser/block/BlockStart;
     149: areturn

  com.vladsch.flexmark.internal.FencedCodeBlockParser$BlockFactory(com.vladsch.flexmark.util.options.DataHolder, com.vladsch.flexmark.internal.FencedCodeBlockParser$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method "<init>":(Lcom/vladsch/flexmark/util/options/DataHolder;)V
       5: return
}
