Compiled from "ListItemParser.java"
public class com.vladsch.flexmark.internal.ListItemParser extends com.vladsch.flexmark.parser.block.AbstractBlockParser {
  private final com.vladsch.flexmark.ast.ListItem myBlock;

  private final com.vladsch.flexmark.parser.ListOptions myOptions;

  private final com.vladsch.flexmark.internal.ListBlockParser$ListData myListData;

  private final com.vladsch.flexmark.ast.util.Parsing myParsing;

  private boolean myHadBlankLine;

  private boolean myIsEmpty;

  static final boolean $assertionsDisabled;

  com.vladsch.flexmark.internal.ListItemParser(com.vladsch.flexmark.parser.ListOptions, com.vladsch.flexmark.ast.util.Parsing, com.vladsch.flexmark.internal.ListBlockParser$ListData);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/vladsch/flexmark/parser/block/AbstractBlockParser."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field myHadBlankLine:Z
       9: aload_0
      10: iconst_0
      11: putfield      #3                  // Field myIsEmpty:Z
      14: aload_0
      15: aload_1
      16: putfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
      19: aload_0
      20: aload_3
      21: putfield      #5                  // Field myListData:Lcom/vladsch/flexmark/internal/ListBlockParser$ListData;
      24: aload_0
      25: aload_2
      26: putfield      #6                  // Field myParsing:Lcom/vladsch/flexmark/ast/util/Parsing;
      29: aload_0
      30: aload_0
      31: getfield      #5                  // Field myListData:Lcom/vladsch/flexmark/internal/ListBlockParser$ListData;
      34: getfield      #7                  // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.isNumberedList:Z
      37: ifeq          50
      40: new           #8                  // class com/vladsch/flexmark/ast/OrderedListItem
      43: dup
      44: invokespecial #9                  // Method com/vladsch/flexmark/ast/OrderedListItem."<init>":()V
      47: goto          57
      50: new           #10                 // class com/vladsch/flexmark/ast/BulletListItem
      53: dup
      54: invokespecial #11                 // Method com/vladsch/flexmark/ast/BulletListItem."<init>":()V
      57: putfield      #12                 // Field myBlock:Lcom/vladsch/flexmark/ast/ListItem;
      60: aload_0
      61: getfield      #12                 // Field myBlock:Lcom/vladsch/flexmark/ast/ListItem;
      64: aload_0
      65: getfield      #5                  // Field myListData:Lcom/vladsch/flexmark/internal/ListBlockParser$ListData;
      68: getfield      #13                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.listMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      71: invokevirtual #14                 // Method com/vladsch/flexmark/ast/ListItem.setOpeningMarker:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
      74: aload_0
      75: getfield      #12                 // Field myBlock:Lcom/vladsch/flexmark/ast/ListItem;
      78: aload_0
      79: getfield      #5                  // Field myListData:Lcom/vladsch/flexmark/internal/ListBlockParser$ListData;
      82: getfield      #15                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.markerSuffix:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      85: invokevirtual #16                 // Method com/vladsch/flexmark/ast/ListItem.setMarkerSuffix:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
      88: return

  int getContentColumn();
    Code:
       0: aload_0
       1: getfield      #5                  // Field myListData:Lcom/vladsch/flexmark/internal/ListBlockParser$ListData;
       4: getfield      #17                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.markerColumn:I
       7: aload_0
       8: getfield      #5                  // Field myListData:Lcom/vladsch/flexmark/internal/ListBlockParser$ListData;
      11: getfield      #13                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.listMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      14: invokeinterface #18,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      19: iadd
      20: aload_0
      21: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
      24: invokevirtual #19                 // Method com/vladsch/flexmark/parser/ListOptions.isItemContentAfterSuffix:()Z
      27: ifeq          40
      30: aload_0
      31: getfield      #5                  // Field myListData:Lcom/vladsch/flexmark/internal/ListBlockParser$ListData;
      34: getfield      #20                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.contentOffset:I
      37: goto          47
      40: aload_0
      41: getfield      #5                  // Field myListData:Lcom/vladsch/flexmark/internal/ListBlockParser$ListData;
      44: getfield      #21                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.markerSuffixOffset:I
      47: iadd
      48: ireturn

  int getContentIndent();
    Code:
       0: aload_0
       1: getfield      #5                  // Field myListData:Lcom/vladsch/flexmark/internal/ListBlockParser$ListData;
       4: getfield      #22                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.markerIndent:I
       7: aload_0
       8: getfield      #5                  // Field myListData:Lcom/vladsch/flexmark/internal/ListBlockParser$ListData;
      11: getfield      #13                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.listMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      14: invokeinterface #18,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      19: iadd
      20: aload_0
      21: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
      24: invokevirtual #19                 // Method com/vladsch/flexmark/parser/ListOptions.isItemContentAfterSuffix:()Z
      27: ifeq          40
      30: aload_0
      31: getfield      #5                  // Field myListData:Lcom/vladsch/flexmark/internal/ListBlockParser$ListData;
      34: getfield      #20                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.contentOffset:I
      37: goto          47
      40: aload_0
      41: getfield      #5                  // Field myListData:Lcom/vladsch/flexmark/internal/ListBlockParser$ListData;
      44: getfield      #21                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.markerSuffixOffset:I
      47: iadd
      48: ireturn

  int getMarkerContentIndent();
    Code:
       0: aload_0
       1: getfield      #5                  // Field myListData:Lcom/vladsch/flexmark/internal/ListBlockParser$ListData;
       4: getfield      #22                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.markerIndent:I
       7: aload_0
       8: getfield      #5                  // Field myListData:Lcom/vladsch/flexmark/internal/ListBlockParser$ListData;
      11: getfield      #13                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.listMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      14: invokeinterface #18,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      19: iadd
      20: iconst_1
      21: iadd
      22: ireturn

  public boolean isContainer();
    Code:
       0: iconst_1
       1: ireturn

  public boolean canContain(com.vladsch.flexmark.parser.block.ParserState, com.vladsch.flexmark.parser.block.BlockParser, com.vladsch.flexmark.ast.Block);
    Code:
       0: aload_3
       1: instanceof    #23                 // class com/vladsch/flexmark/ast/FencedCodeBlock
       4: ifeq          54
       7: aload_1
       8: invokeinterface #24,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getProperties:()Lcom/vladsch/flexmark/util/options/MutableDataHolder;
      13: getstatic     #25                 // Field com/vladsch/flexmark/parser/Parser.PARSER_EMULATION_PROFILE:Lcom/vladsch/flexmark/util/options/DataKey;
      16: invokeinterface #26,  2           // InterfaceMethod com/vladsch/flexmark/util/options/MutableDataHolder.get:(Lcom/vladsch/flexmark/util/options/DataKey;)Ljava/lang/Object;
      21: getstatic     #27                 // Field com/vladsch/flexmark/parser/ParserEmulationProfile.GITHUB_DOC:Lcom/vladsch/flexmark/parser/ParserEmulationProfile;
      24: if_acmpne     54
      27: aload_2
      28: checkcast     #28                 // class com/vladsch/flexmark/internal/FencedCodeBlockParser
      31: astore        4
      33: aload_0
      34: getfield      #5                  // Field myListData:Lcom/vladsch/flexmark/internal/ListBlockParser$ListData;
      37: getfield      #22                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.markerIndent:I
      40: aload         4
      42: invokevirtual #29                 // Method com/vladsch/flexmark/internal/FencedCodeBlockParser.getFenceMarkerIndent:()I
      45: if_icmpge     52
      48: iconst_1
      49: goto          53
      52: iconst_0
      53: ireturn
      54: iconst_1
      55: ireturn

  public boolean isPropagatingLastBlankLine(com.vladsch.flexmark.parser.block.BlockParser);
    Code:
       0: aload_0
       1: getfield      #12                 // Field myBlock:Lcom/vladsch/flexmark/ast/ListItem;
       4: invokevirtual #30                 // Method com/vladsch/flexmark/ast/ListItem.getFirstChild:()Lcom/vladsch/flexmark/ast/Node;
       7: ifnonnull     15
      10: aload_0
      11: aload_1
      12: if_acmpne     19
      15: iconst_1
      16: goto          20
      19: iconst_0
      20: ireturn

  public com.vladsch.flexmark.ast.Block getBlock();
    Code:
       0: aload_0
       1: getfield      #12                 // Field myBlock:Lcom/vladsch/flexmark/ast/ListItem;
       4: areturn

  public void closeBlock(com.vladsch.flexmark.parser.block.ParserState);
    Code:
       0: aload_0
       1: getfield      #12                 // Field myBlock:Lcom/vladsch/flexmark/ast/ListItem;
       4: invokevirtual #31                 // Method com/vladsch/flexmark/ast/ListItem.setCharsFromContent:()V
       7: return

  private com.vladsch.flexmark.parser.block.BlockContinue continueAtColumn(int);
    Code:
       0: aload_0
       1: getfield      #2                  // Field myHadBlankLine:Z
       4: ifeq          15
       7: aload_0
       8: getfield      #12                 // Field myBlock:Lcom/vladsch/flexmark/ast/ListItem;
      11: iconst_1
      12: invokevirtual #32                 // Method com/vladsch/flexmark/ast/ListItem.setContainsBlankLine:(Z)V
      15: aload_0
      16: iconst_0
      17: putfield      #3                  // Field myIsEmpty:Z
      20: iload_1
      21: invokestatic  #33                 // Method com/vladsch/flexmark/parser/block/BlockContinue.atColumn:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
      24: areturn

  public com.vladsch.flexmark.parser.block.BlockContinue tryContinue(com.vladsch.flexmark.parser.block.ParserState);
    Code:
       0: aload_1
       1: invokeinterface #34,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.isBlank:()Z
       6: ifeq          67
       9: aload_0
      10: getfield      #12                 // Field myBlock:Lcom/vladsch/flexmark/ast/ListItem;
      13: invokevirtual #30                 // Method com/vladsch/flexmark/ast/ListItem.getFirstChild:()Lcom/vladsch/flexmark/ast/Node;
      16: astore_2
      17: aload_0
      18: aload_2
      19: ifnonnull     26
      22: iconst_1
      23: goto          27
      26: iconst_0
      27: putfield      #3                  // Field myIsEmpty:Z
      30: aload_0
      31: getfield      #3                  // Field myIsEmpty:Z
      34: ifne          44
      37: aload_2
      38: invokevirtual #35                 // Method com/vladsch/flexmark/ast/Node.getNext:()Lcom/vladsch/flexmark/ast/Node;
      41: ifnonnull     52
      44: aload_0
      45: getfield      #12                 // Field myBlock:Lcom/vladsch/flexmark/ast/ListItem;
      48: iconst_1
      49: invokevirtual #36                 // Method com/vladsch/flexmark/ast/ListItem.setHadBlankAfterItemParagraph:(Z)V
      52: aload_0
      53: iconst_1
      54: putfield      #2                  // Field myHadBlankLine:Z
      57: aload_1
      58: invokeinterface #37,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getNextNonSpaceIndex:()I
      63: invokestatic  #38                 // Method com/vladsch/flexmark/parser/block/BlockContinue.atIndex:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
      66: areturn
      67: getstatic     #39                 // Field $assertionsDisabled:Z
      70: ifne          94
      73: aload_0
      74: getfield      #12                 // Field myBlock:Lcom/vladsch/flexmark/ast/ListItem;
      77: invokevirtual #40                 // Method com/vladsch/flexmark/ast/ListItem.getParent:()Lcom/vladsch/flexmark/ast/Block;
      80: instanceof    #41                 // class com/vladsch/flexmark/ast/ListBlock
      83: ifne          94
      86: new           #42                 // class java/lang/AssertionError
      89: dup
      90: invokespecial #43                 // Method java/lang/AssertionError."<init>":()V
      93: athrow
      94: aload_1
      95: aload_0
      96: getfield      #12                 // Field myBlock:Lcom/vladsch/flexmark/ast/ListItem;
      99: invokevirtual #40                 // Method com/vladsch/flexmark/ast/ListItem.getParent:()Lcom/vladsch/flexmark/ast/Block;
     102: invokeinterface #44,  2           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getActiveBlockParser:(Lcom/vladsch/flexmark/ast/Block;)Lcom/vladsch/flexmark/parser/block/BlockParser;
     107: checkcast     #45                 // class com/vladsch/flexmark/internal/ListBlockParser
     110: astore_2
     111: aload_0
     112: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
     115: invokevirtual #46                 // Method com/vladsch/flexmark/parser/ListOptions.getParserEmulationProfile:()Lcom/vladsch/flexmark/parser/ParserEmulationProfile;
     118: astore_3
     119: aload_3
     120: getfield      #47                 // Field com/vladsch/flexmark/parser/ParserEmulationProfile.family:Lcom/vladsch/flexmark/parser/ParserEmulationProfile;
     123: astore        4
     125: aload_0
     126: invokevirtual #48                 // Method getContentIndent:()I
     129: istore        5
     131: aload         4
     133: getstatic     #49                 // Field com/vladsch/flexmark/parser/ParserEmulationProfile.COMMONMARK:Lcom/vladsch/flexmark/parser/ParserEmulationProfile;
     136: if_acmpne     594
     139: aload_1
     140: invokeinterface #50,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getIndent:()I
     145: istore        6
     147: aload_1
     148: invokeinterface #51,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getColumn:()I
     153: iload         5
     155: iadd
     156: istore        7
     158: iload         6
     160: iload         5
     162: aload_0
     163: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
     166: invokevirtual #52                 // Method com/vladsch/flexmark/parser/ListOptions.getCodeIndent:()I
     169: iadd
     170: if_icmplt     190
     173: aload_2
     174: aload_1
     175: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     180: invokevirtual #54                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledLine:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     183: aload_0
     184: iload         7
     186: invokespecial #55                 // Method continueAtColumn:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
     189: areturn
     190: aload_0
     191: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
     194: aload_0
     195: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
     198: invokevirtual #52                 // Method com/vladsch/flexmark/parser/ListOptions.getCodeIndent:()I
     201: aload_1
     202: invokestatic  #56                 // Method com/vladsch/flexmark/internal/ListBlockParser.parseListMarker:(Lcom/vladsch/flexmark/parser/ListOptions;ILcom/vladsch/flexmark/parser/block/ParserState;)Lcom/vladsch/flexmark/internal/ListBlockParser$ListData;
     205: astore        8
     207: iload         6
     209: iload         5
     211: if_icmplt     405
     214: aload         8
     216: ifnull        367
     219: aload_1
     220: invokeinterface #57,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getActiveBlockParser:()Lcom/vladsch/flexmark/parser/block/BlockParser;
     225: astore        9
     227: aload         9
     229: invokeinterface #58,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.isParagraphParser:()Z
     234: istore        10
     236: iload         10
     238: ifeq          284
     241: aload         9
     243: invokeinterface #59,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
     248: invokevirtual #60                 // Method com/vladsch/flexmark/ast/Block.getParent:()Lcom/vladsch/flexmark/ast/Block;
     251: instanceof    #61                 // class com/vladsch/flexmark/ast/ListItem
     254: ifeq          284
     257: aload         9
     259: invokeinterface #59,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
     264: aload         9
     266: invokeinterface #59,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
     271: invokevirtual #60                 // Method com/vladsch/flexmark/ast/Block.getParent:()Lcom/vladsch/flexmark/ast/Block;
     274: invokevirtual #62                 // Method com/vladsch/flexmark/ast/Block.getFirstChild:()Lcom/vladsch/flexmark/ast/Node;
     277: if_acmpne     284
     280: iconst_1
     281: goto          285
     284: iconst_0
     285: istore        11
     287: iload         11
     289: ifeq          350
     292: aload_0
     293: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
     296: aload         8
     298: getfield      #63                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.listBlock:Lcom/vladsch/flexmark/ast/ListBlock;
     301: aload         8
     303: getfield      #64                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.isEmpty:Z
     306: iconst_1
     307: invokevirtual #65                 // Method com/vladsch/flexmark/parser/ListOptions.canInterrupt:(Lcom/vladsch/flexmark/ast/ListBlock;ZZ)Z
     310: ifeq          333
     313: aload_0
     314: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
     317: aload         8
     319: getfield      #63                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.listBlock:Lcom/vladsch/flexmark/ast/ListBlock;
     322: aload         8
     324: getfield      #64                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.isEmpty:Z
     327: invokevirtual #66                 // Method com/vladsch/flexmark/parser/ListOptions.canStartSubList:(Lcom/vladsch/flexmark/ast/ListBlock;Z)Z
     330: ifne          350
     333: aload_2
     334: aload_1
     335: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     340: invokevirtual #67                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledLineSkipActive:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     343: aload_0
     344: iload         7
     346: invokespecial #55                 // Method continueAtColumn:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
     349: areturn
     350: aload_2
     351: aload_1
     352: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     357: invokevirtual #68                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledNewListLine:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     360: aload_0
     361: iload         7
     363: invokespecial #55                 // Method continueAtColumn:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
     366: areturn
     367: aload_0
     368: getfield      #3                  // Field myIsEmpty:Z
     371: ifeq          388
     374: aload_2
     375: aload_1
     376: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     381: invokevirtual #54                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledLine:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     384: invokestatic  #69                 // Method com/vladsch/flexmark/parser/block/BlockContinue.none:()Lcom/vladsch/flexmark/parser/block/BlockContinue;
     387: areturn
     388: aload_2
     389: aload_1
     390: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     395: invokevirtual #54                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledLine:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     398: aload_0
     399: iload         7
     401: invokespecial #55                 // Method continueAtColumn:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
     404: areturn
     405: aload         8
     407: ifnull        591
     410: aload_0
     411: getfield      #2                  // Field myHadBlankLine:Z
     414: ifne          462
     417: aload_0
     418: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
     421: aload         8
     423: getfield      #63                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.listBlock:Lcom/vladsch/flexmark/ast/ListBlock;
     426: aload         8
     428: getfield      #64                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.isEmpty:Z
     431: iconst_1
     432: invokevirtual #65                 // Method com/vladsch/flexmark/parser/ListOptions.canInterrupt:(Lcom/vladsch/flexmark/ast/ListBlock;ZZ)Z
     435: ifne          462
     438: aload_2
     439: aload_1
     440: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     445: invokevirtual #54                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledLine:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     448: aload_0
     449: aload_1
     450: invokeinterface #51,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getColumn:()I
     455: iload         6
     457: iadd
     458: invokespecial #55                 // Method continueAtColumn:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
     461: areturn
     462: aload_0
     463: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
     466: invokevirtual #70                 // Method com/vladsch/flexmark/parser/ListOptions.isItemTypeMismatchToNewList:()Z
     469: ifeq          493
     472: aload_0
     473: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
     476: invokevirtual #71                 // Method com/vladsch/flexmark/parser/ListOptions.isItemTypeMismatchToSubList:()Z
     479: ifeq          493
     482: aload_0
     483: getfield      #2                  // Field myHadBlankLine:Z
     486: ifeq          493
     489: iconst_1
     490: goto          494
     493: iconst_0
     494: istore        9
     496: iload         9
     498: ifne          544
     501: aload_0
     502: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
     505: aload_2
     506: invokevirtual #72                 // Method com/vladsch/flexmark/internal/ListBlockParser.getBlock:()Lcom/vladsch/flexmark/ast/ListBlock;
     509: aload         8
     511: getfield      #63                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.listBlock:Lcom/vladsch/flexmark/ast/ListBlock;
     514: invokevirtual #73                 // Method com/vladsch/flexmark/parser/ListOptions.startSubList:(Lcom/vladsch/flexmark/ast/ListBlock;Lcom/vladsch/flexmark/ast/ListBlock;)Z
     517: ifeq          544
     520: aload_2
     521: aload_1
     522: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     527: invokevirtual #68                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledNewListLine:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     530: aload_0
     531: aload_1
     532: invokeinterface #51,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getColumn:()I
     537: iload         6
     539: iadd
     540: invokespecial #55                 // Method continueAtColumn:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
     543: areturn
     544: aload_0
     545: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
     548: aload_2
     549: invokevirtual #72                 // Method com/vladsch/flexmark/internal/ListBlockParser.getBlock:()Lcom/vladsch/flexmark/ast/ListBlock;
     552: aload         8
     554: getfield      #63                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.listBlock:Lcom/vladsch/flexmark/ast/ListBlock;
     557: invokevirtual #74                 // Method com/vladsch/flexmark/parser/ListOptions.startNewList:(Lcom/vladsch/flexmark/ast/ListBlock;Lcom/vladsch/flexmark/ast/ListBlock;)Z
     560: ifeq          577
     563: aload_2
     564: aload_1
     565: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     570: invokevirtual #68                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledNewListLine:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     573: invokestatic  #69                 // Method com/vladsch/flexmark/parser/block/BlockContinue.none:()Lcom/vladsch/flexmark/parser/block/BlockContinue;
     576: areturn
     577: aload_2
     578: aload_1
     579: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     584: invokevirtual #75                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledNewItemLine:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     587: invokestatic  #69                 // Method com/vladsch/flexmark/parser/block/BlockContinue.none:()Lcom/vladsch/flexmark/parser/block/BlockContinue;
     590: areturn
     591: goto          3102
     594: aload_0
     595: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
     598: invokevirtual #76                 // Method com/vladsch/flexmark/parser/ListOptions.getItemIndent:()I
     601: istore        6
     603: aload         4
     605: getstatic     #77                 // Field com/vladsch/flexmark/parser/ParserEmulationProfile.FIXED_INDENT:Lcom/vladsch/flexmark/parser/ParserEmulationProfile;
     608: if_acmpne     1064
     611: aload_1
     612: invokeinterface #50,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getIndent:()I
     617: istore        7
     619: aload_1
     620: invokeinterface #51,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getColumn:()I
     625: iload         6
     627: iadd
     628: istore        8
     630: iload         7
     632: aload_0
     633: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
     636: invokevirtual #52                 // Method com/vladsch/flexmark/parser/ListOptions.getCodeIndent:()I
     639: if_icmplt     659
     642: aload_2
     643: aload_1
     644: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     649: invokevirtual #54                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledLine:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     652: aload_0
     653: iload         8
     655: invokespecial #55                 // Method continueAtColumn:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
     658: areturn
     659: aload_0
     660: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
     663: iconst_m1
     664: aload_1
     665: invokestatic  #56                 // Method com/vladsch/flexmark/internal/ListBlockParser.parseListMarker:(Lcom/vladsch/flexmark/parser/ListOptions;ILcom/vladsch/flexmark/parser/block/ParserState;)Lcom/vladsch/flexmark/internal/ListBlockParser$ListData;
     668: astore        9
     670: iload         7
     672: iload         6
     674: if_icmplt     875
     677: aload         9
     679: ifnull        837
     682: aload_1
     683: invokeinterface #57,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getActiveBlockParser:()Lcom/vladsch/flexmark/parser/block/BlockParser;
     688: astore        10
     690: aload         10
     692: invokeinterface #58,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.isParagraphParser:()Z
     697: istore        11
     699: iload         11
     701: ifeq          747
     704: aload         10
     706: invokeinterface #59,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
     711: invokevirtual #60                 // Method com/vladsch/flexmark/ast/Block.getParent:()Lcom/vladsch/flexmark/ast/Block;
     714: instanceof    #61                 // class com/vladsch/flexmark/ast/ListItem
     717: ifeq          747
     720: aload         10
     722: invokeinterface #59,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
     727: aload         10
     729: invokeinterface #59,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
     734: invokevirtual #60                 // Method com/vladsch/flexmark/ast/Block.getParent:()Lcom/vladsch/flexmark/ast/Block;
     737: invokevirtual #62                 // Method com/vladsch/flexmark/ast/Block.getFirstChild:()Lcom/vladsch/flexmark/ast/Node;
     740: if_acmpne     747
     743: iconst_1
     744: goto          748
     747: iconst_0
     748: istore        12
     750: iload         12
     752: ifeq          820
     755: aload_0
     756: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
     759: aload         9
     761: getfield      #63                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.listBlock:Lcom/vladsch/flexmark/ast/ListBlock;
     764: aload         9
     766: getfield      #64                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.isEmpty:Z
     769: iconst_1
     770: invokevirtual #65                 // Method com/vladsch/flexmark/parser/ListOptions.canInterrupt:(Lcom/vladsch/flexmark/ast/ListBlock;ZZ)Z
     773: ifeq          796
     776: aload_0
     777: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
     780: aload         9
     782: getfield      #63                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.listBlock:Lcom/vladsch/flexmark/ast/ListBlock;
     785: aload         9
     787: getfield      #64                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.isEmpty:Z
     790: invokevirtual #66                 // Method com/vladsch/flexmark/parser/ListOptions.canStartSubList:(Lcom/vladsch/flexmark/ast/ListBlock;Z)Z
     793: ifne          820
     796: aload_2
     797: aload_1
     798: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     803: invokevirtual #67                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledLineSkipActive:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     806: aload_0
     807: aload_1
     808: invokeinterface #51,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getColumn:()I
     813: iload         7
     815: iadd
     816: invokespecial #55                 // Method continueAtColumn:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
     819: areturn
     820: aload_2
     821: aload_1
     822: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     827: invokevirtual #68                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledNewListLine:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     830: aload_0
     831: iload         8
     833: invokespecial #55                 // Method continueAtColumn:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
     836: areturn
     837: aload_0
     838: getfield      #3                  // Field myIsEmpty:Z
     841: ifeq          858
     844: aload_2
     845: aload_1
     846: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     851: invokevirtual #54                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledLine:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     854: invokestatic  #69                 // Method com/vladsch/flexmark/parser/block/BlockContinue.none:()Lcom/vladsch/flexmark/parser/block/BlockContinue;
     857: areturn
     858: aload_2
     859: aload_1
     860: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     865: invokevirtual #54                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledLine:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     868: aload_0
     869: iload         8
     871: invokespecial #55                 // Method continueAtColumn:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
     874: areturn
     875: aload         9
     877: ifnull        1061
     880: aload_0
     881: getfield      #2                  // Field myHadBlankLine:Z
     884: ifne          932
     887: aload_0
     888: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
     891: aload         9
     893: getfield      #63                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.listBlock:Lcom/vladsch/flexmark/ast/ListBlock;
     896: aload         9
     898: getfield      #64                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.isEmpty:Z
     901: iconst_1
     902: invokevirtual #65                 // Method com/vladsch/flexmark/parser/ListOptions.canInterrupt:(Lcom/vladsch/flexmark/ast/ListBlock;ZZ)Z
     905: ifne          932
     908: aload_2
     909: aload_1
     910: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     915: invokevirtual #54                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledLine:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     918: aload_0
     919: aload_1
     920: invokeinterface #51,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getColumn:()I
     925: iload         7
     927: iadd
     928: invokespecial #55                 // Method continueAtColumn:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
     931: areturn
     932: aload_0
     933: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
     936: invokevirtual #70                 // Method com/vladsch/flexmark/parser/ListOptions.isItemTypeMismatchToNewList:()Z
     939: ifeq          963
     942: aload_0
     943: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
     946: invokevirtual #71                 // Method com/vladsch/flexmark/parser/ListOptions.isItemTypeMismatchToSubList:()Z
     949: ifeq          963
     952: aload_0
     953: getfield      #2                  // Field myHadBlankLine:Z
     956: ifeq          963
     959: iconst_1
     960: goto          964
     963: iconst_0
     964: istore        10
     966: iload         10
     968: ifne          1014
     971: aload_0
     972: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
     975: aload_2
     976: invokevirtual #72                 // Method com/vladsch/flexmark/internal/ListBlockParser.getBlock:()Lcom/vladsch/flexmark/ast/ListBlock;
     979: aload         9
     981: getfield      #63                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.listBlock:Lcom/vladsch/flexmark/ast/ListBlock;
     984: invokevirtual #73                 // Method com/vladsch/flexmark/parser/ListOptions.startSubList:(Lcom/vladsch/flexmark/ast/ListBlock;Lcom/vladsch/flexmark/ast/ListBlock;)Z
     987: ifeq          1014
     990: aload_2
     991: aload_1
     992: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     997: invokevirtual #68                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledNewListLine:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    1000: aload_0
    1001: aload_1
    1002: invokeinterface #51,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getColumn:()I
    1007: iload         7
    1009: iadd
    1010: invokespecial #55                 // Method continueAtColumn:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
    1013: areturn
    1014: aload_0
    1015: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
    1018: aload_2
    1019: invokevirtual #72                 // Method com/vladsch/flexmark/internal/ListBlockParser.getBlock:()Lcom/vladsch/flexmark/ast/ListBlock;
    1022: aload         9
    1024: getfield      #63                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.listBlock:Lcom/vladsch/flexmark/ast/ListBlock;
    1027: invokevirtual #74                 // Method com/vladsch/flexmark/parser/ListOptions.startNewList:(Lcom/vladsch/flexmark/ast/ListBlock;Lcom/vladsch/flexmark/ast/ListBlock;)Z
    1030: ifeq          1047
    1033: aload_2
    1034: aload_1
    1035: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1040: invokevirtual #68                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledNewListLine:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    1043: invokestatic  #69                 // Method com/vladsch/flexmark/parser/block/BlockContinue.none:()Lcom/vladsch/flexmark/parser/block/BlockContinue;
    1046: areturn
    1047: aload_2
    1048: aload_1
    1049: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1054: invokevirtual #75                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledNewItemLine:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    1057: invokestatic  #69                 // Method com/vladsch/flexmark/parser/block/BlockContinue.none:()Lcom/vladsch/flexmark/parser/block/BlockContinue;
    1060: areturn
    1061: goto          3102
    1064: aload_2
    1065: invokevirtual #78                 // Method com/vladsch/flexmark/internal/ListBlockParser.getListData:()Lcom/vladsch/flexmark/internal/ListBlockParser$ListData;
    1068: getfield      #22                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.markerIndent:I
    1071: istore        7
    1073: aload_2
    1074: invokevirtual #78                 // Method com/vladsch/flexmark/internal/ListBlockParser.getListData:()Lcom/vladsch/flexmark/internal/ListBlockParser$ListData;
    1077: getfield      #79                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.markerIndex:I
    1080: istore        8
    1082: aload         4
    1084: getstatic     #80                 // Field com/vladsch/flexmark/parser/ParserEmulationProfile.KRAMDOWN:Lcom/vladsch/flexmark/parser/ParserEmulationProfile;
    1087: if_acmpne     1539
    1090: aload_1
    1091: invokeinterface #50,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getIndent:()I
    1096: istore        9
    1098: iload         7
    1100: istore        10
    1102: aload_1
    1103: invokeinterface #51,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getColumn:()I
    1108: iload         5
    1110: iadd
    1111: istore        11
    1113: aload_0
    1114: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
    1117: iconst_m1
    1118: aload_1
    1119: invokestatic  #56                 // Method com/vladsch/flexmark/internal/ListBlockParser.parseListMarker:(Lcom/vladsch/flexmark/parser/ListOptions;ILcom/vladsch/flexmark/parser/block/ParserState;)Lcom/vladsch/flexmark/internal/ListBlockParser$ListData;
    1122: astore        12
    1124: iload         9
    1126: iload         5
    1128: if_icmplt     1322
    1131: aload         12
    1133: ifnull        1284
    1136: aload_1
    1137: invokeinterface #57,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getActiveBlockParser:()Lcom/vladsch/flexmark/parser/block/BlockParser;
    1142: astore        13
    1144: aload         13
    1146: invokeinterface #58,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.isParagraphParser:()Z
    1151: istore        14
    1153: iload         14
    1155: ifeq          1201
    1158: aload         13
    1160: invokeinterface #59,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
    1165: invokevirtual #60                 // Method com/vladsch/flexmark/ast/Block.getParent:()Lcom/vladsch/flexmark/ast/Block;
    1168: instanceof    #61                 // class com/vladsch/flexmark/ast/ListItem
    1171: ifeq          1201
    1174: aload         13
    1176: invokeinterface #59,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
    1181: aload         13
    1183: invokeinterface #59,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
    1188: invokevirtual #60                 // Method com/vladsch/flexmark/ast/Block.getParent:()Lcom/vladsch/flexmark/ast/Block;
    1191: invokevirtual #62                 // Method com/vladsch/flexmark/ast/Block.getFirstChild:()Lcom/vladsch/flexmark/ast/Node;
    1194: if_acmpne     1201
    1197: iconst_1
    1198: goto          1202
    1201: iconst_0
    1202: istore        15
    1204: iload         15
    1206: ifeq          1267
    1209: aload_0
    1210: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
    1213: aload         12
    1215: getfield      #63                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.listBlock:Lcom/vladsch/flexmark/ast/ListBlock;
    1218: aload         12
    1220: getfield      #64                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.isEmpty:Z
    1223: iconst_1
    1224: invokevirtual #65                 // Method com/vladsch/flexmark/parser/ListOptions.canInterrupt:(Lcom/vladsch/flexmark/ast/ListBlock;ZZ)Z
    1227: ifeq          1250
    1230: aload_0
    1231: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
    1234: aload         12
    1236: getfield      #63                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.listBlock:Lcom/vladsch/flexmark/ast/ListBlock;
    1239: aload         12
    1241: getfield      #64                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.isEmpty:Z
    1244: invokevirtual #66                 // Method com/vladsch/flexmark/parser/ListOptions.canStartSubList:(Lcom/vladsch/flexmark/ast/ListBlock;Z)Z
    1247: ifne          1267
    1250: aload_2
    1251: aload_1
    1252: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1257: invokevirtual #67                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledLineSkipActive:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    1260: aload_0
    1261: iload         11
    1263: invokespecial #55                 // Method continueAtColumn:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
    1266: areturn
    1267: aload_2
    1268: aload_1
    1269: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1274: invokevirtual #68                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledNewListLine:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    1277: aload_0
    1278: iload         11
    1280: invokespecial #55                 // Method continueAtColumn:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
    1283: areturn
    1284: aload_0
    1285: getfield      #3                  // Field myIsEmpty:Z
    1288: ifeq          1305
    1291: aload_2
    1292: aload_1
    1293: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1298: invokevirtual #54                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledLine:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    1301: invokestatic  #69                 // Method com/vladsch/flexmark/parser/block/BlockContinue.none:()Lcom/vladsch/flexmark/parser/block/BlockContinue;
    1304: areturn
    1305: aload_2
    1306: aload_1
    1307: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1312: invokevirtual #54                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledLine:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    1315: aload_0
    1316: iload         11
    1318: invokespecial #55                 // Method continueAtColumn:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
    1321: areturn
    1322: iload         9
    1324: iload         10
    1326: iload         6
    1328: iadd
    1329: if_icmplt     1395
    1332: aload_0
    1333: getfield      #2                  // Field myHadBlankLine:Z
    1336: ifeq          1371
    1339: aload_0
    1340: getfield      #12                 // Field myBlock:Lcom/vladsch/flexmark/ast/ListItem;
    1343: invokevirtual #81                 // Method com/vladsch/flexmark/ast/ListItem.isHadBlankAfterItemParagraph:()Z
    1346: ifeq          1357
    1349: aload_0
    1350: getfield      #12                 // Field myBlock:Lcom/vladsch/flexmark/ast/ListItem;
    1353: iconst_1
    1354: invokevirtual #82                 // Method com/vladsch/flexmark/ast/ListItem.setLoose:(Z)V
    1357: aload_2
    1358: aload_1
    1359: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1364: invokevirtual #67                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledLineSkipActive:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    1367: invokestatic  #69                 // Method com/vladsch/flexmark/parser/block/BlockContinue.none:()Lcom/vladsch/flexmark/parser/block/BlockContinue;
    1370: areturn
    1371: aload_2
    1372: aload_1
    1373: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1378: invokevirtual #67                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledLineSkipActive:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    1381: aload_0
    1382: aload_1
    1383: invokeinterface #51,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getColumn:()I
    1388: iload         9
    1390: iadd
    1391: invokespecial #55                 // Method continueAtColumn:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
    1394: areturn
    1395: aload         12
    1397: ifnull        1536
    1400: iload         9
    1402: iload         10
    1404: if_icmplt     1536
    1407: aload_0
    1408: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
    1411: invokevirtual #70                 // Method com/vladsch/flexmark/parser/ListOptions.isItemTypeMismatchToNewList:()Z
    1414: ifeq          1438
    1417: aload_0
    1418: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
    1421: invokevirtual #71                 // Method com/vladsch/flexmark/parser/ListOptions.isItemTypeMismatchToSubList:()Z
    1424: ifeq          1438
    1427: aload_0
    1428: getfield      #2                  // Field myHadBlankLine:Z
    1431: ifeq          1438
    1434: iconst_1
    1435: goto          1439
    1438: iconst_0
    1439: istore        13
    1441: iload         13
    1443: ifne          1489
    1446: aload_0
    1447: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
    1450: aload_2
    1451: invokevirtual #72                 // Method com/vladsch/flexmark/internal/ListBlockParser.getBlock:()Lcom/vladsch/flexmark/ast/ListBlock;
    1454: aload         12
    1456: getfield      #63                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.listBlock:Lcom/vladsch/flexmark/ast/ListBlock;
    1459: invokevirtual #73                 // Method com/vladsch/flexmark/parser/ListOptions.startSubList:(Lcom/vladsch/flexmark/ast/ListBlock;Lcom/vladsch/flexmark/ast/ListBlock;)Z
    1462: ifeq          1489
    1465: aload_2
    1466: aload_1
    1467: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1472: invokevirtual #68                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledNewListLine:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    1475: aload_0
    1476: aload_1
    1477: invokeinterface #51,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getColumn:()I
    1482: iload         9
    1484: iadd
    1485: invokespecial #55                 // Method continueAtColumn:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
    1488: areturn
    1489: aload_0
    1490: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
    1493: aload_2
    1494: invokevirtual #72                 // Method com/vladsch/flexmark/internal/ListBlockParser.getBlock:()Lcom/vladsch/flexmark/ast/ListBlock;
    1497: aload         12
    1499: getfield      #63                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.listBlock:Lcom/vladsch/flexmark/ast/ListBlock;
    1502: invokevirtual #74                 // Method com/vladsch/flexmark/parser/ListOptions.startNewList:(Lcom/vladsch/flexmark/ast/ListBlock;Lcom/vladsch/flexmark/ast/ListBlock;)Z
    1505: ifeq          1522
    1508: aload_2
    1509: aload_1
    1510: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1515: invokevirtual #68                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledNewListLine:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    1518: invokestatic  #69                 // Method com/vladsch/flexmark/parser/block/BlockContinue.none:()Lcom/vladsch/flexmark/parser/block/BlockContinue;
    1521: areturn
    1522: aload_2
    1523: aload_1
    1524: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1529: invokevirtual #75                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledNewItemLine:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    1532: invokestatic  #69                 // Method com/vladsch/flexmark/parser/block/BlockContinue.none:()Lcom/vladsch/flexmark/parser/block/BlockContinue;
    1535: areturn
    1536: goto          3102
    1539: aload_3
    1540: getstatic     #27                 // Field com/vladsch/flexmark/parser/ParserEmulationProfile.GITHUB_DOC:Lcom/vladsch/flexmark/parser/ParserEmulationProfile;
    1543: if_acmpne     2367
    1546: aload_1
    1547: invokeinterface #50,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getIndent:()I
    1552: istore        9
    1554: aload_1
    1555: invokeinterface #83,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getIndex:()I
    1560: iload         9
    1562: iadd
    1563: istore        10
    1565: iload         7
    1567: istore        11
    1569: iload         7
    1571: istore        12
    1573: iload         9
    1575: iconst_2
    1576: newarray       int
    1578: dup
    1579: iconst_0
    1580: iload         5
    1582: iastore
    1583: dup
    1584: iconst_1
    1585: iload         11
    1587: iconst_4
    1588: iadd
    1589: iastore
    1590: invokestatic  #84                 // Method com/vladsch/flexmark/util/Utils.maxLimit:(I[I)I
    1593: istore        13
    1595: iload         9
    1597: aload_0
    1598: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
    1601: invokevirtual #52                 // Method com/vladsch/flexmark/parser/ListOptions.getCodeIndent:()I
    1604: if_icmplt     1642
    1607: aload_2
    1608: aload_1
    1609: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1614: invokevirtual #54                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledLine:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    1617: aload_0
    1618: aload_1
    1619: invokeinterface #51,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getColumn:()I
    1624: iload         5
    1626: iconst_1
    1627: newarray       int
    1629: dup
    1630: iconst_0
    1631: iload         6
    1633: iastore
    1634: invokestatic  #84                 // Method com/vladsch/flexmark/util/Utils.maxLimit:(I[I)I
    1637: iadd
    1638: invokespecial #55                 // Method continueAtColumn:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
    1641: areturn
    1642: aload_0
    1643: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
    1646: iconst_m1
    1647: aload_1
    1648: invokestatic  #56                 // Method com/vladsch/flexmark/internal/ListBlockParser.parseListMarker:(Lcom/vladsch/flexmark/parser/ListOptions;ILcom/vladsch/flexmark/parser/block/ParserState;)Lcom/vladsch/flexmark/internal/ListBlockParser$ListData;
    1651: astore        14
    1653: iload         9
    1655: iload         6
    1657: if_icmple     1851
    1660: aload         14
    1662: ifnull        1827
    1665: aload_1
    1666: invokeinterface #57,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getActiveBlockParser:()Lcom/vladsch/flexmark/parser/block/BlockParser;
    1671: astore        15
    1673: aload         15
    1675: invokeinterface #58,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.isParagraphParser:()Z
    1680: istore        16
    1682: iload         16
    1684: ifeq          1730
    1687: aload         15
    1689: invokeinterface #59,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
    1694: invokevirtual #60                 // Method com/vladsch/flexmark/ast/Block.getParent:()Lcom/vladsch/flexmark/ast/Block;
    1697: instanceof    #61                 // class com/vladsch/flexmark/ast/ListItem
    1700: ifeq          1730
    1703: aload         15
    1705: invokeinterface #59,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
    1710: aload         15
    1712: invokeinterface #59,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
    1717: invokevirtual #60                 // Method com/vladsch/flexmark/ast/Block.getParent:()Lcom/vladsch/flexmark/ast/Block;
    1720: invokevirtual #62                 // Method com/vladsch/flexmark/ast/Block.getFirstChild:()Lcom/vladsch/flexmark/ast/Node;
    1723: if_acmpne     1730
    1726: iconst_1
    1727: goto          1731
    1730: iconst_0
    1731: istore        17
    1733: iload         17
    1735: ifeq          1803
    1738: aload_0
    1739: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
    1742: aload         14
    1744: getfield      #63                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.listBlock:Lcom/vladsch/flexmark/ast/ListBlock;
    1747: aload         14
    1749: getfield      #64                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.isEmpty:Z
    1752: iconst_1
    1753: invokevirtual #65                 // Method com/vladsch/flexmark/parser/ListOptions.canInterrupt:(Lcom/vladsch/flexmark/ast/ListBlock;ZZ)Z
    1756: ifeq          1779
    1759: aload_0
    1760: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
    1763: aload         14
    1765: getfield      #63                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.listBlock:Lcom/vladsch/flexmark/ast/ListBlock;
    1768: aload         14
    1770: getfield      #64                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.isEmpty:Z
    1773: invokevirtual #66                 // Method com/vladsch/flexmark/parser/ListOptions.canStartSubList:(Lcom/vladsch/flexmark/ast/ListBlock;Z)Z
    1776: ifne          1803
    1779: aload_2
    1780: aload_1
    1781: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1786: invokevirtual #67                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledLineSkipActive:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    1789: aload_0
    1790: aload_1
    1791: invokeinterface #51,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getColumn:()I
    1796: iload         9
    1798: iadd
    1799: invokespecial #55                 // Method continueAtColumn:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
    1802: areturn
    1803: aload_2
    1804: aload_1
    1805: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1810: invokevirtual #68                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledNewListLine:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    1813: aload_0
    1814: aload_1
    1815: invokeinterface #51,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getColumn:()I
    1820: iload         13
    1822: iadd
    1823: invokespecial #55                 // Method continueAtColumn:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
    1826: areturn
    1827: aload_2
    1828: aload_1
    1829: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1834: invokevirtual #54                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledLine:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    1837: aload_0
    1838: aload_1
    1839: invokeinterface #51,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getColumn:()I
    1844: iload         6
    1846: iadd
    1847: invokespecial #55                 // Method continueAtColumn:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
    1850: areturn
    1851: iload         9
    1853: iload         11
    1855: if_icmple     2049
    1858: aload         14
    1860: ifnull        2025
    1863: aload_1
    1864: invokeinterface #57,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getActiveBlockParser:()Lcom/vladsch/flexmark/parser/block/BlockParser;
    1869: astore        15
    1871: aload         15
    1873: invokeinterface #58,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.isParagraphParser:()Z
    1878: istore        16
    1880: iload         16
    1882: ifeq          1928
    1885: aload         15
    1887: invokeinterface #59,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
    1892: invokevirtual #60                 // Method com/vladsch/flexmark/ast/Block.getParent:()Lcom/vladsch/flexmark/ast/Block;
    1895: instanceof    #61                 // class com/vladsch/flexmark/ast/ListItem
    1898: ifeq          1928
    1901: aload         15
    1903: invokeinterface #59,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
    1908: aload         15
    1910: invokeinterface #59,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
    1915: invokevirtual #60                 // Method com/vladsch/flexmark/ast/Block.getParent:()Lcom/vladsch/flexmark/ast/Block;
    1918: invokevirtual #62                 // Method com/vladsch/flexmark/ast/Block.getFirstChild:()Lcom/vladsch/flexmark/ast/Node;
    1921: if_acmpne     1928
    1924: iconst_1
    1925: goto          1929
    1928: iconst_0
    1929: istore        17
    1931: iload         17
    1933: ifeq          2001
    1936: aload_0
    1937: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
    1940: aload         14
    1942: getfield      #63                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.listBlock:Lcom/vladsch/flexmark/ast/ListBlock;
    1945: aload         14
    1947: getfield      #64                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.isEmpty:Z
    1950: iconst_1
    1951: invokevirtual #65                 // Method com/vladsch/flexmark/parser/ListOptions.canInterrupt:(Lcom/vladsch/flexmark/ast/ListBlock;ZZ)Z
    1954: ifeq          1977
    1957: aload_0
    1958: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
    1961: aload         14
    1963: getfield      #63                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.listBlock:Lcom/vladsch/flexmark/ast/ListBlock;
    1966: aload         14
    1968: getfield      #64                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.isEmpty:Z
    1971: invokevirtual #66                 // Method com/vladsch/flexmark/parser/ListOptions.canStartSubList:(Lcom/vladsch/flexmark/ast/ListBlock;Z)Z
    1974: ifne          2001
    1977: aload_2
    1978: aload_1
    1979: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1984: invokevirtual #67                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledLineSkipActive:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    1987: aload_0
    1988: aload_1
    1989: invokeinterface #51,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getColumn:()I
    1994: iload         9
    1996: iadd
    1997: invokespecial #55                 // Method continueAtColumn:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
    2000: areturn
    2001: aload_2
    2002: aload_1
    2003: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    2008: invokevirtual #68                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledNewListLine:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    2011: aload_0
    2012: aload_1
    2013: invokeinterface #51,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getColumn:()I
    2018: iload         13
    2020: iadd
    2021: invokespecial #55                 // Method continueAtColumn:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
    2024: areturn
    2025: aload_2
    2026: aload_1
    2027: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    2032: invokevirtual #54                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledLine:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    2035: aload_0
    2036: aload_1
    2037: invokeinterface #51,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getColumn:()I
    2042: iload         13
    2044: iadd
    2045: invokespecial #55                 // Method continueAtColumn:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
    2048: areturn
    2049: aload         14
    2051: ifnull        2321
    2054: aload_0
    2055: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
    2058: invokevirtual #70                 // Method com/vladsch/flexmark/parser/ListOptions.isItemTypeMismatchToNewList:()Z
    2061: ifeq          2085
    2064: aload_0
    2065: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
    2068: invokevirtual #71                 // Method com/vladsch/flexmark/parser/ListOptions.isItemTypeMismatchToSubList:()Z
    2071: ifeq          2085
    2074: aload_0
    2075: getfield      #2                  // Field myHadBlankLine:Z
    2078: ifeq          2085
    2081: iconst_1
    2082: goto          2086
    2085: iconst_0
    2086: istore        15
    2088: iload         15
    2090: ifne          2136
    2093: aload_0
    2094: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
    2097: aload_2
    2098: invokevirtual #72                 // Method com/vladsch/flexmark/internal/ListBlockParser.getBlock:()Lcom/vladsch/flexmark/ast/ListBlock;
    2101: aload         14
    2103: getfield      #63                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.listBlock:Lcom/vladsch/flexmark/ast/ListBlock;
    2106: invokevirtual #73                 // Method com/vladsch/flexmark/parser/ListOptions.startSubList:(Lcom/vladsch/flexmark/ast/ListBlock;Lcom/vladsch/flexmark/ast/ListBlock;)Z
    2109: ifeq          2136
    2112: aload_2
    2113: aload_1
    2114: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    2119: invokevirtual #68                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledNewListLine:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    2122: aload_0
    2123: aload_1
    2124: invokeinterface #51,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getColumn:()I
    2129: iload         13
    2131: iadd
    2132: invokespecial #55                 // Method continueAtColumn:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
    2135: areturn
    2136: aload_0
    2137: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
    2140: aload_2
    2141: invokevirtual #72                 // Method com/vladsch/flexmark/internal/ListBlockParser.getBlock:()Lcom/vladsch/flexmark/ast/ListBlock;
    2144: aload         14
    2146: getfield      #63                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.listBlock:Lcom/vladsch/flexmark/ast/ListBlock;
    2149: invokevirtual #74                 // Method com/vladsch/flexmark/parser/ListOptions.startNewList:(Lcom/vladsch/flexmark/ast/ListBlock;Lcom/vladsch/flexmark/ast/ListBlock;)Z
    2152: ifeq          2169
    2155: aload_2
    2156: aload_1
    2157: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    2162: invokevirtual #68                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledNewListLine:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    2165: invokestatic  #69                 // Method com/vladsch/flexmark/parser/block/BlockContinue.none:()Lcom/vladsch/flexmark/parser/block/BlockContinue;
    2168: areturn
    2169: aload_1
    2170: invokeinterface #57,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getActiveBlockParser:()Lcom/vladsch/flexmark/parser/block/BlockParser;
    2175: astore        16
    2177: aload         16
    2179: invokeinterface #58,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.isParagraphParser:()Z
    2184: istore        17
    2186: iload         17
    2188: ifeq          2234
    2191: aload         16
    2193: invokeinterface #59,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
    2198: invokevirtual #60                 // Method com/vladsch/flexmark/ast/Block.getParent:()Lcom/vladsch/flexmark/ast/Block;
    2201: instanceof    #61                 // class com/vladsch/flexmark/ast/ListItem
    2204: ifeq          2234
    2207: aload         16
    2209: invokeinterface #59,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
    2214: aload         16
    2216: invokeinterface #59,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
    2221: invokevirtual #60                 // Method com/vladsch/flexmark/ast/Block.getParent:()Lcom/vladsch/flexmark/ast/Block;
    2224: invokevirtual #62                 // Method com/vladsch/flexmark/ast/Block.getFirstChild:()Lcom/vladsch/flexmark/ast/Node;
    2227: if_acmpne     2234
    2230: iconst_1
    2231: goto          2235
    2234: iconst_0
    2235: istore        18
    2237: iload         18
    2239: ifeq          2307
    2242: aload_0
    2243: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
    2246: aload         14
    2248: getfield      #63                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.listBlock:Lcom/vladsch/flexmark/ast/ListBlock;
    2251: aload         14
    2253: getfield      #64                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.isEmpty:Z
    2256: iconst_1
    2257: invokevirtual #65                 // Method com/vladsch/flexmark/parser/ListOptions.canInterrupt:(Lcom/vladsch/flexmark/ast/ListBlock;ZZ)Z
    2260: ifeq          2283
    2263: aload_0
    2264: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
    2267: aload         14
    2269: getfield      #63                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.listBlock:Lcom/vladsch/flexmark/ast/ListBlock;
    2272: aload         14
    2274: getfield      #64                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.isEmpty:Z
    2277: invokevirtual #66                 // Method com/vladsch/flexmark/parser/ListOptions.canStartSubList:(Lcom/vladsch/flexmark/ast/ListBlock;Z)Z
    2280: ifne          2307
    2283: aload_2
    2284: aload_1
    2285: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    2290: invokevirtual #67                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledLineSkipActive:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    2293: aload_0
    2294: aload_1
    2295: invokeinterface #51,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getColumn:()I
    2300: iload         9
    2302: iadd
    2303: invokespecial #55                 // Method continueAtColumn:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
    2306: areturn
    2307: aload_2
    2308: aload_1
    2309: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    2314: invokevirtual #75                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledNewItemLine:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    2317: invokestatic  #69                 // Method com/vladsch/flexmark/parser/block/BlockContinue.none:()Lcom/vladsch/flexmark/parser/block/BlockContinue;
    2320: areturn
    2321: aload_0
    2322: getfield      #2                  // Field myHadBlankLine:Z
    2325: ifeq          2340
    2328: aload_1
    2329: invokeinterface #57,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getActiveBlockParser:()Lcom/vladsch/flexmark/parser/block/BlockParser;
    2334: instanceof    #28                 // class com/vladsch/flexmark/internal/FencedCodeBlockParser
    2337: ifeq          2364
    2340: aload_2
    2341: aload_1
    2342: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    2347: invokevirtual #54                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledLine:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    2350: aload_0
    2351: aload_1
    2352: invokeinterface #51,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getColumn:()I
    2357: iload         9
    2359: iadd
    2360: invokespecial #55                 // Method continueAtColumn:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
    2363: areturn
    2364: goto          3102
    2367: aload         4
    2369: getstatic     #85                 // Field com/vladsch/flexmark/parser/ParserEmulationProfile.MARKDOWN:Lcom/vladsch/flexmark/parser/ParserEmulationProfile;
    2372: if_acmpne     3102
    2375: aload_1
    2376: invokeinterface #50,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getIndent:()I
    2381: istore        9
    2383: iload         9
    2385: aload_0
    2386: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
    2389: invokevirtual #52                 // Method com/vladsch/flexmark/parser/ListOptions.getCodeIndent:()I
    2392: if_icmplt     2419
    2395: aload_2
    2396: aload_1
    2397: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    2402: invokevirtual #54                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledLine:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    2405: aload_0
    2406: aload_1
    2407: invokeinterface #51,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getColumn:()I
    2412: iload         6
    2414: iadd
    2415: invokespecial #55                 // Method continueAtColumn:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
    2418: areturn
    2419: aload_0
    2420: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
    2423: iconst_m1
    2424: aload_1
    2425: invokestatic  #56                 // Method com/vladsch/flexmark/internal/ListBlockParser.parseListMarker:(Lcom/vladsch/flexmark/parser/ListOptions;ILcom/vladsch/flexmark/parser/block/ParserState;)Lcom/vladsch/flexmark/internal/ListBlockParser$ListData;
    2428: astore        10
    2430: iload         9
    2432: iload         6
    2434: if_icmple     2628
    2437: aload         10
    2439: ifnull        2604
    2442: aload_1
    2443: invokeinterface #57,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getActiveBlockParser:()Lcom/vladsch/flexmark/parser/block/BlockParser;
    2448: astore        11
    2450: aload         11
    2452: invokeinterface #58,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.isParagraphParser:()Z
    2457: istore        12
    2459: iload         12
    2461: ifeq          2507
    2464: aload         11
    2466: invokeinterface #59,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
    2471: invokevirtual #60                 // Method com/vladsch/flexmark/ast/Block.getParent:()Lcom/vladsch/flexmark/ast/Block;
    2474: instanceof    #61                 // class com/vladsch/flexmark/ast/ListItem
    2477: ifeq          2507
    2480: aload         11
    2482: invokeinterface #59,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
    2487: aload         11
    2489: invokeinterface #59,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
    2494: invokevirtual #60                 // Method com/vladsch/flexmark/ast/Block.getParent:()Lcom/vladsch/flexmark/ast/Block;
    2497: invokevirtual #62                 // Method com/vladsch/flexmark/ast/Block.getFirstChild:()Lcom/vladsch/flexmark/ast/Node;
    2500: if_acmpne     2507
    2503: iconst_1
    2504: goto          2508
    2507: iconst_0
    2508: istore        13
    2510: iload         13
    2512: ifeq          2580
    2515: aload_0
    2516: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
    2519: aload         10
    2521: getfield      #63                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.listBlock:Lcom/vladsch/flexmark/ast/ListBlock;
    2524: aload         10
    2526: getfield      #64                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.isEmpty:Z
    2529: iconst_1
    2530: invokevirtual #65                 // Method com/vladsch/flexmark/parser/ListOptions.canInterrupt:(Lcom/vladsch/flexmark/ast/ListBlock;ZZ)Z
    2533: ifeq          2556
    2536: aload_0
    2537: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
    2540: aload         10
    2542: getfield      #63                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.listBlock:Lcom/vladsch/flexmark/ast/ListBlock;
    2545: aload         10
    2547: getfield      #64                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.isEmpty:Z
    2550: invokevirtual #66                 // Method com/vladsch/flexmark/parser/ListOptions.canStartSubList:(Lcom/vladsch/flexmark/ast/ListBlock;Z)Z
    2553: ifne          2580
    2556: aload_2
    2557: aload_1
    2558: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    2563: invokevirtual #67                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledLineSkipActive:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    2566: aload_0
    2567: aload_1
    2568: invokeinterface #51,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getColumn:()I
    2573: iload         9
    2575: iadd
    2576: invokespecial #55                 // Method continueAtColumn:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
    2579: areturn
    2580: aload_2
    2581: aload_1
    2582: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    2587: invokevirtual #68                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledNewListLine:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    2590: aload_0
    2591: aload_1
    2592: invokeinterface #51,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getColumn:()I
    2597: iload         6
    2599: iadd
    2600: invokespecial #55                 // Method continueAtColumn:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
    2603: areturn
    2604: aload_2
    2605: aload_1
    2606: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    2611: invokevirtual #54                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledLine:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    2614: aload_0
    2615: aload_1
    2616: invokeinterface #51,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getColumn:()I
    2621: iload         6
    2623: iadd
    2624: invokespecial #55                 // Method continueAtColumn:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
    2627: areturn
    2628: iload         7
    2630: istore        11
    2632: iload         9
    2634: iload         11
    2636: if_icmple     2830
    2639: aload         10
    2641: ifnull        2806
    2644: aload_1
    2645: invokeinterface #57,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getActiveBlockParser:()Lcom/vladsch/flexmark/parser/block/BlockParser;
    2650: astore        12
    2652: aload         12
    2654: invokeinterface #58,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.isParagraphParser:()Z
    2659: istore        13
    2661: iload         13
    2663: ifeq          2709
    2666: aload         12
    2668: invokeinterface #59,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
    2673: invokevirtual #60                 // Method com/vladsch/flexmark/ast/Block.getParent:()Lcom/vladsch/flexmark/ast/Block;
    2676: instanceof    #61                 // class com/vladsch/flexmark/ast/ListItem
    2679: ifeq          2709
    2682: aload         12
    2684: invokeinterface #59,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
    2689: aload         12
    2691: invokeinterface #59,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
    2696: invokevirtual #60                 // Method com/vladsch/flexmark/ast/Block.getParent:()Lcom/vladsch/flexmark/ast/Block;
    2699: invokevirtual #62                 // Method com/vladsch/flexmark/ast/Block.getFirstChild:()Lcom/vladsch/flexmark/ast/Node;
    2702: if_acmpne     2709
    2705: iconst_1
    2706: goto          2710
    2709: iconst_0
    2710: istore        14
    2712: iload         14
    2714: ifeq          2782
    2717: aload_0
    2718: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
    2721: aload         10
    2723: getfield      #63                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.listBlock:Lcom/vladsch/flexmark/ast/ListBlock;
    2726: aload         10
    2728: getfield      #64                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.isEmpty:Z
    2731: iconst_1
    2732: invokevirtual #65                 // Method com/vladsch/flexmark/parser/ListOptions.canInterrupt:(Lcom/vladsch/flexmark/ast/ListBlock;ZZ)Z
    2735: ifeq          2758
    2738: aload_0
    2739: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
    2742: aload         10
    2744: getfield      #63                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.listBlock:Lcom/vladsch/flexmark/ast/ListBlock;
    2747: aload         10
    2749: getfield      #64                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.isEmpty:Z
    2752: invokevirtual #66                 // Method com/vladsch/flexmark/parser/ListOptions.canStartSubList:(Lcom/vladsch/flexmark/ast/ListBlock;Z)Z
    2755: ifne          2782
    2758: aload_2
    2759: aload_1
    2760: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    2765: invokevirtual #67                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledLineSkipActive:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    2768: aload_0
    2769: aload_1
    2770: invokeinterface #51,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getColumn:()I
    2775: iload         9
    2777: iadd
    2778: invokespecial #55                 // Method continueAtColumn:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
    2781: areturn
    2782: aload_2
    2783: aload_1
    2784: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    2789: invokevirtual #68                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledNewListLine:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    2792: aload_0
    2793: aload_1
    2794: invokeinterface #51,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getColumn:()I
    2799: iload         9
    2801: iadd
    2802: invokespecial #55                 // Method continueAtColumn:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
    2805: areturn
    2806: aload_2
    2807: aload_1
    2808: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    2813: invokevirtual #54                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledLine:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    2816: aload_0
    2817: aload_1
    2818: invokeinterface #51,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getColumn:()I
    2823: iload         9
    2825: iadd
    2826: invokespecial #55                 // Method continueAtColumn:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
    2829: areturn
    2830: aload         10
    2832: ifnull        3102
    2835: aload_0
    2836: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
    2839: invokevirtual #70                 // Method com/vladsch/flexmark/parser/ListOptions.isItemTypeMismatchToNewList:()Z
    2842: ifeq          2866
    2845: aload_0
    2846: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
    2849: invokevirtual #71                 // Method com/vladsch/flexmark/parser/ListOptions.isItemTypeMismatchToSubList:()Z
    2852: ifeq          2866
    2855: aload_0
    2856: getfield      #2                  // Field myHadBlankLine:Z
    2859: ifeq          2866
    2862: iconst_1
    2863: goto          2867
    2866: iconst_0
    2867: istore        12
    2869: iload         12
    2871: ifne          2917
    2874: aload_0
    2875: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
    2878: aload_2
    2879: invokevirtual #72                 // Method com/vladsch/flexmark/internal/ListBlockParser.getBlock:()Lcom/vladsch/flexmark/ast/ListBlock;
    2882: aload         10
    2884: getfield      #63                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.listBlock:Lcom/vladsch/flexmark/ast/ListBlock;
    2887: invokevirtual #73                 // Method com/vladsch/flexmark/parser/ListOptions.startSubList:(Lcom/vladsch/flexmark/ast/ListBlock;Lcom/vladsch/flexmark/ast/ListBlock;)Z
    2890: ifeq          2917
    2893: aload_2
    2894: aload_1
    2895: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    2900: invokevirtual #68                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledNewListLine:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    2903: aload_0
    2904: aload_1
    2905: invokeinterface #51,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getColumn:()I
    2910: iload         9
    2912: iadd
    2913: invokespecial #55                 // Method continueAtColumn:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
    2916: areturn
    2917: aload_0
    2918: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
    2921: aload_2
    2922: invokevirtual #72                 // Method com/vladsch/flexmark/internal/ListBlockParser.getBlock:()Lcom/vladsch/flexmark/ast/ListBlock;
    2925: aload         10
    2927: getfield      #63                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.listBlock:Lcom/vladsch/flexmark/ast/ListBlock;
    2930: invokevirtual #74                 // Method com/vladsch/flexmark/parser/ListOptions.startNewList:(Lcom/vladsch/flexmark/ast/ListBlock;Lcom/vladsch/flexmark/ast/ListBlock;)Z
    2933: ifeq          2950
    2936: aload_2
    2937: aload_1
    2938: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    2943: invokevirtual #68                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledNewListLine:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    2946: invokestatic  #69                 // Method com/vladsch/flexmark/parser/block/BlockContinue.none:()Lcom/vladsch/flexmark/parser/block/BlockContinue;
    2949: areturn
    2950: aload_1
    2951: invokeinterface #57,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getActiveBlockParser:()Lcom/vladsch/flexmark/parser/block/BlockParser;
    2956: astore        13
    2958: aload         13
    2960: invokeinterface #58,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.isParagraphParser:()Z
    2965: istore        14
    2967: iload         14
    2969: ifeq          3015
    2972: aload         13
    2974: invokeinterface #59,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
    2979: invokevirtual #60                 // Method com/vladsch/flexmark/ast/Block.getParent:()Lcom/vladsch/flexmark/ast/Block;
    2982: instanceof    #61                 // class com/vladsch/flexmark/ast/ListItem
    2985: ifeq          3015
    2988: aload         13
    2990: invokeinterface #59,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
    2995: aload         13
    2997: invokeinterface #59,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
    3002: invokevirtual #60                 // Method com/vladsch/flexmark/ast/Block.getParent:()Lcom/vladsch/flexmark/ast/Block;
    3005: invokevirtual #62                 // Method com/vladsch/flexmark/ast/Block.getFirstChild:()Lcom/vladsch/flexmark/ast/Node;
    3008: if_acmpne     3015
    3011: iconst_1
    3012: goto          3016
    3015: iconst_0
    3016: istore        15
    3018: iload         15
    3020: ifeq          3088
    3023: aload_0
    3024: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
    3027: aload         10
    3029: getfield      #63                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.listBlock:Lcom/vladsch/flexmark/ast/ListBlock;
    3032: aload         10
    3034: getfield      #64                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.isEmpty:Z
    3037: iconst_1
    3038: invokevirtual #65                 // Method com/vladsch/flexmark/parser/ListOptions.canInterrupt:(Lcom/vladsch/flexmark/ast/ListBlock;ZZ)Z
    3041: ifeq          3064
    3044: aload_0
    3045: getfield      #4                  // Field myOptions:Lcom/vladsch/flexmark/parser/ListOptions;
    3048: aload         10
    3050: getfield      #63                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.listBlock:Lcom/vladsch/flexmark/ast/ListBlock;
    3053: aload         10
    3055: getfield      #64                 // Field com/vladsch/flexmark/internal/ListBlockParser$ListData.isEmpty:Z
    3058: invokevirtual #66                 // Method com/vladsch/flexmark/parser/ListOptions.canStartSubList:(Lcom/vladsch/flexmark/ast/ListBlock;Z)Z
    3061: ifne          3088
    3064: aload_2
    3065: aload_1
    3066: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    3071: invokevirtual #67                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledLineSkipActive:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    3074: aload_0
    3075: aload_1
    3076: invokeinterface #51,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getColumn:()I
    3081: iload         9
    3083: iadd
    3084: invokespecial #55                 // Method continueAtColumn:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
    3087: areturn
    3088: aload_2
    3089: aload_1
    3090: invokeinterface #53,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    3095: invokevirtual #75                 // Method com/vladsch/flexmark/internal/ListBlockParser.setItemHandledNewItemLine:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    3098: invokestatic  #69                 // Method com/vladsch/flexmark/parser/block/BlockContinue.none:()Lcom/vladsch/flexmark/parser/block/BlockContinue;
    3101: areturn
    3102: invokestatic  #69                 // Method com/vladsch/flexmark/parser/block/BlockContinue.none:()Lcom/vladsch/flexmark/parser/block/BlockContinue;
    3105: areturn

  static {};
    Code:
       0: ldc           #86                 // class com/vladsch/flexmark/internal/ListItemParser
       2: invokevirtual #87                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #39                 // Field $assertionsDisabled:Z
      16: return
}
