Compiled from "HtmlBlockParser.java"
public class com.vladsch.flexmark.internal.HtmlBlockParser extends com.vladsch.flexmark.parser.block.AbstractBlockParser {
  public static final java.lang.String HTML_COMMENT_OPEN;

  public static final java.lang.String HTML_COMMENT_CLOSE;

  private final com.vladsch.flexmark.ast.HtmlBlockBase block;

  private final java.util.regex.Pattern closingPattern;

  private final com.vladsch.flexmark.internal.HtmlDeepParser deepParser;

  private boolean finished;

  private com.vladsch.flexmark.ast.BlockContent content;

  private final boolean parseInnerHtmlComments;

  private final boolean myHtmlBlockDeepParseNonBlock;

  private final boolean myHtmlBlockDeepParseBlankLineInterrupts;

  private final boolean myHtmlBlockDeepParseMarkdownInterruptsClosed;

  private final boolean myHtmlBlockDeepParseBlankLineInterruptsPartialTag;

  private final boolean myHtmlBlockDeepParseIndentedCodeInterrupts;

  com.vladsch.flexmark.internal.HtmlBlockParser(com.vladsch.flexmark.util.options.DataHolder, java.util.regex.Pattern, boolean, com.vladsch.flexmark.internal.HtmlDeepParser);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/vladsch/flexmark/parser/block/AbstractBlockParser."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field finished:Z
       9: aload_0
      10: new           #3                  // class com/vladsch/flexmark/ast/BlockContent
      13: dup
      14: invokespecial #4                  // Method com/vladsch/flexmark/ast/BlockContent."<init>":()V
      17: putfield      #5                  // Field content:Lcom/vladsch/flexmark/ast/BlockContent;
      20: aload_0
      21: aload_2
      22: putfield      #6                  // Field closingPattern:Ljava/util/regex/Pattern;
      25: aload_0
      26: iload_3
      27: ifeq          40
      30: new           #7                  // class com/vladsch/flexmark/ast/HtmlCommentBlock
      33: dup
      34: invokespecial #8                  // Method com/vladsch/flexmark/ast/HtmlCommentBlock."<init>":()V
      37: goto          47
      40: new           #9                  // class com/vladsch/flexmark/ast/HtmlBlock
      43: dup
      44: invokespecial #10                 // Method com/vladsch/flexmark/ast/HtmlBlock."<init>":()V
      47: putfield      #11                 // Field block:Lcom/vladsch/flexmark/ast/HtmlBlockBase;
      50: aload_0
      51: aload         4
      53: putfield      #12                 // Field deepParser:Lcom/vladsch/flexmark/internal/HtmlDeepParser;
      56: aload_0
      57: aload_1
      58: getstatic     #13                 // Field com/vladsch/flexmark/parser/Parser.PARSE_INNER_HTML_COMMENTS:Lcom/vladsch/flexmark/util/options/DataKey;
      61: invokeinterface #14,  2           // InterfaceMethod com/vladsch/flexmark/util/options/DataHolder.get:(Lcom/vladsch/flexmark/util/options/DataKey;)Ljava/lang/Object;
      66: checkcast     #15                 // class java/lang/Boolean
      69: invokevirtual #16                 // Method java/lang/Boolean.booleanValue:()Z
      72: putfield      #17                 // Field parseInnerHtmlComments:Z
      75: aload_0
      76: aload_1
      77: getstatic     #18                 // Field com/vladsch/flexmark/parser/Parser.HTML_BLOCK_DEEP_PARSE_NON_BLOCK:Lcom/vladsch/flexmark/util/options/DataKey;
      80: invokeinterface #14,  2           // InterfaceMethod com/vladsch/flexmark/util/options/DataHolder.get:(Lcom/vladsch/flexmark/util/options/DataKey;)Ljava/lang/Object;
      85: checkcast     #15                 // class java/lang/Boolean
      88: invokevirtual #16                 // Method java/lang/Boolean.booleanValue:()Z
      91: putfield      #19                 // Field myHtmlBlockDeepParseNonBlock:Z
      94: aload_0
      95: aload_1
      96: getstatic     #20                 // Field com/vladsch/flexmark/parser/Parser.HTML_BLOCK_DEEP_PARSE_BLANK_LINE_INTERRUPTS:Lcom/vladsch/flexmark/util/options/DataKey;
      99: invokeinterface #14,  2           // InterfaceMethod com/vladsch/flexmark/util/options/DataHolder.get:(Lcom/vladsch/flexmark/util/options/DataKey;)Ljava/lang/Object;
     104: checkcast     #15                 // class java/lang/Boolean
     107: invokevirtual #16                 // Method java/lang/Boolean.booleanValue:()Z
     110: putfield      #21                 // Field myHtmlBlockDeepParseBlankLineInterrupts:Z
     113: aload_0
     114: aload_1
     115: getstatic     #22                 // Field com/vladsch/flexmark/parser/Parser.HTML_BLOCK_DEEP_PARSE_MARKDOWN_INTERRUPTS_CLOSED:Lcom/vladsch/flexmark/util/options/DataKey;
     118: invokeinterface #14,  2           // InterfaceMethod com/vladsch/flexmark/util/options/DataHolder.get:(Lcom/vladsch/flexmark/util/options/DataKey;)Ljava/lang/Object;
     123: checkcast     #15                 // class java/lang/Boolean
     126: invokevirtual #16                 // Method java/lang/Boolean.booleanValue:()Z
     129: putfield      #23                 // Field myHtmlBlockDeepParseMarkdownInterruptsClosed:Z
     132: aload_0
     133: aload_1
     134: getstatic     #24                 // Field com/vladsch/flexmark/parser/Parser.HTML_BLOCK_DEEP_PARSE_BLANK_LINE_INTERRUPTS_PARTIAL_TAG:Lcom/vladsch/flexmark/util/options/DataKey;
     137: invokeinterface #14,  2           // InterfaceMethod com/vladsch/flexmark/util/options/DataHolder.get:(Lcom/vladsch/flexmark/util/options/DataKey;)Ljava/lang/Object;
     142: checkcast     #15                 // class java/lang/Boolean
     145: invokevirtual #16                 // Method java/lang/Boolean.booleanValue:()Z
     148: putfield      #25                 // Field myHtmlBlockDeepParseBlankLineInterruptsPartialTag:Z
     151: aload_0
     152: aload_1
     153: getstatic     #26                 // Field com/vladsch/flexmark/parser/Parser.HTML_BLOCK_DEEP_PARSE_INDENTED_CODE_INTERRUPTS:Lcom/vladsch/flexmark/util/options/DataKey;
     156: invokeinterface #14,  2           // InterfaceMethod com/vladsch/flexmark/util/options/DataHolder.get:(Lcom/vladsch/flexmark/util/options/DataKey;)Ljava/lang/Object;
     161: checkcast     #15                 // class java/lang/Boolean
     164: invokevirtual #16                 // Method java/lang/Boolean.booleanValue:()Z
     167: putfield      #27                 // Field myHtmlBlockDeepParseIndentedCodeInterrupts:Z
     170: return

  public com.vladsch.flexmark.ast.Block getBlock();
    Code:
       0: aload_0
       1: getfield      #11                 // Field block:Lcom/vladsch/flexmark/ast/HtmlBlockBase;
       4: areturn

  public com.vladsch.flexmark.parser.block.BlockContinue tryContinue(com.vladsch.flexmark.parser.block.ParserState);
    Code:
       0: aload_0
       1: getfield      #12                 // Field deepParser:Lcom/vladsch/flexmark/internal/HtmlDeepParser;
       4: ifnull        74
       7: aload_1
       8: invokeinterface #28,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.isBlank:()Z
      13: ifeq          64
      16: aload_0
      17: getfield      #12                 // Field deepParser:Lcom/vladsch/flexmark/internal/HtmlDeepParser;
      20: invokevirtual #29                 // Method com/vladsch/flexmark/internal/HtmlDeepParser.isHtmlClosed:()Z
      23: ifne          60
      26: aload_0
      27: getfield      #21                 // Field myHtmlBlockDeepParseBlankLineInterrupts:Z
      30: ifeq          43
      33: aload_0
      34: getfield      #12                 // Field deepParser:Lcom/vladsch/flexmark/internal/HtmlDeepParser;
      37: invokevirtual #30                 // Method com/vladsch/flexmark/internal/HtmlDeepParser.haveOpenRawTag:()Z
      40: ifeq          60
      43: aload_0
      44: getfield      #25                 // Field myHtmlBlockDeepParseBlankLineInterruptsPartialTag:Z
      47: ifeq          64
      50: aload_0
      51: getfield      #12                 // Field deepParser:Lcom/vladsch/flexmark/internal/HtmlDeepParser;
      54: invokevirtual #31                 // Method com/vladsch/flexmark/internal/HtmlDeepParser.isBlankLineIterruptible:()Z
      57: ifeq          64
      60: invokestatic  #32                 // Method com/vladsch/flexmark/parser/block/BlockContinue.none:()Lcom/vladsch/flexmark/parser/block/BlockContinue;
      63: areturn
      64: aload_1
      65: invokeinterface #33,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getIndex:()I
      70: invokestatic  #34                 // Method com/vladsch/flexmark/parser/block/BlockContinue.atIndex:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
      73: areturn
      74: aload_0
      75: getfield      #2                  // Field finished:Z
      78: ifeq          85
      81: invokestatic  #32                 // Method com/vladsch/flexmark/parser/block/BlockContinue.none:()Lcom/vladsch/flexmark/parser/block/BlockContinue;
      84: areturn
      85: aload_1
      86: invokeinterface #28,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.isBlank:()Z
      91: ifeq          105
      94: aload_0
      95: getfield      #6                  // Field closingPattern:Ljava/util/regex/Pattern;
      98: ifnonnull     105
     101: invokestatic  #32                 // Method com/vladsch/flexmark/parser/block/BlockContinue.none:()Lcom/vladsch/flexmark/parser/block/BlockContinue;
     104: areturn
     105: aload_1
     106: invokeinterface #33,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getIndex:()I
     111: invokestatic  #34                 // Method com/vladsch/flexmark/parser/block/BlockContinue.atIndex:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
     114: areturn

  public void addLine(com.vladsch.flexmark.parser.block.ParserState, com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: getfield      #12                 // Field deepParser:Lcom/vladsch/flexmark/internal/HtmlDeepParser;
       4: ifnull        34
       7: aload_0
       8: getfield      #5                  // Field content:Lcom/vladsch/flexmark/ast/BlockContent;
      11: invokevirtual #35                 // Method com/vladsch/flexmark/ast/BlockContent.getLineCount:()I
      14: ifle          60
      17: aload_0
      18: getfield      #12                 // Field deepParser:Lcom/vladsch/flexmark/internal/HtmlDeepParser;
      21: aload_2
      22: iconst_0
      23: aload_0
      24: getfield      #19                 // Field myHtmlBlockDeepParseNonBlock:Z
      27: iconst_0
      28: invokevirtual #36                 // Method com/vladsch/flexmark/internal/HtmlDeepParser.parseHtmlChunk:(Ljava/lang/CharSequence;ZZZ)V
      31: goto          60
      34: aload_0
      35: getfield      #6                  // Field closingPattern:Ljava/util/regex/Pattern;
      38: ifnull        60
      41: aload_0
      42: getfield      #6                  // Field closingPattern:Ljava/util/regex/Pattern;
      45: aload_2
      46: invokevirtual #37                 // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
      49: invokevirtual #38                 // Method java/util/regex/Matcher.find:()Z
      52: ifeq          60
      55: aload_0
      56: iconst_1
      57: putfield      #2                  // Field finished:Z
      60: aload_0
      61: getfield      #5                  // Field content:Lcom/vladsch/flexmark/ast/BlockContent;
      64: aload_2
      65: aload_1
      66: invokeinterface #39,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getIndent:()I
      71: invokevirtual #40                 // Method com/vladsch/flexmark/ast/BlockContent.add:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;I)V
      74: return

  public boolean canInterruptBy(com.vladsch.flexmark.parser.block.BlockParserFactory);
    Code:
       0: aload_0
       1: getfield      #23                 // Field myHtmlBlockDeepParseMarkdownInterruptsClosed:Z
       4: ifeq          49
       7: aload_0
       8: getfield      #12                 // Field deepParser:Lcom/vladsch/flexmark/internal/HtmlDeepParser;
      11: ifnull        49
      14: aload_1
      15: instanceof    #41                 // class com/vladsch/flexmark/internal/HtmlBlockParser$Factory
      18: ifne          49
      21: aload_0
      22: getfield      #27                 // Field myHtmlBlockDeepParseIndentedCodeInterrupts:Z
      25: ifne          35
      28: aload_1
      29: instanceof    #42                 // class com/vladsch/flexmark/internal/IndentedCodeBlockParser$BlockFactory
      32: ifne          49
      35: aload_0
      36: getfield      #12                 // Field deepParser:Lcom/vladsch/flexmark/internal/HtmlDeepParser;
      39: invokevirtual #29                 // Method com/vladsch/flexmark/internal/HtmlDeepParser.isHtmlClosed:()Z
      42: ifeq          49
      45: iconst_1
      46: goto          50
      49: iconst_0
      50: ireturn

  public boolean canContain(com.vladsch.flexmark.parser.block.ParserState, com.vladsch.flexmark.parser.block.BlockParser, com.vladsch.flexmark.ast.Block);
    Code:
       0: iconst_0
       1: ireturn

  public boolean isInterruptible();
    Code:
       0: aload_0
       1: getfield      #23                 // Field myHtmlBlockDeepParseMarkdownInterruptsClosed:Z
       4: ifeq          28
       7: aload_0
       8: getfield      #12                 // Field deepParser:Lcom/vladsch/flexmark/internal/HtmlDeepParser;
      11: ifnull        28
      14: aload_0
      15: getfield      #12                 // Field deepParser:Lcom/vladsch/flexmark/internal/HtmlDeepParser;
      18: invokevirtual #29                 // Method com/vladsch/flexmark/internal/HtmlDeepParser.isHtmlClosed:()Z
      21: ifeq          28
      24: iconst_1
      25: goto          29
      28: iconst_0
      29: ireturn

  public boolean isRawText();
    Code:
       0: iconst_1
       1: ireturn

  public void closeBlock(com.vladsch.flexmark.parser.block.ParserState);
    Code:
       0: aload_0
       1: getfield      #11                 // Field block:Lcom/vladsch/flexmark/ast/HtmlBlockBase;
       4: aload_0
       5: getfield      #5                  // Field content:Lcom/vladsch/flexmark/ast/BlockContent;
       8: invokevirtual #43                 // Method com/vladsch/flexmark/ast/HtmlBlockBase.setContent:(Lcom/vladsch/flexmark/ast/BlockContent;)V
      11: aload_0
      12: aconst_null
      13: putfield      #5                  // Field content:Lcom/vladsch/flexmark/ast/BlockContent;
      16: aload_0
      17: getfield      #11                 // Field block:Lcom/vladsch/flexmark/ast/HtmlBlockBase;
      20: instanceof    #7                  // class com/vladsch/flexmark/ast/HtmlCommentBlock
      23: ifne          237
      26: aload_0
      27: getfield      #17                 // Field parseInnerHtmlComments:Z
      30: ifeq          237
      33: iconst_0
      34: istore_2
      35: aload_0
      36: getfield      #11                 // Field block:Lcom/vladsch/flexmark/ast/HtmlBlockBase;
      39: invokevirtual #44                 // Method com/vladsch/flexmark/ast/HtmlBlockBase.getContentChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      42: astore_3
      43: aload_3
      44: invokeinterface #45,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.eolLength:()I
      49: ifle          61
      52: aload_3
      53: iconst_0
      54: iconst_m1
      55: invokeinterface #46,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.midSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      60: astore_3
      61: aload_3
      62: invokeinterface #47,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      67: istore        4
      69: iload_2
      70: iload         4
      72: if_icmpge     192
      75: aload_3
      76: ldc           #49                 // String <!--
      78: iload_2
      79: invokeinterface #50,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.indexOf:(Ljava/lang/CharSequence;I)I
      84: istore        5
      86: iload         5
      88: ifge          94
      91: goto          192
      94: aload_3
      95: ldc           #51                 // String -->
      97: iload         5
      99: ldc           #49                 // String <!--
     101: invokevirtual #52                 // Method java/lang/String.length:()I
     104: iadd
     105: invokeinterface #50,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.indexOf:(Ljava/lang/CharSequence;I)I
     110: istore        6
     112: iload         6
     114: ifge          120
     117: goto          192
     120: iload_2
     121: iload         5
     123: if_icmpge     153
     126: new           #53                 // class com/vladsch/flexmark/ast/HtmlInnerBlock
     129: dup
     130: aload_3
     131: iload_2
     132: iload         5
     134: invokeinterface #54,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     139: invokespecial #55                 // Method com/vladsch/flexmark/ast/HtmlInnerBlock."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     142: astore        7
     144: aload_0
     145: getfield      #11                 // Field block:Lcom/vladsch/flexmark/ast/HtmlBlockBase;
     148: aload         7
     150: invokevirtual #56                 // Method com/vladsch/flexmark/ast/HtmlBlockBase.appendChild:(Lcom/vladsch/flexmark/ast/Node;)V
     153: iload         6
     155: ldc           #51                 // String -->
     157: invokevirtual #52                 // Method java/lang/String.length:()I
     160: iadd
     161: istore_2
     162: new           #57                 // class com/vladsch/flexmark/ast/HtmlInnerBlockComment
     165: dup
     166: aload_3
     167: iload         5
     169: iload_2
     170: invokeinterface #54,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     175: invokespecial #58                 // Method com/vladsch/flexmark/ast/HtmlInnerBlockComment."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     178: astore        7
     180: aload_0
     181: getfield      #11                 // Field block:Lcom/vladsch/flexmark/ast/HtmlBlockBase;
     184: aload         7
     186: invokevirtual #56                 // Method com/vladsch/flexmark/ast/HtmlBlockBase.appendChild:(Lcom/vladsch/flexmark/ast/Node;)V
     189: goto          69
     192: iload_2
     193: ifle          237
     196: iload_2
     197: aload_3
     198: invokeinterface #47,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
     203: if_icmpge     237
     206: new           #53                 // class com/vladsch/flexmark/ast/HtmlInnerBlock
     209: dup
     210: aload_3
     211: iload_2
     212: aload_3
     213: invokeinterface #47,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
     218: invokeinterface #54,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     223: invokespecial #55                 // Method com/vladsch/flexmark/ast/HtmlInnerBlock."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     226: astore        5
     228: aload_0
     229: getfield      #11                 // Field block:Lcom/vladsch/flexmark/ast/HtmlBlockBase;
     232: aload         5
     234: invokevirtual #56                 // Method com/vladsch/flexmark/ast/HtmlBlockBase.appendChild:(Lcom/vladsch/flexmark/ast/Node;)V
     237: return
}
