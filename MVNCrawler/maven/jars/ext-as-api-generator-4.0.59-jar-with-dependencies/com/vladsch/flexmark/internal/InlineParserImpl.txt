Compiled from "InlineParserImpl.java"
public class com.vladsch.flexmark.internal.InlineParserImpl implements com.vladsch.flexmark.parser.InlineParser,com.vladsch.flexmark.parser.block.ParagraphPreProcessor {
  protected final java.util.BitSet originalSpecialCharacters;

  protected final java.util.BitSet delimiterCharacters;

  protected final java.util.Map<java.lang.Character, com.vladsch.flexmark.parser.delimiter.DelimiterProcessor> delimiterProcessors;

  protected final com.vladsch.flexmark.internal.LinkRefProcessorData linkRefProcessorsData;

  protected java.util.List<com.vladsch.flexmark.parser.LinkRefProcessor> linkRefProcessors;

  protected java.util.Map<java.lang.Character, java.util.List<com.vladsch.flexmark.parser.InlineParserExtension>> inlineParserExtensions;

  protected java.util.List<com.vladsch.flexmark.parser.InlineParserExtensionFactory> inlineParserExtensionFactories;

  protected java.util.BitSet specialCharacters;

  protected java.util.BitSet customCharacters;

  protected java.util.Map<java.lang.Character, com.vladsch.flexmark.parser.block.CharacterNodeFactory> customSpecialCharacterFactoryMap;

  protected java.util.ArrayList<com.vladsch.flexmark.ast.Node> customSpecialCharacterNodes;

  protected com.vladsch.flexmark.ast.util.ReferenceRepository referenceRepository;

  protected com.vladsch.flexmark.ast.Node block;

  protected com.vladsch.flexmark.util.sequence.BasedSequence input;

  protected int index;

  protected com.vladsch.flexmark.internal.Delimiter lastDelimiter;

  private com.vladsch.flexmark.internal.Bracket lastBracket;

  protected java.util.ArrayList<com.vladsch.flexmark.util.sequence.BasedSequence> currentText;

  protected com.vladsch.flexmark.ast.Document document;

  protected final com.vladsch.flexmark.parser.InlineParserOptions options;

  protected com.vladsch.flexmark.ast.util.Parsing myParsing;

  static final boolean $assertionsDisabled;

  public static java.util.Map<java.lang.Character, java.util.List<com.vladsch.flexmark.parser.InlineParserExtensionFactory>> calculateInlineParserExtensions(com.vladsch.flexmark.util.options.DataHolder, java.util.List<com.vladsch.flexmark.parser.InlineParserExtensionFactory>);
    Code:
       0: new           #1                  // class java/util/HashMap
       3: dup
       4: invokespecial #2                  // Method java/util/HashMap."<init>":()V
       7: astore_2
       8: aload_1
       9: invokeinterface #3,  1            // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      14: astore_3
      15: aload_3
      16: invokeinterface #4,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          133
      24: aload_3
      25: invokeinterface #5,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #6                  // class com/vladsch/flexmark/parser/InlineParserExtensionFactory
      33: astore        4
      35: aload         4
      37: invokeinterface #7,  1            // InterfaceMethod com/vladsch/flexmark/parser/InlineParserExtensionFactory.getCharacters:()Ljava/lang/CharSequence;
      42: astore        5
      44: iconst_0
      45: istore        6
      47: iload         6
      49: aload         5
      51: invokeinterface #8,  1            // InterfaceMethod java/lang/CharSequence.length:()I
      56: if_icmpge     130
      59: aload         5
      61: iload         6
      63: invokeinterface #9,  2            // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      68: istore        7
      70: aload_2
      71: iload         7
      73: invokestatic  #10                 // Method java/lang/Character.valueOf:(C)Ljava/lang/Character;
      76: invokeinterface #11,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      81: checkcast     #12                 // class java/util/List
      84: astore        8
      86: aload         8
      88: ifnonnull     114
      91: new           #13                 // class java/util/ArrayList
      94: dup
      95: invokespecial #14                 // Method java/util/ArrayList."<init>":()V
      98: astore        8
     100: aload_2
     101: iload         7
     103: invokestatic  #10                 // Method java/lang/Character.valueOf:(C)Ljava/lang/Character;
     106: aload         8
     108: invokeinterface #15,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     113: pop
     114: aload         8
     116: aload         4
     118: invokeinterface #16,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     123: pop
     124: iinc          6, 1
     127: goto          47
     130: goto          15
     133: new           #17                 // class com/vladsch/flexmark/internal/InlineParserImpl$InlineParserExtensionDependencyHandler
     136: dup
     137: invokespecial #18                 // Method com/vladsch/flexmark/internal/InlineParserImpl$InlineParserExtensionDependencyHandler."<init>":()V
     140: astore_3
     141: new           #1                  // class java/util/HashMap
     144: dup
     145: invokespecial #2                  // Method java/util/HashMap."<init>":()V
     148: astore        4
     150: aload_2
     151: invokeinterface #19,  1           // InterfaceMethod java/util/Map.keySet:()Ljava/util/Set;
     156: invokeinterface #20,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
     161: astore        5
     163: aload         5
     165: invokeinterface #4,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
     170: ifeq          305
     173: aload         5
     175: invokeinterface #5,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     180: checkcast     #21                 // class java/lang/Character
     183: astore        6
     185: aload_2
     186: aload         6
     188: invokeinterface #11,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
     193: checkcast     #12                 // class java/util/List
     196: astore        7
     198: aload         7
     200: astore        8
     202: aload         7
     204: invokeinterface #22,  1           // InterfaceMethod java/util/List.size:()I
     209: iconst_1
     210: if_icmple     290
     213: aload_3
     214: aload         7
     216: invokevirtual #23                 // Method com/vladsch/flexmark/internal/InlineParserImpl$InlineParserExtensionDependencyHandler.resolveDependencies:(Ljava/util/List;)Lcom/vladsch/flexmark/util/dependency/ResolvedDependencies;
     219: checkcast     #24                 // class com/vladsch/flexmark/internal/InlineParserImpl$InlineParserExtensionDependencies
     222: astore        9
     224: new           #13                 // class java/util/ArrayList
     227: dup
     228: aload         7
     230: invokeinterface #22,  1           // InterfaceMethod java/util/List.size:()I
     235: invokespecial #25                 // Method java/util/ArrayList."<init>":(I)V
     238: astore        8
     240: aload         9
     242: invokevirtual #26                 // Method com/vladsch/flexmark/internal/InlineParserImpl$InlineParserExtensionDependencies.getDependentStages:()Ljava/util/List;
     245: invokeinterface #3,  1            // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     250: astore        10
     252: aload         10
     254: invokeinterface #4,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
     259: ifeq          290
     262: aload         10
     264: invokeinterface #5,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     269: checkcast     #27                 // class com/vladsch/flexmark/internal/InlineParserImpl$InlineParserDependencyStage
     272: astore        11
     274: aload         8
     276: aload         11
     278: invokestatic  #28                 // Method com/vladsch/flexmark/internal/InlineParserImpl$InlineParserDependencyStage.access$000:(Lcom/vladsch/flexmark/internal/InlineParserImpl$InlineParserDependencyStage;)Ljava/util/List;
     281: invokeinterface #29,  2           // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
     286: pop
     287: goto          252
     290: aload         4
     292: aload         6
     294: aload         8
     296: invokeinterface #15,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     301: pop
     302: goto          163
     305: aload         4
     307: areturn

  public void initializeDocument(com.vladsch.flexmark.ast.util.Parsing, com.vladsch.flexmark.ast.Document);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #30                 // Field document:Lcom/vladsch/flexmark/ast/Document;
       5: aload_0
       6: aload_2
       7: getstatic     #31                 // Field com/vladsch/flexmark/parser/Parser.REFERENCES:Lcom/vladsch/flexmark/util/options/DataKey;
      10: invokevirtual #32                 // Method com/vladsch/flexmark/ast/Document.get:(Lcom/vladsch/flexmark/util/options/DataKey;)Ljava/lang/Object;
      13: checkcast     #33                 // class com/vladsch/flexmark/ast/util/ReferenceRepository
      16: putfield      #34                 // Field referenceRepository:Lcom/vladsch/flexmark/ast/util/ReferenceRepository;
      19: aload_0
      20: aload_1
      21: putfield      #35                 // Field myParsing:Lcom/vladsch/flexmark/ast/util/Parsing;
      24: aload_0
      25: new           #13                 // class java/util/ArrayList
      28: dup
      29: aload_0
      30: getfield      #36                 // Field linkRefProcessorsData:Lcom/vladsch/flexmark/internal/LinkRefProcessorData;
      33: getfield      #37                 // Field com/vladsch/flexmark/internal/LinkRefProcessorData.processors:Ljava/util/List;
      36: invokeinterface #22,  1           // InterfaceMethod java/util/List.size:()I
      41: invokespecial #25                 // Method java/util/ArrayList."<init>":(I)V
      44: putfield      #38                 // Field linkRefProcessors:Ljava/util/List;
      47: aload_0
      48: getfield      #36                 // Field linkRefProcessorsData:Lcom/vladsch/flexmark/internal/LinkRefProcessorData;
      51: getfield      #37                 // Field com/vladsch/flexmark/internal/LinkRefProcessorData.processors:Ljava/util/List;
      54: invokeinterface #3,  1            // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      59: astore_3
      60: aload_3
      61: invokeinterface #4,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      66: ifeq          101
      69: aload_3
      70: invokeinterface #5,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      75: checkcast     #39                 // class com/vladsch/flexmark/parser/LinkRefProcessorFactory
      78: astore        4
      80: aload_0
      81: getfield      #38                 // Field linkRefProcessors:Ljava/util/List;
      84: aload         4
      86: aload_2
      87: invokeinterface #40,  2           // InterfaceMethod com/vladsch/flexmark/parser/LinkRefProcessorFactory.create:(Lcom/vladsch/flexmark/ast/Document;)Lcom/vladsch/flexmark/parser/LinkRefProcessor;
      92: invokeinterface #16,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      97: pop
      98: goto          60
     101: aload_0
     102: getfield      #41                 // Field inlineParserExtensionFactories:Ljava/util/List;
     105: ifnull        293
     108: aload_2
     109: aload_0
     110: getfield      #41                 // Field inlineParserExtensionFactories:Ljava/util/List;
     113: invokestatic  #42                 // Method calculateInlineParserExtensions:(Lcom/vladsch/flexmark/util/options/DataHolder;Ljava/util/List;)Ljava/util/Map;
     116: astore_3
     117: aload_0
     118: new           #1                  // class java/util/HashMap
     121: dup
     122: aload_3
     123: invokeinterface #43,  1           // InterfaceMethod java/util/Map.size:()I
     128: invokespecial #44                 // Method java/util/HashMap."<init>":(I)V
     131: putfield      #45                 // Field inlineParserExtensions:Ljava/util/Map;
     134: aload_3
     135: invokeinterface #46,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
     140: invokeinterface #20,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
     145: astore        4
     147: aload         4
     149: invokeinterface #4,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
     154: ifeq          293
     157: aload         4
     159: invokeinterface #5,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     164: checkcast     #47                 // class java/util/Map$Entry
     167: astore        5
     169: new           #13                 // class java/util/ArrayList
     172: dup
     173: aload         5
     175: invokeinterface #48,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
     180: checkcast     #12                 // class java/util/List
     183: invokeinterface #22,  1           // InterfaceMethod java/util/List.size:()I
     188: invokespecial #25                 // Method java/util/ArrayList."<init>":(I)V
     191: astore        6
     193: aload         5
     195: invokeinterface #48,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
     200: checkcast     #12                 // class java/util/List
     203: invokeinterface #3,  1            // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     208: astore        7
     210: aload         7
     212: invokeinterface #4,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
     217: ifeq          251
     220: aload         7
     222: invokeinterface #5,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     227: checkcast     #6                  // class com/vladsch/flexmark/parser/InlineParserExtensionFactory
     230: astore        8
     232: aload         6
     234: aload         8
     236: aload_0
     237: invokeinterface #49,  2           // InterfaceMethod com/vladsch/flexmark/parser/InlineParserExtensionFactory.create:(Lcom/vladsch/flexmark/parser/InlineParser;)Lcom/vladsch/flexmark/parser/InlineParserExtension;
     242: invokeinterface #16,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     247: pop
     248: goto          210
     251: aload_0
     252: getfield      #45                 // Field inlineParserExtensions:Ljava/util/Map;
     255: aload         5
     257: invokeinterface #50,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
     262: aload         6
     264: invokeinterface #15,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     269: pop
     270: aload_0
     271: getfield      #51                 // Field specialCharacters:Ljava/util/BitSet;
     274: aload         5
     276: invokeinterface #50,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
     281: checkcast     #21                 // class java/lang/Character
     284: invokevirtual #52                 // Method java/lang/Character.charValue:()C
     287: invokevirtual #53                 // Method java/util/BitSet.set:(I)V
     290: goto          147
     293: return

  public void finalizeDocument(com.vladsch.flexmark.ast.Document);
    Code:
       0: getstatic     #54                 // Field $assertionsDisabled:Z
       3: ifne          28
       6: aload_0
       7: getfield      #34                 // Field referenceRepository:Lcom/vladsch/flexmark/ast/util/ReferenceRepository;
      10: aload_1
      11: getstatic     #31                 // Field com/vladsch/flexmark/parser/Parser.REFERENCES:Lcom/vladsch/flexmark/util/options/DataKey;
      14: invokevirtual #32                 // Method com/vladsch/flexmark/ast/Document.get:(Lcom/vladsch/flexmark/util/options/DataKey;)Ljava/lang/Object;
      17: if_acmpeq     28
      20: new           #55                 // class java/lang/AssertionError
      23: dup
      24: invokespecial #56                 // Method java/lang/AssertionError."<init>":()V
      27: athrow
      28: aload_0
      29: getfield      #45                 // Field inlineParserExtensions:Ljava/util/Map;
      32: ifnull        113
      35: aload_0
      36: getfield      #45                 // Field inlineParserExtensions:Ljava/util/Map;
      39: invokeinterface #57,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
      44: invokeinterface #58,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      49: astore_2
      50: aload_2
      51: invokeinterface #4,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      56: ifeq          113
      59: aload_2
      60: invokeinterface #5,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      65: checkcast     #12                 // class java/util/List
      68: astore_3
      69: aload_3
      70: invokeinterface #3,  1            // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      75: astore        4
      77: aload         4
      79: invokeinterface #4,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      84: ifeq          110
      87: aload         4
      89: invokeinterface #5,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      94: checkcast     #59                 // class com/vladsch/flexmark/parser/InlineParserExtension
      97: astore        5
      99: aload         5
     101: aload_0
     102: invokeinterface #60,  2           // InterfaceMethod com/vladsch/flexmark/parser/InlineParserExtension.finalizeDocument:(Lcom/vladsch/flexmark/parser/InlineParser;)V
     107: goto          77
     110: goto          50
     113: return

  public java.util.ArrayList<com.vladsch.flexmark.util.sequence.BasedSequence> getCurrentText();
    Code:
       0: aload_0
       1: getfield      #61                 // Field currentText:Ljava/util/ArrayList;
       4: ifnonnull     18
       7: aload_0
       8: new           #13                 // class java/util/ArrayList
      11: dup
      12: invokespecial #14                 // Method java/util/ArrayList."<init>":()V
      15: putfield      #61                 // Field currentText:Ljava/util/ArrayList;
      18: aload_0
      19: getfield      #61                 // Field currentText:Ljava/util/ArrayList;
      22: areturn

  public com.vladsch.flexmark.internal.InlineParserImpl(com.vladsch.flexmark.util.options.DataHolder, java.util.BitSet, java.util.BitSet, java.util.Map<java.lang.Character, com.vladsch.flexmark.parser.delimiter.DelimiterProcessor>, com.vladsch.flexmark.internal.LinkRefProcessorData, java.util.List<com.vladsch.flexmark.parser.InlineParserExtensionFactory>);
    Code:
       0: aload_0
       1: invokespecial #62                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #38                 // Field linkRefProcessors:Ljava/util/List;
       9: aload_0
      10: aconst_null
      11: putfield      #45                 // Field inlineParserExtensions:Ljava/util/Map;
      14: aload_0
      15: aconst_null
      16: putfield      #41                 // Field inlineParserExtensionFactories:Ljava/util/List;
      19: aload_0
      20: aconst_null
      21: putfield      #63                 // Field customCharacters:Ljava/util/BitSet;
      24: aload_0
      25: aconst_null
      26: putfield      #64                 // Field customSpecialCharacterFactoryMap:Ljava/util/Map;
      29: aload_0
      30: aconst_null
      31: putfield      #65                 // Field customSpecialCharacterNodes:Ljava/util/ArrayList;
      34: aload_0
      35: new           #66                 // class com/vladsch/flexmark/ast/util/Parsing
      38: dup
      39: aload_1
      40: invokespecial #67                 // Method com/vladsch/flexmark/ast/util/Parsing."<init>":(Lcom/vladsch/flexmark/util/options/DataHolder;)V
      43: putfield      #35                 // Field myParsing:Lcom/vladsch/flexmark/ast/util/Parsing;
      46: aload_0
      47: new           #68                 // class com/vladsch/flexmark/parser/InlineParserOptions
      50: dup
      51: aload_1
      52: invokespecial #69                 // Method com/vladsch/flexmark/parser/InlineParserOptions."<init>":(Lcom/vladsch/flexmark/util/options/DataHolder;)V
      55: putfield      #70                 // Field options:Lcom/vladsch/flexmark/parser/InlineParserOptions;
      58: aload_0
      59: aload         4
      61: putfield      #71                 // Field delimiterProcessors:Ljava/util/Map;
      64: aload_0
      65: aload         5
      67: putfield      #36                 // Field linkRefProcessorsData:Lcom/vladsch/flexmark/internal/LinkRefProcessorData;
      70: aload_0
      71: aload_3
      72: putfield      #72                 // Field delimiterCharacters:Ljava/util/BitSet;
      75: aload_0
      76: aload_2
      77: putfield      #73                 // Field originalSpecialCharacters:Ljava/util/BitSet;
      80: aload_0
      81: aload_2
      82: putfield      #51                 // Field specialCharacters:Ljava/util/BitSet;
      85: aload_0
      86: aload         6
      88: invokeinterface #74,  1           // InterfaceMethod java/util/List.isEmpty:()Z
      93: ifne          101
      96: aload         6
      98: goto          102
     101: aconst_null
     102: putfield      #41                 // Field inlineParserExtensionFactories:Ljava/util/List;
     105: return

  public static java.util.BitSet calculateDelimiterCharacters(com.vladsch.flexmark.util.options.DataHolder, java.util.Set<java.lang.Character>);
    Code:
       0: new           #75                 // class java/util/BitSet
       3: dup
       4: invokespecial #76                 // Method java/util/BitSet."<init>":()V
       7: astore_2
       8: aload_1
       9: invokeinterface #20,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      14: astore_3
      15: aload_3
      16: invokeinterface #4,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          47
      24: aload_3
      25: invokeinterface #5,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #21                 // class java/lang/Character
      33: astore        4
      35: aload_2
      36: aload         4
      38: invokevirtual #52                 // Method java/lang/Character.charValue:()C
      41: invokevirtual #53                 // Method java/util/BitSet.set:(I)V
      44: goto          15
      47: aload_2
      48: areturn

  public static java.util.BitSet calculateSpecialCharacters(com.vladsch.flexmark.util.options.DataHolder, java.util.BitSet);
    Code:
       0: new           #75                 // class java/util/BitSet
       3: dup
       4: invokespecial #76                 // Method java/util/BitSet."<init>":()V
       7: astore_2
       8: aload_2
       9: aload_1
      10: invokevirtual #77                 // Method java/util/BitSet.or:(Ljava/util/BitSet;)V
      13: aload_2
      14: bipush        10
      16: invokevirtual #53                 // Method java/util/BitSet.set:(I)V
      19: aload_2
      20: bipush        96
      22: invokevirtual #53                 // Method java/util/BitSet.set:(I)V
      25: aload_2
      26: bipush        91
      28: invokevirtual #53                 // Method java/util/BitSet.set:(I)V
      31: aload_2
      32: bipush        93
      34: invokevirtual #53                 // Method java/util/BitSet.set:(I)V
      37: aload_2
      38: bipush        92
      40: invokevirtual #53                 // Method java/util/BitSet.set:(I)V
      43: aload_2
      44: bipush        33
      46: invokevirtual #53                 // Method java/util/BitSet.set:(I)V
      49: aload_2
      50: bipush        60
      52: invokevirtual #53                 // Method java/util/BitSet.set:(I)V
      55: aload_2
      56: bipush        38
      58: invokevirtual #53                 // Method java/util/BitSet.set:(I)V
      61: aload_2
      62: areturn

  public static java.util.Map<java.lang.Character, com.vladsch.flexmark.parser.delimiter.DelimiterProcessor> calculateDelimiterProcessors(com.vladsch.flexmark.util.options.DataHolder, java.util.List<com.vladsch.flexmark.parser.delimiter.DelimiterProcessor>);
    Code:
       0: new           #1                  // class java/util/HashMap
       3: dup
       4: invokespecial #2                  // Method java/util/HashMap."<init>":()V
       7: astore_2
       8: aload_0
       9: getstatic     #78                 // Field com/vladsch/flexmark/parser/Parser.ASTERISK_DELIMITER_PROCESSOR:Lcom/vladsch/flexmark/util/options/DataKey;
      12: invokeinterface #79,  2           // InterfaceMethod com/vladsch/flexmark/util/options/DataHolder.get:(Lcom/vladsch/flexmark/util/options/DataKey;)Ljava/lang/Object;
      17: checkcast     #80                 // class java/lang/Boolean
      20: invokevirtual #81                 // Method java/lang/Boolean.booleanValue:()Z
      23: ifeq          53
      26: new           #82                 // class com/vladsch/flexmark/internal/inline/AsteriskDelimiterProcessor
      29: dup
      30: getstatic     #83                 // Field com/vladsch/flexmark/parser/Parser.STRONG_WRAPS_EMPHASIS:Lcom/vladsch/flexmark/util/options/DataKey;
      33: aload_0
      34: invokevirtual #84                 // Method com/vladsch/flexmark/util/options/DataKey.getFrom:(Lcom/vladsch/flexmark/util/options/DataHolder;)Ljava/lang/Object;
      37: checkcast     #80                 // class java/lang/Boolean
      40: invokevirtual #81                 // Method java/lang/Boolean.booleanValue:()Z
      43: invokespecial #85                 // Method com/vladsch/flexmark/internal/inline/AsteriskDelimiterProcessor."<init>":(Z)V
      46: invokestatic  #86                 // Method java/util/Collections.singletonList:(Ljava/lang/Object;)Ljava/util/List;
      49: aload_2
      50: invokestatic  #87                 // Method addDelimiterProcessors:(Ljava/util/List;Ljava/util/Map;)V
      53: aload_0
      54: getstatic     #88                 // Field com/vladsch/flexmark/parser/Parser.UNDERSCORE_DELIMITER_PROCESSOR:Lcom/vladsch/flexmark/util/options/DataKey;
      57: invokeinterface #79,  2           // InterfaceMethod com/vladsch/flexmark/util/options/DataHolder.get:(Lcom/vladsch/flexmark/util/options/DataKey;)Ljava/lang/Object;
      62: checkcast     #80                 // class java/lang/Boolean
      65: invokevirtual #81                 // Method java/lang/Boolean.booleanValue:()Z
      68: ifeq          98
      71: new           #89                 // class com/vladsch/flexmark/internal/inline/UnderscoreDelimiterProcessor
      74: dup
      75: getstatic     #83                 // Field com/vladsch/flexmark/parser/Parser.STRONG_WRAPS_EMPHASIS:Lcom/vladsch/flexmark/util/options/DataKey;
      78: aload_0
      79: invokevirtual #84                 // Method com/vladsch/flexmark/util/options/DataKey.getFrom:(Lcom/vladsch/flexmark/util/options/DataHolder;)Ljava/lang/Object;
      82: checkcast     #80                 // class java/lang/Boolean
      85: invokevirtual #81                 // Method java/lang/Boolean.booleanValue:()Z
      88: invokespecial #90                 // Method com/vladsch/flexmark/internal/inline/UnderscoreDelimiterProcessor."<init>":(Z)V
      91: invokestatic  #86                 // Method java/util/Collections.singletonList:(Ljava/lang/Object;)Ljava/util/List;
      94: aload_2
      95: invokestatic  #87                 // Method addDelimiterProcessors:(Ljava/util/List;Ljava/util/Map;)V
      98: aload_1
      99: aload_2
     100: invokestatic  #87                 // Method addDelimiterProcessors:(Ljava/util/List;Ljava/util/Map;)V
     103: aload_2
     104: areturn

  public static com.vladsch.flexmark.internal.LinkRefProcessorData calculateLinkRefProcessors(com.vladsch.flexmark.util.options.DataHolder, java.util.List<com.vladsch.flexmark.parser.LinkRefProcessorFactory>);
    Code:
       0: aload_1
       1: invokeinterface #22,  1           // InterfaceMethod java/util/List.size:()I
       6: iconst_1
       7: if_icmple     165
      10: new           #13                 // class java/util/ArrayList
      13: dup
      14: aload_1
      15: invokeinterface #22,  1           // InterfaceMethod java/util/List.size:()I
      20: invokespecial #25                 // Method java/util/ArrayList."<init>":(I)V
      23: astore_2
      24: aload_2
      25: aload_1
      26: invokeinterface #29,  2           // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
      31: pop
      32: iconst_1
      33: newarray       int
      35: dup
      36: iconst_0
      37: iconst_0
      38: iastore
      39: astore_3
      40: aload_2
      41: new           #91                 // class com/vladsch/flexmark/internal/InlineParserImpl$1
      44: dup
      45: aload_0
      46: aload_3
      47: invokespecial #92                 // Method com/vladsch/flexmark/internal/InlineParserImpl$1."<init>":(Lcom/vladsch/flexmark/util/options/DataHolder;[I)V
      50: invokestatic  #93                 // Method java/util/Collections.sort:(Ljava/util/List;Ljava/util/Comparator;)V
      53: aload_3
      54: iconst_0
      55: iaload
      56: istore        4
      58: iload         4
      60: istore        5
      62: iload         4
      64: iconst_1
      65: iadd
      66: newarray       int
      68: astore        6
      70: iconst_m1
      71: istore        4
      73: iconst_0
      74: istore        7
      76: aload_2
      77: invokeinterface #3,  1            // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      82: astore        8
      84: aload         8
      86: invokeinterface #4,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      91: ifeq          152
      94: aload         8
      96: invokeinterface #5,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     101: checkcast     #39                 // class com/vladsch/flexmark/parser/LinkRefProcessorFactory
     104: astore        9
     106: iload         4
     108: aload         9
     110: aload_0
     111: invokeinterface #94,  2           // InterfaceMethod com/vladsch/flexmark/parser/LinkRefProcessorFactory.getBracketNestingLevel:(Lcom/vladsch/flexmark/util/options/DataHolder;)I
     116: if_icmpge     146
     119: aload         9
     121: aload_0
     122: invokeinterface #94,  2           // InterfaceMethod com/vladsch/flexmark/parser/LinkRefProcessorFactory.getBracketNestingLevel:(Lcom/vladsch/flexmark/util/options/DataHolder;)I
     127: istore        4
     129: aload         6
     131: iload         4
     133: iload         7
     135: iastore
     136: iload         4
     138: iload         5
     140: if_icmpne     146
     143: goto          152
     146: iinc          7, 1
     149: goto          84
     152: new           #95                 // class com/vladsch/flexmark/internal/LinkRefProcessorData
     155: dup
     156: aload_2
     157: iload         5
     159: aload         6
     161: invokespecial #96                 // Method com/vladsch/flexmark/internal/LinkRefProcessorData."<init>":(Ljava/util/List;I[I)V
     164: areturn
     165: aload_1
     166: invokeinterface #22,  1           // InterfaceMethod java/util/List.size:()I
     171: ifle          208
     174: aload_1
     175: iconst_0
     176: invokeinterface #97,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
     181: checkcast     #39                 // class com/vladsch/flexmark/parser/LinkRefProcessorFactory
     184: aload_0
     185: invokeinterface #94,  2           // InterfaceMethod com/vladsch/flexmark/parser/LinkRefProcessorFactory.getBracketNestingLevel:(Lcom/vladsch/flexmark/util/options/DataHolder;)I
     190: istore_2
     191: iload_2
     192: iconst_1
     193: iadd
     194: newarray       int
     196: astore_3
     197: new           #95                 // class com/vladsch/flexmark/internal/LinkRefProcessorData
     200: dup
     201: aload_1
     202: iload_2
     203: aload_3
     204: invokespecial #96                 // Method com/vladsch/flexmark/internal/LinkRefProcessorData."<init>":(Ljava/util/List;I[I)V
     207: areturn
     208: new           #95                 // class com/vladsch/flexmark/internal/LinkRefProcessorData
     211: dup
     212: aload_1
     213: iconst_0
     214: iconst_0
     215: newarray       int
     217: invokespecial #96                 // Method com/vladsch/flexmark/internal/LinkRefProcessorData."<init>":(Ljava/util/List;I[I)V
     220: areturn

  private static void addDelimiterProcessors(java.util.List<? extends com.vladsch.flexmark.parser.delimiter.DelimiterProcessor>, java.util.Map<java.lang.Character, com.vladsch.flexmark.parser.delimiter.DelimiterProcessor>);
    Code:
       0: aload_0
       1: invokeinterface #3,  1            // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       6: astore_2
       7: aload_2
       8: invokeinterface #4,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      13: ifeq          66
      16: aload_2
      17: invokeinterface #5,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      22: checkcast     #98                 // class com/vladsch/flexmark/parser/delimiter/DelimiterProcessor
      25: astore_3
      26: aload_3
      27: invokeinterface #99,  1           // InterfaceMethod com/vladsch/flexmark/parser/delimiter/DelimiterProcessor.getOpeningCharacter:()C
      32: istore        4
      34: iload         4
      36: aload_3
      37: aload_1
      38: invokestatic  #100                // Method addDelimiterProcessorForChar:(CLcom/vladsch/flexmark/parser/delimiter/DelimiterProcessor;Ljava/util/Map;)V
      41: aload_3
      42: invokeinterface #101,  1          // InterfaceMethod com/vladsch/flexmark/parser/delimiter/DelimiterProcessor.getClosingCharacter:()C
      47: istore        5
      49: iload         4
      51: iload         5
      53: if_icmpeq     63
      56: iload         5
      58: aload_3
      59: aload_1
      60: invokestatic  #100                // Method addDelimiterProcessorForChar:(CLcom/vladsch/flexmark/parser/delimiter/DelimiterProcessor;Ljava/util/Map;)V
      63: goto          7
      66: return

  private static void addDelimiterProcessorForChar(char, com.vladsch.flexmark.parser.delimiter.DelimiterProcessor, java.util.Map<java.lang.Character, com.vladsch.flexmark.parser.delimiter.DelimiterProcessor>);
    Code:
       0: aload_2
       1: iload_0
       2: invokestatic  #10                 // Method java/lang/Character.valueOf:(C)Ljava/lang/Character;
       5: aload_1
       6: invokeinterface #15,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      11: checkcast     #98                 // class com/vladsch/flexmark/parser/delimiter/DelimiterProcessor
      14: astore_3
      15: aload_3
      16: ifnull        51
      19: new           #102                // class java/lang/IllegalArgumentException
      22: dup
      23: new           #103                // class java/lang/StringBuilder
      26: dup
      27: invokespecial #104                // Method java/lang/StringBuilder."<init>":()V
      30: ldc           #105                // String Delimiter processor conflict with delimiter char \'
      32: invokevirtual #106                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: iload_0
      36: invokevirtual #107                // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      39: ldc           #108                // String \'
      41: invokevirtual #106                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      44: invokevirtual #109                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      47: invokespecial #110                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      50: athrow
      51: return

  public com.vladsch.flexmark.util.sequence.BasedSequence getInput();
    Code:
       0: aload_0
       1: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: areturn

  public int getIndex();
    Code:
       0: aload_0
       1: getfield      #112                // Field index:I
       4: ireturn

  public void setIndex(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #112                // Field index:I
       5: return

  public com.vladsch.flexmark.internal.Delimiter getLastDelimiter();
    Code:
       0: aload_0
       1: getfield      #113                // Field lastDelimiter:Lcom/vladsch/flexmark/internal/Delimiter;
       4: areturn

  public com.vladsch.flexmark.internal.Bracket getLastBracket();
    Code:
       0: aload_0
       1: getfield      #114                // Field lastBracket:Lcom/vladsch/flexmark/internal/Bracket;
       4: areturn

  public com.vladsch.flexmark.ast.Document getDocument();
    Code:
       0: aload_0
       1: getfield      #30                 // Field document:Lcom/vladsch/flexmark/ast/Document;
       4: areturn

  public com.vladsch.flexmark.parser.InlineParserOptions getOptions();
    Code:
       0: aload_0
       1: getfield      #70                 // Field options:Lcom/vladsch/flexmark/parser/InlineParserOptions;
       4: areturn

  public com.vladsch.flexmark.ast.util.Parsing getParsing();
    Code:
       0: aload_0
       1: getfield      #35                 // Field myParsing:Lcom/vladsch/flexmark/ast/util/Parsing;
       4: areturn

  public com.vladsch.flexmark.ast.Node getBlock();
    Code:
       0: aload_0
       1: getfield      #115                // Field block:Lcom/vladsch/flexmark/ast/Node;
       4: areturn

  public java.util.List<com.vladsch.flexmark.ast.Node> parseCustom(com.vladsch.flexmark.util.sequence.BasedSequence, com.vladsch.flexmark.ast.Node, java.util.BitSet, java.util.Map<java.lang.Character, com.vladsch.flexmark.parser.block.CharacterNodeFactory>);
    Code:
       0: aload_0
       1: aload_3
       2: putfield      #63                 // Field customCharacters:Ljava/util/BitSet;
       5: aload_0
       6: getfield      #51                 // Field specialCharacters:Ljava/util/BitSet;
       9: aload_3
      10: invokevirtual #77                 // Method java/util/BitSet.or:(Ljava/util/BitSet;)V
      13: aload_0
      14: aload         4
      16: putfield      #64                 // Field customSpecialCharacterFactoryMap:Ljava/util/Map;
      19: aload_0
      20: aconst_null
      21: putfield      #65                 // Field customSpecialCharacterNodes:Ljava/util/ArrayList;
      24: aload_0
      25: aload_1
      26: aload_2
      27: invokevirtual #116                // Method parse:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;Lcom/vladsch/flexmark/ast/Node;)V
      30: aload_0
      31: aload_0
      32: getfield      #73                 // Field originalSpecialCharacters:Ljava/util/BitSet;
      35: putfield      #51                 // Field specialCharacters:Ljava/util/BitSet;
      38: aload_0
      39: aconst_null
      40: putfield      #64                 // Field customSpecialCharacterFactoryMap:Ljava/util/Map;
      43: aload_0
      44: aconst_null
      45: putfield      #63                 // Field customCharacters:Ljava/util/BitSet;
      48: aload_0
      49: getfield      #65                 // Field customSpecialCharacterNodes:Ljava/util/ArrayList;
      52: areturn

  public void parse(com.vladsch.flexmark.util.sequence.BasedSequence, com.vladsch.flexmark.ast.Node);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #115                // Field block:Lcom/vladsch/flexmark/ast/Node;
       5: aload_0
       6: aload_1
       7: invokeinterface #117,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.trim:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      12: putfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      15: aload_0
      16: iconst_0
      17: putfield      #112                // Field index:I
      20: aload_0
      21: aconst_null
      22: putfield      #113                // Field lastDelimiter:Lcom/vladsch/flexmark/internal/Delimiter;
      25: aload_0
      26: aconst_null
      27: putfield      #114                // Field lastBracket:Lcom/vladsch/flexmark/internal/Bracket;
      30: aload_0
      31: invokevirtual #118                // Method parseInline:()Z
      34: istore_3
      35: iload_3
      36: ifne          30
      39: aload_0
      40: aconst_null
      41: invokevirtual #119                // Method processDelimiters:(Lcom/vladsch/flexmark/internal/Delimiter;)V
      44: aload_0
      45: invokevirtual #120                // Method flushTextNode:()V
      48: aload_0
      49: getfield      #45                 // Field inlineParserExtensions:Ljava/util/Map;
      52: ifnull        138
      55: aload_0
      56: getfield      #45                 // Field inlineParserExtensions:Ljava/util/Map;
      59: invokeinterface #57,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
      64: invokeinterface #58,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      69: astore        4
      71: aload         4
      73: invokeinterface #4,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      78: ifeq          138
      81: aload         4
      83: invokeinterface #5,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      88: checkcast     #12                 // class java/util/List
      91: astore        5
      93: aload         5
      95: invokeinterface #3,  1            // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     100: astore        6
     102: aload         6
     104: invokeinterface #4,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
     109: ifeq          135
     112: aload         6
     114: invokeinterface #5,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     119: checkcast     #59                 // class com/vladsch/flexmark/parser/InlineParserExtension
     122: astore        7
     124: aload         7
     126: aload_0
     127: invokeinterface #121,  2          // InterfaceMethod com/vladsch/flexmark/parser/InlineParserExtension.finalizeBlock:(Lcom/vladsch/flexmark/parser/InlineParser;)V
     132: goto          102
     135: goto          71
     138: aload_0
     139: aload_2
     140: invokevirtual #122                // Method com/vladsch/flexmark/ast/Node.getFirstChild:()Lcom/vladsch/flexmark/ast/Node;
     143: aload_2
     144: invokevirtual #123                // Method com/vladsch/flexmark/ast/Node.getLastChild:()Lcom/vladsch/flexmark/ast/Node;
     147: invokevirtual #124                // Method mergeTextNodes:(Lcom/vladsch/flexmark/ast/Node;Lcom/vladsch/flexmark/ast/Node;)V
     150: return

  public void mergeTextNodes(com.vladsch.flexmark.ast.Node, com.vladsch.flexmark.ast.Node);
    Code:
       0: aconst_null
       1: astore_3
       2: aconst_null
       3: astore        4
       5: aload_1
       6: astore        5
       8: aload         5
      10: ifnull        73
      13: aload         5
      15: instanceof    #125                // class com/vladsch/flexmark/ast/Text
      18: ifeq          42
      21: aload         5
      23: checkcast     #125                // class com/vladsch/flexmark/ast/Text
      26: astore        6
      28: aload_3
      29: ifnonnull     35
      32: aload         6
      34: astore_3
      35: aload         6
      37: astore        4
      39: goto          54
      42: aload_0
      43: aload_3
      44: aload         4
      46: invokevirtual #126                // Method mergeIfNeeded:(Lcom/vladsch/flexmark/ast/Text;Lcom/vladsch/flexmark/ast/Text;)V
      49: aconst_null
      50: astore_3
      51: aconst_null
      52: astore        4
      54: aload         5
      56: aload_2
      57: if_acmpne     63
      60: goto          73
      63: aload         5
      65: invokevirtual #127                // Method com/vladsch/flexmark/ast/Node.getNext:()Lcom/vladsch/flexmark/ast/Node;
      68: astore        5
      70: goto          8
      73: aload_0
      74: aload_3
      75: aload         4
      77: invokevirtual #126                // Method mergeIfNeeded:(Lcom/vladsch/flexmark/ast/Text;Lcom/vladsch/flexmark/ast/Text;)V
      80: return

  public void mergeIfNeeded(com.vladsch.flexmark.ast.Text, com.vladsch.flexmark.ast.Text);
    Code:
       0: aload_1
       1: ifnull        94
       4: aload_2
       5: ifnull        94
       8: aload_1
       9: aload_2
      10: if_acmpeq     94
      13: new           #13                 // class java/util/ArrayList
      16: dup
      17: invokespecial #14                 // Method java/util/ArrayList."<init>":()V
      20: astore_3
      21: aload_3
      22: aload_1
      23: invokevirtual #128                // Method com/vladsch/flexmark/ast/Text.getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      26: invokevirtual #129                // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
      29: pop
      30: aload_1
      31: invokevirtual #130                // Method com/vladsch/flexmark/ast/Text.getNext:()Lcom/vladsch/flexmark/ast/Node;
      34: astore        4
      36: aload_2
      37: invokevirtual #130                // Method com/vladsch/flexmark/ast/Text.getNext:()Lcom/vladsch/flexmark/ast/Node;
      40: astore        5
      42: aload         4
      44: aload         5
      46: if_acmpeq     78
      49: aload_3
      50: aload         4
      52: invokevirtual #131                // Method com/vladsch/flexmark/ast/Node.getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      55: invokevirtual #129                // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
      58: pop
      59: aload         4
      61: astore        6
      63: aload         4
      65: invokevirtual #127                // Method com/vladsch/flexmark/ast/Node.getNext:()Lcom/vladsch/flexmark/ast/Node;
      68: astore        4
      70: aload         6
      72: invokevirtual #132                // Method com/vladsch/flexmark/ast/Node.unlink:()V
      75: goto          42
      78: aload_3
      79: aload_1
      80: invokevirtual #128                // Method com/vladsch/flexmark/ast/Text.getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      83: invokestatic  #133                // Method com/vladsch/flexmark/util/sequence/SegmentedSequence.of:(Ljava/util/List;Lcom/vladsch/flexmark/util/sequence/BasedSequence;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      86: astore        6
      88: aload_1
      89: aload         6
      91: invokevirtual #134                // Method com/vladsch/flexmark/ast/Text.setChars:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
      94: return

  public int preProcessBlock(com.vladsch.flexmark.ast.Paragraph, com.vladsch.flexmark.parser.block.ParserState);
    Code:
       0: aload_1
       1: invokevirtual #135                // Method com/vladsch/flexmark/ast/Paragraph.getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: astore_3
       5: aload_3
       6: ldc           #137                // String  \t
       8: invokeinterface #138,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.countLeading:(Ljava/lang/CharSequence;)I
      13: istore        4
      15: aload_3
      16: invokeinterface #139,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      21: istore        5
      23: iload         4
      25: iconst_3
      26: if_icmpgt     122
      29: iload         5
      31: iconst_3
      32: iload         4
      34: iadd
      35: if_icmple     122
      38: aload_3
      39: iload         4
      41: invokeinterface #140,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.charAt:(I)C
      46: bipush        91
      48: if_icmpne     122
      51: iload         4
      53: ifle          74
      56: aload_3
      57: iload         4
      59: iload         5
      61: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      66: astore_3
      67: iload         5
      69: iload         4
      71: isub
      72: istore        5
      74: aload_0
      75: aload_1
      76: aload_3
      77: invokevirtual #142                // Method parseReference:(Lcom/vladsch/flexmark/ast/Block;Lcom/vladsch/flexmark/util/sequence/BasedSequence;)I
      80: istore        6
      82: iload         6
      84: ifne          90
      87: goto          122
      90: aload_3
      91: iload         6
      93: iload         5
      95: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     100: astore_3
     101: aload_3
     102: invokeinterface #139,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
     107: istore        5
     109: aload_3
     110: ldc           #137                // String  \t
     112: invokeinterface #138,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.countLeading:(Ljava/lang/CharSequence;)I
     117: istore        4
     119: goto          23
     122: aload_3
     123: invokeinterface #143,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
     128: aload_1
     129: invokevirtual #135                // Method com/vladsch/flexmark/ast/Paragraph.getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     132: invokeinterface #143,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
     137: isub
     138: ireturn

  public void moveNodes(com.vladsch.flexmark.ast.Node, com.vladsch.flexmark.ast.Node);
    Code:
       0: aload_1
       1: invokevirtual #127                // Method com/vladsch/flexmark/ast/Node.getNext:()Lcom/vladsch/flexmark/ast/Node;
       4: astore_3
       5: aload_3
       6: ifnull        38
       9: aload_3
      10: invokevirtual #127                // Method com/vladsch/flexmark/ast/Node.getNext:()Lcom/vladsch/flexmark/ast/Node;
      13: astore        4
      15: aload_3
      16: invokevirtual #132                // Method com/vladsch/flexmark/ast/Node.unlink:()V
      19: aload_1
      20: aload_3
      21: invokevirtual #144                // Method com/vladsch/flexmark/ast/Node.appendChild:(Lcom/vladsch/flexmark/ast/Node;)V
      24: aload_3
      25: aload_2
      26: if_acmpne     32
      29: goto          38
      32: aload         4
      34: astore_3
      35: goto          5
      38: aload_1
      39: invokevirtual #145                // Method com/vladsch/flexmark/ast/Node.setCharsFromContent:()V
      42: return

  protected int parseReference(com.vladsch.flexmark.ast.Block, com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       5: aload_0
       6: iconst_0
       7: putfield      #112                // Field index:I
      10: aload_0
      11: getfield      #112                // Field index:I
      14: istore        6
      16: aload_0
      17: invokevirtual #146                // Method parseLinkLabel:()I
      20: istore        5
      22: iload         5
      24: ifne          29
      27: iconst_0
      28: ireturn
      29: aload_0
      30: invokevirtual #147                // Method peek:()C
      33: bipush        58
      35: if_icmpeq     40
      38: iconst_0
      39: ireturn
      40: aload_0
      41: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      44: iconst_0
      45: iload         5
      47: iconst_1
      48: iadd
      49: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      54: astore        7
      56: aload_0
      57: dup
      58: getfield      #112                // Field index:I
      61: iconst_1
      62: iadd
      63: putfield      #112                // Field index:I
      66: aload_0
      67: invokevirtual #148                // Method spnl:()Z
      70: pop
      71: aload_0
      72: invokevirtual #149                // Method parseLinkDestination:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      75: astore_3
      76: aload_3
      77: ifnull        89
      80: aload_3
      81: invokeinterface #139,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      86: ifne          91
      89: iconst_0
      90: ireturn
      91: aload_0
      92: getfield      #112                // Field index:I
      95: istore        8
      97: aload_0
      98: invokevirtual #148                // Method spnl:()Z
     101: pop
     102: aload_0
     103: invokevirtual #150                // Method parseLinkTitle:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     106: astore        4
     108: aload         4
     110: ifnonnull     119
     113: aload_0
     114: iload         8
     116: putfield      #112                // Field index:I
     119: iconst_1
     120: istore        9
     122: aload_0
     123: getfield      #112                // Field index:I
     126: aload_0
     127: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     130: invokeinterface #139,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
     135: if_icmpeq     193
     138: aload_0
     139: aload_0
     140: getfield      #35                 // Field myParsing:Lcom/vladsch/flexmark/ast/util/Parsing;
     143: getfield      #151                // Field com/vladsch/flexmark/ast/util/Parsing.LINE_END:Ljava/util/regex/Pattern;
     146: invokevirtual #152                // Method match:(Ljava/util/regex/Pattern;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     149: ifnonnull     193
     152: aload         4
     154: ifnonnull     163
     157: iconst_0
     158: istore        9
     160: goto          193
     163: aconst_null
     164: astore        4
     166: aload_0
     167: iload         8
     169: putfield      #112                // Field index:I
     172: aload_0
     173: aload_0
     174: getfield      #35                 // Field myParsing:Lcom/vladsch/flexmark/ast/util/Parsing;
     177: getfield      #151                // Field com/vladsch/flexmark/ast/util/Parsing.LINE_END:Ljava/util/regex/Pattern;
     180: invokevirtual #152                // Method match:(Ljava/util/regex/Pattern;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     183: ifnull        190
     186: iconst_1
     187: goto          191
     190: iconst_0
     191: istore        9
     193: iload         9
     195: ifne          200
     198: iconst_0
     199: ireturn
     200: aload         7
     202: iconst_1
     203: invokestatic  #153                // Method com/vladsch/flexmark/util/html/Escaping.normalizeReferenceChars:(Ljava/lang/CharSequence;Z)Ljava/lang/String;
     206: astore        10
     208: aload         10
     210: invokevirtual #154                // Method java/lang/String.isEmpty:()Z
     213: ifeq          218
     216: iconst_0
     217: ireturn
     218: new           #155                // class com/vladsch/flexmark/ast/Reference
     221: dup
     222: aload         7
     224: aload_3
     225: aload         4
     227: invokespecial #156                // Method com/vladsch/flexmark/ast/Reference."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;Lcom/vladsch/flexmark/util/sequence/BasedSequence;Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     230: astore        11
     232: aload_0
     233: getfield      #34                 // Field referenceRepository:Lcom/vladsch/flexmark/ast/util/ReferenceRepository;
     236: aload         10
     238: aload         11
     240: invokevirtual #157                // Method com/vladsch/flexmark/ast/util/ReferenceRepository.put:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;
     243: pop
     244: aload_1
     245: aload         11
     247: invokevirtual #158                // Method com/vladsch/flexmark/ast/Block.insertBefore:(Lcom/vladsch/flexmark/ast/Node;)V
     250: aload_0
     251: getfield      #112                // Field index:I
     254: iload         6
     256: isub
     257: ireturn

  public void appendText(com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: invokevirtual #159                // Method getCurrentText:()Ljava/util/ArrayList;
       4: aload_1
       5: invokevirtual #129                // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
       8: pop
       9: return

  public void appendText(com.vladsch.flexmark.util.sequence.BasedSequence, int, int);
    Code:
       0: aload_0
       1: invokevirtual #159                // Method getCurrentText:()Ljava/util/ArrayList;
       4: aload_1
       5: iload_2
       6: iload_3
       7: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      12: invokevirtual #129                // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
      15: pop
      16: return

  public void appendNode(com.vladsch.flexmark.ast.Node);
    Code:
       0: aload_0
       1: invokevirtual #120                // Method flushTextNode:()V
       4: aload_0
       5: getfield      #115                // Field block:Lcom/vladsch/flexmark/ast/Node;
       8: aload_1
       9: invokevirtual #144                // Method com/vladsch/flexmark/ast/Node.appendChild:(Lcom/vladsch/flexmark/ast/Node;)V
      12: return

  public com.vladsch.flexmark.ast.Text appendSeparateText(com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: new           #125                // class com/vladsch/flexmark/ast/Text
       3: dup
       4: aload_1
       5: invokespecial #160                // Method com/vladsch/flexmark/ast/Text."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
       8: astore_2
       9: aload_0
      10: aload_2
      11: invokevirtual #161                // Method appendNode:(Lcom/vladsch/flexmark/ast/Node;)V
      14: aload_2
      15: areturn

  public void flushTextNode();
    Code:
       0: aload_0
       1: getfield      #61                 // Field currentText:Ljava/util/ArrayList;
       4: ifnull        36
       7: aload_0
       8: getfield      #115                // Field block:Lcom/vladsch/flexmark/ast/Node;
      11: new           #125                // class com/vladsch/flexmark/ast/Text
      14: dup
      15: aload_0
      16: getfield      #61                 // Field currentText:Ljava/util/ArrayList;
      19: getstatic     #162                // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      22: invokestatic  #133                // Method com/vladsch/flexmark/util/sequence/SegmentedSequence.of:(Ljava/util/List;Lcom/vladsch/flexmark/util/sequence/BasedSequence;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      25: invokespecial #160                // Method com/vladsch/flexmark/ast/Text."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
      28: invokevirtual #144                // Method com/vladsch/flexmark/ast/Node.appendChild:(Lcom/vladsch/flexmark/ast/Node;)V
      31: aload_0
      32: aconst_null
      33: putfield      #61                 // Field currentText:Ljava/util/ArrayList;
      36: return

  protected boolean parseInline();
    Code:
       0: aload_0
       1: invokevirtual #147                // Method peek:()C
       4: istore_2
       5: iload_2
       6: ifne          11
       9: iconst_0
      10: ireturn
      11: aload_0
      12: getfield      #45                 // Field inlineParserExtensions:Ljava/util/Map;
      15: ifnull        87
      18: aload_0
      19: getfield      #45                 // Field inlineParserExtensions:Ljava/util/Map;
      22: iload_2
      23: invokestatic  #10                 // Method java/lang/Character.valueOf:(C)Ljava/lang/Character;
      26: invokeinterface #11,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      31: checkcast     #12                 // class java/util/List
      34: astore_3
      35: aload_3
      36: ifnull        87
      39: aload_3
      40: invokeinterface #3,  1            // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      45: astore        4
      47: aload         4
      49: invokeinterface #4,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      54: ifeq          87
      57: aload         4
      59: invokeinterface #5,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      64: checkcast     #59                 // class com/vladsch/flexmark/parser/InlineParserExtension
      67: astore        5
      69: aload         5
      71: aload_0
      72: invokeinterface #163,  2          // InterfaceMethod com/vladsch/flexmark/parser/InlineParserExtension.parse:(Lcom/vladsch/flexmark/parser/InlineParser;)Z
      77: istore_1
      78: iload_1
      79: ifeq          84
      82: iconst_1
      83: ireturn
      84: goto          47
      87: aload_0
      88: getfield      #63                 // Field customCharacters:Ljava/util/BitSet;
      91: ifnull        149
      94: aload_0
      95: getfield      #63                 // Field customCharacters:Ljava/util/BitSet;
      98: iload_2
      99: invokevirtual #164                // Method java/util/BitSet.get:(I)Z
     102: ifeq          149
     105: aload_0
     106: invokespecial #165                // Method processCustomCharacters:()Z
     109: istore_1
     110: iload_1
     111: ifne          147
     114: aload_0
     115: dup
     116: getfield      #112                // Field index:I
     119: iconst_1
     120: iadd
     121: putfield      #112                // Field index:I
     124: aload_0
     125: aload_0
     126: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     129: aload_0
     130: getfield      #112                // Field index:I
     133: iconst_1
     134: isub
     135: aload_0
     136: getfield      #112                // Field index:I
     139: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     144: invokevirtual #166                // Method appendText:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     147: iconst_1
     148: ireturn
     149: iload_2
     150: lookupswitch  { // 8
                    10: 224
                    33: 256
                    38: 347
                    60: 272
                    91: 248
                    92: 232
                    93: 264
                    96: 240
               default: 355
          }
     224: aload_0
     225: invokevirtual #167                // Method parseNewline:()Z
     228: istore_1
     229: goto          402
     232: aload_0
     233: invokevirtual #168                // Method parseBackslash:()Z
     236: istore_1
     237: goto          402
     240: aload_0
     241: invokevirtual #169                // Method parseBackticks:()Z
     244: istore_1
     245: goto          402
     248: aload_0
     249: invokevirtual #170                // Method parseOpenBracket:()Z
     252: istore_1
     253: goto          402
     256: aload_0
     257: invokevirtual #171                // Method parseBang:()Z
     260: istore_1
     261: goto          402
     264: aload_0
     265: invokevirtual #172                // Method parseCloseBracket:()Z
     268: istore_1
     269: goto          402
     272: aload_0
     273: getfield      #72                 // Field delimiterCharacters:Ljava/util/BitSet;
     276: iload_2
     277: invokevirtual #164                // Method java/util/BitSet.get:(I)Z
     280: istore_3
     281: iload_3
     282: ifeq          324
     285: aload_0
     286: iconst_1
     287: invokevirtual #173                // Method peek:(I)C
     290: bipush        60
     292: if_icmpne     324
     295: aload_0
     296: getfield      #71                 // Field delimiterProcessors:Ljava/util/Map;
     299: iload_2
     300: invokestatic  #10                 // Method java/lang/Character.valueOf:(C)Ljava/lang/Character;
     303: invokeinterface #11,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
     308: checkcast     #98                 // class com/vladsch/flexmark/parser/delimiter/DelimiterProcessor
     311: astore        4
     313: aload_0
     314: aload         4
     316: iload_2
     317: invokevirtual #174                // Method parseDelimiters:(Lcom/vladsch/flexmark/parser/delimiter/DelimiterProcessor;C)Z
     320: istore_1
     321: goto          344
     324: aload_0
     325: invokevirtual #175                // Method parseAutolink:()Z
     328: ifne          338
     331: aload_0
     332: invokevirtual #176                // Method parseHtmlInline:()Z
     335: ifeq          342
     338: iconst_1
     339: goto          343
     342: iconst_0
     343: istore_1
     344: goto          402
     347: aload_0
     348: invokevirtual #177                // Method parseEntity:()Z
     351: istore_1
     352: goto          402
     355: aload_0
     356: getfield      #72                 // Field delimiterCharacters:Ljava/util/BitSet;
     359: iload_2
     360: invokevirtual #164                // Method java/util/BitSet.get:(I)Z
     363: istore_3
     364: iload_3
     365: ifeq          397
     368: aload_0
     369: getfield      #71                 // Field delimiterProcessors:Ljava/util/Map;
     372: iload_2
     373: invokestatic  #10                 // Method java/lang/Character.valueOf:(C)Ljava/lang/Character;
     376: invokeinterface #11,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
     381: checkcast     #98                 // class com/vladsch/flexmark/parser/delimiter/DelimiterProcessor
     384: astore        4
     386: aload_0
     387: aload         4
     389: iload_2
     390: invokevirtual #174                // Method parseDelimiters:(Lcom/vladsch/flexmark/parser/delimiter/DelimiterProcessor;C)Z
     393: istore_1
     394: goto          402
     397: aload_0
     398: invokevirtual #178                // Method parseString:()Z
     401: istore_1
     402: iload_1
     403: ifne          439
     406: aload_0
     407: dup
     408: getfield      #112                // Field index:I
     411: iconst_1
     412: iadd
     413: putfield      #112                // Field index:I
     416: aload_0
     417: aload_0
     418: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     421: aload_0
     422: getfield      #112                // Field index:I
     425: iconst_1
     426: isub
     427: aload_0
     428: getfield      #112                // Field index:I
     431: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     436: invokevirtual #166                // Method appendText:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     439: iconst_1
     440: ireturn

  private boolean processCustomCharacters();
    Code:
       0: aload_0
       1: invokevirtual #147                // Method peek:()C
       4: istore_1
       5: aload_0
       6: getfield      #64                 // Field customSpecialCharacterFactoryMap:Ljava/util/Map;
       9: iload_1
      10: invokestatic  #10                 // Method java/lang/Character.valueOf:(C)Ljava/lang/Character;
      13: invokeinterface #11,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      18: checkcast     #179                // class com/vladsch/flexmark/parser/block/CharacterNodeFactory
      21: astore_2
      22: aload_2
      23: ifnonnull     28
      26: iconst_0
      27: ireturn
      28: aload_2
      29: invokeinterface #180,  1          // InterfaceMethod com/vladsch/flexmark/parser/block/CharacterNodeFactory.create:()Ljava/lang/Object;
      34: checkcast     #181                // class com/vladsch/flexmark/ast/Node
      37: astore_3
      38: aload_3
      39: aload_0
      40: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      43: aload_0
      44: getfield      #112                // Field index:I
      47: aload_0
      48: getfield      #112                // Field index:I
      51: iconst_1
      52: iadd
      53: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      58: invokevirtual #182                // Method com/vladsch/flexmark/ast/Node.setChars:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
      61: aload_0
      62: getfield      #61                 // Field currentText:Ljava/util/ArrayList;
      65: ifnull        209
      68: aload_0
      69: getfield      #61                 // Field currentText:Ljava/util/ArrayList;
      72: getstatic     #162                // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      75: invokestatic  #133                // Method com/vladsch/flexmark/util/sequence/SegmentedSequence.of:(Ljava/util/List;Lcom/vladsch/flexmark/util/sequence/BasedSequence;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      78: astore        4
      80: aload_0
      81: aconst_null
      82: putfield      #61                 // Field currentText:Ljava/util/ArrayList;
      85: aload         4
      87: invokeinterface #139,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      92: istore        5
      94: aconst_null
      95: astore        6
      97: iload         5
      99: ifle          128
     102: aload_2
     103: aload         4
     105: iload         5
     107: iconst_1
     108: isub
     109: invokeinterface #140,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.charAt:(I)C
     114: invokeinterface #183,  2          // InterfaceMethod com/vladsch/flexmark/parser/block/CharacterNodeFactory.skipPrev:(C)Z
     119: ifeq          128
     122: iinc          5, -1
     125: goto          97
     128: iload         5
     130: aload         4
     132: invokeinterface #139,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
     137: if_icmpge     163
     140: aload         4
     142: iload         5
     144: invokeinterface #184,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(I)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     149: astore        6
     151: aload         4
     153: iconst_0
     154: iload         5
     156: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     161: astore        4
     163: aload_0
     164: getfield      #115                // Field block:Lcom/vladsch/flexmark/ast/Node;
     167: new           #125                // class com/vladsch/flexmark/ast/Text
     170: dup
     171: aload         4
     173: invokespecial #160                // Method com/vladsch/flexmark/ast/Text."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     176: invokevirtual #144                // Method com/vladsch/flexmark/ast/Node.appendChild:(Lcom/vladsch/flexmark/ast/Node;)V
     179: aload         6
     181: ifnull        209
     184: aload_2
     185: invokeinterface #185,  1          // InterfaceMethod com/vladsch/flexmark/parser/block/CharacterNodeFactory.wantSkippedWhitespace:()Z
     190: ifeq          209
     193: aload_0
     194: getfield      #115                // Field block:Lcom/vladsch/flexmark/ast/Node;
     197: new           #186                // class com/vladsch/flexmark/ast/WhiteSpace
     200: dup
     201: aload         6
     203: invokespecial #187                // Method com/vladsch/flexmark/ast/WhiteSpace."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     206: invokevirtual #144                // Method com/vladsch/flexmark/ast/Node.appendChild:(Lcom/vladsch/flexmark/ast/Node;)V
     209: aload_0
     210: aload_3
     211: invokevirtual #161                // Method appendNode:(Lcom/vladsch/flexmark/ast/Node;)V
     214: aload_0
     215: getfield      #65                 // Field customSpecialCharacterNodes:Ljava/util/ArrayList;
     218: ifnonnull     232
     221: aload_0
     222: new           #13                 // class java/util/ArrayList
     225: dup
     226: invokespecial #14                 // Method java/util/ArrayList."<init>":()V
     229: putfield      #65                 // Field customSpecialCharacterNodes:Ljava/util/ArrayList;
     232: aload_0
     233: getfield      #65                 // Field customSpecialCharacterNodes:Ljava/util/ArrayList;
     236: aload_3
     237: invokevirtual #129                // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
     240: pop
     241: aload_0
     242: getfield      #112                // Field index:I
     245: iconst_1
     246: iadd
     247: istore        4
     249: aload_0
     250: dup
     251: getfield      #112                // Field index:I
     254: iconst_1
     255: iadd
     256: putfield      #112                // Field index:I
     259: aload_0
     260: invokevirtual #147                // Method peek:()C
     263: istore_1
     264: iload_1
     265: ifeq          278
     268: aload_2
     269: iload_1
     270: invokeinterface #188,  2          // InterfaceMethod com/vladsch/flexmark/parser/block/CharacterNodeFactory.skipNext:(C)Z
     275: ifne          249
     278: iload         4
     280: aload_0
     281: getfield      #112                // Field index:I
     284: if_icmpge     325
     287: aload_2
     288: invokeinterface #185,  1          // InterfaceMethod com/vladsch/flexmark/parser/block/CharacterNodeFactory.wantSkippedWhitespace:()Z
     293: ifeq          325
     296: aload_0
     297: getfield      #115                // Field block:Lcom/vladsch/flexmark/ast/Node;
     300: new           #186                // class com/vladsch/flexmark/ast/WhiteSpace
     303: dup
     304: aload_0
     305: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     308: iload         4
     310: aload_0
     311: getfield      #112                // Field index:I
     314: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     319: invokespecial #187                // Method com/vladsch/flexmark/ast/WhiteSpace."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     322: invokevirtual #144                // Method com/vladsch/flexmark/ast/Node.appendChild:(Lcom/vladsch/flexmark/ast/Node;)V
     325: iconst_1
     326: ireturn

  public com.vladsch.flexmark.util.sequence.BasedSequence match(java.util.regex.Pattern);
    Code:
       0: aload_0
       1: getfield      #112                // Field index:I
       4: aload_0
       5: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       8: invokeinterface #139,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      13: if_icmplt     18
      16: aconst_null
      17: areturn
      18: aload_1
      19: aload_0
      20: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      23: invokevirtual #189                // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
      26: astore_2
      27: aload_2
      28: aload_0
      29: getfield      #112                // Field index:I
      32: aload_0
      33: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      36: invokeinterface #139,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      41: invokevirtual #190                // Method java/util/regex/Matcher.region:(II)Ljava/util/regex/Matcher;
      44: pop
      45: aload_2
      46: invokevirtual #191                // Method java/util/regex/Matcher.find:()Z
      49: istore_3
      50: iload_3
      51: ifeq          92
      54: aload_0
      55: aload_2
      56: invokevirtual #192                // Method java/util/regex/Matcher.end:()I
      59: putfield      #112                // Field index:I
      62: aload_2
      63: invokevirtual #193                // Method java/util/regex/Matcher.toMatchResult:()Ljava/util/regex/MatchResult;
      66: astore        4
      68: aload_0
      69: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      72: aload         4
      74: invokeinterface #194,  1          // InterfaceMethod java/util/regex/MatchResult.start:()I
      79: aload         4
      81: invokeinterface #195,  1          // InterfaceMethod java/util/regex/MatchResult.end:()I
      86: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      91: areturn
      92: aconst_null
      93: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence[] matchWithGroups(java.util.regex.Pattern);
    Code:
       0: aload_0
       1: getfield      #112                // Field index:I
       4: aload_0
       5: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       8: invokeinterface #139,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      13: if_icmplt     18
      16: aconst_null
      17: areturn
      18: aload_1
      19: aload_0
      20: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      23: invokevirtual #189                // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
      26: astore_2
      27: aload_2
      28: aload_0
      29: getfield      #112                // Field index:I
      32: aload_0
      33: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      36: invokeinterface #139,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      41: invokevirtual #190                // Method java/util/regex/Matcher.region:(II)Ljava/util/regex/Matcher;
      44: pop
      45: aload_2
      46: invokevirtual #191                // Method java/util/regex/Matcher.find:()Z
      49: istore_3
      50: iload_3
      51: ifeq          179
      54: aload_0
      55: aload_2
      56: invokevirtual #192                // Method java/util/regex/Matcher.end:()I
      59: putfield      #112                // Field index:I
      62: aload_2
      63: invokevirtual #193                // Method java/util/regex/Matcher.toMatchResult:()Ljava/util/regex/MatchResult;
      66: astore        4
      68: aload_2
      69: invokevirtual #196                // Method java/util/regex/Matcher.groupCount:()I
      72: iconst_1
      73: iadd
      74: istore        5
      76: iload         5
      78: anewarray     #136                // class com/vladsch/flexmark/util/sequence/BasedSequence
      81: astore        6
      83: aload         6
      85: iconst_0
      86: aload_0
      87: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      90: aload         4
      92: invokeinterface #194,  1          // InterfaceMethod java/util/regex/MatchResult.start:()I
      97: aload         4
      99: invokeinterface #195,  1          // InterfaceMethod java/util/regex/MatchResult.end:()I
     104: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     109: aastore
     110: iconst_1
     111: istore        7
     113: iload         7
     115: iload         5
     117: if_icmpge     176
     120: aload_2
     121: iload         7
     123: invokevirtual #197                // Method java/util/regex/Matcher.group:(I)Ljava/lang/String;
     126: ifnull        164
     129: aload         6
     131: iload         7
     133: aload_0
     134: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     137: aload         4
     139: iload         7
     141: invokeinterface #198,  2          // InterfaceMethod java/util/regex/MatchResult.start:(I)I
     146: aload         4
     148: iload         7
     150: invokeinterface #199,  2          // InterfaceMethod java/util/regex/MatchResult.end:(I)I
     155: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     160: aastore
     161: goto          170
     164: aload         6
     166: iload         7
     168: aconst_null
     169: aastore
     170: iinc          7, 1
     173: goto          113
     176: aload         6
     178: areturn
     179: aconst_null
     180: areturn

  public java.util.regex.Matcher matcher(java.util.regex.Pattern);
    Code:
       0: aload_0
       1: getfield      #112                // Field index:I
       4: aload_0
       5: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       8: invokeinterface #139,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      13: if_icmplt     18
      16: aconst_null
      17: areturn
      18: aload_1
      19: aload_0
      20: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      23: invokevirtual #189                // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
      26: astore_2
      27: aload_2
      28: aload_0
      29: getfield      #112                // Field index:I
      32: aload_0
      33: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      36: invokeinterface #139,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      41: invokevirtual #190                // Method java/util/regex/Matcher.region:(II)Ljava/util/regex/Matcher;
      44: pop
      45: aload_2
      46: invokevirtual #191                // Method java/util/regex/Matcher.find:()Z
      49: istore_3
      50: iload_3
      51: ifeq          64
      54: aload_0
      55: aload_2
      56: invokevirtual #192                // Method java/util/regex/Matcher.end:()I
      59: putfield      #112                // Field index:I
      62: aload_2
      63: areturn
      64: aconst_null
      65: areturn

  public char peek();
    Code:
       0: aload_0
       1: getfield      #112                // Field index:I
       4: aload_0
       5: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       8: invokeinterface #139,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      13: if_icmpge     30
      16: aload_0
      17: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      20: aload_0
      21: getfield      #112                // Field index:I
      24: invokeinterface #140,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.charAt:(I)C
      29: ireturn
      30: iconst_0
      31: ireturn

  public char peek(int);
    Code:
       0: aload_0
       1: getfield      #112                // Field index:I
       4: iload_1
       5: iadd
       6: aload_0
       7: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      10: invokeinterface #139,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      15: if_icmpge     34
      18: aload_0
      19: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      22: aload_0
      23: getfield      #112                // Field index:I
      26: iload_1
      27: iadd
      28: invokeinterface #140,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.charAt:(I)C
      33: ireturn
      34: iconst_0
      35: ireturn

  public boolean spnl();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #35                 // Field myParsing:Lcom/vladsch/flexmark/ast/util/Parsing;
       5: getfield      #200                // Field com/vladsch/flexmark/ast/util/Parsing.SPNL:Ljava/util/regex/Pattern;
       8: invokevirtual #152                // Method match:(Ljava/util/regex/Pattern;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      11: pop
      12: iconst_1
      13: ireturn

  public boolean nonIndentSp();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #35                 // Field myParsing:Lcom/vladsch/flexmark/ast/util/Parsing;
       5: getfield      #201                // Field com/vladsch/flexmark/ast/util/Parsing.SPNI:Ljava/util/regex/Pattern;
       8: invokevirtual #152                // Method match:(Ljava/util/regex/Pattern;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      11: pop
      12: iconst_1
      13: ireturn

  public boolean sp();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #35                 // Field myParsing:Lcom/vladsch/flexmark/ast/util/Parsing;
       5: getfield      #202                // Field com/vladsch/flexmark/ast/util/Parsing.SP:Ljava/util/regex/Pattern;
       8: invokevirtual #152                // Method match:(Ljava/util/regex/Pattern;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      11: pop
      12: iconst_1
      13: ireturn

  public boolean spnlUrl();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #35                 // Field myParsing:Lcom/vladsch/flexmark/ast/util/Parsing;
       5: getfield      #203                // Field com/vladsch/flexmark/ast/util/Parsing.SPNL_URL:Ljava/util/regex/Pattern;
       8: invokevirtual #152                // Method match:(Ljava/util/regex/Pattern;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      11: ifnull        18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn

  public com.vladsch.flexmark.util.sequence.BasedSequence toEOL();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #35                 // Field myParsing:Lcom/vladsch/flexmark/ast/util/Parsing;
       5: getfield      #204                // Field com/vladsch/flexmark/ast/util/Parsing.REST_OF_LINE:Ljava/util/regex/Pattern;
       8: invokevirtual #152                // Method match:(Ljava/util/regex/Pattern;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      11: areturn

  public boolean parseNewline();
    Code:
       0: aload_0
       1: getfield      #112                // Field index:I
       4: ifle          31
       7: aload_0
       8: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      11: aload_0
      12: getfield      #112                // Field index:I
      15: iconst_1
      16: isub
      17: invokeinterface #140,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.charAt:(I)C
      22: bipush        13
      24: if_icmpne     31
      27: iconst_1
      28: goto          32
      31: iconst_0
      32: istore_1
      33: iload_1
      34: ifeq          41
      37: iconst_1
      38: goto          42
      41: iconst_0
      42: istore_2
      43: aload_0
      44: dup
      45: getfield      #112                // Field index:I
      48: iconst_1
      49: iadd
      50: putfield      #112                // Field index:I
      53: aload_0
      54: invokevirtual #120                // Method flushTextNode:()V
      57: aload_0
      58: getfield      #115                // Field block:Lcom/vladsch/flexmark/ast/Node;
      61: invokevirtual #123                // Method com/vladsch/flexmark/ast/Node.getLastChild:()Lcom/vladsch/flexmark/ast/Node;
      64: astore_3
      65: aload_3
      66: ifnull        308
      69: aload_3
      70: instanceof    #125                // class com/vladsch/flexmark/ast/Text
      73: ifeq          308
      76: aload_3
      77: invokevirtual #131                // Method com/vladsch/flexmark/ast/Node.getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      80: ldc           #205                // String
      82: invokeinterface #206,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.endsWith:(Ljava/lang/CharSequence;)Z
      87: ifne          108
      90: iload_1
      91: ifeq          308
      94: aload_3
      95: invokevirtual #131                // Method com/vladsch/flexmark/ast/Node.getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      98: ldc           #207                // String  \r
     100: invokeinterface #206,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.endsWith:(Ljava/lang/CharSequence;)Z
     105: ifeq          308
     108: aload_3
     109: checkcast     #125                // class com/vladsch/flexmark/ast/Text
     112: astore        4
     114: aload         4
     116: invokevirtual #128                // Method com/vladsch/flexmark/ast/Text.getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     119: astore        5
     121: aload_0
     122: getfield      #35                 // Field myParsing:Lcom/vladsch/flexmark/ast/util/Parsing;
     125: getfield      #208                // Field com/vladsch/flexmark/ast/util/Parsing.FINAL_SPACE:Ljava/util/regex/Pattern;
     128: aload         5
     130: invokevirtual #189                // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
     133: astore        6
     135: aload         6
     137: invokevirtual #191                // Method java/util/regex/Matcher.find:()Z
     140: ifeq          159
     143: aload         6
     145: invokevirtual #192                // Method java/util/regex/Matcher.end:()I
     148: aload         6
     150: invokevirtual #209                // Method java/util/regex/Matcher.start:()I
     153: isub
     154: iload_2
     155: isub
     156: goto          160
     159: iconst_0
     160: istore        7
     162: aload_0
     163: iload         7
     165: iconst_2
     166: if_icmplt     219
     169: new           #210                // class com/vladsch/flexmark/ast/HardLineBreak
     172: dup
     173: aload_0
     174: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     177: aload_0
     178: getfield      #112                // Field index:I
     181: aload_0
     182: getfield      #70                 // Field options:Lcom/vladsch/flexmark/parser/InlineParserOptions;
     185: getfield      #211                // Field com/vladsch/flexmark/parser/InlineParserOptions.hardLineBreakLimit:Z
     188: ifeq          197
     191: iconst_3
     192: iload_2
     193: iadd
     194: goto          203
     197: iload         7
     199: iconst_1
     200: iadd
     201: iload_2
     202: iadd
     203: isub
     204: aload_0
     205: getfield      #112                // Field index:I
     208: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     213: invokespecial #212                // Method com/vladsch/flexmark/ast/HardLineBreak."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     216: goto          247
     219: new           #213                // class com/vladsch/flexmark/ast/SoftLineBreak
     222: dup
     223: aload_0
     224: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     227: aload_0
     228: getfield      #112                // Field index:I
     231: iconst_1
     232: isub
     233: iload_2
     234: isub
     235: aload_0
     236: getfield      #112                // Field index:I
     239: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     244: invokespecial #214                // Method com/vladsch/flexmark/ast/SoftLineBreak."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     247: invokevirtual #161                // Method appendNode:(Lcom/vladsch/flexmark/ast/Node;)V
     250: iload         7
     252: iload_2
     253: iadd
     254: ifle          305
     257: aload         5
     259: invokeinterface #139,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
     264: iload         7
     266: if_icmple     301
     269: aload_3
     270: aload         5
     272: iconst_0
     273: aload         5
     275: invokeinterface #139,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
     280: iload         7
     282: isub
     283: iload_2
     284: isub
     285: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     290: invokeinterface #215,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.trimEnd:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     295: invokevirtual #182                // Method com/vladsch/flexmark/ast/Node.setChars:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     298: goto          305
     301: aload_3
     302: invokevirtual #132                // Method com/vladsch/flexmark/ast/Node.unlink:()V
     305: goto          412
     308: iload_1
     309: ifeq          380
     312: aload_3
     313: ifnull        380
     316: aload_3
     317: instanceof    #125                // class com/vladsch/flexmark/ast/Text
     320: ifeq          380
     323: aload_3
     324: checkcast     #125                // class com/vladsch/flexmark/ast/Text
     327: astore        4
     329: aload         4
     331: invokevirtual #128                // Method com/vladsch/flexmark/ast/Text.getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     334: astore        5
     336: aload         5
     338: invokeinterface #139,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
     343: iconst_1
     344: if_icmple     376
     347: aload_3
     348: aload         5
     350: iconst_0
     351: aload         5
     353: invokeinterface #139,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
     358: iload_2
     359: isub
     360: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     365: invokeinterface #215,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.trimEnd:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     370: invokevirtual #182                // Method com/vladsch/flexmark/ast/Node.setChars:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     373: goto          380
     376: aload_3
     377: invokevirtual #132                // Method com/vladsch/flexmark/ast/Node.unlink:()V
     380: aload_0
     381: new           #213                // class com/vladsch/flexmark/ast/SoftLineBreak
     384: dup
     385: aload_0
     386: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     389: aload_0
     390: getfield      #112                // Field index:I
     393: iconst_1
     394: isub
     395: iload_2
     396: isub
     397: aload_0
     398: getfield      #112                // Field index:I
     401: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     406: invokespecial #214                // Method com/vladsch/flexmark/ast/SoftLineBreak."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     409: invokevirtual #161                // Method appendNode:(Lcom/vladsch/flexmark/ast/Node;)V
     412: aload_0
     413: invokevirtual #147                // Method peek:()C
     416: bipush        32
     418: if_icmpne     434
     421: aload_0
     422: dup
     423: getfield      #112                // Field index:I
     426: iconst_1
     427: iadd
     428: putfield      #112                // Field index:I
     431: goto          412
     434: iconst_1
     435: ireturn

  protected boolean parseBackslash();
    Code:
       0: aload_0
       1: dup
       2: getfield      #112                // Field index:I
       5: iconst_1
       6: iadd
       7: putfield      #112                // Field index:I
      10: aload_0
      11: invokevirtual #147                // Method peek:()C
      14: bipush        10
      16: if_icmpeq     28
      19: aload_0
      20: invokevirtual #147                // Method peek:()C
      23: bipush        13
      25: if_icmpne     89
      28: aload_0
      29: iconst_1
      30: invokevirtual #173                // Method peek:(I)C
      33: bipush        10
      35: if_icmpne     42
      38: iconst_2
      39: goto          43
      42: iconst_1
      43: istore_1
      44: aload_0
      45: new           #210                // class com/vladsch/flexmark/ast/HardLineBreak
      48: dup
      49: aload_0
      50: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      53: aload_0
      54: getfield      #112                // Field index:I
      57: iconst_1
      58: isub
      59: aload_0
      60: getfield      #112                // Field index:I
      63: iload_1
      64: iadd
      65: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      70: invokespecial #212                // Method com/vladsch/flexmark/ast/HardLineBreak."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
      73: invokevirtual #161                // Method appendNode:(Lcom/vladsch/flexmark/ast/Node;)V
      76: aload_0
      77: dup
      78: getfield      #112                // Field index:I
      81: iload_1
      82: iadd
      83: putfield      #112                // Field index:I
      86: goto          196
      89: aload_0
      90: getfield      #112                // Field index:I
      93: aload_0
      94: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      97: invokeinterface #139,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
     102: if_icmpge     173
     105: aload_0
     106: getfield      #35                 // Field myParsing:Lcom/vladsch/flexmark/ast/util/Parsing;
     109: getfield      #216                // Field com/vladsch/flexmark/ast/util/Parsing.ESCAPABLE:Ljava/util/regex/Pattern;
     112: aload_0
     113: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     116: aload_0
     117: getfield      #112                // Field index:I
     120: aload_0
     121: getfield      #112                // Field index:I
     124: iconst_1
     125: iadd
     126: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     131: invokevirtual #189                // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
     134: invokevirtual #217                // Method java/util/regex/Matcher.matches:()Z
     137: ifeq          173
     140: aload_0
     141: aload_0
     142: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     145: aload_0
     146: getfield      #112                // Field index:I
     149: iconst_1
     150: isub
     151: aload_0
     152: getfield      #112                // Field index:I
     155: iconst_1
     156: iadd
     157: invokevirtual #218                // Method appendText:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;II)V
     160: aload_0
     161: dup
     162: getfield      #112                // Field index:I
     165: iconst_1
     166: iadd
     167: putfield      #112                // Field index:I
     170: goto          196
     173: aload_0
     174: aload_0
     175: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     178: aload_0
     179: getfield      #112                // Field index:I
     182: iconst_1
     183: isub
     184: aload_0
     185: getfield      #112                // Field index:I
     188: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     193: invokevirtual #166                // Method appendText:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     196: iconst_1
     197: ireturn

  protected boolean parseBackticks();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #35                 // Field myParsing:Lcom/vladsch/flexmark/ast/util/Parsing;
       5: getfield      #219                // Field com/vladsch/flexmark/ast/util/Parsing.TICKS_HERE:Ljava/util/regex/Pattern;
       8: invokevirtual #152                // Method match:(Ljava/util/regex/Pattern;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      11: astore_1
      12: aload_1
      13: ifnonnull     18
      16: iconst_0
      17: ireturn
      18: aload_0
      19: getfield      #112                // Field index:I
      22: istore_2
      23: aload_0
      24: aload_0
      25: getfield      #35                 // Field myParsing:Lcom/vladsch/flexmark/ast/util/Parsing;
      28: getfield      #220                // Field com/vladsch/flexmark/ast/util/Parsing.TICKS:Ljava/util/regex/Pattern;
      31: invokevirtual #152                // Method match:(Ljava/util/regex/Pattern;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      34: dup
      35: astore_3
      36: ifnull        369
      39: aload_3
      40: aload_1
      41: invokevirtual #221                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      44: ifeq          23
      47: aload_1
      48: invokeinterface #139,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      53: istore        4
      55: aload_0
      56: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      59: iload_2
      60: iload         4
      62: isub
      63: aload_0
      64: getfield      #112                // Field index:I
      67: iload         4
      69: isub
      70: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      75: astore        5
      77: aload_0
      78: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      81: iload_2
      82: aload_0
      83: getfield      #112                // Field index:I
      86: iload         4
      88: isub
      89: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      94: astore        6
      96: new           #222                // class com/vladsch/flexmark/ast/Code
      99: dup
     100: aload_0
     101: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     104: iload_2
     105: iload         4
     107: isub
     108: iload_2
     109: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     114: aload         6
     116: aload_0
     117: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     120: aload_0
     121: getfield      #112                // Field index:I
     124: iload         4
     126: isub
     127: aload_0
     128: getfield      #112                // Field index:I
     131: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     136: invokespecial #223                // Method com/vladsch/flexmark/ast/Code."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;Lcom/vladsch/flexmark/util/sequence/BasedSequence;Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     139: astore        7
     141: aload_0
     142: getfield      #70                 // Field options:Lcom/vladsch/flexmark/parser/InlineParserOptions;
     145: getfield      #224                // Field com/vladsch/flexmark/parser/InlineParserOptions.codeSoftLineBreaks:Z
     148: ifeq          343
     151: aload         6
     153: invokeinterface #139,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
     158: istore        8
     160: iconst_0
     161: istore        9
     163: iload         9
     165: iload         8
     167: if_icmpge     340
     170: aload         6
     172: ldc           #225                // String \n\r
     174: iload         9
     176: invokeinterface #226,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.indexOfAny:(Ljava/lang/CharSequence;I)I
     181: istore        10
     183: iload         10
     185: iconst_m1
     186: if_icmpne     194
     189: iload         8
     191: goto          196
     194: iload         10
     196: istore        11
     198: iload         11
     200: istore        12
     202: new           #125                // class com/vladsch/flexmark/ast/Text
     205: dup
     206: aload         6
     208: iload         9
     210: iload         11
     212: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     217: invokespecial #160                // Method com/vladsch/flexmark/ast/Text."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     220: astore        13
     222: aload         7
     224: aload         13
     226: invokevirtual #227                // Method com/vladsch/flexmark/ast/Code.appendChild:(Lcom/vladsch/flexmark/ast/Node;)V
     229: iload         11
     231: istore        9
     233: iload         9
     235: iload         8
     237: if_icmplt     243
     240: goto          340
     243: aload         6
     245: iload         9
     247: invokeinterface #140,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.charAt:(I)C
     252: bipush        13
     254: if_icmpne     290
     257: iinc          9, 1
     260: iload         9
     262: iload         8
     264: if_icmplt     270
     267: goto          340
     270: aload         6
     272: iload         9
     274: invokeinterface #140,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.charAt:(I)C
     279: bipush        10
     281: if_icmpne     293
     284: iinc          9, 1
     287: goto          293
     290: iinc          9, 1
     293: iload         9
     295: iload         8
     297: if_icmplt     303
     300: goto          340
     303: iload         12
     305: iload         9
     307: if_icmpge     337
     310: new           #213                // class com/vladsch/flexmark/ast/SoftLineBreak
     313: dup
     314: aload         6
     316: iload         10
     318: iload         9
     320: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     325: invokespecial #214                // Method com/vladsch/flexmark/ast/SoftLineBreak."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     328: astore        14
     330: aload         7
     332: aload         14
     334: invokevirtual #227                // Method com/vladsch/flexmark/ast/Code.appendChild:(Lcom/vladsch/flexmark/ast/Node;)V
     337: goto          163
     340: goto          361
     343: new           #125                // class com/vladsch/flexmark/ast/Text
     346: dup
     347: aload         6
     349: invokespecial #160                // Method com/vladsch/flexmark/ast/Text."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     352: astore        8
     354: aload         7
     356: aload         8
     358: invokevirtual #227                // Method com/vladsch/flexmark/ast/Code.appendChild:(Lcom/vladsch/flexmark/ast/Node;)V
     361: aload_0
     362: aload         7
     364: invokevirtual #161                // Method appendNode:(Lcom/vladsch/flexmark/ast/Node;)V
     367: iconst_1
     368: ireturn
     369: aload_0
     370: iload_2
     371: putfield      #112                // Field index:I
     374: aload_0
     375: aload_1
     376: invokevirtual #166                // Method appendText:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     379: iconst_1
     380: ireturn

  protected boolean parseDelimiters(com.vladsch.flexmark.parser.delimiter.DelimiterProcessor, char);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokevirtual #228                // Method scanDelimiters:(Lcom/vladsch/flexmark/parser/delimiter/DelimiterProcessor;C)Lcom/vladsch/flexmark/internal/InlineParserImpl$DelimiterData;
       6: astore_3
       7: aload_3
       8: ifnonnull     13
      11: iconst_0
      12: ireturn
      13: aload_3
      14: getfield      #229                // Field com/vladsch/flexmark/internal/InlineParserImpl$DelimiterData.count:I
      17: istore        4
      19: aload_0
      20: getfield      #112                // Field index:I
      23: istore        5
      25: aload_0
      26: dup
      27: getfield      #112                // Field index:I
      30: iload         4
      32: iadd
      33: putfield      #112                // Field index:I
      36: aload_0
      37: aload_0
      38: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      41: iload         5
      43: aload_0
      44: getfield      #112                // Field index:I
      47: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      52: invokevirtual #230                // Method appendSeparateText:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)Lcom/vladsch/flexmark/ast/Text;
      55: astore        6
      57: aload_0
      58: new           #231                // class com/vladsch/flexmark/internal/Delimiter
      61: dup
      62: aload_0
      63: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      66: aload         6
      68: iload_2
      69: aload_3
      70: getfield      #232                // Field com/vladsch/flexmark/internal/InlineParserImpl$DelimiterData.canOpen:Z
      73: aload_3
      74: getfield      #233                // Field com/vladsch/flexmark/internal/InlineParserImpl$DelimiterData.canClose:Z
      77: aload_0
      78: getfield      #113                // Field lastDelimiter:Lcom/vladsch/flexmark/internal/Delimiter;
      81: iload         5
      83: invokespecial #234                // Method com/vladsch/flexmark/internal/Delimiter."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;Lcom/vladsch/flexmark/ast/Text;CZZLcom/vladsch/flexmark/internal/Delimiter;I)V
      86: putfield      #113                // Field lastDelimiter:Lcom/vladsch/flexmark/internal/Delimiter;
      89: aload_0
      90: getfield      #113                // Field lastDelimiter:Lcom/vladsch/flexmark/internal/Delimiter;
      93: iload         4
      95: putfield      #235                // Field com/vladsch/flexmark/internal/Delimiter.numDelims:I
      98: aload_0
      99: getfield      #113                // Field lastDelimiter:Lcom/vladsch/flexmark/internal/Delimiter;
     102: getfield      #236                // Field com/vladsch/flexmark/internal/Delimiter.previous:Lcom/vladsch/flexmark/internal/Delimiter;
     105: ifnull        122
     108: aload_0
     109: getfield      #113                // Field lastDelimiter:Lcom/vladsch/flexmark/internal/Delimiter;
     112: getfield      #236                // Field com/vladsch/flexmark/internal/Delimiter.previous:Lcom/vladsch/flexmark/internal/Delimiter;
     115: aload_0
     116: getfield      #113                // Field lastDelimiter:Lcom/vladsch/flexmark/internal/Delimiter;
     119: putfield      #237                // Field com/vladsch/flexmark/internal/Delimiter.next:Lcom/vladsch/flexmark/internal/Delimiter;
     122: iconst_1
     123: ireturn

  protected boolean parseOpenBracket();
    Code:
       0: aload_0
       1: getfield      #112                // Field index:I
       4: istore_1
       5: aload_0
       6: dup
       7: getfield      #112                // Field index:I
      10: iconst_1
      11: iadd
      12: putfield      #112                // Field index:I
      15: aload_0
      16: aload_0
      17: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      20: aload_0
      21: getfield      #112                // Field index:I
      24: iconst_1
      25: isub
      26: aload_0
      27: getfield      #112                // Field index:I
      30: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      35: invokevirtual #230                // Method appendSeparateText:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)Lcom/vladsch/flexmark/ast/Text;
      38: astore_2
      39: aload_0
      40: aload_0
      41: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      44: aload_2
      45: iload_1
      46: aload_0
      47: getfield      #114                // Field lastBracket:Lcom/vladsch/flexmark/internal/Bracket;
      50: aload_0
      51: getfield      #113                // Field lastDelimiter:Lcom/vladsch/flexmark/internal/Delimiter;
      54: invokestatic  #238                // Method com/vladsch/flexmark/internal/Bracket.link:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;Lcom/vladsch/flexmark/ast/Text;ILcom/vladsch/flexmark/internal/Bracket;Lcom/vladsch/flexmark/internal/Delimiter;)Lcom/vladsch/flexmark/internal/Bracket;
      57: invokespecial #239                // Method addBracket:(Lcom/vladsch/flexmark/internal/Bracket;)V
      60: iconst_1
      61: ireturn

  protected boolean parseBang();
    Code:
       0: aload_0
       1: getfield      #112                // Field index:I
       4: istore_1
       5: aload_0
       6: dup
       7: getfield      #112                // Field index:I
      10: iconst_1
      11: iadd
      12: putfield      #112                // Field index:I
      15: aload_0
      16: invokevirtual #147                // Method peek:()C
      19: bipush        91
      21: if_icmpne     84
      24: aload_0
      25: dup
      26: getfield      #112                // Field index:I
      29: iconst_1
      30: iadd
      31: putfield      #112                // Field index:I
      34: aload_0
      35: aload_0
      36: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      39: aload_0
      40: getfield      #112                // Field index:I
      43: iconst_2
      44: isub
      45: aload_0
      46: getfield      #112                // Field index:I
      49: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      54: invokevirtual #230                // Method appendSeparateText:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)Lcom/vladsch/flexmark/ast/Text;
      57: astore_2
      58: aload_0
      59: aload_0
      60: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      63: aload_2
      64: iload_1
      65: iconst_1
      66: iadd
      67: aload_0
      68: getfield      #114                // Field lastBracket:Lcom/vladsch/flexmark/internal/Bracket;
      71: aload_0
      72: getfield      #113                // Field lastDelimiter:Lcom/vladsch/flexmark/internal/Delimiter;
      75: invokestatic  #240                // Method com/vladsch/flexmark/internal/Bracket.image:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;Lcom/vladsch/flexmark/ast/Text;ILcom/vladsch/flexmark/internal/Bracket;Lcom/vladsch/flexmark/internal/Delimiter;)Lcom/vladsch/flexmark/internal/Bracket;
      78: invokespecial #239                // Method addBracket:(Lcom/vladsch/flexmark/internal/Bracket;)V
      81: goto          107
      84: aload_0
      85: aload_0
      86: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      89: aload_0
      90: getfield      #112                // Field index:I
      93: iconst_1
      94: isub
      95: aload_0
      96: getfield      #112                // Field index:I
      99: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     104: invokevirtual #166                // Method appendText:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     107: iconst_1
     108: ireturn

  private void addBracket(com.vladsch.flexmark.internal.Bracket);
    Code:
       0: aload_0
       1: getfield      #114                // Field lastBracket:Lcom/vladsch/flexmark/internal/Bracket;
       4: ifnull        15
       7: aload_0
       8: getfield      #114                // Field lastBracket:Lcom/vladsch/flexmark/internal/Bracket;
      11: iconst_1
      12: putfield      #241                // Field com/vladsch/flexmark/internal/Bracket.bracketAfter:Z
      15: aload_0
      16: aload_1
      17: putfield      #114                // Field lastBracket:Lcom/vladsch/flexmark/internal/Bracket;
      20: return

  private void removeLastBracket();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #114                // Field lastBracket:Lcom/vladsch/flexmark/internal/Bracket;
       5: getfield      #242                // Field com/vladsch/flexmark/internal/Bracket.previous:Lcom/vladsch/flexmark/internal/Bracket;
       8: putfield      #114                // Field lastBracket:Lcom/vladsch/flexmark/internal/Bracket;
      11: return

  private com.vladsch.flexmark.internal.InlineParserImpl$ReferenceProcessorMatch matchLinkRef(com.vladsch.flexmark.internal.Bracket, int, int, int);
    Code:
       0: aload_0
       1: getfield      #36                 // Field linkRefProcessorsData:Lcom/vladsch/flexmark/internal/LinkRefProcessorData;
       4: getfield      #243                // Field com/vladsch/flexmark/internal/LinkRefProcessorData.nestingIndex:[I
       7: arraylength
       8: ifne          13
      11: aconst_null
      12: areturn
      13: aconst_null
      14: astore        5
      16: aconst_null
      17: astore        6
      19: aconst_null
      20: astore        7
      22: aload_0
      23: getfield      #36                 // Field linkRefProcessorsData:Lcom/vladsch/flexmark/internal/LinkRefProcessorData;
      26: getfield      #37                 // Field com/vladsch/flexmark/internal/LinkRefProcessorData.processors:Ljava/util/List;
      29: invokeinterface #22,  1           // InterfaceMethod java/util/List.size:()I
      34: istore        9
      36: aload_0
      37: getfield      #36                 // Field linkRefProcessorsData:Lcom/vladsch/flexmark/internal/LinkRefProcessorData;
      40: getfield      #243                // Field com/vladsch/flexmark/internal/LinkRefProcessorData.nestingIndex:[I
      43: iload_3
      44: iload         4
      46: iadd
      47: iaload
      48: istore        10
      50: iload         10
      52: istore        11
      54: iload         11
      56: iload         9
      58: if_icmpge     285
      61: aload_0
      62: getfield      #38                 // Field linkRefProcessors:Ljava/util/List;
      65: iload         11
      67: invokeinterface #97,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      72: checkcast     #244                // class com/vladsch/flexmark/parser/LinkRefProcessor
      75: astore        12
      77: iload_3
      78: iload         4
      80: iadd
      81: aload         12
      83: invokeinterface #245,  1          // InterfaceMethod com/vladsch/flexmark/parser/LinkRefProcessor.getBracketNestingLevel:()I
      88: if_icmpge     94
      91: goto          285
      94: aload         12
      96: invokeinterface #246,  1          // InterfaceMethod com/vladsch/flexmark/parser/LinkRefProcessor.getWantExclamationPrefix:()Z
     101: istore        8
     103: aload_1
     104: getfield      #247                // Field com/vladsch/flexmark/internal/Bracket.image:Z
     107: ifeq          149
     110: iload         8
     112: ifeq          149
     115: aload         7
     117: ifnonnull     142
     120: aload_0
     121: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     124: aload_1
     125: getfield      #248                // Field com/vladsch/flexmark/internal/Bracket.index:I
     128: iconst_1
     129: isub
     130: iload_3
     131: isub
     132: iload_2
     133: iload_3
     134: iadd
     135: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     140: astore        7
     142: aload         7
     144: astore        13
     146: goto          249
     149: iload         8
     151: ifeq          220
     154: aload_1
     155: getfield      #248                // Field com/vladsch/flexmark/internal/Bracket.index:I
     158: iload_3
     159: iconst_1
     160: iadd
     161: if_icmplt     220
     164: aload_0
     165: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     168: aload_1
     169: getfield      #248                // Field com/vladsch/flexmark/internal/Bracket.index:I
     172: iconst_1
     173: isub
     174: iload_3
     175: isub
     176: invokeinterface #140,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.charAt:(I)C
     181: bipush        33
     183: if_icmpne     220
     186: aload         7
     188: ifnonnull     213
     191: aload_0
     192: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     195: aload_1
     196: getfield      #248                // Field com/vladsch/flexmark/internal/Bracket.index:I
     199: iconst_1
     200: isub
     201: iload_3
     202: isub
     203: iload_2
     204: iload_3
     205: iadd
     206: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     211: astore        7
     213: aload         7
     215: astore        13
     217: goto          249
     220: aload         6
     222: ifnonnull     245
     225: aload_0
     226: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     229: aload_1
     230: getfield      #248                // Field com/vladsch/flexmark/internal/Bracket.index:I
     233: iload_3
     234: isub
     235: iload_2
     236: iload_3
     237: iadd
     238: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     243: astore        6
     245: aload         6
     247: astore        13
     249: aload         12
     251: aload         13
     253: invokeinterface #249,  2          // InterfaceMethod com/vladsch/flexmark/parser/LinkRefProcessor.isMatch:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)Z
     258: ifeq          279
     261: new           #250                // class com/vladsch/flexmark/internal/InlineParserImpl$ReferenceProcessorMatch
     264: dup
     265: aload         12
     267: iload         8
     269: aload         13
     271: invokespecial #251                // Method com/vladsch/flexmark/internal/InlineParserImpl$ReferenceProcessorMatch."<init>":(Lcom/vladsch/flexmark/parser/LinkRefProcessor;ZLcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     274: astore        5
     276: goto          285
     279: iinc          11, 1
     282: goto          54
     285: aload         5
     287: areturn

  protected boolean parseCloseBracket();
    Code:
       0: aload_0
       1: dup
       2: getfield      #112                // Field index:I
       5: iconst_1
       6: iadd
       7: putfield      #112                // Field index:I
      10: aload_0
      11: getfield      #112                // Field index:I
      14: istore_1
      15: iconst_0
      16: istore_3
      17: aload_0
      18: getfield      #114                // Field lastBracket:Lcom/vladsch/flexmark/internal/Bracket;
      21: astore        4
      23: aload         4
      25: ifnonnull     53
      28: aload_0
      29: aload_0
      30: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      33: aload_0
      34: getfield      #112                // Field index:I
      37: iconst_1
      38: isub
      39: aload_0
      40: getfield      #112                // Field index:I
      43: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      48: invokevirtual #166                // Method appendText:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
      51: iconst_1
      52: ireturn
      53: aload         4
      55: getfield      #252                // Field com/vladsch/flexmark/internal/Bracket.allowed:Z
      58: ifne          90
      61: aload_0
      62: aload_0
      63: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      66: aload_0
      67: getfield      #112                // Field index:I
      70: iconst_1
      71: isub
      72: aload_0
      73: getfield      #112                // Field index:I
      76: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      81: invokevirtual #166                // Method appendText:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
      84: aload_0
      85: invokespecial #253                // Method removeLastBracket:()V
      88: iconst_1
      89: ireturn
      90: iconst_0
      91: istore_2
      92: aconst_null
      93: astore        5
      95: aconst_null
      96: astore        6
      98: aconst_null
      99: astore        7
     101: iconst_0
     102: istore        8
     104: iconst_0
     105: istore        9
     107: aconst_null
     108: astore        10
     110: iconst_0
     111: istore        11
     113: getstatic     #162                // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     116: astore        12
     118: getstatic     #162                // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     121: astore        13
     123: getstatic     #162                // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     126: astore        14
     128: aconst_null
     129: astore        15
     131: aload_0
     132: getfield      #112                // Field index:I
     135: istore        16
     137: aload_0
     138: getfield      #70                 // Field options:Lcom/vladsch/flexmark/parser/InlineParserOptions;
     141: getfield      #254                // Field com/vladsch/flexmark/parser/InlineParserOptions.spaceInLinkElements:Z
     144: ifeq          161
     147: aload_0
     148: invokevirtual #147                // Method peek:()C
     151: bipush        32
     153: if_icmpne     161
     156: aload_0
     157: invokevirtual #255                // Method sp:()Z
     160: pop
     161: aload_0
     162: invokevirtual #147                // Method peek:()C
     165: bipush        40
     167: if_icmpne     510
     170: aload_0
     171: getfield      #112                // Field index:I
     174: istore        17
     176: aload_0
     177: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     180: aload_0
     181: getfield      #112                // Field index:I
     184: aload_0
     185: getfield      #112                // Field index:I
     188: iconst_1
     189: iadd
     190: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     195: astore        12
     197: aload_0
     198: dup
     199: getfield      #112                // Field index:I
     202: iconst_1
     203: iadd
     204: putfield      #112                // Field index:I
     207: aload_0
     208: invokevirtual #148                // Method spnl:()Z
     211: pop
     212: aload_0
     213: invokevirtual #149                // Method parseLinkDestination:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     216: dup
     217: astore        5
     219: ifnull        501
     222: aload_0
     223: getfield      #70                 // Field options:Lcom/vladsch/flexmark/parser/InlineParserOptions;
     226: getfield      #256                // Field com/vladsch/flexmark/parser/InlineParserOptions.parseMultiLineImageUrls:Z
     229: ifeq          395
     232: aload         4
     234: getfield      #247                // Field com/vladsch/flexmark/internal/Bracket.image:Z
     237: ifeq          395
     240: aload         5
     242: ldc_w         #257                // String <
     245: invokeinterface #258,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.startsWith:(Ljava/lang/CharSequence;)Z
     250: ifne          395
     253: aload         5
     255: ldc_w         #259                // String ?
     258: invokeinterface #206,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.endsWith:(Ljava/lang/CharSequence;)Z
     263: ifeq          395
     266: aload_0
     267: invokevirtual #260                // Method spnlUrl:()Z
     270: ifeq          395
     273: aload_0
     274: getfield      #112                // Field index:I
     277: istore        18
     279: iload         18
     281: istore        19
     283: aload_0
     284: invokevirtual #255                // Method sp:()Z
     287: pop
     288: aload_0
     289: invokevirtual #150                // Method parseLinkTitle:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     292: astore        20
     294: aload         20
     296: ifnull        304
     299: aload_0
     300: invokevirtual #255                // Method sp:()Z
     303: pop
     304: aload_0
     305: invokevirtual #147                // Method peek:()C
     308: bipush        41
     310: if_icmpne     369
     313: aload_0
     314: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     317: aload_0
     318: getfield      #112                // Field index:I
     321: aload_0
     322: getfield      #112                // Field index:I
     325: iconst_1
     326: iadd
     327: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     332: astore        13
     334: aload_0
     335: dup
     336: getfield      #112                // Field index:I
     339: iconst_1
     340: iadd
     341: putfield      #112                // Field index:I
     344: aload_0
     345: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     348: iload         18
     350: iload         19
     352: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     357: astore        15
     359: aload         20
     361: astore        6
     363: iconst_1
     364: istore        8
     366: goto          392
     369: aload_0
     370: invokevirtual #261                // Method toEOL:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     373: astore        21
     375: aload         21
     377: ifnonnull     383
     380: goto          392
     383: aload_0
     384: getfield      #112                // Field index:I
     387: istore        19
     389: goto          283
     392: goto          507
     395: aload_0
     396: invokevirtual #148                // Method spnl:()Z
     399: pop
     400: aload_0
     401: getfield      #35                 // Field myParsing:Lcom/vladsch/flexmark/ast/util/Parsing;
     404: getfield      #262                // Field com/vladsch/flexmark/ast/util/Parsing.WHITESPACE:Ljava/util/regex/Pattern;
     407: aload_0
     408: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     411: aload_0
     412: getfield      #112                // Field index:I
     415: iconst_1
     416: isub
     417: aload_0
     418: getfield      #112                // Field index:I
     421: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     426: invokevirtual #189                // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
     429: invokevirtual #217                // Method java/util/regex/Matcher.matches:()Z
     432: ifeq          446
     435: aload_0
     436: invokevirtual #150                // Method parseLinkTitle:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     439: astore        6
     441: aload_0
     442: invokevirtual #148                // Method spnl:()Z
     445: pop
     446: aload_0
     447: invokevirtual #147                // Method peek:()C
     450: bipush        41
     452: if_icmpne     492
     455: aload_0
     456: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     459: aload_0
     460: getfield      #112                // Field index:I
     463: aload_0
     464: getfield      #112                // Field index:I
     467: iconst_1
     468: iadd
     469: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     474: astore        13
     476: aload_0
     477: dup
     478: getfield      #112                // Field index:I
     481: iconst_1
     482: iadd
     483: putfield      #112                // Field index:I
     486: iconst_1
     487: istore        8
     489: goto          507
     492: aload_0
     493: iload         17
     495: putfield      #112                // Field index:I
     498: goto          507
     501: aload_0
     502: iload         17
     504: putfield      #112                // Field index:I
     507: goto          516
     510: aload_0
     511: iload         16
     513: putfield      #112                // Field index:I
     516: iload         8
     518: ifne          1035
     521: aload_0
     522: getfield      #70                 // Field options:Lcom/vladsch/flexmark/parser/InlineParserOptions;
     525: getfield      #263                // Field com/vladsch/flexmark/parser/InlineParserOptions.matchLookaheadFirst:Z
     528: ifne          542
     531: aload_0
     532: aload         4
     534: iload_1
     535: iconst_0
     536: iload_2
     537: invokespecial #264                // Method matchLinkRef:(Lcom/vladsch/flexmark/internal/Bracket;III)Lcom/vladsch/flexmark/internal/InlineParserImpl$ReferenceProcessorMatch;
     540: astore        10
     542: aload         10
     544: ifnull        550
     547: goto          719
     550: aload_0
     551: getfield      #36                 // Field linkRefProcessorsData:Lcom/vladsch/flexmark/internal/LinkRefProcessorData;
     554: getfield      #265                // Field com/vladsch/flexmark/internal/LinkRefProcessorData.maxNesting:I
     557: istore        17
     559: iconst_0
     560: istore        18
     562: iload         17
     564: iload_2
     565: if_icmple     639
     568: aload         4
     570: astore        19
     572: aload         19
     574: getfield      #242                // Field com/vladsch/flexmark/internal/Bracket.previous:Lcom/vladsch/flexmark/internal/Bracket;
     577: ifnull        639
     580: aload         19
     582: getfield      #248                // Field com/vladsch/flexmark/internal/Bracket.index:I
     585: aload         19
     587: getfield      #242                // Field com/vladsch/flexmark/internal/Bracket.previous:Lcom/vladsch/flexmark/internal/Bracket;
     590: getfield      #248                // Field com/vladsch/flexmark/internal/Bracket.index:I
     593: iconst_1
     594: iadd
     595: if_icmpne     639
     598: aload_0
     599: iload         18
     601: invokevirtual #173                // Method peek:(I)C
     604: bipush        93
     606: if_icmpne     639
     609: aload         19
     611: getfield      #242                // Field com/vladsch/flexmark/internal/Bracket.previous:Lcom/vladsch/flexmark/internal/Bracket;
     614: astore        19
     616: iinc          18, 1
     619: iload         18
     621: iload_2
     622: iadd
     623: iload         17
     625: if_icmpeq     639
     628: aload         19
     630: getfield      #247                // Field com/vladsch/flexmark/internal/Bracket.image:Z
     633: ifeq          572
     636: goto          639
     639: iload         18
     641: iconst_1
     642: iadd
     643: istore        19
     645: iload         19
     647: iinc          19, -1
     650: ifle          719
     653: aload_0
     654: aload         4
     656: iload_1
     657: iload         19
     659: iload_2
     660: invokespecial #264                // Method matchLinkRef:(Lcom/vladsch/flexmark/internal/Bracket;III)Lcom/vladsch/flexmark/internal/InlineParserImpl$ReferenceProcessorMatch;
     663: astore        10
     665: aload         10
     667: ifnull        645
     670: iload         19
     672: ifle          719
     675: iload         19
     677: iinc          19, -1
     680: ifle          710
     683: aload_0
     684: dup
     685: getfield      #112                // Field index:I
     688: iconst_1
     689: iadd
     690: putfield      #112                // Field index:I
     693: aload_0
     694: getfield      #114                // Field lastBracket:Lcom/vladsch/flexmark/internal/Bracket;
     697: getfield      #266                // Field com/vladsch/flexmark/internal/Bracket.node:Lcom/vladsch/flexmark/ast/Text;
     700: invokevirtual #267                // Method com/vladsch/flexmark/ast/Text.unlink:()V
     703: aload_0
     704: invokespecial #253                // Method removeLastBracket:()V
     707: goto          675
     710: aload_0
     711: getfield      #114                // Field lastBracket:Lcom/vladsch/flexmark/internal/Bracket;
     714: astore        4
     716: goto          719
     719: aload         10
     721: ifnonnull     1035
     724: aload_0
     725: getfield      #112                // Field index:I
     728: istore        17
     730: aload_0
     731: invokevirtual #146                // Method parseLinkLabel:()I
     734: istore        18
     736: iload         18
     738: iconst_2
     739: if_icmple     763
     742: aload_0
     743: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     746: iload         17
     748: iload         17
     750: iload         18
     752: iadd
     753: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     758: astore        7
     760: goto          839
     763: aload         4
     765: getfield      #241                // Field com/vladsch/flexmark/internal/Bracket.bracketAfter:Z
     768: ifne          839
     771: aload_0
     772: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     775: iload         17
     777: iload         17
     779: iload         18
     781: iadd
     782: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     787: astore        14
     789: aload         4
     791: getfield      #247                // Field com/vladsch/flexmark/internal/Bracket.image:Z
     794: ifeq          819
     797: aload_0
     798: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     801: aload         4
     803: getfield      #248                // Field com/vladsch/flexmark/internal/Bracket.index:I
     806: iconst_1
     807: isub
     808: iload_1
     809: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     814: astore        7
     816: goto          836
     819: aload_0
     820: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     823: aload         4
     825: getfield      #248                // Field com/vladsch/flexmark/internal/Bracket.index:I
     828: iload_1
     829: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     834: astore        7
     836: iconst_1
     837: istore        9
     839: aload         7
     841: ifnull        1035
     844: aload         7
     846: iconst_1
     847: invokestatic  #153                // Method com/vladsch/flexmark/util/html/Escaping.normalizeReferenceChars:(Ljava/lang/CharSequence;Z)Ljava/lang/String;
     850: astore        19
     852: aload_0
     853: getfield      #34                 // Field referenceRepository:Lcom/vladsch/flexmark/ast/util/ReferenceRepository;
     856: aload         19
     858: invokevirtual #268                // Method com/vladsch/flexmark/ast/util/ReferenceRepository.containsKey:(Ljava/lang/Object;)Z
     861: ifeq          929
     864: aload_0
     865: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     868: aload         4
     870: getfield      #248                // Field com/vladsch/flexmark/internal/Bracket.index:I
     873: iload_1
     874: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     879: astore        20
     881: aload_0
     882: iload         9
     884: ifeq          892
     887: aload         7
     889: goto          894
     892: aload         20
     894: aload         4
     896: getfield      #266                // Field com/vladsch/flexmark/internal/Bracket.node:Lcom/vladsch/flexmark/ast/Text;
     899: invokevirtual #130                // Method com/vladsch/flexmark/ast/Text.getNext:()Lcom/vladsch/flexmark/ast/Node;
     902: iconst_1
     903: invokestatic  #269                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     906: invokevirtual #270                // Method containsLinkRefs:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;Lcom/vladsch/flexmark/ast/Node;Ljava/lang/Boolean;)Z
     909: istore        21
     911: iload         21
     913: ifne          920
     916: iconst_1
     917: goto          921
     920: iconst_0
     921: istore        8
     923: iconst_1
     924: istore        11
     926: goto          1035
     929: aload         4
     931: aload         7
     933: invokevirtual #271                // Method com/vladsch/flexmark/internal/Bracket.isStraddling:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)Z
     936: ifne          1035
     939: iload         9
     941: ifne          1010
     944: aload_0
     945: invokevirtual #147                // Method peek:()C
     948: bipush        91
     950: if_icmpne     1010
     953: aload_0
     954: getfield      #112                // Field index:I
     957: istore        20
     959: aload_0
     960: invokevirtual #146                // Method parseLinkLabel:()I
     963: istore        21
     965: iload         21
     967: ifle          979
     970: aload_0
     971: iload         17
     973: putfield      #112                // Field index:I
     976: goto          1007
     979: aload_0
     980: aload         7
     982: aload         4
     984: getfield      #266                // Field com/vladsch/flexmark/internal/Bracket.node:Lcom/vladsch/flexmark/ast/Text;
     987: invokevirtual #130                // Method com/vladsch/flexmark/ast/Text.getNext:()Lcom/vladsch/flexmark/ast/Node;
     990: aconst_null
     991: invokevirtual #270                // Method containsLinkRefs:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;Lcom/vladsch/flexmark/ast/Node;Ljava/lang/Boolean;)Z
     994: istore        22
     996: iload         22
     998: ifne          1007
    1001: iconst_1
    1002: istore        9
    1004: iconst_1
    1005: istore        8
    1007: goto          1035
    1010: aload_0
    1011: aload         7
    1013: aload         4
    1015: getfield      #266                // Field com/vladsch/flexmark/internal/Bracket.node:Lcom/vladsch/flexmark/ast/Text;
    1018: invokevirtual #130                // Method com/vladsch/flexmark/ast/Text.getNext:()Lcom/vladsch/flexmark/ast/Node;
    1021: aconst_null
    1022: invokevirtual #270                // Method containsLinkRefs:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;Lcom/vladsch/flexmark/ast/Node;Ljava/lang/Boolean;)Z
    1025: istore        20
    1027: iload         20
    1029: ifne          1035
    1032: iconst_1
    1033: istore        8
    1035: iload         8
    1037: ifne          1045
    1040: aload         10
    1042: ifnull        1815
    1045: aload_0
    1046: invokevirtual #120                // Method flushTextNode:()V
    1049: aload         4
    1051: getfield      #247                // Field com/vladsch/flexmark/internal/Bracket.image:Z
    1054: istore        18
    1056: aload         10
    1058: ifnull        1144
    1061: aload         10
    1063: getfield      #272                // Field com/vladsch/flexmark/internal/InlineParserImpl$ReferenceProcessorMatch.wantExclamation:Z
    1066: ifne          1124
    1069: iload         18
    1071: ifeq          1124
    1074: aload_0
    1075: aload_0
    1076: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1079: aload         4
    1081: getfield      #248                // Field com/vladsch/flexmark/internal/Bracket.index:I
    1084: iconst_1
    1085: isub
    1086: aload         4
    1088: getfield      #248                // Field com/vladsch/flexmark/internal/Bracket.index:I
    1091: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1096: invokevirtual #166                // Method appendText:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    1099: aload         4
    1101: getfield      #266                // Field com/vladsch/flexmark/internal/Bracket.node:Lcom/vladsch/flexmark/ast/Text;
    1104: aload         4
    1106: getfield      #266                // Field com/vladsch/flexmark/internal/Bracket.node:Lcom/vladsch/flexmark/ast/Text;
    1109: invokevirtual #128                // Method com/vladsch/flexmark/ast/Text.getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1112: iconst_1
    1113: invokeinterface #184,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(I)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1118: invokevirtual #134                // Method com/vladsch/flexmark/ast/Text.setChars:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    1121: iconst_0
    1122: istore        18
    1124: aload         10
    1126: getfield      #273                // Field com/vladsch/flexmark/internal/InlineParserImpl$ReferenceProcessorMatch.processor:Lcom/vladsch/flexmark/parser/LinkRefProcessor;
    1129: aload         10
    1131: getfield      #274                // Field com/vladsch/flexmark/internal/InlineParserImpl$ReferenceProcessorMatch.nodeChars:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1134: invokeinterface #275,  2          // InterfaceMethod com/vladsch/flexmark/parser/LinkRefProcessor.createNode:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)Lcom/vladsch/flexmark/ast/Node;
    1139: astore        17
    1141: goto          1198
    1144: aload         7
    1146: ifnull        1174
    1149: iload         18
    1151: ifeq          1164
    1154: new           #276                // class com/vladsch/flexmark/ast/ImageRef
    1157: dup
    1158: invokespecial #277                // Method com/vladsch/flexmark/ast/ImageRef."<init>":()V
    1161: goto          1196
    1164: new           #278                // class com/vladsch/flexmark/ast/LinkRef
    1167: dup
    1168: invokespecial #279                // Method com/vladsch/flexmark/ast/LinkRef."<init>":()V
    1171: goto          1196
    1174: iload         18
    1176: ifeq          1189
    1179: new           #280                // class com/vladsch/flexmark/ast/Image
    1182: dup
    1183: invokespecial #281                // Method com/vladsch/flexmark/ast/Image."<init>":()V
    1186: goto          1196
    1189: new           #282                // class com/vladsch/flexmark/ast/Link
    1192: dup
    1193: invokespecial #283                // Method com/vladsch/flexmark/ast/Link."<init>":()V
    1196: astore        17
    1198: aload         4
    1200: getfield      #266                // Field com/vladsch/flexmark/internal/Bracket.node:Lcom/vladsch/flexmark/ast/Text;
    1203: invokevirtual #130                // Method com/vladsch/flexmark/ast/Text.getNext:()Lcom/vladsch/flexmark/ast/Node;
    1206: astore        19
    1208: aload         19
    1210: ifnull        1234
    1213: aload         19
    1215: invokevirtual #127                // Method com/vladsch/flexmark/ast/Node.getNext:()Lcom/vladsch/flexmark/ast/Node;
    1218: astore        20
    1220: aload         17
    1222: aload         19
    1224: invokevirtual #144                // Method com/vladsch/flexmark/ast/Node.appendChild:(Lcom/vladsch/flexmark/ast/Node;)V
    1227: aload         20
    1229: astore        19
    1231: goto          1208
    1234: aload         10
    1236: ifnull        1476
    1239: aload         17
    1241: invokevirtual #284                // Method com/vladsch/flexmark/ast/Node.hasChildren:()Z
    1244: ifeq          1476
    1247: aload         17
    1249: invokevirtual #285                // Method com/vladsch/flexmark/ast/Node.getChildChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1252: astore        19
    1254: aload         10
    1256: getfield      #273                // Field com/vladsch/flexmark/internal/InlineParserImpl$ReferenceProcessorMatch.processor:Lcom/vladsch/flexmark/parser/LinkRefProcessor;
    1259: aload_0
    1260: getfield      #30                 // Field document:Lcom/vladsch/flexmark/ast/Document;
    1263: aload         17
    1265: invokeinterface #286,  3          // InterfaceMethod com/vladsch/flexmark/parser/LinkRefProcessor.adjustInlineText:(Lcom/vladsch/flexmark/ast/Document;Lcom/vladsch/flexmark/ast/Node;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1270: astore        20
    1272: aload_0
    1273: getfield      #113                // Field lastDelimiter:Lcom/vladsch/flexmark/internal/Delimiter;
    1276: astore        21
    1278: aload         21
    1280: ifnull        1370
    1283: aload         21
    1285: getfield      #236                // Field com/vladsch/flexmark/internal/Delimiter.previous:Lcom/vladsch/flexmark/internal/Delimiter;
    1288: astore        22
    1290: aload         21
    1292: invokevirtual #287                // Method com/vladsch/flexmark/internal/Delimiter.getInput:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1295: aload         21
    1297: invokevirtual #288                // Method com/vladsch/flexmark/internal/Delimiter.getStartIndex:()I
    1300: aload         21
    1302: invokevirtual #289                // Method com/vladsch/flexmark/internal/Delimiter.getEndIndex:()I
    1305: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1310: astore        23
    1312: aload         19
    1314: aload         23
    1316: invokeinterface #290,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.containsAllOf:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)Z
    1321: ifeq          1363
    1324: aload         20
    1326: aload         23
    1328: invokeinterface #290,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.containsAllOf:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)Z
    1333: ifeq          1357
    1336: aload         10
    1338: getfield      #273                // Field com/vladsch/flexmark/internal/InlineParserImpl$ReferenceProcessorMatch.processor:Lcom/vladsch/flexmark/parser/LinkRefProcessor;
    1341: aload         23
    1343: aload_0
    1344: getfield      #30                 // Field document:Lcom/vladsch/flexmark/ast/Document;
    1347: aload         17
    1349: invokeinterface #291,  4          // InterfaceMethod com/vladsch/flexmark/parser/LinkRefProcessor.allowDelimiters:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;Lcom/vladsch/flexmark/ast/Document;Lcom/vladsch/flexmark/ast/Node;)Z
    1354: ifne          1363
    1357: aload_0
    1358: aload         21
    1360: invokevirtual #292                // Method removeDelimiterKeepNode:(Lcom/vladsch/flexmark/internal/Delimiter;)V
    1363: aload         22
    1365: astore        21
    1367: goto          1278
    1370: aload         20
    1372: aload         19
    1374: invokeinterface #290,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.containsAllOf:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)Z
    1379: ifne          1476
    1382: aload         17
    1384: invokevirtual #293                // Method com/vladsch/flexmark/ast/Node.getChildren:()Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterable;
    1387: invokeinterface #294,  1          // InterfaceMethod com/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterable.iterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterator;
    1392: astore        22
    1394: aload         22
    1396: invokeinterface #4,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
    1401: ifeq          1476
    1404: aload         22
    1406: invokeinterface #5,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
    1411: checkcast     #181                // class com/vladsch/flexmark/ast/Node
    1414: astore        23
    1416: aload         23
    1418: invokevirtual #131                // Method com/vladsch/flexmark/ast/Node.getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1421: astore        24
    1423: aload         20
    1425: aload         24
    1427: invokeinterface #295,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.containsSomeOf:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)Z
    1432: ifeq          1468
    1435: aload         20
    1437: aload         24
    1439: invokeinterface #290,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.containsAllOf:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)Z
    1444: ifne          1473
    1447: aload         20
    1449: aload         24
    1451: invokeinterface #296,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.intersect:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1456: astore        25
    1458: aload         23
    1460: aload         25
    1462: invokevirtual #182                // Method com/vladsch/flexmark/ast/Node.setChars:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    1465: goto          1473
    1468: aload         23
    1470: invokevirtual #132                // Method com/vladsch/flexmark/ast/Node.unlink:()V
    1473: goto          1394
    1476: aload_0
    1477: aload         17
    1479: invokevirtual #161                // Method appendNode:(Lcom/vladsch/flexmark/ast/Node;)V
    1482: aload         17
    1484: instanceof    #297                // class com/vladsch/flexmark/ast/RefNode
    1487: ifeq          1588
    1490: aload         17
    1492: checkcast     #297                // class com/vladsch/flexmark/ast/RefNode
    1495: astore        19
    1497: aload         19
    1499: aload         7
    1501: invokevirtual #298                // Method com/vladsch/flexmark/ast/RefNode.setReferenceChars:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    1504: iload         11
    1506: ifeq          1515
    1509: aload         19
    1511: iconst_1
    1512: invokevirtual #299                // Method com/vladsch/flexmark/ast/RefNode.setDefined:(Z)V
    1515: iload         9
    1517: ifne          1543
    1520: aload         19
    1522: aload_0
    1523: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1526: aload         4
    1528: getfield      #248                // Field com/vladsch/flexmark/internal/Bracket.index:I
    1531: iload_1
    1532: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1537: invokevirtual #300                // Method com/vladsch/flexmark/ast/RefNode.setTextChars:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    1540: goto          1580
    1543: aload         14
    1545: invokeinterface #301,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.isEmpty:()Z
    1550: ifne          1580
    1553: aload         19
    1555: aload         14
    1557: iconst_0
    1558: iconst_1
    1559: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1564: invokevirtual #302                // Method com/vladsch/flexmark/ast/RefNode.setTextOpeningMarker:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    1567: aload         19
    1569: aload         14
    1571: iconst_1
    1572: invokeinterface #303,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.endSequence:(I)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1577: invokevirtual #304                // Method com/vladsch/flexmark/ast/RefNode.setTextClosingMarker:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    1580: aload         17
    1582: invokevirtual #145                // Method com/vladsch/flexmark/ast/Node.setCharsFromContent:()V
    1585: goto          1696
    1588: aload         17
    1590: instanceof    #305                // class com/vladsch/flexmark/ast/InlineLinkNode
    1593: ifeq          1696
    1596: aload         17
    1598: checkcast     #305                // class com/vladsch/flexmark/ast/InlineLinkNode
    1601: astore        19
    1603: aload         19
    1605: aload         5
    1607: invokevirtual #306                // Method com/vladsch/flexmark/ast/InlineLinkNode.setUrlChars:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    1610: aload         19
    1612: aload         6
    1614: invokevirtual #307                // Method com/vladsch/flexmark/ast/InlineLinkNode.setTitleChars:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    1617: aload         19
    1619: aload         12
    1621: invokevirtual #308                // Method com/vladsch/flexmark/ast/InlineLinkNode.setLinkOpeningMarker:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    1624: aload         19
    1626: aload         13
    1628: invokevirtual #309                // Method com/vladsch/flexmark/ast/InlineLinkNode.setLinkClosingMarker:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    1631: aload         19
    1633: iload         18
    1635: ifeq          1658
    1638: aload_0
    1639: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1642: aload         4
    1644: getfield      #248                // Field com/vladsch/flexmark/internal/Bracket.index:I
    1647: iconst_1
    1648: isub
    1649: iload_1
    1650: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1655: goto          1673
    1658: aload_0
    1659: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1662: aload         4
    1664: getfield      #248                // Field com/vladsch/flexmark/internal/Bracket.index:I
    1667: iload_1
    1668: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1673: invokevirtual #310                // Method com/vladsch/flexmark/ast/InlineLinkNode.setTextChars:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    1676: aload         15
    1678: ifnull        1691
    1681: aload         17
    1683: checkcast     #280                // class com/vladsch/flexmark/ast/Image
    1686: aload         15
    1688: invokevirtual #311                // Method com/vladsch/flexmark/ast/Image.setUrlContent:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    1691: aload         17
    1693: invokevirtual #145                // Method com/vladsch/flexmark/ast/Node.setCharsFromContent:()V
    1696: aload_0
    1697: aload         4
    1699: getfield      #312                // Field com/vladsch/flexmark/internal/Bracket.previousDelimiter:Lcom/vladsch/flexmark/internal/Delimiter;
    1702: invokevirtual #119                // Method processDelimiters:(Lcom/vladsch/flexmark/internal/Delimiter;)V
    1705: aload         4
    1707: getfield      #266                // Field com/vladsch/flexmark/internal/Bracket.node:Lcom/vladsch/flexmark/ast/Text;
    1710: astore        19
    1712: aload_0
    1713: invokespecial #253                // Method removeLastBracket:()V
    1716: aload         10
    1718: ifnull        1737
    1721: aload         10
    1723: getfield      #273                // Field com/vladsch/flexmark/internal/InlineParserImpl$ReferenceProcessorMatch.processor:Lcom/vladsch/flexmark/parser/LinkRefProcessor;
    1726: aload_0
    1727: getfield      #30                 // Field document:Lcom/vladsch/flexmark/ast/Document;
    1730: aload         17
    1732: invokeinterface #313,  3          // InterfaceMethod com/vladsch/flexmark/parser/LinkRefProcessor.updateNodeElements:(Lcom/vladsch/flexmark/ast/Document;Lcom/vladsch/flexmark/ast/Node;)V
    1737: aload         17
    1739: instanceof    #282                // class com/vladsch/flexmark/ast/Link
    1742: ifeq          1790
    1745: aload_0
    1746: getfield      #114                // Field lastBracket:Lcom/vladsch/flexmark/internal/Bracket;
    1749: astore        20
    1751: aload         20
    1753: ifnull        1780
    1756: aload         20
    1758: getfield      #247                // Field com/vladsch/flexmark/internal/Bracket.image:Z
    1761: ifne          1770
    1764: aload         20
    1766: iconst_0
    1767: putfield      #252                // Field com/vladsch/flexmark/internal/Bracket.allowed:Z
    1770: aload         20
    1772: getfield      #242                // Field com/vladsch/flexmark/internal/Bracket.previous:Lcom/vladsch/flexmark/internal/Bracket;
    1775: astore        20
    1777: goto          1751
    1780: aload_0
    1781: aload         17
    1783: aconst_null
    1784: invokevirtual #314                // Method collapseLinkRefChildren:(Lcom/vladsch/flexmark/ast/Node;Ljava/lang/Boolean;)V
    1787: goto          1808
    1790: aload         17
    1792: instanceof    #297                // class com/vladsch/flexmark/ast/RefNode
    1795: ifeq          1808
    1798: aload_0
    1799: aload         17
    1801: iconst_1
    1802: invokestatic  #269                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
    1805: invokevirtual #314                // Method collapseLinkRefChildren:(Lcom/vladsch/flexmark/ast/Node;Ljava/lang/Boolean;)V
    1808: aload         19
    1810: invokevirtual #132                // Method com/vladsch/flexmark/ast/Node.unlink:()V
    1813: iconst_1
    1814: ireturn
    1815: aload_0
    1816: iload_1
    1817: putfield      #112                // Field index:I
    1820: aload_0
    1821: aload_0
    1822: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1825: aload_0
    1826: getfield      #112                // Field index:I
    1829: iconst_1
    1830: isub
    1831: aload_0
    1832: getfield      #112                // Field index:I
    1835: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1840: invokevirtual #166                // Method appendText:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    1843: aload_0
    1844: invokespecial #253                // Method removeLastBracket:()V
    1847: iconst_1
    1848: ireturn

  protected boolean containsLinkRefs(com.vladsch.flexmark.util.sequence.BasedSequence, com.vladsch.flexmark.ast.Node, java.lang.Boolean);
    Code:
       0: aload_1
       1: invokeinterface #143,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
       6: istore        4
       8: aload_1
       9: invokeinterface #315,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
      14: istore        5
      16: aload_2
      17: ifnull        83
      20: aload_2
      21: instanceof    #278                // class com/vladsch/flexmark/ast/LinkRef
      24: ifeq          75
      27: aload_3
      28: ifnull        45
      31: aload_2
      32: checkcast     #278                // class com/vladsch/flexmark/ast/LinkRef
      35: invokevirtual #316                // Method com/vladsch/flexmark/ast/LinkRef.isDefined:()Z
      38: aload_3
      39: invokevirtual #81                 // Method java/lang/Boolean.booleanValue:()Z
      42: if_icmpne     75
      45: aload_2
      46: invokevirtual #131                // Method com/vladsch/flexmark/ast/Node.getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      49: invokeinterface #143,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
      54: iload         5
      56: if_icmpge     75
      59: aload_2
      60: invokevirtual #131                // Method com/vladsch/flexmark/ast/Node.getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      63: invokeinterface #315,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
      68: iload         4
      70: if_icmple     75
      73: iconst_1
      74: ireturn
      75: aload_2
      76: invokevirtual #127                // Method com/vladsch/flexmark/ast/Node.getNext:()Lcom/vladsch/flexmark/ast/Node;
      79: astore_2
      80: goto          16
      83: iconst_0
      84: ireturn

  protected void collapseLinkRefChildren(com.vladsch.flexmark.ast.Node, java.lang.Boolean);
    Code:
       0: aload_1
       1: invokevirtual #122                // Method com/vladsch/flexmark/ast/Node.getFirstChild:()Lcom/vladsch/flexmark/ast/Node;
       4: astore_3
       5: iconst_0
       6: istore        4
       8: aload_3
       9: ifnull        102
      12: aload_3
      13: invokevirtual #127                // Method com/vladsch/flexmark/ast/Node.getNext:()Lcom/vladsch/flexmark/ast/Node;
      16: astore        5
      18: aload_3
      19: instanceof    #317                // class com/vladsch/flexmark/ast/LinkRefDerived
      22: ifeq          96
      25: aload_2
      26: ifnull        43
      29: aload_2
      30: invokevirtual #81                 // Method java/lang/Boolean.booleanValue:()Z
      33: aload_3
      34: checkcast     #297                // class com/vladsch/flexmark/ast/RefNode
      37: invokevirtual #318                // Method com/vladsch/flexmark/ast/RefNode.isTentative:()Z
      40: if_icmpne     96
      43: aload_0
      44: aload_3
      45: aload_2
      46: invokevirtual #314                // Method collapseLinkRefChildren:(Lcom/vladsch/flexmark/ast/Node;Ljava/lang/Boolean;)V
      49: aload_3
      50: invokevirtual #132                // Method com/vladsch/flexmark/ast/Node.unlink:()V
      53: new           #319                // class com/vladsch/flexmark/ast/util/TextNodeConverter
      56: dup
      57: aload_3
      58: invokevirtual #131                // Method com/vladsch/flexmark/ast/Node.getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      61: invokespecial #320                // Method com/vladsch/flexmark/ast/util/TextNodeConverter."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
      64: astore        6
      66: aload         6
      68: aload_3
      69: invokevirtual #321                // Method com/vladsch/flexmark/ast/util/TextNodeConverter.addChildrenOf:(Lcom/vladsch/flexmark/ast/Node;)V
      72: aload         5
      74: ifnull        87
      77: aload         6
      79: aload         5
      81: invokevirtual #322                // Method com/vladsch/flexmark/ast/util/TextNodeConverter.insertMergedBefore:(Lcom/vladsch/flexmark/ast/Node;)V
      84: goto          93
      87: aload         6
      89: aload_1
      90: invokevirtual #323                // Method com/vladsch/flexmark/ast/util/TextNodeConverter.appendMergedTo:(Lcom/vladsch/flexmark/ast/Node;)V
      93: iconst_1
      94: istore        4
      96: aload         5
      98: astore_3
      99: goto          8
     102: iload         4
     104: ifeq          111
     107: aload_1
     108: invokestatic  #324                // Method com/vladsch/flexmark/ast/util/TextNodeConverter.mergeTextNodes:(Lcom/vladsch/flexmark/ast/Node;)V
     111: return

  public com.vladsch.flexmark.util.sequence.BasedSequence parseLinkDestination();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #35                 // Field myParsing:Lcom/vladsch/flexmark/ast/util/Parsing;
       5: getfield      #325                // Field com/vladsch/flexmark/ast/util/Parsing.LINK_DESTINATION_ANGLES:Ljava/util/regex/Pattern;
       8: invokevirtual #152                // Method match:(Ljava/util/regex/Pattern;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      11: astore_1
      12: aload_1
      13: ifnull        18
      16: aload_1
      17: areturn
      18: aload_0
      19: getfield      #70                 // Field options:Lcom/vladsch/flexmark/parser/InlineParserOptions;
      22: getfield      #326                // Field com/vladsch/flexmark/parser/InlineParserOptions.linksAllowMatchedParentheses:Z
      25: ifeq          173
      28: aload_0
      29: aload_0
      30: getfield      #35                 // Field myParsing:Lcom/vladsch/flexmark/ast/util/Parsing;
      33: getfield      #327                // Field com/vladsch/flexmark/ast/util/Parsing.LINK_DESTINATION_MATCHED_PARENS:Ljava/util/regex/Pattern;
      36: invokevirtual #152                // Method match:(Ljava/util/regex/Pattern;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      39: astore_2
      40: aload_2
      41: ifnull        171
      44: iconst_0
      45: istore_3
      46: aload_2
      47: invokeinterface #139,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      52: istore        4
      54: iconst_0
      55: istore        5
      57: iload         5
      59: iload         4
      61: if_icmpge     147
      64: aload_2
      65: iload         5
      67: invokeinterface #140,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.charAt:(I)C
      72: istore        6
      74: iload         6
      76: bipush        92
      78: if_icmpne     87
      81: iinc          5, 1
      84: goto          141
      87: iload         6
      89: bipush        40
      91: if_icmpne     100
      94: iinc          3, 1
      97: goto          141
     100: iload         6
     102: bipush        41
     104: if_icmpne     141
     107: iload_3
     108: ifne          138
     111: aload_0
     112: dup
     113: getfield      #112                // Field index:I
     116: iload         4
     118: iload         5
     120: isub
     121: isub
     122: putfield      #112                // Field index:I
     125: aload_2
     126: iconst_0
     127: iload         5
     129: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     134: astore_2
     135: goto          147
     138: iinc          3, -1
     141: iinc          5, 1
     144: goto          57
     147: aload_0
     148: getfield      #70                 // Field options:Lcom/vladsch/flexmark/parser/InlineParserOptions;
     151: getfield      #328                // Field com/vladsch/flexmark/parser/InlineParserOptions.spaceInLinkUrls:Z
     154: ifeq          169
     157: aload_2
     158: getstatic     #329                // Field com/vladsch/flexmark/util/sequence/BasedSequence.SPACE:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     161: invokeinterface #330,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.trimEnd:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     166: goto          170
     169: aload_2
     170: areturn
     171: aconst_null
     172: areturn
     173: aload_0
     174: aload_0
     175: getfield      #35                 // Field myParsing:Lcom/vladsch/flexmark/ast/util/Parsing;
     178: getfield      #331                // Field com/vladsch/flexmark/ast/util/Parsing.LINK_DESTINATION:Ljava/util/regex/Pattern;
     181: invokevirtual #152                // Method match:(Ljava/util/regex/Pattern;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     184: astore_2
     185: aload_2
     186: ifnull        211
     189: aload_0
     190: getfield      #70                 // Field options:Lcom/vladsch/flexmark/parser/InlineParserOptions;
     193: getfield      #328                // Field com/vladsch/flexmark/parser/InlineParserOptions.spaceInLinkUrls:Z
     196: ifeq          211
     199: aload_2
     200: getstatic     #329                // Field com/vladsch/flexmark/util/sequence/BasedSequence.SPACE:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     203: invokeinterface #330,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.trimEnd:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     208: goto          212
     211: aload_2
     212: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence parseLinkTitle();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #35                 // Field myParsing:Lcom/vladsch/flexmark/ast/util/Parsing;
       5: getfield      #332                // Field com/vladsch/flexmark/ast/util/Parsing.LINK_TITLE:Ljava/util/regex/Pattern;
       8: invokevirtual #152                // Method match:(Ljava/util/regex/Pattern;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      11: astore_1
      12: aload_1
      13: ifnull        18
      16: aload_1
      17: areturn
      18: aconst_null
      19: areturn

  public int parseLinkLabel();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #35                 // Field myParsing:Lcom/vladsch/flexmark/ast/util/Parsing;
       5: getfield      #333                // Field com/vladsch/flexmark/ast/util/Parsing.LINK_LABEL:Ljava/util/regex/Pattern;
       8: invokevirtual #152                // Method match:(Ljava/util/regex/Pattern;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      11: astore_1
      12: aload_1
      13: ifnonnull     20
      16: iconst_0
      17: goto          26
      20: aload_1
      21: invokeinterface #139,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      26: ireturn

  public boolean parseAutolink();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #35                 // Field myParsing:Lcom/vladsch/flexmark/ast/util/Parsing;
       5: getfield      #334                // Field com/vladsch/flexmark/ast/util/Parsing.EMAIL_AUTOLINK:Ljava/util/regex/Pattern;
       8: invokevirtual #152                // Method match:(Ljava/util/regex/Pattern;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      11: dup
      12: astore_1
      13: ifnull        74
      16: new           #335                // class com/vladsch/flexmark/ast/MailLink
      19: dup
      20: aload_1
      21: iconst_0
      22: iconst_1
      23: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      28: aload_1
      29: iconst_1
      30: aload_1
      31: invokeinterface #139,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      36: iconst_1
      37: isub
      38: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      43: aload_1
      44: aload_1
      45: invokeinterface #139,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      50: iconst_1
      51: isub
      52: aload_1
      53: invokeinterface #139,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      58: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      63: invokespecial #336                // Method com/vladsch/flexmark/ast/MailLink."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;Lcom/vladsch/flexmark/util/sequence/BasedSequence;Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
      66: astore_2
      67: aload_0
      68: aload_2
      69: invokevirtual #161                // Method appendNode:(Lcom/vladsch/flexmark/ast/Node;)V
      72: iconst_1
      73: ireturn
      74: aload_0
      75: aload_0
      76: getfield      #35                 // Field myParsing:Lcom/vladsch/flexmark/ast/util/Parsing;
      79: getfield      #337                // Field com/vladsch/flexmark/ast/util/Parsing.AUTOLINK:Ljava/util/regex/Pattern;
      82: invokevirtual #152                // Method match:(Ljava/util/regex/Pattern;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      85: dup
      86: astore_1
      87: ifnull        148
      90: new           #338                // class com/vladsch/flexmark/ast/AutoLink
      93: dup
      94: aload_1
      95: iconst_0
      96: iconst_1
      97: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     102: aload_1
     103: iconst_1
     104: aload_1
     105: invokeinterface #139,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
     110: iconst_1
     111: isub
     112: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     117: aload_1
     118: aload_1
     119: invokeinterface #139,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
     124: iconst_1
     125: isub
     126: aload_1
     127: invokeinterface #139,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
     132: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     137: invokespecial #339                // Method com/vladsch/flexmark/ast/AutoLink."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;Lcom/vladsch/flexmark/util/sequence/BasedSequence;Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     140: astore_2
     141: aload_0
     142: aload_2
     143: invokevirtual #161                // Method appendNode:(Lcom/vladsch/flexmark/ast/Node;)V
     146: iconst_1
     147: ireturn
     148: iconst_0
     149: ireturn

  public boolean parseHtmlInline();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #35                 // Field myParsing:Lcom/vladsch/flexmark/ast/util/Parsing;
       5: getfield      #340                // Field com/vladsch/flexmark/ast/util/Parsing.HTML_TAG:Ljava/util/regex/Pattern;
       8: invokevirtual #152                // Method match:(Ljava/util/regex/Pattern;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      11: astore_1
      12: aload_1
      13: ifnull        68
      16: aload_1
      17: ldc_w         #341                // String <!--
      20: invokeinterface #258,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.startsWith:(Ljava/lang/CharSequence;)Z
      25: ifeq          52
      28: aload_1
      29: ldc_w         #342                // String -->
      32: invokeinterface #206,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.endsWith:(Ljava/lang/CharSequence;)Z
      37: ifeq          52
      40: new           #343                // class com/vladsch/flexmark/ast/HtmlInlineComment
      43: dup
      44: aload_1
      45: invokespecial #344                // Method com/vladsch/flexmark/ast/HtmlInlineComment."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
      48: astore_2
      49: goto          61
      52: new           #345                // class com/vladsch/flexmark/ast/HtmlInline
      55: dup
      56: aload_1
      57: invokespecial #346                // Method com/vladsch/flexmark/ast/HtmlInline."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
      60: astore_2
      61: aload_0
      62: aload_2
      63: invokevirtual #161                // Method appendNode:(Lcom/vladsch/flexmark/ast/Node;)V
      66: iconst_1
      67: ireturn
      68: iconst_0
      69: ireturn

  public boolean parseEntity();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #35                 // Field myParsing:Lcom/vladsch/flexmark/ast/util/Parsing;
       5: getfield      #347                // Field com/vladsch/flexmark/ast/util/Parsing.ENTITY_HERE:Ljava/util/regex/Pattern;
       8: invokevirtual #152                // Method match:(Ljava/util/regex/Pattern;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      11: dup
      12: astore_1
      13: ifnull        32
      16: new           #348                // class com/vladsch/flexmark/ast/HtmlEntity
      19: dup
      20: aload_1
      21: invokespecial #349                // Method com/vladsch/flexmark/ast/HtmlEntity."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
      24: astore_2
      25: aload_0
      26: aload_2
      27: invokevirtual #161                // Method appendNode:(Lcom/vladsch/flexmark/ast/Node;)V
      30: iconst_1
      31: ireturn
      32: iconst_0
      33: ireturn

  protected boolean parseString();
    Code:
       0: aload_0
       1: getfield      #112                // Field index:I
       4: istore_1
       5: aload_0
       6: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       9: invokeinterface #139,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      14: istore_2
      15: aload_0
      16: getfield      #112                // Field index:I
      19: iload_2
      20: if_icmpeq     62
      23: aload_0
      24: getfield      #51                 // Field specialCharacters:Ljava/util/BitSet;
      27: aload_0
      28: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      31: aload_0
      32: getfield      #112                // Field index:I
      35: invokeinterface #140,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.charAt:(I)C
      40: invokevirtual #164                // Method java/util/BitSet.get:(I)Z
      43: ifeq          49
      46: goto          62
      49: aload_0
      50: dup
      51: getfield      #112                // Field index:I
      54: iconst_1
      55: iadd
      56: putfield      #112                // Field index:I
      59: goto          15
      62: iload_1
      63: aload_0
      64: getfield      #112                // Field index:I
      67: if_icmpeq     85
      70: aload_0
      71: aload_0
      72: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      75: iload_1
      76: aload_0
      77: getfield      #112                // Field index:I
      80: invokevirtual #218                // Method appendText:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;II)V
      83: iconst_1
      84: ireturn
      85: iconst_0
      86: ireturn

  protected java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    Code:
       0: aload_0
       1: invokespecial #350                // Method java/lang/Object.clone:()Ljava/lang/Object;
       4: areturn

  protected com.vladsch.flexmark.internal.InlineParserImpl$DelimiterData scanDelimiters(com.vladsch.flexmark.parser.delimiter.DelimiterProcessor, char);
    Code:
       0: aload_0
       1: getfield      #112                // Field index:I
       4: istore_3
       5: iconst_0
       6: istore        4
       8: aload_0
       9: invokevirtual #147                // Method peek:()C
      12: iload_2
      13: if_icmpne     32
      16: iinc          4, 1
      19: aload_0
      20: dup
      21: getfield      #112                // Field index:I
      24: iconst_1
      25: iadd
      26: putfield      #112                // Field index:I
      29: goto          8
      32: iload         4
      34: aload_1
      35: invokeinterface #351,  1          // InterfaceMethod com/vladsch/flexmark/parser/delimiter/DelimiterProcessor.getMinLength:()I
      40: if_icmpge     50
      43: aload_0
      44: iload_3
      45: putfield      #112                // Field index:I
      48: aconst_null
      49: areturn
      50: iload_3
      51: ifne          60
      54: ldc_w         #352                // String \n
      57: goto          75
      60: aload_0
      61: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      64: iload_3
      65: iconst_1
      66: isub
      67: invokeinterface #140,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.charAt:(I)C
      72: invokestatic  #353                // Method java/lang/String.valueOf:(C)Ljava/lang/String;
      75: astore        5
      77: aload_0
      78: invokevirtual #147                // Method peek:()C
      81: istore        6
      83: iload         6
      85: ifne          94
      88: ldc_w         #352                // String \n
      91: goto          99
      94: iload         6
      96: invokestatic  #353                // Method java/lang/String.valueOf:(C)Ljava/lang/String;
      99: astore        7
     101: aload_0
     102: getfield      #35                 // Field myParsing:Lcom/vladsch/flexmark/ast/util/Parsing;
     105: getfield      #354                // Field com/vladsch/flexmark/ast/util/Parsing.UNICODE_WHITESPACE_CHAR:Ljava/util/regex/Pattern;
     108: aload         5
     110: invokevirtual #189                // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
     113: invokevirtual #217                // Method java/util/regex/Matcher.matches:()Z
     116: istore        12
     118: aload_0
     119: getfield      #35                 // Field myParsing:Lcom/vladsch/flexmark/ast/util/Parsing;
     122: getfield      #354                // Field com/vladsch/flexmark/ast/util/Parsing.UNICODE_WHITESPACE_CHAR:Ljava/util/regex/Pattern;
     125: aload         7
     127: invokevirtual #189                // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
     130: invokevirtual #217                // Method java/util/regex/Matcher.matches:()Z
     133: istore        13
     135: aload_0
     136: getfield      #70                 // Field options:Lcom/vladsch/flexmark/parser/InlineParserOptions;
     139: getfield      #355                // Field com/vladsch/flexmark/parser/InlineParserOptions.inlineDelimiterDirectionalPunctuations:Z
     142: ifeq          236
     145: aload_0
     146: getfield      #35                 // Field myParsing:Lcom/vladsch/flexmark/ast/util/Parsing;
     149: getfield      #356                // Field com/vladsch/flexmark/ast/util/Parsing.PUNCTUATION_OPEN:Ljava/util/regex/Pattern;
     152: aload         5
     154: invokevirtual #189                // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
     157: invokevirtual #217                // Method java/util/regex/Matcher.matches:()Z
     160: istore        8
     162: aload_0
     163: getfield      #35                 // Field myParsing:Lcom/vladsch/flexmark/ast/util/Parsing;
     166: getfield      #357                // Field com/vladsch/flexmark/ast/util/Parsing.PUNCTUATION_CLOSE:Ljava/util/regex/Pattern;
     169: aload         7
     171: invokevirtual #189                // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
     174: invokevirtual #217                // Method java/util/regex/Matcher.matches:()Z
     177: istore        9
     179: iload         13
     181: ifne          203
     184: iload         9
     186: ifeq          199
     189: iload         12
     191: ifne          199
     194: iload         8
     196: ifeq          203
     199: iconst_1
     200: goto          204
     203: iconst_0
     204: istore        10
     206: iload         12
     208: ifne          230
     211: iload         8
     213: ifeq          226
     216: iload         13
     218: ifne          226
     221: iload         9
     223: ifeq          230
     226: iconst_1
     227: goto          231
     230: iconst_0
     231: istore        11
     233: goto          324
     236: aload_0
     237: getfield      #35                 // Field myParsing:Lcom/vladsch/flexmark/ast/util/Parsing;
     240: getfield      #358                // Field com/vladsch/flexmark/ast/util/Parsing.PUNCTUATION:Ljava/util/regex/Pattern;
     243: aload         5
     245: invokevirtual #189                // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
     248: invokevirtual #217                // Method java/util/regex/Matcher.matches:()Z
     251: istore        8
     253: aload_0
     254: getfield      #35                 // Field myParsing:Lcom/vladsch/flexmark/ast/util/Parsing;
     257: getfield      #358                // Field com/vladsch/flexmark/ast/util/Parsing.PUNCTUATION:Ljava/util/regex/Pattern;
     260: aload         7
     262: invokevirtual #189                // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
     265: invokevirtual #217                // Method java/util/regex/Matcher.matches:()Z
     268: istore        9
     270: iload         13
     272: ifne          294
     275: iload         9
     277: ifeq          290
     280: iload         12
     282: ifne          290
     285: iload         8
     287: ifeq          294
     290: iconst_1
     291: goto          295
     294: iconst_0
     295: istore        10
     297: iload         12
     299: ifne          321
     302: iload         8
     304: ifeq          317
     307: iload         13
     309: ifne          317
     312: iload         9
     314: ifeq          321
     317: iconst_1
     318: goto          322
     321: iconst_0
     322: istore        11
     324: iload_2
     325: aload_1
     326: invokeinterface #99,  1           // InterfaceMethod com/vladsch/flexmark/parser/delimiter/DelimiterProcessor.getOpeningCharacter:()C
     331: if_icmpne     363
     334: aload_1
     335: aload         5
     337: aload         7
     339: iload         10
     341: iload         11
     343: iload         8
     345: iload         9
     347: iload         12
     349: iload         13
     351: invokeinterface #359,  9          // InterfaceMethod com/vladsch/flexmark/parser/delimiter/DelimiterProcessor.canBeOpener:(Ljava/lang/String;Ljava/lang/String;ZZZZZZ)Z
     356: ifeq          363
     359: iconst_1
     360: goto          364
     363: iconst_0
     364: istore        14
     366: iload_2
     367: aload_1
     368: invokeinterface #101,  1          // InterfaceMethod com/vladsch/flexmark/parser/delimiter/DelimiterProcessor.getClosingCharacter:()C
     373: if_icmpne     405
     376: aload_1
     377: aload         5
     379: aload         7
     381: iload         10
     383: iload         11
     385: iload         8
     387: iload         9
     389: iload         12
     391: iload         13
     393: invokeinterface #360,  9          // InterfaceMethod com/vladsch/flexmark/parser/delimiter/DelimiterProcessor.canBeCloser:(Ljava/lang/String;Ljava/lang/String;ZZZZZZ)Z
     398: ifeq          405
     401: iconst_1
     402: goto          406
     405: iconst_0
     406: istore        15
     408: aload_0
     409: iload_3
     410: putfield      #112                // Field index:I
     413: iload         14
     415: ifne          432
     418: iload         15
     420: ifne          432
     423: aload_1
     424: invokeinterface #361,  1          // InterfaceMethod com/vladsch/flexmark/parser/delimiter/DelimiterProcessor.skipNonOpenerCloser:()Z
     429: ifne          446
     432: new           #362                // class com/vladsch/flexmark/internal/InlineParserImpl$DelimiterData
     435: dup
     436: iload         4
     438: iload         14
     440: iload         15
     442: invokespecial #363                // Method com/vladsch/flexmark/internal/InlineParserImpl$DelimiterData."<init>":(IZZ)V
     445: areturn
     446: aconst_null
     447: areturn

  public void processDelimiters(com.vladsch.flexmark.internal.Delimiter);
    Code:
       0: new           #1                  // class java/util/HashMap
       3: dup
       4: invokespecial #2                  // Method java/util/HashMap."<init>":()V
       7: astore_2
       8: aload_0
       9: getfield      #113                // Field lastDelimiter:Lcom/vladsch/flexmark/internal/Delimiter;
      12: astore_3
      13: aload_3
      14: ifnull        33
      17: aload_3
      18: getfield      #236                // Field com/vladsch/flexmark/internal/Delimiter.previous:Lcom/vladsch/flexmark/internal/Delimiter;
      21: aload_1
      22: if_acmpeq     33
      25: aload_3
      26: getfield      #236                // Field com/vladsch/flexmark/internal/Delimiter.previous:Lcom/vladsch/flexmark/internal/Delimiter;
      29: astore_3
      30: goto          13
      33: aload_3
      34: ifnull        444
      37: aload_3
      38: getfield      #364                // Field com/vladsch/flexmark/internal/Delimiter.delimiterChar:C
      41: istore        4
      43: aload_0
      44: getfield      #71                 // Field delimiterProcessors:Ljava/util/Map;
      47: iload         4
      49: invokestatic  #10                 // Method java/lang/Character.valueOf:(C)Ljava/lang/Character;
      52: invokeinterface #11,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      57: checkcast     #98                 // class com/vladsch/flexmark/parser/delimiter/DelimiterProcessor
      60: astore        5
      62: aload_3
      63: getfield      #365                // Field com/vladsch/flexmark/internal/Delimiter.canClose:Z
      66: ifeq          74
      69: aload         5
      71: ifnonnull     82
      74: aload_3
      75: getfield      #237                // Field com/vladsch/flexmark/internal/Delimiter.next:Lcom/vladsch/flexmark/internal/Delimiter;
      78: astore_3
      79: goto          33
      82: aload         5
      84: invokeinterface #99,  1           // InterfaceMethod com/vladsch/flexmark/parser/delimiter/DelimiterProcessor.getOpeningCharacter:()C
      89: istore        6
      91: iconst_0
      92: istore        7
      94: iconst_0
      95: istore        8
      97: iconst_0
      98: istore        9
     100: aload_3
     101: getfield      #236                // Field com/vladsch/flexmark/internal/Delimiter.previous:Lcom/vladsch/flexmark/internal/Delimiter;
     104: astore        10
     106: aload         10
     108: ifnull        187
     111: aload         10
     113: aload_1
     114: if_acmpeq     187
     117: aload         10
     119: aload_2
     120: iload         4
     122: invokestatic  #10                 // Method java/lang/Character.valueOf:(C)Ljava/lang/Character;
     125: invokeinterface #11,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
     130: if_acmpeq     187
     133: aload         10
     135: getfield      #366                // Field com/vladsch/flexmark/internal/Delimiter.canOpen:Z
     138: ifeq          177
     141: aload         10
     143: getfield      #364                // Field com/vladsch/flexmark/internal/Delimiter.delimiterChar:C
     146: iload         6
     148: if_icmpne     177
     151: iconst_1
     152: istore        9
     154: aload         5
     156: aload         10
     158: aload_3
     159: invokeinterface #367,  3          // InterfaceMethod com/vladsch/flexmark/parser/delimiter/DelimiterProcessor.getDelimiterUse:(Lcom/vladsch/flexmark/parser/delimiter/DelimiterRun;Lcom/vladsch/flexmark/parser/delimiter/DelimiterRun;)I
     164: istore        7
     166: iload         7
     168: ifle          177
     171: iconst_1
     172: istore        8
     174: goto          187
     177: aload         10
     179: getfield      #236                // Field com/vladsch/flexmark/internal/Delimiter.previous:Lcom/vladsch/flexmark/internal/Delimiter;
     182: astore        10
     184: goto          106
     187: iload         8
     189: ifne          233
     192: iload         9
     194: ifne          225
     197: aload_2
     198: iload         4
     200: invokestatic  #10                 // Method java/lang/Character.valueOf:(C)Ljava/lang/Character;
     203: aload_3
     204: getfield      #236                // Field com/vladsch/flexmark/internal/Delimiter.previous:Lcom/vladsch/flexmark/internal/Delimiter;
     207: invokeinterface #15,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     212: pop
     213: aload_3
     214: getfield      #366                // Field com/vladsch/flexmark/internal/Delimiter.canOpen:Z
     217: ifne          225
     220: aload_0
     221: aload_3
     222: invokevirtual #292                // Method removeDelimiterKeepNode:(Lcom/vladsch/flexmark/internal/Delimiter;)V
     225: aload_3
     226: getfield      #237                // Field com/vladsch/flexmark/internal/Delimiter.next:Lcom/vladsch/flexmark/internal/Delimiter;
     229: astore_3
     230: goto          33
     233: aload         10
     235: dup
     236: getfield      #235                // Field com/vladsch/flexmark/internal/Delimiter.numDelims:I
     239: iload         7
     241: isub
     242: putfield      #235                // Field com/vladsch/flexmark/internal/Delimiter.numDelims:I
     245: aload_3
     246: dup
     247: getfield      #235                // Field com/vladsch/flexmark/internal/Delimiter.numDelims:I
     250: iload         7
     252: isub
     253: putfield      #235                // Field com/vladsch/flexmark/internal/Delimiter.numDelims:I
     256: aload_0
     257: aload         10
     259: aload_3
     260: invokevirtual #368                // Method removeDelimitersBetween:(Lcom/vladsch/flexmark/internal/Delimiter;Lcom/vladsch/flexmark/internal/Delimiter;)V
     263: aload         10
     265: dup
     266: getfield      #235                // Field com/vladsch/flexmark/internal/Delimiter.numDelims:I
     269: iload         7
     271: iadd
     272: putfield      #235                // Field com/vladsch/flexmark/internal/Delimiter.numDelims:I
     275: aload_3
     276: dup
     277: getfield      #235                // Field com/vladsch/flexmark/internal/Delimiter.numDelims:I
     280: iload         7
     282: iadd
     283: putfield      #235                // Field com/vladsch/flexmark/internal/Delimiter.numDelims:I
     286: aload         5
     288: aload         10
     290: aload_3
     291: iload         7
     293: invokeinterface #369,  4          // InterfaceMethod com/vladsch/flexmark/parser/delimiter/DelimiterProcessor.process:(Lcom/vladsch/flexmark/internal/Delimiter;Lcom/vladsch/flexmark/internal/Delimiter;I)V
     298: aload         10
     300: dup
     301: getfield      #235                // Field com/vladsch/flexmark/internal/Delimiter.numDelims:I
     304: iload         7
     306: isub
     307: putfield      #235                // Field com/vladsch/flexmark/internal/Delimiter.numDelims:I
     310: aload_3
     311: dup
     312: getfield      #235                // Field com/vladsch/flexmark/internal/Delimiter.numDelims:I
     315: iload         7
     317: isub
     318: putfield      #235                // Field com/vladsch/flexmark/internal/Delimiter.numDelims:I
     321: aload         10
     323: getfield      #235                // Field com/vladsch/flexmark/internal/Delimiter.numDelims:I
     326: ifne          338
     329: aload_0
     330: aload         10
     332: invokevirtual #370                // Method removeDelimiterAndNode:(Lcom/vladsch/flexmark/internal/Delimiter;)V
     335: goto          365
     338: aload         10
     340: getfield      #371                // Field com/vladsch/flexmark/internal/Delimiter.node:Lcom/vladsch/flexmark/ast/Text;
     343: aload         10
     345: getfield      #371                // Field com/vladsch/flexmark/internal/Delimiter.node:Lcom/vladsch/flexmark/ast/Text;
     348: invokevirtual #128                // Method com/vladsch/flexmark/ast/Text.getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     351: iconst_0
     352: aload         10
     354: getfield      #235                // Field com/vladsch/flexmark/internal/Delimiter.numDelims:I
     357: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     362: invokevirtual #134                // Method com/vladsch/flexmark/ast/Text.setChars:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     365: aload_3
     366: getfield      #235                // Field com/vladsch/flexmark/internal/Delimiter.numDelims:I
     369: ifne          389
     372: aload_3
     373: getfield      #237                // Field com/vladsch/flexmark/internal/Delimiter.next:Lcom/vladsch/flexmark/internal/Delimiter;
     376: astore        11
     378: aload_0
     379: aload_3
     380: invokevirtual #370                // Method removeDelimiterAndNode:(Lcom/vladsch/flexmark/internal/Delimiter;)V
     383: aload         11
     385: astore_3
     386: goto          441
     389: aload_3
     390: getfield      #371                // Field com/vladsch/flexmark/internal/Delimiter.node:Lcom/vladsch/flexmark/ast/Text;
     393: invokevirtual #128                // Method com/vladsch/flexmark/ast/Text.getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     396: astore        11
     398: aload         11
     400: invokeinterface #139,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
     405: istore        12
     407: aload_3
     408: getfield      #371                // Field com/vladsch/flexmark/internal/Delimiter.node:Lcom/vladsch/flexmark/ast/Text;
     411: aload         11
     413: iload         12
     415: aload_3
     416: getfield      #235                // Field com/vladsch/flexmark/internal/Delimiter.numDelims:I
     419: isub
     420: iload         12
     422: invokeinterface #141,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     427: invokevirtual #134                // Method com/vladsch/flexmark/ast/Text.setChars:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     430: aload_3
     431: aload_3
     432: invokevirtual #372                // Method com/vladsch/flexmark/internal/Delimiter.getIndex:()I
     435: iload         7
     437: iadd
     438: invokevirtual #373                // Method com/vladsch/flexmark/internal/Delimiter.setIndex:(I)V
     441: goto          33
     444: aload_0
     445: getfield      #113                // Field lastDelimiter:Lcom/vladsch/flexmark/internal/Delimiter;
     448: ifnull        470
     451: aload_0
     452: getfield      #113                // Field lastDelimiter:Lcom/vladsch/flexmark/internal/Delimiter;
     455: aload_1
     456: if_acmpeq     470
     459: aload_0
     460: aload_0
     461: getfield      #113                // Field lastDelimiter:Lcom/vladsch/flexmark/internal/Delimiter;
     464: invokevirtual #292                // Method removeDelimiterKeepNode:(Lcom/vladsch/flexmark/internal/Delimiter;)V
     467: goto          444
     470: return

  public void removeDelimitersBetween(com.vladsch.flexmark.internal.Delimiter, com.vladsch.flexmark.internal.Delimiter);
    Code:
       0: aload_2
       1: getfield      #236                // Field com/vladsch/flexmark/internal/Delimiter.previous:Lcom/vladsch/flexmark/internal/Delimiter;
       4: astore_3
       5: aload_3
       6: ifnull        31
       9: aload_3
      10: aload_1
      11: if_acmpeq     31
      14: aload_3
      15: getfield      #236                // Field com/vladsch/flexmark/internal/Delimiter.previous:Lcom/vladsch/flexmark/internal/Delimiter;
      18: astore        4
      20: aload_0
      21: aload_3
      22: invokevirtual #292                // Method removeDelimiterKeepNode:(Lcom/vladsch/flexmark/internal/Delimiter;)V
      25: aload         4
      27: astore_3
      28: goto          5
      31: return

  public void removeDelimiterAndNode(com.vladsch.flexmark.internal.Delimiter);
    Code:
       0: aload_1
       1: getfield      #371                // Field com/vladsch/flexmark/internal/Delimiter.node:Lcom/vladsch/flexmark/ast/Text;
       4: astore_2
       5: aload_1
       6: invokevirtual #374                // Method com/vladsch/flexmark/internal/Delimiter.getPreviousNonDelimiterTextNode:()Lcom/vladsch/flexmark/ast/Text;
       9: astore_3
      10: aload_1
      11: invokevirtual #375                // Method com/vladsch/flexmark/internal/Delimiter.getNextNonDelimiterTextNode:()Lcom/vladsch/flexmark/ast/Text;
      14: astore        4
      16: aload_3
      17: ifnull        52
      20: aload         4
      22: ifnull        52
      25: aload_3
      26: aload_0
      27: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      30: aload_3
      31: invokevirtual #376                // Method com/vladsch/flexmark/ast/Text.getStartOffset:()I
      34: aload         4
      36: invokevirtual #377                // Method com/vladsch/flexmark/ast/Text.getEndOffset:()I
      39: invokeinterface #378,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.baseSubSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      44: invokevirtual #134                // Method com/vladsch/flexmark/ast/Text.setChars:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
      47: aload         4
      49: invokevirtual #267                // Method com/vladsch/flexmark/ast/Text.unlink:()V
      52: aload_2
      53: invokevirtual #267                // Method com/vladsch/flexmark/ast/Text.unlink:()V
      56: aload_0
      57: aload_1
      58: invokevirtual #379                // Method removeDelimiter:(Lcom/vladsch/flexmark/internal/Delimiter;)V
      61: return

  public void removeDelimiterKeepNode(com.vladsch.flexmark.internal.Delimiter);
    Code:
       0: aload_0
       1: getfield      #71                 // Field delimiterProcessors:Ljava/util/Map;
       4: aload_1
       5: getfield      #364                // Field com/vladsch/flexmark/internal/Delimiter.delimiterChar:C
       8: invokestatic  #10                 // Method java/lang/Character.valueOf:(C)Ljava/lang/Character;
      11: invokeinterface #11,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      16: checkcast     #98                 // class com/vladsch/flexmark/parser/delimiter/DelimiterProcessor
      19: astore_3
      20: aload_3
      21: ifnull        35
      24: aload_3
      25: aload_0
      26: aload_1
      27: invokeinterface #380,  3          // InterfaceMethod com/vladsch/flexmark/parser/delimiter/DelimiterProcessor.unmatchedDelimiterNode:(Lcom/vladsch/flexmark/parser/InlineParser;Lcom/vladsch/flexmark/parser/delimiter/DelimiterRun;)Lcom/vladsch/flexmark/ast/Node;
      32: goto          36
      35: aconst_null
      36: astore_2
      37: aload_2
      38: ifnull        67
      41: aload_2
      42: aload_1
      43: getfield      #371                // Field com/vladsch/flexmark/internal/Delimiter.node:Lcom/vladsch/flexmark/ast/Text;
      46: if_acmpeq     72
      49: aload_1
      50: getfield      #371                // Field com/vladsch/flexmark/internal/Delimiter.node:Lcom/vladsch/flexmark/ast/Text;
      53: aload_2
      54: invokevirtual #381                // Method com/vladsch/flexmark/ast/Text.insertAfter:(Lcom/vladsch/flexmark/ast/Node;)V
      57: aload_1
      58: getfield      #371                // Field com/vladsch/flexmark/internal/Delimiter.node:Lcom/vladsch/flexmark/ast/Text;
      61: invokevirtual #267                // Method com/vladsch/flexmark/ast/Text.unlink:()V
      64: goto          72
      67: aload_1
      68: getfield      #371                // Field com/vladsch/flexmark/internal/Delimiter.node:Lcom/vladsch/flexmark/ast/Text;
      71: astore_2
      72: aload_1
      73: invokevirtual #374                // Method com/vladsch/flexmark/internal/Delimiter.getPreviousNonDelimiterTextNode:()Lcom/vladsch/flexmark/ast/Text;
      76: astore        4
      78: aload_1
      79: invokevirtual #375                // Method com/vladsch/flexmark/internal/Delimiter.getNextNonDelimiterTextNode:()Lcom/vladsch/flexmark/ast/Text;
      82: astore        5
      84: aload_2
      85: instanceof    #125                // class com/vladsch/flexmark/ast/Text
      88: ifeq          209
      91: aload         4
      93: ifnonnull     101
      96: aload         5
      98: ifnull        209
     101: aload         5
     103: ifnull        147
     106: aload         4
     108: ifnull        147
     111: aload_2
     112: aload_0
     113: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     116: aload         4
     118: invokevirtual #376                // Method com/vladsch/flexmark/ast/Text.getStartOffset:()I
     121: aload         5
     123: invokevirtual #377                // Method com/vladsch/flexmark/ast/Text.getEndOffset:()I
     126: invokeinterface #378,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.baseSubSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     131: invokevirtual #182                // Method com/vladsch/flexmark/ast/Node.setChars:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     134: aload         4
     136: invokevirtual #267                // Method com/vladsch/flexmark/ast/Text.unlink:()V
     139: aload         5
     141: invokevirtual #267                // Method com/vladsch/flexmark/ast/Text.unlink:()V
     144: goto          209
     147: aload         4
     149: ifnull        182
     152: aload_2
     153: aload_0
     154: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     157: aload         4
     159: invokevirtual #376                // Method com/vladsch/flexmark/ast/Text.getStartOffset:()I
     162: aload_2
     163: invokevirtual #382                // Method com/vladsch/flexmark/ast/Node.getEndOffset:()I
     166: invokeinterface #378,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.baseSubSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     171: invokevirtual #182                // Method com/vladsch/flexmark/ast/Node.setChars:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     174: aload         4
     176: invokevirtual #267                // Method com/vladsch/flexmark/ast/Text.unlink:()V
     179: goto          209
     182: aload_2
     183: aload_0
     184: getfield      #111                // Field input:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     187: aload_2
     188: invokevirtual #383                // Method com/vladsch/flexmark/ast/Node.getStartOffset:()I
     191: aload         5
     193: invokevirtual #377                // Method com/vladsch/flexmark/ast/Text.getEndOffset:()I
     196: invokeinterface #378,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.baseSubSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     201: invokevirtual #182                // Method com/vladsch/flexmark/ast/Node.setChars:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     204: aload         5
     206: invokevirtual #267                // Method com/vladsch/flexmark/ast/Text.unlink:()V
     209: aload_0
     210: aload_1
     211: invokevirtual #379                // Method removeDelimiter:(Lcom/vladsch/flexmark/internal/Delimiter;)V
     214: return

  public void removeDelimiter(com.vladsch.flexmark.internal.Delimiter);
    Code:
       0: aload_1
       1: getfield      #236                // Field com/vladsch/flexmark/internal/Delimiter.previous:Lcom/vladsch/flexmark/internal/Delimiter;
       4: ifnull        18
       7: aload_1
       8: getfield      #236                // Field com/vladsch/flexmark/internal/Delimiter.previous:Lcom/vladsch/flexmark/internal/Delimiter;
      11: aload_1
      12: getfield      #237                // Field com/vladsch/flexmark/internal/Delimiter.next:Lcom/vladsch/flexmark/internal/Delimiter;
      15: putfield      #237                // Field com/vladsch/flexmark/internal/Delimiter.next:Lcom/vladsch/flexmark/internal/Delimiter;
      18: aload_1
      19: getfield      #237                // Field com/vladsch/flexmark/internal/Delimiter.next:Lcom/vladsch/flexmark/internal/Delimiter;
      22: ifnonnull     36
      25: aload_0
      26: aload_1
      27: getfield      #236                // Field com/vladsch/flexmark/internal/Delimiter.previous:Lcom/vladsch/flexmark/internal/Delimiter;
      30: putfield      #113                // Field lastDelimiter:Lcom/vladsch/flexmark/internal/Delimiter;
      33: goto          47
      36: aload_1
      37: getfield      #237                // Field com/vladsch/flexmark/internal/Delimiter.next:Lcom/vladsch/flexmark/internal/Delimiter;
      40: aload_1
      41: getfield      #236                // Field com/vladsch/flexmark/internal/Delimiter.previous:Lcom/vladsch/flexmark/internal/Delimiter;
      44: putfield      #236                // Field com/vladsch/flexmark/internal/Delimiter.previous:Lcom/vladsch/flexmark/internal/Delimiter;
      47: return

  static {};
    Code:
       0: ldc_w         #384                // class com/vladsch/flexmark/internal/InlineParserImpl
       3: invokevirtual #385                // Method java/lang/Class.desiredAssertionStatus:()Z
       6: ifne          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: putstatic     #54                 // Field $assertionsDisabled:Z
      17: return
}
