Compiled from "HeadingParser.java"
class com.vladsch.flexmark.internal.HeadingParser$HeadingParsing extends com.vladsch.flexmark.ast.util.Parsing {
  private final java.util.regex.Pattern ATX_HEADING;

  private final java.util.regex.Pattern ATX_TRAILING;

  private final java.util.regex.Pattern SETEXT_HEADING;

  public com.vladsch.flexmark.internal.HeadingParser$HeadingParsing(com.vladsch.flexmark.util.options.DataHolder);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #4                  // Method com/vladsch/flexmark/ast/util/Parsing."<init>":(Lcom/vladsch/flexmark/util/options/DataHolder;)V
       5: aload_0
       6: getstatic     #5                  // Field com/vladsch/flexmark/parser/Parser.HEADING_NO_ATX_SPACE:Lcom/vladsch/flexmark/util/options/DataKey;
       9: aload_1
      10: invokevirtual #6                  // Method com/vladsch/flexmark/util/options/DataKey.getFrom:(Lcom/vladsch/flexmark/util/options/DataHolder;)Ljava/lang/Object;
      13: checkcast     #7                  // class java/lang/Boolean
      16: invokevirtual #8                  // Method java/lang/Boolean.booleanValue:()Z
      19: ifeq          30
      22: ldc           #9                  // String ^#{1,6}(?:[ \t]*|$)
      24: invokestatic  #10                 // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
      27: goto          59
      30: getstatic     #11                 // Field com/vladsch/flexmark/parser/Parser.HEADING_NO_EMPTY_HEADING_WITHOUT_SPACE:Lcom/vladsch/flexmark/util/options/DataKey;
      33: aload_1
      34: invokevirtual #6                  // Method com/vladsch/flexmark/util/options/DataKey.getFrom:(Lcom/vladsch/flexmark/util/options/DataHolder;)Ljava/lang/Object;
      37: checkcast     #7                  // class java/lang/Boolean
      40: invokevirtual #8                  // Method java/lang/Boolean.booleanValue:()Z
      43: ifeq          54
      46: ldc           #12                 // String ^#{1,6}[ \t]+
      48: invokestatic  #10                 // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
      51: goto          59
      54: ldc           #13                 // String ^#{1,6}(?:[ \t]+|$)
      56: invokestatic  #10                 // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
      59: putfield      #3                  // Field ATX_HEADING:Ljava/util/regex/Pattern;
      62: aload_0
      63: getstatic     #5                  // Field com/vladsch/flexmark/parser/Parser.HEADING_NO_ATX_SPACE:Lcom/vladsch/flexmark/util/options/DataKey;
      66: aload_1
      67: invokevirtual #6                  // Method com/vladsch/flexmark/util/options/DataKey.getFrom:(Lcom/vladsch/flexmark/util/options/DataHolder;)Ljava/lang/Object;
      70: checkcast     #7                  // class java/lang/Boolean
      73: invokevirtual #8                  // Method java/lang/Boolean.booleanValue:()Z
      76: ifeq          87
      79: ldc           #14                 // String [ \t]*#+[ \t]*$
      81: invokestatic  #10                 // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
      84: goto          92
      87: ldc           #15                 // String (^| |\t)[ \t]*#+[ \t]*$
      89: invokestatic  #10                 // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
      92: putfield      #2                  // Field ATX_TRAILING:Ljava/util/regex/Pattern;
      95: getstatic     #16                 // Field com/vladsch/flexmark/parser/Parser.HEADING_SETEXT_MARKER_LENGTH:Lcom/vladsch/flexmark/util/options/DataKey;
      98: aload_1
      99: invokevirtual #6                  // Method com/vladsch/flexmark/util/options/DataKey.getFrom:(Lcom/vladsch/flexmark/util/options/DataHolder;)Ljava/lang/Object;
     102: checkcast     #17                 // class java/lang/Integer
     105: invokevirtual #18                 // Method java/lang/Integer.intValue:()I
     108: istore_2
     109: aload_0
     110: iload_2
     111: iconst_1
     112: if_icmpgt     123
     115: ldc           #19                 // String ^(?:=+|-+)[ \t]*$
     117: invokestatic  #10                 // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
     120: goto          159
     123: new           #20                 // class java/lang/StringBuilder
     126: dup
     127: invokespecial #21                 // Method java/lang/StringBuilder."<init>":()V
     130: ldc           #22                 // String ^(?:={
     132: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     135: iload_2
     136: invokevirtual #24                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     139: ldc           #25                 // String ,}|-{
     141: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     144: iload_2
     145: invokevirtual #24                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     148: ldc           #26                 // String ,})[ \t]*$
     150: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     153: invokevirtual #27                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     156: invokestatic  #10                 // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
     159: putfield      #1                  // Field SETEXT_HEADING:Ljava/util/regex/Pattern;
     162: return

  static java.util.regex.Pattern access$000(com.vladsch.flexmark.internal.HeadingParser$HeadingParsing);
    Code:
       0: aload_0
       1: getfield      #3                  // Field ATX_HEADING:Ljava/util/regex/Pattern;
       4: areturn

  static java.util.regex.Pattern access$100(com.vladsch.flexmark.internal.HeadingParser$HeadingParsing);
    Code:
       0: aload_0
       1: getfield      #2                  // Field ATX_TRAILING:Ljava/util/regex/Pattern;
       4: areturn

  static java.util.regex.Pattern access$200(com.vladsch.flexmark.internal.HeadingParser$HeadingParsing);
    Code:
       0: aload_0
       1: getfield      #1                  // Field SETEXT_HEADING:Ljava/util/regex/Pattern;
       4: areturn
}
