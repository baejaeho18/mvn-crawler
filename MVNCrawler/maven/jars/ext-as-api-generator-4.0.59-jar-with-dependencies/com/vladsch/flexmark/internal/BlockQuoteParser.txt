Compiled from "BlockQuoteParser.java"
public class com.vladsch.flexmark.internal.BlockQuoteParser extends com.vladsch.flexmark.parser.block.AbstractBlockParser {
  private final com.vladsch.flexmark.ast.BlockQuote block;

  private final boolean allowLeadingSpace;

  private final boolean continueToBlankLine;

  private final boolean ignoreBlankLine;

  private final boolean interruptsParagraph;

  private final boolean interruptsItemParagraph;

  private final boolean withLeadSpacesInterruptsItemParagraph;

  private int lastWasBlankLine;

  public com.vladsch.flexmark.internal.BlockQuoteParser(com.vladsch.flexmark.util.options.DataHolder, com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/vladsch/flexmark/parser/block/AbstractBlockParser."<init>":()V
       4: aload_0
       5: new           #2                  // class com/vladsch/flexmark/ast/BlockQuote
       8: dup
       9: invokespecial #3                  // Method com/vladsch/flexmark/ast/BlockQuote."<init>":()V
      12: putfield      #4                  // Field block:Lcom/vladsch/flexmark/ast/BlockQuote;
      15: aload_0
      16: iconst_0
      17: putfield      #5                  // Field lastWasBlankLine:I
      20: aload_0
      21: getfield      #4                  // Field block:Lcom/vladsch/flexmark/ast/BlockQuote;
      24: aload_2
      25: invokevirtual #6                  // Method com/vladsch/flexmark/ast/BlockQuote.setOpeningMarker:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
      28: aload_0
      29: aload_1
      30: getstatic     #7                  // Field com/vladsch/flexmark/parser/Parser.BLOCK_QUOTE_TO_BLANK_LINE:Lcom/vladsch/flexmark/util/options/DataKey;
      33: invokeinterface #8,  2            // InterfaceMethod com/vladsch/flexmark/util/options/DataHolder.get:(Lcom/vladsch/flexmark/util/options/DataKey;)Ljava/lang/Object;
      38: checkcast     #9                  // class java/lang/Boolean
      41: invokevirtual #10                 // Method java/lang/Boolean.booleanValue:()Z
      44: putfield      #11                 // Field continueToBlankLine:Z
      47: aload_0
      48: aload_1
      49: getstatic     #12                 // Field com/vladsch/flexmark/parser/Parser.BLOCK_QUOTE_ALLOW_LEADING_SPACE:Lcom/vladsch/flexmark/util/options/DataKey;
      52: invokeinterface #8,  2            // InterfaceMethod com/vladsch/flexmark/util/options/DataHolder.get:(Lcom/vladsch/flexmark/util/options/DataKey;)Ljava/lang/Object;
      57: checkcast     #9                  // class java/lang/Boolean
      60: invokevirtual #10                 // Method java/lang/Boolean.booleanValue:()Z
      63: putfield      #13                 // Field allowLeadingSpace:Z
      66: aload_0
      67: aload_1
      68: getstatic     #14                 // Field com/vladsch/flexmark/parser/Parser.BLOCK_QUOTE_IGNORE_BLANK_LINE:Lcom/vladsch/flexmark/util/options/DataKey;
      71: invokeinterface #8,  2            // InterfaceMethod com/vladsch/flexmark/util/options/DataHolder.get:(Lcom/vladsch/flexmark/util/options/DataKey;)Ljava/lang/Object;
      76: checkcast     #9                  // class java/lang/Boolean
      79: invokevirtual #10                 // Method java/lang/Boolean.booleanValue:()Z
      82: putfield      #15                 // Field ignoreBlankLine:Z
      85: aload_0
      86: aload_1
      87: getstatic     #16                 // Field com/vladsch/flexmark/parser/Parser.BLOCK_QUOTE_INTERRUPTS_PARAGRAPH:Lcom/vladsch/flexmark/util/options/DataKey;
      90: invokeinterface #8,  2            // InterfaceMethod com/vladsch/flexmark/util/options/DataHolder.get:(Lcom/vladsch/flexmark/util/options/DataKey;)Ljava/lang/Object;
      95: checkcast     #9                  // class java/lang/Boolean
      98: invokevirtual #10                 // Method java/lang/Boolean.booleanValue:()Z
     101: putfield      #17                 // Field interruptsParagraph:Z
     104: aload_0
     105: aload_1
     106: getstatic     #18                 // Field com/vladsch/flexmark/parser/Parser.BLOCK_QUOTE_INTERRUPTS_ITEM_PARAGRAPH:Lcom/vladsch/flexmark/util/options/DataKey;
     109: invokeinterface #8,  2            // InterfaceMethod com/vladsch/flexmark/util/options/DataHolder.get:(Lcom/vladsch/flexmark/util/options/DataKey;)Ljava/lang/Object;
     114: checkcast     #9                  // class java/lang/Boolean
     117: invokevirtual #10                 // Method java/lang/Boolean.booleanValue:()Z
     120: putfield      #19                 // Field interruptsItemParagraph:Z
     123: aload_0
     124: aload_1
     125: getstatic     #20                 // Field com/vladsch/flexmark/parser/Parser.BLOCK_QUOTE_WITH_LEAD_SPACES_INTERRUPTS_ITEM_PARAGRAPH:Lcom/vladsch/flexmark/util/options/DataKey;
     128: invokeinterface #8,  2            // InterfaceMethod com/vladsch/flexmark/util/options/DataHolder.get:(Lcom/vladsch/flexmark/util/options/DataKey;)Ljava/lang/Object;
     133: checkcast     #9                  // class java/lang/Boolean
     136: invokevirtual #10                 // Method java/lang/Boolean.booleanValue:()Z
     139: putfield      #21                 // Field withLeadSpacesInterruptsItemParagraph:Z
     142: return

  public boolean isContainer();
    Code:
       0: iconst_1
       1: ireturn

  public boolean isPropagatingLastBlankLine(com.vladsch.flexmark.parser.block.BlockParser);
    Code:
       0: iconst_0
       1: ireturn

  public boolean canContain(com.vladsch.flexmark.parser.block.ParserState, com.vladsch.flexmark.parser.block.BlockParser, com.vladsch.flexmark.ast.Block);
    Code:
       0: iconst_1
       1: ireturn

  public com.vladsch.flexmark.ast.BlockQuote getBlock();
    Code:
       0: aload_0
       1: getfield      #4                  // Field block:Lcom/vladsch/flexmark/ast/BlockQuote;
       4: areturn

  public void closeBlock(com.vladsch.flexmark.parser.block.ParserState);
    Code:
       0: aload_0
       1: getfield      #4                  // Field block:Lcom/vladsch/flexmark/ast/BlockQuote;
       4: invokevirtual #22                 // Method com/vladsch/flexmark/ast/BlockQuote.setCharsFromContent:()V
       7: return

  public com.vladsch.flexmark.parser.block.BlockContinue tryContinue(com.vladsch.flexmark.parser.block.ParserState);
    Code:
       0: aload_1
       1: invokeinterface #23,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getNextNonSpaceIndex:()I
       6: istore_2
       7: aload_1
       8: invokeinterface #24,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.isBlank:()Z
      13: ifne          109
      16: aload_1
      17: iload_2
      18: iconst_0
      19: iconst_0
      20: aload_0
      21: getfield      #13                 // Field allowLeadingSpace:Z
      24: aload_0
      25: getfield      #17                 // Field interruptsParagraph:Z
      28: aload_0
      29: getfield      #19                 // Field interruptsItemParagraph:Z
      32: aload_0
      33: getfield      #21                 // Field withLeadSpacesInterruptsItemParagraph:Z
      36: invokestatic  #25                 // Method isMarker:(Lcom/vladsch/flexmark/parser/block/ParserState;IZZZZZZ)Z
      39: dup
      40: istore_3
      41: ifne          58
      44: aload_0
      45: getfield      #11                 // Field continueToBlankLine:Z
      48: ifeq          109
      51: aload_0
      52: getfield      #5                  // Field lastWasBlankLine:I
      55: ifne          109
      58: aload_1
      59: invokeinterface #26,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getColumn:()I
      64: aload_1
      65: invokeinterface #27,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getIndent:()I
      70: iadd
      71: istore        4
      73: aload_0
      74: iconst_0
      75: putfield      #5                  // Field lastWasBlankLine:I
      78: iload_3
      79: ifeq          103
      82: iinc          4, 1
      85: aload_1
      86: invokeinterface #28,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      91: iload_2
      92: iconst_1
      93: iadd
      94: invokestatic  #29                 // Method com/vladsch/flexmark/ast/util/Parsing.isSpaceOrTab:(Ljava/lang/CharSequence;I)Z
      97: ifeq          103
     100: iinc          4, 1
     103: iload         4
     105: invokestatic  #30                 // Method com/vladsch/flexmark/parser/block/BlockContinue.atColumn:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
     108: areturn
     109: aload_0
     110: getfield      #15                 // Field ignoreBlankLine:Z
     113: ifeq          156
     116: aload_1
     117: invokeinterface #24,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.isBlank:()Z
     122: ifeq          156
     125: aload_0
     126: dup
     127: getfield      #5                  // Field lastWasBlankLine:I
     130: iconst_1
     131: iadd
     132: putfield      #5                  // Field lastWasBlankLine:I
     135: aload_1
     136: invokeinterface #26,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getColumn:()I
     141: aload_1
     142: invokeinterface #27,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getIndent:()I
     147: iadd
     148: istore        4
     150: iload         4
     152: invokestatic  #30                 // Method com/vladsch/flexmark/parser/block/BlockContinue.atColumn:(I)Lcom/vladsch/flexmark/parser/block/BlockContinue;
     155: areturn
     156: invokestatic  #31                 // Method com/vladsch/flexmark/parser/block/BlockContinue.none:()Lcom/vladsch/flexmark/parser/block/BlockContinue;
     159: areturn

  static boolean isMarker(com.vladsch.flexmark.parser.block.ParserState, int, boolean, boolean, boolean, boolean, boolean, boolean);
    Code:
       0: aload_0
       1: invokeinterface #28,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getLine:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       6: astore        8
       8: iload_2
       9: ifeq          17
      12: iload         5
      14: ifeq          112
      17: iload_1
      18: aload         8
      20: invokeinterface #32,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      25: if_icmpge     112
      28: aload         8
      30: iload_1
      31: invokeinterface #33,  2           // InterfaceMethod java/lang/CharSequence.charAt:(I)C
      36: bipush        62
      38: if_icmpne     112
      41: iload         4
      43: ifne          55
      46: aload_0
      47: invokeinterface #27,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getIndent:()I
      52: ifne          112
      55: iload_3
      56: ifeq          64
      59: iload         6
      61: ifeq          112
      64: iload_3
      65: ifeq          88
      68: iload         7
      70: ifne          88
      73: aload_0
      74: invokeinterface #27,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getIndent:()I
      79: ifne          86
      82: iconst_1
      83: goto          87
      86: iconst_0
      87: ireturn
      88: aload_0
      89: invokeinterface #27,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getIndent:()I
      94: aload_0
      95: invokeinterface #34,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getParsing:()Lcom/vladsch/flexmark/ast/util/Parsing;
     100: getfield      #35                 // Field com/vladsch/flexmark/ast/util/Parsing.CODE_BLOCK_INDENT:I
     103: if_icmpge     110
     106: iconst_1
     107: goto          111
     110: iconst_0
     111: ireturn
     112: iconst_0
     113: ireturn

  public com.vladsch.flexmark.ast.Block getBlock();
    Code:
       0: aload_0
       1: invokevirtual #36                 // Method getBlock:()Lcom/vladsch/flexmark/ast/BlockQuote;
       4: areturn
}
