Compiled from "HtmlWriter.java"
public class com.vladsch.flexmark.html.HtmlWriter extends com.vladsch.flexmark.util.html.HtmlFormattingAppendableBase<com.vladsch.flexmark.html.HtmlWriter> {
  private com.vladsch.flexmark.html.renderer.NodeRendererContext context;

  private com.vladsch.flexmark.html.renderer.AttributablePart useAttributes;

  public com.vladsch.flexmark.html.HtmlWriter(java.lang.Appendable);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method com/vladsch/flexmark/util/html/HtmlFormattingAppendableBase."<init>":(Ljava/lang/Appendable;)V
       5: return

  public com.vladsch.flexmark.html.HtmlWriter(com.vladsch.flexmark.html.HtmlWriter, java.lang.Appendable, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iload_3
       4: invokespecial #2                  // Method com/vladsch/flexmark/util/html/HtmlFormattingAppendableBase."<init>":(Lcom/vladsch/flexmark/util/html/FormattingAppendable;Ljava/lang/Appendable;Z)V
       7: aload_0
       8: aload_1
       9: getfield      #3                  // Field context:Lcom/vladsch/flexmark/html/renderer/NodeRendererContext;
      12: putfield      #3                  // Field context:Lcom/vladsch/flexmark/html/renderer/NodeRendererContext;
      15: return

  public com.vladsch.flexmark.html.HtmlWriter(java.lang.Appendable, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iconst_0
       4: invokespecial #4                  // Method com/vladsch/flexmark/util/html/HtmlFormattingAppendableBase."<init>":(Ljava/lang/Appendable;IZ)V
       7: return

  public com.vladsch.flexmark.html.HtmlWriter(java.lang.Appendable, int, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: invokespecial #4                  // Method com/vladsch/flexmark/util/html/HtmlFormattingAppendableBase."<init>":(Ljava/lang/Appendable;IZ)V
       7: return

  public com.vladsch.flexmark.html.HtmlWriter(java.lang.Appendable, int, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: invokespecial #5                  // Method com/vladsch/flexmark/util/html/HtmlFormattingAppendableBase."<init>":(Ljava/lang/Appendable;II)V
       7: return

  public com.vladsch.flexmark.html.HtmlWriter(java.lang.Appendable, int, int, boolean, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: invokespecial #5                  // Method com/vladsch/flexmark/util/html/HtmlFormattingAppendableBase."<init>":(Ljava/lang/Appendable;II)V
       7: aload_0
       8: iload         4
      10: invokevirtual #6                  // Method setSuppressOpenTagLine:(Z)V
      13: aload_0
      14: iload         5
      16: invokevirtual #7                  // Method setSuppressCloseTagLine:(Z)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
      19: pop
      20: return

  void setContext(com.vladsch.flexmark.html.renderer.NodeRendererContext);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #3                  // Field context:Lcom/vladsch/flexmark/html/renderer/NodeRendererContext;
       5: return

  public com.vladsch.flexmark.html.renderer.NodeRendererContext getContext();
    Code:
       0: aload_0
       1: getfield      #3                  // Field context:Lcom/vladsch/flexmark/html/renderer/NodeRendererContext;
       4: areturn

  public com.vladsch.flexmark.html.HtmlWriter srcPos();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field context:Lcom/vladsch/flexmark/html/renderer/NodeRendererContext;
       5: invokeinterface #8,  1            // InterfaceMethod com/vladsch/flexmark/html/renderer/NodeRendererContext.getCurrentNode:()Lcom/vladsch/flexmark/ast/Node;
      10: invokevirtual #9                  // Method com/vladsch/flexmark/ast/Node.getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      13: invokevirtual #10                 // Method srcPos:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)Lcom/vladsch/flexmark/html/HtmlWriter;
      16: areturn

  public com.vladsch.flexmark.html.HtmlWriter srcPosWithEOL();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field context:Lcom/vladsch/flexmark/html/renderer/NodeRendererContext;
       5: invokeinterface #8,  1            // InterfaceMethod com/vladsch/flexmark/html/renderer/NodeRendererContext.getCurrentNode:()Lcom/vladsch/flexmark/ast/Node;
      10: invokevirtual #9                  // Method com/vladsch/flexmark/ast/Node.getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      13: invokevirtual #11                 // Method srcPosWithEOL:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)Lcom/vladsch/flexmark/html/HtmlWriter;
      16: areturn

  public com.vladsch.flexmark.html.HtmlWriter srcPosWithTrailingEOL();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field context:Lcom/vladsch/flexmark/html/renderer/NodeRendererContext;
       5: invokeinterface #8,  1            // InterfaceMethod com/vladsch/flexmark/html/renderer/NodeRendererContext.getCurrentNode:()Lcom/vladsch/flexmark/ast/Node;
      10: invokevirtual #9                  // Method com/vladsch/flexmark/ast/Node.getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      13: invokevirtual #12                 // Method srcPosWithTrailingEOL:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)Lcom/vladsch/flexmark/html/HtmlWriter;
      16: areturn

  public com.vladsch.flexmark.html.HtmlWriter srcPos(com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_1
       1: invokeinterface #13,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.isNotNull:()Z
       6: ifeq          33
       9: aload_1
      10: invokeinterface #14,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.trimEOL:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      15: astore_2
      16: aload_0
      17: aload_2
      18: invokeinterface #15,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
      23: aload_2
      24: invokeinterface #16,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
      29: invokevirtual #17                 // Method srcPos:(II)Lcom/vladsch/flexmark/html/HtmlWriter;
      32: areturn
      33: aload_0
      34: areturn

  public com.vladsch.flexmark.html.HtmlWriter srcPosWithEOL(com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_1
       1: invokeinterface #13,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.isNotNull:()Z
       6: ifeq          26
       9: aload_0
      10: aload_1
      11: invokeinterface #15,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
      16: aload_1
      17: invokeinterface #16,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
      22: invokevirtual #17                 // Method srcPos:(II)Lcom/vladsch/flexmark/html/HtmlWriter;
      25: areturn
      26: aload_0
      27: areturn

  public com.vladsch.flexmark.html.HtmlWriter srcPosWithTrailingEOL(com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_1
       1: invokeinterface #13,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.isNotNull:()Z
       6: ifeq          127
       9: aload_1
      10: invokeinterface #16,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
      15: istore_2
      16: aload_1
      17: invokeinterface #18,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getBaseSequence:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      22: astore_3
      23: iload_2
      24: aload_3
      25: invokeinterface #19,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      30: if_icmpge     65
      33: aload_3
      34: iload_2
      35: invokeinterface #20,  2           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.charAt:(I)C
      40: istore        4
      42: iload         4
      44: bipush        32
      46: if_icmpeq     59
      49: iload         4
      51: bipush        9
      53: if_icmpeq     59
      56: goto          65
      59: iinc          2, 1
      62: goto          23
      65: iload_2
      66: aload_3
      67: invokeinterface #19,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      72: if_icmpge     90
      75: aload_3
      76: iload_2
      77: invokeinterface #20,  2           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.charAt:(I)C
      82: bipush        13
      84: if_icmpne     90
      87: iinc          2, 1
      90: iload_2
      91: aload_3
      92: invokeinterface #19,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      97: if_icmpge     115
     100: aload_3
     101: iload_2
     102: invokeinterface #20,  2           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.charAt:(I)C
     107: bipush        10
     109: if_icmpne     115
     112: iinc          2, 1
     115: aload_0
     116: aload_1
     117: invokeinterface #15,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
     122: iload_2
     123: invokevirtual #17                 // Method srcPos:(II)Lcom/vladsch/flexmark/html/HtmlWriter;
     126: areturn
     127: aload_0
     128: areturn

  public com.vladsch.flexmark.html.HtmlWriter srcPos(int, int);
    Code:
       0: iload_1
       1: iload_2
       2: if_icmpgt     63
       5: aload_0
       6: getfield      #3                  // Field context:Lcom/vladsch/flexmark/html/renderer/NodeRendererContext;
       9: invokeinterface #21,  1           // InterfaceMethod com/vladsch/flexmark/html/renderer/NodeRendererContext.getHtmlOptions:()Lcom/vladsch/flexmark/html/HtmlRendererOptions;
      14: getfield      #22                 // Field com/vladsch/flexmark/html/HtmlRendererOptions.sourcePositionAttribute:Ljava/lang/String;
      17: invokevirtual #23                 // Method java/lang/String.isEmpty:()Z
      20: ifne          63
      23: aload_0
      24: aload_0
      25: getfield      #3                  // Field context:Lcom/vladsch/flexmark/html/renderer/NodeRendererContext;
      28: invokeinterface #21,  1           // InterfaceMethod com/vladsch/flexmark/html/renderer/NodeRendererContext.getHtmlOptions:()Lcom/vladsch/flexmark/html/HtmlRendererOptions;
      33: getfield      #22                 // Field com/vladsch/flexmark/html/HtmlRendererOptions.sourcePositionAttribute:Ljava/lang/String;
      36: new           #24                 // class java/lang/StringBuilder
      39: dup
      40: invokespecial #25                 // Method java/lang/StringBuilder."<init>":()V
      43: iload_1
      44: invokevirtual #26                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      47: ldc           #27                 // String -
      49: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      52: iload_2
      53: invokevirtual #26                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      56: invokevirtual #29                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      59: invokespecial #30                 // Method com/vladsch/flexmark/util/html/HtmlFormattingAppendableBase.attr:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
      62: pop
      63: aload_0
      64: areturn

  public com.vladsch.flexmark.html.HtmlWriter withAttr();
    Code:
       0: aload_0
       1: getstatic     #31                 // Field com/vladsch/flexmark/html/renderer/AttributablePart.NODE:Lcom/vladsch/flexmark/html/renderer/AttributablePart;
       4: invokevirtual #32                 // Method withAttr:(Lcom/vladsch/flexmark/html/renderer/AttributablePart;)Lcom/vladsch/flexmark/html/HtmlWriter;
       7: areturn

  public com.vladsch.flexmark.html.HtmlWriter withAttr(com.vladsch.flexmark.html.renderer.AttributablePart);
    Code:
       0: aload_0
       1: invokespecial #33                 // Method com/vladsch/flexmark/util/html/HtmlFormattingAppendableBase.withAttr:()Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
       4: pop
       5: aload_0
       6: aload_1
       7: putfield      #34                 // Field useAttributes:Lcom/vladsch/flexmark/html/renderer/AttributablePart;
      10: aload_0
      11: areturn

  public com.vladsch.flexmark.html.HtmlWriter withAttr(com.vladsch.flexmark.html.renderer.LinkStatus);
    Code:
       0: aload_0
       1: ldc           #36                 // String Link Status
       3: aload_1
       4: invokevirtual #37                 // Method com/vladsch/flexmark/html/renderer/LinkStatus.getName:()Ljava/lang/String;
       7: invokevirtual #38                 // Method attr:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
      10: pop
      11: aload_0
      12: getstatic     #39                 // Field com/vladsch/flexmark/html/renderer/AttributablePart.LINK:Lcom/vladsch/flexmark/html/renderer/AttributablePart;
      15: invokevirtual #32                 // Method withAttr:(Lcom/vladsch/flexmark/html/renderer/AttributablePart;)Lcom/vladsch/flexmark/html/HtmlWriter;
      18: areturn

  public com.vladsch.flexmark.html.HtmlWriter withAttr(com.vladsch.flexmark.html.renderer.ResolvedLink);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #40                 // Method com/vladsch/flexmark/html/renderer/ResolvedLink.getStatus:()Lcom/vladsch/flexmark/html/renderer/LinkStatus;
       5: invokevirtual #41                 // Method withAttr:(Lcom/vladsch/flexmark/html/renderer/LinkStatus;)Lcom/vladsch/flexmark/html/HtmlWriter;
       8: areturn

  public com.vladsch.flexmark.html.HtmlWriter tag(java.lang.CharSequence, boolean);
    Code:
       0: aload_0
       1: getfield      #34                 // Field useAttributes:Lcom/vladsch/flexmark/html/renderer/AttributablePart;
       4: ifnull        180
       7: aload_0
       8: getfield      #3                  // Field context:Lcom/vladsch/flexmark/html/renderer/NodeRendererContext;
      11: aload_0
      12: getfield      #34                 // Field useAttributes:Lcom/vladsch/flexmark/html/renderer/AttributablePart;
      15: aload_0
      16: invokevirtual #42                 // Method getAttributes:()Lcom/vladsch/flexmark/util/html/Attributes;
      19: invokeinterface #43,  3           // InterfaceMethod com/vladsch/flexmark/html/renderer/NodeRendererContext.extendRenderingNodeAttributes:(Lcom/vladsch/flexmark/html/renderer/AttributablePart;Lcom/vladsch/flexmark/util/html/Attributes;)Lcom/vladsch/flexmark/util/html/Attributes;
      24: astore_3
      25: aload_0
      26: getfield      #3                  // Field context:Lcom/vladsch/flexmark/html/renderer/NodeRendererContext;
      29: invokeinterface #21,  1           // InterfaceMethod com/vladsch/flexmark/html/renderer/NodeRendererContext.getHtmlOptions:()Lcom/vladsch/flexmark/html/HtmlRendererOptions;
      34: getfield      #22                 // Field com/vladsch/flexmark/html/HtmlRendererOptions.sourcePositionAttribute:Ljava/lang/String;
      37: astore        4
      39: aload_3
      40: aload         4
      42: invokevirtual #44                 // Method com/vladsch/flexmark/util/html/Attributes.getValue:(Ljava/lang/CharSequence;)Ljava/lang/String;
      45: astore        5
      47: aload         5
      49: invokevirtual #23                 // Method java/lang/String.isEmpty:()Z
      52: ifne          169
      55: aload         5
      57: bipush        45
      59: invokevirtual #45                 // Method java/lang/String.indexOf:(I)I
      62: istore        6
      64: iconst_m1
      65: istore        7
      67: iconst_m1
      68: istore        8
      70: iload         6
      72: iconst_m1
      73: if_icmpeq     119
      76: aload         5
      78: iconst_0
      79: iload         6
      81: invokevirtual #46                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      84: invokestatic  #47                 // Method java/lang/Integer.valueOf:(Ljava/lang/String;)Ljava/lang/Integer;
      87: invokevirtual #48                 // Method java/lang/Integer.intValue:()I
      90: istore        7
      92: goto          97
      95: astore        9
      97: aload         5
      99: iload         6
     101: iconst_1
     102: iadd
     103: invokevirtual #50                 // Method java/lang/String.substring:(I)Ljava/lang/String;
     106: invokestatic  #47                 // Method java/lang/Integer.valueOf:(Ljava/lang/String;)Ljava/lang/Integer;
     109: invokevirtual #48                 // Method java/lang/Integer.intValue:()I
     112: istore        8
     114: goto          119
     117: astore        9
     119: iload         7
     121: iflt          169
     124: iload         7
     126: iload         8
     128: if_icmpge     169
     131: aload_0
     132: getfield      #3                  // Field context:Lcom/vladsch/flexmark/html/renderer/NodeRendererContext;
     135: invokeinterface #51,  1           // InterfaceMethod com/vladsch/flexmark/html/renderer/NodeRendererContext.getDocument:()Lcom/vladsch/flexmark/ast/Document;
     140: getstatic     #52                 // Field com/vladsch/flexmark/html/HtmlRenderer.TAG_RANGES:Lcom/vladsch/flexmark/util/options/DataKey;
     143: invokevirtual #53                 // Method com/vladsch/flexmark/ast/Document.get:(Lcom/vladsch/flexmark/util/options/DataKey;)Ljava/lang/Object;
     146: checkcast     #54                 // class java/util/ArrayList
     149: astore        9
     151: aload         9
     153: new           #55                 // class com/vladsch/flexmark/util/sequence/TagRange
     156: dup
     157: aload_1
     158: iload         7
     160: iload         8
     162: invokespecial #56                 // Method com/vladsch/flexmark/util/sequence/TagRange."<init>":(Ljava/lang/CharSequence;II)V
     165: invokevirtual #57                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
     168: pop
     169: aload_0
     170: aload_3
     171: invokevirtual #58                 // Method setAttributes:(Lcom/vladsch/flexmark/util/html/Attributes;)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
     174: pop
     175: aload_0
     176: aconst_null
     177: putfield      #34                 // Field useAttributes:Lcom/vladsch/flexmark/html/renderer/AttributablePart;
     180: aload_0
     181: aload_1
     182: iload_2
     183: invokespecial #59                 // Method com/vladsch/flexmark/util/html/HtmlFormattingAppendableBase.tag:(Ljava/lang/CharSequence;Z)Lcom/vladsch/flexmark/util/html/HtmlFormattingAppendableBase;
     186: pop
     187: aload_0
     188: areturn
    Exception table:
       from    to  target type
          76    92    95   Class java/lang/Throwable
          97   114   117   Class java/lang/Throwable

  public com.vladsch.flexmark.util.html.HtmlFormattingAppendableBase tag(java.lang.CharSequence, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokevirtual #60                 // Method tag:(Ljava/lang/CharSequence;Z)Lcom/vladsch/flexmark/html/HtmlWriter;
       6: areturn

  public com.vladsch.flexmark.util.html.HtmlFormattingAppendableBase withAttr();
    Code:
       0: aload_0
       1: invokevirtual #61                 // Method withAttr:()Lcom/vladsch/flexmark/html/HtmlWriter;
       4: areturn

  public com.vladsch.flexmark.util.html.HtmlFormattingAppendable tag(java.lang.CharSequence, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokevirtual #60                 // Method tag:(Ljava/lang/CharSequence;Z)Lcom/vladsch/flexmark/html/HtmlWriter;
       6: areturn

  public com.vladsch.flexmark.util.html.HtmlFormattingAppendable withAttr();
    Code:
       0: aload_0
       1: invokevirtual #61                 // Method withAttr:()Lcom/vladsch/flexmark/html/HtmlWriter;
       4: areturn
}
