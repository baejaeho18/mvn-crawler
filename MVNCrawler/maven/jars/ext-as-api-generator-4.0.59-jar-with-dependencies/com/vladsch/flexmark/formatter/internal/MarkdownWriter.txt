Compiled from "MarkdownWriter.java"
public class com.vladsch.flexmark.formatter.internal.MarkdownWriter implements com.vladsch.flexmark.util.html.FormattingAppendable {
  private final com.vladsch.flexmark.util.html.FormattingAppendable myAppendable;

  private com.vladsch.flexmark.formatter.internal.NodeFormatterContext context;

  public com.vladsch.flexmark.formatter.internal.MarkdownWriter(java.lang.Appendable);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: invokespecial #1                  // Method "<init>":(Ljava/lang/Appendable;I)V
       6: return

  public com.vladsch.flexmark.formatter.internal.MarkdownWriter(java.lang.Appendable, int);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #3                  // class com/vladsch/flexmark/util/html/FormattingAppendableImpl
       8: dup
       9: aload_1
      10: iload_2
      11: invokespecial #4                  // Method com/vladsch/flexmark/util/html/FormattingAppendableImpl."<init>":(Ljava/lang/Appendable;I)V
      14: putfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      17: return

  public void setContext(com.vladsch.flexmark.formatter.internal.NodeFormatterContext);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field context:Lcom/vladsch/flexmark/formatter/internal/NodeFormatterContext;
       5: return

  public com.vladsch.flexmark.formatter.internal.NodeFormatterContext getContext();
    Code:
       0: aload_0
       1: getfield      #6                  // Field context:Lcom/vladsch/flexmark/formatter/internal/NodeFormatterContext;
       4: areturn

  public com.vladsch.flexmark.formatter.internal.MarkdownWriter tailBlankLine();
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #7                  // Method tailBlankLine:(I)Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
       5: areturn

  public boolean isLastBlockQuoteChild(com.vladsch.flexmark.ast.Node);
    Code:
       0: aload_1
       1: invokevirtual #8                  // Method com/vladsch/flexmark/ast/Node.getParent:()Lcom/vladsch/flexmark/ast/Node;
       4: astore_2
       5: aload_2
       6: instanceof    #9                  // class com/vladsch/flexmark/ast/BlockQuote
       9: ifeq          24
      12: aload_2
      13: invokevirtual #10                 // Method com/vladsch/flexmark/ast/Node.getLastChild:()Lcom/vladsch/flexmark/ast/Node;
      16: aload_1
      17: if_acmpne     24
      20: iconst_1
      21: goto          25
      24: iconst_0
      25: ireturn

  public com.vladsch.flexmark.formatter.internal.MarkdownWriter tailBlankLine(int);
    Code:
       0: aload_0
       1: getfield      #6                  // Field context:Lcom/vladsch/flexmark/formatter/internal/NodeFormatterContext;
       4: invokeinterface #11,  1           // InterfaceMethod com/vladsch/flexmark/formatter/internal/NodeFormatterContext.getCurrentNode:()Lcom/vladsch/flexmark/ast/Node;
       9: astore_2
      10: aload_0
      11: aload_2
      12: invokevirtual #12                 // Method isLastBlockQuoteChild:(Lcom/vladsch/flexmark/ast/Node;)Z
      15: ifeq          41
      18: aload_0
      19: invokevirtual #13                 // Method getPushedPrefixCount:()I
      22: ifle          41
      25: aload_0
      26: iconst_m1
      27: invokevirtual #14                 // Method flush:(I)Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
      30: pop
      31: aload_0
      32: invokevirtual #15                 // Method popPrefix:()Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
      35: pop
      36: aload_0
      37: invokevirtual #16                 // Method pushPrefix:()Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
      40: pop
      41: aload_0
      42: iload_1
      43: invokevirtual #17                 // Method blankLine:(I)Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
      46: pop
      47: aload_0
      48: areturn

  public java.lang.Appendable getAppendable();
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #18,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.getAppendable:()Ljava/lang/Appendable;
       9: areturn

  public boolean isPendingEOL();
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #19,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.isPendingEOL:()Z
       9: ireturn

  public boolean isPendingSpace();
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #20,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.isPendingSpace:()Z
       9: ireturn

  public boolean isPreFormatted();
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #21,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.isPreFormatted:()Z
       9: ireturn

  public java.lang.CharSequence getIndentPrefix();
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #22,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.getIndentPrefix:()Ljava/lang/CharSequence;
       9: areturn

  public java.lang.CharSequence getPrefix();
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #23,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.getPrefix:()Ljava/lang/CharSequence;
       9: areturn

  public java.lang.CharSequence getTotalIndentPrefix();
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #24,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.getTotalIndentPrefix:()Ljava/lang/CharSequence;
       9: areturn

  public int getIndent();
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #25,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.getIndent:()I
       9: ireturn

  public int getLineCount();
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #26,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.getLineCount:()I
       9: ireturn

  public int getModCount();
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #27,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.getModCount:()I
       9: ireturn

  public int offset();
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #28,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.offset:()I
       9: ireturn

  public int lastOffset();
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #29,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.lastOffset:()I
       9: ireturn

  public int getOptions();
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #30,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.getOptions:()I
       9: ireturn

  public int getPushedPrefixCount();
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #31,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.getPushedPrefixCount:()I
       9: ireturn

  public int getPendingEOL();
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #32,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.getPendingEOL:()I
       9: ireturn

  public java.io.IOException getIOException();
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #33,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.getIOException:()Ljava/io/IOException;
       9: areturn

  public java.lang.String getText();
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #34,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.getText:()Ljava/lang/String;
       9: areturn

  public java.lang.String getText(int);
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: iload_1
       5: invokeinterface #35,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.getText:(I)Ljava/lang/String;
      10: areturn

  public com.vladsch.flexmark.formatter.internal.MarkdownWriter addAfterEolRunnable(int, java.lang.Runnable);
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: iload_1
       5: aload_2
       6: invokeinterface #36,  3           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.addAfterEolRunnable:(ILjava/lang/Runnable;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      11: pop
      12: aload_0
      13: areturn

  public com.vladsch.flexmark.formatter.internal.MarkdownWriter addLine();
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #37,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.addLine:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       9: pop
      10: aload_0
      11: areturn

  public com.vladsch.flexmark.formatter.internal.MarkdownWriter addPrefix(java.lang.CharSequence);
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: aload_1
       5: invokeinterface #38,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.addPrefix:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      10: pop
      11: aload_0
      12: areturn

  public com.vladsch.flexmark.formatter.internal.MarkdownWriter append(char);
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: iload_1
       5: invokeinterface #39,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(C)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      10: pop
      11: aload_0
      12: areturn

  public com.vladsch.flexmark.formatter.internal.MarkdownWriter append(java.lang.CharSequence);
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: aload_1
       5: invokeinterface #40,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      10: pop
      11: aload_0
      12: areturn

  public com.vladsch.flexmark.formatter.internal.MarkdownWriter append(java.lang.CharSequence, int, int);
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: aload_1
       5: iload_2
       6: iload_3
       7: invokeinterface #41,  4           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.append:(Ljava/lang/CharSequence;II)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      12: pop
      13: aload_0
      14: areturn

  public com.vladsch.flexmark.formatter.internal.MarkdownWriter blankLine();
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #42,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.blankLine:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       9: pop
      10: aload_0
      11: areturn

  public com.vladsch.flexmark.formatter.internal.MarkdownWriter blankLine(int);
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: iload_1
       5: invokeinterface #43,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.blankLine:(I)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      10: pop
      11: aload_0
      12: areturn

  public com.vladsch.flexmark.formatter.internal.MarkdownWriter blankLineIf(boolean);
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: iload_1
       5: invokeinterface #44,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.blankLineIf:(Z)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      10: pop
      11: aload_0
      12: areturn

  public com.vladsch.flexmark.formatter.internal.MarkdownWriter closeConditional(com.vladsch.flexmark.util.html.ConditionalFormatter);
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: aload_1
       5: invokeinterface #45,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.closeConditional:(Lcom/vladsch/flexmark/util/html/ConditionalFormatter;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      10: pop
      11: aload_0
      12: areturn

  public com.vladsch.flexmark.formatter.internal.MarkdownWriter closePreFormatted();
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #46,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.closePreFormatted:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       9: pop
      10: aload_0
      11: areturn

  public com.vladsch.flexmark.formatter.internal.MarkdownWriter flush();
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #47,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.flush:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       9: pop
      10: aload_0
      11: areturn

  public com.vladsch.flexmark.formatter.internal.MarkdownWriter flushWhitespaces();
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #48,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.flushWhitespaces:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       9: pop
      10: aload_0
      11: areturn

  public com.vladsch.flexmark.formatter.internal.MarkdownWriter flush(int);
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: iload_1
       5: invokeinterface #49,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.flush:(I)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      10: pop
      11: aload_0
      12: areturn

  public com.vladsch.flexmark.formatter.internal.MarkdownWriter lastOffset(com.vladsch.flexmark.util.Ref<java.lang.Integer>);
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: aload_1
       5: invokeinterface #50,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.lastOffset:(Lcom/vladsch/flexmark/util/Ref;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      10: pop
      11: aload_0
      12: areturn

  public com.vladsch.flexmark.formatter.internal.MarkdownWriter indent();
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #51,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.indent:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       9: pop
      10: aload_0
      11: areturn

  public com.vladsch.flexmark.formatter.internal.MarkdownWriter line();
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #52,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.line:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       9: pop
      10: aload_0
      11: areturn

  public com.vladsch.flexmark.formatter.internal.MarkdownWriter line(com.vladsch.flexmark.util.Ref<java.lang.Boolean>);
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: aload_1
       5: invokeinterface #53,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.line:(Lcom/vladsch/flexmark/util/Ref;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      10: pop
      11: aload_0
      12: areturn

  public com.vladsch.flexmark.formatter.internal.MarkdownWriter lineIf(boolean);
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: iload_1
       5: invokeinterface #54,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.lineIf:(Z)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      10: pop
      11: aload_0
      12: areturn

  public com.vladsch.flexmark.formatter.internal.MarkdownWriter lineIf(com.vladsch.flexmark.util.Ref<java.lang.Boolean>);
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: aload_1
       5: invokeinterface #55,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.lineIf:(Lcom/vladsch/flexmark/util/Ref;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      10: pop
      11: aload_0
      12: areturn

  public com.vladsch.flexmark.formatter.internal.MarkdownWriter openConditional(com.vladsch.flexmark.util.html.ConditionalFormatter);
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: aload_1
       5: invokeinterface #56,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.openConditional:(Lcom/vladsch/flexmark/util/html/ConditionalFormatter;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      10: pop
      11: aload_0
      12: areturn

  public com.vladsch.flexmark.formatter.internal.MarkdownWriter openPreFormatted(boolean);
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: iload_1
       5: invokeinterface #57,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.openPreFormatted:(Z)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      10: pop
      11: aload_0
      12: areturn

  public com.vladsch.flexmark.formatter.internal.MarkdownWriter popPrefix();
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #58,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.popPrefix:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       9: pop
      10: aload_0
      11: areturn

  public com.vladsch.flexmark.formatter.internal.MarkdownWriter pushPrefix();
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #59,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.pushPrefix:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       9: pop
      10: aload_0
      11: areturn

  public com.vladsch.flexmark.formatter.internal.MarkdownWriter repeat(char, int);
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: iload_1
       5: iload_2
       6: invokeinterface #60,  3           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.repeat:(CI)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      11: pop
      12: aload_0
      13: areturn

  public com.vladsch.flexmark.formatter.internal.MarkdownWriter repeat(java.lang.CharSequence, int);
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: aload_1
       5: iload_2
       6: invokeinterface #61,  3           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.repeat:(Ljava/lang/CharSequence;I)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      11: pop
      12: aload_0
      13: areturn

  public com.vladsch.flexmark.formatter.internal.MarkdownWriter repeat(java.lang.CharSequence, int, int, int);
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: aload_1
       5: iload_2
       6: iload_3
       7: iload         4
       9: invokeinterface #62,  5           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.repeat:(Ljava/lang/CharSequence;III)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      14: pop
      15: aload_0
      16: areturn

  public com.vladsch.flexmark.formatter.internal.MarkdownWriter setIndentOffset(int);
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: iload_1
       5: invokeinterface #63,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.setIndentOffset:(I)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      10: pop
      11: aload_0
      12: areturn

  public com.vladsch.flexmark.formatter.internal.MarkdownWriter setIndentPrefix(java.lang.CharSequence);
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: aload_1
       5: invokeinterface #64,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.setIndentPrefix:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      10: pop
      11: aload_0
      12: areturn

  public com.vladsch.flexmark.formatter.internal.MarkdownWriter setOptions(int);
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: iload_1
       5: invokeinterface #65,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.setOptions:(I)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      10: pop
      11: aload_0
      12: areturn

  public com.vladsch.flexmark.formatter.internal.MarkdownWriter setPrefix(java.lang.CharSequence);
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: aload_1
       5: invokeinterface #66,  2           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.setPrefix:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/util/html/FormattingAppendable;
      10: pop
      11: aload_0
      12: areturn

  public com.vladsch.flexmark.formatter.internal.MarkdownWriter unIndent();
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #67,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.unIndent:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       9: pop
      10: aload_0
      11: areturn

  public com.vladsch.flexmark.formatter.internal.MarkdownWriter willIndent();
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAppendable:Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       4: invokeinterface #68,  1           // InterfaceMethod com/vladsch/flexmark/util/html/FormattingAppendable.willIndent:()Lcom/vladsch/flexmark/util/html/FormattingAppendable;
       9: pop
      10: aload_0
      11: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable closeConditional(com.vladsch.flexmark.util.html.ConditionalFormatter);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #69                 // Method closeConditional:(Lcom/vladsch/flexmark/util/html/ConditionalFormatter;)Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
       5: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable openConditional(com.vladsch.flexmark.util.html.ConditionalFormatter);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #70                 // Method openConditional:(Lcom/vladsch/flexmark/util/html/ConditionalFormatter;)Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
       5: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable closePreFormatted();
    Code:
       0: aload_0
       1: invokevirtual #71                 // Method closePreFormatted:()Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
       4: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable openPreFormatted(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #72                 // Method openPreFormatted:(Z)Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
       5: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable lastOffset(com.vladsch.flexmark.util.Ref);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #73                 // Method lastOffset:(Lcom/vladsch/flexmark/util/Ref;)Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
       5: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable unIndent();
    Code:
       0: aload_0
       1: invokevirtual #74                 // Method unIndent:()Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
       4: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable willIndent();
    Code:
       0: aload_0
       1: invokevirtual #75                 // Method willIndent:()Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
       4: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable indent();
    Code:
       0: aload_0
       1: invokevirtual #76                 // Method indent:()Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
       4: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable setIndentOffset(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #77                 // Method setIndentOffset:(I)Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
       5: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable blankLine(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #17                 // Method blankLine:(I)Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
       5: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable blankLineIf(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #78                 // Method blankLineIf:(Z)Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
       5: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable blankLine();
    Code:
       0: aload_0
       1: invokevirtual #79                 // Method blankLine:()Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
       4: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable lineIf(com.vladsch.flexmark.util.Ref);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #80                 // Method lineIf:(Lcom/vladsch/flexmark/util/Ref;)Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
       5: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable line(com.vladsch.flexmark.util.Ref);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #81                 // Method line:(Lcom/vladsch/flexmark/util/Ref;)Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
       5: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable lineIf(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #82                 // Method lineIf:(Z)Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
       5: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable addLine();
    Code:
       0: aload_0
       1: invokevirtual #83                 // Method addLine:()Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
       4: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable line();
    Code:
       0: aload_0
       1: invokevirtual #84                 // Method line:()Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
       4: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable addAfterEolRunnable(int, java.lang.Runnable);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokevirtual #85                 // Method addAfterEolRunnable:(ILjava/lang/Runnable;)Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
       6: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable popPrefix();
    Code:
       0: aload_0
       1: invokevirtual #15                 // Method popPrefix:()Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
       4: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable pushPrefix();
    Code:
       0: aload_0
       1: invokevirtual #16                 // Method pushPrefix:()Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
       4: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable addPrefix(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #86                 // Method addPrefix:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
       5: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable setPrefix(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #87                 // Method setPrefix:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
       5: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable setIndentPrefix(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #88                 // Method setIndentPrefix:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
       5: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable flush(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #14                 // Method flush:(I)Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
       5: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable flushWhitespaces();
    Code:
       0: aload_0
       1: invokevirtual #89                 // Method flushWhitespaces:()Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
       4: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable flush();
    Code:
       0: aload_0
       1: invokevirtual #90                 // Method flush:()Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
       4: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable setOptions(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #91                 // Method setOptions:(I)Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
       5: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable repeat(java.lang.CharSequence, int, int, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: iload         4
       6: invokevirtual #92                 // Method repeat:(Ljava/lang/CharSequence;III)Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
       9: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable repeat(java.lang.CharSequence, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokevirtual #93                 // Method repeat:(Ljava/lang/CharSequence;I)Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
       6: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable repeat(char, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokevirtual #94                 // Method repeat:(CI)Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
       6: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable append(char);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #95                 // Method append:(C)Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
       5: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable append(java.lang.CharSequence, int, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: invokevirtual #96                 // Method append:(Ljava/lang/CharSequence;II)Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
       7: areturn

  public com.vladsch.flexmark.util.html.FormattingAppendable append(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #97                 // Method append:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
       5: areturn

  public java.lang.Appendable append(char) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #95                 // Method append:(C)Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
       5: areturn

  public java.lang.Appendable append(java.lang.CharSequence, int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: invokevirtual #96                 // Method append:(Ljava/lang/CharSequence;II)Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
       7: areturn

  public java.lang.Appendable append(java.lang.CharSequence) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #97                 // Method append:(Ljava/lang/CharSequence;)Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
       5: areturn
}
