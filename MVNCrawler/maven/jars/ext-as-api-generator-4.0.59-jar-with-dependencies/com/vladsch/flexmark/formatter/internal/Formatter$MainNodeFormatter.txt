Compiled from "Formatter.java"
class com.vladsch.flexmark.formatter.internal.Formatter$MainNodeFormatter extends com.vladsch.flexmark.formatter.internal.NodeFormatterSubContext implements com.vladsch.flexmark.formatter.internal.NodeFormatterContext {
  private final com.vladsch.flexmark.ast.Document document;

  private final java.util.Map<java.lang.Class<?>, com.vladsch.flexmark.formatter.internal.NodeFormattingHandler> renderers;

  private final com.vladsch.flexmark.util.collection.SubClassingBag<com.vladsch.flexmark.ast.Node> collectedNodes;

  private final java.util.List<com.vladsch.flexmark.formatter.internal.PhasedNodeFormatter> phasedFormatters;

  private final java.util.Set<com.vladsch.flexmark.formatter.internal.FormattingPhase> renderingPhases;

  private final com.vladsch.flexmark.util.options.DataHolder options;

  private com.vladsch.flexmark.formatter.internal.FormattingPhase phase;

  final com.vladsch.flexmark.formatter.internal.Formatter this$0;

  com.vladsch.flexmark.formatter.internal.Formatter$MainNodeFormatter(com.vladsch.flexmark.formatter.internal.Formatter, com.vladsch.flexmark.util.options.DataHolder, com.vladsch.flexmark.formatter.internal.MarkdownWriter, com.vladsch.flexmark.ast.Document);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lcom/vladsch/flexmark/formatter/internal/Formatter;
       5: aload_0
       6: aload_3
       7: invokespecial #2                  // Method com/vladsch/flexmark/formatter/internal/NodeFormatterSubContext."<init>":(Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;)V
      10: aload_0
      11: new           #3                  // class com/vladsch/flexmark/util/options/ScopedDataSet
      14: dup
      15: aload_2
      16: aload         4
      18: invokespecial #4                  // Method com/vladsch/flexmark/util/options/ScopedDataSet."<init>":(Lcom/vladsch/flexmark/util/options/DataHolder;Lcom/vladsch/flexmark/util/options/DataHolder;)V
      21: putfield      #5                  // Field options:Lcom/vladsch/flexmark/util/options/DataHolder;
      24: aload_0
      25: aload         4
      27: putfield      #6                  // Field document:Lcom/vladsch/flexmark/ast/Document;
      30: aload_0
      31: new           #7                  // class java/util/HashMap
      34: dup
      35: bipush        32
      37: invokespecial #8                  // Method java/util/HashMap."<init>":(I)V
      40: putfield      #9                  // Field renderers:Ljava/util/Map;
      43: aload_0
      44: new           #10                 // class java/util/HashSet
      47: dup
      48: invokestatic  #11                 // Method com/vladsch/flexmark/formatter/internal/FormattingPhase.values:()[Lcom/vladsch/flexmark/formatter/internal/FormattingPhase;
      51: arraylength
      52: invokespecial #12                 // Method java/util/HashSet."<init>":(I)V
      55: putfield      #13                 // Field renderingPhases:Ljava/util/Set;
      58: new           #10                 // class java/util/HashSet
      61: dup
      62: bipush        100
      64: invokespecial #12                 // Method java/util/HashSet."<init>":(I)V
      67: astore        5
      69: aload_0
      70: new           #14                 // class java/util/ArrayList
      73: dup
      74: aload_1
      75: invokestatic  #15                 // Method com/vladsch/flexmark/formatter/internal/Formatter.access$100:(Lcom/vladsch/flexmark/formatter/internal/Formatter;)Ljava/util/List;
      78: invokeinterface #16,  1           // InterfaceMethod java/util/List.size:()I
      83: invokespecial #17                 // Method java/util/ArrayList."<init>":(I)V
      86: putfield      #18                 // Field phasedFormatters:Ljava/util/List;
      89: aload_3
      90: aload_0
      91: invokevirtual #19                 // Method com/vladsch/flexmark/formatter/internal/MarkdownWriter.setContext:(Lcom/vladsch/flexmark/formatter/internal/NodeFormatterContext;)V
      94: aload_1
      95: invokestatic  #15                 // Method com/vladsch/flexmark/formatter/internal/Formatter.access$100:(Lcom/vladsch/flexmark/formatter/internal/Formatter;)Ljava/util/List;
      98: invokeinterface #16,  1           // InterfaceMethod java/util/List.size:()I
     103: iconst_1
     104: isub
     105: istore        6
     107: iload         6
     109: iflt          324
     112: aload_1
     113: invokestatic  #15                 // Method com/vladsch/flexmark/formatter/internal/Formatter.access$100:(Lcom/vladsch/flexmark/formatter/internal/Formatter;)Ljava/util/List;
     116: iload         6
     118: invokeinterface #20,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
     123: checkcast     #21                 // class com/vladsch/flexmark/formatter/internal/NodeFormatterFactory
     126: astore        7
     128: aload         7
     130: aload_0
     131: invokevirtual #22                 // Method getOptions:()Lcom/vladsch/flexmark/util/options/DataHolder;
     134: invokeinterface #23,  2           // InterfaceMethod com/vladsch/flexmark/formatter/internal/NodeFormatterFactory.create:(Lcom/vladsch/flexmark/util/options/DataHolder;)Lcom/vladsch/flexmark/formatter/internal/NodeFormatter;
     139: astore        8
     141: aload         8
     143: invokeinterface #24,  1           // InterfaceMethod com/vladsch/flexmark/formatter/internal/NodeFormatter.getNodeFormattingHandlers:()Ljava/util/Set;
     148: astore        9
     150: aload         9
     152: ifnonnull     158
     155: goto          318
     158: aload         9
     160: invokeinterface #25,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
     165: astore        10
     167: aload         10
     169: invokeinterface #26,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     174: ifeq          209
     177: aload         10
     179: invokeinterface #27,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     184: checkcast     #28                 // class com/vladsch/flexmark/formatter/internal/NodeFormattingHandler
     187: astore        11
     189: aload_0
     190: getfield      #9                  // Field renderers:Ljava/util/Map;
     193: aload         11
     195: invokevirtual #29                 // Method com/vladsch/flexmark/formatter/internal/NodeFormattingHandler.getNodeType:()Ljava/lang/Class;
     198: aload         11
     200: invokeinterface #30,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     205: pop
     206: goto          167
     209: aload         8
     211: invokeinterface #31,  1           // InterfaceMethod com/vladsch/flexmark/formatter/internal/NodeFormatter.getNodeClasses:()Ljava/util/Set;
     216: astore        10
     218: aload         10
     220: ifnull        233
     223: aload         5
     225: aload         10
     227: invokeinterface #32,  2           // InterfaceMethod java/util/Set.addAll:(Ljava/util/Collection;)Z
     232: pop
     233: aload         8
     235: instanceof    #33                 // class com/vladsch/flexmark/formatter/internal/PhasedNodeFormatter
     238: ifeq          318
     241: aload         8
     243: checkcast     #33                 // class com/vladsch/flexmark/formatter/internal/PhasedNodeFormatter
     246: invokeinterface #34,  1           // InterfaceMethod com/vladsch/flexmark/formatter/internal/PhasedNodeFormatter.getFormattingPhases:()Ljava/util/Set;
     251: astore        11
     253: aload         11
     255: ifnull        308
     258: aload         11
     260: invokeinterface #35,  1           // InterfaceMethod java/util/Set.isEmpty:()Z
     265: ifeq          278
     268: new           #36                 // class java/lang/IllegalStateException
     271: dup
     272: ldc           #37                 // String PhasedNodeFormatter with empty Phases
     274: invokespecial #38                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     277: athrow
     278: aload_0
     279: getfield      #13                 // Field renderingPhases:Ljava/util/Set;
     282: aload         11
     284: invokeinterface #32,  2           // InterfaceMethod java/util/Set.addAll:(Ljava/util/Collection;)Z
     289: pop
     290: aload_0
     291: getfield      #18                 // Field phasedFormatters:Ljava/util/List;
     294: aload         8
     296: checkcast     #33                 // class com/vladsch/flexmark/formatter/internal/PhasedNodeFormatter
     299: invokeinterface #39,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     304: pop
     305: goto          318
     308: new           #36                 // class java/lang/IllegalStateException
     311: dup
     312: ldc           #40                 // String PhasedNodeFormatter with null Phases
     314: invokespecial #38                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     317: athrow
     318: iinc          6, -1
     321: goto          107
     324: aload         5
     326: invokeinterface #35,  1           // InterfaceMethod java/util/Set.isEmpty:()Z
     331: ifne          364
     334: new           #41                 // class com/vladsch/flexmark/util/collection/NodeCollectingVisitor
     337: dup
     338: aload         5
     340: invokespecial #42                 // Method com/vladsch/flexmark/util/collection/NodeCollectingVisitor."<init>":(Ljava/util/Set;)V
     343: astore        6
     345: aload         6
     347: aload         4
     349: invokevirtual #43                 // Method com/vladsch/flexmark/util/collection/NodeCollectingVisitor.collect:(Lcom/vladsch/flexmark/ast/Node;)V
     352: aload_0
     353: aload         6
     355: invokevirtual #44                 // Method com/vladsch/flexmark/util/collection/NodeCollectingVisitor.getSubClassingBag:()Lcom/vladsch/flexmark/util/collection/SubClassingBag;
     358: putfield      #45                 // Field collectedNodes:Lcom/vladsch/flexmark/util/collection/SubClassingBag;
     361: goto          369
     364: aload_0
     365: aconst_null
     366: putfield      #45                 // Field collectedNodes:Lcom/vladsch/flexmark/util/collection/SubClassingBag;
     369: return

  public com.vladsch.flexmark.ast.Node getCurrentNode();
    Code:
       0: aload_0
       1: getfield      #46                 // Field renderingNode:Lcom/vladsch/flexmark/ast/Node;
       4: areturn

  public com.vladsch.flexmark.util.options.DataHolder getOptions();
    Code:
       0: aload_0
       1: getfield      #5                  // Field options:Lcom/vladsch/flexmark/util/options/DataHolder;
       4: areturn

  public com.vladsch.flexmark.formatter.internal.FormatterOptions getFormatterOptions();
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lcom/vladsch/flexmark/formatter/internal/Formatter;
       4: invokestatic  #47                 // Method com/vladsch/flexmark/formatter/internal/Formatter.access$200:(Lcom/vladsch/flexmark/formatter/internal/Formatter;)Lcom/vladsch/flexmark/formatter/internal/FormatterOptions;
       7: areturn

  public com.vladsch.flexmark.ast.Document getDocument();
    Code:
       0: aload_0
       1: getfield      #6                  // Field document:Lcom/vladsch/flexmark/ast/Document;
       4: areturn

  public com.vladsch.flexmark.formatter.internal.FormattingPhase getFormattingPhase();
    Code:
       0: aload_0
       1: getfield      #48                 // Field phase:Lcom/vladsch/flexmark/formatter/internal/FormattingPhase;
       4: areturn

  public void render(com.vladsch.flexmark.ast.Node);
    Code:
       0: aload_0
       1: aload_1
       2: aload_0
       3: invokevirtual #49                 // Method renderNode:(Lcom/vladsch/flexmark/ast/Node;Lcom/vladsch/flexmark/formatter/internal/NodeFormatterSubContext;)V
       6: return

  public final java.lang.Iterable<? extends com.vladsch.flexmark.ast.Node> nodesOfType(java.lang.Class<?>[]);
    Code:
       0: aload_0
       1: getfield      #45                 // Field collectedNodes:Lcom/vladsch/flexmark/util/collection/SubClassingBag;
       4: ifnonnull     13
       7: invokestatic  #50                 // Method com/vladsch/flexmark/formatter/internal/Formatter.access$300:()Ljava/lang/Iterable;
      10: goto          23
      13: aload_0
      14: getfield      #45                 // Field collectedNodes:Lcom/vladsch/flexmark/util/collection/SubClassingBag;
      17: ldc           #51                 // class com/vladsch/flexmark/ast/Node
      19: aload_1
      20: invokevirtual #52                 // Method com/vladsch/flexmark/util/collection/SubClassingBag.itemsOfType:(Ljava/lang/Class;[Ljava/lang/Class;)Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterable;
      23: areturn

  public final java.lang.Iterable<? extends com.vladsch.flexmark.ast.Node> nodesOfType(java.util.Collection<java.lang.Class<?>>);
    Code:
       0: aload_0
       1: getfield      #45                 // Field collectedNodes:Lcom/vladsch/flexmark/util/collection/SubClassingBag;
       4: ifnonnull     13
       7: invokestatic  #50                 // Method com/vladsch/flexmark/formatter/internal/Formatter.access$300:()Ljava/lang/Iterable;
      10: goto          23
      13: aload_0
      14: getfield      #45                 // Field collectedNodes:Lcom/vladsch/flexmark/util/collection/SubClassingBag;
      17: ldc           #51                 // class com/vladsch/flexmark/ast/Node
      19: aload_1
      20: invokevirtual #53                 // Method com/vladsch/flexmark/util/collection/SubClassingBag.itemsOfType:(Ljava/lang/Class;Ljava/util/Collection;)Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterable;
      23: areturn

  public final java.lang.Iterable<? extends com.vladsch.flexmark.ast.Node> reversedNodesOfType(java.lang.Class<?>[]);
    Code:
       0: aload_0
       1: getfield      #45                 // Field collectedNodes:Lcom/vladsch/flexmark/util/collection/SubClassingBag;
       4: ifnonnull     13
       7: invokestatic  #50                 // Method com/vladsch/flexmark/formatter/internal/Formatter.access$300:()Ljava/lang/Iterable;
      10: goto          23
      13: aload_0
      14: getfield      #45                 // Field collectedNodes:Lcom/vladsch/flexmark/util/collection/SubClassingBag;
      17: ldc           #51                 // class com/vladsch/flexmark/ast/Node
      19: aload_1
      20: invokevirtual #54                 // Method com/vladsch/flexmark/util/collection/SubClassingBag.reversedItemsOfType:(Ljava/lang/Class;[Ljava/lang/Class;)Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterable;
      23: areturn

  public final java.lang.Iterable<? extends com.vladsch.flexmark.ast.Node> reversedNodesOfType(java.util.Collection<java.lang.Class<?>>);
    Code:
       0: aload_0
       1: getfield      #45                 // Field collectedNodes:Lcom/vladsch/flexmark/util/collection/SubClassingBag;
       4: ifnonnull     13
       7: invokestatic  #50                 // Method com/vladsch/flexmark/formatter/internal/Formatter.access$300:()Ljava/lang/Iterable;
      10: goto          23
      13: aload_0
      14: getfield      #45                 // Field collectedNodes:Lcom/vladsch/flexmark/util/collection/SubClassingBag;
      17: ldc           #51                 // class com/vladsch/flexmark/ast/Node
      19: aload_1
      20: invokevirtual #55                 // Method com/vladsch/flexmark/util/collection/SubClassingBag.reversedItemsOfType:(Ljava/lang/Class;Ljava/util/Collection;)Lcom/vladsch/flexmark/util/collection/iteration/ReversibleIterable;
      23: areturn

  public com.vladsch.flexmark.formatter.internal.NodeFormatterContext getSubContext(java.lang.Appendable);
    Code:
       0: new           #56                 // class com/vladsch/flexmark/formatter/internal/MarkdownWriter
       3: dup
       4: aload_1
       5: aload_0
       6: invokevirtual #57                 // Method getMarkdown:()Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
       9: invokevirtual #58                 // Method com/vladsch/flexmark/formatter/internal/MarkdownWriter.getOptions:()I
      12: invokespecial #59                 // Method com/vladsch/flexmark/formatter/internal/MarkdownWriter."<init>":(Ljava/lang/Appendable;I)V
      15: astore_2
      16: aload_2
      17: aload_0
      18: invokevirtual #19                 // Method com/vladsch/flexmark/formatter/internal/MarkdownWriter.setContext:(Lcom/vladsch/flexmark/formatter/internal/NodeFormatterContext;)V
      21: new           #60                 // class com/vladsch/flexmark/formatter/internal/Formatter$MainNodeFormatter$SubNodeFormatter
      24: dup
      25: aload_0
      26: aload_0
      27: aload_2
      28: invokespecial #61                 // Method com/vladsch/flexmark/formatter/internal/Formatter$MainNodeFormatter$SubNodeFormatter."<init>":(Lcom/vladsch/flexmark/formatter/internal/Formatter$MainNodeFormatter;Lcom/vladsch/flexmark/formatter/internal/Formatter$MainNodeFormatter;Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;)V
      31: areturn

  void renderNode(com.vladsch.flexmark.ast.Node, com.vladsch.flexmark.formatter.internal.NodeFormatterSubContext);
    Code:
       0: aload_1
       1: instanceof    #62                 // class com/vladsch/flexmark/ast/Document
       4: ifeq          209
       7: invokestatic  #11                 // Method com/vladsch/flexmark/formatter/internal/FormattingPhase.values:()[Lcom/vladsch/flexmark/formatter/internal/FormattingPhase;
      10: astore_3
      11: aload_3
      12: arraylength
      13: istore        4
      15: iconst_0
      16: istore        5
      18: iload         5
      20: iload         4
      22: if_icmpge     206
      25: aload_3
      26: iload         5
      28: aaload
      29: astore        6
      31: aload         6
      33: getstatic     #63                 // Field com/vladsch/flexmark/formatter/internal/FormattingPhase.DOCUMENT:Lcom/vladsch/flexmark/formatter/internal/FormattingPhase;
      36: if_acmpeq     56
      39: aload_0
      40: getfield      #13                 // Field renderingPhases:Ljava/util/Set;
      43: aload         6
      45: invokeinterface #64,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      50: ifne          56
      53: goto          200
      56: aload_0
      57: aload         6
      59: putfield      #48                 // Field phase:Lcom/vladsch/flexmark/formatter/internal/FormattingPhase;
      62: aload_0
      63: invokevirtual #65                 // Method getFormattingPhase:()Lcom/vladsch/flexmark/formatter/internal/FormattingPhase;
      66: getstatic     #63                 // Field com/vladsch/flexmark/formatter/internal/FormattingPhase.DOCUMENT:Lcom/vladsch/flexmark/formatter/internal/FormattingPhase;
      69: if_acmpne     119
      72: aload_0
      73: getfield      #9                  // Field renderers:Ljava/util/Map;
      76: aload_1
      77: invokevirtual #66                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      80: invokeinterface #67,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      85: checkcast     #28                 // class com/vladsch/flexmark/formatter/internal/NodeFormattingHandler
      88: astore        7
      90: aload         7
      92: ifnull        116
      95: aload_2
      96: aload_1
      97: putfield      #68                 // Field com/vladsch/flexmark/formatter/internal/NodeFormatterSubContext.renderingNode:Lcom/vladsch/flexmark/ast/Node;
     100: aload         7
     102: aload_1
     103: aload_2
     104: aload_2
     105: getfield      #69                 // Field com/vladsch/flexmark/formatter/internal/NodeFormatterSubContext.markdown:Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
     108: invokevirtual #70                 // Method com/vladsch/flexmark/formatter/internal/NodeFormattingHandler.render:(Lcom/vladsch/flexmark/ast/Node;Lcom/vladsch/flexmark/formatter/internal/NodeFormatterContext;Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;)V
     111: aload_2
     112: aconst_null
     113: putfield      #68                 // Field com/vladsch/flexmark/formatter/internal/NodeFormatterSubContext.renderingNode:Lcom/vladsch/flexmark/ast/Node;
     116: goto          200
     119: aload_0
     120: getfield      #18                 // Field phasedFormatters:Ljava/util/List;
     123: invokeinterface #71,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     128: astore        7
     130: aload         7
     132: invokeinterface #26,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     137: ifeq          200
     140: aload         7
     142: invokeinterface #27,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     147: checkcast     #33                 // class com/vladsch/flexmark/formatter/internal/PhasedNodeFormatter
     150: astore        8
     152: aload         8
     154: invokeinterface #34,  1           // InterfaceMethod com/vladsch/flexmark/formatter/internal/PhasedNodeFormatter.getFormattingPhases:()Ljava/util/Set;
     159: aload         6
     161: invokeinterface #64,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
     166: ifeq          197
     169: aload_2
     170: aload_1
     171: putfield      #68                 // Field com/vladsch/flexmark/formatter/internal/NodeFormatterSubContext.renderingNode:Lcom/vladsch/flexmark/ast/Node;
     174: aload         8
     176: aload_2
     177: aload_2
     178: getfield      #69                 // Field com/vladsch/flexmark/formatter/internal/NodeFormatterSubContext.markdown:Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
     181: aload_1
     182: checkcast     #62                 // class com/vladsch/flexmark/ast/Document
     185: aload         6
     187: invokeinterface #72,  5           // InterfaceMethod com/vladsch/flexmark/formatter/internal/PhasedNodeFormatter.renderDocument:(Lcom/vladsch/flexmark/formatter/internal/NodeFormatterContext;Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;Lcom/vladsch/flexmark/ast/Document;Lcom/vladsch/flexmark/formatter/internal/FormattingPhase;)V
     192: aload_2
     193: aconst_null
     194: putfield      #68                 // Field com/vladsch/flexmark/formatter/internal/NodeFormatterSubContext.renderingNode:Lcom/vladsch/flexmark/ast/Node;
     197: goto          130
     200: iinc          5, 1
     203: goto          18
     206: goto          289
     209: aload_0
     210: getfield      #9                  // Field renderers:Ljava/util/Map;
     213: aload_1
     214: invokevirtual #66                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
     217: invokeinterface #67,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
     222: checkcast     #28                 // class com/vladsch/flexmark/formatter/internal/NodeFormattingHandler
     225: astore_3
     226: aload_3
     227: ifnonnull     245
     230: aload_0
     231: getfield      #9                  // Field renderers:Ljava/util/Map;
     234: ldc           #51                 // class com/vladsch/flexmark/ast/Node
     236: invokeinterface #67,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
     241: checkcast     #28                 // class com/vladsch/flexmark/formatter/internal/NodeFormattingHandler
     244: astore_3
     245: aload_3
     246: ifnull        279
     249: aload_0
     250: getfield      #46                 // Field renderingNode:Lcom/vladsch/flexmark/ast/Node;
     253: astore        4
     255: aload_2
     256: aload_1
     257: putfield      #68                 // Field com/vladsch/flexmark/formatter/internal/NodeFormatterSubContext.renderingNode:Lcom/vladsch/flexmark/ast/Node;
     260: aload_3
     261: aload_1
     262: aload_2
     263: aload_2
     264: getfield      #69                 // Field com/vladsch/flexmark/formatter/internal/NodeFormatterSubContext.markdown:Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
     267: invokevirtual #70                 // Method com/vladsch/flexmark/formatter/internal/NodeFormattingHandler.render:(Lcom/vladsch/flexmark/ast/Node;Lcom/vladsch/flexmark/formatter/internal/NodeFormatterContext;Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;)V
     270: aload_2
     271: aload         4
     273: putfield      #68                 // Field com/vladsch/flexmark/formatter/internal/NodeFormatterSubContext.renderingNode:Lcom/vladsch/flexmark/ast/Node;
     276: goto          289
     279: new           #36                 // class java/lang/IllegalStateException
     282: dup
     283: ldc           #73                 // String Core Node Formatter should implement generic Node renderer
     285: invokespecial #38                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     288: athrow
     289: return

  public void renderChildren(com.vladsch.flexmark.ast.Node);
    Code:
       0: aload_0
       1: aload_1
       2: aload_0
       3: invokevirtual #74                 // Method renderChildrenNode:(Lcom/vladsch/flexmark/ast/Node;Lcom/vladsch/flexmark/formatter/internal/NodeFormatterSubContext;)V
       6: return

  protected void renderChildrenNode(com.vladsch.flexmark.ast.Node, com.vladsch.flexmark.formatter.internal.NodeFormatterSubContext);
    Code:
       0: aload_1
       1: invokevirtual #75                 // Method com/vladsch/flexmark/ast/Node.getFirstChild:()Lcom/vladsch/flexmark/ast/Node;
       4: astore_3
       5: aload_3
       6: ifnull        27
       9: aload_3
      10: invokevirtual #76                 // Method com/vladsch/flexmark/ast/Node.getNext:()Lcom/vladsch/flexmark/ast/Node;
      13: astore        4
      15: aload_0
      16: aload_3
      17: aload_2
      18: invokevirtual #49                 // Method renderNode:(Lcom/vladsch/flexmark/ast/Node;Lcom/vladsch/flexmark/formatter/internal/NodeFormatterSubContext;)V
      21: aload         4
      23: astore_3
      24: goto          5
      27: return
}
