Compiled from "NodeRepositoryFormatter.java"
public abstract class com.vladsch.flexmark.formatter.internal.NodeRepositoryFormatter<R extends com.vladsch.flexmark.ast.NodeRepository<B>, B extends com.vladsch.flexmark.ast.Node & com.vladsch.flexmark.ast.ReferenceNode<R, B, N>, N extends com.vladsch.flexmark.ast.Node & com.vladsch.flexmark.ast.ReferencingNode<R, B>> implements com.vladsch.flexmark.formatter.internal.PhasedNodeFormatter {
  public static final java.util.HashSet<com.vladsch.flexmark.formatter.internal.FormattingPhase> FORMATTING_PHASES;

  protected final R referenceRepository;

  protected final java.util.List<B> referenceList;

  protected final java.util.HashSet<com.vladsch.flexmark.ast.Node> unusedReferences;

  protected final B lastReference;

  protected boolean recheckUndefinedReferences;

  protected boolean repositoryNodesDone;

  protected final java.util.Comparator<B> myComparator;

  public java.util.Comparator<B> getReferenceComparator();
    Code:
       0: aload_0
       1: getfield      #1                  // Field myComparator:Ljava/util/Comparator;
       4: areturn

  public abstract R getRepository(com.vladsch.flexmark.util.options.DataHolder);

  public abstract com.vladsch.flexmark.util.format.options.ElementPlacement getReferencePlacement();

  public abstract com.vladsch.flexmark.util.format.options.ElementPlacementSort getReferenceSort();

  public abstract void renderReferenceBlock(B, com.vladsch.flexmark.formatter.internal.NodeFormatterContext, com.vladsch.flexmark.formatter.internal.MarkdownWriter);

  public com.vladsch.flexmark.formatter.internal.NodeRepositoryFormatter(com.vladsch.flexmark.util.options.DataHolder);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_0
       6: aload_1
       7: invokevirtual #3                  // Method getRepository:(Lcom/vladsch/flexmark/util/options/DataHolder;)Lcom/vladsch/flexmark/ast/NodeRepository;
      10: putfield      #4                  // Field referenceRepository:Lcom/vladsch/flexmark/ast/NodeRepository;
      13: aload_0
      14: aload_0
      15: getfield      #4                  // Field referenceRepository:Lcom/vladsch/flexmark/ast/NodeRepository;
      18: invokevirtual #5                  // Method com/vladsch/flexmark/ast/NodeRepository.values:()Ljava/util/List;
      21: putfield      #6                  // Field referenceList:Ljava/util/List;
      24: aload_0
      25: aload_0
      26: getfield      #6                  // Field referenceList:Ljava/util/List;
      29: invokeinterface #7,  1            // InterfaceMethod java/util/List.isEmpty:()Z
      34: ifeq          41
      37: aconst_null
      38: goto          64
      41: aload_0
      42: getfield      #6                  // Field referenceList:Ljava/util/List;
      45: aload_0
      46: getfield      #6                  // Field referenceList:Ljava/util/List;
      49: invokeinterface #8,  1            // InterfaceMethod java/util/List.size:()I
      54: iconst_1
      55: isub
      56: invokeinterface #9,  2            // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      61: checkcast     #10                 // class com/vladsch/flexmark/ast/Node
      64: putfield      #11                 // Field lastReference:Lcom/vladsch/flexmark/ast/Node;
      67: aload_0
      68: new           #12                 // class java/util/HashSet
      71: dup
      72: invokespecial #13                 // Method java/util/HashSet."<init>":()V
      75: putfield      #14                 // Field unusedReferences:Ljava/util/HashSet;
      78: aload_0
      79: getstatic     #15                 // Field com/vladsch/flexmark/html/HtmlRenderer.RECHECK_UNDEFINED_REFERENCES:Lcom/vladsch/flexmark/util/options/DataKey;
      82: aload_1
      83: invokevirtual #16                 // Method com/vladsch/flexmark/util/options/DataKey.getFrom:(Lcom/vladsch/flexmark/util/options/DataHolder;)Ljava/lang/Object;
      86: checkcast     #17                 // class java/lang/Boolean
      89: invokevirtual #18                 // Method java/lang/Boolean.booleanValue:()Z
      92: putfield      #19                 // Field recheckUndefinedReferences:Z
      95: aload_0
      96: iconst_0
      97: putfield      #20                 // Field repositoryNodesDone:Z
     100: aload_0
     101: new           #21                 // class com/vladsch/flexmark/formatter/internal/NodeRepositoryFormatter$1
     104: dup
     105: aload_0
     106: invokespecial #22                 // Method com/vladsch/flexmark/formatter/internal/NodeRepositoryFormatter$1."<init>":(Lcom/vladsch/flexmark/formatter/internal/NodeRepositoryFormatter;)V
     109: putfield      #1                  // Field myComparator:Ljava/util/Comparator;
     112: return

  public java.util.Set<com.vladsch.flexmark.formatter.internal.FormattingPhase> getFormattingPhases();
    Code:
       0: getstatic     #23                 // Field FORMATTING_PHASES:Ljava/util/HashSet;
       3: areturn

  public void renderDocument(com.vladsch.flexmark.formatter.internal.NodeFormatterContext, com.vladsch.flexmark.formatter.internal.MarkdownWriter, com.vladsch.flexmark.ast.Document, com.vladsch.flexmark.formatter.internal.FormattingPhase);
    Code:
       0: getstatic     #24                 // Field com/vladsch/flexmark/formatter/internal/NodeRepositoryFormatter$2.$SwitchMap$com$vladsch$flexmark$formatter$internal$FormattingPhase:[I
       3: aload         4
       5: invokevirtual #25                 // Method com/vladsch/flexmark/formatter/internal/FormattingPhase.ordinal:()I
       8: iaload
       9: tableswitch   { // 1 to 3
                     1: 36
                     2: 172
                     3: 191
               default: 210
          }
      36: aload_0
      37: invokevirtual #26                 // Method getReferencePlacement:()Lcom/vladsch/flexmark/util/format/options/ElementPlacement;
      40: getstatic     #27                 // Field com/vladsch/flexmark/util/format/options/ElementPlacement.AS_IS:Lcom/vladsch/flexmark/util/format/options/ElementPlacement;
      43: if_acmpeq     210
      46: aload_0
      47: invokevirtual #28                 // Method getReferenceSort:()Lcom/vladsch/flexmark/util/format/options/ElementPlacementSort;
      50: getstatic     #29                 // Field com/vladsch/flexmark/util/format/options/ElementPlacementSort.SORT_UNUSED_LAST:Lcom/vladsch/flexmark/util/format/options/ElementPlacementSort;
      53: if_acmpne     210
      56: aload_0
      57: getfield      #14                 // Field unusedReferences:Ljava/util/HashSet;
      60: aload_0
      61: getfield      #6                  // Field referenceList:Ljava/util/List;
      64: invokevirtual #30                 // Method java/util/HashSet.addAll:(Ljava/util/Collection;)Z
      67: pop
      68: aload_1
      69: aload_0
      70: invokevirtual #31                 // Method getNodeClasses:()Ljava/util/Set;
      73: invokeinterface #32,  2           // InterfaceMethod com/vladsch/flexmark/formatter/internal/NodeFormatterContext.nodesOfType:(Ljava/util/Collection;)Ljava/lang/Iterable;
      78: astore        5
      80: aload         5
      82: invokeinterface #33,  1           // InterfaceMethod java/lang/Iterable.iterator:()Ljava/util/Iterator;
      87: astore        6
      89: aload         6
      91: invokeinterface #34,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      96: ifeq          169
      99: aload         6
     101: invokeinterface #35,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     106: checkcast     #10                 // class com/vladsch/flexmark/ast/Node
     109: astore        7
     111: aload_0
     112: getfield      #11                 // Field lastReference:Lcom/vladsch/flexmark/ast/Node;
     115: checkcast     #36                 // class com/vladsch/flexmark/ast/ReferenceNode
     118: aload         7
     120: invokeinterface #37,  2           // InterfaceMethod com/vladsch/flexmark/ast/ReferenceNode.getReferencingNode:(Lcom/vladsch/flexmark/ast/Node;)Lcom/vladsch/flexmark/ast/Node;
     125: astore        8
     127: aload         8
     129: ifnull        166
     132: aload         8
     134: checkcast     #38                 // class com/vladsch/flexmark/ast/ReferencingNode
     137: aload_0
     138: getfield      #4                  // Field referenceRepository:Lcom/vladsch/flexmark/ast/NodeRepository;
     141: invokeinterface #39,  2           // InterfaceMethod com/vladsch/flexmark/ast/ReferencingNode.getReferenceNode:(Lcom/vladsch/flexmark/ast/NodeRepository;)Lcom/vladsch/flexmark/ast/ReferenceNode;
     146: checkcast     #10                 // class com/vladsch/flexmark/ast/Node
     149: astore        9
     151: aload         9
     153: ifnull        166
     156: aload_0
     157: getfield      #14                 // Field unusedReferences:Ljava/util/HashSet;
     160: aload         9
     162: invokevirtual #40                 // Method java/util/HashSet.remove:(Ljava/lang/Object;)Z
     165: pop
     166: goto          89
     169: goto          210
     172: aload_0
     173: invokevirtual #26                 // Method getReferencePlacement:()Lcom/vladsch/flexmark/util/format/options/ElementPlacement;
     176: getstatic     #41                 // Field com/vladsch/flexmark/util/format/options/ElementPlacement.DOCUMENT_TOP:Lcom/vladsch/flexmark/util/format/options/ElementPlacement;
     179: if_acmpne     210
     182: aload_0
     183: aload_1
     184: aload_2
     185: invokespecial #42                 // Method formatReferences:(Lcom/vladsch/flexmark/formatter/internal/NodeFormatterContext;Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;)V
     188: goto          210
     191: aload_0
     192: invokevirtual #26                 // Method getReferencePlacement:()Lcom/vladsch/flexmark/util/format/options/ElementPlacement;
     195: getstatic     #43                 // Field com/vladsch/flexmark/util/format/options/ElementPlacement.DOCUMENT_BOTTOM:Lcom/vladsch/flexmark/util/format/options/ElementPlacement;
     198: if_acmpne     210
     201: aload_0
     202: aload_1
     203: aload_2
     204: invokespecial #42                 // Method formatReferences:(Lcom/vladsch/flexmark/formatter/internal/NodeFormatterContext;Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;)V
     207: goto          210
     210: return

  private void formatReferences(com.vladsch.flexmark.formatter.internal.NodeFormatterContext, com.vladsch.flexmark.formatter.internal.MarkdownWriter);
    Code:
       0: new           #44                 // class java/util/ArrayList
       3: dup
       4: aload_0
       5: getfield      #6                  // Field referenceList:Ljava/util/List;
       8: invokespecial #45                 // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
      11: astore_3
      12: getstatic     #46                 // Field com/vladsch/flexmark/formatter/internal/NodeRepositoryFormatter$2.$SwitchMap$com$vladsch$flexmark$util$format$options$ElementPlacementSort:[I
      15: aload_0
      16: invokevirtual #28                 // Method getReferenceSort:()Lcom/vladsch/flexmark/util/format/options/ElementPlacementSort;
      19: invokevirtual #47                 // Method com/vladsch/flexmark/util/format/options/ElementPlacementSort.ordinal:()I
      22: iaload
      23: tableswitch   { // 1 to 3
                     1: 48
                     2: 51
                     3: 62
               default: 178
          }
      48: goto          178
      51: aload_3
      52: aload_0
      53: invokevirtual #48                 // Method getReferenceComparator:()Ljava/util/Comparator;
      56: invokestatic  #49                 // Method java/util/Collections.sort:(Ljava/util/List;Ljava/util/Comparator;)V
      59: goto          178
      62: new           #44                 // class java/util/ArrayList
      65: dup
      66: invokespecial #50                 // Method java/util/ArrayList."<init>":()V
      69: astore        4
      71: new           #44                 // class java/util/ArrayList
      74: dup
      75: invokespecial #50                 // Method java/util/ArrayList."<init>":()V
      78: astore        5
      80: aload_3
      81: invokevirtual #51                 // Method java/util/ArrayList.iterator:()Ljava/util/Iterator;
      84: astore        6
      86: aload         6
      88: invokeinterface #34,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      93: ifeq          142
      96: aload         6
      98: invokeinterface #35,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     103: checkcast     #10                 // class com/vladsch/flexmark/ast/Node
     106: astore        7
     108: aload_0
     109: getfield      #14                 // Field unusedReferences:Ljava/util/HashSet;
     112: aload         7
     114: invokevirtual #52                 // Method java/util/HashSet.contains:(Ljava/lang/Object;)Z
     117: ifeq          131
     120: aload         5
     122: aload         7
     124: invokevirtual #53                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
     127: pop
     128: goto          139
     131: aload         4
     133: aload         7
     135: invokevirtual #53                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
     138: pop
     139: goto          86
     142: aload         4
     144: aload_0
     145: invokevirtual #48                 // Method getReferenceComparator:()Ljava/util/Comparator;
     148: invokestatic  #49                 // Method java/util/Collections.sort:(Ljava/util/List;Ljava/util/Comparator;)V
     151: aload         5
     153: aload_0
     154: invokevirtual #48                 // Method getReferenceComparator:()Ljava/util/Comparator;
     157: invokestatic  #49                 // Method java/util/Collections.sort:(Ljava/util/List;Ljava/util/Comparator;)V
     160: aload_3
     161: invokevirtual #54                 // Method java/util/ArrayList.clear:()V
     164: aload_3
     165: aload         4
     167: invokevirtual #55                 // Method java/util/ArrayList.addAll:(Ljava/util/Collection;)Z
     170: pop
     171: aload_3
     172: aload         5
     174: invokevirtual #55                 // Method java/util/ArrayList.addAll:(Ljava/util/Collection;)Z
     177: pop
     178: aload_2
     179: invokevirtual #56                 // Method com/vladsch/flexmark/formatter/internal/MarkdownWriter.blankLine:()Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
     182: pop
     183: aload_3
     184: invokevirtual #51                 // Method java/util/ArrayList.iterator:()Ljava/util/Iterator;
     187: astore        4
     189: aload         4
     191: invokeinterface #34,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     196: ifeq          222
     199: aload         4
     201: invokeinterface #35,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     206: checkcast     #10                 // class com/vladsch/flexmark/ast/Node
     209: astore        5
     211: aload_0
     212: aload         5
     214: aload_1
     215: aload_2
     216: invokevirtual #57                 // Method renderReferenceBlock:(Lcom/vladsch/flexmark/ast/Node;Lcom/vladsch/flexmark/formatter/internal/NodeFormatterContext;Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;)V
     219: goto          189
     222: aload_2
     223: invokevirtual #56                 // Method com/vladsch/flexmark/formatter/internal/MarkdownWriter.blankLine:()Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
     226: pop
     227: aload_0
     228: iconst_1
     229: putfield      #20                 // Field repositoryNodesDone:Z
     232: return

  protected void renderReference(B, com.vladsch.flexmark.formatter.internal.NodeFormatterContext, com.vladsch.flexmark.formatter.internal.MarkdownWriter);
    Code:
       0: aload_0
       1: getfield      #20                 // Field repositoryNodesDone:Z
       4: ifne          103
       7: getstatic     #58                 // Field com/vladsch/flexmark/formatter/internal/NodeRepositoryFormatter$2.$SwitchMap$com$vladsch$flexmark$util$format$options$ElementPlacement:[I
      10: aload_0
      11: invokevirtual #26                 // Method getReferencePlacement:()Lcom/vladsch/flexmark/util/format/options/ElementPlacement;
      14: invokevirtual #59                 // Method com/vladsch/flexmark/util/format/options/ElementPlacement.ordinal:()I
      17: iaload
      18: tableswitch   { // 1 to 3
                     1: 44
                     2: 80
                     3: 89
               default: 103
          }
      44: aload_0
      45: aload_1
      46: aload_2
      47: aload_3
      48: invokevirtual #57                 // Method renderReferenceBlock:(Lcom/vladsch/flexmark/ast/Node;Lcom/vladsch/flexmark/formatter/internal/NodeFormatterContext;Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;)V
      51: aload_1
      52: invokevirtual #60                 // Method com/vladsch/flexmark/ast/Node.getNext:()Lcom/vladsch/flexmark/ast/Node;
      55: ifnull        72
      58: aload_1
      59: invokevirtual #60                 // Method com/vladsch/flexmark/ast/Node.getNext:()Lcom/vladsch/flexmark/ast/Node;
      62: invokevirtual #61                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      65: aload_1
      66: invokevirtual #61                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      69: if_acmpeq     103
      72: aload_3
      73: invokevirtual #56                 // Method com/vladsch/flexmark/formatter/internal/MarkdownWriter.blankLine:()Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;
      76: pop
      77: goto          103
      80: aload_0
      81: aload_2
      82: aload_3
      83: invokespecial #42                 // Method formatReferences:(Lcom/vladsch/flexmark/formatter/internal/NodeFormatterContext;Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;)V
      86: goto          103
      89: aload_1
      90: aload_0
      91: getfield      #11                 // Field lastReference:Lcom/vladsch/flexmark/ast/Node;
      94: if_acmpne     103
      97: aload_0
      98: aload_2
      99: aload_3
     100: invokespecial #42                 // Method formatReferences:(Lcom/vladsch/flexmark/formatter/internal/NodeFormatterContext;Lcom/vladsch/flexmark/formatter/internal/MarkdownWriter;)V
     103: return

  static {};
    Code:
       0: new           #12                 // class java/util/HashSet
       3: dup
       4: iconst_3
       5: anewarray     #62                 // class com/vladsch/flexmark/formatter/internal/FormattingPhase
       8: dup
       9: iconst_0
      10: getstatic     #63                 // Field com/vladsch/flexmark/formatter/internal/FormattingPhase.COLLECT:Lcom/vladsch/flexmark/formatter/internal/FormattingPhase;
      13: aastore
      14: dup
      15: iconst_1
      16: getstatic     #64                 // Field com/vladsch/flexmark/formatter/internal/FormattingPhase.DOCUMENT_TOP:Lcom/vladsch/flexmark/formatter/internal/FormattingPhase;
      19: aastore
      20: dup
      21: iconst_2
      22: getstatic     #65                 // Field com/vladsch/flexmark/formatter/internal/FormattingPhase.DOCUMENT_BOTTOM:Lcom/vladsch/flexmark/formatter/internal/FormattingPhase;
      25: aastore
      26: invokestatic  #66                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      29: invokespecial #67                 // Method java/util/HashSet."<init>":(Ljava/util/Collection;)V
      32: putstatic     #23                 // Field FORMATTING_PHASES:Ljava/util/HashSet;
      35: return
}
