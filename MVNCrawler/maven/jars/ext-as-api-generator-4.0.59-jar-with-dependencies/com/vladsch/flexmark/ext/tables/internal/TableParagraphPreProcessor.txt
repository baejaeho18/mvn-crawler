Compiled from "TableParagraphPreProcessor.java"
public class com.vladsch.flexmark.ext.tables.internal.TableParagraphPreProcessor implements com.vladsch.flexmark.parser.block.ParagraphPreProcessor {
  private static final java.lang.String COL3;

  private static final java.util.regex.Pattern TABLE_HEADER_SEPARATOR3;

  private static java.util.BitSet pipeCharacters;

  private static java.util.BitSet separatorCharacters;

  private static java.util.HashMap<java.lang.Character, com.vladsch.flexmark.parser.block.CharacterNodeFactory> pipeNodeMap;

  private final com.vladsch.flexmark.ext.tables.internal.TableParserOptions options;

  java.util.regex.Pattern TABLE_HEADER_SEPARATOR;

  public static com.vladsch.flexmark.parser.block.ParagraphPreProcessorFactory Factory();
    Code:
       0: new           #2                  // class com/vladsch/flexmark/ext/tables/internal/TableParagraphPreProcessor$2
       3: dup
       4: invokespecial #3                  // Method com/vladsch/flexmark/ext/tables/internal/TableParagraphPreProcessor$2."<init>":()V
       7: areturn

  public static java.util.regex.Pattern getTableHeaderSeparator(int);
    Code:
       0: iload_0
       1: iconst_1
       2: if_icmplt     9
       5: iload_0
       6: goto          10
       9: iconst_1
      10: istore_1
      11: iload_1
      12: iconst_3
      13: if_icmpne     20
      16: getstatic     #4                  // Field TABLE_HEADER_SEPARATOR3:Ljava/util/regex/Pattern;
      19: areturn
      20: iload_0
      21: iconst_2
      22: if_icmplt     31
      25: iload_0
      26: iconst_1
      27: isub
      28: goto          32
      31: iconst_1
      32: istore_2
      33: iload_0
      34: iconst_3
      35: if_icmplt     44
      38: iload_0
      39: iconst_2
      40: isub
      41: goto          45
      44: iconst_1
      45: istore_3
      46: ldc           #5                  // String (?:\\s*-{%d,}\\s*|\\s*:-{%d,}\\s*|\\s*-{%d,}:\\s*|\\s*:-{%d,}:\\s*)
      48: iconst_4
      49: anewarray     #6                  // class java/lang/Object
      52: dup
      53: iconst_0
      54: iload_1
      55: invokestatic  #7                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      58: aastore
      59: dup
      60: iconst_1
      61: iload_2
      62: invokestatic  #7                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      65: aastore
      66: dup
      67: iconst_2
      68: iload_2
      69: invokestatic  #7                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      72: aastore
      73: dup
      74: iconst_3
      75: iload_3
      76: invokestatic  #7                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      79: aastore
      80: invokestatic  #8                  // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      83: astore        4
      85: new           #9                  // class java/lang/StringBuilder
      88: dup
      89: invokespecial #10                 // Method java/lang/StringBuilder."<init>":()V
      92: ldc           #11                 // String \\|
      94: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      97: aload         4
      99: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     102: ldc           #13                 // String \\|?\\s*|
     104: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     107: aload         4
     109: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     112: ldc           #14                 // String \\|\\s*|\\|?(?:
     114: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     117: aload         4
     119: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     122: ldc           #15                 // String \\|)+
     124: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     127: aload         4
     129: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     132: ldc           #16                 // String \\|?\\s*
     134: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     137: invokevirtual #17                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     140: invokestatic  #18                 // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
     143: areturn

  private com.vladsch.flexmark.ext.tables.internal.TableParagraphPreProcessor(com.vladsch.flexmark.util.options.DataHolder);
    Code:
       0: aload_0
       1: invokespecial #19                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #20                 // class com/vladsch/flexmark/ext/tables/internal/TableParserOptions
       8: dup
       9: aload_1
      10: invokespecial #21                 // Method com/vladsch/flexmark/ext/tables/internal/TableParserOptions."<init>":(Lcom/vladsch/flexmark/util/options/DataHolder;)V
      13: putfield      #22                 // Field options:Lcom/vladsch/flexmark/ext/tables/internal/TableParserOptions;
      16: aload_0
      17: aload_0
      18: getfield      #22                 // Field options:Lcom/vladsch/flexmark/ext/tables/internal/TableParserOptions;
      21: getfield      #23                 // Field com/vladsch/flexmark/ext/tables/internal/TableParserOptions.minSeparatorDashes:I
      24: invokestatic  #24                 // Method getTableHeaderSeparator:(I)Ljava/util/regex/Pattern;
      27: putfield      #25                 // Field TABLE_HEADER_SEPARATOR:Ljava/util/regex/Pattern;
      30: return

  private com.vladsch.flexmark.ext.tables.internal.TableParagraphPreProcessor(com.vladsch.flexmark.ext.tables.internal.TableParserOptions);
    Code:
       0: aload_0
       1: invokespecial #19                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #22                 // Field options:Lcom/vladsch/flexmark/ext/tables/internal/TableParserOptions;
       9: return

  public int preProcessBlock(com.vladsch.flexmark.ast.Paragraph, com.vladsch.flexmark.parser.block.ParserState);
    Code:
       0: aload_2
       1: invokeinterface #26,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.getInlineParser:()Lcom/vladsch/flexmark/parser/InlineParser;
       6: astore_3
       7: new           #27                 // class java/util/ArrayList
      10: dup
      11: invokespecial #28                 // Method java/util/ArrayList."<init>":()V
      14: astore        4
      16: iconst_m1
      17: istore        5
      19: aconst_null
      20: astore        6
      22: aload_1
      23: iconst_0
      24: invokevirtual #29                 // Method com/vladsch/flexmark/ast/Paragraph.getLineIndent:(I)I
      27: istore        7
      29: aconst_null
      30: astore        8
      32: iconst_0
      33: istore        9
      35: aload_1
      36: invokevirtual #30                 // Method com/vladsch/flexmark/ast/Paragraph.getContentLines:()Ljava/util/List;
      39: invokeinterface #31,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      44: astore        10
      46: aload         10
      48: invokeinterface #32,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      53: ifeq          368
      56: aload         10
      58: invokeinterface #33,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      63: checkcast     #34                 // class com/vladsch/flexmark/util/sequence/BasedSequence
      66: astore        11
      68: aload         4
      70: invokevirtual #35                 // Method java/util/ArrayList.size:()I
      73: istore        12
      75: iload         5
      77: iconst_m1
      78: if_icmpne     95
      81: iload         12
      83: aload_0
      84: getfield      #22                 // Field options:Lcom/vladsch/flexmark/ext/tables/internal/TableParserOptions;
      87: getfield      #36                 // Field com/vladsch/flexmark/ext/tables/internal/TableParserOptions.maxHeaderRows:I
      90: if_icmple     95
      93: iconst_0
      94: ireturn
      95: aload         11
      97: bipush        124
      99: invokeinterface #37,  2           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.indexOf:(C)I
     104: ifge          165
     107: iload         5
     109: iconst_m1
     110: if_icmpne     115
     113: iconst_0
     114: ireturn
     115: aload_0
     116: getfield      #22                 // Field options:Lcom/vladsch/flexmark/ext/tables/internal/TableParserOptions;
     119: getfield      #38                 // Field com/vladsch/flexmark/ext/tables/internal/TableParserOptions.withCaption:Z
     122: ifeq          368
     125: aload         11
     127: invokeinterface #39,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.trim:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     132: astore        13
     134: aload         13
     136: ldc           #40                 // String [
     138: invokeinterface #41,  2           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.startsWith:(Ljava/lang/CharSequence;)Z
     143: ifeq          162
     146: aload         13
     148: ldc           #42                 // String ]
     150: invokeinterface #43,  2           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.endsWith:(Ljava/lang/CharSequence;)Z
     155: ifeq          162
     158: aload         13
     160: astore        8
     162: goto          368
     165: aload_1
     166: iload         12
     168: invokevirtual #29                 // Method com/vladsch/flexmark/ast/Paragraph.getLineIndent:(I)I
     171: iload         7
     173: if_icmpgt     186
     176: aload         11
     178: invokeinterface #44,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.trimEOL:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     183: goto          225
     186: aload         11
     188: aload         11
     190: invokeinterface #45,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
     195: aload_1
     196: iload         12
     198: invokevirtual #29                 // Method com/vladsch/flexmark/ast/Paragraph.getLineIndent:(I)I
     201: iload         7
     203: isub
     204: isub
     205: aload         11
     207: invokeinterface #46,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
     212: aload         11
     214: invokeinterface #47,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.eolLength:()I
     219: isub
     220: invokeinterface #48,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.baseSubSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     225: astore        13
     227: iload         5
     229: iconst_m1
     230: if_icmpne     344
     233: iload         12
     235: aload_0
     236: getfield      #22                 // Field options:Lcom/vladsch/flexmark/ext/tables/internal/TableParserOptions;
     239: getfield      #49                 // Field com/vladsch/flexmark/ext/tables/internal/TableParserOptions.minHeaderRows:I
     242: if_icmplt     354
     245: aload_0
     246: getfield      #25                 // Field TABLE_HEADER_SEPARATOR:Ljava/util/regex/Pattern;
     249: aload         11
     251: invokevirtual #50                 // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
     254: invokevirtual #51                 // Method java/util/regex/Matcher.matches:()Z
     257: ifeq          354
     260: aload         13
     262: iconst_0
     263: invokeinterface #52,  2           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.charAt:(I)C
     268: bipush        32
     270: if_icmpeq     286
     273: aload         13
     275: iconst_0
     276: invokeinterface #52,  2           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.charAt:(I)C
     281: bipush        9
     283: if_icmpne     299
     286: aload         11
     288: iconst_0
     289: invokeinterface #52,  2           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.charAt:(I)C
     294: bipush        124
     296: if_icmpeq     310
     299: iload         12
     301: istore        5
     303: aload         11
     305: astore        6
     307: goto          354
     310: aload         13
     312: iconst_0
     313: invokeinterface #52,  2           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.charAt:(I)C
     318: bipush        32
     320: if_icmpeq     336
     323: aload         13
     325: iconst_0
     326: invokeinterface #52,  2           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.charAt:(I)C
     331: bipush        9
     333: if_icmpne     354
     336: aload_1
     337: iconst_1
     338: invokevirtual #53                 // Method com/vladsch/flexmark/ast/Paragraph.setHasTableSeparator:(Z)V
     341: goto          354
     344: aload_0
     345: getfield      #22                 // Field options:Lcom/vladsch/flexmark/ext/tables/internal/TableParserOptions;
     348: getfield      #54                 // Field com/vladsch/flexmark/ext/tables/internal/TableParserOptions.multiLineRows:Z
     351: ifeq          354
     354: aload         4
     356: aload         11
     358: invokevirtual #55                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
     361: pop
     362: iinc          9, 1
     365: goto          46
     368: iload         5
     370: iconst_m1
     371: if_icmpne     376
     374: iconst_0
     375: ireturn
     376: new           #27                 // class java/util/ArrayList
     379: dup
     380: invokespecial #28                 // Method java/util/ArrayList."<init>":()V
     383: astore        10
     385: aload         4
     387: invokevirtual #56                 // Method java/util/ArrayList.iterator:()Ljava/util/Iterator;
     390: astore        11
     392: aload         11
     394: invokeinterface #32,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     399: ifeq          598
     402: aload         11
     404: invokeinterface #33,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     409: checkcast     #34                 // class com/vladsch/flexmark/util/sequence/BasedSequence
     412: astore        12
     414: aload         10
     416: invokevirtual #35                 // Method java/util/ArrayList.size:()I
     419: istore        13
     421: aload_1
     422: iload         13
     424: invokevirtual #29                 // Method com/vladsch/flexmark/ast/Paragraph.getLineIndent:(I)I
     427: iload         7
     429: if_icmpgt     442
     432: aload         12
     434: invokeinterface #44,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.trimEOL:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     439: goto          481
     442: aload         12
     444: aload         12
     446: invokeinterface #45,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
     451: aload_1
     452: iload         13
     454: invokevirtual #29                 // Method com/vladsch/flexmark/ast/Paragraph.getLineIndent:(I)I
     457: iload         7
     459: isub
     460: isub
     461: aload         12
     463: invokeinterface #46,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
     468: aload         12
     470: invokeinterface #47,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.eolLength:()I
     475: isub
     476: invokeinterface #48,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.baseSubSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     481: astore        14
     483: new           #57                 // class com/vladsch/flexmark/ext/tables/TableRow
     486: dup
     487: aload         14
     489: invokespecial #58                 // Method com/vladsch/flexmark/ext/tables/TableRow."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     492: astore        15
     494: iload         13
     496: iload         5
     498: if_icmpne     525
     501: aload_3
     502: aload         14
     504: aload         15
     506: getstatic     #59                 // Field separatorCharacters:Ljava/util/BitSet;
     509: getstatic     #60                 // Field pipeNodeMap:Ljava/util/HashMap;
     512: invokeinterface #61,  5           // InterfaceMethod com/vladsch/flexmark/parser/InlineParser.parseCustom:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;Lcom/vladsch/flexmark/ast/Node;Ljava/util/BitSet;Ljava/util/Map;)Ljava/util/List;
     517: astore        17
     519: iconst_0
     520: istore        16
     522: goto          566
     525: aload_3
     526: aload         14
     528: aload         15
     530: getstatic     #62                 // Field pipeCharacters:Ljava/util/BitSet;
     533: getstatic     #60                 // Field pipeNodeMap:Ljava/util/HashMap;
     536: invokeinterface #61,  5           // InterfaceMethod com/vladsch/flexmark/parser/InlineParser.parseCustom:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;Lcom/vladsch/flexmark/ast/Node;Ljava/util/BitSet;Ljava/util/Map;)Ljava/util/List;
     541: astore        17
     543: iload         13
     545: iload         5
     547: if_icmpge     559
     550: iload         13
     552: iconst_1
     553: iadd
     554: istore        16
     556: goto          566
     559: iload         13
     561: iload         5
     563: isub
     564: istore        16
     566: aload         17
     568: ifnonnull     580
     571: iload         13
     573: iload         5
     575: if_icmpgt     598
     578: iconst_0
     579: ireturn
     580: aload         15
     582: iload         16
     584: invokevirtual #63                 // Method com/vladsch/flexmark/ext/tables/TableRow.setRowNumber:(I)V
     587: aload         10
     589: aload         15
     591: invokevirtual #55                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
     594: pop
     595: goto          392
     598: new           #64                 // class com/vladsch/flexmark/ext/tables/TableBlock
     601: dup
     602: aload         4
     604: iconst_0
     605: aload         10
     607: invokevirtual #35                 // Method java/util/ArrayList.size:()I
     610: invokevirtual #65                 // Method java/util/ArrayList.subList:(II)Ljava/util/List;
     613: invokespecial #66                 // Method com/vladsch/flexmark/ext/tables/TableBlock."<init>":(Ljava/util/List;)V
     616: astore        11
     618: new           #67                 // class com/vladsch/flexmark/ext/tables/TableHead
     621: dup
     622: invokespecial #68                 // Method com/vladsch/flexmark/ext/tables/TableHead."<init>":()V
     625: astore        12
     627: aload         11
     629: aload         12
     631: invokevirtual #69                 // Method com/vladsch/flexmark/ast/Block.appendChild:(Lcom/vladsch/flexmark/ast/Node;)V
     634: aload         6
     636: invokestatic  #70                 // Method parseAlignment:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)Ljava/util/List;
     639: astore        13
     641: iconst_0
     642: istore        14
     644: aload         13
     646: invokeinterface #71,  1           // InterfaceMethod java/util/List.size:()I
     651: istore        15
     653: aload         10
     655: invokevirtual #56                 // Method java/util/ArrayList.iterator:()Ljava/util/Iterator;
     658: astore        16
     660: aload         16
     662: invokeinterface #32,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     667: ifeq          1286
     670: aload         16
     672: invokeinterface #33,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     677: checkcast     #57                 // class com/vladsch/flexmark/ext/tables/TableRow
     680: astore        17
     682: iload         14
     684: iload         5
     686: if_icmpne     713
     689: aload         12
     691: invokevirtual #72                 // Method com/vladsch/flexmark/ast/Node.setCharsFromContent:()V
     694: new           #73                 // class com/vladsch/flexmark/ext/tables/TableSeparator
     697: dup
     698: invokespecial #74                 // Method com/vladsch/flexmark/ext/tables/TableSeparator."<init>":()V
     701: astore        12
     703: aload         11
     705: aload         12
     707: invokevirtual #69                 // Method com/vladsch/flexmark/ast/Block.appendChild:(Lcom/vladsch/flexmark/ast/Node;)V
     710: goto          743
     713: iload         14
     715: iload         5
     717: iconst_1
     718: iadd
     719: if_icmpne     743
     722: aload         12
     724: invokevirtual #72                 // Method com/vladsch/flexmark/ast/Node.setCharsFromContent:()V
     727: new           #75                 // class com/vladsch/flexmark/ext/tables/TableBody
     730: dup
     731: invokespecial #76                 // Method com/vladsch/flexmark/ext/tables/TableBody."<init>":()V
     734: astore        12
     736: aload         11
     738: aload         12
     740: invokevirtual #69                 // Method com/vladsch/flexmark/ast/Block.appendChild:(Lcom/vladsch/flexmark/ast/Node;)V
     743: iconst_1
     744: istore        18
     746: iconst_0
     747: istore        19
     749: new           #77                 // class com/vladsch/flexmark/ast/NodeIterator
     752: dup
     753: aload         17
     755: invokevirtual #78                 // Method com/vladsch/flexmark/ext/tables/TableRow.getFirstChild:()Lcom/vladsch/flexmark/ast/Node;
     758: invokespecial #79                 // Method com/vladsch/flexmark/ast/NodeIterator."<init>":(Lcom/vladsch/flexmark/ast/Node;)V
     761: astore        20
     763: new           #57                 // class com/vladsch/flexmark/ext/tables/TableRow
     766: dup
     767: aload         17
     769: invokevirtual #80                 // Method com/vladsch/flexmark/ext/tables/TableRow.getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     772: invokespecial #58                 // Method com/vladsch/flexmark/ext/tables/TableRow."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     775: astore        21
     777: aload         21
     779: aload         17
     781: invokevirtual #81                 // Method com/vladsch/flexmark/ext/tables/TableRow.getRowNumber:()I
     784: invokevirtual #63                 // Method com/vladsch/flexmark/ext/tables/TableRow.setRowNumber:(I)V
     787: iconst_0
     788: istore        22
     790: aload         20
     792: invokevirtual #82                 // Method com/vladsch/flexmark/ast/NodeIterator.hasNext:()Z
     795: ifeq          1169
     798: iload         19
     800: iload         15
     802: if_icmplt     834
     805: aload_0
     806: getfield      #22                 // Field options:Lcom/vladsch/flexmark/ext/tables/internal/TableParserOptions;
     809: getfield      #83                 // Field com/vladsch/flexmark/ext/tables/internal/TableParserOptions.discardExtraColumns:Z
     812: ifeq          834
     815: aload_0
     816: getfield      #22                 // Field options:Lcom/vladsch/flexmark/ext/tables/internal/TableParserOptions;
     819: getfield      #84                 // Field com/vladsch/flexmark/ext/tables/internal/TableParserOptions.headerSeparatorColumnMatch:Z
     822: ifeq          1169
     825: iload         14
     827: iload         5
     829: if_icmpge     1169
     832: iconst_0
     833: ireturn
     834: new           #85                 // class com/vladsch/flexmark/ext/tables/TableCell
     837: dup
     838: invokespecial #86                 // Method com/vladsch/flexmark/ext/tables/TableCell."<init>":()V
     841: astore        23
     843: iload         18
     845: ifeq          884
     848: aload         20
     850: invokevirtual #87                 // Method com/vladsch/flexmark/ast/NodeIterator.peek:()Lcom/vladsch/flexmark/ast/Node;
     853: instanceof    #88                 // class com/vladsch/flexmark/ext/tables/internal/TableColumnSeparator
     856: ifeq          884
     859: aload         20
     861: invokevirtual #89                 // Method com/vladsch/flexmark/ast/NodeIterator.next:()Lcom/vladsch/flexmark/ast/Node;
     864: astore        24
     866: aload         23
     868: aload         24
     870: invokevirtual #90                 // Method com/vladsch/flexmark/ast/Node.getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     873: invokevirtual #91                 // Method com/vladsch/flexmark/ext/tables/TableCell.setOpeningMarker:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     876: aload         24
     878: invokevirtual #92                 // Method com/vladsch/flexmark/ast/Node.unlink:()V
     881: iconst_0
     882: istore        18
     884: iload         19
     886: iload         22
     888: iadd
     889: iload         15
     891: if_icmpge     912
     894: aload         13
     896: iload         19
     898: iload         22
     900: iadd
     901: invokeinterface #93,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
     906: checkcast     #94                 // class com/vladsch/flexmark/ext/tables/TableCell$Alignment
     909: goto          913
     912: aconst_null
     913: astore        24
     915: aload         23
     917: iload         14
     919: iload         5
     921: if_icmpge     928
     924: iconst_1
     925: goto          929
     928: iconst_0
     929: invokevirtual #95                 // Method com/vladsch/flexmark/ext/tables/TableCell.setHeader:(Z)V
     932: aload         23
     934: aload         24
     936: invokevirtual #96                 // Method com/vladsch/flexmark/ext/tables/TableCell.setAlignment:(Lcom/vladsch/flexmark/ext/tables/TableCell$Alignment;)V
     939: aload         20
     941: invokevirtual #82                 // Method com/vladsch/flexmark/ast/NodeIterator.hasNext:()Z
     944: ifeq          974
     947: aload         20
     949: invokevirtual #87                 // Method com/vladsch/flexmark/ast/NodeIterator.peek:()Lcom/vladsch/flexmark/ast/Node;
     952: instanceof    #88                 // class com/vladsch/flexmark/ext/tables/internal/TableColumnSeparator
     955: ifeq          961
     958: goto          974
     961: aload         23
     963: aload         20
     965: invokevirtual #89                 // Method com/vladsch/flexmark/ast/NodeIterator.next:()Lcom/vladsch/flexmark/ast/Node;
     968: invokevirtual #97                 // Method com/vladsch/flexmark/ext/tables/TableCell.appendChild:(Lcom/vladsch/flexmark/ast/Node;)V
     971: goto          939
     974: aconst_null
     975: astore        25
     977: iconst_1
     978: istore        26
     980: aload         20
     982: invokevirtual #82                 // Method com/vladsch/flexmark/ast/NodeIterator.hasNext:()Z
     985: ifeq          1080
     988: aload         20
     990: invokevirtual #87                 // Method com/vladsch/flexmark/ast/NodeIterator.peek:()Lcom/vladsch/flexmark/ast/Node;
     993: instanceof    #88                 // class com/vladsch/flexmark/ext/tables/internal/TableColumnSeparator
     996: ifne          1002
     999: goto          1080
    1002: aload         25
    1004: ifnonnull     1030
    1007: aload         20
    1009: invokevirtual #89                 // Method com/vladsch/flexmark/ast/NodeIterator.next:()Lcom/vladsch/flexmark/ast/Node;
    1012: invokevirtual #90                 // Method com/vladsch/flexmark/ast/Node.getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1015: astore        25
    1017: aload_0
    1018: getfield      #22                 // Field options:Lcom/vladsch/flexmark/ext/tables/internal/TableParserOptions;
    1021: getfield      #98                 // Field com/vladsch/flexmark/ext/tables/internal/TableParserOptions.columnSpans:Z
    1024: ifne          980
    1027: goto          1080
    1030: aload         20
    1032: invokevirtual #87                 // Method com/vladsch/flexmark/ast/NodeIterator.peek:()Lcom/vladsch/flexmark/ast/Node;
    1035: invokevirtual #90                 // Method com/vladsch/flexmark/ast/Node.getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1038: astore        27
    1040: aload         25
    1042: aload         27
    1044: invokeinterface #99,  2           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.isContinuedBy:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)Z
    1049: ifne          1055
    1052: goto          1080
    1055: aload         25
    1057: aload         27
    1059: invokeinterface #100,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.spliceAtEnd:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1064: astore        25
    1066: aload         20
    1068: invokevirtual #89                 // Method com/vladsch/flexmark/ast/NodeIterator.next:()Lcom/vladsch/flexmark/ast/Node;
    1071: invokevirtual #92                 // Method com/vladsch/flexmark/ast/Node.unlink:()V
    1074: iinc          26, 1
    1077: goto          980
    1080: iload         22
    1082: iload         26
    1084: iconst_1
    1085: isub
    1086: iadd
    1087: istore        22
    1089: aload         25
    1091: ifnull        1101
    1094: aload         23
    1096: aload         25
    1098: invokevirtual #101                // Method com/vladsch/flexmark/ext/tables/TableCell.setClosingMarker:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    1101: aload         23
    1103: aload         23
    1105: invokevirtual #102                // Method com/vladsch/flexmark/ext/tables/TableCell.getChildChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1108: invokevirtual #103                // Method com/vladsch/flexmark/ext/tables/TableCell.setChars:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    1111: aload_0
    1112: getfield      #22                 // Field options:Lcom/vladsch/flexmark/ext/tables/internal/TableParserOptions;
    1115: getfield      #104                // Field com/vladsch/flexmark/ext/tables/internal/TableParserOptions.trimCellWhitespace:Z
    1118: ifeq          1129
    1121: aload         23
    1123: invokevirtual #105                // Method com/vladsch/flexmark/ext/tables/TableCell.trimWhiteSpace:()V
    1126: goto          1134
    1129: aload         23
    1131: invokevirtual #106                // Method com/vladsch/flexmark/ext/tables/TableCell.mergeWhiteSpace:()V
    1134: aload         23
    1136: aload         23
    1138: invokevirtual #102                // Method com/vladsch/flexmark/ext/tables/TableCell.getChildChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1141: invokevirtual #107                // Method com/vladsch/flexmark/ext/tables/TableCell.setText:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    1144: aload         23
    1146: invokevirtual #108                // Method com/vladsch/flexmark/ext/tables/TableCell.setCharsFromContent:()V
    1149: aload         23
    1151: iload         26
    1153: invokevirtual #109                // Method com/vladsch/flexmark/ext/tables/TableCell.setSpan:(I)V
    1156: aload         21
    1158: aload         23
    1160: invokevirtual #110                // Method com/vladsch/flexmark/ext/tables/TableRow.appendChild:(Lcom/vladsch/flexmark/ast/Node;)V
    1163: iinc          19, 1
    1166: goto          790
    1169: aload_0
    1170: getfield      #22                 // Field options:Lcom/vladsch/flexmark/ext/tables/internal/TableParserOptions;
    1173: getfield      #84                 // Field com/vladsch/flexmark/ext/tables/internal/TableParserOptions.headerSeparatorColumnMatch:Z
    1176: ifeq          1195
    1179: iload         14
    1181: iload         5
    1183: if_icmpge     1195
    1186: iload         19
    1188: iload         15
    1190: if_icmpge     1195
    1193: iconst_0
    1194: ireturn
    1195: aload_0
    1196: getfield      #22                 // Field options:Lcom/vladsch/flexmark/ext/tables/internal/TableParserOptions;
    1199: getfield      #111                // Field com/vladsch/flexmark/ext/tables/internal/TableParserOptions.appendMissingColumns:Z
    1202: ifeq          1268
    1205: iload         19
    1207: iload         15
    1209: if_icmpge     1268
    1212: new           #85                 // class com/vladsch/flexmark/ext/tables/TableCell
    1215: dup
    1216: invokespecial #86                 // Method com/vladsch/flexmark/ext/tables/TableCell."<init>":()V
    1219: astore        23
    1221: aload         23
    1223: iload         14
    1225: iload         5
    1227: if_icmpge     1234
    1230: iconst_1
    1231: goto          1235
    1234: iconst_0
    1235: invokevirtual #95                 // Method com/vladsch/flexmark/ext/tables/TableCell.setHeader:(Z)V
    1238: aload         23
    1240: aload         13
    1242: iload         19
    1244: invokeinterface #93,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
    1249: checkcast     #94                 // class com/vladsch/flexmark/ext/tables/TableCell$Alignment
    1252: invokevirtual #96                 // Method com/vladsch/flexmark/ext/tables/TableCell.setAlignment:(Lcom/vladsch/flexmark/ext/tables/TableCell$Alignment;)V
    1255: aload         21
    1257: aload         23
    1259: invokevirtual #110                // Method com/vladsch/flexmark/ext/tables/TableRow.appendChild:(Lcom/vladsch/flexmark/ast/Node;)V
    1262: iinc          19, 1
    1265: goto          1195
    1268: aload         21
    1270: invokevirtual #112                // Method com/vladsch/flexmark/ext/tables/TableRow.setCharsFromContent:()V
    1273: aload         12
    1275: aload         21
    1277: invokevirtual #113                // Method com/vladsch/flexmark/ast/Node.appendChild:(Lcom/vladsch/flexmark/ast/Node;)V
    1280: iinc          14, 1
    1283: goto          660
    1286: aload         12
    1288: invokevirtual #72                 // Method com/vladsch/flexmark/ast/Node.setCharsFromContent:()V
    1291: aload         12
    1293: instanceof    #73                 // class com/vladsch/flexmark/ext/tables/TableSeparator
    1296: ifeq          1315
    1299: new           #75                 // class com/vladsch/flexmark/ext/tables/TableBody
    1302: dup
    1303: invokespecial #76                 // Method com/vladsch/flexmark/ext/tables/TableBody."<init>":()V
    1306: astore        16
    1308: aload         11
    1310: aload         16
    1312: invokevirtual #69                 // Method com/vladsch/flexmark/ast/Block.appendChild:(Lcom/vladsch/flexmark/ast/Node;)V
    1315: aload         8
    1317: ifnull        1396
    1320: new           #114                // class com/vladsch/flexmark/ext/tables/TableCaption
    1323: dup
    1324: aload         8
    1326: iconst_0
    1327: iconst_1
    1328: invokeinterface #115,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1333: aload         8
    1335: iconst_1
    1336: aload         8
    1338: invokeinterface #116,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
    1343: iconst_1
    1344: isub
    1345: invokeinterface #115,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1350: aload         8
    1352: aload         8
    1354: invokeinterface #116,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
    1359: iconst_1
    1360: isub
    1361: invokeinterface #117,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(I)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1366: invokespecial #118                // Method com/vladsch/flexmark/ext/tables/TableCaption."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;Lcom/vladsch/flexmark/util/sequence/BasedSequence;Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
    1369: astore        16
    1371: aload_3
    1372: aload         16
    1374: invokevirtual #119                // Method com/vladsch/flexmark/ext/tables/TableCaption.getText:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1377: aload         16
    1379: invokeinterface #120,  3          // InterfaceMethod com/vladsch/flexmark/parser/InlineParser.parse:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;Lcom/vladsch/flexmark/ast/Node;)V
    1384: aload         16
    1386: invokevirtual #121                // Method com/vladsch/flexmark/ext/tables/TableCaption.setCharsFromContent:()V
    1389: aload         11
    1391: aload         16
    1393: invokevirtual #69                 // Method com/vladsch/flexmark/ast/Block.appendChild:(Lcom/vladsch/flexmark/ast/Node;)V
    1396: aload         11
    1398: invokevirtual #122                // Method com/vladsch/flexmark/ast/Block.setCharsFromContent:()V
    1401: aload_1
    1402: aload         11
    1404: invokevirtual #123                // Method com/vladsch/flexmark/ast/Paragraph.insertBefore:(Lcom/vladsch/flexmark/ast/Node;)V
    1407: aload_2
    1408: aload         11
    1410: invokeinterface #124,  2          // InterfaceMethod com/vladsch/flexmark/parser/block/ParserState.blockAdded:(Lcom/vladsch/flexmark/ast/Block;)V
    1415: aload         11
    1417: invokevirtual #125                // Method com/vladsch/flexmark/ast/Block.getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
    1420: invokeinterface #116,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
    1425: ireturn

  private static java.util.List<com.vladsch.flexmark.ext.tables.TableCell$Alignment> parseAlignment(com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: iconst_0
       2: iconst_0
       3: invokestatic  #126                // Method split:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;ZZ)Ljava/util/List;
       6: astore_1
       7: new           #27                 // class java/util/ArrayList
      10: dup
      11: invokespecial #28                 // Method java/util/ArrayList."<init>":()V
      14: astore_2
      15: aload_1
      16: invokeinterface #31,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      21: astore_3
      22: aload_3
      23: invokeinterface #32,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      28: ifeq          94
      31: aload_3
      32: invokeinterface #33,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      37: checkcast     #34                 // class com/vladsch/flexmark/util/sequence/BasedSequence
      40: astore        4
      42: aload         4
      44: invokeinterface #39,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.trim:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      49: astore        5
      51: aload         5
      53: ldc           #127                // String :
      55: invokeinterface #41,  2           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.startsWith:(Ljava/lang/CharSequence;)Z
      60: istore        6
      62: aload         5
      64: ldc           #127                // String :
      66: invokeinterface #43,  2           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.endsWith:(Ljava/lang/CharSequence;)Z
      71: istore        7
      73: iload         6
      75: iload         7
      77: invokestatic  #128                // Method getAlignment:(ZZ)Lcom/vladsch/flexmark/ext/tables/TableCell$Alignment;
      80: astore        8
      82: aload_2
      83: aload         8
      85: invokeinterface #129,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      90: pop
      91: goto          22
      94: aload_2
      95: areturn

  private static java.util.List<com.vladsch.flexmark.util.sequence.BasedSequence> split(com.vladsch.flexmark.util.sequence.BasedSequence, boolean, boolean);
    Code:
       0: aload_0
       1: invokeinterface #39,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.trim:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       6: astore_3
       7: aload_3
       8: invokeinterface #116,  1          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      13: istore        4
      15: new           #27                 // class java/util/ArrayList
      18: dup
      19: invokespecial #28                 // Method java/util/ArrayList."<init>":()V
      22: astore        5
      24: aload_3
      25: ldc           #130                // String |
      27: invokeinterface #41,  2           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.startsWith:(Ljava/lang/CharSequence;)Z
      32: ifeq          68
      35: iload_2
      36: ifeq          55
      39: aload         5
      41: aload_3
      42: iconst_0
      43: iconst_1
      44: invokeinterface #115,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      49: invokeinterface #129,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      54: pop
      55: aload_3
      56: iconst_1
      57: iload         4
      59: invokeinterface #115,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      64: astore_3
      65: iinc          4, -1
      68: iconst_0
      69: istore        6
      71: iconst_0
      72: istore        7
      74: iconst_0
      75: istore        8
      77: iconst_0
      78: istore        9
      80: iload         9
      82: iload         4
      84: if_icmpge     223
      87: aload_3
      88: iload         9
      90: invokeinterface #52,  2           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.charAt:(I)C
      95: istore        10
      97: iload         6
      99: ifeq          111
     102: iconst_0
     103: istore        6
     105: iinc          8, 1
     108: goto          217
     111: iload         10
     113: lookupswitch  { // 2
                    92: 140
                   124: 149
               default: 214
          }
     140: iconst_1
     141: istore        6
     143: iinc          8, 1
     146: goto          217
     149: iload_1
     150: ifeq          160
     153: iload         7
     155: iload         9
     157: if_icmpge     178
     160: aload         5
     162: aload_3
     163: iload         7
     165: iload         9
     167: invokeinterface #115,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     172: invokeinterface #129,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     177: pop
     178: iload_2
     179: ifeq          202
     182: aload         5
     184: aload_3
     185: iload         9
     187: iload         9
     189: iconst_1
     190: iadd
     191: invokeinterface #115,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     196: invokeinterface #129,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     201: pop
     202: iload         9
     204: iconst_1
     205: iadd
     206: istore        7
     208: iconst_0
     209: istore        8
     211: goto          217
     214: iinc          8, 1
     217: iinc          9, 1
     220: goto          80
     223: iload         8
     225: ifle          246
     228: aload         5
     230: aload_3
     231: iload         7
     233: iload         4
     235: invokeinterface #115,  3          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     240: invokeinterface #129,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     245: pop
     246: aload         5
     248: areturn

  private static com.vladsch.flexmark.ext.tables.TableCell$Alignment getAlignment(boolean, boolean);
    Code:
       0: iload_0
       1: ifeq          12
       4: iload_1
       5: ifeq          12
       8: getstatic     #131                // Field com/vladsch/flexmark/ext/tables/TableCell$Alignment.CENTER:Lcom/vladsch/flexmark/ext/tables/TableCell$Alignment;
      11: areturn
      12: iload_0
      13: ifeq          20
      16: getstatic     #132                // Field com/vladsch/flexmark/ext/tables/TableCell$Alignment.LEFT:Lcom/vladsch/flexmark/ext/tables/TableCell$Alignment;
      19: areturn
      20: iload_1
      21: ifeq          28
      24: getstatic     #133                // Field com/vladsch/flexmark/ext/tables/TableCell$Alignment.RIGHT:Lcom/vladsch/flexmark/ext/tables/TableCell$Alignment;
      27: areturn
      28: aconst_null
      29: areturn

  com.vladsch.flexmark.ext.tables.internal.TableParagraphPreProcessor(com.vladsch.flexmark.util.options.DataHolder, com.vladsch.flexmark.ext.tables.internal.TableParagraphPreProcessor$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method "<init>":(Lcom/vladsch/flexmark/util/options/DataHolder;)V
       5: return

  static {};
    Code:
       0: ldc           #135                // String \\|(?:\\s*-{3,}\\s*|\\s*:-{2,}\\s*|\\s*-{2,}:\\s*|\\s*:-+:\\s*)\\|?\\s*|(?:\\s*-{3,}\\s*|\\s*:-{2,}\\s*|\\s*-{2,}:\\s*|\\s*:-+:\\s*)\\|\\s*|\\|?(?:(?:\\s*-{3,}\\s*|\\s*:-{2,}\\s*|\\s*-{2,}:\\s*|\\s*:-+:\\s*)\\|)+(?:\\s*-{3,}\\s*|\\s*:-{2,}\\s*|\\s*-{2,}:\\s*|\\s*:-+:\\s*)\\|?\\s*
       2: invokestatic  #18                 // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
       5: putstatic     #4                  // Field TABLE_HEADER_SEPARATOR3:Ljava/util/regex/Pattern;
       8: new           #136                // class java/util/BitSet
      11: dup
      12: iconst_1
      13: invokespecial #137                // Method java/util/BitSet."<init>":(I)V
      16: putstatic     #62                 // Field pipeCharacters:Ljava/util/BitSet;
      19: new           #136                // class java/util/BitSet
      22: dup
      23: iconst_3
      24: invokespecial #137                // Method java/util/BitSet."<init>":(I)V
      27: putstatic     #59                 // Field separatorCharacters:Ljava/util/BitSet;
      30: getstatic     #62                 // Field pipeCharacters:Ljava/util/BitSet;
      33: bipush        124
      35: invokevirtual #138                // Method java/util/BitSet.set:(I)V
      38: getstatic     #59                 // Field separatorCharacters:Ljava/util/BitSet;
      41: bipush        124
      43: invokevirtual #138                // Method java/util/BitSet.set:(I)V
      46: getstatic     #59                 // Field separatorCharacters:Ljava/util/BitSet;
      49: bipush        58
      51: invokevirtual #138                // Method java/util/BitSet.set:(I)V
      54: getstatic     #59                 // Field separatorCharacters:Ljava/util/BitSet;
      57: bipush        45
      59: invokevirtual #138                // Method java/util/BitSet.set:(I)V
      62: new           #139                // class java/util/HashMap
      65: dup
      66: invokespecial #140                // Method java/util/HashMap."<init>":()V
      69: putstatic     #60                 // Field pipeNodeMap:Ljava/util/HashMap;
      72: getstatic     #60                 // Field pipeNodeMap:Ljava/util/HashMap;
      75: bipush        124
      77: invokestatic  #141                // Method java/lang/Character.valueOf:(C)Ljava/lang/Character;
      80: new           #142                // class com/vladsch/flexmark/ext/tables/internal/TableParagraphPreProcessor$1
      83: dup
      84: invokespecial #143                // Method com/vladsch/flexmark/ext/tables/internal/TableParagraphPreProcessor$1."<init>":()V
      87: invokevirtual #144                // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      90: pop
      91: return
}
