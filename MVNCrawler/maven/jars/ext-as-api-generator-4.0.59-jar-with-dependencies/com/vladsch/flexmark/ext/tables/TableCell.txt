Compiled from "TableCell.java"
public class com.vladsch.flexmark.ext.tables.TableCell extends com.vladsch.flexmark.ast.CustomNode implements com.vladsch.flexmark.ast.DelimitedNode {
  protected com.vladsch.flexmark.util.sequence.BasedSequence openingMarker;

  protected com.vladsch.flexmark.util.sequence.BasedSequence text;

  protected com.vladsch.flexmark.util.sequence.BasedSequence closingMarker;

  private boolean header;

  private com.vladsch.flexmark.ext.tables.TableCell$Alignment alignment;

  private int span;

  public void trimWhiteSpace();
    Code:
       0: aload_0
       1: invokevirtual #1                  // Method getFirstChild:()Lcom/vladsch/flexmark/ast/Node;
       4: astore_1
       5: aload_1
       6: ifnull        30
       9: aload_1
      10: instanceof    #2                  // class com/vladsch/flexmark/ast/WhiteSpace
      13: ifeq          30
      16: aload_1
      17: invokevirtual #3                  // Method com/vladsch/flexmark/ast/Node.getNext:()Lcom/vladsch/flexmark/ast/Node;
      20: astore_2
      21: aload_1
      22: invokevirtual #4                  // Method com/vladsch/flexmark/ast/Node.unlink:()V
      25: aload_2
      26: astore_1
      27: goto          5
      30: aload_0
      31: invokevirtual #5                  // Method getLastChild:()Lcom/vladsch/flexmark/ast/Node;
      34: astore_1
      35: aload_1
      36: ifnull        60
      39: aload_1
      40: instanceof    #2                  // class com/vladsch/flexmark/ast/WhiteSpace
      43: ifeq          60
      46: aload_1
      47: invokevirtual #6                  // Method com/vladsch/flexmark/ast/Node.getPrevious:()Lcom/vladsch/flexmark/ast/Node;
      50: astore_2
      51: aload_1
      52: invokevirtual #4                  // Method com/vladsch/flexmark/ast/Node.unlink:()V
      55: aload_2
      56: astore_1
      57: goto          35
      60: return

  public void mergeWhiteSpace();
    Code:
       0: iconst_0
       1: istore_1
       2: aload_0
       3: invokevirtual #1                  // Method getFirstChild:()Lcom/vladsch/flexmark/ast/Node;
       6: astore_2
       7: aload_2
       8: ifnull        53
      11: aload_2
      12: instanceof    #2                  // class com/vladsch/flexmark/ast/WhiteSpace
      15: ifeq          53
      18: aload_2
      19: invokevirtual #3                  // Method com/vladsch/flexmark/ast/Node.getNext:()Lcom/vladsch/flexmark/ast/Node;
      22: astore_3
      23: new           #7                  // class com/vladsch/flexmark/ast/Text
      26: dup
      27: aload_2
      28: invokevirtual #8                  // Method com/vladsch/flexmark/ast/Node.getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      31: invokespecial #9                  // Method com/vladsch/flexmark/ast/Text."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
      34: astore        4
      36: aload_2
      37: aload         4
      39: invokevirtual #10                 // Method com/vladsch/flexmark/ast/Node.insertBefore:(Lcom/vladsch/flexmark/ast/Node;)V
      42: aload_2
      43: invokevirtual #4                  // Method com/vladsch/flexmark/ast/Node.unlink:()V
      46: aload_3
      47: astore_2
      48: iconst_1
      49: istore_1
      50: goto          7
      53: aload_0
      54: invokevirtual #5                  // Method getLastChild:()Lcom/vladsch/flexmark/ast/Node;
      57: astore_2
      58: aload_2
      59: ifnull        104
      62: aload_2
      63: instanceof    #2                  // class com/vladsch/flexmark/ast/WhiteSpace
      66: ifeq          104
      69: aload_2
      70: invokevirtual #6                  // Method com/vladsch/flexmark/ast/Node.getPrevious:()Lcom/vladsch/flexmark/ast/Node;
      73: astore_3
      74: new           #7                  // class com/vladsch/flexmark/ast/Text
      77: dup
      78: aload_2
      79: invokevirtual #8                  // Method com/vladsch/flexmark/ast/Node.getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      82: invokespecial #9                  // Method com/vladsch/flexmark/ast/Text."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
      85: astore        4
      87: aload_2
      88: aload         4
      90: invokevirtual #10                 // Method com/vladsch/flexmark/ast/Node.insertBefore:(Lcom/vladsch/flexmark/ast/Node;)V
      93: aload_2
      94: invokevirtual #4                  // Method com/vladsch/flexmark/ast/Node.unlink:()V
      97: aload_3
      98: astore_2
      99: iconst_1
     100: istore_1
     101: goto          58
     104: iload_1
     105: ifeq          112
     108: aload_0
     109: invokestatic  #11                 // Method com/vladsch/flexmark/ast/util/TextNodeConverter.mergeTextNodes:(Lcom/vladsch/flexmark/ast/Node;)V
     112: return

  public com.vladsch.flexmark.util.sequence.BasedSequence getOpeningMarker();
    Code:
       0: aload_0
       1: getfield      #12                 // Field openingMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: areturn

  public void setOpeningMarker(com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #12                 // Field openingMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       5: return

  public com.vladsch.flexmark.util.sequence.BasedSequence getText();
    Code:
       0: aload_0
       1: getfield      #13                 // Field text:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: areturn

  public void setText(com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #13                 // Field text:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       5: return

  public com.vladsch.flexmark.util.sequence.BasedSequence getClosingMarker();
    Code:
       0: aload_0
       1: getfield      #14                 // Field closingMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: areturn

  public void setClosingMarker(com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #14                 // Field closingMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       5: return

  public int getSpan();
    Code:
       0: aload_0
       1: getfield      #15                 // Field span:I
       4: ireturn

  public void setSpan(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #15                 // Field span:I
       5: return

  public com.vladsch.flexmark.util.sequence.BasedSequence[] getSegments();
    Code:
       0: iconst_3
       1: anewarray     #16                 // class com/vladsch/flexmark/util/sequence/BasedSequence
       4: dup
       5: iconst_0
       6: aload_0
       7: getfield      #12                 // Field openingMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      10: aastore
      11: dup
      12: iconst_1
      13: aload_0
      14: getfield      #13                 // Field text:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      17: aastore
      18: dup
      19: iconst_2
      20: aload_0
      21: getfield      #14                 // Field closingMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      24: aastore
      25: areturn

  public void getAstExtra(java.lang.StringBuilder);
    Code:
       0: aload_0
       1: getfield      #17                 // Field alignment:Lcom/vladsch/flexmark/ext/tables/TableCell$Alignment;
       4: ifnull        21
       7: aload_1
       8: ldc           #18                 // String
      10: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      13: aload_0
      14: getfield      #17                 // Field alignment:Lcom/vladsch/flexmark/ext/tables/TableCell$Alignment;
      17: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      20: pop
      21: aload_0
      22: getfield      #21                 // Field header:Z
      25: ifeq          35
      28: aload_1
      29: ldc           #22                 // String  header
      31: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      34: pop
      35: aload_0
      36: getfield      #15                 // Field span:I
      39: iconst_1
      40: if_icmple     50
      43: aload_1
      44: ldc           #23                 // String  span
      46: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      49: pop
      50: aload_1
      51: aload_0
      52: getfield      #12                 // Field openingMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      55: aload_0
      56: getfield      #13                 // Field text:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      59: aload_0
      60: getfield      #14                 // Field closingMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      63: ldc           #24                 // String text
      65: invokestatic  #25                 // Method delimitedSegmentSpanChars:(Ljava/lang/StringBuilder;Lcom/vladsch/flexmark/util/sequence/BasedSequence;Lcom/vladsch/flexmark/util/sequence/BasedSequence;Lcom/vladsch/flexmark/util/sequence/BasedSequence;Ljava/lang/String;)V
      68: return

  public com.vladsch.flexmark.ext.tables.TableCell();
    Code:
       0: aload_0
       1: invokespecial #26                 // Method com/vladsch/flexmark/ast/CustomNode."<init>":()V
       4: aload_0
       5: getstatic     #27                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       8: putfield      #12                 // Field openingMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      11: aload_0
      12: getstatic     #27                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      15: putfield      #13                 // Field text:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      18: aload_0
      19: getstatic     #27                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      22: putfield      #14                 // Field closingMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      25: aload_0
      26: iconst_1
      27: putfield      #15                 // Field span:I
      30: return

  public com.vladsch.flexmark.ext.tables.TableCell(com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #28                 // Method com/vladsch/flexmark/ast/CustomNode."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
       5: aload_0
       6: getstatic     #27                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       9: putfield      #12                 // Field openingMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      12: aload_0
      13: getstatic     #27                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      16: putfield      #13                 // Field text:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      19: aload_0
      20: getstatic     #27                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      23: putfield      #14                 // Field closingMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      26: aload_0
      27: iconst_1
      28: putfield      #15                 // Field span:I
      31: return

  public boolean isHeader();
    Code:
       0: aload_0
       1: getfield      #21                 // Field header:Z
       4: ireturn

  public void setHeader(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #21                 // Field header:Z
       5: return

  public com.vladsch.flexmark.ext.tables.TableCell$Alignment getAlignment();
    Code:
       0: aload_0
       1: getfield      #17                 // Field alignment:Lcom/vladsch/flexmark/ext/tables/TableCell$Alignment;
       4: areturn

  public void setAlignment(com.vladsch.flexmark.ext.tables.TableCell$Alignment);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #17                 // Field alignment:Lcom/vladsch/flexmark/ext/tables/TableCell$Alignment;
       5: return
}
