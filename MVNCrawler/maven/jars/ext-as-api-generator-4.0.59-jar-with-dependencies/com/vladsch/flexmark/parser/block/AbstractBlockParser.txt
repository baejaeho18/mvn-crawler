Compiled from "AbstractBlockParser.java"
public abstract class com.vladsch.flexmark.parser.block.AbstractBlockParser implements com.vladsch.flexmark.parser.block.BlockParser {
  private com.vladsch.flexmark.util.options.MutableDataSet mutableData;

  private boolean isClosed;

  public com.vladsch.flexmark.parser.block.AbstractBlockParser();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #2                  // Field mutableData:Lcom/vladsch/flexmark/util/options/MutableDataSet;
       9: aload_0
      10: iconst_0
      11: putfield      #3                  // Field isClosed:Z
      14: return

  public boolean isClosed();
    Code:
       0: aload_0
       1: getfield      #3                  // Field isClosed:Z
       4: ireturn

  public boolean isContainer();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isInterruptible();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isRawText();
    Code:
       0: iconst_0
       1: ireturn

  public boolean canContain(com.vladsch.flexmark.parser.block.ParserState, com.vladsch.flexmark.parser.block.BlockParser, com.vladsch.flexmark.ast.Block);
    Code:
       0: iconst_0
       1: ireturn

  public boolean isParagraphParser();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isPropagatingLastBlankLine(com.vladsch.flexmark.parser.block.BlockParser);
    Code:
       0: iconst_1
       1: ireturn

  public com.vladsch.flexmark.ast.BlockContent getBlockContent();
    Code:
       0: aconst_null
       1: areturn

  public void addLine(com.vladsch.flexmark.parser.block.ParserState, com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: return

  public void parseInlines(com.vladsch.flexmark.parser.InlineParser);
    Code:
       0: return

  public boolean breakOutOnDoubleBlankLine();
    Code:
       0: iconst_0
       1: ireturn

  public final void finalizeClosedBlock();
    Code:
       0: aload_0
       1: aconst_null
       2: putfield      #2                  // Field mutableData:Lcom/vladsch/flexmark/util/options/MutableDataSet;
       5: aload_0
       6: iconst_1
       7: putfield      #3                  // Field isClosed:Z
      10: return

  public boolean canInterruptBy(com.vladsch.flexmark.parser.block.BlockParserFactory);
    Code:
       0: iconst_1
       1: ireturn

  public com.vladsch.flexmark.util.options.MutableDataHolder getDataHolder();
    Code:
       0: aload_0
       1: getfield      #2                  // Field mutableData:Lcom/vladsch/flexmark/util/options/MutableDataSet;
       4: ifnonnull     18
       7: aload_0
       8: new           #4                  // class com/vladsch/flexmark/util/options/MutableDataSet
      11: dup
      12: invokespecial #5                  // Method com/vladsch/flexmark/util/options/MutableDataSet."<init>":()V
      15: putfield      #2                  // Field mutableData:Lcom/vladsch/flexmark/util/options/MutableDataSet;
      18: aload_0
      19: getfield      #2                  // Field mutableData:Lcom/vladsch/flexmark/util/options/MutableDataSet;
      22: areturn
}
