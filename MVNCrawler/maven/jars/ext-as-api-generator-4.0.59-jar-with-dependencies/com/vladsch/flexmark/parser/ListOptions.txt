Compiled from "ListOptions.java"
public class com.vladsch.flexmark.parser.ListOptions implements com.vladsch.flexmark.util.options.MutableDataSetter {
  protected com.vladsch.flexmark.parser.ParserEmulationProfile myParserEmulationProfile;

  protected com.vladsch.flexmark.parser.ListOptions$ItemInterrupt itemInterrupt;

  protected boolean autoLoose;

  protected boolean autoLooseOneLevelLists;

  protected boolean delimiterMismatchToNewList;

  protected boolean endOnDoubleBlank;

  protected boolean itemMarkerSpace;

  protected boolean itemTypeMismatchToNewList;

  protected boolean itemTypeMismatchToSubList;

  protected boolean looseWhenPrevHasTrailingBlankLine;

  protected boolean looseWhenLastItemPrevHasTrailingBlankLine;

  protected boolean looseWhenHasNonListChildren;

  protected boolean looseWhenBlankLineFollowsItemParagraph;

  protected boolean looseWhenHasLooseSubItem;

  protected boolean looseWhenHasTrailingBlankLine;

  protected boolean looseWhenContainsBlankLine;

  protected boolean numberedItemMarkerSuffixed;

  protected boolean orderedItemDotOnly;

  protected boolean orderedListManualStart;

  protected boolean itemContentAfterSuffix;

  protected java.lang.String itemPrefixChars;

  protected int codeIndent;

  protected int itemIndent;

  protected int newItemCodeIndent;

  protected java.lang.String[] itemMarkerSuffixes;

  public com.vladsch.flexmark.parser.ListOptions();
    Code:
       0: aload_0
       1: aconst_null
       2: checkcast     #1                  // class com/vladsch/flexmark/util/options/DataHolder
       5: invokespecial #2                  // Method "<init>":(Lcom/vladsch/flexmark/util/options/DataHolder;)V
       8: return

  private com.vladsch.flexmark.parser.ListOptions(com.vladsch.flexmark.util.options.DataHolder);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: getstatic     #4                  // Field com/vladsch/flexmark/parser/Parser.PARSER_EMULATION_PROFILE:Lcom/vladsch/flexmark/util/options/DataKey;
       8: aload_1
       9: invokevirtual #5                  // Method com/vladsch/flexmark/util/options/DataKey.getFrom:(Lcom/vladsch/flexmark/util/options/DataHolder;)Ljava/lang/Object;
      12: checkcast     #6                  // class com/vladsch/flexmark/parser/ParserEmulationProfile
      15: putfield      #7                  // Field myParserEmulationProfile:Lcom/vladsch/flexmark/parser/ParserEmulationProfile;
      18: aload_0
      19: new           #8                  // class com/vladsch/flexmark/parser/ListOptions$ItemInterrupt
      22: dup
      23: aload_1
      24: invokespecial #9                  // Method com/vladsch/flexmark/parser/ListOptions$ItemInterrupt."<init>":(Lcom/vladsch/flexmark/util/options/DataHolder;)V
      27: putfield      #10                 // Field itemInterrupt:Lcom/vladsch/flexmark/parser/ListOptions$ItemInterrupt;
      30: aload_0
      31: getstatic     #11                 // Field com/vladsch/flexmark/parser/Parser.LISTS_AUTO_LOOSE:Lcom/vladsch/flexmark/util/options/DataKey;
      34: aload_1
      35: invokevirtual #5                  // Method com/vladsch/flexmark/util/options/DataKey.getFrom:(Lcom/vladsch/flexmark/util/options/DataHolder;)Ljava/lang/Object;
      38: checkcast     #12                 // class java/lang/Boolean
      41: invokevirtual #13                 // Method java/lang/Boolean.booleanValue:()Z
      44: putfield      #14                 // Field autoLoose:Z
      47: aload_0
      48: getstatic     #15                 // Field com/vladsch/flexmark/parser/Parser.LISTS_AUTO_LOOSE_ONE_LEVEL_LISTS:Lcom/vladsch/flexmark/util/options/DataKey;
      51: aload_1
      52: invokevirtual #5                  // Method com/vladsch/flexmark/util/options/DataKey.getFrom:(Lcom/vladsch/flexmark/util/options/DataHolder;)Ljava/lang/Object;
      55: checkcast     #12                 // class java/lang/Boolean
      58: invokevirtual #13                 // Method java/lang/Boolean.booleanValue:()Z
      61: putfield      #16                 // Field autoLooseOneLevelLists:Z
      64: aload_0
      65: getstatic     #17                 // Field com/vladsch/flexmark/parser/Parser.LISTS_DELIMITER_MISMATCH_TO_NEW_LIST:Lcom/vladsch/flexmark/util/options/DataKey;
      68: aload_1
      69: invokevirtual #5                  // Method com/vladsch/flexmark/util/options/DataKey.getFrom:(Lcom/vladsch/flexmark/util/options/DataHolder;)Ljava/lang/Object;
      72: checkcast     #12                 // class java/lang/Boolean
      75: invokevirtual #13                 // Method java/lang/Boolean.booleanValue:()Z
      78: putfield      #18                 // Field delimiterMismatchToNewList:Z
      81: aload_0
      82: getstatic     #19                 // Field com/vladsch/flexmark/parser/Parser.LISTS_END_ON_DOUBLE_BLANK:Lcom/vladsch/flexmark/util/options/DataKey;
      85: aload_1
      86: invokevirtual #5                  // Method com/vladsch/flexmark/util/options/DataKey.getFrom:(Lcom/vladsch/flexmark/util/options/DataHolder;)Ljava/lang/Object;
      89: checkcast     #12                 // class java/lang/Boolean
      92: invokevirtual #13                 // Method java/lang/Boolean.booleanValue:()Z
      95: putfield      #20                 // Field endOnDoubleBlank:Z
      98: aload_0
      99: getstatic     #21                 // Field com/vladsch/flexmark/parser/Parser.LISTS_ITEM_MARKER_SPACE:Lcom/vladsch/flexmark/util/options/DataKey;
     102: aload_1
     103: invokevirtual #5                  // Method com/vladsch/flexmark/util/options/DataKey.getFrom:(Lcom/vladsch/flexmark/util/options/DataHolder;)Ljava/lang/Object;
     106: checkcast     #12                 // class java/lang/Boolean
     109: invokevirtual #13                 // Method java/lang/Boolean.booleanValue:()Z
     112: putfield      #22                 // Field itemMarkerSpace:Z
     115: aload_0
     116: getstatic     #23                 // Field com/vladsch/flexmark/parser/Parser.LISTS_ITEM_TYPE_MISMATCH_TO_NEW_LIST:Lcom/vladsch/flexmark/util/options/DataKey;
     119: aload_1
     120: invokevirtual #5                  // Method com/vladsch/flexmark/util/options/DataKey.getFrom:(Lcom/vladsch/flexmark/util/options/DataHolder;)Ljava/lang/Object;
     123: checkcast     #12                 // class java/lang/Boolean
     126: invokevirtual #13                 // Method java/lang/Boolean.booleanValue:()Z
     129: putfield      #24                 // Field itemTypeMismatchToNewList:Z
     132: aload_0
     133: getstatic     #25                 // Field com/vladsch/flexmark/parser/Parser.LISTS_ITEM_TYPE_MISMATCH_TO_SUB_LIST:Lcom/vladsch/flexmark/util/options/DataKey;
     136: aload_1
     137: invokevirtual #5                  // Method com/vladsch/flexmark/util/options/DataKey.getFrom:(Lcom/vladsch/flexmark/util/options/DataHolder;)Ljava/lang/Object;
     140: checkcast     #12                 // class java/lang/Boolean
     143: invokevirtual #13                 // Method java/lang/Boolean.booleanValue:()Z
     146: putfield      #26                 // Field itemTypeMismatchToSubList:Z
     149: aload_0
     150: getstatic     #27                 // Field com/vladsch/flexmark/parser/Parser.LISTS_LOOSE_WHEN_PREV_HAS_TRAILING_BLANK_LINE:Lcom/vladsch/flexmark/util/options/DataKey;
     153: aload_1
     154: invokevirtual #5                  // Method com/vladsch/flexmark/util/options/DataKey.getFrom:(Lcom/vladsch/flexmark/util/options/DataHolder;)Ljava/lang/Object;
     157: checkcast     #12                 // class java/lang/Boolean
     160: invokevirtual #13                 // Method java/lang/Boolean.booleanValue:()Z
     163: putfield      #28                 // Field looseWhenPrevHasTrailingBlankLine:Z
     166: aload_0
     167: getstatic     #29                 // Field com/vladsch/flexmark/parser/Parser.LISTS_LOOSE_WHEN_LAST_ITEM_PREV_HAS_TRAILING_BLANK_LINE:Lcom/vladsch/flexmark/util/options/DataKey;
     170: aload_1
     171: invokevirtual #5                  // Method com/vladsch/flexmark/util/options/DataKey.getFrom:(Lcom/vladsch/flexmark/util/options/DataHolder;)Ljava/lang/Object;
     174: checkcast     #12                 // class java/lang/Boolean
     177: invokevirtual #13                 // Method java/lang/Boolean.booleanValue:()Z
     180: putfield      #30                 // Field looseWhenLastItemPrevHasTrailingBlankLine:Z
     183: aload_0
     184: getstatic     #31                 // Field com/vladsch/flexmark/parser/Parser.LISTS_LOOSE_WHEN_HAS_NON_LIST_CHILDREN:Lcom/vladsch/flexmark/util/options/DataKey;
     187: aload_1
     188: invokevirtual #5                  // Method com/vladsch/flexmark/util/options/DataKey.getFrom:(Lcom/vladsch/flexmark/util/options/DataHolder;)Ljava/lang/Object;
     191: checkcast     #12                 // class java/lang/Boolean
     194: invokevirtual #13                 // Method java/lang/Boolean.booleanValue:()Z
     197: putfield      #32                 // Field looseWhenHasNonListChildren:Z
     200: aload_0
     201: getstatic     #33                 // Field com/vladsch/flexmark/parser/Parser.LISTS_LOOSE_WHEN_BLANK_LINE_FOLLOWS_ITEM_PARAGRAPH:Lcom/vladsch/flexmark/util/options/DataKey;
     204: aload_1
     205: invokevirtual #5                  // Method com/vladsch/flexmark/util/options/DataKey.getFrom:(Lcom/vladsch/flexmark/util/options/DataHolder;)Ljava/lang/Object;
     208: checkcast     #12                 // class java/lang/Boolean
     211: invokevirtual #13                 // Method java/lang/Boolean.booleanValue:()Z
     214: putfield      #34                 // Field looseWhenBlankLineFollowsItemParagraph:Z
     217: aload_0
     218: getstatic     #35                 // Field com/vladsch/flexmark/parser/Parser.LISTS_LOOSE_WHEN_HAS_LOOSE_SUB_ITEM:Lcom/vladsch/flexmark/util/options/DataKey;
     221: aload_1
     222: invokevirtual #5                  // Method com/vladsch/flexmark/util/options/DataKey.getFrom:(Lcom/vladsch/flexmark/util/options/DataHolder;)Ljava/lang/Object;
     225: checkcast     #12                 // class java/lang/Boolean
     228: invokevirtual #13                 // Method java/lang/Boolean.booleanValue:()Z
     231: putfield      #36                 // Field looseWhenHasLooseSubItem:Z
     234: aload_0
     235: getstatic     #37                 // Field com/vladsch/flexmark/parser/Parser.LISTS_LOOSE_WHEN_HAS_TRAILING_BLANK_LINE:Lcom/vladsch/flexmark/util/options/DataKey;
     238: aload_1
     239: invokevirtual #5                  // Method com/vladsch/flexmark/util/options/DataKey.getFrom:(Lcom/vladsch/flexmark/util/options/DataHolder;)Ljava/lang/Object;
     242: checkcast     #12                 // class java/lang/Boolean
     245: invokevirtual #13                 // Method java/lang/Boolean.booleanValue:()Z
     248: putfield      #38                 // Field looseWhenHasTrailingBlankLine:Z
     251: aload_0
     252: getstatic     #39                 // Field com/vladsch/flexmark/parser/Parser.LISTS_LOOSE_WHEN_CONTAINS_BLANK_LINE:Lcom/vladsch/flexmark/util/options/DataKey;
     255: aload_1
     256: invokevirtual #5                  // Method com/vladsch/flexmark/util/options/DataKey.getFrom:(Lcom/vladsch/flexmark/util/options/DataHolder;)Ljava/lang/Object;
     259: checkcast     #12                 // class java/lang/Boolean
     262: invokevirtual #13                 // Method java/lang/Boolean.booleanValue:()Z
     265: putfield      #40                 // Field looseWhenContainsBlankLine:Z
     268: aload_0
     269: getstatic     #41                 // Field com/vladsch/flexmark/parser/Parser.LISTS_NUMBERED_ITEM_MARKER_SUFFIXED:Lcom/vladsch/flexmark/util/options/DataKey;
     272: aload_1
     273: invokevirtual #5                  // Method com/vladsch/flexmark/util/options/DataKey.getFrom:(Lcom/vladsch/flexmark/util/options/DataHolder;)Ljava/lang/Object;
     276: checkcast     #12                 // class java/lang/Boolean
     279: invokevirtual #13                 // Method java/lang/Boolean.booleanValue:()Z
     282: putfield      #42                 // Field numberedItemMarkerSuffixed:Z
     285: aload_0
     286: getstatic     #43                 // Field com/vladsch/flexmark/parser/Parser.LISTS_ORDERED_ITEM_DOT_ONLY:Lcom/vladsch/flexmark/util/options/DataKey;
     289: aload_1
     290: invokevirtual #5                  // Method com/vladsch/flexmark/util/options/DataKey.getFrom:(Lcom/vladsch/flexmark/util/options/DataHolder;)Ljava/lang/Object;
     293: checkcast     #12                 // class java/lang/Boolean
     296: invokevirtual #13                 // Method java/lang/Boolean.booleanValue:()Z
     299: putfield      #44                 // Field orderedItemDotOnly:Z
     302: aload_0
     303: getstatic     #45                 // Field com/vladsch/flexmark/parser/Parser.LISTS_ORDERED_LIST_MANUAL_START:Lcom/vladsch/flexmark/util/options/DataKey;
     306: aload_1
     307: invokevirtual #5                  // Method com/vladsch/flexmark/util/options/DataKey.getFrom:(Lcom/vladsch/flexmark/util/options/DataHolder;)Ljava/lang/Object;
     310: checkcast     #12                 // class java/lang/Boolean
     313: invokevirtual #13                 // Method java/lang/Boolean.booleanValue:()Z
     316: putfield      #46                 // Field orderedListManualStart:Z
     319: aload_0
     320: getstatic     #47                 // Field com/vladsch/flexmark/parser/Parser.LISTS_ITEM_CONTENT_AFTER_SUFFIX:Lcom/vladsch/flexmark/util/options/DataKey;
     323: aload_1
     324: invokevirtual #5                  // Method com/vladsch/flexmark/util/options/DataKey.getFrom:(Lcom/vladsch/flexmark/util/options/DataHolder;)Ljava/lang/Object;
     327: checkcast     #12                 // class java/lang/Boolean
     330: invokevirtual #13                 // Method java/lang/Boolean.booleanValue:()Z
     333: putfield      #48                 // Field itemContentAfterSuffix:Z
     336: aload_0
     337: getstatic     #49                 // Field com/vladsch/flexmark/parser/Parser.LISTS_ITEM_PREFIX_CHARS:Lcom/vladsch/flexmark/util/options/DataKey;
     340: aload_1
     341: invokevirtual #5                  // Method com/vladsch/flexmark/util/options/DataKey.getFrom:(Lcom/vladsch/flexmark/util/options/DataHolder;)Ljava/lang/Object;
     344: checkcast     #50                 // class java/lang/String
     347: putfield      #51                 // Field itemPrefixChars:Ljava/lang/String;
     350: aload_0
     351: getstatic     #52                 // Field com/vladsch/flexmark/parser/Parser.LISTS_CODE_INDENT:Lcom/vladsch/flexmark/util/options/DataKey;
     354: aload_1
     355: invokevirtual #5                  // Method com/vladsch/flexmark/util/options/DataKey.getFrom:(Lcom/vladsch/flexmark/util/options/DataHolder;)Ljava/lang/Object;
     358: checkcast     #53                 // class java/lang/Integer
     361: invokevirtual #54                 // Method java/lang/Integer.intValue:()I
     364: putfield      #55                 // Field codeIndent:I
     367: aload_0
     368: getstatic     #56                 // Field com/vladsch/flexmark/parser/Parser.LISTS_ITEM_INDENT:Lcom/vladsch/flexmark/util/options/DataKey;
     371: aload_1
     372: invokevirtual #5                  // Method com/vladsch/flexmark/util/options/DataKey.getFrom:(Lcom/vladsch/flexmark/util/options/DataHolder;)Ljava/lang/Object;
     375: checkcast     #53                 // class java/lang/Integer
     378: invokevirtual #54                 // Method java/lang/Integer.intValue:()I
     381: putfield      #57                 // Field itemIndent:I
     384: aload_0
     385: getstatic     #58                 // Field com/vladsch/flexmark/parser/Parser.LISTS_NEW_ITEM_CODE_INDENT:Lcom/vladsch/flexmark/util/options/DataKey;
     388: aload_1
     389: invokevirtual #5                  // Method com/vladsch/flexmark/util/options/DataKey.getFrom:(Lcom/vladsch/flexmark/util/options/DataHolder;)Ljava/lang/Object;
     392: checkcast     #53                 // class java/lang/Integer
     395: invokevirtual #54                 // Method java/lang/Integer.intValue:()I
     398: putfield      #59                 // Field newItemCodeIndent:I
     401: aload_0
     402: getstatic     #60                 // Field com/vladsch/flexmark/parser/Parser.LISTS_ITEM_MARKER_SUFFIXES:Lcom/vladsch/flexmark/util/options/DataKey;
     405: aload_1
     406: invokevirtual #5                  // Method com/vladsch/flexmark/util/options/DataKey.getFrom:(Lcom/vladsch/flexmark/util/options/DataHolder;)Ljava/lang/Object;
     409: checkcast     #61                 // class "[Ljava/lang/String;"
     412: putfield      #62                 // Field itemMarkerSuffixes:[Ljava/lang/String;
     415: return

  com.vladsch.flexmark.parser.ListOptions(com.vladsch.flexmark.parser.ListOptions);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: invokevirtual #63                 // Method getParserEmulationProfile:()Lcom/vladsch/flexmark/parser/ParserEmulationProfile;
       9: putfield      #7                  // Field myParserEmulationProfile:Lcom/vladsch/flexmark/parser/ParserEmulationProfile;
      12: aload_0
      13: new           #8                  // class com/vladsch/flexmark/parser/ListOptions$ItemInterrupt
      16: dup
      17: aload_1
      18: invokevirtual #64                 // Method getItemInterrupt:()Lcom/vladsch/flexmark/parser/ListOptions$ItemInterrupt;
      21: invokespecial #65                 // Method com/vladsch/flexmark/parser/ListOptions$ItemInterrupt."<init>":(Lcom/vladsch/flexmark/parser/ListOptions$ItemInterrupt;)V
      24: putfield      #10                 // Field itemInterrupt:Lcom/vladsch/flexmark/parser/ListOptions$ItemInterrupt;
      27: aload_0
      28: aload_1
      29: invokevirtual #66                 // Method isAutoLoose:()Z
      32: putfield      #14                 // Field autoLoose:Z
      35: aload_0
      36: aload_1
      37: invokevirtual #67                 // Method isAutoLooseOneLevelLists:()Z
      40: putfield      #16                 // Field autoLooseOneLevelLists:Z
      43: aload_0
      44: aload_1
      45: invokevirtual #68                 // Method isDelimiterMismatchToNewList:()Z
      48: putfield      #18                 // Field delimiterMismatchToNewList:Z
      51: aload_0
      52: aload_1
      53: invokevirtual #69                 // Method isEndOnDoubleBlank:()Z
      56: putfield      #20                 // Field endOnDoubleBlank:Z
      59: aload_0
      60: aload_1
      61: invokevirtual #70                 // Method isItemMarkerSpace:()Z
      64: putfield      #22                 // Field itemMarkerSpace:Z
      67: aload_0
      68: aload_1
      69: invokevirtual #71                 // Method isItemTypeMismatchToNewList:()Z
      72: putfield      #24                 // Field itemTypeMismatchToNewList:Z
      75: aload_0
      76: aload_1
      77: invokevirtual #72                 // Method isItemTypeMismatchToSubList:()Z
      80: putfield      #26                 // Field itemTypeMismatchToSubList:Z
      83: aload_0
      84: aload_1
      85: invokevirtual #73                 // Method isLooseWhenPrevHasTrailingBlankLine:()Z
      88: putfield      #28                 // Field looseWhenPrevHasTrailingBlankLine:Z
      91: aload_0
      92: aload_1
      93: invokevirtual #74                 // Method isLooseWhenLastItemPrevHasTrailingBlankLine:()Z
      96: putfield      #30                 // Field looseWhenLastItemPrevHasTrailingBlankLine:Z
      99: aload_0
     100: aload_1
     101: invokevirtual #75                 // Method isLooseWhenHasNonListChildren:()Z
     104: putfield      #32                 // Field looseWhenHasNonListChildren:Z
     107: aload_0
     108: aload_1
     109: invokevirtual #76                 // Method isLooseWhenBlankLineFollowsItemParagraph:()Z
     112: putfield      #34                 // Field looseWhenBlankLineFollowsItemParagraph:Z
     115: aload_0
     116: aload_1
     117: invokevirtual #77                 // Method isLooseWhenHasLooseSubItem:()Z
     120: putfield      #36                 // Field looseWhenHasLooseSubItem:Z
     123: aload_0
     124: aload_1
     125: invokevirtual #78                 // Method isLooseWhenHasTrailingBlankLine:()Z
     128: putfield      #38                 // Field looseWhenHasTrailingBlankLine:Z
     131: aload_0
     132: aload_1
     133: invokevirtual #79                 // Method isLooseWhenContainsBlankLine:()Z
     136: putfield      #40                 // Field looseWhenContainsBlankLine:Z
     139: aload_0
     140: aload_1
     141: invokevirtual #80                 // Method isNumberedItemMarkerSuffixed:()Z
     144: putfield      #42                 // Field numberedItemMarkerSuffixed:Z
     147: aload_0
     148: aload_1
     149: invokevirtual #81                 // Method isOrderedItemDotOnly:()Z
     152: putfield      #44                 // Field orderedItemDotOnly:Z
     155: aload_0
     156: aload_1
     157: invokevirtual #82                 // Method isOrderedListManualStart:()Z
     160: putfield      #46                 // Field orderedListManualStart:Z
     163: aload_0
     164: aload_1
     165: invokevirtual #83                 // Method isItemContentAfterSuffix:()Z
     168: putfield      #48                 // Field itemContentAfterSuffix:Z
     171: aload_0
     172: aload_1
     173: invokevirtual #84                 // Method getItemPrefixChars:()Ljava/lang/String;
     176: putfield      #51                 // Field itemPrefixChars:Ljava/lang/String;
     179: aload_0
     180: aload_1
     181: invokevirtual #85                 // Method getCodeIndent:()I
     184: putfield      #55                 // Field codeIndent:I
     187: aload_0
     188: aload_1
     189: invokevirtual #86                 // Method getItemIndent:()I
     192: putfield      #57                 // Field itemIndent:I
     195: aload_0
     196: aload_1
     197: invokevirtual #87                 // Method getNewItemCodeIndent:()I
     200: putfield      #59                 // Field newItemCodeIndent:I
     203: aload_0
     204: aload_1
     205: invokevirtual #88                 // Method getItemMarkerSuffixes:()[Ljava/lang/String;
     208: putfield      #62                 // Field itemMarkerSuffixes:[Ljava/lang/String;
     211: return

  public static com.vladsch.flexmark.parser.ListOptions getFrom(com.vladsch.flexmark.util.options.DataHolder);
    Code:
       0: new           #89                 // class com/vladsch/flexmark/parser/ListOptions
       3: dup
       4: aload_0
       5: invokespecial #2                  // Method "<init>":(Lcom/vladsch/flexmark/util/options/DataHolder;)V
       8: areturn

  public static com.vladsch.flexmark.parser.ListOptions getNew(com.vladsch.flexmark.util.options.DataHolder);
    Code:
       0: new           #89                 // class com/vladsch/flexmark/parser/ListOptions
       3: dup
       4: aload_0
       5: invokespecial #2                  // Method "<init>":(Lcom/vladsch/flexmark/util/options/DataHolder;)V
       8: areturn

  public boolean isTightListItem(com.vladsch.flexmark.ast.ListItem);
    Code:
       0: aload_1
       1: invokevirtual #90                 // Method com/vladsch/flexmark/ast/ListItem.isLoose:()Z
       4: ifeq          9
       7: iconst_0
       8: ireturn
       9: aload_0
      10: invokevirtual #66                 // Method isAutoLoose:()Z
      13: istore_2
      14: iload_2
      15: ifeq          98
      18: aload_0
      19: invokevirtual #67                 // Method isAutoLooseOneLevelLists:()Z
      22: ifeq          98
      25: aload_1
      26: iconst_1
      27: anewarray     #91                 // class java/lang/Class
      30: dup
      31: iconst_0
      32: ldc           #92                 // class com/vladsch/flexmark/ast/ListItem
      34: aastore
      35: invokevirtual #93                 // Method com/vladsch/flexmark/ast/ListItem.getAncestorOfType:([Ljava/lang/Class;)Lcom/vladsch/flexmark/ast/Node;
      38: ifnonnull     61
      41: aload_1
      42: iconst_1
      43: anewarray     #91                 // class java/lang/Class
      46: dup
      47: iconst_0
      48: ldc           #94                 // class com/vladsch/flexmark/ast/ListBlock
      50: aastore
      51: invokevirtual #95                 // Method com/vladsch/flexmark/ast/ListItem.getChildOfType:([Ljava/lang/Class;)Lcom/vladsch/flexmark/ast/Node;
      54: ifnonnull     61
      57: iconst_1
      58: goto          62
      61: iconst_0
      62: istore_3
      63: aload_1
      64: invokevirtual #96                 // Method com/vladsch/flexmark/ast/ListItem.getFirstChild:()Lcom/vladsch/flexmark/ast/Node;
      67: ifnull        92
      70: iload_3
      71: ifne          81
      74: aload_1
      75: invokevirtual #97                 // Method com/vladsch/flexmark/ast/ListItem.isTight:()Z
      78: ifne          92
      81: iload_3
      82: ifeq          96
      85: aload_1
      86: invokevirtual #98                 // Method com/vladsch/flexmark/ast/ListItem.isInTightList:()Z
      89: ifeq          96
      92: iconst_1
      93: goto          97
      96: iconst_0
      97: ireturn
      98: aload_1
      99: invokevirtual #96                 // Method com/vladsch/flexmark/ast/ListItem.getFirstChild:()Lcom/vladsch/flexmark/ast/Node;
     102: ifnull        127
     105: iload_2
     106: ifne          116
     109: aload_1
     110: invokevirtual #97                 // Method com/vladsch/flexmark/ast/ListItem.isTight:()Z
     113: ifne          127
     116: iload_2
     117: ifeq          131
     120: aload_1
     121: invokevirtual #98                 // Method com/vladsch/flexmark/ast/ListItem.isInTightList:()Z
     124: ifeq          131
     127: iconst_1
     128: goto          132
     131: iconst_0
     132: ireturn

  public boolean isInTightListItem(com.vladsch.flexmark.ast.Paragraph);
    Code:
       0: aload_1
       1: invokevirtual #99                 // Method com/vladsch/flexmark/ast/Paragraph.getParent:()Lcom/vladsch/flexmark/ast/Block;
       4: astore_2
       5: aload_2
       6: instanceof    #92                 // class com/vladsch/flexmark/ast/ListItem
       9: ifne          14
      12: iconst_0
      13: ireturn
      14: aload_2
      15: checkcast     #92                 // class com/vladsch/flexmark/ast/ListItem
      18: astore_3
      19: aload_3
      20: aload_1
      21: invokevirtual #100                // Method com/vladsch/flexmark/ast/ListItem.isItemParagraph:(Lcom/vladsch/flexmark/ast/Paragraph;)Z
      24: ifne          29
      27: iconst_0
      28: ireturn
      29: aload_0
      30: invokevirtual #66                 // Method isAutoLoose:()Z
      33: istore        4
      35: iload         4
      37: ifeq          53
      40: aload_0
      41: invokevirtual #67                 // Method isAutoLooseOneLevelLists:()Z
      44: ifeq          53
      47: aload_0
      48: aload_3
      49: invokevirtual #101                // Method isTightListItem:(Lcom/vladsch/flexmark/ast/ListItem;)Z
      52: ireturn
      53: iload         4
      55: ifne          66
      58: aload_3
      59: aload_1
      60: invokevirtual #102                // Method com/vladsch/flexmark/ast/ListItem.isParagraphInTightListItem:(Lcom/vladsch/flexmark/ast/Paragraph;)Z
      63: ifne          78
      66: iload         4
      68: ifeq          82
      71: aload_3
      72: invokevirtual #98                 // Method com/vladsch/flexmark/ast/ListItem.isInTightList:()Z
      75: ifeq          82
      78: iconst_1
      79: goto          83
      82: iconst_0
      83: ireturn

  public boolean canInterrupt(com.vladsch.flexmark.ast.ListBlock, boolean, boolean);
    Code:
       0: aload_1
       1: instanceof    #103                // class com/vladsch/flexmark/ast/OrderedList
       4: istore        4
       6: iload         4
       8: ifeq          33
      11: aload_0
      12: invokevirtual #82                 // Method isOrderedListManualStart:()Z
      15: ifeq          29
      18: aload_1
      19: checkcast     #103                // class com/vladsch/flexmark/ast/OrderedList
      22: invokevirtual #104                // Method com/vladsch/flexmark/ast/OrderedList.getStartNumber:()I
      25: iconst_1
      26: if_icmpne     33
      29: iconst_1
      30: goto          34
      33: iconst_0
      34: istore        5
      36: aload_0
      37: invokevirtual #64                 // Method getItemInterrupt:()Lcom/vladsch/flexmark/parser/ListOptions$ItemInterrupt;
      40: iload         4
      42: iload         5
      44: iload_2
      45: iload_3
      46: invokevirtual #105                // Method com/vladsch/flexmark/parser/ListOptions$ItemInterrupt.canInterrupt:(ZZZZ)Z
      49: ireturn

  public boolean canStartSubList(com.vladsch.flexmark.ast.ListBlock, boolean);
    Code:
       0: aload_1
       1: instanceof    #103                // class com/vladsch/flexmark/ast/OrderedList
       4: istore_3
       5: iload_3
       6: ifeq          31
       9: aload_0
      10: invokevirtual #82                 // Method isOrderedListManualStart:()Z
      13: ifeq          27
      16: aload_1
      17: checkcast     #103                // class com/vladsch/flexmark/ast/OrderedList
      20: invokevirtual #104                // Method com/vladsch/flexmark/ast/OrderedList.getStartNumber:()I
      23: iconst_1
      24: if_icmpne     31
      27: iconst_1
      28: goto          32
      31: iconst_0
      32: istore        4
      34: aload_0
      35: invokevirtual #64                 // Method getItemInterrupt:()Lcom/vladsch/flexmark/parser/ListOptions$ItemInterrupt;
      38: iload_3
      39: iload         4
      41: iload_2
      42: invokevirtual #106                // Method com/vladsch/flexmark/parser/ListOptions$ItemInterrupt.canStartSubList:(ZZZ)Z
      45: ireturn

  public boolean startNewList(com.vladsch.flexmark.ast.ListBlock, com.vladsch.flexmark.ast.ListBlock);
    Code:
       0: aload_1
       1: instanceof    #103                // class com/vladsch/flexmark/ast/OrderedList
       4: istore_3
       5: aload_2
       6: instanceof    #103                // class com/vladsch/flexmark/ast/OrderedList
       9: istore        4
      11: iload_3
      12: iload         4
      14: if_icmpne     81
      17: iload_3
      18: ifeq          51
      21: aload_0
      22: invokevirtual #68                 // Method isDelimiterMismatchToNewList:()Z
      25: ifeq          49
      28: aload_1
      29: checkcast     #103                // class com/vladsch/flexmark/ast/OrderedList
      32: invokevirtual #107                // Method com/vladsch/flexmark/ast/OrderedList.getDelimiter:()C
      35: aload_2
      36: checkcast     #103                // class com/vladsch/flexmark/ast/OrderedList
      39: invokevirtual #107                // Method com/vladsch/flexmark/ast/OrderedList.getDelimiter:()C
      42: if_icmpeq     49
      45: iconst_1
      46: goto          50
      49: iconst_0
      50: ireturn
      51: aload_0
      52: invokevirtual #68                 // Method isDelimiterMismatchToNewList:()Z
      55: ifeq          79
      58: aload_1
      59: checkcast     #108                // class com/vladsch/flexmark/ast/BulletList
      62: invokevirtual #109                // Method com/vladsch/flexmark/ast/BulletList.getOpeningMarker:()C
      65: aload_2
      66: checkcast     #108                // class com/vladsch/flexmark/ast/BulletList
      69: invokevirtual #109                // Method com/vladsch/flexmark/ast/BulletList.getOpeningMarker:()C
      72: if_icmpeq     79
      75: iconst_1
      76: goto          80
      79: iconst_0
      80: ireturn
      81: aload_0
      82: invokevirtual #71                 // Method isItemTypeMismatchToNewList:()Z
      85: ireturn

  public boolean startSubList(com.vladsch.flexmark.ast.ListBlock, com.vladsch.flexmark.ast.ListBlock);
    Code:
       0: aload_1
       1: instanceof    #103                // class com/vladsch/flexmark/ast/OrderedList
       4: istore_3
       5: aload_2
       6: instanceof    #103                // class com/vladsch/flexmark/ast/OrderedList
       9: istore        4
      11: iload_3
      12: iload         4
      14: if_icmpeq     28
      17: aload_0
      18: invokevirtual #72                 // Method isItemTypeMismatchToSubList:()Z
      21: ifeq          28
      24: iconst_1
      25: goto          29
      28: iconst_0
      29: ireturn

  public com.vladsch.flexmark.parser.MutableListOptions getMutable();
    Code:
       0: new           #110                // class com/vladsch/flexmark/parser/MutableListOptions
       3: dup
       4: aload_0
       5: invokespecial #111                // Method com/vladsch/flexmark/parser/MutableListOptions."<init>":(Lcom/vladsch/flexmark/parser/ListOptions;)V
       8: areturn

  public com.vladsch.flexmark.util.options.MutableDataHolder setIn(com.vladsch.flexmark.util.options.MutableDataHolder);
    Code:
       0: aload_1
       1: getstatic     #4                  // Field com/vladsch/flexmark/parser/Parser.PARSER_EMULATION_PROFILE:Lcom/vladsch/flexmark/util/options/DataKey;
       4: aload_0
       5: invokevirtual #63                 // Method getParserEmulationProfile:()Lcom/vladsch/flexmark/parser/ParserEmulationProfile;
       8: invokeinterface #112,  3          // InterfaceMethod com/vladsch/flexmark/util/options/MutableDataHolder.set:(Lcom/vladsch/flexmark/util/options/DataKey;Ljava/lang/Object;)Lcom/vladsch/flexmark/util/options/MutableDataHolder;
      13: pop
      14: aload_0
      15: invokevirtual #64                 // Method getItemInterrupt:()Lcom/vladsch/flexmark/parser/ListOptions$ItemInterrupt;
      18: aload_1
      19: invokevirtual #113                // Method com/vladsch/flexmark/parser/ListOptions$ItemInterrupt.setIn:(Lcom/vladsch/flexmark/util/options/MutableDataHolder;)V
      22: aload_1
      23: getstatic     #11                 // Field com/vladsch/flexmark/parser/Parser.LISTS_AUTO_LOOSE:Lcom/vladsch/flexmark/util/options/DataKey;
      26: aload_0
      27: getfield      #14                 // Field autoLoose:Z
      30: invokestatic  #114                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      33: invokeinterface #112,  3          // InterfaceMethod com/vladsch/flexmark/util/options/MutableDataHolder.set:(Lcom/vladsch/flexmark/util/options/DataKey;Ljava/lang/Object;)Lcom/vladsch/flexmark/util/options/MutableDataHolder;
      38: pop
      39: aload_1
      40: getstatic     #15                 // Field com/vladsch/flexmark/parser/Parser.LISTS_AUTO_LOOSE_ONE_LEVEL_LISTS:Lcom/vladsch/flexmark/util/options/DataKey;
      43: aload_0
      44: getfield      #16                 // Field autoLooseOneLevelLists:Z
      47: invokestatic  #114                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      50: invokeinterface #112,  3          // InterfaceMethod com/vladsch/flexmark/util/options/MutableDataHolder.set:(Lcom/vladsch/flexmark/util/options/DataKey;Ljava/lang/Object;)Lcom/vladsch/flexmark/util/options/MutableDataHolder;
      55: pop
      56: aload_1
      57: getstatic     #17                 // Field com/vladsch/flexmark/parser/Parser.LISTS_DELIMITER_MISMATCH_TO_NEW_LIST:Lcom/vladsch/flexmark/util/options/DataKey;
      60: aload_0
      61: getfield      #18                 // Field delimiterMismatchToNewList:Z
      64: invokestatic  #114                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      67: invokeinterface #112,  3          // InterfaceMethod com/vladsch/flexmark/util/options/MutableDataHolder.set:(Lcom/vladsch/flexmark/util/options/DataKey;Ljava/lang/Object;)Lcom/vladsch/flexmark/util/options/MutableDataHolder;
      72: pop
      73: aload_1
      74: getstatic     #19                 // Field com/vladsch/flexmark/parser/Parser.LISTS_END_ON_DOUBLE_BLANK:Lcom/vladsch/flexmark/util/options/DataKey;
      77: aload_0
      78: getfield      #20                 // Field endOnDoubleBlank:Z
      81: invokestatic  #114                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      84: invokeinterface #112,  3          // InterfaceMethod com/vladsch/flexmark/util/options/MutableDataHolder.set:(Lcom/vladsch/flexmark/util/options/DataKey;Ljava/lang/Object;)Lcom/vladsch/flexmark/util/options/MutableDataHolder;
      89: pop
      90: aload_1
      91: getstatic     #21                 // Field com/vladsch/flexmark/parser/Parser.LISTS_ITEM_MARKER_SPACE:Lcom/vladsch/flexmark/util/options/DataKey;
      94: aload_0
      95: getfield      #22                 // Field itemMarkerSpace:Z
      98: invokestatic  #114                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     101: invokeinterface #112,  3          // InterfaceMethod com/vladsch/flexmark/util/options/MutableDataHolder.set:(Lcom/vladsch/flexmark/util/options/DataKey;Ljava/lang/Object;)Lcom/vladsch/flexmark/util/options/MutableDataHolder;
     106: pop
     107: aload_1
     108: getstatic     #23                 // Field com/vladsch/flexmark/parser/Parser.LISTS_ITEM_TYPE_MISMATCH_TO_NEW_LIST:Lcom/vladsch/flexmark/util/options/DataKey;
     111: aload_0
     112: getfield      #24                 // Field itemTypeMismatchToNewList:Z
     115: invokestatic  #114                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     118: invokeinterface #112,  3          // InterfaceMethod com/vladsch/flexmark/util/options/MutableDataHolder.set:(Lcom/vladsch/flexmark/util/options/DataKey;Ljava/lang/Object;)Lcom/vladsch/flexmark/util/options/MutableDataHolder;
     123: pop
     124: aload_1
     125: getstatic     #25                 // Field com/vladsch/flexmark/parser/Parser.LISTS_ITEM_TYPE_MISMATCH_TO_SUB_LIST:Lcom/vladsch/flexmark/util/options/DataKey;
     128: aload_0
     129: getfield      #26                 // Field itemTypeMismatchToSubList:Z
     132: invokestatic  #114                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     135: invokeinterface #112,  3          // InterfaceMethod com/vladsch/flexmark/util/options/MutableDataHolder.set:(Lcom/vladsch/flexmark/util/options/DataKey;Ljava/lang/Object;)Lcom/vladsch/flexmark/util/options/MutableDataHolder;
     140: pop
     141: aload_1
     142: getstatic     #27                 // Field com/vladsch/flexmark/parser/Parser.LISTS_LOOSE_WHEN_PREV_HAS_TRAILING_BLANK_LINE:Lcom/vladsch/flexmark/util/options/DataKey;
     145: aload_0
     146: getfield      #28                 // Field looseWhenPrevHasTrailingBlankLine:Z
     149: invokestatic  #114                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     152: invokeinterface #112,  3          // InterfaceMethod com/vladsch/flexmark/util/options/MutableDataHolder.set:(Lcom/vladsch/flexmark/util/options/DataKey;Ljava/lang/Object;)Lcom/vladsch/flexmark/util/options/MutableDataHolder;
     157: pop
     158: aload_1
     159: getstatic     #29                 // Field com/vladsch/flexmark/parser/Parser.LISTS_LOOSE_WHEN_LAST_ITEM_PREV_HAS_TRAILING_BLANK_LINE:Lcom/vladsch/flexmark/util/options/DataKey;
     162: aload_0
     163: getfield      #30                 // Field looseWhenLastItemPrevHasTrailingBlankLine:Z
     166: invokestatic  #114                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     169: invokeinterface #112,  3          // InterfaceMethod com/vladsch/flexmark/util/options/MutableDataHolder.set:(Lcom/vladsch/flexmark/util/options/DataKey;Ljava/lang/Object;)Lcom/vladsch/flexmark/util/options/MutableDataHolder;
     174: pop
     175: aload_1
     176: getstatic     #31                 // Field com/vladsch/flexmark/parser/Parser.LISTS_LOOSE_WHEN_HAS_NON_LIST_CHILDREN:Lcom/vladsch/flexmark/util/options/DataKey;
     179: aload_0
     180: getfield      #32                 // Field looseWhenHasNonListChildren:Z
     183: invokestatic  #114                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     186: invokeinterface #112,  3          // InterfaceMethod com/vladsch/flexmark/util/options/MutableDataHolder.set:(Lcom/vladsch/flexmark/util/options/DataKey;Ljava/lang/Object;)Lcom/vladsch/flexmark/util/options/MutableDataHolder;
     191: pop
     192: aload_1
     193: getstatic     #33                 // Field com/vladsch/flexmark/parser/Parser.LISTS_LOOSE_WHEN_BLANK_LINE_FOLLOWS_ITEM_PARAGRAPH:Lcom/vladsch/flexmark/util/options/DataKey;
     196: aload_0
     197: getfield      #34                 // Field looseWhenBlankLineFollowsItemParagraph:Z
     200: invokestatic  #114                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     203: invokeinterface #112,  3          // InterfaceMethod com/vladsch/flexmark/util/options/MutableDataHolder.set:(Lcom/vladsch/flexmark/util/options/DataKey;Ljava/lang/Object;)Lcom/vladsch/flexmark/util/options/MutableDataHolder;
     208: pop
     209: aload_1
     210: getstatic     #35                 // Field com/vladsch/flexmark/parser/Parser.LISTS_LOOSE_WHEN_HAS_LOOSE_SUB_ITEM:Lcom/vladsch/flexmark/util/options/DataKey;
     213: aload_0
     214: getfield      #36                 // Field looseWhenHasLooseSubItem:Z
     217: invokestatic  #114                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     220: invokeinterface #112,  3          // InterfaceMethod com/vladsch/flexmark/util/options/MutableDataHolder.set:(Lcom/vladsch/flexmark/util/options/DataKey;Ljava/lang/Object;)Lcom/vladsch/flexmark/util/options/MutableDataHolder;
     225: pop
     226: aload_1
     227: getstatic     #37                 // Field com/vladsch/flexmark/parser/Parser.LISTS_LOOSE_WHEN_HAS_TRAILING_BLANK_LINE:Lcom/vladsch/flexmark/util/options/DataKey;
     230: aload_0
     231: getfield      #38                 // Field looseWhenHasTrailingBlankLine:Z
     234: invokestatic  #114                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     237: invokeinterface #112,  3          // InterfaceMethod com/vladsch/flexmark/util/options/MutableDataHolder.set:(Lcom/vladsch/flexmark/util/options/DataKey;Ljava/lang/Object;)Lcom/vladsch/flexmark/util/options/MutableDataHolder;
     242: pop
     243: aload_1
     244: getstatic     #39                 // Field com/vladsch/flexmark/parser/Parser.LISTS_LOOSE_WHEN_CONTAINS_BLANK_LINE:Lcom/vladsch/flexmark/util/options/DataKey;
     247: aload_0
     248: getfield      #40                 // Field looseWhenContainsBlankLine:Z
     251: invokestatic  #114                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     254: invokeinterface #112,  3          // InterfaceMethod com/vladsch/flexmark/util/options/MutableDataHolder.set:(Lcom/vladsch/flexmark/util/options/DataKey;Ljava/lang/Object;)Lcom/vladsch/flexmark/util/options/MutableDataHolder;
     259: pop
     260: aload_1
     261: getstatic     #41                 // Field com/vladsch/flexmark/parser/Parser.LISTS_NUMBERED_ITEM_MARKER_SUFFIXED:Lcom/vladsch/flexmark/util/options/DataKey;
     264: aload_0
     265: getfield      #42                 // Field numberedItemMarkerSuffixed:Z
     268: invokestatic  #114                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     271: invokeinterface #112,  3          // InterfaceMethod com/vladsch/flexmark/util/options/MutableDataHolder.set:(Lcom/vladsch/flexmark/util/options/DataKey;Ljava/lang/Object;)Lcom/vladsch/flexmark/util/options/MutableDataHolder;
     276: pop
     277: aload_1
     278: getstatic     #43                 // Field com/vladsch/flexmark/parser/Parser.LISTS_ORDERED_ITEM_DOT_ONLY:Lcom/vladsch/flexmark/util/options/DataKey;
     281: aload_0
     282: getfield      #44                 // Field orderedItemDotOnly:Z
     285: invokestatic  #114                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     288: invokeinterface #112,  3          // InterfaceMethod com/vladsch/flexmark/util/options/MutableDataHolder.set:(Lcom/vladsch/flexmark/util/options/DataKey;Ljava/lang/Object;)Lcom/vladsch/flexmark/util/options/MutableDataHolder;
     293: pop
     294: aload_1
     295: getstatic     #45                 // Field com/vladsch/flexmark/parser/Parser.LISTS_ORDERED_LIST_MANUAL_START:Lcom/vladsch/flexmark/util/options/DataKey;
     298: aload_0
     299: getfield      #46                 // Field orderedListManualStart:Z
     302: invokestatic  #114                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     305: invokeinterface #112,  3          // InterfaceMethod com/vladsch/flexmark/util/options/MutableDataHolder.set:(Lcom/vladsch/flexmark/util/options/DataKey;Ljava/lang/Object;)Lcom/vladsch/flexmark/util/options/MutableDataHolder;
     310: pop
     311: aload_1
     312: getstatic     #52                 // Field com/vladsch/flexmark/parser/Parser.LISTS_CODE_INDENT:Lcom/vladsch/flexmark/util/options/DataKey;
     315: aload_0
     316: getfield      #55                 // Field codeIndent:I
     319: invokestatic  #115                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     322: invokeinterface #112,  3          // InterfaceMethod com/vladsch/flexmark/util/options/MutableDataHolder.set:(Lcom/vladsch/flexmark/util/options/DataKey;Ljava/lang/Object;)Lcom/vladsch/flexmark/util/options/MutableDataHolder;
     327: pop
     328: aload_1
     329: getstatic     #56                 // Field com/vladsch/flexmark/parser/Parser.LISTS_ITEM_INDENT:Lcom/vladsch/flexmark/util/options/DataKey;
     332: aload_0
     333: getfield      #57                 // Field itemIndent:I
     336: invokestatic  #115                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     339: invokeinterface #112,  3          // InterfaceMethod com/vladsch/flexmark/util/options/MutableDataHolder.set:(Lcom/vladsch/flexmark/util/options/DataKey;Ljava/lang/Object;)Lcom/vladsch/flexmark/util/options/MutableDataHolder;
     344: pop
     345: aload_1
     346: getstatic     #58                 // Field com/vladsch/flexmark/parser/Parser.LISTS_NEW_ITEM_CODE_INDENT:Lcom/vladsch/flexmark/util/options/DataKey;
     349: aload_0
     350: getfield      #59                 // Field newItemCodeIndent:I
     353: invokestatic  #115                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     356: invokeinterface #112,  3          // InterfaceMethod com/vladsch/flexmark/util/options/MutableDataHolder.set:(Lcom/vladsch/flexmark/util/options/DataKey;Ljava/lang/Object;)Lcom/vladsch/flexmark/util/options/MutableDataHolder;
     361: pop
     362: aload_1
     363: getstatic     #60                 // Field com/vladsch/flexmark/parser/Parser.LISTS_ITEM_MARKER_SUFFIXES:Lcom/vladsch/flexmark/util/options/DataKey;
     366: aload_0
     367: getfield      #62                 // Field itemMarkerSuffixes:[Ljava/lang/String;
     370: invokeinterface #112,  3          // InterfaceMethod com/vladsch/flexmark/util/options/MutableDataHolder.set:(Lcom/vladsch/flexmark/util/options/DataKey;Ljava/lang/Object;)Lcom/vladsch/flexmark/util/options/MutableDataHolder;
     375: pop
     376: aload_1
     377: getstatic     #47                 // Field com/vladsch/flexmark/parser/Parser.LISTS_ITEM_CONTENT_AFTER_SUFFIX:Lcom/vladsch/flexmark/util/options/DataKey;
     380: aload_0
     381: getfield      #48                 // Field itemContentAfterSuffix:Z
     384: invokestatic  #114                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     387: invokeinterface #112,  3          // InterfaceMethod com/vladsch/flexmark/util/options/MutableDataHolder.set:(Lcom/vladsch/flexmark/util/options/DataKey;Ljava/lang/Object;)Lcom/vladsch/flexmark/util/options/MutableDataHolder;
     392: pop
     393: aload_1
     394: getstatic     #49                 // Field com/vladsch/flexmark/parser/Parser.LISTS_ITEM_PREFIX_CHARS:Lcom/vladsch/flexmark/util/options/DataKey;
     397: aload_0
     398: getfield      #51                 // Field itemPrefixChars:Ljava/lang/String;
     401: invokeinterface #112,  3          // InterfaceMethod com/vladsch/flexmark/util/options/MutableDataHolder.set:(Lcom/vladsch/flexmark/util/options/DataKey;Ljava/lang/Object;)Lcom/vladsch/flexmark/util/options/MutableDataHolder;
     406: pop
     407: aload_1
     408: areturn

  public static void addItemMarkerSuffixes(com.vladsch.flexmark.util.options.MutableDataHolder, java.lang.String...);
    Code:
       0: getstatic     #60                 // Field com/vladsch/flexmark/parser/Parser.LISTS_ITEM_MARKER_SUFFIXES:Lcom/vladsch/flexmark/util/options/DataKey;
       3: aload_0
       4: invokevirtual #5                  // Method com/vladsch/flexmark/util/options/DataKey.getFrom:(Lcom/vladsch/flexmark/util/options/DataHolder;)Ljava/lang/Object;
       7: checkcast     #61                 // class "[Ljava/lang/String;"
      10: astore_2
      11: aload_1
      12: arraylength
      13: istore_3
      14: aload_1
      15: arraylength
      16: istore        4
      18: aload_2
      19: astore        5
      21: aload         5
      23: arraylength
      24: istore        6
      26: iconst_0
      27: istore        7
      29: iload         7
      31: iload         6
      33: if_icmpge     104
      36: aload         5
      38: iload         7
      40: aaload
      41: astore        8
      43: iconst_0
      44: istore        9
      46: iload         9
      48: iload         4
      50: if_icmpge     91
      53: aload_1
      54: iload         9
      56: aaload
      57: astore        10
      59: aload         10
      61: ifnull        85
      64: aload         10
      66: aload         8
      68: invokevirtual #116                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      71: ifeq          85
      74: iinc          3, -1
      77: aload_1
      78: iload         9
      80: aconst_null
      81: aastore
      82: goto          91
      85: iinc          9, 1
      88: goto          46
      91: iload_3
      92: ifne          98
      95: goto          104
      98: iinc          7, 1
     101: goto          29
     104: iload_3
     105: ifle          189
     108: aload_2
     109: arraylength
     110: iload_3
     111: iadd
     112: anewarray     #50                 // class java/lang/String
     115: astore        5
     117: aload_2
     118: iconst_0
     119: aload         5
     121: iconst_0
     122: aload_2
     123: arraylength
     124: invokestatic  #117                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     127: aload_2
     128: arraylength
     129: istore        6
     131: aload_1
     132: astore        7
     134: aload         7
     136: arraylength
     137: istore        8
     139: iconst_0
     140: istore        9
     142: iload         9
     144: iload         8
     146: if_icmpge     177
     149: aload         7
     151: iload         9
     153: aaload
     154: astore        10
     156: aload         10
     158: ifnull        171
     161: aload         5
     163: iload         6
     165: iinc          6, 1
     168: aload         10
     170: aastore
     171: iinc          9, 1
     174: goto          142
     177: aload_0
     178: getstatic     #60                 // Field com/vladsch/flexmark/parser/Parser.LISTS_ITEM_MARKER_SUFFIXES:Lcom/vladsch/flexmark/util/options/DataKey;
     181: aload         5
     183: invokeinterface #112,  3          // InterfaceMethod com/vladsch/flexmark/util/options/MutableDataHolder.set:(Lcom/vladsch/flexmark/util/options/DataKey;Ljava/lang/Object;)Lcom/vladsch/flexmark/util/options/MutableDataHolder;
     188: pop
     189: return

  public com.vladsch.flexmark.parser.ParserEmulationProfile getParserEmulationProfile();
    Code:
       0: aload_0
       1: getfield      #7                  // Field myParserEmulationProfile:Lcom/vladsch/flexmark/parser/ParserEmulationProfile;
       4: areturn

  public com.vladsch.flexmark.parser.ListOptions$ItemInterrupt getItemInterrupt();
    Code:
       0: aload_0
       1: getfield      #10                 // Field itemInterrupt:Lcom/vladsch/flexmark/parser/ListOptions$ItemInterrupt;
       4: areturn

  public boolean isAutoLoose();
    Code:
       0: aload_0
       1: getfield      #14                 // Field autoLoose:Z
       4: ireturn

  public boolean isAutoLooseOneLevelLists();
    Code:
       0: aload_0
       1: getfield      #16                 // Field autoLooseOneLevelLists:Z
       4: ireturn

  public boolean isDelimiterMismatchToNewList();
    Code:
       0: aload_0
       1: getfield      #18                 // Field delimiterMismatchToNewList:Z
       4: ireturn

  public boolean isEndOnDoubleBlank();
    Code:
       0: aload_0
       1: getfield      #20                 // Field endOnDoubleBlank:Z
       4: ireturn

  public boolean isItemMarkerSpace();
    Code:
       0: aload_0
       1: getfield      #22                 // Field itemMarkerSpace:Z
       4: ireturn

  public boolean isItemTypeMismatchToNewList();
    Code:
       0: aload_0
       1: getfield      #24                 // Field itemTypeMismatchToNewList:Z
       4: ireturn

  public boolean isItemContentAfterSuffix();
    Code:
       0: aload_0
       1: getfield      #48                 // Field itemContentAfterSuffix:Z
       4: ireturn

  public java.lang.String getItemPrefixChars();
    Code:
       0: aload_0
       1: getfield      #51                 // Field itemPrefixChars:Ljava/lang/String;
       4: areturn

  public boolean isItemTypeMismatchToSubList();
    Code:
       0: aload_0
       1: getfield      #26                 // Field itemTypeMismatchToSubList:Z
       4: ireturn

  public boolean isLooseWhenPrevHasTrailingBlankLine();
    Code:
       0: aload_0
       1: getfield      #28                 // Field looseWhenPrevHasTrailingBlankLine:Z
       4: ireturn

  public boolean isLooseWhenLastItemPrevHasTrailingBlankLine();
    Code:
       0: aload_0
       1: getfield      #30                 // Field looseWhenLastItemPrevHasTrailingBlankLine:Z
       4: ireturn

  public boolean isLooseWhenHasNonListChildren();
    Code:
       0: aload_0
       1: getfield      #32                 // Field looseWhenHasNonListChildren:Z
       4: ireturn

  public boolean isLooseWhenHasLooseSubItem();
    Code:
       0: aload_0
       1: getfield      #36                 // Field looseWhenHasLooseSubItem:Z
       4: ireturn

  public boolean isLooseWhenHasTrailingBlankLine();
    Code:
       0: aload_0
       1: getfield      #38                 // Field looseWhenHasTrailingBlankLine:Z
       4: ireturn

  public boolean isLooseWhenContainsBlankLine();
    Code:
       0: aload_0
       1: getfield      #40                 // Field looseWhenContainsBlankLine:Z
       4: ireturn

  public boolean isLooseWhenBlankLineFollowsItemParagraph();
    Code:
       0: aload_0
       1: getfield      #34                 // Field looseWhenBlankLineFollowsItemParagraph:Z
       4: ireturn

  public boolean isOrderedItemDotOnly();
    Code:
       0: aload_0
       1: getfield      #44                 // Field orderedItemDotOnly:Z
       4: ireturn

  public boolean isOrderedListManualStart();
    Code:
       0: aload_0
       1: getfield      #46                 // Field orderedListManualStart:Z
       4: ireturn

  public boolean isNumberedItemMarkerSuffixed();
    Code:
       0: aload_0
       1: getfield      #42                 // Field numberedItemMarkerSuffixed:Z
       4: ireturn

  public int getCodeIndent();
    Code:
       0: aload_0
       1: getfield      #55                 // Field codeIndent:I
       4: ireturn

  public int getItemIndent();
    Code:
       0: aload_0
       1: getfield      #57                 // Field itemIndent:I
       4: ireturn

  public int getNewItemCodeIndent();
    Code:
       0: aload_0
       1: getfield      #59                 // Field newItemCodeIndent:I
       4: ireturn

  public java.lang.String[] getItemMarkerSuffixes();
    Code:
       0: aload_0
       1: getfield      #62                 // Field itemMarkerSuffixes:[Ljava/lang/String;
       4: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: instanceof    #89                 // class com/vladsch/flexmark/parser/ListOptions
      11: ifne          16
      14: iconst_0
      15: ireturn
      16: aload_1
      17: checkcast     #89                 // class com/vladsch/flexmark/parser/ListOptions
      20: astore_2
      21: aload_0
      22: getfield      #7                  // Field myParserEmulationProfile:Lcom/vladsch/flexmark/parser/ParserEmulationProfile;
      25: aload_2
      26: getfield      #7                  // Field myParserEmulationProfile:Lcom/vladsch/flexmark/parser/ParserEmulationProfile;
      29: if_acmpeq     34
      32: iconst_0
      33: ireturn
      34: aload_0
      35: getfield      #14                 // Field autoLoose:Z
      38: aload_2
      39: getfield      #14                 // Field autoLoose:Z
      42: if_icmpeq     47
      45: iconst_0
      46: ireturn
      47: aload_0
      48: getfield      #16                 // Field autoLooseOneLevelLists:Z
      51: aload_2
      52: getfield      #16                 // Field autoLooseOneLevelLists:Z
      55: if_icmpeq     60
      58: iconst_0
      59: ireturn
      60: aload_0
      61: getfield      #18                 // Field delimiterMismatchToNewList:Z
      64: aload_2
      65: getfield      #18                 // Field delimiterMismatchToNewList:Z
      68: if_icmpeq     73
      71: iconst_0
      72: ireturn
      73: aload_0
      74: getfield      #20                 // Field endOnDoubleBlank:Z
      77: aload_2
      78: getfield      #20                 // Field endOnDoubleBlank:Z
      81: if_icmpeq     86
      84: iconst_0
      85: ireturn
      86: aload_0
      87: getfield      #22                 // Field itemMarkerSpace:Z
      90: aload_2
      91: getfield      #22                 // Field itemMarkerSpace:Z
      94: if_icmpeq     99
      97: iconst_0
      98: ireturn
      99: aload_0
     100: getfield      #24                 // Field itemTypeMismatchToNewList:Z
     103: aload_2
     104: getfield      #24                 // Field itemTypeMismatchToNewList:Z
     107: if_icmpeq     112
     110: iconst_0
     111: ireturn
     112: aload_0
     113: getfield      #26                 // Field itemTypeMismatchToSubList:Z
     116: aload_2
     117: getfield      #26                 // Field itemTypeMismatchToSubList:Z
     120: if_icmpeq     125
     123: iconst_0
     124: ireturn
     125: aload_0
     126: getfield      #28                 // Field looseWhenPrevHasTrailingBlankLine:Z
     129: aload_2
     130: getfield      #28                 // Field looseWhenPrevHasTrailingBlankLine:Z
     133: if_icmpeq     138
     136: iconst_0
     137: ireturn
     138: aload_0
     139: getfield      #30                 // Field looseWhenLastItemPrevHasTrailingBlankLine:Z
     142: aload_2
     143: getfield      #30                 // Field looseWhenLastItemPrevHasTrailingBlankLine:Z
     146: if_icmpeq     151
     149: iconst_0
     150: ireturn
     151: aload_0
     152: getfield      #32                 // Field looseWhenHasNonListChildren:Z
     155: aload_2
     156: getfield      #32                 // Field looseWhenHasNonListChildren:Z
     159: if_icmpeq     164
     162: iconst_0
     163: ireturn
     164: aload_0
     165: getfield      #34                 // Field looseWhenBlankLineFollowsItemParagraph:Z
     168: aload_2
     169: getfield      #34                 // Field looseWhenBlankLineFollowsItemParagraph:Z
     172: if_icmpeq     177
     175: iconst_0
     176: ireturn
     177: aload_0
     178: getfield      #36                 // Field looseWhenHasLooseSubItem:Z
     181: aload_2
     182: getfield      #36                 // Field looseWhenHasLooseSubItem:Z
     185: if_icmpeq     190
     188: iconst_0
     189: ireturn
     190: aload_0
     191: getfield      #38                 // Field looseWhenHasTrailingBlankLine:Z
     194: aload_2
     195: getfield      #38                 // Field looseWhenHasTrailingBlankLine:Z
     198: if_icmpeq     203
     201: iconst_0
     202: ireturn
     203: aload_0
     204: getfield      #40                 // Field looseWhenContainsBlankLine:Z
     207: aload_2
     208: getfield      #40                 // Field looseWhenContainsBlankLine:Z
     211: if_icmpeq     216
     214: iconst_0
     215: ireturn
     216: aload_0
     217: getfield      #42                 // Field numberedItemMarkerSuffixed:Z
     220: aload_2
     221: getfield      #42                 // Field numberedItemMarkerSuffixed:Z
     224: if_icmpeq     229
     227: iconst_0
     228: ireturn
     229: aload_0
     230: getfield      #44                 // Field orderedItemDotOnly:Z
     233: aload_2
     234: getfield      #44                 // Field orderedItemDotOnly:Z
     237: if_icmpeq     242
     240: iconst_0
     241: ireturn
     242: aload_0
     243: getfield      #46                 // Field orderedListManualStart:Z
     246: aload_2
     247: getfield      #46                 // Field orderedListManualStart:Z
     250: if_icmpeq     255
     253: iconst_0
     254: ireturn
     255: aload_0
     256: getfield      #55                 // Field codeIndent:I
     259: aload_2
     260: getfield      #55                 // Field codeIndent:I
     263: if_icmpeq     268
     266: iconst_0
     267: ireturn
     268: aload_0
     269: getfield      #57                 // Field itemIndent:I
     272: aload_2
     273: getfield      #57                 // Field itemIndent:I
     276: if_icmpeq     281
     279: iconst_0
     280: ireturn
     281: aload_0
     282: getfield      #59                 // Field newItemCodeIndent:I
     285: aload_2
     286: getfield      #59                 // Field newItemCodeIndent:I
     289: if_icmpeq     294
     292: iconst_0
     293: ireturn
     294: aload_0
     295: getfield      #62                 // Field itemMarkerSuffixes:[Ljava/lang/String;
     298: aload_2
     299: getfield      #62                 // Field itemMarkerSuffixes:[Ljava/lang/String;
     302: if_acmpeq     307
     305: iconst_0
     306: ireturn
     307: aload_0
     308: getfield      #48                 // Field itemContentAfterSuffix:Z
     311: aload_2
     312: getfield      #48                 // Field itemContentAfterSuffix:Z
     315: if_icmpeq     320
     318: iconst_0
     319: ireturn
     320: aload_0
     321: getfield      #51                 // Field itemPrefixChars:Ljava/lang/String;
     324: aload_2
     325: getfield      #51                 // Field itemPrefixChars:Ljava/lang/String;
     328: if_acmpeq     333
     331: iconst_0
     332: ireturn
     333: aload_0
     334: getfield      #10                 // Field itemInterrupt:Lcom/vladsch/flexmark/parser/ListOptions$ItemInterrupt;
     337: aload_2
     338: getfield      #10                 // Field itemInterrupt:Lcom/vladsch/flexmark/parser/ListOptions$ItemInterrupt;
     341: invokevirtual #118                // Method com/vladsch/flexmark/parser/ListOptions$ItemInterrupt.equals:(Ljava/lang/Object;)Z
     344: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #7                  // Field myParserEmulationProfile:Lcom/vladsch/flexmark/parser/ParserEmulationProfile;
       4: invokevirtual #119                // Method com/vladsch/flexmark/parser/ParserEmulationProfile.hashCode:()I
       7: istore_1
       8: bipush        31
      10: iload_1
      11: imul
      12: aload_0
      13: getfield      #10                 // Field itemInterrupt:Lcom/vladsch/flexmark/parser/ListOptions$ItemInterrupt;
      16: invokevirtual #120                // Method com/vladsch/flexmark/parser/ListOptions$ItemInterrupt.hashCode:()I
      19: iadd
      20: istore_1
      21: bipush        31
      23: iload_1
      24: imul
      25: aload_0
      26: getfield      #14                 // Field autoLoose:Z
      29: ifeq          36
      32: iconst_1
      33: goto          37
      36: iconst_0
      37: iadd
      38: istore_1
      39: bipush        31
      41: iload_1
      42: imul
      43: aload_0
      44: getfield      #16                 // Field autoLooseOneLevelLists:Z
      47: ifeq          54
      50: iconst_1
      51: goto          55
      54: iconst_0
      55: iadd
      56: istore_1
      57: bipush        31
      59: iload_1
      60: imul
      61: aload_0
      62: getfield      #18                 // Field delimiterMismatchToNewList:Z
      65: ifeq          72
      68: iconst_1
      69: goto          73
      72: iconst_0
      73: iadd
      74: istore_1
      75: bipush        31
      77: iload_1
      78: imul
      79: aload_0
      80: getfield      #20                 // Field endOnDoubleBlank:Z
      83: ifeq          90
      86: iconst_1
      87: goto          91
      90: iconst_0
      91: iadd
      92: istore_1
      93: bipush        31
      95: iload_1
      96: imul
      97: aload_0
      98: getfield      #22                 // Field itemMarkerSpace:Z
     101: ifeq          108
     104: iconst_1
     105: goto          109
     108: iconst_0
     109: iadd
     110: istore_1
     111: bipush        31
     113: iload_1
     114: imul
     115: aload_0
     116: getfield      #24                 // Field itemTypeMismatchToNewList:Z
     119: ifeq          126
     122: iconst_1
     123: goto          127
     126: iconst_0
     127: iadd
     128: istore_1
     129: bipush        31
     131: iload_1
     132: imul
     133: aload_0
     134: getfield      #26                 // Field itemTypeMismatchToSubList:Z
     137: ifeq          144
     140: iconst_1
     141: goto          145
     144: iconst_0
     145: iadd
     146: istore_1
     147: bipush        31
     149: iload_1
     150: imul
     151: aload_0
     152: getfield      #28                 // Field looseWhenPrevHasTrailingBlankLine:Z
     155: ifeq          162
     158: iconst_1
     159: goto          163
     162: iconst_0
     163: iadd
     164: istore_1
     165: bipush        31
     167: iload_1
     168: imul
     169: aload_0
     170: getfield      #30                 // Field looseWhenLastItemPrevHasTrailingBlankLine:Z
     173: ifeq          180
     176: iconst_1
     177: goto          181
     180: iconst_0
     181: iadd
     182: istore_1
     183: bipush        31
     185: iload_1
     186: imul
     187: aload_0
     188: getfield      #32                 // Field looseWhenHasNonListChildren:Z
     191: ifeq          198
     194: iconst_1
     195: goto          199
     198: iconst_0
     199: iadd
     200: istore_1
     201: bipush        31
     203: iload_1
     204: imul
     205: aload_0
     206: getfield      #34                 // Field looseWhenBlankLineFollowsItemParagraph:Z
     209: ifeq          216
     212: iconst_1
     213: goto          217
     216: iconst_0
     217: iadd
     218: istore_1
     219: bipush        31
     221: iload_1
     222: imul
     223: aload_0
     224: getfield      #36                 // Field looseWhenHasLooseSubItem:Z
     227: ifeq          234
     230: iconst_1
     231: goto          235
     234: iconst_0
     235: iadd
     236: istore_1
     237: bipush        31
     239: iload_1
     240: imul
     241: aload_0
     242: getfield      #38                 // Field looseWhenHasTrailingBlankLine:Z
     245: ifeq          252
     248: iconst_1
     249: goto          253
     252: iconst_0
     253: iadd
     254: istore_1
     255: bipush        31
     257: iload_1
     258: imul
     259: aload_0
     260: getfield      #40                 // Field looseWhenContainsBlankLine:Z
     263: ifeq          270
     266: iconst_1
     267: goto          271
     270: iconst_0
     271: iadd
     272: istore_1
     273: bipush        31
     275: iload_1
     276: imul
     277: aload_0
     278: getfield      #42                 // Field numberedItemMarkerSuffixed:Z
     281: ifeq          288
     284: iconst_1
     285: goto          289
     288: iconst_0
     289: iadd
     290: istore_1
     291: bipush        31
     293: iload_1
     294: imul
     295: aload_0
     296: getfield      #44                 // Field orderedItemDotOnly:Z
     299: ifeq          306
     302: iconst_1
     303: goto          307
     306: iconst_0
     307: iadd
     308: istore_1
     309: bipush        31
     311: iload_1
     312: imul
     313: aload_0
     314: getfield      #46                 // Field orderedListManualStart:Z
     317: ifeq          324
     320: iconst_1
     321: goto          325
     324: iconst_0
     325: iadd
     326: istore_1
     327: bipush        31
     329: iload_1
     330: imul
     331: aload_0
     332: getfield      #48                 // Field itemContentAfterSuffix:Z
     335: ifeq          342
     338: iconst_1
     339: goto          343
     342: iconst_0
     343: iadd
     344: istore_1
     345: bipush        31
     347: iload_1
     348: imul
     349: aload_0
     350: getfield      #51                 // Field itemPrefixChars:Ljava/lang/String;
     353: invokevirtual #121                // Method java/lang/String.hashCode:()I
     356: iadd
     357: istore_1
     358: bipush        31
     360: iload_1
     361: imul
     362: aload_0
     363: getfield      #55                 // Field codeIndent:I
     366: iadd
     367: istore_1
     368: bipush        31
     370: iload_1
     371: imul
     372: aload_0
     373: getfield      #57                 // Field itemIndent:I
     376: iadd
     377: istore_1
     378: bipush        31
     380: iload_1
     381: imul
     382: aload_0
     383: getfield      #59                 // Field newItemCodeIndent:I
     386: iadd
     387: istore_1
     388: bipush        31
     390: iload_1
     391: imul
     392: aload_0
     393: getfield      #62                 // Field itemMarkerSuffixes:[Ljava/lang/String;
     396: invokestatic  #122                // Method java/util/Arrays.hashCode:([Ljava/lang/Object;)I
     399: iadd
     400: istore_1
     401: iload_1
     402: ireturn
}
