Compiled from "InlineParser.java"
public interface com.vladsch.flexmark.parser.InlineParser {
  public abstract void initializeDocument(com.vladsch.flexmark.ast.util.Parsing, com.vladsch.flexmark.ast.Document);

  public abstract void finalizeDocument(com.vladsch.flexmark.ast.Document);

  public abstract void parse(com.vladsch.flexmark.util.sequence.BasedSequence, com.vladsch.flexmark.ast.Node);

  public abstract com.vladsch.flexmark.util.sequence.BasedSequence getInput();

  public abstract int getIndex();

  public abstract void setIndex(int);

  public abstract com.vladsch.flexmark.internal.Delimiter getLastDelimiter();

  public abstract com.vladsch.flexmark.internal.Bracket getLastBracket();

  public abstract com.vladsch.flexmark.ast.Document getDocument();

  public abstract com.vladsch.flexmark.parser.InlineParserOptions getOptions();

  public abstract com.vladsch.flexmark.ast.util.Parsing getParsing();

  public abstract com.vladsch.flexmark.ast.Node getBlock();

  public abstract java.util.List<com.vladsch.flexmark.ast.Node> parseCustom(com.vladsch.flexmark.util.sequence.BasedSequence, com.vladsch.flexmark.ast.Node, java.util.BitSet, java.util.Map<java.lang.Character, com.vladsch.flexmark.parser.block.CharacterNodeFactory>);

  public abstract void mergeTextNodes(com.vladsch.flexmark.ast.Node, com.vladsch.flexmark.ast.Node);

  public abstract void mergeIfNeeded(com.vladsch.flexmark.ast.Text, com.vladsch.flexmark.ast.Text);

  public abstract void moveNodes(com.vladsch.flexmark.ast.Node, com.vladsch.flexmark.ast.Node);

  public abstract void appendText(com.vladsch.flexmark.util.sequence.BasedSequence, int, int);

  public abstract void appendNode(com.vladsch.flexmark.ast.Node);

  public abstract com.vladsch.flexmark.ast.Text appendSeparateText(com.vladsch.flexmark.util.sequence.BasedSequence);

  public abstract void flushTextNode();

  public abstract com.vladsch.flexmark.util.sequence.BasedSequence match(java.util.regex.Pattern);

  public abstract com.vladsch.flexmark.util.sequence.BasedSequence[] matchWithGroups(java.util.regex.Pattern);

  public abstract java.util.regex.Matcher matcher(java.util.regex.Pattern);

  public abstract char peek();

  public abstract char peek(int);

  public abstract boolean spnl();

  public abstract boolean nonIndentSp();

  public abstract boolean sp();

  public abstract boolean spnlUrl();

  public abstract com.vladsch.flexmark.util.sequence.BasedSequence toEOL();

  public abstract boolean parseNewline();

  public abstract com.vladsch.flexmark.util.sequence.BasedSequence parseLinkDestination();

  public abstract com.vladsch.flexmark.util.sequence.BasedSequence parseLinkTitle();

  public abstract int parseLinkLabel();

  public abstract boolean parseAutolink();

  public abstract boolean parseHtmlInline();

  public abstract boolean parseEntity();

  public abstract void processDelimiters(com.vladsch.flexmark.internal.Delimiter);

  public abstract void removeDelimitersBetween(com.vladsch.flexmark.internal.Delimiter, com.vladsch.flexmark.internal.Delimiter);

  public abstract void removeDelimiterAndNode(com.vladsch.flexmark.internal.Delimiter);

  public abstract void removeDelimiterKeepNode(com.vladsch.flexmark.internal.Delimiter);

  public abstract void removeDelimiter(com.vladsch.flexmark.internal.Delimiter);
}
