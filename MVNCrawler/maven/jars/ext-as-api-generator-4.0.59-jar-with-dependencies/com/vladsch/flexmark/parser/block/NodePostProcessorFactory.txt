Compiled from "NodePostProcessorFactory.java"
public abstract class com.vladsch.flexmark.parser.block.NodePostProcessorFactory implements com.vladsch.flexmark.parser.PostProcessorFactory {
  private final java.util.HashMap<java.lang.Class<?>, java.util.Set<java.lang.Class<?>>> NODE_MAP;

  public com.vladsch.flexmark.parser.block.NodePostProcessorFactory(boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/HashMap
       8: dup
       9: invokespecial #3                  // Method java/util/HashMap."<init>":()V
      12: putfield      #4                  // Field NODE_MAP:Ljava/util/HashMap;
      15: return

  public java.util.Set<java.lang.Class<? extends com.vladsch.flexmark.parser.PostProcessorFactory>> getAfterDependents();
    Code:
       0: aconst_null
       1: areturn

  public java.util.Set<java.lang.Class<? extends com.vladsch.flexmark.parser.PostProcessorFactory>> getBeforeDependents();
    Code:
       0: aconst_null
       1: areturn

  public final boolean affectsGlobalScope();
    Code:
       0: iconst_0
       1: ireturn

  protected final void addNodeWithExclusions(java.lang.Class<? extends com.vladsch.flexmark.ast.Node>, java.lang.Class<?>...);
    Code:
       0: aload_2
       1: arraylength
       2: ifle          28
       5: aload_0
       6: getfield      #4                  // Field NODE_MAP:Ljava/util/HashMap;
       9: aload_1
      10: new           #5                  // class java/util/HashSet
      13: dup
      14: aload_2
      15: invokestatic  #6                  // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      18: invokespecial #7                  // Method java/util/HashSet."<init>":(Ljava/util/Collection;)V
      21: invokevirtual #8                  // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      24: pop
      25: goto          40
      28: aload_0
      29: iconst_1
      30: anewarray     #9                  // class java/lang/Class
      33: dup
      34: iconst_0
      35: aload_1
      36: aastore
      37: invokevirtual #10                 // Method addNodes:([Ljava/lang/Class;)V
      40: return

  protected final void addNodes(java.lang.Class<?>...);
    Code:
       0: aload_1
       1: astore_2
       2: aload_2
       3: arraylength
       4: istore_3
       5: iconst_0
       6: istore        4
       8: iload         4
      10: iload_3
      11: if_icmpge     39
      14: aload_2
      15: iload         4
      17: aaload
      18: astore        5
      20: aload_0
      21: getfield      #4                  // Field NODE_MAP:Ljava/util/HashMap;
      24: aload         5
      26: getstatic     #11                 // Field java/util/Collections.EMPTY_SET:Ljava/util/Set;
      29: invokevirtual #8                  // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      32: pop
      33: iinc          4, 1
      36: goto          8
      39: return

  public final java.util.Map<java.lang.Class<?>, java.util.Set<java.lang.Class<?>>> getNodeTypes();
    Code:
       0: aload_0
       1: getfield      #4                  // Field NODE_MAP:Ljava/util/HashMap;
       4: areturn

  public abstract com.vladsch.flexmark.parser.block.NodePostProcessor create(com.vladsch.flexmark.ast.Document);

  public com.vladsch.flexmark.parser.PostProcessor create(com.vladsch.flexmark.ast.Document);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #12                 // Method create:(Lcom/vladsch/flexmark/ast/Document;)Lcom/vladsch/flexmark/parser/block/NodePostProcessor;
       5: areturn

  public java.lang.Object create(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #13                 // class com/vladsch/flexmark/ast/Document
       5: invokevirtual #12                 // Method create:(Lcom/vladsch/flexmark/ast/Document;)Lcom/vladsch/flexmark/parser/block/NodePostProcessor;
       8: areturn
}
