Compiled from "NodeIterator.java"
public class com.vladsch.flexmark.ast.NodeIterator implements com.vladsch.flexmark.util.collection.iteration.ReversiblePeekingIterator<com.vladsch.flexmark.ast.Node> {
  final com.vladsch.flexmark.ast.Node firstNode;

  final com.vladsch.flexmark.ast.Node lastNode;

  final boolean reversed;

  com.vladsch.flexmark.ast.Node node;

  com.vladsch.flexmark.ast.Node result;

  public static final com.vladsch.flexmark.util.collection.iteration.ReversiblePeekingIterator<com.vladsch.flexmark.ast.Node> EMPTY;

  public com.vladsch.flexmark.ast.NodeIterator(com.vladsch.flexmark.ast.Node);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: iconst_0
       4: invokespecial #1                  // Method "<init>":(Lcom/vladsch/flexmark/ast/Node;Lcom/vladsch/flexmark/ast/Node;Z)V
       7: return

  public com.vladsch.flexmark.ast.NodeIterator(com.vladsch.flexmark.ast.Node, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: iload_2
       4: invokespecial #1                  // Method "<init>":(Lcom/vladsch/flexmark/ast/Node;Lcom/vladsch/flexmark/ast/Node;Z)V
       7: return

  public com.vladsch.flexmark.ast.NodeIterator(com.vladsch.flexmark.ast.Node, com.vladsch.flexmark.ast.Node);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iconst_0
       4: invokespecial #1                  // Method "<init>":(Lcom/vladsch/flexmark/ast/Node;Lcom/vladsch/flexmark/ast/Node;Z)V
       7: return

  public com.vladsch.flexmark.ast.NodeIterator(com.vladsch.flexmark.ast.Node, com.vladsch.flexmark.ast.Node, boolean);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_1
       5: ifnonnull     16
       8: new           #3                  // class java/lang/NullPointerException
      11: dup
      12: invokespecial #4                  // Method java/lang/NullPointerException."<init>":()V
      15: athrow
      16: aload_0
      17: aload_1
      18: putfield      #5                  // Field firstNode:Lcom/vladsch/flexmark/ast/Node;
      21: aload_0
      22: aload_2
      23: putfield      #6                  // Field lastNode:Lcom/vladsch/flexmark/ast/Node;
      26: aload_0
      27: iload_3
      28: putfield      #7                  // Field reversed:Z
      31: aload_0
      32: iload_3
      33: ifeq          40
      36: aload_2
      37: goto          41
      40: aload_1
      41: putfield      #8                  // Field node:Lcom/vladsch/flexmark/ast/Node;
      44: return

  public boolean isReversed();
    Code:
       0: aload_0
       1: getfield      #7                  // Field reversed:Z
       4: ireturn

  public boolean hasNext();
    Code:
       0: aload_0
       1: getfield      #8                  // Field node:Lcom/vladsch/flexmark/ast/Node;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public com.vladsch.flexmark.ast.Node next();
    Code:
       0: aload_0
       1: aconst_null
       2: putfield      #9                  // Field result:Lcom/vladsch/flexmark/ast/Node;
       5: aload_0
       6: getfield      #8                  // Field node:Lcom/vladsch/flexmark/ast/Node;
       9: ifnonnull     20
      12: new           #10                 // class java/util/NoSuchElementException
      15: dup
      16: invokespecial #11                 // Method java/util/NoSuchElementException."<init>":()V
      19: athrow
      20: aload_0
      21: aload_0
      22: getfield      #8                  // Field node:Lcom/vladsch/flexmark/ast/Node;
      25: putfield      #9                  // Field result:Lcom/vladsch/flexmark/ast/Node;
      28: aload_0
      29: aload_0
      30: getfield      #7                  // Field reversed:Z
      33: ifeq          46
      36: aload_0
      37: getfield      #8                  // Field node:Lcom/vladsch/flexmark/ast/Node;
      40: invokevirtual #12                 // Method com/vladsch/flexmark/ast/Node.getPrevious:()Lcom/vladsch/flexmark/ast/Node;
      43: goto          53
      46: aload_0
      47: getfield      #8                  // Field node:Lcom/vladsch/flexmark/ast/Node;
      50: invokevirtual #13                 // Method com/vladsch/flexmark/ast/Node.getNext:()Lcom/vladsch/flexmark/ast/Node;
      53: putfield      #8                  // Field node:Lcom/vladsch/flexmark/ast/Node;
      56: aload_0
      57: getfield      #8                  // Field node:Lcom/vladsch/flexmark/ast/Node;
      60: ifnull        88
      63: aload_0
      64: getfield      #9                  // Field result:Lcom/vladsch/flexmark/ast/Node;
      67: aload_0
      68: getfield      #7                  // Field reversed:Z
      71: ifeq          81
      74: aload_0
      75: getfield      #5                  // Field firstNode:Lcom/vladsch/flexmark/ast/Node;
      78: goto          85
      81: aload_0
      82: getfield      #6                  // Field lastNode:Lcom/vladsch/flexmark/ast/Node;
      85: if_acmpne     93
      88: aload_0
      89: aconst_null
      90: putfield      #8                  // Field node:Lcom/vladsch/flexmark/ast/Node;
      93: aload_0
      94: getfield      #9                  // Field result:Lcom/vladsch/flexmark/ast/Node;
      97: areturn

  public com.vladsch.flexmark.ast.Node peek();
    Code:
       0: aload_0
       1: getfield      #8                  // Field node:Lcom/vladsch/flexmark/ast/Node;
       4: ifnull        12
       7: aload_0
       8: getfield      #8                  // Field node:Lcom/vladsch/flexmark/ast/Node;
      11: areturn
      12: aconst_null
      13: areturn

  public void remove();
    Code:
       0: aload_0
       1: getfield      #9                  // Field result:Lcom/vladsch/flexmark/ast/Node;
       4: ifnonnull     17
       7: new           #14                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #15                 // String Either next() was not called yet or the node was removed
      13: invokespecial #16                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #9                  // Field result:Lcom/vladsch/flexmark/ast/Node;
      21: invokevirtual #17                 // Method com/vladsch/flexmark/ast/Node.unlink:()V
      24: aload_0
      25: aconst_null
      26: putfield      #9                  // Field result:Lcom/vladsch/flexmark/ast/Node;
      29: return

  public void forEachRemaining(com.vladsch.flexmark.util.collection.Consumer<? super com.vladsch.flexmark.ast.Node>);
    Code:
       0: aload_1
       1: ifnonnull     12
       4: new           #3                  // class java/lang/NullPointerException
       7: dup
       8: invokespecial #4                  // Method java/lang/NullPointerException."<init>":()V
      11: athrow
      12: aload_0
      13: invokevirtual #18                 // Method hasNext:()Z
      16: ifeq          32
      19: aload_1
      20: aload_0
      21: invokevirtual #19                 // Method next:()Lcom/vladsch/flexmark/ast/Node;
      24: invokeinterface #20,  2           // InterfaceMethod com/vladsch/flexmark/util/collection/Consumer.accept:(Ljava/lang/Object;)V
      29: goto          12
      32: return

  public java.lang.Object peek();
    Code:
       0: aload_0
       1: invokevirtual #21                 // Method peek:()Lcom/vladsch/flexmark/ast/Node;
       4: areturn

  public java.lang.Object next();
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method next:()Lcom/vladsch/flexmark/ast/Node;
       4: areturn

  static {};
    Code:
       0: new           #22                 // class com/vladsch/flexmark/ast/NodeIterator$1
       3: dup
       4: invokespecial #23                 // Method com/vladsch/flexmark/ast/NodeIterator$1."<init>":()V
       7: putstatic     #24                 // Field EMPTY:Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterator;
      10: return
}
