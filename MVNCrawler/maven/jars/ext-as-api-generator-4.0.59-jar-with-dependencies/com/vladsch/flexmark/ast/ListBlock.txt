Compiled from "ListBlock.java"
public abstract class com.vladsch.flexmark.ast.ListBlock extends com.vladsch.flexmark.ast.Block implements com.vladsch.flexmark.ast.BlankLineContainer {
  private boolean tight;

  public com.vladsch.flexmark.ast.ListBlock();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/vladsch/flexmark/ast/Block."<init>":()V
       4: return

  public com.vladsch.flexmark.ast.ListBlock(com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #2                  // Method com/vladsch/flexmark/ast/Block."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
       5: return

  public com.vladsch.flexmark.ast.ListBlock(com.vladsch.flexmark.util.sequence.BasedSequence, java.util.List<com.vladsch.flexmark.util.sequence.BasedSequence>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #3                  // Method com/vladsch/flexmark/ast/Block."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;Ljava/util/List;)V
       6: return

  public com.vladsch.flexmark.ast.ListBlock(com.vladsch.flexmark.ast.BlockContent);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #4                  // Method com/vladsch/flexmark/ast/Block."<init>":(Lcom/vladsch/flexmark/ast/BlockContent;)V
       5: return

  public boolean isTight();
    Code:
       0: aload_0
       1: getfield      #5                  // Field tight:Z
       4: ireturn

  public boolean isLoose();
    Code:
       0: aload_0
       1: getfield      #5                  // Field tight:Z
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public void setTight(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #5                  // Field tight:Z
       5: return

  public void setLoose(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: ifne          9
       5: iconst_1
       6: goto          10
       9: iconst_0
      10: putfield      #5                  // Field tight:Z
      13: return

  public com.vladsch.flexmark.ast.Node getLastBlankLineChild();
    Code:
       0: aload_0
       1: invokevirtual #6                  // Method getLastChild:()Lcom/vladsch/flexmark/ast/Node;
       4: areturn

  public void getAstExtra(java.lang.StringBuilder);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #7                  // Method com/vladsch/flexmark/ast/Block.getAstExtra:(Ljava/lang/StringBuilder;)V
       5: aload_0
       6: invokevirtual #8                  // Method isTight:()Z
       9: ifeq          22
      12: aload_1
      13: ldc           #9                  // String  isTight
      15: invokevirtual #10                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      18: pop
      19: goto          29
      22: aload_1
      23: ldc           #11                 // String  isLoose
      25: invokevirtual #10                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: pop
      29: return
}
