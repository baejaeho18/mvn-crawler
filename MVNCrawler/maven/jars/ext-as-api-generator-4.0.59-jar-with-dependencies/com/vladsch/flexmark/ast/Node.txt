Compiled from "Node.java"
public abstract class com.vladsch.flexmark.ast.Node {
  public static final com.vladsch.flexmark.util.sequence.BasedSequence[] EMPTY_SEGMENTS;

  public static final java.lang.String SPLICE;

  private com.vladsch.flexmark.ast.Node parent;

  private com.vladsch.flexmark.ast.Node firstChild;

  private com.vladsch.flexmark.ast.Node lastChild;

  private com.vladsch.flexmark.ast.Node prev;

  private com.vladsch.flexmark.ast.Node next;

  private com.vladsch.flexmark.util.sequence.BasedSequence chars;

  public com.vladsch.flexmark.ast.Node();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #2                  // Field parent:Lcom/vladsch/flexmark/ast/Node;
       9: aload_0
      10: aconst_null
      11: putfield      #3                  // Field firstChild:Lcom/vladsch/flexmark/ast/Node;
      14: aload_0
      15: aconst_null
      16: putfield      #4                  // Field lastChild:Lcom/vladsch/flexmark/ast/Node;
      19: aload_0
      20: aconst_null
      21: putfield      #5                  // Field prev:Lcom/vladsch/flexmark/ast/Node;
      24: aload_0
      25: aconst_null
      26: putfield      #6                  // Field next:Lcom/vladsch/flexmark/ast/Node;
      29: aload_0
      30: getstatic     #7                  // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      33: putfield      #8                  // Field chars:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      36: return

  public com.vladsch.flexmark.ast.Node(com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #2                  // Field parent:Lcom/vladsch/flexmark/ast/Node;
       9: aload_0
      10: aconst_null
      11: putfield      #3                  // Field firstChild:Lcom/vladsch/flexmark/ast/Node;
      14: aload_0
      15: aconst_null
      16: putfield      #4                  // Field lastChild:Lcom/vladsch/flexmark/ast/Node;
      19: aload_0
      20: aconst_null
      21: putfield      #5                  // Field prev:Lcom/vladsch/flexmark/ast/Node;
      24: aload_0
      25: aconst_null
      26: putfield      #6                  // Field next:Lcom/vladsch/flexmark/ast/Node;
      29: aload_0
      30: getstatic     #7                  // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      33: putfield      #8                  // Field chars:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      36: aload_0
      37: aload_1
      38: putfield      #8                  // Field chars:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      41: return

  public com.vladsch.flexmark.ast.Node getAncestorOfType(java.lang.Class...);
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method getParent:()Lcom/vladsch/flexmark/ast/Node;
       4: astore_2
       5: aload_2
       6: ifnull        56
       9: aload_1
      10: astore_3
      11: aload_3
      12: arraylength
      13: istore        4
      15: iconst_0
      16: istore        5
      18: iload         5
      20: iload         4
      22: if_icmpge     48
      25: aload_3
      26: iload         5
      28: aaload
      29: astore        6
      31: aload         6
      33: aload_2
      34: invokevirtual #10                 // Method java/lang/Class.isInstance:(Ljava/lang/Object;)Z
      37: ifeq          42
      40: aload_2
      41: areturn
      42: iinc          5, 1
      45: goto          18
      48: aload_2
      49: invokevirtual #9                  // Method getParent:()Lcom/vladsch/flexmark/ast/Node;
      52: astore_2
      53: goto          5
      56: aconst_null
      57: areturn

  public int countAncestorsOfType(java.lang.Class...);
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method getParent:()Lcom/vladsch/flexmark/ast/Node;
       4: astore_2
       5: iconst_0
       6: istore_3
       7: aload_2
       8: ifnull        65
      11: aload_1
      12: astore        4
      14: aload         4
      16: arraylength
      17: istore        5
      19: iconst_0
      20: istore        6
      22: iload         6
      24: iload         5
      26: if_icmpge     57
      29: aload         4
      31: iload         6
      33: aaload
      34: astore        7
      36: aload         7
      38: aload_2
      39: invokevirtual #10                 // Method java/lang/Class.isInstance:(Ljava/lang/Object;)Z
      42: ifeq          51
      45: iinc          3, 1
      48: goto          57
      51: iinc          6, 1
      54: goto          22
      57: aload_2
      58: invokevirtual #9                  // Method getParent:()Lcom/vladsch/flexmark/ast/Node;
      61: astore_2
      62: goto          7
      65: iload_3
      66: ireturn

  public int countDirectAncestorsOfType(java.lang.Class, java.lang.Class...);
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method getParent:()Lcom/vladsch/flexmark/ast/Node;
       4: astore_3
       5: iconst_0
       6: istore        4
       8: aload_3
       9: ifnull        98
      12: iconst_0
      13: istore        5
      15: aload_2
      16: astore        6
      18: aload         6
      20: arraylength
      21: istore        7
      23: iconst_0
      24: istore        8
      26: iload         8
      28: iload         7
      30: if_icmpge     82
      33: aload         6
      35: iload         8
      37: aaload
      38: astore        9
      40: aload         9
      42: aload_3
      43: invokevirtual #10                 // Method java/lang/Class.isInstance:(Ljava/lang/Object;)Z
      46: ifeq          58
      49: iinc          4, 1
      52: iconst_1
      53: istore        5
      55: goto          82
      58: aload_1
      59: ifnull        76
      62: aload_1
      63: aload_3
      64: invokevirtual #10                 // Method java/lang/Class.isInstance:(Ljava/lang/Object;)Z
      67: ifeq          76
      70: iconst_1
      71: istore        5
      73: goto          82
      76: iinc          8, 1
      79: goto          26
      82: iload         5
      84: ifne          90
      87: goto          98
      90: aload_3
      91: invokevirtual #9                  // Method getParent:()Lcom/vladsch/flexmark/ast/Node;
      94: astore_3
      95: goto          8
      98: iload         4
     100: ireturn

  public com.vladsch.flexmark.ast.Node getOldestAncestorOfTypeAfter(java.lang.Class, java.lang.Class);
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method getParent:()Lcom/vladsch/flexmark/ast/Node;
       4: astore_3
       5: aconst_null
       6: astore        4
       8: aload_3
       9: ifnull        45
      12: aload_1
      13: aload_3
      14: invokevirtual #10                 // Method java/lang/Class.isInstance:(Ljava/lang/Object;)Z
      17: ifeq          26
      20: aload_3
      21: astore        4
      23: goto          37
      26: aload_2
      27: aload_3
      28: invokevirtual #10                 // Method java/lang/Class.isInstance:(Ljava/lang/Object;)Z
      31: ifeq          37
      34: goto          45
      37: aload_3
      38: invokevirtual #9                  // Method getParent:()Lcom/vladsch/flexmark/ast/Node;
      41: astore_3
      42: goto          8
      45: aload         4
      47: areturn

  public com.vladsch.flexmark.ast.Node getChildOfType(java.lang.Class...);
    Code:
       0: aload_0
       1: invokevirtual #11                 // Method getFirstChild:()Lcom/vladsch/flexmark/ast/Node;
       4: astore_2
       5: aload_2
       6: ifnull        56
       9: aload_1
      10: astore_3
      11: aload_3
      12: arraylength
      13: istore        4
      15: iconst_0
      16: istore        5
      18: iload         5
      20: iload         4
      22: if_icmpge     48
      25: aload_3
      26: iload         5
      28: aaload
      29: astore        6
      31: aload         6
      33: aload_2
      34: invokevirtual #10                 // Method java/lang/Class.isInstance:(Ljava/lang/Object;)Z
      37: ifeq          42
      40: aload_2
      41: areturn
      42: iinc          5, 1
      45: goto          18
      48: aload_2
      49: invokevirtual #12                 // Method getNext:()Lcom/vladsch/flexmark/ast/Node;
      52: astore_2
      53: goto          5
      56: aconst_null
      57: areturn

  public static int getNodeOfTypeIndex(com.vladsch.flexmark.ast.Node, java.lang.Class...);
    Code:
       0: iconst_0
       1: istore_2
       2: aload_1
       3: astore_3
       4: aload_3
       5: arraylength
       6: istore        4
       8: iconst_0
       9: istore        5
      11: iload         5
      13: iload         4
      15: if_icmpge     44
      18: aload_3
      19: iload         5
      21: aaload
      22: astore        6
      24: aload         6
      26: aload_0
      27: invokevirtual #10                 // Method java/lang/Class.isInstance:(Ljava/lang/Object;)Z
      30: ifeq          35
      33: iload_2
      34: ireturn
      35: iinc          2, 1
      38: iinc          5, 1
      41: goto          11
      44: iconst_m1
      45: ireturn

  public boolean isOrDescendantOfType(java.lang.Class...);
    Code:
       0: aload_0
       1: astore_2
       2: aload_2
       3: ifnull        25
       6: aload_2
       7: aload_1
       8: invokevirtual #13                 // Method getNodeOfTypeIndex:([Ljava/lang/Class;)I
      11: iconst_m1
      12: if_icmpeq     17
      15: iconst_1
      16: ireturn
      17: aload_2
      18: invokevirtual #9                  // Method getParent:()Lcom/vladsch/flexmark/ast/Node;
      21: astore_2
      22: goto          2
      25: iconst_0
      26: ireturn

  public int getNodeOfTypeIndex(java.lang.Class...);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #14                 // Method getNodeOfTypeIndex:(Lcom/vladsch/flexmark/ast/Node;[Ljava/lang/Class;)I
       5: ireturn

  public com.vladsch.flexmark.ast.Node getLastBlankLineChild();
    Code:
       0: aconst_null
       1: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversiblePeekingIterable<com.vladsch.flexmark.ast.Node> getChildren();
    Code:
       0: aload_0
       1: getfield      #3                  // Field firstChild:Lcom/vladsch/flexmark/ast/Node;
       4: ifnonnull     11
       7: getstatic     #15                 // Field com/vladsch/flexmark/ast/NodeIterable.EMPTY:Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterable;
      10: areturn
      11: new           #16                 // class com/vladsch/flexmark/ast/NodeIterable
      14: dup
      15: aload_0
      16: getfield      #3                  // Field firstChild:Lcom/vladsch/flexmark/ast/Node;
      19: aload_0
      20: getfield      #4                  // Field lastChild:Lcom/vladsch/flexmark/ast/Node;
      23: iconst_0
      24: invokespecial #17                 // Method com/vladsch/flexmark/ast/NodeIterable."<init>":(Lcom/vladsch/flexmark/ast/Node;Lcom/vladsch/flexmark/ast/Node;Z)V
      27: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversiblePeekingIterable<com.vladsch.flexmark.ast.Node> getReversedChildren();
    Code:
       0: aload_0
       1: getfield      #3                  // Field firstChild:Lcom/vladsch/flexmark/ast/Node;
       4: ifnonnull     11
       7: getstatic     #15                 // Field com/vladsch/flexmark/ast/NodeIterable.EMPTY:Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterable;
      10: areturn
      11: new           #16                 // class com/vladsch/flexmark/ast/NodeIterable
      14: dup
      15: aload_0
      16: getfield      #3                  // Field firstChild:Lcom/vladsch/flexmark/ast/Node;
      19: aload_0
      20: getfield      #4                  // Field lastChild:Lcom/vladsch/flexmark/ast/Node;
      23: iconst_1
      24: invokespecial #17                 // Method com/vladsch/flexmark/ast/NodeIterable."<init>":(Lcom/vladsch/flexmark/ast/Node;Lcom/vladsch/flexmark/ast/Node;Z)V
      27: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversiblePeekingIterable<com.vladsch.flexmark.ast.Node> getDescendants();
    Code:
       0: aload_0
       1: getfield      #3                  // Field firstChild:Lcom/vladsch/flexmark/ast/Node;
       4: ifnonnull     11
       7: getstatic     #15                 // Field com/vladsch/flexmark/ast/NodeIterable.EMPTY:Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterable;
      10: areturn
      11: new           #18                 // class com/vladsch/flexmark/ast/DescendantNodeIterable
      14: dup
      15: aload_0
      16: invokevirtual #19                 // Method getChildren:()Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterable;
      19: invokespecial #20                 // Method com/vladsch/flexmark/ast/DescendantNodeIterable."<init>":(Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterable;)V
      22: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversiblePeekingIterable<com.vladsch.flexmark.ast.Node> getReversedDescendants();
    Code:
       0: aload_0
       1: getfield      #3                  // Field firstChild:Lcom/vladsch/flexmark/ast/Node;
       4: ifnonnull     11
       7: getstatic     #15                 // Field com/vladsch/flexmark/ast/NodeIterable.EMPTY:Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterable;
      10: areturn
      11: new           #18                 // class com/vladsch/flexmark/ast/DescendantNodeIterable
      14: dup
      15: aload_0
      16: invokevirtual #21                 // Method getReversedChildren:()Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterable;
      19: invokespecial #20                 // Method com/vladsch/flexmark/ast/DescendantNodeIterable."<init>":(Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterable;)V
      22: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversiblePeekingIterator<com.vladsch.flexmark.ast.Node> getChildIterator();
    Code:
       0: aload_0
       1: getfield      #3                  // Field firstChild:Lcom/vladsch/flexmark/ast/Node;
       4: ifnonnull     11
       7: getstatic     #22                 // Field com/vladsch/flexmark/ast/NodeIterator.EMPTY:Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterator;
      10: areturn
      11: new           #23                 // class com/vladsch/flexmark/ast/NodeIterator
      14: dup
      15: aload_0
      16: getfield      #3                  // Field firstChild:Lcom/vladsch/flexmark/ast/Node;
      19: aload_0
      20: getfield      #4                  // Field lastChild:Lcom/vladsch/flexmark/ast/Node;
      23: iconst_0
      24: invokespecial #24                 // Method com/vladsch/flexmark/ast/NodeIterator."<init>":(Lcom/vladsch/flexmark/ast/Node;Lcom/vladsch/flexmark/ast/Node;Z)V
      27: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversiblePeekingIterator<com.vladsch.flexmark.ast.Node> getReversedChildIterator();
    Code:
       0: aload_0
       1: getfield      #3                  // Field firstChild:Lcom/vladsch/flexmark/ast/Node;
       4: ifnonnull     11
       7: getstatic     #22                 // Field com/vladsch/flexmark/ast/NodeIterator.EMPTY:Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterator;
      10: areturn
      11: new           #23                 // class com/vladsch/flexmark/ast/NodeIterator
      14: dup
      15: aload_0
      16: getfield      #3                  // Field firstChild:Lcom/vladsch/flexmark/ast/Node;
      19: aload_0
      20: getfield      #4                  // Field lastChild:Lcom/vladsch/flexmark/ast/Node;
      23: iconst_1
      24: invokespecial #24                 // Method com/vladsch/flexmark/ast/NodeIterator."<init>":(Lcom/vladsch/flexmark/ast/Node;Lcom/vladsch/flexmark/ast/Node;Z)V
      27: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence getChars();
    Code:
       0: aload_0
       1: getfield      #8                  // Field chars:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: areturn

  public void removeChildren();
    Code:
       0: aload_0
       1: getfield      #3                  // Field firstChild:Lcom/vladsch/flexmark/ast/Node;
       4: astore_1
       5: aload_1
       6: ifnull        23
       9: aload_1
      10: invokevirtual #12                 // Method getNext:()Lcom/vladsch/flexmark/ast/Node;
      13: astore_2
      14: aload_1
      15: invokevirtual #25                 // Method unlink:()V
      18: aload_2
      19: astore_1
      20: goto          5
      23: return

  public boolean hasChildren();
    Code:
       0: aload_0
       1: getfield      #3                  // Field firstChild:Lcom/vladsch/flexmark/ast/Node;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public boolean hasOrMoreChildren(int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field firstChild:Lcom/vladsch/flexmark/ast/Node;
       4: ifnull        52
       7: iconst_0
       8: istore_2
       9: aload_0
      10: invokevirtual #19                 // Method getChildren:()Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterable;
      13: invokeinterface #26,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterable.iterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterator;
      18: astore_3
      19: aload_3
      20: invokeinterface #27,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      25: ifeq          52
      28: aload_3
      29: invokeinterface #28,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      34: checkcast     #29                 // class com/vladsch/flexmark/ast/Node
      37: astore        4
      39: iinc          2, 1
      42: iload_2
      43: iload_1
      44: if_icmplt     49
      47: iconst_1
      48: ireturn
      49: goto          19
      52: iconst_0
      53: ireturn

  public com.vladsch.flexmark.ast.Document getDocument();
    Code:
       0: aload_0
       1: astore_1
       2: aload_1
       3: ifnull        21
       6: aload_1
       7: instanceof    #30                 // class com/vladsch/flexmark/ast/Document
      10: ifne          21
      13: aload_1
      14: invokevirtual #9                  // Method getParent:()Lcom/vladsch/flexmark/ast/Node;
      17: astore_1
      18: goto          2
      21: aload_1
      22: checkcast     #30                 // class com/vladsch/flexmark/ast/Document
      25: areturn

  public void setChars(com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: aload_1
       2: ifnonnull     11
       5: getstatic     #7                  // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       8: goto          12
      11: aload_1
      12: putfield      #8                  // Field chars:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      15: return

  public com.vladsch.flexmark.ast.Node getNext();
    Code:
       0: aload_0
       1: getfield      #6                  // Field next:Lcom/vladsch/flexmark/ast/Node;
       4: areturn

  public int getStartOffset();
    Code:
       0: aload_0
       1: getfield      #8                  // Field chars:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: ifnonnull     11
       7: iconst_0
       8: goto          20
      11: aload_0
      12: getfield      #8                  // Field chars:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      15: invokeinterface #31,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
      20: ireturn

  public int getEndOffset();
    Code:
       0: aload_0
       1: getfield      #8                  // Field chars:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: ifnonnull     11
       7: iconst_0
       8: goto          20
      11: aload_0
      12: getfield      #8                  // Field chars:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      15: invokeinterface #32,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
      20: ireturn

  public int getTextLength();
    Code:
       0: aload_0
       1: getfield      #8                  // Field chars:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: ifnonnull     11
       7: iconst_0
       8: goto          20
      11: aload_0
      12: getfield      #8                  // Field chars:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      15: invokeinterface #33,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      20: ireturn

  public com.vladsch.flexmark.ast.Node getPrevious();
    Code:
       0: aload_0
       1: getfield      #5                  // Field prev:Lcom/vladsch/flexmark/ast/Node;
       4: areturn

  public com.vladsch.flexmark.ast.Node getPreviousAnyNot(java.lang.Class...);
    Code:
       0: aload_0
       1: getfield      #5                  // Field prev:Lcom/vladsch/flexmark/ast/Node;
       4: astore_2
       5: aload_1
       6: arraylength
       7: ifle          31
      10: aload_2
      11: ifnull        31
      14: aload_2
      15: aload_1
      16: invokestatic  #14                 // Method getNodeOfTypeIndex:(Lcom/vladsch/flexmark/ast/Node;[Ljava/lang/Class;)I
      19: iconst_m1
      20: if_icmpeq     31
      23: aload_2
      24: getfield      #5                  // Field prev:Lcom/vladsch/flexmark/ast/Node;
      27: astore_2
      28: goto          10
      31: aload_2
      32: areturn

  public com.vladsch.flexmark.ast.Node getPreviousAny(java.lang.Class...);
    Code:
       0: aload_0
       1: getfield      #5                  // Field prev:Lcom/vladsch/flexmark/ast/Node;
       4: astore_2
       5: aload_1
       6: arraylength
       7: ifle          31
      10: aload_2
      11: ifnull        31
      14: aload_2
      15: aload_1
      16: invokestatic  #14                 // Method getNodeOfTypeIndex:(Lcom/vladsch/flexmark/ast/Node;[Ljava/lang/Class;)I
      19: iconst_m1
      20: if_icmpne     31
      23: aload_2
      24: getfield      #5                  // Field prev:Lcom/vladsch/flexmark/ast/Node;
      27: astore_2
      28: goto          10
      31: aload_2
      32: areturn

  public com.vladsch.flexmark.ast.Node getNextAnyNot(java.lang.Class...);
    Code:
       0: aload_0
       1: getfield      #6                  // Field next:Lcom/vladsch/flexmark/ast/Node;
       4: astore_2
       5: aload_1
       6: arraylength
       7: ifle          31
      10: aload_2
      11: ifnull        31
      14: aload_2
      15: aload_1
      16: invokestatic  #14                 // Method getNodeOfTypeIndex:(Lcom/vladsch/flexmark/ast/Node;[Ljava/lang/Class;)I
      19: iconst_m1
      20: if_icmpeq     31
      23: aload_2
      24: getfield      #6                  // Field next:Lcom/vladsch/flexmark/ast/Node;
      27: astore_2
      28: goto          10
      31: aload_2
      32: areturn

  public com.vladsch.flexmark.ast.Node getNextAny(java.lang.Class...);
    Code:
       0: aload_0
       1: getfield      #6                  // Field next:Lcom/vladsch/flexmark/ast/Node;
       4: astore_2
       5: aload_1
       6: arraylength
       7: ifle          31
      10: aload_2
      11: ifnull        31
      14: aload_2
      15: aload_1
      16: invokestatic  #14                 // Method getNodeOfTypeIndex:(Lcom/vladsch/flexmark/ast/Node;[Ljava/lang/Class;)I
      19: iconst_m1
      20: if_icmpne     31
      23: aload_2
      24: getfield      #6                  // Field next:Lcom/vladsch/flexmark/ast/Node;
      27: astore_2
      28: goto          10
      31: aload_2
      32: areturn

  public com.vladsch.flexmark.ast.Node getFirstChild();
    Code:
       0: aload_0
       1: getfield      #3                  // Field firstChild:Lcom/vladsch/flexmark/ast/Node;
       4: areturn

  public com.vladsch.flexmark.ast.Node getFirstChildAnyNot(java.lang.Class...);
    Code:
       0: aload_0
       1: getfield      #3                  // Field firstChild:Lcom/vladsch/flexmark/ast/Node;
       4: astore_2
       5: aload_1
       6: arraylength
       7: ifle          31
      10: aload_2
      11: ifnull        31
      14: aload_2
      15: aload_1
      16: invokestatic  #14                 // Method getNodeOfTypeIndex:(Lcom/vladsch/flexmark/ast/Node;[Ljava/lang/Class;)I
      19: iconst_m1
      20: if_icmpeq     31
      23: aload_2
      24: getfield      #6                  // Field next:Lcom/vladsch/flexmark/ast/Node;
      27: astore_2
      28: goto          10
      31: aload_2
      32: areturn

  public com.vladsch.flexmark.ast.Node getFirstChildAny(java.lang.Class...);
    Code:
       0: aload_0
       1: getfield      #3                  // Field firstChild:Lcom/vladsch/flexmark/ast/Node;
       4: astore_2
       5: aload_1
       6: arraylength
       7: ifle          31
      10: aload_2
      11: ifnull        31
      14: aload_2
      15: aload_1
      16: invokestatic  #14                 // Method getNodeOfTypeIndex:(Lcom/vladsch/flexmark/ast/Node;[Ljava/lang/Class;)I
      19: iconst_m1
      20: if_icmpne     31
      23: aload_2
      24: getfield      #6                  // Field next:Lcom/vladsch/flexmark/ast/Node;
      27: astore_2
      28: goto          10
      31: aload_2
      32: areturn

  public com.vladsch.flexmark.ast.Node getLastChild();
    Code:
       0: aload_0
       1: getfield      #4                  // Field lastChild:Lcom/vladsch/flexmark/ast/Node;
       4: areturn

  public com.vladsch.flexmark.ast.Node getLastChildAnyNot(java.lang.Class...);
    Code:
       0: aload_0
       1: getfield      #4                  // Field lastChild:Lcom/vladsch/flexmark/ast/Node;
       4: astore_2
       5: aload_1
       6: arraylength
       7: ifle          31
      10: aload_2
      11: ifnull        31
      14: aload_2
      15: aload_1
      16: invokestatic  #14                 // Method getNodeOfTypeIndex:(Lcom/vladsch/flexmark/ast/Node;[Ljava/lang/Class;)I
      19: iconst_m1
      20: if_icmpeq     31
      23: aload_2
      24: getfield      #5                  // Field prev:Lcom/vladsch/flexmark/ast/Node;
      27: astore_2
      28: goto          10
      31: aload_2
      32: areturn

  public com.vladsch.flexmark.ast.Node getLastChildAny(java.lang.Class...);
    Code:
       0: aload_0
       1: getfield      #4                  // Field lastChild:Lcom/vladsch/flexmark/ast/Node;
       4: astore_2
       5: aload_1
       6: arraylength
       7: ifle          31
      10: aload_2
      11: ifnull        31
      14: aload_2
      15: aload_1
      16: invokestatic  #14                 // Method getNodeOfTypeIndex:(Lcom/vladsch/flexmark/ast/Node;[Ljava/lang/Class;)I
      19: iconst_m1
      20: if_icmpne     31
      23: aload_2
      24: getfield      #5                  // Field prev:Lcom/vladsch/flexmark/ast/Node;
      27: astore_2
      28: goto          10
      31: aload_2
      32: areturn

  public com.vladsch.flexmark.ast.Node getParent();
    Code:
       0: aload_0
       1: getfield      #2                  // Field parent:Lcom/vladsch/flexmark/ast/Node;
       4: areturn

  protected void setParent(com.vladsch.flexmark.ast.Node);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2                  // Field parent:Lcom/vladsch/flexmark/ast/Node;
       5: return

  public void appendChild(com.vladsch.flexmark.ast.Node);
    Code:
       0: aload_1
       1: invokevirtual #25                 // Method unlink:()V
       4: aload_1
       5: aload_0
       6: invokevirtual #34                 // Method setParent:(Lcom/vladsch/flexmark/ast/Node;)V
       9: aload_0
      10: getfield      #4                  // Field lastChild:Lcom/vladsch/flexmark/ast/Node;
      13: ifnull        40
      16: aload_0
      17: getfield      #4                  // Field lastChild:Lcom/vladsch/flexmark/ast/Node;
      20: aload_1
      21: putfield      #6                  // Field next:Lcom/vladsch/flexmark/ast/Node;
      24: aload_1
      25: aload_0
      26: getfield      #4                  // Field lastChild:Lcom/vladsch/flexmark/ast/Node;
      29: putfield      #5                  // Field prev:Lcom/vladsch/flexmark/ast/Node;
      32: aload_0
      33: aload_1
      34: putfield      #4                  // Field lastChild:Lcom/vladsch/flexmark/ast/Node;
      37: goto          50
      40: aload_0
      41: aload_1
      42: putfield      #3                  // Field firstChild:Lcom/vladsch/flexmark/ast/Node;
      45: aload_0
      46: aload_1
      47: putfield      #4                  // Field lastChild:Lcom/vladsch/flexmark/ast/Node;
      50: return

  public void prependChild(com.vladsch.flexmark.ast.Node);
    Code:
       0: aload_1
       1: invokevirtual #25                 // Method unlink:()V
       4: aload_1
       5: aload_0
       6: invokevirtual #34                 // Method setParent:(Lcom/vladsch/flexmark/ast/Node;)V
       9: aload_0
      10: getfield      #3                  // Field firstChild:Lcom/vladsch/flexmark/ast/Node;
      13: ifnull        40
      16: aload_0
      17: getfield      #3                  // Field firstChild:Lcom/vladsch/flexmark/ast/Node;
      20: aload_1
      21: putfield      #5                  // Field prev:Lcom/vladsch/flexmark/ast/Node;
      24: aload_1
      25: aload_0
      26: getfield      #3                  // Field firstChild:Lcom/vladsch/flexmark/ast/Node;
      29: putfield      #6                  // Field next:Lcom/vladsch/flexmark/ast/Node;
      32: aload_0
      33: aload_1
      34: putfield      #3                  // Field firstChild:Lcom/vladsch/flexmark/ast/Node;
      37: goto          50
      40: aload_0
      41: aload_1
      42: putfield      #3                  // Field firstChild:Lcom/vladsch/flexmark/ast/Node;
      45: aload_0
      46: aload_1
      47: putfield      #4                  // Field lastChild:Lcom/vladsch/flexmark/ast/Node;
      50: return

  public void unlink();
    Code:
       0: aload_0
       1: getfield      #5                  // Field prev:Lcom/vladsch/flexmark/ast/Node;
       4: ifnull        21
       7: aload_0
       8: getfield      #5                  // Field prev:Lcom/vladsch/flexmark/ast/Node;
      11: aload_0
      12: getfield      #6                  // Field next:Lcom/vladsch/flexmark/ast/Node;
      15: putfield      #6                  // Field next:Lcom/vladsch/flexmark/ast/Node;
      18: goto          39
      21: aload_0
      22: getfield      #2                  // Field parent:Lcom/vladsch/flexmark/ast/Node;
      25: ifnull        39
      28: aload_0
      29: getfield      #2                  // Field parent:Lcom/vladsch/flexmark/ast/Node;
      32: aload_0
      33: getfield      #6                  // Field next:Lcom/vladsch/flexmark/ast/Node;
      36: putfield      #3                  // Field firstChild:Lcom/vladsch/flexmark/ast/Node;
      39: aload_0
      40: getfield      #6                  // Field next:Lcom/vladsch/flexmark/ast/Node;
      43: ifnull        60
      46: aload_0
      47: getfield      #6                  // Field next:Lcom/vladsch/flexmark/ast/Node;
      50: aload_0
      51: getfield      #5                  // Field prev:Lcom/vladsch/flexmark/ast/Node;
      54: putfield      #5                  // Field prev:Lcom/vladsch/flexmark/ast/Node;
      57: goto          78
      60: aload_0
      61: getfield      #2                  // Field parent:Lcom/vladsch/flexmark/ast/Node;
      64: ifnull        78
      67: aload_0
      68: getfield      #2                  // Field parent:Lcom/vladsch/flexmark/ast/Node;
      71: aload_0
      72: getfield      #5                  // Field prev:Lcom/vladsch/flexmark/ast/Node;
      75: putfield      #4                  // Field lastChild:Lcom/vladsch/flexmark/ast/Node;
      78: aload_0
      79: aconst_null
      80: putfield      #2                  // Field parent:Lcom/vladsch/flexmark/ast/Node;
      83: aload_0
      84: aconst_null
      85: putfield      #6                  // Field next:Lcom/vladsch/flexmark/ast/Node;
      88: aload_0
      89: aconst_null
      90: putfield      #5                  // Field prev:Lcom/vladsch/flexmark/ast/Node;
      93: return

  public void insertAfter(com.vladsch.flexmark.ast.Node);
    Code:
       0: aload_1
       1: invokevirtual #25                 // Method unlink:()V
       4: aload_1
       5: aload_0
       6: getfield      #6                  // Field next:Lcom/vladsch/flexmark/ast/Node;
       9: putfield      #6                  // Field next:Lcom/vladsch/flexmark/ast/Node;
      12: aload_1
      13: getfield      #6                  // Field next:Lcom/vladsch/flexmark/ast/Node;
      16: ifnull        27
      19: aload_1
      20: getfield      #6                  // Field next:Lcom/vladsch/flexmark/ast/Node;
      23: aload_1
      24: putfield      #5                  // Field prev:Lcom/vladsch/flexmark/ast/Node;
      27: aload_1
      28: aload_0
      29: putfield      #5                  // Field prev:Lcom/vladsch/flexmark/ast/Node;
      32: aload_0
      33: aload_1
      34: putfield      #6                  // Field next:Lcom/vladsch/flexmark/ast/Node;
      37: aload_1
      38: aload_0
      39: getfield      #2                  // Field parent:Lcom/vladsch/flexmark/ast/Node;
      42: putfield      #2                  // Field parent:Lcom/vladsch/flexmark/ast/Node;
      45: aload_1
      46: getfield      #6                  // Field next:Lcom/vladsch/flexmark/ast/Node;
      49: ifnonnull     60
      52: aload_1
      53: getfield      #2                  // Field parent:Lcom/vladsch/flexmark/ast/Node;
      56: aload_1
      57: putfield      #4                  // Field lastChild:Lcom/vladsch/flexmark/ast/Node;
      60: return

  public void insertBefore(com.vladsch.flexmark.ast.Node);
    Code:
       0: aload_1
       1: invokevirtual #25                 // Method unlink:()V
       4: aload_1
       5: aload_0
       6: getfield      #5                  // Field prev:Lcom/vladsch/flexmark/ast/Node;
       9: putfield      #5                  // Field prev:Lcom/vladsch/flexmark/ast/Node;
      12: aload_1
      13: getfield      #5                  // Field prev:Lcom/vladsch/flexmark/ast/Node;
      16: ifnull        27
      19: aload_1
      20: getfield      #5                  // Field prev:Lcom/vladsch/flexmark/ast/Node;
      23: aload_1
      24: putfield      #6                  // Field next:Lcom/vladsch/flexmark/ast/Node;
      27: aload_1
      28: aload_0
      29: putfield      #6                  // Field next:Lcom/vladsch/flexmark/ast/Node;
      32: aload_0
      33: aload_1
      34: putfield      #5                  // Field prev:Lcom/vladsch/flexmark/ast/Node;
      37: aload_1
      38: aload_0
      39: getfield      #2                  // Field parent:Lcom/vladsch/flexmark/ast/Node;
      42: putfield      #2                  // Field parent:Lcom/vladsch/flexmark/ast/Node;
      45: aload_1
      46: getfield      #5                  // Field prev:Lcom/vladsch/flexmark/ast/Node;
      49: ifnonnull     60
      52: aload_1
      53: getfield      #2                  // Field parent:Lcom/vladsch/flexmark/ast/Node;
      56: aload_1
      57: putfield      #3                  // Field firstChild:Lcom/vladsch/flexmark/ast/Node;
      60: return

  public java.lang.String toString();
    Code:
       0: new           #35                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #36                 // Method java/lang/StringBuilder."<init>":()V
       7: aload_0
       8: invokevirtual #37                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      11: invokevirtual #38                 // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
      14: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      17: ldc           #40                 // String {
      19: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: aload_0
      23: invokevirtual #41                 // Method toStringAttributes:()Ljava/lang/String;
      26: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: ldc           #42                 // String }
      31: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      34: invokevirtual #43                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      37: areturn

  public void getAstExtra(java.lang.StringBuilder);
    Code:
       0: return

  public void astExtraChars(java.lang.StringBuilder);
    Code:
       0: aload_0
       1: invokevirtual #44                 // Method getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: invokeinterface #33,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
       9: ifle          106
      12: aload_0
      13: invokevirtual #44                 // Method getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      16: invokeinterface #33,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      21: bipush        10
      23: if_icmpgt     39
      26: aload_1
      27: aload_0
      28: invokevirtual #44                 // Method getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      31: ldc           #45                 // String chars
      33: invokestatic  #46                 // Method segmentSpanChars:(Ljava/lang/StringBuilder;Lcom/vladsch/flexmark/util/sequence/BasedSequence;Ljava/lang/String;)V
      36: goto          106
      39: aload_1
      40: aload_0
      41: invokevirtual #44                 // Method getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      44: invokeinterface #31,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
      49: aload_0
      50: invokevirtual #44                 // Method getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      53: invokeinterface #32,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
      58: ldc           #45                 // String chars
      60: aload_0
      61: invokevirtual #44                 // Method getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      64: iconst_0
      65: iconst_5
      66: invokeinterface #47,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      71: invokeinterface #48,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.toVisibleWhitespaceString:()Ljava/lang/String;
      76: ldc           #49                 // String  …
      78: aload_0
      79: invokevirtual #44                 // Method getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      82: aload_0
      83: invokevirtual #44                 // Method getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      86: invokeinterface #33,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      91: iconst_5
      92: isub
      93: invokeinterface #50,  2           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(I)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      98: invokeinterface #48,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.toVisibleWhitespaceString:()Ljava/lang/String;
     103: invokestatic  #51                 // Method segmentSpanChars:(Ljava/lang/StringBuilder;IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     106: return

  public static void astChars(java.lang.StringBuilder, java.lang.CharSequence, java.lang.String);
    Code:
       0: aload_1
       1: invokeinterface #52,  1           // InterfaceMethod java/lang/CharSequence.length:()I
       6: ifle          108
       9: aload_1
      10: invokeinterface #52,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      15: bipush        10
      17: if_icmpgt     48
      20: aload_0
      21: bipush        32
      23: invokevirtual #53                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      26: aload_2
      27: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: ldc           #54                 // String  \"
      32: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: aload_1
      36: invokevirtual #55                 // Method java/lang/StringBuilder.append:(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;
      39: ldc           #56                 // String \"
      41: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      44: pop
      45: goto          108
      48: aload_0
      49: bipush        32
      51: invokevirtual #53                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      54: aload_2
      55: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      58: ldc           #54                 // String  \"
      60: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      63: aload_1
      64: iconst_0
      65: iconst_5
      66: invokeinterface #57,  3           // InterfaceMethod java/lang/CharSequence.subSequence:(II)Ljava/lang/CharSequence;
      71: invokevirtual #55                 // Method java/lang/StringBuilder.append:(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;
      74: ldc           #49                 // String  …
      76: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      79: aload_1
      80: aload_1
      81: invokeinterface #52,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      86: iconst_5
      87: isub
      88: aload_1
      89: invokeinterface #52,  1           // InterfaceMethod java/lang/CharSequence.length:()I
      94: invokeinterface #57,  3           // InterfaceMethod java/lang/CharSequence.subSequence:(II)Ljava/lang/CharSequence;
      99: invokevirtual #55                 // Method java/lang/StringBuilder.append:(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;
     102: ldc           #56                 // String \"
     104: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     107: pop
     108: return

  protected java.lang.String toStringAttributes();
    Code:
       0: ldc           #58                 // String
       2: areturn

  public abstract com.vladsch.flexmark.util.sequence.BasedSequence[] getSegments();

  public static com.vladsch.flexmark.util.sequence.BasedSequence getLeadSegment(com.vladsch.flexmark.util.sequence.BasedSequence[]);
    Code:
       0: aload_0
       1: astore_1
       2: aload_1
       3: arraylength
       4: istore_2
       5: iconst_0
       6: istore_3
       7: iload_3
       8: iload_2
       9: if_icmpge     39
      12: aload_1
      13: iload_3
      14: aaload
      15: astore        4
      17: aload         4
      19: ifnull        33
      22: aload         4
      24: getstatic     #7                  // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      27: if_acmpeq     33
      30: aload         4
      32: areturn
      33: iinc          3, 1
      36: goto          7
      39: getstatic     #7                  // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      42: areturn

  public static com.vladsch.flexmark.util.sequence.BasedSequence getTrailSegment(com.vladsch.flexmark.util.sequence.BasedSequence[]);
    Code:
       0: aload_0
       1: arraylength
       2: istore_1
       3: iload_1
       4: istore_2
       5: iload_2
       6: iinc          2, -1
       9: ifle          32
      12: aload_0
      13: iload_2
      14: aaload
      15: astore_3
      16: aload_3
      17: ifnull        29
      20: aload_3
      21: getstatic     #7                  // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      24: if_acmpeq     29
      27: aload_3
      28: areturn
      29: goto          5
      32: getstatic     #7                  // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      35: areturn

  public static com.vladsch.flexmark.util.sequence.BasedSequence spanningChars(com.vladsch.flexmark.util.sequence.BasedSequence...);
    Code:
       0: ldc           #60                 // int 2147483647
       2: istore_1
       3: iconst_m1
       4: istore_2
       5: aconst_null
       6: astore_3
       7: aconst_null
       8: astore        4
      10: aload_0
      11: astore        5
      13: aload         5
      15: arraylength
      16: istore        6
      18: iconst_0
      19: istore        7
      21: iload         7
      23: iload         6
      25: if_icmpge     99
      28: aload         5
      30: iload         7
      32: aaload
      33: astore        8
      35: aload         8
      37: ifnull        93
      40: aload         8
      42: getstatic     #7                  // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      45: if_acmpeq     93
      48: iload_1
      49: aload         8
      51: invokeinterface #31,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
      56: if_icmple     70
      59: aload         8
      61: invokeinterface #31,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
      66: istore_1
      67: aload         8
      69: astore_3
      70: iload_2
      71: aload         8
      73: invokeinterface #32,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
      78: if_icmpgt     93
      81: aload         8
      83: invokeinterface #32,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
      88: istore_2
      89: aload         8
      91: astore        4
      93: iinc          7, 1
      96: goto          21
      99: aload_3
     100: ifnull        128
     103: aload         4
     105: ifnull        128
     108: aload_3
     109: aload_3
     110: invokeinterface #31,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
     115: aload         4
     117: invokeinterface #32,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
     122: invokeinterface #61,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.baseSubSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     127: areturn
     128: getstatic     #7                  // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     131: areturn

  public void setCharsFromContentOnly();
    Code:
       0: aload_0
       1: getstatic     #62                 // Field com/vladsch/flexmark/util/sequence/SubSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: putfield      #8                  // Field chars:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       7: aload_0
       8: invokevirtual #63                 // Method setCharsFromContent:()V
      11: return

  public void setCharsFromContent();
    Code:
       0: aload_0
       1: invokevirtual #64                 // Method getSegments:()[Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: astore_1
       5: aconst_null
       6: astore_2
       7: aload_1
       8: arraylength
       9: ifle          105
      12: aload_1
      13: invokestatic  #65                 // Method getLeadSegment:([Lcom/vladsch/flexmark/util/sequence/BasedSequence;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      16: astore_3
      17: aload_1
      18: invokestatic  #66                 // Method getTrailSegment:([Lcom/vladsch/flexmark/util/sequence/BasedSequence;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      21: astore        4
      23: aload_0
      24: getfield      #3                  // Field firstChild:Lcom/vladsch/flexmark/ast/Node;
      27: ifnull        37
      30: aload_0
      31: getfield      #4                  // Field lastChild:Lcom/vladsch/flexmark/ast/Node;
      34: ifnonnull     61
      37: iconst_2
      38: anewarray     #67                 // class com/vladsch/flexmark/util/sequence/BasedSequence
      41: dup
      42: iconst_0
      43: aload_3
      44: aastore
      45: dup
      46: iconst_1
      47: aload         4
      49: aastore
      50: astore        5
      52: aload         5
      54: invokestatic  #68                 // Method spanningChars:([Lcom/vladsch/flexmark/util/sequence/BasedSequence;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      57: astore_2
      58: goto          102
      61: iconst_4
      62: anewarray     #67                 // class com/vladsch/flexmark/util/sequence/BasedSequence
      65: dup
      66: iconst_0
      67: aload_3
      68: aastore
      69: dup
      70: iconst_1
      71: aload         4
      73: aastore
      74: dup
      75: iconst_2
      76: aload_0
      77: getfield      #3                  // Field firstChild:Lcom/vladsch/flexmark/ast/Node;
      80: getfield      #8                  // Field chars:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      83: aastore
      84: dup
      85: iconst_3
      86: aload_0
      87: getfield      #4                  // Field lastChild:Lcom/vladsch/flexmark/ast/Node;
      90: getfield      #8                  // Field chars:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      93: aastore
      94: astore        5
      96: aload         5
      98: invokestatic  #68                 // Method spanningChars:([Lcom/vladsch/flexmark/util/sequence/BasedSequence;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     101: astore_2
     102: goto          149
     105: aload_0
     106: getfield      #3                  // Field firstChild:Lcom/vladsch/flexmark/ast/Node;
     109: ifnull        149
     112: aload_0
     113: getfield      #4                  // Field lastChild:Lcom/vladsch/flexmark/ast/Node;
     116: ifnull        149
     119: iconst_2
     120: anewarray     #67                 // class com/vladsch/flexmark/util/sequence/BasedSequence
     123: dup
     124: iconst_0
     125: aload_0
     126: getfield      #3                  // Field firstChild:Lcom/vladsch/flexmark/ast/Node;
     129: getfield      #8                  // Field chars:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     132: aastore
     133: dup
     134: iconst_1
     135: aload_0
     136: getfield      #4                  // Field lastChild:Lcom/vladsch/flexmark/ast/Node;
     139: getfield      #8                  // Field chars:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     142: aastore
     143: astore_3
     144: aload_3
     145: invokestatic  #68                 // Method spanningChars:([Lcom/vladsch/flexmark/util/sequence/BasedSequence;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     148: astore_2
     149: aload_2
     150: ifnull        240
     153: aload_0
     154: getfield      #8                  // Field chars:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     157: invokeinterface #69,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.isNull:()Z
     162: ifeq          173
     165: aload_0
     166: aload_2
     167: invokevirtual #70                 // Method setChars:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     170: goto          240
     173: aload_0
     174: getfield      #8                  // Field chars:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     177: invokeinterface #31,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
     182: iconst_1
     183: newarray       int
     185: dup
     186: iconst_0
     187: aload_2
     188: invokeinterface #31,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
     193: iastore
     194: invokestatic  #71                 // Method com/vladsch/flexmark/util/Utils.min:(I[I)I
     197: istore_3
     198: aload_0
     199: getfield      #8                  // Field chars:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     202: invokeinterface #32,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
     207: iconst_1
     208: newarray       int
     210: dup
     211: iconst_0
     212: aload_2
     213: invokeinterface #32,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
     218: iastore
     219: invokestatic  #72                 // Method com/vladsch/flexmark/util/Utils.max:(I[I)I
     222: istore        4
     224: aload_0
     225: aload_0
     226: getfield      #8                  // Field chars:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     229: iload_3
     230: iload         4
     232: invokeinterface #61,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.baseSubSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     237: invokevirtual #70                 // Method setChars:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     240: return

  protected com.vladsch.flexmark.util.sequence.BasedSequence deNullify(com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_1
       1: ifnonnull     10
       4: getstatic     #7                  // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       7: goto          11
      10: aload_1
      11: areturn

  public static void segmentSpan(java.lang.StringBuilder, int, int, java.lang.String);
    Code:
       0: aload_3
       1: ifnull        30
       4: aload_3
       5: invokevirtual #73                 // Method java/lang/String.trim:()Ljava/lang/String;
       8: invokevirtual #74                 // Method java/lang/String.isEmpty:()Z
      11: ifne          30
      14: aload_0
      15: ldc           #75                 // String
      17: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      20: aload_3
      21: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: ldc           #76                 // String :
      26: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: pop
      30: aload_0
      31: ldc           #77                 // String [
      33: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: iload_1
      37: invokevirtual #78                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      40: ldc           #79                 // String ,
      42: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      45: iload_2
      46: invokevirtual #78                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      49: ldc           #80                 // String ]
      51: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      54: pop
      55: return

  public static void segmentSpanChars(java.lang.StringBuilder, int, int, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: aload_3
       4: aload         4
       6: ldc           #58                 // String
       8: ldc           #58                 // String
      10: invokestatic  #51                 // Method segmentSpanChars:(Ljava/lang/StringBuilder;IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
      13: return

  public static void segmentSpanChars(java.lang.StringBuilder, int, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
    Code:
       0: aload_3
       1: ifnull        30
       4: aload_3
       5: invokevirtual #73                 // Method java/lang/String.trim:()Ljava/lang/String;
       8: invokevirtual #74                 // Method java/lang/String.isEmpty:()Z
      11: ifne          30
      14: aload_0
      15: ldc           #75                 // String
      17: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      20: aload_3
      21: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: ldc           #76                 // String :
      26: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: pop
      30: aload_0
      31: ldc           #77                 // String [
      33: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: iload_1
      37: invokevirtual #78                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      40: ldc           #79                 // String ,
      42: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      45: iload_2
      46: invokevirtual #78                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      49: pop
      50: aload         4
      52: invokevirtual #74                 // Method java/lang/String.isEmpty:()Z
      55: ifeq          66
      58: aload         6
      60: invokevirtual #74                 // Method java/lang/String.isEmpty:()Z
      63: ifne          99
      66: aload_0
      67: ldc           #81                 // String , \"
      69: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      72: pop
      73: aload_0
      74: aload         4
      76: invokestatic  #82                 // Method escapeJavaString:(Ljava/lang/StringBuilder;Ljava/lang/String;)V
      79: aload_0
      80: aload         5
      82: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      85: pop
      86: aload_0
      87: aload         6
      89: invokestatic  #82                 // Method escapeJavaString:(Ljava/lang/StringBuilder;Ljava/lang/String;)V
      92: aload_0
      93: ldc           #56                 // String \"
      95: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      98: pop
      99: aload_0
     100: ldc           #80                 // String ]
     102: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     105: pop
     106: return

  private static void escapeJavaString(java.lang.StringBuilder, java.lang.String);
    Code:
       0: aload_1
       1: invokevirtual #83                 // Method java/lang/String.length:()I
       4: istore_2
       5: iconst_0
       6: istore_3
       7: iload_3
       8: iload_2
       9: if_icmpge     208
      12: aload_1
      13: iload_3
      14: invokevirtual #84                 // Method java/lang/String.charAt:(I)C
      17: istore        4
      19: iload         4
      21: lookupswitch  { // 7
                     0: 148
                     8: 128
                     9: 118
                    10: 98
                    12: 138
                    13: 108
                    34: 88
               default: 158
          }
      88: aload_0
      89: ldc           #85                 // String \\\"
      91: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      94: pop
      95: goto          202
      98: aload_0
      99: ldc           #86                 // String \\n
     101: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     104: pop
     105: goto          202
     108: aload_0
     109: ldc           #87                 // String \\r
     111: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     114: pop
     115: goto          202
     118: aload_0
     119: ldc           #88                 // String \\t
     121: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     124: pop
     125: goto          202
     128: aload_0
     129: ldc           #89                 // String \\b
     131: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     134: pop
     135: goto          202
     138: aload_0
     139: ldc           #90                 // String \\f
     141: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     144: pop
     145: goto          202
     148: aload_0
     149: ldc           #91                 // String \\0
     151: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     154: pop
     155: goto          202
     158: iload         4
     160: bipush        32
     162: if_icmpge     195
     165: aload_0
     166: bipush        37
     168: invokevirtual #53                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
     171: ldc           #92                 // String %02x
     173: iconst_1
     174: anewarray     #93                 // class java/lang/Object
     177: dup
     178: iconst_0
     179: iload         4
     181: invokestatic  #94                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     184: aastore
     185: invokestatic  #95                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     188: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     191: pop
     192: goto          202
     195: aload_0
     196: iload         4
     198: invokevirtual #53                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
     201: pop
     202: iinc          3, 1
     205: goto          7
     208: return

  public static void segmentSpan(java.lang.StringBuilder, com.vladsch.flexmark.util.sequence.BasedSequence, java.lang.String);
    Code:
       0: aload_1
       1: invokeinterface #96,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.isNotNull:()Z
       6: ifeq          26
       9: aload_0
      10: aload_1
      11: invokeinterface #31,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
      16: aload_1
      17: invokeinterface #32,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
      22: aload_2
      23: invokestatic  #97                 // Method segmentSpan:(Ljava/lang/StringBuilder;IILjava/lang/String;)V
      26: return

  public static void segmentSpanChars(java.lang.StringBuilder, com.vladsch.flexmark.util.sequence.BasedSequence, java.lang.String);
    Code:
       0: aload_1
       1: invokeinterface #96,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.isNotNull:()Z
       6: ifeq          30
       9: aload_0
      10: aload_1
      11: invokeinterface #31,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
      16: aload_1
      17: invokeinterface #32,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
      22: aload_2
      23: aload_1
      24: invokevirtual #98                 // Method java/lang/Object.toString:()Ljava/lang/String;
      27: invokestatic  #99                 // Method segmentSpanChars:(Ljava/lang/StringBuilder;IILjava/lang/String;Ljava/lang/String;)V
      30: return

  public static void delimitedSegmentSpan(java.lang.StringBuilder, com.vladsch.flexmark.util.sequence.BasedSequence, com.vladsch.flexmark.util.sequence.BasedSequence, com.vladsch.flexmark.util.sequence.BasedSequence, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #31,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
       7: aload_1
       8: invokeinterface #32,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
      13: new           #35                 // class java/lang/StringBuilder
      16: dup
      17: invokespecial #36                 // Method java/lang/StringBuilder."<init>":()V
      20: aload         4
      22: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      25: ldc           #100                // String Open
      27: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: invokevirtual #43                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      33: aload_1
      34: invokevirtual #98                 // Method java/lang/Object.toString:()Ljava/lang/String;
      37: invokestatic  #99                 // Method segmentSpanChars:(Ljava/lang/StringBuilder;IILjava/lang/String;Ljava/lang/String;)V
      40: aload_2
      41: invokeinterface #33,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      46: bipush        10
      48: if_icmpgt     78
      51: aload_0
      52: aload_2
      53: invokeinterface #31,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
      58: aload_2
      59: invokeinterface #32,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
      64: aload         4
      66: aload_2
      67: invokeinterface #48,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.toVisibleWhitespaceString:()Ljava/lang/String;
      72: invokestatic  #99                 // Method segmentSpanChars:(Ljava/lang/StringBuilder;IILjava/lang/String;Ljava/lang/String;)V
      75: goto          130
      78: aload_0
      79: aload_2
      80: invokeinterface #31,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
      85: aload_2
      86: invokeinterface #32,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
      91: aload         4
      93: aload_2
      94: iconst_0
      95: iconst_5
      96: invokeinterface #47,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     101: invokeinterface #48,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.toVisibleWhitespaceString:()Ljava/lang/String;
     106: ldc           #49                 // String  …
     108: aload_2
     109: aload_2
     110: invokeinterface #33,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
     115: iconst_5
     116: isub
     117: invokeinterface #101,  2          // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.endSequence:(I)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     122: invokeinterface #48,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.toVisibleWhitespaceString:()Ljava/lang/String;
     127: invokestatic  #51                 // Method segmentSpanChars:(Ljava/lang/StringBuilder;IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     130: aload_0
     131: aload_3
     132: invokeinterface #31,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
     137: aload_3
     138: invokeinterface #32,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
     143: new           #35                 // class java/lang/StringBuilder
     146: dup
     147: invokespecial #36                 // Method java/lang/StringBuilder."<init>":()V
     150: aload         4
     152: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     155: ldc           #102                // String Close
     157: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     160: invokevirtual #43                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     163: aload_3
     164: invokevirtual #98                 // Method java/lang/Object.toString:()Ljava/lang/String;
     167: invokestatic  #99                 // Method segmentSpanChars:(Ljava/lang/StringBuilder;IILjava/lang/String;Ljava/lang/String;)V
     170: return

  public static void delimitedSegmentSpanChars(java.lang.StringBuilder, com.vladsch.flexmark.util.sequence.BasedSequence, com.vladsch.flexmark.util.sequence.BasedSequence, com.vladsch.flexmark.util.sequence.BasedSequence, java.lang.String);
    Code:
       0: aload_1
       1: invokeinterface #96,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.isNotNull:()Z
       6: ifeq          49
       9: aload_0
      10: aload_1
      11: invokeinterface #31,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
      16: aload_1
      17: invokeinterface #32,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
      22: new           #35                 // class java/lang/StringBuilder
      25: dup
      26: invokespecial #36                 // Method java/lang/StringBuilder."<init>":()V
      29: aload         4
      31: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      34: ldc           #100                // String Open
      36: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: invokevirtual #43                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      42: aload_1
      43: invokevirtual #98                 // Method java/lang/Object.toString:()Ljava/lang/String;
      46: invokestatic  #99                 // Method segmentSpanChars:(Ljava/lang/StringBuilder;IILjava/lang/String;Ljava/lang/String;)V
      49: aload_2
      50: invokeinterface #96,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.isNotNull:()Z
      55: ifeq          82
      58: aload_0
      59: aload_2
      60: invokeinterface #31,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
      65: aload_2
      66: invokeinterface #32,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
      71: aload         4
      73: aload_2
      74: invokeinterface #48,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.toVisibleWhitespaceString:()Ljava/lang/String;
      79: invokestatic  #99                 // Method segmentSpanChars:(Ljava/lang/StringBuilder;IILjava/lang/String;Ljava/lang/String;)V
      82: aload_3
      83: invokeinterface #96,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.isNotNull:()Z
      88: ifeq          131
      91: aload_0
      92: aload_3
      93: invokeinterface #31,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
      98: aload_3
      99: invokeinterface #32,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
     104: new           #35                 // class java/lang/StringBuilder
     107: dup
     108: invokespecial #36                 // Method java/lang/StringBuilder."<init>":()V
     111: aload         4
     113: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     116: ldc           #102                // String Close
     118: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     121: invokevirtual #43                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     124: aload_3
     125: invokevirtual #98                 // Method java/lang/Object.toString:()Ljava/lang/String;
     128: invokestatic  #99                 // Method segmentSpanChars:(Ljava/lang/StringBuilder;IILjava/lang/String;Ljava/lang/String;)V
     131: return

  public void takeChildren(com.vladsch.flexmark.ast.Node);
    Code:
       0: aload_1
       1: getfield      #3                  // Field firstChild:Lcom/vladsch/flexmark/ast/Node;
       4: ifnull        86
       7: aload_1
       8: getfield      #3                  // Field firstChild:Lcom/vladsch/flexmark/ast/Node;
      11: astore_2
      12: aload_1
      13: getfield      #4                  // Field lastChild:Lcom/vladsch/flexmark/ast/Node;
      16: astore_3
      17: aload_3
      18: aload_2
      19: if_acmpeq     81
      22: aload_1
      23: aconst_null
      24: putfield      #3                  // Field firstChild:Lcom/vladsch/flexmark/ast/Node;
      27: aload_1
      28: aconst_null
      29: putfield      #4                  // Field lastChild:Lcom/vladsch/flexmark/ast/Node;
      32: aload_2
      33: aload_0
      34: putfield      #2                  // Field parent:Lcom/vladsch/flexmark/ast/Node;
      37: aload_3
      38: aload_0
      39: putfield      #2                  // Field parent:Lcom/vladsch/flexmark/ast/Node;
      42: aload_0
      43: getfield      #4                  // Field lastChild:Lcom/vladsch/flexmark/ast/Node;
      46: ifnull        68
      49: aload_0
      50: getfield      #4                  // Field lastChild:Lcom/vladsch/flexmark/ast/Node;
      53: aload_2
      54: putfield      #6                  // Field next:Lcom/vladsch/flexmark/ast/Node;
      57: aload_2
      58: aload_0
      59: getfield      #4                  // Field lastChild:Lcom/vladsch/flexmark/ast/Node;
      62: putfield      #5                  // Field prev:Lcom/vladsch/flexmark/ast/Node;
      65: goto          73
      68: aload_0
      69: aload_2
      70: putfield      #3                  // Field firstChild:Lcom/vladsch/flexmark/ast/Node;
      73: aload_0
      74: aload_3
      75: putfield      #4                  // Field lastChild:Lcom/vladsch/flexmark/ast/Node;
      78: goto          86
      81: aload_0
      82: aload_2
      83: invokevirtual #103                // Method appendChild:(Lcom/vladsch/flexmark/ast/Node;)V
      86: return

  public java.lang.String getNodeName();
    Code:
       0: aload_0
       1: invokevirtual #37                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
       4: invokevirtual #104                // Method java/lang/Class.getName:()Ljava/lang/String;
       7: aload_0
       8: invokevirtual #37                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      11: invokevirtual #105                // Method java/lang/Class.getPackage:()Ljava/lang/Package;
      14: invokevirtual #106                // Method java/lang/Package.getName:()Ljava/lang/String;
      17: invokevirtual #83                 // Method java/lang/String.length:()I
      20: iconst_1
      21: iadd
      22: invokevirtual #107                // Method java/lang/String.substring:(I)Ljava/lang/String;
      25: areturn

  public void astString(java.lang.StringBuilder, boolean);
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #108                // Method getNodeName:()Ljava/lang/String;
       5: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
       8: pop
       9: aload_1
      10: ldc           #77                 // String [
      12: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      15: aload_0
      16: invokevirtual #109                // Method getStartOffset:()I
      19: invokevirtual #78                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      22: ldc           #79                 // String ,
      24: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      27: aload_0
      28: invokevirtual #110                // Method getEndOffset:()I
      31: invokevirtual #78                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      34: ldc           #80                 // String ]
      36: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: pop
      40: iload_2
      41: ifeq          49
      44: aload_0
      45: aload_1
      46: invokevirtual #111                // Method getAstExtra:(Ljava/lang/StringBuilder;)V
      49: return

  public java.lang.String toAstString(boolean);
    Code:
       0: new           #35                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #36                 // Method java/lang/StringBuilder."<init>":()V
       7: astore_2
       8: aload_0
       9: aload_2
      10: iload_1
      11: invokevirtual #112                // Method astString:(Ljava/lang/StringBuilder;Z)V
      14: aload_2
      15: invokevirtual #43                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      18: areturn

  public static java.lang.String toSegmentSpan(com.vladsch.flexmark.util.sequence.BasedSequence, java.lang.String);
    Code:
       0: new           #35                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #36                 // Method java/lang/StringBuilder."<init>":()V
       7: astore_2
       8: aload_2
       9: aload_0
      10: aload_1
      11: invokestatic  #113                // Method segmentSpan:(Ljava/lang/StringBuilder;Lcom/vladsch/flexmark/util/sequence/BasedSequence;Ljava/lang/String;)V
      14: aload_2
      15: invokevirtual #43                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      18: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence getChildChars();
    Code:
       0: aload_0
       1: getfield      #3                  // Field firstChild:Lcom/vladsch/flexmark/ast/Node;
       4: ifnull        14
       7: aload_0
       8: getfield      #4                  // Field lastChild:Lcom/vladsch/flexmark/ast/Node;
      11: ifnonnull     18
      14: getstatic     #7                  // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      17: areturn
      18: aload_0
      19: getfield      #3                  // Field firstChild:Lcom/vladsch/flexmark/ast/Node;
      22: invokevirtual #44                 // Method getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      25: aload_0
      26: getfield      #3                  // Field firstChild:Lcom/vladsch/flexmark/ast/Node;
      29: invokevirtual #109                // Method getStartOffset:()I
      32: aload_0
      33: getfield      #4                  // Field lastChild:Lcom/vladsch/flexmark/ast/Node;
      36: invokevirtual #110                // Method getEndOffset:()I
      39: invokeinterface #61,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.baseSubSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      44: areturn

  public com.vladsch.flexmark.ast.Node getBlankLineSibling();
    Code:
       0: aload_0
       1: getfield      #2                  // Field parent:Lcom/vladsch/flexmark/ast/Node;
       4: astore_1
       5: aconst_null
       6: astore_2
       7: aload_0
       8: astore_3
       9: aload_1
      10: getfield      #2                  // Field parent:Lcom/vladsch/flexmark/ast/Node;
      13: ifnull        77
      16: aload_1
      17: aload_1
      18: getfield      #2                  // Field parent:Lcom/vladsch/flexmark/ast/Node;
      21: iconst_1
      22: anewarray     #114                // class java/lang/Class
      25: dup
      26: iconst_0
      27: ldc           #115                // class com/vladsch/flexmark/ast/BlankLine
      29: aastore
      30: invokevirtual #116                // Method getLastChildAnyNot:([Ljava/lang/Class;)Lcom/vladsch/flexmark/ast/Node;
      33: if_acmpne     40
      36: iconst_1
      37: goto          41
      40: iconst_0
      41: istore        4
      43: iload         4
      45: ifne          51
      48: goto          77
      51: aload_3
      52: astore_2
      53: aload_1
      54: instanceof    #117                // class com/vladsch/flexmark/ast/BlankLineContainer
      57: ifeq          62
      60: aload_1
      61: astore_3
      62: aload_1
      63: getfield      #2                  // Field parent:Lcom/vladsch/flexmark/ast/Node;
      66: astore_1
      67: aload_1
      68: ifnonnull     74
      71: goto          77
      74: goto          9
      77: aload_2
      78: areturn

  public void moveTrailingBlankLines();
    Code:
       0: aload_0
       1: invokevirtual #118                // Method getLastChild:()Lcom/vladsch/flexmark/ast/Node;
       4: astore_1
       5: aload_1
       6: instanceof    #115                // class com/vladsch/flexmark/ast/BlankLine
       9: ifeq          58
      12: aload_0
      13: invokevirtual #119                // Method getBlankLineSibling:()Lcom/vladsch/flexmark/ast/Node;
      16: astore_2
      17: aload_2
      18: ifnull        58
      21: aload_1
      22: instanceof    #115                // class com/vladsch/flexmark/ast/BlankLine
      25: ifeq          47
      28: aload_1
      29: invokevirtual #120                // Method getPrevious:()Lcom/vladsch/flexmark/ast/Node;
      32: astore_3
      33: aload_1
      34: invokevirtual #25                 // Method unlink:()V
      37: aload_2
      38: aload_1
      39: invokevirtual #121                // Method insertAfter:(Lcom/vladsch/flexmark/ast/Node;)V
      42: aload_3
      43: astore_1
      44: goto          21
      47: aload_0
      48: invokevirtual #122                // Method setCharsFromContentOnly:()V
      51: aload_2
      52: invokevirtual #9                  // Method getParent:()Lcom/vladsch/flexmark/ast/Node;
      55: invokevirtual #122                // Method setCharsFromContentOnly:()V
      58: return

  public int getLineNumber();
    Code:
       0: aload_0
       1: invokevirtual #123                // Method getStartLineNumber:()I
       4: ireturn

  public int getStartLineNumber();
    Code:
       0: aload_0
       1: invokevirtual #124                // Method getDocument:()Lcom/vladsch/flexmark/ast/Document;
       4: aload_0
       5: getfield      #8                  // Field chars:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       8: invokeinterface #31,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
      13: invokevirtual #125                // Method com/vladsch/flexmark/ast/Document.getLineNumber:(I)I
      16: ireturn

  public int getEndLineNumber();
    Code:
       0: aload_0
       1: getfield      #8                  // Field chars:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: invokeinterface #32,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
       9: istore_1
      10: aload_0
      11: invokevirtual #124                // Method getDocument:()Lcom/vladsch/flexmark/ast/Document;
      14: iload_1
      15: ifle          24
      18: iload_1
      19: iconst_1
      20: isub
      21: goto          25
      24: iload_1
      25: invokevirtual #125                // Method com/vladsch/flexmark/ast/Document.getLineNumber:(I)I
      28: ireturn

  public com.vladsch.flexmark.util.sequence.BasedSequence[] getSegmentsForChars();
    Code:
       0: aload_0
       1: invokevirtual #64                 // Method getSegments:()[Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence getCharsFromSegments();
    Code:
       0: aload_0
       1: invokevirtual #126                // Method getSegmentsForChars:()[Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: invokestatic  #127                // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
       7: aload_0
       8: getfield      #8                  // Field chars:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      11: iconst_0
      12: iconst_0
      13: invokeinterface #47,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      18: invokestatic  #128                // Method com/vladsch/flexmark/util/sequence/SegmentedSequence.of:(Ljava/util/List;Lcom/vladsch/flexmark/util/sequence/BasedSequence;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      21: areturn

  public void setCharsFromSegments();
    Code:
       0: aload_0
       1: aload_0
       2: invokevirtual #129                // Method getCharsFromSegments:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       5: invokevirtual #70                 // Method setChars:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
       8: return

  static {};
    Code:
       0: getstatic     #130                // Field com/vladsch/flexmark/util/sequence/BasedSequence.EMPTY_ARRAY:[Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       3: putstatic     #131                // Field EMPTY_SEGMENTS:[Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       6: return
}
