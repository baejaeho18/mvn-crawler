Compiled from "NodeAdaptedVisitor.java"
public abstract class com.vladsch.flexmark.ast.NodeAdaptedVisitor<H extends com.vladsch.flexmark.ast.NodeAdaptingVisitHandler<?, ?>> {
  protected final java.util.Map<java.lang.Class<?>, H> myCustomHandlersMap;

  public com.vladsch.flexmark.ast.NodeAdaptedVisitor(H...);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/HashMap
       8: dup
       9: invokespecial #3                  // Method java/util/HashMap."<init>":()V
      12: putfield      #4                  // Field myCustomHandlersMap:Ljava/util/Map;
      15: aload_0
      16: aload_1
      17: invokevirtual #5                  // Method addHandlers:([Lcom/vladsch/flexmark/ast/NodeAdaptingVisitHandler;)Lcom/vladsch/flexmark/ast/NodeAdaptedVisitor;
      20: pop
      21: return

  public com.vladsch.flexmark.ast.NodeAdaptedVisitor(H[]...);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/HashMap
       8: dup
       9: invokespecial #3                  // Method java/util/HashMap."<init>":()V
      12: putfield      #4                  // Field myCustomHandlersMap:Ljava/util/Map;
      15: aload_0
      16: aload_1
      17: invokevirtual #6                  // Method addHandlers:([[Lcom/vladsch/flexmark/ast/NodeAdaptingVisitHandler;)Lcom/vladsch/flexmark/ast/NodeAdaptedVisitor;
      20: pop
      21: return

  public com.vladsch.flexmark.ast.NodeAdaptedVisitor(java.util.Collection<H>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/HashMap
       8: dup
       9: invokespecial #3                  // Method java/util/HashMap."<init>":()V
      12: putfield      #4                  // Field myCustomHandlersMap:Ljava/util/Map;
      15: aload_0
      16: aload_1
      17: invokevirtual #7                  // Method addHandlers:(Ljava/util/Collection;)Lcom/vladsch/flexmark/ast/NodeAdaptedVisitor;
      20: pop
      21: return

  public com.vladsch.flexmark.ast.NodeAdaptedVisitor<H> addHandlers(H...);
    Code:
       0: aload_1
       1: astore_2
       2: aload_2
       3: arraylength
       4: istore_3
       5: iconst_0
       6: istore        4
       8: iload         4
      10: iload_3
      11: if_icmpge     43
      14: aload_2
      15: iload         4
      17: aaload
      18: astore        5
      20: aload_0
      21: getfield      #4                  // Field myCustomHandlersMap:Ljava/util/Map;
      24: aload         5
      26: invokevirtual #8                  // Method com/vladsch/flexmark/ast/NodeAdaptingVisitHandler.getNodeType:()Ljava/lang/Class;
      29: aload         5
      31: invokeinterface #9,  3            // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      36: pop
      37: iinc          4, 1
      40: goto          8
      43: aload_0
      44: areturn

  public com.vladsch.flexmark.ast.NodeAdaptedVisitor<H> addHandlers(H[]...);
    Code:
       0: aload_1
       1: astore_2
       2: aload_2
       3: arraylength
       4: istore_3
       5: iconst_0
       6: istore        4
       8: iload         4
      10: iload_3
      11: if_icmpge     75
      14: aload_2
      15: iload         4
      17: aaload
      18: astore        5
      20: aload         5
      22: astore        6
      24: aload         6
      26: arraylength
      27: istore        7
      29: iconst_0
      30: istore        8
      32: iload         8
      34: iload         7
      36: if_icmpge     69
      39: aload         6
      41: iload         8
      43: aaload
      44: astore        9
      46: aload_0
      47: getfield      #4                  // Field myCustomHandlersMap:Ljava/util/Map;
      50: aload         9
      52: invokevirtual #8                  // Method com/vladsch/flexmark/ast/NodeAdaptingVisitHandler.getNodeType:()Ljava/lang/Class;
      55: aload         9
      57: invokeinterface #9,  3            // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      62: pop
      63: iinc          8, 1
      66: goto          32
      69: iinc          4, 1
      72: goto          8
      75: aload_0
      76: areturn

  public com.vladsch.flexmark.ast.NodeAdaptedVisitor<H> addHandlers(java.util.Collection<H>);
    Code:
       0: aload_1
       1: invokeinterface #10,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
       6: astore_2
       7: aload_2
       8: invokeinterface #11,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      13: ifeq          44
      16: aload_2
      17: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      22: checkcast     #13                 // class com/vladsch/flexmark/ast/NodeAdaptingVisitHandler
      25: astore_3
      26: aload_0
      27: getfield      #4                  // Field myCustomHandlersMap:Ljava/util/Map;
      30: aload_3
      31: invokevirtual #8                  // Method com/vladsch/flexmark/ast/NodeAdaptingVisitHandler.getNodeType:()Ljava/lang/Class;
      34: aload_3
      35: invokeinterface #9,  3            // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      40: pop
      41: goto          7
      44: aload_0
      45: areturn
}
