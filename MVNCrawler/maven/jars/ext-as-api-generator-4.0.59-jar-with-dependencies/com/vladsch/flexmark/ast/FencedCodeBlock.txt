Compiled from "FencedCodeBlock.java"
public class com.vladsch.flexmark.ast.FencedCodeBlock extends com.vladsch.flexmark.ast.Block implements com.vladsch.flexmark.ast.DoNotDecorate {
  private int fenceIndent;

  private com.vladsch.flexmark.util.sequence.BasedSequence openingMarker;

  private com.vladsch.flexmark.util.sequence.BasedSequence info;

  private com.vladsch.flexmark.util.sequence.BasedSequence closingMarker;

  public void getAstExtra(java.lang.StringBuilder);
    Code:
       0: aload_0
       1: invokevirtual #1                  // Method getContentChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: astore_2
       5: aload_0
       6: invokevirtual #2                  // Method getContentLines:()Ljava/util/List;
       9: invokeinterface #3,  1            // InterfaceMethod java/util/List.size:()I
      14: istore_3
      15: aload_1
      16: aload_0
      17: getfield      #4                  // Field openingMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      20: ldc           #5                  // String open
      22: invokestatic  #6                  // Method segmentSpanChars:(Ljava/lang/StringBuilder;Lcom/vladsch/flexmark/util/sequence/BasedSequence;Ljava/lang/String;)V
      25: aload_1
      26: aload_0
      27: getfield      #7                  // Field info:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      30: ldc           #8                  // String info
      32: invokestatic  #6                  // Method segmentSpanChars:(Ljava/lang/StringBuilder;Lcom/vladsch/flexmark/util/sequence/BasedSequence;Ljava/lang/String;)V
      35: aload_1
      36: aload_2
      37: ldc           #9                  // String content
      39: invokestatic  #10                 // Method segmentSpan:(Ljava/lang/StringBuilder;Lcom/vladsch/flexmark/util/sequence/BasedSequence;Ljava/lang/String;)V
      42: aload_1
      43: ldc           #11                 // String  lines[
      45: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      48: iload_3
      49: invokevirtual #13                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      52: ldc           #14                 // String ]
      54: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      57: pop
      58: aload_1
      59: aload_0
      60: getfield      #15                 // Field closingMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      63: ldc           #16                 // String close
      65: invokestatic  #6                  // Method segmentSpanChars:(Ljava/lang/StringBuilder;Lcom/vladsch/flexmark/util/sequence/BasedSequence;Ljava/lang/String;)V
      68: return

  public com.vladsch.flexmark.util.sequence.BasedSequence[] getSegments();
    Code:
       0: iconst_4
       1: anewarray     #17                 // class com/vladsch/flexmark/util/sequence/BasedSequence
       4: dup
       5: iconst_0
       6: aload_0
       7: getfield      #4                  // Field openingMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      10: aastore
      11: dup
      12: iconst_1
      13: aload_0
      14: getfield      #7                  // Field info:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      17: aastore
      18: dup
      19: iconst_2
      20: aload_0
      21: invokevirtual #1                  // Method getContentChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      24: aastore
      25: dup
      26: iconst_3
      27: aload_0
      28: getfield      #15                 // Field closingMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      31: aastore
      32: areturn

  public com.vladsch.flexmark.ast.FencedCodeBlock();
    Code:
       0: aload_0
       1: invokespecial #18                 // Method com/vladsch/flexmark/ast/Block."<init>":()V
       4: aload_0
       5: getstatic     #19                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       8: putfield      #4                  // Field openingMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      11: aload_0
      12: getstatic     #19                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      15: putfield      #7                  // Field info:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      18: aload_0
      19: getstatic     #19                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      22: putfield      #15                 // Field closingMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      25: return

  public com.vladsch.flexmark.ast.FencedCodeBlock(com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #20                 // Method com/vladsch/flexmark/ast/Block."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
       5: aload_0
       6: getstatic     #19                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       9: putfield      #4                  // Field openingMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      12: aload_0
      13: getstatic     #19                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      16: putfield      #7                  // Field info:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      19: aload_0
      20: getstatic     #19                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      23: putfield      #15                 // Field closingMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      26: return

  public com.vladsch.flexmark.ast.FencedCodeBlock(com.vladsch.flexmark.util.sequence.BasedSequence, com.vladsch.flexmark.util.sequence.BasedSequence, com.vladsch.flexmark.util.sequence.BasedSequence, java.util.List<com.vladsch.flexmark.util.sequence.BasedSequence>, com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: aload_1
       2: aload         4
       4: invokespecial #21                 // Method com/vladsch/flexmark/ast/Block."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;Ljava/util/List;)V
       7: aload_0
       8: getstatic     #19                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      11: putfield      #4                  // Field openingMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      14: aload_0
      15: getstatic     #19                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      18: putfield      #7                  // Field info:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      21: aload_0
      22: getstatic     #19                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      25: putfield      #15                 // Field closingMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      28: aload_0
      29: aload_2
      30: putfield      #4                  // Field openingMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      33: aload_0
      34: aload_3
      35: putfield      #7                  // Field info:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      38: aload_0
      39: aload         5
      41: putfield      #15                 // Field closingMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      44: return

  public com.vladsch.flexmark.util.sequence.BasedSequence getOpeningMarker();
    Code:
       0: aload_0
       1: getfield      #4                  // Field openingMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: areturn

  public void setOpeningMarker(com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field openingMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       5: return

  public void setInfo(com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #7                  // Field info:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       5: return

  public com.vladsch.flexmark.util.sequence.BasedSequence getClosingMarker();
    Code:
       0: aload_0
       1: getfield      #15                 // Field closingMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: areturn

  public void setClosingMarker(com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #15                 // Field closingMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       5: return

  public com.vladsch.flexmark.util.sequence.BasedSequence getOpeningFence();
    Code:
       0: aload_0
       1: getfield      #4                  // Field openingMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence getInfo();
    Code:
       0: aload_0
       1: getfield      #7                  // Field info:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence getClosingFence();
    Code:
       0: aload_0
       1: getfield      #15                 // Field closingMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: areturn

  public int getFenceLength();
    Code:
       0: aload_0
       1: invokevirtual #22                 // Method getInfo:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: invokeinterface #23,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
       9: ireturn

  public int getFenceIndent();
    Code:
       0: aload_0
       1: getfield      #24                 // Field fenceIndent:I
       4: ireturn

  public void setFenceIndent(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #24                 // Field fenceIndent:I
       5: return
}
