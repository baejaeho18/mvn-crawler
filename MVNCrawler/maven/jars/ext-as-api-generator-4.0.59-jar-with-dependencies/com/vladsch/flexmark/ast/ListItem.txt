Compiled from "ListItem.java"
public abstract class com.vladsch.flexmark.ast.ListItem extends com.vladsch.flexmark.ast.Block implements com.vladsch.flexmark.ast.ParagraphItemContainer,com.vladsch.flexmark.ast.BlankLineContainer {
  protected com.vladsch.flexmark.util.sequence.BasedSequence openingMarker;

  protected com.vladsch.flexmark.util.sequence.BasedSequence markerSuffix;

  private boolean tight;

  private boolean hadBlankAfterItemParagraph;

  private boolean containsBlankLine;

  static final boolean $assertionsDisabled;

  public void getAstExtra(java.lang.StringBuilder);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #1                  // Field openingMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       5: ldc           #2                  // String open
       7: invokestatic  #3                  // Method segmentSpanChars:(Ljava/lang/StringBuilder;Lcom/vladsch/flexmark/util/sequence/BasedSequence;Ljava/lang/String;)V
      10: aload_1
      11: aload_0
      12: getfield      #4                  // Field markerSuffix:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      15: ldc           #5                  // String openSuffix
      17: invokestatic  #3                  // Method segmentSpanChars:(Ljava/lang/StringBuilder;Lcom/vladsch/flexmark/util/sequence/BasedSequence;Ljava/lang/String;)V
      20: aload_0
      21: invokevirtual #6                  // Method isTight:()Z
      24: ifeq          37
      27: aload_1
      28: ldc           #7                  // String  isTight
      30: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: pop
      34: goto          44
      37: aload_1
      38: ldc           #9                  // String  isLoose
      40: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      43: pop
      44: aload_0
      45: invokevirtual #10                 // Method isHadBlankAfterItemParagraph:()Z
      48: ifeq          61
      51: aload_1
      52: ldc           #11                 // String  hadBlankLineAfter
      54: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      57: pop
      58: goto          75
      61: aload_0
      62: invokevirtual #12                 // Method isContainsBlankLine:()Z
      65: ifeq          75
      68: aload_1
      69: ldc           #13                 // String  hadBlankLine
      71: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      74: pop
      75: return

  public com.vladsch.flexmark.util.sequence.BasedSequence[] getSegments();
    Code:
       0: iconst_2
       1: anewarray     #14                 // class com/vladsch/flexmark/util/sequence/BasedSequence
       4: dup
       5: iconst_0
       6: aload_0
       7: getfield      #1                  // Field openingMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      10: aastore
      11: dup
      12: iconst_1
      13: aload_0
      14: getfield      #4                  // Field markerSuffix:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      17: aastore
      18: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence getOpeningMarker();
    Code:
       0: aload_0
       1: getfield      #1                  // Field openingMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: areturn

  public void setOpeningMarker(com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field openingMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       5: return

  public com.vladsch.flexmark.util.sequence.BasedSequence getMarkerSuffix();
    Code:
       0: aload_0
       1: getfield      #4                  // Field markerSuffix:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: areturn

  public void setMarkerSuffix(com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: getstatic     #15                 // Field $assertionsDisabled:Z
       3: ifne          41
       6: aload_1
       7: invokeinterface #16,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.isNull:()Z
      12: ifne          41
      15: aload_0
      16: getfield      #1                  // Field openingMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      19: invokeinterface #17,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getBase:()Ljava/lang/Object;
      24: aload_1
      25: invokeinterface #17,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getBase:()Ljava/lang/Object;
      30: if_acmpeq     41
      33: new           #18                 // class java/lang/AssertionError
      36: dup
      37: invokespecial #19                 // Method java/lang/AssertionError."<init>":()V
      40: athrow
      41: aload_0
      42: aload_1
      43: putfield      #4                  // Field markerSuffix:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      46: return

  public void setTight(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #20                 // Field tight:Z
       5: return

  public void setLoose(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: ifne          9
       5: iconst_1
       6: goto          10
       9: iconst_0
      10: putfield      #20                 // Field tight:Z
      13: return

  public boolean isTight();
    Code:
       0: aload_0
       1: getfield      #20                 // Field tight:Z
       4: ifeq          18
       7: aload_0
       8: invokevirtual #21                 // Method isInTightList:()Z
      11: ifeq          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn

  public boolean isOwnTight();
    Code:
       0: aload_0
       1: getfield      #20                 // Field tight:Z
       4: ireturn

  public boolean isLoose();
    Code:
       0: aload_0
       1: invokevirtual #6                  // Method isTight:()Z
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public boolean isParagraphInTightListItem(com.vladsch.flexmark.ast.Paragraph);
    Code:
       0: aload_0
       1: invokevirtual #6                  // Method isTight:()Z
       4: ifne          9
       7: iconst_0
       8: ireturn
       9: aload_0
      10: aload_1
      11: invokevirtual #22                 // Method isItemParagraph:(Lcom/vladsch/flexmark/ast/Paragraph;)Z
      14: ireturn

  public boolean isItemParagraph(com.vladsch.flexmark.ast.Paragraph);
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method getFirstChild:()Lcom/vladsch/flexmark/ast/Node;
       4: astore_2
       5: aload_2
       6: ifnull        24
       9: aload_2
      10: instanceof    #24                 // class com/vladsch/flexmark/ast/Paragraph
      13: ifne          24
      16: aload_2
      17: invokevirtual #25                 // Method com/vladsch/flexmark/ast/Node.getNext:()Lcom/vladsch/flexmark/ast/Node;
      20: astore_2
      21: goto          5
      24: aload_2
      25: aload_1
      26: if_acmpne     33
      29: iconst_1
      30: goto          34
      33: iconst_0
      34: ireturn

  public boolean isParagraphWrappingDisabled(com.vladsch.flexmark.ast.Paragraph, com.vladsch.flexmark.parser.ListOptions, com.vladsch.flexmark.util.options.DataHolder);
    Code:
       0: getstatic     #15                 // Field $assertionsDisabled:Z
       3: ifne          22
       6: aload_1
       7: invokevirtual #26                 // Method com/vladsch/flexmark/ast/Paragraph.getParent:()Lcom/vladsch/flexmark/ast/Block;
      10: aload_0
      11: if_acmpeq     22
      14: new           #18                 // class java/lang/AssertionError
      17: dup
      18: invokespecial #19                 // Method java/lang/AssertionError."<init>":()V
      21: athrow
      22: aload_2
      23: aload_1
      24: invokevirtual #27                 // Method com/vladsch/flexmark/parser/ListOptions.isInTightListItem:(Lcom/vladsch/flexmark/ast/Paragraph;)Z
      27: ireturn

  public boolean isInTightList();
    Code:
       0: aload_0
       1: invokevirtual #28                 // Method getParent:()Lcom/vladsch/flexmark/ast/Block;
       4: instanceof    #29                 // class com/vladsch/flexmark/ast/ListBlock
       7: ifeq          23
      10: aload_0
      11: invokevirtual #28                 // Method getParent:()Lcom/vladsch/flexmark/ast/Block;
      14: checkcast     #29                 // class com/vladsch/flexmark/ast/ListBlock
      17: invokevirtual #30                 // Method com/vladsch/flexmark/ast/ListBlock.isTight:()Z
      20: ifeq          27
      23: iconst_1
      24: goto          28
      27: iconst_0
      28: ireturn

  public boolean isHadBlankAfterItemParagraph();
    Code:
       0: aload_0
       1: getfield      #31                 // Field hadBlankAfterItemParagraph:Z
       4: ireturn

  public boolean isContainsBlankLine();
    Code:
       0: aload_0
       1: getfield      #32                 // Field containsBlankLine:Z
       4: ireturn

  public void setContainsBlankLine(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #32                 // Field containsBlankLine:Z
       5: return

  public void setHadBlankAfterItemParagraph(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #31                 // Field hadBlankAfterItemParagraph:Z
       5: return

  public com.vladsch.flexmark.ast.Node getLastBlankLineChild();
    Code:
       0: aload_0
       1: invokevirtual #33                 // Method getLastChild:()Lcom/vladsch/flexmark/ast/Node;
       4: areturn

  public com.vladsch.flexmark.ast.ListItem();
    Code:
       0: aload_0
       1: invokespecial #34                 // Method com/vladsch/flexmark/ast/Block."<init>":()V
       4: aload_0
       5: getstatic     #35                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       8: putfield      #1                  // Field openingMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      11: aload_0
      12: getstatic     #35                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      15: putfield      #4                  // Field markerSuffix:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      18: aload_0
      19: iconst_1
      20: putfield      #20                 // Field tight:Z
      23: aload_0
      24: iconst_0
      25: putfield      #31                 // Field hadBlankAfterItemParagraph:Z
      28: aload_0
      29: iconst_0
      30: putfield      #32                 // Field containsBlankLine:Z
      33: return

  public com.vladsch.flexmark.ast.ListItem(com.vladsch.flexmark.ast.ListItem);
    Code:
       0: aload_0
       1: invokespecial #34                 // Method com/vladsch/flexmark/ast/Block."<init>":()V
       4: aload_0
       5: getstatic     #35                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       8: putfield      #1                  // Field openingMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      11: aload_0
      12: getstatic     #35                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      15: putfield      #4                  // Field markerSuffix:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      18: aload_0
      19: iconst_1
      20: putfield      #20                 // Field tight:Z
      23: aload_0
      24: iconst_0
      25: putfield      #31                 // Field hadBlankAfterItemParagraph:Z
      28: aload_0
      29: iconst_0
      30: putfield      #32                 // Field containsBlankLine:Z
      33: aload_0
      34: aload_1
      35: getfield      #1                  // Field openingMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      38: putfield      #1                  // Field openingMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      41: aload_0
      42: aload_1
      43: getfield      #4                  // Field markerSuffix:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      46: putfield      #4                  // Field markerSuffix:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      49: aload_0
      50: aload_1
      51: getfield      #20                 // Field tight:Z
      54: putfield      #20                 // Field tight:Z
      57: aload_0
      58: aload_1
      59: getfield      #31                 // Field hadBlankAfterItemParagraph:Z
      62: putfield      #31                 // Field hadBlankAfterItemParagraph:Z
      65: aload_0
      66: aload_1
      67: invokevirtual #36                 // Method takeChildren:(Lcom/vladsch/flexmark/ast/Node;)V
      70: aload_0
      71: invokevirtual #37                 // Method setCharsFromContent:()V
      74: return

  public com.vladsch.flexmark.ast.ListItem(com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #38                 // Method com/vladsch/flexmark/ast/Block."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
       5: aload_0
       6: getstatic     #35                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       9: putfield      #1                  // Field openingMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      12: aload_0
      13: getstatic     #35                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      16: putfield      #4                  // Field markerSuffix:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      19: aload_0
      20: iconst_1
      21: putfield      #20                 // Field tight:Z
      24: aload_0
      25: iconst_0
      26: putfield      #31                 // Field hadBlankAfterItemParagraph:Z
      29: aload_0
      30: iconst_0
      31: putfield      #32                 // Field containsBlankLine:Z
      34: return

  public com.vladsch.flexmark.ast.ListItem(com.vladsch.flexmark.util.sequence.BasedSequence, java.util.List<com.vladsch.flexmark.util.sequence.BasedSequence>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #39                 // Method com/vladsch/flexmark/ast/Block."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;Ljava/util/List;)V
       6: aload_0
       7: getstatic     #35                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      10: putfield      #1                  // Field openingMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      13: aload_0
      14: getstatic     #35                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      17: putfield      #4                  // Field markerSuffix:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      20: aload_0
      21: iconst_1
      22: putfield      #20                 // Field tight:Z
      25: aload_0
      26: iconst_0
      27: putfield      #31                 // Field hadBlankAfterItemParagraph:Z
      30: aload_0
      31: iconst_0
      32: putfield      #32                 // Field containsBlankLine:Z
      35: return

  public com.vladsch.flexmark.ast.ListItem(com.vladsch.flexmark.ast.BlockContent);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #40                 // Method com/vladsch/flexmark/ast/Block."<init>":(Lcom/vladsch/flexmark/ast/BlockContent;)V
       5: aload_0
       6: getstatic     #35                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       9: putfield      #1                  // Field openingMarker:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      12: aload_0
      13: getstatic     #35                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      16: putfield      #4                  // Field markerSuffix:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      19: aload_0
      20: iconst_1
      21: putfield      #20                 // Field tight:Z
      24: aload_0
      25: iconst_0
      26: putfield      #31                 // Field hadBlankAfterItemParagraph:Z
      29: aload_0
      30: iconst_0
      31: putfield      #32                 // Field containsBlankLine:Z
      34: return

  static {};
    Code:
       0: ldc           #41                 // class com/vladsch/flexmark/ast/ListItem
       2: invokevirtual #42                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #15                 // Field $assertionsDisabled:Z
      16: return
}
