Compiled from "ClassifyingBlockTracker.java"
public class com.vladsch.flexmark.ast.util.ClassifyingBlockTracker implements com.vladsch.flexmark.util.BlockTracker,com.vladsch.flexmark.internal.BlockParserTracker {
  protected final com.vladsch.flexmark.util.collection.ClassificationBag<java.lang.Class<?>, com.vladsch.flexmark.ast.Node> nodeClassifier;

  protected final com.vladsch.flexmark.util.collection.OrderedMultiMap<com.vladsch.flexmark.parser.block.BlockParser, com.vladsch.flexmark.ast.Block> allBlockParsersMap;

  public com.vladsch.flexmark.ast.util.ClassifyingBlockTracker();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class com/vladsch/flexmark/util/collection/ClassificationBag
       8: dup
       9: getstatic     #3                  // Field com/vladsch/flexmark/util/mappers/NodeClassifier.INSTANCE:Lcom/vladsch/flexmark/util/mappers/NodeClassifier;
      12: invokespecial #4                  // Method com/vladsch/flexmark/util/collection/ClassificationBag."<init>":(Lcom/vladsch/flexmark/util/Computable;)V
      15: putfield      #5                  // Field nodeClassifier:Lcom/vladsch/flexmark/util/collection/ClassificationBag;
      18: aload_0
      19: new           #6                  // class com/vladsch/flexmark/util/collection/OrderedMultiMap
      22: dup
      23: new           #7                  // class com/vladsch/flexmark/ast/util/ClassifyingBlockTracker$1
      26: dup
      27: aload_0
      28: invokespecial #8                  // Method com/vladsch/flexmark/ast/util/ClassifyingBlockTracker$1."<init>":(Lcom/vladsch/flexmark/ast/util/ClassifyingBlockTracker;)V
      31: invokespecial #9                  // Method com/vladsch/flexmark/util/collection/OrderedMultiMap."<init>":(Lcom/vladsch/flexmark/util/collection/CollectionHost;)V
      34: putfield      #10                 // Field allBlockParsersMap:Lcom/vladsch/flexmark/util/collection/OrderedMultiMap;
      37: return

  public com.vladsch.flexmark.util.collection.OrderedSet<com.vladsch.flexmark.parser.block.BlockParser> allBlockParsers();
    Code:
       0: aload_0
       1: getfield      #10                 // Field allBlockParsersMap:Lcom/vladsch/flexmark/util/collection/OrderedMultiMap;
       4: invokevirtual #11                 // Method com/vladsch/flexmark/util/collection/OrderedMultiMap.keySet:()Lcom/vladsch/flexmark/util/collection/OrderedSet;
       7: areturn

  public com.vladsch.flexmark.util.collection.OrderedSet<com.vladsch.flexmark.ast.Block> allBlocks();
    Code:
       0: aload_0
       1: getfield      #10                 // Field allBlockParsersMap:Lcom/vladsch/flexmark/util/collection/OrderedMultiMap;
       4: invokevirtual #12                 // Method com/vladsch/flexmark/util/collection/OrderedMultiMap.valueSet:()Lcom/vladsch/flexmark/util/collection/OrderedSet;
       7: areturn

  public com.vladsch.flexmark.ast.Block getValue(com.vladsch.flexmark.parser.block.BlockParser);
    Code:
       0: aload_0
       1: getfield      #10                 // Field allBlockParsersMap:Lcom/vladsch/flexmark/util/collection/OrderedMultiMap;
       4: aload_1
       5: invokevirtual #13                 // Method com/vladsch/flexmark/util/collection/OrderedMultiMap.getKeyValue:(Ljava/lang/Object;)Ljava/lang/Object;
       8: checkcast     #14                 // class com/vladsch/flexmark/ast/Block
      11: areturn

  public com.vladsch.flexmark.parser.block.BlockParser getKey(com.vladsch.flexmark.ast.Block);
    Code:
       0: aload_0
       1: getfield      #10                 // Field allBlockParsersMap:Lcom/vladsch/flexmark/util/collection/OrderedMultiMap;
       4: aload_1
       5: invokevirtual #15                 // Method com/vladsch/flexmark/util/collection/OrderedMultiMap.getValueKey:(Ljava/lang/Object;)Ljava/lang/Object;
       8: checkcast     #16                 // class com/vladsch/flexmark/parser/block/BlockParser
      11: areturn

  public boolean containsKey(com.vladsch.flexmark.parser.block.BlockParser);
    Code:
       0: aload_0
       1: getfield      #10                 // Field allBlockParsersMap:Lcom/vladsch/flexmark/util/collection/OrderedMultiMap;
       4: aload_1
       5: invokevirtual #17                 // Method com/vladsch/flexmark/util/collection/OrderedMultiMap.containsKey:(Ljava/lang/Object;)Z
       8: ireturn

  public boolean containsValue(com.vladsch.flexmark.ast.Block);
    Code:
       0: aload_0
       1: getfield      #10                 // Field allBlockParsersMap:Lcom/vladsch/flexmark/util/collection/OrderedMultiMap;
       4: aload_1
       5: invokevirtual #18                 // Method com/vladsch/flexmark/util/collection/OrderedMultiMap.containsValue:(Ljava/lang/Object;)Z
       8: ireturn

  public com.vladsch.flexmark.util.collection.ClassificationBag<java.lang.Class<?>, com.vladsch.flexmark.ast.Node> getNodeClassifier();
    Code:
       0: aload_0
       1: getfield      #5                  // Field nodeClassifier:Lcom/vladsch/flexmark/util/collection/ClassificationBag;
       4: areturn

  public void blockParserAdded(com.vladsch.flexmark.parser.block.BlockParser);
    Code:
       0: aload_0
       1: getfield      #10                 // Field allBlockParsersMap:Lcom/vladsch/flexmark/util/collection/OrderedMultiMap;
       4: aload_1
       5: aload_1
       6: invokeinterface #19,  1           // InterfaceMethod com/vladsch/flexmark/parser/block/BlockParser.getBlock:()Lcom/vladsch/flexmark/ast/Block;
      11: invokevirtual #20                 // Method com/vladsch/flexmark/util/collection/OrderedMultiMap.putKeyValue:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      14: pop
      15: return

  public void blockParserRemoved(com.vladsch.flexmark.parser.block.BlockParser);
    Code:
       0: aload_0
       1: getfield      #10                 // Field allBlockParsersMap:Lcom/vladsch/flexmark/util/collection/OrderedMultiMap;
       4: aload_1
       5: invokevirtual #21                 // Method com/vladsch/flexmark/util/collection/OrderedMultiMap.removeKey:(Ljava/lang/Object;)Ljava/lang/Object;
       8: pop
       9: return

  private void validateLinked(com.vladsch.flexmark.ast.Node);
    Code:
       0: aload_1
       1: invokevirtual #22                 // Method com/vladsch/flexmark/ast/Node.getNext:()Lcom/vladsch/flexmark/ast/Node;
       4: ifnonnull     46
       7: aload_1
       8: invokevirtual #23                 // Method com/vladsch/flexmark/ast/Node.getParent:()Lcom/vladsch/flexmark/ast/Node;
      11: ifnonnull     46
      14: new           #24                 // class java/lang/IllegalStateException
      17: dup
      18: new           #25                 // class java/lang/StringBuilder
      21: dup
      22: invokespecial #26                 // Method java/lang/StringBuilder."<init>":()V
      25: ldc           #27                 // String Added block
      27: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: aload_1
      31: invokevirtual #29                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      34: ldc           #30                 // String  is not linked into the AST
      36: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: invokevirtual #31                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      42: invokespecial #32                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      45: athrow
      46: return

  public void blockAdded(com.vladsch.flexmark.ast.Block);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #33                 // Method validateLinked:(Lcom/vladsch/flexmark/ast/Node;)V
       5: aload_0
       6: getfield      #10                 // Field allBlockParsersMap:Lcom/vladsch/flexmark/util/collection/OrderedMultiMap;
       9: aload_1
      10: aconst_null
      11: invokevirtual #34                 // Method com/vladsch/flexmark/util/collection/OrderedMultiMap.putValueKey:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      14: pop
      15: return

  public void blockAddedWithChildren(com.vladsch.flexmark.ast.Block);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #33                 // Method validateLinked:(Lcom/vladsch/flexmark/ast/Node;)V
       5: aload_0
       6: getfield      #10                 // Field allBlockParsersMap:Lcom/vladsch/flexmark/util/collection/OrderedMultiMap;
       9: aload_1
      10: aconst_null
      11: invokevirtual #34                 // Method com/vladsch/flexmark/util/collection/OrderedMultiMap.putValueKey:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      14: pop
      15: aload_0
      16: aload_1
      17: invokevirtual #35                 // Method com/vladsch/flexmark/ast/Block.getChildren:()Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterable;
      20: invokespecial #36                 // Method addBlocks:(Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterable;)V
      23: return

  public void blockAddedWithDescendants(com.vladsch.flexmark.ast.Block);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #33                 // Method validateLinked:(Lcom/vladsch/flexmark/ast/Node;)V
       5: aload_0
       6: getfield      #10                 // Field allBlockParsersMap:Lcom/vladsch/flexmark/util/collection/OrderedMultiMap;
       9: aload_1
      10: aconst_null
      11: invokevirtual #34                 // Method com/vladsch/flexmark/util/collection/OrderedMultiMap.putValueKey:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      14: pop
      15: aload_0
      16: aload_1
      17: invokevirtual #37                 // Method com/vladsch/flexmark/ast/Block.getDescendants:()Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterable;
      20: invokespecial #36                 // Method addBlocks:(Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterable;)V
      23: return

  private void addBlocks(com.vladsch.flexmark.util.collection.iteration.ReversiblePeekingIterable<com.vladsch.flexmark.ast.Node>);
    Code:
       0: aload_1
       1: invokeinterface #38,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterable.iterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterator;
       6: astore_2
       7: aload_2
       8: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      13: ifeq          49
      16: aload_2
      17: invokeinterface #40,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      22: checkcast     #41                 // class com/vladsch/flexmark/ast/Node
      25: astore_3
      26: aload_3
      27: instanceof    #14                 // class com/vladsch/flexmark/ast/Block
      30: ifeq          46
      33: aload_0
      34: getfield      #10                 // Field allBlockParsersMap:Lcom/vladsch/flexmark/util/collection/OrderedMultiMap;
      37: aload_3
      38: checkcast     #14                 // class com/vladsch/flexmark/ast/Block
      41: aconst_null
      42: invokevirtual #34                 // Method com/vladsch/flexmark/util/collection/OrderedMultiMap.putValueKey:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      45: pop
      46: goto          7
      49: return

  private void validateUnlinked(com.vladsch.flexmark.ast.Node);
    Code:
       0: aload_1
       1: invokevirtual #22                 // Method com/vladsch/flexmark/ast/Node.getNext:()Lcom/vladsch/flexmark/ast/Node;
       4: ifnonnull     14
       7: aload_1
       8: invokevirtual #23                 // Method com/vladsch/flexmark/ast/Node.getParent:()Lcom/vladsch/flexmark/ast/Node;
      11: ifnull        46
      14: new           #24                 // class java/lang/IllegalStateException
      17: dup
      18: new           #25                 // class java/lang/StringBuilder
      21: dup
      22: invokespecial #26                 // Method java/lang/StringBuilder."<init>":()V
      25: ldc           #42                 // String Removed block
      27: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: aload_1
      31: invokevirtual #29                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      34: ldc           #43                 // String  is still linked in the AST
      36: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: invokevirtual #31                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      42: invokespecial #32                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      45: athrow
      46: return

  public void blockRemoved(com.vladsch.flexmark.ast.Block);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #44                 // Method validateUnlinked:(Lcom/vladsch/flexmark/ast/Node;)V
       5: aload_0
       6: getfield      #10                 // Field allBlockParsersMap:Lcom/vladsch/flexmark/util/collection/OrderedMultiMap;
       9: aload_1
      10: invokevirtual #45                 // Method com/vladsch/flexmark/util/collection/OrderedMultiMap.removeValue:(Ljava/lang/Object;)Ljava/lang/Object;
      13: pop
      14: return

  public void blockRemovedWithChildren(com.vladsch.flexmark.ast.Block);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #44                 // Method validateUnlinked:(Lcom/vladsch/flexmark/ast/Node;)V
       5: aload_0
       6: getfield      #10                 // Field allBlockParsersMap:Lcom/vladsch/flexmark/util/collection/OrderedMultiMap;
       9: aload_1
      10: invokevirtual #45                 // Method com/vladsch/flexmark/util/collection/OrderedMultiMap.removeValue:(Ljava/lang/Object;)Ljava/lang/Object;
      13: pop
      14: aload_0
      15: aload_1
      16: invokevirtual #35                 // Method com/vladsch/flexmark/ast/Block.getChildren:()Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterable;
      19: invokespecial #46                 // Method removeBlocks:(Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterable;)V
      22: return

  public void blockRemovedWithDescendants(com.vladsch.flexmark.ast.Block);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #44                 // Method validateUnlinked:(Lcom/vladsch/flexmark/ast/Node;)V
       5: aload_0
       6: getfield      #10                 // Field allBlockParsersMap:Lcom/vladsch/flexmark/util/collection/OrderedMultiMap;
       9: aload_1
      10: invokevirtual #45                 // Method com/vladsch/flexmark/util/collection/OrderedMultiMap.removeValue:(Ljava/lang/Object;)Ljava/lang/Object;
      13: pop
      14: aload_0
      15: aload_1
      16: invokevirtual #37                 // Method com/vladsch/flexmark/ast/Block.getDescendants:()Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterable;
      19: invokespecial #46                 // Method removeBlocks:(Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterable;)V
      22: return

  private void removeBlocks(com.vladsch.flexmark.util.collection.iteration.ReversiblePeekingIterable<com.vladsch.flexmark.ast.Node>);
    Code:
       0: aload_1
       1: invokeinterface #38,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterable.iterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterator;
       6: astore_2
       7: aload_2
       8: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      13: ifeq          45
      16: aload_2
      17: invokeinterface #40,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      22: checkcast     #41                 // class com/vladsch/flexmark/ast/Node
      25: astore_3
      26: aload_3
      27: instanceof    #14                 // class com/vladsch/flexmark/ast/Block
      30: ifeq          42
      33: aload_0
      34: getfield      #10                 // Field allBlockParsersMap:Lcom/vladsch/flexmark/util/collection/OrderedMultiMap;
      37: aload_3
      38: invokevirtual #45                 // Method com/vladsch/flexmark/util/collection/OrderedMultiMap.removeValue:(Ljava/lang/Object;)Ljava/lang/Object;
      41: pop
      42: goto          7
      45: return
}
