Compiled from "ClassifyingBlockTracker.java"
class com.vladsch.flexmark.ast.util.ClassifyingBlockTracker$1 implements com.vladsch.flexmark.util.collection.CollectionHost<com.vladsch.flexmark.util.Paired<com.vladsch.flexmark.parser.block.BlockParser, com.vladsch.flexmark.ast.Block>> {
  final com.vladsch.flexmark.ast.util.ClassifyingBlockTracker this$0;

  com.vladsch.flexmark.ast.util.ClassifyingBlockTracker$1(com.vladsch.flexmark.ast.util.ClassifyingBlockTracker);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lcom/vladsch/flexmark/ast/util/ClassifyingBlockTracker;
       5: aload_0
       6: invokespecial #2                  // Method java/lang/Object."<init>":()V
       9: return

  public void adding(int, com.vladsch.flexmark.util.Paired<com.vladsch.flexmark.parser.block.BlockParser, com.vladsch.flexmark.ast.Block>, java.lang.Object);
    Code:
       0: aload_2
       1: invokeinterface #3,  1            // InterfaceMethod com/vladsch/flexmark/util/Paired.getSecond:()Ljava/lang/Object;
       6: checkcast     #4                  // class com/vladsch/flexmark/ast/Block
       9: astore        4
      11: aload         4
      13: ifnull        29
      16: aload_0
      17: getfield      #1                  // Field this$0:Lcom/vladsch/flexmark/ast/util/ClassifyingBlockTracker;
      20: getfield      #5                  // Field com/vladsch/flexmark/ast/util/ClassifyingBlockTracker.nodeClassifier:Lcom/vladsch/flexmark/util/collection/ClassificationBag;
      23: aload         4
      25: invokevirtual #6                  // Method com/vladsch/flexmark/util/collection/ClassificationBag.add:(Ljava/lang/Object;)Z
      28: pop
      29: return

  public java.lang.Object removing(int, com.vladsch.flexmark.util.Paired<com.vladsch.flexmark.parser.block.BlockParser, com.vladsch.flexmark.ast.Block>);
    Code:
       0: aload_2
       1: invokeinterface #3,  1            // InterfaceMethod com/vladsch/flexmark/util/Paired.getSecond:()Ljava/lang/Object;
       6: checkcast     #4                  // class com/vladsch/flexmark/ast/Block
       9: astore_3
      10: aload_3
      11: ifnull        26
      14: aload_0
      15: getfield      #1                  // Field this$0:Lcom/vladsch/flexmark/ast/util/ClassifyingBlockTracker;
      18: getfield      #5                  // Field com/vladsch/flexmark/ast/util/ClassifyingBlockTracker.nodeClassifier:Lcom/vladsch/flexmark/util/collection/ClassificationBag;
      21: aload_3
      22: invokevirtual #7                  // Method com/vladsch/flexmark/util/collection/ClassificationBag.remove:(Ljava/lang/Object;)Z
      25: pop
      26: aload_2
      27: areturn

  public void clearing();
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lcom/vladsch/flexmark/ast/util/ClassifyingBlockTracker;
       4: getfield      #5                  // Field com/vladsch/flexmark/ast/util/ClassifyingBlockTracker.nodeClassifier:Lcom/vladsch/flexmark/util/collection/ClassificationBag;
       7: invokevirtual #8                  // Method com/vladsch/flexmark/util/collection/ClassificationBag.clear:()V
      10: return

  public void addingNulls(int);
    Code:
       0: return

  public boolean skipHostUpdate();
    Code:
       0: iconst_0
       1: ireturn

  public int getIteratorModificationCount();
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lcom/vladsch/flexmark/ast/util/ClassifyingBlockTracker;
       4: getfield      #9                  // Field com/vladsch/flexmark/ast/util/ClassifyingBlockTracker.allBlockParsersMap:Lcom/vladsch/flexmark/util/collection/OrderedMultiMap;
       7: invokevirtual #10                 // Method com/vladsch/flexmark/util/collection/OrderedMultiMap.getModificationCount:()I
      10: ireturn

  public java.lang.Object removing(int, java.lang.Object);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: checkcast     #11                 // class com/vladsch/flexmark/util/Paired
       6: invokevirtual #12                 // Method removing:(ILcom/vladsch/flexmark/util/Paired;)Ljava/lang/Object;
       9: areturn

  public void adding(int, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: checkcast     #11                 // class com/vladsch/flexmark/util/Paired
       6: aload_3
       7: invokevirtual #13                 // Method adding:(ILcom/vladsch/flexmark/util/Paired;Ljava/lang/Object;)V
      10: return
}
