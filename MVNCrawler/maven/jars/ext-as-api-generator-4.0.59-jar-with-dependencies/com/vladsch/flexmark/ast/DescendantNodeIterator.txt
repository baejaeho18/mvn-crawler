Compiled from "DescendantNodeIterator.java"
public class com.vladsch.flexmark.ast.DescendantNodeIterator implements com.vladsch.flexmark.util.collection.iteration.ReversiblePeekingIterator<com.vladsch.flexmark.ast.Node> {
  private final boolean isReversed;

  private com.vladsch.flexmark.util.collection.iteration.ReversiblePeekingIterator<com.vladsch.flexmark.ast.Node> iterator;

  private java.util.Stack<com.vladsch.flexmark.util.collection.iteration.ReversiblePeekingIterator<com.vladsch.flexmark.ast.Node>> iteratorStack;

  private com.vladsch.flexmark.ast.Node result;

  public com.vladsch.flexmark.ast.DescendantNodeIterator(com.vladsch.flexmark.util.collection.iteration.ReversiblePeekingIterator<com.vladsch.flexmark.ast.Node>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: invokeinterface #2,  1            // InterfaceMethod com/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterator.isReversed:()Z
      11: putfield      #3                  // Field isReversed:Z
      14: aload_0
      15: aload_1
      16: instanceof    #4                  // class com/vladsch/flexmark/ast/DescendantNodeIterator
      19: ifeq          32
      22: aload_1
      23: checkcast     #4                  // class com/vladsch/flexmark/ast/DescendantNodeIterator
      26: getfield      #5                  // Field iterator:Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterator;
      29: goto          33
      32: aload_1
      33: putfield      #5                  // Field iterator:Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterator;
      36: aload_0
      37: aconst_null
      38: putfield      #6                  // Field iteratorStack:Ljava/util/Stack;
      41: aload_0
      42: aconst_null
      43: putfield      #7                  // Field result:Lcom/vladsch/flexmark/ast/Node;
      46: return

  public boolean isReversed();
    Code:
       0: aload_0
       1: getfield      #3                  // Field isReversed:Z
       4: ireturn

  public boolean hasNext();
    Code:
       0: aload_0
       1: getfield      #5                  // Field iterator:Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterator;
       4: invokeinterface #8,  1            // InterfaceMethod com/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterator.hasNext:()Z
       9: ireturn

  public com.vladsch.flexmark.ast.Node next();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #5                  // Field iterator:Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterator;
       5: invokeinterface #9,  1            // InterfaceMethod com/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterator.next:()Ljava/lang/Object;
      10: checkcast     #10                 // class com/vladsch/flexmark/ast/Node
      13: putfield      #7                  // Field result:Lcom/vladsch/flexmark/ast/Node;
      16: aload_0
      17: getfield      #7                  // Field result:Lcom/vladsch/flexmark/ast/Node;
      20: invokevirtual #11                 // Method com/vladsch/flexmark/ast/Node.getFirstChild:()Lcom/vladsch/flexmark/ast/Node;
      23: ifnull        99
      26: aload_0
      27: getfield      #5                  // Field iterator:Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterator;
      30: invokeinterface #8,  1            // InterfaceMethod com/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterator.hasNext:()Z
      35: ifeq          68
      38: aload_0
      39: getfield      #6                  // Field iteratorStack:Ljava/util/Stack;
      42: ifnonnull     56
      45: aload_0
      46: new           #12                 // class java/util/Stack
      49: dup
      50: invokespecial #13                 // Method java/util/Stack."<init>":()V
      53: putfield      #6                  // Field iteratorStack:Ljava/util/Stack;
      56: aload_0
      57: getfield      #6                  // Field iteratorStack:Ljava/util/Stack;
      60: aload_0
      61: getfield      #5                  // Field iterator:Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterator;
      64: invokevirtual #14                 // Method java/util/Stack.push:(Ljava/lang/Object;)Ljava/lang/Object;
      67: pop
      68: aload_0
      69: aload_0
      70: getfield      #3                  // Field isReversed:Z
      73: ifeq          86
      76: aload_0
      77: getfield      #7                  // Field result:Lcom/vladsch/flexmark/ast/Node;
      80: invokevirtual #15                 // Method com/vladsch/flexmark/ast/Node.getReversedChildIterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterator;
      83: goto          93
      86: aload_0
      87: getfield      #7                  // Field result:Lcom/vladsch/flexmark/ast/Node;
      90: invokevirtual #16                 // Method com/vladsch/flexmark/ast/Node.getChildIterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterator;
      93: putfield      #5                  // Field iterator:Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterator;
      96: goto          142
      99: aload_0
     100: getfield      #6                  // Field iteratorStack:Ljava/util/Stack;
     103: ifnull        142
     106: aload_0
     107: getfield      #6                  // Field iteratorStack:Ljava/util/Stack;
     110: invokevirtual #17                 // Method java/util/Stack.isEmpty:()Z
     113: ifne          142
     116: aload_0
     117: getfield      #5                  // Field iterator:Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterator;
     120: invokeinterface #8,  1            // InterfaceMethod com/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterator.hasNext:()Z
     125: ifne          142
     128: aload_0
     129: aload_0
     130: getfield      #6                  // Field iteratorStack:Ljava/util/Stack;
     133: invokevirtual #18                 // Method java/util/Stack.pop:()Ljava/lang/Object;
     136: checkcast     #19                 // class com/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterator
     139: putfield      #5                  // Field iterator:Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterator;
     142: aload_0
     143: getfield      #7                  // Field result:Lcom/vladsch/flexmark/ast/Node;
     146: areturn

  public com.vladsch.flexmark.ast.Node peek();
    Code:
       0: aload_0
       1: getfield      #5                  // Field iterator:Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterator;
       4: invokeinterface #20,  1           // InterfaceMethod com/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterator.peek:()Ljava/lang/Object;
       9: checkcast     #10                 // class com/vladsch/flexmark/ast/Node
      12: areturn

  public void remove();
    Code:
       0: aload_0
       1: getfield      #7                  // Field result:Lcom/vladsch/flexmark/ast/Node;
       4: ifnonnull     17
       7: new           #21                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #22                 // String Either next() was not called yet or the node was removed
      13: invokespecial #23                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #7                  // Field result:Lcom/vladsch/flexmark/ast/Node;
      21: invokevirtual #24                 // Method com/vladsch/flexmark/ast/Node.unlink:()V
      24: aload_0
      25: aconst_null
      26: putfield      #7                  // Field result:Lcom/vladsch/flexmark/ast/Node;
      29: return

  public void forEachRemaining(com.vladsch.flexmark.util.collection.Consumer<? super com.vladsch.flexmark.ast.Node>);
    Code:
       0: aload_1
       1: ifnonnull     12
       4: new           #25                 // class java/lang/NullPointerException
       7: dup
       8: invokespecial #26                 // Method java/lang/NullPointerException."<init>":()V
      11: athrow
      12: aload_0
      13: invokevirtual #27                 // Method hasNext:()Z
      16: ifeq          32
      19: aload_1
      20: aload_0
      21: invokevirtual #28                 // Method next:()Lcom/vladsch/flexmark/ast/Node;
      24: invokeinterface #29,  2           // InterfaceMethod com/vladsch/flexmark/util/collection/Consumer.accept:(Ljava/lang/Object;)V
      29: goto          12
      32: return

  public java.lang.Object peek();
    Code:
       0: aload_0
       1: invokevirtual #30                 // Method peek:()Lcom/vladsch/flexmark/ast/Node;
       4: areturn

  public java.lang.Object next();
    Code:
       0: aload_0
       1: invokevirtual #28                 // Method next:()Lcom/vladsch/flexmark/ast/Node;
       4: areturn
}
