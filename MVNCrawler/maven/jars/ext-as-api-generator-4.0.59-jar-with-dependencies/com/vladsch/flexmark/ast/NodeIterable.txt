Compiled from "NodeIterable.java"
public class com.vladsch.flexmark.ast.NodeIterable implements com.vladsch.flexmark.util.collection.iteration.ReversiblePeekingIterable<com.vladsch.flexmark.ast.Node> {
  final com.vladsch.flexmark.ast.Node firstNode;

  final com.vladsch.flexmark.ast.Node lastNode;

  final boolean reversed;

  public static final com.vladsch.flexmark.util.collection.iteration.ReversiblePeekingIterable<com.vladsch.flexmark.ast.Node> EMPTY;

  public com.vladsch.flexmark.ast.NodeIterable(com.vladsch.flexmark.ast.Node, com.vladsch.flexmark.ast.Node, boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field firstNode:Lcom/vladsch/flexmark/ast/Node;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field lastNode:Lcom/vladsch/flexmark/ast/Node;
      14: aload_0
      15: iload_3
      16: putfield      #4                  // Field reversed:Z
      19: return

  public com.vladsch.flexmark.util.collection.iteration.ReversiblePeekingIterator<com.vladsch.flexmark.ast.Node> iterator();
    Code:
       0: new           #5                  // class com/vladsch/flexmark/ast/NodeIterator
       3: dup
       4: aload_0
       5: getfield      #2                  // Field firstNode:Lcom/vladsch/flexmark/ast/Node;
       8: aload_0
       9: getfield      #3                  // Field lastNode:Lcom/vladsch/flexmark/ast/Node;
      12: aload_0
      13: getfield      #4                  // Field reversed:Z
      16: invokespecial #6                  // Method com/vladsch/flexmark/ast/NodeIterator."<init>":(Lcom/vladsch/flexmark/ast/Node;Lcom/vladsch/flexmark/ast/Node;Z)V
      19: areturn

  public void forEach(com.vladsch.flexmark.util.collection.Consumer<? super com.vladsch.flexmark.ast.Node>);
    Code:
       0: aload_0
       1: invokevirtual #7                  // Method iterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterator;
       4: astore_2
       5: aload_2
       6: invokeinterface #8,  1            // InterfaceMethod com/vladsch/flexmark/util/collection/iteration/ReversibleIterator.hasNext:()Z
      11: ifeq          29
      14: aload_1
      15: aload_2
      16: invokeinterface #9,  1            // InterfaceMethod com/vladsch/flexmark/util/collection/iteration/ReversibleIterator.next:()Ljava/lang/Object;
      21: invokeinterface #10,  2           // InterfaceMethod com/vladsch/flexmark/util/collection/Consumer.accept:(Ljava/lang/Object;)V
      26: goto          5
      29: return

  public com.vladsch.flexmark.util.collection.iteration.ReversiblePeekingIterable<com.vladsch.flexmark.ast.Node> reversed();
    Code:
       0: new           #11                 // class com/vladsch/flexmark/ast/NodeIterable
       3: dup
       4: aload_0
       5: getfield      #2                  // Field firstNode:Lcom/vladsch/flexmark/ast/Node;
       8: aload_0
       9: getfield      #3                  // Field lastNode:Lcom/vladsch/flexmark/ast/Node;
      12: aload_0
      13: getfield      #4                  // Field reversed:Z
      16: ifne          23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: invokespecial #12                 // Method "<init>":(Lcom/vladsch/flexmark/ast/Node;Lcom/vladsch/flexmark/ast/Node;Z)V
      27: areturn

  public boolean isReversed();
    Code:
       0: aload_0
       1: getfield      #4                  // Field reversed:Z
       4: ireturn

  public com.vladsch.flexmark.util.collection.iteration.ReversiblePeekingIterator<com.vladsch.flexmark.ast.Node> reversedIterator();
    Code:
       0: new           #5                  // class com/vladsch/flexmark/ast/NodeIterator
       3: dup
       4: aload_0
       5: getfield      #2                  // Field firstNode:Lcom/vladsch/flexmark/ast/Node;
       8: aload_0
       9: getfield      #3                  // Field lastNode:Lcom/vladsch/flexmark/ast/Node;
      12: aload_0
      13: getfield      #4                  // Field reversed:Z
      16: ifne          23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: invokespecial #6                  // Method com/vladsch/flexmark/ast/NodeIterator."<init>":(Lcom/vladsch/flexmark/ast/Node;Lcom/vladsch/flexmark/ast/Node;Z)V
      27: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversibleIterator reversedIterator();
    Code:
       0: aload_0
       1: invokevirtual #13                 // Method reversedIterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterator;
       4: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversibleIterable reversed();
    Code:
       0: aload_0
       1: invokevirtual #14                 // Method reversed:()Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterable;
       4: areturn

  public com.vladsch.flexmark.util.collection.iteration.ReversibleIterator iterator();
    Code:
       0: aload_0
       1: invokevirtual #7                  // Method iterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterator;
       4: areturn

  public java.util.Iterator iterator();
    Code:
       0: aload_0
       1: invokevirtual #7                  // Method iterator:()Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterator;
       4: areturn

  static {};
    Code:
       0: new           #15                 // class com/vladsch/flexmark/ast/NodeIterable$1
       3: dup
       4: invokespecial #16                 // Method com/vladsch/flexmark/ast/NodeIterable$1."<init>":()V
       7: putstatic     #17                 // Field EMPTY:Lcom/vladsch/flexmark/util/collection/iteration/ReversiblePeekingIterable;
      10: return
}
