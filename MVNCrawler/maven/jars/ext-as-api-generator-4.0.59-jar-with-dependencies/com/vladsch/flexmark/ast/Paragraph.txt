Compiled from "Paragraph.java"
public class com.vladsch.flexmark.ast.Paragraph extends com.vladsch.flexmark.ast.Block {
  private static int[] EMPTY_INDENTS;

  private int[] lineIndents;

  private boolean trailingBlankLine;

  private boolean hasTableSeparator;

  public com.vladsch.flexmark.util.sequence.BasedSequence[] getSegments();
    Code:
       0: getstatic     #1                  // Field EMPTY_SEGMENTS:[Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       3: areturn

  public void getAstExtra(java.lang.StringBuilder);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #2                  // Method com/vladsch/flexmark/ast/Block.getAstExtra:(Ljava/lang/StringBuilder;)V
       5: aload_0
       6: getfield      #3                  // Field trailingBlankLine:Z
       9: ifeq          19
      12: aload_1
      13: ldc           #4                  // String  isTrailingBlankLine
      15: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      18: pop
      19: return

  public com.vladsch.flexmark.ast.Paragraph();
    Code:
       0: aload_0
       1: invokespecial #6                  // Method com/vladsch/flexmark/ast/Block."<init>":()V
       4: aload_0
       5: getstatic     #7                  // Field EMPTY_INDENTS:[I
       8: putfield      #8                  // Field lineIndents:[I
      11: aload_0
      12: iconst_0
      13: putfield      #3                  // Field trailingBlankLine:Z
      16: return

  public com.vladsch.flexmark.ast.Paragraph(com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #9                  // Method com/vladsch/flexmark/ast/Block."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
       5: aload_0
       6: getstatic     #7                  // Field EMPTY_INDENTS:[I
       9: putfield      #8                  // Field lineIndents:[I
      12: aload_0
      13: iconst_0
      14: putfield      #3                  // Field trailingBlankLine:Z
      17: return

  public com.vladsch.flexmark.ast.Paragraph(com.vladsch.flexmark.util.sequence.BasedSequence, java.util.List<com.vladsch.flexmark.util.sequence.BasedSequence>, java.util.List<java.lang.Integer>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #10                 // Method com/vladsch/flexmark/ast/Block."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;Ljava/util/List;)V
       6: aload_0
       7: getstatic     #7                  // Field EMPTY_INDENTS:[I
      10: putfield      #8                  // Field lineIndents:[I
      13: aload_0
      14: iconst_0
      15: putfield      #3                  // Field trailingBlankLine:Z
      18: aload_2
      19: invokeinterface #11,  1           // InterfaceMethod java/util/List.size:()I
      24: aload_3
      25: invokeinterface #11,  1           // InterfaceMethod java/util/List.size:()I
      30: if_icmpeq     43
      33: new           #12                 // class java/lang/IllegalArgumentException
      36: dup
      37: ldc           #13                 // String line segments and line indents have to be of the same size
      39: invokespecial #14                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      42: athrow
      43: aload_0
      44: aload_3
      45: invokevirtual #15                 // Method setLineIndents:(Ljava/util/List;)V
      48: return

  public com.vladsch.flexmark.ast.Paragraph(com.vladsch.flexmark.util.sequence.BasedSequence, java.util.List<com.vladsch.flexmark.util.sequence.BasedSequence>, int[]);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #10                 // Method com/vladsch/flexmark/ast/Block."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;Ljava/util/List;)V
       6: aload_0
       7: getstatic     #7                  // Field EMPTY_INDENTS:[I
      10: putfield      #8                  // Field lineIndents:[I
      13: aload_0
      14: iconst_0
      15: putfield      #3                  // Field trailingBlankLine:Z
      18: aload_2
      19: invokeinterface #11,  1           // InterfaceMethod java/util/List.size:()I
      24: aload_3
      25: arraylength
      26: if_icmpeq     39
      29: new           #12                 // class java/lang/IllegalArgumentException
      32: dup
      33: ldc           #13                 // String line segments and line indents have to be of the same size
      35: invokespecial #14                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      38: athrow
      39: aload_0
      40: aload_3
      41: putfield      #8                  // Field lineIndents:[I
      44: return

  public com.vladsch.flexmark.ast.Paragraph(com.vladsch.flexmark.ast.BlockContent);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #16                 // Method com/vladsch/flexmark/ast/Block."<init>":(Lcom/vladsch/flexmark/ast/BlockContent;)V
       5: aload_0
       6: getstatic     #7                  // Field EMPTY_INDENTS:[I
       9: putfield      #8                  // Field lineIndents:[I
      12: aload_0
      13: iconst_0
      14: putfield      #3                  // Field trailingBlankLine:Z
      17: aload_0
      18: aload_1
      19: invokevirtual #17                 // Method com/vladsch/flexmark/ast/BlockContent.getLineIndents:()Ljava/util/List;
      22: invokevirtual #15                 // Method setLineIndents:(Ljava/util/List;)V
      25: return

  protected void setLineIndents(java.util.List<java.lang.Integer>);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #11,  1           // InterfaceMethod java/util/List.size:()I
       7: newarray       int
       9: putfield      #8                  // Field lineIndents:[I
      12: iconst_0
      13: istore_2
      14: aload_1
      15: invokeinterface #18,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      20: astore_3
      21: aload_3
      22: invokeinterface #19,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      27: ifeq          58
      30: aload_3
      31: invokeinterface #20,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      36: checkcast     #21                 // class java/lang/Integer
      39: invokevirtual #22                 // Method java/lang/Integer.intValue:()I
      42: istore        4
      44: aload_0
      45: getfield      #8                  // Field lineIndents:[I
      48: iload_2
      49: iinc          2, 1
      52: iload         4
      54: iastore
      55: goto          21
      58: return

  public void setContent(com.vladsch.flexmark.util.sequence.BasedSequence, java.util.List<com.vladsch.flexmark.util.sequence.BasedSequence>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #23                 // Method com/vladsch/flexmark/ast/Block.setContent:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;Ljava/util/List;)V
       6: return

  public void setContent(com.vladsch.flexmark.util.sequence.BasedSequence, java.util.List<com.vladsch.flexmark.util.sequence.BasedSequence>, java.util.List<java.lang.Integer>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #23                 // Method com/vladsch/flexmark/ast/Block.setContent:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;Ljava/util/List;)V
       6: aload_2
       7: invokeinterface #11,  1           // InterfaceMethod java/util/List.size:()I
      12: aload_3
      13: invokeinterface #11,  1           // InterfaceMethod java/util/List.size:()I
      18: if_icmpeq     31
      21: new           #12                 // class java/lang/IllegalArgumentException
      24: dup
      25: ldc           #13                 // String line segments and line indents have to be of the same size
      27: invokespecial #14                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      30: athrow
      31: aload_0
      32: aload_3
      33: invokevirtual #15                 // Method setLineIndents:(Ljava/util/List;)V
      36: return

  public void setContent(java.util.List<com.vladsch.flexmark.util.sequence.BasedSequence>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #24                 // Method com/vladsch/flexmark/ast/Block.setContent:(Ljava/util/List;)V
       5: return

  public void setContent(com.vladsch.flexmark.ast.BlockContent);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #25                 // Method com/vladsch/flexmark/ast/Block.setContent:(Lcom/vladsch/flexmark/ast/BlockContent;)V
       5: aload_0
       6: aload_1
       7: invokevirtual #17                 // Method com/vladsch/flexmark/ast/BlockContent.getLineIndents:()Ljava/util/List;
      10: invokevirtual #15                 // Method setLineIndents:(Ljava/util/List;)V
      13: return

  public void setContent(com.vladsch.flexmark.ast.BlockContent, int, int);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #26                 // Method com/vladsch/flexmark/ast/BlockContent.getLines:()Ljava/util/List;
       5: iload_2
       6: iload_3
       7: invokeinterface #27,  3           // InterfaceMethod java/util/List.subList:(II)Ljava/util/List;
      12: invokespecial #24                 // Method com/vladsch/flexmark/ast/Block.setContent:(Ljava/util/List;)V
      15: aload_0
      16: aload_1
      17: invokevirtual #17                 // Method com/vladsch/flexmark/ast/BlockContent.getLineIndents:()Ljava/util/List;
      20: iload_2
      21: iload_3
      22: invokeinterface #27,  3           // InterfaceMethod java/util/List.subList:(II)Ljava/util/List;
      27: invokevirtual #15                 // Method setLineIndents:(Ljava/util/List;)V
      30: return

  public void setContent(com.vladsch.flexmark.ast.Paragraph, int, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: invokevirtual #28                 // Method getContentLines:(II)Ljava/util/List;
       7: invokespecial #24                 // Method com/vladsch/flexmark/ast/Block.setContent:(Ljava/util/List;)V
      10: iload_3
      11: iload_2
      12: if_icmple     45
      15: iload_3
      16: iload_2
      17: isub
      18: newarray       int
      20: astore        4
      22: aload_1
      23: getfield      #8                  // Field lineIndents:[I
      26: iload_2
      27: aload         4
      29: iconst_0
      30: iload_3
      31: iload_2
      32: isub
      33: invokestatic  #29                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      36: aload_0
      37: aload         4
      39: putfield      #8                  // Field lineIndents:[I
      42: goto          52
      45: aload_0
      46: getstatic     #7                  // Field EMPTY_INDENTS:[I
      49: putfield      #8                  // Field lineIndents:[I
      52: return

  public void setLineIndents(int[]);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #8                  // Field lineIndents:[I
       5: return

  public int getLineIndent(int);
    Code:
       0: aload_0
       1: getfield      #8                  // Field lineIndents:[I
       4: iload_1
       5: iaload
       6: ireturn

  public int[] getLineIndents();
    Code:
       0: aload_0
       1: getfield      #8                  // Field lineIndents:[I
       4: areturn

  public boolean isTrailingBlankLine();
    Code:
       0: aload_0
       1: getfield      #3                  // Field trailingBlankLine:Z
       4: ireturn

  public void setTrailingBlankLine(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #3                  // Field trailingBlankLine:Z
       5: return

  public void setHasTableSeparator(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #30                 // Field hasTableSeparator:Z
       5: return

  public boolean hasTableSeparator();
    Code:
       0: aload_0
       1: getfield      #30                 // Field hasTableSeparator:Z
       4: ireturn

  static {};
    Code:
       0: iconst_0
       1: newarray       int
       3: putstatic     #7                  // Field EMPTY_INDENTS:[I
       6: return
}
