Compiled from "TextNodeConverter.java"
public class com.vladsch.flexmark.ast.util.TextNodeConverter {
  private final com.vladsch.flexmark.util.sequence.BasedSequence nodeChars;

  private com.vladsch.flexmark.util.sequence.BasedSequence remainingChars;

  private java.util.ArrayList<com.vladsch.flexmark.ast.Node> list;

  static final boolean $assertionsDisabled;

  public com.vladsch.flexmark.ast.util.TextNodeConverter(com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/ArrayList
       8: dup
       9: invokespecial #3                  // Method java/util/ArrayList."<init>":()V
      12: putfield      #4                  // Field list:Ljava/util/ArrayList;
      15: aload_0
      16: aload_1
      17: putfield      #5                  // Field nodeChars:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      20: aload_0
      21: aload_1
      22: putfield      #6                  // Field remainingChars:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      25: return

  public void appendChild(com.vladsch.flexmark.ast.Node);
    Code:
       0: aload_1
       1: invokevirtual #7                  // Method com/vladsch/flexmark/ast/Node.getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: astore_2
       5: getstatic     #8                  // Field $assertionsDisabled:Z
       8: ifne          71
      11: aload_0
      12: getfield      #5                  // Field nodeChars:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      15: aload_2
      16: invokeinterface #9,  2            // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.containsAllOf:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)Z
      21: ifne          71
      24: new           #10                 // class java/lang/AssertionError
      27: dup
      28: new           #11                 // class java/lang/StringBuilder
      31: dup
      32: invokespecial #12                 // Method java/lang/StringBuilder."<init>":()V
      35: ldc           #13                 // String child
      37: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      40: aload_1
      41: iconst_0
      42: invokevirtual #15                 // Method com/vladsch/flexmark/ast/Node.toAstString:(Z)Ljava/lang/String;
      45: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      48: ldc           #16                 // String  is not within parent sequence
      50: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      53: aload_0
      54: getfield      #5                  // Field nodeChars:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      57: aconst_null
      58: invokestatic  #17                 // Method com/vladsch/flexmark/ast/Node.toSegmentSpan:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;Ljava/lang/String;)Ljava/lang/String;
      61: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      64: invokevirtual #18                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      67: invokespecial #19                 // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
      70: athrow
      71: getstatic     #8                  // Field $assertionsDisabled:Z
      74: ifne          137
      77: aload_0
      78: getfield      #6                  // Field remainingChars:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      81: aload_2
      82: invokeinterface #9,  2            // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.containsAllOf:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)Z
      87: ifne          137
      90: new           #10                 // class java/lang/AssertionError
      93: dup
      94: new           #11                 // class java/lang/StringBuilder
      97: dup
      98: invokespecial #12                 // Method java/lang/StringBuilder."<init>":()V
     101: ldc           #13                 // String child
     103: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     106: aload_1
     107: iconst_0
     108: invokevirtual #15                 // Method com/vladsch/flexmark/ast/Node.toAstString:(Z)Ljava/lang/String;
     111: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     114: ldc           #20                 // String  is not within remaining sequence
     116: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     119: aload_0
     120: getfield      #6                  // Field remainingChars:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     123: aconst_null
     124: invokestatic  #17                 // Method com/vladsch/flexmark/ast/Node.toSegmentSpan:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;Ljava/lang/String;)Ljava/lang/String;
     127: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     130: invokevirtual #18                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     133: invokespecial #19                 // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
     136: athrow
     137: aload_1
     138: invokevirtual #21                 // Method com/vladsch/flexmark/ast/Node.unlink:()V
     141: aload_1
     142: instanceof    #22                 // class com/vladsch/flexmark/ast/Text
     145: ifne          245
     148: aload_0
     149: getfield      #6                  // Field remainingChars:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     152: invokeinterface #23,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
     157: aload_2
     158: invokeinterface #23,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
     163: if_icmpge     207
     166: aload_0
     167: getfield      #4                  // Field list:Ljava/util/ArrayList;
     170: new           #22                 // class com/vladsch/flexmark/ast/Text
     173: dup
     174: aload_0
     175: getfield      #6                  // Field remainingChars:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     178: iconst_0
     179: aload_2
     180: invokeinterface #23,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
     185: aload_0
     186: getfield      #6                  // Field remainingChars:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     189: invokeinterface #23,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
     194: isub
     195: invokeinterface #24,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     200: invokespecial #25                 // Method com/vladsch/flexmark/ast/Text."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
     203: invokevirtual #26                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
     206: pop
     207: aload_0
     208: aload_0
     209: getfield      #6                  // Field remainingChars:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     212: aload_2
     213: invokeinterface #27,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
     218: aload_0
     219: getfield      #6                  // Field remainingChars:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     222: invokeinterface #23,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
     227: isub
     228: invokeinterface #28,  2           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.subSequence:(I)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     233: putfield      #6                  // Field remainingChars:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
     236: aload_0
     237: getfield      #4                  // Field list:Ljava/util/ArrayList;
     240: aload_1
     241: invokevirtual #26                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
     244: pop
     245: return

  public void addChildrenOf(com.vladsch.flexmark.ast.Node);
    Code:
       0: aload_1
       1: invokevirtual #29                 // Method com/vladsch/flexmark/ast/Node.getFirstChild:()Lcom/vladsch/flexmark/ast/Node;
       4: astore_2
       5: aload_2
       6: ifnull        24
       9: aload_2
      10: invokevirtual #30                 // Method com/vladsch/flexmark/ast/Node.getNext:()Lcom/vladsch/flexmark/ast/Node;
      13: astore_3
      14: aload_0
      15: aload_2
      16: invokevirtual #31                 // Method appendChild:(Lcom/vladsch/flexmark/ast/Node;)V
      19: aload_3
      20: astore_2
      21: goto          5
      24: return

  public void appendMergedTo(com.vladsch.flexmark.ast.Node);
    Code:
       0: aload_0
       1: invokespecial #32                 // Method mergeList:()V
       4: aload_0
       5: getfield      #4                  // Field list:Ljava/util/ArrayList;
       8: invokevirtual #33                 // Method java/util/ArrayList.iterator:()Ljava/util/Iterator;
      11: astore_2
      12: aload_2
      13: invokeinterface #34,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      18: ifeq          39
      21: aload_2
      22: invokeinterface #35,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      27: checkcast     #36                 // class com/vladsch/flexmark/ast/Node
      30: astore_3
      31: aload_1
      32: aload_3
      33: invokevirtual #37                 // Method com/vladsch/flexmark/ast/Node.appendChild:(Lcom/vladsch/flexmark/ast/Node;)V
      36: goto          12
      39: aload_0
      40: invokevirtual #38                 // Method clear:()V
      43: return

  public void clear();
    Code:
       0: aload_0
       1: getfield      #4                  // Field list:Ljava/util/ArrayList;
       4: invokevirtual #39                 // Method java/util/ArrayList.clear:()V
       7: aload_0
       8: getstatic     #40                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      11: putfield      #6                  // Field remainingChars:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      14: return

  public void insertMergedBefore(com.vladsch.flexmark.ast.Node);
    Code:
       0: aload_0
       1: invokespecial #32                 // Method mergeList:()V
       4: aload_0
       5: getfield      #4                  // Field list:Ljava/util/ArrayList;
       8: invokevirtual #33                 // Method java/util/ArrayList.iterator:()Ljava/util/Iterator;
      11: astore_2
      12: aload_2
      13: invokeinterface #34,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      18: ifeq          39
      21: aload_2
      22: invokeinterface #35,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      27: checkcast     #36                 // class com/vladsch/flexmark/ast/Node
      30: astore_3
      31: aload_1
      32: aload_3
      33: invokevirtual #41                 // Method com/vladsch/flexmark/ast/Node.insertBefore:(Lcom/vladsch/flexmark/ast/Node;)V
      36: goto          12
      39: aload_0
      40: invokevirtual #38                 // Method clear:()V
      43: return

  public static void mergeTextNodes(com.vladsch.flexmark.ast.Node);
    Code:
       0: aconst_null
       1: astore_1
       2: aload_0
       3: invokevirtual #29                 // Method com/vladsch/flexmark/ast/Node.getFirstChild:()Lcom/vladsch/flexmark/ast/Node;
       6: astore_2
       7: aload_2
       8: ifnull        74
      11: aload_2
      12: invokevirtual #30                 // Method com/vladsch/flexmark/ast/Node.getNext:()Lcom/vladsch/flexmark/ast/Node;
      15: astore_3
      16: aload_1
      17: instanceof    #22                 // class com/vladsch/flexmark/ast/Text
      20: ifeq          67
      23: aload_2
      24: instanceof    #22                 // class com/vladsch/flexmark/ast/Text
      27: ifeq          67
      30: aload_1
      31: invokevirtual #7                  // Method com/vladsch/flexmark/ast/Node.getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      34: aload_2
      35: invokevirtual #7                  // Method com/vladsch/flexmark/ast/Node.getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      38: invokeinterface #42,  2           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.isContinuedBy:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)Z
      43: ifeq          67
      46: aload_2
      47: aload_1
      48: invokevirtual #7                  // Method com/vladsch/flexmark/ast/Node.getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      51: aload_2
      52: invokevirtual #7                  // Method com/vladsch/flexmark/ast/Node.getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      55: invokeinterface #43,  2           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.spliceAtEnd:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      60: invokevirtual #44                 // Method com/vladsch/flexmark/ast/Node.setChars:(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
      63: aload_1
      64: invokevirtual #21                 // Method com/vladsch/flexmark/ast/Node.unlink:()V
      67: aload_2
      68: astore_1
      69: aload_3
      70: astore_2
      71: goto          7
      74: return

  public void insertMergedAfter(com.vladsch.flexmark.ast.Node);
    Code:
       0: aload_0
       1: invokespecial #32                 // Method mergeList:()V
       4: aload_0
       5: getfield      #4                  // Field list:Ljava/util/ArrayList;
       8: invokevirtual #33                 // Method java/util/ArrayList.iterator:()Ljava/util/Iterator;
      11: astore_2
      12: aload_2
      13: invokeinterface #34,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      18: ifeq          41
      21: aload_2
      22: invokeinterface #35,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      27: checkcast     #36                 // class com/vladsch/flexmark/ast/Node
      30: astore_3
      31: aload_1
      32: aload_3
      33: invokevirtual #45                 // Method com/vladsch/flexmark/ast/Node.insertAfter:(Lcom/vladsch/flexmark/ast/Node;)V
      36: aload_3
      37: astore_1
      38: goto          12
      41: aload_0
      42: invokevirtual #38                 // Method clear:()V
      45: return

  private void mergeList();
    Code:
       0: aload_0
       1: getfield      #6                  // Field remainingChars:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       4: invokeinterface #46,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.isEmpty:()Z
       9: ifne          38
      12: aload_0
      13: getfield      #4                  // Field list:Ljava/util/ArrayList;
      16: new           #22                 // class com/vladsch/flexmark/ast/Text
      19: dup
      20: aload_0
      21: getfield      #6                  // Field remainingChars:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      24: invokespecial #25                 // Method com/vladsch/flexmark/ast/Text."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
      27: invokevirtual #26                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
      30: pop
      31: aload_0
      32: getstatic     #40                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      35: putfield      #6                  // Field remainingChars:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      38: return

  public java.util.List<com.vladsch.flexmark.ast.Node> getMergedList();
    Code:
       0: aload_0
       1: invokespecial #32                 // Method mergeList:()V
       4: aload_0
       5: getfield      #4                  // Field list:Ljava/util/ArrayList;
       8: areturn

  static {};
    Code:
       0: ldc           #47                 // class com/vladsch/flexmark/ast/util/TextNodeConverter
       2: invokevirtual #48                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #8                  // Field $assertionsDisabled:Z
      16: return
}
