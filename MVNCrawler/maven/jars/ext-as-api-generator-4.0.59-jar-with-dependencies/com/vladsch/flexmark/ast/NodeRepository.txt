Compiled from "NodeRepository.java"
public abstract class com.vladsch.flexmark.ast.NodeRepository<T> implements java.util.Map<java.lang.String, T> {
  protected final java.util.ArrayList<T> nodeList;

  protected final java.util.Map<java.lang.String, T> nodeMap;

  protected final com.vladsch.flexmark.util.KeepType keepType;

  public abstract com.vladsch.flexmark.util.options.DataKey<? extends com.vladsch.flexmark.ast.NodeRepository<T>> getDataKey();

  public abstract com.vladsch.flexmark.util.options.DataKey<com.vladsch.flexmark.util.KeepType> getKeepDataKey();

  public com.vladsch.flexmark.ast.NodeRepository(com.vladsch.flexmark.util.KeepType);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/ArrayList
       8: dup
       9: invokespecial #3                  // Method java/util/ArrayList."<init>":()V
      12: putfield      #4                  // Field nodeList:Ljava/util/ArrayList;
      15: aload_0
      16: new           #5                  // class java/util/HashMap
      19: dup
      20: invokespecial #6                  // Method java/util/HashMap."<init>":()V
      23: putfield      #7                  // Field nodeMap:Ljava/util/Map;
      26: aload_0
      27: aload_1
      28: ifnonnull     37
      31: getstatic     #8                  // Field com/vladsch/flexmark/util/KeepType.LOCKED:Lcom/vladsch/flexmark/util/KeepType;
      34: goto          38
      37: aload_1
      38: putfield      #9                  // Field keepType:Lcom/vladsch/flexmark/util/KeepType;
      41: return

  public java.lang.String normalizeKey(java.lang.CharSequence);
    Code:
       0: aload_1
       1: invokeinterface #10,  1           // InterfaceMethod java/lang/CharSequence.toString:()Ljava/lang/String;
       6: areturn

  public T getFromRaw(java.lang.CharSequence);
    Code:
       0: aload_0
       1: getfield      #7                  // Field nodeMap:Ljava/util/Map;
       4: aload_0
       5: aload_1
       6: invokevirtual #11                 // Method normalizeKey:(Ljava/lang/CharSequence;)Ljava/lang/String;
       9: invokeinterface #12,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      14: areturn

  public T putRawKey(java.lang.CharSequence, T);
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: invokevirtual #11                 // Method normalizeKey:(Ljava/lang/CharSequence;)Ljava/lang/String;
       6: aload_2
       7: invokevirtual #13                 // Method put:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;
      10: areturn

  public T put(java.lang.String, T);
    Code:
       0: aload_0
       1: getfield      #4                  // Field nodeList:Ljava/util/ArrayList;
       4: aload_2
       5: invokevirtual #14                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
       8: pop
       9: aload_0
      10: getfield      #9                  // Field keepType:Lcom/vladsch/flexmark/util/KeepType;
      13: getstatic     #8                  // Field com/vladsch/flexmark/util/KeepType.LOCKED:Lcom/vladsch/flexmark/util/KeepType;
      16: if_acmpne     29
      19: new           #15                 // class java/lang/IllegalStateException
      22: dup
      23: ldc           #16                 // String Not allowed to modify LOCKED repository
      25: invokespecial #17                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      28: athrow
      29: aload_0
      30: getfield      #9                  // Field keepType:Lcom/vladsch/flexmark/util/KeepType;
      33: getstatic     #18                 // Field com/vladsch/flexmark/util/KeepType.LAST:Lcom/vladsch/flexmark/util/KeepType;
      36: if_acmpeq     93
      39: aload_0
      40: getfield      #7                  // Field nodeMap:Ljava/util/Map;
      43: aload_1
      44: invokeinterface #12,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      49: astore_3
      50: aload_3
      51: ifnull        93
      54: aload_0
      55: getfield      #9                  // Field keepType:Lcom/vladsch/flexmark/util/KeepType;
      58: getstatic     #19                 // Field com/vladsch/flexmark/util/KeepType.FAIL:Lcom/vladsch/flexmark/util/KeepType;
      61: if_acmpne     91
      64: new           #15                 // class java/lang/IllegalStateException
      67: dup
      68: new           #20                 // class java/lang/StringBuilder
      71: dup
      72: invokespecial #21                 // Method java/lang/StringBuilder."<init>":()V
      75: ldc           #22                 // String Duplicate key
      77: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      80: aload_1
      81: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      84: invokevirtual #24                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      87: invokespecial #17                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      90: athrow
      91: aload_3
      92: areturn
      93: aload_0
      94: getfield      #7                  // Field nodeMap:Ljava/util/Map;
      97: aload_1
      98: aload_2
      99: invokeinterface #25,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     104: areturn

  public void putAll(java.util.Map<? extends java.lang.String, ? extends T>);
    Code:
       0: aload_0
       1: getfield      #9                  // Field keepType:Lcom/vladsch/flexmark/util/KeepType;
       4: getstatic     #8                  // Field com/vladsch/flexmark/util/KeepType.LOCKED:Lcom/vladsch/flexmark/util/KeepType;
       7: if_acmpne     20
      10: new           #15                 // class java/lang/IllegalStateException
      13: dup
      14: ldc           #16                 // String Not allowed to modify LOCKED repository
      16: invokespecial #17                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      19: athrow
      20: aload_0
      21: getfield      #9                  // Field keepType:Lcom/vladsch/flexmark/util/KeepType;
      24: getstatic     #18                 // Field com/vladsch/flexmark/util/KeepType.LAST:Lcom/vladsch/flexmark/util/KeepType;
      27: if_acmpeq     85
      30: aload_1
      31: invokeinterface #26,  1           // InterfaceMethod java/util/Map.keySet:()Ljava/util/Set;
      36: invokeinterface #27,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      41: astore_2
      42: aload_2
      43: invokeinterface #28,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      48: ifeq          82
      51: aload_2
      52: invokeinterface #29,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      57: checkcast     #30                 // class java/lang/String
      60: astore_3
      61: aload_0
      62: getfield      #7                  // Field nodeMap:Ljava/util/Map;
      65: aload_3
      66: aload_1
      67: aload_3
      68: invokeinterface #12,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      73: invokeinterface #25,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      78: pop
      79: goto          42
      82: goto          95
      85: aload_0
      86: getfield      #7                  // Field nodeMap:Ljava/util/Map;
      89: aload_1
      90: invokeinterface #31,  2           // InterfaceMethod java/util/Map.putAll:(Ljava/util/Map;)V
      95: return

  public T remove(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #9                  // Field keepType:Lcom/vladsch/flexmark/util/KeepType;
       4: getstatic     #8                  // Field com/vladsch/flexmark/util/KeepType.LOCKED:Lcom/vladsch/flexmark/util/KeepType;
       7: if_acmpne     20
      10: new           #15                 // class java/lang/IllegalStateException
      13: dup
      14: ldc           #16                 // String Not allowed to modify LOCKED repository
      16: invokespecial #17                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      19: athrow
      20: aload_0
      21: getfield      #7                  // Field nodeMap:Ljava/util/Map;
      24: aload_1
      25: invokeinterface #32,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      30: areturn

  public void clear();
    Code:
       0: aload_0
       1: getfield      #9                  // Field keepType:Lcom/vladsch/flexmark/util/KeepType;
       4: getstatic     #8                  // Field com/vladsch/flexmark/util/KeepType.LOCKED:Lcom/vladsch/flexmark/util/KeepType;
       7: if_acmpne     20
      10: new           #15                 // class java/lang/IllegalStateException
      13: dup
      14: ldc           #16                 // String Not allowed to modify LOCKED repository
      16: invokespecial #17                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      19: athrow
      20: aload_0
      21: getfield      #7                  // Field nodeMap:Ljava/util/Map;
      24: invokeinterface #33,  1           // InterfaceMethod java/util/Map.clear:()V
      29: return

  public int size();
    Code:
       0: aload_0
       1: getfield      #7                  // Field nodeMap:Ljava/util/Map;
       4: invokeinterface #34,  1           // InterfaceMethod java/util/Map.size:()I
       9: ireturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #7                  // Field nodeMap:Ljava/util/Map;
       4: invokeinterface #35,  1           // InterfaceMethod java/util/Map.isEmpty:()Z
       9: ireturn

  public boolean containsKey(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #7                  // Field nodeMap:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #36,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      10: ireturn

  public boolean containsValue(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #7                  // Field nodeMap:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #37,  2           // InterfaceMethod java/util/Map.containsValue:(Ljava/lang/Object;)Z
      10: ireturn

  public T get(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #7                  // Field nodeMap:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #12,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: areturn

  public java.util.Set<java.lang.String> keySet();
    Code:
       0: aload_0
       1: getfield      #7                  // Field nodeMap:Ljava/util/Map;
       4: invokeinterface #26,  1           // InterfaceMethod java/util/Map.keySet:()Ljava/util/Set;
       9: areturn

  public java.util.List<T> values();
    Code:
       0: aload_0
       1: getfield      #4                  // Field nodeList:Ljava/util/ArrayList;
       4: areturn

  public java.util.Set<java.util.Map$Entry<java.lang.String, T>> entrySet();
    Code:
       0: aload_0
       1: getfield      #7                  // Field nodeMap:Ljava/util/Map;
       4: invokeinterface #38,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
       9: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #7                  // Field nodeMap:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #39,  2           // InterfaceMethod java/util/Map.equals:(Ljava/lang/Object;)Z
      10: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #7                  // Field nodeMap:Ljava/util/Map;
       4: invokeinterface #40,  1           // InterfaceMethod java/util/Map.hashCode:()I
       9: ireturn

  public java.util.Collection values();
    Code:
       0: aload_0
       1: invokevirtual #41                 // Method values:()Ljava/util/List;
       4: areturn

  public java.lang.Object put(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #30                 // class java/lang/String
       5: aload_2
       6: invokevirtual #13                 // Method put:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;
       9: areturn
}
