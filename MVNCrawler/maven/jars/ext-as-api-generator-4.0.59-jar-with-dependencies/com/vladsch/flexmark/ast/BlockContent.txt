Compiled from "BlockContent.java"
public class com.vladsch.flexmark.ast.BlockContent {
  private final java.util.ArrayList<com.vladsch.flexmark.util.sequence.BasedSequence> lines;

  private final java.util.ArrayList<java.lang.Integer> lineIndents;

  static final boolean $assertionsDisabled;

  public com.vladsch.flexmark.util.sequence.BasedSequence getLine(int);
    Code:
       0: aload_0
       1: getfield      #1                  // Field lines:Ljava/util/ArrayList;
       4: iload_1
       5: invokevirtual #2                  // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
       8: checkcast     #3                  // class com/vladsch/flexmark/util/sequence/BasedSequence
      11: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence getSpanningChars();
    Code:
       0: aload_0
       1: getfield      #1                  // Field lines:Ljava/util/ArrayList;
       4: invokevirtual #4                  // Method java/util/ArrayList.size:()I
       7: ifle          69
      10: aload_0
      11: getfield      #1                  // Field lines:Ljava/util/ArrayList;
      14: iconst_0
      15: invokevirtual #2                  // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
      18: checkcast     #3                  // class com/vladsch/flexmark/util/sequence/BasedSequence
      21: aload_0
      22: getfield      #1                  // Field lines:Ljava/util/ArrayList;
      25: iconst_0
      26: invokevirtual #2                  // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
      29: checkcast     #3                  // class com/vladsch/flexmark/util/sequence/BasedSequence
      32: invokeinterface #5,  1            // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
      37: aload_0
      38: getfield      #1                  // Field lines:Ljava/util/ArrayList;
      41: aload_0
      42: getfield      #1                  // Field lines:Ljava/util/ArrayList;
      45: invokevirtual #4                  // Method java/util/ArrayList.size:()I
      48: iconst_1
      49: isub
      50: invokevirtual #2                  // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
      53: checkcast     #3                  // class com/vladsch/flexmark/util/sequence/BasedSequence
      56: invokeinterface #6,  1            // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
      61: invokeinterface #7,  3            // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.baseSubSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      66: goto          72
      69: getstatic     #8                  // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      72: areturn

  public java.util.List<com.vladsch.flexmark.util.sequence.BasedSequence> getLines();
    Code:
       0: aload_0
       1: getfield      #1                  // Field lines:Ljava/util/ArrayList;
       4: areturn

  public java.util.List<java.lang.Integer> getLineIndents();
    Code:
       0: aload_0
       1: getfield      #9                  // Field lineIndents:Ljava/util/ArrayList;
       4: areturn

  public int getLineCount();
    Code:
       0: aload_0
       1: getfield      #1                  // Field lines:Ljava/util/ArrayList;
       4: invokevirtual #4                  // Method java/util/ArrayList.size:()I
       7: ireturn

  public com.vladsch.flexmark.ast.BlockContent();
    Code:
       0: aload_0
       1: invokespecial #10                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #11                 // class java/util/ArrayList
       8: dup
       9: invokespecial #12                 // Method java/util/ArrayList."<init>":()V
      12: putfield      #1                  // Field lines:Ljava/util/ArrayList;
      15: aload_0
      16: new           #11                 // class java/util/ArrayList
      19: dup
      20: invokespecial #12                 // Method java/util/ArrayList."<init>":()V
      23: putfield      #9                  // Field lineIndents:Ljava/util/ArrayList;
      26: return

  public com.vladsch.flexmark.ast.BlockContent(com.vladsch.flexmark.ast.BlockContent, int, int);
    Code:
       0: aload_0
       1: invokespecial #10                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #11                 // class java/util/ArrayList
       8: dup
       9: invokespecial #12                 // Method java/util/ArrayList."<init>":()V
      12: putfield      #1                  // Field lines:Ljava/util/ArrayList;
      15: aload_0
      16: new           #11                 // class java/util/ArrayList
      19: dup
      20: invokespecial #12                 // Method java/util/ArrayList."<init>":()V
      23: putfield      #9                  // Field lineIndents:Ljava/util/ArrayList;
      26: getstatic     #13                 // Field $assertionsDisabled:Z
      29: ifne          59
      32: aload_0
      33: getfield      #1                  // Field lines:Ljava/util/ArrayList;
      36: invokevirtual #4                  // Method java/util/ArrayList.size:()I
      39: aload_0
      40: getfield      #9                  // Field lineIndents:Ljava/util/ArrayList;
      43: invokevirtual #4                  // Method java/util/ArrayList.size:()I
      46: if_icmpeq     59
      49: new           #14                 // class java/lang/AssertionError
      52: dup
      53: ldc           #15                 // String lines and eols should be of the same size
      55: invokespecial #16                 // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
      58: athrow
      59: getstatic     #13                 // Field $assertionsDisabled:Z
      62: ifne          92
      65: aload_1
      66: getfield      #1                  // Field lines:Ljava/util/ArrayList;
      69: invokevirtual #4                  // Method java/util/ArrayList.size:()I
      72: aload_1
      73: getfield      #9                  // Field lineIndents:Ljava/util/ArrayList;
      76: invokevirtual #4                  // Method java/util/ArrayList.size:()I
      79: if_icmpeq     92
      82: new           #14                 // class java/lang/AssertionError
      85: dup
      86: ldc           #15                 // String lines and eols should be of the same size
      88: invokespecial #16                 // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
      91: athrow
      92: aload_1
      93: getfield      #1                  // Field lines:Ljava/util/ArrayList;
      96: invokevirtual #4                  // Method java/util/ArrayList.size:()I
      99: ifle          141
     102: iload_2
     103: iload_3
     104: if_icmpge     141
     107: aload_0
     108: getfield      #1                  // Field lines:Ljava/util/ArrayList;
     111: aload_1
     112: getfield      #1                  // Field lines:Ljava/util/ArrayList;
     115: iload_2
     116: iload_3
     117: invokevirtual #17                 // Method java/util/ArrayList.subList:(II)Ljava/util/List;
     120: invokevirtual #18                 // Method java/util/ArrayList.addAll:(Ljava/util/Collection;)Z
     123: pop
     124: aload_0
     125: getfield      #9                  // Field lineIndents:Ljava/util/ArrayList;
     128: aload_1
     129: getfield      #9                  // Field lineIndents:Ljava/util/ArrayList;
     132: iload_2
     133: iload_3
     134: invokevirtual #17                 // Method java/util/ArrayList.subList:(II)Ljava/util/List;
     137: invokevirtual #18                 // Method java/util/ArrayList.addAll:(Ljava/util/Collection;)Z
     140: pop
     141: return

  public int getStartOffset();
    Code:
       0: aload_0
       1: getfield      #1                  // Field lines:Ljava/util/ArrayList;
       4: invokevirtual #4                  // Method java/util/ArrayList.size:()I
       7: ifle          29
      10: aload_0
      11: getfield      #1                  // Field lines:Ljava/util/ArrayList;
      14: iconst_0
      15: invokevirtual #2                  // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
      18: checkcast     #3                  // class com/vladsch/flexmark/util/sequence/BasedSequence
      21: invokeinterface #5,  1            // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
      26: goto          30
      29: iconst_m1
      30: ireturn

  public int getEndOffset();
    Code:
       0: aload_0
       1: getfield      #1                  // Field lines:Ljava/util/ArrayList;
       4: invokevirtual #4                  // Method java/util/ArrayList.size:()I
       7: ifle          37
      10: aload_0
      11: getfield      #1                  // Field lines:Ljava/util/ArrayList;
      14: aload_0
      15: getfield      #1                  // Field lines:Ljava/util/ArrayList;
      18: invokevirtual #4                  // Method java/util/ArrayList.size:()I
      21: iconst_1
      22: isub
      23: invokevirtual #2                  // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
      26: checkcast     #3                  // class com/vladsch/flexmark/util/sequence/BasedSequence
      29: invokeinterface #6,  1            // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
      34: goto          38
      37: iconst_m1
      38: ireturn

  public int getLineIndent();
    Code:
       0: aload_0
       1: getfield      #1                  // Field lines:Ljava/util/ArrayList;
       4: invokevirtual #4                  // Method java/util/ArrayList.size:()I
       7: ifle          27
      10: aload_0
      11: getfield      #9                  // Field lineIndents:Ljava/util/ArrayList;
      14: iconst_0
      15: invokevirtual #2                  // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
      18: checkcast     #19                 // class java/lang/Integer
      21: invokevirtual #20                 // Method java/lang/Integer.intValue:()I
      24: goto          28
      27: iconst_0
      28: ireturn

  public int getSourceLength();
    Code:
       0: aload_0
       1: getfield      #1                  // Field lines:Ljava/util/ArrayList;
       4: invokevirtual #4                  // Method java/util/ArrayList.size:()I
       7: ifle          54
      10: aload_0
      11: getfield      #1                  // Field lines:Ljava/util/ArrayList;
      14: aload_0
      15: getfield      #1                  // Field lines:Ljava/util/ArrayList;
      18: invokevirtual #4                  // Method java/util/ArrayList.size:()I
      21: iconst_1
      22: isub
      23: invokevirtual #2                  // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
      26: checkcast     #3                  // class com/vladsch/flexmark/util/sequence/BasedSequence
      29: invokeinterface #6,  1            // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
      34: aload_0
      35: getfield      #1                  // Field lines:Ljava/util/ArrayList;
      38: iconst_0
      39: invokevirtual #2                  // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
      42: checkcast     #3                  // class com/vladsch/flexmark/util/sequence/BasedSequence
      45: invokeinterface #5,  1            // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getStartOffset:()I
      50: isub
      51: goto          55
      54: iconst_m1
      55: ireturn

  public void add(com.vladsch.flexmark.util.sequence.BasedSequence, int);
    Code:
       0: aload_0
       1: getfield      #1                  // Field lines:Ljava/util/ArrayList;
       4: aload_1
       5: invokevirtual #21                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
       8: pop
       9: aload_0
      10: getfield      #9                  // Field lineIndents:Ljava/util/ArrayList;
      13: iload_2
      14: invokestatic  #22                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      17: invokevirtual #21                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
      20: pop
      21: return

  public void addAll(java.util.List<com.vladsch.flexmark.util.sequence.BasedSequence>, java.util.List<java.lang.Integer>);
    Code:
       0: getstatic     #13                 // Field $assertionsDisabled:Z
       3: ifne          31
       6: aload_1
       7: invokeinterface #23,  1           // InterfaceMethod java/util/List.size:()I
      12: aload_2
      13: invokeinterface #23,  1           // InterfaceMethod java/util/List.size:()I
      18: if_icmpeq     31
      21: new           #14                 // class java/lang/AssertionError
      24: dup
      25: ldc           #24                 // String lines and lineIndents should be of the same size
      27: invokespecial #16                 // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
      30: athrow
      31: aload_0
      32: getfield      #1                  // Field lines:Ljava/util/ArrayList;
      35: aload_1
      36: invokevirtual #18                 // Method java/util/ArrayList.addAll:(Ljava/util/Collection;)Z
      39: pop
      40: aload_0
      41: getfield      #9                  // Field lineIndents:Ljava/util/ArrayList;
      44: aload_2
      45: invokevirtual #18                 // Method java/util/ArrayList.addAll:(Ljava/util/Collection;)Z
      48: pop
      49: return

  public boolean hasSingleLine();
    Code:
       0: aload_0
       1: getfield      #1                  // Field lines:Ljava/util/ArrayList;
       4: invokevirtual #4                  // Method java/util/ArrayList.size:()I
       7: ifle          25
      10: aload_0
      11: getfield      #1                  // Field lines:Ljava/util/ArrayList;
      14: invokevirtual #4                  // Method java/util/ArrayList.size:()I
      17: iconst_1
      18: if_icmpne     25
      21: iconst_1
      22: goto          26
      25: iconst_0
      26: ireturn

  public com.vladsch.flexmark.util.sequence.BasedSequence getContents();
    Code:
       0: aload_0
       1: getfield      #1                  // Field lines:Ljava/util/ArrayList;
       4: invokevirtual #4                  // Method java/util/ArrayList.size:()I
       7: ifne          14
      10: getstatic     #8                  // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      13: areturn
      14: aload_0
      15: iconst_0
      16: aload_0
      17: getfield      #1                  // Field lines:Ljava/util/ArrayList;
      20: invokevirtual #4                  // Method java/util/ArrayList.size:()I
      23: invokevirtual #25                 // Method getContents:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      26: areturn

  public com.vladsch.flexmark.ast.BlockContent subContents(int, int);
    Code:
       0: new           #26                 // class com/vladsch/flexmark/ast/BlockContent
       3: dup
       4: aload_0
       5: iload_1
       6: iload_2
       7: invokespecial #27                 // Method "<init>":(Lcom/vladsch/flexmark/ast/BlockContent;II)V
      10: areturn

  public com.vladsch.flexmark.util.sequence.BasedSequence getContents(int, int);
    Code:
       0: aload_0
       1: getfield      #1                  // Field lines:Ljava/util/ArrayList;
       4: invokevirtual #4                  // Method java/util/ArrayList.size:()I
       7: ifne          14
      10: getstatic     #8                  // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      13: areturn
      14: iload_1
      15: ifge          28
      18: new           #28                 // class java/lang/IndexOutOfBoundsException
      21: dup
      22: ldc           #29                 // String startLine must be at least 0
      24: invokespecial #30                 // Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      27: athrow
      28: iload_2
      29: ifge          42
      32: new           #28                 // class java/lang/IndexOutOfBoundsException
      35: dup
      36: ldc           #31                 // String endLine must be at least 0
      38: invokespecial #30                 // Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      41: athrow
      42: iload_2
      43: iload_1
      44: if_icmpge     57
      47: new           #28                 // class java/lang/IndexOutOfBoundsException
      50: dup
      51: ldc           #32                 // String endLine must not be less than startLine
      53: invokespecial #30                 // Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      56: athrow
      57: iload_2
      58: aload_0
      59: getfield      #1                  // Field lines:Ljava/util/ArrayList;
      62: invokevirtual #4                  // Method java/util/ArrayList.size:()I
      65: if_icmple     78
      68: new           #28                 // class java/lang/IndexOutOfBoundsException
      71: dup
      72: ldc           #33                 // String endLine must not be greater than line cardinality
      74: invokespecial #30                 // Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      77: athrow
      78: aload_0
      79: getfield      #1                  // Field lines:Ljava/util/ArrayList;
      82: iload_1
      83: iload_2
      84: invokevirtual #17                 // Method java/util/ArrayList.subList:(II)Ljava/util/List;
      87: getstatic     #8                  // Field com/vladsch/flexmark/util/sequence/BasedSequence.NULL:Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      90: invokestatic  #34                 // Method com/vladsch/flexmark/util/sequence/SegmentedSequence.of:(Ljava/util/List;Lcom/vladsch/flexmark/util/sequence/BasedSequence;)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      93: areturn

  public java.lang.String getString();
    Code:
       0: aload_0
       1: getfield      #1                  // Field lines:Ljava/util/ArrayList;
       4: invokevirtual #4                  // Method java/util/ArrayList.size:()I
       7: ifne          13
      10: ldc           #35                 // String
      12: areturn
      13: new           #36                 // class java/lang/StringBuilder
      16: dup
      17: invokespecial #37                 // Method java/lang/StringBuilder."<init>":()V
      20: astore_1
      21: aload_0
      22: getfield      #1                  // Field lines:Ljava/util/ArrayList;
      25: invokevirtual #38                 // Method java/util/ArrayList.iterator:()Ljava/util/Iterator;
      28: astore_2
      29: aload_2
      30: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      35: ifeq          69
      38: aload_2
      39: invokeinterface #40,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      44: checkcast     #3                  // class com/vladsch/flexmark/util/sequence/BasedSequence
      47: astore_3
      48: aload_1
      49: aload_3
      50: invokeinterface #41,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.trimEOL:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      55: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;
      58: pop
      59: aload_1
      60: bipush        10
      62: invokevirtual #43                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      65: pop
      66: goto          29
      69: aload_1
      70: invokevirtual #44                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      73: areturn

  static {};
    Code:
       0: ldc           #26                 // class com/vladsch/flexmark/ast/BlockContent
       2: invokevirtual #45                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #13                 // Field $assertionsDisabled:Z
      16: return
}
