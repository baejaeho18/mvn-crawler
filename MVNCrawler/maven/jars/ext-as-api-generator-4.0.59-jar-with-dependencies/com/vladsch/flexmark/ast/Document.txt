Compiled from "Document.java"
public class com.vladsch.flexmark.ast.Document extends com.vladsch.flexmark.ast.Block implements com.vladsch.flexmark.util.options.MutableDataHolder,com.vladsch.flexmark.ast.BlankLineContainer {
  private final com.vladsch.flexmark.util.options.MutableDataSet dataSet;

  public com.vladsch.flexmark.util.sequence.BasedSequence[] getSegments();
    Code:
       0: getstatic     #1                  // Field EMPTY_SEGMENTS:[Lcom/vladsch/flexmark/util/sequence/BasedSequence;
       3: areturn

  public com.vladsch.flexmark.ast.Document(com.vladsch.flexmark.util.options.DataHolder, com.vladsch.flexmark.util.sequence.BasedSequence);
    Code:
       0: aload_0
       1: aload_2
       2: invokespecial #2                  // Method com/vladsch/flexmark/ast/Block."<init>":(Lcom/vladsch/flexmark/util/sequence/BasedSequence;)V
       5: aload_0
       6: new           #3                  // class com/vladsch/flexmark/util/options/MutableDataSet
       9: dup
      10: aload_1
      11: invokespecial #4                  // Method com/vladsch/flexmark/util/options/MutableDataSet."<init>":(Lcom/vladsch/flexmark/util/options/DataHolder;)V
      14: putfield      #5                  // Field dataSet:Lcom/vladsch/flexmark/util/options/MutableDataSet;
      17: return

  public java.util.Map<com.vladsch.flexmark.util.options.DataKey, java.lang.Object> getAll();
    Code:
       0: aload_0
       1: getfield      #5                  // Field dataSet:Lcom/vladsch/flexmark/util/options/MutableDataSet;
       4: invokevirtual #6                  // Method com/vladsch/flexmark/util/options/MutableDataSet.getAll:()Ljava/util/Map;
       7: areturn

  public java.util.Collection<com.vladsch.flexmark.util.options.DataKey> keySet();
    Code:
       0: aload_0
       1: getfield      #5                  // Field dataSet:Lcom/vladsch/flexmark/util/options/MutableDataSet;
       4: invokevirtual #7                  // Method com/vladsch/flexmark/util/options/MutableDataSet.keySet:()Ljava/util/Collection;
       7: areturn

  public boolean contains(com.vladsch.flexmark.util.options.DataKey);
    Code:
       0: aload_0
       1: getfield      #5                  // Field dataSet:Lcom/vladsch/flexmark/util/options/MutableDataSet;
       4: aload_1
       5: invokevirtual #8                  // Method com/vladsch/flexmark/util/options/MutableDataSet.contains:(Lcom/vladsch/flexmark/util/options/DataKey;)Z
       8: ireturn

  public <T> T get(com.vladsch.flexmark.util.options.DataKey<T>);
    Code:
       0: aload_0
       1: getfield      #5                  // Field dataSet:Lcom/vladsch/flexmark/util/options/MutableDataSet;
       4: aload_1
       5: invokevirtual #9                  // Method com/vladsch/flexmark/util/options/MutableDataSet.get:(Lcom/vladsch/flexmark/util/options/DataKey;)Ljava/lang/Object;
       8: areturn

  public com.vladsch.flexmark.util.options.MutableDataHolder setIn(com.vladsch.flexmark.util.options.MutableDataHolder);
    Code:
       0: aload_0
       1: getfield      #5                  // Field dataSet:Lcom/vladsch/flexmark/util/options/MutableDataSet;
       4: aload_1
       5: invokevirtual #10                 // Method com/vladsch/flexmark/util/options/MutableDataSet.setIn:(Lcom/vladsch/flexmark/util/options/MutableDataHolder;)Lcom/vladsch/flexmark/util/options/MutableDataHolder;
       8: areturn

  public int getLineCount();
    Code:
       0: aload_0
       1: getfield      #11                 // Field lineSegments:Ljava/util/List;
       4: getstatic     #12                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.EMPTY_LIST:Ljava/util/List;
       7: if_acmpne     52
      10: aload_0
      11: invokevirtual #13                 // Method getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      14: invokeinterface #14,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.lastChar:()C
      19: istore_1
      20: iload_1
      21: bipush        10
      23: if_icmpeq     32
      26: iload_1
      27: bipush        13
      29: if_icmpne     36
      32: iconst_0
      33: goto          37
      36: iconst_1
      37: aload_0
      38: aload_0
      39: invokevirtual #13                 // Method getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      42: invokeinterface #15,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      47: invokevirtual #16                 // Method getLineNumber:(I)I
      50: iadd
      51: ireturn
      52: aload_0
      53: getfield      #11                 // Field lineSegments:Ljava/util/List;
      56: invokeinterface #17,  1           // InterfaceMethod java/util/List.size:()I
      61: ireturn

  public int getLineNumber(int);
    Code:
       0: aload_0
       1: getfield      #11                 // Field lineSegments:Ljava/util/List;
       4: getstatic     #12                 // Field com/vladsch/flexmark/util/sequence/BasedSequence.EMPTY_LIST:Ljava/util/List;
       7: if_acmpne     97
      10: aload_0
      11: invokevirtual #13                 // Method getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      14: iconst_0
      15: iload_1
      16: iconst_1
      17: newarray       int
      19: dup
      20: iconst_0
      21: aload_0
      22: invokevirtual #13                 // Method getChars:()Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      25: invokeinterface #15,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      30: iastore
      31: invokestatic  #18                 // Method com/vladsch/flexmark/util/Utils.maxLimit:(I[I)I
      34: invokeinterface #19,  3           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.baseSubSequence:(II)Lcom/vladsch/flexmark/util/sequence/BasedSequence;
      39: astore_2
      40: aload_2
      41: invokeinterface #20,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.isEmpty:()Z
      46: ifeq          51
      49: iconst_0
      50: ireturn
      51: iconst_0
      52: istore_3
      53: aload_2
      54: iconst_0
      55: invokeinterface #21,  2           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.endOfLineAnyEOL:(I)I
      60: istore        4
      62: aload_2
      63: invokeinterface #15,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.length:()I
      68: istore        5
      70: iload         4
      72: iload         5
      74: if_icmpge     95
      77: iinc          3, 1
      80: aload_2
      81: iload         4
      83: iconst_1
      84: iadd
      85: invokeinterface #21,  2           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.endOfLineAnyEOL:(I)I
      90: istore        4
      92: goto          70
      95: iload_3
      96: ireturn
      97: aload_0
      98: getfield      #11                 // Field lineSegments:Ljava/util/List;
     101: invokeinterface #17,  1           // InterfaceMethod java/util/List.size:()I
     106: istore_2
     107: iconst_0
     108: istore_3
     109: iload_3
     110: iload_2
     111: if_icmpge     144
     114: iload_1
     115: aload_0
     116: getfield      #11                 // Field lineSegments:Ljava/util/List;
     119: iload_3
     120: invokeinterface #22,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
     125: checkcast     #23                 // class com/vladsch/flexmark/util/sequence/BasedSequence
     128: invokeinterface #24,  1           // InterfaceMethod com/vladsch/flexmark/util/sequence/BasedSequence.getEndOffset:()I
     133: if_icmpge     138
     136: iload_3
     137: ireturn
     138: iinc          3, 1
     141: goto          109
     144: iload_2
     145: ireturn

  public <T> T getOrCompute(com.vladsch.flexmark.util.options.DataKey<T>, com.vladsch.flexmark.util.collection.DataValueFactory<T>);
    Code:
       0: aload_0
       1: getfield      #5                  // Field dataSet:Lcom/vladsch/flexmark/util/options/MutableDataSet;
       4: aload_1
       5: aload_2
       6: invokevirtual #25                 // Method com/vladsch/flexmark/util/options/MutableDataSet.getOrCompute:(Lcom/vladsch/flexmark/util/options/DataKey;Lcom/vladsch/flexmark/util/collection/DataValueFactory;)Ljava/lang/Object;
       9: areturn

  public <T> com.vladsch.flexmark.util.options.MutableDataHolder remove(com.vladsch.flexmark.util.options.DataKey<T>);
    Code:
       0: aload_0
       1: getfield      #5                  // Field dataSet:Lcom/vladsch/flexmark/util/options/MutableDataSet;
       4: aload_1
       5: invokevirtual #26                 // Method com/vladsch/flexmark/util/options/MutableDataSet.remove:(Lcom/vladsch/flexmark/util/options/DataKey;)Lcom/vladsch/flexmark/util/options/MutableDataSet;
       8: areturn

  public <T> com.vladsch.flexmark.util.options.MutableDataHolder set(com.vladsch.flexmark.util.options.DataKey<T>, T);
    Code:
       0: aload_0
       1: getfield      #5                  // Field dataSet:Lcom/vladsch/flexmark/util/options/MutableDataSet;
       4: aload_1
       5: aload_2
       6: invokevirtual #27                 // Method com/vladsch/flexmark/util/options/MutableDataSet.set:(Lcom/vladsch/flexmark/util/options/DataKey;Ljava/lang/Object;)Lcom/vladsch/flexmark/util/options/MutableDataSet;
       9: areturn

  public com.vladsch.flexmark.util.options.MutableDataHolder setFrom(com.vladsch.flexmark.util.options.MutableDataSetter);
    Code:
       0: aload_0
       1: getfield      #5                  // Field dataSet:Lcom/vladsch/flexmark/util/options/MutableDataSet;
       4: aload_1
       5: invokevirtual #28                 // Method com/vladsch/flexmark/util/options/MutableDataSet.setFrom:(Lcom/vladsch/flexmark/util/options/MutableDataSetter;)Lcom/vladsch/flexmark/util/options/MutableDataHolder;
       8: areturn

  public com.vladsch.flexmark.util.options.MutableDataHolder setAll(com.vladsch.flexmark.util.options.DataHolder);
    Code:
       0: aload_0
       1: getfield      #5                  // Field dataSet:Lcom/vladsch/flexmark/util/options/MutableDataSet;
       4: aload_1
       5: invokevirtual #29                 // Method com/vladsch/flexmark/util/options/MutableDataSet.setAll:(Lcom/vladsch/flexmark/util/options/DataHolder;)Lcom/vladsch/flexmark/util/options/MutableDataSet;
       8: pop
       9: aload_0
      10: getfield      #5                  // Field dataSet:Lcom/vladsch/flexmark/util/options/MutableDataSet;
      13: areturn

  public com.vladsch.flexmark.util.options.MutableDataHolder toMutable();
    Code:
       0: aload_0
       1: getfield      #5                  // Field dataSet:Lcom/vladsch/flexmark/util/options/MutableDataSet;
       4: invokevirtual #30                 // Method com/vladsch/flexmark/util/options/MutableDataSet.toMutable:()Lcom/vladsch/flexmark/util/options/MutableDataSet;
       7: areturn

  public com.vladsch.flexmark.util.options.DataHolder toImmutable();
    Code:
       0: aload_0
       1: getfield      #5                  // Field dataSet:Lcom/vladsch/flexmark/util/options/MutableDataSet;
       4: invokevirtual #31                 // Method com/vladsch/flexmark/util/options/MutableDataSet.toImmutable:()Lcom/vladsch/flexmark/util/options/DataHolder;
       7: areturn

  public com.vladsch.flexmark.util.options.MutableDataHolder clear();
    Code:
       0: new           #32                 // class java/lang/UnsupportedOperationException
       3: dup
       4: invokespecial #33                 // Method java/lang/UnsupportedOperationException."<init>":()V
       7: athrow
}
