Compiled from "JsFlumeCallback.java"
final class com.google.javascript.refactoring.JsFlumeCallback implements com.google.javascript.jscomp.NodeTraversal$Callback {
  private final com.google.javascript.refactoring.Scanner scanner;

  private final java.util.regex.Pattern includeFilePattern;

  private final java.util.List<com.google.javascript.refactoring.Match> matches;

  private final java.util.List<com.google.javascript.refactoring.SuggestedFix> fixes;

  com.google.javascript.refactoring.JsFlumeCallback(com.google.javascript.refactoring.Scanner, java.util.regex.Pattern);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/ArrayList
       8: dup
       9: invokespecial #3                  // Method java/util/ArrayList."<init>":()V
      12: putfield      #4                  // Field matches:Ljava/util/List;
      15: aload_0
      16: new           #2                  // class java/util/ArrayList
      19: dup
      20: invokespecial #3                  // Method java/util/ArrayList."<init>":()V
      23: putfield      #5                  // Field fixes:Ljava/util/List;
      26: aload_0
      27: aload_1
      28: putfield      #6                  // Field scanner:Lcom/google/javascript/refactoring/Scanner;
      31: aload_0
      32: aload_2
      33: putfield      #7                  // Field includeFilePattern:Ljava/util/regex/Pattern;
      36: return

  java.util.List<com.google.javascript.refactoring.Match> getMatches();
    Code:
       0: aload_0
       1: getfield      #4                  // Field matches:Ljava/util/List;
       4: areturn

  java.util.List<com.google.javascript.refactoring.SuggestedFix> getFixes();
    Code:
       0: aload_0
       1: getfield      #5                  // Field fixes:Ljava/util/List;
       4: areturn

  public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node);
    Code:
       0: aload_2
       1: invokevirtual #8                  // Method com/google/javascript/rhino/Node.isFromExterns:()Z
       4: ifeq          9
       7: iconst_0
       8: ireturn
       9: aload_2
      10: invokevirtual #9                  // Method com/google/javascript/rhino/Node.getSourceFileName:()Ljava/lang/String;
      13: astore        4
      15: aload_0
      16: getfield      #7                  // Field includeFilePattern:Ljava/util/regex/Pattern;
      19: ifnull        56
      22: aload_0
      23: getfield      #7                  // Field includeFilePattern:Ljava/util/regex/Pattern;
      26: invokevirtual #10                 // Method java/util/regex/Pattern.pattern:()Ljava/lang/String;
      29: invokestatic  #11                 // Method com/google/common/base/Strings.isNullOrEmpty:(Ljava/lang/String;)Z
      32: ifne          56
      35: aload         4
      37: invokestatic  #11                 // Method com/google/common/base/Strings.isNullOrEmpty:(Ljava/lang/String;)Z
      40: ifne          56
      43: aload_0
      44: getfield      #7                  // Field includeFilePattern:Ljava/util/regex/Pattern;
      47: aload         4
      49: invokevirtual #12                 // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
      52: invokevirtual #13                 // Method java/util/regex/Matcher.find:()Z
      55: ireturn
      56: iconst_1
      57: ireturn

  public void visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node);
    Code:
       0: new           #14                 // class com/google/javascript/refactoring/NodeMetadata
       3: dup
       4: aload_1
       5: invokevirtual #15                 // Method com/google/javascript/jscomp/NodeTraversal.getCompiler:()Lcom/google/javascript/jscomp/AbstractCompiler;
       8: invokespecial #16                 // Method com/google/javascript/refactoring/NodeMetadata."<init>":(Lcom/google/javascript/jscomp/AbstractCompiler;)V
      11: astore        4
      13: aload_0
      14: getfield      #6                  // Field scanner:Lcom/google/javascript/refactoring/Scanner;
      17: aload_2
      18: aload         4
      20: invokevirtual #17                 // Method com/google/javascript/refactoring/Scanner.matches:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/refactoring/NodeMetadata;)Z
      23: ifeq          69
      26: new           #18                 // class com/google/javascript/refactoring/Match
      29: dup
      30: aload_2
      31: aload         4
      33: invokespecial #19                 // Method com/google/javascript/refactoring/Match."<init>":(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/refactoring/NodeMetadata;)V
      36: astore        5
      38: aload_0
      39: getfield      #5                  // Field fixes:Ljava/util/List;
      42: aload_0
      43: getfield      #6                  // Field scanner:Lcom/google/javascript/refactoring/Scanner;
      46: aload         5
      48: invokevirtual #20                 // Method com/google/javascript/refactoring/Scanner.processMatch:(Lcom/google/javascript/refactoring/Match;)Ljava/util/List;
      51: invokeinterface #21,  2           // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
      56: pop
      57: aload_0
      58: getfield      #4                  // Field matches:Ljava/util/List;
      61: aload         5
      63: invokeinterface #22,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      68: pop
      69: return
}
