Compiled from "RenameProperties.java"
class com.google.javascript.jscomp.RenameProperties implements com.google.javascript.jscomp.CompilerPass {
  private final com.google.javascript.jscomp.AbstractCompiler compiler;

  private final boolean generatePseudoNames;

  private final com.google.javascript.jscomp.VariableMap prevUsedPropertyMap;

  private final java.util.List<com.google.javascript.rhino.Node> stringNodesToRename;

  private final java.util.Map<com.google.javascript.rhino.Node, com.google.javascript.rhino.Node> callNodeToParentMap;

  private final char[] reservedCharacters;

  private final java.util.Map<java.lang.String, com.google.javascript.jscomp.RenameProperties$Property> propertyMap;

  private final java.util.Set<java.lang.String> externedNames;

  private final java.util.Set<java.lang.String> quotedNames;

  private static final java.util.Comparator<com.google.javascript.jscomp.RenameProperties$Property> FREQUENCY_COMPARATOR;

  static final java.lang.String RENAME_PROPERTY_FUNCTION_NAME;

  static final com.google.javascript.jscomp.DiagnosticType BAD_CALL;

  static final com.google.javascript.jscomp.DiagnosticType BAD_ARG;

  com.google.javascript.jscomp.RenameProperties(com.google.javascript.jscomp.AbstractCompiler, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: aconst_null
       4: aconst_null
       5: invokespecial #7                  // Method "<init>":(Lcom/google/javascript/jscomp/AbstractCompiler;ZLcom/google/javascript/jscomp/VariableMap;[C)V
       8: return

  com.google.javascript.jscomp.RenameProperties(com.google.javascript.jscomp.AbstractCompiler, boolean, com.google.javascript.jscomp.VariableMap);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: aload_3
       4: aconst_null
       5: invokespecial #7                  // Method "<init>":(Lcom/google/javascript/jscomp/AbstractCompiler;ZLcom/google/javascript/jscomp/VariableMap;[C)V
       8: return

  com.google.javascript.jscomp.RenameProperties(com.google.javascript.jscomp.AbstractCompiler, boolean, com.google.javascript.jscomp.VariableMap, char[]);
    Code:
       0: aload_0
       1: invokespecial #8                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #9                  // class java/util/ArrayList
       8: dup
       9: invokespecial #10                 // Method java/util/ArrayList."<init>":()V
      12: putfield      #2                  // Field stringNodesToRename:Ljava/util/List;
      15: aload_0
      16: new           #11                 // class java/util/HashMap
      19: dup
      20: invokespecial #12                 // Method java/util/HashMap."<init>":()V
      23: putfield      #5                  // Field callNodeToParentMap:Ljava/util/Map;
      26: aload_0
      27: new           #11                 // class java/util/HashMap
      30: dup
      31: invokespecial #12                 // Method java/util/HashMap."<init>":()V
      34: putfield      #1                  // Field propertyMap:Ljava/util/Map;
      37: aload_0
      38: new           #13                 // class java/util/HashSet
      41: dup
      42: iconst_1
      43: anewarray     #14                 // class java/lang/String
      46: dup
      47: iconst_0
      48: ldc           #15                 // String prototype
      50: aastore
      51: invokestatic  #16                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      54: invokespecial #17                 // Method java/util/HashSet."<init>":(Ljava/util/Collection;)V
      57: putfield      #3                  // Field externedNames:Ljava/util/Set;
      60: aload_0
      61: new           #13                 // class java/util/HashSet
      64: dup
      65: invokespecial #18                 // Method java/util/HashSet."<init>":()V
      68: putfield      #6                  // Field quotedNames:Ljava/util/Set;
      71: aload_0
      72: aload_1
      73: putfield      #4                  // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
      76: aload_0
      77: iload_2
      78: putfield      #19                 // Field generatePseudoNames:Z
      81: aload_0
      82: aload_3
      83: putfield      #20                 // Field prevUsedPropertyMap:Lcom/google/javascript/jscomp/VariableMap;
      86: aload_0
      87: aload         4
      89: putfield      #21                 // Field reservedCharacters:[C
      92: aload_0
      93: getfield      #3                  // Field externedNames:Ljava/util/Set;
      96: aload_1
      97: invokevirtual #22                 // Method com/google/javascript/jscomp/AbstractCompiler.getExternProperties:()Ljava/util/Set;
     100: invokeinterface #23,  2           // InterfaceMethod java/util/Set.addAll:(Ljava/util/Collection;)Z
     105: pop
     106: return

  public void process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: getfield      #4                  // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
       4: invokevirtual #24                 // Method com/google/javascript/jscomp/AbstractCompiler.getLifeCycleStage:()Lcom/google/javascript/jscomp/AbstractCompiler$LifeCycleStage;
       7: invokevirtual #25                 // Method com/google/javascript/jscomp/AbstractCompiler$LifeCycleStage.isNormalized:()Z
      10: invokestatic  #26                 // Method com/google/common/base/Preconditions.checkState:(Z)V
      13: aload_0
      14: getfield      #4                  // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
      17: aload_2
      18: new           #27                 // class com/google/javascript/jscomp/RenameProperties$ProcessProperties
      21: dup
      22: aload_0
      23: aconst_null
      24: invokespecial #28                 // Method com/google/javascript/jscomp/RenameProperties$ProcessProperties."<init>":(Lcom/google/javascript/jscomp/RenameProperties;Lcom/google/javascript/jscomp/RenameProperties$1;)V
      27: invokestatic  #29                 // Method com/google/javascript/jscomp/NodeTraversal.traverse:(Lcom/google/javascript/jscomp/AbstractCompiler;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/NodeTraversal$Callback;)V
      30: new           #13                 // class java/util/HashSet
      33: dup
      34: aload_0
      35: getfield      #3                  // Field externedNames:Ljava/util/Set;
      38: invokeinterface #30,  1           // InterfaceMethod java/util/Set.size:()I
      43: aload_0
      44: getfield      #6                  // Field quotedNames:Ljava/util/Set;
      47: invokeinterface #30,  1           // InterfaceMethod java/util/Set.size:()I
      52: iadd
      53: invokespecial #31                 // Method java/util/HashSet."<init>":(I)V
      56: astore_3
      57: aload_3
      58: aload_0
      59: getfield      #3                  // Field externedNames:Ljava/util/Set;
      62: invokeinterface #23,  2           // InterfaceMethod java/util/Set.addAll:(Ljava/util/Collection;)Z
      67: pop
      68: aload_3
      69: aload_0
      70: getfield      #6                  // Field quotedNames:Ljava/util/Set;
      73: invokeinterface #23,  2           // InterfaceMethod java/util/Set.addAll:(Ljava/util/Collection;)Z
      78: pop
      79: aload_0
      80: getfield      #20                 // Field prevUsedPropertyMap:Lcom/google/javascript/jscomp/VariableMap;
      83: ifnull        100
      86: aload_0
      87: aload_3
      88: aload_0
      89: getfield      #1                  // Field propertyMap:Ljava/util/Map;
      92: invokeinterface #32,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
      97: invokespecial #33                 // Method reusePropertyNames:(Ljava/util/Set;Ljava/util/Collection;)V
     100: aload_0
     101: getfield      #4                  // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
     104: ldc           #34                 // String JS property assignments:
     106: invokevirtual #35                 // Method com/google/javascript/jscomp/AbstractCompiler.addToDebugLog:(Ljava/lang/String;)V
     109: new           #36                 // class java/util/TreeSet
     112: dup
     113: getstatic     #37                 // Field FREQUENCY_COMPARATOR:Ljava/util/Comparator;
     116: invokespecial #38                 // Method java/util/TreeSet."<init>":(Ljava/util/Comparator;)V
     119: astore        4
     121: aload         4
     123: aload_0
     124: getfield      #1                  // Field propertyMap:Ljava/util/Map;
     127: invokeinterface #32,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
     132: invokeinterface #23,  2           // InterfaceMethod java/util/Set.addAll:(Ljava/util/Collection;)Z
     137: pop
     138: aload_0
     139: aload         4
     141: aload_3
     142: invokespecial #39                 // Method generateNames:(Ljava/util/Set;Ljava/util/Set;)V
     145: iconst_0
     146: istore        5
     148: aload_0
     149: getfield      #2                  // Field stringNodesToRename:Ljava/util/List;
     152: invokeinterface #40,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     157: astore        6
     159: aload         6
     161: invokeinterface #41,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     166: ifeq          268
     169: aload         6
     171: invokeinterface #42,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     176: checkcast     #43                 // class com/google/javascript/rhino/Node
     179: astore        7
     181: aload         7
     183: invokevirtual #44                 // Method com/google/javascript/rhino/Node.getString:()Ljava/lang/String;
     186: astore        8
     188: aload_0
     189: getfield      #1                  // Field propertyMap:Ljava/util/Map;
     192: aload         8
     194: invokeinterface #45,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
     199: checkcast     #46                 // class com/google/javascript/jscomp/RenameProperties$Property
     202: astore        9
     204: aload         9
     206: ifnull        265
     209: aload         9
     211: getfield      #47                 // Field com/google/javascript/jscomp/RenameProperties$Property.newName:Ljava/lang/String;
     214: ifnull        265
     217: aload         8
     219: aload         9
     221: getfield      #48                 // Field com/google/javascript/jscomp/RenameProperties$Property.oldName:Ljava/lang/String;
     224: invokevirtual #49                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     227: invokestatic  #26                 // Method com/google/common/base/Preconditions.checkState:(Z)V
     230: aload         7
     232: aload         9
     234: getfield      #47                 // Field com/google/javascript/jscomp/RenameProperties$Property.newName:Ljava/lang/String;
     237: invokevirtual #50                 // Method com/google/javascript/rhino/Node.setString:(Ljava/lang/String;)V
     240: iload         5
     242: ifne          258
     245: aload         9
     247: getfield      #47                 // Field com/google/javascript/jscomp/RenameProperties$Property.newName:Ljava/lang/String;
     250: aload         8
     252: invokevirtual #49                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     255: ifne          262
     258: iconst_1
     259: goto          263
     262: iconst_0
     263: istore        5
     265: goto          159
     268: aload_0
     269: getfield      #5                  // Field callNodeToParentMap:Ljava/util/Map;
     272: invokeinterface #51,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
     277: invokeinterface #52,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
     282: astore        6
     284: aload         6
     286: invokeinterface #41,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     291: ifeq          499
     294: aload         6
     296: invokeinterface #42,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     301: checkcast     #53                 // class java/util/Map$Entry
     304: astore        7
     306: aload         7
     308: invokeinterface #54,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
     313: checkcast     #43                 // class com/google/javascript/rhino/Node
     316: astore        8
     318: aload         7
     320: invokeinterface #55,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
     325: checkcast     #43                 // class com/google/javascript/rhino/Node
     328: invokevirtual #56                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
     331: invokevirtual #57                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
     334: astore        9
     336: new           #58                 // class java/lang/StringBuilder
     339: dup
     340: invokespecial #59                 // Method java/lang/StringBuilder."<init>":()V
     343: astore        10
     345: bipush        46
     347: invokestatic  #60                 // Method com/google/common/base/Splitter.on:(C)Lcom/google/common/base/Splitter;
     350: aload         9
     352: invokevirtual #44                 // Method com/google/javascript/rhino/Node.getString:()Ljava/lang/String;
     355: invokevirtual #61                 // Method com/google/common/base/Splitter.split:(Ljava/lang/CharSequence;)Ljava/lang/Iterable;
     358: invokeinterface #62,  1           // InterfaceMethod java/lang/Iterable.iterator:()Ljava/util/Iterator;
     363: astore        11
     365: aload         11
     367: invokeinterface #41,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     372: ifeq          470
     375: aload         11
     377: invokeinterface #42,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     382: checkcast     #14                 // class java/lang/String
     385: astore        12
     387: aload_0
     388: getfield      #1                  // Field propertyMap:Ljava/util/Map;
     391: aload         12
     393: invokeinterface #45,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
     398: checkcast     #46                 // class com/google/javascript/jscomp/RenameProperties$Property
     401: astore        13
     403: aload         13
     405: ifnull        439
     408: aload         13
     410: getfield      #47                 // Field com/google/javascript/jscomp/RenameProperties$Property.newName:Ljava/lang/String;
     413: ifnull        439
     416: aload         12
     418: aload         13
     420: getfield      #48                 // Field com/google/javascript/jscomp/RenameProperties$Property.oldName:Ljava/lang/String;
     423: invokevirtual #49                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     426: invokestatic  #26                 // Method com/google/common/base/Preconditions.checkState:(Z)V
     429: aload         13
     431: getfield      #47                 // Field com/google/javascript/jscomp/RenameProperties$Property.newName:Ljava/lang/String;
     434: astore        14
     436: goto          443
     439: aload         12
     441: astore        14
     443: aload         10
     445: invokevirtual #63                 // Method java/lang/StringBuilder.length:()I
     448: ifle          459
     451: aload         10
     453: bipush        46
     455: invokevirtual #64                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
     458: pop
     459: aload         10
     461: aload         14
     463: invokevirtual #65                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     466: pop
     467: goto          365
     470: aload         8
     472: aload         7
     474: invokeinterface #55,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
     479: checkcast     #43                 // class com/google/javascript/rhino/Node
     482: aload         10
     484: invokevirtual #66                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     487: invokestatic  #67                 // Method com/google/javascript/rhino/IR.string:(Ljava/lang/String;)Lcom/google/javascript/rhino/Node;
     490: invokevirtual #68                 // Method com/google/javascript/rhino/Node.replaceChild:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V
     493: iconst_1
     494: istore        5
     496: goto          284
     499: iload         5
     501: ifeq          511
     504: aload_0
     505: getfield      #4                  // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
     508: invokevirtual #69                 // Method com/google/javascript/jscomp/AbstractCompiler.reportCodeChange:()V
     511: aload_0
     512: getfield      #4                  // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
     515: getstatic     #70                 // Field com/google/javascript/jscomp/AbstractCompiler$LifeCycleStage.NORMALIZED_OBFUSCATED:Lcom/google/javascript/jscomp/AbstractCompiler$LifeCycleStage;
     518: invokevirtual #71                 // Method com/google/javascript/jscomp/AbstractCompiler.setLifeCycleStage:(Lcom/google/javascript/jscomp/AbstractCompiler$LifeCycleStage;)V
     521: return

  private void reusePropertyNames(java.util.Set<java.lang.String>, java.util.Collection<com.google.javascript.jscomp.RenameProperties$Property>);
    Code:
       0: aload_2
       1: invokeinterface #72,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
       6: astore_3
       7: aload_3
       8: invokeinterface #41,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      13: ifeq          86
      16: aload_3
      17: invokeinterface #42,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      22: checkcast     #46                 // class com/google/javascript/jscomp/RenameProperties$Property
      25: astore        4
      27: aload_0
      28: getfield      #20                 // Field prevUsedPropertyMap:Lcom/google/javascript/jscomp/VariableMap;
      31: aload         4
      33: getfield      #48                 // Field com/google/javascript/jscomp/RenameProperties$Property.oldName:Ljava/lang/String;
      36: invokevirtual #73                 // Method com/google/javascript/jscomp/VariableMap.lookupNewName:(Ljava/lang/String;)Ljava/lang/String;
      39: astore        5
      41: aload_0
      42: getfield      #19                 // Field generatePseudoNames:Z
      45: ifne          83
      48: aload         5
      50: ifnull        83
      53: aload_1
      54: aload         5
      56: invokeinterface #74,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      61: ifeq          67
      64: goto          7
      67: aload         4
      69: aload         5
      71: putfield      #47                 // Field com/google/javascript/jscomp/RenameProperties$Property.newName:Ljava/lang/String;
      74: aload_1
      75: aload         5
      77: invokeinterface #75,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      82: pop
      83: goto          7
      86: return

  private void generateNames(java.util.Set<com.google.javascript.jscomp.RenameProperties$Property>, java.util.Set<java.lang.String>);
    Code:
       0: new           #76                 // class com/google/javascript/jscomp/NameGenerator
       3: dup
       4: aload_2
       5: ldc           #77                 // String
       7: aload_0
       8: getfield      #21                 // Field reservedCharacters:[C
      11: invokespecial #78                 // Method com/google/javascript/jscomp/NameGenerator."<init>":(Ljava/util/Set;Ljava/lang/String;[C)V
      14: astore_3
      15: aload_1
      16: invokeinterface #52,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      21: astore        4
      23: aload         4
      25: invokeinterface #41,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      30: ifeq          158
      33: aload         4
      35: invokeinterface #42,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      40: checkcast     #46                 // class com/google/javascript/jscomp/RenameProperties$Property
      43: astore        5
      45: aload_0
      46: getfield      #19                 // Field generatePseudoNames:Z
      49: ifeq          88
      52: aload         5
      54: new           #58                 // class java/lang/StringBuilder
      57: dup
      58: invokespecial #59                 // Method java/lang/StringBuilder."<init>":()V
      61: ldc           #79                 // String $
      63: invokevirtual #65                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      66: aload         5
      68: getfield      #48                 // Field com/google/javascript/jscomp/RenameProperties$Property.oldName:Ljava/lang/String;
      71: invokevirtual #65                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      74: ldc           #79                 // String $
      76: invokevirtual #65                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      79: invokevirtual #66                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      82: putfield      #47                 // Field com/google/javascript/jscomp/RenameProperties$Property.newName:Ljava/lang/String;
      85: goto          105
      88: aload         5
      90: getfield      #47                 // Field com/google/javascript/jscomp/RenameProperties$Property.newName:Ljava/lang/String;
      93: ifnonnull     105
      96: aload         5
      98: aload_3
      99: invokevirtual #80                 // Method com/google/javascript/jscomp/NameGenerator.generateNextName:()Ljava/lang/String;
     102: putfield      #47                 // Field com/google/javascript/jscomp/RenameProperties$Property.newName:Ljava/lang/String;
     105: aload_2
     106: aload         5
     108: getfield      #47                 // Field com/google/javascript/jscomp/RenameProperties$Property.newName:Ljava/lang/String;
     111: invokeinterface #75,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
     116: pop
     117: aload_0
     118: getfield      #4                  // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
     121: new           #58                 // class java/lang/StringBuilder
     124: dup
     125: invokespecial #59                 // Method java/lang/StringBuilder."<init>":()V
     128: aload         5
     130: getfield      #48                 // Field com/google/javascript/jscomp/RenameProperties$Property.oldName:Ljava/lang/String;
     133: invokevirtual #65                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     136: ldc           #81                 // String  =>
     138: invokevirtual #65                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     141: aload         5
     143: getfield      #47                 // Field com/google/javascript/jscomp/RenameProperties$Property.newName:Ljava/lang/String;
     146: invokevirtual #65                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     149: invokevirtual #66                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     152: invokevirtual #35                 // Method com/google/javascript/jscomp/AbstractCompiler.addToDebugLog:(Ljava/lang/String;)V
     155: goto          23
     158: return

  com.google.javascript.jscomp.VariableMap getPropertyMap();
    Code:
       0: invokestatic  #82                 // Method com/google/common/collect/ImmutableMap.builder:()Lcom/google/common/collect/ImmutableMap$Builder;
       3: astore_1
       4: aload_0
       5: getfield      #1                  // Field propertyMap:Ljava/util/Map;
       8: invokeinterface #32,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
      13: invokeinterface #72,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      18: astore_2
      19: aload_2
      20: invokeinterface #41,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      25: ifeq          61
      28: aload_2
      29: invokeinterface #42,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      34: checkcast     #46                 // class com/google/javascript/jscomp/RenameProperties$Property
      37: astore_3
      38: aload_3
      39: getfield      #47                 // Field com/google/javascript/jscomp/RenameProperties$Property.newName:Ljava/lang/String;
      42: ifnull        58
      45: aload_1
      46: aload_3
      47: getfield      #48                 // Field com/google/javascript/jscomp/RenameProperties$Property.oldName:Ljava/lang/String;
      50: aload_3
      51: getfield      #47                 // Field com/google/javascript/jscomp/RenameProperties$Property.newName:Ljava/lang/String;
      54: invokevirtual #83                 // Method com/google/common/collect/ImmutableMap$Builder.put:(Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableMap$Builder;
      57: pop
      58: goto          19
      61: new           #84                 // class com/google/javascript/jscomp/VariableMap
      64: dup
      65: aload_1
      66: invokevirtual #85                 // Method com/google/common/collect/ImmutableMap$Builder.build:()Lcom/google/common/collect/ImmutableMap;
      69: invokespecial #86                 // Method com/google/javascript/jscomp/VariableMap."<init>":(Ljava/util/Map;)V
      72: areturn

  static java.util.Set access$100(com.google.javascript.jscomp.RenameProperties);
    Code:
       0: aload_0
       1: getfield      #6                  // Field quotedNames:Ljava/util/Set;
       4: areturn

  static java.util.Map access$200(com.google.javascript.jscomp.RenameProperties);
    Code:
       0: aload_0
       1: getfield      #5                  // Field callNodeToParentMap:Ljava/util/Map;
       4: areturn

  static com.google.javascript.jscomp.AbstractCompiler access$300(com.google.javascript.jscomp.RenameProperties);
    Code:
       0: aload_0
       1: getfield      #4                  // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
       4: areturn

  static java.util.Set access$400(com.google.javascript.jscomp.RenameProperties);
    Code:
       0: aload_0
       1: getfield      #3                  // Field externedNames:Ljava/util/Set;
       4: areturn

  static java.util.List access$500(com.google.javascript.jscomp.RenameProperties);
    Code:
       0: aload_0
       1: getfield      #2                  // Field stringNodesToRename:Ljava/util/List;
       4: areturn

  static java.util.Map access$600(com.google.javascript.jscomp.RenameProperties);
    Code:
       0: aload_0
       1: getfield      #1                  // Field propertyMap:Ljava/util/Map;
       4: areturn

  static {};
    Code:
       0: new           #87                 // class com/google/javascript/jscomp/RenameProperties$1
       3: dup
       4: invokespecial #88                 // Method com/google/javascript/jscomp/RenameProperties$1."<init>":()V
       7: putstatic     #37                 // Field FREQUENCY_COMPARATOR:Ljava/util/Comparator;
      10: ldc           #89                 // String JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_CALL
      12: ldc           #91                 // String Bad JSCompiler_renameProperty call - argument must be a string literal
      14: invokestatic  #92                 // Method com/google/javascript/jscomp/DiagnosticType.error:(Ljava/lang/String;Ljava/lang/String;)Lcom/google/javascript/jscomp/DiagnosticType;
      17: putstatic     #93                 // Field BAD_CALL:Lcom/google/javascript/jscomp/DiagnosticType;
      20: ldc           #94                 // String JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_ARG
      22: ldc           #95                 // String Bad JSCompiler_renameProperty argument - \'{0}\' is not a valid JavaScript identifier
      24: invokestatic  #92                 // Method com/google/javascript/jscomp/DiagnosticType.error:(Ljava/lang/String;Ljava/lang/String;)Lcom/google/javascript/jscomp/DiagnosticType;
      27: putstatic     #96                 // Field BAD_ARG:Lcom/google/javascript/jscomp/DiagnosticType;
      30: return
}
