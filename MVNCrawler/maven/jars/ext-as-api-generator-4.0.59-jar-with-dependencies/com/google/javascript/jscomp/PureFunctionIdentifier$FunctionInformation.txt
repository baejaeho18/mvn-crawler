Compiled from "PureFunctionIdentifier.java"
class com.google.javascript.jscomp.PureFunctionIdentifier$FunctionInformation {
  private java.util.List<com.google.javascript.rhino.Node> callsInFunctionBody;

  private java.util.Set<com.google.javascript.jscomp.Scope$Var> blacklisted;

  private java.util.Set<com.google.javascript.jscomp.Scope$Var> taintedLocals;

  private int bitmask;

  private static final int EXTERN_MASK;

  private static final int PURE_FUNCTION_MASK;

  private static final int FUNCTION_THROWS_MASK;

  private static final int TAINTS_GLOBAL_STATE_MASK;

  private static final int TAINTS_THIS_MASK;

  private static final int TAINTS_ARGUMENTS_MASK;

  private static final int TAINTS_UNKNOWN_MASK;

  private static final int TAINTS_RETURN_MASK;

  private void setMask(int, boolean);
    Code:
       0: iload_2
       1: ifeq          17
       4: aload_0
       5: dup
       6: getfield      #5                  // Field bitmask:I
       9: iload_1
      10: ior
      11: putfield      #5                  // Field bitmask:I
      14: goto          29
      17: aload_0
      18: dup
      19: getfield      #5                  // Field bitmask:I
      22: iload_1
      23: iconst_m1
      24: ixor
      25: iand
      26: putfield      #5                  // Field bitmask:I
      29: return

  private boolean getMask(int);
    Code:
       0: aload_0
       1: getfield      #5                  // Field bitmask:I
       4: iload_1
       5: iand
       6: ifeq          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  private boolean extern();
    Code:
       0: aload_0
       1: iconst_1
       2: invokespecial #7                  // Method getMask:(I)Z
       5: ireturn

  private boolean pureFunction();
    Code:
       0: aload_0
       1: iconst_2
       2: invokespecial #7                  // Method getMask:(I)Z
       5: ireturn

  private boolean taintsGlobalState();
    Code:
       0: aload_0
       1: bipush        8
       3: invokespecial #7                  // Method getMask:(I)Z
       6: ireturn

  private boolean taintsThis();
    Code:
       0: aload_0
       1: bipush        16
       3: invokespecial #7                  // Method getMask:(I)Z
       6: ireturn

  private boolean taintsUnknown();
    Code:
       0: aload_0
       1: bipush        64
       3: invokespecial #7                  // Method getMask:(I)Z
       6: ireturn

  private boolean taintsReturn();
    Code:
       0: aload_0
       1: sipush        128
       4: invokespecial #7                  // Method getMask:(I)Z
       7: ireturn

  boolean functionThrows();
    Code:
       0: aload_0
       1: iconst_4
       2: invokespecial #7                  // Method getMask:(I)Z
       5: ireturn

  com.google.javascript.jscomp.PureFunctionIdentifier$FunctionInformation(boolean);
    Code:
       0: aload_0
       1: invokespecial #8                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #9                  // Field callsInFunctionBody:Ljava/util/List;
       9: aload_0
      10: aconst_null
      11: putfield      #1                  // Field blacklisted:Ljava/util/Set;
      14: aload_0
      15: aconst_null
      16: putfield      #2                  // Field taintedLocals:Ljava/util/Set;
      19: aload_0
      20: iconst_0
      21: putfield      #5                  // Field bitmask:I
      24: aload_0
      25: iconst_1
      26: iload_1
      27: invokespecial #10                 // Method setMask:(IZ)V
      30: aload_0
      31: invokespecial #11                 // Method checkInvariant:()V
      34: return

  public java.util.Set<com.google.javascript.jscomp.Scope$Var> taintedLocals();
    Code:
       0: aload_0
       1: getfield      #2                  // Field taintedLocals:Ljava/util/Set;
       4: ifnonnull     11
       7: invokestatic  #12                 // Method java/util/Collections.emptySet:()Ljava/util/Set;
      10: areturn
      11: aload_0
      12: getfield      #2                  // Field taintedLocals:Ljava/util/Set;
      15: areturn

  void addTaintedLocalObject(com.google.javascript.jscomp.Scope$Var);
    Code:
       0: aload_0
       1: getfield      #2                  // Field taintedLocals:Ljava/util/Set;
       4: ifnonnull     18
       7: aload_0
       8: new           #13                 // class java/util/HashSet
      11: dup
      12: invokespecial #14                 // Method java/util/HashSet."<init>":()V
      15: putfield      #2                  // Field taintedLocals:Ljava/util/Set;
      18: aload_0
      19: getfield      #2                  // Field taintedLocals:Ljava/util/Set;
      22: aload_1
      23: invokeinterface #15,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      28: pop
      29: return

  void resetLocalVars();
    Code:
       0: aload_0
       1: invokestatic  #12                 // Method java/util/Collections.emptySet:()Ljava/util/Set;
       4: putfield      #1                  // Field blacklisted:Ljava/util/Set;
       7: aload_0
       8: invokestatic  #12                 // Method java/util/Collections.emptySet:()Ljava/util/Set;
      11: putfield      #2                  // Field taintedLocals:Ljava/util/Set;
      14: return

  public java.util.Set<com.google.javascript.jscomp.Scope$Var> blacklisted();
    Code:
       0: aload_0
       1: getfield      #1                  // Field blacklisted:Ljava/util/Set;
       4: ifnonnull     11
       7: invokestatic  #12                 // Method java/util/Collections.emptySet:()Ljava/util/Set;
      10: areturn
      11: aload_0
      12: getfield      #1                  // Field blacklisted:Ljava/util/Set;
      15: areturn

  public void blacklistLocal(com.google.javascript.jscomp.Scope$Var);
    Code:
       0: aload_0
       1: getfield      #1                  // Field blacklisted:Ljava/util/Set;
       4: ifnonnull     18
       7: aload_0
       8: new           #13                 // class java/util/HashSet
      11: dup
      12: invokespecial #14                 // Method java/util/HashSet."<init>":()V
      15: putfield      #1                  // Field blacklisted:Ljava/util/Set;
      18: aload_0
      19: getfield      #1                  // Field blacklisted:Ljava/util/Set;
      22: aload_1
      23: invokeinterface #15,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      28: pop
      29: return

  boolean mayBePure();
    Code:
       0: aload_0
       1: bipush        124
       3: invokespecial #7                  // Method getMask:(I)Z
       6: ifne          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  boolean mayHaveSideEffects();
    Code:
       0: aload_0
       1: invokespecial #16                 // Method pureFunction:()Z
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  void setIsPure();
    Code:
       0: aload_0
       1: iconst_2
       2: iconst_1
       3: invokespecial #10                 // Method setMask:(IZ)V
       6: aload_0
       7: invokespecial #11                 // Method checkInvariant:()V
      10: return

  void setTaintsGlobalState();
    Code:
       0: aload_0
       1: bipush        8
       3: iconst_1
       4: invokespecial #10                 // Method setMask:(IZ)V
       7: aload_0
       8: invokespecial #11                 // Method checkInvariant:()V
      11: return

  void setTaintsThis();
    Code:
       0: aload_0
       1: bipush        16
       3: iconst_1
       4: invokespecial #10                 // Method setMask:(IZ)V
       7: aload_0
       8: invokespecial #11                 // Method checkInvariant:()V
      11: return

  void setTaintsArguments();
    Code:
       0: aload_0
       1: bipush        32
       3: iconst_1
       4: invokespecial #10                 // Method setMask:(IZ)V
       7: aload_0
       8: invokespecial #11                 // Method checkInvariant:()V
      11: return

  void setFunctionThrows();
    Code:
       0: aload_0
       1: iconst_4
       2: iconst_1
       3: invokespecial #10                 // Method setMask:(IZ)V
       6: aload_0
       7: invokespecial #11                 // Method checkInvariant:()V
      10: return

  void setTaintsUnknown();
    Code:
       0: aload_0
       1: bipush        64
       3: iconst_1
       4: invokespecial #10                 // Method setMask:(IZ)V
       7: aload_0
       8: invokespecial #11                 // Method checkInvariant:()V
      11: return

  void setTaintsReturn();
    Code:
       0: aload_0
       1: sipush        128
       4: iconst_1
       5: invokespecial #10                 // Method setMask:(IZ)V
       8: aload_0
       9: invokespecial #11                 // Method checkInvariant:()V
      12: return

  boolean mutatesGlobalState();
    Code:
       0: aload_0
       1: bipush        72
       3: invokespecial #7                  // Method getMask:(I)Z
       6: ireturn

  boolean mutatesArguments();
    Code:
       0: aload_0
       1: bipush        104
       3: invokespecial #7                  // Method getMask:(I)Z
       6: ireturn

  boolean mutatesThis();
    Code:
       0: aload_0
       1: invokespecial #4                  // Method taintsThis:()Z
       4: ireturn

  private void checkInvariant();
    Code:
       0: aload_0
       1: invokevirtual #17                 // Method mayBePure:()Z
       4: ifne          14
       7: aload_0
       8: invokevirtual #18                 // Method mayHaveSideEffects:()Z
      11: ifeq          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: istore_1
      20: iload_1
      21: ifne          51
      24: new           #19                 // class java/lang/IllegalStateException
      27: dup
      28: new           #20                 // class java/lang/StringBuilder
      31: dup
      32: invokespecial #21                 // Method java/lang/StringBuilder."<init>":()V
      35: ldc           #22                 // String Invariant failed.
      37: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      40: aload_0
      41: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      44: invokevirtual #25                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      47: invokespecial #26                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      50: athrow
      51: return

  void appendCall(com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: getfield      #9                  // Field callsInFunctionBody:Ljava/util/List;
       4: ifnonnull     18
       7: aload_0
       8: new           #27                 // class java/util/ArrayList
      11: dup
      12: invokespecial #28                 // Method java/util/ArrayList."<init>":()V
      15: putfield      #9                  // Field callsInFunctionBody:Ljava/util/List;
      18: aload_0
      19: getfield      #9                  // Field callsInFunctionBody:Ljava/util/List;
      22: aload_1
      23: invokeinterface #29,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      28: pop
      29: return

  java.util.List<com.google.javascript.rhino.Node> getCallsInFunctionBody();
    Code:
       0: aload_0
       1: getfield      #9                  // Field callsInFunctionBody:Ljava/util/List;
       4: ifnonnull     11
       7: invokestatic  #30                 // Method java/util/Collections.emptyList:()Ljava/util/List;
      10: areturn
      11: aload_0
      12: getfield      #9                  // Field callsInFunctionBody:Ljava/util/List;
      15: areturn

  public java.lang.String toString();
    Code:
       0: invokestatic  #31                 // Method com/google/common/collect/Lists.newArrayList:()Ljava/util/ArrayList;
       3: astore_1
       4: aload_0
       5: invokespecial #32                 // Method extern:()Z
       8: ifeq          20
      11: aload_1
      12: ldc           #33                 // String extern
      14: invokeinterface #29,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      19: pop
      20: aload_0
      21: invokespecial #16                 // Method pureFunction:()Z
      24: ifeq          36
      27: aload_1
      28: ldc           #34                 // String pure
      30: invokeinterface #29,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      35: pop
      36: aload_0
      37: invokespecial #4                  // Method taintsThis:()Z
      40: ifeq          52
      43: aload_1
      44: ldc           #35                 // String this
      46: invokeinterface #29,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      51: pop
      52: aload_0
      53: invokespecial #36                 // Method taintsGlobalState:()Z
      56: ifeq          68
      59: aload_1
      60: ldc           #37                 // String global
      62: invokeinterface #29,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      67: pop
      68: aload_0
      69: invokevirtual #38                 // Method functionThrows:()Z
      72: ifeq          84
      75: aload_1
      76: ldc           #39                 // String throw
      78: invokeinterface #29,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      83: pop
      84: aload_0
      85: invokespecial #40                 // Method taintsUnknown:()Z
      88: ifeq          100
      91: aload_1
      92: ldc           #41                 // String complex
      94: invokeinterface #29,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      99: pop
     100: new           #20                 // class java/lang/StringBuilder
     103: dup
     104: invokespecial #21                 // Method java/lang/StringBuilder."<init>":()V
     107: ldc           #42                 // String Side effects:
     109: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     112: aload_1
     113: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     116: invokevirtual #25                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     119: areturn

  static boolean access$100(com.google.javascript.jscomp.PureFunctionIdentifier$FunctionInformation);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method taintsThis:()Z
       4: ireturn

  static boolean access$200(com.google.javascript.jscomp.PureFunctionIdentifier$FunctionInformation);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method taintsReturn:()Z
       4: ireturn

  static java.util.Set access$502(com.google.javascript.jscomp.PureFunctionIdentifier$FunctionInformation, java.util.Set);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #2                  // Field taintedLocals:Ljava/util/Set;
       6: areturn

  static java.util.Set access$602(com.google.javascript.jscomp.PureFunctionIdentifier$FunctionInformation, java.util.Set);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #1                  // Field blacklisted:Ljava/util/Set;
       6: areturn
}
