Compiled from "TypeInferencePass.java"
class com.google.javascript.jscomp.TypeInferencePass implements com.google.javascript.jscomp.CompilerPass {
  static final com.google.javascript.jscomp.DiagnosticType DATAFLOW_ERROR;

  private final com.google.javascript.jscomp.AbstractCompiler compiler;

  private final com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter;

  private final com.google.javascript.jscomp.Scope topScope;

  private final com.google.javascript.jscomp.MemoizedScopeCreator scopeCreator;

  private final java.util.Map<java.lang.String, com.google.javascript.jscomp.CodingConvention$AssertionFunctionSpec> assertionFunctionsMap;

  com.google.javascript.jscomp.TypeInferencePass(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.type.ReverseAbstractInterpreter, com.google.javascript.jscomp.Scope, com.google.javascript.jscomp.MemoizedScopeCreator);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field reverseInterpreter:Lcom/google/javascript/jscomp/type/ReverseAbstractInterpreter;
      14: aload_0
      15: aload_3
      16: putfield      #4                  // Field topScope:Lcom/google/javascript/jscomp/Scope;
      19: aload_0
      20: aload         4
      22: putfield      #5                  // Field scopeCreator:Lcom/google/javascript/jscomp/MemoizedScopeCreator;
      25: aload_0
      26: invokestatic  #6                  // Method com/google/common/collect/Maps.newHashMap:()Ljava/util/HashMap;
      29: putfield      #7                  // Field assertionFunctionsMap:Ljava/util/Map;
      32: aload_1
      33: invokevirtual #8                  // Method com/google/javascript/jscomp/AbstractCompiler.getCodingConvention:()Lcom/google/javascript/jscomp/CodingConvention;
      36: invokeinterface #9,  1            // InterfaceMethod com/google/javascript/jscomp/CodingConvention.getAssertionFunctions:()Ljava/util/Collection;
      41: invokeinterface #10,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      46: astore        5
      48: aload         5
      50: invokeinterface #11,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      55: ifeq          90
      58: aload         5
      60: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      65: checkcast     #13                 // class com/google/javascript/jscomp/CodingConvention$AssertionFunctionSpec
      68: astore        6
      70: aload_0
      71: getfield      #7                  // Field assertionFunctionsMap:Ljava/util/Map;
      74: aload         6
      76: invokevirtual #14                 // Method com/google/javascript/jscomp/CodingConvention$AssertionFunctionSpec.getFunctionName:()Ljava/lang/String;
      79: aload         6
      81: invokeinterface #15,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      86: pop
      87: goto          48
      90: return

  public void process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node);
    Code:
       0: aload_2
       1: invokevirtual #16                 // Method com/google/javascript/rhino/Node.getParent:()Lcom/google/javascript/rhino/Node;
       4: astore_3
       5: aload_3
       6: ifnull        13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: invokestatic  #17                 // Method com/google/common/base/Preconditions.checkState:(Z)V
      17: aload_1
      18: ifnull        29
      21: aload_3
      22: aload_1
      23: invokevirtual #18                 // Method com/google/javascript/rhino/Node.hasChild:(Lcom/google/javascript/rhino/Node;)Z
      26: ifeq          33
      29: iconst_1
      30: goto          34
      33: iconst_0
      34: invokestatic  #17                 // Method com/google/common/base/Preconditions.checkState:(Z)V
      37: aload_0
      38: aload_3
      39: invokevirtual #19                 // Method inferAllScopes:(Lcom/google/javascript/rhino/Node;)V
      42: return

  void inferAllScopes(com.google.javascript.rhino.Node);
    Code:
       0: new           #20                 // class com/google/javascript/jscomp/NodeTraversal
       3: dup
       4: aload_0
       5: getfield      #2                  // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
       8: new           #21                 // class com/google/javascript/jscomp/TypeInferencePass$FirstScopeBuildingCallback
      11: dup
      12: aconst_null
      13: invokespecial #22                 // Method com/google/javascript/jscomp/TypeInferencePass$FirstScopeBuildingCallback."<init>":(Lcom/google/javascript/jscomp/TypeInferencePass$1;)V
      16: aload_0
      17: getfield      #5                  // Field scopeCreator:Lcom/google/javascript/jscomp/MemoizedScopeCreator;
      20: invokespecial #23                 // Method com/google/javascript/jscomp/NodeTraversal."<init>":(Lcom/google/javascript/jscomp/AbstractCompiler;Lcom/google/javascript/jscomp/NodeTraversal$Callback;Lcom/google/javascript/jscomp/ScopeCreator;)V
      23: aload_1
      24: aload_0
      25: getfield      #4                  // Field topScope:Lcom/google/javascript/jscomp/Scope;
      28: invokevirtual #24                 // Method com/google/javascript/jscomp/NodeTraversal.traverseWithScope:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/Scope;)V
      31: aload_0
      32: getfield      #5                  // Field scopeCreator:Lcom/google/javascript/jscomp/MemoizedScopeCreator;
      35: invokevirtual #25                 // Method com/google/javascript/jscomp/MemoizedScopeCreator.getAllMemoizedScopes:()Ljava/util/Collection;
      38: invokeinterface #10,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      43: astore_2
      44: aload_2
      45: invokeinterface #11,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      50: ifeq          70
      53: aload_2
      54: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      59: checkcast     #26                 // class com/google/javascript/jscomp/Scope
      62: astore_3
      63: aload_3
      64: invokevirtual #27                 // Method com/google/javascript/jscomp/Scope.resolveTypes:()V
      67: goto          44
      70: new           #20                 // class com/google/javascript/jscomp/NodeTraversal
      73: dup
      74: aload_0
      75: getfield      #2                  // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
      78: new           #28                 // class com/google/javascript/jscomp/TypeInferencePass$SecondScopeBuildingCallback
      81: dup
      82: aload_0
      83: aconst_null
      84: invokespecial #29                 // Method com/google/javascript/jscomp/TypeInferencePass$SecondScopeBuildingCallback."<init>":(Lcom/google/javascript/jscomp/TypeInferencePass;Lcom/google/javascript/jscomp/TypeInferencePass$1;)V
      87: aload_0
      88: getfield      #5                  // Field scopeCreator:Lcom/google/javascript/jscomp/MemoizedScopeCreator;
      91: invokespecial #23                 // Method com/google/javascript/jscomp/NodeTraversal."<init>":(Lcom/google/javascript/jscomp/AbstractCompiler;Lcom/google/javascript/jscomp/NodeTraversal$Callback;Lcom/google/javascript/jscomp/ScopeCreator;)V
      94: aload_1
      95: aload_0
      96: getfield      #4                  // Field topScope:Lcom/google/javascript/jscomp/Scope;
      99: invokevirtual #24                 // Method com/google/javascript/jscomp/NodeTraversal.traverseWithScope:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/Scope;)V
     102: return

  void inferScope(com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope);
    Code:
       0: new           #30                 // class com/google/javascript/jscomp/TypeInference
       3: dup
       4: aload_0
       5: getfield      #2                  // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
       8: aload_0
       9: aload_1
      10: invokespecial #31                 // Method computeCfg:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/jscomp/ControlFlowGraph;
      13: aload_0
      14: getfield      #3                  // Field reverseInterpreter:Lcom/google/javascript/jscomp/type/ReverseAbstractInterpreter;
      17: aload_2
      18: aload_0
      19: getfield      #7                  // Field assertionFunctionsMap:Ljava/util/Map;
      22: invokespecial #32                 // Method com/google/javascript/jscomp/TypeInference."<init>":(Lcom/google/javascript/jscomp/AbstractCompiler;Lcom/google/javascript/jscomp/ControlFlowGraph;Lcom/google/javascript/jscomp/type/ReverseAbstractInterpreter;Lcom/google/javascript/jscomp/Scope;Ljava/util/Map;)V
      25: astore_3
      26: aload_3
      27: invokevirtual #33                 // Method com/google/javascript/jscomp/TypeInference.analyze:()V
      30: aload_0
      31: getfield      #2                  // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
      34: invokevirtual #34                 // Method com/google/javascript/jscomp/AbstractCompiler.getTypeRegistry:()Lcom/google/javascript/rhino/jstype/JSTypeRegistry;
      37: aload_2
      38: invokevirtual #35                 // Method com/google/javascript/rhino/jstype/JSTypeRegistry.resolveTypesInScope:(Lcom/google/javascript/rhino/jstype/StaticScope;)V
      41: goto          64
      44: astore        4
      46: aload_0
      47: getfield      #2                  // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
      50: aload_1
      51: getstatic     #37                 // Field DATAFLOW_ERROR:Lcom/google/javascript/jscomp/DiagnosticType;
      54: iconst_0
      55: anewarray     #38                 // class java/lang/String
      58: invokestatic  #39                 // Method com/google/javascript/jscomp/JSError.make:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/DiagnosticType;[Ljava/lang/String;)Lcom/google/javascript/jscomp/JSError;
      61: invokevirtual #40                 // Method com/google/javascript/jscomp/AbstractCompiler.report:(Lcom/google/javascript/jscomp/JSError;)V
      64: return
    Exception table:
       from    to  target type
          26    41    44   Class com/google/javascript/jscomp/DataFlowAnalysis$MaxIterationsExceededException

  private com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> computeCfg(com.google.javascript.rhino.Node);
    Code:
       0: new           #41                 // class com/google/javascript/jscomp/ControlFlowAnalysis
       3: dup
       4: aload_0
       5: getfield      #2                  // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
       8: iconst_0
       9: iconst_0
      10: invokespecial #42                 // Method com/google/javascript/jscomp/ControlFlowAnalysis."<init>":(Lcom/google/javascript/jscomp/AbstractCompiler;ZZ)V
      13: astore_2
      14: aload_2
      15: aconst_null
      16: aload_1
      17: invokevirtual #43                 // Method com/google/javascript/jscomp/ControlFlowAnalysis.process:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V
      20: aload_2
      21: invokevirtual #44                 // Method com/google/javascript/jscomp/ControlFlowAnalysis.getCfg:()Lcom/google/javascript/jscomp/ControlFlowGraph;
      24: areturn

  static {};
    Code:
       0: ldc           #45                 // String JSC_INTERNAL_ERROR_DATAFLOW
       2: ldc           #46                 // String non-monotonic data-flow analysis
       4: invokestatic  #47                 // Method com/google/javascript/jscomp/DiagnosticType.warning:(Ljava/lang/String;Ljava/lang/String;)Lcom/google/javascript/jscomp/DiagnosticType;
       7: putstatic     #37                 // Field DATAFLOW_ERROR:Lcom/google/javascript/jscomp/DiagnosticType;
      10: return
}
