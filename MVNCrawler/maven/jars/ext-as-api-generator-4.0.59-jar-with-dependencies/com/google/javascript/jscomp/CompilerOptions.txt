Compiled from "CompilerOptions.java"
public class com.google.javascript.jscomp.CompilerOptions implements java.io.Serializable,java.lang.Cloneable {
  private boolean manageClosureDependencies;

  private static final long serialVersionUID;

  private com.google.javascript.jscomp.CompilerOptions$LanguageMode languageIn;

  private com.google.javascript.jscomp.CompilerOptions$LanguageMode languageOut;

  boolean transpileOnly;

  boolean acceptConstKeyword;

  boolean acceptTypeSyntax;

  boolean inferConsts;

  private boolean assumeStrictThis;

  public boolean ideMode;

  boolean saveDataStructures;

  boolean inferTypes;

  boolean useNewTypeInference;

  boolean skipAllPasses;

  com.google.javascript.jscomp.CompilerOptions$DevMode devMode;

  private boolean checkDeterminism;

  com.google.javascript.jscomp.DependencyOptions dependencyOptions;

  public transient com.google.javascript.jscomp.MessageBundle messageBundle;

  public boolean checkSymbols;

  public com.google.javascript.jscomp.CheckLevel aggressiveVarCheck;

  public boolean checkSuspiciousCode;

  public boolean checkTypes;

  public com.google.javascript.jscomp.CheckLevel reportMissingOverride;

  public com.google.javascript.jscomp.CheckLevel checkRequires;

  public com.google.javascript.jscomp.CheckLevel checkProvides;

  public com.google.javascript.jscomp.CheckLevel checkGlobalNamesLevel;

  public com.google.javascript.jscomp.CheckLevel brokenClosureRequiresLevel;

  public com.google.javascript.jscomp.CheckLevel checkGlobalThisLevel;

  public com.google.javascript.jscomp.CheckLevel checkMissingGetCssNameLevel;

  public java.lang.String checkMissingGetCssNameBlacklist;

  java.util.Set<java.lang.String> extraAnnotationNames;

  com.google.javascript.jscomp.CheckEventfulObjectDisposal$DisposalCheckingPolicy checkEventfulObjectDisposalPolicy;

  boolean aggressiveRenaming;

  boolean aggressiveFusion;

  public boolean foldConstants;

  public boolean deadAssignmentElimination;

  public boolean inlineConstantVars;

  public boolean inlineFunctions;

  int maxFunctionSizeAfterInlining;

  static final int UNLIMITED_FUN_SIZE_AFTER_INLINING;

  public boolean inlineLocalFunctions;

  boolean assumeClosuresOnlyCaptureReferences;

  boolean inlineProperties;

  public boolean crossModuleCodeMotion;

  boolean parentModuleCanSeeSymbolsDeclaredInChildren;

  public boolean coalesceVariableNames;

  public boolean crossModuleMethodMotion;

  public boolean inlineGetters;

  public boolean inlineVariables;

  boolean inlineLocalVariables;

  public boolean flowSensitiveInlineVariables;

  public boolean smartNameRemoval;

  boolean extraSmartNameRemoval;

  public boolean removeDeadCode;

  public com.google.javascript.jscomp.CheckLevel checkMissingReturn;

  com.google.javascript.jscomp.CompilerOptions$ExtractPrototypeMemberDeclarationsMode extractPrototypeMemberDeclarations;

  public boolean removeUnusedPrototypeProperties;

  public boolean removeUnusedPrototypePropertiesInExterns;

  public boolean removeUnusedClassProperties;

  boolean removeUnusedConstructorProperties;

  public boolean removeUnusedVars;

  public boolean removeUnusedLocalVars;

  public boolean aliasExternals;

  java.lang.String aliasableGlobals;

  java.lang.String unaliasableGlobals;

  public boolean collapseVariableDeclarations;

  boolean groupVariableDeclarations;

  public boolean collapseAnonymousFunctions;

  public java.util.Set<java.lang.String> aliasableStrings;

  public java.lang.String aliasStringsBlacklist;

  public boolean aliasAllStrings;

  boolean outputJsStringUsage;

  public boolean convertToDottedProperties;

  public boolean rewriteFunctionExpressions;

  public boolean optimizeParameters;

  public boolean optimizeReturns;

  public boolean optimizeCalls;

  public boolean optimizeArgumentsArray;

  boolean chainCalls;

  public com.google.javascript.jscomp.VariableRenamingPolicy variableRenaming;

  public com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenaming;

  public boolean labelRenaming;

  public boolean reserveRawExports;

  boolean shadowVariables;

  boolean preferStableNames;

  public boolean generatePseudoNames;

  public java.lang.String renamePrefix;

  public java.lang.String renamePrefixNamespace;

  boolean renamePrefixNamespaceAssumeCrossModuleNames;

  public boolean collapseProperties;

  boolean collapseObjectLiterals;

  public boolean devirtualizePrototypeMethods;

  public boolean computeFunctionSideEffects;

  java.lang.String debugFunctionSideEffectsPath;

  boolean disambiguatePrivateProperties;

  public boolean disambiguateProperties;

  public boolean ambiguateProperties;

  com.google.common.collect.ImmutableMap<java.lang.String, com.google.javascript.jscomp.SourceMapInput> inputSourceMaps;

  public com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNaming;

  com.google.javascript.jscomp.VariableMap inputAnonymousFunctionNamingMap;

  com.google.javascript.jscomp.VariableMap inputVariableMap;

  com.google.javascript.jscomp.VariableMap inputPropertyMap;

  public boolean exportTestFunctions;

  boolean declaredGlobalExternsOnWindow;

  boolean replaceMessagesWithChromeI18n;

  java.lang.String tcProjectId;

  boolean runtimeTypeCheck;

  java.lang.String runtimeTypeCheckLogFunction;

  private com.google.javascript.jscomp.CodingConvention codingConvention;

  public java.lang.String syntheticBlockStartMarker;

  public java.lang.String syntheticBlockEndMarker;

  public java.lang.String locale;

  public boolean markAsCompiled;

  public boolean closurePass;

  public boolean preserveGoogRequires;

  public boolean jqueryPass;

  boolean angularPass;

  boolean removeAbstractMethods;

  boolean removeClosureAsserts;

  public boolean gatherCssNames;

  public java.util.Set<java.lang.String> stripTypes;

  public java.util.Set<java.lang.String> stripNameSuffixes;

  public java.util.Set<java.lang.String> stripNamePrefixes;

  public java.util.Set<java.lang.String> stripTypePrefixes;

  public transient com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPasses;

  public boolean markNoSideEffectCalls;

  private java.util.Map<java.lang.String, java.lang.Object> defineReplacements;

  private com.google.javascript.jscomp.CompilerOptions$TweakProcessing tweakProcessing;

  private java.util.Map<java.lang.String, java.lang.Object> tweakReplacements;

  public boolean moveFunctionDeclarations;

  public java.lang.String instrumentationTemplate;

  java.lang.String appNameStr;

  public boolean recordFunctionInformation;

  public boolean generateExports;

  boolean exportLocalPropertyDefinitions;

  public com.google.javascript.jscomp.CssRenamingMap cssRenamingMap;

  java.util.Set<java.lang.String> cssRenamingWhitelist;

  boolean processObjectPropertyString;

  boolean replaceIdGenerators;

  com.google.common.collect.ImmutableMap<java.lang.String, com.google.javascript.jscomp.RenamingMap> idGenerators;

  java.lang.String idGeneratorsMapSerialized;

  java.util.List<java.lang.String> replaceStringsFunctionDescriptions;

  java.lang.String replaceStringsPlaceholderToken;

  java.util.Set<java.lang.String> replaceStringsReservedStrings;

  com.google.javascript.jscomp.VariableMap replaceStringsInputMap;

  java.util.Map<java.lang.String, com.google.javascript.jscomp.CheckLevel> propertyInvalidationErrors;

  boolean transformAMDToCJSModules;

  boolean processCommonJSModules;

  boolean rewriteEs6Modules;

  java.lang.String commonJSModulePathPrefix;

  public boolean preserveTypeAnnotations;

  public boolean prettyPrint;

  public boolean lineBreak;

  public boolean preferLineBreakAtEndOfFile;

  public boolean printInputDelimiter;

  public java.lang.String inputDelimiter;

  boolean preferSingleQuotes;

  boolean trustedStrings;

  java.lang.String reportPath;

  com.google.javascript.jscomp.CompilerOptions$TracerMode tracer;

  private boolean colorizeErrorOutput;

  public com.google.javascript.jscomp.ErrorFormat errorFormat;

  private com.google.javascript.jscomp.ComposeWarningsGuard warningsGuard;

  int summaryDetailLevel;

  int lineLengthThreshold;

  private boolean externExports;

  java.lang.String externExportsPath;

  java.lang.String nameReferenceReportPath;

  java.lang.String nameReferenceGraphPath;

  public java.lang.String sourceMapOutputPath;

  public com.google.javascript.jscomp.SourceMap$DetailLevel sourceMapDetailLevel;

  public com.google.javascript.jscomp.SourceMap$Format sourceMapFormat;

  public java.util.List<com.google.javascript.jscomp.SourceMap$LocationMapping> sourceMapLocationMappings;

  boolean useDebugLog;

  java.lang.String outputCharset;

  boolean enforceAccessControlCodingConventions;

  boolean protectHiddenSideEffects;

  private transient com.google.javascript.jscomp.CompilerOptions$AliasTransformationHandler aliasHandler;

  transient com.google.javascript.jscomp.ErrorHandler errorHandler;

  public boolean instrumentForCoverage;

  private com.google.common.collect.ImmutableList<com.google.javascript.jscomp.ConformanceConfig> conformanceConfigs;

  public static final com.google.javascript.jscomp.RenamingMap UNIQUE_ID_GENERATOR;

  static final com.google.javascript.jscomp.CompilerOptions$AliasTransformationHandler NULL_ALIAS_TRANSFORMATION_HANDLER;

  public void setTranspileOnly(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #1                  // Field transpileOnly:Z
       5: return

  public void setInferConst(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field inferConsts:Z
       5: return

  public void setAggressiveVarCheck(com.google.javascript.jscomp.CheckLevel);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #3                  // Field aggressiveVarCheck:Lcom/google/javascript/jscomp/CheckLevel;
       5: return

  public void setReportMissingOverride(com.google.javascript.jscomp.CheckLevel);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field reportMissingOverride:Lcom/google/javascript/jscomp/CheckLevel;
       5: return

  public void setCheckRequires(com.google.javascript.jscomp.CheckLevel);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field checkRequires:Lcom/google/javascript/jscomp/CheckLevel;
       5: return

  public void setCheckProvides(com.google.javascript.jscomp.CheckLevel);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field checkProvides:Lcom/google/javascript/jscomp/CheckLevel;
       5: return

  public void setCheckGlobalNamesLevel(com.google.javascript.jscomp.CheckLevel);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #7                  // Field checkGlobalNamesLevel:Lcom/google/javascript/jscomp/CheckLevel;
       5: return

  public void setBrokenClosureRequiresLevel(com.google.javascript.jscomp.CheckLevel);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #8                  // Field brokenClosureRequiresLevel:Lcom/google/javascript/jscomp/CheckLevel;
       5: return

  public void setCheckGlobalThisLevel(com.google.javascript.jscomp.CheckLevel);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #9                  // Field checkGlobalThisLevel:Lcom/google/javascript/jscomp/CheckLevel;
       5: return

  public void setCheckMissingGetCssNameLevel(com.google.javascript.jscomp.CheckLevel);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #10                 // Field checkMissingGetCssNameLevel:Lcom/google/javascript/jscomp/CheckLevel;
       5: return

  public void setCheckEventfulObjectDisposalPolicy(com.google.javascript.jscomp.CheckEventfulObjectDisposal$DisposalCheckingPolicy);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #11                 // Field checkEventfulObjectDisposalPolicy:Lcom/google/javascript/jscomp/CheckEventfulObjectDisposal$DisposalCheckingPolicy;
       5: aload_1
       6: getstatic     #12                 // Field com/google/javascript/jscomp/CheckEventfulObjectDisposal$DisposalCheckingPolicy.OFF:Lcom/google/javascript/jscomp/CheckEventfulObjectDisposal$DisposalCheckingPolicy;
       9: if_acmpeq     17
      12: aload_0
      13: iconst_1
      14: putfield      #13                 // Field inferTypes:Z
      17: return

  public com.google.javascript.jscomp.CheckEventfulObjectDisposal$DisposalCheckingPolicy getCheckEventfulObjectDisposalPolicy();
    Code:
       0: aload_0
       1: getfield      #11                 // Field checkEventfulObjectDisposalPolicy:Lcom/google/javascript/jscomp/CheckEventfulObjectDisposal$DisposalCheckingPolicy;
       4: areturn

  public void setCheckMissingReturn(com.google.javascript.jscomp.CheckLevel);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #14                 // Field checkMissingReturn:Lcom/google/javascript/jscomp/CheckLevel;
       5: return

  public void setAliasableGlobals(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #15                 // Field aliasableGlobals:Ljava/lang/String;
       5: return

  public void setUnaliasableGlobals(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #16                 // Field unaliasableGlobals:Ljava/lang/String;
       5: return

  void setRenamePrefixNamespaceAssumeCrossModuleNames(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #17                 // Field renamePrefixNamespaceAssumeCrossModuleNames:Z
       5: return

  public void setCollapseObjectLiterals(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #18                 // Field collapseObjectLiterals:Z
       5: return

  public void setReplaceMessagesWithChromeI18n(boolean, java.lang.String);
    Code:
       0: iload_1
       1: ifeq          31
       4: aload_0
       5: getfield      #19                 // Field messageBundle:Lcom/google/javascript/jscomp/MessageBundle;
       8: ifnull        31
      11: aload_0
      12: getfield      #19                 // Field messageBundle:Lcom/google/javascript/jscomp/MessageBundle;
      15: instanceof    #20                 // class com/google/javascript/jscomp/EmptyMessageBundle
      18: ifne          31
      21: new           #21                 // class java/lang/RuntimeException
      24: dup
      25: ldc           #22                 // String When replacing messages with chrome.i18n.getMessage, a message bundle should not be specified.
      27: invokespecial #23                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;)V
      30: athrow
      31: aload_0
      32: iload_1
      33: putfield      #24                 // Field replaceMessagesWithChromeI18n:Z
      36: aload_0
      37: aload_2
      38: putfield      #25                 // Field tcProjectId:Ljava/lang/String;
      41: return

  public void setAppNameStr(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #26                 // Field appNameStr:Ljava/lang/String;
       5: return

  public void setPreferSingleQuotes(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #27                 // Field preferSingleQuotes:Z
       5: return

  public void setTrustedStrings(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #28                 // Field trustedStrings:Z
       5: return

  public void setReportPath(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #29                 // Field reportPath:Ljava/lang/String;
       5: return

  public com.google.javascript.jscomp.CompilerOptions$TracerMode getTracerMode();
    Code:
       0: aload_0
       1: getfield      #30                 // Field tracer:Lcom/google/javascript/jscomp/CompilerOptions$TracerMode;
       4: areturn

  public void setTracerMode(com.google.javascript.jscomp.CompilerOptions$TracerMode);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #30                 // Field tracer:Lcom/google/javascript/jscomp/CompilerOptions$TracerMode;
       5: return

  public void setNameReferenceReportPath(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #31                 // Field nameReferenceReportPath:Ljava/lang/String;
       5: return

  public void setNameReferenceGraphPath(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #32                 // Field nameReferenceGraphPath:Ljava/lang/String;
       5: return

  public void setProtectHiddenSideEffects(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #33                 // Field protectHiddenSideEffects:Z
       5: return

  public com.google.javascript.jscomp.CompilerOptions();
    Code:
       0: aload_0
       1: invokespecial #34                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #35                 // Field manageClosureDependencies:Z
       9: aload_0
      10: iconst_1
      11: putfield      #2                  // Field inferConsts:Z
      14: aload_0
      15: iconst_0
      16: putfield      #36                 // Field saveDataStructures:Z
      19: aload_0
      20: new           #37                 // class com/google/javascript/jscomp/DependencyOptions
      23: dup
      24: invokespecial #38                 // Method com/google/javascript/jscomp/DependencyOptions."<init>":()V
      27: putfield      #39                 // Field dependencyOptions:Lcom/google/javascript/jscomp/DependencyOptions;
      30: aload_0
      31: aconst_null
      32: putfield      #19                 // Field messageBundle:Lcom/google/javascript/jscomp/MessageBundle;
      35: aload_0
      36: iconst_0
      37: putfield      #17                 // Field renamePrefixNamespaceAssumeCrossModuleNames:Z
      40: aload_0
      41: iconst_1
      42: putfield      #40                 // Field replaceIdGenerators:Z
      45: aload_0
      46: iconst_0
      47: putfield      #41                 // Field transformAMDToCJSModules:Z
      50: aload_0
      51: iconst_0
      52: putfield      #42                 // Field processCommonJSModules:Z
      55: aload_0
      56: iconst_0
      57: putfield      #43                 // Field rewriteEs6Modules:Z
      60: aload_0
      61: ldc           #45                 // String ./
      63: putfield      #46                 // Field commonJSModulePathPrefix:Ljava/lang/String;
      66: aload_0
      67: ldc           #47                 // String // Input %num%
      69: putfield      #48                 // Field inputDelimiter:Ljava/lang/String;
      72: aload_0
      73: new           #49                 // class com/google/javascript/jscomp/ComposeWarningsGuard
      76: dup
      77: iconst_0
      78: anewarray     #50                 // class com/google/javascript/jscomp/WarningsGuard
      81: invokespecial #51                 // Method com/google/javascript/jscomp/ComposeWarningsGuard."<init>":([Lcom/google/javascript/jscomp/WarningsGuard;)V
      84: putfield      #52                 // Field warningsGuard:Lcom/google/javascript/jscomp/ComposeWarningsGuard;
      87: aload_0
      88: iconst_1
      89: putfield      #53                 // Field summaryDetailLevel:I
      92: aload_0
      93: sipush        500
      96: putfield      #55                 // Field lineLengthThreshold:I
      99: aload_0
     100: getstatic     #56                 // Field com/google/javascript/jscomp/SourceMap$DetailLevel.ALL:Lcom/google/javascript/jscomp/SourceMap$DetailLevel;
     103: putfield      #57                 // Field sourceMapDetailLevel:Lcom/google/javascript/jscomp/SourceMap$DetailLevel;
     106: aload_0
     107: getstatic     #58                 // Field com/google/javascript/jscomp/SourceMap$Format.DEFAULT:Lcom/google/javascript/jscomp/SourceMap$Format;
     110: putfield      #59                 // Field sourceMapFormat:Lcom/google/javascript/jscomp/SourceMap$Format;
     113: aload_0
     114: invokestatic  #60                 // Method java/util/Collections.emptyList:()Ljava/util/List;
     117: putfield      #61                 // Field sourceMapLocationMappings:Ljava/util/List;
     120: aload_0
     121: invokestatic  #62                 // Method com/google/common/collect/ImmutableList.of:()Lcom/google/common/collect/ImmutableList;
     124: putfield      #63                 // Field conformanceConfigs:Lcom/google/common/collect/ImmutableList;
     127: aload_0
     128: getstatic     #64                 // Field com/google/javascript/jscomp/CompilerOptions$LanguageMode.ECMASCRIPT3:Lcom/google/javascript/jscomp/CompilerOptions$LanguageMode;
     131: putfield      #65                 // Field languageIn:Lcom/google/javascript/jscomp/CompilerOptions$LanguageMode;
     134: aload_0
     135: getstatic     #66                 // Field com/google/javascript/jscomp/CompilerOptions$LanguageMode.NO_TRANSPILE:Lcom/google/javascript/jscomp/CompilerOptions$LanguageMode;
     138: putfield      #67                 // Field languageOut:Lcom/google/javascript/jscomp/CompilerOptions$LanguageMode;
     141: aload_0
     142: iconst_0
     143: putfield      #68                 // Field acceptConstKeyword:Z
     146: aload_0
     147: iconst_0
     148: putfield      #69                 // Field acceptTypeSyntax:Z
     151: aload_0
     152: iconst_0
     153: putfield      #1                  // Field transpileOnly:Z
     156: aload_0
     157: iconst_0
     158: putfield      #70                 // Field skipAllPasses:Z
     161: aload_0
     162: getstatic     #71                 // Field com/google/javascript/jscomp/CompilerOptions$DevMode.OFF:Lcom/google/javascript/jscomp/CompilerOptions$DevMode;
     165: putfield      #72                 // Field devMode:Lcom/google/javascript/jscomp/CompilerOptions$DevMode;
     168: aload_0
     169: iconst_0
     170: putfield      #73                 // Field checkDeterminism:Z
     173: aload_0
     174: iconst_0
     175: putfield      #74                 // Field checkSymbols:Z
     178: aload_0
     179: getstatic     #75                 // Field com/google/javascript/jscomp/CheckLevel.OFF:Lcom/google/javascript/jscomp/CheckLevel;
     182: putfield      #3                  // Field aggressiveVarCheck:Lcom/google/javascript/jscomp/CheckLevel;
     185: aload_0
     186: iconst_0
     187: putfield      #76                 // Field checkSuspiciousCode:Z
     190: aload_0
     191: iconst_0
     192: putfield      #77                 // Field checkTypes:Z
     195: aload_0
     196: getstatic     #75                 // Field com/google/javascript/jscomp/CheckLevel.OFF:Lcom/google/javascript/jscomp/CheckLevel;
     199: putfield      #4                  // Field reportMissingOverride:Lcom/google/javascript/jscomp/CheckLevel;
     202: aload_0
     203: getstatic     #75                 // Field com/google/javascript/jscomp/CheckLevel.OFF:Lcom/google/javascript/jscomp/CheckLevel;
     206: putfield      #5                  // Field checkRequires:Lcom/google/javascript/jscomp/CheckLevel;
     209: aload_0
     210: getstatic     #75                 // Field com/google/javascript/jscomp/CheckLevel.OFF:Lcom/google/javascript/jscomp/CheckLevel;
     213: putfield      #6                  // Field checkProvides:Lcom/google/javascript/jscomp/CheckLevel;
     216: aload_0
     217: getstatic     #75                 // Field com/google/javascript/jscomp/CheckLevel.OFF:Lcom/google/javascript/jscomp/CheckLevel;
     220: putfield      #7                  // Field checkGlobalNamesLevel:Lcom/google/javascript/jscomp/CheckLevel;
     223: aload_0
     224: getstatic     #78                 // Field com/google/javascript/jscomp/CheckLevel.ERROR:Lcom/google/javascript/jscomp/CheckLevel;
     227: putfield      #8                  // Field brokenClosureRequiresLevel:Lcom/google/javascript/jscomp/CheckLevel;
     230: aload_0
     231: getstatic     #75                 // Field com/google/javascript/jscomp/CheckLevel.OFF:Lcom/google/javascript/jscomp/CheckLevel;
     234: putfield      #9                  // Field checkGlobalThisLevel:Lcom/google/javascript/jscomp/CheckLevel;
     237: aload_0
     238: getstatic     #75                 // Field com/google/javascript/jscomp/CheckLevel.OFF:Lcom/google/javascript/jscomp/CheckLevel;
     241: putfield      #14                 // Field checkMissingReturn:Lcom/google/javascript/jscomp/CheckLevel;
     244: aload_0
     245: getstatic     #75                 // Field com/google/javascript/jscomp/CheckLevel.OFF:Lcom/google/javascript/jscomp/CheckLevel;
     248: putfield      #10                 // Field checkMissingGetCssNameLevel:Lcom/google/javascript/jscomp/CheckLevel;
     251: aload_0
     252: aconst_null
     253: putfield      #79                 // Field checkMissingGetCssNameBlacklist:Ljava/lang/String;
     256: aload_0
     257: iconst_0
     258: putfield      #80                 // Field computeFunctionSideEffects:Z
     261: aload_0
     262: iconst_0
     263: putfield      #81                 // Field chainCalls:Z
     266: aload_0
     267: aconst_null
     268: putfield      #82                 // Field extraAnnotationNames:Ljava/util/Set;
     271: aload_0
     272: getstatic     #12                 // Field com/google/javascript/jscomp/CheckEventfulObjectDisposal$DisposalCheckingPolicy.OFF:Lcom/google/javascript/jscomp/CheckEventfulObjectDisposal$DisposalCheckingPolicy;
     275: putfield      #11                 // Field checkEventfulObjectDisposalPolicy:Lcom/google/javascript/jscomp/CheckEventfulObjectDisposal$DisposalCheckingPolicy;
     278: aload_0
     279: iconst_0
     280: putfield      #83                 // Field aggressiveRenaming:Z
     283: aload_0
     284: iconst_0
     285: putfield      #84                 // Field foldConstants:Z
     288: aload_0
     289: iconst_0
     290: putfield      #85                 // Field coalesceVariableNames:Z
     293: aload_0
     294: iconst_0
     295: putfield      #86                 // Field deadAssignmentElimination:Z
     298: aload_0
     299: iconst_0
     300: putfield      #87                 // Field inlineConstantVars:Z
     303: aload_0
     304: iconst_0
     305: putfield      #88                 // Field inlineFunctions:Z
     308: aload_0
     309: iconst_m1
     310: putfield      #90                 // Field maxFunctionSizeAfterInlining:I
     313: aload_0
     314: iconst_0
     315: putfield      #91                 // Field inlineLocalFunctions:Z
     318: aload_0
     319: iconst_0
     320: putfield      #92                 // Field assumeStrictThis:Z
     323: aload_0
     324: iconst_0
     325: putfield      #93                 // Field assumeClosuresOnlyCaptureReferences:Z
     328: aload_0
     329: iconst_0
     330: putfield      #94                 // Field inlineProperties:Z
     333: aload_0
     334: iconst_0
     335: putfield      #95                 // Field crossModuleCodeMotion:Z
     338: aload_0
     339: iconst_0
     340: putfield      #96                 // Field parentModuleCanSeeSymbolsDeclaredInChildren:Z
     343: aload_0
     344: iconst_0
     345: putfield      #97                 // Field crossModuleMethodMotion:Z
     348: aload_0
     349: iconst_0
     350: putfield      #98                 // Field inlineGetters:Z
     353: aload_0
     354: iconst_0
     355: putfield      #99                 // Field inlineVariables:Z
     358: aload_0
     359: iconst_0
     360: putfield      #100                // Field inlineLocalVariables:Z
     363: aload_0
     364: iconst_0
     365: putfield      #101                // Field smartNameRemoval:Z
     368: aload_0
     369: iconst_0
     370: putfield      #102                // Field extraSmartNameRemoval:Z
     373: aload_0
     374: iconst_0
     375: putfield      #103                // Field removeDeadCode:Z
     378: aload_0
     379: getstatic     #104                // Field com/google/javascript/jscomp/CompilerOptions$ExtractPrototypeMemberDeclarationsMode.OFF:Lcom/google/javascript/jscomp/CompilerOptions$ExtractPrototypeMemberDeclarationsMode;
     382: putfield      #105                // Field extractPrototypeMemberDeclarations:Lcom/google/javascript/jscomp/CompilerOptions$ExtractPrototypeMemberDeclarationsMode;
     385: aload_0
     386: iconst_0
     387: putfield      #106                // Field removeUnusedPrototypeProperties:Z
     390: aload_0
     391: iconst_0
     392: putfield      #107                // Field removeUnusedPrototypePropertiesInExterns:Z
     395: aload_0
     396: iconst_0
     397: putfield      #108                // Field removeUnusedClassProperties:Z
     400: aload_0
     401: iconst_0
     402: putfield      #109                // Field removeUnusedConstructorProperties:Z
     405: aload_0
     406: iconst_0
     407: putfield      #110                // Field removeUnusedVars:Z
     410: aload_0
     411: iconst_0
     412: putfield      #111                // Field removeUnusedLocalVars:Z
     415: aload_0
     416: iconst_0
     417: putfield      #112                // Field aliasExternals:Z
     420: aload_0
     421: iconst_0
     422: putfield      #113                // Field collapseVariableDeclarations:Z
     425: aload_0
     426: iconst_0
     427: putfield      #114                // Field groupVariableDeclarations:Z
     430: aload_0
     431: iconst_0
     432: putfield      #115                // Field collapseAnonymousFunctions:Z
     435: aload_0
     436: invokestatic  #116                // Method java/util/Collections.emptySet:()Ljava/util/Set;
     439: putfield      #117                // Field aliasableStrings:Ljava/util/Set;
     442: aload_0
     443: ldc           #118                // String
     445: putfield      #119                // Field aliasStringsBlacklist:Ljava/lang/String;
     448: aload_0
     449: iconst_0
     450: putfield      #120                // Field aliasAllStrings:Z
     453: aload_0
     454: iconst_0
     455: putfield      #121                // Field outputJsStringUsage:Z
     458: aload_0
     459: iconst_0
     460: putfield      #122                // Field convertToDottedProperties:Z
     463: aload_0
     464: iconst_0
     465: putfield      #123                // Field rewriteFunctionExpressions:Z
     468: aload_0
     469: iconst_0
     470: putfield      #124                // Field optimizeParameters:Z
     473: aload_0
     474: iconst_0
     475: putfield      #125                // Field optimizeReturns:Z
     478: aload_0
     479: getstatic     #126                // Field com/google/javascript/jscomp/VariableRenamingPolicy.OFF:Lcom/google/javascript/jscomp/VariableRenamingPolicy;
     482: putfield      #127                // Field variableRenaming:Lcom/google/javascript/jscomp/VariableRenamingPolicy;
     485: aload_0
     486: getstatic     #128                // Field com/google/javascript/jscomp/PropertyRenamingPolicy.OFF:Lcom/google/javascript/jscomp/PropertyRenamingPolicy;
     489: putfield      #129                // Field propertyRenaming:Lcom/google/javascript/jscomp/PropertyRenamingPolicy;
     492: aload_0
     493: iconst_0
     494: putfield      #130                // Field labelRenaming:Z
     497: aload_0
     498: iconst_0
     499: putfield      #131                // Field generatePseudoNames:Z
     502: aload_0
     503: iconst_0
     504: putfield      #132                // Field shadowVariables:Z
     507: aload_0
     508: iconst_0
     509: putfield      #133                // Field preferStableNames:Z
     512: aload_0
     513: aconst_null
     514: putfield      #134                // Field renamePrefix:Ljava/lang/String;
     517: aload_0
     518: iconst_0
     519: putfield      #135                // Field collapseProperties:Z
     522: aload_0
     523: iconst_0
     524: putfield      #18                 // Field collapseObjectLiterals:Z
     527: aload_0
     528: iconst_0
     529: putfield      #136                // Field devirtualizePrototypeMethods:Z
     532: aload_0
     533: iconst_0
     534: putfield      #137                // Field disambiguateProperties:Z
     537: aload_0
     538: iconst_0
     539: putfield      #138                // Field ambiguateProperties:Z
     542: aload_0
     543: getstatic     #139                // Field com/google/javascript/jscomp/AnonymousFunctionNamingPolicy.OFF:Lcom/google/javascript/jscomp/AnonymousFunctionNamingPolicy;
     546: putfield      #140                // Field anonymousFunctionNaming:Lcom/google/javascript/jscomp/AnonymousFunctionNamingPolicy;
     549: aload_0
     550: iconst_0
     551: putfield      #141                // Field exportTestFunctions:Z
     554: aload_0
     555: iconst_1
     556: putfield      #142                // Field declaredGlobalExternsOnWindow:Z
     559: aload_0
     560: iconst_0
     561: putfield      #143                // Field runtimeTypeCheck:Z
     564: aload_0
     565: aconst_null
     566: putfield      #144                // Field runtimeTypeCheckLogFunction:Ljava/lang/String;
     569: aload_0
     570: aconst_null
     571: putfield      #145                // Field syntheticBlockStartMarker:Ljava/lang/String;
     574: aload_0
     575: aconst_null
     576: putfield      #146                // Field syntheticBlockEndMarker:Ljava/lang/String;
     579: aload_0
     580: aconst_null
     581: putfield      #147                // Field locale:Ljava/lang/String;
     584: aload_0
     585: iconst_0
     586: putfield      #148                // Field markAsCompiled:Z
     589: aload_0
     590: iconst_0
     591: putfield      #149                // Field closurePass:Z
     594: aload_0
     595: iconst_0
     596: putfield      #150                // Field preserveGoogRequires:Z
     599: aload_0
     600: iconst_0
     601: putfield      #151                // Field jqueryPass:Z
     604: aload_0
     605: iconst_0
     606: putfield      #152                // Field angularPass:Z
     609: aload_0
     610: iconst_1
     611: putfield      #153                // Field removeAbstractMethods:Z
     614: aload_0
     615: iconst_0
     616: putfield      #154                // Field removeClosureAsserts:Z
     619: aload_0
     620: invokestatic  #116                // Method java/util/Collections.emptySet:()Ljava/util/Set;
     623: putfield      #155                // Field stripTypes:Ljava/util/Set;
     626: aload_0
     627: invokestatic  #116                // Method java/util/Collections.emptySet:()Ljava/util/Set;
     630: putfield      #156                // Field stripNameSuffixes:Ljava/util/Set;
     633: aload_0
     634: invokestatic  #116                // Method java/util/Collections.emptySet:()Ljava/util/Set;
     637: putfield      #157                // Field stripNamePrefixes:Ljava/util/Set;
     640: aload_0
     641: invokestatic  #116                // Method java/util/Collections.emptySet:()Ljava/util/Set;
     644: putfield      #158                // Field stripTypePrefixes:Ljava/util/Set;
     647: aload_0
     648: aconst_null
     649: putfield      #159                // Field customPasses:Lcom/google/common/collect/Multimap;
     652: aload_0
     653: iconst_0
     654: putfield      #160                // Field markNoSideEffectCalls:Z
     657: aload_0
     658: invokestatic  #161                // Method com/google/common/collect/Maps.newHashMap:()Ljava/util/HashMap;
     661: putfield      #162                // Field defineReplacements:Ljava/util/Map;
     664: aload_0
     665: getstatic     #163                // Field com/google/javascript/jscomp/CompilerOptions$TweakProcessing.OFF:Lcom/google/javascript/jscomp/CompilerOptions$TweakProcessing;
     668: putfield      #164                // Field tweakProcessing:Lcom/google/javascript/jscomp/CompilerOptions$TweakProcessing;
     671: aload_0
     672: invokestatic  #161                // Method com/google/common/collect/Maps.newHashMap:()Ljava/util/HashMap;
     675: putfield      #165                // Field tweakReplacements:Ljava/util/Map;
     678: aload_0
     679: iconst_0
     680: putfield      #166                // Field moveFunctionDeclarations:Z
     683: aload_0
     684: ldc           #118                // String
     686: putfield      #26                 // Field appNameStr:Ljava/lang/String;
     689: aload_0
     690: iconst_0
     691: putfield      #167                // Field recordFunctionInformation:Z
     694: aload_0
     695: iconst_0
     696: putfield      #168                // Field generateExports:Z
     699: aload_0
     700: iconst_0
     701: putfield      #169                // Field exportLocalPropertyDefinitions:Z
     704: aload_0
     705: aconst_null
     706: putfield      #170                // Field cssRenamingMap:Lcom/google/javascript/jscomp/CssRenamingMap;
     709: aload_0
     710: aconst_null
     711: putfield      #171                // Field cssRenamingWhitelist:Ljava/util/Set;
     714: aload_0
     715: iconst_0
     716: putfield      #172                // Field processObjectPropertyString:Z
     719: aload_0
     720: invokestatic  #173                // Method com/google/common/collect/ImmutableMap.of:()Lcom/google/common/collect/ImmutableMap;
     723: putfield      #174                // Field idGenerators:Lcom/google/common/collect/ImmutableMap;
     726: aload_0
     727: invokestatic  #60                 // Method java/util/Collections.emptyList:()Ljava/util/List;
     730: putfield      #175                // Field replaceStringsFunctionDescriptions:Ljava/util/List;
     733: aload_0
     734: ldc           #118                // String
     736: putfield      #176                // Field replaceStringsPlaceholderToken:Ljava/lang/String;
     739: aload_0
     740: invokestatic  #116                // Method java/util/Collections.emptySet:()Ljava/util/Set;
     743: putfield      #177                // Field replaceStringsReservedStrings:Ljava/util/Set;
     746: aload_0
     747: invokestatic  #161                // Method com/google/common/collect/Maps.newHashMap:()Ljava/util/HashMap;
     750: putfield      #178                // Field propertyInvalidationErrors:Ljava/util/Map;
     753: aload_0
     754: invokestatic  #173                // Method com/google/common/collect/ImmutableMap.of:()Lcom/google/common/collect/ImmutableMap;
     757: putfield      #179                // Field inputSourceMaps:Lcom/google/common/collect/ImmutableMap;
     760: aload_0
     761: aconst_null
     762: putfield      #180                // Field instrumentationTemplate:Ljava/lang/String;
     765: aload_0
     766: iconst_0
     767: putfield      #181                // Field instrumentForCoverage:Z
     770: aload_0
     771: iconst_0
     772: putfield      #182                // Field preserveTypeAnnotations:Z
     775: aload_0
     776: iconst_0
     777: putfield      #183                // Field printInputDelimiter:Z
     780: aload_0
     781: iconst_0
     782: putfield      #184                // Field prettyPrint:Z
     785: aload_0
     786: iconst_0
     787: putfield      #185                // Field lineBreak:Z
     790: aload_0
     791: iconst_0
     792: putfield      #186                // Field preferLineBreakAtEndOfFile:Z
     795: aload_0
     796: aconst_null
     797: putfield      #29                 // Field reportPath:Ljava/lang/String;
     800: aload_0
     801: getstatic     #187                // Field com/google/javascript/jscomp/CompilerOptions$TracerMode.OFF:Lcom/google/javascript/jscomp/CompilerOptions$TracerMode;
     804: putfield      #30                 // Field tracer:Lcom/google/javascript/jscomp/CompilerOptions$TracerMode;
     807: aload_0
     808: iconst_0
     809: putfield      #188                // Field colorizeErrorOutput:Z
     812: aload_0
     813: getstatic     #189                // Field com/google/javascript/jscomp/ErrorFormat.SINGLELINE:Lcom/google/javascript/jscomp/ErrorFormat;
     816: putfield      #190                // Field errorFormat:Lcom/google/javascript/jscomp/ErrorFormat;
     819: aload_0
     820: aconst_null
     821: putfield      #191                // Field debugFunctionSideEffectsPath:Ljava/lang/String;
     824: aload_0
     825: iconst_0
     826: putfield      #192                // Field externExports:Z
     829: aload_0
     830: aconst_null
     831: putfield      #31                 // Field nameReferenceReportPath:Ljava/lang/String;
     834: aload_0
     835: aconst_null
     836: putfield      #32                 // Field nameReferenceGraphPath:Ljava/lang/String;
     839: aload_0
     840: getstatic     #193                // Field NULL_ALIAS_TRANSFORMATION_HANDLER:Lcom/google/javascript/jscomp/CompilerOptions$AliasTransformationHandler;
     843: putfield      #194                // Field aliasHandler:Lcom/google/javascript/jscomp/CompilerOptions$AliasTransformationHandler;
     846: aload_0
     847: aconst_null
     848: putfield      #195                // Field errorHandler:Lcom/google/javascript/jscomp/ErrorHandler;
     851: aload_0
     852: iconst_0
     853: putfield      #196                // Field useDebugLog:Z
     856: return

  public boolean isRemoveUnusedClassProperties();
    Code:
       0: aload_0
       1: getfield      #108                // Field removeUnusedClassProperties:Z
       4: ireturn

  public void setRemoveUnusedClassProperties(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #108                // Field removeUnusedClassProperties:Z
       5: return

  public boolean isRemoveUnusedConstructorProperties();
    Code:
       0: aload_0
       1: getfield      #109                // Field removeUnusedConstructorProperties:Z
       4: ireturn

  public void setRemoveUnusedConstructorProperties(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #109                // Field removeUnusedConstructorProperties:Z
       5: return

  public java.util.Map<java.lang.String, com.google.javascript.rhino.Node> getDefineReplacements();
    Code:
       0: aload_0
       1: getfield      #162                // Field defineReplacements:Ljava/util/Map;
       4: invokestatic  #197                // Method getReplacementsHelper:(Ljava/util/Map;)Ljava/util/Map;
       7: areturn

  public java.util.Map<java.lang.String, com.google.javascript.rhino.Node> getTweakReplacements();
    Code:
       0: aload_0
       1: getfield      #165                // Field tweakReplacements:Ljava/util/Map;
       4: invokestatic  #197                // Method getReplacementsHelper:(Ljava/util/Map;)Ljava/util/Map;
       7: areturn

  private static java.util.Map<java.lang.String, com.google.javascript.rhino.Node> getReplacementsHelper(java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: invokestatic  #161                // Method com/google/common/collect/Maps.newHashMap:()Ljava/util/HashMap;
       3: astore_1
       4: aload_0
       5: invokeinterface #198,  1          // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      10: invokeinterface #199,  1          // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      15: astore_2
      16: aload_2
      17: invokeinterface #200,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      22: ifeq          176
      25: aload_2
      26: invokeinterface #201,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      31: checkcast     #202                // class java/util/Map$Entry
      34: astore_3
      35: aload_3
      36: invokeinterface #203,  1          // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      41: checkcast     #204                // class java/lang/String
      44: astore        4
      46: aload_3
      47: invokeinterface #205,  1          // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      52: astore        5
      54: aload         5
      56: instanceof    #206                // class java/lang/Boolean
      59: ifeq          85
      62: aload_1
      63: aload         4
      65: aload         5
      67: checkcast     #206                // class java/lang/Boolean
      70: invokevirtual #207                // Method java/lang/Boolean.booleanValue:()Z
      73: invokestatic  #208                // Method com/google/javascript/jscomp/NodeUtil.booleanNode:(Z)Lcom/google/javascript/rhino/Node;
      76: invokeinterface #209,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      81: pop
      82: goto          173
      85: aload         5
      87: instanceof    #210                // class java/lang/Integer
      90: ifeq          117
      93: aload_1
      94: aload         4
      96: aload         5
      98: checkcast     #210                // class java/lang/Integer
     101: invokevirtual #211                // Method java/lang/Integer.intValue:()I
     104: i2d
     105: invokestatic  #212                // Method com/google/javascript/rhino/IR.number:(D)Lcom/google/javascript/rhino/Node;
     108: invokeinterface #209,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     113: pop
     114: goto          173
     117: aload         5
     119: instanceof    #213                // class java/lang/Double
     122: ifeq          148
     125: aload_1
     126: aload         4
     128: aload         5
     130: checkcast     #213                // class java/lang/Double
     133: invokevirtual #214                // Method java/lang/Double.doubleValue:()D
     136: invokestatic  #212                // Method com/google/javascript/rhino/IR.number:(D)Lcom/google/javascript/rhino/Node;
     139: invokeinterface #209,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     144: pop
     145: goto          173
     148: aload         5
     150: instanceof    #204                // class java/lang/String
     153: invokestatic  #215                // Method com/google/common/base/Preconditions.checkState:(Z)V
     156: aload_1
     157: aload         4
     159: aload         5
     161: checkcast     #204                // class java/lang/String
     164: invokestatic  #216                // Method com/google/javascript/rhino/IR.string:(Ljava/lang/String;)Lcom/google/javascript/rhino/Node;
     167: invokeinterface #209,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     172: pop
     173: goto          16
     176: aload_1
     177: areturn

  public void setDefineToBooleanLiteral(java.lang.String, boolean);
    Code:
       0: aload_0
       1: getfield      #162                // Field defineReplacements:Ljava/util/Map;
       4: aload_1
       5: new           #206                // class java/lang/Boolean
       8: dup
       9: iload_2
      10: invokespecial #217                // Method java/lang/Boolean."<init>":(Z)V
      13: invokeinterface #209,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      18: pop
      19: return

  public void setDefineToStringLiteral(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #162                // Field defineReplacements:Ljava/util/Map;
       4: aload_1
       5: aload_2
       6: invokeinterface #209,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      11: pop
      12: return

  public void setDefineToNumberLiteral(java.lang.String, int);
    Code:
       0: aload_0
       1: getfield      #162                // Field defineReplacements:Ljava/util/Map;
       4: aload_1
       5: new           #210                // class java/lang/Integer
       8: dup
       9: iload_2
      10: invokespecial #218                // Method java/lang/Integer."<init>":(I)V
      13: invokeinterface #209,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      18: pop
      19: return

  public void setDefineToDoubleLiteral(java.lang.String, double);
    Code:
       0: aload_0
       1: getfield      #162                // Field defineReplacements:Ljava/util/Map;
       4: aload_1
       5: new           #213                // class java/lang/Double
       8: dup
       9: dload_2
      10: invokespecial #219                // Method java/lang/Double."<init>":(D)V
      13: invokeinterface #209,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      18: pop
      19: return

  public void setTweakToBooleanLiteral(java.lang.String, boolean);
    Code:
       0: aload_0
       1: getfield      #165                // Field tweakReplacements:Ljava/util/Map;
       4: aload_1
       5: new           #206                // class java/lang/Boolean
       8: dup
       9: iload_2
      10: invokespecial #217                // Method java/lang/Boolean."<init>":(Z)V
      13: invokeinterface #209,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      18: pop
      19: return

  public void setTweakToStringLiteral(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #165                // Field tweakReplacements:Ljava/util/Map;
       4: aload_1
       5: aload_2
       6: invokeinterface #209,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      11: pop
      12: return

  public void setTweakToNumberLiteral(java.lang.String, int);
    Code:
       0: aload_0
       1: getfield      #165                // Field tweakReplacements:Ljava/util/Map;
       4: aload_1
       5: new           #210                // class java/lang/Integer
       8: dup
       9: iload_2
      10: invokespecial #218                // Method java/lang/Integer."<init>":(I)V
      13: invokeinterface #209,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      18: pop
      19: return

  public void setTweakToDoubleLiteral(java.lang.String, double);
    Code:
       0: aload_0
       1: getfield      #165                // Field tweakReplacements:Ljava/util/Map;
       4: aload_1
       5: new           #213                // class java/lang/Double
       8: dup
       9: dload_2
      10: invokespecial #219                // Method java/lang/Double."<init>":(D)V
      13: invokeinterface #209,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      18: pop
      19: return

  public void skipAllCompilerPasses();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #70                 // Field skipAllPasses:Z
       5: return

  boolean enables(com.google.javascript.jscomp.DiagnosticGroup);
    Code:
       0: aload_0
       1: getfield      #52                 // Field warningsGuard:Lcom/google/javascript/jscomp/ComposeWarningsGuard;
       4: aload_1
       5: invokevirtual #220                // Method com/google/javascript/jscomp/ComposeWarningsGuard.enables:(Lcom/google/javascript/jscomp/DiagnosticGroup;)Z
       8: ireturn

  boolean disables(com.google.javascript.jscomp.DiagnosticGroup);
    Code:
       0: aload_0
       1: getfield      #52                 // Field warningsGuard:Lcom/google/javascript/jscomp/ComposeWarningsGuard;
       4: aload_1
       5: invokevirtual #221                // Method com/google/javascript/jscomp/ComposeWarningsGuard.disables:(Lcom/google/javascript/jscomp/DiagnosticGroup;)Z
       8: ireturn

  public void setWarningLevel(com.google.javascript.jscomp.DiagnosticGroup, com.google.javascript.jscomp.CheckLevel);
    Code:
       0: aload_0
       1: new           #222                // class com/google/javascript/jscomp/DiagnosticGroupWarningsGuard
       4: dup
       5: aload_1
       6: aload_2
       7: invokespecial #223                // Method com/google/javascript/jscomp/DiagnosticGroupWarningsGuard."<init>":(Lcom/google/javascript/jscomp/DiagnosticGroup;Lcom/google/javascript/jscomp/CheckLevel;)V
      10: invokevirtual #224                // Method addWarningsGuard:(Lcom/google/javascript/jscomp/WarningsGuard;)V
      13: return

  com.google.javascript.jscomp.WarningsGuard getWarningsGuard();
    Code:
       0: aload_0
       1: getfield      #52                 // Field warningsGuard:Lcom/google/javascript/jscomp/ComposeWarningsGuard;
       4: areturn

  public void resetWarningsGuard();
    Code:
       0: aload_0
       1: new           #49                 // class com/google/javascript/jscomp/ComposeWarningsGuard
       4: dup
       5: iconst_0
       6: anewarray     #50                 // class com/google/javascript/jscomp/WarningsGuard
       9: invokespecial #51                 // Method com/google/javascript/jscomp/ComposeWarningsGuard."<init>":([Lcom/google/javascript/jscomp/WarningsGuard;)V
      12: putfield      #52                 // Field warningsGuard:Lcom/google/javascript/jscomp/ComposeWarningsGuard;
      15: return

  void useEmergencyFailSafe();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #52                 // Field warningsGuard:Lcom/google/javascript/jscomp/ComposeWarningsGuard;
       5: invokevirtual #225                // Method com/google/javascript/jscomp/ComposeWarningsGuard.makeEmergencyFailSafeGuard:()Lcom/google/javascript/jscomp/ComposeWarningsGuard;
       8: putfield      #52                 // Field warningsGuard:Lcom/google/javascript/jscomp/ComposeWarningsGuard;
      11: return

  public void addWarningsGuard(com.google.javascript.jscomp.WarningsGuard);
    Code:
       0: aload_0
       1: getfield      #52                 // Field warningsGuard:Lcom/google/javascript/jscomp/ComposeWarningsGuard;
       4: aload_1
       5: invokevirtual #226                // Method com/google/javascript/jscomp/ComposeWarningsGuard.addGuard:(Lcom/google/javascript/jscomp/WarningsGuard;)V
       8: return

  public void setRenamingPolicy(com.google.javascript.jscomp.VariableRenamingPolicy, com.google.javascript.jscomp.PropertyRenamingPolicy);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #127                // Field variableRenaming:Lcom/google/javascript/jscomp/VariableRenamingPolicy;
       5: aload_0
       6: aload_2
       7: putfield      #129                // Field propertyRenaming:Lcom/google/javascript/jscomp/PropertyRenamingPolicy;
      10: return

  public void setShadowVariables(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #132                // Field shadowVariables:Z
       5: return

  public void setProcessObjectPropertyString(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #172                // Field processObjectPropertyString:Z
       5: return

  public void setReplaceIdGenerators(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #40                 // Field replaceIdGenerators:Z
       5: return

  public void setIdGenerators(java.util.Set<java.lang.String>);
    Code:
       0: invokestatic  #227                // Method com/google/common/collect/ImmutableMap.builder:()Lcom/google/common/collect/ImmutableMap$Builder;
       3: astore_2
       4: aload_1
       5: invokeinterface #199,  1          // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      10: astore_3
      11: aload_3
      12: invokeinterface #200,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      17: ifeq          44
      20: aload_3
      21: invokeinterface #201,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      26: checkcast     #204                // class java/lang/String
      29: astore        4
      31: aload_2
      32: aload         4
      34: getstatic     #228                // Field UNIQUE_ID_GENERATOR:Lcom/google/javascript/jscomp/RenamingMap;
      37: invokevirtual #229                // Method com/google/common/collect/ImmutableMap$Builder.put:(Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableMap$Builder;
      40: pop
      41: goto          11
      44: aload_0
      45: aload_2
      46: invokevirtual #230                // Method com/google/common/collect/ImmutableMap$Builder.build:()Lcom/google/common/collect/ImmutableMap;
      49: putfield      #174                // Field idGenerators:Lcom/google/common/collect/ImmutableMap;
      52: return

  public void setIdGenerators(java.util.Map<java.lang.String, com.google.javascript.jscomp.RenamingMap>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #231                // Method com/google/common/collect/ImmutableMap.copyOf:(Ljava/util/Map;)Lcom/google/common/collect/ImmutableMap;
       5: putfield      #174                // Field idGenerators:Lcom/google/common/collect/ImmutableMap;
       8: return

  public void setIdGeneratorsMap(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #232                // Field idGeneratorsMapSerialized:Ljava/lang/String;
       5: return

  public void setInlineFunctions(com.google.javascript.jscomp.CompilerOptions$Reach);
    Code:
       0: getstatic     #233                // Field com/google/javascript/jscomp/CompilerOptions$1.$SwitchMap$com$google$javascript$jscomp$CompilerOptions$Reach:[I
       3: aload_1
       4: invokevirtual #234                // Method com/google/javascript/jscomp/CompilerOptions$Reach.ordinal:()I
       7: iaload
       8: tableswitch   { // 1 to 3
                     1: 36
                     2: 49
                     3: 62
               default: 75
          }
      36: aload_0
      37: iconst_1
      38: putfield      #88                 // Field inlineFunctions:Z
      41: aload_0
      42: iconst_1
      43: putfield      #91                 // Field inlineLocalFunctions:Z
      46: goto          85
      49: aload_0
      50: iconst_0
      51: putfield      #88                 // Field inlineFunctions:Z
      54: aload_0
      55: iconst_1
      56: putfield      #91                 // Field inlineLocalFunctions:Z
      59: goto          85
      62: aload_0
      63: iconst_0
      64: putfield      #88                 // Field inlineFunctions:Z
      67: aload_0
      68: iconst_0
      69: putfield      #91                 // Field inlineLocalFunctions:Z
      72: goto          85
      75: new           #235                // class java/lang/IllegalStateException
      78: dup
      79: ldc           #236                // String unexpected
      81: invokespecial #237                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      84: athrow
      85: return

  public void setMaxFunctionSizeAfterInlining(int);
    Code:
       0: iload_1
       1: ifle          8
       4: iconst_1
       5: goto          9
       8: iconst_0
       9: invokestatic  #238                // Method com/google/common/base/Preconditions.checkArgument:(Z)V
      12: aload_0
      13: iload_1
      14: putfield      #90                 // Field maxFunctionSizeAfterInlining:I
      17: return

  public void setInlineVariables(com.google.javascript.jscomp.CompilerOptions$Reach);
    Code:
       0: getstatic     #233                // Field com/google/javascript/jscomp/CompilerOptions$1.$SwitchMap$com$google$javascript$jscomp$CompilerOptions$Reach:[I
       3: aload_1
       4: invokevirtual #234                // Method com/google/javascript/jscomp/CompilerOptions$Reach.ordinal:()I
       7: iaload
       8: tableswitch   { // 1 to 3
                     1: 36
                     2: 49
                     3: 62
               default: 75
          }
      36: aload_0
      37: iconst_1
      38: putfield      #99                 // Field inlineVariables:Z
      41: aload_0
      42: iconst_1
      43: putfield      #100                // Field inlineLocalVariables:Z
      46: goto          85
      49: aload_0
      50: iconst_0
      51: putfield      #99                 // Field inlineVariables:Z
      54: aload_0
      55: iconst_1
      56: putfield      #100                // Field inlineLocalVariables:Z
      59: goto          85
      62: aload_0
      63: iconst_0
      64: putfield      #99                 // Field inlineVariables:Z
      67: aload_0
      68: iconst_0
      69: putfield      #100                // Field inlineLocalVariables:Z
      72: goto          85
      75: new           #235                // class java/lang/IllegalStateException
      78: dup
      79: ldc           #236                // String unexpected
      81: invokespecial #237                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      84: athrow
      85: return

  public void setInlineProperties(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #94                 // Field inlineProperties:Z
       5: return

  public void setRemoveUnusedVariables(com.google.javascript.jscomp.CompilerOptions$Reach);
    Code:
       0: getstatic     #233                // Field com/google/javascript/jscomp/CompilerOptions$1.$SwitchMap$com$google$javascript$jscomp$CompilerOptions$Reach:[I
       3: aload_1
       4: invokevirtual #234                // Method com/google/javascript/jscomp/CompilerOptions$Reach.ordinal:()I
       7: iaload
       8: tableswitch   { // 1 to 3
                     1: 36
                     2: 49
                     3: 62
               default: 75
          }
      36: aload_0
      37: iconst_1
      38: putfield      #110                // Field removeUnusedVars:Z
      41: aload_0
      42: iconst_1
      43: putfield      #111                // Field removeUnusedLocalVars:Z
      46: goto          85
      49: aload_0
      50: iconst_0
      51: putfield      #110                // Field removeUnusedVars:Z
      54: aload_0
      55: iconst_1
      56: putfield      #111                // Field removeUnusedLocalVars:Z
      59: goto          85
      62: aload_0
      63: iconst_0
      64: putfield      #110                // Field removeUnusedVars:Z
      67: aload_0
      68: iconst_0
      69: putfield      #111                // Field removeUnusedLocalVars:Z
      72: goto          85
      75: new           #235                // class java/lang/IllegalStateException
      78: dup
      79: ldc           #236                // String unexpected
      81: invokespecial #237                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      84: athrow
      85: return

  public void setReplaceStringsConfiguration(java.lang.String, java.util.List<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #176                // Field replaceStringsPlaceholderToken:Ljava/lang/String;
       5: aload_0
       6: aload_2
       7: invokestatic  #239                // Method com/google/common/collect/Lists.newArrayList:(Ljava/lang/Iterable;)Ljava/util/ArrayList;
      10: putfield      #175                // Field replaceStringsFunctionDescriptions:Ljava/util/List;
      13: return

  public void setRemoveAbstractMethods(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #153                // Field removeAbstractMethods:Z
       5: return

  public void setRemoveClosureAsserts(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #154                // Field removeClosureAsserts:Z
       5: return

  public void setColorizeErrorOutput(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #188                // Field colorizeErrorOutput:Z
       5: return

  public boolean shouldColorizeErrorOutput();
    Code:
       0: aload_0
       1: getfield      #188                // Field colorizeErrorOutput:Z
       4: ireturn

  public void setChainCalls(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #81                 // Field chainCalls:Z
       5: return

  public void setAcceptConstKeyword(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #68                 // Field acceptConstKeyword:Z
       5: return

  public void enableRuntimeTypeCheck(java.lang.String);
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #143                // Field runtimeTypeCheck:Z
       5: aload_0
       6: aload_1
       7: putfield      #144                // Field runtimeTypeCheckLogFunction:Ljava/lang/String;
      10: return

  public void disableRuntimeTypeCheck();
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #143                // Field runtimeTypeCheck:Z
       5: return

  public void setGenerateExports(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #168                // Field generateExports:Z
       5: return

  public void setExportLocalPropertyDefinitions(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #169                // Field exportLocalPropertyDefinitions:Z
       5: return

  public void setAngularPass(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #152                // Field angularPass:Z
       5: return

  public void setCodingConvention(com.google.javascript.jscomp.CodingConvention);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #240                // Field codingConvention:Lcom/google/javascript/jscomp/CodingConvention;
       5: return

  public com.google.javascript.jscomp.CodingConvention getCodingConvention();
    Code:
       0: aload_0
       1: getfield      #240                // Field codingConvention:Lcom/google/javascript/jscomp/CodingConvention;
       4: areturn

  public void setDependencyOptions(com.google.javascript.jscomp.DependencyOptions);
    Code:
       0: aload_1
       1: invokestatic  #241                // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_0
       6: aload_1
       7: putfield      #39                 // Field dependencyOptions:Lcom/google/javascript/jscomp/DependencyOptions;
      10: return

  public void setManageClosureDependencies(boolean);
    Code:
       0: aload_0
       1: getfield      #39                 // Field dependencyOptions:Lcom/google/javascript/jscomp/DependencyOptions;
       4: iload_1
       5: ifne          18
       8: aload_0
       9: getfield      #39                 // Field dependencyOptions:Lcom/google/javascript/jscomp/DependencyOptions;
      12: invokevirtual #242                // Method com/google/javascript/jscomp/DependencyOptions.shouldSortDependencies:()Z
      15: ifeq          22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: invokevirtual #243                // Method com/google/javascript/jscomp/DependencyOptions.setDependencySorting:(Z)Lcom/google/javascript/jscomp/DependencyOptions;
      26: pop
      27: aload_0
      28: getfield      #39                 // Field dependencyOptions:Lcom/google/javascript/jscomp/DependencyOptions;
      31: iload_1
      32: ifne          45
      35: aload_0
      36: getfield      #39                 // Field dependencyOptions:Lcom/google/javascript/jscomp/DependencyOptions;
      39: invokevirtual #244                // Method com/google/javascript/jscomp/DependencyOptions.shouldPruneDependencies:()Z
      42: ifeq          49
      45: iconst_1
      46: goto          50
      49: iconst_0
      50: invokevirtual #245                // Method com/google/javascript/jscomp/DependencyOptions.setDependencyPruning:(Z)Lcom/google/javascript/jscomp/DependencyOptions;
      53: pop
      54: aload_0
      55: getfield      #39                 // Field dependencyOptions:Lcom/google/javascript/jscomp/DependencyOptions;
      58: iconst_0
      59: invokevirtual #246                // Method com/google/javascript/jscomp/DependencyOptions.setMoocherDropping:(Z)Lcom/google/javascript/jscomp/DependencyOptions;
      62: pop
      63: aload_0
      64: iload_1
      65: putfield      #35                 // Field manageClosureDependencies:Z
      68: return

  public void setManageClosureDependencies(java.util.List<java.lang.String>);
    Code:
       0: aload_1
       1: invokestatic  #241                // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_0
       6: iconst_1
       7: invokevirtual #247                // Method setManageClosureDependencies:(Z)V
      10: aload_0
      11: getfield      #39                 // Field dependencyOptions:Lcom/google/javascript/jscomp/DependencyOptions;
      14: aload_1
      15: invokevirtual #248                // Method com/google/javascript/jscomp/DependencyOptions.setEntryPoints:(Ljava/util/Collection;)Lcom/google/javascript/jscomp/DependencyOptions;
      18: pop
      19: return

  public void setSummaryDetailLevel(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #53                 // Field summaryDetailLevel:I
       5: return

  public void enableExternExports(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #192                // Field externExports:Z
       5: return

  public void setExtraAnnotationNames(java.lang.Iterable<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #249                // Method com/google/common/collect/ImmutableSet.copyOf:(Ljava/lang/Iterable;)Lcom/google/common/collect/ImmutableSet;
       5: putfield      #82                 // Field extraAnnotationNames:Ljava/util/Set;
       8: return

  public boolean isExternExportsEnabled();
    Code:
       0: aload_0
       1: getfield      #192                // Field externExports:Z
       4: ireturn

  public void setOutputCharset(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #250                // Field outputCharset:Ljava/lang/String;
       5: return

  java.nio.charset.Charset getOutputCharset();
    Code:
       0: aload_0
       1: getfield      #250                // Field outputCharset:Ljava/lang/String;
       4: ifnonnull     11
       7: aconst_null
       8: goto          18
      11: aload_0
      12: getfield      #250                // Field outputCharset:Ljava/lang/String;
      15: invokestatic  #251                // Method java/nio/charset/Charset.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;
      18: areturn

  public void setTweakProcessing(com.google.javascript.jscomp.CompilerOptions$TweakProcessing);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #164                // Field tweakProcessing:Lcom/google/javascript/jscomp/CompilerOptions$TweakProcessing;
       5: return

  public com.google.javascript.jscomp.CompilerOptions$TweakProcessing getTweakProcessing();
    Code:
       0: aload_0
       1: getfield      #164                // Field tweakProcessing:Lcom/google/javascript/jscomp/CompilerOptions$TweakProcessing;
       4: areturn

  public void setLanguage(com.google.javascript.jscomp.CompilerOptions$LanguageMode);
    Code:
       0: aload_0
       1: getfield      #65                 // Field languageIn:Lcom/google/javascript/jscomp/CompilerOptions$LanguageMode;
       4: getstatic     #66                 // Field com/google/javascript/jscomp/CompilerOptions$LanguageMode.NO_TRANSPILE:Lcom/google/javascript/jscomp/CompilerOptions$LanguageMode;
       7: if_acmpeq     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: invokestatic  #215                // Method com/google/common/base/Preconditions.checkState:(Z)V
      18: aload_0
      19: aload_1
      20: putfield      #65                 // Field languageIn:Lcom/google/javascript/jscomp/CompilerOptions$LanguageMode;
      23: aload_0
      24: aload_1
      25: putfield      #67                 // Field languageOut:Lcom/google/javascript/jscomp/CompilerOptions$LanguageMode;
      28: return

  public void setLanguageIn(com.google.javascript.jscomp.CompilerOptions$LanguageMode);
    Code:
       0: aload_1
       1: getstatic     #66                 // Field com/google/javascript/jscomp/CompilerOptions$LanguageMode.NO_TRANSPILE:Lcom/google/javascript/jscomp/CompilerOptions$LanguageMode;
       4: if_acmpeq     11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: invokestatic  #215                // Method com/google/common/base/Preconditions.checkState:(Z)V
      15: aload_0
      16: aload_1
      17: putfield      #65                 // Field languageIn:Lcom/google/javascript/jscomp/CompilerOptions$LanguageMode;
      20: return

  public com.google.javascript.jscomp.CompilerOptions$LanguageMode getLanguageIn();
    Code:
       0: aload_0
       1: getfield      #65                 // Field languageIn:Lcom/google/javascript/jscomp/CompilerOptions$LanguageMode;
       4: areturn

  public void setLanguageOut(com.google.javascript.jscomp.CompilerOptions$LanguageMode);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #67                 // Field languageOut:Lcom/google/javascript/jscomp/CompilerOptions$LanguageMode;
       5: return

  public com.google.javascript.jscomp.CompilerOptions$LanguageMode getLanguageOut();
    Code:
       0: aload_0
       1: getfield      #67                 // Field languageOut:Lcom/google/javascript/jscomp/CompilerOptions$LanguageMode;
       4: getstatic     #66                 // Field com/google/javascript/jscomp/CompilerOptions$LanguageMode.NO_TRANSPILE:Lcom/google/javascript/jscomp/CompilerOptions$LanguageMode;
       7: if_acmpne     15
      10: aload_0
      11: getfield      #65                 // Field languageIn:Lcom/google/javascript/jscomp/CompilerOptions$LanguageMode;
      14: areturn
      15: aload_0
      16: getfield      #67                 // Field languageOut:Lcom/google/javascript/jscomp/CompilerOptions$LanguageMode;
      19: areturn

  boolean needsConversion();
    Code:
       0: aload_0
       1: getfield      #67                 // Field languageOut:Lcom/google/javascript/jscomp/CompilerOptions$LanguageMode;
       4: getstatic     #66                 // Field com/google/javascript/jscomp/CompilerOptions$LanguageMode.NO_TRANSPILE:Lcom/google/javascript/jscomp/CompilerOptions$LanguageMode;
       7: if_acmpeq     25
      10: aload_0
      11: getfield      #65                 // Field languageIn:Lcom/google/javascript/jscomp/CompilerOptions$LanguageMode;
      14: aload_0
      15: getfield      #67                 // Field languageOut:Lcom/google/javascript/jscomp/CompilerOptions$LanguageMode;
      18: if_acmpeq     25
      21: iconst_1
      22: goto          26
      25: iconst_0
      26: ireturn

  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    Code:
       0: aload_0
       1: invokespecial #252                // Method java/lang/Object.clone:()Ljava/lang/Object;
       4: checkcast     #89                 // class com/google/javascript/jscomp/CompilerOptions
       7: astore_1
       8: aload_1
       9: areturn

  public void setAliasTransformationHandler(com.google.javascript.jscomp.CompilerOptions$AliasTransformationHandler);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #194                // Field aliasHandler:Lcom/google/javascript/jscomp/CompilerOptions$AliasTransformationHandler;
       5: return

  public com.google.javascript.jscomp.CompilerOptions$AliasTransformationHandler getAliasTransformationHandler();
    Code:
       0: aload_0
       1: getfield      #194                // Field aliasHandler:Lcom/google/javascript/jscomp/CompilerOptions$AliasTransformationHandler;
       4: areturn

  public void setErrorHandler(com.google.javascript.jscomp.ErrorHandler);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #195                // Field errorHandler:Lcom/google/javascript/jscomp/ErrorHandler;
       5: return

  public void setInferTypes(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #13                 // Field inferTypes:Z
       5: return

  public boolean getInferTypes();
    Code:
       0: aload_0
       1: getfield      #13                 // Field inferTypes:Z
       4: ireturn

  public boolean getNewTypeInference();
    Code:
       0: aload_0
       1: getfield      #253                // Field useNewTypeInference:Z
       4: ireturn

  public void setNewTypeInference(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #253                // Field useNewTypeInference:Z
       5: return

  public boolean assumeStrictThis();
    Code:
       0: aload_0
       1: getfield      #92                 // Field assumeStrictThis:Z
       4: ireturn

  public void setAssumeStrictThis(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #92                 // Field assumeStrictThis:Z
       5: return

  public boolean assumeClosuresOnlyCaptureReferences();
    Code:
       0: aload_0
       1: getfield      #93                 // Field assumeClosuresOnlyCaptureReferences:Z
       4: ireturn

  public void setAssumeClosuresOnlyCaptureReferences(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #93                 // Field assumeClosuresOnlyCaptureReferences:Z
       5: return

  public void setPropertyInvalidationErrors(java.util.Map<java.lang.String, com.google.javascript.jscomp.CheckLevel>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #254                // Method com/google/common/collect/Maps.newHashMap:(Ljava/util/Map;)Ljava/util/HashMap;
       5: putfield      #178                // Field propertyInvalidationErrors:Ljava/util/Map;
       8: return

  public void setIdeMode(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #255                // Field ideMode:Z
       5: return

  public void setSaveDataStructures(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #36                 // Field saveDataStructures:Z
       5: return

  public void setSkipAllPasses(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #70                 // Field skipAllPasses:Z
       5: return

  public void setDevMode(com.google.javascript.jscomp.CompilerOptions$DevMode);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #72                 // Field devMode:Lcom/google/javascript/jscomp/CompilerOptions$DevMode;
       5: return

  public void setCheckDeterminism(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #73                 // Field checkDeterminism:Z
       5: iload_1
       6: ifeq          14
       9: aload_0
      10: iconst_1
      11: putfield      #196                // Field useDebugLog:Z
      14: return

  public boolean getCheckDeterminism();
    Code:
       0: aload_0
       1: getfield      #73                 // Field checkDeterminism:Z
       4: ireturn

  public void setMessageBundle(com.google.javascript.jscomp.MessageBundle);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #19                 // Field messageBundle:Lcom/google/javascript/jscomp/MessageBundle;
       5: return

  public void setCheckSymbols(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #74                 // Field checkSymbols:Z
       5: return

  public void setCheckSuspiciousCode(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #76                 // Field checkSuspiciousCode:Z
       5: return

  public void setCheckTypes(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #77                 // Field checkTypes:Z
       5: return

  public void setCheckMissingGetCssNameBlacklist(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #79                 // Field checkMissingGetCssNameBlacklist:Ljava/lang/String;
       5: return

  public void setAggressiveRenaming(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #83                 // Field aggressiveRenaming:Z
       5: return

  public void setFoldConstants(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #84                 // Field foldConstants:Z
       5: return

  public void setDeadAssignmentElimination(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #86                 // Field deadAssignmentElimination:Z
       5: return

  public void setInlineConstantVars(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #87                 // Field inlineConstantVars:Z
       5: return

  public void setInlineFunctions(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #88                 // Field inlineFunctions:Z
       5: return

  public void setInlineLocalFunctions(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #91                 // Field inlineLocalFunctions:Z
       5: return

  public void setCrossModuleCodeMotion(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #95                 // Field crossModuleCodeMotion:Z
       5: return

  public void setParentModuleCanSeeSymbolsDeclaredInChildren(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #96                 // Field parentModuleCanSeeSymbolsDeclaredInChildren:Z
       5: return

  public void setCoalesceVariableNames(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #85                 // Field coalesceVariableNames:Z
       5: return

  public void setCrossModuleMethodMotion(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #97                 // Field crossModuleMethodMotion:Z
       5: return

  public void setInlineGetters(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #98                 // Field inlineGetters:Z
       5: return

  public void setInlineVariables(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #99                 // Field inlineVariables:Z
       5: return

  public void setInlineLocalVariables(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #100                // Field inlineLocalVariables:Z
       5: return

  public void setFlowSensitiveInlineVariables(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #256                // Field flowSensitiveInlineVariables:Z
       5: return

  public void setSmartNameRemoval(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #101                // Field smartNameRemoval:Z
       5: return

  public void setExtraSmartNameRemoval(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #102                // Field extraSmartNameRemoval:Z
       5: return

  public void setRemoveDeadCode(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #103                // Field removeDeadCode:Z
       5: return

  public void setExtractPrototypeMemberDeclarations(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: ifeq          11
       5: getstatic     #257                // Field com/google/javascript/jscomp/CompilerOptions$ExtractPrototypeMemberDeclarationsMode.USE_GLOBAL_TEMP:Lcom/google/javascript/jscomp/CompilerOptions$ExtractPrototypeMemberDeclarationsMode;
       8: goto          14
      11: getstatic     #104                // Field com/google/javascript/jscomp/CompilerOptions$ExtractPrototypeMemberDeclarationsMode.OFF:Lcom/google/javascript/jscomp/CompilerOptions$ExtractPrototypeMemberDeclarationsMode;
      14: putfield      #105                // Field extractPrototypeMemberDeclarations:Lcom/google/javascript/jscomp/CompilerOptions$ExtractPrototypeMemberDeclarationsMode;
      17: return

  public void setExtractPrototypeMemberDeclarations(com.google.javascript.jscomp.CompilerOptions$ExtractPrototypeMemberDeclarationsMode);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #105                // Field extractPrototypeMemberDeclarations:Lcom/google/javascript/jscomp/CompilerOptions$ExtractPrototypeMemberDeclarationsMode;
       5: return

  public void setRemoveUnusedPrototypeProperties(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #106                // Field removeUnusedPrototypeProperties:Z
       5: return

  public void setRemoveUnusedPrototypePropertiesInExterns(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #107                // Field removeUnusedPrototypePropertiesInExterns:Z
       5: return

  public void setRemoveUnusedVars(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #110                // Field removeUnusedVars:Z
       5: return

  public void setRemoveUnusedLocalVars(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #111                // Field removeUnusedLocalVars:Z
       5: return

  public void setAliasExternals(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #112                // Field aliasExternals:Z
       5: return

  public void setCollapseVariableDeclarations(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #113                // Field collapseVariableDeclarations:Z
       5: return

  public void setGroupVariableDeclarations(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #114                // Field groupVariableDeclarations:Z
       5: return

  public void setCollapseAnonymousFunctions(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #115                // Field collapseAnonymousFunctions:Z
       5: return

  public void setAliasableStrings(java.util.Set<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #117                // Field aliasableStrings:Ljava/util/Set;
       5: return

  public void setAliasStringsBlacklist(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #119                // Field aliasStringsBlacklist:Ljava/lang/String;
       5: return

  public void setAliasAllStrings(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #120                // Field aliasAllStrings:Z
       5: return

  public void setOutputJsStringUsage(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #121                // Field outputJsStringUsage:Z
       5: return

  public void setConvertToDottedProperties(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #122                // Field convertToDottedProperties:Z
       5: return

  public void setRewriteFunctionExpressions(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #123                // Field rewriteFunctionExpressions:Z
       5: return

  public void setOptimizeParameters(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #124                // Field optimizeParameters:Z
       5: return

  public void setOptimizeReturns(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #125                // Field optimizeReturns:Z
       5: return

  public void setOptimizeCalls(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #258                // Field optimizeCalls:Z
       5: return

  public void setOptimizeArgumentsArray(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #259                // Field optimizeArgumentsArray:Z
       5: return

  public void setVariableRenaming(com.google.javascript.jscomp.VariableRenamingPolicy);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #127                // Field variableRenaming:Lcom/google/javascript/jscomp/VariableRenamingPolicy;
       5: return

  public void setPropertyRenaming(com.google.javascript.jscomp.PropertyRenamingPolicy);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #129                // Field propertyRenaming:Lcom/google/javascript/jscomp/PropertyRenamingPolicy;
       5: return

  public void setLabelRenaming(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #130                // Field labelRenaming:Z
       5: return

  public void setReserveRawExports(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #260                // Field reserveRawExports:Z
       5: return

  public void setPreferStableNames(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #133                // Field preferStableNames:Z
       5: return

  public void setGeneratePseudoNames(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #131                // Field generatePseudoNames:Z
       5: return

  public void setRenamePrefix(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #134                // Field renamePrefix:Ljava/lang/String;
       5: return

  public void setRenamePrefixNamespace(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #261                // Field renamePrefixNamespace:Ljava/lang/String;
       5: return

  public void setCollapseProperties(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #135                // Field collapseProperties:Z
       5: return

  public void setDevirtualizePrototypeMethods(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #136                // Field devirtualizePrototypeMethods:Z
       5: return

  public void setComputeFunctionSideEffects(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #80                 // Field computeFunctionSideEffects:Z
       5: return

  public void setDebugFunctionSideEffectsPath(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #191                // Field debugFunctionSideEffectsPath:Ljava/lang/String;
       5: return

  public boolean isDisambiguatePrivateProperties();
    Code:
       0: aload_0
       1: getfield      #262                // Field disambiguatePrivateProperties:Z
       4: ireturn

  public void setDisambiguatePrivateProperties(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #262                // Field disambiguatePrivateProperties:Z
       5: return

  public void setDisambiguateProperties(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #137                // Field disambiguateProperties:Z
       5: return

  public void setAmbiguateProperties(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #138                // Field ambiguateProperties:Z
       5: return

  public void setAnonymousFunctionNaming(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #140                // Field anonymousFunctionNaming:Lcom/google/javascript/jscomp/AnonymousFunctionNamingPolicy;
       5: return

  public void setInputAnonymousFunctionNamingMap(com.google.javascript.jscomp.VariableMap);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #263                // Field inputAnonymousFunctionNamingMap:Lcom/google/javascript/jscomp/VariableMap;
       5: return

  public void setInputVariableMap(com.google.javascript.jscomp.VariableMap);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #264                // Field inputVariableMap:Lcom/google/javascript/jscomp/VariableMap;
       5: return

  public void setInputPropertyMap(com.google.javascript.jscomp.VariableMap);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #265                // Field inputPropertyMap:Lcom/google/javascript/jscomp/VariableMap;
       5: return

  public void setExportTestFunctions(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #141                // Field exportTestFunctions:Z
       5: return

  public void setRuntimeTypeCheck(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #143                // Field runtimeTypeCheck:Z
       5: return

  public void setRuntimeTypeCheckLogFunction(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #144                // Field runtimeTypeCheckLogFunction:Ljava/lang/String;
       5: return

  public void setSyntheticBlockStartMarker(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #145                // Field syntheticBlockStartMarker:Ljava/lang/String;
       5: return

  public void setSyntheticBlockEndMarker(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #146                // Field syntheticBlockEndMarker:Ljava/lang/String;
       5: return

  public void setLocale(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #147                // Field locale:Ljava/lang/String;
       5: return

  public void setMarkAsCompiled(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #148                // Field markAsCompiled:Z
       5: return

  public void setClosurePass(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #149                // Field closurePass:Z
       5: return

  public void setPreserveGoogRequires(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #150                // Field preserveGoogRequires:Z
       5: return

  public void setPreserveTypeAnnotations(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #182                // Field preserveTypeAnnotations:Z
       5: return

  public void setGatherCssNames(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #266                // Field gatherCssNames:Z
       5: return

  public void setStripTypes(java.util.Set<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #155                // Field stripTypes:Ljava/util/Set;
       5: return

  public void setStripNameSuffixes(java.util.Set<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #156                // Field stripNameSuffixes:Ljava/util/Set;
       5: return

  public void setStripNamePrefixes(java.util.Set<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #157                // Field stripNamePrefixes:Ljava/util/Set;
       5: return

  public void setStripTypePrefixes(java.util.Set<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #158                // Field stripTypePrefixes:Ljava/util/Set;
       5: return

  public void setCustomPasses(com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #159                // Field customPasses:Lcom/google/common/collect/Multimap;
       5: return

  public void setMarkNoSideEffectCalls(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #160                // Field markNoSideEffectCalls:Z
       5: return

  public void setDefineReplacements(java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #162                // Field defineReplacements:Ljava/util/Map;
       5: return

  public void setTweakReplacements(java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #165                // Field tweakReplacements:Ljava/util/Map;
       5: return

  public void setMoveFunctionDeclarations(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #166                // Field moveFunctionDeclarations:Z
       5: return

  public void setInstrumentationTemplate(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #180                // Field instrumentationTemplate:Ljava/lang/String;
       5: return

  public void setRecordFunctionInformation(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #167                // Field recordFunctionInformation:Z
       5: return

  public void setCssRenamingMap(com.google.javascript.jscomp.CssRenamingMap);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #170                // Field cssRenamingMap:Lcom/google/javascript/jscomp/CssRenamingMap;
       5: return

  public void setCssRenamingWhitelist(java.util.Set<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #171                // Field cssRenamingWhitelist:Ljava/util/Set;
       5: return

  public void setReplaceStringsFunctionDescriptions(java.util.List<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #175                // Field replaceStringsFunctionDescriptions:Ljava/util/List;
       5: return

  public void setReplaceStringsPlaceholderToken(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #176                // Field replaceStringsPlaceholderToken:Ljava/lang/String;
       5: return

  public void setReplaceStringsReservedStrings(java.util.Set<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #177                // Field replaceStringsReservedStrings:Ljava/util/Set;
       5: return

  public void setReplaceStringsInputMap(com.google.javascript.jscomp.VariableMap);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #267                // Field replaceStringsInputMap:Lcom/google/javascript/jscomp/VariableMap;
       5: return

  public void setPrettyPrint(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #184                // Field prettyPrint:Z
       5: return

  public void setLineBreak(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #185                // Field lineBreak:Z
       5: return

  public void setPreferLineBreakAtEndOfFile(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #186                // Field preferLineBreakAtEndOfFile:Z
       5: return

  public void setPrintInputDelimiter(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #183                // Field printInputDelimiter:Z
       5: return

  public void setInputDelimiter(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #48                 // Field inputDelimiter:Ljava/lang/String;
       5: return

  public void setErrorFormat(com.google.javascript.jscomp.ErrorFormat);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #190                // Field errorFormat:Lcom/google/javascript/jscomp/ErrorFormat;
       5: return

  public com.google.javascript.jscomp.ErrorFormat getErrorFormat();
    Code:
       0: aload_0
       1: getfield      #190                // Field errorFormat:Lcom/google/javascript/jscomp/ErrorFormat;
       4: areturn

  public void setWarningsGuard(com.google.javascript.jscomp.ComposeWarningsGuard);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #52                 // Field warningsGuard:Lcom/google/javascript/jscomp/ComposeWarningsGuard;
       5: return

  public void setLineLengthThreshold(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #55                 // Field lineLengthThreshold:I
       5: return

  public void setExternExports(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #192                // Field externExports:Z
       5: return

  public void setExternExportsPath(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #268                // Field externExportsPath:Ljava/lang/String;
       5: return

  public void setSourceMapOutputPath(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #269                // Field sourceMapOutputPath:Ljava/lang/String;
       5: return

  public void setSourceMapDetailLevel(com.google.javascript.jscomp.SourceMap$DetailLevel);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #57                 // Field sourceMapDetailLevel:Lcom/google/javascript/jscomp/SourceMap$DetailLevel;
       5: return

  public void setSourceMapFormat(com.google.javascript.jscomp.SourceMap$Format);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #59                 // Field sourceMapFormat:Lcom/google/javascript/jscomp/SourceMap$Format;
       5: return

  public void setSourceMapLocationMappings(java.util.List<com.google.javascript.jscomp.SourceMap$LocationMapping>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #61                 // Field sourceMapLocationMappings:Ljava/util/List;
       5: return

  public void setTransformAMDToCJSModules(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #41                 // Field transformAMDToCJSModules:Z
       5: return

  public void setProcessCommonJSModules(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #42                 // Field processCommonJSModules:Z
       5: return

  public void setRewriteEs6Modules(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #43                 // Field rewriteEs6Modules:Z
       5: return

  public void setCommonJSModulePathPrefix(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #46                 // Field commonJSModulePathPrefix:Ljava/lang/String;
       5: return

  public void setInstrumentForCoverage(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #181                // Field instrumentForCoverage:Z
       5: return

  public java.util.List<com.google.javascript.jscomp.ConformanceConfig> getConformanceConfigs();
    Code:
       0: aload_0
       1: getfield      #63                 // Field conformanceConfigs:Lcom/google/common/collect/ImmutableList;
       4: areturn

  public void setConformanceConfig(com.google.javascript.jscomp.ConformanceConfig);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #270                // Method com/google/common/collect/ImmutableList.of:(Ljava/lang/Object;)Lcom/google/common/collect/ImmutableList;
       5: putfield      #63                 // Field conformanceConfigs:Lcom/google/common/collect/ImmutableList;
       8: return

  public void setConformanceConfigs(java.util.List<com.google.javascript.jscomp.ConformanceConfig>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #271                // Method com/google/common/collect/ImmutableList.copyOf:(Ljava/util/Collection;)Lcom/google/common/collect/ImmutableList;
       5: putfield      #63                 // Field conformanceConfigs:Lcom/google/common/collect/ImmutableList;
       8: return

  static {};
    Code:
       0: getstatic     #272                // Field com/google/javascript/jscomp/ReplaceIdGenerators.UNIQUE:Lcom/google/javascript/jscomp/RenamingMap;
       3: putstatic     #228                // Field UNIQUE_ID_GENERATOR:Lcom/google/javascript/jscomp/RenamingMap;
       6: new           #273                // class com/google/javascript/jscomp/CompilerOptions$NullAliasTransformationHandler
       9: dup
      10: aconst_null
      11: invokespecial #274                // Method com/google/javascript/jscomp/CompilerOptions$NullAliasTransformationHandler."<init>":(Lcom/google/javascript/jscomp/CompilerOptions$1;)V
      14: putstatic     #193                // Field NULL_ALIAS_TRANSFORMATION_HANDLER:Lcom/google/javascript/jscomp/CompilerOptions$AliasTransformationHandler;
      17: return
}
