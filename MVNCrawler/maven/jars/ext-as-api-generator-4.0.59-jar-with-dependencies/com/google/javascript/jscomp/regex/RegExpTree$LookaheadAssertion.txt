Compiled from "RegExpTree.java"
final class com.google.javascript.jscomp.regex.RegExpTree$LookaheadAssertion extends com.google.javascript.jscomp.regex.RegExpTree {
  final com.google.javascript.jscomp.regex.RegExpTree body;

  final boolean positive;

  com.google.javascript.jscomp.regex.RegExpTree$LookaheadAssertion(com.google.javascript.jscomp.regex.RegExpTree, boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/google/javascript/jscomp/regex/RegExpTree."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field body:Lcom/google/javascript/jscomp/regex/RegExpTree;
       9: aload_0
      10: iload_2
      11: putfield      #3                  // Field positive:Z
      14: return

  public com.google.javascript.jscomp.regex.RegExpTree simplify(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #2                  // Field body:Lcom/google/javascript/jscomp/regex/RegExpTree;
       4: aload_1
       5: invokevirtual #4                  // Method com/google/javascript/jscomp/regex/RegExpTree.simplify:(Ljava/lang/String;)Lcom/google/javascript/jscomp/regex/RegExpTree;
       8: astore_2
       9: aload_2
      10: instanceof    #5                  // class com/google/javascript/jscomp/regex/RegExpTree$Empty
      13: ifeq          25
      16: aload_0
      17: getfield      #3                  // Field positive:Z
      20: ifeq          25
      23: aload_2
      24: areturn
      25: new           #6                  // class com/google/javascript/jscomp/regex/RegExpTree$LookaheadAssertion
      28: dup
      29: aload_2
      30: aload_0
      31: getfield      #3                  // Field positive:Z
      34: invokespecial #7                  // Method "<init>":(Lcom/google/javascript/jscomp/regex/RegExpTree;Z)V
      37: areturn

  public boolean isCaseSensitive();
    Code:
       0: aload_0
       1: getfield      #2                  // Field body:Lcom/google/javascript/jscomp/regex/RegExpTree;
       4: invokevirtual #8                  // Method com/google/javascript/jscomp/regex/RegExpTree.isCaseSensitive:()Z
       7: ireturn

  public boolean containsAnchor();
    Code:
       0: aload_0
       1: getfield      #2                  // Field body:Lcom/google/javascript/jscomp/regex/RegExpTree;
       4: invokevirtual #9                  // Method com/google/javascript/jscomp/regex/RegExpTree.containsAnchor:()Z
       7: ireturn

  public int numCapturingGroups();
    Code:
       0: aload_0
       1: getfield      #2                  // Field body:Lcom/google/javascript/jscomp/regex/RegExpTree;
       4: invokevirtual #10                 // Method com/google/javascript/jscomp/regex/RegExpTree.numCapturingGroups:()I
       7: ireturn

  public java.util.List<? extends com.google.javascript.jscomp.regex.RegExpTree> children();
    Code:
       0: aload_0
       1: getfield      #2                  // Field body:Lcom/google/javascript/jscomp/regex/RegExpTree;
       4: invokestatic  #11                 // Method com/google/common/collect/ImmutableList.of:(Ljava/lang/Object;)Lcom/google/common/collect/ImmutableList;
       7: areturn

  protected void appendSourceCode(java.lang.StringBuilder);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #3                  // Field positive:Z
       5: ifeq          13
       8: ldc           #12                 // String (?=
      10: goto          15
      13: ldc           #13                 // String (?!
      15: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      18: pop
      19: aload_0
      20: getfield      #2                  // Field body:Lcom/google/javascript/jscomp/regex/RegExpTree;
      23: aload_1
      24: invokevirtual #15                 // Method com/google/javascript/jscomp/regex/RegExpTree.appendSourceCode:(Ljava/lang/StringBuilder;)V
      27: aload_1
      28: bipush        41
      30: invokevirtual #16                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      33: pop
      34: return

  protected void appendDebugInfo(java.lang.StringBuilder);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #3                  // Field positive:Z
       5: ifeq          13
       8: ldc           #17                 // String positive
      10: goto          15
      13: ldc           #18                 // String negative
      15: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      18: pop
      19: return

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #6                  // class com/google/javascript/jscomp/regex/RegExpTree$LookaheadAssertion
       4: ifne          9
       7: iconst_0
       8: ireturn
       9: aload_1
      10: checkcast     #6                  // class com/google/javascript/jscomp/regex/RegExpTree$LookaheadAssertion
      13: astore_2
      14: aload_0
      15: getfield      #3                  // Field positive:Z
      18: aload_2
      19: getfield      #3                  // Field positive:Z
      22: if_icmpne     43
      25: aload_0
      26: getfield      #2                  // Field body:Lcom/google/javascript/jscomp/regex/RegExpTree;
      29: aload_2
      30: getfield      #2                  // Field body:Lcom/google/javascript/jscomp/regex/RegExpTree;
      33: invokevirtual #19                 // Method com/google/javascript/jscomp/regex/RegExpTree.equals:(Ljava/lang/Object;)Z
      36: ifeq          43
      39: iconst_1
      40: goto          44
      43: iconst_0
      44: ireturn

  public int hashCode();
    Code:
       0: ldc           #20                 // int 119778217
       2: aload_0
       3: getfield      #2                  // Field body:Lcom/google/javascript/jscomp/regex/RegExpTree;
       6: invokevirtual #21                 // Method com/google/javascript/jscomp/regex/RegExpTree.hashCode:()I
       9: ixor
      10: ireturn
}
