Compiled from "PhaseOptimizer.java"
class com.google.javascript.jscomp.PhaseOptimizer$Loop implements com.google.javascript.jscomp.CompilerPass {
  private final java.util.List<com.google.javascript.jscomp.PhaseOptimizer$NamedPass> myPasses;

  private final java.util.Set<java.lang.String> myNames;

  private com.google.javascript.jscomp.PhaseOptimizer$ScopedChangeHandler scopeHandler;

  final com.google.javascript.jscomp.PhaseOptimizer this$0;

  com.google.javascript.jscomp.PhaseOptimizer$Loop(com.google.javascript.jscomp.PhaseOptimizer);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2                  // Field this$0:Lcom/google/javascript/jscomp/PhaseOptimizer;
       5: aload_0
       6: invokespecial #3                  // Method java/lang/Object."<init>":()V
       9: aload_0
      10: invokestatic  #4                  // Method com/google/common/collect/Lists.newArrayList:()Ljava/util/ArrayList;
      13: putfield      #5                  // Field myPasses:Ljava/util/List;
      16: aload_0
      17: invokestatic  #6                  // Method com/google/common/collect/Sets.newHashSet:()Ljava/util/HashSet;
      20: putfield      #7                  // Field myNames:Ljava/util/Set;
      23: return

  void addLoopedPass(com.google.javascript.jscomp.PassFactory);
    Code:
       0: aload_1
       1: invokevirtual #8                  // Method com/google/javascript/jscomp/PassFactory.getName:()Ljava/lang/String;
       4: astore_2
       5: aload_0
       6: getfield      #7                  // Field myNames:Ljava/util/Set;
       9: aload_2
      10: invokeinterface #9,  2            // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      15: ifne          22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: ldc           #10                 // String Already a pass with name \'%s\' in this loop
      25: iconst_1
      26: anewarray     #11                 // class java/lang/Object
      29: dup
      30: iconst_0
      31: aload_2
      32: aastore
      33: invokestatic  #12                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/String;[Ljava/lang/Object;)V
      36: aload_0
      37: getfield      #7                  // Field myNames:Ljava/util/Set;
      40: aload_2
      41: invokeinterface #13,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      46: pop
      47: aload_0
      48: getfield      #5                  // Field myPasses:Ljava/util/List;
      51: new           #14                 // class com/google/javascript/jscomp/PhaseOptimizer$NamedPass
      54: dup
      55: aload_0
      56: getfield      #2                  // Field this$0:Lcom/google/javascript/jscomp/PhaseOptimizer;
      59: aload_1
      60: invokespecial #15                 // Method com/google/javascript/jscomp/PhaseOptimizer$NamedPass."<init>":(Lcom/google/javascript/jscomp/PhaseOptimizer;Lcom/google/javascript/jscomp/PassFactory;)V
      63: invokeinterface #16,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      68: pop
      69: return

  public void process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: getfield      #2                  // Field this$0:Lcom/google/javascript/jscomp/PhaseOptimizer;
       4: invokestatic  #17                 // Method com/google/javascript/jscomp/PhaseOptimizer.access$1400:(Lcom/google/javascript/jscomp/PhaseOptimizer;)Z
       7: ifne          14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ldc           #18                 // String Nested loops are forbidden
      17: invokestatic  #19                 // Method com/google/common/base/Preconditions.checkState:(ZLjava/lang/Object;)V
      20: aload_0
      21: getfield      #2                  // Field this$0:Lcom/google/javascript/jscomp/PhaseOptimizer;
      24: iconst_1
      25: invokestatic  #20                 // Method com/google/javascript/jscomp/PhaseOptimizer.access$1402:(Lcom/google/javascript/jscomp/PhaseOptimizer;Z)Z
      28: pop
      29: aload_0
      30: invokespecial #21                 // Method optimizePasses:()V
      33: aload_0
      34: new           #22                 // class com/google/javascript/jscomp/PhaseOptimizer$ScopedChangeHandler
      37: dup
      38: aload_0
      39: getfield      #2                  // Field this$0:Lcom/google/javascript/jscomp/PhaseOptimizer;
      42: invokespecial #23                 // Method com/google/javascript/jscomp/PhaseOptimizer$ScopedChangeHandler."<init>":(Lcom/google/javascript/jscomp/PhaseOptimizer;)V
      45: putfield      #24                 // Field scopeHandler:Lcom/google/javascript/jscomp/PhaseOptimizer$ScopedChangeHandler;
      48: aload_0
      49: getfield      #2                  // Field this$0:Lcom/google/javascript/jscomp/PhaseOptimizer;
      52: invokestatic  #25                 // Method com/google/javascript/jscomp/PhaseOptimizer.access$400:(Lcom/google/javascript/jscomp/PhaseOptimizer;)Lcom/google/javascript/jscomp/AbstractCompiler;
      55: aload_0
      56: getfield      #24                 // Field scopeHandler:Lcom/google/javascript/jscomp/PhaseOptimizer$ScopedChangeHandler;
      59: invokevirtual #26                 // Method com/google/javascript/jscomp/AbstractCompiler.addChangeHandler:(Lcom/google/javascript/jscomp/CodeChangeHandler;)V
      62: aload_0
      63: getfield      #2                  // Field this$0:Lcom/google/javascript/jscomp/PhaseOptimizer;
      66: aload_2
      67: invokevirtual #27                 // Method com/google/javascript/jscomp/PhaseOptimizer.setScope:(Lcom/google/javascript/rhino/Node;)V
      70: aload_0
      71: getfield      #2                  // Field this$0:Lcom/google/javascript/jscomp/PhaseOptimizer;
      74: new           #28                 // class java/util/HashMap
      77: dup
      78: invokespecial #29                 // Method java/util/HashMap."<init>":()V
      81: invokestatic  #30                 // Method com/google/javascript/jscomp/PhaseOptimizer.access$1502:(Lcom/google/javascript/jscomp/PhaseOptimizer;Ljava/util/Map;)Ljava/util/Map;
      84: pop
      85: aload_0
      86: getfield      #5                  // Field myPasses:Ljava/util/List;
      89: invokeinterface #31,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      94: astore_3
      95: aload_3
      96: invokeinterface #32,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     101: ifeq          137
     104: aload_3
     105: invokeinterface #33,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     110: checkcast     #14                 // class com/google/javascript/jscomp/PhaseOptimizer$NamedPass
     113: astore        4
     115: aload_0
     116: getfield      #2                  // Field this$0:Lcom/google/javascript/jscomp/PhaseOptimizer;
     119: invokestatic  #34                 // Method com/google/javascript/jscomp/PhaseOptimizer.access$1500:(Lcom/google/javascript/jscomp/PhaseOptimizer;)Ljava/util/Map;
     122: aload         4
     124: iconst_0
     125: invokestatic  #35                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     128: invokeinterface #36,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     133: pop
     134: goto          95
     137: invokestatic  #6                  // Method com/google/common/collect/Sets.newHashSet:()Ljava/util/HashSet;
     140: astore_3
     141: invokestatic  #6                  // Method com/google/common/collect/Sets.newHashSet:()Ljava/util/HashSet;
     144: astore        4
     146: getstatic     #37                 // Field com/google/javascript/jscomp/PhaseOptimizer$State.RUN_PASSES_NOT_RUN_IN_PREV_ITER:Lcom/google/javascript/jscomp/PhaseOptimizer$State;
     149: astore        5
     151: iconst_0
     152: istore        7
     154: iload         7
     156: iinc          7, 1
     159: bipush        100
     161: if_icmple     177
     164: aload_0
     165: getfield      #2                  // Field this$0:Lcom/google/javascript/jscomp/PhaseOptimizer;
     168: invokestatic  #25                 // Method com/google/javascript/jscomp/PhaseOptimizer.access$400:(Lcom/google/javascript/jscomp/PhaseOptimizer;)Lcom/google/javascript/jscomp/AbstractCompiler;
     171: ldc           #38                 // String Fixed point loop exceeded the maximum number of iterations.
     173: aconst_null
     174: invokevirtual #39                 // Method com/google/javascript/jscomp/AbstractCompiler.throwInternalError:(Ljava/lang/String;Ljava/lang/Exception;)V
     177: iconst_0
     178: istore        6
     180: aload_0
     181: getfield      #5                  // Field myPasses:Ljava/util/List;
     184: invokeinterface #31,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     189: astore        8
     191: aload         8
     193: invokeinterface #32,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     198: ifeq          396
     201: aload         8
     203: invokeinterface #33,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     208: checkcast     #14                 // class com/google/javascript/jscomp/PhaseOptimizer$NamedPass
     211: astore        9
     213: aload         5
     215: getstatic     #37                 // Field com/google/javascript/jscomp/PhaseOptimizer$State.RUN_PASSES_NOT_RUN_IN_PREV_ITER:Lcom/google/javascript/jscomp/PhaseOptimizer$State;
     218: if_acmpne     233
     221: aload         4
     223: aload         9
     225: invokeinterface #9,  2            // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
     230: ifeq          252
     233: aload         5
     235: getstatic     #40                 // Field com/google/javascript/jscomp/PhaseOptimizer$State.RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER:Lcom/google/javascript/jscomp/PhaseOptimizer$State;
     238: if_acmpne     383
     241: aload_3
     242: aload         9
     244: invokeinterface #9,  2            // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
     249: ifeq          383
     252: aload_0
     253: getfield      #2                  // Field this$0:Lcom/google/javascript/jscomp/PhaseOptimizer;
     256: invokestatic  #41                 // Method com/google/javascript/jscomp/PhaseOptimizer.access$1008:(Lcom/google/javascript/jscomp/PhaseOptimizer;)I
     259: pop
     260: aload_0
     261: getfield      #2                  // Field this$0:Lcom/google/javascript/jscomp/PhaseOptimizer;
     264: aload         9
     266: invokestatic  #42                 // Method com/google/javascript/jscomp/PhaseOptimizer.access$1602:(Lcom/google/javascript/jscomp/PhaseOptimizer;Lcom/google/javascript/jscomp/PhaseOptimizer$NamedPass;)Lcom/google/javascript/jscomp/PhaseOptimizer$NamedPass;
     269: pop
     270: aload         9
     272: aload_1
     273: aload_2
     274: invokevirtual #43                 // Method com/google/javascript/jscomp/PhaseOptimizer$NamedPass.process:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V
     277: aload         4
     279: aload         9
     281: invokeinterface #13,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
     286: pop
     287: aload_0
     288: getfield      #2                  // Field this$0:Lcom/google/javascript/jscomp/PhaseOptimizer;
     291: invokestatic  #34                 // Method com/google/javascript/jscomp/PhaseOptimizer.access$1500:(Lcom/google/javascript/jscomp/PhaseOptimizer;)Ljava/util/Map;
     294: aload         9
     296: aload_0
     297: getfield      #2                  // Field this$0:Lcom/google/javascript/jscomp/PhaseOptimizer;
     300: invokestatic  #44                 // Method com/google/javascript/jscomp/PhaseOptimizer.access$1000:(Lcom/google/javascript/jscomp/PhaseOptimizer;)I
     303: invokestatic  #35                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     306: invokeinterface #36,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     311: pop
     312: aload_0
     313: getfield      #2                  // Field this$0:Lcom/google/javascript/jscomp/PhaseOptimizer;
     316: invokestatic  #45                 // Method com/google/javascript/jscomp/PhaseOptimizer.access$1700:(Lcom/google/javascript/jscomp/PhaseOptimizer;)Z
     319: ifeq          346
     322: aload_0
     323: getfield      #2                  // Field this$0:Lcom/google/javascript/jscomp/PhaseOptimizer;
     326: iconst_0
     327: invokestatic  #20                 // Method com/google/javascript/jscomp/PhaseOptimizer.access$1402:(Lcom/google/javascript/jscomp/PhaseOptimizer;Z)Z
     330: pop
     331: aload_0
     332: getfield      #2                  // Field this$0:Lcom/google/javascript/jscomp/PhaseOptimizer;
     335: invokestatic  #25                 // Method com/google/javascript/jscomp/PhaseOptimizer.access$400:(Lcom/google/javascript/jscomp/PhaseOptimizer;)Lcom/google/javascript/jscomp/AbstractCompiler;
     338: aload_0
     339: getfield      #24                 // Field scopeHandler:Lcom/google/javascript/jscomp/PhaseOptimizer$ScopedChangeHandler;
     342: invokevirtual #46                 // Method com/google/javascript/jscomp/AbstractCompiler.removeChangeHandler:(Lcom/google/javascript/jscomp/CodeChangeHandler;)V
     345: return
     346: aload_0
     347: getfield      #24                 // Field scopeHandler:Lcom/google/javascript/jscomp/PhaseOptimizer$ScopedChangeHandler;
     350: invokestatic  #47                 // Method com/google/javascript/jscomp/PhaseOptimizer$ScopedChangeHandler.access$1800:(Lcom/google/javascript/jscomp/PhaseOptimizer$ScopedChangeHandler;)Z
     353: ifeq          371
     356: aload_3
     357: aload         9
     359: invokeinterface #13,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
     364: pop
     365: iconst_1
     366: istore        6
     368: goto          393
     371: aload_3
     372: aload         9
     374: invokeinterface #48,  2           // InterfaceMethod java/util/Set.remove:(Ljava/lang/Object;)Z
     379: pop
     380: goto          393
     383: aload         4
     385: aload         9
     387: invokeinterface #48,  2           // InterfaceMethod java/util/Set.remove:(Ljava/lang/Object;)Z
     392: pop
     393: goto          191
     396: aload         5
     398: getstatic     #37                 // Field com/google/javascript/jscomp/PhaseOptimizer$State.RUN_PASSES_NOT_RUN_IN_PREV_ITER:Lcom/google/javascript/jscomp/PhaseOptimizer$State;
     401: if_acmpne     441
     404: iload         6
     406: ifeq          417
     409: getstatic     #40                 // Field com/google/javascript/jscomp/PhaseOptimizer$State.RUN_PASSES_THAT_CHANGED_STH_IN_PREV_ITER:Lcom/google/javascript/jscomp/PhaseOptimizer$State;
     412: astore        5
     414: goto          154
     417: aload_0
     418: getfield      #2                  // Field this$0:Lcom/google/javascript/jscomp/PhaseOptimizer;
     421: iconst_0
     422: invokestatic  #20                 // Method com/google/javascript/jscomp/PhaseOptimizer.access$1402:(Lcom/google/javascript/jscomp/PhaseOptimizer;Z)Z
     425: pop
     426: aload_0
     427: getfield      #2                  // Field this$0:Lcom/google/javascript/jscomp/PhaseOptimizer;
     430: invokestatic  #25                 // Method com/google/javascript/jscomp/PhaseOptimizer.access$400:(Lcom/google/javascript/jscomp/PhaseOptimizer;)Lcom/google/javascript/jscomp/AbstractCompiler;
     433: aload_0
     434: getfield      #24                 // Field scopeHandler:Lcom/google/javascript/jscomp/PhaseOptimizer$ScopedChangeHandler;
     437: invokevirtual #46                 // Method com/google/javascript/jscomp/AbstractCompiler.removeChangeHandler:(Lcom/google/javascript/jscomp/CodeChangeHandler;)V
     440: return
     441: iload         6
     443: ifne          154
     446: getstatic     #37                 // Field com/google/javascript/jscomp/PhaseOptimizer$State.RUN_PASSES_NOT_RUN_IN_PREV_ITER:Lcom/google/javascript/jscomp/PhaseOptimizer$State;
     449: astore        5
     451: goto          154
     454: astore        10
     456: aload_0
     457: getfield      #2                  // Field this$0:Lcom/google/javascript/jscomp/PhaseOptimizer;
     460: iconst_0
     461: invokestatic  #20                 // Method com/google/javascript/jscomp/PhaseOptimizer.access$1402:(Lcom/google/javascript/jscomp/PhaseOptimizer;Z)Z
     464: pop
     465: aload_0
     466: getfield      #2                  // Field this$0:Lcom/google/javascript/jscomp/PhaseOptimizer;
     469: invokestatic  #25                 // Method com/google/javascript/jscomp/PhaseOptimizer.access$400:(Lcom/google/javascript/jscomp/PhaseOptimizer;)Lcom/google/javascript/jscomp/AbstractCompiler;
     472: aload_0
     473: getfield      #24                 // Field scopeHandler:Lcom/google/javascript/jscomp/PhaseOptimizer$ScopedChangeHandler;
     476: invokevirtual #46                 // Method com/google/javascript/jscomp/AbstractCompiler.removeChangeHandler:(Lcom/google/javascript/jscomp/CodeChangeHandler;)V
     479: aload         10
     481: athrow
    Exception table:
       from    to  target type
         154   322   454   any
         346   417   454   any
         441   456   454   any

  private void optimizePasses();
    Code:
       0: invokestatic  #4                  // Method com/google/common/collect/Lists.newArrayList:()Ljava/util/ArrayList;
       3: astore_1
       4: getstatic     #49                 // Field com/google/javascript/jscomp/PhaseOptimizer.OPTIMAL_ORDER:Ljava/util/List;
       7: invokeinterface #31,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      12: astore_2
      13: aload_2
      14: invokeinterface #32,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      19: ifeq          95
      22: aload_2
      23: invokeinterface #33,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      28: checkcast     #50                 // class java/lang/String
      31: astore_3
      32: aload_0
      33: getfield      #5                  // Field myPasses:Ljava/util/List;
      36: invokeinterface #31,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      41: astore        4
      43: aload         4
      45: invokeinterface #32,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      50: ifeq          92
      53: aload         4
      55: invokeinterface #33,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      60: checkcast     #14                 // class com/google/javascript/jscomp/PhaseOptimizer$NamedPass
      63: astore        5
      65: aload         5
      67: getfield      #51                 // Field com/google/javascript/jscomp/PhaseOptimizer$NamedPass.name:Ljava/lang/String;
      70: aload_3
      71: invokevirtual #52                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      74: ifeq          89
      77: aload_1
      78: aload         5
      80: invokeinterface #16,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      85: pop
      86: goto          92
      89: goto          43
      92: goto          13
      95: aload_0
      96: getfield      #5                  // Field myPasses:Ljava/util/List;
      99: aload_1
     100: invokeinterface #53,  2           // InterfaceMethod java/util/List.removeAll:(Ljava/util/Collection;)Z
     105: pop
     106: aload_0
     107: getfield      #5                  // Field myPasses:Ljava/util/List;
     110: aload_1
     111: invokeinterface #54,  2           // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
     116: pop
     117: return
}
