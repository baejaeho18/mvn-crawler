Compiled from "CodePrinter.java"
class com.google.javascript.jscomp.CodePrinter$PrettyCodePrinter extends com.google.javascript.jscomp.CodePrinter$MappedCodePrinter {
  static final java.lang.String INDENT;

  private int indent;

  private com.google.javascript.jscomp.CodePrinter$PrettyCodePrinter(int, boolean, com.google.javascript.jscomp.SourceMap$DetailLevel);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: aload_3
       4: invokespecial #2                  // Method com/google/javascript/jscomp/CodePrinter$MappedCodePrinter."<init>":(IZLcom/google/javascript/jscomp/SourceMap$DetailLevel;)V
       7: aload_0
       8: iconst_0
       9: putfield      #3                  // Field indent:I
      12: return

  void append(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #4                  // Field lineLength:I
       4: ifne          47
       7: iconst_0
       8: istore_2
       9: iload_2
      10: aload_0
      11: getfield      #3                  // Field indent:I
      14: if_icmpge     47
      17: aload_0
      18: getfield      #5                  // Field code:Ljava/lang/StringBuilder;
      21: ldc           #7                  // String
      23: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: pop
      27: aload_0
      28: dup
      29: getfield      #4                  // Field lineLength:I
      32: ldc           #7                  // String
      34: invokevirtual #9                  // Method java/lang/String.length:()I
      37: iadd
      38: putfield      #4                  // Field lineLength:I
      41: iinc          2, 1
      44: goto          9
      47: aload_0
      48: getfield      #5                  // Field code:Ljava/lang/StringBuilder;
      51: aload_1
      52: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      55: pop
      56: aload_0
      57: dup
      58: getfield      #4                  // Field lineLength:I
      61: aload_1
      62: invokevirtual #9                  // Method java/lang/String.length:()I
      65: iadd
      66: putfield      #4                  // Field lineLength:I
      69: return

  void startNewLine();
    Code:
       0: aload_0
       1: getfield      #4                  // Field lineLength:I
       4: ifle          32
       7: aload_0
       8: getfield      #5                  // Field code:Ljava/lang/StringBuilder;
      11: bipush        10
      13: invokevirtual #10                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      16: pop
      17: aload_0
      18: dup
      19: getfield      #11                 // Field lineIndex:I
      22: iconst_1
      23: iadd
      24: putfield      #11                 // Field lineIndex:I
      27: aload_0
      28: iconst_0
      29: putfield      #4                  // Field lineLength:I
      32: return

  void maybeLineBreak();
    Code:
       0: aload_0
       1: invokevirtual #12                 // Method maybeCutLine:()V
       4: return

  void maybeCutLine();
    Code:
       0: aload_0
       1: getfield      #4                  // Field lineLength:I
       4: aload_0
       5: getfield      #13                 // Field lineLengthThreshold:I
       8: if_icmple     15
      11: aload_0
      12: invokevirtual #14                 // Method startNewLine:()V
      15: return

  void endLine();
    Code:
       0: aload_0
       1: invokevirtual #14                 // Method startNewLine:()V
       4: return

  void appendBlockStart();
    Code:
       0: aload_0
       1: ldc           #15                 // String  {
       3: invokevirtual #16                 // Method append:(Ljava/lang/String;)V
       6: aload_0
       7: dup
       8: getfield      #3                  // Field indent:I
      11: iconst_1
      12: iadd
      13: putfield      #3                  // Field indent:I
      16: return

  void appendBlockEnd();
    Code:
       0: aload_0
       1: invokevirtual #17                 // Method maybeEndStatement:()V
       4: aload_0
       5: invokevirtual #18                 // Method endLine:()V
       8: aload_0
       9: dup
      10: getfield      #3                  // Field indent:I
      13: iconst_1
      14: isub
      15: putfield      #3                  // Field indent:I
      18: aload_0
      19: ldc           #19                 // String }
      21: invokevirtual #16                 // Method append:(Ljava/lang/String;)V
      24: return

  void listSeparator();
    Code:
       0: aload_0
       1: ldc           #20                 // String ,
       3: invokevirtual #21                 // Method add:(Ljava/lang/String;)V
       6: aload_0
       7: invokevirtual #22                 // Method maybeLineBreak:()V
      10: return

  void endFunction(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #23                 // Method com/google/javascript/jscomp/CodePrinter$MappedCodePrinter.endFunction:(Z)V
       5: iload_1
       6: ifeq          13
       9: aload_0
      10: invokevirtual #14                 // Method startNewLine:()V
      13: return

  void beginCaseBody();
    Code:
       0: aload_0
       1: invokespecial #24                 // Method com/google/javascript/jscomp/CodePrinter$MappedCodePrinter.beginCaseBody:()V
       4: aload_0
       5: dup
       6: getfield      #3                  // Field indent:I
       9: iconst_1
      10: iadd
      11: putfield      #3                  // Field indent:I
      14: aload_0
      15: invokevirtual #18                 // Method endLine:()V
      18: return

  void endCaseBody();
    Code:
       0: aload_0
       1: invokespecial #25                 // Method com/google/javascript/jscomp/CodePrinter$MappedCodePrinter.endCaseBody:()V
       4: aload_0
       5: dup
       6: getfield      #3                  // Field indent:I
       9: iconst_1
      10: isub
      11: putfield      #3                  // Field indent:I
      14: aload_0
      15: invokevirtual #26                 // Method endStatement:()V
      18: return

  void appendOp(java.lang.String, boolean);
    Code:
       0: iload_2
       1: ifeq          43
       4: aload_0
       5: invokevirtual #27                 // Method getLastChar:()C
       8: bipush        32
      10: if_icmpeq     29
      13: aload_1
      14: iconst_0
      15: invokevirtual #28                 // Method java/lang/String.charAt:(I)C
      18: bipush        44
      20: if_icmpeq     29
      23: aload_0
      24: ldc           #29                 // String
      26: invokevirtual #16                 // Method append:(Ljava/lang/String;)V
      29: aload_0
      30: aload_1
      31: invokevirtual #16                 // Method append:(Ljava/lang/String;)V
      34: aload_0
      35: ldc           #29                 // String
      37: invokevirtual #16                 // Method append:(Ljava/lang/String;)V
      40: goto          48
      43: aload_0
      44: aload_1
      45: invokevirtual #16                 // Method append:(Ljava/lang/String;)V
      48: return

  boolean shouldPreserveExtraBlocks();
    Code:
       0: iconst_1
       1: ireturn

  void maybeInsertSpace();
    Code:
       0: aload_0
       1: ldc           #29                 // String
       3: invokevirtual #21                 // Method add:(Ljava/lang/String;)V
       6: return

  private static com.google.javascript.rhino.Node getTryForCatch(com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: invokevirtual #30                 // Method com/google/javascript/rhino/Node.getParent:()Lcom/google/javascript/rhino/Node;
       4: invokevirtual #30                 // Method com/google/javascript/rhino/Node.getParent:()Lcom/google/javascript/rhino/Node;
       7: areturn

  boolean breakAfterBlockFor(com.google.javascript.rhino.Node, boolean);
    Code:
       0: aload_1
       1: invokevirtual #31                 // Method com/google/javascript/rhino/Node.isBlock:()Z
       4: invokestatic  #32                 // Method com/google/common/base/Preconditions.checkState:(Z)V
       7: aload_1
       8: invokevirtual #30                 // Method com/google/javascript/rhino/Node.getParent:()Lcom/google/javascript/rhino/Node;
      11: astore_3
      12: aload_3
      13: ifnull        124
      16: aload_3
      17: invokevirtual #33                 // Method com/google/javascript/rhino/Node.getType:()I
      20: istore        4
      22: iload         4
      24: lookupswitch  { // 5
                    77: 80
                   105: 78
                   108: 110
                   114: 76
                   120: 94
               default: 124
          }
      76: iconst_0
      77: ireturn
      78: iconst_0
      79: ireturn
      80: aload_1
      81: aload_3
      82: invokevirtual #34                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
      85: if_acmpeq     92
      88: iconst_1
      89: goto          93
      92: iconst_0
      93: ireturn
      94: aload_3
      95: invokestatic  #35                 // Method getTryForCatch:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
      98: invokestatic  #36                 // Method com/google/javascript/jscomp/NodeUtil.hasFinally:(Lcom/google/javascript/rhino/Node;)Z
     101: ifne          108
     104: iconst_1
     105: goto          109
     108: iconst_0
     109: ireturn
     110: aload_1
     111: aload_3
     112: invokevirtual #37                 // Method com/google/javascript/rhino/Node.getLastChild:()Lcom/google/javascript/rhino/Node;
     115: if_acmpne     122
     118: iconst_1
     119: goto          123
     122: iconst_0
     123: ireturn
     124: iconst_1
     125: ireturn

  void endFile();
    Code:
       0: aload_0
       1: invokevirtual #17                 // Method maybeEndStatement:()V
       4: return

  com.google.javascript.jscomp.CodePrinter$PrettyCodePrinter(int, boolean, com.google.javascript.jscomp.SourceMap$DetailLevel, com.google.javascript.jscomp.CodePrinter$1);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: aload_3
       4: invokespecial #1                  // Method "<init>":(IZLcom/google/javascript/jscomp/SourceMap$DetailLevel;)V
       7: return
}
