Compiled from "InlineFunctions.java"
class com.google.javascript.jscomp.InlineFunctions$FunctionState {
  private com.google.javascript.jscomp.InlineFunctions$Function fn;

  private com.google.javascript.rhino.Node safeFnNode;

  private boolean inline;

  private boolean remove;

  private boolean inlineDirectly;

  private boolean referencesThis;

  private boolean hasInnerFunctions;

  private java.util.Map<com.google.javascript.rhino.Node, com.google.javascript.jscomp.InlineFunctions$Reference> references;

  private com.google.javascript.jscomp.JSModule module;

  private java.util.Set<java.lang.String> namesToAlias;

  private com.google.javascript.jscomp.InlineFunctions$FunctionState();
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #3                  // Field fn:Lcom/google/javascript/jscomp/InlineFunctions$Function;
       9: aload_0
      10: aconst_null
      11: putfield      #4                  // Field safeFnNode:Lcom/google/javascript/rhino/Node;
      14: aload_0
      15: iconst_1
      16: putfield      #5                  // Field inline:Z
      19: aload_0
      20: iconst_1
      21: putfield      #6                  // Field remove:Z
      24: aload_0
      25: iconst_0
      26: putfield      #7                  // Field inlineDirectly:Z
      29: aload_0
      30: iconst_0
      31: putfield      #8                  // Field referencesThis:Z
      34: aload_0
      35: iconst_0
      36: putfield      #9                  // Field hasInnerFunctions:Z
      39: aload_0
      40: aconst_null
      41: putfield      #10                 // Field references:Ljava/util/Map;
      44: aload_0
      45: aconst_null
      46: putfield      #11                 // Field module:Lcom/google/javascript/jscomp/JSModule;
      49: aload_0
      50: aconst_null
      51: putfield      #12                 // Field namesToAlias:Ljava/util/Set;
      54: return

  boolean hasExistingFunctionDefinition();
    Code:
       0: aload_0
       1: getfield      #3                  // Field fn:Lcom/google/javascript/jscomp/InlineFunctions$Function;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public void setReferencesThis(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #8                  // Field referencesThis:Z
       5: return

  public boolean getReferencesThis();
    Code:
       0: aload_0
       1: getfield      #8                  // Field referencesThis:Z
       4: ireturn

  public void setHasInnerFunctions(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #9                  // Field hasInnerFunctions:Z
       5: return

  public boolean hasInnerFunctions();
    Code:
       0: aload_0
       1: getfield      #9                  // Field hasInnerFunctions:Z
       4: ireturn

  void removeBlockInliningReferences();
    Code:
       0: aload_0
       1: invokespecial #13                 // Method getReferencesInternal:()Ljava/util/Map;
       4: invokeinterface #14,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
       9: invokeinterface #15,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      14: astore_1
      15: aload_1
      16: invokeinterface #16,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          61
      24: aload_1
      25: invokeinterface #17,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #18                 // class java/util/Map$Entry
      33: astore_2
      34: aload_2
      35: invokeinterface #19,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      40: checkcast     #20                 // class com/google/javascript/jscomp/InlineFunctions$Reference
      43: getfield      #21                 // Field com/google/javascript/jscomp/InlineFunctions$Reference.mode:Lcom/google/javascript/jscomp/FunctionInjector$InliningMode;
      46: getstatic     #22                 // Field com/google/javascript/jscomp/FunctionInjector$InliningMode.BLOCK:Lcom/google/javascript/jscomp/FunctionInjector$InliningMode;
      49: if_acmpne     58
      52: aload_1
      53: invokeinterface #23,  1           // InterfaceMethod java/util/Iterator.remove:()V
      58: goto          15
      61: return

  public boolean hasBlockInliningReferences();
    Code:
       0: aload_0
       1: invokespecial #13                 // Method getReferencesInternal:()Ljava/util/Map;
       4: invokeinterface #24,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
       9: invokeinterface #25,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      14: astore_1
      15: aload_1
      16: invokeinterface #16,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          49
      24: aload_1
      25: invokeinterface #17,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #20                 // class com/google/javascript/jscomp/InlineFunctions$Reference
      33: astore_2
      34: aload_2
      35: getfield      #21                 // Field com/google/javascript/jscomp/InlineFunctions$Reference.mode:Lcom/google/javascript/jscomp/FunctionInjector$InliningMode;
      38: getstatic     #22                 // Field com/google/javascript/jscomp/FunctionInjector$InliningMode.BLOCK:Lcom/google/javascript/jscomp/FunctionInjector$InliningMode;
      41: if_acmpne     46
      44: iconst_1
      45: ireturn
      46: goto          15
      49: iconst_0
      50: ireturn

  public com.google.javascript.jscomp.InlineFunctions$Function getFn();
    Code:
       0: aload_0
       1: getfield      #3                  // Field fn:Lcom/google/javascript/jscomp/InlineFunctions$Function;
       4: areturn

  public void setFn(com.google.javascript.jscomp.InlineFunctions$Function);
    Code:
       0: aload_0
       1: getfield      #3                  // Field fn:Lcom/google/javascript/jscomp/InlineFunctions$Function;
       4: ifnonnull     11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: invokestatic  #26                 // Method com/google/common/base/Preconditions.checkState:(Z)V
      15: aload_0
      16: aload_1
      17: putfield      #3                  // Field fn:Lcom/google/javascript/jscomp/InlineFunctions$Function;
      20: return

  public com.google.javascript.rhino.Node getSafeFnNode();
    Code:
       0: aload_0
       1: getfield      #4                  // Field safeFnNode:Lcom/google/javascript/rhino/Node;
       4: ifnull        14
       7: aload_0
       8: getfield      #4                  // Field safeFnNode:Lcom/google/javascript/rhino/Node;
      11: goto          23
      14: aload_0
      15: getfield      #3                  // Field fn:Lcom/google/javascript/jscomp/InlineFunctions$Function;
      18: invokeinterface #27,  1           // InterfaceMethod com/google/javascript/jscomp/InlineFunctions$Function.getFunctionNode:()Lcom/google/javascript/rhino/Node;
      23: areturn

  public void setSafeFnNode(com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field safeFnNode:Lcom/google/javascript/rhino/Node;
       5: return

  public boolean canInline();
    Code:
       0: aload_0
       1: getfield      #5                  // Field inline:Z
       4: ireturn

  public void setInline(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #5                  // Field inline:Z
       5: iload_1
       6: ifne          19
       9: aload_0
      10: aconst_null
      11: putfield      #10                 // Field references:Ljava/util/Map;
      14: aload_0
      15: iconst_0
      16: putfield      #6                  // Field remove:Z
      19: return

  public boolean canRemove();
    Code:
       0: aload_0
       1: getfield      #6                  // Field remove:Z
       4: ireturn

  public void setRemove(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #6                  // Field remove:Z
       5: return

  public boolean canInlineDirectly();
    Code:
       0: aload_0
       1: getfield      #7                  // Field inlineDirectly:Z
       4: ireturn

  public void inlineDirectly(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #7                  // Field inlineDirectly:Z
       5: return

  public boolean hasReferences();
    Code:
       0: aload_0
       1: getfield      #10                 // Field references:Ljava/util/Map;
       4: ifnull        23
       7: aload_0
       8: getfield      #10                 // Field references:Ljava/util/Map;
      11: invokeinterface #28,  1           // InterfaceMethod java/util/Map.isEmpty:()Z
      16: ifne          23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: ireturn

  private java.util.Map<com.google.javascript.rhino.Node, com.google.javascript.jscomp.InlineFunctions$Reference> getReferencesInternal();
    Code:
       0: aload_0
       1: getfield      #10                 // Field references:Ljava/util/Map;
       4: ifnonnull     11
       7: invokestatic  #29                 // Method java/util/Collections.emptyMap:()Ljava/util/Map;
      10: areturn
      11: aload_0
      12: getfield      #10                 // Field references:Ljava/util/Map;
      15: areturn

  public void addReference(com.google.javascript.jscomp.InlineFunctions$Reference);
    Code:
       0: aload_0
       1: getfield      #10                 // Field references:Ljava/util/Map;
       4: ifnonnull     18
       7: aload_0
       8: new           #30                 // class java/util/LinkedHashMap
      11: dup
      12: invokespecial #31                 // Method java/util/LinkedHashMap."<init>":()V
      15: putfield      #10                 // Field references:Ljava/util/Map;
      18: aload_0
      19: getfield      #10                 // Field references:Ljava/util/Map;
      22: aload_1
      23: getfield      #32                 // Field com/google/javascript/jscomp/InlineFunctions$Reference.callNode:Lcom/google/javascript/rhino/Node;
      26: aload_1
      27: invokeinterface #33,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      32: pop
      33: return

  public java.util.Collection<com.google.javascript.jscomp.InlineFunctions$Reference> getReferences();
    Code:
       0: aload_0
       1: invokespecial #13                 // Method getReferencesInternal:()Ljava/util/Map;
       4: invokeinterface #24,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
       9: areturn

  public com.google.javascript.jscomp.InlineFunctions$Reference getReference(com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: invokespecial #13                 // Method getReferencesInternal:()Ljava/util/Map;
       4: aload_1
       5: invokeinterface #34,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #20                 // class com/google/javascript/jscomp/InlineFunctions$Reference
      13: areturn

  public java.util.Set<java.lang.String> getNamesToAlias();
    Code:
       0: aload_0
       1: getfield      #12                 // Field namesToAlias:Ljava/util/Set;
       4: ifnonnull     11
       7: invokestatic  #35                 // Method java/util/Collections.emptySet:()Ljava/util/Set;
      10: areturn
      11: aload_0
      12: getfield      #12                 // Field namesToAlias:Ljava/util/Set;
      15: invokestatic  #36                 // Method java/util/Collections.unmodifiableSet:(Ljava/util/Set;)Ljava/util/Set;
      18: areturn

  public void setNamesToAlias(java.util.Set<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #12                 // Field namesToAlias:Ljava/util/Set;
       5: return

  public void setModule(com.google.javascript.jscomp.JSModule);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #11                 // Field module:Lcom/google/javascript/jscomp/JSModule;
       5: return

  public com.google.javascript.jscomp.JSModule getModule();
    Code:
       0: aload_0
       1: getfield      #11                 // Field module:Lcom/google/javascript/jscomp/JSModule;
       4: areturn

  com.google.javascript.jscomp.InlineFunctions$FunctionState(com.google.javascript.jscomp.InlineFunctions$1);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method "<init>":()V
       4: return
}
