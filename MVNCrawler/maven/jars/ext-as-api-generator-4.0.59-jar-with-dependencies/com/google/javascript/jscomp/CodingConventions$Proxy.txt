Compiled from "CodingConventions.java"
public class com.google.javascript.jscomp.CodingConventions$Proxy implements com.google.javascript.jscomp.CodingConvention {
  protected final com.google.javascript.jscomp.CodingConvention nextConvention;

  protected com.google.javascript.jscomp.CodingConventions$Proxy(com.google.javascript.jscomp.CodingConvention);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field nextConvention:Lcom/google/javascript/jscomp/CodingConvention;
       9: return

  public boolean isConstant(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #2                  // Field nextConvention:Lcom/google/javascript/jscomp/CodingConvention;
       4: aload_1
       5: invokeinterface #3,  2            // InterfaceMethod com/google/javascript/jscomp/CodingConvention.isConstant:(Ljava/lang/String;)Z
      10: ireturn

  public boolean isConstantKey(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #2                  // Field nextConvention:Lcom/google/javascript/jscomp/CodingConvention;
       4: aload_1
       5: invokeinterface #4,  2            // InterfaceMethod com/google/javascript/jscomp/CodingConvention.isConstantKey:(Ljava/lang/String;)Z
      10: ireturn

  public boolean isValidEnumKey(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #2                  // Field nextConvention:Lcom/google/javascript/jscomp/CodingConvention;
       4: aload_1
       5: invokeinterface #5,  2            // InterfaceMethod com/google/javascript/jscomp/CodingConvention.isValidEnumKey:(Ljava/lang/String;)Z
      10: ireturn

  public boolean isOptionalParameter(com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: getfield      #2                  // Field nextConvention:Lcom/google/javascript/jscomp/CodingConvention;
       4: aload_1
       5: invokeinterface #6,  2            // InterfaceMethod com/google/javascript/jscomp/CodingConvention.isOptionalParameter:(Lcom/google/javascript/rhino/Node;)Z
      10: ireturn

  public boolean isVarArgsParameter(com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: getfield      #2                  // Field nextConvention:Lcom/google/javascript/jscomp/CodingConvention;
       4: aload_1
       5: invokeinterface #7,  2            // InterfaceMethod com/google/javascript/jscomp/CodingConvention.isVarArgsParameter:(Lcom/google/javascript/rhino/Node;)Z
      10: ireturn

  public boolean isFunctionCallThatAlwaysThrows(com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: getfield      #2                  // Field nextConvention:Lcom/google/javascript/jscomp/CodingConvention;
       4: aload_1
       5: invokeinterface #8,  2            // InterfaceMethod com/google/javascript/jscomp/CodingConvention.isFunctionCallThatAlwaysThrows:(Lcom/google/javascript/rhino/Node;)Z
      10: ireturn

  public boolean isExported(java.lang.String, boolean);
    Code:
       0: aload_0
       1: getfield      #2                  // Field nextConvention:Lcom/google/javascript/jscomp/CodingConvention;
       4: aload_1
       5: iload_2
       6: invokeinterface #9,  3            // InterfaceMethod com/google/javascript/jscomp/CodingConvention.isExported:(Ljava/lang/String;Z)Z
      11: ireturn

  public java.lang.String getPackageName(com.google.javascript.rhino.jstype.StaticSourceFile);
    Code:
       0: aload_0
       1: getfield      #2                  // Field nextConvention:Lcom/google/javascript/jscomp/CodingConvention;
       4: aload_1
       5: invokeinterface #10,  2           // InterfaceMethod com/google/javascript/jscomp/CodingConvention.getPackageName:(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)Ljava/lang/String;
      10: areturn

  public final boolean isExported(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: invokevirtual #11                 // Method isExported:(Ljava/lang/String;Z)Z
       6: ifne          18
       9: aload_0
      10: aload_1
      11: iconst_1
      12: invokevirtual #11                 // Method isExported:(Ljava/lang/String;Z)Z
      15: ifeq          22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: ireturn

  public boolean isPrivate(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #2                  // Field nextConvention:Lcom/google/javascript/jscomp/CodingConvention;
       4: aload_1
       5: invokeinterface #12,  2           // InterfaceMethod com/google/javascript/jscomp/CodingConvention.isPrivate:(Ljava/lang/String;)Z
      10: ireturn

  public com.google.javascript.jscomp.CodingConvention$SubclassRelationship getClassesDefinedByCall(com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: getfield      #2                  // Field nextConvention:Lcom/google/javascript/jscomp/CodingConvention;
       4: aload_1
       5: invokeinterface #13,  2           // InterfaceMethod com/google/javascript/jscomp/CodingConvention.getClassesDefinedByCall:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/jscomp/CodingConvention$SubclassRelationship;
      10: areturn

  public boolean isSuperClassReference(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #2                  // Field nextConvention:Lcom/google/javascript/jscomp/CodingConvention;
       4: aload_1
       5: invokeinterface #14,  2           // InterfaceMethod com/google/javascript/jscomp/CodingConvention.isSuperClassReference:(Ljava/lang/String;)Z
      10: ireturn

  public boolean extractIsModuleFile(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: getfield      #2                  // Field nextConvention:Lcom/google/javascript/jscomp/CodingConvention;
       4: aload_1
       5: aload_2
       6: invokeinterface #15,  3           // InterfaceMethod com/google/javascript/jscomp/CodingConvention.extractIsModuleFile:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)Z
      11: ireturn

  public java.lang.String extractClassNameIfProvide(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: getfield      #2                  // Field nextConvention:Lcom/google/javascript/jscomp/CodingConvention;
       4: aload_1
       5: aload_2
       6: invokeinterface #16,  3           // InterfaceMethod com/google/javascript/jscomp/CodingConvention.extractClassNameIfProvide:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)Ljava/lang/String;
      11: areturn

  public java.lang.String extractClassNameIfRequire(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: getfield      #2                  // Field nextConvention:Lcom/google/javascript/jscomp/CodingConvention;
       4: aload_1
       5: aload_2
       6: invokeinterface #17,  3           // InterfaceMethod com/google/javascript/jscomp/CodingConvention.extractClassNameIfRequire:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)Ljava/lang/String;
      11: areturn

  public java.lang.String getExportPropertyFunction();
    Code:
       0: aload_0
       1: getfield      #2                  // Field nextConvention:Lcom/google/javascript/jscomp/CodingConvention;
       4: invokeinterface #18,  1           // InterfaceMethod com/google/javascript/jscomp/CodingConvention.getExportPropertyFunction:()Ljava/lang/String;
       9: areturn

  public java.lang.String getExportSymbolFunction();
    Code:
       0: aload_0
       1: getfield      #2                  // Field nextConvention:Lcom/google/javascript/jscomp/CodingConvention;
       4: invokeinterface #19,  1           // InterfaceMethod com/google/javascript/jscomp/CodingConvention.getExportSymbolFunction:()Ljava/lang/String;
       9: areturn

  public java.util.List<java.lang.String> identifyTypeDeclarationCall(com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: getfield      #2                  // Field nextConvention:Lcom/google/javascript/jscomp/CodingConvention;
       4: aload_1
       5: invokeinterface #20,  2           // InterfaceMethod com/google/javascript/jscomp/CodingConvention.identifyTypeDeclarationCall:(Lcom/google/javascript/rhino/Node;)Ljava/util/List;
      10: areturn

  public void applySubclassRelationship(com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.jscomp.CodingConvention$SubclassType);
    Code:
       0: aload_0
       1: getfield      #2                  // Field nextConvention:Lcom/google/javascript/jscomp/CodingConvention;
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokeinterface #21,  4           // InterfaceMethod com/google/javascript/jscomp/CodingConvention.applySubclassRelationship:(Lcom/google/javascript/rhino/jstype/FunctionType;Lcom/google/javascript/rhino/jstype/FunctionType;Lcom/google/javascript/jscomp/CodingConvention$SubclassType;)V
      12: return

  public java.lang.String getAbstractMethodName();
    Code:
       0: aload_0
       1: getfield      #2                  // Field nextConvention:Lcom/google/javascript/jscomp/CodingConvention;
       4: invokeinterface #22,  1           // InterfaceMethod com/google/javascript/jscomp/CodingConvention.getAbstractMethodName:()Ljava/lang/String;
       9: areturn

  public java.lang.String getSingletonGetterClassName(com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: getfield      #2                  // Field nextConvention:Lcom/google/javascript/jscomp/CodingConvention;
       4: aload_1
       5: invokeinterface #23,  2           // InterfaceMethod com/google/javascript/jscomp/CodingConvention.getSingletonGetterClassName:(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;
      10: areturn

  public void applySingletonGetter(com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.ObjectType);
    Code:
       0: aload_0
       1: getfield      #2                  // Field nextConvention:Lcom/google/javascript/jscomp/CodingConvention;
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokeinterface #24,  4           // InterfaceMethod com/google/javascript/jscomp/CodingConvention.applySingletonGetter:(Lcom/google/javascript/rhino/jstype/FunctionType;Lcom/google/javascript/rhino/jstype/FunctionType;Lcom/google/javascript/rhino/jstype/ObjectType;)V
      12: return

  public boolean isInlinableFunction(com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: getfield      #2                  // Field nextConvention:Lcom/google/javascript/jscomp/CodingConvention;
       4: aload_1
       5: invokeinterface #25,  2           // InterfaceMethod com/google/javascript/jscomp/CodingConvention.isInlinableFunction:(Lcom/google/javascript/rhino/Node;)Z
      10: ireturn

  public com.google.javascript.jscomp.CodingConvention$DelegateRelationship getDelegateRelationship(com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: getfield      #2                  // Field nextConvention:Lcom/google/javascript/jscomp/CodingConvention;
       4: aload_1
       5: invokeinterface #26,  2           // InterfaceMethod com/google/javascript/jscomp/CodingConvention.getDelegateRelationship:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/jscomp/CodingConvention$DelegateRelationship;
      10: areturn

  public void applyDelegateRelationship(com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.FunctionType);
    Code:
       0: aload_0
       1: getfield      #2                  // Field nextConvention:Lcom/google/javascript/jscomp/CodingConvention;
       4: aload_1
       5: aload_2
       6: aload_3
       7: aload         4
       9: aload         5
      11: invokeinterface #27,  6           // InterfaceMethod com/google/javascript/jscomp/CodingConvention.applyDelegateRelationship:(Lcom/google/javascript/rhino/jstype/ObjectType;Lcom/google/javascript/rhino/jstype/ObjectType;Lcom/google/javascript/rhino/jstype/ObjectType;Lcom/google/javascript/rhino/jstype/FunctionType;Lcom/google/javascript/rhino/jstype/FunctionType;)V
      16: return

  public java.lang.String getDelegateSuperclassName();
    Code:
       0: aload_0
       1: getfield      #2                  // Field nextConvention:Lcom/google/javascript/jscomp/CodingConvention;
       4: invokeinterface #28,  1           // InterfaceMethod com/google/javascript/jscomp/CodingConvention.getDelegateSuperclassName:()Ljava/lang/String;
       9: areturn

  public void checkForCallingConventionDefiningCalls(com.google.javascript.rhino.Node, java.util.Map<java.lang.String, java.lang.String>);
    Code:
       0: aload_0
       1: getfield      #2                  // Field nextConvention:Lcom/google/javascript/jscomp/CodingConvention;
       4: aload_1
       5: aload_2
       6: invokeinterface #29,  3           // InterfaceMethod com/google/javascript/jscomp/CodingConvention.checkForCallingConventionDefiningCalls:(Lcom/google/javascript/rhino/Node;Ljava/util/Map;)V
      11: return

  public void defineDelegateProxyPrototypeProperties(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>, java.util.List<com.google.javascript.rhino.jstype.ObjectType>, java.util.Map<java.lang.String, java.lang.String>);
    Code:
       0: aload_0
       1: getfield      #2                  // Field nextConvention:Lcom/google/javascript/jscomp/CodingConvention;
       4: aload_1
       5: aload_2
       6: aload_3
       7: aload         4
       9: invokeinterface #30,  5           // InterfaceMethod com/google/javascript/jscomp/CodingConvention.defineDelegateProxyPrototypeProperties:(Lcom/google/javascript/rhino/jstype/JSTypeRegistry;Lcom/google/javascript/rhino/jstype/StaticScope;Ljava/util/List;Ljava/util/Map;)V
      14: return

  public java.lang.String getGlobalObject();
    Code:
       0: aload_0
       1: getfield      #2                  // Field nextConvention:Lcom/google/javascript/jscomp/CodingConvention;
       4: invokeinterface #31,  1           // InterfaceMethod com/google/javascript/jscomp/CodingConvention.getGlobalObject:()Ljava/lang/String;
       9: areturn

  public java.util.Collection<com.google.javascript.jscomp.CodingConvention$AssertionFunctionSpec> getAssertionFunctions();
    Code:
       0: aload_0
       1: getfield      #2                  // Field nextConvention:Lcom/google/javascript/jscomp/CodingConvention;
       4: invokeinterface #32,  1           // InterfaceMethod com/google/javascript/jscomp/CodingConvention.getAssertionFunctions:()Ljava/util/Collection;
       9: areturn

  public com.google.javascript.jscomp.CodingConvention$Bind describeFunctionBind(com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: iconst_0
       4: invokevirtual #33                 // Method describeFunctionBind:(Lcom/google/javascript/rhino/Node;ZZ)Lcom/google/javascript/jscomp/CodingConvention$Bind;
       7: areturn

  public com.google.javascript.jscomp.CodingConvention$Bind describeFunctionBind(com.google.javascript.rhino.Node, boolean, boolean);
    Code:
       0: aload_0
       1: getfield      #2                  // Field nextConvention:Lcom/google/javascript/jscomp/CodingConvention;
       4: aload_1
       5: iload_2
       6: iload_3
       7: invokeinterface #34,  4           // InterfaceMethod com/google/javascript/jscomp/CodingConvention.describeFunctionBind:(Lcom/google/javascript/rhino/Node;ZZ)Lcom/google/javascript/jscomp/CodingConvention$Bind;
      12: areturn

  public boolean isPropertyTestFunction(com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: getfield      #2                  // Field nextConvention:Lcom/google/javascript/jscomp/CodingConvention;
       4: aload_1
       5: invokeinterface #35,  2           // InterfaceMethod com/google/javascript/jscomp/CodingConvention.isPropertyTestFunction:(Lcom/google/javascript/rhino/Node;)Z
      10: ireturn

  public boolean isPrototypeAlias(com.google.javascript.rhino.Node);
    Code:
       0: iconst_0
       1: ireturn

  public com.google.javascript.jscomp.CodingConvention$ObjectLiteralCast getObjectLiteralCast(com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: getfield      #2                  // Field nextConvention:Lcom/google/javascript/jscomp/CodingConvention;
       4: aload_1
       5: invokeinterface #36,  2           // InterfaceMethod com/google/javascript/jscomp/CodingConvention.getObjectLiteralCast:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/jscomp/CodingConvention$ObjectLiteralCast;
      10: areturn

  public java.util.Collection<java.lang.String> getIndirectlyDeclaredProperties();
    Code:
       0: aload_0
       1: getfield      #2                  // Field nextConvention:Lcom/google/javascript/jscomp/CodingConvention;
       4: invokeinterface #37,  1           // InterfaceMethod com/google/javascript/jscomp/CodingConvention.getIndirectlyDeclaredProperties:()Ljava/util/Collection;
       9: areturn
}
