Compiled from "SymbolTable.java"
class com.google.javascript.jscomp.SymbolTable$PropertyRefCollector extends com.google.javascript.jscomp.NodeTraversal$AbstractPostOrderCallback implements com.google.javascript.jscomp.CompilerPass {
  private final com.google.javascript.jscomp.AbstractCompiler compiler;

  final com.google.javascript.jscomp.SymbolTable this$0;

  com.google.javascript.jscomp.SymbolTable$PropertyRefCollector(com.google.javascript.jscomp.SymbolTable, com.google.javascript.jscomp.AbstractCompiler);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lcom/google/javascript/jscomp/SymbolTable;
       5: aload_0
       6: invokespecial #2                  // Method com/google/javascript/jscomp/NodeTraversal$AbstractPostOrderCallback."<init>":()V
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
      14: return

  public void process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: getfield      #3                  // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
       4: iconst_2
       5: anewarray     #4                  // class com/google/javascript/rhino/Node
       8: dup
       9: iconst_0
      10: aload_1
      11: aastore
      12: dup
      13: iconst_1
      14: aload_2
      15: aastore
      16: invokestatic  #5                  // Method com/google/common/collect/Lists.newArrayList:([Ljava/lang/Object;)Ljava/util/ArrayList;
      19: aload_0
      20: invokestatic  #6                  // Method com/google/javascript/jscomp/NodeTraversal.traverseRoots:(Lcom/google/javascript/jscomp/AbstractCompiler;Ljava/util/List;Lcom/google/javascript/jscomp/NodeTraversal$Callback;)V
      23: return

  private boolean maybeDefineReference(com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.jscomp.SymbolTable$Symbol);
    Code:
       0: aload_3
       1: ifnull        35
       4: aload_3
       5: invokevirtual #7                  // Method com/google/javascript/jscomp/SymbolTable$Symbol.getPropertyScope:()Lcom/google/javascript/jscomp/SymbolTable$SymbolScope;
       8: ifnull        35
      11: aload_3
      12: invokevirtual #7                  // Method com/google/javascript/jscomp/SymbolTable$Symbol.getPropertyScope:()Lcom/google/javascript/jscomp/SymbolTable$SymbolScope;
      15: aload_2
      16: invokevirtual #8                  // Method com/google/javascript/jscomp/SymbolTable$SymbolScope.getSlot:(Ljava/lang/String;)Lcom/google/javascript/jscomp/SymbolTable$Symbol;
      19: astore        4
      21: aload         4
      23: ifnull        35
      26: aload         4
      28: aload_1
      29: invokevirtual #9                  // Method com/google/javascript/jscomp/SymbolTable$Symbol.defineReferenceAt:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/jscomp/SymbolTable$Reference;
      32: pop
      33: iconst_1
      34: ireturn
      35: iconst_0
      36: ireturn

  private boolean tryDefineLexicalQualifiedNameRef(java.lang.String, com.google.javascript.rhino.Node);
    Code:
       0: aload_1
       1: ifnull        29
       4: aload_0
       5: getfield      #1                  // Field this$0:Lcom/google/javascript/jscomp/SymbolTable;
       8: aload_2
       9: invokevirtual #10                 // Method com/google/javascript/jscomp/SymbolTable.getEnclosingScope:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/jscomp/SymbolTable$SymbolScope;
      12: aload_1
      13: invokevirtual #11                 // Method com/google/javascript/jscomp/SymbolTable$SymbolScope.getQualifiedSlot:(Ljava/lang/String;)Lcom/google/javascript/jscomp/SymbolTable$Symbol;
      16: astore_3
      17: aload_3
      18: ifnull        29
      21: aload_3
      22: aload_2
      23: invokevirtual #9                  // Method com/google/javascript/jscomp/SymbolTable$Symbol.defineReferenceAt:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/jscomp/SymbolTable$Reference;
      26: pop
      27: iconst_1
      28: ireturn
      29: iconst_0
      30: ireturn

  private void tryRemoveLexicalQualifiedNameRef(java.lang.String, com.google.javascript.rhino.Node);
    Code:
       0: aload_1
       1: ifnull        47
       4: aload_0
       5: getfield      #1                  // Field this$0:Lcom/google/javascript/jscomp/SymbolTable;
       8: aload_2
       9: invokevirtual #10                 // Method com/google/javascript/jscomp/SymbolTable.getEnclosingScope:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/jscomp/SymbolTable$SymbolScope;
      12: aload_1
      13: invokevirtual #11                 // Method com/google/javascript/jscomp/SymbolTable$SymbolScope.getQualifiedSlot:(Ljava/lang/String;)Lcom/google/javascript/jscomp/SymbolTable$Symbol;
      16: astore_3
      17: aload_3
      18: ifnull        47
      21: aload_3
      22: invokevirtual #12                 // Method com/google/javascript/jscomp/SymbolTable$Symbol.isLexicalVariable:()Z
      25: ifeq          47
      28: aload_3
      29: invokevirtual #13                 // Method com/google/javascript/jscomp/SymbolTable$Symbol.getDeclaration:()Lcom/google/javascript/jscomp/SymbolTable$Reference;
      32: invokevirtual #14                 // Method com/google/javascript/jscomp/SymbolTable$Reference.getNode:()Lcom/google/javascript/rhino/Node;
      35: aload_2
      36: if_acmpne     47
      39: aload_0
      40: getfield      #1                  // Field this$0:Lcom/google/javascript/jscomp/SymbolTable;
      43: aload_3
      44: invokestatic  #15                 // Method com/google/javascript/jscomp/SymbolTable.access$900:(Lcom/google/javascript/jscomp/SymbolTable;Lcom/google/javascript/jscomp/SymbolTable$Symbol;)V
      47: return

  private boolean maybeDefineTypedReference(com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.rhino.jstype.JSType);
    Code:
       0: aload_3
       1: invokevirtual #16                 // Method com/google/javascript/rhino/jstype/JSType.isGlobalThisType:()Z
       4: ifeq          37
       7: aload_0
       8: getfield      #1                  // Field this$0:Lcom/google/javascript/jscomp/SymbolTable;
      11: invokestatic  #17                 // Method com/google/javascript/jscomp/SymbolTable.access$1000:(Lcom/google/javascript/jscomp/SymbolTable;)Lcom/google/javascript/jscomp/SymbolTable$SymbolScope;
      14: aload_2
      15: invokevirtual #8                  // Method com/google/javascript/jscomp/SymbolTable$SymbolScope.getSlot:(Ljava/lang/String;)Lcom/google/javascript/jscomp/SymbolTable$Symbol;
      18: astore        4
      20: aload         4
      22: ifnull        34
      25: aload         4
      27: aload_1
      28: invokevirtual #9                  // Method com/google/javascript/jscomp/SymbolTable$Symbol.defineReferenceAt:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/jscomp/SymbolTable$Reference;
      31: pop
      32: iconst_1
      33: ireturn
      34: goto          154
      37: aload_3
      38: invokevirtual #18                 // Method com/google/javascript/rhino/jstype/JSType.isNominalConstructor:()Z
      41: ifeq          62
      44: aload_0
      45: aload_1
      46: aload_2
      47: aload_0
      48: getfield      #1                  // Field this$0:Lcom/google/javascript/jscomp/SymbolTable;
      51: aload_3
      52: invokevirtual #19                 // Method com/google/javascript/rhino/jstype/JSType.toMaybeFunctionType:()Lcom/google/javascript/rhino/jstype/FunctionType;
      55: invokevirtual #20                 // Method com/google/javascript/jscomp/SymbolTable.getSymbolDeclaredBy:(Lcom/google/javascript/rhino/jstype/FunctionType;)Lcom/google/javascript/jscomp/SymbolTable$Symbol;
      58: invokespecial #21                 // Method maybeDefineReference:(Lcom/google/javascript/rhino/Node;Ljava/lang/String;Lcom/google/javascript/jscomp/SymbolTable$Symbol;)Z
      61: ireturn
      62: aload_3
      63: invokevirtual #22                 // Method com/google/javascript/rhino/jstype/JSType.isEnumType:()Z
      66: ifeq          87
      69: aload_0
      70: aload_1
      71: aload_2
      72: aload_0
      73: getfield      #1                  // Field this$0:Lcom/google/javascript/jscomp/SymbolTable;
      76: aload_3
      77: invokevirtual #23                 // Method com/google/javascript/rhino/jstype/JSType.toMaybeEnumType:()Lcom/google/javascript/rhino/jstype/EnumType;
      80: invokevirtual #24                 // Method com/google/javascript/jscomp/SymbolTable.getSymbolDeclaredBy:(Lcom/google/javascript/rhino/jstype/EnumType;)Lcom/google/javascript/jscomp/SymbolTable$Symbol;
      83: invokespecial #21                 // Method maybeDefineReference:(Lcom/google/javascript/rhino/Node;Ljava/lang/String;Lcom/google/javascript/jscomp/SymbolTable$Symbol;)Z
      86: ireturn
      87: iconst_0
      88: istore        4
      90: aload_0
      91: getfield      #1                  // Field this$0:Lcom/google/javascript/jscomp/SymbolTable;
      94: aload_3
      95: invokevirtual #25                 // Method com/google/javascript/jscomp/SymbolTable.getAllSymbolsForType:(Lcom/google/javascript/rhino/jstype/JSType;)Ljava/util/List;
      98: invokeinterface #26,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     103: astore        5
     105: aload         5
     107: invokeinterface #27,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     112: ifeq          151
     115: aload         5
     117: invokeinterface #28,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     122: checkcast     #29                 // class com/google/javascript/jscomp/SymbolTable$Symbol
     125: astore        6
     127: aload_0
     128: aload_1
     129: aload_2
     130: aload_0
     131: getfield      #1                  // Field this$0:Lcom/google/javascript/jscomp/SymbolTable;
     134: aload         6
     136: invokevirtual #30                 // Method com/google/javascript/jscomp/SymbolTable.getSymbolForInstancesOf:(Lcom/google/javascript/jscomp/SymbolTable$Symbol;)Lcom/google/javascript/jscomp/SymbolTable$Symbol;
     139: invokespecial #21                 // Method maybeDefineReference:(Lcom/google/javascript/rhino/Node;Ljava/lang/String;Lcom/google/javascript/jscomp/SymbolTable$Symbol;)Z
     142: ifeq          148
     145: iconst_1
     146: istore        4
     148: goto          105
     151: iload         4
     153: ireturn
     154: iconst_0
     155: ireturn

  public void visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node);
    Code:
       0: aload_2
       1: invokevirtual #31                 // Method com/google/javascript/rhino/Node.isGetProp:()Z
       4: ifeq          65
       7: aload_2
       8: invokevirtual #32                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
      11: invokevirtual #33                 // Method com/google/javascript/rhino/Node.getJSType:()Lcom/google/javascript/rhino/jstype/JSType;
      14: astore        4
      16: aload         4
      18: ifnull        52
      21: aload_0
      22: aload_2
      23: aload_2
      24: invokevirtual #34                 // Method com/google/javascript/rhino/Node.getLastChild:()Lcom/google/javascript/rhino/Node;
      27: invokevirtual #35                 // Method com/google/javascript/rhino/Node.getString:()Ljava/lang/String;
      30: aload         4
      32: invokespecial #36                 // Method maybeDefineTypedReference:(Lcom/google/javascript/rhino/Node;Ljava/lang/String;Lcom/google/javascript/rhino/jstype/JSType;)Z
      35: istore        5
      37: iload         5
      39: ifeq          52
      42: aload_0
      43: aload_2
      44: invokevirtual #37                 // Method com/google/javascript/rhino/Node.getQualifiedName:()Ljava/lang/String;
      47: aload_2
      48: invokespecial #38                 // Method tryRemoveLexicalQualifiedNameRef:(Ljava/lang/String;Lcom/google/javascript/rhino/Node;)V
      51: return
      52: aload_0
      53: aload_2
      54: invokevirtual #37                 // Method com/google/javascript/rhino/Node.getQualifiedName:()Ljava/lang/String;
      57: aload_2
      58: invokespecial #39                 // Method tryDefineLexicalQualifiedNameRef:(Ljava/lang/String;Lcom/google/javascript/rhino/Node;)Z
      61: pop
      62: goto          121
      65: aload_2
      66: invokevirtual #40                 // Method com/google/javascript/rhino/Node.isStringKey:()Z
      69: ifeq          121
      72: aload_3
      73: invokevirtual #33                 // Method com/google/javascript/rhino/Node.getJSType:()Lcom/google/javascript/rhino/jstype/JSType;
      76: astore        4
      78: aload         4
      80: ifnull        111
      83: aload_0
      84: aload_2
      85: aload_2
      86: invokevirtual #35                 // Method com/google/javascript/rhino/Node.getString:()Ljava/lang/String;
      89: aload         4
      91: invokespecial #36                 // Method maybeDefineTypedReference:(Lcom/google/javascript/rhino/Node;Ljava/lang/String;Lcom/google/javascript/rhino/jstype/JSType;)Z
      94: istore        5
      96: iload         5
      98: ifeq          111
     101: aload_0
     102: aload_2
     103: invokestatic  #41                 // Method com/google/javascript/jscomp/NodeUtil.getBestLValueName:(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;
     106: aload_2
     107: invokespecial #38                 // Method tryRemoveLexicalQualifiedNameRef:(Ljava/lang/String;Lcom/google/javascript/rhino/Node;)V
     110: return
     111: aload_0
     112: aload_2
     113: invokestatic  #41                 // Method com/google/javascript/jscomp/NodeUtil.getBestLValueName:(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;
     116: aload_2
     117: invokespecial #39                 // Method tryDefineLexicalQualifiedNameRef:(Ljava/lang/String;Lcom/google/javascript/rhino/Node;)Z
     120: pop
     121: return
}
