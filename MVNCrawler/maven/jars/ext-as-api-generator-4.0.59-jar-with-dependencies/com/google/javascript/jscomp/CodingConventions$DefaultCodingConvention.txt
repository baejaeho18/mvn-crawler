Compiled from "CodingConventions.java"
class com.google.javascript.jscomp.CodingConventions$DefaultCodingConvention implements com.google.javascript.jscomp.CodingConvention {
  private static final long serialVersionUID;

  private com.google.javascript.jscomp.CodingConventions$DefaultCodingConvention();
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: return

  public boolean isConstant(java.lang.String);
    Code:
       0: iconst_0
       1: ireturn

  public boolean isConstantKey(java.lang.String);
    Code:
       0: iconst_0
       1: ireturn

  public boolean isValidEnumKey(java.lang.String);
    Code:
       0: aload_1
       1: ifnull        15
       4: aload_1
       5: invokevirtual #3                  // Method java/lang/String.length:()I
       8: ifle          15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  public boolean isOptionalParameter(com.google.javascript.rhino.Node);
    Code:
       0: aload_1
       1: invokevirtual #4                  // Method com/google/javascript/rhino/Node.isOptionalArg:()Z
       4: ireturn

  public boolean isVarArgsParameter(com.google.javascript.rhino.Node);
    Code:
       0: aload_1
       1: invokevirtual #5                  // Method com/google/javascript/rhino/Node.isVarArgs:()Z
       4: ireturn

  public boolean isFunctionCallThatAlwaysThrows(com.google.javascript.rhino.Node);
    Code:
       0: iconst_0
       1: ireturn

  public java.lang.String getPackageName(com.google.javascript.rhino.jstype.StaticSourceFile);
    Code:
       0: aload_1
       1: invokeinterface #6,  1            // InterfaceMethod com/google/javascript/rhino/jstype/StaticSourceFile.getName:()Ljava/lang/String;
       6: astore_2
       7: aload_2
       8: bipush        47
      10: invokevirtual #7                  // Method java/lang/String.lastIndexOf:(I)I
      13: istore_3
      14: iload_3
      15: iconst_m1
      16: if_icmpne     24
      19: ldc           #8                  // String
      21: goto          30
      24: aload_2
      25: iconst_0
      26: iload_3
      27: invokevirtual #9                  // Method java/lang/String.substring:(II)Ljava/lang/String;
      30: areturn

  public boolean isExported(java.lang.String, boolean);
    Code:
       0: iload_2
       1: ifeq          17
       4: aload_1
       5: ldc           #10                 // String $super
       7: invokevirtual #11                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      10: ifeq          17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ireturn

  public boolean isExported(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: invokevirtual #12                 // Method isExported:(Ljava/lang/String;Z)Z
       6: ifne          18
       9: aload_0
      10: aload_1
      11: iconst_1
      12: invokevirtual #12                 // Method isExported:(Ljava/lang/String;Z)Z
      15: ifeq          22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: ireturn

  public boolean isPrivate(java.lang.String);
    Code:
       0: iconst_0
       1: ireturn

  public com.google.javascript.jscomp.CodingConvention$SubclassRelationship getClassesDefinedByCall(com.google.javascript.rhino.Node);
    Code:
       0: aconst_null
       1: areturn

  public boolean isSuperClassReference(java.lang.String);
    Code:
       0: iconst_0
       1: ireturn

  public boolean extractIsModuleFile(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node);
    Code:
       0: ldc           #13                 // String only implemented in ClosureCodingConvention
       2: astore_3
       3: new           #14                 // class java/lang/UnsupportedOperationException
       6: dup
       7: aload_3
       8: invokespecial #15                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
      11: athrow

  public java.lang.String extractClassNameIfProvide(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node);
    Code:
       0: ldc           #13                 // String only implemented in ClosureCodingConvention
       2: astore_3
       3: new           #14                 // class java/lang/UnsupportedOperationException
       6: dup
       7: aload_3
       8: invokespecial #15                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
      11: athrow

  public java.lang.String extractClassNameIfRequire(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node);
    Code:
       0: ldc           #13                 // String only implemented in ClosureCodingConvention
       2: astore_3
       3: new           #14                 // class java/lang/UnsupportedOperationException
       6: dup
       7: aload_3
       8: invokespecial #15                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
      11: athrow

  public java.lang.String getExportPropertyFunction();
    Code:
       0: aconst_null
       1: areturn

  public java.lang.String getExportSymbolFunction();
    Code:
       0: aconst_null
       1: areturn

  public java.util.List<java.lang.String> identifyTypeDeclarationCall(com.google.javascript.rhino.Node);
    Code:
       0: aconst_null
       1: areturn

  public void applySubclassRelationship(com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.jscomp.CodingConvention$SubclassType);
    Code:
       0: return

  public java.lang.String getAbstractMethodName();
    Code:
       0: aconst_null
       1: areturn

  public java.lang.String getSingletonGetterClassName(com.google.javascript.rhino.Node);
    Code:
       0: aconst_null
       1: areturn

  public void applySingletonGetter(com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.ObjectType);
    Code:
       0: return

  public boolean isInlinableFunction(com.google.javascript.rhino.Node);
    Code:
       0: aload_1
       1: invokevirtual #16                 // Method com/google/javascript/rhino/Node.isFunction:()Z
       4: invokestatic  #17                 // Method com/google/common/base/Preconditions.checkState:(Z)V
       7: iconst_1
       8: ireturn

  public com.google.javascript.jscomp.CodingConvention$DelegateRelationship getDelegateRelationship(com.google.javascript.rhino.Node);
    Code:
       0: aconst_null
       1: areturn

  public void applyDelegateRelationship(com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.FunctionType);
    Code:
       0: return

  public java.lang.String getDelegateSuperclassName();
    Code:
       0: aconst_null
       1: areturn

  public void checkForCallingConventionDefiningCalls(com.google.javascript.rhino.Node, java.util.Map<java.lang.String, java.lang.String>);
    Code:
       0: return

  public void defineDelegateProxyPrototypeProperties(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>, java.util.List<com.google.javascript.rhino.jstype.ObjectType>, java.util.Map<java.lang.String, java.lang.String>);
    Code:
       0: return

  public java.lang.String getGlobalObject();
    Code:
       0: ldc           #18                 // String window
       2: areturn

  public boolean isPropertyTestFunction(com.google.javascript.rhino.Node);
    Code:
       0: iconst_0
       1: ireturn

  public boolean isPrototypeAlias(com.google.javascript.rhino.Node);
    Code:
       0: iconst_0
       1: ireturn

  public com.google.javascript.jscomp.CodingConvention$ObjectLiteralCast getObjectLiteralCast(com.google.javascript.rhino.Node);
    Code:
       0: aconst_null
       1: areturn

  public java.util.Collection<com.google.javascript.jscomp.CodingConvention$AssertionFunctionSpec> getAssertionFunctions();
    Code:
       0: invokestatic  #19                 // Method java/util/Collections.emptySet:()Ljava/util/Set;
       3: areturn

  public com.google.javascript.jscomp.CodingConvention$Bind describeFunctionBind(com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: iconst_0
       4: invokevirtual #20                 // Method describeFunctionBind:(Lcom/google/javascript/rhino/Node;ZZ)Lcom/google/javascript/jscomp/CodingConvention$Bind;
       7: areturn

  public com.google.javascript.jscomp.CodingConvention$Bind describeFunctionBind(com.google.javascript.rhino.Node, boolean, boolean);
    Code:
       0: aload_1
       1: invokevirtual #21                 // Method com/google/javascript/rhino/Node.isCall:()Z
       4: ifne          9
       7: aconst_null
       8: areturn
       9: aload_1
      10: invokevirtual #22                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
      13: astore        4
      15: aload         4
      17: invokevirtual #23                 // Method com/google/javascript/rhino/Node.isQualifiedName:()Z
      20: ifeq          75
      23: aload         4
      25: ldc           #24                 // String Function.prototype.bind.call
      27: invokevirtual #25                 // Method com/google/javascript/rhino/Node.matchesQualifiedName:(Ljava/lang/String;)Z
      30: ifeq          75
      33: aload         4
      35: invokevirtual #26                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
      38: astore        5
      40: aload         5
      42: ifnonnull     47
      45: aconst_null
      46: areturn
      47: aload         5
      49: invokestatic  #27                 // Method safeNext:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
      52: astore        6
      54: aload         6
      56: invokestatic  #27                 // Method safeNext:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
      59: astore        7
      61: new           #28                 // class com/google/javascript/jscomp/CodingConvention$Bind
      64: dup
      65: aload         5
      67: aload         6
      69: aload         7
      71: invokespecial #29                 // Method com/google/javascript/jscomp/CodingConvention$Bind."<init>":(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V
      74: areturn
      75: aload         4
      77: invokevirtual #30                 // Method com/google/javascript/rhino/Node.isGetProp:()Z
      80: ifeq          180
      83: aload         4
      85: invokevirtual #31                 // Method com/google/javascript/rhino/Node.getLastChild:()Lcom/google/javascript/rhino/Node;
      88: invokevirtual #32                 // Method com/google/javascript/rhino/Node.getString:()Ljava/lang/String;
      91: ldc           #33                 // String bind
      93: invokevirtual #34                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      96: ifeq          180
      99: aload         4
     101: invokevirtual #22                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
     104: astore        5
     106: aload         5
     108: invokevirtual #35                 // Method com/google/javascript/rhino/Node.getJSType:()Lcom/google/javascript/rhino/jstype/JSType;
     111: astore        6
     113: aconst_null
     114: astore        7
     116: iload_3
     117: ifeq          135
     120: aload         6
     122: ifnull        135
     125: aload         6
     127: invokevirtual #36                 // Method com/google/javascript/rhino/jstype/JSType.restrictByNotNullOrUndefined:()Lcom/google/javascript/rhino/jstype/JSType;
     130: invokevirtual #37                 // Method com/google/javascript/rhino/jstype/JSType.toMaybeFunctionType:()Lcom/google/javascript/rhino/jstype/FunctionType;
     133: astore        7
     135: aload         7
     137: ifnonnull     152
     140: iload_2
     141: ifne          152
     144: aload         5
     146: invokevirtual #16                 // Method com/google/javascript/rhino/Node.isFunction:()Z
     149: ifeq          180
     152: aload         4
     154: invokevirtual #26                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
     157: astore        8
     159: aload         8
     161: invokestatic  #27                 // Method safeNext:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
     164: astore        9
     166: new           #28                 // class com/google/javascript/jscomp/CodingConvention$Bind
     169: dup
     170: aload         5
     172: aload         8
     174: aload         9
     176: invokespecial #29                 // Method com/google/javascript/jscomp/CodingConvention$Bind."<init>":(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V
     179: areturn
     180: aconst_null
     181: areturn

  public java.util.Collection<java.lang.String> getIndirectlyDeclaredProperties();
    Code:
       0: invokestatic  #38                 // Method com/google/common/collect/ImmutableList.of:()Lcom/google/common/collect/ImmutableList;
       3: areturn

  private static com.google.javascript.rhino.Node safeNext(com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: ifnull        9
       4: aload_0
       5: invokevirtual #26                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
       8: areturn
       9: aconst_null
      10: areturn

  com.google.javascript.jscomp.CodingConventions$DefaultCodingConvention(com.google.javascript.jscomp.CodingConventions$1);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method "<init>":()V
       4: return
}
