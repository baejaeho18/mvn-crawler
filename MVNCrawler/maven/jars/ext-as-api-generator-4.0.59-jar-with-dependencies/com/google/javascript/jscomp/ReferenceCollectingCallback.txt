Compiled from "ReferenceCollectingCallback.java"
class com.google.javascript.jscomp.ReferenceCollectingCallback implements com.google.javascript.jscomp.NodeTraversal$ScopedCallback, com.google.javascript.jscomp.HotSwapCompilerPass, com.google.javascript.rhino.jstype.StaticSymbolTable<com.google.javascript.jscomp.Scope$Var, com.google.javascript.jscomp.ReferenceCollectingCallback$Reference> {
  private final java.util.Map<com.google.javascript.jscomp.Scope$Var, com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection> referenceMap;

  private java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback$BasicBlock> blockStack;

  private final com.google.javascript.jscomp.ReferenceCollectingCallback$Behavior behavior;

  private final com.google.javascript.jscomp.AbstractCompiler compiler;

  private final com.google.common.base.Predicate<com.google.javascript.jscomp.Scope$Var> varFilter;

  private final java.util.Set<com.google.javascript.jscomp.Scope$Var> startedFunctionTraverse;

  private final java.util.Set<com.google.javascript.jscomp.Scope$Var> finishedFunctionTraverse;

  private com.google.javascript.jscomp.Scope narrowScope;

  static final com.google.javascript.jscomp.ReferenceCollectingCallback$Behavior DO_NOTHING_BEHAVIOR;

  com.google.javascript.jscomp.ReferenceCollectingCallback(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.ReferenceCollectingCallback$Behavior);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1                  // Method com/google/common/base/Predicates.alwaysTrue:()Lcom/google/common/base/Predicate;
       6: invokespecial #2                  // Method "<init>":(Lcom/google/javascript/jscomp/AbstractCompiler;Lcom/google/javascript/jscomp/ReferenceCollectingCallback$Behavior;Lcom/google/common/base/Predicate;)V
       9: return

  com.google.javascript.jscomp.ReferenceCollectingCallback(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.ReferenceCollectingCallback$Behavior, com.google.common.base.Predicate<com.google.javascript.jscomp.Scope$Var>);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #4                  // Method com/google/common/collect/Maps.newLinkedHashMap:()Ljava/util/LinkedHashMap;
       8: putfield      #5                  // Field referenceMap:Ljava/util/Map;
      11: aload_0
      12: invokestatic  #6                  // Method com/google/common/collect/Lists.newArrayList:()Ljava/util/ArrayList;
      15: putfield      #7                  // Field blockStack:Ljava/util/List;
      18: aload_0
      19: invokestatic  #8                  // Method com/google/common/collect/Sets.newHashSet:()Ljava/util/HashSet;
      22: putfield      #9                  // Field startedFunctionTraverse:Ljava/util/Set;
      25: aload_0
      26: invokestatic  #8                  // Method com/google/common/collect/Sets.newHashSet:()Ljava/util/HashSet;
      29: putfield      #10                 // Field finishedFunctionTraverse:Ljava/util/Set;
      32: aload_0
      33: aload_1
      34: putfield      #11                 // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
      37: aload_0
      38: aload_2
      39: putfield      #12                 // Field behavior:Lcom/google/javascript/jscomp/ReferenceCollectingCallback$Behavior;
      42: aload_0
      43: aload_3
      44: putfield      #13                 // Field varFilter:Lcom/google/common/base/Predicate;
      47: return

  public void process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: getfield      #11                 // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
       4: iconst_2
       5: anewarray     #14                 // class com/google/javascript/rhino/Node
       8: dup
       9: iconst_0
      10: aload_1
      11: aastore
      12: dup
      13: iconst_1
      14: aload_2
      15: aastore
      16: invokestatic  #15                 // Method com/google/common/collect/Lists.newArrayList:([Ljava/lang/Object;)Ljava/util/ArrayList;
      19: aload_0
      20: invokestatic  #16                 // Method com/google/javascript/jscomp/NodeTraversal.traverseRoots:(Lcom/google/javascript/jscomp/AbstractCompiler;Ljava/util/List;Lcom/google/javascript/jscomp/NodeTraversal$Callback;)V
      23: return

  void processScope(com.google.javascript.jscomp.Scope);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #17                 // Field narrowScope:Lcom/google/javascript/jscomp/Scope;
       5: new           #18                 // class com/google/javascript/jscomp/NodeTraversal
       8: dup
       9: aload_0
      10: getfield      #11                 // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
      13: aload_0
      14: invokespecial #19                 // Method com/google/javascript/jscomp/NodeTraversal."<init>":(Lcom/google/javascript/jscomp/AbstractCompiler;Lcom/google/javascript/jscomp/NodeTraversal$Callback;)V
      17: aload_1
      18: invokevirtual #20                 // Method com/google/javascript/jscomp/NodeTraversal.traverseAtScope:(Lcom/google/javascript/jscomp/Scope;)V
      21: aload_0
      22: aconst_null
      23: putfield      #17                 // Field narrowScope:Lcom/google/javascript/jscomp/Scope;
      26: return

  public void hotSwapScript(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: getfield      #11                 // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
       4: aload_1
       5: aload_0
       6: invokestatic  #21                 // Method com/google/javascript/jscomp/NodeTraversal.traverse:(Lcom/google/javascript/jscomp/AbstractCompiler;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/NodeTraversal$Callback;)V
       9: return

  public java.lang.Iterable<com.google.javascript.jscomp.Scope$Var> getAllSymbols();
    Code:
       0: aload_0
       1: getfield      #5                  // Field referenceMap:Ljava/util/Map;
       4: invokeinterface #22,  1           // InterfaceMethod java/util/Map.keySet:()Ljava/util/Set;
       9: areturn

  public com.google.javascript.jscomp.Scope getScope(com.google.javascript.jscomp.Scope$Var);
    Code:
       0: aload_1
       1: getfield      #23                 // Field com/google/javascript/jscomp/Scope$Var.scope:Lcom/google/javascript/jscomp/Scope;
       4: areturn

  public com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection getReferences(com.google.javascript.jscomp.Scope$Var);
    Code:
       0: aload_0
       1: getfield      #5                  // Field referenceMap:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #24,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #25                 // class com/google/javascript/jscomp/ReferenceCollectingCallback$ReferenceCollection
      13: areturn

  public void visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node);
    Code:
       0: aload_2
       1: invokevirtual #26                 // Method com/google/javascript/rhino/Node.isName:()Z
       4: ifne          35
       7: aload_2
       8: invokevirtual #27                 // Method com/google/javascript/rhino/Node.isRest:()Z
      11: ifne          35
      14: aload_2
      15: invokevirtual #28                 // Method com/google/javascript/rhino/Node.isStringKey:()Z
      18: ifeq          166
      21: aload_3
      22: invokevirtual #29                 // Method com/google/javascript/rhino/Node.isObjectPattern:()Z
      25: ifeq          166
      28: aload_2
      29: invokevirtual #30                 // Method com/google/javascript/rhino/Node.hasChildren:()Z
      32: ifne          166
      35: aload_2
      36: invokevirtual #31                 // Method com/google/javascript/rhino/Node.getString:()Ljava/lang/String;
      39: ldc           #32                 // String arguments
      41: invokevirtual #33                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      44: ifeq          59
      47: aload_1
      48: invokevirtual #34                 // Method com/google/javascript/jscomp/NodeTraversal.getScope:()Lcom/google/javascript/jscomp/Scope;
      51: invokevirtual #35                 // Method com/google/javascript/jscomp/Scope.getArgumentsVar:()Lcom/google/javascript/jscomp/Scope$Var;
      54: astore        4
      56: goto          72
      59: aload_1
      60: invokevirtual #34                 // Method com/google/javascript/jscomp/NodeTraversal.getScope:()Lcom/google/javascript/jscomp/Scope;
      63: aload_2
      64: invokevirtual #31                 // Method com/google/javascript/rhino/Node.getString:()Ljava/lang/String;
      67: invokevirtual #36                 // Method com/google/javascript/jscomp/Scope.getVar:(Ljava/lang/String;)Lcom/google/javascript/jscomp/Scope$Var;
      70: astore        4
      72: aload         4
      74: ifnull        166
      77: aload_0
      78: getfield      #13                 // Field varFilter:Lcom/google/common/base/Predicate;
      81: aload         4
      83: invokeinterface #37,  2           // InterfaceMethod com/google/common/base/Predicate.apply:(Ljava/lang/Object;)Z
      88: ifeq          116
      91: aload_0
      92: aload         4
      94: new           #38                 // class com/google/javascript/jscomp/ReferenceCollectingCallback$Reference
      97: dup
      98: aload_2
      99: aload_1
     100: aload_0
     101: getfield      #7                  // Field blockStack:Ljava/util/List;
     104: invokestatic  #39                 // Method peek:(Ljava/util/List;)Ljava/lang/Object;
     107: checkcast     #40                 // class com/google/javascript/jscomp/ReferenceCollectingCallback$BasicBlock
     110: invokespecial #41                 // Method com/google/javascript/jscomp/ReferenceCollectingCallback$Reference."<init>":(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/NodeTraversal;Lcom/google/javascript/jscomp/ReferenceCollectingCallback$BasicBlock;)V
     113: invokespecial #42                 // Method addReference:(Lcom/google/javascript/jscomp/Scope$Var;Lcom/google/javascript/jscomp/ReferenceCollectingCallback$Reference;)V
     116: aload         4
     118: invokevirtual #43                 // Method com/google/javascript/jscomp/Scope$Var.getParentNode:()Lcom/google/javascript/rhino/Node;
     121: ifnull        166
     124: aload         4
     126: invokevirtual #43                 // Method com/google/javascript/jscomp/Scope$Var.getParentNode:()Lcom/google/javascript/rhino/Node;
     129: invokestatic  #44                 // Method com/google/javascript/jscomp/NodeUtil.isHoistedFunctionDeclaration:(Lcom/google/javascript/rhino/Node;)Z
     132: ifeq          166
     135: aload_0
     136: getfield      #17                 // Field narrowScope:Lcom/google/javascript/jscomp/Scope;
     139: ifnull        160
     142: aload_0
     143: getfield      #17                 // Field narrowScope:Lcom/google/javascript/jscomp/Scope;
     146: invokevirtual #45                 // Method com/google/javascript/jscomp/Scope.getDepth:()I
     149: aload         4
     151: invokevirtual #46                 // Method com/google/javascript/jscomp/Scope$Var.getScope:()Lcom/google/javascript/jscomp/Scope;
     154: invokevirtual #45                 // Method com/google/javascript/jscomp/Scope.getDepth:()I
     157: if_icmpgt     166
     160: aload_0
     161: aload         4
     163: invokespecial #47                 // Method outOfBandTraversal:(Lcom/google/javascript/jscomp/Scope$Var;)V
     166: aload_2
     167: aload_3
     168: invokestatic  #48                 // Method isBlockBoundary:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)Z
     171: ifeq          182
     174: aload_0
     175: getfield      #7                  // Field blockStack:Ljava/util/List;
     178: invokestatic  #49                 // Method pop:(Ljava/util/List;)Ljava/lang/Object;
     181: pop
     182: return

  private void outOfBandTraversal(com.google.javascript.jscomp.Scope$Var);
    Code:
       0: aload_0
       1: getfield      #9                  // Field startedFunctionTraverse:Ljava/util/Set;
       4: aload_1
       5: invokeinterface #50,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      10: ifeq          14
      13: return
      14: aload_0
      15: getfield      #9                  // Field startedFunctionTraverse:Ljava/util/Set;
      18: aload_1
      19: invokeinterface #51,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      24: pop
      25: aload_1
      26: invokevirtual #43                 // Method com/google/javascript/jscomp/Scope$Var.getParentNode:()Lcom/google/javascript/rhino/Node;
      29: astore_2
      30: aload_2
      31: invokestatic  #44                 // Method com/google/javascript/jscomp/NodeUtil.isHoistedFunctionDeclaration:(Lcom/google/javascript/rhino/Node;)Z
      34: invokestatic  #52                 // Method com/google/common/base/Preconditions.checkState:(Z)V
      37: aload_1
      38: invokevirtual #46                 // Method com/google/javascript/jscomp/Scope$Var.getScope:()Lcom/google/javascript/jscomp/Scope;
      41: astore_3
      42: aconst_null
      43: astore        4
      45: aload_3
      46: invokevirtual #53                 // Method com/google/javascript/jscomp/Scope.isGlobal:()Z
      49: ifeq          80
      52: iconst_1
      53: anewarray     #40                 // class com/google/javascript/jscomp/ReferenceCollectingCallback$BasicBlock
      56: dup
      57: iconst_0
      58: aload_0
      59: getfield      #7                  // Field blockStack:Ljava/util/List;
      62: iconst_0
      63: invokeinterface #54,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      68: checkcast     #40                 // class com/google/javascript/jscomp/ReferenceCollectingCallback$BasicBlock
      71: aastore
      72: invokestatic  #15                 // Method com/google/common/collect/Lists.newArrayList:([Ljava/lang/Object;)Ljava/util/ArrayList;
      75: astore        4
      77: goto          146
      80: iconst_0
      81: istore        5
      83: iload         5
      85: aload_0
      86: getfield      #7                  // Field blockStack:Ljava/util/List;
      89: invokeinterface #55,  1           // InterfaceMethod java/util/List.size:()I
      94: if_icmpge     146
      97: aload_0
      98: getfield      #7                  // Field blockStack:Ljava/util/List;
     101: iload         5
     103: invokeinterface #54,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
     108: checkcast     #40                 // class com/google/javascript/jscomp/ReferenceCollectingCallback$BasicBlock
     111: invokestatic  #56                 // Method com/google/javascript/jscomp/ReferenceCollectingCallback$BasicBlock.access$000:(Lcom/google/javascript/jscomp/ReferenceCollectingCallback$BasicBlock;)Lcom/google/javascript/rhino/Node;
     114: aload_3
     115: invokevirtual #57                 // Method com/google/javascript/jscomp/Scope.getRootNode:()Lcom/google/javascript/rhino/Node;
     118: if_acmpne     140
     121: aload_0
     122: getfield      #7                  // Field blockStack:Ljava/util/List;
     125: iconst_0
     126: iload         5
     128: iconst_1
     129: iadd
     130: invokeinterface #58,  3           // InterfaceMethod java/util/List.subList:(II)Ljava/util/List;
     135: invokestatic  #59                 // Method com/google/common/collect/Lists.newArrayList:(Ljava/lang/Iterable;)Ljava/util/ArrayList;
     138: astore        4
     140: iinc          5, 1
     143: goto          83
     146: aload         4
     148: invokestatic  #60                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
     151: pop
     152: aload_0
     153: getfield      #7                  // Field blockStack:Ljava/util/List;
     156: astore        5
     158: aload_0
     159: aload         4
     161: putfield      #7                  // Field blockStack:Ljava/util/List;
     164: new           #18                 // class com/google/javascript/jscomp/NodeTraversal
     167: dup
     168: aload_0
     169: getfield      #11                 // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
     172: aload_0
     173: invokespecial #19                 // Method com/google/javascript/jscomp/NodeTraversal."<init>":(Lcom/google/javascript/jscomp/AbstractCompiler;Lcom/google/javascript/jscomp/NodeTraversal$Callback;)V
     176: astore        6
     178: aload         6
     180: aload_2
     181: aload_3
     182: invokevirtual #61                 // Method com/google/javascript/jscomp/NodeTraversal.traverseFunctionOutOfBand:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/Scope;)V
     185: aload_0
     186: aload         5
     188: putfield      #7                  // Field blockStack:Ljava/util/List;
     191: aload_0
     192: getfield      #10                 // Field finishedFunctionTraverse:Ljava/util/Set;
     195: aload_1
     196: invokeinterface #51,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
     201: pop
     202: return

  public void enterScope(com.google.javascript.jscomp.NodeTraversal);
    Code:
       0: aload_1
       1: invokevirtual #34                 // Method com/google/javascript/jscomp/NodeTraversal.getScope:()Lcom/google/javascript/jscomp/Scope;
       4: invokevirtual #57                 // Method com/google/javascript/jscomp/Scope.getRootNode:()Lcom/google/javascript/rhino/Node;
       7: astore_2
       8: aload_0
       9: getfield      #7                  // Field blockStack:Ljava/util/List;
      12: invokeinterface #62,  1           // InterfaceMethod java/util/List.isEmpty:()Z
      17: ifeq          24
      20: aconst_null
      21: goto          34
      24: aload_0
      25: getfield      #7                  // Field blockStack:Ljava/util/List;
      28: invokestatic  #39                 // Method peek:(Ljava/util/List;)Ljava/lang/Object;
      31: checkcast     #40                 // class com/google/javascript/jscomp/ReferenceCollectingCallback$BasicBlock
      34: astore_3
      35: aload_0
      36: getfield      #7                  // Field blockStack:Ljava/util/List;
      39: new           #40                 // class com/google/javascript/jscomp/ReferenceCollectingCallback$BasicBlock
      42: dup
      43: aload_3
      44: aload_2
      45: invokespecial #63                 // Method com/google/javascript/jscomp/ReferenceCollectingCallback$BasicBlock."<init>":(Lcom/google/javascript/jscomp/ReferenceCollectingCallback$BasicBlock;Lcom/google/javascript/rhino/Node;)V
      48: invokeinterface #64,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      53: pop
      54: return

  public void exitScope(com.google.javascript.jscomp.NodeTraversal);
    Code:
       0: aload_0
       1: getfield      #7                  // Field blockStack:Ljava/util/List;
       4: invokestatic  #49                 // Method pop:(Ljava/util/List;)Ljava/lang/Object;
       7: pop
       8: aload_1
       9: invokevirtual #34                 // Method com/google/javascript/jscomp/NodeTraversal.getScope:()Lcom/google/javascript/jscomp/Scope;
      12: invokevirtual #53                 // Method com/google/javascript/jscomp/Scope.isGlobal:()Z
      15: ifeq          53
      18: aload_0
      19: getfield      #11                 // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
      22: aload_0
      23: getfield      #5                  // Field referenceMap:Ljava/util/Map;
      26: aload_1
      27: invokevirtual #65                 // Method com/google/javascript/jscomp/NodeTraversal.getScopeRoot:()Lcom/google/javascript/rhino/Node;
      30: invokevirtual #66                 // Method com/google/javascript/jscomp/AbstractCompiler.updateGlobalVarReferences:(Ljava/util/Map;Lcom/google/javascript/rhino/Node;)V
      33: aload_0
      34: getfield      #12                 // Field behavior:Lcom/google/javascript/jscomp/ReferenceCollectingCallback$Behavior;
      37: aload_1
      38: aload_0
      39: getfield      #11                 // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
      42: invokevirtual #67                 // Method com/google/javascript/jscomp/AbstractCompiler.getGlobalVarReferences:()Lcom/google/javascript/jscomp/GlobalVarReferenceMap;
      45: invokeinterface #68,  3           // InterfaceMethod com/google/javascript/jscomp/ReferenceCollectingCallback$Behavior.afterExitScope:(Lcom/google/javascript/jscomp/NodeTraversal;Lcom/google/javascript/jscomp/ReferenceCollectingCallback$ReferenceMap;)V
      50: goto          74
      53: aload_0
      54: getfield      #12                 // Field behavior:Lcom/google/javascript/jscomp/ReferenceCollectingCallback$Behavior;
      57: aload_1
      58: new           #69                 // class com/google/javascript/jscomp/ReferenceCollectingCallback$ReferenceMapWrapper
      61: dup
      62: aload_0
      63: getfield      #5                  // Field referenceMap:Ljava/util/Map;
      66: invokespecial #70                 // Method com/google/javascript/jscomp/ReferenceCollectingCallback$ReferenceMapWrapper."<init>":(Ljava/util/Map;)V
      69: invokeinterface #68,  3           // InterfaceMethod com/google/javascript/jscomp/ReferenceCollectingCallback$Behavior.afterExitScope:(Lcom/google/javascript/jscomp/NodeTraversal;Lcom/google/javascript/jscomp/ReferenceCollectingCallback$ReferenceMap;)V
      74: return

  public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node);
    Code:
       0: aload_2
       1: invokestatic  #44                 // Method com/google/javascript/jscomp/NodeUtil.isHoistedFunctionDeclaration:(Lcom/google/javascript/rhino/Node;)Z
       4: ifeq          60
       7: aload_2
       8: invokevirtual #71                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
      11: astore        4
      13: aload_1
      14: invokevirtual #34                 // Method com/google/javascript/jscomp/NodeTraversal.getScope:()Lcom/google/javascript/jscomp/Scope;
      17: aload         4
      19: invokevirtual #31                 // Method com/google/javascript/rhino/Node.getString:()Ljava/lang/String;
      22: invokevirtual #36                 // Method com/google/javascript/jscomp/Scope.getVar:(Ljava/lang/String;)Lcom/google/javascript/jscomp/Scope$Var;
      25: astore        5
      27: aload         5
      29: ifnull        60
      32: aload_0
      33: getfield      #10                 // Field finishedFunctionTraverse:Ljava/util/Set;
      36: aload         5
      38: invokeinterface #50,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      43: ifeq          48
      46: iconst_0
      47: ireturn
      48: aload_0
      49: getfield      #9                  // Field startedFunctionTraverse:Ljava/util/Set;
      52: aload         5
      54: invokeinterface #51,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      59: pop
      60: aload_2
      61: aload_3
      62: invokestatic  #48                 // Method isBlockBoundary:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)Z
      65: ifeq          96
      68: aload_0
      69: getfield      #7                  // Field blockStack:Ljava/util/List;
      72: new           #40                 // class com/google/javascript/jscomp/ReferenceCollectingCallback$BasicBlock
      75: dup
      76: aload_0
      77: getfield      #7                  // Field blockStack:Ljava/util/List;
      80: invokestatic  #39                 // Method peek:(Ljava/util/List;)Ljava/lang/Object;
      83: checkcast     #40                 // class com/google/javascript/jscomp/ReferenceCollectingCallback$BasicBlock
      86: aload_2
      87: invokespecial #63                 // Method com/google/javascript/jscomp/ReferenceCollectingCallback$BasicBlock."<init>":(Lcom/google/javascript/jscomp/ReferenceCollectingCallback$BasicBlock;Lcom/google/javascript/rhino/Node;)V
      90: invokeinterface #64,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      95: pop
      96: iconst_1
      97: ireturn

  private static <T> T pop(java.util.List<T>);
    Code:
       0: aload_0
       1: aload_0
       2: invokeinterface #55,  1           // InterfaceMethod java/util/List.size:()I
       7: iconst_1
       8: isub
       9: invokeinterface #72,  2           // InterfaceMethod java/util/List.remove:(I)Ljava/lang/Object;
      14: areturn

  private static <T> T peek(java.util.List<T>);
    Code:
       0: aload_0
       1: aload_0
       2: invokeinterface #55,  1           // InterfaceMethod java/util/List.size:()I
       7: iconst_1
       8: isub
       9: invokeinterface #54,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      14: areturn

  private static boolean isBlockBoundary(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node);
    Code:
       0: aload_1
       1: ifnull        116
       4: aload_1
       5: invokevirtual #73                 // Method com/google/javascript/rhino/Node.getType:()I
       8: lookupswitch  { // 10
                    77: 100
                    98: 102
                   100: 102
                   101: 102
                   108: 102
                   113: 100
                   114: 100
                   115: 100
                   119: 100
                   163: 100
               default: 116
          }
     100: iconst_1
     101: ireturn
     102: aload_0
     103: aload_1
     104: invokevirtual #71                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
     107: if_acmpeq     114
     110: iconst_1
     111: goto          115
     114: iconst_0
     115: ireturn
     116: aload_0
     117: invokevirtual #74                 // Method com/google/javascript/rhino/Node.isCase:()Z
     120: ireturn

  private void addReference(com.google.javascript.jscomp.Scope$Var, com.google.javascript.jscomp.ReferenceCollectingCallback$Reference);
    Code:
       0: aload_0
       1: getfield      #5                  // Field referenceMap:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #24,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #25                 // class com/google/javascript/jscomp/ReferenceCollectingCallback$ReferenceCollection
      13: astore_3
      14: aload_3
      15: ifnonnull     38
      18: new           #25                 // class com/google/javascript/jscomp/ReferenceCollectingCallback$ReferenceCollection
      21: dup
      22: invokespecial #75                 // Method com/google/javascript/jscomp/ReferenceCollectingCallback$ReferenceCollection."<init>":()V
      25: astore_3
      26: aload_0
      27: getfield      #5                  // Field referenceMap:Ljava/util/Map;
      30: aload_1
      31: aload_3
      32: invokeinterface #76,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      37: pop
      38: aload_3
      39: aload_2
      40: invokevirtual #77                 // Method com/google/javascript/jscomp/ReferenceCollectingCallback$ReferenceCollection.add:(Lcom/google/javascript/jscomp/ReferenceCollectingCallback$Reference;)V
      43: return

  public com.google.javascript.rhino.jstype.StaticScope getScope(com.google.javascript.rhino.jstype.StaticSlot);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #78                 // class com/google/javascript/jscomp/Scope$Var
       5: invokevirtual #79                 // Method getScope:(Lcom/google/javascript/jscomp/Scope$Var;)Lcom/google/javascript/jscomp/Scope;
       8: areturn

  public java.lang.Iterable getReferences(com.google.javascript.rhino.jstype.StaticSlot);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #78                 // class com/google/javascript/jscomp/Scope$Var
       5: invokevirtual #80                 // Method getReferences:(Lcom/google/javascript/jscomp/Scope$Var;)Lcom/google/javascript/jscomp/ReferenceCollectingCallback$ReferenceCollection;
       8: areturn

  static {};
    Code:
       0: new           #81                 // class com/google/javascript/jscomp/ReferenceCollectingCallback$1
       3: dup
       4: invokespecial #82                 // Method com/google/javascript/jscomp/ReferenceCollectingCallback$1."<init>":()V
       7: putstatic     #83                 // Field DO_NOTHING_BEHAVIOR:Lcom/google/javascript/jscomp/ReferenceCollectingCallback$Behavior;
      10: return
}
