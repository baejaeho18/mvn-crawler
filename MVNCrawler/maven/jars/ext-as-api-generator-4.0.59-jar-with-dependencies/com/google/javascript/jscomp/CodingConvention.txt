Compiled from "CodingConvention.java"
public interface com.google.javascript.jscomp.CodingConvention extends java.io.Serializable {
  public abstract boolean isConstant(java.lang.String);

  public abstract boolean isConstantKey(java.lang.String);

  public abstract boolean isValidEnumKey(java.lang.String);

  public abstract boolean isOptionalParameter(com.google.javascript.rhino.Node);

  public abstract boolean isVarArgsParameter(com.google.javascript.rhino.Node);

  public abstract boolean isFunctionCallThatAlwaysThrows(com.google.javascript.rhino.Node);

  public abstract boolean isExported(java.lang.String, boolean);

  public abstract boolean isExported(java.lang.String);

  public abstract java.lang.String getPackageName(com.google.javascript.rhino.jstype.StaticSourceFile);

  public abstract boolean isPrivate(java.lang.String);

  public abstract com.google.javascript.jscomp.CodingConvention$SubclassRelationship getClassesDefinedByCall(com.google.javascript.rhino.Node);

  public abstract boolean isSuperClassReference(java.lang.String);

  public abstract boolean extractIsModuleFile(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node);

  public abstract java.lang.String extractClassNameIfProvide(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node);

  public abstract java.lang.String extractClassNameIfRequire(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node);

  public abstract java.lang.String getExportPropertyFunction();

  public abstract java.lang.String getExportSymbolFunction();

  public abstract java.util.List<java.lang.String> identifyTypeDeclarationCall(com.google.javascript.rhino.Node);

  public abstract void applySubclassRelationship(com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.jscomp.CodingConvention$SubclassType);

  public abstract java.lang.String getAbstractMethodName();

  public abstract java.lang.String getSingletonGetterClassName(com.google.javascript.rhino.Node);

  public abstract void applySingletonGetter(com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.ObjectType);

  public abstract boolean isInlinableFunction(com.google.javascript.rhino.Node);

  public abstract com.google.javascript.jscomp.CodingConvention$DelegateRelationship getDelegateRelationship(com.google.javascript.rhino.Node);

  public abstract void applyDelegateRelationship(com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.FunctionType);

  public abstract java.lang.String getDelegateSuperclassName();

  public abstract void checkForCallingConventionDefiningCalls(com.google.javascript.rhino.Node, java.util.Map<java.lang.String, java.lang.String>);

  public abstract void defineDelegateProxyPrototypeProperties(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>, java.util.List<com.google.javascript.rhino.jstype.ObjectType>, java.util.Map<java.lang.String, java.lang.String>);

  public abstract java.lang.String getGlobalObject();

  public abstract com.google.javascript.jscomp.CodingConvention$Bind describeFunctionBind(com.google.javascript.rhino.Node);

  public abstract com.google.javascript.jscomp.CodingConvention$Bind describeFunctionBind(com.google.javascript.rhino.Node, boolean, boolean);

  public abstract boolean isPropertyTestFunction(com.google.javascript.rhino.Node);

  public abstract boolean isPrototypeAlias(com.google.javascript.rhino.Node);

  public abstract com.google.javascript.jscomp.CodingConvention$ObjectLiteralCast getObjectLiteralCast(com.google.javascript.rhino.Node);

  public abstract java.util.Collection<java.lang.String> getIndirectlyDeclaredProperties();

  public abstract java.util.Collection<com.google.javascript.jscomp.CodingConvention$AssertionFunctionSpec> getAssertionFunctions();
}
