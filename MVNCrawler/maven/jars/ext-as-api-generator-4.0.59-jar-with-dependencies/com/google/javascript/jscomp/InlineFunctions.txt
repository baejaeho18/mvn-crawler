Compiled from "InlineFunctions.java"
class com.google.javascript.jscomp.InlineFunctions implements com.google.javascript.jscomp.CompilerPass {
  private final java.util.Map<java.lang.String, com.google.javascript.jscomp.InlineFunctions$FunctionState> fns;

  private final java.util.Map<com.google.javascript.rhino.Node, java.lang.String> anonFns;

  private final com.google.javascript.jscomp.AbstractCompiler compiler;

  private final com.google.javascript.jscomp.FunctionInjector injector;

  private final boolean blockFunctionInliningEnabled;

  private final boolean inlineGlobalFunctions;

  private final boolean inlineLocalFunctions;

  private final boolean assumeMinimumCapture;

  private final boolean enforceMaxSizeAfterInlining;

  private final int maxSizeAfterInlining;

  com.google.javascript.jscomp.InlineFunctions(com.google.javascript.jscomp.AbstractCompiler, com.google.common.base.Supplier<java.lang.String>, boolean, boolean, boolean, boolean, boolean, int);
    Code:
       0: aload_0
       1: invokespecial #11                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #12                 // class java/util/LinkedHashMap
       8: dup
       9: invokespecial #13                 // Method java/util/LinkedHashMap."<init>":()V
      12: putfield      #2                  // Field fns:Ljava/util/Map;
      15: aload_0
      16: new           #14                 // class java/util/HashMap
      19: dup
      20: invokespecial #15                 // Method java/util/HashMap."<init>":()V
      23: putfield      #7                  // Field anonFns:Ljava/util/Map;
      26: aload_1
      27: ifnull        34
      30: iconst_1
      31: goto          35
      34: iconst_0
      35: invokestatic  #16                 // Method com/google/common/base/Preconditions.checkArgument:(Z)V
      38: aload_2
      39: ifnull        46
      42: iconst_1
      43: goto          47
      46: iconst_0
      47: invokestatic  #16                 // Method com/google/common/base/Preconditions.checkArgument:(Z)V
      50: aload_0
      51: aload_1
      52: putfield      #1                  // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
      55: aload_0
      56: iload_3
      57: putfield      #9                  // Field inlineGlobalFunctions:Z
      60: aload_0
      61: iload         4
      63: putfield      #10                 // Field inlineLocalFunctions:Z
      66: aload_0
      67: iload         5
      69: putfield      #6                  // Field blockFunctionInliningEnabled:Z
      72: aload_0
      73: iload         7
      75: putfield      #17                 // Field assumeMinimumCapture:Z
      78: aload_0
      79: iload         8
      81: putfield      #18                 // Field maxSizeAfterInlining:I
      84: aload_0
      85: iload         8
      87: iconst_m1
      88: if_icmpeq     95
      91: iconst_1
      92: goto          96
      95: iconst_0
      96: putfield      #5                  // Field enforceMaxSizeAfterInlining:Z
      99: aload_0
     100: new           #20                 // class com/google/javascript/jscomp/FunctionInjector
     103: dup
     104: aload_1
     105: aload_2
     106: iconst_1
     107: iload         6
     109: iload         7
     111: invokespecial #21                 // Method com/google/javascript/jscomp/FunctionInjector."<init>":(Lcom/google/javascript/jscomp/AbstractCompiler;Lcom/google/common/base/Supplier;ZZZ)V
     114: putfield      #3                  // Field injector:Lcom/google/javascript/jscomp/FunctionInjector;
     117: return

  com.google.javascript.jscomp.InlineFunctions$FunctionState getOrCreateFunctionState(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #2                  // Field fns:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #22,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #23                 // class com/google/javascript/jscomp/InlineFunctions$FunctionState
      13: astore_2
      14: aload_2
      15: ifnonnull     39
      18: new           #23                 // class com/google/javascript/jscomp/InlineFunctions$FunctionState
      21: dup
      22: aconst_null
      23: invokespecial #24                 // Method com/google/javascript/jscomp/InlineFunctions$FunctionState."<init>":(Lcom/google/javascript/jscomp/InlineFunctions$1;)V
      26: astore_2
      27: aload_0
      28: getfield      #2                  // Field fns:Ljava/util/Map;
      31: aload_1
      32: aload_2
      33: invokeinterface #25,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      38: pop
      39: aload_2
      40: areturn

  public void process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: getfield      #1                  // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
       4: invokevirtual #26                 // Method com/google/javascript/jscomp/AbstractCompiler.getLifeCycleStage:()Lcom/google/javascript/jscomp/AbstractCompiler$LifeCycleStage;
       7: invokevirtual #27                 // Method com/google/javascript/jscomp/AbstractCompiler$LifeCycleStage.isNormalized:()Z
      10: invokestatic  #28                 // Method com/google/common/base/Preconditions.checkState:(Z)V
      13: aload_0
      14: getfield      #1                  // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
      17: aload_2
      18: new           #29                 // class com/google/javascript/jscomp/InlineFunctions$FindCandidateFunctions
      21: dup
      22: aload_0
      23: aconst_null
      24: invokespecial #30                 // Method com/google/javascript/jscomp/InlineFunctions$FindCandidateFunctions."<init>":(Lcom/google/javascript/jscomp/InlineFunctions;Lcom/google/javascript/jscomp/InlineFunctions$1;)V
      27: invokestatic  #31                 // Method com/google/javascript/jscomp/NodeTraversal.traverse:(Lcom/google/javascript/jscomp/AbstractCompiler;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/NodeTraversal$Callback;)V
      30: aload_0
      31: getfield      #2                  // Field fns:Ljava/util/Map;
      34: invokeinterface #32,  1           // InterfaceMethod java/util/Map.isEmpty:()Z
      39: ifeq          43
      42: return
      43: aload_0
      44: getfield      #1                  // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
      47: aload_2
      48: new           #33                 // class com/google/javascript/jscomp/InlineFunctions$FindCandidatesReferences
      51: dup
      52: aload_0
      53: aload_0
      54: getfield      #2                  // Field fns:Ljava/util/Map;
      57: aload_0
      58: getfield      #7                  // Field anonFns:Ljava/util/Map;
      61: invokespecial #34                 // Method com/google/javascript/jscomp/InlineFunctions$FindCandidatesReferences."<init>":(Lcom/google/javascript/jscomp/InlineFunctions;Ljava/util/Map;Ljava/util/Map;)V
      64: invokestatic  #31                 // Method com/google/javascript/jscomp/NodeTraversal.traverse:(Lcom/google/javascript/jscomp/AbstractCompiler;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/NodeTraversal$Callback;)V
      67: aload_0
      68: invokespecial #35                 // Method trimCandidatesNotMeetingMinimumRequirements:()V
      71: aload_0
      72: getfield      #2                  // Field fns:Ljava/util/Map;
      75: invokeinterface #32,  1           // InterfaceMethod java/util/Map.isEmpty:()Z
      80: ifeq          84
      83: return
      84: aload_0
      85: getfield      #2                  // Field fns:Ljava/util/Map;
      88: invokeinterface #36,  1           // InterfaceMethod java/util/Map.keySet:()Ljava/util/Set;
      93: invokestatic  #37                 // Method com/google/common/collect/Sets.newHashSet:(Ljava/lang/Iterable;)Ljava/util/HashSet;
      96: astore_3
      97: aload_0
      98: getfield      #3                  // Field injector:Lcom/google/javascript/jscomp/FunctionInjector;
     101: aload_3
     102: invokevirtual #38                 // Method com/google/javascript/jscomp/FunctionInjector.setKnownConstants:(Ljava/util/Set;)V
     105: aload_0
     106: invokespecial #39                 // Method trimCandidatesUsingOnCost:()V
     109: aload_0
     110: getfield      #2                  // Field fns:Ljava/util/Map;
     113: invokeinterface #32,  1           // InterfaceMethod java/util/Map.isEmpty:()Z
     118: ifeq          122
     121: return
     122: aload_0
     123: invokespecial #40                 // Method resolveInlineConflicts:()V
     126: aload_0
     127: invokespecial #41                 // Method decomposeExpressions:()V
     130: aload_0
     131: getfield      #1                  // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
     134: aload_2
     135: new           #42                 // class com/google/javascript/jscomp/InlineFunctions$CallVisitor
     138: dup
     139: aload_0
     140: getfield      #2                  // Field fns:Ljava/util/Map;
     143: aload_0
     144: getfield      #7                  // Field anonFns:Ljava/util/Map;
     147: new           #43                 // class com/google/javascript/jscomp/InlineFunctions$Inline
     150: dup
     151: aload_0
     152: aload_0
     153: getfield      #3                  // Field injector:Lcom/google/javascript/jscomp/FunctionInjector;
     156: invokespecial #44                 // Method com/google/javascript/jscomp/InlineFunctions$Inline."<init>":(Lcom/google/javascript/jscomp/InlineFunctions;Lcom/google/javascript/jscomp/FunctionInjector;)V
     159: invokespecial #45                 // Method com/google/javascript/jscomp/InlineFunctions$CallVisitor."<init>":(Ljava/util/Map;Ljava/util/Map;Lcom/google/javascript/jscomp/InlineFunctions$CallVisitorCallback;)V
     162: invokestatic  #31                 // Method com/google/javascript/jscomp/NodeTraversal.traverse:(Lcom/google/javascript/jscomp/AbstractCompiler;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/NodeTraversal$Callback;)V
     165: aload_0
     166: invokevirtual #46                 // Method removeInlinedFunctions:()V
     169: return

  private static boolean isAlwaysInlinable(com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: invokevirtual #47                 // Method com/google/javascript/rhino/Node.isFunction:()Z
       4: invokestatic  #16                 // Method com/google/common/base/Preconditions.checkArgument:(Z)V
       7: aload_0
       8: invokestatic  #48                 // Method com/google/javascript/jscomp/NodeUtil.getFunctionBody:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
      11: astore_1
      12: aload_1
      13: invokevirtual #49                 // Method com/google/javascript/rhino/Node.getChildCount:()I
      16: istore_2
      17: iload_2
      18: ifeq          36
      21: iload_2
      22: iconst_1
      23: if_icmpne     40
      26: aload_1
      27: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
      30: invokevirtual #51                 // Method com/google/javascript/rhino/Node.isReturn:()Z
      33: ifeq          40
      36: iconst_1
      37: goto          41
      40: iconst_0
      41: ireturn

  private boolean targetSizeAfterInlineExceedsLimit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.jscomp.InlineFunctions$FunctionState);
    Code:
       0: aload_1
       1: invokestatic  #52                 // Method getContainingFunction:(Lcom/google/javascript/jscomp/NodeTraversal;)Lcom/google/javascript/rhino/Node;
       4: astore_3
       5: aload_3
       6: ifnonnull     11
       9: iconst_0
      10: ireturn
      11: aload_2
      12: invokevirtual #53                 // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.getFn:()Lcom/google/javascript/jscomp/InlineFunctions$Function;
      15: invokeinterface #54,  1           // InterfaceMethod com/google/javascript/jscomp/InlineFunctions$Function.getFunctionNode:()Lcom/google/javascript/rhino/Node;
      20: astore        4
      22: aload         4
      24: invokestatic  #55                 // Method isAlwaysInlinable:(Lcom/google/javascript/rhino/Node;)Z
      27: ifeq          32
      30: iconst_0
      31: ireturn
      32: aload         4
      34: invokestatic  #48                 // Method com/google/javascript/jscomp/NodeUtil.getFunctionBody:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
      37: aload_0
      38: getfield      #18                 // Field maxSizeAfterInlining:I
      41: invokestatic  #56                 // Method com/google/javascript/jscomp/NodeUtil.countAstSizeUpToLimit:(Lcom/google/javascript/rhino/Node;I)I
      44: istore        5
      46: aload_3
      47: aload_0
      48: getfield      #18                 // Field maxSizeAfterInlining:I
      51: invokestatic  #56                 // Method com/google/javascript/jscomp/NodeUtil.countAstSizeUpToLimit:(Lcom/google/javascript/rhino/Node;I)I
      54: istore        6
      56: iload         5
      58: iload         6
      60: iadd
      61: aload_0
      62: getfield      #18                 // Field maxSizeAfterInlining:I
      65: if_icmple     72
      68: iconst_1
      69: goto          73
      72: iconst_0
      73: ireturn

  private void maybeAddFunction(com.google.javascript.jscomp.InlineFunctions$Function, com.google.javascript.jscomp.JSModule);
    Code:
       0: aload_1
       1: invokeinterface #57,  1           // InterfaceMethod com/google/javascript/jscomp/InlineFunctions$Function.getName:()Ljava/lang/String;
       6: astore_3
       7: aload_0
       8: aload_3
       9: invokevirtual #58                 // Method getOrCreateFunctionState:(Ljava/lang/String;)Lcom/google/javascript/jscomp/InlineFunctions$FunctionState;
      12: astore        4
      14: aload         4
      16: invokevirtual #59                 // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.hasExistingFunctionDefinition:()Z
      19: ifeq          29
      22: aload         4
      24: iconst_0
      25: invokevirtual #60                 // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.setInline:(Z)V
      28: return
      29: aload_1
      30: invokeinterface #54,  1           // InterfaceMethod com/google/javascript/jscomp/InlineFunctions$Function.getFunctionNode:()Lcom/google/javascript/rhino/Node;
      35: astore        5
      37: aload_0
      38: getfield      #5                  // Field enforceMaxSizeAfterInlining:Z
      41: ifeq          75
      44: aload         5
      46: invokestatic  #55                 // Method isAlwaysInlinable:(Lcom/google/javascript/rhino/Node;)Z
      49: ifne          75
      52: aload_0
      53: getfield      #18                 // Field maxSizeAfterInlining:I
      56: aload         5
      58: aload_0
      59: getfield      #18                 // Field maxSizeAfterInlining:I
      62: invokestatic  #56                 // Method com/google/javascript/jscomp/NodeUtil.countAstSizeUpToLimit:(Lcom/google/javascript/rhino/Node;I)I
      65: if_icmpgt     75
      68: aload         4
      70: iconst_0
      71: invokevirtual #60                 // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.setInline:(Z)V
      74: return
      75: aload         4
      77: invokevirtual #61                 // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.canInline:()Z
      80: ifeq          250
      83: aload         4
      85: aload_1
      86: invokevirtual #62                 // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.setFn:(Lcom/google/javascript/jscomp/InlineFunctions$Function;)V
      89: aload_1
      90: invokeinterface #54,  1           // InterfaceMethod com/google/javascript/jscomp/InlineFunctions$Function.getFunctionNode:()Lcom/google/javascript/rhino/Node;
      95: invokestatic  #63                 // Method com/google/javascript/jscomp/FunctionInjector.isDirectCallNodeReplacementPossible:(Lcom/google/javascript/rhino/Node;)Z
      98: ifeq          107
     101: aload         4
     103: iconst_1
     104: invokevirtual #64                 // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.inlineDirectly:(Z)V
     107: aload_0
     108: aload_1
     109: invokespecial #65                 // Method isCandidateFunction:(Lcom/google/javascript/jscomp/InlineFunctions$Function;)Z
     112: ifne          121
     115: aload         4
     117: iconst_0
     118: invokevirtual #60                 // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.setInline:(Z)V
     121: aload         4
     123: invokevirtual #61                 // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.canInline:()Z
     126: ifeq          221
     129: aload         4
     131: aload_2
     132: invokevirtual #66                 // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.setModule:(Lcom/google/javascript/jscomp/JSModule;)V
     135: aload         5
     137: invokestatic  #67                 // Method com/google/javascript/jscomp/FunctionArgumentInjector.findModifiedParameters:(Lcom/google/javascript/rhino/Node;)Ljava/util/Set;
     140: astore        6
     142: aload         6
     144: invokeinterface #68,  1           // InterfaceMethod java/util/Set.isEmpty:()Z
     149: ifne          165
     152: aload         4
     154: iconst_0
     155: invokevirtual #64                 // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.inlineDirectly:(Z)V
     158: aload         4
     160: aload         6
     162: invokevirtual #69                 // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.setNamesToAlias:(Ljava/util/Set;)V
     165: aload         5
     167: invokestatic  #48                 // Method com/google/javascript/jscomp/NodeUtil.getFunctionBody:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
     170: astore        7
     172: aload         7
     174: invokestatic  #70                 // Method com/google/javascript/jscomp/NodeUtil.referencesThis:(Lcom/google/javascript/rhino/Node;)Z
     177: ifeq          186
     180: aload         4
     182: iconst_1
     183: invokevirtual #71                 // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.setReferencesThis:(Z)V
     186: aload         7
     188: invokestatic  #72                 // Method com/google/javascript/jscomp/NodeUtil.containsFunction:(Lcom/google/javascript/rhino/Node;)Z
     191: ifeq          221
     194: aload         4
     196: iconst_1
     197: invokevirtual #73                 // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.setHasInnerFunctions:(Z)V
     200: aload_0
     201: getfield      #17                 // Field assumeMinimumCapture:Z
     204: ifne          221
     207: aload         5
     209: invokestatic  #74                 // Method hasLocalNames:(Lcom/google/javascript/rhino/Node;)Z
     212: ifeq          221
     215: aload         4
     217: iconst_0
     218: invokevirtual #60                 // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.setInline:(Z)V
     221: aload         4
     223: invokevirtual #61                 // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.canInline:()Z
     226: ifeq          250
     229: aload         4
     231: invokevirtual #75                 // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.canInlineDirectly:()Z
     234: ifne          250
     237: aload_0
     238: getfield      #6                  // Field blockFunctionInliningEnabled:Z
     241: ifne          250
     244: aload         4
     246: iconst_0
     247: invokevirtual #60                 // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.setInline:(Z)V
     250: return

  private static boolean hasLocalNames(com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: invokestatic  #48                 // Method com/google/javascript/jscomp/NodeUtil.getFunctionBody:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
       4: astore_1
       5: aload_0
       6: invokestatic  #76                 // Method com/google/javascript/jscomp/NodeUtil.getFunctionParameters:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
       9: invokevirtual #77                 // Method com/google/javascript/rhino/Node.hasChildren:()Z
      12: ifne          36
      15: aload_1
      16: new           #78                 // class com/google/javascript/jscomp/NodeUtil$MatchDeclaration
      19: dup
      20: invokespecial #79                 // Method com/google/javascript/jscomp/NodeUtil$MatchDeclaration."<init>":()V
      23: new           #80                 // class com/google/javascript/jscomp/NodeUtil$MatchShallowStatement
      26: dup
      27: invokespecial #81                 // Method com/google/javascript/jscomp/NodeUtil$MatchShallowStatement."<init>":()V
      30: invokestatic  #82                 // Method com/google/javascript/jscomp/NodeUtil.has:(Lcom/google/javascript/rhino/Node;Lcom/google/common/base/Predicate;Lcom/google/common/base/Predicate;)Z
      33: ifeq          40
      36: iconst_1
      37: goto          41
      40: iconst_0
      41: ireturn

  private static com.google.javascript.rhino.Node getContainingFunction(com.google.javascript.jscomp.NodeTraversal);
    Code:
       0: aload_0
       1: invokevirtual #83                 // Method com/google/javascript/jscomp/NodeTraversal.inGlobalScope:()Z
       4: ifeq          11
       7: aconst_null
       8: goto          15
      11: aload_0
      12: invokevirtual #84                 // Method com/google/javascript/jscomp/NodeTraversal.getScopeRoot:()Lcom/google/javascript/rhino/Node;
      15: areturn

  private boolean isCandidateFunction(com.google.javascript.jscomp.InlineFunctions$Function);
    Code:
       0: aload_1
       1: invokeinterface #57,  1           // InterfaceMethod com/google/javascript/jscomp/InlineFunctions$Function.getName:()Ljava/lang/String;
       6: astore_2
       7: aload_0
       8: getfield      #1                  // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
      11: invokevirtual #85                 // Method com/google/javascript/jscomp/AbstractCompiler.getCodingConvention:()Lcom/google/javascript/jscomp/CodingConvention;
      14: aload_2
      15: invokeinterface #86,  2           // InterfaceMethod com/google/javascript/jscomp/CodingConvention.isExported:(Ljava/lang/String;)Z
      20: ifeq          25
      23: iconst_0
      24: ireturn
      25: ldc           #88                 // String JSCompiler_renameProperty
      27: aload_2
      28: invokevirtual #89                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      31: ifeq          36
      34: iconst_0
      35: ireturn
      36: aload_1
      37: invokeinterface #54,  1           // InterfaceMethod com/google/javascript/jscomp/InlineFunctions$Function.getFunctionNode:()Lcom/google/javascript/rhino/Node;
      42: astore_3
      43: aload_0
      44: getfield      #3                  // Field injector:Lcom/google/javascript/jscomp/FunctionInjector;
      47: aload_2
      48: aload_3
      49: invokevirtual #90                 // Method com/google/javascript/jscomp/FunctionInjector.doesFunctionMeetMinimumRequirements:(Ljava/lang/String;Lcom/google/javascript/rhino/Node;)Z
      52: ireturn

  static boolean isCandidateUsage(com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: invokevirtual #91                 // Method com/google/javascript/rhino/Node.getParent:()Lcom/google/javascript/rhino/Node;
       4: astore_1
       5: aload_0
       6: invokevirtual #92                 // Method com/google/javascript/rhino/Node.isName:()Z
       9: invokestatic  #28                 // Method com/google/common/base/Preconditions.checkState:(Z)V
      12: aload_1
      13: invokevirtual #93                 // Method com/google/javascript/rhino/Node.isVar:()Z
      16: ifne          26
      19: aload_1
      20: invokevirtual #47                 // Method com/google/javascript/rhino/Node.isFunction:()Z
      23: ifeq          28
      26: iconst_1
      27: ireturn
      28: aload_1
      29: invokevirtual #94                 // Method com/google/javascript/rhino/Node.isCall:()Z
      32: ifeq          45
      35: aload_1
      36: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
      39: aload_0
      40: if_acmpne     45
      43: iconst_1
      44: ireturn
      45: aload_1
      46: invokestatic  #95                 // Method com/google/javascript/jscomp/NodeUtil.isGet:(Lcom/google/javascript/rhino/Node;)Z
      49: ifeq          108
      52: aload_0
      53: aload_1
      54: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
      57: if_acmpne     108
      60: aload_0
      61: invokevirtual #96                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
      64: invokevirtual #97                 // Method com/google/javascript/rhino/Node.isString:()Z
      67: ifeq          108
      70: aload_0
      71: invokevirtual #96                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
      74: invokevirtual #98                 // Method com/google/javascript/rhino/Node.getString:()Ljava/lang/String;
      77: ldc           #99                 // String call
      79: invokevirtual #89                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      82: ifeq          108
      85: aload_0
      86: iconst_2
      87: invokevirtual #100                // Method com/google/javascript/rhino/Node.getAncestor:(I)Lcom/google/javascript/rhino/Node;
      90: astore_2
      91: aload_2
      92: invokevirtual #94                 // Method com/google/javascript/rhino/Node.isCall:()Z
      95: ifeq          108
      98: aload_2
      99: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
     102: aload_1
     103: if_acmpne     108
     106: iconst_1
     107: ireturn
     108: iconst_0
     109: ireturn

  private void trimCandidatesNotMeetingMinimumRequirements();
    Code:
       0: aload_0
       1: getfield      #2                  // Field fns:Ljava/util/Map;
       4: invokeinterface #101,  1          // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
       9: invokeinterface #102,  1          // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      14: astore_1
      15: aload_1
      16: invokeinterface #103,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          65
      24: aload_1
      25: invokeinterface #104,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #105                // class java/util/Map$Entry
      33: invokeinterface #106,  1          // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      38: checkcast     #23                 // class com/google/javascript/jscomp/InlineFunctions$FunctionState
      41: astore_2
      42: aload_2
      43: invokevirtual #59                 // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.hasExistingFunctionDefinition:()Z
      46: ifeq          56
      49: aload_2
      50: invokevirtual #61                 // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.canInline:()Z
      53: ifne          62
      56: aload_1
      57: invokeinterface #107,  1          // InterfaceMethod java/util/Iterator.remove:()V
      62: goto          15
      65: return

  private void trimCandidatesUsingOnCost();
    Code:
       0: aload_0
       1: getfield      #2                  // Field fns:Ljava/util/Map;
       4: invokeinterface #101,  1          // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
       9: invokeinterface #102,  1          // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      14: astore_1
      15: aload_1
      16: invokeinterface #103,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          84
      24: aload_1
      25: invokeinterface #104,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #105                // class java/util/Map$Entry
      33: invokeinterface #106,  1          // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      38: checkcast     #23                 // class com/google/javascript/jscomp/InlineFunctions$FunctionState
      41: astore_2
      42: aload_2
      43: invokevirtual #108                // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.hasReferences:()Z
      46: ifeq          68
      49: aload_0
      50: aload_2
      51: invokespecial #109                // Method mimimizeCost:(Lcom/google/javascript/jscomp/InlineFunctions$FunctionState;)Z
      54: istore_3
      55: iload_3
      56: ifne          65
      59: aload_1
      60: invokeinterface #107,  1          // InterfaceMethod java/util/Iterator.remove:()V
      65: goto          81
      68: aload_2
      69: invokevirtual #110                // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.canRemove:()Z
      72: ifne          81
      75: aload_1
      76: invokeinterface #107,  1          // InterfaceMethod java/util/Iterator.remove:()V
      81: goto          15
      84: return

  private boolean mimimizeCost(com.google.javascript.jscomp.InlineFunctions$FunctionState);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #111                // Method inliningLowersCost:(Lcom/google/javascript/jscomp/InlineFunctions$FunctionState;)Z
       5: ifne          43
       8: aload_1
       9: invokevirtual #112                // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.hasBlockInliningReferences:()Z
      12: ifeq          41
      15: aload_1
      16: iconst_0
      17: invokevirtual #113                // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.setRemove:(Z)V
      20: aload_1
      21: invokevirtual #114                // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.removeBlockInliningReferences:()V
      24: aload_1
      25: invokevirtual #108                // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.hasReferences:()Z
      28: ifeq          39
      31: aload_0
      32: aload_1
      33: invokespecial #111                // Method inliningLowersCost:(Lcom/google/javascript/jscomp/InlineFunctions$FunctionState;)Z
      36: ifne          43
      39: iconst_0
      40: ireturn
      41: iconst_0
      42: ireturn
      43: iconst_1
      44: ireturn

  private boolean inliningLowersCost(com.google.javascript.jscomp.InlineFunctions$FunctionState);
    Code:
       0: aload_0
       1: getfield      #3                  // Field injector:Lcom/google/javascript/jscomp/FunctionInjector;
       4: aload_1
       5: invokevirtual #115                // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.getModule:()Lcom/google/javascript/jscomp/JSModule;
       8: aload_1
       9: invokevirtual #53                 // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.getFn:()Lcom/google/javascript/jscomp/InlineFunctions$Function;
      12: invokeinterface #54,  1           // InterfaceMethod com/google/javascript/jscomp/InlineFunctions$Function.getFunctionNode:()Lcom/google/javascript/rhino/Node;
      17: aload_1
      18: invokevirtual #116                // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.getReferences:()Ljava/util/Collection;
      21: aload_1
      22: invokevirtual #117                // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.getNamesToAlias:()Ljava/util/Set;
      25: aload_1
      26: invokevirtual #110                // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.canRemove:()Z
      29: aload_1
      30: invokevirtual #118                // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.getReferencesThis:()Z
      33: invokevirtual #119                // Method com/google/javascript/jscomp/FunctionInjector.inliningLowersCost:(Lcom/google/javascript/jscomp/JSModule;Lcom/google/javascript/rhino/Node;Ljava/util/Collection;Ljava/util/Set;ZZ)Z
      36: ireturn

  private void resolveInlineConflicts();
    Code:
       0: aload_0
       1: getfield      #2                  // Field fns:Ljava/util/Map;
       4: invokeinterface #120,  1          // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
       9: invokeinterface #121,  1          // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      14: astore_1
      15: aload_1
      16: invokeinterface #103,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          42
      24: aload_1
      25: invokeinterface #104,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #23                 // class com/google/javascript/jscomp/InlineFunctions$FunctionState
      33: astore_2
      34: aload_0
      35: aload_2
      36: invokespecial #122                // Method resolveInlineConflictsForFunction:(Lcom/google/javascript/jscomp/InlineFunctions$FunctionState;)V
      39: goto          15
      42: return

  private void resolveInlineConflictsForFunction(com.google.javascript.jscomp.InlineFunctions$FunctionState);
    Code:
       0: aload_1
       1: invokevirtual #108                // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.hasReferences:()Z
       4: ifeq          14
       7: aload_1
       8: invokevirtual #61                 // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.canInline:()Z
      11: ifne          15
      14: return
      15: aload_1
      16: invokevirtual #53                 // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.getFn:()Lcom/google/javascript/jscomp/InlineFunctions$Function;
      19: invokeinterface #54,  1           // InterfaceMethod com/google/javascript/jscomp/InlineFunctions$Function.getFunctionNode:()Lcom/google/javascript/rhino/Node;
      24: astore_2
      25: aload_0
      26: aload_2
      27: invokespecial #123                // Method findCalledFunctions:(Lcom/google/javascript/rhino/Node;)Ljava/util/Set;
      30: astore_3
      31: aload_3
      32: invokeinterface #68,  1           // InterfaceMethod java/util/Set.isEmpty:()Z
      37: ifne          139
      40: aload_3
      41: invokeinterface #102,  1          // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      46: astore        4
      48: aload         4
      50: invokeinterface #103,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      55: ifeq          123
      58: aload         4
      60: invokeinterface #104,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      65: checkcast     #124                // class java/lang/String
      68: astore        5
      70: aload_0
      71: getfield      #2                  // Field fns:Ljava/util/Map;
      74: aload         5
      76: invokeinterface #22,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      81: checkcast     #23                 // class com/google/javascript/jscomp/InlineFunctions$FunctionState
      84: astore        6
      86: aload         6
      88: ifnull        120
      91: aload         6
      93: invokevirtual #110                // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.canRemove:()Z
      96: ifeq          120
      99: aload         6
     101: iconst_0
     102: invokevirtual #113                // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.setRemove:(Z)V
     105: aload_0
     106: aload         6
     108: invokespecial #109                // Method mimimizeCost:(Lcom/google/javascript/jscomp/InlineFunctions$FunctionState;)Z
     111: ifne          120
     114: aload         6
     116: iconst_0
     117: invokevirtual #60                 // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.setInline:(Z)V
     120: goto          48
     123: aload_1
     124: aload_1
     125: invokevirtual #53                 // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.getFn:()Lcom/google/javascript/jscomp/InlineFunctions$Function;
     128: invokeinterface #54,  1           // InterfaceMethod com/google/javascript/jscomp/InlineFunctions$Function.getFunctionNode:()Lcom/google/javascript/rhino/Node;
     133: invokevirtual #125                // Method com/google/javascript/rhino/Node.cloneTree:()Lcom/google/javascript/rhino/Node;
     136: invokevirtual #126                // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.setSafeFnNode:(Lcom/google/javascript/rhino/Node;)V
     139: return

  private java.util.Set<java.lang.String> findCalledFunctions(com.google.javascript.rhino.Node);
    Code:
       0: invokestatic  #127                // Method com/google/common/collect/Sets.newHashSet:()Ljava/util/HashSet;
       3: astore_2
       4: aload_1
       5: invokestatic  #48                 // Method com/google/javascript/jscomp/NodeUtil.getFunctionBody:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
       8: aload_2
       9: invokestatic  #128                // Method findCalledFunctions:(Lcom/google/javascript/rhino/Node;Ljava/util/Set;)V
      12: aload_2
      13: areturn

  private static void findCalledFunctions(com.google.javascript.rhino.Node, java.util.Set<java.lang.String>);
    Code:
       0: aload_1
       1: ifnull        8
       4: iconst_1
       5: goto          9
       8: iconst_0
       9: invokestatic  #16                 // Method com/google/common/base/Preconditions.checkArgument:(Z)V
      12: aload_0
      13: invokevirtual #92                 // Method com/google/javascript/rhino/Node.isName:()Z
      16: ifeq          37
      19: aload_0
      20: invokestatic  #129                // Method isCandidateUsage:(Lcom/google/javascript/rhino/Node;)Z
      23: ifeq          37
      26: aload_1
      27: aload_0
      28: invokevirtual #98                 // Method com/google/javascript/rhino/Node.getString:()Ljava/lang/String;
      31: invokeinterface #130,  2          // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      36: pop
      37: aload_0
      38: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
      41: astore_2
      42: aload_2
      43: ifnull        59
      46: aload_2
      47: aload_1
      48: invokestatic  #128                // Method findCalledFunctions:(Lcom/google/javascript/rhino/Node;Ljava/util/Set;)V
      51: aload_2
      52: invokevirtual #96                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
      55: astore_2
      56: goto          42
      59: return

  private void decomposeExpressions();
    Code:
       0: aload_0
       1: getfield      #2                  // Field fns:Ljava/util/Map;
       4: invokeinterface #120,  1          // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
       9: invokeinterface #121,  1          // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      14: astore_1
      15: aload_1
      16: invokeinterface #103,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          94
      24: aload_1
      25: invokeinterface #104,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #23                 // class com/google/javascript/jscomp/InlineFunctions$FunctionState
      33: astore_2
      34: aload_2
      35: invokevirtual #61                 // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.canInline:()Z
      38: ifeq          91
      41: aload_2
      42: invokevirtual #116                // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.getReferences:()Ljava/util/Collection;
      45: invokeinterface #121,  1          // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      50: astore_3
      51: aload_3
      52: invokeinterface #103,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      57: ifeq          91
      60: aload_3
      61: invokeinterface #104,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      66: checkcast     #131                // class com/google/javascript/jscomp/InlineFunctions$Reference
      69: astore        4
      71: aload         4
      73: getfield      #132                // Field com/google/javascript/jscomp/InlineFunctions$Reference.requiresDecomposition:Z
      76: ifeq          88
      79: aload_0
      80: getfield      #3                  // Field injector:Lcom/google/javascript/jscomp/FunctionInjector;
      83: aload         4
      85: invokevirtual #133                // Method com/google/javascript/jscomp/FunctionInjector.maybePrepareCall:(Lcom/google/javascript/jscomp/FunctionInjector$Reference;)V
      88: goto          51
      91: goto          15
      94: return

  void removeInlinedFunctions();
    Code:
       0: aload_0
       1: getfield      #2                  // Field fns:Ljava/util/Map;
       4: invokeinterface #120,  1          // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
       9: invokeinterface #121,  1          // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      14: astore_1
      15: aload_1
      16: invokeinterface #103,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          79
      24: aload_1
      25: invokeinterface #104,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #23                 // class com/google/javascript/jscomp/InlineFunctions$FunctionState
      33: astore_2
      34: aload_2
      35: invokevirtual #110                // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.canRemove:()Z
      38: ifeq          76
      41: aload_2
      42: invokevirtual #53                 // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.getFn:()Lcom/google/javascript/jscomp/InlineFunctions$Function;
      45: astore_3
      46: aload_2
      47: invokevirtual #61                 // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.canInline:()Z
      50: invokestatic  #28                 // Method com/google/common/base/Preconditions.checkState:(Z)V
      53: aload_3
      54: ifnull        61
      57: iconst_1
      58: goto          62
      61: iconst_0
      62: invokestatic  #28                 // Method com/google/common/base/Preconditions.checkState:(Z)V
      65: aload_0
      66: aload_2
      67: invokevirtual #134                // Method verifyAllReferencesInlined:(Lcom/google/javascript/jscomp/InlineFunctions$FunctionState;)V
      70: aload_3
      71: invokeinterface #135,  1          // InterfaceMethod com/google/javascript/jscomp/InlineFunctions$Function.remove:()V
      76: goto          15
      79: return

  void verifyAllReferencesInlined(com.google.javascript.jscomp.InlineFunctions$FunctionState);
    Code:
       0: aload_1
       1: invokevirtual #116                // Method com/google/javascript/jscomp/InlineFunctions$FunctionState.getReferences:()Ljava/util/Collection;
       4: invokeinterface #121,  1          // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
       9: astore_2
      10: aload_2
      11: invokeinterface #103,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          90
      19: aload_2
      20: invokeinterface #104,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #131                // class com/google/javascript/jscomp/InlineFunctions$Reference
      28: astore_3
      29: aload_3
      30: getfield      #136                // Field com/google/javascript/jscomp/InlineFunctions$Reference.inlined:Z
      33: ifne          87
      36: new           #137                // class java/lang/IllegalStateException
      39: dup
      40: new           #138                // class java/lang/StringBuilder
      43: dup
      44: invokespecial #139                // Method java/lang/StringBuilder."<init>":()V
      47: ldc           #140                // String Call site missed.\n call:
      49: invokevirtual #141                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      52: aload_3
      53: getfield      #142                // Field com/google/javascript/jscomp/InlineFunctions$Reference.callNode:Lcom/google/javascript/rhino/Node;
      56: invokevirtual #143                // Method com/google/javascript/rhino/Node.toStringTree:()Ljava/lang/String;
      59: invokevirtual #141                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      62: ldc           #144                // String \n parent:
      64: invokevirtual #141                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      67: aload_3
      68: getfield      #142                // Field com/google/javascript/jscomp/InlineFunctions$Reference.callNode:Lcom/google/javascript/rhino/Node;
      71: invokevirtual #91                 // Method com/google/javascript/rhino/Node.getParent:()Lcom/google/javascript/rhino/Node;
      74: invokevirtual #143                // Method com/google/javascript/rhino/Node.toStringTree:()Ljava/lang/String;
      77: invokevirtual #141                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      80: invokevirtual #145                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      83: invokespecial #146                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      86: athrow
      87: goto          10
      90: return

  static boolean access$200(com.google.javascript.jscomp.InlineFunctions);
    Code:
       0: aload_0
       1: getfield      #10                 // Field inlineLocalFunctions:Z
       4: ireturn

  static boolean access$300(com.google.javascript.jscomp.InlineFunctions);
    Code:
       0: aload_0
       1: getfield      #9                  // Field inlineGlobalFunctions:Z
       4: ireturn

  static void access$400(com.google.javascript.jscomp.InlineFunctions, com.google.javascript.jscomp.InlineFunctions$Function, com.google.javascript.jscomp.JSModule);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #8                  // Method maybeAddFunction:(Lcom/google/javascript/jscomp/InlineFunctions$Function;Lcom/google/javascript/jscomp/JSModule;)V
       6: return

  static java.util.Map access$500(com.google.javascript.jscomp.InlineFunctions);
    Code:
       0: aload_0
       1: getfield      #7                  // Field anonFns:Ljava/util/Map;
       4: areturn

  static boolean access$600(com.google.javascript.jscomp.InlineFunctions);
    Code:
       0: aload_0
       1: getfield      #6                  // Field blockFunctionInliningEnabled:Z
       4: ireturn

  static boolean access$700(com.google.javascript.jscomp.InlineFunctions);
    Code:
       0: aload_0
       1: getfield      #5                  // Field enforceMaxSizeAfterInlining:Z
       4: ireturn

  static boolean access$800(com.google.javascript.jscomp.InlineFunctions, com.google.javascript.jscomp.NodeTraversal, com.google.javascript.jscomp.InlineFunctions$FunctionState);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #4                  // Method targetSizeAfterInlineExceedsLimit:(Lcom/google/javascript/jscomp/NodeTraversal;Lcom/google/javascript/jscomp/InlineFunctions$FunctionState;)Z
       6: ireturn

  static com.google.javascript.jscomp.FunctionInjector access$900(com.google.javascript.jscomp.InlineFunctions);
    Code:
       0: aload_0
       1: getfield      #3                  // Field injector:Lcom/google/javascript/jscomp/FunctionInjector;
       4: areturn

  static java.util.Map access$1000(com.google.javascript.jscomp.InlineFunctions);
    Code:
       0: aload_0
       1: getfield      #2                  // Field fns:Ljava/util/Map;
       4: areturn

  static com.google.javascript.jscomp.AbstractCompiler access$1100(com.google.javascript.jscomp.InlineFunctions);
    Code:
       0: aload_0
       1: getfield      #1                  // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
       4: areturn
}
