Compiled from "SourceMap.java"
public class com.google.javascript.jscomp.SourceMap {
  private final com.google.debugging.sourcemap.SourceMapGenerator generator;

  private java.util.List<com.google.javascript.jscomp.SourceMap$LocationMapping> prefixMappings;

  private final java.util.Map<java.lang.String, java.lang.String> sourceLocationFixupCache;

  private com.google.javascript.jscomp.SourceMap(com.google.debugging.sourcemap.SourceMapGenerator);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #3                  // Method java/util/Collections.emptyList:()Ljava/util/List;
       8: putfield      #4                  // Field prefixMappings:Ljava/util/List;
      11: aload_0
      12: invokestatic  #5                  // Method com/google/common/collect/Maps.newHashMap:()Ljava/util/HashMap;
      15: putfield      #6                  // Field sourceLocationFixupCache:Ljava/util/Map;
      18: aload_0
      19: aload_1
      20: putfield      #7                  // Field generator:Lcom/google/debugging/sourcemap/SourceMapGenerator;
      23: return

  public void addMapping(com.google.javascript.rhino.Node, com.google.debugging.sourcemap.FilePosition, com.google.debugging.sourcemap.FilePosition);
    Code:
       0: aload_1
       1: invokevirtual #8                  // Method com/google/javascript/rhino/Node.getSourceFileName:()Ljava/lang/String;
       4: astore        4
       6: aload         4
       8: ifnull        18
      11: aload_1
      12: invokevirtual #9                  // Method com/google/javascript/rhino/Node.getLineno:()I
      15: ifge          19
      18: return
      19: aload_0
      20: aload         4
      22: invokespecial #10                 // Method fixupSourceLocation:(Ljava/lang/String;)Ljava/lang/String;
      25: astore        4
      27: aload_1
      28: bipush        40
      30: invokevirtual #12                 // Method com/google/javascript/rhino/Node.getProp:(I)Ljava/lang/Object;
      33: checkcast     #13                 // class java/lang/String
      36: astore        5
      38: iconst_1
      39: istore        6
      41: aload_0
      42: getfield      #7                  // Field generator:Lcom/google/debugging/sourcemap/SourceMapGenerator;
      45: aload         4
      47: aload         5
      49: new           #14                 // class com/google/debugging/sourcemap/FilePosition
      52: dup
      53: aload_1
      54: invokevirtual #9                  // Method com/google/javascript/rhino/Node.getLineno:()I
      57: iload         6
      59: isub
      60: aload_1
      61: invokevirtual #15                 // Method com/google/javascript/rhino/Node.getCharno:()I
      64: invokespecial #16                 // Method com/google/debugging/sourcemap/FilePosition."<init>":(II)V
      67: aload_2
      68: aload_3
      69: invokeinterface #17,  6           // InterfaceMethod com/google/debugging/sourcemap/SourceMapGenerator.addMapping:(Ljava/lang/String;Ljava/lang/String;Lcom/google/debugging/sourcemap/FilePosition;Lcom/google/debugging/sourcemap/FilePosition;Lcom/google/debugging/sourcemap/FilePosition;)V
      74: return

  private java.lang.String fixupSourceLocation(java.lang.String);
    Code:
       0: getstatic     #18                 // Field java/io/File.separatorChar:C
       3: bipush        92
       5: if_icmpne     17
       8: aload_1
       9: bipush        92
      11: bipush        47
      13: invokevirtual #19                 // Method java/lang/String.replace:(CC)Ljava/lang/String;
      16: astore_1
      17: aload_0
      18: getfield      #4                  // Field prefixMappings:Ljava/util/List;
      21: invokeinterface #20,  1           // InterfaceMethod java/util/List.isEmpty:()Z
      26: ifeq          31
      29: aload_1
      30: areturn
      31: aload_0
      32: getfield      #6                  // Field sourceLocationFixupCache:Ljava/util/Map;
      35: aload_1
      36: invokeinterface #21,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      41: checkcast     #13                 // class java/lang/String
      44: astore_2
      45: aload_2
      46: ifnull        51
      49: aload_2
      50: areturn
      51: aload_0
      52: getfield      #4                  // Field prefixMappings:Ljava/util/List;
      55: invokeinterface #22,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      60: astore_3
      61: aload_3
      62: invokeinterface #23,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      67: ifeq          133
      70: aload_3
      71: invokeinterface #24,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      76: checkcast     #25                 // class com/google/javascript/jscomp/SourceMap$LocationMapping
      79: astore        4
      81: aload_1
      82: aload         4
      84: getfield      #26                 // Field com/google/javascript/jscomp/SourceMap$LocationMapping.prefix:Ljava/lang/String;
      87: invokevirtual #27                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      90: ifeq          130
      93: new           #28                 // class java/lang/StringBuilder
      96: dup
      97: invokespecial #29                 // Method java/lang/StringBuilder."<init>":()V
     100: aload         4
     102: getfield      #30                 // Field com/google/javascript/jscomp/SourceMap$LocationMapping.replacement:Ljava/lang/String;
     105: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     108: aload_1
     109: aload         4
     111: getfield      #26                 // Field com/google/javascript/jscomp/SourceMap$LocationMapping.prefix:Ljava/lang/String;
     114: invokevirtual #32                 // Method java/lang/String.length:()I
     117: invokevirtual #33                 // Method java/lang/String.substring:(I)Ljava/lang/String;
     120: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     123: invokevirtual #34                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     126: astore_2
     127: goto          133
     130: goto          61
     133: aload_2
     134: ifnonnull     139
     137: aload_1
     138: astore_2
     139: aload_0
     140: getfield      #6                  // Field sourceLocationFixupCache:Ljava/util/Map;
     143: aload_1
     144: aload_2
     145: invokeinterface #35,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     150: pop
     151: aload_2
     152: areturn

  public void appendTo(java.lang.Appendable, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #7                  // Field generator:Lcom/google/debugging/sourcemap/SourceMapGenerator;
       4: aload_1
       5: aload_0
       6: aload_2
       7: invokespecial #10                 // Method fixupSourceLocation:(Ljava/lang/String;)Ljava/lang/String;
      10: invokeinterface #36,  3           // InterfaceMethod com/google/debugging/sourcemap/SourceMapGenerator.appendTo:(Ljava/lang/Appendable;Ljava/lang/String;)V
      15: return

  public void reset();
    Code:
       0: aload_0
       1: getfield      #7                  // Field generator:Lcom/google/debugging/sourcemap/SourceMapGenerator;
       4: invokeinterface #37,  1           // InterfaceMethod com/google/debugging/sourcemap/SourceMapGenerator.reset:()V
       9: aload_0
      10: getfield      #6                  // Field sourceLocationFixupCache:Ljava/util/Map;
      13: invokeinterface #38,  1           // InterfaceMethod java/util/Map.clear:()V
      18: return

  public void setStartingPosition(int, int);
    Code:
       0: aload_0
       1: getfield      #7                  // Field generator:Lcom/google/debugging/sourcemap/SourceMapGenerator;
       4: iload_1
       5: iload_2
       6: invokeinterface #39,  3           // InterfaceMethod com/google/debugging/sourcemap/SourceMapGenerator.setStartingPosition:(II)V
      11: return

  public void setWrapperPrefix(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #7                  // Field generator:Lcom/google/debugging/sourcemap/SourceMapGenerator;
       4: aload_1
       5: invokeinterface #40,  2           // InterfaceMethod com/google/debugging/sourcemap/SourceMapGenerator.setWrapperPrefix:(Ljava/lang/String;)V
      10: return

  public void validate(boolean);
    Code:
       0: aload_0
       1: getfield      #7                  // Field generator:Lcom/google/debugging/sourcemap/SourceMapGenerator;
       4: iload_1
       5: invokeinterface #41,  2           // InterfaceMethod com/google/debugging/sourcemap/SourceMapGenerator.validate:(Z)V
      10: return

  public void setPrefixMappings(java.util.List<com.google.javascript.jscomp.SourceMap$LocationMapping>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field prefixMappings:Ljava/util/List;
       5: return

  com.google.javascript.jscomp.SourceMap(com.google.debugging.sourcemap.SourceMapGenerator, com.google.javascript.jscomp.SourceMap$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method "<init>":(Lcom/google/debugging/sourcemap/SourceMapGenerator;)V
       5: return
}
