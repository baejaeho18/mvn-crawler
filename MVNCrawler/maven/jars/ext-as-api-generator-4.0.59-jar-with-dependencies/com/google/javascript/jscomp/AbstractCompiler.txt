Compiled from "AbstractCompiler.java"
public abstract class com.google.javascript.jscomp.AbstractCompiler implements com.google.javascript.jscomp.SourceExcerptProvider {
  static final com.google.javascript.jscomp.DiagnosticType READ_ERROR;

  boolean needsEs6Runtime;

  private com.google.javascript.jscomp.AbstractCompiler$LifeCycleStage stage;

  protected boolean analyzeChangedScopesOnly;

  public com.google.javascript.jscomp.AbstractCompiler();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field needsEs6Runtime:Z
       9: aload_0
      10: getstatic     #3                  // Field com/google/javascript/jscomp/AbstractCompiler$LifeCycleStage.RAW:Lcom/google/javascript/jscomp/AbstractCompiler$LifeCycleStage;
      13: putfield      #4                  // Field stage:Lcom/google/javascript/jscomp/AbstractCompiler$LifeCycleStage;
      16: aload_0
      17: iconst_1
      18: putfield      #5                  // Field analyzeChangedScopesOnly:Z
      21: return

  void beforePass(java.lang.String);
    Code:
       0: return

  void afterPass(java.lang.String);
    Code:
       0: return

  public abstract com.google.javascript.jscomp.CompilerInput getInput(com.google.javascript.rhino.InputId);

  abstract com.google.javascript.jscomp.SourceFile getSourceFileByName(java.lang.String);

  abstract com.google.javascript.jscomp.CompilerInput newExternInput(java.lang.String);

  abstract com.google.javascript.jscomp.JSModuleGraph getModuleGraph();

  abstract java.util.List<com.google.javascript.jscomp.CompilerInput> getInputsInOrder();

  public abstract com.google.javascript.rhino.jstype.JSTypeRegistry getTypeRegistry();

  public abstract com.google.javascript.rhino.TypeIRegistry getTypeIRegistry();

  abstract com.google.javascript.jscomp.ScopeCreator getTypedScopeCreator();

  public abstract com.google.javascript.jscomp.Scope getTopScope();

  public abstract void report(com.google.javascript.jscomp.JSError);

  abstract void throwInternalError(java.lang.String, java.lang.Exception);

  public abstract com.google.javascript.jscomp.CodingConvention getCodingConvention();

  public abstract void reportCodeChange();

  abstract void addToDebugLog(java.lang.String);

  abstract void setCssRenamingMap(com.google.javascript.jscomp.CssRenamingMap);

  abstract com.google.javascript.jscomp.CssRenamingMap getCssRenamingMap();

  abstract com.google.javascript.rhino.Node getNodeForCodeInsertion(com.google.javascript.jscomp.JSModule);

  abstract com.google.javascript.jscomp.TypeValidator getTypeValidator();

  abstract com.google.javascript.jscomp.GlobalTypeInfo getSymbolTable();

  abstract void setSymbolTable(com.google.javascript.jscomp.GlobalTypeInfo);

  abstract com.google.javascript.rhino.Node parseSyntheticCode(java.lang.String);

  abstract com.google.javascript.rhino.Node parseSyntheticCode(java.lang.String, java.lang.String);

  abstract com.google.javascript.rhino.Node parseTestCode(java.lang.String);

  abstract java.lang.String toSource(com.google.javascript.rhino.Node);

  abstract com.google.javascript.rhino.ErrorReporter getDefaultErrorReporter();

  public abstract com.google.javascript.jscomp.type.ReverseAbstractInterpreter getReverseAbstractInterpreter();

  com.google.javascript.jscomp.AbstractCompiler$LifeCycleStage getLifeCycleStage();
    Code:
       0: aload_0
       1: getfield      #4                  // Field stage:Lcom/google/javascript/jscomp/AbstractCompiler$LifeCycleStage;
       4: areturn

  abstract com.google.common.base.Supplier<java.lang.String> getUniqueNameIdSupplier();

  abstract boolean hasHaltingErrors();

  abstract void addChangeHandler(com.google.javascript.jscomp.CodeChangeHandler);

  abstract void removeChangeHandler(com.google.javascript.jscomp.CodeChangeHandler);

  abstract void setScope(com.google.javascript.rhino.Node);

  abstract com.google.javascript.rhino.Node getJsRoot();

  abstract boolean hasScopeChanged(com.google.javascript.rhino.Node);

  abstract void reportChangeToEnclosingScope(com.google.javascript.rhino.Node);

  abstract boolean isIdeMode();

  abstract boolean acceptEcmaScript5();

  abstract boolean acceptConstKeyword();

  abstract com.google.javascript.jscomp.parsing.Config getParserConfig(com.google.javascript.jscomp.AbstractCompiler$ConfigContext);

  abstract boolean isTypeCheckingEnabled();

  abstract void prepareAst(com.google.javascript.rhino.Node);

  public abstract com.google.javascript.jscomp.ErrorManager getErrorManager();

  void setLifeCycleStage(com.google.javascript.jscomp.AbstractCompiler$LifeCycleStage);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field stage:Lcom/google/javascript/jscomp/AbstractCompiler$LifeCycleStage;
       5: return

  abstract boolean areNodesEqualForInlining(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node);

  abstract void setHasRegExpGlobalReferences(boolean);

  abstract boolean hasRegExpGlobalReferences();

  abstract com.google.javascript.jscomp.CheckLevel getErrorLevel(com.google.javascript.jscomp.JSError);

  abstract void process(com.google.javascript.jscomp.CompilerPass);

  abstract com.google.javascript.rhino.Node getRoot();

  abstract com.google.javascript.jscomp.CompilerOptions getOptions();

  abstract com.google.javascript.jscomp.CompilerOptions$LanguageMode getLanguageMode();

  abstract void setLanguageMode(com.google.javascript.jscomp.CompilerOptions$LanguageMode);

  abstract void updateGlobalVarReferences(java.util.Map<com.google.javascript.jscomp.Scope$Var, com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection>, com.google.javascript.rhino.Node);

  abstract com.google.javascript.jscomp.GlobalVarReferenceMap getGlobalVarReferences();

  abstract com.google.javascript.jscomp.CompilerInput getSynthesizedExternsInput();

  public abstract double getProgress();

  abstract java.lang.String getLastPassName();

  abstract void setProgress(double, java.lang.String);

  abstract com.google.javascript.rhino.Node ensureLibraryInjected(java.lang.String, boolean);

  abstract void setExternProperties(java.util.Set<java.lang.String>);

  abstract java.util.Set<java.lang.String> getExternProperties();

  abstract void addComments(java.lang.String, java.util.List<com.google.javascript.jscomp.parsing.parser.trees.Comment>);

  abstract java.util.List<com.google.javascript.jscomp.parsing.parser.trees.Comment> getComments(java.lang.String);

  abstract void setDefaultDefineValues(com.google.common.collect.ImmutableMap<java.lang.String, com.google.javascript.rhino.Node>);

  abstract com.google.common.collect.ImmutableMap<java.lang.String, com.google.javascript.rhino.Node> getDefaultDefineValues();

  static {};
    Code:
       0: ldc           #6                  // String JSC_READ_ERROR
       2: ldc           #7                  // String Cannot read: {0}
       4: invokestatic  #8                  // Method com/google/javascript/jscomp/DiagnosticType.error:(Ljava/lang/String;Ljava/lang/String;)Lcom/google/javascript/jscomp/DiagnosticType;
       7: putstatic     #9                  // Field READ_ERROR:Lcom/google/javascript/jscomp/DiagnosticType;
      10: return
}
