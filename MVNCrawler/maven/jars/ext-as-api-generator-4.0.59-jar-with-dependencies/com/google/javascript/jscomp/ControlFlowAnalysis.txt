Compiled from "ControlFlowAnalysis.java"
final class com.google.javascript.jscomp.ControlFlowAnalysis implements com.google.javascript.jscomp.NodeTraversal$Callback,com.google.javascript.jscomp.CompilerPass {
  private final com.google.javascript.jscomp.AbstractCompiler compiler;

  private com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> cfg;

  private java.util.Map<com.google.javascript.rhino.Node, java.lang.Integer> astPosition;

  private java.util.Map<com.google.javascript.jscomp.graph.DiGraph$DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph$Branch>, java.lang.Integer> nodePriorities;

  private final java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph$DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph$Branch>> priorityComparator;

  private int astPositionCounter;

  private int priorityCounter;

  private final boolean shouldTraverseFunctions;

  private final boolean edgeAnnotations;

  private com.google.javascript.rhino.Node root;

  private final java.util.Deque<com.google.javascript.rhino.Node> exceptionHandler;

  private final com.google.common.collect.Multimap<com.google.javascript.rhino.Node, com.google.javascript.rhino.Node> finallyMap;

  com.google.javascript.jscomp.ControlFlowAnalysis(com.google.javascript.jscomp.AbstractCompiler, boolean, boolean);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #3                  // class com/google/javascript/jscomp/ControlFlowAnalysis$1
       8: dup
       9: aload_0
      10: invokespecial #4                  // Method com/google/javascript/jscomp/ControlFlowAnalysis$1."<init>":(Lcom/google/javascript/jscomp/ControlFlowAnalysis;)V
      13: putfield      #5                  // Field priorityComparator:Ljava/util/Comparator;
      16: aload_0
      17: new           #6                  // class java/util/ArrayDeque
      20: dup
      21: invokespecial #7                  // Method java/util/ArrayDeque."<init>":()V
      24: putfield      #8                  // Field exceptionHandler:Ljava/util/Deque;
      27: aload_0
      28: invokestatic  #9                  // Method com/google/common/collect/HashMultimap.create:()Lcom/google/common/collect/HashMultimap;
      31: putfield      #10                 // Field finallyMap:Lcom/google/common/collect/Multimap;
      34: aload_0
      35: aload_1
      36: putfield      #11                 // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
      39: aload_0
      40: iload_2
      41: putfield      #12                 // Field shouldTraverseFunctions:Z
      44: aload_0
      45: iload_3
      46: putfield      #13                 // Field edgeAnnotations:Z
      49: return

  com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> getCfg();
    Code:
       0: aload_0
       1: getfield      #14                 // Field cfg:Lcom/google/javascript/jscomp/ControlFlowGraph;
       4: areturn

  public void process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: aload_2
       2: putfield      #15                 // Field root:Lcom/google/javascript/rhino/Node;
       5: aload_0
       6: iconst_0
       7: putfield      #16                 // Field astPositionCounter:I
      10: aload_0
      11: invokestatic  #17                 // Method com/google/common/collect/Maps.newHashMap:()Ljava/util/HashMap;
      14: putfield      #1                  // Field astPosition:Ljava/util/Map;
      17: aload_0
      18: invokestatic  #17                 // Method com/google/common/collect/Maps.newHashMap:()Ljava/util/HashMap;
      21: putfield      #18                 // Field nodePriorities:Ljava/util/Map;
      24: aload_0
      25: new           #19                 // class com/google/javascript/jscomp/ControlFlowAnalysis$AstControlFlowGraph
      28: dup
      29: aload_2
      30: invokestatic  #20                 // Method computeFallThrough:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
      33: aload_0
      34: getfield      #18                 // Field nodePriorities:Ljava/util/Map;
      37: aload_0
      38: getfield      #13                 // Field edgeAnnotations:Z
      41: aconst_null
      42: invokespecial #21                 // Method com/google/javascript/jscomp/ControlFlowAnalysis$AstControlFlowGraph."<init>":(Lcom/google/javascript/rhino/Node;Ljava/util/Map;ZLcom/google/javascript/jscomp/ControlFlowAnalysis$1;)V
      45: putfield      #14                 // Field cfg:Lcom/google/javascript/jscomp/ControlFlowGraph;
      48: aload_0
      49: getfield      #11                 // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
      52: aload_2
      53: aload_0
      54: invokestatic  #22                 // Method com/google/javascript/jscomp/NodeTraversal.traverse:(Lcom/google/javascript/jscomp/AbstractCompiler;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/NodeTraversal$Callback;)V
      57: aload_0
      58: getfield      #1                  // Field astPosition:Ljava/util/Map;
      61: aconst_null
      62: aload_0
      63: dup
      64: getfield      #16                 // Field astPositionCounter:I
      67: iconst_1
      68: iadd
      69: dup_x1
      70: putfield      #16                 // Field astPositionCounter:I
      73: invokestatic  #23                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      76: invokeinterface #24,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      81: pop
      82: aload_0
      83: iconst_0
      84: putfield      #25                 // Field priorityCounter:I
      87: aload_0
      88: getfield      #14                 // Field cfg:Lcom/google/javascript/jscomp/ControlFlowGraph;
      91: invokevirtual #26                 // Method com/google/javascript/jscomp/ControlFlowGraph.getEntry:()Lcom/google/javascript/jscomp/graph/DiGraph$DiGraphNode;
      94: astore_3
      95: aload_0
      96: aload_3
      97: invokespecial #27                 // Method prioritizeFromEntryNode:(Lcom/google/javascript/jscomp/graph/DiGraph$DiGraphNode;)V
     100: aload_0
     101: getfield      #12                 // Field shouldTraverseFunctions:Z
     104: ifeq          205
     107: aload_0
     108: getfield      #14                 // Field cfg:Lcom/google/javascript/jscomp/ControlFlowGraph;
     111: invokevirtual #28                 // Method com/google/javascript/jscomp/ControlFlowGraph.getDirectedGraphNodes:()Ljava/lang/Iterable;
     114: invokeinterface #29,  1           // InterfaceMethod java/lang/Iterable.iterator:()Ljava/util/Iterator;
     119: astore        4
     121: aload         4
     123: invokeinterface #30,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     128: ifeq          205
     131: aload         4
     133: invokeinterface #31,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     138: checkcast     #32                 // class com/google/javascript/jscomp/graph/DiGraph$DiGraphNode
     141: astore        5
     143: aload         5
     145: invokeinterface #33,  1           // InterfaceMethod com/google/javascript/jscomp/graph/DiGraph$DiGraphNode.getValue:()Ljava/lang/Object;
     150: checkcast     #34                 // class com/google/javascript/rhino/Node
     153: astore        6
     155: aload         6
     157: ifnull        202
     160: aload         6
     162: invokevirtual #35                 // Method com/google/javascript/rhino/Node.isFunction:()Z
     165: ifeq          202
     168: aload_0
     169: getfield      #18                 // Field nodePriorities:Ljava/util/Map;
     172: aload         5
     174: invokeinterface #36,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
     179: ifeq          188
     182: aload         5
     184: aload_3
     185: if_acmpne     192
     188: iconst_1
     189: goto          193
     192: iconst_0
     193: invokestatic  #37                 // Method com/google/common/base/Preconditions.checkState:(Z)V
     196: aload_0
     197: aload         5
     199: invokespecial #27                 // Method prioritizeFromEntryNode:(Lcom/google/javascript/jscomp/graph/DiGraph$DiGraphNode;)V
     202: goto          121
     205: aload_0
     206: getfield      #14                 // Field cfg:Lcom/google/javascript/jscomp/ControlFlowGraph;
     209: invokevirtual #28                 // Method com/google/javascript/jscomp/ControlFlowGraph.getDirectedGraphNodes:()Ljava/lang/Iterable;
     212: invokeinterface #29,  1           // InterfaceMethod java/lang/Iterable.iterator:()Ljava/util/Iterator;
     217: astore        4
     219: aload         4
     221: invokeinterface #30,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     226: ifeq          284
     229: aload         4
     231: invokeinterface #31,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     236: checkcast     #32                 // class com/google/javascript/jscomp/graph/DiGraph$DiGraphNode
     239: astore        5
     241: aload_0
     242: getfield      #18                 // Field nodePriorities:Ljava/util/Map;
     245: aload         5
     247: invokeinterface #36,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
     252: ifne          281
     255: aload_0
     256: getfield      #18                 // Field nodePriorities:Ljava/util/Map;
     259: aload         5
     261: aload_0
     262: dup
     263: getfield      #25                 // Field priorityCounter:I
     266: iconst_1
     267: iadd
     268: dup_x1
     269: putfield      #25                 // Field priorityCounter:I
     272: invokestatic  #23                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     275: invokeinterface #24,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     280: pop
     281: goto          219
     284: aload_0
     285: getfield      #18                 // Field nodePriorities:Ljava/util/Map;
     288: aload_0
     289: getfield      #14                 // Field cfg:Lcom/google/javascript/jscomp/ControlFlowGraph;
     292: invokevirtual #38                 // Method com/google/javascript/jscomp/ControlFlowGraph.getImplicitReturn:()Lcom/google/javascript/jscomp/graph/DiGraph$DiGraphNode;
     295: aload_0
     296: dup
     297: getfield      #25                 // Field priorityCounter:I
     300: iconst_1
     301: iadd
     302: dup_x1
     303: putfield      #25                 // Field priorityCounter:I
     306: invokestatic  #23                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     309: invokeinterface #24,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     314: pop
     315: return

  private void prioritizeFromEntryNode(com.google.javascript.jscomp.graph.DiGraph$DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph$Branch>);
    Code:
       0: new           #39                 // class java/util/PriorityQueue
       3: dup
       4: bipush        10
       6: aload_0
       7: getfield      #5                  // Field priorityComparator:Ljava/util/Comparator;
      10: invokespecial #40                 // Method java/util/PriorityQueue."<init>":(ILjava/util/Comparator;)V
      13: astore_2
      14: aload_2
      15: aload_1
      16: invokevirtual #41                 // Method java/util/PriorityQueue.add:(Ljava/lang/Object;)Z
      19: pop
      20: aload_2
      21: invokevirtual #42                 // Method java/util/PriorityQueue.isEmpty:()Z
      24: ifne          96
      27: aload_2
      28: invokevirtual #43                 // Method java/util/PriorityQueue.remove:()Ljava/lang/Object;
      31: checkcast     #32                 // class com/google/javascript/jscomp/graph/DiGraph$DiGraphNode
      34: astore_3
      35: aload_0
      36: getfield      #18                 // Field nodePriorities:Ljava/util/Map;
      39: aload_3
      40: invokeinterface #36,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      45: ifeq          51
      48: goto          20
      51: aload_0
      52: getfield      #18                 // Field nodePriorities:Ljava/util/Map;
      55: aload_3
      56: aload_0
      57: dup
      58: getfield      #25                 // Field priorityCounter:I
      61: iconst_1
      62: iadd
      63: dup_x1
      64: putfield      #25                 // Field priorityCounter:I
      67: invokestatic  #23                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      70: invokeinterface #24,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      75: pop
      76: aload_0
      77: getfield      #14                 // Field cfg:Lcom/google/javascript/jscomp/ControlFlowGraph;
      80: aload_3
      81: invokevirtual #44                 // Method com/google/javascript/jscomp/ControlFlowGraph.getDirectedSuccNodes:(Lcom/google/javascript/jscomp/graph/DiGraph$DiGraphNode;)Ljava/util/List;
      84: astore        4
      86: aload_2
      87: aload         4
      89: invokevirtual #45                 // Method java/util/PriorityQueue.addAll:(Ljava/util/Collection;)Z
      92: pop
      93: goto          20
      96: return

  public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: getfield      #1                  // Field astPosition:Ljava/util/Map;
       4: aload_2
       5: aload_0
       6: dup
       7: getfield      #16                 // Field astPositionCounter:I
      10: dup_x1
      11: iconst_1
      12: iadd
      13: putfield      #16                 // Field astPositionCounter:I
      16: invokestatic  #23                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      19: invokeinterface #24,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      24: pop
      25: aload_2
      26: invokevirtual #46                 // Method com/google/javascript/rhino/Node.getType:()I
      29: lookupswitch  { // 2
                    77: 93
                   105: 56
               default: 105
          }
      56: aload_0
      57: getfield      #12                 // Field shouldTraverseFunctions:Z
      60: ifne          79
      63: aload_2
      64: aload_0
      65: getfield      #14                 // Field cfg:Lcom/google/javascript/jscomp/ControlFlowGraph;
      68: invokevirtual #26                 // Method com/google/javascript/jscomp/ControlFlowGraph.getEntry:()Lcom/google/javascript/jscomp/graph/DiGraph$DiGraphNode;
      71: invokeinterface #33,  1           // InterfaceMethod com/google/javascript/jscomp/graph/DiGraph$DiGraphNode.getValue:()Ljava/lang/Object;
      76: if_acmpne     91
      79: aload_0
      80: getfield      #8                  // Field exceptionHandler:Ljava/util/Deque;
      83: aload_2
      84: invokeinterface #47,  2           // InterfaceMethod java/util/Deque.push:(Ljava/lang/Object;)V
      89: iconst_1
      90: ireturn
      91: iconst_0
      92: ireturn
      93: aload_0
      94: getfield      #8                  // Field exceptionHandler:Ljava/util/Deque;
      97: aload_2
      98: invokeinterface #47,  2           // InterfaceMethod java/util/Deque.push:(Ljava/lang/Object;)V
     103: iconst_1
     104: ireturn
     105: aload_3
     106: ifnull        395
     109: aload_3
     110: invokevirtual #46                 // Method com/google/javascript/rhino/Node.getType:()I
     113: lookupswitch  { // 17
                     4: 339
                    49: 339
                    77: 341
                   105: 319
                   108: 274
                   110: 305
                   111: 305
                   113: 274
                   114: 288
                   115: 260
                   116: 339
                   117: 339
                   118: 339
                   119: 274
                   120: 305
                   126: 305
                   130: 339
               default: 395
          }
     260: aload_2
     261: aload_3
     262: invokevirtual #48                 // Method com/google/javascript/rhino/Node.getLastChild:()Lcom/google/javascript/rhino/Node;
     265: if_acmpne     272
     268: iconst_1
     269: goto          273
     272: iconst_0
     273: ireturn
     274: aload_2
     275: aload_3
     276: invokevirtual #49                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
     279: if_acmpeq     286
     282: iconst_1
     283: goto          287
     286: iconst_0
     287: ireturn
     288: aload_2
     289: aload_3
     290: invokevirtual #49                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
     293: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
     296: if_acmpeq     303
     299: iconst_1
     300: goto          304
     303: iconst_0
     304: ireturn
     305: aload_2
     306: aload_3
     307: invokevirtual #49                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
     310: if_acmpeq     317
     313: iconst_1
     314: goto          318
     317: iconst_0
     318: ireturn
     319: aload_2
     320: aload_3
     321: invokevirtual #49                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
     324: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
     327: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
     330: if_acmpne     337
     333: iconst_1
     334: goto          338
     337: iconst_0
     338: ireturn
     339: iconst_0
     340: ireturn
     341: aload_3
     342: invokestatic  #51                 // Method com/google/javascript/jscomp/NodeUtil.hasFinally:(Lcom/google/javascript/rhino/Node;)Z
     345: ifne          356
     348: aload_2
     349: aload_3
     350: invokestatic  #52                 // Method com/google/javascript/jscomp/NodeUtil.getCatchBlock:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
     353: if_acmpeq     364
     356: aload_3
     357: aload_2
     358: invokestatic  #53                 // Method com/google/javascript/jscomp/NodeUtil.isTryFinallyNode:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)Z
     361: ifeq          395
     364: aload_0
     365: getfield      #8                  // Field exceptionHandler:Ljava/util/Deque;
     368: invokeinterface #54,  1           // InterfaceMethod java/util/Deque.peek:()Ljava/lang/Object;
     373: aload_3
     374: if_acmpne     381
     377: iconst_1
     378: goto          382
     381: iconst_0
     382: invokestatic  #37                 // Method com/google/common/base/Preconditions.checkState:(Z)V
     385: aload_0
     386: getfield      #8                  // Field exceptionHandler:Ljava/util/Deque;
     389: invokeinterface #55,  1           // InterfaceMethod java/util/Deque.pop:()Ljava/lang/Object;
     394: pop
     395: iconst_1
     396: ireturn

  public void visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node);
    Code:
       0: aload_2
       1: invokevirtual #46                 // Method com/google/javascript/rhino/Node.getType:()I
       4: lookupswitch  { // 19
                     4: 258
                    49: 228
                    77: 234
                   105: 216
                   108: 168
                   110: 192
                   111: 198
                   112: 204
                   113: 174
                   114: 180
                   115: 186
                   116: 246
                   117: 252
                   119: 264
                   120: 240
                   125: 210
                   126: 270
                   130: 222
                   132: 210
               default: 271
          }
     168: aload_0
     169: aload_2
     170: invokespecial #56                 // Method handleIf:(Lcom/google/javascript/rhino/Node;)V
     173: return
     174: aload_0
     175: aload_2
     176: invokespecial #57                 // Method handleWhile:(Lcom/google/javascript/rhino/Node;)V
     179: return
     180: aload_0
     181: aload_2
     182: invokespecial #58                 // Method handleDo:(Lcom/google/javascript/rhino/Node;)V
     185: return
     186: aload_0
     187: aload_2
     188: invokespecial #59                 // Method handleFor:(Lcom/google/javascript/rhino/Node;)V
     191: return
     192: aload_0
     193: aload_2
     194: invokespecial #60                 // Method handleSwitch:(Lcom/google/javascript/rhino/Node;)V
     197: return
     198: aload_0
     199: aload_2
     200: invokespecial #61                 // Method handleCase:(Lcom/google/javascript/rhino/Node;)V
     203: return
     204: aload_0
     205: aload_2
     206: invokespecial #62                 // Method handleDefault:(Lcom/google/javascript/rhino/Node;)V
     209: return
     210: aload_0
     211: aload_2
     212: invokespecial #63                 // Method handleStmtList:(Lcom/google/javascript/rhino/Node;)V
     215: return
     216: aload_0
     217: aload_2
     218: invokespecial #64                 // Method handleFunction:(Lcom/google/javascript/rhino/Node;)V
     221: return
     222: aload_0
     223: aload_2
     224: invokespecial #65                 // Method handleExpr:(Lcom/google/javascript/rhino/Node;)V
     227: return
     228: aload_0
     229: aload_2
     230: invokespecial #66                 // Method handleThrow:(Lcom/google/javascript/rhino/Node;)V
     233: return
     234: aload_0
     235: aload_2
     236: invokespecial #67                 // Method handleTry:(Lcom/google/javascript/rhino/Node;)V
     239: return
     240: aload_0
     241: aload_2
     242: invokespecial #68                 // Method handleCatch:(Lcom/google/javascript/rhino/Node;)V
     245: return
     246: aload_0
     247: aload_2
     248: invokespecial #69                 // Method handleBreak:(Lcom/google/javascript/rhino/Node;)V
     251: return
     252: aload_0
     253: aload_2
     254: invokespecial #70                 // Method handleContinue:(Lcom/google/javascript/rhino/Node;)V
     257: return
     258: aload_0
     259: aload_2
     260: invokespecial #71                 // Method handleReturn:(Lcom/google/javascript/rhino/Node;)V
     263: return
     264: aload_0
     265: aload_2
     266: invokespecial #72                 // Method handleWith:(Lcom/google/javascript/rhino/Node;)V
     269: return
     270: return
     271: aload_0
     272: aload_2
     273: invokespecial #73                 // Method handleStmt:(Lcom/google/javascript/rhino/Node;)V
     276: return

  private void handleIf(com.google.javascript.rhino.Node);
    Code:
       0: aload_1
       1: invokevirtual #49                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
       4: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
       7: astore_2
       8: aload_2
       9: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
      12: astore_3
      13: aload_0
      14: aload_1
      15: getstatic     #74                 // Field com/google/javascript/jscomp/ControlFlowGraph$Branch.ON_TRUE:Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;
      18: aload_2
      19: invokestatic  #20                 // Method computeFallThrough:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
      22: invokespecial #75                 // Method createEdge:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;Lcom/google/javascript/rhino/Node;)V
      25: aload_3
      26: ifnonnull     45
      29: aload_0
      30: aload_1
      31: getstatic     #76                 // Field com/google/javascript/jscomp/ControlFlowGraph$Branch.ON_FALSE:Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;
      34: aload_1
      35: aload_0
      36: invokestatic  #77                 // Method computeFollowNode:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowAnalysis;)Lcom/google/javascript/rhino/Node;
      39: invokespecial #75                 // Method createEdge:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;Lcom/google/javascript/rhino/Node;)V
      42: goto          57
      45: aload_0
      46: aload_1
      47: getstatic     #76                 // Field com/google/javascript/jscomp/ControlFlowGraph$Branch.ON_FALSE:Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;
      50: aload_3
      51: invokestatic  #20                 // Method computeFallThrough:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
      54: invokespecial #75                 // Method createEdge:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;Lcom/google/javascript/rhino/Node;)V
      57: aload_0
      58: aload_1
      59: aload_1
      60: invokestatic  #78                 // Method com/google/javascript/jscomp/NodeUtil.getConditionExpression:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
      63: invokespecial #79                 // Method connectToPossibleExceptionHandler:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V
      66: return

  private void handleWhile(com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #74                 // Field com/google/javascript/jscomp/ControlFlowGraph$Branch.ON_TRUE:Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;
       5: aload_1
       6: invokevirtual #49                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
       9: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
      12: invokestatic  #20                 // Method computeFallThrough:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
      15: invokespecial #75                 // Method createEdge:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;Lcom/google/javascript/rhino/Node;)V
      18: aload_0
      19: aload_1
      20: getstatic     #76                 // Field com/google/javascript/jscomp/ControlFlowGraph$Branch.ON_FALSE:Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;
      23: aload_1
      24: aload_0
      25: invokestatic  #77                 // Method computeFollowNode:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowAnalysis;)Lcom/google/javascript/rhino/Node;
      28: invokespecial #75                 // Method createEdge:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;Lcom/google/javascript/rhino/Node;)V
      31: aload_0
      32: aload_1
      33: aload_1
      34: invokestatic  #78                 // Method com/google/javascript/jscomp/NodeUtil.getConditionExpression:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
      37: invokespecial #79                 // Method connectToPossibleExceptionHandler:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V
      40: return

  private void handleDo(com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #74                 // Field com/google/javascript/jscomp/ControlFlowGraph$Branch.ON_TRUE:Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;
       5: aload_1
       6: invokevirtual #49                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
       9: invokestatic  #20                 // Method computeFallThrough:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
      12: invokespecial #75                 // Method createEdge:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;Lcom/google/javascript/rhino/Node;)V
      15: aload_0
      16: aload_1
      17: getstatic     #76                 // Field com/google/javascript/jscomp/ControlFlowGraph$Branch.ON_FALSE:Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;
      20: aload_1
      21: aload_0
      22: invokestatic  #77                 // Method computeFollowNode:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowAnalysis;)Lcom/google/javascript/rhino/Node;
      25: invokespecial #75                 // Method createEdge:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;Lcom/google/javascript/rhino/Node;)V
      28: aload_0
      29: aload_1
      30: aload_1
      31: invokestatic  #78                 // Method com/google/javascript/jscomp/NodeUtil.getConditionExpression:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
      34: invokespecial #79                 // Method connectToPossibleExceptionHandler:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V
      37: return

  private void handleFor(com.google.javascript.rhino.Node);
    Code:
       0: aload_1
       1: invokevirtual #80                 // Method com/google/javascript/rhino/Node.getChildCount:()I
       4: iconst_4
       5: if_icmpne     106
       8: aload_1
       9: invokevirtual #49                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
      12: astore_2
      13: aload_2
      14: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
      17: astore_3
      18: aload_3
      19: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
      22: astore        4
      24: aload         4
      26: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
      29: astore        5
      31: aload_0
      32: aload_2
      33: getstatic     #81                 // Field com/google/javascript/jscomp/ControlFlowGraph$Branch.UNCOND:Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;
      36: aload_1
      37: invokespecial #75                 // Method createEdge:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;Lcom/google/javascript/rhino/Node;)V
      40: aload_0
      41: aload_1
      42: getstatic     #74                 // Field com/google/javascript/jscomp/ControlFlowGraph$Branch.ON_TRUE:Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;
      45: aload         5
      47: invokestatic  #20                 // Method computeFallThrough:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
      50: invokespecial #75                 // Method createEdge:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;Lcom/google/javascript/rhino/Node;)V
      53: aload_3
      54: invokevirtual #82                 // Method com/google/javascript/rhino/Node.isEmpty:()Z
      57: ifne          73
      60: aload_0
      61: aload_1
      62: getstatic     #76                 // Field com/google/javascript/jscomp/ControlFlowGraph$Branch.ON_FALSE:Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;
      65: aload_1
      66: aload_0
      67: invokestatic  #77                 // Method computeFollowNode:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowAnalysis;)Lcom/google/javascript/rhino/Node;
      70: invokespecial #75                 // Method createEdge:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;Lcom/google/javascript/rhino/Node;)V
      73: aload_0
      74: aload         4
      76: getstatic     #81                 // Field com/google/javascript/jscomp/ControlFlowGraph$Branch.UNCOND:Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;
      79: aload_1
      80: invokespecial #75                 // Method createEdge:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;Lcom/google/javascript/rhino/Node;)V
      83: aload_0
      84: aload_2
      85: aload_2
      86: invokespecial #79                 // Method connectToPossibleExceptionHandler:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V
      89: aload_0
      90: aload_1
      91: aload_3
      92: invokespecial #79                 // Method connectToPossibleExceptionHandler:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V
      95: aload_0
      96: aload         4
      98: aload         4
     100: invokespecial #79                 // Method connectToPossibleExceptionHandler:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V
     103: goto          163
     106: aload_1
     107: invokevirtual #49                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
     110: astore_2
     111: aload_2
     112: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
     115: astore_3
     116: aload_3
     117: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
     120: astore        4
     122: aload_0
     123: aload_3
     124: getstatic     #81                 // Field com/google/javascript/jscomp/ControlFlowGraph$Branch.UNCOND:Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;
     127: aload_1
     128: invokespecial #75                 // Method createEdge:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;Lcom/google/javascript/rhino/Node;)V
     131: aload_0
     132: aload_1
     133: getstatic     #74                 // Field com/google/javascript/jscomp/ControlFlowGraph$Branch.ON_TRUE:Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;
     136: aload         4
     138: invokestatic  #20                 // Method computeFallThrough:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
     141: invokespecial #75                 // Method createEdge:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;Lcom/google/javascript/rhino/Node;)V
     144: aload_0
     145: aload_1
     146: getstatic     #76                 // Field com/google/javascript/jscomp/ControlFlowGraph$Branch.ON_FALSE:Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;
     149: aload_1
     150: aload_0
     151: invokestatic  #77                 // Method computeFollowNode:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowAnalysis;)Lcom/google/javascript/rhino/Node;
     154: invokespecial #75                 // Method createEdge:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;Lcom/google/javascript/rhino/Node;)V
     157: aload_0
     158: aload_1
     159: aload_3
     160: invokespecial #79                 // Method connectToPossibleExceptionHandler:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V
     163: return

  private void handleSwitch(com.google.javascript.rhino.Node);
    Code:
       0: aload_1
       1: invokevirtual #49                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
       4: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
       7: iconst_2
       8: newarray       int
      10: dup
      11: iconst_0
      12: bipush        111
      14: iastore
      15: dup
      16: iconst_1
      17: bipush        124
      19: iastore
      20: invokestatic  #84                 // Method getNextSiblingOfType:(Lcom/google/javascript/rhino/Node;[I)Lcom/google/javascript/rhino/Node;
      23: astore_2
      24: aload_2
      25: ifnull        40
      28: aload_0
      29: aload_1
      30: getstatic     #81                 // Field com/google/javascript/jscomp/ControlFlowGraph$Branch.UNCOND:Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;
      33: aload_2
      34: invokespecial #75                 // Method createEdge:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;Lcom/google/javascript/rhino/Node;)V
      37: goto          81
      40: aload_1
      41: invokevirtual #49                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
      44: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
      47: ifnull        68
      50: aload_0
      51: aload_1
      52: getstatic     #81                 // Field com/google/javascript/jscomp/ControlFlowGraph$Branch.UNCOND:Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;
      55: aload_1
      56: invokevirtual #49                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
      59: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
      62: invokespecial #75                 // Method createEdge:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;Lcom/google/javascript/rhino/Node;)V
      65: goto          81
      68: aload_0
      69: aload_1
      70: getstatic     #81                 // Field com/google/javascript/jscomp/ControlFlowGraph$Branch.UNCOND:Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;
      73: aload_1
      74: aload_0
      75: invokestatic  #77                 // Method computeFollowNode:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowAnalysis;)Lcom/google/javascript/rhino/Node;
      78: invokespecial #75                 // Method createEdge:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;Lcom/google/javascript/rhino/Node;)V
      81: aload_0
      82: aload_1
      83: aload_1
      84: invokevirtual #49                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
      87: invokespecial #79                 // Method connectToPossibleExceptionHandler:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V
      90: return

  private void handleCase(com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #74                 // Field com/google/javascript/jscomp/ControlFlowGraph$Branch.ON_TRUE:Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;
       5: aload_1
       6: invokevirtual #49                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
       9: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
      12: invokespecial #75                 // Method createEdge:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;Lcom/google/javascript/rhino/Node;)V
      15: aload_1
      16: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
      19: iconst_1
      20: newarray       int
      22: dup
      23: iconst_0
      24: bipush        111
      26: iastore
      27: invokestatic  #84                 // Method getNextSiblingOfType:(Lcom/google/javascript/rhino/Node;[I)Lcom/google/javascript/rhino/Node;
      30: astore_2
      31: aload_2
      32: ifnull        54
      35: aload_2
      36: invokevirtual #85                 // Method com/google/javascript/rhino/Node.isCase:()Z
      39: invokestatic  #37                 // Method com/google/common/base/Preconditions.checkState:(Z)V
      42: aload_0
      43: aload_1
      44: getstatic     #76                 // Field com/google/javascript/jscomp/ControlFlowGraph$Branch.ON_FALSE:Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;
      47: aload_2
      48: invokespecial #75                 // Method createEdge:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;Lcom/google/javascript/rhino/Node;)V
      51: goto          110
      54: aload_1
      55: invokevirtual #86                 // Method com/google/javascript/rhino/Node.getParent:()Lcom/google/javascript/rhino/Node;
      58: astore_3
      59: aload_3
      60: invokevirtual #49                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
      63: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
      66: iconst_1
      67: newarray       int
      69: dup
      70: iconst_0
      71: bipush        112
      73: iastore
      74: invokestatic  #84                 // Method getNextSiblingOfType:(Lcom/google/javascript/rhino/Node;[I)Lcom/google/javascript/rhino/Node;
      77: astore        4
      79: aload         4
      81: ifnull        97
      84: aload_0
      85: aload_1
      86: getstatic     #76                 // Field com/google/javascript/jscomp/ControlFlowGraph$Branch.ON_FALSE:Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;
      89: aload         4
      91: invokespecial #75                 // Method createEdge:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;Lcom/google/javascript/rhino/Node;)V
      94: goto          110
      97: aload_0
      98: aload_1
      99: getstatic     #76                 // Field com/google/javascript/jscomp/ControlFlowGraph$Branch.ON_FALSE:Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;
     102: aload_1
     103: aload_0
     104: invokestatic  #77                 // Method computeFollowNode:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowAnalysis;)Lcom/google/javascript/rhino/Node;
     107: invokespecial #75                 // Method createEdge:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;Lcom/google/javascript/rhino/Node;)V
     110: aload_0
     111: aload_1
     112: aload_1
     113: invokevirtual #49                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
     116: invokespecial #79                 // Method connectToPossibleExceptionHandler:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V
     119: return

  private void handleDefault(com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #81                 // Field com/google/javascript/jscomp/ControlFlowGraph$Branch.UNCOND:Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;
       5: aload_1
       6: invokevirtual #49                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
       9: invokespecial #75                 // Method createEdge:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;Lcom/google/javascript/rhino/Node;)V
      12: return

  private void handleWith(com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #81                 // Field com/google/javascript/jscomp/ControlFlowGraph$Branch.UNCOND:Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;
       5: aload_1
       6: invokevirtual #48                 // Method com/google/javascript/rhino/Node.getLastChild:()Lcom/google/javascript/rhino/Node;
       9: invokespecial #75                 // Method createEdge:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;Lcom/google/javascript/rhino/Node;)V
      12: aload_0
      13: aload_1
      14: aload_1
      15: invokevirtual #49                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
      18: invokespecial #79                 // Method connectToPossibleExceptionHandler:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V
      21: return

  private void handleStmtList(com.google.javascript.rhino.Node);
    Code:
       0: aload_1
       1: invokevirtual #86                 // Method com/google/javascript/rhino/Node.getParent:()Lcom/google/javascript/rhino/Node;
       4: astore_2
       5: aload_1
       6: invokevirtual #87                 // Method com/google/javascript/rhino/Node.isBlock:()Z
       9: ifeq          39
      12: aload_2
      13: ifnull        39
      16: aload_2
      17: invokevirtual #88                 // Method com/google/javascript/rhino/Node.isTry:()Z
      20: ifeq          39
      23: aload_2
      24: invokestatic  #52                 // Method com/google/javascript/jscomp/NodeUtil.getCatchBlock:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
      27: aload_1
      28: if_acmpne     39
      31: aload_1
      32: invokestatic  #89                 // Method com/google/javascript/jscomp/NodeUtil.hasCatchHandler:(Lcom/google/javascript/rhino/Node;)Z
      35: ifne          39
      38: return
      39: aload_1
      40: invokevirtual #49                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
      43: astore_3
      44: aload_3
      45: ifnull        63
      48: aload_3
      49: invokevirtual #35                 // Method com/google/javascript/rhino/Node.isFunction:()Z
      52: ifeq          63
      55: aload_3
      56: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
      59: astore_3
      60: goto          44
      63: aload_3
      64: ifnull        82
      67: aload_0
      68: aload_1
      69: getstatic     #81                 // Field com/google/javascript/jscomp/ControlFlowGraph$Branch.UNCOND:Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;
      72: aload_3
      73: invokestatic  #20                 // Method computeFallThrough:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
      76: invokespecial #75                 // Method createEdge:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;Lcom/google/javascript/rhino/Node;)V
      79: goto          95
      82: aload_0
      83: aload_1
      84: getstatic     #81                 // Field com/google/javascript/jscomp/ControlFlowGraph$Branch.UNCOND:Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;
      87: aload_1
      88: aload_0
      89: invokestatic  #77                 // Method computeFollowNode:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowAnalysis;)Lcom/google/javascript/rhino/Node;
      92: invokespecial #75                 // Method createEdge:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;Lcom/google/javascript/rhino/Node;)V
      95: aload_2
      96: ifnull        166
      99: aload_2
     100: invokevirtual #46                 // Method com/google/javascript/rhino/Node.getType:()I
     103: lookupswitch  { // 3
                    77: 136
                   111: 136
                   112: 136
               default: 139
          }
     136: goto          166
     139: aload_1
     140: invokevirtual #87                 // Method com/google/javascript/rhino/Node.isBlock:()Z
     143: ifeq          166
     146: aload_1
     147: invokevirtual #90                 // Method com/google/javascript/rhino/Node.isSyntheticBlock:()Z
     150: ifeq          166
     153: aload_0
     154: aload_1
     155: getstatic     #91                 // Field com/google/javascript/jscomp/ControlFlowGraph$Branch.SYN_BLOCK:Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;
     158: aload_1
     159: aload_0
     160: invokestatic  #77                 // Method computeFollowNode:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowAnalysis;)Lcom/google/javascript/rhino/Node;
     163: invokespecial #75                 // Method createEdge:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;Lcom/google/javascript/rhino/Node;)V
     166: return

  private void handleFunction(com.google.javascript.rhino.Node);
    Code:
       0: aload_1
       1: invokevirtual #80                 // Method com/google/javascript/rhino/Node.getChildCount:()I
       4: iconst_3
       5: if_icmplt     12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: invokestatic  #37                 // Method com/google/common/base/Preconditions.checkState:(Z)V
      16: aload_0
      17: aload_1
      18: getstatic     #81                 // Field com/google/javascript/jscomp/ControlFlowGraph$Branch.UNCOND:Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;
      21: aload_1
      22: invokevirtual #49                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
      25: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
      28: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
      31: invokestatic  #20                 // Method computeFallThrough:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
      34: invokespecial #75                 // Method createEdge:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;Lcom/google/javascript/rhino/Node;)V
      37: aload_0
      38: getfield      #8                  // Field exceptionHandler:Ljava/util/Deque;
      41: invokeinterface #54,  1           // InterfaceMethod java/util/Deque.peek:()Ljava/lang/Object;
      46: aload_1
      47: if_acmpne     54
      50: iconst_1
      51: goto          55
      54: iconst_0
      55: invokestatic  #37                 // Method com/google/common/base/Preconditions.checkState:(Z)V
      58: aload_0
      59: getfield      #8                  // Field exceptionHandler:Ljava/util/Deque;
      62: invokeinterface #55,  1           // InterfaceMethod java/util/Deque.pop:()Ljava/lang/Object;
      67: pop
      68: return

  private void handleExpr(com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #81                 // Field com/google/javascript/jscomp/ControlFlowGraph$Branch.UNCOND:Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;
       5: aload_1
       6: aload_0
       7: invokestatic  #77                 // Method computeFollowNode:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowAnalysis;)Lcom/google/javascript/rhino/Node;
      10: invokespecial #75                 // Method createEdge:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;Lcom/google/javascript/rhino/Node;)V
      13: aload_0
      14: aload_1
      15: aload_1
      16: invokespecial #79                 // Method connectToPossibleExceptionHandler:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V
      19: return

  private void handleThrow(com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: aload_1
       2: aload_1
       3: invokespecial #79                 // Method connectToPossibleExceptionHandler:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V
       6: return

  private void handleTry(com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #81                 // Field com/google/javascript/jscomp/ControlFlowGraph$Branch.UNCOND:Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;
       5: aload_1
       6: invokevirtual #49                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
       9: invokespecial #75                 // Method createEdge:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;Lcom/google/javascript/rhino/Node;)V
      12: return

  private void handleCatch(com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #81                 // Field com/google/javascript/jscomp/ControlFlowGraph$Branch.UNCOND:Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;
       5: aload_1
       6: invokevirtual #48                 // Method com/google/javascript/rhino/Node.getLastChild:()Lcom/google/javascript/rhino/Node;
       9: invokespecial #75                 // Method createEdge:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;Lcom/google/javascript/rhino/Node;)V
      12: return

  private void handleBreak(com.google.javascript.rhino.Node);
    Code:
       0: aconst_null
       1: astore_2
       2: aload_1
       3: invokevirtual #92                 // Method com/google/javascript/rhino/Node.hasChildren:()Z
       6: ifeq          17
       9: aload_1
      10: invokevirtual #49                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
      13: invokevirtual #93                 // Method com/google/javascript/rhino/Node.getString:()Ljava/lang/String;
      16: astore_2
      17: aconst_null
      18: astore        4
      20: aload_1
      21: invokevirtual #86                 // Method com/google/javascript/rhino/Node.getParent:()Lcom/google/javascript/rhino/Node;
      24: astore        6
      26: aload_1
      27: astore_3
      28: aload_1
      29: astore        5
      31: aload_3
      32: aload_2
      33: invokestatic  #94                 // Method isBreakTarget:(Lcom/google/javascript/rhino/Node;Ljava/lang/String;)Z
      36: ifne          151
      39: aload_3
      40: invokevirtual #88                 // Method com/google/javascript/rhino/Node.isTry:()Z
      43: ifeq          109
      46: aload_3
      47: invokestatic  #51                 // Method com/google/javascript/jscomp/NodeUtil.hasFinally:(Lcom/google/javascript/rhino/Node;)Z
      50: ifeq          109
      53: aload_3
      54: invokevirtual #48                 // Method com/google/javascript/rhino/Node.getLastChild:()Lcom/google/javascript/rhino/Node;
      57: aload         4
      59: if_acmpeq     109
      62: aload         5
      64: aload_1
      65: if_acmpne     87
      68: aload_0
      69: aload         5
      71: getstatic     #81                 // Field com/google/javascript/jscomp/ControlFlowGraph$Branch.UNCOND:Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;
      74: aload_3
      75: invokevirtual #48                 // Method com/google/javascript/rhino/Node.getLastChild:()Lcom/google/javascript/rhino/Node;
      78: invokestatic  #20                 // Method computeFallThrough:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
      81: invokespecial #75                 // Method createEdge:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;Lcom/google/javascript/rhino/Node;)V
      84: goto          106
      87: aload_0
      88: getfield      #10                 // Field finallyMap:Lcom/google/common/collect/Multimap;
      91: aload         5
      93: aload_3
      94: invokevirtual #48                 // Method com/google/javascript/rhino/Node.getLastChild:()Lcom/google/javascript/rhino/Node;
      97: invokestatic  #20                 // Method computeFallThrough:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
     100: invokeinterface #95,  3           // InterfaceMethod com/google/common/collect/Multimap.put:(Ljava/lang/Object;Ljava/lang/Object;)Z
     105: pop
     106: aload_3
     107: astore        5
     109: aload         6
     111: ifnonnull     135
     114: aload_0
     115: getfield      #11                 // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
     118: invokevirtual #96                 // Method com/google/javascript/jscomp/AbstractCompiler.isIdeMode:()Z
     121: ifeq          125
     124: return
     125: new           #97                 // class java/lang/IllegalStateException
     128: dup
     129: ldc           #98                 // String Cannot find break target.
     131: invokespecial #99                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     134: athrow
     135: aload_3
     136: astore        4
     138: aload         6
     140: astore_3
     141: aload         6
     143: invokevirtual #86                 // Method com/google/javascript/rhino/Node.getParent:()Lcom/google/javascript/rhino/Node;
     146: astore        6
     148: goto          31
     151: aload         5
     153: aload_1
     154: if_acmpne     174
     157: aload_0
     158: aload         5
     160: getstatic     #81                 // Field com/google/javascript/jscomp/ControlFlowGraph$Branch.UNCOND:Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;
     163: aload_3
     164: aload_0
     165: invokestatic  #77                 // Method computeFollowNode:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowAnalysis;)Lcom/google/javascript/rhino/Node;
     168: invokespecial #75                 // Method createEdge:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;Lcom/google/javascript/rhino/Node;)V
     171: goto          191
     174: aload_0
     175: getfield      #10                 // Field finallyMap:Lcom/google/common/collect/Multimap;
     178: aload         5
     180: aload_3
     181: aload_0
     182: invokestatic  #77                 // Method computeFollowNode:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowAnalysis;)Lcom/google/javascript/rhino/Node;
     185: invokeinterface #95,  3           // InterfaceMethod com/google/common/collect/Multimap.put:(Ljava/lang/Object;Ljava/lang/Object;)Z
     190: pop
     191: return

  private void handleContinue(com.google.javascript.rhino.Node);
    Code:
       0: aconst_null
       1: astore_2
       2: aload_1
       3: invokevirtual #92                 // Method com/google/javascript/rhino/Node.hasChildren:()Z
       6: ifeq          17
       9: aload_1
      10: invokevirtual #49                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
      13: invokevirtual #93                 // Method com/google/javascript/rhino/Node.getString:()Ljava/lang/String;
      16: astore_2
      17: aconst_null
      18: astore        4
      20: aload_1
      21: invokevirtual #86                 // Method com/google/javascript/rhino/Node.getParent:()Lcom/google/javascript/rhino/Node;
      24: astore        6
      26: aload_1
      27: astore_3
      28: aload_1
      29: astore        5
      31: aload_3
      32: aload         6
      34: aload_2
      35: invokestatic  #100                // Method isContinueTarget:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Ljava/lang/String;)Z
      38: ifne          139
      41: aload_3
      42: invokevirtual #88                 // Method com/google/javascript/rhino/Node.isTry:()Z
      45: ifeq          108
      48: aload_3
      49: invokestatic  #51                 // Method com/google/javascript/jscomp/NodeUtil.hasFinally:(Lcom/google/javascript/rhino/Node;)Z
      52: ifeq          108
      55: aload_3
      56: invokevirtual #48                 // Method com/google/javascript/rhino/Node.getLastChild:()Lcom/google/javascript/rhino/Node;
      59: aload         4
      61: if_acmpeq     108
      64: aload         5
      66: aload_1
      67: if_acmpne     86
      70: aload_0
      71: aload         5
      73: getstatic     #81                 // Field com/google/javascript/jscomp/ControlFlowGraph$Branch.UNCOND:Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;
      76: aload_3
      77: invokevirtual #48                 // Method com/google/javascript/rhino/Node.getLastChild:()Lcom/google/javascript/rhino/Node;
      80: invokespecial #75                 // Method createEdge:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;Lcom/google/javascript/rhino/Node;)V
      83: goto          105
      86: aload_0
      87: getfield      #10                 // Field finallyMap:Lcom/google/common/collect/Multimap;
      90: aload         5
      92: aload_3
      93: invokevirtual #48                 // Method com/google/javascript/rhino/Node.getLastChild:()Lcom/google/javascript/rhino/Node;
      96: invokestatic  #20                 // Method computeFallThrough:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
      99: invokeinterface #95,  3           // InterfaceMethod com/google/common/collect/Multimap.put:(Ljava/lang/Object;Ljava/lang/Object;)Z
     104: pop
     105: aload_3
     106: astore        5
     108: aload         6
     110: ifnull        117
     113: iconst_1
     114: goto          118
     117: iconst_0
     118: ldc           #101                // String Cannot find continue target.
     120: invokestatic  #102                // Method com/google/common/base/Preconditions.checkState:(ZLjava/lang/Object;)V
     123: aload_3
     124: astore        4
     126: aload         6
     128: astore_3
     129: aload         6
     131: invokevirtual #86                 // Method com/google/javascript/rhino/Node.getParent:()Lcom/google/javascript/rhino/Node;
     134: astore        6
     136: goto          31
     139: aload_3
     140: astore        7
     142: aload_3
     143: invokevirtual #80                 // Method com/google/javascript/rhino/Node.getChildCount:()I
     146: iconst_4
     147: if_icmpne     162
     150: aload_3
     151: invokevirtual #49                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
     154: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
     157: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
     160: astore        7
     162: aload         5
     164: aload_1
     165: if_acmpne     181
     168: aload_0
     169: aload_1
     170: getstatic     #81                 // Field com/google/javascript/jscomp/ControlFlowGraph$Branch.UNCOND:Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;
     173: aload         7
     175: invokespecial #75                 // Method createEdge:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;Lcom/google/javascript/rhino/Node;)V
     178: goto          195
     181: aload_0
     182: getfield      #10                 // Field finallyMap:Lcom/google/common/collect/Multimap;
     185: aload         5
     187: aload         7
     189: invokeinterface #95,  3           // InterfaceMethod com/google/common/collect/Multimap.put:(Ljava/lang/Object;Ljava/lang/Object;)Z
     194: pop
     195: return

  private void handleReturn(com.google.javascript.rhino.Node);
    Code:
       0: aconst_null
       1: astore_2
       2: aload_0
       3: getfield      #8                  // Field exceptionHandler:Ljava/util/Deque;
       6: invokeinterface #103,  1          // InterfaceMethod java/util/Deque.iterator:()Ljava/util/Iterator;
      11: astore_3
      12: aload_3
      13: invokeinterface #30,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      18: ifeq          96
      21: aload_3
      22: invokeinterface #31,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      27: checkcast     #34                 // class com/google/javascript/rhino/Node
      30: astore        4
      32: aload         4
      34: invokevirtual #35                 // Method com/google/javascript/rhino/Node.isFunction:()Z
      37: ifeq          43
      40: goto          96
      43: aload         4
      45: invokestatic  #51                 // Method com/google/javascript/jscomp/NodeUtil.hasFinally:(Lcom/google/javascript/rhino/Node;)Z
      48: ifeq          93
      51: aload_2
      52: ifnonnull     71
      55: aload_0
      56: aload_1
      57: getstatic     #81                 // Field com/google/javascript/jscomp/ControlFlowGraph$Branch.UNCOND:Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;
      60: aload         4
      62: invokevirtual #48                 // Method com/google/javascript/rhino/Node.getLastChild:()Lcom/google/javascript/rhino/Node;
      65: invokespecial #75                 // Method createEdge:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;Lcom/google/javascript/rhino/Node;)V
      68: goto          90
      71: aload_0
      72: getfield      #10                 // Field finallyMap:Lcom/google/common/collect/Multimap;
      75: aload_2
      76: aload         4
      78: invokevirtual #48                 // Method com/google/javascript/rhino/Node.getLastChild:()Lcom/google/javascript/rhino/Node;
      81: invokestatic  #20                 // Method computeFallThrough:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
      84: invokeinterface #95,  3           // InterfaceMethod com/google/common/collect/Multimap.put:(Ljava/lang/Object;Ljava/lang/Object;)Z
      89: pop
      90: aload         4
      92: astore_2
      93: goto          12
      96: aload_1
      97: invokevirtual #92                 // Method com/google/javascript/rhino/Node.hasChildren:()Z
     100: ifeq          112
     103: aload_0
     104: aload_1
     105: aload_1
     106: invokevirtual #49                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
     109: invokespecial #79                 // Method connectToPossibleExceptionHandler:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V
     112: aload_2
     113: ifnonnull     128
     116: aload_0
     117: aload_1
     118: getstatic     #81                 // Field com/google/javascript/jscomp/ControlFlowGraph$Branch.UNCOND:Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;
     121: aconst_null
     122: invokespecial #75                 // Method createEdge:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;Lcom/google/javascript/rhino/Node;)V
     125: goto          140
     128: aload_0
     129: getfield      #10                 // Field finallyMap:Lcom/google/common/collect/Multimap;
     132: aload_2
     133: aconst_null
     134: invokeinterface #95,  3           // InterfaceMethod com/google/common/collect/Multimap.put:(Ljava/lang/Object;Ljava/lang/Object;)Z
     139: pop
     140: return

  private void handleStmt(com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #81                 // Field com/google/javascript/jscomp/ControlFlowGraph$Branch.UNCOND:Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;
       5: aload_1
       6: aload_0
       7: invokestatic  #77                 // Method computeFollowNode:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowAnalysis;)Lcom/google/javascript/rhino/Node;
      10: invokespecial #75                 // Method createEdge:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;Lcom/google/javascript/rhino/Node;)V
      13: aload_0
      14: aload_1
      15: aload_1
      16: invokespecial #79                 // Method connectToPossibleExceptionHandler:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V
      19: return

  static com.google.javascript.rhino.Node computeFollowNode(com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowAnalysis);
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: invokestatic  #104                // Method computeFollowNode:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowAnalysis;)Lcom/google/javascript/rhino/Node;
       6: areturn

  static com.google.javascript.rhino.Node computeFollowNode(com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: aload_0
       2: aconst_null
       3: invokestatic  #104                // Method computeFollowNode:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowAnalysis;)Lcom/google/javascript/rhino/Node;
       6: areturn

  private static com.google.javascript.rhino.Node computeFollowNode(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowAnalysis);
    Code:
       0: aload_1
       1: invokevirtual #86                 // Method com/google/javascript/rhino/Node.getParent:()Lcom/google/javascript/rhino/Node;
       4: astore_3
       5: aload_3
       6: ifnull        28
       9: aload_3
      10: invokevirtual #35                 // Method com/google/javascript/rhino/Node.isFunction:()Z
      13: ifne          28
      16: aload_2
      17: ifnull        30
      20: aload_1
      21: aload_2
      22: getfield      #15                 // Field root:Lcom/google/javascript/rhino/Node;
      25: if_acmpne     30
      28: aconst_null
      29: areturn
      30: aload_3
      31: invokevirtual #46                 // Method com/google/javascript/rhino/Node.getType:()I
      34: lookupswitch  { // 7
                    77: 192
                   108: 100
                   111: 107
                   112: 107
                   113: 190
                   114: 190
                   115: 170
               default: 323
          }
     100: aload_0
     101: aload_3
     102: aload_2
     103: invokestatic  #104                // Method computeFollowNode:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowAnalysis;)Lcom/google/javascript/rhino/Node;
     106: areturn
     107: aload_3
     108: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
     111: ifnull        163
     114: aload_3
     115: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
     118: invokevirtual #85                 // Method com/google/javascript/rhino/Node.isCase:()Z
     121: ifeq          135
     124: aload_3
     125: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
     128: invokevirtual #49                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
     131: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
     134: areturn
     135: aload_3
     136: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
     139: invokevirtual #105                // Method com/google/javascript/rhino/Node.isDefaultCase:()Z
     142: ifeq          153
     145: aload_3
     146: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
     149: invokevirtual #49                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
     152: areturn
     153: new           #97                 // class java/lang/IllegalStateException
     156: dup
     157: ldc           #106                // String Not reachable
     159: invokespecial #99                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     162: athrow
     163: aload_0
     164: aload_3
     165: aload_2
     166: invokestatic  #104                // Method computeFollowNode:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowAnalysis;)Lcom/google/javascript/rhino/Node;
     169: areturn
     170: aload_3
     171: invokestatic  #107                // Method com/google/javascript/jscomp/NodeUtil.isForIn:(Lcom/google/javascript/rhino/Node;)Z
     174: ifeq          179
     177: aload_3
     178: areturn
     179: aload_3
     180: invokevirtual #49                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
     183: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
     186: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
     189: areturn
     190: aload_3
     191: areturn
     192: aload_3
     193: invokevirtual #49                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
     196: aload_1
     197: if_acmpne     222
     200: aload_3
     201: invokestatic  #51                 // Method com/google/javascript/jscomp/NodeUtil.hasFinally:(Lcom/google/javascript/rhino/Node;)Z
     204: ifeq          215
     207: aload_3
     208: invokevirtual #48                 // Method com/google/javascript/rhino/Node.getLastChild:()Lcom/google/javascript/rhino/Node;
     211: invokestatic  #20                 // Method computeFallThrough:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
     214: areturn
     215: aload_0
     216: aload_3
     217: aload_2
     218: invokestatic  #104                // Method computeFollowNode:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowAnalysis;)Lcom/google/javascript/rhino/Node;
     221: areturn
     222: aload_3
     223: invokestatic  #52                 // Method com/google/javascript/jscomp/NodeUtil.getCatchBlock:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
     226: aload_1
     227: if_acmpne     252
     230: aload_3
     231: invokestatic  #51                 // Method com/google/javascript/jscomp/NodeUtil.hasFinally:(Lcom/google/javascript/rhino/Node;)Z
     234: ifeq          245
     237: aload_1
     238: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
     241: invokestatic  #20                 // Method computeFallThrough:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
     244: areturn
     245: aload_0
     246: aload_3
     247: aload_2
     248: invokestatic  #104                // Method computeFollowNode:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowAnalysis;)Lcom/google/javascript/rhino/Node;
     251: areturn
     252: aload_3
     253: invokevirtual #48                 // Method com/google/javascript/rhino/Node.getLastChild:()Lcom/google/javascript/rhino/Node;
     256: aload_1
     257: if_acmpne     323
     260: aload_2
     261: ifnull        316
     264: aload_2
     265: getfield      #10                 // Field finallyMap:Lcom/google/common/collect/Multimap;
     268: aload_3
     269: invokeinterface #108,  2          // InterfaceMethod com/google/common/collect/Multimap.get:(Ljava/lang/Object;)Ljava/util/Collection;
     274: invokeinterface #109,  1          // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
     279: astore        4
     281: aload         4
     283: invokeinterface #30,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     288: ifeq          316
     291: aload         4
     293: invokeinterface #31,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     298: checkcast     #34                 // class com/google/javascript/rhino/Node
     301: astore        5
     303: aload_2
     304: aload_0
     305: getstatic     #110                // Field com/google/javascript/jscomp/ControlFlowGraph$Branch.ON_EX:Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;
     308: aload         5
     310: invokespecial #75                 // Method createEdge:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;Lcom/google/javascript/rhino/Node;)V
     313: goto          281
     316: aload_0
     317: aload_3
     318: aload_2
     319: invokestatic  #104                // Method computeFollowNode:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowAnalysis;)Lcom/google/javascript/rhino/Node;
     322: areturn
     323: aload_1
     324: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
     327: astore        4
     329: aload         4
     331: ifnull        352
     334: aload         4
     336: invokevirtual #35                 // Method com/google/javascript/rhino/Node.isFunction:()Z
     339: ifeq          352
     342: aload         4
     344: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
     347: astore        4
     349: goto          329
     352: aload         4
     354: ifnull        363
     357: aload         4
     359: invokestatic  #20                 // Method computeFallThrough:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
     362: areturn
     363: aload_0
     364: aload_3
     365: aload_2
     366: invokestatic  #104                // Method computeFollowNode:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowAnalysis;)Lcom/google/javascript/rhino/Node;
     369: areturn

  static com.google.javascript.rhino.Node computeFallThrough(com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method com/google/javascript/rhino/Node.getType:()I
       4: lookupswitch  { // 3
                   114: 40
                   115: 48
                   126: 71
               default: 79
          }
      40: aload_0
      41: invokevirtual #49                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
      44: invokestatic  #20                 // Method computeFallThrough:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
      47: areturn
      48: aload_0
      49: invokestatic  #107                // Method com/google/javascript/jscomp/NodeUtil.isForIn:(Lcom/google/javascript/rhino/Node;)Z
      52: ifeq          63
      55: aload_0
      56: invokevirtual #49                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
      59: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
      62: areturn
      63: aload_0
      64: invokevirtual #49                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
      67: invokestatic  #20                 // Method computeFallThrough:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
      70: areturn
      71: aload_0
      72: invokevirtual #48                 // Method com/google/javascript/rhino/Node.getLastChild:()Lcom/google/javascript/rhino/Node;
      75: invokestatic  #20                 // Method computeFallThrough:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
      78: areturn
      79: aload_0
      80: areturn

  private void createEdge(com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph$Branch, com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: getfield      #14                 // Field cfg:Lcom/google/javascript/jscomp/ControlFlowGraph;
       4: aload_1
       5: invokevirtual #111                // Method com/google/javascript/jscomp/ControlFlowGraph.createNode:(Ljava/lang/Object;)Lcom/google/javascript/jscomp/graph/GraphNode;
       8: pop
       9: aload_0
      10: getfield      #14                 // Field cfg:Lcom/google/javascript/jscomp/ControlFlowGraph;
      13: aload_3
      14: invokevirtual #111                // Method com/google/javascript/jscomp/ControlFlowGraph.createNode:(Ljava/lang/Object;)Lcom/google/javascript/jscomp/graph/GraphNode;
      17: pop
      18: aload_0
      19: getfield      #14                 // Field cfg:Lcom/google/javascript/jscomp/ControlFlowGraph;
      22: aload_1
      23: aload_2
      24: aload_3
      25: invokevirtual #112                // Method com/google/javascript/jscomp/ControlFlowGraph.connectIfNotFound:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
      28: return

  private void connectToPossibleExceptionHandler(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node);
    Code:
       0: aload_2
       1: invokestatic  #113                // Method mayThrowException:(Lcom/google/javascript/rhino/Node;)Z
       4: ifeq          226
       7: aload_0
       8: getfield      #8                  // Field exceptionHandler:Ljava/util/Deque;
      11: invokeinterface #114,  1          // InterfaceMethod java/util/Deque.isEmpty:()Z
      16: ifne          226
      19: aload_1
      20: astore_3
      21: aload_0
      22: getfield      #8                  // Field exceptionHandler:Ljava/util/Deque;
      25: invokeinterface #103,  1          // InterfaceMethod java/util/Deque.iterator:()Ljava/util/Iterator;
      30: astore        4
      32: aload         4
      34: invokeinterface #30,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      39: ifeq          226
      42: aload         4
      44: invokeinterface #31,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      49: checkcast     #34                 // class com/google/javascript/rhino/Node
      52: astore        5
      54: aload         5
      56: invokevirtual #35                 // Method com/google/javascript/rhino/Node.isFunction:()Z
      59: ifeq          63
      62: return
      63: aload         5
      65: invokevirtual #88                 // Method com/google/javascript/rhino/Node.isTry:()Z
      68: invokestatic  #37                 // Method com/google/common/base/Preconditions.checkState:(Z)V
      71: aload         5
      73: invokestatic  #52                 // Method com/google/javascript/jscomp/NodeUtil.getCatchBlock:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
      76: astore        6
      78: iconst_0
      79: istore        7
      81: aload_3
      82: invokevirtual #115                // Method com/google/javascript/rhino/Node.getAncestors:()Lcom/google/javascript/rhino/Node$AncestorIterable;
      85: invokevirtual #116                // Method com/google/javascript/rhino/Node$AncestorIterable.iterator:()Ljava/util/Iterator;
      88: astore        8
      90: aload         8
      92: invokeinterface #30,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      97: ifeq          138
     100: aload         8
     102: invokeinterface #31,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     107: checkcast     #34                 // class com/google/javascript/rhino/Node
     110: astore        9
     112: aload         9
     114: aload         5
     116: if_acmpne     122
     119: goto          138
     122: aload         9
     124: aload         6
     126: if_acmpne     135
     129: iconst_1
     130: istore        7
     132: goto          138
     135: goto          90
     138: aload         6
     140: invokestatic  #89                 // Method com/google/javascript/jscomp/NodeUtil.hasCatchHandler:(Lcom/google/javascript/rhino/Node;)Z
     143: ifeq          151
     146: iload         7
     148: ifeq          191
     151: aload_3
     152: aload_1
     153: if_acmpne     172
     156: aload_0
     157: aload_1
     158: getstatic     #110                // Field com/google/javascript/jscomp/ControlFlowGraph$Branch.ON_EX:Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;
     161: aload         5
     163: invokevirtual #48                 // Method com/google/javascript/rhino/Node.getLastChild:()Lcom/google/javascript/rhino/Node;
     166: invokespecial #75                 // Method createEdge:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;Lcom/google/javascript/rhino/Node;)V
     169: goto          220
     172: aload_0
     173: getfield      #10                 // Field finallyMap:Lcom/google/common/collect/Multimap;
     176: aload_3
     177: aload         5
     179: invokevirtual #48                 // Method com/google/javascript/rhino/Node.getLastChild:()Lcom/google/javascript/rhino/Node;
     182: invokeinterface #95,  3           // InterfaceMethod com/google/common/collect/Multimap.put:(Ljava/lang/Object;Ljava/lang/Object;)Z
     187: pop
     188: goto          220
     191: aload_3
     192: aload_1
     193: if_acmpne     207
     196: aload_0
     197: aload_1
     198: getstatic     #110                // Field com/google/javascript/jscomp/ControlFlowGraph$Branch.ON_EX:Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;
     201: aload         6
     203: invokespecial #75                 // Method createEdge:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/ControlFlowGraph$Branch;Lcom/google/javascript/rhino/Node;)V
     206: return
     207: aload_0
     208: getfield      #10                 // Field finallyMap:Lcom/google/common/collect/Multimap;
     211: aload_3
     212: aload         6
     214: invokeinterface #95,  3           // InterfaceMethod com/google/common/collect/Multimap.put:(Ljava/lang/Object;Ljava/lang/Object;)Z
     219: pop
     220: aload         5
     222: astore_3
     223: goto          32
     226: return

  private static com.google.javascript.rhino.Node getNextSiblingOfType(com.google.javascript.rhino.Node, int...);
    Code:
       0: aload_0
       1: astore_2
       2: aload_2
       3: ifnull        53
       6: aload_1
       7: astore_3
       8: aload_3
       9: arraylength
      10: istore        4
      12: iconst_0
      13: istore        5
      15: iload         5
      17: iload         4
      19: if_icmpge     45
      22: aload_3
      23: iload         5
      25: iaload
      26: istore        6
      28: aload_2
      29: invokevirtual #46                 // Method com/google/javascript/rhino/Node.getType:()I
      32: iload         6
      34: if_icmpne     39
      37: aload_2
      38: areturn
      39: iinc          5, 1
      42: goto          15
      45: aload_2
      46: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
      49: astore_2
      50: goto          2
      53: aconst_null
      54: areturn

  public static boolean isBreakTarget(com.google.javascript.rhino.Node, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: ifnull        9
       5: iconst_1
       6: goto          10
       9: iconst_0
      10: invokestatic  #117                // Method isBreakStructure:(Lcom/google/javascript/rhino/Node;Z)Z
      13: ifeq          31
      16: aload_0
      17: invokevirtual #86                 // Method com/google/javascript/rhino/Node.getParent:()Lcom/google/javascript/rhino/Node;
      20: aload_1
      21: invokestatic  #118                // Method matchLabel:(Lcom/google/javascript/rhino/Node;Ljava/lang/String;)Z
      24: ifeq          31
      27: iconst_1
      28: goto          32
      31: iconst_0
      32: ireturn

  private static boolean isContinueTarget(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, java.lang.String);
    Code:
       0: aload_0
       1: invokestatic  #119                // Method isContinueStructure:(Lcom/google/javascript/rhino/Node;)Z
       4: ifeq          19
       7: aload_1
       8: aload_2
       9: invokestatic  #118                // Method matchLabel:(Lcom/google/javascript/rhino/Node;Ljava/lang/String;)Z
      12: ifeq          19
      15: iconst_1
      16: goto          20
      19: iconst_0
      20: ireturn

  private static boolean matchLabel(com.google.javascript.rhino.Node, java.lang.String);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: iconst_1
       5: ireturn
       6: aload_0
       7: invokevirtual #120                // Method com/google/javascript/rhino/Node.isLabel:()Z
      10: ifeq          37
      13: aload_0
      14: invokevirtual #49                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
      17: invokevirtual #93                 // Method com/google/javascript/rhino/Node.getString:()Ljava/lang/String;
      20: aload_1
      21: invokevirtual #121                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      24: ifeq          29
      27: iconst_1
      28: ireturn
      29: aload_0
      30: invokevirtual #86                 // Method com/google/javascript/rhino/Node.getParent:()Lcom/google/javascript/rhino/Node;
      33: astore_0
      34: goto          6
      37: iconst_0
      38: ireturn

  public static boolean mayThrowException(com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method com/google/javascript/rhino/Node.getType:()I
       4: lookupswitch  { // 11
                    30: 104
                    33: 104
                    35: 104
                    37: 104
                    49: 104
                    51: 104
                    52: 104
                    86: 104
                   102: 104
                   103: 104
                   105: 106
               default: 108
          }
     104: iconst_1
     105: ireturn
     106: iconst_0
     107: ireturn
     108: aload_0
     109: invokevirtual #49                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
     112: astore_1
     113: aload_1
     114: ifnull        141
     117: aload_1
     118: invokestatic  #122                // Method com/google/javascript/jscomp/ControlFlowGraph.isEnteringNewCfgNode:(Lcom/google/javascript/rhino/Node;)Z
     121: ifne          133
     124: aload_1
     125: invokestatic  #113                // Method mayThrowException:(Lcom/google/javascript/rhino/Node;)Z
     128: ifeq          133
     131: iconst_1
     132: ireturn
     133: aload_1
     134: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
     137: astore_1
     138: goto          113
     141: iconst_0
     142: ireturn

  static boolean isBreakStructure(com.google.javascript.rhino.Node, boolean);
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method com/google/javascript/rhino/Node.getType:()I
       4: lookupswitch  { // 7
                    77: 74
                   108: 74
                   110: 72
                   113: 72
                   114: 72
                   115: 72
                   125: 74
               default: 76
          }
      72: iconst_1
      73: ireturn
      74: iload_1
      75: ireturn
      76: iconst_0
      77: ireturn

  static boolean isContinueStructure(com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method com/google/javascript/rhino/Node.getType:()I
       4: tableswitch   { // 113 to 115
                   113: 32
                   114: 32
                   115: 32
               default: 34
          }
      32: iconst_1
      33: ireturn
      34: iconst_0
      35: ireturn

  static com.google.javascript.rhino.Node getExceptionHandler(com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: astore_1
       2: aload_1
       3: invokevirtual #123                // Method com/google/javascript/rhino/Node.isScript:()Z
       6: ifne          35
       9: aload_1
      10: invokevirtual #35                 // Method com/google/javascript/rhino/Node.isFunction:()Z
      13: ifne          35
      16: aload_1
      17: invokestatic  #124                // Method getCatchHandlerForBlock:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
      20: astore_2
      21: aload_2
      22: ifnull        27
      25: aload_2
      26: areturn
      27: aload_1
      28: invokevirtual #86                 // Method com/google/javascript/rhino/Node.getParent:()Lcom/google/javascript/rhino/Node;
      31: astore_1
      32: goto          2
      35: aconst_null
      36: areturn

  static com.google.javascript.rhino.Node getCatchHandlerForBlock(com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: invokevirtual #87                 // Method com/google/javascript/rhino/Node.isBlock:()Z
       4: ifeq          57
       7: aload_0
       8: invokevirtual #86                 // Method com/google/javascript/rhino/Node.getParent:()Lcom/google/javascript/rhino/Node;
      11: invokevirtual #88                 // Method com/google/javascript/rhino/Node.isTry:()Z
      14: ifeq          57
      17: aload_0
      18: invokevirtual #86                 // Method com/google/javascript/rhino/Node.getParent:()Lcom/google/javascript/rhino/Node;
      21: invokevirtual #49                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
      24: aload_0
      25: if_acmpne     57
      28: aload_0
      29: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
      32: astore_1
      33: aload_1
      34: ifnull        57
      37: aload_1
      38: invokestatic  #89                 // Method com/google/javascript/jscomp/NodeUtil.hasCatchHandler:(Lcom/google/javascript/rhino/Node;)Z
      41: ifeq          49
      44: aload_1
      45: invokevirtual #49                 // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
      48: areturn
      49: aload_1
      50: invokevirtual #50                 // Method com/google/javascript/rhino/Node.getNext:()Lcom/google/javascript/rhino/Node;
      53: astore_1
      54: goto          33
      57: aconst_null
      58: areturn

  static java.util.Map access$000(com.google.javascript.jscomp.ControlFlowAnalysis);
    Code:
       0: aload_0
       1: getfield      #1                  // Field astPosition:Ljava/util/Map;
       4: areturn
}
