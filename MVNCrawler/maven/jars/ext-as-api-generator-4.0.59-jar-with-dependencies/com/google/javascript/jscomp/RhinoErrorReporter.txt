Compiled from "RhinoErrorReporter.java"
class com.google.javascript.jscomp.RhinoErrorReporter {
  static final com.google.javascript.jscomp.DiagnosticType PARSE_ERROR;

  static final com.google.javascript.jscomp.DiagnosticType TYPE_PARSE_ERROR;

  static final com.google.javascript.jscomp.DiagnosticType TRAILING_COMMA;

  static final com.google.javascript.jscomp.DiagnosticType DUPLICATE_PARAM;

  static final com.google.javascript.jscomp.DiagnosticType INVALID_PARAM;

  static final com.google.javascript.jscomp.DiagnosticType BAD_JSDOC_ANNOTATION;

  static final com.google.javascript.jscomp.DiagnosticType JSDOC_IN_BLOCK_COMMENT;

  static final com.google.javascript.jscomp.DiagnosticType MISPLACED_TYPE_ANNOTATION;

  static final com.google.javascript.jscomp.DiagnosticType MISPLACED_FUNCTION_ANNOTATION;

  static final com.google.javascript.jscomp.DiagnosticType INVALID_ES3_PROP_NAME;

  static final com.google.javascript.jscomp.DiagnosticType PARSE_TREE_TOO_DEEP;

  static final com.google.javascript.jscomp.DiagnosticType INVALID_OCTAL_LITERAL;

  static final com.google.javascript.jscomp.DiagnosticType ES6_FEATURE;

  private final java.util.Map<java.util.regex.Pattern, com.google.javascript.jscomp.DiagnosticType> typeMap;

  final com.google.javascript.jscomp.AbstractCompiler compiler;

  private java.util.regex.Pattern replacePlaceHolders(java.lang.String);
    Code:
       0: aload_1
       1: invokestatic  #2                  // Method java/util/regex/Pattern.quote:(Ljava/lang/String;)Ljava/lang/String;
       4: astore_1
       5: aload_1
       6: ldc           #3                  // String \\{\\d+\\}
       8: ldc           #4                  // String \\\\E.*\\\\Q
      10: invokevirtual #5                  // Method java/lang/String.replaceAll:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      13: invokestatic  #6                  // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
      16: areturn

  private com.google.javascript.jscomp.RhinoErrorReporter(com.google.javascript.jscomp.AbstractCompiler);
    Code:
       0: aload_0
       1: invokespecial #7                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #8                  // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
       9: aload_0
      10: invokestatic  #9                  // Method com/google/common/collect/ImmutableMap.builder:()Lcom/google/common/collect/ImmutableMap$Builder;
      13: aload_0
      14: ldc           #10                 // String Trailing comma is not legal in an ECMA-262 object initializer
      16: invokespecial #11                 // Method replacePlaceHolders:(Ljava/lang/String;)Ljava/util/regex/Pattern;
      19: getstatic     #12                 // Field TRAILING_COMMA:Lcom/google/javascript/jscomp/DiagnosticType;
      22: invokevirtual #13                 // Method com/google/common/collect/ImmutableMap$Builder.put:(Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableMap$Builder;
      25: aload_0
      26: ldc           #14                 // String Duplicate parameter name \"{0}\"
      28: invokespecial #11                 // Method replacePlaceHolders:(Ljava/lang/String;)Ljava/util/regex/Pattern;
      31: getstatic     #15                 // Field DUPLICATE_PARAM:Lcom/google/javascript/jscomp/DiagnosticType;
      34: invokevirtual #13                 // Method com/google/common/collect/ImmutableMap$Builder.put:(Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableMap$Builder;
      37: ldc           #16                 // String ^invalid param name.*
      39: invokestatic  #6                  // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
      42: getstatic     #17                 // Field INVALID_PARAM:Lcom/google/javascript/jscomp/DiagnosticType;
      45: invokevirtual #13                 // Method com/google/common/collect/ImmutableMap$Builder.put:(Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableMap$Builder;
      48: aload_0
      49: ldc           #18                 // String msg.bad.jsdoc.tag
      51: invokestatic  #19                 // Method com/google/javascript/rhino/SimpleErrorReporter.getMessage0:(Ljava/lang/String;)Ljava/lang/String;
      54: invokespecial #11                 // Method replacePlaceHolders:(Ljava/lang/String;)Ljava/util/regex/Pattern;
      57: getstatic     #20                 // Field BAD_JSDOC_ANNOTATION:Lcom/google/javascript/jscomp/DiagnosticType;
      60: invokevirtual #13                 // Method com/google/common/collect/ImmutableMap$Builder.put:(Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableMap$Builder;
      63: ldc           #21                 // String ^\\QNon-JSDoc comment has annotations. Did you mean to start it with \'/**\'?\\E
      65: invokestatic  #6                  // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
      68: getstatic     #22                 // Field JSDOC_IN_BLOCK_COMMENT:Lcom/google/javascript/jscomp/DiagnosticType;
      71: invokevirtual #13                 // Method com/google/common/collect/ImmutableMap$Builder.put:(Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableMap$Builder;
      74: ldc           #23                 // String ^Type annotations are not allowed here.*
      76: invokestatic  #6                  // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
      79: getstatic     #24                 // Field MISPLACED_TYPE_ANNOTATION:Lcom/google/javascript/jscomp/DiagnosticType;
      82: invokevirtual #13                 // Method com/google/common/collect/ImmutableMap$Builder.put:(Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableMap$Builder;
      85: ldc           #25                 // String ^This JSDoc is not attached to a function node.*
      87: invokestatic  #6                  // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
      90: getstatic     #26                 // Field MISPLACED_FUNCTION_ANNOTATION:Lcom/google/javascript/jscomp/DiagnosticType;
      93: invokevirtual #13                 // Method com/google/common/collect/ImmutableMap$Builder.put:(Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableMap$Builder;
      96: ldc           #27                 // String ^Keywords and reserved words are not allowed as unquoted property.*
      98: invokestatic  #6                  // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
     101: getstatic     #28                 // Field INVALID_ES3_PROP_NAME:Lcom/google/javascript/jscomp/DiagnosticType;
     104: invokevirtual #13                 // Method com/google/common/collect/ImmutableMap$Builder.put:(Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableMap$Builder;
     107: ldc           #29                 // String ^Bad type annotation.*
     109: invokestatic  #6                  // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
     112: getstatic     #30                 // Field TYPE_PARSE_ERROR:Lcom/google/javascript/jscomp/DiagnosticType;
     115: invokevirtual #13                 // Method com/google/common/collect/ImmutableMap$Builder.put:(Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableMap$Builder;
     118: aload_0
     119: ldc           #31                 // String Too deep recursion while parsing
     121: invokespecial #11                 // Method replacePlaceHolders:(Ljava/lang/String;)Ljava/util/regex/Pattern;
     124: getstatic     #32                 // Field PARSE_TREE_TOO_DEEP:Lcom/google/javascript/jscomp/DiagnosticType;
     127: invokevirtual #13                 // Method com/google/common/collect/ImmutableMap$Builder.put:(Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableMap$Builder;
     130: ldc           #33                 // String ^Octal .*literal.*
     132: invokestatic  #6                  // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
     135: getstatic     #34                 // Field INVALID_OCTAL_LITERAL:Lcom/google/javascript/jscomp/DiagnosticType;
     138: invokevirtual #13                 // Method com/google/common/collect/ImmutableMap$Builder.put:(Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableMap$Builder;
     141: ldc           #35                 // String ^this language feature is only supported in es6 mode.*
     143: invokestatic  #6                  // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
     146: getstatic     #36                 // Field ES6_FEATURE:Lcom/google/javascript/jscomp/DiagnosticType;
     149: invokevirtual #13                 // Method com/google/common/collect/ImmutableMap$Builder.put:(Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableMap$Builder;
     152: invokevirtual #37                 // Method com/google/common/collect/ImmutableMap$Builder.build:()Lcom/google/common/collect/ImmutableMap;
     155: putfield      #38                 // Field typeMap:Ljava/util/Map;
     158: return

  public static com.google.javascript.rhino.ErrorReporter forOldRhino(com.google.javascript.jscomp.AbstractCompiler);
    Code:
       0: new           #39                 // class com/google/javascript/jscomp/RhinoErrorReporter$OldRhinoErrorReporter
       3: dup
       4: aload_0
       5: aconst_null
       6: invokespecial #40                 // Method com/google/javascript/jscomp/RhinoErrorReporter$OldRhinoErrorReporter."<init>":(Lcom/google/javascript/jscomp/AbstractCompiler;Lcom/google/javascript/jscomp/RhinoErrorReporter$1;)V
       9: areturn

  void warningAtLine(java.lang.String, java.lang.String, int, int);
    Code:
       0: aload_0
       1: getfield      #8                  // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
       4: aload_0
       5: aload_1
       6: aload_2
       7: iload_3
       8: iload         4
      10: getstatic     #41                 // Field com/google/javascript/jscomp/CheckLevel.WARNING:Lcom/google/javascript/jscomp/CheckLevel;
      13: invokespecial #42                 // Method makeError:(Ljava/lang/String;Ljava/lang/String;IILcom/google/javascript/jscomp/CheckLevel;)Lcom/google/javascript/jscomp/JSError;
      16: invokevirtual #43                 // Method com/google/javascript/jscomp/AbstractCompiler.report:(Lcom/google/javascript/jscomp/JSError;)V
      19: return

  void errorAtLine(java.lang.String, java.lang.String, int, int);
    Code:
       0: aload_0
       1: getfield      #8                  // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
       4: aload_0
       5: aload_1
       6: aload_2
       7: iload_3
       8: iload         4
      10: getstatic     #44                 // Field com/google/javascript/jscomp/CheckLevel.ERROR:Lcom/google/javascript/jscomp/CheckLevel;
      13: invokespecial #42                 // Method makeError:(Ljava/lang/String;Ljava/lang/String;IILcom/google/javascript/jscomp/CheckLevel;)Lcom/google/javascript/jscomp/JSError;
      16: invokevirtual #43                 // Method com/google/javascript/jscomp/AbstractCompiler.report:(Lcom/google/javascript/jscomp/JSError;)V
      19: return

  protected com.google.javascript.jscomp.DiagnosticType mapError(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #38                 // Field typeMap:Ljava/util/Map;
       4: invokeinterface #45,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
       9: invokeinterface #46,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      14: astore_2
      15: aload_2
      16: invokeinterface #47,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          66
      24: aload_2
      25: invokeinterface #48,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #49                 // class java/util/Map$Entry
      33: astore_3
      34: aload_3
      35: invokeinterface #50,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      40: checkcast     #51                 // class java/util/regex/Pattern
      43: aload_1
      44: invokevirtual #52                 // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
      47: invokevirtual #53                 // Method java/util/regex/Matcher.matches:()Z
      50: ifeq          63
      53: aload_3
      54: invokeinterface #54,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      59: checkcast     #55                 // class com/google/javascript/jscomp/DiagnosticType
      62: areturn
      63: goto          15
      66: aconst_null
      67: areturn

  private com.google.javascript.jscomp.JSError makeError(java.lang.String, java.lang.String, int, int, com.google.javascript.jscomp.CheckLevel);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #56                 // Method mapError:(Ljava/lang/String;)Lcom/google/javascript/jscomp/DiagnosticType;
       5: astore        6
       7: aload         6
       9: ifnull        30
      12: aload_2
      13: iload_3
      14: iload         4
      16: aload         6
      18: iconst_1
      19: anewarray     #57                 // class java/lang/String
      22: dup
      23: iconst_0
      24: aload_1
      25: aastore
      26: invokestatic  #58                 // Method com/google/javascript/jscomp/JSError.make:(Ljava/lang/String;IILcom/google/javascript/jscomp/DiagnosticType;[Ljava/lang/String;)Lcom/google/javascript/jscomp/JSError;
      29: areturn
      30: aload_2
      31: iload_3
      32: iload         4
      34: aload         5
      36: getstatic     #59                 // Field PARSE_ERROR:Lcom/google/javascript/jscomp/DiagnosticType;
      39: iconst_1
      40: anewarray     #57                 // class java/lang/String
      43: dup
      44: iconst_0
      45: aload_1
      46: aastore
      47: invokestatic  #60                 // Method com/google/javascript/jscomp/JSError.make:(Ljava/lang/String;IILcom/google/javascript/jscomp/CheckLevel;Lcom/google/javascript/jscomp/DiagnosticType;[Ljava/lang/String;)Lcom/google/javascript/jscomp/JSError;
      50: areturn

  com.google.javascript.jscomp.RhinoErrorReporter(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.RhinoErrorReporter$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method "<init>":(Lcom/google/javascript/jscomp/AbstractCompiler;)V
       5: return

  static {};
    Code:
       0: ldc           #61                 // String JSC_PARSE_ERROR
       2: ldc           #62                 // String Parse error. {0}
       4: invokestatic  #63                 // Method com/google/javascript/jscomp/DiagnosticType.error:(Ljava/lang/String;Ljava/lang/String;)Lcom/google/javascript/jscomp/DiagnosticType;
       7: putstatic     #59                 // Field PARSE_ERROR:Lcom/google/javascript/jscomp/DiagnosticType;
      10: ldc           #64                 // String JSC_TYPE_PARSE_ERROR
      12: ldc           #65                 // String {0}
      14: invokestatic  #66                 // Method com/google/javascript/jscomp/DiagnosticType.warning:(Ljava/lang/String;Ljava/lang/String;)Lcom/google/javascript/jscomp/DiagnosticType;
      17: putstatic     #30                 // Field TYPE_PARSE_ERROR:Lcom/google/javascript/jscomp/DiagnosticType;
      20: ldc           #67                 // String JSC_TRAILING_COMMA
      22: ldc           #68                 // String Parse error. IE8 (and below) will parse trailing commas in array and object literals incorrectly. If you are targeting newer versions of JS, set the appropriate language_in option.
      24: invokestatic  #63                 // Method com/google/javascript/jscomp/DiagnosticType.error:(Ljava/lang/String;Ljava/lang/String;)Lcom/google/javascript/jscomp/DiagnosticType;
      27: putstatic     #12                 // Field TRAILING_COMMA:Lcom/google/javascript/jscomp/DiagnosticType;
      30: ldc           #69                 // String JSC_DUPLICATE_PARAM
      32: ldc           #62                 // String Parse error. {0}
      34: invokestatic  #63                 // Method com/google/javascript/jscomp/DiagnosticType.error:(Ljava/lang/String;Ljava/lang/String;)Lcom/google/javascript/jscomp/DiagnosticType;
      37: putstatic     #15                 // Field DUPLICATE_PARAM:Lcom/google/javascript/jscomp/DiagnosticType;
      40: ldc           #70                 // String JSC_INVALID_PARAM
      42: ldc           #62                 // String Parse error. {0}
      44: invokestatic  #66                 // Method com/google/javascript/jscomp/DiagnosticType.warning:(Ljava/lang/String;Ljava/lang/String;)Lcom/google/javascript/jscomp/DiagnosticType;
      47: putstatic     #17                 // Field INVALID_PARAM:Lcom/google/javascript/jscomp/DiagnosticType;
      50: ldc           #71                 // String JSC_BAD_JSDOC_ANNOTATION
      52: ldc           #62                 // String Parse error. {0}
      54: invokestatic  #66                 // Method com/google/javascript/jscomp/DiagnosticType.warning:(Ljava/lang/String;Ljava/lang/String;)Lcom/google/javascript/jscomp/DiagnosticType;
      57: putstatic     #20                 // Field BAD_JSDOC_ANNOTATION:Lcom/google/javascript/jscomp/DiagnosticType;
      60: ldc           #72                 // String JSC_JSDOC_IN_BLOCK_COMMENT
      62: ldc           #62                 // String Parse error. {0}
      64: invokestatic  #66                 // Method com/google/javascript/jscomp/DiagnosticType.warning:(Ljava/lang/String;Ljava/lang/String;)Lcom/google/javascript/jscomp/DiagnosticType;
      67: putstatic     #22                 // Field JSDOC_IN_BLOCK_COMMENT:Lcom/google/javascript/jscomp/DiagnosticType;
      70: ldc           #73                 // String JSC_MISPLACED_TYPE_ANNOTATION
      72: ldc           #74                 // String Type annotations are not allowed here. Are you missing parentheses?
      74: invokestatic  #66                 // Method com/google/javascript/jscomp/DiagnosticType.warning:(Ljava/lang/String;Ljava/lang/String;)Lcom/google/javascript/jscomp/DiagnosticType;
      77: putstatic     #24                 // Field MISPLACED_TYPE_ANNOTATION:Lcom/google/javascript/jscomp/DiagnosticType;
      80: ldc           #75                 // String JSC_MISPLACED_FUNCTION_ANNOTATION
      82: ldc           #76                 // String Misplaced function annotation.
      84: invokestatic  #66                 // Method com/google/javascript/jscomp/DiagnosticType.warning:(Ljava/lang/String;Ljava/lang/String;)Lcom/google/javascript/jscomp/DiagnosticType;
      87: putstatic     #26                 // Field MISPLACED_FUNCTION_ANNOTATION:Lcom/google/javascript/jscomp/DiagnosticType;
      90: ldc           #77                 // String JSC_INVALID_ES3_PROP_NAME
      92: ldc           #78                 // String Keywords and reserved words are not allowed as unquoted property names in older versions of JavaScript. If you are targeting newer versions of JavaScript, set the appropriate language_in option.
      94: invokestatic  #66                 // Method com/google/javascript/jscomp/DiagnosticType.warning:(Ljava/lang/String;Ljava/lang/String;)Lcom/google/javascript/jscomp/DiagnosticType;
      97: putstatic     #28                 // Field INVALID_ES3_PROP_NAME:Lcom/google/javascript/jscomp/DiagnosticType;
     100: ldc           #79                 // String PARSE_TREE_TOO_DEEP
     102: ldc           #80                 // String Parse tree too deep.
     104: invokestatic  #63                 // Method com/google/javascript/jscomp/DiagnosticType.error:(Ljava/lang/String;Ljava/lang/String;)Lcom/google/javascript/jscomp/DiagnosticType;
     107: putstatic     #32                 // Field PARSE_TREE_TOO_DEEP:Lcom/google/javascript/jscomp/DiagnosticType;
     110: ldc           #81                 // String INVALID_OCTAL_LITERAL
     112: ldc           #82                 // String This style of octal literal is not supported in strict mode.
     114: invokestatic  #66                 // Method com/google/javascript/jscomp/DiagnosticType.warning:(Ljava/lang/String;Ljava/lang/String;)Lcom/google/javascript/jscomp/DiagnosticType;
     117: putstatic     #34                 // Field INVALID_OCTAL_LITERAL:Lcom/google/javascript/jscomp/DiagnosticType;
     120: ldc           #83                 // String ES6_FEATURE
     122: ldc           #84                 // String {0}. Use --language_in=ECMASCRIPT6 or ECMASCRIPT6_STRICT to enable ES6 features.
     124: invokestatic  #63                 // Method com/google/javascript/jscomp/DiagnosticType.error:(Ljava/lang/String;Ljava/lang/String;)Lcom/google/javascript/jscomp/DiagnosticType;
     127: putstatic     #36                 // Field ES6_FEATURE:Lcom/google/javascript/jscomp/DiagnosticType;
     130: return
}
