Compiled from "AbstractPeepholeOptimization.java"
abstract class com.google.javascript.jscomp.AbstractPeepholeOptimization {
  private com.google.javascript.jscomp.AbstractCompiler compiler;

  com.google.javascript.jscomp.AbstractPeepholeOptimization();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  abstract com.google.javascript.rhino.Node optimizeSubtree(com.google.javascript.rhino.Node);

  protected void report(com.google.javascript.jscomp.DiagnosticType, com.google.javascript.rhino.Node);
    Code:
       0: aload_2
       1: aload_1
       2: iconst_1
       3: anewarray     #2                  // class java/lang/String
       6: dup
       7: iconst_0
       8: aload_2
       9: invokevirtual #3                  // Method com/google/javascript/rhino/Node.toString:()Ljava/lang/String;
      12: aastore
      13: invokestatic  #4                  // Method com/google/javascript/jscomp/JSError.make:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/DiagnosticType;[Ljava/lang/String;)Lcom/google/javascript/jscomp/JSError;
      16: astore_3
      17: aload_0
      18: getfield      #5                  // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
      21: aload_3
      22: invokevirtual #6                  // Method com/google/javascript/jscomp/AbstractCompiler.report:(Lcom/google/javascript/jscomp/JSError;)V
      25: return

  protected void reportCodeChange();
    Code:
       0: aload_0
       1: getfield      #5                  // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
       4: invokestatic  #7                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       7: pop
       8: aload_0
       9: getfield      #5                  // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
      12: invokevirtual #8                  // Method com/google/javascript/jscomp/AbstractCompiler.reportCodeChange:()V
      15: return

  protected boolean areNodesEqualForInlining(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: getfield      #5                  // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
       4: invokestatic  #7                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       7: pop
       8: aload_0
       9: getfield      #5                  // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
      12: aload_1
      13: aload_2
      14: invokevirtual #9                  // Method com/google/javascript/jscomp/AbstractCompiler.areNodesEqualForInlining:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)Z
      17: ireturn

  protected boolean isASTNormalized();
    Code:
       0: aload_0
       1: getfield      #5                  // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
       4: invokestatic  #7                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       7: pop
       8: aload_0
       9: getfield      #5                  // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
      12: invokevirtual #10                 // Method com/google/javascript/jscomp/AbstractCompiler.getLifeCycleStage:()Lcom/google/javascript/jscomp/AbstractCompiler$LifeCycleStage;
      15: invokevirtual #11                 // Method com/google/javascript/jscomp/AbstractCompiler$LifeCycleStage.isNormalized:()Z
      18: ireturn

  void beginTraversal(com.google.javascript.jscomp.AbstractCompiler);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
       5: return

  void endTraversal(com.google.javascript.jscomp.AbstractCompiler);
    Code:
       0: aload_0
       1: aconst_null
       2: putfield      #5                  // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
       5: return

  boolean mayEffectMutableState(com.google.javascript.rhino.Node);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #5                  // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
       5: invokestatic  #12                 // Method com/google/javascript/jscomp/NodeUtil.mayEffectMutableState:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/AbstractCompiler;)Z
       8: ireturn

  boolean mayHaveSideEffects(com.google.javascript.rhino.Node);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #5                  // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
       5: invokestatic  #13                 // Method com/google/javascript/jscomp/NodeUtil.mayHaveSideEffects:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/AbstractCompiler;)Z
       8: ireturn

  boolean nodeTypeMayHaveSideEffects(com.google.javascript.rhino.Node);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #5                  // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
       5: invokestatic  #14                 // Method com/google/javascript/jscomp/NodeUtil.nodeTypeMayHaveSideEffects:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/AbstractCompiler;)Z
       8: ireturn

  boolean isEcmaScript5OrGreater();
    Code:
       0: aload_0
       1: getfield      #5                  // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
       4: ifnull        21
       7: aload_0
       8: getfield      #5                  // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
      11: invokevirtual #15                 // Method com/google/javascript/jscomp/AbstractCompiler.acceptEcmaScript5:()Z
      14: ifeq          21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: ireturn

  com.google.javascript.jscomp.CodingConvention getCodingConvention();
    Code:
       0: aload_0
       1: getfield      #5                  // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
       4: invokevirtual #16                 // Method com/google/javascript/jscomp/AbstractCompiler.getCodingConvention:()Lcom/google/javascript/jscomp/CodingConvention;
       7: areturn
}
