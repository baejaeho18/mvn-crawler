Compiled from "LinkedFlowScope.java"
class com.google.javascript.jscomp.LinkedFlowScope implements com.google.javascript.jscomp.type.FlowScope {
  private final com.google.javascript.jscomp.LinkedFlowScope$FlatFlowScopeCache cache;

  private final com.google.javascript.jscomp.LinkedFlowScope parent;

  private int depth;

  static final int MAX_DEPTH;

  private com.google.javascript.jscomp.LinkedFlowScope$FlatFlowScopeCache flattened;

  private boolean frozen;

  private com.google.javascript.jscomp.LinkedFlowScope$LinkedFlowSlot lastSlot;

  private com.google.javascript.jscomp.LinkedFlowScope(com.google.javascript.jscomp.LinkedFlowScope$FlatFlowScopeCache, com.google.javascript.jscomp.LinkedFlowScope);
    Code:
       0: aload_0
       1: invokespecial #6                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #5                  // Field frozen:Z
       9: aload_0
      10: aload_1
      11: putfield      #4                  // Field cache:Lcom/google/javascript/jscomp/LinkedFlowScope$FlatFlowScopeCache;
      14: aload_2
      15: ifnonnull     39
      18: aload_0
      19: aconst_null
      20: putfield      #7                  // Field lastSlot:Lcom/google/javascript/jscomp/LinkedFlowScope$LinkedFlowSlot;
      23: aload_0
      24: iconst_0
      25: putfield      #8                  // Field depth:I
      28: aload_0
      29: aload_1
      30: invokestatic  #9                  // Method com/google/javascript/jscomp/LinkedFlowScope$FlatFlowScopeCache.access$000:(Lcom/google/javascript/jscomp/LinkedFlowScope$FlatFlowScopeCache;)Lcom/google/javascript/jscomp/LinkedFlowScope;
      33: putfield      #10                 // Field parent:Lcom/google/javascript/jscomp/LinkedFlowScope;
      36: goto          62
      39: aload_0
      40: aload_2
      41: getfield      #7                  // Field lastSlot:Lcom/google/javascript/jscomp/LinkedFlowScope$LinkedFlowSlot;
      44: putfield      #7                  // Field lastSlot:Lcom/google/javascript/jscomp/LinkedFlowScope$LinkedFlowSlot;
      47: aload_0
      48: aload_2
      49: getfield      #8                  // Field depth:I
      52: iconst_1
      53: iadd
      54: putfield      #8                  // Field depth:I
      57: aload_0
      58: aload_2
      59: putfield      #10                 // Field parent:Lcom/google/javascript/jscomp/LinkedFlowScope;
      62: return

  com.google.javascript.jscomp.LinkedFlowScope(com.google.javascript.jscomp.LinkedFlowScope$FlatFlowScopeCache);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: invokespecial #11                 // Method "<init>":(Lcom/google/javascript/jscomp/LinkedFlowScope$FlatFlowScopeCache;Lcom/google/javascript/jscomp/LinkedFlowScope;)V
       6: return

  com.google.javascript.jscomp.LinkedFlowScope(com.google.javascript.jscomp.LinkedFlowScope);
    Code:
       0: aload_0
       1: aload_1
       2: getfield      #4                  // Field cache:Lcom/google/javascript/jscomp/LinkedFlowScope$FlatFlowScopeCache;
       5: aload_1
       6: invokespecial #11                 // Method "<init>":(Lcom/google/javascript/jscomp/LinkedFlowScope$FlatFlowScopeCache;Lcom/google/javascript/jscomp/LinkedFlowScope;)V
       9: return

  private com.google.javascript.jscomp.Scope getFunctionScope();
    Code:
       0: aload_0
       1: getfield      #4                  // Field cache:Lcom/google/javascript/jscomp/LinkedFlowScope$FlatFlowScopeCache;
       4: invokestatic  #12                 // Method com/google/javascript/jscomp/LinkedFlowScope$FlatFlowScopeCache.access$100:(Lcom/google/javascript/jscomp/LinkedFlowScope$FlatFlowScopeCache;)Lcom/google/javascript/jscomp/Scope;
       7: areturn

  private boolean flowsFromBottom();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method getFunctionScope:()Lcom/google/javascript/jscomp/Scope;
       4: invokevirtual #13                 // Method com/google/javascript/jscomp/Scope.isBottom:()Z
       7: ireturn

  public static com.google.javascript.jscomp.LinkedFlowScope createEntryLattice(com.google.javascript.jscomp.Scope);
    Code:
       0: new           #14                 // class com/google/javascript/jscomp/LinkedFlowScope
       3: dup
       4: new           #15                 // class com/google/javascript/jscomp/LinkedFlowScope$FlatFlowScopeCache
       7: dup
       8: aload_0
       9: invokespecial #16                 // Method com/google/javascript/jscomp/LinkedFlowScope$FlatFlowScopeCache."<init>":(Lcom/google/javascript/jscomp/Scope;)V
      12: invokespecial #17                 // Method "<init>":(Lcom/google/javascript/jscomp/LinkedFlowScope$FlatFlowScopeCache;)V
      15: areturn

  public void inferSlotType(java.lang.String, com.google.javascript.rhino.jstype.JSType);
    Code:
       0: aload_0
       1: getfield      #5                  // Field frozen:Z
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: invokestatic  #18                 // Method com/google/common/base/Preconditions.checkState:(Z)V
      15: aload_0
      16: new           #19                 // class com/google/javascript/jscomp/LinkedFlowScope$LinkedFlowSlot
      19: dup
      20: aload_1
      21: aload_2
      22: aload_0
      23: getfield      #7                  // Field lastSlot:Lcom/google/javascript/jscomp/LinkedFlowScope$LinkedFlowSlot;
      26: invokespecial #20                 // Method com/google/javascript/jscomp/LinkedFlowScope$LinkedFlowSlot."<init>":(Ljava/lang/String;Lcom/google/javascript/rhino/jstype/JSType;Lcom/google/javascript/jscomp/LinkedFlowScope$LinkedFlowSlot;)V
      29: putfield      #7                  // Field lastSlot:Lcom/google/javascript/jscomp/LinkedFlowScope$LinkedFlowSlot;
      32: aload_0
      33: dup
      34: getfield      #8                  // Field depth:I
      37: iconst_1
      38: iadd
      39: putfield      #8                  // Field depth:I
      42: aload_0
      43: getfield      #4                  // Field cache:Lcom/google/javascript/jscomp/LinkedFlowScope$FlatFlowScopeCache;
      46: getfield      #21                 // Field com/google/javascript/jscomp/LinkedFlowScope$FlatFlowScopeCache.dirtySymbols:Ljava/util/Set;
      49: aload_1
      50: invokeinterface #22,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      55: pop
      56: return

  public void inferQualifiedSlot(com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method getFunctionScope:()Lcom/google/javascript/jscomp/Scope;
       4: astore        5
       6: aload         5
       8: invokevirtual #23                 // Method com/google/javascript/jscomp/Scope.isLocal:()Z
      11: ifeq          107
      14: aload         5
      16: aload_2
      17: invokevirtual #24                 // Method com/google/javascript/jscomp/Scope.getVar:(Ljava/lang/String;)Lcom/google/javascript/jscomp/Scope$Var;
      20: astore        6
      22: aload         6
      24: ifnonnull     45
      27: aload         5
      29: invokevirtual #13                 // Method com/google/javascript/jscomp/Scope.isBottom:()Z
      32: ifne          45
      35: aload         5
      37: aload_2
      38: aload_1
      39: aload_3
      40: aconst_null
      41: invokevirtual #25                 // Method com/google/javascript/jscomp/Scope.declare:(Ljava/lang/String;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/jstype/JSType;Lcom/google/javascript/jscomp/CompilerInput;)Lcom/google/javascript/jscomp/Scope$Var;
      44: pop
      45: aload         6
      47: ifnull        100
      50: aload         6
      52: invokevirtual #26                 // Method com/google/javascript/jscomp/Scope$Var.isTypeInferred:()Z
      55: ifne          100
      58: aload         6
      60: invokevirtual #27                 // Method com/google/javascript/jscomp/Scope$Var.getType:()Lcom/google/javascript/rhino/jstype/JSType;
      63: astore        7
      65: aload         7
      67: ifnull        97
      70: aload         4
      72: aload         7
      74: invokevirtual #28                 // Method com/google/javascript/rhino/jstype/JSType.isSubtype:(Lcom/google/javascript/rhino/jstype/JSType;)Z
      77: ifeq          97
      80: aload         7
      82: aload         4
      84: invokevirtual #28                 // Method com/google/javascript/rhino/jstype/JSType.isSubtype:(Lcom/google/javascript/rhino/jstype/JSType;)Z
      87: ifne          97
      90: aload_0
      91: aload_2
      92: aload         4
      94: invokevirtual #29                 // Method inferSlotType:(Ljava/lang/String;Lcom/google/javascript/rhino/jstype/JSType;)V
      97: goto          107
     100: aload_0
     101: aload_2
     102: aload         4
     104: invokevirtual #29                 // Method inferSlotType:(Ljava/lang/String;Lcom/google/javascript/rhino/jstype/JSType;)V
     107: return

  public com.google.javascript.rhino.jstype.JSType getTypeOfThis();
    Code:
       0: aload_0
       1: getfield      #4                  // Field cache:Lcom/google/javascript/jscomp/LinkedFlowScope$FlatFlowScopeCache;
       4: invokestatic  #12                 // Method com/google/javascript/jscomp/LinkedFlowScope$FlatFlowScopeCache.access$100:(Lcom/google/javascript/jscomp/LinkedFlowScope$FlatFlowScopeCache;)Lcom/google/javascript/jscomp/Scope;
       7: invokevirtual #30                 // Method com/google/javascript/jscomp/Scope.getTypeOfThis:()Lcom/google/javascript/rhino/jstype/JSType;
      10: areturn

  public com.google.javascript.rhino.Node getRootNode();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method getFunctionScope:()Lcom/google/javascript/jscomp/Scope;
       4: invokevirtual #31                 // Method com/google/javascript/jscomp/Scope.getRootNode:()Lcom/google/javascript/rhino/Node;
       7: areturn

  public com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> getParentScope();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method getFunctionScope:()Lcom/google/javascript/jscomp/Scope;
       4: invokevirtual #32                 // Method com/google/javascript/jscomp/Scope.getParentScope:()Lcom/google/javascript/rhino/jstype/StaticScope;
       7: areturn

  public com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> getSlot(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #4                  // Field cache:Lcom/google/javascript/jscomp/LinkedFlowScope$FlatFlowScopeCache;
       4: getfield      #21                 // Field com/google/javascript/jscomp/LinkedFlowScope$FlatFlowScopeCache.dirtySymbols:Ljava/util/Set;
       7: aload_1
       8: invokeinterface #33,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      13: ifeq          46
      16: aload_0
      17: getfield      #7                  // Field lastSlot:Lcom/google/javascript/jscomp/LinkedFlowScope$LinkedFlowSlot;
      20: astore_2
      21: aload_2
      22: ifnull        46
      25: aload_2
      26: invokevirtual #34                 // Method com/google/javascript/jscomp/LinkedFlowScope$LinkedFlowSlot.getName:()Ljava/lang/String;
      29: aload_1
      30: invokevirtual #35                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      33: ifeq          38
      36: aload_2
      37: areturn
      38: aload_2
      39: getfield      #36                 // Field com/google/javascript/jscomp/LinkedFlowScope$LinkedFlowSlot.parent:Lcom/google/javascript/jscomp/LinkedFlowScope$LinkedFlowSlot;
      42: astore_2
      43: goto          21
      46: aload_0
      47: getfield      #4                  // Field cache:Lcom/google/javascript/jscomp/LinkedFlowScope$FlatFlowScopeCache;
      50: aload_1
      51: invokevirtual #37                 // Method com/google/javascript/jscomp/LinkedFlowScope$FlatFlowScopeCache.getSlot:(Ljava/lang/String;)Lcom/google/javascript/rhino/jstype/StaticSlot;
      54: areturn

  public com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> getOwnSlot(java.lang.String);
    Code:
       0: new           #38                 // class java/lang/UnsupportedOperationException
       3: dup
       4: invokespecial #39                 // Method java/lang/UnsupportedOperationException."<init>":()V
       7: athrow

  public com.google.javascript.jscomp.type.FlowScope createChildFlowScope();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #5                  // Field frozen:Z
       5: aload_0
       6: getfield      #8                  // Field depth:I
       9: sipush        250
      12: if_icmple     46
      15: aload_0
      16: getfield      #40                 // Field flattened:Lcom/google/javascript/jscomp/LinkedFlowScope$FlatFlowScopeCache;
      19: ifnonnull     34
      22: aload_0
      23: new           #15                 // class com/google/javascript/jscomp/LinkedFlowScope$FlatFlowScopeCache
      26: dup
      27: aload_0
      28: invokespecial #41                 // Method com/google/javascript/jscomp/LinkedFlowScope$FlatFlowScopeCache."<init>":(Lcom/google/javascript/jscomp/LinkedFlowScope;)V
      31: putfield      #40                 // Field flattened:Lcom/google/javascript/jscomp/LinkedFlowScope$FlatFlowScopeCache;
      34: new           #14                 // class com/google/javascript/jscomp/LinkedFlowScope
      37: dup
      38: aload_0
      39: getfield      #40                 // Field flattened:Lcom/google/javascript/jscomp/LinkedFlowScope$FlatFlowScopeCache;
      42: invokespecial #17                 // Method "<init>":(Lcom/google/javascript/jscomp/LinkedFlowScope$FlatFlowScopeCache;)V
      45: areturn
      46: new           #14                 // class com/google/javascript/jscomp/LinkedFlowScope
      49: dup
      50: aload_0
      51: invokespecial #42                 // Method "<init>":(Lcom/google/javascript/jscomp/LinkedFlowScope;)V
      54: areturn

  public com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> findUniqueRefinedSlot(com.google.javascript.jscomp.type.FlowScope);
    Code:
       0: aconst_null
       1: astore_2
       2: aload_0
       3: astore_3
       4: aload_3
       5: aload_1
       6: if_acmpeq     86
       9: aload_3
      10: getfield      #7                  // Field lastSlot:Lcom/google/javascript/jscomp/LinkedFlowScope$LinkedFlowSlot;
      13: astore        4
      15: aload         4
      17: ifnull        78
      20: aload_3
      21: getfield      #10                 // Field parent:Lcom/google/javascript/jscomp/LinkedFlowScope;
      24: ifnull        39
      27: aload_3
      28: getfield      #10                 // Field parent:Lcom/google/javascript/jscomp/LinkedFlowScope;
      31: getfield      #7                  // Field lastSlot:Lcom/google/javascript/jscomp/LinkedFlowScope$LinkedFlowSlot;
      34: aload         4
      36: if_acmpeq     78
      39: aload_2
      40: ifnonnull     49
      43: aload         4
      45: astore_2
      46: goto          68
      49: aload         4
      51: invokevirtual #34                 // Method com/google/javascript/jscomp/LinkedFlowScope$LinkedFlowSlot.getName:()Ljava/lang/String;
      54: aload_2
      55: invokeinterface #43,  1           // InterfaceMethod com/google/javascript/rhino/jstype/StaticSlot.getName:()Ljava/lang/String;
      60: invokevirtual #35                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      63: ifne          68
      66: aconst_null
      67: areturn
      68: aload         4
      70: getfield      #36                 // Field com/google/javascript/jscomp/LinkedFlowScope$LinkedFlowSlot.parent:Lcom/google/javascript/jscomp/LinkedFlowScope$LinkedFlowSlot;
      73: astore        4
      75: goto          15
      78: aload_3
      79: getfield      #10                 // Field parent:Lcom/google/javascript/jscomp/LinkedFlowScope;
      82: astore_3
      83: goto          4
      86: aload_2
      87: areturn

  public void completeScope(com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>);
    Code:
       0: aload_1
       1: checkcast     #44                 // class com/google/javascript/jscomp/Scope
       4: astore_2
       5: aload_2
       6: invokevirtual #45                 // Method com/google/javascript/jscomp/Scope.getVars:()Ljava/util/Iterator;
       9: astore_3
      10: aload_3
      11: invokeinterface #46,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          87
      19: aload_3
      20: invokeinterface #47,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #48                 // class com/google/javascript/jscomp/Scope$Var
      28: astore        4
      30: aload         4
      32: invokevirtual #26                 // Method com/google/javascript/jscomp/Scope$Var.isTypeInferred:()Z
      35: ifeq          84
      38: aload         4
      40: invokevirtual #27                 // Method com/google/javascript/jscomp/Scope$Var.getType:()Lcom/google/javascript/rhino/jstype/JSType;
      43: astore        5
      45: aload         5
      47: ifnull        58
      50: aload         5
      52: invokevirtual #49                 // Method com/google/javascript/rhino/jstype/JSType.isUnknownType:()Z
      55: ifeq          84
      58: aload_0
      59: aload         4
      61: invokevirtual #50                 // Method com/google/javascript/jscomp/Scope$Var.getName:()Ljava/lang/String;
      64: invokevirtual #51                 // Method getSlot:(Ljava/lang/String;)Lcom/google/javascript/rhino/jstype/StaticSlot;
      67: invokeinterface #52,  1           // InterfaceMethod com/google/javascript/rhino/jstype/StaticSlot.getType:()Ljava/lang/Object;
      72: checkcast     #53                 // class com/google/javascript/rhino/jstype/JSType
      75: astore        6
      77: aload         4
      79: aload         6
      81: invokevirtual #54                 // Method com/google/javascript/jscomp/Scope$Var.setType:(Lcom/google/javascript/rhino/jstype/JSType;)V
      84: goto          10
      87: return

  public com.google.javascript.jscomp.LinkedFlowScope optimize();
    Code:
       0: aload_0
       1: astore_1
       2: aload_1
       3: getfield      #10                 // Field parent:Lcom/google/javascript/jscomp/LinkedFlowScope;
       6: ifnull        31
       9: aload_1
      10: getfield      #7                  // Field lastSlot:Lcom/google/javascript/jscomp/LinkedFlowScope$LinkedFlowSlot;
      13: aload_1
      14: getfield      #10                 // Field parent:Lcom/google/javascript/jscomp/LinkedFlowScope;
      17: getfield      #7                  // Field lastSlot:Lcom/google/javascript/jscomp/LinkedFlowScope$LinkedFlowSlot;
      20: if_acmpne     31
      23: aload_1
      24: getfield      #10                 // Field parent:Lcom/google/javascript/jscomp/LinkedFlowScope;
      27: astore_1
      28: goto          2
      31: aload_1
      32: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #14                 // class com/google/javascript/jscomp/LinkedFlowScope
       4: ifeq          265
       7: aload_1
       8: checkcast     #14                 // class com/google/javascript/jscomp/LinkedFlowScope
      11: astore_2
      12: aload_0
      13: invokevirtual #55                 // Method optimize:()Lcom/google/javascript/jscomp/LinkedFlowScope;
      16: aload_2
      17: invokevirtual #55                 // Method optimize:()Lcom/google/javascript/jscomp/LinkedFlowScope;
      20: if_acmpne     25
      23: iconst_1
      24: ireturn
      25: aload_0
      26: invokespecial #1                  // Method getFunctionScope:()Lcom/google/javascript/jscomp/Scope;
      29: aload_2
      30: invokespecial #1                  // Method getFunctionScope:()Lcom/google/javascript/jscomp/Scope;
      33: if_acmpeq     38
      36: iconst_0
      37: ireturn
      38: aload_0
      39: getfield      #4                  // Field cache:Lcom/google/javascript/jscomp/LinkedFlowScope$FlatFlowScopeCache;
      42: aload_2
      43: getfield      #4                  // Field cache:Lcom/google/javascript/jscomp/LinkedFlowScope$FlatFlowScopeCache;
      46: if_acmpne     107
      49: aload_0
      50: getfield      #4                  // Field cache:Lcom/google/javascript/jscomp/LinkedFlowScope$FlatFlowScopeCache;
      53: getfield      #21                 // Field com/google/javascript/jscomp/LinkedFlowScope$FlatFlowScopeCache.dirtySymbols:Ljava/util/Set;
      56: invokeinterface #56,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      61: astore_3
      62: aload_3
      63: invokeinterface #46,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      68: ifeq          105
      71: aload_3
      72: invokeinterface #47,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      77: checkcast     #57                 // class java/lang/String
      80: astore        4
      82: aload_0
      83: aload         4
      85: invokevirtual #51                 // Method getSlot:(Ljava/lang/String;)Lcom/google/javascript/rhino/jstype/StaticSlot;
      88: aload_2
      89: aload         4
      91: invokevirtual #51                 // Method getSlot:(Ljava/lang/String;)Lcom/google/javascript/rhino/jstype/StaticSlot;
      94: invokestatic  #58                 // Method diffSlots:(Lcom/google/javascript/rhino/jstype/StaticSlot;Lcom/google/javascript/rhino/jstype/StaticSlot;)Z
      97: ifeq          102
     100: iconst_0
     101: ireturn
     102: goto          62
     105: iconst_1
     106: ireturn
     107: aload_0
     108: invokespecial #3                  // Method allFlowSlots:()Ljava/util/Map;
     111: astore_3
     112: aload_2
     113: invokespecial #3                  // Method allFlowSlots:()Ljava/util/Map;
     116: astore        4
     118: aload_3
     119: invokeinterface #59,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
     124: invokeinterface #60,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
     129: astore        5
     131: aload         5
     133: invokeinterface #46,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     138: ifeq          198
     141: aload         5
     143: invokeinterface #47,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     148: checkcast     #61                 // class com/google/javascript/rhino/jstype/StaticSlot
     151: astore        6
     153: aload         6
     155: aload         4
     157: aload         6
     159: invokeinterface #43,  1           // InterfaceMethod com/google/javascript/rhino/jstype/StaticSlot.getName:()Ljava/lang/String;
     164: invokeinterface #62,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
     169: checkcast     #61                 // class com/google/javascript/rhino/jstype/StaticSlot
     172: invokestatic  #58                 // Method diffSlots:(Lcom/google/javascript/rhino/jstype/StaticSlot;Lcom/google/javascript/rhino/jstype/StaticSlot;)Z
     175: ifeq          180
     178: iconst_0
     179: ireturn
     180: aload         4
     182: aload         6
     184: invokeinterface #43,  1           // InterfaceMethod com/google/javascript/rhino/jstype/StaticSlot.getName:()Ljava/lang/String;
     189: invokeinterface #63,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
     194: pop
     195: goto          131
     198: aload         4
     200: invokeinterface #59,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
     205: invokeinterface #60,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
     210: astore        5
     212: aload         5
     214: invokeinterface #46,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     219: ifeq          263
     222: aload         5
     224: invokeinterface #47,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     229: checkcast     #61                 // class com/google/javascript/rhino/jstype/StaticSlot
     232: astore        6
     234: aload         6
     236: aload_3
     237: aload         6
     239: invokeinterface #43,  1           // InterfaceMethod com/google/javascript/rhino/jstype/StaticSlot.getName:()Ljava/lang/String;
     244: invokeinterface #62,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
     249: checkcast     #61                 // class com/google/javascript/rhino/jstype/StaticSlot
     252: invokestatic  #58                 // Method diffSlots:(Lcom/google/javascript/rhino/jstype/StaticSlot;Lcom/google/javascript/rhino/jstype/StaticSlot;)Z
     255: ifeq          260
     258: iconst_0
     259: ireturn
     260: goto          212
     263: iconst_1
     264: ireturn
     265: iconst_0
     266: ireturn

  private static boolean diffSlots(com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType>, com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType>);
    Code:
       0: aload_0
       1: ifnull        13
       4: aload_0
       5: invokeinterface #52,  1           // InterfaceMethod com/google/javascript/rhino/jstype/StaticSlot.getType:()Ljava/lang/Object;
      10: ifnonnull     17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: istore_2
      19: aload_1
      20: ifnull        32
      23: aload_1
      24: invokeinterface #52,  1           // InterfaceMethod com/google/javascript/rhino/jstype/StaticSlot.getType:()Ljava/lang/Object;
      29: ifnonnull     36
      32: iconst_1
      33: goto          37
      36: iconst_0
      37: istore_3
      38: iload_2
      39: ifeq          48
      42: iload_3
      43: ifeq          48
      46: iconst_0
      47: ireturn
      48: iload_2
      49: iload_3
      50: ixor
      51: ifeq          56
      54: iconst_1
      55: ireturn
      56: aload_0
      57: invokeinterface #52,  1           // InterfaceMethod com/google/javascript/rhino/jstype/StaticSlot.getType:()Ljava/lang/Object;
      62: checkcast     #53                 // class com/google/javascript/rhino/jstype/JSType
      65: aload_1
      66: invokeinterface #52,  1           // InterfaceMethod com/google/javascript/rhino/jstype/StaticSlot.getType:()Ljava/lang/Object;
      71: checkcast     #53                 // class com/google/javascript/rhino/jstype/JSType
      74: invokevirtual #64                 // Method com/google/javascript/rhino/jstype/JSType.differsFrom:(Lcom/google/javascript/rhino/jstype/JSType;)Z
      77: ireturn

  private java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType>> allFlowSlots();
    Code:
       0: invokestatic  #65                 // Method com/google/common/collect/Maps.newHashMap:()Ljava/util/HashMap;
       3: astore_1
       4: aload_0
       5: getfield      #7                  // Field lastSlot:Lcom/google/javascript/jscomp/LinkedFlowScope$LinkedFlowSlot;
       8: astore_2
       9: aload_2
      10: ifnull        46
      13: aload_1
      14: aload_2
      15: invokevirtual #34                 // Method com/google/javascript/jscomp/LinkedFlowScope$LinkedFlowSlot.getName:()Ljava/lang/String;
      18: invokeinterface #66,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      23: ifne          38
      26: aload_1
      27: aload_2
      28: invokevirtual #34                 // Method com/google/javascript/jscomp/LinkedFlowScope$LinkedFlowSlot.getName:()Ljava/lang/String;
      31: aload_2
      32: invokeinterface #67,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      37: pop
      38: aload_2
      39: getfield      #36                 // Field com/google/javascript/jscomp/LinkedFlowScope$LinkedFlowSlot.parent:Lcom/google/javascript/jscomp/LinkedFlowScope$LinkedFlowSlot;
      42: astore_2
      43: goto          9
      46: aload_0
      47: getfield      #4                  // Field cache:Lcom/google/javascript/jscomp/LinkedFlowScope$FlatFlowScopeCache;
      50: invokestatic  #68                 // Method com/google/javascript/jscomp/LinkedFlowScope$FlatFlowScopeCache.access$300:(Lcom/google/javascript/jscomp/LinkedFlowScope$FlatFlowScopeCache;)Ljava/util/Map;
      53: invokeinterface #69,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      58: invokeinterface #56,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      63: astore_2
      64: aload_2
      65: invokeinterface #46,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      70: ifeq          120
      73: aload_2
      74: invokeinterface #47,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      79: checkcast     #70                 // class java/util/Map$Entry
      82: astore_3
      83: aload_1
      84: aload_3
      85: invokeinterface #71,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      90: invokeinterface #66,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      95: ifne          117
      98: aload_1
      99: aload_3
     100: invokeinterface #71,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
     105: aload_3
     106: invokeinterface #72,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
     111: invokeinterface #67,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     116: pop
     117: goto          64
     120: aload_1
     121: areturn

  public int hashCode();
    Code:
       0: new           #38                 // class java/lang/UnsupportedOperationException
       3: dup
       4: invokespecial #39                 // Method java/lang/UnsupportedOperationException."<init>":()V
       7: athrow

  public com.google.javascript.jscomp.type.FlowScope optimize();
    Code:
       0: aload_0
       1: invokevirtual #55                 // Method optimize:()Lcom/google/javascript/jscomp/LinkedFlowScope;
       4: areturn

  public java.lang.Object getTypeOfThis();
    Code:
       0: aload_0
       1: invokevirtual #73                 // Method getTypeOfThis:()Lcom/google/javascript/rhino/jstype/JSType;
       4: areturn

  static boolean access$202(com.google.javascript.jscomp.LinkedFlowScope, boolean);
    Code:
       0: aload_0
       1: iload_1
       2: dup_x1
       3: putfield      #5                  // Field frozen:Z
       6: ireturn

  static com.google.javascript.jscomp.LinkedFlowScope$FlatFlowScopeCache access$400(com.google.javascript.jscomp.LinkedFlowScope);
    Code:
       0: aload_0
       1: getfield      #4                  // Field cache:Lcom/google/javascript/jscomp/LinkedFlowScope$FlatFlowScopeCache;
       4: areturn

  static java.util.Map access$500(com.google.javascript.jscomp.LinkedFlowScope);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method allFlowSlots:()Ljava/util/Map;
       4: areturn

  static boolean access$600(com.google.javascript.jscomp.LinkedFlowScope);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method flowsFromBottom:()Z
       4: ireturn

  static com.google.javascript.jscomp.Scope access$700(com.google.javascript.jscomp.LinkedFlowScope);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method getFunctionScope:()Lcom/google/javascript/jscomp/Scope;
       4: areturn
}
