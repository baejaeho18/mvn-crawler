Compiled from "FunctionTypeBuilder.java"
class com.google.javascript.jscomp.FunctionTypeBuilder$AstFunctionContents implements com.google.javascript.jscomp.FunctionTypeBuilder$FunctionContents {
  private final com.google.javascript.rhino.Node n;

  private boolean hasNonEmptyReturns;

  private java.util.Set<java.lang.String> escapedVarNames;

  private java.util.Set<java.lang.String> escapedQualifiedNames;

  private final com.google.common.collect.Multiset<java.lang.String> assignedVarNames;

  com.google.javascript.jscomp.FunctionTypeBuilder$AstFunctionContents(com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field hasNonEmptyReturns:Z
       9: aload_0
      10: invokestatic  #3                  // Method com/google/common/collect/HashMultiset.create:()Lcom/google/common/collect/HashMultiset;
      13: putfield      #4                  // Field assignedVarNames:Lcom/google/common/collect/Multiset;
      16: aload_0
      17: aload_1
      18: putfield      #5                  // Field n:Lcom/google/javascript/rhino/Node;
      21: return

  public com.google.javascript.rhino.Node getSourceNode();
    Code:
       0: aload_0
       1: getfield      #5                  // Field n:Lcom/google/javascript/rhino/Node;
       4: areturn

  public boolean mayBeFromExterns();
    Code:
       0: aload_0
       1: getfield      #5                  // Field n:Lcom/google/javascript/rhino/Node;
       4: invokevirtual #6                  // Method com/google/javascript/rhino/Node.isFromExterns:()Z
       7: ireturn

  public boolean mayHaveNonEmptyReturns();
    Code:
       0: aload_0
       1: getfield      #2                  // Field hasNonEmptyReturns:Z
       4: ireturn

  void recordNonEmptyReturn();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #2                  // Field hasNonEmptyReturns:Z
       5: return

  public boolean mayHaveSingleThrow();
    Code:
       0: aload_0
       1: getfield      #5                  // Field n:Lcom/google/javascript/rhino/Node;
       4: invokevirtual #7                  // Method com/google/javascript/rhino/Node.getLastChild:()Lcom/google/javascript/rhino/Node;
       7: astore_1
       8: aload_1
       9: invokevirtual #8                  // Method com/google/javascript/rhino/Node.hasOneChild:()Z
      12: ifeq          29
      15: aload_1
      16: invokevirtual #9                  // Method com/google/javascript/rhino/Node.getFirstChild:()Lcom/google/javascript/rhino/Node;
      19: invokevirtual #10                 // Method com/google/javascript/rhino/Node.isThrow:()Z
      22: ifeq          29
      25: iconst_1
      26: goto          30
      29: iconst_0
      30: ireturn

  public java.lang.Iterable<java.lang.String> getEscapedVarNames();
    Code:
       0: aload_0
       1: getfield      #11                 // Field escapedVarNames:Ljava/util/Set;
       4: ifnonnull     13
       7: invokestatic  #12                 // Method com/google/common/collect/ImmutableList.of:()Lcom/google/common/collect/ImmutableList;
      10: goto          17
      13: aload_0
      14: getfield      #11                 // Field escapedVarNames:Ljava/util/Set;
      17: areturn

  void recordEscapedVarName(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #11                 // Field escapedVarNames:Ljava/util/Set;
       4: ifnonnull     14
       7: aload_0
       8: invokestatic  #13                 // Method com/google/common/collect/Sets.newHashSet:()Ljava/util/HashSet;
      11: putfield      #11                 // Field escapedVarNames:Ljava/util/Set;
      14: aload_0
      15: getfield      #11                 // Field escapedVarNames:Ljava/util/Set;
      18: aload_1
      19: invokeinterface #14,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      24: pop
      25: return

  public java.util.Set<java.lang.String> getEscapedQualifiedNames();
    Code:
       0: aload_0
       1: getfield      #15                 // Field escapedQualifiedNames:Ljava/util/Set;
       4: ifnonnull     13
       7: invokestatic  #16                 // Method com/google/common/collect/ImmutableSet.of:()Lcom/google/common/collect/ImmutableSet;
      10: goto          17
      13: aload_0
      14: getfield      #15                 // Field escapedQualifiedNames:Ljava/util/Set;
      17: areturn

  void recordEscapedQualifiedName(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #15                 // Field escapedQualifiedNames:Ljava/util/Set;
       4: ifnonnull     14
       7: aload_0
       8: invokestatic  #13                 // Method com/google/common/collect/Sets.newHashSet:()Ljava/util/HashSet;
      11: putfield      #15                 // Field escapedQualifiedNames:Ljava/util/Set;
      14: aload_0
      15: getfield      #15                 // Field escapedQualifiedNames:Ljava/util/Set;
      18: aload_1
      19: invokeinterface #14,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      24: pop
      25: return

  public com.google.common.collect.Multiset<java.lang.String> getAssignedNameCounts();
    Code:
       0: aload_0
       1: getfield      #4                  // Field assignedVarNames:Lcom/google/common/collect/Multiset;
       4: areturn

  void recordAssignedName(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #4                  // Field assignedVarNames:Lcom/google/common/collect/Multiset;
       4: aload_1
       5: invokeinterface #17,  2           // InterfaceMethod com/google/common/collect/Multiset.add:(Ljava/lang/Object;)Z
      10: pop
      11: return
}
