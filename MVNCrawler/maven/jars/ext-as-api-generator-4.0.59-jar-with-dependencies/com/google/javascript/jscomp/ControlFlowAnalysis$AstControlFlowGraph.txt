Compiled from "ControlFlowAnalysis.java"
class com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph extends com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> {
  private final java.util.Map<com.google.javascript.jscomp.graph.DiGraph$DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph$Branch>, java.lang.Integer> priorities;

  private com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph(com.google.javascript.rhino.Node, java.util.Map<com.google.javascript.jscomp.graph.DiGraph$DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph$Branch>, java.lang.Integer>, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_1
       3: iload_3
       4: invokespecial #3                  // Method com/google/javascript/jscomp/ControlFlowGraph."<init>":(Ljava/lang/Object;ZZ)V
       7: aload_0
       8: aload_2
       9: putfield      #4                  // Field priorities:Ljava/util/Map;
      12: return

  public java.util.Comparator<com.google.javascript.jscomp.graph.DiGraph$DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph$Branch>> getOptionalNodeComparator(boolean);
    Code:
       0: iload_1
       1: ifeq          13
       4: new           #5                  // class com/google/javascript/jscomp/ControlFlowAnalysis$AstControlFlowGraph$1
       7: dup
       8: aload_0
       9: invokespecial #6                  // Method com/google/javascript/jscomp/ControlFlowAnalysis$AstControlFlowGraph$1."<init>":(Lcom/google/javascript/jscomp/ControlFlowAnalysis$AstControlFlowGraph;)V
      12: areturn
      13: new           #7                  // class com/google/javascript/jscomp/ControlFlowAnalysis$AstControlFlowGraph$2
      16: dup
      17: aload_0
      18: invokespecial #8                  // Method com/google/javascript/jscomp/ControlFlowAnalysis$AstControlFlowGraph$2."<init>":(Lcom/google/javascript/jscomp/ControlFlowAnalysis$AstControlFlowGraph;)V
      21: areturn

  private int getPosition(com.google.javascript.jscomp.graph.DiGraph$DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph$Branch>);
    Code:
       0: aload_0
       1: getfield      #4                  // Field priorities:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #9,  2            // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #10                 // class java/lang/Integer
      13: astore_2
      14: aload_2
      15: invokestatic  #11                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
      18: pop
      19: aload_2
      20: invokevirtual #12                 // Method java/lang/Integer.intValue:()I
      23: ireturn

  com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph(com.google.javascript.rhino.Node, java.util.Map, boolean, com.google.javascript.jscomp.ControlFlowAnalysis$1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iload_3
       4: invokespecial #2                  // Method "<init>":(Lcom/google/javascript/rhino/Node;Ljava/util/Map;Z)V
       7: return

  static int access$200(com.google.javascript.jscomp.ControlFlowAnalysis$AstControlFlowGraph, com.google.javascript.jscomp.graph.DiGraph$DiGraphNode);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method getPosition:(Lcom/google/javascript/jscomp/graph/DiGraph$DiGraphNode;)I
       5: ireturn
}
