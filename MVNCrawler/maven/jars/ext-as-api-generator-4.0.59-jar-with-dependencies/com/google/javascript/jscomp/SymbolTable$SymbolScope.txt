Compiled from "SymbolTable.java"
public final class com.google.javascript.jscomp.SymbolTable$SymbolScope implements com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> {
  private final com.google.javascript.rhino.Node rootNode;

  private final com.google.javascript.jscomp.SymbolTable$SymbolScope parent;

  private final com.google.javascript.rhino.jstype.JSType typeOfThis;

  private final java.util.Map<java.lang.String, com.google.javascript.jscomp.SymbolTable$Symbol> ownSymbols;

  private final int scopeDepth;

  private int innerAnonFunctionsWithNames;

  private com.google.javascript.jscomp.SymbolTable$Symbol mySymbol;

  com.google.javascript.jscomp.SymbolTable$SymbolScope(com.google.javascript.rhino.Node, com.google.javascript.jscomp.SymbolTable$SymbolScope, com.google.javascript.rhino.jstype.JSType, com.google.javascript.jscomp.SymbolTable$Symbol);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #4                  // Method com/google/common/collect/Maps.newLinkedHashMap:()Ljava/util/LinkedHashMap;
       8: putfield      #1                  // Field ownSymbols:Ljava/util/Map;
      11: aload_0
      12: iconst_0
      13: putfield      #2                  // Field innerAnonFunctionsWithNames:I
      16: aload_0
      17: aload_1
      18: putfield      #5                  // Field rootNode:Lcom/google/javascript/rhino/Node;
      21: aload_0
      22: aload_2
      23: putfield      #6                  // Field parent:Lcom/google/javascript/jscomp/SymbolTable$SymbolScope;
      26: aload_0
      27: aload_3
      28: putfield      #7                  // Field typeOfThis:Lcom/google/javascript/rhino/jstype/JSType;
      31: aload_0
      32: aload_2
      33: ifnonnull     40
      36: iconst_0
      37: goto          46
      40: aload_2
      41: invokevirtual #8                  // Method getScopeDepth:()I
      44: iconst_1
      45: iadd
      46: putfield      #9                  // Field scopeDepth:I
      49: aload_0
      50: aload         4
      52: putfield      #10                 // Field mySymbol:Lcom/google/javascript/jscomp/SymbolTable$Symbol;
      55: return

  com.google.javascript.jscomp.SymbolTable$Symbol getSymbolForScope();
    Code:
       0: aload_0
       1: getfield      #10                 // Field mySymbol:Lcom/google/javascript/jscomp/SymbolTable$Symbol;
       4: areturn

  void setSymbolForScope(com.google.javascript.jscomp.SymbolTable$Symbol);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #10                 // Field mySymbol:Lcom/google/javascript/jscomp/SymbolTable$Symbol;
       5: return

  public int getIndexOfSymbol(com.google.javascript.jscomp.SymbolTable$Symbol);
    Code:
       0: aload_0
       1: getfield      #1                  // Field ownSymbols:Ljava/util/Map;
       4: invokeinterface #11,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
       9: aload_1
      10: invokestatic  #12                 // Method com/google/common/base/Predicates.equalTo:(Ljava/lang/Object;)Lcom/google/common/base/Predicate;
      13: invokestatic  #13                 // Method com/google/common/collect/Iterables.indexOf:(Ljava/lang/Iterable;Lcom/google/common/base/Predicate;)I
      16: ireturn

  public com.google.javascript.rhino.Node getRootNode();
    Code:
       0: aload_0
       1: getfield      #5                  // Field rootNode:Lcom/google/javascript/rhino/Node;
       4: areturn

  public com.google.javascript.jscomp.SymbolTable$SymbolScope getParentScope();
    Code:
       0: aload_0
       1: getfield      #6                  // Field parent:Lcom/google/javascript/jscomp/SymbolTable$SymbolScope;
       4: areturn

  public com.google.javascript.jscomp.SymbolTable$Symbol getQualifiedSlot(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #14                 // Method getSlot:(Ljava/lang/String;)Lcom/google/javascript/jscomp/SymbolTable$Symbol;
       5: astore_2
       6: aload_2
       7: ifnull        12
      10: aload_2
      11: areturn
      12: aload_1
      13: bipush        46
      15: invokevirtual #15                 // Method java/lang/String.lastIndexOf:(I)I
      18: istore_3
      19: iload_3
      20: iconst_m1
      21: if_icmpeq     65
      24: aload_0
      25: aload_1
      26: iconst_0
      27: iload_3
      28: invokevirtual #16                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      31: invokevirtual #17                 // Method getQualifiedSlot:(Ljava/lang/String;)Lcom/google/javascript/jscomp/SymbolTable$Symbol;
      34: astore        4
      36: aload         4
      38: ifnull        65
      41: aload         4
      43: invokevirtual #18                 // Method com/google/javascript/jscomp/SymbolTable$Symbol.getPropertyScope:()Lcom/google/javascript/jscomp/SymbolTable$SymbolScope;
      46: ifnull        65
      49: aload         4
      51: invokevirtual #18                 // Method com/google/javascript/jscomp/SymbolTable$Symbol.getPropertyScope:()Lcom/google/javascript/jscomp/SymbolTable$SymbolScope;
      54: aload_1
      55: iload_3
      56: iconst_1
      57: iadd
      58: invokevirtual #19                 // Method java/lang/String.substring:(I)Ljava/lang/String;
      61: invokevirtual #14                 // Method getSlot:(Ljava/lang/String;)Lcom/google/javascript/jscomp/SymbolTable$Symbol;
      64: areturn
      65: aconst_null
      66: areturn

  public com.google.javascript.jscomp.SymbolTable$Symbol getSlot(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #20                 // Method getOwnSlot:(Ljava/lang/String;)Lcom/google/javascript/jscomp/SymbolTable$Symbol;
       5: astore_2
       6: aload_2
       7: ifnull        12
      10: aload_2
      11: areturn
      12: aload_0
      13: getfield      #6                  // Field parent:Lcom/google/javascript/jscomp/SymbolTable$SymbolScope;
      16: ifnonnull     23
      19: aconst_null
      20: goto          31
      23: aload_0
      24: getfield      #6                  // Field parent:Lcom/google/javascript/jscomp/SymbolTable$SymbolScope;
      27: aload_1
      28: invokevirtual #14                 // Method getSlot:(Ljava/lang/String;)Lcom/google/javascript/jscomp/SymbolTable$Symbol;
      31: astore_3
      32: aload_3
      33: ifnull        38
      36: aload_3
      37: areturn
      38: aconst_null
      39: areturn

  public com.google.javascript.jscomp.SymbolTable$Symbol getOwnSlot(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #1                  // Field ownSymbols:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #21,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #22                 // class com/google/javascript/jscomp/SymbolTable$Symbol
      13: areturn

  public com.google.javascript.rhino.jstype.JSType getTypeOfThis();
    Code:
       0: aload_0
       1: getfield      #7                  // Field typeOfThis:Lcom/google/javascript/rhino/jstype/JSType;
       4: areturn

  public boolean isGlobalScope();
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method getParentScope:()Lcom/google/javascript/jscomp/SymbolTable$SymbolScope;
       4: ifnonnull     18
       7: aload_0
       8: invokevirtual #24                 // Method getRootNode:()Lcom/google/javascript/rhino/Node;
      11: ifnull        18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn

  public boolean isDocScope();
    Code:
       0: aload_0
       1: invokevirtual #24                 // Method getRootNode:()Lcom/google/javascript/rhino/Node;
       4: ifnonnull     29
       7: aload_0
       8: getfield      #10                 // Field mySymbol:Lcom/google/javascript/jscomp/SymbolTable$Symbol;
      11: ifnull        29
      14: aload_0
      15: getfield      #10                 // Field mySymbol:Lcom/google/javascript/jscomp/SymbolTable$Symbol;
      18: invokestatic  #25                 // Method com/google/javascript/jscomp/SymbolTable$Symbol.access$600:(Lcom/google/javascript/jscomp/SymbolTable$Symbol;)Lcom/google/javascript/jscomp/SymbolTable$SymbolScope;
      21: aload_0
      22: if_acmpne     29
      25: iconst_1
      26: goto          30
      29: iconst_0
      30: ireturn

  public boolean isPropertyScope();
    Code:
       0: aload_0
       1: invokevirtual #24                 // Method getRootNode:()Lcom/google/javascript/rhino/Node;
       4: ifnonnull     18
       7: aload_0
       8: invokevirtual #26                 // Method isDocScope:()Z
      11: ifne          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn

  public boolean isLexicalScope();
    Code:
       0: aload_0
       1: invokevirtual #24                 // Method getRootNode:()Lcom/google/javascript/rhino/Node;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public int getScopeDepth();
    Code:
       0: aload_0
       1: getfield      #9                  // Field scopeDepth:I
       4: ireturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokevirtual #24                 // Method getRootNode:()Lcom/google/javascript/rhino/Node;
       4: astore_1
       5: aload_1
       6: ifnull        44
       9: new           #27                 // class java/lang/StringBuilder
      12: dup
      13: invokespecial #28                 // Method java/lang/StringBuilder."<init>":()V
      16: ldc           #29                 // String Scope@
      18: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      21: aload_1
      22: invokevirtual #31                 // Method com/google/javascript/rhino/Node.getSourceFileName:()Ljava/lang/String;
      25: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: ldc           #32                 // String :
      30: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: aload_1
      34: invokevirtual #33                 // Method com/google/javascript/rhino/Node.getLineno:()I
      37: invokevirtual #34                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      40: invokevirtual #35                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      43: areturn
      44: new           #27                 // class java/lang/StringBuilder
      47: dup
      48: invokespecial #28                 // Method java/lang/StringBuilder."<init>":()V
      51: ldc           #36                 // String PropertyScope@
      53: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      56: aload_0
      57: invokevirtual #37                 // Method getSymbolForScope:()Lcom/google/javascript/jscomp/SymbolTable$Symbol;
      60: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      63: invokevirtual #35                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      66: areturn

  public java.lang.Object getTypeOfThis();
    Code:
       0: aload_0
       1: invokevirtual #39                 // Method getTypeOfThis:()Lcom/google/javascript/rhino/jstype/JSType;
       4: areturn

  public com.google.javascript.rhino.jstype.StaticSlot getOwnSlot(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #20                 // Method getOwnSlot:(Ljava/lang/String;)Lcom/google/javascript/jscomp/SymbolTable$Symbol;
       5: areturn

  public com.google.javascript.rhino.jstype.StaticSlot getSlot(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #14                 // Method getSlot:(Ljava/lang/String;)Lcom/google/javascript/jscomp/SymbolTable$Symbol;
       5: areturn

  public com.google.javascript.rhino.jstype.StaticScope getParentScope();
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method getParentScope:()Lcom/google/javascript/jscomp/SymbolTable$SymbolScope;
       4: areturn

  static int access$308(com.google.javascript.jscomp.SymbolTable$SymbolScope);
    Code:
       0: aload_0
       1: dup
       2: getfield      #2                  // Field innerAnonFunctionsWithNames:I
       5: dup_x1
       6: iconst_1
       7: iadd
       8: putfield      #2                  // Field innerAnonFunctionsWithNames:I
      11: ireturn

  static java.util.Map access$400(com.google.javascript.jscomp.SymbolTable$SymbolScope);
    Code:
       0: aload_0
       1: getfield      #1                  // Field ownSymbols:Ljava/util/Map;
       4: areturn
}
