Compiled from "PhaseOptimizer.java"
class com.google.javascript.jscomp.PhaseOptimizer implements com.google.javascript.jscomp.CompilerPass {
  private static final java.util.logging.Logger logger;

  private final com.google.javascript.jscomp.AbstractCompiler compiler;

  private final com.google.javascript.jscomp.PerformanceTracker tracker;

  private final java.util.List<com.google.javascript.jscomp.CompilerPass> passes;

  private boolean inLoop;

  private com.google.javascript.jscomp.PassFactory sanityCheck;

  private boolean printAstHashcodes;

  private double progress;

  private double progressStep;

  private final com.google.javascript.jscomp.PhaseOptimizer$ProgressRange progressRange;

  private com.google.javascript.jscomp.PhaseOptimizer$NamedPass currentPass;

  private java.util.Map<com.google.javascript.jscomp.PhaseOptimizer$NamedPass, java.lang.Integer> lastRuns;

  private com.google.javascript.rhino.Node currentScope;

  private int timestamp;

  private int lastChange;

  private static final int START_TIME;

  private final com.google.javascript.rhino.Node jsRoot;

  private boolean crossScopeReporting;

  private com.google.javascript.rhino.Node lastAst;

  private java.util.Map<com.google.javascript.rhino.Node, com.google.javascript.rhino.Node> mtoc;

  static final java.util.List<java.lang.String> OPTIMAL_ORDER;

  static final int MAX_LOOPS;

  static final java.lang.String OPTIMIZE_LOOP_ERROR;

  com.google.javascript.jscomp.PhaseOptimizer(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.PerformanceTracker, com.google.javascript.jscomp.PhaseOptimizer$ProgressRange);
    Code:
       0: aload_0
       1: invokespecial #19                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #20                 // Field printAstHashcodes:Z
       9: aload_0
      10: dconst_0
      11: putfield      #12                 // Field progress:D
      14: aload_0
      15: dconst_0
      16: putfield      #11                 // Field progressStep:D
      19: aload_0
      20: aload_1
      21: putfield      #14                 // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
      24: aload_0
      25: aload_1
      26: invokevirtual #21                 // Method com/google/javascript/jscomp/AbstractCompiler.getJsRoot:()Lcom/google/javascript/rhino/Node;
      29: putfield      #22                 // Field jsRoot:Lcom/google/javascript/rhino/Node;
      32: aload_0
      33: aload_2
      34: putfield      #15                 // Field tracker:Lcom/google/javascript/jscomp/PerformanceTracker;
      37: aload_0
      38: invokestatic  #23                 // Method com/google/common/collect/Lists.newArrayList:()Ljava/util/ArrayList;
      41: putfield      #24                 // Field passes:Ljava/util/List;
      44: aload_0
      45: aload_3
      46: putfield      #13                 // Field progressRange:Lcom/google/javascript/jscomp/PhaseOptimizer$ProgressRange;
      49: aload_0
      50: iconst_0
      51: putfield      #4                  // Field inLoop:Z
      54: aload_0
      55: iconst_0
      56: putfield      #7                  // Field crossScopeReporting:Z
      59: aload_0
      60: aload_0
      61: iconst_0
      62: dup_x1
      63: putfield      #6                  // Field lastChange:I
      66: putfield      #8                  // Field timestamp:I
      69: return

  void consume(java.util.List<com.google.javascript.jscomp.PassFactory>);
    Code:
       0: new           #26                 // class com/google/javascript/jscomp/PhaseOptimizer$Loop
       3: dup
       4: aload_0
       5: invokespecial #27                 // Method com/google/javascript/jscomp/PhaseOptimizer$Loop."<init>":(Lcom/google/javascript/jscomp/PhaseOptimizer;)V
       8: astore_2
       9: iconst_0
      10: istore_3
      11: aload_1
      12: invokeinterface #28,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      17: astore        4
      19: aload         4
      21: invokeinterface #29,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      26: ifeq          95
      29: aload         4
      31: invokeinterface #30,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      36: checkcast     #31                 // class com/google/javascript/jscomp/PassFactory
      39: astore        5
      41: aload         5
      43: invokevirtual #32                 // Method com/google/javascript/jscomp/PassFactory.isOneTimePass:()Z
      46: ifeq          84
      49: iload_3
      50: ifeq          75
      53: aload_0
      54: getfield      #24                 // Field passes:Ljava/util/List;
      57: aload_2
      58: invokeinterface #33,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      63: pop
      64: new           #26                 // class com/google/javascript/jscomp/PhaseOptimizer$Loop
      67: dup
      68: aload_0
      69: invokespecial #27                 // Method com/google/javascript/jscomp/PhaseOptimizer$Loop."<init>":(Lcom/google/javascript/jscomp/PhaseOptimizer;)V
      72: astore_2
      73: iconst_0
      74: istore_3
      75: aload_0
      76: aload         5
      78: invokevirtual #34                 // Method addOneTimePass:(Lcom/google/javascript/jscomp/PassFactory;)V
      81: goto          92
      84: aload_2
      85: aload         5
      87: invokevirtual #35                 // Method com/google/javascript/jscomp/PhaseOptimizer$Loop.addLoopedPass:(Lcom/google/javascript/jscomp/PassFactory;)V
      90: iconst_1
      91: istore_3
      92: goto          19
      95: iload_3
      96: ifeq          110
      99: aload_0
     100: getfield      #24                 // Field passes:Ljava/util/List;
     103: aload_2
     104: invokeinterface #33,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     109: pop
     110: return

  void addOneTimePass(com.google.javascript.jscomp.PassFactory);
    Code:
       0: aload_0
       1: getfield      #24                 // Field passes:Ljava/util/List;
       4: new           #36                 // class com/google/javascript/jscomp/PhaseOptimizer$NamedPass
       7: dup
       8: aload_0
       9: aload_1
      10: invokespecial #37                 // Method com/google/javascript/jscomp/PhaseOptimizer$NamedPass."<init>":(Lcom/google/javascript/jscomp/PhaseOptimizer;Lcom/google/javascript/jscomp/PassFactory;)V
      13: invokeinterface #33,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      18: pop
      19: return

  com.google.javascript.jscomp.PhaseOptimizer$Loop addFixedPointLoop();
    Code:
       0: new           #26                 // class com/google/javascript/jscomp/PhaseOptimizer$Loop
       3: dup
       4: aload_0
       5: invokespecial #27                 // Method com/google/javascript/jscomp/PhaseOptimizer$Loop."<init>":(Lcom/google/javascript/jscomp/PhaseOptimizer;)V
       8: astore_1
       9: aload_0
      10: getfield      #24                 // Field passes:Ljava/util/List;
      13: aload_1
      14: invokeinterface #33,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      19: pop
      20: aload_1
      21: areturn

  void setSanityCheck(com.google.javascript.jscomp.PassFactory);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #17                 // Field sanityCheck:Lcom/google/javascript/jscomp/PassFactory;
       5: aload_0
       6: invokespecial #16                 // Method setSanityCheckState:()V
       9: return

  private void setSanityCheckState();
    Code:
       0: aload_0
       1: getfield      #4                  // Field inLoop:Z
       4: ifeq          33
       7: aload_0
       8: aload_0
       9: getfield      #22                 // Field jsRoot:Lcom/google/javascript/rhino/Node;
      12: invokevirtual #38                 // Method com/google/javascript/rhino/Node.cloneTree:()Lcom/google/javascript/rhino/Node;
      15: putfield      #39                 // Field lastAst:Lcom/google/javascript/rhino/Node;
      18: aload_0
      19: aload_0
      20: getfield      #22                 // Field jsRoot:Lcom/google/javascript/rhino/Node;
      23: aload_0
      24: getfield      #39                 // Field lastAst:Lcom/google/javascript/rhino/Node;
      27: invokestatic  #40                 // Method com/google/javascript/jscomp/NodeUtil.mapMainToClone:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)Ljava/util/Map;
      30: putfield      #41                 // Field mtoc:Ljava/util/Map;
      33: return

  void setPrintAstHashcodes(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #20                 // Field printAstHashcodes:Z
       5: return

  public void process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: dconst_0
       2: putfield      #12                 // Field progress:D
       5: aload_0
       6: dconst_0
       7: putfield      #11                 // Field progressStep:D
      10: aload_0
      11: getfield      #13                 // Field progressRange:Lcom/google/javascript/jscomp/PhaseOptimizer$ProgressRange;
      14: ifnull        58
      17: aload_0
      18: aload_0
      19: getfield      #13                 // Field progressRange:Lcom/google/javascript/jscomp/PhaseOptimizer$ProgressRange;
      22: getfield      #42                 // Field com/google/javascript/jscomp/PhaseOptimizer$ProgressRange.maxValue:D
      25: aload_0
      26: getfield      #13                 // Field progressRange:Lcom/google/javascript/jscomp/PhaseOptimizer$ProgressRange;
      29: getfield      #43                 // Field com/google/javascript/jscomp/PhaseOptimizer$ProgressRange.initialValue:D
      32: dsub
      33: aload_0
      34: getfield      #24                 // Field passes:Ljava/util/List;
      37: invokeinterface #44,  1           // InterfaceMethod java/util/List.size:()I
      42: i2d
      43: ddiv
      44: putfield      #11                 // Field progressStep:D
      47: aload_0
      48: aload_0
      49: getfield      #13                 // Field progressRange:Lcom/google/javascript/jscomp/PhaseOptimizer$ProgressRange;
      52: getfield      #43                 // Field com/google/javascript/jscomp/PhaseOptimizer$ProgressRange.initialValue:D
      55: putfield      #12                 // Field progress:D
      58: aload_0
      59: getfield      #24                 // Field passes:Ljava/util/List;
      62: invokeinterface #28,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      67: astore_3
      68: aload_3
      69: invokeinterface #29,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      74: ifeq          108
      77: aload_3
      78: invokeinterface #30,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      83: checkcast     #45                 // class com/google/javascript/jscomp/CompilerPass
      86: astore        4
      88: aload         4
      90: aload_1
      91: aload_2
      92: invokeinterface #46,  3           // InterfaceMethod com/google/javascript/jscomp/CompilerPass.process:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V
      97: aload_0
      98: invokespecial #1                  // Method hasHaltingErrors:()Z
     101: ifeq          105
     104: return
     105: goto          68
     108: return

  private void maybePrintAstHashcodes(java.lang.String, com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: getfield      #20                 // Field printAstHashcodes:Z
       4: ifeq          61
       7: new           #47                 // class java/lang/StringBuilder
      10: dup
      11: invokespecial #48                 // Method java/lang/StringBuilder."<init>":()V
      14: ldc           #49                 // String AST hashCode after
      16: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      19: aload_1
      20: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      23: ldc           #51                 // String :
      25: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: aload_0
      29: getfield      #14                 // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
      32: aload_2
      33: invokevirtual #52                 // Method com/google/javascript/jscomp/AbstractCompiler.toSource:(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;
      36: invokevirtual #53                 // Method java/lang/String.hashCode:()I
      39: invokevirtual #54                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      42: invokevirtual #55                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      45: astore_3
      46: getstatic     #56                 // Field java/lang/System.err:Ljava/io/PrintStream;
      49: aload_3
      50: invokevirtual #57                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
      53: aload_0
      54: getfield      #14                 // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
      57: aload_3
      58: invokevirtual #58                 // Method com/google/javascript/jscomp/AbstractCompiler.addToDebugLog:(Ljava/lang/String;)V
      61: return

  private void maybeSanityCheck(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: getfield      #17                 // Field sanityCheck:Lcom/google/javascript/jscomp/PassFactory;
       4: ifnull        78
       7: aload_0
       8: getfield      #17                 // Field sanityCheck:Lcom/google/javascript/jscomp/PassFactory;
      11: aload_0
      12: getfield      #14                 // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
      15: invokevirtual #59                 // Method com/google/javascript/jscomp/PassFactory.create:(Lcom/google/javascript/jscomp/AbstractCompiler;)Lcom/google/javascript/jscomp/CompilerPass;
      18: aload_1
      19: aload_2
      20: invokeinterface #46,  3           // InterfaceMethod com/google/javascript/jscomp/CompilerPass.process:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V
      25: aload_0
      26: getfield      #4                  // Field inLoop:Z
      29: ifeq          78
      32: aload_0
      33: getfield      #2                  // Field currentPass:Lcom/google/javascript/jscomp/PhaseOptimizer$NamedPass;
      36: getfield      #60                 // Field com/google/javascript/jscomp/PhaseOptimizer$NamedPass.name:Ljava/lang/String;
      39: ldc           #62                 // String crossModuleCodeMotion
      41: invokevirtual #63                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      44: ifne          78
      47: aload_0
      48: getfield      #2                  // Field currentPass:Lcom/google/javascript/jscomp/PhaseOptimizer$NamedPass;
      51: getfield      #60                 // Field com/google/javascript/jscomp/PhaseOptimizer$NamedPass.name:Ljava/lang/String;
      54: ldc           #64                 // String crossModuleMethodMotion
      56: invokevirtual #63                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      59: ifne          78
      62: aload_0
      63: getfield      #41                 // Field mtoc:Ljava/util/Map;
      66: aload_0
      67: getfield      #22                 // Field jsRoot:Lcom/google/javascript/rhino/Node;
      70: iconst_1
      71: aload_0
      72: getfield      #14                 // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
      75: invokestatic  #65                 // Method com/google/javascript/jscomp/NodeUtil.verifyScopeChanges:(Ljava/util/Map;Lcom/google/javascript/rhino/Node;ZLcom/google/javascript/jscomp/AbstractCompiler;)V
      78: return

  private boolean hasHaltingErrors();
    Code:
       0: aload_0
       1: getfield      #14                 // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
       4: invokevirtual #66                 // Method com/google/javascript/jscomp/AbstractCompiler.hasHaltingErrors:()Z
       7: ireturn

  void setScope(com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: getfield      #4                  // Field inLoop:Z
       4: ifeq          27
       7: aload_0
       8: aload_1
       9: invokevirtual #67                 // Method com/google/javascript/rhino/Node.isFunction:()Z
      12: ifeq          19
      15: aload_1
      16: goto          24
      19: aload_0
      20: aload_1
      21: invokespecial #68                 // Method getEnclosingScope:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
      24: putfield      #5                  // Field currentScope:Lcom/google/javascript/rhino/Node;
      27: return

  boolean hasScopeChanged(com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: getfield      #4                  // Field inLoop:Z
       4: ifne          9
       7: iconst_1
       8: ireturn
       9: aload_0
      10: getfield      #3                  // Field lastRuns:Ljava/util/Map;
      13: aload_0
      14: getfield      #2                  // Field currentPass:Lcom/google/javascript/jscomp/PhaseOptimizer$NamedPass;
      17: invokeinterface #69,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      22: checkcast     #70                 // class java/lang/Integer
      25: invokevirtual #71                 // Method java/lang/Integer.intValue:()I
      28: istore_2
      29: iload_2
      30: ifeq          41
      33: aload_1
      34: invokevirtual #72                 // Method com/google/javascript/rhino/Node.getChangeTime:()I
      37: iload_2
      38: if_icmple     45
      41: iconst_1
      42: goto          46
      45: iconst_0
      46: ireturn

  private com.google.javascript.rhino.Node getEnclosingScope(com.google.javascript.rhino.Node);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #22                 // Field jsRoot:Lcom/google/javascript/rhino/Node;
       5: if_acmpeq     29
       8: aload_1
       9: invokevirtual #73                 // Method com/google/javascript/rhino/Node.getParent:()Lcom/google/javascript/rhino/Node;
      12: ifnull        29
      15: aload_1
      16: invokevirtual #73                 // Method com/google/javascript/rhino/Node.getParent:()Lcom/google/javascript/rhino/Node;
      19: astore_1
      20: aload_1
      21: invokevirtual #67                 // Method com/google/javascript/rhino/Node.isFunction:()Z
      24: ifeq          0
      27: aload_1
      28: areturn
      29: aload_1
      30: areturn

  void reportChangeToEnclosingScope(com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #8                  // Field timestamp:I
       5: putfield      #6                  // Field lastChange:I
       8: aload_0
       9: aload_1
      10: invokespecial #68                 // Method getEnclosingScope:(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;
      13: aload_0
      14: getfield      #8                  // Field timestamp:I
      17: invokevirtual #74                 // Method com/google/javascript/rhino/Node.setChangeTime:(I)V
      20: aload_0
      21: dup
      22: getfield      #8                  // Field timestamp:I
      25: iconst_1
      26: iadd
      27: putfield      #8                  // Field timestamp:I
      30: return

  void startCrossScopeReporting();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #7                  // Field crossScopeReporting:Z
       5: return

  void endCrossScopeReporting();
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #7                  // Field crossScopeReporting:Z
       5: return

  static java.util.logging.Logger access$000();
    Code:
       0: getstatic     #18                 // Field logger:Ljava/util/logging/Logger;
       3: areturn

  static com.google.javascript.jscomp.PassFactory access$100(com.google.javascript.jscomp.PhaseOptimizer);
    Code:
       0: aload_0
       1: getfield      #17                 // Field sanityCheck:Lcom/google/javascript/jscomp/PassFactory;
       4: areturn

  static void access$200(com.google.javascript.jscomp.PhaseOptimizer);
    Code:
       0: aload_0
       1: invokespecial #16                 // Method setSanityCheckState:()V
       4: return

  static com.google.javascript.jscomp.PerformanceTracker access$300(com.google.javascript.jscomp.PhaseOptimizer);
    Code:
       0: aload_0
       1: getfield      #15                 // Field tracker:Lcom/google/javascript/jscomp/PerformanceTracker;
       4: areturn

  static com.google.javascript.jscomp.AbstractCompiler access$400(com.google.javascript.jscomp.PhaseOptimizer);
    Code:
       0: aload_0
       1: getfield      #14                 // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
       4: areturn

  static com.google.javascript.jscomp.PhaseOptimizer$ProgressRange access$500(com.google.javascript.jscomp.PhaseOptimizer);
    Code:
       0: aload_0
       1: getfield      #13                 // Field progressRange:Lcom/google/javascript/jscomp/PhaseOptimizer$ProgressRange;
       4: areturn

  static double access$600(com.google.javascript.jscomp.PhaseOptimizer);
    Code:
       0: aload_0
       1: getfield      #12                 // Field progress:D
       4: dreturn

  static double access$602(com.google.javascript.jscomp.PhaseOptimizer, double);
    Code:
       0: aload_0
       1: dload_1
       2: dup2_x1
       3: putfield      #12                 // Field progress:D
       6: dreturn

  static double access$700(com.google.javascript.jscomp.PhaseOptimizer);
    Code:
       0: aload_0
       1: getfield      #11                 // Field progressStep:D
       4: dreturn

  static void access$800(com.google.javascript.jscomp.PhaseOptimizer, java.lang.String, com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #10                 // Method maybePrintAstHashcodes:(Ljava/lang/String;Lcom/google/javascript/rhino/Node;)V
       6: return

  static void access$900(com.google.javascript.jscomp.PhaseOptimizer, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #9                  // Method maybeSanityCheck:(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V
       6: return

  static int access$1000(com.google.javascript.jscomp.PhaseOptimizer);
    Code:
       0: aload_0
       1: getfield      #8                  // Field timestamp:I
       4: ireturn

  static boolean access$1100(com.google.javascript.jscomp.PhaseOptimizer);
    Code:
       0: aload_0
       1: getfield      #7                  // Field crossScopeReporting:Z
       4: ireturn

  static int access$1202(com.google.javascript.jscomp.PhaseOptimizer, int);
    Code:
       0: aload_0
       1: iload_1
       2: dup_x1
       3: putfield      #6                  // Field lastChange:I
       6: ireturn

  static com.google.javascript.rhino.Node access$1300(com.google.javascript.jscomp.PhaseOptimizer);
    Code:
       0: aload_0
       1: getfield      #5                  // Field currentScope:Lcom/google/javascript/rhino/Node;
       4: areturn

  static int access$1008(com.google.javascript.jscomp.PhaseOptimizer);
    Code:
       0: aload_0
       1: dup
       2: getfield      #8                  // Field timestamp:I
       5: dup_x1
       6: iconst_1
       7: iadd
       8: putfield      #8                  // Field timestamp:I
      11: ireturn

  static int access$1200(com.google.javascript.jscomp.PhaseOptimizer);
    Code:
       0: aload_0
       1: getfield      #6                  // Field lastChange:I
       4: ireturn

  static boolean access$1400(com.google.javascript.jscomp.PhaseOptimizer);
    Code:
       0: aload_0
       1: getfield      #4                  // Field inLoop:Z
       4: ireturn

  static boolean access$1402(com.google.javascript.jscomp.PhaseOptimizer, boolean);
    Code:
       0: aload_0
       1: iload_1
       2: dup_x1
       3: putfield      #4                  // Field inLoop:Z
       6: ireturn

  static java.util.Map access$1502(com.google.javascript.jscomp.PhaseOptimizer, java.util.Map);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #3                  // Field lastRuns:Ljava/util/Map;
       6: areturn

  static java.util.Map access$1500(com.google.javascript.jscomp.PhaseOptimizer);
    Code:
       0: aload_0
       1: getfield      #3                  // Field lastRuns:Ljava/util/Map;
       4: areturn

  static com.google.javascript.jscomp.PhaseOptimizer$NamedPass access$1602(com.google.javascript.jscomp.PhaseOptimizer, com.google.javascript.jscomp.PhaseOptimizer$NamedPass);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #2                  // Field currentPass:Lcom/google/javascript/jscomp/PhaseOptimizer$NamedPass;
       6: areturn

  static boolean access$1700(com.google.javascript.jscomp.PhaseOptimizer);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method hasHaltingErrors:()Z
       4: ireturn

  static {};
    Code:
       0: ldc           #25                 // class com/google/javascript/jscomp/PhaseOptimizer
       2: invokevirtual #75                 // Method java/lang/Class.getName:()Ljava/lang/String;
       5: invokestatic  #76                 // Method java/util/logging/Logger.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;
       8: putstatic     #18                 // Field logger:Ljava/util/logging/Logger;
      11: ldc           #77                 // String deadAssignmentsElimination
      13: ldc           #78                 // String inlineFunctions
      15: ldc           #79                 // String removeUnusedPrototypeProperties
      17: ldc           #80                 // String removeUnreachableCode
      19: ldc           #81                 // String removeUnusedVars
      21: ldc           #82                 // String minimizeExitPoints
      23: ldc           #83                 // String inlineVariables
      25: ldc           #84                 // String collapseObjectLiterals
      27: ldc           #85                 // String peepholeOptimizations
      29: invokestatic  #86                 // Method com/google/common/collect/ImmutableList.of:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableList;
      32: putstatic     #87                 // Field OPTIMAL_ORDER:Ljava/util/List;
      35: return
}
