Compiled from "MakeDeclaredNamesUnique.java"
class com.google.javascript.jscomp.MakeDeclaredNamesUnique$ContextualRenameInverter implements com.google.javascript.jscomp.NodeTraversal$ScopedCallback,com.google.javascript.jscomp.CompilerPass {
  private final com.google.javascript.jscomp.AbstractCompiler compiler;

  private java.util.Set<java.lang.String> referencedNames;

  private java.util.Deque<java.util.Set<java.lang.String>> referenceStack;

  private java.util.Map<java.lang.String, java.util.List<com.google.javascript.rhino.Node>> nameMap;

  private com.google.javascript.jscomp.MakeDeclaredNamesUnique$ContextualRenameInverter(com.google.javascript.jscomp.AbstractCompiler);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #4                  // Method com/google/common/collect/ImmutableSet.of:()Lcom/google/common/collect/ImmutableSet;
       8: putfield      #5                  // Field referencedNames:Ljava/util/Set;
      11: aload_0
      12: new           #6                  // class java/util/ArrayDeque
      15: dup
      16: invokespecial #7                  // Method java/util/ArrayDeque."<init>":()V
      19: putfield      #8                  // Field referenceStack:Ljava/util/Deque;
      22: aload_0
      23: invokestatic  #9                  // Method com/google/common/collect/Maps.newHashMap:()Ljava/util/HashMap;
      26: putfield      #10                 // Field nameMap:Ljava/util/Map;
      29: aload_0
      30: aload_1
      31: putfield      #11                 // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
      34: return

  public void process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: getfield      #11                 // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
       4: aload_2
       5: aload_0
       6: invokestatic  #12                 // Method com/google/javascript/jscomp/NodeTraversal.traverse:(Lcom/google/javascript/jscomp/AbstractCompiler;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/jscomp/NodeTraversal$Callback;)V
       9: return

  public static java.lang.String getOriginalName(java.lang.String);
    Code:
       0: aload_0
       1: invokestatic  #13                 // Method indexOfSeparator:(Ljava/lang/String;)I
       4: istore_1
       5: iload_1
       6: iconst_m1
       7: if_icmpne     14
      10: aload_0
      11: goto          20
      14: aload_0
      15: iconst_0
      16: iload_1
      17: invokevirtual #14                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      20: areturn

  private static int indexOfSeparator(java.lang.String);
    Code:
       0: aload_0
       1: ldc           #16                 // String $$
       3: invokevirtual #17                 // Method java/lang/String.lastIndexOf:(Ljava/lang/String;)I
       6: ireturn

  private static boolean containsSeparator(java.lang.String);
    Code:
       0: aload_0
       1: ldc           #16                 // String $$
       3: invokevirtual #18                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
       6: ireturn

  public void enterScope(com.google.javascript.jscomp.NodeTraversal);
    Code:
       0: aload_1
       1: invokevirtual #19                 // Method com/google/javascript/jscomp/NodeTraversal.inGlobalScope:()Z
       4: ifeq          8
       7: return
       8: aload_0
       9: getfield      #8                  // Field referenceStack:Ljava/util/Deque;
      12: aload_0
      13: getfield      #5                  // Field referencedNames:Ljava/util/Set;
      16: invokeinterface #20,  2           // InterfaceMethod java/util/Deque.push:(Ljava/lang/Object;)V
      21: aload_0
      22: invokestatic  #21                 // Method com/google/common/collect/Sets.newHashSet:()Ljava/util/HashSet;
      25: putfield      #5                  // Field referencedNames:Ljava/util/Set;
      28: return

  public void exitScope(com.google.javascript.jscomp.NodeTraversal);
    Code:
       0: aload_1
       1: invokevirtual #19                 // Method com/google/javascript/jscomp/NodeTraversal.inGlobalScope:()Z
       4: ifeq          8
       7: return
       8: aload_1
       9: invokevirtual #22                 // Method com/google/javascript/jscomp/NodeTraversal.getScope:()Lcom/google/javascript/jscomp/Scope;
      12: invokevirtual #23                 // Method com/google/javascript/jscomp/Scope.getVars:()Ljava/util/Iterator;
      15: astore_2
      16: aload_2
      17: invokeinterface #24,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      22: ifeq          43
      25: aload_2
      26: invokeinterface #25,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      31: checkcast     #26                 // class com/google/javascript/jscomp/Scope$Var
      34: astore_3
      35: aload_0
      36: aload_3
      37: invokevirtual #27                 // Method handleScopeVar:(Lcom/google/javascript/jscomp/Scope$Var;)V
      40: goto          16
      43: aload_0
      44: getfield      #5                  // Field referencedNames:Ljava/util/Set;
      47: astore_2
      48: aload_0
      49: aload_0
      50: getfield      #8                  // Field referenceStack:Ljava/util/Deque;
      53: invokeinterface #28,  1           // InterfaceMethod java/util/Deque.pop:()Ljava/lang/Object;
      58: checkcast     #29                 // class java/util/Set
      61: putfield      #5                  // Field referencedNames:Ljava/util/Set;
      64: aload_0
      65: getfield      #8                  // Field referenceStack:Ljava/util/Deque;
      68: invokeinterface #30,  1           // InterfaceMethod java/util/Deque.isEmpty:()Z
      73: ifne          87
      76: aload_0
      77: getfield      #5                  // Field referencedNames:Ljava/util/Set;
      80: aload_2
      81: invokeinterface #31,  2           // InterfaceMethod java/util/Set.addAll:(Ljava/util/Collection;)Z
      86: pop
      87: return

  void handleScopeVar(com.google.javascript.jscomp.Scope$Var);
    Code:
       0: aload_1
       1: invokevirtual #32                 // Method com/google/javascript/jscomp/Scope$Var.getName:()Ljava/lang/String;
       4: astore_2
       5: aload_2
       6: invokestatic  #33                 // Method containsSeparator:(Ljava/lang/String;)Z
       9: ifeq          144
      12: aload_2
      13: invokestatic  #34                 // Method getOriginalName:(Ljava/lang/String;)Ljava/lang/String;
      16: invokevirtual #35                 // Method java/lang/String.isEmpty:()Z
      19: ifne          144
      22: aload_0
      23: aload_2
      24: invokespecial #36                 // Method findReplacementName:(Ljava/lang/String;)Ljava/lang/String;
      27: astore_3
      28: aload_0
      29: getfield      #5                  // Field referencedNames:Ljava/util/Set;
      32: aload_2
      33: invokeinterface #37,  2           // InterfaceMethod java/util/Set.remove:(Ljava/lang/Object;)Z
      38: pop
      39: aload_0
      40: getfield      #5                  // Field referencedNames:Ljava/util/Set;
      43: aload_3
      44: invokeinterface #38,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      49: pop
      50: aload_0
      51: getfield      #10                 // Field nameMap:Ljava/util/Map;
      54: aload_2
      55: invokeinterface #39,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      60: checkcast     #40                 // class java/util/List
      63: astore        4
      65: aload         4
      67: ifnull        74
      70: iconst_1
      71: goto          75
      74: iconst_0
      75: invokestatic  #41                 // Method com/google/common/base/Preconditions.checkState:(Z)V
      78: aload         4
      80: invokeinterface #42,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      85: astore        5
      87: aload         5
      89: invokeinterface #24,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      94: ifeq          126
      97: aload         5
      99: invokeinterface #25,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     104: checkcast     #43                 // class com/google/javascript/rhino/Node
     107: astore        6
     109: aload         6
     111: invokevirtual #44                 // Method com/google/javascript/rhino/Node.isName:()Z
     114: invokestatic  #41                 // Method com/google/common/base/Preconditions.checkState:(Z)V
     117: aload         6
     119: aload_3
     120: invokevirtual #45                 // Method com/google/javascript/rhino/Node.setString:(Ljava/lang/String;)V
     123: goto          87
     126: aload_0
     127: getfield      #11                 // Field compiler:Lcom/google/javascript/jscomp/AbstractCompiler;
     130: invokevirtual #46                 // Method com/google/javascript/jscomp/AbstractCompiler.reportCodeChange:()V
     133: aload_0
     134: getfield      #10                 // Field nameMap:Ljava/util/Map;
     137: aload_2
     138: invokeinterface #47,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
     143: pop
     144: return

  private java.lang.String findReplacementName(java.lang.String);
    Code:
       0: aload_1
       1: invokestatic  #34                 // Method getOriginalName:(Ljava/lang/String;)Ljava/lang/String;
       4: astore_2
       5: aload_2
       6: astore_3
       7: iconst_0
       8: istore        4
      10: aload_0
      11: aload_3
      12: invokespecial #48                 // Method isValidName:(Ljava/lang/String;)Z
      15: ifne          49
      18: new           #49                 // class java/lang/StringBuilder
      21: dup
      22: invokespecial #50                 // Method java/lang/StringBuilder."<init>":()V
      25: aload_2
      26: invokevirtual #51                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: ldc           #16                 // String $$
      31: invokevirtual #51                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      34: iload         4
      36: iinc          4, 1
      39: invokevirtual #52                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      42: invokevirtual #53                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      45: astore_3
      46: goto          10
      49: aload_3
      50: areturn

  private boolean isValidName(java.lang.String);
    Code:
       0: aload_1
       1: invokestatic  #54                 // Method com/google/javascript/rhino/TokenStream.isJSIdentifier:(Ljava/lang/String;)Z
       4: ifeq          33
       7: aload_0
       8: getfield      #5                  // Field referencedNames:Ljava/util/Set;
      11: aload_1
      12: invokeinterface #55,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      17: ifne          33
      20: aload_1
      21: ldc           #56                 // String arguments
      23: invokevirtual #57                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      26: ifne          33
      29: iconst_1
      30: goto          34
      33: iconst_0
      34: ireturn

  public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node);
    Code:
       0: iconst_1
       1: ireturn

  public void visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node);
    Code:
       0: aload_1
       1: invokevirtual #19                 // Method com/google/javascript/jscomp/NodeTraversal.inGlobalScope:()Z
       4: ifeq          8
       7: return
       8: aload_2
       9: invokestatic  #58                 // Method com/google/javascript/jscomp/NodeUtil.isReferenceName:(Lcom/google/javascript/rhino/Node;)Z
      12: ifeq          48
      15: aload_2
      16: invokevirtual #59                 // Method com/google/javascript/rhino/Node.getString:()Ljava/lang/String;
      19: astore        4
      21: aload_0
      22: getfield      #5                  // Field referencedNames:Ljava/util/Set;
      25: aload         4
      27: invokeinterface #38,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      32: pop
      33: aload         4
      35: invokestatic  #33                 // Method containsSeparator:(Ljava/lang/String;)Z
      38: ifeq          48
      41: aload_0
      42: aload         4
      44: aload_2
      45: invokespecial #60                 // Method addCandidateNameReference:(Ljava/lang/String;Lcom/google/javascript/rhino/Node;)V
      48: return

  private void addCandidateNameReference(java.lang.String, com.google.javascript.rhino.Node);
    Code:
       0: aload_0
       1: getfield      #10                 // Field nameMap:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #39,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #40                 // class java/util/List
      13: astore_3
      14: aconst_null
      15: aload_3
      16: if_acmpne     35
      19: invokestatic  #61                 // Method com/google/common/collect/Lists.newLinkedList:()Ljava/util/LinkedList;
      22: astore_3
      23: aload_0
      24: getfield      #10                 // Field nameMap:Ljava/util/Map;
      27: aload_1
      28: aload_3
      29: invokeinterface #62,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      34: pop
      35: aload_3
      36: aload_2
      37: invokeinterface #63,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      42: pop
      43: return

  com.google.javascript.jscomp.MakeDeclaredNamesUnique$ContextualRenameInverter(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.MakeDeclaredNamesUnique$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #2                  // Method "<init>":(Lcom/google/javascript/jscomp/AbstractCompiler;)V
       5: return
}
