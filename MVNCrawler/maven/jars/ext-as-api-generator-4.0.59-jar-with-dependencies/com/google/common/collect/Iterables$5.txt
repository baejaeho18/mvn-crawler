Compiled from "Iterables.java"
final class com.google.common.collect.Iterables$5 extends com.google.common.collect.FluentIterable<T> {
  final java.lang.Iterable val$unfiltered;

  final java.lang.Class val$desiredType;

  com.google.common.collect.Iterables$5(java.lang.Iterable, java.lang.Class);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field val$unfiltered:Ljava/lang/Iterable;
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field val$desiredType:Ljava/lang/Class;
      10: aload_0
      11: invokespecial #3                  // Method com/google/common/collect/FluentIterable."<init>":()V
      14: return

  public java.util.Iterator<T> iterator();
    Code:
       0: aload_0
       1: getfield      #1                  // Field val$unfiltered:Ljava/lang/Iterable;
       4: invokeinterface #4,  1            // InterfaceMethod java/lang/Iterable.iterator:()Ljava/util/Iterator;
       9: aload_0
      10: getfield      #2                  // Field val$desiredType:Ljava/lang/Class;
      13: invokestatic  #5                  // Method com/google/common/collect/Iterators.filter:(Ljava/util/Iterator;Ljava/lang/Class;)Lcom/google/common/collect/UnmodifiableIterator;
      16: areturn

  public void forEach(java.util.function.Consumer<? super T>);
    Code:
       0: aload_1
       1: invokestatic  #6                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_0
       6: getfield      #1                  // Field val$unfiltered:Ljava/lang/Iterable;
       9: aload_0
      10: getfield      #2                  // Field val$desiredType:Ljava/lang/Class;
      13: aload_1
      14: invokedynamic #7,  0              // InvokeDynamic #0:accept:(Ljava/lang/Class;Ljava/util/function/Consumer;)Ljava/util/function/Consumer;
      19: invokeinterface #8,  2            // InterfaceMethod java/lang/Iterable.forEach:(Ljava/util/function/Consumer;)V
      24: return

  public java.util.Spliterator<T> spliterator();
    Code:
       0: aload_0
       1: getfield      #1                  // Field val$unfiltered:Ljava/lang/Iterable;
       4: invokeinterface #9,  1            // InterfaceMethod java/lang/Iterable.spliterator:()Ljava/util/Spliterator;
       9: aload_0
      10: getfield      #2                  // Field val$desiredType:Ljava/lang/Class;
      13: dup
      14: invokevirtual #10                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      17: pop
      18: invokedynamic #11,  0             // InvokeDynamic #1:test:(Ljava/lang/Class;)Ljava/util/function/Predicate;
      23: invokestatic  #12                 // Method com/google/common/collect/CollectSpliterators.filter:(Ljava/util/Spliterator;Ljava/util/function/Predicate;)Ljava/util/Spliterator;
      26: areturn

  private static void lambda$forEach$0(java.lang.Class, java.util.function.Consumer, java.lang.Object);
    Code:
       0: aload_0
       1: aload_2
       2: invokevirtual #13                 // Method java/lang/Class.isInstance:(Ljava/lang/Object;)Z
       5: ifeq          19
       8: aload_1
       9: aload_0
      10: aload_2
      11: invokevirtual #14                 // Method java/lang/Class.cast:(Ljava/lang/Object;)Ljava/lang/Object;
      14: invokeinterface #15,  2           // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
      19: return
}
