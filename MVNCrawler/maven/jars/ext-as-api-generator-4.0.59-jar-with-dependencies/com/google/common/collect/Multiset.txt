Compiled from "Multiset.java"
public interface com.google.common.collect.Multiset<E> extends java.util.Collection<E> {
  public abstract int size();

  public abstract int count(java.lang.Object);

  public abstract int add(E, int);

  public abstract int remove(java.lang.Object, int);

  public abstract int setCount(E, int);

  public abstract boolean setCount(E, int, int);

  public abstract java.util.Set<E> elementSet();

  public abstract java.util.Set<com.google.common.collect.Multiset$Entry<E>> entrySet();

  public default void forEachEntry(java.util.function.ObjIntConsumer<? super E>);
    Code:
       0: aload_1
       1: invokestatic  #1                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_0
       6: invokeinterface #2,  1            // InterfaceMethod entrySet:()Ljava/util/Set;
      11: aload_1
      12: invokedynamic #3,  0              // InvokeDynamic #0:accept:(Ljava/util/function/ObjIntConsumer;)Ljava/util/function/Consumer;
      17: invokeinterface #4,  2            // InterfaceMethod java/util/Set.forEach:(Ljava/util/function/Consumer;)V
      22: return

  public abstract boolean equals(java.lang.Object);

  public abstract int hashCode();

  public abstract java.lang.String toString();

  public abstract java.util.Iterator<E> iterator();

  public abstract boolean contains(java.lang.Object);

  public abstract boolean containsAll(java.util.Collection<?>);

  public abstract boolean add(E);

  public abstract boolean remove(java.lang.Object);

  public abstract boolean removeAll(java.util.Collection<?>);

  public abstract boolean retainAll(java.util.Collection<?>);

  public default void forEach(java.util.function.Consumer<? super E>);
    Code:
       0: aload_1
       1: invokestatic  #1                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_0
       6: invokeinterface #2,  1            // InterfaceMethod entrySet:()Ljava/util/Set;
      11: aload_1
      12: invokedynamic #5,  0              // InvokeDynamic #1:accept:(Ljava/util/function/Consumer;)Ljava/util/function/Consumer;
      17: invokeinterface #4,  2            // InterfaceMethod java/util/Set.forEach:(Ljava/util/function/Consumer;)V
      22: return

  public default java.util.Spliterator<E> spliterator();
    Code:
       0: aload_0
       1: invokestatic  #6                  // Method com/google/common/collect/Multisets.spliteratorImpl:(Lcom/google/common/collect/Multiset;)Ljava/util/Spliterator;
       4: areturn

  private static void lambda$forEach$1(java.util.function.Consumer, com.google.common.collect.Multiset$Entry);
    Code:
       0: aload_1
       1: invokeinterface #7,  1            // InterfaceMethod com/google/common/collect/Multiset$Entry.getElement:()Ljava/lang/Object;
       6: astore_2
       7: aload_1
       8: invokeinterface #8,  1            // InterfaceMethod com/google/common/collect/Multiset$Entry.getCount:()I
      13: istore_3
      14: iconst_0
      15: istore        4
      17: iload         4
      19: iload_3
      20: if_icmpge     36
      23: aload_0
      24: aload_2
      25: invokeinterface #9,  2            // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
      30: iinc          4, 1
      33: goto          17
      36: return

  private static void lambda$forEachEntry$0(java.util.function.ObjIntConsumer, com.google.common.collect.Multiset$Entry);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #7,  1            // InterfaceMethod com/google/common/collect/Multiset$Entry.getElement:()Ljava/lang/Object;
       7: aload_1
       8: invokeinterface #8,  1            // InterfaceMethod com/google/common/collect/Multiset$Entry.getCount:()I
      13: invokeinterface #10,  3           // InterfaceMethod java/util/function/ObjIntConsumer.accept:(Ljava/lang/Object;I)V
      18: return
}
