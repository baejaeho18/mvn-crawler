Compiled from "Throwables.java"
public final class com.google.common.base.Throwables {
  private static final java.lang.String JAVA_LANG_ACCESS_CLASSNAME;

  static final java.lang.String SHARED_SECRETS_CLASSNAME;

  private static final java.lang.Object jla;

  private static final java.lang.reflect.Method getStackTraceElementMethod;

  private static final java.lang.reflect.Method getStackTraceDepthMethod;

  private com.google.common.base.Throwables();
    Code:
       0: aload_0
       1: invokespecial #5                  // Method java/lang/Object."<init>":()V
       4: return

  public static <X extends java.lang.Throwable> void throwIfInstanceOf(java.lang.Throwable, java.lang.Class<X>) throws X;
    Code:
       0: aload_0
       1: invokestatic  #6                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_1
       6: aload_0
       7: invokevirtual #7                  // Method java/lang/Class.isInstance:(Ljava/lang/Object;)Z
      10: ifeq          22
      13: aload_1
      14: aload_0
      15: invokevirtual #8                  // Method java/lang/Class.cast:(Ljava/lang/Object;)Ljava/lang/Object;
      18: checkcast     #9                  // class java/lang/Throwable
      21: athrow
      22: return

  public static <X extends java.lang.Throwable> void propagateIfInstanceOf(java.lang.Throwable, java.lang.Class<X>) throws X;
    Code:
       0: aload_0
       1: ifnull        9
       4: aload_0
       5: aload_1
       6: invokestatic  #10                 // Method throwIfInstanceOf:(Ljava/lang/Throwable;Ljava/lang/Class;)V
       9: return

  public static void throwIfUnchecked(java.lang.Throwable);
    Code:
       0: aload_0
       1: invokestatic  #6                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_0
       6: instanceof    #11                 // class java/lang/RuntimeException
       9: ifeq          17
      12: aload_0
      13: checkcast     #11                 // class java/lang/RuntimeException
      16: athrow
      17: aload_0
      18: instanceof    #12                 // class java/lang/Error
      21: ifeq          29
      24: aload_0
      25: checkcast     #12                 // class java/lang/Error
      28: athrow
      29: return

  public static void propagateIfPossible(java.lang.Throwable);
    Code:
       0: aload_0
       1: ifnull        8
       4: aload_0
       5: invokestatic  #13                 // Method throwIfUnchecked:(Ljava/lang/Throwable;)V
       8: return

  public static <X extends java.lang.Throwable> void propagateIfPossible(java.lang.Throwable, java.lang.Class<X>) throws X;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #14                 // Method propagateIfInstanceOf:(Ljava/lang/Throwable;Ljava/lang/Class;)V
       5: aload_0
       6: invokestatic  #15                 // Method propagateIfPossible:(Ljava/lang/Throwable;)V
       9: return

  public static <X1 extends java.lang.Throwable, X2 extends java.lang.Throwable> void propagateIfPossible(java.lang.Throwable, java.lang.Class<X1>, java.lang.Class<X2>) throws X1, X2;
    Code:
       0: aload_2
       1: invokestatic  #6                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_0
       6: aload_1
       7: invokestatic  #14                 // Method propagateIfInstanceOf:(Ljava/lang/Throwable;Ljava/lang/Class;)V
      10: aload_0
      11: aload_2
      12: invokestatic  #16                 // Method propagateIfPossible:(Ljava/lang/Throwable;Ljava/lang/Class;)V
      15: return

  public static java.lang.RuntimeException propagate(java.lang.Throwable);
    Code:
       0: aload_0
       1: invokestatic  #13                 // Method throwIfUnchecked:(Ljava/lang/Throwable;)V
       4: new           #11                 // class java/lang/RuntimeException
       7: dup
       8: aload_0
       9: invokespecial #17                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/Throwable;)V
      12: athrow

  public static java.lang.Throwable getRootCause(java.lang.Throwable);
    Code:
       0: aload_0
       1: invokevirtual #18                 // Method java/lang/Throwable.getCause:()Ljava/lang/Throwable;
       4: dup
       5: astore_1
       6: ifnull        14
       9: aload_1
      10: astore_0
      11: goto          0
      14: aload_0
      15: areturn

  public static java.util.List<java.lang.Throwable> getCausalChain(java.lang.Throwable);
    Code:
       0: aload_0
       1: invokestatic  #6                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: new           #19                 // class java/util/ArrayList
       8: dup
       9: iconst_4
      10: invokespecial #20                 // Method java/util/ArrayList."<init>":(I)V
      13: astore_1
      14: aload_0
      15: ifnull        34
      18: aload_1
      19: aload_0
      20: invokeinterface #21,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      25: pop
      26: aload_0
      27: invokevirtual #18                 // Method java/lang/Throwable.getCause:()Ljava/lang/Throwable;
      30: astore_0
      31: goto          14
      34: aload_1
      35: invokestatic  #22                 // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;
      38: areturn

  public static <X extends java.lang.Throwable> X getCauseAs(java.lang.Throwable, java.lang.Class<X>);
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #18                 // Method java/lang/Throwable.getCause:()Ljava/lang/Throwable;
       5: invokevirtual #8                  // Method java/lang/Class.cast:(Ljava/lang/Object;)Ljava/lang/Object;
       8: checkcast     #9                  // class java/lang/Throwable
      11: areturn
      12: astore_2
      13: aload_2
      14: aload_0
      15: invokevirtual #24                 // Method java/lang/ClassCastException.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;
      18: pop
      19: aload_2
      20: athrow
    Exception table:
       from    to  target type
           0    11    12   Class java/lang/ClassCastException

  public static java.lang.String getStackTraceAsString(java.lang.Throwable);
    Code:
       0: new           #25                 // class java/io/StringWriter
       3: dup
       4: invokespecial #26                 // Method java/io/StringWriter."<init>":()V
       7: astore_1
       8: aload_0
       9: new           #27                 // class java/io/PrintWriter
      12: dup
      13: aload_1
      14: invokespecial #28                 // Method java/io/PrintWriter."<init>":(Ljava/io/Writer;)V
      17: invokevirtual #29                 // Method java/lang/Throwable.printStackTrace:(Ljava/io/PrintWriter;)V
      20: aload_1
      21: invokevirtual #30                 // Method java/io/StringWriter.toString:()Ljava/lang/String;
      24: areturn

  public static java.util.List<java.lang.StackTraceElement> lazyStackTrace(java.lang.Throwable);
    Code:
       0: invokestatic  #31                 // Method lazyStackTraceIsLazy:()Z
       3: ifeq          13
       6: aload_0
       7: invokestatic  #32                 // Method jlaStackTrace:(Ljava/lang/Throwable;)Ljava/util/List;
      10: goto          23
      13: aload_0
      14: invokevirtual #33                 // Method java/lang/Throwable.getStackTrace:()[Ljava/lang/StackTraceElement;
      17: invokestatic  #34                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      20: invokestatic  #22                 // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;
      23: areturn

  public static boolean lazyStackTraceIsLazy();
    Code:
       0: getstatic     #4                  // Field getStackTraceElementMethod:Ljava/lang/reflect/Method;
       3: ifnull        10
       6: iconst_1
       7: goto          11
      10: iconst_0
      11: getstatic     #1                  // Field getStackTraceDepthMethod:Ljava/lang/reflect/Method;
      14: ifnull        21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: iand
      23: ireturn

  private static java.util.List<java.lang.StackTraceElement> jlaStackTrace(java.lang.Throwable);
    Code:
       0: aload_0
       1: invokestatic  #6                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: new           #35                 // class com/google/common/base/Throwables$1
       8: dup
       9: aload_0
      10: invokespecial #36                 // Method com/google/common/base/Throwables$1."<init>":(Ljava/lang/Throwable;)V
      13: areturn

  private static java.lang.Object invokeAccessibleNonThrowingMethod(java.lang.reflect.Method, java.lang.Object, java.lang.Object...);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #37                 // Method java/lang/reflect/Method.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn
       7: astore_3
       8: new           #11                 // class java/lang/RuntimeException
      11: dup
      12: aload_3
      13: invokespecial #17                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/Throwable;)V
      16: athrow
      17: astore_3
      18: aload_3
      19: invokevirtual #40                 // Method java/lang/reflect/InvocationTargetException.getCause:()Ljava/lang/Throwable;
      22: invokestatic  #41                 // Method propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
      25: athrow
    Exception table:
       from    to  target type
           0     6     7   Class java/lang/IllegalAccessException
           0     6    17   Class java/lang/reflect/InvocationTargetException

  private static java.lang.Object getJLA();
    Code:
       0: ldc           #43                 // String sun.misc.SharedSecrets
       2: iconst_0
       3: aconst_null
       4: invokestatic  #44                 // Method java/lang/Class.forName:(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;
       7: astore_0
       8: aload_0
       9: ldc           #45                 // String getJavaLangAccess
      11: iconst_0
      12: anewarray     #46                 // class java/lang/Class
      15: invokevirtual #47                 // Method java/lang/Class.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
      18: astore_1
      19: aload_1
      20: aconst_null
      21: iconst_0
      22: anewarray     #48                 // class java/lang/Object
      25: invokevirtual #37                 // Method java/lang/reflect/Method.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;
      28: areturn
      29: astore_0
      30: aload_0
      31: athrow
      32: astore_0
      33: aconst_null
      34: areturn
    Exception table:
       from    to  target type
           0    28    29   Class java/lang/ThreadDeath
           0    28    32   Class java/lang/Throwable

  private static java.lang.reflect.Method getGetMethod();
    Code:
       0: ldc           #50                 // String getStackTraceElement
       2: iconst_2
       3: anewarray     #46                 // class java/lang/Class
       6: dup
       7: iconst_0
       8: ldc           #9                  // class java/lang/Throwable
      10: aastore
      11: dup
      12: iconst_1
      13: getstatic     #51                 // Field java/lang/Integer.TYPE:Ljava/lang/Class;
      16: aastore
      17: invokestatic  #52                 // Method getJlaMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
      20: areturn

  private static java.lang.reflect.Method getSizeMethod();
    Code:
       0: ldc           #53                 // String getStackTraceDepth
       2: iconst_1
       3: anewarray     #46                 // class java/lang/Class
       6: dup
       7: iconst_0
       8: ldc           #9                  // class java/lang/Throwable
      10: aastore
      11: invokestatic  #52                 // Method getJlaMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
      14: areturn

  private static java.lang.reflect.Method getJlaMethod(java.lang.String, java.lang.Class<?>...) throws java.lang.ThreadDeath;
    Code:
       0: ldc           #54                 // String sun.misc.JavaLangAccess
       2: iconst_0
       3: aconst_null
       4: invokestatic  #44                 // Method java/lang/Class.forName:(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;
       7: aload_0
       8: aload_1
       9: invokevirtual #47                 // Method java/lang/Class.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
      12: areturn
      13: astore_2
      14: aload_2
      15: athrow
      16: astore_2
      17: aconst_null
      18: areturn
    Exception table:
       from    to  target type
           0    12    13   Class java/lang/ThreadDeath
           0    12    16   Class java/lang/Throwable

  static java.lang.reflect.Method access$000();
    Code:
       0: getstatic     #4                  // Field getStackTraceElementMethod:Ljava/lang/reflect/Method;
       3: areturn

  static java.lang.Object access$100();
    Code:
       0: getstatic     #3                  // Field jla:Ljava/lang/Object;
       3: areturn

  static java.lang.Object access$200(java.lang.reflect.Method, java.lang.Object, java.lang.Object[]);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #2                  // Method invokeAccessibleNonThrowingMethod:(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;
       6: areturn

  static java.lang.reflect.Method access$300();
    Code:
       0: getstatic     #1                  // Field getStackTraceDepthMethod:Ljava/lang/reflect/Method;
       3: areturn

  static {};
    Code:
       0: invokestatic  #55                 // Method getJLA:()Ljava/lang/Object;
       3: putstatic     #3                  // Field jla:Ljava/lang/Object;
       6: getstatic     #3                  // Field jla:Ljava/lang/Object;
       9: ifnonnull     16
      12: aconst_null
      13: goto          19
      16: invokestatic  #56                 // Method getGetMethod:()Ljava/lang/reflect/Method;
      19: putstatic     #4                  // Field getStackTraceElementMethod:Ljava/lang/reflect/Method;
      22: getstatic     #3                  // Field jla:Ljava/lang/Object;
      25: ifnonnull     32
      28: aconst_null
      29: goto          35
      32: invokestatic  #57                 // Method getSizeMethod:()Ljava/lang/reflect/Method;
      35: putstatic     #1                  // Field getStackTraceDepthMethod:Ljava/lang/reflect/Method;
      38: return
}
