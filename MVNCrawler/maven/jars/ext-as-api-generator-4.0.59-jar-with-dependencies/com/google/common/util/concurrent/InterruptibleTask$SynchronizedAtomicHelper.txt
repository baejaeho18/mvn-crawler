Compiled from "InterruptibleTask.java"
final class com.google.common.util.concurrent.InterruptibleTask$SynchronizedAtomicHelper extends com.google.common.util.concurrent.InterruptibleTask$AtomicHelper {
  private com.google.common.util.concurrent.InterruptibleTask$SynchronizedAtomicHelper();
    Code:
       0: aload_0
       1: aconst_null
       2: invokespecial #2                  // Method com/google/common/util/concurrent/InterruptibleTask$AtomicHelper."<init>":(Lcom/google/common/util/concurrent/InterruptibleTask$1;)V
       5: return

  boolean compareAndSetRunner(com.google.common.util.concurrent.InterruptibleTask, java.lang.Thread, java.lang.Thread);
    Code:
       0: aload_1
       1: dup
       2: astore        4
       4: monitorenter
       5: aload_1
       6: invokestatic  #3                  // Method com/google/common/util/concurrent/InterruptibleTask.access$200:(Lcom/google/common/util/concurrent/InterruptibleTask;)Ljava/lang/Thread;
       9: aload_2
      10: if_acmpne     19
      13: aload_1
      14: aload_3
      15: invokestatic  #4                  // Method com/google/common/util/concurrent/InterruptibleTask.access$202:(Lcom/google/common/util/concurrent/InterruptibleTask;Ljava/lang/Thread;)Ljava/lang/Thread;
      18: pop
      19: aload         4
      21: monitorexit
      22: goto          33
      25: astore        5
      27: aload         4
      29: monitorexit
      30: aload         5
      32: athrow
      33: iconst_1
      34: ireturn
    Exception table:
       from    to  target type
           5    22    25   any
          25    30    25   any

  com.google.common.util.concurrent.InterruptibleTask$SynchronizedAtomicHelper(com.google.common.util.concurrent.InterruptibleTask$1);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method "<init>":()V
       4: return
}
