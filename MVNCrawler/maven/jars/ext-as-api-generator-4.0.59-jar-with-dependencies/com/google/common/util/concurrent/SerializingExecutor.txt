Compiled from "SerializingExecutor.java"
final class com.google.common.util.concurrent.SerializingExecutor implements java.util.concurrent.Executor {
  private static final java.util.logging.Logger log;

  private final java.util.concurrent.Executor executor;

  private final java.util.Deque<java.lang.Runnable> queue;

  private boolean isWorkerRunning;

  private int suspensions;

  private final com.google.common.util.concurrent.SerializingExecutor$QueueWorker worker;

  public com.google.common.util.concurrent.SerializingExecutor(java.util.concurrent.Executor);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #6                  // class java/util/ArrayDeque
       8: dup
       9: invokespecial #7                  // Method java/util/ArrayDeque."<init>":()V
      12: putfield      #4                  // Field queue:Ljava/util/Deque;
      15: aload_0
      16: iconst_0
      17: putfield      #3                  // Field isWorkerRunning:Z
      20: aload_0
      21: iconst_0
      22: putfield      #2                  // Field suspensions:I
      25: aload_0
      26: new           #8                  // class com/google/common/util/concurrent/SerializingExecutor$QueueWorker
      29: dup
      30: aload_0
      31: aconst_null
      32: invokespecial #9                  // Method com/google/common/util/concurrent/SerializingExecutor$QueueWorker."<init>":(Lcom/google/common/util/concurrent/SerializingExecutor;Lcom/google/common/util/concurrent/SerializingExecutor$1;)V
      35: putfield      #10                 // Field worker:Lcom/google/common/util/concurrent/SerializingExecutor$QueueWorker;
      38: aload_0
      39: aload_1
      40: invokestatic  #11                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
      43: checkcast     #12                 // class java/util/concurrent/Executor
      46: putfield      #13                 // Field executor:Ljava/util/concurrent/Executor;
      49: return

  public void execute(java.lang.Runnable);
    Code:
       0: aload_0
       1: getfield      #4                  // Field queue:Ljava/util/Deque;
       4: dup
       5: astore_2
       6: monitorenter
       7: aload_0
       8: getfield      #4                  // Field queue:Ljava/util/Deque;
      11: aload_1
      12: invokeinterface #14,  2           // InterfaceMethod java/util/Deque.addLast:(Ljava/lang/Object;)V
      17: aload_0
      18: getfield      #3                  // Field isWorkerRunning:Z
      21: ifne          31
      24: aload_0
      25: getfield      #2                  // Field suspensions:I
      28: ifle          34
      31: aload_2
      32: monitorexit
      33: return
      34: aload_0
      35: iconst_1
      36: putfield      #3                  // Field isWorkerRunning:Z
      39: aload_2
      40: monitorexit
      41: goto          49
      44: astore_3
      45: aload_2
      46: monitorexit
      47: aload_3
      48: athrow
      49: aload_0
      50: invokespecial #15                 // Method startQueueWorker:()V
      53: return
    Exception table:
       from    to  target type
           7    33    44   any
          34    41    44   any
          44    47    44   any

  public void executeFirst(java.lang.Runnable);
    Code:
       0: aload_0
       1: getfield      #4                  // Field queue:Ljava/util/Deque;
       4: dup
       5: astore_2
       6: monitorenter
       7: aload_0
       8: getfield      #4                  // Field queue:Ljava/util/Deque;
      11: aload_1
      12: invokeinterface #16,  2           // InterfaceMethod java/util/Deque.addFirst:(Ljava/lang/Object;)V
      17: aload_0
      18: getfield      #3                  // Field isWorkerRunning:Z
      21: ifne          31
      24: aload_0
      25: getfield      #2                  // Field suspensions:I
      28: ifle          34
      31: aload_2
      32: monitorexit
      33: return
      34: aload_0
      35: iconst_1
      36: putfield      #3                  // Field isWorkerRunning:Z
      39: aload_2
      40: monitorexit
      41: goto          49
      44: astore_3
      45: aload_2
      46: monitorexit
      47: aload_3
      48: athrow
      49: aload_0
      50: invokespecial #15                 // Method startQueueWorker:()V
      53: return
    Exception table:
       from    to  target type
           7    33    44   any
          34    41    44   any
          44    47    44   any

  public void suspend();
    Code:
       0: aload_0
       1: getfield      #4                  // Field queue:Ljava/util/Deque;
       4: dup
       5: astore_1
       6: monitorenter
       7: aload_0
       8: dup
       9: getfield      #2                  // Field suspensions:I
      12: iconst_1
      13: iadd
      14: putfield      #2                  // Field suspensions:I
      17: aload_1
      18: monitorexit
      19: goto          27
      22: astore_2
      23: aload_1
      24: monitorexit
      25: aload_2
      26: athrow
      27: return
    Exception table:
       from    to  target type
           7    19    22   any
          22    25    22   any

  public void resume();
    Code:
       0: aload_0
       1: getfield      #4                  // Field queue:Ljava/util/Deque;
       4: dup
       5: astore_1
       6: monitorenter
       7: aload_0
       8: getfield      #2                  // Field suspensions:I
      11: ifle          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: invokestatic  #17                 // Method com/google/common/base/Preconditions.checkState:(Z)V
      22: aload_0
      23: dup
      24: getfield      #2                  // Field suspensions:I
      27: iconst_1
      28: isub
      29: putfield      #2                  // Field suspensions:I
      32: aload_0
      33: getfield      #3                  // Field isWorkerRunning:Z
      36: ifne          58
      39: aload_0
      40: getfield      #2                  // Field suspensions:I
      43: ifgt          58
      46: aload_0
      47: getfield      #4                  // Field queue:Ljava/util/Deque;
      50: invokeinterface #18,  1           // InterfaceMethod java/util/Deque.isEmpty:()Z
      55: ifeq          61
      58: aload_1
      59: monitorexit
      60: return
      61: aload_0
      62: iconst_1
      63: putfield      #3                  // Field isWorkerRunning:Z
      66: aload_1
      67: monitorexit
      68: goto          76
      71: astore_2
      72: aload_1
      73: monitorexit
      74: aload_2
      75: athrow
      76: aload_0
      77: invokespecial #15                 // Method startQueueWorker:()V
      80: return
    Exception table:
       from    to  target type
           7    60    71   any
          61    68    71   any
          71    74    71   any

  private void startQueueWorker();
    Code:
       0: iconst_1
       1: istore_1
       2: aload_0
       3: getfield      #13                 // Field executor:Ljava/util/concurrent/Executor;
       6: aload_0
       7: getfield      #10                 // Field worker:Lcom/google/common/util/concurrent/SerializingExecutor$QueueWorker;
      10: invokeinterface #19,  2           // InterfaceMethod java/util/concurrent/Executor.execute:(Ljava/lang/Runnable;)V
      15: iconst_0
      16: istore_1
      17: iload_1
      18: ifeq          82
      21: aload_0
      22: getfield      #4                  // Field queue:Ljava/util/Deque;
      25: dup
      26: astore_2
      27: monitorenter
      28: aload_0
      29: iconst_0
      30: putfield      #3                  // Field isWorkerRunning:Z
      33: aload_2
      34: monitorexit
      35: goto          43
      38: astore_3
      39: aload_2
      40: monitorexit
      41: aload_3
      42: athrow
      43: goto          82
      46: astore        4
      48: iload_1
      49: ifeq          79
      52: aload_0
      53: getfield      #4                  // Field queue:Ljava/util/Deque;
      56: dup
      57: astore        5
      59: monitorenter
      60: aload_0
      61: iconst_0
      62: putfield      #3                  // Field isWorkerRunning:Z
      65: aload         5
      67: monitorexit
      68: goto          79
      71: astore        6
      73: aload         5
      75: monitorexit
      76: aload         6
      78: athrow
      79: aload         4
      81: athrow
      82: return
    Exception table:
       from    to  target type
          28    35    38   any
          38    41    38   any
           2    17    46   any
          60    68    71   any
          71    76    71   any
          46    48    46   any

  static java.util.Deque access$100(com.google.common.util.concurrent.SerializingExecutor);
    Code:
       0: aload_0
       1: getfield      #4                  // Field queue:Ljava/util/Deque;
       4: areturn

  static boolean access$202(com.google.common.util.concurrent.SerializingExecutor, boolean);
    Code:
       0: aload_0
       1: iload_1
       2: dup_x1
       3: putfield      #3                  // Field isWorkerRunning:Z
       6: ireturn

  static int access$300(com.google.common.util.concurrent.SerializingExecutor);
    Code:
       0: aload_0
       1: getfield      #2                  // Field suspensions:I
       4: ireturn

  static java.util.logging.Logger access$400();
    Code:
       0: getstatic     #1                  // Field log:Ljava/util/logging/Logger;
       3: areturn

  static {};
    Code:
       0: ldc           #20                 // class com/google/common/util/concurrent/SerializingExecutor
       2: invokevirtual #21                 // Method java/lang/Class.getName:()Ljava/lang/String;
       5: invokestatic  #22                 // Method java/util/logging/Logger.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;
       8: putstatic     #1                  // Field log:Ljava/util/logging/Logger;
      11: return
}
