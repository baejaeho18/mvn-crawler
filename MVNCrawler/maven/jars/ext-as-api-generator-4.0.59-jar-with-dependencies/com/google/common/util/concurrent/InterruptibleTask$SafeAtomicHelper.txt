Compiled from "InterruptibleTask.java"
final class com.google.common.util.concurrent.InterruptibleTask$SafeAtomicHelper extends com.google.common.util.concurrent.InterruptibleTask$AtomicHelper {
  final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<com.google.common.util.concurrent.InterruptibleTask, java.lang.Thread> runnerUpdater;

  com.google.common.util.concurrent.InterruptibleTask$SafeAtomicHelper(java.util.concurrent.atomic.AtomicReferenceFieldUpdater);
    Code:
       0: aload_0
       1: aconst_null
       2: invokespecial #1                  // Method com/google/common/util/concurrent/InterruptibleTask$AtomicHelper."<init>":(Lcom/google/common/util/concurrent/InterruptibleTask$1;)V
       5: aload_0
       6: aload_1
       7: putfield      #2                  // Field runnerUpdater:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      10: return

  boolean compareAndSetRunner(com.google.common.util.concurrent.InterruptibleTask, java.lang.Thread, java.lang.Thread);
    Code:
       0: aload_0
       1: getfield      #2                  // Field runnerUpdater:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokevirtual #3                  // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      10: ireturn
}
