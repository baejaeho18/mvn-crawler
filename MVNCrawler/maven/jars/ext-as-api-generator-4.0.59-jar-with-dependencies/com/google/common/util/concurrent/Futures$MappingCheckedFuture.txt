Compiled from "Futures.java"
class com.google.common.util.concurrent.Futures$MappingCheckedFuture<V, X extends java.lang.Exception> extends com.google.common.util.concurrent.AbstractCheckedFuture<V, X> {
  final com.google.common.base.Function<? super java.lang.Exception, X> mapper;

  com.google.common.util.concurrent.Futures$MappingCheckedFuture(com.google.common.util.concurrent.ListenableFuture<V>, com.google.common.base.Function<? super java.lang.Exception, X>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method com/google/common/util/concurrent/AbstractCheckedFuture."<init>":(Lcom/google/common/util/concurrent/ListenableFuture;)V
       5: aload_0
       6: aload_2
       7: invokestatic  #2                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #3                  // class com/google/common/base/Function
      13: putfield      #4                  // Field mapper:Lcom/google/common/base/Function;
      16: return

  protected X mapException(java.lang.Exception);
    Code:
       0: aload_0
       1: getfield      #4                  // Field mapper:Lcom/google/common/base/Function;
       4: aload_1
       5: invokeinterface #5,  2            // InterfaceMethod com/google/common/base/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #6                  // class java/lang/Exception
      13: areturn
}
