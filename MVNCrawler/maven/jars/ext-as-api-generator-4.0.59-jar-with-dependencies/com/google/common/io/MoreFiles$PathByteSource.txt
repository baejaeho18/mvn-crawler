Compiled from "MoreFiles.java"
final class com.google.common.io.MoreFiles$PathByteSource extends com.google.common.io.ByteSource {
  private static final java.nio.file.LinkOption[] FOLLOW_LINKS;

  private final java.nio.file.Path path;

  private final java.nio.file.OpenOption[] options;

  private final boolean followLinks;

  private com.google.common.io.MoreFiles$PathByteSource(java.nio.file.Path, java.nio.file.OpenOption...);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method com/google/common/io/ByteSource."<init>":()V
       4: aload_0
       5: aload_1
       6: invokestatic  #4                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       9: checkcast     #5                  // class java/nio/file/Path
      12: putfield      #1                  // Field path:Ljava/nio/file/Path;
      15: aload_0
      16: aload_2
      17: invokevirtual #6                  // Method "[Ljava/nio/file/OpenOption;".clone:()Ljava/lang/Object;
      20: checkcast     #7                  // class "[Ljava/nio/file/OpenOption;"
      23: putfield      #8                  // Field options:[Ljava/nio/file/OpenOption;
      26: aload_0
      27: aload_0
      28: getfield      #8                  // Field options:[Ljava/nio/file/OpenOption;
      31: invokestatic  #9                  // Method followLinks:([Ljava/nio/file/OpenOption;)Z
      34: putfield      #10                 // Field followLinks:Z
      37: return

  private static boolean followLinks(java.nio.file.OpenOption[]);
    Code:
       0: aload_0
       1: astore_1
       2: aload_1
       3: arraylength
       4: istore_2
       5: iconst_0
       6: istore_3
       7: iload_3
       8: iload_2
       9: if_icmpge     33
      12: aload_1
      13: iload_3
      14: aaload
      15: astore        4
      17: aload         4
      19: getstatic     #11                 // Field java/nio/file/LinkOption.NOFOLLOW_LINKS:Ljava/nio/file/LinkOption;
      22: if_acmpne     27
      25: iconst_0
      26: ireturn
      27: iinc          3, 1
      30: goto          7
      33: iconst_1
      34: ireturn

  public java.io.InputStream openStream() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field path:Ljava/nio/file/Path;
       4: aload_0
       5: getfield      #8                  // Field options:[Ljava/nio/file/OpenOption;
       8: invokestatic  #12                 // Method java/nio/file/Files.newInputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;
      11: areturn

  private java.nio.file.attribute.BasicFileAttributes readAttributes() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field path:Ljava/nio/file/Path;
       4: ldc           #13                 // class java/nio/file/attribute/BasicFileAttributes
       6: aload_0
       7: getfield      #10                 // Field followLinks:Z
      10: ifeq          19
      13: getstatic     #14                 // Field FOLLOW_LINKS:[Ljava/nio/file/LinkOption;
      16: goto          29
      19: iconst_1
      20: anewarray     #15                 // class java/nio/file/LinkOption
      23: dup
      24: iconst_0
      25: getstatic     #11                 // Field java/nio/file/LinkOption.NOFOLLOW_LINKS:Ljava/nio/file/LinkOption;
      28: aastore
      29: invokestatic  #16                 // Method java/nio/file/Files.readAttributes:(Ljava/nio/file/Path;Ljava/lang/Class;[Ljava/nio/file/LinkOption;)Ljava/nio/file/attribute/BasicFileAttributes;
      32: areturn

  public com.google.common.base.Optional<java.lang.Long> sizeIfKnown();
    Code:
       0: aload_0
       1: invokespecial #17                 // Method readAttributes:()Ljava/nio/file/attribute/BasicFileAttributes;
       4: astore_1
       5: goto          13
       8: astore_2
       9: invokestatic  #19                 // Method com/google/common/base/Optional.absent:()Lcom/google/common/base/Optional;
      12: areturn
      13: aload_1
      14: invokeinterface #20,  1           // InterfaceMethod java/nio/file/attribute/BasicFileAttributes.isDirectory:()Z
      19: ifne          31
      22: aload_1
      23: invokeinterface #21,  1           // InterfaceMethod java/nio/file/attribute/BasicFileAttributes.isSymbolicLink:()Z
      28: ifeq          35
      31: invokestatic  #19                 // Method com/google/common/base/Optional.absent:()Lcom/google/common/base/Optional;
      34: areturn
      35: aload_1
      36: invokeinterface #22,  1           // InterfaceMethod java/nio/file/attribute/BasicFileAttributes.size:()J
      41: invokestatic  #23                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      44: invokestatic  #24                 // Method com/google/common/base/Optional.of:(Ljava/lang/Object;)Lcom/google/common/base/Optional;
      47: areturn
    Exception table:
       from    to  target type
           0     5     8   Class java/io/IOException

  public long size() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #17                 // Method readAttributes:()Ljava/nio/file/attribute/BasicFileAttributes;
       4: astore_1
       5: aload_1
       6: invokeinterface #20,  1           // InterfaceMethod java/nio/file/attribute/BasicFileAttributes.isDirectory:()Z
      11: ifeq          24
      14: new           #18                 // class java/io/IOException
      17: dup
      18: ldc           #25                 // String can\'t read: is a directory
      20: invokespecial #26                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      23: athrow
      24: aload_1
      25: invokeinterface #21,  1           // InterfaceMethod java/nio/file/attribute/BasicFileAttributes.isSymbolicLink:()Z
      30: ifeq          43
      33: new           #18                 // class java/io/IOException
      36: dup
      37: ldc           #27                 // String can\'t read: is a symbolic link
      39: invokespecial #26                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      42: athrow
      43: aload_1
      44: invokeinterface #22,  1           // InterfaceMethod java/nio/file/attribute/BasicFileAttributes.size:()J
      49: lreturn

  public byte[] read() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field path:Ljava/nio/file/Path;
       4: aload_0
       5: getfield      #8                  // Field options:[Ljava/nio/file/OpenOption;
       8: invokestatic  #28                 // Method java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/nio/channels/SeekableByteChannel;
      11: astore_1
      12: aconst_null
      13: astore_2
      14: aload_1
      15: invokestatic  #29                 // Method java/nio/channels/Channels.newInputStream:(Ljava/nio/channels/ReadableByteChannel;)Ljava/io/InputStream;
      18: aload_1
      19: invokeinterface #30,  1           // InterfaceMethod java/nio/channels/SeekableByteChannel.size:()J
      24: invokestatic  #31                 // Method com/google/common/io/Files.readFile:(Ljava/io/InputStream;J)[B
      27: astore_3
      28: aload_1
      29: ifnull        62
      32: aload_2
      33: ifnull        56
      36: aload_1
      37: invokeinterface #32,  1           // InterfaceMethod java/nio/channels/SeekableByteChannel.close:()V
      42: goto          62
      45: astore        4
      47: aload_2
      48: aload         4
      50: invokevirtual #34                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
      53: goto          62
      56: aload_1
      57: invokeinterface #32,  1           // InterfaceMethod java/nio/channels/SeekableByteChannel.close:()V
      62: aload_3
      63: areturn
      64: astore_3
      65: aload_3
      66: astore_2
      67: aload_3
      68: athrow
      69: astore        5
      71: aload_1
      72: ifnull        105
      75: aload_2
      76: ifnull        99
      79: aload_1
      80: invokeinterface #32,  1           // InterfaceMethod java/nio/channels/SeekableByteChannel.close:()V
      85: goto          105
      88: astore        6
      90: aload_2
      91: aload         6
      93: invokevirtual #34                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
      96: goto          105
      99: aload_1
     100: invokeinterface #32,  1           // InterfaceMethod java/nio/channels/SeekableByteChannel.close:()V
     105: aload         5
     107: athrow
    Exception table:
       from    to  target type
          36    42    45   Class java/lang/Throwable
          14    28    64   Class java/lang/Throwable
          14    28    69   any
          79    85    88   Class java/lang/Throwable
          64    71    69   any

  public com.google.common.io.CharSource asCharSource(java.nio.charset.Charset);
    Code:
       0: aload_0
       1: getfield      #8                  // Field options:[Ljava/nio/file/OpenOption;
       4: arraylength
       5: ifne          18
       8: new           #35                 // class com/google/common/io/MoreFiles$PathByteSource$1
      11: dup
      12: aload_0
      13: aload_1
      14: invokespecial #36                 // Method com/google/common/io/MoreFiles$PathByteSource$1."<init>":(Lcom/google/common/io/MoreFiles$PathByteSource;Ljava/nio/charset/Charset;)V
      17: areturn
      18: aload_0
      19: aload_1
      20: invokespecial #37                 // Method com/google/common/io/ByteSource.asCharSource:(Ljava/nio/charset/Charset;)Lcom/google/common/io/CharSource;
      23: areturn

  public java.lang.String toString();
    Code:
       0: new           #38                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #39                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #40                 // String MoreFiles.asByteSource(
       9: invokevirtual #41                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #1                  // Field path:Ljava/nio/file/Path;
      16: invokevirtual #42                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      19: ldc           #43                 // String ,
      21: invokevirtual #41                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: aload_0
      25: getfield      #8                  // Field options:[Ljava/nio/file/OpenOption;
      28: invokestatic  #44                 // Method java/util/Arrays.toString:([Ljava/lang/Object;)Ljava/lang/String;
      31: invokevirtual #41                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      34: ldc           #45                 // String )
      36: invokevirtual #41                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: invokevirtual #46                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      42: areturn

  com.google.common.io.MoreFiles$PathByteSource(java.nio.file.Path, java.nio.file.OpenOption[], com.google.common.io.MoreFiles$1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #2                  // Method "<init>":(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)V
       6: return

  static java.nio.file.Path access$100(com.google.common.io.MoreFiles$PathByteSource);
    Code:
       0: aload_0
       1: getfield      #1                  // Field path:Ljava/nio/file/Path;
       4: areturn

  static {};
    Code:
       0: iconst_0
       1: anewarray     #15                 // class java/nio/file/LinkOption
       4: putstatic     #14                 // Field FOLLOW_LINKS:[Ljava/nio/file/LinkOption;
       7: return
}
