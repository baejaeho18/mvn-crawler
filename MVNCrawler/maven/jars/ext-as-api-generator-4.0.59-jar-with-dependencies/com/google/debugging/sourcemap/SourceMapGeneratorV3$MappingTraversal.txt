Compiled from "SourceMapGeneratorV3.java"
class com.google.debugging.sourcemap.SourceMapGeneratorV3$MappingTraversal {
  private int line;

  private int col;

  final com.google.debugging.sourcemap.SourceMapGeneratorV3 this$0;

  com.google.debugging.sourcemap.SourceMapGeneratorV3$MappingTraversal(com.google.debugging.sourcemap.SourceMapGeneratorV3);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lcom/google/debugging/sourcemap/SourceMapGeneratorV3;
       5: aload_0
       6: invokespecial #2                  // Method java/lang/Object."<init>":()V
       9: return

  void traverse(com.google.debugging.sourcemap.SourceMapGeneratorV3$MappingVisitor) throws java.io.IOException;
    Code:
       0: new           #3                  // class java/util/ArrayDeque
       3: dup
       4: invokespecial #4                  // Method java/util/ArrayDeque."<init>":()V
       7: astore_2
       8: aload_0
       9: getfield      #1                  // Field this$0:Lcom/google/debugging/sourcemap/SourceMapGeneratorV3;
      12: invokestatic  #5                  // Method com/google/debugging/sourcemap/SourceMapGeneratorV3.access$100:(Lcom/google/debugging/sourcemap/SourceMapGeneratorV3;)Ljava/util/List;
      15: invokeinterface #6,  1            // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      20: astore_3
      21: aload_3
      22: invokeinterface #7,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      27: ifeq          120
      30: aload_3
      31: invokeinterface #8,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      36: checkcast     #9                  // class com/google/debugging/sourcemap/SourceMapGeneratorV3$Mapping
      39: astore        4
      41: aload_2
      42: invokeinterface #10,  1           // InterfaceMethod java/util/Deque.isEmpty:()Z
      47: ifne          89
      50: aload_0
      51: aload_2
      52: invokeinterface #11,  1           // InterfaceMethod java/util/Deque.peek:()Ljava/lang/Object;
      57: checkcast     #9                  // class com/google/debugging/sourcemap/SourceMapGeneratorV3$Mapping
      60: aload         4
      62: invokespecial #12                 // Method isOverlapped:(Lcom/google/debugging/sourcemap/SourceMapGeneratorV3$Mapping;Lcom/google/debugging/sourcemap/SourceMapGeneratorV3$Mapping;)Z
      65: ifne          89
      68: aload_2
      69: invokeinterface #13,  1           // InterfaceMethod java/util/Deque.pop:()Ljava/lang/Object;
      74: checkcast     #9                  // class com/google/debugging/sourcemap/SourceMapGeneratorV3$Mapping
      77: astore        5
      79: aload_0
      80: aload_1
      81: aload         5
      83: invokespecial #14                 // Method maybeVisit:(Lcom/google/debugging/sourcemap/SourceMapGeneratorV3$MappingVisitor;Lcom/google/debugging/sourcemap/SourceMapGeneratorV3$Mapping;)V
      86: goto          41
      89: aload_2
      90: invokeinterface #11,  1           // InterfaceMethod java/util/Deque.peek:()Ljava/lang/Object;
      95: checkcast     #9                  // class com/google/debugging/sourcemap/SourceMapGeneratorV3$Mapping
      98: astore        5
     100: aload_0
     101: aload_1
     102: aload         5
     104: aload         4
     106: invokespecial #15                 // Method maybeVisitParent:(Lcom/google/debugging/sourcemap/SourceMapGeneratorV3$MappingVisitor;Lcom/google/debugging/sourcemap/SourceMapGeneratorV3$Mapping;Lcom/google/debugging/sourcemap/SourceMapGeneratorV3$Mapping;)V
     109: aload_2
     110: aload         4
     112: invokeinterface #16,  2           // InterfaceMethod java/util/Deque.push:(Ljava/lang/Object;)V
     117: goto          21
     120: aload_2
     121: invokeinterface #10,  1           // InterfaceMethod java/util/Deque.isEmpty:()Z
     126: ifne          148
     129: aload_2
     130: invokeinterface #13,  1           // InterfaceMethod java/util/Deque.pop:()Ljava/lang/Object;
     135: checkcast     #9                  // class com/google/debugging/sourcemap/SourceMapGeneratorV3$Mapping
     138: astore_3
     139: aload_0
     140: aload_1
     141: aload_3
     142: invokespecial #14                 // Method maybeVisit:(Lcom/google/debugging/sourcemap/SourceMapGeneratorV3$MappingVisitor;Lcom/google/debugging/sourcemap/SourceMapGeneratorV3$Mapping;)V
     145: goto          120
     148: return

  private int getAdjustedLine(com.google.debugging.sourcemap.FilePosition);
    Code:
       0: aload_1
       1: invokevirtual #17                 // Method com/google/debugging/sourcemap/FilePosition.getLine:()I
       4: aload_0
       5: getfield      #1                  // Field this$0:Lcom/google/debugging/sourcemap/SourceMapGeneratorV3;
       8: invokestatic  #18                 // Method com/google/debugging/sourcemap/SourceMapGeneratorV3.access$200:(Lcom/google/debugging/sourcemap/SourceMapGeneratorV3;)Lcom/google/debugging/sourcemap/FilePosition;
      11: invokevirtual #17                 // Method com/google/debugging/sourcemap/FilePosition.getLine:()I
      14: iadd
      15: ireturn

  private int getAdjustedCol(com.google.debugging.sourcemap.FilePosition);
    Code:
       0: aload_1
       1: invokevirtual #17                 // Method com/google/debugging/sourcemap/FilePosition.getLine:()I
       4: istore_2
       5: aload_1
       6: invokevirtual #19                 // Method com/google/debugging/sourcemap/FilePosition.getColumn:()I
       9: istore_3
      10: iload_2
      11: ifeq          18
      14: iload_3
      15: goto          30
      18: iload_3
      19: aload_0
      20: getfield      #1                  // Field this$0:Lcom/google/debugging/sourcemap/SourceMapGeneratorV3;
      23: invokestatic  #18                 // Method com/google/debugging/sourcemap/SourceMapGeneratorV3.access$200:(Lcom/google/debugging/sourcemap/SourceMapGeneratorV3;)Lcom/google/debugging/sourcemap/FilePosition;
      26: invokevirtual #19                 // Method com/google/debugging/sourcemap/FilePosition.getColumn:()I
      29: iadd
      30: ireturn

  private boolean isOverlapped(com.google.debugging.sourcemap.SourceMapGeneratorV3$Mapping, com.google.debugging.sourcemap.SourceMapGeneratorV3$Mapping);
    Code:
       0: aload_1
       1: getfield      #20                 // Field com/google/debugging/sourcemap/SourceMapGeneratorV3$Mapping.endPosition:Lcom/google/debugging/sourcemap/FilePosition;
       4: invokevirtual #17                 // Method com/google/debugging/sourcemap/FilePosition.getLine:()I
       7: istore_3
       8: aload_2
       9: getfield      #21                 // Field com/google/debugging/sourcemap/SourceMapGeneratorV3$Mapping.startPosition:Lcom/google/debugging/sourcemap/FilePosition;
      12: invokevirtual #17                 // Method com/google/debugging/sourcemap/FilePosition.getLine:()I
      15: istore        4
      17: aload_1
      18: getfield      #20                 // Field com/google/debugging/sourcemap/SourceMapGeneratorV3$Mapping.endPosition:Lcom/google/debugging/sourcemap/FilePosition;
      21: invokevirtual #19                 // Method com/google/debugging/sourcemap/FilePosition.getColumn:()I
      24: istore        5
      26: aload_2
      27: getfield      #21                 // Field com/google/debugging/sourcemap/SourceMapGeneratorV3$Mapping.startPosition:Lcom/google/debugging/sourcemap/FilePosition;
      30: invokevirtual #19                 // Method com/google/debugging/sourcemap/FilePosition.getColumn:()I
      33: istore        6
      35: iload_3
      36: iload         4
      38: if_icmpne     48
      41: iload         5
      43: iload         6
      45: if_icmpge     54
      48: iload_3
      49: iload         4
      51: if_icmple     58
      54: iconst_1
      55: goto          59
      58: iconst_0
      59: ireturn

  private void maybeVisit(com.google.debugging.sourcemap.SourceMapGeneratorV3$MappingVisitor, com.google.debugging.sourcemap.SourceMapGeneratorV3$Mapping) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_2
       2: getfield      #20                 // Field com/google/debugging/sourcemap/SourceMapGeneratorV3$Mapping.endPosition:Lcom/google/debugging/sourcemap/FilePosition;
       5: invokespecial #22                 // Method getAdjustedLine:(Lcom/google/debugging/sourcemap/FilePosition;)I
       8: istore_3
       9: aload_0
      10: aload_2
      11: getfield      #20                 // Field com/google/debugging/sourcemap/SourceMapGeneratorV3$Mapping.endPosition:Lcom/google/debugging/sourcemap/FilePosition;
      14: invokespecial #23                 // Method getAdjustedCol:(Lcom/google/debugging/sourcemap/FilePosition;)I
      17: istore        4
      19: aload_0
      20: getfield      #24                 // Field line:I
      23: iload_3
      24: if_icmplt     44
      27: aload_0
      28: getfield      #24                 // Field line:I
      31: iload_3
      32: if_icmpne     53
      35: aload_0
      36: getfield      #25                 // Field col:I
      39: iload         4
      41: if_icmpge     53
      44: aload_0
      45: aload_1
      46: aload_2
      47: iload_3
      48: iload         4
      50: invokespecial #26                 // Method visit:(Lcom/google/debugging/sourcemap/SourceMapGeneratorV3$MappingVisitor;Lcom/google/debugging/sourcemap/SourceMapGeneratorV3$Mapping;II)V
      53: return

  private void maybeVisitParent(com.google.debugging.sourcemap.SourceMapGeneratorV3$MappingVisitor, com.google.debugging.sourcemap.SourceMapGeneratorV3$Mapping, com.google.debugging.sourcemap.SourceMapGeneratorV3$Mapping) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_3
       2: getfield      #21                 // Field com/google/debugging/sourcemap/SourceMapGeneratorV3$Mapping.startPosition:Lcom/google/debugging/sourcemap/FilePosition;
       5: invokespecial #22                 // Method getAdjustedLine:(Lcom/google/debugging/sourcemap/FilePosition;)I
       8: istore        4
      10: aload_0
      11: aload_3
      12: getfield      #21                 // Field com/google/debugging/sourcemap/SourceMapGeneratorV3$Mapping.startPosition:Lcom/google/debugging/sourcemap/FilePosition;
      15: invokespecial #23                 // Method getAdjustedCol:(Lcom/google/debugging/sourcemap/FilePosition;)I
      18: istore        5
      20: aload_0
      21: getfield      #24                 // Field line:I
      24: iload         4
      26: if_icmplt     38
      29: aload_0
      30: getfield      #25                 // Field col:I
      33: iload         5
      35: if_icmpgt     42
      38: iconst_1
      39: goto          43
      42: iconst_0
      43: invokestatic  #27                 // Method com/google/common/base/Preconditions.checkState:(Z)V
      46: aload_0
      47: getfield      #24                 // Field line:I
      50: iload         4
      52: if_icmplt     73
      55: aload_0
      56: getfield      #24                 // Field line:I
      59: iload         4
      61: if_icmpne     83
      64: aload_0
      65: getfield      #25                 // Field col:I
      68: iload         5
      70: if_icmpge     83
      73: aload_0
      74: aload_1
      75: aload_2
      76: iload         4
      78: iload         5
      80: invokespecial #26                 // Method visit:(Lcom/google/debugging/sourcemap/SourceMapGeneratorV3$MappingVisitor;Lcom/google/debugging/sourcemap/SourceMapGeneratorV3$Mapping;II)V
      83: return

  private void visit(com.google.debugging.sourcemap.SourceMapGeneratorV3$MappingVisitor, com.google.debugging.sourcemap.SourceMapGeneratorV3$Mapping, int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #24                 // Field line:I
       4: iload_3
       5: if_icmpgt     12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: invokestatic  #27                 // Method com/google/common/base/Preconditions.checkState:(Z)V
      16: aload_0
      17: getfield      #24                 // Field line:I
      20: iload_3
      21: if_icmplt     33
      24: aload_0
      25: getfield      #25                 // Field col:I
      28: iload         4
      30: if_icmpge     37
      33: iconst_1
      34: goto          38
      37: iconst_0
      38: invokestatic  #27                 // Method com/google/common/base/Preconditions.checkState:(Z)V
      41: aload_0
      42: getfield      #24                 // Field line:I
      45: iload_3
      46: if_icmpne     66
      49: aload_0
      50: getfield      #25                 // Field col:I
      53: iload         4
      55: if_icmpne     66
      58: new           #28                 // class java/lang/IllegalStateException
      61: dup
      62: invokespecial #29                 // Method java/lang/IllegalStateException."<init>":()V
      65: athrow
      66: aload_1
      67: aload_2
      68: aload_0
      69: getfield      #24                 // Field line:I
      72: aload_0
      73: getfield      #25                 // Field col:I
      76: iload_3
      77: iload         4
      79: invokeinterface #30,  6           // InterfaceMethod com/google/debugging/sourcemap/SourceMapGeneratorV3$MappingVisitor.visit:(Lcom/google/debugging/sourcemap/SourceMapGeneratorV3$Mapping;IIII)V
      84: aload_0
      85: iload_3
      86: putfield      #24                 // Field line:I
      89: aload_0
      90: iload         4
      92: putfield      #25                 // Field col:I
      95: return
}
