Compiled from "TemplateConfiguration.java"
public final class freemarker.core.TemplateConfiguration extends freemarker.core.Configurable implements freemarker.core.ParserConfiguration {
  private boolean parentConfigurationSet;

  private java.lang.Integer tagSyntax;

  private java.lang.Integer namingConvention;

  private java.lang.Boolean whitespaceStripping;

  private java.lang.Boolean strictSyntaxMode;

  private java.lang.Integer autoEscapingPolicy;

  private java.lang.Boolean recognizeStandardFileExtensions;

  private freemarker.core.OutputFormat outputFormat;

  private java.lang.String encoding;

  public freemarker.core.TemplateConfiguration();
    Code:
       0: aload_0
       1: invokestatic  #1                  // Method freemarker/template/Configuration.getDefaultConfiguration:()Lfreemarker/template/Configuration;
       4: invokespecial #2                  // Method freemarker/core/Configurable."<init>":(Lfreemarker/core/Configurable;)V
       7: return

  void setParent(freemarker.core.Configurable);
    Code:
       0: ldc           #3                  // String cfg
       2: aload_1
       3: invokestatic  #4                  // Method freemarker/template/utility/NullArgumentException.check:(Ljava/lang/String;Ljava/lang/Object;)V
       6: aload_1
       7: instanceof    #5                  // class freemarker/template/Configuration
      10: ifne          23
      13: new           #6                  // class java/lang/IllegalArgumentException
      16: dup
      17: ldc           #7                  // String The parent of a TemplateConfiguration can only be a Configuration
      19: invokespecial #8                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      22: athrow
      23: aload_0
      24: getfield      #9                  // Field parentConfigurationSet:Z
      27: ifeq          49
      30: aload_0
      31: invokevirtual #10                 // Method getParent:()Lfreemarker/core/Configurable;
      34: aload_1
      35: if_acmpeq     48
      38: new           #11                 // class java/lang/IllegalStateException
      41: dup
      42: ldc           #12                 // String This TemplateConfiguration is already associated with a different Configuration instance.
      44: invokespecial #13                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      47: athrow
      48: return
      49: aload_1
      50: checkcast     #5                  // class freemarker/template/Configuration
      53: invokevirtual #14                 // Method freemarker/template/Configuration.getIncompatibleImprovements:()Lfreemarker/template/Version;
      56: invokevirtual #15                 // Method freemarker/template/Version.intValue:()I
      59: getstatic     #16                 // Field freemarker/template/_TemplateAPI.VERSION_INT_2_3_22:I
      62: if_icmpge     82
      65: aload_0
      66: invokespecial #17                 // Method hasAnyConfigurableSet:()Z
      69: ifeq          82
      72: new           #11                 // class java/lang/IllegalStateException
      75: dup
      76: ldc           #18                 // String This TemplateConfiguration can\'t be associated to a Configuration that has incompatibleImprovements less than 2.3.22, because it changes non-parser settings.
      78: invokespecial #13                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      81: athrow
      82: aload_0
      83: aload_1
      84: invokespecial #19                 // Method freemarker/core/Configurable.setParent:(Lfreemarker/core/Configurable;)V
      87: aload_0
      88: iconst_1
      89: putfield      #9                  // Field parentConfigurationSet:Z
      92: return

  public void setParentConfiguration(freemarker.template.Configuration);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #20                 // Method setParent:(Lfreemarker/core/Configurable;)V
       5: return

  public freemarker.template.Configuration getParentConfiguration();
    Code:
       0: aload_0
       1: getfield      #9                  // Field parentConfigurationSet:Z
       4: ifeq          17
       7: aload_0
       8: invokevirtual #10                 // Method getParent:()Lfreemarker/core/Configurable;
      11: checkcast     #5                  // class freemarker/template/Configuration
      14: goto          18
      17: aconst_null
      18: areturn

  public void merge(freemarker.core.TemplateConfiguration);
    Code:
       0: aload_1
       1: invokevirtual #21                 // Method isAPIBuiltinEnabledSet:()Z
       4: ifeq          15
       7: aload_0
       8: aload_1
       9: invokevirtual #22                 // Method isAPIBuiltinEnabled:()Z
      12: invokevirtual #23                 // Method setAPIBuiltinEnabled:(Z)V
      15: aload_1
      16: invokevirtual #24                 // Method isArithmeticEngineSet:()Z
      19: ifeq          30
      22: aload_0
      23: aload_1
      24: invokevirtual #25                 // Method getArithmeticEngine:()Lfreemarker/core/ArithmeticEngine;
      27: invokevirtual #26                 // Method setArithmeticEngine:(Lfreemarker/core/ArithmeticEngine;)V
      30: aload_1
      31: invokevirtual #27                 // Method isAutoEscapingPolicySet:()Z
      34: ifeq          45
      37: aload_0
      38: aload_1
      39: invokevirtual #28                 // Method getAutoEscapingPolicy:()I
      42: invokevirtual #29                 // Method setAutoEscapingPolicy:(I)V
      45: aload_1
      46: invokevirtual #30                 // Method isAutoFlushSet:()Z
      49: ifeq          60
      52: aload_0
      53: aload_1
      54: invokevirtual #31                 // Method getAutoFlush:()Z
      57: invokevirtual #32                 // Method setAutoFlush:(Z)V
      60: aload_1
      61: invokevirtual #33                 // Method isBooleanFormatSet:()Z
      64: ifeq          75
      67: aload_0
      68: aload_1
      69: invokevirtual #34                 // Method getBooleanFormat:()Ljava/lang/String;
      72: invokevirtual #35                 // Method setBooleanFormat:(Ljava/lang/String;)V
      75: aload_1
      76: invokevirtual #36                 // Method isClassicCompatibleSet:()Z
      79: ifeq          90
      82: aload_0
      83: aload_1
      84: invokevirtual #37                 // Method getClassicCompatibleAsInt:()I
      87: invokevirtual #38                 // Method setClassicCompatibleAsInt:(I)V
      90: aload_1
      91: invokevirtual #39                 // Method isCustomDateFormatsSet:()Z
      94: ifeq          113
      97: aload_0
      98: aload_0
      99: aload_0
     100: invokevirtual #40                 // Method getCustomDateFormats:()Ljava/util/Map;
     103: aload_1
     104: invokevirtual #40                 // Method getCustomDateFormats:()Ljava/util/Map;
     107: invokespecial #41                 // Method mergeMaps:(Ljava/util/Map;Ljava/util/Map;)Ljava/util/Map;
     110: invokevirtual #42                 // Method setCustomDateFormats:(Ljava/util/Map;)V
     113: aload_1
     114: invokevirtual #43                 // Method isCustomNumberFormatsSet:()Z
     117: ifeq          136
     120: aload_0
     121: aload_0
     122: aload_0
     123: invokevirtual #44                 // Method getCustomNumberFormats:()Ljava/util/Map;
     126: aload_1
     127: invokevirtual #44                 // Method getCustomNumberFormats:()Ljava/util/Map;
     130: invokespecial #41                 // Method mergeMaps:(Ljava/util/Map;Ljava/util/Map;)Ljava/util/Map;
     133: invokevirtual #45                 // Method setCustomNumberFormats:(Ljava/util/Map;)V
     136: aload_1
     137: invokevirtual #46                 // Method isDateFormatSet:()Z
     140: ifeq          151
     143: aload_0
     144: aload_1
     145: invokevirtual #47                 // Method getDateFormat:()Ljava/lang/String;
     148: invokevirtual #48                 // Method setDateFormat:(Ljava/lang/String;)V
     151: aload_1
     152: invokevirtual #49                 // Method isDateTimeFormatSet:()Z
     155: ifeq          166
     158: aload_0
     159: aload_1
     160: invokevirtual #50                 // Method getDateTimeFormat:()Ljava/lang/String;
     163: invokevirtual #51                 // Method setDateTimeFormat:(Ljava/lang/String;)V
     166: aload_1
     167: invokevirtual #52                 // Method isEncodingSet:()Z
     170: ifeq          181
     173: aload_0
     174: aload_1
     175: invokevirtual #53                 // Method getEncoding:()Ljava/lang/String;
     178: invokevirtual #54                 // Method setEncoding:(Ljava/lang/String;)V
     181: aload_1
     182: invokevirtual #55                 // Method isLocaleSet:()Z
     185: ifeq          196
     188: aload_0
     189: aload_1
     190: invokevirtual #56                 // Method getLocale:()Ljava/util/Locale;
     193: invokevirtual #57                 // Method setLocale:(Ljava/util/Locale;)V
     196: aload_1
     197: invokevirtual #58                 // Method isLogTemplateExceptionsSet:()Z
     200: ifeq          211
     203: aload_0
     204: aload_1
     205: invokevirtual #59                 // Method getLogTemplateExceptions:()Z
     208: invokevirtual #60                 // Method setLogTemplateExceptions:(Z)V
     211: aload_1
     212: invokevirtual #61                 // Method isNamingConventionSet:()Z
     215: ifeq          226
     218: aload_0
     219: aload_1
     220: invokevirtual #62                 // Method getNamingConvention:()I
     223: invokevirtual #63                 // Method setNamingConvention:(I)V
     226: aload_1
     227: invokevirtual #64                 // Method isNewBuiltinClassResolverSet:()Z
     230: ifeq          241
     233: aload_0
     234: aload_1
     235: invokevirtual #65                 // Method getNewBuiltinClassResolver:()Lfreemarker/core/TemplateClassResolver;
     238: invokevirtual #66                 // Method setNewBuiltinClassResolver:(Lfreemarker/core/TemplateClassResolver;)V
     241: aload_1
     242: invokevirtual #67                 // Method isNumberFormatSet:()Z
     245: ifeq          256
     248: aload_0
     249: aload_1
     250: invokevirtual #68                 // Method getNumberFormat:()Ljava/lang/String;
     253: invokevirtual #69                 // Method setNumberFormat:(Ljava/lang/String;)V
     256: aload_1
     257: invokevirtual #70                 // Method isObjectWrapperSet:()Z
     260: ifeq          271
     263: aload_0
     264: aload_1
     265: invokevirtual #71                 // Method getObjectWrapper:()Lfreemarker/template/ObjectWrapper;
     268: invokevirtual #72                 // Method setObjectWrapper:(Lfreemarker/template/ObjectWrapper;)V
     271: aload_1
     272: invokevirtual #73                 // Method isOutputEncodingSet:()Z
     275: ifeq          286
     278: aload_0
     279: aload_1
     280: invokevirtual #74                 // Method getOutputEncoding:()Ljava/lang/String;
     283: invokevirtual #75                 // Method setOutputEncoding:(Ljava/lang/String;)V
     286: aload_1
     287: invokevirtual #76                 // Method isOutputFormatSet:()Z
     290: ifeq          301
     293: aload_0
     294: aload_1
     295: invokevirtual #77                 // Method getOutputFormat:()Lfreemarker/core/OutputFormat;
     298: invokevirtual #78                 // Method setOutputFormat:(Lfreemarker/core/OutputFormat;)V
     301: aload_1
     302: invokevirtual #79                 // Method isRecognizeStandardFileExtensionsSet:()Z
     305: ifeq          316
     308: aload_0
     309: aload_1
     310: invokevirtual #80                 // Method getRecognizeStandardFileExtensions:()Z
     313: invokevirtual #81                 // Method setRecognizeStandardFileExtensions:(Z)V
     316: aload_1
     317: invokevirtual #82                 // Method isShowErrorTipsSet:()Z
     320: ifeq          331
     323: aload_0
     324: aload_1
     325: invokevirtual #83                 // Method getShowErrorTips:()Z
     328: invokevirtual #84                 // Method setShowErrorTips:(Z)V
     331: aload_1
     332: invokevirtual #85                 // Method isSQLDateAndTimeTimeZoneSet:()Z
     335: ifeq          346
     338: aload_0
     339: aload_1
     340: invokevirtual #86                 // Method getSQLDateAndTimeTimeZone:()Ljava/util/TimeZone;
     343: invokevirtual #87                 // Method setSQLDateAndTimeTimeZone:(Ljava/util/TimeZone;)V
     346: aload_1
     347: invokevirtual #88                 // Method isStrictSyntaxModeSet:()Z
     350: ifeq          361
     353: aload_0
     354: aload_1
     355: invokevirtual #89                 // Method getStrictSyntaxMode:()Z
     358: invokevirtual #90                 // Method setStrictSyntaxMode:(Z)V
     361: aload_1
     362: invokevirtual #91                 // Method isTagSyntaxSet:()Z
     365: ifeq          376
     368: aload_0
     369: aload_1
     370: invokevirtual #92                 // Method getTagSyntax:()I
     373: invokevirtual #93                 // Method setTagSyntax:(I)V
     376: aload_1
     377: invokevirtual #94                 // Method isTemplateExceptionHandlerSet:()Z
     380: ifeq          391
     383: aload_0
     384: aload_1
     385: invokevirtual #95                 // Method getTemplateExceptionHandler:()Lfreemarker/template/TemplateExceptionHandler;
     388: invokevirtual #96                 // Method setTemplateExceptionHandler:(Lfreemarker/template/TemplateExceptionHandler;)V
     391: aload_1
     392: invokevirtual #97                 // Method isTimeFormatSet:()Z
     395: ifeq          406
     398: aload_0
     399: aload_1
     400: invokevirtual #98                 // Method getTimeFormat:()Ljava/lang/String;
     403: invokevirtual #99                 // Method setTimeFormat:(Ljava/lang/String;)V
     406: aload_1
     407: invokevirtual #100                // Method isTimeZoneSet:()Z
     410: ifeq          421
     413: aload_0
     414: aload_1
     415: invokevirtual #101                // Method getTimeZone:()Ljava/util/TimeZone;
     418: invokevirtual #102                // Method setTimeZone:(Ljava/util/TimeZone;)V
     421: aload_1
     422: invokevirtual #103                // Method isURLEscapingCharsetSet:()Z
     425: ifeq          436
     428: aload_0
     429: aload_1
     430: invokevirtual #104                // Method getURLEscapingCharset:()Ljava/lang/String;
     433: invokevirtual #105                // Method setURLEscapingCharset:(Ljava/lang/String;)V
     436: aload_1
     437: invokevirtual #106                // Method isWhitespaceStrippingSet:()Z
     440: ifeq          451
     443: aload_0
     444: aload_1
     445: invokevirtual #107                // Method getWhitespaceStripping:()Z
     448: invokevirtual #108                // Method setWhitespaceStripping:(Z)V
     451: aload_1
     452: aload_0
     453: iconst_1
     454: invokevirtual #109                // Method copyDirectCustomAttributes:(Lfreemarker/core/Configurable;Z)V
     457: return

  public void apply(freemarker.template.Template);
    Code:
       0: aload_0
       1: invokespecial #110                // Method checkParentConfigurationSet:()V
       4: aload_0
       5: invokevirtual #111                // Method getParentConfiguration:()Lfreemarker/template/Configuration;
       8: astore_2
       9: aload_1
      10: invokevirtual #112                // Method freemarker/template/Template.getConfiguration:()Lfreemarker/template/Configuration;
      13: aload_2
      14: if_acmpeq     27
      17: new           #6                  // class java/lang/IllegalArgumentException
      20: dup
      21: ldc           #113                // String The argument Template doesn\'t belong to the same Configuration as the TemplateConfiguration
      23: invokespecial #8                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      26: athrow
      27: aload_0
      28: invokevirtual #21                 // Method isAPIBuiltinEnabledSet:()Z
      31: ifeq          49
      34: aload_1
      35: invokevirtual #114                // Method freemarker/template/Template.isAPIBuiltinEnabledSet:()Z
      38: ifne          49
      41: aload_1
      42: aload_0
      43: invokevirtual #22                 // Method isAPIBuiltinEnabled:()Z
      46: invokevirtual #115                // Method freemarker/template/Template.setAPIBuiltinEnabled:(Z)V
      49: aload_0
      50: invokevirtual #24                 // Method isArithmeticEngineSet:()Z
      53: ifeq          71
      56: aload_1
      57: invokevirtual #116                // Method freemarker/template/Template.isArithmeticEngineSet:()Z
      60: ifne          71
      63: aload_1
      64: aload_0
      65: invokevirtual #25                 // Method getArithmeticEngine:()Lfreemarker/core/ArithmeticEngine;
      68: invokevirtual #117                // Method freemarker/template/Template.setArithmeticEngine:(Lfreemarker/core/ArithmeticEngine;)V
      71: aload_0
      72: invokevirtual #30                 // Method isAutoFlushSet:()Z
      75: ifeq          93
      78: aload_1
      79: invokevirtual #118                // Method freemarker/template/Template.isAutoFlushSet:()Z
      82: ifne          93
      85: aload_1
      86: aload_0
      87: invokevirtual #31                 // Method getAutoFlush:()Z
      90: invokevirtual #119                // Method freemarker/template/Template.setAutoFlush:(Z)V
      93: aload_0
      94: invokevirtual #33                 // Method isBooleanFormatSet:()Z
      97: ifeq          115
     100: aload_1
     101: invokevirtual #120                // Method freemarker/template/Template.isBooleanFormatSet:()Z
     104: ifne          115
     107: aload_1
     108: aload_0
     109: invokevirtual #34                 // Method getBooleanFormat:()Ljava/lang/String;
     112: invokevirtual #121                // Method freemarker/template/Template.setBooleanFormat:(Ljava/lang/String;)V
     115: aload_0
     116: invokevirtual #36                 // Method isClassicCompatibleSet:()Z
     119: ifeq          137
     122: aload_1
     123: invokevirtual #122                // Method freemarker/template/Template.isClassicCompatibleSet:()Z
     126: ifne          137
     129: aload_1
     130: aload_0
     131: invokevirtual #37                 // Method getClassicCompatibleAsInt:()I
     134: invokevirtual #123                // Method freemarker/template/Template.setClassicCompatibleAsInt:(I)V
     137: aload_0
     138: invokevirtual #39                 // Method isCustomDateFormatsSet:()Z
     141: ifeq          159
     144: aload_1
     145: invokevirtual #124                // Method freemarker/template/Template.isCustomDateFormatsSet:()Z
     148: ifne          159
     151: aload_1
     152: aload_0
     153: invokevirtual #40                 // Method getCustomDateFormats:()Ljava/util/Map;
     156: invokevirtual #125                // Method freemarker/template/Template.setCustomDateFormats:(Ljava/util/Map;)V
     159: aload_0
     160: invokevirtual #43                 // Method isCustomNumberFormatsSet:()Z
     163: ifeq          181
     166: aload_1
     167: invokevirtual #126                // Method freemarker/template/Template.isCustomNumberFormatsSet:()Z
     170: ifne          181
     173: aload_1
     174: aload_0
     175: invokevirtual #44                 // Method getCustomNumberFormats:()Ljava/util/Map;
     178: invokevirtual #127                // Method freemarker/template/Template.setCustomNumberFormats:(Ljava/util/Map;)V
     181: aload_0
     182: invokevirtual #46                 // Method isDateFormatSet:()Z
     185: ifeq          203
     188: aload_1
     189: invokevirtual #128                // Method freemarker/template/Template.isDateFormatSet:()Z
     192: ifne          203
     195: aload_1
     196: aload_0
     197: invokevirtual #47                 // Method getDateFormat:()Ljava/lang/String;
     200: invokevirtual #129                // Method freemarker/template/Template.setDateFormat:(Ljava/lang/String;)V
     203: aload_0
     204: invokevirtual #49                 // Method isDateTimeFormatSet:()Z
     207: ifeq          225
     210: aload_1
     211: invokevirtual #130                // Method freemarker/template/Template.isDateTimeFormatSet:()Z
     214: ifne          225
     217: aload_1
     218: aload_0
     219: invokevirtual #50                 // Method getDateTimeFormat:()Ljava/lang/String;
     222: invokevirtual #131                // Method freemarker/template/Template.setDateTimeFormat:(Ljava/lang/String;)V
     225: aload_0
     226: invokevirtual #52                 // Method isEncodingSet:()Z
     229: ifeq          247
     232: aload_1
     233: invokevirtual #132                // Method freemarker/template/Template.getEncoding:()Ljava/lang/String;
     236: ifnonnull     247
     239: aload_1
     240: aload_0
     241: invokevirtual #53                 // Method getEncoding:()Ljava/lang/String;
     244: invokevirtual #133                // Method freemarker/template/Template.setEncoding:(Ljava/lang/String;)V
     247: aload_0
     248: invokevirtual #55                 // Method isLocaleSet:()Z
     251: ifeq          269
     254: aload_1
     255: invokevirtual #134                // Method freemarker/template/Template.isLocaleSet:()Z
     258: ifne          269
     261: aload_1
     262: aload_0
     263: invokevirtual #56                 // Method getLocale:()Ljava/util/Locale;
     266: invokevirtual #135                // Method freemarker/template/Template.setLocale:(Ljava/util/Locale;)V
     269: aload_0
     270: invokevirtual #58                 // Method isLogTemplateExceptionsSet:()Z
     273: ifeq          291
     276: aload_1
     277: invokevirtual #136                // Method freemarker/template/Template.isLogTemplateExceptionsSet:()Z
     280: ifne          291
     283: aload_1
     284: aload_0
     285: invokevirtual #59                 // Method getLogTemplateExceptions:()Z
     288: invokevirtual #137                // Method freemarker/template/Template.setLogTemplateExceptions:(Z)V
     291: aload_0
     292: invokevirtual #64                 // Method isNewBuiltinClassResolverSet:()Z
     295: ifeq          313
     298: aload_1
     299: invokevirtual #138                // Method freemarker/template/Template.isNewBuiltinClassResolverSet:()Z
     302: ifne          313
     305: aload_1
     306: aload_0
     307: invokevirtual #65                 // Method getNewBuiltinClassResolver:()Lfreemarker/core/TemplateClassResolver;
     310: invokevirtual #139                // Method freemarker/template/Template.setNewBuiltinClassResolver:(Lfreemarker/core/TemplateClassResolver;)V
     313: aload_0
     314: invokevirtual #67                 // Method isNumberFormatSet:()Z
     317: ifeq          335
     320: aload_1
     321: invokevirtual #140                // Method freemarker/template/Template.isNumberFormatSet:()Z
     324: ifne          335
     327: aload_1
     328: aload_0
     329: invokevirtual #68                 // Method getNumberFormat:()Ljava/lang/String;
     332: invokevirtual #141                // Method freemarker/template/Template.setNumberFormat:(Ljava/lang/String;)V
     335: aload_0
     336: invokevirtual #70                 // Method isObjectWrapperSet:()Z
     339: ifeq          357
     342: aload_1
     343: invokevirtual #142                // Method freemarker/template/Template.isObjectWrapperSet:()Z
     346: ifne          357
     349: aload_1
     350: aload_0
     351: invokevirtual #71                 // Method getObjectWrapper:()Lfreemarker/template/ObjectWrapper;
     354: invokevirtual #143                // Method freemarker/template/Template.setObjectWrapper:(Lfreemarker/template/ObjectWrapper;)V
     357: aload_0
     358: invokevirtual #73                 // Method isOutputEncodingSet:()Z
     361: ifeq          379
     364: aload_1
     365: invokevirtual #144                // Method freemarker/template/Template.isOutputEncodingSet:()Z
     368: ifne          379
     371: aload_1
     372: aload_0
     373: invokevirtual #74                 // Method getOutputEncoding:()Ljava/lang/String;
     376: invokevirtual #145                // Method freemarker/template/Template.setOutputEncoding:(Ljava/lang/String;)V
     379: aload_0
     380: invokevirtual #82                 // Method isShowErrorTipsSet:()Z
     383: ifeq          401
     386: aload_1
     387: invokevirtual #146                // Method freemarker/template/Template.isShowErrorTipsSet:()Z
     390: ifne          401
     393: aload_1
     394: aload_0
     395: invokevirtual #83                 // Method getShowErrorTips:()Z
     398: invokevirtual #147                // Method freemarker/template/Template.setShowErrorTips:(Z)V
     401: aload_0
     402: invokevirtual #85                 // Method isSQLDateAndTimeTimeZoneSet:()Z
     405: ifeq          423
     408: aload_1
     409: invokevirtual #148                // Method freemarker/template/Template.isSQLDateAndTimeTimeZoneSet:()Z
     412: ifne          423
     415: aload_1
     416: aload_0
     417: invokevirtual #86                 // Method getSQLDateAndTimeTimeZone:()Ljava/util/TimeZone;
     420: invokevirtual #149                // Method freemarker/template/Template.setSQLDateAndTimeTimeZone:(Ljava/util/TimeZone;)V
     423: aload_0
     424: invokevirtual #94                 // Method isTemplateExceptionHandlerSet:()Z
     427: ifeq          445
     430: aload_1
     431: invokevirtual #150                // Method freemarker/template/Template.isTemplateExceptionHandlerSet:()Z
     434: ifne          445
     437: aload_1
     438: aload_0
     439: invokevirtual #95                 // Method getTemplateExceptionHandler:()Lfreemarker/template/TemplateExceptionHandler;
     442: invokevirtual #151                // Method freemarker/template/Template.setTemplateExceptionHandler:(Lfreemarker/template/TemplateExceptionHandler;)V
     445: aload_0
     446: invokevirtual #97                 // Method isTimeFormatSet:()Z
     449: ifeq          467
     452: aload_1
     453: invokevirtual #152                // Method freemarker/template/Template.isTimeFormatSet:()Z
     456: ifne          467
     459: aload_1
     460: aload_0
     461: invokevirtual #98                 // Method getTimeFormat:()Ljava/lang/String;
     464: invokevirtual #153                // Method freemarker/template/Template.setTimeFormat:(Ljava/lang/String;)V
     467: aload_0
     468: invokevirtual #100                // Method isTimeZoneSet:()Z
     471: ifeq          489
     474: aload_1
     475: invokevirtual #154                // Method freemarker/template/Template.isTimeZoneSet:()Z
     478: ifne          489
     481: aload_1
     482: aload_0
     483: invokevirtual #101                // Method getTimeZone:()Ljava/util/TimeZone;
     486: invokevirtual #155                // Method freemarker/template/Template.setTimeZone:(Ljava/util/TimeZone;)V
     489: aload_0
     490: invokevirtual #103                // Method isURLEscapingCharsetSet:()Z
     493: ifeq          511
     496: aload_1
     497: invokevirtual #156                // Method freemarker/template/Template.isURLEscapingCharsetSet:()Z
     500: ifne          511
     503: aload_1
     504: aload_0
     505: invokevirtual #104                // Method getURLEscapingCharset:()Ljava/lang/String;
     508: invokevirtual #157                // Method freemarker/template/Template.setURLEscapingCharset:(Ljava/lang/String;)V
     511: aload_0
     512: aload_1
     513: iconst_0
     514: invokevirtual #109                // Method copyDirectCustomAttributes:(Lfreemarker/core/Configurable;Z)V
     517: return

  public void setTagSyntax(int);
    Code:
       0: iload_1
       1: invokestatic  #158                // Method freemarker/template/_TemplateAPI.valideTagSyntaxValue:(I)V
       4: aload_0
       5: iload_1
       6: invokestatic  #159                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       9: putfield      #160                // Field tagSyntax:Ljava/lang/Integer;
      12: return

  public int getTagSyntax();
    Code:
       0: aload_0
       1: getfield      #160                // Field tagSyntax:Ljava/lang/Integer;
       4: ifnull        17
       7: aload_0
       8: getfield      #160                // Field tagSyntax:Ljava/lang/Integer;
      11: invokevirtual #161                // Method java/lang/Integer.intValue:()I
      14: goto          24
      17: aload_0
      18: invokevirtual #111                // Method getParentConfiguration:()Lfreemarker/template/Configuration;
      21: invokevirtual #162                // Method freemarker/template/Configuration.getTagSyntax:()I
      24: ireturn

  public boolean isTagSyntaxSet();
    Code:
       0: aload_0
       1: getfield      #160                // Field tagSyntax:Ljava/lang/Integer;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public void setNamingConvention(int);
    Code:
       0: iload_1
       1: invokestatic  #163                // Method freemarker/template/_TemplateAPI.validateNamingConventionValue:(I)V
       4: aload_0
       5: iload_1
       6: invokestatic  #159                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       9: putfield      #164                // Field namingConvention:Ljava/lang/Integer;
      12: return

  public int getNamingConvention();
    Code:
       0: aload_0
       1: getfield      #164                // Field namingConvention:Ljava/lang/Integer;
       4: ifnull        17
       7: aload_0
       8: getfield      #164                // Field namingConvention:Ljava/lang/Integer;
      11: invokevirtual #161                // Method java/lang/Integer.intValue:()I
      14: goto          24
      17: aload_0
      18: invokevirtual #111                // Method getParentConfiguration:()Lfreemarker/template/Configuration;
      21: invokevirtual #165                // Method freemarker/template/Configuration.getNamingConvention:()I
      24: ireturn

  public boolean isNamingConventionSet();
    Code:
       0: aload_0
       1: getfield      #164                // Field namingConvention:Ljava/lang/Integer;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public void setWhitespaceStripping(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #166                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       5: putfield      #167                // Field whitespaceStripping:Ljava/lang/Boolean;
       8: return

  public boolean getWhitespaceStripping();
    Code:
       0: aload_0
       1: getfield      #167                // Field whitespaceStripping:Ljava/lang/Boolean;
       4: ifnull        17
       7: aload_0
       8: getfield      #167                // Field whitespaceStripping:Ljava/lang/Boolean;
      11: invokevirtual #168                // Method java/lang/Boolean.booleanValue:()Z
      14: goto          24
      17: aload_0
      18: invokevirtual #111                // Method getParentConfiguration:()Lfreemarker/template/Configuration;
      21: invokevirtual #169                // Method freemarker/template/Configuration.getWhitespaceStripping:()Z
      24: ireturn

  public boolean isWhitespaceStrippingSet();
    Code:
       0: aload_0
       1: getfield      #167                // Field whitespaceStripping:Ljava/lang/Boolean;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public void setAutoEscapingPolicy(int);
    Code:
       0: iload_1
       1: invokestatic  #170                // Method freemarker/template/_TemplateAPI.validateAutoEscapingPolicyValue:(I)V
       4: aload_0
       5: iload_1
       6: invokestatic  #159                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       9: putfield      #171                // Field autoEscapingPolicy:Ljava/lang/Integer;
      12: return

  public int getAutoEscapingPolicy();
    Code:
       0: aload_0
       1: getfield      #171                // Field autoEscapingPolicy:Ljava/lang/Integer;
       4: ifnull        17
       7: aload_0
       8: getfield      #171                // Field autoEscapingPolicy:Ljava/lang/Integer;
      11: invokevirtual #161                // Method java/lang/Integer.intValue:()I
      14: goto          24
      17: aload_0
      18: invokevirtual #111                // Method getParentConfiguration:()Lfreemarker/template/Configuration;
      21: invokevirtual #172                // Method freemarker/template/Configuration.getAutoEscapingPolicy:()I
      24: ireturn

  public boolean isAutoEscapingPolicySet();
    Code:
       0: aload_0
       1: getfield      #171                // Field autoEscapingPolicy:Ljava/lang/Integer;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public void setOutputFormat(freemarker.core.OutputFormat);
    Code:
       0: ldc           #173                // String outputFormat
       2: aload_1
       3: invokestatic  #4                  // Method freemarker/template/utility/NullArgumentException.check:(Ljava/lang/String;Ljava/lang/Object;)V
       6: aload_0
       7: aload_1
       8: putfield      #174                // Field outputFormat:Lfreemarker/core/OutputFormat;
      11: return

  public freemarker.core.OutputFormat getOutputFormat();
    Code:
       0: aload_0
       1: getfield      #174                // Field outputFormat:Lfreemarker/core/OutputFormat;
       4: ifnull        14
       7: aload_0
       8: getfield      #174                // Field outputFormat:Lfreemarker/core/OutputFormat;
      11: goto          21
      14: aload_0
      15: invokevirtual #111                // Method getParentConfiguration:()Lfreemarker/template/Configuration;
      18: invokevirtual #175                // Method freemarker/template/Configuration.getOutputFormat:()Lfreemarker/core/OutputFormat;
      21: areturn

  public boolean isOutputFormatSet();
    Code:
       0: aload_0
       1: getfield      #174                // Field outputFormat:Lfreemarker/core/OutputFormat;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public void setRecognizeStandardFileExtensions(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #166                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       5: putfield      #176                // Field recognizeStandardFileExtensions:Ljava/lang/Boolean;
       8: return

  public boolean getRecognizeStandardFileExtensions();
    Code:
       0: aload_0
       1: getfield      #176                // Field recognizeStandardFileExtensions:Ljava/lang/Boolean;
       4: ifnull        17
       7: aload_0
       8: getfield      #176                // Field recognizeStandardFileExtensions:Ljava/lang/Boolean;
      11: invokevirtual #168                // Method java/lang/Boolean.booleanValue:()Z
      14: goto          24
      17: aload_0
      18: invokevirtual #111                // Method getParentConfiguration:()Lfreemarker/template/Configuration;
      21: invokevirtual #177                // Method freemarker/template/Configuration.getRecognizeStandardFileExtensions:()Z
      24: ireturn

  public boolean isRecognizeStandardFileExtensionsSet();
    Code:
       0: aload_0
       1: getfield      #176                // Field recognizeStandardFileExtensions:Ljava/lang/Boolean;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public void setStrictSyntaxMode(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #166                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       5: putfield      #178                // Field strictSyntaxMode:Ljava/lang/Boolean;
       8: return

  public boolean getStrictSyntaxMode();
    Code:
       0: aload_0
       1: getfield      #178                // Field strictSyntaxMode:Ljava/lang/Boolean;
       4: ifnull        17
       7: aload_0
       8: getfield      #178                // Field strictSyntaxMode:Ljava/lang/Boolean;
      11: invokevirtual #168                // Method java/lang/Boolean.booleanValue:()Z
      14: goto          24
      17: aload_0
      18: invokevirtual #111                // Method getParentConfiguration:()Lfreemarker/template/Configuration;
      21: invokevirtual #179                // Method freemarker/template/Configuration.getStrictSyntaxMode:()Z
      24: ireturn

  public boolean isStrictSyntaxModeSet();
    Code:
       0: aload_0
       1: getfield      #178                // Field strictSyntaxMode:Ljava/lang/Boolean;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public void setStrictBeanModels(boolean);
    Code:
       0: new           #180                // class java/lang/UnsupportedOperationException
       3: dup
       4: new           #181                // class java/lang/StringBuilder
       7: dup
       8: invokespecial #182                // Method java/lang/StringBuilder."<init>":()V
      11: ldc           #183                // String Setting strictBeanModels on
      13: invokevirtual #184                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      16: ldc           #185                // class freemarker/core/TemplateConfiguration
      18: invokevirtual #186                // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
      21: invokevirtual #184                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: ldc           #187                // String  level isn\'t supported.
      26: invokevirtual #184                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: invokevirtual #188                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      32: invokespecial #189                // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
      35: athrow

  public java.lang.String getEncoding();
    Code:
       0: aload_0
       1: getfield      #190                // Field encoding:Ljava/lang/String;
       4: ifnull        14
       7: aload_0
       8: getfield      #190                // Field encoding:Ljava/lang/String;
      11: goto          21
      14: aload_0
      15: invokevirtual #111                // Method getParentConfiguration:()Lfreemarker/template/Configuration;
      18: invokevirtual #191                // Method freemarker/template/Configuration.getDefaultEncoding:()Ljava/lang/String;
      21: areturn

  public void setEncoding(java.lang.String);
    Code:
       0: ldc           #192                // String encoding
       2: aload_1
       3: invokestatic  #4                  // Method freemarker/template/utility/NullArgumentException.check:(Ljava/lang/String;Ljava/lang/Object;)V
       6: aload_0
       7: aload_1
       8: putfield      #190                // Field encoding:Ljava/lang/String;
      11: return

  public boolean isEncodingSet();
    Code:
       0: aload_0
       1: getfield      #190                // Field encoding:Ljava/lang/String;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public freemarker.template.Version getIncompatibleImprovements();
    Code:
       0: aload_0
       1: invokespecial #110                // Method checkParentConfigurationSet:()V
       4: aload_0
       5: invokevirtual #111                // Method getParentConfiguration:()Lfreemarker/template/Configuration;
       8: invokevirtual #14                 // Method freemarker/template/Configuration.getIncompatibleImprovements:()Lfreemarker/template/Version;
      11: areturn

  private void checkParentConfigurationSet();
    Code:
       0: aload_0
       1: getfield      #9                  // Field parentConfigurationSet:Z
       4: ifne          17
       7: new           #11                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #193                // String The TemplateConfiguration wasn\'t associated with a Configuration yet.
      13: invokespecial #13                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: return

  private boolean hasAnyConfigurableSet();
    Code:
       0: aload_0
       1: invokevirtual #21                 // Method isAPIBuiltinEnabledSet:()Z
       4: ifne          147
       7: aload_0
       8: invokevirtual #24                 // Method isArithmeticEngineSet:()Z
      11: ifne          147
      14: aload_0
      15: invokevirtual #30                 // Method isAutoFlushSet:()Z
      18: ifne          147
      21: aload_0
      22: invokevirtual #33                 // Method isBooleanFormatSet:()Z
      25: ifne          147
      28: aload_0
      29: invokevirtual #36                 // Method isClassicCompatibleSet:()Z
      32: ifne          147
      35: aload_0
      36: invokevirtual #39                 // Method isCustomDateFormatsSet:()Z
      39: ifne          147
      42: aload_0
      43: invokevirtual #43                 // Method isCustomNumberFormatsSet:()Z
      46: ifne          147
      49: aload_0
      50: invokevirtual #46                 // Method isDateFormatSet:()Z
      53: ifne          147
      56: aload_0
      57: invokevirtual #49                 // Method isDateTimeFormatSet:()Z
      60: ifne          147
      63: aload_0
      64: invokevirtual #55                 // Method isLocaleSet:()Z
      67: ifne          147
      70: aload_0
      71: invokevirtual #58                 // Method isLogTemplateExceptionsSet:()Z
      74: ifne          147
      77: aload_0
      78: invokevirtual #64                 // Method isNewBuiltinClassResolverSet:()Z
      81: ifne          147
      84: aload_0
      85: invokevirtual #67                 // Method isNumberFormatSet:()Z
      88: ifne          147
      91: aload_0
      92: invokevirtual #70                 // Method isObjectWrapperSet:()Z
      95: ifne          147
      98: aload_0
      99: invokevirtual #73                 // Method isOutputEncodingSet:()Z
     102: ifne          147
     105: aload_0
     106: invokevirtual #82                 // Method isShowErrorTipsSet:()Z
     109: ifne          147
     112: aload_0
     113: invokevirtual #85                 // Method isSQLDateAndTimeTimeZoneSet:()Z
     116: ifne          147
     119: aload_0
     120: invokevirtual #94                 // Method isTemplateExceptionHandlerSet:()Z
     123: ifne          147
     126: aload_0
     127: invokevirtual #97                 // Method isTimeFormatSet:()Z
     130: ifne          147
     133: aload_0
     134: invokevirtual #100                // Method isTimeZoneSet:()Z
     137: ifne          147
     140: aload_0
     141: invokevirtual #103                // Method isURLEscapingCharsetSet:()Z
     144: ifeq          151
     147: iconst_1
     148: goto          152
     151: iconst_0
     152: ireturn

  private java.util.Map mergeMaps(java.util.Map, java.util.Map);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aload_2
       5: areturn
       6: aload_2
       7: ifnonnull     12
      10: aload_1
      11: areturn
      12: aload_1
      13: invokeinterface #194,  1          // InterfaceMethod java/util/Map.isEmpty:()Z
      18: ifeq          23
      21: aload_2
      22: areturn
      23: aload_2
      24: invokeinterface #194,  1          // InterfaceMethod java/util/Map.isEmpty:()Z
      29: ifeq          34
      32: aload_1
      33: areturn
      34: new           #195                // class java/util/LinkedHashMap
      37: dup
      38: aload_1
      39: invokespecial #196                // Method java/util/LinkedHashMap."<init>":(Ljava/util/Map;)V
      42: astore_3
      43: aload_3
      44: aload_2
      45: invokevirtual #197                // Method java/util/LinkedHashMap.putAll:(Ljava/util/Map;)V
      48: aload_3
      49: areturn
}
