Compiled from "UnaryPlusMinusExpression.java"
final class freemarker.core.UnaryPlusMinusExpression extends freemarker.core.Expression {
  private final int TYPE_MINUS;

  private final int TYPE_PLUS;

  private final freemarker.core.Expression target;

  private final boolean isMinus;

  private static final java.lang.Integer MINUS_ONE;

  freemarker.core.UnaryPlusMinusExpression(freemarker.core.Expression, boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method freemarker/core/Expression."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field TYPE_MINUS:I
       9: aload_0
      10: iconst_1
      11: putfield      #3                  // Field TYPE_PLUS:I
      14: aload_0
      15: aload_1
      16: putfield      #4                  // Field target:Lfreemarker/core/Expression;
      19: aload_0
      20: iload_2
      21: putfield      #5                  // Field isMinus:Z
      24: return

  freemarker.template.TemplateModel _eval(freemarker.core.Environment) throws freemarker.template.TemplateException;
    Code:
       0: aconst_null
       1: astore_2
       2: aload_0
       3: getfield      #4                  // Field target:Lfreemarker/core/Expression;
       6: aload_1
       7: invokevirtual #6                  // Method freemarker/core/Expression.eval:(Lfreemarker/core/Environment;)Lfreemarker/template/TemplateModel;
      10: astore_3
      11: aload_3
      12: checkcast     #7                  // class freemarker/template/TemplateNumberModel
      15: astore_2
      16: goto          35
      19: astore        4
      21: new           #9                  // class freemarker/core/NonNumericalException
      24: dup
      25: aload_0
      26: getfield      #4                  // Field target:Lfreemarker/core/Expression;
      29: aload_3
      30: aload_1
      31: invokespecial #10                 // Method freemarker/core/NonNumericalException."<init>":(Lfreemarker/core/Expression;Lfreemarker/template/TemplateModel;Lfreemarker/core/Environment;)V
      34: athrow
      35: aload_0
      36: getfield      #5                  // Field isMinus:Z
      39: ifne          44
      42: aload_2
      43: areturn
      44: aload_0
      45: getfield      #4                  // Field target:Lfreemarker/core/Expression;
      48: aload_2
      49: aload_1
      50: invokevirtual #11                 // Method freemarker/core/Expression.assertNonNull:(Lfreemarker/template/TemplateModel;Lfreemarker/core/Environment;)V
      53: aload_2
      54: invokeinterface #12,  1           // InterfaceMethod freemarker/template/TemplateNumberModel.getAsNumber:()Ljava/lang/Number;
      59: astore        4
      61: getstatic     #13                 // Field freemarker/core/ArithmeticEngine.CONSERVATIVE_ENGINE:Lfreemarker/core/ArithmeticEngine$ConservativeEngine;
      64: getstatic     #14                 // Field MINUS_ONE:Ljava/lang/Integer;
      67: aload         4
      69: invokevirtual #15                 // Method freemarker/core/ArithmeticEngine$ConservativeEngine.multiply:(Ljava/lang/Number;Ljava/lang/Number;)Ljava/lang/Number;
      72: astore        4
      74: new           #16                 // class freemarker/template/SimpleNumber
      77: dup
      78: aload         4
      80: invokespecial #17                 // Method freemarker/template/SimpleNumber."<init>":(Ljava/lang/Number;)V
      83: areturn
    Exception table:
       from    to  target type
          11    16    19   Class java/lang/ClassCastException

  public java.lang.String getCanonicalForm();
    Code:
       0: aload_0
       1: getfield      #5                  // Field isMinus:Z
       4: ifeq          12
       7: ldc           #18                 // String -
       9: goto          14
      12: ldc           #19                 // String +
      14: astore_1
      15: new           #20                 // class java/lang/StringBuilder
      18: dup
      19: invokespecial #21                 // Method java/lang/StringBuilder."<init>":()V
      22: aload_1
      23: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: aload_0
      27: getfield      #4                  // Field target:Lfreemarker/core/Expression;
      30: invokevirtual #23                 // Method freemarker/core/Expression.getCanonicalForm:()Ljava/lang/String;
      33: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: invokevirtual #24                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      39: areturn

  java.lang.String getNodeTypeSymbol();
    Code:
       0: aload_0
       1: getfield      #5                  // Field isMinus:Z
       4: ifeq          12
       7: ldc           #25                 // String -...
       9: goto          14
      12: ldc           #26                 // String +...
      14: areturn

  boolean isLiteral();
    Code:
       0: aload_0
       1: getfield      #4                  // Field target:Lfreemarker/core/Expression;
       4: invokevirtual #27                 // Method freemarker/core/Expression.isLiteral:()Z
       7: ireturn

  protected freemarker.core.Expression deepCloneWithIdentifierReplaced_inner(java.lang.String, freemarker.core.Expression, freemarker.core.Expression$ReplacemenetState);
    Code:
       0: new           #28                 // class freemarker/core/UnaryPlusMinusExpression
       3: dup
       4: aload_0
       5: getfield      #4                  // Field target:Lfreemarker/core/Expression;
       8: aload_1
       9: aload_2
      10: aload_3
      11: invokevirtual #29                 // Method freemarker/core/Expression.deepCloneWithIdentifierReplaced:(Ljava/lang/String;Lfreemarker/core/Expression;Lfreemarker/core/Expression$ReplacemenetState;)Lfreemarker/core/Expression;
      14: aload_0
      15: getfield      #5                  // Field isMinus:Z
      18: invokespecial #30                 // Method "<init>":(Lfreemarker/core/Expression;Z)V
      21: areturn

  int getParameterCount();
    Code:
       0: iconst_2
       1: ireturn

  java.lang.Object getParameterValue(int);
    Code:
       0: iload_1
       1: lookupswitch  { // 2
                     0: 28
                     1: 33
               default: 49
          }
      28: aload_0
      29: getfield      #4                  // Field target:Lfreemarker/core/Expression;
      32: areturn
      33: aload_0
      34: getfield      #5                  // Field isMinus:Z
      37: ifeq          44
      40: iconst_0
      41: goto          45
      44: iconst_1
      45: invokestatic  #31                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      48: areturn
      49: new           #32                 // class java/lang/IndexOutOfBoundsException
      52: dup
      53: invokespecial #33                 // Method java/lang/IndexOutOfBoundsException."<init>":()V
      56: athrow

  freemarker.core.ParameterRole getParameterRole(int);
    Code:
       0: iload_1
       1: lookupswitch  { // 2
                     0: 28
                     1: 32
               default: 36
          }
      28: getstatic     #34                 // Field freemarker/core/ParameterRole.RIGHT_HAND_OPERAND:Lfreemarker/core/ParameterRole;
      31: areturn
      32: getstatic     #35                 // Field freemarker/core/ParameterRole.AST_NODE_SUBTYPE:Lfreemarker/core/ParameterRole;
      35: areturn
      36: new           #32                 // class java/lang/IndexOutOfBoundsException
      39: dup
      40: invokespecial #33                 // Method java/lang/IndexOutOfBoundsException."<init>":()V
      43: athrow

  static {};
    Code:
       0: iconst_m1
       1: invokestatic  #31                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       4: putstatic     #14                 // Field MINUS_ONE:Ljava/lang/Integer;
       7: return
}
