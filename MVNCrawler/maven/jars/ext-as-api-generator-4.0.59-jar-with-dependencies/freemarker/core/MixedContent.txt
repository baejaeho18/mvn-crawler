Compiled from "MixedContent.java"
final class freemarker.core.MixedContent extends freemarker.core.TemplateElement {
  freemarker.core.MixedContent();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method freemarker/core/TemplateElement."<init>":()V
       4: return

  void addElement(freemarker.core.TemplateElement);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method addChild:(Lfreemarker/core/TemplateElement;)V
       5: return

  void addElement(int, freemarker.core.TemplateElement);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokevirtual #3                  // Method addChild:(ILfreemarker/core/TemplateElement;)V
       6: return

  freemarker.core.TemplateElement postParseCleanup(boolean) throws freemarker.core.ParseException;
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #4                  // Method freemarker/core/TemplateElement.postParseCleanup:(Z)Lfreemarker/core/TemplateElement;
       5: pop
       6: aload_0
       7: invokevirtual #5                  // Method getChildCount:()I
      10: iconst_1
      11: if_icmpne     22
      14: aload_0
      15: iconst_0
      16: invokevirtual #6                  // Method getChild:(I)Lfreemarker/core/TemplateElement;
      19: goto          23
      22: aload_0
      23: areturn

  freemarker.core.TemplateElement[] accept(freemarker.core.Environment) throws freemarker.template.TemplateException, java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #7                  // Method getChildBuffer:()[Lfreemarker/core/TemplateElement;
       4: areturn

  protected java.lang.String dump(boolean);
    Code:
       0: iload_1
       1: ifeq          9
       4: aload_0
       5: invokevirtual #8                  // Method getChildrenCanonicalForm:()Ljava/lang/String;
       8: areturn
       9: aload_0
      10: invokevirtual #9                  // Method getParentElement:()Lfreemarker/core/TemplateElement;
      13: ifnonnull     19
      16: ldc           #10                 // String root
      18: areturn
      19: aload_0
      20: invokevirtual #11                 // Method getNodeTypeSymbol:()Ljava/lang/String;
      23: areturn

  protected boolean isOutputCacheable();
    Code:
       0: aload_0
       1: invokevirtual #5                  // Method getChildCount:()I
       4: istore_1
       5: iconst_0
       6: istore_2
       7: iload_2
       8: iload_1
       9: if_icmpge     31
      12: aload_0
      13: iload_2
      14: invokevirtual #6                  // Method getChild:(I)Lfreemarker/core/TemplateElement;
      17: invokevirtual #12                 // Method freemarker/core/TemplateElement.isOutputCacheable:()Z
      20: ifne          25
      23: iconst_0
      24: ireturn
      25: iinc          2, 1
      28: goto          7
      31: iconst_1
      32: ireturn

  java.lang.String getNodeTypeSymbol();
    Code:
       0: ldc           #13                 // String #mixed_content
       2: areturn

  int getParameterCount();
    Code:
       0: iconst_0
       1: ireturn

  java.lang.Object getParameterValue(int);
    Code:
       0: new           #14                 // class java/lang/IndexOutOfBoundsException
       3: dup
       4: invokespecial #15                 // Method java/lang/IndexOutOfBoundsException."<init>":()V
       7: athrow

  freemarker.core.ParameterRole getParameterRole(int);
    Code:
       0: new           #14                 // class java/lang/IndexOutOfBoundsException
       3: dup
       4: invokespecial #15                 // Method java/lang/IndexOutOfBoundsException."<init>":()V
       7: athrow

  boolean isIgnorable(boolean);
    Code:
       0: aload_0
       1: invokevirtual #5                  // Method getChildCount:()I
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  boolean isNestedBlockRepeater();
    Code:
       0: iconst_0
       1: ireturn
}
