Compiled from "LegacyConstructorParserConfiguration.java"
class freemarker.core.LegacyConstructorParserConfiguration implements freemarker.core.ParserConfiguration {
  private final int tagSyntax;

  private final int namingConvention;

  private final boolean whitespaceStripping;

  private final boolean strictSyntaxMode;

  private freemarker.core.ArithmeticEngine arithmeticEngine;

  private java.lang.Integer autoEscapingPolicy;

  private freemarker.core.OutputFormat outputFormat;

  private java.lang.Boolean recognizeStandardFileExtensions;

  private final freemarker.template.Version incompatibleImprovements;

  public freemarker.core.LegacyConstructorParserConfiguration(boolean, boolean, int, int, java.lang.Integer, freemarker.core.OutputFormat, java.lang.Boolean, freemarker.template.Version, freemarker.core.ArithmeticEngine);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iload_3
       6: putfield      #2                  // Field tagSyntax:I
       9: aload_0
      10: iload         4
      12: putfield      #3                  // Field namingConvention:I
      15: aload_0
      16: iload_2
      17: putfield      #4                  // Field whitespaceStripping:Z
      20: aload_0
      21: iload_1
      22: putfield      #5                  // Field strictSyntaxMode:Z
      25: aload_0
      26: aload         5
      28: putfield      #6                  // Field autoEscapingPolicy:Ljava/lang/Integer;
      31: aload_0
      32: aload         6
      34: putfield      #7                  // Field outputFormat:Lfreemarker/core/OutputFormat;
      37: aload_0
      38: aload         7
      40: putfield      #8                  // Field recognizeStandardFileExtensions:Ljava/lang/Boolean;
      43: aload_0
      44: aload         8
      46: putfield      #9                  // Field incompatibleImprovements:Lfreemarker/template/Version;
      49: aload_0
      50: aload         9
      52: putfield      #10                 // Field arithmeticEngine:Lfreemarker/core/ArithmeticEngine;
      55: return

  public int getTagSyntax();
    Code:
       0: aload_0
       1: getfield      #2                  // Field tagSyntax:I
       4: ireturn

  public int getNamingConvention();
    Code:
       0: aload_0
       1: getfield      #3                  // Field namingConvention:I
       4: ireturn

  public boolean getWhitespaceStripping();
    Code:
       0: aload_0
       1: getfield      #4                  // Field whitespaceStripping:Z
       4: ireturn

  public boolean getStrictSyntaxMode();
    Code:
       0: aload_0
       1: getfield      #5                  // Field strictSyntaxMode:Z
       4: ireturn

  public freemarker.template.Version getIncompatibleImprovements();
    Code:
       0: aload_0
       1: getfield      #9                  // Field incompatibleImprovements:Lfreemarker/template/Version;
       4: areturn

  public freemarker.core.ArithmeticEngine getArithmeticEngine();
    Code:
       0: aload_0
       1: getfield      #10                 // Field arithmeticEngine:Lfreemarker/core/ArithmeticEngine;
       4: ifnonnull     15
       7: new           #11                 // class java/lang/IllegalStateException
      10: dup
      11: invokespecial #12                 // Method java/lang/IllegalStateException."<init>":()V
      14: athrow
      15: aload_0
      16: getfield      #10                 // Field arithmeticEngine:Lfreemarker/core/ArithmeticEngine;
      19: areturn

  void setArithmeticEngineIfNotSet(freemarker.core.ArithmeticEngine);
    Code:
       0: aload_0
       1: getfield      #10                 // Field arithmeticEngine:Lfreemarker/core/ArithmeticEngine;
       4: ifnonnull     12
       7: aload_0
       8: aload_1
       9: putfield      #10                 // Field arithmeticEngine:Lfreemarker/core/ArithmeticEngine;
      12: return

  public int getAutoEscapingPolicy();
    Code:
       0: aload_0
       1: getfield      #6                  // Field autoEscapingPolicy:Ljava/lang/Integer;
       4: ifnonnull     15
       7: new           #11                 // class java/lang/IllegalStateException
      10: dup
      11: invokespecial #12                 // Method java/lang/IllegalStateException."<init>":()V
      14: athrow
      15: aload_0
      16: getfield      #6                  // Field autoEscapingPolicy:Ljava/lang/Integer;
      19: invokevirtual #13                 // Method java/lang/Integer.intValue:()I
      22: ireturn

  void setAutoEscapingPolicyIfNotSet(int);
    Code:
       0: aload_0
       1: getfield      #6                  // Field autoEscapingPolicy:Ljava/lang/Integer;
       4: ifnonnull     15
       7: aload_0
       8: iload_1
       9: invokestatic  #14                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      12: putfield      #6                  // Field autoEscapingPolicy:Ljava/lang/Integer;
      15: return

  public freemarker.core.OutputFormat getOutputFormat();
    Code:
       0: aload_0
       1: getfield      #7                  // Field outputFormat:Lfreemarker/core/OutputFormat;
       4: ifnonnull     15
       7: new           #11                 // class java/lang/IllegalStateException
      10: dup
      11: invokespecial #12                 // Method java/lang/IllegalStateException."<init>":()V
      14: athrow
      15: aload_0
      16: getfield      #7                  // Field outputFormat:Lfreemarker/core/OutputFormat;
      19: areturn

  void setOutputFormatIfNotSet(freemarker.core.OutputFormat);
    Code:
       0: aload_0
       1: getfield      #7                  // Field outputFormat:Lfreemarker/core/OutputFormat;
       4: ifnonnull     12
       7: aload_0
       8: aload_1
       9: putfield      #7                  // Field outputFormat:Lfreemarker/core/OutputFormat;
      12: return

  public boolean getRecognizeStandardFileExtensions();
    Code:
       0: aload_0
       1: getfield      #8                  // Field recognizeStandardFileExtensions:Ljava/lang/Boolean;
       4: ifnonnull     15
       7: new           #11                 // class java/lang/IllegalStateException
      10: dup
      11: invokespecial #12                 // Method java/lang/IllegalStateException."<init>":()V
      14: athrow
      15: aload_0
      16: getfield      #8                  // Field recognizeStandardFileExtensions:Ljava/lang/Boolean;
      19: invokevirtual #15                 // Method java/lang/Boolean.booleanValue:()Z
      22: ireturn

  void setRecognizeStandardFileExtensionsIfNotSet(boolean);
    Code:
       0: aload_0
       1: getfield      #8                  // Field recognizeStandardFileExtensions:Ljava/lang/Boolean;
       4: ifnonnull     15
       7: aload_0
       8: iload_1
       9: invokestatic  #16                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      12: putfield      #8                  // Field recognizeStandardFileExtensions:Ljava/lang/Boolean;
      15: return
}
