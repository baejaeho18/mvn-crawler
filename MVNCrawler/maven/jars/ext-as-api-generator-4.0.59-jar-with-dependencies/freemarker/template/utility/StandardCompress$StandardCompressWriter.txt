Compiled from "StandardCompress.java"
class freemarker.template.utility.StandardCompress$StandardCompressWriter extends java.io.Writer {
  private static final int MAX_EOL_LENGTH;

  private static final int AT_BEGINNING;

  private static final int SINGLE_LINE;

  private static final int INIT;

  private static final int SAW_CR;

  private static final int LINEBREAK_CR;

  private static final int LINEBREAK_CRLF;

  private static final int LINEBREAK_LF;

  private final java.io.Writer out;

  private final char[] buf;

  private final boolean singleLine;

  private int pos;

  private boolean inWhitespace;

  private int lineBreakState;

  public freemarker.template.utility.StandardCompress$StandardCompressWriter(java.io.Writer, int, boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/io/Writer."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field pos:I
       9: aload_0
      10: iconst_1
      11: putfield      #3                  // Field inWhitespace:Z
      14: aload_0
      15: iconst_0
      16: putfield      #5                  // Field lineBreakState:I
      19: aload_0
      20: aload_1
      21: putfield      #6                  // Field out:Ljava/io/Writer;
      24: aload_0
      25: iload_3
      26: putfield      #7                  // Field singleLine:Z
      29: aload_0
      30: iload_2
      31: newarray       char
      33: putfield      #8                  // Field buf:[C
      36: return

  public void write(char[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #8                  // Field buf:[C
       4: arraylength
       5: aload_0
       6: getfield      #2                  // Field pos:I
       9: isub
      10: iconst_2
      11: isub
      12: istore        4
      14: iload         4
      16: iload_3
      17: if_icmplt     30
      20: aload_0
      21: aload_1
      22: iload_2
      23: iload_3
      24: invokespecial #9                  // Method writeHelper:([CII)V
      27: goto          67
      30: iload         4
      32: ifgt          42
      35: aload_0
      36: invokespecial #10                 // Method flushInternal:()V
      39: goto          64
      42: aload_0
      43: aload_1
      44: iload_2
      45: iload         4
      47: invokespecial #9                  // Method writeHelper:([CII)V
      50: aload_0
      51: invokespecial #10                 // Method flushInternal:()V
      54: iload_2
      55: iload         4
      57: iadd
      58: istore_2
      59: iload_3
      60: iload         4
      62: isub
      63: istore_3
      64: goto          0
      67: return

  private void writeHelper(char[], int, int);
    Code:
       0: iload_2
       1: istore        4
       3: iload_2
       4: iload_3
       5: iadd
       6: istore        5
       8: iload         4
      10: iload         5
      12: if_icmpge     104
      15: aload_1
      16: iload         4
      18: caload
      19: istore        6
      21: iload         6
      23: invokestatic  #11                 // Method java/lang/Character.isWhitespace:(C)Z
      26: ifeq          43
      29: aload_0
      30: iconst_1
      31: putfield      #3                  // Field inWhitespace:Z
      34: aload_0
      35: iload         6
      37: invokespecial #12                 // Method updateLineBreakState:(C)V
      40: goto          98
      43: aload_0
      44: getfield      #3                  // Field inWhitespace:Z
      47: ifeq          80
      50: aload_0
      51: iconst_0
      52: putfield      #3                  // Field inWhitespace:Z
      55: aload_0
      56: invokespecial #13                 // Method writeLineBreakOrSpace:()V
      59: aload_0
      60: getfield      #8                  // Field buf:[C
      63: aload_0
      64: dup
      65: getfield      #2                  // Field pos:I
      68: dup_x1
      69: iconst_1
      70: iadd
      71: putfield      #2                  // Field pos:I
      74: iload         6
      76: castore
      77: goto          98
      80: aload_0
      81: getfield      #8                  // Field buf:[C
      84: aload_0
      85: dup
      86: getfield      #2                  // Field pos:I
      89: dup_x1
      90: iconst_1
      91: iadd
      92: putfield      #2                  // Field pos:I
      95: iload         6
      97: castore
      98: iinc          4, 1
     101: goto          8
     104: return

  private void updateLineBreakState(char);
    Code:
       0: aload_0
       1: getfield      #5                  // Field lineBreakState:I
       4: lookupswitch  { // 2
                     2: 32
                     3: 61
               default: 80
          }
      32: iload_1
      33: bipush        13
      35: if_icmpne     46
      38: aload_0
      39: iconst_3
      40: putfield      #5                  // Field lineBreakState:I
      43: goto          80
      46: iload_1
      47: bipush        10
      49: if_icmpne     80
      52: aload_0
      53: bipush        6
      55: putfield      #5                  // Field lineBreakState:I
      58: goto          80
      61: iload_1
      62: bipush        10
      64: if_icmpne     75
      67: aload_0
      68: iconst_5
      69: putfield      #5                  // Field lineBreakState:I
      72: goto          80
      75: aload_0
      76: iconst_4
      77: putfield      #5                  // Field lineBreakState:I
      80: return

  private void writeLineBreakOrSpace();
    Code:
       0: aload_0
       1: getfield      #5                  // Field lineBreakState:I
       4: tableswitch   { // 0 to 6
                     0: 108
                     1: 111
                     2: 111
                     3: 48
                     4: 48
                     5: 69
                     6: 87
               default: 129
          }
      48: aload_0
      49: getfield      #8                  // Field buf:[C
      52: aload_0
      53: dup
      54: getfield      #2                  // Field pos:I
      57: dup_x1
      58: iconst_1
      59: iadd
      60: putfield      #2                  // Field pos:I
      63: bipush        13
      65: castore
      66: goto          129
      69: aload_0
      70: getfield      #8                  // Field buf:[C
      73: aload_0
      74: dup
      75: getfield      #2                  // Field pos:I
      78: dup_x1
      79: iconst_1
      80: iadd
      81: putfield      #2                  // Field pos:I
      84: bipush        13
      86: castore
      87: aload_0
      88: getfield      #8                  // Field buf:[C
      91: aload_0
      92: dup
      93: getfield      #2                  // Field pos:I
      96: dup_x1
      97: iconst_1
      98: iadd
      99: putfield      #2                  // Field pos:I
     102: bipush        10
     104: castore
     105: goto          129
     108: goto          129
     111: aload_0
     112: getfield      #8                  // Field buf:[C
     115: aload_0
     116: dup
     117: getfield      #2                  // Field pos:I
     120: dup_x1
     121: iconst_1
     122: iadd
     123: putfield      #2                  // Field pos:I
     126: bipush        32
     128: castore
     129: aload_0
     130: aload_0
     131: getfield      #7                  // Field singleLine:Z
     134: ifeq          141
     137: iconst_1
     138: goto          142
     141: iconst_2
     142: putfield      #5                  // Field lineBreakState:I
     145: return

  private void flushInternal() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #6                  // Field out:Ljava/io/Writer;
       4: aload_0
       5: getfield      #8                  // Field buf:[C
       8: iconst_0
       9: aload_0
      10: getfield      #2                  // Field pos:I
      13: invokevirtual #14                 // Method java/io/Writer.write:([CII)V
      16: aload_0
      17: iconst_0
      18: putfield      #2                  // Field pos:I
      21: return

  public void flush() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #10                 // Method flushInternal:()V
       4: aload_0
       5: getfield      #6                  // Field out:Ljava/io/Writer;
       8: invokevirtual #15                 // Method java/io/Writer.flush:()V
      11: return

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #10                 // Method flushInternal:()V
       4: return
}
