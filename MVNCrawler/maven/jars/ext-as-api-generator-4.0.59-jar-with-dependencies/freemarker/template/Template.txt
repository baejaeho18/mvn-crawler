Compiled from "Template.java"
public class freemarker.template.Template extends freemarker.core.Configurable {
  public static final java.lang.String DEFAULT_NAMESPACE_PREFIX;

  public static final java.lang.String NO_NS_PREFIX;

  private transient freemarker.core.FMParser parser;

  private java.util.Map macros;

  private java.util.List imports;

  private freemarker.core.TemplateElement rootElement;

  private java.lang.String encoding;

  private java.lang.String defaultNS;

  private java.lang.Object customLookupCondition;

  private int actualTagSyntax;

  private int actualNamingConvention;

  private boolean autoEscaping;

  private freemarker.core.OutputFormat outputFormat;

  private final java.lang.String name;

  private final java.lang.String sourceName;

  private final java.util.ArrayList lines;

  private final freemarker.core.ParserConfiguration parserConfiguration;

  private java.util.Map prefixToNamespaceURILookup;

  private java.util.Map namespaceURIToPrefixLookup;

  private freemarker.template.Version templateLanguageVersion;

  private freemarker.template.Template(java.lang.String, java.lang.String, freemarker.template.Configuration, freemarker.core.ParserConfiguration);
    Code:
       0: aload_0
       1: aload_3
       2: invokestatic  #2                  // Method toNonNull:(Lfreemarker/template/Configuration;)Lfreemarker/template/Configuration;
       5: invokespecial #3                  // Method freemarker/core/Configurable."<init>":(Lfreemarker/core/Configurable;)V
       8: aload_0
       9: new           #4                  // class java/util/HashMap
      12: dup
      13: invokespecial #5                  // Method java/util/HashMap."<init>":()V
      16: putfield      #6                  // Field macros:Ljava/util/Map;
      19: aload_0
      20: new           #7                  // class java/util/Vector
      23: dup
      24: invokespecial #8                  // Method java/util/Vector."<init>":()V
      27: putfield      #9                  // Field imports:Ljava/util/List;
      30: aload_0
      31: new           #10                 // class java/util/ArrayList
      34: dup
      35: invokespecial #11                 // Method java/util/ArrayList."<init>":()V
      38: putfield      #1                  // Field lines:Ljava/util/ArrayList;
      41: aload_0
      42: new           #4                  // class java/util/HashMap
      45: dup
      46: invokespecial #5                  // Method java/util/HashMap."<init>":()V
      49: putfield      #12                 // Field prefixToNamespaceURILookup:Ljava/util/Map;
      52: aload_0
      53: new           #4                  // class java/util/HashMap
      56: dup
      57: invokespecial #5                  // Method java/util/HashMap."<init>":()V
      60: putfield      #13                 // Field namespaceURIToPrefixLookup:Ljava/util/Map;
      63: aload_0
      64: aload_1
      65: putfield      #14                 // Field name:Ljava/lang/String;
      68: aload_0
      69: aload_2
      70: putfield      #15                 // Field sourceName:Ljava/lang/String;
      73: aload_0
      74: aload_3
      75: invokestatic  #2                  // Method toNonNull:(Lfreemarker/template/Configuration;)Lfreemarker/template/Configuration;
      78: invokevirtual #16                 // Method freemarker/template/Configuration.getIncompatibleImprovements:()Lfreemarker/template/Version;
      81: invokestatic  #17                 // Method normalizeTemplateLanguageVersion:(Lfreemarker/template/Version;)Lfreemarker/template/Version;
      84: putfield      #18                 // Field templateLanguageVersion:Lfreemarker/template/Version;
      87: aload_0
      88: aload         4
      90: ifnull        98
      93: aload         4
      95: goto          102
      98: aload_0
      99: invokevirtual #19                 // Method getConfiguration:()Lfreemarker/template/Configuration;
     102: putfield      #20                 // Field parserConfiguration:Lfreemarker/core/ParserConfiguration;
     105: return

  private static freemarker.template.Configuration toNonNull(freemarker.template.Configuration);
    Code:
       0: aload_0
       1: ifnull        8
       4: aload_0
       5: goto          11
       8: invokestatic  #21                 // Method freemarker/template/Configuration.getDefaultConfiguration:()Lfreemarker/template/Configuration;
      11: areturn

  public freemarker.template.Template(java.lang.String, java.io.Reader, freemarker.template.Configuration) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: aload_2
       4: aload_3
       5: invokespecial #22                 // Method "<init>":(Ljava/lang/String;Ljava/lang/String;Ljava/io/Reader;Lfreemarker/template/Configuration;)V
       8: return

  public freemarker.template.Template(java.lang.String, java.lang.String, freemarker.template.Configuration) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: new           #23                 // class java/io/StringReader
       5: dup
       6: aload_2
       7: invokespecial #24                 // Method java/io/StringReader."<init>":(Ljava/lang/String;)V
      10: aload_3
      11: invokespecial #25                 // Method "<init>":(Ljava/lang/String;Ljava/io/Reader;Lfreemarker/template/Configuration;)V
      14: return

  public freemarker.template.Template(java.lang.String, java.io.Reader, freemarker.template.Configuration, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: aload_2
       4: aload_3
       5: aload         4
       7: invokespecial #26                 // Method "<init>":(Ljava/lang/String;Ljava/lang/String;Ljava/io/Reader;Lfreemarker/template/Configuration;Ljava/lang/String;)V
      10: return

  public freemarker.template.Template(java.lang.String, java.lang.String, java.io.Reader, freemarker.template.Configuration) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aconst_null
       7: invokespecial #26                 // Method "<init>":(Ljava/lang/String;Ljava/lang/String;Ljava/io/Reader;Lfreemarker/template/Configuration;Ljava/lang/String;)V
      10: return

  public freemarker.template.Template(java.lang.String, java.lang.String, java.io.Reader, freemarker.template.Configuration, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aconst_null
       7: aload         5
       9: invokespecial #27                 // Method "<init>":(Ljava/lang/String;Ljava/lang/String;Ljava/io/Reader;Lfreemarker/template/Configuration;Lfreemarker/core/ParserConfiguration;Ljava/lang/String;)V
      12: return

  public freemarker.template.Template(java.lang.String, java.lang.String, java.io.Reader, freemarker.template.Configuration, freemarker.core.ParserConfiguration, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload         4
       5: aload         5
       7: invokespecial #28                 // Method "<init>":(Ljava/lang/String;Ljava/lang/String;Lfreemarker/template/Configuration;Lfreemarker/core/ParserConfiguration;)V
      10: aload_0
      11: aload         6
      13: invokevirtual #29                 // Method setEncoding:(Ljava/lang/String;)V
      16: aload_3
      17: instanceof    #30                 // class java/io/BufferedReader
      20: ifne          42
      23: aload_3
      24: instanceof    #23                 // class java/io/StringReader
      27: ifne          42
      30: new           #30                 // class java/io/BufferedReader
      33: dup
      34: aload_3
      35: sipush        4096
      38: invokespecial #31                 // Method java/io/BufferedReader."<init>":(Ljava/io/Reader;I)V
      41: astore_3
      42: new           #32                 // class freemarker/template/Template$LineTableBuilder
      45: dup
      46: aload_0
      47: aload_3
      48: invokespecial #33                 // Method freemarker/template/Template$LineTableBuilder."<init>":(Lfreemarker/template/Template;Ljava/io/Reader;)V
      51: astore        7
      53: aload         7
      55: astore_3
      56: aload_0
      57: new           #34                 // class freemarker/core/FMParser
      60: dup
      61: aload_0
      62: aload_3
      63: aload_0
      64: invokevirtual #35                 // Method getParserConfiguration:()Lfreemarker/core/ParserConfiguration;
      67: invokespecial #36                 // Method freemarker/core/FMParser."<init>":(Lfreemarker/template/Template;Ljava/io/Reader;Lfreemarker/core/ParserConfiguration;)V
      70: putfield      #37                 // Field parser:Lfreemarker/core/FMParser;
      73: aload_0
      74: aload_0
      75: getfield      #37                 // Field parser:Lfreemarker/core/FMParser;
      78: invokevirtual #38                 // Method freemarker/core/FMParser.Root:()Lfreemarker/core/TemplateElement;
      81: putfield      #39                 // Field rootElement:Lfreemarker/core/TemplateElement;
      84: goto          105
      87: astore        8
      89: aload         7
      91: invokevirtual #41                 // Method freemarker/template/Template$LineTableBuilder.hasFailure:()Z
      94: ifne          100
      97: aload         8
      99: athrow
     100: aload_0
     101: aconst_null
     102: putfield      #39                 // Field rootElement:Lfreemarker/core/TemplateElement;
     105: aload_0
     106: aload_0
     107: getfield      #37                 // Field parser:Lfreemarker/core/FMParser;
     110: invokevirtual #42                 // Method freemarker/core/FMParser._getLastTagSyntax:()I
     113: putfield      #43                 // Field actualTagSyntax:I
     116: aload_0
     117: aload_0
     118: getfield      #37                 // Field parser:Lfreemarker/core/FMParser;
     121: invokevirtual #44                 // Method freemarker/core/FMParser._getLastNamingConvention:()I
     124: putfield      #45                 // Field actualNamingConvention:I
     127: aload_0
     128: aconst_null
     129: putfield      #37                 // Field parser:Lfreemarker/core/FMParser;
     132: goto          154
     135: astore        8
     137: aload         8
     139: aload_0
     140: invokevirtual #47                 // Method freemarker/core/TokenMgrError.toParseException:(Lfreemarker/template/Template;)Lfreemarker/core/ParseException;
     143: athrow
     144: astore        9
     146: aload_0
     147: aconst_null
     148: putfield      #37                 // Field parser:Lfreemarker/core/FMParser;
     151: aload         9
     153: athrow
     154: aload_3
     155: invokevirtual #48                 // Method java/io/Reader.close:()V
     158: goto          184
     161: astore        8
     163: aload         8
     165: aload_0
     166: invokevirtual #50                 // Method getSourceName:()Ljava/lang/String;
     169: invokevirtual #51                 // Method freemarker/core/ParseException.setTemplateName:(Ljava/lang/String;)V
     172: aload         8
     174: athrow
     175: astore        10
     177: aload_3
     178: invokevirtual #48                 // Method java/io/Reader.close:()V
     181: aload         10
     183: athrow
     184: aload         7
     186: invokevirtual #52                 // Method freemarker/template/Template$LineTableBuilder.throwFailure:()V
     189: aload_0
     190: invokestatic  #53                 // Method freemarker/debug/impl/DebuggerService.registerTemplate:(Lfreemarker/template/Template;)V
     193: aload_0
     194: aload_0
     195: getfield      #13                 // Field namespaceURIToPrefixLookup:Ljava/util/Map;
     198: invokestatic  #54                 // Method java/util/Collections.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;
     201: putfield      #13                 // Field namespaceURIToPrefixLookup:Ljava/util/Map;
     204: aload_0
     205: aload_0
     206: getfield      #12                 // Field prefixToNamespaceURILookup:Ljava/util/Map;
     209: invokestatic  #54                 // Method java/util/Collections.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;
     212: putfield      #12                 // Field prefixToNamespaceURILookup:Ljava/util/Map;
     215: return
    Exception table:
       from    to  target type
          73    84    87   Class java/lang/IndexOutOfBoundsException
          56   127   135   Class freemarker/core/TokenMgrError
          56   127   144   any
         135   146   144   any
          16   154   161   Class freemarker/core/ParseException
          16   154   175   any
         161   177   175   any

  public freemarker.template.Template(java.lang.String, java.io.Reader) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aconst_null
       4: checkcast     #55                 // class freemarker/template/Configuration
       7: invokespecial #25                 // Method "<init>":(Ljava/lang/String;Ljava/io/Reader;Lfreemarker/template/Configuration;)V
      10: return

  freemarker.template.Template(java.lang.String, freemarker.core.TemplateElement, freemarker.template.Configuration);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: aload_3
       4: aconst_null
       5: checkcast     #56                 // class freemarker/core/ParserConfiguration
       8: invokespecial #28                 // Method "<init>":(Ljava/lang/String;Ljava/lang/String;Lfreemarker/template/Configuration;Lfreemarker/core/ParserConfiguration;)V
      11: aload_0
      12: aload_2
      13: putfield      #39                 // Field rootElement:Lfreemarker/core/TemplateElement;
      16: aload_0
      17: invokestatic  #53                 // Method freemarker/debug/impl/DebuggerService.registerTemplate:(Lfreemarker/template/Template;)V
      20: return

  public static freemarker.template.Template getPlainTextTemplate(java.lang.String, java.lang.String, freemarker.template.Configuration);
    Code:
       0: aload_0
       1: aconst_null
       2: aload_1
       3: aload_2
       4: invokestatic  #57                 // Method getPlainTextTemplate:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lfreemarker/template/Configuration;)Lfreemarker/template/Template;
       7: areturn

  public static freemarker.template.Template getPlainTextTemplate(java.lang.String, java.lang.String, java.lang.String, freemarker.template.Configuration);
    Code:
       0: new           #58                 // class freemarker/template/Template
       3: dup
       4: aload_0
       5: aload_1
       6: new           #23                 // class java/io/StringReader
       9: dup
      10: ldc           #59                 // String X
      12: invokespecial #24                 // Method java/io/StringReader."<init>":(Ljava/lang/String;)V
      15: aload_3
      16: invokespecial #22                 // Method "<init>":(Ljava/lang/String;Ljava/lang/String;Ljava/io/Reader;Lfreemarker/template/Configuration;)V
      19: astore        4
      21: goto          38
      24: astore        5
      26: new           #61                 // class freemarker/core/BugException
      29: dup
      30: ldc           #62                 // String Plain text template creation failed
      32: aload         5
      34: invokespecial #63                 // Method freemarker/core/BugException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      37: athrow
      38: aload         4
      40: getfield      #39                 // Field rootElement:Lfreemarker/core/TemplateElement;
      43: checkcast     #64                 // class freemarker/core/TextBlock
      46: aload_2
      47: invokestatic  #65                 // Method freemarker/core/_CoreAPI.replaceText:(Lfreemarker/core/TextBlock;Ljava/lang/String;)V
      50: aload         4
      52: invokestatic  #53                 // Method freemarker/debug/impl/DebuggerService.registerTemplate:(Lfreemarker/template/Template;)V
      55: aload         4
      57: areturn
    Exception table:
       from    to  target type
           0    21    24   Class java/io/IOException

  private static freemarker.template.Version normalizeTemplateLanguageVersion(freemarker.template.Version);
    Code:
       0: aload_0
       1: invokestatic  #66                 // Method freemarker/template/_TemplateAPI.checkVersionNotNullAndSupported:(Lfreemarker/template/Version;)V
       4: aload_0
       5: invokevirtual #67                 // Method freemarker/template/Version.intValue:()I
       8: istore_1
       9: iload_1
      10: getstatic     #68                 // Field freemarker/template/_TemplateAPI.VERSION_INT_2_3_19:I
      13: if_icmpge     20
      16: getstatic     #69                 // Field freemarker/template/Configuration.VERSION_2_3_0:Lfreemarker/template/Version;
      19: areturn
      20: iload_1
      21: getstatic     #70                 // Field freemarker/template/_TemplateAPI.VERSION_INT_2_3_21:I
      24: if_icmple     31
      27: getstatic     #71                 // Field freemarker/template/Configuration.VERSION_2_3_21:Lfreemarker/template/Version;
      30: areturn
      31: aload_0
      32: areturn

  public void process(java.lang.Object, java.io.Writer) throws freemarker.template.TemplateException, java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aconst_null
       4: invokevirtual #72                 // Method createProcessingEnvironment:(Ljava/lang/Object;Ljava/io/Writer;Lfreemarker/template/ObjectWrapper;)Lfreemarker/core/Environment;
       7: invokevirtual #73                 // Method freemarker/core/Environment.process:()V
      10: return

  public void process(java.lang.Object, java.io.Writer, freemarker.template.ObjectWrapper, freemarker.template.TemplateNodeModel) throws freemarker.template.TemplateException, java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokevirtual #72                 // Method createProcessingEnvironment:(Ljava/lang/Object;Ljava/io/Writer;Lfreemarker/template/ObjectWrapper;)Lfreemarker/core/Environment;
       7: astore        5
       9: aload         4
      11: ifnull        21
      14: aload         5
      16: aload         4
      18: invokevirtual #74                 // Method freemarker/core/Environment.setCurrentVisitorNode:(Lfreemarker/template/TemplateNodeModel;)V
      21: aload         5
      23: invokevirtual #73                 // Method freemarker/core/Environment.process:()V
      26: return

  public void process(java.lang.Object, java.io.Writer, freemarker.template.ObjectWrapper) throws freemarker.template.TemplateException, java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokevirtual #72                 // Method createProcessingEnvironment:(Ljava/lang/Object;Ljava/io/Writer;Lfreemarker/template/ObjectWrapper;)Lfreemarker/core/Environment;
       7: invokevirtual #73                 // Method freemarker/core/Environment.process:()V
      10: return

  public freemarker.core.Environment createProcessingEnvironment(java.lang.Object, java.io.Writer, freemarker.template.ObjectWrapper) throws freemarker.template.TemplateException, java.io.IOException;
    Code:
       0: aload_1
       1: instanceof    #75                 // class freemarker/template/TemplateHashModel
       4: ifeq          16
       7: aload_1
       8: checkcast     #75                 // class freemarker/template/TemplateHashModel
      11: astore        4
      13: goto          180
      16: aload_3
      17: ifnonnull     25
      20: aload_0
      21: invokevirtual #76                 // Method getObjectWrapper:()Lfreemarker/template/ObjectWrapper;
      24: astore_3
      25: aload_1
      26: ifnonnull     42
      29: new           #77                 // class freemarker/template/SimpleHash
      32: dup
      33: aload_3
      34: invokespecial #78                 // Method freemarker/template/SimpleHash."<init>":(Lfreemarker/template/ObjectWrapper;)V
      37: astore        4
      39: goto          180
      42: aload_3
      43: aload_1
      44: invokeinterface #79,  2           // InterfaceMethod freemarker/template/ObjectWrapper.wrap:(Ljava/lang/Object;)Lfreemarker/template/TemplateModel;
      49: astore        5
      51: aload         5
      53: instanceof    #75                 // class freemarker/template/TemplateHashModel
      56: ifeq          69
      59: aload         5
      61: checkcast     #75                 // class freemarker/template/TemplateHashModel
      64: astore        4
      66: goto          180
      69: aload         5
      71: ifnonnull     122
      74: new           #80                 // class java/lang/IllegalArgumentException
      77: dup
      78: new           #81                 // class java/lang/StringBuilder
      81: dup
      82: invokespecial #82                 // Method java/lang/StringBuilder."<init>":()V
      85: aload_3
      86: invokevirtual #83                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      89: invokevirtual #84                 // Method java/lang/Class.getName:()Ljava/lang/String;
      92: invokevirtual #85                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      95: ldc           #86                 // String  converted
      97: invokevirtual #85                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     100: aload_1
     101: invokevirtual #83                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
     104: invokevirtual #84                 // Method java/lang/Class.getName:()Ljava/lang/String;
     107: invokevirtual #85                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     110: ldc           #87                 // String  to null.
     112: invokevirtual #85                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     115: invokevirtual #88                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     118: invokespecial #89                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     121: athrow
     122: new           #80                 // class java/lang/IllegalArgumentException
     125: dup
     126: new           #81                 // class java/lang/StringBuilder
     129: dup
     130: invokespecial #82                 // Method java/lang/StringBuilder."<init>":()V
     133: aload_3
     134: invokevirtual #83                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
     137: invokevirtual #84                 // Method java/lang/Class.getName:()Ljava/lang/String;
     140: invokevirtual #85                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     143: ldc           #90                 // String  didn\'t convert
     145: invokevirtual #85                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     148: aload_1
     149: invokevirtual #83                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
     152: invokevirtual #84                 // Method java/lang/Class.getName:()Ljava/lang/String;
     155: invokevirtual #85                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     158: ldc           #91                 // String  to a TemplateHashModel. Generally, you want to use a Map<String, Object> or a
     160: invokevirtual #85                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     163: ldc           #92                 // String JavaBean as the root-map (aka. data-model) parameter. The Map key-s or JavaBean
     165: invokevirtual #85                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     168: ldc           #93                 // String property names will be the variable names in the template.
     170: invokevirtual #85                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     173: invokevirtual #88                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     176: invokespecial #89                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     179: athrow
     180: new           #94                 // class freemarker/core/Environment
     183: dup
     184: aload_0
     185: aload         4
     187: aload_2
     188: invokespecial #95                 // Method freemarker/core/Environment."<init>":(Lfreemarker/template/Template;Lfreemarker/template/TemplateHashModel;Ljava/io/Writer;)V
     191: areturn

  public freemarker.core.Environment createProcessingEnvironment(java.lang.Object, java.io.Writer) throws freemarker.template.TemplateException, java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aconst_null
       4: invokevirtual #72                 // Method createProcessingEnvironment:(Ljava/lang/Object;Ljava/io/Writer;Lfreemarker/template/ObjectWrapper;)Lfreemarker/core/Environment;
       7: areturn

  public java.lang.String toString();
    Code:
       0: new           #96                 // class java/io/StringWriter
       3: dup
       4: invokespecial #97                 // Method java/io/StringWriter."<init>":()V
       7: astore_1
       8: aload_0
       9: aload_1
      10: invokevirtual #98                 // Method dump:(Ljava/io/Writer;)V
      13: goto          29
      16: astore_2
      17: new           #99                 // class java/lang/RuntimeException
      20: dup
      21: aload_2
      22: invokevirtual #100                // Method java/io/IOException.getMessage:()Ljava/lang/String;
      25: invokespecial #101                // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;)V
      28: athrow
      29: aload_1
      30: invokevirtual #102                // Method java/io/StringWriter.toString:()Ljava/lang/String;
      33: areturn
    Exception table:
       from    to  target type
           8    13    16   Class java/io/IOException

  public java.lang.String getName();
    Code:
       0: aload_0
       1: getfield      #14                 // Field name:Ljava/lang/String;
       4: areturn

  public java.lang.String getSourceName();
    Code:
       0: aload_0
       1: getfield      #15                 // Field sourceName:Ljava/lang/String;
       4: ifnull        14
       7: aload_0
       8: getfield      #15                 // Field sourceName:Ljava/lang/String;
      11: goto          18
      14: aload_0
      15: invokevirtual #103                // Method getName:()Ljava/lang/String;
      18: areturn

  public freemarker.template.Configuration getConfiguration();
    Code:
       0: aload_0
       1: invokevirtual #104                // Method getParent:()Lfreemarker/core/Configurable;
       4: checkcast     #55                 // class freemarker/template/Configuration
       7: areturn

  public freemarker.core.ParserConfiguration getParserConfiguration();
    Code:
       0: aload_0
       1: getfield      #20                 // Field parserConfiguration:Lfreemarker/core/ParserConfiguration;
       4: areturn

  freemarker.template.Version getTemplateLanguageVersion();
    Code:
       0: aload_0
       1: getfield      #18                 // Field templateLanguageVersion:Lfreemarker/template/Version;
       4: areturn

  public void setEncoding(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #105                // Field encoding:Ljava/lang/String;
       5: return

  public java.lang.String getEncoding();
    Code:
       0: aload_0
       1: getfield      #105                // Field encoding:Ljava/lang/String;
       4: areturn

  public java.lang.Object getCustomLookupCondition();
    Code:
       0: aload_0
       1: getfield      #106                // Field customLookupCondition:Ljava/lang/Object;
       4: areturn

  public void setCustomLookupCondition(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #106                // Field customLookupCondition:Ljava/lang/Object;
       5: return

  public int getActualTagSyntax();
    Code:
       0: aload_0
       1: getfield      #43                 // Field actualTagSyntax:I
       4: ireturn

  public int getActualNamingConvention();
    Code:
       0: aload_0
       1: getfield      #45                 // Field actualNamingConvention:I
       4: ireturn

  public freemarker.core.OutputFormat getOutputFormat();
    Code:
       0: aload_0
       1: getfield      #107                // Field outputFormat:Lfreemarker/core/OutputFormat;
       4: areturn

  void setOutputFormat(freemarker.core.OutputFormat);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #107                // Field outputFormat:Lfreemarker/core/OutputFormat;
       5: return

  public boolean getAutoEscaping();
    Code:
       0: aload_0
       1: getfield      #108                // Field autoEscaping:Z
       4: ireturn

  void setAutoEscaping(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #108                // Field autoEscaping:Z
       5: return

  public void dump(java.io.PrintStream);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #39                 // Field rootElement:Lfreemarker/core/TemplateElement;
       5: invokevirtual #109                // Method freemarker/core/TemplateElement.getCanonicalForm:()Ljava/lang/String;
       8: invokevirtual #110                // Method java/io/PrintStream.print:(Ljava/lang/String;)V
      11: return

  public void dump(java.io.Writer) throws java.io.IOException;
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #39                 // Field rootElement:Lfreemarker/core/TemplateElement;
       5: invokevirtual #109                // Method freemarker/core/TemplateElement.getCanonicalForm:()Ljava/lang/String;
       8: invokevirtual #111                // Method java/io/Writer.write:(Ljava/lang/String;)V
      11: return

  public void addMacro(freemarker.core.Macro);
    Code:
       0: aload_0
       1: getfield      #6                  // Field macros:Ljava/util/Map;
       4: aload_1
       5: invokevirtual #112                // Method freemarker/core/Macro.getName:()Ljava/lang/String;
       8: aload_1
       9: invokeinterface #113,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      14: pop
      15: return

  public void addImport(freemarker.core.LibraryLoad);
    Code:
       0: aload_0
       1: getfield      #9                  // Field imports:Ljava/util/List;
       4: aload_1
       5: invokeinterface #114,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      10: pop
      11: return

  public java.lang.String getSource(int, int, int, int);
    Code:
       0: iload_2
       1: iconst_1
       2: if_icmplt     11
       5: iload         4
       7: iconst_1
       8: if_icmpge     13
      11: aconst_null
      12: areturn
      13: iinc          2, -1
      16: iinc          1, -1
      19: iinc          3, -1
      22: iinc          4, -1
      25: new           #81                 // class java/lang/StringBuilder
      28: dup
      29: invokespecial #82                 // Method java/lang/StringBuilder."<init>":()V
      32: astore        5
      34: iload_2
      35: istore        6
      37: iload         6
      39: iload         4
      41: if_icmpgt     77
      44: iload         6
      46: aload_0
      47: getfield      #1                  // Field lines:Ljava/util/ArrayList;
      50: invokevirtual #115                // Method java/util/ArrayList.size:()I
      53: if_icmpge     71
      56: aload         5
      58: aload_0
      59: getfield      #1                  // Field lines:Ljava/util/ArrayList;
      62: iload         6
      64: invokevirtual #116                // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
      67: invokevirtual #117                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      70: pop
      71: iinc          6, 1
      74: goto          37
      77: aload_0
      78: getfield      #1                  // Field lines:Ljava/util/ArrayList;
      81: iload         4
      83: invokevirtual #116                // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
      86: invokevirtual #118                // Method java/lang/Object.toString:()Ljava/lang/String;
      89: invokevirtual #119                // Method java/lang/String.length:()I
      92: istore        6
      94: iload         6
      96: iload_3
      97: isub
      98: iconst_1
      99: isub
     100: istore        7
     102: aload         5
     104: iconst_0
     105: iload_1
     106: invokevirtual #120                // Method java/lang/StringBuilder.delete:(II)Ljava/lang/StringBuilder;
     109: pop
     110: aload         5
     112: aload         5
     114: invokevirtual #121                // Method java/lang/StringBuilder.length:()I
     117: iload         7
     119: isub
     120: aload         5
     122: invokevirtual #121                // Method java/lang/StringBuilder.length:()I
     125: invokevirtual #120                // Method java/lang/StringBuilder.delete:(II)Ljava/lang/StringBuilder;
     128: pop
     129: aload         5
     131: invokevirtual #88                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     134: areturn

  public freemarker.core.TemplateElement getRootTreeNode();
    Code:
       0: aload_0
       1: getfield      #39                 // Field rootElement:Lfreemarker/core/TemplateElement;
       4: areturn

  public java.util.Map getMacros();
    Code:
       0: aload_0
       1: getfield      #6                  // Field macros:Ljava/util/Map;
       4: areturn

  public java.util.List getImports();
    Code:
       0: aload_0
       1: getfield      #9                  // Field imports:Ljava/util/List;
       4: areturn

  public void addPrefixNSMapping(java.lang.String, java.lang.String);
    Code:
       0: aload_2
       1: invokevirtual #119                // Method java/lang/String.length:()I
       4: ifne          17
       7: new           #80                 // class java/lang/IllegalArgumentException
      10: dup
      11: ldc           #122                // String Cannot map empty string URI
      13: invokespecial #89                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_1
      18: invokevirtual #119                // Method java/lang/String.length:()I
      21: ifne          34
      24: new           #80                 // class java/lang/IllegalArgumentException
      27: dup
      28: ldc           #123                // String Cannot map empty string prefix
      30: invokespecial #89                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      33: athrow
      34: aload_1
      35: ldc           #124                // String N
      37: invokevirtual #125                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      40: ifeq          75
      43: new           #80                 // class java/lang/IllegalArgumentException
      46: dup
      47: new           #81                 // class java/lang/StringBuilder
      50: dup
      51: invokespecial #82                 // Method java/lang/StringBuilder."<init>":()V
      54: ldc           #126                // String The prefix:
      56: invokevirtual #85                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      59: aload_1
      60: invokevirtual #85                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      63: ldc           #127                // String  cannot be registered, it\'s reserved for special internal use.
      65: invokevirtual #85                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      68: invokevirtual #88                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      71: invokespecial #89                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      74: athrow
      75: aload_0
      76: getfield      #12                 // Field prefixToNamespaceURILookup:Ljava/util/Map;
      79: aload_1
      80: invokeinterface #128,  2          // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      85: ifeq          120
      88: new           #80                 // class java/lang/IllegalArgumentException
      91: dup
      92: new           #81                 // class java/lang/StringBuilder
      95: dup
      96: invokespecial #82                 // Method java/lang/StringBuilder."<init>":()V
      99: ldc           #129                // String The prefix: \'
     101: invokevirtual #85                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     104: aload_1
     105: invokevirtual #85                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     108: ldc           #130                // String \' was repeated. This is illegal.
     110: invokevirtual #85                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     113: invokevirtual #88                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     116: invokespecial #89                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     119: athrow
     120: aload_0
     121: getfield      #13                 // Field namespaceURIToPrefixLookup:Ljava/util/Map;
     124: aload_2
     125: invokeinterface #128,  2          // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
     130: ifeq          165
     133: new           #80                 // class java/lang/IllegalArgumentException
     136: dup
     137: new           #81                 // class java/lang/StringBuilder
     140: dup
     141: invokespecial #82                 // Method java/lang/StringBuilder."<init>":()V
     144: ldc           #131                // String The namespace URI:
     146: invokevirtual #85                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     149: aload_2
     150: invokevirtual #85                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     153: ldc           #132                // String  cannot be mapped to 2 different prefixes.
     155: invokevirtual #85                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     158: invokevirtual #88                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     161: invokespecial #89                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     164: athrow
     165: aload_1
     166: ldc           #133                // String D
     168: invokevirtual #125                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     171: ifeq          182
     174: aload_0
     175: aload_2
     176: putfield      #134                // Field defaultNS:Ljava/lang/String;
     179: goto          206
     182: aload_0
     183: getfield      #12                 // Field prefixToNamespaceURILookup:Ljava/util/Map;
     186: aload_1
     187: aload_2
     188: invokeinterface #113,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     193: pop
     194: aload_0
     195: getfield      #13                 // Field namespaceURIToPrefixLookup:Ljava/util/Map;
     198: aload_2
     199: aload_1
     200: invokeinterface #113,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     205: pop
     206: return

  public java.lang.String getDefaultNS();
    Code:
       0: aload_0
       1: getfield      #134                // Field defaultNS:Ljava/lang/String;
       4: areturn

  public java.lang.String getNamespaceForPrefix(java.lang.String);
    Code:
       0: aload_1
       1: ldc           #135                // String
       3: invokevirtual #125                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
       6: ifeq          26
       9: aload_0
      10: getfield      #134                // Field defaultNS:Ljava/lang/String;
      13: ifnonnull     21
      16: ldc           #135                // String
      18: goto          25
      21: aload_0
      22: getfield      #134                // Field defaultNS:Ljava/lang/String;
      25: areturn
      26: aload_0
      27: getfield      #12                 // Field prefixToNamespaceURILookup:Ljava/util/Map;
      30: aload_1
      31: invokeinterface #136,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      36: checkcast     #137                // class java/lang/String
      39: areturn

  public java.lang.String getPrefixForNamespace(java.lang.String);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: areturn
       6: aload_1
       7: invokevirtual #119                // Method java/lang/String.length:()I
      10: ifne          28
      13: aload_0
      14: getfield      #134                // Field defaultNS:Ljava/lang/String;
      17: ifnonnull     25
      20: ldc           #135                // String
      22: goto          27
      25: ldc           #124                // String N
      27: areturn
      28: aload_1
      29: aload_0
      30: getfield      #134                // Field defaultNS:Ljava/lang/String;
      33: invokevirtual #125                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      36: ifeq          42
      39: ldc           #135                // String
      41: areturn
      42: aload_0
      43: getfield      #13                 // Field namespaceURIToPrefixLookup:Ljava/util/Map;
      46: aload_1
      47: invokeinterface #136,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      52: checkcast     #137                // class java/lang/String
      55: areturn

  public java.lang.String getPrefixedName(java.lang.String, java.lang.String);
    Code:
       0: aload_2
       1: ifnull        11
       4: aload_2
       5: invokevirtual #119                // Method java/lang/String.length:()I
       8: ifne          40
      11: aload_0
      12: getfield      #134                // Field defaultNS:Ljava/lang/String;
      15: ifnull        38
      18: new           #81                 // class java/lang/StringBuilder
      21: dup
      22: invokespecial #82                 // Method java/lang/StringBuilder."<init>":()V
      25: ldc           #138                // String N:
      27: invokevirtual #85                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: aload_1
      31: invokevirtual #85                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      34: invokevirtual #88                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      37: areturn
      38: aload_1
      39: areturn
      40: aload_2
      41: aload_0
      42: getfield      #134                // Field defaultNS:Ljava/lang/String;
      45: invokevirtual #125                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      48: ifeq          53
      51: aload_1
      52: areturn
      53: aload_0
      54: aload_2
      55: invokevirtual #139                // Method getPrefixForNamespace:(Ljava/lang/String;)Ljava/lang/String;
      58: astore_3
      59: aload_3
      60: ifnonnull     65
      63: aconst_null
      64: areturn
      65: new           #81                 // class java/lang/StringBuilder
      68: dup
      69: invokespecial #82                 // Method java/lang/StringBuilder."<init>":()V
      72: aload_3
      73: invokevirtual #85                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      76: ldc           #140                // String :
      78: invokevirtual #85                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      81: aload_1
      82: invokevirtual #85                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      85: invokevirtual #88                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      88: areturn

  public javax.swing.tree.TreePath containingElements(int, int);
    Code:
       0: new           #10                 // class java/util/ArrayList
       3: dup
       4: invokespecial #11                 // Method java/util/ArrayList."<init>":()V
       7: astore_3
       8: aload_0
       9: getfield      #39                 // Field rootElement:Lfreemarker/core/TemplateElement;
      12: astore        4
      14: aload         4
      16: iload_1
      17: iload_2
      18: invokevirtual #141                // Method freemarker/core/TemplateElement.contains:(II)Z
      21: ifeq          83
      24: aload_3
      25: aload         4
      27: invokevirtual #142                // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
      30: pop
      31: aload         4
      33: invokevirtual #143                // Method freemarker/core/TemplateElement.children:()Ljava/util/Enumeration;
      36: astore        5
      38: aload         5
      40: invokeinterface #144,  1          // InterfaceMethod java/util/Enumeration.hasMoreElements:()Z
      45: ifeq          80
      48: aload         5
      50: invokeinterface #145,  1          // InterfaceMethod java/util/Enumeration.nextElement:()Ljava/lang/Object;
      55: checkcast     #146                // class freemarker/core/TemplateElement
      58: astore        6
      60: aload         6
      62: iload_1
      63: iload_2
      64: invokevirtual #141                // Method freemarker/core/TemplateElement.contains:(II)Z
      67: ifeq          77
      70: aload         6
      72: astore        4
      74: goto          14
      77: goto          38
      80: goto          83
      83: aload_3
      84: invokevirtual #147                // Method java/util/ArrayList.isEmpty:()Z
      87: ifeq          92
      90: aconst_null
      91: areturn
      92: new           #148                // class javax/swing/tree/TreePath
      95: dup
      96: aload_3
      97: invokevirtual #149                // Method java/util/ArrayList.toArray:()[Ljava/lang/Object;
     100: invokespecial #150                // Method javax/swing/tree/TreePath."<init>":([Ljava/lang/Object;)V
     103: areturn

  static java.util.ArrayList access$000(freemarker.template.Template);
    Code:
       0: aload_0
       1: getfield      #1                  // Field lines:Ljava/util/ArrayList;
       4: areturn
}
