Compiled from "ModelCache.java"
public abstract class freemarker.ext.util.ModelCache {
  private boolean useCache;

  private java.util.Map modelCache;

  private java.lang.ref.ReferenceQueue refQueue;

  protected freemarker.ext.util.ModelCache();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field useCache:Z
       9: aload_0
      10: aconst_null
      11: putfield      #3                  // Field modelCache:Ljava/util/Map;
      14: aload_0
      15: aconst_null
      16: putfield      #4                  // Field refQueue:Ljava/lang/ref/ReferenceQueue;
      19: return

  public synchronized void setUseCache(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field useCache:Z
       5: iload_1
       6: ifeq          34
       9: aload_0
      10: new           #5                  // class freemarker/ext/util/IdentityHashMap
      13: dup
      14: invokespecial #6                  // Method freemarker/ext/util/IdentityHashMap."<init>":()V
      17: putfield      #3                  // Field modelCache:Ljava/util/Map;
      20: aload_0
      21: new           #7                  // class java/lang/ref/ReferenceQueue
      24: dup
      25: invokespecial #8                  // Method java/lang/ref/ReferenceQueue."<init>":()V
      28: putfield      #4                  // Field refQueue:Ljava/lang/ref/ReferenceQueue;
      31: goto          44
      34: aload_0
      35: aconst_null
      36: putfield      #3                  // Field modelCache:Ljava/util/Map;
      39: aload_0
      40: aconst_null
      41: putfield      #4                  // Field refQueue:Ljava/lang/ref/ReferenceQueue;
      44: return

  public synchronized boolean getUseCache();
    Code:
       0: aload_0
       1: getfield      #2                  // Field useCache:Z
       4: ireturn

  public freemarker.template.TemplateModel getInstance(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #9                  // class freemarker/template/TemplateModel
       4: ifeq          12
       7: aload_1
       8: checkcast     #9                  // class freemarker/template/TemplateModel
      11: areturn
      12: aload_1
      13: instanceof    #10                 // class freemarker/template/TemplateModelAdapter
      16: ifeq          29
      19: aload_1
      20: checkcast     #10                 // class freemarker/template/TemplateModelAdapter
      23: invokeinterface #11,  1           // InterfaceMethod freemarker/template/TemplateModelAdapter.getTemplateModel:()Lfreemarker/template/TemplateModel;
      28: areturn
      29: aload_0
      30: getfield      #2                  // Field useCache:Z
      33: ifeq          68
      36: aload_0
      37: aload_1
      38: invokevirtual #12                 // Method isCacheable:(Ljava/lang/Object;)Z
      41: ifeq          68
      44: aload_0
      45: aload_1
      46: invokespecial #13                 // Method lookup:(Ljava/lang/Object;)Lfreemarker/template/TemplateModel;
      49: astore_2
      50: aload_2
      51: ifnonnull     66
      54: aload_0
      55: aload_1
      56: invokevirtual #14                 // Method create:(Ljava/lang/Object;)Lfreemarker/template/TemplateModel;
      59: astore_2
      60: aload_0
      61: aload_2
      62: aload_1
      63: invokespecial #15                 // Method register:(Lfreemarker/template/TemplateModel;Ljava/lang/Object;)V
      66: aload_2
      67: areturn
      68: aload_0
      69: aload_1
      70: invokevirtual #14                 // Method create:(Ljava/lang/Object;)Lfreemarker/template/TemplateModel;
      73: areturn

  protected abstract freemarker.template.TemplateModel create(java.lang.Object);

  protected abstract boolean isCacheable(java.lang.Object);

  public void clearCache();
    Code:
       0: aload_0
       1: getfield      #3                  // Field modelCache:Ljava/util/Map;
       4: ifnull        33
       7: aload_0
       8: getfield      #3                  // Field modelCache:Ljava/util/Map;
      11: dup
      12: astore_1
      13: monitorenter
      14: aload_0
      15: getfield      #3                  // Field modelCache:Ljava/util/Map;
      18: invokeinterface #16,  1           // InterfaceMethod java/util/Map.clear:()V
      23: aload_1
      24: monitorexit
      25: goto          33
      28: astore_2
      29: aload_1
      30: monitorexit
      31: aload_2
      32: athrow
      33: return
    Exception table:
       from    to  target type
          14    25    28   any
          28    31    28   any

  private final freemarker.template.TemplateModel lookup(java.lang.Object);
    Code:
       0: aconst_null
       1: astore_2
       2: aload_0
       3: getfield      #3                  // Field modelCache:Ljava/util/Map;
       6: dup
       7: astore_3
       8: monitorenter
       9: aload_0
      10: getfield      #3                  // Field modelCache:Ljava/util/Map;
      13: aload_1
      14: invokeinterface #17,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      19: checkcast     #18                 // class freemarker/ext/util/ModelCache$ModelReference
      22: astore_2
      23: aload_3
      24: monitorexit
      25: goto          35
      28: astore        4
      30: aload_3
      31: monitorexit
      32: aload         4
      34: athrow
      35: aload_2
      36: ifnull        44
      39: aload_2
      40: invokevirtual #19                 // Method freemarker/ext/util/ModelCache$ModelReference.getModel:()Lfreemarker/template/TemplateModel;
      43: areturn
      44: aconst_null
      45: areturn
    Exception table:
       from    to  target type
           9    25    28   any
          28    32    28   any

  private final void register(freemarker.template.TemplateModel, java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #3                  // Field modelCache:Ljava/util/Map;
       4: dup
       5: astore_3
       6: monitorenter
       7: aload_0
       8: getfield      #4                  // Field refQueue:Ljava/lang/ref/ReferenceQueue;
      11: invokevirtual #20                 // Method java/lang/ref/ReferenceQueue.poll:()Ljava/lang/ref/Reference;
      14: checkcast     #18                 // class freemarker/ext/util/ModelCache$ModelReference
      17: astore        4
      19: aload         4
      21: ifnonnull     27
      24: goto          45
      27: aload_0
      28: getfield      #3                  // Field modelCache:Ljava/util/Map;
      31: aload         4
      33: getfield      #21                 // Field freemarker/ext/util/ModelCache$ModelReference.object:Ljava/lang/Object;
      36: invokeinterface #22,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      41: pop
      42: goto          7
      45: aload_0
      46: getfield      #3                  // Field modelCache:Ljava/util/Map;
      49: aload_2
      50: new           #18                 // class freemarker/ext/util/ModelCache$ModelReference
      53: dup
      54: aload_1
      55: aload_2
      56: aload_0
      57: getfield      #4                  // Field refQueue:Ljava/lang/ref/ReferenceQueue;
      60: invokespecial #23                 // Method freemarker/ext/util/ModelCache$ModelReference."<init>":(Lfreemarker/template/TemplateModel;Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V
      63: invokeinterface #24,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      68: pop
      69: aload_3
      70: monitorexit
      71: goto          81
      74: astore        5
      76: aload_3
      77: monitorexit
      78: aload         5
      80: athrow
      81: return
    Exception table:
       from    to  target type
           7    71    74   any
          74    78    74   any
}
