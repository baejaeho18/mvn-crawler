Compiled from "Namespaces.java"
class freemarker.ext.xml.Namespaces implements freemarker.template.TemplateMethodModel,java.lang.Cloneable {
  private java.util.HashMap namespaces;

  private boolean shared;

  freemarker.ext.xml.Namespaces();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/HashMap
       8: dup
       9: invokespecial #3                  // Method java/util/HashMap."<init>":()V
      12: putfield      #4                  // Field namespaces:Ljava/util/HashMap;
      15: aload_0
      16: getfield      #4                  // Field namespaces:Ljava/util/HashMap;
      19: ldc           #5                  // String
      21: ldc           #5                  // String
      23: invokevirtual #6                  // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      26: pop
      27: aload_0
      28: getfield      #4                  // Field namespaces:Ljava/util/HashMap;
      31: ldc           #7                  // String xml
      33: ldc           #8                  // String http://www.w3.org/XML/1998/namespace
      35: invokevirtual #6                  // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      38: pop
      39: aload_0
      40: iconst_0
      41: putfield      #9                  // Field shared:Z
      44: return

  public java.lang.Object clone();
    Code:
       0: aload_0
       1: invokespecial #10                 // Method java/lang/Object.clone:()Ljava/lang/Object;
       4: checkcast     #11                 // class freemarker/ext/xml/Namespaces
       7: astore_1
       8: aload_1
       9: aload_0
      10: getfield      #4                  // Field namespaces:Ljava/util/HashMap;
      13: invokevirtual #12                 // Method java/util/HashMap.clone:()Ljava/lang/Object;
      16: checkcast     #2                  // class java/util/HashMap
      19: putfield      #4                  // Field namespaces:Ljava/util/HashMap;
      22: aload_1
      23: iconst_0
      24: putfield      #9                  // Field shared:Z
      27: aload_1
      28: areturn
      29: astore_1
      30: new           #14                 // class java/lang/Error
      33: dup
      34: invokespecial #15                 // Method java/lang/Error."<init>":()V
      37: athrow
    Exception table:
       from    to  target type
           0    28    29   Class java/lang/CloneNotSupportedException

  public java.lang.String translateNamespacePrefixToUri(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #4                  // Field namespaces:Ljava/util/HashMap;
       4: dup
       5: astore_2
       6: monitorenter
       7: aload_0
       8: getfield      #4                  // Field namespaces:Ljava/util/HashMap;
      11: aload_1
      12: invokevirtual #16                 // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      15: checkcast     #17                 // class java/lang/String
      18: aload_2
      19: monitorexit
      20: areturn
      21: astore_3
      22: aload_2
      23: monitorexit
      24: aload_3
      25: athrow
    Exception table:
       from    to  target type
           7    20    21   any
          21    24    21   any

  public java.lang.Object exec(java.util.List) throws freemarker.template.TemplateModelException;
    Code:
       0: aload_1
       1: invokeinterface #18,  1           // InterfaceMethod java/util/List.size:()I
       6: iconst_2
       7: if_icmpeq     20
      10: new           #19                 // class freemarker/template/TemplateModelException
      13: dup
      14: ldc           #20                 // String _registerNamespace(prefix, uri) requires two arguments
      16: invokespecial #21                 // Method freemarker/template/TemplateModelException."<init>":(Ljava/lang/String;)V
      19: athrow
      20: aload_0
      21: aload_1
      22: iconst_0
      23: invokeinterface #22,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      28: checkcast     #17                 // class java/lang/String
      31: aload_1
      32: iconst_1
      33: invokeinterface #22,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      38: checkcast     #17                 // class java/lang/String
      41: invokevirtual #23                 // Method registerNamespace:(Ljava/lang/String;Ljava/lang/String;)V
      44: getstatic     #24                 // Field freemarker/template/TemplateScalarModel.EMPTY_STRING:Lfreemarker/template/TemplateModel;
      47: areturn

  void registerNamespace(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #4                  // Field namespaces:Ljava/util/HashMap;
       4: dup
       5: astore_3
       6: monitorenter
       7: aload_0
       8: getfield      #4                  // Field namespaces:Ljava/util/HashMap;
      11: aload_1
      12: aload_2
      13: invokevirtual #6                  // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      16: pop
      17: aload_3
      18: monitorexit
      19: goto          29
      22: astore        4
      24: aload_3
      25: monitorexit
      26: aload         4
      28: athrow
      29: return
    Exception table:
       from    to  target type
           7    19    22   any
          22    26    22   any

  void markShared();
    Code:
       0: aload_0
       1: getfield      #9                  // Field shared:Z
       4: ifne          12
       7: aload_0
       8: iconst_1
       9: putfield      #9                  // Field shared:Z
      12: return

  boolean isShared();
    Code:
       0: aload_0
       1: getfield      #9                  // Field shared:Z
       4: ireturn
}
