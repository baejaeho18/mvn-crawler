Compiled from "FileExtensionMatcher.java"
public class freemarker.cache.FileExtensionMatcher extends freemarker.cache.TemplateSourceMatcher {
  private final java.lang.String extension;

  private boolean caseInsensitive;

  public freemarker.cache.FileExtensionMatcher(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method freemarker/cache/TemplateSourceMatcher."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #2                  // Field caseInsensitive:Z
       9: aload_1
      10: bipush        47
      12: invokevirtual #3                  // Method java/lang/String.indexOf:(I)I
      15: iconst_m1
      16: if_icmpeq     46
      19: new           #4                  // class java/lang/IllegalArgumentException
      22: dup
      23: new           #5                  // class java/lang/StringBuilder
      26: dup
      27: invokespecial #6                  // Method java/lang/StringBuilder."<init>":()V
      30: ldc           #7                  // String A file extension can\'t contain \"/\":
      32: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: aload_1
      36: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: invokevirtual #9                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      42: invokespecial #10                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      45: athrow
      46: aload_1
      47: bipush        42
      49: invokevirtual #3                  // Method java/lang/String.indexOf:(I)I
      52: iconst_m1
      53: if_icmpeq     83
      56: new           #4                  // class java/lang/IllegalArgumentException
      59: dup
      60: new           #5                  // class java/lang/StringBuilder
      63: dup
      64: invokespecial #6                  // Method java/lang/StringBuilder."<init>":()V
      67: ldc           #11                 // String A file extension can\'t contain \"*\":
      69: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      72: aload_1
      73: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      76: invokevirtual #9                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      79: invokespecial #10                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      82: athrow
      83: aload_1
      84: bipush        63
      86: invokevirtual #3                  // Method java/lang/String.indexOf:(I)I
      89: iconst_m1
      90: if_icmpeq     120
      93: new           #4                  // class java/lang/IllegalArgumentException
      96: dup
      97: new           #5                  // class java/lang/StringBuilder
     100: dup
     101: invokespecial #6                  // Method java/lang/StringBuilder."<init>":()V
     104: ldc           #11                 // String A file extension can\'t contain \"*\":
     106: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     109: aload_1
     110: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     113: invokevirtual #9                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     116: invokespecial #10                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     119: athrow
     120: aload_1
     121: ldc           #12                 // String .
     123: invokevirtual #13                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
     126: ifeq          156
     129: new           #4                  // class java/lang/IllegalArgumentException
     132: dup
     133: new           #5                  // class java/lang/StringBuilder
     136: dup
     137: invokespecial #6                  // Method java/lang/StringBuilder."<init>":()V
     140: ldc           #14                 // String A file extension can\'t start with \".\":
     142: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     145: aload_1
     146: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     149: invokevirtual #9                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     152: invokespecial #10                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     155: athrow
     156: aload_0
     157: aload_1
     158: putfield      #15                 // Field extension:Ljava/lang/String;
     161: return

  public boolean matches(java.lang.String, java.lang.Object) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokevirtual #16                 // Method java/lang/String.length:()I
       4: istore_3
       5: aload_0
       6: getfield      #15                 // Field extension:Ljava/lang/String;
       9: invokevirtual #16                 // Method java/lang/String.length:()I
      12: istore        4
      14: iload_3
      15: iload         4
      17: iconst_1
      18: iadd
      19: if_icmplt     37
      22: aload_1
      23: iload_3
      24: iload         4
      26: isub
      27: iconst_1
      28: isub
      29: invokevirtual #17                 // Method java/lang/String.charAt:(I)C
      32: bipush        46
      34: if_icmpeq     39
      37: iconst_0
      38: ireturn
      39: aload_1
      40: aload_0
      41: getfield      #2                  // Field caseInsensitive:Z
      44: iload_3
      45: iload         4
      47: isub
      48: aload_0
      49: getfield      #15                 // Field extension:Ljava/lang/String;
      52: iconst_0
      53: iload         4
      55: invokevirtual #18                 // Method java/lang/String.regionMatches:(ZILjava/lang/String;II)Z
      58: ireturn

  public boolean isCaseInsensitive();
    Code:
       0: aload_0
       1: getfield      #2                  // Field caseInsensitive:Z
       4: ireturn

  public void setCaseInsensitive(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field caseInsensitive:Z
       5: return

  public freemarker.cache.FileExtensionMatcher caseInsensitive(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #19                 // Method setCaseInsensitive:(Z)V
       5: aload_0
       6: areturn
}
