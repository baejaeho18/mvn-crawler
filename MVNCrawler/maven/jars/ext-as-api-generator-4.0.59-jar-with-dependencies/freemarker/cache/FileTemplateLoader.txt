Compiled from "FileTemplateLoader.java"
public class freemarker.cache.FileTemplateLoader implements freemarker.cache.TemplateLoader {
  public static java.lang.String SYSTEM_PROPERTY_NAME_EMULATE_CASE_SENSITIVE_FILE_SYSTEM;

  private static final boolean EMULATE_CASE_SENSITIVE_FILE_SYSTEM_DEFAULT;

  private static final int CASE_CHECH_CACHE_HARD_SIZE;

  private static final int CASE_CHECK_CACHE__SOFT_SIZE;

  private static final boolean SEP_IS_SLASH;

  private static final freemarker.log.Logger LOG;

  public final java.io.File baseDir;

  private final java.lang.String canonicalBasePath;

  private boolean emulateCaseSensitiveFileSystem;

  private freemarker.cache.MruCacheStorage correctCasePaths;

  public freemarker.cache.FileTemplateLoader() throws java.io.IOException;
    Code:
       0: aload_0
       1: new           #5                  // class java/io/File
       4: dup
       5: ldc           #6                  // String user.dir
       7: invokestatic  #7                  // Method freemarker/template/utility/SecurityUtilities.getSystemProperty:(Ljava/lang/String;)Ljava/lang/String;
      10: invokespecial #8                  // Method java/io/File."<init>":(Ljava/lang/String;)V
      13: invokespecial #9                  // Method "<init>":(Ljava/io/File;)V
      16: return

  public freemarker.cache.FileTemplateLoader(java.io.File) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: invokespecial #10                 // Method "<init>":(Ljava/io/File;Z)V
       6: return

  public freemarker.cache.FileTemplateLoader(java.io.File, boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #11                 // Method java/lang/Object."<init>":()V
       4: new           #12                 // class freemarker/cache/FileTemplateLoader$1
       7: dup
       8: aload_0
       9: aload_1
      10: iload_2
      11: invokespecial #13                 // Method freemarker/cache/FileTemplateLoader$1."<init>":(Lfreemarker/cache/FileTemplateLoader;Ljava/io/File;Z)V
      14: invokestatic  #14                 // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedExceptionAction;)Ljava/lang/Object;
      17: checkcast     #15                 // class "[Ljava/lang/Object;"
      20: checkcast     #15                 // class "[Ljava/lang/Object;"
      23: astore_3
      24: aload_0
      25: aload_3
      26: iconst_0
      27: aaload
      28: checkcast     #5                  // class java/io/File
      31: putfield      #16                 // Field baseDir:Ljava/io/File;
      34: aload_0
      35: aload_3
      36: iconst_1
      37: aaload
      38: checkcast     #17                 // class java/lang/String
      41: putfield      #3                  // Field canonicalBasePath:Ljava/lang/String;
      44: aload_0
      45: aload_0
      46: invokevirtual #18                 // Method getEmulateCaseSensitiveFileSystemDefault:()Z
      49: invokevirtual #19                 // Method setEmulateCaseSensitiveFileSystem:(Z)V
      52: goto          64
      55: astore_3
      56: aload_3
      57: invokevirtual #21                 // Method java/security/PrivilegedActionException.getException:()Ljava/lang/Exception;
      60: checkcast     #22                 // class java/io/IOException
      63: athrow
      64: return
    Exception table:
       from    to  target type
           4    52    55   Class java/security/PrivilegedActionException

  public java.lang.Object findTemplateSource(java.lang.String) throws java.io.IOException;
    Code:
       0: new           #23                 // class freemarker/cache/FileTemplateLoader$2
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #24                 // Method freemarker/cache/FileTemplateLoader$2."<init>":(Lfreemarker/cache/FileTemplateLoader;Ljava/lang/String;)V
       9: invokestatic  #14                 // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedExceptionAction;)Ljava/lang/Object;
      12: areturn
      13: astore_2
      14: aload_2
      15: invokevirtual #21                 // Method java/security/PrivilegedActionException.getException:()Ljava/lang/Exception;
      18: checkcast     #22                 // class java/io/IOException
      21: athrow
    Exception table:
       from    to  target type
           0    12    13   Class java/security/PrivilegedActionException

  public long getLastModified(java.lang.Object);
    Code:
       0: new           #25                 // class freemarker/cache/FileTemplateLoader$3
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #26                 // Method freemarker/cache/FileTemplateLoader$3."<init>":(Lfreemarker/cache/FileTemplateLoader;Ljava/lang/Object;)V
       9: invokestatic  #27                 // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedAction;)Ljava/lang/Object;
      12: checkcast     #28                 // class java/lang/Long
      15: checkcast     #28                 // class java/lang/Long
      18: invokevirtual #29                 // Method java/lang/Long.longValue:()J
      21: lreturn

  public java.io.Reader getReader(java.lang.Object, java.lang.String) throws java.io.IOException;
    Code:
       0: new           #30                 // class freemarker/cache/FileTemplateLoader$4
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: invokespecial #31                 // Method freemarker/cache/FileTemplateLoader$4."<init>":(Lfreemarker/cache/FileTemplateLoader;Ljava/lang/Object;Ljava/lang/String;)V
      10: invokestatic  #14                 // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedExceptionAction;)Ljava/lang/Object;
      13: checkcast     #32                 // class java/io/Reader
      16: areturn
      17: astore_3
      18: aload_3
      19: invokevirtual #21                 // Method java/security/PrivilegedActionException.getException:()Ljava/lang/Exception;
      22: checkcast     #22                 // class java/io/IOException
      25: athrow
    Exception table:
       from    to  target type
           0    16    17   Class java/security/PrivilegedActionException

  private boolean isNameCaseCorrect(java.io.File) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokevirtual #33                 // Method java/io/File.getPath:()Ljava/lang/String;
       4: astore_2
       5: aload_0
       6: getfield      #34                 // Field correctCasePaths:Lfreemarker/cache/MruCacheStorage;
       9: dup
      10: astore_3
      11: monitorenter
      12: aload_0
      13: getfield      #34                 // Field correctCasePaths:Lfreemarker/cache/MruCacheStorage;
      16: aload_2
      17: invokevirtual #35                 // Method freemarker/cache/MruCacheStorage.get:(Ljava/lang/Object;)Ljava/lang/Object;
      20: ifnull        27
      23: iconst_1
      24: aload_3
      25: monitorexit
      26: ireturn
      27: aload_3
      28: monitorexit
      29: goto          39
      32: astore        4
      34: aload_3
      35: monitorexit
      36: aload         4
      38: athrow
      39: aload_1
      40: invokevirtual #36                 // Method java/io/File.getParentFile:()Ljava/io/File;
      43: astore_3
      44: aload_3
      45: ifnull        202
      48: aload_0
      49: getfield      #16                 // Field baseDir:Ljava/io/File;
      52: aload_3
      53: invokevirtual #37                 // Method java/io/File.equals:(Ljava/lang/Object;)Z
      56: ifne          69
      59: aload_0
      60: aload_3
      61: invokespecial #1                  // Method isNameCaseCorrect:(Ljava/io/File;)Z
      64: ifne          69
      67: iconst_0
      68: ireturn
      69: aload_3
      70: invokevirtual #38                 // Method java/io/File.list:()[Ljava/lang/String;
      73: astore        4
      75: aload         4
      77: ifnull        202
      80: aload_1
      81: invokevirtual #39                 // Method java/io/File.getName:()Ljava/lang/String;
      84: astore        5
      86: iconst_0
      87: istore        6
      89: iconst_0
      90: istore        7
      92: iload         6
      94: ifne          127
      97: iload         7
      99: aload         4
     101: arraylength
     102: if_icmpge     127
     105: aload         5
     107: aload         4
     109: iload         7
     111: aaload
     112: invokevirtual #40                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     115: ifeq          121
     118: iconst_1
     119: istore        6
     121: iinc          7, 1
     124: goto          92
     127: iload         6
     129: ifne          202
     132: iconst_0
     133: istore        7
     135: iload         7
     137: aload         4
     139: arraylength
     140: if_icmpge     202
     143: aload         4
     145: iload         7
     147: aaload
     148: astore        8
     150: aload         5
     152: aload         8
     154: invokevirtual #41                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
     157: ifeq          196
     160: getstatic     #42                 // Field LOG:Lfreemarker/log/Logger;
     163: invokevirtual #43                 // Method freemarker/log/Logger.isDebugEnabled:()Z
     166: ifeq          194
     169: getstatic     #42                 // Field LOG:Lfreemarker/log/Logger;
     172: new           #44                 // class java/lang/StringBuilder
     175: dup
     176: invokespecial #45                 // Method java/lang/StringBuilder."<init>":()V
     179: ldc           #46                 // String Emulating file-not-found because of letter case differences to the real file, for:
     181: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     184: aload_2
     185: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     188: invokevirtual #48                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     191: invokevirtual #49                 // Method freemarker/log/Logger.debug:(Ljava/lang/String;)V
     194: iconst_0
     195: ireturn
     196: iinc          7, 1
     199: goto          135
     202: aload_0
     203: getfield      #34                 // Field correctCasePaths:Lfreemarker/cache/MruCacheStorage;
     206: dup
     207: astore        4
     209: monitorenter
     210: aload_0
     211: getfield      #34                 // Field correctCasePaths:Lfreemarker/cache/MruCacheStorage;
     214: aload_2
     215: getstatic     #50                 // Field java/lang/Boolean.TRUE:Ljava/lang/Boolean;
     218: invokevirtual #51                 // Method freemarker/cache/MruCacheStorage.put:(Ljava/lang/Object;Ljava/lang/Object;)V
     221: aload         4
     223: monitorexit
     224: goto          235
     227: astore        9
     229: aload         4
     231: monitorexit
     232: aload         9
     234: athrow
     235: iconst_1
     236: ireturn
    Exception table:
       from    to  target type
          12    26    32   any
          27    29    32   any
          32    36    32   any
         210   224   227   any
         227   232   227   any

  public void closeTemplateSource(java.lang.Object);
    Code:
       0: return

  public java.io.File getBaseDirectory();
    Code:
       0: aload_0
       1: getfield      #16                 // Field baseDir:Ljava/io/File;
       4: areturn

  public void setEmulateCaseSensitiveFileSystem(boolean);
    Code:
       0: iload_1
       1: ifeq          30
       4: aload_0
       5: getfield      #34                 // Field correctCasePaths:Lfreemarker/cache/MruCacheStorage;
       8: ifnonnull     35
      11: aload_0
      12: new           #52                 // class freemarker/cache/MruCacheStorage
      15: dup
      16: bipush        50
      18: sipush        1000
      21: invokespecial #54                 // Method freemarker/cache/MruCacheStorage."<init>":(II)V
      24: putfield      #34                 // Field correctCasePaths:Lfreemarker/cache/MruCacheStorage;
      27: goto          35
      30: aload_0
      31: aconst_null
      32: putfield      #34                 // Field correctCasePaths:Lfreemarker/cache/MruCacheStorage;
      35: aload_0
      36: iload_1
      37: putfield      #2                  // Field emulateCaseSensitiveFileSystem:Z
      40: return

  public boolean getEmulateCaseSensitiveFileSystem();
    Code:
       0: aload_0
       1: getfield      #2                  // Field emulateCaseSensitiveFileSystem:Z
       4: ireturn

  protected boolean getEmulateCaseSensitiveFileSystemDefault();
    Code:
       0: getstatic     #55                 // Field EMULATE_CASE_SENSITIVE_FILE_SYSTEM_DEFAULT:Z
       3: ireturn

  public java.lang.String toString();
    Code:
       0: new           #44                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #45                 // Method java/lang/StringBuilder."<init>":()V
       7: aload_0
       8: invokestatic  #56                 // Method freemarker/cache/TemplateLoaderUtils.getClassNameForToString:(Lfreemarker/cache/TemplateLoader;)Ljava/lang/String;
      11: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      14: ldc           #57                 // String (
      16: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      19: ldc           #58                 // String baseDir=\"
      21: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: aload_0
      25: getfield      #16                 // Field baseDir:Ljava/io/File;
      28: invokevirtual #59                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      31: ldc           #60                 // String \"
      33: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: aload_0
      37: getfield      #3                  // Field canonicalBasePath:Ljava/lang/String;
      40: ifnull        73
      43: new           #44                 // class java/lang/StringBuilder
      46: dup
      47: invokespecial #45                 // Method java/lang/StringBuilder."<init>":()V
      50: ldc           #61                 // String , canonicalBasePath=\"
      52: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      55: aload_0
      56: getfield      #3                  // Field canonicalBasePath:Ljava/lang/String;
      59: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      62: ldc           #60                 // String \"
      64: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      67: invokevirtual #48                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      70: goto          75
      73: ldc           #62                 // String
      75: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      78: aload_0
      79: getfield      #2                  // Field emulateCaseSensitiveFileSystem:Z
      82: ifeq          90
      85: ldc           #63                 // String , emulateCaseSensitiveFileSystem=true
      87: goto          92
      90: ldc           #62                 // String
      92: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      95: ldc           #64                 // String )
      97: invokevirtual #47                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     100: invokevirtual #48                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     103: areturn

  static boolean access$000();
    Code:
       0: getstatic     #4                  // Field SEP_IS_SLASH:Z
       3: ireturn

  static java.lang.String access$100(freemarker.cache.FileTemplateLoader);
    Code:
       0: aload_0
       1: getfield      #3                  // Field canonicalBasePath:Ljava/lang/String;
       4: areturn

  static boolean access$200(freemarker.cache.FileTemplateLoader);
    Code:
       0: aload_0
       1: getfield      #2                  // Field emulateCaseSensitiveFileSystem:Z
       4: ireturn

  static boolean access$300(freemarker.cache.FileTemplateLoader, java.io.File) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method isNameCaseCorrect:(Ljava/io/File;)Z
       5: ireturn

  static {};
    Code:
       0: ldc           #65                 // String org.freemarker.emulateCaseSensitiveFileSystem
       2: putstatic     #66                 // Field SYSTEM_PROPERTY_NAME_EMULATE_CASE_SENSITIVE_FILE_SYSTEM:Ljava/lang/String;
       5: getstatic     #66                 // Field SYSTEM_PROPERTY_NAME_EMULATE_CASE_SENSITIVE_FILE_SYSTEM:Ljava/lang/String;
       8: ldc           #67                 // String false
      10: invokestatic  #68                 // Method freemarker/template/utility/SecurityUtilities.getSystemProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      13: astore_0
      14: aload_0
      15: invokestatic  #69                 // Method freemarker/template/utility/StringUtil.getYesNo:(Ljava/lang/String;)Z
      18: istore_1
      19: goto          25
      22: astore_2
      23: iconst_0
      24: istore_1
      25: iload_1
      26: putstatic     #55                 // Field EMULATE_CASE_SENSITIVE_FILE_SYSTEM_DEFAULT:Z
      29: getstatic     #71                 // Field java/io/File.separatorChar:C
      32: bipush        47
      34: if_icmpne     41
      37: iconst_1
      38: goto          42
      41: iconst_0
      42: putstatic     #4                  // Field SEP_IS_SLASH:Z
      45: ldc           #72                 // String freemarker.cache
      47: invokestatic  #73                 // Method freemarker/log/Logger.getLogger:(Ljava/lang/String;)Lfreemarker/log/Logger;
      50: putstatic     #42                 // Field LOG:Lfreemarker/log/Logger;
      53: return
    Exception table:
       from    to  target type
          14    19    22   Class java/lang/Exception
}
