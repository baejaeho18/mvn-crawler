Compiled from "PathGlobMatcher.java"
public class freemarker.cache.PathGlobMatcher extends freemarker.cache.TemplateSourceMatcher {
  private final java.lang.String glob;

  private java.util.regex.Pattern pattern;

  private boolean caseInsensitive;

  public freemarker.cache.PathGlobMatcher(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method freemarker/cache/TemplateSourceMatcher."<init>":()V
       4: aload_1
       5: ldc           #2                  // String /
       7: invokevirtual #3                  // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      10: ifeq          40
      13: new           #4                  // class java/lang/IllegalArgumentException
      16: dup
      17: new           #5                  // class java/lang/StringBuilder
      20: dup
      21: invokespecial #6                  // Method java/lang/StringBuilder."<init>":()V
      24: ldc           #7                  // String Absolute template paths need no inital \"/\"; remove it from:
      26: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: aload_1
      30: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: invokevirtual #9                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      36: invokespecial #10                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      39: athrow
      40: aload_0
      41: aload_1
      42: putfield      #11                 // Field glob:Ljava/lang/String;
      45: aload_0
      46: invokespecial #12                 // Method buildPattern:()V
      49: return

  private void buildPattern();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #11                 // Field glob:Ljava/lang/String;
       5: aload_0
       6: getfield      #13                 // Field caseInsensitive:Z
       9: invokestatic  #14                 // Method freemarker/template/utility/StringUtil.globToRegularExpression:(Ljava/lang/String;Z)Ljava/util/regex/Pattern;
      12: putfield      #15                 // Field pattern:Ljava/util/regex/Pattern;
      15: return

  public boolean matches(java.lang.String, java.lang.Object) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #15                 // Field pattern:Ljava/util/regex/Pattern;
       4: aload_1
       5: invokevirtual #16                 // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
       8: invokevirtual #17                 // Method java/util/regex/Matcher.matches:()Z
      11: ireturn

  public boolean isCaseInsensitive();
    Code:
       0: aload_0
       1: getfield      #13                 // Field caseInsensitive:Z
       4: ireturn

  public void setCaseInsensitive(boolean);
    Code:
       0: aload_0
       1: getfield      #13                 // Field caseInsensitive:Z
       4: istore_2
       5: aload_0
       6: iload_1
       7: putfield      #13                 // Field caseInsensitive:Z
      10: iload_2
      11: iload_1
      12: if_icmpeq     19
      15: aload_0
      16: invokespecial #12                 // Method buildPattern:()V
      19: return

  public freemarker.cache.PathGlobMatcher caseInsensitive(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #18                 // Method setCaseInsensitive:(Z)V
       5: aload_0
       6: areturn
}
