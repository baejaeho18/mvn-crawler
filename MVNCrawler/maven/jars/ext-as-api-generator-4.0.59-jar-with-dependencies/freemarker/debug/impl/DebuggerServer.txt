Compiled from "DebuggerServer.java"
class freemarker.debug.impl.DebuggerServer {
  private static final freemarker.log.Logger LOG;

  private static final java.util.Random R;

  private final byte[] password;

  private final int port;

  private final java.io.Serializable debuggerStub;

  private boolean stop;

  private java.net.ServerSocket serverSocket;

  public freemarker.debug.impl.DebuggerServer(java.io.Serializable);
    Code:
       0: aload_0
       1: invokespecial #6                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #7                  // Field stop:Z
       9: aload_0
      10: ldc           #8                  // String freemarker.debug.port
      12: sipush        7011
      15: invokestatic  #10                 // Method freemarker/template/utility/SecurityUtilities.getSystemProperty:(Ljava/lang/String;I)Ljava/lang/Integer;
      18: invokevirtual #11                 // Method java/lang/Integer.intValue:()I
      21: putfield      #12                 // Field port:I
      24: aload_0
      25: ldc           #13                 // String freemarker.debug.password
      27: ldc           #14                 // String
      29: invokestatic  #15                 // Method freemarker/template/utility/SecurityUtilities.getSystemProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      32: ldc           #16                 // String UTF-8
      34: invokevirtual #17                 // Method java/lang/String.getBytes:(Ljava/lang/String;)[B
      37: putfield      #3                  // Field password:[B
      40: goto          53
      43: astore_2
      44: new           #19                 // class freemarker/template/utility/UndeclaredThrowableException
      47: dup
      48: aload_2
      49: invokespecial #20                 // Method freemarker/template/utility/UndeclaredThrowableException."<init>":(Ljava/lang/Throwable;)V
      52: athrow
      53: aload_0
      54: aload_1
      55: putfield      #2                  // Field debuggerStub:Ljava/io/Serializable;
      58: return
    Exception table:
       from    to  target type
          24    40    43   Class java/io/UnsupportedEncodingException

  public void start();
    Code:
       0: new           #21                 // class java/lang/Thread
       3: dup
       4: new           #22                 // class freemarker/debug/impl/DebuggerServer$1
       7: dup
       8: aload_0
       9: invokespecial #23                 // Method freemarker/debug/impl/DebuggerServer$1."<init>":(Lfreemarker/debug/impl/DebuggerServer;)V
      12: ldc           #24                 // String FreeMarker Debugger Server Acceptor
      14: invokespecial #25                 // Method java/lang/Thread."<init>":(Ljava/lang/Runnable;Ljava/lang/String;)V
      17: invokevirtual #26                 // Method java/lang/Thread.start:()V
      20: return

  private void startInternal();
    Code:
       0: aload_0
       1: new           #27                 // class java/net/ServerSocket
       4: dup
       5: aload_0
       6: getfield      #12                 // Field port:I
       9: invokespecial #28                 // Method java/net/ServerSocket."<init>":(I)V
      12: putfield      #29                 // Field serverSocket:Ljava/net/ServerSocket;
      15: aload_0
      16: getfield      #7                  // Field stop:Z
      19: ifne          52
      22: aload_0
      23: getfield      #29                 // Field serverSocket:Ljava/net/ServerSocket;
      26: invokevirtual #30                 // Method java/net/ServerSocket.accept:()Ljava/net/Socket;
      29: astore_1
      30: new           #21                 // class java/lang/Thread
      33: dup
      34: new           #31                 // class freemarker/debug/impl/DebuggerServer$DebuggerAuthProtocol
      37: dup
      38: aload_0
      39: aload_1
      40: invokespecial #32                 // Method freemarker/debug/impl/DebuggerServer$DebuggerAuthProtocol."<init>":(Lfreemarker/debug/impl/DebuggerServer;Ljava/net/Socket;)V
      43: invokespecial #33                 // Method java/lang/Thread."<init>":(Ljava/lang/Runnable;)V
      46: invokevirtual #26                 // Method java/lang/Thread.start:()V
      49: goto          15
      52: goto          65
      55: astore_1
      56: getstatic     #1                  // Field LOG:Lfreemarker/log/Logger;
      59: ldc           #35                 // String Debugger server shut down.
      61: aload_1
      62: invokevirtual #36                 // Method freemarker/log/Logger.error:(Ljava/lang/String;Ljava/lang/Throwable;)V
      65: return
    Exception table:
       from    to  target type
           0    52    55   Class java/io/IOException

  public void stop();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #7                  // Field stop:Z
       5: aload_0
       6: getfield      #29                 // Field serverSocket:Ljava/net/ServerSocket;
       9: ifnull        32
      12: aload_0
      13: getfield      #29                 // Field serverSocket:Ljava/net/ServerSocket;
      16: invokevirtual #37                 // Method java/net/ServerSocket.close:()V
      19: goto          32
      22: astore_1
      23: getstatic     #1                  // Field LOG:Lfreemarker/log/Logger;
      26: ldc           #38                 // String Unable to close server socket.
      28: aload_1
      29: invokevirtual #36                 // Method freemarker/log/Logger.error:(Ljava/lang/String;Ljava/lang/Throwable;)V
      32: return
    Exception table:
       from    to  target type
          12    19    22   Class java/io/IOException

  static void access$000(freemarker.debug.impl.DebuggerServer);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method startInternal:()V
       4: return

  static java.util.Random access$100();
    Code:
       0: getstatic     #4                  // Field R:Ljava/util/Random;
       3: areturn

  static byte[] access$200(freemarker.debug.impl.DebuggerServer);
    Code:
       0: aload_0
       1: getfield      #3                  // Field password:[B
       4: areturn

  static java.io.Serializable access$300(freemarker.debug.impl.DebuggerServer);
    Code:
       0: aload_0
       1: getfield      #2                  // Field debuggerStub:Ljava/io/Serializable;
       4: areturn

  static freemarker.log.Logger access$400();
    Code:
       0: getstatic     #1                  // Field LOG:Lfreemarker/log/Logger;
       3: areturn

  static {};
    Code:
       0: ldc           #39                 // String freemarker.debug.server
       2: invokestatic  #40                 // Method freemarker/log/Logger.getLogger:(Ljava/lang/String;)Lfreemarker/log/Logger;
       5: putstatic     #1                  // Field LOG:Lfreemarker/log/Logger;
       8: new           #41                 // class java/security/SecureRandom
      11: dup
      12: invokespecial #42                 // Method java/security/SecureRandom."<init>":()V
      15: putstatic     #4                  // Field R:Ljava/util/Random;
      18: return
}
