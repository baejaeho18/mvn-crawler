Compiled from "StringTree.scala"
public interface wvlet.airframe.launcher.StringTree {
  public static wvlet.airframe.launcher.StringTree empty();
    Code:
       0: getstatic     #42                 // Field wvlet/airframe/launcher/StringTree$.MODULE$:Lwvlet/airframe/launcher/StringTree$;
       3: invokevirtual #44                 // Method wvlet/airframe/launcher/StringTree$.empty:()Lwvlet/airframe/launcher/StringTree;
       6: areturn

  public static wvlet.airframe.launcher.StringTree apply(scala.collection.Iterable<scala.Tuple2<wvlet.airframe.surface.reflect.Path, wvlet.airframe.launcher.StringTree>>);
    Code:
       0: getstatic     #42                 // Field wvlet/airframe/launcher/StringTree$.MODULE$:Lwvlet/airframe/launcher/StringTree$;
       3: aload_0
       4: invokevirtual #50                 // Method wvlet/airframe/launcher/StringTree$.apply:(Lscala/collection/Iterable;)Lwvlet/airframe/launcher/StringTree;
       7: areturn

  public static wvlet.airframe.launcher.StringTree $plus$(wvlet.airframe.launcher.StringTree, scala.Tuple2);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #58                 // InterfaceMethod $plus:(Lscala/Tuple2;)Lwvlet/airframe/launcher/StringTree;
       5: areturn

  public default wvlet.airframe.launcher.StringTree $plus(scala.Tuple2<wvlet.airframe.surface.reflect.Path, wvlet.airframe.launcher.StringTree>);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #67                 // Method scala/Tuple2._1:()Ljava/lang/Object;
       5: checkcast     #69                 // class wvlet/airframe/surface/reflect/Path
       8: aload_1
       9: invokevirtual #72                 // Method scala/Tuple2._2:()Ljava/lang/Object;
      12: checkcast     #2                  // class wvlet/airframe/launcher/StringTree
      15: invokeinterface #76,  3           // InterfaceMethod setNode:(Lwvlet/airframe/surface/reflect/Path;Lwvlet/airframe/launcher/StringTree;)Lwvlet/airframe/launcher/StringTree;
      20: areturn

  public static wvlet.airframe.launcher.StringTree $plus$plus$(wvlet.airframe.launcher.StringTree, scala.collection.Iterable);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #83                 // InterfaceMethod $plus$plus:(Lscala/collection/Iterable;)Lwvlet/airframe/launcher/StringTree;
       5: areturn

  public default wvlet.airframe.launcher.StringTree $plus$plus(scala.collection.Iterable<scala.Tuple2<wvlet.airframe.surface.reflect.Path, wvlet.airframe.launcher.StringTree>>);
    Code:
       0: aload_1
       1: aload_0
       2: invokedynamic #105,  0            // InvokeDynamic #0:apply:()Lscala/Function2;
       7: invokeinterface #111,  3          // InterfaceMethod scala/collection/Iterable.foldLeft:(Ljava/lang/Object;Lscala/Function2;)Ljava/lang/Object;
      12: checkcast     #2                  // class wvlet/airframe/launcher/StringTree
      15: areturn

  public static wvlet.airframe.launcher.StringTree set$(wvlet.airframe.launcher.StringTree, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #119                // InterfaceMethod set:(Ljava/lang/String;Ljava/lang/String;)Lwvlet/airframe/launcher/StringTree;
       6: areturn

  public default wvlet.airframe.launcher.StringTree set(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getstatic     #125                // Field wvlet/airframe/surface/reflect/Path$.MODULE$:Lwvlet/airframe/surface/reflect/Path$;
       4: aload_1
       5: invokevirtual #128                // Method wvlet/airframe/surface/reflect/Path$.apply:(Ljava/lang/String;)Lwvlet/airframe/surface/reflect/Path;
       8: new           #18                 // class wvlet/airframe/launcher/StringTree$Leaf
      11: dup
      12: aload_2
      13: invokespecial #132                // Method wvlet/airframe/launcher/StringTree$Leaf."<init>":(Ljava/lang/String;)V
      16: invokeinterface #76,  3           // InterfaceMethod setNode:(Lwvlet/airframe/surface/reflect/Path;Lwvlet/airframe/launcher/StringTree;)Lwvlet/airframe/launcher/StringTree;
      21: areturn

  public static wvlet.airframe.launcher.StringTree set$(wvlet.airframe.launcher.StringTree, wvlet.airframe.surface.reflect.Path, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #136                // InterfaceMethod set:(Lwvlet/airframe/surface/reflect/Path;Ljava/lang/String;)Lwvlet/airframe/launcher/StringTree;
       6: areturn

  public default wvlet.airframe.launcher.StringTree set(wvlet.airframe.surface.reflect.Path, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: new           #18                 // class wvlet/airframe/launcher/StringTree$Leaf
       5: dup
       6: aload_2
       7: invokespecial #132                // Method wvlet/airframe/launcher/StringTree$Leaf."<init>":(Ljava/lang/String;)V
      10: invokeinterface #76,  3           // InterfaceMethod setNode:(Lwvlet/airframe/surface/reflect/Path;Lwvlet/airframe/launcher/StringTree;)Lwvlet/airframe/launcher/StringTree;
      15: areturn

  public abstract wvlet.airframe.launcher.StringTree setNode(wvlet.airframe.surface.reflect.Path, wvlet.airframe.launcher.StringTree);

  public static wvlet.airframe.launcher.StringTree get$(wvlet.airframe.launcher.StringTree, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #144                // InterfaceMethod get:(Ljava/lang/String;)Lwvlet/airframe/launcher/StringTree;
       5: areturn

  public default wvlet.airframe.launcher.StringTree get(java.lang.String);
    Code:
       0: aload_0
       1: getstatic     #125                // Field wvlet/airframe/surface/reflect/Path$.MODULE$:Lwvlet/airframe/surface/reflect/Path$;
       4: aload_1
       5: invokevirtual #128                // Method wvlet/airframe/surface/reflect/Path$.apply:(Ljava/lang/String;)Lwvlet/airframe/surface/reflect/Path;
       8: invokeinterface #147,  2          // InterfaceMethod get:(Lwvlet/airframe/surface/reflect/Path;)Lwvlet/airframe/launcher/StringTree;
      13: areturn

  public abstract wvlet.airframe.launcher.StringTree get(wvlet.airframe.surface.reflect.Path);

  public static scala.collection.Iterator dfs$(wvlet.airframe.launcher.StringTree);
    Code:
       0: aload_0
       1: invokespecial #153                // InterfaceMethod dfs:()Lscala/collection/Iterator;
       4: areturn

  public default scala.collection.Iterator<scala.Tuple2<wvlet.airframe.surface.reflect.Path, java.lang.String>> dfs();
    Code:
       0: aload_0
       1: getstatic     #125                // Field wvlet/airframe/surface/reflect/Path$.MODULE$:Lwvlet/airframe/surface/reflect/Path$;
       4: invokevirtual #158                // Method wvlet/airframe/surface/reflect/Path$.current:()Lwvlet/airframe/surface/reflect/Path;
       7: invokeinterface #161,  2          // InterfaceMethod dfs:(Lwvlet/airframe/surface/reflect/Path;)Lscala/collection/Iterator;
      12: areturn

  public abstract scala.collection.Iterator<scala.Tuple2<wvlet.airframe.surface.reflect.Path, java.lang.String>> dfs(wvlet.airframe.surface.reflect.Path);

  public static scala.collection.Iterator dfs$(wvlet.airframe.launcher.StringTree, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #166                // InterfaceMethod dfs:(Ljava/lang/String;)Lscala/collection/Iterator;
       5: areturn

  public default scala.collection.Iterator<scala.Tuple2<wvlet.airframe.surface.reflect.Path, java.lang.String>> dfs(java.lang.String);
    Code:
       0: aload_0
       1: getstatic     #125                // Field wvlet/airframe/surface/reflect/Path$.MODULE$:Lwvlet/airframe/surface/reflect/Path$;
       4: aload_1
       5: invokevirtual #128                // Method wvlet/airframe/surface/reflect/Path$.apply:(Ljava/lang/String;)Lwvlet/airframe/surface/reflect/Path;
       8: invokeinterface #161,  2          // InterfaceMethod dfs:(Lwvlet/airframe/surface/reflect/Path;)Lscala/collection/Iterator;
      13: areturn

  public static boolean isEmpty$(wvlet.airframe.launcher.StringTree);
    Code:
       0: aload_0
       1: invokespecial #173                // InterfaceMethod isEmpty:()Z
       4: ireturn

  public default boolean isEmpty();
    Code:
       0: iconst_0
       1: ireturn

  public static byte[] toMsgPack$(wvlet.airframe.launcher.StringTree);
    Code:
       0: aload_0
       1: invokespecial #179                // InterfaceMethod toMsgPack:()[B
       4: areturn

  public default byte[] toMsgPack();
    Code:
       0: getstatic     #184                // Field wvlet/airframe/launcher/StringTreeCodec$.MODULE$:Lwvlet/airframe/launcher/StringTreeCodec$;
       3: aload_0
       4: invokevirtual #187                // Method wvlet/airframe/launcher/StringTreeCodec$.toMsgPack:(Ljava/lang/Object;)[B
       7: areturn

  public static wvlet.airframe.launcher.StringTree $anonfun$$plus$plus$1(wvlet.airframe.launcher.StringTree, scala.Tuple2);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #67                 // Method scala/Tuple2._1:()Ljava/lang/Object;
       5: checkcast     #69                 // class wvlet/airframe/surface/reflect/Path
       8: aload_1
       9: invokevirtual #72                 // Method scala/Tuple2._2:()Ljava/lang/Object;
      12: checkcast     #2                  // class wvlet/airframe/launcher/StringTree
      15: invokeinterface #76,  3           // InterfaceMethod setNode:(Lwvlet/airframe/surface/reflect/Path;Lwvlet/airframe/launcher/StringTree;)Lwvlet/airframe/launcher/StringTree;
      20: areturn

  public static void $init$(wvlet.airframe.launcher.StringTree);
    Code:
       0: return

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #202,  0            // InvokeDynamic #1:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
