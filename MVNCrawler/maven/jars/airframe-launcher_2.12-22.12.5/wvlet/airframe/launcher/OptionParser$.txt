Compiled from "OptionParser.scala"
public final class wvlet.airframe.launcher.OptionParser$ implements wvlet.log.LogSupport {
  public static wvlet.airframe.launcher.OptionParser$ MODULE$;

  private wvlet.log.Logger logger;

  private volatile boolean bitmap$0;

  public static {};
    Code:
       0: new           #2                  // class wvlet/airframe/launcher/OptionParser$
       3: invokespecial #28                 // Method "<init>":()V
       6: return

  private wvlet.log.Logger logger$lzycompute();
    Code:
       0: aload_0
       1: dup
       2: astore_1
       3: monitorenter
       4: aload_0
       5: getfield      #32                 // Field bitmap$0:Z
       8: ifne          24
      11: aload_0
      12: aload_0
      13: invokestatic  #38                 // InterfaceMethod wvlet/log/LazyLogger.logger$:(Lwvlet/log/LazyLogger;)Lwvlet/log/Logger;
      16: putfield      #40                 // Field logger:Lwvlet/log/Logger;
      19: aload_0
      20: iconst_1
      21: putfield      #32                 // Field bitmap$0:Z
      24: aload_1
      25: monitorexit
      26: goto          32
      29: aload_1
      30: monitorexit
      31: athrow
      32: aload_0
      33: getfield      #40                 // Field logger:Lwvlet/log/Logger;
      36: areturn
    Exception table:
       from    to  target type
           4    24    29   any

  public wvlet.log.Logger logger();
    Code:
       0: aload_0
       1: getfield      #32                 // Field bitmap$0:Z
       4: ifne          12
       7: aload_0
       8: invokespecial #45                 // Method logger$lzycompute:()Lwvlet/log/Logger;
      11: areturn
      12: aload_0
      13: getfield      #40                 // Field logger:Lwvlet/log/Logger;
      16: areturn

  public java.lang.String[] tokenize(java.lang.String);
    Code:
       0: getstatic     #53                 // Field wvlet/airframe/control/CommandLineTokenizer$.MODULE$:Lwvlet/airframe/control/CommandLineTokenizer$;
       3: aload_1
       4: invokevirtual #55                 // Method wvlet/airframe/control/CommandLineTokenizer$.tokenize:(Ljava/lang/String;)[Ljava/lang/String;
       7: areturn

  public wvlet.airframe.launcher.OptionParser apply(wvlet.airframe.surface.Surface);
    Code:
       0: getstatic     #64                 // Field wvlet/airframe/launcher/ClassOptionSchema$.MODULE$:Lwvlet/airframe/launcher/ClassOptionSchema$;
       3: aload_1
       4: getstatic     #64                 // Field wvlet/airframe/launcher/ClassOptionSchema$.MODULE$:Lwvlet/airframe/launcher/ClassOptionSchema$;
       7: invokevirtual #68                 // Method wvlet/airframe/launcher/ClassOptionSchema$.apply$default$2:()Lwvlet/airframe/surface/reflect/Path;
      10: getstatic     #64                 // Field wvlet/airframe/launcher/ClassOptionSchema$.MODULE$:Lwvlet/airframe/launcher/ClassOptionSchema$;
      13: invokevirtual #72                 // Method wvlet/airframe/launcher/ClassOptionSchema$.apply$default$3:()I
      16: invokevirtual #75                 // Method wvlet/airframe/launcher/ClassOptionSchema$.apply:(Lwvlet/airframe/surface/Surface;Lwvlet/airframe/surface/reflect/Path;I)Lwvlet/airframe/launcher/ClassOptionSchema;
      19: astore_2
      20: getstatic     #80                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
      23: aload_2
      24: ifnull        31
      27: iconst_1
      28: goto          32
      31: iconst_0
      32: invokevirtual #84                 // Method scala/Predef$.assert:(Z)V
      35: new           #86                 // class wvlet/airframe/launcher/OptionParser
      38: dup
      39: aload_2
      40: invokespecial #89                 // Method wvlet/airframe/launcher/OptionParser."<init>":(Lwvlet/airframe/launcher/OptionSchema;)V
      43: areturn

  public scala.collection.Seq<java.lang.String> splitPrefixes(java.lang.String);
    Code:
       0: new           #14                 // class scala/collection/mutable/ArrayOps$ofRef
       3: dup
       4: getstatic     #80                 // Field scala/Predef$.MODULE$:Lscala/Predef$;
       7: aload_1
       8: ldc           #102                // String ,
      10: invokevirtual #107                // Method java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;
      13: checkcast     #109                // class "[Ljava/lang/Object;"
      16: invokevirtual #113                // Method scala/Predef$.refArrayOps:([Ljava/lang/Object;)[Ljava/lang/Object;
      19: invokespecial #116                // Method scala/collection/mutable/ArrayOps$ofRef."<init>":([Ljava/lang/Object;)V
      22: invokevirtual #120                // Method scala/collection/mutable/ArrayOps$ofRef.toSeq:()Lscala/collection/Seq;
      25: aload_1
      26: invokedynamic #143,  0            // InvokeDynamic #0:apply:(Ljava/lang/String;)Lscala/Function1;
      31: getstatic     #148                // Field scala/collection/Seq$.MODULE$:Lscala/collection/Seq$;
      34: invokevirtual #152                // Method scala/collection/Seq$.canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
      37: invokeinterface #158,  3          // InterfaceMethod scala/collection/Seq.map:(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
      42: checkcast     #154                // class scala/collection/Seq
      45: areturn

  private java.lang.Object readResolve();
    Code:
       0: getstatic     #162                // Field MODULE$:Lwvlet/airframe/launcher/OptionParser$;
       3: areturn

  public static final java.lang.String $anonfun$splitPrefixes$1(java.lang.String, java.lang.String);
    Code:
       0: aload_1
       1: ldc           #166                // String --
       3: invokevirtual #170                // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
       6: ifne          18
       9: aload_1
      10: ldc           #172                // String -
      12: invokevirtual #170                // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      15: ifeq          20
      18: aload_1
      19: areturn
      20: new           #174                // class java/lang/IllegalArgumentException
      23: dup
      24: new           #176                // class java/lang/StringBuilder
      27: dup
      28: ldc           #177                // int 44
      30: invokespecial #180                // Method java/lang/StringBuilder."<init>":(I)V
      33: ldc           #182                // String Invalid prefix
      35: invokevirtual #186                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      38: aload_0
      39: invokevirtual #186                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      42: ldc           #188                // String  (not beginning with - or --)
      44: invokevirtual #186                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      47: invokevirtual #192                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      50: invokespecial #195                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      53: athrow

  private wvlet.airframe.launcher.OptionParser$();
    Code:
       0: aload_0
       1: invokespecial #196                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: putstatic     #162                // Field MODULE$:Lwvlet/airframe/launcher/OptionParser$;
       8: aload_0
       9: invokestatic  #202                // InterfaceMethod wvlet/log/LoggingMethods.$init$:(Lwvlet/log/LoggingMethods;)V
      12: aload_0
      13: invokestatic  #205                // InterfaceMethod wvlet/log/LazyLogger.$init$:(Lwvlet/log/LazyLogger;)V
      16: return

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #217,  0            // InvokeDynamic #1:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
