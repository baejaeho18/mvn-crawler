Compiled from "LiteralFuzzers.scala"
public interface morphir.ir.fuzzer.LiteralFuzzers {
  public abstract void morphir$ir$fuzzer$LiteralFuzzers$_setter_$fuzzBoolLiteral_$eq(zio.test.Gen<zio.Has<zio.random.package$Random$Service>, morphir.ir.literal$Literal$BoolLiteral>);

  public abstract void morphir$ir$fuzzer$LiteralFuzzers$_setter_$fuzzCharLiteral_$eq(zio.test.Gen<zio.Has<zio.random.package$Random$Service>, morphir.ir.literal$Literal$CharLiteral>);

  public abstract void morphir$ir$fuzzer$LiteralFuzzers$_setter_$fuzzStringLiteral_$eq(zio.test.Gen<zio.Has<zio.random.package$Random$Service>, morphir.ir.literal$Literal$StringLiteral>);

  public abstract void morphir$ir$fuzzer$LiteralFuzzers$_setter_$fuzzIntLiteral_$eq(zio.test.Gen<zio.Has<zio.random.package$Random$Service>, morphir.ir.literal$Literal$IntLiteral>);

  public abstract void morphir$ir$fuzzer$LiteralFuzzers$_setter_$fuzzFloatLiteral_$eq(zio.test.Gen<zio.Has<zio.random.package$Random$Service>, morphir.ir.literal$Literal$FloatLiteral>);

  public abstract void morphir$ir$fuzzer$LiteralFuzzers$_setter_$fuzzLiteral_$eq(zio.test.Gen<zio.Has<zio.random.package$Random$Service>, morphir.ir.literal$Literal>);

  public abstract zio.test.Gen<zio.Has<zio.random.package$Random$Service>, morphir.ir.literal$Literal$BoolLiteral> fuzzBoolLiteral();

  public abstract zio.test.Gen<zio.Has<zio.random.package$Random$Service>, morphir.ir.literal$Literal$CharLiteral> fuzzCharLiteral();

  public abstract zio.test.Gen<zio.Has<zio.random.package$Random$Service>, morphir.ir.literal$Literal$StringLiteral> fuzzStringLiteral();

  public abstract zio.test.Gen<zio.Has<zio.random.package$Random$Service>, morphir.ir.literal$Literal$IntLiteral> fuzzIntLiteral();

  public abstract zio.test.Gen<zio.Has<zio.random.package$Random$Service>, morphir.ir.literal$Literal$FloatLiteral> fuzzFloatLiteral();

  public abstract zio.test.Gen<zio.Has<zio.random.package$Random$Service>, morphir.ir.literal$Literal> fuzzLiteral();

  public static morphir.ir.literal$Literal$BoolLiteral $anonfun$fuzzBoolLiteral$1(boolean);
    Code:
       0: getstatic     #80                 // Field morphir/ir/literal$.MODULE$:Lmorphir/ir/literal$;
       3: iload_0
       4: invokevirtual #83                 // Method morphir/ir/literal$.bool:(Z)Lmorphir/ir/literal$Literal$BoolLiteral;
       7: areturn

  public static morphir.ir.literal$Literal$CharLiteral $anonfun$fuzzCharLiteral$1(char);
    Code:
       0: getstatic     #80                 // Field morphir/ir/literal$.MODULE$:Lmorphir/ir/literal$;
       3: iload_0
       4: invokevirtual #89                 // Method morphir/ir/literal$.char:(C)Lmorphir/ir/literal$Literal$CharLiteral;
       7: areturn

  public static morphir.ir.literal$Literal$StringLiteral $anonfun$fuzzStringLiteral$1(java.lang.String);
    Code:
       0: getstatic     #80                 // Field morphir/ir/literal$.MODULE$:Lmorphir/ir/literal$;
       3: aload_0
       4: invokevirtual #95                 // Method morphir/ir/literal$.string:(Ljava/lang/String;)Lmorphir/ir/literal$Literal$StringLiteral;
       7: areturn

  public static morphir.ir.literal$Literal$IntLiteral $anonfun$fuzzIntLiteral$1(int);
    Code:
       0: getstatic     #80                 // Field morphir/ir/literal$.MODULE$:Lmorphir/ir/literal$;
       3: iload_0
       4: invokevirtual #101                // Method morphir/ir/literal$.int:(I)Lmorphir/ir/literal$Literal$IntLiteral;
       7: areturn

  public static morphir.ir.literal$Literal$FloatLiteral $anonfun$fuzzFloatLiteral$1(float);
    Code:
       0: getstatic     #80                 // Field morphir/ir/literal$.MODULE$:Lmorphir/ir/literal$;
       3: fload_0
       4: invokevirtual #107                // Method morphir/ir/literal$.float:(F)Lmorphir/ir/literal$Literal$FloatLiteral;
       7: areturn

  public static void $init$(morphir.ir.fuzzer.LiteralFuzzers);
    Code:
       0: aload_0
       1: getstatic     #116                // Field zio/test/Gen$.MODULE$:Lzio/test/Gen$;
       4: invokevirtual #119                // Method zio/test/Gen$.boolean:()Lzio/test/Gen;
       7: invokedynamic #140,  0            // InvokeDynamic #0:apply:()Lscala/Function1;
      12: invokevirtual #146                // Method zio/test/Gen.map:(Lscala/Function1;)Lzio/test/Gen;
      15: invokeinterface #148,  2          // InterfaceMethod morphir$ir$fuzzer$LiteralFuzzers$_setter_$fuzzBoolLiteral_$eq:(Lzio/test/Gen;)V
      20: aload_0
      21: getstatic     #116                // Field zio/test/Gen$.MODULE$:Lzio/test/Gen$;
      24: invokevirtual #151                // Method zio/test/Gen$.anyUnicodeChar:()Lzio/test/Gen;
      27: invokedynamic #158,  0            // InvokeDynamic #1:apply:()Lscala/Function1;
      32: invokevirtual #146                // Method zio/test/Gen.map:(Lscala/Function1;)Lzio/test/Gen;
      35: invokeinterface #160,  2          // InterfaceMethod morphir$ir$fuzzer$LiteralFuzzers$_setter_$fuzzCharLiteral_$eq:(Lzio/test/Gen;)V
      40: aload_0
      41: getstatic     #116                // Field zio/test/Gen$.MODULE$:Lzio/test/Gen$;
      44: invokevirtual #163                // Method zio/test/Gen$.alphaNumericString:()Lzio/test/Gen;
      47: invokedynamic #168,  0            // InvokeDynamic #2:apply:()Lscala/Function1;
      52: invokevirtual #146                // Method zio/test/Gen.map:(Lscala/Function1;)Lzio/test/Gen;
      55: invokeinterface #170,  2          // InterfaceMethod morphir$ir$fuzzer$LiteralFuzzers$_setter_$fuzzStringLiteral_$eq:(Lzio/test/Gen;)V
      60: aload_0
      61: getstatic     #116                // Field zio/test/Gen$.MODULE$:Lzio/test/Gen$;
      64: invokevirtual #173                // Method zio/test/Gen$.anyInt:()Lzio/test/Gen;
      67: invokedynamic #180,  0            // InvokeDynamic #3:apply:()Lscala/Function1;
      72: invokevirtual #146                // Method zio/test/Gen.map:(Lscala/Function1;)Lzio/test/Gen;
      75: invokeinterface #182,  2          // InterfaceMethod morphir$ir$fuzzer$LiteralFuzzers$_setter_$fuzzIntLiteral_$eq:(Lzio/test/Gen;)V
      80: aload_0
      81: getstatic     #116                // Field zio/test/Gen$.MODULE$:Lzio/test/Gen$;
      84: invokevirtual #185                // Method zio/test/Gen$.anyFloat:()Lzio/test/Gen;
      87: invokedynamic #192,  0            // InvokeDynamic #4:apply:()Lscala/Function1;
      92: invokevirtual #146                // Method zio/test/Gen.map:(Lscala/Function1;)Lzio/test/Gen;
      95: invokeinterface #194,  2          // InterfaceMethod morphir$ir$fuzzer$LiteralFuzzers$_setter_$fuzzFloatLiteral_$eq:(Lzio/test/Gen;)V
     100: aload_0
     101: getstatic     #116                // Field zio/test/Gen$.MODULE$:Lzio/test/Gen$;
     104: getstatic     #199                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
     107: iconst_5
     108: anewarray     #142                // class zio/test/Gen
     111: dup
     112: iconst_0
     113: aload_0
     114: invokeinterface #201,  1          // InterfaceMethod fuzzBoolLiteral:()Lzio/test/Gen;
     119: aastore
     120: dup
     121: iconst_1
     122: aload_0
     123: invokeinterface #203,  1          // InterfaceMethod fuzzCharLiteral:()Lzio/test/Gen;
     128: aastore
     129: dup
     130: iconst_2
     131: aload_0
     132: invokeinterface #205,  1          // InterfaceMethod fuzzStringLiteral:()Lzio/test/Gen;
     137: aastore
     138: dup
     139: iconst_3
     140: aload_0
     141: invokeinterface #207,  1          // InterfaceMethod fuzzIntLiteral:()Lzio/test/Gen;
     146: aastore
     147: dup
     148: iconst_4
     149: aload_0
     150: invokeinterface #209,  1          // InterfaceMethod fuzzFloatLiteral:()Lzio/test/Gen;
     155: aastore
     156: checkcast     #211                // class "[Ljava/lang/Object;"
     159: invokevirtual #215                // Method scala/runtime/ScalaRunTime$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/immutable/ArraySeq;
     162: invokevirtual #219                // Method zio/test/Gen$.oneOf:(Lscala/collection/immutable/Seq;)Lzio/test/Gen;
     165: invokeinterface #221,  2          // InterfaceMethod morphir$ir$fuzzer$LiteralFuzzers$_setter_$fuzzLiteral_$eq:(Lzio/test/Gen;)V
     170: return

  public static morphir.ir.literal$Literal$BoolLiteral $anonfun$fuzzBoolLiteral$1$adapted(java.lang.Object);
    Code:
       0: aload_0
       1: invokestatic  #228                // Method scala/runtime/BoxesRunTime.unboxToBoolean:(Ljava/lang/Object;)Z
       4: invokestatic  #230                // InterfaceMethod $anonfun$fuzzBoolLiteral$1:(Z)Lmorphir/ir/literal$Literal$BoolLiteral;
       7: areturn

  public static morphir.ir.literal$Literal$CharLiteral $anonfun$fuzzCharLiteral$1$adapted(java.lang.Object);
    Code:
       0: aload_0
       1: invokestatic  #235                // Method scala/runtime/BoxesRunTime.unboxToChar:(Ljava/lang/Object;)C
       4: invokestatic  #237                // InterfaceMethod $anonfun$fuzzCharLiteral$1:(C)Lmorphir/ir/literal$Literal$CharLiteral;
       7: areturn

  public static morphir.ir.literal$Literal$IntLiteral $anonfun$fuzzIntLiteral$1$adapted(java.lang.Object);
    Code:
       0: aload_0
       1: invokestatic  #241                // Method scala/runtime/BoxesRunTime.unboxToInt:(Ljava/lang/Object;)I
       4: invokestatic  #243                // InterfaceMethod $anonfun$fuzzIntLiteral$1:(I)Lmorphir/ir/literal$Literal$IntLiteral;
       7: areturn

  public static morphir.ir.literal$Literal$FloatLiteral $anonfun$fuzzFloatLiteral$1$adapted(java.lang.Object);
    Code:
       0: aload_0
       1: invokestatic  #247                // Method scala/runtime/BoxesRunTime.unboxToFloat:(Ljava/lang/Object;)F
       4: invokestatic  #249                // InterfaceMethod $anonfun$fuzzFloatLiteral$1:(F)Lmorphir/ir/literal$Literal$FloatLiteral;
       7: areturn

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #261,  0            // InvokeDynamic #5:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
