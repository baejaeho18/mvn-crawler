Compiled from "recursions.scala"
public final class morphir.ir.recursions$Type<Attrib> implements scala.Product, java.io.Serializable {
  private final morphir.ir.recursions$TypeCase<morphir.ir.recursions$Type<Attrib>, Attrib> value;

  public scala.collection.Iterator<java.lang.String> productElementNames();
    Code:
       0: aload_0
       1: invokestatic  #34                 // InterfaceMethod scala/Product.productElementNames$:(Lscala/Product;)Lscala/collection/Iterator;
       4: areturn

  public morphir.ir.recursions$TypeCase<morphir.ir.recursions$Type<Attrib>, Attrib> value();
    Code:
       0: aload_0
       1: getfield      #40                 // Field value:Lmorphir/ir/recursions$TypeCase;
       4: areturn

  public <Attrib2> morphir.ir.recursions$Type<Attrib2> annotate(scala.Function1<morphir.ir.recursions$TypeCase<morphir.ir.recursions$Type<Attrib2>, Attrib>, Attrib2>);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #66,  0             // InvokeDynamic #0:apply:(Lscala/Function1;)Lscala/Function1;
       7: invokevirtual #69                 // Method transformUpRecursive:(Lscala/Function1;)Lmorphir/ir/recursions$Type;
      10: areturn

  public <Z> Z fold(scala.Function1<morphir.ir.recursions$TypeCase<Z, Attrib>, Z>);
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #75                 // Method value:()Lmorphir/ir/recursions$TypeCase;
       5: aload_1
       6: invokedynamic #83,  0             // InvokeDynamic #1:apply:(Lscala/Function1;)Lscala/Function1;
      11: invokeinterface #87,  2           // InterfaceMethod morphir/ir/recursions$TypeCase.map:(Lscala/Function1;)Lmorphir/ir/recursions$TypeCase;
      16: invokeinterface #91,  2           // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      21: areturn

  public <R, E, Z> zio.ZIO<R, E, Z> foldM(scala.Function1<morphir.ir.recursions$TypeCase<Z, Attrib>, zio.ZIO<R, E, Z>>);
    Code:
       0: aload_0
       1: invokevirtual #75                 // Method value:()Lmorphir/ir/recursions$TypeCase;
       4: aload_1
       5: invokedynamic #102,  0            // InvokeDynamic #2:apply:(Lscala/Function1;)Lscala/Function1;
      10: invokeinterface #105,  2          // InterfaceMethod morphir/ir/recursions$TypeCase.mapM:(Lscala/Function1;)Lzio/ZIO;
      15: aload_1
      16: invokeinterface #110,  2          // InterfaceMethod zio/ZIO.flatMap:(Lscala/Function1;)Lzio/ZIO;
      21: areturn

  public <Attrib2> morphir.ir.recursions$Type<Attrib2> transformDown(morphir.ir.recursions$TypeMapper<Attrib, Attrib2>);
    Code:
       0: new           #2                  // class morphir/ir/recursions$Type
       3: dup
       4: aload_1
       5: aload_0
       6: invokevirtual #75                 // Method value:()Lmorphir/ir/recursions$TypeCase;
       9: invokeinterface #115,  2          // InterfaceMethod morphir/ir/recursions$TypeMapper.apply:(Lmorphir/ir/recursions$TypeCase;)Lmorphir/ir/recursions$TypeCase;
      14: aload_1
      15: invokedynamic #125,  0            // InvokeDynamic #3:apply:(Lmorphir/ir/recursions$TypeMapper;)Lscala/Function1;
      20: invokeinterface #87,  2           // InterfaceMethod morphir/ir/recursions$TypeCase.map:(Lscala/Function1;)Lmorphir/ir/recursions$TypeCase;
      25: invokespecial #129                // Method "<init>":(Lmorphir/ir/recursions$TypeCase;)V
      28: areturn

  public <Attrib2> morphir.ir.recursions$Type<Attrib2> transformUp(morphir.ir.recursions$TypeMapper<Attrib, Attrib2>);
    Code:
       0: new           #2                  // class morphir/ir/recursions$Type
       3: dup
       4: aload_1
       5: aload_0
       6: invokevirtual #75                 // Method value:()Lmorphir/ir/recursions$TypeCase;
       9: aload_1
      10: invokedynamic #136,  0            // InvokeDynamic #4:apply:(Lmorphir/ir/recursions$TypeMapper;)Lscala/Function1;
      15: invokeinterface #87,  2           // InterfaceMethod morphir/ir/recursions$TypeCase.map:(Lscala/Function1;)Lmorphir/ir/recursions$TypeCase;
      20: invokeinterface #115,  2          // InterfaceMethod morphir/ir/recursions$TypeMapper.apply:(Lmorphir/ir/recursions$TypeCase;)Lmorphir/ir/recursions$TypeCase;
      25: invokespecial #129                // Method "<init>":(Lmorphir/ir/recursions$TypeCase;)V
      28: areturn

  public <Attrib1, Attrib2> morphir.ir.recursions$Type<Attrib2> transformDownRecursive(scala.Function1<morphir.ir.recursions$TypeCase<morphir.ir.recursions$Type<Attrib1>, Attrib1>, morphir.ir.recursions$TypeCase<morphir.ir.recursions$Type<Attrib1>, Attrib2>>);
    Code:
       0: new           #2                  // class morphir/ir/recursions$Type
       3: dup
       4: aload_1
       5: aload_0
       6: invokevirtual #75                 // Method value:()Lmorphir/ir/recursions$TypeCase;
       9: invokeinterface #91,  2           // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      14: checkcast     #20                 // class morphir/ir/recursions$TypeCase
      17: aload_1
      18: invokedynamic #144,  0            // InvokeDynamic #5:apply:(Lscala/Function1;)Lscala/Function1;
      23: invokeinterface #87,  2           // InterfaceMethod morphir/ir/recursions$TypeCase.map:(Lscala/Function1;)Lmorphir/ir/recursions$TypeCase;
      28: invokespecial #129                // Method "<init>":(Lmorphir/ir/recursions$TypeCase;)V
      31: areturn

  public <Attrib2> morphir.ir.recursions$Type<Attrib2> transformUpRecursive(scala.Function1<morphir.ir.recursions$TypeCase<morphir.ir.recursions$Type<Attrib2>, Attrib>, morphir.ir.recursions$TypeCase<morphir.ir.recursions$Type<Attrib2>, Attrib2>>);
    Code:
       0: new           #2                  // class morphir/ir/recursions$Type
       3: dup
       4: aload_1
       5: aload_0
       6: invokevirtual #75                 // Method value:()Lmorphir/ir/recursions$TypeCase;
       9: aload_1
      10: invokedynamic #150,  0            // InvokeDynamic #6:apply:(Lscala/Function1;)Lscala/Function1;
      15: invokeinterface #87,  2           // InterfaceMethod morphir/ir/recursions$TypeCase.map:(Lscala/Function1;)Lmorphir/ir/recursions$TypeCase;
      20: invokeinterface #91,  2           // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      25: checkcast     #20                 // class morphir/ir/recursions$TypeCase
      28: invokespecial #129                // Method "<init>":(Lmorphir/ir/recursions$TypeCase;)V
      31: areturn

  public <Attrib> morphir.ir.recursions$Type<Attrib> copy(morphir.ir.recursions$TypeCase<morphir.ir.recursions$Type<Attrib>, Attrib>);
    Code:
       0: new           #2                  // class morphir/ir/recursions$Type
       3: dup
       4: aload_1
       5: invokespecial #129                // Method "<init>":(Lmorphir/ir/recursions$TypeCase;)V
       8: areturn

  public <Attrib> morphir.ir.recursions$TypeCase<morphir.ir.recursions$Type<Attrib>, Attrib> copy$default$1();
    Code:
       0: aload_0
       1: invokevirtual #75                 // Method value:()Lmorphir/ir/recursions$TypeCase;
       4: areturn

  public java.lang.String productPrefix();
    Code:
       0: ldc           #158                // String Type
       2: areturn

  public int productArity();
    Code:
       0: iconst_1
       1: ireturn

  public java.lang.Object productElement(int);
    Code:
       0: iload_1
       1: istore_2
       2: iload_2
       3: tableswitch   { // 0 to 0
                     0: 20
               default: 27
          }
      20: aload_0
      21: invokevirtual #75                 // Method value:()Lmorphir/ir/recursions$TypeCase;
      24: goto          34
      27: iload_1
      28: invokestatic  #168                // Method scala/runtime/Statics.ioobe:(I)Ljava/lang/Object;
      31: goto          34
      34: areturn

  public scala.collection.Iterator<java.lang.Object> productIterator();
    Code:
       0: getstatic     #177                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
       3: aload_0
       4: invokevirtual #180                // Method scala/runtime/ScalaRunTime$.typedProductIterator:(Lscala/Product;)Lscala/collection/Iterator;
       7: areturn

  public boolean canEqual(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #2                  // class morphir/ir/recursions$Type
       4: ireturn

  public java.lang.String productElementName(int);
    Code:
       0: iload_1
       1: istore_2
       2: iload_2
       3: tableswitch   { // 0 to 0
                     0: 20
               default: 25
          }
      20: ldc           #186                // String value
      22: goto          35
      25: iload_1
      26: invokestatic  #168                // Method scala/runtime/Statics.ioobe:(I)Ljava/lang/Object;
      29: checkcast     #188                // class java/lang/String
      32: goto          35
      35: areturn

  public int hashCode();
    Code:
       0: getstatic     #177                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
       3: aload_0
       4: invokevirtual #193                // Method scala/runtime/ScalaRunTime$._hashCode:(Lscala/Product;)I
       7: ireturn

  public java.lang.String toString();
    Code:
       0: getstatic     #177                // Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
       3: aload_0
       4: invokevirtual #198                // Method scala/runtime/ScalaRunTime$._toString:(Lscala/Product;)Ljava/lang/String;
       7: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpeq     77
       5: aload_1
       6: astore_3
       7: aload_3
       8: instanceof    #2                  // class morphir/ir/recursions$Type
      11: ifeq          19
      14: iconst_1
      15: istore_2
      16: goto          27
      19: goto          22
      22: iconst_0
      23: istore_2
      24: goto          27
      27: iload_2
      28: ifeq          81
      31: aload_1
      32: checkcast     #2                  // class morphir/ir/recursions$Type
      35: astore        4
      37: aload_0
      38: invokevirtual #75                 // Method value:()Lmorphir/ir/recursions$TypeCase;
      41: aload         4
      43: invokevirtual #75                 // Method value:()Lmorphir/ir/recursions$TypeCase;
      46: astore        5
      48: dup
      49: ifnonnull     61
      52: pop
      53: aload         5
      55: ifnull        69
      58: goto          73
      61: aload         5
      63: invokevirtual #201                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      66: ifeq          73
      69: iconst_1
      70: goto          74
      73: iconst_0
      74: ifeq          81
      77: iconst_1
      78: goto          82
      81: iconst_0
      82: ireturn

  public static final java.lang.Object $anonfun$annotate$2(scala.Function1, morphir.ir.recursions$TypeCase, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #91,  2           // InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       7: areturn

  public static final morphir.ir.recursions$TypeCase $anonfun$annotate$1(scala.Function1, morphir.ir.recursions$TypeCase);
    Code:
       0: aload_1
       1: aload_0
       2: aload_1
       3: invokedynamic #212,  0            // InvokeDynamic #7:apply:(Lscala/Function1;Lmorphir/ir/recursions$TypeCase;)Lscala/Function1;
       8: invokeinterface #215,  2          // InterfaceMethod morphir/ir/recursions$TypeCase.mapAttrib:(Lscala/Function1;)Lmorphir/ir/recursions$TypeCase;
      13: areturn

  public static final java.lang.Object $anonfun$fold$1(scala.Function1, morphir.ir.recursions$Type);
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #219                // Method fold:(Lscala/Function1;)Ljava/lang/Object;
       5: areturn

  public static final zio.ZIO $anonfun$foldM$1(scala.Function1, morphir.ir.recursions$Type);
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #223                // Method foldM:(Lscala/Function1;)Lzio/ZIO;
       5: areturn

  public static final morphir.ir.recursions$Type $anonfun$transformDown$1(morphir.ir.recursions$TypeMapper, morphir.ir.recursions$Type);
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #227                // Method transformDown:(Lmorphir/ir/recursions$TypeMapper;)Lmorphir/ir/recursions$Type;
       5: areturn

  public static final morphir.ir.recursions$Type $anonfun$transformUp$1(morphir.ir.recursions$TypeMapper, morphir.ir.recursions$Type);
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #231                // Method transformUp:(Lmorphir/ir/recursions$TypeMapper;)Lmorphir/ir/recursions$Type;
       5: areturn

  public static final morphir.ir.recursions$Type $anonfun$transformDownRecursive$1(scala.Function1, morphir.ir.recursions$Type);
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #235                // Method transformDownRecursive:(Lscala/Function1;)Lmorphir/ir/recursions$Type;
       5: areturn

  public static final morphir.ir.recursions$Type $anonfun$transformUpRecursive$1(scala.Function1, morphir.ir.recursions$Type);
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #69                 // Method transformUpRecursive:(Lscala/Function1;)Lmorphir/ir/recursions$Type;
       5: areturn

  public morphir.ir.recursions$Type(morphir.ir.recursions$TypeCase<morphir.ir.recursions$Type<Attrib>, Attrib>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #40                 // Field value:Lmorphir/ir/recursions$TypeCase;
       5: aload_0
       6: invokespecial #241                // Method java/lang/Object."<init>":()V
       9: aload_0
      10: invokestatic  #245                // InterfaceMethod scala/Product.$init$:(Lscala/Product;)V
      13: return

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #257,  0            // InvokeDynamic #8:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
