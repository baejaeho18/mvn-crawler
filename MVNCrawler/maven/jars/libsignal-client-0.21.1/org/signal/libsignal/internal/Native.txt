Compiled from "Native.java"
public final class org.signal.libsignal.internal.Native {
  private static void copyToTempFileAndLoad(java.io.InputStream, java.lang.String) throws java.io.IOException;
    Code:
       0: ldc           #1                  // String resource
       2: aload_1
       3: iconst_0
       4: anewarray     #2                  // class java/nio/file/attribute/FileAttribute
       7: invokestatic  #3                  // Method java/nio/file/Files.createTempFile:(Ljava/lang/String;Ljava/lang/String;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path;
      10: invokeinterface #4,  1            // InterfaceMethod java/nio/file/Path.toFile:()Ljava/io/File;
      15: astore_2
      16: aload_2
      17: invokevirtual #5                  // Method java/io/File.deleteOnExit:()V
      20: new           #6                  // class java/io/FileOutputStream
      23: dup
      24: aload_2
      25: invokespecial #7                  // Method java/io/FileOutputStream."<init>":(Ljava/io/File;)V
      28: astore_3
      29: sipush        4096
      32: newarray       byte
      34: astore        4
      36: aload_0
      37: aload         4
      39: invokevirtual #8                  // Method java/io/InputStream.read:([B)I
      42: dup
      43: istore        5
      45: iconst_m1
      46: if_icmpeq     61
      49: aload_3
      50: aload         4
      52: iconst_0
      53: iload         5
      55: invokevirtual #9                  // Method java/io/OutputStream.write:([BII)V
      58: goto          36
      61: aload_3
      62: invokevirtual #10                 // Method java/io/OutputStream.close:()V
      65: goto          89
      68: astore        4
      70: aload_3
      71: invokevirtual #10                 // Method java/io/OutputStream.close:()V
      74: goto          86
      77: astore        5
      79: aload         4
      81: aload         5
      83: invokevirtual #12                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
      86: aload         4
      88: athrow
      89: aload_2
      90: invokevirtual #13                 // Method java/io/File.getAbsolutePath:()Ljava/lang/String;
      93: invokestatic  #14                 // Method java/lang/System.load:(Ljava/lang/String;)V
      96: return
    Exception table:
       from    to  target type
          29    61    68   Class java/lang/Throwable
          70    74    77   Class java/lang/Throwable

  private static void loadLibrary();
    Code:
       0: ldc           #15                 // String os.name
       2: invokestatic  #16                 // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
       5: getstatic     #17                 // Field java/util/Locale.ROOT:Ljava/util/Locale;
       8: invokevirtual #18                 // Method java/lang/String.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;
      11: astore_0
      12: aload_0
      13: ldc           #19                 // String mac os
      15: invokevirtual #20                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      18: istore_1
      19: iload_1
      20: ifeq          28
      23: ldc           #21                 // String .dylib
      25: goto          30
      28: ldc           #22                 // String .so
      30: astore_2
      31: ldc           #23                 // class org/signal/libsignal/internal/Native
      33: new           #24                 // class java/lang/StringBuilder
      36: dup
      37: invokespecial #25                 // Method java/lang/StringBuilder."<init>":()V
      40: ldc           #26                 // String /libsignal_jni
      42: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      45: aload_2
      46: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      49: invokevirtual #28                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      52: invokevirtual #29                 // Method java/lang/Class.getResourceAsStream:(Ljava/lang/String;)Ljava/io/InputStream;
      55: astore_3
      56: aload_3
      57: ifnull        68
      60: aload_3
      61: aload_2
      62: invokestatic  #30                 // Method copyToTempFileAndLoad:(Ljava/io/InputStream;Ljava/lang/String;)V
      65: goto          73
      68: ldc           #31                 // String signal_jni
      70: invokestatic  #32                 // Method java/lang/System.loadLibrary:(Ljava/lang/String;)V
      73: aload_3
      74: ifnull        109
      77: aload_3
      78: invokevirtual #33                 // Method java/io/InputStream.close:()V
      81: goto          109
      84: astore        4
      86: aload_3
      87: ifnull        106
      90: aload_3
      91: invokevirtual #33                 // Method java/io/InputStream.close:()V
      94: goto          106
      97: astore        5
      99: aload         4
     101: aload         5
     103: invokevirtual #12                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
     106: aload         4
     108: athrow
     109: goto          122
     112: astore_0
     113: new           #35                 // class java/lang/RuntimeException
     116: dup
     117: aload_0
     118: invokespecial #36                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/Throwable;)V
     121: athrow
     122: return
    Exception table:
       from    to  target type
          56    73    84   Class java/lang/Throwable
          90    94    97   Class java/lang/Throwable
           0   109   112   Class java/lang/Exception

  private org.signal.libsignal.internal.Native();
    Code:
       0: aload_0
       1: invokespecial #37                 // Method java/lang/Object."<init>":()V
       4: return

  public static native void keepAlive(java.lang.Object);

  public static native void Aes256Ctr32_Destroy(long);

  public static native long Aes256Ctr32_New(byte[], byte[], int);

  public static native void Aes256Ctr32_Process(long, byte[], int, int);

  public static native void Aes256GcmDecryption_Destroy(long);

  public static native long Aes256GcmDecryption_New(byte[], byte[], byte[]);

  public static native void Aes256GcmDecryption_Update(long, byte[], int, int);

  public static native boolean Aes256GcmDecryption_VerifyTag(long, byte[]);

  public static native byte[] Aes256GcmEncryption_ComputeTag(long);

  public static native void Aes256GcmEncryption_Destroy(long);

  public static native long Aes256GcmEncryption_New(byte[], byte[], byte[]);

  public static native void Aes256GcmEncryption_Update(long, byte[], int, int);

  public static native byte[] Aes256GcmSiv_Decrypt(long, byte[], byte[], byte[]);

  public static native void Aes256GcmSiv_Destroy(long);

  public static native byte[] Aes256GcmSiv_Encrypt(long, byte[], byte[], byte[]);

  public static native long Aes256GcmSiv_New(byte[]);

  public static native void AuthCredentialPresentation_CheckValidContents(byte[]);

  public static native byte[] AuthCredentialPresentation_GetPniCiphertext(byte[]);

  public static native long AuthCredentialPresentation_GetRedemptionTime(byte[]);

  public static native byte[] AuthCredentialPresentation_GetUuidCiphertext(byte[]);

  public static native void AuthCredentialResponse_CheckValidContents(byte[]);

  public static native void AuthCredentialWithPniResponse_CheckValidContents(byte[]);

  public static native void AuthCredentialWithPni_CheckValidContents(byte[]);

  public static native void AuthCredential_CheckValidContents(byte[]);

  public static native void Cds2ClientState_CompleteHandshake(long, byte[]);

  public static native void Cds2ClientState_Destroy(long);

  public static native byte[] Cds2ClientState_EstablishedRecv(long, byte[]);

  public static native byte[] Cds2ClientState_EstablishedSend(long, byte[]);

  public static native byte[] Cds2ClientState_InitialRequest(long);

  public static native long Cds2ClientState_New(byte[], byte[], long);

  public static native java.util.Map Cds2Metrics_extract(byte[]);

  public static native void CryptographicHash_Destroy(long);

  public static native byte[] CryptographicHash_Finalize(long);

  public static native long CryptographicHash_New(java.lang.String);

  public static native void CryptographicHash_Update(long, byte[]);

  public static native void CryptographicHash_UpdateWithOffset(long, byte[], int, int);

  public static native void CryptographicMac_Destroy(long);

  public static native byte[] CryptographicMac_Finalize(long);

  public static native long CryptographicMac_New(java.lang.String, byte[]);

  public static native void CryptographicMac_Update(long, byte[]);

  public static native void CryptographicMac_UpdateWithOffset(long, byte[], int, int);

  public static native long DecryptionErrorMessage_Deserialize(byte[]);

  public static native void DecryptionErrorMessage_Destroy(long);

  public static native long DecryptionErrorMessage_ExtractFromSerializedContent(byte[]);

  public static native long DecryptionErrorMessage_ForOriginalMessage(byte[], int, long, int);

  public static native int DecryptionErrorMessage_GetDeviceId(long);

  public static native long DecryptionErrorMessage_GetRatchetKey(long);

  public static native byte[] DecryptionErrorMessage_GetSerialized(long);

  public static native long DecryptionErrorMessage_GetTimestamp(long);

  public static native byte[] DeviceTransfer_GenerateCertificate(byte[], java.lang.String, int);

  public static native byte[] DeviceTransfer_GeneratePrivateKey();

  public static native byte[] ECPrivateKey_Agree(long, long);

  public static native long ECPrivateKey_Deserialize(byte[]);

  public static native void ECPrivateKey_Destroy(long);

  public static native long ECPrivateKey_Generate();

  public static native long ECPrivateKey_GetPublicKey(long);

  public static native byte[] ECPrivateKey_Serialize(long);

  public static native byte[] ECPrivateKey_Sign(long, byte[]);

  public static native int ECPublicKey_Compare(long, long);

  public static native long ECPublicKey_Deserialize(byte[], int);

  public static native void ECPublicKey_Destroy(long);

  public static native byte[] ECPublicKey_GetPublicKeyBytes(long);

  public static native byte[] ECPublicKey_Serialize(long);

  public static native boolean ECPublicKey_Verify(long, byte[], byte[]);

  public static native void ExpiringProfileKeyCredentialResponse_CheckValidContents(byte[]);

  public static native void ExpiringProfileKeyCredential_CheckValidContents(byte[]);

  public static native long ExpiringProfileKeyCredential_GetExpirationTime(byte[]);

  public static native byte[] GroupCipher_DecryptMessage(long, byte[], org.signal.libsignal.protocol.groups.state.SenderKeyStore, java.lang.Object);

  public static native org.signal.libsignal.protocol.message.CiphertextMessage GroupCipher_EncryptMessage(long, java.util.UUID, byte[], org.signal.libsignal.protocol.groups.state.SenderKeyStore, java.lang.Object);

  public static native void GroupMasterKey_CheckValidContents(byte[]);

  public static native void GroupPublicParams_CheckValidContents(byte[]);

  public static native byte[] GroupPublicParams_GetGroupIdentifier(byte[]);

  public static native void GroupSecretParams_CheckValidContents(byte[]);

  public static native byte[] GroupSecretParams_DecryptBlobWithPadding(byte[], byte[]);

  public static native byte[] GroupSecretParams_DecryptProfileKey(byte[], byte[], java.util.UUID);

  public static native java.util.UUID GroupSecretParams_DecryptUuid(byte[], byte[]);

  public static native byte[] GroupSecretParams_DeriveFromMasterKey(byte[]);

  public static native byte[] GroupSecretParams_EncryptBlobWithPaddingDeterministic(byte[], byte[], byte[], int);

  public static native byte[] GroupSecretParams_EncryptProfileKey(byte[], byte[], java.util.UUID);

  public static native byte[] GroupSecretParams_EncryptUuid(byte[], java.util.UUID);

  public static native byte[] GroupSecretParams_GenerateDeterministic(byte[]);

  public static native byte[] GroupSecretParams_GetMasterKey(byte[]);

  public static native byte[] GroupSecretParams_GetPublicParams(byte[]);

  public static native long GroupSessionBuilder_CreateSenderKeyDistributionMessage(long, java.util.UUID, org.signal.libsignal.protocol.groups.state.SenderKeyStore, java.lang.Object);

  public static native void GroupSessionBuilder_ProcessSenderKeyDistributionMessage(long, long, org.signal.libsignal.protocol.groups.state.SenderKeyStore, java.lang.Object);

  public static native byte[] HKDF_DeriveSecrets(int, byte[], byte[], byte[]);

  public static native void HsmEnclaveClient_CompleteHandshake(long, byte[]);

  public static native void HsmEnclaveClient_Destroy(long);

  public static native byte[] HsmEnclaveClient_EstablishedRecv(long, byte[]);

  public static native byte[] HsmEnclaveClient_EstablishedSend(long, byte[]);

  public static native byte[] HsmEnclaveClient_InitialRequest(long);

  public static native long HsmEnclaveClient_New(byte[], byte[]);

  public static native long[] IdentityKeyPair_Deserialize(byte[]);

  public static native byte[] IdentityKeyPair_Serialize(long, long);

  public static native byte[] IdentityKeyPair_SignAlternateIdentity(long, long, long);

  public static native boolean IdentityKey_VerifyAlternateIdentity(long, long, byte[]);

  public static native void Logger_Initialize(int, java.lang.Class);

  public static native void Logger_SetMaxLevel(int);

  public static native void NumericFingerprintGenerator_Destroy(long);

  public static native java.lang.String NumericFingerprintGenerator_GetDisplayString(long);

  public static native byte[] NumericFingerprintGenerator_GetScannableEncoding(long);

  public static native long NumericFingerprintGenerator_New(int, int, byte[], byte[], byte[], byte[]);

  public static native long PlaintextContent_Deserialize(byte[]);

  public static native byte[] PlaintextContent_DeserializeAndGetContent(byte[]);

  public static native void PlaintextContent_Destroy(long);

  public static native long PlaintextContent_FromDecryptionErrorMessage(long);

  public static native byte[] PlaintextContent_GetBody(long);

  public static native byte[] PlaintextContent_GetSerialized(long);

  public static native void PniCredentialPresentation_CheckValidContents(byte[]);

  public static native byte[] PniCredentialPresentation_GetAciCiphertext(byte[]);

  public static native byte[] PniCredentialPresentation_GetPniCiphertext(byte[]);

  public static native byte[] PniCredentialPresentation_GetProfileKeyCiphertext(byte[]);

  public static native void PniCredentialRequestContext_CheckValidContents(byte[]);

  public static native byte[] PniCredentialRequestContext_GetRequest(byte[]);

  public static native void PniCredentialResponse_CheckValidContents(byte[]);

  public static native void PniCredential_CheckValidContents(byte[]);

  public static native void PreKeyBundle_Destroy(long);

  public static native int PreKeyBundle_GetDeviceId(long);

  public static native long PreKeyBundle_GetIdentityKey(long);

  public static native int PreKeyBundle_GetPreKeyId(long);

  public static native long PreKeyBundle_GetPreKeyPublic(long);

  public static native int PreKeyBundle_GetRegistrationId(long);

  public static native int PreKeyBundle_GetSignedPreKeyId(long);

  public static native long PreKeyBundle_GetSignedPreKeyPublic(long);

  public static native byte[] PreKeyBundle_GetSignedPreKeySignature(long);

  public static native long PreKeyBundle_New(int, int, int, long, int, long, byte[], long);

  public static native long PreKeyRecord_Deserialize(byte[]);

  public static native void PreKeyRecord_Destroy(long);

  public static native int PreKeyRecord_GetId(long);

  public static native long PreKeyRecord_GetPrivateKey(long);

  public static native long PreKeyRecord_GetPublicKey(long);

  public static native byte[] PreKeyRecord_GetSerialized(long);

  public static native long PreKeyRecord_New(int, long, long);

  public static native long PreKeySignalMessage_Deserialize(byte[]);

  public static native void PreKeySignalMessage_Destroy(long);

  public static native long PreKeySignalMessage_GetBaseKey(long);

  public static native long PreKeySignalMessage_GetIdentityKey(long);

  public static native int PreKeySignalMessage_GetPreKeyId(long);

  public static native int PreKeySignalMessage_GetRegistrationId(long);

  public static native byte[] PreKeySignalMessage_GetSerialized(long);

  public static native long PreKeySignalMessage_GetSignalMessage(long);

  public static native int PreKeySignalMessage_GetSignedPreKeyId(long);

  public static native int PreKeySignalMessage_GetVersion(long);

  public static native long PreKeySignalMessage_New(int, int, int, int, long, long, long);

  public static native void ProfileKeyCiphertext_CheckValidContents(byte[]);

  public static native void ProfileKeyCommitment_CheckValidContents(byte[]);

  public static native void ProfileKeyCredentialPresentation_CheckValidContents(byte[]);

  public static native byte[] ProfileKeyCredentialPresentation_GetProfileKeyCiphertext(byte[]);

  public static native byte[] ProfileKeyCredentialPresentation_GetStructurallyValidV1PresentationBytes(byte[]);

  public static native byte[] ProfileKeyCredentialPresentation_GetUuidCiphertext(byte[]);

  public static native void ProfileKeyCredentialRequestContext_CheckValidContents(byte[]);

  public static native byte[] ProfileKeyCredentialRequestContext_GetRequest(byte[]);

  public static native void ProfileKeyCredentialRequest_CheckValidContents(byte[]);

  public static native void ProfileKeyCredentialResponse_CheckValidContents(byte[]);

  public static native void ProfileKeyCredential_CheckValidContents(byte[]);

  public static native void ProfileKey_CheckValidContents(byte[]);

  public static native byte[] ProfileKey_GetCommitment(byte[], java.util.UUID);

  public static native byte[] ProfileKey_GetProfileKeyVersion(byte[], java.util.UUID);

  public static native void ProtocolAddress_Destroy(long);

  public static native int ProtocolAddress_DeviceId(long);

  public static native java.lang.String ProtocolAddress_Name(long);

  public static native long ProtocolAddress_New(java.lang.String, int);

  public static native void ReceiptCredentialPresentation_CheckValidContents(byte[]);

  public static native long ReceiptCredentialPresentation_GetReceiptExpirationTime(byte[]);

  public static native long ReceiptCredentialPresentation_GetReceiptLevel(byte[]);

  public static native byte[] ReceiptCredentialPresentation_GetReceiptSerial(byte[]);

  public static native void ReceiptCredentialRequestContext_CheckValidContents(byte[]);

  public static native byte[] ReceiptCredentialRequestContext_GetRequest(byte[]);

  public static native void ReceiptCredentialRequest_CheckValidContents(byte[]);

  public static native void ReceiptCredentialResponse_CheckValidContents(byte[]);

  public static native void ReceiptCredential_CheckValidContents(byte[]);

  public static native long ReceiptCredential_GetReceiptExpirationTime(byte[]);

  public static native long ReceiptCredential_GetReceiptLevel(byte[]);

  public static native boolean ScannableFingerprint_Compare(byte[], byte[]);

  public static native long SealedSessionCipher_DecryptToUsmc(byte[], org.signal.libsignal.protocol.state.IdentityKeyStore, java.lang.Object);

  public static native byte[] SealedSessionCipher_Encrypt(long, long, org.signal.libsignal.protocol.state.IdentityKeyStore, java.lang.Object);

  public static native byte[] SealedSessionCipher_MultiRecipientEncrypt(long[], long[], long, org.signal.libsignal.protocol.state.IdentityKeyStore, java.lang.Object);

  public static native byte[] SealedSessionCipher_MultiRecipientMessageForSingleRecipient(byte[]);

  public static native long SenderCertificate_Deserialize(byte[]);

  public static native void SenderCertificate_Destroy(long);

  public static native byte[] SenderCertificate_GetCertificate(long);

  public static native int SenderCertificate_GetDeviceId(long);

  public static native long SenderCertificate_GetExpiration(long);

  public static native long SenderCertificate_GetKey(long);

  public static native java.lang.String SenderCertificate_GetSenderE164(long);

  public static native java.lang.String SenderCertificate_GetSenderUuid(long);

  public static native byte[] SenderCertificate_GetSerialized(long);

  public static native long SenderCertificate_GetServerCertificate(long);

  public static native byte[] SenderCertificate_GetSignature(long);

  public static native long SenderCertificate_New(java.lang.String, java.lang.String, int, long, long, long, long);

  public static native boolean SenderCertificate_Validate(long, long, long);

  public static native long SenderKeyDistributionMessage_Deserialize(byte[]);

  public static native void SenderKeyDistributionMessage_Destroy(long);

  public static native int SenderKeyDistributionMessage_GetChainId(long);

  public static native byte[] SenderKeyDistributionMessage_GetChainKey(long);

  public static native java.util.UUID SenderKeyDistributionMessage_GetDistributionId(long);

  public static native int SenderKeyDistributionMessage_GetIteration(long);

  public static native byte[] SenderKeyDistributionMessage_GetSerialized(long);

  public static native long SenderKeyDistributionMessage_GetSignatureKey(long);

  public static native long SenderKeyDistributionMessage_New(int, java.util.UUID, int, int, byte[], long);

  public static native long SenderKeyMessage_Deserialize(byte[]);

  public static native void SenderKeyMessage_Destroy(long);

  public static native int SenderKeyMessage_GetChainId(long);

  public static native byte[] SenderKeyMessage_GetCipherText(long);

  public static native java.util.UUID SenderKeyMessage_GetDistributionId(long);

  public static native int SenderKeyMessage_GetIteration(long);

  public static native byte[] SenderKeyMessage_GetSerialized(long);

  public static native long SenderKeyMessage_New(int, java.util.UUID, int, int, byte[], long);

  public static native boolean SenderKeyMessage_VerifySignature(long, long);

  public static native long SenderKeyRecord_Deserialize(byte[]);

  public static native void SenderKeyRecord_Destroy(long);

  public static native byte[] SenderKeyRecord_GetSerialized(long);

  public static native long ServerCertificate_Deserialize(byte[]);

  public static native void ServerCertificate_Destroy(long);

  public static native byte[] ServerCertificate_GetCertificate(long);

  public static native long ServerCertificate_GetKey(long);

  public static native int ServerCertificate_GetKeyId(long);

  public static native byte[] ServerCertificate_GetSerialized(long);

  public static native byte[] ServerCertificate_GetSignature(long);

  public static native long ServerCertificate_New(int, long, long);

  public static native void ServerPublicParams_CheckValidContents(byte[]);

  public static native byte[] ServerPublicParams_CreateAuthCredentialPresentationDeterministic(byte[], byte[], byte[], byte[]);

  public static native byte[] ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic(byte[], byte[], byte[], byte[]);

  public static native byte[] ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic(byte[], byte[], byte[], byte[]);

  public static native byte[] ServerPublicParams_CreatePniCredentialPresentationDeterministic(byte[], byte[], byte[], byte[]);

  public static native byte[] ServerPublicParams_CreatePniCredentialRequestContextDeterministic(byte[], byte[], java.util.UUID, java.util.UUID, byte[]);

  public static native byte[] ServerPublicParams_CreateProfileKeyCredentialPresentationDeterministic(byte[], byte[], byte[], byte[]);

  public static native byte[] ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic(byte[], byte[], java.util.UUID, byte[]);

  public static native byte[] ServerPublicParams_CreateReceiptCredentialPresentationDeterministic(byte[], byte[], byte[]);

  public static native byte[] ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic(byte[], byte[], byte[]);

  public static native byte[] ServerPublicParams_ReceiveAuthCredential(byte[], java.util.UUID, int, byte[]);

  public static native byte[] ServerPublicParams_ReceiveAuthCredentialWithPni(byte[], java.util.UUID, java.util.UUID, long, byte[]);

  public static native byte[] ServerPublicParams_ReceiveExpiringProfileKeyCredential(byte[], byte[], byte[], long);

  public static native byte[] ServerPublicParams_ReceivePniCredential(byte[], byte[], byte[]);

  public static native byte[] ServerPublicParams_ReceiveProfileKeyCredential(byte[], byte[], byte[]);

  public static native byte[] ServerPublicParams_ReceiveReceiptCredential(byte[], byte[], byte[]);

  public static native void ServerPublicParams_VerifySignature(byte[], byte[], byte[]);

  public static native void ServerSecretParams_CheckValidContents(byte[]);

  public static native byte[] ServerSecretParams_GenerateDeterministic(byte[]);

  public static native byte[] ServerSecretParams_GetPublicParams(byte[]);

  public static native byte[] ServerSecretParams_IssueAuthCredentialDeterministic(byte[], byte[], java.util.UUID, int);

  public static native byte[] ServerSecretParams_IssueAuthCredentialWithPniDeterministic(byte[], byte[], java.util.UUID, java.util.UUID, long);

  public static native byte[] ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic(byte[], byte[], byte[], java.util.UUID, byte[], long);

  public static native byte[] ServerSecretParams_IssuePniCredentialDeterministic(byte[], byte[], byte[], java.util.UUID, java.util.UUID, byte[]);

  public static native byte[] ServerSecretParams_IssueProfileKeyCredentialDeterministic(byte[], byte[], byte[], java.util.UUID, byte[]);

  public static native byte[] ServerSecretParams_IssueReceiptCredentialDeterministic(byte[], byte[], byte[], long, long);

  public static native byte[] ServerSecretParams_SignDeterministic(byte[], byte[], byte[]);

  public static native void ServerSecretParams_VerifyAuthCredentialPresentation(byte[], byte[], byte[], long);

  public static native void ServerSecretParams_VerifyPniCredentialPresentation(byte[], byte[], byte[]);

  public static native void ServerSecretParams_VerifyProfileKeyCredentialPresentation(byte[], byte[], byte[], long);

  public static native void ServerSecretParams_VerifyReceiptCredentialPresentation(byte[], byte[]);

  public static native void SessionBuilder_ProcessPreKeyBundle(long, long, org.signal.libsignal.protocol.state.SessionStore, org.signal.libsignal.protocol.state.IdentityKeyStore, java.lang.Object);

  public static native byte[] SessionCipher_DecryptPreKeySignalMessage(long, long, org.signal.libsignal.protocol.state.SessionStore, org.signal.libsignal.protocol.state.IdentityKeyStore, org.signal.libsignal.protocol.state.PreKeyStore, org.signal.libsignal.protocol.state.SignedPreKeyStore, java.lang.Object);

  public static native byte[] SessionCipher_DecryptSignalMessage(long, long, org.signal.libsignal.protocol.state.SessionStore, org.signal.libsignal.protocol.state.IdentityKeyStore, java.lang.Object);

  public static native org.signal.libsignal.protocol.message.CiphertextMessage SessionCipher_EncryptMessage(byte[], long, org.signal.libsignal.protocol.state.SessionStore, org.signal.libsignal.protocol.state.IdentityKeyStore, java.lang.Object);

  public static native void SessionRecord_ArchiveCurrentState(long);

  public static native boolean SessionRecord_CurrentRatchetKeyMatches(long, long);

  public static native long SessionRecord_Deserialize(byte[]);

  public static native void SessionRecord_Destroy(long);

  public static native long SessionRecord_FromSingleSessionState(byte[]);

  public static native byte[] SessionRecord_GetAliceBaseKey(long);

  public static native byte[] SessionRecord_GetLocalIdentityKeyPublic(long);

  public static native int SessionRecord_GetLocalRegistrationId(long);

  public static native byte[] SessionRecord_GetReceiverChainKeyValue(long, long);

  public static native byte[] SessionRecord_GetRemoteIdentityKeyPublic(long);

  public static native int SessionRecord_GetRemoteRegistrationId(long);

  public static native byte[] SessionRecord_GetSenderChainKeyValue(long);

  public static native int SessionRecord_GetSessionVersion(long);

  public static native boolean SessionRecord_HasSenderChain(long);

  public static native long SessionRecord_InitializeAliceSession(long, long, long, long, long, long, long);

  public static native long SessionRecord_InitializeBobSession(long, long, long, long, long, long, long, long);

  public static native long SessionRecord_NewFresh();

  public static native byte[] SessionRecord_Serialize(long);

  public static native long SignalMessage_Deserialize(byte[]);

  public static native void SignalMessage_Destroy(long);

  public static native byte[] SignalMessage_GetBody(long);

  public static native int SignalMessage_GetCounter(long);

  public static native int SignalMessage_GetMessageVersion(long);

  public static native long SignalMessage_GetSenderRatchetKey(long);

  public static native byte[] SignalMessage_GetSerialized(long);

  public static native long SignalMessage_New(int, byte[], long, int, int, byte[], long, long);

  public static native boolean SignalMessage_VerifyMac(long, long, long, byte[]);

  public static native long SignedPreKeyRecord_Deserialize(byte[]);

  public static native void SignedPreKeyRecord_Destroy(long);

  public static native int SignedPreKeyRecord_GetId(long);

  public static native long SignedPreKeyRecord_GetPrivateKey(long);

  public static native long SignedPreKeyRecord_GetPublicKey(long);

  public static native byte[] SignedPreKeyRecord_GetSerialized(long);

  public static native byte[] SignedPreKeyRecord_GetSignature(long);

  public static native long SignedPreKeyRecord_GetTimestamp(long);

  public static native long SignedPreKeyRecord_New(int, long, long, long, byte[]);

  public static native long UnidentifiedSenderMessageContent_Deserialize(byte[]);

  public static native void UnidentifiedSenderMessageContent_Destroy(long);

  public static native int UnidentifiedSenderMessageContent_GetContentHint(long);

  public static native byte[] UnidentifiedSenderMessageContent_GetContents(long);

  public static native byte[] UnidentifiedSenderMessageContent_GetGroupId(long);

  public static native int UnidentifiedSenderMessageContent_GetMsgType(long);

  public static native long UnidentifiedSenderMessageContent_GetSenderCert(long);

  public static native byte[] UnidentifiedSenderMessageContent_GetSerialized(long);

  public static native long UnidentifiedSenderMessageContent_New(org.signal.libsignal.protocol.message.CiphertextMessage, long, int, byte[]);

  public static native void UuidCiphertext_CheckValidContents(byte[]);

  static {};
    Code:
       0: invokestatic  #38                 // Method loadLibrary:()V
       3: iconst_4
       4: ldc           #40                 // class org/signal/libsignal/protocol/logging/Log
       6: invokestatic  #41                 // Method Logger_Initialize:(ILjava/lang/Class;)V
       9: return
}
