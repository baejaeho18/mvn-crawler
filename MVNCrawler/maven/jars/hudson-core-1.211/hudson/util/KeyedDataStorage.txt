Compiled from "KeyedDataStorage.java"
public abstract class hudson.util.KeyedDataStorage<T, P> {
  private final java.util.concurrent.ConcurrentHashMap<java.lang.String, java.lang.Object> core;

  public final java.util.concurrent.atomic.AtomicInteger totalQuery;

  public final java.util.concurrent.atomic.AtomicInteger cacheHit;

  public final java.util.concurrent.atomic.AtomicInteger weakRefLost;

  public final java.util.concurrent.atomic.AtomicInteger loadFailure;

  public hudson.util.KeyedDataStorage();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/ConcurrentHashMap
       8: dup
       9: invokespecial #3                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      12: putfield      #4                  // Field core:Ljava/util/concurrent/ConcurrentHashMap;
      15: aload_0
      16: new           #5                  // class java/util/concurrent/atomic/AtomicInteger
      19: dup
      20: invokespecial #6                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      23: putfield      #7                  // Field totalQuery:Ljava/util/concurrent/atomic/AtomicInteger;
      26: aload_0
      27: new           #5                  // class java/util/concurrent/atomic/AtomicInteger
      30: dup
      31: invokespecial #6                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      34: putfield      #8                  // Field cacheHit:Ljava/util/concurrent/atomic/AtomicInteger;
      37: aload_0
      38: new           #5                  // class java/util/concurrent/atomic/AtomicInteger
      41: dup
      42: invokespecial #6                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      45: putfield      #9                  // Field weakRefLost:Ljava/util/concurrent/atomic/AtomicInteger;
      48: aload_0
      49: new           #5                  // class java/util/concurrent/atomic/AtomicInteger
      52: dup
      53: invokespecial #6                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      56: putfield      #10                 // Field loadFailure:Ljava/util/concurrent/atomic/AtomicInteger;
      59: return

  public T getOrCreate(java.lang.String, P) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iconst_1
       3: aload_2
       4: invokevirtual #11                 // Method get:(Ljava/lang/String;ZLjava/lang/Object;)Ljava/lang/Object;
       7: areturn

  public T get(java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aconst_null
       4: invokevirtual #11                 // Method get:(Ljava/lang/String;ZLjava/lang/Object;)Ljava/lang/Object;
       7: areturn

  protected T get(java.lang.String, boolean, P) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #7                  // Field totalQuery:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
       7: pop
       8: aload_0
       9: getfield      #4                  // Field core:Ljava/util/concurrent/ConcurrentHashMap;
      12: aload_1
      13: invokevirtual #13                 // Method java/util/concurrent/ConcurrentHashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      16: astore        4
      18: aload         4
      20: instanceof    #14                 // class java/lang/ref/SoftReference
      23: ifeq          64
      26: aload         4
      28: checkcast     #14                 // class java/lang/ref/SoftReference
      31: astore        5
      33: aload         5
      35: invokevirtual #15                 // Method java/lang/ref/SoftReference.get:()Ljava/lang/Object;
      38: astore        6
      40: aload         6
      42: ifnull        56
      45: aload_0
      46: getfield      #8                  // Field cacheHit:Ljava/util/concurrent/atomic/AtomicInteger;
      49: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
      52: pop
      53: aload         6
      55: areturn
      56: aload_0
      57: getfield      #9                  // Field weakRefLost:Ljava/util/concurrent/atomic/AtomicInteger;
      60: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
      63: pop
      64: aload         4
      66: instanceof    #16                 // class hudson/util/KeyedDataStorage$Loading
      69: ifeq          94
      72: aload         4
      74: checkcast     #16                 // class hudson/util/KeyedDataStorage$Loading
      77: invokevirtual #17                 // Method hudson/util/KeyedDataStorage$Loading.get:()Ljava/lang/Object;
      80: astore        5
      82: aload         5
      84: ifnonnull     91
      87: iload_2
      88: ifne          94
      91: aload         5
      93: areturn
      94: new           #16                 // class hudson/util/KeyedDataStorage$Loading
      97: dup
      98: aconst_null
      99: invokespecial #18                 // Method hudson/util/KeyedDataStorage$Loading."<init>":(Lhudson/util/KeyedDataStorage$1;)V
     102: astore        5
     104: aload         4
     106: ifnonnull     125
     109: aload_0
     110: getfield      #4                  // Field core:Ljava/util/concurrent/ConcurrentHashMap;
     113: aload_1
     114: aload         5
     116: invokevirtual #19                 // Method java/util/concurrent/ConcurrentHashMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     119: ifnull        143
     122: goto          0
     125: aload_0
     126: getfield      #4                  // Field core:Ljava/util/concurrent/ConcurrentHashMap;
     129: aload_1
     130: aload         4
     132: aload         5
     134: invokevirtual #20                 // Method java/util/concurrent/ConcurrentHashMap.replace:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
     137: ifne          143
     140: goto          0
     143: aconst_null
     144: astore        6
     146: aload_0
     147: aload_1
     148: invokevirtual #21                 // Method load:(Ljava/lang/String;)Ljava/lang/Object;
     151: astore        6
     153: aload         6
     155: ifnonnull     183
     158: iload_2
     159: ifeq          183
     162: aload_0
     163: aload_1
     164: aload_3
     165: invokevirtual #22                 // Method create:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;
     168: astore        6
     170: aload         6
     172: ifnonnull     183
     175: new           #23                 // class java/lang/IllegalStateException
     178: dup
     179: invokespecial #24                 // Method java/lang/IllegalStateException."<init>":()V
     182: athrow
     183: aload         5
     185: aload         6
     187: invokevirtual #25                 // Method hudson/util/KeyedDataStorage$Loading.set:(Ljava/lang/Object;)V
     190: goto          218
     193: astore        7
     195: aload_0
     196: getfield      #10                 // Field loadFailure:Ljava/util/concurrent/atomic/AtomicInteger;
     199: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
     202: pop
     203: aload         7
     205: athrow
     206: astore        8
     208: aload         5
     210: aload         6
     212: invokevirtual #25                 // Method hudson/util/KeyedDataStorage$Loading.set:(Ljava/lang/Object;)V
     215: aload         8
     217: athrow
     218: aload         6
     220: ifnull        244
     223: aload_0
     224: getfield      #4                  // Field core:Ljava/util/concurrent/ConcurrentHashMap;
     227: aload_1
     228: new           #14                 // class java/lang/ref/SoftReference
     231: dup
     232: aload         6
     234: invokespecial #27                 // Method java/lang/ref/SoftReference."<init>":(Ljava/lang/Object;)V
     237: invokevirtual #28                 // Method java/util/concurrent/ConcurrentHashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     240: pop
     241: goto          253
     244: aload_0
     245: getfield      #4                  // Field core:Ljava/util/concurrent/ConcurrentHashMap;
     248: aload_1
     249: invokevirtual #29                 // Method java/util/concurrent/ConcurrentHashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
     252: pop
     253: aload         6
     255: areturn
    Exception table:
       from    to  target type
         146   183   193   Class java/io/IOException
         146   183   206   any
         193   208   206   any

  protected abstract T load(java.lang.String) throws java.io.IOException;

  protected abstract T create(java.lang.String, P) throws java.io.IOException;

  public void resetPerformanceStats();
    Code:
       0: aload_0
       1: getfield      #7                  // Field totalQuery:Ljava/util/concurrent/atomic/AtomicInteger;
       4: iconst_0
       5: invokevirtual #30                 // Method java/util/concurrent/atomic/AtomicInteger.set:(I)V
       8: aload_0
       9: getfield      #8                  // Field cacheHit:Ljava/util/concurrent/atomic/AtomicInteger;
      12: iconst_0
      13: invokevirtual #30                 // Method java/util/concurrent/atomic/AtomicInteger.set:(I)V
      16: aload_0
      17: getfield      #9                  // Field weakRefLost:Ljava/util/concurrent/atomic/AtomicInteger;
      20: iconst_0
      21: invokevirtual #30                 // Method java/util/concurrent/atomic/AtomicInteger.set:(I)V
      24: aload_0
      25: getfield      #10                 // Field loadFailure:Ljava/util/concurrent/atomic/AtomicInteger;
      28: iconst_0
      29: invokevirtual #30                 // Method java/util/concurrent/atomic/AtomicInteger.set:(I)V
      32: return

  public java.lang.String getPerformanceStats();
    Code:
       0: aload_0
       1: getfield      #7                  // Field totalQuery:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #31                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       7: istore_1
       8: aload_0
       9: getfield      #8                  // Field cacheHit:Ljava/util/concurrent/atomic/AtomicInteger;
      12: invokevirtual #31                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      15: istore_2
      16: aload_0
      17: getfield      #9                  // Field weakRefLost:Ljava/util/concurrent/atomic/AtomicInteger;
      20: invokevirtual #31                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      23: istore_3
      24: aload_0
      25: getfield      #10                 // Field loadFailure:Ljava/util/concurrent/atomic/AtomicInteger;
      28: invokevirtual #31                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      31: istore        4
      33: iload_1
      34: iload_2
      35: isub
      36: iload_3
      37: isub
      38: istore        5
      40: ldc           #32                 // String total={0} hit={1}% lostRef={2}% failure={3}% miss={4}%
      42: iconst_5
      43: anewarray     #33                 // class java/lang/Object
      46: dup
      47: iconst_0
      48: iload_1
      49: invokestatic  #34                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      52: aastore
      53: dup
      54: iconst_1
      55: iload_2
      56: invokestatic  #34                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      59: aastore
      60: dup
      61: iconst_2
      62: iload_3
      63: invokestatic  #34                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      66: aastore
      67: dup
      68: iconst_3
      69: iload         4
      71: invokestatic  #34                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      74: aastore
      75: dup
      76: iconst_4
      77: iload         5
      79: invokestatic  #34                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      82: aastore
      83: invokestatic  #35                 // Method java/text/MessageFormat.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      86: areturn
}
