Compiled from "BaseParser.java"
abstract class hudson.scheduler.BaseParser extends antlr.LLkParser {
  private static final int[] LOWER_BOUNDS;

  private static final int[] UPPER_BOUNDS;

  protected hudson.scheduler.BaseParser(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #1                  // Method antlr/LLkParser."<init>":(I)V
       5: return

  protected hudson.scheduler.BaseParser(antlr.ParserSharedInputState, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokespecial #2                  // Method antlr/LLkParser."<init>":(Lantlr/ParserSharedInputState;I)V
       6: return

  protected hudson.scheduler.BaseParser(antlr.TokenBuffer, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokespecial #3                  // Method antlr/LLkParser."<init>":(Lantlr/TokenBuffer;I)V
       6: return

  protected hudson.scheduler.BaseParser(antlr.TokenStream, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokespecial #4                  // Method antlr/LLkParser."<init>":(Lantlr/TokenStream;I)V
       6: return

  protected long doRange(int, int, int, int) throws antlr.ANTLRException;
    Code:
       0: aload_0
       1: iload_1
       2: iload         4
       4: invokevirtual #5                  // Method rangeCheck:(II)V
       7: aload_0
       8: iload_2
       9: iload         4
      11: invokevirtual #5                  // Method rangeCheck:(II)V
      14: iload_3
      15: ifgt          29
      18: aload_0
      19: iload_3
      20: invokestatic  #6                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      23: invokestatic  #7                  // Method hudson/scheduler/Messages.BaseParser_MustBePositive:(Ljava/lang/Object;)Ljava/lang/String;
      26: invokespecial #8                  // Method error:(Ljava/lang/String;)V
      29: iload_1
      30: iload_2
      31: if_icmple     49
      34: aload_0
      35: iload_2
      36: invokestatic  #6                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      39: iload_1
      40: invokestatic  #6                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      43: invokestatic  #9                  // Method hudson/scheduler/Messages.BaseParser_StartEndReversed:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;
      46: invokespecial #8                  // Method error:(Ljava/lang/String;)V
      49: lconst_0
      50: lstore        5
      52: iload_1
      53: istore        7
      55: iload         7
      57: iload_2
      58: if_icmpgt     79
      61: lload         5
      63: lconst_1
      64: iload         7
      66: lshl
      67: lor
      68: lstore        5
      70: iload         7
      72: iload_3
      73: iadd
      74: istore        7
      76: goto          55
      79: lload         5
      81: lreturn

  protected long doRange(int, int) throws antlr.ANTLRException;
    Code:
       0: aload_0
       1: getstatic     #10                 // Field LOWER_BOUNDS:[I
       4: iload_2
       5: iaload
       6: getstatic     #11                 // Field UPPER_BOUNDS:[I
       9: iload_2
      10: iaload
      11: iload_1
      12: iload_2
      13: invokevirtual #12                 // Method doRange:(IIII)J
      16: lreturn

  protected void rangeCheck(int, int) throws antlr.ANTLRException;
    Code:
       0: iload_1
       1: getstatic     #10                 // Field LOWER_BOUNDS:[I
       4: iload_2
       5: iaload
       6: if_icmplt     18
       9: getstatic     #11                 // Field UPPER_BOUNDS:[I
      12: iload_2
      13: iaload
      14: iload_1
      15: if_icmpge     45
      18: aload_0
      19: iload_1
      20: invokestatic  #6                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      23: getstatic     #10                 // Field LOWER_BOUNDS:[I
      26: iload_2
      27: iaload
      28: invokestatic  #6                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      31: getstatic     #11                 // Field UPPER_BOUNDS:[I
      34: iload_2
      35: iaload
      36: invokestatic  #6                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      39: invokestatic  #13                 // Method hudson/scheduler/Messages.BaseParser_OutOfRange:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/String;
      42: invokespecial #8                  // Method error:(Ljava/lang/String;)V
      45: return

  private void error(java.lang.String) throws antlr.TokenStreamException, antlr.SemanticException;
    Code:
       0: aload_0
       1: iconst_0
       2: invokevirtual #14                 // Method LT:(I)Lantlr/Token;
       5: astore_2
       6: new           #15                 // class antlr/SemanticException
       9: dup
      10: aload_1
      11: aload_2
      12: invokevirtual #16                 // Method antlr/Token.getFilename:()Ljava/lang/String;
      15: aload_2
      16: invokevirtual #17                 // Method antlr/Token.getLine:()I
      19: aload_2
      20: invokevirtual #18                 // Method antlr/Token.getColumn:()I
      23: invokespecial #19                 // Method antlr/SemanticException."<init>":(Ljava/lang/String;Ljava/lang/String;II)V
      26: athrow

  static {};
    Code:
       0: iconst_5
       1: newarray       int
       3: dup
       4: iconst_0
       5: iconst_0
       6: iastore
       7: dup
       8: iconst_1
       9: iconst_0
      10: iastore
      11: dup
      12: iconst_2
      13: iconst_1
      14: iastore
      15: dup
      16: iconst_3
      17: iconst_0
      18: iastore
      19: dup
      20: iconst_4
      21: iconst_0
      22: iastore
      23: putstatic     #10                 // Field LOWER_BOUNDS:[I
      26: iconst_5
      27: newarray       int
      29: dup
      30: iconst_0
      31: bipush        59
      33: iastore
      34: dup
      35: iconst_1
      36: bipush        23
      38: iastore
      39: dup
      40: iconst_2
      41: bipush        31
      43: iastore
      44: dup
      45: iconst_3
      46: bipush        12
      48: iastore
      49: dup
      50: iconst_4
      51: bipush        7
      53: iastore
      54: putstatic     #11                 // Field UPPER_BOUNDS:[I
      57: return
}
