Compiled from "BatchSubscriptionPolicy.java"
public class pl.allegro.tech.hermes.api.BatchSubscriptionPolicy {
  private static final int DEFAULT_MESSAGE_TTL;

  private static final int DEFAULT_MESSAGE_BACKOFF;

  private static final int DEFAULT_REQUEST_TIMEOUT;

  private static final int DEFAULT_BATCH_SIZE;

  private static final int DEFAULT_BATCH_TIME;

  private static final int DEFAULT_BATCH_VOLUME;

  private int messageTtl;

  private boolean retryClientErrors;

  private int messageBackoff;

  private int requestTimeout;

  private int batchSize;

  private int batchTime;

  private int batchVolume;

  private pl.allegro.tech.hermes.api.BatchSubscriptionPolicy();
    Code:
       0: aload_0
       1: invokespecial #9                  // Method java/lang/Object."<init>":()V
       4: return

  public pl.allegro.tech.hermes.api.BatchSubscriptionPolicy(int, boolean, int, int, int, int, int);
    Code:
       0: aload_0
       1: invokespecial #9                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iload_1
       6: putfield      #7                  // Field messageTtl:I
       9: aload_0
      10: iload_2
      11: putfield      #5                  // Field retryClientErrors:Z
      14: aload_0
      15: iload_3
      16: putfield      #6                  // Field messageBackoff:I
      19: aload_0
      20: iload         4
      22: putfield      #1                  // Field requestTimeout:I
      25: aload_0
      26: iload         5
      28: putfield      #4                  // Field batchSize:I
      31: aload_0
      32: iload         6
      34: putfield      #3                  // Field batchTime:I
      37: aload_0
      38: iload         7
      40: putfield      #2                  // Field batchVolume:I
      43: return

  public static pl.allegro.tech.hermes.api.BatchSubscriptionPolicy create(java.util.Map<java.lang.String, java.lang.Object>);
    Code:
       0: new           #10                 // class pl/allegro/tech/hermes/api/BatchSubscriptionPolicy
       3: dup
       4: aload_0
       5: ldc           #11                 // String messageTtl
       7: ldc           #12                 // int 60000
       9: invokestatic  #13                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      12: invokeinterface #14,  3           // InterfaceMethod java/util/Map.getOrDefault:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      17: checkcast     #15                 // class java/lang/Integer
      20: invokevirtual #16                 // Method java/lang/Integer.intValue:()I
      23: aload_0
      24: ldc           #17                 // String retryClientErrors
      26: iconst_0
      27: invokestatic  #18                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      30: invokeinterface #14,  3           // InterfaceMethod java/util/Map.getOrDefault:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      35: checkcast     #19                 // class java/lang/Boolean
      38: invokevirtual #20                 // Method java/lang/Boolean.booleanValue:()Z
      41: aload_0
      42: ldc           #21                 // String messageBackoff
      44: sipush        500
      47: invokestatic  #13                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      50: invokeinterface #14,  3           // InterfaceMethod java/util/Map.getOrDefault:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      55: checkcast     #15                 // class java/lang/Integer
      58: invokevirtual #16                 // Method java/lang/Integer.intValue:()I
      61: aload_0
      62: ldc           #22                 // String requestTimeout
      64: sipush        30000
      67: invokestatic  #13                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      70: invokeinterface #14,  3           // InterfaceMethod java/util/Map.getOrDefault:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      75: checkcast     #15                 // class java/lang/Integer
      78: invokevirtual #16                 // Method java/lang/Integer.intValue:()I
      81: aload_0
      82: ldc           #23                 // String batchSize
      84: bipush        100
      86: invokestatic  #13                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      89: invokeinterface #14,  3           // InterfaceMethod java/util/Map.getOrDefault:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      94: checkcast     #15                 // class java/lang/Integer
      97: invokevirtual #16                 // Method java/lang/Integer.intValue:()I
     100: aload_0
     101: ldc           #24                 // String batchTime
     103: sipush        30000
     106: invokestatic  #13                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     109: invokeinterface #14,  3           // InterfaceMethod java/util/Map.getOrDefault:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     114: checkcast     #15                 // class java/lang/Integer
     117: invokevirtual #16                 // Method java/lang/Integer.intValue:()I
     120: aload_0
     121: ldc           #25                 // String batchVolume
     123: ldc           #26                 // int 64000
     125: invokestatic  #13                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     128: invokeinterface #14,  3           // InterfaceMethod java/util/Map.getOrDefault:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     133: checkcast     #15                 // class java/lang/Integer
     136: invokevirtual #16                 // Method java/lang/Integer.intValue:()I
     139: invokespecial #27                 // Method "<init>":(IZIIIII)V
     142: areturn

  public int hashCode();
    Code:
       0: bipush        7
       2: anewarray     #28                 // class java/lang/Object
       5: dup
       6: iconst_0
       7: aload_0
       8: getfield      #7                  // Field messageTtl:I
      11: invokestatic  #13                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      14: aastore
      15: dup
      16: iconst_1
      17: aload_0
      18: getfield      #5                  // Field retryClientErrors:Z
      21: invokestatic  #18                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      24: aastore
      25: dup
      26: iconst_2
      27: aload_0
      28: getfield      #6                  // Field messageBackoff:I
      31: invokestatic  #13                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      34: aastore
      35: dup
      36: iconst_3
      37: aload_0
      38: getfield      #1                  // Field requestTimeout:I
      41: invokestatic  #13                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      44: aastore
      45: dup
      46: iconst_4
      47: aload_0
      48: getfield      #4                  // Field batchSize:I
      51: invokestatic  #13                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      54: aastore
      55: dup
      56: iconst_5
      57: aload_0
      58: getfield      #3                  // Field batchTime:I
      61: invokestatic  #13                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      64: aastore
      65: dup
      66: bipush        6
      68: aload_0
      69: getfield      #2                  // Field batchVolume:I
      72: invokestatic  #13                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      75: aastore
      76: invokestatic  #29                 // Method java/util/Objects.hash:([Ljava/lang/Object;)I
      79: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: ifnull        22
      11: aload_0
      12: invokevirtual #30                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      15: aload_1
      16: invokevirtual #30                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      19: if_acmpeq     24
      22: iconst_0
      23: ireturn
      24: aload_1
      25: checkcast     #10                 // class pl/allegro/tech/hermes/api/BatchSubscriptionPolicy
      28: astore_2
      29: aload_0
      30: getfield      #7                  // Field messageTtl:I
      33: invokestatic  #13                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      36: aload_2
      37: getfield      #7                  // Field messageTtl:I
      40: invokestatic  #13                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      43: invokestatic  #31                 // Method java/util/Objects.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
      46: ifeq          173
      49: aload_0
      50: getfield      #5                  // Field retryClientErrors:Z
      53: invokestatic  #18                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      56: aload_2
      57: getfield      #5                  // Field retryClientErrors:Z
      60: invokestatic  #18                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      63: invokestatic  #31                 // Method java/util/Objects.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
      66: ifeq          173
      69: aload_0
      70: getfield      #6                  // Field messageBackoff:I
      73: invokestatic  #13                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      76: aload_2
      77: getfield      #6                  // Field messageBackoff:I
      80: invokestatic  #13                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      83: invokestatic  #31                 // Method java/util/Objects.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
      86: ifeq          173
      89: aload_0
      90: getfield      #1                  // Field requestTimeout:I
      93: invokestatic  #13                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      96: aload_2
      97: getfield      #1                  // Field requestTimeout:I
     100: invokestatic  #13                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     103: invokestatic  #31                 // Method java/util/Objects.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
     106: ifeq          173
     109: aload_0
     110: getfield      #4                  // Field batchSize:I
     113: invokestatic  #13                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     116: aload_2
     117: getfield      #4                  // Field batchSize:I
     120: invokestatic  #13                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     123: invokestatic  #31                 // Method java/util/Objects.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
     126: ifeq          173
     129: aload_0
     130: getfield      #3                  // Field batchTime:I
     133: invokestatic  #13                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     136: aload_2
     137: getfield      #3                  // Field batchTime:I
     140: invokestatic  #13                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     143: invokestatic  #31                 // Method java/util/Objects.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
     146: ifeq          173
     149: aload_0
     150: getfield      #2                  // Field batchVolume:I
     153: invokestatic  #13                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     156: aload_2
     157: getfield      #2                  // Field batchVolume:I
     160: invokestatic  #13                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     163: invokestatic  #31                 // Method java/util/Objects.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
     166: ifeq          173
     169: iconst_1
     170: goto          174
     173: iconst_0
     174: ireturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokestatic  #32                 // Method com/google/common/base/MoreObjects.toStringHelper:(Ljava/lang/Object;)Lcom/google/common/base/MoreObjects$ToStringHelper;
       4: ldc           #11                 // String messageTtl
       6: aload_0
       7: getfield      #7                  // Field messageTtl:I
      10: invokevirtual #33                 // Method com/google/common/base/MoreObjects$ToStringHelper.add:(Ljava/lang/String;I)Lcom/google/common/base/MoreObjects$ToStringHelper;
      13: ldc           #21                 // String messageBackoff
      15: aload_0
      16: getfield      #6                  // Field messageBackoff:I
      19: invokevirtual #33                 // Method com/google/common/base/MoreObjects$ToStringHelper.add:(Ljava/lang/String;I)Lcom/google/common/base/MoreObjects$ToStringHelper;
      22: ldc           #17                 // String retryClientErrors
      24: aload_0
      25: getfield      #5                  // Field retryClientErrors:Z
      28: invokevirtual #34                 // Method com/google/common/base/MoreObjects$ToStringHelper.add:(Ljava/lang/String;Z)Lcom/google/common/base/MoreObjects$ToStringHelper;
      31: ldc           #23                 // String batchSize
      33: aload_0
      34: getfield      #4                  // Field batchSize:I
      37: invokevirtual #33                 // Method com/google/common/base/MoreObjects$ToStringHelper.add:(Ljava/lang/String;I)Lcom/google/common/base/MoreObjects$ToStringHelper;
      40: ldc           #24                 // String batchTime
      42: aload_0
      43: getfield      #3                  // Field batchTime:I
      46: invokevirtual #33                 // Method com/google/common/base/MoreObjects$ToStringHelper.add:(Ljava/lang/String;I)Lcom/google/common/base/MoreObjects$ToStringHelper;
      49: ldc           #25                 // String batchVolume
      51: aload_0
      52: getfield      #2                  // Field batchVolume:I
      55: invokevirtual #33                 // Method com/google/common/base/MoreObjects$ToStringHelper.add:(Ljava/lang/String;I)Lcom/google/common/base/MoreObjects$ToStringHelper;
      58: ldc           #22                 // String requestTimeout
      60: aload_0
      61: getfield      #1                  // Field requestTimeout:I
      64: invokevirtual #33                 // Method com/google/common/base/MoreObjects$ToStringHelper.add:(Ljava/lang/String;I)Lcom/google/common/base/MoreObjects$ToStringHelper;
      67: invokevirtual #35                 // Method com/google/common/base/MoreObjects$ToStringHelper.toString:()Ljava/lang/String;
      70: areturn

  public java.lang.Integer getMessageTtl();
    Code:
       0: aload_0
       1: getfield      #7                  // Field messageTtl:I
       4: invokestatic  #13                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       7: areturn

  public java.lang.Integer getMessageBackoff();
    Code:
       0: aload_0
       1: getfield      #6                  // Field messageBackoff:I
       4: invokestatic  #13                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       7: areturn

  public java.lang.Boolean isRetryClientErrors();
    Code:
       0: aload_0
       1: getfield      #5                  // Field retryClientErrors:Z
       4: invokestatic  #18                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       7: areturn

  public java.lang.Integer getBatchSize();
    Code:
       0: aload_0
       1: getfield      #4                  // Field batchSize:I
       4: invokestatic  #13                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       7: areturn

  public java.lang.Integer getBatchTime();
    Code:
       0: aload_0
       1: getfield      #3                  // Field batchTime:I
       4: invokestatic  #13                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       7: areturn

  public java.lang.Integer getBatchVolume();
    Code:
       0: aload_0
       1: getfield      #2                  // Field batchVolume:I
       4: invokestatic  #13                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       7: areturn

  public java.lang.Integer getRequestTimeout();
    Code:
       0: aload_0
       1: getfield      #1                  // Field requestTimeout:I
       4: invokestatic  #13                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       7: areturn

  pl.allegro.tech.hermes.api.BatchSubscriptionPolicy(pl.allegro.tech.hermes.api.BatchSubscriptionPolicy$1);
    Code:
       0: aload_0
       1: invokespecial #8                  // Method "<init>":()V
       4: return

  static int access$102(pl.allegro.tech.hermes.api.BatchSubscriptionPolicy, int);
    Code:
       0: aload_0
       1: iload_1
       2: dup_x1
       3: putfield      #7                  // Field messageTtl:I
       6: ireturn

  static int access$202(pl.allegro.tech.hermes.api.BatchSubscriptionPolicy, int);
    Code:
       0: aload_0
       1: iload_1
       2: dup_x1
       3: putfield      #6                  // Field messageBackoff:I
       6: ireturn

  static boolean access$302(pl.allegro.tech.hermes.api.BatchSubscriptionPolicy, boolean);
    Code:
       0: aload_0
       1: iload_1
       2: dup_x1
       3: putfield      #5                  // Field retryClientErrors:Z
       6: ireturn

  static int access$402(pl.allegro.tech.hermes.api.BatchSubscriptionPolicy, int);
    Code:
       0: aload_0
       1: iload_1
       2: dup_x1
       3: putfield      #4                  // Field batchSize:I
       6: ireturn

  static int access$502(pl.allegro.tech.hermes.api.BatchSubscriptionPolicy, int);
    Code:
       0: aload_0
       1: iload_1
       2: dup_x1
       3: putfield      #3                  // Field batchTime:I
       6: ireturn

  static int access$602(pl.allegro.tech.hermes.api.BatchSubscriptionPolicy, int);
    Code:
       0: aload_0
       1: iload_1
       2: dup_x1
       3: putfield      #2                  // Field batchVolume:I
       6: ireturn

  static int access$702(pl.allegro.tech.hermes.api.BatchSubscriptionPolicy, int);
    Code:
       0: aload_0
       1: iload_1
       2: dup_x1
       3: putfield      #1                  // Field requestTimeout:I
       6: ireturn

  static int access$100(pl.allegro.tech.hermes.api.BatchSubscriptionPolicy);
    Code:
       0: aload_0
       1: getfield      #7                  // Field messageTtl:I
       4: ireturn

  static boolean access$300(pl.allegro.tech.hermes.api.BatchSubscriptionPolicy);
    Code:
       0: aload_0
       1: getfield      #5                  // Field retryClientErrors:Z
       4: ireturn

  static int access$200(pl.allegro.tech.hermes.api.BatchSubscriptionPolicy);
    Code:
       0: aload_0
       1: getfield      #6                  // Field messageBackoff:I
       4: ireturn

  static int access$700(pl.allegro.tech.hermes.api.BatchSubscriptionPolicy);
    Code:
       0: aload_0
       1: getfield      #1                  // Field requestTimeout:I
       4: ireturn

  static int access$400(pl.allegro.tech.hermes.api.BatchSubscriptionPolicy);
    Code:
       0: aload_0
       1: getfield      #4                  // Field batchSize:I
       4: ireturn

  static int access$500(pl.allegro.tech.hermes.api.BatchSubscriptionPolicy);
    Code:
       0: aload_0
       1: getfield      #3                  // Field batchTime:I
       4: ireturn

  static int access$600(pl.allegro.tech.hermes.api.BatchSubscriptionPolicy);
    Code:
       0: aload_0
       1: getfield      #2                  // Field batchVolume:I
       4: ireturn
}
