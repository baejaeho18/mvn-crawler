Compiled from "Query.java"
public interface net.openhft.chronicle.engine.api.query.Query<T> {
  public abstract net.openhft.chronicle.engine.api.query.Query<T> filter(net.openhft.chronicle.core.util.SerializablePredicate<? super T>);

  public abstract <R> net.openhft.chronicle.engine.api.query.Query<R> map(net.openhft.chronicle.core.util.SerializableFunction<? super T, ? extends R>);

  public abstract <R> net.openhft.chronicle.engine.api.query.Query<R> project(java.lang.Class<R>);

  public abstract <R> net.openhft.chronicle.engine.api.query.Query<R> flatMap(net.openhft.chronicle.core.util.SerializableFunction<? super T, ? extends net.openhft.chronicle.engine.api.query.Query<? extends R>>);

  public abstract java.util.stream.Stream<T> stream();

  public abstract net.openhft.chronicle.engine.api.query.Subscription subscribe(java.util.function.Consumer<? super T>);

  public abstract <R, A> R collect(java.util.stream.Collector<? super T, A, R>);

  public abstract void forEach(java.util.function.Consumer<? super T>);
}
