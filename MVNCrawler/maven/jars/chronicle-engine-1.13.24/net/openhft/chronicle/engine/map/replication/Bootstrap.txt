Compiled from "Bootstrap.java"
public class net.openhft.chronicle.engine.map.replication.Bootstrap extends net.openhft.chronicle.wire.AbstractMarshallable implements net.openhft.chronicle.wire.Marshallable {
  private byte identifier;

  private long lastUpdatedTime;

  public net.openhft.chronicle.engine.map.replication.Bootstrap();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method net/openhft/chronicle/wire/AbstractMarshallable."<init>":()V
       4: return

  public long lastUpdatedTime();
    Code:
       0: aload_0
       1: getfield      #2                  // Field lastUpdatedTime:J
       4: lreturn

  public void lastUpdatedTime(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #2                  // Field lastUpdatedTime:J
       5: return

  public void identifier(byte);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #3                  // Field identifier:B
       5: return

  public byte identifier();
    Code:
       0: aload_0
       1: getfield      #3                  // Field identifier:B
       4: ireturn

  public void writeMarshallable(net.openhft.chronicle.wire.WireOut);
    Code:
       0: aload_1
       1: invokedynamic #4,  0              // InvokeDynamic #0:name:()Lnet/openhft/chronicle/wire/WireKey;
       6: invokeinterface #5,  2            // InterfaceMethod net/openhft/chronicle/wire/WireOut.write:(Lnet/openhft/chronicle/wire/WireKey;)Lnet/openhft/chronicle/wire/ValueOut;
      11: aload_0
      12: getfield      #3                  // Field identifier:B
      15: invokeinterface #6,  2            // InterfaceMethod net/openhft/chronicle/wire/ValueOut.int8:(B)Lnet/openhft/chronicle/wire/WireOut;
      20: pop
      21: aload_1
      22: invokedynamic #7,  0              // InvokeDynamic #1:name:()Lnet/openhft/chronicle/wire/WireKey;
      27: invokeinterface #5,  2            // InterfaceMethod net/openhft/chronicle/wire/WireOut.write:(Lnet/openhft/chronicle/wire/WireKey;)Lnet/openhft/chronicle/wire/ValueOut;
      32: aload_0
      33: getfield      #2                  // Field lastUpdatedTime:J
      36: invokeinterface #8,  3            // InterfaceMethod net/openhft/chronicle/wire/ValueOut.int64:(J)Lnet/openhft/chronicle/wire/WireOut;
      41: pop
      42: return

  public void readMarshallable(net.openhft.chronicle.wire.WireIn) throws java.lang.IllegalStateException;
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #9,  0              // InvokeDynamic #2:name:()Lnet/openhft/chronicle/wire/WireKey;
       7: invokeinterface #10,  2           // InterfaceMethod net/openhft/chronicle/wire/WireIn.read:(Lnet/openhft/chronicle/wire/WireKey;)Lnet/openhft/chronicle/wire/ValueIn;
      12: invokeinterface #11,  1           // InterfaceMethod net/openhft/chronicle/wire/ValueIn.int8:()B
      17: putfield      #3                  // Field identifier:B
      20: aload_0
      21: aload_1
      22: invokedynamic #12,  0             // InvokeDynamic #3:name:()Lnet/openhft/chronicle/wire/WireKey;
      27: invokeinterface #10,  2           // InterfaceMethod net/openhft/chronicle/wire/WireIn.read:(Lnet/openhft/chronicle/wire/WireKey;)Lnet/openhft/chronicle/wire/ValueIn;
      32: invokeinterface #13,  1           // InterfaceMethod net/openhft/chronicle/wire/ValueIn.int64:()J
      37: putfield      #2                  // Field lastUpdatedTime:J
      40: return

  private static java.lang.CharSequence lambda$readMarshallable$3();
    Code:
       0: ldc           #14                 // String lastUpdatedTime
       2: areturn

  private static java.lang.CharSequence lambda$readMarshallable$2();
    Code:
       0: ldc           #15                 // String id
       2: areturn

  private static java.lang.CharSequence lambda$writeMarshallable$1();
    Code:
       0: ldc           #14                 // String lastUpdatedTime
       2: areturn

  private static java.lang.CharSequence lambda$writeMarshallable$0();
    Code:
       0: ldc           #15                 // String id
       2: areturn
}
