Compiled from "ServiceDiscoveryMock.scala"
public final class zio.aws.servicediscovery.ServiceDiscoveryMock$$anon$2 implements zio.aws.servicediscovery.ServiceDiscovery {
  private final zio.mock.Proxy proxy$3;

  private final zio.Runtime rts$2;

  private final software.amazon.awssdk.services.servicediscovery.ServiceDiscoveryAsyncClient api;

  public zio.aws.servicediscovery.ServiceDiscoveryMock$$anon$2(zio.mock.Proxy, zio.Runtime);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #124                // Field proxy$3:Lzio/mock/Proxy;
       5: aload_0
       6: aload_2
       7: putfield      #126                // Field rts$2:Lzio/Runtime;
      10: aload_0
      11: invokespecial #129                // Method java/lang/Object."<init>":()V
      14: aload_0
      15: aconst_null
      16: putfield      #131                // Field api:Lsoftware/amazon/awssdk/services/servicediscovery/ServiceDiscoveryAsyncClient;
      19: return

  public software.amazon.awssdk.services.servicediscovery.ServiceDiscoveryAsyncClient api();
    Code:
       0: aload_0
       1: getfield      #131                // Field api:Lsoftware/amazon/awssdk/services/servicediscovery/ServiceDiscoveryAsyncClient;
       4: areturn

  public zio.aws.servicediscovery.ServiceDiscovery withAspect(zio.ZIOAspect, zio.ZEnvironment);
    Code:
       0: aload_0
       1: areturn

  public zio.ZIO createPrivateDnsNamespace(zio.aws.servicediscovery.model.CreatePrivateDnsNamespaceRequest);
    Code:
       0: aload_0
       1: getfield      #124                // Field proxy$3:Lzio/mock/Proxy;
       4: getstatic     #147                // Field zio/aws/servicediscovery/ServiceDiscoveryMock$CreatePrivateDnsNamespace$.MODULE$:Lzio/aws/servicediscovery/ServiceDiscoveryMock$CreatePrivateDnsNamespace$;
       7: aload_1
       8: invokevirtual #153                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public zio.ZIO createHttpNamespace(zio.aws.servicediscovery.model.CreateHttpNamespaceRequest);
    Code:
       0: aload_0
       1: getfield      #124                // Field proxy$3:Lzio/mock/Proxy;
       4: getstatic     #159                // Field zio/aws/servicediscovery/ServiceDiscoveryMock$CreateHttpNamespace$.MODULE$:Lzio/aws/servicediscovery/ServiceDiscoveryMock$CreateHttpNamespace$;
       7: aload_1
       8: invokevirtual #153                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public zio.ZIO updateHttpNamespace(zio.aws.servicediscovery.model.UpdateHttpNamespaceRequest);
    Code:
       0: aload_0
       1: getfield      #124                // Field proxy$3:Lzio/mock/Proxy;
       4: getstatic     #165                // Field zio/aws/servicediscovery/ServiceDiscoveryMock$UpdateHttpNamespace$.MODULE$:Lzio/aws/servicediscovery/ServiceDiscoveryMock$UpdateHttpNamespace$;
       7: aload_1
       8: invokevirtual #153                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public zio.ZIO createPublicDnsNamespace(zio.aws.servicediscovery.model.CreatePublicDnsNamespaceRequest);
    Code:
       0: aload_0
       1: getfield      #124                // Field proxy$3:Lzio/mock/Proxy;
       4: getstatic     #171                // Field zio/aws/servicediscovery/ServiceDiscoveryMock$CreatePublicDnsNamespace$.MODULE$:Lzio/aws/servicediscovery/ServiceDiscoveryMock$CreatePublicDnsNamespace$;
       7: aload_1
       8: invokevirtual #153                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public zio.ZIO createService(zio.aws.servicediscovery.model.CreateServiceRequest);
    Code:
       0: aload_0
       1: getfield      #124                // Field proxy$3:Lzio/mock/Proxy;
       4: getstatic     #177                // Field zio/aws/servicediscovery/ServiceDiscoveryMock$CreateService$.MODULE$:Lzio/aws/servicediscovery/ServiceDiscoveryMock$CreateService$;
       7: aload_1
       8: invokevirtual #153                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public zio.ZIO updatePublicDnsNamespace(zio.aws.servicediscovery.model.UpdatePublicDnsNamespaceRequest);
    Code:
       0: aload_0
       1: getfield      #124                // Field proxy$3:Lzio/mock/Proxy;
       4: getstatic     #183                // Field zio/aws/servicediscovery/ServiceDiscoveryMock$UpdatePublicDnsNamespace$.MODULE$:Lzio/aws/servicediscovery/ServiceDiscoveryMock$UpdatePublicDnsNamespace$;
       7: aload_1
       8: invokevirtual #153                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public zio.stream.ZStream getInstancesHealthStatus(zio.aws.servicediscovery.model.GetInstancesHealthStatusRequest);
    Code:
       0: getstatic     #191                // Field zio/Unsafe$.MODULE$:Lzio/Unsafe$;
       3: aload_0
       4: aload_1
       5: invokedynamic #212,  0            // InvokeDynamic #0:apply:(Lzio/aws/servicediscovery/ServiceDiscoveryMock$$anon$2;Lzio/aws/servicediscovery/model/GetInstancesHealthStatusRequest;)Lscala/Function1;
      10: invokevirtual #216                // Method zio/Unsafe$.unsafe:(Lscala/Function1;)Ljava/lang/Object;
      13: checkcast     #218                // class zio/stream/ZStream
      16: areturn

  public zio.ZIO getInstancesHealthStatusPaginated(zio.aws.servicediscovery.model.GetInstancesHealthStatusRequest);
    Code:
       0: aload_0
       1: getfield      #124                // Field proxy$3:Lzio/mock/Proxy;
       4: getstatic     #224                // Field zio/aws/servicediscovery/ServiceDiscoveryMock$GetInstancesHealthStatusPaginated$.MODULE$:Lzio/aws/servicediscovery/ServiceDiscoveryMock$GetInstancesHealthStatusPaginated$;
       7: aload_1
       8: invokevirtual #153                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public zio.stream.ZStream listInstances(zio.aws.servicediscovery.model.ListInstancesRequest);
    Code:
       0: getstatic     #191                // Field zio/Unsafe$.MODULE$:Lzio/Unsafe$;
       3: aload_0
       4: aload_1
       5: invokedynamic #234,  0            // InvokeDynamic #1:apply:(Lzio/aws/servicediscovery/ServiceDiscoveryMock$$anon$2;Lzio/aws/servicediscovery/model/ListInstancesRequest;)Lscala/Function1;
      10: invokevirtual #216                // Method zio/Unsafe$.unsafe:(Lscala/Function1;)Ljava/lang/Object;
      13: checkcast     #218                // class zio/stream/ZStream
      16: areturn

  public zio.ZIO listInstancesPaginated(zio.aws.servicediscovery.model.ListInstancesRequest);
    Code:
       0: aload_0
       1: getfield      #124                // Field proxy$3:Lzio/mock/Proxy;
       4: getstatic     #240                // Field zio/aws/servicediscovery/ServiceDiscoveryMock$ListInstancesPaginated$.MODULE$:Lzio/aws/servicediscovery/ServiceDiscoveryMock$ListInstancesPaginated$;
       7: aload_1
       8: invokevirtual #153                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public zio.ZIO getNamespace(zio.aws.servicediscovery.model.GetNamespaceRequest);
    Code:
       0: aload_0
       1: getfield      #124                // Field proxy$3:Lzio/mock/Proxy;
       4: getstatic     #245                // Field zio/aws/servicediscovery/ServiceDiscoveryMock$GetNamespace$.MODULE$:Lzio/aws/servicediscovery/ServiceDiscoveryMock$GetNamespace$;
       7: aload_1
       8: invokevirtual #153                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public zio.ZIO updateInstanceCustomHealthStatus(zio.aws.servicediscovery.model.UpdateInstanceCustomHealthStatusRequest);
    Code:
       0: aload_0
       1: getfield      #124                // Field proxy$3:Lzio/mock/Proxy;
       4: getstatic     #251                // Field zio/aws/servicediscovery/ServiceDiscoveryMock$UpdateInstanceCustomHealthStatus$.MODULE$:Lzio/aws/servicediscovery/ServiceDiscoveryMock$UpdateInstanceCustomHealthStatus$;
       7: aload_1
       8: invokevirtual #153                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public zio.ZIO deleteService(zio.aws.servicediscovery.model.DeleteServiceRequest);
    Code:
       0: aload_0
       1: getfield      #124                // Field proxy$3:Lzio/mock/Proxy;
       4: getstatic     #257                // Field zio/aws/servicediscovery/ServiceDiscoveryMock$DeleteService$.MODULE$:Lzio/aws/servicediscovery/ServiceDiscoveryMock$DeleteService$;
       7: aload_1
       8: invokevirtual #153                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public zio.stream.ZStream listServices(zio.aws.servicediscovery.model.ListServicesRequest);
    Code:
       0: getstatic     #191                // Field zio/Unsafe$.MODULE$:Lzio/Unsafe$;
       3: aload_0
       4: aload_1
       5: invokedynamic #268,  0            // InvokeDynamic #2:apply:(Lzio/aws/servicediscovery/ServiceDiscoveryMock$$anon$2;Lzio/aws/servicediscovery/model/ListServicesRequest;)Lscala/Function1;
      10: invokevirtual #216                // Method zio/Unsafe$.unsafe:(Lscala/Function1;)Ljava/lang/Object;
      13: checkcast     #218                // class zio/stream/ZStream
      16: areturn

  public zio.ZIO listServicesPaginated(zio.aws.servicediscovery.model.ListServicesRequest);
    Code:
       0: aload_0
       1: getfield      #124                // Field proxy$3:Lzio/mock/Proxy;
       4: getstatic     #274                // Field zio/aws/servicediscovery/ServiceDiscoveryMock$ListServicesPaginated$.MODULE$:Lzio/aws/servicediscovery/ServiceDiscoveryMock$ListServicesPaginated$;
       7: aload_1
       8: invokevirtual #153                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public zio.ZIO getInstance(zio.aws.servicediscovery.model.GetInstanceRequest);
    Code:
       0: aload_0
       1: getfield      #124                // Field proxy$3:Lzio/mock/Proxy;
       4: getstatic     #279                // Field zio/aws/servicediscovery/ServiceDiscoveryMock$GetInstance$.MODULE$:Lzio/aws/servicediscovery/ServiceDiscoveryMock$GetInstance$;
       7: aload_1
       8: invokevirtual #153                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public zio.stream.ZStream listOperations(zio.aws.servicediscovery.model.ListOperationsRequest);
    Code:
       0: getstatic     #191                // Field zio/Unsafe$.MODULE$:Lzio/Unsafe$;
       3: aload_0
       4: aload_1
       5: invokedynamic #290,  0            // InvokeDynamic #3:apply:(Lzio/aws/servicediscovery/ServiceDiscoveryMock$$anon$2;Lzio/aws/servicediscovery/model/ListOperationsRequest;)Lscala/Function1;
      10: invokevirtual #216                // Method zio/Unsafe$.unsafe:(Lscala/Function1;)Ljava/lang/Object;
      13: checkcast     #218                // class zio/stream/ZStream
      16: areturn

  public zio.ZIO listOperationsPaginated(zio.aws.servicediscovery.model.ListOperationsRequest);
    Code:
       0: aload_0
       1: getfield      #124                // Field proxy$3:Lzio/mock/Proxy;
       4: getstatic     #296                // Field zio/aws/servicediscovery/ServiceDiscoveryMock$ListOperationsPaginated$.MODULE$:Lzio/aws/servicediscovery/ServiceDiscoveryMock$ListOperationsPaginated$;
       7: aload_1
       8: invokevirtual #153                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public zio.ZIO deregisterInstance(zio.aws.servicediscovery.model.DeregisterInstanceRequest);
    Code:
       0: aload_0
       1: getfield      #124                // Field proxy$3:Lzio/mock/Proxy;
       4: getstatic     #301                // Field zio/aws/servicediscovery/ServiceDiscoveryMock$DeregisterInstance$.MODULE$:Lzio/aws/servicediscovery/ServiceDiscoveryMock$DeregisterInstance$;
       7: aload_1
       8: invokevirtual #153                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public zio.stream.ZStream listNamespaces(zio.aws.servicediscovery.model.ListNamespacesRequest);
    Code:
       0: getstatic     #191                // Field zio/Unsafe$.MODULE$:Lzio/Unsafe$;
       3: aload_0
       4: aload_1
       5: invokedynamic #312,  0            // InvokeDynamic #4:apply:(Lzio/aws/servicediscovery/ServiceDiscoveryMock$$anon$2;Lzio/aws/servicediscovery/model/ListNamespacesRequest;)Lscala/Function1;
      10: invokevirtual #216                // Method zio/Unsafe$.unsafe:(Lscala/Function1;)Ljava/lang/Object;
      13: checkcast     #218                // class zio/stream/ZStream
      16: areturn

  public zio.ZIO listNamespacesPaginated(zio.aws.servicediscovery.model.ListNamespacesRequest);
    Code:
       0: aload_0
       1: getfield      #124                // Field proxy$3:Lzio/mock/Proxy;
       4: getstatic     #318                // Field zio/aws/servicediscovery/ServiceDiscoveryMock$ListNamespacesPaginated$.MODULE$:Lzio/aws/servicediscovery/ServiceDiscoveryMock$ListNamespacesPaginated$;
       7: aload_1
       8: invokevirtual #153                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public zio.ZIO untagResource(zio.aws.servicediscovery.model.UntagResourceRequest);
    Code:
       0: aload_0
       1: getfield      #124                // Field proxy$3:Lzio/mock/Proxy;
       4: getstatic     #323                // Field zio/aws/servicediscovery/ServiceDiscoveryMock$UntagResource$.MODULE$:Lzio/aws/servicediscovery/ServiceDiscoveryMock$UntagResource$;
       7: aload_1
       8: invokevirtual #153                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public zio.ZIO updatePrivateDnsNamespace(zio.aws.servicediscovery.model.UpdatePrivateDnsNamespaceRequest);
    Code:
       0: aload_0
       1: getfield      #124                // Field proxy$3:Lzio/mock/Proxy;
       4: getstatic     #329                // Field zio/aws/servicediscovery/ServiceDiscoveryMock$UpdatePrivateDnsNamespace$.MODULE$:Lzio/aws/servicediscovery/ServiceDiscoveryMock$UpdatePrivateDnsNamespace$;
       7: aload_1
       8: invokevirtual #153                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public zio.ZIO discoverInstances(zio.aws.servicediscovery.model.DiscoverInstancesRequest);
    Code:
       0: aload_0
       1: getfield      #124                // Field proxy$3:Lzio/mock/Proxy;
       4: getstatic     #335                // Field zio/aws/servicediscovery/ServiceDiscoveryMock$DiscoverInstances$.MODULE$:Lzio/aws/servicediscovery/ServiceDiscoveryMock$DiscoverInstances$;
       7: aload_1
       8: invokevirtual #153                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public zio.ZIO getService(zio.aws.servicediscovery.model.GetServiceRequest);
    Code:
       0: aload_0
       1: getfield      #124                // Field proxy$3:Lzio/mock/Proxy;
       4: getstatic     #341                // Field zio/aws/servicediscovery/ServiceDiscoveryMock$GetService$.MODULE$:Lzio/aws/servicediscovery/ServiceDiscoveryMock$GetService$;
       7: aload_1
       8: invokevirtual #153                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public zio.ZIO listTagsForResource(zio.aws.servicediscovery.model.ListTagsForResourceRequest);
    Code:
       0: aload_0
       1: getfield      #124                // Field proxy$3:Lzio/mock/Proxy;
       4: getstatic     #347                // Field zio/aws/servicediscovery/ServiceDiscoveryMock$ListTagsForResource$.MODULE$:Lzio/aws/servicediscovery/ServiceDiscoveryMock$ListTagsForResource$;
       7: aload_1
       8: invokevirtual #153                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public zio.ZIO tagResource(zio.aws.servicediscovery.model.TagResourceRequest);
    Code:
       0: aload_0
       1: getfield      #124                // Field proxy$3:Lzio/mock/Proxy;
       4: getstatic     #353                // Field zio/aws/servicediscovery/ServiceDiscoveryMock$TagResource$.MODULE$:Lzio/aws/servicediscovery/ServiceDiscoveryMock$TagResource$;
       7: aload_1
       8: invokevirtual #153                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public zio.ZIO getOperation(zio.aws.servicediscovery.model.GetOperationRequest);
    Code:
       0: aload_0
       1: getfield      #124                // Field proxy$3:Lzio/mock/Proxy;
       4: getstatic     #359                // Field zio/aws/servicediscovery/ServiceDiscoveryMock$GetOperation$.MODULE$:Lzio/aws/servicediscovery/ServiceDiscoveryMock$GetOperation$;
       7: aload_1
       8: invokevirtual #153                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public zio.ZIO deleteNamespace(zio.aws.servicediscovery.model.DeleteNamespaceRequest);
    Code:
       0: aload_0
       1: getfield      #124                // Field proxy$3:Lzio/mock/Proxy;
       4: getstatic     #365                // Field zio/aws/servicediscovery/ServiceDiscoveryMock$DeleteNamespace$.MODULE$:Lzio/aws/servicediscovery/ServiceDiscoveryMock$DeleteNamespace$;
       7: aload_1
       8: invokevirtual #153                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public zio.ZIO updateService(zio.aws.servicediscovery.model.UpdateServiceRequest);
    Code:
       0: aload_0
       1: getfield      #124                // Field proxy$3:Lzio/mock/Proxy;
       4: getstatic     #371                // Field zio/aws/servicediscovery/ServiceDiscoveryMock$UpdateService$.MODULE$:Lzio/aws/servicediscovery/ServiceDiscoveryMock$UpdateService$;
       7: aload_1
       8: invokevirtual #153                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public zio.ZIO registerInstance(zio.aws.servicediscovery.model.RegisterInstanceRequest);
    Code:
       0: aload_0
       1: getfield      #124                // Field proxy$3:Lzio/mock/Proxy;
       4: getstatic     #377                // Field zio/aws/servicediscovery/ServiceDiscoveryMock$RegisterInstance$.MODULE$:Lzio/aws/servicediscovery/ServiceDiscoveryMock$RegisterInstance$;
       7: aload_1
       8: invokevirtual #153                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public java.lang.Object withAspect(zio.ZIOAspect, zio.ZEnvironment);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #381                // Method withAspect:(Lzio/ZIOAspect;Lzio/ZEnvironment;)Lzio/aws/servicediscovery/ServiceDiscovery;
       6: areturn

  private final zio.stream.ZStream getInstancesHealthStatus$$anonfun$1(zio.aws.servicediscovery.model.GetInstancesHealthStatusRequest, zio.Unsafe);
    Code:
       0: aload_0
       1: getfield      #126                // Field rts$2:Lzio/Runtime;
       4: invokeinterface #386,  1          // InterfaceMethod zio/Runtime.unsafe:()Lzio/Runtime$UnsafeAPI;
       9: aload_0
      10: getfield      #124                // Field proxy$3:Lzio/mock/Proxy;
      13: getstatic     #389                // Field zio/aws/servicediscovery/ServiceDiscoveryMock$GetInstancesHealthStatus$.MODULE$:Lzio/aws/servicediscovery/ServiceDiscoveryMock$GetInstancesHealthStatus$;
      16: aload_1
      17: invokevirtual #153                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      20: ldc_w         #391                // String zio.aws.servicediscovery.ServiceDiscoveryMock.compose.$anon.getInstancesHealthStatus(ServiceDiscoveryMock.scala:263)
      23: aload_2
      24: invokeinterface #395,  4          // InterfaceMethod zio/Runtime$UnsafeAPI.run:(Lzio/ZIO;Ljava/lang/Object;Lzio/Unsafe;)Lzio/Exit;
      29: aload_2
      30: invokeinterface #401,  2          // InterfaceMethod zio/Exit.getOrThrowFiberFailure:(Lzio/Unsafe;)Ljava/lang/Object;
      35: checkcast     #218                // class zio/stream/ZStream
      38: areturn

  private final zio.stream.ZStream listInstances$$anonfun$1(zio.aws.servicediscovery.model.ListInstancesRequest, zio.Unsafe);
    Code:
       0: aload_0
       1: getfield      #126                // Field rts$2:Lzio/Runtime;
       4: invokeinterface #386,  1          // InterfaceMethod zio/Runtime.unsafe:()Lzio/Runtime$UnsafeAPI;
       9: aload_0
      10: getfield      #124                // Field proxy$3:Lzio/mock/Proxy;
      13: getstatic     #406                // Field zio/aws/servicediscovery/ServiceDiscoveryMock$ListInstances$.MODULE$:Lzio/aws/servicediscovery/ServiceDiscoveryMock$ListInstances$;
      16: aload_1
      17: invokevirtual #153                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      20: ldc_w         #408                // String zio.aws.servicediscovery.ServiceDiscoveryMock.compose.$anon.listInstances(ServiceDiscoveryMock.scala:280)
      23: aload_2
      24: invokeinterface #395,  4          // InterfaceMethod zio/Runtime$UnsafeAPI.run:(Lzio/ZIO;Ljava/lang/Object;Lzio/Unsafe;)Lzio/Exit;
      29: aload_2
      30: invokeinterface #401,  2          // InterfaceMethod zio/Exit.getOrThrowFiberFailure:(Lzio/Unsafe;)Ljava/lang/Object;
      35: checkcast     #218                // class zio/stream/ZStream
      38: areturn

  private final zio.stream.ZStream listServices$$anonfun$1(zio.aws.servicediscovery.model.ListServicesRequest, zio.Unsafe);
    Code:
       0: aload_0
       1: getfield      #126                // Field rts$2:Lzio/Runtime;
       4: invokeinterface #386,  1          // InterfaceMethod zio/Runtime.unsafe:()Lzio/Runtime$UnsafeAPI;
       9: aload_0
      10: getfield      #124                // Field proxy$3:Lzio/mock/Proxy;
      13: getstatic     #412                // Field zio/aws/servicediscovery/ServiceDiscoveryMock$ListServices$.MODULE$:Lzio/aws/servicediscovery/ServiceDiscoveryMock$ListServices$;
      16: aload_1
      17: invokevirtual #153                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      20: ldc_w         #414                // String zio.aws.servicediscovery.ServiceDiscoveryMock.compose.$anon.listServices(ServiceDiscoveryMock.scala:307)
      23: aload_2
      24: invokeinterface #395,  4          // InterfaceMethod zio/Runtime$UnsafeAPI.run:(Lzio/ZIO;Ljava/lang/Object;Lzio/Unsafe;)Lzio/Exit;
      29: aload_2
      30: invokeinterface #401,  2          // InterfaceMethod zio/Exit.getOrThrowFiberFailure:(Lzio/Unsafe;)Ljava/lang/Object;
      35: checkcast     #218                // class zio/stream/ZStream
      38: areturn

  private final zio.stream.ZStream listOperations$$anonfun$1(zio.aws.servicediscovery.model.ListOperationsRequest, zio.Unsafe);
    Code:
       0: aload_0
       1: getfield      #126                // Field rts$2:Lzio/Runtime;
       4: invokeinterface #386,  1          // InterfaceMethod zio/Runtime.unsafe:()Lzio/Runtime$UnsafeAPI;
       9: aload_0
      10: getfield      #124                // Field proxy$3:Lzio/mock/Proxy;
      13: getstatic     #418                // Field zio/aws/servicediscovery/ServiceDiscoveryMock$ListOperations$.MODULE$:Lzio/aws/servicediscovery/ServiceDiscoveryMock$ListOperations$;
      16: aload_1
      17: invokevirtual #153                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      20: ldc_w         #420                // String zio.aws.servicediscovery.ServiceDiscoveryMock.compose.$anon.listOperations(ServiceDiscoveryMock.scala:326)
      23: aload_2
      24: invokeinterface #395,  4          // InterfaceMethod zio/Runtime$UnsafeAPI.run:(Lzio/ZIO;Ljava/lang/Object;Lzio/Unsafe;)Lzio/Exit;
      29: aload_2
      30: invokeinterface #401,  2          // InterfaceMethod zio/Exit.getOrThrowFiberFailure:(Lzio/Unsafe;)Ljava/lang/Object;
      35: checkcast     #218                // class zio/stream/ZStream
      38: areturn

  private final zio.stream.ZStream listNamespaces$$anonfun$1(zio.aws.servicediscovery.model.ListNamespacesRequest, zio.Unsafe);
    Code:
       0: aload_0
       1: getfield      #126                // Field rts$2:Lzio/Runtime;
       4: invokeinterface #386,  1          // InterfaceMethod zio/Runtime.unsafe:()Lzio/Runtime$UnsafeAPI;
       9: aload_0
      10: getfield      #124                // Field proxy$3:Lzio/mock/Proxy;
      13: getstatic     #424                // Field zio/aws/servicediscovery/ServiceDiscoveryMock$ListNamespaces$.MODULE$:Lzio/aws/servicediscovery/ServiceDiscoveryMock$ListNamespaces$;
      16: aload_1
      17: invokevirtual #153                // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      20: ldc_w         #426                // String zio.aws.servicediscovery.ServiceDiscoveryMock.compose.$anon.listNamespaces(ServiceDiscoveryMock.scala:345)
      23: aload_2
      24: invokeinterface #395,  4          // InterfaceMethod zio/Runtime$UnsafeAPI.run:(Lzio/ZIO;Ljava/lang/Object;Lzio/Unsafe;)Lzio/Exit;
      29: aload_2
      30: invokeinterface #401,  2          // InterfaceMethod zio/Exit.getOrThrowFiberFailure:(Lzio/Unsafe;)Ljava/lang/Object;
      35: checkcast     #218                // class zio/stream/ZStream
      38: areturn

  private static java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda);
    Code:
       0: aload_0
       1: invokedynamic #438,  0            // InvokeDynamic #5:lambdaDeserialize:(Ljava/lang/invoke/SerializedLambda;)Ljava/lang/Object;
       6: areturn
}
