Compiled from "RegressionModelUtil.java"
public class org.jpmml.evaluator.regression.RegressionModelUtil {
  private org.jpmml.evaluator.regression.RegressionModelUtil();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static <K, V extends java.lang.Number> org.jpmml.evaluator.ValueMap<K, V> computeBinomialProbabilities(org.dmg.pmml.regression.RegressionModel$NormalizationMethod, org.jpmml.evaluator.ValueMap<K, V>);
    Code:
       0: aload_1
       1: invokevirtual #2                  // Method org/jpmml/evaluator/ValueMap.size:()I
       4: iconst_2
       5: if_icmpeq     16
       8: new           #3                  // class java/lang/IllegalArgumentException
      11: dup
      12: invokespecial #4                  // Method java/lang/IllegalArgumentException."<init>":()V
      15: athrow
      16: aload_1
      17: invokevirtual #5                  // Method org/jpmml/evaluator/ValueMap.iterator:()Ljava/util/Iterator;
      20: astore_2
      21: aload_2
      22: invokeinterface #6,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      27: checkcast     #7                  // class org/jpmml/evaluator/Value
      30: astore_3
      31: aload_0
      32: aload_3
      33: invokestatic  #8                  // Method normalizeBinaryLogisticClassificationResult:(Lorg/dmg/pmml/regression/RegressionModel$NormalizationMethod;Lorg/jpmml/evaluator/Value;)Lorg/jpmml/evaluator/Value;
      36: pop
      37: aload_2
      38: invokeinterface #6,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      43: checkcast     #7                  // class org/jpmml/evaluator/Value
      46: astore        4
      48: aload         4
      50: aload_3
      51: invokevirtual #9                  // Method org/jpmml/evaluator/Value.residual:(Lorg/jpmml/evaluator/Value;)Lorg/jpmml/evaluator/Value;
      54: pop
      55: aload_1
      56: areturn

  public static <K, V extends java.lang.Number> org.jpmml.evaluator.ValueMap<K, V> computeMultinomialProbabilities(org.dmg.pmml.regression.RegressionModel$NormalizationMethod, org.jpmml.evaluator.ValueMap<K, V>);
    Code:
       0: aload_1
       1: invokevirtual #2                  // Method org/jpmml/evaluator/ValueMap.size:()I
       4: iconst_2
       5: if_icmpge     16
       8: new           #3                  // class java/lang/IllegalArgumentException
      11: dup
      12: invokespecial #4                  // Method java/lang/IllegalArgumentException."<init>":()V
      15: athrow
      16: getstatic     #10                 // Field org/jpmml/evaluator/regression/RegressionModelUtil$1.$SwitchMap$org$dmg$pmml$regression$RegressionModel$NormalizationMethod:[I
      19: aload_0
      20: invokevirtual #11                 // Method org/dmg/pmml/regression/RegressionModel$NormalizationMethod.ordinal:()I
      23: iaload
      24: tableswitch   { // 1 to 4
                     1: 56
                     2: 139
                     3: 171
                     4: 178
               default: 185
          }
      56: aconst_null
      57: astore_2
      58: aload_1
      59: invokevirtual #5                  // Method org/jpmml/evaluator/ValueMap.iterator:()Ljava/util/Iterator;
      62: astore_3
      63: iconst_0
      64: istore        4
      66: aload_1
      67: invokevirtual #2                  // Method org/jpmml/evaluator/ValueMap.size:()I
      70: iconst_1
      71: isub
      72: istore        5
      74: iload         4
      76: iload         5
      78: if_icmpge     118
      81: aload_3
      82: invokeinterface #6,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      87: checkcast     #7                  // class org/jpmml/evaluator/Value
      90: astore        6
      92: aload_2
      93: ifnonnull     105
      96: aload         6
      98: invokevirtual #12                 // Method org/jpmml/evaluator/Value.copy:()Lorg/jpmml/evaluator/Value;
     101: astore_2
     102: goto          112
     105: aload_2
     106: aload         6
     108: invokevirtual #13                 // Method org/jpmml/evaluator/Value.add:(Lorg/jpmml/evaluator/Value;)Lorg/jpmml/evaluator/Value;
     111: pop
     112: iinc          4, 1
     115: goto          74
     118: aload_3
     119: invokeinterface #6,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     124: checkcast     #7                  // class org/jpmml/evaluator/Value
     127: astore        4
     129: aload         4
     131: aload_2
     132: invokevirtual #9                  // Method org/jpmml/evaluator/Value.residual:(Lorg/jpmml/evaluator/Value;)Lorg/jpmml/evaluator/Value;
     135: pop
     136: goto          193
     139: aload_1
     140: invokevirtual #5                  // Method org/jpmml/evaluator/ValueMap.iterator:()Ljava/util/Iterator;
     143: astore_2
     144: aload_2
     145: invokeinterface #14,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     150: ifeq          171
     153: aload_2
     154: invokeinterface #6,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     159: checkcast     #7                  // class org/jpmml/evaluator/Value
     162: astore_3
     163: aload_3
     164: invokevirtual #15                 // Method org/jpmml/evaluator/Value.inverseLogit:()Lorg/jpmml/evaluator/Value;
     167: pop
     168: goto          144
     171: aload_1
     172: invokestatic  #16                 // Method org/jpmml/evaluator/ValueUtil.normalizeSimpleMax:(Ljava/lang/Iterable;)V
     175: goto          193
     178: aload_1
     179: invokestatic  #17                 // Method org/jpmml/evaluator/ValueUtil.normalizeSoftMax:(Ljava/lang/Iterable;)V
     182: goto          193
     185: new           #3                  // class java/lang/IllegalArgumentException
     188: dup
     189: invokespecial #4                  // Method java/lang/IllegalArgumentException."<init>":()V
     192: athrow
     193: aload_1
     194: areturn

  public static <K, V extends java.lang.Number> org.jpmml.evaluator.ValueMap<K, V> computeOrdinalProbabilities(org.dmg.pmml.regression.RegressionModel$NormalizationMethod, org.jpmml.evaluator.ValueMap<K, V>);
    Code:
       0: aload_1
       1: invokevirtual #2                  // Method org/jpmml/evaluator/ValueMap.size:()I
       4: iconst_2
       5: if_icmpge     16
       8: new           #3                  // class java/lang/IllegalArgumentException
      11: dup
      12: invokespecial #4                  // Method java/lang/IllegalArgumentException."<init>":()V
      15: athrow
      16: getstatic     #10                 // Field org/jpmml/evaluator/regression/RegressionModelUtil$1.$SwitchMap$org$dmg$pmml$regression$RegressionModel$NormalizationMethod:[I
      19: aload_0
      20: invokevirtual #11                 // Method org/dmg/pmml/regression/RegressionModel$NormalizationMethod.ordinal:()I
      23: iaload
      24: tableswitch   { // 1 to 8
                     1: 72
                     2: 72
                     3: 169
                     4: 169
                     5: 72
                     6: 72
                     7: 72
                     8: 72
               default: 169
          }
      72: aconst_null
      73: astore_2
      74: aload_1
      75: invokevirtual #5                  // Method org/jpmml/evaluator/ValueMap.iterator:()Ljava/util/Iterator;
      78: astore_3
      79: iconst_0
      80: istore        4
      82: aload_1
      83: invokevirtual #2                  // Method org/jpmml/evaluator/ValueMap.size:()I
      86: iconst_1
      87: isub
      88: istore        5
      90: iload         4
      92: iload         5
      94: if_icmpge     148
      97: aload_3
      98: invokeinterface #6,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     103: checkcast     #7                  // class org/jpmml/evaluator/Value
     106: astore        6
     108: aload_0
     109: aload         6
     111: invokestatic  #8                  // Method normalizeBinaryLogisticClassificationResult:(Lorg/dmg/pmml/regression/RegressionModel$NormalizationMethod;Lorg/jpmml/evaluator/Value;)Lorg/jpmml/evaluator/Value;
     114: pop
     115: aload_2
     116: ifnonnull     128
     119: aload         6
     121: invokevirtual #12                 // Method org/jpmml/evaluator/Value.copy:()Lorg/jpmml/evaluator/Value;
     124: astore_2
     125: goto          142
     128: aload         6
     130: aload_2
     131: invokevirtual #18                 // Method org/jpmml/evaluator/Value.subtract:(Lorg/jpmml/evaluator/Value;)Lorg/jpmml/evaluator/Value;
     134: pop
     135: aload_2
     136: aload         6
     138: invokevirtual #13                 // Method org/jpmml/evaluator/Value.add:(Lorg/jpmml/evaluator/Value;)Lorg/jpmml/evaluator/Value;
     141: pop
     142: iinc          4, 1
     145: goto          90
     148: aload_3
     149: invokeinterface #6,  1            // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     154: checkcast     #7                  // class org/jpmml/evaluator/Value
     157: astore        4
     159: aload         4
     161: aload_2
     162: invokevirtual #9                  // Method org/jpmml/evaluator/Value.residual:(Lorg/jpmml/evaluator/Value;)Lorg/jpmml/evaluator/Value;
     165: pop
     166: goto          177
     169: new           #3                  // class java/lang/IllegalArgumentException
     172: dup
     173: invokespecial #4                  // Method java/lang/IllegalArgumentException."<init>":()V
     176: athrow
     177: aload_1
     178: areturn

  public static <V extends java.lang.Number> org.jpmml.evaluator.Value<V> normalizeRegressionResult(org.dmg.pmml.regression.RegressionModel$NormalizationMethod, org.jpmml.evaluator.Value<V>);
    Code:
       0: getstatic     #10                 // Field org/jpmml/evaluator/regression/RegressionModelUtil$1.$SwitchMap$org$dmg$pmml$regression$RegressionModel$NormalizationMethod:[I
       3: aload_0
       4: invokevirtual #11                 // Method org/dmg/pmml/regression/RegressionModel$NormalizationMethod.ordinal:()I
       7: iaload
       8: tableswitch   { // 1 to 9
                     1: 60
                     2: 62
                     3: 92
                     4: 62
                     5: 72
                     6: 77
                     7: 82
                     8: 87
                     9: 67
               default: 92
          }
      60: aload_1
      61: areturn
      62: aload_1
      63: invokevirtual #15                 // Method org/jpmml/evaluator/Value.inverseLogit:()Lorg/jpmml/evaluator/Value;
      66: areturn
      67: aload_1
      68: invokevirtual #19                 // Method org/jpmml/evaluator/Value.exp:()Lorg/jpmml/evaluator/Value;
      71: areturn
      72: aload_1
      73: invokevirtual #20                 // Method org/jpmml/evaluator/Value.inverseProbit:()Lorg/jpmml/evaluator/Value;
      76: areturn
      77: aload_1
      78: invokevirtual #21                 // Method org/jpmml/evaluator/Value.inverseCloglog:()Lorg/jpmml/evaluator/Value;
      81: areturn
      82: aload_1
      83: invokevirtual #22                 // Method org/jpmml/evaluator/Value.inverseLoglog:()Lorg/jpmml/evaluator/Value;
      86: areturn
      87: aload_1
      88: invokevirtual #23                 // Method org/jpmml/evaluator/Value.inverseCauchit:()Lorg/jpmml/evaluator/Value;
      91: areturn
      92: new           #3                  // class java/lang/IllegalArgumentException
      95: dup
      96: invokespecial #4                  // Method java/lang/IllegalArgumentException."<init>":()V
      99: athrow

  public static <V extends java.lang.Number> org.jpmml.evaluator.Value<V> normalizeBinaryLogisticClassificationResult(org.dmg.pmml.regression.RegressionModel$NormalizationMethod, org.jpmml.evaluator.Value<V>);
    Code:
       0: getstatic     #10                 // Field org/jpmml/evaluator/regression/RegressionModelUtil$1.$SwitchMap$org$dmg$pmml$regression$RegressionModel$NormalizationMethod:[I
       3: aload_0
       4: invokevirtual #11                 // Method org/dmg/pmml/regression/RegressionModel$NormalizationMethod.ordinal:()I
       7: iaload
       8: tableswitch   { // 1 to 8
                     1: 56
                     2: 67
                     3: 92
                     4: 92
                     5: 72
                     6: 77
                     7: 82
                     8: 87
               default: 92
          }
      56: aload_1
      57: getstatic     #24                 // Field org/jpmml/evaluator/Numbers.DOUBLE_ZERO:Ljava/lang/Double;
      60: getstatic     #25                 // Field org/jpmml/evaluator/Numbers.DOUBLE_ONE:Ljava/lang/Double;
      63: invokevirtual #26                 // Method org/jpmml/evaluator/Value.restrict:(Ljava/lang/Number;Ljava/lang/Number;)Lorg/jpmml/evaluator/Value;
      66: areturn
      67: aload_1
      68: invokevirtual #15                 // Method org/jpmml/evaluator/Value.inverseLogit:()Lorg/jpmml/evaluator/Value;
      71: areturn
      72: aload_1
      73: invokevirtual #20                 // Method org/jpmml/evaluator/Value.inverseProbit:()Lorg/jpmml/evaluator/Value;
      76: areturn
      77: aload_1
      78: invokevirtual #21                 // Method org/jpmml/evaluator/Value.inverseCloglog:()Lorg/jpmml/evaluator/Value;
      81: areturn
      82: aload_1
      83: invokevirtual #22                 // Method org/jpmml/evaluator/Value.inverseLoglog:()Lorg/jpmml/evaluator/Value;
      86: areturn
      87: aload_1
      88: invokevirtual #23                 // Method org/jpmml/evaluator/Value.inverseCauchit:()Lorg/jpmml/evaluator/Value;
      91: areturn
      92: new           #3                  // class java/lang/IllegalArgumentException
      95: dup
      96: invokespecial #4                  // Method java/lang/IllegalArgumentException."<init>":()V
      99: athrow
}
