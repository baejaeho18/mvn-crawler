Compiled from "MarkupInspector.java"
public abstract class org.jpmml.evaluator.visitors.MarkupInspector<E extends org.jpmml.evaluator.PMMLException> extends org.jpmml.model.visitors.AbstractVisitor {
  private java.util.List<E> exceptions;

  public org.jpmml.evaluator.visitors.MarkupInspector();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/jpmml/model/visitors/AbstractVisitor."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/ArrayList
       8: dup
       9: invokespecial #3                  // Method java/util/ArrayList."<init>":()V
      12: putfield      #4                  // Field exceptions:Ljava/util/List;
      15: return

  public void applyTo(org.dmg.pmml.Visitable);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #5                  // Method org/jpmml/model/visitors/AbstractVisitor.applyTo:(Lorg/dmg/pmml/Visitable;)V
       5: aload_0
       6: invokevirtual #6                  // Method getExceptions:()Ljava/util/List;
       9: astore_2
      10: aload_2
      11: invokeinterface #7,  1            // InterfaceMethod java/util/List.isEmpty:()Z
      16: ifne          30
      19: aload_2
      20: iconst_0
      21: invokeinterface #8,  2            // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      26: checkcast     #9                  // class org/jpmml/evaluator/PMMLException
      29: athrow
      30: return

  void report(E);
    Code:
       0: aload_0
       1: getfield      #4                  // Field exceptions:Ljava/util/List;
       4: aload_1
       5: invokeinterface #10,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      10: pop
      11: return

  public java.util.List<E> getExceptions();
    Code:
       0: aload_0
       1: getfield      #4                  // Field exceptions:Ljava/util/List;
       4: areturn
}
