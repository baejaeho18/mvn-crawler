Compiled from "InvalidMarkupInspector.java"
abstract class org.jpmml.evaluator.visitors.InvalidMarkupInspector$CollectionSize extends org.jpmml.evaluator.visitors.InvalidMarkupInspector$Condition {
  final org.jpmml.evaluator.visitors.InvalidMarkupInspector this$0;

  public org.jpmml.evaluator.visitors.InvalidMarkupInspector$CollectionSize(org.jpmml.evaluator.visitors.InvalidMarkupInspector, org.dmg.pmml.PMMLObject);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lorg/jpmml/evaluator/visitors/InvalidMarkupInspector;
       5: aload_0
       6: aload_1
       7: aload_2
       8: invokespecial #2                  // Method org/jpmml/evaluator/visitors/InvalidMarkupInspector$Condition."<init>":(Lorg/jpmml/evaluator/visitors/InvalidMarkupInspector;Lorg/dmg/pmml/PMMLObject;)V
      11: return

  public abstract java.lang.Integer getSize();

  public abstract java.util.Collection<?> getCollection();

  public boolean evaluate();
    Code:
       0: aload_0
       1: invokevirtual #3                  // Method getSize:()Ljava/lang/Integer;
       4: astore_1
       5: aload_1
       6: ifnull        29
       9: aload_0
      10: invokevirtual #4                  // Method getCollection:()Ljava/util/Collection;
      13: astore_2
      14: aload_0
      15: aload_1
      16: invokevirtual #5                  // Method java/lang/Integer.intValue:()I
      19: aload_2
      20: invokeinterface #6,  1            // InterfaceMethod java/util/Collection.size:()I
      25: invokevirtual #7                  // Method evaluate:(II)Z
      28: ireturn
      29: iconst_1
      30: ireturn

  public boolean evaluate(int, int);
    Code:
       0: iload_1
       1: iload_2
       2: if_icmpne     9
       5: iconst_1
       6: goto          10
       9: iconst_0
      10: ireturn
}
