Compiled from "KernelUtil.java"
public class org.jpmml.evaluator.support_vector_machine.KernelUtil {
  private org.jpmml.evaluator.support_vector_machine.KernelUtil();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static <V extends java.lang.Number> org.jpmml.evaluator.Value<V> evaluate(org.dmg.pmml.support_vector_machine.Kernel, org.jpmml.evaluator.ValueFactory<V>, java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: instanceof    #2                  // class org/dmg/pmml/support_vector_machine/LinearKernel
       4: ifeq          18
       7: aload_0
       8: checkcast     #2                  // class org/dmg/pmml/support_vector_machine/LinearKernel
      11: aload_1
      12: aload_2
      13: aload_3
      14: invokestatic  #3                  // Method evaluateLinearKernel:(Lorg/dmg/pmml/support_vector_machine/LinearKernel;Lorg/jpmml/evaluator/ValueFactory;Ljava/lang/Object;Ljava/lang/Object;)Lorg/jpmml/evaluator/Value;
      17: areturn
      18: aload_0
      19: instanceof    #4                  // class org/dmg/pmml/support_vector_machine/PolynomialKernel
      22: ifeq          36
      25: aload_0
      26: checkcast     #4                  // class org/dmg/pmml/support_vector_machine/PolynomialKernel
      29: aload_1
      30: aload_2
      31: aload_3
      32: invokestatic  #5                  // Method evaluatePolynomialKernel:(Lorg/dmg/pmml/support_vector_machine/PolynomialKernel;Lorg/jpmml/evaluator/ValueFactory;Ljava/lang/Object;Ljava/lang/Object;)Lorg/jpmml/evaluator/Value;
      35: areturn
      36: aload_0
      37: instanceof    #6                  // class org/dmg/pmml/support_vector_machine/RadialBasisKernel
      40: ifeq          54
      43: aload_0
      44: checkcast     #6                  // class org/dmg/pmml/support_vector_machine/RadialBasisKernel
      47: aload_1
      48: aload_2
      49: aload_3
      50: invokestatic  #7                  // Method evaluateRadialBasisKernel:(Lorg/dmg/pmml/support_vector_machine/RadialBasisKernel;Lorg/jpmml/evaluator/ValueFactory;Ljava/lang/Object;Ljava/lang/Object;)Lorg/jpmml/evaluator/Value;
      53: areturn
      54: aload_0
      55: instanceof    #8                  // class org/dmg/pmml/support_vector_machine/SigmoidKernel
      58: ifeq          72
      61: aload_0
      62: checkcast     #8                  // class org/dmg/pmml/support_vector_machine/SigmoidKernel
      65: aload_1
      66: aload_2
      67: aload_3
      68: invokestatic  #9                  // Method evaluateSigmoidKernel:(Lorg/dmg/pmml/support_vector_machine/SigmoidKernel;Lorg/jpmml/evaluator/ValueFactory;Ljava/lang/Object;Ljava/lang/Object;)Lorg/jpmml/evaluator/Value;
      71: areturn
      72: new           #10                 // class org/jpmml/evaluator/UnsupportedElementException
      75: dup
      76: aload_0
      77: invokespecial #11                 // Method org/jpmml/evaluator/UnsupportedElementException."<init>":(Lorg/dmg/pmml/PMMLObject;)V
      80: athrow

  public static <V extends java.lang.Number> org.jpmml.evaluator.Value<V> evaluateLinearKernel(org.dmg.pmml.support_vector_machine.LinearKernel, org.jpmml.evaluator.ValueFactory<V>, java.lang.Object, java.lang.Object);
    Code:
       0: aload_1
       1: aload_2
       2: aload_3
       3: invokestatic  #12                 // Method dotProduct:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Number;
       6: invokevirtual #13                 // Method org/jpmml/evaluator/ValueFactory.newValue:(Ljava/lang/Number;)Lorg/jpmml/evaluator/Value;
       9: astore        4
      11: aload         4
      13: areturn

  public static <V extends java.lang.Number> org.jpmml.evaluator.Value<V> evaluatePolynomialKernel(org.dmg.pmml.support_vector_machine.PolynomialKernel, org.jpmml.evaluator.ValueFactory<V>, java.lang.Object, java.lang.Object);
    Code:
       0: aload_1
       1: aload_2
       2: aload_3
       3: invokestatic  #12                 // Method dotProduct:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Number;
       6: invokevirtual #13                 // Method org/jpmml/evaluator/ValueFactory.newValue:(Ljava/lang/Number;)Lorg/jpmml/evaluator/Value;
       9: aload_0
      10: invokevirtual #14                 // Method org/dmg/pmml/support_vector_machine/PolynomialKernel.getGamma:()Ljava/lang/Number;
      13: invokevirtual #15                 // Method org/jpmml/evaluator/Value.multiply:(Ljava/lang/Number;)Lorg/jpmml/evaluator/Value;
      16: aload_0
      17: invokevirtual #16                 // Method org/dmg/pmml/support_vector_machine/PolynomialKernel.getCoef0:()Ljava/lang/Number;
      20: invokevirtual #17                 // Method org/jpmml/evaluator/Value.add:(Ljava/lang/Number;)Lorg/jpmml/evaluator/Value;
      23: aload_0
      24: invokevirtual #18                 // Method org/dmg/pmml/support_vector_machine/PolynomialKernel.getDegree:()Ljava/lang/Number;
      27: invokevirtual #19                 // Method org/jpmml/evaluator/Value.power:(Ljava/lang/Number;)Lorg/jpmml/evaluator/Value;
      30: astore        4
      32: aload         4
      34: areturn

  public static <V extends java.lang.Number> org.jpmml.evaluator.Value<V> evaluateRadialBasisKernel(org.dmg.pmml.support_vector_machine.RadialBasisKernel, org.jpmml.evaluator.ValueFactory<V>, java.lang.Object, java.lang.Object);
    Code:
       0: aload_1
       1: aload_2
       2: aload_3
       3: invokestatic  #20                 // Method negativeSquaredDistance:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Number;
       6: invokevirtual #13                 // Method org/jpmml/evaluator/ValueFactory.newValue:(Ljava/lang/Number;)Lorg/jpmml/evaluator/Value;
       9: aload_0
      10: invokevirtual #21                 // Method org/dmg/pmml/support_vector_machine/RadialBasisKernel.getGamma:()Ljava/lang/Number;
      13: invokevirtual #15                 // Method org/jpmml/evaluator/Value.multiply:(Ljava/lang/Number;)Lorg/jpmml/evaluator/Value;
      16: invokevirtual #22                 // Method org/jpmml/evaluator/Value.exp:()Lorg/jpmml/evaluator/Value;
      19: astore        4
      21: aload         4
      23: areturn

  public static <V extends java.lang.Number> org.jpmml.evaluator.Value<V> evaluateSigmoidKernel(org.dmg.pmml.support_vector_machine.SigmoidKernel, org.jpmml.evaluator.ValueFactory<V>, java.lang.Object, java.lang.Object);
    Code:
       0: aload_1
       1: aload_2
       2: aload_3
       3: invokestatic  #12                 // Method dotProduct:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Number;
       6: invokevirtual #13                 // Method org/jpmml/evaluator/ValueFactory.newValue:(Ljava/lang/Number;)Lorg/jpmml/evaluator/Value;
       9: aload_0
      10: invokevirtual #23                 // Method org/dmg/pmml/support_vector_machine/SigmoidKernel.getGamma:()Ljava/lang/Number;
      13: invokevirtual #15                 // Method org/jpmml/evaluator/Value.multiply:(Ljava/lang/Number;)Lorg/jpmml/evaluator/Value;
      16: aload_0
      17: invokevirtual #24                 // Method org/dmg/pmml/support_vector_machine/SigmoidKernel.getCoef0:()Ljava/lang/Number;
      20: invokevirtual #17                 // Method org/jpmml/evaluator/Value.add:(Ljava/lang/Number;)Lorg/jpmml/evaluator/Value;
      23: invokevirtual #25                 // Method org/jpmml/evaluator/Value.tanh:()Lorg/jpmml/evaluator/Value;
      26: astore        4
      28: aload         4
      30: areturn

  private static java.lang.Number dotProduct(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: instanceof    #26                 // class "[F"
       4: ifeq          35
       7: aload_1
       8: instanceof    #26                 // class "[F"
      11: ifeq          35
      14: aload_0
      15: checkcast     #26                 // class "[F"
      18: checkcast     #26                 // class "[F"
      21: aload_1
      22: checkcast     #26                 // class "[F"
      25: checkcast     #26                 // class "[F"
      28: invokestatic  #27                 // Method dotProduct:([F[F)F
      31: invokestatic  #28                 // Method java/lang/Float.valueOf:(F)Ljava/lang/Float;
      34: areturn
      35: aload_0
      36: instanceof    #29                 // class "[D"
      39: ifeq          70
      42: aload_1
      43: instanceof    #29                 // class "[D"
      46: ifeq          70
      49: aload_0
      50: checkcast     #29                 // class "[D"
      53: checkcast     #29                 // class "[D"
      56: aload_1
      57: checkcast     #29                 // class "[D"
      60: checkcast     #29                 // class "[D"
      63: invokestatic  #30                 // Method dotProduct:([D[D)D
      66: invokestatic  #31                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      69: areturn
      70: new           #32                 // class java/lang/IllegalArgumentException
      73: dup
      74: invokespecial #33                 // Method java/lang/IllegalArgumentException."<init>":()V
      77: athrow

  private static float dotProduct(float[], float[]);
    Code:
       0: aload_0
       1: arraylength
       2: aload_1
       3: arraylength
       4: if_icmpeq     15
       7: new           #32                 // class java/lang/IllegalArgumentException
      10: dup
      11: invokespecial #33                 // Method java/lang/IllegalArgumentException."<init>":()V
      14: athrow
      15: fconst_0
      16: fstore_2
      17: iconst_0
      18: istore_3
      19: aload_0
      20: arraylength
      21: istore        4
      23: iload_3
      24: iload         4
      26: if_icmpge     45
      29: fload_2
      30: aload_0
      31: iload_3
      32: faload
      33: aload_1
      34: iload_3
      35: faload
      36: fmul
      37: fadd
      38: fstore_2
      39: iinc          3, 1
      42: goto          23
      45: fload_2
      46: freturn

  private static double dotProduct(double[], double[]);
    Code:
       0: aload_0
       1: arraylength
       2: aload_1
       3: arraylength
       4: if_icmpeq     15
       7: new           #32                 // class java/lang/IllegalArgumentException
      10: dup
      11: invokespecial #33                 // Method java/lang/IllegalArgumentException."<init>":()V
      14: athrow
      15: dconst_0
      16: dstore_2
      17: iconst_0
      18: istore        4
      20: aload_0
      21: arraylength
      22: istore        5
      24: iload         4
      26: iload         5
      28: if_icmpge     49
      31: dload_2
      32: aload_0
      33: iload         4
      35: daload
      36: aload_1
      37: iload         4
      39: daload
      40: dmul
      41: dadd
      42: dstore_2
      43: iinc          4, 1
      46: goto          24
      49: dload_2
      50: dreturn

  private static java.lang.Number negativeSquaredDistance(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: instanceof    #26                 // class "[F"
       4: ifeq          36
       7: aload_1
       8: instanceof    #26                 // class "[F"
      11: ifeq          36
      14: aload_0
      15: checkcast     #26                 // class "[F"
      18: checkcast     #26                 // class "[F"
      21: aload_1
      22: checkcast     #26                 // class "[F"
      25: checkcast     #26                 // class "[F"
      28: invokestatic  #34                 // Method squaredDistance:([F[F)F
      31: fneg
      32: invokestatic  #28                 // Method java/lang/Float.valueOf:(F)Ljava/lang/Float;
      35: areturn
      36: aload_0
      37: instanceof    #29                 // class "[D"
      40: ifeq          72
      43: aload_1
      44: instanceof    #29                 // class "[D"
      47: ifeq          72
      50: aload_0
      51: checkcast     #29                 // class "[D"
      54: checkcast     #29                 // class "[D"
      57: aload_1
      58: checkcast     #29                 // class "[D"
      61: checkcast     #29                 // class "[D"
      64: invokestatic  #35                 // Method squaredDistance:([D[D)D
      67: dneg
      68: invokestatic  #31                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      71: areturn
      72: new           #32                 // class java/lang/IllegalArgumentException
      75: dup
      76: invokespecial #33                 // Method java/lang/IllegalArgumentException."<init>":()V
      79: athrow

  private static float squaredDistance(float[], float[]);
    Code:
       0: aload_0
       1: arraylength
       2: aload_1
       3: arraylength
       4: if_icmpeq     15
       7: new           #32                 // class java/lang/IllegalArgumentException
      10: dup
      11: invokespecial #33                 // Method java/lang/IllegalArgumentException."<init>":()V
      14: athrow
      15: fconst_0
      16: fstore_2
      17: iconst_0
      18: istore_3
      19: aload_0
      20: arraylength
      21: istore        4
      23: iload_3
      24: iload         4
      26: if_icmpge     52
      29: aload_0
      30: iload_3
      31: faload
      32: aload_1
      33: iload_3
      34: faload
      35: fsub
      36: fstore        5
      38: fload_2
      39: fload         5
      41: fload         5
      43: fmul
      44: fadd
      45: fstore_2
      46: iinc          3, 1
      49: goto          23
      52: fload_2
      53: freturn

  private static double squaredDistance(double[], double[]);
    Code:
       0: aload_0
       1: arraylength
       2: aload_1
       3: arraylength
       4: if_icmpeq     15
       7: new           #32                 // class java/lang/IllegalArgumentException
      10: dup
      11: invokespecial #33                 // Method java/lang/IllegalArgumentException."<init>":()V
      14: athrow
      15: dconst_0
      16: dstore_2
      17: iconst_0
      18: istore        4
      20: aload_0
      21: arraylength
      22: istore        5
      24: iload         4
      26: iload         5
      28: if_icmpge     56
      31: aload_0
      32: iload         4
      34: daload
      35: aload_1
      36: iload         4
      38: daload
      39: dsub
      40: dstore        6
      42: dload_2
      43: dload         6
      45: dload         6
      47: dmul
      48: dadd
      49: dstore_2
      50: iinc          4, 1
      53: goto          24
      56: dload_2
      57: dreturn
}
