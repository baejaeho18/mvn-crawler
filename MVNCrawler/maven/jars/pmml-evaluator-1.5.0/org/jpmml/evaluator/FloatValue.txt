Compiled from "FloatValue.java"
public class org.jpmml.evaluator.FloatValue extends org.jpmml.evaluator.Value<java.lang.Float> {
  protected float value;

  public static final double E;

  public static final double PI;

  public org.jpmml.evaluator.FloatValue(float);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/jpmml/evaluator/Value."<init>":()V
       4: aload_0
       5: fconst_0
       6: putfield      #2                  // Field value:F
       9: aload_0
      10: fload_1
      11: putfield      #2                  // Field value:F
      14: return

  public org.jpmml.evaluator.FloatValue(java.lang.Number);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/jpmml/evaluator/Value."<init>":()V
       4: aload_0
       5: fconst_0
       6: putfield      #2                  // Field value:F
       9: aload_0
      10: aload_1
      11: invokevirtual #3                  // Method java/lang/Number.floatValue:()F
      14: putfield      #2                  // Field value:F
      17: return

  public int compareTo(org.jpmml.evaluator.Value<java.lang.Float>);
    Code:
       0: aload_0
       1: invokevirtual #4                  // Method floatValue:()F
       4: aload_1
       5: invokevirtual #5                  // Method org/jpmml/evaluator/Value.floatValue:()F
       8: invokestatic  #6                  // Method java/lang/Float.compare:(FF)I
      11: ireturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #2                  // Field value:F
       4: invokestatic  #7                  // Method java/lang/Float.toString:(F)Ljava/lang/String;
       7: areturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #2                  // Field value:F
       4: invokestatic  #8                  // Method java/lang/Float.floatToIntBits:(F)I
       7: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #9                  // class org/jpmml/evaluator/FloatValue
       4: ifeq          35
       7: aload_1
       8: checkcast     #9                  // class org/jpmml/evaluator/FloatValue
      11: astore_2
      12: aload_0
      13: getfield      #2                  // Field value:F
      16: invokestatic  #8                  // Method java/lang/Float.floatToIntBits:(F)I
      19: aload_2
      20: getfield      #2                  // Field value:F
      23: invokestatic  #8                  // Method java/lang/Float.floatToIntBits:(F)I
      26: if_icmpne     33
      29: iconst_1
      30: goto          34
      33: iconst_0
      34: ireturn
      35: iconst_0
      36: ireturn

  public org.jpmml.evaluator.FloatValue copy();
    Code:
       0: new           #9                  // class org/jpmml/evaluator/FloatValue
       3: dup
       4: aload_0
       5: getfield      #2                  // Field value:F
       8: invokespecial #10                 // Method "<init>":(F)V
      11: areturn

  public org.jpmml.evaluator.FloatValue add(java.lang.Number);
    Code:
       0: aload_0
       1: dup
       2: getfield      #2                  // Field value:F
       5: aload_1
       6: invokevirtual #3                  // Method java/lang/Number.floatValue:()F
       9: fadd
      10: putfield      #2                  // Field value:F
      13: aload_0
      14: areturn

  public org.jpmml.evaluator.FloatValue add(org.jpmml.evaluator.Value<? extends java.lang.Number>);
    Code:
       0: aload_0
       1: dup
       2: getfield      #2                  // Field value:F
       5: aload_1
       6: invokevirtual #5                  // Method org/jpmml/evaluator/Value.floatValue:()F
       9: fadd
      10: putfield      #2                  // Field value:F
      13: aload_0
      14: areturn

  public org.jpmml.evaluator.FloatValue add(java.lang.Number, java.lang.Number);
    Code:
       0: aload_0
       1: dup
       2: getfield      #2                  // Field value:F
       5: aload_1
       6: invokevirtual #3                  // Method java/lang/Number.floatValue:()F
       9: aload_2
      10: invokevirtual #3                  // Method java/lang/Number.floatValue:()F
      13: fmul
      14: fadd
      15: putfield      #2                  // Field value:F
      18: aload_0
      19: areturn

  public org.jpmml.evaluator.FloatValue add(java.lang.Number, java.lang.Number, java.lang.Number);
    Code:
       0: aload_0
       1: dup
       2: getfield      #2                  // Field value:F
       5: aload_1
       6: invokevirtual #3                  // Method java/lang/Number.floatValue:()F
       9: aload_2
      10: invokevirtual #3                  // Method java/lang/Number.floatValue:()F
      13: fmul
      14: aload_3
      15: invokevirtual #3                  // Method java/lang/Number.floatValue:()F
      18: fmul
      19: fadd
      20: putfield      #2                  // Field value:F
      23: aload_0
      24: areturn

  public org.jpmml.evaluator.FloatValue add(java.lang.Number, java.lang.Number...);
    Code:
       0: aload_1
       1: invokevirtual #3                  // Method java/lang/Number.floatValue:()F
       4: fstore_3
       5: iconst_0
       6: istore        4
       8: iload         4
      10: aload_2
      11: arraylength
      12: if_icmpge     35
      15: aload_2
      16: iload         4
      18: aaload
      19: astore        5
      21: fload_3
      22: aload         5
      24: invokevirtual #3                  // Method java/lang/Number.floatValue:()F
      27: fmul
      28: fstore_3
      29: iinc          4, 1
      32: goto          8
      35: aload_0
      36: dup
      37: getfield      #2                  // Field value:F
      40: fload_3
      41: fadd
      42: putfield      #2                  // Field value:F
      45: aload_0
      46: areturn

  public org.jpmml.evaluator.FloatValue add(java.lang.Number, java.lang.Number, int);
    Code:
       0: aload_0
       1: dup
       2: getfield      #2                  // Field value:F
       5: aload_1
       6: invokevirtual #3                  // Method java/lang/Number.floatValue:()F
       9: aload_2
      10: invokevirtual #3                  // Method java/lang/Number.floatValue:()F
      13: iload_3
      14: i2f
      15: invokestatic  #11                 // Method pow:(FF)F
      18: fmul
      19: fadd
      20: putfield      #2                  // Field value:F
      23: aload_0
      24: areturn

  public org.jpmml.evaluator.FloatValue subtract(java.lang.Number);
    Code:
       0: aload_0
       1: dup
       2: getfield      #2                  // Field value:F
       5: aload_1
       6: invokevirtual #3                  // Method java/lang/Number.floatValue:()F
       9: fsub
      10: putfield      #2                  // Field value:F
      13: aload_0
      14: areturn

  public org.jpmml.evaluator.FloatValue subtract(org.jpmml.evaluator.Value<? extends java.lang.Number>);
    Code:
       0: aload_0
       1: dup
       2: getfield      #2                  // Field value:F
       5: aload_1
       6: invokevirtual #5                  // Method org/jpmml/evaluator/Value.floatValue:()F
       9: fsub
      10: putfield      #2                  // Field value:F
      13: aload_0
      14: areturn

  public org.jpmml.evaluator.FloatValue multiply(java.lang.Number);
    Code:
       0: aload_0
       1: dup
       2: getfield      #2                  // Field value:F
       5: aload_1
       6: invokevirtual #3                  // Method java/lang/Number.floatValue:()F
       9: fmul
      10: putfield      #2                  // Field value:F
      13: aload_0
      14: areturn

  public org.jpmml.evaluator.FloatValue multiply(org.jpmml.evaluator.Value<? extends java.lang.Number>);
    Code:
       0: aload_0
       1: dup
       2: getfield      #2                  // Field value:F
       5: aload_1
       6: invokevirtual #5                  // Method org/jpmml/evaluator/Value.floatValue:()F
       9: fmul
      10: putfield      #2                  // Field value:F
      13: aload_0
      14: areturn

  public org.jpmml.evaluator.FloatValue multiply(java.lang.Number, java.lang.Number);
    Code:
       0: aload_0
       1: dup
       2: getfield      #2                  // Field value:F
       5: aload_1
       6: invokevirtual #3                  // Method java/lang/Number.floatValue:()F
       9: aload_2
      10: invokevirtual #3                  // Method java/lang/Number.floatValue:()F
      13: invokestatic  #11                 // Method pow:(FF)F
      16: fmul
      17: putfield      #2                  // Field value:F
      20: aload_0
      21: areturn

  public org.jpmml.evaluator.FloatValue divide(java.lang.Number);
    Code:
       0: aload_0
       1: dup
       2: getfield      #2                  // Field value:F
       5: aload_1
       6: invokevirtual #3                  // Method java/lang/Number.floatValue:()F
       9: fdiv
      10: putfield      #2                  // Field value:F
      13: aload_0
      14: areturn

  public org.jpmml.evaluator.FloatValue divide(org.jpmml.evaluator.Value<? extends java.lang.Number>);
    Code:
       0: aload_0
       1: dup
       2: getfield      #2                  // Field value:F
       5: aload_1
       6: invokevirtual #5                  // Method org/jpmml/evaluator/Value.floatValue:()F
       9: fdiv
      10: putfield      #2                  // Field value:F
      13: aload_0
      14: areturn

  public org.jpmml.evaluator.FloatValue residual(org.jpmml.evaluator.Value<? extends java.lang.Number>);
    Code:
       0: aload_0
       1: fconst_1
       2: aload_1
       3: invokevirtual #5                  // Method org/jpmml/evaluator/Value.floatValue:()F
       6: fsub
       7: putfield      #2                  // Field value:F
      10: aload_0
      11: areturn

  public org.jpmml.evaluator.FloatValue square();
    Code:
       0: aload_0
       1: dup
       2: getfield      #2                  // Field value:F
       5: aload_0
       6: getfield      #2                  // Field value:F
       9: fmul
      10: putfield      #2                  // Field value:F
      13: aload_0
      14: areturn

  public org.jpmml.evaluator.FloatValue power(java.lang.Number);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #2                  // Field value:F
       5: aload_1
       6: invokevirtual #3                  // Method java/lang/Number.floatValue:()F
       9: invokestatic  #11                 // Method pow:(FF)F
      12: putfield      #2                  // Field value:F
      15: aload_0
      16: areturn

  public org.jpmml.evaluator.FloatValue reciprocal();
    Code:
       0: aload_0
       1: fconst_1
       2: aload_0
       3: getfield      #2                  // Field value:F
       6: fdiv
       7: putfield      #2                  // Field value:F
      10: aload_0
      11: areturn

  public org.jpmml.evaluator.FloatValue elliott();
    Code:
       0: aload_0
       1: dup
       2: getfield      #2                  // Field value:F
       5: fconst_1
       6: aload_0
       7: getfield      #2                  // Field value:F
      10: invokestatic  #12                 // Method java/lang/Math.abs:(F)F
      13: fadd
      14: fdiv
      15: putfield      #2                  // Field value:F
      18: aload_0
      19: areturn

  public org.jpmml.evaluator.FloatValue exp();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #2                  // Field value:F
       5: invokestatic  #13                 // Method exp:(F)F
       8: putfield      #2                  // Field value:F
      11: aload_0
      12: areturn

  public org.jpmml.evaluator.FloatValue ln();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #2                  // Field value:F
       5: f2d
       6: invokestatic  #14                 // Method java/lang/Math.log:(D)D
       9: d2f
      10: putfield      #2                  // Field value:F
      13: aload_0
      14: areturn

  public org.jpmml.evaluator.FloatValue gauss();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #2                  // Field value:F
       5: aload_0
       6: getfield      #2                  // Field value:F
       9: fmul
      10: fneg
      11: invokestatic  #13                 // Method exp:(F)F
      14: putfield      #2                  // Field value:F
      17: aload_0
      18: areturn

  public org.jpmml.evaluator.FloatValue inverseLogit();
    Code:
       0: aload_0
       1: fconst_1
       2: fconst_1
       3: aload_0
       4: getfield      #2                  // Field value:F
       7: fneg
       8: invokestatic  #13                 // Method exp:(F)F
      11: fadd
      12: fdiv
      13: putfield      #2                  // Field value:F
      16: aload_0
      17: areturn

  public org.jpmml.evaluator.FloatValue inverseCloglog();
    Code:
       0: aload_0
       1: fconst_1
       2: aload_0
       3: getfield      #2                  // Field value:F
       6: invokestatic  #13                 // Method exp:(F)F
       9: fneg
      10: invokestatic  #13                 // Method exp:(F)F
      13: fsub
      14: putfield      #2                  // Field value:F
      17: aload_0
      18: areturn

  public org.jpmml.evaluator.FloatValue inverseLoglog();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #2                  // Field value:F
       5: fneg
       6: invokestatic  #13                 // Method exp:(F)F
       9: fneg
      10: invokestatic  #13                 // Method exp:(F)F
      13: putfield      #2                  // Field value:F
      16: aload_0
      17: areturn

  public org.jpmml.evaluator.FloatValue inverseLogc();
    Code:
       0: aload_0
       1: fconst_1
       2: aload_0
       3: getfield      #2                  // Field value:F
       6: invokestatic  #13                 // Method exp:(F)F
       9: fsub
      10: putfield      #2                  // Field value:F
      13: aload_0
      14: areturn

  public org.jpmml.evaluator.FloatValue inverseNegbin(java.lang.Number);
    Code:
       0: aload_0
       1: fconst_1
       2: aload_1
       3: invokevirtual #3                  // Method java/lang/Number.floatValue:()F
       6: aload_0
       7: getfield      #2                  // Field value:F
      10: fneg
      11: invokestatic  #13                 // Method exp:(F)F
      14: fconst_1
      15: fsub
      16: fmul
      17: fdiv
      18: putfield      #2                  // Field value:F
      21: aload_0
      22: areturn

  public org.jpmml.evaluator.FloatValue inverseOddspower(java.lang.Number);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #3                  // Method java/lang/Number.floatValue:()F
       5: invokespecial #15                 // Method inverseOddspowerInternal:(F)Lorg/jpmml/evaluator/FloatValue;
       8: areturn

  private org.jpmml.evaluator.FloatValue inverseOddspowerInternal(float);
    Code:
       0: fload_1
       1: fconst_0
       2: fcmpg
       3: iflt          12
       6: fload_1
       7: fconst_0
       8: fcmpl
       9: ifle          38
      12: aload_0
      13: fconst_1
      14: fconst_1
      15: fconst_1
      16: fload_1
      17: aload_0
      18: getfield      #2                  // Field value:F
      21: fmul
      22: fadd
      23: fconst_1
      24: fload_1
      25: fdiv
      26: fneg
      27: invokestatic  #11                 // Method pow:(FF)F
      30: fadd
      31: fdiv
      32: putfield      #2                  // Field value:F
      35: goto          54
      38: aload_0
      39: fconst_1
      40: fconst_1
      41: aload_0
      42: getfield      #2                  // Field value:F
      45: fneg
      46: invokestatic  #13                 // Method exp:(F)F
      49: fadd
      50: fdiv
      51: putfield      #2                  // Field value:F
      54: aload_0
      55: areturn

  public org.jpmml.evaluator.FloatValue inversePower(java.lang.Number);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #3                  // Method java/lang/Number.floatValue:()F
       5: invokespecial #16                 // Method inversePowerInternal:(F)Lorg/jpmml/evaluator/FloatValue;
       8: areturn

  private org.jpmml.evaluator.FloatValue inversePowerInternal(float);
    Code:
       0: fload_1
       1: fconst_0
       2: fcmpg
       3: iflt          12
       6: fload_1
       7: fconst_0
       8: fcmpl
       9: ifle          29
      12: aload_0
      13: aload_0
      14: getfield      #2                  // Field value:F
      17: fconst_1
      18: fload_1
      19: fdiv
      20: invokestatic  #11                 // Method pow:(FF)F
      23: putfield      #2                  // Field value:F
      26: goto          40
      29: aload_0
      30: aload_0
      31: getfield      #2                  // Field value:F
      34: invokestatic  #13                 // Method exp:(F)F
      37: putfield      #2                  // Field value:F
      40: aload_0
      41: areturn

  public org.jpmml.evaluator.FloatValue inverseCauchit();
    Code:
       0: aload_0
       1: ldc           #17                 // float 0.5f
       3: ldc           #18                 // float 0.31830987f
       5: aload_0
       6: getfield      #2                  // Field value:F
       9: f2d
      10: invokestatic  #19                 // Method java/lang/Math.atan:(D)D
      13: d2f
      14: fmul
      15: fadd
      16: putfield      #2                  // Field value:F
      19: aload_0
      20: areturn

  public org.jpmml.evaluator.FloatValue inverseProbit();
    Code:
       0: new           #20                 // class org/jpmml/evaluator/NotImplementedException
       3: dup
       4: invokespecial #21                 // Method org/jpmml/evaluator/NotImplementedException."<init>":()V
       7: athrow

  public org.jpmml.evaluator.FloatValue sin();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #2                  // Field value:F
       5: f2d
       6: invokestatic  #22                 // Method java/lang/Math.sin:(D)D
       9: d2f
      10: putfield      #2                  // Field value:F
      13: aload_0
      14: areturn

  public org.jpmml.evaluator.FloatValue cos();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #2                  // Field value:F
       5: f2d
       6: invokestatic  #23                 // Method java/lang/Math.cos:(D)D
       9: d2f
      10: putfield      #2                  // Field value:F
      13: aload_0
      14: areturn

  public org.jpmml.evaluator.FloatValue arctan();
    Code:
       0: aload_0
       1: fconst_2
       2: aload_0
       3: getfield      #2                  // Field value:F
       6: f2d
       7: invokestatic  #19                 // Method java/lang/Math.atan:(D)D
      10: d2f
      11: fmul
      12: ldc           #24                 // float 3.1415927f
      14: fdiv
      15: putfield      #2                  // Field value:F
      18: aload_0
      19: areturn

  public org.jpmml.evaluator.FloatValue tanh();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #2                  // Field value:F
       5: f2d
       6: invokestatic  #25                 // Method java/lang/Math.tanh:(D)D
       9: d2f
      10: putfield      #2                  // Field value:F
      13: aload_0
      14: areturn

  public org.jpmml.evaluator.FloatValue threshold(java.lang.Number);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #2                  // Field value:F
       5: aload_1
       6: invokevirtual #3                  // Method java/lang/Number.floatValue:()F
       9: fcmpl
      10: ifle          17
      13: fconst_1
      14: goto          18
      17: fconst_0
      18: putfield      #2                  // Field value:F
      21: aload_0
      22: areturn

  public org.jpmml.evaluator.FloatValue relu();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #2                  // Field value:F
       5: fconst_0
       6: invokestatic  #26                 // Method java/lang/Math.max:(FF)F
       9: putfield      #2                  // Field value:F
      12: aload_0
      13: areturn

  public org.jpmml.evaluator.FloatValue abs();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #2                  // Field value:F
       5: invokestatic  #12                 // Method java/lang/Math.abs:(F)F
       8: putfield      #2                  // Field value:F
      11: aload_0
      12: areturn

  public org.jpmml.evaluator.FloatValue gaussSim(java.lang.Number);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #3                  // Method java/lang/Number.floatValue:()F
       5: invokespecial #27                 // Method gaussSimInternal:(F)Lorg/jpmml/evaluator/FloatValue;
       8: areturn

  private org.jpmml.evaluator.FloatValue gaussSimInternal(float);
    Code:
       0: aload_0
       1: ldc2_w        #28                 // double 2.0d
       4: invokestatic  #14                 // Method java/lang/Math.log:(D)D
       7: d2f
       8: fneg
       9: aload_0
      10: getfield      #2                  // Field value:F
      13: fmul
      14: aload_0
      15: getfield      #2                  // Field value:F
      18: fmul
      19: fload_1
      20: fload_1
      21: fmul
      22: fdiv
      23: invokestatic  #13                 // Method exp:(F)F
      26: putfield      #2                  // Field value:F
      29: aload_0
      30: areturn

  public org.jpmml.evaluator.FloatValue restrict(java.lang.Number, java.lang.Number);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #2                  // Field value:F
       5: aload_1
       6: invokevirtual #3                  // Method java/lang/Number.floatValue:()F
       9: invokestatic  #26                 // Method java/lang/Math.max:(FF)F
      12: putfield      #2                  // Field value:F
      15: aload_0
      16: aload_0
      17: getfield      #2                  // Field value:F
      20: aload_2
      21: invokevirtual #3                  // Method java/lang/Number.floatValue:()F
      24: invokestatic  #30                 // Method java/lang/Math.min:(FF)F
      27: putfield      #2                  // Field value:F
      30: aload_0
      31: areturn

  public org.jpmml.evaluator.FloatValue round();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #2                  // Field value:F
       5: invokestatic  #31                 // Method java/lang/Math.round:(F)I
       8: i2f
       9: putfield      #2                  // Field value:F
      12: aload_0
      13: areturn

  public org.jpmml.evaluator.FloatValue ceiling();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #2                  // Field value:F
       5: f2d
       6: invokestatic  #32                 // Method java/lang/Math.ceil:(D)D
       9: d2f
      10: putfield      #2                  // Field value:F
      13: aload_0
      14: areturn

  public org.jpmml.evaluator.FloatValue floor();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #2                  // Field value:F
       5: f2d
       6: invokestatic  #33                 // Method java/lang/Math.floor:(D)D
       9: d2f
      10: putfield      #2                  // Field value:F
      13: aload_0
      14: areturn

  public org.jpmml.evaluator.FloatValue normalize(java.lang.Number, java.lang.Number, java.lang.Number, java.lang.Number);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #3                  // Method java/lang/Number.floatValue:()F
       5: aload_2
       6: invokevirtual #3                  // Method java/lang/Number.floatValue:()F
       9: aload_3
      10: invokevirtual #3                  // Method java/lang/Number.floatValue:()F
      13: aload         4
      15: invokevirtual #3                  // Method java/lang/Number.floatValue:()F
      18: invokespecial #34                 // Method normalizeInternal:(FFFF)Lorg/jpmml/evaluator/FloatValue;
      21: areturn

  private org.jpmml.evaluator.FloatValue normalizeInternal(float, float, float, float);
    Code:
       0: aload_0
       1: fload_2
       2: aload_0
       3: getfield      #2                  // Field value:F
       6: fload_1
       7: fsub
       8: fload_3
       9: fload_1
      10: fsub
      11: fdiv
      12: fload         4
      14: fload_2
      15: fsub
      16: fmul
      17: fadd
      18: putfield      #2                  // Field value:F
      21: aload_0
      22: areturn

  public org.jpmml.evaluator.FloatValue denormalize(java.lang.Number, java.lang.Number, java.lang.Number, java.lang.Number);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #3                  // Method java/lang/Number.floatValue:()F
       5: aload_2
       6: invokevirtual #3                  // Method java/lang/Number.floatValue:()F
       9: aload_3
      10: invokevirtual #3                  // Method java/lang/Number.floatValue:()F
      13: aload         4
      15: invokevirtual #3                  // Method java/lang/Number.floatValue:()F
      18: invokespecial #35                 // Method denormalizeInternal:(FFFF)Lorg/jpmml/evaluator/FloatValue;
      21: areturn

  private org.jpmml.evaluator.FloatValue denormalizeInternal(float, float, float, float);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #2                  // Field value:F
       5: fload_2
       6: fsub
       7: fload         4
       9: fload_2
      10: fsub
      11: fdiv
      12: fload_3
      13: fload_1
      14: fsub
      15: fmul
      16: fload_1
      17: fadd
      18: putfield      #2                  // Field value:F
      21: aload_0
      22: areturn

  public boolean isZero();
    Code:
       0: aload_0
       1: getfield      #2                  // Field value:F
       4: fconst_0
       5: fcmpl
       6: ifne          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  public boolean isOne();
    Code:
       0: aload_0
       1: getfield      #2                  // Field value:F
       4: fconst_1
       5: fcmpl
       6: ifne          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  public boolean equals(java.lang.Number);
    Code:
       0: aload_0
       1: getfield      #2                  // Field value:F
       4: aload_1
       5: invokevirtual #3                  // Method java/lang/Number.floatValue:()F
       8: fcmpl
       9: ifne          16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: ireturn

  public int compareTo(java.lang.Number);
    Code:
       0: aload_0
       1: getfield      #2                  // Field value:F
       4: aload_1
       5: invokevirtual #3                  // Method java/lang/Number.floatValue:()F
       8: invokestatic  #6                  // Method java/lang/Float.compare:(FF)I
      11: ireturn

  public float floatValue();
    Code:
       0: aload_0
       1: getfield      #2                  // Field value:F
       4: freturn

  public double doubleValue();
    Code:
       0: aload_0
       1: getfield      #2                  // Field value:F
       4: f2d
       5: dreturn

  public java.lang.Float getValue();
    Code:
       0: aload_0
       1: getfield      #2                  // Field value:F
       4: invokestatic  #36                 // Method java/lang/Float.valueOf:(F)Ljava/lang/Float;
       7: areturn

  public static float exp(float);
    Code:
       0: ldc2_w        #37                 // double 2.7182817d
       3: fload_0
       4: f2d
       5: invokestatic  #39                 // Method java/lang/Math.pow:(DD)D
       8: d2f
       9: freturn

  public static float pow(float, float);
    Code:
       0: fload_0
       1: f2d
       2: fload_1
       3: f2d
       4: invokestatic  #39                 // Method java/lang/Math.pow:(DD)D
       7: d2f
       8: freturn

  public java.lang.Number getValue();
    Code:
       0: aload_0
       1: invokevirtual #40                 // Method getValue:()Ljava/lang/Float;
       4: areturn

  public org.jpmml.evaluator.Value denormalize(java.lang.Number, java.lang.Number, java.lang.Number, java.lang.Number);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokevirtual #41                 // Method denormalize:(Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)Lorg/jpmml/evaluator/FloatValue;
       9: areturn

  public org.jpmml.evaluator.Value normalize(java.lang.Number, java.lang.Number, java.lang.Number, java.lang.Number);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokevirtual #42                 // Method normalize:(Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)Lorg/jpmml/evaluator/FloatValue;
       9: areturn

  public org.jpmml.evaluator.Value floor();
    Code:
       0: aload_0
       1: invokevirtual #43                 // Method floor:()Lorg/jpmml/evaluator/FloatValue;
       4: areturn

  public org.jpmml.evaluator.Value ceiling();
    Code:
       0: aload_0
       1: invokevirtual #44                 // Method ceiling:()Lorg/jpmml/evaluator/FloatValue;
       4: areturn

  public org.jpmml.evaluator.Value round();
    Code:
       0: aload_0
       1: invokevirtual #45                 // Method round:()Lorg/jpmml/evaluator/FloatValue;
       4: areturn

  public org.jpmml.evaluator.Value restrict(java.lang.Number, java.lang.Number);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #46                 // Method restrict:(Ljava/lang/Number;Ljava/lang/Number;)Lorg/jpmml/evaluator/FloatValue;
       6: areturn

  public org.jpmml.evaluator.Value gaussSim(java.lang.Number);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #47                 // Method gaussSim:(Ljava/lang/Number;)Lorg/jpmml/evaluator/FloatValue;
       5: areturn

  public org.jpmml.evaluator.Value abs();
    Code:
       0: aload_0
       1: invokevirtual #48                 // Method abs:()Lorg/jpmml/evaluator/FloatValue;
       4: areturn

  public org.jpmml.evaluator.Value relu();
    Code:
       0: aload_0
       1: invokevirtual #49                 // Method relu:()Lorg/jpmml/evaluator/FloatValue;
       4: areturn

  public org.jpmml.evaluator.Value threshold(java.lang.Number);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #50                 // Method threshold:(Ljava/lang/Number;)Lorg/jpmml/evaluator/FloatValue;
       5: areturn

  public org.jpmml.evaluator.Value tanh();
    Code:
       0: aload_0
       1: invokevirtual #51                 // Method tanh:()Lorg/jpmml/evaluator/FloatValue;
       4: areturn

  public org.jpmml.evaluator.Value arctan();
    Code:
       0: aload_0
       1: invokevirtual #52                 // Method arctan:()Lorg/jpmml/evaluator/FloatValue;
       4: areturn

  public org.jpmml.evaluator.Value cos();
    Code:
       0: aload_0
       1: invokevirtual #53                 // Method cos:()Lorg/jpmml/evaluator/FloatValue;
       4: areturn

  public org.jpmml.evaluator.Value sin();
    Code:
       0: aload_0
       1: invokevirtual #54                 // Method sin:()Lorg/jpmml/evaluator/FloatValue;
       4: areturn

  public org.jpmml.evaluator.Value inverseProbit();
    Code:
       0: aload_0
       1: invokevirtual #55                 // Method inverseProbit:()Lorg/jpmml/evaluator/FloatValue;
       4: areturn

  public org.jpmml.evaluator.Value inverseCauchit();
    Code:
       0: aload_0
       1: invokevirtual #56                 // Method inverseCauchit:()Lorg/jpmml/evaluator/FloatValue;
       4: areturn

  public org.jpmml.evaluator.Value inversePower(java.lang.Number);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #57                 // Method inversePower:(Ljava/lang/Number;)Lorg/jpmml/evaluator/FloatValue;
       5: areturn

  public org.jpmml.evaluator.Value inverseOddspower(java.lang.Number);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #58                 // Method inverseOddspower:(Ljava/lang/Number;)Lorg/jpmml/evaluator/FloatValue;
       5: areturn

  public org.jpmml.evaluator.Value inverseNegbin(java.lang.Number);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #59                 // Method inverseNegbin:(Ljava/lang/Number;)Lorg/jpmml/evaluator/FloatValue;
       5: areturn

  public org.jpmml.evaluator.Value inverseLogc();
    Code:
       0: aload_0
       1: invokevirtual #60                 // Method inverseLogc:()Lorg/jpmml/evaluator/FloatValue;
       4: areturn

  public org.jpmml.evaluator.Value inverseLoglog();
    Code:
       0: aload_0
       1: invokevirtual #61                 // Method inverseLoglog:()Lorg/jpmml/evaluator/FloatValue;
       4: areturn

  public org.jpmml.evaluator.Value inverseCloglog();
    Code:
       0: aload_0
       1: invokevirtual #62                 // Method inverseCloglog:()Lorg/jpmml/evaluator/FloatValue;
       4: areturn

  public org.jpmml.evaluator.Value inverseLogit();
    Code:
       0: aload_0
       1: invokevirtual #63                 // Method inverseLogit:()Lorg/jpmml/evaluator/FloatValue;
       4: areturn

  public org.jpmml.evaluator.Value gauss();
    Code:
       0: aload_0
       1: invokevirtual #64                 // Method gauss:()Lorg/jpmml/evaluator/FloatValue;
       4: areturn

  public org.jpmml.evaluator.Value ln();
    Code:
       0: aload_0
       1: invokevirtual #65                 // Method ln:()Lorg/jpmml/evaluator/FloatValue;
       4: areturn

  public org.jpmml.evaluator.Value exp();
    Code:
       0: aload_0
       1: invokevirtual #66                 // Method exp:()Lorg/jpmml/evaluator/FloatValue;
       4: areturn

  public org.jpmml.evaluator.Value elliott();
    Code:
       0: aload_0
       1: invokevirtual #67                 // Method elliott:()Lorg/jpmml/evaluator/FloatValue;
       4: areturn

  public org.jpmml.evaluator.Value reciprocal();
    Code:
       0: aload_0
       1: invokevirtual #68                 // Method reciprocal:()Lorg/jpmml/evaluator/FloatValue;
       4: areturn

  public org.jpmml.evaluator.Value power(java.lang.Number);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #69                 // Method power:(Ljava/lang/Number;)Lorg/jpmml/evaluator/FloatValue;
       5: areturn

  public org.jpmml.evaluator.Value square();
    Code:
       0: aload_0
       1: invokevirtual #70                 // Method square:()Lorg/jpmml/evaluator/FloatValue;
       4: areturn

  public org.jpmml.evaluator.Value residual(org.jpmml.evaluator.Value);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #71                 // Method residual:(Lorg/jpmml/evaluator/Value;)Lorg/jpmml/evaluator/FloatValue;
       5: areturn

  public org.jpmml.evaluator.Value divide(org.jpmml.evaluator.Value);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #72                 // Method divide:(Lorg/jpmml/evaluator/Value;)Lorg/jpmml/evaluator/FloatValue;
       5: areturn

  public org.jpmml.evaluator.Value divide(java.lang.Number);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #73                 // Method divide:(Ljava/lang/Number;)Lorg/jpmml/evaluator/FloatValue;
       5: areturn

  public org.jpmml.evaluator.Value multiply(java.lang.Number, java.lang.Number);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #74                 // Method multiply:(Ljava/lang/Number;Ljava/lang/Number;)Lorg/jpmml/evaluator/FloatValue;
       6: areturn

  public org.jpmml.evaluator.Value multiply(org.jpmml.evaluator.Value);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #75                 // Method multiply:(Lorg/jpmml/evaluator/Value;)Lorg/jpmml/evaluator/FloatValue;
       5: areturn

  public org.jpmml.evaluator.Value multiply(java.lang.Number);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #76                 // Method multiply:(Ljava/lang/Number;)Lorg/jpmml/evaluator/FloatValue;
       5: areturn

  public org.jpmml.evaluator.Value subtract(org.jpmml.evaluator.Value);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #77                 // Method subtract:(Lorg/jpmml/evaluator/Value;)Lorg/jpmml/evaluator/FloatValue;
       5: areturn

  public org.jpmml.evaluator.Value subtract(java.lang.Number);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #78                 // Method subtract:(Ljava/lang/Number;)Lorg/jpmml/evaluator/FloatValue;
       5: areturn

  public org.jpmml.evaluator.Value add(java.lang.Number, java.lang.Number, int);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iload_3
       4: invokevirtual #79                 // Method add:(Ljava/lang/Number;Ljava/lang/Number;I)Lorg/jpmml/evaluator/FloatValue;
       7: areturn

  public org.jpmml.evaluator.Value add(java.lang.Number, java.lang.Number[]);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #80                 // Method add:(Ljava/lang/Number;[Ljava/lang/Number;)Lorg/jpmml/evaluator/FloatValue;
       6: areturn

  public org.jpmml.evaluator.Value add(java.lang.Number, java.lang.Number, java.lang.Number);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokevirtual #81                 // Method add:(Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)Lorg/jpmml/evaluator/FloatValue;
       7: areturn

  public org.jpmml.evaluator.Value add(java.lang.Number, java.lang.Number);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #82                 // Method add:(Ljava/lang/Number;Ljava/lang/Number;)Lorg/jpmml/evaluator/FloatValue;
       6: areturn

  public org.jpmml.evaluator.Value add(org.jpmml.evaluator.Value);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #83                 // Method add:(Lorg/jpmml/evaluator/Value;)Lorg/jpmml/evaluator/FloatValue;
       5: areturn

  public org.jpmml.evaluator.Value add(java.lang.Number);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #84                 // Method add:(Ljava/lang/Number;)Lorg/jpmml/evaluator/FloatValue;
       5: areturn

  public org.jpmml.evaluator.Value copy();
    Code:
       0: aload_0
       1: invokevirtual #85                 // Method copy:()Lorg/jpmml/evaluator/FloatValue;
       4: areturn

  public int compareTo(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #86                 // class org/jpmml/evaluator/Value
       5: invokevirtual #87                 // Method compareTo:(Lorg/jpmml/evaluator/Value;)I
       8: ireturn
}
