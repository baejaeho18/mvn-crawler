Compiled from "Value.java"
public abstract class org.jpmml.evaluator.Value<V extends java.lang.Number> implements java.lang.Comparable<org.jpmml.evaluator.Value<V>> {
  public org.jpmml.evaluator.Value();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public abstract org.jpmml.evaluator.Value<V> copy();

  public abstract org.jpmml.evaluator.Value<V> add(java.lang.Number);

  public abstract org.jpmml.evaluator.Value<V> add(org.jpmml.evaluator.Value<? extends java.lang.Number>);

  public abstract org.jpmml.evaluator.Value<V> add(java.lang.Number, java.lang.Number);

  public abstract org.jpmml.evaluator.Value<V> add(java.lang.Number, java.lang.Number, java.lang.Number);

  public abstract org.jpmml.evaluator.Value<V> add(java.lang.Number, java.lang.Number...);

  public abstract org.jpmml.evaluator.Value<V> add(java.lang.Number, java.lang.Number, int);

  public abstract org.jpmml.evaluator.Value<V> subtract(java.lang.Number);

  public abstract org.jpmml.evaluator.Value<V> subtract(org.jpmml.evaluator.Value<? extends java.lang.Number>);

  public abstract org.jpmml.evaluator.Value<V> multiply(java.lang.Number);

  public abstract org.jpmml.evaluator.Value<V> multiply(org.jpmml.evaluator.Value<? extends java.lang.Number>);

  public abstract org.jpmml.evaluator.Value<V> multiply(java.lang.Number, java.lang.Number);

  public abstract org.jpmml.evaluator.Value<V> divide(java.lang.Number);

  public abstract org.jpmml.evaluator.Value<V> divide(org.jpmml.evaluator.Value<? extends java.lang.Number>);

  public abstract org.jpmml.evaluator.Value<V> residual(org.jpmml.evaluator.Value<? extends java.lang.Number>);

  public abstract org.jpmml.evaluator.Value<V> square();

  public abstract org.jpmml.evaluator.Value<V> power(java.lang.Number);

  public abstract org.jpmml.evaluator.Value<V> reciprocal();

  public abstract org.jpmml.evaluator.Value<V> elliott();

  public abstract org.jpmml.evaluator.Value<V> exp();

  public abstract org.jpmml.evaluator.Value<V> ln();

  public abstract org.jpmml.evaluator.Value<V> gauss();

  public abstract org.jpmml.evaluator.Value<V> inverseLogit();

  public abstract org.jpmml.evaluator.Value<V> inverseCloglog();

  public abstract org.jpmml.evaluator.Value<V> inverseLoglog();

  public abstract org.jpmml.evaluator.Value<V> inverseLogc();

  public abstract org.jpmml.evaluator.Value<V> inverseNegbin(java.lang.Number);

  public abstract org.jpmml.evaluator.Value<V> inverseOddspower(java.lang.Number);

  public abstract org.jpmml.evaluator.Value<V> inversePower(java.lang.Number);

  public abstract org.jpmml.evaluator.Value<V> inverseCauchit();

  public abstract org.jpmml.evaluator.Value<V> inverseProbit();

  public abstract org.jpmml.evaluator.Value<V> sin();

  public abstract org.jpmml.evaluator.Value<V> cos();

  public abstract org.jpmml.evaluator.Value<V> arctan();

  public abstract org.jpmml.evaluator.Value<V> tanh();

  public abstract org.jpmml.evaluator.Value<V> threshold(java.lang.Number);

  public abstract org.jpmml.evaluator.Value<V> relu();

  public abstract org.jpmml.evaluator.Value<V> abs();

  public abstract org.jpmml.evaluator.Value<V> gaussSim(java.lang.Number);

  public abstract org.jpmml.evaluator.Value<V> restrict(java.lang.Number, java.lang.Number);

  public abstract org.jpmml.evaluator.Value<V> round();

  public abstract org.jpmml.evaluator.Value<V> ceiling();

  public abstract org.jpmml.evaluator.Value<V> floor();

  public abstract org.jpmml.evaluator.Value<V> normalize(java.lang.Number, java.lang.Number, java.lang.Number, java.lang.Number);

  public abstract org.jpmml.evaluator.Value<V> denormalize(java.lang.Number, java.lang.Number, java.lang.Number, java.lang.Number);

  public abstract boolean isZero();

  public abstract boolean isOne();

  public abstract boolean equals(java.lang.Number);

  public abstract int compareTo(java.lang.Number);

  public abstract float floatValue();

  public abstract double doubleValue();

  public abstract V getValue();
}
