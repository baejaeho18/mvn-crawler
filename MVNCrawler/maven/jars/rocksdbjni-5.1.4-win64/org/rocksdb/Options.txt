Compiled from "Options.java"
public class org.rocksdb.Options extends org.rocksdb.RocksObject implements org.rocksdb.DBOptionsInterface,org.rocksdb.ColumnFamilyOptionsInterface,org.rocksdb.MutableColumnFamilyOptionsInterface {
  org.rocksdb.Env env_;

  org.rocksdb.MemTableConfig memTableConfig_;

  org.rocksdb.TableFormatConfig tableFormatConfig_;

  org.rocksdb.RateLimiterConfig rateLimiterConfig_;

  org.rocksdb.RateLimiter rateLimiter_;

  org.rocksdb.AbstractComparator<? extends org.rocksdb.AbstractSlice<?>> comparator_;

  static final boolean $assertionsDisabled;

  public org.rocksdb.Options();
    Code:
       0: aload_0
       1: invokestatic  #1                  // Method newOptions:()J
       4: invokespecial #2                  // Method org/rocksdb/RocksObject."<init>":(J)V
       7: aload_0
       8: invokestatic  #3                  // Method org/rocksdb/Env.getDefault:()Lorg/rocksdb/Env;
      11: putfield      #4                  // Field env_:Lorg/rocksdb/Env;
      14: return

  public org.rocksdb.Options(org.rocksdb.DBOptions, org.rocksdb.ColumnFamilyOptions);
    Code:
       0: aload_0
       1: aload_1
       2: getfield      #5                  // Field org/rocksdb/DBOptions.nativeHandle_:J
       5: aload_2
       6: getfield      #6                  // Field org/rocksdb/ColumnFamilyOptions.nativeHandle_:J
       9: invokestatic  #7                  // Method newOptions:(JJ)J
      12: invokespecial #2                  // Method org/rocksdb/RocksObject."<init>":(J)V
      15: aload_0
      16: invokestatic  #3                  // Method org/rocksdb/Env.getDefault:()Lorg/rocksdb/Env;
      19: putfield      #4                  // Field env_:Lorg/rocksdb/Env;
      22: return

  public org.rocksdb.Options setIncreaseParallelism(int);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #13                 // Method setIncreaseParallelism:(JI)V
      30: aload_0
      31: areturn

  public org.rocksdb.Options setCreateIfMissing(boolean);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #14                 // Method setCreateIfMissing:(JZ)V
      30: aload_0
      31: areturn

  public org.rocksdb.Options setCreateMissingColumnFamilies(boolean);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #15                 // Method setCreateMissingColumnFamilies:(JZ)V
      30: aload_0
      31: areturn

  public org.rocksdb.Options setEnv(org.rocksdb.Env);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: aload_1
      27: getfield      #16                 // Field org/rocksdb/Env.nativeHandle_:J
      30: invokespecial #17                 // Method setEnv:(JJ)V
      33: aload_0
      34: aload_1
      35: putfield      #4                  // Field env_:Lorg/rocksdb/Env;
      38: aload_0
      39: areturn

  public org.rocksdb.Env getEnv();
    Code:
       0: aload_0
       1: getfield      #4                  // Field env_:Lorg/rocksdb/Env;
       4: areturn

  public org.rocksdb.Options prepareForBulkLoad();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #18                 // Method prepareForBulkLoad:(J)V
       8: aload_0
       9: areturn

  public boolean createIfMissing();
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: invokespecial #19                 // Method createIfMissing:(J)Z
      29: ireturn

  public boolean createMissingColumnFamilies();
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: invokespecial #20                 // Method createMissingColumnFamilies:(J)Z
      29: ireturn

  public org.rocksdb.Options optimizeForPointLookup(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #21                 // Method optimizeForPointLookup:(JJ)V
       9: aload_0
      10: areturn

  public org.rocksdb.Options optimizeLevelStyleCompaction();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: ldc2_w        #22                 // long 536870912l
       8: invokespecial #24                 // Method optimizeLevelStyleCompaction:(JJ)V
      11: aload_0
      12: areturn

  public org.rocksdb.Options optimizeLevelStyleCompaction(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #24                 // Method optimizeLevelStyleCompaction:(JJ)V
       9: aload_0
      10: areturn

  public org.rocksdb.Options optimizeUniversalStyleCompaction();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: ldc2_w        #22                 // long 536870912l
       8: invokespecial #25                 // Method optimizeUniversalStyleCompaction:(JJ)V
      11: aload_0
      12: areturn

  public org.rocksdb.Options optimizeUniversalStyleCompaction(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #25                 // Method optimizeUniversalStyleCompaction:(JJ)V
       9: aload_0
      10: areturn

  public org.rocksdb.Options setComparator(org.rocksdb.BuiltinComparator);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: aload_1
      27: invokevirtual #26                 // Method org/rocksdb/BuiltinComparator.ordinal:()I
      30: invokespecial #27                 // Method setComparatorHandle:(JI)V
      33: aload_0
      34: areturn

  public org.rocksdb.Options setComparator(org.rocksdb.AbstractComparator<? extends org.rocksdb.AbstractSlice<?>>);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: aload_1
      27: invokevirtual #28                 // Method org/rocksdb/AbstractComparator.getNativeHandle:()J
      30: invokespecial #29                 // Method setComparatorHandle:(JJ)V
      33: aload_0
      34: aload_1
      35: putfield      #30                 // Field comparator_:Lorg/rocksdb/AbstractComparator;
      38: aload_0
      39: areturn

  public org.rocksdb.Options setMergeOperatorName(java.lang.String);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_1
      22: ifnonnull     35
      25: new           #31                 // class java/lang/IllegalArgumentException
      28: dup
      29: ldc           #32                 // String Merge operator name must not be null.
      31: invokespecial #33                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      34: athrow
      35: aload_0
      36: aload_0
      37: getfield      #12                 // Field nativeHandle_:J
      40: aload_1
      41: invokespecial #34                 // Method setMergeOperatorName:(JLjava/lang/String;)V
      44: aload_0
      45: areturn

  public org.rocksdb.Options setMergeOperator(org.rocksdb.MergeOperator);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: aload_1
       6: invokeinterface #35,  1           // InterfaceMethod org/rocksdb/MergeOperator.newMergeOperatorHandle:()J
      11: invokespecial #36                 // Method setMergeOperator:(JJ)V
      14: aload_0
      15: areturn

  public org.rocksdb.Options setWriteBufferSize(long);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #37                 // Method setWriteBufferSize:(JJ)V
      30: aload_0
      31: areturn

  public long writeBufferSize();
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: invokespecial #38                 // Method writeBufferSize:(J)J
      29: lreturn

  public org.rocksdb.Options setMaxWriteBufferNumber(int);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #39                 // Method setMaxWriteBufferNumber:(JI)V
      30: aload_0
      31: areturn

  public int maxWriteBufferNumber();
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: invokespecial #40                 // Method maxWriteBufferNumber:(J)I
      29: ireturn

  public boolean errorIfExists();
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: invokespecial #41                 // Method errorIfExists:(J)Z
      29: ireturn

  public org.rocksdb.Options setErrorIfExists(boolean);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #42                 // Method setErrorIfExists:(JZ)V
      30: aload_0
      31: areturn

  public boolean paranoidChecks();
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: invokespecial #43                 // Method paranoidChecks:(J)Z
      29: ireturn

  public org.rocksdb.Options setParanoidChecks(boolean);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #44                 // Method setParanoidChecks:(JZ)V
      30: aload_0
      31: areturn

  public int maxOpenFiles();
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: invokespecial #45                 // Method maxOpenFiles:(J)I
      29: ireturn

  public org.rocksdb.Options setMaxTotalWalSize(long);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #46                 // Method setMaxTotalWalSize:(JJ)V
      30: aload_0
      31: areturn

  public long maxTotalWalSize();
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: invokespecial #47                 // Method maxTotalWalSize:(J)J
      29: lreturn

  public org.rocksdb.Options setMaxOpenFiles(int);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #48                 // Method setMaxOpenFiles:(JI)V
      30: aload_0
      31: areturn

  public boolean disableDataSync();
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: invokespecial #49                 // Method disableDataSync:(J)Z
      29: ireturn

  public org.rocksdb.Options setDisableDataSync(boolean);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #50                 // Method setDisableDataSync:(JZ)V
      30: aload_0
      31: areturn

  public boolean useFsync();
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: invokespecial #51                 // Method useFsync:(J)Z
      29: ireturn

  public org.rocksdb.Options setUseFsync(boolean);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #52                 // Method setUseFsync:(JZ)V
      30: aload_0
      31: areturn

  public java.lang.String dbLogDir();
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: invokespecial #53                 // Method dbLogDir:(J)Ljava/lang/String;
      29: areturn

  public org.rocksdb.Options setDbLogDir(java.lang.String);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: aload_1
      27: invokespecial #54                 // Method setDbLogDir:(JLjava/lang/String;)V
      30: aload_0
      31: areturn

  public java.lang.String walDir();
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: invokespecial #55                 // Method walDir:(J)Ljava/lang/String;
      29: areturn

  public org.rocksdb.Options setWalDir(java.lang.String);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: aload_1
      27: invokespecial #56                 // Method setWalDir:(JLjava/lang/String;)V
      30: aload_0
      31: areturn

  public long deleteObsoleteFilesPeriodMicros();
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: invokespecial #57                 // Method deleteObsoleteFilesPeriodMicros:(J)J
      29: lreturn

  public org.rocksdb.Options setDeleteObsoleteFilesPeriodMicros(long);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #58                 // Method setDeleteObsoleteFilesPeriodMicros:(JJ)V
      30: aload_0
      31: areturn

  public int maxBackgroundCompactions();
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: invokespecial #59                 // Method maxBackgroundCompactions:(J)I
      29: ireturn

  public org.rocksdb.Options createStatistics();
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: invokespecial #60                 // Method createStatistics:(J)V
      29: aload_0
      30: areturn

  public org.rocksdb.Statistics statisticsPtr();
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: invokespecial #61                 // Method statisticsPtr:(J)J
      29: lstore_1
      30: lload_1
      31: lconst_0
      32: lcmp
      33: ifne          50
      36: aload_0
      37: invokevirtual #62                 // Method createStatistics:()Lorg/rocksdb/Options;
      40: pop
      41: aload_0
      42: aload_0
      43: getfield      #12                 // Field nativeHandle_:J
      46: invokespecial #61                 // Method statisticsPtr:(J)J
      49: lstore_1
      50: new           #63                 // class org/rocksdb/Statistics
      53: dup
      54: lload_1
      55: invokespecial #64                 // Method org/rocksdb/Statistics."<init>":(J)V
      58: areturn

  public void setBaseBackgroundCompactions(int);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #65                 // Method setBaseBackgroundCompactions:(JI)V
      30: return

  public int baseBackgroundCompactions();
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: invokespecial #66                 // Method baseBackgroundCompactions:(J)I
      29: ireturn

  public org.rocksdb.Options setMaxBackgroundCompactions(int);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #67                 // Method setMaxBackgroundCompactions:(JI)V
      30: aload_0
      31: areturn

  public void setMaxSubcompactions(int);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #68                 // Method setMaxSubcompactions:(JI)V
      30: return

  public int maxSubcompactions();
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: invokespecial #69                 // Method maxSubcompactions:(J)I
      29: ireturn

  public int maxBackgroundFlushes();
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: invokespecial #70                 // Method maxBackgroundFlushes:(J)I
      29: ireturn

  public org.rocksdb.Options setMaxBackgroundFlushes(int);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #71                 // Method setMaxBackgroundFlushes:(JI)V
      30: aload_0
      31: areturn

  public long maxLogFileSize();
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: invokespecial #72                 // Method maxLogFileSize:(J)J
      29: lreturn

  public org.rocksdb.Options setMaxLogFileSize(long);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #73                 // Method setMaxLogFileSize:(JJ)V
      30: aload_0
      31: areturn

  public long logFileTimeToRoll();
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: invokespecial #74                 // Method logFileTimeToRoll:(J)J
      29: lreturn

  public org.rocksdb.Options setLogFileTimeToRoll(long);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #75                 // Method setLogFileTimeToRoll:(JJ)V
      30: aload_0
      31: areturn

  public long keepLogFileNum();
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: invokespecial #76                 // Method keepLogFileNum:(J)J
      29: lreturn

  public org.rocksdb.Options setKeepLogFileNum(long);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #77                 // Method setKeepLogFileNum:(JJ)V
      30: aload_0
      31: areturn

  public long maxManifestFileSize();
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: invokespecial #78                 // Method maxManifestFileSize:(J)J
      29: lreturn

  public org.rocksdb.Options setMaxManifestFileSize(long);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #79                 // Method setMaxManifestFileSize:(JJ)V
      30: aload_0
      31: areturn

  public org.rocksdb.Options setMaxTableFilesSizeFIFO(long);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          20
       6: lload_1
       7: lconst_0
       8: lcmp
       9: ifgt          20
      12: new           #10                 // class java/lang/AssertionError
      15: dup
      16: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      19: athrow
      20: getstatic     #8                  // Field $assertionsDisabled:Z
      23: ifne          41
      26: aload_0
      27: invokevirtual #9                  // Method isOwningHandle:()Z
      30: ifne          41
      33: new           #10                 // class java/lang/AssertionError
      36: dup
      37: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      40: athrow
      41: aload_0
      42: aload_0
      43: getfield      #12                 // Field nativeHandle_:J
      46: lload_1
      47: invokespecial #80                 // Method setMaxTableFilesSizeFIFO:(JJ)V
      50: aload_0
      51: areturn

  public long maxTableFilesSizeFIFO();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #81                 // Method maxTableFilesSizeFIFO:(J)J
       8: lreturn

  public int tableCacheNumshardbits();
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: invokespecial #82                 // Method tableCacheNumshardbits:(J)I
      29: ireturn

  public org.rocksdb.Options setTableCacheNumshardbits(int);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #83                 // Method setTableCacheNumshardbits:(JI)V
      30: aload_0
      31: areturn

  public long walTtlSeconds();
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: invokespecial #84                 // Method walTtlSeconds:(J)J
      29: lreturn

  public org.rocksdb.Options setWalTtlSeconds(long);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #85                 // Method setWalTtlSeconds:(JJ)V
      30: aload_0
      31: areturn

  public long walSizeLimitMB();
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: invokespecial #86                 // Method walSizeLimitMB:(J)J
      29: lreturn

  public org.rocksdb.Options setWalSizeLimitMB(long);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #87                 // Method setWalSizeLimitMB:(JJ)V
      30: aload_0
      31: areturn

  public long manifestPreallocationSize();
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: invokespecial #88                 // Method manifestPreallocationSize:(J)J
      29: lreturn

  public org.rocksdb.Options setManifestPreallocationSize(long);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #89                 // Method setManifestPreallocationSize:(JJ)V
      30: aload_0
      31: areturn

  public org.rocksdb.Options setUseDirectReads(boolean);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #90                 // Method setUseDirectReads:(JZ)V
      30: aload_0
      31: areturn

  public boolean useDirectReads();
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: invokespecial #91                 // Method useDirectReads:(J)Z
      29: ireturn

  public org.rocksdb.Options setUseDirectWrites(boolean);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #92                 // Method setUseDirectWrites:(JZ)V
      30: aload_0
      31: areturn

  public boolean useDirectWrites();
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: invokespecial #93                 // Method useDirectWrites:(J)Z
      29: ireturn

  public boolean allowMmapReads();
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: invokespecial #94                 // Method allowMmapReads:(J)Z
      29: ireturn

  public org.rocksdb.Options setAllowMmapReads(boolean);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #95                 // Method setAllowMmapReads:(JZ)V
      30: aload_0
      31: areturn

  public boolean allowMmapWrites();
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: invokespecial #96                 // Method allowMmapWrites:(J)Z
      29: ireturn

  public org.rocksdb.Options setAllowMmapWrites(boolean);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #97                 // Method setAllowMmapWrites:(JZ)V
      30: aload_0
      31: areturn

  public boolean isFdCloseOnExec();
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: invokespecial #98                 // Method isFdCloseOnExec:(J)Z
      29: ireturn

  public org.rocksdb.Options setIsFdCloseOnExec(boolean);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #99                 // Method setIsFdCloseOnExec:(JZ)V
      30: aload_0
      31: areturn

  public int statsDumpPeriodSec();
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: invokespecial #100                // Method statsDumpPeriodSec:(J)I
      29: ireturn

  public org.rocksdb.Options setStatsDumpPeriodSec(int);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #101                // Method setStatsDumpPeriodSec:(JI)V
      30: aload_0
      31: areturn

  public boolean adviseRandomOnOpen();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #102                // Method adviseRandomOnOpen:(J)Z
       8: ireturn

  public org.rocksdb.Options setAdviseRandomOnOpen(boolean);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #103                // Method setAdviseRandomOnOpen:(JZ)V
      30: aload_0
      31: areturn

  public boolean useAdaptiveMutex();
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: invokespecial #104                // Method useAdaptiveMutex:(J)Z
      29: ireturn

  public org.rocksdb.Options setUseAdaptiveMutex(boolean);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #105                // Method setUseAdaptiveMutex:(JZ)V
      30: aload_0
      31: areturn

  public long bytesPerSync();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #106                // Method bytesPerSync:(J)J
       8: lreturn

  public org.rocksdb.Options setBytesPerSync(long);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #107                // Method setBytesPerSync:(JJ)V
      30: aload_0
      31: areturn

  public void setAllowConcurrentMemtableWrite(boolean);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #108                // Method setAllowConcurrentMemtableWrite:(JZ)V
       9: return

  public boolean allowConcurrentMemtableWrite();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #109                // Method allowConcurrentMemtableWrite:(J)Z
       8: ireturn

  public void setEnableWriteThreadAdaptiveYield(boolean);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #110                // Method setEnableWriteThreadAdaptiveYield:(JZ)V
       9: return

  public boolean enableWriteThreadAdaptiveYield();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #111                // Method enableWriteThreadAdaptiveYield:(J)Z
       8: ireturn

  public void setWriteThreadMaxYieldUsec(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #112                // Method setWriteThreadMaxYieldUsec:(JJ)V
       9: return

  public long writeThreadMaxYieldUsec();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #113                // Method writeThreadMaxYieldUsec:(J)J
       8: lreturn

  public void setWriteThreadSlowYieldUsec(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #114                // Method setWriteThreadSlowYieldUsec:(JJ)V
       9: return

  public long writeThreadSlowYieldUsec();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #115                // Method writeThreadSlowYieldUsec:(J)J
       8: lreturn

  public org.rocksdb.Options setMemTableConfig(org.rocksdb.MemTableConfig);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #116                // Field memTableConfig_:Lorg/rocksdb/MemTableConfig;
       5: aload_0
       6: aload_0
       7: getfield      #12                 // Field nativeHandle_:J
      10: aload_1
      11: invokevirtual #117                // Method org/rocksdb/MemTableConfig.newMemTableFactoryHandle:()J
      14: invokespecial #118                // Method setMemTableFactory:(JJ)V
      17: aload_0
      18: areturn

  public org.rocksdb.Options setRateLimiterConfig(org.rocksdb.RateLimiterConfig);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #119                // Field rateLimiterConfig_:Lorg/rocksdb/RateLimiterConfig;
       5: aload_0
       6: aload_0
       7: getfield      #12                 // Field nativeHandle_:J
      10: aload_1
      11: invokevirtual #120                // Method org/rocksdb/RateLimiterConfig.newRateLimiterHandle:()J
      14: invokespecial #121                // Method setOldRateLimiter:(JJ)V
      17: aload_0
      18: areturn

  public org.rocksdb.Options setRateLimiter(org.rocksdb.RateLimiter);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_1
      23: putfield      #122                // Field rateLimiter_:Lorg/rocksdb/RateLimiter;
      26: aload_0
      27: aload_0
      28: getfield      #12                 // Field nativeHandle_:J
      31: aload_1
      32: getfield      #123                // Field org/rocksdb/RateLimiter.nativeHandle_:J
      35: invokespecial #124                // Method setRateLimiter:(JJ)V
      38: aload_0
      39: areturn

  public org.rocksdb.Options setLogger(org.rocksdb.Logger);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: aload_1
      27: getfield      #125                // Field org/rocksdb/Logger.nativeHandle_:J
      30: invokespecial #126                // Method setLogger:(JJ)V
      33: aload_0
      34: areturn

  public org.rocksdb.Options setInfoLogLevel(org.rocksdb.InfoLogLevel);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: aload_1
      27: invokevirtual #127                // Method org/rocksdb/InfoLogLevel.getValue:()B
      30: invokespecial #128                // Method setInfoLogLevel:(JB)V
      33: aload_0
      34: areturn

  public org.rocksdb.InfoLogLevel infoLogLevel();
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: invokespecial #129                // Method infoLogLevel:(J)B
      29: invokestatic  #130                // Method org/rocksdb/InfoLogLevel.getInfoLogLevel:(B)Lorg/rocksdb/InfoLogLevel;
      32: areturn

  public java.lang.String memTableFactoryName();
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: invokespecial #131                // Method memTableFactoryName:(J)Ljava/lang/String;
      29: areturn

  public org.rocksdb.Options setTableFormatConfig(org.rocksdb.TableFormatConfig);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #132                // Field tableFormatConfig_:Lorg/rocksdb/TableFormatConfig;
       5: aload_0
       6: aload_0
       7: getfield      #12                 // Field nativeHandle_:J
      10: aload_1
      11: invokevirtual #133                // Method org/rocksdb/TableFormatConfig.newTableFactoryHandle:()J
      14: invokespecial #134                // Method setTableFactory:(JJ)V
      17: aload_0
      18: areturn

  public java.lang.String tableFactoryName();
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: invokespecial #135                // Method tableFactoryName:(J)Ljava/lang/String;
      29: areturn

  public org.rocksdb.Options useFixedLengthPrefixExtractor(int);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #136                // Method useFixedLengthPrefixExtractor:(JI)V
      30: aload_0
      31: areturn

  public org.rocksdb.Options useCappedPrefixExtractor(int);
    Code:
       0: getstatic     #8                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #9                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #10                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #11                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #12                 // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #137                // Method useCappedPrefixExtractor:(JI)V
      30: aload_0
      31: areturn

  public org.rocksdb.CompressionType compressionType();
    Code:
       0: invokestatic  #138                // Method org/rocksdb/CompressionType.values:()[Lorg/rocksdb/CompressionType;
       3: aload_0
       4: aload_0
       5: getfield      #12                 // Field nativeHandle_:J
       8: invokespecial #139                // Method compressionType:(J)B
      11: aaload
      12: areturn

  public org.rocksdb.Options setCompressionPerLevel(java.util.List<org.rocksdb.CompressionType>);
    Code:
       0: aload_1
       1: invokeinterface #140,  1          // InterfaceMethod java/util/List.size:()I
       6: newarray       byte
       8: astore_2
       9: iconst_0
      10: istore_3
      11: iload_3
      12: aload_1
      13: invokeinterface #140,  1          // InterfaceMethod java/util/List.size:()I
      18: if_icmpge     43
      21: aload_2
      22: iload_3
      23: aload_1
      24: iload_3
      25: invokeinterface #141,  2          // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      30: checkcast     #142                // class org/rocksdb/CompressionType
      33: invokevirtual #143                // Method org/rocksdb/CompressionType.getValue:()B
      36: bastore
      37: iinc          3, 1
      40: goto          11
      43: aload_0
      44: aload_0
      45: getfield      #12                 // Field nativeHandle_:J
      48: aload_2
      49: invokespecial #144                // Method setCompressionPerLevel:(J[B)V
      52: aload_0
      53: areturn

  public java.util.List<org.rocksdb.CompressionType> compressionPerLevel();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #145                // Method compressionPerLevel:(J)[B
       8: astore_1
       9: new           #146                // class java/util/ArrayList
      12: dup
      13: invokespecial #147                // Method java/util/ArrayList."<init>":()V
      16: astore_2
      17: aload_1
      18: astore_3
      19: aload_3
      20: arraylength
      21: istore        4
      23: iconst_0
      24: istore        5
      26: iload         5
      28: iload         4
      30: if_icmpge     63
      33: aload_3
      34: iload         5
      36: baload
      37: invokestatic  #148                // Method java/lang/Byte.valueOf:(B)Ljava/lang/Byte;
      40: astore        6
      42: aload_2
      43: aload         6
      45: invokevirtual #149                // Method java/lang/Byte.byteValue:()B
      48: invokestatic  #150                // Method org/rocksdb/CompressionType.getCompressionType:(B)Lorg/rocksdb/CompressionType;
      51: invokeinterface #151,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      56: pop
      57: iinc          5, 1
      60: goto          26
      63: aload_2
      64: areturn

  public org.rocksdb.Options setCompressionType(org.rocksdb.CompressionType);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: aload_1
       6: invokevirtual #143                // Method org/rocksdb/CompressionType.getValue:()B
       9: invokespecial #152                // Method setCompressionType:(JB)V
      12: aload_0
      13: areturn

  public org.rocksdb.CompactionStyle compactionStyle();
    Code:
       0: invokestatic  #153                // Method org/rocksdb/CompactionStyle.values:()[Lorg/rocksdb/CompactionStyle;
       3: aload_0
       4: aload_0
       5: getfield      #12                 // Field nativeHandle_:J
       8: invokespecial #154                // Method compactionStyle:(J)B
      11: aaload
      12: areturn

  public org.rocksdb.Options setCompactionStyle(org.rocksdb.CompactionStyle);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: aload_1
       6: invokevirtual #155                // Method org/rocksdb/CompactionStyle.getValue:()B
       9: invokespecial #156                // Method setCompactionStyle:(JB)V
      12: aload_0
      13: areturn

  public int numLevels();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #157                // Method numLevels:(J)I
       8: ireturn

  public org.rocksdb.Options setNumLevels(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #158                // Method setNumLevels:(JI)V
       9: aload_0
      10: areturn

  public int levelZeroFileNumCompactionTrigger();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #159                // Method levelZeroFileNumCompactionTrigger:(J)I
       8: ireturn

  public org.rocksdb.Options setLevelZeroFileNumCompactionTrigger(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #160                // Method setLevelZeroFileNumCompactionTrigger:(JI)V
       9: aload_0
      10: areturn

  public int levelZeroSlowdownWritesTrigger();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #161                // Method levelZeroSlowdownWritesTrigger:(J)I
       8: ireturn

  public org.rocksdb.Options setLevelZeroSlowdownWritesTrigger(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #162                // Method setLevelZeroSlowdownWritesTrigger:(JI)V
       9: aload_0
      10: areturn

  public int levelZeroStopWritesTrigger();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #163                // Method levelZeroStopWritesTrigger:(J)I
       8: ireturn

  public org.rocksdb.Options setLevelZeroStopWritesTrigger(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #164                // Method setLevelZeroStopWritesTrigger:(JI)V
       9: aload_0
      10: areturn

  public int maxMemCompactionLevel();
    Code:
       0: iconst_0
       1: ireturn

  public org.rocksdb.Options setMaxMemCompactionLevel(int);
    Code:
       0: aload_0
       1: areturn

  public long targetFileSizeBase();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #165                // Method targetFileSizeBase:(J)J
       8: lreturn

  public org.rocksdb.Options setTargetFileSizeBase(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #166                // Method setTargetFileSizeBase:(JJ)V
       9: aload_0
      10: areturn

  public int targetFileSizeMultiplier();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #167                // Method targetFileSizeMultiplier:(J)I
       8: ireturn

  public org.rocksdb.Options setTargetFileSizeMultiplier(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #168                // Method setTargetFileSizeMultiplier:(JI)V
       9: aload_0
      10: areturn

  public org.rocksdb.Options setMaxBytesForLevelBase(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #169                // Method setMaxBytesForLevelBase:(JJ)V
       9: aload_0
      10: areturn

  public long maxBytesForLevelBase();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #170                // Method maxBytesForLevelBase:(J)J
       8: lreturn

  public org.rocksdb.Options setLevelCompactionDynamicLevelBytes(boolean);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #171                // Method setLevelCompactionDynamicLevelBytes:(JZ)V
       9: aload_0
      10: areturn

  public boolean levelCompactionDynamicLevelBytes();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #172                // Method levelCompactionDynamicLevelBytes:(J)Z
       8: ireturn

  public double maxBytesForLevelMultiplier();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #173                // Method maxBytesForLevelMultiplier:(J)D
       8: dreturn

  public org.rocksdb.Options setMaxBytesForLevelMultiplier(double);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: dload_1
       6: invokespecial #174                // Method setMaxBytesForLevelMultiplier:(JD)V
       9: aload_0
      10: areturn

  public long maxCompactionBytes();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #175                // Method maxCompactionBytes:(J)J
       8: lreturn

  public org.rocksdb.Options setMaxCompactionBytes(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #176                // Method setMaxCompactionBytes:(JJ)V
       9: aload_0
      10: areturn

  public double softRateLimit();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #177                // Method softRateLimit:(J)D
       8: dreturn

  public org.rocksdb.Options setSoftRateLimit(double);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: dload_1
       6: invokespecial #178                // Method setSoftRateLimit:(JD)V
       9: aload_0
      10: areturn

  public double hardRateLimit();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #179                // Method hardRateLimit:(J)D
       8: dreturn

  public org.rocksdb.Options setHardRateLimit(double);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: dload_1
       6: invokespecial #180                // Method setHardRateLimit:(JD)V
       9: aload_0
      10: areturn

  public int rateLimitDelayMaxMilliseconds();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #181                // Method rateLimitDelayMaxMilliseconds:(J)I
       8: ireturn

  public org.rocksdb.Options setRateLimitDelayMaxMilliseconds(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #182                // Method setRateLimitDelayMaxMilliseconds:(JI)V
       9: aload_0
      10: areturn

  public long arenaBlockSize();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #183                // Method arenaBlockSize:(J)J
       8: lreturn

  public org.rocksdb.Options setArenaBlockSize(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #184                // Method setArenaBlockSize:(JJ)V
       9: aload_0
      10: areturn

  public boolean disableAutoCompactions();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #185                // Method disableAutoCompactions:(J)Z
       8: ireturn

  public org.rocksdb.Options setDisableAutoCompactions(boolean);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #186                // Method setDisableAutoCompactions:(JZ)V
       9: aload_0
      10: areturn

  public boolean purgeRedundantKvsWhileFlush();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #187                // Method purgeRedundantKvsWhileFlush:(J)Z
       8: ireturn

  public org.rocksdb.Options setPurgeRedundantKvsWhileFlush(boolean);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #188                // Method setPurgeRedundantKvsWhileFlush:(JZ)V
       9: aload_0
      10: areturn

  public boolean verifyChecksumsInCompaction();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #189                // Method verifyChecksumsInCompaction:(J)Z
       8: ireturn

  public org.rocksdb.Options setVerifyChecksumsInCompaction(boolean);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #190                // Method setVerifyChecksumsInCompaction:(JZ)V
       9: aload_0
      10: areturn

  public long maxSequentialSkipInIterations();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #191                // Method maxSequentialSkipInIterations:(J)J
       8: lreturn

  public org.rocksdb.Options setMaxSequentialSkipInIterations(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #192                // Method setMaxSequentialSkipInIterations:(JJ)V
       9: aload_0
      10: areturn

  public boolean inplaceUpdateSupport();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #193                // Method inplaceUpdateSupport:(J)Z
       8: ireturn

  public org.rocksdb.Options setInplaceUpdateSupport(boolean);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #194                // Method setInplaceUpdateSupport:(JZ)V
       9: aload_0
      10: areturn

  public long inplaceUpdateNumLocks();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #195                // Method inplaceUpdateNumLocks:(J)J
       8: lreturn

  public org.rocksdb.Options setInplaceUpdateNumLocks(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #196                // Method setInplaceUpdateNumLocks:(JJ)V
       9: aload_0
      10: areturn

  public double memtablePrefixBloomSizeRatio();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #197                // Method memtablePrefixBloomSizeRatio:(J)D
       8: dreturn

  public org.rocksdb.Options setMemtablePrefixBloomSizeRatio(double);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: dload_1
       6: invokespecial #198                // Method setMemtablePrefixBloomSizeRatio:(JD)V
       9: aload_0
      10: areturn

  public int bloomLocality();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #199                // Method bloomLocality:(J)I
       8: ireturn

  public org.rocksdb.Options setBloomLocality(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #200                // Method setBloomLocality:(JI)V
       9: aload_0
      10: areturn

  public long maxSuccessiveMerges();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #201                // Method maxSuccessiveMerges:(J)J
       8: lreturn

  public org.rocksdb.Options setMaxSuccessiveMerges(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #202                // Method setMaxSuccessiveMerges:(JJ)V
       9: aload_0
      10: areturn

  public int minWriteBufferNumberToMerge();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #203                // Method minWriteBufferNumberToMerge:(J)I
       8: ireturn

  public org.rocksdb.Options setMinWriteBufferNumberToMerge(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #204                // Method setMinWriteBufferNumberToMerge:(JI)V
       9: aload_0
      10: areturn

  public int minPartialMergeOperands();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #205                // Method minPartialMergeOperands:(J)I
       8: ireturn

  public org.rocksdb.Options setMinPartialMergeOperands(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #206                // Method setMinPartialMergeOperands:(JI)V
       9: aload_0
      10: areturn

  public org.rocksdb.Options setOptimizeFiltersForHits(boolean);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #207                // Method setOptimizeFiltersForHits:(JZ)V
       9: aload_0
      10: areturn

  public boolean optimizeFiltersForHits();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #208                // Method optimizeFiltersForHits:(J)Z
       8: ireturn

  public org.rocksdb.Options setMemtableHugePageSize(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #209                // Method setMemtableHugePageSize:(JJ)V
       9: aload_0
      10: areturn

  public long memtableHugePageSize();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #210                // Method memtableHugePageSize:(J)J
       8: lreturn

  public org.rocksdb.Options setSoftPendingCompactionBytesLimit(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #211                // Method setSoftPendingCompactionBytesLimit:(JJ)V
       9: aload_0
      10: areturn

  public long softPendingCompactionBytesLimit();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #212                // Method softPendingCompactionBytesLimit:(J)J
       8: lreturn

  public org.rocksdb.Options setHardPendingCompactionBytesLimit(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #213                // Method setHardPendingCompactionBytesLimit:(JJ)V
       9: aload_0
      10: areturn

  public long hardPendingCompactionBytesLimit();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #214                // Method hardPendingCompactionBytesLimit:(J)J
       8: lreturn

  public org.rocksdb.Options setLevel0FileNumCompactionTrigger(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #215                // Method setLevel0FileNumCompactionTrigger:(JI)V
       9: aload_0
      10: areturn

  public int level0FileNumCompactionTrigger();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #216                // Method level0FileNumCompactionTrigger:(J)I
       8: ireturn

  public org.rocksdb.Options setLevel0SlowdownWritesTrigger(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #217                // Method setLevel0SlowdownWritesTrigger:(JI)V
       9: aload_0
      10: areturn

  public int level0SlowdownWritesTrigger();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #218                // Method level0SlowdownWritesTrigger:(J)I
       8: ireturn

  public org.rocksdb.MutableColumnFamilyOptionsInterface setLevel0StopWritesTrigger(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #219                // Method setLevel0StopWritesTrigger:(JI)V
       9: aload_0
      10: areturn

  public int level0StopWritesTrigger();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #220                // Method level0StopWritesTrigger:(J)I
       8: ireturn

  public org.rocksdb.Options setMaxBytesForLevelMultiplierAdditional(int[]);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: aload_1
       6: invokespecial #221                // Method setMaxBytesForLevelMultiplierAdditional:(J[I)V
       9: aload_0
      10: areturn

  public int[] maxBytesForLevelMultiplierAdditional();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #222                // Method maxBytesForLevelMultiplierAdditional:(J)[I
       8: areturn

  public org.rocksdb.Options setParanoidFileChecks(boolean);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #223                // Method setParanoidFileChecks:(JZ)V
       9: aload_0
      10: areturn

  public boolean paranoidFileChecks();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field nativeHandle_:J
       5: invokespecial #224                // Method paranoidFileChecks:(J)Z
       8: ireturn

  private static native long newOptions();

  private static native long newOptions(long, long);

  protected final native void disposeInternal(long);

  private native void setEnv(long, long);

  private native void prepareForBulkLoad(long);

  private native void setIncreaseParallelism(long, int);

  private native void setCreateIfMissing(long, boolean);

  private native boolean createIfMissing(long);

  private native void setCreateMissingColumnFamilies(long, boolean);

  private native boolean createMissingColumnFamilies(long);

  private native void setErrorIfExists(long, boolean);

  private native boolean errorIfExists(long);

  private native void setParanoidChecks(long, boolean);

  private native boolean paranoidChecks(long);

  private native void setOldRateLimiter(long, long);

  private native void setRateLimiter(long, long);

  private native void setLogger(long, long);

  private native void setInfoLogLevel(long, byte);

  private native byte infoLogLevel(long);

  private native void setMaxOpenFiles(long, int);

  private native int maxOpenFiles(long);

  private native void setMaxTotalWalSize(long, long);

  private native long maxTotalWalSize(long);

  private native void createStatistics(long);

  private native long statisticsPtr(long);

  private native void setDisableDataSync(long, boolean);

  private native boolean disableDataSync(long);

  private native boolean useFsync(long);

  private native void setUseFsync(long, boolean);

  private native void setDbLogDir(long, java.lang.String);

  private native java.lang.String dbLogDir(long);

  private native void setWalDir(long, java.lang.String);

  private native java.lang.String walDir(long);

  private native void setDeleteObsoleteFilesPeriodMicros(long, long);

  private native long deleteObsoleteFilesPeriodMicros(long);

  private native void setBaseBackgroundCompactions(long, int);

  private native int baseBackgroundCompactions(long);

  private native void setMaxBackgroundCompactions(long, int);

  private native int maxBackgroundCompactions(long);

  private native void setMaxSubcompactions(long, int);

  private native int maxSubcompactions(long);

  private native void setMaxBackgroundFlushes(long, int);

  private native int maxBackgroundFlushes(long);

  private native void setMaxLogFileSize(long, long) throws java.lang.IllegalArgumentException;

  private native long maxLogFileSize(long);

  private native void setLogFileTimeToRoll(long, long) throws java.lang.IllegalArgumentException;

  private native long logFileTimeToRoll(long);

  private native void setKeepLogFileNum(long, long) throws java.lang.IllegalArgumentException;

  private native long keepLogFileNum(long);

  private native void setMaxManifestFileSize(long, long);

  private native long maxManifestFileSize(long);

  private native void setMaxTableFilesSizeFIFO(long, long);

  private native long maxTableFilesSizeFIFO(long);

  private native void setTableCacheNumshardbits(long, int);

  private native int tableCacheNumshardbits(long);

  private native void setWalTtlSeconds(long, long);

  private native long walTtlSeconds(long);

  private native void setWalSizeLimitMB(long, long);

  private native long walSizeLimitMB(long);

  private native void setManifestPreallocationSize(long, long) throws java.lang.IllegalArgumentException;

  private native long manifestPreallocationSize(long);

  private native void setUseDirectReads(long, boolean);

  private native boolean useDirectReads(long);

  private native void setUseDirectWrites(long, boolean);

  private native boolean useDirectWrites(long);

  private native void setAllowMmapReads(long, boolean);

  private native boolean allowMmapReads(long);

  private native void setAllowMmapWrites(long, boolean);

  private native boolean allowMmapWrites(long);

  private native void setIsFdCloseOnExec(long, boolean);

  private native boolean isFdCloseOnExec(long);

  private native void setStatsDumpPeriodSec(long, int);

  private native int statsDumpPeriodSec(long);

  private native void setAdviseRandomOnOpen(long, boolean);

  private native boolean adviseRandomOnOpen(long);

  private native void setUseAdaptiveMutex(long, boolean);

  private native boolean useAdaptiveMutex(long);

  private native void setBytesPerSync(long, long);

  private native long bytesPerSync(long);

  private native void setAllowConcurrentMemtableWrite(long, boolean);

  private native boolean allowConcurrentMemtableWrite(long);

  private native void setEnableWriteThreadAdaptiveYield(long, boolean);

  private native boolean enableWriteThreadAdaptiveYield(long);

  private native void setWriteThreadMaxYieldUsec(long, long);

  private native long writeThreadMaxYieldUsec(long);

  private native void setWriteThreadSlowYieldUsec(long, long);

  private native long writeThreadSlowYieldUsec(long);

  private native void optimizeForPointLookup(long, long);

  private native void optimizeLevelStyleCompaction(long, long);

  private native void optimizeUniversalStyleCompaction(long, long);

  private native void setComparatorHandle(long, int);

  private native void setComparatorHandle(long, long);

  private native void setMergeOperatorName(long, java.lang.String);

  private native void setMergeOperator(long, long);

  private native void setWriteBufferSize(long, long) throws java.lang.IllegalArgumentException;

  private native long writeBufferSize(long);

  private native void setMaxWriteBufferNumber(long, int);

  private native int maxWriteBufferNumber(long);

  private native void setMinWriteBufferNumberToMerge(long, int);

  private native int minWriteBufferNumberToMerge(long);

  private native void setCompressionType(long, byte);

  private native byte compressionType(long);

  private native void setCompressionPerLevel(long, byte[]);

  private native byte[] compressionPerLevel(long);

  private native void useFixedLengthPrefixExtractor(long, int);

  private native void useCappedPrefixExtractor(long, int);

  private native void setNumLevels(long, int);

  private native int numLevels(long);

  private native void setLevelZeroFileNumCompactionTrigger(long, int);

  private native int levelZeroFileNumCompactionTrigger(long);

  private native void setLevelZeroSlowdownWritesTrigger(long, int);

  private native int levelZeroSlowdownWritesTrigger(long);

  private native void setLevelZeroStopWritesTrigger(long, int);

  private native int levelZeroStopWritesTrigger(long);

  private native void setTargetFileSizeBase(long, long);

  private native long targetFileSizeBase(long);

  private native void setTargetFileSizeMultiplier(long, int);

  private native int targetFileSizeMultiplier(long);

  private native void setMaxBytesForLevelBase(long, long);

  private native long maxBytesForLevelBase(long);

  private native void setLevelCompactionDynamicLevelBytes(long, boolean);

  private native boolean levelCompactionDynamicLevelBytes(long);

  private native void setMaxBytesForLevelMultiplier(long, double);

  private native double maxBytesForLevelMultiplier(long);

  private native void setMaxCompactionBytes(long, long);

  private native long maxCompactionBytes(long);

  private native void setSoftRateLimit(long, double);

  private native double softRateLimit(long);

  private native void setHardRateLimit(long, double);

  private native double hardRateLimit(long);

  private native void setRateLimitDelayMaxMilliseconds(long, int);

  private native int rateLimitDelayMaxMilliseconds(long);

  private native void setArenaBlockSize(long, long) throws java.lang.IllegalArgumentException;

  private native long arenaBlockSize(long);

  private native void setDisableAutoCompactions(long, boolean);

  private native boolean disableAutoCompactions(long);

  private native void setCompactionStyle(long, byte);

  private native byte compactionStyle(long);

  private native void setPurgeRedundantKvsWhileFlush(long, boolean);

  private native boolean purgeRedundantKvsWhileFlush(long);

  private native void setVerifyChecksumsInCompaction(long, boolean);

  private native boolean verifyChecksumsInCompaction(long);

  private native void setMaxSequentialSkipInIterations(long, long);

  private native long maxSequentialSkipInIterations(long);

  private native void setMemTableFactory(long, long);

  private native java.lang.String memTableFactoryName(long);

  private native void setTableFactory(long, long);

  private native java.lang.String tableFactoryName(long);

  private native void setInplaceUpdateSupport(long, boolean);

  private native boolean inplaceUpdateSupport(long);

  private native void setInplaceUpdateNumLocks(long, long) throws java.lang.IllegalArgumentException;

  private native long inplaceUpdateNumLocks(long);

  private native void setMemtablePrefixBloomSizeRatio(long, double);

  private native double memtablePrefixBloomSizeRatio(long);

  private native void setBloomLocality(long, int);

  private native int bloomLocality(long);

  private native void setMaxSuccessiveMerges(long, long) throws java.lang.IllegalArgumentException;

  private native long maxSuccessiveMerges(long);

  private native void setMinPartialMergeOperands(long, int);

  private native int minPartialMergeOperands(long);

  private native void setOptimizeFiltersForHits(long, boolean);

  private native boolean optimizeFiltersForHits(long);

  private native void setMemtableHugePageSize(long, long);

  private native long memtableHugePageSize(long);

  private native void setSoftPendingCompactionBytesLimit(long, long);

  private native long softPendingCompactionBytesLimit(long);

  private native void setHardPendingCompactionBytesLimit(long, long);

  private native long hardPendingCompactionBytesLimit(long);

  private native void setLevel0FileNumCompactionTrigger(long, int);

  private native int level0FileNumCompactionTrigger(long);

  private native void setLevel0SlowdownWritesTrigger(long, int);

  private native int level0SlowdownWritesTrigger(long);

  private native void setLevel0StopWritesTrigger(long, int);

  private native int level0StopWritesTrigger(long);

  private native void setMaxBytesForLevelMultiplierAdditional(long, int[]);

  private native int[] maxBytesForLevelMultiplierAdditional(long);

  private native void setParanoidFileChecks(long, boolean);

  private native boolean paranoidFileChecks(long);

  public java.lang.Object setBytesPerSync(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #225                // Method setBytesPerSync:(J)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setUseAdaptiveMutex(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #226                // Method setUseAdaptiveMutex:(Z)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setAdviseRandomOnOpen(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #227                // Method setAdviseRandomOnOpen:(Z)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setStatsDumpPeriodSec(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #228                // Method setStatsDumpPeriodSec:(I)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setIsFdCloseOnExec(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #229                // Method setIsFdCloseOnExec:(Z)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setAllowMmapWrites(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #230                // Method setAllowMmapWrites:(Z)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setAllowMmapReads(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #231                // Method setAllowMmapReads:(Z)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setUseDirectWrites(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #232                // Method setUseDirectWrites:(Z)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setUseDirectReads(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #233                // Method setUseDirectReads:(Z)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setManifestPreallocationSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #234                // Method setManifestPreallocationSize:(J)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setWalSizeLimitMB(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #235                // Method setWalSizeLimitMB:(J)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setWalTtlSeconds(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #236                // Method setWalTtlSeconds:(J)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setTableCacheNumshardbits(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #237                // Method setTableCacheNumshardbits:(I)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setMaxManifestFileSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #238                // Method setMaxManifestFileSize:(J)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setKeepLogFileNum(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #239                // Method setKeepLogFileNum:(J)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setLogFileTimeToRoll(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #240                // Method setLogFileTimeToRoll:(J)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setMaxLogFileSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #241                // Method setMaxLogFileSize:(J)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setMaxBackgroundFlushes(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #242                // Method setMaxBackgroundFlushes:(I)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setMaxBackgroundCompactions(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #243                // Method setMaxBackgroundCompactions:(I)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setDeleteObsoleteFilesPeriodMicros(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #244                // Method setDeleteObsoleteFilesPeriodMicros:(J)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setWalDir(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #245                // Method setWalDir:(Ljava/lang/String;)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setDbLogDir(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #246                // Method setDbLogDir:(Ljava/lang/String;)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setUseFsync(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #247                // Method setUseFsync:(Z)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setDisableDataSync(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #248                // Method setDisableDataSync:(Z)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object createStatistics();
    Code:
       0: aload_0
       1: invokevirtual #62                 // Method createStatistics:()Lorg/rocksdb/Options;
       4: areturn

  public java.lang.Object setMaxTotalWalSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #249                // Method setMaxTotalWalSize:(J)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setMaxOpenFiles(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #250                // Method setMaxOpenFiles:(I)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setInfoLogLevel(org.rocksdb.InfoLogLevel);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #251                // Method setInfoLogLevel:(Lorg/rocksdb/InfoLogLevel;)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setLogger(org.rocksdb.Logger);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #252                // Method setLogger:(Lorg/rocksdb/Logger;)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setRateLimiter(org.rocksdb.RateLimiter);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #253                // Method setRateLimiter:(Lorg/rocksdb/RateLimiter;)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setRateLimiterConfig(org.rocksdb.RateLimiterConfig);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #254                // Method setRateLimiterConfig:(Lorg/rocksdb/RateLimiterConfig;)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setParanoidChecks(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #255                // Method setParanoidChecks:(Z)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setErrorIfExists(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #256                // Method setErrorIfExists:(Z)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setCreateMissingColumnFamilies(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #257                // Method setCreateMissingColumnFamilies:(Z)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setCreateIfMissing(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #258                // Method setCreateIfMissing:(Z)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setIncreaseParallelism(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #259                // Method setIncreaseParallelism:(I)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setOptimizeFiltersForHits(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #260                // Method setOptimizeFiltersForHits:(Z)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setMinPartialMergeOperands(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #261                // Method setMinPartialMergeOperands:(I)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setBloomLocality(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #262                // Method setBloomLocality:(I)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setInplaceUpdateSupport(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #263                // Method setInplaceUpdateSupport:(Z)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setTableFormatConfig(org.rocksdb.TableFormatConfig);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #264                // Method setTableFormatConfig:(Lorg/rocksdb/TableFormatConfig;)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setMemTableConfig(org.rocksdb.MemTableConfig);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #265                // Method setMemTableConfig:(Lorg/rocksdb/MemTableConfig;)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setMaxTableFilesSizeFIFO(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #266                // Method setMaxTableFilesSizeFIFO:(J)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setCompactionStyle(org.rocksdb.CompactionStyle);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #267                // Method setCompactionStyle:(Lorg/rocksdb/CompactionStyle;)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setPurgeRedundantKvsWhileFlush(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #268                // Method setPurgeRedundantKvsWhileFlush:(Z)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setRateLimitDelayMaxMilliseconds(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #269                // Method setRateLimitDelayMaxMilliseconds:(I)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setHardRateLimit(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokevirtual #270                // Method setHardRateLimit:(D)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setSoftRateLimit(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokevirtual #271                // Method setSoftRateLimit:(D)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setMaxCompactionBytes(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #272                // Method setMaxCompactionBytes:(J)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setMaxBytesForLevelMultiplier(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokevirtual #273                // Method setMaxBytesForLevelMultiplier:(D)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setLevelCompactionDynamicLevelBytes(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #274                // Method setLevelCompactionDynamicLevelBytes:(Z)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setMaxMemCompactionLevel(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #275                // Method setMaxMemCompactionLevel:(I)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setLevelZeroStopWritesTrigger(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #276                // Method setLevelZeroStopWritesTrigger:(I)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setLevelZeroSlowdownWritesTrigger(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #277                // Method setLevelZeroSlowdownWritesTrigger:(I)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setLevelZeroFileNumCompactionTrigger(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #278                // Method setLevelZeroFileNumCompactionTrigger:(I)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setNumLevels(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #279                // Method setNumLevels:(I)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setCompressionPerLevel(java.util.List);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #280                // Method setCompressionPerLevel:(Ljava/util/List;)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setCompressionType(org.rocksdb.CompressionType);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #281                // Method setCompressionType:(Lorg/rocksdb/CompressionType;)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object useCappedPrefixExtractor(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #282                // Method useCappedPrefixExtractor:(I)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object useFixedLengthPrefixExtractor(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #283                // Method useFixedLengthPrefixExtractor:(I)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setMinWriteBufferNumberToMerge(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #284                // Method setMinWriteBufferNumberToMerge:(I)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setMergeOperator(org.rocksdb.MergeOperator);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #285                // Method setMergeOperator:(Lorg/rocksdb/MergeOperator;)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setMergeOperatorName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #286                // Method setMergeOperatorName:(Ljava/lang/String;)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setComparator(org.rocksdb.AbstractComparator);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #287                // Method setComparator:(Lorg/rocksdb/AbstractComparator;)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object setComparator(org.rocksdb.BuiltinComparator);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #288                // Method setComparator:(Lorg/rocksdb/BuiltinComparator;)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object optimizeUniversalStyleCompaction(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #289                // Method optimizeUniversalStyleCompaction:(J)Lorg/rocksdb/Options;
       5: areturn

  public java.lang.Object optimizeUniversalStyleCompaction();
    Code:
       0: aload_0
       1: invokevirtual #290                // Method optimizeUniversalStyleCompaction:()Lorg/rocksdb/Options;
       4: areturn

  public java.lang.Object optimizeLevelStyleCompaction(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #291                // Method optimizeLevelStyleCompaction:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface optimizeLevelStyleCompaction();
    Code:
       0: aload_0
       1: invokevirtual #292                // Method optimizeLevelStyleCompaction:()Lorg/rocksdb/Options;
       4: areturn

  public org.rocksdb.ColumnFamilyOptionsInterface optimizeForPointLookup(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #293                // Method optimizeForPointLookup:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.MutableColumnFamilyOptionsInterface setParanoidFileChecks(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #294                // Method setParanoidFileChecks:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.MutableColumnFamilyOptionsInterface setMaxSequentialSkipInIterations(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #295                // Method setMaxSequentialSkipInIterations:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.MutableColumnFamilyOptionsInterface setVerifyChecksumsInCompaction(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #296                // Method setVerifyChecksumsInCompaction:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.MutableColumnFamilyOptionsInterface setMaxBytesForLevelMultiplierAdditional(int[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #297                // Method setMaxBytesForLevelMultiplierAdditional:([I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.MutableColumnFamilyOptionsInterface setMaxBytesForLevelMultiplier(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokevirtual #273                // Method setMaxBytesForLevelMultiplier:(D)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.MutableColumnFamilyOptionsInterface setMaxBytesForLevelBase(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #298                // Method setMaxBytesForLevelBase:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.MutableColumnFamilyOptionsInterface setTargetFileSizeMultiplier(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #299                // Method setTargetFileSizeMultiplier:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.MutableColumnFamilyOptionsInterface setTargetFileSizeBase(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #300                // Method setTargetFileSizeBase:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.MutableColumnFamilyOptionsInterface setMaxCompactionBytes(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #272                // Method setMaxCompactionBytes:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.MutableColumnFamilyOptionsInterface setLevel0SlowdownWritesTrigger(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #301                // Method setLevel0SlowdownWritesTrigger:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.MutableColumnFamilyOptionsInterface setLevel0FileNumCompactionTrigger(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #302                // Method setLevel0FileNumCompactionTrigger:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.MutableColumnFamilyOptionsInterface setHardPendingCompactionBytesLimit(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #303                // Method setHardPendingCompactionBytesLimit:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.MutableColumnFamilyOptionsInterface setHardRateLimit(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokevirtual #270                // Method setHardRateLimit:(D)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.MutableColumnFamilyOptionsInterface setSoftPendingCompactionBytesLimit(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #304                // Method setSoftPendingCompactionBytesLimit:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.MutableColumnFamilyOptionsInterface setSoftRateLimit(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokevirtual #271                // Method setSoftRateLimit:(D)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.MutableColumnFamilyOptionsInterface setDisableAutoCompactions(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #305                // Method setDisableAutoCompactions:(Z)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.MutableColumnFamilyOptionsInterface setInplaceUpdateNumLocks(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #306                // Method setInplaceUpdateNumLocks:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.MutableColumnFamilyOptionsInterface setMaxWriteBufferNumber(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #307                // Method setMaxWriteBufferNumber:(I)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.MutableColumnFamilyOptionsInterface setMaxSuccessiveMerges(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #308                // Method setMaxSuccessiveMerges:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.MutableColumnFamilyOptionsInterface setMemtableHugePageSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #309                // Method setMemtableHugePageSize:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.MutableColumnFamilyOptionsInterface setMemtablePrefixBloomSizeRatio(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokevirtual #310                // Method setMemtablePrefixBloomSizeRatio:(D)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.MutableColumnFamilyOptionsInterface setArenaBlockSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #311                // Method setArenaBlockSize:(J)Lorg/rocksdb/Options;
       5: areturn

  public org.rocksdb.MutableColumnFamilyOptionsInterface setWriteBufferSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #312                // Method setWriteBufferSize:(J)Lorg/rocksdb/Options;
       5: areturn

  static {};
    Code:
       0: ldc_w         #313                // class org/rocksdb/Options
       3: invokevirtual #314                // Method java/lang/Class.desiredAssertionStatus:()Z
       6: ifne          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: putstatic     #8                  // Field $assertionsDisabled:Z
      17: invokestatic  #315                // Method org/rocksdb/RocksDB.loadLibrary:()V
      20: return
}
