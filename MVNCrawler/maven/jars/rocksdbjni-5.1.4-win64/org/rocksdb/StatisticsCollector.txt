Compiled from "StatisticsCollector.java"
public class org.rocksdb.StatisticsCollector {
  private final java.util.List<org.rocksdb.StatsCollectorInput> _statsCollectorInputList;

  private final java.util.concurrent.ExecutorService _executorService;

  private final int _statsCollectionInterval;

  private volatile boolean _isRunning;

  public org.rocksdb.StatisticsCollector(java.util.List<org.rocksdb.StatsCollectorInput>, int);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #3                  // Field _isRunning:Z
       9: aload_0
      10: aload_1
      11: putfield      #2                  // Field _statsCollectorInputList:Ljava/util/List;
      14: aload_0
      15: iload_2
      16: putfield      #1                  // Field _statsCollectionInterval:I
      19: aload_0
      20: invokestatic  #5                  // Method java/util/concurrent/Executors.newSingleThreadExecutor:()Ljava/util/concurrent/ExecutorService;
      23: putfield      #6                  // Field _executorService:Ljava/util/concurrent/ExecutorService;
      26: return

  public void start();
    Code:
       0: aload_0
       1: getfield      #6                  // Field _executorService:Ljava/util/concurrent/ExecutorService;
       4: aload_0
       5: invokespecial #7                  // Method collectStatistics:()Ljava/lang/Runnable;
       8: invokeinterface #8,  2            // InterfaceMethod java/util/concurrent/ExecutorService.submit:(Ljava/lang/Runnable;)Ljava/util/concurrent/Future;
      13: pop
      14: return

  public void shutDown(int) throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #3                  // Field _isRunning:Z
       5: aload_0
       6: getfield      #6                  // Field _executorService:Ljava/util/concurrent/ExecutorService;
       9: invokeinterface #9,  1            // InterfaceMethod java/util/concurrent/ExecutorService.shutdownNow:()Ljava/util/List;
      14: pop
      15: aload_0
      16: getfield      #6                  // Field _executorService:Ljava/util/concurrent/ExecutorService;
      19: iload_1
      20: i2l
      21: getstatic     #10                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      24: invokeinterface #11,  4           // InterfaceMethod java/util/concurrent/ExecutorService.awaitTermination:(JLjava/util/concurrent/TimeUnit;)Z
      29: pop
      30: return

  private java.lang.Runnable collectStatistics();
    Code:
       0: new           #12                 // class org/rocksdb/StatisticsCollector$1
       3: dup
       4: aload_0
       5: invokespecial #13                 // Method org/rocksdb/StatisticsCollector$1."<init>":(Lorg/rocksdb/StatisticsCollector;)V
       8: areturn

  static boolean access$000(org.rocksdb.StatisticsCollector);
    Code:
       0: aload_0
       1: getfield      #3                  // Field _isRunning:Z
       4: ireturn

  static java.util.List access$100(org.rocksdb.StatisticsCollector);
    Code:
       0: aload_0
       1: getfield      #2                  // Field _statsCollectorInputList:Ljava/util/List;
       4: areturn

  static int access$200(org.rocksdb.StatisticsCollector);
    Code:
       0: aload_0
       1: getfield      #1                  // Field _statsCollectionInterval:I
       4: ireturn
}
