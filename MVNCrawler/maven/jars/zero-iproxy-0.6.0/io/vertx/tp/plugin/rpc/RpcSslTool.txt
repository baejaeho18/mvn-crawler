Compiled from "RpcSslTool.java"
public class io.vertx.tp.plugin.rpc.RpcSslTool {
  private static final io.vertx.up.log.Annal LOGGER;

  private static final io.vertx.up.uca.yaml.Node<io.vertx.core.json.JsonObject> node;

  private static final java.util.concurrent.ConcurrentMap<java.lang.String, io.grpc.ManagedChannel> CHANNELS;

  public io.vertx.tp.plugin.rpc.RpcSslTool();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static io.grpc.ManagedChannel getChannel(io.vertx.core.Vertx, io.vertx.core.json.JsonObject);
    Code:
       0: aload_1
       1: ldc           #3                  // String host
       3: invokevirtual #4                  // Method io/vertx/core/json/JsonObject.getString:(Ljava/lang/String;)Ljava/lang/String;
       6: astore_2
       7: aload_1
       8: ldc           #5                  // String port
      10: invokevirtual #6                  // Method io/vertx/core/json/JsonObject.getInteger:(Ljava/lang/String;)Ljava/lang/Integer;
      13: astore_3
      14: aload_2
      15: aload_3
      16: aload_0
      17: aload_2
      18: aload_3
      19: aload_1
      20: invokedynamic #7,  0              // InvokeDynamic #0:get:(Lio/vertx/core/Vertx;Ljava/lang/String;Ljava/lang/Integer;Lio/vertx/core/json/JsonObject;)Ljava/util/function/Supplier;
      25: invokestatic  #8                  // Method getChannel:(Ljava/lang/String;Ljava/lang/Integer;Ljava/util/function/Supplier;)Lio/grpc/ManagedChannel;
      28: areturn

  private static io.grpc.ManagedChannel getChannel(java.lang.String, java.lang.Integer, java.util.function.Supplier<io.grpc.ManagedChannel>);
    Code:
       0: new           #9                  // class java/lang/StringBuilder
       3: dup
       4: invokespecial #10                 // Method java/lang/StringBuilder."<init>":()V
       7: aload_0
       8: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      11: aload_1
      12: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      15: invokevirtual #13                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      18: astore_3
      19: getstatic     #14                 // Field CHANNELS:Ljava/util/concurrent/ConcurrentMap;
      22: aload_3
      23: aload_2
      24: invokestatic  #15                 // Method io/vertx/up/fn/Fn.pool:(Ljava/util/concurrent/ConcurrentMap;Ljava/lang/Object;Ljava/util/function/Supplier;)Ljava/lang/Object;
      27: checkcast     #16                 // class io/grpc/ManagedChannel
      30: areturn

  public static io.grpc.ManagedChannel getChannel(io.vertx.core.Vertx, io.vertx.up.atom.rpc.IpcData);
    Code:
       0: aload_1
       1: invokevirtual #17                 // Method io/vertx/up/atom/rpc/IpcData.getHost:()Ljava/lang/String;
       4: astore_2
       5: aload_1
       6: invokevirtual #18                 // Method io/vertx/up/atom/rpc/IpcData.getPort:()Ljava/lang/Integer;
       9: astore_3
      10: aload_2
      11: aload_3
      12: aload_2
      13: aload_3
      14: aload_0
      15: aload_1
      16: invokedynamic #19,  0             // InvokeDynamic #1:get:(Ljava/lang/String;Ljava/lang/Integer;Lio/vertx/core/Vertx;Lio/vertx/up/atom/rpc/IpcData;)Ljava/util/function/Supplier;
      21: invokestatic  #8                  // Method getChannel:(Ljava/lang/String;Ljava/lang/Integer;Ljava/util/function/Supplier;)Lio/grpc/ManagedChannel;
      24: areturn

  private static io.vertx.up.uca.micro.ssl.TrustPipe<io.vertx.core.json.JsonObject> getPipe(io.vertx.core.json.JsonObject);
    Code:
       0: aload_0
       1: ldc           #20                 // String type
       3: invokevirtual #21                 // Method io/vertx/core/json/JsonObject.getValue:(Ljava/lang/String;)Ljava/lang/Object;
       6: astore_1
       7: aconst_null
       8: aload_1
       9: if_acmpne     18
      12: getstatic     #22                 // Field io/vertx/up/eon/em/CertType.PEM:Lio/vertx/up/eon/em/CertType;
      15: goto          30
      18: ldc           #23                 // class io/vertx/up/eon/em/CertType
      20: aload_1
      21: invokevirtual #24                 // Method java/lang/Object.toString:()Ljava/lang/String;
      24: invokestatic  #25                 // Method io/vertx/up/util/Ut.toEnum:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;
      27: checkcast     #23                 // class io/vertx/up/eon/em/CertType
      30: astore_2
      31: aload_2
      32: invokestatic  #26                 // InterfaceMethod io/vertx/up/uca/micro/ssl/TrustPipe.get:(Lio/vertx/up/eon/em/CertType;)Lio/vertx/up/uca/micro/ssl/TrustPipe;
      35: areturn

  private static io.grpc.ManagedChannel lambda$getChannel$3(java.lang.String, java.lang.Integer, io.vertx.core.Vertx, io.vertx.up.atom.rpc.IpcData);
    Code:
       0: getstatic     #27                 // Field LOGGER:Lio/vertx/up/log/Annal;
       3: ldc           #29                 // String Build channel for host = {0}, port = {1}
       5: iconst_2
       6: anewarray     #30                 // class java/lang/Object
       9: dup
      10: iconst_0
      11: aload_0
      12: aastore
      13: dup
      14: iconst_1
      15: aload_1
      16: invokestatic  #31                 // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
      19: aastore
      20: invokeinterface #32,  3           // InterfaceMethod io/vertx/up/log/Annal.info:(Ljava/lang/String;[Ljava/lang/Object;)V
      25: aload_2
      26: aload_0
      27: aload_1
      28: invokevirtual #33                 // Method java/lang/Integer.intValue:()I
      31: invokestatic  #34                 // Method io/vertx/grpc/VertxChannelBuilder.forAddress:(Lio/vertx/core/Vertx;Ljava/lang/String;I)Lio/vertx/grpc/VertxChannelBuilder;
      34: astore        4
      36: getstatic     #35                 // Field node:Lio/vertx/up/uca/yaml/Node;
      39: invokeinterface #36,  1           // InterfaceMethod io/vertx/up/uca/yaml/Node.read:()Ljava/lang/Object;
      44: checkcast     #37                 // class io/vertx/core/json/JsonObject
      47: astore        5
      49: aconst_null
      50: aload         5
      52: if_acmpeq     70
      55: aconst_null
      56: aload         5
      58: ldc           #38                 // String rpc
      60: invokevirtual #21                 // Method io/vertx/core/json/JsonObject.getValue:(Ljava/lang/String;)Ljava/lang/Object;
      63: if_acmpeq     70
      66: iconst_1
      67: goto          71
      70: iconst_0
      71: getstatic     #27                 // Field LOGGER:Lio/vertx/up/log/Annal;
      74: aload         5
      76: aload_3
      77: aload         4
      79: invokedynamic #39,  0             // InvokeDynamic #2:execute:(Lio/vertx/core/json/JsonObject;Lio/vertx/up/atom/rpc/IpcData;Lio/vertx/grpc/VertxChannelBuilder;)Lio/vertx/up/fn/Actuator;
      84: invokestatic  #40                 // Method io/vertx/up/fn/Fn.safeSemi:(ZLio/vertx/up/log/Annal;Lio/vertx/up/fn/Actuator;)V
      87: aload         4
      89: invokevirtual #41                 // Method io/vertx/grpc/VertxChannelBuilder.build:()Lio/grpc/ManagedChannel;
      92: areturn

  private static void lambda$null$2(io.vertx.core.json.JsonObject, io.vertx.up.atom.rpc.IpcData, io.vertx.grpc.VertxChannelBuilder);
    Code:
       0: aload_0
       1: ldc           #38                 // String rpc
       3: invokevirtual #42                 // Method io/vertx/core/json/JsonObject.getJsonObject:(Ljava/lang/String;)Lio/vertx/core/json/JsonObject;
       6: astore_3
       7: aload_1
       8: invokevirtual #43                 // Method io/vertx/up/atom/rpc/IpcData.getName:()Ljava/lang/String;
      11: astore        4
      13: aload         4
      15: aload_3
      16: invokestatic  #44                 // Method io/vertx/tp/plugin/rpc/RpcHelper.getSslConfig:(Ljava/lang/String;Lio/vertx/core/json/JsonObject;)Lio/vertx/core/json/JsonObject;
      19: astore        5
      21: aload         5
      23: invokevirtual #45                 // Method io/vertx/core/json/JsonObject.isEmpty:()Z
      26: ifeq          38
      29: aload_2
      30: iconst_1
      31: invokevirtual #46                 // Method io/vertx/grpc/VertxChannelBuilder.usePlaintext:(Z)Lio/vertx/grpc/VertxChannelBuilder;
      34: pop
      35: goto          59
      38: aload         5
      40: invokestatic  #47                 // Method getPipe:(Lio/vertx/core/json/JsonObject;)Lio/vertx/up/uca/micro/ssl/TrustPipe;
      43: astore        6
      45: aload_2
      46: aload         6
      48: aload         5
      50: invokeinterface #48,  2           // InterfaceMethod io/vertx/up/uca/micro/ssl/TrustPipe.parse:(Ljava/lang/Object;)Lio/vertx/core/Handler;
      55: invokevirtual #49                 // Method io/vertx/grpc/VertxChannelBuilder.useSsl:(Lio/vertx/core/Handler;)Lio/vertx/grpc/VertxChannelBuilder;
      58: pop
      59: return

  private static io.grpc.ManagedChannel lambda$getChannel$1(io.vertx.core.Vertx, java.lang.String, java.lang.Integer, io.vertx.core.json.JsonObject);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #33                 // Method java/lang/Integer.intValue:()I
       6: invokestatic  #34                 // Method io/vertx/grpc/VertxChannelBuilder.forAddress:(Lio/vertx/core/Vertx;Ljava/lang/String;I)Lio/vertx/grpc/VertxChannelBuilder;
       9: astore        4
      11: aconst_null
      12: aload_3
      13: ldc           #50                 // String ssl
      15: invokevirtual #21                 // Method io/vertx/core/json/JsonObject.getValue:(Ljava/lang/String;)Ljava/lang/Object;
      18: if_acmpeq     25
      21: iconst_1
      22: goto          26
      25: iconst_0
      26: getstatic     #27                 // Field LOGGER:Lio/vertx/up/log/Annal;
      29: aload_3
      30: aload         4
      32: invokedynamic #51,  0             // InvokeDynamic #3:execute:(Lio/vertx/core/json/JsonObject;Lio/vertx/grpc/VertxChannelBuilder;)Lio/vertx/up/fn/Actuator;
      37: invokestatic  #40                 // Method io/vertx/up/fn/Fn.safeSemi:(ZLio/vertx/up/log/Annal;Lio/vertx/up/fn/Actuator;)V
      40: aload         4
      42: invokevirtual #41                 // Method io/vertx/grpc/VertxChannelBuilder.build:()Lio/grpc/ManagedChannel;
      45: astore        5
      47: getstatic     #27                 // Field LOGGER:Lio/vertx/up/log/Annal;
      50: ldc           #52                 // String ( Rpc Client ) Build channel ( host = {0}, port = {1}, hashCode = {2} )
      52: iconst_3
      53: anewarray     #30                 // class java/lang/Object
      56: dup
      57: iconst_0
      58: aload_1
      59: aastore
      60: dup
      61: iconst_1
      62: aload_2
      63: invokestatic  #31                 // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
      66: aastore
      67: dup
      68: iconst_2
      69: aload         5
      71: invokevirtual #53                 // Method java/lang/Object.hashCode:()I
      74: invokestatic  #54                 // Method java/lang/String.valueOf:(I)Ljava/lang/String;
      77: aastore
      78: invokeinterface #32,  3           // InterfaceMethod io/vertx/up/log/Annal.info:(Ljava/lang/String;[Ljava/lang/Object;)V
      83: aload         5
      85: areturn

  private static void lambda$null$0(io.vertx.core.json.JsonObject, io.vertx.grpc.VertxChannelBuilder);
    Code:
       0: aload_0
       1: ldc           #50                 // String ssl
       3: invokevirtual #42                 // Method io/vertx/core/json/JsonObject.getJsonObject:(Ljava/lang/String;)Lio/vertx/core/json/JsonObject;
       6: astore_2
       7: aconst_null
       8: aload_2
       9: if_acmpeq     39
      12: aload_2
      13: invokevirtual #45                 // Method io/vertx/core/json/JsonObject.isEmpty:()Z
      16: ifne          39
      19: aload_2
      20: invokestatic  #47                 // Method getPipe:(Lio/vertx/core/json/JsonObject;)Lio/vertx/up/uca/micro/ssl/TrustPipe;
      23: astore_3
      24: aload_1
      25: aload_3
      26: aload_2
      27: invokeinterface #48,  2           // InterfaceMethod io/vertx/up/uca/micro/ssl/TrustPipe.parse:(Ljava/lang/Object;)Lio/vertx/core/Handler;
      32: invokevirtual #49                 // Method io/vertx/grpc/VertxChannelBuilder.useSsl:(Lio/vertx/core/Handler;)Lio/vertx/grpc/VertxChannelBuilder;
      35: pop
      36: goto          45
      39: aload_1
      40: iconst_1
      41: invokevirtual #46                 // Method io/vertx/grpc/VertxChannelBuilder.usePlaintext:(Z)Lio/vertx/grpc/VertxChannelBuilder;
      44: pop
      45: return

  static {};
    Code:
       0: ldc           #55                 // class io/vertx/tp/plugin/rpc/RpcSslTool
       2: invokestatic  #56                 // InterfaceMethod io/vertx/up/log/Annal.get:(Ljava/lang/Class;)Lio/vertx/up/log/Annal;
       5: putstatic     #27                 // Field LOGGER:Lio/vertx/up/log/Annal;
       8: ldc           #57                 // class io/vertx/up/uca/yaml/ZeroUniform
      10: iconst_0
      11: anewarray     #30                 // class java/lang/Object
      14: invokestatic  #58                 // Method io/vertx/up/util/Ut.singleton:(Ljava/lang/Class;[Ljava/lang/Object;)Ljava/lang/Object;
      17: checkcast     #59                 // class io/vertx/up/uca/yaml/Node
      20: putstatic     #35                 // Field node:Lio/vertx/up/uca/yaml/Node;
      23: new           #60                 // class java/util/concurrent/ConcurrentHashMap
      26: dup
      27: invokespecial #61                 // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      30: putstatic     #14                 // Field CHANNELS:Ljava/util/concurrent/ConcurrentMap;
      33: return
}
