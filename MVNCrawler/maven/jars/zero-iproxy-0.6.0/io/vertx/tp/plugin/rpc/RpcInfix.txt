Compiled from "RpcInfix.java"
public class io.vertx.tp.plugin.rpc.RpcInfix implements io.vertx.up.plugin.Infix {
  private static final java.lang.String NAME;

  private static final java.util.concurrent.ConcurrentMap<java.lang.String, io.vertx.tp.plugin.rpc.RpcClient> CLIENTS;

  public io.vertx.tp.plugin.rpc.RpcInfix();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  private static void initInternal(io.vertx.core.Vertx, java.lang.String);
    Code:
       0: getstatic     #2                  // Field CLIENTS:Ljava/util/concurrent/ConcurrentMap;
       3: aload_1
       4: aload_0
       5: aload_1
       6: invokedynamic #3,  0              // InvokeDynamic #0:get:(Lio/vertx/core/Vertx;Ljava/lang/String;)Ljava/util/function/Supplier;
      11: invokestatic  #4                  // Method io/vertx/up/fn/Fn.pool:(Ljava/util/concurrent/ConcurrentMap;Ljava/lang/Object;Ljava/util/function/Supplier;)Ljava/lang/Object;
      14: pop
      15: return

  public static void init(io.vertx.core.Vertx);
    Code:
       0: aload_0
       1: ldc           #6                  // String ZERO_RPC_POOL
       3: invokestatic  #7                  // Method initInternal:(Lio/vertx/core/Vertx;Ljava/lang/String;)V
       6: return

  public static io.vertx.tp.plugin.rpc.RpcClient getClient();
    Code:
       0: getstatic     #2                  // Field CLIENTS:Ljava/util/concurrent/ConcurrentMap;
       3: ldc           #6                  // String ZERO_RPC_POOL
       5: invokeinterface #8,  2            // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #9                  // class io/vertx/tp/plugin/rpc/RpcClient
      13: areturn

  public io.vertx.tp.plugin.rpc.RpcClient get();
    Code:
       0: invokestatic  #10                 // Method getClient:()Lio/vertx/tp/plugin/rpc/RpcClient;
       3: areturn

  public java.lang.Object get();
    Code:
       0: aload_0
       1: invokevirtual #11                 // Method get:()Lio/vertx/tp/plugin/rpc/RpcClient;
       4: areturn

  private static io.vertx.tp.plugin.rpc.RpcClient lambda$initInternal$1(io.vertx.core.Vertx, java.lang.String);
    Code:
       0: ldc           #13                 // String rpc
       2: aload_0
       3: aload_1
       4: invokedynamic #14,  0             // InvokeDynamic #1:apply:(Lio/vertx/core/Vertx;Ljava/lang/String;)Ljava/util/function/Function;
       9: ldc           #5                  // class io/vertx/tp/plugin/rpc/RpcInfix
      11: invokestatic  #15                 // InterfaceMethod io/vertx/up/plugin/Infix.init:(Ljava/lang/String;Ljava/util/function/Function;Ljava/lang/Class;)Ljava/lang/Object;
      14: checkcast     #9                  // class io/vertx/tp/plugin/rpc/RpcClient
      17: areturn

  private static io.vertx.tp.plugin.rpc.RpcClient lambda$null$0(io.vertx.core.Vertx, java.lang.String, io.vertx.core.json.JsonObject);
    Code:
       0: aload_0
       1: aload_2
       2: aload_1
       3: invokestatic  #16                 // InterfaceMethod io/vertx/tp/plugin/rpc/RpcClient.createShared:(Lio/vertx/core/Vertx;Lio/vertx/core/json/JsonObject;Ljava/lang/String;)Lio/vertx/tp/plugin/rpc/RpcClient;
       6: areturn

  static {};
    Code:
       0: new           #17                 // class java/util/concurrent/ConcurrentHashMap
       3: dup
       4: invokespecial #18                 // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
       7: putstatic     #2                  // Field CLIENTS:Ljava/util/concurrent/ConcurrentMap;
      10: return
}
