^1383037825675
@xworker.dataObject.db.AttributesDataObject
sname
AttributesDataObject
slabel
AttributesDataObject
sdescriptors
xworker.lang.MetaDescriptor3
sextends
xworker.dataObject.java.ListDataObject
smany
true
seditCols
2
sinitialization
false
smodifier
public
sinheritDescription
false
Sdescription
#$@text#$@
<p>Java SQL获取可在给定模式和类别中使用的用户定义类型 (UDT) 的给定类型的给定属性的描述。</p>
<p>查询时可以在附带如下参数。</p>
<div id="content">
<ul>
    <li>catalog</li>
    <li>schemaPattern</li>
    <li>tableNamePattern</li>
    <li>attributeNamePattern</li>
</ul>
</div>
<p>&nbsp;</p>
#$@text#$@
sth_createIndex
false
@xworker.dataObject.db.AttributesDataObject/@actions1
sname
actions
sdescriptors
xworker.dataObject.db.DbDataObject/@actions1
sth_createIndex
false
@xworker.dataObject.db.AttributesDataObject/@actions1/@query
sname
doQuery
sisSynchronized
false
sthrowException
true
suseOtherAction
false
svarScope
Global
sdisableGlobalContext
false
Scode
#$@text#$@
import xworker.dataObject.DataObject;

import ognl.Ognl;

//获取全部的表
def datas = [];
def metadata = con.getMetaData();
def catalog = getConditionData(actionContext, "catalog");
def schemaPattern = getConditionData(actionContext, "schemaPattern");
def tableNamePattern = getConditionData(actionContext, "tableNamePattern");
def attributeNamePattern = getConditionData(actionContext, "attributeNamePattern");
def columnNamePattern = getConditionData(actionContext, "columnNamePattern");
def rs = metadata.getAttributes(catalog, schemaPattern, tableNamePattern, columnNamePattern);
try{    
    while(rs.next()){
        def data = [:];
        data.put("TYPE_CAT", rs.getString("TYPE_CAT"));
        data.put("TYPE_SCHEM", rs.getString("TYPE_SCHEM"));
        data.put("TYPE_NAME", rs.getString("TYPE_NAME"));        
        data.put("ATTR_NAME", rs.getString("ATTR_NAME"));
        data.put("DATA_TYPE", rs.getString("DATA_TYPE"));
        data.put("ATTR_TYPE_NAME", rs.getString("ATTR_TYPE_NAME"));
        data.put("ATTR_SIZE", rs.getString("ATTR_SIZE"));
        data.put("DECIMAL_DIGITS", rs.getString("DECIMAL_DIGITS"));
        data.put("NUM_PREC_RADIX", rs.getString("NUM_PREC_RADIX"));
        data.put("NULLABLE", rs.getString("NULLABLE"));
        data.put("REMARKS", rs.getString("REMARKS"));
        data.put("CHAR_OCTET_LENGTH", rs.getString("CHAR_OCTET_LENGTH"));
        data.put("ATTR_DEF", rs.getString("ATTR_DEF"));
        data.put("IS_NULLABLE", rs.getString("IS_NULLABLE"));
        data.put("SCOPE_CATLOG", rs.getString("SCOPE_CATLOG"));
        data.put("SCOPE_SCHEMA", rs.getString("SCOPE_SCHEMA"));
        data.put("SCOPE_TABLE", rs.getString("SCOPE_TABLE"));
        data.put("SOURCE_DATA_TYPE", rs.getString("SOURCE_DATA_TYPE"));
        data.put("ORDINAL_POSITION", rs.getString("ORDINAL_POSITION"));
       
        datas.add(data);
    }
}finally{
    rs.close();
}

def listDataName = "__datas__";
self.set("listData", listDataName);
self.set("dataClassName", "java.util.HashMap");

try{
    def bindings = actionContext.push(null);
    bindings.put(listDataName, datas);

    //使用ListDataObject的load方法    
    def action = world.getAction("xworker.dataObject.java.ListDataObject/@actions1/@query");
    
    return action.run(actionContext);
}finally{
    actionContext.pop();
}

def getConditionData(actionContext, name){
    if(actionContext.get("conditionData") == null){
        return null;
    }else{
        try{
            def v = Ognl.getValue(name, conditionData);
            if(v instanceof String && v.trim() == ""){
                return null;
            }else{
                return v;
            }
        }catch(Exception e){
            return null;
        }
    }
}
#$@text#$@
Sdescription
#$@text#$@
<p>额外可以附加以下参数：</p>
<ul>
    <li>catalog</li>
    <li>schemaPattern</li>
    <li>tableNamePattern</li>
    <li>columnNamePattern</li>
</ul>
#$@text#$@
sinitBreakPoint
false
ssuccessBreakPoint
false
sexceptionBreakPoint
false
seditBreakPoint
false
sinterpretationType
Action
screateLocalVarScope
false
ssaveReturn
false
sdescriptors
xworker.lang.actions.Actions/@GroovyAction
sth_createIndex
false
@xworker.dataObject.db.AttributesDataObject/@actions1/@query/@contexts
sname
contexts
sid
contexts
slabel
contexts
sdescriptors
xworker.lang.actions.Inout/@contexts
@xworker.dataObject.db.AttributesDataObject/@actions1/@query/@contexts/@dataSource
sname
dataSource
sconnectionName
con
stransaction
false
sdataSourcePath
self.dataSource
sconflicting
ignore
sdisable
false
sonError
ignore
spreventError
false
sinherit
true
sid
dataSource
sdescriptors
xworker.db.jdbc.DataSouceActionContext,xworker.lang.actions.Inout/@contexts/@context
@xworker.dataObject.db.AttributesDataObject/@actions1/@isMappingAble
sname
isMappingAble
sisSynchronized
false
sthrowException
true
suseOtherAction
false
svarScope
Local
sdisableGlobalContext
false
Scode
#$@text#$@
if(con == null){
    throw new Exception("获取不到数据库连接，数据源不存在或没有正确设置。");
}

return true;
#$@text#$@
Sdescription
#$@text#$@
<p>返回属性是否可以映射，比如数据库数据对象、CSV数据对象和Excel等数据对象的属性适合表字段、CSV或Excel的列映射的。</p>
<p>如果不能映射，直接抛出有说明文字的异常。</p>
<p>映射用于快速编辑属性。</p>
#$@text#$@
sdescriptors
xworker.lang.actions.Actions/@GroovyAction
sth_createIndex
false
@xworker.dataObject.db.AttributesDataObject/@actions1/@isMappingAble/@contexts
sname
contexts
sid
contexts
slabel
contexts
sdescriptors
xworker.lang.actions.Inout/@contexts
@xworker.dataObject.db.AttributesDataObject/@actions1/@isMappingAble/@contexts/@dataSource
sname
dataSource
sconnectionName
con
stransaction
false
sdataSourcePath
self.dataSource
sconflicting
ignore
sdisable
false
sonError
ignore
spreventError
false
sinherit
true
sid
dataSource
sdescriptors
xworker.db.jdbc.DataSouceActionContext,xworker.lang.actions.Inout/@contexts/@context
@xworker.dataObject.db.AttributesDataObject/@actions1/@getMappingFields
sname
getMappingFields
sisSynchronized
false
sthrowException
true
suseOtherAction
false
svarScope
Local
sdisableGlobalContext
false
Scode
#$@text#$@
def fields = [
    ["colName":"TYPE_CAT", "colTitle":"类型的类别"],
    ["colName":"TYPE_SCHEM", "colTitle":"类型的模式"],
    ["colName":"TYPE_NAME", "colTitle":"类型名称"],
    ["colName":"ATTR_NAME", "colTitle":"属性名称"],
    ["colName":"DATA_TYPE", "colTitle":"数据类型"],
    ["colName":"ATTR_TYPE_NAME", "colTitle":"类型名称"],
    ["colName":"ATTR_SIZE", "colTitle":"列的大小"],
    ["colName":"DECIMAL_DIGITS", "colTitle":"小数位数"],
    ["colName":"NUM_PREC_RADIX", "colTitle":"基数"],
    ["colName":"NULLABLE", "colTitle":"是否允许使用 NULL"],
    ["colName":"REMARKS", "colTitle":"注释"],
    ["colName":"ATTR_DEF", "colTitle":"默认值"],
    ["colName":"CHAR_OCTET_LENGTH", "colTitle":"Char最大字节数"],
    ["colName":"ORDINAL_POSITION", "colTitle":"表中的列的索引"],
    ["colName":"IS_NULLABLE", "colTitle":"ISO 规则用于确定列是否包括 null"],
    ["colName":"SCOPE_CATLOG", "colTitle":"作用域类别"],
    ["colName":"SCOPE_SCHEMA", "colTitle":"作用域模式称"],
    ["colName":"SCOPE_TABLE", "colTitle":"作用域表名称"],
    ["colName":"SOURCE_DATA_TYPE", "colTitle":"不同类型或用户生成 Ref 类型"],
    ["colName":"catalog", "colTitle":"查询catalog"],
    ["colName":"schemaPattern", "colTitle":"查询schemaPattern"],
    ["colName":"tableNamePattern", "colTitle":"查询tableNamePattern"],
    ["colName":"attributeNamePattern", "colTitle":"查询attributeNamePattern"]
];

return fields;
#$@text#$@
sdescriptors
xworker.lang.actions.Actions/@GroovyAction
sth_createIndex
false
@xworker.dataObject.db.AttributesDataObject/@name
sname
name
sgroup
DataObject
sreadOnly
false
sinheritDescription
false
svalidateAllowBlank
true
LvalidateOnBlur
true
LallowDecimals
true
LallowNegative
true
sdescriptors
xworker.lang.MetaDescriptor3/@attribute
sth_createIndex
false
@xworker.dataObject.db.AttributesDataObject/@label
sname
label
sgroup
DataObject
sreadOnly
false
sinheritDescription
false
svalidateAllowBlank
true
LvalidateOnBlur
true
LallowDecimals
true
LallowNegative
true
sdescriptors
xworker.lang.MetaDescriptor3/@attribute
sth_createIndex
false
@xworker.dataObject.db.AttributesDataObject/@dbConfigPath
sname
dataSource
slabel
数据源
sinputtype
openWindow
ssize
60
scolspan
2
sgroup
DataObject
sinputattrs
xworker.swt.xworker.attributeEditor.openWins.SelectThingOpenWindow/@shell|descriptor=xworkerdbjdbc.DataSource,returnType=path
sreadOnly
false
sinheritDescription
false
svalidateAllowBlank
true
LvalidateOnBlur
false
LallowDecimals
false
LallowNegative
false
sid
dbConfigPath
sdescriptors
xworker.lang.MetaDescriptor3/@attribute
