^1413256696531
@
sname
DataObjectQueryConfig
slabel
DataObjectQueryConfig
sdescriptors
xworker.lang.MetaDescriptor3
sextends
xworker.dataObject.DataObject
smany
true
seditCols
2
sinitialization
false
smodifier
public
sinheritDescription
false
Sdescription
#$@text#$@
<p>只用于数据对象的查询统计，可以做数据对象的查询、汇总等，根据查询的条件动态选择属性列，如果包含统计列，动态生成StatisticsQueryDataObject进行查询。</p>
<p>如果是数据的查询统计可以使用DbQueryConfig，本事物针对非数据的情形。</p>
#$@text#$@
sid
DataObjectQueryConfig
@/@actions
sname
actions
sid
actions
slabel
actions
sdescriptors
xworker.lang.MetaDescriptor3/@actions
@/@actions/@query
sname
query
sisSynchronized
false
sthrowException
true
suseOtherAction
false
svarScope
Global
sdisableGlobalContext
false
Scode
#$@text#$@
import xworker.dataObject.DataObject;
import xworker.dataObject.DataObjectList;
import xworker.dataObject.utils.DbUtil;

import org.xmeta.Thing;

//数据对象
def dataObject = world.getThing(self.dataObject);
if(dataObject == null){
    log.info("DataObjectQueryConfig: dataObject is null, dataObject=" + self.dataObject);
    return null;
}

//查看是否是聚合和分组
def aggregateColumnStr = actionContext.get("aggregateColumns");
if(aggregateColumnStr == null && actionContext.get("conditionData") != null){
    aggregateColumnStr = conditionData.aggregateColumns;
}
def groupColumnStr = actionContext.get("groupColumns");
if(groupColumnStr == null && actionContext.get("conditionData") != null){
    groupColumnStr = conditionData.groupColumns;
}

def aggregateColumns = getValidAggregateColumns(self, aggregateColumnStr);
def groupColumns = getValidGroupColumns(self, groupColumnStr);
boolean isAggregate = aggregateColumns.size() > 0 && groupColumns.size() > 0;
//log.info("query static=" + isAggregate + ",aggregateColumnStr=" + aggregateColumnStr + ",groupColumnStr=" + groupColumnStr);
if(!isAggregate){
    //不是分组聚合查询的普通查询调用DataObject查询
    if(actionContext.get("pageInfo") != null){
        pageInfo.dynamicDataObject = dataObject;
    }
    return dataObject.doAction("query", actionContext);
}else{    
    //有分组查询的生成新的数据对象
    dataObject = getAggregateDataObject(self, aggregateColumns, groupColumns);
    //log.info("queryDataObjectPath=" + dataObject.metadata.path);

    //动态数据对象，用于调用者动态生成界面等
    if(actionContext.get("pageInfo") != null){
        pageInfo.dynamicDataObject = dataObject;
    }

    return dataObject.doAction("query", actionContext);
}

def getAggregateDataObject(selfObj, aggregateColumns, groupColumns){
    //先从缓存中取
    def key = "aggregate:";
    for(int i=0; i<aggregateColumns.size(); i++){
        def aggregate = aggregateColumns.get(i);
        key = key + "," + aggregate.name;
    }
    key  = key + ",group:";
    for(int i=0; i<groupColumns.size(); i++){
        def group = groupColumns.get(i);
        key = key + "," + group.name;
    }
    
    //log.info("key=" + key);
    def dataObject = selfObj.getData(key);
    if(dataObject != null && selfObj.getData(key + "LastModify") == selfObj.metadata.lastModified){
        //log.info("dataObject is not null, return from cache");
        return dataObject;
    }
    
    
    //创建新的查询对象
    dataObject = new Thing("xworker.dataObject.query.StatisticsQueryDataObject");
    dataObject.set("dataObject", selfObj.getString("dataObject"));
    for(int i=0; i<aggregateColumns.size(); i++){
        def aggregate = aggregateColumns.get(i);
        def agg = aggregate.detach();
        agg.put("descriptors", "xworker.dataObject.query.StatisticsQueryDataObject/@attribute");
        //def agg = new Thing();        
        //agg.name = aggregate.name;
        //agg.label = aggregate.label;
        //agg.aggregateFunction = aggregate.aggregateFunction;
        //agg.aggregateDistinct = aggregate.aggregateDistinct;
        //agg.aggregateType = aggregate.aggregateType;
        //agg.aggregateExpression = aggregate.aggregateExpression;
        //log.info(" agg.aggregateExpression=" + agg.aggregateExpression);
        agg.put("queryFieldType", "aggregate");
        
        dataObject.addChild(agg);
    }

     for(int i=0; i<groupColumns.size(); i++){
        def group = groupColumns.get(i);
        g = group.detach();
        g.put("descriptors", "xworker.dataObject.query.StatisticsQueryDataObject/@attribute");
        //def g = new Thing("xworker.dataObject.query.StatisticsQueryDataObject/@attribute");
        //g.name = group.name;
        //g.label = group.label;
        //g.groupFieldName = group.groupFieldName;
        //g.groupType = group.groupType;
        //g.groupPattern = group.groupPattern;
        g.put("queryFieldType", "group");
        //log.info("g.filedName=" + group.groupFieldName);
        dataObject.addChild(g);
    }
    
    for(thing in selfObj.get("thing@")){
        //子事物，通常是关联事物
        dataObject.addChild(thing.detach());
    }
    
    selfObj.setData(key, dataObject);
    selfObj.setData(key + "LastModify", selfObj.metadata.lastModified);
    return dataObject;
}

/**
 * 返回有效的分组列。
 */
def getValidGroupColumns(dataObject, groupColumns){
    def myGroupColumns = dataObject.getChilds("group");
    def validGroupColumns = [];
    if(groupColumns != null && "" != groupColumns){
        //获取匹配的聚合列
        def ags = groupColumns.split("[,]");
        for(int i=0; i<ags.length; i++){
            def ag = ags[i];
            for(int n=0; n<myGroupColumns.size(); n++){
                if(ag == myGroupColumns.get(n).getString("name")){
                    validGroupColumns.add(myGroupColumns.get(n));
                }
            }
        }
    }
    
    return validGroupColumns;
}

/**
 * 返回有效的聚合列。
 */
def getValidAggregateColumns(dataObject, aggregateColumns){
    def myAggregateColumns = dataObject.getChilds("aggregate");
    def validAggregateColumns = [];
    if(aggregateColumns == null || "" == aggregateColumns){
        //在没有指定的情况下，返回第一个，如果有
        if(myAggregateColumns.size() > 0){            
            validAggregateColumns.add(myAggregateColumns.get(0));
        }
    }else{
        //获取匹配的聚合列
        def ags = aggregateColumns.split("[,]");
        for(int i=0; i<ags.length; i++){
            def ag = ags[i];
            for(int n=0; n<myAggregateColumns.size(); n++){
                if(ag == myAggregateColumns.get(n).getString("name")){
                    validAggregateColumns.add(myAggregateColumns.get(n));
                }
            }
        }
    }
    
    return validAggregateColumns;
}
#$@text#$@
sinterpretationType
Action
screateLocalVarScope
false
ssaveReturn
false
sid
query
sdescriptors
xworker.lang.actions.Actions/@GroovyAction
@/@actions/@query/@ins
sisValidate
false
sname
ins
sid
ins
slabel
ins
sdescriptors
xworker.lang.actions.Inout/@ins
@/@actions/@query/@ins/@datas
sname
conditionData
stypeCheck
false
soptional
true
scheck
false
scheckLevel
exception
sdescription
<p>查询参数</p>
sid
datas
sdescriptors
xworker.lang.actions.Inout/@ins/@param
@/@actions/@query/@ins/@condition
sname
condition
stypeCheck
false
soptional
true
scheck
false
scheckLevel
exception
sdescription
<p>查询条件定义</p>
sid
condition
sdescriptors
xworker.lang.actions.Inout/@ins/@param
@/@actions/@query/@ins/@aggregateColumns
sname
aggregateColumns
stypeCheck
false
soptional
true
scheck
false
scheckLevel
exception
sdescription
<p>查询结果中包含的聚合列，字符串，如有多个使用,号隔开。</p>
sid
aggregateColumns
sdescriptors
xworker.lang.actions.Inout/@ins/@param
@/@actions/@query/@ins/@groupColumns
sname
groupColumns
stypeCheck
false
soptional
true
scheck
false
scheckLevel
exception
sdescription
<p>汇总时的分组列，如有多个使用,号隔开。</p>
sid
groupColumns
sdescriptors
xworker.lang.actions.Inout/@ins/@param
@/@name
sname
name
sinheritDescription
false
LvalidateOnBlur
false
LallowDecimals
false
LallowNegative
false
sid
name
sdescriptors
xworker.lang.MetaDescriptor3/@attribute
@/@label
sname
label
sinheritDescription
false
LvalidateOnBlur
false
LallowDecimals
false
LallowNegative
false
sid
label
sdescriptors
xworker.lang.MetaDescriptor3/@attribute
@/@dataObject
sname
dataObject
sinputtype
dataSelector
ssize
60
scolspan
2
sinheritDescription
false
LvalidateOnBlur
false
LallowDecimals
false
LallowNegative
false
sid
dataObject
sdescriptors
xworker.lang.MetaDescriptor3/@attribute
@/@attribute
sname
attribute
slabel
属性
sdescriptors
xworker.lang.MetaDescriptor3/@thing
sextends
xworker.dataObject.Attribute
sid
attribute
@/@aggregate
sname
aggregate
slabel
聚合属性
sdescriptors
xworker.lang.MetaDescriptor3/@thing
sextends
xworker.dataObject.query.StatisticsQueryDataObject/@attribute
smany
true
seditCols
2
sinitialization
false
smodifier
public
sinheritDescription
false
sid
aggregate
@/@group
sname
group
slabel
分组列
sdescriptors
xworker.lang.MetaDescriptor3/@thing
sextends
xworker.dataObject.query.StatisticsQueryDataObject/@attribute
smany
true
seditCols
2
sinitialization
false
smodifier
public
sinheritDescription
false
sid
group
@/@thing
sname
thing
slabel
事物
sdescriptors
xworker.lang.MetaDescriptor3/@thing
sextends
xworker.dataObject.RelationDataObject
sid
thing
