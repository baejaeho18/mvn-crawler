Compiled from "FlashPolicyServerHandler.java"
public class org.atmosphere.nettosphere.extra.FlashPolicyServerHandler extends io.netty.channel.SimpleChannelInboundHandler<java.lang.Object> {
  private static final java.lang.String NEWLINE;

  public org.atmosphere.nettosphere.extra.FlashPolicyServerHandler();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method io/netty/channel/SimpleChannelInboundHandler."<init>":()V
       4: return

  public void channelRead(io.netty.channel.ChannelHandlerContext, java.lang.Object) throws java.lang.Exception;
    Code:
       0: aload_1
       1: invokeinterface #2,  1            // InterfaceMethod io/netty/channel/ChannelHandlerContext.channel:()Lio/netty/channel/Channel;
       6: aload_0
       7: invokespecial #3                  // Method getPolicyFileContents:()Lio/netty/buffer/ByteBuf;
      10: invokeinterface #4,  2            // InterfaceMethod io/netty/channel/Channel.write:(Ljava/lang/Object;)Lio/netty/channel/ChannelFuture;
      15: astore_3
      16: aload_3
      17: getstatic     #5                  // Field io/netty/channel/ChannelFutureListener.CLOSE:Lio/netty/channel/ChannelFutureListener;
      20: invokeinterface #6,  2            // InterfaceMethod io/netty/channel/ChannelFuture.addListener:(Lio/netty/util/concurrent/GenericFutureListener;)Lio/netty/channel/ChannelFuture;
      25: pop
      26: return

  private io.netty.buffer.ByteBuf getPolicyFileContents() throws java.lang.Exception;
    Code:
       0: ldc           #8                  // String <?xml version=\"1.0\"?>\r\n<!DOCTYPE cross-domain-policy SYSTEM \"/xml/dtds/cross-domain-policy.dtd\">\r\n\r\n<!-- Policy file for xmlsocket://socks.example.com -->\r\n<cross-domain-policy> \r\n\r\n   <!-- This is a master socket policy file -->\r\n   <!-- No other socket policies on the host will be permitted -->\r\n   <site-control permitted-cross-domain-policies=\"master-only\"/>\r\n\r\n   <!-- Instead of setting to-ports=\"*\", administrator\'s can use ranges and commas -->\r\n   <allow-access-from domain=\"*\" to-ports=\"8080\" />\r\n\r\n</cross-domain-policy>\r\n
       2: getstatic     #9                  // Field io/netty/util/CharsetUtil.US_ASCII:Ljava/nio/charset/Charset;
       5: invokestatic  #10                 // Method io/netty/buffer/Unpooled.copiedBuffer:(Ljava/lang/CharSequence;Ljava/nio/charset/Charset;)Lio/netty/buffer/ByteBuf;
       8: areturn

  public void exceptionCaught(io.netty.channel.ChannelHandlerContext, java.lang.Throwable) throws java.lang.Exception;
    Code:
       0: aload_2
       1: invokevirtual #11                 // Method java/lang/Throwable.getCause:()Ljava/lang/Throwable;
       4: instanceof    #12                 // class io/netty/handler/timeout/ReadTimeoutException
       7: ifeq          33
      10: getstatic     #13                 // Field java/lang/System.out:Ljava/io/PrintStream;
      13: ldc           #14                 // String Connection timed out.
      15: invokevirtual #15                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
      18: aload_1
      19: invokeinterface #2,  1            // InterfaceMethod io/netty/channel/ChannelHandlerContext.channel:()Lio/netty/channel/Channel;
      24: invokeinterface #16,  1           // InterfaceMethod io/netty/channel/Channel.close:()Lio/netty/channel/ChannelFuture;
      29: pop
      30: goto          52
      33: aload_2
      34: invokevirtual #11                 // Method java/lang/Throwable.getCause:()Ljava/lang/Throwable;
      37: invokevirtual #17                 // Method java/lang/Throwable.printStackTrace:()V
      40: aload_1
      41: invokeinterface #2,  1            // InterfaceMethod io/netty/channel/ChannelHandlerContext.channel:()Lio/netty/channel/Channel;
      46: invokeinterface #16,  1           // InterfaceMethod io/netty/channel/Channel.close:()Lio/netty/channel/ChannelFuture;
      51: pop
      52: return

  protected void channelRead0(io.netty.channel.ChannelHandlerContext, java.lang.Object) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #18                 // Method channelRead:(Lio/netty/channel/ChannelHandlerContext;Ljava/lang/Object;)V
       6: return
}
