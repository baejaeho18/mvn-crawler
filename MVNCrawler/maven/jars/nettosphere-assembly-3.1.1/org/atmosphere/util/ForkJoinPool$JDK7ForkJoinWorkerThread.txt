Compiled from "ForkJoinPool.java"
final class org.atmosphere.util.ForkJoinPool$JDK7ForkJoinWorkerThread extends java.util.concurrent.ForkJoinWorkerThread {
  private final java.util.concurrent.atomic.AtomicInteger count;

  protected org.atmosphere.util.ForkJoinPool$JDK7ForkJoinWorkerThread(java.util.concurrent.ForkJoinPool, boolean, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method java/util/concurrent/ForkJoinWorkerThread."<init>":(Ljava/util/concurrent/ForkJoinPool;)V
       5: aload_0
       6: new           #2                  // class java/util/concurrent/atomic/AtomicInteger
       9: dup
      10: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      13: putfield      #4                  // Field count:Ljava/util/concurrent/atomic/AtomicInteger;
      16: aload_0
      17: new           #5                  // class java/lang/StringBuilder
      20: dup
      21: invokespecial #6                  // Method java/lang/StringBuilder."<init>":()V
      24: iload_2
      25: ifeq          33
      28: ldc           #7                  // String Atmosphere-Shared-
      30: goto          34
      33: aload_3
      34: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      37: aload_0
      38: getfield      #4                  // Field count:Ljava/util/concurrent/atomic/AtomicInteger;
      41: invokevirtual #9                  // Method java/util/concurrent/atomic/AtomicInteger.getAndIncrement:()I
      44: invokevirtual #10                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      47: invokevirtual #11                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      50: invokevirtual #12                 // Method setName:(Ljava/lang/String;)V
      53: return
}
