Compiled from "JettyWebSocketUtil.java"
class org.atmosphere.container.JettyWebSocketUtil$1 implements org.eclipse.jetty.websocket.WebSocketFactory$Acceptor {
  final org.atmosphere.cpr.AtmosphereConfig val$config;

  final org.atmosphere.websocket.WebSocketProcessor val$webSocketProcessor;

  final java.util.concurrent.atomic.AtomicBoolean val$useBuildInSession;

  org.atmosphere.container.JettyWebSocketUtil$1(org.atmosphere.cpr.AtmosphereConfig, org.atmosphere.websocket.WebSocketProcessor, java.util.concurrent.atomic.AtomicBoolean);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2                  // Field val$config:Lorg/atmosphere/cpr/AtmosphereConfig;
       5: aload_0
       6: aload_2
       7: putfield      #3                  // Field val$webSocketProcessor:Lorg/atmosphere/websocket/WebSocketProcessor;
      10: aload_0
      11: aload_3
      12: putfield      #4                  // Field val$useBuildInSession:Ljava/util/concurrent/atomic/AtomicBoolean;
      15: aload_0
      16: invokespecial #5                  // Method java/lang/Object."<init>":()V
      19: return

  public boolean checkOrigin(javax.servlet.http.HttpServletRequest, java.lang.String);
    Code:
       0: invokestatic  #6                  // Method org/atmosphere/container/JettyWebSocketUtil.access$000:()Lorg/slf4j/Logger;
       3: ldc           #7                  // String WebSocket-checkOrigin request {} with origin {}
       5: aload_1
       6: invokeinterface #8,  1            // InterfaceMethod javax/servlet/http/HttpServletRequest.getRequestURI:()Ljava/lang/String;
      11: aload_2
      12: invokeinterface #9,  4            // InterfaceMethod org/slf4j/Logger.trace:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      17: iconst_1
      18: ireturn

  public org.eclipse.jetty.websocket.WebSocket doWebSocketConnect(javax.servlet.http.HttpServletRequest, java.lang.String);
    Code:
       0: invokestatic  #6                  // Method org/atmosphere/container/JettyWebSocketUtil.access$000:()Lorg/slf4j/Logger;
       3: ldc           #10                 // String WebSocket-connect request {} with protocol {}
       5: aload_1
       6: invokeinterface #8,  1            // InterfaceMethod javax/servlet/http/HttpServletRequest.getRequestURI:()Ljava/lang/String;
      11: aload_2
      12: invokeinterface #9,  4            // InterfaceMethod org/slf4j/Logger.trace:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      17: iconst_0
      18: istore_3
      19: aload_0
      20: getfield      #2                  // Field val$config:Lorg/atmosphere/cpr/AtmosphereConfig;
      23: ldc           #11                 // String org.atmosphere.cpr.recycleAtmosphereRequestResponse
      25: invokevirtual #12                 // Method org/atmosphere/cpr/AtmosphereConfig.getInitParameter:(Ljava/lang/String;)Ljava/lang/String;
      28: astore        4
      30: aload         4
      32: ifnull        48
      35: aload         4
      37: invokestatic  #13                 // Method java/lang/Boolean.valueOf:(Ljava/lang/String;)Ljava/lang/Boolean;
      40: invokevirtual #14                 // Method java/lang/Boolean.booleanValue:()Z
      43: ifeq          48
      46: iconst_1
      47: istore_3
      48: aload_0
      49: getfield      #3                  // Field val$webSocketProcessor:Lorg/atmosphere/websocket/WebSocketProcessor;
      52: aload_1
      53: invokeinterface #15,  2           // InterfaceMethod org/atmosphere/websocket/WebSocketProcessor.handshake:(Ljavax/servlet/http/HttpServletRequest;)Z
      58: ifne          69
      61: new           #16                 // class java/lang/IllegalStateException
      64: dup
      65: invokespecial #17                 // Method java/lang/IllegalStateException."<init>":()V
      68: athrow
      69: new           #18                 // class org/atmosphere/container/JettyWebSocketHandler
      72: dup
      73: aload_1
      74: iconst_0
      75: aload_0
      76: getfield      #4                  // Field val$useBuildInSession:Ljava/util/concurrent/atomic/AtomicBoolean;
      79: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
      82: iload_3
      83: aload_0
      84: getfield      #2                  // Field val$config:Lorg/atmosphere/cpr/AtmosphereConfig;
      87: ldc           #20                 // String org.atmosphere.cpr.sessionCreate
      89: iconst_1
      90: invokevirtual #21                 // Method org/atmosphere/cpr/AtmosphereConfig.getInitParameter:(Ljava/lang/String;Z)Z
      93: invokestatic  #22                 // Method org/atmosphere/cpr/AtmosphereRequestImpl.cloneRequest:(Ljavax/servlet/http/HttpServletRequest;ZZZZ)Lorg/atmosphere/cpr/AtmosphereRequest;
      96: aload_0
      97: getfield      #2                  // Field val$config:Lorg/atmosphere/cpr/AtmosphereConfig;
     100: invokevirtual #23                 // Method org/atmosphere/cpr/AtmosphereConfig.framework:()Lorg/atmosphere/cpr/AtmosphereFramework;
     103: aload_0
     104: getfield      #3                  // Field val$webSocketProcessor:Lorg/atmosphere/websocket/WebSocketProcessor;
     107: invokespecial #24                 // Method org/atmosphere/container/JettyWebSocketHandler."<init>":(Lorg/atmosphere/cpr/AtmosphereRequest;Lorg/atmosphere/cpr/AtmosphereFramework;Lorg/atmosphere/websocket/WebSocketProcessor;)V
     110: areturn
}
