Compiled from "Jetty8WebSocket.java"
public class org.atmosphere.container.version.Jetty8WebSocket extends org.atmosphere.websocket.WebSocket {
  private final org.eclipse.jetty.websocket.WebSocket$Connection connection;

  public org.atmosphere.container.version.Jetty8WebSocket(org.eclipse.jetty.websocket.WebSocket$Connection, org.atmosphere.cpr.AtmosphereConfig);
    Code:
       0: aload_0
       1: aload_2
       2: invokespecial #1                  // Method org/atmosphere/websocket/WebSocket."<init>":(Lorg/atmosphere/cpr/AtmosphereConfig;)V
       5: aload_0
       6: aload_1
       7: putfield      #2                  // Field connection:Lorg/eclipse/jetty/websocket/WebSocket$Connection;
      10: return

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #2                  // Field connection:Lorg/eclipse/jetty/websocket/WebSocket$Connection;
       4: invokevirtual #3                  // Method java/lang/Object.toString:()Ljava/lang/String;
       7: areturn

  public boolean isOpen();
    Code:
       0: aload_0
       1: getfield      #2                  // Field connection:Lorg/eclipse/jetty/websocket/WebSocket$Connection;
       4: invokeinterface #4,  1            // InterfaceMethod org/eclipse/jetty/websocket/WebSocket$Connection.isOpen:()Z
       9: ireturn

  public org.atmosphere.websocket.WebSocket write(java.lang.String) throws java.io.IOException;
    Code:
       0: getstatic     #5                  // Field logger:Lorg/slf4j/Logger;
       3: ldc           #6                  // String WebSocket.write() for {}
       5: aload_0
       6: invokevirtual #7                  // Method resource:()Lorg/atmosphere/cpr/AtmosphereResource;
       9: ifnull        24
      12: aload_0
      13: invokevirtual #7                  // Method resource:()Lorg/atmosphere/cpr/AtmosphereResource;
      16: invokeinterface #8,  1            // InterfaceMethod org/atmosphere/cpr/AtmosphereResource.uuid:()Ljava/lang/String;
      21: goto          26
      24: ldc           #9                  // String
      26: invokeinterface #10,  3           // InterfaceMethod org/slf4j/Logger.trace:(Ljava/lang/String;Ljava/lang/Object;)V
      31: aload_0
      32: getfield      #2                  // Field connection:Lorg/eclipse/jetty/websocket/WebSocket$Connection;
      35: aload_1
      36: invokeinterface #11,  2           // InterfaceMethod org/eclipse/jetty/websocket/WebSocket$Connection.sendMessage:(Ljava/lang/String;)V
      41: aload_0
      42: areturn

  public org.atmosphere.websocket.WebSocket write(byte[], int, int) throws java.io.IOException;
    Code:
       0: getstatic     #5                  // Field logger:Lorg/slf4j/Logger;
       3: ldc           #6                  // String WebSocket.write() for {}
       5: aload_0
       6: invokevirtual #7                  // Method resource:()Lorg/atmosphere/cpr/AtmosphereResource;
       9: ifnull        24
      12: aload_0
      13: invokevirtual #7                  // Method resource:()Lorg/atmosphere/cpr/AtmosphereResource;
      16: invokeinterface #8,  1            // InterfaceMethod org/atmosphere/cpr/AtmosphereResource.uuid:()Ljava/lang/String;
      21: goto          26
      24: ldc           #9                  // String
      26: invokeinterface #10,  3           // InterfaceMethod org/slf4j/Logger.trace:(Ljava/lang/String;Ljava/lang/Object;)V
      31: aload_0
      32: getfield      #2                  // Field connection:Lorg/eclipse/jetty/websocket/WebSocket$Connection;
      35: aload_1
      36: iload_2
      37: iload_3
      38: invokeinterface #12,  4           // InterfaceMethod org/eclipse/jetty/websocket/WebSocket$Connection.sendMessage:([BII)V
      43: aload_0
      44: areturn

  public void close();
    Code:
       0: getstatic     #5                  // Field logger:Lorg/slf4j/Logger;
       3: ldc           #13                 // String WebSocket.close() for AtmosphereResource {}
       5: aload_0
       6: invokevirtual #7                  // Method resource:()Lorg/atmosphere/cpr/AtmosphereResource;
       9: ifnull        24
      12: aload_0
      13: invokevirtual #7                  // Method resource:()Lorg/atmosphere/cpr/AtmosphereResource;
      16: invokeinterface #8,  1            // InterfaceMethod org/atmosphere/cpr/AtmosphereResource.uuid:()Ljava/lang/String;
      21: goto          26
      24: ldc           #14                 // String null
      26: invokeinterface #10,  3           // InterfaceMethod org/slf4j/Logger.trace:(Ljava/lang/String;Ljava/lang/Object;)V
      31: aload_0
      32: getfield      #2                  // Field connection:Lorg/eclipse/jetty/websocket/WebSocket$Connection;
      35: invokeinterface #15,  1           // InterfaceMethod org/eclipse/jetty/websocket/WebSocket$Connection.close:()V
      40: return

  public org.atmosphere.websocket.WebSocket flush(org.atmosphere.cpr.AtmosphereResponse) throws java.io.IOException;
    Code:
       0: getstatic     #5                  // Field logger:Lorg/slf4j/Logger;
       3: ldc           #16                 // String WebSocket.flush() not supported by Jetty
       5: invokeinterface #17,  2           // InterfaceMethod org/slf4j/Logger.trace:(Ljava/lang/String;)V
      10: aload_0
      11: areturn

  public org.atmosphere.cpr.AsyncIOWriter flush(org.atmosphere.cpr.AtmosphereResponse) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #18                 // Method flush:(Lorg/atmosphere/cpr/AtmosphereResponse;)Lorg/atmosphere/websocket/WebSocket;
       5: areturn
}
