Compiled from "DefaultAtmosphereResourceSessionFactory.java"
public class org.atmosphere.cpr.DefaultAtmosphereResourceSessionFactory implements org.atmosphere.cpr.AtmosphereResourceSessionFactory {
  private final java.util.concurrent.ConcurrentMap<java.lang.String, org.atmosphere.cpr.AtmosphereResourceSession> sessions;

  private final org.atmosphere.cpr.AtmosphereResourceEventListener disconnectListener;

  public org.atmosphere.cpr.DefaultAtmosphereResourceSessionFactory();
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #3                  // class java/util/concurrent/ConcurrentHashMap
       8: dup
       9: invokespecial #4                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      12: putfield      #1                  // Field sessions:Ljava/util/concurrent/ConcurrentMap;
      15: aload_0
      16: new           #5                  // class org/atmosphere/cpr/DefaultAtmosphereResourceSessionFactory$1
      19: dup
      20: aload_0
      21: invokespecial #6                  // Method org/atmosphere/cpr/DefaultAtmosphereResourceSessionFactory$1."<init>":(Lorg/atmosphere/cpr/DefaultAtmosphereResourceSessionFactory;)V
      24: putfield      #7                  // Field disconnectListener:Lorg/atmosphere/cpr/AtmosphereResourceEventListener;
      27: return

  public org.atmosphere.cpr.AtmosphereResourceSession getSession(org.atmosphere.cpr.AtmosphereResource, boolean);
    Code:
       0: aload_0
       1: getfield      #1                  // Field sessions:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: invokeinterface #8,  1            // InterfaceMethod org/atmosphere/cpr/AtmosphereResource.uuid:()Ljava/lang/String;
      10: invokeinterface #9,  2            // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      15: checkcast     #10                 // class org/atmosphere/cpr/AtmosphereResourceSession
      18: astore_3
      19: iload_2
      20: ifeq          75
      23: aload_3
      24: ifnonnull     75
      27: aload_1
      28: aload_0
      29: invokevirtual #11                 // Method getDisconnectListener:()Lorg/atmosphere/cpr/AtmosphereResourceEventListener;
      32: invokeinterface #12,  2           // InterfaceMethod org/atmosphere/cpr/AtmosphereResource.addEventListener:(Lorg/atmosphere/cpr/AtmosphereResourceEventListener;)Lorg/atmosphere/cpr/AtmosphereResource;
      37: pop
      38: new           #13                 // class org/atmosphere/cpr/DefaultAtmosphereResourceSession
      41: dup
      42: invokespecial #14                 // Method org/atmosphere/cpr/DefaultAtmosphereResourceSession."<init>":()V
      45: astore_3
      46: aload_0
      47: getfield      #1                  // Field sessions:Ljava/util/concurrent/ConcurrentMap;
      50: aload_1
      51: invokeinterface #8,  1            // InterfaceMethod org/atmosphere/cpr/AtmosphereResource.uuid:()Ljava/lang/String;
      56: aload_3
      57: invokeinterface #15,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      62: checkcast     #10                 // class org/atmosphere/cpr/AtmosphereResourceSession
      65: astore        4
      67: aload         4
      69: ifnull        75
      72: aload         4
      74: astore_3
      75: aload_3
      76: areturn

  public org.atmosphere.cpr.AtmosphereResourceSession getSession(org.atmosphere.cpr.AtmosphereResource);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_1
       3: invokevirtual #16                 // Method getSession:(Lorg/atmosphere/cpr/AtmosphereResource;Z)Lorg/atmosphere/cpr/AtmosphereResourceSession;
       6: areturn

  public void destroy();
    Code:
       0: aload_0
       1: getfield      #1                  // Field sessions:Ljava/util/concurrent/ConcurrentMap;
       4: invokeinterface #17,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.clear:()V
       9: return

  protected org.atmosphere.cpr.AtmosphereResourceEventListener getDisconnectListener();
    Code:
       0: aload_0
       1: getfield      #7                  // Field disconnectListener:Lorg/atmosphere/cpr/AtmosphereResourceEventListener;
       4: areturn

  static java.util.concurrent.ConcurrentMap access$000(org.atmosphere.cpr.DefaultAtmosphereResourceSessionFactory);
    Code:
       0: aload_0
       1: getfield      #1                  // Field sessions:Ljava/util/concurrent/ConcurrentMap;
       4: areturn
}
