Compiled from "AtmosphereResource.java"
public interface org.atmosphere.cpr.AtmosphereResource {
  public abstract org.atmosphere.cpr.AtmosphereResource$TRANSPORT transport();

  public abstract org.atmosphere.cpr.AtmosphereResource resumeOnBroadcast(boolean);

  public abstract boolean isSuspended();

  public abstract boolean resumeOnBroadcast();

  public abstract boolean isResumed();

  public abstract boolean isCancelled();

  public abstract org.atmosphere.cpr.AtmosphereResource resume();

  public abstract org.atmosphere.cpr.AtmosphereResource suspend();

  public abstract org.atmosphere.cpr.AtmosphereResource suspend(long);

  public abstract org.atmosphere.cpr.AtmosphereResource suspend(long, java.util.concurrent.TimeUnit);

  public abstract org.atmosphere.cpr.AtmosphereRequest getRequest();

  public abstract org.atmosphere.cpr.AtmosphereResponse getResponse();

  public abstract org.atmosphere.cpr.AtmosphereConfig getAtmosphereConfig();

  public abstract org.atmosphere.cpr.Broadcaster getBroadcaster();

  public abstract java.util.List<org.atmosphere.cpr.Broadcaster> broadcasters();

  public abstract org.atmosphere.cpr.AtmosphereResource removeFromAllBroadcasters();

  public abstract org.atmosphere.cpr.AtmosphereResource setBroadcaster(org.atmosphere.cpr.Broadcaster);

  public abstract org.atmosphere.cpr.AtmosphereResource addBroadcaster(org.atmosphere.cpr.Broadcaster);

  public abstract org.atmosphere.cpr.AtmosphereResource removeBroadcaster(org.atmosphere.cpr.Broadcaster);

  public abstract org.atmosphere.cpr.AtmosphereResource setSerializer(org.atmosphere.cpr.Serializer);

  public abstract org.atmosphere.cpr.AtmosphereResource write(java.lang.String);

  public abstract org.atmosphere.cpr.AtmosphereResource write(byte[]);

  public abstract org.atmosphere.cpr.Serializer getSerializer();

  public abstract org.atmosphere.cpr.AtmosphereResourceEvent getAtmosphereResourceEvent();

  public abstract org.atmosphere.cpr.AtmosphereHandler getAtmosphereHandler();

  public abstract org.atmosphere.cpr.AtmosphereResource writeOnTimeout(java.lang.Object);

  public abstract java.lang.Object writeOnTimeout();

  public abstract java.lang.String uuid();

  public abstract org.atmosphere.cpr.AtmosphereResource addEventListener(org.atmosphere.cpr.AtmosphereResourceEventListener);

  public abstract org.atmosphere.cpr.AtmosphereResource removeEventListener(org.atmosphere.cpr.AtmosphereResourceEventListener);

  public abstract org.atmosphere.cpr.AtmosphereResource removeEventListeners();

  public abstract org.atmosphere.cpr.AtmosphereResource notifyListeners(org.atmosphere.cpr.AtmosphereResourceEvent);

  public abstract org.atmosphere.cpr.AtmosphereResource notifyListeners();

  public abstract javax.servlet.http.HttpSession session();

  public abstract javax.servlet.http.HttpSession session(boolean);

  public abstract void close() throws java.io.IOException;

  public abstract org.atmosphere.cpr.AtmosphereResource forceBinaryWrite(boolean);

  public abstract boolean forceBinaryWrite();

  public abstract org.atmosphere.cpr.AtmosphereResource initialize(org.atmosphere.cpr.AtmosphereConfig, org.atmosphere.cpr.Broadcaster, org.atmosphere.cpr.AtmosphereRequest, org.atmosphere.cpr.AtmosphereResponse, org.atmosphere.cpr.AsyncSupport, org.atmosphere.cpr.AtmosphereHandler);
}
