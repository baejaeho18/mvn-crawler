Compiled from "AtmosphereRequest.java"
public interface org.atmosphere.cpr.AtmosphereRequest$Builder {
  public abstract org.atmosphere.cpr.AtmosphereRequest$Builder destroyable(boolean);

  public abstract org.atmosphere.cpr.AtmosphereRequest$Builder headers(java.util.Map<java.lang.String, java.lang.String>);

  public abstract org.atmosphere.cpr.AtmosphereRequest$Builder cookies(java.util.Set<javax.servlet.http.Cookie>);

  public abstract org.atmosphere.cpr.AtmosphereRequest$Builder dispatchRequestAsynchronously(boolean);

  public abstract org.atmosphere.cpr.AtmosphereRequest$Builder remoteAddr(java.lang.String);

  public abstract org.atmosphere.cpr.AtmosphereRequest$Builder remoteHost(java.lang.String);

  public abstract org.atmosphere.cpr.AtmosphereRequest$Builder remotePort(int);

  public abstract org.atmosphere.cpr.AtmosphereRequest$Builder localAddr(java.lang.String);

  public abstract org.atmosphere.cpr.AtmosphereRequest$Builder localName(java.lang.String);

  public abstract org.atmosphere.cpr.AtmosphereRequest$Builder localPort(int);

  public abstract org.atmosphere.cpr.AtmosphereRequest$Builder remoteInetSocketAddress(java.util.concurrent.Callable);

  public abstract org.atmosphere.cpr.AtmosphereRequest$Builder localInetSocketAddress(java.util.concurrent.Callable);

  public abstract org.atmosphere.cpr.AtmosphereRequest$Builder attributes(java.util.Map<java.lang.String, java.lang.Object>);

  public abstract org.atmosphere.cpr.AtmosphereRequest$Builder request(javax.servlet.http.HttpServletRequest);

  public abstract org.atmosphere.cpr.AtmosphereRequest$Builder servletPath(java.lang.String);

  public abstract org.atmosphere.cpr.AtmosphereRequest$Builder requestURI(java.lang.String);

  public abstract org.atmosphere.cpr.AtmosphereRequest$Builder requestURL(java.lang.String);

  public abstract org.atmosphere.cpr.AtmosphereRequest$Builder pathInfo(java.lang.String);

  public abstract org.atmosphere.cpr.AtmosphereRequest$Builder queryString(java.lang.String);

  public abstract org.atmosphere.cpr.AtmosphereRequest$Builder body(byte[]);

  public abstract org.atmosphere.cpr.AtmosphereRequest$Builder body(byte[], int, int);

  public abstract org.atmosphere.cpr.AtmosphereRequest$Builder encoding(java.lang.String);

  public abstract org.atmosphere.cpr.AtmosphereRequest$Builder method(java.lang.String);

  public abstract org.atmosphere.cpr.AtmosphereRequest$Builder contentType(java.lang.String);

  public abstract org.atmosphere.cpr.AtmosphereRequest$Builder contentLength(java.lang.Long);

  public abstract org.atmosphere.cpr.AtmosphereRequest$Builder body(java.lang.String);

  public abstract org.atmosphere.cpr.AtmosphereRequest$Builder inputStream(java.io.InputStream);

  public abstract org.atmosphere.cpr.AtmosphereRequest$Builder reader(java.io.Reader);

  public abstract org.atmosphere.cpr.AtmosphereRequest build();

  public abstract org.atmosphere.cpr.AtmosphereRequest$Builder queryStrings(java.util.Map<java.lang.String, java.lang.String[]>);

  public abstract org.atmosphere.cpr.AtmosphereRequest$Builder contextPath(java.lang.String);

  public abstract org.atmosphere.cpr.AtmosphereRequest$Builder serverName(java.lang.String);

  public abstract org.atmosphere.cpr.AtmosphereRequest$Builder serverPort(int);

  public abstract org.atmosphere.cpr.AtmosphereRequest$Builder session(javax.servlet.http.HttpSession);

  public abstract org.atmosphere.cpr.AtmosphereRequest$Builder principal(java.security.Principal);

  public abstract org.atmosphere.cpr.AtmosphereRequest$Builder authType(java.lang.String);

  public abstract org.atmosphere.cpr.AtmosphereRequest$Builder isSSecure(boolean);

  public abstract org.atmosphere.cpr.AtmosphereRequest$Builder locale(java.util.Locale);

  public abstract org.atmosphere.cpr.AtmosphereRequest$Builder userPrincipal(java.security.Principal);
}
