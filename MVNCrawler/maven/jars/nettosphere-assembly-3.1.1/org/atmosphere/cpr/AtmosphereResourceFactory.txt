Compiled from "AtmosphereResourceFactory.java"
public interface org.atmosphere.cpr.AtmosphereResourceFactory extends org.atmosphere.inject.AtmosphereConfigAware {
  public abstract void configure(org.atmosphere.cpr.AtmosphereConfig);

  public abstract org.atmosphere.cpr.AtmosphereResource create(org.atmosphere.cpr.AtmosphereConfig, org.atmosphere.cpr.AtmosphereRequest, org.atmosphere.cpr.AtmosphereResponse, org.atmosphere.cpr.AsyncSupport<?>);

  public abstract org.atmosphere.cpr.AtmosphereResource create(org.atmosphere.cpr.AtmosphereConfig, org.atmosphere.cpr.Broadcaster, org.atmosphere.cpr.AtmosphereRequest, org.atmosphere.cpr.AtmosphereResponse, org.atmosphere.cpr.AsyncSupport<?>, org.atmosphere.cpr.AtmosphereHandler);

  public abstract org.atmosphere.cpr.AtmosphereResource create(org.atmosphere.cpr.AtmosphereConfig, org.atmosphere.cpr.Broadcaster, org.atmosphere.cpr.AtmosphereRequest, org.atmosphere.cpr.AtmosphereResponse, org.atmosphere.cpr.AsyncSupport<?>, org.atmosphere.cpr.AtmosphereHandler, org.atmosphere.cpr.AtmosphereResource$TRANSPORT);

  public abstract org.atmosphere.cpr.AtmosphereResource create(org.atmosphere.cpr.AtmosphereConfig, org.atmosphere.cpr.Broadcaster, org.atmosphere.cpr.AtmosphereResponse, org.atmosphere.cpr.AsyncSupport<?>, org.atmosphere.cpr.AtmosphereHandler);

  public abstract org.atmosphere.cpr.AtmosphereResource create(org.atmosphere.cpr.AtmosphereConfig, org.atmosphere.cpr.Broadcaster, org.atmosphere.cpr.AtmosphereResponse, org.atmosphere.cpr.AsyncSupport<?>, org.atmosphere.cpr.AtmosphereHandler, org.atmosphere.cpr.AtmosphereResource$TRANSPORT);

  public abstract org.atmosphere.cpr.AtmosphereResource create(org.atmosphere.cpr.AtmosphereConfig, org.atmosphere.cpr.AtmosphereResponse, org.atmosphere.cpr.AsyncSupport<?>);

  public abstract org.atmosphere.cpr.AtmosphereResource create(org.atmosphere.cpr.AtmosphereConfig, java.lang.String);

  public abstract org.atmosphere.cpr.AtmosphereResource create(org.atmosphere.cpr.AtmosphereConfig, java.lang.String, org.atmosphere.cpr.AtmosphereRequest);

  public abstract org.atmosphere.cpr.AtmosphereResource remove(java.lang.String);

  public abstract org.atmosphere.cpr.AtmosphereResource find(java.lang.String);

  public abstract void locate(java.lang.String, org.atmosphere.cpr.AtmosphereResourceFactory$Async);

  public abstract java.util.Set<org.atmosphere.cpr.Broadcaster> broadcasters(java.lang.String);

  public abstract void registerUuidForFindCandidate(org.atmosphere.cpr.AtmosphereResource);

  public abstract void unRegisterUuidForFindCandidate(org.atmosphere.cpr.AtmosphereResource);

  public abstract void destroy();

  public abstract java.util.concurrent.ConcurrentMap<java.lang.String, org.atmosphere.cpr.AtmosphereResource> resources();

  public abstract java.util.Collection<org.atmosphere.cpr.AtmosphereResource> findAll();
}
