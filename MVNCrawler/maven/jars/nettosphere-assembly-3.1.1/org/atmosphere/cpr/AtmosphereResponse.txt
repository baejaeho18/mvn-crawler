Compiled from "AtmosphereResponse.java"
public interface org.atmosphere.cpr.AtmosphereResponse extends javax.servlet.http.HttpServletResponse {
  public abstract void destroy();

  public abstract void destroy(boolean);

  public abstract boolean destroyed();

  public abstract void addCookie(javax.servlet.http.Cookie);

  public abstract boolean containsHeader(java.lang.String);

  public abstract java.lang.String encodeURL(java.lang.String);

  public abstract java.lang.String encodeRedirectURL(java.lang.String);

  public abstract java.lang.String encodeUrl(java.lang.String);

  public abstract java.lang.String encodeRedirectUrl(java.lang.String);

  public abstract org.atmosphere.cpr.AtmosphereResponse delegateToNativeResponse(boolean);

  public abstract void sendError(int, java.lang.String) throws java.io.IOException;

  public abstract void sendError(int) throws java.io.IOException;

  public abstract void sendRedirect(java.lang.String) throws java.io.IOException;

  public abstract void setDateHeader(java.lang.String, long);

  public abstract void addDateHeader(java.lang.String, long);

  public abstract void setHeader(java.lang.String, java.lang.String);

  public abstract void addHeader(java.lang.String, java.lang.String);

  public abstract void setIntHeader(java.lang.String, int);

  public abstract void addIntHeader(java.lang.String, int);

  public abstract void setStatus(int);

  public abstract void setStatus(int, java.lang.String);

  public abstract int getStatus();

  public abstract javax.servlet.ServletResponse getResponse();

  public abstract java.lang.String getStatusMessage();

  public abstract java.util.Map<java.lang.String, java.lang.String> headers();

  public abstract java.lang.String getHeader(java.lang.String);

  public abstract java.util.Collection<java.lang.String> getHeaders(java.lang.String);

  public abstract java.util.Collection<java.lang.String> getHeaderNames();

  public abstract void setCharacterEncoding(java.lang.String);

  public abstract void flushBuffer() throws java.io.IOException;

  public abstract int getBufferSize();

  public abstract java.lang.String getCharacterEncoding();

  public abstract boolean isDestroyable();

  public abstract org.atmosphere.cpr.AtmosphereResponse destroyable(boolean);

  public abstract javax.servlet.ServletOutputStream getOutputStream() throws java.io.IOException;

  public abstract java.io.PrintWriter getWriter() throws java.io.IOException;

  public abstract void setContentLength(int);

  public abstract void setContentType(java.lang.String);

  public abstract java.lang.String getContentType();

  public abstract boolean isCommitted();

  public abstract void reset();

  public abstract void resetBuffer();

  public abstract void setBufferSize(int);

  public abstract void setLocale(java.util.Locale);

  public abstract java.util.Locale getLocale();

  public abstract org.atmosphere.cpr.AsyncIOWriter getAsyncIOWriter();

  public abstract org.atmosphere.cpr.AtmosphereResponse asyncIOWriter(org.atmosphere.cpr.AsyncIOWriter);

  public abstract org.atmosphere.cpr.AtmosphereRequest request();

  public abstract org.atmosphere.cpr.AtmosphereResponse request(org.atmosphere.cpr.AtmosphereRequest);

  public abstract void close() throws java.io.IOException;

  public abstract void closeStreamOrWriter();

  public abstract org.atmosphere.cpr.AtmosphereResponse write(java.lang.String);

  public abstract org.atmosphere.cpr.AtmosphereResponse write(java.lang.String, boolean);

  public abstract org.atmosphere.cpr.AtmosphereResponse write(byte[]);

  public abstract org.atmosphere.cpr.AtmosphereResponse write(byte[], boolean);

  public abstract org.atmosphere.cpr.AtmosphereResponse write(byte[], int, int);

  public abstract org.atmosphere.cpr.AtmosphereResponse write(byte[], int, int, boolean);

  public abstract org.atmosphere.cpr.AtmosphereResource resource();

  public abstract void setResponse(javax.servlet.ServletResponse);

  public abstract java.lang.String uuid();

  public abstract java.lang.String toString();
}
