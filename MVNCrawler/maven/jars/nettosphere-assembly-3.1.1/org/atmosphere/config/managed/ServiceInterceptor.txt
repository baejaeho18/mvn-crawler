Compiled from "ServiceInterceptor.java"
public abstract class org.atmosphere.config.managed.ServiceInterceptor extends org.atmosphere.cpr.AtmosphereInterceptorAdapter {
  private final org.slf4j.Logger logger;

  protected org.atmosphere.cpr.AtmosphereConfig config;

  public org.atmosphere.config.managed.ServiceInterceptor();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/atmosphere/cpr/AtmosphereInterceptorAdapter."<init>":()V
       4: aload_0
       5: ldc           #2                  // class org/atmosphere/config/managed/ServiceInterceptor
       7: invokestatic  #3                  // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
      10: putfield      #4                  // Field logger:Lorg/slf4j/Logger;
      13: return

  public void configure(org.atmosphere.cpr.AtmosphereConfig);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field config:Lorg/atmosphere/cpr/AtmosphereConfig;
       5: return

  public org.atmosphere.cpr.Action inspect(org.atmosphere.cpr.AtmosphereResource);
    Code:
       0: aconst_null
       1: astore_2
       2: aload_1
       3: invokeinterface #6,  1            // InterfaceMethod org/atmosphere/cpr/AtmosphereResource.getRequest:()Lorg/atmosphere/cpr/AtmosphereRequest;
       8: getstatic     #7                  // Field org/atmosphere/cpr/FrameworkConfig.ATMOSPHERE_HANDLER_WRAPPER:Ljava/lang/String;
      11: invokeinterface #8,  2            // InterfaceMethod org/atmosphere/cpr/AtmosphereRequest.getAttribute:(Ljava/lang/String;)Ljava/lang/Object;
      16: checkcast     #9                  // class org/atmosphere/cpr/AtmosphereFramework$AtmosphereHandlerWrapper
      19: astore_2
      20: aload_2
      21: invokevirtual #10                 // Method org/atmosphere/cpr/AtmosphereFramework$AtmosphereHandlerWrapper.wildcardMapping:()Z
      24: ifne          66
      27: getstatic     #11                 // Field org/atmosphere/cpr/Action.CONTINUE:Lorg/atmosphere/cpr/Action;
      30: astore_3
      31: aload_2
      32: ifnull        64
      35: aload_2
      36: invokevirtual #12                 // Method org/atmosphere/cpr/AtmosphereFramework$AtmosphereHandlerWrapper.needRequestScopedInjection:()Z
      39: ifeq          64
      42: aload_1
      43: invokestatic  #13                 // Method org/atmosphere/util/Utils.inject:(Lorg/atmosphere/cpr/AtmosphereResource;)V
      46: goto          64
      49: astore        4
      51: aload_0
      52: getfield      #4                  // Field logger:Lorg/slf4j/Logger;
      55: ldc           #15                 // String
      57: aload         4
      59: invokeinterface #16,  3           // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Throwable;)V
      64: aload_3
      65: areturn
      66: aload_0
      67: aload_1
      68: invokeinterface #6,  1            // InterfaceMethod org/atmosphere/cpr/AtmosphereResource.getRequest:()Lorg/atmosphere/cpr/AtmosphereRequest;
      73: aload_2
      74: invokevirtual #17                 // Method mapAnnotatedService:(Lorg/atmosphere/cpr/AtmosphereRequest;Lorg/atmosphere/cpr/AtmosphereFramework$AtmosphereHandlerWrapper;)V
      77: getstatic     #11                 // Field org/atmosphere/cpr/Action.CONTINUE:Lorg/atmosphere/cpr/Action;
      80: astore_3
      81: aload_2
      82: ifnull        114
      85: aload_2
      86: invokevirtual #12                 // Method org/atmosphere/cpr/AtmosphereFramework$AtmosphereHandlerWrapper.needRequestScopedInjection:()Z
      89: ifeq          114
      92: aload_1
      93: invokestatic  #13                 // Method org/atmosphere/util/Utils.inject:(Lorg/atmosphere/cpr/AtmosphereResource;)V
      96: goto          114
      99: astore        4
     101: aload_0
     102: getfield      #4                  // Field logger:Lorg/slf4j/Logger;
     105: ldc           #15                 // String
     107: aload         4
     109: invokeinterface #16,  3           // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Throwable;)V
     114: aload_3
     115: areturn
     116: astore        5
     118: aload_2
     119: ifnull        151
     122: aload_2
     123: invokevirtual #12                 // Method org/atmosphere/cpr/AtmosphereFramework$AtmosphereHandlerWrapper.needRequestScopedInjection:()Z
     126: ifeq          151
     129: aload_1
     130: invokestatic  #13                 // Method org/atmosphere/util/Utils.inject:(Lorg/atmosphere/cpr/AtmosphereResource;)V
     133: goto          151
     136: astore        6
     138: aload_0
     139: getfield      #4                  // Field logger:Lorg/slf4j/Logger;
     142: ldc           #15                 // String
     144: aload         6
     146: invokeinterface #16,  3           // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Throwable;)V
     151: aload         5
     153: athrow
    Exception table:
       from    to  target type
          42    46    49   Class java/lang/IllegalAccessException
          92    96    99   Class java/lang/IllegalAccessException
           2    31   116   any
          66    81   116   any
         129   133   136   Class java/lang/IllegalAccessException
         116   118   116   any

  protected void mapAnnotatedService(org.atmosphere.cpr.AtmosphereRequest, org.atmosphere.cpr.AtmosphereFramework$AtmosphereHandlerWrapper);
    Code:
       0: aload_2
       1: getfield      #18                 // Field org/atmosphere/cpr/AtmosphereFramework$AtmosphereHandlerWrapper.broadcaster:Lorg/atmosphere/cpr/Broadcaster;
       4: astore_3
       5: aconst_null
       6: astore        5
       8: iconst_0
       9: istore        6
      11: aload_1
      12: invokestatic  #19                 // Method org/atmosphere/util/Utils.pathInfo:(Lorg/atmosphere/cpr/AtmosphereRequest;)Ljava/lang/String;
      15: astore        4
      17: aload_3
      18: invokeinterface #20,  1           // InterfaceMethod org/atmosphere/cpr/Broadcaster.getID:()Ljava/lang/String;
      23: ldc           #21                 // String {
      25: invokevirtual #22                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
      28: ifeq          53
      31: iconst_1
      32: istore        6
      34: aload_0
      35: getfield      #5                  // Field config:Lorg/atmosphere/cpr/AtmosphereConfig;
      38: invokevirtual #23                 // Method org/atmosphere/cpr/AtmosphereConfig.getBroadcasterFactory:()Lorg/atmosphere/cpr/BroadcasterFactory;
      41: aload_3
      42: invokeinterface #20,  1           // InterfaceMethod org/atmosphere/cpr/Broadcaster.getID:()Ljava/lang/String;
      47: invokeinterface #24,  2           // InterfaceMethod org/atmosphere/cpr/BroadcasterFactory.remove:(Ljava/lang/Object;)Z
      52: pop
      53: aload_1
      54: invokeinterface #25,  1           // InterfaceMethod org/atmosphere/cpr/AtmosphereRequest.localAttributes:()Lorg/atmosphere/cpr/AtmosphereRequest$LocalAttributes;
      59: ldc           #26                 // class javax/inject/Named
      61: invokevirtual #27                 // Method java/lang/Class.getName:()Ljava/lang/String;
      64: aload         4
      66: invokevirtual #28                 // Method org/atmosphere/cpr/AtmosphereRequest$LocalAttributes.put:(Ljava/lang/String;Ljava/lang/Object;)Lorg/atmosphere/cpr/AtmosphereRequest$LocalAttributes;
      69: pop
      70: aload_0
      71: iload         6
      73: aload         4
      75: aload_1
      76: aload_2
      77: invokevirtual #29                 // Method mapAnnotatedService:(ZLjava/lang/String;Lorg/atmosphere/cpr/AtmosphereRequest;Lorg/atmosphere/cpr/AtmosphereFramework$AtmosphereHandlerWrapper;)V
      80: return

  public org.atmosphere.interceptor.InvokationOrder$PRIORITY priority();
    Code:
       0: getstatic     #30                 // Field org/atmosphere/interceptor/InvokationOrder.AFTER_DEFAULT:Lorg/atmosphere/interceptor/InvokationOrder$PRIORITY;
       3: areturn

  protected abstract void mapAnnotatedService(boolean, java.lang.String, org.atmosphere.cpr.AtmosphereRequest, org.atmosphere.cpr.AtmosphereFramework$AtmosphereHandlerWrapper);
}
