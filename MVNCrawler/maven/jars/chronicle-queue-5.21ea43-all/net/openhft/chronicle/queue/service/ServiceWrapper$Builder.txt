Compiled from "ServiceWrapper.java"
public interface net.openhft.chronicle.queue.service.ServiceWrapper$Builder<O> extends java.util.function.Supplier<net.openhft.chronicle.queue.service.ServiceWrapper> {
  public abstract java.util.List<java.lang.String> inputPath();

  public abstract java.lang.Class<O> outClass();

  public abstract net.openhft.chronicle.queue.service.ServiceWrapper$Builder<O> addInputPath(java.lang.String);

  public abstract net.openhft.chronicle.queue.service.ServiceWrapper$Builder<O> outClass(java.lang.Class<O>);

  public abstract java.lang.String outputPath();

  public abstract net.openhft.chronicle.queue.service.ServiceWrapper$Builder<O> outputPath(java.lang.String);

  public abstract java.util.List<java.util.function.Function<O, java.lang.Object>> getServiceFunctions();

  public abstract net.openhft.chronicle.queue.service.ServiceWrapper$Builder<O> addServiceFunction(java.util.function.Function<O, java.lang.Object>);

  public abstract net.openhft.chronicle.core.threads.EventLoop eventLoop();

  public abstract boolean createdEventLoop();

  public abstract void eventLoop(net.openhft.chronicle.core.threads.EventLoop);

  public abstract net.openhft.chronicle.core.threads.HandlerPriority priority();

  public abstract net.openhft.chronicle.queue.service.ServiceWrapper$Builder<O> priority(net.openhft.chronicle.core.threads.HandlerPriority);

  public abstract int inputSourceId();

  public abstract net.openhft.chronicle.queue.service.ServiceWrapper$Builder<O> inputSourceId(int);

  public abstract int outputSourceId();

  public abstract net.openhft.chronicle.queue.service.ServiceWrapper$Builder<O> outputSourceId(int);

  public abstract net.openhft.chronicle.queue.service.ServiceWrapper get();

  public abstract net.openhft.chronicle.queue.ChronicleQueue inputQueue();

  public abstract net.openhft.chronicle.queue.ChronicleQueue outputQueue();

  public abstract net.openhft.chronicle.bytes.MethodReader outputReader(java.lang.Object...);

  public abstract <T> T inputWriter(java.lang.Class<T>);

  public abstract void closeQueues();

  public default java.lang.Object get();
    Code:
       0: aload_0
       1: invokeinterface #1,  1            // InterfaceMethod get:()Lnet/openhft/chronicle/queue/service/ServiceWrapper;
       6: areturn
}
