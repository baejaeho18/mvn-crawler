Compiled from "AbstractReference.java"
public abstract class net.openhft.chronicle.bytes.ref.AbstractReference extends net.openhft.chronicle.core.io.AbstractCloseable implements net.openhft.chronicle.bytes.Byteable,net.openhft.chronicle.core.io.Closeable {
  protected net.openhft.chronicle.bytes.BytesStore<?, ?> bytes;

  protected long offset;

  public net.openhft.chronicle.bytes.ref.AbstractReference();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method net/openhft/chronicle/core/io/AbstractCloseable."<init>":()V
       4: return

  public void bytesStore(net.openhft.chronicle.bytes.BytesStore, long, long) throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.nio.BufferOverflowException;
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method throwExceptionIfClosedInSetter:()V
       4: aload_0
       5: aload_1
       6: invokevirtual #3                  // Method acceptNewBytesStore:(Lnet/openhft/chronicle/bytes/BytesStore;)V
       9: aload_0
      10: lload_2
      11: putfield      #4                  // Field offset:J
      14: return

  public net.openhft.chronicle.bytes.BytesStore bytesStore();
    Code:
       0: aload_0
       1: getfield      #5                  // Field bytes:Lnet/openhft/chronicle/bytes/BytesStore;
       4: areturn

  public long offset();
    Code:
       0: aload_0
       1: getfield      #4                  // Field offset:J
       4: lreturn

  public abstract long maxSize();

  protected void acceptNewBytesStore(net.openhft.chronicle.bytes.BytesStore) throws java.lang.IllegalStateException;
    Code:
       0: aload_0
       1: getfield      #5                  // Field bytes:Lnet/openhft/chronicle/bytes/BytesStore;
       4: ifnull        17
       7: aload_0
       8: getfield      #5                  // Field bytes:Lnet/openhft/chronicle/bytes/BytesStore;
      11: aload_0
      12: invokeinterface #6,  2            // InterfaceMethod net/openhft/chronicle/bytes/BytesStore.release:(Lnet/openhft/chronicle/core/io/ReferenceOwner;)V
      17: aload_0
      18: aload_1
      19: invokeinterface #7,  1            // InterfaceMethod net/openhft/chronicle/bytes/BytesStore.bytesStore:()Lnet/openhft/chronicle/bytes/BytesStore;
      24: putfield      #5                  // Field bytes:Lnet/openhft/chronicle/bytes/BytesStore;
      27: aload_0
      28: getfield      #5                  // Field bytes:Lnet/openhft/chronicle/bytes/BytesStore;
      31: aload_0
      32: invokeinterface #8,  2            // InterfaceMethod net/openhft/chronicle/bytes/BytesStore.reserve:(Lnet/openhft/chronicle/core/io/ReferenceOwner;)V
      37: return

  protected void performClose() throws java.lang.IllegalStateException;
    Code:
       0: aload_0
       1: getfield      #5                  // Field bytes:Lnet/openhft/chronicle/bytes/BytesStore;
       4: ifnull        22
       7: aload_0
       8: getfield      #5                  // Field bytes:Lnet/openhft/chronicle/bytes/BytesStore;
      11: aload_0
      12: invokeinterface #6,  2            // InterfaceMethod net/openhft/chronicle/bytes/BytesStore.release:(Lnet/openhft/chronicle/core/io/ReferenceOwner;)V
      17: aload_0
      18: aconst_null
      19: putfield      #5                  // Field bytes:Lnet/openhft/chronicle/bytes/BytesStore;
      22: return

  public long address() throws java.lang.IllegalStateException, java.nio.BufferUnderflowException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method throwExceptionIfClosed:()V
       4: aload_0
       5: invokevirtual #10                 // Method bytesStore:()Lnet/openhft/chronicle/bytes/BytesStore;
       8: aload_0
       9: getfield      #4                  // Field offset:J
      12: invokeinterface #11,  3           // InterfaceMethod net/openhft/chronicle/bytes/BytesStore.addressForRead:(J)J
      17: lreturn

  protected boolean threadSafetyCheck(boolean);
    Code:
       0: iconst_1
       1: ireturn
}
