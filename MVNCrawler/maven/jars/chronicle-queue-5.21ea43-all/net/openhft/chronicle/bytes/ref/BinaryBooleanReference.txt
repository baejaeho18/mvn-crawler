Compiled from "BinaryBooleanReference.java"
public class net.openhft.chronicle.bytes.ref.BinaryBooleanReference extends net.openhft.chronicle.bytes.ref.AbstractReference implements net.openhft.chronicle.core.values.BooleanValue {
  private static final byte FALSE;

  private static final byte TRUE;

  public net.openhft.chronicle.bytes.ref.BinaryBooleanReference();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method net/openhft/chronicle/bytes/ref/AbstractReference."<init>":()V
       4: return

  public void bytesStore(net.openhft.chronicle.bytes.BytesStore, long, long) throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.nio.BufferOverflowException;
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method throwExceptionIfClosedInSetter:()V
       4: lload         4
       6: aload_0
       7: invokevirtual #3                  // Method maxSize:()J
      10: lcmp
      11: ifeq          22
      14: new           #4                  // class java/lang/IllegalArgumentException
      17: dup
      18: invokespecial #5                  // Method java/lang/IllegalArgumentException."<init>":()V
      21: athrow
      22: aload_0
      23: aload_1
      24: lload_2
      25: lload         4
      27: invokespecial #6                  // Method net/openhft/chronicle/bytes/ref/AbstractReference.bytesStore:(Lnet/openhft/chronicle/bytes/BytesStore;JJ)V
      30: return

  public long maxSize();
    Code:
       0: lconst_1
       1: lreturn

  public boolean getValue() throws java.lang.IllegalStateException, java.nio.BufferUnderflowException;
    Code:
       0: aload_0
       1: invokevirtual #7                  // Method throwExceptionIfClosed:()V
       4: aload_0
       5: getfield      #8                  // Field bytes:Lnet/openhft/chronicle/bytes/BytesStore;
       8: aload_0
       9: getfield      #9                  // Field offset:J
      12: invokeinterface #10,  3           // InterfaceMethod net/openhft/chronicle/bytes/BytesStore.readByte:(J)B
      17: istore_1
      18: iload_1
      19: bipush        -80
      21: if_icmpne     26
      24: iconst_0
      25: ireturn
      26: iload_1
      27: bipush        -79
      29: if_icmpne     34
      32: iconst_1
      33: ireturn
      34: new           #12                 // class java/lang/IllegalStateException
      37: dup
      38: new           #13                 // class java/lang/StringBuilder
      41: dup
      42: invokespecial #14                 // Method java/lang/StringBuilder."<init>":()V
      45: ldc           #15                 // String unexpected code=
      47: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      50: iload_1
      51: invokevirtual #17                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      54: invokevirtual #18                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      57: invokespecial #19                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      60: athrow

  public void setValue(boolean) throws java.lang.IllegalStateException;
    Code:
       0: aload_0
       1: invokevirtual #7                  // Method throwExceptionIfClosed:()V
       4: aload_0
       5: getfield      #8                  // Field bytes:Lnet/openhft/chronicle/bytes/BytesStore;
       8: aload_0
       9: getfield      #9                  // Field offset:J
      12: iload_1
      13: ifeq          21
      16: bipush        -79
      18: goto          23
      21: bipush        -80
      23: invokeinterface #20,  4           // InterfaceMethod net/openhft/chronicle/bytes/BytesStore.writeByte:(JB)Lnet/openhft/chronicle/bytes/RandomDataOutput;
      28: pop
      29: goto          42
      32: astore_2
      33: new           #22                 // class java/lang/AssertionError
      36: dup
      37: aload_2
      38: invokespecial #23                 // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
      41: athrow
      42: return
    Exception table:
       from    to  target type
           4    29    32   Class java/nio/BufferOverflowException
}
