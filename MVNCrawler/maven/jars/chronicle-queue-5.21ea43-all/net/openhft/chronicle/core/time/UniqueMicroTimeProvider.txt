Compiled from "UniqueMicroTimeProvider.java"
public class net.openhft.chronicle.core.time.UniqueMicroTimeProvider implements net.openhft.chronicle.core.time.TimeProvider {
  public static final net.openhft.chronicle.core.time.UniqueMicroTimeProvider INSTANCE;

  private final java.util.concurrent.atomic.AtomicLong lastTime;

  private net.openhft.chronicle.core.time.TimeProvider provider;

  static final boolean $assertionsDisabled;

  public net.openhft.chronicle.core.time.UniqueMicroTimeProvider();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/atomic/AtomicLong
       8: dup
       9: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicLong."<init>":()V
      12: putfield      #4                  // Field lastTime:Ljava/util/concurrent/atomic/AtomicLong;
      15: aload_0
      16: getstatic     #5                  // Field net/openhft/chronicle/core/time/SystemTimeProvider.INSTANCE:Lnet/openhft/chronicle/core/time/SystemTimeProvider;
      19: putfield      #6                  // Field provider:Lnet/openhft/chronicle/core/time/TimeProvider;
      22: return

  public net.openhft.chronicle.core.time.UniqueMicroTimeProvider provider(net.openhft.chronicle.core.time.TimeProvider) throws java.lang.IllegalStateException;
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field provider:Lnet/openhft/chronicle/core/time/TimeProvider;
       5: aload_0
       6: getfield      #4                  // Field lastTime:Ljava/util/concurrent/atomic/AtomicLong;
       9: aload_1
      10: invokeinterface #7,  1            // InterfaceMethod net/openhft/chronicle/core/time/TimeProvider.currentTimeMicros:()J
      15: invokevirtual #8                  // Method java/util/concurrent/atomic/AtomicLong.set:(J)V
      18: aload_0
      19: areturn

  public long currentTimeMillis();
    Code:
       0: aload_0
       1: getfield      #6                  // Field provider:Lnet/openhft/chronicle/core/time/TimeProvider;
       4: invokeinterface #9,  1            // InterfaceMethod net/openhft/chronicle/core/time/TimeProvider.currentTimeMillis:()J
       9: lreturn

  public long currentTimeMicros() throws java.lang.IllegalStateException;
    Code:
       0: aload_0
       1: getfield      #6                  // Field provider:Lnet/openhft/chronicle/core/time/TimeProvider;
       4: invokeinterface #7,  1            // InterfaceMethod net/openhft/chronicle/core/time/TimeProvider.currentTimeMicros:()J
       9: lstore_1
      10: aload_0
      11: getfield      #4                  // Field lastTime:Ljava/util/concurrent/atomic/AtomicLong;
      14: invokevirtual #10                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
      17: lstore_3
      18: lload_3
      19: lload_1
      20: lcmp
      21: iflt          34
      24: aload_0
      25: lload_1
      26: lload_3
      27: invokespecial #11                 // Method assertTime:(JJ)V
      30: lload_3
      31: lconst_1
      32: ladd
      33: lstore_1
      34: aload_0
      35: getfield      #4                  // Field lastTime:Ljava/util/concurrent/atomic/AtomicLong;
      38: lload_3
      39: lload_1
      40: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicLong.compareAndSet:(JJ)Z
      43: ifeq          48
      46: lload_1
      47: lreturn
      48: invokestatic  #13                 // Method net/openhft/chronicle/core/Jvm.nanoPause:()V
      51: goto          10

  public long currentTimeNanos() throws java.lang.IllegalStateException;
    Code:
       0: aload_0
       1: getfield      #6                  // Field provider:Lnet/openhft/chronicle/core/time/TimeProvider;
       4: invokeinterface #14,  1           // InterfaceMethod net/openhft/chronicle/core/time/TimeProvider.currentTimeNanos:()J
       9: lstore_1
      10: lload_1
      11: ldc2_w        #15                 // long 1000l
      14: ldiv
      15: lstore_3
      16: aload_0
      17: getfield      #4                  // Field lastTime:Ljava/util/concurrent/atomic/AtomicLong;
      20: invokevirtual #10                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
      23: lstore        5
      25: lload         5
      27: lload_1
      28: ldc2_w        #15                 // long 1000l
      31: ldiv
      32: lcmp
      33: iflt          54
      36: aload_0
      37: lload_3
      38: lload         5
      40: invokespecial #11                 // Method assertTime:(JJ)V
      43: lload         5
      45: lconst_1
      46: ladd
      47: lstore_3
      48: lload_3
      49: ldc2_w        #15                 // long 1000l
      52: lmul
      53: lstore_1
      54: aload_0
      55: getfield      #4                  // Field lastTime:Ljava/util/concurrent/atomic/AtomicLong;
      58: lload         5
      60: lload_3
      61: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicLong.compareAndSet:(JJ)Z
      64: ifeq          69
      67: lload_1
      68: lreturn
      69: invokestatic  #13                 // Method net/openhft/chronicle/core/Jvm.nanoPause:()V
      72: goto          16

  private void assertTime(long, long);
    Code:
       0: getstatic     #17                 // Field $assertionsDisabled:Z
       3: ifne          27
       6: lload_3
       7: lload_1
       8: lsub
       9: l2d
      10: ldc2_w        #18                 // double 1000000.0d
      13: dcmpg
      14: iflt          27
      17: new           #20                 // class java/lang/AssertionError
      20: dup
      21: ldc           #21                 // String if you call this more than 1 million times a second it will make time go forward
      23: invokespecial #22                 // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
      26: athrow
      27: return

  static {};
    Code:
       0: ldc           #23                 // class net/openhft/chronicle/core/time/UniqueMicroTimeProvider
       2: invokevirtual #24                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #17                 // Field $assertionsDisabled:Z
      16: new           #23                 // class net/openhft/chronicle/core/time/UniqueMicroTimeProvider
      19: dup
      20: invokespecial #25                 // Method "<init>":()V
      23: putstatic     #26                 // Field INSTANCE:Lnet/openhft/chronicle/core/time/UniqueMicroTimeProvider;
      26: return
}
