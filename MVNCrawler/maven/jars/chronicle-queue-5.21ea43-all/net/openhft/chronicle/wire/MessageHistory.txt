Compiled from "MessageHistory.java"
public interface net.openhft.chronicle.wire.MessageHistory extends net.openhft.chronicle.wire.Marshallable {
  public static net.openhft.chronicle.wire.MessageHistory get();
    Code:
       0: invokestatic  #1                  // Method net/openhft/chronicle/wire/VanillaMessageHistory.getThreadLocal:()Lnet/openhft/chronicle/wire/MessageHistory;
       3: areturn

  public static void set(net.openhft.chronicle.wire.MessageHistory);
    Code:
       0: aload_0
       1: invokestatic  #2                  // Method net/openhft/chronicle/wire/VanillaMessageHistory.setThreadLocal:(Lnet/openhft/chronicle/wire/MessageHistory;)V
       4: return

  public static void writeHistory(net.openhft.chronicle.wire.DocumentContext);
    Code:
       0: aload_0
       1: invokeinterface #3,  1            // InterfaceMethod net/openhft/chronicle/wire/DocumentContext.wire:()Lnet/openhft/chronicle/wire/Wire;
       6: astore_1
       7: aload_1
       8: invokeinterface #4,  1            // InterfaceMethod net/openhft/chronicle/wire/Wire.bytes:()Lnet/openhft/chronicle/bytes/Bytes;
      13: invokeinterface #5,  1            // InterfaceMethod net/openhft/chronicle/bytes/Bytes.readRemaining:()J
      18: lconst_0
      19: lcmp
      20: ifne          40
      23: aload_1
      24: ldc           #7                  // String history
      26: invokeinterface #8,  2            // InterfaceMethod net/openhft/chronicle/wire/Wire.writeEventName:(Ljava/lang/CharSequence;)Lnet/openhft/chronicle/wire/ValueOut;
      31: invokestatic  #9                  // InterfaceMethod get:()Lnet/openhft/chronicle/wire/MessageHistory;
      34: invokeinterface #10,  2           // InterfaceMethod net/openhft/chronicle/wire/ValueOut.marshallable:(Lnet/openhft/chronicle/wire/WriteMarshallable;)Lnet/openhft/chronicle/wire/WireOut;
      39: pop
      40: return

  public abstract int timings();

  public abstract long timing(int);

  public abstract int sources();

  public abstract int sourceId(int);

  public abstract boolean sourceIdsEndsWith(int[]);

  public abstract long sourceIndex(int);

  public abstract void reset();

  public abstract void reset(int, long);

  public abstract int lastSourceId();

  public abstract long lastSourceIndex();

  public abstract boolean isDirty();
}
