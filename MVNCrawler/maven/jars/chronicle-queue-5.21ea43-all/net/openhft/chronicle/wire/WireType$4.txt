Compiled from "WireType.java"
final class net.openhft.chronicle.wire.WireType$4 extends net.openhft.chronicle.wire.WireType {
  net.openhft.chronicle.wire.WireType$4(java.lang.String, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: aconst_null
       4: invokespecial #1                  // Method net/openhft/chronicle/wire/WireType."<init>":(Ljava/lang/String;ILnet/openhft/chronicle/wire/WireType$1;)V
       7: return

  public net.openhft.chronicle.wire.Wire apply(net.openhft.chronicle.bytes.Bytes);
    Code:
       0: ldc           #2                  // String software.chronicle.wire.DefaultZeroWire
       2: invokestatic  #3                  // Method java/lang/Class.forName:(Ljava/lang/String;)Ljava/lang/Class;
       5: iconst_1
       6: anewarray     #4                  // class java/lang/Class
       9: dup
      10: iconst_0
      11: ldc           #5                  // class net/openhft/chronicle/bytes/Bytes
      13: aastore
      14: invokevirtual #6                  // Method java/lang/Class.getDeclaredConstructor:([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;
      17: iconst_1
      18: anewarray     #7                  // class java/lang/Object
      21: dup
      22: iconst_0
      23: aload_1
      24: aastore
      25: invokevirtual #8                  // Method java/lang/reflect/Constructor.newInstance:([Ljava/lang/Object;)Ljava/lang/Object;
      28: checkcast     #9                  // class net/openhft/chronicle/wire/Wire
      31: areturn
      32: astore_2
      33: new           #11                 // class java/lang/IllegalStateException
      36: dup
      37: ldc           #12                 // String A Chronicle Wire Enterprise licence is required to run this code because you are using DefaultZeroWire which is a licence product. Please contact sales@chronicle.software
      39: invokespecial #13                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      42: astore_3
      43: invokestatic  #14                 // Method net/openhft/chronicle/core/Jvm.warn:()Lnet/openhft/chronicle/core/onoes/ExceptionHandler;
      46: aload_0
      47: invokevirtual #15                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      50: aload_3
      51: invokeinterface #16,  3           // InterfaceMethod net/openhft/chronicle/core/onoes/ExceptionHandler.on:(Ljava/lang/Class;Ljava/lang/Throwable;)V
      56: aload_3
      57: athrow
    Exception table:
       from    to  target type
           0    31    32   Class java/lang/Exception

  public void licenceCheck();
    Code:
       0: aload_0
       1: invokevirtual #17                 // Method isAvailable:()Z
       4: ifeq          8
       7: return
       8: new           #11                 // class java/lang/IllegalStateException
      11: dup
      12: ldc           #18                 // String A Chronicle Wire Enterprise licence is required to run this code because you are using DEFAULT_ZERO_BINARY which is a licence product. Please contact sales@chronicle.software
      14: invokespecial #13                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      17: astore_1
      18: invokestatic  #14                 // Method net/openhft/chronicle/core/Jvm.warn:()Lnet/openhft/chronicle/core/onoes/ExceptionHandler;
      21: aload_0
      22: invokevirtual #15                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      25: aload_1
      26: invokeinterface #16,  3           // InterfaceMethod net/openhft/chronicle/core/onoes/ExceptionHandler.on:(Ljava/lang/Class;Ljava/lang/Throwable;)V
      31: aload_1
      32: athrow

  public boolean isAvailable();
    Code:
       0: invokestatic  #19                 // Method net/openhft/chronicle/wire/WireType.access$100:()Z
       3: ireturn

  public java.lang.String asString(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #20                 // Method asHexString:(Ljava/lang/Object;)Ljava/lang/String;
       5: areturn

  public <T> T fromString(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #21                 // Method fromHexString:(Ljava/lang/CharSequence;)Ljava/lang/Object;
       5: areturn

  public java.lang.Object apply(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #5                  // class net/openhft/chronicle/bytes/Bytes
       5: invokevirtual #22                 // Method apply:(Lnet/openhft/chronicle/bytes/Bytes;)Lnet/openhft/chronicle/wire/Wire;
       8: areturn
}
