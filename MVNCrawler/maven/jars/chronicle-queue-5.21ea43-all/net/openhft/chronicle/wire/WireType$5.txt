Compiled from "WireType.java"
final class net.openhft.chronicle.wire.WireType$5 extends net.openhft.chronicle.wire.WireType {
  net.openhft.chronicle.wire.WireType$5(java.lang.String, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: aconst_null
       4: invokespecial #1                  // Method net/openhft/chronicle/wire/WireType."<init>":(Ljava/lang/String;ILnet/openhft/chronicle/wire/WireType$1;)V
       7: return

  public net.openhft.chronicle.wire.Wire apply(net.openhft.chronicle.bytes.Bytes);
    Code:
       0: ldc           #2                  // String software.chronicle.wire.DeltaWire
       2: invokestatic  #3                  // Method java/lang/Class.forName:(Ljava/lang/String;)Ljava/lang/Class;
       5: astore_2
       6: aload_2
       7: iconst_1
       8: anewarray     #4                  // class java/lang/Class
      11: dup
      12: iconst_0
      13: ldc           #5                  // class net/openhft/chronicle/bytes/Bytes
      15: aastore
      16: invokevirtual #6                  // Method java/lang/Class.getDeclaredConstructor:([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;
      19: astore_3
      20: aload_3
      21: iconst_1
      22: anewarray     #7                  // class java/lang/Object
      25: dup
      26: iconst_0
      27: aload_1
      28: aastore
      29: invokevirtual #8                  // Method java/lang/reflect/Constructor.newInstance:([Ljava/lang/Object;)Ljava/lang/Object;
      32: checkcast     #9                  // class net/openhft/chronicle/wire/Wire
      35: areturn
      36: astore_2
      37: aload_0
      38: invokevirtual #11                 // Method licenceCheck:()V
      41: new           #12                 // class java/lang/AssertionError
      44: dup
      45: aload_2
      46: invokespecial #13                 // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
      49: athrow
    Exception table:
       from    to  target type
           0    35    36   Class java/lang/Exception

  public void licenceCheck();
    Code:
       0: aload_0
       1: invokevirtual #14                 // Method isAvailable:()Z
       4: ifeq          8
       7: return
       8: new           #15                 // class java/lang/IllegalStateException
      11: dup
      12: ldc           #16                 // String A Chronicle-Wire-Enterprise licence is required to run this code because you are using DELTA_BINARY which is a licence product. Please contact sales@chronicle.software
      14: invokespecial #17                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      17: astore_1
      18: invokestatic  #18                 // Method net/openhft/chronicle/wire/WireType.access$200:()Lorg/slf4j/Logger;
      21: ldc           #19                 // String
      23: aload_1
      24: invokeinterface #20,  3           // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Throwable;)V
      29: aload_1
      30: athrow

  public boolean isAvailable();
    Code:
       0: invokestatic  #21                 // Method net/openhft/chronicle/wire/WireType.access$300:()Z
       3: ireturn

  public java.lang.String asString(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #22                 // Method asHexString:(Ljava/lang/Object;)Ljava/lang/String;
       5: areturn

  public <T> T fromString(java.lang.CharSequence);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #23                 // Method fromHexString:(Ljava/lang/CharSequence;)Ljava/lang/Object;
       5: areturn

  public java.lang.Object apply(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #5                  // class net/openhft/chronicle/bytes/Bytes
       5: invokevirtual #24                 // Method apply:(Lnet/openhft/chronicle/bytes/Bytes;)Lnet/openhft/chronicle/wire/Wire;
       8: areturn
}
