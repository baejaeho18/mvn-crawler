Compiled from "User32.java"
public interface com.sun.jna.platform.win32.User32 extends com.sun.jna.win32.StdCallLibrary,com.sun.jna.platform.win32.WinUser,com.sun.jna.platform.win32.WinNT {
  public static final com.sun.jna.platform.win32.User32 INSTANCE;

  public static final com.sun.jna.platform.win32.WinDef$HWND HWND_MESSAGE;

  public static final int CS_GLOBALCLASS;

  public static final int WS_EX_TOPMOST;

  public static final int DEVICE_NOTIFY_WINDOW_HANDLE;

  public static final int DEVICE_NOTIFY_SERVICE_HANDLE;

  public static final int DEVICE_NOTIFY_ALL_INTERFACE_CLASSES;

  public static final int SW_SHOWDEFAULT;

  public abstract com.sun.jna.platform.win32.WinDef$HDC GetDC(com.sun.jna.platform.win32.WinDef$HWND);

  public abstract int ReleaseDC(com.sun.jna.platform.win32.WinDef$HWND, com.sun.jna.platform.win32.WinDef$HDC);

  public abstract com.sun.jna.platform.win32.WinDef$HWND FindWindow(java.lang.String, java.lang.String);

  public abstract int GetClassName(com.sun.jna.platform.win32.WinDef$HWND, char[], int);

  public abstract boolean GetGUIThreadInfo(int, com.sun.jna.platform.win32.WinUser$GUITHREADINFO);

  public abstract boolean GetWindowInfo(com.sun.jna.platform.win32.WinDef$HWND, com.sun.jna.platform.win32.WinUser$WINDOWINFO);

  public abstract boolean GetWindowRect(com.sun.jna.platform.win32.WinDef$HWND, com.sun.jna.platform.win32.WinDef$RECT);

  public abstract boolean GetClientRect(com.sun.jna.platform.win32.WinDef$HWND, com.sun.jna.platform.win32.WinDef$RECT);

  public abstract int GetWindowText(com.sun.jna.platform.win32.WinDef$HWND, char[], int);

  public abstract int GetWindowTextLength(com.sun.jna.platform.win32.WinDef$HWND);

  public abstract int GetWindowModuleFileName(com.sun.jna.platform.win32.WinDef$HWND, char[], int);

  public abstract int GetWindowThreadProcessId(com.sun.jna.platform.win32.WinDef$HWND, com.sun.jna.ptr.IntByReference);

  public abstract boolean EnumWindows(com.sun.jna.platform.win32.WinUser$WNDENUMPROC, com.sun.jna.Pointer);

  public abstract boolean EnumChildWindows(com.sun.jna.platform.win32.WinDef$HWND, com.sun.jna.platform.win32.WinUser$WNDENUMPROC, com.sun.jna.Pointer);

  public abstract boolean EnumThreadWindows(int, com.sun.jna.platform.win32.WinUser$WNDENUMPROC, com.sun.jna.Pointer);

  public abstract boolean FlashWindowEx(com.sun.jna.platform.win32.WinUser$FLASHWINFO);

  public abstract com.sun.jna.platform.win32.WinDef$HICON LoadIcon(com.sun.jna.platform.win32.WinDef$HINSTANCE, java.lang.String);

  public abstract com.sun.jna.platform.win32.WinNT$HANDLE LoadImage(com.sun.jna.platform.win32.WinDef$HINSTANCE, java.lang.String, int, int, int, int);

  public abstract boolean DestroyIcon(com.sun.jna.platform.win32.WinDef$HICON);

  public abstract int GetWindowLong(com.sun.jna.platform.win32.WinDef$HWND, int);

  public abstract int SetWindowLong(com.sun.jna.platform.win32.WinDef$HWND, int, int);

  public abstract com.sun.jna.platform.win32.BaseTSD$LONG_PTR GetWindowLongPtr(com.sun.jna.platform.win32.WinDef$HWND, int);

  public abstract com.sun.jna.Pointer SetWindowLongPtr(com.sun.jna.platform.win32.WinDef$HWND, int, com.sun.jna.Pointer);

  public abstract boolean SetLayeredWindowAttributes(com.sun.jna.platform.win32.WinDef$HWND, int, byte, int);

  public abstract boolean GetLayeredWindowAttributes(com.sun.jna.platform.win32.WinDef$HWND, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.ByteByReference, com.sun.jna.ptr.IntByReference);

  public abstract boolean UpdateLayeredWindow(com.sun.jna.platform.win32.WinDef$HWND, com.sun.jna.platform.win32.WinDef$HDC, com.sun.jna.platform.win32.WinDef$POINT, com.sun.jna.platform.win32.WinUser$SIZE, com.sun.jna.platform.win32.WinDef$HDC, com.sun.jna.platform.win32.WinDef$POINT, int, com.sun.jna.platform.win32.WinUser$BLENDFUNCTION, int);

  public abstract int SetWindowRgn(com.sun.jna.platform.win32.WinDef$HWND, com.sun.jna.platform.win32.WinDef$HRGN, boolean);

  public abstract boolean GetKeyboardState(byte[]);

  public abstract short GetAsyncKeyState(int);

  public abstract com.sun.jna.platform.win32.WinUser$HHOOK SetWindowsHookEx(int, com.sun.jna.platform.win32.WinUser$HOOKPROC, com.sun.jna.platform.win32.WinDef$HINSTANCE, int);

  public abstract com.sun.jna.platform.win32.WinDef$LRESULT CallNextHookEx(com.sun.jna.platform.win32.WinUser$HHOOK, int, com.sun.jna.platform.win32.WinDef$WPARAM, com.sun.jna.platform.win32.WinDef$LPARAM);

  public abstract boolean UnhookWindowsHookEx(com.sun.jna.platform.win32.WinUser$HHOOK);

  public abstract int GetMessage(com.sun.jna.platform.win32.WinUser$MSG, com.sun.jna.platform.win32.WinDef$HWND, int, int);

  public abstract boolean PeekMessage(com.sun.jna.platform.win32.WinUser$MSG, com.sun.jna.platform.win32.WinDef$HWND, int, int, int);

  public abstract boolean TranslateMessage(com.sun.jna.platform.win32.WinUser$MSG);

  public abstract com.sun.jna.platform.win32.WinDef$LRESULT DispatchMessage(com.sun.jna.platform.win32.WinUser$MSG);

  public abstract void PostMessage(com.sun.jna.platform.win32.WinDef$HWND, int, com.sun.jna.platform.win32.WinDef$WPARAM, com.sun.jna.platform.win32.WinDef$LPARAM);

  public abstract int PostThreadMessage(int, int, com.sun.jna.platform.win32.WinDef$WPARAM, com.sun.jna.platform.win32.WinDef$LPARAM);

  public abstract void PostQuitMessage(int);

  public abstract int GetSystemMetrics(int);

  public abstract com.sun.jna.platform.win32.WinDef$HWND SetParent(com.sun.jna.platform.win32.WinDef$HWND, com.sun.jna.platform.win32.WinDef$HWND);

  public abstract boolean IsWindowVisible(com.sun.jna.platform.win32.WinDef$HWND);

  public abstract boolean MoveWindow(com.sun.jna.platform.win32.WinDef$HWND, int, int, int, int, boolean);

  public abstract boolean SetWindowPos(com.sun.jna.platform.win32.WinDef$HWND, com.sun.jna.platform.win32.WinDef$HWND, int, int, int, int, int);

  public abstract boolean AttachThreadInput(com.sun.jna.platform.win32.WinDef$DWORD, com.sun.jna.platform.win32.WinDef$DWORD, boolean);

  public abstract boolean SetForegroundWindow(com.sun.jna.platform.win32.WinDef$HWND);

  public abstract com.sun.jna.platform.win32.WinDef$HWND GetForegroundWindow();

  public abstract com.sun.jna.platform.win32.WinDef$HWND SetFocus(com.sun.jna.platform.win32.WinDef$HWND);

  public abstract com.sun.jna.platform.win32.WinDef$DWORD SendInput(com.sun.jna.platform.win32.WinDef$DWORD, com.sun.jna.platform.win32.WinUser$INPUT[], int);

  public abstract com.sun.jna.platform.win32.WinDef$DWORD WaitForInputIdle(com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.platform.win32.WinDef$DWORD);

  public abstract boolean InvalidateRect(com.sun.jna.platform.win32.WinDef$HWND, com.sun.jna.platform.win32.WinDef$RECT, boolean);

  public abstract boolean RedrawWindow(com.sun.jna.platform.win32.WinDef$HWND, com.sun.jna.platform.win32.WinDef$RECT, com.sun.jna.platform.win32.WinDef$HRGN, com.sun.jna.platform.win32.WinDef$DWORD);

  public abstract com.sun.jna.platform.win32.WinDef$HWND GetWindow(com.sun.jna.platform.win32.WinDef$HWND, com.sun.jna.platform.win32.WinDef$DWORD);

  public abstract boolean UpdateWindow(com.sun.jna.platform.win32.WinDef$HWND);

  public abstract boolean ShowWindow(com.sun.jna.platform.win32.WinDef$HWND, int);

  public abstract boolean CloseWindow(com.sun.jna.platform.win32.WinDef$HWND);

  public abstract boolean RegisterHotKey(com.sun.jna.platform.win32.WinDef$HWND, int, int, int);

  public abstract boolean UnregisterHotKey(com.sun.jna.Pointer, int);

  public abstract boolean GetLastInputInfo(com.sun.jna.platform.win32.WinUser$LASTINPUTINFO);

  public abstract com.sun.jna.platform.win32.WinDef$ATOM RegisterClassEx(com.sun.jna.platform.win32.WinUser$WNDCLASSEX);

  public abstract boolean UnregisterClass(java.lang.String, com.sun.jna.platform.win32.WinDef$HINSTANCE);

  public abstract com.sun.jna.platform.win32.WinDef$HWND CreateWindowEx(int, java.lang.String, java.lang.String, int, int, int, int, int, com.sun.jna.platform.win32.WinDef$HWND, com.sun.jna.platform.win32.WinDef$HMENU, com.sun.jna.platform.win32.WinDef$HINSTANCE, com.sun.jna.platform.win32.WinDef$LPVOID);

  public abstract boolean DestroyWindow(com.sun.jna.platform.win32.WinDef$HWND);

  public abstract boolean GetClassInfoEx(com.sun.jna.platform.win32.WinDef$HINSTANCE, java.lang.String, com.sun.jna.platform.win32.WinUser$WNDCLASSEX);

  public abstract com.sun.jna.platform.win32.WinDef$LRESULT DefWindowProc(com.sun.jna.platform.win32.WinDef$HWND, int, com.sun.jna.platform.win32.WinDef$WPARAM, com.sun.jna.platform.win32.WinDef$LPARAM);

  public abstract com.sun.jna.platform.win32.WinUser$HDEVNOTIFY RegisterDeviceNotification(com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.Structure, int);

  public abstract boolean UnregisterDeviceNotification(com.sun.jna.platform.win32.WinUser$HDEVNOTIFY);

  public abstract int RegisterWindowMessage(java.lang.String);

  public abstract com.sun.jna.platform.win32.WinUser$HMONITOR MonitorFromPoint(com.sun.jna.platform.win32.WinDef$POINT$ByValue, int);

  public abstract com.sun.jna.platform.win32.WinUser$HMONITOR MonitorFromRect(com.sun.jna.platform.win32.WinDef$RECT, int);

  public abstract com.sun.jna.platform.win32.WinUser$HMONITOR MonitorFromWindow(com.sun.jna.platform.win32.WinDef$HWND, int);

  public abstract com.sun.jna.platform.win32.WinDef$BOOL GetMonitorInfo(com.sun.jna.platform.win32.WinUser$HMONITOR, com.sun.jna.platform.win32.WinUser$MONITORINFO);

  public abstract com.sun.jna.platform.win32.WinDef$BOOL GetMonitorInfo(com.sun.jna.platform.win32.WinUser$HMONITOR, com.sun.jna.platform.win32.WinUser$MONITORINFOEX);

  public abstract com.sun.jna.platform.win32.WinDef$BOOL EnumDisplayMonitors(com.sun.jna.platform.win32.WinDef$HDC, com.sun.jna.platform.win32.WinDef$RECT, com.sun.jna.platform.win32.WinUser$MONITORENUMPROC, com.sun.jna.platform.win32.WinDef$LPARAM);

  public abstract com.sun.jna.platform.win32.WinDef$BOOL GetWindowPlacement(com.sun.jna.platform.win32.WinDef$HWND, com.sun.jna.platform.win32.WinUser$WINDOWPLACEMENT);

  public abstract com.sun.jna.platform.win32.WinDef$BOOL SetWindowPlacement(com.sun.jna.platform.win32.WinDef$HWND, com.sun.jna.platform.win32.WinUser$WINDOWPLACEMENT);

  public abstract com.sun.jna.platform.win32.WinDef$BOOL AdjustWindowRect(com.sun.jna.platform.win32.WinDef$RECT, com.sun.jna.platform.win32.WinDef$DWORD, com.sun.jna.platform.win32.WinDef$BOOL);

  public abstract com.sun.jna.platform.win32.WinDef$BOOL AdjustWindowRectEx(com.sun.jna.platform.win32.WinDef$RECT, com.sun.jna.platform.win32.WinDef$DWORD, com.sun.jna.platform.win32.WinDef$BOOL, com.sun.jna.platform.win32.WinDef$DWORD);

  public abstract com.sun.jna.platform.win32.WinDef$BOOL ExitWindowsEx(com.sun.jna.platform.win32.WinDef$UINT, com.sun.jna.platform.win32.WinDef$DWORD);

  public abstract com.sun.jna.platform.win32.WinDef$BOOL LockWorkStation();

  public abstract boolean GetIconInfo(com.sun.jna.platform.win32.WinDef$HICON, com.sun.jna.platform.win32.WinGDI$ICONINFO);

  public abstract com.sun.jna.platform.win32.WinDef$LRESULT SendMessageTimeout(com.sun.jna.platform.win32.WinDef$HWND, int, com.sun.jna.platform.win32.WinDef$WPARAM, com.sun.jna.platform.win32.WinDef$LPARAM, int, int, com.sun.jna.platform.win32.WinDef$DWORDByReference);

  public abstract com.sun.jna.platform.win32.BaseTSD$ULONG_PTR GetClassLongPtr(com.sun.jna.platform.win32.WinDef$HWND, int);

  public abstract int GetRawInputDeviceList(com.sun.jna.platform.win32.WinUser$RAWINPUTDEVICELIST[], com.sun.jna.ptr.IntByReference, int);

  public abstract com.sun.jna.platform.win32.WinDef$HWND GetDesktopWindow();

  public abstract boolean PrintWindow(com.sun.jna.platform.win32.WinDef$HWND, com.sun.jna.platform.win32.WinDef$HDC, int);

  public abstract boolean IsWindowEnabled(com.sun.jna.platform.win32.WinDef$HWND);

  public abstract boolean IsWindow(com.sun.jna.platform.win32.WinDef$HWND);

  public abstract com.sun.jna.platform.win32.WinDef$HWND FindWindowEx(com.sun.jna.platform.win32.WinDef$HWND, com.sun.jna.platform.win32.WinDef$HWND, java.lang.String, java.lang.String);

  public abstract com.sun.jna.platform.win32.WinDef$HWND GetAncestor(com.sun.jna.platform.win32.WinDef$HWND, int);

  public abstract boolean GetCursorPos(com.sun.jna.platform.win32.WinDef$POINT);

  public abstract boolean SetCursorPos(long, long);

  public abstract com.sun.jna.platform.win32.WinNT$HANDLE SetWinEventHook(int, int, com.sun.jna.platform.win32.WinDef$HMODULE, com.sun.jna.platform.win32.WinUser$WinEventProc, int, int, int);

  public abstract boolean UnhookWinEvent(com.sun.jna.platform.win32.WinNT$HANDLE);

  public abstract com.sun.jna.platform.win32.WinDef$HICON CopyIcon(com.sun.jna.platform.win32.WinDef$HICON);

  public abstract int GetClassLong(com.sun.jna.platform.win32.WinDef$HWND, int);

  public abstract int RegisterClipboardFormat(java.lang.String);

  public abstract com.sun.jna.platform.win32.WinDef$HWND GetActiveWindow();

  public abstract com.sun.jna.platform.win32.WinDef$LRESULT SendMessage(com.sun.jna.platform.win32.WinDef$HWND, int, com.sun.jna.platform.win32.WinDef$WPARAM, com.sun.jna.platform.win32.WinDef$LPARAM);

  public abstract int GetKeyboardLayoutList(int, com.sun.jna.platform.win32.WinDef$HKL[]);

  public abstract com.sun.jna.platform.win32.WinDef$HKL GetKeyboardLayout(int);

  public abstract boolean GetKeyboardLayoutName(char[]);

  public abstract short VkKeyScanExA(byte, com.sun.jna.platform.win32.WinDef$HKL);

  public abstract short VkKeyScanExW(char, com.sun.jna.platform.win32.WinDef$HKL);

  public abstract int MapVirtualKeyEx(int, int, com.sun.jna.platform.win32.WinDef$HKL);

  public abstract int ToUnicodeEx(int, int, byte[], char[], int, int, com.sun.jna.platform.win32.WinDef$HKL);

  public abstract int LoadString(com.sun.jna.platform.win32.WinDef$HINSTANCE, int, com.sun.jna.Pointer, int);

  static {};
    Code:
       0: ldc           #1                  // String user32
       2: ldc           #2                  // class com/sun/jna/platform/win32/User32
       4: getstatic     #3                  // Field com/sun/jna/win32/W32APIOptions.DEFAULT_OPTIONS:Ljava/util/Map;
       7: invokestatic  #4                  // Method com/sun/jna/Native.load:(Ljava/lang/String;Ljava/lang/Class;Ljava/util/Map;)Lcom/sun/jna/Library;
      10: checkcast     #2                  // class com/sun/jna/platform/win32/User32
      13: putstatic     #5                  // Field INSTANCE:Lcom/sun/jna/platform/win32/User32;
      16: new           #6                  // class com/sun/jna/platform/win32/WinDef$HWND
      19: dup
      20: bipush        -3
      22: invokestatic  #7                  // Method com/sun/jna/Pointer.createConstant:(I)Lcom/sun/jna/Pointer;
      25: invokespecial #8                  // Method com/sun/jna/platform/win32/WinDef$HWND."<init>":(Lcom/sun/jna/Pointer;)V
      28: putstatic     #9                  // Field HWND_MESSAGE:Lcom/sun/jna/platform/win32/WinDef$HWND;
      31: return
}
