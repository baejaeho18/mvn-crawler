Compiled from "Kernel32.java"
public interface com.sun.jna.platform.win32.Kernel32 extends com.sun.jna.win32.StdCallLibrary,com.sun.jna.platform.win32.WinNT,com.sun.jna.platform.win32.Wincon {
  public static final com.sun.jna.platform.win32.Kernel32 INSTANCE;

  public static final int LOAD_LIBRARY_AS_DATAFILE;

  public static final int MAX_PIPE_NAME_LENGTH;

  public abstract boolean ReadFile(com.sun.jna.platform.win32.WinNT$HANDLE, byte[], int, com.sun.jna.ptr.IntByReference, com.sun.jna.platform.win32.WinBase$OVERLAPPED);

  public abstract com.sun.jna.Pointer LocalFree(com.sun.jna.Pointer);

  public abstract com.sun.jna.Pointer GlobalFree(com.sun.jna.Pointer);

  public abstract com.sun.jna.platform.win32.WinDef$HMODULE GetModuleHandle(java.lang.String);

  public abstract void GetSystemTime(com.sun.jna.platform.win32.WinBase$SYSTEMTIME);

  public abstract boolean SetSystemTime(com.sun.jna.platform.win32.WinBase$SYSTEMTIME);

  public abstract void GetLocalTime(com.sun.jna.platform.win32.WinBase$SYSTEMTIME);

  public abstract boolean SetLocalTime(com.sun.jna.platform.win32.WinBase$SYSTEMTIME);

  public abstract boolean GetSystemTimes(com.sun.jna.platform.win32.WinBase$FILETIME, com.sun.jna.platform.win32.WinBase$FILETIME, com.sun.jna.platform.win32.WinBase$FILETIME);

  public abstract int GetTickCount();

  public abstract long GetTickCount64();

  public abstract int GetCurrentThreadId();

  public abstract com.sun.jna.platform.win32.WinNT$HANDLE GetCurrentThread();

  public abstract int GetCurrentProcessId();

  public abstract com.sun.jna.platform.win32.WinNT$HANDLE GetCurrentProcess();

  public abstract int GetProcessId(com.sun.jna.platform.win32.WinNT$HANDLE);

  public abstract int GetProcessVersion(int);

  public abstract boolean GetExitCodeProcess(com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.ptr.IntByReference);

  public abstract boolean TerminateProcess(com.sun.jna.platform.win32.WinNT$HANDLE, int);

  public abstract int GetLastError();

  public abstract void SetLastError(int);

  public abstract int GetDriveType(java.lang.String);

  public abstract int FormatMessage(int, com.sun.jna.Pointer, int, int, com.sun.jna.ptr.PointerByReference, int, com.sun.jna.Pointer);

  public abstract com.sun.jna.platform.win32.WinNT$HANDLE CreateFile(java.lang.String, int, int, com.sun.jna.platform.win32.WinBase$SECURITY_ATTRIBUTES, int, int, com.sun.jna.platform.win32.WinNT$HANDLE);

  public abstract boolean CopyFile(java.lang.String, java.lang.String, boolean);

  public abstract boolean MoveFile(java.lang.String, java.lang.String);

  public abstract boolean MoveFileEx(java.lang.String, java.lang.String, com.sun.jna.platform.win32.WinDef$DWORD);

  public abstract boolean CreateDirectory(java.lang.String, com.sun.jna.platform.win32.WinBase$SECURITY_ATTRIBUTES);

  public abstract com.sun.jna.platform.win32.WinNT$HANDLE CreateIoCompletionPort(com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.Pointer, int);

  public abstract boolean GetQueuedCompletionStatus(com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.ptr.IntByReference, com.sun.jna.platform.win32.BaseTSD$ULONG_PTRByReference, com.sun.jna.ptr.PointerByReference, int);

  public abstract boolean PostQueuedCompletionStatus(com.sun.jna.platform.win32.WinNT$HANDLE, int, com.sun.jna.Pointer, com.sun.jna.platform.win32.WinBase$OVERLAPPED);

  public abstract int WaitForSingleObject(com.sun.jna.platform.win32.WinNT$HANDLE, int);

  public abstract int WaitForMultipleObjects(int, com.sun.jna.platform.win32.WinNT$HANDLE[], boolean, int);

  public abstract boolean DuplicateHandle(com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.platform.win32.WinNT$HANDLEByReference, int, boolean, int);

  public abstract boolean CloseHandle(com.sun.jna.platform.win32.WinNT$HANDLE);

  public abstract boolean ReadDirectoryChangesW(com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.platform.win32.WinNT$FILE_NOTIFY_INFORMATION, int, boolean, int, com.sun.jna.ptr.IntByReference, com.sun.jna.platform.win32.WinBase$OVERLAPPED, com.sun.jna.platform.win32.WinNT$OVERLAPPED_COMPLETION_ROUTINE);

  public abstract int GetShortPathName(java.lang.String, char[], int);

  public abstract com.sun.jna.Pointer LocalAlloc(int, int);

  public abstract boolean WriteFile(com.sun.jna.platform.win32.WinNT$HANDLE, byte[], int, com.sun.jna.ptr.IntByReference, com.sun.jna.platform.win32.WinBase$OVERLAPPED);

  public abstract boolean FlushFileBuffers(com.sun.jna.platform.win32.WinNT$HANDLE);

  public abstract com.sun.jna.platform.win32.WinNT$HANDLE CreateEvent(com.sun.jna.platform.win32.WinBase$SECURITY_ATTRIBUTES, boolean, boolean, java.lang.String);

  public abstract com.sun.jna.platform.win32.WinNT$HANDLE OpenEvent(int, boolean, java.lang.String);

  public abstract boolean SetEvent(com.sun.jna.platform.win32.WinNT$HANDLE);

  public abstract boolean ResetEvent(com.sun.jna.platform.win32.WinNT$HANDLE);

  public abstract boolean PulseEvent(com.sun.jna.platform.win32.WinNT$HANDLE);

  public abstract com.sun.jna.platform.win32.WinNT$HANDLE CreateFileMapping(com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.platform.win32.WinBase$SECURITY_ATTRIBUTES, int, int, int, java.lang.String);

  public abstract com.sun.jna.Pointer MapViewOfFile(com.sun.jna.platform.win32.WinNT$HANDLE, int, int, int, int);

  public abstract boolean UnmapViewOfFile(com.sun.jna.Pointer);

  public abstract boolean GetComputerName(char[], com.sun.jna.ptr.IntByReference);

  public abstract boolean GetComputerNameEx(int, char[], com.sun.jna.ptr.IntByReference);

  public abstract com.sun.jna.platform.win32.WinNT$HANDLE OpenThread(int, boolean, int);

  public abstract boolean CreateProcess(java.lang.String, java.lang.String, com.sun.jna.platform.win32.WinBase$SECURITY_ATTRIBUTES, com.sun.jna.platform.win32.WinBase$SECURITY_ATTRIBUTES, boolean, com.sun.jna.platform.win32.WinDef$DWORD, com.sun.jna.Pointer, java.lang.String, com.sun.jna.platform.win32.WinBase$STARTUPINFO, com.sun.jna.platform.win32.WinBase$PROCESS_INFORMATION);

  public abstract boolean CreateProcessW(java.lang.String, char[], com.sun.jna.platform.win32.WinBase$SECURITY_ATTRIBUTES, com.sun.jna.platform.win32.WinBase$SECURITY_ATTRIBUTES, boolean, com.sun.jna.platform.win32.WinDef$DWORD, com.sun.jna.Pointer, java.lang.String, com.sun.jna.platform.win32.WinBase$STARTUPINFO, com.sun.jna.platform.win32.WinBase$PROCESS_INFORMATION);

  public abstract com.sun.jna.platform.win32.WinNT$HANDLE OpenProcess(int, boolean, int);

  public abstract boolean QueryFullProcessImageName(com.sun.jna.platform.win32.WinNT$HANDLE, int, char[], com.sun.jna.ptr.IntByReference);

  public abstract com.sun.jna.platform.win32.WinDef$DWORD GetTempPath(com.sun.jna.platform.win32.WinDef$DWORD, char[]);

  public abstract com.sun.jna.platform.win32.WinDef$DWORD GetVersion();

  public abstract boolean GetVersionEx(com.sun.jna.platform.win32.WinNT$OSVERSIONINFO);

  public abstract boolean GetVersionEx(com.sun.jna.platform.win32.WinNT$OSVERSIONINFOEX);

  public abstract boolean VerifyVersionInfoW(com.sun.jna.platform.win32.WinNT$OSVERSIONINFOEX, int, long);

  public abstract long VerSetConditionMask(long, int, byte);

  public abstract void GetSystemInfo(com.sun.jna.platform.win32.WinBase$SYSTEM_INFO);

  public abstract void GetNativeSystemInfo(com.sun.jna.platform.win32.WinBase$SYSTEM_INFO);

  public abstract boolean IsWow64Process(com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.ptr.IntByReference);

  public abstract boolean GetLogicalProcessorInformation(com.sun.jna.Pointer, com.sun.jna.platform.win32.WinDef$DWORDByReference);

  public abstract boolean GetLogicalProcessorInformationEx(int, com.sun.jna.Pointer, com.sun.jna.platform.win32.WinDef$DWORDByReference);

  public abstract boolean GlobalMemoryStatusEx(com.sun.jna.platform.win32.WinBase$MEMORYSTATUSEX);

  public abstract boolean GetFileInformationByHandleEx(com.sun.jna.platform.win32.WinNT$HANDLE, int, com.sun.jna.Pointer, com.sun.jna.platform.win32.WinDef$DWORD);

  public abstract boolean SetFileInformationByHandle(com.sun.jna.platform.win32.WinNT$HANDLE, int, com.sun.jna.Pointer, com.sun.jna.platform.win32.WinDef$DWORD);

  public abstract boolean GetFileTime(com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.platform.win32.WinBase$FILETIME, com.sun.jna.platform.win32.WinBase$FILETIME, com.sun.jna.platform.win32.WinBase$FILETIME);

  public abstract int SetFileTime(com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.platform.win32.WinBase$FILETIME, com.sun.jna.platform.win32.WinBase$FILETIME, com.sun.jna.platform.win32.WinBase$FILETIME);

  public abstract boolean SetFileAttributes(java.lang.String, com.sun.jna.platform.win32.WinDef$DWORD);

  public abstract com.sun.jna.platform.win32.WinDef$DWORD GetLogicalDriveStrings(com.sun.jna.platform.win32.WinDef$DWORD, char[]);

  public abstract boolean GetDiskFreeSpace(java.lang.String, com.sun.jna.platform.win32.WinDef$DWORDByReference, com.sun.jna.platform.win32.WinDef$DWORDByReference, com.sun.jna.platform.win32.WinDef$DWORDByReference, com.sun.jna.platform.win32.WinDef$DWORDByReference);

  public abstract boolean GetDiskFreeSpaceEx(java.lang.String, com.sun.jna.platform.win32.WinNT$LARGE_INTEGER, com.sun.jna.platform.win32.WinNT$LARGE_INTEGER, com.sun.jna.platform.win32.WinNT$LARGE_INTEGER);

  public abstract boolean DeleteFile(java.lang.String);

  public abstract boolean CreatePipe(com.sun.jna.platform.win32.WinNT$HANDLEByReference, com.sun.jna.platform.win32.WinNT$HANDLEByReference, com.sun.jna.platform.win32.WinBase$SECURITY_ATTRIBUTES, int);

  public abstract boolean CallNamedPipe(java.lang.String, byte[], int, byte[], int, com.sun.jna.ptr.IntByReference, int);

  public abstract boolean ConnectNamedPipe(com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.platform.win32.WinBase$OVERLAPPED);

  public abstract com.sun.jna.platform.win32.WinNT$HANDLE CreateNamedPipe(java.lang.String, int, int, int, int, int, int, com.sun.jna.platform.win32.WinBase$SECURITY_ATTRIBUTES);

  public abstract boolean DisconnectNamedPipe(com.sun.jna.platform.win32.WinNT$HANDLE);

  public abstract boolean GetNamedPipeClientComputerName(com.sun.jna.platform.win32.WinNT$HANDLE, char[], int);

  public abstract boolean GetNamedPipeClientProcessId(com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.platform.win32.WinDef$ULONGByReference);

  public abstract boolean GetNamedPipeClientSessionId(com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.platform.win32.WinDef$ULONGByReference);

  public abstract boolean GetNamedPipeHandleState(com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, char[], int);

  public abstract boolean GetNamedPipeInfo(com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference);

  public abstract boolean GetNamedPipeServerProcessId(com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.platform.win32.WinDef$ULONGByReference);

  public abstract boolean GetNamedPipeServerSessionId(com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.platform.win32.WinDef$ULONGByReference);

  public abstract boolean PeekNamedPipe(com.sun.jna.platform.win32.WinNT$HANDLE, byte[], int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference);

  public abstract boolean SetNamedPipeHandleState(com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference);

  public abstract boolean TransactNamedPipe(com.sun.jna.platform.win32.WinNT$HANDLE, byte[], int, byte[], int, com.sun.jna.ptr.IntByReference, com.sun.jna.platform.win32.WinBase$OVERLAPPED);

  public abstract boolean WaitNamedPipe(java.lang.String, int);

  public abstract boolean SetHandleInformation(com.sun.jna.platform.win32.WinNT$HANDLE, int, int);

  public abstract int GetFileAttributes(java.lang.String);

  public abstract int GetFileType(com.sun.jna.platform.win32.WinNT$HANDLE);

  public abstract boolean DeviceIoControl(com.sun.jna.platform.win32.WinNT$HANDLE, int, com.sun.jna.Pointer, int, com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference, com.sun.jna.Pointer);

  public abstract com.sun.jna.platform.win32.WinNT$HANDLE CreateToolhelp32Snapshot(com.sun.jna.platform.win32.WinDef$DWORD, com.sun.jna.platform.win32.WinDef$DWORD);

  public abstract boolean Process32First(com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.platform.win32.Tlhelp32$PROCESSENTRY32);

  public abstract boolean Process32Next(com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.platform.win32.Tlhelp32$PROCESSENTRY32);

  public abstract boolean SetEnvironmentVariable(java.lang.String, java.lang.String);

  public abstract int GetEnvironmentVariable(java.lang.String, char[], int);

  public abstract com.sun.jna.Pointer GetEnvironmentStrings();

  public abstract boolean FreeEnvironmentStrings(com.sun.jna.Pointer);

  public abstract com.sun.jna.platform.win32.WinDef$LCID GetSystemDefaultLCID();

  public abstract com.sun.jna.platform.win32.WinDef$LCID GetUserDefaultLCID();

  public abstract int GetPrivateProfileInt(java.lang.String, java.lang.String, int, java.lang.String);

  public abstract com.sun.jna.platform.win32.WinDef$DWORD GetPrivateProfileString(java.lang.String, java.lang.String, java.lang.String, char[], com.sun.jna.platform.win32.WinDef$DWORD, java.lang.String);

  public abstract boolean WritePrivateProfileString(java.lang.String, java.lang.String, java.lang.String, java.lang.String);

  public abstract com.sun.jna.platform.win32.WinDef$DWORD GetPrivateProfileSection(java.lang.String, char[], com.sun.jna.platform.win32.WinDef$DWORD, java.lang.String);

  public abstract com.sun.jna.platform.win32.WinDef$DWORD GetPrivateProfileSectionNames(char[], com.sun.jna.platform.win32.WinDef$DWORD, java.lang.String);

  public abstract boolean WritePrivateProfileSection(java.lang.String, java.lang.String, java.lang.String);

  public abstract boolean FileTimeToLocalFileTime(com.sun.jna.platform.win32.WinBase$FILETIME, com.sun.jna.platform.win32.WinBase$FILETIME);

  public abstract boolean SystemTimeToTzSpecificLocalTime(com.sun.jna.platform.win32.WinBase$TIME_ZONE_INFORMATION, com.sun.jna.platform.win32.WinBase$SYSTEMTIME, com.sun.jna.platform.win32.WinBase$SYSTEMTIME);

  public abstract boolean SystemTimeToFileTime(com.sun.jna.platform.win32.WinBase$SYSTEMTIME, com.sun.jna.platform.win32.WinBase$FILETIME);

  public abstract boolean FileTimeToSystemTime(com.sun.jna.platform.win32.WinBase$FILETIME, com.sun.jna.platform.win32.WinBase$SYSTEMTIME);

  public abstract com.sun.jna.platform.win32.WinNT$HANDLE CreateRemoteThread(com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.platform.win32.WinBase$SECURITY_ATTRIBUTES, int, com.sun.jna.platform.win32.WinBase$FOREIGN_THREAD_START_ROUTINE, com.sun.jna.Pointer, com.sun.jna.platform.win32.WinDef$DWORD, com.sun.jna.Pointer);

  public abstract com.sun.jna.platform.win32.WinNT$HANDLE CreateRemoteThread(com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.platform.win32.WinBase$SECURITY_ATTRIBUTES, int, com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.platform.win32.WinDef$DWORDByReference);

  public abstract boolean WriteProcessMemory(com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference);

  public abstract boolean ReadProcessMemory(com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference);

  public abstract com.sun.jna.platform.win32.BaseTSD$SIZE_T VirtualQueryEx(com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.Pointer, com.sun.jna.platform.win32.WinNT$MEMORY_BASIC_INFORMATION, com.sun.jna.platform.win32.BaseTSD$SIZE_T);

  public abstract boolean DefineDosDevice(int, java.lang.String, java.lang.String);

  public abstract int QueryDosDevice(java.lang.String, char[], int);

  public abstract com.sun.jna.platform.win32.WinNT$HANDLE FindFirstFile(java.lang.String, com.sun.jna.Pointer);

  public abstract com.sun.jna.platform.win32.WinNT$HANDLE FindFirstFileEx(java.lang.String, int, com.sun.jna.Pointer, int, com.sun.jna.Pointer, com.sun.jna.platform.win32.WinDef$DWORD);

  public abstract boolean FindNextFile(com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.Pointer);

  public abstract boolean FindClose(com.sun.jna.platform.win32.WinNT$HANDLE);

  public abstract com.sun.jna.platform.win32.WinNT$HANDLE FindFirstVolumeMountPoint(java.lang.String, char[], int);

  public abstract boolean FindNextVolumeMountPoint(com.sun.jna.platform.win32.WinNT$HANDLE, char[], int);

  public abstract boolean FindVolumeMountPointClose(com.sun.jna.platform.win32.WinNT$HANDLE);

  public abstract boolean GetVolumeNameForVolumeMountPoint(java.lang.String, char[], int);

  public abstract boolean SetVolumeLabel(java.lang.String, java.lang.String);

  public abstract boolean SetVolumeMountPoint(java.lang.String, java.lang.String);

  public abstract boolean DeleteVolumeMountPoint(java.lang.String);

  public abstract boolean GetVolumeInformation(java.lang.String, char[], int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, char[], int);

  public abstract boolean GetVolumePathName(java.lang.String, char[], int);

  public abstract boolean GetVolumePathNamesForVolumeName(java.lang.String, char[], int, com.sun.jna.ptr.IntByReference);

  public abstract com.sun.jna.platform.win32.WinNT$HANDLE FindFirstVolume(char[], int);

  public abstract boolean FindNextVolume(com.sun.jna.platform.win32.WinNT$HANDLE, char[], int);

  public abstract boolean FindVolumeClose(com.sun.jna.platform.win32.WinNT$HANDLE);

  public abstract boolean GetCommState(com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.platform.win32.WinBase$DCB);

  public abstract boolean GetCommTimeouts(com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.platform.win32.WinBase$COMMTIMEOUTS);

  public abstract boolean SetCommState(com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.platform.win32.WinBase$DCB);

  public abstract boolean SetCommTimeouts(com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.platform.win32.WinBase$COMMTIMEOUTS);

  public abstract boolean ProcessIdToSessionId(int, com.sun.jna.ptr.IntByReference);

  public abstract com.sun.jna.platform.win32.WinDef$HMODULE LoadLibraryEx(java.lang.String, com.sun.jna.platform.win32.WinNT$HANDLE, int);

  public abstract com.sun.jna.platform.win32.WinDef$HRSRC FindResource(com.sun.jna.platform.win32.WinDef$HMODULE, com.sun.jna.Pointer, com.sun.jna.Pointer);

  public abstract com.sun.jna.platform.win32.WinNT$HANDLE LoadResource(com.sun.jna.platform.win32.WinDef$HMODULE, com.sun.jna.platform.win32.WinDef$HRSRC);

  public abstract com.sun.jna.Pointer LockResource(com.sun.jna.platform.win32.WinNT$HANDLE);

  public abstract int SizeofResource(com.sun.jna.platform.win32.WinDef$HMODULE, com.sun.jna.platform.win32.WinNT$HANDLE);

  public abstract boolean FreeLibrary(com.sun.jna.platform.win32.WinDef$HMODULE);

  public abstract boolean EnumResourceTypes(com.sun.jna.platform.win32.WinDef$HMODULE, com.sun.jna.platform.win32.WinBase$EnumResTypeProc, com.sun.jna.Pointer);

  public abstract boolean EnumResourceNames(com.sun.jna.platform.win32.WinDef$HMODULE, com.sun.jna.Pointer, com.sun.jna.platform.win32.WinBase$EnumResNameProc, com.sun.jna.Pointer);

  public abstract boolean Module32FirstW(com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.platform.win32.Tlhelp32$MODULEENTRY32W);

  public abstract boolean Module32NextW(com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.platform.win32.Tlhelp32$MODULEENTRY32W);

  public abstract int SetErrorMode(int);

  public abstract com.sun.jna.Pointer GetProcAddress(com.sun.jna.platform.win32.WinDef$HMODULE, int) throws com.sun.jna.LastErrorException;

  public abstract int SetThreadExecutionState(int);

  public abstract int ExpandEnvironmentStrings(java.lang.String, com.sun.jna.Pointer, int);

  public abstract boolean GetProcessTimes(com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.platform.win32.WinBase$FILETIME, com.sun.jna.platform.win32.WinBase$FILETIME, com.sun.jna.platform.win32.WinBase$FILETIME, com.sun.jna.platform.win32.WinBase$FILETIME);

  public abstract boolean GetProcessIoCounters(com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.platform.win32.WinNT$IO_COUNTERS);

  public abstract com.sun.jna.platform.win32.WinNT$HANDLE CreateMutex(com.sun.jna.platform.win32.WinBase$SECURITY_ATTRIBUTES, boolean, java.lang.String);

  public abstract com.sun.jna.platform.win32.WinNT$HANDLE OpenMutex(int, boolean, java.lang.String);

  public abstract boolean ReleaseMutex(com.sun.jna.platform.win32.WinNT$HANDLE);

  public abstract void ExitProcess(int);

  public abstract com.sun.jna.Pointer VirtualAllocEx(com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.Pointer, com.sun.jna.platform.win32.BaseTSD$SIZE_T, int, int);

  public abstract boolean GetExitCodeThread(com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.ptr.IntByReference);

  public abstract boolean VirtualFreeEx(com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.Pointer, com.sun.jna.platform.win32.BaseTSD$SIZE_T, int);

  static {};
    Code:
       0: ldc           #1                  // String kernel32
       2: ldc           #2                  // class com/sun/jna/platform/win32/Kernel32
       4: getstatic     #3                  // Field com/sun/jna/win32/W32APIOptions.DEFAULT_OPTIONS:Ljava/util/Map;
       7: invokestatic  #4                  // Method com/sun/jna/Native.load:(Ljava/lang/String;Ljava/lang/Class;Ljava/util/Map;)Lcom/sun/jna/Library;
      10: checkcast     #2                  // class com/sun/jna/platform/win32/Kernel32
      13: putstatic     #5                  // Field INSTANCE:Lcom/sun/jna/platform/win32/Kernel32;
      16: return
}
