Compiled from "DragHandler.java"
public abstract class com.sun.jna.platform.dnd.DragHandler implements java.awt.dnd.DragSourceListener,java.awt.dnd.DragSourceMotionListener,java.awt.dnd.DragGestureListener {
  private static final java.util.logging.Logger LOG;

  public static final java.awt.Dimension MAX_GHOST_SIZE;

  public static final float DEFAULT_GHOST_ALPHA;

  public static final int UNKNOWN_MODIFIERS;

  public static final java.awt.datatransfer.Transferable UNKNOWN_TRANSFERABLE;

  protected static final int MOVE;

  protected static final int COPY;

  protected static final int LINK;

  protected static final int NONE;

  static final int MOVE_MASK;

  static final boolean OSX;

  static final int COPY_MASK;

  static final int LINK_MASK;

  static final int KEY_MASK;

  private static int modifiers;

  private static java.awt.datatransfer.Transferable transferable;

  private int supportedActions;

  private boolean fixCursor;

  private java.awt.Component dragSource;

  private com.sun.jna.platform.dnd.GhostedDragImage ghost;

  private java.awt.Point imageOffset;

  private java.awt.Dimension maxGhostSize;

  private float ghostAlpha;

  private java.lang.String lastAction;

  private boolean moved;

  static int getModifiers();
    Code:
       0: getstatic     #3                  // Field modifiers:I
       3: ireturn

  public static java.awt.datatransfer.Transferable getTransferable(java.awt.dnd.DropTargetEvent);
    Code:
       0: aload_0
       1: instanceof    #4                  // class java/awt/dnd/DropTargetDragEvent
       4: ifeq          19
       7: aload_0
       8: checkcast     #4                  // class java/awt/dnd/DropTargetDragEvent
      11: invokevirtual #5                  // Method java/awt/dnd/DropTargetDragEvent.getTransferable:()Ljava/awt/datatransfer/Transferable;
      14: areturn
      15: astore_1
      16: goto          34
      19: aload_0
      20: instanceof    #7                  // class java/awt/dnd/DropTargetDropEvent
      23: ifeq          34
      26: aload_0
      27: checkcast     #7                  // class java/awt/dnd/DropTargetDropEvent
      30: invokevirtual #8                  // Method java/awt/dnd/DropTargetDropEvent.getTransferable:()Ljava/awt/datatransfer/Transferable;
      33: areturn
      34: getstatic     #9                  // Field transferable:Ljava/awt/datatransfer/Transferable;
      37: areturn
    Exception table:
       from    to  target type
           7    14    15   Class java/lang/Exception

  protected com.sun.jna.platform.dnd.DragHandler(java.awt.Component, int);
    Code:
       0: aload_0
       1: invokespecial #10                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #11                 // Field fixCursor:Z
       9: aload_0
      10: getstatic     #12                 // Field MAX_GHOST_SIZE:Ljava/awt/Dimension;
      13: putfield      #13                 // Field maxGhostSize:Ljava/awt/Dimension;
      16: aload_0
      17: ldc           #15                 // float 0.5f
      19: putfield      #16                 // Field ghostAlpha:F
      22: aload_0
      23: aload_1
      24: putfield      #17                 // Field dragSource:Ljava/awt/Component;
      27: aload_0
      28: iload_2
      29: putfield      #18                 // Field supportedActions:I
      32: ldc           #19                 // String DragHandler.alpha
      34: invokestatic  #20                 // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
      37: astore_3
      38: aload_3
      39: ifnull        55
      42: aload_0
      43: aload_3
      44: invokestatic  #21                 // Method java/lang/Float.parseFloat:(Ljava/lang/String;)F
      47: putfield      #16                 // Field ghostAlpha:F
      50: goto          55
      53: astore        4
      55: ldc           #23                 // String DragHandler.maxDragImageSize
      57: invokestatic  #20                 // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
      60: astore        4
      62: aload         4
      64: ifnull        113
      67: aload         4
      69: ldc           #24                 // String x
      71: invokevirtual #25                 // Method java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;
      74: astore        5
      76: aload         5
      78: arraylength
      79: iconst_2
      80: if_icmpne     113
      83: aload_0
      84: new           #26                 // class java/awt/Dimension
      87: dup
      88: aload         5
      90: iconst_0
      91: aaload
      92: invokestatic  #27                 // Method java/lang/Integer.parseInt:(Ljava/lang/String;)I
      95: aload         5
      97: iconst_1
      98: aaload
      99: invokestatic  #27                 // Method java/lang/Integer.parseInt:(Ljava/lang/String;)I
     102: invokespecial #28                 // Method java/awt/Dimension."<init>":(II)V
     105: putfield      #13                 // Field maxGhostSize:Ljava/awt/Dimension;
     108: goto          113
     111: astore        6
     113: goto          117
     116: astore_3
     117: aload_0
     118: aload_1
     119: invokespecial #30                 // Method disableSwingDragSupport:(Ljava/awt/Component;)V
     122: invokestatic  #31                 // Method java/awt/dnd/DragSource.getDefaultDragSource:()Ljava/awt/dnd/DragSource;
     125: astore_3
     126: aload_3
     127: aload_1
     128: aload_0
     129: getfield      #18                 // Field supportedActions:I
     132: aload_0
     133: invokevirtual #32                 // Method java/awt/dnd/DragSource.createDefaultDragGestureRecognizer:(Ljava/awt/Component;ILjava/awt/dnd/DragGestureListener;)Ljava/awt/dnd/DragGestureRecognizer;
     136: pop
     137: return
    Exception table:
       from    to  target type
          42    50    53   Class java/lang/NumberFormatException
          83   108   111   Class java/lang/NumberFormatException
          32   113   116   Class java/lang/SecurityException

  private void disableSwingDragSupport(java.awt.Component);
    Code:
       0: aload_1
       1: instanceof    #33                 // class javax/swing/JTree
       4: ifeq          18
       7: aload_1
       8: checkcast     #33                 // class javax/swing/JTree
      11: iconst_0
      12: invokevirtual #34                 // Method javax/swing/JTree.setDragEnabled:(Z)V
      15: goto          105
      18: aload_1
      19: instanceof    #35                 // class javax/swing/JList
      22: ifeq          36
      25: aload_1
      26: checkcast     #35                 // class javax/swing/JList
      29: iconst_0
      30: invokevirtual #36                 // Method javax/swing/JList.setDragEnabled:(Z)V
      33: goto          105
      36: aload_1
      37: instanceof    #37                 // class javax/swing/JTable
      40: ifeq          54
      43: aload_1
      44: checkcast     #37                 // class javax/swing/JTable
      47: iconst_0
      48: invokevirtual #38                 // Method javax/swing/JTable.setDragEnabled:(Z)V
      51: goto          105
      54: aload_1
      55: instanceof    #39                 // class javax/swing/text/JTextComponent
      58: ifeq          72
      61: aload_1
      62: checkcast     #39                 // class javax/swing/text/JTextComponent
      65: iconst_0
      66: invokevirtual #40                 // Method javax/swing/text/JTextComponent.setDragEnabled:(Z)V
      69: goto          105
      72: aload_1
      73: instanceof    #41                 // class javax/swing/JColorChooser
      76: ifeq          90
      79: aload_1
      80: checkcast     #41                 // class javax/swing/JColorChooser
      83: iconst_0
      84: invokevirtual #42                 // Method javax/swing/JColorChooser.setDragEnabled:(Z)V
      87: goto          105
      90: aload_1
      91: instanceof    #43                 // class javax/swing/JFileChooser
      94: ifeq          105
      97: aload_1
      98: checkcast     #43                 // class javax/swing/JFileChooser
     101: iconst_0
     102: invokevirtual #44                 // Method javax/swing/JFileChooser.setDragEnabled:(Z)V
     105: return

  protected boolean canDrag(java.awt.dnd.DragGestureEvent);
    Code:
       0: aload_1
       1: invokevirtual #45                 // Method java/awt/dnd/DragGestureEvent.getTriggerEvent:()Ljava/awt/event/InputEvent;
       4: invokevirtual #46                 // Method java/awt/event/InputEvent.getModifiersEx:()I
       7: sipush        9152
      10: iand
      11: istore_2
      12: iload_2
      13: bipush        64
      15: if_icmpne     33
      18: aload_0
      19: getfield      #18                 // Field supportedActions:I
      22: iconst_2
      23: iand
      24: ifeq          31
      27: iconst_1
      28: goto          32
      31: iconst_0
      32: ireturn
      33: iload_2
      34: getstatic     #47                 // Field COPY_MASK:I
      37: if_icmpne     55
      40: aload_0
      41: getfield      #18                 // Field supportedActions:I
      44: iconst_1
      45: iand
      46: ifeq          53
      49: iconst_1
      50: goto          54
      53: iconst_0
      54: ireturn
      55: iload_2
      56: getstatic     #48                 // Field LINK_MASK:I
      59: if_icmpne     78
      62: aload_0
      63: getfield      #18                 // Field supportedActions:I
      66: ldc           #49                 // int 1073741824
      68: iand
      69: ifeq          76
      72: iconst_1
      73: goto          77
      76: iconst_0
      77: ireturn
      78: iconst_1
      79: ireturn

  protected void setModifiers(int);
    Code:
       0: iload_1
       1: putstatic     #3                  // Field modifiers:I
       4: return

  protected abstract java.awt.datatransfer.Transferable getTransferable(java.awt.dnd.DragGestureEvent);

  protected javax.swing.Icon getDragIcon(java.awt.dnd.DragGestureEvent, java.awt.Point);
    Code:
       0: aconst_null
       1: areturn

  protected void dragStarted(java.awt.dnd.DragGestureEvent);
    Code:
       0: return

  public void dragGestureRecognized(java.awt.dnd.DragGestureEvent);
    Code:
       0: aload_1
       1: invokevirtual #50                 // Method java/awt/dnd/DragGestureEvent.getDragAction:()I
       4: aload_0
       5: getfield      #18                 // Field supportedActions:I
       8: iand
       9: ifeq          302
      12: aload_0
      13: aload_1
      14: invokevirtual #51                 // Method canDrag:(Ljava/awt/dnd/DragGestureEvent;)Z
      17: ifeq          302
      20: aload_0
      21: aload_1
      22: invokevirtual #45                 // Method java/awt/dnd/DragGestureEvent.getTriggerEvent:()Ljava/awt/event/InputEvent;
      25: invokevirtual #46                 // Method java/awt/event/InputEvent.getModifiersEx:()I
      28: sipush        9152
      31: iand
      32: invokevirtual #52                 // Method setModifiers:(I)V
      35: aload_0
      36: aload_1
      37: invokevirtual #53                 // Method getTransferable:(Ljava/awt/dnd/DragGestureEvent;)Ljava/awt/datatransfer/Transferable;
      40: astore_2
      41: aload_2
      42: ifnonnull     46
      45: return
      46: new           #54                 // class java/awt/Point
      49: dup
      50: iconst_0
      51: iconst_0
      52: invokespecial #55                 // Method java/awt/Point."<init>":(II)V
      55: astore_3
      56: aload_0
      57: aload_1
      58: aload_3
      59: invokevirtual #56                 // Method getDragIcon:(Ljava/awt/dnd/DragGestureEvent;Ljava/awt/Point;)Ljavax/swing/Icon;
      62: astore        4
      64: aload_1
      65: invokevirtual #57                 // Method java/awt/dnd/DragGestureEvent.getDragOrigin:()Ljava/awt/Point;
      68: astore        5
      70: aload_0
      71: new           #54                 // class java/awt/Point
      74: dup
      75: aload_3
      76: getfield      #58                 // Field java/awt/Point.x:I
      79: aload         5
      81: getfield      #58                 // Field java/awt/Point.x:I
      84: isub
      85: aload_3
      86: getfield      #59                 // Field java/awt/Point.y:I
      89: aload         5
      91: getfield      #59                 // Field java/awt/Point.y:I
      94: isub
      95: invokespecial #55                 // Method java/awt/Point."<init>":(II)V
      98: putfield      #60                 // Field imageOffset:Ljava/awt/Point;
     101: aload_0
     102: aload         4
     104: aload_0
     105: getfield      #60                 // Field imageOffset:Ljava/awt/Point;
     108: invokevirtual #61                 // Method scaleDragIcon:(Ljavax/swing/Icon;Ljava/awt/Point;)Ljavax/swing/Icon;
     111: astore        6
     113: aconst_null
     114: astore        7
     116: aload         6
     118: ifnull        159
     121: invokestatic  #62                 // Method java/awt/dnd/DragSource.isDragImageSupported:()Z
     124: ifeq          159
     127: aload_1
     128: invokevirtual #63                 // Method java/awt/dnd/DragGestureEvent.getComponent:()Ljava/awt/Component;
     131: invokevirtual #64                 // Method java/awt/Component.getGraphicsConfiguration:()Ljava/awt/GraphicsConfiguration;
     134: astore        8
     136: aload_1
     137: aload         7
     139: aload_0
     140: aload         8
     142: aload         6
     144: invokevirtual #65                 // Method createDragImage:(Ljava/awt/GraphicsConfiguration;Ljavax/swing/Icon;)Ljava/awt/Image;
     147: aload_0
     148: getfield      #60                 // Field imageOffset:Ljava/awt/Point;
     151: aload_2
     152: aload_0
     153: invokevirtual #66                 // Method java/awt/dnd/DragGestureEvent.startDrag:(Ljava/awt/Cursor;Ljava/awt/Image;Ljava/awt/Point;Ljava/awt/datatransfer/Transferable;Ljava/awt/dnd/DragSourceListener;)V
     156: goto          257
     159: aload         6
     161: ifnull        249
     164: aload_0
     165: getfield      #17                 // Field dragSource:Ljava/awt/Component;
     168: invokevirtual #67                 // Method java/awt/Component.getLocationOnScreen:()Ljava/awt/Point;
     171: astore        8
     173: aload         8
     175: aload         5
     177: getfield      #58                 // Field java/awt/Point.x:I
     180: aload         5
     182: getfield      #59                 // Field java/awt/Point.y:I
     185: invokevirtual #68                 // Method java/awt/Point.translate:(II)V
     188: new           #54                 // class java/awt/Point
     191: dup
     192: aload_0
     193: getfield      #60                 // Field imageOffset:Ljava/awt/Point;
     196: getfield      #58                 // Field java/awt/Point.x:I
     199: ineg
     200: aload_0
     201: getfield      #60                 // Field imageOffset:Ljava/awt/Point;
     204: getfield      #59                 // Field java/awt/Point.y:I
     207: ineg
     208: invokespecial #55                 // Method java/awt/Point."<init>":(II)V
     211: astore        9
     213: aload_0
     214: new           #69                 // class com/sun/jna/platform/dnd/GhostedDragImage
     217: dup
     218: aload_0
     219: getfield      #17                 // Field dragSource:Ljava/awt/Component;
     222: aload         6
     224: aload_0
     225: aload         8
     227: invokespecial #70                 // Method getImageLocation:(Ljava/awt/Point;)Ljava/awt/Point;
     230: aload         9
     232: invokespecial #71                 // Method com/sun/jna/platform/dnd/GhostedDragImage."<init>":(Ljava/awt/Component;Ljavax/swing/Icon;Ljava/awt/Point;Ljava/awt/Point;)V
     235: putfield      #72                 // Field ghost:Lcom/sun/jna/platform/dnd/GhostedDragImage;
     238: aload_0
     239: getfield      #72                 // Field ghost:Lcom/sun/jna/platform/dnd/GhostedDragImage;
     242: aload_0
     243: getfield      #16                 // Field ghostAlpha:F
     246: invokevirtual #73                 // Method com/sun/jna/platform/dnd/GhostedDragImage.setAlpha:(F)V
     249: aload_1
     250: aload         7
     252: aload_2
     253: aload_0
     254: invokevirtual #74                 // Method java/awt/dnd/DragGestureEvent.startDrag:(Ljava/awt/Cursor;Ljava/awt/datatransfer/Transferable;Ljava/awt/dnd/DragSourceListener;)V
     257: aload_0
     258: aload_1
     259: invokevirtual #75                 // Method dragStarted:(Ljava/awt/dnd/DragGestureEvent;)V
     262: aload_0
     263: iconst_0
     264: putfield      #76                 // Field moved:Z
     267: aload_1
     268: invokevirtual #77                 // Method java/awt/dnd/DragGestureEvent.getDragSource:()Ljava/awt/dnd/DragSource;
     271: aload_0
     272: invokevirtual #78                 // Method java/awt/dnd/DragSource.addDragSourceMotionListener:(Ljava/awt/dnd/DragSourceMotionListener;)V
     275: aload_2
     276: putstatic     #9                  // Field transferable:Ljava/awt/datatransfer/Transferable;
     279: goto          302
     282: astore_3
     283: aload_0
     284: getfield      #72                 // Field ghost:Lcom/sun/jna/platform/dnd/GhostedDragImage;
     287: ifnull        302
     290: aload_0
     291: getfield      #72                 // Field ghost:Lcom/sun/jna/platform/dnd/GhostedDragImage;
     294: invokevirtual #80                 // Method com/sun/jna/platform/dnd/GhostedDragImage.dispose:()V
     297: aload_0
     298: aconst_null
     299: putfield      #72                 // Field ghost:Lcom/sun/jna/platform/dnd/GhostedDragImage;
     302: return
    Exception table:
       from    to  target type
          46   279   282   Class java/awt/dnd/InvalidDnDOperationException

  protected javax.swing.Icon scaleDragIcon(javax.swing.Icon, java.awt.Point);
    Code:
       0: aload_1
       1: areturn

  protected java.awt.Image createDragImage(java.awt.GraphicsConfiguration, javax.swing.Icon);
    Code:
       0: aload_2
       1: invokeinterface #81,  1           // InterfaceMethod javax/swing/Icon.getIconWidth:()I
       6: istore_3
       7: aload_2
       8: invokeinterface #82,  1           // InterfaceMethod javax/swing/Icon.getIconHeight:()I
      13: istore        4
      15: aload_1
      16: iload_3
      17: iload         4
      19: iconst_3
      20: invokevirtual #84                 // Method java/awt/GraphicsConfiguration.createCompatibleImage:(III)Ljava/awt/image/BufferedImage;
      23: astore        5
      25: aload         5
      27: invokevirtual #85                 // Method java/awt/image/BufferedImage.getGraphics:()Ljava/awt/Graphics;
      30: checkcast     #86                 // class java/awt/Graphics2D
      33: astore        6
      35: aload         6
      37: getstatic     #87                 // Field java/awt/AlphaComposite.Clear:Ljava/awt/AlphaComposite;
      40: invokevirtual #88                 // Method java/awt/Graphics2D.setComposite:(Ljava/awt/Composite;)V
      43: aload         6
      45: iconst_0
      46: iconst_0
      47: iload_3
      48: iload         4
      50: invokevirtual #89                 // Method java/awt/Graphics2D.fillRect:(IIII)V
      53: aload         6
      55: iconst_2
      56: aload_0
      57: getfield      #16                 // Field ghostAlpha:F
      60: invokestatic  #91                 // Method java/awt/AlphaComposite.getInstance:(IF)Ljava/awt/AlphaComposite;
      63: invokevirtual #88                 // Method java/awt/Graphics2D.setComposite:(Ljava/awt/Composite;)V
      66: aload_2
      67: aload_0
      68: getfield      #17                 // Field dragSource:Ljava/awt/Component;
      71: aload         6
      73: iconst_0
      74: iconst_0
      75: invokeinterface #92,  5           // InterfaceMethod javax/swing/Icon.paintIcon:(Ljava/awt/Component;Ljava/awt/Graphics;II)V
      80: aload         6
      82: invokevirtual #93                 // Method java/awt/Graphics2D.dispose:()V
      85: aload         5
      87: areturn

  private int reduce(int);
    Code:
       0: iload_1
       1: iconst_2
       2: iand
       3: ifeq          13
       6: iload_1
       7: iconst_2
       8: if_icmpeq     13
      11: iconst_2
      12: ireturn
      13: iload_1
      14: iconst_1
      15: iand
      16: ifeq          26
      19: iload_1
      20: iconst_1
      21: if_icmpeq     26
      24: iconst_1
      25: ireturn
      26: iload_1
      27: ireturn

  protected java.awt.Cursor getCursorForAction(int);
    Code:
       0: iload_1
       1: lookupswitch  { // 3
                     1: 40
                     2: 36
            1073741824: 44
               default: 48
          }
      36: getstatic     #94                 // Field java/awt/dnd/DragSource.DefaultMoveDrop:Ljava/awt/Cursor;
      39: areturn
      40: getstatic     #95                 // Field java/awt/dnd/DragSource.DefaultCopyDrop:Ljava/awt/Cursor;
      43: areturn
      44: getstatic     #96                 // Field java/awt/dnd/DragSource.DefaultLinkDrop:Ljava/awt/Cursor;
      47: areturn
      48: getstatic     #97                 // Field java/awt/dnd/DragSource.DefaultMoveNoDrop:Ljava/awt/Cursor;
      51: areturn

  protected int getAcceptableDropAction(int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #18                 // Field supportedActions:I
       5: iload_1
       6: iand
       7: invokespecial #98                 // Method reduce:(I)I
      10: ireturn

  protected int getDropAction(java.awt.dnd.DragSourceEvent);
    Code:
       0: aload_1
       1: instanceof    #99                 // class java/awt/dnd/DragSourceDragEvent
       4: ifeq          17
       7: aload_1
       8: checkcast     #99                 // class java/awt/dnd/DragSourceDragEvent
      11: astore_2
      12: aload_2
      13: invokevirtual #100                // Method java/awt/dnd/DragSourceDragEvent.getDropAction:()I
      16: ireturn
      17: aload_1
      18: instanceof    #101                // class java/awt/dnd/DragSourceDropEvent
      21: ifeq          32
      24: aload_1
      25: checkcast     #101                // class java/awt/dnd/DragSourceDropEvent
      28: invokevirtual #102                // Method java/awt/dnd/DragSourceDropEvent.getDropAction:()I
      31: ireturn
      32: iconst_0
      33: ireturn

  protected int adjustDropAction(java.awt.dnd.DragSourceEvent);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #103                // Method getDropAction:(Ljava/awt/dnd/DragSourceEvent;)I
       5: istore_2
       6: aload_1
       7: instanceof    #99                 // class java/awt/dnd/DragSourceDragEvent
      10: ifeq          46
      13: aload_1
      14: checkcast     #99                 // class java/awt/dnd/DragSourceDragEvent
      17: astore_3
      18: iload_2
      19: ifne          46
      22: aload_3
      23: invokevirtual #104                // Method java/awt/dnd/DragSourceDragEvent.getGestureModifiersEx:()I
      26: sipush        9152
      29: iand
      30: istore        4
      32: iload         4
      34: ifne          46
      37: aload_0
      38: aload_3
      39: invokevirtual #105                // Method java/awt/dnd/DragSourceDragEvent.getTargetActions:()I
      42: invokevirtual #106                // Method getAcceptableDropAction:(I)I
      45: istore_2
      46: iload_2
      47: ireturn

  protected void updateCursor(java.awt.dnd.DragSourceEvent);
    Code:
       0: aload_0
       1: getfield      #11                 // Field fixCursor:Z
       4: ifne          8
       7: return
       8: aload_0
       9: aload_0
      10: aload_1
      11: invokevirtual #107                // Method adjustDropAction:(Ljava/awt/dnd/DragSourceEvent;)I
      14: invokevirtual #108                // Method getCursorForAction:(I)Ljava/awt/Cursor;
      17: astore_2
      18: aload_1
      19: invokevirtual #109                // Method java/awt/dnd/DragSourceEvent.getDragSourceContext:()Ljava/awt/dnd/DragSourceContext;
      22: aload_2
      23: invokevirtual #110                // Method java/awt/dnd/DragSourceContext.setCursor:(Ljava/awt/Cursor;)V
      26: return

  static java.lang.String actionString(int);
    Code:
       0: iload_0
       1: lookupswitch  { // 7
                     1: 80
                     2: 68
                     3: 71
            1073741824: 86
            1073741825: 83
            1073741826: 74
            1073741827: 77
               default: 89
          }
      68: ldc           #111                // String MOVE
      70: areturn
      71: ldc           #112                // String MOVE|COPY
      73: areturn
      74: ldc           #113                // String MOVE|LINK
      76: areturn
      77: ldc           #114                // String MOVE|COPY|LINK
      79: areturn
      80: ldc           #115                // String COPY
      82: areturn
      83: ldc           #116                // String COPY|LINK
      85: areturn
      86: ldc           #117                // String LINK
      88: areturn
      89: ldc           #118                // String NONE
      91: areturn

  private void describe(java.lang.String, java.awt.dnd.DragSourceEvent);
    Code:
       0: getstatic     #119                // Field LOG:Ljava/util/logging/Logger;
       3: getstatic     #120                // Field java/util/logging/Level.FINE:Ljava/util/logging/Level;
       6: invokevirtual #121                // Method java/util/logging/Logger.isLoggable:(Ljava/util/logging/Level;)Z
       9: ifeq          200
      12: new           #122                // class java/lang/StringBuilder
      15: dup
      16: invokespecial #123                // Method java/lang/StringBuilder."<init>":()V
      19: astore_3
      20: aload_3
      21: ldc           #124                // String drag:
      23: invokevirtual #125                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: pop
      27: aload_3
      28: aload_1
      29: invokevirtual #125                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      32: pop
      33: aload_2
      34: invokevirtual #109                // Method java/awt/dnd/DragSourceEvent.getDragSourceContext:()Ljava/awt/dnd/DragSourceContext;
      37: astore        4
      39: aload_2
      40: instanceof    #99                 // class java/awt/dnd/DragSourceDragEvent
      43: ifeq          152
      46: aload_2
      47: checkcast     #99                 // class java/awt/dnd/DragSourceDragEvent
      50: astore        5
      52: aload_3
      53: ldc           #126                // String : src=
      55: invokevirtual #125                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      58: pop
      59: aload_3
      60: aload         4
      62: invokevirtual #127                // Method java/awt/dnd/DragSourceContext.getSourceActions:()I
      65: invokestatic  #128                // Method actionString:(I)Ljava/lang/String;
      68: invokevirtual #125                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      71: pop
      72: aload_3
      73: ldc           #129                // String  usr=
      75: invokevirtual #125                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      78: pop
      79: aload_3
      80: aload         5
      82: invokevirtual #130                // Method java/awt/dnd/DragSourceDragEvent.getUserAction:()I
      85: invokestatic  #128                // Method actionString:(I)Ljava/lang/String;
      88: invokevirtual #125                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      91: pop
      92: aload_3
      93: ldc           #131                // String  tgt=
      95: invokevirtual #125                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      98: pop
      99: aload_3
     100: aload         5
     102: invokevirtual #105                // Method java/awt/dnd/DragSourceDragEvent.getTargetActions:()I
     105: invokestatic  #128                // Method actionString:(I)Ljava/lang/String;
     108: invokevirtual #125                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     111: pop
     112: aload_3
     113: ldc           #132                // String  act=
     115: invokevirtual #125                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     118: pop
     119: aload_3
     120: aload         5
     122: invokevirtual #100                // Method java/awt/dnd/DragSourceDragEvent.getDropAction:()I
     125: invokestatic  #128                // Method actionString:(I)Ljava/lang/String;
     128: invokevirtual #125                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     131: pop
     132: aload_3
     133: ldc           #133                // String  mods=
     135: invokevirtual #125                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     138: pop
     139: aload_3
     140: aload         5
     142: invokevirtual #104                // Method java/awt/dnd/DragSourceDragEvent.getGestureModifiersEx:()I
     145: invokevirtual #134                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     148: pop
     149: goto          165
     152: aload_3
     153: ldc           #135                // String : e=
     155: invokevirtual #125                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     158: pop
     159: aload_3
     160: aload_2
     161: invokevirtual #136                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     164: pop
     165: aload_3
     166: invokevirtual #137                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     169: astore        5
     171: aload         5
     173: aload_0
     174: getfield      #138                // Field lastAction:Ljava/lang/String;
     177: invokevirtual #139                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     180: ifne          200
     183: getstatic     #119                // Field LOG:Ljava/util/logging/Logger;
     186: getstatic     #120                // Field java/util/logging/Level.FINE:Ljava/util/logging/Level;
     189: aload         5
     191: invokevirtual #140                // Method java/util/logging/Logger.log:(Ljava/util/logging/Level;Ljava/lang/String;)V
     194: aload_0
     195: aload         5
     197: putfield      #138                // Field lastAction:Ljava/lang/String;
     200: return

  public void dragDropEnd(java.awt.dnd.DragSourceDropEvent);
    Code:
       0: aload_0
       1: ldc           #141                // String end
       3: aload_1
       4: invokespecial #142                // Method describe:(Ljava/lang/String;Ljava/awt/dnd/DragSourceEvent;)V
       7: aload_0
       8: iconst_m1
       9: invokevirtual #52                 // Method setModifiers:(I)V
      12: getstatic     #143                // Field UNKNOWN_TRANSFERABLE:Ljava/awt/datatransfer/Transferable;
      15: putstatic     #9                  // Field transferable:Ljava/awt/datatransfer/Transferable;
      18: aload_0
      19: getfield      #72                 // Field ghost:Lcom/sun/jna/platform/dnd/GhostedDragImage;
      22: ifnull        54
      25: aload_1
      26: invokevirtual #144                // Method java/awt/dnd/DragSourceDropEvent.getDropSuccess:()Z
      29: ifeq          42
      32: aload_0
      33: getfield      #72                 // Field ghost:Lcom/sun/jna/platform/dnd/GhostedDragImage;
      36: invokevirtual #80                 // Method com/sun/jna/platform/dnd/GhostedDragImage.dispose:()V
      39: goto          49
      42: aload_0
      43: getfield      #72                 // Field ghost:Lcom/sun/jna/platform/dnd/GhostedDragImage;
      46: invokevirtual #145                // Method com/sun/jna/platform/dnd/GhostedDragImage.returnToOrigin:()V
      49: aload_0
      50: aconst_null
      51: putfield      #72                 // Field ghost:Lcom/sun/jna/platform/dnd/GhostedDragImage;
      54: aload_1
      55: invokevirtual #146                // Method java/awt/dnd/DragSourceDropEvent.getDragSourceContext:()Ljava/awt/dnd/DragSourceContext;
      58: invokevirtual #147                // Method java/awt/dnd/DragSourceContext.getDragSource:()Ljava/awt/dnd/DragSource;
      61: astore_2
      62: aload_2
      63: aload_0
      64: invokevirtual #148                // Method java/awt/dnd/DragSource.removeDragSourceMotionListener:(Ljava/awt/dnd/DragSourceMotionListener;)V
      67: aload_0
      68: iconst_0
      69: putfield      #76                 // Field moved:Z
      72: return

  private java.awt.Point getImageLocation(java.awt.Point);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #60                 // Field imageOffset:Ljava/awt/Point;
       5: getfield      #58                 // Field java/awt/Point.x:I
       8: aload_0
       9: getfield      #60                 // Field imageOffset:Ljava/awt/Point;
      12: getfield      #59                 // Field java/awt/Point.y:I
      15: invokevirtual #68                 // Method java/awt/Point.translate:(II)V
      18: aload_1
      19: areturn

  public void dragEnter(java.awt.dnd.DragSourceDragEvent);
    Code:
       0: aload_0
       1: ldc           #149                // String enter
       3: aload_1
       4: invokespecial #142                // Method describe:(Ljava/lang/String;Ljava/awt/dnd/DragSourceEvent;)V
       7: aload_0
       8: getfield      #72                 // Field ghost:Lcom/sun/jna/platform/dnd/GhostedDragImage;
      11: ifnull        29
      14: aload_0
      15: getfield      #72                 // Field ghost:Lcom/sun/jna/platform/dnd/GhostedDragImage;
      18: aload_0
      19: aload_1
      20: invokevirtual #150                // Method java/awt/dnd/DragSourceDragEvent.getLocation:()Ljava/awt/Point;
      23: invokespecial #70                 // Method getImageLocation:(Ljava/awt/Point;)Ljava/awt/Point;
      26: invokevirtual #151                // Method com/sun/jna/platform/dnd/GhostedDragImage.move:(Ljava/awt/Point;)V
      29: aload_0
      30: aload_1
      31: invokevirtual #152                // Method updateCursor:(Ljava/awt/dnd/DragSourceEvent;)V
      34: return

  public void dragMouseMoved(java.awt.dnd.DragSourceDragEvent);
    Code:
       0: aload_0
       1: ldc           #153                // String move
       3: aload_1
       4: invokespecial #142                // Method describe:(Ljava/lang/String;Ljava/awt/dnd/DragSourceEvent;)V
       7: aload_0
       8: getfield      #72                 // Field ghost:Lcom/sun/jna/platform/dnd/GhostedDragImage;
      11: ifnull        29
      14: aload_0
      15: getfield      #72                 // Field ghost:Lcom/sun/jna/platform/dnd/GhostedDragImage;
      18: aload_0
      19: aload_1
      20: invokevirtual #150                // Method java/awt/dnd/DragSourceDragEvent.getLocation:()Ljava/awt/Point;
      23: invokespecial #70                 // Method getImageLocation:(Ljava/awt/Point;)Ljava/awt/Point;
      26: invokevirtual #151                // Method com/sun/jna/platform/dnd/GhostedDragImage.move:(Ljava/awt/Point;)V
      29: aload_0
      30: getfield      #76                 // Field moved:Z
      33: ifeq          41
      36: aload_0
      37: aload_1
      38: invokevirtual #152                // Method updateCursor:(Ljava/awt/dnd/DragSourceEvent;)V
      41: aload_0
      42: iconst_1
      43: putfield      #76                 // Field moved:Z
      46: return

  public void dragOver(java.awt.dnd.DragSourceDragEvent);
    Code:
       0: aload_0
       1: ldc           #154                // String over
       3: aload_1
       4: invokespecial #142                // Method describe:(Ljava/lang/String;Ljava/awt/dnd/DragSourceEvent;)V
       7: aload_0
       8: getfield      #72                 // Field ghost:Lcom/sun/jna/platform/dnd/GhostedDragImage;
      11: ifnull        29
      14: aload_0
      15: getfield      #72                 // Field ghost:Lcom/sun/jna/platform/dnd/GhostedDragImage;
      18: aload_0
      19: aload_1
      20: invokevirtual #150                // Method java/awt/dnd/DragSourceDragEvent.getLocation:()Ljava/awt/Point;
      23: invokespecial #70                 // Method getImageLocation:(Ljava/awt/Point;)Ljava/awt/Point;
      26: invokevirtual #151                // Method com/sun/jna/platform/dnd/GhostedDragImage.move:(Ljava/awt/Point;)V
      29: aload_0
      30: aload_1
      31: invokevirtual #152                // Method updateCursor:(Ljava/awt/dnd/DragSourceEvent;)V
      34: return

  public void dragExit(java.awt.dnd.DragSourceEvent);
    Code:
       0: aload_0
       1: ldc           #155                // String exit
       3: aload_1
       4: invokespecial #142                // Method describe:(Ljava/lang/String;Ljava/awt/dnd/DragSourceEvent;)V
       7: return

  public void dropActionChanged(java.awt.dnd.DragSourceDragEvent);
    Code:
       0: aload_0
       1: ldc           #156                // String change
       3: aload_1
       4: invokespecial #142                // Method describe:(Ljava/lang/String;Ljava/awt/dnd/DragSourceEvent;)V
       7: aload_0
       8: aload_1
       9: invokevirtual #104                // Method java/awt/dnd/DragSourceDragEvent.getGestureModifiersEx:()I
      12: sipush        9152
      15: iand
      16: invokevirtual #52                 // Method setModifiers:(I)V
      19: aload_0
      20: getfield      #72                 // Field ghost:Lcom/sun/jna/platform/dnd/GhostedDragImage;
      23: ifnull        41
      26: aload_0
      27: getfield      #72                 // Field ghost:Lcom/sun/jna/platform/dnd/GhostedDragImage;
      30: aload_0
      31: aload_1
      32: invokevirtual #150                // Method java/awt/dnd/DragSourceDragEvent.getLocation:()Ljava/awt/Point;
      35: invokespecial #70                 // Method getImageLocation:(Ljava/awt/Point;)Ljava/awt/Point;
      38: invokevirtual #151                // Method com/sun/jna/platform/dnd/GhostedDragImage.move:(Ljava/awt/Point;)V
      41: aload_0
      42: aload_1
      43: invokevirtual #152                // Method updateCursor:(Ljava/awt/dnd/DragSourceEvent;)V
      46: return

  static {};
    Code:
       0: ldc           #14                 // class com/sun/jna/platform/dnd/DragHandler
       2: invokevirtual #157                // Method java/lang/Class.getName:()Ljava/lang/String;
       5: invokestatic  #158                // Method java/util/logging/Logger.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;
       8: putstatic     #119                // Field LOG:Ljava/util/logging/Logger;
      11: new           #26                 // class java/awt/Dimension
      14: dup
      15: sipush        250
      18: sipush        250
      21: invokespecial #28                 // Method java/awt/Dimension."<init>":(II)V
      24: putstatic     #12                 // Field MAX_GHOST_SIZE:Ljava/awt/Dimension;
      27: aconst_null
      28: putstatic     #143                // Field UNKNOWN_TRANSFERABLE:Ljava/awt/datatransfer/Transferable;
      31: invokestatic  #159                // Method com/sun/jna/Platform.isMac:()Z
      34: putstatic     #160                // Field OSX:Z
      37: getstatic     #160                // Field OSX:Z
      40: ifeq          49
      43: sipush        512
      46: goto          52
      49: sipush        128
      52: putstatic     #47                 // Field COPY_MASK:I
      55: getstatic     #160                // Field OSX:Z
      58: ifeq          67
      61: sipush        768
      64: goto          70
      67: sipush        192
      70: putstatic     #48                 // Field LINK_MASK:I
      73: iconst_m1
      74: putstatic     #3                  // Field modifiers:I
      77: getstatic     #143                // Field UNKNOWN_TRANSFERABLE:Ljava/awt/datatransfer/Transferable;
      80: putstatic     #9                  // Field transferable:Ljava/awt/datatransfer/Transferable;
      83: return
}
