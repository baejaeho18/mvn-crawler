Compiled from "Ole32.java"
public interface com.sun.jna.platform.win32.Ole32 extends com.sun.jna.win32.StdCallLibrary {
  public static final com.sun.jna.platform.win32.Ole32 INSTANCE;

  public static final int COINIT_APARTMENTTHREADED;

  public static final int COINIT_MULTITHREADED;

  public static final int COINIT_DISABLE_OLE1DDE;

  public static final int COINIT_SPEED_OVER_MEMORY;

  public static final int RPC_C_AUTHN_LEVEL_DEFAULT;

  public static final int RPC_C_AUTHN_WINNT;

  public static final int RPC_C_IMP_LEVEL_IMPERSONATE;

  public static final int RPC_C_AUTHZ_NONE;

  public static final int RPC_C_AUTHN_LEVEL_CALL;

  public static final int EOAC_NONE;

  public abstract com.sun.jna.platform.win32.WinNT$HRESULT CoCreateGuid(com.sun.jna.platform.win32.Guid$GUID);

  public abstract int StringFromGUID2(com.sun.jna.platform.win32.Guid$GUID, char[], int);

  public abstract com.sun.jna.platform.win32.WinNT$HRESULT IIDFromString(java.lang.String, com.sun.jna.platform.win32.Guid$GUID);

  public abstract com.sun.jna.platform.win32.WinNT$HRESULT CoInitialize(com.sun.jna.platform.win32.WinDef$LPVOID);

  public abstract com.sun.jna.platform.win32.WinNT$HRESULT CoInitializeEx(com.sun.jna.Pointer, int);

  public abstract com.sun.jna.platform.win32.WinNT$HRESULT CoInitializeSecurity(com.sun.jna.platform.win32.WinNT$SECURITY_DESCRIPTOR, int, com.sun.jna.Pointer, com.sun.jna.Pointer, int, int, com.sun.jna.Pointer, int, com.sun.jna.Pointer);

  public abstract com.sun.jna.platform.win32.WinNT$HRESULT CoSetProxyBlanket(com.sun.jna.platform.win32.COM.Unknown, int, int, com.sun.jna.platform.win32.WTypes$LPOLESTR, int, int, com.sun.jna.Pointer, int);

  public abstract void CoUninitialize();

  public abstract com.sun.jna.platform.win32.WinNT$HRESULT CoCreateInstance(com.sun.jna.platform.win32.Guid$GUID, com.sun.jna.Pointer, int, com.sun.jna.platform.win32.Guid$GUID, com.sun.jna.ptr.PointerByReference);

  public abstract com.sun.jna.platform.win32.WinNT$HRESULT CLSIDFromProgID(java.lang.String, com.sun.jna.platform.win32.Guid$CLSID$ByReference);

  public abstract com.sun.jna.platform.win32.WinNT$HRESULT CLSIDFromString(java.lang.String, com.sun.jna.platform.win32.Guid$CLSID$ByReference);

  public abstract com.sun.jna.Pointer CoTaskMemAlloc(long);

  public abstract com.sun.jna.Pointer CoTaskMemRealloc(com.sun.jna.Pointer, long);

  public abstract void CoTaskMemFree(com.sun.jna.Pointer);

  public abstract com.sun.jna.platform.win32.WinNT$HRESULT CoGetMalloc(com.sun.jna.platform.win32.WinDef$DWORD, com.sun.jna.ptr.PointerByReference);

  public abstract com.sun.jna.platform.win32.WinNT$HRESULT GetRunningObjectTable(com.sun.jna.platform.win32.WinDef$DWORD, com.sun.jna.ptr.PointerByReference);

  public abstract com.sun.jna.platform.win32.WinNT$HRESULT CreateBindCtx(com.sun.jna.platform.win32.WinDef$DWORD, com.sun.jna.ptr.PointerByReference);

  public abstract boolean CoIsHandlerConnected(com.sun.jna.Pointer);

  public abstract com.sun.jna.platform.win32.WinNT$HRESULT OleInitialize(com.sun.jna.Pointer);

  public abstract void OleUninitialize();

  public abstract com.sun.jna.platform.win32.WinNT$HRESULT OleFlushClipboard();

  public abstract com.sun.jna.platform.win32.WinNT$HRESULT OleRun(com.sun.jna.Pointer);

  static {};
    Code:
       0: ldc           #1                  // String Ole32
       2: ldc           #2                  // class com/sun/jna/platform/win32/Ole32
       4: getstatic     #3                  // Field com/sun/jna/win32/W32APIOptions.DEFAULT_OPTIONS:Ljava/util/Map;
       7: invokestatic  #4                  // Method com/sun/jna/Native.load:(Ljava/lang/String;Ljava/lang/Class;Ljava/util/Map;)Lcom/sun/jna/Library;
      10: checkcast     #2                  // class com/sun/jna/platform/win32/Ole32
      13: putstatic     #5                  // Field INSTANCE:Lcom/sun/jna/platform/win32/Ole32;
      16: return
}
