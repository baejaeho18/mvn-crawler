Compiled from "Advapi32.java"
public interface com.sun.jna.platform.win32.Advapi32 extends com.sun.jna.win32.StdCallLibrary {
  public static final com.sun.jna.platform.win32.Advapi32 INSTANCE;

  public static final int MAX_KEY_LENGTH;

  public static final int MAX_VALUE_NAME;

  public static final int RRF_RT_ANY;

  public static final int RRF_RT_DWORD;

  public static final int RRF_RT_QWORD;

  public static final int RRF_RT_REG_BINARY;

  public static final int RRF_RT_REG_DWORD;

  public static final int RRF_RT_REG_EXPAND_SZ;

  public static final int RRF_RT_REG_MULTI_SZ;

  public static final int RRF_RT_REG_NONE;

  public static final int RRF_RT_REG_QWORD;

  public static final int RRF_RT_REG_SZ;

  public static final int LOGON_WITH_PROFILE;

  public static final int LOGON_NETCREDENTIALS_ONLY;

  public abstract boolean GetUserNameW(char[], com.sun.jna.ptr.IntByReference);

  public abstract boolean LookupAccountName(java.lang.String, java.lang.String, com.sun.jna.platform.win32.WinNT$PSID, com.sun.jna.ptr.IntByReference, char[], com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.PointerByReference);

  public abstract boolean LookupAccountSid(java.lang.String, com.sun.jna.platform.win32.WinNT$PSID, char[], com.sun.jna.ptr.IntByReference, char[], com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.PointerByReference);

  public abstract boolean ConvertSidToStringSid(com.sun.jna.platform.win32.WinNT$PSID, com.sun.jna.ptr.PointerByReference);

  public abstract boolean ConvertStringSidToSid(java.lang.String, com.sun.jna.platform.win32.WinNT$PSIDByReference);

  public abstract int GetLengthSid(com.sun.jna.platform.win32.WinNT$PSID);

  public abstract boolean IsValidSid(com.sun.jna.platform.win32.WinNT$PSID);

  public abstract boolean EqualSid(com.sun.jna.platform.win32.WinNT$PSID, com.sun.jna.platform.win32.WinNT$PSID);

  public abstract boolean IsWellKnownSid(com.sun.jna.platform.win32.WinNT$PSID, int);

  public abstract boolean CreateWellKnownSid(int, com.sun.jna.platform.win32.WinNT$PSID, com.sun.jna.platform.win32.WinNT$PSID, com.sun.jna.ptr.IntByReference);

  public abstract boolean InitializeSecurityDescriptor(com.sun.jna.platform.win32.WinNT$SECURITY_DESCRIPTOR, int);

  public abstract boolean GetSecurityDescriptorControl(com.sun.jna.platform.win32.WinNT$SECURITY_DESCRIPTOR, com.sun.jna.ptr.ShortByReference, com.sun.jna.ptr.IntByReference);

  public abstract boolean SetSecurityDescriptorControl(com.sun.jna.platform.win32.WinNT$SECURITY_DESCRIPTOR, short, short);

  public abstract boolean GetSecurityDescriptorOwner(com.sun.jna.platform.win32.WinNT$SECURITY_DESCRIPTOR, com.sun.jna.platform.win32.WinNT$PSIDByReference, com.sun.jna.platform.win32.WinDef$BOOLByReference);

  public abstract boolean SetSecurityDescriptorOwner(com.sun.jna.platform.win32.WinNT$SECURITY_DESCRIPTOR, com.sun.jna.platform.win32.WinNT$PSID, boolean);

  public abstract boolean GetSecurityDescriptorGroup(com.sun.jna.platform.win32.WinNT$SECURITY_DESCRIPTOR, com.sun.jna.platform.win32.WinNT$PSIDByReference, com.sun.jna.platform.win32.WinDef$BOOLByReference);

  public abstract boolean SetSecurityDescriptorGroup(com.sun.jna.platform.win32.WinNT$SECURITY_DESCRIPTOR, com.sun.jna.platform.win32.WinNT$PSID, boolean);

  public abstract boolean GetSecurityDescriptorDacl(com.sun.jna.platform.win32.WinNT$SECURITY_DESCRIPTOR, com.sun.jna.platform.win32.WinDef$BOOLByReference, com.sun.jna.platform.win32.WinNT$PACLByReference, com.sun.jna.platform.win32.WinDef$BOOLByReference);

  public abstract boolean SetSecurityDescriptorDacl(com.sun.jna.platform.win32.WinNT$SECURITY_DESCRIPTOR, boolean, com.sun.jna.platform.win32.WinNT$ACL, boolean);

  public abstract boolean InitializeAcl(com.sun.jna.platform.win32.WinNT$ACL, int, int);

  public abstract boolean AddAce(com.sun.jna.platform.win32.WinNT$ACL, int, int, com.sun.jna.Pointer, int);

  public abstract boolean AddAccessAllowedAce(com.sun.jna.platform.win32.WinNT$ACL, int, int, com.sun.jna.platform.win32.WinNT$PSID);

  public abstract boolean AddAccessAllowedAceEx(com.sun.jna.platform.win32.WinNT$ACL, int, int, int, com.sun.jna.platform.win32.WinNT$PSID);

  public abstract boolean GetAce(com.sun.jna.platform.win32.WinNT$ACL, int, com.sun.jna.ptr.PointerByReference);

  public abstract boolean LogonUser(java.lang.String, java.lang.String, java.lang.String, int, int, com.sun.jna.platform.win32.WinNT$HANDLEByReference);

  public abstract boolean OpenThreadToken(com.sun.jna.platform.win32.WinNT$HANDLE, int, boolean, com.sun.jna.platform.win32.WinNT$HANDLEByReference);

  public abstract boolean SetThreadToken(com.sun.jna.platform.win32.WinNT$HANDLEByReference, com.sun.jna.platform.win32.WinNT$HANDLE);

  public abstract boolean OpenProcessToken(com.sun.jna.platform.win32.WinNT$HANDLE, int, com.sun.jna.platform.win32.WinNT$HANDLEByReference);

  public abstract boolean DuplicateToken(com.sun.jna.platform.win32.WinNT$HANDLE, int, com.sun.jna.platform.win32.WinNT$HANDLEByReference);

  public abstract boolean DuplicateTokenEx(com.sun.jna.platform.win32.WinNT$HANDLE, int, com.sun.jna.platform.win32.WinBase$SECURITY_ATTRIBUTES, int, int, com.sun.jna.platform.win32.WinNT$HANDLEByReference);

  public abstract boolean GetTokenInformation(com.sun.jna.platform.win32.WinNT$HANDLE, int, com.sun.jna.Structure, int, com.sun.jna.ptr.IntByReference);

  public abstract boolean ImpersonateLoggedOnUser(com.sun.jna.platform.win32.WinNT$HANDLE);

  public abstract boolean ImpersonateSelf(int);

  public abstract boolean RevertToSelf();

  public abstract int RegOpenKeyEx(com.sun.jna.platform.win32.WinReg$HKEY, java.lang.String, int, int, com.sun.jna.platform.win32.WinReg$HKEYByReference);

  public abstract int RegConnectRegistry(java.lang.String, com.sun.jna.platform.win32.WinReg$HKEY, com.sun.jna.platform.win32.WinReg$HKEYByReference);

  public abstract int RegQueryValueEx(com.sun.jna.platform.win32.WinReg$HKEY, java.lang.String, int, com.sun.jna.ptr.IntByReference, char[], com.sun.jna.ptr.IntByReference);

  public abstract int RegQueryValueEx(com.sun.jna.platform.win32.WinReg$HKEY, java.lang.String, int, com.sun.jna.ptr.IntByReference, byte[], com.sun.jna.ptr.IntByReference);

  public abstract int RegQueryValueEx(com.sun.jna.platform.win32.WinReg$HKEY, java.lang.String, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference);

  public abstract int RegQueryValueEx(com.sun.jna.platform.win32.WinReg$HKEY, java.lang.String, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.IntByReference);

  public abstract int RegQueryValueEx(com.sun.jna.platform.win32.WinReg$HKEY, java.lang.String, int, com.sun.jna.ptr.IntByReference, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference);

  public abstract int RegCloseKey(com.sun.jna.platform.win32.WinReg$HKEY);

  public abstract int RegDeleteValue(com.sun.jna.platform.win32.WinReg$HKEY, java.lang.String);

  public abstract int RegSetValueEx(com.sun.jna.platform.win32.WinReg$HKEY, java.lang.String, int, int, com.sun.jna.Pointer, int);

  public abstract int RegSetValueEx(com.sun.jna.platform.win32.WinReg$HKEY, java.lang.String, int, int, char[], int);

  public abstract int RegSetValueEx(com.sun.jna.platform.win32.WinReg$HKEY, java.lang.String, int, int, byte[], int);

  public abstract int RegCreateKeyEx(com.sun.jna.platform.win32.WinReg$HKEY, java.lang.String, int, java.lang.String, int, int, com.sun.jna.platform.win32.WinBase$SECURITY_ATTRIBUTES, com.sun.jna.platform.win32.WinReg$HKEYByReference, com.sun.jna.ptr.IntByReference);

  public abstract int RegDeleteKey(com.sun.jna.platform.win32.WinReg$HKEY, java.lang.String);

  public abstract int RegEnumKeyEx(com.sun.jna.platform.win32.WinReg$HKEY, int, char[], com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, char[], com.sun.jna.ptr.IntByReference, com.sun.jna.platform.win32.WinBase$FILETIME);

  public abstract int RegEnumValue(com.sun.jna.platform.win32.WinReg$HKEY, int, char[], com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference);

  public abstract int RegEnumValue(com.sun.jna.platform.win32.WinReg$HKEY, int, char[], com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, byte[], com.sun.jna.ptr.IntByReference);

  public abstract int RegQueryInfoKey(com.sun.jna.platform.win32.WinReg$HKEY, char[], com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.platform.win32.WinBase$FILETIME);

  public abstract int RegGetValue(com.sun.jna.platform.win32.WinReg$HKEY, java.lang.String, java.lang.String, int, com.sun.jna.ptr.IntByReference, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference);

  public abstract int RegGetValue(com.sun.jna.platform.win32.WinReg$HKEY, java.lang.String, java.lang.String, int, com.sun.jna.ptr.IntByReference, byte[], com.sun.jna.ptr.IntByReference);

  public abstract com.sun.jna.platform.win32.WinNT$HANDLE RegisterEventSource(java.lang.String, java.lang.String);

  public abstract boolean DeregisterEventSource(com.sun.jna.platform.win32.WinNT$HANDLE);

  public abstract com.sun.jna.platform.win32.WinNT$HANDLE OpenEventLog(java.lang.String, java.lang.String);

  public abstract boolean CloseEventLog(com.sun.jna.platform.win32.WinNT$HANDLE);

  public abstract boolean GetNumberOfEventLogRecords(com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.ptr.IntByReference);

  public abstract boolean ReportEvent(com.sun.jna.platform.win32.WinNT$HANDLE, int, int, int, com.sun.jna.platform.win32.WinNT$PSID, int, int, java.lang.String[], com.sun.jna.Pointer);

  public abstract boolean ClearEventLog(com.sun.jna.platform.win32.WinNT$HANDLE, java.lang.String);

  public abstract boolean BackupEventLog(com.sun.jna.platform.win32.WinNT$HANDLE, java.lang.String);

  public abstract com.sun.jna.platform.win32.WinNT$HANDLE OpenBackupEventLog(java.lang.String, java.lang.String);

  public abstract boolean ReadEventLog(com.sun.jna.platform.win32.WinNT$HANDLE, int, int, com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference);

  public abstract boolean GetOldestEventLogRecord(com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.ptr.IntByReference);

  public abstract boolean ChangeServiceConfig2(com.sun.jna.platform.win32.Winsvc$SC_HANDLE, int, com.sun.jna.platform.win32.Winsvc$ChangeServiceConfig2Info);

  public abstract boolean QueryServiceConfig2(com.sun.jna.platform.win32.Winsvc$SC_HANDLE, int, com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference);

  public abstract boolean QueryServiceStatusEx(com.sun.jna.platform.win32.Winsvc$SC_HANDLE, int, com.sun.jna.platform.win32.Winsvc$SERVICE_STATUS_PROCESS, int, com.sun.jna.ptr.IntByReference);

  public abstract boolean QueryServiceStatus(com.sun.jna.platform.win32.Winsvc$SC_HANDLE, com.sun.jna.platform.win32.Winsvc$SERVICE_STATUS);

  public abstract boolean ControlService(com.sun.jna.platform.win32.Winsvc$SC_HANDLE, int, com.sun.jna.platform.win32.Winsvc$SERVICE_STATUS);

  public abstract boolean StartService(com.sun.jna.platform.win32.Winsvc$SC_HANDLE, int, java.lang.String[]);

  public abstract boolean CloseServiceHandle(com.sun.jna.platform.win32.Winsvc$SC_HANDLE);

  public abstract com.sun.jna.platform.win32.Winsvc$SC_HANDLE OpenService(com.sun.jna.platform.win32.Winsvc$SC_HANDLE, java.lang.String, int);

  public abstract com.sun.jna.platform.win32.Winsvc$SC_HANDLE OpenSCManager(java.lang.String, java.lang.String, int);

  public abstract boolean EnumDependentServices(com.sun.jna.platform.win32.Winsvc$SC_HANDLE, int, com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference);

  public abstract boolean EnumServicesStatusEx(com.sun.jna.platform.win32.Winsvc$SC_HANDLE, int, int, int, com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, java.lang.String);

  public abstract boolean CreateProcessAsUser(com.sun.jna.platform.win32.WinNT$HANDLE, java.lang.String, java.lang.String, com.sun.jna.platform.win32.WinBase$SECURITY_ATTRIBUTES, com.sun.jna.platform.win32.WinBase$SECURITY_ATTRIBUTES, boolean, int, java.lang.String, java.lang.String, com.sun.jna.platform.win32.WinBase$STARTUPINFO, com.sun.jna.platform.win32.WinBase$PROCESS_INFORMATION);

  public abstract boolean AdjustTokenPrivileges(com.sun.jna.platform.win32.WinNT$HANDLE, boolean, com.sun.jna.platform.win32.WinNT$TOKEN_PRIVILEGES, int, com.sun.jna.platform.win32.WinNT$TOKEN_PRIVILEGES, com.sun.jna.ptr.IntByReference);

  public abstract boolean LookupPrivilegeName(java.lang.String, com.sun.jna.platform.win32.WinNT$LUID, char[], com.sun.jna.ptr.IntByReference);

  public abstract boolean LookupPrivilegeValue(java.lang.String, java.lang.String, com.sun.jna.platform.win32.WinNT$LUID);

  public abstract boolean GetFileSecurity(java.lang.String, int, com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference);

  public abstract boolean SetFileSecurity(java.lang.String, int, com.sun.jna.Pointer);

  public abstract int GetSecurityInfo(com.sun.jna.platform.win32.WinNT$HANDLE, int, int, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference);

  public abstract int SetSecurityInfo(com.sun.jna.platform.win32.WinNT$HANDLE, int, int, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer);

  public abstract int GetNamedSecurityInfo(java.lang.String, int, int, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference);

  public abstract int SetNamedSecurityInfo(java.lang.String, int, int, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer);

  public abstract int GetSecurityDescriptorLength(com.sun.jna.Pointer);

  public abstract boolean IsValidSecurityDescriptor(com.sun.jna.Pointer);

  public abstract boolean MakeSelfRelativeSD(com.sun.jna.platform.win32.WinNT$SECURITY_DESCRIPTOR, com.sun.jna.platform.win32.WinNT$SECURITY_DESCRIPTOR_RELATIVE, com.sun.jna.ptr.IntByReference);

  public abstract boolean MakeAbsoluteSD(com.sun.jna.platform.win32.WinNT$SECURITY_DESCRIPTOR_RELATIVE, com.sun.jna.platform.win32.WinNT$SECURITY_DESCRIPTOR, com.sun.jna.ptr.IntByReference, com.sun.jna.platform.win32.WinNT$ACL, com.sun.jna.ptr.IntByReference, com.sun.jna.platform.win32.WinNT$ACL, com.sun.jna.ptr.IntByReference, com.sun.jna.platform.win32.WinNT$PSID, com.sun.jna.ptr.IntByReference, com.sun.jna.platform.win32.WinNT$PSID, com.sun.jna.ptr.IntByReference);

  public abstract boolean IsValidAcl(com.sun.jna.Pointer);

  public abstract void MapGenericMask(com.sun.jna.platform.win32.WinDef$DWORDByReference, com.sun.jna.platform.win32.WinNT$GENERIC_MAPPING);

  public abstract boolean AccessCheck(com.sun.jna.Pointer, com.sun.jna.platform.win32.WinNT$HANDLE, com.sun.jna.platform.win32.WinDef$DWORD, com.sun.jna.platform.win32.WinNT$GENERIC_MAPPING, com.sun.jna.platform.win32.WinNT$PRIVILEGE_SET, com.sun.jna.platform.win32.WinDef$DWORDByReference, com.sun.jna.platform.win32.WinDef$DWORDByReference, com.sun.jna.platform.win32.WinDef$BOOLByReference);

  public abstract boolean EncryptFile(java.lang.String);

  public abstract boolean DecryptFile(java.lang.String, com.sun.jna.platform.win32.WinDef$DWORD);

  public abstract boolean FileEncryptionStatus(java.lang.String, com.sun.jna.platform.win32.WinDef$DWORDByReference);

  public abstract boolean EncryptionDisable(java.lang.String, boolean);

  public abstract int OpenEncryptedFileRaw(java.lang.String, com.sun.jna.platform.win32.WinDef$ULONG, com.sun.jna.ptr.PointerByReference);

  public abstract int ReadEncryptedFileRaw(com.sun.jna.platform.win32.WinBase$FE_EXPORT_FUNC, com.sun.jna.Pointer, com.sun.jna.Pointer);

  public abstract int WriteEncryptedFileRaw(com.sun.jna.platform.win32.WinBase$FE_IMPORT_FUNC, com.sun.jna.Pointer, com.sun.jna.Pointer);

  public abstract void CloseEncryptedFileRaw(com.sun.jna.Pointer);

  public abstract boolean CreateProcessWithLogonW(java.lang.String, java.lang.String, java.lang.String, int, java.lang.String, java.lang.String, int, com.sun.jna.Pointer, java.lang.String, com.sun.jna.platform.win32.WinBase$STARTUPINFO, com.sun.jna.platform.win32.WinBase$PROCESS_INFORMATION);

  public abstract boolean StartServiceCtrlDispatcher(com.sun.jna.platform.win32.Winsvc$SERVICE_TABLE_ENTRY[]);

  public abstract com.sun.jna.platform.win32.Winsvc$SERVICE_STATUS_HANDLE RegisterServiceCtrlHandler(java.lang.String, com.sun.jna.Library$Handler);

  public abstract com.sun.jna.platform.win32.Winsvc$SERVICE_STATUS_HANDLE RegisterServiceCtrlHandlerEx(java.lang.String, com.sun.jna.platform.win32.Winsvc$HandlerEx, com.sun.jna.Pointer);

  public abstract boolean SetServiceStatus(com.sun.jna.platform.win32.Winsvc$SERVICE_STATUS_HANDLE, com.sun.jna.platform.win32.Winsvc$SERVICE_STATUS);

  public abstract com.sun.jna.platform.win32.Winsvc$SC_HANDLE CreateService(com.sun.jna.platform.win32.Winsvc$SC_HANDLE, java.lang.String, java.lang.String, int, int, int, int, java.lang.String, java.lang.String, com.sun.jna.ptr.IntByReference, java.lang.String, java.lang.String, java.lang.String);

  public abstract boolean DeleteService(com.sun.jna.platform.win32.Winsvc$SC_HANDLE);

  static {};
    Code:
       0: ldc           #1                  // String Advapi32
       2: ldc           #2                  // class com/sun/jna/platform/win32/Advapi32
       4: getstatic     #3                  // Field com/sun/jna/win32/W32APIOptions.DEFAULT_OPTIONS:Ljava/util/Map;
       7: invokestatic  #4                  // Method com/sun/jna/Native.load:(Ljava/lang/String;Ljava/lang/Class;Ljava/util/Map;)Lcom/sun/jna/Library;
      10: checkcast     #2                  // class com/sun/jna/platform/win32/Advapi32
      13: putstatic     #5                  // Field INSTANCE:Lcom/sun/jna/platform/win32/Advapi32;
      16: return
}
