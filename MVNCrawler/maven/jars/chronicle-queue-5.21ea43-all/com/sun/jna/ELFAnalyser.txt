Compiled from "ELFAnalyser.java"
class com.sun.jna.ELFAnalyser {
  private static final byte[] ELF_MAGIC;

  private static final int EF_ARM_ABI_FLOAT_HARD;

  private static final int EF_ARM_ABI_FLOAT_SOFT;

  private static final int EI_DATA_BIG_ENDIAN;

  private static final int E_MACHINE_ARM;

  private static final int EI_CLASS_64BIT;

  private final java.lang.String filename;

  private boolean ELF;

  private boolean _64Bit;

  private boolean bigEndian;

  private boolean armHardFloatFlag;

  private boolean armSoftFloatFlag;

  private boolean armEabiAapcsVfp;

  private boolean arm;

  public static com.sun.jna.ELFAnalyser analyse(java.lang.String) throws java.io.IOException;
    Code:
       0: new           #1                  // class com/sun/jna/ELFAnalyser
       3: dup
       4: aload_0
       5: invokespecial #2                  // Method "<init>":(Ljava/lang/String;)V
       8: astore_1
       9: aload_1
      10: invokespecial #3                  // Method runDetection:()V
      13: aload_1
      14: areturn

  public boolean isELF();
    Code:
       0: aload_0
       1: getfield      #4                  // Field ELF:Z
       4: ireturn

  public boolean is64Bit();
    Code:
       0: aload_0
       1: getfield      #5                  // Field _64Bit:Z
       4: ireturn

  public boolean isBigEndian();
    Code:
       0: aload_0
       1: getfield      #6                  // Field bigEndian:Z
       4: ireturn

  public java.lang.String getFilename();
    Code:
       0: aload_0
       1: getfield      #7                  // Field filename:Ljava/lang/String;
       4: areturn

  public boolean isArmHardFloat();
    Code:
       0: aload_0
       1: invokevirtual #8                  // Method isArmEabiAapcsVfp:()Z
       4: ifne          14
       7: aload_0
       8: invokevirtual #9                  // Method isArmHardFloatFlag:()Z
      11: ifeq          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn

  public boolean isArmEabiAapcsVfp();
    Code:
       0: aload_0
       1: getfield      #10                 // Field armEabiAapcsVfp:Z
       4: ireturn

  public boolean isArmHardFloatFlag();
    Code:
       0: aload_0
       1: getfield      #11                 // Field armHardFloatFlag:Z
       4: ireturn

  public boolean isArmSoftFloatFlag();
    Code:
       0: aload_0
       1: getfield      #12                 // Field armSoftFloatFlag:Z
       4: ireturn

  public boolean isArm();
    Code:
       0: aload_0
       1: getfield      #13                 // Field arm:Z
       4: ireturn

  private com.sun.jna.ELFAnalyser(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #14                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #4                  // Field ELF:Z
       9: aload_0
      10: iconst_0
      11: putfield      #5                  // Field _64Bit:Z
      14: aload_0
      15: iconst_0
      16: putfield      #6                  // Field bigEndian:Z
      19: aload_0
      20: iconst_0
      21: putfield      #11                 // Field armHardFloatFlag:Z
      24: aload_0
      25: iconst_0
      26: putfield      #12                 // Field armSoftFloatFlag:Z
      29: aload_0
      30: iconst_0
      31: putfield      #10                 // Field armEabiAapcsVfp:Z
      34: aload_0
      35: iconst_0
      36: putfield      #13                 // Field arm:Z
      39: aload_0
      40: aload_1
      41: putfield      #7                  // Field filename:Ljava/lang/String;
      44: return

  private void runDetection() throws java.io.IOException;
    Code:
       0: new           #15                 // class java/io/RandomAccessFile
       3: dup
       4: aload_0
       5: getfield      #7                  // Field filename:Ljava/lang/String;
       8: ldc           #16                 // String r
      10: invokespecial #17                 // Method java/io/RandomAccessFile."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      13: astore_1
      14: aload_1
      15: invokevirtual #18                 // Method java/io/RandomAccessFile.length:()J
      18: ldc2_w        #19                 // long 4l
      21: lcmp
      22: ifle          55
      25: iconst_4
      26: newarray       byte
      28: astore_2
      29: aload_1
      30: lconst_0
      31: invokevirtual #21                 // Method java/io/RandomAccessFile.seek:(J)V
      34: aload_1
      35: aload_2
      36: invokevirtual #22                 // Method java/io/RandomAccessFile.read:([B)I
      39: pop
      40: aload_2
      41: getstatic     #23                 // Field ELF_MAGIC:[B
      44: invokestatic  #24                 // Method java/util/Arrays.equals:([B[B)Z
      47: ifeq          55
      50: aload_0
      51: iconst_1
      52: putfield      #4                  // Field ELF:Z
      55: aload_0
      56: getfield      #4                  // Field ELF:Z
      59: ifne          71
      62: aload_1
      63: invokevirtual #25                 // Method java/io/RandomAccessFile.close:()V
      66: goto          70
      69: astore_2
      70: return
      71: aload_1
      72: ldc2_w        #19                 // long 4l
      75: invokevirtual #21                 // Method java/io/RandomAccessFile.seek:(J)V
      78: aload_1
      79: invokevirtual #27                 // Method java/io/RandomAccessFile.readByte:()B
      82: istore_2
      83: aload_1
      84: invokevirtual #27                 // Method java/io/RandomAccessFile.readByte:()B
      87: istore_3
      88: aload_0
      89: iload_2
      90: iconst_2
      91: if_icmpne     98
      94: iconst_1
      95: goto          99
      98: iconst_0
      99: putfield      #5                  // Field _64Bit:Z
     102: aload_0
     103: iload_3
     104: iconst_2
     105: if_icmpne     112
     108: iconst_1
     109: goto          113
     112: iconst_0
     113: putfield      #6                  // Field bigEndian:Z
     116: aload_1
     117: lconst_0
     118: invokevirtual #21                 // Method java/io/RandomAccessFile.seek:(J)V
     121: aload_0
     122: getfield      #5                  // Field _64Bit:Z
     125: ifeq          133
     128: bipush        64
     130: goto          135
     133: bipush        52
     135: invokestatic  #28                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;
     138: astore        4
     140: aload_1
     141: invokevirtual #29                 // Method java/io/RandomAccessFile.getChannel:()Ljava/nio/channels/FileChannel;
     144: aload         4
     146: lconst_0
     147: invokevirtual #30                 // Method java/nio/channels/FileChannel.read:(Ljava/nio/ByteBuffer;J)I
     150: pop
     151: aload         4
     153: aload_0
     154: getfield      #6                  // Field bigEndian:Z
     157: ifeq          166
     160: getstatic     #31                 // Field java/nio/ByteOrder.BIG_ENDIAN:Ljava/nio/ByteOrder;
     163: goto          169
     166: getstatic     #32                 // Field java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;
     169: invokevirtual #33                 // Method java/nio/ByteBuffer.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;
     172: pop
     173: aload_0
     174: aload         4
     176: bipush        18
     178: invokevirtual #34                 // Method java/nio/ByteBuffer.get:(I)B
     181: bipush        40
     183: if_icmpne     190
     186: iconst_1
     187: goto          191
     190: iconst_0
     191: putfield      #13                 // Field arm:Z
     194: aload_0
     195: getfield      #13                 // Field arm:Z
     198: ifeq          271
     201: aload         4
     203: aload_0
     204: getfield      #5                  // Field _64Bit:Z
     207: ifeq          215
     210: bipush        48
     212: goto          217
     215: bipush        36
     217: invokevirtual #35                 // Method java/nio/ByteBuffer.getInt:(I)I
     220: istore        5
     222: aload_0
     223: iload         5
     225: sipush        1024
     228: iand
     229: sipush        1024
     232: if_icmpne     239
     235: iconst_1
     236: goto          240
     239: iconst_0
     240: putfield      #11                 // Field armHardFloatFlag:Z
     243: aload_0
     244: iload         5
     246: sipush        512
     249: iand
     250: sipush        512
     253: if_icmpne     260
     256: iconst_1
     257: goto          261
     260: iconst_0
     261: putfield      #12                 // Field armSoftFloatFlag:Z
     264: aload_0
     265: aload         4
     267: aload_1
     268: invokespecial #36                 // Method parseEabiAapcsVfp:(Ljava/nio/ByteBuffer;Ljava/io/RandomAccessFile;)V
     271: aload_1
     272: invokevirtual #25                 // Method java/io/RandomAccessFile.close:()V
     275: goto          296
     278: astore_2
     279: goto          296
     282: astore        6
     284: aload_1
     285: invokevirtual #25                 // Method java/io/RandomAccessFile.close:()V
     288: goto          293
     291: astore        7
     293: aload         6
     295: athrow
     296: return
    Exception table:
       from    to  target type
          62    66    69   Class java/io/IOException
         271   275   278   Class java/io/IOException
          14    62   282   any
          71   271   282   any
         284   288   291   Class java/io/IOException
         282   284   282   any

  private void parseEabiAapcsVfp(java.nio.ByteBuffer, java.io.RandomAccessFile) throws java.io.IOException;
    Code:
       0: new           #37                 // class com/sun/jna/ELFAnalyser$ELFSectionHeaders
       3: dup
       4: aload_0
       5: getfield      #5                  // Field _64Bit:Z
       8: aload_0
       9: getfield      #6                  // Field bigEndian:Z
      12: aload_1
      13: aload_2
      14: invokespecial #38                 // Method com/sun/jna/ELFAnalyser$ELFSectionHeaders."<init>":(ZZLjava/nio/ByteBuffer;Ljava/io/RandomAccessFile;)V
      17: astore_3
      18: aload_3
      19: invokevirtual #39                 // Method com/sun/jna/ELFAnalyser$ELFSectionHeaders.getEntries:()Ljava/util/List;
      22: invokeinterface #40,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      27: astore        4
      29: aload         4
      31: invokeinterface #41,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      36: ifeq          220
      39: aload         4
      41: invokeinterface #42,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      46: checkcast     #43                 // class com/sun/jna/ELFAnalyser$ELFSectionHeaderEntry
      49: astore        5
      51: ldc           #44                 // String .ARM.attributes
      53: aload         5
      55: invokevirtual #45                 // Method com/sun/jna/ELFAnalyser$ELFSectionHeaderEntry.getName:()Ljava/lang/String;
      58: invokevirtual #46                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      61: ifeq          217
      64: aload         5
      66: invokevirtual #47                 // Method com/sun/jna/ELFAnalyser$ELFSectionHeaderEntry.getSize:()I
      69: invokestatic  #28                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;
      72: astore        6
      74: aload         6
      76: aload_0
      77: getfield      #6                  // Field bigEndian:Z
      80: ifeq          89
      83: getstatic     #31                 // Field java/nio/ByteOrder.BIG_ENDIAN:Ljava/nio/ByteOrder;
      86: goto          92
      89: getstatic     #32                 // Field java/nio/ByteOrder.LITTLE_ENDIAN:Ljava/nio/ByteOrder;
      92: invokevirtual #33                 // Method java/nio/ByteBuffer.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;
      95: pop
      96: aload_2
      97: invokevirtual #29                 // Method java/io/RandomAccessFile.getChannel:()Ljava/nio/channels/FileChannel;
     100: aload         6
     102: aload         5
     104: invokevirtual #48                 // Method com/sun/jna/ELFAnalyser$ELFSectionHeaderEntry.getOffset:()I
     107: i2l
     108: invokevirtual #30                 // Method java/nio/channels/FileChannel.read:(Ljava/nio/ByteBuffer;J)I
     111: pop
     112: aload         6
     114: invokevirtual #49                 // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;
     117: pop
     118: aload         6
     120: invokestatic  #50                 // Method parseArmAttributes:(Ljava/nio/ByteBuffer;)Ljava/util/Map;
     123: astore        7
     125: aload         7
     127: iconst_1
     128: invokestatic  #51                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     131: invokeinterface #52,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
     136: checkcast     #53                 // class java/util/Map
     139: astore        8
     141: aload         8
     143: ifnonnull     149
     146: goto          29
     149: aload         8
     151: getstatic     #54                 // Field com/sun/jna/ELFAnalyser$ArmAeabiAttributesTag.ABI_VFP_args:Lcom/sun/jna/ELFAnalyser$ArmAeabiAttributesTag;
     154: invokeinterface #52,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
     159: astore        9
     161: aload         9
     163: instanceof    #55                 // class java/lang/Integer
     166: ifeq          192
     169: aload         9
     171: checkcast     #55                 // class java/lang/Integer
     174: iconst_1
     175: invokestatic  #51                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     178: invokevirtual #56                 // Method java/lang/Integer.equals:(Ljava/lang/Object;)Z
     181: ifeq          192
     184: aload_0
     185: iconst_1
     186: putfield      #10                 // Field armEabiAapcsVfp:Z
     189: goto          217
     192: aload         9
     194: instanceof    #57                 // class java/math/BigInteger
     197: ifeq          217
     200: aload         9
     202: checkcast     #57                 // class java/math/BigInteger
     205: invokevirtual #58                 // Method java/math/BigInteger.intValue:()I
     208: iconst_1
     209: if_icmpne     217
     212: aload_0
     213: iconst_1
     214: putfield      #10                 // Field armEabiAapcsVfp:Z
     217: goto          29
     220: return

  private static java.util.Map<java.lang.Integer, java.util.Map<com.sun.jna.ELFAnalyser$ArmAeabiAttributesTag, java.lang.Object>> parseArmAttributes(java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: invokevirtual #59                 // Method java/nio/ByteBuffer.get:()B
       4: istore_1
       5: iload_1
       6: bipush        65
       8: if_icmpeq     15
      11: getstatic     #60                 // Field java/util/Collections.EMPTY_MAP:Ljava/util/Map;
      14: areturn
      15: aload_0
      16: invokevirtual #61                 // Method java/nio/ByteBuffer.position:()I
      19: aload_0
      20: invokevirtual #62                 // Method java/nio/ByteBuffer.limit:()I
      23: if_icmpge     76
      26: aload_0
      27: invokevirtual #61                 // Method java/nio/ByteBuffer.position:()I
      30: istore_2
      31: aload_0
      32: invokevirtual #63                 // Method java/nio/ByteBuffer.getInt:()I
      35: istore_3
      36: iload_3
      37: ifgt          43
      40: goto          76
      43: aload_0
      44: aconst_null
      45: invokestatic  #64                 // Method readNTBS:(Ljava/nio/ByteBuffer;Ljava/lang/Integer;)Ljava/lang/String;
      48: astore        4
      50: ldc           #65                 // String aeabi
      52: aload         4
      54: invokevirtual #46                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      57: ifeq          65
      60: aload_0
      61: invokestatic  #66                 // Method parseAEABI:(Ljava/nio/ByteBuffer;)Ljava/util/Map;
      64: areturn
      65: aload_0
      66: iload_2
      67: iload_3
      68: iadd
      69: invokevirtual #67                 // Method java/nio/Buffer.position:(I)Ljava/nio/Buffer;
      72: pop
      73: goto          15
      76: getstatic     #60                 // Field java/util/Collections.EMPTY_MAP:Ljava/util/Map;
      79: areturn

  private static java.util.Map<java.lang.Integer, java.util.Map<com.sun.jna.ELFAnalyser$ArmAeabiAttributesTag, java.lang.Object>> parseAEABI(java.nio.ByteBuffer);
    Code:
       0: new           #68                 // class java/util/HashMap
       3: dup
       4: invokespecial #69                 // Method java/util/HashMap."<init>":()V
       7: astore_1
       8: aload_0
       9: invokevirtual #61                 // Method java/nio/ByteBuffer.position:()I
      12: aload_0
      13: invokevirtual #62                 // Method java/nio/ByteBuffer.limit:()I
      16: if_icmpge     70
      19: aload_0
      20: invokevirtual #61                 // Method java/nio/ByteBuffer.position:()I
      23: istore_2
      24: aload_0
      25: invokestatic  #70                 // Method readULEB128:(Ljava/nio/ByteBuffer;)Ljava/math/BigInteger;
      28: invokevirtual #58                 // Method java/math/BigInteger.intValue:()I
      31: istore_3
      32: aload_0
      33: invokevirtual #63                 // Method java/nio/ByteBuffer.getInt:()I
      36: istore        4
      38: iload_3
      39: iconst_1
      40: if_icmpne     58
      43: aload_1
      44: iload_3
      45: invokestatic  #51                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      48: aload_0
      49: invokestatic  #71                 // Method parseFileAttribute:(Ljava/nio/ByteBuffer;)Ljava/util/Map;
      52: invokeinterface #72,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      57: pop
      58: aload_0
      59: iload_2
      60: iload         4
      62: iadd
      63: invokevirtual #67                 // Method java/nio/Buffer.position:(I)Ljava/nio/Buffer;
      66: pop
      67: goto          8
      70: aload_1
      71: areturn

  private static java.util.Map<com.sun.jna.ELFAnalyser$ArmAeabiAttributesTag, java.lang.Object> parseFileAttribute(java.nio.ByteBuffer);
    Code:
       0: new           #68                 // class java/util/HashMap
       3: dup
       4: invokespecial #69                 // Method java/util/HashMap."<init>":()V
       7: astore_1
       8: aload_0
       9: invokevirtual #61                 // Method java/nio/ByteBuffer.position:()I
      12: aload_0
      13: invokevirtual #62                 // Method java/nio/ByteBuffer.limit:()I
      16: if_icmpge     117
      19: aload_0
      20: invokestatic  #70                 // Method readULEB128:(Ljava/nio/ByteBuffer;)Ljava/math/BigInteger;
      23: invokevirtual #58                 // Method java/math/BigInteger.intValue:()I
      26: istore_2
      27: iload_2
      28: invokestatic  #73                 // Method com/sun/jna/ELFAnalyser$ArmAeabiAttributesTag.getByValue:(I)Lcom/sun/jna/ELFAnalyser$ArmAeabiAttributesTag;
      31: astore_3
      32: getstatic     #74                 // Field com/sun/jna/ELFAnalyser$1.$SwitchMap$com$sun$jna$ELFAnalyser$ArmAeabiAttributesTag$ParameterType:[I
      35: aload_3
      36: invokevirtual #75                 // Method com/sun/jna/ELFAnalyser$ArmAeabiAttributesTag.getParameterType:()Lcom/sun/jna/ELFAnalyser$ArmAeabiAttributesTag$ParameterType;
      39: invokevirtual #76                 // Method com/sun/jna/ELFAnalyser$ArmAeabiAttributesTag$ParameterType.ordinal:()I
      42: iaload
      43: tableswitch   { // 1 to 3
                     1: 68
                     2: 86
                     3: 102
               default: 114
          }
      68: aload_1
      69: aload_3
      70: aload_0
      71: invokevirtual #63                 // Method java/nio/ByteBuffer.getInt:()I
      74: invokestatic  #51                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      77: invokeinterface #72,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      82: pop
      83: goto          114
      86: aload_1
      87: aload_3
      88: aload_0
      89: aconst_null
      90: invokestatic  #64                 // Method readNTBS:(Ljava/nio/ByteBuffer;Ljava/lang/Integer;)Ljava/lang/String;
      93: invokeinterface #72,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      98: pop
      99: goto          114
     102: aload_1
     103: aload_3
     104: aload_0
     105: invokestatic  #70                 // Method readULEB128:(Ljava/nio/ByteBuffer;)Ljava/math/BigInteger;
     108: invokeinterface #72,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     113: pop
     114: goto          8
     117: aload_1
     118: areturn

  private static java.lang.String readNTBS(java.nio.ByteBuffer, java.lang.Integer);
    Code:
       0: aload_1
       1: ifnull        13
       4: aload_0
       5: aload_1
       6: invokevirtual #77                 // Method java/lang/Integer.intValue:()I
       9: invokevirtual #67                 // Method java/nio/Buffer.position:(I)Ljava/nio/Buffer;
      12: pop
      13: aload_0
      14: invokevirtual #61                 // Method java/nio/ByteBuffer.position:()I
      17: istore_2
      18: aload_0
      19: invokevirtual #59                 // Method java/nio/ByteBuffer.get:()B
      22: istore_3
      23: iload_3
      24: ifeq          38
      27: aload_0
      28: invokevirtual #61                 // Method java/nio/ByteBuffer.position:()I
      31: aload_0
      32: invokevirtual #62                 // Method java/nio/ByteBuffer.limit:()I
      35: if_icmple     18
      38: aload_0
      39: invokevirtual #61                 // Method java/nio/ByteBuffer.position:()I
      42: istore        4
      44: iload         4
      46: iload_2
      47: isub
      48: iconst_1
      49: isub
      50: newarray       byte
      52: astore        5
      54: aload_0
      55: iload_2
      56: invokevirtual #67                 // Method java/nio/Buffer.position:(I)Ljava/nio/Buffer;
      59: pop
      60: aload_0
      61: aload         5
      63: invokevirtual #78                 // Method java/nio/ByteBuffer.get:([B)Ljava/nio/ByteBuffer;
      66: pop
      67: aload_0
      68: aload_0
      69: invokevirtual #61                 // Method java/nio/ByteBuffer.position:()I
      72: iconst_1
      73: iadd
      74: invokevirtual #67                 // Method java/nio/Buffer.position:(I)Ljava/nio/Buffer;
      77: pop
      78: new           #79                 // class java/lang/String
      81: dup
      82: aload         5
      84: ldc           #80                 // String ASCII
      86: invokespecial #81                 // Method java/lang/String."<init>":([BLjava/lang/String;)V
      89: areturn
      90: astore        6
      92: new           #83                 // class java/lang/RuntimeException
      95: dup
      96: aload         6
      98: invokespecial #84                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/Throwable;)V
     101: athrow
    Exception table:
       from    to  target type
          78    89    90   Class java/io/UnsupportedEncodingException

  private static java.math.BigInteger readULEB128(java.nio.ByteBuffer);
    Code:
       0: getstatic     #85                 // Field java/math/BigInteger.ZERO:Ljava/math/BigInteger;
       3: astore_1
       4: iconst_0
       5: istore_2
       6: aload_0
       7: invokevirtual #59                 // Method java/nio/ByteBuffer.get:()B
      10: istore_3
      11: aload_1
      12: iload_3
      13: bipush        127
      15: iand
      16: i2l
      17: invokestatic  #86                 // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;
      20: iload_2
      21: invokevirtual #87                 // Method java/math/BigInteger.shiftLeft:(I)Ljava/math/BigInteger;
      24: invokevirtual #88                 // Method java/math/BigInteger.or:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
      27: astore_1
      28: iload_3
      29: sipush        128
      32: iand
      33: ifne          39
      36: goto          45
      39: iinc          2, 7
      42: goto          6
      45: aload_1
      46: areturn

  static {};
    Code:
       0: iconst_4
       1: newarray       byte
       3: dup
       4: iconst_0
       5: bipush        127
       7: bastore
       8: dup
       9: iconst_1
      10: bipush        69
      12: bastore
      13: dup
      14: iconst_2
      15: bipush        76
      17: bastore
      18: dup
      19: iconst_3
      20: bipush        70
      22: bastore
      23: putstatic     #23                 // Field ELF_MAGIC:[B
      26: return
}
