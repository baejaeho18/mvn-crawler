Compiled from "JqwikIOExtension.java"
class de.tum.in.test.api.jqwik.JqwikIOExtension$ControllerProvider implements net.jqwik.api.providers.ArbitraryProvider {
  private final java.util.function.Predicate<java.lang.Class<?>> canProvideControllerFor;

  private final java.lang.Object controllerInstance;

  private de.tum.in.test.api.jqwik.JqwikIOExtension$ControllerProvider(java.util.function.Predicate<java.lang.Class<?>>, java.lang.Object);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field canProvideControllerFor:Ljava/util/function/Predicate;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field controllerInstance:Ljava/lang/Object;
      14: return

  public boolean canProvideFor(net.jqwik.api.providers.TypeUsage);
    Code:
       0: aload_0
       1: getfield      #2                  // Field canProvideControllerFor:Ljava/util/function/Predicate;
       4: aload_1
       5: invokeinterface #4,  1            // InterfaceMethod net/jqwik/api/providers/TypeUsage.getRawType:()Ljava/lang/Class;
      10: invokeinterface #5,  2            // InterfaceMethod java/util/function/Predicate.test:(Ljava/lang/Object;)Z
      15: ireturn

  public java.util.Set<net.jqwik.api.Arbitrary<?>> provideFor(net.jqwik.api.providers.TypeUsage, net.jqwik.api.providers.ArbitraryProvider$SubtypeProvider);
    Code:
       0: aload_0
       1: getfield      #3                  // Field controllerInstance:Ljava/lang/Object;
       4: invokestatic  #6                  // Method net/jqwik/api/Arbitraries.just:(Ljava/lang/Object;)Lnet/jqwik/api/Arbitrary;
       7: invokestatic  #7                  // InterfaceMethod java/util/Set.of:(Ljava/lang/Object;)Ljava/util/Set;
      10: areturn
}
