Compiled from "PathType.java"
final class de.tum.in.test.api.PathType$2 extends de.tum.in.test.api.PathType {
  private de.tum.in.test.api.PathType$2(java.lang.String, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokespecial #1                  // Method de/tum/in/test/api/PathType."<init>":(Ljava/lang/String;I)V
       6: return

  public java.nio.file.PathMatcher convertToPathMatcher(java.lang.String);
    Code:
       0: aload_1
       1: iconst_0
       2: anewarray     #2                  // class java/lang/String
       5: invokestatic  #3                  // InterfaceMethod java/nio/file/Path.of:(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;
       8: invokeinterface #4,  1            // InterfaceMethod java/nio/file/Path.toAbsolutePath:()Ljava/nio/file/Path;
      13: invokeinterface #5,  1            // InterfaceMethod java/nio/file/Path.normalize:()Ljava/nio/file/Path;
      18: astore_2
      19: aload_2
      20: invokedynamic #6,  0              // InvokeDynamic #0:matches:(Ljava/nio/file/Path;)Ljava/nio/file/PathMatcher;
      25: areturn

  public boolean isPatternRecursive(java.lang.String);
    Code:
       0: iconst_1
       1: ireturn

  private static boolean lambda$convertToPathMatcher$0(java.nio.file.Path, java.nio.file.Path);
    Code:
       0: aload_1
       1: invokeinterface #5,  1            // InterfaceMethod java/nio/file/Path.normalize:()Ljava/nio/file/Path;
       6: aload_0
       7: invokeinterface #7,  2            // InterfaceMethod java/nio/file/Path.startsWith:(Ljava/nio/file/Path;)Z
      12: ireturn
}
