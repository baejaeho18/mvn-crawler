Compiled from "JqwikContext.java"
public class de.tum.in.test.api.jqwik.JqwikContext extends de.tum.in.test.api.context.TestContext {
  private final net.jqwik.api.lifecycle.PropertyLifecycleContext lifecycleContext;

  de.tum.in.test.api.jqwik.JqwikContext(net.jqwik.api.lifecycle.PropertyLifecycleContext);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method de/tum/in/test/api/context/TestContext."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field lifecycleContext:Lnet/jqwik/api/lifecycle/PropertyLifecycleContext;
       9: return

  public java.util.Optional<java.lang.reflect.Method> testMethod();
    Code:
       0: aload_0
       1: getfield      #2                  // Field lifecycleContext:Lnet/jqwik/api/lifecycle/PropertyLifecycleContext;
       4: invokeinterface #3,  1            // InterfaceMethod net/jqwik/api/lifecycle/PropertyLifecycleContext.targetMethod:()Ljava/lang/reflect/Method;
       9: invokestatic  #4                  // Method java/util/Optional.ofNullable:(Ljava/lang/Object;)Ljava/util/Optional;
      12: areturn

  public java.util.Optional<java.lang.Class<?>> testClass();
    Code:
       0: aload_0
       1: getfield      #2                  // Field lifecycleContext:Lnet/jqwik/api/lifecycle/PropertyLifecycleContext;
       4: invokeinterface #5,  1            // InterfaceMethod net/jqwik/api/lifecycle/PropertyLifecycleContext.containerClass:()Ljava/lang/Class;
       9: invokestatic  #4                  // Method java/util/Optional.ofNullable:(Ljava/lang/Object;)Ljava/util/Optional;
      12: areturn

  public java.util.Optional<java.lang.Object> testInstance();
    Code:
       0: aload_0
       1: getfield      #2                  // Field lifecycleContext:Lnet/jqwik/api/lifecycle/PropertyLifecycleContext;
       4: invokeinterface #6,  1            // InterfaceMethod net/jqwik/api/lifecycle/PropertyLifecycleContext.testInstance:()Ljava/lang/Object;
       9: invokestatic  #4                  // Method java/util/Optional.ofNullable:(Ljava/lang/Object;)Ljava/util/Optional;
      12: areturn

  public java.util.Optional<java.lang.reflect.AnnotatedElement> annotatedElement();
    Code:
       0: aload_0
       1: getfield      #2                  // Field lifecycleContext:Lnet/jqwik/api/lifecycle/PropertyLifecycleContext;
       4: invokeinterface #7,  1            // InterfaceMethod net/jqwik/api/lifecycle/PropertyLifecycleContext.optionalElement:()Ljava/util/Optional;
       9: areturn

  public java.util.Optional<java.lang.String> displayName();
    Code:
       0: aload_0
       1: getfield      #2                  // Field lifecycleContext:Lnet/jqwik/api/lifecycle/PropertyLifecycleContext;
       4: invokeinterface #8,  1            // InterfaceMethod net/jqwik/api/lifecycle/PropertyLifecycleContext.label:()Ljava/lang/String;
       9: invokestatic  #9                  // Method java/util/Optional.of:(Ljava/lang/Object;)Ljava/util/Optional;
      12: areturn

  public net.jqwik.api.lifecycle.PropertyLifecycleContext getPropertyLifecycleContext();
    Code:
       0: aload_0
       1: getfield      #2                  // Field lifecycleContext:Lnet/jqwik/api/lifecycle/PropertyLifecycleContext;
       4: areturn

  public static de.tum.in.test.api.jqwik.JqwikContext of(net.jqwik.api.lifecycle.PropertyLifecycleContext);
    Code:
       0: new           #10                 // class de/tum/in/test/api/jqwik/JqwikContext
       3: dup
       4: aload_0
       5: invokespecial #11                 // Method "<init>":(Lnet/jqwik/api/lifecycle/PropertyLifecycleContext;)V
       8: areturn

  public java.util.Optional<de.tum.in.test.api.context.TestType> findTestType();
    Code:
       0: aload_0
       1: ldc           #12                 // class de/tum/in/test/api/jqwik/JqwikAresTest
       3: invokestatic  #13                 // Method de/tum/in/test/api/context/TestContextUtils.findAnnotationIn:(Lde/tum/in/test/api/context/TestContext;Ljava/lang/Class;)Ljava/util/Optional;
       6: invokedynamic #14,  0             // InvokeDynamic #0:apply:()Ljava/util/function/Function;
      11: invokevirtual #15                 // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
      14: areturn
}
