Compiled from "TimeoutUtils.java"
class de.tum.in.test.api.internal.TimeoutUtils$WhitelistedThreadFactory implements java.util.concurrent.ThreadFactory {
  private static final java.util.concurrent.atomic.AtomicInteger TIMEOUT_THREAD_ID;

  private de.tum.in.test.api.internal.TimeoutUtils$WhitelistedThreadFactory();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public java.lang.Thread newThread(java.lang.Runnable);
    Code:
       0: new           #2                  // class java/lang/Thread
       3: dup
       4: aload_1
       5: getstatic     #3                  // Field TIMEOUT_THREAD_ID:Ljava/util/concurrent/atomic/AtomicInteger;
       8: invokevirtual #4                  // Method java/util/concurrent/atomic/AtomicInteger.getAndIncrement:()I
      11: invokedynamic #5,  0              // InvokeDynamic #0:makeConcatWithConstants:(I)Ljava/lang/String;
      16: invokespecial #6                  // Method java/lang/Thread."<init>":(Ljava/lang/Runnable;Ljava/lang/String;)V
      19: astore_2
      20: aload_2
      21: invokevirtual #7                  // Method java/lang/Thread.getPriority:()I
      24: iconst_5
      25: if_icmpeq     33
      28: aload_2
      29: iconst_5
      30: invokevirtual #8                  // Method java/lang/Thread.setPriority:(I)V
      33: aload_2
      34: invokestatic  #9                  // Method de/tum/in/test/api/security/ArtemisSecurityManager.requestThreadWhitelisting:(Ljava/lang/Thread;)V
      37: aload_2
      38: areturn

  static {};
    Code:
       0: new           #10                 // class java/util/concurrent/atomic/AtomicInteger
       3: dup
       4: iconst_1
       5: invokespecial #11                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
       8: putstatic     #3                  // Field TIMEOUT_THREAD_ID:Ljava/util/concurrent/atomic/AtomicInteger;
      11: return
}
