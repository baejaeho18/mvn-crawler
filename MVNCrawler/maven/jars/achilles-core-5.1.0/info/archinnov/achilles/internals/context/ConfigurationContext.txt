Compiled from "ConfigurationContext.java"
public class info.archinnov.achilles.internals.context.ConfigurationContext {
  private static final org.slf4j.Logger LOGGER;

  public static final com.datastax.driver.core.ConsistencyLevel DEFAULT_CONSISTENCY_LEVEL;

  public static final com.datastax.driver.core.ConsistencyLevel DEFAULT_SERIAL_CONSISTENCY_LEVEL;

  private boolean forceSchemaGeneration;

  private java.util.List<java.lang.Class<?>> manageEntities;

  private info.archinnov.achilles.json.JacksonMapperFactory jacksonMapperFactory;

  private java.util.Optional<com.datastax.driver.core.ConsistencyLevel> defaultReadConsistencyLevel;

  private java.util.Optional<com.datastax.driver.core.ConsistencyLevel> defaultWriteConsistencyLevel;

  private java.util.Optional<com.datastax.driver.core.ConsistencyLevel> defaultSerialConsistencyLevel;

  private java.util.Map<java.lang.String, com.datastax.driver.core.ConsistencyLevel> readConsistencyLevelMap;

  private java.util.Map<java.lang.String, com.datastax.driver.core.ConsistencyLevel> writeConsistencyLevelMap;

  private java.util.Map<java.lang.String, com.datastax.driver.core.ConsistencyLevel> serialConsistencyLevelMap;

  private javax.validation.Validator beanValidator;

  private info.archinnov.achilles.internals.interceptor.DefaultPreMutateBeanValidationInterceptor preMutateBeanValidationInterceptor;

  private java.util.Optional<info.archinnov.achilles.internals.interceptor.DefaultPostLoadBeanValidationInterceptor> postLoadBeanValidationInterceptor;

  private java.util.List<info.archinnov.achilles.type.interceptor.Interceptor<?>> interceptors;

  private int preparedStatementLRUCacheSize;

  private info.archinnov.achilles.type.strategy.InsertStrategy globalInsertStrategy;

  private info.archinnov.achilles.type.strategy.NamingStrategy globalNamingStrategy;

  private java.util.Optional<java.lang.String> currentKeyspace;

  private java.util.concurrent.ExecutorService executorService;

  private boolean providedExecutorService;

  private info.archinnov.achilles.type.factory.BeanFactory defaultBeanFactory;

  private com.datastax.driver.core.Session session;

  private boolean providedSession;

  private java.util.Optional<info.archinnov.achilles.type.SchemaNameProvider> schemaNameProvider;

  private info.archinnov.achilles.internals.cache.StatementsCache statementsCache;

  private java.util.Map<info.archinnov.achilles.type.codec.CodecSignature<?, ?>, info.archinnov.achilles.type.codec.Codec<?, ?>> runtimeCodecs;

  public info.archinnov.achilles.internals.context.ConfigurationContext();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/HashMap
       8: dup
       9: invokespecial #3                  // Method java/util/HashMap."<init>":()V
      12: putfield      #4                  // Field readConsistencyLevelMap:Ljava/util/Map;
      15: aload_0
      16: new           #2                  // class java/util/HashMap
      19: dup
      20: invokespecial #3                  // Method java/util/HashMap."<init>":()V
      23: putfield      #5                  // Field writeConsistencyLevelMap:Ljava/util/Map;
      26: aload_0
      27: new           #2                  // class java/util/HashMap
      30: dup
      31: invokespecial #3                  // Method java/util/HashMap."<init>":()V
      34: putfield      #6                  // Field serialConsistencyLevelMap:Ljava/util/Map;
      37: aload_0
      38: invokestatic  #7                  // Method java/util/Optional.empty:()Ljava/util/Optional;
      41: putfield      #8                  // Field postLoadBeanValidationInterceptor:Ljava/util/Optional;
      44: aload_0
      45: invokestatic  #7                  // Method java/util/Optional.empty:()Ljava/util/Optional;
      48: putfield      #9                  // Field currentKeyspace:Ljava/util/Optional;
      51: aload_0
      52: iconst_0
      53: putfield      #10                 // Field providedSession:Z
      56: aload_0
      57: invokestatic  #7                  // Method java/util/Optional.empty:()Ljava/util/Optional;
      60: putfield      #11                 // Field schemaNameProvider:Ljava/util/Optional;
      63: aload_0
      64: new           #2                  // class java/util/HashMap
      67: dup
      68: invokespecial #3                  // Method java/util/HashMap."<init>":()V
      71: putfield      #12                 // Field runtimeCodecs:Ljava/util/Map;
      74: return

  public boolean isForceSchemaGeneration();
    Code:
       0: aload_0
       1: getfield      #13                 // Field forceSchemaGeneration:Z
       4: ireturn

  public void setForceSchemaGeneration(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #13                 // Field forceSchemaGeneration:Z
       5: return

  public java.util.List<java.lang.Class<?>> getManageEntities();
    Code:
       0: aload_0
       1: getfield      #14                 // Field manageEntities:Ljava/util/List;
       4: areturn

  public void setManageEntities(java.util.List<java.lang.Class<?>>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #14                 // Field manageEntities:Ljava/util/List;
       5: return

  public info.archinnov.achilles.json.JacksonMapperFactory getJacksonMapperFactory();
    Code:
       0: aload_0
       1: getfield      #15                 // Field jacksonMapperFactory:Linfo/archinnov/achilles/json/JacksonMapperFactory;
       4: areturn

  public void setJacksonMapperFactory(info.archinnov.achilles.json.JacksonMapperFactory);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #15                 // Field jacksonMapperFactory:Linfo/archinnov/achilles/json/JacksonMapperFactory;
       5: return

  public java.util.Optional<com.datastax.driver.core.ConsistencyLevel> getDefaultReadConsistencyLevel();
    Code:
       0: aload_0
       1: getfield      #16                 // Field defaultReadConsistencyLevel:Ljava/util/Optional;
       4: areturn

  public void setDefaultReadConsistencyLevel(java.util.Optional<com.datastax.driver.core.ConsistencyLevel>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #16                 // Field defaultReadConsistencyLevel:Ljava/util/Optional;
       5: return

  public java.util.Optional<com.datastax.driver.core.ConsistencyLevel> getDefaultWriteConsistencyLevel();
    Code:
       0: aload_0
       1: getfield      #17                 // Field defaultWriteConsistencyLevel:Ljava/util/Optional;
       4: areturn

  public void setDefaultWriteConsistencyLevel(java.util.Optional<com.datastax.driver.core.ConsistencyLevel>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #17                 // Field defaultWriteConsistencyLevel:Ljava/util/Optional;
       5: return

  public java.util.Optional<com.datastax.driver.core.ConsistencyLevel> getDefaultSerialConsistencyLevel();
    Code:
       0: aload_0
       1: getfield      #18                 // Field defaultSerialConsistencyLevel:Ljava/util/Optional;
       4: areturn

  public void setDefaultSerialConsistencyLevel(java.util.Optional<com.datastax.driver.core.ConsistencyLevel>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #18                 // Field defaultSerialConsistencyLevel:Ljava/util/Optional;
       5: return

  public javax.validation.Validator getBeanValidator();
    Code:
       0: aload_0
       1: getfield      #19                 // Field beanValidator:Ljavax/validation/Validator;
       4: areturn

  public void setBeanValidator(javax.validation.Validator);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #19                 // Field beanValidator:Ljavax/validation/Validator;
       5: aload_0
       6: new           #20                 // class info/archinnov/achilles/internals/interceptor/DefaultPreMutateBeanValidationInterceptor
       9: dup
      10: aload_1
      11: invokespecial #21                 // Method info/archinnov/achilles/internals/interceptor/DefaultPreMutateBeanValidationInterceptor."<init>":(Ljavax/validation/Validator;)V
      14: putfield      #22                 // Field preMutateBeanValidationInterceptor:Linfo/archinnov/achilles/internals/interceptor/DefaultPreMutateBeanValidationInterceptor;
      17: return

  public void setPostLoadBeanValidationEnabled(boolean);
    Code:
       0: iload_1
       1: ifeq          22
       4: aload_0
       5: new           #23                 // class info/archinnov/achilles/internals/interceptor/DefaultPostLoadBeanValidationInterceptor
       8: dup
       9: aload_0
      10: getfield      #19                 // Field beanValidator:Ljavax/validation/Validator;
      13: invokespecial #24                 // Method info/archinnov/achilles/internals/interceptor/DefaultPostLoadBeanValidationInterceptor."<init>":(Ljavax/validation/Validator;)V
      16: invokestatic  #25                 // Method java/util/Optional.of:(Ljava/lang/Object;)Ljava/util/Optional;
      19: putfield      #8                  // Field postLoadBeanValidationInterceptor:Ljava/util/Optional;
      22: return

  public java.util.List<info.archinnov.achilles.type.interceptor.Interceptor<?>> getInterceptors();
    Code:
       0: aload_0
       1: getfield      #26                 // Field interceptors:Ljava/util/List;
       4: areturn

  public void setInterceptors(java.util.List<info.archinnov.achilles.type.interceptor.Interceptor<?>>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #26                 // Field interceptors:Ljava/util/List;
       5: return

  public int getPreparedStatementLRUCacheSize();
    Code:
       0: aload_0
       1: getfield      #27                 // Field preparedStatementLRUCacheSize:I
       4: ireturn

  public void setPreparedStatementLRUCacheSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #27                 // Field preparedStatementLRUCacheSize:I
       5: return

  public info.archinnov.achilles.type.strategy.InsertStrategy getGlobalInsertStrategy();
    Code:
       0: aload_0
       1: getfield      #28                 // Field globalInsertStrategy:Linfo/archinnov/achilles/type/strategy/InsertStrategy;
       4: areturn

  public void setGlobalInsertStrategy(info.archinnov.achilles.type.strategy.InsertStrategy);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #28                 // Field globalInsertStrategy:Linfo/archinnov/achilles/type/strategy/InsertStrategy;
       5: return

  public info.archinnov.achilles.type.strategy.NamingStrategy getGlobalNamingStrategy();
    Code:
       0: aload_0
       1: getfield      #29                 // Field globalNamingStrategy:Linfo/archinnov/achilles/type/strategy/NamingStrategy;
       4: areturn

  public void setGlobalNamingStrategy(info.archinnov.achilles.type.strategy.NamingStrategy);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #29                 // Field globalNamingStrategy:Linfo/archinnov/achilles/type/strategy/NamingStrategy;
       5: return

  public boolean isClassConstrained(java.lang.Class<?>);
    Code:
       0: aload_0
       1: getfield      #19                 // Field beanValidator:Ljavax/validation/Validator;
       4: ifnull        23
       7: aload_0
       8: getfield      #19                 // Field beanValidator:Ljavax/validation/Validator;
      11: aload_1
      12: invokeinterface #30,  2           // InterfaceMethod javax/validation/Validator.getConstraintsForClass:(Ljava/lang/Class;)Ljavax/validation/metadata/BeanDescriptor;
      17: invokeinterface #31,  1           // InterfaceMethod javax/validation/metadata/BeanDescriptor.isBeanConstrained:()Z
      22: ireturn
      23: iconst_0
      24: ireturn

  public com.datastax.driver.core.ConsistencyLevel getReadConsistencyLevelForTable(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #4                  // Field readConsistencyLevelMap:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #32,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #33                 // class com/datastax/driver/core/ConsistencyLevel
      13: areturn

  public com.datastax.driver.core.ConsistencyLevel getWriteConsistencyLevelForTable(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #5                  // Field writeConsistencyLevelMap:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #32,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #33                 // class com/datastax/driver/core/ConsistencyLevel
      13: areturn

  public com.datastax.driver.core.ConsistencyLevel getSerialConsistencyLevelForTable(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #6                  // Field serialConsistencyLevelMap:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #32,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #33                 // class com/datastax/driver/core/ConsistencyLevel
      13: areturn

  public com.fasterxml.jackson.databind.ObjectMapper getMapperFor(java.lang.Class<?>);
    Code:
       0: aload_0
       1: getfield      #15                 // Field jacksonMapperFactory:Linfo/archinnov/achilles/json/JacksonMapperFactory;
       4: aload_1
       5: invokeinterface #34,  2           // InterfaceMethod info/archinnov/achilles/json/JacksonMapperFactory.getMapper:(Ljava/lang/Class;)Lcom/fasterxml/jackson/databind/ObjectMapper;
      10: areturn

  public void setReadConsistencyLevelMap(java.util.Map<java.lang.String, com.datastax.driver.core.ConsistencyLevel>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field readConsistencyLevelMap:Ljava/util/Map;
       5: return

  public void setWriteConsistencyLevelMap(java.util.Map<java.lang.String, com.datastax.driver.core.ConsistencyLevel>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field writeConsistencyLevelMap:Ljava/util/Map;
       5: return

  public void setSerialConsistencyLevelMap(java.util.Map<java.lang.String, com.datastax.driver.core.ConsistencyLevel>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field serialConsistencyLevelMap:Ljava/util/Map;
       5: return

  public java.util.Optional<java.lang.String> getCurrentKeyspace();
    Code:
       0: aload_0
       1: getfield      #9                  // Field currentKeyspace:Ljava/util/Optional;
       4: areturn

  public void setCurrentKeyspace(java.util.Optional<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #9                  // Field currentKeyspace:Ljava/util/Optional;
       5: return

  public java.util.concurrent.ExecutorService getExecutorService();
    Code:
       0: aload_0
       1: getfield      #35                 // Field executorService:Ljava/util/concurrent/ExecutorService;
       4: areturn

  public void setExecutorService(java.util.concurrent.ExecutorService);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #35                 // Field executorService:Ljava/util/concurrent/ExecutorService;
       5: return

  public info.archinnov.achilles.type.factory.BeanFactory getDefaultBeanFactory();
    Code:
       0: aload_0
       1: getfield      #36                 // Field defaultBeanFactory:Linfo/archinnov/achilles/type/factory/BeanFactory;
       4: areturn

  public void setDefaultBeanFactory(info.archinnov.achilles.type.factory.BeanFactory);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #36                 // Field defaultBeanFactory:Linfo/archinnov/achilles/type/factory/BeanFactory;
       5: return

  public com.datastax.driver.core.Session getSession();
    Code:
       0: aload_0
       1: getfield      #37                 // Field session:Lcom/datastax/driver/core/Session;
       4: areturn

  public void setSession(com.datastax.driver.core.Session);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #37                 // Field session:Lcom/datastax/driver/core/Session;
       5: return

  public java.util.Optional<info.archinnov.achilles.type.SchemaNameProvider> getSchemaNameProvider();
    Code:
       0: aload_0
       1: getfield      #11                 // Field schemaNameProvider:Ljava/util/Optional;
       4: areturn

  public void setSchemaNameProvider(java.util.Optional<info.archinnov.achilles.type.SchemaNameProvider>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #11                 // Field schemaNameProvider:Ljava/util/Optional;
       5: return

  public boolean isProvidedSession();
    Code:
       0: aload_0
       1: getfield      #10                 // Field providedSession:Z
       4: ireturn

  public void setProvidedSession(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #10                 // Field providedSession:Z
       5: return

  public boolean isProvidedExecutorService();
    Code:
       0: aload_0
       1: getfield      #38                 // Field providedExecutorService:Z
       4: ireturn

  public void setProvidedExecutorService(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #38                 // Field providedExecutorService:Z
       5: return

  public void injectDependencies(info.archinnov.achilles.internals.factory.TupleTypeFactory, info.archinnov.achilles.internals.factory.UserTypeFactory, info.archinnov.achilles.internals.metamodel.AbstractEntityProperty<?>);
    Code:
       0: getstatic     #39                 // Field LOGGER:Lorg/slf4j/Logger;
       3: ldc           #40                 // String Start injecting dependencies to meta classes
       5: invokeinterface #41,  2           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;)V
      10: aload_3
      11: getfield      #42                 // Field info/archinnov/achilles/internals/metamodel/AbstractEntityProperty.entityClass:Ljava/lang/Class;
      14: astore        4
      16: aload         4
      18: invokevirtual #43                 // Method java/lang/Class.getCanonicalName:()Ljava/lang/String;
      21: astore        5
      23: aload_0
      24: getfield      #9                  // Field currentKeyspace:Ljava/util/Optional;
      27: invokevirtual #44                 // Method java/util/Optional.isPresent:()Z
      30: ifeq          57
      33: getstatic     #39                 // Field LOGGER:Lorg/slf4j/Logger;
      36: ldc           #45                 // String Injecting current global keyspace
      38: invokeinterface #46,  2           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
      43: aload_3
      44: aload_0
      45: getfield      #9                  // Field currentKeyspace:Ljava/util/Optional;
      48: invokevirtual #47                 // Method java/util/Optional.get:()Ljava/lang/Object;
      51: checkcast     #48                 // class java/lang/String
      54: invokevirtual #49                 // Method info/archinnov/achilles/internals/metamodel/AbstractEntityProperty.injectKeyspace:(Ljava/lang/String;)V
      57: aload_0
      58: getfield      #11                 // Field schemaNameProvider:Ljava/util/Optional;
      61: invokevirtual #44                 // Method java/util/Optional.isPresent:()Z
      64: ifeq          91
      67: getstatic     #39                 // Field LOGGER:Lorg/slf4j/Logger;
      70: ldc           #50                 // String Injecting schema name provider
      72: invokeinterface #46,  2           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
      77: aload_3
      78: aload_0
      79: getfield      #11                 // Field schemaNameProvider:Ljava/util/Optional;
      82: invokevirtual #47                 // Method java/util/Optional.get:()Ljava/lang/Object;
      85: checkcast     #51                 // class info/archinnov/achilles/type/SchemaNameProvider
      88: invokevirtual #52                 // Method info/archinnov/achilles/internals/metamodel/AbstractEntityProperty.inject:(Linfo/archinnov/achilles/type/SchemaNameProvider;)V
      91: getstatic     #39                 // Field LOGGER:Lorg/slf4j/Logger;
      94: ldc           #53                 // String Injecting default bean factory
      96: invokeinterface #46,  2           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
     101: aload_3
     102: aload_0
     103: getfield      #36                 // Field defaultBeanFactory:Linfo/archinnov/achilles/type/factory/BeanFactory;
     106: invokevirtual #54                 // Method info/archinnov/achilles/internals/metamodel/AbstractEntityProperty.inject:(Linfo/archinnov/achilles/type/factory/BeanFactory;)V
     109: getstatic     #39                 // Field LOGGER:Lorg/slf4j/Logger;
     112: ldc           #55                 // String Injecting Jackson mapper
     114: invokeinterface #46,  2           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
     119: aload_3
     120: aload_0
     121: getfield      #15                 // Field jacksonMapperFactory:Linfo/archinnov/achilles/json/JacksonMapperFactory;
     124: aload         4
     126: invokeinterface #34,  2           // InterfaceMethod info/archinnov/achilles/json/JacksonMapperFactory.getMapper:(Ljava/lang/Class;)Lcom/fasterxml/jackson/databind/ObjectMapper;
     131: invokevirtual #56                 // Method info/archinnov/achilles/internals/metamodel/AbstractEntityProperty.inject:(Lcom/fasterxml/jackson/databind/ObjectMapper;)V
     134: getstatic     #39                 // Field LOGGER:Lorg/slf4j/Logger;
     137: ldc           #57                 // String Injecting global Insert strategy
     139: invokeinterface #46,  2           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
     144: aload_3
     145: aload_0
     146: getfield      #28                 // Field globalInsertStrategy:Linfo/archinnov/achilles/type/strategy/InsertStrategy;
     149: invokevirtual #58                 // Method info/archinnov/achilles/internals/metamodel/AbstractEntityProperty.inject:(Linfo/archinnov/achilles/type/strategy/InsertStrategy;)V
     152: aload_0
     153: getfield      #26                 // Field interceptors:Ljava/util/List;
     156: invokeinterface #59,  1           // InterfaceMethod java/util/List.isEmpty:()Z
     161: ifne          224
     164: getstatic     #39                 // Field LOGGER:Lorg/slf4j/Logger;
     167: ldc           #60                 // String Injecting bean interceptors
     169: invokeinterface #46,  2           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
     174: aload_0
     175: getfield      #26                 // Field interceptors:Ljava/util/List;
     178: invokeinterface #61,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
     183: aload         4
     185: invokedynamic #62,  0             // InvokeDynamic #0:test:(Ljava/lang/Class;)Ljava/util/function/Predicate;
     190: invokeinterface #63,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
     195: invokedynamic #64,  0             // InvokeDynamic #1:apply:()Ljava/util/function/Function;
     200: invokeinterface #65,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
     205: aload_3
     206: getfield      #66                 // Field info/archinnov/achilles/internals/metamodel/AbstractEntityProperty.interceptors:Ljava/util/List;
     209: dup
     210: invokevirtual #67                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
     213: pop
     214: invokedynamic #68,  0             // InvokeDynamic #2:accept:(Ljava/util/List;)Ljava/util/function/Consumer;
     219: invokeinterface #69,  2           // InterfaceMethod java/util/stream/Stream.forEach:(Ljava/util/function/Consumer;)V
     224: aload_0
     225: getfield      #19                 // Field beanValidator:Ljavax/validation/Validator;
     228: ifnull        301
     231: aload_0
     232: aload         4
     234: invokevirtual #70                 // Method isClassConstrained:(Ljava/lang/Class;)Z
     237: ifeq          301
     240: getstatic     #39                 // Field LOGGER:Lorg/slf4j/Logger;
     243: ldc           #71                 // String Injecting Bean validator (JSR 303)
     245: invokeinterface #46,  2           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
     250: aload_3
     251: invokevirtual #72                 // Method info/archinnov/achilles/internals/metamodel/AbstractEntityProperty.isTable:()Z
     254: ifeq          271
     257: aload_3
     258: getfield      #66                 // Field info/archinnov/achilles/internals/metamodel/AbstractEntityProperty.interceptors:Ljava/util/List;
     261: aload_0
     262: getfield      #22                 // Field preMutateBeanValidationInterceptor:Linfo/archinnov/achilles/internals/interceptor/DefaultPreMutateBeanValidationInterceptor;
     265: invokeinterface #73,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     270: pop
     271: aload_0
     272: getfield      #8                  // Field postLoadBeanValidationInterceptor:Ljava/util/Optional;
     275: invokevirtual #44                 // Method java/util/Optional.isPresent:()Z
     278: ifeq          301
     281: aload_3
     282: getfield      #66                 // Field info/archinnov/achilles/internals/metamodel/AbstractEntityProperty.interceptors:Ljava/util/List;
     285: iconst_0
     286: aload_0
     287: getfield      #8                  // Field postLoadBeanValidationInterceptor:Ljava/util/Optional;
     290: invokevirtual #47                 // Method java/util/Optional.get:()Ljava/lang/Object;
     293: checkcast     #74                 // class info/archinnov/achilles/type/interceptor/Interceptor
     296: invokeinterface #75,  3           // InterfaceMethod java/util/List.add:(ILjava/lang/Object;)V
     301: getstatic     #39                 // Field LOGGER:Lorg/slf4j/Logger;
     304: ldc           #76                 // String Injecting global consistency levels
     306: invokeinterface #46,  2           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
     311: aload_3
     312: aload_0
     313: getfield      #37                 // Field session:Lcom/datastax/driver/core/Session;
     316: aload_0
     317: invokevirtual #77                 // Method info/archinnov/achilles/internals/metamodel/AbstractEntityProperty.injectConsistencyLevels:(Lcom/datastax/driver/core/Session;Linfo/archinnov/achilles/internals/context/ConfigurationContext;)V
     320: getstatic     #39                 // Field LOGGER:Lorg/slf4j/Logger;
     323: ldc           #78                 // String Injecting runtime codecs
     325: invokeinterface #46,  2           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
     330: aload_3
     331: aload_0
     332: getfield      #12                 // Field runtimeCodecs:Ljava/util/Map;
     335: invokevirtual #79                 // Method info/archinnov/achilles/internals/metamodel/AbstractEntityProperty.injectRuntimeCodecs:(Ljava/util/Map;)V
     338: getstatic     #39                 // Field LOGGER:Lorg/slf4j/Logger;
     341: ldc           #80                 // String Injecting user type factory and tuple type factory
     343: invokeinterface #46,  2           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
     348: aload_3
     349: aload_2
     350: aload_1
     351: invokevirtual #81                 // Method info/archinnov/achilles/internals/metamodel/AbstractEntityProperty.inject:(Linfo/archinnov/achilles/internals/factory/UserTypeFactory;Linfo/archinnov/achilles/internals/factory/TupleTypeFactory;)V
     354: return

  public info.archinnov.achilles.internals.cache.StatementsCache getStatementsCache();
    Code:
       0: aload_0
       1: getfield      #82                 // Field statementsCache:Linfo/archinnov/achilles/internals/cache/StatementsCache;
       4: areturn

  public void setStatementsCache(info.archinnov.achilles.internals.cache.StatementsCache);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #82                 // Field statementsCache:Linfo/archinnov/achilles/internals/cache/StatementsCache;
       5: return

  public java.util.Map<info.archinnov.achilles.type.codec.CodecSignature<?, ?>, info.archinnov.achilles.type.codec.Codec<?, ?>> getRuntimeCodecs();
    Code:
       0: aload_0
       1: getfield      #12                 // Field runtimeCodecs:Ljava/util/Map;
       4: areturn

  public void setRuntimeCodecs(java.util.Map<info.archinnov.achilles.type.codec.CodecSignature<?, ?>, info.archinnov.achilles.type.codec.Codec<?, ?>>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #12                 // Field runtimeCodecs:Ljava/util/Map;
       5: return

  private static info.archinnov.achilles.type.interceptor.Interceptor lambda$injectDependencies$383(info.archinnov.achilles.type.interceptor.Interceptor);
    Code:
       0: aload_0
       1: areturn

  private static boolean lambda$injectDependencies$382(java.lang.Class, info.archinnov.achilles.type.interceptor.Interceptor);
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #83,  2           // InterfaceMethod info/archinnov/achilles/type/interceptor/Interceptor.acceptEntity:(Ljava/lang/Class;)Z
       7: ireturn

  static {};
    Code:
       0: ldc           #84                 // class info/archinnov/achilles/internals/context/ConfigurationContext
       2: invokestatic  #85                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #39                 // Field LOGGER:Lorg/slf4j/Logger;
       8: getstatic     #86                 // Field com/datastax/driver/core/ConsistencyLevel.LOCAL_ONE:Lcom/datastax/driver/core/ConsistencyLevel;
      11: putstatic     #87                 // Field DEFAULT_CONSISTENCY_LEVEL:Lcom/datastax/driver/core/ConsistencyLevel;
      14: getstatic     #88                 // Field com/datastax/driver/core/ConsistencyLevel.LOCAL_SERIAL:Lcom/datastax/driver/core/ConsistencyLevel;
      17: putstatic     #89                 // Field DEFAULT_SERIAL_CONSISTENCY_LEVEL:Lcom/datastax/driver/core/ConsistencyLevel;
      20: return
}
