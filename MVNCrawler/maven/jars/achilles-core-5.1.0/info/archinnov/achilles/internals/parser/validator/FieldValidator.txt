Compiled from "FieldValidator.java"
public abstract class info.archinnov.achilles.internals.parser.validator.FieldValidator {
  public info.archinnov.achilles.internals.parser.validator.FieldValidator();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public abstract void validateCompatibleIndexAnnotationsOnField(info.archinnov.achilles.internals.parser.context.GlobalParsingContext, info.archinnov.achilles.internals.apt.AptUtils, java.lang.String, com.squareup.javapoet.TypeName, java.util.Optional<info.archinnov.achilles.annotations.Index>, java.util.Optional<info.archinnov.achilles.annotations.SASI>, java.util.Optional<info.archinnov.achilles.annotations.DSE_Search>);

  public abstract void validateSASIIndex(info.archinnov.achilles.internals.apt.AptUtils, info.archinnov.achilles.internals.parser.FieldParser$FieldMetaSignature);

  public abstract void validateDSESearchIndex(info.archinnov.achilles.internals.apt.AptUtils, info.archinnov.achilles.internals.parser.FieldParser$FieldMetaSignature);

  public void checkNoMutuallyExclusiveAnnotations(info.archinnov.achilles.internals.apt.AptUtils, java.lang.String, com.squareup.javapoet.TypeName, java.util.List<java.util.Optional<? extends java.lang.annotation.Annotation>>);
    Code:
       0: aload         4
       2: invokeinterface #2,  1            // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
       7: invokedynamic #3,  0              // InvokeDynamic #0:test:()Ljava/util/function/Predicate;
      12: invokeinterface #4,  2            // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      17: aload         4
      19: aload_1
      20: aload_2
      21: aload_3
      22: invokedynamic #5,  0              // InvokeDynamic #1:accept:(Ljava/util/List;Linfo/archinnov/achilles/internals/apt/AptUtils;Ljava/lang/String;Lcom/squareup/javapoet/TypeName;)Ljava/util/function/Consumer;
      27: invokeinterface #6,  2            // InterfaceMethod java/util/stream/Stream.forEach:(Ljava/util/function/Consumer;)V
      32: return

  public void checkNoMutuallyExclusiveCodecAnnotations(info.archinnov.achilles.internals.apt.AptUtils, java.lang.String, javax.lang.model.element.Name, java.util.List<? extends java.lang.annotation.Annotation>);
    Code:
       0: new           #7                  // class java/util/ArrayList
       3: dup
       4: aload         4
       6: invokespecial #8                  // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
       9: astore        5
      11: aload         5
      13: iconst_0
      14: invokevirtual #9                  // Method java/util/ArrayList.remove:(I)Ljava/lang/Object;
      17: checkcast     #10                 // class java/lang/annotation/Annotation
      20: astore        6
      22: aload         5
      24: aload         6
      26: invokevirtual #11                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
      29: pop
      30: iconst_0
      31: istore        7
      33: iload         7
      35: aload         4
      37: invokeinterface #12,  1           // InterfaceMethod java/util/List.size:()I
      42: if_icmpge     175
      45: aload         4
      47: iload         7
      49: invokeinterface #13,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      54: checkcast     #10                 // class java/lang/annotation/Annotation
      57: astore        8
      59: aload         5
      61: iload         7
      63: invokevirtual #14                 // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
      66: checkcast     #10                 // class java/lang/annotation/Annotation
      69: astore        9
      71: aload         8
      73: ifnull        169
      76: aload         9
      78: ifnull        169
      81: new           #15                 // class java/lang/StringBuilder
      84: dup
      85: invokespecial #16                 // Method java/lang/StringBuilder."<init>":()V
      88: ldc           #17                 // String @
      90: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      93: aload         8
      95: invokeinterface #19,  1           // InterfaceMethod java/lang/annotation/Annotation.annotationType:()Ljava/lang/Class;
     100: invokevirtual #20                 // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
     103: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     106: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     109: astore        10
     111: new           #15                 // class java/lang/StringBuilder
     114: dup
     115: invokespecial #16                 // Method java/lang/StringBuilder."<init>":()V
     118: ldc           #17                 // String @
     120: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     123: aload         9
     125: invokeinterface #19,  1           // InterfaceMethod java/lang/annotation/Annotation.annotationType:()Ljava/lang/Class;
     130: invokevirtual #20                 // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
     133: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     136: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     139: astore        11
     141: aload_1
     142: ldc           #22                 // String Cannot have both %s and % annotation on the same field \'%s\' in class \'%s\'
     144: iconst_4
     145: anewarray     #23                 // class java/lang/Object
     148: dup
     149: iconst_0
     150: aload_2
     151: aastore
     152: dup
     153: iconst_1
     154: aload_3
     155: aastore
     156: dup
     157: iconst_2
     158: aload         10
     160: aastore
     161: dup
     162: iconst_3
     163: aload         11
     165: aastore
     166: invokevirtual #24                 // Method info/archinnov/achilles/internals/apt/AptUtils.printError:(Ljava/lang/String;[Ljava/lang/Object;)V
     169: iinc          7, 1
     172: goto          33
     175: return

  public void checkNoMutuallyExclusiveCodecAnnotations(info.archinnov.achilles.internals.apt.AptUtils, java.lang.String, javax.lang.model.element.Name, java.lang.annotation.Annotation, java.util.List<? extends java.lang.annotation.Annotation>);
    Code:
       0: aload         4
       2: ifnull        129
       5: iconst_0
       6: istore        6
       8: iload         6
      10: aload         5
      12: invokeinterface #12,  1           // InterfaceMethod java/util/List.size:()I
      17: if_icmpge     129
      20: aload         5
      22: iload         6
      24: invokeinterface #13,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      29: checkcast     #10                 // class java/lang/annotation/Annotation
      32: astore        7
      34: aload         7
      36: ifnull        123
      39: new           #15                 // class java/lang/StringBuilder
      42: dup
      43: invokespecial #16                 // Method java/lang/StringBuilder."<init>":()V
      46: ldc           #17                 // String @
      48: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      51: aload         7
      53: invokevirtual #25                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      56: invokevirtual #20                 // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
      59: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      62: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      65: astore        8
      67: new           #15                 // class java/lang/StringBuilder
      70: dup
      71: invokespecial #16                 // Method java/lang/StringBuilder."<init>":()V
      74: ldc           #17                 // String @
      76: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      79: aload         4
      81: invokevirtual #25                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      84: invokevirtual #20                 // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
      87: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      90: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      93: astore        9
      95: aload_1
      96: ldc           #22                 // String Cannot have both %s and % annotation on the same field \'%s\' in class \'%s\'
      98: iconst_4
      99: anewarray     #23                 // class java/lang/Object
     102: dup
     103: iconst_0
     104: aload_2
     105: aastore
     106: dup
     107: iconst_1
     108: aload_3
     109: aastore
     110: dup
     111: iconst_2
     112: aload         8
     114: aastore
     115: dup
     116: iconst_3
     117: aload         9
     119: aastore
     120: invokevirtual #24                 // Method info/archinnov/achilles/internals/apt/AptUtils.printError:(Ljava/lang/String;[Ljava/lang/Object;)V
     123: iinc          6, 1
     126: goto          8
     129: return

  public void validateCompatibleColumnAnnotationsOnField(info.archinnov.achilles.internals.apt.AptUtils, java.lang.String, com.squareup.javapoet.TypeName, java.util.Optional<info.archinnov.achilles.annotations.PartitionKey>, java.util.Optional<info.archinnov.achilles.annotations.ClusteringColumn>, java.util.Optional<info.archinnov.achilles.annotations.Static>, java.util.Optional<info.archinnov.achilles.annotations.Computed>, java.util.Optional<info.archinnov.achilles.annotations.Counter>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: iconst_4
       5: anewarray     #26                 // class java/util/Optional
       8: dup
       9: iconst_0
      10: aload         4
      12: aastore
      13: dup
      14: iconst_1
      15: aload         5
      17: aastore
      18: dup
      19: iconst_2
      20: aload         6
      22: aastore
      23: dup
      24: iconst_3
      25: aload         7
      27: aastore
      28: invokestatic  #27                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      31: invokevirtual #28                 // Method checkNoMutuallyExclusiveAnnotations:(Linfo/archinnov/achilles/internals/apt/AptUtils;Ljava/lang/String;Lcom/squareup/javapoet/TypeName;Ljava/util/List;)V
      34: aload_0
      35: aload_1
      36: aload_2
      37: aload_3
      38: iconst_2
      39: anewarray     #26                 // class java/util/Optional
      42: dup
      43: iconst_0
      44: aload         7
      46: aastore
      47: dup
      48: iconst_1
      49: aload         8
      51: aastore
      52: invokestatic  #27                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      55: invokevirtual #28                 // Method checkNoMutuallyExclusiveAnnotations:(Linfo/archinnov/achilles/internals/apt/AptUtils;Ljava/lang/String;Lcom/squareup/javapoet/TypeName;Ljava/util/List;)V
      58: return

  public void validateCompatibleCodecAnnotationsOnField(info.archinnov.achilles.internals.apt.AptUtils, java.lang.String, javax.lang.model.element.Name, info.archinnov.achilles.annotations.Frozen, info.archinnov.achilles.annotations.JSON, info.archinnov.achilles.annotations.Enumerated, info.archinnov.achilles.annotations.Codec, info.archinnov.achilles.annotations.RuntimeCodec, info.archinnov.achilles.annotations.Computed, info.archinnov.achilles.annotations.Counter, info.archinnov.achilles.annotations.TimeUUID);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: iconst_5
       5: anewarray     #10                 // class java/lang/annotation/Annotation
       8: dup
       9: iconst_0
      10: aload         5
      12: aastore
      13: dup
      14: iconst_1
      15: aload         7
      17: aastore
      18: dup
      19: iconst_2
      20: aload         8
      22: aastore
      23: dup
      24: iconst_3
      25: aload         6
      27: aastore
      28: dup
      29: iconst_4
      30: aload         4
      32: aastore
      33: invokestatic  #27                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      36: invokevirtual #29                 // Method checkNoMutuallyExclusiveCodecAnnotations:(Linfo/archinnov/achilles/internals/apt/AptUtils;Ljava/lang/String;Ljavax/lang/model/element/Name;Ljava/util/List;)V
      39: aload_0
      40: aload_1
      41: aload_2
      42: aload_3
      43: aload         9
      45: iconst_3
      46: anewarray     #10                 // class java/lang/annotation/Annotation
      49: dup
      50: iconst_0
      51: aload         4
      53: aastore
      54: dup
      55: iconst_1
      56: aload         5
      58: aastore
      59: dup
      60: iconst_2
      61: aload         6
      63: aastore
      64: invokestatic  #27                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      67: invokevirtual #30                 // Method checkNoMutuallyExclusiveCodecAnnotations:(Linfo/archinnov/achilles/internals/apt/AptUtils;Ljava/lang/String;Ljavax/lang/model/element/Name;Ljava/lang/annotation/Annotation;Ljava/util/List;)V
      70: aload_0
      71: aload_1
      72: aload_2
      73: aload_3
      74: aload         10
      76: iconst_4
      77: anewarray     #10                 // class java/lang/annotation/Annotation
      80: dup
      81: iconst_0
      82: aload         4
      84: aastore
      85: dup
      86: iconst_1
      87: aload         5
      89: aastore
      90: dup
      91: iconst_2
      92: aload         6
      94: aastore
      95: dup
      96: iconst_3
      97: aload         9
      99: aastore
     100: invokestatic  #27                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
     103: invokevirtual #30                 // Method checkNoMutuallyExclusiveCodecAnnotations:(Linfo/archinnov/achilles/internals/apt/AptUtils;Ljava/lang/String;Ljavax/lang/model/element/Name;Ljava/lang/annotation/Annotation;Ljava/util/List;)V
     106: aload_0
     107: aload_1
     108: aload_2
     109: aload_3
     110: aload         11
     112: bipush        7
     114: anewarray     #10                 // class java/lang/annotation/Annotation
     117: dup
     118: iconst_0
     119: aload         4
     121: aastore
     122: dup
     123: iconst_1
     124: aload         5
     126: aastore
     127: dup
     128: iconst_2
     129: aload         6
     131: aastore
     132: dup
     133: iconst_3
     134: aload         7
     136: aastore
     137: dup
     138: iconst_4
     139: aload         8
     141: aastore
     142: dup
     143: iconst_5
     144: aload         9
     146: aastore
     147: dup
     148: bipush        6
     150: aload         10
     152: aastore
     153: invokestatic  #27                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
     156: invokevirtual #30                 // Method checkNoMutuallyExclusiveCodecAnnotations:(Linfo/archinnov/achilles/internals/apt/AptUtils;Ljava/lang/String;Ljavax/lang/model/element/Name;Ljava/lang/annotation/Annotation;Ljava/util/List;)V
     159: return

  public void validateAllowedFrozen(boolean, info.archinnov.achilles.internals.apt.AptUtils, javax.lang.model.element.VariableElement, java.lang.String, com.squareup.javapoet.TypeName);
    Code:
       0: iload_1
       1: ifeq          34
       4: aload_2
       5: aload_2
       6: aload_3
       7: invokeinterface #31,  1           // InterfaceMethod javax/lang/model/element/VariableElement.asType:()Ljavax/lang/model/type/TypeMirror;
      12: invokevirtual #32                 // Method info/archinnov/achilles/internals/apt/AptUtils.isCompositeTypeForCassandra:(Ljavax/lang/model/type/TypeMirror;)Z
      15: ldc           #33                 // String @Frozen annotation on field \'%s\' of class \'%s\' is only allowed for collections and UDT
      17: iconst_2
      18: anewarray     #23                 // class java/lang/Object
      21: dup
      22: iconst_0
      23: aload         4
      25: aastore
      26: dup
      27: iconst_1
      28: aload         5
      30: aastore
      31: invokevirtual #34                 // Method info/archinnov/achilles/internals/apt/AptUtils.validateTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      34: return

  public void validateAllowedType(info.archinnov.achilles.internals.apt.AptUtils, com.squareup.javapoet.TypeName, info.archinnov.achilles.internals.parser.context.FieldParsingContext);
    Code:
       0: aload_1
       1: getstatic     #35                 // Field info/archinnov/achilles/internals/parser/TypeUtils.ALLOWED_TYPES:Ljava/util/List;
       4: aload_2
       5: invokeinterface #36,  2           // InterfaceMethod java/util/List.contains:(Ljava/lang/Object;)Z
      10: ldc           #37                 // String Impossible to parse type \'%s\' from field \'%s\' of class \'%s\'. It should be a supported type
      12: iconst_3
      13: anewarray     #23                 // class java/lang/Object
      16: dup
      17: iconst_0
      18: aload_2
      19: invokevirtual #38                 // Method com/squareup/javapoet/TypeName.toString:()Ljava/lang/String;
      22: aastore
      23: dup
      24: iconst_1
      25: aload_3
      26: getfield      #39                 // Field info/archinnov/achilles/internals/parser/context/FieldParsingContext.fieldName:Ljava/lang/String;
      29: aastore
      30: dup
      31: iconst_2
      32: aload_3
      33: getfield      #40                 // Field info/archinnov/achilles/internals/parser/context/FieldParsingContext.className:Ljava/lang/String;
      36: aastore
      37: invokevirtual #34                 // Method info/archinnov/achilles/internals/apt/AptUtils.validateTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      40: return

  public void validateCounter(info.archinnov.achilles.internals.apt.AptUtils, com.squareup.javapoet.TypeName, java.util.Set<java.lang.Class<? extends java.lang.annotation.Annotation>>, info.archinnov.achilles.internals.parser.context.FieldParsingContext);
    Code:
       0: aload_3
       1: ldc           #41                 // class info/archinnov/achilles/annotations/Counter
       3: invokestatic  #42                 // Method info/archinnov/achilles/internals/apt/AptUtils.containsAnnotation:(Ljava/util/Set;Ljava/lang/Class;)Z
       6: ifeq          48
       9: aload_1
      10: aload_2
      11: invokevirtual #43                 // Method com/squareup/javapoet/TypeName.box:()Lcom/squareup/javapoet/TypeName;
      14: getstatic     #44                 // Field com/squareup/javapoet/TypeName.LONG:Lcom/squareup/javapoet/TypeName;
      17: invokevirtual #43                 // Method com/squareup/javapoet/TypeName.box:()Lcom/squareup/javapoet/TypeName;
      20: invokevirtual #45                 // Method com/squareup/javapoet/TypeName.equals:(Ljava/lang/Object;)Z
      23: ldc           #46                 // String Field \'%s\' of class \'%s\' annotated with @Counter should be of type Long/long
      25: iconst_2
      26: anewarray     #23                 // class java/lang/Object
      29: dup
      30: iconst_0
      31: aload         4
      33: getfield      #39                 // Field info/archinnov/achilles/internals/parser/context/FieldParsingContext.fieldName:Ljava/lang/String;
      36: aastore
      37: dup
      38: iconst_1
      39: aload         4
      41: getfield      #40                 // Field info/archinnov/achilles/internals/parser/context/FieldParsingContext.className:Ljava/lang/String;
      44: aastore
      45: invokevirtual #34                 // Method info/archinnov/achilles/internals/apt/AptUtils.validateTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      48: return

  public void validateCorrectKeysOrder(info.archinnov.achilles.internals.apt.AptUtils, com.squareup.javapoet.TypeName, java.util.List<info.archinnov.achilles.type.tuples.Tuple2<java.lang.String, info.archinnov.achilles.internals.metamodel.columns.KeyColumnInfo>>, java.lang.String);
    Code:
       0: aload_3
       1: invokeinterface #12,  1           // InterfaceMethod java/util/List.size:()I
       6: aload_3
       7: invokeinterface #12,  1           // InterfaceMethod java/util/List.size:()I
      12: iconst_1
      13: iadd
      14: imul
      15: iconst_2
      16: idiv
      17: istore        5
      19: aload_3
      20: invokeinterface #2,  1            // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
      25: invokedynamic #47,  0             // InvokeDynamic #2:apply:()Ljava/util/function/Function;
      30: invokeinterface #48,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      35: invokedynamic #49,  0             // InvokeDynamic #3:applyAsInt:()Ljava/util/function/ToIntFunction;
      40: invokestatic  #50                 // Method java/util/stream/Collectors.summingInt:(Ljava/util/function/ToIntFunction;)Ljava/util/stream/Collector;
      43: invokeinterface #51,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      48: checkcast     #52                 // class java/lang/Integer
      51: astore        6
      53: aload_1
      54: iload         5
      56: aload         6
      58: invokevirtual #53                 // Method java/lang/Integer.intValue:()I
      61: if_icmpne     68
      64: iconst_1
      65: goto          69
      68: iconst_0
      69: ldc           #54                 // String The %s ordering is wrong in class \'%s\'
      71: iconst_2
      72: anewarray     #23                 // class java/lang/Object
      75: dup
      76: iconst_0
      77: aload         4
      79: aastore
      80: dup
      81: iconst_1
      82: aload_2
      83: aastore
      84: invokevirtual #34                 // Method info/archinnov/achilles/internals/apt/AptUtils.validateTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      87: return

  public info.archinnov.achilles.internals.parser.context.CodecContext validateCodec(info.archinnov.achilles.internals.apt.AptUtils, info.archinnov.achilles.internals.parser.validator.TypeValidator, info.archinnov.achilles.internals.parser.context.CodecContext, com.squareup.javapoet.TypeName, java.util.Optional<com.squareup.javapoet.TypeName>, boolean);
    Code:
       0: aload_3
       1: getfield      #55                 // Field info/archinnov/achilles/internals/parser/context/CodecContext.codecType:Lcom/squareup/javapoet/TypeName;
       4: invokevirtual #38                 // Method com/squareup/javapoet/TypeName.toString:()Ljava/lang/String;
       7: astore        7
       9: aload_1
      10: aload         4
      12: invokevirtual #43                 // Method com/squareup/javapoet/TypeName.box:()Lcom/squareup/javapoet/TypeName;
      15: aload_3
      16: getfield      #56                 // Field info/archinnov/achilles/internals/parser/context/CodecContext.sourceType:Lcom/squareup/javapoet/TypeName;
      19: invokevirtual #43                 // Method com/squareup/javapoet/TypeName.box:()Lcom/squareup/javapoet/TypeName;
      22: invokevirtual #45                 // Method com/squareup/javapoet/TypeName.equals:(Ljava/lang/Object;)Z
      25: ldc           #57                 // String Codec \'%s\' source type \'%s\' should match current object type \'%s\'
      27: iconst_3
      28: anewarray     #23                 // class java/lang/Object
      31: dup
      32: iconst_0
      33: aload         7
      35: aastore
      36: dup
      37: iconst_1
      38: aload_3
      39: getfield      #56                 // Field info/archinnov/achilles/internals/parser/context/CodecContext.sourceType:Lcom/squareup/javapoet/TypeName;
      42: aastore
      43: dup
      44: iconst_2
      45: aload         4
      47: invokevirtual #38                 // Method com/squareup/javapoet/TypeName.toString:()Ljava/lang/String;
      50: aastore
      51: invokevirtual #34                 // Method info/archinnov/achilles/internals/apt/AptUtils.validateTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      54: aload         5
      56: invokevirtual #58                 // Method java/util/Optional.isPresent:()Z
      59: ifeq          113
      62: aload_1
      63: aload_3
      64: getfield      #59                 // Field info/archinnov/achilles/internals/parser/context/CodecContext.targetType:Lcom/squareup/javapoet/TypeName;
      67: invokevirtual #43                 // Method com/squareup/javapoet/TypeName.box:()Lcom/squareup/javapoet/TypeName;
      70: aload         5
      72: invokevirtual #60                 // Method java/util/Optional.get:()Ljava/lang/Object;
      75: checkcast     #61                 // class com/squareup/javapoet/TypeName
      78: invokevirtual #43                 // Method com/squareup/javapoet/TypeName.box:()Lcom/squareup/javapoet/TypeName;
      81: invokevirtual #45                 // Method com/squareup/javapoet/TypeName.equals:(Ljava/lang/Object;)Z
      84: ldc           #62                 // String Codec \'%s\' target type \'%s\' should match computed CQL type \'%s\'
      86: iconst_3
      87: anewarray     #23                 // class java/lang/Object
      90: dup
      91: iconst_0
      92: aload         7
      94: aastore
      95: dup
      96: iconst_1
      97: aload_3
      98: getfield      #59                 // Field info/archinnov/achilles/internals/parser/context/CodecContext.targetType:Lcom/squareup/javapoet/TypeName;
     101: aastore
     102: dup
     103: iconst_2
     104: aload         5
     106: invokevirtual #60                 // Method java/util/Optional.get:()Ljava/lang/Object;
     109: aastore
     110: invokevirtual #34                 // Method info/archinnov/achilles/internals/apt/AptUtils.validateTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
     113: iload         6
     115: ifeq          156
     118: aload_1
     119: aload_3
     120: getfield      #59                 // Field info/archinnov/achilles/internals/parser/context/CodecContext.targetType:Lcom/squareup/javapoet/TypeName;
     123: invokevirtual #43                 // Method com/squareup/javapoet/TypeName.box:()Lcom/squareup/javapoet/TypeName;
     126: getstatic     #44                 // Field com/squareup/javapoet/TypeName.LONG:Lcom/squareup/javapoet/TypeName;
     129: invokevirtual #43                 // Method com/squareup/javapoet/TypeName.box:()Lcom/squareup/javapoet/TypeName;
     132: invokevirtual #45                 // Method com/squareup/javapoet/TypeName.equals:(Ljava/lang/Object;)Z
     135: ldc           #63                 // String Codec \'%s\' target type \'%s\' should be Long/long because the column is annotated with @Counter
     137: iconst_2
     138: anewarray     #23                 // class java/lang/Object
     141: dup
     142: iconst_0
     143: aload         7
     145: aastore
     146: dup
     147: iconst_1
     148: aload_3
     149: getfield      #59                 // Field info/archinnov/achilles/internals/parser/context/CodecContext.targetType:Lcom/squareup/javapoet/TypeName;
     152: aastore
     153: invokevirtual #34                 // Method info/archinnov/achilles/internals/apt/AptUtils.validateTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
     156: aload_2
     157: aload_1
     158: aload         4
     160: aload_3
     161: getfield      #59                 // Field info/archinnov/achilles/internals/parser/context/CodecContext.targetType:Lcom/squareup/javapoet/TypeName;
     164: invokevirtual #64                 // Method info/archinnov/achilles/internals/parser/validator/TypeValidator.validateAllowedTypes:(Linfo/archinnov/achilles/internals/apt/AptUtils;Lcom/squareup/javapoet/TypeName;Lcom/squareup/javapoet/TypeName;)V
     167: aload_3
     168: areturn

  private static int lambda$validateCorrectKeysOrder$129(info.archinnov.achilles.internals.metamodel.columns.KeyColumnInfo);
    Code:
       0: aload_0
       1: invokeinterface #65,  1           // InterfaceMethod info/archinnov/achilles/internals/metamodel/columns/KeyColumnInfo.order:()Ljava/lang/Integer;
       6: invokevirtual #53                 // Method java/lang/Integer.intValue:()I
       9: ireturn

  private static info.archinnov.achilles.internals.metamodel.columns.KeyColumnInfo lambda$validateCorrectKeysOrder$128(info.archinnov.achilles.type.tuples.Tuple2);
    Code:
       0: aload_0
       1: invokevirtual #66                 // Method info/archinnov/achilles/type/tuples/Tuple2._2:()Ljava/lang/Object;
       4: checkcast     #67                 // class info/archinnov/achilles/internals/metamodel/columns/KeyColumnInfo
       7: areturn

  private static void lambda$checkNoMutuallyExclusiveAnnotations$127(java.util.List, info.archinnov.achilles.internals.apt.AptUtils, java.lang.String, com.squareup.javapoet.TypeName, java.util.Optional);
    Code:
       0: new           #7                  // class java/util/ArrayList
       3: dup
       4: aload_0
       5: invokespecial #8                  // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
       8: astore        5
      10: aload         5
      12: aload         4
      14: invokevirtual #68                 // Method java/util/ArrayList.remove:(Ljava/lang/Object;)Z
      17: pop
      18: aload         5
      20: invokevirtual #69                 // Method java/util/ArrayList.stream:()Ljava/util/stream/Stream;
      23: invokedynamic #70,  0             // InvokeDynamic #4:test:()Ljava/util/function/Predicate;
      28: invokeinterface #4,  2            // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      33: aload         4
      35: aload_1
      36: aload_2
      37: aload_3
      38: invokedynamic #71,  0             // InvokeDynamic #5:accept:(Ljava/util/Optional;Linfo/archinnov/achilles/internals/apt/AptUtils;Ljava/lang/String;Lcom/squareup/javapoet/TypeName;)Ljava/util/function/Consumer;
      43: invokeinterface #6,  2            // InterfaceMethod java/util/stream/Stream.forEach:(Ljava/util/function/Consumer;)V
      48: return

  private static void lambda$null$126(java.util.Optional, info.archinnov.achilles.internals.apt.AptUtils, java.lang.String, com.squareup.javapoet.TypeName, java.util.Optional);
    Code:
       0: new           #15                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #16                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #17                 // String @
       9: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: invokevirtual #60                 // Method java/util/Optional.get:()Ljava/lang/Object;
      16: checkcast     #10                 // class java/lang/annotation/Annotation
      19: invokeinterface #19,  1           // InterfaceMethod java/lang/annotation/Annotation.annotationType:()Ljava/lang/Class;
      24: invokevirtual #20                 // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
      27: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      33: astore        5
      35: new           #15                 // class java/lang/StringBuilder
      38: dup
      39: invokespecial #16                 // Method java/lang/StringBuilder."<init>":()V
      42: ldc           #17                 // String @
      44: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      47: aload         4
      49: invokevirtual #60                 // Method java/util/Optional.get:()Ljava/lang/Object;
      52: checkcast     #10                 // class java/lang/annotation/Annotation
      55: invokeinterface #19,  1           // InterfaceMethod java/lang/annotation/Annotation.annotationType:()Ljava/lang/Class;
      60: invokevirtual #20                 // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
      63: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      66: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      69: astore        6
      71: aload_1
      72: ldc           #72                 // String Field \'%s\' in class \'%s\' cannot have both %s AND %s annotations
      74: iconst_4
      75: anewarray     #23                 // class java/lang/Object
      78: dup
      79: iconst_0
      80: aload_2
      81: aastore
      82: dup
      83: iconst_1
      84: aload_3
      85: aastore
      86: dup
      87: iconst_2
      88: aload         5
      90: aastore
      91: dup
      92: iconst_3
      93: aload         6
      95: aastore
      96: invokevirtual #24                 // Method info/archinnov/achilles/internals/apt/AptUtils.printError:(Ljava/lang/String;[Ljava/lang/Object;)V
      99: return

  private static boolean lambda$null$125(java.util.Optional);
    Code:
       0: aload_0
       1: invokevirtual #58                 // Method java/util/Optional.isPresent:()Z
       4: ireturn

  private static boolean lambda$checkNoMutuallyExclusiveAnnotations$124(java.util.Optional);
    Code:
       0: aload_0
       1: invokevirtual #58                 // Method java/util/Optional.isPresent:()Z
       4: ireturn
}
