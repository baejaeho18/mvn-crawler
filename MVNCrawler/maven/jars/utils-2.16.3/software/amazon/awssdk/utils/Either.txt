Compiled from "Either.java"
public final class software.amazon.awssdk.utils.Either<L, R> {
  private final java.util.Optional<L> left;

  private final java.util.Optional<R> right;

  private software.amazon.awssdk.utils.Either(java.util.Optional<L>, java.util.Optional<R>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field left:Ljava/util/Optional;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field right:Ljava/util/Optional;
      14: return

  public <T> T map(java.util.function.Function<? super L, ? extends T>, java.util.function.Function<? super R, ? extends T>);
    Code:
       0: aload_0
       1: getfield      #2                  // Field left:Ljava/util/Optional;
       4: aload_1
       5: invokevirtual #4                  // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
       8: aload_0
       9: aload_2
      10: invokedynamic #5,  0              // InvokeDynamic #0:get:(Lsoftware/amazon/awssdk/utils/Either;Ljava/util/function/Function;)Ljava/util/function/Supplier;
      15: invokevirtual #6                  // Method java/util/Optional.orElseGet:(Ljava/util/function/Supplier;)Ljava/lang/Object;
      18: areturn

  public <T> software.amazon.awssdk.utils.Either<T, R> mapLeft(java.util.function.Function<? super L, ? extends T>);
    Code:
       0: new           #7                  // class software/amazon/awssdk/utils/Either
       3: dup
       4: aload_0
       5: getfield      #2                  // Field left:Ljava/util/Optional;
       8: aload_1
       9: invokevirtual #4                  // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
      12: aload_0
      13: getfield      #3                  // Field right:Ljava/util/Optional;
      16: invokespecial #8                  // Method "<init>":(Ljava/util/Optional;Ljava/util/Optional;)V
      19: areturn

  public <T> software.amazon.awssdk.utils.Either<L, T> mapRight(java.util.function.Function<? super R, ? extends T>);
    Code:
       0: new           #7                  // class software/amazon/awssdk/utils/Either
       3: dup
       4: aload_0
       5: getfield      #2                  // Field left:Ljava/util/Optional;
       8: aload_0
       9: getfield      #3                  // Field right:Ljava/util/Optional;
      12: aload_1
      13: invokevirtual #4                  // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
      16: invokespecial #8                  // Method "<init>":(Ljava/util/Optional;Ljava/util/Optional;)V
      19: areturn

  public void apply(java.util.function.Consumer<? super L>, java.util.function.Consumer<? super R>);
    Code:
       0: aload_0
       1: getfield      #2                  // Field left:Ljava/util/Optional;
       4: aload_1
       5: invokevirtual #9                  // Method java/util/Optional.ifPresent:(Ljava/util/function/Consumer;)V
       8: aload_0
       9: getfield      #3                  // Field right:Ljava/util/Optional;
      12: aload_2
      13: invokevirtual #9                  // Method java/util/Optional.ifPresent:(Ljava/util/function/Consumer;)V
      16: return

  public static <L, R> software.amazon.awssdk.utils.Either<L, R> left(L);
    Code:
       0: new           #7                  // class software/amazon/awssdk/utils/Either
       3: dup
       4: aload_0
       5: invokestatic  #10                 // Method java/util/Optional.of:(Ljava/lang/Object;)Ljava/util/Optional;
       8: invokestatic  #11                 // Method java/util/Optional.empty:()Ljava/util/Optional;
      11: invokespecial #8                  // Method "<init>":(Ljava/util/Optional;Ljava/util/Optional;)V
      14: areturn

  public static <L, R> software.amazon.awssdk.utils.Either<L, R> right(R);
    Code:
       0: new           #7                  // class software/amazon/awssdk/utils/Either
       3: dup
       4: invokestatic  #11                 // Method java/util/Optional.empty:()Ljava/util/Optional;
       7: aload_0
       8: invokestatic  #10                 // Method java/util/Optional.of:(Ljava/lang/Object;)Ljava/util/Optional;
      11: invokespecial #8                  // Method "<init>":(Ljava/util/Optional;Ljava/util/Optional;)V
      14: areturn

  public java.util.Optional<L> left();
    Code:
       0: aload_0
       1: getfield      #2                  // Field left:Ljava/util/Optional;
       4: areturn

  public java.util.Optional<R> right();
    Code:
       0: aload_0
       1: getfield      #3                  // Field right:Ljava/util/Optional;
       4: areturn

  public static <L, R> java.util.Optional<software.amazon.awssdk.utils.Either<L, R>> fromNullable(L, R);
    Code:
       0: aload_0
       1: ifnull        16
       4: aload_1
       5: ifnonnull     16
       8: aload_0
       9: invokestatic  #12                 // Method left:(Ljava/lang/Object;)Lsoftware/amazon/awssdk/utils/Either;
      12: invokestatic  #10                 // Method java/util/Optional.of:(Ljava/lang/Object;)Ljava/util/Optional;
      15: areturn
      16: aload_0
      17: ifnonnull     32
      20: aload_1
      21: ifnull        32
      24: aload_1
      25: invokestatic  #13                 // Method right:(Ljava/lang/Object;)Lsoftware/amazon/awssdk/utils/Either;
      28: invokestatic  #10                 // Method java/util/Optional.of:(Ljava/lang/Object;)Ljava/util/Optional;
      31: areturn
      32: aload_0
      33: ifnonnull     44
      36: aload_1
      37: ifnonnull     44
      40: invokestatic  #11                 // Method java/util/Optional.empty:()Ljava/util/Optional;
      43: areturn
      44: new           #14                 // class java/lang/IllegalArgumentException
      47: dup
      48: ldc           #15                 // String Only one of either left or right should be non-null. Got (left: %s, right: %s)
      50: iconst_2
      51: anewarray     #16                 // class java/lang/Object
      54: dup
      55: iconst_0
      56: aload_0
      57: aastore
      58: dup
      59: iconst_1
      60: aload_1
      61: aastore
      62: invokestatic  #17                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      65: invokespecial #18                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      68: athrow

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: instanceof    #7                  // class software/amazon/awssdk/utils/Either
      11: ifne          16
      14: iconst_0
      15: ireturn
      16: aload_1
      17: checkcast     #7                  // class software/amazon/awssdk/utils/Either
      20: astore_2
      21: aload_0
      22: getfield      #2                  // Field left:Ljava/util/Optional;
      25: aload_2
      26: getfield      #2                  // Field left:Ljava/util/Optional;
      29: invokevirtual #19                 // Method java/util/Optional.equals:(Ljava/lang/Object;)Z
      32: ifeq          53
      35: aload_0
      36: getfield      #3                  // Field right:Ljava/util/Optional;
      39: aload_2
      40: getfield      #3                  // Field right:Ljava/util/Optional;
      43: invokevirtual #19                 // Method java/util/Optional.equals:(Ljava/lang/Object;)Z
      46: ifeq          53
      49: iconst_1
      50: goto          54
      53: iconst_0
      54: ireturn

  public int hashCode();
    Code:
       0: bipush        31
       2: aload_0
       3: getfield      #2                  // Field left:Ljava/util/Optional;
       6: invokevirtual #20                 // Method java/util/Optional.hashCode:()I
       9: imul
      10: aload_0
      11: getfield      #3                  // Field right:Ljava/util/Optional;
      14: invokevirtual #20                 // Method java/util/Optional.hashCode:()I
      17: iadd
      18: ireturn

  private java.lang.Object lambda$map$0(java.util.function.Function);
    Code:
       0: aload_0
       1: getfield      #3                  // Field right:Ljava/util/Optional;
       4: aload_1
       5: invokevirtual #4                  // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
       8: invokevirtual #21                 // Method java/util/Optional.get:()Ljava/lang/Object;
      11: areturn
}
