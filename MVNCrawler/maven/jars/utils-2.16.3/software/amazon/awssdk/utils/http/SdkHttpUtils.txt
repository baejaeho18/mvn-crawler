Compiled from "SdkHttpUtils.java"
public final class software.amazon.awssdk.utils.http.SdkHttpUtils {
  private static final java.lang.String DEFAULT_ENCODING;

  private static final java.lang.String[] ENCODED_CHARACTERS_WITH_SLASHES;

  private static final java.lang.String[] ENCODED_CHARACTERS_WITH_SLASHES_REPLACEMENTS;

  private static final java.lang.String[] ENCODED_CHARACTERS_WITHOUT_SLASHES;

  private static final java.lang.String[] ENCODED_CHARACTERS_WITHOUT_SLASHES_REPLACEMENTS;

  private static final java.lang.String QUERY_PARAM_DELIMITER_REGEX;

  private static final java.util.regex.Pattern QUERY_PARAM_DELIMITER_PATTERN;

  private static final java.util.Set<java.lang.String> SINGLE_HEADERS;

  private software.amazon.awssdk.utils.http.SdkHttpUtils();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static java.lang.String urlEncode(java.lang.String);
    Code:
       0: aload_0
       1: iconst_0
       2: invokestatic  #2                  // Method urlEncode:(Ljava/lang/String;Z)Ljava/lang/String;
       5: areturn

  public static java.lang.String urlEncodeIgnoreSlashes(java.lang.String);
    Code:
       0: aload_0
       1: iconst_1
       2: invokestatic  #2                  // Method urlEncode:(Ljava/lang/String;Z)Ljava/lang/String;
       5: areturn

  public static java.lang.String formDataEncode(java.lang.String);
    Code:
       0: aload_0
       1: ifnonnull     8
       4: aconst_null
       5: goto          20
       8: aload_0
       9: invokedynamic #3,  0              // InvokeDynamic #0:get:(Ljava/lang/String;)Lsoftware/amazon/awssdk/utils/FunctionalUtils$UnsafeSupplier;
      14: invokestatic  #4                  // Method software/amazon/awssdk/utils/FunctionalUtils.invokeSafely:(Lsoftware/amazon/awssdk/utils/FunctionalUtils$UnsafeSupplier;)Ljava/lang/Object;
      17: checkcast     #5                  // class java/lang/String
      20: areturn

  public static java.lang.String urlDecode(java.lang.String);
    Code:
       0: aload_0
       1: ifnonnull     6
       4: aconst_null
       5: areturn
       6: aload_0
       7: ldc           #7                  // String UTF-8
       9: invokestatic  #8                  // Method java/net/URLDecoder.decode:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      12: areturn
      13: astore_1
      14: new           #10                 // class java/lang/RuntimeException
      17: dup
      18: ldc           #11                 // String Unable to decode value
      20: aload_1
      21: invokespecial #12                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      24: athrow
    Exception table:
       from    to  target type
           6    12    13   Class java/io/UnsupportedEncodingException

  public static java.util.Map<java.lang.String, java.util.List<java.lang.String>> encodeQueryParameters(java.util.Map<java.lang.String, java.util.List<java.lang.String>>);
    Code:
       0: aload_0
       1: invokedynamic #13,  0             // InvokeDynamic #1:apply:()Ljava/util/function/UnaryOperator;
       6: invokestatic  #14                 // Method encodeMapOfLists:(Ljava/util/Map;Ljava/util/function/UnaryOperator;)Ljava/util/Map;
       9: areturn

  public static java.util.Map<java.lang.String, java.util.List<java.lang.String>> encodeFormData(java.util.Map<java.lang.String, java.util.List<java.lang.String>>);
    Code:
       0: aload_0
       1: invokedynamic #15,  0             // InvokeDynamic #2:apply:()Ljava/util/function/UnaryOperator;
       6: invokestatic  #14                 // Method encodeMapOfLists:(Ljava/util/Map;Ljava/util/function/UnaryOperator;)Ljava/util/Map;
       9: areturn

  private static java.util.Map<java.lang.String, java.util.List<java.lang.String>> encodeMapOfLists(java.util.Map<java.lang.String, java.util.List<java.lang.String>>, java.util.function.UnaryOperator<java.lang.String>);
    Code:
       0: aload_0
       1: ldc           #16                 // String Map must not be null.
       3: iconst_0
       4: anewarray     #17                 // class java/lang/Object
       7: invokestatic  #18                 // Method software/amazon/awssdk/utils/Validate.notNull:(Ljava/lang/Object;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/Object;
      10: pop
      11: new           #19                 // class java/util/LinkedHashMap
      14: dup
      15: invokespecial #20                 // Method java/util/LinkedHashMap."<init>":()V
      18: astore_2
      19: aload_0
      20: invokeinterface #21,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      25: invokeinterface #22,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      30: astore_3
      31: aload_3
      32: invokeinterface #23,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      37: ifeq          145
      40: aload_3
      41: invokeinterface #24,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      46: checkcast     #25                 // class java/util/Map$Entry
      49: astore        4
      51: aload         4
      53: invokeinterface #26,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      58: checkcast     #5                  // class java/lang/String
      61: astore        5
      63: aload_1
      64: aload         5
      66: invokeinterface #27,  2           // InterfaceMethod java/util/function/UnaryOperator.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      71: checkcast     #5                  // class java/lang/String
      74: astore        6
      76: aload         4
      78: invokeinterface #28,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      83: checkcast     #29                 // class java/util/List
      86: astore        7
      88: aload         7
      90: ifnonnull     97
      93: aconst_null
      94: goto          129
      97: aload         4
      99: invokeinterface #28,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
     104: checkcast     #29                 // class java/util/List
     107: invokeinterface #30,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
     112: aload_1
     113: invokeinterface #31,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
     118: invokestatic  #32                 // Method java/util/stream/Collectors.toList:()Ljava/util/stream/Collector;
     121: invokeinterface #33,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
     126: checkcast     #29                 // class java/util/List
     129: astore        8
     131: aload_2
     132: aload         6
     134: aload         8
     136: invokeinterface #34,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     141: pop
     142: goto          31
     145: aload_2
     146: areturn

  private static java.lang.String urlEncode(java.lang.String, boolean);
    Code:
       0: aload_0
       1: ifnonnull     6
       4: aconst_null
       5: areturn
       6: aload_0
       7: invokedynamic #35,  0             // InvokeDynamic #3:get:(Ljava/lang/String;)Lsoftware/amazon/awssdk/utils/FunctionalUtils$UnsafeSupplier;
      12: invokestatic  #4                  // Method software/amazon/awssdk/utils/FunctionalUtils.invokeSafely:(Lsoftware/amazon/awssdk/utils/FunctionalUtils$UnsafeSupplier;)Ljava/lang/Object;
      15: checkcast     #5                  // class java/lang/String
      18: astore_2
      19: iload_1
      20: ifne          34
      23: aload_2
      24: getstatic     #36                 // Field ENCODED_CHARACTERS_WITHOUT_SLASHES:[Ljava/lang/String;
      27: getstatic     #37                 // Field ENCODED_CHARACTERS_WITHOUT_SLASHES_REPLACEMENTS:[Ljava/lang/String;
      30: invokestatic  #38                 // Method software/amazon/awssdk/utils/StringUtils.replaceEach:(Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/String;
      33: areturn
      34: aload_2
      35: getstatic     #39                 // Field ENCODED_CHARACTERS_WITH_SLASHES:[Ljava/lang/String;
      38: getstatic     #40                 // Field ENCODED_CHARACTERS_WITH_SLASHES_REPLACEMENTS:[Ljava/lang/String;
      41: invokestatic  #38                 // Method software/amazon/awssdk/utils/StringUtils.replaceEach:(Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/String;
      44: areturn

  public static java.util.Optional<java.lang.String> encodeAndFlattenQueryParameters(java.util.Map<java.lang.String, java.util.List<java.lang.String>>);
    Code:
       0: aload_0
       1: invokestatic  #41                 // Method encodeQueryParameters:(Ljava/util/Map;)Ljava/util/Map;
       4: invokestatic  #42                 // Method flattenQueryParameters:(Ljava/util/Map;)Ljava/util/Optional;
       7: areturn

  public static java.util.Optional<java.lang.String> encodeAndFlattenFormData(java.util.Map<java.lang.String, java.util.List<java.lang.String>>);
    Code:
       0: aload_0
       1: invokestatic  #43                 // Method encodeFormData:(Ljava/util/Map;)Ljava/util/Map;
       4: invokestatic  #42                 // Method flattenQueryParameters:(Ljava/util/Map;)Ljava/util/Optional;
       7: areturn

  public static java.util.Optional<java.lang.String> flattenQueryParameters(java.util.Map<java.lang.String, java.util.List<java.lang.String>>);
    Code:
       0: aload_0
       1: invokeinterface #44,  1           // InterfaceMethod java/util/Map.isEmpty:()Z
       6: ifeq          13
       9: invokestatic  #45                 // Method java/util/Optional.empty:()Ljava/util/Optional;
      12: areturn
      13: new           #46                 // class java/lang/StringBuilder
      16: dup
      17: invokespecial #47                 // Method java/lang/StringBuilder."<init>":()V
      20: astore_1
      21: aload_0
      22: invokeinterface #21,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      27: invokeinterface #22,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      32: astore_2
      33: aload_2
      34: invokeinterface #23,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      39: ifeq          162
      42: aload_2
      43: invokeinterface #24,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      48: checkcast     #25                 // class java/util/Map$Entry
      51: astore_3
      52: aload_3
      53: invokeinterface #26,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      58: checkcast     #5                  // class java/lang/String
      61: astore        4
      63: aload_3
      64: invokeinterface #28,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      69: invokestatic  #48                 // Method java/util/Optional.ofNullable:(Ljava/lang/Object;)Ljava/util/Optional;
      72: invokedynamic #49,  0             // InvokeDynamic #4:get:()Ljava/util/function/Supplier;
      77: invokevirtual #50                 // Method java/util/Optional.orElseGet:(Ljava/util/function/Supplier;)Ljava/lang/Object;
      80: checkcast     #29                 // class java/util/List
      83: astore        5
      85: aload         5
      87: invokeinterface #51,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      92: astore        6
      94: aload         6
      96: invokeinterface #23,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     101: ifeq          159
     104: aload         6
     106: invokeinterface #24,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     111: checkcast     #5                  // class java/lang/String
     114: astore        7
     116: aload_1
     117: invokevirtual #52                 // Method java/lang/StringBuilder.length:()I
     120: ifle          130
     123: aload_1
     124: bipush        38
     126: invokevirtual #53                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
     129: pop
     130: aload_1
     131: aload         4
     133: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     136: pop
     137: aload         7
     139: ifnull        156
     142: aload_1
     143: bipush        61
     145: invokevirtual #53                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
     148: pop
     149: aload_1
     150: aload         7
     152: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     155: pop
     156: goto          94
     159: goto          33
     162: aload_1
     163: invokevirtual #55                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     166: invokestatic  #56                 // Method java/util/Optional.of:(Ljava/lang/Object;)Ljava/util/Optional;
     169: areturn

  public static boolean isUsingStandardPort(java.lang.String, java.lang.Integer);
    Code:
       0: aload_0
       1: ldc           #57                 // String protocol
       3: invokestatic  #58                 // Method software/amazon/awssdk/utils/Validate.paramNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: ldc           #59                 // String http
      10: invokevirtual #60                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      13: ifne          25
      16: aload_0
      17: ldc           #61                 // String https
      19: invokevirtual #60                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      22: ifeq          29
      25: iconst_1
      26: goto          30
      29: iconst_0
      30: ldc           #62                 // String Protocol must be \'http\' or \'https\', but was \'%s\'.
      32: iconst_1
      33: anewarray     #17                 // class java/lang/Object
      36: dup
      37: iconst_0
      38: aload_0
      39: aastore
      40: invokestatic  #63                 // Method software/amazon/awssdk/utils/Validate.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      43: aload_0
      44: invokestatic  #64                 // Method software/amazon/awssdk/utils/StringUtils.lowerCase:(Ljava/lang/String;)Ljava/lang/String;
      47: astore_2
      48: aload_1
      49: ifnull        97
      52: aload_1
      53: invokevirtual #65                 // Method java/lang/Integer.intValue:()I
      56: iconst_m1
      57: if_icmpeq     97
      60: aload_2
      61: ldc           #59                 // String http
      63: invokevirtual #60                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      66: ifeq          78
      69: aload_1
      70: invokevirtual #65                 // Method java/lang/Integer.intValue:()I
      73: bipush        80
      75: if_icmpeq     97
      78: aload_2
      79: ldc           #61                 // String https
      81: invokevirtual #60                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      84: ifeq          101
      87: aload_1
      88: invokevirtual #65                 // Method java/lang/Integer.intValue:()I
      91: sipush        443
      94: if_icmpne     101
      97: iconst_1
      98: goto          102
     101: iconst_0
     102: ireturn

  public static int standardPort(java.lang.String);
    Code:
       0: aload_0
       1: ldc           #59                 // String http
       3: invokevirtual #66                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
       6: ifeq          12
       9: bipush        80
      11: ireturn
      12: aload_0
      13: ldc           #61                 // String https
      15: invokevirtual #66                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      18: ifeq          25
      21: sipush        443
      24: ireturn
      25: new           #67                 // class java/lang/IllegalArgumentException
      28: dup
      29: new           #46                 // class java/lang/StringBuilder
      32: dup
      33: invokespecial #47                 // Method java/lang/StringBuilder."<init>":()V
      36: ldc           #68                 // String Unknown protocol:
      38: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      41: aload_0
      42: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      45: invokevirtual #55                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      48: invokespecial #69                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      51: athrow

  public static java.lang.String appendUri(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: ldc           #70                 // String baseUri
       3: invokestatic  #58                 // Method software/amazon/awssdk/utils/Validate.paramNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: new           #46                 // class java/lang/StringBuilder
      10: dup
      11: aload_0
      12: invokespecial #71                 // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
      15: astore_2
      16: aload_1
      17: invokestatic  #72                 // Method software/amazon/awssdk/utils/StringUtils.isEmpty:(Ljava/lang/CharSequence;)Z
      20: ifne          62
      23: aload_0
      24: ldc           #73                 // String /
      26: invokevirtual #74                 // Method java/lang/String.endsWith:(Ljava/lang/String;)Z
      29: ifne          39
      32: aload_2
      33: ldc           #73                 // String /
      35: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      38: pop
      39: aload_2
      40: aload_1
      41: ldc           #73                 // String /
      43: invokevirtual #75                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      46: ifeq          57
      49: aload_1
      50: iconst_1
      51: invokevirtual #76                 // Method java/lang/String.substring:(I)Ljava/lang/String;
      54: goto          58
      57: aload_1
      58: invokevirtual #54                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      61: pop
      62: aload_2
      63: invokevirtual #55                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      66: areturn

  public static java.util.stream.Stream<java.lang.String> allMatchingHeaders(java.util.Map<java.lang.String, java.util.List<java.lang.String>>, java.lang.String);
    Code:
       0: aload_0
       1: invokeinterface #21,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
       6: invokeinterface #77,  1           // InterfaceMethod java/util/Set.stream:()Ljava/util/stream/Stream;
      11: aload_1
      12: invokedynamic #78,  0             // InvokeDynamic #5:test:(Ljava/lang/String;)Ljava/util/function/Predicate;
      17: invokeinterface #79,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      22: invokedynamic #80,  0             // InvokeDynamic #6:apply:()Ljava/util/function/Function;
      27: invokeinterface #81,  2           // InterfaceMethod java/util/stream/Stream.flatMap:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      32: areturn

  public static java.util.stream.Stream<java.lang.String> allMatchingHeadersFromCollection(java.util.Map<java.lang.String, java.util.List<java.lang.String>>, java.util.Collection<java.lang.String>);
    Code:
       0: aload_0
       1: invokeinterface #21,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
       6: invokeinterface #77,  1           // InterfaceMethod java/util/Set.stream:()Ljava/util/stream/Stream;
      11: aload_1
      12: invokedynamic #82,  0             // InvokeDynamic #7:test:(Ljava/util/Collection;)Ljava/util/function/Predicate;
      17: invokeinterface #79,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      22: invokedynamic #83,  0             // InvokeDynamic #8:apply:()Ljava/util/function/Function;
      27: invokeinterface #81,  2           // InterfaceMethod java/util/stream/Stream.flatMap:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      32: areturn

  public static java.util.Optional<java.lang.String> firstMatchingHeader(java.util.Map<java.lang.String, java.util.List<java.lang.String>>, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #84                 // Method allMatchingHeaders:(Ljava/util/Map;Ljava/lang/String;)Ljava/util/stream/Stream;
       5: invokeinterface #85,  1           // InterfaceMethod java/util/stream/Stream.findFirst:()Ljava/util/Optional;
      10: areturn

  public static java.util.Optional<java.lang.String> firstMatchingHeaderFromCollection(java.util.Map<java.lang.String, java.util.List<java.lang.String>>, java.util.Collection<java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #86                 // Method allMatchingHeadersFromCollection:(Ljava/util/Map;Ljava/util/Collection;)Ljava/util/stream/Stream;
       5: invokeinterface #85,  1           // InterfaceMethod java/util/stream/Stream.findFirst:()Ljava/util/Optional;
      10: areturn

  public static boolean isSingleHeader(java.lang.String);
    Code:
       0: getstatic     #87                 // Field SINGLE_HEADERS:Ljava/util/Set;
       3: aload_0
       4: invokestatic  #64                 // Method software/amazon/awssdk/utils/StringUtils.lowerCase:(Ljava/lang/String;)Ljava/lang/String;
       7: invokeinterface #88,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      12: ireturn

  public static java.util.Map<java.lang.String, java.util.List<java.lang.String>> uriParams(java.net.URI);
    Code:
       0: getstatic     #89                 // Field QUERY_PARAM_DELIMITER_PATTERN:Ljava/util/regex/Pattern;
       3: aload_0
       4: invokevirtual #90                 // Method java/net/URI.getRawQuery:()Ljava/lang/String;
       7: invokevirtual #91                 // Method java/lang/String.trim:()Ljava/lang/String;
      10: invokevirtual #92                 // Method java/util/regex/Pattern.splitAsStream:(Ljava/lang/CharSequence;)Ljava/util/stream/Stream;
      13: invokedynamic #93,  0             // InvokeDynamic #9:apply:()Ljava/util/function/Function;
      18: invokeinterface #31,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      23: invokedynamic #94,  0             // InvokeDynamic #10:apply:()Ljava/util/function/Function;
      28: invokedynamic #95,  0             // InvokeDynamic #11:apply:()Ljava/util/function/Function;
      33: invokestatic  #32                 // Method java/util/stream/Collectors.toList:()Ljava/util/stream/Collector;
      36: invokestatic  #96                 // Method java/util/stream/Collectors.mapping:(Ljava/util/function/Function;Ljava/util/stream/Collector;)Ljava/util/stream/Collector;
      39: invokestatic  #97                 // Method java/util/stream/Collectors.groupingBy:(Ljava/util/function/Function;Ljava/util/stream/Collector;)Ljava/util/stream/Collector;
      42: invokeinterface #33,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      47: checkcast     #98                 // class java/util/Map
      50: areturn

  private static java.lang.String lambda$uriParams$9(java.lang.String[]);
    Code:
       0: aload_0
       1: iconst_1
       2: aaload
       3: invokestatic  #99                 // Method urlDecode:(Ljava/lang/String;)Ljava/lang/String;
       6: areturn

  private static java.lang.String lambda$uriParams$8(java.lang.String[]);
    Code:
       0: aload_0
       1: iconst_0
       2: aaload
       3: invokestatic  #99                 // Method urlDecode:(Ljava/lang/String;)Ljava/lang/String;
       6: areturn

  private static java.lang.String[] lambda$uriParams$7(java.lang.String);
    Code:
       0: aload_0
       1: ldc           #100                // String =
       3: invokevirtual #101                // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
       6: ifeq          19
       9: aload_0
      10: ldc           #100                // String =
      12: iconst_2
      13: invokevirtual #102                // Method java/lang/String.split:(Ljava/lang/String;I)[Ljava/lang/String;
      16: goto          31
      19: iconst_2
      20: anewarray     #5                  // class java/lang/String
      23: dup
      24: iconst_0
      25: aload_0
      26: aastore
      27: dup
      28: iconst_1
      29: aconst_null
      30: aastore
      31: areturn

  private static java.util.stream.Stream lambda$allMatchingHeadersFromCollection$6(java.util.Map$Entry);
    Code:
       0: aload_0
       1: invokeinterface #28,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
       6: ifnull        26
       9: aload_0
      10: invokeinterface #28,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      15: checkcast     #29                 // class java/util/List
      18: invokeinterface #30,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
      23: goto          29
      26: invokestatic  #103                // InterfaceMethod java/util/stream/Stream.empty:()Ljava/util/stream/Stream;
      29: areturn

  private static boolean lambda$allMatchingHeadersFromCollection$5(java.util.Collection, java.util.Map$Entry);
    Code:
       0: aload_0
       1: invokeinterface #104,  1          // InterfaceMethod java/util/Collection.stream:()Ljava/util/stream/Stream;
       6: aload_1
       7: invokedynamic #105,  0            // InvokeDynamic #12:test:(Ljava/util/Map$Entry;)Ljava/util/function/Predicate;
      12: invokeinterface #106,  2          // InterfaceMethod java/util/stream/Stream.anyMatch:(Ljava/util/function/Predicate;)Z
      17: ireturn

  private static boolean lambda$null$4(java.util.Map$Entry, java.lang.String);
    Code:
       0: aload_0
       1: invokeinterface #26,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
       6: checkcast     #5                  // class java/lang/String
       9: aload_1
      10: invokevirtual #66                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      13: ireturn

  private static java.util.stream.Stream lambda$allMatchingHeaders$3(java.util.Map$Entry);
    Code:
       0: aload_0
       1: invokeinterface #28,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
       6: ifnull        26
       9: aload_0
      10: invokeinterface #28,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      15: checkcast     #29                 // class java/util/List
      18: invokeinterface #30,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
      23: goto          29
      26: invokestatic  #103                // InterfaceMethod java/util/stream/Stream.empty:()Ljava/util/stream/Stream;
      29: areturn

  private static boolean lambda$allMatchingHeaders$2(java.lang.String, java.util.Map$Entry);
    Code:
       0: aload_1
       1: invokeinterface #26,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
       6: checkcast     #5                  // class java/lang/String
       9: aload_0
      10: invokevirtual #66                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      13: ireturn

  private static java.lang.String lambda$urlEncode$1(java.lang.String) throws java.lang.Exception;
    Code:
       0: aload_0
       1: ldc           #7                  // String UTF-8
       3: invokestatic  #107                // Method java/net/URLEncoder.encode:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
       6: areturn

  private static java.lang.String lambda$formDataEncode$0(java.lang.String) throws java.lang.Exception;
    Code:
       0: aload_0
       1: ldc           #7                  // String UTF-8
       3: invokestatic  #107                // Method java/net/URLEncoder.encode:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
       6: areturn

  static {};
    Code:
       0: iconst_4
       1: anewarray     #5                  // class java/lang/String
       4: dup
       5: iconst_0
       6: ldc           #108                // String +
       8: aastore
       9: dup
      10: iconst_1
      11: ldc           #109                // String *
      13: aastore
      14: dup
      15: iconst_2
      16: ldc           #110                // String %7E
      18: aastore
      19: dup
      20: iconst_3
      21: ldc           #111                // String %2F
      23: aastore
      24: putstatic     #39                 // Field ENCODED_CHARACTERS_WITH_SLASHES:[Ljava/lang/String;
      27: iconst_4
      28: anewarray     #5                  // class java/lang/String
      31: dup
      32: iconst_0
      33: ldc           #112                // String %20
      35: aastore
      36: dup
      37: iconst_1
      38: ldc           #113                // String %2A
      40: aastore
      41: dup
      42: iconst_2
      43: ldc           #114                // String ~
      45: aastore
      46: dup
      47: iconst_3
      48: ldc           #73                 // String /
      50: aastore
      51: putstatic     #40                 // Field ENCODED_CHARACTERS_WITH_SLASHES_REPLACEMENTS:[Ljava/lang/String;
      54: iconst_3
      55: anewarray     #5                  // class java/lang/String
      58: dup
      59: iconst_0
      60: ldc           #108                // String +
      62: aastore
      63: dup
      64: iconst_1
      65: ldc           #109                // String *
      67: aastore
      68: dup
      69: iconst_2
      70: ldc           #110                // String %7E
      72: aastore
      73: putstatic     #36                 // Field ENCODED_CHARACTERS_WITHOUT_SLASHES:[Ljava/lang/String;
      76: iconst_3
      77: anewarray     #5                  // class java/lang/String
      80: dup
      81: iconst_0
      82: ldc           #112                // String %20
      84: aastore
      85: dup
      86: iconst_1
      87: ldc           #113                // String %2A
      89: aastore
      90: dup
      91: iconst_2
      92: ldc           #114                // String ~
      94: aastore
      95: putstatic     #37                 // Field ENCODED_CHARACTERS_WITHOUT_SLASHES_REPLACEMENTS:[Ljava/lang/String;
      98: ldc           #115                // String \\s*&\\s*
     100: invokestatic  #116                // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
     103: putstatic     #89                 // Field QUERY_PARAM_DELIMITER_PATTERN:Ljava/util/regex/Pattern;
     106: bipush        24
     108: anewarray     #5                  // class java/lang/String
     111: dup
     112: iconst_0
     113: ldc           #117                // String age
     115: aastore
     116: dup
     117: iconst_1
     118: ldc           #118                // String authorization
     120: aastore
     121: dup
     122: iconst_2
     123: ldc           #119                // String content-length
     125: aastore
     126: dup
     127: iconst_3
     128: ldc           #120                // String content-location
     130: aastore
     131: dup
     132: iconst_4
     133: ldc           #121                // String content-md5
     135: aastore
     136: dup
     137: iconst_5
     138: ldc           #122                // String content-range
     140: aastore
     141: dup
     142: bipush        6
     144: ldc           #123                // String content-type
     146: aastore
     147: dup
     148: bipush        7
     150: ldc           #124                // String date
     152: aastore
     153: dup
     154: bipush        8
     156: ldc           #125                // String etag
     158: aastore
     159: dup
     160: bipush        9
     162: ldc           #126                // String expires
     164: aastore
     165: dup
     166: bipush        10
     168: ldc           #127                // String from
     170: aastore
     171: dup
     172: bipush        11
     174: ldc           #128                // String host
     176: aastore
     177: dup
     178: bipush        12
     180: ldc           #129                // String if-modified-since
     182: aastore
     183: dup
     184: bipush        13
     186: ldc           #130                // String if-range
     188: aastore
     189: dup
     190: bipush        14
     192: ldc           #131                // String if-unmodified-since
     194: aastore
     195: dup
     196: bipush        15
     198: ldc           #132                // String last-modified
     200: aastore
     201: dup
     202: bipush        16
     204: ldc           #133                // String location
     206: aastore
     207: dup
     208: bipush        17
     210: ldc           #134                // String max-forwards
     212: aastore
     213: dup
     214: bipush        18
     216: ldc           #135                // String proxy-authorization
     218: aastore
     219: dup
     220: bipush        19
     222: ldc           #136                // String range
     224: aastore
     225: dup
     226: bipush        20
     228: ldc           #137                // String referer
     230: aastore
     231: dup
     232: bipush        21
     234: ldc           #138                // String retry-after
     236: aastore
     237: dup
     238: bipush        22
     240: ldc           #139                // String server
     242: aastore
     243: dup
     244: bipush        23
     246: ldc           #140                // String user-agent
     248: aastore
     249: invokestatic  #141                // InterfaceMethod java/util/stream/Stream.of:([Ljava/lang/Object;)Ljava/util/stream/Stream;
     252: invokestatic  #142                // Method java/util/stream/Collectors.toSet:()Ljava/util/stream/Collector;
     255: invokeinterface #33,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
     260: checkcast     #143                // class java/util/Set
     263: putstatic     #87                 // Field SINGLE_HEADERS:Ljava/util/Set;
     266: return
}
