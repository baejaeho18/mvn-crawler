Compiled from "BaseNCodecOutputStream.java"
public class org.apache.commons.codec.binary.BaseNCodecOutputStream extends java.io.FilterOutputStream {
  private final boolean doEncode;

  private final org.apache.commons.codec.binary.BaseNCodec baseNCodec;

  private final byte[] singleByte;

  private final org.apache.commons.codec.binary.BaseNCodec$Context context;

  public org.apache.commons.codec.binary.BaseNCodecOutputStream(java.io.OutputStream, org.apache.commons.codec.binary.BaseNCodec, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #2                  // Method java/io/FilterOutputStream."<init>":(Ljava/io/OutputStream;)V
       5: aload_0
       6: iconst_1
       7: newarray       byte
       9: putfield      #3                  // Field singleByte:[B
      12: aload_0
      13: new           #4                  // class org/apache/commons/codec/binary/BaseNCodec$Context
      16: dup
      17: invokespecial #5                  // Method org/apache/commons/codec/binary/BaseNCodec$Context."<init>":()V
      20: putfield      #6                  // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;
      23: aload_0
      24: aload_2
      25: putfield      #7                  // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;
      28: aload_0
      29: iload_3
      30: putfield      #8                  // Field doEncode:Z
      33: return

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method eof:()V
       4: aload_0
       5: invokevirtual #10                 // Method flush:()V
       8: aload_0
       9: getfield      #11                 // Field out:Ljava/io/OutputStream;
      12: invokevirtual #12                 // Method java/io/OutputStream.close:()V
      15: return

  public void eof() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #8                  // Field doEncode:Z
       4: ifeq          27
       7: aload_0
       8: getfield      #7                  // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;
      11: aload_0
      12: getfield      #3                  // Field singleByte:[B
      15: iconst_0
      16: iconst_m1
      17: aload_0
      18: getfield      #6                  // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;
      21: invokevirtual #13                 // Method org/apache/commons/codec/binary/BaseNCodec.encode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V
      24: goto          44
      27: aload_0
      28: getfield      #7                  // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;
      31: aload_0
      32: getfield      #3                  // Field singleByte:[B
      35: iconst_0
      36: iconst_m1
      37: aload_0
      38: getfield      #6                  // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;
      41: invokevirtual #14                 // Method org/apache/commons/codec/binary/BaseNCodec.decode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V
      44: return

  public void flush() throws java.io.IOException;
    Code:
       0: aload_0
       1: iconst_1
       2: invokespecial #15                 // Method flush:(Z)V
       5: return

  private void flush(boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #7                  // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;
       4: aload_0
       5: getfield      #6                  // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;
       8: invokevirtual #16                 // Method org/apache/commons/codec/binary/BaseNCodec.available:(Lorg/apache/commons/codec/binary/BaseNCodec$Context;)I
      11: istore_2
      12: iload_2
      13: ifle          52
      16: iload_2
      17: newarray       byte
      19: astore_3
      20: aload_0
      21: getfield      #7                  // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;
      24: aload_3
      25: iconst_0
      26: iload_2
      27: aload_0
      28: getfield      #6                  // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;
      31: invokevirtual #17                 // Method org/apache/commons/codec/binary/BaseNCodec.readResults:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)I
      34: istore        4
      36: iload         4
      38: ifle          52
      41: aload_0
      42: getfield      #11                 // Field out:Ljava/io/OutputStream;
      45: aload_3
      46: iconst_0
      47: iload         4
      49: invokevirtual #18                 // Method java/io/OutputStream.write:([BII)V
      52: iload_1
      53: ifeq          63
      56: aload_0
      57: getfield      #11                 // Field out:Ljava/io/OutputStream;
      60: invokevirtual #19                 // Method java/io/OutputStream.flush:()V
      63: return

  public boolean isStrictDecoding();
    Code:
       0: aload_0
       1: getfield      #7                  // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;
       4: invokevirtual #20                 // Method org/apache/commons/codec/binary/BaseNCodec.isStrictDecoding:()Z
       7: ireturn

  public void write(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_1
       1: ldc           #21                 // String array
       3: invokestatic  #22                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: iload_2
       8: iflt          15
      11: iload_3
      12: ifge          23
      15: new           #23                 // class java/lang/IndexOutOfBoundsException
      18: dup
      19: invokespecial #24                 // Method java/lang/IndexOutOfBoundsException."<init>":()V
      22: athrow
      23: iload_2
      24: aload_1
      25: arraylength
      26: if_icmpgt     37
      29: iload_2
      30: iload_3
      31: iadd
      32: aload_1
      33: arraylength
      34: if_icmple     45
      37: new           #23                 // class java/lang/IndexOutOfBoundsException
      40: dup
      41: invokespecial #24                 // Method java/lang/IndexOutOfBoundsException."<init>":()V
      44: athrow
      45: iload_3
      46: ifle          92
      49: aload_0
      50: getfield      #8                  // Field doEncode:Z
      53: ifeq          73
      56: aload_0
      57: getfield      #7                  // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;
      60: aload_1
      61: iload_2
      62: iload_3
      63: aload_0
      64: getfield      #6                  // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;
      67: invokevirtual #13                 // Method org/apache/commons/codec/binary/BaseNCodec.encode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V
      70: goto          87
      73: aload_0
      74: getfield      #7                  // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;
      77: aload_1
      78: iload_2
      79: iload_3
      80: aload_0
      81: getfield      #6                  // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;
      84: invokevirtual #14                 // Method org/apache/commons/codec/binary/BaseNCodec.decode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V
      87: aload_0
      88: iconst_0
      89: invokespecial #15                 // Method flush:(Z)V
      92: return

  public void write(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field singleByte:[B
       4: iconst_0
       5: iload_1
       6: i2b
       7: bastore
       8: aload_0
       9: aload_0
      10: getfield      #3                  // Field singleByte:[B
      13: iconst_0
      14: iconst_1
      15: invokevirtual #25                 // Method write:([BII)V
      18: return
}
