Compiled from "FailableLongConsumer.java"
public interface org.apache.commons.lang3.function.FailableLongConsumer<E extends java.lang.Throwable> {
  public static final org.apache.commons.lang3.function.FailableLongConsumer NOP;

  public static <E extends java.lang.Throwable> org.apache.commons.lang3.function.FailableLongConsumer<E> nop();
    Code:
       0: getstatic     #1                  // Field NOP:Lorg/apache/commons/lang3/function/FailableLongConsumer;
       3: areturn

  public abstract void accept(long) throws E;

  public default org.apache.commons.lang3.function.FailableLongConsumer<E> andThen(org.apache.commons.lang3.function.FailableLongConsumer<E>);
    Code:
       0: aload_1
       1: invokestatic  #2                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_0
       6: aload_1
       7: invokedynamic #3,  0              // InvokeDynamic #0:accept:(Lorg/apache/commons/lang3/function/FailableLongConsumer;Lorg/apache/commons/lang3/function/FailableLongConsumer;)Lorg/apache/commons/lang3/function/FailableLongConsumer;
      12: areturn

  private void lambda$andThen$1(org.apache.commons.lang3.function.FailableLongConsumer, long) throws java.lang.Throwable;
    Code:
       0: aload_0
       1: lload_2
       2: invokeinterface #4,  3            // InterfaceMethod accept:(J)V
       7: aload_1
       8: lload_2
       9: invokeinterface #4,  3            // InterfaceMethod accept:(J)V
      14: return

  private static void lambda$static$0(long) throws java.lang.Throwable;
    Code:
       0: return

  static {};
    Code:
       0: invokedynamic #5,  0              // InvokeDynamic #1:accept:()Lorg/apache/commons/lang3/function/FailableLongConsumer;
       5: putstatic     #1                  // Field NOP:Lorg/apache/commons/lang3/function/FailableLongConsumer;
       8: return
}
