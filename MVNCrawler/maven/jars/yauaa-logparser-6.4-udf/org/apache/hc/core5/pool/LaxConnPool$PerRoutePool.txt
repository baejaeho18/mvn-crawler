Compiled from "LaxConnPool.java"
class org.apache.hc.core5.pool.LaxConnPool$PerRoutePool<T, C extends org.apache.hc.core5.io.ModalCloseable> {
  private final T route;

  private final org.apache.hc.core5.util.TimeValue timeToLive;

  private final org.apache.hc.core5.pool.PoolReusePolicy policy;

  private final org.apache.hc.core5.pool.DisposalCallback<C> disposalCallback;

  private final org.apache.hc.core5.pool.ConnPoolListener<T> connPoolListener;

  private final org.apache.hc.core5.pool.ConnPoolStats<T> connPoolStats;

  private final java.util.concurrent.ConcurrentMap<org.apache.hc.core5.pool.PoolEntry<T, C>, java.lang.Boolean> leased;

  private final java.util.Deque<java.util.concurrent.atomic.AtomicMarkableReference<org.apache.hc.core5.pool.PoolEntry<T, C>>> available;

  private final java.util.Deque<org.apache.hc.core5.pool.LaxConnPool$LeaseRequest<T, C>> pending;

  private final java.util.concurrent.atomic.AtomicBoolean terminated;

  private final java.util.concurrent.atomic.AtomicInteger allocated;

  private final java.util.concurrent.atomic.AtomicLong releaseSeqNum;

  private volatile int max;

  org.apache.hc.core5.pool.LaxConnPool$PerRoutePool(T, int, org.apache.hc.core5.util.TimeValue, org.apache.hc.core5.pool.PoolReusePolicy, org.apache.hc.core5.pool.ConnPoolStats<T>, org.apache.hc.core5.pool.DisposalCallback<C>, org.apache.hc.core5.pool.ConnPoolListener<T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field route:Ljava/lang/Object;
       9: aload_0
      10: aload_3
      11: putfield      #3                  // Field timeToLive:Lorg/apache/hc/core5/util/TimeValue;
      14: aload_0
      15: aload         4
      17: putfield      #4                  // Field policy:Lorg/apache/hc/core5/pool/PoolReusePolicy;
      20: aload_0
      21: aload         5
      23: putfield      #5                  // Field connPoolStats:Lorg/apache/hc/core5/pool/ConnPoolStats;
      26: aload_0
      27: aload         6
      29: putfield      #6                  // Field disposalCallback:Lorg/apache/hc/core5/pool/DisposalCallback;
      32: aload_0
      33: aload         7
      35: putfield      #7                  // Field connPoolListener:Lorg/apache/hc/core5/pool/ConnPoolListener;
      38: aload_0
      39: new           #8                  // class java/util/concurrent/ConcurrentHashMap
      42: dup
      43: invokespecial #9                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      46: putfield      #10                 // Field leased:Ljava/util/concurrent/ConcurrentMap;
      49: aload_0
      50: new           #11                 // class java/util/concurrent/ConcurrentLinkedDeque
      53: dup
      54: invokespecial #12                 // Method java/util/concurrent/ConcurrentLinkedDeque."<init>":()V
      57: putfield      #13                 // Field available:Ljava/util/Deque;
      60: aload_0
      61: new           #11                 // class java/util/concurrent/ConcurrentLinkedDeque
      64: dup
      65: invokespecial #12                 // Method java/util/concurrent/ConcurrentLinkedDeque."<init>":()V
      68: putfield      #14                 // Field pending:Ljava/util/Deque;
      71: aload_0
      72: new           #15                 // class java/util/concurrent/atomic/AtomicBoolean
      75: dup
      76: iconst_0
      77: invokespecial #16                 // Method java/util/concurrent/atomic/AtomicBoolean."<init>":(Z)V
      80: putfield      #17                 // Field terminated:Ljava/util/concurrent/atomic/AtomicBoolean;
      83: aload_0
      84: new           #18                 // class java/util/concurrent/atomic/AtomicInteger
      87: dup
      88: iconst_0
      89: invokespecial #19                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      92: putfield      #20                 // Field allocated:Ljava/util/concurrent/atomic/AtomicInteger;
      95: aload_0
      96: new           #21                 // class java/util/concurrent/atomic/AtomicLong
      99: dup
     100: lconst_0
     101: invokespecial #22                 // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
     104: putfield      #23                 // Field releaseSeqNum:Ljava/util/concurrent/atomic/AtomicLong;
     107: aload_0
     108: iload_2
     109: putfield      #24                 // Field max:I
     112: return

  public void shutdown(org.apache.hc.core5.io.CloseMode);
    Code:
       0: aload_0
       1: getfield      #17                 // Field terminated:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_0
       5: iconst_1
       6: invokevirtual #25                 // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
       9: ifeq          121
      12: aload_0
      13: getfield      #13                 // Field available:Ljava/util/Deque;
      16: invokeinterface #26,  1           // InterfaceMethod java/util/Deque.poll:()Ljava/lang/Object;
      21: checkcast     #27                 // class java/util/concurrent/atomic/AtomicMarkableReference
      24: dup
      25: astore_2
      26: ifnull        43
      29: aload_2
      30: invokevirtual #28                 // Method java/util/concurrent/atomic/AtomicMarkableReference.getReference:()Ljava/lang/Object;
      33: checkcast     #29                 // class org/apache/hc/core5/pool/PoolEntry
      36: aload_1
      37: invokevirtual #30                 // Method org/apache/hc/core5/pool/PoolEntry.discardConnection:(Lorg/apache/hc/core5/io/CloseMode;)V
      40: goto          12
      43: aload_0
      44: getfield      #10                 // Field leased:Ljava/util/concurrent/ConcurrentMap;
      47: invokeinterface #31,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.keySet:()Ljava/util/Set;
      52: invokeinterface #32,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      57: astore_3
      58: aload_3
      59: invokeinterface #33,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      64: ifeq          87
      67: aload_3
      68: invokeinterface #34,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      73: checkcast     #29                 // class org/apache/hc/core5/pool/PoolEntry
      76: astore        4
      78: aload         4
      80: aload_1
      81: invokevirtual #30                 // Method org/apache/hc/core5/pool/PoolEntry.discardConnection:(Lorg/apache/hc/core5/io/CloseMode;)V
      84: goto          58
      87: aload_0
      88: getfield      #10                 // Field leased:Ljava/util/concurrent/ConcurrentMap;
      91: invokeinterface #35,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.clear:()V
      96: aload_0
      97: getfield      #14                 // Field pending:Ljava/util/Deque;
     100: invokeinterface #26,  1           // InterfaceMethod java/util/Deque.poll:()Ljava/lang/Object;
     105: checkcast     #36                 // class org/apache/hc/core5/pool/LaxConnPool$LeaseRequest
     108: dup
     109: astore_3
     110: ifnull        121
     113: aload_3
     114: invokevirtual #37                 // Method org/apache/hc/core5/pool/LaxConnPool$LeaseRequest.cancel:()Z
     117: pop
     118: goto          96
     121: return

  private org.apache.hc.core5.pool.PoolEntry<T, C> createPoolEntry();
    Code:
       0: aload_0
       1: getfield      #24                 // Field max:I
       4: istore_1
       5: aload_0
       6: getfield      #20                 // Field allocated:Ljava/util/concurrent/atomic/AtomicInteger;
       9: invokevirtual #38                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      12: istore_2
      13: iload_2
      14: iload_1
      15: if_icmpge     24
      18: iload_2
      19: iconst_1
      20: iadd
      21: goto          25
      24: iload_2
      25: istore_3
      26: aload_0
      27: getfield      #20                 // Field allocated:Ljava/util/concurrent/atomic/AtomicInteger;
      30: iload_2
      31: iload_3
      32: invokevirtual #39                 // Method java/util/concurrent/atomic/AtomicInteger.compareAndSet:(II)Z
      35: ifeq          5
      38: iload_2
      39: iload_3
      40: if_icmpge     65
      43: new           #29                 // class org/apache/hc/core5/pool/PoolEntry
      46: dup
      47: aload_0
      48: getfield      #2                  // Field route:Ljava/lang/Object;
      51: aload_0
      52: getfield      #3                  // Field timeToLive:Lorg/apache/hc/core5/util/TimeValue;
      55: aload_0
      56: getfield      #6                  // Field disposalCallback:Lorg/apache/hc/core5/pool/DisposalCallback;
      59: invokespecial #40                 // Method org/apache/hc/core5/pool/PoolEntry."<init>":(Ljava/lang/Object;Lorg/apache/hc/core5/util/TimeValue;Lorg/apache/hc/core5/pool/DisposalCallback;)V
      62: goto          66
      65: aconst_null
      66: areturn

  private void deallocatePoolEntry();
    Code:
       0: aload_0
       1: getfield      #20                 // Field allocated:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #41                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
       7: pop
       8: return

  private void addLeased(org.apache.hc.core5.pool.PoolEntry<T, C>);
    Code:
       0: aload_0
       1: getfield      #10                 // Field leased:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: getstatic     #42                 // Field java/lang/Boolean.TRUE:Ljava/lang/Boolean;
       8: invokeinterface #43,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      13: ifnull        26
      16: new           #44                 // class java/lang/IllegalStateException
      19: dup
      20: ldc           #45                 // String Pool entry already present in the set of leased entries
      22: invokespecial #46                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      25: athrow
      26: aload_0
      27: getfield      #7                  // Field connPoolListener:Lorg/apache/hc/core5/pool/ConnPoolListener;
      30: ifnull        50
      33: aload_0
      34: getfield      #7                  // Field connPoolListener:Lorg/apache/hc/core5/pool/ConnPoolListener;
      37: aload_0
      38: getfield      #2                  // Field route:Ljava/lang/Object;
      41: aload_0
      42: getfield      #5                  // Field connPoolStats:Lorg/apache/hc/core5/pool/ConnPoolStats;
      45: invokeinterface #47,  3           // InterfaceMethod org/apache/hc/core5/pool/ConnPoolListener.onLease:(Ljava/lang/Object;Lorg/apache/hc/core5/pool/ConnPoolStats;)V
      50: return

  private void removeLeased(org.apache.hc.core5.pool.PoolEntry<T, C>);
    Code:
       0: aload_0
       1: getfield      #7                  // Field connPoolListener:Lorg/apache/hc/core5/pool/ConnPoolListener;
       4: ifnull        24
       7: aload_0
       8: getfield      #7                  // Field connPoolListener:Lorg/apache/hc/core5/pool/ConnPoolListener;
      11: aload_0
      12: getfield      #2                  // Field route:Ljava/lang/Object;
      15: aload_0
      16: getfield      #5                  // Field connPoolStats:Lorg/apache/hc/core5/pool/ConnPoolStats;
      19: invokeinterface #48,  3           // InterfaceMethod org/apache/hc/core5/pool/ConnPoolListener.onRelease:(Ljava/lang/Object;Lorg/apache/hc/core5/pool/ConnPoolStats;)V
      24: aload_0
      25: getfield      #10                 // Field leased:Ljava/util/concurrent/ConcurrentMap;
      28: aload_1
      29: getstatic     #42                 // Field java/lang/Boolean.TRUE:Ljava/lang/Boolean;
      32: invokeinterface #49,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;Ljava/lang/Object;)Z
      37: ifne          50
      40: new           #44                 // class java/lang/IllegalStateException
      43: dup
      44: ldc           #50                 // String Pool entry is not present in the set of leased entries
      46: invokespecial #46                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      49: athrow
      50: return

  private org.apache.hc.core5.pool.PoolEntry<T, C> getAvailableEntry(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #13                 // Field available:Ljava/util/Deque;
       4: invokeinterface #51,  1           // InterfaceMethod java/util/Deque.iterator:()Ljava/util/Iterator;
       9: astore_2
      10: aload_2
      11: invokeinterface #33,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          102
      19: aload_2
      20: invokeinterface #34,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #27                 // class java/util/concurrent/atomic/AtomicMarkableReference
      28: astore_3
      29: aload_3
      30: invokevirtual #28                 // Method java/util/concurrent/atomic/AtomicMarkableReference.getReference:()Ljava/lang/Object;
      33: checkcast     #29                 // class org/apache/hc/core5/pool/PoolEntry
      36: astore        4
      38: aload_3
      39: aload         4
      41: aload         4
      43: iconst_0
      44: iconst_1
      45: invokevirtual #52                 // Method java/util/concurrent/atomic/AtomicMarkableReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;ZZ)Z
      48: ifeq          99
      51: aload_2
      52: invokeinterface #53,  1           // InterfaceMethod java/util/Iterator.remove:()V
      57: aload         4
      59: invokevirtual #54                 // Method org/apache/hc/core5/pool/PoolEntry.getExpiryDeadline:()Lorg/apache/hc/core5/util/Deadline;
      62: invokevirtual #55                 // Method org/apache/hc/core5/util/Deadline.isExpired:()Z
      65: ifeq          76
      68: aload         4
      70: getstatic     #56                 // Field org/apache/hc/core5/io/CloseMode.GRACEFUL:Lorg/apache/hc/core5/io/CloseMode;
      73: invokevirtual #30                 // Method org/apache/hc/core5/pool/PoolEntry.discardConnection:(Lorg/apache/hc/core5/io/CloseMode;)V
      76: aload         4
      78: invokevirtual #57                 // Method org/apache/hc/core5/pool/PoolEntry.getState:()Ljava/lang/Object;
      81: aload_1
      82: invokestatic  #58                 // Method org/apache/hc/core5/util/LangUtils.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
      85: ifne          96
      88: aload         4
      90: getstatic     #56                 // Field org/apache/hc/core5/io/CloseMode.GRACEFUL:Lorg/apache/hc/core5/io/CloseMode;
      93: invokevirtual #30                 // Method org/apache/hc/core5/pool/PoolEntry.discardConnection:(Lorg/apache/hc/core5/io/CloseMode;)V
      96: aload         4
      98: areturn
      99: goto          10
     102: aconst_null
     103: areturn

  public java.util.concurrent.Future<org.apache.hc.core5.pool.PoolEntry<T, C>> lease(java.lang.Object, org.apache.hc.core5.util.Timeout, org.apache.hc.core5.concurrent.FutureCallback<org.apache.hc.core5.pool.PoolEntry<T, C>>);
    Code:
       0: aload_0
       1: getfield      #17                 // Field terminated:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: invokevirtual #59                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       7: ifne          14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ldc           #60                 // String Connection pool shut down
      17: invokestatic  #61                 // Method org/apache/hc/core5/util/Asserts.check:(ZLjava/lang/String;)V
      20: new           #62                 // class org/apache/hc/core5/pool/LaxConnPool$PerRoutePool$1
      23: dup
      24: aload_0
      25: aload_3
      26: invokespecial #63                 // Method org/apache/hc/core5/pool/LaxConnPool$PerRoutePool$1."<init>":(Lorg/apache/hc/core5/pool/LaxConnPool$PerRoutePool;Lorg/apache/hc/core5/concurrent/FutureCallback;)V
      29: astore        4
      31: aload_0
      32: getfield      #23                 // Field releaseSeqNum:Ljava/util/concurrent/atomic/AtomicLong;
      35: invokevirtual #64                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
      38: lstore        5
      40: aconst_null
      41: astore        7
      43: aload_0
      44: getfield      #14                 // Field pending:Ljava/util/Deque;
      47: invokeinterface #65,  1           // InterfaceMethod java/util/Deque.isEmpty:()Z
      52: ifeq          73
      55: aload_0
      56: aload_1
      57: invokespecial #66                 // Method getAvailableEntry:(Ljava/lang/Object;)Lorg/apache/hc/core5/pool/PoolEntry;
      60: astore        7
      62: aload         7
      64: ifnonnull     73
      67: aload_0
      68: invokespecial #67                 // Method createPoolEntry:()Lorg/apache/hc/core5/pool/PoolEntry;
      71: astore        7
      73: aload         7
      75: ifnull        95
      78: aload_0
      79: aload         7
      81: invokespecial #68                 // Method addLeased:(Lorg/apache/hc/core5/pool/PoolEntry;)V
      84: aload         4
      86: aload         7
      88: invokevirtual #69                 // Method org/apache/hc/core5/concurrent/BasicFuture.completed:(Ljava/lang/Object;)Z
      91: pop
      92: goto          133
      95: aload_0
      96: getfield      #14                 // Field pending:Ljava/util/Deque;
      99: new           #36                 // class org/apache/hc/core5/pool/LaxConnPool$LeaseRequest
     102: dup
     103: aload_1
     104: aload_2
     105: aload         4
     107: invokespecial #70                 // Method org/apache/hc/core5/pool/LaxConnPool$LeaseRequest."<init>":(Ljava/lang/Object;Lorg/apache/hc/core5/util/Timeout;Lorg/apache/hc/core5/concurrent/BasicFuture;)V
     110: invokeinterface #71,  2           // InterfaceMethod java/util/Deque.add:(Ljava/lang/Object;)Z
     115: pop
     116: lload         5
     118: aload_0
     119: getfield      #23                 // Field releaseSeqNum:Ljava/util/concurrent/atomic/AtomicLong;
     122: invokevirtual #64                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
     125: lcmp
     126: ifeq          133
     129: aload_0
     130: invokespecial #72                 // Method servicePendingRequest:()V
     133: aload         4
     135: areturn

  public void release(org.apache.hc.core5.pool.PoolEntry<T, C>, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #73                 // Method removeLeased:(Lorg/apache/hc/core5/pool/PoolEntry;)V
       5: iload_2
       6: ifeq          19
       9: aload_1
      10: invokevirtual #54                 // Method org/apache/hc/core5/pool/PoolEntry.getExpiryDeadline:()Lorg/apache/hc/core5/util/Deadline;
      13: invokevirtual #55                 // Method org/apache/hc/core5/util/Deadline.isExpired:()Z
      16: ifeq          26
      19: aload_1
      20: getstatic     #56                 // Field org/apache/hc/core5/io/CloseMode.GRACEFUL:Lorg/apache/hc/core5/io/CloseMode;
      23: invokevirtual #30                 // Method org/apache/hc/core5/pool/PoolEntry.discardConnection:(Lorg/apache/hc/core5/io/CloseMode;)V
      26: aload_1
      27: invokevirtual #74                 // Method org/apache/hc/core5/pool/PoolEntry.hasConnection:()Z
      30: ifeq          144
      33: getstatic     #75                 // Field org/apache/hc/core5/pool/LaxConnPool$3.$SwitchMap$org$apache$hc$core5$pool$PoolReusePolicy:[I
      36: aload_0
      37: getfield      #4                  // Field policy:Lorg/apache/hc/core5/pool/PoolReusePolicy;
      40: invokevirtual #76                 // Method org/apache/hc/core5/pool/PoolReusePolicy.ordinal:()I
      43: iaload
      44: lookupswitch  { // 2
                     1: 72
                     2: 93
               default: 114
          }
      72: aload_0
      73: getfield      #13                 // Field available:Ljava/util/Deque;
      76: new           #27                 // class java/util/concurrent/atomic/AtomicMarkableReference
      79: dup
      80: aload_1
      81: iconst_0
      82: invokespecial #77                 // Method java/util/concurrent/atomic/AtomicMarkableReference."<init>":(Ljava/lang/Object;Z)V
      85: invokeinterface #78,  2           // InterfaceMethod java/util/Deque.addFirst:(Ljava/lang/Object;)V
      90: goto          148
      93: aload_0
      94: getfield      #13                 // Field available:Ljava/util/Deque;
      97: new           #27                 // class java/util/concurrent/atomic/AtomicMarkableReference
     100: dup
     101: aload_1
     102: iconst_0
     103: invokespecial #77                 // Method java/util/concurrent/atomic/AtomicMarkableReference."<init>":(Ljava/lang/Object;Z)V
     106: invokeinterface #79,  2           // InterfaceMethod java/util/Deque.addLast:(Ljava/lang/Object;)V
     111: goto          148
     114: new           #44                 // class java/lang/IllegalStateException
     117: dup
     118: new           #80                 // class java/lang/StringBuilder
     121: dup
     122: invokespecial #81                 // Method java/lang/StringBuilder."<init>":()V
     125: ldc           #82                 // String Unexpected ConnPoolPolicy value:
     127: invokevirtual #83                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     130: aload_0
     131: getfield      #4                  // Field policy:Lorg/apache/hc/core5/pool/PoolReusePolicy;
     134: invokevirtual #84                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     137: invokevirtual #85                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     140: invokespecial #46                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     143: athrow
     144: aload_0
     145: invokespecial #86                 // Method deallocatePoolEntry:()V
     148: aload_0
     149: getfield      #23                 // Field releaseSeqNum:Ljava/util/concurrent/atomic/AtomicLong;
     152: invokevirtual #87                 // Method java/util/concurrent/atomic/AtomicLong.incrementAndGet:()J
     155: pop2
     156: aload_0
     157: invokespecial #72                 // Method servicePendingRequest:()V
     160: return

  private void servicePendingRequest();
    Code:
       0: aload_0
       1: getstatic     #88                 // Field org/apache/hc/core5/pool/LaxConnPool$PerRoutePool$RequestServiceStrategy.FIRST_SUCCESSFUL:Lorg/apache/hc/core5/pool/LaxConnPool$PerRoutePool$RequestServiceStrategy;
       4: invokespecial #89                 // Method servicePendingRequests:(Lorg/apache/hc/core5/pool/LaxConnPool$PerRoutePool$RequestServiceStrategy;)V
       7: return

  private void servicePendingRequests(org.apache.hc.core5.pool.LaxConnPool$PerRoutePool$RequestServiceStrategy);
    Code:
       0: aload_0
       1: getfield      #14                 // Field pending:Ljava/util/Deque;
       4: invokeinterface #26,  1           // InterfaceMethod java/util/Deque.poll:()Ljava/lang/Object;
       9: checkcast     #36                 // class org/apache/hc/core5/pool/LaxConnPool$LeaseRequest
      12: dup
      13: astore_2
      14: ifnull        152
      17: aload_2
      18: invokevirtual #90                 // Method org/apache/hc/core5/pool/LaxConnPool$LeaseRequest.isDone:()Z
      21: ifeq          27
      24: goto          0
      27: aload_2
      28: invokevirtual #91                 // Method org/apache/hc/core5/pool/LaxConnPool$LeaseRequest.getState:()Ljava/lang/Object;
      31: astore_3
      32: aload_2
      33: invokevirtual #92                 // Method org/apache/hc/core5/pool/LaxConnPool$LeaseRequest.getDeadline:()Lorg/apache/hc/core5/util/Deadline;
      36: astore        4
      38: aload         4
      40: invokevirtual #55                 // Method org/apache/hc/core5/util/Deadline.isExpired:()Z
      43: ifeq          59
      46: aload_2
      47: aload         4
      49: invokestatic  #93                 // Method org/apache/hc/core5/util/DeadlineTimeoutException.from:(Lorg/apache/hc/core5/util/Deadline;)Lorg/apache/hc/core5/util/DeadlineTimeoutException;
      52: invokevirtual #94                 // Method org/apache/hc/core5/pool/LaxConnPool$LeaseRequest.failed:(Ljava/lang/Exception;)Z
      55: pop
      56: goto          149
      59: aload_0
      60: getfield      #23                 // Field releaseSeqNum:Ljava/util/concurrent/atomic/AtomicLong;
      63: invokevirtual #64                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
      66: lstore        5
      68: aload_0
      69: aload_3
      70: invokespecial #66                 // Method getAvailableEntry:(Ljava/lang/Object;)Lorg/apache/hc/core5/pool/PoolEntry;
      73: astore        7
      75: aload         7
      77: ifnonnull     86
      80: aload_0
      81: invokespecial #67                 // Method createPoolEntry:()Lorg/apache/hc/core5/pool/PoolEntry;
      84: astore        7
      86: aload         7
      88: ifnull        123
      91: aload_0
      92: aload         7
      94: invokespecial #68                 // Method addLeased:(Lorg/apache/hc/core5/pool/PoolEntry;)V
      97: aload_2
      98: aload         7
     100: invokevirtual #95                 // Method org/apache/hc/core5/pool/LaxConnPool$LeaseRequest.completed:(Lorg/apache/hc/core5/pool/PoolEntry;)Z
     103: ifne          113
     106: aload_0
     107: aload         7
     109: iconst_1
     110: invokevirtual #96                 // Method release:(Lorg/apache/hc/core5/pool/PoolEntry;Z)V
     113: aload_1
     114: getstatic     #88                 // Field org/apache/hc/core5/pool/LaxConnPool$PerRoutePool$RequestServiceStrategy.FIRST_SUCCESSFUL:Lorg/apache/hc/core5/pool/LaxConnPool$PerRoutePool$RequestServiceStrategy;
     117: if_acmpne     149
     120: goto          152
     123: aload_0
     124: getfield      #14                 // Field pending:Ljava/util/Deque;
     127: aload_2
     128: invokeinterface #78,  2           // InterfaceMethod java/util/Deque.addFirst:(Ljava/lang/Object;)V
     133: lload         5
     135: aload_0
     136: getfield      #23                 // Field releaseSeqNum:Ljava/util/concurrent/atomic/AtomicLong;
     139: invokevirtual #64                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
     142: lcmp
     143: ifne          149
     146: goto          152
     149: goto          0
     152: return

  public void validatePendingRequests();
    Code:
       0: aload_0
       1: getfield      #14                 // Field pending:Ljava/util/Deque;
       4: invokeinterface #51,  1           // InterfaceMethod java/util/Deque.iterator:()Ljava/util/Iterator;
       9: astore_1
      10: aload_1
      11: invokeinterface #33,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          97
      19: aload_1
      20: invokeinterface #34,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #36                 // class org/apache/hc/core5/pool/LaxConnPool$LeaseRequest
      28: astore_2
      29: aload_2
      30: invokevirtual #97                 // Method org/apache/hc/core5/pool/LaxConnPool$LeaseRequest.getFuture:()Lorg/apache/hc/core5/concurrent/BasicFuture;
      33: astore_3
      34: aload_3
      35: invokevirtual #98                 // Method org/apache/hc/core5/concurrent/BasicFuture.isCancelled:()Z
      38: ifeq          57
      41: aload_2
      42: invokevirtual #90                 // Method org/apache/hc/core5/pool/LaxConnPool$LeaseRequest.isDone:()Z
      45: ifne          57
      48: aload_1
      49: invokeinterface #53,  1           // InterfaceMethod java/util/Iterator.remove:()V
      54: goto          94
      57: aload_2
      58: invokevirtual #92                 // Method org/apache/hc/core5/pool/LaxConnPool$LeaseRequest.getDeadline:()Lorg/apache/hc/core5/util/Deadline;
      61: astore        4
      63: aload         4
      65: invokevirtual #55                 // Method org/apache/hc/core5/util/Deadline.isExpired:()Z
      68: ifeq          81
      71: aload_2
      72: aload         4
      74: invokestatic  #93                 // Method org/apache/hc/core5/util/DeadlineTimeoutException.from:(Lorg/apache/hc/core5/util/Deadline;)Lorg/apache/hc/core5/util/DeadlineTimeoutException;
      77: invokevirtual #94                 // Method org/apache/hc/core5/pool/LaxConnPool$LeaseRequest.failed:(Ljava/lang/Exception;)Z
      80: pop
      81: aload_2
      82: invokevirtual #90                 // Method org/apache/hc/core5/pool/LaxConnPool$LeaseRequest.isDone:()Z
      85: ifeq          94
      88: aload_1
      89: invokeinterface #53,  1           // InterfaceMethod java/util/Iterator.remove:()V
      94: goto          10
      97: return

  public final T getRoute();
    Code:
       0: aload_0
       1: getfield      #2                  // Field route:Ljava/lang/Object;
       4: areturn

  public int getMax();
    Code:
       0: aload_0
       1: getfield      #24                 // Field max:I
       4: ireturn

  public void setMax(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #24                 // Field max:I
       5: return

  public int getPendingCount();
    Code:
       0: aload_0
       1: getfield      #14                 // Field pending:Ljava/util/Deque;
       4: invokeinterface #99,  1           // InterfaceMethod java/util/Deque.size:()I
       9: ireturn

  public int getLeasedCount();
    Code:
       0: aload_0
       1: getfield      #10                 // Field leased:Ljava/util/concurrent/ConcurrentMap;
       4: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/ConcurrentMap.size:()I
       9: ireturn

  public int getAvailableCount();
    Code:
       0: aload_0
       1: getfield      #13                 // Field available:Ljava/util/Deque;
       4: invokeinterface #99,  1           // InterfaceMethod java/util/Deque.size:()I
       9: ireturn

  public void enumAvailable(org.apache.hc.core5.function.Callback<org.apache.hc.core5.pool.PoolEntry<T, C>>);
    Code:
       0: aload_0
       1: getfield      #13                 // Field available:Ljava/util/Deque;
       4: invokeinterface #51,  1           // InterfaceMethod java/util/Deque.iterator:()Ljava/util/Iterator;
       9: astore_2
      10: aload_2
      11: invokeinterface #33,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          90
      19: aload_2
      20: invokeinterface #34,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #27                 // class java/util/concurrent/atomic/AtomicMarkableReference
      28: astore_3
      29: aload_3
      30: invokevirtual #28                 // Method java/util/concurrent/atomic/AtomicMarkableReference.getReference:()Ljava/lang/Object;
      33: checkcast     #29                 // class org/apache/hc/core5/pool/PoolEntry
      36: astore        4
      38: aload_3
      39: aload         4
      41: aload         4
      43: iconst_0
      44: iconst_1
      45: invokevirtual #52                 // Method java/util/concurrent/atomic/AtomicMarkableReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;ZZ)Z
      48: ifeq          87
      51: aload_1
      52: aload         4
      54: invokeinterface #101,  2          // InterfaceMethod org/apache/hc/core5/function/Callback.execute:(Ljava/lang/Object;)V
      59: aload         4
      61: invokevirtual #74                 // Method org/apache/hc/core5/pool/PoolEntry.hasConnection:()Z
      64: ifne          80
      67: aload_0
      68: invokespecial #86                 // Method deallocatePoolEntry:()V
      71: aload_2
      72: invokeinterface #53,  1           // InterfaceMethod java/util/Iterator.remove:()V
      77: goto          87
      80: aload_3
      81: aload         4
      83: iconst_0
      84: invokevirtual #102                // Method java/util/concurrent/atomic/AtomicMarkableReference.set:(Ljava/lang/Object;Z)V
      87: goto          10
      90: aload_0
      91: getfield      #23                 // Field releaseSeqNum:Ljava/util/concurrent/atomic/AtomicLong;
      94: invokevirtual #87                 // Method java/util/concurrent/atomic/AtomicLong.incrementAndGet:()J
      97: pop2
      98: aload_0
      99: getstatic     #103                // Field org/apache/hc/core5/pool/LaxConnPool$PerRoutePool$RequestServiceStrategy.ALL:Lorg/apache/hc/core5/pool/LaxConnPool$PerRoutePool$RequestServiceStrategy;
     102: invokespecial #89                 // Method servicePendingRequests:(Lorg/apache/hc/core5/pool/LaxConnPool$PerRoutePool$RequestServiceStrategy;)V
     105: return

  public void enumLeased(org.apache.hc.core5.function.Callback<org.apache.hc.core5.pool.PoolEntry<T, C>>);
    Code:
       0: aload_0
       1: getfield      #10                 // Field leased:Ljava/util/concurrent/ConcurrentMap;
       4: invokeinterface #31,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.keySet:()Ljava/util/Set;
       9: invokeinterface #104,  1          // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      14: astore_2
      15: aload_2
      16: invokeinterface #33,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          61
      24: aload_2
      25: invokeinterface #34,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #29                 // class org/apache/hc/core5/pool/PoolEntry
      33: astore_3
      34: aload_1
      35: aload_3
      36: invokeinterface #101,  2          // InterfaceMethod org/apache/hc/core5/function/Callback.execute:(Ljava/lang/Object;)V
      41: aload_3
      42: invokevirtual #74                 // Method org/apache/hc/core5/pool/PoolEntry.hasConnection:()Z
      45: ifne          58
      48: aload_0
      49: invokespecial #86                 // Method deallocatePoolEntry:()V
      52: aload_2
      53: invokeinterface #53,  1           // InterfaceMethod java/util/Iterator.remove:()V
      58: goto          15
      61: return

  public java.lang.String toString();
    Code:
       0: new           #80                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #81                 // Method java/lang/StringBuilder."<init>":()V
       7: astore_1
       8: aload_1
       9: ldc           #105                // String [route:
      11: invokevirtual #83                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      14: pop
      15: aload_1
      16: aload_0
      17: getfield      #2                  // Field route:Ljava/lang/Object;
      20: invokevirtual #84                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      23: pop
      24: aload_1
      25: ldc           #106                // String ][leased:
      27: invokevirtual #83                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: pop
      31: aload_1
      32: aload_0
      33: getfield      #10                 // Field leased:Ljava/util/concurrent/ConcurrentMap;
      36: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/ConcurrentMap.size:()I
      41: invokevirtual #107                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      44: pop
      45: aload_1
      46: ldc           #108                // String ][available:
      48: invokevirtual #83                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      51: pop
      52: aload_1
      53: aload_0
      54: getfield      #13                 // Field available:Ljava/util/Deque;
      57: invokeinterface #99,  1           // InterfaceMethod java/util/Deque.size:()I
      62: invokevirtual #107                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      65: pop
      66: aload_1
      67: ldc           #109                // String ][pending:
      69: invokevirtual #83                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      72: pop
      73: aload_1
      74: aload_0
      75: getfield      #14                 // Field pending:Ljava/util/Deque;
      78: invokeinterface #99,  1           // InterfaceMethod java/util/Deque.size:()I
      83: invokevirtual #107                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      86: pop
      87: aload_1
      88: ldc           #110                // String ]
      90: invokevirtual #83                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      93: pop
      94: aload_1
      95: invokevirtual #85                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      98: areturn
}
