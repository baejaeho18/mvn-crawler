Compiled from "SharedInputBuffer.java"
public final class org.apache.hc.core5.http.nio.support.classic.SharedInputBuffer extends org.apache.hc.core5.http.nio.support.classic.AbstractSharedBuffer implements org.apache.hc.core5.http.nio.support.classic.ContentInputBuffer {
  private volatile org.apache.hc.core5.http.nio.CapacityChannel capacityChannel;

  public org.apache.hc.core5.http.nio.support.classic.SharedInputBuffer(java.util.concurrent.locks.ReentrantLock, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokespecial #1                  // Method org/apache/hc/core5/http/nio/support/classic/AbstractSharedBuffer."<init>":(Ljava/util/concurrent/locks/ReentrantLock;I)V
       6: return

  public org.apache.hc.core5.http.nio.support.classic.SharedInputBuffer(int);
    Code:
       0: aload_0
       1: new           #2                  // class java/util/concurrent/locks/ReentrantLock
       4: dup
       5: invokespecial #3                  // Method java/util/concurrent/locks/ReentrantLock."<init>":()V
       8: iload_1
       9: invokespecial #1                  // Method org/apache/hc/core5/http/nio/support/classic/AbstractSharedBuffer."<init>":(Ljava/util/concurrent/locks/ReentrantLock;I)V
      12: return

  public int fill(java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #5                  // Method java/util/concurrent/locks/ReentrantLock.lock:()V
       7: aload_0
       8: invokevirtual #6                  // Method setInputMode:()V
      11: aload_0
      12: aload_0
      13: invokevirtual #7                  // Method buffer:()Ljava/nio/ByteBuffer;
      16: invokevirtual #8                  // Method java/nio/ByteBuffer.position:()I
      19: aload_1
      20: invokevirtual #9                  // Method java/nio/ByteBuffer.remaining:()I
      23: iadd
      24: invokevirtual #10                 // Method ensureAdjustedCapacity:(I)V
      27: aload_0
      28: invokevirtual #7                  // Method buffer:()Ljava/nio/ByteBuffer;
      31: aload_1
      32: invokevirtual #11                 // Method java/nio/ByteBuffer.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;
      35: pop
      36: aload_0
      37: invokevirtual #7                  // Method buffer:()Ljava/nio/ByteBuffer;
      40: invokevirtual #9                  // Method java/nio/ByteBuffer.remaining:()I
      43: istore_2
      44: aload_0
      45: getfield      #12                 // Field condition:Ljava/util/concurrent/locks/Condition;
      48: invokeinterface #13,  1           // InterfaceMethod java/util/concurrent/locks/Condition.signalAll:()V
      53: iload_2
      54: istore_3
      55: aload_0
      56: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      59: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      62: iload_3
      63: ireturn
      64: astore        4
      66: aload_0
      67: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      70: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      73: aload         4
      75: athrow
    Exception table:
       from    to  target type
           7    55    64   any
          64    66    64   any

  public void updateCapacity(org.apache.hc.core5.http.nio.CapacityChannel) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #5                  // Method java/util/concurrent/locks/ReentrantLock.lock:()V
       7: aload_0
       8: aload_1
       9: putfield      #15                 // Field capacityChannel:Lorg/apache/hc/core5/http/nio/CapacityChannel;
      12: aload_0
      13: invokevirtual #6                  // Method setInputMode:()V
      16: aload_0
      17: invokevirtual #7                  // Method buffer:()Ljava/nio/ByteBuffer;
      20: invokevirtual #16                 // Method java/nio/ByteBuffer.hasRemaining:()Z
      23: ifeq          39
      26: aload_1
      27: aload_0
      28: invokevirtual #7                  // Method buffer:()Ljava/nio/ByteBuffer;
      31: invokevirtual #9                  // Method java/nio/ByteBuffer.remaining:()I
      34: invokeinterface #17,  2           // InterfaceMethod org/apache/hc/core5/http/nio/CapacityChannel.update:(I)V
      39: aload_0
      40: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      43: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      46: goto          59
      49: astore_2
      50: aload_0
      51: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      54: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      57: aload_2
      58: athrow
      59: return
    Exception table:
       from    to  target type
           7    39    49   any
          49    50    49   any

  private void awaitInput() throws java.io.InterruptedIOException;
    Code:
       0: aload_0
       1: invokevirtual #7                  // Method buffer:()Ljava/nio/ByteBuffer;
       4: invokevirtual #16                 // Method java/nio/ByteBuffer.hasRemaining:()Z
       7: ifne          73
      10: aload_0
      11: invokevirtual #6                  // Method setInputMode:()V
      14: aload_0
      15: invokevirtual #7                  // Method buffer:()Ljava/nio/ByteBuffer;
      18: invokevirtual #8                  // Method java/nio/ByteBuffer.position:()I
      21: ifne          69
      24: aload_0
      25: getfield      #18                 // Field endStream:Z
      28: ifne          69
      31: aload_0
      32: getfield      #19                 // Field aborted:Z
      35: ifne          69
      38: aload_0
      39: getfield      #12                 // Field condition:Ljava/util/concurrent/locks/Condition;
      42: invokeinterface #20,  1           // InterfaceMethod java/util/concurrent/locks/Condition.await:()V
      47: goto          14
      50: astore_1
      51: invokestatic  #22                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      54: invokevirtual #23                 // Method java/lang/Thread.interrupt:()V
      57: new           #24                 // class java/io/InterruptedIOException
      60: dup
      61: aload_1
      62: invokevirtual #25                 // Method java/lang/InterruptedException.getMessage:()Ljava/lang/String;
      65: invokespecial #26                 // Method java/io/InterruptedIOException."<init>":(Ljava/lang/String;)V
      68: athrow
      69: aload_0
      70: invokevirtual #27                 // Method setOutputMode:()V
      73: return
    Exception table:
       from    to  target type
          38    47    50   Class java/lang/InterruptedException

  public int read() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #5                  // Method java/util/concurrent/locks/ReentrantLock.lock:()V
       7: aload_0
       8: invokevirtual #27                 // Method setOutputMode:()V
      11: aload_0
      12: invokespecial #28                 // Method awaitInput:()V
      15: aload_0
      16: getfield      #19                 // Field aborted:Z
      19: ifeq          33
      22: iconst_m1
      23: istore_1
      24: aload_0
      25: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      28: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      31: iload_1
      32: ireturn
      33: aload_0
      34: invokevirtual #7                  // Method buffer:()Ljava/nio/ByteBuffer;
      37: invokevirtual #16                 // Method java/nio/ByteBuffer.hasRemaining:()Z
      40: ifne          61
      43: aload_0
      44: getfield      #18                 // Field endStream:Z
      47: ifeq          61
      50: iconst_m1
      51: istore_1
      52: aload_0
      53: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      56: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      59: iload_1
      60: ireturn
      61: aload_0
      62: invokevirtual #7                  // Method buffer:()Ljava/nio/ByteBuffer;
      65: invokevirtual #29                 // Method java/nio/ByteBuffer.get:()B
      68: sipush        255
      71: iand
      72: istore_1
      73: aload_0
      74: invokevirtual #7                  // Method buffer:()Ljava/nio/ByteBuffer;
      77: invokevirtual #16                 // Method java/nio/ByteBuffer.hasRemaining:()Z
      80: ifne          120
      83: aload_0
      84: getfield      #15                 // Field capacityChannel:Lorg/apache/hc/core5/http/nio/CapacityChannel;
      87: ifnull        120
      90: aload_0
      91: invokevirtual #6                  // Method setInputMode:()V
      94: aload_0
      95: invokevirtual #7                  // Method buffer:()Ljava/nio/ByteBuffer;
      98: invokevirtual #16                 // Method java/nio/ByteBuffer.hasRemaining:()Z
     101: ifeq          120
     104: aload_0
     105: getfield      #15                 // Field capacityChannel:Lorg/apache/hc/core5/http/nio/CapacityChannel;
     108: aload_0
     109: invokevirtual #7                  // Method buffer:()Ljava/nio/ByteBuffer;
     112: invokevirtual #9                  // Method java/nio/ByteBuffer.remaining:()I
     115: invokeinterface #17,  2           // InterfaceMethod org/apache/hc/core5/http/nio/CapacityChannel.update:(I)V
     120: iload_1
     121: istore_2
     122: aload_0
     123: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
     126: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
     129: iload_2
     130: ireturn
     131: astore_3
     132: aload_0
     133: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
     136: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
     139: aload_3
     140: athrow
    Exception table:
       from    to  target type
           7    24   131   any
          33    52   131   any
          61   122   131   any
         131   132   131   any

  public int read(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #5                  // Method java/util/concurrent/locks/ReentrantLock.lock:()V
       7: aload_0
       8: invokevirtual #27                 // Method setOutputMode:()V
      11: aload_0
      12: invokespecial #28                 // Method awaitInput:()V
      15: aload_0
      16: getfield      #19                 // Field aborted:Z
      19: ifeq          35
      22: iconst_m1
      23: istore        4
      25: aload_0
      26: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      29: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      32: iload         4
      34: ireturn
      35: aload_0
      36: invokevirtual #7                  // Method buffer:()Ljava/nio/ByteBuffer;
      39: invokevirtual #16                 // Method java/nio/ByteBuffer.hasRemaining:()Z
      42: ifne          65
      45: aload_0
      46: getfield      #18                 // Field endStream:Z
      49: ifeq          65
      52: iconst_m1
      53: istore        4
      55: aload_0
      56: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      59: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      62: iload         4
      64: ireturn
      65: aload_0
      66: invokevirtual #7                  // Method buffer:()Ljava/nio/ByteBuffer;
      69: invokevirtual #9                  // Method java/nio/ByteBuffer.remaining:()I
      72: iload_3
      73: invokestatic  #30                 // Method java/lang/Math.min:(II)I
      76: istore        4
      78: aload_0
      79: invokevirtual #7                  // Method buffer:()Ljava/nio/ByteBuffer;
      82: aload_1
      83: iload_2
      84: iload         4
      86: invokevirtual #31                 // Method java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;
      89: pop
      90: aload_0
      91: invokevirtual #7                  // Method buffer:()Ljava/nio/ByteBuffer;
      94: invokevirtual #16                 // Method java/nio/ByteBuffer.hasRemaining:()Z
      97: ifne          137
     100: aload_0
     101: getfield      #15                 // Field capacityChannel:Lorg/apache/hc/core5/http/nio/CapacityChannel;
     104: ifnull        137
     107: aload_0
     108: invokevirtual #6                  // Method setInputMode:()V
     111: aload_0
     112: invokevirtual #7                  // Method buffer:()Ljava/nio/ByteBuffer;
     115: invokevirtual #16                 // Method java/nio/ByteBuffer.hasRemaining:()Z
     118: ifeq          137
     121: aload_0
     122: getfield      #15                 // Field capacityChannel:Lorg/apache/hc/core5/http/nio/CapacityChannel;
     125: aload_0
     126: invokevirtual #7                  // Method buffer:()Ljava/nio/ByteBuffer;
     129: invokevirtual #9                  // Method java/nio/ByteBuffer.remaining:()I
     132: invokeinterface #17,  2           // InterfaceMethod org/apache/hc/core5/http/nio/CapacityChannel.update:(I)V
     137: iload         4
     139: istore        5
     141: aload_0
     142: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
     145: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
     148: iload         5
     150: ireturn
     151: astore        6
     153: aload_0
     154: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
     157: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
     160: aload         6
     162: athrow
    Exception table:
       from    to  target type
           7    25   151   any
          35    55   151   any
          65   141   151   any
         151   153   151   any

  public void markEndStream();
    Code:
       0: aload_0
       1: getfield      #18                 // Field endStream:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      12: invokevirtual #5                  // Method java/util/concurrent/locks/ReentrantLock.lock:()V
      15: aload_0
      16: getfield      #18                 // Field endStream:Z
      19: ifne          41
      22: aload_0
      23: iconst_1
      24: putfield      #18                 // Field endStream:Z
      27: aload_0
      28: aconst_null
      29: putfield      #15                 // Field capacityChannel:Lorg/apache/hc/core5/http/nio/CapacityChannel;
      32: aload_0
      33: getfield      #12                 // Field condition:Ljava/util/concurrent/locks/Condition;
      36: invokeinterface #13,  1           // InterfaceMethod java/util/concurrent/locks/Condition.signalAll:()V
      41: aload_0
      42: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      45: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      48: goto          61
      51: astore_1
      52: aload_0
      53: getfield      #4                  // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      56: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      59: aload_1
      60: athrow
      61: return
    Exception table:
       from    to  target type
          15    41    51   any
          51    52    51   any

  public boolean isEndStream();
    Code:
       0: aload_0
       1: invokespecial #32                 // Method org/apache/hc/core5/http/nio/support/classic/AbstractSharedBuffer.isEndStream:()Z
       4: ireturn

  public void reset();
    Code:
       0: aload_0
       1: invokespecial #33                 // Method org/apache/hc/core5/http/nio/support/classic/AbstractSharedBuffer.reset:()V
       4: return

  public void abort();
    Code:
       0: aload_0
       1: invokespecial #34                 // Method org/apache/hc/core5/http/nio/support/classic/AbstractSharedBuffer.abort:()V
       4: return

  public int length();
    Code:
       0: aload_0
       1: invokespecial #35                 // Method org/apache/hc/core5/http/nio/support/classic/AbstractSharedBuffer.length:()I
       4: ireturn

  public int capacity();
    Code:
       0: aload_0
       1: invokespecial #36                 // Method org/apache/hc/core5/http/nio/support/classic/AbstractSharedBuffer.capacity:()I
       4: ireturn

  public boolean hasData();
    Code:
       0: aload_0
       1: invokespecial #37                 // Method org/apache/hc/core5/http/nio/support/classic/AbstractSharedBuffer.hasData:()Z
       4: ireturn
}
