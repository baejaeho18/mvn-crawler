Compiled from "IOWorkers.java"
final class org.apache.hc.core5.reactor.IOWorkers$PowerOfTwoSelector implements org.apache.hc.core5.reactor.IOWorkers$Selector {
  private final java.util.concurrent.atomic.AtomicInteger idx;

  private final org.apache.hc.core5.reactor.SingleCoreIOReactor[] dispatchers;

  org.apache.hc.core5.reactor.IOWorkers$PowerOfTwoSelector(org.apache.hc.core5.reactor.SingleCoreIOReactor[]);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/atomic/AtomicInteger
       8: dup
       9: iconst_0
      10: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      13: putfield      #4                  // Field idx:Ljava/util/concurrent/atomic/AtomicInteger;
      16: aload_0
      17: aload_1
      18: putfield      #5                  // Field dispatchers:[Lorg/apache/hc/core5/reactor/SingleCoreIOReactor;
      21: return

  public org.apache.hc.core5.reactor.SingleCoreIOReactor next();
    Code:
       0: aload_0
       1: getfield      #5                  // Field dispatchers:[Lorg/apache/hc/core5/reactor/SingleCoreIOReactor;
       4: aload_0
       5: getfield      #4                  // Field idx:Ljava/util/concurrent/atomic/AtomicInteger;
       8: invokevirtual #6                  // Method java/util/concurrent/atomic/AtomicInteger.getAndIncrement:()I
      11: aload_0
      12: getfield      #5                  // Field dispatchers:[Lorg/apache/hc/core5/reactor/SingleCoreIOReactor;
      15: arraylength
      16: iconst_1
      17: isub
      18: iand
      19: aaload
      20: astore_1
      21: aload_1
      22: invokestatic  #7                  // Method org/apache/hc/core5/reactor/IOWorkers.access$000:(Lorg/apache/hc/core5/reactor/SingleCoreIOReactor;)V
      25: aload_1
      26: areturn
}
