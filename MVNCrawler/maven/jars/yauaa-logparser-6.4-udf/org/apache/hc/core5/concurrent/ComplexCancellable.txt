Compiled from "ComplexCancellable.java"
public final class org.apache.hc.core5.concurrent.ComplexCancellable implements org.apache.hc.core5.concurrent.CancellableDependency {
  private final java.util.concurrent.atomic.AtomicMarkableReference<org.apache.hc.core5.concurrent.Cancellable> dependencyRef;

  public org.apache.hc.core5.concurrent.ComplexCancellable();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/atomic/AtomicMarkableReference
       8: dup
       9: aconst_null
      10: iconst_0
      11: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicMarkableReference."<init>":(Ljava/lang/Object;Z)V
      14: putfield      #4                  // Field dependencyRef:Ljava/util/concurrent/atomic/AtomicMarkableReference;
      17: return

  public boolean isCancelled();
    Code:
       0: aload_0
       1: getfield      #4                  // Field dependencyRef:Ljava/util/concurrent/atomic/AtomicMarkableReference;
       4: invokevirtual #5                  // Method java/util/concurrent/atomic/AtomicMarkableReference.isMarked:()Z
       7: ireturn

  public void setDependency(org.apache.hc.core5.concurrent.Cancellable);
    Code:
       0: aload_1
       1: ldc           #6                  // String dependency
       3: invokestatic  #7                  // Method org/apache/hc/core5/util/Args.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: getfield      #4                  // Field dependencyRef:Ljava/util/concurrent/atomic/AtomicMarkableReference;
      11: invokevirtual #8                  // Method java/util/concurrent/atomic/AtomicMarkableReference.getReference:()Ljava/lang/Object;
      14: checkcast     #9                  // class org/apache/hc/core5/concurrent/Cancellable
      17: astore_2
      18: aload_0
      19: getfield      #4                  // Field dependencyRef:Ljava/util/concurrent/atomic/AtomicMarkableReference;
      22: aload_2
      23: aload_1
      24: iconst_0
      25: iconst_0
      26: invokevirtual #10                 // Method java/util/concurrent/atomic/AtomicMarkableReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;ZZ)Z
      29: ifne          39
      32: aload_1
      33: invokeinterface #11,  1           // InterfaceMethod org/apache/hc/core5/concurrent/Cancellable.cancel:()Z
      38: pop
      39: return

  public boolean cancel();
    Code:
       0: aload_0
       1: getfield      #4                  // Field dependencyRef:Ljava/util/concurrent/atomic/AtomicMarkableReference;
       4: invokevirtual #5                  // Method java/util/concurrent/atomic/AtomicMarkableReference.isMarked:()Z
       7: ifne          51
      10: aload_0
      11: getfield      #4                  // Field dependencyRef:Ljava/util/concurrent/atomic/AtomicMarkableReference;
      14: invokevirtual #8                  // Method java/util/concurrent/atomic/AtomicMarkableReference.getReference:()Ljava/lang/Object;
      17: checkcast     #9                  // class org/apache/hc/core5/concurrent/Cancellable
      20: astore_1
      21: aload_0
      22: getfield      #4                  // Field dependencyRef:Ljava/util/concurrent/atomic/AtomicMarkableReference;
      25: aload_1
      26: aload_1
      27: iconst_0
      28: iconst_1
      29: invokevirtual #10                 // Method java/util/concurrent/atomic/AtomicMarkableReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;ZZ)Z
      32: ifeq          48
      35: aload_1
      36: ifnull        46
      39: aload_1
      40: invokeinterface #11,  1           // InterfaceMethod org/apache/hc/core5/concurrent/Cancellable.cancel:()Z
      45: pop
      46: iconst_1
      47: ireturn
      48: goto          0
      51: iconst_0
      52: ireturn
}
