Compiled from "AbstractClassicServerExchangeHandler.java"
public abstract class org.apache.hc.core5.http.nio.support.classic.AbstractClassicServerExchangeHandler implements org.apache.hc.core5.http.nio.AsyncServerExchangeHandler {
  private final int initialBufferSize;

  private final java.util.concurrent.Executor executor;

  private final java.util.concurrent.atomic.AtomicReference<org.apache.hc.core5.http.nio.support.classic.AbstractClassicServerExchangeHandler$State> state;

  private final java.util.concurrent.atomic.AtomicReference<java.lang.Exception> exception;

  private volatile org.apache.hc.core5.http.nio.support.classic.SharedInputBuffer inputBuffer;

  private volatile org.apache.hc.core5.http.nio.support.classic.SharedOutputBuffer outputBuffer;

  public org.apache.hc.core5.http.nio.support.classic.AbstractClassicServerExchangeHandler(int, java.util.concurrent.Executor);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iload_1
       6: ldc           #6                  // String Initial buffer size
       8: invokestatic  #7                  // Method org/apache/hc/core5/util/Args.positive:(ILjava/lang/String;)I
      11: putfield      #8                  // Field initialBufferSize:I
      14: aload_0
      15: aload_2
      16: ldc           #9                  // String Executor
      18: invokestatic  #10                 // Method org/apache/hc/core5/util/Args.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      21: checkcast     #11                 // class java/util/concurrent/Executor
      24: putfield      #12                 // Field executor:Ljava/util/concurrent/Executor;
      27: aload_0
      28: new           #13                 // class java/util/concurrent/atomic/AtomicReference
      31: dup
      32: aconst_null
      33: invokespecial #14                 // Method java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
      36: putfield      #4                  // Field exception:Ljava/util/concurrent/atomic/AtomicReference;
      39: aload_0
      40: new           #13                 // class java/util/concurrent/atomic/AtomicReference
      43: dup
      44: getstatic     #15                 // Field org/apache/hc/core5/http/nio/support/classic/AbstractClassicServerExchangeHandler$State.IDLE:Lorg/apache/hc/core5/http/nio/support/classic/AbstractClassicServerExchangeHandler$State;
      47: invokespecial #14                 // Method java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
      50: putfield      #1                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      53: return

  protected abstract void handle(org.apache.hc.core5.http.HttpRequest, java.io.InputStream, org.apache.hc.core5.http.HttpResponse, java.io.OutputStream, org.apache.hc.core5.http.protocol.HttpContext) throws java.io.IOException, org.apache.hc.core5.http.HttpException;

  public java.lang.Exception getException();
    Code:
       0: aload_0
       1: getfield      #4                  // Field exception:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #17                 // class java/lang/Exception
      10: areturn

  public final void handleRequest(org.apache.hc.core5.http.HttpRequest, org.apache.hc.core5.http.EntityDetails, org.apache.hc.core5.http.nio.ResponseChannel, org.apache.hc.core5.http.protocol.HttpContext) throws org.apache.hc.core5.http.HttpException, java.io.IOException;
    Code:
       0: new           #18                 // class java/util/concurrent/atomic/AtomicBoolean
       3: dup
       4: iconst_0
       5: invokespecial #19                 // Method java/util/concurrent/atomic/AtomicBoolean."<init>":(Z)V
       8: astore        5
      10: new           #20                 // class org/apache/hc/core5/http/message/BasicHttpResponse
      13: dup
      14: sipush        200
      17: invokespecial #21                 // Method org/apache/hc/core5/http/message/BasicHttpResponse."<init>":(I)V
      20: astore        6
      22: new           #22                 // class org/apache/hc/core5/http/nio/support/classic/AbstractClassicServerExchangeHandler$1
      25: dup
      26: aload_0
      27: aload         6
      29: aload         5
      31: invokespecial #23                 // Method org/apache/hc/core5/http/nio/support/classic/AbstractClassicServerExchangeHandler$1."<init>":(Lorg/apache/hc/core5/http/nio/support/classic/AbstractClassicServerExchangeHandler;Lorg/apache/hc/core5/http/HttpResponse;Ljava/util/concurrent/atomic/AtomicBoolean;)V
      34: astore        7
      36: aload_2
      37: ifnull        71
      40: aload_0
      41: new           #24                 // class org/apache/hc/core5/http/nio/support/classic/SharedInputBuffer
      44: dup
      45: aload_0
      46: getfield      #8                  // Field initialBufferSize:I
      49: invokespecial #25                 // Method org/apache/hc/core5/http/nio/support/classic/SharedInputBuffer."<init>":(I)V
      52: putfield      #3                  // Field inputBuffer:Lorg/apache/hc/core5/http/nio/support/classic/SharedInputBuffer;
      55: new           #26                 // class org/apache/hc/core5/http/nio/support/classic/ContentInputStream
      58: dup
      59: aload_0
      60: getfield      #3                  // Field inputBuffer:Lorg/apache/hc/core5/http/nio/support/classic/SharedInputBuffer;
      63: invokespecial #27                 // Method org/apache/hc/core5/http/nio/support/classic/ContentInputStream."<init>":(Lorg/apache/hc/core5/http/nio/support/classic/ContentInputBuffer;)V
      66: astore        8
      68: goto          74
      71: aconst_null
      72: astore        8
      74: aload_0
      75: new           #28                 // class org/apache/hc/core5/http/nio/support/classic/SharedOutputBuffer
      78: dup
      79: aload_0
      80: getfield      #8                  // Field initialBufferSize:I
      83: invokespecial #29                 // Method org/apache/hc/core5/http/nio/support/classic/SharedOutputBuffer."<init>":(I)V
      86: putfield      #2                  // Field outputBuffer:Lorg/apache/hc/core5/http/nio/support/classic/SharedOutputBuffer;
      89: new           #30                 // class org/apache/hc/core5/http/nio/support/classic/AbstractClassicServerExchangeHandler$2
      92: dup
      93: aload_0
      94: aload_0
      95: getfield      #2                  // Field outputBuffer:Lorg/apache/hc/core5/http/nio/support/classic/SharedOutputBuffer;
      98: aload         5
     100: aload_3
     101: aload         6
     103: aload         4
     105: invokespecial #31                 // Method org/apache/hc/core5/http/nio/support/classic/AbstractClassicServerExchangeHandler$2."<init>":(Lorg/apache/hc/core5/http/nio/support/classic/AbstractClassicServerExchangeHandler;Lorg/apache/hc/core5/http/nio/support/classic/ContentOutputBuffer;Ljava/util/concurrent/atomic/AtomicBoolean;Lorg/apache/hc/core5/http/nio/ResponseChannel;Lorg/apache/hc/core5/http/HttpResponse;Lorg/apache/hc/core5/http/protocol/HttpContext;)V
     108: astore        9
     110: aload_0
     111: getfield      #1                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
     114: getstatic     #15                 // Field org/apache/hc/core5/http/nio/support/classic/AbstractClassicServerExchangeHandler$State.IDLE:Lorg/apache/hc/core5/http/nio/support/classic/AbstractClassicServerExchangeHandler$State;
     117: getstatic     #32                 // Field org/apache/hc/core5/http/nio/support/classic/AbstractClassicServerExchangeHandler$State.ACTIVE:Lorg/apache/hc/core5/http/nio/support/classic/AbstractClassicServerExchangeHandler$State;
     120: invokevirtual #33                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
     123: ifeq          152
     126: aload_0
     127: getfield      #12                 // Field executor:Ljava/util/concurrent/Executor;
     130: new           #34                 // class org/apache/hc/core5/http/nio/support/classic/AbstractClassicServerExchangeHandler$3
     133: dup
     134: aload_0
     135: aload_1
     136: aload         8
     138: aload         7
     140: aload         9
     142: aload         4
     144: invokespecial #35                 // Method org/apache/hc/core5/http/nio/support/classic/AbstractClassicServerExchangeHandler$3."<init>":(Lorg/apache/hc/core5/http/nio/support/classic/AbstractClassicServerExchangeHandler;Lorg/apache/hc/core5/http/HttpRequest;Ljava/io/InputStream;Lorg/apache/hc/core5/http/HttpResponse;Ljava/io/OutputStream;Lorg/apache/hc/core5/http/protocol/HttpContext;)V
     147: invokeinterface #36,  2           // InterfaceMethod java/util/concurrent/Executor.execute:(Ljava/lang/Runnable;)V
     152: return

  public final void updateCapacity(org.apache.hc.core5.http.nio.CapacityChannel) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field inputBuffer:Lorg/apache/hc/core5/http/nio/support/classic/SharedInputBuffer;
       4: ifnull        15
       7: aload_0
       8: getfield      #3                  // Field inputBuffer:Lorg/apache/hc/core5/http/nio/support/classic/SharedInputBuffer;
      11: aload_1
      12: invokevirtual #37                 // Method org/apache/hc/core5/http/nio/support/classic/SharedInputBuffer.updateCapacity:(Lorg/apache/hc/core5/http/nio/CapacityChannel;)V
      15: return

  public final void consume(java.nio.ByteBuffer) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field inputBuffer:Lorg/apache/hc/core5/http/nio/support/classic/SharedInputBuffer;
       4: ldc           #38                 // String Input buffer
       6: invokestatic  #39                 // Method org/apache/hc/core5/util/Asserts.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       9: aload_0
      10: getfield      #3                  // Field inputBuffer:Lorg/apache/hc/core5/http/nio/support/classic/SharedInputBuffer;
      13: aload_1
      14: invokevirtual #40                 // Method org/apache/hc/core5/http/nio/support/classic/SharedInputBuffer.fill:(Ljava/nio/ByteBuffer;)I
      17: pop
      18: return

  public final void streamEnd(java.util.List<? extends org.apache.hc.core5.http.Header>) throws org.apache.hc.core5.http.HttpException, java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field inputBuffer:Lorg/apache/hc/core5/http/nio/support/classic/SharedInputBuffer;
       4: ldc           #38                 // String Input buffer
       6: invokestatic  #39                 // Method org/apache/hc/core5/util/Asserts.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       9: aload_0
      10: getfield      #3                  // Field inputBuffer:Lorg/apache/hc/core5/http/nio/support/classic/SharedInputBuffer;
      13: invokevirtual #41                 // Method org/apache/hc/core5/http/nio/support/classic/SharedInputBuffer.markEndStream:()V
      16: return

  public final int available();
    Code:
       0: aload_0
       1: getfield      #2                  // Field outputBuffer:Lorg/apache/hc/core5/http/nio/support/classic/SharedOutputBuffer;
       4: ldc           #42                 // String Output buffer
       6: invokestatic  #39                 // Method org/apache/hc/core5/util/Asserts.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       9: aload_0
      10: getfield      #2                  // Field outputBuffer:Lorg/apache/hc/core5/http/nio/support/classic/SharedOutputBuffer;
      13: invokevirtual #43                 // Method org/apache/hc/core5/http/nio/support/classic/SharedOutputBuffer.length:()I
      16: ireturn

  public final void produce(org.apache.hc.core5.http.nio.DataStreamChannel) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field outputBuffer:Lorg/apache/hc/core5/http/nio/support/classic/SharedOutputBuffer;
       4: ldc           #42                 // String Output buffer
       6: invokestatic  #39                 // Method org/apache/hc/core5/util/Asserts.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       9: aload_0
      10: getfield      #2                  // Field outputBuffer:Lorg/apache/hc/core5/http/nio/support/classic/SharedOutputBuffer;
      13: aload_1
      14: invokevirtual #44                 // Method org/apache/hc/core5/http/nio/support/classic/SharedOutputBuffer.flush:(Lorg/apache/hc/core5/http/nio/DataStreamChannel;)V
      17: return

  public final void failed(java.lang.Exception);
    Code:
       0: aload_0
       1: getfield      #4                  // Field exception:Ljava/util/concurrent/atomic/AtomicReference;
       4: aconst_null
       5: aload_1
       6: invokevirtual #33                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
       9: pop
      10: aload_0
      11: invokevirtual #45                 // Method releaseResources:()V
      14: return

  public void releaseResources();
    Code:
       0: return

  static java.util.concurrent.atomic.AtomicReference access$000(org.apache.hc.core5.http.nio.support.classic.AbstractClassicServerExchangeHandler);
    Code:
       0: aload_0
       1: getfield      #4                  // Field exception:Ljava/util/concurrent/atomic/AtomicReference;
       4: areturn

  static org.apache.hc.core5.http.nio.support.classic.SharedInputBuffer access$100(org.apache.hc.core5.http.nio.support.classic.AbstractClassicServerExchangeHandler);
    Code:
       0: aload_0
       1: getfield      #3                  // Field inputBuffer:Lorg/apache/hc/core5/http/nio/support/classic/SharedInputBuffer;
       4: areturn

  static org.apache.hc.core5.http.nio.support.classic.SharedOutputBuffer access$200(org.apache.hc.core5.http.nio.support.classic.AbstractClassicServerExchangeHandler);
    Code:
       0: aload_0
       1: getfield      #2                  // Field outputBuffer:Lorg/apache/hc/core5/http/nio/support/classic/SharedOutputBuffer;
       4: areturn

  static java.util.concurrent.atomic.AtomicReference access$300(org.apache.hc.core5.http.nio.support.classic.AbstractClassicServerExchangeHandler);
    Code:
       0: aload_0
       1: getfield      #1                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: areturn
}
