Compiled from "ExpandableBuffer.java"
public class org.apache.hc.core5.http.impl.nio.ExpandableBuffer {
  private org.apache.hc.core5.http.impl.nio.ExpandableBuffer$Mode mode;

  private java.nio.ByteBuffer buffer;

  protected org.apache.hc.core5.http.impl.nio.ExpandableBuffer(int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iload_1
       6: invokestatic  #2                  // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;
       9: putfield      #3                  // Field buffer:Ljava/nio/ByteBuffer;
      12: aload_0
      13: getstatic     #4                  // Field org/apache/hc/core5/http/impl/nio/ExpandableBuffer$Mode.INPUT:Lorg/apache/hc/core5/http/impl/nio/ExpandableBuffer$Mode;
      16: putfield      #5                  // Field mode:Lorg/apache/hc/core5/http/impl/nio/ExpandableBuffer$Mode;
      19: return

  protected org.apache.hc.core5.http.impl.nio.ExpandableBuffer$Mode mode();
    Code:
       0: aload_0
       1: getfield      #5                  // Field mode:Lorg/apache/hc/core5/http/impl/nio/ExpandableBuffer$Mode;
       4: areturn

  protected java.nio.ByteBuffer buffer();
    Code:
       0: aload_0
       1: getfield      #3                  // Field buffer:Ljava/nio/ByteBuffer;
       4: areturn

  protected void setOutputMode();
    Code:
       0: aload_0
       1: getfield      #5                  // Field mode:Lorg/apache/hc/core5/http/impl/nio/ExpandableBuffer$Mode;
       4: getstatic     #6                  // Field org/apache/hc/core5/http/impl/nio/ExpandableBuffer$Mode.OUTPUT:Lorg/apache/hc/core5/http/impl/nio/ExpandableBuffer$Mode;
       7: if_acmpeq     25
      10: aload_0
      11: getfield      #3                  // Field buffer:Ljava/nio/ByteBuffer;
      14: invokevirtual #7                  // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;
      17: pop
      18: aload_0
      19: getstatic     #6                  // Field org/apache/hc/core5/http/impl/nio/ExpandableBuffer$Mode.OUTPUT:Lorg/apache/hc/core5/http/impl/nio/ExpandableBuffer$Mode;
      22: putfield      #5                  // Field mode:Lorg/apache/hc/core5/http/impl/nio/ExpandableBuffer$Mode;
      25: return

  protected void setInputMode();
    Code:
       0: aload_0
       1: getfield      #5                  // Field mode:Lorg/apache/hc/core5/http/impl/nio/ExpandableBuffer$Mode;
       4: getstatic     #4                  // Field org/apache/hc/core5/http/impl/nio/ExpandableBuffer$Mode.INPUT:Lorg/apache/hc/core5/http/impl/nio/ExpandableBuffer$Mode;
       7: if_acmpeq     46
      10: aload_0
      11: getfield      #3                  // Field buffer:Ljava/nio/ByteBuffer;
      14: invokevirtual #8                  // Method java/nio/ByteBuffer.hasRemaining:()Z
      17: ifeq          31
      20: aload_0
      21: getfield      #3                  // Field buffer:Ljava/nio/ByteBuffer;
      24: invokevirtual #9                  // Method java/nio/ByteBuffer.compact:()Ljava/nio/ByteBuffer;
      27: pop
      28: goto          39
      31: aload_0
      32: getfield      #3                  // Field buffer:Ljava/nio/ByteBuffer;
      35: invokevirtual #10                 // Method java/nio/ByteBuffer.clear:()Ljava/nio/Buffer;
      38: pop
      39: aload_0
      40: getstatic     #4                  // Field org/apache/hc/core5/http/impl/nio/ExpandableBuffer$Mode.INPUT:Lorg/apache/hc/core5/http/impl/nio/ExpandableBuffer$Mode;
      43: putfield      #5                  // Field mode:Lorg/apache/hc/core5/http/impl/nio/ExpandableBuffer$Mode;
      46: return

  private void expandCapacity(int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field buffer:Ljava/nio/ByteBuffer;
       4: astore_2
       5: aload_0
       6: iload_1
       7: invokestatic  #2                  // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;
      10: putfield      #3                  // Field buffer:Ljava/nio/ByteBuffer;
      13: aload_2
      14: invokevirtual #7                  // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;
      17: pop
      18: aload_0
      19: getfield      #3                  // Field buffer:Ljava/nio/ByteBuffer;
      22: aload_2
      23: invokevirtual #11                 // Method java/nio/ByteBuffer.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;
      26: pop
      27: return

  protected void expand() throws java.nio.BufferOverflowException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field buffer:Ljava/nio/ByteBuffer;
       4: invokevirtual #12                 // Method java/nio/ByteBuffer.capacity:()I
       7: iconst_1
       8: iadd
       9: iconst_1
      10: ishl
      11: istore_1
      12: iload_1
      13: ifge          48
      16: bipush        8
      18: istore_2
      19: bipush        8
      21: istore_3
      22: bipush        8
      24: istore        4
      26: ldc           #13                 // int 2147483639
      28: istore_1
      29: iload_1
      30: aload_0
      31: getfield      #3                  // Field buffer:Ljava/nio/ByteBuffer;
      34: invokevirtual #12                 // Method java/nio/ByteBuffer.capacity:()I
      37: if_icmpgt     48
      40: new           #14                 // class java/nio/BufferOverflowException
      43: dup
      44: invokespecial #15                 // Method java/nio/BufferOverflowException."<init>":()V
      47: athrow
      48: aload_0
      49: iload_1
      50: invokespecial #16                 // Method expandCapacity:(I)V
      53: return

  protected void ensureCapacity(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #3                  // Field buffer:Ljava/nio/ByteBuffer;
       5: invokevirtual #12                 // Method java/nio/ByteBuffer.capacity:()I
       8: if_icmple     16
      11: aload_0
      12: iload_1
      13: invokespecial #16                 // Method expandCapacity:(I)V
      16: return

  protected void ensureAdjustedCapacity(int);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #3                  // Field buffer:Ljava/nio/ByteBuffer;
       5: invokevirtual #12                 // Method java/nio/ByteBuffer.capacity:()I
       8: if_icmple     26
      11: iload_1
      12: bipush        10
      14: ishr
      15: iconst_1
      16: iadd
      17: bipush        10
      19: ishl
      20: istore_2
      21: aload_0
      22: iload_2
      23: invokespecial #16                 // Method expandCapacity:(I)V
      26: return

  protected boolean hasData();
    Code:
       0: aload_0
       1: invokevirtual #17                 // Method setOutputMode:()V
       4: aload_0
       5: getfield      #3                  // Field buffer:Ljava/nio/ByteBuffer;
       8: invokevirtual #8                  // Method java/nio/ByteBuffer.hasRemaining:()Z
      11: ireturn

  protected int length();
    Code:
       0: aload_0
       1: invokevirtual #17                 // Method setOutputMode:()V
       4: aload_0
       5: getfield      #3                  // Field buffer:Ljava/nio/ByteBuffer;
       8: invokevirtual #18                 // Method java/nio/ByteBuffer.remaining:()I
      11: ireturn

  protected int capacity();
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method setInputMode:()V
       4: aload_0
       5: getfield      #3                  // Field buffer:Ljava/nio/ByteBuffer;
       8: invokevirtual #18                 // Method java/nio/ByteBuffer.remaining:()I
      11: ireturn

  protected void clear();
    Code:
       0: aload_0
       1: getfield      #3                  // Field buffer:Ljava/nio/ByteBuffer;
       4: invokevirtual #10                 // Method java/nio/ByteBuffer.clear:()Ljava/nio/Buffer;
       7: pop
       8: aload_0
       9: getstatic     #4                  // Field org/apache/hc/core5/http/impl/nio/ExpandableBuffer$Mode.INPUT:Lorg/apache/hc/core5/http/impl/nio/ExpandableBuffer$Mode;
      12: putfield      #5                  // Field mode:Lorg/apache/hc/core5/http/impl/nio/ExpandableBuffer$Mode;
      15: return

  public java.lang.String toString();
    Code:
       0: new           #20                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #21                 // Method java/lang/StringBuilder."<init>":()V
       7: astore_1
       8: aload_1
       9: ldc           #22                 // String [mode=
      11: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      14: pop
      15: aload_1
      16: aload_0
      17: getfield      #5                  // Field mode:Lorg/apache/hc/core5/http/impl/nio/ExpandableBuffer$Mode;
      20: invokevirtual #24                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      23: pop
      24: aload_1
      25: ldc           #25                 // String  pos=
      27: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: pop
      31: aload_1
      32: aload_0
      33: getfield      #3                  // Field buffer:Ljava/nio/ByteBuffer;
      36: invokevirtual #26                 // Method java/nio/ByteBuffer.position:()I
      39: invokevirtual #27                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      42: pop
      43: aload_1
      44: ldc           #28                 // String  lim=
      46: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      49: pop
      50: aload_1
      51: aload_0
      52: getfield      #3                  // Field buffer:Ljava/nio/ByteBuffer;
      55: invokevirtual #29                 // Method java/nio/ByteBuffer.limit:()I
      58: invokevirtual #27                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      61: pop
      62: aload_1
      63: ldc           #30                 // String  cap=
      65: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      68: pop
      69: aload_1
      70: aload_0
      71: getfield      #3                  // Field buffer:Ljava/nio/ByteBuffer;
      74: invokevirtual #12                 // Method java/nio/ByteBuffer.capacity:()I
      77: invokevirtual #27                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      80: pop
      81: aload_1
      82: ldc           #31                 // String ]
      84: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      87: pop
      88: aload_1
      89: invokevirtual #32                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      92: areturn
}
