Compiled from "PoolingAsyncClientConnectionManagerBuilder.java"
public class org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManagerBuilder {
  private org.apache.hc.core5.http.nio.ssl.TlsStrategy tlsStrategy;

  private org.apache.hc.client5.http.SchemePortResolver schemePortResolver;

  private org.apache.hc.client5.http.DnsResolver dnsResolver;

  private org.apache.hc.core5.pool.PoolConcurrencyPolicy poolConcurrencyPolicy;

  private org.apache.hc.core5.pool.PoolReusePolicy poolReusePolicy;

  private boolean systemProperties;

  private int maxConnTotal;

  private int maxConnPerRoute;

  private org.apache.hc.core5.util.TimeValue timeToLive;

  private org.apache.hc.core5.util.TimeValue validateAfterInactivity;

  public static org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManagerBuilder create();
    Code:
       0: new           #1                  // class org/apache/hc/client5/http/impl/nio/PoolingAsyncClientConnectionManagerBuilder
       3: dup
       4: invokespecial #2                  // Method "<init>":()V
       7: areturn

  org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManagerBuilder();
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: return

  public final org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManagerBuilder setTlsStrategy(org.apache.hc.core5.http.nio.ssl.TlsStrategy);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field tlsStrategy:Lorg/apache/hc/core5/http/nio/ssl/TlsStrategy;
       5: aload_0
       6: areturn

  public final org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManagerBuilder setDnsResolver(org.apache.hc.client5.http.DnsResolver);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field dnsResolver:Lorg/apache/hc/client5/http/DnsResolver;
       5: aload_0
       6: areturn

  public final org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManagerBuilder setSchemePortResolver(org.apache.hc.client5.http.SchemePortResolver);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field schemePortResolver:Lorg/apache/hc/client5/http/SchemePortResolver;
       5: aload_0
       6: areturn

  public final org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManagerBuilder setPoolConcurrencyPolicy(org.apache.hc.core5.pool.PoolConcurrencyPolicy);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #7                  // Field poolConcurrencyPolicy:Lorg/apache/hc/core5/pool/PoolConcurrencyPolicy;
       5: aload_0
       6: areturn

  public final org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManagerBuilder setConnPoolPolicy(org.apache.hc.core5.pool.PoolReusePolicy);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #8                  // Field poolReusePolicy:Lorg/apache/hc/core5/pool/PoolReusePolicy;
       5: aload_0
       6: areturn

  public final org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManagerBuilder setMaxConnTotal(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #9                  // Field maxConnTotal:I
       5: aload_0
       6: areturn

  public final org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManagerBuilder setMaxConnPerRoute(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #10                 // Field maxConnPerRoute:I
       5: aload_0
       6: areturn

  public final org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManagerBuilder setConnectionTimeToLive(org.apache.hc.core5.util.TimeValue);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #11                 // Field timeToLive:Lorg/apache/hc/core5/util/TimeValue;
       5: aload_0
       6: areturn

  public final org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManagerBuilder setValidateAfterInactivity(org.apache.hc.core5.util.TimeValue);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #12                 // Field validateAfterInactivity:Lorg/apache/hc/core5/util/TimeValue;
       5: aload_0
       6: areturn

  public final org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManagerBuilder useSystemProperties();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #13                 // Field systemProperties:Z
       5: aload_0
       6: areturn

  public org.apache.hc.client5.http.impl.nio.PoolingAsyncClientConnectionManager build();
    Code:
       0: aload_0
       1: getfield      #4                  // Field tlsStrategy:Lorg/apache/hc/core5/http/nio/ssl/TlsStrategy;
       4: ifnull        15
       7: aload_0
       8: getfield      #4                  // Field tlsStrategy:Lorg/apache/hc/core5/http/nio/ssl/TlsStrategy;
      11: astore_1
      12: goto          68
      15: invokestatic  #14                 // Method org/apache/hc/core5/util/ReflectionUtils.determineJRELevel:()I
      18: bipush        8
      20: if_icmpgt     50
      23: invokestatic  #15                 // Method org/apache/hc/client5/http/ssl/ConscryptClientTlsStrategy.isSupported:()Z
      26: ifeq          50
      29: aload_0
      30: getfield      #13                 // Field systemProperties:Z
      33: ifeq          43
      36: invokestatic  #16                 // Method org/apache/hc/client5/http/ssl/ConscryptClientTlsStrategy.getSystemDefault:()Lorg/apache/hc/core5/http/nio/ssl/TlsStrategy;
      39: astore_1
      40: goto          68
      43: invokestatic  #17                 // Method org/apache/hc/client5/http/ssl/ConscryptClientTlsStrategy.getDefault:()Lorg/apache/hc/core5/http/nio/ssl/TlsStrategy;
      46: astore_1
      47: goto          68
      50: aload_0
      51: getfield      #13                 // Field systemProperties:Z
      54: ifeq          64
      57: invokestatic  #18                 // Method org/apache/hc/client5/http/ssl/DefaultClientTlsStrategy.getSystemDefault:()Lorg/apache/hc/core5/http/nio/ssl/TlsStrategy;
      60: astore_1
      61: goto          68
      64: invokestatic  #19                 // Method org/apache/hc/client5/http/ssl/DefaultClientTlsStrategy.getDefault:()Lorg/apache/hc/core5/http/nio/ssl/TlsStrategy;
      67: astore_1
      68: new           #20                 // class org/apache/hc/client5/http/impl/nio/PoolingAsyncClientConnectionManager
      71: dup
      72: invokestatic  #21                 // Method org/apache/hc/core5/http/config/RegistryBuilder.create:()Lorg/apache/hc/core5/http/config/RegistryBuilder;
      75: ldc           #22                 // String https
      77: aload_1
      78: invokevirtual #23                 // Method org/apache/hc/core5/http/config/RegistryBuilder.register:(Ljava/lang/String;Ljava/lang/Object;)Lorg/apache/hc/core5/http/config/RegistryBuilder;
      81: invokevirtual #24                 // Method org/apache/hc/core5/http/config/RegistryBuilder.build:()Lorg/apache/hc/core5/http/config/Registry;
      84: aload_0
      85: getfield      #7                  // Field poolConcurrencyPolicy:Lorg/apache/hc/core5/pool/PoolConcurrencyPolicy;
      88: aload_0
      89: getfield      #8                  // Field poolReusePolicy:Lorg/apache/hc/core5/pool/PoolReusePolicy;
      92: aload_0
      93: getfield      #11                 // Field timeToLive:Lorg/apache/hc/core5/util/TimeValue;
      96: aload_0
      97: getfield      #6                  // Field schemePortResolver:Lorg/apache/hc/client5/http/SchemePortResolver;
     100: aload_0
     101: getfield      #5                  // Field dnsResolver:Lorg/apache/hc/client5/http/DnsResolver;
     104: invokespecial #25                 // Method org/apache/hc/client5/http/impl/nio/PoolingAsyncClientConnectionManager."<init>":(Lorg/apache/hc/core5/http/config/Lookup;Lorg/apache/hc/core5/pool/PoolConcurrencyPolicy;Lorg/apache/hc/core5/pool/PoolReusePolicy;Lorg/apache/hc/core5/util/TimeValue;Lorg/apache/hc/client5/http/SchemePortResolver;Lorg/apache/hc/client5/http/DnsResolver;)V
     107: astore_2
     108: aload_0
     109: getfield      #12                 // Field validateAfterInactivity:Lorg/apache/hc/core5/util/TimeValue;
     112: ifnull        123
     115: aload_2
     116: aload_0
     117: getfield      #12                 // Field validateAfterInactivity:Lorg/apache/hc/core5/util/TimeValue;
     120: invokevirtual #26                 // Method org/apache/hc/client5/http/impl/nio/PoolingAsyncClientConnectionManager.setValidateAfterInactivity:(Lorg/apache/hc/core5/util/TimeValue;)V
     123: aload_0
     124: getfield      #9                  // Field maxConnTotal:I
     127: ifle          138
     130: aload_2
     131: aload_0
     132: getfield      #9                  // Field maxConnTotal:I
     135: invokevirtual #27                 // Method org/apache/hc/client5/http/impl/nio/PoolingAsyncClientConnectionManager.setMaxTotal:(I)V
     138: aload_0
     139: getfield      #10                 // Field maxConnPerRoute:I
     142: ifle          153
     145: aload_2
     146: aload_0
     147: getfield      #10                 // Field maxConnPerRoute:I
     150: invokevirtual #28                 // Method org/apache/hc/client5/http/impl/nio/PoolingAsyncClientConnectionManager.setDefaultMaxPerRoute:(I)V
     153: aload_2
     154: areturn
}
