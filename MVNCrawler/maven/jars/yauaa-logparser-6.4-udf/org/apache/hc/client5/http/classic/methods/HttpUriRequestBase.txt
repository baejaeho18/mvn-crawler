Compiled from "HttpUriRequestBase.java"
public class org.apache.hc.client5.http.classic.methods.HttpUriRequestBase extends org.apache.hc.core5.http.message.BasicClassicHttpRequest implements org.apache.hc.client5.http.classic.methods.HttpUriRequest,org.apache.hc.core5.concurrent.CancellableDependency {
  private static final long serialVersionUID;

  private final java.util.concurrent.atomic.AtomicMarkableReference<org.apache.hc.core5.concurrent.Cancellable> cancellableRef;

  private org.apache.hc.client5.http.config.RequestConfig requestConfig;

  public org.apache.hc.client5.http.classic.methods.HttpUriRequestBase(java.lang.String, java.net.URI);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #1                  // Method org/apache/hc/core5/http/message/BasicClassicHttpRequest."<init>":(Ljava/lang/String;Ljava/net/URI;)V
       6: aload_0
       7: new           #2                  // class java/util/concurrent/atomic/AtomicMarkableReference
      10: dup
      11: aconst_null
      12: iconst_0
      13: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicMarkableReference."<init>":(Ljava/lang/Object;Z)V
      16: putfield      #4                  // Field cancellableRef:Ljava/util/concurrent/atomic/AtomicMarkableReference;
      19: return

  public boolean cancel();
    Code:
       0: aload_0
       1: getfield      #4                  // Field cancellableRef:Ljava/util/concurrent/atomic/AtomicMarkableReference;
       4: invokevirtual #5                  // Method java/util/concurrent/atomic/AtomicMarkableReference.isMarked:()Z
       7: ifne          51
      10: aload_0
      11: getfield      #4                  // Field cancellableRef:Ljava/util/concurrent/atomic/AtomicMarkableReference;
      14: invokevirtual #6                  // Method java/util/concurrent/atomic/AtomicMarkableReference.getReference:()Ljava/lang/Object;
      17: checkcast     #7                  // class org/apache/hc/core5/concurrent/Cancellable
      20: astore_1
      21: aload_0
      22: getfield      #4                  // Field cancellableRef:Ljava/util/concurrent/atomic/AtomicMarkableReference;
      25: aload_1
      26: aload_1
      27: iconst_0
      28: iconst_1
      29: invokevirtual #8                  // Method java/util/concurrent/atomic/AtomicMarkableReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;ZZ)Z
      32: ifeq          48
      35: aload_1
      36: ifnull        46
      39: aload_1
      40: invokeinterface #9,  1            // InterfaceMethod org/apache/hc/core5/concurrent/Cancellable.cancel:()Z
      45: pop
      46: iconst_1
      47: ireturn
      48: goto          0
      51: iconst_0
      52: ireturn

  public boolean isCancelled();
    Code:
       0: aload_0
       1: getfield      #4                  // Field cancellableRef:Ljava/util/concurrent/atomic/AtomicMarkableReference;
       4: invokevirtual #5                  // Method java/util/concurrent/atomic/AtomicMarkableReference.isMarked:()Z
       7: ireturn

  public void setDependency(org.apache.hc.core5.concurrent.Cancellable);
    Code:
       0: aload_0
       1: getfield      #4                  // Field cancellableRef:Ljava/util/concurrent/atomic/AtomicMarkableReference;
       4: invokevirtual #6                  // Method java/util/concurrent/atomic/AtomicMarkableReference.getReference:()Ljava/lang/Object;
       7: checkcast     #7                  // class org/apache/hc/core5/concurrent/Cancellable
      10: astore_2
      11: aload_0
      12: getfield      #4                  // Field cancellableRef:Ljava/util/concurrent/atomic/AtomicMarkableReference;
      15: aload_2
      16: aload_1
      17: iconst_0
      18: iconst_0
      19: invokevirtual #8                  // Method java/util/concurrent/atomic/AtomicMarkableReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;ZZ)Z
      22: ifne          32
      25: aload_1
      26: invokeinterface #9,  1            // InterfaceMethod org/apache/hc/core5/concurrent/Cancellable.cancel:()Z
      31: pop
      32: return

  public void reset();
    Code:
       0: aload_0
       1: getfield      #4                  // Field cancellableRef:Ljava/util/concurrent/atomic/AtomicMarkableReference;
       4: invokevirtual #5                  // Method java/util/concurrent/atomic/AtomicMarkableReference.isMarked:()Z
       7: istore_1
       8: aload_0
       9: getfield      #4                  // Field cancellableRef:Ljava/util/concurrent/atomic/AtomicMarkableReference;
      12: invokevirtual #6                  // Method java/util/concurrent/atomic/AtomicMarkableReference.getReference:()Ljava/lang/Object;
      15: checkcast     #7                  // class org/apache/hc/core5/concurrent/Cancellable
      18: astore_2
      19: aload_2
      20: ifnull        30
      23: aload_2
      24: invokeinterface #9,  1            // InterfaceMethod org/apache/hc/core5/concurrent/Cancellable.cancel:()Z
      29: pop
      30: aload_0
      31: getfield      #4                  // Field cancellableRef:Ljava/util/concurrent/atomic/AtomicMarkableReference;
      34: aload_2
      35: aconst_null
      36: iload_1
      37: iconst_0
      38: invokevirtual #8                  // Method java/util/concurrent/atomic/AtomicMarkableReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;ZZ)Z
      41: ifeq          47
      44: goto          50
      47: goto          0
      50: return

  public void abort() throws java.lang.UnsupportedOperationException;
    Code:
       0: aload_0
       1: invokevirtual #10                 // Method cancel:()Z
       4: pop
       5: return

  public boolean isAborted();
    Code:
       0: aload_0
       1: invokevirtual #11                 // Method isCancelled:()Z
       4: ireturn

  public void setConfig(org.apache.hc.client5.http.config.RequestConfig);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #12                 // Field requestConfig:Lorg/apache/hc/client5/http/config/RequestConfig;
       5: return

  public org.apache.hc.client5.http.config.RequestConfig getConfig();
    Code:
       0: aload_0
       1: getfield      #12                 // Field requestConfig:Lorg/apache/hc/client5/http/config/RequestConfig;
       4: areturn

  public java.lang.String toString();
    Code:
       0: new           #13                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #14                 // Method java/lang/StringBuilder."<init>":()V
       7: astore_1
       8: aload_1
       9: aload_0
      10: invokevirtual #15                 // Method getMethod:()Ljava/lang/String;
      13: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      16: ldc           #17                 // String
      18: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      21: aload_0
      22: invokevirtual #18                 // Method getRequestUri:()Ljava/lang/String;
      25: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: pop
      29: aload_1
      30: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      33: areturn
}
