Compiled from "SampledSpanStore.java"
final class io.opencensus.trace.export.SampledSpanStore$NoopSampledSpanStore extends io.opencensus.trace.export.SampledSpanStore {
  private static final io.opencensus.trace.export.SampledSpanStore$PerSpanNameSummary EMPTY_PER_SPAN_NAME_SUMMARY;

  private final java.util.Set<java.lang.String> registeredSpanNames;

  private io.opencensus.trace.export.SampledSpanStore$NoopSampledSpanStore();
    Code:
       0: aload_0
       1: invokespecial #2                  // Method io/opencensus/trace/export/SampledSpanStore."<init>":()V
       4: aload_0
       5: new           #3                  // class java/util/HashSet
       8: dup
       9: invokespecial #4                  // Method java/util/HashSet."<init>":()V
      12: putfield      #5                  // Field registeredSpanNames:Ljava/util/Set;
      15: return

  public io.opencensus.trace.export.SampledSpanStore$Summary getSummary();
    Code:
       0: new           #6                  // class java/util/HashMap
       3: dup
       4: invokespecial #7                  // Method java/util/HashMap."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #5                  // Field registeredSpanNames:Ljava/util/Set;
      12: dup
      13: astore_2
      14: monitorenter
      15: aload_0
      16: getfield      #5                  // Field registeredSpanNames:Ljava/util/Set;
      19: invokeinterface #8,  1            // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      24: astore_3
      25: aload_3
      26: invokeinterface #9,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      31: ifeq          60
      34: aload_3
      35: invokeinterface #10,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      40: checkcast     #11                 // class java/lang/String
      43: astore        4
      45: aload_1
      46: aload         4
      48: getstatic     #12                 // Field EMPTY_PER_SPAN_NAME_SUMMARY:Lio/opencensus/trace/export/SampledSpanStore$PerSpanNameSummary;
      51: invokeinterface #13,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      56: pop
      57: goto          25
      60: aload_2
      61: monitorexit
      62: goto          72
      65: astore        5
      67: aload_2
      68: monitorexit
      69: aload         5
      71: athrow
      72: aload_1
      73: invokestatic  #14                 // Method io/opencensus/trace/export/SampledSpanStore$Summary.create:(Ljava/util/Map;)Lio/opencensus/trace/export/SampledSpanStore$Summary;
      76: areturn
    Exception table:
       from    to  target type
          15    62    65   any
          65    69    65   any

  public java.util.Collection<io.opencensus.trace.export.SpanData> getLatencySampledSpans(io.opencensus.trace.export.SampledSpanStore$LatencyFilter);
    Code:
       0: aload_1
       1: ldc           #15                 // String latencyFilter
       3: invokestatic  #16                 // Method io/opencensus/internal/Utils.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: pop
       7: invokestatic  #17                 // Method java/util/Collections.emptyList:()Ljava/util/List;
      10: areturn

  public java.util.Collection<io.opencensus.trace.export.SpanData> getErrorSampledSpans(io.opencensus.trace.export.SampledSpanStore$ErrorFilter);
    Code:
       0: aload_1
       1: ldc           #18                 // String errorFilter
       3: invokestatic  #16                 // Method io/opencensus/internal/Utils.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: pop
       7: invokestatic  #17                 // Method java/util/Collections.emptyList:()Ljava/util/List;
      10: areturn

  public void registerSpanNamesForCollection(java.util.Collection<java.lang.String>);
    Code:
       0: aload_1
       1: ldc           #19                 // String spanNames
       3: invokestatic  #16                 // Method io/opencensus/internal/Utils.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: getfield      #5                  // Field registeredSpanNames:Ljava/util/Set;
      11: dup
      12: astore_2
      13: monitorenter
      14: aload_0
      15: getfield      #5                  // Field registeredSpanNames:Ljava/util/Set;
      18: aload_1
      19: invokeinterface #20,  2           // InterfaceMethod java/util/Set.addAll:(Ljava/util/Collection;)Z
      24: pop
      25: aload_2
      26: monitorexit
      27: goto          35
      30: astore_3
      31: aload_2
      32: monitorexit
      33: aload_3
      34: athrow
      35: return
    Exception table:
       from    to  target type
          14    27    30   any
          30    33    30   any

  public void unregisterSpanNamesForCollection(java.util.Collection<java.lang.String>);
    Code:
       0: aload_1
       1: ldc           #19                 // String spanNames
       3: invokestatic  #16                 // Method io/opencensus/internal/Utils.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: getfield      #5                  // Field registeredSpanNames:Ljava/util/Set;
      11: dup
      12: astore_2
      13: monitorenter
      14: aload_0
      15: getfield      #5                  // Field registeredSpanNames:Ljava/util/Set;
      18: aload_1
      19: invokeinterface #21,  2           // InterfaceMethod java/util/Set.removeAll:(Ljava/util/Collection;)Z
      24: pop
      25: aload_2
      26: monitorexit
      27: goto          35
      30: astore_3
      31: aload_2
      32: monitorexit
      33: aload_3
      34: athrow
      35: return
    Exception table:
       from    to  target type
          14    27    30   any
          30    33    30   any

  public java.util.Set<java.lang.String> getRegisteredSpanNamesForCollection();
    Code:
       0: aload_0
       1: getfield      #5                  // Field registeredSpanNames:Ljava/util/Set;
       4: dup
       5: astore_1
       6: monitorenter
       7: new           #3                  // class java/util/HashSet
      10: dup
      11: aload_0
      12: getfield      #5                  // Field registeredSpanNames:Ljava/util/Set;
      15: invokespecial #22                 // Method java/util/HashSet."<init>":(Ljava/util/Collection;)V
      18: invokestatic  #23                 // Method java/util/Collections.unmodifiableSet:(Ljava/util/Set;)Ljava/util/Set;
      21: aload_1
      22: monitorexit
      23: areturn
      24: astore_2
      25: aload_1
      26: monitorexit
      27: aload_2
      28: athrow
    Exception table:
       from    to  target type
           7    23    24   any
          24    27    24   any

  io.opencensus.trace.export.SampledSpanStore$NoopSampledSpanStore(io.opencensus.trace.export.SampledSpanStore$1);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method "<init>":()V
       4: return

  static {};
    Code:
       0: invokestatic  #24                 // Method java/util/Collections.emptyMap:()Ljava/util/Map;
       3: invokestatic  #24                 // Method java/util/Collections.emptyMap:()Ljava/util/Map;
       6: invokestatic  #25                 // Method io/opencensus/trace/export/SampledSpanStore$PerSpanNameSummary.create:(Ljava/util/Map;Ljava/util/Map;)Lio/opencensus/trace/export/SampledSpanStore$PerSpanNameSummary;
       9: putstatic     #12                 // Field EMPTY_PER_SPAN_NAME_SUMMARY:Lio/opencensus/trace/export/SampledSpanStore$PerSpanNameSummary;
      12: return
}
