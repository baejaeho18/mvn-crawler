Compiled from "TraceConfig.java"
public final class io.opencensus.proto.trace.v1.TraceConfig$SamplerCase extends java.lang.Enum<io.opencensus.proto.trace.v1.TraceConfig$SamplerCase> implements com.google.protobuf.Internal$EnumLite {
  public static final io.opencensus.proto.trace.v1.TraceConfig$SamplerCase PROBABILITY_SAMPLER;

  public static final io.opencensus.proto.trace.v1.TraceConfig$SamplerCase CONSTANT_SAMPLER;

  public static final io.opencensus.proto.trace.v1.TraceConfig$SamplerCase RATE_LIMITING_SAMPLER;

  public static final io.opencensus.proto.trace.v1.TraceConfig$SamplerCase SAMPLER_NOT_SET;

  private final int value;

  private static final io.opencensus.proto.trace.v1.TraceConfig$SamplerCase[] $VALUES;

  public static io.opencensus.proto.trace.v1.TraceConfig$SamplerCase[] values();
    Code:
       0: getstatic     #1                  // Field $VALUES:[Lio/opencensus/proto/trace/v1/TraceConfig$SamplerCase;
       3: invokevirtual #2                  // Method "[Lio/opencensus/proto/trace/v1/TraceConfig$SamplerCase;".clone:()Ljava/lang/Object;
       6: checkcast     #3                  // class "[Lio/opencensus/proto/trace/v1/TraceConfig$SamplerCase;"
       9: areturn

  public static io.opencensus.proto.trace.v1.TraceConfig$SamplerCase valueOf(java.lang.String);
    Code:
       0: ldc           #4                  // class io/opencensus/proto/trace/v1/TraceConfig$SamplerCase
       2: aload_0
       3: invokestatic  #5                  // Method java/lang/Enum.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;
       6: checkcast     #4                  // class io/opencensus/proto/trace/v1/TraceConfig$SamplerCase
       9: areturn

  private io.opencensus.proto.trace.v1.TraceConfig$SamplerCase(int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokespecial #6                  // Method java/lang/Enum."<init>":(Ljava/lang/String;I)V
       6: aload_0
       7: iload_3
       8: putfield      #7                  // Field value:I
      11: return

  public static io.opencensus.proto.trace.v1.TraceConfig$SamplerCase valueOf(int);
    Code:
       0: iload_0
       1: invokestatic  #8                  // Method forNumber:(I)Lio/opencensus/proto/trace/v1/TraceConfig$SamplerCase;
       4: areturn

  public static io.opencensus.proto.trace.v1.TraceConfig$SamplerCase forNumber(int);
    Code:
       0: iload_0
       1: tableswitch   { // 0 to 3
                     0: 44
                     1: 32
                     2: 36
                     3: 40
               default: 48
          }
      32: getstatic     #9                  // Field PROBABILITY_SAMPLER:Lio/opencensus/proto/trace/v1/TraceConfig$SamplerCase;
      35: areturn
      36: getstatic     #10                 // Field CONSTANT_SAMPLER:Lio/opencensus/proto/trace/v1/TraceConfig$SamplerCase;
      39: areturn
      40: getstatic     #11                 // Field RATE_LIMITING_SAMPLER:Lio/opencensus/proto/trace/v1/TraceConfig$SamplerCase;
      43: areturn
      44: getstatic     #12                 // Field SAMPLER_NOT_SET:Lio/opencensus/proto/trace/v1/TraceConfig$SamplerCase;
      47: areturn
      48: aconst_null
      49: areturn

  public int getNumber();
    Code:
       0: aload_0
       1: getfield      #7                  // Field value:I
       4: ireturn

  static {};
    Code:
       0: new           #4                  // class io/opencensus/proto/trace/v1/TraceConfig$SamplerCase
       3: dup
       4: ldc           #13                 // String PROBABILITY_SAMPLER
       6: iconst_0
       7: iconst_1
       8: invokespecial #14                 // Method "<init>":(Ljava/lang/String;II)V
      11: putstatic     #9                  // Field PROBABILITY_SAMPLER:Lio/opencensus/proto/trace/v1/TraceConfig$SamplerCase;
      14: new           #4                  // class io/opencensus/proto/trace/v1/TraceConfig$SamplerCase
      17: dup
      18: ldc           #15                 // String CONSTANT_SAMPLER
      20: iconst_1
      21: iconst_2
      22: invokespecial #14                 // Method "<init>":(Ljava/lang/String;II)V
      25: putstatic     #10                 // Field CONSTANT_SAMPLER:Lio/opencensus/proto/trace/v1/TraceConfig$SamplerCase;
      28: new           #4                  // class io/opencensus/proto/trace/v1/TraceConfig$SamplerCase
      31: dup
      32: ldc           #16                 // String RATE_LIMITING_SAMPLER
      34: iconst_2
      35: iconst_3
      36: invokespecial #14                 // Method "<init>":(Ljava/lang/String;II)V
      39: putstatic     #11                 // Field RATE_LIMITING_SAMPLER:Lio/opencensus/proto/trace/v1/TraceConfig$SamplerCase;
      42: new           #4                  // class io/opencensus/proto/trace/v1/TraceConfig$SamplerCase
      45: dup
      46: ldc           #17                 // String SAMPLER_NOT_SET
      48: iconst_3
      49: iconst_0
      50: invokespecial #14                 // Method "<init>":(Ljava/lang/String;II)V
      53: putstatic     #12                 // Field SAMPLER_NOT_SET:Lio/opencensus/proto/trace/v1/TraceConfig$SamplerCase;
      56: iconst_4
      57: anewarray     #4                  // class io/opencensus/proto/trace/v1/TraceConfig$SamplerCase
      60: dup
      61: iconst_0
      62: getstatic     #9                  // Field PROBABILITY_SAMPLER:Lio/opencensus/proto/trace/v1/TraceConfig$SamplerCase;
      65: aastore
      66: dup
      67: iconst_1
      68: getstatic     #10                 // Field CONSTANT_SAMPLER:Lio/opencensus/proto/trace/v1/TraceConfig$SamplerCase;
      71: aastore
      72: dup
      73: iconst_2
      74: getstatic     #11                 // Field RATE_LIMITING_SAMPLER:Lio/opencensus/proto/trace/v1/TraceConfig$SamplerCase;
      77: aastore
      78: dup
      79: iconst_3
      80: getstatic     #12                 // Field SAMPLER_NOT_SET:Lio/opencensus/proto/trace/v1/TraceConfig$SamplerCase;
      83: aastore
      84: putstatic     #1                  // Field $VALUES:[Lio/opencensus/proto/trace/v1/TraceConfig$SamplerCase;
      87: return
}
