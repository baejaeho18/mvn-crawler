Compiled from "Sse42Crc32C.java"
public final class com.scurrilous.circe.crc.Sse42Crc32C extends com.scurrilous.circe.impl.AbstractIncrementalIntHash implements com.scurrilous.circe.IncrementalIntHash {
  private static final boolean SUPPORTED;

  private final long config;

  private static boolean checkSupported();
    Code:
       0: new           #1                  // class java/lang/StringBuilder
       3: dup
       4: invokespecial #2                  // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #3                  // String /lib/libcirce-checksum.
       9: invokevirtual #4                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: invokestatic  #5                  // Method com/scurrilous/circe/utils/NativeUtils.libType:()Ljava/lang/String;
      15: invokevirtual #4                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      18: invokevirtual #6                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      21: invokestatic  #7                  // Method com/scurrilous/circe/utils/NativeUtils.loadLibraryFromJar:(Ljava/lang/String;)V
      24: invokestatic  #8                  // Method nativeSupported:()Z
      27: ireturn
      28: astore_0
      29: iconst_0
      30: ireturn
    Exception table:
       from    to  target type
           0    27    28   Class java/lang/Exception
           0    27    28   Class java/lang/UnsatisfiedLinkError

  public static boolean isSupported();
    Code:
       0: getstatic     #11                 // Field SUPPORTED:Z
       3: ireturn

  com.scurrilous.circe.crc.Sse42Crc32C();
    Code:
       0: aload_0
       1: invokespecial #12                 // Method com/scurrilous/circe/impl/AbstractIncrementalIntHash."<init>":()V
       4: aload_0
       5: lconst_0
       6: putfield      #13                 // Field config:J
       9: return

  public com.scurrilous.circe.crc.Sse42Crc32C(int[]);
    Code:
       0: aload_0
       1: invokespecial #12                 // Method com/scurrilous/circe/impl/AbstractIncrementalIntHash."<init>":()V
       4: aload_1
       5: arraylength
       6: ifne          17
       9: aload_0
      10: lconst_0
      11: putfield      #13                 // Field config:J
      14: goto          44
      17: aload_0
      18: aload_1
      19: invokestatic  #14                 // Method allocConfig:([I)J
      22: putfield      #13                 // Field config:J
      25: aload_0
      26: getfield      #13                 // Field config:J
      29: lconst_0
      30: lcmp
      31: ifne          44
      34: new           #15                 // class java/lang/RuntimeException
      37: dup
      38: ldc           #16                 // String CRC32C configuration allocation failed
      40: invokespecial #17                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;)V
      43: athrow
      44: return

  protected void finalize();
    Code:
       0: aload_0
       1: getfield      #13                 // Field config:J
       4: lconst_0
       5: lcmp
       6: ifeq          16
       9: aload_0
      10: getfield      #13                 // Field config:J
      13: invokestatic  #18                 // Method freeConfig:(J)V
      16: return

  public java.lang.String algorithm();
    Code:
       0: getstatic     #19                 // Field com/scurrilous/circe/params/CrcParameters.CRC32C:Lcom/scurrilous/circe/params/CrcParameters;
       3: invokevirtual #20                 // Method com/scurrilous/circe/params/CrcParameters.algorithm:()Ljava/lang/String;
       6: areturn

  public int length();
    Code:
       0: iconst_4
       1: ireturn

  public boolean supportsUnsafe();
    Code:
       0: iconst_1
       1: ireturn

  public int calculate(long, long);
    Code:
       0: aload_0
       1: invokevirtual #21                 // Method initial:()I
       4: lload_1
       5: lload_3
       6: aload_0
       7: getfield      #13                 // Field config:J
      10: invokestatic  #22                 // Method nativeUnsafe:(IJJJ)I
      13: ireturn

  public int resume(int, java.nio.ByteBuffer);
    Code:
       0: aload_2
       1: invokevirtual #23                 // Method java/nio/ByteBuffer.isDirect:()Z
       4: ifeq          36
       7: iload_1
       8: aload_2
       9: aload_2
      10: invokevirtual #24                 // Method java/nio/ByteBuffer.position:()I
      13: aload_2
      14: invokevirtual #25                 // Method java/nio/ByteBuffer.remaining:()I
      17: aload_0
      18: getfield      #13                 // Field config:J
      21: invokestatic  #26                 // Method nativeDirectBuffer:(ILjava/nio/ByteBuffer;IIJ)I
      24: istore_3
      25: aload_2
      26: aload_2
      27: invokevirtual #27                 // Method java/nio/ByteBuffer.limit:()I
      30: invokevirtual #28                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      33: pop
      34: iload_3
      35: ireturn
      36: aload_0
      37: iload_1
      38: aload_2
      39: invokespecial #29                 // Method com/scurrilous/circe/impl/AbstractIncrementalIntHash.resume:(ILjava/nio/ByteBuffer;)I
      42: ireturn

  public int resume(int, long, long);
    Code:
       0: iload_1
       1: lload_2
       2: lload         4
       4: aload_0
       5: getfield      #13                 // Field config:J
       8: invokestatic  #22                 // Method nativeUnsafe:(IJJJ)I
      11: ireturn

  protected int initial();
    Code:
       0: iconst_0
       1: ireturn

  protected int resumeUnchecked(int, byte[], int, int);
    Code:
       0: iload_1
       1: aload_2
       2: iload_3
       3: iload         4
       5: aload_0
       6: getfield      #13                 // Field config:J
       9: invokestatic  #30                 // Method nativeArray:(I[BIIJ)I
      12: ireturn

  private static native boolean nativeSupported();

  private static native int nativeArray(int, byte[], int, int, long);

  private static native int nativeDirectBuffer(int, java.nio.ByteBuffer, int, int, long);

  private static native int nativeUnsafe(int, long, long, long);

  private static native long allocConfig(int[]);

  private static native void freeConfig(long);

  static {};
    Code:
       0: invokestatic  #31                 // Method checkSupported:()Z
       3: putstatic     #11                 // Field SUPPORTED:Z
       6: return
}
