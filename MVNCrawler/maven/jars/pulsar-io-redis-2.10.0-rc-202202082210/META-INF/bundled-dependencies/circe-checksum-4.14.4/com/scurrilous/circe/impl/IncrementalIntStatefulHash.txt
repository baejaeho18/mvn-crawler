Compiled from "IncrementalIntStatefulHash.java"
class com.scurrilous.circe.impl.IncrementalIntStatefulHash extends com.scurrilous.circe.impl.AbstractStatefulHash implements com.scurrilous.circe.StatefulIntHash {
  final com.scurrilous.circe.impl.AbstractIncrementalIntHash stateless;

  int current;

  com.scurrilous.circe.impl.IncrementalIntStatefulHash(com.scurrilous.circe.impl.AbstractIncrementalIntHash);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/scurrilous/circe/impl/AbstractStatefulHash."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field stateless:Lcom/scurrilous/circe/impl/AbstractIncrementalIntHash;
       9: return

  public com.scurrilous.circe.StatelessIntHash asStateless();
    Code:
       0: aload_0
       1: getfield      #2                  // Field stateless:Lcom/scurrilous/circe/impl/AbstractIncrementalIntHash;
       4: areturn

  public java.lang.String algorithm();
    Code:
       0: aload_0
       1: getfield      #2                  // Field stateless:Lcom/scurrilous/circe/impl/AbstractIncrementalIntHash;
       4: invokevirtual #3                  // Method com/scurrilous/circe/impl/AbstractIncrementalIntHash.algorithm:()Ljava/lang/String;
       7: areturn

  public int length();
    Code:
       0: aload_0
       1: getfield      #2                  // Field stateless:Lcom/scurrilous/circe/impl/AbstractIncrementalIntHash;
       4: invokevirtual #4                  // Method com/scurrilous/circe/impl/AbstractIncrementalIntHash.length:()I
       7: ireturn

  public boolean supportsUnsafe();
    Code:
       0: aload_0
       1: getfield      #2                  // Field stateless:Lcom/scurrilous/circe/impl/AbstractIncrementalIntHash;
       4: invokevirtual #5                  // Method com/scurrilous/circe/impl/AbstractIncrementalIntHash.supportsUnsafe:()Z
       7: ireturn

  public com.scurrilous.circe.StatefulHash createNew();
    Code:
       0: new           #6                  // class com/scurrilous/circe/impl/IncrementalIntStatefulHash
       3: dup
       4: aload_0
       5: getfield      #2                  // Field stateless:Lcom/scurrilous/circe/impl/AbstractIncrementalIntHash;
       8: invokespecial #7                  // Method "<init>":(Lcom/scurrilous/circe/impl/AbstractIncrementalIntHash;)V
      11: areturn

  public boolean supportsIncremental();
    Code:
       0: iconst_1
       1: ireturn

  public void reset();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #2                  // Field stateless:Lcom/scurrilous/circe/impl/AbstractIncrementalIntHash;
       5: invokevirtual #8                  // Method com/scurrilous/circe/impl/AbstractIncrementalIntHash.initial:()I
       8: putfield      #9                  // Field current:I
      11: return

  public void update(java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #2                  // Field stateless:Lcom/scurrilous/circe/impl/AbstractIncrementalIntHash;
       5: aload_0
       6: getfield      #9                  // Field current:I
       9: aload_1
      10: invokevirtual #10                 // Method com/scurrilous/circe/impl/AbstractIncrementalIntHash.resume:(ILjava/nio/ByteBuffer;)I
      13: putfield      #9                  // Field current:I
      16: return

  public void update(long, long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #2                  // Field stateless:Lcom/scurrilous/circe/impl/AbstractIncrementalIntHash;
       5: aload_0
       6: getfield      #9                  // Field current:I
       9: lload_1
      10: lload_3
      11: invokevirtual #11                 // Method com/scurrilous/circe/impl/AbstractIncrementalIntHash.resume:(IJJ)I
      14: putfield      #9                  // Field current:I
      17: return

  protected void updateUnchecked(byte[], int, int);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #2                  // Field stateless:Lcom/scurrilous/circe/impl/AbstractIncrementalIntHash;
       5: aload_0
       6: getfield      #9                  // Field current:I
       9: aload_1
      10: iload_2
      11: iload_3
      12: invokevirtual #12                 // Method com/scurrilous/circe/impl/AbstractIncrementalIntHash.resumeUnchecked:(I[BII)I
      15: putfield      #9                  // Field current:I
      18: return

  public int getInt();
    Code:
       0: aload_0
       1: getfield      #9                  // Field current:I
       4: ireturn

  public long getLong();
    Code:
       0: aload_0
       1: getfield      #9                  // Field current:I
       4: i2l
       5: lreturn
}
