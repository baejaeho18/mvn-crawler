Compiled from "AbstractChannelHandlerContext.java"
final class io.netty.channel.AbstractChannelHandlerContext$WriteTask implements java.lang.Runnable {
  private static final io.netty.util.internal.ObjectPool<io.netty.channel.AbstractChannelHandlerContext$WriteTask> RECYCLER;

  private static final boolean ESTIMATE_TASK_SIZE_ON_SUBMIT;

  private static final int WRITE_TASK_OVERHEAD;

  private final io.netty.util.internal.ObjectPool$Handle<io.netty.channel.AbstractChannelHandlerContext$WriteTask> handle;

  private io.netty.channel.AbstractChannelHandlerContext ctx;

  private java.lang.Object msg;

  private io.netty.channel.ChannelPromise promise;

  private int size;

  static io.netty.channel.AbstractChannelHandlerContext$WriteTask newInstance(io.netty.channel.AbstractChannelHandlerContext, java.lang.Object, io.netty.channel.ChannelPromise, boolean);
    Code:
       0: getstatic     #2                  // Field RECYCLER:Lio/netty/util/internal/ObjectPool;
       3: invokevirtual #3                  // Method io/netty/util/internal/ObjectPool.get:()Ljava/lang/Object;
       6: checkcast     #4                  // class io/netty/channel/AbstractChannelHandlerContext$WriteTask
       9: astore        4
      11: aload         4
      13: aload_0
      14: aload_1
      15: aload_2
      16: iload_3
      17: invokestatic  #5                  // Method init:(Lio/netty/channel/AbstractChannelHandlerContext$WriteTask;Lio/netty/channel/AbstractChannelHandlerContext;Ljava/lang/Object;Lio/netty/channel/ChannelPromise;Z)V
      20: aload         4
      22: areturn

  private io.netty.channel.AbstractChannelHandlerContext$WriteTask(io.netty.util.internal.ObjectPool$Handle<? extends io.netty.channel.AbstractChannelHandlerContext$WriteTask>);
    Code:
       0: aload_0
       1: invokespecial #6                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #7                  // Field handle:Lio/netty/util/internal/ObjectPool$Handle;
       9: return

  protected static void init(io.netty.channel.AbstractChannelHandlerContext$WriteTask, io.netty.channel.AbstractChannelHandlerContext, java.lang.Object, io.netty.channel.ChannelPromise, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #8                  // Field ctx:Lio/netty/channel/AbstractChannelHandlerContext;
       5: aload_0
       6: aload_2
       7: putfield      #9                  // Field msg:Ljava/lang/Object;
      10: aload_0
      11: aload_3
      12: putfield      #10                 // Field promise:Lio/netty/channel/ChannelPromise;
      15: getstatic     #11                 // Field ESTIMATE_TASK_SIZE_ON_SUBMIT:Z
      18: ifeq          57
      21: aload_0
      22: aload_1
      23: invokestatic  #12                 // Method io/netty/channel/AbstractChannelHandlerContext.access$1700:(Lio/netty/channel/AbstractChannelHandlerContext;)Lio/netty/channel/DefaultChannelPipeline;
      26: invokevirtual #13                 // Method io/netty/channel/DefaultChannelPipeline.estimatorHandle:()Lio/netty/channel/MessageSizeEstimator$Handle;
      29: aload_2
      30: invokeinterface #14,  2           // InterfaceMethod io/netty/channel/MessageSizeEstimator$Handle.size:(Ljava/lang/Object;)I
      35: getstatic     #15                 // Field WRITE_TASK_OVERHEAD:I
      38: iadd
      39: putfield      #16                 // Field size:I
      42: aload_1
      43: invokestatic  #12                 // Method io/netty/channel/AbstractChannelHandlerContext.access$1700:(Lio/netty/channel/AbstractChannelHandlerContext;)Lio/netty/channel/DefaultChannelPipeline;
      46: aload_0
      47: getfield      #16                 // Field size:I
      50: i2l
      51: invokevirtual #17                 // Method io/netty/channel/DefaultChannelPipeline.incrementPendingOutboundBytes:(J)V
      54: goto          62
      57: aload_0
      58: iconst_0
      59: putfield      #16                 // Field size:I
      62: iload         4
      64: ifeq          78
      67: aload_0
      68: dup
      69: getfield      #16                 // Field size:I
      72: ldc           #19                 // int -2147483648
      74: ior
      75: putfield      #16                 // Field size:I
      78: return

  public void run();
    Code:
       0: aload_0
       1: invokespecial #20                 // Method decrementPendingOutboundBytes:()V
       4: aload_0
       5: getfield      #16                 // Field size:I
       8: iflt          29
      11: aload_0
      12: getfield      #8                  // Field ctx:Lio/netty/channel/AbstractChannelHandlerContext;
      15: aload_0
      16: getfield      #9                  // Field msg:Ljava/lang/Object;
      19: aload_0
      20: getfield      #10                 // Field promise:Lio/netty/channel/ChannelPromise;
      23: invokevirtual #21                 // Method io/netty/channel/AbstractChannelHandlerContext.invokeWrite:(Ljava/lang/Object;Lio/netty/channel/ChannelPromise;)V
      26: goto          44
      29: aload_0
      30: getfield      #8                  // Field ctx:Lio/netty/channel/AbstractChannelHandlerContext;
      33: aload_0
      34: getfield      #9                  // Field msg:Ljava/lang/Object;
      37: aload_0
      38: getfield      #10                 // Field promise:Lio/netty/channel/ChannelPromise;
      41: invokevirtual #22                 // Method io/netty/channel/AbstractChannelHandlerContext.invokeWriteAndFlush:(Ljava/lang/Object;Lio/netty/channel/ChannelPromise;)V
      44: aload_0
      45: invokespecial #23                 // Method recycle:()V
      48: goto          58
      51: astore_1
      52: aload_0
      53: invokespecial #23                 // Method recycle:()V
      56: aload_1
      57: athrow
      58: return
    Exception table:
       from    to  target type
           0    44    51   any

  void cancel();
    Code:
       0: aload_0
       1: invokespecial #20                 // Method decrementPendingOutboundBytes:()V
       4: aload_0
       5: invokespecial #23                 // Method recycle:()V
       8: goto          18
      11: astore_1
      12: aload_0
      13: invokespecial #23                 // Method recycle:()V
      16: aload_1
      17: athrow
      18: return
    Exception table:
       from    to  target type
           0     4    11   any

  private void decrementPendingOutboundBytes();
    Code:
       0: getstatic     #11                 // Field ESTIMATE_TASK_SIZE_ON_SUBMIT:Z
       3: ifeq          24
       6: aload_0
       7: getfield      #8                  // Field ctx:Lio/netty/channel/AbstractChannelHandlerContext;
      10: invokestatic  #12                 // Method io/netty/channel/AbstractChannelHandlerContext.access$1700:(Lio/netty/channel/AbstractChannelHandlerContext;)Lio/netty/channel/DefaultChannelPipeline;
      13: aload_0
      14: getfield      #16                 // Field size:I
      17: ldc           #24                 // int 2147483647
      19: iand
      20: i2l
      21: invokevirtual #25                 // Method io/netty/channel/DefaultChannelPipeline.decrementPendingOutboundBytes:(J)V
      24: return

  private void recycle();
    Code:
       0: aload_0
       1: aconst_null
       2: putfield      #8                  // Field ctx:Lio/netty/channel/AbstractChannelHandlerContext;
       5: aload_0
       6: aconst_null
       7: putfield      #9                  // Field msg:Ljava/lang/Object;
      10: aload_0
      11: aconst_null
      12: putfield      #10                 // Field promise:Lio/netty/channel/ChannelPromise;
      15: aload_0
      16: getfield      #7                  // Field handle:Lio/netty/util/internal/ObjectPool$Handle;
      19: aload_0
      20: invokeinterface #26,  2           // InterfaceMethod io/netty/util/internal/ObjectPool$Handle.recycle:(Ljava/lang/Object;)V
      25: return

  io.netty.channel.AbstractChannelHandlerContext$WriteTask(io.netty.util.internal.ObjectPool$Handle, io.netty.channel.AbstractChannelHandlerContext$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method "<init>":(Lio/netty/util/internal/ObjectPool$Handle;)V
       5: return

  static {};
    Code:
       0: new           #27                 // class io/netty/channel/AbstractChannelHandlerContext$WriteTask$1
       3: dup
       4: invokespecial #28                 // Method io/netty/channel/AbstractChannelHandlerContext$WriteTask$1."<init>":()V
       7: invokestatic  #29                 // Method io/netty/util/internal/ObjectPool.newPool:(Lio/netty/util/internal/ObjectPool$ObjectCreator;)Lio/netty/util/internal/ObjectPool;
      10: putstatic     #2                  // Field RECYCLER:Lio/netty/util/internal/ObjectPool;
      13: ldc           #30                 // String io.netty.transport.estimateSizeOnSubmit
      15: iconst_1
      16: invokestatic  #31                 // Method io/netty/util/internal/SystemPropertyUtil.getBoolean:(Ljava/lang/String;Z)Z
      19: putstatic     #11                 // Field ESTIMATE_TASK_SIZE_ON_SUBMIT:Z
      22: ldc           #32                 // String io.netty.transport.writeTaskSizeOverhead
      24: bipush        32
      26: invokestatic  #33                 // Method io/netty/util/internal/SystemPropertyUtil.getInt:(Ljava/lang/String;I)I
      29: putstatic     #15                 // Field WRITE_TASK_OVERHEAD:I
      32: return
}
