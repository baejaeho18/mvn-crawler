public class org.bouncycastle.crypto.prng.DigestRandomGenerator implements org.bouncycastle.crypto.prng.RandomGenerator {
  private static long CYCLE_COUNT;

  private long stateCounter;

  private long seedCounter;

  private org.bouncycastle.crypto.Digest digest;

  private byte[] state;

  private byte[] seed;

  public org.bouncycastle.crypto.prng.DigestRandomGenerator(org.bouncycastle.crypto.Digest);
    Code:
       0: aload_0
       1: invokespecial #68                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #67                 // Field digest:Lorg/bouncycastle/crypto/Digest;
       9: aload_0
      10: aload_1
      11: invokeinterface #76,  1           // InterfaceMethod org/bouncycastle/crypto/Digest.getDigestSize:()I
      16: newarray       byte
      18: putfield      #65                 // Field seed:[B
      21: aload_0
      22: lconst_1
      23: putfield      #63                 // Field seedCounter:J
      26: aload_0
      27: aload_1
      28: invokeinterface #76,  1           // InterfaceMethod org/bouncycastle/crypto/Digest.getDigestSize:()I
      33: newarray       byte
      35: putfield      #66                 // Field state:[B
      38: aload_0
      39: lconst_1
      40: putfield      #64                 // Field stateCounter:J
      43: return

  public void addSeedMaterial(byte[]);
    Code:
       0: aload_0
       1: dup
       2: astore_2
       3: monitorenter
       4: aload_1
       5: invokestatic  #75                 // Method org/bouncycastle/util/Arrays.isNullOrEmpty:([B)Z
       8: ifne          16
      11: aload_0
      12: aload_1
      13: invokespecial #73                 // Method digestUpdate:([B)V
      16: aload_0
      17: aload_0
      18: getfield      #65                 // Field seed:[B
      21: invokespecial #73                 // Method digestUpdate:([B)V
      24: aload_0
      25: aload_0
      26: getfield      #65                 // Field seed:[B
      29: invokespecial #72                 // Method digestDoFinal:([B)V
      32: aload_2
      33: monitorexit
      34: goto          42
      37: astore_3
      38: aload_2
      39: monitorexit
      40: aload_3
      41: athrow
      42: return
    Exception table:
       from    to  target type
           4    34    37   any
          37    40    37   any

  public void addSeedMaterial(long);
    Code:
       0: aload_0
       1: dup
       2: astore_3
       3: monitorenter
       4: aload_0
       5: lload_1
       6: invokespecial #71                 // Method digestAddCounter:(J)V
       9: aload_0
      10: aload_0
      11: getfield      #65                 // Field seed:[B
      14: invokespecial #73                 // Method digestUpdate:([B)V
      17: aload_0
      18: aload_0
      19: getfield      #65                 // Field seed:[B
      22: invokespecial #72                 // Method digestDoFinal:([B)V
      25: aload_3
      26: monitorexit
      27: goto          37
      30: astore        4
      32: aload_3
      33: monitorexit
      34: aload         4
      36: athrow
      37: return
    Exception table:
       from    to  target type
           4    27    30   any
          30    34    30   any

  public void nextBytes(byte[]);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_1
       4: arraylength
       5: invokevirtual #74                 // Method nextBytes:([BII)V
       8: return

  public void nextBytes(byte[], int, int);
    Code:
       0: aload_0
       1: dup
       2: astore        4
       4: monitorenter
       5: iconst_0
       6: istore        5
       8: aload_0
       9: invokespecial #70                 // Method generateState:()V
      12: iload_2
      13: iload_3
      14: iadd
      15: istore        6
      17: iload_2
      18: istore        7
      20: iload         7
      22: iload         6
      24: if_icmpeq     64
      27: iload         5
      29: aload_0
      30: getfield      #66                 // Field state:[B
      33: arraylength
      34: if_icmpne     44
      37: aload_0
      38: invokespecial #70                 // Method generateState:()V
      41: iconst_0
      42: istore        5
      44: aload_1
      45: iload         7
      47: aload_0
      48: getfield      #66                 // Field state:[B
      51: iload         5
      53: iinc          5, 1
      56: baload
      57: bastore
      58: iinc          7, 1
      61: goto          20
      64: aload         4
      66: monitorexit
      67: goto          78
      70: astore        8
      72: aload         4
      74: monitorexit
      75: aload         8
      77: athrow
      78: return
    Exception table:
       from    to  target type
           5    67    70   any
          70    75    70   any

  private void cycleSeed();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #65                 // Field seed:[B
       5: invokespecial #73                 // Method digestUpdate:([B)V
       8: aload_0
       9: aload_0
      10: dup
      11: getfield      #63                 // Field seedCounter:J
      14: dup2_x1
      15: lconst_1
      16: ladd
      17: putfield      #63                 // Field seedCounter:J
      20: invokespecial #71                 // Method digestAddCounter:(J)V
      23: aload_0
      24: aload_0
      25: getfield      #65                 // Field seed:[B
      28: invokespecial #72                 // Method digestDoFinal:([B)V
      31: return

  private void generateState();
    Code:
       0: aload_0
       1: aload_0
       2: dup
       3: getfield      #64                 // Field stateCounter:J
       6: dup2_x1
       7: lconst_1
       8: ladd
       9: putfield      #64                 // Field stateCounter:J
      12: invokespecial #71                 // Method digestAddCounter:(J)V
      15: aload_0
      16: aload_0
      17: getfield      #66                 // Field state:[B
      20: invokespecial #73                 // Method digestUpdate:([B)V
      23: aload_0
      24: aload_0
      25: getfield      #65                 // Field seed:[B
      28: invokespecial #73                 // Method digestUpdate:([B)V
      31: aload_0
      32: aload_0
      33: getfield      #66                 // Field state:[B
      36: invokespecial #72                 // Method digestDoFinal:([B)V
      39: aload_0
      40: getfield      #64                 // Field stateCounter:J
      43: getstatic     #62                 // Field CYCLE_COUNT:J
      46: lrem
      47: lconst_0
      48: lcmp
      49: ifne          56
      52: aload_0
      53: invokespecial #69                 // Method cycleSeed:()V
      56: return

  private void digestAddCounter(long);
    Code:
       0: iconst_0
       1: istore_3
       2: iload_3
       3: bipush        8
       5: if_icmpeq     31
       8: aload_0
       9: getfield      #67                 // Field digest:Lorg/bouncycastle/crypto/Digest;
      12: lload_1
      13: l2i
      14: i2b
      15: invokeinterface #77,  2           // InterfaceMethod org/bouncycastle/crypto/Digest.update:(B)V
      20: lload_1
      21: bipush        8
      23: lushr
      24: lstore_1
      25: iinc          3, 1
      28: goto          2
      31: return

  private void digestUpdate(byte[]);
    Code:
       0: aload_0
       1: getfield      #67                 // Field digest:Lorg/bouncycastle/crypto/Digest;
       4: aload_1
       5: iconst_0
       6: aload_1
       7: arraylength
       8: invokeinterface #79,  4           // InterfaceMethod org/bouncycastle/crypto/Digest.update:([BII)V
      13: return

  private void digestDoFinal(byte[]);
    Code:
       0: aload_0
       1: getfield      #67                 // Field digest:Lorg/bouncycastle/crypto/Digest;
       4: aload_1
       5: iconst_0
       6: invokeinterface #78,  3           // InterfaceMethod org/bouncycastle/crypto/Digest.doFinal:([BI)I
      11: pop
      12: return

  static {};
    Code:
       0: ldc2_w        #35                 // long 10l
       3: putstatic     #62                 // Field CYCLE_COUNT:J
       6: return
}
