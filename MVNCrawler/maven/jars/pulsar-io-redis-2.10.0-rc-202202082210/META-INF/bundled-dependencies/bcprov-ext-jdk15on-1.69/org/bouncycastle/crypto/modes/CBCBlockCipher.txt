public class org.bouncycastle.crypto.modes.CBCBlockCipher implements org.bouncycastle.crypto.BlockCipher {
  private byte[] IV;

  private byte[] cbcV;

  private byte[] cbcNextV;

  private int blockSize;

  private org.bouncycastle.crypto.BlockCipher cipher;

  private boolean encrypting;

  public org.bouncycastle.crypto.modes.CBCBlockCipher(org.bouncycastle.crypto.BlockCipher);
    Code:
       0: aload_0
       1: invokespecial #95                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #93                 // Field cipher:Lorg/bouncycastle/crypto/BlockCipher;
       9: aload_0
      10: aload_1
      11: putfield      #93                 // Field cipher:Lorg/bouncycastle/crypto/BlockCipher;
      14: aload_0
      15: aload_1
      16: invokeinterface #107,  1          // InterfaceMethod org/bouncycastle/crypto/BlockCipher.getBlockSize:()I
      21: putfield      #88                 // Field blockSize:I
      24: aload_0
      25: aload_0
      26: getfield      #88                 // Field blockSize:I
      29: newarray       byte
      31: putfield      #90                 // Field IV:[B
      34: aload_0
      35: aload_0
      36: getfield      #88                 // Field blockSize:I
      39: newarray       byte
      41: putfield      #92                 // Field cbcV:[B
      44: aload_0
      45: aload_0
      46: getfield      #88                 // Field blockSize:I
      49: newarray       byte
      51: putfield      #91                 // Field cbcNextV:[B
      54: return

  public org.bouncycastle.crypto.BlockCipher getUnderlyingCipher();
    Code:
       0: aload_0
       1: getfield      #93                 // Field cipher:Lorg/bouncycastle/crypto/BlockCipher;
       4: areturn

  public void init(boolean, org.bouncycastle.crypto.CipherParameters) throws java.lang.IllegalArgumentException;
    Code:
       0: aload_0
       1: getfield      #89                 // Field encrypting:Z
       4: istore_3
       5: aload_0
       6: iload_1
       7: putfield      #89                 // Field encrypting:Z
      10: aload_2
      11: instanceof    #56                 // class org/bouncycastle/crypto/params/ParametersWithIV
      14: ifeq          112
      17: aload_2
      18: checkcast     #56                 // class org/bouncycastle/crypto/params/ParametersWithIV
      21: astore        4
      23: aload         4
      25: invokevirtual #104                // Method org/bouncycastle/crypto/params/ParametersWithIV.getIV:()[B
      28: astore        5
      30: aload         5
      32: arraylength
      33: aload_0
      34: getfield      #88                 // Field blockSize:I
      37: if_icmpeq     50
      40: new           #48                 // class java/lang/IllegalArgumentException
      43: dup
      44: ldc           #3                  // String initialisation vector must be the same length as block size
      46: invokespecial #94                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      49: athrow
      50: aload         5
      52: iconst_0
      53: aload_0
      54: getfield      #90                 // Field IV:[B
      57: iconst_0
      58: aload         5
      60: arraylength
      61: invokestatic  #99                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      64: aload_0
      65: invokevirtual #101                // Method reset:()V
      68: aload         4
      70: invokevirtual #105                // Method org/bouncycastle/crypto/params/ParametersWithIV.getParameters:()Lorg/bouncycastle/crypto/CipherParameters;
      73: ifnull        94
      76: aload_0
      77: getfield      #93                 // Field cipher:Lorg/bouncycastle/crypto/BlockCipher;
      80: iload_1
      81: aload         4
      83: invokevirtual #105                // Method org/bouncycastle/crypto/params/ParametersWithIV.getParameters:()Lorg/bouncycastle/crypto/CipherParameters;
      86: invokeinterface #111,  3          // InterfaceMethod org/bouncycastle/crypto/BlockCipher.init:(ZLorg/bouncycastle/crypto/CipherParameters;)V
      91: goto          109
      94: iload_3
      95: iload_1
      96: if_icmpeq     109
      99: new           #48                 // class java/lang/IllegalArgumentException
     102: dup
     103: ldc           #2                  // String cannot change encrypting state without providing key.
     105: invokespecial #94                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     108: athrow
     109: goto          149
     112: aload_0
     113: invokevirtual #101                // Method reset:()V
     116: aload_2
     117: ifnull        134
     120: aload_0
     121: getfield      #93                 // Field cipher:Lorg/bouncycastle/crypto/BlockCipher;
     124: iload_1
     125: aload_2
     126: invokeinterface #111,  3          // InterfaceMethod org/bouncycastle/crypto/BlockCipher.init:(ZLorg/bouncycastle/crypto/CipherParameters;)V
     131: goto          149
     134: iload_3
     135: iload_1
     136: if_icmpeq     149
     139: new           #48                 // class java/lang/IllegalArgumentException
     142: dup
     143: ldc           #2                  // String cannot change encrypting state without providing key.
     145: invokespecial #94                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     148: athrow
     149: return

  public java.lang.String getAlgorithmName();
    Code:
       0: new           #51                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #96                 // Method java/lang/StringBuilder."<init>":()V
       7: aload_0
       8: getfield      #93                 // Field cipher:Lorg/bouncycastle/crypto/BlockCipher;
      11: invokeinterface #110,  1          // InterfaceMethod org/bouncycastle/crypto/BlockCipher.getAlgorithmName:()Ljava/lang/String;
      16: invokevirtual #98                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      19: ldc           #1                  // String /CBC
      21: invokevirtual #98                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: invokevirtual #97                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      27: areturn

  public int getBlockSize();
    Code:
       0: aload_0
       1: getfield      #93                 // Field cipher:Lorg/bouncycastle/crypto/BlockCipher;
       4: invokeinterface #107,  1          // InterfaceMethod org/bouncycastle/crypto/BlockCipher.getBlockSize:()I
       9: ireturn

  public int processBlock(byte[], int, byte[], int) throws org.bouncycastle.crypto.DataLengthException, java.lang.IllegalStateException;
    Code:
       0: aload_0
       1: getfield      #89                 // Field encrypting:Z
       4: ifeq          19
       7: aload_0
       8: aload_1
       9: iload_2
      10: aload_3
      11: iload         4
      13: invokespecial #103                // Method encryptBlock:([BI[BI)I
      16: goto          28
      19: aload_0
      20: aload_1
      21: iload_2
      22: aload_3
      23: iload         4
      25: invokespecial #102                // Method decryptBlock:([BI[BI)I
      28: ireturn

  public void reset();
    Code:
       0: aload_0
       1: getfield      #90                 // Field IV:[B
       4: iconst_0
       5: aload_0
       6: getfield      #92                 // Field cbcV:[B
       9: iconst_0
      10: aload_0
      11: getfield      #90                 // Field IV:[B
      14: arraylength
      15: invokestatic  #99                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      18: aload_0
      19: getfield      #91                 // Field cbcNextV:[B
      22: iconst_0
      23: invokestatic  #106                // Method org/bouncycastle/util/Arrays.fill:([BB)V
      26: aload_0
      27: getfield      #93                 // Field cipher:Lorg/bouncycastle/crypto/BlockCipher;
      30: invokeinterface #108,  1          // InterfaceMethod org/bouncycastle/crypto/BlockCipher.reset:()V
      35: return

  private int encryptBlock(byte[], int, byte[], int) throws org.bouncycastle.crypto.DataLengthException, java.lang.IllegalStateException;
    Code:
       0: iload_2
       1: aload_0
       2: getfield      #88                 // Field blockSize:I
       5: iadd
       6: aload_1
       7: arraylength
       8: if_icmple     21
      11: new           #54                 // class org/bouncycastle/crypto/DataLengthException
      14: dup
      15: ldc           #4                  // String input buffer too short
      17: invokespecial #100                // Method org/bouncycastle/crypto/DataLengthException."<init>":(Ljava/lang/String;)V
      20: athrow
      21: iconst_0
      22: istore        5
      24: iload         5
      26: aload_0
      27: getfield      #88                 // Field blockSize:I
      30: if_icmpge     56
      33: aload_0
      34: getfield      #92                 // Field cbcV:[B
      37: iload         5
      39: dup2
      40: baload
      41: aload_1
      42: iload_2
      43: iload         5
      45: iadd
      46: baload
      47: ixor
      48: i2b
      49: bastore
      50: iinc          5, 1
      53: goto          24
      56: aload_0
      57: getfield      #93                 // Field cipher:Lorg/bouncycastle/crypto/BlockCipher;
      60: aload_0
      61: getfield      #92                 // Field cbcV:[B
      64: iconst_0
      65: aload_3
      66: iload         4
      68: invokeinterface #109,  5          // InterfaceMethod org/bouncycastle/crypto/BlockCipher.processBlock:([BI[BI)I
      73: istore        5
      75: aload_3
      76: iload         4
      78: aload_0
      79: getfield      #92                 // Field cbcV:[B
      82: iconst_0
      83: aload_0
      84: getfield      #92                 // Field cbcV:[B
      87: arraylength
      88: invokestatic  #99                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      91: iload         5
      93: ireturn

  private int decryptBlock(byte[], int, byte[], int) throws org.bouncycastle.crypto.DataLengthException, java.lang.IllegalStateException;
    Code:
       0: iload_2
       1: aload_0
       2: getfield      #88                 // Field blockSize:I
       5: iadd
       6: aload_1
       7: arraylength
       8: if_icmple     21
      11: new           #54                 // class org/bouncycastle/crypto/DataLengthException
      14: dup
      15: ldc           #4                  // String input buffer too short
      17: invokespecial #100                // Method org/bouncycastle/crypto/DataLengthException."<init>":(Ljava/lang/String;)V
      20: athrow
      21: aload_1
      22: iload_2
      23: aload_0
      24: getfield      #91                 // Field cbcNextV:[B
      27: iconst_0
      28: aload_0
      29: getfield      #88                 // Field blockSize:I
      32: invokestatic  #99                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      35: aload_0
      36: getfield      #93                 // Field cipher:Lorg/bouncycastle/crypto/BlockCipher;
      39: aload_1
      40: iload_2
      41: aload_3
      42: iload         4
      44: invokeinterface #109,  5          // InterfaceMethod org/bouncycastle/crypto/BlockCipher.processBlock:([BI[BI)I
      49: istore        5
      51: iconst_0
      52: istore        6
      54: iload         6
      56: aload_0
      57: getfield      #88                 // Field blockSize:I
      60: if_icmpge     87
      63: aload_3
      64: iload         4
      66: iload         6
      68: iadd
      69: dup2
      70: baload
      71: aload_0
      72: getfield      #92                 // Field cbcV:[B
      75: iload         6
      77: baload
      78: ixor
      79: i2b
      80: bastore
      81: iinc          6, 1
      84: goto          54
      87: aload_0
      88: getfield      #92                 // Field cbcV:[B
      91: astore        6
      93: aload_0
      94: aload_0
      95: getfield      #91                 // Field cbcNextV:[B
      98: putfield      #92                 // Field cbcV:[B
     101: aload_0
     102: aload         6
     104: putfield      #91                 // Field cbcNextV:[B
     107: iload         5
     109: ireturn
}
