Compiled from "RateLimiter.java"
public class org.apache.pulsar.common.util.RateLimiter implements java.lang.AutoCloseable {
  private final java.util.concurrent.ScheduledExecutorService executorService;

  private long rateTime;

  private java.util.concurrent.TimeUnit timeUnit;

  private final boolean externalExecutor;

  private java.util.concurrent.ScheduledFuture<?> renewTask;

  private volatile long permits;

  private volatile long acquiredPermits;

  private boolean isClosed;

  private java.util.function.Supplier<java.lang.Long> permitUpdater;

  private org.apache.pulsar.common.util.RateLimitFunction rateLimitFunction;

  private boolean isDispatchOrPrecisePublishRateLimiter;

  org.apache.pulsar.common.util.RateLimiter(java.util.concurrent.ScheduledExecutorService, long, long, java.util.concurrent.TimeUnit, java.util.function.Supplier<java.lang.Long>, boolean, org.apache.pulsar.common.util.RateLimitFunction);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: lload_2
       5: lconst_0
       6: lcmp
       7: ifle          14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ldc           #2                  // String rate must be > 0
      17: invokestatic  #3                  // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/Object;)V
      20: lload         4
      22: lconst_0
      23: lcmp
      24: ifle          31
      27: iconst_1
      28: goto          32
      31: iconst_0
      32: ldc           #4                  // String Renew permit time must be > 0
      34: invokestatic  #3                  // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/Object;)V
      37: aload_0
      38: lload         4
      40: putfield      #5                  // Field rateTime:J
      43: aload_0
      44: aload         6
      46: putfield      #6                  // Field timeUnit:Ljava/util/concurrent/TimeUnit;
      49: aload_0
      50: lload_2
      51: putfield      #7                  // Field permits:J
      54: aload_0
      55: aload         7
      57: putfield      #8                  // Field permitUpdater:Ljava/util/function/Supplier;
      60: aload_0
      61: iload         8
      63: putfield      #9                  // Field isDispatchOrPrecisePublishRateLimiter:Z
      66: aload_1
      67: ifnull        83
      70: aload_0
      71: aload_1
      72: putfield      #10                 // Field executorService:Ljava/util/concurrent/ScheduledExecutorService;
      75: aload_0
      76: iconst_1
      77: putfield      #11                 // Field externalExecutor:Z
      80: goto          116
      83: new           #12                 // class java/util/concurrent/ScheduledThreadPoolExecutor
      86: dup
      87: iconst_1
      88: invokespecial #13                 // Method java/util/concurrent/ScheduledThreadPoolExecutor."<init>":(I)V
      91: astore        10
      93: aload         10
      95: iconst_0
      96: invokevirtual #14                 // Method java/util/concurrent/ScheduledThreadPoolExecutor.setContinueExistingPeriodicTasksAfterShutdownPolicy:(Z)V
      99: aload         10
     101: iconst_0
     102: invokevirtual #15                 // Method java/util/concurrent/ScheduledThreadPoolExecutor.setExecuteExistingDelayedTasksAfterShutdownPolicy:(Z)V
     105: aload_0
     106: aload         10
     108: putfield      #10                 // Field executorService:Ljava/util/concurrent/ScheduledExecutorService;
     111: aload_0
     112: iconst_0
     113: putfield      #11                 // Field externalExecutor:Z
     116: aload_0
     117: aload         9
     119: putfield      #16                 // Field rateLimitFunction:Lorg/apache/pulsar/common/util/RateLimitFunction;
     122: return

  public synchronized void close();
    Code:
       0: aload_0
       1: getfield      #17                 // Field isClosed:Z
       4: ifne          63
       7: aload_0
       8: getfield      #11                 // Field externalExecutor:Z
      11: ifne          24
      14: aload_0
      15: getfield      #10                 // Field executorService:Ljava/util/concurrent/ScheduledExecutorService;
      18: invokeinterface #18,  1           // InterfaceMethod java/util/concurrent/ScheduledExecutorService.shutdownNow:()Ljava/util/List;
      23: pop
      24: aload_0
      25: getfield      #19                 // Field renewTask:Ljava/util/concurrent/ScheduledFuture;
      28: ifnull        42
      31: aload_0
      32: getfield      #19                 // Field renewTask:Ljava/util/concurrent/ScheduledFuture;
      35: iconst_0
      36: invokeinterface #20,  2           // InterfaceMethod java/util/concurrent/ScheduledFuture.cancel:(Z)Z
      41: pop
      42: aload_0
      43: iconst_1
      44: putfield      #17                 // Field isClosed:Z
      47: aload_0
      48: getfield      #16                 // Field rateLimitFunction:Lorg/apache/pulsar/common/util/RateLimitFunction;
      51: ifnull        63
      54: aload_0
      55: getfield      #16                 // Field rateLimitFunction:Lorg/apache/pulsar/common/util/RateLimitFunction;
      58: invokeinterface #21,  1           // InterfaceMethod org/apache/pulsar/common/util/RateLimitFunction.apply:()V
      63: return

  public synchronized boolean isClosed();
    Code:
       0: aload_0
       1: getfield      #17                 // Field isClosed:Z
       4: ireturn

  public synchronized void acquire() throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: lconst_1
       2: invokevirtual #22                 // Method acquire:(J)V
       5: return

  public synchronized void acquire(long) throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method isClosed:()Z
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ldc           #24                 // String Rate limiter is already shutdown
      14: invokestatic  #3                  // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/Object;)V
      17: lload_1
      18: aload_0
      19: getfield      #7                  // Field permits:J
      22: lcmp
      23: ifgt          30
      26: iconst_1
      27: goto          31
      30: iconst_0
      31: new           #25                 // class java/lang/StringBuilder
      34: dup
      35: invokespecial #26                 // Method java/lang/StringBuilder."<init>":()V
      38: ldc           #27                 // String acquiring permits must be less or equal than initialized rate =
      40: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      43: aload_0
      44: getfield      #7                  // Field permits:J
      47: invokevirtual #29                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      50: invokevirtual #30                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      53: invokestatic  #3                  // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/Object;)V
      56: aload_0
      57: getfield      #19                 // Field renewTask:Ljava/util/concurrent/ScheduledFuture;
      60: ifnonnull     71
      63: aload_0
      64: aload_0
      65: invokevirtual #31                 // Method createTask:()Ljava/util/concurrent/ScheduledFuture;
      68: putfield      #19                 // Field renewTask:Ljava/util/concurrent/ScheduledFuture;
      71: iconst_0
      72: istore_3
      73: lload_1
      74: lconst_0
      75: lcmp
      76: iflt          91
      79: aload_0
      80: getfield      #32                 // Field acquiredPermits:J
      83: aload_0
      84: getfield      #7                  // Field permits:J
      87: lcmp
      88: ifge          95
      91: iconst_1
      92: goto          96
      95: iconst_0
      96: istore_3
      97: iload_3
      98: ifne          108
     101: aload_0
     102: invokevirtual #33                 // Method java/lang/Object.wait:()V
     105: goto          118
     108: aload_0
     109: dup
     110: getfield      #32                 // Field acquiredPermits:J
     113: lload_1
     114: ladd
     115: putfield      #32                 // Field acquiredPermits:J
     118: iload_3
     119: ifeq          73
     122: return

  public synchronized boolean tryAcquire();
    Code:
       0: aload_0
       1: lconst_1
       2: invokevirtual #34                 // Method tryAcquire:(J)Z
       5: ireturn

  public synchronized boolean tryAcquire(long);
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method isClosed:()Z
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ldc           #24                 // String Rate limiter is already shutdown
      14: invokestatic  #3                  // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/Object;)V
      17: aload_0
      18: getfield      #19                 // Field renewTask:Ljava/util/concurrent/ScheduledFuture;
      21: ifnonnull     32
      24: aload_0
      25: aload_0
      26: invokevirtual #31                 // Method createTask:()Ljava/util/concurrent/ScheduledFuture;
      29: putfield      #19                 // Field renewTask:Ljava/util/concurrent/ScheduledFuture;
      32: lload_1
      33: lconst_0
      34: lcmp
      35: iflt          50
      38: aload_0
      39: getfield      #32                 // Field acquiredPermits:J
      42: aload_0
      43: getfield      #7                  // Field permits:J
      46: lcmp
      47: ifge          54
      50: iconst_1
      51: goto          55
      54: iconst_0
      55: istore_3
      56: aload_0
      57: getfield      #9                  // Field isDispatchOrPrecisePublishRateLimiter:Z
      60: ifeq          100
      63: aload_0
      64: dup
      65: getfield      #32                 // Field acquiredPermits:J
      68: lload_1
      69: ladd
      70: putfield      #32                 // Field acquiredPermits:J
      73: lload_1
      74: lconst_0
      75: lcmp
      76: iflt          91
      79: aload_0
      80: getfield      #32                 // Field acquiredPermits:J
      83: aload_0
      84: getfield      #7                  // Field permits:J
      87: lcmp
      88: ifge          95
      91: iconst_1
      92: goto          96
      95: iconst_0
      96: istore_3
      97: goto          133
     100: lload_1
     101: aload_0
     102: getfield      #7                  // Field permits:J
     105: lcmp
     106: ifle          119
     109: aload_0
     110: aload_0
     111: getfield      #7                  // Field permits:J
     114: putfield      #32                 // Field acquiredPermits:J
     117: iconst_0
     118: ireturn
     119: iload_3
     120: ifeq          133
     123: aload_0
     124: dup
     125: getfield      #32                 // Field acquiredPermits:J
     128: lload_1
     129: ladd
     130: putfield      #32                 // Field acquiredPermits:J
     133: iload_3
     134: ireturn

  public long getAvailablePermits();
    Code:
       0: lconst_0
       1: aload_0
       2: getfield      #7                  // Field permits:J
       5: aload_0
       6: getfield      #32                 // Field acquiredPermits:J
       9: lsub
      10: invokestatic  #35                 // Method java/lang/Math.max:(JJ)J
      13: lreturn

  public synchronized void setRate(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #7                  // Field permits:J
       5: return

  public synchronized void setRate(long, long, java.util.concurrent.TimeUnit, java.util.function.Supplier<java.lang.Long>);
    Code:
       0: aload_0
       1: getfield      #19                 // Field renewTask:Ljava/util/concurrent/ScheduledFuture;
       4: ifnull        18
       7: aload_0
       8: getfield      #19                 // Field renewTask:Ljava/util/concurrent/ScheduledFuture;
      11: iconst_0
      12: invokeinterface #20,  2           // InterfaceMethod java/util/concurrent/ScheduledFuture.cancel:(Z)Z
      17: pop
      18: aload_0
      19: lload_1
      20: putfield      #7                  // Field permits:J
      23: aload_0
      24: lload_3
      25: putfield      #5                  // Field rateTime:J
      28: aload_0
      29: aload         5
      31: putfield      #6                  // Field timeUnit:Ljava/util/concurrent/TimeUnit;
      34: aload_0
      35: aload         6
      37: putfield      #8                  // Field permitUpdater:Ljava/util/function/Supplier;
      40: aload_0
      41: aload_0
      42: invokevirtual #31                 // Method createTask:()Ljava/util/concurrent/ScheduledFuture;
      45: putfield      #19                 // Field renewTask:Ljava/util/concurrent/ScheduledFuture;
      48: return

  public synchronized long getRate();
    Code:
       0: aload_0
       1: getfield      #7                  // Field permits:J
       4: lreturn

  public synchronized long getRateTime();
    Code:
       0: aload_0
       1: getfield      #5                  // Field rateTime:J
       4: lreturn

  public synchronized java.util.concurrent.TimeUnit getRateTimeUnit();
    Code:
       0: aload_0
       1: getfield      #6                  // Field timeUnit:Ljava/util/concurrent/TimeUnit;
       4: areturn

  protected java.util.concurrent.ScheduledFuture<?> createTask();
    Code:
       0: aload_0
       1: getfield      #10                 // Field executorService:Ljava/util/concurrent/ScheduledExecutorService;
       4: aload_0
       5: invokedynamic #36,  0             // InvokeDynamic #0:run:(Lorg/apache/pulsar/common/util/RateLimiter;)Ljava/lang/Runnable;
      10: invokestatic  #37                 // Method org/apache/pulsar/common/util/Runnables.catchingAndLoggingThrowables:(Ljava/lang/Runnable;)Ljava/lang/Runnable;
      13: aload_0
      14: getfield      #5                  // Field rateTime:J
      17: aload_0
      18: getfield      #5                  // Field rateTime:J
      21: aload_0
      22: getfield      #6                  // Field timeUnit:Ljava/util/concurrent/TimeUnit;
      25: invokeinterface #38,  7           // InterfaceMethod java/util/concurrent/ScheduledExecutorService.scheduleAtFixedRate:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;
      30: areturn

  synchronized void renew();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #9                  // Field isDispatchOrPrecisePublishRateLimiter:Z
       5: ifeq          24
       8: lconst_0
       9: aload_0
      10: getfield      #32                 // Field acquiredPermits:J
      13: aload_0
      14: getfield      #7                  // Field permits:J
      17: lsub
      18: invokestatic  #35                 // Method java/lang/Math.max:(JJ)J
      21: goto          25
      24: lconst_0
      25: putfield      #32                 // Field acquiredPermits:J
      28: aload_0
      29: getfield      #8                  // Field permitUpdater:Ljava/util/function/Supplier;
      32: ifnull        62
      35: aload_0
      36: getfield      #8                  // Field permitUpdater:Ljava/util/function/Supplier;
      39: invokeinterface #39,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      44: checkcast     #40                 // class java/lang/Long
      47: invokevirtual #41                 // Method java/lang/Long.longValue:()J
      50: lstore_1
      51: lload_1
      52: lconst_0
      53: lcmp
      54: ifle          62
      57: aload_0
      58: lload_1
      59: invokevirtual #42                 // Method setRate:(J)V
      62: aload_0
      63: getfield      #16                 // Field rateLimitFunction:Lorg/apache/pulsar/common/util/RateLimitFunction;
      66: ifnull        87
      69: aload_0
      70: invokevirtual #43                 // Method getAvailablePermits:()J
      73: lconst_0
      74: lcmp
      75: ifle          87
      78: aload_0
      79: getfield      #16                 // Field rateLimitFunction:Lorg/apache/pulsar/common/util/RateLimitFunction;
      82: invokeinterface #21,  1           // InterfaceMethod org/apache/pulsar/common/util/RateLimitFunction.apply:()V
      87: aload_0
      88: invokevirtual #44                 // Method java/lang/Object.notifyAll:()V
      91: return

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokestatic  #45                 // Method com/google/common/base/MoreObjects.toStringHelper:(Ljava/lang/Object;)Lcom/google/common/base/MoreObjects$ToStringHelper;
       4: ldc           #46                 // String rateTime
       6: aload_0
       7: getfield      #5                  // Field rateTime:J
      10: invokevirtual #47                 // Method com/google/common/base/MoreObjects$ToStringHelper.add:(Ljava/lang/String;J)Lcom/google/common/base/MoreObjects$ToStringHelper;
      13: ldc           #48                 // String permits
      15: aload_0
      16: getfield      #7                  // Field permits:J
      19: invokevirtual #47                 // Method com/google/common/base/MoreObjects$ToStringHelper.add:(Ljava/lang/String;J)Lcom/google/common/base/MoreObjects$ToStringHelper;
      22: ldc           #49                 // String acquiredPermits
      24: aload_0
      25: getfield      #32                 // Field acquiredPermits:J
      28: invokevirtual #47                 // Method com/google/common/base/MoreObjects$ToStringHelper.add:(Ljava/lang/String;J)Lcom/google/common/base/MoreObjects$ToStringHelper;
      31: invokevirtual #50                 // Method com/google/common/base/MoreObjects$ToStringHelper.toString:()Ljava/lang/String;
      34: areturn

  public static org.apache.pulsar.common.util.RateLimiter$RateLimiterBuilder builder();
    Code:
       0: new           #51                 // class org/apache/pulsar/common/util/RateLimiter$RateLimiterBuilder
       3: dup
       4: invokespecial #52                 // Method org/apache/pulsar/common/util/RateLimiter$RateLimiterBuilder."<init>":()V
       7: areturn
}
