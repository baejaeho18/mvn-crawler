Compiled from "PulsarByteBufAllocator.java"
public final class org.apache.pulsar.common.allocator.PulsarByteBufAllocator {
  private static final org.slf4j.Logger log;

  public static final java.lang.String PULSAR_ALLOCATOR_POOLED;

  public static final java.lang.String PULSAR_ALLOCATOR_EXIT_ON_OOM;

  public static final java.lang.String PULSAR_ALLOCATOR_LEAK_DETECTION;

  public static final java.lang.String PULSAR_ALLOCATOR_OUT_OF_MEMORY_POLICY;

  public static final io.netty.buffer.ByteBufAllocator DEFAULT;

  private static final java.util.List<java.util.function.Consumer<java.lang.OutOfMemoryError>> LISTENERS;

  private static final boolean EXIT_ON_OOM;

  public static void registerOOMListener(java.util.function.Consumer<java.lang.OutOfMemoryError>);
    Code:
       0: getstatic     #1                  // Field LISTENERS:Ljava/util/List;
       3: aload_0
       4: invokeinterface #2,  2            // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
       9: pop
      10: return

  private org.apache.pulsar.common.allocator.PulsarByteBufAllocator();
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: new           #4                  // class java/lang/UnsupportedOperationException
       7: dup
       8: ldc           #5                  // String This is a utility class and cannot be instantiated
      10: invokespecial #6                  // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
      13: athrow

  private static void lambda$static$1(java.lang.OutOfMemoryError);
    Code:
       0: getstatic     #1                  // Field LISTENERS:Ljava/util/List;
       3: aload_0
       4: invokedynamic #7,  0              // InvokeDynamic #0:accept:(Ljava/lang/OutOfMemoryError;)Ljava/util/function/Consumer;
       9: invokeinterface #8,  2            // InterfaceMethod java/util/List.forEach:(Ljava/util/function/Consumer;)V
      14: getstatic     #9                  // Field EXIT_ON_OOM:Z
      17: ifeq          42
      20: getstatic     #10                 // Field log:Lorg/slf4j/Logger;
      23: ldc           #11                 // String Exiting JVM process for OOM error: {}
      25: aload_0
      26: invokevirtual #12                 // Method java/lang/OutOfMemoryError.getMessage:()Ljava/lang/String;
      29: aload_0
      30: invokeinterface #13,  4           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      35: invokestatic  #14                 // Method java/lang/Runtime.getRuntime:()Ljava/lang/Runtime;
      38: iconst_1
      39: invokevirtual #15                 // Method java/lang/Runtime.halt:(I)V
      42: return

  private static void lambda$null$0(java.lang.OutOfMemoryError, java.util.function.Consumer);
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #16,  2           // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
       7: goto          26
      10: astore_2
      11: getstatic     #10                 // Field log:Lorg/slf4j/Logger;
      14: ldc           #18                 // String Exception during OOM listener: {}
      16: aload_2
      17: invokevirtual #19                 // Method java/lang/Throwable.getMessage:()Ljava/lang/String;
      20: aload_2
      21: invokeinterface #20,  4           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      26: return
    Exception table:
       from    to  target type
           0     7    10   Class java/lang/Throwable

  static {};
    Code:
       0: ldc           #21                 // class org/apache/pulsar/common/allocator/PulsarByteBufAllocator
       2: invokestatic  #22                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #10                 // Field log:Lorg/slf4j/Logger;
       8: new           #23                 // class java/util/concurrent/CopyOnWriteArrayList
      11: dup
      12: invokespecial #24                 // Method java/util/concurrent/CopyOnWriteArrayList."<init>":()V
      15: putstatic     #1                  // Field LISTENERS:Ljava/util/List;
      18: ldc           #25                 // String true
      20: ldc           #26                 // String pulsar.allocator.pooled
      22: ldc           #25                 // String true
      24: invokestatic  #27                 // Method java/lang/System.getProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      27: invokevirtual #28                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      30: istore_0
      31: ldc           #25                 // String true
      33: ldc           #29                 // String pulsar.allocator.exit_on_oom
      35: ldc           #30                 // String false
      37: invokestatic  #27                 // Method java/lang/System.getProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      40: invokevirtual #28                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      43: putstatic     #9                  // Field EXIT_ON_OOM:Z
      46: ldc           #31                 // String pulsar.allocator.out_of_memory_policy
      48: ldc           #32                 // String FallbackToHeap
      50: invokestatic  #27                 // Method java/lang/System.getProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      53: invokestatic  #33                 // Method org/apache/bookkeeper/common/allocator/OutOfMemoryPolicy.valueOf:(Ljava/lang/String;)Lorg/apache/bookkeeper/common/allocator/OutOfMemoryPolicy;
      56: astore_1
      57: ldc           #34                 // String pulsar.allocator.leak_detection
      59: ldc           #35                 // String Disabled
      61: invokestatic  #27                 // Method java/lang/System.getProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      64: invokestatic  #36                 // Method org/apache/bookkeeper/common/allocator/LeakDetectionPolicy.valueOf:(Ljava/lang/String;)Lorg/apache/bookkeeper/common/allocator/LeakDetectionPolicy;
      67: astore_2
      68: getstatic     #10                 // Field log:Lorg/slf4j/Logger;
      71: invokeinterface #37,  1           // InterfaceMethod org/slf4j/Logger.isDebugEnabled:()Z
      76: ifeq          99
      79: getstatic     #10                 // Field log:Lorg/slf4j/Logger;
      82: ldc           #38                 // String Is Pooled: {} -- Exit on OOM: {}
      84: iload_0
      85: invokestatic  #39                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      88: getstatic     #9                  // Field EXIT_ON_OOM:Z
      91: invokestatic  #39                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      94: invokeinterface #40,  4           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      99: invokestatic  #41                 // InterfaceMethod org/apache/bookkeeper/common/allocator/ByteBufAllocatorBuilder.create:()Lorg/apache/bookkeeper/common/allocator/ByteBufAllocatorBuilder;
     102: aload_2
     103: invokeinterface #42,  2           // InterfaceMethod org/apache/bookkeeper/common/allocator/ByteBufAllocatorBuilder.leakDetectionPolicy:(Lorg/apache/bookkeeper/common/allocator/LeakDetectionPolicy;)Lorg/apache/bookkeeper/common/allocator/ByteBufAllocatorBuilder;
     108: getstatic     #43                 // Field io/netty/buffer/PooledByteBufAllocator.DEFAULT:Lio/netty/buffer/PooledByteBufAllocator;
     111: invokeinterface #44,  2           // InterfaceMethod org/apache/bookkeeper/common/allocator/ByteBufAllocatorBuilder.pooledAllocator:(Lio/netty/buffer/ByteBufAllocator;)Lorg/apache/bookkeeper/common/allocator/ByteBufAllocatorBuilder;
     116: invokedynamic #45,  0             // InvokeDynamic #1:accept:()Ljava/util/function/Consumer;
     121: invokeinterface #46,  2           // InterfaceMethod org/apache/bookkeeper/common/allocator/ByteBufAllocatorBuilder.outOfMemoryListener:(Ljava/util/function/Consumer;)Lorg/apache/bookkeeper/common/allocator/ByteBufAllocatorBuilder;
     126: astore_3
     127: iload_0
     128: ifeq          144
     131: aload_3
     132: getstatic     #47                 // Field org/apache/bookkeeper/common/allocator/PoolingPolicy.PooledDirect:Lorg/apache/bookkeeper/common/allocator/PoolingPolicy;
     135: invokeinterface #48,  2           // InterfaceMethod org/apache/bookkeeper/common/allocator/ByteBufAllocatorBuilder.poolingPolicy:(Lorg/apache/bookkeeper/common/allocator/PoolingPolicy;)Lorg/apache/bookkeeper/common/allocator/ByteBufAllocatorBuilder;
     140: pop
     141: goto          154
     144: aload_3
     145: getstatic     #49                 // Field org/apache/bookkeeper/common/allocator/PoolingPolicy.UnpooledHeap:Lorg/apache/bookkeeper/common/allocator/PoolingPolicy;
     148: invokeinterface #48,  2           // InterfaceMethod org/apache/bookkeeper/common/allocator/ByteBufAllocatorBuilder.poolingPolicy:(Lorg/apache/bookkeeper/common/allocator/PoolingPolicy;)Lorg/apache/bookkeeper/common/allocator/ByteBufAllocatorBuilder;
     153: pop
     154: aload_3
     155: aload_1
     156: invokeinterface #50,  2           // InterfaceMethod org/apache/bookkeeper/common/allocator/ByteBufAllocatorBuilder.outOfMemoryPolicy:(Lorg/apache/bookkeeper/common/allocator/OutOfMemoryPolicy;)Lorg/apache/bookkeeper/common/allocator/ByteBufAllocatorBuilder;
     161: pop
     162: aload_3
     163: invokeinterface #51,  1           // InterfaceMethod org/apache/bookkeeper/common/allocator/ByteBufAllocatorBuilder.build:()Lio/netty/buffer/ByteBufAllocator;
     168: putstatic     #52                 // Field DEFAULT:Lio/netty/buffer/ByteBufAllocator;
     171: return
}
