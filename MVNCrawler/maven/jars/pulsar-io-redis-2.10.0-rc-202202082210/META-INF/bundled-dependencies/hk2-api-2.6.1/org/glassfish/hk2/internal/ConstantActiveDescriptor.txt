Compiled from "ConstantActiveDescriptor.java"
public class org.glassfish.hk2.internal.ConstantActiveDescriptor<T> extends org.glassfish.hk2.utilities.AbstractActiveDescriptor<T> {
  private static final long serialVersionUID;

  private final T theOne;

  public org.glassfish.hk2.internal.ConstantActiveDescriptor();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/glassfish/hk2/utilities/AbstractActiveDescriptor."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #2                  // Field theOne:Ljava/lang/Object;
       9: return

  public org.glassfish.hk2.internal.ConstantActiveDescriptor(T, java.util.Set<java.lang.reflect.Type>, java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.String, java.util.Set<java.lang.annotation.Annotation>, org.glassfish.hk2.api.DescriptorVisibility, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.util.Map<java.lang.String, java.util.List<java.lang.String>>, int);
    Code:
       0: aload_0
       1: aload_2
       2: aload_3
       3: aload         4
       5: aload         5
       7: getstatic     #3                  // Field org/glassfish/hk2/api/DescriptorType.CLASS:Lorg/glassfish/hk2/api/DescriptorType;
      10: aload         6
      12: iload         11
      14: aload         7
      16: aload         8
      18: aload         9
      20: aload         10
      22: invokespecial #4                  // Method org/glassfish/hk2/utilities/AbstractActiveDescriptor."<init>":(Ljava/util/Set;Ljava/lang/Class;Ljava/lang/String;Ljava/util/Set;Lorg/glassfish/hk2/api/DescriptorType;Lorg/glassfish/hk2/api/DescriptorVisibility;ILjava/lang/Boolean;Ljava/lang/Boolean;Ljava/lang/String;Ljava/util/Map;)V
      25: aload_1
      26: ifnonnull     37
      29: new           #5                  // class java/lang/IllegalArgumentException
      32: dup
      33: invokespecial #6                  // Method java/lang/IllegalArgumentException."<init>":()V
      36: athrow
      37: aload_0
      38: aload_1
      39: putfield      #2                  // Field theOne:Ljava/lang/Object;
      42: return

  public java.lang.String getImplementation();
    Code:
       0: aload_0
       1: getfield      #2                  // Field theOne:Ljava/lang/Object;
       4: invokevirtual #7                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
       7: invokevirtual #8                  // Method java/lang/Class.getName:()Ljava/lang/String;
      10: areturn

  public T getCache();
    Code:
       0: aload_0
       1: getfield      #2                  // Field theOne:Ljava/lang/Object;
       4: areturn

  public boolean isCacheSet();
    Code:
       0: iconst_1
       1: ireturn

  public java.lang.Class<?> getImplementationClass();
    Code:
       0: aload_0
       1: getfield      #2                  // Field theOne:Ljava/lang/Object;
       4: invokevirtual #7                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
       7: areturn

  public java.lang.reflect.Type getImplementationType();
    Code:
       0: aload_0
       1: getfield      #2                  // Field theOne:Ljava/lang/Object;
       4: invokevirtual #7                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
       7: areturn

  public T create(org.glassfish.hk2.api.ServiceHandle<?>);
    Code:
       0: aload_0
       1: getfield      #2                  // Field theOne:Ljava/lang/Object;
       4: areturn
}
