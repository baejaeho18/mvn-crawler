Compiled from "AdaptiveThrottler.java"
final class io.grpc.rls.AdaptiveThrottler implements io.grpc.rls.Throttler {
  private static final int DEFAULT_HISTORY_SECONDS;

  private static final int DEFAULT_REQUEST_PADDING;

  private static final float DEFAULT_RATIO_FOR_ACCEPT;

  private final int historySeconds;

  private final int requestsPadding;

  private final float ratioForAccepts;

  private final io.grpc.internal.TimeProvider timeProvider;

  final io.grpc.rls.AdaptiveThrottler$TimeBasedAccumulator requestStat;

  final io.grpc.rls.AdaptiveThrottler$TimeBasedAccumulator throttledStat;

  private io.grpc.rls.AdaptiveThrottler(io.grpc.rls.AdaptiveThrottler$Builder);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: invokestatic  #3                  // Method io/grpc/rls/AdaptiveThrottler$Builder.access$000:(Lio/grpc/rls/AdaptiveThrottler$Builder;)I
       9: putfield      #4                  // Field historySeconds:I
      12: aload_0
      13: aload_1
      14: invokestatic  #5                  // Method io/grpc/rls/AdaptiveThrottler$Builder.access$100:(Lio/grpc/rls/AdaptiveThrottler$Builder;)I
      17: putfield      #6                  // Field requestsPadding:I
      20: aload_0
      21: aload_1
      22: invokestatic  #7                  // Method io/grpc/rls/AdaptiveThrottler$Builder.access$200:(Lio/grpc/rls/AdaptiveThrottler$Builder;)F
      25: putfield      #8                  // Field ratioForAccepts:F
      28: aload_0
      29: aload_1
      30: invokestatic  #9                  // Method io/grpc/rls/AdaptiveThrottler$Builder.access$300:(Lio/grpc/rls/AdaptiveThrottler$Builder;)Lio/grpc/internal/TimeProvider;
      33: putfield      #10                 // Field timeProvider:Lio/grpc/internal/TimeProvider;
      36: getstatic     #11                 // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
      39: aload_0
      40: getfield      #4                  // Field historySeconds:I
      43: i2l
      44: invokevirtual #12                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      47: lstore_2
      48: aload_0
      49: new           #13                 // class io/grpc/rls/AdaptiveThrottler$TimeBasedAccumulator
      52: dup
      53: lload_2
      54: aload_0
      55: getfield      #10                 // Field timeProvider:Lio/grpc/internal/TimeProvider;
      58: invokespecial #14                 // Method io/grpc/rls/AdaptiveThrottler$TimeBasedAccumulator."<init>":(JLio/grpc/internal/TimeProvider;)V
      61: putfield      #15                 // Field requestStat:Lio/grpc/rls/AdaptiveThrottler$TimeBasedAccumulator;
      64: aload_0
      65: new           #13                 // class io/grpc/rls/AdaptiveThrottler$TimeBasedAccumulator
      68: dup
      69: lload_2
      70: aload_0
      71: getfield      #10                 // Field timeProvider:Lio/grpc/internal/TimeProvider;
      74: invokespecial #14                 // Method io/grpc/rls/AdaptiveThrottler$TimeBasedAccumulator."<init>":(JLio/grpc/internal/TimeProvider;)V
      77: putfield      #16                 // Field throttledStat:Lio/grpc/rls/AdaptiveThrottler$TimeBasedAccumulator;
      80: return

  public boolean shouldThrottle();
    Code:
       0: aload_0
       1: invokestatic  #17                 // Method randomFloat:()F
       4: invokevirtual #18                 // Method shouldThrottle:(F)Z
       7: ireturn

  boolean shouldThrottle(float);
    Code:
       0: aload_0
       1: getfield      #10                 // Field timeProvider:Lio/grpc/internal/TimeProvider;
       4: invokeinterface #19,  1           // InterfaceMethod io/grpc/internal/TimeProvider.currentTimeNanos:()J
       9: lstore_2
      10: aload_0
      11: lload_2
      12: invokevirtual #20                 // Method getThrottleProbability:(J)F
      15: fload_1
      16: fcmpg
      17: ifgt          22
      20: iconst_0
      21: ireturn
      22: aload_0
      23: getfield      #15                 // Field requestStat:Lio/grpc/rls/AdaptiveThrottler$TimeBasedAccumulator;
      26: lload_2
      27: invokevirtual #21                 // Method io/grpc/rls/AdaptiveThrottler$TimeBasedAccumulator.increment:(J)V
      30: aload_0
      31: getfield      #16                 // Field throttledStat:Lio/grpc/rls/AdaptiveThrottler$TimeBasedAccumulator;
      34: lload_2
      35: invokevirtual #21                 // Method io/grpc/rls/AdaptiveThrottler$TimeBasedAccumulator.increment:(J)V
      38: iconst_1
      39: ireturn

  float getThrottleProbability(long);
    Code:
       0: aload_0
       1: getfield      #15                 // Field requestStat:Lio/grpc/rls/AdaptiveThrottler$TimeBasedAccumulator;
       4: lload_1
       5: invokevirtual #22                 // Method io/grpc/rls/AdaptiveThrottler$TimeBasedAccumulator.get:(J)J
       8: lstore_3
       9: lload_3
      10: aload_0
      11: getfield      #16                 // Field throttledStat:Lio/grpc/rls/AdaptiveThrottler$TimeBasedAccumulator;
      14: lload_1
      15: invokevirtual #22                 // Method io/grpc/rls/AdaptiveThrottler$TimeBasedAccumulator.get:(J)J
      18: lsub
      19: lstore        5
      21: lload_3
      22: l2f
      23: aload_0
      24: getfield      #8                  // Field ratioForAccepts:F
      27: lload         5
      29: l2f
      30: fmul
      31: fsub
      32: lload_3
      33: aload_0
      34: getfield      #6                  // Field requestsPadding:I
      37: i2l
      38: ladd
      39: l2f
      40: fdiv
      41: freturn

  public void registerBackendResponse(boolean);
    Code:
       0: aload_0
       1: getfield      #10                 // Field timeProvider:Lio/grpc/internal/TimeProvider;
       4: invokeinterface #19,  1           // InterfaceMethod io/grpc/internal/TimeProvider.currentTimeNanos:()J
       9: lstore_2
      10: aload_0
      11: getfield      #15                 // Field requestStat:Lio/grpc/rls/AdaptiveThrottler$TimeBasedAccumulator;
      14: lload_2
      15: invokevirtual #21                 // Method io/grpc/rls/AdaptiveThrottler$TimeBasedAccumulator.increment:(J)V
      18: iload_1
      19: ifeq          30
      22: aload_0
      23: getfield      #16                 // Field throttledStat:Lio/grpc/rls/AdaptiveThrottler$TimeBasedAccumulator;
      26: lload_2
      27: invokevirtual #21                 // Method io/grpc/rls/AdaptiveThrottler$TimeBasedAccumulator.increment:(J)V
      30: return

  private static float randomFloat();
    Code:
       0: invokestatic  #23                 // Method java/util/concurrent/ThreadLocalRandom.current:()Ljava/util/concurrent/ThreadLocalRandom;
       3: invokevirtual #24                 // Method java/util/concurrent/ThreadLocalRandom.nextFloat:()F
       6: freturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokestatic  #25                 // Method com/google/common/base/MoreObjects.toStringHelper:(Ljava/lang/Object;)Lcom/google/common/base/MoreObjects$ToStringHelper;
       4: ldc           #26                 // String historySeconds
       6: aload_0
       7: getfield      #4                  // Field historySeconds:I
      10: invokevirtual #27                 // Method com/google/common/base/MoreObjects$ToStringHelper.add:(Ljava/lang/String;I)Lcom/google/common/base/MoreObjects$ToStringHelper;
      13: ldc           #28                 // String requestsPadding
      15: aload_0
      16: getfield      #6                  // Field requestsPadding:I
      19: invokevirtual #27                 // Method com/google/common/base/MoreObjects$ToStringHelper.add:(Ljava/lang/String;I)Lcom/google/common/base/MoreObjects$ToStringHelper;
      22: ldc           #29                 // String ratioForAccepts
      24: aload_0
      25: getfield      #8                  // Field ratioForAccepts:F
      28: invokevirtual #30                 // Method com/google/common/base/MoreObjects$ToStringHelper.add:(Ljava/lang/String;F)Lcom/google/common/base/MoreObjects$ToStringHelper;
      31: ldc           #31                 // String requestStat
      33: aload_0
      34: getfield      #15                 // Field requestStat:Lio/grpc/rls/AdaptiveThrottler$TimeBasedAccumulator;
      37: invokevirtual #32                 // Method com/google/common/base/MoreObjects$ToStringHelper.add:(Ljava/lang/String;Ljava/lang/Object;)Lcom/google/common/base/MoreObjects$ToStringHelper;
      40: ldc           #33                 // String throttledStat
      42: aload_0
      43: getfield      #16                 // Field throttledStat:Lio/grpc/rls/AdaptiveThrottler$TimeBasedAccumulator;
      46: invokevirtual #32                 // Method com/google/common/base/MoreObjects$ToStringHelper.add:(Ljava/lang/String;Ljava/lang/Object;)Lcom/google/common/base/MoreObjects$ToStringHelper;
      49: invokevirtual #34                 // Method com/google/common/base/MoreObjects$ToStringHelper.toString:()Ljava/lang/String;
      52: areturn

  public static io.grpc.rls.AdaptiveThrottler$Builder builder();
    Code:
       0: new           #35                 // class io/grpc/rls/AdaptiveThrottler$Builder
       3: dup
       4: invokespecial #36                 // Method io/grpc/rls/AdaptiveThrottler$Builder."<init>":()V
       7: areturn

  io.grpc.rls.AdaptiveThrottler(io.grpc.rls.AdaptiveThrottler$Builder, io.grpc.rls.AdaptiveThrottler$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method "<init>":(Lio/grpc/rls/AdaptiveThrottler$Builder;)V
       5: return
}
