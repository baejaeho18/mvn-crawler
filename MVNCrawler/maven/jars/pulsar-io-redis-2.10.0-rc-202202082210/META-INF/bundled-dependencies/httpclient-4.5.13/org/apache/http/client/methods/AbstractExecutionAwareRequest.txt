Compiled from "AbstractExecutionAwareRequest.java"
public abstract class org.apache.http.client.methods.AbstractExecutionAwareRequest extends org.apache.http.message.AbstractHttpMessage implements org.apache.http.client.methods.HttpExecutionAware,org.apache.http.client.methods.AbortableHttpRequest,java.lang.Cloneable,org.apache.http.HttpRequest {
  private final java.util.concurrent.atomic.AtomicMarkableReference<org.apache.http.concurrent.Cancellable> cancellableRef;

  protected org.apache.http.client.methods.AbstractExecutionAwareRequest();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/http/message/AbstractHttpMessage."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/atomic/AtomicMarkableReference
       8: dup
       9: aconst_null
      10: iconst_0
      11: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicMarkableReference."<init>":(Ljava/lang/Object;Z)V
      14: putfield      #4                  // Field cancellableRef:Ljava/util/concurrent/atomic/AtomicMarkableReference;
      17: return

  public void setConnectionRequest(org.apache.http.conn.ClientConnectionRequest);
    Code:
       0: aload_0
       1: new           #5                  // class org/apache/http/client/methods/AbstractExecutionAwareRequest$1
       4: dup
       5: aload_0
       6: aload_1
       7: invokespecial #6                  // Method org/apache/http/client/methods/AbstractExecutionAwareRequest$1."<init>":(Lorg/apache/http/client/methods/AbstractExecutionAwareRequest;Lorg/apache/http/conn/ClientConnectionRequest;)V
      10: invokevirtual #7                  // Method setCancellable:(Lorg/apache/http/concurrent/Cancellable;)V
      13: return

  public void setReleaseTrigger(org.apache.http.conn.ConnectionReleaseTrigger);
    Code:
       0: aload_0
       1: new           #8                  // class org/apache/http/client/methods/AbstractExecutionAwareRequest$2
       4: dup
       5: aload_0
       6: aload_1
       7: invokespecial #9                  // Method org/apache/http/client/methods/AbstractExecutionAwareRequest$2."<init>":(Lorg/apache/http/client/methods/AbstractExecutionAwareRequest;Lorg/apache/http/conn/ConnectionReleaseTrigger;)V
      10: invokevirtual #7                  // Method setCancellable:(Lorg/apache/http/concurrent/Cancellable;)V
      13: return

  public void abort();
    Code:
       0: aload_0
       1: getfield      #4                  // Field cancellableRef:Ljava/util/concurrent/atomic/AtomicMarkableReference;
       4: invokevirtual #10                 // Method java/util/concurrent/atomic/AtomicMarkableReference.isMarked:()Z
       7: ifne          49
      10: aload_0
      11: getfield      #4                  // Field cancellableRef:Ljava/util/concurrent/atomic/AtomicMarkableReference;
      14: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicMarkableReference.getReference:()Ljava/lang/Object;
      17: checkcast     #12                 // class org/apache/http/concurrent/Cancellable
      20: astore_1
      21: aload_0
      22: getfield      #4                  // Field cancellableRef:Ljava/util/concurrent/atomic/AtomicMarkableReference;
      25: aload_1
      26: aload_1
      27: iconst_0
      28: iconst_1
      29: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicMarkableReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;ZZ)Z
      32: ifeq          46
      35: aload_1
      36: ifnull        46
      39: aload_1
      40: invokeinterface #14,  1           // InterfaceMethod org/apache/http/concurrent/Cancellable.cancel:()Z
      45: pop
      46: goto          0
      49: return

  public boolean isAborted();
    Code:
       0: aload_0
       1: getfield      #4                  // Field cancellableRef:Ljava/util/concurrent/atomic/AtomicMarkableReference;
       4: invokevirtual #10                 // Method java/util/concurrent/atomic/AtomicMarkableReference.isMarked:()Z
       7: ireturn

  public void setCancellable(org.apache.http.concurrent.Cancellable);
    Code:
       0: aload_0
       1: getfield      #4                  // Field cancellableRef:Ljava/util/concurrent/atomic/AtomicMarkableReference;
       4: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicMarkableReference.getReference:()Ljava/lang/Object;
       7: checkcast     #12                 // class org/apache/http/concurrent/Cancellable
      10: astore_2
      11: aload_0
      12: getfield      #4                  // Field cancellableRef:Ljava/util/concurrent/atomic/AtomicMarkableReference;
      15: aload_2
      16: aload_1
      17: iconst_0
      18: iconst_0
      19: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicMarkableReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;ZZ)Z
      22: ifne          32
      25: aload_1
      26: invokeinterface #14,  1           // InterfaceMethod org/apache/http/concurrent/Cancellable.cancel:()Z
      31: pop
      32: return

  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    Code:
       0: aload_0
       1: invokespecial #15                 // Method java/lang/Object.clone:()Ljava/lang/Object;
       4: checkcast     #16                 // class org/apache/http/client/methods/AbstractExecutionAwareRequest
       7: astore_1
       8: aload_1
       9: aload_0
      10: getfield      #17                 // Field headergroup:Lorg/apache/http/message/HeaderGroup;
      13: invokestatic  #18                 // Method org/apache/http/client/utils/CloneUtils.cloneObject:(Ljava/lang/Object;)Ljava/lang/Object;
      16: checkcast     #19                 // class org/apache/http/message/HeaderGroup
      19: putfield      #17                 // Field headergroup:Lorg/apache/http/message/HeaderGroup;
      22: aload_1
      23: aload_0
      24: getfield      #20                 // Field params:Lorg/apache/http/params/HttpParams;
      27: invokestatic  #18                 // Method org/apache/http/client/utils/CloneUtils.cloneObject:(Ljava/lang/Object;)Ljava/lang/Object;
      30: checkcast     #21                 // class org/apache/http/params/HttpParams
      33: putfield      #20                 // Field params:Lorg/apache/http/params/HttpParams;
      36: aload_1
      37: areturn

  public void completed();
    Code:
       0: aload_0
       1: getfield      #4                  // Field cancellableRef:Ljava/util/concurrent/atomic/AtomicMarkableReference;
       4: aconst_null
       5: iconst_0
       6: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicMarkableReference.set:(Ljava/lang/Object;Z)V
       9: return

  public void reset();
    Code:
       0: aload_0
       1: getfield      #4                  // Field cancellableRef:Ljava/util/concurrent/atomic/AtomicMarkableReference;
       4: invokevirtual #10                 // Method java/util/concurrent/atomic/AtomicMarkableReference.isMarked:()Z
       7: istore_1
       8: aload_0
       9: getfield      #4                  // Field cancellableRef:Ljava/util/concurrent/atomic/AtomicMarkableReference;
      12: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicMarkableReference.getReference:()Ljava/lang/Object;
      15: checkcast     #12                 // class org/apache/http/concurrent/Cancellable
      18: astore_2
      19: aload_2
      20: ifnull        30
      23: aload_2
      24: invokeinterface #14,  1           // InterfaceMethod org/apache/http/concurrent/Cancellable.cancel:()Z
      29: pop
      30: aload_0
      31: getfield      #4                  // Field cancellableRef:Ljava/util/concurrent/atomic/AtomicMarkableReference;
      34: aload_2
      35: aconst_null
      36: iload_1
      37: iconst_0
      38: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicMarkableReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;ZZ)Z
      41: ifeq          47
      44: goto          50
      47: goto          0
      50: return
}
