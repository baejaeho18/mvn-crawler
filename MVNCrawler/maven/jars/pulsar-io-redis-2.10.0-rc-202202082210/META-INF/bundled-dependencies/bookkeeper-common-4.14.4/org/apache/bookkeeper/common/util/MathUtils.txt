Compiled from "MathUtils.java"
public class org.apache.bookkeeper.common.util.MathUtils {
  private static final long NANOSECONDS_PER_MILLISECOND;

  public org.apache.bookkeeper.common.util.MathUtils();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static int signSafeMod(long, int);
    Code:
       0: lload_0
       1: iload_2
       2: i2l
       3: lrem
       4: l2i
       5: istore_3
       6: iload_3
       7: ifge          14
      10: iload_3
      11: iload_2
      12: iadd
      13: istore_3
      14: iload_3
      15: ireturn

  public static int findNextPositivePowerOfTwo(int);
    Code:
       0: iconst_1
       1: bipush        32
       3: iload_0
       4: iconst_1
       5: isub
       6: invokestatic  #2                  // Method java/lang/Integer.numberOfLeadingZeros:(I)I
       9: isub
      10: ishl
      11: ireturn

  public static long nowInNano();
    Code:
       0: invokestatic  #3                  // Method java/lang/System.nanoTime:()J
       3: lreturn

  public static long elapsedMSec(long);
    Code:
       0: invokestatic  #3                  // Method java/lang/System.nanoTime:()J
       3: lload_0
       4: lsub
       5: ldc2_w        #5                  // long 1000000l
       8: ldiv
       9: lreturn

  public static long elapsedMicroSec(long);
    Code:
       0: getstatic     #7                  // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
       3: invokestatic  #3                  // Method java/lang/System.nanoTime:()J
       6: lload_0
       7: lsub
       8: invokevirtual #8                  // Method java/util/concurrent/TimeUnit.toMicros:(J)J
      11: lreturn

  public static long elapsedNanos(long);
    Code:
       0: invokestatic  #3                  // Method java/lang/System.nanoTime:()J
       3: lload_0
       4: lsub
       5: lreturn
}
