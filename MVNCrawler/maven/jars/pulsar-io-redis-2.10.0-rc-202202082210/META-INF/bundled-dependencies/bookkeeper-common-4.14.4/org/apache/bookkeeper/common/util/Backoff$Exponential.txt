Compiled from "Backoff.java"
public class org.apache.bookkeeper.common.util.Backoff$Exponential implements org.apache.bookkeeper.common.util.Backoff$Policy {
  private final long startMs;

  private final long maxMs;

  private final int multiplier;

  private final int limit;

  public static org.apache.bookkeeper.common.util.Backoff$Exponential of(long, long, int);
    Code:
       0: lload_0
       1: lload_2
       2: iload         4
       4: iconst_m1
       5: invokestatic  #1                  // Method of:(JJII)Lorg/apache/bookkeeper/common/util/Backoff$Exponential;
       8: areturn

  public java.util.stream.Stream<java.lang.Long> toBackoffs();
    Code:
       0: aload_0
       1: getfield      #2                  // Field limit:I
       4: iflt          33
       7: aload_0
       8: getfield      #3                  // Field startMs:J
      11: aload_0
      12: getfield      #4                  // Field multiplier:I
      15: aload_0
      16: getfield      #5                  // Field maxMs:J
      19: invokestatic  #6                  // Method org/apache/bookkeeper/common/util/Backoff.exponential:(JIJ)Ljava/util/stream/Stream;
      22: aload_0
      23: getfield      #2                  // Field limit:I
      26: i2l
      27: invokeinterface #7,  3            // InterfaceMethod java/util/stream/Stream.limit:(J)Ljava/util/stream/Stream;
      32: areturn
      33: aload_0
      34: getfield      #3                  // Field startMs:J
      37: aload_0
      38: getfield      #4                  // Field multiplier:I
      41: aload_0
      42: getfield      #5                  // Field maxMs:J
      45: invokestatic  #6                  // Method org/apache/bookkeeper/common/util/Backoff.exponential:(JIJ)Ljava/util/stream/Stream;
      48: areturn

  private org.apache.bookkeeper.common.util.Backoff$Exponential(long, long, int, int);
    Code:
       0: aload_0
       1: invokespecial #8                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: lload_1
       6: putfield      #3                  // Field startMs:J
       9: aload_0
      10: lload_3
      11: putfield      #5                  // Field maxMs:J
      14: aload_0
      15: iload         5
      17: putfield      #4                  // Field multiplier:I
      20: aload_0
      21: iload         6
      23: putfield      #2                  // Field limit:I
      26: return

  public static org.apache.bookkeeper.common.util.Backoff$Exponential of(long, long, int, int);
    Code:
       0: new           #9                  // class org/apache/bookkeeper/common/util/Backoff$Exponential
       3: dup
       4: lload_0
       5: lload_2
       6: iload         4
       8: iload         5
      10: invokespecial #10                 // Method "<init>":(JJII)V
      13: areturn

  public long getStartMs();
    Code:
       0: aload_0
       1: getfield      #3                  // Field startMs:J
       4: lreturn

  public long getMaxMs();
    Code:
       0: aload_0
       1: getfield      #5                  // Field maxMs:J
       4: lreturn

  public int getMultiplier();
    Code:
       0: aload_0
       1: getfield      #4                  // Field multiplier:I
       4: ireturn

  public int getLimit();
    Code:
       0: aload_0
       1: getfield      #2                  // Field limit:I
       4: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: aload_0
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: instanceof    #9                  // class org/apache/bookkeeper/common/util/Backoff$Exponential
      11: ifne          16
      14: iconst_0
      15: ireturn
      16: aload_1
      17: checkcast     #9                  // class org/apache/bookkeeper/common/util/Backoff$Exponential
      20: astore_2
      21: aload_2
      22: aload_0
      23: invokevirtual #11                 // Method canEqual:(Ljava/lang/Object;)Z
      26: ifne          31
      29: iconst_0
      30: ireturn
      31: aload_0
      32: invokevirtual #12                 // Method getStartMs:()J
      35: aload_2
      36: invokevirtual #12                 // Method getStartMs:()J
      39: lcmp
      40: ifeq          45
      43: iconst_0
      44: ireturn
      45: aload_0
      46: invokevirtual #13                 // Method getMaxMs:()J
      49: aload_2
      50: invokevirtual #13                 // Method getMaxMs:()J
      53: lcmp
      54: ifeq          59
      57: iconst_0
      58: ireturn
      59: aload_0
      60: invokevirtual #14                 // Method getMultiplier:()I
      63: aload_2
      64: invokevirtual #14                 // Method getMultiplier:()I
      67: if_icmpeq     72
      70: iconst_0
      71: ireturn
      72: aload_0
      73: invokevirtual #15                 // Method getLimit:()I
      76: aload_2
      77: invokevirtual #15                 // Method getLimit:()I
      80: if_icmpeq     85
      83: iconst_0
      84: ireturn
      85: iconst_1
      86: ireturn

  protected boolean canEqual(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #9                  // class org/apache/bookkeeper/common/util/Backoff$Exponential
       4: ireturn

  public int hashCode();
    Code:
       0: bipush        59
       2: istore_1
       3: iconst_1
       4: istore_2
       5: aload_0
       6: invokevirtual #12                 // Method getStartMs:()J
       9: lstore_3
      10: iload_2
      11: bipush        59
      13: imul
      14: lload_3
      15: bipush        32
      17: lushr
      18: lload_3
      19: lxor
      20: l2i
      21: iadd
      22: istore_2
      23: aload_0
      24: invokevirtual #13                 // Method getMaxMs:()J
      27: lstore        5
      29: iload_2
      30: bipush        59
      32: imul
      33: lload         5
      35: bipush        32
      37: lushr
      38: lload         5
      40: lxor
      41: l2i
      42: iadd
      43: istore_2
      44: iload_2
      45: bipush        59
      47: imul
      48: aload_0
      49: invokevirtual #14                 // Method getMultiplier:()I
      52: iadd
      53: istore_2
      54: iload_2
      55: bipush        59
      57: imul
      58: aload_0
      59: invokevirtual #15                 // Method getLimit:()I
      62: iadd
      63: istore_2
      64: iload_2
      65: ireturn

  public java.lang.String toString();
    Code:
       0: new           #16                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #17                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #18                 // String Backoff.Exponential(startMs=
       9: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: invokevirtual #12                 // Method getStartMs:()J
      16: invokevirtual #20                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      19: ldc           #21                 // String , maxMs=
      21: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: aload_0
      25: invokevirtual #13                 // Method getMaxMs:()J
      28: invokevirtual #20                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      31: ldc           #22                 // String , multiplier=
      33: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: aload_0
      37: invokevirtual #14                 // Method getMultiplier:()I
      40: invokevirtual #23                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      43: ldc           #24                 // String , limit=
      45: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      48: aload_0
      49: invokevirtual #15                 // Method getLimit:()I
      52: invokevirtual #23                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      55: ldc           #25                 // String )
      57: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      60: invokevirtual #26                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      63: areturn
}
