Compiled from "Backoff.java"
public class org.apache.bookkeeper.common.util.Backoff {
  public static final org.apache.bookkeeper.common.util.Backoff$Policy DEFAULT;

  private static final int MaxBitShift;

  public org.apache.bookkeeper.common.util.Backoff();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static java.util.stream.Stream<java.lang.Long> constant(long);
    Code:
       0: lload_0
       1: invokestatic  #2                  // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
       4: lload_0
       5: invokedynamic #3,  0              // InvokeDynamic #0:apply:(J)Ljava/util/function/UnaryOperator;
      10: invokestatic  #4                  // InterfaceMethod java/util/stream/Stream.iterate:(Ljava/lang/Object;Ljava/util/function/UnaryOperator;)Ljava/util/stream/Stream;
      13: areturn

  public static java.util.stream.Stream<java.lang.Long> exponential(long, int, long);
    Code:
       0: lload_0
       1: invokestatic  #2                  // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
       4: iload_2
       5: lload_3
       6: invokedynamic #5,  0              // InvokeDynamic #1:apply:(IJ)Ljava/util/function/UnaryOperator;
      11: invokestatic  #4                  // InterfaceMethod java/util/stream/Stream.iterate:(Ljava/lang/Object;Ljava/util/function/UnaryOperator;)Ljava/util/stream/Stream;
      14: areturn

  public static java.util.stream.Stream<java.lang.Long> exponentialJittered(long, long);
    Code:
       0: getstatic     #6                  // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
       3: lload_0
       4: getstatic     #7                  // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
       7: invokevirtual #8                  // Method java/util/concurrent/TimeUnit.convert:(JLjava/util/concurrent/TimeUnit;)J
      10: lstore        4
      12: getstatic     #6                  // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      15: lload_2
      16: getstatic     #7                  // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      19: invokevirtual #8                  // Method java/util/concurrent/TimeUnit.convert:(JLjava/util/concurrent/TimeUnit;)J
      22: lstore        6
      24: new           #9                  // class java/util/concurrent/atomic/AtomicLong
      27: dup
      28: lconst_1
      29: invokespecial #10                 // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      32: astore        8
      34: lload_0
      35: invokestatic  #2                  // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      38: aload         8
      40: lload         6
      42: lload         4
      44: invokedynamic #11,  0             // InvokeDynamic #2:apply:(Ljava/util/concurrent/atomic/AtomicLong;JJ)Ljava/util/function/UnaryOperator;
      49: invokestatic  #4                  // InterfaceMethod java/util/stream/Stream.iterate:(Ljava/lang/Object;Ljava/util/function/UnaryOperator;)Ljava/util/stream/Stream;
      52: areturn

  public static java.util.stream.Stream<java.lang.Long> decorrelatedJittered(long, long);
    Code:
       0: getstatic     #6                  // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
       3: lload_0
       4: getstatic     #7                  // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
       7: invokevirtual #8                  // Method java/util/concurrent/TimeUnit.convert:(JLjava/util/concurrent/TimeUnit;)J
      10: lstore        4
      12: getstatic     #6                  // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      15: lload_2
      16: getstatic     #7                  // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      19: invokevirtual #8                  // Method java/util/concurrent/TimeUnit.convert:(JLjava/util/concurrent/TimeUnit;)J
      22: lstore        6
      24: lload_0
      25: invokestatic  #2                  // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      28: lload         4
      30: lload         6
      32: invokedynamic #12,  0             // InvokeDynamic #3:apply:(JJ)Ljava/util/function/UnaryOperator;
      37: invokestatic  #4                  // InterfaceMethod java/util/stream/Stream.iterate:(Ljava/lang/Object;Ljava/util/function/UnaryOperator;)Ljava/util/stream/Stream;
      40: areturn

  public static java.util.stream.Stream<java.lang.Long> equalJittered(long, long);
    Code:
       0: getstatic     #6                  // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
       3: lload_0
       4: getstatic     #7                  // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
       7: invokevirtual #8                  // Method java/util/concurrent/TimeUnit.convert:(JLjava/util/concurrent/TimeUnit;)J
      10: lstore        4
      12: getstatic     #6                  // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      15: lload_2
      16: getstatic     #7                  // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      19: invokevirtual #8                  // Method java/util/concurrent/TimeUnit.convert:(JLjava/util/concurrent/TimeUnit;)J
      22: lstore        6
      24: new           #9                  // class java/util/concurrent/atomic/AtomicLong
      27: dup
      28: lconst_1
      29: invokespecial #10                 // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      32: astore        8
      34: lload_0
      35: invokestatic  #2                  // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      38: aload         8
      40: lload         4
      42: lload         6
      44: lload_2
      45: invokedynamic #13,  0             // InvokeDynamic #4:apply:(Ljava/util/concurrent/atomic/AtomicLong;JJJ)Ljava/util/function/UnaryOperator;
      50: invokestatic  #4                  // InterfaceMethod java/util/stream/Stream.iterate:(Ljava/lang/Object;Ljava/util/function/UnaryOperator;)Ljava/util/stream/Stream;
      53: areturn

  private static java.lang.Long lambda$equalJittered$4(java.util.concurrent.atomic.AtomicLong, long, long, long, java.lang.Long);
    Code:
       0: aload_0
       1: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       4: lconst_1
       5: lsub
       6: ldc2_w        #16                 // long 62l
       9: invokestatic  #18                 // Method java/lang/Math.min:(JJ)J
      12: lstore        8
      14: lload_1
      15: lconst_1
      16: lload         8
      18: l2i
      19: lshl
      20: lmul
      21: lstore        10
      23: lload         10
      25: invokestatic  #19                 // Method java/util/concurrent/ThreadLocalRandom.current:()Ljava/util/concurrent/ThreadLocalRandom;
      28: lload         10
      30: invokevirtual #20                 // Method java/util/concurrent/ThreadLocalRandom.nextLong:(J)J
      33: ladd
      34: lstore        12
      36: aload_0
      37: invokevirtual #21                 // Method java/util/concurrent/atomic/AtomicLong.incrementAndGet:()J
      40: pop2
      41: lload         12
      43: lload_3
      44: lcmp
      45: ifge          63
      48: getstatic     #7                  // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      51: lload         12
      53: getstatic     #6                  // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      56: invokevirtual #8                  // Method java/util/concurrent/TimeUnit.convert:(JLjava/util/concurrent/TimeUnit;)J
      59: invokestatic  #2                  // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      62: areturn
      63: lload         5
      65: invokestatic  #2                  // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      68: areturn

  private static java.lang.Long lambda$decorrelatedJittered$3(long, long, java.lang.Long);
    Code:
       0: getstatic     #7                  // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
       3: aload         4
       5: invokevirtual #22                 // Method java/lang/Long.longValue:()J
       8: getstatic     #6                  // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      11: invokevirtual #8                  // Method java/util/concurrent/TimeUnit.convert:(JLjava/util/concurrent/TimeUnit;)J
      14: lstore        5
      16: lload         5
      18: ldc2_w        #23                 // long 3l
      21: lmul
      22: lload_0
      23: lsub
      24: invokestatic  #25                 // Method java/lang/Math.abs:(J)J
      27: lstore        7
      29: lconst_0
      30: lload         7
      32: lcmp
      33: ifne          42
      36: lload_0
      37: lstore        9
      39: goto          54
      42: lload_0
      43: invokestatic  #19                 // Method java/util/concurrent/ThreadLocalRandom.current:()Ljava/util/concurrent/ThreadLocalRandom;
      46: lload         7
      48: invokevirtual #20                 // Method java/util/concurrent/ThreadLocalRandom.nextLong:(J)J
      51: ladd
      52: lstore        9
      54: lload_2
      55: lload         9
      57: invokestatic  #18                 // Method java/lang/Math.min:(JJ)J
      60: lstore        11
      62: getstatic     #7                  // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      65: lload         11
      67: getstatic     #6                  // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      70: invokevirtual #8                  // Method java/util/concurrent/TimeUnit.convert:(JLjava/util/concurrent/TimeUnit;)J
      73: invokestatic  #2                  // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      76: areturn

  private static java.lang.Long lambda$exponentialJittered$2(java.util.concurrent.atomic.AtomicLong, long, long, java.lang.Long);
    Code:
       0: aload_0
       1: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       4: ldc2_w        #16                 // long 62l
       7: invokestatic  #18                 // Method java/lang/Math.min:(JJ)J
      10: lstore        6
      12: lload_1
      13: lload_3
      14: lconst_1
      15: lload         6
      17: l2i
      18: lshl
      19: lmul
      20: invokestatic  #18                 // Method java/lang/Math.min:(JJ)J
      23: lstore        8
      25: getstatic     #7                  // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      28: invokestatic  #19                 // Method java/util/concurrent/ThreadLocalRandom.current:()Ljava/util/concurrent/ThreadLocalRandom;
      31: lload_3
      32: lload         8
      34: invokevirtual #26                 // Method java/util/concurrent/ThreadLocalRandom.nextLong:(JJ)J
      37: getstatic     #6                  // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      40: invokevirtual #8                  // Method java/util/concurrent/TimeUnit.convert:(JLjava/util/concurrent/TimeUnit;)J
      43: lstore        10
      45: aload_0
      46: invokevirtual #21                 // Method java/util/concurrent/atomic/AtomicLong.incrementAndGet:()J
      49: pop2
      50: lload         10
      52: invokestatic  #2                  // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      55: areturn

  private static java.lang.Long lambda$exponential$1(int, long, java.lang.Long);
    Code:
       0: aload_3
       1: invokevirtual #22                 // Method java/lang/Long.longValue:()J
       4: iload_0
       5: i2l
       6: lmul
       7: lload_1
       8: invokestatic  #18                 // Method java/lang/Math.min:(JJ)J
      11: invokestatic  #2                  // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      14: areturn

  private static java.lang.Long lambda$constant$0(long, java.lang.Long);
    Code:
       0: lload_0
       1: invokestatic  #2                  // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
       4: areturn

  static {};
    Code:
       0: getstatic     #27                 // Field org/apache/bookkeeper/common/util/Backoff$Jitter$Type.EXPONENTIAL:Lorg/apache/bookkeeper/common/util/Backoff$Jitter$Type;
       3: ldc2_w        #28                 // long 200l
       6: ldc2_w        #30                 // long 2000l
       9: ldc2_w        #23                 // long 3l
      12: invokestatic  #32                 // Method org/apache/bookkeeper/common/util/Backoff$Jitter.of:(Lorg/apache/bookkeeper/common/util/Backoff$Jitter$Type;JJJ)Lorg/apache/bookkeeper/common/util/Backoff$Jitter;
      15: putstatic     #33                 // Field DEFAULT:Lorg/apache/bookkeeper/common/util/Backoff$Policy;
      18: return
}
