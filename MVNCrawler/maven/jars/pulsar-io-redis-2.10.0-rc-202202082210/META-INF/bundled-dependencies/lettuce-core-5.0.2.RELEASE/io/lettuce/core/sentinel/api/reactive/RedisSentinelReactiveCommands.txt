Compiled from "RedisSentinelReactiveCommands.java"
public interface io.lettuce.core.sentinel.api.reactive.RedisSentinelReactiveCommands<K, V> {
  public abstract reactor.core.publisher.Mono<java.net.SocketAddress> getMasterAddrByName(K);

  public abstract reactor.core.publisher.Flux<java.util.Map<K, V>> masters();

  public abstract reactor.core.publisher.Mono<java.util.Map<K, V>> master(K);

  public abstract reactor.core.publisher.Flux<java.util.Map<K, V>> slaves(K);

  public abstract reactor.core.publisher.Mono<java.lang.Long> reset(K);

  public abstract reactor.core.publisher.Mono<java.lang.String> failover(K);

  public abstract reactor.core.publisher.Mono<java.lang.String> monitor(K, java.lang.String, int, int);

  public abstract reactor.core.publisher.Mono<java.lang.String> set(K, java.lang.String, V);

  public abstract reactor.core.publisher.Mono<java.lang.String> remove(K);

  public abstract reactor.core.publisher.Mono<K> clientGetname();

  public abstract reactor.core.publisher.Mono<java.lang.String> clientSetname(K);

  public abstract reactor.core.publisher.Mono<java.lang.String> clientKill(java.lang.String);

  public abstract reactor.core.publisher.Mono<java.lang.Long> clientKill(io.lettuce.core.KillArgs);

  public abstract reactor.core.publisher.Mono<java.lang.String> clientPause(long);

  public abstract reactor.core.publisher.Mono<java.lang.String> clientList();

  public abstract reactor.core.publisher.Mono<java.lang.String> info();

  public abstract reactor.core.publisher.Mono<java.lang.String> info(java.lang.String);

  public abstract reactor.core.publisher.Mono<java.lang.String> ping();

  public abstract boolean isOpen();

  public abstract io.lettuce.core.sentinel.api.StatefulRedisSentinelConnection<K, V> getStatefulConnection();
}
