Compiled from "SharedLock.java"
class io.lettuce.core.protocol.SharedLock {
  private final java.util.concurrent.atomic.AtomicLong writers;

  private volatile java.lang.Thread exclusiveLockOwner;

  io.lettuce.core.protocol.SharedLock();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/atomic/AtomicLong
       8: dup
       9: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicLong."<init>":()V
      12: putfield      #4                  // Field writers:Ljava/util/concurrent/atomic/AtomicLong;
      15: return

  void incrementWriters();
    Code:
       0: aload_0
       1: getfield      #5                  // Field exclusiveLockOwner:Ljava/lang/Thread;
       4: invokestatic  #6                  // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       7: if_acmpne     11
      10: return
      11: aload_0
      12: dup
      13: astore_1
      14: monitorenter
      15: aload_0
      16: getfield      #4                  // Field writers:Ljava/util/concurrent/atomic/AtomicLong;
      19: invokevirtual #7                  // Method java/util/concurrent/atomic/AtomicLong.get:()J
      22: lconst_0
      23: lcmp
      24: iflt          15
      27: aload_0
      28: getfield      #4                  // Field writers:Ljava/util/concurrent/atomic/AtomicLong;
      31: invokevirtual #8                  // Method java/util/concurrent/atomic/AtomicLong.incrementAndGet:()J
      34: pop2
      35: aload_1
      36: monitorexit
      37: return
      38: astore_2
      39: aload_1
      40: monitorexit
      41: aload_2
      42: athrow
    Exception table:
       from    to  target type
          15    37    38   any
          38    41    38   any

  void decrementWriters();
    Code:
       0: aload_0
       1: getfield      #5                  // Field exclusiveLockOwner:Ljava/lang/Thread;
       4: invokestatic  #6                  // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       7: if_acmpne     11
      10: return
      11: aload_0
      12: getfield      #4                  // Field writers:Ljava/util/concurrent/atomic/AtomicLong;
      15: invokevirtual #9                  // Method java/util/concurrent/atomic/AtomicLong.decrementAndGet:()J
      18: pop2
      19: return

  void doExclusive(java.lang.Runnable);
    Code:
       0: aload_1
       1: ldc           #10                 // String Runnable must not be null
       3: invokestatic  #11                 // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: invokedynamic #12,  0             // InvokeDynamic #0:get:(Ljava/lang/Runnable;)Ljava/util/function/Supplier;
      13: invokevirtual #13                 // Method doExclusive:(Ljava/util/function/Supplier;)Ljava/lang/Object;
      16: pop
      17: return

  <T> T doExclusive(java.util.function.Supplier<T>);
    Code:
       0: aload_1
       1: ldc           #14                 // String Supplier must not be null
       3: invokestatic  #11                 // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: dup
       8: astore_2
       9: monitorenter
      10: aload_0
      11: invokespecial #15                 // Method lockWritersExclusive:()V
      14: aload_1
      15: invokeinterface #16,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      20: astore_3
      21: aload_0
      22: invokespecial #17                 // Method unlockWritersExclusive:()V
      25: aload_2
      26: monitorexit
      27: aload_3
      28: areturn
      29: astore        4
      31: aload_0
      32: invokespecial #17                 // Method unlockWritersExclusive:()V
      35: aload         4
      37: athrow
      38: astore        5
      40: aload_2
      41: monitorexit
      42: aload         5
      44: athrow
    Exception table:
       from    to  target type
          10    21    29   any
          29    31    29   any
          10    27    38   any
          29    42    38   any

  private void lockWritersExclusive();
    Code:
       0: aload_0
       1: getfield      #5                  // Field exclusiveLockOwner:Ljava/lang/Thread;
       4: invokestatic  #6                  // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       7: if_acmpne     19
      10: aload_0
      11: getfield      #4                  // Field writers:Ljava/util/concurrent/atomic/AtomicLong;
      14: invokevirtual #9                  // Method java/util/concurrent/atomic/AtomicLong.decrementAndGet:()J
      17: pop2
      18: return
      19: aload_0
      20: dup
      21: astore_1
      22: monitorenter
      23: aload_0
      24: getfield      #4                  // Field writers:Ljava/util/concurrent/atomic/AtomicLong;
      27: lconst_0
      28: ldc2_w        #18                 // long -1l
      31: invokevirtual #20                 // Method java/util/concurrent/atomic/AtomicLong.compareAndSet:(JJ)Z
      34: ifeq          23
      37: aload_0
      38: invokestatic  #6                  // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      41: putfield      #5                  // Field exclusiveLockOwner:Ljava/lang/Thread;
      44: aload_1
      45: monitorexit
      46: return
      47: astore_2
      48: aload_1
      49: monitorexit
      50: aload_2
      51: athrow
    Exception table:
       from    to  target type
          23    46    47   any
          47    50    47   any

  private void unlockWritersExclusive();
    Code:
       0: aload_0
       1: getfield      #5                  // Field exclusiveLockOwner:Ljava/lang/Thread;
       4: invokestatic  #6                  // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       7: if_acmpne     27
      10: aload_0
      11: getfield      #4                  // Field writers:Ljava/util/concurrent/atomic/AtomicLong;
      14: invokevirtual #8                  // Method java/util/concurrent/atomic/AtomicLong.incrementAndGet:()J
      17: lconst_0
      18: lcmp
      19: ifne          27
      22: aload_0
      23: aconst_null
      24: putfield      #5                  // Field exclusiveLockOwner:Ljava/lang/Thread;
      27: return

  private static java.lang.Object lambda$doExclusive$0(java.lang.Runnable);
    Code:
       0: aload_0
       1: invokeinterface #21,  1           // InterfaceMethod java/lang/Runnable.run:()V
       6: aconst_null
       7: areturn
}
