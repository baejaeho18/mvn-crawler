Compiled from "RedisSortedSetReactiveCommands.java"
public interface io.lettuce.core.api.reactive.RedisSortedSetReactiveCommands<K, V> {
  public abstract reactor.core.publisher.Mono<java.lang.Long> zadd(K, double, V);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zadd(K, java.lang.Object...);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zadd(K, io.lettuce.core.ScoredValue<V>...);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zadd(K, io.lettuce.core.ZAddArgs, double, V);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zadd(K, io.lettuce.core.ZAddArgs, java.lang.Object...);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zadd(K, io.lettuce.core.ZAddArgs, io.lettuce.core.ScoredValue<V>...);

  public abstract reactor.core.publisher.Mono<java.lang.Double> zaddincr(K, double, V);

  public abstract reactor.core.publisher.Mono<java.lang.Double> zaddincr(K, io.lettuce.core.ZAddArgs, double, V);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zcard(K);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zcount(K, double, double);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zcount(K, java.lang.String, java.lang.String);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zcount(K, io.lettuce.core.Range<? extends java.lang.Number>);

  public abstract reactor.core.publisher.Mono<java.lang.Double> zincrby(K, double, K);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zinterstore(K, K...);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zinterstore(K, io.lettuce.core.ZStoreArgs, K...);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zlexcount(K, java.lang.String, java.lang.String);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zlexcount(K, io.lettuce.core.Range<? extends V>);

  public abstract reactor.core.publisher.Flux<V> zrange(K, long, long);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zrange(io.lettuce.core.output.ValueStreamingChannel<V>, K, long, long);

  public abstract reactor.core.publisher.Flux<io.lettuce.core.ScoredValue<V>> zrangeWithScores(K, long, long);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zrangeWithScores(io.lettuce.core.output.ScoredValueStreamingChannel<V>, K, long, long);

  public abstract reactor.core.publisher.Flux<V> zrangebylex(K, java.lang.String, java.lang.String);

  public abstract reactor.core.publisher.Flux<V> zrangebylex(K, io.lettuce.core.Range<? extends V>);

  public abstract reactor.core.publisher.Flux<V> zrangebylex(K, java.lang.String, java.lang.String, long, long);

  public abstract reactor.core.publisher.Flux<V> zrangebylex(K, io.lettuce.core.Range<? extends V>, io.lettuce.core.Limit);

  public abstract reactor.core.publisher.Flux<V> zrangebyscore(K, double, double);

  public abstract reactor.core.publisher.Flux<V> zrangebyscore(K, java.lang.String, java.lang.String);

  public abstract reactor.core.publisher.Flux<V> zrangebyscore(K, io.lettuce.core.Range<? extends java.lang.Number>);

  public abstract reactor.core.publisher.Flux<V> zrangebyscore(K, double, double, long, long);

  public abstract reactor.core.publisher.Flux<V> zrangebyscore(K, java.lang.String, java.lang.String, long, long);

  public abstract reactor.core.publisher.Flux<V> zrangebyscore(K, io.lettuce.core.Range<? extends java.lang.Number>, io.lettuce.core.Limit);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zrangebyscore(io.lettuce.core.output.ValueStreamingChannel<V>, K, double, double);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zrangebyscore(io.lettuce.core.output.ValueStreamingChannel<V>, K, java.lang.String, java.lang.String);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zrangebyscore(io.lettuce.core.output.ValueStreamingChannel<V>, K, io.lettuce.core.Range<? extends java.lang.Number>);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zrangebyscore(io.lettuce.core.output.ValueStreamingChannel<V>, K, double, double, long, long);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zrangebyscore(io.lettuce.core.output.ValueStreamingChannel<V>, K, java.lang.String, java.lang.String, long, long);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zrangebyscore(io.lettuce.core.output.ValueStreamingChannel<V>, K, io.lettuce.core.Range<? extends java.lang.Number>, io.lettuce.core.Limit);

  public abstract reactor.core.publisher.Flux<io.lettuce.core.ScoredValue<V>> zrangebyscoreWithScores(K, double, double);

  public abstract reactor.core.publisher.Flux<io.lettuce.core.ScoredValue<V>> zrangebyscoreWithScores(K, java.lang.String, java.lang.String);

  public abstract reactor.core.publisher.Flux<io.lettuce.core.ScoredValue<V>> zrangebyscoreWithScores(K, io.lettuce.core.Range<? extends java.lang.Number>);

  public abstract reactor.core.publisher.Flux<io.lettuce.core.ScoredValue<V>> zrangebyscoreWithScores(K, double, double, long, long);

  public abstract reactor.core.publisher.Flux<io.lettuce.core.ScoredValue<V>> zrangebyscoreWithScores(K, java.lang.String, java.lang.String, long, long);

  public abstract reactor.core.publisher.Flux<io.lettuce.core.ScoredValue<V>> zrangebyscoreWithScores(K, io.lettuce.core.Range<? extends java.lang.Number>, io.lettuce.core.Limit);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zrangebyscoreWithScores(io.lettuce.core.output.ScoredValueStreamingChannel<V>, K, double, double);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zrangebyscoreWithScores(io.lettuce.core.output.ScoredValueStreamingChannel<V>, K, java.lang.String, java.lang.String);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zrangebyscoreWithScores(io.lettuce.core.output.ScoredValueStreamingChannel<V>, K, io.lettuce.core.Range<? extends java.lang.Number>);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zrangebyscoreWithScores(io.lettuce.core.output.ScoredValueStreamingChannel<V>, K, double, double, long, long);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zrangebyscoreWithScores(io.lettuce.core.output.ScoredValueStreamingChannel<V>, K, java.lang.String, java.lang.String, long, long);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zrangebyscoreWithScores(io.lettuce.core.output.ScoredValueStreamingChannel<V>, K, io.lettuce.core.Range<? extends java.lang.Number>, io.lettuce.core.Limit);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zrank(K, V);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zrem(K, V...);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zremrangebylex(K, java.lang.String, java.lang.String);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zremrangebylex(K, io.lettuce.core.Range<? extends V>);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zremrangebyrank(K, long, long);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zremrangebyscore(K, double, double);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zremrangebyscore(K, java.lang.String, java.lang.String);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zremrangebyscore(K, io.lettuce.core.Range<? extends java.lang.Number>);

  public abstract reactor.core.publisher.Flux<V> zrevrange(K, long, long);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zrevrange(io.lettuce.core.output.ValueStreamingChannel<V>, K, long, long);

  public abstract reactor.core.publisher.Flux<io.lettuce.core.ScoredValue<V>> zrevrangeWithScores(K, long, long);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zrevrangeWithScores(io.lettuce.core.output.ScoredValueStreamingChannel<V>, K, long, long);

  public abstract reactor.core.publisher.Flux<V> zrevrangebylex(K, io.lettuce.core.Range<? extends V>);

  public abstract reactor.core.publisher.Flux<V> zrevrangebylex(K, io.lettuce.core.Range<? extends V>, io.lettuce.core.Limit);

  public abstract reactor.core.publisher.Flux<V> zrevrangebyscore(K, double, double);

  public abstract reactor.core.publisher.Flux<V> zrevrangebyscore(K, java.lang.String, java.lang.String);

  public abstract reactor.core.publisher.Flux<V> zrevrangebyscore(K, io.lettuce.core.Range<? extends java.lang.Number>);

  public abstract reactor.core.publisher.Flux<V> zrevrangebyscore(K, double, double, long, long);

  public abstract reactor.core.publisher.Flux<V> zrevrangebyscore(K, java.lang.String, java.lang.String, long, long);

  public abstract reactor.core.publisher.Flux<V> zrevrangebyscore(K, io.lettuce.core.Range<? extends java.lang.Number>, io.lettuce.core.Limit);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zrevrangebyscore(io.lettuce.core.output.ValueStreamingChannel<V>, K, double, double);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zrevrangebyscore(io.lettuce.core.output.ValueStreamingChannel<V>, K, java.lang.String, java.lang.String);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zrevrangebyscore(io.lettuce.core.output.ValueStreamingChannel<V>, K, io.lettuce.core.Range<? extends java.lang.Number>);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zrevrangebyscore(io.lettuce.core.output.ValueStreamingChannel<V>, K, double, double, long, long);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zrevrangebyscore(io.lettuce.core.output.ValueStreamingChannel<V>, K, java.lang.String, java.lang.String, long, long);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zrevrangebyscore(io.lettuce.core.output.ValueStreamingChannel<V>, K, io.lettuce.core.Range<? extends java.lang.Number>, io.lettuce.core.Limit);

  public abstract reactor.core.publisher.Flux<io.lettuce.core.ScoredValue<V>> zrevrangebyscoreWithScores(K, double, double);

  public abstract reactor.core.publisher.Flux<io.lettuce.core.ScoredValue<V>> zrevrangebyscoreWithScores(K, java.lang.String, java.lang.String);

  public abstract reactor.core.publisher.Flux<io.lettuce.core.ScoredValue<V>> zrevrangebyscoreWithScores(K, io.lettuce.core.Range<? extends java.lang.Number>);

  public abstract reactor.core.publisher.Flux<io.lettuce.core.ScoredValue<V>> zrevrangebyscoreWithScores(K, double, double, long, long);

  public abstract reactor.core.publisher.Flux<io.lettuce.core.ScoredValue<V>> zrevrangebyscoreWithScores(K, java.lang.String, java.lang.String, long, long);

  public abstract reactor.core.publisher.Flux<io.lettuce.core.ScoredValue<V>> zrevrangebyscoreWithScores(K, io.lettuce.core.Range<? extends java.lang.Number>, io.lettuce.core.Limit);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zrevrangebyscoreWithScores(io.lettuce.core.output.ScoredValueStreamingChannel<V>, K, double, double);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zrevrangebyscoreWithScores(io.lettuce.core.output.ScoredValueStreamingChannel<V>, K, java.lang.String, java.lang.String);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zrevrangebyscoreWithScores(io.lettuce.core.output.ScoredValueStreamingChannel<V>, K, io.lettuce.core.Range<? extends java.lang.Number>);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zrevrangebyscoreWithScores(io.lettuce.core.output.ScoredValueStreamingChannel<V>, K, double, double, long, long);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zrevrangebyscoreWithScores(io.lettuce.core.output.ScoredValueStreamingChannel<V>, K, java.lang.String, java.lang.String, long, long);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zrevrangebyscoreWithScores(io.lettuce.core.output.ScoredValueStreamingChannel<V>, K, io.lettuce.core.Range<? extends java.lang.Number>, io.lettuce.core.Limit);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zrevrank(K, V);

  public abstract reactor.core.publisher.Mono<io.lettuce.core.ScoredValueScanCursor<V>> zscan(K);

  public abstract reactor.core.publisher.Mono<io.lettuce.core.ScoredValueScanCursor<V>> zscan(K, io.lettuce.core.ScanArgs);

  public abstract reactor.core.publisher.Mono<io.lettuce.core.ScoredValueScanCursor<V>> zscan(K, io.lettuce.core.ScanCursor, io.lettuce.core.ScanArgs);

  public abstract reactor.core.publisher.Mono<io.lettuce.core.ScoredValueScanCursor<V>> zscan(K, io.lettuce.core.ScanCursor);

  public abstract reactor.core.publisher.Mono<io.lettuce.core.StreamScanCursor> zscan(io.lettuce.core.output.ScoredValueStreamingChannel<V>, K);

  public abstract reactor.core.publisher.Mono<io.lettuce.core.StreamScanCursor> zscan(io.lettuce.core.output.ScoredValueStreamingChannel<V>, K, io.lettuce.core.ScanArgs);

  public abstract reactor.core.publisher.Mono<io.lettuce.core.StreamScanCursor> zscan(io.lettuce.core.output.ScoredValueStreamingChannel<V>, K, io.lettuce.core.ScanCursor, io.lettuce.core.ScanArgs);

  public abstract reactor.core.publisher.Mono<io.lettuce.core.StreamScanCursor> zscan(io.lettuce.core.output.ScoredValueStreamingChannel<V>, K, io.lettuce.core.ScanCursor);

  public abstract reactor.core.publisher.Mono<java.lang.Double> zscore(K, V);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zunionstore(K, K...);

  public abstract reactor.core.publisher.Mono<java.lang.Long> zunionstore(K, io.lettuce.core.ZStoreArgs, K...);
}
