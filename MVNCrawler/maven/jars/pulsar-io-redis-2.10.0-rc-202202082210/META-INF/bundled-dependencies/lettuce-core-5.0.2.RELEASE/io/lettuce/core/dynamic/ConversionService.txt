Compiled from "ConversionService.java"
class io.lettuce.core.dynamic.ConversionService {
  private java.util.Map<io.lettuce.core.dynamic.ConversionService$ConvertiblePair, java.util.function.Function<?, ?>> converterMap;

  io.lettuce.core.dynamic.ConversionService();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/HashMap
       8: dup
       9: bipush        10
      11: invokespecial #3                  // Method java/util/HashMap."<init>":(I)V
      14: putfield      #4                  // Field converterMap:Ljava/util/Map;
      17: return

  public void addConverter(java.util.function.Function<?, ?>);
    Code:
       0: aload_1
       1: ldc           #5                  // String Converter must not be null
       3: invokestatic  #6                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_1
       7: invokevirtual #7                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
      10: invokestatic  #8                  // Method io/lettuce/core/dynamic/support/ClassTypeInformation.from:(Ljava/lang/Class;)Lio/lettuce/core/dynamic/support/ClassTypeInformation;
      13: astore_2
      14: aload_2
      15: ldc           #9                  // class java/util/function/Function
      17: invokevirtual #10                 // Method io/lettuce/core/dynamic/support/ClassTypeInformation.getSuperTypeInformation:(Ljava/lang/Class;)Lio/lettuce/core/dynamic/support/TypeInformation;
      20: astore_3
      21: aload_3
      22: invokeinterface #11,  1           // InterfaceMethod io/lettuce/core/dynamic/support/TypeInformation.getTypeArguments:()Ljava/util/List;
      27: astore        4
      29: new           #12                 // class io/lettuce/core/dynamic/ConversionService$ConvertiblePair
      32: dup
      33: aload_0
      34: aload         4
      36: iconst_0
      37: invokeinterface #13,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      42: checkcast     #14                 // class io/lettuce/core/dynamic/support/TypeInformation
      45: invokeinterface #15,  1           // InterfaceMethod io/lettuce/core/dynamic/support/TypeInformation.getType:()Ljava/lang/Class;
      50: aload         4
      52: iconst_1
      53: invokeinterface #13,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      58: checkcast     #14                 // class io/lettuce/core/dynamic/support/TypeInformation
      61: invokeinterface #15,  1           // InterfaceMethod io/lettuce/core/dynamic/support/TypeInformation.getType:()Ljava/lang/Class;
      66: invokespecial #16                 // Method io/lettuce/core/dynamic/ConversionService$ConvertiblePair."<init>":(Lio/lettuce/core/dynamic/ConversionService;Ljava/lang/Class;Ljava/lang/Class;)V
      69: astore        5
      71: aload_0
      72: getfield      #4                  // Field converterMap:Ljava/util/Map;
      75: aload         5
      77: aload_1
      78: invokeinterface #17,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      83: pop
      84: return

  public <S, T> T convert(S, java.lang.Class<T>);
    Code:
       0: aload_1
       1: ldc           #18                 // String Source must not be null
       3: invokestatic  #6                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: invokevirtual #7                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
      11: aload_2
      12: invokevirtual #19                 // Method getConverter:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/function/Function;
      15: aload_1
      16: invokeinterface #20,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      21: areturn

  public <S, T> boolean canConvert(java.lang.Class<S>, java.lang.Class<T>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #21                 // Method findConverter:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/Optional;
       6: invokevirtual #22                 // Method java/util/Optional.isPresent:()Z
       9: ireturn

  java.util.function.Function<java.lang.Object, java.lang.Object> getConverter(java.lang.Class<?>, java.lang.Class<?>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #21                 // Method findConverter:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/Optional;
       6: aload_1
       7: aload_2
       8: invokedynamic #23,  0             // InvokeDynamic #0:get:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/function/Supplier;
      13: invokevirtual #24                 // Method java/util/Optional.orElseThrow:(Ljava/util/function/Supplier;)Ljava/lang/Object;
      16: checkcast     #9                  // class java/util/function/Function
      19: areturn

  private java.util.Optional<java.util.function.Function<java.lang.Object, java.lang.Object>> findConverter(java.lang.Class<?>, java.lang.Class<?>);
    Code:
       0: aload_1
       1: ldc           #25                 // String Source type must not be null
       3: invokestatic  #6                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_2
       7: ldc           #26                 // String Target type must not be null
       9: invokestatic  #6                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      12: aload_0
      13: getfield      #4                  // Field converterMap:Ljava/util/Map;
      16: invokeinterface #27,  1           // InterfaceMethod java/util/Map.keySet:()Ljava/util/Set;
      21: invokeinterface #28,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      26: astore_3
      27: aload_3
      28: invokeinterface #29,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      33: ifeq          92
      36: aload_3
      37: invokeinterface #30,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      42: checkcast     #12                 // class io/lettuce/core/dynamic/ConversionService$ConvertiblePair
      45: astore        4
      47: aload         4
      49: invokevirtual #31                 // Method io/lettuce/core/dynamic/ConversionService$ConvertiblePair.getSourceType:()Ljava/lang/Class;
      52: aload_1
      53: invokevirtual #32                 // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
      56: ifeq          89
      59: aload_2
      60: aload         4
      62: invokevirtual #33                 // Method io/lettuce/core/dynamic/ConversionService$ConvertiblePair.getTargetType:()Ljava/lang/Class;
      65: invokevirtual #32                 // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
      68: ifeq          89
      71: aload_0
      72: getfield      #4                  // Field converterMap:Ljava/util/Map;
      75: aload         4
      77: invokeinterface #34,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      82: checkcast     #9                  // class java/util/function/Function
      85: invokestatic  #35                 // Method java/util/Optional.of:(Ljava/lang/Object;)Ljava/util/Optional;
      88: areturn
      89: goto          27
      92: invokestatic  #36                 // Method java/util/Optional.empty:()Ljava/util/Optional;
      95: areturn

  private static java.lang.IllegalArgumentException lambda$getConverter$0(java.lang.Class, java.lang.Class);
    Code:
       0: new           #37                 // class java/lang/IllegalArgumentException
       3: dup
       4: ldc           #38                 // String No converter found for %s to %s conversion
       6: iconst_2
       7: anewarray     #39                 // class java/lang/Object
      10: dup
      11: iconst_0
      12: aload_0
      13: invokevirtual #40                 // Method java/lang/Class.getName:()Ljava/lang/String;
      16: aastore
      17: dup
      18: iconst_1
      19: aload_1
      20: invokevirtual #40                 // Method java/lang/Class.getName:()Ljava/lang/String;
      23: aastore
      24: invokestatic  #41                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      27: invokespecial #42                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      30: areturn
}
