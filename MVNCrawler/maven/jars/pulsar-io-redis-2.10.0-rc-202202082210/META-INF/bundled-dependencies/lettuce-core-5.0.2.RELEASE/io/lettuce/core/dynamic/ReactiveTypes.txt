Compiled from "ReactiveTypes.java"
class io.lettuce.core.dynamic.ReactiveTypes {
  private static final boolean PROJECT_REACTOR_PRESENT;

  private static final boolean RXJAVA1_PRESENT;

  private static final boolean RXJAVA2_PRESENT;

  private static final java.util.Map<java.lang.Class<?>, io.lettuce.core.dynamic.ReactiveTypes$Descriptor> REACTIVE_WRAPPERS;

  io.lettuce.core.dynamic.ReactiveTypes();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static boolean isAvailable();
    Code:
       0: getstatic     #2                  // Field io/lettuce/core/dynamic/ReactiveTypes$ReactiveLibrary.PROJECT_REACTOR:Lio/lettuce/core/dynamic/ReactiveTypes$ReactiveLibrary;
       3: invokestatic  #3                  // Method isAvailable:(Lio/lettuce/core/dynamic/ReactiveTypes$ReactiveLibrary;)Z
       6: ifne          27
       9: getstatic     #4                  // Field io/lettuce/core/dynamic/ReactiveTypes$ReactiveLibrary.RXJAVA1:Lio/lettuce/core/dynamic/ReactiveTypes$ReactiveLibrary;
      12: invokestatic  #3                  // Method isAvailable:(Lio/lettuce/core/dynamic/ReactiveTypes$ReactiveLibrary;)Z
      15: ifne          27
      18: getstatic     #5                  // Field io/lettuce/core/dynamic/ReactiveTypes$ReactiveLibrary.RXJAVA2:Lio/lettuce/core/dynamic/ReactiveTypes$ReactiveLibrary;
      21: invokestatic  #3                  // Method isAvailable:(Lio/lettuce/core/dynamic/ReactiveTypes$ReactiveLibrary;)Z
      24: ifeq          31
      27: iconst_1
      28: goto          32
      31: iconst_0
      32: ireturn

  public static boolean isAvailable(io.lettuce.core.dynamic.ReactiveTypes$ReactiveLibrary);
    Code:
       0: aload_0
       1: ldc           #6                  // String ReactiveLibrary must not be null!
       3: invokestatic  #7                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: getstatic     #8                  // Field io/lettuce/core/dynamic/ReactiveTypes$1.$SwitchMap$io$lettuce$core$dynamic$ReactiveTypes$ReactiveLibrary:[I
       9: aload_0
      10: invokevirtual #9                  // Method io/lettuce/core/dynamic/ReactiveTypes$ReactiveLibrary.ordinal:()I
      13: iaload
      14: tableswitch   { // 1 to 3
                     1: 40
                     2: 44
                     3: 48
               default: 52
          }
      40: getstatic     #10                 // Field PROJECT_REACTOR_PRESENT:Z
      43: ireturn
      44: getstatic     #11                 // Field RXJAVA1_PRESENT:Z
      47: ireturn
      48: getstatic     #12                 // Field RXJAVA2_PRESENT:Z
      51: ireturn
      52: new           #13                 // class java/lang/IllegalArgumentException
      55: dup
      56: ldc           #14                 // String ReactiveLibrary %s not supported
      58: iconst_1
      59: anewarray     #15                 // class java/lang/Object
      62: dup
      63: iconst_0
      64: aload_0
      65: aastore
      66: invokestatic  #16                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      69: invokespecial #17                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      72: athrow

  public static boolean supports(java.lang.Class<?>);
    Code:
       0: aload_0
       1: invokestatic  #18                 // Method isNoValueType:(Ljava/lang/Class;)Z
       4: ifne          21
       7: aload_0
       8: invokestatic  #19                 // Method isSingleValueType:(Ljava/lang/Class;)Z
      11: ifne          21
      14: aload_0
      15: invokestatic  #20                 // Method isMultiValueType:(Ljava/lang/Class;)Z
      18: ifeq          25
      21: iconst_1
      22: goto          26
      25: iconst_0
      26: ireturn

  public static boolean isNoValueType(java.lang.Class<?>);
    Code:
       0: aload_0
       1: ldc           #21                 // String Class must not be null!
       3: invokestatic  #7                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: invokestatic  #22                 // Method findDescriptor:(Ljava/lang/Class;)Ljava/util/Optional;
      10: invokedynamic #23,  0             // InvokeDynamic #0:apply:()Ljava/util/function/Function;
      15: invokevirtual #24                 // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
      18: iconst_0
      19: invokestatic  #25                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      22: invokevirtual #26                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      25: checkcast     #27                 // class java/lang/Boolean
      28: invokevirtual #28                 // Method java/lang/Boolean.booleanValue:()Z
      31: ireturn

  public static boolean isSingleValueType(java.lang.Class<?>);
    Code:
       0: aload_0
       1: ldc           #21                 // String Class must not be null!
       3: invokestatic  #7                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: invokestatic  #22                 // Method findDescriptor:(Ljava/lang/Class;)Ljava/util/Optional;
      10: invokedynamic #29,  0             // InvokeDynamic #1:apply:()Ljava/util/function/Function;
      15: invokevirtual #24                 // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
      18: iconst_0
      19: invokestatic  #25                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      22: invokevirtual #26                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      25: checkcast     #27                 // class java/lang/Boolean
      28: invokevirtual #28                 // Method java/lang/Boolean.booleanValue:()Z
      31: ireturn

  public static boolean isMultiValueType(java.lang.Class<?>);
    Code:
       0: aload_0
       1: ldc           #21                 // String Class must not be null!
       3: invokestatic  #7                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: invokestatic  #19                 // Method isSingleValueType:(Ljava/lang/Class;)Z
      10: ifeq          15
      13: iconst_0
      14: ireturn
      15: aload_0
      16: invokestatic  #22                 // Method findDescriptor:(Ljava/lang/Class;)Ljava/util/Optional;
      19: invokedynamic #30,  0             // InvokeDynamic #2:apply:()Ljava/util/function/Function;
      24: invokevirtual #24                 // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
      27: iconst_0
      28: invokestatic  #25                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      31: invokevirtual #26                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      34: checkcast     #27                 // class java/lang/Boolean
      37: invokevirtual #28                 // Method java/lang/Boolean.booleanValue:()Z
      40: ireturn

  public static java.util.Collection<java.lang.Class<?>> getNoValueTypes();
    Code:
       0: getstatic     #31                 // Field REACTIVE_WRAPPERS:Ljava/util/Map;
       3: invokeinterface #32,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
       8: invokeinterface #33,  1           // InterfaceMethod java/util/Set.stream:()Ljava/util/stream/Stream;
      13: invokedynamic #34,  0             // InvokeDynamic #3:test:()Ljava/util/function/Predicate;
      18: invokeinterface #35,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      23: invokedynamic #36,  0             // InvokeDynamic #4:apply:()Ljava/util/function/Function;
      28: invokeinterface #37,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      33: invokestatic  #38                 // Method java/util/stream/Collectors.toList:()Ljava/util/stream/Collector;
      36: invokeinterface #39,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      41: checkcast     #40                 // class java/util/Collection
      44: areturn

  public static java.util.Collection<java.lang.Class<?>> getSingleValueTypes();
    Code:
       0: getstatic     #31                 // Field REACTIVE_WRAPPERS:Ljava/util/Map;
       3: invokeinterface #32,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
       8: invokeinterface #33,  1           // InterfaceMethod java/util/Set.stream:()Ljava/util/stream/Stream;
      13: invokedynamic #41,  0             // InvokeDynamic #5:test:()Ljava/util/function/Predicate;
      18: invokeinterface #35,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      23: invokedynamic #36,  0             // InvokeDynamic #4:apply:()Ljava/util/function/Function;
      28: invokeinterface #37,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      33: invokestatic  #38                 // Method java/util/stream/Collectors.toList:()Ljava/util/stream/Collector;
      36: invokeinterface #39,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      41: checkcast     #40                 // class java/util/Collection
      44: areturn

  public static java.util.Collection<java.lang.Class<?>> getMultiValueTypes();
    Code:
       0: getstatic     #31                 // Field REACTIVE_WRAPPERS:Ljava/util/Map;
       3: invokeinterface #32,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
       8: invokeinterface #33,  1           // InterfaceMethod java/util/Set.stream:()Ljava/util/stream/Stream;
      13: invokedynamic #42,  0             // InvokeDynamic #6:test:()Ljava/util/function/Predicate;
      18: invokeinterface #35,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      23: invokedynamic #36,  0             // InvokeDynamic #4:apply:()Ljava/util/function/Function;
      28: invokeinterface #37,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      33: invokestatic  #38                 // Method java/util/stream/Collectors.toList:()Ljava/util/stream/Collector;
      36: invokeinterface #39,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      41: checkcast     #40                 // class java/util/Collection
      44: areturn

  private static java.util.Optional<io.lettuce.core.dynamic.ReactiveTypes$Descriptor> findDescriptor(java.lang.Class<?>);
    Code:
       0: getstatic     #31                 // Field REACTIVE_WRAPPERS:Ljava/util/Map;
       3: invokeinterface #43,  1           // InterfaceMethod java/util/Map.keySet:()Ljava/util/Set;
       8: invokeinterface #44,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      13: astore_1
      14: aload_1
      15: invokeinterface #45,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      20: ifeq          57
      23: aload_1
      24: invokeinterface #46,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      29: checkcast     #47                 // class java/lang/Class
      32: astore_2
      33: aload_2
      34: aload_0
      35: invokestatic  #48                 // Method io/lettuce/core/internal/LettuceClassUtils.isAssignable:(Ljava/lang/Class;Ljava/lang/Class;)Z
      38: ifeq          54
      41: getstatic     #31                 // Field REACTIVE_WRAPPERS:Ljava/util/Map;
      44: aload_2
      45: invokeinterface #49,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      50: invokestatic  #50                 // Method java/util/Optional.ofNullable:(Ljava/lang/Object;)Ljava/util/Optional;
      53: areturn
      54: goto          14
      57: invokestatic  #51                 // Method java/util/Optional.empty:()Ljava/util/Optional;
      60: areturn

  private static boolean lambda$getMultiValueTypes$3(java.util.Map$Entry);
    Code:
       0: aload_0
       1: invokeinterface #52,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
       6: checkcast     #53                 // class io/lettuce/core/dynamic/ReactiveTypes$Descriptor
       9: invokevirtual #54                 // Method io/lettuce/core/dynamic/ReactiveTypes$Descriptor.isMultiValue:()Z
      12: ireturn

  private static boolean lambda$getSingleValueTypes$2(java.util.Map$Entry);
    Code:
       0: aload_0
       1: invokeinterface #52,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
       6: checkcast     #53                 // class io/lettuce/core/dynamic/ReactiveTypes$Descriptor
       9: invokevirtual #54                 // Method io/lettuce/core/dynamic/ReactiveTypes$Descriptor.isMultiValue:()Z
      12: ifne          19
      15: iconst_1
      16: goto          20
      19: iconst_0
      20: ireturn

  private static boolean lambda$getNoValueTypes$1(java.util.Map$Entry);
    Code:
       0: aload_0
       1: invokeinterface #52,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
       6: checkcast     #53                 // class io/lettuce/core/dynamic/ReactiveTypes$Descriptor
       9: invokevirtual #55                 // Method io/lettuce/core/dynamic/ReactiveTypes$Descriptor.isNoValue:()Z
      12: ireturn

  private static java.lang.Boolean lambda$isSingleValueType$0(io.lettuce.core.dynamic.ReactiveTypes$Descriptor);
    Code:
       0: aload_0
       1: invokevirtual #54                 // Method io/lettuce/core/dynamic/ReactiveTypes$Descriptor.isMultiValue:()Z
       4: ifne          18
       7: aload_0
       8: invokevirtual #55                 // Method io/lettuce/core/dynamic/ReactiveTypes$Descriptor.isNoValue:()Z
      11: ifne          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: invokestatic  #25                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      22: areturn

  static {};
    Code:
       0: ldc           #56                 // String reactor.core.publisher.Mono
       2: invokestatic  #57                 // Method io/lettuce/core/internal/LettuceClassUtils.isPresent:(Ljava/lang/String;)Z
       5: putstatic     #10                 // Field PROJECT_REACTOR_PRESENT:Z
       8: ldc           #58                 // String rx.Completable
      10: invokestatic  #57                 // Method io/lettuce/core/internal/LettuceClassUtils.isPresent:(Ljava/lang/String;)Z
      13: putstatic     #11                 // Field RXJAVA1_PRESENT:Z
      16: ldc           #59                 // String io.reactivex.Flowable
      18: invokestatic  #57                 // Method io/lettuce/core/internal/LettuceClassUtils.isPresent:(Ljava/lang/String;)Z
      21: putstatic     #12                 // Field RXJAVA2_PRESENT:Z
      24: new           #60                 // class java/util/LinkedHashMap
      27: dup
      28: iconst_3
      29: invokespecial #61                 // Method java/util/LinkedHashMap."<init>":(I)V
      32: astore_0
      33: getstatic     #11                 // Field RXJAVA1_PRESENT:Z
      36: ifeq          96
      39: aload_0
      40: ldc           #62                 // class rx/Single
      42: new           #53                 // class io/lettuce/core/dynamic/ReactiveTypes$Descriptor
      45: dup
      46: iconst_0
      47: iconst_1
      48: iconst_0
      49: invokespecial #63                 // Method io/lettuce/core/dynamic/ReactiveTypes$Descriptor."<init>":(ZZZ)V
      52: invokeinterface #64,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      57: pop
      58: aload_0
      59: ldc           #65                 // class rx/Completable
      61: new           #53                 // class io/lettuce/core/dynamic/ReactiveTypes$Descriptor
      64: dup
      65: iconst_0
      66: iconst_1
      67: iconst_1
      68: invokespecial #63                 // Method io/lettuce/core/dynamic/ReactiveTypes$Descriptor."<init>":(ZZZ)V
      71: invokeinterface #64,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      76: pop
      77: aload_0
      78: ldc           #66                 // class rx/Observable
      80: new           #53                 // class io/lettuce/core/dynamic/ReactiveTypes$Descriptor
      83: dup
      84: iconst_1
      85: iconst_1
      86: iconst_0
      87: invokespecial #63                 // Method io/lettuce/core/dynamic/ReactiveTypes$Descriptor."<init>":(ZZZ)V
      90: invokeinterface #64,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      95: pop
      96: getstatic     #12                 // Field RXJAVA2_PRESENT:Z
      99: ifeq          197
     102: aload_0
     103: ldc           #67                 // class io/reactivex/Single
     105: new           #53                 // class io/lettuce/core/dynamic/ReactiveTypes$Descriptor
     108: dup
     109: iconst_0
     110: iconst_1
     111: iconst_0
     112: invokespecial #63                 // Method io/lettuce/core/dynamic/ReactiveTypes$Descriptor."<init>":(ZZZ)V
     115: invokeinterface #64,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     120: pop
     121: aload_0
     122: ldc           #68                 // class io/reactivex/Maybe
     124: new           #53                 // class io/lettuce/core/dynamic/ReactiveTypes$Descriptor
     127: dup
     128: iconst_0
     129: iconst_1
     130: iconst_0
     131: invokespecial #63                 // Method io/lettuce/core/dynamic/ReactiveTypes$Descriptor."<init>":(ZZZ)V
     134: invokeinterface #64,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     139: pop
     140: aload_0
     141: ldc           #69                 // class io/reactivex/Completable
     143: new           #53                 // class io/lettuce/core/dynamic/ReactiveTypes$Descriptor
     146: dup
     147: iconst_0
     148: iconst_1
     149: iconst_1
     150: invokespecial #63                 // Method io/lettuce/core/dynamic/ReactiveTypes$Descriptor."<init>":(ZZZ)V
     153: invokeinterface #64,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     158: pop
     159: aload_0
     160: ldc           #70                 // class io/reactivex/Flowable
     162: new           #53                 // class io/lettuce/core/dynamic/ReactiveTypes$Descriptor
     165: dup
     166: iconst_1
     167: iconst_1
     168: iconst_0
     169: invokespecial #63                 // Method io/lettuce/core/dynamic/ReactiveTypes$Descriptor."<init>":(ZZZ)V
     172: invokeinterface #64,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     177: pop
     178: aload_0
     179: ldc           #71                 // class io/reactivex/Observable
     181: new           #53                 // class io/lettuce/core/dynamic/ReactiveTypes$Descriptor
     184: dup
     185: iconst_1
     186: iconst_1
     187: iconst_0
     188: invokespecial #63                 // Method io/lettuce/core/dynamic/ReactiveTypes$Descriptor."<init>":(ZZZ)V
     191: invokeinterface #64,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     196: pop
     197: getstatic     #10                 // Field PROJECT_REACTOR_PRESENT:Z
     200: ifeq          260
     203: aload_0
     204: ldc           #72                 // class reactor/core/publisher/Mono
     206: new           #53                 // class io/lettuce/core/dynamic/ReactiveTypes$Descriptor
     209: dup
     210: iconst_0
     211: iconst_1
     212: iconst_0
     213: invokespecial #63                 // Method io/lettuce/core/dynamic/ReactiveTypes$Descriptor."<init>":(ZZZ)V
     216: invokeinterface #64,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     221: pop
     222: aload_0
     223: ldc           #73                 // class reactor/core/publisher/Flux
     225: new           #53                 // class io/lettuce/core/dynamic/ReactiveTypes$Descriptor
     228: dup
     229: iconst_1
     230: iconst_1
     231: iconst_1
     232: invokespecial #63                 // Method io/lettuce/core/dynamic/ReactiveTypes$Descriptor."<init>":(ZZZ)V
     235: invokeinterface #64,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     240: pop
     241: aload_0
     242: ldc           #74                 // class org/reactivestreams/Publisher
     244: new           #53                 // class io/lettuce/core/dynamic/ReactiveTypes$Descriptor
     247: dup
     248: iconst_1
     249: iconst_1
     250: iconst_1
     251: invokespecial #63                 // Method io/lettuce/core/dynamic/ReactiveTypes$Descriptor."<init>":(ZZZ)V
     254: invokeinterface #64,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     259: pop
     260: aload_0
     261: invokestatic  #75                 // Method java/util/Collections.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;
     264: putstatic     #31                 // Field REACTIVE_WRAPPERS:Ljava/util/Map;
     267: return
}
