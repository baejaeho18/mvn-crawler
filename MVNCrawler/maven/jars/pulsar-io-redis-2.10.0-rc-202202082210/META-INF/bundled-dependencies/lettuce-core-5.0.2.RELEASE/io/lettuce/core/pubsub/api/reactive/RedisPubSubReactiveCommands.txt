Compiled from "RedisPubSubReactiveCommands.java"
public interface io.lettuce.core.pubsub.api.reactive.RedisPubSubReactiveCommands<K, V> extends io.lettuce.core.api.reactive.RedisReactiveCommands<K, V> {
  public abstract reactor.core.publisher.Flux<io.lettuce.core.pubsub.api.reactive.PatternMessage<K, V>> observePatterns();

  public abstract reactor.core.publisher.Flux<io.lettuce.core.pubsub.api.reactive.PatternMessage<K, V>> observePatterns(reactor.core.publisher.FluxSink$OverflowStrategy);

  public abstract reactor.core.publisher.Flux<io.lettuce.core.pubsub.api.reactive.ChannelMessage<K, V>> observeChannels();

  public abstract reactor.core.publisher.Flux<io.lettuce.core.pubsub.api.reactive.ChannelMessage<K, V>> observeChannels(reactor.core.publisher.FluxSink$OverflowStrategy);

  public abstract reactor.core.publisher.Mono<java.lang.Void> psubscribe(K...);

  public abstract reactor.core.publisher.Mono<java.lang.Void> punsubscribe(K...);

  public abstract reactor.core.publisher.Mono<java.lang.Void> subscribe(K...);

  public abstract reactor.core.publisher.Mono<java.lang.Void> unsubscribe(K...);

  public abstract io.lettuce.core.pubsub.StatefulRedisPubSubConnection<K, V> getStatefulConnection();

  public default io.lettuce.core.api.StatefulRedisConnection getStatefulConnection();
    Code:
       0: aload_0
       1: invokeinterface #1,  1            // InterfaceMethod getStatefulConnection:()Lio/lettuce/core/pubsub/StatefulRedisPubSubConnection;
       6: areturn
}
