Compiled from "RedisStringReactiveCommands.java"
public interface io.lettuce.core.api.reactive.RedisStringReactiveCommands<K, V> {
  public abstract reactor.core.publisher.Mono<java.lang.Long> append(K, V);

  public abstract reactor.core.publisher.Mono<java.lang.Long> bitcount(K);

  public abstract reactor.core.publisher.Mono<java.lang.Long> bitcount(K, long, long);

  public abstract reactor.core.publisher.Flux<io.lettuce.core.Value<java.lang.Long>> bitfield(K, io.lettuce.core.BitFieldArgs);

  public abstract reactor.core.publisher.Mono<java.lang.Long> bitpos(K, boolean);

  public abstract reactor.core.publisher.Mono<java.lang.Long> bitpos(K, boolean, long);

  public abstract reactor.core.publisher.Mono<java.lang.Long> bitpos(K, boolean, long, long);

  public abstract reactor.core.publisher.Mono<java.lang.Long> bitopAnd(K, K...);

  public abstract reactor.core.publisher.Mono<java.lang.Long> bitopNot(K, K);

  public abstract reactor.core.publisher.Mono<java.lang.Long> bitopOr(K, K...);

  public abstract reactor.core.publisher.Mono<java.lang.Long> bitopXor(K, K...);

  public abstract reactor.core.publisher.Mono<java.lang.Long> decr(K);

  public abstract reactor.core.publisher.Mono<java.lang.Long> decrby(K, long);

  public abstract reactor.core.publisher.Mono<V> get(K);

  public abstract reactor.core.publisher.Mono<java.lang.Long> getbit(K, long);

  public abstract reactor.core.publisher.Mono<V> getrange(K, long, long);

  public abstract reactor.core.publisher.Mono<V> getset(K, V);

  public abstract reactor.core.publisher.Mono<java.lang.Long> incr(K);

  public abstract reactor.core.publisher.Mono<java.lang.Long> incrby(K, long);

  public abstract reactor.core.publisher.Mono<java.lang.Double> incrbyfloat(K, double);

  public abstract reactor.core.publisher.Flux<io.lettuce.core.KeyValue<K, V>> mget(K...);

  public abstract reactor.core.publisher.Mono<java.lang.Long> mget(io.lettuce.core.output.KeyValueStreamingChannel<K, V>, K...);

  public abstract reactor.core.publisher.Mono<java.lang.String> mset(java.util.Map<K, V>);

  public abstract reactor.core.publisher.Mono<java.lang.Boolean> msetnx(java.util.Map<K, V>);

  public abstract reactor.core.publisher.Mono<java.lang.String> set(K, V);

  public abstract reactor.core.publisher.Mono<java.lang.String> set(K, V, io.lettuce.core.SetArgs);

  public abstract reactor.core.publisher.Mono<java.lang.Long> setbit(K, long, int);

  public abstract reactor.core.publisher.Mono<java.lang.String> setex(K, long, V);

  public abstract reactor.core.publisher.Mono<java.lang.String> psetex(K, long, V);

  public abstract reactor.core.publisher.Mono<java.lang.Boolean> setnx(K, V);

  public abstract reactor.core.publisher.Mono<java.lang.Long> setrange(K, long, V);

  public abstract reactor.core.publisher.Mono<java.lang.Long> strlen(K);
}
