Compiled from "ExponentialDelay.java"
class io.lettuce.core.resource.ExponentialDelay extends io.lettuce.core.resource.Delay {
  private final java.time.Duration lower;

  private final java.time.Duration upper;

  private final int powersOf;

  private final java.util.concurrent.TimeUnit targetTimeUnit;

  io.lettuce.core.resource.ExponentialDelay(java.time.Duration, java.time.Duration, int, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method io/lettuce/core/resource/Delay."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field lower:Ljava/time/Duration;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field upper:Ljava/time/Duration;
      14: aload_0
      15: iload_3
      16: putfield      #4                  // Field powersOf:I
      19: aload_0
      20: aload         4
      22: putfield      #5                  // Field targetTimeUnit:Ljava/util/concurrent/TimeUnit;
      25: return

  public java.time.Duration createDelay(long);
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: ifgt          11
       6: lconst_0
       7: lstore_3
       8: goto          33
      11: aload_0
      12: getfield      #4                  // Field powersOf:I
      15: iconst_2
      16: if_icmpne     27
      19: lload_1
      20: invokestatic  #6                  // Method calculatePowerOfTwo:(J)J
      23: lstore_3
      24: goto          33
      27: aload_0
      28: lload_1
      29: invokespecial #7                  // Method calculateAlternatePower:(J)J
      32: lstore_3
      33: aload_0
      34: aload_0
      35: getfield      #5                  // Field targetTimeUnit:Ljava/util/concurrent/TimeUnit;
      38: lload_3
      39: invokevirtual #8                  // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      42: invokestatic  #9                  // Method java/time/Duration.ofNanos:(J)Ljava/time/Duration;
      45: invokevirtual #10                 // Method applyBounds:(Ljava/time/Duration;)Ljava/time/Duration;
      48: areturn

  protected java.time.Duration applyBounds(java.time.Duration);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #2                  // Field lower:Ljava/time/Duration;
       5: aload_0
       6: getfield      #3                  // Field upper:Ljava/time/Duration;
       9: invokestatic  #11                 // Method applyBounds:(Ljava/time/Duration;Ljava/time/Duration;Ljava/time/Duration;)Ljava/time/Duration;
      12: areturn

  private long calculateAlternatePower(long);
    Code:
       0: aload_0
       1: getfield      #4                  // Field powersOf:I
       4: i2d
       5: lload_1
       6: lconst_1
       7: lsub
       8: l2d
       9: invokestatic  #12                 // Method java/lang/Math.pow:(DD)D
      12: dstore_3
      13: dload_3
      14: invokestatic  #13                 // Method java/lang/Math.round:(D)J
      17: lreturn

  protected static long calculatePowerOfTwo(long);
    Code:
       0: lload_0
       1: lconst_0
       2: lcmp
       3: ifgt          8
       6: lconst_0
       7: lreturn
       8: lload_0
       9: ldc2_w        #14                 // long 64l
      12: lcmp
      13: iflt          20
      16: ldc2_w        #17                 // long 9223372036854775807l
      19: lreturn
      20: lconst_1
      21: lload_0
      22: lconst_1
      23: lsub
      24: l2i
      25: lshl
      26: lreturn
}
