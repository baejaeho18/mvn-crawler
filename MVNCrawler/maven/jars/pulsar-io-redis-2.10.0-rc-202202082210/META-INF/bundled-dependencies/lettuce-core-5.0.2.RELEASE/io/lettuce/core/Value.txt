Compiled from "Value.java"
public class io.lettuce.core.Value<V> implements java.io.Serializable {
  private static final io.lettuce.core.Value<java.lang.Object> EMPTY;

  private final V value;

  protected io.lettuce.core.Value();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #2                  // Field value:Ljava/lang/Object;
       9: return

  protected io.lettuce.core.Value(V);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field value:Ljava/lang/Object;
       9: return

  public static <T extends V, V> io.lettuce.core.Value<V> from(java.util.Optional<T>);
    Code:
       0: aload_0
       1: ldc           #3                  // String Optional must not be null
       3: invokestatic  #4                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: invokevirtual #5                  // Method java/util/Optional.isPresent:()Z
      10: ifeq          25
      13: new           #6                  // class io/lettuce/core/Value
      16: dup
      17: aload_0
      18: invokevirtual #7                  // Method java/util/Optional.get:()Ljava/lang/Object;
      21: invokespecial #8                  // Method "<init>":(Ljava/lang/Object;)V
      24: areturn
      25: getstatic     #9                  // Field EMPTY:Lio/lettuce/core/Value;
      28: areturn

  public static <T extends V, V> io.lettuce.core.Value<V> fromNullable(T);
    Code:
       0: aload_0
       1: ifnonnull     8
       4: invokestatic  #10                 // Method empty:()Lio/lettuce/core/Value;
       7: areturn
       8: new           #6                  // class io/lettuce/core/Value
      11: dup
      12: aload_0
      13: invokespecial #8                  // Method "<init>":(Ljava/lang/Object;)V
      16: areturn

  public static <V> io.lettuce.core.Value<V> empty();
    Code:
       0: getstatic     #9                  // Field EMPTY:Lio/lettuce/core/Value;
       3: areturn

  public static <T extends V, V> io.lettuce.core.Value<V> just(T);
    Code:
       0: aload_0
       1: ldc           #11                 // String Value must not be null
       3: invokestatic  #4                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: new           #6                  // class io/lettuce/core/Value
       9: dup
      10: aload_0
      11: invokespecial #8                  // Method "<init>":(Ljava/lang/Object;)V
      14: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: instanceof    #6                  // class io/lettuce/core/Value
      11: ifne          16
      14: iconst_0
      15: ireturn
      16: aload_1
      17: checkcast     #6                  // class io/lettuce/core/Value
      20: astore_2
      21: aload_0
      22: getfield      #2                  // Field value:Ljava/lang/Object;
      25: ifnull        42
      28: aload_0
      29: getfield      #2                  // Field value:Ljava/lang/Object;
      32: aload_2
      33: getfield      #2                  // Field value:Ljava/lang/Object;
      36: invokevirtual #12                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      39: goto          54
      42: aload_2
      43: getfield      #2                  // Field value:Ljava/lang/Object;
      46: ifnonnull     53
      49: iconst_1
      50: goto          54
      53: iconst_0
      54: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #2                  // Field value:Ljava/lang/Object;
       4: ifnull        17
       7: aload_0
       8: getfield      #2                  // Field value:Ljava/lang/Object;
      11: invokevirtual #13                 // Method java/lang/Object.hashCode:()I
      14: goto          18
      17: iconst_0
      18: ireturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokevirtual #14                 // Method hasValue:()Z
       4: ifeq          26
       7: ldc           #15                 // String Value[%s]
       9: iconst_1
      10: anewarray     #16                 // class java/lang/Object
      13: dup
      14: iconst_0
      15: aload_0
      16: getfield      #2                  // Field value:Ljava/lang/Object;
      19: aastore
      20: invokestatic  #17                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      23: goto          28
      26: ldc           #18                 // String Value.empty
      28: areturn

  public V getValue();
    Code:
       0: aload_0
       1: invokevirtual #14                 // Method hasValue:()Z
       4: ifne          15
       7: new           #19                 // class java/util/NoSuchElementException
      10: dup
      11: invokespecial #20                 // Method java/util/NoSuchElementException."<init>":()V
      14: athrow
      15: aload_0
      16: getfield      #2                  // Field value:Ljava/lang/Object;
      19: areturn

  public boolean hasValue();
    Code:
       0: aload_0
       1: getfield      #2                  // Field value:Ljava/lang/Object;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public V getValueOrElseGet(java.util.function.Supplier<V>);
    Code:
       0: aload_1
       1: ldc           #21                 // String Supplier must not be null
       3: invokestatic  #4                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: invokevirtual #14                 // Method hasValue:()Z
      10: ifeq          18
      13: aload_0
      14: getfield      #2                  // Field value:Ljava/lang/Object;
      17: areturn
      18: aload_1
      19: invokeinterface #22,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      24: areturn

  public V getValueOrElse(V);
    Code:
       0: aload_0
       1: invokevirtual #14                 // Method hasValue:()Z
       4: ifeq          12
       7: aload_0
       8: getfield      #2                  // Field value:Ljava/lang/Object;
      11: areturn
      12: aload_1
      13: areturn

  public <X extends java.lang.Throwable> V getValueOrElseThrow(java.util.function.Supplier<? extends X>) throws X;
    Code:
       0: aload_1
       1: ldc           #23                 // String Supplier function must not be null
       3: invokestatic  #4                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: invokevirtual #14                 // Method hasValue:()Z
      10: ifeq          18
      13: aload_0
      14: getfield      #2                  // Field value:Ljava/lang/Object;
      17: areturn
      18: aload_1
      19: invokeinterface #22,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      24: checkcast     #24                 // class java/lang/Throwable
      27: athrow

  public <R> io.lettuce.core.Value<R> map(java.util.function.Function<? super V, ? extends R>);
    Code:
       0: aload_1
       1: ldc           #25                 // String Mapper function must not be null
       3: invokestatic  #4                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: invokevirtual #14                 // Method hasValue:()Z
      10: ifeq          31
      13: new           #6                  // class io/lettuce/core/Value
      16: dup
      17: aload_1
      18: aload_0
      19: invokevirtual #26                 // Method getValue:()Ljava/lang/Object;
      22: invokeinterface #27,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      27: invokespecial #8                  // Method "<init>":(Ljava/lang/Object;)V
      30: areturn
      31: aload_0
      32: areturn

  public void ifHasValue(java.util.function.Consumer<? super V>);
    Code:
       0: aload_1
       1: ldc           #28                 // String Consumer must not be null
       3: invokestatic  #4                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: invokevirtual #14                 // Method hasValue:()Z
      10: ifeq          23
      13: aload_1
      14: aload_0
      15: invokevirtual #26                 // Method getValue:()Ljava/lang/Object;
      18: invokeinterface #29,  2           // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
      23: return

  public void ifEmpty(java.lang.Runnable);
    Code:
       0: aload_1
       1: ldc           #30                 // String Runnable must not be null
       3: invokestatic  #4                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: invokevirtual #14                 // Method hasValue:()Z
      10: ifne          19
      13: aload_1
      14: invokeinterface #31,  1           // InterfaceMethod java/lang/Runnable.run:()V
      19: return

  public java.util.Optional<V> optional();
    Code:
       0: aload_0
       1: getfield      #2                  // Field value:Ljava/lang/Object;
       4: invokestatic  #32                 // Method java/util/Optional.ofNullable:(Ljava/lang/Object;)Ljava/util/Optional;
       7: areturn

  public java.util.stream.Stream<V> stream();
    Code:
       0: aload_0
       1: invokevirtual #14                 // Method hasValue:()Z
       4: ifeq          15
       7: aload_0
       8: getfield      #2                  // Field value:Ljava/lang/Object;
      11: invokestatic  #33                 // InterfaceMethod java/util/stream/Stream.of:(Ljava/lang/Object;)Ljava/util/stream/Stream;
      14: areturn
      15: invokestatic  #34                 // InterfaceMethod java/util/stream/Stream.empty:()Ljava/util/stream/Stream;
      18: areturn

  static {};
    Code:
       0: new           #6                  // class io/lettuce/core/Value
       3: dup
       4: aconst_null
       5: invokespecial #8                  // Method "<init>":(Ljava/lang/Object;)V
       8: putstatic     #9                  // Field EMPTY:Lio/lettuce/core/Value;
      11: return
}
