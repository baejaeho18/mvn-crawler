Compiled from "BaseRedisReactiveCommands.java"
public interface io.lettuce.core.api.reactive.BaseRedisReactiveCommands<K, V> {
  public abstract reactor.core.publisher.Mono<java.lang.Long> publish(K, V);

  public abstract reactor.core.publisher.Flux<K> pubsubChannels();

  public abstract reactor.core.publisher.Flux<K> pubsubChannels(K);

  public abstract reactor.core.publisher.Mono<java.util.Map<K, java.lang.Long>> pubsubNumsub(K...);

  public abstract reactor.core.publisher.Mono<java.lang.Long> pubsubNumpat();

  public abstract reactor.core.publisher.Mono<V> echo(V);

  public abstract reactor.core.publisher.Flux<java.lang.Object> role();

  public abstract reactor.core.publisher.Mono<java.lang.String> ping();

  public abstract reactor.core.publisher.Mono<java.lang.String> readOnly();

  public abstract reactor.core.publisher.Mono<java.lang.String> readWrite();

  public abstract reactor.core.publisher.Mono<java.lang.String> quit();

  public abstract reactor.core.publisher.Mono<java.lang.Long> waitForReplication(int, long);

  public abstract <T> reactor.core.publisher.Flux<T> dispatch(io.lettuce.core.protocol.ProtocolKeyword, io.lettuce.core.output.CommandOutput<K, V, ?>);

  public abstract <T> reactor.core.publisher.Flux<T> dispatch(io.lettuce.core.protocol.ProtocolKeyword, io.lettuce.core.output.CommandOutput<K, V, ?>, io.lettuce.core.protocol.CommandArgs<K, V>);

  public abstract boolean isOpen();

  public abstract void reset();

  public abstract void setAutoFlushCommands(boolean);

  public abstract void flushCommands();
}
