Compiled from "RedisPubSubReactiveCommandsImpl.java"
public class io.lettuce.core.pubsub.RedisPubSubReactiveCommandsImpl<K, V> extends io.lettuce.core.RedisReactiveCommandsImpl<K, V> implements io.lettuce.core.pubsub.api.reactive.RedisPubSubReactiveCommands<K, V> {
  private final io.lettuce.core.pubsub.PubSubCommandBuilder<K, V> commandBuilder;

  public io.lettuce.core.pubsub.RedisPubSubReactiveCommandsImpl(io.lettuce.core.pubsub.StatefulRedisPubSubConnection<K, V>, io.lettuce.core.codec.RedisCodec<K, V>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #1                  // Method io/lettuce/core/RedisReactiveCommandsImpl."<init>":(Lio/lettuce/core/api/StatefulRedisConnection;Lio/lettuce/core/codec/RedisCodec;)V
       6: aload_0
       7: new           #2                  // class io/lettuce/core/pubsub/PubSubCommandBuilder
      10: dup
      11: aload_2
      12: invokespecial #3                  // Method io/lettuce/core/pubsub/PubSubCommandBuilder."<init>":(Lio/lettuce/core/codec/RedisCodec;)V
      15: putfield      #4                  // Field commandBuilder:Lio/lettuce/core/pubsub/PubSubCommandBuilder;
      18: return

  public reactor.core.publisher.Flux<io.lettuce.core.pubsub.api.reactive.PatternMessage<K, V>> observePatterns();
    Code:
       0: aload_0
       1: getstatic     #5                  // Field reactor/core/publisher/FluxSink$OverflowStrategy.BUFFER:Lreactor/core/publisher/FluxSink$OverflowStrategy;
       4: invokevirtual #6                  // Method observePatterns:(Lreactor/core/publisher/FluxSink$OverflowStrategy;)Lreactor/core/publisher/Flux;
       7: areturn

  public reactor.core.publisher.Flux<io.lettuce.core.pubsub.api.reactive.PatternMessage<K, V>> observePatterns(reactor.core.publisher.FluxSink$OverflowStrategy);
    Code:
       0: aload_0
       1: invokedynamic #7,  0              // InvokeDynamic #0:accept:(Lio/lettuce/core/pubsub/RedisPubSubReactiveCommandsImpl;)Ljava/util/function/Consumer;
       6: aload_1
       7: invokestatic  #8                  // Method reactor/core/publisher/Flux.create:(Ljava/util/function/Consumer;Lreactor/core/publisher/FluxSink$OverflowStrategy;)Lreactor/core/publisher/Flux;
      10: areturn

  public reactor.core.publisher.Flux<io.lettuce.core.pubsub.api.reactive.ChannelMessage<K, V>> observeChannels();
    Code:
       0: aload_0
       1: getstatic     #5                  // Field reactor/core/publisher/FluxSink$OverflowStrategy.BUFFER:Lreactor/core/publisher/FluxSink$OverflowStrategy;
       4: invokevirtual #9                  // Method observeChannels:(Lreactor/core/publisher/FluxSink$OverflowStrategy;)Lreactor/core/publisher/Flux;
       7: areturn

  public reactor.core.publisher.Flux<io.lettuce.core.pubsub.api.reactive.ChannelMessage<K, V>> observeChannels(reactor.core.publisher.FluxSink$OverflowStrategy);
    Code:
       0: aload_0
       1: invokedynamic #10,  0             // InvokeDynamic #1:accept:(Lio/lettuce/core/pubsub/RedisPubSubReactiveCommandsImpl;)Ljava/util/function/Consumer;
       6: aload_1
       7: invokestatic  #8                  // Method reactor/core/publisher/Flux.create:(Ljava/util/function/Consumer;Lreactor/core/publisher/FluxSink$OverflowStrategy;)Lreactor/core/publisher/Flux;
      10: areturn

  public reactor.core.publisher.Mono<java.lang.Void> psubscribe(K...);
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: invokedynamic #11,  0             // InvokeDynamic #2:get:(Lio/lettuce/core/pubsub/RedisPubSubReactiveCommandsImpl;[Ljava/lang/Object;)Ljava/util/function/Supplier;
       8: invokevirtual #12                 // Method createMono:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Mono;
      11: invokevirtual #13                 // Method reactor/core/publisher/Mono.then:()Lreactor/core/publisher/Mono;
      14: areturn

  public reactor.core.publisher.Mono<java.lang.Void> punsubscribe(K...);
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: invokedynamic #14,  0             // InvokeDynamic #3:get:(Lio/lettuce/core/pubsub/RedisPubSubReactiveCommandsImpl;[Ljava/lang/Object;)Ljava/util/function/Supplier;
       8: invokevirtual #15                 // Method createFlux:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Flux;
      11: invokevirtual #16                 // Method reactor/core/publisher/Flux.then:()Lreactor/core/publisher/Mono;
      14: areturn

  public reactor.core.publisher.Mono<java.lang.Void> subscribe(K...);
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: invokedynamic #17,  0             // InvokeDynamic #4:get:(Lio/lettuce/core/pubsub/RedisPubSubReactiveCommandsImpl;[Ljava/lang/Object;)Ljava/util/function/Supplier;
       8: invokevirtual #15                 // Method createFlux:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Flux;
      11: invokevirtual #16                 // Method reactor/core/publisher/Flux.then:()Lreactor/core/publisher/Mono;
      14: areturn

  public reactor.core.publisher.Mono<java.lang.Void> unsubscribe(K...);
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: invokedynamic #18,  0             // InvokeDynamic #5:get:(Lio/lettuce/core/pubsub/RedisPubSubReactiveCommandsImpl;[Ljava/lang/Object;)Ljava/util/function/Supplier;
       8: invokevirtual #15                 // Method createFlux:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Flux;
      11: invokevirtual #16                 // Method reactor/core/publisher/Flux.then:()Lreactor/core/publisher/Mono;
      14: areturn

  public reactor.core.publisher.Mono<java.lang.Long> publish(K, V);
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: aload_2
       4: invokedynamic #19,  0             // InvokeDynamic #6:get:(Lio/lettuce/core/pubsub/RedisPubSubReactiveCommandsImpl;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/function/Supplier;
       9: invokevirtual #12                 // Method createMono:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Mono;
      12: areturn

  public reactor.core.publisher.Flux<K> pubsubChannels(K);
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: invokedynamic #20,  0             // InvokeDynamic #7:get:(Lio/lettuce/core/pubsub/RedisPubSubReactiveCommandsImpl;Ljava/lang/Object;)Ljava/util/function/Supplier;
       8: invokevirtual #21                 // Method createDissolvingFlux:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Flux;
      11: areturn

  public reactor.core.publisher.Mono<java.util.Map<K, java.lang.Long>> pubsubNumsub(K...);
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: invokedynamic #22,  0             // InvokeDynamic #8:get:(Lio/lettuce/core/pubsub/RedisPubSubReactiveCommandsImpl;[Ljava/lang/Object;)Ljava/util/function/Supplier;
       8: invokevirtual #12                 // Method createMono:(Ljava/util/function/Supplier;)Lreactor/core/publisher/Mono;
      11: areturn

  public io.lettuce.core.pubsub.StatefulRedisPubSubConnection<K, V> getStatefulConnection();
    Code:
       0: aload_0
       1: invokespecial #23                 // Method io/lettuce/core/RedisReactiveCommandsImpl.getStatefulConnection:()Lio/lettuce/core/api/StatefulRedisConnection;
       4: checkcast     #24                 // class io/lettuce/core/pubsub/StatefulRedisPubSubConnection
       7: areturn

  public io.lettuce.core.api.StatefulRedisConnection getStatefulConnection();
    Code:
       0: aload_0
       1: invokevirtual #25                 // Method getStatefulConnection:()Lio/lettuce/core/pubsub/StatefulRedisPubSubConnection;
       4: areturn

  private io.lettuce.core.protocol.RedisCommand lambda$pubsubNumsub$10(java.lang.Object[]);
    Code:
       0: aload_0
       1: getfield      #4                  // Field commandBuilder:Lio/lettuce/core/pubsub/PubSubCommandBuilder;
       4: aload_1
       5: invokevirtual #26                 // Method io/lettuce/core/pubsub/PubSubCommandBuilder.pubsubNumsub:([Ljava/lang/Object;)Lio/lettuce/core/protocol/Command;
       8: areturn

  private io.lettuce.core.protocol.RedisCommand lambda$pubsubChannels$9(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #4                  // Field commandBuilder:Lio/lettuce/core/pubsub/PubSubCommandBuilder;
       4: aload_1
       5: invokevirtual #27                 // Method io/lettuce/core/pubsub/PubSubCommandBuilder.pubsubChannels:(Ljava/lang/Object;)Lio/lettuce/core/protocol/Command;
       8: areturn

  private io.lettuce.core.protocol.RedisCommand lambda$publish$8(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #4                  // Field commandBuilder:Lio/lettuce/core/pubsub/PubSubCommandBuilder;
       4: aload_1
       5: aload_2
       6: invokevirtual #28                 // Method io/lettuce/core/pubsub/PubSubCommandBuilder.publish:(Ljava/lang/Object;Ljava/lang/Object;)Lio/lettuce/core/protocol/Command;
       9: areturn

  private io.lettuce.core.protocol.RedisCommand lambda$unsubscribe$7(java.lang.Object[]);
    Code:
       0: aload_0
       1: getfield      #4                  // Field commandBuilder:Lio/lettuce/core/pubsub/PubSubCommandBuilder;
       4: aload_1
       5: invokevirtual #29                 // Method io/lettuce/core/pubsub/PubSubCommandBuilder.unsubscribe:([Ljava/lang/Object;)Lio/lettuce/core/protocol/Command;
       8: areturn

  private io.lettuce.core.protocol.RedisCommand lambda$subscribe$6(java.lang.Object[]);
    Code:
       0: aload_0
       1: getfield      #4                  // Field commandBuilder:Lio/lettuce/core/pubsub/PubSubCommandBuilder;
       4: aload_1
       5: invokevirtual #30                 // Method io/lettuce/core/pubsub/PubSubCommandBuilder.subscribe:([Ljava/lang/Object;)Lio/lettuce/core/protocol/Command;
       8: areturn

  private io.lettuce.core.protocol.RedisCommand lambda$punsubscribe$5(java.lang.Object[]);
    Code:
       0: aload_0
       1: getfield      #4                  // Field commandBuilder:Lio/lettuce/core/pubsub/PubSubCommandBuilder;
       4: aload_1
       5: invokevirtual #31                 // Method io/lettuce/core/pubsub/PubSubCommandBuilder.punsubscribe:([Ljava/lang/Object;)Lio/lettuce/core/protocol/Command;
       8: areturn

  private io.lettuce.core.protocol.RedisCommand lambda$psubscribe$4(java.lang.Object[]);
    Code:
       0: aload_0
       1: getfield      #4                  // Field commandBuilder:Lio/lettuce/core/pubsub/PubSubCommandBuilder;
       4: aload_1
       5: invokevirtual #32                 // Method io/lettuce/core/pubsub/PubSubCommandBuilder.psubscribe:([Ljava/lang/Object;)Lio/lettuce/core/protocol/Command;
       8: areturn

  private void lambda$observeChannels$3(reactor.core.publisher.FluxSink);
    Code:
       0: new           #33                 // class io/lettuce/core/pubsub/RedisPubSubReactiveCommandsImpl$2
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #34                 // Method io/lettuce/core/pubsub/RedisPubSubReactiveCommandsImpl$2."<init>":(Lio/lettuce/core/pubsub/RedisPubSubReactiveCommandsImpl;Lreactor/core/publisher/FluxSink;)V
       9: astore_2
      10: aload_0
      11: invokevirtual #25                 // Method getStatefulConnection:()Lio/lettuce/core/pubsub/StatefulRedisPubSubConnection;
      14: astore_3
      15: aload_3
      16: aload_2
      17: invokeinterface #35,  2           // InterfaceMethod io/lettuce/core/pubsub/StatefulRedisPubSubConnection.addListener:(Lio/lettuce/core/pubsub/RedisPubSubListener;)V
      22: aload_1
      23: aload_3
      24: aload_2
      25: invokedynamic #36,  0             // InvokeDynamic #9:dispose:(Lio/lettuce/core/pubsub/StatefulRedisPubSubConnection;Lio/lettuce/core/pubsub/RedisPubSubAdapter;)Lreactor/core/Disposable;
      30: invokeinterface #37,  2           // InterfaceMethod reactor/core/publisher/FluxSink.onDispose:(Lreactor/core/Disposable;)Lreactor/core/publisher/FluxSink;
      35: pop
      36: return

  private static void lambda$null$2(io.lettuce.core.pubsub.StatefulRedisPubSubConnection, io.lettuce.core.pubsub.RedisPubSubAdapter);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #38,  2           // InterfaceMethod io/lettuce/core/pubsub/StatefulRedisPubSubConnection.removeListener:(Lio/lettuce/core/pubsub/RedisPubSubListener;)V
       7: return

  private void lambda$observePatterns$1(reactor.core.publisher.FluxSink);
    Code:
       0: new           #39                 // class io/lettuce/core/pubsub/RedisPubSubReactiveCommandsImpl$1
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #40                 // Method io/lettuce/core/pubsub/RedisPubSubReactiveCommandsImpl$1."<init>":(Lio/lettuce/core/pubsub/RedisPubSubReactiveCommandsImpl;Lreactor/core/publisher/FluxSink;)V
       9: astore_2
      10: aload_0
      11: invokevirtual #25                 // Method getStatefulConnection:()Lio/lettuce/core/pubsub/StatefulRedisPubSubConnection;
      14: astore_3
      15: aload_3
      16: aload_2
      17: invokeinterface #35,  2           // InterfaceMethod io/lettuce/core/pubsub/StatefulRedisPubSubConnection.addListener:(Lio/lettuce/core/pubsub/RedisPubSubListener;)V
      22: aload_1
      23: aload_3
      24: aload_2
      25: invokedynamic #41,  0             // InvokeDynamic #10:dispose:(Lio/lettuce/core/pubsub/StatefulRedisPubSubConnection;Lio/lettuce/core/pubsub/RedisPubSubAdapter;)Lreactor/core/Disposable;
      30: invokeinterface #37,  2           // InterfaceMethod reactor/core/publisher/FluxSink.onDispose:(Lreactor/core/Disposable;)Lreactor/core/publisher/FluxSink;
      35: pop
      36: return

  private static void lambda$null$0(io.lettuce.core.pubsub.StatefulRedisPubSubConnection, io.lettuce.core.pubsub.RedisPubSubAdapter);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #38,  2           // InterfaceMethod io/lettuce/core/pubsub/StatefulRedisPubSubConnection.removeListener:(Lio/lettuce/core/pubsub/RedisPubSubListener;)V
       7: return
}
