Compiled from "Delay.java"
public abstract class io.lettuce.core.resource.Delay {
  private static java.time.Duration DEFAULT_LOWER_BOUND;

  private static java.time.Duration DEFAULT_UPPER_BOUND;

  private static int DEFAULT_POWER_OF;

  private static java.util.concurrent.TimeUnit DEFAULT_TIMEUNIT;

  protected io.lettuce.core.resource.Delay();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public abstract java.time.Duration createDelay(long);

  public static io.lettuce.core.resource.Delay constant(java.time.Duration);
    Code:
       0: aload_0
       1: ldc           #2                  // String Delay must not be null
       3: invokestatic  #3                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: invokevirtual #4                  // Method java/time/Duration.toNanos:()J
      10: lconst_0
      11: lcmp
      12: iflt          19
      15: iconst_1
      16: goto          20
      19: iconst_0
      20: ldc           #5                  // String Delay must be greater or equal to 0
      22: invokestatic  #6                  // Method io/lettuce/core/internal/LettuceAssert.isTrue:(ZLjava/lang/String;)V
      25: new           #7                  // class io/lettuce/core/resource/ConstantDelay
      28: dup
      29: aload_0
      30: invokespecial #8                  // Method io/lettuce/core/resource/ConstantDelay."<init>":(Ljava/time/Duration;)V
      33: areturn

  public static io.lettuce.core.resource.Delay constant(int, java.util.concurrent.TimeUnit);
    Code:
       0: aload_1
       1: ldc           #9                  // String TimeUnit must not be null
       3: invokestatic  #3                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_1
       7: iload_0
       8: i2l
       9: invokevirtual #10                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      12: invokestatic  #11                 // Method java/time/Duration.ofNanos:(J)Ljava/time/Duration;
      15: invokestatic  #12                 // Method constant:(Ljava/time/Duration;)Lio/lettuce/core/resource/Delay;
      18: areturn

  public static io.lettuce.core.resource.Delay exponential();
    Code:
       0: getstatic     #13                 // Field DEFAULT_LOWER_BOUND:Ljava/time/Duration;
       3: getstatic     #14                 // Field DEFAULT_UPPER_BOUND:Ljava/time/Duration;
       6: getstatic     #15                 // Field DEFAULT_POWER_OF:I
       9: getstatic     #16                 // Field DEFAULT_TIMEUNIT:Ljava/util/concurrent/TimeUnit;
      12: invokestatic  #17                 // Method exponential:(Ljava/time/Duration;Ljava/time/Duration;ILjava/util/concurrent/TimeUnit;)Lio/lettuce/core/resource/Delay;
      15: areturn

  public static io.lettuce.core.resource.Delay exponential(java.time.Duration, java.time.Duration, int, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: ldc           #18                 // String Lower boundary must not be null
       3: invokestatic  #3                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: invokevirtual #4                  // Method java/time/Duration.toNanos:()J
      10: lconst_0
      11: lcmp
      12: iflt          19
      15: iconst_1
      16: goto          20
      19: iconst_0
      20: ldc           #19                 // String Lower boundary must be greater or equal to 0
      22: invokestatic  #6                  // Method io/lettuce/core/internal/LettuceAssert.isTrue:(ZLjava/lang/String;)V
      25: aload_1
      26: ldc           #20                 // String Upper boundary must not be null
      28: invokestatic  #3                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      31: aload_1
      32: invokevirtual #4                  // Method java/time/Duration.toNanos:()J
      35: aload_0
      36: invokevirtual #4                  // Method java/time/Duration.toNanos:()J
      39: lcmp
      40: ifle          47
      43: iconst_1
      44: goto          48
      47: iconst_0
      48: ldc           #21                 // String Upper boundary must be greater than the lower boundary
      50: invokestatic  #6                  // Method io/lettuce/core/internal/LettuceAssert.isTrue:(ZLjava/lang/String;)V
      53: iload_2
      54: iconst_1
      55: if_icmple     62
      58: iconst_1
      59: goto          63
      62: iconst_0
      63: ldc           #22                 // String PowersOf must be greater than 1
      65: invokestatic  #6                  // Method io/lettuce/core/internal/LettuceAssert.isTrue:(ZLjava/lang/String;)V
      68: aload_3
      69: ldc           #23                 // String Target TimeUnit must not be null
      71: invokestatic  #3                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      74: new           #24                 // class io/lettuce/core/resource/ExponentialDelay
      77: dup
      78: aload_0
      79: aload_1
      80: iload_2
      81: aload_3
      82: invokespecial #25                 // Method io/lettuce/core/resource/ExponentialDelay."<init>":(Ljava/time/Duration;Ljava/time/Duration;ILjava/util/concurrent/TimeUnit;)V
      85: areturn

  public static io.lettuce.core.resource.Delay exponential(long, long, java.util.concurrent.TimeUnit, int);
    Code:
       0: lload_0
       1: lconst_0
       2: lcmp
       3: iflt          10
       6: iconst_1
       7: goto          11
      10: iconst_0
      11: ldc           #19                 // String Lower boundary must be greater or equal to 0
      13: invokestatic  #6                  // Method io/lettuce/core/internal/LettuceAssert.isTrue:(ZLjava/lang/String;)V
      16: lload_2
      17: lload_0
      18: lcmp
      19: ifle          26
      22: iconst_1
      23: goto          27
      26: iconst_0
      27: ldc           #21                 // String Upper boundary must be greater than the lower boundary
      29: invokestatic  #6                  // Method io/lettuce/core/internal/LettuceAssert.isTrue:(ZLjava/lang/String;)V
      32: iload         5
      34: iconst_1
      35: if_icmple     42
      38: iconst_1
      39: goto          43
      42: iconst_0
      43: ldc           #22                 // String PowersOf must be greater than 1
      45: invokestatic  #6                  // Method io/lettuce/core/internal/LettuceAssert.isTrue:(ZLjava/lang/String;)V
      48: aload         4
      50: ldc           #9                  // String TimeUnit must not be null
      52: invokestatic  #3                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      55: aload         4
      57: lload_0
      58: invokevirtual #10                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      61: invokestatic  #11                 // Method java/time/Duration.ofNanos:(J)Ljava/time/Duration;
      64: aload         4
      66: lload_2
      67: invokevirtual #10                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      70: invokestatic  #11                 // Method java/time/Duration.ofNanos:(J)Ljava/time/Duration;
      73: iload         5
      75: aload         4
      77: invokestatic  #17                 // Method exponential:(Ljava/time/Duration;Ljava/time/Duration;ILjava/util/concurrent/TimeUnit;)Lio/lettuce/core/resource/Delay;
      80: areturn

  public static io.lettuce.core.resource.Delay equalJitter();
    Code:
       0: getstatic     #13                 // Field DEFAULT_LOWER_BOUND:Ljava/time/Duration;
       3: getstatic     #14                 // Field DEFAULT_UPPER_BOUND:Ljava/time/Duration;
       6: lconst_1
       7: getstatic     #16                 // Field DEFAULT_TIMEUNIT:Ljava/util/concurrent/TimeUnit;
      10: invokestatic  #26                 // Method equalJitter:(Ljava/time/Duration;Ljava/time/Duration;JLjava/util/concurrent/TimeUnit;)Lio/lettuce/core/resource/Delay;
      13: areturn

  public static io.lettuce.core.resource.Delay equalJitter(java.time.Duration, java.time.Duration, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: ldc           #18                 // String Lower boundary must not be null
       3: invokestatic  #3                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: invokevirtual #4                  // Method java/time/Duration.toNanos:()J
      10: lconst_0
      11: lcmp
      12: iflt          19
      15: iconst_1
      16: goto          20
      19: iconst_0
      20: ldc           #19                 // String Lower boundary must be greater or equal to 0
      22: invokestatic  #6                  // Method io/lettuce/core/internal/LettuceAssert.isTrue:(ZLjava/lang/String;)V
      25: aload_1
      26: ldc           #20                 // String Upper boundary must not be null
      28: invokestatic  #3                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      31: aload_1
      32: invokevirtual #4                  // Method java/time/Duration.toNanos:()J
      35: aload_0
      36: invokevirtual #4                  // Method java/time/Duration.toNanos:()J
      39: lcmp
      40: ifle          47
      43: iconst_1
      44: goto          48
      47: iconst_0
      48: ldc           #21                 // String Upper boundary must be greater than the lower boundary
      50: invokestatic  #6                  // Method io/lettuce/core/internal/LettuceAssert.isTrue:(ZLjava/lang/String;)V
      53: lload_2
      54: lconst_1
      55: lcmp
      56: iflt          63
      59: iconst_1
      60: goto          64
      63: iconst_0
      64: ldc           #27                 // String Base must be greater or equal to 1
      66: invokestatic  #6                  // Method io/lettuce/core/internal/LettuceAssert.isTrue:(ZLjava/lang/String;)V
      69: aload         4
      71: ldc           #23                 // String Target TimeUnit must not be null
      73: invokestatic  #3                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      76: new           #28                 // class io/lettuce/core/resource/EqualJitterDelay
      79: dup
      80: aload_0
      81: aload_1
      82: lload_2
      83: aload         4
      85: invokespecial #29                 // Method io/lettuce/core/resource/EqualJitterDelay."<init>":(Ljava/time/Duration;Ljava/time/Duration;JLjava/util/concurrent/TimeUnit;)V
      88: areturn

  public static io.lettuce.core.resource.Delay equalJitter(long, long, long, java.util.concurrent.TimeUnit);
    Code:
       0: lload_0
       1: lconst_0
       2: lcmp
       3: iflt          10
       6: iconst_1
       7: goto          11
      10: iconst_0
      11: ldc           #19                 // String Lower boundary must be greater or equal to 0
      13: invokestatic  #6                  // Method io/lettuce/core/internal/LettuceAssert.isTrue:(ZLjava/lang/String;)V
      16: lload_2
      17: lload_0
      18: lcmp
      19: ifle          26
      22: iconst_1
      23: goto          27
      26: iconst_0
      27: ldc           #21                 // String Upper boundary must be greater than the lower boundary
      29: invokestatic  #6                  // Method io/lettuce/core/internal/LettuceAssert.isTrue:(ZLjava/lang/String;)V
      32: lload         4
      34: lconst_1
      35: lcmp
      36: iflt          43
      39: iconst_1
      40: goto          44
      43: iconst_0
      44: ldc           #27                 // String Base must be greater or equal to 1
      46: invokestatic  #6                  // Method io/lettuce/core/internal/LettuceAssert.isTrue:(ZLjava/lang/String;)V
      49: aload         6
      51: ldc           #9                  // String TimeUnit must not be null
      53: invokestatic  #3                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      56: aload         6
      58: lload_0
      59: invokevirtual #10                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      62: invokestatic  #11                 // Method java/time/Duration.ofNanos:(J)Ljava/time/Duration;
      65: aload         6
      67: lload_2
      68: invokevirtual #10                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      71: invokestatic  #11                 // Method java/time/Duration.ofNanos:(J)Ljava/time/Duration;
      74: lload         4
      76: aload         6
      78: invokestatic  #26                 // Method equalJitter:(Ljava/time/Duration;Ljava/time/Duration;JLjava/util/concurrent/TimeUnit;)Lio/lettuce/core/resource/Delay;
      81: areturn

  public static io.lettuce.core.resource.Delay fullJitter();
    Code:
       0: getstatic     #13                 // Field DEFAULT_LOWER_BOUND:Ljava/time/Duration;
       3: getstatic     #14                 // Field DEFAULT_UPPER_BOUND:Ljava/time/Duration;
       6: lconst_1
       7: getstatic     #16                 // Field DEFAULT_TIMEUNIT:Ljava/util/concurrent/TimeUnit;
      10: invokestatic  #30                 // Method fullJitter:(Ljava/time/Duration;Ljava/time/Duration;JLjava/util/concurrent/TimeUnit;)Lio/lettuce/core/resource/Delay;
      13: areturn

  public static io.lettuce.core.resource.Delay fullJitter(java.time.Duration, java.time.Duration, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: ldc           #18                 // String Lower boundary must not be null
       3: invokestatic  #3                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: invokevirtual #4                  // Method java/time/Duration.toNanos:()J
      10: lconst_0
      11: lcmp
      12: iflt          19
      15: iconst_1
      16: goto          20
      19: iconst_0
      20: ldc           #19                 // String Lower boundary must be greater or equal to 0
      22: invokestatic  #6                  // Method io/lettuce/core/internal/LettuceAssert.isTrue:(ZLjava/lang/String;)V
      25: aload_1
      26: ldc           #20                 // String Upper boundary must not be null
      28: invokestatic  #3                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      31: aload_1
      32: invokevirtual #4                  // Method java/time/Duration.toNanos:()J
      35: aload_0
      36: invokevirtual #4                  // Method java/time/Duration.toNanos:()J
      39: lcmp
      40: ifle          47
      43: iconst_1
      44: goto          48
      47: iconst_0
      48: ldc           #21                 // String Upper boundary must be greater than the lower boundary
      50: invokestatic  #6                  // Method io/lettuce/core/internal/LettuceAssert.isTrue:(ZLjava/lang/String;)V
      53: lload_2
      54: lconst_1
      55: lcmp
      56: iflt          63
      59: iconst_1
      60: goto          64
      63: iconst_0
      64: ldc           #27                 // String Base must be greater or equal to 1
      66: invokestatic  #6                  // Method io/lettuce/core/internal/LettuceAssert.isTrue:(ZLjava/lang/String;)V
      69: aload         4
      71: ldc           #23                 // String Target TimeUnit must not be null
      73: invokestatic  #3                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      76: new           #31                 // class io/lettuce/core/resource/FullJitterDelay
      79: dup
      80: aload_0
      81: aload_1
      82: lload_2
      83: aload         4
      85: invokespecial #32                 // Method io/lettuce/core/resource/FullJitterDelay."<init>":(Ljava/time/Duration;Ljava/time/Duration;JLjava/util/concurrent/TimeUnit;)V
      88: areturn

  public static io.lettuce.core.resource.Delay fullJitter(long, long, long, java.util.concurrent.TimeUnit);
    Code:
       0: lload_0
       1: lconst_0
       2: lcmp
       3: iflt          10
       6: iconst_1
       7: goto          11
      10: iconst_0
      11: ldc           #19                 // String Lower boundary must be greater or equal to 0
      13: invokestatic  #6                  // Method io/lettuce/core/internal/LettuceAssert.isTrue:(ZLjava/lang/String;)V
      16: lload_2
      17: lload_0
      18: lcmp
      19: ifle          26
      22: iconst_1
      23: goto          27
      26: iconst_0
      27: ldc           #21                 // String Upper boundary must be greater than the lower boundary
      29: invokestatic  #6                  // Method io/lettuce/core/internal/LettuceAssert.isTrue:(ZLjava/lang/String;)V
      32: lload         4
      34: lconst_1
      35: lcmp
      36: iflt          43
      39: iconst_1
      40: goto          44
      43: iconst_0
      44: ldc           #27                 // String Base must be greater or equal to 1
      46: invokestatic  #6                  // Method io/lettuce/core/internal/LettuceAssert.isTrue:(ZLjava/lang/String;)V
      49: aload         6
      51: ldc           #9                  // String TimeUnit must not be null
      53: invokestatic  #3                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      56: aload         6
      58: lload_0
      59: invokevirtual #10                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      62: invokestatic  #11                 // Method java/time/Duration.ofNanos:(J)Ljava/time/Duration;
      65: aload         6
      67: lload_2
      68: invokevirtual #10                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      71: invokestatic  #11                 // Method java/time/Duration.ofNanos:(J)Ljava/time/Duration;
      74: lload         4
      76: aload         6
      78: invokestatic  #30                 // Method fullJitter:(Ljava/time/Duration;Ljava/time/Duration;JLjava/util/concurrent/TimeUnit;)Lio/lettuce/core/resource/Delay;
      81: areturn

  public static java.util.function.Supplier<io.lettuce.core.resource.Delay> decorrelatedJitter();
    Code:
       0: getstatic     #13                 // Field DEFAULT_LOWER_BOUND:Ljava/time/Duration;
       3: getstatic     #14                 // Field DEFAULT_UPPER_BOUND:Ljava/time/Duration;
       6: lconst_0
       7: getstatic     #16                 // Field DEFAULT_TIMEUNIT:Ljava/util/concurrent/TimeUnit;
      10: invokestatic  #33                 // Method decorrelatedJitter:(Ljava/time/Duration;Ljava/time/Duration;JLjava/util/concurrent/TimeUnit;)Ljava/util/function/Supplier;
      13: areturn

  public static java.util.function.Supplier<io.lettuce.core.resource.Delay> decorrelatedJitter(java.time.Duration, java.time.Duration, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: ldc           #18                 // String Lower boundary must not be null
       3: invokestatic  #3                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: invokevirtual #4                  // Method java/time/Duration.toNanos:()J
      10: lconst_0
      11: lcmp
      12: iflt          19
      15: iconst_1
      16: goto          20
      19: iconst_0
      20: ldc           #19                 // String Lower boundary must be greater or equal to 0
      22: invokestatic  #6                  // Method io/lettuce/core/internal/LettuceAssert.isTrue:(ZLjava/lang/String;)V
      25: aload_1
      26: ldc           #20                 // String Upper boundary must not be null
      28: invokestatic  #3                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      31: aload_1
      32: invokevirtual #4                  // Method java/time/Duration.toNanos:()J
      35: aload_0
      36: invokevirtual #4                  // Method java/time/Duration.toNanos:()J
      39: lcmp
      40: ifle          47
      43: iconst_1
      44: goto          48
      47: iconst_0
      48: ldc           #21                 // String Upper boundary must be greater than the lower boundary
      50: invokestatic  #6                  // Method io/lettuce/core/internal/LettuceAssert.isTrue:(ZLjava/lang/String;)V
      53: lload_2
      54: lconst_0
      55: lcmp
      56: iflt          63
      59: iconst_1
      60: goto          64
      63: iconst_0
      64: ldc           #27                 // String Base must be greater or equal to 1
      66: invokestatic  #6                  // Method io/lettuce/core/internal/LettuceAssert.isTrue:(ZLjava/lang/String;)V
      69: aload         4
      71: ldc           #23                 // String Target TimeUnit must not be null
      73: invokestatic  #3                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      76: aload_0
      77: aload_1
      78: lload_2
      79: aload         4
      81: invokedynamic #34,  0             // InvokeDynamic #0:get:(Ljava/time/Duration;Ljava/time/Duration;JLjava/util/concurrent/TimeUnit;)Ljava/util/function/Supplier;
      86: areturn

  public static java.util.function.Supplier<io.lettuce.core.resource.Delay> decorrelatedJitter(long, long, long, java.util.concurrent.TimeUnit);
    Code:
       0: lload_0
       1: lconst_0
       2: lcmp
       3: iflt          10
       6: iconst_1
       7: goto          11
      10: iconst_0
      11: ldc           #19                 // String Lower boundary must be greater or equal to 0
      13: invokestatic  #6                  // Method io/lettuce/core/internal/LettuceAssert.isTrue:(ZLjava/lang/String;)V
      16: lload_2
      17: lload_0
      18: lcmp
      19: ifle          26
      22: iconst_1
      23: goto          27
      26: iconst_0
      27: ldc           #21                 // String Upper boundary must be greater than the lower boundary
      29: invokestatic  #6                  // Method io/lettuce/core/internal/LettuceAssert.isTrue:(ZLjava/lang/String;)V
      32: lload         4
      34: lconst_0
      35: lcmp
      36: iflt          43
      39: iconst_1
      40: goto          44
      43: iconst_0
      44: ldc           #35                 // String Base must be greater or equal to 0
      46: invokestatic  #6                  // Method io/lettuce/core/internal/LettuceAssert.isTrue:(ZLjava/lang/String;)V
      49: aload         6
      51: ldc           #9                  // String TimeUnit must not be null
      53: invokestatic  #3                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      56: aload         6
      58: lload_0
      59: invokevirtual #10                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      62: invokestatic  #11                 // Method java/time/Duration.ofNanos:(J)Ljava/time/Duration;
      65: aload         6
      67: lload_2
      68: invokevirtual #10                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      71: invokestatic  #11                 // Method java/time/Duration.ofNanos:(J)Ljava/time/Duration;
      74: lload         4
      76: aload         6
      78: invokestatic  #33                 // Method decorrelatedJitter:(Ljava/time/Duration;Ljava/time/Duration;JLjava/util/concurrent/TimeUnit;)Ljava/util/function/Supplier;
      81: areturn

  protected static long randomBetween(long, long);
    Code:
       0: lload_0
       1: lload_2
       2: lcmp
       3: ifne          8
       6: lload_0
       7: lreturn
       8: invokestatic  #36                 // Method java/util/concurrent/ThreadLocalRandom.current:()Ljava/util/concurrent/ThreadLocalRandom;
      11: lload_0
      12: lload_2
      13: invokevirtual #37                 // Method java/util/concurrent/ThreadLocalRandom.nextLong:(JJ)J
      16: lreturn

  protected static java.time.Duration applyBounds(java.time.Duration, java.time.Duration, java.time.Duration);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #38                 // Method java/time/Duration.compareTo:(Ljava/time/Duration;)I
       5: ifge          10
       8: aload_1
       9: areturn
      10: aload_0
      11: aload_2
      12: invokevirtual #38                 // Method java/time/Duration.compareTo:(Ljava/time/Duration;)I
      15: ifle          20
      18: aload_2
      19: areturn
      20: aload_0
      21: areturn

  private static io.lettuce.core.resource.Delay lambda$decorrelatedJitter$0(java.time.Duration, java.time.Duration, long, java.util.concurrent.TimeUnit);
    Code:
       0: new           #39                 // class io/lettuce/core/resource/DecorrelatedJitterDelay
       3: dup
       4: aload_0
       5: aload_1
       6: lload_2
       7: aload         4
       9: invokespecial #40                 // Method io/lettuce/core/resource/DecorrelatedJitterDelay."<init>":(Ljava/time/Duration;Ljava/time/Duration;JLjava/util/concurrent/TimeUnit;)V
      12: areturn

  static {};
    Code:
       0: getstatic     #41                 // Field java/time/Duration.ZERO:Ljava/time/Duration;
       3: putstatic     #13                 // Field DEFAULT_LOWER_BOUND:Ljava/time/Duration;
       6: ldc2_w        #42                 // long 30l
       9: invokestatic  #44                 // Method java/time/Duration.ofSeconds:(J)Ljava/time/Duration;
      12: putstatic     #14                 // Field DEFAULT_UPPER_BOUND:Ljava/time/Duration;
      15: iconst_2
      16: putstatic     #15                 // Field DEFAULT_POWER_OF:I
      19: getstatic     #45                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      22: putstatic     #16                 // Field DEFAULT_TIMEUNIT:Ljava/util/concurrent/TimeUnit;
      25: return
}
