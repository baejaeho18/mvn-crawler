Compiled from "RedisClusterReactiveCommands.java"
public interface io.lettuce.core.cluster.api.reactive.RedisClusterReactiveCommands<K, V> extends io.lettuce.core.api.reactive.RedisHashReactiveCommands<K, V>, io.lettuce.core.api.reactive.RedisKeyReactiveCommands<K, V>, io.lettuce.core.api.reactive.RedisStringReactiveCommands<K, V>, io.lettuce.core.api.reactive.RedisListReactiveCommands<K, V>, io.lettuce.core.api.reactive.RedisSetReactiveCommands<K, V>, io.lettuce.core.api.reactive.RedisSortedSetReactiveCommands<K, V>, io.lettuce.core.api.reactive.RedisScriptingReactiveCommands<K, V>, io.lettuce.core.api.reactive.RedisServerReactiveCommands<K, V>, io.lettuce.core.api.reactive.RedisHLLReactiveCommands<K, V>, io.lettuce.core.api.reactive.RedisGeoReactiveCommands<K, V>, io.lettuce.core.api.reactive.BaseRedisReactiveCommands<K, V> {
  public abstract void setTimeout(java.time.Duration);

  public abstract void setTimeout(long, java.util.concurrent.TimeUnit);

  public abstract reactor.core.publisher.Mono<java.lang.String> auth(java.lang.String);

  public abstract reactor.core.publisher.Mono<java.lang.String> clusterBumpepoch();

  public abstract reactor.core.publisher.Mono<java.lang.String> clusterMeet(java.lang.String, int);

  public abstract reactor.core.publisher.Mono<java.lang.String> clusterForget(java.lang.String);

  public abstract reactor.core.publisher.Mono<java.lang.String> clusterAddSlots(int...);

  public abstract reactor.core.publisher.Mono<java.lang.String> clusterDelSlots(int...);

  public abstract reactor.core.publisher.Mono<java.lang.String> clusterSetSlotNode(int, java.lang.String);

  public abstract reactor.core.publisher.Mono<java.lang.String> clusterSetSlotStable(int);

  public abstract reactor.core.publisher.Mono<java.lang.String> clusterSetSlotMigrating(int, java.lang.String);

  public abstract reactor.core.publisher.Mono<java.lang.String> clusterSetSlotImporting(int, java.lang.String);

  public abstract reactor.core.publisher.Mono<java.lang.String> clusterInfo();

  public abstract reactor.core.publisher.Mono<java.lang.String> clusterMyId();

  public abstract reactor.core.publisher.Mono<java.lang.String> clusterNodes();

  public abstract reactor.core.publisher.Flux<java.lang.String> clusterSlaves(java.lang.String);

  public abstract reactor.core.publisher.Flux<K> clusterGetKeysInSlot(int, int);

  public abstract reactor.core.publisher.Mono<java.lang.Long> clusterCountKeysInSlot(int);

  public abstract reactor.core.publisher.Mono<java.lang.Long> clusterCountFailureReports(java.lang.String);

  public abstract reactor.core.publisher.Mono<java.lang.Long> clusterKeyslot(K);

  public abstract reactor.core.publisher.Mono<java.lang.String> clusterSaveconfig();

  public abstract reactor.core.publisher.Mono<java.lang.String> clusterSetConfigEpoch(long);

  public abstract reactor.core.publisher.Flux<java.lang.Object> clusterSlots();

  public abstract reactor.core.publisher.Mono<java.lang.String> asking();

  public abstract reactor.core.publisher.Mono<java.lang.String> clusterReplicate(java.lang.String);

  public abstract reactor.core.publisher.Mono<java.lang.String> clusterFailover(boolean);

  public abstract reactor.core.publisher.Mono<java.lang.String> clusterReset(boolean);

  public abstract reactor.core.publisher.Mono<java.lang.String> clusterFlushslots();

  public abstract reactor.core.publisher.Mono<java.lang.String> readOnly();

  public abstract reactor.core.publisher.Mono<java.lang.String> readWrite();

  public abstract reactor.core.publisher.Mono<java.lang.Long> del(K...);

  public abstract reactor.core.publisher.Flux<io.lettuce.core.KeyValue<K, V>> mget(K...);

  public abstract reactor.core.publisher.Mono<java.lang.String> mset(java.util.Map<K, V>);

  public abstract reactor.core.publisher.Mono<java.lang.Boolean> msetnx(java.util.Map<K, V>);
}
