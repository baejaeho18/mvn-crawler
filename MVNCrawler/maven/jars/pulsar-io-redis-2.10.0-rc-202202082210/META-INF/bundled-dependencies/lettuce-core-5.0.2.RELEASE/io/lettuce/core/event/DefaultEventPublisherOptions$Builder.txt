Compiled from "DefaultEventPublisherOptions.java"
public class io.lettuce.core.event.DefaultEventPublisherOptions$Builder {
  private java.time.Duration eventEmitInterval;

  private io.lettuce.core.event.DefaultEventPublisherOptions$Builder();
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: getstatic     #4                  // Field io/lettuce/core/event/DefaultEventPublisherOptions.DEFAULT_EMIT_INTERVAL_DURATION:Ljava/time/Duration;
       8: putfield      #1                  // Field eventEmitInterval:Ljava/time/Duration;
      11: return

  public io.lettuce.core.event.DefaultEventPublisherOptions$Builder eventEmitInterval(java.time.Duration);
    Code:
       0: aload_1
       1: ldc           #5                  // String EventEmitInterval must not be null
       3: invokestatic  #6                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_1
       7: invokevirtual #7                  // Method java/time/Duration.isNegative:()Z
      10: ifne          17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ldc           #8                  // String EventEmitInterval must be greater or equal to 0
      20: invokestatic  #9                  // Method io/lettuce/core/internal/LettuceAssert.isTrue:(ZLjava/lang/String;)V
      23: aload_0
      24: aload_1
      25: putfield      #1                  // Field eventEmitInterval:Ljava/time/Duration;
      28: aload_0
      29: areturn

  public io.lettuce.core.event.DefaultEventPublisherOptions$Builder eventEmitInterval(long, java.util.concurrent.TimeUnit);
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: iflt          10
       6: iconst_1
       7: goto          11
      10: iconst_0
      11: ldc           #8                  // String EventEmitInterval must be greater or equal to 0
      13: invokestatic  #9                  // Method io/lettuce/core/internal/LettuceAssert.isTrue:(ZLjava/lang/String;)V
      16: aload_3
      17: ldc           #10                 // String EventEmitIntervalUnit must not be null
      19: invokestatic  #6                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      22: aload_0
      23: aload_3
      24: lload_1
      25: invokevirtual #11                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      28: invokestatic  #12                 // Method java/time/Duration.ofNanos:(J)Ljava/time/Duration;
      31: invokevirtual #13                 // Method eventEmitInterval:(Ljava/time/Duration;)Lio/lettuce/core/event/DefaultEventPublisherOptions$Builder;
      34: areturn

  public io.lettuce.core.event.DefaultEventPublisherOptions build();
    Code:
       0: new           #14                 // class io/lettuce/core/event/DefaultEventPublisherOptions
       3: dup
       4: aload_0
       5: aconst_null
       6: invokespecial #15                 // Method io/lettuce/core/event/DefaultEventPublisherOptions."<init>":(Lio/lettuce/core/event/DefaultEventPublisherOptions$Builder;Lio/lettuce/core/event/DefaultEventPublisherOptions$1;)V
       9: areturn

  io.lettuce.core.event.DefaultEventPublisherOptions$Builder(io.lettuce.core.event.DefaultEventPublisherOptions$1);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method "<init>":()V
       4: return

  static java.time.Duration access$100(io.lettuce.core.event.DefaultEventPublisherOptions$Builder);
    Code:
       0: aload_0
       1: getfield      #1                  // Field eventEmitInterval:Ljava/time/Duration;
       4: areturn
}
