Compiled from "RedisAdvancedClusterReactiveCommandsImpl.java"
public class io.lettuce.core.cluster.RedisAdvancedClusterReactiveCommandsImpl<K, V> extends io.lettuce.core.AbstractRedisReactiveCommands<K, V> implements io.lettuce.core.cluster.api.reactive.RedisAdvancedClusterReactiveCommands<K, V> {
  private static final java.util.function.Predicate<io.lettuce.core.cluster.models.partitions.RedisClusterNode> ALL_NODES;

  private final io.lettuce.core.codec.RedisCodec<K, V> codec;

  public io.lettuce.core.cluster.RedisAdvancedClusterReactiveCommandsImpl(io.lettuce.core.cluster.StatefulRedisClusterConnectionImpl<K, V>, io.lettuce.core.codec.RedisCodec<K, V>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #3                  // Method io/lettuce/core/AbstractRedisReactiveCommands."<init>":(Lio/lettuce/core/api/StatefulConnection;Lio/lettuce/core/codec/RedisCodec;)V
       6: aload_0
       7: aload_2
       8: putfield      #4                  // Field codec:Lio/lettuce/core/codec/RedisCodec;
      11: return

  public reactor.core.publisher.Mono<java.lang.String> clientSetname(K);
    Code:
       0: new           #5                  // class java/util/ArrayList
       3: dup
       4: invokespecial #6                  // Method java/util/ArrayList."<init>":()V
       7: astore_2
       8: aload_2
       9: aload_0
      10: aload_1
      11: invokespecial #7                  // Method io/lettuce/core/AbstractRedisReactiveCommands.clientSetname:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
      14: invokeinterface #8,  2            // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      19: pop
      20: aload_0
      21: invokevirtual #9                  // Method getStatefulConnection:()Lio/lettuce/core/cluster/StatefulRedisClusterConnectionImpl;
      24: invokevirtual #10                 // Method io/lettuce/core/cluster/StatefulRedisClusterConnectionImpl.getPartitions:()Lio/lettuce/core/cluster/models/partitions/Partitions;
      27: invokevirtual #11                 // Method io/lettuce/core/cluster/models/partitions/Partitions.iterator:()Ljava/util/Iterator;
      30: astore_3
      31: aload_3
      32: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      37: ifeq          123
      40: aload_3
      41: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      46: checkcast     #14                 // class io/lettuce/core/cluster/models/partitions/RedisClusterNode
      49: astore        4
      51: aload_0
      52: aload         4
      54: invokevirtual #15                 // Method io/lettuce/core/cluster/models/partitions/RedisClusterNode.getNodeId:()Ljava/lang/String;
      57: invokespecial #16                 // Method getConnectionReactive:(Ljava/lang/String;)Lreactor/core/publisher/Mono;
      60: astore        5
      62: aload_2
      63: aload         5
      65: aload_1
      66: invokedynamic #17,  0             // InvokeDynamic #0:apply:(Ljava/lang/Object;)Ljava/util/function/Function;
      71: invokevirtual #18                 // Method reactor/core/publisher/Mono.flatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      74: invokeinterface #8,  2            // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      79: pop
      80: aload_0
      81: aload         4
      83: invokevirtual #19                 // Method io/lettuce/core/cluster/models/partitions/RedisClusterNode.getUri:()Lio/lettuce/core/RedisURI;
      86: invokevirtual #20                 // Method io/lettuce/core/RedisURI.getHost:()Ljava/lang/String;
      89: aload         4
      91: invokevirtual #19                 // Method io/lettuce/core/cluster/models/partitions/RedisClusterNode.getUri:()Lio/lettuce/core/RedisURI;
      94: invokevirtual #21                 // Method io/lettuce/core/RedisURI.getPort:()I
      97: invokespecial #22                 // Method getConnectionReactive:(Ljava/lang/String;I)Lreactor/core/publisher/Mono;
     100: astore        6
     102: aload_2
     103: aload         6
     105: aload_1
     106: invokedynamic #23,  0             // InvokeDynamic #1:apply:(Ljava/lang/Object;)Ljava/util/function/Function;
     111: invokevirtual #18                 // Method reactor/core/publisher/Mono.flatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
     114: invokeinterface #8,  2            // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     119: pop
     120: goto          31
     123: aload_2
     124: invokestatic  #24                 // Method reactor/core/publisher/Flux.merge:(Ljava/lang/Iterable;)Lreactor/core/publisher/Flux;
     127: invokevirtual #25                 // Method reactor/core/publisher/Flux.last:()Lreactor/core/publisher/Mono;
     130: areturn

  public reactor.core.publisher.Mono<java.lang.Long> clusterCountKeysInSlot(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #26                 // Method findConnectionBySlotReactive:(I)Lreactor/core/publisher/Mono;
       5: astore_2
       6: aload_2
       7: iload_1
       8: invokedynamic #27,  0             // InvokeDynamic #2:apply:(I)Ljava/util/function/Function;
      13: invokevirtual #18                 // Method reactor/core/publisher/Mono.flatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      16: areturn

  public reactor.core.publisher.Flux<K> clusterGetKeysInSlot(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #26                 // Method findConnectionBySlotReactive:(I)Lreactor/core/publisher/Mono;
       5: astore_3
       6: aload_3
       7: iload_1
       8: iload_2
       9: invokedynamic #28,  0             // InvokeDynamic #3:apply:(II)Ljava/util/function/Function;
      14: invokevirtual #29                 // Method reactor/core/publisher/Mono.flatMapMany:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      17: areturn

  public reactor.core.publisher.Mono<java.lang.Long> dbsize();
    Code:
       0: aload_0
       1: invokedynamic #30,  0             // InvokeDynamic #4:apply:()Ljava/util/function/Function;
       6: invokevirtual #31                 // Method executeOnMasters:(Ljava/util/function/Function;)Ljava/util/Map;
       9: astore_1
      10: aload_1
      11: invokeinterface #32,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
      16: invokestatic  #24                 // Method reactor/core/publisher/Flux.merge:(Ljava/lang/Iterable;)Lreactor/core/publisher/Flux;
      19: invokedynamic #33,  0             // InvokeDynamic #5:apply:()Ljava/util/function/BiFunction;
      24: invokevirtual #34                 // Method reactor/core/publisher/Flux.reduce:(Ljava/util/function/BiFunction;)Lreactor/core/publisher/Mono;
      27: areturn

  public reactor.core.publisher.Mono<java.lang.Long> del(K...);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #35                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
       5: invokevirtual #36                 // Method del:(Ljava/lang/Iterable;)Lreactor/core/publisher/Mono;
       8: areturn

  public reactor.core.publisher.Mono<java.lang.Long> del(java.lang.Iterable<K>);
    Code:
       0: aload_0
       1: getfield      #4                  // Field codec:Lio/lettuce/core/codec/RedisCodec;
       4: aload_1
       5: invokestatic  #37                 // Method io/lettuce/core/cluster/SlotHash.partition:(Lio/lettuce/core/codec/RedisCodec;Ljava/lang/Iterable;)Ljava/util/Map;
       8: astore_2
       9: aload_2
      10: invokeinterface #38,  1           // InterfaceMethod java/util/Map.size:()I
      15: iconst_2
      16: if_icmpge     25
      19: aload_0
      20: aload_1
      21: invokespecial #39                 // Method io/lettuce/core/AbstractRedisReactiveCommands.del:(Ljava/lang/Iterable;)Lreactor/core/publisher/Mono;
      24: areturn
      25: new           #5                  // class java/util/ArrayList
      28: dup
      29: invokespecial #6                  // Method java/util/ArrayList."<init>":()V
      32: astore_3
      33: aload_2
      34: invokeinterface #40,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      39: invokeinterface #41,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      44: astore        4
      46: aload         4
      48: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      53: ifeq          92
      56: aload         4
      58: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      63: checkcast     #42                 // class java/util/Map$Entry
      66: astore        5
      68: aload_3
      69: aload_0
      70: aload         5
      72: invokeinterface #43,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      77: checkcast     #44                 // class java/lang/Iterable
      80: invokespecial #39                 // Method io/lettuce/core/AbstractRedisReactiveCommands.del:(Ljava/lang/Iterable;)Lreactor/core/publisher/Mono;
      83: invokeinterface #8,  2            // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      88: pop
      89: goto          46
      92: aload_3
      93: invokestatic  #24                 // Method reactor/core/publisher/Flux.merge:(Ljava/lang/Iterable;)Lreactor/core/publisher/Flux;
      96: invokedynamic #45,  0             // InvokeDynamic #6:apply:()Ljava/util/function/BiFunction;
     101: invokevirtual #34                 // Method reactor/core/publisher/Flux.reduce:(Ljava/util/function/BiFunction;)Lreactor/core/publisher/Mono;
     104: areturn

  public reactor.core.publisher.Mono<java.lang.Long> exists(K...);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #35                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
       5: invokevirtual #46                 // Method exists:(Ljava/lang/Iterable;)Lreactor/core/publisher/Mono;
       8: areturn

  public reactor.core.publisher.Mono<java.lang.Long> exists(java.lang.Iterable<K>);
    Code:
       0: aload_1
       1: invokestatic  #47                 // Method io/lettuce/core/internal/LettuceLists.newList:(Ljava/lang/Iterable;)Ljava/util/List;
       4: astore_2
       5: aload_0
       6: getfield      #4                  // Field codec:Lio/lettuce/core/codec/RedisCodec;
       9: aload_2
      10: invokestatic  #37                 // Method io/lettuce/core/cluster/SlotHash.partition:(Lio/lettuce/core/codec/RedisCodec;Ljava/lang/Iterable;)Ljava/util/Map;
      13: astore_3
      14: aload_3
      15: invokeinterface #38,  1           // InterfaceMethod java/util/Map.size:()I
      20: iconst_2
      21: if_icmpge     30
      24: aload_0
      25: aload_2
      26: invokespecial #48                 // Method io/lettuce/core/AbstractRedisReactiveCommands.exists:(Ljava/lang/Iterable;)Lreactor/core/publisher/Mono;
      29: areturn
      30: new           #5                  // class java/util/ArrayList
      33: dup
      34: invokespecial #6                  // Method java/util/ArrayList."<init>":()V
      37: astore        4
      39: aload_3
      40: invokeinterface #40,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      45: invokeinterface #41,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      50: astore        5
      52: aload         5
      54: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      59: ifeq          99
      62: aload         5
      64: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      69: checkcast     #42                 // class java/util/Map$Entry
      72: astore        6
      74: aload         4
      76: aload_0
      77: aload         6
      79: invokeinterface #43,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      84: checkcast     #44                 // class java/lang/Iterable
      87: invokespecial #48                 // Method io/lettuce/core/AbstractRedisReactiveCommands.exists:(Ljava/lang/Iterable;)Lreactor/core/publisher/Mono;
      90: invokeinterface #8,  2            // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      95: pop
      96: goto          52
      99: aload         4
     101: invokestatic  #24                 // Method reactor/core/publisher/Flux.merge:(Ljava/lang/Iterable;)Lreactor/core/publisher/Flux;
     104: invokedynamic #49,  0             // InvokeDynamic #7:apply:()Ljava/util/function/BiFunction;
     109: invokevirtual #34                 // Method reactor/core/publisher/Flux.reduce:(Ljava/util/function/BiFunction;)Lreactor/core/publisher/Mono;
     112: areturn

  public reactor.core.publisher.Mono<java.lang.String> flushall();
    Code:
       0: aload_0
       1: invokedynamic #50,  0             // InvokeDynamic #8:apply:()Ljava/util/function/Function;
       6: invokevirtual #31                 // Method executeOnMasters:(Ljava/util/function/Function;)Ljava/util/Map;
       9: astore_1
      10: aload_1
      11: invokeinterface #32,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
      16: invokestatic  #24                 // Method reactor/core/publisher/Flux.merge:(Ljava/lang/Iterable;)Lreactor/core/publisher/Flux;
      19: invokevirtual #25                 // Method reactor/core/publisher/Flux.last:()Lreactor/core/publisher/Mono;
      22: areturn

  public reactor.core.publisher.Mono<java.lang.String> flushdb();
    Code:
       0: aload_0
       1: invokedynamic #51,  0             // InvokeDynamic #9:apply:()Ljava/util/function/Function;
       6: invokevirtual #31                 // Method executeOnMasters:(Ljava/util/function/Function;)Ljava/util/Map;
       9: astore_1
      10: aload_1
      11: invokeinterface #32,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
      16: invokestatic  #24                 // Method reactor/core/publisher/Flux.merge:(Ljava/lang/Iterable;)Lreactor/core/publisher/Flux;
      19: invokevirtual #25                 // Method reactor/core/publisher/Flux.last:()Lreactor/core/publisher/Mono;
      22: areturn

  public reactor.core.publisher.Flux<V> georadius(K, double, double, double, io.lettuce.core.GeoArgs$Unit);
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method getStatefulConnection:()Lio/lettuce/core/cluster/StatefulRedisClusterConnectionImpl;
       4: invokevirtual #52                 // Method io/lettuce/core/cluster/StatefulRedisClusterConnectionImpl.getState:()Lio/lettuce/core/cluster/RedisState;
       7: getstatic     #53                 // Field io/lettuce/core/protocol/CommandType.GEORADIUS_RO:Lio/lettuce/core/protocol/CommandType;
      10: invokevirtual #54                 // Method io/lettuce/core/cluster/RedisState.hasCommand:(Lio/lettuce/core/protocol/ProtocolKeyword;)Z
      13: ifeq          29
      16: aload_0
      17: aload_1
      18: dload_2
      19: dload         4
      21: dload         6
      23: aload         8
      25: invokespecial #55                 // Method io/lettuce/core/AbstractRedisReactiveCommands.georadius_ro:(Ljava/lang/Object;DDDLio/lettuce/core/GeoArgs$Unit;)Lreactor/core/publisher/Flux;
      28: areturn
      29: aload_0
      30: aload_1
      31: dload_2
      32: dload         4
      34: dload         6
      36: aload         8
      38: invokespecial #56                 // Method io/lettuce/core/AbstractRedisReactiveCommands.georadius:(Ljava/lang/Object;DDDLio/lettuce/core/GeoArgs$Unit;)Lreactor/core/publisher/Flux;
      41: areturn

  public reactor.core.publisher.Flux<io.lettuce.core.GeoWithin<V>> georadius(K, double, double, double, io.lettuce.core.GeoArgs$Unit, io.lettuce.core.GeoArgs);
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method getStatefulConnection:()Lio/lettuce/core/cluster/StatefulRedisClusterConnectionImpl;
       4: invokevirtual #52                 // Method io/lettuce/core/cluster/StatefulRedisClusterConnectionImpl.getState:()Lio/lettuce/core/cluster/RedisState;
       7: getstatic     #53                 // Field io/lettuce/core/protocol/CommandType.GEORADIUS_RO:Lio/lettuce/core/protocol/CommandType;
      10: invokevirtual #54                 // Method io/lettuce/core/cluster/RedisState.hasCommand:(Lio/lettuce/core/protocol/ProtocolKeyword;)Z
      13: ifeq          31
      16: aload_0
      17: aload_1
      18: dload_2
      19: dload         4
      21: dload         6
      23: aload         8
      25: aload         9
      27: invokespecial #57                 // Method io/lettuce/core/AbstractRedisReactiveCommands.georadius_ro:(Ljava/lang/Object;DDDLio/lettuce/core/GeoArgs$Unit;Lio/lettuce/core/GeoArgs;)Lreactor/core/publisher/Flux;
      30: areturn
      31: aload_0
      32: aload_1
      33: dload_2
      34: dload         4
      36: dload         6
      38: aload         8
      40: aload         9
      42: invokespecial #58                 // Method io/lettuce/core/AbstractRedisReactiveCommands.georadius:(Ljava/lang/Object;DDDLio/lettuce/core/GeoArgs$Unit;Lio/lettuce/core/GeoArgs;)Lreactor/core/publisher/Flux;
      45: areturn

  public reactor.core.publisher.Flux<V> georadiusbymember(K, V, double, io.lettuce.core.GeoArgs$Unit);
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method getStatefulConnection:()Lio/lettuce/core/cluster/StatefulRedisClusterConnectionImpl;
       4: invokevirtual #52                 // Method io/lettuce/core/cluster/StatefulRedisClusterConnectionImpl.getState:()Lio/lettuce/core/cluster/RedisState;
       7: getstatic     #59                 // Field io/lettuce/core/protocol/CommandType.GEORADIUSBYMEMBER_RO:Lio/lettuce/core/protocol/CommandType;
      10: invokevirtual #54                 // Method io/lettuce/core/cluster/RedisState.hasCommand:(Lio/lettuce/core/protocol/ProtocolKeyword;)Z
      13: ifeq          26
      16: aload_0
      17: aload_1
      18: aload_2
      19: dload_3
      20: aload         5
      22: invokespecial #60                 // Method io/lettuce/core/AbstractRedisReactiveCommands.georadiusbymember_ro:(Ljava/lang/Object;Ljava/lang/Object;DLio/lettuce/core/GeoArgs$Unit;)Lreactor/core/publisher/Flux;
      25: areturn
      26: aload_0
      27: aload_1
      28: aload_2
      29: dload_3
      30: aload         5
      32: invokespecial #61                 // Method io/lettuce/core/AbstractRedisReactiveCommands.georadiusbymember:(Ljava/lang/Object;Ljava/lang/Object;DLio/lettuce/core/GeoArgs$Unit;)Lreactor/core/publisher/Flux;
      35: areturn

  public reactor.core.publisher.Flux<io.lettuce.core.GeoWithin<V>> georadiusbymember(K, V, double, io.lettuce.core.GeoArgs$Unit, io.lettuce.core.GeoArgs);
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method getStatefulConnection:()Lio/lettuce/core/cluster/StatefulRedisClusterConnectionImpl;
       4: invokevirtual #52                 // Method io/lettuce/core/cluster/StatefulRedisClusterConnectionImpl.getState:()Lio/lettuce/core/cluster/RedisState;
       7: getstatic     #59                 // Field io/lettuce/core/protocol/CommandType.GEORADIUSBYMEMBER_RO:Lio/lettuce/core/protocol/CommandType;
      10: invokevirtual #54                 // Method io/lettuce/core/cluster/RedisState.hasCommand:(Lio/lettuce/core/protocol/ProtocolKeyword;)Z
      13: ifeq          28
      16: aload_0
      17: aload_1
      18: aload_2
      19: dload_3
      20: aload         5
      22: aload         6
      24: invokespecial #62                 // Method io/lettuce/core/AbstractRedisReactiveCommands.georadiusbymember_ro:(Ljava/lang/Object;Ljava/lang/Object;DLio/lettuce/core/GeoArgs$Unit;Lio/lettuce/core/GeoArgs;)Lreactor/core/publisher/Flux;
      27: areturn
      28: aload_0
      29: aload_1
      30: aload_2
      31: dload_3
      32: aload         5
      34: aload         6
      36: invokespecial #63                 // Method io/lettuce/core/AbstractRedisReactiveCommands.georadiusbymember:(Ljava/lang/Object;Ljava/lang/Object;DLio/lettuce/core/GeoArgs$Unit;Lio/lettuce/core/GeoArgs;)Lreactor/core/publisher/Flux;
      39: areturn

  public reactor.core.publisher.Flux<K> keys(K);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #64,  0             // InvokeDynamic #10:apply:(Ljava/lang/Object;)Ljava/util/function/Function;
       7: invokevirtual #31                 // Method executeOnMasters:(Ljava/util/function/Function;)Ljava/util/Map;
      10: astore_2
      11: aload_2
      12: invokeinterface #32,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
      17: invokestatic  #24                 // Method reactor/core/publisher/Flux.merge:(Ljava/lang/Iterable;)Lreactor/core/publisher/Flux;
      20: areturn

  public reactor.core.publisher.Mono<java.lang.Long> keys(io.lettuce.core.output.KeyStreamingChannel<K>, K);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokedynamic #65,  0             // InvokeDynamic #11:apply:(Lio/lettuce/core/output/KeyStreamingChannel;Ljava/lang/Object;)Ljava/util/function/Function;
       8: invokevirtual #31                 // Method executeOnMasters:(Ljava/util/function/Function;)Ljava/util/Map;
      11: astore_3
      12: aload_3
      13: invokeinterface #32,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
      18: invokestatic  #24                 // Method reactor/core/publisher/Flux.merge:(Ljava/lang/Iterable;)Lreactor/core/publisher/Flux;
      21: invokedynamic #66,  0             // InvokeDynamic #12:apply:()Ljava/util/function/BiFunction;
      26: invokevirtual #34                 // Method reactor/core/publisher/Flux.reduce:(Ljava/util/function/BiFunction;)Lreactor/core/publisher/Mono;
      29: areturn

  public reactor.core.publisher.Flux<io.lettuce.core.KeyValue<K, V>> mget(K...);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #35                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
       5: invokevirtual #67                 // Method mget:(Ljava/lang/Iterable;)Lreactor/core/publisher/Flux;
       8: areturn

  public reactor.core.publisher.Flux<io.lettuce.core.KeyValue<K, V>> mget(java.lang.Iterable<K>);
    Code:
       0: aload_1
       1: invokestatic  #47                 // Method io/lettuce/core/internal/LettuceLists.newList:(Ljava/lang/Iterable;)Ljava/util/List;
       4: astore_2
       5: aload_0
       6: getfield      #4                  // Field codec:Lio/lettuce/core/codec/RedisCodec;
       9: aload_2
      10: invokestatic  #37                 // Method io/lettuce/core/cluster/SlotHash.partition:(Lio/lettuce/core/codec/RedisCodec;Ljava/lang/Iterable;)Ljava/util/Map;
      13: astore_3
      14: aload_3
      15: invokeinterface #38,  1           // InterfaceMethod java/util/Map.size:()I
      20: iconst_2
      21: if_icmpge     30
      24: aload_0
      25: aload_2
      26: invokespecial #68                 // Method io/lettuce/core/AbstractRedisReactiveCommands.mget:(Ljava/lang/Iterable;)Lreactor/core/publisher/Flux;
      29: areturn
      30: new           #5                  // class java/util/ArrayList
      33: dup
      34: invokespecial #6                  // Method java/util/ArrayList."<init>":()V
      37: astore        4
      39: aload_3
      40: invokeinterface #40,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      45: invokeinterface #41,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      50: astore        5
      52: aload         5
      54: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      59: ifeq          99
      62: aload         5
      64: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      69: checkcast     #42                 // class java/util/Map$Entry
      72: astore        6
      74: aload         4
      76: aload_0
      77: aload         6
      79: invokeinterface #43,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      84: checkcast     #44                 // class java/lang/Iterable
      87: invokespecial #68                 // Method io/lettuce/core/AbstractRedisReactiveCommands.mget:(Ljava/lang/Iterable;)Lreactor/core/publisher/Flux;
      90: invokeinterface #8,  2            // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      95: pop
      96: goto          52
      99: aload         4
     101: invokestatic  #69                 // Method reactor/core/publisher/Flux.concat:(Ljava/lang/Iterable;)Lreactor/core/publisher/Flux;
     104: astore        5
     106: aload         5
     108: invokevirtual #70                 // Method reactor/core/publisher/Flux.collectList:()Lreactor/core/publisher/Mono;
     111: aload_3
     112: aload_2
     113: invokedynamic #71,  0             // InvokeDynamic #13:apply:(Ljava/util/Map;Ljava/util/List;)Ljava/util/function/Function;
     118: invokevirtual #72                 // Method reactor/core/publisher/Mono.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
     121: astore        6
     123: aload         6
     125: invokedynamic #73,  0             // InvokeDynamic #14:apply:()Ljava/util/function/Function;
     130: invokevirtual #74                 // Method reactor/core/publisher/Mono.flatMapIterable:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
     133: areturn

  public reactor.core.publisher.Mono<java.lang.Long> mget(io.lettuce.core.output.KeyValueStreamingChannel<K, V>, K...);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #35                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
       6: invokevirtual #75                 // Method mget:(Lio/lettuce/core/output/KeyValueStreamingChannel;Ljava/lang/Iterable;)Lreactor/core/publisher/Mono;
       9: areturn

  public reactor.core.publisher.Mono<java.lang.Long> mget(io.lettuce.core.output.KeyValueStreamingChannel<K, V>, java.lang.Iterable<K>);
    Code:
       0: aload_2
       1: invokestatic  #47                 // Method io/lettuce/core/internal/LettuceLists.newList:(Ljava/lang/Iterable;)Ljava/util/List;
       4: astore_3
       5: aload_0
       6: getfield      #4                  // Field codec:Lio/lettuce/core/codec/RedisCodec;
       9: aload_3
      10: invokestatic  #37                 // Method io/lettuce/core/cluster/SlotHash.partition:(Lio/lettuce/core/codec/RedisCodec;Ljava/lang/Iterable;)Ljava/util/Map;
      13: astore        4
      15: aload         4
      17: invokeinterface #38,  1           // InterfaceMethod java/util/Map.size:()I
      22: iconst_2
      23: if_icmpge     33
      26: aload_0
      27: aload_1
      28: aload_3
      29: invokespecial #76                 // Method io/lettuce/core/AbstractRedisReactiveCommands.mget:(Lio/lettuce/core/output/KeyValueStreamingChannel;Ljava/lang/Iterable;)Lreactor/core/publisher/Mono;
      32: areturn
      33: new           #5                  // class java/util/ArrayList
      36: dup
      37: invokespecial #6                  // Method java/util/ArrayList."<init>":()V
      40: astore        5
      42: aload         4
      44: invokeinterface #40,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      49: invokeinterface #41,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      54: astore        6
      56: aload         6
      58: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      63: ifeq          104
      66: aload         6
      68: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      73: checkcast     #42                 // class java/util/Map$Entry
      76: astore        7
      78: aload         5
      80: aload_0
      81: aload_1
      82: aload         7
      84: invokeinterface #43,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      89: checkcast     #44                 // class java/lang/Iterable
      92: invokespecial #76                 // Method io/lettuce/core/AbstractRedisReactiveCommands.mget:(Lio/lettuce/core/output/KeyValueStreamingChannel;Ljava/lang/Iterable;)Lreactor/core/publisher/Mono;
      95: invokeinterface #8,  2            // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     100: pop
     101: goto          56
     104: aload         5
     106: invokestatic  #24                 // Method reactor/core/publisher/Flux.merge:(Ljava/lang/Iterable;)Lreactor/core/publisher/Flux;
     109: invokedynamic #77,  0             // InvokeDynamic #15:apply:()Ljava/util/function/BiFunction;
     114: invokevirtual #34                 // Method reactor/core/publisher/Flux.reduce:(Ljava/util/function/BiFunction;)Lreactor/core/publisher/Mono;
     117: areturn

  public reactor.core.publisher.Mono<java.lang.Boolean> msetnx(java.util.Map<K, V>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_0
       3: invokedynamic #78,  0             // InvokeDynamic #16:apply:(Lio/lettuce/core/cluster/RedisAdvancedClusterReactiveCommandsImpl;)Ljava/util/function/Function;
       8: invokedynamic #79,  0             // InvokeDynamic #17:apply:()Ljava/util/function/Function;
      13: invokespecial #80                 // Method pipeliningWithMap:(Ljava/util/Map;Ljava/util/function/Function;Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      16: invokedynamic #81,  0             // InvokeDynamic #18:apply:()Ljava/util/function/BiFunction;
      21: invokevirtual #34                 // Method reactor/core/publisher/Flux.reduce:(Ljava/util/function/BiFunction;)Lreactor/core/publisher/Mono;
      24: areturn

  public reactor.core.publisher.Mono<java.lang.String> mset(java.util.Map<K, V>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_0
       3: invokedynamic #82,  0             // InvokeDynamic #19:apply:(Lio/lettuce/core/cluster/RedisAdvancedClusterReactiveCommandsImpl;)Ljava/util/function/Function;
       8: invokedynamic #83,  0             // InvokeDynamic #20:apply:()Ljava/util/function/Function;
      13: invokespecial #80                 // Method pipeliningWithMap:(Ljava/util/Map;Ljava/util/function/Function;Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      16: invokevirtual #25                 // Method reactor/core/publisher/Flux.last:()Lreactor/core/publisher/Mono;
      19: areturn

  public reactor.core.publisher.Mono<V> randomkey();
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method getStatefulConnection:()Lio/lettuce/core/cluster/StatefulRedisClusterConnectionImpl;
       4: invokevirtual #10                 // Method io/lettuce/core/cluster/StatefulRedisClusterConnectionImpl.getPartitions:()Lio/lettuce/core/cluster/models/partitions/Partitions;
       7: astore_1
       8: invokestatic  #84                 // Method java/util/concurrent/ThreadLocalRandom.current:()Ljava/util/concurrent/ThreadLocalRandom;
      11: aload_1
      12: invokevirtual #85                 // Method io/lettuce/core/cluster/models/partitions/Partitions.size:()I
      15: invokevirtual #86                 // Method java/util/concurrent/ThreadLocalRandom.nextInt:(I)I
      18: istore_2
      19: aload_0
      20: aload_1
      21: iload_2
      22: invokevirtual #87                 // Method io/lettuce/core/cluster/models/partitions/Partitions.getPartition:(I)Lio/lettuce/core/cluster/models/partitions/RedisClusterNode;
      25: invokevirtual #15                 // Method io/lettuce/core/cluster/models/partitions/RedisClusterNode.getNodeId:()Ljava/lang/String;
      28: invokespecial #16                 // Method getConnectionReactive:(Ljava/lang/String;)Lreactor/core/publisher/Mono;
      31: astore_3
      32: aload_3
      33: invokedynamic #88,  0             // InvokeDynamic #21:apply:()Ljava/util/function/Function;
      38: invokevirtual #18                 // Method reactor/core/publisher/Mono.flatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      41: areturn

  public reactor.core.publisher.Mono<java.lang.String> scriptFlush();
    Code:
       0: aload_0
       1: invokedynamic #89,  0             // InvokeDynamic #22:apply:()Ljava/util/function/Function;
       6: getstatic     #90                 // Field ALL_NODES:Ljava/util/function/Predicate;
       9: invokevirtual #91                 // Method executeOnNodes:(Ljava/util/function/Function;Ljava/util/function/Predicate;)Ljava/util/Map;
      12: astore_1
      13: aload_1
      14: invokeinterface #32,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
      19: invokestatic  #24                 // Method reactor/core/publisher/Flux.merge:(Ljava/lang/Iterable;)Lreactor/core/publisher/Flux;
      22: invokevirtual #25                 // Method reactor/core/publisher/Flux.last:()Lreactor/core/publisher/Mono;
      25: areturn

  public reactor.core.publisher.Mono<java.lang.String> scriptKill();
    Code:
       0: aload_0
       1: invokedynamic #89,  0             // InvokeDynamic #22:apply:()Ljava/util/function/Function;
       6: getstatic     #90                 // Field ALL_NODES:Ljava/util/function/Predicate;
       9: invokevirtual #91                 // Method executeOnNodes:(Ljava/util/function/Function;Ljava/util/function/Predicate;)Ljava/util/Map;
      12: astore_1
      13: aload_1
      14: invokeinterface #32,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
      19: invokestatic  #24                 // Method reactor/core/publisher/Flux.merge:(Ljava/lang/Iterable;)Lreactor/core/publisher/Flux;
      22: ldc           #92                 // String OK
      24: invokevirtual #93                 // Method reactor/core/publisher/Flux.onErrorReturn:(Ljava/lang/Object;)Lreactor/core/publisher/Flux;
      27: invokevirtual #25                 // Method reactor/core/publisher/Flux.last:()Lreactor/core/publisher/Mono;
      30: areturn

  public reactor.core.publisher.Mono<java.lang.String> scriptLoad(V);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #94,  0             // InvokeDynamic #23:apply:(Ljava/lang/Object;)Ljava/util/function/Function;
       7: getstatic     #90                 // Field ALL_NODES:Ljava/util/function/Predicate;
      10: invokevirtual #91                 // Method executeOnNodes:(Ljava/util/function/Function;Ljava/util/function/Predicate;)Ljava/util/Map;
      13: astore_2
      14: aload_2
      15: invokeinterface #32,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
      20: invokestatic  #24                 // Method reactor/core/publisher/Flux.merge:(Ljava/lang/Iterable;)Lreactor/core/publisher/Flux;
      23: invokevirtual #25                 // Method reactor/core/publisher/Flux.last:()Lreactor/core/publisher/Mono;
      26: areturn

  public reactor.core.publisher.Mono<java.lang.Void> shutdown(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokedynamic #95,  0             // InvokeDynamic #24:apply:(Z)Ljava/util/function/Function;
       7: getstatic     #90                 // Field ALL_NODES:Ljava/util/function/Predicate;
      10: invokevirtual #91                 // Method executeOnNodes:(Ljava/util/function/Function;Ljava/util/function/Predicate;)Ljava/util/Map;
      13: astore_2
      14: aload_2
      15: invokeinterface #32,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
      20: invokestatic  #24                 // Method reactor/core/publisher/Flux.merge:(Ljava/lang/Iterable;)Lreactor/core/publisher/Flux;
      23: invokevirtual #96                 // Method reactor/core/publisher/Flux.then:()Lreactor/core/publisher/Mono;
      26: areturn

  public reactor.core.publisher.Mono<java.lang.Long> touch(K...);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #35                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
       5: invokevirtual #97                 // Method touch:(Ljava/lang/Iterable;)Lreactor/core/publisher/Mono;
       8: areturn

  public reactor.core.publisher.Mono<java.lang.Long> touch(java.lang.Iterable<K>);
    Code:
       0: aload_1
       1: invokestatic  #47                 // Method io/lettuce/core/internal/LettuceLists.newList:(Ljava/lang/Iterable;)Ljava/util/List;
       4: astore_2
       5: aload_0
       6: getfield      #4                  // Field codec:Lio/lettuce/core/codec/RedisCodec;
       9: aload_2
      10: invokestatic  #37                 // Method io/lettuce/core/cluster/SlotHash.partition:(Lio/lettuce/core/codec/RedisCodec;Ljava/lang/Iterable;)Ljava/util/Map;
      13: astore_3
      14: aload_3
      15: invokeinterface #38,  1           // InterfaceMethod java/util/Map.size:()I
      20: iconst_2
      21: if_icmpge     30
      24: aload_0
      25: aload_2
      26: invokespecial #98                 // Method io/lettuce/core/AbstractRedisReactiveCommands.touch:(Ljava/lang/Iterable;)Lreactor/core/publisher/Mono;
      29: areturn
      30: new           #5                  // class java/util/ArrayList
      33: dup
      34: invokespecial #6                  // Method java/util/ArrayList."<init>":()V
      37: astore        4
      39: aload_3
      40: invokeinterface #40,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      45: invokeinterface #41,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      50: astore        5
      52: aload         5
      54: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      59: ifeq          99
      62: aload         5
      64: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      69: checkcast     #42                 // class java/util/Map$Entry
      72: astore        6
      74: aload         4
      76: aload_0
      77: aload         6
      79: invokeinterface #43,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      84: checkcast     #44                 // class java/lang/Iterable
      87: invokespecial #98                 // Method io/lettuce/core/AbstractRedisReactiveCommands.touch:(Ljava/lang/Iterable;)Lreactor/core/publisher/Mono;
      90: invokeinterface #8,  2            // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      95: pop
      96: goto          52
      99: aload         4
     101: invokestatic  #24                 // Method reactor/core/publisher/Flux.merge:(Ljava/lang/Iterable;)Lreactor/core/publisher/Flux;
     104: invokedynamic #99,  0             // InvokeDynamic #25:apply:()Ljava/util/function/BiFunction;
     109: invokevirtual #34                 // Method reactor/core/publisher/Flux.reduce:(Ljava/util/function/BiFunction;)Lreactor/core/publisher/Mono;
     112: areturn

  public reactor.core.publisher.Mono<java.lang.Long> unlink(K...);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #35                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
       5: invokevirtual #100                // Method unlink:(Ljava/lang/Iterable;)Lreactor/core/publisher/Mono;
       8: areturn

  public reactor.core.publisher.Mono<java.lang.Long> unlink(java.lang.Iterable<K>);
    Code:
       0: aload_0
       1: getfield      #4                  // Field codec:Lio/lettuce/core/codec/RedisCodec;
       4: aload_1
       5: invokestatic  #37                 // Method io/lettuce/core/cluster/SlotHash.partition:(Lio/lettuce/core/codec/RedisCodec;Ljava/lang/Iterable;)Ljava/util/Map;
       8: astore_2
       9: aload_2
      10: invokeinterface #38,  1           // InterfaceMethod java/util/Map.size:()I
      15: iconst_2
      16: if_icmpge     25
      19: aload_0
      20: aload_1
      21: invokespecial #101                // Method io/lettuce/core/AbstractRedisReactiveCommands.unlink:(Ljava/lang/Iterable;)Lreactor/core/publisher/Mono;
      24: areturn
      25: new           #5                  // class java/util/ArrayList
      28: dup
      29: invokespecial #6                  // Method java/util/ArrayList."<init>":()V
      32: astore_3
      33: aload_2
      34: invokeinterface #40,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      39: invokeinterface #41,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      44: astore        4
      46: aload         4
      48: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      53: ifeq          92
      56: aload         4
      58: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      63: checkcast     #42                 // class java/util/Map$Entry
      66: astore        5
      68: aload_3
      69: aload_0
      70: aload         5
      72: invokeinterface #43,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      77: checkcast     #44                 // class java/lang/Iterable
      80: invokespecial #101                // Method io/lettuce/core/AbstractRedisReactiveCommands.unlink:(Ljava/lang/Iterable;)Lreactor/core/publisher/Mono;
      83: invokeinterface #8,  2            // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      88: pop
      89: goto          46
      92: aload_3
      93: invokestatic  #24                 // Method reactor/core/publisher/Flux.merge:(Ljava/lang/Iterable;)Lreactor/core/publisher/Flux;
      96: invokedynamic #102,  0            // InvokeDynamic #26:apply:()Ljava/util/function/BiFunction;
     101: invokevirtual #34                 // Method reactor/core/publisher/Flux.reduce:(Ljava/util/function/BiFunction;)Lreactor/core/publisher/Mono;
     104: areturn

  public io.lettuce.core.cluster.StatefulRedisClusterConnectionImpl<K, V> getStatefulConnection();
    Code:
       0: aload_0
       1: invokespecial #103                // Method io/lettuce/core/AbstractRedisReactiveCommands.getConnection:()Lio/lettuce/core/api/StatefulConnection;
       4: checkcast     #104                // class io/lettuce/core/cluster/StatefulRedisClusterConnectionImpl
       7: areturn

  public io.lettuce.core.cluster.api.reactive.RedisClusterReactiveCommands<K, V> getConnection(java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method getStatefulConnection:()Lio/lettuce/core/cluster/StatefulRedisClusterConnectionImpl;
       4: aload_1
       5: invokevirtual #105                // Method io/lettuce/core/cluster/StatefulRedisClusterConnectionImpl.getConnection:(Ljava/lang/String;)Lio/lettuce/core/api/StatefulRedisConnection;
       8: invokeinterface #106,  1          // InterfaceMethod io/lettuce/core/api/StatefulRedisConnection.reactive:()Lio/lettuce/core/api/reactive/RedisReactiveCommands;
      13: areturn

  private reactor.core.publisher.Mono<io.lettuce.core.cluster.api.reactive.RedisClusterReactiveCommands<K, V>> getConnectionReactive(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #107                // Method getConnectionProvider:()Lio/lettuce/core/cluster/AsyncClusterConnectionProvider;
       4: getstatic     #108                // Field io/lettuce/core/cluster/ClusterConnectionProvider$Intent.WRITE:Lio/lettuce/core/cluster/ClusterConnectionProvider$Intent;
       7: aload_1
       8: invokeinterface #109,  3          // InterfaceMethod io/lettuce/core/cluster/AsyncClusterConnectionProvider.getConnectionAsync:(Lio/lettuce/core/cluster/ClusterConnectionProvider$Intent;Ljava/lang/String;)Ljava/util/concurrent/CompletableFuture;
      13: invokestatic  #110                // Method getMono:(Ljava/util/concurrent/CompletableFuture;)Lreactor/core/publisher/Mono;
      16: invokedynamic #111,  0            // InvokeDynamic #27:apply:()Ljava/util/function/Function;
      21: invokevirtual #72                 // Method reactor/core/publisher/Mono.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      24: areturn

  public io.lettuce.core.cluster.api.reactive.RedisClusterReactiveCommands<K, V> getConnection(java.lang.String, int);
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method getStatefulConnection:()Lio/lettuce/core/cluster/StatefulRedisClusterConnectionImpl;
       4: aload_1
       5: iload_2
       6: invokevirtual #112                // Method io/lettuce/core/cluster/StatefulRedisClusterConnectionImpl.getConnection:(Ljava/lang/String;I)Lio/lettuce/core/api/StatefulRedisConnection;
       9: invokeinterface #106,  1          // InterfaceMethod io/lettuce/core/api/StatefulRedisConnection.reactive:()Lio/lettuce/core/api/reactive/RedisReactiveCommands;
      14: areturn

  private reactor.core.publisher.Mono<io.lettuce.core.cluster.api.reactive.RedisClusterReactiveCommands<K, V>> getConnectionReactive(java.lang.String, int);
    Code:
       0: aload_0
       1: invokespecial #107                // Method getConnectionProvider:()Lio/lettuce/core/cluster/AsyncClusterConnectionProvider;
       4: getstatic     #108                // Field io/lettuce/core/cluster/ClusterConnectionProvider$Intent.WRITE:Lio/lettuce/core/cluster/ClusterConnectionProvider$Intent;
       7: aload_1
       8: iload_2
       9: invokeinterface #113,  4          // InterfaceMethod io/lettuce/core/cluster/AsyncClusterConnectionProvider.getConnectionAsync:(Lio/lettuce/core/cluster/ClusterConnectionProvider$Intent;Ljava/lang/String;I)Ljava/util/concurrent/CompletableFuture;
      14: invokestatic  #110                // Method getMono:(Ljava/util/concurrent/CompletableFuture;)Lreactor/core/publisher/Mono;
      17: invokedynamic #111,  0            // InvokeDynamic #27:apply:()Ljava/util/function/Function;
      22: invokevirtual #72                 // Method reactor/core/publisher/Mono.map:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      25: areturn

  private io.lettuce.core.cluster.AsyncClusterConnectionProvider getConnectionProvider();
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method getStatefulConnection:()Lio/lettuce/core/cluster/StatefulRedisClusterConnectionImpl;
       4: invokevirtual #114                // Method io/lettuce/core/cluster/StatefulRedisClusterConnectionImpl.getClusterDistributionChannelWriter:()Lio/lettuce/core/cluster/ClusterDistributionChannelWriter;
       7: invokevirtual #115                // Method io/lettuce/core/cluster/ClusterDistributionChannelWriter.getClusterConnectionProvider:()Lio/lettuce/core/cluster/ClusterConnectionProvider;
      10: checkcast     #116                // class io/lettuce/core/cluster/AsyncClusterConnectionProvider
      13: areturn

  public reactor.core.publisher.Mono<io.lettuce.core.KeyScanCursor<K>> scan();
    Code:
       0: aload_0
       1: getstatic     #117                // Field io/lettuce/core/ScanCursor.INITIAL:Lio/lettuce/core/ScanCursor;
       4: invokedynamic #118,  0            // InvokeDynamic #28:apply:()Ljava/util/function/BiFunction;
       9: invokestatic  #119                // Method io/lettuce/core/cluster/ClusterScanSupport.reactiveClusterKeyScanCursorMapper:()Lio/lettuce/core/cluster/ClusterScanSupport$ScanCursorMapper;
      12: invokespecial #120                // Method clusterScan:(Lio/lettuce/core/ScanCursor;Ljava/util/function/BiFunction;Lio/lettuce/core/cluster/ClusterScanSupport$ScanCursorMapper;)Lreactor/core/publisher/Mono;
      15: areturn

  public reactor.core.publisher.Mono<io.lettuce.core.KeyScanCursor<K>> scan(io.lettuce.core.ScanArgs);
    Code:
       0: aload_0
       1: getstatic     #117                // Field io/lettuce/core/ScanCursor.INITIAL:Lio/lettuce/core/ScanCursor;
       4: aload_1
       5: invokedynamic #121,  0            // InvokeDynamic #29:apply:(Lio/lettuce/core/ScanArgs;)Ljava/util/function/BiFunction;
      10: invokestatic  #119                // Method io/lettuce/core/cluster/ClusterScanSupport.reactiveClusterKeyScanCursorMapper:()Lio/lettuce/core/cluster/ClusterScanSupport$ScanCursorMapper;
      13: invokespecial #120                // Method clusterScan:(Lio/lettuce/core/ScanCursor;Ljava/util/function/BiFunction;Lio/lettuce/core/cluster/ClusterScanSupport$ScanCursorMapper;)Lreactor/core/publisher/Mono;
      16: areturn

  public reactor.core.publisher.Mono<io.lettuce.core.KeyScanCursor<K>> scan(io.lettuce.core.ScanCursor, io.lettuce.core.ScanArgs);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokedynamic #122,  0            // InvokeDynamic #30:apply:(Lio/lettuce/core/ScanArgs;)Ljava/util/function/BiFunction;
       8: invokestatic  #119                // Method io/lettuce/core/cluster/ClusterScanSupport.reactiveClusterKeyScanCursorMapper:()Lio/lettuce/core/cluster/ClusterScanSupport$ScanCursorMapper;
      11: invokespecial #120                // Method clusterScan:(Lio/lettuce/core/ScanCursor;Ljava/util/function/BiFunction;Lio/lettuce/core/cluster/ClusterScanSupport$ScanCursorMapper;)Lreactor/core/publisher/Mono;
      14: areturn

  public reactor.core.publisher.Mono<io.lettuce.core.KeyScanCursor<K>> scan(io.lettuce.core.ScanCursor);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #123,  0            // InvokeDynamic #31:apply:()Ljava/util/function/BiFunction;
       7: invokestatic  #119                // Method io/lettuce/core/cluster/ClusterScanSupport.reactiveClusterKeyScanCursorMapper:()Lio/lettuce/core/cluster/ClusterScanSupport$ScanCursorMapper;
      10: invokespecial #120                // Method clusterScan:(Lio/lettuce/core/ScanCursor;Ljava/util/function/BiFunction;Lio/lettuce/core/cluster/ClusterScanSupport$ScanCursorMapper;)Lreactor/core/publisher/Mono;
      13: areturn

  public reactor.core.publisher.Mono<io.lettuce.core.StreamScanCursor> scan(io.lettuce.core.output.KeyStreamingChannel<K>);
    Code:
       0: aload_0
       1: getstatic     #117                // Field io/lettuce/core/ScanCursor.INITIAL:Lio/lettuce/core/ScanCursor;
       4: aload_1
       5: invokedynamic #124,  0            // InvokeDynamic #32:apply:(Lio/lettuce/core/output/KeyStreamingChannel;)Ljava/util/function/BiFunction;
      10: invokestatic  #125                // Method io/lettuce/core/cluster/ClusterScanSupport.reactiveClusterStreamScanCursorMapper:()Lio/lettuce/core/cluster/ClusterScanSupport$ScanCursorMapper;
      13: invokespecial #120                // Method clusterScan:(Lio/lettuce/core/ScanCursor;Ljava/util/function/BiFunction;Lio/lettuce/core/cluster/ClusterScanSupport$ScanCursorMapper;)Lreactor/core/publisher/Mono;
      16: areturn

  public reactor.core.publisher.Mono<io.lettuce.core.StreamScanCursor> scan(io.lettuce.core.output.KeyStreamingChannel<K>, io.lettuce.core.ScanArgs);
    Code:
       0: aload_0
       1: getstatic     #117                // Field io/lettuce/core/ScanCursor.INITIAL:Lio/lettuce/core/ScanCursor;
       4: aload_1
       5: aload_2
       6: invokedynamic #126,  0            // InvokeDynamic #33:apply:(Lio/lettuce/core/output/KeyStreamingChannel;Lio/lettuce/core/ScanArgs;)Ljava/util/function/BiFunction;
      11: invokestatic  #125                // Method io/lettuce/core/cluster/ClusterScanSupport.reactiveClusterStreamScanCursorMapper:()Lio/lettuce/core/cluster/ClusterScanSupport$ScanCursorMapper;
      14: invokespecial #120                // Method clusterScan:(Lio/lettuce/core/ScanCursor;Ljava/util/function/BiFunction;Lio/lettuce/core/cluster/ClusterScanSupport$ScanCursorMapper;)Lreactor/core/publisher/Mono;
      17: areturn

  public reactor.core.publisher.Mono<io.lettuce.core.StreamScanCursor> scan(io.lettuce.core.output.KeyStreamingChannel<K>, io.lettuce.core.ScanCursor, io.lettuce.core.ScanArgs);
    Code:
       0: aload_0
       1: aload_2
       2: aload_1
       3: aload_3
       4: invokedynamic #127,  0            // InvokeDynamic #34:apply:(Lio/lettuce/core/output/KeyStreamingChannel;Lio/lettuce/core/ScanArgs;)Ljava/util/function/BiFunction;
       9: invokestatic  #125                // Method io/lettuce/core/cluster/ClusterScanSupport.reactiveClusterStreamScanCursorMapper:()Lio/lettuce/core/cluster/ClusterScanSupport$ScanCursorMapper;
      12: invokespecial #120                // Method clusterScan:(Lio/lettuce/core/ScanCursor;Ljava/util/function/BiFunction;Lio/lettuce/core/cluster/ClusterScanSupport$ScanCursorMapper;)Lreactor/core/publisher/Mono;
      15: areturn

  public reactor.core.publisher.Mono<io.lettuce.core.StreamScanCursor> scan(io.lettuce.core.output.KeyStreamingChannel<K>, io.lettuce.core.ScanCursor);
    Code:
       0: aload_0
       1: aload_2
       2: aload_1
       3: invokedynamic #128,  0            // InvokeDynamic #35:apply:(Lio/lettuce/core/output/KeyStreamingChannel;)Ljava/util/function/BiFunction;
       8: invokestatic  #125                // Method io/lettuce/core/cluster/ClusterScanSupport.reactiveClusterStreamScanCursorMapper:()Lio/lettuce/core/cluster/ClusterScanSupport$ScanCursorMapper;
      11: invokespecial #120                // Method clusterScan:(Lio/lettuce/core/ScanCursor;Ljava/util/function/BiFunction;Lio/lettuce/core/cluster/ClusterScanSupport$ScanCursorMapper;)Lreactor/core/publisher/Mono;
      14: areturn

  private <T extends io.lettuce.core.ScanCursor> reactor.core.publisher.Mono<T> clusterScan(io.lettuce.core.ScanCursor, java.util.function.BiFunction<io.lettuce.core.api.reactive.RedisKeyReactiveCommands<K, V>, io.lettuce.core.ScanCursor, reactor.core.publisher.Mono<T>>, io.lettuce.core.cluster.ClusterScanSupport$ScanCursorMapper<reactor.core.publisher.Mono<T>>);
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method getStatefulConnection:()Lio/lettuce/core/cluster/StatefulRedisClusterConnectionImpl;
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokestatic  #129                // Method clusterScan:(Lio/lettuce/core/cluster/StatefulRedisClusterConnectionImpl;Lio/lettuce/core/ScanCursor;Ljava/util/function/BiFunction;Lio/lettuce/core/cluster/ClusterScanSupport$ScanCursorMapper;)Lreactor/core/publisher/Mono;
      10: areturn

  private <T> reactor.core.publisher.Flux<T> pipeliningWithMap(java.util.Map<K, V>, java.util.function.Function<java.util.Map<K, V>, reactor.core.publisher.Flux<T>>, java.util.function.Function<reactor.core.publisher.Flux<T>, reactor.core.publisher.Flux<T>>);
    Code:
       0: aload_0
       1: getfield      #4                  // Field codec:Lio/lettuce/core/codec/RedisCodec;
       4: aload_1
       5: invokeinterface #130,  1          // InterfaceMethod java/util/Map.keySet:()Ljava/util/Set;
      10: invokestatic  #37                 // Method io/lettuce/core/cluster/SlotHash.partition:(Lio/lettuce/core/codec/RedisCodec;Ljava/lang/Iterable;)Ljava/util/Map;
      13: astore        4
      15: aload         4
      17: invokeinterface #38,  1           // InterfaceMethod java/util/Map.size:()I
      22: iconst_2
      23: if_icmpge     37
      26: aload_2
      27: aload_1
      28: invokeinterface #131,  2          // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      33: checkcast     #132                // class reactor/core/publisher/Flux
      36: areturn
      37: aload         4
      39: invokeinterface #32,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
      44: invokeinterface #133,  1          // InterfaceMethod java/util/Collection.stream:()Ljava/util/stream/Stream;
      49: aload_1
      50: aload_2
      51: invokedynamic #134,  0            // InvokeDynamic #36:apply:(Ljava/util/Map;Ljava/util/function/Function;)Ljava/util/function/Function;
      56: invokeinterface #135,  2          // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      61: invokestatic  #136                // Method java/util/stream/Collectors.toList:()Ljava/util/stream/Collector;
      64: invokeinterface #137,  2          // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      69: checkcast     #138                // class java/util/List
      72: astore        5
      74: aload_3
      75: aload         5
      77: invokestatic  #24                 // Method reactor/core/publisher/Flux.merge:(Ljava/lang/Iterable;)Lreactor/core/publisher/Flux;
      80: invokeinterface #131,  2          // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      85: checkcast     #132                // class reactor/core/publisher/Flux
      88: areturn

  protected <T> java.util.Map<java.lang.String, org.reactivestreams.Publisher<T>> executeOnMasters(java.util.function.Function<io.lettuce.core.cluster.api.reactive.RedisClusterReactiveCommands<K, V>, ? extends org.reactivestreams.Publisher<T>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #139,  0            // InvokeDynamic #37:test:()Ljava/util/function/Predicate;
       7: invokevirtual #91                 // Method executeOnNodes:(Ljava/util/function/Function;Ljava/util/function/Predicate;)Ljava/util/Map;
      10: areturn

  protected <T> java.util.Map<java.lang.String, org.reactivestreams.Publisher<T>> executeOnNodes(java.util.function.Function<io.lettuce.core.cluster.api.reactive.RedisClusterReactiveCommands<K, V>, ? extends org.reactivestreams.Publisher<T>>, java.util.function.Predicate<io.lettuce.core.cluster.models.partitions.RedisClusterNode>);
    Code:
       0: new           #140                // class java/util/HashMap
       3: dup
       4: invokespecial #141                // Method java/util/HashMap."<init>":()V
       7: astore_3
       8: aload_0
       9: invokevirtual #9                  // Method getStatefulConnection:()Lio/lettuce/core/cluster/StatefulRedisClusterConnectionImpl;
      12: invokevirtual #10                 // Method io/lettuce/core/cluster/StatefulRedisClusterConnectionImpl.getPartitions:()Lio/lettuce/core/cluster/models/partitions/Partitions;
      15: invokevirtual #11                 // Method io/lettuce/core/cluster/models/partitions/Partitions.iterator:()Ljava/util/Iterator;
      18: astore        4
      20: aload         4
      22: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      27: ifeq          110
      30: aload         4
      32: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      37: checkcast     #14                 // class io/lettuce/core/cluster/models/partitions/RedisClusterNode
      40: astore        5
      42: aload_2
      43: aload         5
      45: invokeinterface #142,  2          // InterfaceMethod java/util/function/Predicate.test:(Ljava/lang/Object;)Z
      50: ifne          56
      53: goto          20
      56: aload         5
      58: invokevirtual #19                 // Method io/lettuce/core/cluster/models/partitions/RedisClusterNode.getUri:()Lio/lettuce/core/RedisURI;
      61: astore        6
      63: aload_0
      64: aload         6
      66: invokevirtual #20                 // Method io/lettuce/core/RedisURI.getHost:()Ljava/lang/String;
      69: aload         6
      71: invokevirtual #21                 // Method io/lettuce/core/RedisURI.getPort:()I
      74: invokespecial #22                 // Method getConnectionReactive:(Ljava/lang/String;I)Lreactor/core/publisher/Mono;
      77: astore        7
      79: aload_3
      80: aload         5
      82: invokevirtual #15                 // Method io/lettuce/core/cluster/models/partitions/RedisClusterNode.getNodeId:()Ljava/lang/String;
      85: aload         7
      87: aload_1
      88: dup
      89: invokevirtual #143                // Method java/lang/Object.getClass:()Ljava/lang/Class;
      92: pop
      93: invokedynamic #144,  0            // InvokeDynamic #38:apply:(Ljava/util/function/Function;)Ljava/util/function/Function;
      98: invokevirtual #29                 // Method reactor/core/publisher/Mono.flatMapMany:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
     101: invokeinterface #145,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     106: pop
     107: goto          20
     110: aload_3
     111: areturn

  private reactor.core.publisher.Mono<io.lettuce.core.cluster.api.reactive.RedisClusterReactiveCommands<K, V>> findConnectionBySlotReactive(int);
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method getStatefulConnection:()Lio/lettuce/core/cluster/StatefulRedisClusterConnectionImpl;
       4: invokevirtual #10                 // Method io/lettuce/core/cluster/StatefulRedisClusterConnectionImpl.getPartitions:()Lio/lettuce/core/cluster/models/partitions/Partitions;
       7: iload_1
       8: invokevirtual #146                // Method io/lettuce/core/cluster/models/partitions/Partitions.getPartitionBySlot:(I)Lio/lettuce/core/cluster/models/partitions/RedisClusterNode;
      11: astore_2
      12: aload_2
      13: ifnull        35
      16: aload_0
      17: aload_2
      18: invokevirtual #19                 // Method io/lettuce/core/cluster/models/partitions/RedisClusterNode.getUri:()Lio/lettuce/core/RedisURI;
      21: invokevirtual #20                 // Method io/lettuce/core/RedisURI.getHost:()Ljava/lang/String;
      24: aload_2
      25: invokevirtual #19                 // Method io/lettuce/core/cluster/models/partitions/RedisClusterNode.getUri:()Lio/lettuce/core/RedisURI;
      28: invokevirtual #21                 // Method io/lettuce/core/RedisURI.getPort:()I
      31: invokespecial #22                 // Method getConnectionReactive:(Ljava/lang/String;I)Lreactor/core/publisher/Mono;
      34: areturn
      35: new           #147                // class io/lettuce/core/RedisException
      38: dup
      39: new           #148                // class java/lang/StringBuilder
      42: dup
      43: invokespecial #149                // Method java/lang/StringBuilder."<init>":()V
      46: ldc           #150                // String No partition for slot
      48: invokevirtual #151                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      51: iload_1
      52: invokevirtual #152                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      55: invokevirtual #153                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      58: invokespecial #154                // Method io/lettuce/core/RedisException."<init>":(Ljava/lang/String;)V
      61: invokestatic  #155                // Method reactor/core/publisher/Mono.error:(Ljava/lang/Throwable;)Lreactor/core/publisher/Mono;
      64: areturn

  static <T extends io.lettuce.core.ScanCursor, K, V> reactor.core.publisher.Mono<T> clusterScan(io.lettuce.core.cluster.StatefulRedisClusterConnectionImpl<K, V>, io.lettuce.core.ScanCursor, java.util.function.BiFunction<io.lettuce.core.api.reactive.RedisKeyReactiveCommands<K, V>, io.lettuce.core.ScanCursor, reactor.core.publisher.Mono<T>>, io.lettuce.core.cluster.ClusterScanSupport$ScanCursorMapper<reactor.core.publisher.Mono<T>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #156                // Method io/lettuce/core/cluster/ClusterScanSupport.getNodeIds:(Lio/lettuce/core/cluster/api/StatefulRedisClusterConnection;Lio/lettuce/core/ScanCursor;)Ljava/util/List;
       5: astore        4
       7: aload_1
       8: aload         4
      10: invokestatic  #157                // Method io/lettuce/core/cluster/ClusterScanSupport.getCurrentNodeId:(Lio/lettuce/core/ScanCursor;Ljava/util/List;)Ljava/lang/String;
      13: astore        5
      15: aload_1
      16: invokestatic  #158                // Method io/lettuce/core/cluster/ClusterScanSupport.getContinuationCursor:(Lio/lettuce/core/ScanCursor;)Lio/lettuce/core/ScanCursor;
      19: astore        6
      21: aload_0
      22: invokevirtual #114                // Method io/lettuce/core/cluster/StatefulRedisClusterConnectionImpl.getClusterDistributionChannelWriter:()Lio/lettuce/core/cluster/ClusterDistributionChannelWriter;
      25: invokevirtual #115                // Method io/lettuce/core/cluster/ClusterDistributionChannelWriter.getClusterConnectionProvider:()Lio/lettuce/core/cluster/ClusterConnectionProvider;
      28: checkcast     #116                // class io/lettuce/core/cluster/AsyncClusterConnectionProvider
      31: astore        7
      33: aload         7
      35: getstatic     #108                // Field io/lettuce/core/cluster/ClusterConnectionProvider$Intent.WRITE:Lio/lettuce/core/cluster/ClusterConnectionProvider$Intent;
      38: aload         5
      40: invokeinterface #109,  3          // InterfaceMethod io/lettuce/core/cluster/AsyncClusterConnectionProvider.getConnectionAsync:(Lio/lettuce/core/cluster/ClusterConnectionProvider$Intent;Ljava/lang/String;)Ljava/util/concurrent/CompletableFuture;
      45: invokestatic  #110                // Method getMono:(Ljava/util/concurrent/CompletableFuture;)Lreactor/core/publisher/Mono;
      48: aload_2
      49: aload         6
      51: invokedynamic #159,  0            // InvokeDynamic #39:apply:(Ljava/util/function/BiFunction;Lio/lettuce/core/ScanCursor;)Ljava/util/function/Function;
      56: invokevirtual #18                 // Method reactor/core/publisher/Mono.flatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Mono;
      59: astore        8
      61: aload_3
      62: aload         4
      64: aload         5
      66: aload         8
      68: invokeinterface #160,  4          // InterfaceMethod io/lettuce/core/cluster/ClusterScanSupport$ScanCursorMapper.map:(Ljava/util/List;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;
      73: checkcast     #161                // class reactor/core/publisher/Mono
      76: areturn

  private static <T> reactor.core.publisher.Mono<T> getMono(java.util.concurrent.CompletableFuture<T>);
    Code:
       0: aload_0
       1: invokestatic  #162                // Method reactor/core/publisher/Mono.fromCompletionStage:(Ljava/util/concurrent/CompletionStage;)Lreactor/core/publisher/Mono;
       4: areturn

  public io.lettuce.core.cluster.api.StatefulRedisClusterConnection getStatefulConnection();
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method getStatefulConnection:()Lio/lettuce/core/cluster/StatefulRedisClusterConnectionImpl;
       4: areturn

  private static reactor.core.publisher.Mono lambda$clusterScan$33(java.util.function.BiFunction, io.lettuce.core.ScanCursor, io.lettuce.core.api.StatefulRedisConnection);
    Code:
       0: aload_0
       1: aload_2
       2: invokeinterface #106,  1          // InterfaceMethod io/lettuce/core/api/StatefulRedisConnection.reactive:()Lio/lettuce/core/api/reactive/RedisReactiveCommands;
       7: aload_1
       8: invokeinterface #163,  3          // InterfaceMethod java/util/function/BiFunction.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      13: checkcast     #161                // class reactor/core/publisher/Mono
      16: areturn

  private static boolean lambda$executeOnMasters$32(io.lettuce.core.cluster.models.partitions.RedisClusterNode);
    Code:
       0: aload_0
       1: getstatic     #164                // Field io/lettuce/core/cluster/models/partitions/RedisClusterNode$NodeFlag.MASTER:Lio/lettuce/core/cluster/models/partitions/RedisClusterNode$NodeFlag;
       4: invokevirtual #165                // Method io/lettuce/core/cluster/models/partitions/RedisClusterNode.is:(Lio/lettuce/core/cluster/models/partitions/RedisClusterNode$NodeFlag;)Z
       7: ireturn

  private static reactor.core.publisher.Flux lambda$pipeliningWithMap$31(java.util.Map, java.util.function.Function, java.util.List);
    Code:
       0: new           #140                // class java/util/HashMap
       3: dup
       4: invokespecial #141                // Method java/util/HashMap."<init>":()V
       7: astore_3
       8: aload_2
       9: aload_3
      10: aload_0
      11: invokedynamic #166,  0            // InvokeDynamic #40:accept:(Ljava/util/Map;Ljava/util/Map;)Ljava/util/function/Consumer;
      16: invokeinterface #167,  2          // InterfaceMethod java/util/List.forEach:(Ljava/util/function/Consumer;)V
      21: aload_1
      22: aload_3
      23: invokeinterface #131,  2          // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      28: checkcast     #132                // class reactor/core/publisher/Flux
      31: areturn

  private static void lambda$null$30(java.util.Map, java.util.Map, java.lang.Object);
    Code:
       0: aload_0
       1: aload_2
       2: aload_1
       3: aload_2
       4: invokeinterface #168,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
       9: invokeinterface #145,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      14: pop
      15: return

  private static reactor.core.publisher.Mono lambda$scan$29(io.lettuce.core.output.KeyStreamingChannel, io.lettuce.core.api.reactive.RedisKeyReactiveCommands, io.lettuce.core.ScanCursor);
    Code:
       0: aload_1
       1: aload_0
       2: aload_2
       3: invokeinterface #169,  3          // InterfaceMethod io/lettuce/core/api/reactive/RedisKeyReactiveCommands.scan:(Lio/lettuce/core/output/KeyStreamingChannel;Lio/lettuce/core/ScanCursor;)Lreactor/core/publisher/Mono;
       8: areturn

  private static reactor.core.publisher.Mono lambda$scan$28(io.lettuce.core.output.KeyStreamingChannel, io.lettuce.core.ScanArgs, io.lettuce.core.api.reactive.RedisKeyReactiveCommands, io.lettuce.core.ScanCursor);
    Code:
       0: aload_2
       1: aload_0
       2: aload_3
       3: aload_1
       4: invokeinterface #170,  4          // InterfaceMethod io/lettuce/core/api/reactive/RedisKeyReactiveCommands.scan:(Lio/lettuce/core/output/KeyStreamingChannel;Lio/lettuce/core/ScanCursor;Lio/lettuce/core/ScanArgs;)Lreactor/core/publisher/Mono;
       9: areturn

  private static reactor.core.publisher.Mono lambda$scan$27(io.lettuce.core.output.KeyStreamingChannel, io.lettuce.core.ScanArgs, io.lettuce.core.api.reactive.RedisKeyReactiveCommands, io.lettuce.core.ScanCursor);
    Code:
       0: aload_2
       1: aload_0
       2: aload_1
       3: invokeinterface #171,  3          // InterfaceMethod io/lettuce/core/api/reactive/RedisKeyReactiveCommands.scan:(Lio/lettuce/core/output/KeyStreamingChannel;Lio/lettuce/core/ScanArgs;)Lreactor/core/publisher/Mono;
       8: areturn

  private static reactor.core.publisher.Mono lambda$scan$26(io.lettuce.core.output.KeyStreamingChannel, io.lettuce.core.api.reactive.RedisKeyReactiveCommands, io.lettuce.core.ScanCursor);
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #172,  2          // InterfaceMethod io/lettuce/core/api/reactive/RedisKeyReactiveCommands.scan:(Lio/lettuce/core/output/KeyStreamingChannel;)Lreactor/core/publisher/Mono;
       7: areturn

  private static reactor.core.publisher.Mono lambda$scan$25(io.lettuce.core.ScanArgs, io.lettuce.core.api.reactive.RedisKeyReactiveCommands, io.lettuce.core.ScanCursor);
    Code:
       0: aload_1
       1: aload_2
       2: aload_0
       3: invokeinterface #173,  3          // InterfaceMethod io/lettuce/core/api/reactive/RedisKeyReactiveCommands.scan:(Lio/lettuce/core/ScanCursor;Lio/lettuce/core/ScanArgs;)Lreactor/core/publisher/Mono;
       8: areturn

  private static reactor.core.publisher.Mono lambda$scan$24(io.lettuce.core.ScanArgs, io.lettuce.core.api.reactive.RedisKeyReactiveCommands, io.lettuce.core.ScanCursor);
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #174,  2          // InterfaceMethod io/lettuce/core/api/reactive/RedisKeyReactiveCommands.scan:(Lio/lettuce/core/ScanArgs;)Lreactor/core/publisher/Mono;
       7: areturn

  private static reactor.core.publisher.Mono lambda$scan$23(io.lettuce.core.api.reactive.RedisKeyReactiveCommands, io.lettuce.core.ScanCursor);
    Code:
       0: aload_0
       1: invokeinterface #175,  1          // InterfaceMethod io/lettuce/core/api/reactive/RedisKeyReactiveCommands.scan:()Lreactor/core/publisher/Mono;
       6: areturn

  private static java.lang.Long lambda$unlink$22(java.lang.Long, java.lang.Long);
    Code:
       0: aload_0
       1: invokevirtual #176                // Method java/lang/Long.longValue:()J
       4: aload_1
       5: invokevirtual #176                // Method java/lang/Long.longValue:()J
       8: ladd
       9: invokestatic  #177                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      12: areturn

  private static java.lang.Long lambda$touch$21(java.lang.Long, java.lang.Long);
    Code:
       0: aload_0
       1: invokevirtual #176                // Method java/lang/Long.longValue:()J
       4: aload_1
       5: invokevirtual #176                // Method java/lang/Long.longValue:()J
       8: ladd
       9: invokestatic  #177                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      12: areturn

  private static org.reactivestreams.Publisher lambda$shutdown$20(boolean, io.lettuce.core.cluster.api.reactive.RedisClusterReactiveCommands);
    Code:
       0: aload_1
       1: iload_0
       2: invokeinterface #178,  2          // InterfaceMethod io/lettuce/core/cluster/api/reactive/RedisClusterReactiveCommands.shutdown:(Z)Lreactor/core/publisher/Mono;
       7: areturn

  private static org.reactivestreams.Publisher lambda$scriptLoad$19(java.lang.Object, io.lettuce.core.cluster.api.reactive.RedisClusterReactiveCommands);
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #179,  2          // InterfaceMethod io/lettuce/core/cluster/api/reactive/RedisClusterReactiveCommands.scriptLoad:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
       7: areturn

  private static reactor.core.publisher.Flux lambda$mset$18(reactor.core.publisher.Flux);
    Code:
       0: aload_0
       1: areturn

  private reactor.core.publisher.Flux lambda$mset$17(java.util.Map);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #180                // Method access$001:(Lio/lettuce/core/cluster/RedisAdvancedClusterReactiveCommandsImpl;Ljava/util/Map;)Lreactor/core/publisher/Mono;
       5: invokevirtual #181                // Method reactor/core/publisher/Mono.flux:()Lreactor/core/publisher/Flux;
       8: areturn

  private static java.lang.Boolean lambda$msetnx$16(java.lang.Boolean, java.lang.Boolean);
    Code:
       0: aload_0
       1: invokevirtual #182                // Method java/lang/Boolean.booleanValue:()Z
       4: ifeq          18
       7: aload_1
       8: invokevirtual #182                // Method java/lang/Boolean.booleanValue:()Z
      11: ifeq          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: invokestatic  #183                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      22: areturn

  private static reactor.core.publisher.Flux lambda$msetnx$15(reactor.core.publisher.Flux);
    Code:
       0: aload_0
       1: areturn

  private reactor.core.publisher.Flux lambda$msetnx$14(java.util.Map);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #184                // Method access$101:(Lio/lettuce/core/cluster/RedisAdvancedClusterReactiveCommandsImpl;Ljava/util/Map;)Lreactor/core/publisher/Mono;
       5: invokevirtual #181                // Method reactor/core/publisher/Mono.flux:()Lreactor/core/publisher/Flux;
       8: areturn

  private static java.lang.Long lambda$mget$13(java.lang.Long, java.lang.Long);
    Code:
       0: aload_0
       1: invokevirtual #176                // Method java/lang/Long.longValue:()J
       4: aload_1
       5: invokevirtual #176                // Method java/lang/Long.longValue:()J
       8: ladd
       9: invokestatic  #177                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      12: areturn

  private static java.lang.Iterable lambda$mget$12(java.util.List);
    Code:
       0: aload_0
       1: areturn

  private static java.util.List lambda$mget$11(java.util.Map, java.util.List, java.util.List);
    Code:
       0: aload_2
       1: invokeinterface #185,  1          // InterfaceMethod java/util/List.size:()I
       6: anewarray     #186                // class io/lettuce/core/KeyValue
       9: astore_3
      10: iconst_0
      11: istore        4
      13: aload_0
      14: invokeinterface #40,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      19: invokeinterface #41,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      24: astore        5
      26: aload         5
      28: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      33: ifeq          143
      36: aload         5
      38: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      43: checkcast     #42                 // class java/util/Map$Entry
      46: astore        6
      48: iconst_0
      49: istore        7
      51: iload         7
      53: aload_1
      54: invokeinterface #185,  1          // InterfaceMethod java/util/List.size:()I
      59: if_icmpge     120
      62: aload         6
      64: invokeinterface #43,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      69: checkcast     #138                // class java/util/List
      72: aload_1
      73: iload         7
      75: invokeinterface #187,  2          // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      80: invokeinterface #188,  2          // InterfaceMethod java/util/List.indexOf:(Ljava/lang/Object;)I
      85: istore        8
      87: iload         8
      89: iconst_m1
      90: if_icmpne     96
      93: goto          114
      96: aload_3
      97: iload         7
      99: aload_2
     100: iload         4
     102: iload         8
     104: iadd
     105: invokeinterface #187,  2          // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
     110: checkcast     #186                // class io/lettuce/core/KeyValue
     113: aastore
     114: iinc          7, 1
     117: goto          51
     120: iload         4
     122: aload         6
     124: invokeinterface #43,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
     129: checkcast     #138                // class java/util/List
     132: invokeinterface #185,  1          // InterfaceMethod java/util/List.size:()I
     137: iadd
     138: istore        4
     140: goto          26
     143: aload_3
     144: invokestatic  #35                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
     147: areturn

  private static java.lang.Long lambda$keys$10(java.lang.Long, java.lang.Long);
    Code:
       0: aload_0
       1: invokevirtual #176                // Method java/lang/Long.longValue:()J
       4: aload_1
       5: invokevirtual #176                // Method java/lang/Long.longValue:()J
       8: ladd
       9: invokestatic  #177                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      12: areturn

  private static org.reactivestreams.Publisher lambda$keys$9(io.lettuce.core.output.KeyStreamingChannel, java.lang.Object, io.lettuce.core.cluster.api.reactive.RedisClusterReactiveCommands);
    Code:
       0: aload_2
       1: aload_0
       2: aload_1
       3: invokeinterface #189,  3          // InterfaceMethod io/lettuce/core/cluster/api/reactive/RedisClusterReactiveCommands.keys:(Lio/lettuce/core/output/KeyStreamingChannel;Ljava/lang/Object;)Lreactor/core/publisher/Mono;
       8: areturn

  private static org.reactivestreams.Publisher lambda$keys$8(java.lang.Object, io.lettuce.core.cluster.api.reactive.RedisClusterReactiveCommands);
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #190,  2          // InterfaceMethod io/lettuce/core/cluster/api/reactive/RedisClusterReactiveCommands.keys:(Ljava/lang/Object;)Lreactor/core/publisher/Flux;
       7: areturn

  private static java.lang.Long lambda$exists$7(java.lang.Long, java.lang.Long);
    Code:
       0: aload_0
       1: invokevirtual #176                // Method java/lang/Long.longValue:()J
       4: aload_1
       5: invokevirtual #176                // Method java/lang/Long.longValue:()J
       8: ladd
       9: invokestatic  #177                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      12: areturn

  private static java.lang.Long lambda$del$6(java.lang.Long, java.lang.Long);
    Code:
       0: aload_0
       1: invokevirtual #176                // Method java/lang/Long.longValue:()J
       4: aload_1
       5: invokevirtual #176                // Method java/lang/Long.longValue:()J
       8: ladd
       9: invokestatic  #177                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      12: areturn

  private static java.lang.Long lambda$dbsize$5(java.lang.Long, java.lang.Long);
    Code:
       0: aload_0
       1: invokevirtual #176                // Method java/lang/Long.longValue:()J
       4: aload_1
       5: invokevirtual #176                // Method java/lang/Long.longValue:()J
       8: ladd
       9: invokestatic  #177                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      12: areturn

  private static org.reactivestreams.Publisher lambda$clusterGetKeysInSlot$4(int, int, io.lettuce.core.cluster.api.reactive.RedisClusterReactiveCommands);
    Code:
       0: aload_2
       1: iload_0
       2: iload_1
       3: invokeinterface #191,  3          // InterfaceMethod io/lettuce/core/cluster/api/reactive/RedisClusterReactiveCommands.clusterGetKeysInSlot:(II)Lreactor/core/publisher/Flux;
       8: areturn

  private static reactor.core.publisher.Mono lambda$clusterCountKeysInSlot$3(int, io.lettuce.core.cluster.api.reactive.RedisClusterReactiveCommands);
    Code:
       0: aload_1
       1: iload_0
       2: invokeinterface #192,  2          // InterfaceMethod io/lettuce/core/cluster/api/reactive/RedisClusterReactiveCommands.clusterCountKeysInSlot:(I)Lreactor/core/publisher/Mono;
       7: areturn

  private static reactor.core.publisher.Mono lambda$clientSetname$2(java.lang.Object, io.lettuce.core.cluster.api.reactive.RedisClusterReactiveCommands);
    Code:
       0: aload_1
       1: invokeinterface #193,  1          // InterfaceMethod io/lettuce/core/cluster/api/reactive/RedisClusterReactiveCommands.isOpen:()Z
       6: ifeq          17
       9: aload_1
      10: aload_0
      11: invokeinterface #194,  2          // InterfaceMethod io/lettuce/core/cluster/api/reactive/RedisClusterReactiveCommands.clientSetname:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
      16: areturn
      17: invokestatic  #195                // Method reactor/core/publisher/Mono.empty:()Lreactor/core/publisher/Mono;
      20: areturn

  private static reactor.core.publisher.Mono lambda$clientSetname$1(java.lang.Object, io.lettuce.core.cluster.api.reactive.RedisClusterReactiveCommands);
    Code:
       0: aload_1
       1: invokeinterface #193,  1          // InterfaceMethod io/lettuce/core/cluster/api/reactive/RedisClusterReactiveCommands.isOpen:()Z
       6: ifeq          17
       9: aload_1
      10: aload_0
      11: invokeinterface #194,  2          // InterfaceMethod io/lettuce/core/cluster/api/reactive/RedisClusterReactiveCommands.clientSetname:(Ljava/lang/Object;)Lreactor/core/publisher/Mono;
      16: areturn
      17: invokestatic  #195                // Method reactor/core/publisher/Mono.empty:()Lreactor/core/publisher/Mono;
      20: areturn

  private static boolean lambda$static$0(io.lettuce.core.cluster.models.partitions.RedisClusterNode);
    Code:
       0: iconst_1
       1: ireturn

  static reactor.core.publisher.Mono access$001(io.lettuce.core.cluster.RedisAdvancedClusterReactiveCommandsImpl, java.util.Map);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #2                  // Method io/lettuce/core/AbstractRedisReactiveCommands.mset:(Ljava/util/Map;)Lreactor/core/publisher/Mono;
       5: areturn

  static reactor.core.publisher.Mono access$101(io.lettuce.core.cluster.RedisAdvancedClusterReactiveCommandsImpl, java.util.Map);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method io/lettuce/core/AbstractRedisReactiveCommands.msetnx:(Ljava/util/Map;)Lreactor/core/publisher/Mono;
       5: areturn

  static {};
    Code:
       0: invokedynamic #196,  0            // InvokeDynamic #41:test:()Ljava/util/function/Predicate;
       5: putstatic     #90                 // Field ALL_NODES:Ljava/util/function/Predicate;
       8: return
}
