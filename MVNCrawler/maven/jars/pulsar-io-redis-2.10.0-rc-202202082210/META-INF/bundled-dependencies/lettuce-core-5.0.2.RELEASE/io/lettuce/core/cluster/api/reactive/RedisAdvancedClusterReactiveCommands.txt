Compiled from "RedisAdvancedClusterReactiveCommands.java"
public interface io.lettuce.core.cluster.api.reactive.RedisAdvancedClusterReactiveCommands<K, V> extends io.lettuce.core.cluster.api.reactive.RedisClusterReactiveCommands<K, V> {
  public abstract io.lettuce.core.cluster.api.reactive.RedisClusterReactiveCommands<K, V> getConnection(java.lang.String);

  public abstract io.lettuce.core.cluster.api.reactive.RedisClusterReactiveCommands<K, V> getConnection(java.lang.String, int);

  public abstract io.lettuce.core.cluster.api.StatefulRedisClusterConnection<K, V> getStatefulConnection();

  public abstract reactor.core.publisher.Mono<java.lang.Long> del(K...);

  public abstract reactor.core.publisher.Mono<java.lang.Long> unlink(K...);

  public abstract reactor.core.publisher.Mono<java.lang.Long> exists(K...);

  public abstract reactor.core.publisher.Flux<io.lettuce.core.KeyValue<K, V>> mget(K...);

  public abstract reactor.core.publisher.Mono<java.lang.String> mset(java.util.Map<K, V>);

  public abstract reactor.core.publisher.Mono<java.lang.Boolean> msetnx(java.util.Map<K, V>);

  public abstract reactor.core.publisher.Mono<java.lang.String> clientSetname(K);

  public abstract reactor.core.publisher.Mono<java.lang.String> flushall();

  public abstract reactor.core.publisher.Mono<java.lang.String> flushdb();

  public abstract reactor.core.publisher.Mono<java.lang.Long> dbsize();

  public abstract reactor.core.publisher.Flux<K> keys(K);

  public abstract reactor.core.publisher.Mono<java.lang.Long> keys(io.lettuce.core.output.KeyStreamingChannel<K>, K);

  public abstract reactor.core.publisher.Mono<V> randomkey();

  public abstract reactor.core.publisher.Mono<java.lang.String> scriptFlush();

  public abstract reactor.core.publisher.Mono<java.lang.String> scriptKill();

  public abstract reactor.core.publisher.Mono<java.lang.String> scriptLoad(V);

  public abstract reactor.core.publisher.Mono<java.lang.Void> shutdown(boolean);

  public abstract reactor.core.publisher.Mono<io.lettuce.core.KeyScanCursor<K>> scan();

  public abstract reactor.core.publisher.Mono<io.lettuce.core.KeyScanCursor<K>> scan(io.lettuce.core.ScanArgs);

  public abstract reactor.core.publisher.Mono<io.lettuce.core.KeyScanCursor<K>> scan(io.lettuce.core.ScanCursor, io.lettuce.core.ScanArgs);

  public abstract reactor.core.publisher.Mono<io.lettuce.core.KeyScanCursor<K>> scan(io.lettuce.core.ScanCursor);

  public abstract reactor.core.publisher.Mono<io.lettuce.core.StreamScanCursor> scan(io.lettuce.core.output.KeyStreamingChannel<K>);

  public abstract reactor.core.publisher.Mono<io.lettuce.core.StreamScanCursor> scan(io.lettuce.core.output.KeyStreamingChannel<K>, io.lettuce.core.ScanArgs);

  public abstract reactor.core.publisher.Mono<io.lettuce.core.StreamScanCursor> scan(io.lettuce.core.output.KeyStreamingChannel<K>, io.lettuce.core.ScanCursor, io.lettuce.core.ScanArgs);

  public abstract reactor.core.publisher.Mono<io.lettuce.core.StreamScanCursor> scan(io.lettuce.core.output.KeyStreamingChannel<K>, io.lettuce.core.ScanCursor);

  public abstract reactor.core.publisher.Mono<java.lang.Long> touch(K...);
}
