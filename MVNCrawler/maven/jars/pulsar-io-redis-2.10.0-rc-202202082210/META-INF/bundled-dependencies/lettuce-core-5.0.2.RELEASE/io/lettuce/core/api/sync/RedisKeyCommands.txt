Compiled from "RedisKeyCommands.java"
public interface io.lettuce.core.api.sync.RedisKeyCommands<K, V> {
  public abstract java.lang.Long del(K...);

  public abstract java.lang.Long unlink(K...);

  public abstract byte[] dump(K);

  public abstract java.lang.Long exists(K...);

  public abstract java.lang.Boolean expire(K, long);

  public abstract java.lang.Boolean expireat(K, java.util.Date);

  public abstract java.lang.Boolean expireat(K, long);

  public abstract java.util.List<K> keys(K);

  public abstract java.lang.Long keys(io.lettuce.core.output.KeyStreamingChannel<K>, K);

  public abstract java.lang.String migrate(java.lang.String, int, K, int, long);

  public abstract java.lang.String migrate(java.lang.String, int, int, long, io.lettuce.core.MigrateArgs<K>);

  public abstract java.lang.Boolean move(K, int);

  public abstract java.lang.String objectEncoding(K);

  public abstract java.lang.Long objectIdletime(K);

  public abstract java.lang.Long objectRefcount(K);

  public abstract java.lang.Boolean persist(K);

  public abstract java.lang.Boolean pexpire(K, long);

  public abstract java.lang.Boolean pexpireat(K, java.util.Date);

  public abstract java.lang.Boolean pexpireat(K, long);

  public abstract java.lang.Long pttl(K);

  public abstract V randomkey();

  public abstract java.lang.String rename(K, K);

  public abstract java.lang.Boolean renamenx(K, K);

  public abstract java.lang.String restore(K, long, byte[]);

  public abstract java.util.List<V> sort(K);

  public abstract java.lang.Long sort(io.lettuce.core.output.ValueStreamingChannel<V>, K);

  public abstract java.util.List<V> sort(K, io.lettuce.core.SortArgs);

  public abstract java.lang.Long sort(io.lettuce.core.output.ValueStreamingChannel<V>, K, io.lettuce.core.SortArgs);

  public abstract java.lang.Long sortStore(K, io.lettuce.core.SortArgs, K);

  public abstract java.lang.Long touch(K...);

  public abstract java.lang.Long ttl(K);

  public abstract java.lang.String type(K);

  public abstract io.lettuce.core.KeyScanCursor<K> scan();

  public abstract io.lettuce.core.KeyScanCursor<K> scan(io.lettuce.core.ScanArgs);

  public abstract io.lettuce.core.KeyScanCursor<K> scan(io.lettuce.core.ScanCursor, io.lettuce.core.ScanArgs);

  public abstract io.lettuce.core.KeyScanCursor<K> scan(io.lettuce.core.ScanCursor);

  public abstract io.lettuce.core.StreamScanCursor scan(io.lettuce.core.output.KeyStreamingChannel<K>);

  public abstract io.lettuce.core.StreamScanCursor scan(io.lettuce.core.output.KeyStreamingChannel<K>, io.lettuce.core.ScanArgs);

  public abstract io.lettuce.core.StreamScanCursor scan(io.lettuce.core.output.KeyStreamingChannel<K>, io.lettuce.core.ScanCursor, io.lettuce.core.ScanArgs);

  public abstract io.lettuce.core.StreamScanCursor scan(io.lettuce.core.output.KeyStreamingChannel<K>, io.lettuce.core.ScanCursor);
}
