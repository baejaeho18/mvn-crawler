Compiled from "NodeSelectionSetAsyncCommands.java"
public interface io.lettuce.core.cluster.api.async.NodeSelectionSetAsyncCommands<K, V> {
  public abstract io.lettuce.core.cluster.api.async.AsyncExecutions<java.lang.Long> sadd(K, V...);

  public abstract io.lettuce.core.cluster.api.async.AsyncExecutions<java.lang.Long> scard(K);

  public abstract io.lettuce.core.cluster.api.async.AsyncExecutions<java.util.Set<V>> sdiff(K...);

  public abstract io.lettuce.core.cluster.api.async.AsyncExecutions<java.lang.Long> sdiff(io.lettuce.core.output.ValueStreamingChannel<V>, K...);

  public abstract io.lettuce.core.cluster.api.async.AsyncExecutions<java.lang.Long> sdiffstore(K, K...);

  public abstract io.lettuce.core.cluster.api.async.AsyncExecutions<java.util.Set<V>> sinter(K...);

  public abstract io.lettuce.core.cluster.api.async.AsyncExecutions<java.lang.Long> sinter(io.lettuce.core.output.ValueStreamingChannel<V>, K...);

  public abstract io.lettuce.core.cluster.api.async.AsyncExecutions<java.lang.Long> sinterstore(K, K...);

  public abstract io.lettuce.core.cluster.api.async.AsyncExecutions<java.lang.Boolean> sismember(K, V);

  public abstract io.lettuce.core.cluster.api.async.AsyncExecutions<java.lang.Boolean> smove(K, K, V);

  public abstract io.lettuce.core.cluster.api.async.AsyncExecutions<java.util.Set<V>> smembers(K);

  public abstract io.lettuce.core.cluster.api.async.AsyncExecutions<java.lang.Long> smembers(io.lettuce.core.output.ValueStreamingChannel<V>, K);

  public abstract io.lettuce.core.cluster.api.async.AsyncExecutions<V> spop(K);

  public abstract io.lettuce.core.cluster.api.async.AsyncExecutions<java.util.Set<V>> spop(K, long);

  public abstract io.lettuce.core.cluster.api.async.AsyncExecutions<V> srandmember(K);

  public abstract io.lettuce.core.cluster.api.async.AsyncExecutions<java.util.List<V>> srandmember(K, long);

  public abstract io.lettuce.core.cluster.api.async.AsyncExecutions<java.lang.Long> srandmember(io.lettuce.core.output.ValueStreamingChannel<V>, K, long);

  public abstract io.lettuce.core.cluster.api.async.AsyncExecutions<java.lang.Long> srem(K, V...);

  public abstract io.lettuce.core.cluster.api.async.AsyncExecutions<java.util.Set<V>> sunion(K...);

  public abstract io.lettuce.core.cluster.api.async.AsyncExecutions<java.lang.Long> sunion(io.lettuce.core.output.ValueStreamingChannel<V>, K...);

  public abstract io.lettuce.core.cluster.api.async.AsyncExecutions<java.lang.Long> sunionstore(K, K...);

  public abstract io.lettuce.core.cluster.api.async.AsyncExecutions<io.lettuce.core.ValueScanCursor<V>> sscan(K);

  public abstract io.lettuce.core.cluster.api.async.AsyncExecutions<io.lettuce.core.ValueScanCursor<V>> sscan(K, io.lettuce.core.ScanArgs);

  public abstract io.lettuce.core.cluster.api.async.AsyncExecutions<io.lettuce.core.ValueScanCursor<V>> sscan(K, io.lettuce.core.ScanCursor, io.lettuce.core.ScanArgs);

  public abstract io.lettuce.core.cluster.api.async.AsyncExecutions<io.lettuce.core.ValueScanCursor<V>> sscan(K, io.lettuce.core.ScanCursor);

  public abstract io.lettuce.core.cluster.api.async.AsyncExecutions<io.lettuce.core.StreamScanCursor> sscan(io.lettuce.core.output.ValueStreamingChannel<V>, K);

  public abstract io.lettuce.core.cluster.api.async.AsyncExecutions<io.lettuce.core.StreamScanCursor> sscan(io.lettuce.core.output.ValueStreamingChannel<V>, K, io.lettuce.core.ScanArgs);

  public abstract io.lettuce.core.cluster.api.async.AsyncExecutions<io.lettuce.core.StreamScanCursor> sscan(io.lettuce.core.output.ValueStreamingChannel<V>, K, io.lettuce.core.ScanCursor, io.lettuce.core.ScanArgs);

  public abstract io.lettuce.core.cluster.api.async.AsyncExecutions<io.lettuce.core.StreamScanCursor> sscan(io.lettuce.core.output.ValueStreamingChannel<V>, K, io.lettuce.core.ScanCursor);
}
