Compiled from "SynchronizingClusterConnectionProvider.java"
class io.lettuce.core.cluster.SynchronizingClusterConnectionProvider<K, V> {
  private final io.lettuce.core.cluster.ClusterNodeConnectionFactory<K, V> connectionFactory;

  private final java.util.Map<io.lettuce.core.cluster.ClusterNodeConnectionFactory$ConnectionKey, io.lettuce.core.cluster.SynchronizingClusterConnectionProvider$Sync<K, V>> connections;

  private volatile boolean closed;

  public io.lettuce.core.cluster.SynchronizingClusterConnectionProvider(io.lettuce.core.cluster.ClusterNodeConnectionFactory<K, V>);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #3                  // class java/util/concurrent/ConcurrentHashMap
       8: dup
       9: invokespecial #4                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      12: putfield      #5                  // Field connections:Ljava/util/Map;
      15: aload_1
      16: ldc           #6                  // String AsyncClusterConnectionFactory must not be null
      18: invokestatic  #7                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      21: aload_0
      22: aload_1
      23: putfield      #8                  // Field connectionFactory:Lio/lettuce/core/cluster/ClusterNodeConnectionFactory;
      26: return

  public io.lettuce.core.api.StatefulRedisConnection<K, V> getConnection(io.lettuce.core.cluster.ClusterNodeConnectionFactory$ConnectionKey);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #9                  // Method getConnectionSync:(Lio/lettuce/core/cluster/ClusterNodeConnectionFactory$ConnectionKey;)Lio/lettuce/core/cluster/SynchronizingClusterConnectionProvider$Sync;
       5: invokeinterface #10,  1           // InterfaceMethod io/lettuce/core/cluster/SynchronizingClusterConnectionProvider$Sync.getConnection:()Lio/lettuce/core/api/StatefulRedisConnection;
      10: areturn

  public io.lettuce.core.ConnectionFuture<io.lettuce.core.api.StatefulRedisConnection<K, V>> getConnectionAsync(io.lettuce.core.cluster.ClusterNodeConnectionFactory$ConnectionKey);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #9                  // Method getConnectionSync:(Lio/lettuce/core/cluster/ClusterNodeConnectionFactory$ConnectionKey;)Lio/lettuce/core/cluster/SynchronizingClusterConnectionProvider$Sync;
       5: invokeinterface #11,  1           // InterfaceMethod io/lettuce/core/cluster/SynchronizingClusterConnectionProvider$Sync.getConnectionAsync:()Lio/lettuce/core/ConnectionFuture;
      10: areturn

  private io.lettuce.core.cluster.SynchronizingClusterConnectionProvider$Sync<K, V> getConnectionSync(io.lettuce.core.cluster.ClusterNodeConnectionFactory$ConnectionKey);
    Code:
       0: aload_0
       1: getfield      #12                 // Field closed:Z
       4: ifeq          17
       7: new           #13                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #14                 // String AsyncClusterConnectionProvider is already closed
      13: invokespecial #15                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #5                  // Field connections:Ljava/util/Map;
      21: aload_1
      22: aload_0
      23: aload_1
      24: invokedynamic #16,  0             // InvokeDynamic #0:apply:(Lio/lettuce/core/cluster/SynchronizingClusterConnectionProvider;Lio/lettuce/core/cluster/ClusterNodeConnectionFactory$ConnectionKey;)Ljava/util/function/Function;
      29: invokeinterface #17,  3           // InterfaceMethod java/util/Map.computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;
      34: checkcast     #18                 // class io/lettuce/core/cluster/SynchronizingClusterConnectionProvider$Sync
      37: astore_2
      38: aload_2
      39: areturn

  public int getConnectionCount();
    Code:
       0: aload_0
       1: getfield      #5                  // Field connections:Ljava/util/Map;
       4: invokeinterface #19,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
       9: iconst_0
      10: anewarray     #20                 // class java/lang/Object
      13: invokeinterface #21,  2           // InterfaceMethod java/util/Collection.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      18: astore_1
      19: iconst_0
      20: istore_2
      21: aload_1
      22: astore_3
      23: aload_3
      24: arraylength
      25: istore        4
      27: iconst_0
      28: istore        5
      30: iload         5
      32: iload         4
      34: if_icmpge     60
      37: aload_3
      38: iload         5
      40: aaload
      41: astore        6
      43: aload         6
      45: instanceof    #22                 // class io/lettuce/core/cluster/SynchronizingClusterConnectionProvider$Finished
      48: ifeq          54
      51: iinc          2, 1
      54: iinc          5, 1
      57: goto          30
      60: iload_2
      61: ireturn

  public void close();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #12                 // Field closed:Z
       5: aload_0
       6: aload_0
       7: invokedynamic #23,  0             // InvokeDynamic #1:accept:(Lio/lettuce/core/cluster/SynchronizingClusterConnectionProvider;)Ljava/util/function/BiConsumer;
      12: invokevirtual #24                 // Method forEach:(Ljava/util/function/BiConsumer;)V
      15: return

  public void close(io.lettuce.core.cluster.ClusterNodeConnectionFactory$ConnectionKey);
    Code:
       0: aload_1
       1: ldc           #25                 // String ConnectionKey must not be null!
       3: invokestatic  #7                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: getfield      #5                  // Field connections:Ljava/util/Map;
      10: aload_1
      11: invokeinterface #26,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      16: checkcast     #18                 // class io/lettuce/core/cluster/SynchronizingClusterConnectionProvider$Sync
      19: astore_2
      20: aload_2
      21: ifnull        46
      24: aload_0
      25: getfield      #5                  // Field connections:Ljava/util/Map;
      28: aload_1
      29: invokeinterface #27,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      34: pop
      35: aload_2
      36: invokedynamic #28,  0             // InvokeDynamic #2:accept:()Ljava/util/function/Consumer;
      41: invokeinterface #29,  2           // InterfaceMethod io/lettuce/core/cluster/SynchronizingClusterConnectionProvider$Sync.doWithSync:(Ljava/util/function/Consumer;)V
      46: return

  public void forEach(java.util.function.Consumer<? super io.lettuce.core.api.StatefulRedisConnection<K, V>>);
    Code:
       0: aload_0
       1: getfield      #5                  // Field connections:Ljava/util/Map;
       4: invokeinterface #19,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
       9: aload_1
      10: invokedynamic #30,  0             // InvokeDynamic #3:accept:(Ljava/util/function/Consumer;)Ljava/util/function/Consumer;
      15: invokeinterface #31,  2           // InterfaceMethod java/util/Collection.forEach:(Ljava/util/function/Consumer;)V
      20: return

  public void forEach(java.util.function.BiConsumer<io.lettuce.core.cluster.ClusterNodeConnectionFactory$ConnectionKey, ? super io.lettuce.core.api.StatefulRedisConnection<K, V>>);
    Code:
       0: aload_0
       1: getfield      #5                  // Field connections:Ljava/util/Map;
       4: aload_1
       5: invokedynamic #32,  0             // InvokeDynamic #4:accept:(Ljava/util/function/BiConsumer;)Ljava/util/function/BiConsumer;
      10: invokeinterface #33,  2           // InterfaceMethod java/util/Map.forEach:(Ljava/util/function/BiConsumer;)V
      15: return

  private static void lambda$forEach$3(java.util.function.BiConsumer, io.lettuce.core.cluster.ClusterNodeConnectionFactory$ConnectionKey, io.lettuce.core.cluster.SynchronizingClusterConnectionProvider$Sync);
    Code:
       0: aload_2
       1: aload_0
       2: invokeinterface #34,  2           // InterfaceMethod io/lettuce/core/cluster/SynchronizingClusterConnectionProvider$Sync.doWithSync:(Ljava/util/function/BiConsumer;)V
       7: return

  private static void lambda$forEach$2(java.util.function.Consumer, io.lettuce.core.cluster.SynchronizingClusterConnectionProvider$Sync);
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #29,  2           // InterfaceMethod io/lettuce/core/cluster/SynchronizingClusterConnectionProvider$Sync.doWithSync:(Ljava/util/function/Consumer;)V
       7: return

  private void lambda$close$1(io.lettuce.core.cluster.ClusterNodeConnectionFactory$ConnectionKey, io.lettuce.core.api.StatefulRedisConnection);
    Code:
       0: aload_2
       1: invokeinterface #35,  1           // InterfaceMethod io/lettuce/core/api/StatefulRedisConnection.close:()V
       6: aload_0
       7: getfield      #5                  // Field connections:Ljava/util/Map;
      10: aload_1
      11: invokeinterface #27,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      16: pop
      17: return

  private io.lettuce.core.cluster.SynchronizingClusterConnectionProvider$Sync lambda$getConnectionSync$0(io.lettuce.core.cluster.ClusterNodeConnectionFactory$ConnectionKey, io.lettuce.core.cluster.ClusterNodeConnectionFactory$ConnectionKey);
    Code:
       0: new           #1                  // class io/lettuce/core/cluster/SynchronizingClusterConnectionProvider$InProgress
       3: dup
       4: aload_1
       5: aload_0
       6: getfield      #8                  // Field connectionFactory:Lio/lettuce/core/cluster/ClusterNodeConnectionFactory;
       9: aload_1
      10: invokeinterface #36,  2           // InterfaceMethod io/lettuce/core/cluster/ClusterNodeConnectionFactory.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      15: checkcast     #37                 // class io/lettuce/core/ConnectionFuture
      18: aload_0
      19: getfield      #5                  // Field connections:Ljava/util/Map;
      22: invokespecial #38                 // Method io/lettuce/core/cluster/SynchronizingClusterConnectionProvider$InProgress."<init>":(Lio/lettuce/core/cluster/ClusterNodeConnectionFactory$ConnectionKey;Lio/lettuce/core/ConnectionFuture;Ljava/util/Map;)V
      25: astore_3
      26: aload_0
      27: getfield      #12                 // Field closed:Z
      30: ifeq          54
      33: aload_3
      34: iconst_1
      35: invokestatic  #39                 // Method io/lettuce/core/cluster/SynchronizingClusterConnectionProvider$InProgress.access$002:(Lio/lettuce/core/cluster/SynchronizingClusterConnectionProvider$InProgress;I)I
      38: pop
      39: aload_3
      40: invokestatic  #40                 // Method io/lettuce/core/cluster/SynchronizingClusterConnectionProvider$InProgress.access$100:(Lio/lettuce/core/cluster/SynchronizingClusterConnectionProvider$InProgress;)Lio/lettuce/core/ConnectionFuture;
      43: invokedynamic #28,  0             // InvokeDynamic #2:accept:()Ljava/util/function/Consumer;
      48: invokeinterface #41,  2           // InterfaceMethod io/lettuce/core/ConnectionFuture.thenAcceptAsync:(Ljava/util/function/Consumer;)Lio/lettuce/core/ConnectionFuture;
      53: pop
      54: aload_3
      55: areturn
}
