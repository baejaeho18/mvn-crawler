Compiled from "Range.java"
public class io.lettuce.core.Range$Boundary<T> {
  private static final io.lettuce.core.Range$Boundary<?> UNBOUNDED;

  private final T value;

  private final boolean including;

  private io.lettuce.core.Range$Boundary(T, boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field value:Ljava/lang/Object;
       9: aload_0
      10: iload_2
      11: putfield      #3                  // Field including:Z
      14: return

  public static <T> io.lettuce.core.Range$Boundary<T> unbounded();
    Code:
       0: getstatic     #4                  // Field UNBOUNDED:Lio/lettuce/core/Range$Boundary;
       3: areturn

  public static <T> io.lettuce.core.Range$Boundary<T> including(T);
    Code:
       0: aload_0
       1: ldc           #5                  // String Value must not be null
       3: invokestatic  #6                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: new           #7                  // class io/lettuce/core/Range$Boundary
       9: dup
      10: aload_0
      11: iconst_1
      12: invokespecial #8                  // Method "<init>":(Ljava/lang/Object;Z)V
      15: areturn

  public static <T> io.lettuce.core.Range$Boundary<T> excluding(T);
    Code:
       0: aload_0
       1: ldc           #5                  // String Value must not be null
       3: invokestatic  #6                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: new           #7                  // class io/lettuce/core/Range$Boundary
       9: dup
      10: aload_0
      11: iconst_0
      12: invokespecial #8                  // Method "<init>":(Ljava/lang/Object;Z)V
      15: areturn

  public T getValue();
    Code:
       0: aload_0
       1: getfield      #2                  // Field value:Ljava/lang/Object;
       4: areturn

  public boolean isIncluding();
    Code:
       0: aload_0
       1: getfield      #3                  // Field including:Z
       4: ireturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #2                  // Field value:Ljava/lang/Object;
       4: ifnonnull     10
       7: ldc           #9                  // String [unbounded]
       9: areturn
      10: new           #10                 // class java/lang/StringBuilder
      13: dup
      14: invokespecial #11                 // Method java/lang/StringBuilder."<init>":()V
      17: astore_1
      18: aload_0
      19: getfield      #3                  // Field including:Z
      22: ifeq          35
      25: aload_1
      26: bipush        91
      28: invokevirtual #12                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      31: pop
      32: goto          42
      35: aload_1
      36: bipush        40
      38: invokevirtual #12                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      41: pop
      42: aload_1
      43: aload_0
      44: getfield      #2                  // Field value:Ljava/lang/Object;
      47: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      50: pop
      51: aload_1
      52: invokevirtual #14                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      55: areturn

  static {};
    Code:
       0: new           #7                  // class io/lettuce/core/Range$Boundary
       3: dup
       4: aconst_null
       5: iconst_1
       6: invokespecial #8                  // Method "<init>":(Ljava/lang/Object;Z)V
       9: putstatic     #4                  // Field UNBOUNDED:Lio/lettuce/core/Range$Boundary;
      12: return
}
