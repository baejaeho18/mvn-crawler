Compiled from "KeyValue.java"
public class io.lettuce.core.KeyValue<K, V> extends io.lettuce.core.Value<V> {
  private final K key;

  protected io.lettuce.core.KeyValue();
    Code:
       0: aload_0
       1: aconst_null
       2: invokespecial #1                  // Method io/lettuce/core/Value."<init>":(Ljava/lang/Object;)V
       5: aload_0
       6: aconst_null
       7: putfield      #2                  // Field key:Ljava/lang/Object;
      10: return

  private io.lettuce.core.KeyValue(K, V);
    Code:
       0: aload_0
       1: aload_2
       2: invokespecial #1                  // Method io/lettuce/core/Value."<init>":(Ljava/lang/Object;)V
       5: aload_1
       6: ldc           #3                  // String Key must not be null
       8: invokestatic  #4                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      11: aload_0
      12: aload_1
      13: putfield      #2                  // Field key:Ljava/lang/Object;
      16: return

  public static <K, T extends V, V> io.lettuce.core.KeyValue<K, V> from(K, java.util.Optional<T>);
    Code:
       0: aload_1
       1: ldc           #5                  // String Optional must not be null
       3: invokestatic  #4                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_1
       7: invokevirtual #6                  // Method java/util/Optional.isPresent:()Z
      10: ifeq          26
      13: new           #7                  // class io/lettuce/core/KeyValue
      16: dup
      17: aload_0
      18: aload_1
      19: invokevirtual #8                  // Method java/util/Optional.get:()Ljava/lang/Object;
      22: invokespecial #9                  // Method "<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      25: areturn
      26: aload_0
      27: invokestatic  #10                 // Method empty:(Ljava/lang/Object;)Lio/lettuce/core/KeyValue;
      30: areturn

  public static <K, T extends V, V> io.lettuce.core.KeyValue<K, V> fromNullable(K, T);
    Code:
       0: aload_1
       1: ifnonnull     9
       4: aload_0
       5: invokestatic  #10                 // Method empty:(Ljava/lang/Object;)Lio/lettuce/core/KeyValue;
       8: areturn
       9: new           #7                  // class io/lettuce/core/KeyValue
      12: dup
      13: aload_0
      14: aload_1
      15: invokespecial #9                  // Method "<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      18: areturn

  public static <K, V> io.lettuce.core.KeyValue<K, V> empty(K);
    Code:
       0: new           #7                  // class io/lettuce/core/KeyValue
       3: dup
       4: aload_0
       5: aconst_null
       6: invokespecial #9                  // Method "<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
       9: areturn

  public static <K, T extends V, V> io.lettuce.core.KeyValue<K, V> just(K, T);
    Code:
       0: aload_1
       1: ldc           #11                 // String Value must not be null
       3: invokestatic  #4                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: new           #7                  // class io/lettuce/core/KeyValue
       9: dup
      10: aload_0
      11: aload_1
      12: invokespecial #9                  // Method "<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      15: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: instanceof    #7                  // class io/lettuce/core/KeyValue
      11: ifne          16
      14: iconst_0
      15: ireturn
      16: aload_0
      17: aload_1
      18: invokespecial #12                 // Method io/lettuce/core/Value.equals:(Ljava/lang/Object;)Z
      21: ifne          26
      24: iconst_0
      25: ireturn
      26: aload_1
      27: checkcast     #7                  // class io/lettuce/core/KeyValue
      30: astore_2
      31: aload_0
      32: getfield      #2                  // Field key:Ljava/lang/Object;
      35: aload_2
      36: getfield      #2                  // Field key:Ljava/lang/Object;
      39: invokevirtual #13                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      42: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #2                  // Field key:Ljava/lang/Object;
       4: invokevirtual #14                 // Method java/lang/Object.hashCode:()I
       7: istore_1
       8: bipush        31
      10: iload_1
      11: imul
      12: aload_0
      13: invokevirtual #15                 // Method hasValue:()Z
      16: ifeq          29
      19: aload_0
      20: invokevirtual #16                 // Method getValue:()Ljava/lang/Object;
      23: invokevirtual #14                 // Method java/lang/Object.hashCode:()I
      26: goto          30
      29: iconst_0
      30: iadd
      31: istore_1
      32: iload_1
      33: ireturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokevirtual #15                 // Method hasValue:()Z
       4: ifeq          33
       7: ldc           #17                 // String KeyValue[%s, %s]
       9: iconst_2
      10: anewarray     #18                 // class java/lang/Object
      13: dup
      14: iconst_0
      15: aload_0
      16: getfield      #2                  // Field key:Ljava/lang/Object;
      19: aastore
      20: dup
      21: iconst_1
      22: aload_0
      23: invokevirtual #16                 // Method getValue:()Ljava/lang/Object;
      26: aastore
      27: invokestatic  #19                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      30: goto          49
      33: ldc           #20                 // String KeyValue[%s].empty
      35: iconst_1
      36: anewarray     #18                 // class java/lang/Object
      39: dup
      40: iconst_0
      41: aload_0
      42: getfield      #2                  // Field key:Ljava/lang/Object;
      45: aastore
      46: invokestatic  #19                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      49: areturn

  public K getKey();
    Code:
       0: aload_0
       1: getfield      #2                  // Field key:Ljava/lang/Object;
       4: areturn

  public <R> io.lettuce.core.KeyValue<K, R> map(java.util.function.Function<? super V, ? extends R>);
    Code:
       0: aload_1
       1: ldc           #21                 // String Mapper function must not be null
       3: invokestatic  #4                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: invokevirtual #15                 // Method hasValue:()Z
      10: ifeq          35
      13: new           #7                  // class io/lettuce/core/KeyValue
      16: dup
      17: aload_0
      18: invokevirtual #22                 // Method getKey:()Ljava/lang/Object;
      21: aload_1
      22: aload_0
      23: invokevirtual #16                 // Method getValue:()Ljava/lang/Object;
      26: invokeinterface #23,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      31: invokespecial #9                  // Method "<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      34: areturn
      35: aload_0
      36: areturn

  public io.lettuce.core.Value map(java.util.function.Function);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #24                 // Method map:(Ljava/util/function/Function;)Lio/lettuce/core/KeyValue;
       5: areturn
}
