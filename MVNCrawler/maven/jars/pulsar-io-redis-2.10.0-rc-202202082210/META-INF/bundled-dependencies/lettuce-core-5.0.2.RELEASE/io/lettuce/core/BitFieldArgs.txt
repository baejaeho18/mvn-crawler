Compiled from "BitFieldArgs.java"
public class io.lettuce.core.BitFieldArgs implements io.lettuce.core.CompositeArgument {
  private java.util.List<io.lettuce.core.BitFieldArgs$SubCommand> commands;

  public io.lettuce.core.BitFieldArgs();
    Code:
       0: aload_0
       1: new           #1                  // class java/util/ArrayList
       4: dup
       5: invokespecial #2                  // Method java/util/ArrayList."<init>":()V
       8: invokespecial #3                  // Method "<init>":(Ljava/util/List;)V
      11: return

  private io.lettuce.core.BitFieldArgs(java.util.List<io.lettuce.core.BitFieldArgs$SubCommand>);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method java/lang/Object."<init>":()V
       4: aload_1
       5: ldc           #5                  // String Commands must not be null
       7: invokestatic  #6                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
      10: aload_0
      11: aload_1
      12: putfield      #7                  // Field commands:Ljava/util/List;
      15: return

  public static io.lettuce.core.BitFieldArgs$BitFieldType signed(int);
    Code:
       0: new           #8                  // class io/lettuce/core/BitFieldArgs$BitFieldType
       3: dup
       4: iconst_1
       5: iload_0
       6: aconst_null
       7: invokespecial #9                  // Method io/lettuce/core/BitFieldArgs$BitFieldType."<init>":(ZILio/lettuce/core/BitFieldArgs$1;)V
      10: areturn

  public static io.lettuce.core.BitFieldArgs$BitFieldType unsigned(int);
    Code:
       0: new           #8                  // class io/lettuce/core/BitFieldArgs$BitFieldType
       3: dup
       4: iconst_0
       5: iload_0
       6: aconst_null
       7: invokespecial #9                  // Method io/lettuce/core/BitFieldArgs$BitFieldType."<init>":(ZILio/lettuce/core/BitFieldArgs$1;)V
      10: areturn

  public static io.lettuce.core.BitFieldArgs$Offset offset(int);
    Code:
       0: new           #10                 // class io/lettuce/core/BitFieldArgs$Offset
       3: dup
       4: iconst_0
       5: iload_0
       6: aconst_null
       7: invokespecial #11                 // Method io/lettuce/core/BitFieldArgs$Offset."<init>":(ZILio/lettuce/core/BitFieldArgs$1;)V
      10: areturn

  public static io.lettuce.core.BitFieldArgs$Offset typeWidthBasedOffset(int);
    Code:
       0: new           #10                 // class io/lettuce/core/BitFieldArgs$Offset
       3: dup
       4: iconst_1
       5: iload_0
       6: aconst_null
       7: invokespecial #11                 // Method io/lettuce/core/BitFieldArgs$Offset."<init>":(ZILio/lettuce/core/BitFieldArgs$1;)V
      10: areturn

  private io.lettuce.core.BitFieldArgs addSubCommand(io.lettuce.core.BitFieldArgs$SubCommand);
    Code:
       0: aload_1
       1: ldc           #12                 // String SubCommand must not be null
       3: invokestatic  #6                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: getfield      #7                  // Field commands:Ljava/util/List;
      10: aload_1
      11: invokeinterface #13,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      16: pop
      17: aload_0
      18: areturn

  public io.lettuce.core.BitFieldArgs get();
    Code:
       0: aload_0
       1: aload_0
       2: invokespecial #14                 // Method previousFieldType:()Lio/lettuce/core/BitFieldArgs$BitFieldType;
       5: invokevirtual #15                 // Method get:(Lio/lettuce/core/BitFieldArgs$BitFieldType;)Lio/lettuce/core/BitFieldArgs;
       8: areturn

  public io.lettuce.core.BitFieldArgs get(io.lettuce.core.BitFieldArgs$BitFieldType);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: invokevirtual #16                 // Method get:(Lio/lettuce/core/BitFieldArgs$BitFieldType;I)Lio/lettuce/core/BitFieldArgs;
       6: areturn

  public io.lettuce.core.BitFieldArgs get(io.lettuce.core.BitFieldArgs$BitFieldType, int);
    Code:
       0: aload_0
       1: new           #17                 // class io/lettuce/core/BitFieldArgs$Get
       4: dup
       5: aload_1
       6: iconst_0
       7: iload_2
       8: aconst_null
       9: invokespecial #18                 // Method io/lettuce/core/BitFieldArgs$Get."<init>":(Lio/lettuce/core/BitFieldArgs$BitFieldType;ZILio/lettuce/core/BitFieldArgs$1;)V
      12: invokespecial #19                 // Method addSubCommand:(Lio/lettuce/core/BitFieldArgs$SubCommand;)Lio/lettuce/core/BitFieldArgs;
      15: areturn

  public io.lettuce.core.BitFieldArgs get(io.lettuce.core.BitFieldArgs$BitFieldType, io.lettuce.core.BitFieldArgs$Offset);
    Code:
       0: aload_2
       1: ldc           #20                 // String BitFieldOffset must not be null
       3: invokestatic  #6                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: new           #17                 // class io/lettuce/core/BitFieldArgs$Get
      10: dup
      11: aload_1
      12: aload_2
      13: invokevirtual #21                 // Method io/lettuce/core/BitFieldArgs$Offset.isMultiplyByTypeWidth:()Z
      16: aload_2
      17: invokevirtual #22                 // Method io/lettuce/core/BitFieldArgs$Offset.getOffset:()I
      20: aconst_null
      21: invokespecial #18                 // Method io/lettuce/core/BitFieldArgs$Get."<init>":(Lio/lettuce/core/BitFieldArgs$BitFieldType;ZILio/lettuce/core/BitFieldArgs$1;)V
      24: invokespecial #19                 // Method addSubCommand:(Lio/lettuce/core/BitFieldArgs$SubCommand;)Lio/lettuce/core/BitFieldArgs;
      27: areturn

  public io.lettuce.core.BitFieldArgs get(int);
    Code:
       0: aload_0
       1: aload_0
       2: invokespecial #14                 // Method previousFieldType:()Lio/lettuce/core/BitFieldArgs$BitFieldType;
       5: iload_1
       6: invokevirtual #16                 // Method get:(Lio/lettuce/core/BitFieldArgs$BitFieldType;I)Lio/lettuce/core/BitFieldArgs;
       9: areturn

  public io.lettuce.core.BitFieldArgs set(long);
    Code:
       0: aload_0
       1: aload_0
       2: invokespecial #14                 // Method previousFieldType:()Lio/lettuce/core/BitFieldArgs$BitFieldType;
       5: lload_1
       6: invokevirtual #23                 // Method set:(Lio/lettuce/core/BitFieldArgs$BitFieldType;J)Lio/lettuce/core/BitFieldArgs;
       9: areturn

  public io.lettuce.core.BitFieldArgs set(io.lettuce.core.BitFieldArgs$BitFieldType, long);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: lload_2
       4: invokevirtual #24                 // Method set:(Lio/lettuce/core/BitFieldArgs$BitFieldType;IJ)Lio/lettuce/core/BitFieldArgs;
       7: areturn

  public io.lettuce.core.BitFieldArgs set(int, long);
    Code:
       0: aload_0
       1: aload_0
       2: invokespecial #14                 // Method previousFieldType:()Lio/lettuce/core/BitFieldArgs$BitFieldType;
       5: iload_1
       6: lload_2
       7: invokevirtual #24                 // Method set:(Lio/lettuce/core/BitFieldArgs$BitFieldType;IJ)Lio/lettuce/core/BitFieldArgs;
      10: areturn

  public io.lettuce.core.BitFieldArgs set(io.lettuce.core.BitFieldArgs$BitFieldType, int, long);
    Code:
       0: aload_0
       1: new           #25                 // class io/lettuce/core/BitFieldArgs$Set
       4: dup
       5: aload_1
       6: iconst_0
       7: iload_2
       8: lload_3
       9: aconst_null
      10: invokespecial #26                 // Method io/lettuce/core/BitFieldArgs$Set."<init>":(Lio/lettuce/core/BitFieldArgs$BitFieldType;ZIJLio/lettuce/core/BitFieldArgs$1;)V
      13: invokespecial #19                 // Method addSubCommand:(Lio/lettuce/core/BitFieldArgs$SubCommand;)Lio/lettuce/core/BitFieldArgs;
      16: areturn

  public io.lettuce.core.BitFieldArgs set(io.lettuce.core.BitFieldArgs$BitFieldType, io.lettuce.core.BitFieldArgs$Offset, long);
    Code:
       0: aload_2
       1: ldc           #20                 // String BitFieldOffset must not be null
       3: invokestatic  #6                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: new           #25                 // class io/lettuce/core/BitFieldArgs$Set
      10: dup
      11: aload_1
      12: aload_2
      13: invokevirtual #21                 // Method io/lettuce/core/BitFieldArgs$Offset.isMultiplyByTypeWidth:()Z
      16: aload_2
      17: invokevirtual #22                 // Method io/lettuce/core/BitFieldArgs$Offset.getOffset:()I
      20: lload_3
      21: aconst_null
      22: invokespecial #26                 // Method io/lettuce/core/BitFieldArgs$Set."<init>":(Lio/lettuce/core/BitFieldArgs$BitFieldType;ZIJLio/lettuce/core/BitFieldArgs$1;)V
      25: invokespecial #19                 // Method addSubCommand:(Lio/lettuce/core/BitFieldArgs$SubCommand;)Lio/lettuce/core/BitFieldArgs;
      28: areturn

  public io.lettuce.core.BitFieldArgs incrBy(long);
    Code:
       0: aload_0
       1: aload_0
       2: invokespecial #14                 // Method previousFieldType:()Lio/lettuce/core/BitFieldArgs$BitFieldType;
       5: lload_1
       6: invokevirtual #27                 // Method incrBy:(Lio/lettuce/core/BitFieldArgs$BitFieldType;J)Lio/lettuce/core/BitFieldArgs;
       9: areturn

  public io.lettuce.core.BitFieldArgs incrBy(io.lettuce.core.BitFieldArgs$BitFieldType, long);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: lload_2
       4: invokevirtual #28                 // Method incrBy:(Lio/lettuce/core/BitFieldArgs$BitFieldType;IJ)Lio/lettuce/core/BitFieldArgs;
       7: areturn

  public io.lettuce.core.BitFieldArgs incrBy(int, long);
    Code:
       0: aload_0
       1: aload_0
       2: invokespecial #14                 // Method previousFieldType:()Lio/lettuce/core/BitFieldArgs$BitFieldType;
       5: iload_1
       6: lload_2
       7: invokevirtual #28                 // Method incrBy:(Lio/lettuce/core/BitFieldArgs$BitFieldType;IJ)Lio/lettuce/core/BitFieldArgs;
      10: areturn

  public io.lettuce.core.BitFieldArgs incrBy(io.lettuce.core.BitFieldArgs$BitFieldType, int, long);
    Code:
       0: aload_0
       1: new           #29                 // class io/lettuce/core/BitFieldArgs$IncrBy
       4: dup
       5: aload_1
       6: iconst_0
       7: iload_2
       8: lload_3
       9: aconst_null
      10: invokespecial #30                 // Method io/lettuce/core/BitFieldArgs$IncrBy."<init>":(Lio/lettuce/core/BitFieldArgs$BitFieldType;ZIJLio/lettuce/core/BitFieldArgs$1;)V
      13: invokespecial #19                 // Method addSubCommand:(Lio/lettuce/core/BitFieldArgs$SubCommand;)Lio/lettuce/core/BitFieldArgs;
      16: areturn

  public io.lettuce.core.BitFieldArgs incrBy(io.lettuce.core.BitFieldArgs$BitFieldType, io.lettuce.core.BitFieldArgs$Offset, long);
    Code:
       0: aload_2
       1: ldc           #20                 // String BitFieldOffset must not be null
       3: invokestatic  #6                  // Method io/lettuce/core/internal/LettuceAssert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: new           #29                 // class io/lettuce/core/BitFieldArgs$IncrBy
      10: dup
      11: aload_1
      12: aload_2
      13: invokevirtual #21                 // Method io/lettuce/core/BitFieldArgs$Offset.isMultiplyByTypeWidth:()Z
      16: aload_2
      17: invokevirtual #22                 // Method io/lettuce/core/BitFieldArgs$Offset.getOffset:()I
      20: lload_3
      21: aconst_null
      22: invokespecial #30                 // Method io/lettuce/core/BitFieldArgs$IncrBy."<init>":(Lio/lettuce/core/BitFieldArgs$BitFieldType;ZIJLio/lettuce/core/BitFieldArgs$1;)V
      25: invokespecial #19                 // Method addSubCommand:(Lio/lettuce/core/BitFieldArgs$SubCommand;)Lio/lettuce/core/BitFieldArgs;
      28: areturn

  public io.lettuce.core.BitFieldArgs overflow(io.lettuce.core.BitFieldArgs$OverflowType);
    Code:
       0: aload_0
       1: new           #31                 // class io/lettuce/core/BitFieldArgs$Overflow
       4: dup
       5: aload_1
       6: aconst_null
       7: invokespecial #32                 // Method io/lettuce/core/BitFieldArgs$Overflow."<init>":(Lio/lettuce/core/BitFieldArgs$OverflowType;Lio/lettuce/core/BitFieldArgs$1;)V
      10: invokespecial #19                 // Method addSubCommand:(Lio/lettuce/core/BitFieldArgs$SubCommand;)Lio/lettuce/core/BitFieldArgs;
      13: areturn

  private io.lettuce.core.BitFieldArgs$BitFieldType previousFieldType();
    Code:
       0: new           #1                  // class java/util/ArrayList
       3: dup
       4: aload_0
       5: getfield      #7                  // Field commands:Ljava/util/List;
       8: invokespecial #33                 // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
      11: astore_1
      12: aload_1
      13: invokestatic  #34                 // Method java/util/Collections.reverse:(Ljava/util/List;)V
      16: aload_1
      17: invokeinterface #35,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      22: astore_2
      23: aload_2
      24: invokeinterface #36,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      29: ifeq          90
      32: aload_2
      33: invokeinterface #37,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      38: checkcast     #38                 // class io/lettuce/core/BitFieldArgs$SubCommand
      41: astore_3
      42: aload_3
      43: instanceof    #17                 // class io/lettuce/core/BitFieldArgs$Get
      46: ifeq          57
      49: aload_3
      50: checkcast     #17                 // class io/lettuce/core/BitFieldArgs$Get
      53: invokestatic  #39                 // Method io/lettuce/core/BitFieldArgs$Get.access$600:(Lio/lettuce/core/BitFieldArgs$Get;)Lio/lettuce/core/BitFieldArgs$BitFieldType;
      56: areturn
      57: aload_3
      58: instanceof    #25                 // class io/lettuce/core/BitFieldArgs$Set
      61: ifeq          72
      64: aload_3
      65: checkcast     #25                 // class io/lettuce/core/BitFieldArgs$Set
      68: invokestatic  #40                 // Method io/lettuce/core/BitFieldArgs$Set.access$700:(Lio/lettuce/core/BitFieldArgs$Set;)Lio/lettuce/core/BitFieldArgs$BitFieldType;
      71: areturn
      72: aload_3
      73: instanceof    #29                 // class io/lettuce/core/BitFieldArgs$IncrBy
      76: ifeq          87
      79: aload_3
      80: checkcast     #29                 // class io/lettuce/core/BitFieldArgs$IncrBy
      83: invokestatic  #41                 // Method io/lettuce/core/BitFieldArgs$IncrBy.access$800:(Lio/lettuce/core/BitFieldArgs$IncrBy;)Lio/lettuce/core/BitFieldArgs$BitFieldType;
      86: areturn
      87: goto          23
      90: new           #42                 // class java/lang/IllegalStateException
      93: dup
      94: ldc           #43                 // String No previous field type found
      96: invokespecial #44                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      99: athrow

  public <K, V> void build(io.lettuce.core.protocol.CommandArgs<K, V>);
    Code:
       0: aload_0
       1: getfield      #7                  // Field commands:Ljava/util/List;
       4: invokeinterface #35,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       9: astore_2
      10: aload_2
      11: invokeinterface #36,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          37
      19: aload_2
      20: invokeinterface #37,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #38                 // class io/lettuce/core/BitFieldArgs$SubCommand
      28: astore_3
      29: aload_3
      30: aload_1
      31: invokevirtual #45                 // Method io/lettuce/core/BitFieldArgs$SubCommand.build:(Lio/lettuce/core/protocol/CommandArgs;)V
      34: goto          10
      37: return
}
