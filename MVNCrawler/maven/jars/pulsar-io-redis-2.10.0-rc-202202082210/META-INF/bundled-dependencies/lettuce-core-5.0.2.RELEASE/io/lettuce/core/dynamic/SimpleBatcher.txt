Compiled from "SimpleBatcher.java"
class io.lettuce.core.dynamic.SimpleBatcher implements io.lettuce.core.dynamic.Batcher {
  private final io.lettuce.core.api.StatefulConnection<java.lang.Object, java.lang.Object> connection;

  private final int batchSize;

  private final java.util.concurrent.BlockingQueue<io.lettuce.core.protocol.RedisCommand<java.lang.Object, java.lang.Object, java.lang.Object>> queue;

  private final java.util.concurrent.atomic.AtomicBoolean flushing;

  static final boolean $assertionsDisabled;

  public io.lettuce.core.dynamic.SimpleBatcher(io.lettuce.core.api.StatefulConnection<java.lang.Object, java.lang.Object>, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/LinkedBlockingQueue
       8: dup
       9: invokespecial #3                  // Method java/util/concurrent/LinkedBlockingQueue."<init>":()V
      12: putfield      #4                  // Field queue:Ljava/util/concurrent/BlockingQueue;
      15: aload_0
      16: new           #5                  // class java/util/concurrent/atomic/AtomicBoolean
      19: dup
      20: invokespecial #6                  // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
      23: putfield      #7                  // Field flushing:Ljava/util/concurrent/atomic/AtomicBoolean;
      26: iload_2
      27: iconst_m1
      28: if_icmpeq     36
      31: iload_2
      32: iconst_1
      33: if_icmple     40
      36: iconst_1
      37: goto          41
      40: iconst_0
      41: ldc           #8                  // String Batch size must be greater zero or -1
      43: invokestatic  #9                  // Method io/lettuce/core/internal/LettuceAssert.isTrue:(ZLjava/lang/String;)V
      46: aload_0
      47: aload_1
      48: putfield      #10                 // Field connection:Lio/lettuce/core/api/StatefulConnection;
      51: aload_0
      52: iload_2
      53: putfield      #11                 // Field batchSize:I
      56: return

  public io.lettuce.core.dynamic.BatchTasks batch(io.lettuce.core.protocol.RedisCommand<java.lang.Object, java.lang.Object, java.lang.Object>, io.lettuce.core.dynamic.batch.CommandBatching);
    Code:
       0: aload_0
       1: getfield      #4                  // Field queue:Ljava/util/concurrent/BlockingQueue;
       4: aload_1
       5: invokeinterface #12,  2           // InterfaceMethod java/util/concurrent/BlockingQueue.add:(Ljava/lang/Object;)Z
      10: pop
      11: aload_2
      12: invokestatic  #13                 // Method io/lettuce/core/dynamic/batch/CommandBatching.queue:()Lio/lettuce/core/dynamic/batch/CommandBatching;
      15: if_acmpne     22
      18: getstatic     #14                 // Field io/lettuce/core/dynamic/BatchTasks.EMPTY:Lio/lettuce/core/dynamic/BatchTasks;
      21: areturn
      22: aload_2
      23: invokestatic  #15                 // Method io/lettuce/core/dynamic/batch/CommandBatching.flush:()Lio/lettuce/core/dynamic/batch/CommandBatching;
      26: if_acmpne     33
      29: iconst_1
      30: goto          34
      33: iconst_0
      34: istore_3
      35: iconst_0
      36: istore        4
      38: iload_3
      39: ifne          61
      42: aload_0
      43: getfield      #4                  // Field queue:Ljava/util/concurrent/BlockingQueue;
      46: invokeinterface #16,  1           // InterfaceMethod java/util/concurrent/BlockingQueue.size:()I
      51: aload_0
      52: getfield      #11                 // Field batchSize:I
      55: if_icmplt     61
      58: iconst_1
      59: istore        4
      61: iload         4
      63: ifne          70
      66: iload_3
      67: ifeq          76
      70: aload_0
      71: iload_3
      72: invokevirtual #17                 // Method flush:(Z)Lio/lettuce/core/dynamic/BatchTasks;
      75: areturn
      76: getstatic     #14                 // Field io/lettuce/core/dynamic/BatchTasks.EMPTY:Lio/lettuce/core/dynamic/BatchTasks;
      79: areturn

  public io.lettuce.core.dynamic.BatchTasks flush();
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #17                 // Method flush:(Z)Lio/lettuce/core/dynamic/BatchTasks;
       5: areturn

  protected io.lettuce.core.dynamic.BatchTasks flush(boolean);
    Code:
       0: iconst_0
       1: istore_2
       2: new           #18                 // class java/util/ArrayList
       5: dup
       6: aload_0
       7: getfield      #11                 // Field batchSize:I
      10: bipush        10
      12: invokestatic  #19                 // Method java/lang/Math.max:(II)I
      15: invokespecial #20                 // Method java/util/ArrayList."<init>":(I)V
      18: astore_3
      19: aload_0
      20: getfield      #7                  // Field flushing:Ljava/util/concurrent/atomic/AtomicBoolean;
      23: iconst_0
      24: iconst_1
      25: invokevirtual #21                 // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
      28: ifeq          170
      31: iconst_m1
      32: istore        4
      34: iload_1
      35: ifne          69
      38: aload_0
      39: getfield      #4                  // Field queue:Ljava/util/concurrent/BlockingQueue;
      42: invokeinterface #16,  1           // InterfaceMethod java/util/concurrent/BlockingQueue.size:()I
      47: i2l
      48: lstore        5
      50: lload         5
      52: aload_0
      53: getfield      #11                 // Field batchSize:I
      56: i2l
      57: lcmp
      58: iflt          69
      61: aload_0
      62: getfield      #11                 // Field batchSize:I
      65: istore        4
      67: iconst_1
      68: istore_2
      69: aload_0
      70: iload_1
      71: iload_2
      72: iload         4
      74: invokespecial #22                 // Method doFlush:(ZZI)Ljava/util/List;
      77: astore        5
      79: aload         5
      81: ifnull        93
      84: aload_3
      85: aload         5
      87: invokeinterface #23,  2           // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
      92: pop
      93: iload_2
      94: ifeq          136
      97: aload_0
      98: getfield      #4                  // Field queue:Ljava/util/concurrent/BlockingQueue;
     101: invokeinterface #24,  1           // InterfaceMethod java/util/concurrent/BlockingQueue.isEmpty:()Z
     106: ifne          136
     109: aload_0
     110: getfield      #4                  // Field queue:Ljava/util/concurrent/BlockingQueue;
     113: invokeinterface #16,  1           // InterfaceMethod java/util/concurrent/BlockingQueue.size:()I
     118: aload_0
     119: getfield      #11                 // Field batchSize:I
     122: if_icmple     136
     125: aload_0
     126: getfield      #7                  // Field flushing:Ljava/util/concurrent/atomic/AtomicBoolean;
     129: iconst_0
     130: invokevirtual #25                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
     133: goto          19
     136: new           #26                 // class io/lettuce/core/dynamic/BatchTasks
     139: dup
     140: aload_3
     141: invokespecial #27                 // Method io/lettuce/core/dynamic/BatchTasks."<init>":(Ljava/util/List;)V
     144: astore        6
     146: aload_0
     147: getfield      #7                  // Field flushing:Ljava/util/concurrent/atomic/AtomicBoolean;
     150: iconst_0
     151: invokevirtual #25                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
     154: aload         6
     156: areturn
     157: astore        7
     159: aload_0
     160: getfield      #7                  // Field flushing:Ljava/util/concurrent/atomic/AtomicBoolean;
     163: iconst_0
     164: invokevirtual #25                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
     167: aload         7
     169: athrow
     170: getstatic     #14                 // Field io/lettuce/core/dynamic/BatchTasks.EMPTY:Lio/lettuce/core/dynamic/BatchTasks;
     173: areturn
    Exception table:
       from    to  target type
          31   125   157   any
         136   146   157   any
         157   159   157   any

  private java.util.List<? extends io.lettuce.core.protocol.RedisCommand<?, ?, ?>> doFlush(boolean, boolean, int);
    Code:
       0: aconst_null
       1: astore        4
       3: iload_1
       4: ifeq          16
       7: aload_0
       8: invokespecial #28                 // Method prepareForceFlush:()Ljava/util/List;
      11: astore        4
      13: goto          27
      16: iload_2
      17: ifeq          27
      20: aload_0
      21: iload_3
      22: invokespecial #29                 // Method prepareDefaultFlush:(I)Ljava/util/List;
      25: astore        4
      27: aload         4
      29: ifnull        92
      32: aload         4
      34: invokeinterface #30,  1           // InterfaceMethod java/util/List.isEmpty:()Z
      39: ifne          92
      42: aload         4
      44: invokeinterface #31,  1           // InterfaceMethod java/util/List.size:()I
      49: iconst_1
      50: if_icmpne     77
      53: aload_0
      54: getfield      #10                 // Field connection:Lio/lettuce/core/api/StatefulConnection;
      57: aload         4
      59: iconst_0
      60: invokeinterface #32,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      65: checkcast     #33                 // class io/lettuce/core/protocol/RedisCommand
      68: invokeinterface #34,  2           // InterfaceMethod io/lettuce/core/api/StatefulConnection.dispatch:(Lio/lettuce/core/protocol/RedisCommand;)Lio/lettuce/core/protocol/RedisCommand;
      73: pop
      74: goto          89
      77: aload_0
      78: getfield      #10                 // Field connection:Lio/lettuce/core/api/StatefulConnection;
      81: aload         4
      83: invokeinterface #35,  2           // InterfaceMethod io/lettuce/core/api/StatefulConnection.dispatch:(Ljava/util/Collection;)Ljava/util/Collection;
      88: pop
      89: aload         4
      91: areturn
      92: invokestatic  #36                 // Method java/util/Collections.emptyList:()Ljava/util/List;
      95: areturn

  private java.util.List<io.lettuce.core.protocol.RedisCommand<java.lang.Object, java.lang.Object, java.lang.Object>> prepareForceFlush();
    Code:
       0: new           #18                 // class java/util/ArrayList
       3: dup
       4: aload_0
       5: getfield      #11                 // Field batchSize:I
       8: bipush        10
      10: invokestatic  #19                 // Method java/lang/Math.max:(II)I
      13: invokespecial #20                 // Method java/util/ArrayList."<init>":(I)V
      16: astore_1
      17: aload_0
      18: getfield      #4                  // Field queue:Ljava/util/concurrent/BlockingQueue;
      21: invokeinterface #37,  1           // InterfaceMethod java/util/concurrent/BlockingQueue.poll:()Ljava/lang/Object;
      26: checkcast     #33                 // class io/lettuce/core/protocol/RedisCommand
      29: astore_2
      30: getstatic     #38                 // Field $assertionsDisabled:Z
      33: ifne          48
      36: aload_2
      37: ifnonnull     48
      40: new           #39                 // class java/lang/AssertionError
      43: dup
      44: invokespecial #40                 // Method java/lang/AssertionError."<init>":()V
      47: athrow
      48: aload_1
      49: aload_2
      50: invokeinterface #41,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      55: pop
      56: aload_0
      57: getfield      #4                  // Field queue:Ljava/util/concurrent/BlockingQueue;
      60: invokeinterface #24,  1           // InterfaceMethod java/util/concurrent/BlockingQueue.isEmpty:()Z
      65: ifeq          17
      68: aload_1
      69: areturn

  private java.util.List<io.lettuce.core.protocol.RedisCommand<java.lang.Object, java.lang.Object, java.lang.Object>> prepareDefaultFlush(int);
    Code:
       0: new           #18                 // class java/util/ArrayList
       3: dup
       4: iload_1
       5: bipush        10
       7: invokestatic  #19                 // Method java/lang/Math.max:(II)I
      10: invokespecial #20                 // Method java/util/ArrayList."<init>":(I)V
      13: astore_2
      14: aload_2
      15: invokeinterface #31,  1           // InterfaceMethod java/util/List.size:()I
      20: iload_1
      21: if_icmplt     29
      24: iload_1
      25: iconst_m1
      26: if_icmpne     83
      29: aload_0
      30: getfield      #4                  // Field queue:Ljava/util/concurrent/BlockingQueue;
      33: invokeinterface #24,  1           // InterfaceMethod java/util/concurrent/BlockingQueue.isEmpty:()Z
      38: ifne          83
      41: aload_0
      42: getfield      #4                  // Field queue:Ljava/util/concurrent/BlockingQueue;
      45: invokeinterface #37,  1           // InterfaceMethod java/util/concurrent/BlockingQueue.poll:()Ljava/lang/Object;
      50: checkcast     #33                 // class io/lettuce/core/protocol/RedisCommand
      53: astore_3
      54: getstatic     #38                 // Field $assertionsDisabled:Z
      57: ifne          72
      60: aload_3
      61: ifnonnull     72
      64: new           #39                 // class java/lang/AssertionError
      67: dup
      68: invokespecial #40                 // Method java/lang/AssertionError."<init>":()V
      71: athrow
      72: aload_2
      73: aload_3
      74: invokeinterface #41,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      79: pop
      80: goto          14
      83: aload_2
      84: areturn

  static {};
    Code:
       0: ldc           #42                 // class io/lettuce/core/dynamic/SimpleBatcher
       2: invokevirtual #43                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #38                 // Field $assertionsDisabled:Z
      16: return
}
