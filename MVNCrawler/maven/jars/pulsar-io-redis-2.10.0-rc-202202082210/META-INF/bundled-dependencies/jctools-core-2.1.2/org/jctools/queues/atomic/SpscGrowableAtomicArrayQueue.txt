Compiled from "SpscGrowableAtomicArrayQueue.java"
public class org.jctools.queues.atomic.SpscGrowableAtomicArrayQueue<E> extends org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E> {
  private final int maxQueueCapacity;

  private long lookAheadStep;

  public org.jctools.queues.atomic.SpscGrowableAtomicArrayQueue(int);
    Code:
       0: aload_0
       1: bipush        8
       3: iload_1
       4: bipush        8
       6: idiv
       7: invokestatic  #1                  // Method org/jctools/util/Pow2.roundToPowerOfTwo:(I)I
      10: invokestatic  #2                  // Method java/lang/Math.max:(II)I
      13: iload_1
      14: invokespecial #3                  // Method "<init>":(II)V
      17: return

  public org.jctools.queues.atomic.SpscGrowableAtomicArrayQueue(int, int);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method org/jctools/queues/atomic/BaseSpscLinkedAtomicArrayQueue."<init>":()V
       4: iload_2
       5: bipush        16
       7: ldc           #5                  // String capacity
       9: invokestatic  #6                  // Method org/jctools/util/RangeUtil.checkGreaterThanOrEqual:(IILjava/lang/String;)I
      12: pop
      13: iload_1
      14: bipush        8
      16: ldc           #7                  // String chunkSize
      18: invokestatic  #6                  // Method org/jctools/util/RangeUtil.checkGreaterThanOrEqual:(IILjava/lang/String;)I
      21: pop
      22: aload_0
      23: iload_2
      24: invokestatic  #1                  // Method org/jctools/util/Pow2.roundToPowerOfTwo:(I)I
      27: putfield      #8                  // Field maxQueueCapacity:I
      30: iload_1
      31: invokestatic  #1                  // Method org/jctools/util/Pow2.roundToPowerOfTwo:(I)I
      34: istore_3
      35: iload_3
      36: aload_0
      37: getfield      #8                  // Field maxQueueCapacity:I
      40: ldc           #9                  // String chunkCapacity
      42: invokestatic  #10                 // Method org/jctools/util/RangeUtil.checkLessThan:(IILjava/lang/String;)I
      45: pop
      46: iload_3
      47: iconst_1
      48: isub
      49: i2l
      50: lstore        4
      52: iload_3
      53: iconst_1
      54: iadd
      55: invokestatic  #11                 // Method org/jctools/queues/atomic/LinkedAtomicArrayQueueUtil.allocate:(I)Ljava/util/concurrent/atomic/AtomicReferenceArray;
      58: astore        6
      60: aload_0
      61: aload         6
      63: putfield      #12                 // Field producerBuffer:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      66: aload_0
      67: lload         4
      69: putfield      #13                 // Field producerMask:J
      72: aload_0
      73: aload         6
      75: putfield      #14                 // Field consumerBuffer:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      78: aload_0
      79: lload         4
      81: putfield      #15                 // Field consumerMask:J
      84: aload_0
      85: lload         4
      87: lconst_1
      88: lsub
      89: putfield      #16                 // Field producerBufferLimit:J
      92: aload_0
      93: iload_3
      94: invokespecial #17                 // Method adjustLookAheadStep:(I)V
      97: return

  final boolean offerColdPath(java.util.concurrent.atomic.AtomicReferenceArray<E>, long, long, int, E, org.jctools.queues.MessagePassingQueue$Supplier<? extends E>);
    Code:
       0: aload_0
       1: getfield      #18                 // Field lookAheadStep:J
       4: lstore        9
       6: lload         9
       8: lconst_0
       9: lcmp
      10: ifle          316
      13: lload         4
      15: lload         9
      17: ladd
      18: lload_2
      19: invokestatic  #19                 // Method org/jctools/queues/atomic/LinkedAtomicArrayQueueUtil.calcElementOffset:(JJ)I
      22: istore        11
      24: aconst_null
      25: aload_1
      26: iload         11
      28: invokestatic  #20                 // Method org/jctools/queues/atomic/LinkedAtomicArrayQueueUtil.lvElement:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;
      31: if_acmpne     73
      34: aload_0
      35: lload         4
      37: lload         9
      39: ladd
      40: lconst_1
      41: lsub
      42: putfield      #16                 // Field producerBufferLimit:J
      45: aload_0
      46: aload_1
      47: aload         7
      49: ifnonnull     62
      52: aload         8
      54: invokeinterface #21,  1           // InterfaceMethod org/jctools/queues/MessagePassingQueue$Supplier.get:()Ljava/lang/Object;
      59: goto          64
      62: aload         7
      64: lload         4
      66: iload         6
      68: invokevirtual #22                 // Method writeToQueue:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/lang/Object;JI)V
      71: iconst_1
      72: ireturn
      73: aload_0
      74: getfield      #8                  // Field maxQueueCapacity:I
      77: istore        12
      79: lload_2
      80: lconst_1
      81: ladd
      82: iload         12
      84: i2l
      85: lcmp
      86: ifne          129
      89: aconst_null
      90: aload_1
      91: iload         6
      93: invokestatic  #20                 // Method org/jctools/queues/atomic/LinkedAtomicArrayQueueUtil.lvElement:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;
      96: if_acmpne     127
      99: aload_0
     100: aload_1
     101: aload         7
     103: ifnonnull     116
     106: aload         8
     108: invokeinterface #21,  1           // InterfaceMethod org/jctools/queues/MessagePassingQueue$Supplier.get:()Ljava/lang/Object;
     113: goto          118
     116: aload         7
     118: lload         4
     120: iload         6
     122: invokevirtual #22                 // Method writeToQueue:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/lang/Object;JI)V
     125: iconst_1
     126: ireturn
     127: iconst_0
     128: ireturn
     129: aconst_null
     130: aload_1
     131: lload         4
     133: lconst_1
     134: ladd
     135: lload_2
     136: invokestatic  #19                 // Method org/jctools/queues/atomic/LinkedAtomicArrayQueueUtil.calcElementOffset:(JJ)I
     139: invokestatic  #20                 // Method org/jctools/queues/atomic/LinkedAtomicArrayQueueUtil.lvElement:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;
     142: if_acmpne     174
     145: aload_0
     146: aload_1
     147: aload         7
     149: ifnonnull     162
     152: aload         8
     154: invokeinterface #21,  1           // InterfaceMethod org/jctools/queues/MessagePassingQueue$Supplier.get:()Ljava/lang/Object;
     159: goto          164
     162: aload         7
     164: lload         4
     166: iload         6
     168: invokevirtual #22                 // Method writeToQueue:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/lang/Object;JI)V
     171: goto          314
     174: ldc2_w        #23                 // long 2l
     177: lload_2
     178: lconst_1
     179: ladd
     180: lmul
     181: lconst_1
     182: ladd
     183: l2i
     184: invokestatic  #11                 // Method org/jctools/queues/atomic/LinkedAtomicArrayQueueUtil.allocate:(I)Ljava/util/concurrent/atomic/AtomicReferenceArray;
     187: astore        13
     189: aload_0
     190: aload         13
     192: putfield      #12                 // Field producerBuffer:Ljava/util/concurrent/atomic/AtomicReferenceArray;
     195: aload_0
     196: aload         13
     198: invokestatic  #25                 // Method org/jctools/queues/atomic/LinkedAtomicArrayQueueUtil.length:(Ljava/util/concurrent/atomic/AtomicReferenceArray;)I
     201: iconst_2
     202: isub
     203: i2l
     204: putfield      #13                 // Field producerMask:J
     207: lload         4
     209: aload_0
     210: getfield      #13                 // Field producerMask:J
     213: invokestatic  #19                 // Method org/jctools/queues/atomic/LinkedAtomicArrayQueueUtil.calcElementOffset:(JJ)I
     216: istore        14
     218: aload_0
     219: lload         4
     221: aload_1
     222: iload         6
     224: aload         13
     226: iload         14
     228: aload         7
     230: ifnonnull     243
     233: aload         8
     235: invokeinterface #21,  1           // InterfaceMethod org/jctools/queues/MessagePassingQueue$Supplier.get:()Ljava/lang/Object;
     240: goto          245
     243: aload         7
     245: invokevirtual #26                 // Method linkOldToNew:(JLjava/util/concurrent/atomic/AtomicReferenceArray;ILjava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V
     248: aload_0
     249: getfield      #13                 // Field producerMask:J
     252: lconst_1
     253: ladd
     254: l2i
     255: istore        15
     257: iload         15
     259: iload         12
     261: if_icmpne     295
     264: aload_0
     265: invokevirtual #27                 // Method lvConsumerIndex:()J
     268: lstore        16
     270: aload_0
     271: lload         4
     273: lload         16
     275: lsub
     276: lneg
     277: putfield      #18                 // Field lookAheadStep:J
     280: aload_0
     281: lload         16
     283: iload         12
     285: i2l
     286: ladd
     287: lconst_1
     288: lsub
     289: putfield      #16                 // Field producerBufferLimit:J
     292: goto          314
     295: aload_0
     296: lload         4
     298: aload_0
     299: getfield      #13                 // Field producerMask:J
     302: ladd
     303: lconst_1
     304: lsub
     305: putfield      #16                 // Field producerBufferLimit:J
     308: aload_0
     309: iload         15
     311: invokespecial #17                 // Method adjustLookAheadStep:(I)V
     314: iconst_1
     315: ireturn
     316: lload         9
     318: lneg
     319: lstore        11
     321: aload_0
     322: invokevirtual #27                 // Method lvConsumerIndex:()J
     325: lstore        13
     327: lload         4
     329: lload         13
     331: lsub
     332: l2i
     333: istore        15
     335: lload_2
     336: l2i
     337: iconst_1
     338: iadd
     339: istore        16
     341: iload         15
     343: iload         16
     345: if_icmpne     350
     348: iconst_0
     349: ireturn
     350: aload_0
     351: getfield      #16                 // Field producerBufferLimit:J
     354: iload         16
     356: i2l
     357: lsub
     358: lload         11
     360: ladd
     361: lstore        17
     363: lload         13
     365: lload         17
     367: lcmp
     368: iflt          380
     371: aload_0
     372: iload         16
     374: invokespecial #17                 // Method adjustLookAheadStep:(I)V
     377: goto          391
     380: aload_0
     381: lload         13
     383: lload         17
     385: lsub
     386: l2i
     387: i2l
     388: putfield      #18                 // Field lookAheadStep:J
     391: aload_0
     392: lload         13
     394: iload         16
     396: i2l
     397: ladd
     398: putfield      #16                 // Field producerBufferLimit:J
     401: aload_0
     402: aload_1
     403: aload         7
     405: ifnonnull     418
     408: aload         8
     410: invokeinterface #21,  1           // InterfaceMethod org/jctools/queues/MessagePassingQueue$Supplier.get:()Ljava/lang/Object;
     415: goto          420
     418: aload         7
     420: lload         4
     422: iload         6
     424: invokevirtual #22                 // Method writeToQueue:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/lang/Object;JI)V
     427: iconst_1
     428: ireturn

  private void adjustLookAheadStep(int);
    Code:
       0: aload_0
       1: iload_1
       2: iconst_4
       3: idiv
       4: getstatic     #28                 // Field org/jctools/queues/atomic/SpscAtomicArrayQueue.MAX_LOOK_AHEAD_STEP:I
       7: invokestatic  #29                 // Method java/lang/Math.min:(II)I
      10: i2l
      11: putfield      #18                 // Field lookAheadStep:J
      14: return

  public int capacity();
    Code:
       0: aload_0
       1: getfield      #8                  // Field maxQueueCapacity:I
       4: ireturn

  public java.lang.Object peek();
    Code:
       0: aload_0
       1: invokespecial #30                 // Method org/jctools/queues/atomic/BaseSpscLinkedAtomicArrayQueue.peek:()Ljava/lang/Object;
       4: areturn

  public java.lang.Object poll();
    Code:
       0: aload_0
       1: invokespecial #31                 // Method org/jctools/queues/atomic/BaseSpscLinkedAtomicArrayQueue.poll:()Ljava/lang/Object;
       4: areturn

  public boolean offer(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #32                 // Method org/jctools/queues/atomic/BaseSpscLinkedAtomicArrayQueue.offer:(Ljava/lang/Object;)Z
       5: ireturn

  public void fill(org.jctools.queues.MessagePassingQueue$Supplier, org.jctools.queues.MessagePassingQueue$WaitStrategy, org.jctools.queues.MessagePassingQueue$ExitCondition);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokespecial #33                 // Method org/jctools/queues/atomic/BaseSpscLinkedAtomicArrayQueue.fill:(Lorg/jctools/queues/MessagePassingQueue$Supplier;Lorg/jctools/queues/MessagePassingQueue$WaitStrategy;Lorg/jctools/queues/MessagePassingQueue$ExitCondition;)V
       7: return

  public void drain(org.jctools.queues.MessagePassingQueue$Consumer, org.jctools.queues.MessagePassingQueue$WaitStrategy, org.jctools.queues.MessagePassingQueue$ExitCondition);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokespecial #34                 // Method org/jctools/queues/atomic/BaseSpscLinkedAtomicArrayQueue.drain:(Lorg/jctools/queues/MessagePassingQueue$Consumer;Lorg/jctools/queues/MessagePassingQueue$WaitStrategy;Lorg/jctools/queues/MessagePassingQueue$ExitCondition;)V
       7: return

  public int fill(org.jctools.queues.MessagePassingQueue$Supplier, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokespecial #35                 // Method org/jctools/queues/atomic/BaseSpscLinkedAtomicArrayQueue.fill:(Lorg/jctools/queues/MessagePassingQueue$Supplier;I)I
       6: ireturn

  public int drain(org.jctools.queues.MessagePassingQueue$Consumer, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokespecial #36                 // Method org/jctools/queues/atomic/BaseSpscLinkedAtomicArrayQueue.drain:(Lorg/jctools/queues/MessagePassingQueue$Consumer;I)I
       6: ireturn

  public int fill(org.jctools.queues.MessagePassingQueue$Supplier);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #37                 // Method org/jctools/queues/atomic/BaseSpscLinkedAtomicArrayQueue.fill:(Lorg/jctools/queues/MessagePassingQueue$Supplier;)I
       5: ireturn

  public int drain(org.jctools.queues.MessagePassingQueue$Consumer);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #38                 // Method org/jctools/queues/atomic/BaseSpscLinkedAtomicArrayQueue.drain:(Lorg/jctools/queues/MessagePassingQueue$Consumer;)I
       5: ireturn

  public java.lang.Object relaxedPeek();
    Code:
       0: aload_0
       1: invokespecial #39                 // Method org/jctools/queues/atomic/BaseSpscLinkedAtomicArrayQueue.relaxedPeek:()Ljava/lang/Object;
       4: areturn

  public java.lang.Object relaxedPoll();
    Code:
       0: aload_0
       1: invokespecial #40                 // Method org/jctools/queues/atomic/BaseSpscLinkedAtomicArrayQueue.relaxedPoll:()Ljava/lang/Object;
       4: areturn

  public boolean relaxedOffer(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #41                 // Method org/jctools/queues/atomic/BaseSpscLinkedAtomicArrayQueue.relaxedOffer:(Ljava/lang/Object;)Z
       5: ireturn

  public long currentConsumerIndex();
    Code:
       0: aload_0
       1: invokespecial #42                 // Method org/jctools/queues/atomic/BaseSpscLinkedAtomicArrayQueue.currentConsumerIndex:()J
       4: lreturn

  public long currentProducerIndex();
    Code:
       0: aload_0
       1: invokespecial #43                 // Method org/jctools/queues/atomic/BaseSpscLinkedAtomicArrayQueue.currentProducerIndex:()J
       4: lreturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokespecial #44                 // Method org/jctools/queues/atomic/BaseSpscLinkedAtomicArrayQueue.toString:()Ljava/lang/String;
       4: areturn
}
