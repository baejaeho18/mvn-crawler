Compiled from "MpscChunkedAtomicArrayQueue.java"
public class org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue<E> extends org.jctools.queues.atomic.MpscChunkedAtomicArrayQueueColdProducerFields<E> {
  long p0;

  long p1;

  long p2;

  long p3;

  long p4;

  long p5;

  long p6;

  long p7;

  long p10;

  long p11;

  long p12;

  long p13;

  long p14;

  long p15;

  long p16;

  long p17;

  public org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue(int);
    Code:
       0: aload_0
       1: iconst_2
       2: sipush        1024
       5: iload_1
       6: bipush        8
       8: idiv
       9: invokestatic  #1                  // Method org/jctools/util/Pow2.roundToPowerOfTwo:(I)I
      12: invokestatic  #2                  // Method java/lang/Math.min:(II)I
      15: invokestatic  #3                  // Method java/lang/Math.max:(II)I
      18: iload_1
      19: invokespecial #4                  // Method org/jctools/queues/atomic/MpscChunkedAtomicArrayQueueColdProducerFields."<init>":(II)V
      22: return

  public org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokespecial #4                  // Method org/jctools/queues/atomic/MpscChunkedAtomicArrayQueueColdProducerFields."<init>":(II)V
       6: return

  protected long availableInQueue(long, long);
    Code:
       0: aload_0
       1: getfield      #5                  // Field maxQueueCapacity:J
       4: lload_1
       5: lload_3
       6: lsub
       7: lsub
       8: lreturn

  public int capacity();
    Code:
       0: aload_0
       1: getfield      #5                  // Field maxQueueCapacity:J
       4: ldc2_w        #6                  // long 2l
       7: ldiv
       8: l2i
       9: ireturn

  protected int getNextBufferSize(java.util.concurrent.atomic.AtomicReferenceArray<E>);
    Code:
       0: aload_1
       1: invokestatic  #8                  // Method org/jctools/queues/atomic/LinkedAtomicArrayQueueUtil.length:(Ljava/util/concurrent/atomic/AtomicReferenceArray;)I
       4: ireturn

  protected long getCurrentBufferCapacity(long);
    Code:
       0: lload_1
       1: lreturn
}
