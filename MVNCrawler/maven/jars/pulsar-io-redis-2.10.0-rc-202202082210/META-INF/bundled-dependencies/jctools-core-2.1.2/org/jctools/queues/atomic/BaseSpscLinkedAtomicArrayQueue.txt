Compiled from "BaseSpscLinkedAtomicArrayQueue.java"
abstract class org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E> extends org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueueProducerColdFields<E> implements org.jctools.queues.MessagePassingQueue<E>, org.jctools.queues.QueueProgressIndicators {
  private static final java.lang.Object JUMP;

  org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/jctools/queues/atomic/BaseSpscLinkedAtomicArrayQueueProducerColdFields."<init>":()V
       4: return

  public final java.util.Iterator<E> iterator();
    Code:
       0: new           #2                  // class java/lang/UnsupportedOperationException
       3: dup
       4: invokespecial #3                  // Method java/lang/UnsupportedOperationException."<init>":()V
       7: athrow

  public final int size();
    Code:
       0: aload_0
       1: invokestatic  #4                  // Method org/jctools/queues/IndexedQueueSizeUtil.size:(Lorg/jctools/queues/IndexedQueueSizeUtil$IndexedQueue;)I
       4: ireturn

  public final boolean isEmpty();
    Code:
       0: aload_0
       1: invokestatic  #5                  // Method org/jctools/queues/IndexedQueueSizeUtil.isEmpty:(Lorg/jctools/queues/IndexedQueueSizeUtil$IndexedQueue;)Z
       4: ireturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokevirtual #6                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
       4: invokevirtual #7                  // Method java/lang/Class.getName:()Ljava/lang/String;
       7: areturn

  public long currentProducerIndex();
    Code:
       0: aload_0
       1: invokevirtual #8                  // Method lvProducerIndex:()J
       4: lreturn

  public long currentConsumerIndex();
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method lvConsumerIndex:()J
       4: lreturn

  protected final void soNext(java.util.concurrent.atomic.AtomicReferenceArray<E>, java.util.concurrent.atomic.AtomicReferenceArray<E>);
    Code:
       0: aload_1
       1: invokestatic  #10                 // Method org/jctools/queues/atomic/LinkedAtomicArrayQueueUtil.nextArrayOffset:(Ljava/util/concurrent/atomic/AtomicReferenceArray;)I
       4: istore_3
       5: aload_1
       6: iload_3
       7: aload_2
       8: invokestatic  #11                 // Method org/jctools/queues/atomic/LinkedAtomicArrayQueueUtil.soElement:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V
      11: return

  protected final java.util.concurrent.atomic.AtomicReferenceArray<E> lvNextArrayAndUnlink(java.util.concurrent.atomic.AtomicReferenceArray<E>);
    Code:
       0: aload_1
       1: invokestatic  #10                 // Method org/jctools/queues/atomic/LinkedAtomicArrayQueueUtil.nextArrayOffset:(Ljava/util/concurrent/atomic/AtomicReferenceArray;)I
       4: istore_2
       5: aload_1
       6: iload_2
       7: invokestatic  #12                 // Method org/jctools/queues/atomic/LinkedAtomicArrayQueueUtil.lvElement:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;
      10: checkcast     #13                 // class java/util/concurrent/atomic/AtomicReferenceArray
      13: astore_3
      14: aload_1
      15: iload_2
      16: aconst_null
      17: invokestatic  #11                 // Method org/jctools/queues/atomic/LinkedAtomicArrayQueueUtil.soElement:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V
      20: aload_3
      21: areturn

  public boolean relaxedOffer(E);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #14                 // Method offer:(Ljava/lang/Object;)Z
       5: ireturn

  public E relaxedPoll();
    Code:
       0: aload_0
       1: invokevirtual #15                 // Method poll:()Ljava/lang/Object;
       4: areturn

  public E relaxedPeek();
    Code:
       0: aload_0
       1: invokevirtual #16                 // Method peek:()Ljava/lang/Object;
       4: areturn

  public int drain(org.jctools.queues.MessagePassingQueue$Consumer<E>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #17                 // Method org/jctools/queues/MessagePassingQueueUtil.drain:(Lorg/jctools/queues/MessagePassingQueue;Lorg/jctools/queues/MessagePassingQueue$Consumer;)I
       5: ireturn

  public int fill(org.jctools.queues.MessagePassingQueue$Supplier<E>);
    Code:
       0: lconst_0
       1: lstore_2
       2: aload_0
       3: invokevirtual #18                 // Method capacity:()I
       6: istore        4
       8: aload_0
       9: aload_1
      10: getstatic     #19                 // Field org/jctools/util/PortableJvmInfo.RECOMENDED_OFFER_BATCH:I
      13: invokevirtual #20                 // Method fill:(Lorg/jctools/queues/MessagePassingQueue$Supplier;I)I
      16: istore        5
      18: iload         5
      20: ifne          26
      23: lload_2
      24: l2i
      25: ireturn
      26: lload_2
      27: iload         5
      29: i2l
      30: ladd
      31: lstore_2
      32: lload_2
      33: iload         4
      35: i2l
      36: lcmp
      37: ifle          8
      40: lload_2
      41: l2i
      42: ireturn

  public int drain(org.jctools.queues.MessagePassingQueue$Consumer<E>, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokestatic  #21                 // Method org/jctools/queues/MessagePassingQueueUtil.drain:(Lorg/jctools/queues/MessagePassingQueue;Lorg/jctools/queues/MessagePassingQueue$Consumer;I)I
       6: ireturn

  public int fill(org.jctools.queues.MessagePassingQueue$Supplier<E>, int);
    Code:
       0: iconst_0
       1: istore_3
       2: iload_3
       3: iload_2
       4: if_icmpge     88
       7: aload_0
       8: getfield      #22                 // Field producerBuffer:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      11: astore        4
      13: aload_0
      14: getfield      #23                 // Field producerIndex:J
      17: lstore        5
      19: aload_0
      20: getfield      #24                 // Field producerMask:J
      23: lstore        7
      25: lload         5
      27: lload         7
      29: invokestatic  #25                 // Method org/jctools/queues/atomic/LinkedAtomicArrayQueueUtil.calcElementOffset:(JJ)I
      32: istore        9
      34: lload         5
      36: aload_0
      37: getfield      #26                 // Field producerBufferLimit:J
      40: lcmp
      41: ifge          63
      44: aload_0
      45: aload         4
      47: aload_1
      48: invokeinterface #27,  1           // InterfaceMethod org/jctools/queues/MessagePassingQueue$Supplier.get:()Ljava/lang/Object;
      53: lload         5
      55: iload         9
      57: invokevirtual #28                 // Method writeToQueue:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/lang/Object;JI)V
      60: goto          82
      63: aload_0
      64: aload         4
      66: lload         7
      68: lload         5
      70: iload         9
      72: aconst_null
      73: aload_1
      74: invokevirtual #29                 // Method offerColdPath:(Ljava/util/concurrent/atomic/AtomicReferenceArray;JJILjava/lang/Object;Lorg/jctools/queues/MessagePassingQueue$Supplier;)Z
      77: ifne          82
      80: iload_3
      81: ireturn
      82: iinc          3, 1
      85: goto          2
      88: iload_2
      89: ireturn

  public void drain(org.jctools.queues.MessagePassingQueue$Consumer<E>, org.jctools.queues.MessagePassingQueue$WaitStrategy, org.jctools.queues.MessagePassingQueue$ExitCondition);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokestatic  #30                 // Method org/jctools/queues/MessagePassingQueueUtil.drain:(Lorg/jctools/queues/MessagePassingQueue;Lorg/jctools/queues/MessagePassingQueue$Consumer;Lorg/jctools/queues/MessagePassingQueue$WaitStrategy;Lorg/jctools/queues/MessagePassingQueue$ExitCondition;)V
       7: return

  public void fill(org.jctools.queues.MessagePassingQueue$Supplier<E>, org.jctools.queues.MessagePassingQueue$WaitStrategy, org.jctools.queues.MessagePassingQueue$ExitCondition);
    Code:
       0: aload_3
       1: invokeinterface #31,  1           // InterfaceMethod org/jctools/queues/MessagePassingQueue$ExitCondition.keepRunning:()Z
       6: ifeq          71
       9: aload_0
      10: aload_1
      11: getstatic     #19                 // Field org/jctools/util/PortableJvmInfo.RECOMENDED_OFFER_BATCH:I
      14: invokevirtual #20                 // Method fill:(Lorg/jctools/queues/MessagePassingQueue$Supplier;I)I
      17: ifeq          32
      20: aload_3
      21: invokeinterface #31,  1           // InterfaceMethod org/jctools/queues/MessagePassingQueue$ExitCondition.keepRunning:()Z
      26: ifeq          32
      29: goto          9
      32: iconst_0
      33: istore        4
      35: aload_3
      36: invokeinterface #31,  1           // InterfaceMethod org/jctools/queues/MessagePassingQueue$ExitCondition.keepRunning:()Z
      41: ifeq          68
      44: aload_0
      45: aload_1
      46: getstatic     #19                 // Field org/jctools/util/PortableJvmInfo.RECOMENDED_OFFER_BATCH:I
      49: invokevirtual #20                 // Method fill:(Lorg/jctools/queues/MessagePassingQueue$Supplier;I)I
      52: ifne          68
      55: aload_2
      56: iload         4
      58: invokeinterface #32,  2           // InterfaceMethod org/jctools/queues/MessagePassingQueue$WaitStrategy.idle:(I)I
      63: istore        4
      65: goto          35
      68: goto          0
      71: return

  public boolean offer(E);
    Code:
       0: aconst_null
       1: aload_1
       2: if_acmpne     13
       5: new           #33                 // class java/lang/NullPointerException
       8: dup
       9: invokespecial #34                 // Method java/lang/NullPointerException."<init>":()V
      12: athrow
      13: aload_0
      14: getfield      #22                 // Field producerBuffer:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      17: astore_2
      18: aload_0
      19: getfield      #23                 // Field producerIndex:J
      22: lstore_3
      23: aload_0
      24: getfield      #24                 // Field producerMask:J
      27: lstore        5
      29: lload_3
      30: lload         5
      32: invokestatic  #25                 // Method org/jctools/queues/atomic/LinkedAtomicArrayQueueUtil.calcElementOffset:(JJ)I
      35: istore        7
      37: lload_3
      38: aload_0
      39: getfield      #26                 // Field producerBufferLimit:J
      42: lcmp
      43: ifge          57
      46: aload_0
      47: aload_2
      48: aload_1
      49: lload_3
      50: iload         7
      52: invokevirtual #28                 // Method writeToQueue:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/lang/Object;JI)V
      55: iconst_1
      56: ireturn
      57: aload_0
      58: aload_2
      59: lload         5
      61: lload_3
      62: iload         7
      64: aload_1
      65: aconst_null
      66: invokevirtual #29                 // Method offerColdPath:(Ljava/util/concurrent/atomic/AtomicReferenceArray;JJILjava/lang/Object;Lorg/jctools/queues/MessagePassingQueue$Supplier;)Z
      69: ireturn

  abstract boolean offerColdPath(java.util.concurrent.atomic.AtomicReferenceArray<E>, long, long, int, E, org.jctools.queues.MessagePassingQueue$Supplier<? extends E>);

  public E poll();
    Code:
       0: aload_0
       1: getfield      #35                 // Field consumerBuffer:Ljava/util/concurrent/atomic/AtomicReferenceArray;
       4: astore_1
       5: aload_0
       6: getfield      #36                 // Field consumerIndex:J
       9: lstore_2
      10: aload_0
      11: getfield      #37                 // Field consumerMask:J
      14: lstore        4
      16: lload_2
      17: lload         4
      19: invokestatic  #25                 // Method org/jctools/queues/atomic/LinkedAtomicArrayQueueUtil.calcElementOffset:(JJ)I
      22: istore        6
      24: aload_1
      25: iload         6
      27: invokestatic  #12                 // Method org/jctools/queues/atomic/LinkedAtomicArrayQueueUtil.lvElement:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;
      30: astore        7
      32: aload         7
      34: getstatic     #38                 // Field JUMP:Ljava/lang/Object;
      37: if_acmpne     44
      40: iconst_1
      41: goto          45
      44: iconst_0
      45: istore        8
      47: aconst_null
      48: aload         7
      50: if_acmpeq     75
      53: iload         8
      55: ifne          75
      58: aload_0
      59: lload_2
      60: lconst_1
      61: ladd
      62: invokevirtual #39                 // Method soConsumerIndex:(J)V
      65: aload_1
      66: iload         6
      68: aconst_null
      69: invokestatic  #11                 // Method org/jctools/queues/atomic/LinkedAtomicArrayQueueUtil.soElement:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V
      72: aload         7
      74: areturn
      75: iload         8
      77: ifeq          87
      80: aload_0
      81: aload_1
      82: lload_2
      83: invokespecial #40                 // Method newBufferPoll:(Ljava/util/concurrent/atomic/AtomicReferenceArray;J)Ljava/lang/Object;
      86: areturn
      87: aconst_null
      88: areturn

  public E peek();
    Code:
       0: aload_0
       1: getfield      #35                 // Field consumerBuffer:Ljava/util/concurrent/atomic/AtomicReferenceArray;
       4: astore_1
       5: aload_0
       6: getfield      #36                 // Field consumerIndex:J
       9: lstore_2
      10: aload_0
      11: getfield      #37                 // Field consumerMask:J
      14: lstore        4
      16: lload_2
      17: lload         4
      19: invokestatic  #25                 // Method org/jctools/queues/atomic/LinkedAtomicArrayQueueUtil.calcElementOffset:(JJ)I
      22: istore        6
      24: aload_1
      25: iload         6
      27: invokestatic  #12                 // Method org/jctools/queues/atomic/LinkedAtomicArrayQueueUtil.lvElement:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;
      30: astore        7
      32: aload         7
      34: getstatic     #38                 // Field JUMP:Ljava/lang/Object;
      37: if_acmpne     47
      40: aload_0
      41: aload_1
      42: lload_2
      43: invokespecial #41                 // Method newBufferPeek:(Ljava/util/concurrent/atomic/AtomicReferenceArray;J)Ljava/lang/Object;
      46: areturn
      47: aload         7
      49: areturn

  final void linkOldToNew(long, java.util.concurrent.atomic.AtomicReferenceArray<E>, int, java.util.concurrent.atomic.AtomicReferenceArray<E>, int, E);
    Code:
       0: aload         5
       2: iload         6
       4: aload         7
       6: invokestatic  #11                 // Method org/jctools/queues/atomic/LinkedAtomicArrayQueueUtil.soElement:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V
       9: aload_0
      10: aload_3
      11: aload         5
      13: invokevirtual #42                 // Method soNext:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/util/concurrent/atomic/AtomicReferenceArray;)V
      16: aload_3
      17: iload         4
      19: getstatic     #38                 // Field JUMP:Ljava/lang/Object;
      22: invokestatic  #11                 // Method org/jctools/queues/atomic/LinkedAtomicArrayQueueUtil.soElement:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V
      25: aload_0
      26: lload_1
      27: lconst_1
      28: ladd
      29: invokevirtual #43                 // Method soProducerIndex:(J)V
      32: return

  final void writeToQueue(java.util.concurrent.atomic.AtomicReferenceArray<E>, E, long, int);
    Code:
       0: aload_1
       1: iload         5
       3: aload_2
       4: invokestatic  #11                 // Method org/jctools/queues/atomic/LinkedAtomicArrayQueueUtil.soElement:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V
       7: aload_0
       8: lload_3
       9: lconst_1
      10: ladd
      11: invokevirtual #43                 // Method soProducerIndex:(J)V
      14: return

  private E newBufferPeek(java.util.concurrent.atomic.AtomicReferenceArray<E>, long);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #44                 // Method lvNextArrayAndUnlink:(Ljava/util/concurrent/atomic/AtomicReferenceArray;)Ljava/util/concurrent/atomic/AtomicReferenceArray;
       5: astore        4
       7: aload_0
       8: aload         4
      10: putfield      #35                 // Field consumerBuffer:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      13: aload         4
      15: invokestatic  #45                 // Method org/jctools/queues/atomic/LinkedAtomicArrayQueueUtil.length:(Ljava/util/concurrent/atomic/AtomicReferenceArray;)I
      18: iconst_2
      19: isub
      20: i2l
      21: lstore        5
      23: aload_0
      24: lload         5
      26: putfield      #37                 // Field consumerMask:J
      29: lload_2
      30: lload         5
      32: invokestatic  #25                 // Method org/jctools/queues/atomic/LinkedAtomicArrayQueueUtil.calcElementOffset:(JJ)I
      35: istore        7
      37: aload         4
      39: iload         7
      41: invokestatic  #12                 // Method org/jctools/queues/atomic/LinkedAtomicArrayQueueUtil.lvElement:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;
      44: areturn

  private E newBufferPoll(java.util.concurrent.atomic.AtomicReferenceArray<E>, long);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #44                 // Method lvNextArrayAndUnlink:(Ljava/util/concurrent/atomic/AtomicReferenceArray;)Ljava/util/concurrent/atomic/AtomicReferenceArray;
       5: astore        4
       7: aload_0
       8: aload         4
      10: putfield      #35                 // Field consumerBuffer:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      13: aload         4
      15: invokestatic  #45                 // Method org/jctools/queues/atomic/LinkedAtomicArrayQueueUtil.length:(Ljava/util/concurrent/atomic/AtomicReferenceArray;)I
      18: iconst_2
      19: isub
      20: i2l
      21: lstore        5
      23: aload_0
      24: lload         5
      26: putfield      #37                 // Field consumerMask:J
      29: lload_2
      30: lload         5
      32: invokestatic  #25                 // Method org/jctools/queues/atomic/LinkedAtomicArrayQueueUtil.calcElementOffset:(JJ)I
      35: istore        7
      37: aload         4
      39: iload         7
      41: invokestatic  #12                 // Method org/jctools/queues/atomic/LinkedAtomicArrayQueueUtil.lvElement:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;
      44: astore        8
      46: aconst_null
      47: aload         8
      49: if_acmpne     62
      52: new           #46                 // class java/lang/IllegalStateException
      55: dup
      56: ldc           #47                 // String new buffer must have at least one element
      58: invokespecial #48                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      61: athrow
      62: aload_0
      63: lload_2
      64: lconst_1
      65: ladd
      66: invokevirtual #39                 // Method soConsumerIndex:(J)V
      69: aload         4
      71: iload         7
      73: aconst_null
      74: invokestatic  #11                 // Method org/jctools/queues/atomic/LinkedAtomicArrayQueueUtil.soElement:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V
      77: aload         8
      79: areturn

  static {};
    Code:
       0: new           #49                 // class java/lang/Object
       3: dup
       4: invokespecial #50                 // Method java/lang/Object."<init>":()V
       7: putstatic     #38                 // Field JUMP:Ljava/lang/Object;
      10: return
}
