Compiled from "AbstractEpollChannel.java"
public abstract class io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe extends io.netty.channel.AbstractChannel$AbstractUnsafe {
  boolean readPending;

  boolean maybeMoreDataToRead;

  private io.netty.channel.epoll.EpollRecvByteAllocatorHandle allocHandle;

  private final java.lang.Runnable epollInReadyRunnable;

  static final boolean $assertionsDisabled;

  final io.netty.channel.epoll.AbstractEpollChannel this$0;

  protected io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe(io.netty.channel.epoll.AbstractEpollChannel);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
       5: aload_0
       6: aload_1
       7: invokespecial #2                  // Method io/netty/channel/AbstractChannel$AbstractUnsafe."<init>":(Lio/netty/channel/AbstractChannel;)V
      10: aload_0
      11: new           #3                  // class io/netty/channel/epoll/AbstractEpollChannel$AbstractEpollUnsafe$1
      14: dup
      15: aload_0
      16: invokespecial #4                  // Method io/netty/channel/epoll/AbstractEpollChannel$AbstractEpollUnsafe$1."<init>":(Lio/netty/channel/epoll/AbstractEpollChannel$AbstractEpollUnsafe;)V
      19: putfield      #5                  // Field epollInReadyRunnable:Ljava/lang/Runnable;
      22: return

  abstract void epollInReady();

  final void epollInBefore();
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #6                  // Field maybeMoreDataToRead:Z
       5: return

  final void epollInFinally(io.netty.channel.ChannelConfig);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #7                  // Field allocHandle:Lio/netty/channel/epoll/EpollRecvByteAllocatorHandle;
       5: invokevirtual #8                  // Method io/netty/channel/epoll/EpollRecvByteAllocatorHandle.maybeMoreDataToRead:()Z
       8: putfield      #6                  // Field maybeMoreDataToRead:Z
      11: aload_0
      12: getfield      #7                  // Field allocHandle:Lio/netty/channel/epoll/EpollRecvByteAllocatorHandle;
      15: invokevirtual #9                  // Method io/netty/channel/epoll/EpollRecvByteAllocatorHandle.isReceivedRdHup:()Z
      18: ifne          35
      21: aload_0
      22: getfield      #10                 // Field readPending:Z
      25: ifeq          43
      28: aload_0
      29: getfield      #6                  // Field maybeMoreDataToRead:Z
      32: ifeq          43
      35: aload_0
      36: aload_1
      37: invokevirtual #11                 // Method executeEpollInReadyRunnable:(Lio/netty/channel/ChannelConfig;)V
      40: goto          66
      43: aload_0
      44: getfield      #10                 // Field readPending:Z
      47: ifne          66
      50: aload_1
      51: invokeinterface #12,  1           // InterfaceMethod io/netty/channel/ChannelConfig.isAutoRead:()Z
      56: ifne          66
      59: aload_0
      60: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      63: invokevirtual #13                 // Method io/netty/channel/epoll/AbstractEpollChannel.clearEpollIn:()V
      66: return

  final void executeEpollInReadyRunnable(io.netty.channel.ChannelConfig);
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
       4: getfield      #14                 // Field io/netty/channel/epoll/AbstractEpollChannel.epollInReadyRunnablePending:Z
       7: ifne          31
      10: aload_0
      11: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      14: invokevirtual #15                 // Method io/netty/channel/epoll/AbstractEpollChannel.isActive:()Z
      17: ifeq          31
      20: aload_0
      21: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      24: aload_1
      25: invokevirtual #16                 // Method io/netty/channel/epoll/AbstractEpollChannel.shouldBreakEpollInReady:(Lio/netty/channel/ChannelConfig;)Z
      28: ifeq          32
      31: return
      32: aload_0
      33: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      36: iconst_1
      37: putfield      #14                 // Field io/netty/channel/epoll/AbstractEpollChannel.epollInReadyRunnablePending:Z
      40: aload_0
      41: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      44: invokevirtual #17                 // Method io/netty/channel/epoll/AbstractEpollChannel.eventLoop:()Lio/netty/channel/EventLoop;
      47: aload_0
      48: getfield      #5                  // Field epollInReadyRunnable:Ljava/lang/Runnable;
      51: invokeinterface #18,  2           // InterfaceMethod io/netty/channel/EventLoop.execute:(Ljava/lang/Runnable;)V
      56: return

  final void epollRdHupReady();
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method recvBufAllocHandle:()Lio/netty/channel/epoll/EpollRecvByteAllocatorHandle;
       4: invokevirtual #20                 // Method io/netty/channel/epoll/EpollRecvByteAllocatorHandle.receivedRdHup:()V
       7: aload_0
       8: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      11: invokevirtual #15                 // Method io/netty/channel/epoll/AbstractEpollChannel.isActive:()Z
      14: ifeq          24
      17: aload_0
      18: invokevirtual #21                 // Method epollInReady:()V
      21: goto          29
      24: aload_0
      25: iconst_1
      26: invokevirtual #22                 // Method shutdownInput:(Z)V
      29: aload_0
      30: invokespecial #23                 // Method clearEpollRdHup:()V
      33: return

  private void clearEpollRdHup();
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
       4: getstatic     #24                 // Field io/netty/channel/epoll/Native.EPOLLRDHUP:I
       7: invokevirtual #25                 // Method io/netty/channel/epoll/AbstractEpollChannel.clearFlag:(I)V
      10: goto          36
      13: astore_1
      14: aload_0
      15: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      18: invokevirtual #27                 // Method io/netty/channel/epoll/AbstractEpollChannel.pipeline:()Lio/netty/channel/ChannelPipeline;
      21: aload_1
      22: invokeinterface #28,  2           // InterfaceMethod io/netty/channel/ChannelPipeline.fireExceptionCaught:(Ljava/lang/Throwable;)Lio/netty/channel/ChannelPipeline;
      27: pop
      28: aload_0
      29: aload_0
      30: invokevirtual #29                 // Method voidPromise:()Lio/netty/channel/ChannelPromise;
      33: invokevirtual #30                 // Method close:(Lio/netty/channel/ChannelPromise;)V
      36: return
    Exception table:
       from    to  target type
           0    10    13   Class java/io/IOException

  void shutdownInput(boolean);
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
       4: getfield      #31                 // Field io/netty/channel/epoll/AbstractEpollChannel.socket:Lio/netty/channel/epoll/LinuxSocket;
       7: invokevirtual #32                 // Method io/netty/channel/epoll/LinuxSocket.isInputShutdown:()Z
      10: ifne          88
      13: aload_0
      14: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      17: invokevirtual #33                 // Method io/netty/channel/epoll/AbstractEpollChannel.config:()Lio/netty/channel/epoll/EpollChannelConfig;
      20: invokestatic  #34                 // Method io/netty/channel/epoll/AbstractEpollChannel.access$000:(Lio/netty/channel/ChannelConfig;)Z
      23: ifeq          77
      26: aload_0
      27: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      30: getfield      #31                 // Field io/netty/channel/epoll/AbstractEpollChannel.socket:Lio/netty/channel/epoll/LinuxSocket;
      33: iconst_1
      34: iconst_0
      35: invokevirtual #35                 // Method io/netty/channel/epoll/LinuxSocket.shutdown:(ZZ)V
      38: goto          51
      41: astore_2
      42: aload_0
      43: getstatic     #36                 // Field io/netty/channel/socket/ChannelInputShutdownEvent.INSTANCE:Lio/netty/channel/socket/ChannelInputShutdownEvent;
      46: invokespecial #37                 // Method fireEventAndClose:(Ljava/lang/Object;)V
      49: return
      50: astore_2
      51: aload_0
      52: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      55: invokevirtual #13                 // Method io/netty/channel/epoll/AbstractEpollChannel.clearEpollIn:()V
      58: aload_0
      59: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      62: invokevirtual #27                 // Method io/netty/channel/epoll/AbstractEpollChannel.pipeline:()Lio/netty/channel/ChannelPipeline;
      65: getstatic     #36                 // Field io/netty/channel/socket/ChannelInputShutdownEvent.INSTANCE:Lio/netty/channel/socket/ChannelInputShutdownEvent;
      68: invokeinterface #39,  2           // InterfaceMethod io/netty/channel/ChannelPipeline.fireUserEventTriggered:(Ljava/lang/Object;)Lio/netty/channel/ChannelPipeline;
      73: pop
      74: goto          116
      77: aload_0
      78: aload_0
      79: invokevirtual #29                 // Method voidPromise:()Lio/netty/channel/ChannelPromise;
      82: invokevirtual #30                 // Method close:(Lio/netty/channel/ChannelPromise;)V
      85: goto          116
      88: iload_1
      89: ifne          116
      92: aload_0
      93: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      96: iconst_1
      97: putfield      #40                 // Field io/netty/channel/epoll/AbstractEpollChannel.inputClosedSeenErrorOnRead:Z
     100: aload_0
     101: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
     104: invokevirtual #27                 // Method io/netty/channel/epoll/AbstractEpollChannel.pipeline:()Lio/netty/channel/ChannelPipeline;
     107: getstatic     #41                 // Field io/netty/channel/socket/ChannelInputShutdownReadComplete.INSTANCE:Lio/netty/channel/socket/ChannelInputShutdownReadComplete;
     110: invokeinterface #39,  2           // InterfaceMethod io/netty/channel/ChannelPipeline.fireUserEventTriggered:(Ljava/lang/Object;)Lio/netty/channel/ChannelPipeline;
     115: pop
     116: return
    Exception table:
       from    to  target type
          26    38    41   Class java/io/IOException
          26    38    50   Class java/nio/channels/NotYetConnectedException

  private void fireEventAndClose(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
       4: invokevirtual #27                 // Method io/netty/channel/epoll/AbstractEpollChannel.pipeline:()Lio/netty/channel/ChannelPipeline;
       7: aload_1
       8: invokeinterface #39,  2           // InterfaceMethod io/netty/channel/ChannelPipeline.fireUserEventTriggered:(Ljava/lang/Object;)Lio/netty/channel/ChannelPipeline;
      13: pop
      14: aload_0
      15: aload_0
      16: invokevirtual #29                 // Method voidPromise:()Lio/netty/channel/ChannelPromise;
      19: invokevirtual #30                 // Method close:(Lio/netty/channel/ChannelPromise;)V
      22: return

  public io.netty.channel.epoll.EpollRecvByteAllocatorHandle recvBufAllocHandle();
    Code:
       0: aload_0
       1: getfield      #7                  // Field allocHandle:Lio/netty/channel/epoll/EpollRecvByteAllocatorHandle;
       4: ifnonnull     22
       7: aload_0
       8: aload_0
       9: aload_0
      10: invokespecial #42                 // Method io/netty/channel/AbstractChannel$AbstractUnsafe.recvBufAllocHandle:()Lio/netty/channel/RecvByteBufAllocator$Handle;
      13: checkcast     #43                 // class io/netty/channel/RecvByteBufAllocator$ExtendedHandle
      16: invokevirtual #44                 // Method newEpollHandle:(Lio/netty/channel/RecvByteBufAllocator$ExtendedHandle;)Lio/netty/channel/epoll/EpollRecvByteAllocatorHandle;
      19: putfield      #7                  // Field allocHandle:Lio/netty/channel/epoll/EpollRecvByteAllocatorHandle;
      22: aload_0
      23: getfield      #7                  // Field allocHandle:Lio/netty/channel/epoll/EpollRecvByteAllocatorHandle;
      26: areturn

  io.netty.channel.epoll.EpollRecvByteAllocatorHandle newEpollHandle(io.netty.channel.RecvByteBufAllocator$ExtendedHandle);
    Code:
       0: new           #45                 // class io/netty/channel/epoll/EpollRecvByteAllocatorHandle
       3: dup
       4: aload_1
       5: invokespecial #46                 // Method io/netty/channel/epoll/EpollRecvByteAllocatorHandle."<init>":(Lio/netty/channel/RecvByteBufAllocator$ExtendedHandle;)V
       8: areturn

  protected final void flush0();
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
       4: getstatic     #47                 // Field io/netty/channel/epoll/Native.EPOLLOUT:I
       7: invokevirtual #48                 // Method io/netty/channel/epoll/AbstractEpollChannel.isFlagSet:(I)Z
      10: ifne          17
      13: aload_0
      14: invokespecial #49                 // Method io/netty/channel/AbstractChannel$AbstractUnsafe.flush0:()V
      17: return

  final void epollOutReady();
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
       4: invokestatic  #50                 // Method io/netty/channel/epoll/AbstractEpollChannel.access$100:(Lio/netty/channel/epoll/AbstractEpollChannel;)Lio/netty/channel/ChannelPromise;
       7: ifnull        17
      10: aload_0
      11: invokespecial #51                 // Method finishConnect:()V
      14: goto          34
      17: aload_0
      18: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      21: getfield      #31                 // Field io/netty/channel/epoll/AbstractEpollChannel.socket:Lio/netty/channel/epoll/LinuxSocket;
      24: invokevirtual #52                 // Method io/netty/channel/epoll/LinuxSocket.isOutputShutdown:()Z
      27: ifne          34
      30: aload_0
      31: invokespecial #49                 // Method io/netty/channel/AbstractChannel$AbstractUnsafe.flush0:()V
      34: return

  protected final void clearEpollIn0();
    Code:
       0: getstatic     #53                 // Field $assertionsDisabled:Z
       3: ifne          29
       6: aload_0
       7: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      10: invokevirtual #17                 // Method io/netty/channel/epoll/AbstractEpollChannel.eventLoop:()Lio/netty/channel/EventLoop;
      13: invokeinterface #54,  1           // InterfaceMethod io/netty/channel/EventLoop.inEventLoop:()Z
      18: ifne          29
      21: new           #55                 // class java/lang/AssertionError
      24: dup
      25: invokespecial #56                 // Method java/lang/AssertionError."<init>":()V
      28: athrow
      29: aload_0
      30: iconst_0
      31: putfield      #10                 // Field readPending:Z
      34: aload_0
      35: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      38: getstatic     #57                 // Field io/netty/channel/epoll/Native.EPOLLIN:I
      41: invokevirtual #25                 // Method io/netty/channel/epoll/AbstractEpollChannel.clearFlag:(I)V
      44: goto          86
      47: astore_1
      48: aload_0
      49: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      52: invokevirtual #27                 // Method io/netty/channel/epoll/AbstractEpollChannel.pipeline:()Lio/netty/channel/ChannelPipeline;
      55: aload_1
      56: invokeinterface #28,  2           // InterfaceMethod io/netty/channel/ChannelPipeline.fireExceptionCaught:(Ljava/lang/Throwable;)Lio/netty/channel/ChannelPipeline;
      61: pop
      62: aload_0
      63: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      66: invokevirtual #58                 // Method io/netty/channel/epoll/AbstractEpollChannel.unsafe:()Lio/netty/channel/Channel$Unsafe;
      69: aload_0
      70: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      73: invokevirtual #58                 // Method io/netty/channel/epoll/AbstractEpollChannel.unsafe:()Lio/netty/channel/Channel$Unsafe;
      76: invokeinterface #59,  1           // InterfaceMethod io/netty/channel/Channel$Unsafe.voidPromise:()Lio/netty/channel/ChannelPromise;
      81: invokeinterface #60,  2           // InterfaceMethod io/netty/channel/Channel$Unsafe.close:(Lio/netty/channel/ChannelPromise;)V
      86: return
    Exception table:
       from    to  target type
          29    44    47   Class java/io/IOException

  public void connect(java.net.SocketAddress, java.net.SocketAddress, io.netty.channel.ChannelPromise);
    Code:
       0: aload_3
       1: invokeinterface #61,  1           // InterfaceMethod io/netty/channel/ChannelPromise.setUncancellable:()Z
       6: ifeq          17
       9: aload_0
      10: aload_3
      11: invokevirtual #62                 // Method ensureOpen:(Lio/netty/channel/ChannelPromise;)Z
      14: ifne          18
      17: return
      18: aload_0
      19: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      22: invokestatic  #50                 // Method io/netty/channel/epoll/AbstractEpollChannel.access$100:(Lio/netty/channel/epoll/AbstractEpollChannel;)Lio/netty/channel/ChannelPromise;
      25: ifnull        36
      28: new           #63                 // class java/nio/channels/ConnectionPendingException
      31: dup
      32: invokespecial #64                 // Method java/nio/channels/ConnectionPendingException."<init>":()V
      35: athrow
      36: aload_0
      37: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      40: invokevirtual #15                 // Method io/netty/channel/epoll/AbstractEpollChannel.isActive:()Z
      43: istore        4
      45: aload_0
      46: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      49: aload_1
      50: aload_2
      51: invokevirtual #65                 // Method io/netty/channel/epoll/AbstractEpollChannel.doConnect:(Ljava/net/SocketAddress;Ljava/net/SocketAddress;)Z
      54: ifeq          67
      57: aload_0
      58: aload_3
      59: iload         4
      61: invokespecial #66                 // Method fulfillConnectPromise:(Lio/netty/channel/ChannelPromise;Z)V
      64: goto          152
      67: aload_0
      68: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      71: aload_3
      72: invokestatic  #67                 // Method io/netty/channel/epoll/AbstractEpollChannel.access$102:(Lio/netty/channel/epoll/AbstractEpollChannel;Lio/netty/channel/ChannelPromise;)Lio/netty/channel/ChannelPromise;
      75: pop
      76: aload_0
      77: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      80: aload_1
      81: invokestatic  #68                 // Method io/netty/channel/epoll/AbstractEpollChannel.access$202:(Lio/netty/channel/epoll/AbstractEpollChannel;Ljava/net/SocketAddress;)Ljava/net/SocketAddress;
      84: pop
      85: aload_0
      86: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      89: invokevirtual #33                 // Method io/netty/channel/epoll/AbstractEpollChannel.config:()Lio/netty/channel/epoll/EpollChannelConfig;
      92: invokevirtual #69                 // Method io/netty/channel/epoll/EpollChannelConfig.getConnectTimeoutMillis:()I
      95: istore        5
      97: iload         5
      99: ifle          137
     102: aload_0
     103: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
     106: aload_0
     107: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
     110: invokevirtual #17                 // Method io/netty/channel/epoll/AbstractEpollChannel.eventLoop:()Lio/netty/channel/EventLoop;
     113: new           #70                 // class io/netty/channel/epoll/AbstractEpollChannel$AbstractEpollUnsafe$2
     116: dup
     117: aload_0
     118: aload_1
     119: invokespecial #71                 // Method io/netty/channel/epoll/AbstractEpollChannel$AbstractEpollUnsafe$2."<init>":(Lio/netty/channel/epoll/AbstractEpollChannel$AbstractEpollUnsafe;Ljava/net/SocketAddress;)V
     122: iload         5
     124: i2l
     125: getstatic     #72                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
     128: invokeinterface #73,  5           // InterfaceMethod io/netty/channel/EventLoop.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/netty/util/concurrent/ScheduledFuture;
     133: invokestatic  #74                 // Method io/netty/channel/epoll/AbstractEpollChannel.access$302:(Lio/netty/channel/epoll/AbstractEpollChannel;Lio/netty/util/concurrent/Future;)Lio/netty/util/concurrent/Future;
     136: pop
     137: aload_3
     138: new           #75                 // class io/netty/channel/epoll/AbstractEpollChannel$AbstractEpollUnsafe$3
     141: dup
     142: aload_0
     143: invokespecial #76                 // Method io/netty/channel/epoll/AbstractEpollChannel$AbstractEpollUnsafe$3."<init>":(Lio/netty/channel/epoll/AbstractEpollChannel$AbstractEpollUnsafe;)V
     146: invokeinterface #77,  2           // InterfaceMethod io/netty/channel/ChannelPromise.addListener:(Lio/netty/util/concurrent/GenericFutureListener;)Lio/netty/channel/ChannelPromise;
     151: pop
     152: goto          175
     155: astore        4
     157: aload_0
     158: invokevirtual #79                 // Method closeIfClosed:()V
     161: aload_3
     162: aload_0
     163: aload         4
     165: aload_1
     166: invokevirtual #80                 // Method annotateConnectException:(Ljava/lang/Throwable;Ljava/net/SocketAddress;)Ljava/lang/Throwable;
     169: invokeinterface #81,  2           // InterfaceMethod io/netty/channel/ChannelPromise.tryFailure:(Ljava/lang/Throwable;)Z
     174: pop
     175: return
    Exception table:
       from    to  target type
          18   152   155   Class java/lang/Throwable

  private void fulfillConnectPromise(io.netty.channel.ChannelPromise, boolean);
    Code:
       0: aload_1
       1: ifnonnull     5
       4: return
       5: aload_0
       6: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
       9: iconst_1
      10: putfield      #82                 // Field io/netty/channel/epoll/AbstractEpollChannel.active:Z
      13: aload_0
      14: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      17: invokevirtual #15                 // Method io/netty/channel/epoll/AbstractEpollChannel.isActive:()Z
      20: istore_3
      21: aload_1
      22: invokeinterface #83,  1           // InterfaceMethod io/netty/channel/ChannelPromise.trySuccess:()Z
      27: istore        4
      29: iload_2
      30: ifne          50
      33: iload_3
      34: ifeq          50
      37: aload_0
      38: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      41: invokevirtual #27                 // Method io/netty/channel/epoll/AbstractEpollChannel.pipeline:()Lio/netty/channel/ChannelPipeline;
      44: invokeinterface #84,  1           // InterfaceMethod io/netty/channel/ChannelPipeline.fireChannelActive:()Lio/netty/channel/ChannelPipeline;
      49: pop
      50: iload         4
      52: ifne          63
      55: aload_0
      56: aload_0
      57: invokevirtual #29                 // Method voidPromise:()Lio/netty/channel/ChannelPromise;
      60: invokevirtual #30                 // Method close:(Lio/netty/channel/ChannelPromise;)V
      63: return

  private void fulfillConnectPromise(io.netty.channel.ChannelPromise, java.lang.Throwable);
    Code:
       0: aload_1
       1: ifnonnull     5
       4: return
       5: aload_1
       6: aload_2
       7: invokeinterface #81,  2           // InterfaceMethod io/netty/channel/ChannelPromise.tryFailure:(Ljava/lang/Throwable;)Z
      12: pop
      13: aload_0
      14: invokevirtual #79                 // Method closeIfClosed:()V
      17: return

  private void finishConnect();
    Code:
       0: getstatic     #53                 // Field $assertionsDisabled:Z
       3: ifne          29
       6: aload_0
       7: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      10: invokevirtual #17                 // Method io/netty/channel/epoll/AbstractEpollChannel.eventLoop:()Lio/netty/channel/EventLoop;
      13: invokeinterface #54,  1           // InterfaceMethod io/netty/channel/EventLoop.inEventLoop:()Z
      18: ifne          29
      21: new           #55                 // class java/lang/AssertionError
      24: dup
      25: invokespecial #56                 // Method java/lang/AssertionError."<init>":()V
      28: athrow
      29: iconst_0
      30: istore_1
      31: aload_0
      32: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      35: invokevirtual #15                 // Method io/netty/channel/epoll/AbstractEpollChannel.isActive:()Z
      38: istore_2
      39: aload_0
      40: invokespecial #85                 // Method doFinishConnect:()Z
      43: ifne          86
      46: iconst_1
      47: istore_1
      48: iload_1
      49: ifne          85
      52: aload_0
      53: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      56: invokestatic  #86                 // Method io/netty/channel/epoll/AbstractEpollChannel.access$300:(Lio/netty/channel/epoll/AbstractEpollChannel;)Lio/netty/util/concurrent/Future;
      59: ifnull        76
      62: aload_0
      63: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      66: invokestatic  #86                 // Method io/netty/channel/epoll/AbstractEpollChannel.access$300:(Lio/netty/channel/epoll/AbstractEpollChannel;)Lio/netty/util/concurrent/Future;
      69: iconst_0
      70: invokeinterface #87,  2           // InterfaceMethod io/netty/util/concurrent/Future.cancel:(Z)Z
      75: pop
      76: aload_0
      77: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      80: aconst_null
      81: invokestatic  #67                 // Method io/netty/channel/epoll/AbstractEpollChannel.access$102:(Lio/netty/channel/epoll/AbstractEpollChannel;Lio/netty/channel/ChannelPromise;)Lio/netty/channel/ChannelPromise;
      84: pop
      85: return
      86: aload_0
      87: aload_0
      88: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      91: invokestatic  #50                 // Method io/netty/channel/epoll/AbstractEpollChannel.access$100:(Lio/netty/channel/epoll/AbstractEpollChannel;)Lio/netty/channel/ChannelPromise;
      94: iload_2
      95: invokespecial #66                 // Method fulfillConnectPromise:(Lio/netty/channel/ChannelPromise;Z)V
      98: iload_1
      99: ifne          242
     102: aload_0
     103: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
     106: invokestatic  #86                 // Method io/netty/channel/epoll/AbstractEpollChannel.access$300:(Lio/netty/channel/epoll/AbstractEpollChannel;)Lio/netty/util/concurrent/Future;
     109: ifnull        126
     112: aload_0
     113: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
     116: invokestatic  #86                 // Method io/netty/channel/epoll/AbstractEpollChannel.access$300:(Lio/netty/channel/epoll/AbstractEpollChannel;)Lio/netty/util/concurrent/Future;
     119: iconst_0
     120: invokeinterface #87,  2           // InterfaceMethod io/netty/util/concurrent/Future.cancel:(Z)Z
     125: pop
     126: aload_0
     127: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
     130: aconst_null
     131: invokestatic  #67                 // Method io/netty/channel/epoll/AbstractEpollChannel.access$102:(Lio/netty/channel/epoll/AbstractEpollChannel;Lio/netty/channel/ChannelPromise;)Lio/netty/channel/ChannelPromise;
     134: pop
     135: goto          242
     138: astore_2
     139: aload_0
     140: aload_0
     141: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
     144: invokestatic  #50                 // Method io/netty/channel/epoll/AbstractEpollChannel.access$100:(Lio/netty/channel/epoll/AbstractEpollChannel;)Lio/netty/channel/ChannelPromise;
     147: aload_0
     148: aload_2
     149: aload_0
     150: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
     153: invokestatic  #88                 // Method io/netty/channel/epoll/AbstractEpollChannel.access$200:(Lio/netty/channel/epoll/AbstractEpollChannel;)Ljava/net/SocketAddress;
     156: invokevirtual #80                 // Method annotateConnectException:(Ljava/lang/Throwable;Ljava/net/SocketAddress;)Ljava/lang/Throwable;
     159: invokespecial #89                 // Method fulfillConnectPromise:(Lio/netty/channel/ChannelPromise;Ljava/lang/Throwable;)V
     162: iload_1
     163: ifne          242
     166: aload_0
     167: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
     170: invokestatic  #86                 // Method io/netty/channel/epoll/AbstractEpollChannel.access$300:(Lio/netty/channel/epoll/AbstractEpollChannel;)Lio/netty/util/concurrent/Future;
     173: ifnull        190
     176: aload_0
     177: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
     180: invokestatic  #86                 // Method io/netty/channel/epoll/AbstractEpollChannel.access$300:(Lio/netty/channel/epoll/AbstractEpollChannel;)Lio/netty/util/concurrent/Future;
     183: iconst_0
     184: invokeinterface #87,  2           // InterfaceMethod io/netty/util/concurrent/Future.cancel:(Z)Z
     189: pop
     190: aload_0
     191: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
     194: aconst_null
     195: invokestatic  #67                 // Method io/netty/channel/epoll/AbstractEpollChannel.access$102:(Lio/netty/channel/epoll/AbstractEpollChannel;Lio/netty/channel/ChannelPromise;)Lio/netty/channel/ChannelPromise;
     198: pop
     199: goto          242
     202: astore_3
     203: iload_1
     204: ifne          240
     207: aload_0
     208: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
     211: invokestatic  #86                 // Method io/netty/channel/epoll/AbstractEpollChannel.access$300:(Lio/netty/channel/epoll/AbstractEpollChannel;)Lio/netty/util/concurrent/Future;
     214: ifnull        231
     217: aload_0
     218: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
     221: invokestatic  #86                 // Method io/netty/channel/epoll/AbstractEpollChannel.access$300:(Lio/netty/channel/epoll/AbstractEpollChannel;)Lio/netty/util/concurrent/Future;
     224: iconst_0
     225: invokeinterface #87,  2           // InterfaceMethod io/netty/util/concurrent/Future.cancel:(Z)Z
     230: pop
     231: aload_0
     232: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
     235: aconst_null
     236: invokestatic  #67                 // Method io/netty/channel/epoll/AbstractEpollChannel.access$102:(Lio/netty/channel/epoll/AbstractEpollChannel;Lio/netty/channel/ChannelPromise;)Lio/netty/channel/ChannelPromise;
     239: pop
     240: aload_3
     241: athrow
     242: return
    Exception table:
       from    to  target type
          31    48   138   Class java/lang/Throwable
          86    98   138   Class java/lang/Throwable
          31    48   202   any
          86    98   202   any
         138   162   202   any

  private boolean doFinishConnect() throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
       4: getfield      #31                 // Field io/netty/channel/epoll/AbstractEpollChannel.socket:Lio/netty/channel/epoll/LinuxSocket;
       7: invokevirtual #90                 // Method io/netty/channel/epoll/LinuxSocket.finishConnect:()Z
      10: ifeq          78
      13: aload_0
      14: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      17: getstatic     #47                 // Field io/netty/channel/epoll/Native.EPOLLOUT:I
      20: invokevirtual #25                 // Method io/netty/channel/epoll/AbstractEpollChannel.clearFlag:(I)V
      23: aload_0
      24: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      27: invokestatic  #88                 // Method io/netty/channel/epoll/AbstractEpollChannel.access$200:(Lio/netty/channel/epoll/AbstractEpollChannel;)Ljava/net/SocketAddress;
      30: instanceof    #91                 // class java/net/InetSocketAddress
      33: ifeq          67
      36: aload_0
      37: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      40: aload_0
      41: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      44: invokestatic  #88                 // Method io/netty/channel/epoll/AbstractEpollChannel.access$200:(Lio/netty/channel/epoll/AbstractEpollChannel;)Ljava/net/SocketAddress;
      47: checkcast     #91                 // class java/net/InetSocketAddress
      50: aload_0
      51: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      54: getfield      #31                 // Field io/netty/channel/epoll/AbstractEpollChannel.socket:Lio/netty/channel/epoll/LinuxSocket;
      57: invokevirtual #92                 // Method io/netty/channel/epoll/LinuxSocket.remoteAddress:()Ljava/net/InetSocketAddress;
      60: invokestatic  #93                 // Method io/netty/channel/unix/UnixChannelUtil.computeRemoteAddr:(Ljava/net/InetSocketAddress;Ljava/net/InetSocketAddress;)Ljava/net/InetSocketAddress;
      63: invokestatic  #94                 // Method io/netty/channel/epoll/AbstractEpollChannel.access$402:(Lio/netty/channel/epoll/AbstractEpollChannel;Ljava/net/SocketAddress;)Ljava/net/SocketAddress;
      66: pop
      67: aload_0
      68: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      71: aconst_null
      72: invokestatic  #68                 // Method io/netty/channel/epoll/AbstractEpollChannel.access$202:(Lio/netty/channel/epoll/AbstractEpollChannel;Ljava/net/SocketAddress;)Ljava/net/SocketAddress;
      75: pop
      76: iconst_1
      77: ireturn
      78: aload_0
      79: getfield      #1                  // Field this$0:Lio/netty/channel/epoll/AbstractEpollChannel;
      82: getstatic     #47                 // Field io/netty/channel/epoll/Native.EPOLLOUT:I
      85: invokevirtual #95                 // Method io/netty/channel/epoll/AbstractEpollChannel.setFlag:(I)V
      88: iconst_0
      89: ireturn

  public io.netty.channel.RecvByteBufAllocator$Handle recvBufAllocHandle();
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method recvBufAllocHandle:()Lio/netty/channel/epoll/EpollRecvByteAllocatorHandle;
       4: areturn

  static {};
    Code:
       0: ldc           #96                 // class io/netty/channel/epoll/AbstractEpollChannel
       2: invokevirtual #97                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #53                 // Field $assertionsDisabled:Z
      16: return
}
