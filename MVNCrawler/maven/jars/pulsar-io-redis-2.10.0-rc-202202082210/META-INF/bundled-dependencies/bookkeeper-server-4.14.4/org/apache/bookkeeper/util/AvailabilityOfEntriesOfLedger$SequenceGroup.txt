Compiled from "AvailabilityOfEntriesOfLedger.java"
class org.apache.bookkeeper.util.AvailabilityOfEntriesOfLedger$SequenceGroup {
  private static final int SEQUENCEGROUP_BYTES;

  private final long firstSequenceStart;

  private final int sequenceSize;

  private long lastSequenceStart;

  private int sequencePeriod;

  private boolean isSequenceGroupClosed;

  private long numOfEntriesInSequenceGroup;

  private org.apache.bookkeeper.util.AvailabilityOfEntriesOfLedger$SequenceGroup(long, int);
    Code:
       0: aload_0
       1: invokespecial #18                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: ldc2_w        #19                 // long -1l
       8: putfield      #21                 // Field lastSequenceStart:J
      11: aload_0
      12: iconst_0
      13: putfield      #22                 // Field isSequenceGroupClosed:Z
      16: aload_0
      17: lconst_0
      18: putfield      #23                 // Field numOfEntriesInSequenceGroup:J
      21: aload_0
      22: lload_1
      23: putfield      #9                  // Field firstSequenceStart:J
      26: aload_0
      27: lload_1
      28: putfield      #21                 // Field lastSequenceStart:J
      31: aload_0
      32: iload_3
      33: putfield      #13                 // Field sequenceSize:I
      36: aload_0
      37: iconst_0
      38: putfield      #24                 // Field sequencePeriod:I
      41: return

  private org.apache.bookkeeper.util.AvailabilityOfEntriesOfLedger$SequenceGroup(byte[]);
    Code:
       0: aload_0
       1: invokespecial #18                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: ldc2_w        #19                 // long -1l
       8: putfield      #21                 // Field lastSequenceStart:J
      11: aload_0
      12: iconst_0
      13: putfield      #22                 // Field isSequenceGroupClosed:Z
      16: aload_0
      17: lconst_0
      18: putfield      #23                 // Field numOfEntriesInSequenceGroup:J
      21: aload_1
      22: invokestatic  #25                 // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;
      25: astore_2
      26: aload_0
      27: aload_2
      28: invokevirtual #26                 // Method java/nio/ByteBuffer.getLong:()J
      31: putfield      #9                  // Field firstSequenceStart:J
      34: aload_0
      35: aload_2
      36: invokevirtual #26                 // Method java/nio/ByteBuffer.getLong:()J
      39: putfield      #21                 // Field lastSequenceStart:J
      42: aload_0
      43: aload_2
      44: invokevirtual #27                 // Method java/nio/ByteBuffer.getInt:()I
      47: putfield      #13                 // Field sequenceSize:I
      50: aload_0
      51: aload_2
      52: invokevirtual #27                 // Method java/nio/ByteBuffer.getInt:()I
      55: putfield      #24                 // Field sequencePeriod:I
      58: aload_0
      59: invokespecial #15                 // Method setSequenceGroupClosed:()V
      62: return

  private boolean isSequenceGroupClosed();
    Code:
       0: aload_0
       1: getfield      #22                 // Field isSequenceGroupClosed:Z
       4: ireturn

  private void setSequenceGroupClosed();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #22                 // Field isSequenceGroupClosed:Z
       5: aload_0
       6: aload_0
       7: getfield      #21                 // Field lastSequenceStart:J
      10: aload_0
      11: getfield      #9                  // Field firstSequenceStart:J
      14: lsub
      15: lconst_0
      16: lcmp
      17: ifne          28
      20: aload_0
      21: getfield      #13                 // Field sequenceSize:I
      24: i2l
      25: goto          51
      28: aload_0
      29: getfield      #21                 // Field lastSequenceStart:J
      32: aload_0
      33: getfield      #9                  // Field firstSequenceStart:J
      36: lsub
      37: aload_0
      38: getfield      #24                 // Field sequencePeriod:I
      41: i2l
      42: ldiv
      43: lconst_1
      44: ladd
      45: aload_0
      46: getfield      #13                 // Field sequenceSize:I
      49: i2l
      50: lmul
      51: putfield      #23                 // Field numOfEntriesInSequenceGroup:J
      54: return

  private long getNumOfEntriesInSequenceGroup();
    Code:
       0: aload_0
       1: invokespecial #28                 // Method isSequenceGroupClosed:()Z
       4: ifne          17
       7: new           #29                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #30                 // String SequenceGroup is not yet closed, it is illegal to call getNumOfEntriesInSequenceGroup
      13: invokespecial #31                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #23                 // Field numOfEntriesInSequenceGroup:J
      21: lreturn

  private long getLastSequenceStart();
    Code:
       0: aload_0
       1: getfield      #21                 // Field lastSequenceStart:J
       4: lreturn

  private long getLastEntryInSequenceGroup();
    Code:
       0: aload_0
       1: getfield      #21                 // Field lastSequenceStart:J
       4: aload_0
       5: getfield      #13                 // Field sequenceSize:I
       8: i2l
       9: ladd
      10: lreturn

  private void setLastSequenceStart(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #21                 // Field lastSequenceStart:J
       5: return

  private int getSequencePeriod();
    Code:
       0: aload_0
       1: getfield      #24                 // Field sequencePeriod:I
       4: ireturn

  private void setSequencePeriod(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #24                 // Field sequencePeriod:I
       5: return

  private long getFirstSequenceStart();
    Code:
       0: aload_0
       1: getfield      #9                  // Field firstSequenceStart:J
       4: lreturn

  private void serializeSequenceGroup(byte[]);
    Code:
       0: aload_0
       1: invokespecial #28                 // Method isSequenceGroupClosed:()Z
       4: ifne          17
       7: new           #29                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #32                 // String SequenceGroup is not yet closed, it is illegal to call serializeSequenceGroup
      13: invokespecial #31                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_1
      18: invokestatic  #25                 // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;
      21: astore_2
      22: aload_2
      23: aload_0
      24: getfield      #9                  // Field firstSequenceStart:J
      27: invokevirtual #33                 // Method java/nio/ByteBuffer.putLong:(J)Ljava/nio/ByteBuffer;
      30: pop
      31: aload_2
      32: aload_0
      33: getfield      #21                 // Field lastSequenceStart:J
      36: invokevirtual #33                 // Method java/nio/ByteBuffer.putLong:(J)Ljava/nio/ByteBuffer;
      39: pop
      40: aload_2
      41: aload_0
      42: getfield      #13                 // Field sequenceSize:I
      45: invokevirtual #34                 // Method java/nio/ByteBuffer.putInt:(I)Ljava/nio/ByteBuffer;
      48: pop
      49: aload_2
      50: aload_0
      51: getfield      #24                 // Field sequencePeriod:I
      54: invokevirtual #34                 // Method java/nio/ByteBuffer.putInt:(I)Ljava/nio/ByteBuffer;
      57: pop
      58: return

  private boolean isEntryAvailable(long);
    Code:
       0: aload_0
       1: invokespecial #28                 // Method isSequenceGroupClosed:()Z
       4: ifne          17
       7: new           #29                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #35                 // String SequenceGroup is not yet closed, it is illegal to call isEntryAvailable
      13: invokespecial #31                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: lload_1
      18: aload_0
      19: getfield      #9                  // Field firstSequenceStart:J
      22: lcmp
      23: iflt          96
      26: lload_1
      27: aload_0
      28: getfield      #21                 // Field lastSequenceStart:J
      31: aload_0
      32: getfield      #13                 // Field sequenceSize:I
      35: i2l
      36: ladd
      37: lcmp
      38: ifgt          96
      41: aload_0
      42: getfield      #24                 // Field sequencePeriod:I
      45: ifne          69
      48: lload_1
      49: aload_0
      50: getfield      #9                  // Field firstSequenceStart:J
      53: lsub
      54: aload_0
      55: getfield      #13                 // Field sequenceSize:I
      58: i2l
      59: lcmp
      60: ifge          67
      63: iconst_1
      64: goto          68
      67: iconst_0
      68: ireturn
      69: lload_1
      70: aload_0
      71: getfield      #9                  // Field firstSequenceStart:J
      74: lsub
      75: aload_0
      76: getfield      #24                 // Field sequencePeriod:I
      79: i2l
      80: lrem
      81: aload_0
      82: getfield      #13                 // Field sequenceSize:I
      85: i2l
      86: lcmp
      87: ifge          94
      90: iconst_1
      91: goto          95
      94: iconst_0
      95: ireturn
      96: iconst_0
      97: ireturn

  org.apache.bookkeeper.util.AvailabilityOfEntriesOfLedger$SequenceGroup(byte[], org.apache.bookkeeper.util.AvailabilityOfEntriesOfLedger$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #17                 // Method "<init>":([B)V
       5: return

  static long access$100(org.apache.bookkeeper.util.AvailabilityOfEntriesOfLedger$SequenceGroup);
    Code:
       0: aload_0
       1: invokespecial #16                 // Method getFirstSequenceStart:()J
       4: lreturn

  static void access$200(org.apache.bookkeeper.util.AvailabilityOfEntriesOfLedger$SequenceGroup);
    Code:
       0: aload_0
       1: invokespecial #15                 // Method setSequenceGroupClosed:()V
       4: return

  org.apache.bookkeeper.util.AvailabilityOfEntriesOfLedger$SequenceGroup(long, int, org.apache.bookkeeper.util.AvailabilityOfEntriesOfLedger$1);
    Code:
       0: aload_0
       1: lload_1
       2: iload_3
       3: invokespecial #14                 // Method "<init>":(JI)V
       6: return

  static int access$400(org.apache.bookkeeper.util.AvailabilityOfEntriesOfLedger$SequenceGroup);
    Code:
       0: aload_0
       1: getfield      #13                 // Field sequenceSize:I
       4: ireturn

  static long access$500(org.apache.bookkeeper.util.AvailabilityOfEntriesOfLedger$SequenceGroup);
    Code:
       0: aload_0
       1: invokespecial #12                 // Method getLastSequenceStart:()J
       4: lreturn

  static int access$600(org.apache.bookkeeper.util.AvailabilityOfEntriesOfLedger$SequenceGroup);
    Code:
       0: aload_0
       1: invokespecial #11                 // Method getSequencePeriod:()I
       4: ireturn

  static void access$700(org.apache.bookkeeper.util.AvailabilityOfEntriesOfLedger$SequenceGroup, long);
    Code:
       0: aload_0
       1: lload_1
       2: invokespecial #10                 // Method setLastSequenceStart:(J)V
       5: return

  static long access$800(org.apache.bookkeeper.util.AvailabilityOfEntriesOfLedger$SequenceGroup);
    Code:
       0: aload_0
       1: getfield      #9                  // Field firstSequenceStart:J
       4: lreturn

  static void access$900(org.apache.bookkeeper.util.AvailabilityOfEntriesOfLedger$SequenceGroup, int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #8                  // Method setSequencePeriod:(I)V
       5: return

  static long access$1000(org.apache.bookkeeper.util.AvailabilityOfEntriesOfLedger$SequenceGroup);
    Code:
       0: aload_0
       1: invokespecial #7                  // Method getNumOfEntriesInSequenceGroup:()J
       4: lreturn

  static void access$1100(org.apache.bookkeeper.util.AvailabilityOfEntriesOfLedger$SequenceGroup, byte[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #6                  // Method serializeSequenceGroup:([B)V
       5: return

  static boolean access$1200(org.apache.bookkeeper.util.AvailabilityOfEntriesOfLedger$SequenceGroup, long);
    Code:
       0: aload_0
       1: lload_1
       2: invokespecial #5                  // Method isEntryAvailable:(J)Z
       5: ireturn

  static long access$1300(org.apache.bookkeeper.util.AvailabilityOfEntriesOfLedger$SequenceGroup);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method getLastEntryInSequenceGroup:()J
       4: lreturn
}
