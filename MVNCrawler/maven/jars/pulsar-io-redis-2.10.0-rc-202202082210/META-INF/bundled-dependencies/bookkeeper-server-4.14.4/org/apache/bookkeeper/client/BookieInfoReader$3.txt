Compiled from "BookieInfoReader.java"
class org.apache.bookkeeper.client.BookieInfoReader$3 implements org.apache.bookkeeper.proto.BookkeeperInternalCallbacks$GetBookieInfoCallback {
  final java.util.concurrent.ConcurrentMap val$map;

  final java.util.concurrent.atomic.AtomicInteger val$totalCompleted;

  final java.util.concurrent.atomic.AtomicInteger val$totalSent;

  final java.util.concurrent.CountDownLatch val$latch;

  final org.apache.bookkeeper.client.BookieInfoReader this$0;

  org.apache.bookkeeper.client.BookieInfoReader$3(org.apache.bookkeeper.client.BookieInfoReader, java.util.concurrent.ConcurrentMap, java.util.concurrent.atomic.AtomicInteger, java.util.concurrent.atomic.AtomicInteger, java.util.concurrent.CountDownLatch);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lorg/apache/bookkeeper/client/BookieInfoReader;
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field val$map:Ljava/util/concurrent/ConcurrentMap;
      10: aload_0
      11: aload_3
      12: putfield      #3                  // Field val$totalCompleted:Ljava/util/concurrent/atomic/AtomicInteger;
      15: aload_0
      16: aload         4
      18: putfield      #4                  // Field val$totalSent:Ljava/util/concurrent/atomic/AtomicInteger;
      21: aload_0
      22: aload         5
      24: putfield      #5                  // Field val$latch:Ljava/util/concurrent/CountDownLatch;
      27: aload_0
      28: invokespecial #6                  // Method java/lang/Object."<init>":()V
      31: return

  public void getBookieInfoComplete(int, org.apache.bookkeeper.client.BookieInfoReader$BookieInfo, java.lang.Object);
    Code:
       0: aload_3
       1: checkcast     #7                  // class org/apache/bookkeeper/net/BookieId
       4: astore        4
       6: iload_1
       7: ifeq          40
      10: invokestatic  #8                  // Method org/apache/bookkeeper/client/BookieInfoReader.access$000:()Lorg/slf4j/Logger;
      13: invokeinterface #9,  1            // InterfaceMethod org/slf4j/Logger.isErrorEnabled:()Z
      18: ifeq          83
      21: invokestatic  #8                  // Method org/apache/bookkeeper/client/BookieInfoReader.access$000:()Lorg/slf4j/Logger;
      24: ldc           #10                 // String Reading bookie info from bookie {} failed due to {}
      26: aload         4
      28: iload_1
      29: invokestatic  #11                 // Method org/apache/bookkeeper/client/BKException.codeLogger:(I)Ljava/lang/Object;
      32: invokeinterface #12,  4           // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      37: goto          83
      40: invokestatic  #8                  // Method org/apache/bookkeeper/client/BookieInfoReader.access$000:()Lorg/slf4j/Logger;
      43: invokeinterface #13,  1           // InterfaceMethod org/slf4j/Logger.isDebugEnabled:()Z
      48: ifeq          70
      51: invokestatic  #8                  // Method org/apache/bookkeeper/client/BookieInfoReader.access$000:()Lorg/slf4j/Logger;
      54: ldc           #14                 // String Free disk space on bookie {} is {}.
      56: aload         4
      58: aload_2
      59: invokevirtual #15                 // Method org/apache/bookkeeper/client/BookieInfoReader$BookieInfo.getFreeDiskSpace:()J
      62: invokestatic  #16                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      65: invokeinterface #17,  4           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      70: aload_0
      71: getfield      #2                  // Field val$map:Ljava/util/concurrent/ConcurrentMap;
      74: aload         4
      76: aload_2
      77: invokeinterface #18,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      82: pop
      83: aload_0
      84: getfield      #3                  // Field val$totalCompleted:Ljava/util/concurrent/atomic/AtomicInteger;
      87: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
      90: aload_0
      91: getfield      #4                  // Field val$totalSent:Ljava/util/concurrent/atomic/AtomicInteger;
      94: invokevirtual #20                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      97: if_icmpne     107
     100: aload_0
     101: getfield      #5                  // Field val$latch:Ljava/util/concurrent/CountDownLatch;
     104: invokevirtual #21                 // Method java/util/concurrent/CountDownLatch.countDown:()V
     107: return
}
