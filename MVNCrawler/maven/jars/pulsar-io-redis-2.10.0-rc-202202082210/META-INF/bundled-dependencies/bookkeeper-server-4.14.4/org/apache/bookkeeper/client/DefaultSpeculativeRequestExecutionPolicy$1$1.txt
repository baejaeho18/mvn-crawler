Compiled from "DefaultSpeculativeRequestExecutionPolicy.java"
class org.apache.bookkeeper.client.DefaultSpeculativeRequestExecutionPolicy$1$1 implements com.google.common.util.concurrent.FutureCallback<java.lang.Boolean> {
  final org.apache.bookkeeper.client.DefaultSpeculativeRequestExecutionPolicy$1 this$1;

  org.apache.bookkeeper.client.DefaultSpeculativeRequestExecutionPolicy$1$1(org.apache.bookkeeper.client.DefaultSpeculativeRequestExecutionPolicy$1);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$1:Lorg/apache/bookkeeper/client/DefaultSpeculativeRequestExecutionPolicy$1;
       5: aload_0
       6: invokespecial #2                  // Method java/lang/Object."<init>":()V
       9: return

  public void onSuccess(java.lang.Boolean);
    Code:
       0: aload_1
       1: invokevirtual #3                  // Method java/lang/Boolean.booleanValue:()Z
       4: ifeq          70
       7: aload_0
       8: getfield      #1                  // Field this$1:Lorg/apache/bookkeeper/client/DefaultSpeculativeRequestExecutionPolicy$1;
      11: getfield      #4                  // Field org/apache/bookkeeper/client/DefaultSpeculativeRequestExecutionPolicy$1.this$0:Lorg/apache/bookkeeper/client/DefaultSpeculativeRequestExecutionPolicy;
      14: aload_0
      15: getfield      #1                  // Field this$1:Lorg/apache/bookkeeper/client/DefaultSpeculativeRequestExecutionPolicy$1;
      18: getfield      #5                  // Field org/apache/bookkeeper/client/DefaultSpeculativeRequestExecutionPolicy$1.val$scheduler:Ljava/util/concurrent/ScheduledExecutorService;
      21: aload_0
      22: getfield      #1                  // Field this$1:Lorg/apache/bookkeeper/client/DefaultSpeculativeRequestExecutionPolicy$1;
      25: getfield      #6                  // Field org/apache/bookkeeper/client/DefaultSpeculativeRequestExecutionPolicy$1.val$requestExecutor:Lorg/apache/bookkeeper/client/SpeculativeRequestExecutor;
      28: aload_0
      29: getfield      #1                  // Field this$1:Lorg/apache/bookkeeper/client/DefaultSpeculativeRequestExecutionPolicy$1;
      32: getfield      #4                  // Field org/apache/bookkeeper/client/DefaultSpeculativeRequestExecutionPolicy$1.this$0:Lorg/apache/bookkeeper/client/DefaultSpeculativeRequestExecutionPolicy;
      35: getfield      #7                  // Field org/apache/bookkeeper/client/DefaultSpeculativeRequestExecutionPolicy.maxSpeculativeRequestTimeout:I
      38: aload_0
      39: getfield      #1                  // Field this$1:Lorg/apache/bookkeeper/client/DefaultSpeculativeRequestExecutionPolicy$1;
      42: getfield      #8                  // Field org/apache/bookkeeper/client/DefaultSpeculativeRequestExecutionPolicy$1.val$speculativeRequestTimeout:I
      45: i2f
      46: aload_0
      47: getfield      #1                  // Field this$1:Lorg/apache/bookkeeper/client/DefaultSpeculativeRequestExecutionPolicy$1;
      50: getfield      #4                  // Field org/apache/bookkeeper/client/DefaultSpeculativeRequestExecutionPolicy$1.this$0:Lorg/apache/bookkeeper/client/DefaultSpeculativeRequestExecutionPolicy;
      53: getfield      #9                  // Field org/apache/bookkeeper/client/DefaultSpeculativeRequestExecutionPolicy.backoffMultiplier:F
      56: fmul
      57: invokestatic  #10                 // Method java/lang/Math.round:(F)I
      60: invokestatic  #11                 // Method java/lang/Math.min:(II)I
      63: invokestatic  #12                 // Method org/apache/bookkeeper/client/DefaultSpeculativeRequestExecutionPolicy.access$000:(Lorg/apache/bookkeeper/client/DefaultSpeculativeRequestExecutionPolicy;Ljava/util/concurrent/ScheduledExecutorService;Lorg/apache/bookkeeper/client/SpeculativeRequestExecutor;I)Ljava/util/concurrent/ScheduledFuture;
      66: pop
      67: goto          108
      70: invokestatic  #13                 // Method org/apache/bookkeeper/client/DefaultSpeculativeRequestExecutionPolicy.access$100:()Lorg/slf4j/Logger;
      73: invokeinterface #14,  1           // InterfaceMethod org/slf4j/Logger.isTraceEnabled:()Z
      78: ifeq          108
      81: invokestatic  #13                 // Method org/apache/bookkeeper/client/DefaultSpeculativeRequestExecutionPolicy.access$100:()Lorg/slf4j/Logger;
      84: ldc           #15                 // String Stopped issuing speculative requests for {}, speculativeReadTimeout = {}
      86: aload_0
      87: getfield      #1                  // Field this$1:Lorg/apache/bookkeeper/client/DefaultSpeculativeRequestExecutionPolicy$1;
      90: getfield      #6                  // Field org/apache/bookkeeper/client/DefaultSpeculativeRequestExecutionPolicy$1.val$requestExecutor:Lorg/apache/bookkeeper/client/SpeculativeRequestExecutor;
      93: aload_0
      94: getfield      #1                  // Field this$1:Lorg/apache/bookkeeper/client/DefaultSpeculativeRequestExecutionPolicy$1;
      97: getfield      #8                  // Field org/apache/bookkeeper/client/DefaultSpeculativeRequestExecutionPolicy$1.val$speculativeRequestTimeout:I
     100: invokestatic  #16                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     103: invokeinterface #17,  4           // InterfaceMethod org/slf4j/Logger.trace:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
     108: return

  public void onFailure(java.lang.Throwable);
    Code:
       0: invokestatic  #13                 // Method org/apache/bookkeeper/client/DefaultSpeculativeRequestExecutionPolicy.access$100:()Lorg/slf4j/Logger;
       3: ldc           #18                 // String Failed to issue speculative request for {}, speculativeReadTimeout = {} :
       5: iconst_3
       6: anewarray     #19                 // class java/lang/Object
       9: dup
      10: iconst_0
      11: aload_0
      12: getfield      #1                  // Field this$1:Lorg/apache/bookkeeper/client/DefaultSpeculativeRequestExecutionPolicy$1;
      15: getfield      #6                  // Field org/apache/bookkeeper/client/DefaultSpeculativeRequestExecutionPolicy$1.val$requestExecutor:Lorg/apache/bookkeeper/client/SpeculativeRequestExecutor;
      18: aastore
      19: dup
      20: iconst_1
      21: aload_0
      22: getfield      #1                  // Field this$1:Lorg/apache/bookkeeper/client/DefaultSpeculativeRequestExecutionPolicy$1;
      25: getfield      #8                  // Field org/apache/bookkeeper/client/DefaultSpeculativeRequestExecutionPolicy$1.val$speculativeRequestTimeout:I
      28: invokestatic  #16                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      31: aastore
      32: dup
      33: iconst_2
      34: aload_1
      35: aastore
      36: invokeinterface #20,  3           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;[Ljava/lang/Object;)V
      41: return

  public void onSuccess(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #21                 // class java/lang/Boolean
       5: invokevirtual #22                 // Method onSuccess:(Ljava/lang/Boolean;)V
       8: return
}
