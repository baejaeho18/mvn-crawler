Compiled from "ConcurrentOpenHashMap.java"
final class org.apache.bookkeeper.util.collections.ConcurrentOpenHashMap$Section<K, V> extends java.util.concurrent.locks.StampedLock {
  private volatile java.lang.Object[] table;

  private volatile int capacity;

  private volatile int size;

  private int usedBuckets;

  private int resizeThreshold;

  org.apache.bookkeeper.util.collections.ConcurrentOpenHashMap$Section(int);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method java/util/concurrent/locks/StampedLock."<init>":()V
       4: aload_0
       5: iload_1
       6: invokestatic  #6                  // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashMap.access$300:(I)I
       9: putfield      #3                  // Field capacity:I
      12: aload_0
      13: iconst_2
      14: aload_0
      15: getfield      #3                  // Field capacity:I
      18: imul
      19: anewarray     #7                  // class java/lang/Object
      22: putfield      #8                  // Field table:[Ljava/lang/Object;
      25: aload_0
      26: iconst_0
      27: putfield      #4                  // Field size:I
      30: aload_0
      31: iconst_0
      32: putfield      #9                  // Field usedBuckets:I
      35: aload_0
      36: aload_0
      37: getfield      #3                  // Field capacity:I
      40: i2f
      41: ldc           #10                 // float 0.66f
      43: fmul
      44: f2i
      45: putfield      #11                 // Field resizeThreshold:I
      48: return

  V get(K, int);
    Code:
       0: aload_0
       1: invokevirtual #12                 // Method tryOptimisticRead:()J
       4: lstore_3
       5: iconst_0
       6: istore        5
       8: iload_2
       9: i2l
      10: aload_0
      11: getfield      #3                  // Field capacity:I
      14: invokestatic  #13                 // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashMap.signSafeMod:(JI)I
      17: istore        6
      19: aload_0
      20: getfield      #8                  // Field table:[Ljava/lang/Object;
      23: iload         6
      25: aaload
      26: astore        7
      28: aload_0
      29: getfield      #8                  // Field table:[Ljava/lang/Object;
      32: iload         6
      34: iconst_1
      35: iadd
      36: aaload
      37: astore        8
      39: iload         5
      41: ifne          102
      44: aload_0
      45: lload_3
      46: invokevirtual #14                 // Method validate:(J)Z
      49: ifeq          102
      52: aload_1
      53: aload         7
      55: invokevirtual #15                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      58: ifeq          78
      61: aload         8
      63: astore        9
      65: iload         5
      67: ifeq          75
      70: aload_0
      71: lload_3
      72: invokevirtual #16                 // Method unlockRead:(J)V
      75: aload         9
      77: areturn
      78: aload         7
      80: invokestatic  #17                 // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashMap.access$400:()Ljava/lang/Object;
      83: if_acmpne     196
      86: aconst_null
      87: astore        9
      89: iload         5
      91: ifeq          99
      94: aload_0
      95: lload_3
      96: invokevirtual #16                 // Method unlockRead:(J)V
      99: aload         9
     101: areturn
     102: iload         5
     104: ifne          146
     107: aload_0
     108: invokevirtual #18                 // Method readLock:()J
     111: lstore_3
     112: iconst_1
     113: istore        5
     115: iload_2
     116: i2l
     117: aload_0
     118: getfield      #3                  // Field capacity:I
     121: invokestatic  #13                 // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashMap.signSafeMod:(JI)I
     124: istore        6
     126: aload_0
     127: getfield      #8                  // Field table:[Ljava/lang/Object;
     130: iload         6
     132: aaload
     133: astore        7
     135: aload_0
     136: getfield      #8                  // Field table:[Ljava/lang/Object;
     139: iload         6
     141: iconst_1
     142: iadd
     143: aaload
     144: astore        8
     146: aload_1
     147: aload         7
     149: invokevirtual #15                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
     152: ifeq          172
     155: aload         8
     157: astore        9
     159: iload         5
     161: ifeq          169
     164: aload_0
     165: lload_3
     166: invokevirtual #16                 // Method unlockRead:(J)V
     169: aload         9
     171: areturn
     172: aload         7
     174: invokestatic  #17                 // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashMap.access$400:()Ljava/lang/Object;
     177: if_acmpne     196
     180: aconst_null
     181: astore        9
     183: iload         5
     185: ifeq          193
     188: aload_0
     189: lload_3
     190: invokevirtual #16                 // Method unlockRead:(J)V
     193: aload         9
     195: areturn
     196: iload         6
     198: iconst_2
     199: iadd
     200: aload_0
     201: getfield      #8                  // Field table:[Ljava/lang/Object;
     204: arraylength
     205: iconst_1
     206: isub
     207: iand
     208: istore        6
     210: goto          19
     213: astore        10
     215: iload         5
     217: ifeq          225
     220: aload_0
     221: lload_3
     222: invokevirtual #16                 // Method unlockRead:(J)V
     225: aload         10
     227: athrow
    Exception table:
       from    to  target type
          19    65   213   any
          78    89   213   any
         102   159   213   any
         172   183   213   any
         196   215   213   any

  V put(K, V, int, boolean, java.util.function.Function<K, V>);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method writeLock:()J
       4: lstore        6
       6: iload_3
       7: i2l
       8: aload_0
       9: getfield      #3                  // Field capacity:I
      12: invokestatic  #13                 // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashMap.signSafeMod:(JI)I
      15: istore        8
      17: iconst_m1
      18: istore        9
      20: aload_0
      21: getfield      #8                  // Field table:[Ljava/lang/Object;
      24: iload         8
      26: aaload
      27: astore        10
      29: aload_0
      30: getfield      #8                  // Field table:[Ljava/lang/Object;
      33: iload         8
      35: iconst_1
      36: iadd
      37: aaload
      38: astore        11
      40: aload_1
      41: aload         10
      43: invokevirtual #15                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      46: ifeq          166
      49: iload         4
      51: ifne          115
      54: aload_0
      55: getfield      #8                  // Field table:[Ljava/lang/Object;
      58: iload         8
      60: iconst_1
      61: iadd
      62: aload_2
      63: aastore
      64: aload         11
      66: astore        12
      68: aload_0
      69: getfield      #9                  // Field usedBuckets:I
      72: aload_0
      73: getfield      #11                 // Field resizeThreshold:I
      76: if_icmple     106
      79: aload_0
      80: invokespecial #20                 // Method rehash:()V
      83: aload_0
      84: lload         6
      86: invokevirtual #21                 // Method unlockWrite:(J)V
      89: goto          103
      92: astore        13
      94: aload_0
      95: lload         6
      97: invokevirtual #21                 // Method unlockWrite:(J)V
     100: aload         13
     102: athrow
     103: goto          112
     106: aload_0
     107: lload         6
     109: invokevirtual #21                 // Method unlockWrite:(J)V
     112: aload         12
     114: areturn
     115: aload         11
     117: astore        12
     119: aload_0
     120: getfield      #9                  // Field usedBuckets:I
     123: aload_0
     124: getfield      #11                 // Field resizeThreshold:I
     127: if_icmple     157
     130: aload_0
     131: invokespecial #20                 // Method rehash:()V
     134: aload_0
     135: lload         6
     137: invokevirtual #21                 // Method unlockWrite:(J)V
     140: goto          154
     143: astore        14
     145: aload_0
     146: lload         6
     148: invokevirtual #21                 // Method unlockWrite:(J)V
     151: aload         14
     153: athrow
     154: goto          163
     157: aload_0
     158: lload         6
     160: invokevirtual #21                 // Method unlockWrite:(J)V
     163: aload         12
     165: areturn
     166: aload         10
     168: invokestatic  #17                 // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashMap.access$400:()Ljava/lang/Object;
     171: if_acmpne     297
     174: iload         9
     176: iconst_m1
     177: if_icmpeq     187
     180: iload         9
     182: istore        8
     184: goto          197
     187: aload_0
     188: dup
     189: getfield      #9                  // Field usedBuckets:I
     192: iconst_1
     193: iadd
     194: putfield      #9                  // Field usedBuckets:I
     197: aload_2
     198: ifnonnull     210
     201: aload         5
     203: aload_1
     204: invokeinterface #22,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
     209: astore_2
     210: aload_0
     211: getfield      #8                  // Field table:[Ljava/lang/Object;
     214: iload         8
     216: aload_1
     217: aastore
     218: aload_0
     219: getfield      #8                  // Field table:[Ljava/lang/Object;
     222: iload         8
     224: iconst_1
     225: iadd
     226: aload_2
     227: aastore
     228: aload_0
     229: dup
     230: getfield      #4                  // Field size:I
     233: iconst_1
     234: iadd
     235: putfield      #4                  // Field size:I
     238: aload         5
     240: ifnull        247
     243: aload_2
     244: goto          248
     247: aconst_null
     248: astore        12
     250: aload_0
     251: getfield      #9                  // Field usedBuckets:I
     254: aload_0
     255: getfield      #11                 // Field resizeThreshold:I
     258: if_icmple     288
     261: aload_0
     262: invokespecial #20                 // Method rehash:()V
     265: aload_0
     266: lload         6
     268: invokevirtual #21                 // Method unlockWrite:(J)V
     271: goto          285
     274: astore        15
     276: aload_0
     277: lload         6
     279: invokevirtual #21                 // Method unlockWrite:(J)V
     282: aload         15
     284: athrow
     285: goto          294
     288: aload_0
     289: lload         6
     291: invokevirtual #21                 // Method unlockWrite:(J)V
     294: aload         12
     296: areturn
     297: aload         10
     299: invokestatic  #23                 // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashMap.access$500:()Ljava/lang/Object;
     302: if_acmpne     315
     305: iload         9
     307: iconst_m1
     308: if_icmpne     315
     311: iload         8
     313: istore        9
     315: iload         8
     317: iconst_2
     318: iadd
     319: aload_0
     320: getfield      #8                  // Field table:[Ljava/lang/Object;
     323: arraylength
     324: iconst_1
     325: isub
     326: iand
     327: istore        8
     329: goto          20
     332: astore        16
     334: aload_0
     335: getfield      #9                  // Field usedBuckets:I
     338: aload_0
     339: getfield      #11                 // Field resizeThreshold:I
     342: if_icmple     372
     345: aload_0
     346: invokespecial #20                 // Method rehash:()V
     349: aload_0
     350: lload         6
     352: invokevirtual #21                 // Method unlockWrite:(J)V
     355: goto          369
     358: astore        17
     360: aload_0
     361: lload         6
     363: invokevirtual #21                 // Method unlockWrite:(J)V
     366: aload         17
     368: athrow
     369: goto          378
     372: aload_0
     373: lload         6
     375: invokevirtual #21                 // Method unlockWrite:(J)V
     378: aload         16
     380: athrow
    Exception table:
       from    to  target type
          79    83    92   any
          92    94    92   any
         130   134   143   any
         143   145   143   any
         261   265   274   any
         274   276   274   any
          20    68   332   any
         115   119   332   any
         166   250   332   any
         345   349   358   any
         358   360   358   any
         297   334   332   any

  private V remove(K, java.lang.Object, int);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method writeLock:()J
       4: lstore        4
       6: iload_3
       7: i2l
       8: aload_0
       9: getfield      #3                  // Field capacity:I
      12: invokestatic  #13                 // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashMap.signSafeMod:(JI)I
      15: istore        6
      17: aload_0
      18: getfield      #8                  // Field table:[Ljava/lang/Object;
      21: iload         6
      23: aaload
      24: astore        7
      26: aload_0
      27: getfield      #8                  // Field table:[Ljava/lang/Object;
      30: iload         6
      32: iconst_1
      33: iadd
      34: aaload
      35: astore        8
      37: aload_1
      38: aload         7
      40: invokevirtual #15                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      43: ifeq          100
      46: aload_2
      47: ifnull        59
      50: aload_2
      51: aload         8
      53: invokevirtual #15                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      56: ifeq          88
      59: aload_0
      60: dup
      61: getfield      #4                  // Field size:I
      64: iconst_1
      65: isub
      66: putfield      #4                  // Field size:I
      69: aload_0
      70: iload         6
      72: invokespecial #24                 // Method cleanBucket:(I)V
      75: aload         8
      77: astore        9
      79: aload_0
      80: lload         4
      82: invokevirtual #21                 // Method unlockWrite:(J)V
      85: aload         9
      87: areturn
      88: aconst_null
      89: astore        9
      91: aload_0
      92: lload         4
      94: invokevirtual #21                 // Method unlockWrite:(J)V
      97: aload         9
      99: areturn
     100: aload         7
     102: invokestatic  #17                 // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashMap.access$400:()Ljava/lang/Object;
     105: if_acmpne     120
     108: aconst_null
     109: astore        9
     111: aload_0
     112: lload         4
     114: invokevirtual #21                 // Method unlockWrite:(J)V
     117: aload         9
     119: areturn
     120: iload         6
     122: iconst_2
     123: iadd
     124: aload_0
     125: getfield      #8                  // Field table:[Ljava/lang/Object;
     128: arraylength
     129: iconst_1
     130: isub
     131: iand
     132: istore        6
     134: goto          17
     137: astore        10
     139: aload_0
     140: lload         4
     142: invokevirtual #21                 // Method unlockWrite:(J)V
     145: aload         10
     147: athrow
    Exception table:
       from    to  target type
          17    79   137   any
          88    91   137   any
         100   111   137   any
         120   139   137   any

  void clear();
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method writeLock:()J
       4: lstore_1
       5: aload_0
       6: getfield      #8                  // Field table:[Ljava/lang/Object;
       9: invokestatic  #17                 // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashMap.access$400:()Ljava/lang/Object;
      12: invokestatic  #25                 // Method java/util/Arrays.fill:([Ljava/lang/Object;Ljava/lang/Object;)V
      15: aload_0
      16: iconst_0
      17: putfield      #4                  // Field size:I
      20: aload_0
      21: iconst_0
      22: putfield      #9                  // Field usedBuckets:I
      25: aload_0
      26: lload_1
      27: invokevirtual #21                 // Method unlockWrite:(J)V
      30: goto          41
      33: astore_3
      34: aload_0
      35: lload_1
      36: invokevirtual #21                 // Method unlockWrite:(J)V
      39: aload_3
      40: athrow
      41: return
    Exception table:
       from    to  target type
           5    25    33   any

  public void forEach(java.util.function.BiConsumer<? super K, ? super V>);
    Code:
       0: aload_0
       1: invokevirtual #12                 // Method tryOptimisticRead:()J
       4: lstore_2
       5: aload_0
       6: getfield      #8                  // Field table:[Ljava/lang/Object;
       9: astore        4
      11: iconst_0
      12: istore        5
      14: aload_0
      15: lload_2
      16: invokevirtual #14                 // Method validate:(J)Z
      19: ifne          36
      22: aload_0
      23: invokevirtual #18                 // Method readLock:()J
      26: lstore_2
      27: iconst_1
      28: istore        5
      30: aload_0
      31: getfield      #8                  // Field table:[Ljava/lang/Object;
      34: astore        4
      36: iconst_0
      37: istore        6
      39: iload         6
      41: aload         4
      43: arraylength
      44: if_icmpge     132
      47: aload         4
      49: iload         6
      51: aaload
      52: astore        7
      54: aload         4
      56: iload         6
      58: iconst_1
      59: iadd
      60: aaload
      61: astore        8
      63: iload         5
      65: ifne          100
      68: aload_0
      69: lload_2
      70: invokevirtual #14                 // Method validate:(J)Z
      73: ifne          100
      76: aload_0
      77: invokevirtual #18                 // Method readLock:()J
      80: lstore_2
      81: iconst_1
      82: istore        5
      84: aload         4
      86: iload         6
      88: aaload
      89: astore        7
      91: aload         4
      93: iload         6
      95: iconst_1
      96: iadd
      97: aaload
      98: astore        8
     100: aload         7
     102: invokestatic  #23                 // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashMap.access$500:()Ljava/lang/Object;
     105: if_acmpeq     126
     108: aload         7
     110: invokestatic  #17                 // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashMap.access$400:()Ljava/lang/Object;
     113: if_acmpeq     126
     116: aload_1
     117: aload         7
     119: aload         8
     121: invokeinterface #26,  3           // InterfaceMethod java/util/function/BiConsumer.accept:(Ljava/lang/Object;Ljava/lang/Object;)V
     126: iinc          6, 2
     129: goto          39
     132: iload         5
     134: ifeq          160
     137: aload_0
     138: lload_2
     139: invokevirtual #16                 // Method unlockRead:(J)V
     142: goto          160
     145: astore        9
     147: iload         5
     149: ifeq          157
     152: aload_0
     153: lload_2
     154: invokevirtual #16                 // Method unlockRead:(J)V
     157: aload         9
     159: athrow
     160: return
    Exception table:
       from    to  target type
          14   132   145   any
         145   147   145   any

  int removeIf(java.util.function.BiPredicate<K, V>);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method writeLock:()J
       4: lstore_2
       5: iconst_0
       6: istore        4
       8: iconst_0
       9: istore        5
      11: iload         5
      13: aload_0
      14: getfield      #8                  // Field table:[Ljava/lang/Object;
      17: arraylength
      18: if_icmpge     95
      21: aload_0
      22: getfield      #8                  // Field table:[Ljava/lang/Object;
      25: iload         5
      27: aaload
      28: astore        6
      30: aload_0
      31: getfield      #8                  // Field table:[Ljava/lang/Object;
      34: iload         5
      36: iconst_1
      37: iadd
      38: aaload
      39: astore        7
      41: aload         6
      43: invokestatic  #23                 // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashMap.access$500:()Ljava/lang/Object;
      46: if_acmpeq     89
      49: aload         6
      51: invokestatic  #17                 // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashMap.access$400:()Ljava/lang/Object;
      54: if_acmpeq     89
      57: aload_1
      58: aload         6
      60: aload         7
      62: invokeinterface #27,  3           // InterfaceMethod java/util/function/BiPredicate.test:(Ljava/lang/Object;Ljava/lang/Object;)Z
      67: ifeq          89
      70: aload_0
      71: dup
      72: getfield      #4                  // Field size:I
      75: iconst_1
      76: isub
      77: putfield      #4                  // Field size:I
      80: iinc          4, 1
      83: aload_0
      84: iload         5
      86: invokespecial #24                 // Method cleanBucket:(I)V
      89: iinc          5, 2
      92: goto          11
      95: iload         4
      97: istore        5
      99: aload_0
     100: lload_2
     101: invokevirtual #21                 // Method unlockWrite:(J)V
     104: iload         5
     106: ireturn
     107: astore        8
     109: aload_0
     110: lload_2
     111: invokevirtual #21                 // Method unlockWrite:(J)V
     114: aload         8
     116: athrow
    Exception table:
       from    to  target type
           8    99   107   any
         107   109   107   any

  private void cleanBucket(int);
    Code:
       0: iload_1
       1: iconst_2
       2: iadd
       3: aload_0
       4: getfield      #8                  // Field table:[Ljava/lang/Object;
       7: arraylength
       8: iconst_1
       9: isub
      10: iand
      11: istore_2
      12: aload_0
      13: getfield      #8                  // Field table:[Ljava/lang/Object;
      16: iload_2
      17: aaload
      18: invokestatic  #17                 // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashMap.access$400:()Ljava/lang/Object;
      21: if_acmpne     55
      24: aload_0
      25: getfield      #8                  // Field table:[Ljava/lang/Object;
      28: iload_1
      29: invokestatic  #17                 // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashMap.access$400:()Ljava/lang/Object;
      32: aastore
      33: aload_0
      34: getfield      #8                  // Field table:[Ljava/lang/Object;
      37: iload_1
      38: iconst_1
      39: iadd
      40: aconst_null
      41: aastore
      42: aload_0
      43: dup
      44: getfield      #9                  // Field usedBuckets:I
      47: iconst_1
      48: isub
      49: putfield      #9                  // Field usedBuckets:I
      52: goto          73
      55: aload_0
      56: getfield      #8                  // Field table:[Ljava/lang/Object;
      59: iload_1
      60: invokestatic  #23                 // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashMap.access$500:()Ljava/lang/Object;
      63: aastore
      64: aload_0
      65: getfield      #8                  // Field table:[Ljava/lang/Object;
      68: iload_1
      69: iconst_1
      70: iadd
      71: aconst_null
      72: aastore
      73: return

  private void rehash();
    Code:
       0: aload_0
       1: getfield      #3                  // Field capacity:I
       4: iconst_2
       5: imul
       6: istore_1
       7: iconst_2
       8: iload_1
       9: imul
      10: anewarray     #7                  // class java/lang/Object
      13: astore_2
      14: iconst_0
      15: istore_3
      16: iload_3
      17: aload_0
      18: getfield      #8                  // Field table:[Ljava/lang/Object;
      21: arraylength
      22: if_icmpge     74
      25: aload_0
      26: getfield      #8                  // Field table:[Ljava/lang/Object;
      29: iload_3
      30: aaload
      31: astore        4
      33: aload_0
      34: getfield      #8                  // Field table:[Ljava/lang/Object;
      37: iload_3
      38: iconst_1
      39: iadd
      40: aaload
      41: astore        5
      43: aload         4
      45: invokestatic  #17                 // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashMap.access$400:()Ljava/lang/Object;
      48: if_acmpeq     68
      51: aload         4
      53: invokestatic  #23                 // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashMap.access$500:()Ljava/lang/Object;
      56: if_acmpeq     68
      59: aload_2
      60: iload_1
      61: aload         4
      63: aload         5
      65: invokestatic  #28                 // Method insertKeyValueNoLock:([Ljava/lang/Object;ILjava/lang/Object;Ljava/lang/Object;)V
      68: iinc          3, 2
      71: goto          16
      74: aload_0
      75: aload_2
      76: putfield      #8                  // Field table:[Ljava/lang/Object;
      79: aload_0
      80: aload_0
      81: getfield      #4                  // Field size:I
      84: putfield      #9                  // Field usedBuckets:I
      87: aload_0
      88: iload_1
      89: putfield      #3                  // Field capacity:I
      92: aload_0
      93: aload_0
      94: getfield      #3                  // Field capacity:I
      97: i2f
      98: ldc           #10                 // float 0.66f
     100: fmul
     101: f2i
     102: putfield      #11                 // Field resizeThreshold:I
     105: return

  private static <K, V> void insertKeyValueNoLock(java.lang.Object[], int, K, V);
    Code:
       0: aload_2
       1: invokestatic  #29                 // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashMap.hash:(Ljava/lang/Object;)J
       4: iload_1
       5: invokestatic  #13                 // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashMap.signSafeMod:(JI)I
       8: istore        4
      10: aload_0
      11: iload         4
      13: aaload
      14: astore        5
      16: aload         5
      18: invokestatic  #17                 // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashMap.access$400:()Ljava/lang/Object;
      21: if_acmpne     37
      24: aload_0
      25: iload         4
      27: aload_2
      28: aastore
      29: aload_0
      30: iload         4
      32: iconst_1
      33: iadd
      34: aload_3
      35: aastore
      36: return
      37: iload         4
      39: iconst_2
      40: iadd
      41: aload_0
      42: arraylength
      43: iconst_1
      44: isub
      45: iand
      46: istore        4
      48: goto          10

  static int access$000(org.apache.bookkeeper.util.collections.ConcurrentOpenHashMap$Section);
    Code:
       0: aload_0
       1: getfield      #4                  // Field size:I
       4: ireturn

  static int access$100(org.apache.bookkeeper.util.collections.ConcurrentOpenHashMap$Section);
    Code:
       0: aload_0
       1: getfield      #3                  // Field capacity:I
       4: ireturn

  static java.lang.Object access$200(org.apache.bookkeeper.util.collections.ConcurrentOpenHashMap$Section, java.lang.Object, java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iload_3
       4: invokespecial #2                  // Method remove:(Ljava/lang/Object;Ljava/lang/Object;I)Ljava/lang/Object;
       7: areturn
}
