Compiled from "ExponentialBackoffRetryPolicy.java"
public class org.apache.bookkeeper.zookeeper.ExponentialBackoffRetryPolicy implements org.apache.bookkeeper.zookeeper.RetryPolicy {
  private final java.util.Random random;

  private final int maxRetries;

  private final long baseBackoffTime;

  public org.apache.bookkeeper.zookeeper.ExponentialBackoffRetryPolicy(long, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iload_3
       6: putfield      #2                  // Field maxRetries:I
       9: aload_0
      10: lload_1
      11: putfield      #3                  // Field baseBackoffTime:J
      14: aload_0
      15: new           #4                  // class java/util/Random
      18: dup
      19: invokestatic  #5                  // Method java/lang/System.currentTimeMillis:()J
      22: invokespecial #6                  // Method java/util/Random."<init>":(J)V
      25: putfield      #7                  // Field random:Ljava/util/Random;
      28: return

  public boolean allowRetry(int, long);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #2                  // Field maxRetries:I
       5: if_icmpgt     12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  public long nextRetryWaitTime(int, long);
    Code:
       0: aload_0
       1: getfield      #3                  // Field baseBackoffTime:J
       4: iconst_1
       5: aload_0
       6: getfield      #7                  // Field random:Ljava/util/Random;
       9: iconst_1
      10: iconst_1
      11: iload_1
      12: iconst_1
      13: iadd
      14: ishl
      15: invokestatic  #8                  // Method java/lang/Math.max:(II)I
      18: invokevirtual #9                  // Method java/util/Random.nextInt:(I)I
      21: invokestatic  #8                  // Method java/lang/Math.max:(II)I
      24: i2l
      25: lmul
      26: lreturn
}
