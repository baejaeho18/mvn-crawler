Compiled from "EntryMemTableWithParallelFlusher.java"
class org.apache.bookkeeper.bookie.EntryMemTableWithParallelFlusher$1 extends org.apache.bookkeeper.util.SafeRunnable {
  final java.util.concurrent.ConcurrentNavigableMap val$thisLedgerEntries;

  final java.util.concurrent.atomic.AtomicLong val$flushedSize;

  final org.apache.bookkeeper.bookie.SkipListFlusher val$flusher;

  final java.util.concurrent.Phaser val$pendingNumOfLedgerFlushes;

  final java.util.concurrent.atomic.AtomicReference val$exceptionWhileFlushingParallelly;

  final org.apache.bookkeeper.bookie.EntryMemTableWithParallelFlusher this$0;

  org.apache.bookkeeper.bookie.EntryMemTableWithParallelFlusher$1(org.apache.bookkeeper.bookie.EntryMemTableWithParallelFlusher, java.util.concurrent.ConcurrentNavigableMap, java.util.concurrent.atomic.AtomicLong, org.apache.bookkeeper.bookie.SkipListFlusher, java.util.concurrent.Phaser, java.util.concurrent.atomic.AtomicReference);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lorg/apache/bookkeeper/bookie/EntryMemTableWithParallelFlusher;
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field val$thisLedgerEntries:Ljava/util/concurrent/ConcurrentNavigableMap;
      10: aload_0
      11: aload_3
      12: putfield      #3                  // Field val$flushedSize:Ljava/util/concurrent/atomic/AtomicLong;
      15: aload_0
      16: aload         4
      18: putfield      #4                  // Field val$flusher:Lorg/apache/bookkeeper/bookie/SkipListFlusher;
      21: aload_0
      22: aload         5
      24: putfield      #5                  // Field val$pendingNumOfLedgerFlushes:Ljava/util/concurrent/Phaser;
      27: aload_0
      28: aload         6
      30: putfield      #6                  // Field val$exceptionWhileFlushingParallelly:Ljava/util/concurrent/atomic/AtomicReference;
      33: aload_0
      34: invokespecial #7                  // Method org/apache/bookkeeper/util/SafeRunnable."<init>":()V
      37: return

  public void safeRun();
    Code:
       0: iconst_0
       1: istore_3
       2: aload_0
       3: getfield      #2                  // Field val$thisLedgerEntries:Ljava/util/concurrent/ConcurrentNavigableMap;
       6: invokeinterface #8,  1            // InterfaceMethod java/util/concurrent/ConcurrentNavigableMap.keySet:()Ljava/util/NavigableSet;
      11: invokeinterface #9,  1            // InterfaceMethod java/util/NavigableSet.iterator:()Ljava/util/Iterator;
      16: astore        4
      18: aload         4
      20: invokeinterface #10,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      25: ifeq          101
      28: aload         4
      30: invokeinterface #11,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      35: checkcast     #12                 // class org/apache/bookkeeper/bookie/EntryKey
      38: astore        5
      40: aload         5
      42: checkcast     #13                 // class org/apache/bookkeeper/bookie/EntryKeyValue
      45: astore        6
      47: aload_0
      48: getfield      #3                  // Field val$flushedSize:Ljava/util/concurrent/atomic/AtomicLong;
      51: aload         6
      53: invokevirtual #14                 // Method org/apache/bookkeeper/bookie/EntryKeyValue.getLength:()I
      56: i2l
      57: invokevirtual #15                 // Method java/util/concurrent/atomic/AtomicLong.addAndGet:(J)J
      60: pop2
      61: aload         6
      63: invokevirtual #16                 // Method org/apache/bookkeeper/bookie/EntryKeyValue.getLedgerId:()J
      66: lstore_1
      67: iload_3
      68: ifne          98
      71: aload_0
      72: getfield      #4                  // Field val$flusher:Lorg/apache/bookkeeper/bookie/SkipListFlusher;
      75: lload_1
      76: aload         6
      78: invokevirtual #17                 // Method org/apache/bookkeeper/bookie/EntryKeyValue.getEntryId:()J
      81: aload         6
      83: invokevirtual #18                 // Method org/apache/bookkeeper/bookie/EntryKeyValue.getValueAsByteBuffer:()Lio/netty/buffer/ByteBuf;
      86: invokeinterface #19,  6           // InterfaceMethod org/apache/bookkeeper/bookie/SkipListFlusher.process:(JJLio/netty/buffer/ByteBuf;)V
      91: goto          98
      94: astore        7
      96: iconst_1
      97: istore_3
      98: goto          18
     101: aload_0
     102: getfield      #5                  // Field val$pendingNumOfLedgerFlushes:Ljava/util/concurrent/Phaser;
     105: invokevirtual #21                 // Method java/util/concurrent/Phaser.arriveAndDeregister:()I
     108: pop
     109: goto          139
     112: astore_1
     113: invokestatic  #23                 // Method org/apache/bookkeeper/bookie/EntryMemTableWithParallelFlusher.access$000:()Lorg/slf4j/Logger;
     116: ldc           #24                 // String Got Exception while trying to flush process entryies:
     118: aload_1
     119: invokeinterface #25,  3           // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Throwable;)V
     124: aload_0
     125: getfield      #6                  // Field val$exceptionWhileFlushingParallelly:Ljava/util/concurrent/atomic/AtomicReference;
     128: aload_1
     129: invokevirtual #26                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
     132: aload_0
     133: getfield      #5                  // Field val$pendingNumOfLedgerFlushes:Ljava/util/concurrent/Phaser;
     136: invokevirtual #27                 // Method java/util/concurrent/Phaser.forceTermination:()V
     139: return
    Exception table:
       from    to  target type
          71    91    94   Class org/apache/bookkeeper/bookie/Bookie$NoLedgerException
           0   109   112   Class java/lang/Exception
}
