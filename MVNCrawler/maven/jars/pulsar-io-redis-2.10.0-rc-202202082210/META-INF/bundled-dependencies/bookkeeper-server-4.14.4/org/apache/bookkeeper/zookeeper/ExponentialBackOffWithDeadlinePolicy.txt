Compiled from "ExponentialBackOffWithDeadlinePolicy.java"
public class org.apache.bookkeeper.zookeeper.ExponentialBackOffWithDeadlinePolicy implements org.apache.bookkeeper.zookeeper.RetryPolicy {
  private static final org.slf4j.Logger log;

  static final int[] RETRY_BACKOFF;

  public static final int JITTER_PERCENT;

  private final java.util.Random random;

  private final long baseBackoffTime;

  private final long deadline;

  private final int maxRetries;

  public org.apache.bookkeeper.zookeeper.ExponentialBackOffWithDeadlinePolicy(long, long, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: lload_1
       6: putfield      #2                  // Field baseBackoffTime:J
       9: aload_0
      10: lload_3
      11: putfield      #3                  // Field deadline:J
      14: aload_0
      15: iload         5
      17: putfield      #4                  // Field maxRetries:I
      20: aload_0
      21: new           #5                  // class java/util/Random
      24: dup
      25: invokestatic  #6                  // Method java/lang/System.currentTimeMillis:()J
      28: invokespecial #7                  // Method java/util/Random."<init>":(J)V
      31: putfield      #8                  // Field random:Ljava/util/Random;
      34: return

  public boolean allowRetry(int, long);
    Code:
       0: iload_1
       1: aload_0
       2: getfield      #4                  // Field maxRetries:I
       5: if_icmpgt     21
       8: lload_2
       9: aload_0
      10: getfield      #3                  // Field deadline:J
      13: lcmp
      14: ifge          21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: ireturn

  public long nextRetryWaitTime(int, long);
    Code:
       0: iload_1
       1: istore        4
       3: iload         4
       5: getstatic     #9                  // Field RETRY_BACKOFF:[I
       8: arraylength
       9: if_icmplt     20
      12: getstatic     #9                  // Field RETRY_BACKOFF:[I
      15: arraylength
      16: iconst_1
      17: isub
      18: istore        4
      20: aload_0
      21: getfield      #2                  // Field baseBackoffTime:J
      24: getstatic     #9                  // Field RETRY_BACKOFF:[I
      27: iload         4
      29: iaload
      30: i2l
      31: lmul
      32: lstore        5
      34: aload_0
      35: getfield      #8                  // Field random:Ljava/util/Random;
      38: bipush        10
      40: invokevirtual #11                 // Method java/util/Random.nextInt:(I)I
      43: i2l
      44: lload         5
      46: lmul
      47: ldc2_w        #12                 // long 100l
      50: ldiv
      51: lstore        7
      53: lload_2
      54: lload         5
      56: ladd
      57: lload         7
      59: ladd
      60: aload_0
      61: getfield      #3                  // Field deadline:J
      64: lcmp
      65: ifle          120
      68: getstatic     #14                 // Field log:Lorg/slf4j/Logger;
      71: ldc           #15                 // String Final retry attempt: {}, timeleft: {}, stacktrace: {}
      73: iconst_3
      74: anewarray     #16                 // class java/lang/Object
      77: dup
      78: iconst_0
      79: iload_1
      80: invokestatic  #17                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      83: aastore
      84: dup
      85: iconst_1
      86: aload_0
      87: getfield      #3                  // Field deadline:J
      90: lload_2
      91: lsub
      92: invokestatic  #18                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      95: aastore
      96: dup
      97: iconst_2
      98: invokestatic  #19                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
     101: invokevirtual #20                 // Method java/lang/Thread.getStackTrace:()[Ljava/lang/StackTraceElement;
     104: invokestatic  #21                 // Method java/util/Arrays.toString:([Ljava/lang/Object;)Ljava/lang/String;
     107: aastore
     108: invokeinterface #22,  3           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;[Ljava/lang/Object;)V
     113: aload_0
     114: getfield      #3                  // Field deadline:J
     117: lload_2
     118: lsub
     119: lreturn
     120: lload         5
     122: lload         7
     124: ladd
     125: lreturn

  static {};
    Code:
       0: ldc           #10                 // class org/apache/bookkeeper/zookeeper/ExponentialBackOffWithDeadlinePolicy
       2: invokestatic  #23                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #14                 // Field log:Lorg/slf4j/Logger;
       8: bipush        13
      10: newarray       int
      12: dup
      13: iconst_0
      14: iconst_0
      15: iastore
      16: dup
      17: iconst_1
      18: iconst_1
      19: iastore
      20: dup
      21: iconst_2
      22: iconst_2
      23: iastore
      24: dup
      25: iconst_3
      26: iconst_3
      27: iastore
      28: dup
      29: iconst_4
      30: iconst_5
      31: iastore
      32: dup
      33: iconst_5
      34: iconst_5
      35: iastore
      36: dup
      37: bipush        6
      39: iconst_5
      40: iastore
      41: dup
      42: bipush        7
      44: bipush        10
      46: iastore
      47: dup
      48: bipush        8
      50: bipush        10
      52: iastore
      53: dup
      54: bipush        9
      56: bipush        10
      58: iastore
      59: dup
      60: bipush        10
      62: bipush        20
      64: iastore
      65: dup
      66: bipush        11
      68: bipush        40
      70: iastore
      71: dup
      72: bipush        12
      74: bipush        100
      76: iastore
      77: putstatic     #9                  // Field RETRY_BACKOFF:[I
      80: return
}
