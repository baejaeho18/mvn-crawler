Compiled from "ConcurrentOpenHashSet.java"
final class org.apache.bookkeeper.util.collections.ConcurrentOpenHashSet$Section<V> extends java.util.concurrent.locks.StampedLock {
  private volatile V[] values;

  private volatile int capacity;

  private volatile int size;

  private int usedBuckets;

  private int resizeThreshold;

  org.apache.bookkeeper.util.collections.ConcurrentOpenHashSet$Section(int);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method java/util/concurrent/locks/StampedLock."<init>":()V
       4: aload_0
       5: iload_1
       6: invokestatic  #6                  // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashSet.access$300:(I)I
       9: putfield      #3                  // Field capacity:I
      12: aload_0
      13: aload_0
      14: getfield      #3                  // Field capacity:I
      17: anewarray     #7                  // class java/lang/Object
      20: checkcast     #8                  // class "[Ljava/lang/Object;"
      23: putfield      #9                  // Field values:[Ljava/lang/Object;
      26: aload_0
      27: iconst_0
      28: putfield      #4                  // Field size:I
      31: aload_0
      32: iconst_0
      33: putfield      #10                 // Field usedBuckets:I
      36: aload_0
      37: aload_0
      38: getfield      #3                  // Field capacity:I
      41: i2f
      42: ldc           #11                 // float 0.66f
      44: fmul
      45: f2i
      46: putfield      #12                 // Field resizeThreshold:I
      49: return

  boolean contains(V, int);
    Code:
       0: iload_2
       1: istore_3
       2: aload_0
       3: invokevirtual #13                 // Method tryOptimisticRead:()J
       6: lstore        4
       8: iconst_0
       9: istore        6
      11: aload_0
      12: getfield      #3                  // Field capacity:I
      15: istore        7
      17: iload_3
      18: i2l
      19: iload         7
      21: invokestatic  #14                 // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashSet.signSafeMod:(JI)I
      24: istore_3
      25: aload_0
      26: getfield      #9                  // Field values:[Ljava/lang/Object;
      29: iload_3
      30: aaload
      31: astore        8
      33: iload         6
      35: ifne          98
      38: aload_0
      39: lload         4
      41: invokevirtual #15                 // Method validate:(J)Z
      44: ifeq          98
      47: aload_1
      48: aload         8
      50: invokevirtual #16                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      53: ifeq          73
      56: iconst_1
      57: istore        9
      59: iload         6
      61: ifeq          70
      64: aload_0
      65: lload         4
      67: invokevirtual #17                 // Method unlockRead:(J)V
      70: iload         9
      72: ireturn
      73: aload         8
      75: invokestatic  #18                 // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashSet.access$400:()Ljava/lang/Object;
      78: if_acmpne     185
      81: iconst_0
      82: istore        9
      84: iload         6
      86: ifeq          95
      89: aload_0
      90: lload         4
      92: invokevirtual #17                 // Method unlockRead:(J)V
      95: iload         9
      97: ireturn
      98: iload         6
     100: ifne          120
     103: aload_0
     104: invokevirtual #19                 // Method readLock:()J
     107: lstore        4
     109: iconst_1
     110: istore        6
     112: aload_0
     113: getfield      #9                  // Field values:[Ljava/lang/Object;
     116: iload_3
     117: aaload
     118: astore        8
     120: iload         7
     122: aload_0
     123: getfield      #3                  // Field capacity:I
     126: if_icmpeq     134
     129: iload_2
     130: istore_3
     131: goto          11
     134: aload_1
     135: aload         8
     137: invokevirtual #16                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
     140: ifeq          160
     143: iconst_1
     144: istore        9
     146: iload         6
     148: ifeq          157
     151: aload_0
     152: lload         4
     154: invokevirtual #17                 // Method unlockRead:(J)V
     157: iload         9
     159: ireturn
     160: aload         8
     162: invokestatic  #18                 // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashSet.access$400:()Ljava/lang/Object;
     165: if_acmpne     185
     168: iconst_0
     169: istore        9
     171: iload         6
     173: ifeq          182
     176: aload_0
     177: lload         4
     179: invokevirtual #17                 // Method unlockRead:(J)V
     182: iload         9
     184: ireturn
     185: iinc          3, 1
     188: goto          11
     191: astore        10
     193: iload         6
     195: ifeq          204
     198: aload_0
     199: lload         4
     201: invokevirtual #17                 // Method unlockRead:(J)V
     204: aload         10
     206: athrow
    Exception table:
       from    to  target type
          11    59   191   any
          73    84   191   any
          98   146   191   any
         160   171   191   any
         185   193   191   any

  boolean add(V, int);
    Code:
       0: iload_2
       1: istore_3
       2: aload_0
       3: invokevirtual #20                 // Method writeLock:()J
       6: lstore        4
       8: aload_0
       9: getfield      #3                  // Field capacity:I
      12: istore        6
      14: iconst_m1
      15: istore        7
      17: iload_3
      18: i2l
      19: iload         6
      21: invokestatic  #14                 // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashSet.signSafeMod:(JI)I
      24: istore_3
      25: aload_0
      26: getfield      #9                  // Field values:[Ljava/lang/Object;
      29: iload_3
      30: aaload
      31: astore        8
      33: aload_1
      34: aload         8
      36: invokevirtual #16                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      39: ifeq          92
      42: iconst_0
      43: istore        9
      45: aload_0
      46: getfield      #10                 // Field usedBuckets:I
      49: aload_0
      50: getfield      #12                 // Field resizeThreshold:I
      53: if_icmple     83
      56: aload_0
      57: invokespecial #21                 // Method rehash:()V
      60: aload_0
      61: lload         4
      63: invokevirtual #22                 // Method unlockWrite:(J)V
      66: goto          80
      69: astore        10
      71: aload_0
      72: lload         4
      74: invokevirtual #22                 // Method unlockWrite:(J)V
      77: aload         10
      79: athrow
      80: goto          89
      83: aload_0
      84: lload         4
      86: invokevirtual #22                 // Method unlockWrite:(J)V
      89: iload         9
      91: ireturn
      92: aload         8
      94: invokestatic  #18                 // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashSet.access$400:()Ljava/lang/Object;
      97: if_acmpne     189
     100: iload         7
     102: iconst_m1
     103: if_icmpeq     112
     106: iload         7
     108: istore_3
     109: goto          122
     112: aload_0
     113: dup
     114: getfield      #10                 // Field usedBuckets:I
     117: iconst_1
     118: iadd
     119: putfield      #10                 // Field usedBuckets:I
     122: aload_0
     123: getfield      #9                  // Field values:[Ljava/lang/Object;
     126: iload_3
     127: aload_1
     128: aastore
     129: aload_0
     130: dup
     131: getfield      #4                  // Field size:I
     134: iconst_1
     135: iadd
     136: putfield      #4                  // Field size:I
     139: iconst_1
     140: istore        9
     142: aload_0
     143: getfield      #10                 // Field usedBuckets:I
     146: aload_0
     147: getfield      #12                 // Field resizeThreshold:I
     150: if_icmple     180
     153: aload_0
     154: invokespecial #21                 // Method rehash:()V
     157: aload_0
     158: lload         4
     160: invokevirtual #22                 // Method unlockWrite:(J)V
     163: goto          177
     166: astore        11
     168: aload_0
     169: lload         4
     171: invokevirtual #22                 // Method unlockWrite:(J)V
     174: aload         11
     176: athrow
     177: goto          186
     180: aload_0
     181: lload         4
     183: invokevirtual #22                 // Method unlockWrite:(J)V
     186: iload         9
     188: ireturn
     189: aload         8
     191: invokestatic  #23                 // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashSet.access$500:()Ljava/lang/Object;
     194: if_acmpne     206
     197: iload         7
     199: iconst_m1
     200: if_icmpne     206
     203: iload_3
     204: istore        7
     206: iinc          3, 1
     209: goto          17
     212: astore        12
     214: aload_0
     215: getfield      #10                 // Field usedBuckets:I
     218: aload_0
     219: getfield      #12                 // Field resizeThreshold:I
     222: if_icmple     252
     225: aload_0
     226: invokespecial #21                 // Method rehash:()V
     229: aload_0
     230: lload         4
     232: invokevirtual #22                 // Method unlockWrite:(J)V
     235: goto          249
     238: astore        13
     240: aload_0
     241: lload         4
     243: invokevirtual #22                 // Method unlockWrite:(J)V
     246: aload         13
     248: athrow
     249: goto          258
     252: aload_0
     253: lload         4
     255: invokevirtual #22                 // Method unlockWrite:(J)V
     258: aload         12
     260: athrow
    Exception table:
       from    to  target type
          56    60    69   any
          69    71    69   any
         153   157   166   any
         166   168   166   any
          17    45   212   any
          92   142   212   any
         225   229   238   any
         238   240   238   any
         189   214   212   any

  private boolean remove(V, int);
    Code:
       0: iload_2
       1: istore_3
       2: aload_0
       3: invokevirtual #20                 // Method writeLock:()J
       6: lstore        4
       8: aload_0
       9: getfield      #3                  // Field capacity:I
      12: istore        6
      14: iload_3
      15: i2l
      16: iload         6
      18: invokestatic  #14                 // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashSet.signSafeMod:(JI)I
      21: istore_3
      22: aload_0
      23: getfield      #9                  // Field values:[Ljava/lang/Object;
      26: iload_3
      27: aaload
      28: astore        7
      30: aload_1
      31: aload         7
      33: invokevirtual #16                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      36: ifeq          116
      39: aload_0
      40: dup
      41: getfield      #4                  // Field size:I
      44: iconst_1
      45: isub
      46: putfield      #4                  // Field size:I
      49: iload_3
      50: iconst_1
      51: iadd
      52: i2l
      53: iload         6
      55: invokestatic  #14                 // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashSet.signSafeMod:(JI)I
      58: istore        8
      60: aload_0
      61: getfield      #9                  // Field values:[Ljava/lang/Object;
      64: iload         8
      66: aaload
      67: invokestatic  #18                 // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashSet.access$400:()Ljava/lang/Object;
      70: if_acmpne     95
      73: aload_0
      74: getfield      #9                  // Field values:[Ljava/lang/Object;
      77: iload_3
      78: invokestatic  #18                 // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashSet.access$400:()Ljava/lang/Object;
      81: aastore
      82: aload_0
      83: dup
      84: getfield      #10                 // Field usedBuckets:I
      87: iconst_1
      88: isub
      89: putfield      #10                 // Field usedBuckets:I
      92: goto          104
      95: aload_0
      96: getfield      #9                  // Field values:[Ljava/lang/Object;
      99: iload_3
     100: invokestatic  #23                 // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashSet.access$500:()Ljava/lang/Object;
     103: aastore
     104: iconst_1
     105: istore        9
     107: aload_0
     108: lload         4
     110: invokevirtual #22                 // Method unlockWrite:(J)V
     113: iload         9
     115: ireturn
     116: aload         7
     118: invokestatic  #18                 // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashSet.access$400:()Ljava/lang/Object;
     121: if_acmpne     136
     124: iconst_0
     125: istore        8
     127: aload_0
     128: lload         4
     130: invokevirtual #22                 // Method unlockWrite:(J)V
     133: iload         8
     135: ireturn
     136: iinc          3, 1
     139: goto          8
     142: astore        10
     144: aload_0
     145: lload         4
     147: invokevirtual #22                 // Method unlockWrite:(J)V
     150: aload         10
     152: athrow
    Exception table:
       from    to  target type
           8   107   142   any
         116   127   142   any
         136   144   142   any

  void clear();
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method writeLock:()J
       4: lstore_1
       5: aload_0
       6: getfield      #9                  // Field values:[Ljava/lang/Object;
       9: invokestatic  #18                 // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashSet.access$400:()Ljava/lang/Object;
      12: invokestatic  #24                 // Method java/util/Arrays.fill:([Ljava/lang/Object;Ljava/lang/Object;)V
      15: aload_0
      16: iconst_0
      17: putfield      #4                  // Field size:I
      20: aload_0
      21: iconst_0
      22: putfield      #10                 // Field usedBuckets:I
      25: aload_0
      26: lload_1
      27: invokevirtual #22                 // Method unlockWrite:(J)V
      30: goto          41
      33: astore_3
      34: aload_0
      35: lload_1
      36: invokevirtual #22                 // Method unlockWrite:(J)V
      39: aload_3
      40: athrow
      41: return
    Exception table:
       from    to  target type
           5    25    33   any

  public void forEach(java.util.function.Consumer<? super V>);
    Code:
       0: aload_0
       1: invokevirtual #13                 // Method tryOptimisticRead:()J
       4: lstore_2
       5: aload_0
       6: getfield      #3                  // Field capacity:I
       9: istore        4
      11: aload_0
      12: getfield      #9                  // Field values:[Ljava/lang/Object;
      15: astore        5
      17: iconst_0
      18: istore        6
      20: aload_0
      21: lload_2
      22: invokevirtual #15                 // Method validate:(J)Z
      25: ifne          48
      28: aload_0
      29: invokevirtual #19                 // Method readLock:()J
      32: lstore_2
      33: iconst_1
      34: istore        6
      36: aload_0
      37: getfield      #3                  // Field capacity:I
      40: istore        4
      42: aload_0
      43: getfield      #9                  // Field values:[Ljava/lang/Object;
      46: astore        5
      48: iconst_0
      49: istore        7
      51: iload         7
      53: iload         4
      55: if_icmpge     123
      58: aload         5
      60: iload         7
      62: aaload
      63: astore        8
      65: iload         6
      67: ifne          93
      70: aload_0
      71: lload_2
      72: invokevirtual #15                 // Method validate:(J)Z
      75: ifne          93
      78: aload_0
      79: invokevirtual #19                 // Method readLock:()J
      82: lstore_2
      83: iconst_1
      84: istore        6
      86: aload         5
      88: iload         7
      90: aaload
      91: astore        8
      93: aload         8
      95: invokestatic  #23                 // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashSet.access$500:()Ljava/lang/Object;
      98: if_acmpeq     117
     101: aload         8
     103: invokestatic  #18                 // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashSet.access$400:()Ljava/lang/Object;
     106: if_acmpeq     117
     109: aload_1
     110: aload         8
     112: invokeinterface #25,  2           // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
     117: iinc          7, 1
     120: goto          51
     123: iload         6
     125: ifeq          151
     128: aload_0
     129: lload_2
     130: invokevirtual #17                 // Method unlockRead:(J)V
     133: goto          151
     136: astore        9
     138: iload         6
     140: ifeq          148
     143: aload_0
     144: lload_2
     145: invokevirtual #17                 // Method unlockRead:(J)V
     148: aload         9
     150: athrow
     151: return
    Exception table:
       from    to  target type
          20   123   136   any
         136   138   136   any

  private void rehash();
    Code:
       0: aload_0
       1: getfield      #3                  // Field capacity:I
       4: iconst_2
       5: imul
       6: istore_1
       7: iload_1
       8: anewarray     #7                  // class java/lang/Object
      11: checkcast     #8                  // class "[Ljava/lang/Object;"
      14: astore_2
      15: iconst_0
      16: istore_3
      17: iload_3
      18: aload_0
      19: getfield      #9                  // Field values:[Ljava/lang/Object;
      22: arraylength
      23: if_icmpge     62
      26: aload_0
      27: getfield      #9                  // Field values:[Ljava/lang/Object;
      30: iload_3
      31: aaload
      32: astore        4
      34: aload         4
      36: invokestatic  #18                 // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashSet.access$400:()Ljava/lang/Object;
      39: if_acmpeq     56
      42: aload         4
      44: invokestatic  #23                 // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashSet.access$500:()Ljava/lang/Object;
      47: if_acmpeq     56
      50: aload_2
      51: aload         4
      53: invokestatic  #26                 // Method insertValueNoLock:([Ljava/lang/Object;Ljava/lang/Object;)V
      56: iinc          3, 1
      59: goto          17
      62: aload_0
      63: aload_2
      64: putfield      #9                  // Field values:[Ljava/lang/Object;
      67: aload_0
      68: aload_0
      69: getfield      #4                  // Field size:I
      72: putfield      #10                 // Field usedBuckets:I
      75: aload_0
      76: iload_1
      77: putfield      #3                  // Field capacity:I
      80: aload_0
      81: aload_0
      82: getfield      #3                  // Field capacity:I
      85: i2f
      86: ldc           #11                 // float 0.66f
      88: fmul
      89: f2i
      90: putfield      #12                 // Field resizeThreshold:I
      93: return

  private static <V> void insertValueNoLock(V[], V);
    Code:
       0: aload_1
       1: invokestatic  #27                 // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashSet.hash:(Ljava/lang/Object;)J
       4: l2i
       5: istore_2
       6: iload_2
       7: i2l
       8: aload_0
       9: arraylength
      10: invokestatic  #14                 // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashSet.signSafeMod:(JI)I
      13: istore_2
      14: aload_0
      15: iload_2
      16: aaload
      17: astore_3
      18: aload_3
      19: invokestatic  #18                 // Method org/apache/bookkeeper/util/collections/ConcurrentOpenHashSet.access$400:()Ljava/lang/Object;
      22: if_acmpne     30
      25: aload_0
      26: iload_2
      27: aload_1
      28: aastore
      29: return
      30: iinc          2, 1
      33: goto          6

  static int access$000(org.apache.bookkeeper.util.collections.ConcurrentOpenHashSet$Section);
    Code:
       0: aload_0
       1: getfield      #4                  // Field size:I
       4: ireturn

  static int access$100(org.apache.bookkeeper.util.collections.ConcurrentOpenHashSet$Section);
    Code:
       0: aload_0
       1: getfield      #3                  // Field capacity:I
       4: ireturn

  static boolean access$200(org.apache.bookkeeper.util.collections.ConcurrentOpenHashSet$Section, java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokespecial #2                  // Method remove:(Ljava/lang/Object;I)Z
       6: ireturn
}
