Compiled from "BookieStateManager.java"
public class org.apache.bookkeeper.bookie.BookieStateManager implements org.apache.bookkeeper.bookie.StateManager {
  private static final org.slf4j.Logger log;

  private static final org.slf4j.Logger LOG;

  private final org.apache.bookkeeper.conf.ServerConfiguration conf;

  private final java.util.function.Supplier<org.apache.bookkeeper.discover.BookieServiceInfo> bookieServiceInfoProvider;

  private final java.util.List<java.io.File> statusDirs;

  final java.util.concurrent.ExecutorService stateService;

  private volatile boolean running;

  private volatile boolean shuttingdown;

  private final org.apache.bookkeeper.bookie.BookieStatus bookieStatus;

  private final java.util.concurrent.atomic.AtomicBoolean rmRegistered;

  private final java.util.concurrent.atomic.AtomicBoolean forceReadOnly;

  private volatile boolean availableForHighPriorityWrites;

  private final org.apache.bookkeeper.net.BookieId bookieId;

  private org.apache.bookkeeper.bookie.StateManager$ShutdownHandler shutdownHandler;

  private final java.util.function.Supplier<org.apache.bookkeeper.discover.RegistrationManager> rm;

  private final org.apache.bookkeeper.stats.Gauge<java.lang.Number> serverStatusGauge;

  public org.apache.bookkeeper.bookie.BookieStateManager(org.apache.bookkeeper.conf.ServerConfiguration, org.apache.bookkeeper.stats.StatsLogger, org.apache.bookkeeper.meta.MetadataBookieDriver, org.apache.bookkeeper.bookie.LedgerDirsManager, java.util.function.Supplier<org.apache.bookkeeper.discover.BookieServiceInfo>) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokedynamic #7,  0              // InvokeDynamic #0:get:(Lorg/apache/bookkeeper/meta/MetadataBookieDriver;)Ljava/util/function/Supplier;
       9: aload         4
      11: invokevirtual #8                  // Method org/apache/bookkeeper/bookie/LedgerDirsManager.getAllLedgerDirs:()Ljava/util/List;
      14: aload_1
      15: invokedynamic #9,  0              // InvokeDynamic #1:get:(Lorg/apache/bookkeeper/conf/ServerConfiguration;)Ljava/util/function/Supplier;
      20: aload         5
      22: invokespecial #10                 // Method "<init>":(Lorg/apache/bookkeeper/conf/ServerConfiguration;Lorg/apache/bookkeeper/stats/StatsLogger;Ljava/util/function/Supplier;Ljava/util/List;Ljava/util/function/Supplier;Ljava/util/function/Supplier;)V
      25: return

  public org.apache.bookkeeper.bookie.BookieStateManager(org.apache.bookkeeper.conf.ServerConfiguration, org.apache.bookkeeper.stats.StatsLogger, java.util.function.Supplier<org.apache.bookkeeper.discover.RegistrationManager>, java.util.List<java.io.File>, java.util.function.Supplier<org.apache.bookkeeper.net.BookieId>, java.util.function.Supplier<org.apache.bookkeeper.discover.BookieServiceInfo>) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #11                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #12                 // class com/google/common/util/concurrent/ThreadFactoryBuilder
       8: dup
       9: invokespecial #13                 // Method com/google/common/util/concurrent/ThreadFactoryBuilder."<init>":()V
      12: ldc           #14                 // String BookieStateManagerService-%d
      14: invokevirtual #15                 // Method com/google/common/util/concurrent/ThreadFactoryBuilder.setNameFormat:(Ljava/lang/String;)Lcom/google/common/util/concurrent/ThreadFactoryBuilder;
      17: invokevirtual #16                 // Method com/google/common/util/concurrent/ThreadFactoryBuilder.build:()Ljava/util/concurrent/ThreadFactory;
      20: invokestatic  #17                 // Method java/util/concurrent/Executors.newSingleThreadExecutor:(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ExecutorService;
      23: putfield      #18                 // Field stateService:Ljava/util/concurrent/ExecutorService;
      26: aload_0
      27: iconst_0
      28: putfield      #19                 // Field running:Z
      31: aload_0
      32: iconst_0
      33: putfield      #20                 // Field shuttingdown:Z
      36: aload_0
      37: new           #21                 // class org/apache/bookkeeper/bookie/BookieStatus
      40: dup
      41: invokespecial #22                 // Method org/apache/bookkeeper/bookie/BookieStatus."<init>":()V
      44: putfield      #4                  // Field bookieStatus:Lorg/apache/bookkeeper/bookie/BookieStatus;
      47: aload_0
      48: new           #23                 // class java/util/concurrent/atomic/AtomicBoolean
      51: dup
      52: iconst_0
      53: invokespecial #24                 // Method java/util/concurrent/atomic/AtomicBoolean."<init>":(Z)V
      56: putfield      #6                  // Field rmRegistered:Ljava/util/concurrent/atomic/AtomicBoolean;
      59: aload_0
      60: new           #23                 // class java/util/concurrent/atomic/AtomicBoolean
      63: dup
      64: iconst_0
      65: invokespecial #24                 // Method java/util/concurrent/atomic/AtomicBoolean."<init>":(Z)V
      68: putfield      #5                  // Field forceReadOnly:Ljava/util/concurrent/atomic/AtomicBoolean;
      71: aload_0
      72: iconst_1
      73: putfield      #25                 // Field availableForHighPriorityWrites:Z
      76: aload_0
      77: aload_1
      78: putfield      #26                 // Field conf:Lorg/apache/bookkeeper/conf/ServerConfiguration;
      81: aload_0
      82: aload_3
      83: putfield      #27                 // Field rm:Ljava/util/function/Supplier;
      86: aload_0
      87: aload         4
      89: putfield      #28                 // Field statusDirs:Ljava/util/List;
      92: aload_0
      93: aload         5
      95: invokeinterface #29,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
     100: checkcast     #30                 // class org/apache/bookkeeper/net/BookieId
     103: putfield      #31                 // Field bookieId:Lorg/apache/bookkeeper/net/BookieId;
     106: aload_0
     107: aload         6
     109: putfield      #32                 // Field bookieServiceInfoProvider:Ljava/util/function/Supplier;
     112: aload_0
     113: new           #33                 // class org/apache/bookkeeper/bookie/BookieStateManager$1
     116: dup
     117: aload_0
     118: invokespecial #34                 // Method org/apache/bookkeeper/bookie/BookieStateManager$1."<init>":(Lorg/apache/bookkeeper/bookie/BookieStateManager;)V
     121: putfield      #35                 // Field serverStatusGauge:Lorg/apache/bookkeeper/stats/Gauge;
     124: aload_2
     125: ldc           #36                 // String SERVER_STATUS
     127: aload_0
     128: getfield      #35                 // Field serverStatusGauge:Lorg/apache/bookkeeper/stats/Gauge;
     131: invokeinterface #37,  3           // InterfaceMethod org/apache/bookkeeper/stats/StatsLogger.registerGauge:(Ljava/lang/String;Lorg/apache/bookkeeper/stats/Gauge;)V
     136: return

  private boolean isRegistrationManagerDisabled();
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #27                 // Field rm:Ljava/util/function/Supplier;
       5: if_acmpeq     21
       8: aconst_null
       9: aload_0
      10: getfield      #27                 // Field rm:Ljava/util/function/Supplier;
      13: invokeinterface #29,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      18: if_acmpne     25
      21: iconst_1
      22: goto          26
      25: iconst_0
      26: ireturn

  org.apache.bookkeeper.bookie.BookieStateManager(org.apache.bookkeeper.conf.ServerConfiguration, org.apache.bookkeeper.meta.MetadataBookieDriver) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #38                 // Field org/apache/bookkeeper/stats/NullStatsLogger.INSTANCE:Lorg/apache/bookkeeper/stats/NullStatsLogger;
       5: aload_2
       6: new           #39                 // class org/apache/bookkeeper/bookie/LedgerDirsManager
       9: dup
      10: aload_1
      11: aload_1
      12: invokevirtual #40                 // Method org/apache/bookkeeper/conf/ServerConfiguration.getLedgerDirs:()[Ljava/io/File;
      15: new           #41                 // class org/apache/bookkeeper/util/DiskChecker
      18: dup
      19: aload_1
      20: invokevirtual #42                 // Method org/apache/bookkeeper/conf/ServerConfiguration.getDiskUsageThreshold:()F
      23: aload_1
      24: invokevirtual #43                 // Method org/apache/bookkeeper/conf/ServerConfiguration.getDiskUsageWarnThreshold:()F
      27: invokespecial #44                 // Method org/apache/bookkeeper/util/DiskChecker."<init>":(FF)V
      30: getstatic     #38                 // Field org/apache/bookkeeper/stats/NullStatsLogger.INSTANCE:Lorg/apache/bookkeeper/stats/NullStatsLogger;
      33: invokespecial #45                 // Method org/apache/bookkeeper/bookie/LedgerDirsManager."<init>":(Lorg/apache/bookkeeper/conf/ServerConfiguration;[Ljava/io/File;Lorg/apache/bookkeeper/util/DiskChecker;Lorg/apache/bookkeeper/stats/StatsLogger;)V
      36: getstatic     #46                 // Field org/apache/bookkeeper/discover/BookieServiceInfo.NO_INFO:Ljava/util/function/Supplier;
      39: invokespecial #47                 // Method "<init>":(Lorg/apache/bookkeeper/conf/ServerConfiguration;Lorg/apache/bookkeeper/stats/StatsLogger;Lorg/apache/bookkeeper/meta/MetadataBookieDriver;Lorg/apache/bookkeeper/bookie/LedgerDirsManager;Ljava/util/function/Supplier;)V
      42: return

  public void initState();
    Code:
       0: aload_0
       1: getfield      #5                  // Field forceReadOnly:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: invokevirtual #48                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       7: ifeq          21
      10: aload_0
      11: getfield      #4                  // Field bookieStatus:Lorg/apache/bookkeeper/bookie/BookieStatus;
      14: invokevirtual #49                 // Method org/apache/bookkeeper/bookie/BookieStatus.setToReadOnlyMode:()Z
      17: pop
      18: goto          42
      21: aload_0
      22: getfield      #26                 // Field conf:Lorg/apache/bookkeeper/conf/ServerConfiguration;
      25: invokevirtual #50                 // Method org/apache/bookkeeper/conf/ServerConfiguration.isPersistBookieStatusEnabled:()Z
      28: ifeq          42
      31: aload_0
      32: getfield      #4                  // Field bookieStatus:Lorg/apache/bookkeeper/bookie/BookieStatus;
      35: aload_0
      36: getfield      #28                 // Field statusDirs:Ljava/util/List;
      39: invokevirtual #51                 // Method org/apache/bookkeeper/bookie/BookieStatus.readFromDirectories:(Ljava/util/List;)V
      42: aload_0
      43: iconst_1
      44: putfield      #19                 // Field running:Z
      47: return

  public void forceToShuttingDown();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #20                 // Field shuttingdown:Z
       5: return

  public void forceToReadOnly();
    Code:
       0: aload_0
       1: getfield      #5                  // Field forceReadOnly:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_1
       5: invokevirtual #52                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
       8: return

  public void forceToUnregistered();
    Code:
       0: aload_0
       1: getfield      #6                  // Field rmRegistered:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_0
       5: invokevirtual #52                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
       8: return

  public boolean isReadOnly();
    Code:
       0: aload_0
       1: getfield      #5                  // Field forceReadOnly:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: invokevirtual #48                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       7: ifne          20
      10: aload_0
      11: getfield      #4                  // Field bookieStatus:Lorg/apache/bookkeeper/bookie/BookieStatus;
      14: invokevirtual #53                 // Method org/apache/bookkeeper/bookie/BookieStatus.isInReadOnlyMode:()Z
      17: ifeq          24
      20: iconst_1
      21: goto          25
      24: iconst_0
      25: ireturn

  public boolean isAvailableForHighPriorityWrites();
    Code:
       0: aload_0
       1: getfield      #25                 // Field availableForHighPriorityWrites:Z
       4: ireturn

  public void setHighPriorityWritesAvailability(boolean);
    Code:
       0: aload_0
       1: getfield      #25                 // Field availableForHighPriorityWrites:Z
       4: ifeq          24
       7: iload_1
       8: ifne          24
      11: getstatic     #54                 // Field log:Lorg/slf4j/Logger;
      14: ldc           #55                 // String Disable high priority writes on readonly bookie.
      16: invokeinterface #56,  2           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;)V
      21: goto          45
      24: aload_0
      25: getfield      #25                 // Field availableForHighPriorityWrites:Z
      28: ifne          45
      31: iload_1
      32: ifeq          45
      35: getstatic     #54                 // Field log:Lorg/slf4j/Logger;
      38: ldc           #57                 // String Enable high priority writes on readonly bookie.
      40: invokeinterface #56,  2           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;)V
      45: aload_0
      46: iload_1
      47: putfield      #25                 // Field availableForHighPriorityWrites:Z
      50: return

  public boolean isRunning();
    Code:
       0: aload_0
       1: getfield      #19                 // Field running:Z
       4: ireturn

  public boolean isShuttingDown();
    Code:
       0: aload_0
       1: getfield      #20                 // Field shuttingdown:Z
       4: ireturn

  public void close();
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #19                 // Field running:Z
       5: aload_0
       6: getfield      #18                 // Field stateService:Ljava/util/concurrent/ExecutorService;
       9: invokeinterface #58,  1           // InterfaceMethod java/util/concurrent/ExecutorService.shutdown:()V
      14: return

  public java.util.concurrent.Future<java.lang.Void> registerBookie(boolean);
    Code:
       0: aload_0
       1: getfield      #18                 // Field stateService:Ljava/util/concurrent/ExecutorService;
       4: new           #59                 // class org/apache/bookkeeper/bookie/BookieStateManager$2
       7: dup
       8: aload_0
       9: iload_1
      10: invokespecial #60                 // Method org/apache/bookkeeper/bookie/BookieStateManager$2."<init>":(Lorg/apache/bookkeeper/bookie/BookieStateManager;Z)V
      13: invokeinterface #61,  2           // InterfaceMethod java/util/concurrent/ExecutorService.submit:(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;
      18: areturn

  public java.util.concurrent.Future<java.lang.Void> transitionToWritableMode();
    Code:
       0: aload_0
       1: getfield      #18                 // Field stateService:Ljava/util/concurrent/ExecutorService;
       4: new           #62                 // class org/apache/bookkeeper/bookie/BookieStateManager$3
       7: dup
       8: aload_0
       9: invokespecial #63                 // Method org/apache/bookkeeper/bookie/BookieStateManager$3."<init>":(Lorg/apache/bookkeeper/bookie/BookieStateManager;)V
      12: invokeinterface #61,  2           // InterfaceMethod java/util/concurrent/ExecutorService.submit:(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;
      17: areturn

  public java.util.concurrent.Future<java.lang.Void> transitionToReadOnlyMode();
    Code:
       0: aload_0
       1: getfield      #18                 // Field stateService:Ljava/util/concurrent/ExecutorService;
       4: new           #64                 // class org/apache/bookkeeper/bookie/BookieStateManager$4
       7: dup
       8: aload_0
       9: invokespecial #65                 // Method org/apache/bookkeeper/bookie/BookieStateManager$4."<init>":(Lorg/apache/bookkeeper/bookie/BookieStateManager;)V
      12: invokeinterface #61,  2           // InterfaceMethod java/util/concurrent/ExecutorService.submit:(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;
      17: areturn

  void doRegisterBookie() throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #5                  // Field forceReadOnly:Ljava/util/concurrent/atomic/AtomicBoolean;
       5: invokevirtual #48                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       8: ifne          21
      11: aload_0
      12: getfield      #4                  // Field bookieStatus:Lorg/apache/bookkeeper/bookie/BookieStatus;
      15: invokevirtual #53                 // Method org/apache/bookkeeper/bookie/BookieStatus.isInReadOnlyMode:()Z
      18: ifeq          25
      21: iconst_1
      22: goto          26
      25: iconst_0
      26: invokespecial #66                 // Method doRegisterBookie:(Z)V
      29: return

  private void doRegisterBookie(boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #67                 // Method isRegistrationManagerDisabled:()Z
       4: ifeq          18
       7: getstatic     #3                  // Field LOG:Lorg/slf4j/Logger;
      10: ldc           #68                 // String null registration manager while do register
      12: invokeinterface #56,  2           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;)V
      17: return
      18: aload_0
      19: getfield      #6                  // Field rmRegistered:Ljava/util/concurrent/atomic/AtomicBoolean;
      22: iconst_0
      23: invokevirtual #52                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
      26: aload_0
      27: getfield      #27                 // Field rm:Ljava/util/function/Supplier;
      30: invokeinterface #29,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      35: checkcast     #69                 // class org/apache/bookkeeper/discover/RegistrationManager
      38: aload_0
      39: getfield      #31                 // Field bookieId:Lorg/apache/bookkeeper/net/BookieId;
      42: iload_1
      43: aload_0
      44: getfield      #32                 // Field bookieServiceInfoProvider:Ljava/util/function/Supplier;
      47: invokeinterface #29,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      52: checkcast     #70                 // class org/apache/bookkeeper/discover/BookieServiceInfo
      55: invokeinterface #71,  4           // InterfaceMethod org/apache/bookkeeper/discover/RegistrationManager.registerBookie:(Lorg/apache/bookkeeper/net/BookieId;ZLorg/apache/bookkeeper/discover/BookieServiceInfo;)V
      60: aload_0
      61: getfield      #6                  // Field rmRegistered:Ljava/util/concurrent/atomic/AtomicBoolean;
      64: iconst_1
      65: invokevirtual #52                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
      68: goto          81
      71: astore_2
      72: new           #73                 // class java/io/IOException
      75: dup
      76: aload_2
      77: invokespecial #74                 // Method java/io/IOException."<init>":(Ljava/lang/Throwable;)V
      80: athrow
      81: return
    Exception table:
       from    to  target type
          26    68    71   Class org/apache/bookkeeper/bookie/BookieException

  public void doTransitionToWritableMode();
    Code:
       0: aload_0
       1: getfield      #20                 // Field shuttingdown:Z
       4: ifne          17
       7: aload_0
       8: getfield      #5                  // Field forceReadOnly:Ljava/util/concurrent/atomic/AtomicBoolean;
      11: invokevirtual #48                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
      14: ifeq          18
      17: return
      18: aload_0
      19: getfield      #4                  // Field bookieStatus:Lorg/apache/bookkeeper/bookie/BookieStatus;
      22: invokevirtual #75                 // Method org/apache/bookkeeper/bookie/BookieStatus.setToWritableMode:()Z
      25: ifne          29
      28: return
      29: getstatic     #3                  // Field LOG:Lorg/slf4j/Logger;
      32: ldc           #76                 // String Transitioning Bookie to Writable mode and will serve read/write requests.
      34: invokeinterface #56,  2           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;)V
      39: aload_0
      40: getfield      #26                 // Field conf:Lorg/apache/bookkeeper/conf/ServerConfiguration;
      43: invokevirtual #50                 // Method org/apache/bookkeeper/conf/ServerConfiguration.isPersistBookieStatusEnabled:()Z
      46: ifeq          60
      49: aload_0
      50: getfield      #4                  // Field bookieStatus:Lorg/apache/bookkeeper/bookie/BookieStatus;
      53: aload_0
      54: getfield      #28                 // Field statusDirs:Ljava/util/List;
      57: invokevirtual #77                 // Method org/apache/bookkeeper/bookie/BookieStatus.writeToDirectories:(Ljava/util/List;)V
      60: aload_0
      61: invokespecial #67                 // Method isRegistrationManagerDisabled:()Z
      64: ifeq          68
      67: return
      68: aload_0
      69: iconst_0
      70: invokespecial #66                 // Method doRegisterBookie:(Z)V
      73: goto          94
      76: astore_1
      77: getstatic     #3                  // Field LOG:Lorg/slf4j/Logger;
      80: ldc           #78                 // String Error in transitioning back to writable mode :
      82: aload_1
      83: invokeinterface #79,  3           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Throwable;)V
      88: aload_0
      89: invokevirtual #80                 // Method transitionToReadOnlyMode:()Ljava/util/concurrent/Future;
      92: pop
      93: return
      94: aload_0
      95: getfield      #27                 // Field rm:Ljava/util/function/Supplier;
      98: invokeinterface #29,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
     103: checkcast     #69                 // class org/apache/bookkeeper/discover/RegistrationManager
     106: aload_0
     107: getfield      #31                 // Field bookieId:Lorg/apache/bookkeeper/net/BookieId;
     110: iconst_1
     111: invokeinterface #81,  3           // InterfaceMethod org/apache/bookkeeper/discover/RegistrationManager.unregisterBookie:(Lorg/apache/bookkeeper/net/BookieId;Z)V
     116: goto          132
     119: astore_1
     120: getstatic     #3                  // Field LOG:Lorg/slf4j/Logger;
     123: ldc           #82                 // String Failed to delete bookie readonly state in zookeeper :
     125: aload_1
     126: invokeinterface #79,  3           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Throwable;)V
     131: return
     132: return
    Exception table:
       from    to  target type
          68    73    76   Class java/io/IOException
          94   116   119   Class org/apache/bookkeeper/bookie/BookieException

  public void doTransitionToReadOnlyMode();
    Code:
       0: aload_0
       1: getfield      #20                 // Field shuttingdown:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: getfield      #4                  // Field bookieStatus:Lorg/apache/bookkeeper/bookie/BookieStatus;
      12: invokevirtual #49                 // Method org/apache/bookkeeper/bookie/BookieStatus.setToReadOnlyMode:()Z
      15: ifne          19
      18: return
      19: aload_0
      20: getfield      #26                 // Field conf:Lorg/apache/bookkeeper/conf/ServerConfiguration;
      23: invokevirtual #83                 // Method org/apache/bookkeeper/conf/ServerConfiguration.isReadOnlyModeEnabled:()Z
      26: ifne          50
      29: getstatic     #3                  // Field LOG:Lorg/slf4j/Logger;
      32: ldc           #84                 // String ReadOnly mode is not enabled. Can be enabled by configuring \'readOnlyModeEnabled=true\' in configuration. Shutting down bookie
      34: invokeinterface #85,  2           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
      39: aload_0
      40: getfield      #2                  // Field shutdownHandler:Lorg/apache/bookkeeper/bookie/StateManager$ShutdownHandler;
      43: iconst_5
      44: invokeinterface #87,  2           // InterfaceMethod org/apache/bookkeeper/bookie/StateManager$ShutdownHandler.shutdown:(I)V
      49: return
      50: getstatic     #3                  // Field LOG:Lorg/slf4j/Logger;
      53: ldc           #88                 // String Transitioning Bookie to ReadOnly mode, and will serve only read requests from clients!
      55: invokeinterface #56,  2           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;)V
      60: aload_0
      61: getfield      #26                 // Field conf:Lorg/apache/bookkeeper/conf/ServerConfiguration;
      64: invokevirtual #50                 // Method org/apache/bookkeeper/conf/ServerConfiguration.isPersistBookieStatusEnabled:()Z
      67: ifeq          81
      70: aload_0
      71: getfield      #4                  // Field bookieStatus:Lorg/apache/bookkeeper/bookie/BookieStatus;
      74: aload_0
      75: getfield      #28                 // Field statusDirs:Ljava/util/List;
      78: invokevirtual #77                 // Method org/apache/bookkeeper/bookie/BookieStatus.writeToDirectories:(Ljava/util/List;)V
      81: aload_0
      82: invokespecial #67                 // Method isRegistrationManagerDisabled:()Z
      85: ifeq          89
      88: return
      89: aload_0
      90: getfield      #27                 // Field rm:Ljava/util/function/Supplier;
      93: invokeinterface #29,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      98: checkcast     #69                 // class org/apache/bookkeeper/discover/RegistrationManager
     101: aload_0
     102: getfield      #31                 // Field bookieId:Lorg/apache/bookkeeper/net/BookieId;
     105: iconst_1
     106: aload_0
     107: getfield      #32                 // Field bookieServiceInfoProvider:Ljava/util/function/Supplier;
     110: invokeinterface #29,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
     115: checkcast     #70                 // class org/apache/bookkeeper/discover/BookieServiceInfo
     118: invokeinterface #71,  4           // InterfaceMethod org/apache/bookkeeper/discover/RegistrationManager.registerBookie:(Lorg/apache/bookkeeper/net/BookieId;ZLorg/apache/bookkeeper/discover/BookieServiceInfo;)V
     123: goto          149
     126: astore_1
     127: getstatic     #3                  // Field LOG:Lorg/slf4j/Logger;
     130: ldc           #89                 // String Error in transition to ReadOnly Mode. Shutting down
     132: aload_1
     133: invokeinterface #90,  3           // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Throwable;)V
     138: aload_0
     139: getfield      #2                  // Field shutdownHandler:Lorg/apache/bookkeeper/bookie/StateManager$ShutdownHandler;
     142: iconst_5
     143: invokeinterface #87,  2           // InterfaceMethod org/apache/bookkeeper/bookie/StateManager$ShutdownHandler.shutdown:(I)V
     148: return
     149: return
    Exception table:
       from    to  target type
          89   123   126   Class org/apache/bookkeeper/bookie/BookieException

  public void setShutdownHandler(org.apache.bookkeeper.bookie.StateManager$ShutdownHandler);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2                  // Field shutdownHandler:Lorg/apache/bookkeeper/bookie/StateManager$ShutdownHandler;
       5: return

  public org.apache.bookkeeper.bookie.StateManager$ShutdownHandler getShutdownHandler();
    Code:
       0: aload_0
       1: getfield      #2                  // Field shutdownHandler:Lorg/apache/bookkeeper/bookie/StateManager$ShutdownHandler;
       4: areturn

  boolean isRegistered();
    Code:
       0: aload_0
       1: getfield      #6                  // Field rmRegistered:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: invokevirtual #48                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       7: ireturn

  private static org.apache.bookkeeper.net.BookieId lambda$new$1(org.apache.bookkeeper.conf.ServerConfiguration);
    Code:
       0: aload_0
       1: invokestatic  #91                 // Method org/apache/bookkeeper/bookie/Bookie.getBookieId:(Lorg/apache/bookkeeper/conf/ServerConfiguration;)Lorg/apache/bookkeeper/net/BookieId;
       4: areturn
       5: astore_1
       6: new           #93                 // class java/io/UncheckedIOException
       9: dup
      10: ldc           #94                 // String Failed to resolve bookie id
      12: aload_1
      13: invokespecial #95                 // Method java/io/UncheckedIOException."<init>":(Ljava/lang/String;Ljava/io/IOException;)V
      16: athrow
    Exception table:
       from    to  target type
           0     4     5   Class java/net/UnknownHostException

  private static org.apache.bookkeeper.discover.RegistrationManager lambda$new$0(org.apache.bookkeeper.meta.MetadataBookieDriver);
    Code:
       0: aconst_null
       1: aload_0
       2: if_acmpne     9
       5: aconst_null
       6: goto          15
       9: aload_0
      10: invokeinterface #96,  1           // InterfaceMethod org/apache/bookkeeper/meta/MetadataBookieDriver.getRegistrationManager:()Lorg/apache/bookkeeper/discover/RegistrationManager;
      15: areturn

  static java.util.concurrent.atomic.AtomicBoolean access$000(org.apache.bookkeeper.bookie.BookieStateManager);
    Code:
       0: aload_0
       1: getfield      #6                  // Field rmRegistered:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: areturn

  static java.util.concurrent.atomic.AtomicBoolean access$100(org.apache.bookkeeper.bookie.BookieStateManager);
    Code:
       0: aload_0
       1: getfield      #5                  // Field forceReadOnly:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: areturn

  static org.apache.bookkeeper.bookie.BookieStatus access$200(org.apache.bookkeeper.bookie.BookieStateManager);
    Code:
       0: aload_0
       1: getfield      #4                  // Field bookieStatus:Lorg/apache/bookkeeper/bookie/BookieStatus;
       4: areturn

  static org.slf4j.Logger access$300();
    Code:
       0: getstatic     #3                  // Field LOG:Lorg/slf4j/Logger;
       3: areturn

  static org.apache.bookkeeper.bookie.StateManager$ShutdownHandler access$400(org.apache.bookkeeper.bookie.BookieStateManager);
    Code:
       0: aload_0
       1: getfield      #2                  // Field shutdownHandler:Lorg/apache/bookkeeper/bookie/StateManager$ShutdownHandler;
       4: areturn

  static {};
    Code:
       0: ldc           #97                 // class org/apache/bookkeeper/bookie/BookieStateManager
       2: invokestatic  #98                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #54                 // Field log:Lorg/slf4j/Logger;
       8: ldc           #97                 // class org/apache/bookkeeper/bookie/BookieStateManager
      10: invokestatic  #98                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
      13: putstatic     #3                  // Field LOG:Lorg/slf4j/Logger;
      16: return
}
