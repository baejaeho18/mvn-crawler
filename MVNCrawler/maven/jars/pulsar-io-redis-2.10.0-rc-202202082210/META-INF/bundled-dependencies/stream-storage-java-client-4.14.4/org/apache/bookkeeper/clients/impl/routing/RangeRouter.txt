Compiled from "RangeRouter.java"
public class org.apache.bookkeeper.clients.impl.routing.RangeRouter<K> {
  private static final org.slf4j.Logger log;

  private final org.apache.bookkeeper.common.router.HashRouter<K> keyRouter;

  private final java.util.concurrent.locks.StampedLock lock;

  private org.apache.bookkeeper.clients.impl.internal.api.HashStreamRanges ranges;

  public org.apache.bookkeeper.clients.impl.routing.RangeRouter(org.apache.bookkeeper.common.router.HashRouter<K>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field keyRouter:Lorg/apache/bookkeeper/common/router/HashRouter;
       9: aload_0
      10: new           #3                  // class java/util/concurrent/locks/StampedLock
      13: dup
      14: invokespecial #4                  // Method java/util/concurrent/locks/StampedLock."<init>":()V
      17: putfield      #5                  // Field lock:Ljava/util/concurrent/locks/StampedLock;
      20: return

  public long getRange(K);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #6                  // Method getRangeProperties:(Ljava/lang/Object;)Lorg/apache/bookkeeper/stream/proto/RangeProperties;
       5: invokevirtual #7                  // Method org/apache/bookkeeper/stream/proto/RangeProperties.getRangeId:()J
       8: lreturn

  public org.apache.bookkeeper.stream.proto.RangeProperties getRangeProperties(K);
    Code:
       0: aconst_null
       1: aload_1
       2: if_acmpeq     25
       5: aload_0
       6: getfield      #2                  // Field keyRouter:Lorg/apache/bookkeeper/common/router/HashRouter;
       9: aload_1
      10: invokeinterface #8,  2            // InterfaceMethod org/apache/bookkeeper/common/router/HashRouter.getRoutingKey:(Ljava/lang/Object;)Ljava/lang/Object;
      15: checkcast     #9                  // class java/lang/Long
      18: invokevirtual #10                 // Method java/lang/Long.longValue:()J
      21: lstore_2
      22: goto          32
      25: invokestatic  #11                 // Method java/util/concurrent/ThreadLocalRandom.current:()Ljava/util/concurrent/ThreadLocalRandom;
      28: invokevirtual #12                 // Method java/util/concurrent/ThreadLocalRandom.nextLong:()J
      31: lstore_2
      32: aload_0
      33: getfield      #5                  // Field lock:Ljava/util/concurrent/locks/StampedLock;
      36: invokevirtual #13                 // Method java/util/concurrent/locks/StampedLock.tryOptimisticRead:()J
      39: lstore        5
      41: aload_0
      42: getfield      #14                 // Field ranges:Lorg/apache/bookkeeper/clients/impl/internal/api/HashStreamRanges;
      45: astore        4
      47: aload_0
      48: getfield      #5                  // Field lock:Ljava/util/concurrent/locks/StampedLock;
      51: lload         5
      53: invokevirtual #15                 // Method java/util/concurrent/locks/StampedLock.validate:(J)Z
      56: ifne          100
      59: aload_0
      60: getfield      #5                  // Field lock:Ljava/util/concurrent/locks/StampedLock;
      63: invokevirtual #16                 // Method java/util/concurrent/locks/StampedLock.readLock:()J
      66: lstore        5
      68: aload_0
      69: getfield      #14                 // Field ranges:Lorg/apache/bookkeeper/clients/impl/internal/api/HashStreamRanges;
      72: astore        4
      74: aload_0
      75: getfield      #5                  // Field lock:Ljava/util/concurrent/locks/StampedLock;
      78: lload         5
      80: invokevirtual #17                 // Method java/util/concurrent/locks/StampedLock.unlockRead:(J)V
      83: goto          100
      86: astore        7
      88: aload_0
      89: getfield      #5                  // Field lock:Ljava/util/concurrent/locks/StampedLock;
      92: lload         5
      94: invokevirtual #17                 // Method java/util/concurrent/locks/StampedLock.unlockRead:(J)V
      97: aload         7
      99: athrow
     100: aconst_null
     101: aload         4
     103: if_acmpeq     110
     106: iconst_1
     107: goto          111
     110: iconst_0
     111: ldc           #18                 // String No range is available
     113: invokestatic  #19                 // Method com/google/common/base/Preconditions.checkState:(ZLjava/lang/Object;)V
     116: aload         4
     118: invokevirtual #20                 // Method org/apache/bookkeeper/clients/impl/internal/api/HashStreamRanges.getRanges:()Ljava/util/NavigableMap;
     121: lload_2
     122: invokestatic  #21                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     125: invokeinterface #22,  2           // InterfaceMethod java/util/NavigableMap.floorEntry:(Ljava/lang/Object;)Ljava/util/Map$Entry;
     130: astore        7
     132: aload         7
     134: invokeinterface #23,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
     139: checkcast     #24                 // class org/apache/bookkeeper/stream/proto/RangeProperties
     142: areturn
    Exception table:
       from    to  target type
          68    74    86   any
          86    88    86   any

  public org.apache.bookkeeper.clients.impl.internal.api.HashStreamRanges getRanges();
    Code:
       0: aload_0
       1: getfield      #5                  // Field lock:Ljava/util/concurrent/locks/StampedLock;
       4: invokevirtual #13                 // Method java/util/concurrent/locks/StampedLock.tryOptimisticRead:()J
       7: lstore_2
       8: aload_0
       9: getfield      #14                 // Field ranges:Lorg/apache/bookkeeper/clients/impl/internal/api/HashStreamRanges;
      12: astore_1
      13: aload_0
      14: getfield      #5                  // Field lock:Ljava/util/concurrent/locks/StampedLock;
      17: lload_2
      18: invokevirtual #15                 // Method java/util/concurrent/locks/StampedLock.validate:(J)Z
      21: ifne          61
      24: aload_0
      25: getfield      #5                  // Field lock:Ljava/util/concurrent/locks/StampedLock;
      28: invokevirtual #16                 // Method java/util/concurrent/locks/StampedLock.readLock:()J
      31: lstore_2
      32: aload_0
      33: getfield      #14                 // Field ranges:Lorg/apache/bookkeeper/clients/impl/internal/api/HashStreamRanges;
      36: astore_1
      37: aload_0
      38: getfield      #5                  // Field lock:Ljava/util/concurrent/locks/StampedLock;
      41: lload_2
      42: invokevirtual #17                 // Method java/util/concurrent/locks/StampedLock.unlockRead:(J)V
      45: goto          61
      48: astore        4
      50: aload_0
      51: getfield      #5                  // Field lock:Ljava/util/concurrent/locks/StampedLock;
      54: lload_2
      55: invokevirtual #17                 // Method java/util/concurrent/locks/StampedLock.unlockRead:(J)V
      58: aload         4
      60: athrow
      61: aload_1
      62: areturn
    Exception table:
       from    to  target type
          32    37    48   any
          48    50    48   any

  public org.apache.bookkeeper.clients.impl.internal.api.HashStreamRanges setRanges(org.apache.bookkeeper.clients.impl.internal.api.HashStreamRanges);
    Code:
       0: aload_0
       1: getfield      #5                  // Field lock:Ljava/util/concurrent/locks/StampedLock;
       4: invokevirtual #25                 // Method java/util/concurrent/locks/StampedLock.writeLock:()J
       7: lstore_2
       8: aload_0
       9: getfield      #14                 // Field ranges:Lorg/apache/bookkeeper/clients/impl/internal/api/HashStreamRanges;
      12: ifnull        30
      15: aload_1
      16: invokevirtual #26                 // Method org/apache/bookkeeper/clients/impl/internal/api/HashStreamRanges.getMaxRangeId:()J
      19: aload_0
      20: getfield      #14                 // Field ranges:Lorg/apache/bookkeeper/clients/impl/internal/api/HashStreamRanges;
      23: invokevirtual #26                 // Method org/apache/bookkeeper/clients/impl/internal/api/HashStreamRanges.getMaxRangeId:()J
      26: lcmp
      27: ifle          56
      30: aload_0
      31: getfield      #14                 // Field ranges:Lorg/apache/bookkeeper/clients/impl/internal/api/HashStreamRanges;
      34: astore        4
      36: aload_0
      37: aload_1
      38: putfield      #14                 // Field ranges:Lorg/apache/bookkeeper/clients/impl/internal/api/HashStreamRanges;
      41: aload         4
      43: astore        5
      45: aload_0
      46: getfield      #5                  // Field lock:Ljava/util/concurrent/locks/StampedLock;
      49: lload_2
      50: invokevirtual #27                 // Method java/util/concurrent/locks/StampedLock.unlockWrite:(J)V
      53: aload         5
      55: areturn
      56: aconst_null
      57: astore        4
      59: aload_0
      60: getfield      #5                  // Field lock:Ljava/util/concurrent/locks/StampedLock;
      63: lload_2
      64: invokevirtual #27                 // Method java/util/concurrent/locks/StampedLock.unlockWrite:(J)V
      67: aload         4
      69: areturn
      70: astore        6
      72: aload_0
      73: getfield      #5                  // Field lock:Ljava/util/concurrent/locks/StampedLock;
      76: lload_2
      77: invokevirtual #27                 // Method java/util/concurrent/locks/StampedLock.unlockWrite:(J)V
      80: aload         6
      82: athrow
    Exception table:
       from    to  target type
           8    45    70   any
          56    59    70   any
          70    72    70   any

  static {};
    Code:
       0: ldc           #28                 // class org/apache/bookkeeper/clients/impl/routing/RangeRouter
       2: invokestatic  #29                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #30                 // Field log:Lorg/slf4j/Logger;
       8: return
}
