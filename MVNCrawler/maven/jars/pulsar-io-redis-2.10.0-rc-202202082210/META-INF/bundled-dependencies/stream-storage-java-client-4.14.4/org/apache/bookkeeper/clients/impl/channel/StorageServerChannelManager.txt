Compiled from "StorageServerChannelManager.java"
public class org.apache.bookkeeper.clients.impl.channel.StorageServerChannelManager implements java.lang.AutoCloseable {
  private static final org.slf4j.Logger log;

  private final java.util.concurrent.locks.ReentrantReadWriteLock lock;

  private boolean closed;

  private final java.util.concurrent.ConcurrentMap<org.apache.bookkeeper.stream.proto.common.Endpoint, org.apache.bookkeeper.clients.impl.channel.StorageServerChannel> channels;

  private final java.util.function.Function<org.apache.bookkeeper.stream.proto.common.Endpoint, org.apache.bookkeeper.clients.impl.channel.StorageServerChannel> channelFactory;

  public org.apache.bookkeeper.clients.impl.channel.StorageServerChannelManager(org.apache.bookkeeper.clients.config.StorageClientSettings);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1                  // Method org/apache/bookkeeper/clients/impl/channel/StorageServerChannel.factory:(Lorg/apache/bookkeeper/clients/config/StorageClientSettings;)Ljava/util/function/Function;
       5: invokespecial #2                  // Method "<init>":(Ljava/util/function/Function;)V
       8: return

  public org.apache.bookkeeper.clients.impl.channel.StorageServerChannelManager(java.util.function.Function<org.apache.bookkeeper.stream.proto.common.Endpoint, org.apache.bookkeeper.clients.impl.channel.StorageServerChannel>);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #4                  // Field closed:Z
       9: aload_0
      10: new           #5                  // class java/util/concurrent/ConcurrentHashMap
      13: dup
      14: invokespecial #6                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      17: putfield      #7                  // Field channels:Ljava/util/concurrent/ConcurrentMap;
      20: aload_0
      21: new           #8                  // class java/util/concurrent/locks/ReentrantReadWriteLock
      24: dup
      25: invokespecial #9                  // Method java/util/concurrent/locks/ReentrantReadWriteLock."<init>":()V
      28: putfield      #10                 // Field lock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
      31: aload_0
      32: aload_1
      33: putfield      #11                 // Field channelFactory:Ljava/util/function/Function;
      36: return

  int getNumChannels();
    Code:
       0: aload_0
       1: getfield      #7                  // Field channels:Ljava/util/concurrent/ConcurrentMap;
       4: invokeinterface #12,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.size:()I
       9: ireturn

  boolean contains(org.apache.bookkeeper.stream.proto.common.Endpoint);
    Code:
       0: aload_0
       1: getfield      #10                 // Field lock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
       4: invokevirtual #13                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
       7: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock:()V
      10: aload_0
      11: getfield      #7                  // Field channels:Ljava/util/concurrent/ConcurrentMap;
      14: aload_1
      15: invokeinterface #15,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.containsKey:(Ljava/lang/Object;)Z
      20: istore_2
      21: aload_0
      22: getfield      #10                 // Field lock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
      25: invokevirtual #13                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
      28: invokevirtual #16                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock:()V
      31: iload_2
      32: ireturn
      33: astore_3
      34: aload_0
      35: getfield      #10                 // Field lock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
      38: invokevirtual #13                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
      41: invokevirtual #16                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock:()V
      44: aload_3
      45: athrow
    Exception table:
       from    to  target type
          10    21    33   any

  public boolean addStorageServer(org.apache.bookkeeper.stream.proto.common.Endpoint, org.apache.bookkeeper.clients.impl.channel.StorageServerChannel);
    Code:
       0: aload_0
       1: getfield      #10                 // Field lock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
       4: invokevirtual #13                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
       7: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock:()V
      10: aload_0
      11: getfield      #4                  // Field closed:Z
      14: ifeq          47
      17: getstatic     #17                 // Field log:Lorg/slf4j/Logger;
      20: ldc           #18                 // String Skip adding channel {} of range server {} since the channel manager is already closed
      22: aload_2
      23: aload_1
      24: invokeinterface #19,  4           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      29: aload_2
      30: invokevirtual #20                 // Method org/apache/bookkeeper/clients/impl/channel/StorageServerChannel.close:()V
      33: iconst_0
      34: istore_3
      35: aload_0
      36: getfield      #10                 // Field lock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
      39: invokevirtual #13                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
      42: invokevirtual #16                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock:()V
      45: iload_3
      46: ireturn
      47: aload_0
      48: getfield      #7                  // Field channels:Ljava/util/concurrent/ConcurrentMap;
      51: aload_1
      52: aload_2
      53: invokeinterface #21,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      58: checkcast     #22                 // class org/apache/bookkeeper/clients/impl/channel/StorageServerChannel
      61: astore_3
      62: aconst_null
      63: aload_3
      64: if_acmpeq     97
      67: getstatic     #17                 // Field log:Lorg/slf4j/Logger;
      70: ldc           #23                 // String KeyRange server ({}) already existed in the channel manager.
      72: invokeinterface #24,  2           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
      77: aload_2
      78: invokevirtual #20                 // Method org/apache/bookkeeper/clients/impl/channel/StorageServerChannel.close:()V
      81: iconst_0
      82: istore        4
      84: aload_0
      85: getfield      #10                 // Field lock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
      88: invokevirtual #13                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
      91: invokevirtual #16                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock:()V
      94: iload         4
      96: ireturn
      97: getstatic     #17                 // Field log:Lorg/slf4j/Logger;
     100: ldc           #25                 // String Added range server ({}) into the channel manager.
     102: aload_1
     103: invokeinterface #26,  3           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;Ljava/lang/Object;)V
     108: iconst_1
     109: istore        4
     111: aload_0
     112: getfield      #10                 // Field lock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
     115: invokevirtual #13                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
     118: invokevirtual #16                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock:()V
     121: iload         4
     123: ireturn
     124: astore        5
     126: aload_0
     127: getfield      #10                 // Field lock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
     130: invokevirtual #13                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
     133: invokevirtual #16                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock:()V
     136: aload         5
     138: athrow
    Exception table:
       from    to  target type
          10    35   124   any
          47    84   124   any
          97   111   124   any
         124   126   124   any

  public org.apache.bookkeeper.clients.impl.channel.StorageServerChannel getOrCreateChannel(org.apache.bookkeeper.stream.proto.common.Endpoint);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #27                 // Method getChannel:(Lorg/apache/bookkeeper/stream/proto/common/Endpoint;)Lorg/apache/bookkeeper/clients/impl/channel/StorageServerChannel;
       5: astore_2
       6: aconst_null
       7: aload_2
       8: if_acmpeq     13
      11: aload_2
      12: areturn
      13: aload_0
      14: getfield      #11                 // Field channelFactory:Ljava/util/function/Function;
      17: aload_1
      18: invokeinterface #28,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      23: checkcast     #22                 // class org/apache/bookkeeper/clients/impl/channel/StorageServerChannel
      26: astore_3
      27: aload_0
      28: aload_1
      29: aload_3
      30: invokevirtual #29                 // Method addStorageServer:(Lorg/apache/bookkeeper/stream/proto/common/Endpoint;Lorg/apache/bookkeeper/clients/impl/channel/StorageServerChannel;)Z
      33: pop
      34: aload_0
      35: aload_1
      36: invokevirtual #27                 // Method getChannel:(Lorg/apache/bookkeeper/stream/proto/common/Endpoint;)Lorg/apache/bookkeeper/clients/impl/channel/StorageServerChannel;
      39: areturn

  public org.apache.bookkeeper.clients.impl.channel.StorageServerChannel getChannel(org.apache.bookkeeper.stream.proto.common.Endpoint);
    Code:
       0: aload_0
       1: getfield      #10                 // Field lock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
       4: invokevirtual #13                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
       7: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock:()V
      10: aload_0
      11: getfield      #7                  // Field channels:Ljava/util/concurrent/ConcurrentMap;
      14: aload_1
      15: invokeinterface #30,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      20: checkcast     #22                 // class org/apache/bookkeeper/clients/impl/channel/StorageServerChannel
      23: astore_2
      24: aload_0
      25: getfield      #10                 // Field lock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
      28: invokevirtual #13                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
      31: invokevirtual #16                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock:()V
      34: aload_2
      35: areturn
      36: astore_3
      37: aload_0
      38: getfield      #10                 // Field lock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
      41: invokevirtual #13                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
      44: invokevirtual #16                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock:()V
      47: aload_3
      48: athrow
    Exception table:
       from    to  target type
          10    24    36   any

  public org.apache.bookkeeper.clients.impl.channel.StorageServerChannel removeChannel(org.apache.bookkeeper.stream.proto.common.Endpoint, org.apache.bookkeeper.clients.impl.channel.StorageServerChannel);
    Code:
       0: aload_0
       1: getfield      #10                 // Field lock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
       4: invokevirtual #13                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
       7: invokevirtual #14                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock:()V
      10: aload_0
      11: getfield      #4                  // Field closed:Z
      14: ifeq          43
      17: getstatic     #17                 // Field log:Lorg/slf4j/Logger;
      20: ldc           #31                 // String Skip removing channel {} of range server {} since the channel manager is already closed
      22: aload_2
      23: aload_1
      24: invokeinterface #19,  4           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      29: aconst_null
      30: astore_3
      31: aload_0
      32: getfield      #10                 // Field lock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
      35: invokevirtual #13                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
      38: invokevirtual #16                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock:()V
      41: aload_3
      42: areturn
      43: aconst_null
      44: aload_2
      45: if_acmpne     65
      48: aload_0
      49: getfield      #7                  // Field channels:Ljava/util/concurrent/ConcurrentMap;
      52: aload_1
      53: invokeinterface #32,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      58: checkcast     #22                 // class org/apache/bookkeeper/clients/impl/channel/StorageServerChannel
      61: astore_3
      62: goto          86
      65: aload_0
      66: getfield      #7                  // Field channels:Ljava/util/concurrent/ConcurrentMap;
      69: aload_1
      70: aload_2
      71: invokeinterface #33,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;Ljava/lang/Object;)Z
      76: ifeq          84
      79: aload_2
      80: astore_3
      81: goto          86
      84: aconst_null
      85: astore_3
      86: aconst_null
      87: aload_3
      88: if_acmpne     104
      91: getstatic     #17                 // Field log:Lorg/slf4j/Logger;
      94: ldc           #34                 // String No channel associated with endpoint {} to be removed.
      96: invokeinterface #24,  2           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
     101: goto          116
     104: getstatic     #17                 // Field log:Lorg/slf4j/Logger;
     107: ldc           #35                 // String Removed channel {} for range server {} successfully
     109: aload_3
     110: aload_1
     111: invokeinterface #36,  4           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
     116: aconst_null
     117: aload_3
     118: if_acmpeq     125
     121: aload_3
     122: invokevirtual #20                 // Method org/apache/bookkeeper/clients/impl/channel/StorageServerChannel.close:()V
     125: aload_3
     126: astore        4
     128: aload_0
     129: getfield      #10                 // Field lock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
     132: invokevirtual #13                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
     135: invokevirtual #16                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock:()V
     138: aload         4
     140: areturn
     141: astore        5
     143: aload_0
     144: getfield      #10                 // Field lock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
     147: invokevirtual #13                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.readLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;
     150: invokevirtual #16                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock:()V
     153: aload         5
     155: athrow
    Exception table:
       from    to  target type
          10    31   141   any
          43   128   141   any
         141   143   141   any

  public void close();
    Code:
       0: aload_0
       1: getfield      #10                 // Field lock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
       4: invokevirtual #37                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.writeLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;
       7: invokevirtual #38                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.lock:()V
      10: aload_0
      11: getfield      #4                  // Field closed:Z
      14: ifeq          28
      17: aload_0
      18: getfield      #10                 // Field lock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
      21: invokevirtual #37                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.writeLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;
      24: invokevirtual #39                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.unlock:()V
      27: return
      28: aload_0
      29: iconst_1
      30: putfield      #4                  // Field closed:Z
      33: aload_0
      34: getfield      #10                 // Field lock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
      37: invokevirtual #37                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.writeLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;
      40: invokevirtual #39                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.unlock:()V
      43: goto          59
      46: astore_1
      47: aload_0
      48: getfield      #10                 // Field lock:Ljava/util/concurrent/locks/ReentrantReadWriteLock;
      51: invokevirtual #37                 // Method java/util/concurrent/locks/ReentrantReadWriteLock.writeLock:()Ljava/util/concurrent/locks/ReentrantReadWriteLock$WriteLock;
      54: invokevirtual #39                 // Method java/util/concurrent/locks/ReentrantReadWriteLock$WriteLock.unlock:()V
      57: aload_1
      58: athrow
      59: aload_0
      60: getfield      #7                  // Field channels:Ljava/util/concurrent/ConcurrentMap;
      63: invokeinterface #40,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.values:()Ljava/util/Collection;
      68: invokedynamic #41,  0             // InvokeDynamic #0:accept:()Ljava/util/function/Consumer;
      73: invokeinterface #42,  2           // InterfaceMethod java/util/Collection.forEach:(Ljava/util/function/Consumer;)V
      78: aload_0
      79: getfield      #7                  // Field channels:Ljava/util/concurrent/ConcurrentMap;
      82: invokeinterface #43,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.clear:()V
      87: return
    Exception table:
       from    to  target type
          10    17    46   any
          28    33    46   any

  static {};
    Code:
       0: ldc           #44                 // class org/apache/bookkeeper/clients/impl/channel/StorageServerChannelManager
       2: invokestatic  #45                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #17                 // Field log:Lorg/slf4j/Logger;
       8: return
}
