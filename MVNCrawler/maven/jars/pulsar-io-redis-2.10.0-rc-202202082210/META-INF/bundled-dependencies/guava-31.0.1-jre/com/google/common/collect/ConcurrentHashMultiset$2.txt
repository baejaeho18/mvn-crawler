Compiled from "ConcurrentHashMultiset.java"
class com.google.common.collect.ConcurrentHashMultiset$2 extends com.google.common.collect.AbstractIterator<com.google.common.collect.Multiset$Entry<E>> {
  private final java.util.Iterator<java.util.Map$Entry<E, java.util.concurrent.atomic.AtomicInteger>> mapEntries;

  final com.google.common.collect.ConcurrentHashMultiset this$0;

  com.google.common.collect.ConcurrentHashMultiset$2(com.google.common.collect.ConcurrentHashMultiset);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lcom/google/common/collect/ConcurrentHashMultiset;
       5: aload_0
       6: invokespecial #2                  // Method com/google/common/collect/AbstractIterator."<init>":()V
       9: aload_0
      10: aload_0
      11: getfield      #1                  // Field this$0:Lcom/google/common/collect/ConcurrentHashMultiset;
      14: invokestatic  #3                  // Method com/google/common/collect/ConcurrentHashMultiset.access$100:(Lcom/google/common/collect/ConcurrentHashMultiset;)Ljava/util/concurrent/ConcurrentMap;
      17: invokeinterface #4,  1            // InterfaceMethod java/util/concurrent/ConcurrentMap.entrySet:()Ljava/util/Set;
      22: invokeinterface #5,  1            // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      27: putfield      #6                  // Field mapEntries:Ljava/util/Iterator;
      30: return

  protected com.google.common.collect.Multiset$Entry<E> computeNext();
    Code:
       0: aload_0
       1: getfield      #6                  // Field mapEntries:Ljava/util/Iterator;
       4: invokeinterface #7,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
       9: ifne          20
      12: aload_0
      13: invokevirtual #8                  // Method endOfData:()Ljava/lang/Object;
      16: checkcast     #9                  // class com/google/common/collect/Multiset$Entry
      19: areturn
      20: aload_0
      21: getfield      #6                  // Field mapEntries:Ljava/util/Iterator;
      24: invokeinterface #10,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      29: checkcast     #11                 // class java/util/Map$Entry
      32: astore_1
      33: aload_1
      34: invokeinterface #12,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      39: checkcast     #13                 // class java/util/concurrent/atomic/AtomicInteger
      42: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      45: istore_2
      46: iload_2
      47: ifeq          61
      50: aload_1
      51: invokeinterface #15,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      56: iload_2
      57: invokestatic  #16                 // Method com/google/common/collect/Multisets.immutableEntry:(Ljava/lang/Object;I)Lcom/google/common/collect/Multiset$Entry;
      60: areturn
      61: goto          0

  protected java.lang.Object computeNext();
    Code:
       0: aload_0
       1: invokevirtual #17                 // Method computeNext:()Lcom/google/common/collect/Multiset$Entry;
       4: areturn
}
