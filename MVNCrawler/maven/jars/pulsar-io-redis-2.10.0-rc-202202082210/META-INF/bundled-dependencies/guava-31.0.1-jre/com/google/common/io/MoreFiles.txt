Compiled from "MoreFiles.java"
public final class com.google.common.io.MoreFiles {
  private static final com.google.common.graph.SuccessorsFunction<java.nio.file.Path> FILE_TREE;

  private com.google.common.io.MoreFiles();
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: return

  public static com.google.common.io.ByteSource asByteSource(java.nio.file.Path, java.nio.file.OpenOption...);
    Code:
       0: new           #3                  // class com/google/common/io/MoreFiles$PathByteSource
       3: dup
       4: aload_0
       5: aload_1
       6: aconst_null
       7: invokespecial #4                  // Method com/google/common/io/MoreFiles$PathByteSource."<init>":(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;Lcom/google/common/io/MoreFiles$1;)V
      10: areturn

  public static com.google.common.io.ByteSink asByteSink(java.nio.file.Path, java.nio.file.OpenOption...);
    Code:
       0: new           #5                  // class com/google/common/io/MoreFiles$PathByteSink
       3: dup
       4: aload_0
       5: aload_1
       6: aconst_null
       7: invokespecial #6                  // Method com/google/common/io/MoreFiles$PathByteSink."<init>":(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;Lcom/google/common/io/MoreFiles$1;)V
      10: areturn

  public static com.google.common.io.CharSource asCharSource(java.nio.file.Path, java.nio.charset.Charset, java.nio.file.OpenOption...);
    Code:
       0: aload_0
       1: aload_2
       2: invokestatic  #7                  // Method asByteSource:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Lcom/google/common/io/ByteSource;
       5: aload_1
       6: invokevirtual #8                  // Method com/google/common/io/ByteSource.asCharSource:(Ljava/nio/charset/Charset;)Lcom/google/common/io/CharSource;
       9: areturn

  public static com.google.common.io.CharSink asCharSink(java.nio.file.Path, java.nio.charset.Charset, java.nio.file.OpenOption...);
    Code:
       0: aload_0
       1: aload_2
       2: invokestatic  #9                  // Method asByteSink:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Lcom/google/common/io/ByteSink;
       5: aload_1
       6: invokevirtual #10                 // Method com/google/common/io/ByteSink.asCharSink:(Ljava/nio/charset/Charset;)Lcom/google/common/io/CharSink;
       9: areturn

  public static com.google.common.collect.ImmutableList<java.nio.file.Path> listFiles(java.nio.file.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokestatic  #11                 // Method java/nio/file/Files.newDirectoryStream:(Ljava/nio/file/Path;)Ljava/nio/file/DirectoryStream;
       4: astore_1
       5: aload_1
       6: invokestatic  #12                 // Method com/google/common/collect/ImmutableList.copyOf:(Ljava/lang/Iterable;)Lcom/google/common/collect/ImmutableList;
       9: astore_2
      10: aload_1
      11: ifnull        20
      14: aload_1
      15: invokeinterface #13,  1           // InterfaceMethod java/nio/file/DirectoryStream.close:()V
      20: aload_2
      21: areturn
      22: astore_2
      23: aload_1
      24: ifnull        42
      27: aload_1
      28: invokeinterface #13,  1           // InterfaceMethod java/nio/file/DirectoryStream.close:()V
      33: goto          42
      36: astore_3
      37: aload_2
      38: aload_3
      39: invokevirtual #15                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
      42: aload_2
      43: athrow
      44: astore_1
      45: aload_1
      46: invokevirtual #17                 // Method java/nio/file/DirectoryIteratorException.getCause:()Ljava/io/IOException;
      49: athrow
    Exception table:
       from    to  target type
           5    10    22   Class java/lang/Throwable
          27    33    36   Class java/lang/Throwable
           0    20    44   Class java/nio/file/DirectoryIteratorException
          22    44    44   Class java/nio/file/DirectoryIteratorException

  public static com.google.common.graph.Traverser<java.nio.file.Path> fileTraverser();
    Code:
       0: getstatic     #18                 // Field FILE_TREE:Lcom/google/common/graph/SuccessorsFunction;
       3: invokestatic  #19                 // Method com/google/common/graph/Traverser.forTree:(Lcom/google/common/graph/SuccessorsFunction;)Lcom/google/common/graph/Traverser;
       6: areturn

  private static java.lang.Iterable<java.nio.file.Path> fileTreeChildren(java.nio.file.Path);
    Code:
       0: aload_0
       1: iconst_1
       2: anewarray     #20                 // class java/nio/file/LinkOption
       5: dup
       6: iconst_0
       7: getstatic     #21                 // Field java/nio/file/LinkOption.NOFOLLOW_LINKS:Ljava/nio/file/LinkOption;
      10: aastore
      11: invokestatic  #22                 // Method java/nio/file/Files.isDirectory:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z
      14: ifeq          32
      17: aload_0
      18: invokestatic  #23                 // Method listFiles:(Ljava/nio/file/Path;)Lcom/google/common/collect/ImmutableList;
      21: areturn
      22: astore_1
      23: new           #16                 // class java/nio/file/DirectoryIteratorException
      26: dup
      27: aload_1
      28: invokespecial #25                 // Method java/nio/file/DirectoryIteratorException."<init>":(Ljava/io/IOException;)V
      31: athrow
      32: invokestatic  #26                 // Method com/google/common/collect/ImmutableList.of:()Lcom/google/common/collect/ImmutableList;
      35: areturn
    Exception table:
       from    to  target type
          17    21    22   Class java/io/IOException

  public static com.google.common.base.Predicate<java.nio.file.Path> isDirectory(java.nio.file.LinkOption...);
    Code:
       0: aload_0
       1: invokevirtual #27                 // Method "[Ljava/nio/file/LinkOption;".clone:()Ljava/lang/Object;
       4: checkcast     #28                 // class "[Ljava/nio/file/LinkOption;"
       7: astore_1
       8: new           #29                 // class com/google/common/io/MoreFiles$2
      11: dup
      12: aload_1
      13: invokespecial #30                 // Method com/google/common/io/MoreFiles$2."<init>":([Ljava/nio/file/LinkOption;)V
      16: areturn

  private static boolean isDirectory(java.nio.file.SecureDirectoryStream<java.nio.file.Path>, java.nio.file.Path, java.nio.file.LinkOption...) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: ldc           #31                 // class java/nio/file/attribute/BasicFileAttributeView
       4: aload_2
       5: invokeinterface #32,  4           // InterfaceMethod java/nio/file/SecureDirectoryStream.getFileAttributeView:(Ljava/lang/Object;Ljava/lang/Class;[Ljava/nio/file/LinkOption;)Ljava/nio/file/attribute/FileAttributeView;
      10: checkcast     #31                 // class java/nio/file/attribute/BasicFileAttributeView
      13: invokeinterface #33,  1           // InterfaceMethod java/nio/file/attribute/BasicFileAttributeView.readAttributes:()Ljava/nio/file/attribute/BasicFileAttributes;
      18: invokeinterface #34,  1           // InterfaceMethod java/nio/file/attribute/BasicFileAttributes.isDirectory:()Z
      23: ireturn

  public static com.google.common.base.Predicate<java.nio.file.Path> isRegularFile(java.nio.file.LinkOption...);
    Code:
       0: aload_0
       1: invokevirtual #35                 // Method "[Ljava/nio/file/LinkOption;".clone:()Ljava/lang/Object;
       4: checkcast     #28                 // class "[Ljava/nio/file/LinkOption;"
       7: astore_1
       8: new           #36                 // class com/google/common/io/MoreFiles$3
      11: dup
      12: aload_1
      13: invokespecial #37                 // Method com/google/common/io/MoreFiles$3."<init>":([Ljava/nio/file/LinkOption;)V
      16: areturn

  public static boolean equal(java.nio.file.Path, java.nio.file.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokestatic  #38                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_1
       6: invokestatic  #38                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       9: pop
      10: aload_0
      11: aload_1
      12: invokestatic  #39                 // Method java/nio/file/Files.isSameFile:(Ljava/nio/file/Path;Ljava/nio/file/Path;)Z
      15: ifeq          20
      18: iconst_1
      19: ireturn
      20: aload_0
      21: iconst_0
      22: anewarray     #40                 // class java/nio/file/OpenOption
      25: invokestatic  #7                  // Method asByteSource:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Lcom/google/common/io/ByteSource;
      28: astore_2
      29: aload_1
      30: iconst_0
      31: anewarray     #40                 // class java/nio/file/OpenOption
      34: invokestatic  #7                  // Method asByteSource:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Lcom/google/common/io/ByteSource;
      37: astore_3
      38: aload_2
      39: invokevirtual #41                 // Method com/google/common/io/ByteSource.sizeIfKnown:()Lcom/google/common/base/Optional;
      42: lconst_0
      43: invokestatic  #42                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      46: invokevirtual #43                 // Method com/google/common/base/Optional.or:(Ljava/lang/Object;)Ljava/lang/Object;
      49: checkcast     #44                 // class java/lang/Long
      52: invokevirtual #45                 // Method java/lang/Long.longValue:()J
      55: lstore        4
      57: aload_3
      58: invokevirtual #41                 // Method com/google/common/io/ByteSource.sizeIfKnown:()Lcom/google/common/base/Optional;
      61: lconst_0
      62: invokestatic  #42                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      65: invokevirtual #43                 // Method com/google/common/base/Optional.or:(Ljava/lang/Object;)Ljava/lang/Object;
      68: checkcast     #44                 // class java/lang/Long
      71: invokevirtual #45                 // Method java/lang/Long.longValue:()J
      74: lstore        6
      76: lload         4
      78: lconst_0
      79: lcmp
      80: ifeq          100
      83: lload         6
      85: lconst_0
      86: lcmp
      87: ifeq          100
      90: lload         4
      92: lload         6
      94: lcmp
      95: ifeq          100
      98: iconst_0
      99: ireturn
     100: aload_2
     101: aload_3
     102: invokevirtual #46                 // Method com/google/common/io/ByteSource.contentEquals:(Lcom/google/common/io/ByteSource;)Z
     105: ireturn

  public static void touch(java.nio.file.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokestatic  #38                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_0
       6: invokestatic  #47                 // Method java/lang/System.currentTimeMillis:()J
       9: invokestatic  #48                 // Method java/nio/file/attribute/FileTime.fromMillis:(J)Ljava/nio/file/attribute/FileTime;
      12: invokestatic  #49                 // Method java/nio/file/Files.setLastModifiedTime:(Ljava/nio/file/Path;Ljava/nio/file/attribute/FileTime;)Ljava/nio/file/Path;
      15: pop
      16: goto          33
      19: astore_1
      20: aload_0
      21: iconst_0
      22: anewarray     #51                 // class java/nio/file/attribute/FileAttribute
      25: invokestatic  #52                 // Method java/nio/file/Files.createFile:(Ljava/nio/file/Path;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path;
      28: pop
      29: goto          33
      32: astore_2
      33: return
    Exception table:
       from    to  target type
           5    16    19   Class java/nio/file/NoSuchFileException
          20    29    32   Class java/nio/file/FileAlreadyExistsException

  public static void createParentDirectories(java.nio.file.Path, java.nio.file.attribute.FileAttribute<?>...) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokeinterface #54,  1           // InterfaceMethod java/nio/file/Path.toAbsolutePath:()Ljava/nio/file/Path;
       6: invokeinterface #55,  1           // InterfaceMethod java/nio/file/Path.normalize:()Ljava/nio/file/Path;
      11: astore_2
      12: aload_2
      13: invokeinterface #56,  1           // InterfaceMethod java/nio/file/Path.getParent:()Ljava/nio/file/Path;
      18: astore_3
      19: aload_3
      20: ifnonnull     24
      23: return
      24: aload_3
      25: iconst_0
      26: anewarray     #20                 // class java/nio/file/LinkOption
      29: invokestatic  #22                 // Method java/nio/file/Files.isDirectory:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z
      32: ifne          98
      35: aload_3
      36: aload_1
      37: invokestatic  #57                 // Method java/nio/file/Files.createDirectories:(Ljava/nio/file/Path;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path;
      40: pop
      41: aload_3
      42: iconst_0
      43: anewarray     #20                 // class java/nio/file/LinkOption
      46: invokestatic  #22                 // Method java/nio/file/Files.isDirectory:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z
      49: ifne          98
      52: new           #24                 // class java/io/IOException
      55: dup
      56: aload_0
      57: invokestatic  #58                 // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
      60: astore        4
      62: bipush        39
      64: aload         4
      66: invokestatic  #58                 // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
      69: invokevirtual #59                 // Method java/lang/String.length:()I
      72: iadd
      73: new           #60                 // class java/lang/StringBuilder
      76: dup_x1
      77: swap
      78: invokespecial #61                 // Method java/lang/StringBuilder."<init>":(I)V
      81: ldc           #62                 // String Unable to create parent directories of
      83: invokevirtual #63                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      86: aload         4
      88: invokevirtual #63                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      91: invokevirtual #64                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      94: invokespecial #65                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      97: athrow
      98: return

  public static java.lang.String getFileExtension(java.nio.file.Path);
    Code:
       0: aload_0
       1: invokeinterface #66,  1           // InterfaceMethod java/nio/file/Path.getFileName:()Ljava/nio/file/Path;
       6: astore_1
       7: aload_1
       8: ifnonnull     14
      11: ldc           #67                 // String
      13: areturn
      14: aload_1
      15: invokeinterface #68,  1           // InterfaceMethod java/nio/file/Path.toString:()Ljava/lang/String;
      20: astore_2
      21: aload_2
      22: bipush        46
      24: invokevirtual #69                 // Method java/lang/String.lastIndexOf:(I)I
      27: istore_3
      28: iload_3
      29: iconst_m1
      30: if_icmpne     38
      33: ldc           #67                 // String
      35: goto          45
      38: aload_2
      39: iload_3
      40: iconst_1
      41: iadd
      42: invokevirtual #70                 // Method java/lang/String.substring:(I)Ljava/lang/String;
      45: areturn

  public static java.lang.String getNameWithoutExtension(java.nio.file.Path);
    Code:
       0: aload_0
       1: invokeinterface #66,  1           // InterfaceMethod java/nio/file/Path.getFileName:()Ljava/nio/file/Path;
       6: astore_1
       7: aload_1
       8: ifnonnull     14
      11: ldc           #67                 // String
      13: areturn
      14: aload_1
      15: invokeinterface #68,  1           // InterfaceMethod java/nio/file/Path.toString:()Ljava/lang/String;
      20: astore_2
      21: aload_2
      22: bipush        46
      24: invokevirtual #69                 // Method java/lang/String.lastIndexOf:(I)I
      27: istore_3
      28: iload_3
      29: iconst_m1
      30: if_icmpne     37
      33: aload_2
      34: goto          43
      37: aload_2
      38: iconst_0
      39: iload_3
      40: invokevirtual #71                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      43: areturn

  public static void deleteRecursively(java.nio.file.Path, com.google.common.io.RecursiveDeleteOption...) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokestatic  #72                 // Method getParentPath:(Ljava/nio/file/Path;)Ljava/nio/file/Path;
       4: astore_2
       5: aload_2
       6: ifnonnull     26
       9: new           #73                 // class java/nio/file/FileSystemException
      12: dup
      13: aload_0
      14: invokeinterface #68,  1           // InterfaceMethod java/nio/file/Path.toString:()Ljava/lang/String;
      19: aconst_null
      20: ldc           #74                 // String can\'t delete recursively
      22: invokespecial #75                 // Method java/nio/file/FileSystemException."<init>":(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
      25: athrow
      26: aconst_null
      27: astore_3
      28: iconst_0
      29: istore        4
      31: aload_2
      32: invokestatic  #11                 // Method java/nio/file/Files.newDirectoryStream:(Ljava/nio/file/Path;)Ljava/nio/file/DirectoryStream;
      35: astore        5
      37: aload         5
      39: instanceof    #76                 // class java/nio/file/SecureDirectoryStream
      42: ifeq          69
      45: iconst_1
      46: istore        4
      48: aload         5
      50: checkcast     #76                 // class java/nio/file/SecureDirectoryStream
      53: aload_0
      54: invokeinterface #66,  1           // InterfaceMethod java/nio/file/Path.getFileName:()Ljava/nio/file/Path;
      59: invokestatic  #77                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
      62: checkcast     #78                 // class java/nio/file/Path
      65: invokestatic  #79                 // Method deleteRecursivelySecure:(Ljava/nio/file/SecureDirectoryStream;Ljava/nio/file/Path;)Ljava/util/Collection;
      68: astore_3
      69: aload         5
      71: ifnull        113
      74: aload         5
      76: invokeinterface #13,  1           // InterfaceMethod java/nio/file/DirectoryStream.close:()V
      81: goto          113
      84: astore        6
      86: aload         5
      88: ifnull        110
      91: aload         5
      93: invokeinterface #13,  1           // InterfaceMethod java/nio/file/DirectoryStream.close:()V
      98: goto          110
     101: astore        7
     103: aload         6
     105: aload         7
     107: invokevirtual #15                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
     110: aload         6
     112: athrow
     113: iload         4
     115: ifne          128
     118: aload_0
     119: aload_1
     120: invokestatic  #80                 // Method checkAllowsInsecure:(Ljava/nio/file/Path;[Lcom/google/common/io/RecursiveDeleteOption;)V
     123: aload_0
     124: invokestatic  #81                 // Method deleteRecursivelyInsecure:(Ljava/nio/file/Path;)Ljava/util/Collection;
     127: astore_3
     128: goto          149
     131: astore        4
     133: aload_3
     134: ifnonnull     140
     137: aload         4
     139: athrow
     140: aload_3
     141: aload         4
     143: invokeinterface #82,  2           // InterfaceMethod java/util/Collection.add:(Ljava/lang/Object;)Z
     148: pop
     149: aload_3
     150: ifnull        158
     153: aload_0
     154: aload_3
     155: invokestatic  #83                 // Method throwDeleteFailed:(Ljava/nio/file/Path;Ljava/util/Collection;)V
     158: return
    Exception table:
       from    to  target type
          37    69    84   Class java/lang/Throwable
          91    98   101   Class java/lang/Throwable
          28   128   131   Class java/io/IOException

  public static void deleteDirectoryContents(java.nio.file.Path, com.google.common.io.RecursiveDeleteOption...) throws java.io.IOException;
    Code:
       0: aconst_null
       1: astore_2
       2: aload_0
       3: invokestatic  #11                 // Method java/nio/file/Files.newDirectoryStream:(Ljava/nio/file/Path;)Ljava/nio/file/DirectoryStream;
       6: astore_3
       7: aload_3
       8: instanceof    #76                 // class java/nio/file/SecureDirectoryStream
      11: ifeq          29
      14: aload_3
      15: checkcast     #76                 // class java/nio/file/SecureDirectoryStream
      18: astore        4
      20: aload         4
      22: invokestatic  #84                 // Method deleteDirectoryContentsSecure:(Ljava/nio/file/SecureDirectoryStream;)Ljava/util/Collection;
      25: astore_2
      26: goto          39
      29: aload_0
      30: aload_1
      31: invokestatic  #80                 // Method checkAllowsInsecure:(Ljava/nio/file/Path;[Lcom/google/common/io/RecursiveDeleteOption;)V
      34: aload_3
      35: invokestatic  #85                 // Method deleteDirectoryContentsInsecure:(Ljava/nio/file/DirectoryStream;)Ljava/util/Collection;
      38: astore_2
      39: aload_3
      40: ifnull        79
      43: aload_3
      44: invokeinterface #13,  1           // InterfaceMethod java/nio/file/DirectoryStream.close:()V
      49: goto          79
      52: astore        4
      54: aload_3
      55: ifnull        76
      58: aload_3
      59: invokeinterface #13,  1           // InterfaceMethod java/nio/file/DirectoryStream.close:()V
      64: goto          76
      67: astore        5
      69: aload         4
      71: aload         5
      73: invokevirtual #15                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
      76: aload         4
      78: athrow
      79: goto          97
      82: astore_3
      83: aload_2
      84: ifnonnull     89
      87: aload_3
      88: athrow
      89: aload_2
      90: aload_3
      91: invokeinterface #82,  2           // InterfaceMethod java/util/Collection.add:(Ljava/lang/Object;)Z
      96: pop
      97: aload_2
      98: ifnull        106
     101: aload_0
     102: aload_2
     103: invokestatic  #83                 // Method throwDeleteFailed:(Ljava/nio/file/Path;Ljava/util/Collection;)V
     106: return
    Exception table:
       from    to  target type
           7    39    52   Class java/lang/Throwable
          58    64    67   Class java/lang/Throwable
           2    79    82   Class java/io/IOException

  private static java.util.Collection<java.io.IOException> deleteRecursivelySecure(java.nio.file.SecureDirectoryStream<java.nio.file.Path>, java.nio.file.Path);
    Code:
       0: aconst_null
       1: astore_2
       2: aload_0
       3: aload_1
       4: iconst_1
       5: anewarray     #20                 // class java/nio/file/LinkOption
       8: dup
       9: iconst_0
      10: getstatic     #21                 // Field java/nio/file/LinkOption.NOFOLLOW_LINKS:Ljava/nio/file/LinkOption;
      13: aastore
      14: invokestatic  #86                 // Method isDirectory:(Ljava/nio/file/SecureDirectoryStream;Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z
      17: ifeq          97
      20: aload_0
      21: aload_1
      22: iconst_1
      23: anewarray     #20                 // class java/nio/file/LinkOption
      26: dup
      27: iconst_0
      28: getstatic     #21                 // Field java/nio/file/LinkOption.NOFOLLOW_LINKS:Ljava/nio/file/LinkOption;
      31: aastore
      32: invokeinterface #87,  3           // InterfaceMethod java/nio/file/SecureDirectoryStream.newDirectoryStream:(Ljava/lang/Object;[Ljava/nio/file/LinkOption;)Ljava/nio/file/SecureDirectoryStream;
      37: astore_3
      38: aload_3
      39: invokestatic  #84                 // Method deleteDirectoryContentsSecure:(Ljava/nio/file/SecureDirectoryStream;)Ljava/util/Collection;
      42: astore_2
      43: aload_3
      44: ifnull        83
      47: aload_3
      48: invokeinterface #88,  1           // InterfaceMethod java/nio/file/SecureDirectoryStream.close:()V
      53: goto          83
      56: astore        4
      58: aload_3
      59: ifnull        80
      62: aload_3
      63: invokeinterface #88,  1           // InterfaceMethod java/nio/file/SecureDirectoryStream.close:()V
      68: goto          80
      71: astore        5
      73: aload         4
      75: aload         5
      77: invokevirtual #15                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
      80: aload         4
      82: athrow
      83: aload_2
      84: ifnonnull     104
      87: aload_0
      88: aload_1
      89: invokeinterface #89,  2           // InterfaceMethod java/nio/file/SecureDirectoryStream.deleteDirectory:(Ljava/lang/Object;)V
      94: goto          104
      97: aload_0
      98: aload_1
      99: invokeinterface #90,  2           // InterfaceMethod java/nio/file/SecureDirectoryStream.deleteFile:(Ljava/lang/Object;)V
     104: aload_2
     105: areturn
     106: astore_3
     107: aload_2
     108: aload_3
     109: invokestatic  #91                 // Method addException:(Ljava/util/Collection;Ljava/io/IOException;)Ljava/util/Collection;
     112: areturn
    Exception table:
       from    to  target type
          38    43    56   Class java/lang/Throwable
          62    68    71   Class java/lang/Throwable
           2   105   106   Class java/io/IOException

  private static java.util.Collection<java.io.IOException> deleteDirectoryContentsSecure(java.nio.file.SecureDirectoryStream<java.nio.file.Path>);
    Code:
       0: aconst_null
       1: astore_1
       2: aload_0
       3: invokeinterface #92,  1           // InterfaceMethod java/nio/file/SecureDirectoryStream.iterator:()Ljava/util/Iterator;
       8: astore_2
       9: aload_2
      10: invokeinterface #93,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      15: ifeq          46
      18: aload_2
      19: invokeinterface #94,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      24: checkcast     #78                 // class java/nio/file/Path
      27: astore_3
      28: aload_1
      29: aload_0
      30: aload_3
      31: invokeinterface #66,  1           // InterfaceMethod java/nio/file/Path.getFileName:()Ljava/nio/file/Path;
      36: invokestatic  #79                 // Method deleteRecursivelySecure:(Ljava/nio/file/SecureDirectoryStream;Ljava/nio/file/Path;)Ljava/util/Collection;
      39: invokestatic  #95                 // Method concat:(Ljava/util/Collection;Ljava/util/Collection;)Ljava/util/Collection;
      42: astore_1
      43: goto          9
      46: aload_1
      47: areturn
      48: astore_2
      49: aload_1
      50: aload_2
      51: invokevirtual #17                 // Method java/nio/file/DirectoryIteratorException.getCause:()Ljava/io/IOException;
      54: invokestatic  #91                 // Method addException:(Ljava/util/Collection;Ljava/io/IOException;)Ljava/util/Collection;
      57: areturn
    Exception table:
       from    to  target type
           2    47    48   Class java/nio/file/DirectoryIteratorException

  private static java.util.Collection<java.io.IOException> deleteRecursivelyInsecure(java.nio.file.Path);
    Code:
       0: aconst_null
       1: astore_1
       2: aload_0
       3: iconst_1
       4: anewarray     #20                 // class java/nio/file/LinkOption
       7: dup
       8: iconst_0
       9: getstatic     #21                 // Field java/nio/file/LinkOption.NOFOLLOW_LINKS:Ljava/nio/file/LinkOption;
      12: aastore
      13: invokestatic  #22                 // Method java/nio/file/Files.isDirectory:(Ljava/nio/file/Path;[Ljava/nio/file/LinkOption;)Z
      16: ifeq          66
      19: aload_0
      20: invokestatic  #11                 // Method java/nio/file/Files.newDirectoryStream:(Ljava/nio/file/Path;)Ljava/nio/file/DirectoryStream;
      23: astore_2
      24: aload_2
      25: invokestatic  #85                 // Method deleteDirectoryContentsInsecure:(Ljava/nio/file/DirectoryStream;)Ljava/util/Collection;
      28: astore_1
      29: aload_2
      30: ifnull        66
      33: aload_2
      34: invokeinterface #13,  1           // InterfaceMethod java/nio/file/DirectoryStream.close:()V
      39: goto          66
      42: astore_3
      43: aload_2
      44: ifnull        64
      47: aload_2
      48: invokeinterface #13,  1           // InterfaceMethod java/nio/file/DirectoryStream.close:()V
      53: goto          64
      56: astore        4
      58: aload_3
      59: aload         4
      61: invokevirtual #15                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
      64: aload_3
      65: athrow
      66: aload_1
      67: ifnonnull     74
      70: aload_0
      71: invokestatic  #96                 // Method java/nio/file/Files.delete:(Ljava/nio/file/Path;)V
      74: aload_1
      75: areturn
      76: astore_2
      77: aload_1
      78: aload_2
      79: invokestatic  #91                 // Method addException:(Ljava/util/Collection;Ljava/io/IOException;)Ljava/util/Collection;
      82: areturn
    Exception table:
       from    to  target type
          24    29    42   Class java/lang/Throwable
          47    53    56   Class java/lang/Throwable
           2    75    76   Class java/io/IOException

  private static java.util.Collection<java.io.IOException> deleteDirectoryContentsInsecure(java.nio.file.DirectoryStream<java.nio.file.Path>);
    Code:
       0: aconst_null
       1: astore_1
       2: aload_0
       3: invokeinterface #97,  1           // InterfaceMethod java/nio/file/DirectoryStream.iterator:()Ljava/util/Iterator;
       8: astore_2
       9: aload_2
      10: invokeinterface #93,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      15: ifeq          40
      18: aload_2
      19: invokeinterface #94,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      24: checkcast     #78                 // class java/nio/file/Path
      27: astore_3
      28: aload_1
      29: aload_3
      30: invokestatic  #81                 // Method deleteRecursivelyInsecure:(Ljava/nio/file/Path;)Ljava/util/Collection;
      33: invokestatic  #95                 // Method concat:(Ljava/util/Collection;Ljava/util/Collection;)Ljava/util/Collection;
      36: astore_1
      37: goto          9
      40: aload_1
      41: areturn
      42: astore_2
      43: aload_1
      44: aload_2
      45: invokevirtual #17                 // Method java/nio/file/DirectoryIteratorException.getCause:()Ljava/io/IOException;
      48: invokestatic  #91                 // Method addException:(Ljava/util/Collection;Ljava/io/IOException;)Ljava/util/Collection;
      51: areturn
    Exception table:
       from    to  target type
           2    41    42   Class java/nio/file/DirectoryIteratorException

  private static java.nio.file.Path getParentPath(java.nio.file.Path);
    Code:
       0: aload_0
       1: invokeinterface #56,  1           // InterfaceMethod java/nio/file/Path.getParent:()Ljava/nio/file/Path;
       6: astore_1
       7: aload_1
       8: ifnull        13
      11: aload_1
      12: areturn
      13: aload_0
      14: invokeinterface #98,  1           // InterfaceMethod java/nio/file/Path.getNameCount:()I
      19: ifne          24
      22: aconst_null
      23: areturn
      24: aload_0
      25: invokeinterface #99,  1           // InterfaceMethod java/nio/file/Path.getFileSystem:()Ljava/nio/file/FileSystem;
      30: ldc           #100                // String .
      32: iconst_0
      33: anewarray     #101                // class java/lang/String
      36: invokevirtual #102                // Method java/nio/file/FileSystem.getPath:(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;
      39: areturn

  private static void checkAllowsInsecure(java.nio.file.Path, com.google.common.io.RecursiveDeleteOption[]) throws com.google.common.io.InsecureRecursiveDeleteException;
    Code:
       0: aload_1
       1: invokestatic  #103                // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
       4: getstatic     #104                // Field com/google/common/io/RecursiveDeleteOption.ALLOW_INSECURE:Lcom/google/common/io/RecursiveDeleteOption;
       7: invokeinterface #105,  2          // InterfaceMethod java/util/List.contains:(Ljava/lang/Object;)Z
      12: ifne          29
      15: new           #106                // class com/google/common/io/InsecureRecursiveDeleteException
      18: dup
      19: aload_0
      20: invokeinterface #68,  1           // InterfaceMethod java/nio/file/Path.toString:()Ljava/lang/String;
      25: invokespecial #107                // Method com/google/common/io/InsecureRecursiveDeleteException."<init>":(Ljava/lang/String;)V
      28: athrow
      29: return

  private static java.util.Collection<java.io.IOException> addException(java.util.Collection<java.io.IOException>, java.io.IOException);
    Code:
       0: aload_0
       1: ifnonnull     12
       4: new           #108                // class java/util/ArrayList
       7: dup
       8: invokespecial #109                // Method java/util/ArrayList."<init>":()V
      11: astore_0
      12: aload_0
      13: aload_1
      14: invokeinterface #82,  2           // InterfaceMethod java/util/Collection.add:(Ljava/lang/Object;)Z
      19: pop
      20: aload_0
      21: areturn

  private static java.util.Collection<java.io.IOException> concat(java.util.Collection<java.io.IOException>, java.util.Collection<java.io.IOException>);
    Code:
       0: aload_0
       1: ifnonnull     6
       4: aload_1
       5: areturn
       6: aload_1
       7: ifnull        18
      10: aload_0
      11: aload_1
      12: invokeinterface #110,  2          // InterfaceMethod java/util/Collection.addAll:(Ljava/util/Collection;)Z
      17: pop
      18: aload_0
      19: areturn

  private static void throwDeleteFailed(java.nio.file.Path, java.util.Collection<java.io.IOException>) throws java.nio.file.FileSystemException;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #111                // Method pathNotFound:(Ljava/nio/file/Path;Ljava/util/Collection;)Ljava/nio/file/NoSuchFileException;
       5: astore_2
       6: aload_2
       7: ifnull        12
      10: aload_2
      11: athrow
      12: new           #73                 // class java/nio/file/FileSystemException
      15: dup
      16: aload_0
      17: invokeinterface #68,  1           // InterfaceMethod java/nio/file/Path.toString:()Ljava/lang/String;
      22: aconst_null
      23: ldc           #112                // String failed to delete one or more files; see suppressed exceptions for details
      25: invokespecial #75                 // Method java/nio/file/FileSystemException."<init>":(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
      28: astore_3
      29: aload_1
      30: invokeinterface #113,  1          // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      35: astore        4
      37: aload         4
      39: invokeinterface #93,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      44: ifeq          68
      47: aload         4
      49: invokeinterface #94,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      54: checkcast     #24                 // class java/io/IOException
      57: astore        5
      59: aload_3
      60: aload         5
      62: invokevirtual #114                // Method java/nio/file/FileSystemException.addSuppressed:(Ljava/lang/Throwable;)V
      65: goto          37
      68: aload_3
      69: athrow

  private static java.nio.file.NoSuchFileException pathNotFound(java.nio.file.Path, java.util.Collection<java.io.IOException>);
    Code:
       0: aload_1
       1: invokeinterface #115,  1          // InterfaceMethod java/util/Collection.size:()I
       6: iconst_1
       7: if_icmpeq     12
      10: aconst_null
      11: areturn
      12: aload_1
      13: invokestatic  #116                // Method com/google/common/collect/Iterables.getOnlyElement:(Ljava/lang/Iterable;)Ljava/lang/Object;
      16: checkcast     #24                 // class java/io/IOException
      19: astore_2
      20: aload_2
      21: instanceof    #50                 // class java/nio/file/NoSuchFileException
      24: ifne          29
      27: aconst_null
      28: areturn
      29: aload_2
      30: checkcast     #50                 // class java/nio/file/NoSuchFileException
      33: astore_3
      34: aload_3
      35: invokevirtual #117                // Method java/nio/file/NoSuchFileException.getFile:()Ljava/lang/String;
      38: astore        4
      40: aload         4
      42: ifnonnull     47
      45: aconst_null
      46: areturn
      47: aload_0
      48: invokestatic  #72                 // Method getParentPath:(Ljava/nio/file/Path;)Ljava/nio/file/Path;
      51: astore        5
      53: aload         5
      55: ifnonnull     60
      58: aconst_null
      59: areturn
      60: aload         5
      62: aload_0
      63: invokeinterface #66,  1           // InterfaceMethod java/nio/file/Path.getFileName:()Ljava/nio/file/Path;
      68: invokestatic  #77                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
      71: checkcast     #78                 // class java/nio/file/Path
      74: invokeinterface #118,  2          // InterfaceMethod java/nio/file/Path.resolve:(Ljava/nio/file/Path;)Ljava/nio/file/Path;
      79: astore        6
      81: aload         4
      83: aload         6
      85: invokeinterface #68,  1           // InterfaceMethod java/nio/file/Path.toString:()Ljava/lang/String;
      90: invokevirtual #119                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      93: ifeq          98
      96: aload_3
      97: areturn
      98: aconst_null
      99: areturn

  static java.lang.Iterable access$300(java.nio.file.Path);
    Code:
       0: aload_0
       1: invokestatic  #1                  // Method fileTreeChildren:(Ljava/nio/file/Path;)Ljava/lang/Iterable;
       4: areturn

  static {};
    Code:
       0: new           #120                // class com/google/common/io/MoreFiles$1
       3: dup
       4: invokespecial #121                // Method com/google/common/io/MoreFiles$1."<init>":()V
       7: putstatic     #18                 // Field FILE_TREE:Lcom/google/common/graph/SuccessorsFunction;
      10: return
}
