Compiled from "ReaderInputStream.java"
final class com.google.common.io.ReaderInputStream extends java.io.InputStream {
  private final java.io.Reader reader;

  private final java.nio.charset.CharsetEncoder encoder;

  private final byte[] singleByte;

  private java.nio.CharBuffer charBuffer;

  private java.nio.ByteBuffer byteBuffer;

  private boolean endOfInput;

  private boolean draining;

  private boolean doneFlushing;

  com.google.common.io.ReaderInputStream(java.io.Reader, java.nio.charset.Charset, int);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #1                  // Method java/nio/charset/Charset.newEncoder:()Ljava/nio/charset/CharsetEncoder;
       6: getstatic     #2                  // Field java/nio/charset/CodingErrorAction.REPLACE:Ljava/nio/charset/CodingErrorAction;
       9: invokevirtual #3                  // Method java/nio/charset/CharsetEncoder.onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;
      12: getstatic     #2                  // Field java/nio/charset/CodingErrorAction.REPLACE:Ljava/nio/charset/CodingErrorAction;
      15: invokevirtual #4                  // Method java/nio/charset/CharsetEncoder.onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;
      18: iload_3
      19: invokespecial #5                  // Method "<init>":(Ljava/io/Reader;Ljava/nio/charset/CharsetEncoder;I)V
      22: return

  com.google.common.io.ReaderInputStream(java.io.Reader, java.nio.charset.CharsetEncoder, int);
    Code:
       0: aload_0
       1: invokespecial #6                  // Method java/io/InputStream."<init>":()V
       4: aload_0
       5: iconst_1
       6: newarray       byte
       8: putfield      #7                  // Field singleByte:[B
      11: aload_0
      12: aload_1
      13: invokestatic  #8                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
      16: checkcast     #9                  // class java/io/Reader
      19: putfield      #10                 // Field reader:Ljava/io/Reader;
      22: aload_0
      23: aload_2
      24: invokestatic  #8                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
      27: checkcast     #11                 // class java/nio/charset/CharsetEncoder
      30: putfield      #12                 // Field encoder:Ljava/nio/charset/CharsetEncoder;
      33: iload_3
      34: ifle          41
      37: iconst_1
      38: goto          42
      41: iconst_0
      42: ldc           #13                 // String bufferSize must be positive: %s
      44: iload_3
      45: invokestatic  #14                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/String;I)V
      48: aload_2
      49: invokevirtual #15                 // Method java/nio/charset/CharsetEncoder.reset:()Ljava/nio/charset/CharsetEncoder;
      52: pop
      53: aload_0
      54: iload_3
      55: invokestatic  #16                 // Method java/nio/CharBuffer.allocate:(I)Ljava/nio/CharBuffer;
      58: putfield      #17                 // Field charBuffer:Ljava/nio/CharBuffer;
      61: aload_0
      62: getfield      #17                 // Field charBuffer:Ljava/nio/CharBuffer;
      65: invokestatic  #18                 // Method com/google/common/io/Java8Compatibility.flip:(Ljava/nio/Buffer;)V
      68: aload_0
      69: iload_3
      70: invokestatic  #19                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;
      73: putfield      #20                 // Field byteBuffer:Ljava/nio/ByteBuffer;
      76: return

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #10                 // Field reader:Ljava/io/Reader;
       4: invokevirtual #21                 // Method java/io/Reader.close:()V
       7: return

  public int read() throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #7                  // Field singleByte:[B
       5: invokevirtual #22                 // Method read:([B)I
       8: iconst_1
       9: if_icmpne     24
      12: aload_0
      13: getfield      #7                  // Field singleByte:[B
      16: iconst_0
      17: baload
      18: invokestatic  #23                 // Method com/google/common/primitives/UnsignedBytes.toInt:(B)I
      21: goto          25
      24: iconst_m1
      25: ireturn

  public int read(byte[], int, int) throws java.io.IOException;
    Code:
       0: iload_2
       1: iload_2
       2: iload_3
       3: iadd
       4: aload_1
       5: arraylength
       6: invokestatic  #24                 // Method com/google/common/base/Preconditions.checkPositionIndexes:(III)V
       9: iload_3
      10: ifne          15
      13: iconst_0
      14: ireturn
      15: iconst_0
      16: istore        4
      18: aload_0
      19: getfield      #25                 // Field endOfInput:Z
      22: istore        5
      24: aload_0
      25: getfield      #26                 // Field draining:Z
      28: ifeq          86
      31: iload         4
      33: aload_0
      34: aload_1
      35: iload_2
      36: iload         4
      38: iadd
      39: iload_3
      40: iload         4
      42: isub
      43: invokespecial #27                 // Method drain:([BII)I
      46: iadd
      47: istore        4
      49: iload         4
      51: iload_3
      52: if_icmpeq     62
      55: aload_0
      56: getfield      #28                 // Field doneFlushing:Z
      59: ifeq          74
      62: iload         4
      64: ifle          72
      67: iload         4
      69: goto          73
      72: iconst_m1
      73: ireturn
      74: aload_0
      75: iconst_0
      76: putfield      #26                 // Field draining:Z
      79: aload_0
      80: getfield      #20                 // Field byteBuffer:Ljava/nio/ByteBuffer;
      83: invokestatic  #29                 // Method com/google/common/io/Java8Compatibility.clear:(Ljava/nio/Buffer;)V
      86: aload_0
      87: getfield      #28                 // Field doneFlushing:Z
      90: ifeq          101
      93: getstatic     #30                 // Field java/nio/charset/CoderResult.UNDERFLOW:Ljava/nio/charset/CoderResult;
      96: astore        6
      98: goto          143
     101: iload         5
     103: ifeq          122
     106: aload_0
     107: getfield      #12                 // Field encoder:Ljava/nio/charset/CharsetEncoder;
     110: aload_0
     111: getfield      #20                 // Field byteBuffer:Ljava/nio/ByteBuffer;
     114: invokevirtual #31                 // Method java/nio/charset/CharsetEncoder.flush:(Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;
     117: astore        6
     119: goto          143
     122: aload_0
     123: getfield      #12                 // Field encoder:Ljava/nio/charset/CharsetEncoder;
     126: aload_0
     127: getfield      #17                 // Field charBuffer:Ljava/nio/CharBuffer;
     130: aload_0
     131: getfield      #20                 // Field byteBuffer:Ljava/nio/ByteBuffer;
     134: aload_0
     135: getfield      #25                 // Field endOfInput:Z
     138: invokevirtual #32                 // Method java/nio/charset/CharsetEncoder.encode:(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;
     141: astore        6
     143: aload         6
     145: invokevirtual #33                 // Method java/nio/charset/CoderResult.isOverflow:()Z
     148: ifeq          159
     151: aload_0
     152: iconst_1
     153: invokespecial #34                 // Method startDraining:(Z)V
     156: goto          24
     159: aload         6
     161: invokevirtual #35                 // Method java/nio/charset/CoderResult.isUnderflow:()Z
     164: ifeq          205
     167: iload         5
     169: ifeq          185
     172: aload_0
     173: iconst_1
     174: putfield      #28                 // Field doneFlushing:Z
     177: aload_0
     178: iconst_0
     179: invokespecial #34                 // Method startDraining:(Z)V
     182: goto          24
     185: aload_0
     186: getfield      #25                 // Field endOfInput:Z
     189: ifeq          198
     192: iconst_1
     193: istore        5
     195: goto          220
     198: aload_0
     199: invokespecial #36                 // Method readMoreChars:()V
     202: goto          220
     205: aload         6
     207: invokevirtual #37                 // Method java/nio/charset/CoderResult.isError:()Z
     210: ifeq          220
     213: aload         6
     215: invokevirtual #38                 // Method java/nio/charset/CoderResult.throwException:()V
     218: iconst_0
     219: ireturn
     220: goto          86

  private static java.nio.CharBuffer grow(java.nio.CharBuffer);
    Code:
       0: aload_0
       1: invokevirtual #39                 // Method java/nio/CharBuffer.array:()[C
       4: aload_0
       5: invokevirtual #40                 // Method java/nio/CharBuffer.capacity:()I
       8: iconst_2
       9: imul
      10: invokestatic  #41                 // Method java/util/Arrays.copyOf:([CI)[C
      13: astore_1
      14: aload_1
      15: invokestatic  #42                 // Method java/nio/CharBuffer.wrap:([C)Ljava/nio/CharBuffer;
      18: astore_2
      19: aload_2
      20: aload_0
      21: invokevirtual #43                 // Method java/nio/CharBuffer.position:()I
      24: invokestatic  #44                 // Method com/google/common/io/Java8Compatibility.position:(Ljava/nio/Buffer;I)V
      27: aload_2
      28: aload_0
      29: invokevirtual #45                 // Method java/nio/CharBuffer.limit:()I
      32: invokestatic  #46                 // Method com/google/common/io/Java8Compatibility.limit:(Ljava/nio/Buffer;I)V
      35: aload_2
      36: areturn

  private void readMoreChars() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #17                 // Field charBuffer:Ljava/nio/CharBuffer;
       4: invokestatic  #47                 // Method availableCapacity:(Ljava/nio/Buffer;)I
       7: ifne          44
      10: aload_0
      11: getfield      #17                 // Field charBuffer:Ljava/nio/CharBuffer;
      14: invokevirtual #43                 // Method java/nio/CharBuffer.position:()I
      17: ifle          33
      20: aload_0
      21: getfield      #17                 // Field charBuffer:Ljava/nio/CharBuffer;
      24: invokevirtual #48                 // Method java/nio/CharBuffer.compact:()Ljava/nio/CharBuffer;
      27: invokestatic  #18                 // Method com/google/common/io/Java8Compatibility.flip:(Ljava/nio/Buffer;)V
      30: goto          44
      33: aload_0
      34: aload_0
      35: getfield      #17                 // Field charBuffer:Ljava/nio/CharBuffer;
      38: invokestatic  #49                 // Method grow:(Ljava/nio/CharBuffer;)Ljava/nio/CharBuffer;
      41: putfield      #17                 // Field charBuffer:Ljava/nio/CharBuffer;
      44: aload_0
      45: getfield      #17                 // Field charBuffer:Ljava/nio/CharBuffer;
      48: invokevirtual #45                 // Method java/nio/CharBuffer.limit:()I
      51: istore_1
      52: aload_0
      53: getfield      #10                 // Field reader:Ljava/io/Reader;
      56: aload_0
      57: getfield      #17                 // Field charBuffer:Ljava/nio/CharBuffer;
      60: invokevirtual #39                 // Method java/nio/CharBuffer.array:()[C
      63: iload_1
      64: aload_0
      65: getfield      #17                 // Field charBuffer:Ljava/nio/CharBuffer;
      68: invokestatic  #47                 // Method availableCapacity:(Ljava/nio/Buffer;)I
      71: invokevirtual #50                 // Method java/io/Reader.read:([CII)I
      74: istore_2
      75: iload_2
      76: iconst_m1
      77: if_icmpne     88
      80: aload_0
      81: iconst_1
      82: putfield      #25                 // Field endOfInput:Z
      85: goto          98
      88: aload_0
      89: getfield      #17                 // Field charBuffer:Ljava/nio/CharBuffer;
      92: iload_1
      93: iload_2
      94: iadd
      95: invokestatic  #46                 // Method com/google/common/io/Java8Compatibility.limit:(Ljava/nio/Buffer;I)V
      98: return

  private static int availableCapacity(java.nio.Buffer);
    Code:
       0: aload_0
       1: invokevirtual #51                 // Method java/nio/Buffer.capacity:()I
       4: aload_0
       5: invokevirtual #52                 // Method java/nio/Buffer.limit:()I
       8: isub
       9: ireturn

  private void startDraining(boolean);
    Code:
       0: aload_0
       1: getfield      #20                 // Field byteBuffer:Ljava/nio/ByteBuffer;
       4: invokestatic  #18                 // Method com/google/common/io/Java8Compatibility.flip:(Ljava/nio/Buffer;)V
       7: iload_1
       8: ifeq          40
      11: aload_0
      12: getfield      #20                 // Field byteBuffer:Ljava/nio/ByteBuffer;
      15: invokevirtual #53                 // Method java/nio/ByteBuffer.remaining:()I
      18: ifne          40
      21: aload_0
      22: aload_0
      23: getfield      #20                 // Field byteBuffer:Ljava/nio/ByteBuffer;
      26: invokevirtual #54                 // Method java/nio/ByteBuffer.capacity:()I
      29: iconst_2
      30: imul
      31: invokestatic  #19                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;
      34: putfield      #20                 // Field byteBuffer:Ljava/nio/ByteBuffer;
      37: goto          45
      40: aload_0
      41: iconst_1
      42: putfield      #26                 // Field draining:Z
      45: return

  private int drain(byte[], int, int);
    Code:
       0: iload_3
       1: aload_0
       2: getfield      #20                 // Field byteBuffer:Ljava/nio/ByteBuffer;
       5: invokevirtual #53                 // Method java/nio/ByteBuffer.remaining:()I
       8: invokestatic  #55                 // Method java/lang/Math.min:(II)I
      11: istore        4
      13: aload_0
      14: getfield      #20                 // Field byteBuffer:Ljava/nio/ByteBuffer;
      17: aload_1
      18: iload_2
      19: iload         4
      21: invokevirtual #56                 // Method java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;
      24: pop
      25: iload         4
      27: ireturn
}
