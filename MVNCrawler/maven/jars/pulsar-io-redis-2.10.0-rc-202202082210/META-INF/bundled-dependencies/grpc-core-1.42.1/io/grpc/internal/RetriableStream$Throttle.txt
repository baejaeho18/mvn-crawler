Compiled from "RetriableStream.java"
final class io.grpc.internal.RetriableStream$Throttle {
  private static final int THREE_DECIMAL_PLACES_SCALE_UP;

  final int maxTokens;

  final int threshold;

  final int tokenRatio;

  final java.util.concurrent.atomic.AtomicInteger tokenCount;

  io.grpc.internal.RetriableStream$Throttle(float, float);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/atomic/AtomicInteger
       8: dup
       9: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      12: putfield      #4                  // Field tokenCount:Ljava/util/concurrent/atomic/AtomicInteger;
      15: aload_0
      16: fload_2
      17: ldc           #6                  // float 1000.0f
      19: fmul
      20: f2i
      21: putfield      #7                  // Field tokenRatio:I
      24: aload_0
      25: fload_1
      26: ldc           #6                  // float 1000.0f
      28: fmul
      29: f2i
      30: putfield      #8                  // Field maxTokens:I
      33: aload_0
      34: aload_0
      35: getfield      #8                  // Field maxTokens:I
      38: iconst_2
      39: idiv
      40: putfield      #9                  // Field threshold:I
      43: aload_0
      44: getfield      #4                  // Field tokenCount:Ljava/util/concurrent/atomic/AtomicInteger;
      47: aload_0
      48: getfield      #8                  // Field maxTokens:I
      51: invokevirtual #10                 // Method java/util/concurrent/atomic/AtomicInteger.set:(I)V
      54: return

  boolean isAboveThreshold();
    Code:
       0: aload_0
       1: getfield      #4                  // Field tokenCount:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       7: aload_0
       8: getfield      #9                  // Field threshold:I
      11: if_icmple     18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn

  boolean onQualifiedFailureThenCheckIsAboveThreshold();
    Code:
       0: aload_0
       1: getfield      #4                  // Field tokenCount:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       7: istore_1
       8: iload_1
       9: ifne          14
      12: iconst_0
      13: ireturn
      14: iload_1
      15: sipush        1000
      18: isub
      19: istore_2
      20: aload_0
      21: getfield      #4                  // Field tokenCount:Ljava/util/concurrent/atomic/AtomicInteger;
      24: iload_1
      25: iload_2
      26: iconst_0
      27: invokestatic  #12                 // Method java/lang/Math.max:(II)I
      30: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicInteger.compareAndSet:(II)Z
      33: istore_3
      34: iload_3
      35: ifeq          52
      38: iload_2
      39: aload_0
      40: getfield      #9                  // Field threshold:I
      43: if_icmple     50
      46: iconst_1
      47: goto          51
      50: iconst_0
      51: ireturn
      52: goto          0

  void onSuccess();
    Code:
       0: aload_0
       1: getfield      #4                  // Field tokenCount:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       7: istore_1
       8: iload_1
       9: aload_0
      10: getfield      #8                  // Field maxTokens:I
      13: if_icmpne     19
      16: goto          53
      19: iload_1
      20: aload_0
      21: getfield      #7                  // Field tokenRatio:I
      24: iadd
      25: istore_2
      26: aload_0
      27: getfield      #4                  // Field tokenCount:Ljava/util/concurrent/atomic/AtomicInteger;
      30: iload_1
      31: iload_2
      32: aload_0
      33: getfield      #8                  // Field maxTokens:I
      36: invokestatic  #14                 // Method java/lang/Math.min:(II)I
      39: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicInteger.compareAndSet:(II)Z
      42: istore_3
      43: iload_3
      44: ifeq          50
      47: goto          53
      50: goto          0
      53: return

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: instanceof    #5                  // class io/grpc/internal/RetriableStream$Throttle
      11: ifne          16
      14: iconst_0
      15: ireturn
      16: aload_1
      17: checkcast     #5                  // class io/grpc/internal/RetriableStream$Throttle
      20: astore_2
      21: aload_0
      22: getfield      #8                  // Field maxTokens:I
      25: aload_2
      26: getfield      #8                  // Field maxTokens:I
      29: if_icmpne     47
      32: aload_0
      33: getfield      #7                  // Field tokenRatio:I
      36: aload_2
      37: getfield      #7                  // Field tokenRatio:I
      40: if_icmpne     47
      43: iconst_1
      44: goto          48
      47: iconst_0
      48: ireturn

  public int hashCode();
    Code:
       0: iconst_2
       1: anewarray     #15                 // class java/lang/Object
       4: dup
       5: iconst_0
       6: aload_0
       7: getfield      #8                  // Field maxTokens:I
      10: invokestatic  #16                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      13: aastore
      14: dup
      15: iconst_1
      16: aload_0
      17: getfield      #7                  // Field tokenRatio:I
      20: invokestatic  #16                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      23: aastore
      24: invokestatic  #17                 // Method com/google/common/base/Objects.hashCode:([Ljava/lang/Object;)I
      27: ireturn
}
