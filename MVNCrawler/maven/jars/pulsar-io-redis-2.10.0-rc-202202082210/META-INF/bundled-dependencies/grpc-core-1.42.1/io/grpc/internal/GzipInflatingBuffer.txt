Compiled from "GzipInflatingBuffer.java"
class io.grpc.internal.GzipInflatingBuffer implements java.io.Closeable {
  private static final int INFLATE_BUFFER_SIZE;

  private static final int UNSIGNED_SHORT_SIZE;

  private static final int GZIP_MAGIC;

  private static final int GZIP_HEADER_MIN_SIZE;

  private static final int GZIP_TRAILER_SIZE;

  private static final int HEADER_CRC_FLAG;

  private static final int HEADER_EXTRA_FLAG;

  private static final int HEADER_NAME_FLAG;

  private static final int HEADER_COMMENT_FLAG;

  private final io.grpc.internal.CompositeReadableBuffer gzippedData;

  private final java.util.zip.CRC32 crc;

  private final io.grpc.internal.GzipInflatingBuffer$GzipMetadataReader gzipMetadataReader;

  private final byte[] inflaterInput;

  private int inflaterInputStart;

  private int inflaterInputEnd;

  private java.util.zip.Inflater inflater;

  private io.grpc.internal.GzipInflatingBuffer$State state;

  private boolean closed;

  private int gzipHeaderFlag;

  private int headerExtraToRead;

  private long expectedGzipTrailerIsize;

  private int bytesConsumed;

  private int deflatedBytesConsumed;

  private boolean isStalled;

  io.grpc.internal.GzipInflatingBuffer();
    Code:
       0: aload_0
       1: invokespecial #7                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #8                  // class io/grpc/internal/CompositeReadableBuffer
       8: dup
       9: invokespecial #9                  // Method io/grpc/internal/CompositeReadableBuffer."<init>":()V
      12: putfield      #3                  // Field gzippedData:Lio/grpc/internal/CompositeReadableBuffer;
      15: aload_0
      16: new           #10                 // class java/util/zip/CRC32
      19: dup
      20: invokespecial #11                 // Method java/util/zip/CRC32."<init>":()V
      23: putfield      #2                  // Field crc:Ljava/util/zip/CRC32;
      26: aload_0
      27: new           #12                 // class io/grpc/internal/GzipInflatingBuffer$GzipMetadataReader
      30: dup
      31: aload_0
      32: aconst_null
      33: invokespecial #13                 // Method io/grpc/internal/GzipInflatingBuffer$GzipMetadataReader."<init>":(Lio/grpc/internal/GzipInflatingBuffer;Lio/grpc/internal/GzipInflatingBuffer$1;)V
      36: putfield      #14                 // Field gzipMetadataReader:Lio/grpc/internal/GzipInflatingBuffer$GzipMetadataReader;
      39: aload_0
      40: sipush        512
      43: newarray       byte
      45: putfield      #4                  // Field inflaterInput:[B
      48: aload_0
      49: getstatic     #16                 // Field io/grpc/internal/GzipInflatingBuffer$State.HEADER:Lio/grpc/internal/GzipInflatingBuffer$State;
      52: putfield      #17                 // Field state:Lio/grpc/internal/GzipInflatingBuffer$State;
      55: aload_0
      56: iconst_0
      57: putfield      #18                 // Field closed:Z
      60: aload_0
      61: iconst_0
      62: putfield      #1                  // Field bytesConsumed:I
      65: aload_0
      66: iconst_0
      67: putfield      #19                 // Field deflatedBytesConsumed:I
      70: aload_0
      71: iconst_1
      72: putfield      #20                 // Field isStalled:Z
      75: return

  boolean isStalled();
    Code:
       0: aload_0
       1: getfield      #18                 // Field closed:Z
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ldc           #21                 // String GzipInflatingBuffer is closed
      14: invokestatic  #22                 // Method com/google/common/base/Preconditions.checkState:(ZLjava/lang/Object;)V
      17: aload_0
      18: getfield      #20                 // Field isStalled:Z
      21: ireturn

  boolean hasPartialData();
    Code:
       0: aload_0
       1: getfield      #18                 // Field closed:Z
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ldc           #21                 // String GzipInflatingBuffer is closed
      14: invokestatic  #22                 // Method com/google/common/base/Preconditions.checkState:(ZLjava/lang/Object;)V
      17: aload_0
      18: getfield      #14                 // Field gzipMetadataReader:Lio/grpc/internal/GzipInflatingBuffer$GzipMetadataReader;
      21: invokestatic  #23                 // Method io/grpc/internal/GzipInflatingBuffer$GzipMetadataReader.access$700:(Lio/grpc/internal/GzipInflatingBuffer$GzipMetadataReader;)I
      24: ifne          37
      27: aload_0
      28: getfield      #17                 // Field state:Lio/grpc/internal/GzipInflatingBuffer$State;
      31: getstatic     #16                 // Field io/grpc/internal/GzipInflatingBuffer$State.HEADER:Lio/grpc/internal/GzipInflatingBuffer$State;
      34: if_acmpeq     41
      37: iconst_1
      38: goto          42
      41: iconst_0
      42: ireturn

  void addGzippedBytes(io.grpc.internal.ReadableBuffer);
    Code:
       0: aload_0
       1: getfield      #18                 // Field closed:Z
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ldc           #21                 // String GzipInflatingBuffer is closed
      14: invokestatic  #22                 // Method com/google/common/base/Preconditions.checkState:(ZLjava/lang/Object;)V
      17: aload_0
      18: getfield      #3                  // Field gzippedData:Lio/grpc/internal/CompositeReadableBuffer;
      21: aload_1
      22: invokevirtual #24                 // Method io/grpc/internal/CompositeReadableBuffer.addBuffer:(Lio/grpc/internal/ReadableBuffer;)V
      25: aload_0
      26: iconst_0
      27: putfield      #20                 // Field isStalled:Z
      30: return

  public void close();
    Code:
       0: aload_0
       1: getfield      #18                 // Field closed:Z
       4: ifne          38
       7: aload_0
       8: iconst_1
       9: putfield      #18                 // Field closed:Z
      12: aload_0
      13: getfield      #3                  // Field gzippedData:Lio/grpc/internal/CompositeReadableBuffer;
      16: invokevirtual #25                 // Method io/grpc/internal/CompositeReadableBuffer.close:()V
      19: aload_0
      20: getfield      #26                 // Field inflater:Ljava/util/zip/Inflater;
      23: ifnull        38
      26: aload_0
      27: getfield      #26                 // Field inflater:Ljava/util/zip/Inflater;
      30: invokevirtual #27                 // Method java/util/zip/Inflater.end:()V
      33: aload_0
      34: aconst_null
      35: putfield      #26                 // Field inflater:Ljava/util/zip/Inflater;
      38: return

  int getAndResetBytesConsumed();
    Code:
       0: aload_0
       1: getfield      #1                  // Field bytesConsumed:I
       4: istore_1
       5: aload_0
       6: iconst_0
       7: putfield      #1                  // Field bytesConsumed:I
      10: iload_1
      11: ireturn

  int getAndResetDeflatedBytesConsumed();
    Code:
       0: aload_0
       1: getfield      #19                 // Field deflatedBytesConsumed:I
       4: istore_1
       5: aload_0
       6: iconst_0
       7: putfield      #19                 // Field deflatedBytesConsumed:I
      10: iload_1
      11: ireturn

  int inflateBytes(byte[], int, int) throws java.util.zip.DataFormatException, java.util.zip.ZipException;
    Code:
       0: aload_0
       1: getfield      #18                 // Field closed:Z
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ldc           #21                 // String GzipInflatingBuffer is closed
      14: invokestatic  #22                 // Method com/google/common/base/Preconditions.checkState:(ZLjava/lang/Object;)V
      17: iconst_0
      18: istore        4
      20: iconst_1
      21: istore        6
      23: iload         6
      25: ifeq          256
      28: iload_3
      29: iload         4
      31: isub
      32: dup
      33: istore        5
      35: ifle          256
      38: getstatic     #28                 // Field io/grpc/internal/GzipInflatingBuffer$1.$SwitchMap$io$grpc$internal$GzipInflatingBuffer$State:[I
      41: aload_0
      42: getfield      #17                 // Field state:Lio/grpc/internal/GzipInflatingBuffer$State;
      45: invokevirtual #29                 // Method io/grpc/internal/GzipInflatingBuffer$State.ordinal:()I
      48: iaload
      49: tableswitch   { // 1 to 10
                     1: 104
                     2: 113
                     3: 122
                     4: 131
                     5: 140
                     6: 149
                     7: 158
                     8: 167
                     9: 208
                    10: 217
               default: 226
          }
     104: aload_0
     105: invokespecial #30                 // Method processHeader:()Z
     108: istore        6
     110: goto          23
     113: aload_0
     114: invokespecial #31                 // Method processHeaderExtraLen:()Z
     117: istore        6
     119: goto          23
     122: aload_0
     123: invokespecial #32                 // Method processHeaderExtra:()Z
     126: istore        6
     128: goto          23
     131: aload_0
     132: invokespecial #33                 // Method processHeaderName:()Z
     135: istore        6
     137: goto          23
     140: aload_0
     141: invokespecial #34                 // Method processHeaderComment:()Z
     144: istore        6
     146: goto          23
     149: aload_0
     150: invokespecial #35                 // Method processHeaderCrc:()Z
     153: istore        6
     155: goto          23
     158: aload_0
     159: invokespecial #36                 // Method initializeInflater:()Z
     162: istore        6
     164: goto          23
     167: iload         4
     169: aload_0
     170: aload_1
     171: iload_2
     172: iload         4
     174: iadd
     175: iload         5
     177: invokespecial #37                 // Method inflate:([BII)I
     180: iadd
     181: istore        4
     183: aload_0
     184: getfield      #17                 // Field state:Lio/grpc/internal/GzipInflatingBuffer$State;
     187: getstatic     #38                 // Field io/grpc/internal/GzipInflatingBuffer$State.TRAILER:Lio/grpc/internal/GzipInflatingBuffer$State;
     190: if_acmpne     202
     193: aload_0
     194: invokespecial #39                 // Method processTrailer:()Z
     197: istore        6
     199: goto          23
     202: iconst_1
     203: istore        6
     205: goto          23
     208: aload_0
     209: invokespecial #40                 // Method fill:()Z
     212: istore        6
     214: goto          23
     217: aload_0
     218: invokespecial #39                 // Method processTrailer:()Z
     221: istore        6
     223: goto          23
     226: new           #41                 // class java/lang/AssertionError
     229: dup
     230: new           #42                 // class java/lang/StringBuilder
     233: dup
     234: invokespecial #43                 // Method java/lang/StringBuilder."<init>":()V
     237: ldc           #44                 // String Invalid state:
     239: invokevirtual #45                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     242: aload_0
     243: getfield      #17                 // Field state:Lio/grpc/internal/GzipInflatingBuffer$State;
     246: invokevirtual #46                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     249: invokevirtual #47                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     252: invokespecial #48                 // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
     255: athrow
     256: aload_0
     257: iload         6
     259: ifeq          284
     262: aload_0
     263: getfield      #17                 // Field state:Lio/grpc/internal/GzipInflatingBuffer$State;
     266: getstatic     #16                 // Field io/grpc/internal/GzipInflatingBuffer$State.HEADER:Lio/grpc/internal/GzipInflatingBuffer$State;
     269: if_acmpne     288
     272: aload_0
     273: getfield      #14                 // Field gzipMetadataReader:Lio/grpc/internal/GzipInflatingBuffer$GzipMetadataReader;
     276: invokestatic  #23                 // Method io/grpc/internal/GzipInflatingBuffer$GzipMetadataReader.access$700:(Lio/grpc/internal/GzipInflatingBuffer$GzipMetadataReader;)I
     279: bipush        10
     281: if_icmpge     288
     284: iconst_1
     285: goto          289
     288: iconst_0
     289: putfield      #20                 // Field isStalled:Z
     292: iload         4
     294: ireturn

  private boolean processHeader() throws java.util.zip.ZipException;
    Code:
       0: aload_0
       1: getfield      #14                 // Field gzipMetadataReader:Lio/grpc/internal/GzipInflatingBuffer$GzipMetadataReader;
       4: invokestatic  #23                 // Method io/grpc/internal/GzipInflatingBuffer$GzipMetadataReader.access$700:(Lio/grpc/internal/GzipInflatingBuffer$GzipMetadataReader;)I
       7: bipush        10
       9: if_icmpge     14
      12: iconst_0
      13: ireturn
      14: aload_0
      15: getfield      #14                 // Field gzipMetadataReader:Lio/grpc/internal/GzipInflatingBuffer$GzipMetadataReader;
      18: invokestatic  #49                 // Method io/grpc/internal/GzipInflatingBuffer$GzipMetadataReader.access$800:(Lio/grpc/internal/GzipInflatingBuffer$GzipMetadataReader;)I
      21: ldc           #50                 // int 35615
      23: if_icmpeq     36
      26: new           #51                 // class java/util/zip/ZipException
      29: dup
      30: ldc           #52                 // String Not in GZIP format
      32: invokespecial #53                 // Method java/util/zip/ZipException."<init>":(Ljava/lang/String;)V
      35: athrow
      36: aload_0
      37: getfield      #14                 // Field gzipMetadataReader:Lio/grpc/internal/GzipInflatingBuffer$GzipMetadataReader;
      40: invokestatic  #54                 // Method io/grpc/internal/GzipInflatingBuffer$GzipMetadataReader.access$900:(Lio/grpc/internal/GzipInflatingBuffer$GzipMetadataReader;)I
      43: bipush        8
      45: if_icmpeq     58
      48: new           #51                 // class java/util/zip/ZipException
      51: dup
      52: ldc           #55                 // String Unsupported compression method
      54: invokespecial #53                 // Method java/util/zip/ZipException."<init>":(Ljava/lang/String;)V
      57: athrow
      58: aload_0
      59: aload_0
      60: getfield      #14                 // Field gzipMetadataReader:Lio/grpc/internal/GzipInflatingBuffer$GzipMetadataReader;
      63: invokestatic  #54                 // Method io/grpc/internal/GzipInflatingBuffer$GzipMetadataReader.access$900:(Lio/grpc/internal/GzipInflatingBuffer$GzipMetadataReader;)I
      66: putfield      #56                 // Field gzipHeaderFlag:I
      69: aload_0
      70: getfield      #14                 // Field gzipMetadataReader:Lio/grpc/internal/GzipInflatingBuffer$GzipMetadataReader;
      73: bipush        6
      75: invokestatic  #57                 // Method io/grpc/internal/GzipInflatingBuffer$GzipMetadataReader.access$1000:(Lio/grpc/internal/GzipInflatingBuffer$GzipMetadataReader;I)V
      78: aload_0
      79: getstatic     #58                 // Field io/grpc/internal/GzipInflatingBuffer$State.HEADER_EXTRA_LEN:Lio/grpc/internal/GzipInflatingBuffer$State;
      82: putfield      #17                 // Field state:Lio/grpc/internal/GzipInflatingBuffer$State;
      85: iconst_1
      86: ireturn

  private boolean processHeaderExtraLen();
    Code:
       0: aload_0
       1: getfield      #56                 // Field gzipHeaderFlag:I
       4: iconst_4
       5: iand
       6: iconst_4
       7: if_icmpeq     19
      10: aload_0
      11: getstatic     #59                 // Field io/grpc/internal/GzipInflatingBuffer$State.HEADER_NAME:Lio/grpc/internal/GzipInflatingBuffer$State;
      14: putfield      #17                 // Field state:Lio/grpc/internal/GzipInflatingBuffer$State;
      17: iconst_1
      18: ireturn
      19: aload_0
      20: getfield      #14                 // Field gzipMetadataReader:Lio/grpc/internal/GzipInflatingBuffer$GzipMetadataReader;
      23: invokestatic  #23                 // Method io/grpc/internal/GzipInflatingBuffer$GzipMetadataReader.access$700:(Lio/grpc/internal/GzipInflatingBuffer$GzipMetadataReader;)I
      26: iconst_2
      27: if_icmpge     32
      30: iconst_0
      31: ireturn
      32: aload_0
      33: aload_0
      34: getfield      #14                 // Field gzipMetadataReader:Lio/grpc/internal/GzipInflatingBuffer$GzipMetadataReader;
      37: invokestatic  #49                 // Method io/grpc/internal/GzipInflatingBuffer$GzipMetadataReader.access$800:(Lio/grpc/internal/GzipInflatingBuffer$GzipMetadataReader;)I
      40: putfield      #60                 // Field headerExtraToRead:I
      43: aload_0
      44: getstatic     #61                 // Field io/grpc/internal/GzipInflatingBuffer$State.HEADER_EXTRA:Lio/grpc/internal/GzipInflatingBuffer$State;
      47: putfield      #17                 // Field state:Lio/grpc/internal/GzipInflatingBuffer$State;
      50: iconst_1
      51: ireturn

  private boolean processHeaderExtra();
    Code:
       0: aload_0
       1: getfield      #14                 // Field gzipMetadataReader:Lio/grpc/internal/GzipInflatingBuffer$GzipMetadataReader;
       4: invokestatic  #23                 // Method io/grpc/internal/GzipInflatingBuffer$GzipMetadataReader.access$700:(Lio/grpc/internal/GzipInflatingBuffer$GzipMetadataReader;)I
       7: aload_0
       8: getfield      #60                 // Field headerExtraToRead:I
      11: if_icmpge     16
      14: iconst_0
      15: ireturn
      16: aload_0
      17: getfield      #14                 // Field gzipMetadataReader:Lio/grpc/internal/GzipInflatingBuffer$GzipMetadataReader;
      20: aload_0
      21: getfield      #60                 // Field headerExtraToRead:I
      24: invokestatic  #57                 // Method io/grpc/internal/GzipInflatingBuffer$GzipMetadataReader.access$1000:(Lio/grpc/internal/GzipInflatingBuffer$GzipMetadataReader;I)V
      27: aload_0
      28: getstatic     #59                 // Field io/grpc/internal/GzipInflatingBuffer$State.HEADER_NAME:Lio/grpc/internal/GzipInflatingBuffer$State;
      31: putfield      #17                 // Field state:Lio/grpc/internal/GzipInflatingBuffer$State;
      34: iconst_1
      35: ireturn

  private boolean processHeaderName();
    Code:
       0: aload_0
       1: getfield      #56                 // Field gzipHeaderFlag:I
       4: bipush        8
       6: iand
       7: bipush        8
       9: if_icmpeq     21
      12: aload_0
      13: getstatic     #62                 // Field io/grpc/internal/GzipInflatingBuffer$State.HEADER_COMMENT:Lio/grpc/internal/GzipInflatingBuffer$State;
      16: putfield      #17                 // Field state:Lio/grpc/internal/GzipInflatingBuffer$State;
      19: iconst_1
      20: ireturn
      21: aload_0
      22: getfield      #14                 // Field gzipMetadataReader:Lio/grpc/internal/GzipInflatingBuffer$GzipMetadataReader;
      25: invokestatic  #63                 // Method io/grpc/internal/GzipInflatingBuffer$GzipMetadataReader.access$1100:(Lio/grpc/internal/GzipInflatingBuffer$GzipMetadataReader;)Z
      28: ifne          33
      31: iconst_0
      32: ireturn
      33: aload_0
      34: getstatic     #62                 // Field io/grpc/internal/GzipInflatingBuffer$State.HEADER_COMMENT:Lio/grpc/internal/GzipInflatingBuffer$State;
      37: putfield      #17                 // Field state:Lio/grpc/internal/GzipInflatingBuffer$State;
      40: iconst_1
      41: ireturn

  private boolean processHeaderComment();
    Code:
       0: aload_0
       1: getfield      #56                 // Field gzipHeaderFlag:I
       4: bipush        16
       6: iand
       7: bipush        16
       9: if_icmpeq     21
      12: aload_0
      13: getstatic     #64                 // Field io/grpc/internal/GzipInflatingBuffer$State.HEADER_CRC:Lio/grpc/internal/GzipInflatingBuffer$State;
      16: putfield      #17                 // Field state:Lio/grpc/internal/GzipInflatingBuffer$State;
      19: iconst_1
      20: ireturn
      21: aload_0
      22: getfield      #14                 // Field gzipMetadataReader:Lio/grpc/internal/GzipInflatingBuffer$GzipMetadataReader;
      25: invokestatic  #63                 // Method io/grpc/internal/GzipInflatingBuffer$GzipMetadataReader.access$1100:(Lio/grpc/internal/GzipInflatingBuffer$GzipMetadataReader;)Z
      28: ifne          33
      31: iconst_0
      32: ireturn
      33: aload_0
      34: getstatic     #64                 // Field io/grpc/internal/GzipInflatingBuffer$State.HEADER_CRC:Lio/grpc/internal/GzipInflatingBuffer$State;
      37: putfield      #17                 // Field state:Lio/grpc/internal/GzipInflatingBuffer$State;
      40: iconst_1
      41: ireturn

  private boolean processHeaderCrc() throws java.util.zip.ZipException;
    Code:
       0: aload_0
       1: getfield      #56                 // Field gzipHeaderFlag:I
       4: iconst_2
       5: iand
       6: iconst_2
       7: if_icmpeq     19
      10: aload_0
      11: getstatic     #65                 // Field io/grpc/internal/GzipInflatingBuffer$State.INITIALIZE_INFLATER:Lio/grpc/internal/GzipInflatingBuffer$State;
      14: putfield      #17                 // Field state:Lio/grpc/internal/GzipInflatingBuffer$State;
      17: iconst_1
      18: ireturn
      19: aload_0
      20: getfield      #14                 // Field gzipMetadataReader:Lio/grpc/internal/GzipInflatingBuffer$GzipMetadataReader;
      23: invokestatic  #23                 // Method io/grpc/internal/GzipInflatingBuffer$GzipMetadataReader.access$700:(Lio/grpc/internal/GzipInflatingBuffer$GzipMetadataReader;)I
      26: iconst_2
      27: if_icmpge     32
      30: iconst_0
      31: ireturn
      32: aload_0
      33: getfield      #2                  // Field crc:Ljava/util/zip/CRC32;
      36: invokevirtual #66                 // Method java/util/zip/CRC32.getValue:()J
      39: l2i
      40: ldc           #67                 // int 65535
      42: iand
      43: istore_1
      44: iload_1
      45: aload_0
      46: getfield      #14                 // Field gzipMetadataReader:Lio/grpc/internal/GzipInflatingBuffer$GzipMetadataReader;
      49: invokestatic  #49                 // Method io/grpc/internal/GzipInflatingBuffer$GzipMetadataReader.access$800:(Lio/grpc/internal/GzipInflatingBuffer$GzipMetadataReader;)I
      52: if_icmpeq     65
      55: new           #51                 // class java/util/zip/ZipException
      58: dup
      59: ldc           #68                 // String Corrupt GZIP header
      61: invokespecial #53                 // Method java/util/zip/ZipException."<init>":(Ljava/lang/String;)V
      64: athrow
      65: aload_0
      66: getstatic     #65                 // Field io/grpc/internal/GzipInflatingBuffer$State.INITIALIZE_INFLATER:Lio/grpc/internal/GzipInflatingBuffer$State;
      69: putfield      #17                 // Field state:Lio/grpc/internal/GzipInflatingBuffer$State;
      72: iconst_1
      73: ireturn

  private boolean initializeInflater();
    Code:
       0: aload_0
       1: getfield      #26                 // Field inflater:Ljava/util/zip/Inflater;
       4: ifnonnull     22
       7: aload_0
       8: new           #69                 // class java/util/zip/Inflater
      11: dup
      12: iconst_1
      13: invokespecial #70                 // Method java/util/zip/Inflater."<init>":(Z)V
      16: putfield      #26                 // Field inflater:Ljava/util/zip/Inflater;
      19: goto          29
      22: aload_0
      23: getfield      #26                 // Field inflater:Ljava/util/zip/Inflater;
      26: invokevirtual #71                 // Method java/util/zip/Inflater.reset:()V
      29: aload_0
      30: getfield      #2                  // Field crc:Ljava/util/zip/CRC32;
      33: invokevirtual #72                 // Method java/util/zip/CRC32.reset:()V
      36: aload_0
      37: getfield      #6                  // Field inflaterInputEnd:I
      40: aload_0
      41: getfield      #5                  // Field inflaterInputStart:I
      44: isub
      45: istore_1
      46: iload_1
      47: ifle          76
      50: aload_0
      51: getfield      #26                 // Field inflater:Ljava/util/zip/Inflater;
      54: aload_0
      55: getfield      #4                  // Field inflaterInput:[B
      58: aload_0
      59: getfield      #5                  // Field inflaterInputStart:I
      62: iload_1
      63: invokevirtual #73                 // Method java/util/zip/Inflater.setInput:([BII)V
      66: aload_0
      67: getstatic     #74                 // Field io/grpc/internal/GzipInflatingBuffer$State.INFLATING:Lio/grpc/internal/GzipInflatingBuffer$State;
      70: putfield      #17                 // Field state:Lio/grpc/internal/GzipInflatingBuffer$State;
      73: goto          83
      76: aload_0
      77: getstatic     #75                 // Field io/grpc/internal/GzipInflatingBuffer$State.INFLATER_NEEDS_INPUT:Lio/grpc/internal/GzipInflatingBuffer$State;
      80: putfield      #17                 // Field state:Lio/grpc/internal/GzipInflatingBuffer$State;
      83: iconst_1
      84: ireturn

  private int inflate(byte[], int, int) throws java.util.zip.DataFormatException, java.util.zip.ZipException;
    Code:
       0: aload_0
       1: getfield      #26                 // Field inflater:Ljava/util/zip/Inflater;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ldc           #76                 // String inflater is null
      14: invokestatic  #22                 // Method com/google/common/base/Preconditions.checkState:(ZLjava/lang/Object;)V
      17: aload_0
      18: getfield      #26                 // Field inflater:Ljava/util/zip/Inflater;
      21: invokevirtual #77                 // Method java/util/zip/Inflater.getTotalIn:()I
      24: istore        4
      26: aload_0
      27: getfield      #26                 // Field inflater:Ljava/util/zip/Inflater;
      30: aload_1
      31: iload_2
      32: iload_3
      33: invokevirtual #78                 // Method java/util/zip/Inflater.inflate:([BII)I
      36: istore        5
      38: aload_0
      39: getfield      #26                 // Field inflater:Ljava/util/zip/Inflater;
      42: invokevirtual #77                 // Method java/util/zip/Inflater.getTotalIn:()I
      45: iload         4
      47: isub
      48: istore        6
      50: aload_0
      51: dup
      52: getfield      #1                  // Field bytesConsumed:I
      55: iload         6
      57: iadd
      58: putfield      #1                  // Field bytesConsumed:I
      61: aload_0
      62: dup
      63: getfield      #19                 // Field deflatedBytesConsumed:I
      66: iload         6
      68: iadd
      69: putfield      #19                 // Field deflatedBytesConsumed:I
      72: aload_0
      73: dup
      74: getfield      #5                  // Field inflaterInputStart:I
      77: iload         6
      79: iadd
      80: putfield      #5                  // Field inflaterInputStart:I
      83: aload_0
      84: getfield      #2                  // Field crc:Ljava/util/zip/CRC32;
      87: aload_1
      88: iload_2
      89: iload         5
      91: invokevirtual #79                 // Method java/util/zip/CRC32.update:([BII)V
      94: aload_0
      95: getfield      #26                 // Field inflater:Ljava/util/zip/Inflater;
      98: invokevirtual #80                 // Method java/util/zip/Inflater.finished:()Z
     101: ifeq          129
     104: aload_0
     105: aload_0
     106: getfield      #26                 // Field inflater:Ljava/util/zip/Inflater;
     109: invokevirtual #81                 // Method java/util/zip/Inflater.getBytesWritten:()J
     112: ldc2_w        #82                 // long 4294967295l
     115: land
     116: putfield      #84                 // Field expectedGzipTrailerIsize:J
     119: aload_0
     120: getstatic     #38                 // Field io/grpc/internal/GzipInflatingBuffer$State.TRAILER:Lio/grpc/internal/GzipInflatingBuffer$State;
     123: putfield      #17                 // Field state:Lio/grpc/internal/GzipInflatingBuffer$State;
     126: goto          146
     129: aload_0
     130: getfield      #26                 // Field inflater:Ljava/util/zip/Inflater;
     133: invokevirtual #85                 // Method java/util/zip/Inflater.needsInput:()Z
     136: ifeq          146
     139: aload_0
     140: getstatic     #75                 // Field io/grpc/internal/GzipInflatingBuffer$State.INFLATER_NEEDS_INPUT:Lio/grpc/internal/GzipInflatingBuffer$State;
     143: putfield      #17                 // Field state:Lio/grpc/internal/GzipInflatingBuffer$State;
     146: iload         5
     148: ireturn
     149: astore        4
     151: new           #86                 // class java/util/zip/DataFormatException
     154: dup
     155: new           #42                 // class java/lang/StringBuilder
     158: dup
     159: invokespecial #43                 // Method java/lang/StringBuilder."<init>":()V
     162: ldc           #87                 // String Inflater data format exception:
     164: invokevirtual #45                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     167: aload         4
     169: invokevirtual #88                 // Method java/util/zip/DataFormatException.getMessage:()Ljava/lang/String;
     172: invokevirtual #45                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     175: invokevirtual #47                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     178: invokespecial #89                 // Method java/util/zip/DataFormatException."<init>":(Ljava/lang/String;)V
     181: athrow
    Exception table:
       from    to  target type
          17   148   149   Class java/util/zip/DataFormatException

  private boolean fill();
    Code:
       0: aload_0
       1: getfield      #26                 // Field inflater:Ljava/util/zip/Inflater;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ldc           #76                 // String inflater is null
      14: invokestatic  #22                 // Method com/google/common/base/Preconditions.checkState:(ZLjava/lang/Object;)V
      17: aload_0
      18: getfield      #5                  // Field inflaterInputStart:I
      21: aload_0
      22: getfield      #6                  // Field inflaterInputEnd:I
      25: if_icmpne     32
      28: iconst_1
      29: goto          33
      32: iconst_0
      33: ldc           #90                 // String inflaterInput has unconsumed bytes
      35: invokestatic  #22                 // Method com/google/common/base/Preconditions.checkState:(ZLjava/lang/Object;)V
      38: aload_0
      39: getfield      #3                  // Field gzippedData:Lio/grpc/internal/CompositeReadableBuffer;
      42: invokevirtual #91                 // Method io/grpc/internal/CompositeReadableBuffer.readableBytes:()I
      45: sipush        512
      48: invokestatic  #92                 // Method java/lang/Math.min:(II)I
      51: istore_1
      52: iload_1
      53: ifne          58
      56: iconst_0
      57: ireturn
      58: aload_0
      59: iconst_0
      60: putfield      #5                  // Field inflaterInputStart:I
      63: aload_0
      64: iload_1
      65: putfield      #6                  // Field inflaterInputEnd:I
      68: aload_0
      69: getfield      #3                  // Field gzippedData:Lio/grpc/internal/CompositeReadableBuffer;
      72: aload_0
      73: getfield      #4                  // Field inflaterInput:[B
      76: aload_0
      77: getfield      #5                  // Field inflaterInputStart:I
      80: iload_1
      81: invokevirtual #93                 // Method io/grpc/internal/CompositeReadableBuffer.readBytes:([BII)V
      84: aload_0
      85: getfield      #26                 // Field inflater:Ljava/util/zip/Inflater;
      88: aload_0
      89: getfield      #4                  // Field inflaterInput:[B
      92: aload_0
      93: getfield      #5                  // Field inflaterInputStart:I
      96: iload_1
      97: invokevirtual #73                 // Method java/util/zip/Inflater.setInput:([BII)V
     100: aload_0
     101: getstatic     #74                 // Field io/grpc/internal/GzipInflatingBuffer$State.INFLATING:Lio/grpc/internal/GzipInflatingBuffer$State;
     104: putfield      #17                 // Field state:Lio/grpc/internal/GzipInflatingBuffer$State;
     107: iconst_1
     108: ireturn

  private boolean processTrailer() throws java.util.zip.ZipException;
    Code:
       0: aload_0
       1: getfield      #26                 // Field inflater:Ljava/util/zip/Inflater;
       4: ifnull        31
       7: aload_0
       8: getfield      #14                 // Field gzipMetadataReader:Lio/grpc/internal/GzipInflatingBuffer$GzipMetadataReader;
      11: invokestatic  #23                 // Method io/grpc/internal/GzipInflatingBuffer$GzipMetadataReader.access$700:(Lio/grpc/internal/GzipInflatingBuffer$GzipMetadataReader;)I
      14: bipush        18
      16: if_icmpgt     31
      19: aload_0
      20: getfield      #26                 // Field inflater:Ljava/util/zip/Inflater;
      23: invokevirtual #27                 // Method java/util/zip/Inflater.end:()V
      26: aload_0
      27: aconst_null
      28: putfield      #26                 // Field inflater:Ljava/util/zip/Inflater;
      31: aload_0
      32: getfield      #14                 // Field gzipMetadataReader:Lio/grpc/internal/GzipInflatingBuffer$GzipMetadataReader;
      35: invokestatic  #23                 // Method io/grpc/internal/GzipInflatingBuffer$GzipMetadataReader.access$700:(Lio/grpc/internal/GzipInflatingBuffer$GzipMetadataReader;)I
      38: bipush        8
      40: if_icmpge     45
      43: iconst_0
      44: ireturn
      45: aload_0
      46: getfield      #2                  // Field crc:Ljava/util/zip/CRC32;
      49: invokevirtual #66                 // Method java/util/zip/CRC32.getValue:()J
      52: aload_0
      53: getfield      #14                 // Field gzipMetadataReader:Lio/grpc/internal/GzipInflatingBuffer$GzipMetadataReader;
      56: invokestatic  #94                 // Method io/grpc/internal/GzipInflatingBuffer$GzipMetadataReader.access$1200:(Lio/grpc/internal/GzipInflatingBuffer$GzipMetadataReader;)J
      59: lcmp
      60: ifne          78
      63: aload_0
      64: getfield      #84                 // Field expectedGzipTrailerIsize:J
      67: aload_0
      68: getfield      #14                 // Field gzipMetadataReader:Lio/grpc/internal/GzipInflatingBuffer$GzipMetadataReader;
      71: invokestatic  #94                 // Method io/grpc/internal/GzipInflatingBuffer$GzipMetadataReader.access$1200:(Lio/grpc/internal/GzipInflatingBuffer$GzipMetadataReader;)J
      74: lcmp
      75: ifeq          88
      78: new           #51                 // class java/util/zip/ZipException
      81: dup
      82: ldc           #95                 // String Corrupt GZIP trailer
      84: invokespecial #53                 // Method java/util/zip/ZipException."<init>":(Ljava/lang/String;)V
      87: athrow
      88: aload_0
      89: getfield      #2                  // Field crc:Ljava/util/zip/CRC32;
      92: invokevirtual #72                 // Method java/util/zip/CRC32.reset:()V
      95: aload_0
      96: getstatic     #16                 // Field io/grpc/internal/GzipInflatingBuffer$State.HEADER:Lio/grpc/internal/GzipInflatingBuffer$State;
      99: putfield      #17                 // Field state:Lio/grpc/internal/GzipInflatingBuffer$State;
     102: iconst_1
     103: ireturn

  static int access$000(io.grpc.internal.GzipInflatingBuffer);
    Code:
       0: aload_0
       1: getfield      #6                  // Field inflaterInputEnd:I
       4: ireturn

  static int access$100(io.grpc.internal.GzipInflatingBuffer);
    Code:
       0: aload_0
       1: getfield      #5                  // Field inflaterInputStart:I
       4: ireturn

  static byte[] access$200(io.grpc.internal.GzipInflatingBuffer);
    Code:
       0: aload_0
       1: getfield      #4                  // Field inflaterInput:[B
       4: areturn

  static int access$112(io.grpc.internal.GzipInflatingBuffer, int);
    Code:
       0: aload_0
       1: dup
       2: getfield      #5                  // Field inflaterInputStart:I
       5: iload_1
       6: iadd
       7: dup_x1
       8: putfield      #5                  // Field inflaterInputStart:I
      11: ireturn

  static io.grpc.internal.CompositeReadableBuffer access$300(io.grpc.internal.GzipInflatingBuffer);
    Code:
       0: aload_0
       1: getfield      #3                  // Field gzippedData:Lio/grpc/internal/CompositeReadableBuffer;
       4: areturn

  static java.util.zip.CRC32 access$400(io.grpc.internal.GzipInflatingBuffer);
    Code:
       0: aload_0
       1: getfield      #2                  // Field crc:Ljava/util/zip/CRC32;
       4: areturn

  static int access$512(io.grpc.internal.GzipInflatingBuffer, int);
    Code:
       0: aload_0
       1: dup
       2: getfield      #1                  // Field bytesConsumed:I
       5: iload_1
       6: iadd
       7: dup_x1
       8: putfield      #1                  // Field bytesConsumed:I
      11: ireturn
}
