Compiled from "AtomicBackoff.java"
public final class io.grpc.internal.AtomicBackoff {
  private static final java.util.logging.Logger log;

  private final java.lang.String name;

  private final java.util.concurrent.atomic.AtomicLong value;

  public io.grpc.internal.AtomicBackoff(java.lang.String, long);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #5                  // class java/util/concurrent/atomic/AtomicLong
       8: dup
       9: invokespecial #6                  // Method java/util/concurrent/atomic/AtomicLong."<init>":()V
      12: putfield      #3                  // Field value:Ljava/util/concurrent/atomic/AtomicLong;
      15: lload_2
      16: lconst_0
      17: lcmp
      18: ifle          25
      21: iconst_1
      22: goto          26
      25: iconst_0
      26: ldc           #7                  // String value must be positive
      28: invokestatic  #8                  // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/Object;)V
      31: aload_0
      32: aload_1
      33: putfield      #2                  // Field name:Ljava/lang/String;
      36: aload_0
      37: getfield      #3                  // Field value:Ljava/util/concurrent/atomic/AtomicLong;
      40: lload_2
      41: invokevirtual #9                  // Method java/util/concurrent/atomic/AtomicLong.set:(J)V
      44: return

  public io.grpc.internal.AtomicBackoff$State getState();
    Code:
       0: new           #10                 // class io/grpc/internal/AtomicBackoff$State
       3: dup
       4: aload_0
       5: aload_0
       6: getfield      #3                  // Field value:Ljava/util/concurrent/atomic/AtomicLong;
       9: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
      12: aconst_null
      13: invokespecial #12                 // Method io/grpc/internal/AtomicBackoff$State."<init>":(Lio/grpc/internal/AtomicBackoff;JLio/grpc/internal/AtomicBackoff$1;)V
      16: areturn

  static java.util.concurrent.atomic.AtomicLong access$100(io.grpc.internal.AtomicBackoff);
    Code:
       0: aload_0
       1: getfield      #3                  // Field value:Ljava/util/concurrent/atomic/AtomicLong;
       4: areturn

  static java.lang.String access$200(io.grpc.internal.AtomicBackoff);
    Code:
       0: aload_0
       1: getfield      #2                  // Field name:Ljava/lang/String;
       4: areturn

  static java.util.logging.Logger access$300();
    Code:
       0: getstatic     #1                  // Field log:Ljava/util/logging/Logger;
       3: areturn

  static {};
    Code:
       0: ldc           #13                 // class io/grpc/internal/AtomicBackoff
       2: invokevirtual #14                 // Method java/lang/Class.getName:()Ljava/lang/String;
       5: invokestatic  #15                 // Method java/util/logging/Logger.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;
       8: putstatic     #1                  // Field log:Ljava/util/logging/Logger;
      11: return
}
