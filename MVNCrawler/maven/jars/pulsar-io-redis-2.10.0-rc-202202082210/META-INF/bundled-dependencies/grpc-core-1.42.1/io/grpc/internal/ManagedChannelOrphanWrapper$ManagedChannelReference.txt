Compiled from "ManagedChannelOrphanWrapper.java"
final class io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference extends java.lang.ref.WeakReference<io.grpc.internal.ManagedChannelOrphanWrapper> {
  private static final java.lang.String ALLOCATION_SITE_PROPERTY_NAME;

  private static final boolean ENABLE_ALLOCATION_TRACKING;

  private static final java.lang.RuntimeException missingCallSite;

  private final java.lang.ref.ReferenceQueue<io.grpc.internal.ManagedChannelOrphanWrapper> refqueue;

  private final java.util.concurrent.ConcurrentMap<io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference, io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference> refs;

  private final java.lang.String channelStr;

  private final java.lang.ref.Reference<java.lang.RuntimeException> allocationSite;

  private final java.util.concurrent.atomic.AtomicBoolean shutdown;

  io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference(io.grpc.internal.ManagedChannelOrphanWrapper, io.grpc.ManagedChannel, java.lang.ref.ReferenceQueue<io.grpc.internal.ManagedChannelOrphanWrapper>, java.util.concurrent.ConcurrentMap<io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference, io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_3
       3: invokespecial #2                  // Method java/lang/ref/WeakReference."<init>":(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V
       6: aload_0
       7: new           #3                  // class java/util/concurrent/atomic/AtomicBoolean
      10: dup
      11: invokespecial #4                  // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
      14: putfield      #5                  // Field shutdown:Ljava/util/concurrent/atomic/AtomicBoolean;
      17: aload_0
      18: new           #6                  // class java/lang/ref/SoftReference
      21: dup
      22: getstatic     #7                  // Field ENABLE_ALLOCATION_TRACKING:Z
      25: ifeq          40
      28: new           #8                  // class java/lang/RuntimeException
      31: dup
      32: ldc           #9                  // String ManagedChannel allocation site
      34: invokespecial #10                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;)V
      37: goto          43
      40: getstatic     #11                 // Field missingCallSite:Ljava/lang/RuntimeException;
      43: invokespecial #12                 // Method java/lang/ref/SoftReference."<init>":(Ljava/lang/Object;)V
      46: putfield      #13                 // Field allocationSite:Ljava/lang/ref/Reference;
      49: aload_0
      50: aload_2
      51: invokevirtual #14                 // Method java/lang/Object.toString:()Ljava/lang/String;
      54: putfield      #15                 // Field channelStr:Ljava/lang/String;
      57: aload_0
      58: aload_3
      59: putfield      #16                 // Field refqueue:Ljava/lang/ref/ReferenceQueue;
      62: aload_0
      63: aload         4
      65: putfield      #17                 // Field refs:Ljava/util/concurrent/ConcurrentMap;
      68: aload_0
      69: getfield      #17                 // Field refs:Ljava/util/concurrent/ConcurrentMap;
      72: aload_0
      73: aload_0
      74: invokeinterface #18,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      79: pop
      80: aload_3
      81: invokestatic  #19                 // Method cleanQueue:(Ljava/lang/ref/ReferenceQueue;)I
      84: pop
      85: return

  public void clear();
    Code:
       0: aload_0
       1: invokespecial #20                 // Method clearInternal:()V
       4: aload_0
       5: getfield      #16                 // Field refqueue:Ljava/lang/ref/ReferenceQueue;
       8: invokestatic  #19                 // Method cleanQueue:(Ljava/lang/ref/ReferenceQueue;)I
      11: pop
      12: return

  private void clearSafely();
    Code:
       0: aload_0
       1: getfield      #5                  // Field shutdown:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_1
       5: invokevirtual #21                 // Method java/util/concurrent/atomic/AtomicBoolean.getAndSet:(Z)Z
       8: ifne          15
      11: aload_0
      12: invokevirtual #22                 // Method clear:()V
      15: return

  private void clearInternal();
    Code:
       0: aload_0
       1: invokespecial #23                 // Method java/lang/ref/WeakReference.clear:()V
       4: aload_0
       5: getfield      #17                 // Field refs:Ljava/util/concurrent/ConcurrentMap;
       8: aload_0
       9: invokeinterface #24,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      14: pop
      15: aload_0
      16: getfield      #13                 // Field allocationSite:Ljava/lang/ref/Reference;
      19: invokevirtual #25                 // Method java/lang/ref/Reference.clear:()V
      22: return

  private static java.lang.RuntimeException missingCallSite();
    Code:
       0: new           #8                  // class java/lang/RuntimeException
       3: dup
       4: ldc           #27                 // String ManagedChannel allocation site not recorded.  Set -Dio.grpc.ManagedChannel.enableAllocationTracking=true to enable it
       6: invokespecial #10                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;)V
       9: astore_0
      10: aload_0
      11: iconst_0
      12: anewarray     #28                 // class java/lang/StackTraceElement
      15: invokevirtual #29                 // Method java/lang/RuntimeException.setStackTrace:([Ljava/lang/StackTraceElement;)V
      18: aload_0
      19: areturn

  static int cleanQueue(java.lang.ref.ReferenceQueue<io.grpc.internal.ManagedChannelOrphanWrapper>);
    Code:
       0: iconst_0
       1: istore_2
       2: aload_0
       3: invokevirtual #30                 // Method java/lang/ref/ReferenceQueue.poll:()Ljava/lang/ref/Reference;
       6: checkcast     #26                 // class io/grpc/internal/ManagedChannelOrphanWrapper$ManagedChannelReference
       9: dup
      10: astore_1
      11: ifnull        145
      14: aload_1
      15: getfield      #13                 // Field allocationSite:Ljava/lang/ref/Reference;
      18: invokevirtual #31                 // Method java/lang/ref/Reference.get:()Ljava/lang/Object;
      21: checkcast     #8                  // class java/lang/RuntimeException
      24: astore_3
      25: aload_1
      26: invokespecial #20                 // Method clearInternal:()V
      29: aload_1
      30: getfield      #5                  // Field shutdown:Ljava/util/concurrent/atomic/AtomicBoolean;
      33: invokevirtual #32                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
      36: ifne          142
      39: iinc          2, 1
      42: getstatic     #33                 // Field java/util/logging/Level.SEVERE:Ljava/util/logging/Level;
      45: astore        4
      47: invokestatic  #34                 // Method io/grpc/internal/ManagedChannelOrphanWrapper.access$100:()Ljava/util/logging/Logger;
      50: aload         4
      52: invokevirtual #35                 // Method java/util/logging/Logger.isLoggable:(Ljava/util/logging/Level;)Z
      55: ifeq          142
      58: new           #36                 // class java/lang/StringBuilder
      61: dup
      62: invokespecial #37                 // Method java/lang/StringBuilder."<init>":()V
      65: ldc           #38                 // String *~*~*~ Channel {0} was not shutdown properly!!! ~*~*~*
      67: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      70: ldc           #40                 // String line.separator
      72: invokestatic  #41                 // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
      75: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      78: ldc           #42                 // String     Make sure to call shutdown()/shutdownNow() and wait until awaitTermination() returns true.
      80: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      83: invokevirtual #43                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      86: astore        5
      88: new           #44                 // class java/util/logging/LogRecord
      91: dup
      92: aload         4
      94: aload         5
      96: invokespecial #45                 // Method java/util/logging/LogRecord."<init>":(Ljava/util/logging/Level;Ljava/lang/String;)V
      99: astore        6
     101: aload         6
     103: invokestatic  #34                 // Method io/grpc/internal/ManagedChannelOrphanWrapper.access$100:()Ljava/util/logging/Logger;
     106: invokevirtual #46                 // Method java/util/logging/Logger.getName:()Ljava/lang/String;
     109: invokevirtual #47                 // Method java/util/logging/LogRecord.setLoggerName:(Ljava/lang/String;)V
     112: aload         6
     114: iconst_1
     115: anewarray     #48                 // class java/lang/Object
     118: dup
     119: iconst_0
     120: aload_1
     121: getfield      #15                 // Field channelStr:Ljava/lang/String;
     124: aastore
     125: invokevirtual #49                 // Method java/util/logging/LogRecord.setParameters:([Ljava/lang/Object;)V
     128: aload         6
     130: aload_3
     131: invokevirtual #50                 // Method java/util/logging/LogRecord.setThrown:(Ljava/lang/Throwable;)V
     134: invokestatic  #34                 // Method io/grpc/internal/ManagedChannelOrphanWrapper.access$100:()Ljava/util/logging/Logger;
     137: aload         6
     139: invokevirtual #51                 // Method java/util/logging/Logger.log:(Ljava/util/logging/LogRecord;)V
     142: goto          2
     145: iload_2
     146: ireturn

  static void access$000(io.grpc.internal.ManagedChannelOrphanWrapper$ManagedChannelReference);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method clearSafely:()V
       4: return

  static {};
    Code:
       0: ldc           #52                 // String io.grpc.ManagedChannel.enableAllocationTracking
       2: ldc           #53                 // String true
       4: invokestatic  #54                 // Method java/lang/System.getProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
       7: invokestatic  #55                 // Method java/lang/Boolean.parseBoolean:(Ljava/lang/String;)Z
      10: putstatic     #7                  // Field ENABLE_ALLOCATION_TRACKING:Z
      13: invokestatic  #56                 // Method missingCallSite:()Ljava/lang/RuntimeException;
      16: putstatic     #11                 // Field missingCallSite:Ljava/lang/RuntimeException;
      19: return
}
