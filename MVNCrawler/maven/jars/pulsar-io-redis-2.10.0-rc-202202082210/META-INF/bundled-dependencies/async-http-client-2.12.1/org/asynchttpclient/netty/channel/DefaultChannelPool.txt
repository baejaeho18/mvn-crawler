Compiled from "DefaultChannelPool.java"
public final class org.asynchttpclient.netty.channel.DefaultChannelPool implements org.asynchttpclient.channel.ChannelPool {
  private static final org.slf4j.Logger LOGGER;

  private static final io.netty.util.AttributeKey<org.asynchttpclient.netty.channel.DefaultChannelPool$ChannelCreation> CHANNEL_CREATION_ATTRIBUTE_KEY;

  private final java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.util.concurrent.ConcurrentLinkedDeque<org.asynchttpclient.netty.channel.DefaultChannelPool$IdleChannel>> partitions;

  private final java.util.concurrent.atomic.AtomicBoolean isClosed;

  private final io.netty.util.Timer nettyTimer;

  private final int connectionTtl;

  private final boolean connectionTtlEnabled;

  private final int maxIdleTime;

  private final boolean maxIdleTimeEnabled;

  private final long cleanerPeriod;

  private final org.asynchttpclient.netty.channel.DefaultChannelPool$PoolLeaseStrategy poolLeaseStrategy;

  public org.asynchttpclient.netty.channel.DefaultChannelPool(org.asynchttpclient.AsyncHttpClientConfig, io.netty.util.Timer);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #9,  1            // InterfaceMethod org/asynchttpclient/AsyncHttpClientConfig.getPooledConnectionIdleTimeout:()I
       7: aload_1
       8: invokeinterface #10,  1           // InterfaceMethod org/asynchttpclient/AsyncHttpClientConfig.getConnectionTtl:()I
      13: aload_2
      14: aload_1
      15: invokeinterface #11,  1           // InterfaceMethod org/asynchttpclient/AsyncHttpClientConfig.getConnectionPoolCleanerPeriod:()I
      20: invokespecial #12                 // Method "<init>":(IILio/netty/util/Timer;I)V
      23: return

  public org.asynchttpclient.netty.channel.DefaultChannelPool(int, int, io.netty.util.Timer, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: getstatic     #13                 // Field org/asynchttpclient/netty/channel/DefaultChannelPool$PoolLeaseStrategy.LIFO:Lorg/asynchttpclient/netty/channel/DefaultChannelPool$PoolLeaseStrategy;
       6: aload_3
       7: iload         4
       9: invokespecial #14                 // Method "<init>":(IILorg/asynchttpclient/netty/channel/DefaultChannelPool$PoolLeaseStrategy;Lio/netty/util/Timer;I)V
      12: return

  public org.asynchttpclient.netty.channel.DefaultChannelPool(int, int, org.asynchttpclient.netty.channel.DefaultChannelPool$PoolLeaseStrategy, io.netty.util.Timer, int);
    Code:
       0: aload_0
       1: invokespecial #15                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #16                 // class java/util/concurrent/ConcurrentHashMap
       8: dup
       9: invokespecial #17                 // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      12: putfield      #2                  // Field partitions:Ljava/util/concurrent/ConcurrentHashMap;
      15: aload_0
      16: new           #18                 // class java/util/concurrent/atomic/AtomicBoolean
      19: dup
      20: iconst_0
      21: invokespecial #19                 // Method java/util/concurrent/atomic/AtomicBoolean."<init>":(Z)V
      24: putfield      #3                  // Field isClosed:Ljava/util/concurrent/atomic/AtomicBoolean;
      27: aload_0
      28: iload_1
      29: putfield      #7                  // Field maxIdleTime:I
      32: aload_0
      33: iload_2
      34: putfield      #20                 // Field connectionTtl:I
      37: aload_0
      38: iload_2
      39: ifle          46
      42: iconst_1
      43: goto          47
      46: iconst_0
      47: putfield      #21                 // Field connectionTtlEnabled:Z
      50: aload_0
      51: aload         4
      53: putfield      #22                 // Field nettyTimer:Lio/netty/util/Timer;
      56: aload_0
      57: iload_1
      58: ifle          65
      61: iconst_1
      62: goto          66
      65: iconst_0
      66: putfield      #8                  // Field maxIdleTimeEnabled:Z
      69: aload_0
      70: aload_3
      71: putfield      #23                 // Field poolLeaseStrategy:Lorg/asynchttpclient/netty/channel/DefaultChannelPool$PoolLeaseStrategy;
      74: aload_0
      75: iload         5
      77: aload_0
      78: getfield      #21                 // Field connectionTtlEnabled:Z
      81: ifeq          88
      84: iload_2
      85: goto          90
      88: ldc           #25                 // int 2147483647
      90: aload_0
      91: getfield      #8                  // Field maxIdleTimeEnabled:Z
      94: ifeq          101
      97: iload_1
      98: goto          103
     101: ldc           #25                 // int 2147483647
     103: invokestatic  #26                 // Method java/lang/Math.min:(II)I
     106: invokestatic  #26                 // Method java/lang/Math.min:(II)I
     109: i2l
     110: putfield      #27                 // Field cleanerPeriod:J
     113: aload_0
     114: getfield      #21                 // Field connectionTtlEnabled:Z
     117: ifne          127
     120: aload_0
     121: getfield      #8                  // Field maxIdleTimeEnabled:Z
     124: ifeq          140
     127: aload_0
     128: new           #28                 // class org/asynchttpclient/netty/channel/DefaultChannelPool$IdleChannelDetector
     131: dup
     132: aload_0
     133: aconst_null
     134: invokespecial #29                 // Method org/asynchttpclient/netty/channel/DefaultChannelPool$IdleChannelDetector."<init>":(Lorg/asynchttpclient/netty/channel/DefaultChannelPool;Lorg/asynchttpclient/netty/channel/DefaultChannelPool$1;)V
     137: invokespecial #1                  // Method scheduleNewIdleChannelDetector:(Lio/netty/util/TimerTask;)V
     140: return

  private void scheduleNewIdleChannelDetector(io.netty.util.TimerTask);
    Code:
       0: aload_0
       1: getfield      #22                 // Field nettyTimer:Lio/netty/util/Timer;
       4: aload_1
       5: aload_0
       6: getfield      #27                 // Field cleanerPeriod:J
       9: getstatic     #30                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      12: invokeinterface #31,  5           // InterfaceMethod io/netty/util/Timer.newTimeout:(Lio/netty/util/TimerTask;JLjava/util/concurrent/TimeUnit;)Lio/netty/util/Timeout;
      17: pop
      18: return

  private boolean isTtlExpired(io.netty.channel.Channel, long);
    Code:
       0: aload_0
       1: getfield      #21                 // Field connectionTtlEnabled:Z
       4: ifne          9
       7: iconst_0
       8: ireturn
       9: aload_1
      10: getstatic     #32                 // Field CHANNEL_CREATION_ATTRIBUTE_KEY:Lio/netty/util/AttributeKey;
      13: invokeinterface #33,  2           // InterfaceMethod io/netty/channel/Channel.attr:(Lio/netty/util/AttributeKey;)Lio/netty/util/Attribute;
      18: invokeinterface #34,  1           // InterfaceMethod io/netty/util/Attribute.get:()Ljava/lang/Object;
      23: checkcast     #35                 // class org/asynchttpclient/netty/channel/DefaultChannelPool$ChannelCreation
      26: astore        4
      28: aload         4
      30: ifnull        53
      33: lload_2
      34: aload         4
      36: getfield      #36                 // Field org/asynchttpclient/netty/channel/DefaultChannelPool$ChannelCreation.creationTime:J
      39: lsub
      40: aload_0
      41: getfield      #20                 // Field connectionTtl:I
      44: i2l
      45: lcmp
      46: iflt          53
      49: iconst_1
      50: goto          54
      53: iconst_0
      54: ireturn

  public boolean offer(io.netty.channel.Channel, java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #3                  // Field isClosed:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: invokevirtual #37                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       7: ifeq          12
      10: iconst_0
      11: ireturn
      12: invokestatic  #38                 // Method org/asynchttpclient/util/DateUtils.unpreciseMillisTime:()J
      15: lstore_3
      16: aload_0
      17: aload_1
      18: lload_3
      19: invokespecial #6                  // Method isTtlExpired:(Lio/netty/channel/Channel;J)Z
      22: ifeq          27
      25: iconst_0
      26: ireturn
      27: aload_0
      28: aload_1
      29: aload_2
      30: lload_3
      31: invokespecial #39                 // Method offer0:(Lio/netty/channel/Channel;Ljava/lang/Object;J)Z
      34: istore        5
      36: aload_0
      37: getfield      #21                 // Field connectionTtlEnabled:Z
      40: ifeq          55
      43: iload         5
      45: ifeq          55
      48: aload_0
      49: aload_1
      50: aload_2
      51: lload_3
      52: invokespecial #40                 // Method registerChannelCreation:(Lio/netty/channel/Channel;Ljava/lang/Object;J)V
      55: iload         5
      57: ireturn

  private boolean offer0(io.netty.channel.Channel, java.lang.Object, long);
    Code:
       0: aload_0
       1: getfield      #2                  // Field partitions:Ljava/util/concurrent/ConcurrentHashMap;
       4: aload_2
       5: invokevirtual #41                 // Method java/util/concurrent/ConcurrentHashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
       8: checkcast     #42                 // class java/util/concurrent/ConcurrentLinkedDeque
      11: astore        5
      13: aload         5
      15: ifnonnull     36
      18: aload_0
      19: getfield      #2                  // Field partitions:Ljava/util/concurrent/ConcurrentHashMap;
      22: aload_2
      23: invokedynamic #43,  0             // InvokeDynamic #0:apply:()Ljava/util/function/Function;
      28: invokevirtual #44                 // Method java/util/concurrent/ConcurrentHashMap.computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;
      31: checkcast     #42                 // class java/util/concurrent/ConcurrentLinkedDeque
      34: astore        5
      36: aload         5
      38: new           #45                 // class org/asynchttpclient/netty/channel/DefaultChannelPool$IdleChannel
      41: dup
      42: aload_1
      43: lload_3
      44: invokespecial #46                 // Method org/asynchttpclient/netty/channel/DefaultChannelPool$IdleChannel."<init>":(Lio/netty/channel/Channel;J)V
      47: invokevirtual #47                 // Method java/util/concurrent/ConcurrentLinkedDeque.offerFirst:(Ljava/lang/Object;)Z
      50: ireturn

  private void registerChannelCreation(io.netty.channel.Channel, java.lang.Object, long);
    Code:
       0: aload_1
       1: invokeinterface #48,  1           // InterfaceMethod io/netty/channel/Channel.id:()Lio/netty/channel/ChannelId;
       6: astore        5
       8: aload_1
       9: getstatic     #32                 // Field CHANNEL_CREATION_ATTRIBUTE_KEY:Lio/netty/util/AttributeKey;
      12: invokeinterface #33,  2           // InterfaceMethod io/netty/channel/Channel.attr:(Lio/netty/util/AttributeKey;)Lio/netty/util/Attribute;
      17: astore        6
      19: aload         6
      21: invokeinterface #34,  1           // InterfaceMethod io/netty/util/Attribute.get:()Ljava/lang/Object;
      26: ifnonnull     45
      29: aload         6
      31: new           #35                 // class org/asynchttpclient/netty/channel/DefaultChannelPool$ChannelCreation
      34: dup
      35: lload_3
      36: aload_2
      37: invokespecial #49                 // Method org/asynchttpclient/netty/channel/DefaultChannelPool$ChannelCreation."<init>":(JLjava/lang/Object;)V
      40: invokeinterface #50,  2           // InterfaceMethod io/netty/util/Attribute.set:(Ljava/lang/Object;)V
      45: return

  public io.netty.channel.Channel poll(java.lang.Object);
    Code:
       0: aconst_null
       1: astore_2
       2: aload_0
       3: getfield      #2                  // Field partitions:Ljava/util/concurrent/ConcurrentHashMap;
       6: aload_1
       7: invokevirtual #41                 // Method java/util/concurrent/ConcurrentHashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #42                 // class java/util/concurrent/ConcurrentLinkedDeque
      13: astore_3
      14: aload_3
      15: ifnull        88
      18: aload_2
      19: ifnonnull     88
      22: aload_0
      23: getfield      #23                 // Field poolLeaseStrategy:Lorg/asynchttpclient/netty/channel/DefaultChannelPool$PoolLeaseStrategy;
      26: aload_3
      27: invokevirtual #51                 // Method org/asynchttpclient/netty/channel/DefaultChannelPool$PoolLeaseStrategy.lease:(Ljava/util/Deque;)Ljava/lang/Object;
      30: checkcast     #45                 // class org/asynchttpclient/netty/channel/DefaultChannelPool$IdleChannel
      33: astore_2
      34: aload_2
      35: ifnonnull     41
      38: goto          88
      41: aload_2
      42: getfield      #52                 // Field org/asynchttpclient/netty/channel/DefaultChannelPool$IdleChannel.channel:Lio/netty/channel/Channel;
      45: invokestatic  #53                 // Method org/asynchttpclient/netty/channel/Channels.isChannelActive:(Lio/netty/channel/Channel;)Z
      48: ifne          66
      51: aconst_null
      52: astore_2
      53: getstatic     #5                  // Field LOGGER:Lorg/slf4j/Logger;
      56: ldc           #54                 // String Channel is inactive, probably remotely closed!
      58: invokeinterface #55,  2           // InterfaceMethod org/slf4j/Logger.trace:(Ljava/lang/String;)V
      63: goto          18
      66: aload_2
      67: invokevirtual #56                 // Method org/asynchttpclient/netty/channel/DefaultChannelPool$IdleChannel.takeOwnership:()Z
      70: ifne          18
      73: aconst_null
      74: astore_2
      75: getstatic     #5                  // Field LOGGER:Lorg/slf4j/Logger;
      78: ldc           #57                 // String Couldn\'t take ownership of channel, probably in the process of being expired!
      80: invokeinterface #55,  2           // InterfaceMethod org/slf4j/Logger.trace:(Ljava/lang/String;)V
      85: goto          18
      88: aload_2
      89: ifnull        99
      92: aload_2
      93: getfield      #52                 // Field org/asynchttpclient/netty/channel/DefaultChannelPool$IdleChannel.channel:Lio/netty/channel/Channel;
      96: goto          100
      99: aconst_null
     100: areturn

  public boolean removeAll(io.netty.channel.Channel);
    Code:
       0: aload_0
       1: getfield      #21                 // Field connectionTtlEnabled:Z
       4: ifeq          27
       7: aload_1
       8: getstatic     #32                 // Field CHANNEL_CREATION_ATTRIBUTE_KEY:Lio/netty/util/AttributeKey;
      11: invokeinterface #33,  2           // InterfaceMethod io/netty/channel/Channel.attr:(Lio/netty/util/AttributeKey;)Lio/netty/util/Attribute;
      16: invokeinterface #34,  1           // InterfaceMethod io/netty/util/Attribute.get:()Ljava/lang/Object;
      21: checkcast     #35                 // class org/asynchttpclient/netty/channel/DefaultChannelPool$ChannelCreation
      24: goto          28
      27: aconst_null
      28: astore_2
      29: aload_0
      30: getfield      #3                  // Field isClosed:Ljava/util/concurrent/atomic/AtomicBoolean;
      33: invokevirtual #37                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
      36: ifne          78
      39: aload_2
      40: ifnull        78
      43: aload_0
      44: getfield      #2                  // Field partitions:Ljava/util/concurrent/ConcurrentHashMap;
      47: aload_2
      48: getfield      #58                 // Field org/asynchttpclient/netty/channel/DefaultChannelPool$ChannelCreation.partitionKey:Ljava/lang/Object;
      51: invokevirtual #41                 // Method java/util/concurrent/ConcurrentHashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      54: checkcast     #42                 // class java/util/concurrent/ConcurrentLinkedDeque
      57: new           #45                 // class org/asynchttpclient/netty/channel/DefaultChannelPool$IdleChannel
      60: dup
      61: aload_1
      62: ldc2_w        #60                 // long -9223372036854775808l
      65: invokespecial #46                 // Method org/asynchttpclient/netty/channel/DefaultChannelPool$IdleChannel."<init>":(Lio/netty/channel/Channel;J)V
      68: invokevirtual #62                 // Method java/util/concurrent/ConcurrentLinkedDeque.remove:(Ljava/lang/Object;)Z
      71: ifeq          78
      74: iconst_1
      75: goto          79
      78: iconst_0
      79: ireturn

  public boolean isOpen();
    Code:
       0: aload_0
       1: getfield      #3                  // Field isClosed:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: invokevirtual #37                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       7: ifne          14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public void destroy();
    Code:
       0: aload_0
       1: getfield      #3                  // Field isClosed:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_1
       5: invokevirtual #63                 // Method java/util/concurrent/atomic/AtomicBoolean.getAndSet:(Z)Z
       8: ifeq          12
      11: return
      12: aload_0
      13: getfield      #2                  // Field partitions:Ljava/util/concurrent/ConcurrentHashMap;
      16: invokevirtual #64                 // Method java/util/concurrent/ConcurrentHashMap.clear:()V
      19: return

  private void close(io.netty.channel.Channel);
    Code:
       0: aload_1
       1: invokestatic  #65                 // Method org/asynchttpclient/netty/channel/Channels.setDiscard:(Lio/netty/channel/Channel;)V
       4: aload_1
       5: invokestatic  #66                 // Method org/asynchttpclient/netty/channel/Channels.silentlyCloseChannel:(Lio/netty/channel/Channel;)V
       8: return

  private void flushPartition(java.lang.Object, java.util.concurrent.ConcurrentLinkedDeque<org.asynchttpclient.netty.channel.DefaultChannelPool$IdleChannel>);
    Code:
       0: aload_2
       1: ifnull        50
       4: aload_0
       5: getfield      #2                  // Field partitions:Ljava/util/concurrent/ConcurrentHashMap;
       8: aload_1
       9: invokevirtual #67                 // Method java/util/concurrent/ConcurrentHashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      12: pop
      13: aload_2
      14: invokevirtual #68                 // Method java/util/concurrent/ConcurrentLinkedDeque.iterator:()Ljava/util/Iterator;
      17: astore_3
      18: aload_3
      19: invokeinterface #69,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      24: ifeq          50
      27: aload_3
      28: invokeinterface #70,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      33: checkcast     #45                 // class org/asynchttpclient/netty/channel/DefaultChannelPool$IdleChannel
      36: astore        4
      38: aload_0
      39: aload         4
      41: getfield      #52                 // Field org/asynchttpclient/netty/channel/DefaultChannelPool$IdleChannel.channel:Lio/netty/channel/Channel;
      44: invokespecial #4                  // Method close:(Lio/netty/channel/Channel;)V
      47: goto          18
      50: return

  public void flushPartitions(java.util.function.Predicate<java.lang.Object>);
    Code:
       0: aload_0
       1: getfield      #2                  // Field partitions:Ljava/util/concurrent/ConcurrentHashMap;
       4: invokevirtual #71                 // Method java/util/concurrent/ConcurrentHashMap.entrySet:()Ljava/util/Set;
       7: invokeinterface #72,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      12: astore_2
      13: aload_2
      14: invokeinterface #69,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      19: ifeq          69
      22: aload_2
      23: invokeinterface #70,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      28: checkcast     #73                 // class java/util/Map$Entry
      31: astore_3
      32: aload_3
      33: invokeinterface #74,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      38: astore        4
      40: aload_1
      41: aload         4
      43: invokeinterface #75,  2           // InterfaceMethod java/util/function/Predicate.test:(Ljava/lang/Object;)Z
      48: ifeq          66
      51: aload_0
      52: aload         4
      54: aload_3
      55: invokeinterface #76,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      60: checkcast     #42                 // class java/util/concurrent/ConcurrentLinkedDeque
      63: invokespecial #77                 // Method flushPartition:(Ljava/lang/Object;Ljava/util/concurrent/ConcurrentLinkedDeque;)V
      66: goto          13
      69: return

  public java.util.Map<java.lang.String, java.lang.Long> getIdleChannelCountPerHost();
    Code:
       0: aload_0
       1: getfield      #2                  // Field partitions:Ljava/util/concurrent/ConcurrentHashMap;
       4: invokevirtual #78                 // Method java/util/concurrent/ConcurrentHashMap.values:()Ljava/util/Collection;
       7: invokeinterface #79,  1           // InterfaceMethod java/util/Collection.stream:()Ljava/util/stream/Stream;
      12: invokedynamic #80,  0             // InvokeDynamic #1:apply:()Ljava/util/function/Function;
      17: invokeinterface #81,  2           // InterfaceMethod java/util/stream/Stream.flatMap:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      22: invokedynamic #82,  0             // InvokeDynamic #2:apply:()Ljava/util/function/Function;
      27: invokeinterface #83,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      32: invokedynamic #84,  0             // InvokeDynamic #3:test:()Ljava/util/function/Predicate;
      37: invokeinterface #85,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      42: invokedynamic #86,  0             // InvokeDynamic #4:apply:()Ljava/util/function/Function;
      47: invokeinterface #83,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      52: invokedynamic #87,  0             // InvokeDynamic #5:apply:()Ljava/util/function/Function;
      57: invokeinterface #83,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      62: invokestatic  #88                 // InterfaceMethod java/util/function/Function.identity:()Ljava/util/function/Function;
      65: invokestatic  #89                 // Method java/util/stream/Collectors.counting:()Ljava/util/stream/Collector;
      68: invokestatic  #90                 // Method java/util/stream/Collectors.groupingBy:(Ljava/util/function/Function;Ljava/util/stream/Collector;)Ljava/util/stream/Collector;
      71: invokeinterface #91,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      76: checkcast     #92                 // class java/util/Map
      79: areturn

  private static java.net.InetSocketAddress lambda$getIdleChannelCountPerHost$3(java.net.SocketAddress);
    Code:
       0: aload_0
       1: checkcast     #93                 // class java/net/InetSocketAddress
       4: areturn

  private static boolean lambda$getIdleChannelCountPerHost$2(java.net.SocketAddress);
    Code:
       0: aload_0
       1: invokevirtual #94                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
       4: ldc           #93                 // class java/net/InetSocketAddress
       6: if_acmpne     13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  private static java.net.SocketAddress lambda$getIdleChannelCountPerHost$1(org.asynchttpclient.netty.channel.DefaultChannelPool$IdleChannel);
    Code:
       0: aload_0
       1: invokevirtual #95                 // Method org/asynchttpclient/netty/channel/DefaultChannelPool$IdleChannel.getChannel:()Lio/netty/channel/Channel;
       4: invokeinterface #96,  1           // InterfaceMethod io/netty/channel/Channel.remoteAddress:()Ljava/net/SocketAddress;
       9: areturn

  private static java.util.concurrent.ConcurrentLinkedDeque lambda$offer0$0(java.lang.Object);
    Code:
       0: new           #42                 // class java/util/concurrent/ConcurrentLinkedDeque
       3: dup
       4: invokespecial #97                 // Method java/util/concurrent/ConcurrentLinkedDeque."<init>":()V
       7: areturn

  static boolean access$200(org.asynchttpclient.netty.channel.DefaultChannelPool);
    Code:
       0: aload_0
       1: getfield      #8                  // Field maxIdleTimeEnabled:Z
       4: ireturn

  static int access$300(org.asynchttpclient.netty.channel.DefaultChannelPool);
    Code:
       0: aload_0
       1: getfield      #7                  // Field maxIdleTime:I
       4: ireturn

  static boolean access$400(org.asynchttpclient.netty.channel.DefaultChannelPool, io.netty.channel.Channel, long);
    Code:
       0: aload_0
       1: aload_1
       2: lload_2
       3: invokespecial #6                  // Method isTtlExpired:(Lio/netty/channel/Channel;J)Z
       6: ireturn

  static org.slf4j.Logger access$500();
    Code:
       0: getstatic     #5                  // Field LOGGER:Lorg/slf4j/Logger;
       3: areturn

  static void access$600(org.asynchttpclient.netty.channel.DefaultChannelPool, io.netty.channel.Channel);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #4                  // Method close:(Lio/netty/channel/Channel;)V
       5: return

  static java.util.concurrent.atomic.AtomicBoolean access$700(org.asynchttpclient.netty.channel.DefaultChannelPool);
    Code:
       0: aload_0
       1: getfield      #3                  // Field isClosed:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: areturn

  static java.util.concurrent.ConcurrentHashMap access$800(org.asynchttpclient.netty.channel.DefaultChannelPool);
    Code:
       0: aload_0
       1: getfield      #2                  // Field partitions:Ljava/util/concurrent/ConcurrentHashMap;
       4: areturn

  static void access$900(org.asynchttpclient.netty.channel.DefaultChannelPool, io.netty.util.TimerTask);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method scheduleNewIdleChannelDetector:(Lio/netty/util/TimerTask;)V
       5: return

  static {};
    Code:
       0: ldc           #98                 // class org/asynchttpclient/netty/channel/DefaultChannelPool
       2: invokestatic  #99                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #5                  // Field LOGGER:Lorg/slf4j/Logger;
       8: ldc           #100                // String channelCreation
      10: invokestatic  #101                // Method io/netty/util/AttributeKey.valueOf:(Ljava/lang/String;)Lio/netty/util/AttributeKey;
      13: putstatic     #32                 // Field CHANNEL_CREATION_ATTRIBUTE_KEY:Lio/netty/util/AttributeKey;
      16: return
}
