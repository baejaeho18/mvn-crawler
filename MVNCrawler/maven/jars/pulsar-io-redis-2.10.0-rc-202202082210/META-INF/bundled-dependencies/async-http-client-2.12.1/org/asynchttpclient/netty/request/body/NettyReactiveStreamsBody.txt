Compiled from "NettyReactiveStreamsBody.java"
public class org.asynchttpclient.netty.request.body.NettyReactiveStreamsBody implements org.asynchttpclient.netty.request.body.NettyBody {
  private static final org.slf4j.Logger LOGGER;

  private static final java.lang.String NAME_IN_CHANNEL_PIPELINE;

  private final org.reactivestreams.Publisher<io.netty.buffer.ByteBuf> publisher;

  private final long contentLength;

  public org.asynchttpclient.netty.request.body.NettyReactiveStreamsBody(org.reactivestreams.Publisher<io.netty.buffer.ByteBuf>, long);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field publisher:Lorg/reactivestreams/Publisher;
       9: aload_0
      10: lload_2
      11: putfield      #3                  // Field contentLength:J
      14: return

  public long getContentLength();
    Code:
       0: aload_0
       1: getfield      #3                  // Field contentLength:J
       4: lreturn

  public void write(io.netty.channel.Channel, org.asynchttpclient.netty.NettyResponseFuture<?>);
    Code:
       0: aload_2
       1: invokevirtual #4                  // Method org/asynchttpclient/netty/NettyResponseFuture.isStreamConsumed:()Z
       4: ifeq          20
       7: getstatic     #5                  // Field LOGGER:Lorg/slf4j/Logger;
      10: ldc           #6                  // String Stream has already been consumed and cannot be reset
      12: invokeinterface #7,  2            // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
      17: goto          71
      20: aload_2
      21: iconst_1
      22: invokevirtual #8                  // Method org/asynchttpclient/netty/NettyResponseFuture.setStreamConsumed:(Z)V
      25: new           #9                  // class org/asynchttpclient/netty/request/body/NettyReactiveStreamsBody$NettySubscriber
      28: dup
      29: aload_1
      30: aload_2
      31: invokespecial #10                 // Method org/asynchttpclient/netty/request/body/NettyReactiveStreamsBody$NettySubscriber."<init>":(Lio/netty/channel/Channel;Lorg/asynchttpclient/netty/NettyResponseFuture;)V
      34: astore_3
      35: aload_1
      36: invokeinterface #11,  1           // InterfaceMethod io/netty/channel/Channel.pipeline:()Lio/netty/channel/ChannelPipeline;
      41: ldc           #13                 // String request-body-streamer
      43: aload_3
      44: invokeinterface #14,  3           // InterfaceMethod io/netty/channel/ChannelPipeline.addLast:(Ljava/lang/String;Lio/netty/channel/ChannelHandler;)Lio/netty/channel/ChannelPipeline;
      49: pop
      50: aload_0
      51: getfield      #2                  // Field publisher:Lorg/reactivestreams/Publisher;
      54: new           #15                 // class org/asynchttpclient/netty/request/body/NettyReactiveStreamsBody$SubscriberAdapter
      57: dup
      58: aload_3
      59: invokespecial #16                 // Method org/asynchttpclient/netty/request/body/NettyReactiveStreamsBody$SubscriberAdapter."<init>":(Lorg/reactivestreams/Subscriber;)V
      62: invokeinterface #17,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
      67: aload_3
      68: invokevirtual #18                 // Method org/asynchttpclient/netty/request/body/NettyReactiveStreamsBody$NettySubscriber.delayedStart:()V
      71: return

  static {};
    Code:
       0: ldc           #12                 // class org/asynchttpclient/netty/request/body/NettyReactiveStreamsBody
       2: invokestatic  #19                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #5                  // Field LOGGER:Lorg/slf4j/Logger;
       8: return
}
