Compiled from "WriteListener.java"
public abstract class org.asynchttpclient.netty.request.WriteListener {
  private static final org.slf4j.Logger LOGGER;

  protected final org.asynchttpclient.netty.NettyResponseFuture<?> future;

  final org.asynchttpclient.handler.ProgressAsyncHandler<?> progressAsyncHandler;

  final boolean notifyHeaders;

  org.asynchttpclient.netty.request.WriteListener(org.asynchttpclient.netty.NettyResponseFuture<?>, boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field future:Lorg/asynchttpclient/netty/NettyResponseFuture;
       9: aload_0
      10: aload_1
      11: invokevirtual #3                  // Method org/asynchttpclient/netty/NettyResponseFuture.getAsyncHandler:()Lorg/asynchttpclient/AsyncHandler;
      14: instanceof    #4                  // class org/asynchttpclient/handler/ProgressAsyncHandler
      17: ifeq          30
      20: aload_1
      21: invokevirtual #3                  // Method org/asynchttpclient/netty/NettyResponseFuture.getAsyncHandler:()Lorg/asynchttpclient/AsyncHandler;
      24: checkcast     #4                  // class org/asynchttpclient/handler/ProgressAsyncHandler
      27: goto          31
      30: aconst_null
      31: putfield      #5                  // Field progressAsyncHandler:Lorg/asynchttpclient/handler/ProgressAsyncHandler;
      34: aload_0
      35: iload_2
      36: putfield      #6                  // Field notifyHeaders:Z
      39: return

  private void abortOnThrowable(io.netty.channel.Channel, java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #2                  // Field future:Lorg/asynchttpclient/netty/NettyResponseFuture;
       4: invokevirtual #7                  // Method org/asynchttpclient/netty/NettyResponseFuture.getChannelState:()Lorg/asynchttpclient/netty/channel/ChannelState;
       7: getstatic     #8                  // Field org/asynchttpclient/netty/channel/ChannelState.POOLED:Lorg/asynchttpclient/netty/channel/ChannelState;
      10: if_acmpne     55
      13: aload_2
      14: instanceof    #9                  // class java/lang/IllegalStateException
      17: ifne          41
      20: aload_2
      21: instanceof    #10                 // class java/nio/channels/ClosedChannelException
      24: ifne          41
      27: aload_2
      28: instanceof    #11                 // class javax/net/ssl/SSLException
      31: ifne          41
      34: aload_2
      35: invokestatic  #12                 // Method org/asynchttpclient/netty/future/StackTraceInspector.recoverOnReadOrWriteException:(Ljava/lang/Throwable;)Z
      38: ifeq          55
      41: getstatic     #13                 // Field LOGGER:Lorg/slf4j/Logger;
      44: ldc           #14                 // String Write exception on pooled channel, letting retry trigger
      46: aload_2
      47: invokeinterface #15,  3           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Throwable;)V
      52: goto          63
      55: aload_0
      56: getfield      #2                  // Field future:Lorg/asynchttpclient/netty/NettyResponseFuture;
      59: aload_2
      60: invokevirtual #16                 // Method org/asynchttpclient/netty/NettyResponseFuture.abort:(Ljava/lang/Throwable;)V
      63: aload_1
      64: invokestatic  #17                 // Method org/asynchttpclient/netty/channel/Channels.silentlyCloseChannel:(Lio/netty/channel/Channel;)V
      67: return

  void operationComplete(io.netty.channel.Channel, java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #2                  // Field future:Lorg/asynchttpclient/netty/NettyResponseFuture;
       4: invokevirtual #18                 // Method org/asynchttpclient/netty/NettyResponseFuture.touch:()V
       7: aload_2
       8: ifnull        18
      11: aload_0
      12: aload_1
      13: aload_2
      14: invokespecial #19                 // Method abortOnThrowable:(Lio/netty/channel/Channel;Ljava/lang/Throwable;)V
      17: return
      18: aload_0
      19: getfield      #5                  // Field progressAsyncHandler:Lorg/asynchttpclient/handler/ProgressAsyncHandler;
      22: ifnull        85
      25: aload_0
      26: getfield      #2                  // Field future:Lorg/asynchttpclient/netty/NettyResponseFuture;
      29: invokevirtual #20                 // Method org/asynchttpclient/netty/NettyResponseFuture.isInAuth:()Z
      32: ifne          49
      35: aload_0
      36: getfield      #2                  // Field future:Lorg/asynchttpclient/netty/NettyResponseFuture;
      39: invokevirtual #21                 // Method org/asynchttpclient/netty/NettyResponseFuture.isInProxyAuth:()Z
      42: ifne          49
      45: iconst_1
      46: goto          50
      49: iconst_0
      50: istore_3
      51: iload_3
      52: ifeq          85
      55: aload_0
      56: getfield      #6                  // Field notifyHeaders:Z
      59: ifeq          75
      62: aload_0
      63: getfield      #5                  // Field progressAsyncHandler:Lorg/asynchttpclient/handler/ProgressAsyncHandler;
      66: invokeinterface #22,  1           // InterfaceMethod org/asynchttpclient/handler/ProgressAsyncHandler.onHeadersWritten:()Lorg/asynchttpclient/AsyncHandler$State;
      71: pop
      72: goto          85
      75: aload_0
      76: getfield      #5                  // Field progressAsyncHandler:Lorg/asynchttpclient/handler/ProgressAsyncHandler;
      79: invokeinterface #23,  1           // InterfaceMethod org/asynchttpclient/handler/ProgressAsyncHandler.onContentWritten:()Lorg/asynchttpclient/AsyncHandler$State;
      84: pop
      85: return

  static {};
    Code:
       0: ldc           #24                 // class org/asynchttpclient/netty/request/WriteListener
       2: invokestatic  #25                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #13                 // Field LOGGER:Lorg/slf4j/Logger;
       8: return
}
