Compiled from "InputStreamMultipartPart.java"
public class org.asynchttpclient.request.body.multipart.part.InputStreamMultipartPart extends org.asynchttpclient.request.body.multipart.part.FileLikeMultipartPart<org.asynchttpclient.request.body.multipart.InputStreamPart> {
  private long position;

  private java.nio.ByteBuffer buffer;

  private java.nio.channels.ReadableByteChannel channel;

  public org.asynchttpclient.request.body.multipart.part.InputStreamMultipartPart(org.asynchttpclient.request.body.multipart.InputStreamPart, byte[]);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #1                  // Method org/asynchttpclient/request/body/multipart/part/FileLikeMultipartPart."<init>":(Lorg/asynchttpclient/request/body/multipart/FileLikePart;[B)V
       6: aload_0
       7: lconst_0
       8: putfield      #2                  // Field position:J
      11: return

  private java.nio.ByteBuffer getBuffer();
    Code:
       0: aload_0
       1: getfield      #3                  // Field buffer:Ljava/nio/ByteBuffer;
       4: ifnonnull     17
       7: aload_0
       8: sipush        8192
      11: invokestatic  #5                  // Method java/nio/ByteBuffer.allocateDirect:(I)Ljava/nio/ByteBuffer;
      14: putfield      #3                  // Field buffer:Ljava/nio/ByteBuffer;
      17: aload_0
      18: getfield      #3                  // Field buffer:Ljava/nio/ByteBuffer;
      21: areturn

  private java.nio.channels.ReadableByteChannel getChannel();
    Code:
       0: aload_0
       1: getfield      #6                  // Field channel:Ljava/nio/channels/ReadableByteChannel;
       4: ifnonnull     24
       7: aload_0
       8: aload_0
       9: getfield      #7                  // Field part:Lorg/asynchttpclient/request/body/multipart/PartBase;
      12: checkcast     #8                  // class org/asynchttpclient/request/body/multipart/InputStreamPart
      15: invokevirtual #9                  // Method org/asynchttpclient/request/body/multipart/InputStreamPart.getInputStream:()Ljava/io/InputStream;
      18: invokestatic  #10                 // Method java/nio/channels/Channels.newChannel:(Ljava/io/InputStream;)Ljava/nio/channels/ReadableByteChannel;
      21: putfield      #6                  // Field channel:Ljava/nio/channels/ReadableByteChannel;
      24: aload_0
      25: getfield      #6                  // Field channel:Ljava/nio/channels/ReadableByteChannel;
      28: areturn

  protected long getContentLength();
    Code:
       0: aload_0
       1: getfield      #7                  // Field part:Lorg/asynchttpclient/request/body/multipart/PartBase;
       4: checkcast     #8                  // class org/asynchttpclient/request/body/multipart/InputStreamPart
       7: invokevirtual #11                 // Method org/asynchttpclient/request/body/multipart/InputStreamPart.getContentLength:()J
      10: lreturn

  protected long transferContentTo(io.netty.buffer.ByteBuf) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #7                  // Field part:Lorg/asynchttpclient/request/body/multipart/PartBase;
       4: checkcast     #8                  // class org/asynchttpclient/request/body/multipart/InputStreamPart
       7: invokevirtual #9                  // Method org/asynchttpclient/request/body/multipart/InputStreamPart.getInputStream:()Ljava/io/InputStream;
      10: astore_2
      11: aload_1
      12: aload_2
      13: aload_1
      14: invokevirtual #12                 // Method io/netty/buffer/ByteBuf.writableBytes:()I
      17: invokevirtual #13                 // Method io/netty/buffer/ByteBuf.writeBytes:(Ljava/io/InputStream;I)I
      20: istore_3
      21: iload_3
      22: ifle          36
      25: aload_0
      26: dup
      27: getfield      #2                  // Field position:J
      30: iload_3
      31: i2l
      32: ladd
      33: putfield      #2                  // Field position:J
      36: aload_0
      37: getfield      #2                  // Field position:J
      40: aload_0
      41: invokevirtual #14                 // Method getContentLength:()J
      44: lcmp
      45: ifeq          52
      48: iload_3
      49: ifge          63
      52: aload_0
      53: getstatic     #15                 // Field org/asynchttpclient/request/body/multipart/part/MultipartState.POST_CONTENT:Lorg/asynchttpclient/request/body/multipart/part/MultipartState;
      56: putfield      #16                 // Field state:Lorg/asynchttpclient/request/body/multipart/part/MultipartState;
      59: aload_2
      60: invokevirtual #17                 // Method java/io/InputStream.close:()V
      63: iload_3
      64: i2l
      65: lreturn

  protected long transferContentTo(java.nio.channels.WritableByteChannel) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #18                 // Method getChannel:()Ljava/nio/channels/ReadableByteChannel;
       4: astore_2
       5: aload_0
       6: invokespecial #19                 // Method getBuffer:()Ljava/nio/ByteBuffer;
       9: astore_3
      10: iconst_0
      11: istore        4
      13: aload_2
      14: aload_3
      15: invokeinterface #20,  2           // InterfaceMethod java/nio/channels/ReadableByteChannel.read:(Ljava/nio/ByteBuffer;)I
      20: istore        5
      22: iload         5
      24: ifle          71
      27: aload_3
      28: invokevirtual #21                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;
      31: pop
      32: aload_3
      33: invokevirtual #22                 // Method java/nio/ByteBuffer.hasRemaining:()Z
      36: ifeq          54
      39: iload         4
      41: aload_1
      42: aload_3
      43: invokeinterface #23,  2           // InterfaceMethod java/nio/channels/WritableByteChannel.write:(Ljava/nio/ByteBuffer;)I
      48: iadd
      49: istore        4
      51: goto          32
      54: aload_3
      55: invokevirtual #24                 // Method java/nio/ByteBuffer.compact:()Ljava/nio/ByteBuffer;
      58: pop
      59: aload_0
      60: dup
      61: getfield      #2                  // Field position:J
      64: iload         4
      66: i2l
      67: ladd
      68: putfield      #2                  // Field position:J
      71: aload_0
      72: getfield      #2                  // Field position:J
      75: aload_0
      76: invokevirtual #14                 // Method getContentLength:()J
      79: lcmp
      80: ifeq          88
      83: iload         5
      85: ifge          110
      88: aload_0
      89: getstatic     #15                 // Field org/asynchttpclient/request/body/multipart/part/MultipartState.POST_CONTENT:Lorg/asynchttpclient/request/body/multipart/part/MultipartState;
      92: putfield      #16                 // Field state:Lorg/asynchttpclient/request/body/multipart/part/MultipartState;
      95: aload_2
      96: invokeinterface #25,  1           // InterfaceMethod java/nio/channels/ReadableByteChannel.isOpen:()Z
     101: ifeq          110
     104: aload_2
     105: invokeinterface #26,  1           // InterfaceMethod java/nio/channels/ReadableByteChannel.close:()V
     110: iload         4
     112: i2l
     113: lreturn

  public void close();
    Code:
       0: aload_0
       1: invokespecial #27                 // Method org/asynchttpclient/request/body/multipart/part/FileLikeMultipartPart.close:()V
       4: aload_0
       5: getfield      #7                  // Field part:Lorg/asynchttpclient/request/body/multipart/PartBase;
       8: checkcast     #8                  // class org/asynchttpclient/request/body/multipart/InputStreamPart
      11: invokevirtual #9                  // Method org/asynchttpclient/request/body/multipart/InputStreamPart.getInputStream:()Ljava/io/InputStream;
      14: invokestatic  #28                 // Method org/asynchttpclient/util/MiscUtils.closeSilently:(Ljava/io/Closeable;)V
      17: aload_0
      18: getfield      #6                  // Field channel:Ljava/nio/channels/ReadableByteChannel;
      21: invokestatic  #28                 // Method org/asynchttpclient/util/MiscUtils.closeSilently:(Ljava/io/Closeable;)V
      24: return
}
