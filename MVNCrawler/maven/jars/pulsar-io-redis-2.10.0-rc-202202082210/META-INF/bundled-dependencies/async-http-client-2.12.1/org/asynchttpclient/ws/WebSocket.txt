Compiled from "WebSocket.java"
public interface org.asynchttpclient.ws.WebSocket {
  public abstract io.netty.handler.codec.http.HttpHeaders getUpgradeHeaders();

  public abstract java.net.SocketAddress getRemoteAddress();

  public abstract java.net.SocketAddress getLocalAddress();

  public abstract io.netty.util.concurrent.Future<java.lang.Void> sendTextFrame(java.lang.String);

  public abstract io.netty.util.concurrent.Future<java.lang.Void> sendTextFrame(java.lang.String, boolean, int);

  public abstract io.netty.util.concurrent.Future<java.lang.Void> sendTextFrame(io.netty.buffer.ByteBuf, boolean, int);

  public abstract io.netty.util.concurrent.Future<java.lang.Void> sendBinaryFrame(byte[]);

  public abstract io.netty.util.concurrent.Future<java.lang.Void> sendBinaryFrame(byte[], boolean, int);

  public abstract io.netty.util.concurrent.Future<java.lang.Void> sendBinaryFrame(io.netty.buffer.ByteBuf, boolean, int);

  public abstract io.netty.util.concurrent.Future<java.lang.Void> sendContinuationFrame(java.lang.String, boolean, int);

  public abstract io.netty.util.concurrent.Future<java.lang.Void> sendContinuationFrame(byte[], boolean, int);

  public abstract io.netty.util.concurrent.Future<java.lang.Void> sendContinuationFrame(io.netty.buffer.ByteBuf, boolean, int);

  public abstract io.netty.util.concurrent.Future<java.lang.Void> sendPingFrame();

  public abstract io.netty.util.concurrent.Future<java.lang.Void> sendPingFrame(byte[]);

  public abstract io.netty.util.concurrent.Future<java.lang.Void> sendPingFrame(io.netty.buffer.ByteBuf);

  public abstract io.netty.util.concurrent.Future<java.lang.Void> sendPongFrame();

  public abstract io.netty.util.concurrent.Future<java.lang.Void> sendPongFrame(byte[]);

  public abstract io.netty.util.concurrent.Future<java.lang.Void> sendPongFrame(io.netty.buffer.ByteBuf);

  public abstract io.netty.util.concurrent.Future<java.lang.Void> sendCloseFrame();

  public abstract io.netty.util.concurrent.Future<java.lang.Void> sendCloseFrame(int, java.lang.String);

  public abstract boolean isOpen();

  public abstract org.asynchttpclient.ws.WebSocket addWebSocketListener(org.asynchttpclient.ws.WebSocketListener);

  public abstract org.asynchttpclient.ws.WebSocket removeWebSocketListener(org.asynchttpclient.ws.WebSocketListener);
}
