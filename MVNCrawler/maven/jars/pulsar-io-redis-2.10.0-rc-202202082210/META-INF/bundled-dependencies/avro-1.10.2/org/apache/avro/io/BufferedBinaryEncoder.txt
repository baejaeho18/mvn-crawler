Compiled from "BufferedBinaryEncoder.java"
public class org.apache.avro.io.BufferedBinaryEncoder extends org.apache.avro.io.BinaryEncoder {
  private byte[] buf;

  private int pos;

  private org.apache.avro.io.BufferedBinaryEncoder$ByteSink sink;

  private int bulkLimit;

  org.apache.avro.io.BufferedBinaryEncoder(java.io.OutputStream, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/avro/io/BinaryEncoder."<init>":()V
       4: aload_0
       5: aload_1
       6: iload_2
       7: invokevirtual #2                  // Method configure:(Ljava/io/OutputStream;I)Lorg/apache/avro/io/BufferedBinaryEncoder;
      10: pop
      11: return

  org.apache.avro.io.BufferedBinaryEncoder configure(java.io.OutputStream, int);
    Code:
       0: aload_1
       1: ldc           #3                  // String OutputStream cannot be null
       3: invokestatic  #4                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aconst_null
       8: aload_0
       9: getfield      #5                  // Field sink:Lorg/apache/avro/io/BufferedBinaryEncoder$ByteSink;
      12: if_acmpeq     41
      15: aload_0
      16: getfield      #6                  // Field pos:I
      19: ifle          41
      22: aload_0
      23: invokespecial #7                  // Method flushBuffer:()V
      26: goto          41
      29: astore_3
      30: new           #9                  // class org/apache/avro/AvroRuntimeException
      33: dup
      34: ldc           #10                 // String Failure flushing old output
      36: aload_3
      37: invokespecial #11                 // Method org/apache/avro/AvroRuntimeException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      40: athrow
      41: aload_0
      42: new           #12                 // class org/apache/avro/io/BufferedBinaryEncoder$OutputStreamSink
      45: dup
      46: aload_1
      47: aconst_null
      48: invokespecial #13                 // Method org/apache/avro/io/BufferedBinaryEncoder$OutputStreamSink."<init>":(Ljava/io/OutputStream;Lorg/apache/avro/io/BufferedBinaryEncoder$1;)V
      51: putfield      #5                  // Field sink:Lorg/apache/avro/io/BufferedBinaryEncoder$ByteSink;
      54: aload_0
      55: iconst_0
      56: putfield      #6                  // Field pos:I
      59: aconst_null
      60: aload_0
      61: getfield      #14                 // Field buf:[B
      64: if_acmpeq     76
      67: aload_0
      68: getfield      #14                 // Field buf:[B
      71: arraylength
      72: iload_2
      73: if_icmpeq     83
      76: aload_0
      77: iload_2
      78: newarray       byte
      80: putfield      #14                 // Field buf:[B
      83: aload_0
      84: aload_0
      85: getfield      #14                 // Field buf:[B
      88: arraylength
      89: iconst_1
      90: iushr
      91: putfield      #15                 // Field bulkLimit:I
      94: aload_0
      95: getfield      #15                 // Field bulkLimit:I
      98: sipush        512
     101: if_icmple     111
     104: aload_0
     105: sipush        512
     108: putfield      #15                 // Field bulkLimit:I
     111: aload_0
     112: areturn
    Exception table:
       from    to  target type
          22    26    29   Class java/io/IOException

  public void flush() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #7                  // Method flushBuffer:()V
       4: aload_0
       5: getfield      #5                  // Field sink:Lorg/apache/avro/io/BufferedBinaryEncoder$ByteSink;
       8: invokevirtual #16                 // Method org/apache/avro/io/BufferedBinaryEncoder$ByteSink.innerFlush:()V
      11: return

  private void flushBuffer() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #6                  // Field pos:I
       4: ifle          39
       7: aload_0
       8: getfield      #5                  // Field sink:Lorg/apache/avro/io/BufferedBinaryEncoder$ByteSink;
      11: aload_0
      12: getfield      #14                 // Field buf:[B
      15: iconst_0
      16: aload_0
      17: getfield      #6                  // Field pos:I
      20: invokevirtual #17                 // Method org/apache/avro/io/BufferedBinaryEncoder$ByteSink.innerWrite:([BII)V
      23: aload_0
      24: iconst_0
      25: putfield      #6                  // Field pos:I
      28: goto          39
      31: astore_1
      32: aload_0
      33: iconst_0
      34: putfield      #6                  // Field pos:I
      37: aload_1
      38: athrow
      39: return
    Exception table:
       from    to  target type
           7    23    31   any

  private void ensureBounds(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #14                 // Field buf:[B
       4: arraylength
       5: aload_0
       6: getfield      #6                  // Field pos:I
       9: isub
      10: istore_2
      11: iload_2
      12: iload_1
      13: if_icmpge     20
      16: aload_0
      17: invokespecial #7                  // Method flushBuffer:()V
      20: return

  public void writeBoolean(boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #14                 // Field buf:[B
       4: arraylength
       5: aload_0
       6: getfield      #6                  // Field pos:I
       9: if_icmpne     16
      12: aload_0
      13: invokespecial #7                  // Method flushBuffer:()V
      16: aload_0
      17: dup
      18: getfield      #6                  // Field pos:I
      21: iload_1
      22: aload_0
      23: getfield      #14                 // Field buf:[B
      26: aload_0
      27: getfield      #6                  // Field pos:I
      30: invokestatic  #18                 // Method org/apache/avro/io/BinaryData.encodeBoolean:(Z[BI)I
      33: iadd
      34: putfield      #6                  // Field pos:I
      37: return

  public void writeInt(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: iconst_5
       2: invokespecial #19                 // Method ensureBounds:(I)V
       5: aload_0
       6: dup
       7: getfield      #6                  // Field pos:I
      10: iload_1
      11: aload_0
      12: getfield      #14                 // Field buf:[B
      15: aload_0
      16: getfield      #6                  // Field pos:I
      19: invokestatic  #20                 // Method org/apache/avro/io/BinaryData.encodeInt:(I[BI)I
      22: iadd
      23: putfield      #6                  // Field pos:I
      26: return

  public void writeLong(long) throws java.io.IOException;
    Code:
       0: aload_0
       1: bipush        10
       3: invokespecial #19                 // Method ensureBounds:(I)V
       6: aload_0
       7: dup
       8: getfield      #6                  // Field pos:I
      11: lload_1
      12: aload_0
      13: getfield      #14                 // Field buf:[B
      16: aload_0
      17: getfield      #6                  // Field pos:I
      20: invokestatic  #21                 // Method org/apache/avro/io/BinaryData.encodeLong:(J[BI)I
      23: iadd
      24: putfield      #6                  // Field pos:I
      27: return

  public void writeFloat(float) throws java.io.IOException;
    Code:
       0: aload_0
       1: iconst_4
       2: invokespecial #19                 // Method ensureBounds:(I)V
       5: aload_0
       6: dup
       7: getfield      #6                  // Field pos:I
      10: fload_1
      11: aload_0
      12: getfield      #14                 // Field buf:[B
      15: aload_0
      16: getfield      #6                  // Field pos:I
      19: invokestatic  #22                 // Method org/apache/avro/io/BinaryData.encodeFloat:(F[BI)I
      22: iadd
      23: putfield      #6                  // Field pos:I
      26: return

  public void writeDouble(double) throws java.io.IOException;
    Code:
       0: aload_0
       1: bipush        8
       3: invokespecial #19                 // Method ensureBounds:(I)V
       6: aload_0
       7: dup
       8: getfield      #6                  // Field pos:I
      11: dload_1
      12: aload_0
      13: getfield      #14                 // Field buf:[B
      16: aload_0
      17: getfield      #6                  // Field pos:I
      20: invokestatic  #23                 // Method org/apache/avro/io/BinaryData.encodeDouble:(D[BI)I
      23: iadd
      24: putfield      #6                  // Field pos:I
      27: return

  public void writeFixed(byte[], int, int) throws java.io.IOException;
    Code:
       0: iload_3
       1: aload_0
       2: getfield      #15                 // Field bulkLimit:I
       5: if_icmple     23
       8: aload_0
       9: invokespecial #7                  // Method flushBuffer:()V
      12: aload_0
      13: getfield      #5                  // Field sink:Lorg/apache/avro/io/BufferedBinaryEncoder$ByteSink;
      16: aload_1
      17: iload_2
      18: iload_3
      19: invokevirtual #17                 // Method org/apache/avro/io/BufferedBinaryEncoder$ByteSink.innerWrite:([BII)V
      22: return
      23: aload_0
      24: iload_3
      25: invokespecial #19                 // Method ensureBounds:(I)V
      28: aload_1
      29: iload_2
      30: aload_0
      31: getfield      #14                 // Field buf:[B
      34: aload_0
      35: getfield      #6                  // Field pos:I
      38: iload_3
      39: invokestatic  #24                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      42: aload_0
      43: dup
      44: getfield      #6                  // Field pos:I
      47: iload_3
      48: iadd
      49: putfield      #6                  // Field pos:I
      52: return

  public void writeFixed(java.nio.ByteBuffer) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokevirtual #25                 // Method java/nio/ByteBuffer.asReadOnlyBuffer:()Ljava/nio/ByteBuffer;
       4: astore_2
       5: aload_1
       6: invokevirtual #26                 // Method java/nio/ByteBuffer.hasArray:()Z
       9: ifne          38
      12: aload_1
      13: invokevirtual #27                 // Method java/nio/ByteBuffer.remaining:()I
      16: aload_0
      17: getfield      #15                 // Field bulkLimit:I
      20: if_icmple     38
      23: aload_0
      24: invokespecial #7                  // Method flushBuffer:()V
      27: aload_0
      28: getfield      #5                  // Field sink:Lorg/apache/avro/io/BufferedBinaryEncoder$ByteSink;
      31: aload_2
      32: invokevirtual #28                 // Method org/apache/avro/io/BufferedBinaryEncoder$ByteSink.innerWrite:(Ljava/nio/ByteBuffer;)V
      35: goto          43
      38: aload_0
      39: aload_2
      40: invokespecial #29                 // Method org/apache/avro/io/BinaryEncoder.writeFixed:(Ljava/nio/ByteBuffer;)V
      43: return

  protected void writeZero() throws java.io.IOException;
    Code:
       0: aload_0
       1: iconst_0
       2: invokespecial #30                 // Method writeByte:(I)V
       5: return

  private void writeByte(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #6                  // Field pos:I
       4: aload_0
       5: getfield      #14                 // Field buf:[B
       8: arraylength
       9: if_icmpne     16
      12: aload_0
      13: invokespecial #7                  // Method flushBuffer:()V
      16: aload_0
      17: getfield      #14                 // Field buf:[B
      20: aload_0
      21: dup
      22: getfield      #6                  // Field pos:I
      25: dup_x1
      26: iconst_1
      27: iadd
      28: putfield      #6                  // Field pos:I
      31: iload_1
      32: sipush        255
      35: iand
      36: i2b
      37: bastore
      38: return

  public int bytesBuffered();
    Code:
       0: aload_0
       1: getfield      #6                  // Field pos:I
       4: ireturn
}
