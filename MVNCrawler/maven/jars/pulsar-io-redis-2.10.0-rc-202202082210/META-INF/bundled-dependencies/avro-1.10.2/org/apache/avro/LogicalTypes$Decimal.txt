Compiled from "LogicalTypes.java"
public class org.apache.avro.LogicalTypes$Decimal extends org.apache.avro.LogicalType {
  private static final java.lang.String PRECISION_PROP;

  private static final java.lang.String SCALE_PROP;

  private final int precision;

  private final int scale;

  private org.apache.avro.LogicalTypes$Decimal(int, int);
    Code:
       0: aload_0
       1: ldc           #4                  // String decimal
       3: invokespecial #5                  // Method org/apache/avro/LogicalType."<init>":(Ljava/lang/String;)V
       6: aload_0
       7: iload_1
       8: putfield      #6                  // Field precision:I
      11: aload_0
      12: iload_2
      13: putfield      #7                  // Field scale:I
      16: return

  private org.apache.avro.LogicalTypes$Decimal(org.apache.avro.Schema);
    Code:
       0: aload_0
       1: ldc           #4                  // String decimal
       3: invokespecial #5                  // Method org/apache/avro/LogicalType."<init>":(Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: ldc           #9                  // String precision
      10: invokespecial #10                 // Method hasProperty:(Lorg/apache/avro/Schema;Ljava/lang/String;)Z
      13: ifne          26
      16: new           #11                 // class java/lang/IllegalArgumentException
      19: dup
      20: ldc           #12                 // String Invalid decimal: missing precision
      22: invokespecial #13                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      25: athrow
      26: aload_0
      27: aload_0
      28: aload_1
      29: ldc           #9                  // String precision
      31: invokespecial #14                 // Method getInt:(Lorg/apache/avro/Schema;Ljava/lang/String;)I
      34: putfield      #6                  // Field precision:I
      37: aload_0
      38: aload_1
      39: ldc           #15                 // String scale
      41: invokespecial #10                 // Method hasProperty:(Lorg/apache/avro/Schema;Ljava/lang/String;)Z
      44: ifeq          61
      47: aload_0
      48: aload_0
      49: aload_1
      50: ldc           #15                 // String scale
      52: invokespecial #14                 // Method getInt:(Lorg/apache/avro/Schema;Ljava/lang/String;)I
      55: putfield      #7                  // Field scale:I
      58: goto          66
      61: aload_0
      62: iconst_0
      63: putfield      #7                  // Field scale:I
      66: return

  public org.apache.avro.Schema addToSchema(org.apache.avro.Schema);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #16                 // Method org/apache/avro/LogicalType.addToSchema:(Lorg/apache/avro/Schema;)Lorg/apache/avro/Schema;
       5: pop
       6: aload_1
       7: ldc           #9                  // String precision
       9: aload_0
      10: getfield      #6                  // Field precision:I
      13: invokestatic  #17                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      16: invokevirtual #18                 // Method org/apache/avro/Schema.addProp:(Ljava/lang/String;Ljava/lang/Object;)V
      19: aload_1
      20: ldc           #15                 // String scale
      22: aload_0
      23: getfield      #7                  // Field scale:I
      26: invokestatic  #17                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      29: invokevirtual #18                 // Method org/apache/avro/Schema.addProp:(Ljava/lang/String;Ljava/lang/Object;)V
      32: aload_1
      33: areturn

  public int getPrecision();
    Code:
       0: aload_0
       1: getfield      #6                  // Field precision:I
       4: ireturn

  public int getScale();
    Code:
       0: aload_0
       1: getfield      #7                  // Field scale:I
       4: ireturn

  public void validate(org.apache.avro.Schema);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #19                 // Method org/apache/avro/LogicalType.validate:(Lorg/apache/avro/Schema;)V
       5: aload_1
       6: invokevirtual #20                 // Method org/apache/avro/Schema.getType:()Lorg/apache/avro/Schema$Type;
       9: getstatic     #21                 // Field org/apache/avro/Schema$Type.FIXED:Lorg/apache/avro/Schema$Type;
      12: if_acmpeq     35
      15: aload_1
      16: invokevirtual #20                 // Method org/apache/avro/Schema.getType:()Lorg/apache/avro/Schema$Type;
      19: getstatic     #22                 // Field org/apache/avro/Schema$Type.BYTES:Lorg/apache/avro/Schema$Type;
      22: if_acmpeq     35
      25: new           #11                 // class java/lang/IllegalArgumentException
      28: dup
      29: ldc           #23                 // String Logical type decimal must be backed by fixed or bytes
      31: invokespecial #13                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      34: athrow
      35: aload_0
      36: getfield      #6                  // Field precision:I
      39: ifgt          77
      42: new           #11                 // class java/lang/IllegalArgumentException
      45: dup
      46: new           #24                 // class java/lang/StringBuilder
      49: dup
      50: invokespecial #25                 // Method java/lang/StringBuilder."<init>":()V
      53: ldc           #26                 // String Invalid decimal precision:
      55: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      58: aload_0
      59: getfield      #6                  // Field precision:I
      62: invokevirtual #28                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      65: ldc           #29                 // String  (must be positive)
      67: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      70: invokevirtual #30                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      73: invokespecial #13                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      76: athrow
      77: aload_0
      78: getfield      #6                  // Field precision:I
      81: i2l
      82: aload_0
      83: aload_1
      84: invokespecial #31                 // Method maxPrecision:(Lorg/apache/avro/Schema;)J
      87: lcmp
      88: ifle          151
      91: new           #11                 // class java/lang/IllegalArgumentException
      94: dup
      95: new           #24                 // class java/lang/StringBuilder
      98: dup
      99: invokespecial #25                 // Method java/lang/StringBuilder."<init>":()V
     102: ldc           #32                 // String fixed(
     104: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     107: aload_1
     108: invokevirtual #33                 // Method org/apache/avro/Schema.getFixedSize:()I
     111: invokevirtual #28                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     114: ldc           #34                 // String ) cannot store
     116: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     119: aload_0
     120: getfield      #6                  // Field precision:I
     123: invokevirtual #28                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     126: ldc           #35                 // String  digits (max
     128: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     131: aload_0
     132: aload_1
     133: invokespecial #31                 // Method maxPrecision:(Lorg/apache/avro/Schema;)J
     136: invokevirtual #36                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
     139: ldc           #37                 // String )
     141: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     144: invokevirtual #30                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     147: invokespecial #13                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     150: athrow
     151: aload_0
     152: getfield      #7                  // Field scale:I
     155: ifge          193
     158: new           #11                 // class java/lang/IllegalArgumentException
     161: dup
     162: new           #24                 // class java/lang/StringBuilder
     165: dup
     166: invokespecial #25                 // Method java/lang/StringBuilder."<init>":()V
     169: ldc           #38                 // String Invalid decimal scale:
     171: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     174: aload_0
     175: getfield      #7                  // Field scale:I
     178: invokevirtual #28                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     181: ldc           #29                 // String  (must be positive)
     183: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     186: invokevirtual #30                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     189: invokespecial #13                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     192: athrow
     193: aload_0
     194: getfield      #7                  // Field scale:I
     197: aload_0
     198: getfield      #6                  // Field precision:I
     201: if_icmple     251
     204: new           #11                 // class java/lang/IllegalArgumentException
     207: dup
     208: new           #24                 // class java/lang/StringBuilder
     211: dup
     212: invokespecial #25                 // Method java/lang/StringBuilder."<init>":()V
     215: ldc           #38                 // String Invalid decimal scale:
     217: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     220: aload_0
     221: getfield      #7                  // Field scale:I
     224: invokevirtual #28                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     227: ldc           #39                 // String  (greater than precision:
     229: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     232: aload_0
     233: getfield      #6                  // Field precision:I
     236: invokevirtual #28                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     239: ldc           #37                 // String )
     241: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     244: invokevirtual #30                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     247: invokespecial #13                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     250: athrow
     251: return

  private long maxPrecision(org.apache.avro.Schema);
    Code:
       0: aload_1
       1: invokevirtual #20                 // Method org/apache/avro/Schema.getType:()Lorg/apache/avro/Schema$Type;
       4: getstatic     #22                 // Field org/apache/avro/Schema$Type.BYTES:Lorg/apache/avro/Schema$Type;
       7: if_acmpne     14
      10: ldc2_w        #41                 // long 2147483647l
      13: lreturn
      14: aload_1
      15: invokevirtual #20                 // Method org/apache/avro/Schema.getType:()Lorg/apache/avro/Schema$Type;
      18: getstatic     #21                 // Field org/apache/avro/Schema$Type.FIXED:Lorg/apache/avro/Schema$Type;
      21: if_acmpne     50
      24: aload_1
      25: invokevirtual #33                 // Method org/apache/avro/Schema.getFixedSize:()I
      28: istore_2
      29: ldc2_w        #43                 // double 2.0d
      32: invokestatic  #45                 // Method java/lang/Math.log10:(D)D
      35: bipush        8
      37: iload_2
      38: imul
      39: iconst_1
      40: isub
      41: i2d
      42: dmul
      43: invokestatic  #46                 // Method java/lang/Math.floor:(D)D
      46: invokestatic  #47                 // Method java/lang/Math.round:(D)J
      49: lreturn
      50: lconst_0
      51: lreturn

  private boolean hasProperty(org.apache.avro.Schema, java.lang.String);
    Code:
       0: aload_1
       1: aload_2
       2: invokevirtual #48                 // Method org/apache/avro/Schema.getObjectProp:(Ljava/lang/String;)Ljava/lang/Object;
       5: ifnull        12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  private int getInt(org.apache.avro.Schema, java.lang.String);
    Code:
       0: aload_1
       1: aload_2
       2: invokevirtual #48                 // Method org/apache/avro/Schema.getObjectProp:(Ljava/lang/String;)Ljava/lang/Object;
       5: astore_3
       6: aload_3
       7: instanceof    #40                 // class java/lang/Integer
      10: ifeq          21
      13: aload_3
      14: checkcast     #40                 // class java/lang/Integer
      17: invokevirtual #49                 // Method java/lang/Integer.intValue:()I
      20: ireturn
      21: new           #11                 // class java/lang/IllegalArgumentException
      24: dup
      25: new           #24                 // class java/lang/StringBuilder
      28: dup
      29: invokespecial #25                 // Method java/lang/StringBuilder."<init>":()V
      32: ldc           #50                 // String Expected int
      34: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      37: aload_2
      38: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      41: ldc           #51                 // String :
      43: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      46: aload_3
      47: ifnonnull     55
      50: ldc           #52                 // String null
      52: goto          84
      55: new           #24                 // class java/lang/StringBuilder
      58: dup
      59: invokespecial #25                 // Method java/lang/StringBuilder."<init>":()V
      62: aload_3
      63: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      66: ldc           #54                 // String :
      68: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      71: aload_3
      72: invokevirtual #55                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      75: invokevirtual #56                 // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
      78: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      81: invokevirtual #30                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      84: invokevirtual #27                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      87: invokevirtual #30                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      90: invokespecial #13                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      93: athrow

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: ifnull        22
      11: aload_0
      12: invokevirtual #55                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      15: aload_1
      16: invokevirtual #55                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      19: if_acmpeq     24
      22: iconst_0
      23: ireturn
      24: aload_1
      25: checkcast     #8                  // class org/apache/avro/LogicalTypes$Decimal
      28: astore_2
      29: aload_0
      30: getfield      #6                  // Field precision:I
      33: aload_2
      34: getfield      #6                  // Field precision:I
      37: if_icmpeq     42
      40: iconst_0
      41: ireturn
      42: aload_0
      43: getfield      #7                  // Field scale:I
      46: aload_2
      47: getfield      #7                  // Field scale:I
      50: if_icmpne     57
      53: iconst_1
      54: goto          58
      57: iconst_0
      58: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #6                  // Field precision:I
       4: istore_1
       5: bipush        31
       7: iload_1
       8: imul
       9: aload_0
      10: getfield      #7                  // Field scale:I
      13: iadd
      14: istore_1
      15: iload_1
      16: ireturn

  org.apache.avro.LogicalTypes$Decimal(org.apache.avro.Schema, org.apache.avro.LogicalTypes$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #3                  // Method "<init>":(Lorg/apache/avro/Schema;)V
       5: return

  org.apache.avro.LogicalTypes$Decimal(int, int, org.apache.avro.LogicalTypes$1);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokespecial #2                  // Method "<init>":(II)V
       6: return
}
