Compiled from "StackLocator.java"
public class org.apache.logging.log4j.util.StackLocator {
  private static final java.lang.StackWalker walker;

  private static final java.lang.StackWalker stackWalker;

  private static final org.apache.logging.log4j.util.StackLocator INSTANCE;

  public static org.apache.logging.log4j.util.StackLocator getInstance();
    Code:
       0: getstatic     #1                  // Field INSTANCE:Lorg/apache/logging/log4j/util/StackLocator;
       3: areturn

  private org.apache.logging.log4j.util.StackLocator();
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: return

  public java.lang.Class<?> getCallerClass(java.lang.Class<?>, java.util.function.Predicate<java.lang.Class<?>>);
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #3                  // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #4                  // String sentinelClass cannot be null
      10: invokespecial #5                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_2
      15: ifnonnull     28
      18: new           #3                  // class java/lang/IllegalArgumentException
      21: dup
      22: ldc           #6                  // String callerPredicate cannot be null
      24: invokespecial #5                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      27: athrow
      28: getstatic     #7                  // Field walker:Ljava/lang/StackWalker;
      31: aload_1
      32: aload_2
      33: invokedynamic #8,  0              // InvokeDynamic #0:apply:(Ljava/lang/Class;Ljava/util/function/Predicate;)Ljava/util/function/Function;
      38: invokevirtual #9                  // Method java/lang/StackWalker.walk:(Ljava/util/function/Function;)Ljava/lang/Object;
      41: checkcast     #10                 // class java/lang/Class
      44: areturn

  public java.lang.Class<?> getCallerClass(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: ldc           #11                 // String
       4: invokevirtual #12                 // Method getCallerClass:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Class;
       7: areturn

  public java.lang.Class<?> getCallerClass(java.lang.String, java.lang.String);
    Code:
       0: getstatic     #7                  // Field walker:Ljava/lang/StackWalker;
       3: aload_1
       4: aload_2
       5: invokedynamic #13,  0             // InvokeDynamic #1:apply:(Ljava/lang/String;Ljava/lang/String;)Ljava/util/function/Function;
      10: invokevirtual #9                  // Method java/lang/StackWalker.walk:(Ljava/util/function/Function;)Ljava/lang/Object;
      13: checkcast     #14                 // class java/util/Optional
      16: invokedynamic #15,  0             // InvokeDynamic #2:apply:()Ljava/util/function/Function;
      21: invokevirtual #16                 // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
      24: aconst_null
      25: invokevirtual #17                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      28: checkcast     #10                 // class java/lang/Class
      31: areturn

  public java.lang.Class<?> getCallerClass(java.lang.Class<?>);
    Code:
       0: getstatic     #7                  // Field walker:Ljava/lang/StackWalker;
       3: aload_1
       4: invokedynamic #18,  0             // InvokeDynamic #3:apply:(Ljava/lang/Class;)Ljava/util/function/Function;
       9: invokevirtual #9                  // Method java/lang/StackWalker.walk:(Ljava/util/function/Function;)Ljava/lang/Object;
      12: checkcast     #14                 // class java/util/Optional
      15: invokedynamic #15,  0             // InvokeDynamic #2:apply:()Ljava/util/function/Function;
      20: invokevirtual #16                 // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
      23: aconst_null
      24: invokevirtual #17                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      27: checkcast     #10                 // class java/lang/Class
      30: areturn

  public java.lang.Class<?> getCallerClass(int);
    Code:
       0: getstatic     #7                  // Field walker:Ljava/lang/StackWalker;
       3: iload_1
       4: invokedynamic #19,  0             // InvokeDynamic #4:apply:(I)Ljava/util/function/Function;
       9: invokevirtual #9                  // Method java/lang/StackWalker.walk:(Ljava/util/function/Function;)Ljava/lang/Object;
      12: checkcast     #14                 // class java/util/Optional
      15: invokedynamic #15,  0             // InvokeDynamic #2:apply:()Ljava/util/function/Function;
      20: invokevirtual #16                 // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
      23: aconst_null
      24: invokevirtual #17                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      27: checkcast     #10                 // class java/lang/Class
      30: areturn

  public java.util.Stack<java.lang.Class<?>> getCurrentStackTrace();
    Code:
       0: invokestatic  #20                 // Method org/apache/logging/log4j/util/PrivateSecurityManagerStackTraceUtil.isEnabled:()Z
       3: ifeq          10
       6: invokestatic  #21                 // Method org/apache/logging/log4j/util/PrivateSecurityManagerStackTraceUtil.getCurrentStackTrace:()Ljava/util/Stack;
       9: areturn
      10: new           #22                 // class java/util/Stack
      13: dup
      14: invokespecial #23                 // Method java/util/Stack."<init>":()V
      17: astore_1
      18: getstatic     #7                  // Field walker:Ljava/lang/StackWalker;
      21: invokedynamic #24,  0             // InvokeDynamic #5:apply:()Ljava/util/function/Function;
      26: invokevirtual #9                  // Method java/lang/StackWalker.walk:(Ljava/util/function/Function;)Ljava/lang/Object;
      29: checkcast     #25                 // class java/util/List
      32: astore_2
      33: aload_1
      34: aload_2
      35: invokevirtual #26                 // Method java/util/Stack.addAll:(Ljava/util/Collection;)Z
      38: pop
      39: aload_1
      40: areturn

  public java.lang.StackTraceElement calcLocation(java.lang.String);
    Code:
       0: getstatic     #27                 // Field stackWalker:Ljava/lang/StackWalker;
       3: aload_1
       4: invokedynamic #28,  0             // InvokeDynamic #6:apply:(Ljava/lang/String;)Ljava/util/function/Function;
       9: invokevirtual #9                  // Method java/lang/StackWalker.walk:(Ljava/util/function/Function;)Ljava/lang/Object;
      12: checkcast     #14                 // class java/util/Optional
      15: invokedynamic #29,  0             // InvokeDynamic #7:apply:()Ljava/util/function/Function;
      20: invokevirtual #16                 // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
      23: aconst_null
      24: invokevirtual #17                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      27: checkcast     #30                 // class java/lang/StackTraceElement
      30: areturn

  public java.lang.StackTraceElement getStackTraceElement(int);
    Code:
       0: getstatic     #27                 // Field stackWalker:Ljava/lang/StackWalker;
       3: iload_1
       4: invokedynamic #31,  0             // InvokeDynamic #8:apply:(I)Ljava/util/function/Function;
       9: invokevirtual #9                  // Method java/lang/StackWalker.walk:(Ljava/util/function/Function;)Ljava/lang/Object;
      12: checkcast     #14                 // class java/util/Optional
      15: invokedynamic #29,  0             // InvokeDynamic #7:apply:()Ljava/util/function/Function;
      20: invokevirtual #16                 // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
      23: aconst_null
      24: invokevirtual #17                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      27: checkcast     #30                 // class java/lang/StackTraceElement
      30: areturn

  private static java.util.Optional lambda$getStackTraceElement$16(int, java.util.stream.Stream);
    Code:
       0: aload_1
       1: iload_0
       2: i2l
       3: invokeinterface #32,  3           // InterfaceMethod java/util/stream/Stream.skip:(J)Ljava/util/stream/Stream;
       8: invokeinterface #33,  1           // InterfaceMethod java/util/stream/Stream.findFirst:()Ljava/util/Optional;
      13: areturn

  private static java.util.Optional lambda$calcLocation$15(java.lang.String, java.util.stream.Stream);
    Code:
       0: aload_1
       1: aload_0
       2: invokedynamic #34,  0             // InvokeDynamic #9:test:(Ljava/lang/String;)Ljava/util/function/Predicate;
       7: invokeinterface #35,  2           // InterfaceMethod java/util/stream/Stream.dropWhile:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      12: aload_0
      13: invokedynamic #36,  0             // InvokeDynamic #10:test:(Ljava/lang/String;)Ljava/util/function/Predicate;
      18: invokeinterface #35,  2           // InterfaceMethod java/util/stream/Stream.dropWhile:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      23: invokeinterface #33,  1           // InterfaceMethod java/util/stream/Stream.findFirst:()Ljava/util/Optional;
      28: areturn

  private static boolean lambda$calcLocation$14(java.lang.String, java.lang.StackWalker$StackFrame);
    Code:
       0: aload_1
       1: invokeinterface #37,  1           // InterfaceMethod java/lang/StackWalker$StackFrame.getClassName:()Ljava/lang/String;
       6: aload_0
       7: invokevirtual #38                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      10: ireturn

  private static boolean lambda$calcLocation$13(java.lang.String, java.lang.StackWalker$StackFrame);
    Code:
       0: aload_1
       1: invokeinterface #37,  1           // InterfaceMethod java/lang/StackWalker$StackFrame.getClassName:()Ljava/lang/String;
       6: aload_0
       7: invokevirtual #38                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      10: ifne          17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ireturn

  private static java.util.List lambda$getCurrentStackTrace$12(java.util.stream.Stream);
    Code:
       0: aload_0
       1: invokedynamic #39,  0             // InvokeDynamic #11:apply:()Ljava/util/function/Function;
       6: invokeinterface #40,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      11: invokestatic  #41                 // Method java/util/stream/Collectors.toList:()Ljava/util/stream/Collector;
      14: invokeinterface #42,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      19: checkcast     #25                 // class java/util/List
      22: areturn

  private static java.lang.Class lambda$getCurrentStackTrace$11(java.lang.StackWalker$StackFrame);
    Code:
       0: aload_0
       1: invokeinterface #43,  1           // InterfaceMethod java/lang/StackWalker$StackFrame.getDeclaringClass:()Ljava/lang/Class;
       6: areturn

  private static java.util.Optional lambda$getCallerClass$10(int, java.util.stream.Stream);
    Code:
       0: aload_1
       1: iload_0
       2: i2l
       3: invokeinterface #32,  3           // InterfaceMethod java/util/stream/Stream.skip:(J)Ljava/util/stream/Stream;
       8: invokeinterface #33,  1           // InterfaceMethod java/util/stream/Stream.findFirst:()Ljava/util/Optional;
      13: areturn

  private static java.util.Optional lambda$getCallerClass$9(java.lang.Class, java.util.stream.Stream);
    Code:
       0: aload_1
       1: aload_0
       2: invokedynamic #44,  0             // InvokeDynamic #12:test:(Ljava/lang/Class;)Ljava/util/function/Predicate;
       7: invokeinterface #35,  2           // InterfaceMethod java/util/stream/Stream.dropWhile:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      12: aload_0
      13: invokedynamic #45,  0             // InvokeDynamic #13:test:(Ljava/lang/Class;)Ljava/util/function/Predicate;
      18: invokeinterface #35,  2           // InterfaceMethod java/util/stream/Stream.dropWhile:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      23: invokeinterface #33,  1           // InterfaceMethod java/util/stream/Stream.findFirst:()Ljava/util/Optional;
      28: areturn

  private static boolean lambda$getCallerClass$8(java.lang.Class, java.lang.StackWalker$StackFrame);
    Code:
       0: aload_1
       1: invokeinterface #43,  1           // InterfaceMethod java/lang/StackWalker$StackFrame.getDeclaringClass:()Ljava/lang/Class;
       6: aload_0
       7: invokevirtual #46                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      10: ireturn

  private static boolean lambda$getCallerClass$7(java.lang.Class, java.lang.StackWalker$StackFrame);
    Code:
       0: aload_1
       1: invokeinterface #43,  1           // InterfaceMethod java/lang/StackWalker$StackFrame.getDeclaringClass:()Ljava/lang/Class;
       6: aload_0
       7: invokevirtual #46                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      10: ifne          17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ireturn

  private static java.util.Optional lambda$getCallerClass$6(java.lang.String, java.lang.String, java.util.stream.Stream);
    Code:
       0: aload_2
       1: aload_0
       2: invokedynamic #47,  0             // InvokeDynamic #14:test:(Ljava/lang/String;)Ljava/util/function/Predicate;
       7: invokeinterface #35,  2           // InterfaceMethod java/util/stream/Stream.dropWhile:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      12: aload_0
      13: invokedynamic #48,  0             // InvokeDynamic #15:test:(Ljava/lang/String;)Ljava/util/function/Predicate;
      18: invokeinterface #35,  2           // InterfaceMethod java/util/stream/Stream.dropWhile:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      23: aload_1
      24: invokedynamic #49,  0             // InvokeDynamic #16:test:(Ljava/lang/String;)Ljava/util/function/Predicate;
      29: invokeinterface #35,  2           // InterfaceMethod java/util/stream/Stream.dropWhile:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      34: invokeinterface #33,  1           // InterfaceMethod java/util/stream/Stream.findFirst:()Ljava/util/Optional;
      39: areturn

  private static boolean lambda$getCallerClass$5(java.lang.String, java.lang.StackWalker$StackFrame);
    Code:
       0: aload_1
       1: invokeinterface #37,  1           // InterfaceMethod java/lang/StackWalker$StackFrame.getClassName:()Ljava/lang/String;
       6: aload_0
       7: invokevirtual #50                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      10: ifne          17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ireturn

  private static boolean lambda$getCallerClass$4(java.lang.String, java.lang.StackWalker$StackFrame);
    Code:
       0: aload_1
       1: invokeinterface #37,  1           // InterfaceMethod java/lang/StackWalker$StackFrame.getClassName:()Ljava/lang/String;
       6: aload_0
       7: invokevirtual #38                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      10: ireturn

  private static boolean lambda$getCallerClass$3(java.lang.String, java.lang.StackWalker$StackFrame);
    Code:
       0: aload_1
       1: invokeinterface #37,  1           // InterfaceMethod java/lang/StackWalker$StackFrame.getClassName:()Ljava/lang/String;
       6: aload_0
       7: invokevirtual #38                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      10: ifne          17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ireturn

  private static java.lang.Class lambda$getCallerClass$2(java.lang.Class, java.util.function.Predicate, java.util.stream.Stream);
    Code:
       0: aload_2
       1: invokedynamic #15,  0             // InvokeDynamic #2:apply:()Ljava/util/function/Function;
       6: invokeinterface #40,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      11: aload_0
      12: invokedynamic #51,  0             // InvokeDynamic #17:test:(Ljava/lang/Class;)Ljava/util/function/Predicate;
      17: invokeinterface #35,  2           // InterfaceMethod java/util/stream/Stream.dropWhile:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      22: aload_0
      23: aload_1
      24: invokedynamic #52,  0             // InvokeDynamic #18:test:(Ljava/lang/Class;Ljava/util/function/Predicate;)Ljava/util/function/Predicate;
      29: invokeinterface #35,  2           // InterfaceMethod java/util/stream/Stream.dropWhile:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      34: invokeinterface #33,  1           // InterfaceMethod java/util/stream/Stream.findFirst:()Ljava/util/Optional;
      39: aconst_null
      40: invokevirtual #17                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      43: checkcast     #10                 // class java/lang/Class
      46: areturn

  private static boolean lambda$getCallerClass$1(java.lang.Class, java.util.function.Predicate, java.lang.Class);
    Code:
       0: aload_0
       1: aload_2
       2: invokevirtual #46                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
       5: ifne          18
       8: aload_1
       9: aload_2
      10: invokeinterface #53,  2           // InterfaceMethod java/util/function/Predicate.test:(Ljava/lang/Object;)Z
      15: ifne          22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: ireturn

  private static boolean lambda$getCallerClass$0(java.lang.Class, java.lang.Class);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #46                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  static {};
    Code:
       0: getstatic     #54                 // Field java/lang/StackWalker$Option.RETAIN_CLASS_REFERENCE:Ljava/lang/StackWalker$Option;
       3: invokestatic  #55                 // Method java/lang/StackWalker.getInstance:(Ljava/lang/StackWalker$Option;)Ljava/lang/StackWalker;
       6: putstatic     #7                  // Field walker:Ljava/lang/StackWalker;
       9: invokestatic  #56                 // Method java/lang/StackWalker.getInstance:()Ljava/lang/StackWalker;
      12: putstatic     #27                 // Field stackWalker:Ljava/lang/StackWalker;
      15: new           #57                 // class org/apache/logging/log4j/util/StackLocator
      18: dup
      19: invokespecial #58                 // Method "<init>":()V
      22: putstatic     #1                  // Field INSTANCE:Lorg/apache/logging/log4j/util/StackLocator;
      25: return
}
