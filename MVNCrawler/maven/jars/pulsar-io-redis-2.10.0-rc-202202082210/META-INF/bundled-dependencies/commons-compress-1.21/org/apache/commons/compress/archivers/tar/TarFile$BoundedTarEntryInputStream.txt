Compiled from "TarFile.java"
final class org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream extends org.apache.commons.compress.utils.BoundedArchiveInputStream {
  private final java.nio.channels.SeekableByteChannel channel;

  private final org.apache.commons.compress.archivers.tar.TarArchiveEntry entry;

  private long entryOffset;

  private int currentSparseInputStreamIndex;

  final org.apache.commons.compress.archivers.tar.TarFile this$0;

  org.apache.commons.compress.archivers.tar.TarFile$BoundedTarEntryInputStream(org.apache.commons.compress.archivers.tar.TarFile, org.apache.commons.compress.archivers.tar.TarArchiveEntry, java.nio.channels.SeekableByteChannel) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lorg/apache/commons/compress/archivers/tar/TarFile;
       5: aload_0
       6: aload_2
       7: invokevirtual #2                  // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDataOffset:()J
      10: aload_2
      11: invokevirtual #3                  // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getRealSize:()J
      14: invokespecial #4                  // Method org/apache/commons/compress/utils/BoundedArchiveInputStream."<init>":(JJ)V
      17: aload_3
      18: invokeinterface #5,  1            // InterfaceMethod java/nio/channels/SeekableByteChannel.size:()J
      23: aload_2
      24: invokevirtual #6                  // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getSize:()J
      27: lsub
      28: aload_2
      29: invokevirtual #2                  // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDataOffset:()J
      32: lcmp
      33: ifge          46
      36: new           #7                  // class java/io/IOException
      39: dup
      40: ldc           #8                  // String entry size exceeds archive size
      42: invokespecial #9                  // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      45: athrow
      46: aload_0
      47: aload_2
      48: putfield      #10                 // Field entry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;
      51: aload_0
      52: aload_3
      53: putfield      #11                 // Field channel:Ljava/nio/channels/SeekableByteChannel;
      56: return

  protected int read(long, java.nio.ByteBuffer) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #12                 // Field entryOffset:J
       4: aload_0
       5: getfield      #10                 // Field entry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;
       8: invokevirtual #3                  // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getRealSize:()J
      11: lcmp
      12: iflt          17
      15: iconst_m1
      16: ireturn
      17: aload_0
      18: getfield      #10                 // Field entry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;
      21: invokevirtual #13                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.isSparse:()Z
      24: ifeq          45
      27: aload_0
      28: aload_0
      29: getfield      #12                 // Field entryOffset:J
      32: aload_3
      33: aload_3
      34: invokevirtual #14                 // Method java/nio/ByteBuffer.limit:()I
      37: invokespecial #15                 // Method readSparse:(JLjava/nio/ByteBuffer;I)I
      40: istore        4
      42: goto          53
      45: aload_0
      46: lload_1
      47: aload_3
      48: invokespecial #16                 // Method readArchive:(JLjava/nio/ByteBuffer;)I
      51: istore        4
      53: iload         4
      55: iconst_m1
      56: if_icmpne     88
      59: aload_3
      60: invokevirtual #17                 // Method java/nio/ByteBuffer.array:()[B
      63: arraylength
      64: ifle          77
      67: new           #7                  // class java/io/IOException
      70: dup
      71: ldc           #18                 // String Truncated TAR archive
      73: invokespecial #9                  // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      76: athrow
      77: aload_0
      78: getfield      #1                  // Field this$0:Lorg/apache/commons/compress/archivers/tar/TarFile;
      81: iconst_1
      82: invokevirtual #19                 // Method org/apache/commons/compress/archivers/tar/TarFile.setAtEOF:(Z)V
      85: goto          105
      88: aload_0
      89: dup
      90: getfield      #12                 // Field entryOffset:J
      93: iload         4
      95: i2l
      96: ladd
      97: putfield      #12                 // Field entryOffset:J
     100: aload_3
     101: invokevirtual #20                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;
     104: pop
     105: iload         4
     107: ireturn

  private int readSparse(long, java.nio.ByteBuffer, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lorg/apache/commons/compress/archivers/tar/TarFile;
       4: invokestatic  #21                 // Method org/apache/commons/compress/archivers/tar/TarFile.access$000:(Lorg/apache/commons/compress/archivers/tar/TarFile;)Ljava/util/Map;
       7: aload_0
       8: getfield      #10                 // Field entry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;
      11: invokevirtual #22                 // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getName:()Ljava/lang/String;
      14: invokeinterface #23,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      19: checkcast     #24                 // class java/util/List
      22: astore        5
      24: aload         5
      26: ifnull        39
      29: aload         5
      31: invokeinterface #25,  1           // InterfaceMethod java/util/List.isEmpty:()Z
      36: ifeq          54
      39: aload_0
      40: aload_0
      41: getfield      #10                 // Field entry:Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;
      44: invokevirtual #2                  // Method org/apache/commons/compress/archivers/tar/TarArchiveEntry.getDataOffset:()J
      47: lload_1
      48: ladd
      49: aload_3
      50: invokespecial #16                 // Method readArchive:(JLjava/nio/ByteBuffer;)I
      53: ireturn
      54: aload_0
      55: getfield      #26                 // Field currentSparseInputStreamIndex:I
      58: aload         5
      60: invokeinterface #27,  1           // InterfaceMethod java/util/List.size:()I
      65: if_icmplt     70
      68: iconst_m1
      69: ireturn
      70: aload         5
      72: aload_0
      73: getfield      #26                 // Field currentSparseInputStreamIndex:I
      76: invokeinterface #28,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      81: checkcast     #29                 // class java/io/InputStream
      84: astore        6
      86: iload         4
      88: newarray       byte
      90: astore        7
      92: aload         6
      94: aload         7
      96: invokevirtual #30                 // Method java/io/InputStream.read:([B)I
      99: istore        8
     101: iload         8
     103: iconst_m1
     104: if_icmpeq     117
     107: aload_3
     108: aload         7
     110: iconst_0
     111: iload         8
     113: invokevirtual #31                 // Method java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;
     116: pop
     117: aload_0
     118: getfield      #26                 // Field currentSparseInputStreamIndex:I
     121: aload         5
     123: invokeinterface #27,  1           // InterfaceMethod java/util/List.size:()I
     128: iconst_1
     129: isub
     130: if_icmpne     136
     133: iload         8
     135: ireturn
     136: iload         8
     138: iconst_m1
     139: if_icmpne     161
     142: aload_0
     143: dup
     144: getfield      #26                 // Field currentSparseInputStreamIndex:I
     147: iconst_1
     148: iadd
     149: putfield      #26                 // Field currentSparseInputStreamIndex:I
     152: aload_0
     153: lload_1
     154: aload_3
     155: iload         4
     157: invokespecial #15                 // Method readSparse:(JLjava/nio/ByteBuffer;I)I
     160: ireturn
     161: iload         8
     163: iload         4
     165: if_icmpge     210
     168: aload_0
     169: dup
     170: getfield      #26                 // Field currentSparseInputStreamIndex:I
     173: iconst_1
     174: iadd
     175: putfield      #26                 // Field currentSparseInputStreamIndex:I
     178: aload_0
     179: lload_1
     180: iload         8
     182: i2l
     183: ladd
     184: aload_3
     185: iload         4
     187: iload         8
     189: isub
     190: invokespecial #15                 // Method readSparse:(JLjava/nio/ByteBuffer;I)I
     193: istore        9
     195: iload         9
     197: iconst_m1
     198: if_icmpne     204
     201: iload         8
     203: ireturn
     204: iload         8
     206: iload         9
     208: iadd
     209: ireturn
     210: iload         8
     212: ireturn

  private int readArchive(long, java.nio.ByteBuffer) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #11                 // Field channel:Ljava/nio/channels/SeekableByteChannel;
       4: lload_1
       5: invokeinterface #32,  3           // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;
      10: pop
      11: aload_0
      12: getfield      #11                 // Field channel:Ljava/nio/channels/SeekableByteChannel;
      15: aload_3
      16: invokeinterface #33,  2           // InterfaceMethod java/nio/channels/SeekableByteChannel.read:(Ljava/nio/ByteBuffer;)I
      21: ireturn
}
