Compiled from "HuffmanDecoder.java"
class org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$BinaryTreeNode {
  private final int bits;

  int literal;

  org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$BinaryTreeNode leftNode;

  org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$BinaryTreeNode rightNode;

  private org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$BinaryTreeNode(int);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_m1
       6: putfield      #3                  // Field literal:I
       9: aload_0
      10: iload_1
      11: putfield      #4                  // Field bits:I
      14: return

  void leaf(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #3                  // Field literal:I
       5: aload_0
       6: aconst_null
       7: putfield      #5                  // Field leftNode:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;
      10: aload_0
      11: aconst_null
      12: putfield      #6                  // Field rightNode:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;
      15: return

  org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$BinaryTreeNode left();
    Code:
       0: aload_0
       1: getfield      #5                  // Field leftNode:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;
       4: ifnonnull     32
       7: aload_0
       8: getfield      #3                  // Field literal:I
      11: iconst_m1
      12: if_icmpne     32
      15: aload_0
      16: new           #7                  // class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode
      19: dup
      20: aload_0
      21: getfield      #4                  // Field bits:I
      24: iconst_1
      25: iadd
      26: invokespecial #1                  // Method "<init>":(I)V
      29: putfield      #5                  // Field leftNode:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;
      32: aload_0
      33: getfield      #5                  // Field leftNode:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;
      36: areturn

  org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$BinaryTreeNode right();
    Code:
       0: aload_0
       1: getfield      #6                  // Field rightNode:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;
       4: ifnonnull     32
       7: aload_0
       8: getfield      #3                  // Field literal:I
      11: iconst_m1
      12: if_icmpne     32
      15: aload_0
      16: new           #7                  // class org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode
      19: dup
      20: aload_0
      21: getfield      #4                  // Field bits:I
      24: iconst_1
      25: iadd
      26: invokespecial #1                  // Method "<init>":(I)V
      29: putfield      #6                  // Field rightNode:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;
      32: aload_0
      33: getfield      #6                  // Field rightNode:Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$BinaryTreeNode;
      36: areturn

  org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$BinaryTreeNode(int, org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$1);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #1                  // Method "<init>":(I)V
       5: return
}
