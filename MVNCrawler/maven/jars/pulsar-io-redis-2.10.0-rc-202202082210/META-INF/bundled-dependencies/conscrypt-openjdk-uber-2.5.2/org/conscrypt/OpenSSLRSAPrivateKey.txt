Compiled from "OpenSSLRSAPrivateKey.java"
class org.conscrypt.OpenSSLRSAPrivateKey implements java.security.interfaces.RSAPrivateKey,org.conscrypt.OpenSSLKeyHolder {
  private static final long serialVersionUID;

  transient org.conscrypt.OpenSSLKey key;

  transient boolean fetchedParams;

  java.math.BigInteger modulus;

  java.math.BigInteger privateExponent;

  org.conscrypt.OpenSSLRSAPrivateKey(org.conscrypt.OpenSSLKey);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field key:Lorg/conscrypt/OpenSSLKey;
       9: return

  org.conscrypt.OpenSSLRSAPrivateKey(org.conscrypt.OpenSSLKey, byte[][]);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #3                  // Method "<init>":(Lorg/conscrypt/OpenSSLKey;)V
       5: aload_0
       6: aload_2
       7: invokevirtual #4                  // Method readParams:([[B)V
      10: aload_0
      11: iconst_1
      12: putfield      #5                  // Field fetchedParams:Z
      15: return

  public org.conscrypt.OpenSSLKey getOpenSSLKey();
    Code:
       0: aload_0
       1: getfield      #2                  // Field key:Lorg/conscrypt/OpenSSLKey;
       4: areturn

  public org.conscrypt.OpenSSLRSAPrivateKey(java.security.spec.RSAPrivateKeySpec) throws java.security.spec.InvalidKeySpecException;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #6                  // Method init:(Ljava/security/spec/RSAPrivateKeySpec;)Lorg/conscrypt/OpenSSLKey;
       5: invokespecial #3                  // Method "<init>":(Lorg/conscrypt/OpenSSLKey;)V
       8: return

  private static org.conscrypt.OpenSSLKey init(java.security.spec.RSAPrivateKeySpec) throws java.security.spec.InvalidKeySpecException;
    Code:
       0: aload_0
       1: invokevirtual #7                  // Method java/security/spec/RSAPrivateKeySpec.getModulus:()Ljava/math/BigInteger;
       4: astore_1
       5: aload_0
       6: invokevirtual #8                  // Method java/security/spec/RSAPrivateKeySpec.getPrivateExponent:()Ljava/math/BigInteger;
       9: astore_2
      10: aload_1
      11: ifnonnull     24
      14: new           #9                  // class java/security/spec/InvalidKeySpecException
      17: dup
      18: ldc           #10                 // String modulus == null
      20: invokespecial #11                 // Method java/security/spec/InvalidKeySpecException."<init>":(Ljava/lang/String;)V
      23: athrow
      24: aload_2
      25: ifnonnull     38
      28: new           #9                  // class java/security/spec/InvalidKeySpecException
      31: dup
      32: ldc           #12                 // String privateExponent == null
      34: invokespecial #11                 // Method java/security/spec/InvalidKeySpecException."<init>":(Ljava/lang/String;)V
      37: athrow
      38: new           #13                 // class org/conscrypt/OpenSSLKey
      41: dup
      42: aload_1
      43: invokevirtual #14                 // Method java/math/BigInteger.toByteArray:()[B
      46: aconst_null
      47: aload_2
      48: invokevirtual #14                 // Method java/math/BigInteger.toByteArray:()[B
      51: aconst_null
      52: aconst_null
      53: aconst_null
      54: aconst_null
      55: aconst_null
      56: invokestatic  #15                 // Method org/conscrypt/NativeCrypto.EVP_PKEY_new_RSA:([B[B[B[B[B[B[B[B)J
      59: invokespecial #16                 // Method org/conscrypt/OpenSSLKey."<init>":(J)V
      62: areturn
      63: astore_3
      64: new           #9                  // class java/security/spec/InvalidKeySpecException
      67: dup
      68: aload_3
      69: invokespecial #18                 // Method java/security/spec/InvalidKeySpecException."<init>":(Ljava/lang/Throwable;)V
      72: athrow
    Exception table:
       from    to  target type
          38    62    63   Class java/lang/Exception

  static org.conscrypt.OpenSSLRSAPrivateKey getInstance(org.conscrypt.OpenSSLKey);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method org/conscrypt/OpenSSLKey.getNativeRef:()Lorg/conscrypt/NativeRef$EVP_PKEY;
       4: invokestatic  #20                 // Method org/conscrypt/NativeCrypto.get_RSA_private_params:(Lorg/conscrypt/NativeRef$EVP_PKEY;)[[B
       7: astore_1
       8: aload_1
       9: iconst_1
      10: aaload
      11: ifnull        24
      14: new           #21                 // class org/conscrypt/OpenSSLRSAPrivateCrtKey
      17: dup
      18: aload_0
      19: aload_1
      20: invokespecial #22                 // Method org/conscrypt/OpenSSLRSAPrivateCrtKey."<init>":(Lorg/conscrypt/OpenSSLKey;[[B)V
      23: areturn
      24: new           #23                 // class org/conscrypt/OpenSSLRSAPrivateKey
      27: dup
      28: aload_0
      29: aload_1
      30: invokespecial #24                 // Method "<init>":(Lorg/conscrypt/OpenSSLKey;[[B)V
      33: areturn

  static org.conscrypt.OpenSSLKey wrapPlatformKey(java.security.interfaces.RSAPrivateKey) throws java.security.InvalidKeyException;
    Code:
       0: aload_0
       1: invokestatic  #25                 // Method org/conscrypt/Platform.wrapRsaKey:(Ljava/security/PrivateKey;)Lorg/conscrypt/OpenSSLKey;
       4: astore_1
       5: aload_1
       6: ifnull        11
       9: aload_1
      10: areturn
      11: new           #13                 // class org/conscrypt/OpenSSLKey
      14: dup
      15: aload_0
      16: aload_0
      17: invokeinterface #26,  1           // InterfaceMethod java/security/interfaces/RSAPrivateKey.getModulus:()Ljava/math/BigInteger;
      22: invokevirtual #14                 // Method java/math/BigInteger.toByteArray:()[B
      25: invokestatic  #27                 // Method org/conscrypt/NativeCrypto.getRSAPrivateKeyWrapper:(Ljava/security/PrivateKey;[B)J
      28: iconst_1
      29: invokespecial #28                 // Method org/conscrypt/OpenSSLKey."<init>":(JZ)V
      32: areturn

  static org.conscrypt.OpenSSLKey wrapJCAPrivateKeyForTLSStackOnly(java.security.PrivateKey, java.security.PublicKey) throws java.security.InvalidKeyException;
    Code:
       0: aconst_null
       1: astore_2
       2: aload_0
       3: instanceof    #29                 // class java/security/interfaces/RSAKey
       6: ifeq          22
       9: aload_0
      10: checkcast     #29                 // class java/security/interfaces/RSAKey
      13: invokeinterface #30,  1           // InterfaceMethod java/security/interfaces/RSAKey.getModulus:()Ljava/math/BigInteger;
      18: astore_2
      19: goto          39
      22: aload_1
      23: instanceof    #29                 // class java/security/interfaces/RSAKey
      26: ifeq          39
      29: aload_1
      30: checkcast     #29                 // class java/security/interfaces/RSAKey
      33: invokeinterface #30,  1           // InterfaceMethod java/security/interfaces/RSAKey.getModulus:()Ljava/math/BigInteger;
      38: astore_2
      39: aload_2
      40: ifnonnull     79
      43: new           #31                 // class java/security/InvalidKeyException
      46: dup
      47: new           #32                 // class java/lang/StringBuilder
      50: dup
      51: invokespecial #33                 // Method java/lang/StringBuilder."<init>":()V
      54: ldc           #34                 // String RSA modulus not available. Private:
      56: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      59: aload_0
      60: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      63: ldc           #37                 // String , public:
      65: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      68: aload_1
      69: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      72: invokevirtual #38                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      75: invokespecial #39                 // Method java/security/InvalidKeyException."<init>":(Ljava/lang/String;)V
      78: athrow
      79: new           #13                 // class org/conscrypt/OpenSSLKey
      82: dup
      83: aload_0
      84: aload_2
      85: invokevirtual #14                 // Method java/math/BigInteger.toByteArray:()[B
      88: invokestatic  #27                 // Method org/conscrypt/NativeCrypto.getRSAPrivateKeyWrapper:(Ljava/security/PrivateKey;[B)J
      91: iconst_1
      92: invokespecial #28                 // Method org/conscrypt/OpenSSLKey."<init>":(JZ)V
      95: areturn

  static org.conscrypt.OpenSSLKey getInstance(java.security.interfaces.RSAPrivateKey) throws java.security.InvalidKeyException;
    Code:
       0: aload_0
       1: invokeinterface #40,  1           // InterfaceMethod java/security/interfaces/RSAPrivateKey.getFormat:()Ljava/lang/String;
       6: ifnonnull     14
       9: aload_0
      10: invokestatic  #41                 // Method wrapPlatformKey:(Ljava/security/interfaces/RSAPrivateKey;)Lorg/conscrypt/OpenSSLKey;
      13: areturn
      14: aload_0
      15: invokeinterface #26,  1           // InterfaceMethod java/security/interfaces/RSAPrivateKey.getModulus:()Ljava/math/BigInteger;
      20: astore_1
      21: aload_0
      22: invokeinterface #42,  1           // InterfaceMethod java/security/interfaces/RSAPrivateKey.getPrivateExponent:()Ljava/math/BigInteger;
      27: astore_2
      28: aload_1
      29: ifnonnull     42
      32: new           #31                 // class java/security/InvalidKeyException
      35: dup
      36: ldc           #10                 // String modulus == null
      38: invokespecial #39                 // Method java/security/InvalidKeyException."<init>":(Ljava/lang/String;)V
      41: athrow
      42: aload_2
      43: ifnonnull     56
      46: new           #31                 // class java/security/InvalidKeyException
      49: dup
      50: ldc           #12                 // String privateExponent == null
      52: invokespecial #39                 // Method java/security/InvalidKeyException."<init>":(Ljava/lang/String;)V
      55: athrow
      56: new           #13                 // class org/conscrypt/OpenSSLKey
      59: dup
      60: aload_1
      61: invokevirtual #14                 // Method java/math/BigInteger.toByteArray:()[B
      64: aconst_null
      65: aload_2
      66: invokevirtual #14                 // Method java/math/BigInteger.toByteArray:()[B
      69: aconst_null
      70: aconst_null
      71: aconst_null
      72: aconst_null
      73: aconst_null
      74: invokestatic  #15                 // Method org/conscrypt/NativeCrypto.EVP_PKEY_new_RSA:([B[B[B[B[B[B[B[B)J
      77: invokespecial #16                 // Method org/conscrypt/OpenSSLKey."<init>":(J)V
      80: areturn
      81: astore_3
      82: new           #31                 // class java/security/InvalidKeyException
      85: dup
      86: aload_3
      87: invokespecial #43                 // Method java/security/InvalidKeyException."<init>":(Ljava/lang/Throwable;)V
      90: athrow
    Exception table:
       from    to  target type
          56    80    81   Class java/lang/Exception

  final synchronized void ensureReadParams();
    Code:
       0: aload_0
       1: getfield      #5                  // Field fetchedParams:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: aload_0
      10: getfield      #2                  // Field key:Lorg/conscrypt/OpenSSLKey;
      13: invokevirtual #19                 // Method org/conscrypt/OpenSSLKey.getNativeRef:()Lorg/conscrypt/NativeRef$EVP_PKEY;
      16: invokestatic  #20                 // Method org/conscrypt/NativeCrypto.get_RSA_private_params:(Lorg/conscrypt/NativeRef$EVP_PKEY;)[[B
      19: invokevirtual #4                  // Method readParams:([[B)V
      22: aload_0
      23: iconst_1
      24: putfield      #5                  // Field fetchedParams:Z
      27: return

  void readParams(byte[][]);
    Code:
       0: aload_1
       1: iconst_0
       2: aaload
       3: ifnonnull     16
       6: new           #44                 // class java/lang/NullPointerException
       9: dup
      10: ldc           #10                 // String modulus == null
      12: invokespecial #45                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      15: athrow
      16: aload_1
      17: iconst_2
      18: aaload
      19: ifnonnull     42
      22: aload_0
      23: getfield      #2                  // Field key:Lorg/conscrypt/OpenSSLKey;
      26: invokevirtual #46                 // Method org/conscrypt/OpenSSLKey.isHardwareBacked:()Z
      29: ifne          42
      32: new           #44                 // class java/lang/NullPointerException
      35: dup
      36: ldc           #12                 // String privateExponent == null
      38: invokespecial #45                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      41: athrow
      42: aload_0
      43: new           #47                 // class java/math/BigInteger
      46: dup
      47: aload_1
      48: iconst_0
      49: aaload
      50: invokespecial #48                 // Method java/math/BigInteger."<init>":([B)V
      53: putfield      #49                 // Field modulus:Ljava/math/BigInteger;
      56: aload_1
      57: iconst_2
      58: aaload
      59: ifnull        76
      62: aload_0
      63: new           #47                 // class java/math/BigInteger
      66: dup
      67: aload_1
      68: iconst_2
      69: aaload
      70: invokespecial #48                 // Method java/math/BigInteger."<init>":([B)V
      73: putfield      #50                 // Field privateExponent:Ljava/math/BigInteger;
      76: return

  public final java.math.BigInteger getPrivateExponent();
    Code:
       0: aload_0
       1: getfield      #2                  // Field key:Lorg/conscrypt/OpenSSLKey;
       4: invokevirtual #46                 // Method org/conscrypt/OpenSSLKey.isHardwareBacked:()Z
       7: ifeq          20
      10: new           #51                 // class java/lang/UnsupportedOperationException
      13: dup
      14: ldc           #52                 // String Private exponent cannot be extracted
      16: invokespecial #53                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
      19: athrow
      20: aload_0
      21: invokevirtual #54                 // Method ensureReadParams:()V
      24: aload_0
      25: getfield      #50                 // Field privateExponent:Ljava/math/BigInteger;
      28: areturn

  public final java.math.BigInteger getModulus();
    Code:
       0: aload_0
       1: invokevirtual #54                 // Method ensureReadParams:()V
       4: aload_0
       5: getfield      #49                 // Field modulus:Ljava/math/BigInteger;
       8: areturn

  public final byte[] getEncoded();
    Code:
       0: aload_0
       1: getfield      #2                  // Field key:Lorg/conscrypt/OpenSSLKey;
       4: invokevirtual #46                 // Method org/conscrypt/OpenSSLKey.isHardwareBacked:()Z
       7: ifeq          12
      10: aconst_null
      11: areturn
      12: aload_0
      13: getfield      #2                  // Field key:Lorg/conscrypt/OpenSSLKey;
      16: invokevirtual #19                 // Method org/conscrypt/OpenSSLKey.getNativeRef:()Lorg/conscrypt/NativeRef$EVP_PKEY;
      19: invokestatic  #55                 // Method org/conscrypt/NativeCrypto.EVP_marshal_private_key:(Lorg/conscrypt/NativeRef$EVP_PKEY;)[B
      22: areturn

  public final java.lang.String getFormat();
    Code:
       0: aload_0
       1: getfield      #2                  // Field key:Lorg/conscrypt/OpenSSLKey;
       4: invokevirtual #46                 // Method org/conscrypt/OpenSSLKey.isHardwareBacked:()Z
       7: ifeq          12
      10: aconst_null
      11: areturn
      12: ldc           #56                 // String PKCS#8
      14: areturn

  public final java.lang.String getAlgorithm();
    Code:
       0: ldc           #57                 // String RSA
       2: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: aload_0
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: instanceof    #23                 // class org/conscrypt/OpenSSLRSAPrivateKey
      11: ifeq          31
      14: aload_1
      15: checkcast     #23                 // class org/conscrypt/OpenSSLRSAPrivateKey
      18: astore_2
      19: aload_0
      20: getfield      #2                  // Field key:Lorg/conscrypt/OpenSSLKey;
      23: aload_2
      24: invokevirtual #58                 // Method getOpenSSLKey:()Lorg/conscrypt/OpenSSLKey;
      27: invokevirtual #59                 // Method org/conscrypt/OpenSSLKey.equals:(Ljava/lang/Object;)Z
      30: ireturn
      31: aload_1
      32: instanceof    #60                 // class java/security/interfaces/RSAPrivateKey
      35: ifeq          85
      38: aload_0
      39: invokevirtual #54                 // Method ensureReadParams:()V
      42: aload_1
      43: checkcast     #60                 // class java/security/interfaces/RSAPrivateKey
      46: astore_2
      47: aload_0
      48: getfield      #49                 // Field modulus:Ljava/math/BigInteger;
      51: aload_2
      52: invokeinterface #26,  1           // InterfaceMethod java/security/interfaces/RSAPrivateKey.getModulus:()Ljava/math/BigInteger;
      57: invokevirtual #61                 // Method java/math/BigInteger.equals:(Ljava/lang/Object;)Z
      60: ifeq          83
      63: aload_0
      64: getfield      #50                 // Field privateExponent:Ljava/math/BigInteger;
      67: aload_2
      68: invokeinterface #42,  1           // InterfaceMethod java/security/interfaces/RSAPrivateKey.getPrivateExponent:()Ljava/math/BigInteger;
      73: invokevirtual #61                 // Method java/math/BigInteger.equals:(Ljava/lang/Object;)Z
      76: ifeq          83
      79: iconst_1
      80: goto          84
      83: iconst_0
      84: ireturn
      85: iconst_0
      86: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: invokevirtual #54                 // Method ensureReadParams:()V
       4: iconst_1
       5: istore_1
       6: iload_1
       7: iconst_3
       8: imul
       9: aload_0
      10: getfield      #49                 // Field modulus:Ljava/math/BigInteger;
      13: invokevirtual #62                 // Method java/math/BigInteger.hashCode:()I
      16: iadd
      17: istore_1
      18: aload_0
      19: getfield      #50                 // Field privateExponent:Ljava/math/BigInteger;
      22: ifnull        38
      25: iload_1
      26: bipush        7
      28: imul
      29: aload_0
      30: getfield      #50                 // Field privateExponent:Ljava/math/BigInteger;
      33: invokevirtual #62                 // Method java/math/BigInteger.hashCode:()I
      36: iadd
      37: istore_1
      38: iload_1
      39: ireturn

  public java.lang.String toString();
    Code:
       0: new           #32                 // class java/lang/StringBuilder
       3: dup
       4: ldc           #63                 // String OpenSSLRSAPrivateKey{
       6: invokespecial #64                 // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
       9: astore_1
      10: aload_0
      11: invokevirtual #54                 // Method ensureReadParams:()V
      14: aload_1
      15: ldc           #65                 // String modulus=
      17: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      20: pop
      21: aload_1
      22: aload_0
      23: getfield      #49                 // Field modulus:Ljava/math/BigInteger;
      26: bipush        16
      28: invokevirtual #66                 // Method java/math/BigInteger.toString:(I)Ljava/lang/String;
      31: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      34: pop
      35: aload_1
      36: invokevirtual #38                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      39: areturn

  private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException;
    Code:
       0: aload_1
       1: invokevirtual #67                 // Method java/io/ObjectInputStream.defaultReadObject:()V
       4: aload_0
       5: new           #13                 // class org/conscrypt/OpenSSLKey
       8: dup
       9: aload_0
      10: getfield      #49                 // Field modulus:Ljava/math/BigInteger;
      13: invokevirtual #14                 // Method java/math/BigInteger.toByteArray:()[B
      16: aconst_null
      17: aload_0
      18: getfield      #50                 // Field privateExponent:Ljava/math/BigInteger;
      21: invokevirtual #14                 // Method java/math/BigInteger.toByteArray:()[B
      24: aconst_null
      25: aconst_null
      26: aconst_null
      27: aconst_null
      28: aconst_null
      29: invokestatic  #15                 // Method org/conscrypt/NativeCrypto.EVP_PKEY_new_RSA:([B[B[B[B[B[B[B[B)J
      32: invokespecial #16                 // Method org/conscrypt/OpenSSLKey."<init>":(J)V
      35: putfield      #2                  // Field key:Lorg/conscrypt/OpenSSLKey;
      38: aload_0
      39: iconst_1
      40: putfield      #5                  // Field fetchedParams:Z
      43: return

  private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field key:Lorg/conscrypt/OpenSSLKey;
       4: invokevirtual #46                 // Method org/conscrypt/OpenSSLKey.isHardwareBacked:()Z
       7: ifeq          20
      10: new           #68                 // class java/io/NotSerializableException
      13: dup
      14: ldc           #69                 // String Hardware backed keys can not be serialized
      16: invokespecial #70                 // Method java/io/NotSerializableException."<init>":(Ljava/lang/String;)V
      19: athrow
      20: aload_0
      21: invokevirtual #54                 // Method ensureReadParams:()V
      24: aload_1
      25: invokevirtual #71                 // Method java/io/ObjectOutputStream.defaultWriteObject:()V
      28: return
}
