Compiled from "NativeCrypto.java"
public final class org.conscrypt.NativeCrypto {
  private static final java.lang.UnsatisfiedLinkError loadError;

  static final int GN_STACK_SUBJECT_ALT_NAME;

  static final int GN_STACK_ISSUER_ALT_NAME;

  static final int EXTENSION_TYPE_NON_CRITICAL;

  static final int EXTENSION_TYPE_CRITICAL;

  static final int PKCS7_CERTS;

  static final int PKCS7_CRLS;

  static final java.lang.String OBSOLETE_PROTOCOL_SSLV3;

  private static final java.lang.String SUPPORTED_PROTOCOL_TLSV1;

  private static final java.lang.String SUPPORTED_PROTOCOL_TLSV1_1;

  private static final java.lang.String SUPPORTED_PROTOCOL_TLSV1_2;

  static final java.lang.String SUPPORTED_PROTOCOL_TLSV1_3;

  static final java.lang.String[] SUPPORTED_TLS_1_3_CIPHER_SUITES;

  static final java.util.Set<java.lang.String> SUPPORTED_TLS_1_2_CIPHER_SUITES_SET;

  private static final java.util.Set<java.lang.String> SUPPORTED_LEGACY_CIPHER_SUITES_SET;

  static final java.util.Set<java.lang.String> SUPPORTED_TLS_1_3_CIPHER_SUITES_SET;

  static final java.lang.String TLS_EMPTY_RENEGOTIATION_INFO_SCSV;

  private static final java.lang.String TLS_FALLBACK_SCSV;

  private static final boolean HAS_AES_HARDWARE;

  private static final java.lang.String[] SUPPORTED_TLS_1_2_CIPHER_SUITES;

  static final java.lang.String[] DEFAULT_X509_CIPHER_SUITES;

  static final java.lang.String[] DEFAULT_PSK_CIPHER_SUITES;

  static final java.lang.String[] TLSV13_PROTOCOLS;

  static final java.lang.String[] TLSV12_PROTOCOLS;

  static final java.lang.String[] TLSV11_PROTOCOLS;

  static final java.lang.String[] TLSV1_PROTOCOLS;

  static final java.lang.String[] DEFAULT_PROTOCOLS;

  private static final java.lang.String[] SUPPORTED_PROTOCOLS;

  public org.conscrypt.NativeCrypto();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  private static native void clinit();

  static void checkAvailability();
    Code:
       0: getstatic     #2                  // Field loadError:Ljava/lang/UnsatisfiedLinkError;
       3: ifnull        10
       6: getstatic     #2                  // Field loadError:Ljava/lang/UnsatisfiedLinkError;
       9: athrow
      10: return

  static native long EVP_PKEY_new_RSA(byte[], byte[], byte[], byte[], byte[], byte[], byte[], byte[]);

  static native int EVP_PKEY_type(org.conscrypt.NativeRef$EVP_PKEY);

  static native java.lang.String EVP_PKEY_print_public(org.conscrypt.NativeRef$EVP_PKEY);

  static native java.lang.String EVP_PKEY_print_params(org.conscrypt.NativeRef$EVP_PKEY);

  static native void EVP_PKEY_free(long);

  static native int EVP_PKEY_cmp(org.conscrypt.NativeRef$EVP_PKEY, org.conscrypt.NativeRef$EVP_PKEY);

  static native byte[] EVP_marshal_private_key(org.conscrypt.NativeRef$EVP_PKEY);

  static native long EVP_parse_private_key(byte[]) throws org.conscrypt.OpenSSLX509CertificateFactory$ParsingException;

  static native byte[] EVP_marshal_public_key(org.conscrypt.NativeRef$EVP_PKEY);

  static native long EVP_parse_public_key(byte[]) throws org.conscrypt.OpenSSLX509CertificateFactory$ParsingException;

  static native long PEM_read_bio_PUBKEY(long);

  static native long PEM_read_bio_PrivateKey(long);

  static native long getRSAPrivateKeyWrapper(java.security.PrivateKey, byte[]);

  static native long getECPrivateKeyWrapper(java.security.PrivateKey, org.conscrypt.NativeRef$EC_GROUP);

  static native long RSA_generate_key_ex(int, byte[]);

  static native int RSA_size(org.conscrypt.NativeRef$EVP_PKEY);

  static native int RSA_private_encrypt(int, byte[], byte[], org.conscrypt.NativeRef$EVP_PKEY, int);

  static native int RSA_public_decrypt(int, byte[], byte[], org.conscrypt.NativeRef$EVP_PKEY, int) throws javax.crypto.BadPaddingException, java.security.SignatureException;

  static native int RSA_public_encrypt(int, byte[], byte[], org.conscrypt.NativeRef$EVP_PKEY, int);

  static native int RSA_private_decrypt(int, byte[], byte[], org.conscrypt.NativeRef$EVP_PKEY, int) throws javax.crypto.BadPaddingException, java.security.SignatureException;

  static native byte[][] get_RSA_public_params(org.conscrypt.NativeRef$EVP_PKEY);

  static native byte[][] get_RSA_private_params(org.conscrypt.NativeRef$EVP_PKEY);

  static native void chacha20_encrypt_decrypt(byte[], int, byte[], int, int, byte[], byte[], int);

  static native long EVP_PKEY_new_EC_KEY(org.conscrypt.NativeRef$EC_GROUP, org.conscrypt.NativeRef$EC_POINT, byte[]);

  static native long EC_GROUP_new_by_curve_name(java.lang.String);

  static native long EC_GROUP_new_arbitrary(byte[], byte[], byte[], byte[], byte[], byte[], int);

  static native java.lang.String EC_GROUP_get_curve_name(org.conscrypt.NativeRef$EC_GROUP);

  static native byte[][] EC_GROUP_get_curve(org.conscrypt.NativeRef$EC_GROUP);

  static native void EC_GROUP_clear_free(long);

  static native long EC_GROUP_get_generator(org.conscrypt.NativeRef$EC_GROUP);

  static native byte[] EC_GROUP_get_order(org.conscrypt.NativeRef$EC_GROUP);

  static native int EC_GROUP_get_degree(org.conscrypt.NativeRef$EC_GROUP);

  static native byte[] EC_GROUP_get_cofactor(org.conscrypt.NativeRef$EC_GROUP);

  static native long EC_POINT_new(org.conscrypt.NativeRef$EC_GROUP);

  static native void EC_POINT_clear_free(long);

  static native byte[][] EC_POINT_get_affine_coordinates(org.conscrypt.NativeRef$EC_GROUP, org.conscrypt.NativeRef$EC_POINT);

  static native void EC_POINT_set_affine_coordinates(org.conscrypt.NativeRef$EC_GROUP, org.conscrypt.NativeRef$EC_POINT, byte[], byte[]);

  static native long EC_KEY_generate_key(org.conscrypt.NativeRef$EC_GROUP);

  static native long EC_KEY_get1_group(org.conscrypt.NativeRef$EVP_PKEY);

  static native byte[] EC_KEY_get_private_key(org.conscrypt.NativeRef$EVP_PKEY);

  static native long EC_KEY_get_public_key(org.conscrypt.NativeRef$EVP_PKEY);

  static native byte[] EC_KEY_marshal_curve_name(org.conscrypt.NativeRef$EC_GROUP) throws java.io.IOException;

  static native long EC_KEY_parse_curve_name(byte[]) throws java.io.IOException;

  static native int ECDH_compute_key(byte[], int, org.conscrypt.NativeRef$EVP_PKEY, org.conscrypt.NativeRef$EVP_PKEY) throws java.security.InvalidKeyException, java.lang.IndexOutOfBoundsException;

  static native int ECDSA_size(org.conscrypt.NativeRef$EVP_PKEY);

  static native int ECDSA_sign(byte[], byte[], org.conscrypt.NativeRef$EVP_PKEY);

  static native int ECDSA_verify(byte[], byte[], org.conscrypt.NativeRef$EVP_PKEY);

  static native long EVP_get_digestbyname(java.lang.String);

  static native int EVP_MD_size(long);

  static native long EVP_MD_CTX_create();

  static native void EVP_MD_CTX_cleanup(org.conscrypt.NativeRef$EVP_MD_CTX);

  static native void EVP_MD_CTX_destroy(long);

  static native int EVP_MD_CTX_copy_ex(org.conscrypt.NativeRef$EVP_MD_CTX, org.conscrypt.NativeRef$EVP_MD_CTX);

  static native int EVP_DigestInit_ex(org.conscrypt.NativeRef$EVP_MD_CTX, long);

  static native void EVP_DigestUpdate(org.conscrypt.NativeRef$EVP_MD_CTX, byte[], int, int);

  static native void EVP_DigestUpdateDirect(org.conscrypt.NativeRef$EVP_MD_CTX, long, int);

  static native int EVP_DigestFinal_ex(org.conscrypt.NativeRef$EVP_MD_CTX, byte[], int);

  static native long EVP_DigestSignInit(org.conscrypt.NativeRef$EVP_MD_CTX, long, org.conscrypt.NativeRef$EVP_PKEY);

  static native long EVP_DigestVerifyInit(org.conscrypt.NativeRef$EVP_MD_CTX, long, org.conscrypt.NativeRef$EVP_PKEY);

  static native void EVP_DigestSignUpdate(org.conscrypt.NativeRef$EVP_MD_CTX, byte[], int, int);

  static native void EVP_DigestSignUpdateDirect(org.conscrypt.NativeRef$EVP_MD_CTX, long, int);

  static native void EVP_DigestVerifyUpdate(org.conscrypt.NativeRef$EVP_MD_CTX, byte[], int, int);

  static native void EVP_DigestVerifyUpdateDirect(org.conscrypt.NativeRef$EVP_MD_CTX, long, int);

  static native byte[] EVP_DigestSignFinal(org.conscrypt.NativeRef$EVP_MD_CTX);

  static native boolean EVP_DigestVerifyFinal(org.conscrypt.NativeRef$EVP_MD_CTX, byte[], int, int) throws java.lang.IndexOutOfBoundsException;

  static native long EVP_PKEY_encrypt_init(org.conscrypt.NativeRef$EVP_PKEY) throws java.security.InvalidKeyException;

  static native int EVP_PKEY_encrypt(org.conscrypt.NativeRef$EVP_PKEY_CTX, byte[], int, byte[], int, int) throws java.lang.IndexOutOfBoundsException, javax.crypto.BadPaddingException;

  static native long EVP_PKEY_decrypt_init(org.conscrypt.NativeRef$EVP_PKEY) throws java.security.InvalidKeyException;

  static native int EVP_PKEY_decrypt(org.conscrypt.NativeRef$EVP_PKEY_CTX, byte[], int, byte[], int, int) throws java.lang.IndexOutOfBoundsException, javax.crypto.BadPaddingException;

  static native void EVP_PKEY_CTX_free(long);

  static native void EVP_PKEY_CTX_set_rsa_padding(long, int) throws java.security.InvalidAlgorithmParameterException;

  static native void EVP_PKEY_CTX_set_rsa_pss_saltlen(long, int) throws java.security.InvalidAlgorithmParameterException;

  static native void EVP_PKEY_CTX_set_rsa_mgf1_md(long, long) throws java.security.InvalidAlgorithmParameterException;

  static native void EVP_PKEY_CTX_set_rsa_oaep_md(long, long) throws java.security.InvalidAlgorithmParameterException;

  static native void EVP_PKEY_CTX_set_rsa_oaep_label(long, byte[]) throws java.security.InvalidAlgorithmParameterException;

  static native long EVP_get_cipherbyname(java.lang.String);

  static native void EVP_CipherInit_ex(org.conscrypt.NativeRef$EVP_CIPHER_CTX, long, byte[], byte[], boolean);

  static native int EVP_CipherUpdate(org.conscrypt.NativeRef$EVP_CIPHER_CTX, byte[], int, byte[], int, int) throws java.lang.IndexOutOfBoundsException;

  static native int EVP_CipherFinal_ex(org.conscrypt.NativeRef$EVP_CIPHER_CTX, byte[], int) throws javax.crypto.BadPaddingException, javax.crypto.IllegalBlockSizeException;

  static native int EVP_CIPHER_iv_length(long);

  static native long EVP_CIPHER_CTX_new();

  static native int EVP_CIPHER_CTX_block_size(org.conscrypt.NativeRef$EVP_CIPHER_CTX);

  static native int get_EVP_CIPHER_CTX_buf_len(org.conscrypt.NativeRef$EVP_CIPHER_CTX);

  static native boolean get_EVP_CIPHER_CTX_final_used(org.conscrypt.NativeRef$EVP_CIPHER_CTX);

  static native void EVP_CIPHER_CTX_set_padding(org.conscrypt.NativeRef$EVP_CIPHER_CTX, boolean);

  static native void EVP_CIPHER_CTX_set_key_length(org.conscrypt.NativeRef$EVP_CIPHER_CTX, int);

  static native void EVP_CIPHER_CTX_free(long);

  static native long EVP_aead_aes_128_gcm();

  static native long EVP_aead_aes_256_gcm();

  static native long EVP_aead_chacha20_poly1305();

  static native long EVP_aead_aes_128_gcm_siv();

  static native long EVP_aead_aes_256_gcm_siv();

  static native int EVP_AEAD_max_overhead(long);

  static native int EVP_AEAD_nonce_length(long);

  static native int EVP_AEAD_CTX_seal(long, byte[], int, byte[], int, byte[], byte[], int, int, byte[]) throws javax.crypto.ShortBufferException, javax.crypto.BadPaddingException;

  static native int EVP_AEAD_CTX_seal_buf(long, byte[], int, java.nio.ByteBuffer, byte[], java.nio.ByteBuffer, byte[]) throws javax.crypto.ShortBufferException, javax.crypto.BadPaddingException;

  static native int EVP_AEAD_CTX_open(long, byte[], int, byte[], int, byte[], byte[], int, int, byte[]) throws javax.crypto.ShortBufferException, javax.crypto.BadPaddingException;

  static native int EVP_AEAD_CTX_open_buf(long, byte[], int, java.nio.ByteBuffer, byte[], java.nio.ByteBuffer, byte[]) throws javax.crypto.ShortBufferException, javax.crypto.BadPaddingException;

  static native long HMAC_CTX_new();

  static native void HMAC_CTX_free(long);

  static native void HMAC_Init_ex(org.conscrypt.NativeRef$HMAC_CTX, byte[], long);

  static native void HMAC_Update(org.conscrypt.NativeRef$HMAC_CTX, byte[], int, int);

  static native void HMAC_UpdateDirect(org.conscrypt.NativeRef$HMAC_CTX, long, int);

  static native byte[] HMAC_Final(org.conscrypt.NativeRef$HMAC_CTX);

  static native void RAND_bytes(byte[]);

  static int X509_NAME_hash(javax.security.auth.x500.X500Principal);
    Code:
       0: aload_0
       1: ldc           #3                  // String SHA1
       3: invokestatic  #4                  // Method X509_NAME_hash:(Ljavax/security/auth/x500/X500Principal;Ljava/lang/String;)I
       6: ireturn

  public static int X509_NAME_hash_old(javax.security.auth.x500.X500Principal);
    Code:
       0: aload_0
       1: ldc           #5                  // String MD5
       3: invokestatic  #4                  // Method X509_NAME_hash:(Ljavax/security/auth/x500/X500Principal;Ljava/lang/String;)I
       6: ireturn

  private static int X509_NAME_hash(javax.security.auth.x500.X500Principal, java.lang.String);
    Code:
       0: aload_1
       1: invokestatic  #6                  // Method java/security/MessageDigest.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;
       4: aload_0
       5: invokevirtual #7                  // Method javax/security/auth/x500/X500Principal.getEncoded:()[B
       8: invokevirtual #8                  // Method java/security/MessageDigest.digest:([B)[B
      11: astore_2
      12: iconst_0
      13: istore_3
      14: aload_2
      15: iload_3
      16: iinc          3, 1
      19: baload
      20: sipush        255
      23: iand
      24: iconst_0
      25: ishl
      26: aload_2
      27: iload_3
      28: iinc          3, 1
      31: baload
      32: sipush        255
      35: iand
      36: bipush        8
      38: ishl
      39: ior
      40: aload_2
      41: iload_3
      42: iinc          3, 1
      45: baload
      46: sipush        255
      49: iand
      50: bipush        16
      52: ishl
      53: ior
      54: aload_2
      55: iload_3
      56: baload
      57: sipush        255
      60: iand
      61: bipush        24
      63: ishl
      64: ior
      65: ireturn
      66: astore_2
      67: new           #10                 // class java/lang/AssertionError
      70: dup
      71: aload_2
      72: invokespecial #11                 // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
      75: athrow
    Exception table:
       from    to  target type
           0    65    66   Class java/security/NoSuchAlgorithmException

  static native long d2i_X509_bio(long);

  static native long d2i_X509(byte[]) throws org.conscrypt.OpenSSLX509CertificateFactory$ParsingException;

  static native long PEM_read_bio_X509(long);

  static native byte[] i2d_X509(long, org.conscrypt.OpenSSLX509Certificate);

  static native byte[] i2d_X509_PUBKEY(long, org.conscrypt.OpenSSLX509Certificate);

  static native byte[] ASN1_seq_pack_X509(long[]);

  static native long[] ASN1_seq_unpack_X509_bio(long) throws org.conscrypt.OpenSSLX509CertificateFactory$ParsingException;

  static native void X509_free(long, org.conscrypt.OpenSSLX509Certificate);

  static native long X509_dup(long, org.conscrypt.OpenSSLX509Certificate);

  static native int X509_cmp(long, org.conscrypt.OpenSSLX509Certificate, long, org.conscrypt.OpenSSLX509Certificate);

  static native void X509_print_ex(long, long, org.conscrypt.OpenSSLX509Certificate, long, long);

  static native byte[] X509_get_issuer_name(long, org.conscrypt.OpenSSLX509Certificate);

  static native byte[] X509_get_subject_name(long, org.conscrypt.OpenSSLX509Certificate);

  static native java.lang.String get_X509_sig_alg_oid(long, org.conscrypt.OpenSSLX509Certificate);

  static native byte[] get_X509_sig_alg_parameter(long, org.conscrypt.OpenSSLX509Certificate);

  static native boolean[] get_X509_issuerUID(long, org.conscrypt.OpenSSLX509Certificate);

  static native boolean[] get_X509_subjectUID(long, org.conscrypt.OpenSSLX509Certificate);

  static native long X509_get_pubkey(long, org.conscrypt.OpenSSLX509Certificate) throws java.security.NoSuchAlgorithmException, java.security.InvalidKeyException;

  static native java.lang.String get_X509_pubkey_oid(long, org.conscrypt.OpenSSLX509Certificate);

  static native byte[] X509_get_ext_oid(long, org.conscrypt.OpenSSLX509Certificate, java.lang.String);

  static native java.lang.String[] get_X509_ext_oids(long, org.conscrypt.OpenSSLX509Certificate, int);

  static native java.lang.Object[][] get_X509_GENERAL_NAME_stack(long, org.conscrypt.OpenSSLX509Certificate, int) throws java.security.cert.CertificateParsingException;

  static native boolean[] get_X509_ex_kusage(long, org.conscrypt.OpenSSLX509Certificate);

  static native java.lang.String[] get_X509_ex_xkusage(long, org.conscrypt.OpenSSLX509Certificate);

  static native int get_X509_ex_pathlen(long, org.conscrypt.OpenSSLX509Certificate);

  static native long X509_get_notBefore(long, org.conscrypt.OpenSSLX509Certificate);

  static native long X509_get_notAfter(long, org.conscrypt.OpenSSLX509Certificate);

  static native long X509_get_version(long, org.conscrypt.OpenSSLX509Certificate);

  static native byte[] X509_get_serialNumber(long, org.conscrypt.OpenSSLX509Certificate);

  static native void X509_verify(long, org.conscrypt.OpenSSLX509Certificate, org.conscrypt.NativeRef$EVP_PKEY) throws javax.crypto.BadPaddingException;

  static native byte[] get_X509_cert_info_enc(long, org.conscrypt.OpenSSLX509Certificate);

  static native byte[] get_X509_signature(long, org.conscrypt.OpenSSLX509Certificate);

  static native int get_X509_ex_flags(long, org.conscrypt.OpenSSLX509Certificate);

  static native int X509_check_issued(long, org.conscrypt.OpenSSLX509Certificate, long, org.conscrypt.OpenSSLX509Certificate);

  static native long[] d2i_PKCS7_bio(long, int) throws org.conscrypt.OpenSSLX509CertificateFactory$ParsingException;

  static native byte[] i2d_PKCS7(long[]);

  static native long[] PEM_read_bio_PKCS7(long, int);

  static native long d2i_X509_CRL_bio(long);

  static native long PEM_read_bio_X509_CRL(long);

  static native byte[] i2d_X509_CRL(long, org.conscrypt.OpenSSLX509CRL);

  static native void X509_CRL_free(long, org.conscrypt.OpenSSLX509CRL);

  static native void X509_CRL_print(long, long, org.conscrypt.OpenSSLX509CRL);

  static native java.lang.String get_X509_CRL_sig_alg_oid(long, org.conscrypt.OpenSSLX509CRL);

  static native byte[] get_X509_CRL_sig_alg_parameter(long, org.conscrypt.OpenSSLX509CRL);

  static native byte[] X509_CRL_get_issuer_name(long, org.conscrypt.OpenSSLX509CRL);

  static native long X509_CRL_get0_by_cert(long, org.conscrypt.OpenSSLX509CRL, long, org.conscrypt.OpenSSLX509Certificate);

  static native long X509_CRL_get0_by_serial(long, org.conscrypt.OpenSSLX509CRL, byte[]);

  static native long[] X509_CRL_get_REVOKED(long, org.conscrypt.OpenSSLX509CRL);

  static native java.lang.String[] get_X509_CRL_ext_oids(long, org.conscrypt.OpenSSLX509CRL, int);

  static native byte[] X509_CRL_get_ext_oid(long, org.conscrypt.OpenSSLX509CRL, java.lang.String);

  static native void X509_delete_ext(long, org.conscrypt.OpenSSLX509Certificate, java.lang.String);

  static native long X509_CRL_get_version(long, org.conscrypt.OpenSSLX509CRL);

  static native long X509_CRL_get_ext(long, org.conscrypt.OpenSSLX509CRL, java.lang.String);

  static native byte[] get_X509_CRL_signature(long, org.conscrypt.OpenSSLX509CRL);

  static native void X509_CRL_verify(long, org.conscrypt.OpenSSLX509CRL, org.conscrypt.NativeRef$EVP_PKEY) throws javax.crypto.BadPaddingException, java.security.SignatureException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, javax.crypto.IllegalBlockSizeException;

  static native byte[] get_X509_CRL_crl_enc(long, org.conscrypt.OpenSSLX509CRL);

  static native long X509_CRL_get_lastUpdate(long, org.conscrypt.OpenSSLX509CRL);

  static native long X509_CRL_get_nextUpdate(long, org.conscrypt.OpenSSLX509CRL);

  static native long X509_REVOKED_dup(long);

  static native byte[] i2d_X509_REVOKED(long);

  static native java.lang.String[] get_X509_REVOKED_ext_oids(long, int);

  static native byte[] X509_REVOKED_get_ext_oid(long, java.lang.String);

  static native byte[] X509_REVOKED_get_serialNumber(long);

  static native long X509_REVOKED_get_ext(long, java.lang.String);

  static native long get_X509_REVOKED_revocationDate(long);

  static native void X509_REVOKED_print(long, long);

  static native int X509_supported_extension(long);

  static native void ASN1_TIME_to_Calendar(long, java.util.Calendar) throws org.conscrypt.OpenSSLX509CertificateFactory$ParsingException;

  static native long asn1_read_init(byte[]) throws java.io.IOException;

  static native long asn1_read_sequence(long) throws java.io.IOException;

  static native boolean asn1_read_next_tag_is(long, int) throws java.io.IOException;

  static native long asn1_read_tagged(long) throws java.io.IOException;

  static native byte[] asn1_read_octetstring(long) throws java.io.IOException;

  static native long asn1_read_uint64(long) throws java.io.IOException;

  static native void asn1_read_null(long) throws java.io.IOException;

  static native java.lang.String asn1_read_oid(long) throws java.io.IOException;

  static native boolean asn1_read_is_empty(long);

  static native void asn1_read_free(long);

  static native long asn1_write_init() throws java.io.IOException;

  static native long asn1_write_sequence(long) throws java.io.IOException;

  static native long asn1_write_tag(long, int) throws java.io.IOException;

  static native void asn1_write_octetstring(long, byte[]) throws java.io.IOException;

  static native void asn1_write_uint64(long, long) throws java.io.IOException;

  static native void asn1_write_null(long) throws java.io.IOException;

  static native void asn1_write_oid(long, java.lang.String) throws java.io.IOException;

  static native void asn1_write_flush(long) throws java.io.IOException;

  static native byte[] asn1_write_finish(long) throws java.io.IOException;

  static native void asn1_write_cleanup(long);

  static native void asn1_write_free(long);

  static native long create_BIO_InputStream(org.conscrypt.OpenSSLBIOInputStream, boolean);

  static native long create_BIO_OutputStream(java.io.OutputStream);

  static native void BIO_free_all(long);

  static java.lang.String cipherSuiteToJava(java.lang.String);
    Code:
       0: ldc           #12                 // String TLS_RSA_WITH_3DES_EDE_CBC_SHA
       2: aload_0
       3: invokevirtual #13                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
       6: ifeq          12
       9: ldc           #14                 // String SSL_RSA_WITH_3DES_EDE_CBC_SHA
      11: areturn
      12: aload_0
      13: areturn

  static java.lang.String cipherSuiteFromJava(java.lang.String);
    Code:
       0: ldc           #14                 // String SSL_RSA_WITH_3DES_EDE_CBC_SHA
       2: aload_0
       3: invokevirtual #13                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
       6: ifeq          12
       9: ldc           #12                 // String TLS_RSA_WITH_3DES_EDE_CBC_SHA
      11: areturn
      12: aload_0
      13: areturn

  static native int EVP_has_aes_hardware();

  static native long SSL_CTX_new();

  static java.lang.String[] getSupportedCipherSuites();
    Code:
       0: iconst_2
       1: anewarray     #15                 // class "[Ljava/lang/String;"
       4: dup
       5: iconst_0
       6: getstatic     #16                 // Field SUPPORTED_TLS_1_3_CIPHER_SUITES:[Ljava/lang/String;
       9: aastore
      10: dup
      11: iconst_1
      12: getstatic     #17                 // Field SUPPORTED_TLS_1_2_CIPHER_SUITES:[Ljava/lang/String;
      15: invokevirtual #18                 // Method "[Ljava/lang/String;".clone:()Ljava/lang/Object;
      18: checkcast     #15                 // class "[Ljava/lang/String;"
      21: aastore
      22: invokestatic  #19                 // Method org/conscrypt/SSLUtils.concat:([[Ljava/lang/String;)[Ljava/lang/String;
      25: areturn

  static native void SSL_CTX_free(long, org.conscrypt.AbstractSessionContext);

  static native void SSL_CTX_set_session_id_context(long, org.conscrypt.AbstractSessionContext, byte[]);

  static native long SSL_CTX_set_timeout(long, org.conscrypt.AbstractSessionContext, long);

  static native long SSL_new(long, org.conscrypt.AbstractSessionContext) throws javax.net.ssl.SSLException;

  static native void SSL_enable_tls_channel_id(long, org.conscrypt.NativeSsl) throws javax.net.ssl.SSLException;

  static native byte[] SSL_get_tls_channel_id(long, org.conscrypt.NativeSsl) throws javax.net.ssl.SSLException;

  static native void SSL_set1_tls_channel_id(long, org.conscrypt.NativeSsl, org.conscrypt.NativeRef$EVP_PKEY);

  static native void setLocalCertsAndPrivateKey(long, org.conscrypt.NativeSsl, byte[][], org.conscrypt.NativeRef$EVP_PKEY) throws javax.net.ssl.SSLException;

  static native void SSL_set_client_CA_list(long, org.conscrypt.NativeSsl, byte[][]) throws javax.net.ssl.SSLException;

  static native long SSL_set_mode(long, org.conscrypt.NativeSsl, long);

  static native long SSL_set_options(long, org.conscrypt.NativeSsl, long);

  static native long SSL_clear_options(long, org.conscrypt.NativeSsl, long);

  static native int SSL_set_protocol_versions(long, org.conscrypt.NativeSsl, int, int);

  static native void SSL_enable_signed_cert_timestamps(long, org.conscrypt.NativeSsl);

  static native byte[] SSL_get_signed_cert_timestamp_list(long, org.conscrypt.NativeSsl);

  static native void SSL_set_signed_cert_timestamp_list(long, org.conscrypt.NativeSsl, byte[]);

  static native void SSL_enable_ocsp_stapling(long, org.conscrypt.NativeSsl);

  static native byte[] SSL_get_ocsp_response(long, org.conscrypt.NativeSsl);

  static native void SSL_set_ocsp_response(long, org.conscrypt.NativeSsl, byte[]);

  static native byte[] SSL_get_tls_unique(long, org.conscrypt.NativeSsl);

  static native byte[] SSL_export_keying_material(long, org.conscrypt.NativeSsl, byte[], byte[], int) throws javax.net.ssl.SSLException;

  static native void SSL_use_psk_identity_hint(long, org.conscrypt.NativeSsl, java.lang.String) throws javax.net.ssl.SSLException;

  static native void set_SSL_psk_client_callback_enabled(long, org.conscrypt.NativeSsl, boolean);

  static native void set_SSL_psk_server_callback_enabled(long, org.conscrypt.NativeSsl, boolean);

  static java.lang.String[] getSupportedProtocols();
    Code:
       0: getstatic     #20                 // Field SUPPORTED_PROTOCOLS:[Ljava/lang/String;
       3: invokevirtual #21                 // Method "[Ljava/lang/String;".clone:()Ljava/lang/Object;
       6: checkcast     #15                 // class "[Ljava/lang/String;"
       9: areturn

  private static org.conscrypt.NativeCrypto$Range getProtocolRange(java.lang.String[]);
    Code:
       0: aload_0
       1: invokestatic  #22                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
       4: astore_1
       5: aconst_null
       6: astore_2
       7: aconst_null
       8: astore_3
       9: iconst_0
      10: istore        4
      12: iload         4
      14: getstatic     #20                 // Field SUPPORTED_PROTOCOLS:[Ljava/lang/String;
      17: arraylength
      18: if_icmpge     66
      21: getstatic     #20                 // Field SUPPORTED_PROTOCOLS:[Ljava/lang/String;
      24: iload         4
      26: aaload
      27: astore        5
      29: aload_1
      30: aload         5
      32: invokeinterface #23,  2           // InterfaceMethod java/util/List.contains:(Ljava/lang/Object;)Z
      37: ifeq          53
      40: aload_2
      41: ifnonnull     47
      44: aload         5
      46: astore_2
      47: aload         5
      49: astore_3
      50: goto          60
      53: aload_2
      54: ifnull        60
      57: goto          66
      60: iinc          4, 1
      63: goto          12
      66: aload_2
      67: ifnull        74
      70: aload_3
      71: ifnonnull     84
      74: new           #24                 // class java/lang/IllegalArgumentException
      77: dup
      78: ldc           #25                 // String No protocols enabled.
      80: invokespecial #26                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      83: athrow
      84: new           #27                 // class org/conscrypt/NativeCrypto$Range
      87: dup
      88: aload_2
      89: aload_3
      90: invokespecial #28                 // Method org/conscrypt/NativeCrypto$Range."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      93: areturn

  static void setEnabledProtocols(long, org.conscrypt.NativeSsl, java.lang.String[]);
    Code:
       0: aload_3
       1: invokestatic  #29                 // Method checkEnabledProtocols:([Ljava/lang/String;)[Ljava/lang/String;
       4: pop
       5: aload_3
       6: invokestatic  #30                 // Method getProtocolRange:([Ljava/lang/String;)Lorg/conscrypt/NativeCrypto$Range;
       9: astore        4
      11: lload_0
      12: aload_2
      13: aload         4
      15: getfield      #31                 // Field org/conscrypt/NativeCrypto$Range.min:Ljava/lang/String;
      18: invokestatic  #32                 // Method getProtocolConstant:(Ljava/lang/String;)I
      21: aload         4
      23: getfield      #33                 // Field org/conscrypt/NativeCrypto$Range.max:Ljava/lang/String;
      26: invokestatic  #32                 // Method getProtocolConstant:(Ljava/lang/String;)I
      29: invokestatic  #34                 // Method SSL_set_protocol_versions:(JLorg/conscrypt/NativeSsl;II)I
      32: pop
      33: return

  private static int getProtocolConstant(java.lang.String);
    Code:
       0: aload_0
       1: ldc           #36                 // String TLSv1
       3: invokevirtual #13                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
       6: ifeq          13
       9: sipush        769
      12: ireturn
      13: aload_0
      14: ldc           #38                 // String TLSv1.1
      16: invokevirtual #13                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      19: ifeq          26
      22: sipush        770
      25: ireturn
      26: aload_0
      27: ldc           #39                 // String TLSv1.2
      29: invokevirtual #13                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      32: ifeq          39
      35: sipush        771
      38: ireturn
      39: aload_0
      40: ldc           #40                 // String TLSv1.3
      42: invokevirtual #13                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      45: ifeq          52
      48: sipush        772
      51: ireturn
      52: new           #10                 // class java/lang/AssertionError
      55: dup
      56: new           #41                 // class java/lang/StringBuilder
      59: dup
      60: invokespecial #42                 // Method java/lang/StringBuilder."<init>":()V
      63: ldc           #43                 // String Unknown protocol encountered:
      65: invokevirtual #44                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      68: aload_0
      69: invokevirtual #44                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      72: invokevirtual #45                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      75: invokespecial #11                 // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
      78: athrow

  static java.lang.String[] checkEnabledProtocols(java.lang.String[]);
    Code:
       0: aload_0
       1: ifnonnull     14
       4: new           #24                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #46                 // String protocols == null
      10: invokespecial #26                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_0
      15: astore_1
      16: aload_1
      17: arraylength
      18: istore_2
      19: iconst_0
      20: istore_3
      21: iload_3
      22: iload_2
      23: if_icmpge     135
      26: aload_1
      27: iload_3
      28: aaload
      29: astore        4
      31: aload         4
      33: ifnonnull     46
      36: new           #24                 // class java/lang/IllegalArgumentException
      39: dup
      40: ldc           #47                 // String protocols contains null
      42: invokespecial #26                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      45: athrow
      46: aload         4
      48: ldc           #36                 // String TLSv1
      50: invokevirtual #13                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      53: ifne          129
      56: aload         4
      58: ldc           #38                 // String TLSv1.1
      60: invokevirtual #13                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      63: ifne          129
      66: aload         4
      68: ldc           #39                 // String TLSv1.2
      70: invokevirtual #13                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      73: ifne          129
      76: aload         4
      78: ldc           #40                 // String TLSv1.3
      80: invokevirtual #13                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      83: ifne          129
      86: aload         4
      88: ldc           #48                 // String SSLv3
      90: invokevirtual #13                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      93: ifne          129
      96: new           #24                 // class java/lang/IllegalArgumentException
      99: dup
     100: new           #41                 // class java/lang/StringBuilder
     103: dup
     104: invokespecial #42                 // Method java/lang/StringBuilder."<init>":()V
     107: ldc           #49                 // String protocol
     109: invokevirtual #44                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     112: aload         4
     114: invokevirtual #44                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     117: ldc           #50                 // String  is not supported
     119: invokevirtual #44                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     122: invokevirtual #45                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     125: invokespecial #26                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     128: athrow
     129: iinc          3, 1
     132: goto          21
     135: aload_0
     136: areturn

  static native void SSL_set_cipher_lists(long, org.conscrypt.NativeSsl, java.lang.String[]);

  static native long[] SSL_get_ciphers(long, org.conscrypt.NativeSsl);

  static void setEnabledCipherSuites(long, org.conscrypt.NativeSsl, java.lang.String[], java.lang.String[]);
    Code:
       0: aload_3
       1: invokestatic  #51                 // Method checkEnabledCipherSuites:([Ljava/lang/String;)[Ljava/lang/String;
       4: pop
       5: aload         4
       7: invokestatic  #30                 // Method getProtocolRange:([Ljava/lang/String;)Lorg/conscrypt/NativeCrypto$Range;
      10: getfield      #33                 // Field org/conscrypt/NativeCrypto$Range.max:Ljava/lang/String;
      13: astore        5
      15: new           #52                 // class java/util/ArrayList
      18: dup
      19: invokespecial #53                 // Method java/util/ArrayList."<init>":()V
      22: astore        6
      24: iconst_0
      25: istore        7
      27: iload         7
      29: aload_3
      30: arraylength
      31: if_icmpge     114
      34: aload_3
      35: iload         7
      37: aaload
      38: astore        8
      40: aload         8
      42: ldc           #54                 // String TLS_EMPTY_RENEGOTIATION_INFO_SCSV
      44: invokevirtual #13                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      47: ifeq          53
      50: goto          108
      53: aload         8
      55: ldc           #55                 // String TLS_FALLBACK_SCSV
      57: invokevirtual #13                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      60: ifeq          95
      63: aload         5
      65: ldc           #36                 // String TLSv1
      67: invokevirtual #13                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      70: ifne          83
      73: aload         5
      75: ldc           #38                 // String TLSv1.1
      77: invokevirtual #13                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      80: ifeq          95
      83: lload_0
      84: aload_2
      85: ldc2_w        #56                 // long 1024l
      88: invokestatic  #58                 // Method SSL_set_mode:(JLorg/conscrypt/NativeSsl;J)J
      91: pop2
      92: goto          108
      95: aload         6
      97: aload         8
      99: invokestatic  #59                 // Method cipherSuiteFromJava:(Ljava/lang/String;)Ljava/lang/String;
     102: invokeinterface #60,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     107: pop
     108: iinc          7, 1
     111: goto          27
     114: lload_0
     115: aload_2
     116: aload         6
     118: aload         6
     120: invokeinterface #61,  1           // InterfaceMethod java/util/List.size:()I
     125: anewarray     #62                 // class java/lang/String
     128: invokeinterface #63,  2           // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
     133: checkcast     #15                 // class "[Ljava/lang/String;"
     136: invokestatic  #64                 // Method SSL_set_cipher_lists:(JLorg/conscrypt/NativeSsl;[Ljava/lang/String;)V
     139: return

  static java.lang.String[] checkEnabledCipherSuites(java.lang.String[]);
    Code:
       0: aload_0
       1: ifnonnull     14
       4: new           #24                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #65                 // String cipherSuites == null
      10: invokespecial #26                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: iconst_0
      15: istore_1
      16: iload_1
      17: aload_0
      18: arraylength
      19: if_icmpge     159
      22: aload_0
      23: iload_1
      24: aaload
      25: ifnonnull     60
      28: new           #24                 // class java/lang/IllegalArgumentException
      31: dup
      32: new           #41                 // class java/lang/StringBuilder
      35: dup
      36: invokespecial #42                 // Method java/lang/StringBuilder."<init>":()V
      39: ldc           #66                 // String cipherSuites[
      41: invokevirtual #44                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      44: iload_1
      45: invokevirtual #67                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      48: ldc           #68                 // String ] == null
      50: invokevirtual #44                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      53: invokevirtual #45                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      56: invokespecial #26                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      59: athrow
      60: aload_0
      61: iload_1
      62: aaload
      63: ldc           #54                 // String TLS_EMPTY_RENEGOTIATION_INFO_SCSV
      65: invokevirtual #13                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      68: ifne          153
      71: aload_0
      72: iload_1
      73: aaload
      74: ldc           #55                 // String TLS_FALLBACK_SCSV
      76: invokevirtual #13                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      79: ifeq          85
      82: goto          153
      85: getstatic     #69                 // Field SUPPORTED_TLS_1_2_CIPHER_SUITES_SET:Ljava/util/Set;
      88: aload_0
      89: iload_1
      90: aaload
      91: invokeinterface #70,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      96: ifeq          102
      99: goto          153
     102: getstatic     #71                 // Field SUPPORTED_LEGACY_CIPHER_SUITES_SET:Ljava/util/Set;
     105: aload_0
     106: iload_1
     107: aaload
     108: invokeinterface #70,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
     113: ifeq          119
     116: goto          153
     119: new           #24                 // class java/lang/IllegalArgumentException
     122: dup
     123: new           #41                 // class java/lang/StringBuilder
     126: dup
     127: invokespecial #42                 // Method java/lang/StringBuilder."<init>":()V
     130: ldc           #72                 // String cipherSuite
     132: invokevirtual #44                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     135: aload_0
     136: iload_1
     137: aaload
     138: invokevirtual #44                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     141: ldc           #73                 // String  is not supported.
     143: invokevirtual #44                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     146: invokevirtual #45                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     149: invokespecial #26                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     152: athrow
     153: iinc          1, 1
     156: goto          16
     159: aload_0
     160: areturn

  static native void SSL_set_accept_state(long, org.conscrypt.NativeSsl);

  static native void SSL_set_connect_state(long, org.conscrypt.NativeSsl);

  static native void SSL_set_verify(long, org.conscrypt.NativeSsl, int);

  static native void SSL_set_session(long, org.conscrypt.NativeSsl, long) throws javax.net.ssl.SSLException;

  static native void SSL_set_session_creation_enabled(long, org.conscrypt.NativeSsl, boolean) throws javax.net.ssl.SSLException;

  static native boolean SSL_session_reused(long, org.conscrypt.NativeSsl);

  static native void SSL_accept_renegotiations(long, org.conscrypt.NativeSsl) throws javax.net.ssl.SSLException;

  static native void SSL_set_tlsext_host_name(long, org.conscrypt.NativeSsl, java.lang.String) throws javax.net.ssl.SSLException;

  static native java.lang.String SSL_get_servername(long, org.conscrypt.NativeSsl);

  static native void SSL_do_handshake(long, org.conscrypt.NativeSsl, java.io.FileDescriptor, org.conscrypt.NativeCrypto$SSLHandshakeCallbacks, int) throws javax.net.ssl.SSLException, java.net.SocketTimeoutException, java.security.cert.CertificateException;

  public static native java.lang.String SSL_get_current_cipher(long, org.conscrypt.NativeSsl);

  public static native java.lang.String SSL_get_version(long, org.conscrypt.NativeSsl);

  static native byte[][] SSL_get0_peer_certificates(long, org.conscrypt.NativeSsl);

  static native int SSL_read(long, org.conscrypt.NativeSsl, java.io.FileDescriptor, org.conscrypt.NativeCrypto$SSLHandshakeCallbacks, byte[], int, int, int) throws java.io.IOException;

  static native void SSL_write(long, org.conscrypt.NativeSsl, java.io.FileDescriptor, org.conscrypt.NativeCrypto$SSLHandshakeCallbacks, byte[], int, int, int) throws java.io.IOException;

  static native void SSL_interrupt(long, org.conscrypt.NativeSsl);

  static native void SSL_shutdown(long, org.conscrypt.NativeSsl, java.io.FileDescriptor, org.conscrypt.NativeCrypto$SSLHandshakeCallbacks) throws java.io.IOException;

  static native int SSL_get_shutdown(long, org.conscrypt.NativeSsl);

  static native void SSL_free(long, org.conscrypt.NativeSsl);

  static native long SSL_get_time(long, org.conscrypt.NativeSsl);

  static native long SSL_set_timeout(long, org.conscrypt.NativeSsl, long);

  static native long SSL_get_timeout(long, org.conscrypt.NativeSsl);

  static native int SSL_get_signature_algorithm_key_type(int);

  static native byte[] SSL_session_id(long, org.conscrypt.NativeSsl);

  static native byte[] SSL_SESSION_session_id(long);

  static native long SSL_SESSION_get_time(long);

  static native long SSL_SESSION_get_timeout(long);

  static native java.lang.String SSL_SESSION_get_version(long);

  static native java.lang.String SSL_SESSION_cipher(long);

  static native boolean SSL_SESSION_should_be_single_use(long);

  static native void SSL_SESSION_up_ref(long);

  static native void SSL_SESSION_free(long);

  static native byte[] i2d_SSL_SESSION(long);

  static native long d2i_SSL_SESSION(byte[]) throws java.io.IOException;

  static native java.lang.String SSL_CIPHER_get_kx_name(long);

  static native java.lang.String[] get_cipher_names(java.lang.String);

  public static native byte[] get_ocsp_single_extension(byte[], java.lang.String, long, org.conscrypt.OpenSSLX509Certificate, long, org.conscrypt.OpenSSLX509Certificate);

  static native long getDirectBufferAddress(java.nio.Buffer);

  static native long SSL_BIO_new(long, org.conscrypt.NativeSsl) throws javax.net.ssl.SSLException;

  static native int SSL_get_error(long, org.conscrypt.NativeSsl, int);

  static native void SSL_clear_error();

  static native int SSL_pending_readable_bytes(long, org.conscrypt.NativeSsl);

  static native int SSL_pending_written_bytes_in_BIO(long);

  static native int SSL_max_seal_overhead(long, org.conscrypt.NativeSsl);

  static native void setApplicationProtocols(long, org.conscrypt.NativeSsl, boolean, byte[]) throws java.io.IOException;

  static native void setHasApplicationProtocolSelector(long, org.conscrypt.NativeSsl, boolean) throws java.io.IOException;

  static native byte[] getApplicationProtocol(long, org.conscrypt.NativeSsl);

  static native int ENGINE_SSL_do_handshake(long, org.conscrypt.NativeSsl, org.conscrypt.NativeCrypto$SSLHandshakeCallbacks) throws java.io.IOException;

  static native int ENGINE_SSL_read_direct(long, org.conscrypt.NativeSsl, long, int, org.conscrypt.NativeCrypto$SSLHandshakeCallbacks) throws java.io.IOException, java.security.cert.CertificateException;

  static native int ENGINE_SSL_write_direct(long, org.conscrypt.NativeSsl, long, int, org.conscrypt.NativeCrypto$SSLHandshakeCallbacks) throws java.io.IOException;

  static native int ENGINE_SSL_write_BIO_direct(long, org.conscrypt.NativeSsl, long, long, int, org.conscrypt.NativeCrypto$SSLHandshakeCallbacks) throws java.io.IOException;

  static native int ENGINE_SSL_write_BIO_heap(long, org.conscrypt.NativeSsl, long, byte[], int, int, org.conscrypt.NativeCrypto$SSLHandshakeCallbacks) throws java.io.IOException, java.lang.IndexOutOfBoundsException;

  static native int ENGINE_SSL_read_BIO_direct(long, org.conscrypt.NativeSsl, long, long, int, org.conscrypt.NativeCrypto$SSLHandshakeCallbacks) throws java.io.IOException;

  static native int ENGINE_SSL_read_BIO_heap(long, org.conscrypt.NativeSsl, long, byte[], int, int, org.conscrypt.NativeCrypto$SSLHandshakeCallbacks) throws java.io.IOException, java.lang.IndexOutOfBoundsException;

  static native void ENGINE_SSL_force_read(long, org.conscrypt.NativeSsl, org.conscrypt.NativeCrypto$SSLHandshakeCallbacks) throws java.io.IOException;

  static native void ENGINE_SSL_shutdown(long, org.conscrypt.NativeSsl, org.conscrypt.NativeCrypto$SSLHandshakeCallbacks) throws java.io.IOException;

  static native int BIO_read(long, byte[]) throws java.io.IOException;

  static native void BIO_write(long, byte[], int, int) throws java.io.IOException, java.lang.IndexOutOfBoundsException;

  static native long SSL_clear_mode(long, org.conscrypt.NativeSsl, long);

  static native long SSL_get_mode(long, org.conscrypt.NativeSsl);

  static native long SSL_get_options(long, org.conscrypt.NativeSsl);

  static native long SSL_get1_session(long, org.conscrypt.NativeSsl);

  static {};
    Code:
       0: aconst_null
       1: astore_0
       2: invokestatic  #74                 // Method org/conscrypt/NativeCryptoJni.init:()V
       5: invokestatic  #75                 // Method clinit:()V
       8: goto          14
      11: astore_1
      12: aload_1
      13: astore_0
      14: aload_0
      15: putstatic     #2                  // Field loadError:Ljava/lang/UnsatisfiedLinkError;
      18: iconst_3
      19: anewarray     #62                 // class java/lang/String
      22: dup
      23: iconst_0
      24: ldc           #77                 // String TLS_AES_128_GCM_SHA256
      26: aastore
      27: dup
      28: iconst_1
      29: ldc           #78                 // String TLS_AES_256_GCM_SHA384
      31: aastore
      32: dup
      33: iconst_2
      34: ldc           #79                 // String TLS_CHACHA20_POLY1305_SHA256
      36: aastore
      37: putstatic     #16                 // Field SUPPORTED_TLS_1_3_CIPHER_SUITES:[Ljava/lang/String;
      40: new           #80                 // class java/util/HashSet
      43: dup
      44: invokespecial #81                 // Method java/util/HashSet."<init>":()V
      47: putstatic     #69                 // Field SUPPORTED_TLS_1_2_CIPHER_SUITES_SET:Ljava/util/Set;
      50: new           #80                 // class java/util/HashSet
      53: dup
      54: invokespecial #81                 // Method java/util/HashSet."<init>":()V
      57: putstatic     #71                 // Field SUPPORTED_LEGACY_CIPHER_SUITES_SET:Ljava/util/Set;
      60: new           #80                 // class java/util/HashSet
      63: dup
      64: getstatic     #16                 // Field SUPPORTED_TLS_1_3_CIPHER_SUITES:[Ljava/lang/String;
      67: invokestatic  #22                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      70: invokespecial #82                 // Method java/util/HashSet."<init>":(Ljava/util/Collection;)V
      73: putstatic     #83                 // Field SUPPORTED_TLS_1_3_CIPHER_SUITES_SET:Ljava/util/Set;
      76: getstatic     #2                  // Field loadError:Ljava/lang/UnsatisfiedLinkError;
      79: ifnonnull     208
      82: ldc           #84                 // String ALL:!DHE
      84: invokestatic  #85                 // Method get_cipher_names:(Ljava/lang/String;)[Ljava/lang/String;
      87: astore_0
      88: aload_0
      89: arraylength
      90: istore_1
      91: iload_1
      92: iconst_2
      93: irem
      94: ifeq          107
      97: new           #24                 // class java/lang/IllegalArgumentException
     100: dup
     101: ldc           #86                 // String Invalid cipher list returned by get_cipher_names
     103: invokespecial #26                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     106: athrow
     107: iload_1
     108: iconst_2
     109: idiv
     110: iconst_2
     111: iadd
     112: anewarray     #62                 // class java/lang/String
     115: putstatic     #17                 // Field SUPPORTED_TLS_1_2_CIPHER_SUITES:[Ljava/lang/String;
     118: iconst_0
     119: istore_2
     120: iload_2
     121: iload_1
     122: if_icmpge     170
     125: aload_0
     126: iload_2
     127: aaload
     128: invokestatic  #87                 // Method cipherSuiteToJava:(Ljava/lang/String;)Ljava/lang/String;
     131: astore_3
     132: getstatic     #17                 // Field SUPPORTED_TLS_1_2_CIPHER_SUITES:[Ljava/lang/String;
     135: iload_2
     136: iconst_2
     137: idiv
     138: aload_3
     139: aastore
     140: getstatic     #69                 // Field SUPPORTED_TLS_1_2_CIPHER_SUITES_SET:Ljava/util/Set;
     143: aload_3
     144: invokeinterface #88,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
     149: pop
     150: getstatic     #71                 // Field SUPPORTED_LEGACY_CIPHER_SUITES_SET:Ljava/util/Set;
     153: aload_0
     154: iload_2
     155: iconst_1
     156: iadd
     157: aaload
     158: invokeinterface #88,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
     163: pop
     164: iinc          2, 2
     167: goto          120
     170: getstatic     #17                 // Field SUPPORTED_TLS_1_2_CIPHER_SUITES:[Ljava/lang/String;
     173: iload_1
     174: iconst_2
     175: idiv
     176: ldc           #54                 // String TLS_EMPTY_RENEGOTIATION_INFO_SCSV
     178: aastore
     179: getstatic     #17                 // Field SUPPORTED_TLS_1_2_CIPHER_SUITES:[Ljava/lang/String;
     182: iload_1
     183: iconst_2
     184: idiv
     185: iconst_1
     186: iadd
     187: ldc           #55                 // String TLS_FALLBACK_SCSV
     189: aastore
     190: invokestatic  #89                 // Method EVP_has_aes_hardware:()I
     193: iconst_1
     194: if_icmpne     201
     197: iconst_1
     198: goto          202
     201: iconst_0
     202: putstatic     #90                 // Field HAS_AES_HARDWARE:Z
     205: goto          219
     208: iconst_0
     209: putstatic     #90                 // Field HAS_AES_HARDWARE:Z
     212: iconst_0
     213: anewarray     #62                 // class java/lang/String
     216: putstatic     #17                 // Field SUPPORTED_TLS_1_2_CIPHER_SUITES:[Ljava/lang/String;
     219: getstatic     #90                 // Field HAS_AES_HARDWARE:Z
     222: ifeq          311
     225: bipush        14
     227: anewarray     #62                 // class java/lang/String
     230: dup
     231: iconst_0
     232: ldc           #91                 // String TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
     234: aastore
     235: dup
     236: iconst_1
     237: ldc           #92                 // String TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
     239: aastore
     240: dup
     241: iconst_2
     242: ldc           #93                 // String TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
     244: aastore
     245: dup
     246: iconst_3
     247: ldc           #94                 // String TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
     249: aastore
     250: dup
     251: iconst_4
     252: ldc           #95                 // String TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
     254: aastore
     255: dup
     256: iconst_5
     257: ldc           #96                 // String TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
     259: aastore
     260: dup
     261: bipush        6
     263: ldc           #97                 // String TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
     265: aastore
     266: dup
     267: bipush        7
     269: ldc           #98                 // String TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
     271: aastore
     272: dup
     273: bipush        8
     275: ldc           #99                 // String TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
     277: aastore
     278: dup
     279: bipush        9
     281: ldc           #100                // String TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
     283: aastore
     284: dup
     285: bipush        10
     287: ldc           #101                // String TLS_RSA_WITH_AES_128_GCM_SHA256
     289: aastore
     290: dup
     291: bipush        11
     293: ldc           #102                // String TLS_RSA_WITH_AES_256_GCM_SHA384
     295: aastore
     296: dup
     297: bipush        12
     299: ldc           #103                // String TLS_RSA_WITH_AES_128_CBC_SHA
     301: aastore
     302: dup
     303: bipush        13
     305: ldc           #104                // String TLS_RSA_WITH_AES_256_CBC_SHA
     307: aastore
     308: goto          394
     311: bipush        14
     313: anewarray     #62                 // class java/lang/String
     316: dup
     317: iconst_0
     318: ldc           #93                 // String TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
     320: aastore
     321: dup
     322: iconst_1
     323: ldc           #91                 // String TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
     325: aastore
     326: dup
     327: iconst_2
     328: ldc           #92                 // String TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
     330: aastore
     331: dup
     332: iconst_3
     333: ldc           #96                 // String TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
     335: aastore
     336: dup
     337: iconst_4
     338: ldc           #94                 // String TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
     340: aastore
     341: dup
     342: iconst_5
     343: ldc           #95                 // String TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
     345: aastore
     346: dup
     347: bipush        6
     349: ldc           #97                 // String TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
     351: aastore
     352: dup
     353: bipush        7
     355: ldc           #98                 // String TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
     357: aastore
     358: dup
     359: bipush        8
     361: ldc           #99                 // String TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
     363: aastore
     364: dup
     365: bipush        9
     367: ldc           #100                // String TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
     369: aastore
     370: dup
     371: bipush        10
     373: ldc           #101                // String TLS_RSA_WITH_AES_128_GCM_SHA256
     375: aastore
     376: dup
     377: bipush        11
     379: ldc           #102                // String TLS_RSA_WITH_AES_256_GCM_SHA384
     381: aastore
     382: dup
     383: bipush        12
     385: ldc           #103                // String TLS_RSA_WITH_AES_128_CBC_SHA
     387: aastore
     388: dup
     389: bipush        13
     391: ldc           #104                // String TLS_RSA_WITH_AES_256_CBC_SHA
     393: aastore
     394: putstatic     #105                // Field DEFAULT_X509_CIPHER_SUITES:[Ljava/lang/String;
     397: iconst_5
     398: anewarray     #62                 // class java/lang/String
     401: dup
     402: iconst_0
     403: ldc           #106                // String TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256
     405: aastore
     406: dup
     407: iconst_1
     408: ldc           #107                // String TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA
     410: aastore
     411: dup
     412: iconst_2
     413: ldc           #108                // String TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA
     415: aastore
     416: dup
     417: iconst_3
     418: ldc           #109                // String TLS_PSK_WITH_AES_128_CBC_SHA
     420: aastore
     421: dup
     422: iconst_4
     423: ldc           #110                // String TLS_PSK_WITH_AES_256_CBC_SHA
     425: aastore
     426: putstatic     #111                // Field DEFAULT_PSK_CIPHER_SUITES:[Ljava/lang/String;
     429: iconst_4
     430: anewarray     #62                 // class java/lang/String
     433: dup
     434: iconst_0
     435: ldc           #36                 // String TLSv1
     437: aastore
     438: dup
     439: iconst_1
     440: ldc           #38                 // String TLSv1.1
     442: aastore
     443: dup
     444: iconst_2
     445: ldc           #39                 // String TLSv1.2
     447: aastore
     448: dup
     449: iconst_3
     450: ldc           #40                 // String TLSv1.3
     452: aastore
     453: putstatic     #112                // Field TLSV13_PROTOCOLS:[Ljava/lang/String;
     456: iconst_3
     457: anewarray     #62                 // class java/lang/String
     460: dup
     461: iconst_0
     462: ldc           #36                 // String TLSv1
     464: aastore
     465: dup
     466: iconst_1
     467: ldc           #38                 // String TLSv1.1
     469: aastore
     470: dup
     471: iconst_2
     472: ldc           #39                 // String TLSv1.2
     474: aastore
     475: putstatic     #113                // Field TLSV12_PROTOCOLS:[Ljava/lang/String;
     478: getstatic     #113                // Field TLSV12_PROTOCOLS:[Ljava/lang/String;
     481: putstatic     #114                // Field TLSV11_PROTOCOLS:[Ljava/lang/String;
     484: getstatic     #114                // Field TLSV11_PROTOCOLS:[Ljava/lang/String;
     487: putstatic     #115                // Field TLSV1_PROTOCOLS:[Ljava/lang/String;
     490: getstatic     #112                // Field TLSV13_PROTOCOLS:[Ljava/lang/String;
     493: putstatic     #116                // Field DEFAULT_PROTOCOLS:[Ljava/lang/String;
     496: iconst_4
     497: anewarray     #62                 // class java/lang/String
     500: dup
     501: iconst_0
     502: ldc           #36                 // String TLSv1
     504: aastore
     505: dup
     506: iconst_1
     507: ldc           #38                 // String TLSv1.1
     509: aastore
     510: dup
     511: iconst_2
     512: ldc           #39                 // String TLSv1.2
     514: aastore
     515: dup
     516: iconst_3
     517: ldc           #40                 // String TLSv1.3
     519: aastore
     520: putstatic     #20                 // Field SUPPORTED_PROTOCOLS:[Ljava/lang/String;
     523: return
    Exception table:
       from    to  target type
           2     8    11   Class java/lang/UnsatisfiedLinkError
}
