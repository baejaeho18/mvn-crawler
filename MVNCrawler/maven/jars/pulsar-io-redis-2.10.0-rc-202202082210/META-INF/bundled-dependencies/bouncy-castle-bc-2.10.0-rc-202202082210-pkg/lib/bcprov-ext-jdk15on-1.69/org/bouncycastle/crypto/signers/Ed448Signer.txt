public class org.bouncycastle.crypto.signers.Ed448Signer implements org.bouncycastle.crypto.Signer {
  private final org.bouncycastle.crypto.signers.Ed448Signer$Buffer buffer;

  private final byte[] context;

  private boolean forSigning;

  private org.bouncycastle.crypto.params.Ed448PrivateKeyParameters privateKey;

  private org.bouncycastle.crypto.params.Ed448PublicKeyParameters publicKey;

  public org.bouncycastle.crypto.signers.Ed448Signer(byte[]);
    Code:
       0: aload_0
       1: invokespecial #74                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #44                 // class org/bouncycastle/crypto/signers/Ed448Signer$Buffer
       8: dup
       9: aconst_null
      10: invokespecial #81                 // Method org/bouncycastle/crypto/signers/Ed448Signer$Buffer."<init>":(Lorg/bouncycastle/crypto/signers/Ed448Signer$1;)V
      13: putfield      #72                 // Field buffer:Lorg/bouncycastle/crypto/signers/Ed448Signer$Buffer;
      16: aload_0
      17: aload_1
      18: invokestatic  #82                 // Method org/bouncycastle/util/Arrays.clone:([B)[B
      21: putfield      #69                 // Field context:[B
      24: return

  public void init(boolean, org.bouncycastle.crypto.CipherParameters);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #68                 // Field forSigning:Z
       5: iload_1
       6: ifeq          25
       9: aload_0
      10: aload_2
      11: checkcast     #40                 // class org/bouncycastle/crypto/params/Ed448PrivateKeyParameters
      14: putfield      #70                 // Field privateKey:Lorg/bouncycastle/crypto/params/Ed448PrivateKeyParameters;
      17: aload_0
      18: aconst_null
      19: putfield      #71                 // Field publicKey:Lorg/bouncycastle/crypto/params/Ed448PublicKeyParameters;
      22: goto          38
      25: aload_0
      26: aconst_null
      27: putfield      #70                 // Field privateKey:Lorg/bouncycastle/crypto/params/Ed448PrivateKeyParameters;
      30: aload_0
      31: aload_2
      32: checkcast     #41                 // class org/bouncycastle/crypto/params/Ed448PublicKeyParameters
      35: putfield      #71                 // Field publicKey:Lorg/bouncycastle/crypto/params/Ed448PublicKeyParameters;
      38: aload_0
      39: invokevirtual #75                 // Method reset:()V
      42: return

  public void update(byte);
    Code:
       0: aload_0
       1: getfield      #72                 // Field buffer:Lorg/bouncycastle/crypto/signers/Ed448Signer$Buffer;
       4: iload_1
       5: invokevirtual #77                 // Method org/bouncycastle/crypto/signers/Ed448Signer$Buffer.write:(I)V
       8: return

  public void update(byte[], int, int);
    Code:
       0: aload_0
       1: getfield      #72                 // Field buffer:Lorg/bouncycastle/crypto/signers/Ed448Signer$Buffer;
       4: aload_1
       5: iload_2
       6: iload_3
       7: invokevirtual #78                 // Method org/bouncycastle/crypto/signers/Ed448Signer$Buffer.write:([BII)V
      10: return

  public byte[] generateSignature();
    Code:
       0: aload_0
       1: getfield      #68                 // Field forSigning:Z
       4: ifeq          15
       7: aconst_null
       8: aload_0
       9: getfield      #70                 // Field privateKey:Lorg/bouncycastle/crypto/params/Ed448PrivateKeyParameters;
      12: if_acmpne     25
      15: new           #37                 // class java/lang/IllegalStateException
      18: dup
      19: ldc           #1                  // String Ed448Signer not initialised for signature generation.
      21: invokespecial #73                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      24: athrow
      25: aload_0
      26: getfield      #72                 // Field buffer:Lorg/bouncycastle/crypto/signers/Ed448Signer$Buffer;
      29: aload_0
      30: getfield      #70                 // Field privateKey:Lorg/bouncycastle/crypto/params/Ed448PrivateKeyParameters;
      33: aload_0
      34: getfield      #69                 // Field context:[B
      37: invokevirtual #79                 // Method org/bouncycastle/crypto/signers/Ed448Signer$Buffer.generateSignature:(Lorg/bouncycastle/crypto/params/Ed448PrivateKeyParameters;[B)[B
      40: areturn

  public boolean verifySignature(byte[]);
    Code:
       0: aload_0
       1: getfield      #68                 // Field forSigning:Z
       4: ifne          15
       7: aconst_null
       8: aload_0
       9: getfield      #71                 // Field publicKey:Lorg/bouncycastle/crypto/params/Ed448PublicKeyParameters;
      12: if_acmpne     25
      15: new           #37                 // class java/lang/IllegalStateException
      18: dup
      19: ldc           #2                  // String Ed448Signer not initialised for verification
      21: invokespecial #73                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      24: athrow
      25: aload_0
      26: getfield      #72                 // Field buffer:Lorg/bouncycastle/crypto/signers/Ed448Signer$Buffer;
      29: aload_0
      30: getfield      #71                 // Field publicKey:Lorg/bouncycastle/crypto/params/Ed448PublicKeyParameters;
      33: aload_0
      34: getfield      #69                 // Field context:[B
      37: aload_1
      38: invokevirtual #80                 // Method org/bouncycastle/crypto/signers/Ed448Signer$Buffer.verifySignature:(Lorg/bouncycastle/crypto/params/Ed448PublicKeyParameters;[B[B)Z
      41: ireturn

  public void reset();
    Code:
       0: aload_0
       1: getfield      #72                 // Field buffer:Lorg/bouncycastle/crypto/signers/Ed448Signer$Buffer;
       4: invokevirtual #76                 // Method org/bouncycastle/crypto/signers/Ed448Signer$Buffer.reset:()V
       7: return
}
