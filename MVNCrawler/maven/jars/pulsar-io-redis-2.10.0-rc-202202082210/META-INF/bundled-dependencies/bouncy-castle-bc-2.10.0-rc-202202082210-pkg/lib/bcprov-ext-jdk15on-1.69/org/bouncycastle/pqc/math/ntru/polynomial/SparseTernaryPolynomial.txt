public class org.bouncycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial implements org.bouncycastle.pqc.math.ntru.polynomial.TernaryPolynomial {
  private static final int BITS_PER_INDEX;

  private int N;

  private int[] ones;

  private int[] negOnes;

  org.bouncycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial(int, int[], int[]);
    Code:
       0: aload_0
       1: invokespecial #141                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iload_1
       6: putfield      #136                // Field N:I
       9: aload_0
      10: aload_2
      11: putfield      #138                // Field ones:[I
      14: aload_0
      15: aload_3
      16: putfield      #137                // Field negOnes:[I
      19: return

  public org.bouncycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial(org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial);
    Code:
       0: aload_0
       1: aload_1
       2: getfield      #135                // Field org/bouncycastle/pqc/math/ntru/polynomial/IntegerPolynomial.coeffs:[I
       5: invokespecial #154                // Method "<init>":([I)V
       8: return

  public org.bouncycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial(int[]);
    Code:
       0: aload_0
       1: invokespecial #141                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: arraylength
       7: putfield      #136                // Field N:I
      10: aload_0
      11: aload_0
      12: getfield      #136                // Field N:I
      15: newarray       int
      17: putfield      #138                // Field ones:[I
      20: aload_0
      21: aload_0
      22: getfield      #136                // Field N:I
      25: newarray       int
      27: putfield      #137                // Field negOnes:[I
      30: iconst_0
      31: istore_2
      32: iconst_0
      33: istore_3
      34: iconst_0
      35: istore        4
      37: iload         4
      39: aload_0
      40: getfield      #136                // Field N:I
      43: if_icmpge     150
      46: aload_1
      47: iload         4
      49: iaload
      50: istore        5
      52: iload         5
      54: tableswitch   { // -1 to 1
                    -1: 94
                     0: 108
                     1: 80
               default: 111
          }
      80: aload_0
      81: getfield      #138                // Field ones:[I
      84: iload_2
      85: iinc          2, 1
      88: iload         4
      90: iastore
      91: goto          144
      94: aload_0
      95: getfield      #137                // Field negOnes:[I
      98: iload_3
      99: iinc          3, 1
     102: iload         4
     104: iastore
     105: goto          144
     108: goto          144
     111: new           #72                 // class java/lang/IllegalArgumentException
     114: dup
     115: new           #75                 // class java/lang/StringBuilder
     118: dup
     119: invokespecial #143                // Method java/lang/StringBuilder."<init>":()V
     122: ldc           #2                  // String Illegal value:
     124: invokevirtual #146                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     127: iload         5
     129: invokevirtual #145                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     132: ldc           #1                  // String , must be one of {-1, 0, 1}
     134: invokevirtual #146                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     137: invokevirtual #144                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     140: invokespecial #139                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     143: athrow
     144: iinc          4, 1
     147: goto          37
     150: aload_0
     151: aload_0
     152: getfield      #138                // Field ones:[I
     155: iload_2
     156: invokestatic  #162                // Method org/bouncycastle/util/Arrays.copyOf:([II)[I
     159: putfield      #138                // Field ones:[I
     162: aload_0
     163: aload_0
     164: getfield      #137                // Field negOnes:[I
     167: iload_3
     168: invokestatic  #162                // Method org/bouncycastle/util/Arrays.copyOf:([II)[I
     171: putfield      #137                // Field negOnes:[I
     174: return

  public static org.bouncycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial fromBinary(java.io.InputStream, int, int, int) throws java.io.IOException;
    Code:
       0: sipush        2048
       3: istore        4
       5: bipush        32
       7: iload         4
       9: iconst_1
      10: isub
      11: invokestatic  #140                // Method java/lang/Integer.numberOfLeadingZeros:(I)I
      14: isub
      15: istore        5
      17: iload_2
      18: iload         5
      20: imul
      21: bipush        7
      23: iadd
      24: bipush        8
      26: idiv
      27: istore        6
      29: aload_0
      30: iload         6
      32: invokestatic  #158                // Method org/bouncycastle/pqc/math/ntru/util/Util.readFullLength:(Ljava/io/InputStream;I)[B
      35: astore        7
      37: aload         7
      39: iload_2
      40: iload         4
      42: invokestatic  #156                // Method org/bouncycastle/pqc/math/ntru/util/ArrayEncoder.decodeModQ:([BII)[I
      45: astore        8
      47: iload_3
      48: iload         5
      50: imul
      51: bipush        7
      53: iadd
      54: bipush        8
      56: idiv
      57: istore        9
      59: aload_0
      60: iload         9
      62: invokestatic  #158                // Method org/bouncycastle/pqc/math/ntru/util/Util.readFullLength:(Ljava/io/InputStream;I)[B
      65: astore        10
      67: aload         10
      69: iload_3
      70: iload         4
      72: invokestatic  #156                // Method org/bouncycastle/pqc/math/ntru/util/ArrayEncoder.decodeModQ:([BII)[I
      75: astore        11
      77: new           #80                 // class org/bouncycastle/pqc/math/ntru/polynomial/SparseTernaryPolynomial
      80: dup
      81: iload_1
      82: aload         8
      84: aload         11
      86: invokespecial #153                // Method "<init>":(I[I[I)V
      89: areturn

  public static org.bouncycastle.pqc.math.ntru.polynomial.SparseTernaryPolynomial generateRandom(int, int, int, java.security.SecureRandom);
    Code:
       0: iload_0
       1: iload_1
       2: iload_2
       3: aload_3
       4: invokestatic  #159                // Method org/bouncycastle/pqc/math/ntru/util/Util.generateRandomTernary:(IIILjava/security/SecureRandom;)[I
       7: astore        4
       9: new           #80                 // class org/bouncycastle/pqc/math/ntru/polynomial/SparseTernaryPolynomial
      12: dup
      13: aload         4
      15: invokespecial #154                // Method "<init>":([I)V
      18: areturn

  public org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial);
    Code:
       0: aload_1
       1: getfield      #135                // Field org/bouncycastle/pqc/math/ntru/polynomial/IntegerPolynomial.coeffs:[I
       4: astore_2
       5: aload_2
       6: arraylength
       7: aload_0
       8: getfield      #136                // Field N:I
      11: if_icmpeq     24
      14: new           #72                 // class java/lang/IllegalArgumentException
      17: dup
      18: ldc           #3                  // String Number of coefficients must be the same
      20: invokespecial #139                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      23: athrow
      24: aload_0
      25: getfield      #136                // Field N:I
      28: newarray       int
      30: astore_3
      31: iconst_0
      32: istore        4
      34: iload         4
      36: aload_0
      37: getfield      #138                // Field ones:[I
      40: arraylength
      41: if_icmpeq     116
      44: aload_0
      45: getfield      #138                // Field ones:[I
      48: iload         4
      50: iaload
      51: istore        5
      53: aload_0
      54: getfield      #136                // Field N:I
      57: iconst_1
      58: isub
      59: iload         5
      61: isub
      62: istore        6
      64: aload_0
      65: getfield      #136                // Field N:I
      68: iconst_1
      69: isub
      70: istore        7
      72: iload         7
      74: iflt          110
      77: aload_3
      78: iload         7
      80: dup2
      81: iaload
      82: aload_2
      83: iload         6
      85: iaload
      86: iadd
      87: iastore
      88: iinc          6, -1
      91: iload         6
      93: ifge          104
      96: aload_0
      97: getfield      #136                // Field N:I
     100: iconst_1
     101: isub
     102: istore        6
     104: iinc          7, -1
     107: goto          72
     110: iinc          4, 1
     113: goto          34
     116: iconst_0
     117: istore        4
     119: iload         4
     121: aload_0
     122: getfield      #137                // Field negOnes:[I
     125: arraylength
     126: if_icmpeq     201
     129: aload_0
     130: getfield      #137                // Field negOnes:[I
     133: iload         4
     135: iaload
     136: istore        5
     138: aload_0
     139: getfield      #136                // Field N:I
     142: iconst_1
     143: isub
     144: iload         5
     146: isub
     147: istore        6
     149: aload_0
     150: getfield      #136                // Field N:I
     153: iconst_1
     154: isub
     155: istore        7
     157: iload         7
     159: iflt          195
     162: aload_3
     163: iload         7
     165: dup2
     166: iaload
     167: aload_2
     168: iload         6
     170: iaload
     171: isub
     172: iastore
     173: iinc          6, -1
     176: iload         6
     178: ifge          189
     181: aload_0
     182: getfield      #136                // Field N:I
     185: iconst_1
     186: isub
     187: istore        6
     189: iinc          7, -1
     192: goto          157
     195: iinc          4, 1
     198: goto          119
     201: new           #79                 // class org/bouncycastle/pqc/math/ntru/polynomial/IntegerPolynomial
     204: dup
     205: aload_3
     206: invokespecial #152                // Method org/bouncycastle/pqc/math/ntru/polynomial/IntegerPolynomial."<init>":([I)V
     209: areturn

  public org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial mult(org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial, int);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #155                // Method mult:(Lorg/bouncycastle/pqc/math/ntru/polynomial/IntegerPolynomial;)Lorg/bouncycastle/pqc/math/ntru/polynomial/IntegerPolynomial;
       5: astore_3
       6: aload_3
       7: iload_2
       8: invokevirtual #151                // Method org/bouncycastle/pqc/math/ntru/polynomial/IntegerPolynomial.mod:(I)V
      11: aload_3
      12: areturn

  public org.bouncycastle.pqc.math.ntru.polynomial.BigIntPolynomial mult(org.bouncycastle.pqc.math.ntru.polynomial.BigIntPolynomial);
    Code:
       0: aload_1
       1: getfield      #134                // Field org/bouncycastle/pqc/math/ntru/polynomial/BigIntPolynomial.coeffs:[Ljava/math/BigInteger;
       4: astore_2
       5: aload_2
       6: arraylength
       7: aload_0
       8: getfield      #136                // Field N:I
      11: if_icmpeq     24
      14: new           #72                 // class java/lang/IllegalArgumentException
      17: dup
      18: ldc           #3                  // String Number of coefficients must be the same
      20: invokespecial #139                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      23: athrow
      24: aload_0
      25: getfield      #136                // Field N:I
      28: anewarray     #77                 // class java/math/BigInteger
      31: astore_3
      32: iconst_0
      33: istore        4
      35: iload         4
      37: aload_0
      38: getfield      #136                // Field N:I
      41: if_icmpge     57
      44: aload_3
      45: iload         4
      47: getstatic     #133                // Field java/math/BigInteger.ZERO:Ljava/math/BigInteger;
      50: aastore
      51: iinc          4, 1
      54: goto          35
      57: iconst_0
      58: istore        4
      60: iload         4
      62: aload_0
      63: getfield      #138                // Field ones:[I
      66: arraylength
      67: if_icmpeq     146
      70: aload_0
      71: getfield      #138                // Field ones:[I
      74: iload         4
      76: iaload
      77: istore        5
      79: aload_0
      80: getfield      #136                // Field N:I
      83: iconst_1
      84: isub
      85: iload         5
      87: isub
      88: istore        6
      90: aload_0
      91: getfield      #136                // Field N:I
      94: iconst_1
      95: isub
      96: istore        7
      98: iload         7
     100: iflt          140
     103: aload_3
     104: iload         7
     106: aload_3
     107: iload         7
     109: aaload
     110: aload_2
     111: iload         6
     113: aaload
     114: invokevirtual #148                // Method java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
     117: aastore
     118: iinc          6, -1
     121: iload         6
     123: ifge          134
     126: aload_0
     127: getfield      #136                // Field N:I
     130: iconst_1
     131: isub
     132: istore        6
     134: iinc          7, -1
     137: goto          98
     140: iinc          4, 1
     143: goto          60
     146: iconst_0
     147: istore        4
     149: iload         4
     151: aload_0
     152: getfield      #137                // Field negOnes:[I
     155: arraylength
     156: if_icmpeq     235
     159: aload_0
     160: getfield      #137                // Field negOnes:[I
     163: iload         4
     165: iaload
     166: istore        5
     168: aload_0
     169: getfield      #136                // Field N:I
     172: iconst_1
     173: isub
     174: iload         5
     176: isub
     177: istore        6
     179: aload_0
     180: getfield      #136                // Field N:I
     183: iconst_1
     184: isub
     185: istore        7
     187: iload         7
     189: iflt          229
     192: aload_3
     193: iload         7
     195: aload_3
     196: iload         7
     198: aaload
     199: aload_2
     200: iload         6
     202: aaload
     203: invokevirtual #149                // Method java/math/BigInteger.subtract:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
     206: aastore
     207: iinc          6, -1
     210: iload         6
     212: ifge          223
     215: aload_0
     216: getfield      #136                // Field N:I
     219: iconst_1
     220: isub
     221: istore        6
     223: iinc          7, -1
     226: goto          187
     229: iinc          4, 1
     232: goto          149
     235: new           #78                 // class org/bouncycastle/pqc/math/ntru/polynomial/BigIntPolynomial
     238: dup
     239: aload_3
     240: invokespecial #150                // Method org/bouncycastle/pqc/math/ntru/polynomial/BigIntPolynomial."<init>":([Ljava/math/BigInteger;)V
     243: areturn

  public int[] getOnes();
    Code:
       0: aload_0
       1: getfield      #138                // Field ones:[I
       4: areturn

  public int[] getNegOnes();
    Code:
       0: aload_0
       1: getfield      #137                // Field negOnes:[I
       4: areturn

  public byte[] toBinary();
    Code:
       0: sipush        2048
       3: istore_1
       4: aload_0
       5: getfield      #138                // Field ones:[I
       8: iload_1
       9: invokestatic  #157                // Method org/bouncycastle/pqc/math/ntru/util/ArrayEncoder.encodeModQ:([II)[B
      12: astore_2
      13: aload_0
      14: getfield      #137                // Field negOnes:[I
      17: iload_1
      18: invokestatic  #157                // Method org/bouncycastle/pqc/math/ntru/util/ArrayEncoder.encodeModQ:([II)[B
      21: astore_3
      22: aload_2
      23: aload_2
      24: arraylength
      25: aload_3
      26: arraylength
      27: iadd
      28: invokestatic  #160                // Method org/bouncycastle/util/Arrays.copyOf:([BI)[B
      31: astore        4
      33: aload_3
      34: iconst_0
      35: aload         4
      37: aload_2
      38: arraylength
      39: aload_3
      40: arraylength
      41: invokestatic  #147                // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      44: aload         4
      46: areturn

  public org.bouncycastle.pqc.math.ntru.polynomial.IntegerPolynomial toIntegerPolynomial();
    Code:
       0: aload_0
       1: getfield      #136                // Field N:I
       4: newarray       int
       6: astore_1
       7: iconst_0
       8: istore_2
       9: iload_2
      10: aload_0
      11: getfield      #138                // Field ones:[I
      14: arraylength
      15: if_icmpeq     35
      18: aload_0
      19: getfield      #138                // Field ones:[I
      22: iload_2
      23: iaload
      24: istore_3
      25: aload_1
      26: iload_3
      27: iconst_1
      28: iastore
      29: iinc          2, 1
      32: goto          9
      35: iconst_0
      36: istore_2
      37: iload_2
      38: aload_0
      39: getfield      #137                // Field negOnes:[I
      42: arraylength
      43: if_icmpeq     63
      46: aload_0
      47: getfield      #137                // Field negOnes:[I
      50: iload_2
      51: iaload
      52: istore_3
      53: aload_1
      54: iload_3
      55: iconst_m1
      56: iastore
      57: iinc          2, 1
      60: goto          37
      63: new           #79                 // class org/bouncycastle/pqc/math/ntru/polynomial/IntegerPolynomial
      66: dup
      67: aload_1
      68: invokespecial #152                // Method org/bouncycastle/pqc/math/ntru/polynomial/IntegerPolynomial."<init>":([I)V
      71: areturn

  public int size();
    Code:
       0: aload_0
       1: getfield      #136                // Field N:I
       4: ireturn

  public void clear();
    Code:
       0: iconst_0
       1: istore_1
       2: iload_1
       3: aload_0
       4: getfield      #138                // Field ones:[I
       7: arraylength
       8: if_icmpge     24
      11: aload_0
      12: getfield      #138                // Field ones:[I
      15: iload_1
      16: iconst_0
      17: iastore
      18: iinc          1, 1
      21: goto          2
      24: iconst_0
      25: istore_1
      26: iload_1
      27: aload_0
      28: getfield      #137                // Field negOnes:[I
      31: arraylength
      32: if_icmpge     48
      35: aload_0
      36: getfield      #137                // Field negOnes:[I
      39: iload_1
      40: iconst_0
      41: iastore
      42: iinc          1, 1
      45: goto          26
      48: return

  public int hashCode();
    Code:
       0: iconst_1
       1: istore_2
       2: bipush        31
       4: iload_2
       5: imul
       6: aload_0
       7: getfield      #136                // Field N:I
      10: iadd
      11: istore_2
      12: bipush        31
      14: iload_2
      15: imul
      16: aload_0
      17: getfield      #137                // Field negOnes:[I
      20: invokestatic  #161                // Method org/bouncycastle/util/Arrays.hashCode:([I)I
      23: iadd
      24: istore_2
      25: bipush        31
      27: iload_2
      28: imul
      29: aload_0
      30: getfield      #138                // Field ones:[I
      33: invokestatic  #161                // Method org/bouncycastle/util/Arrays.hashCode:([I)I
      36: iadd
      37: istore_2
      38: iload_2
      39: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: ifnonnull     13
      11: iconst_0
      12: ireturn
      13: aload_0
      14: invokevirtual #142                // Method java/lang/Object.getClass:()Ljava/lang/Class;
      17: aload_1
      18: invokevirtual #142                // Method java/lang/Object.getClass:()Ljava/lang/Class;
      21: if_acmpeq     26
      24: iconst_0
      25: ireturn
      26: aload_1
      27: checkcast     #80                 // class org/bouncycastle/pqc/math/ntru/polynomial/SparseTernaryPolynomial
      30: astore_2
      31: aload_0
      32: getfield      #136                // Field N:I
      35: aload_2
      36: getfield      #136                // Field N:I
      39: if_icmpeq     44
      42: iconst_0
      43: ireturn
      44: aload_0
      45: getfield      #137                // Field negOnes:[I
      48: aload_2
      49: getfield      #137                // Field negOnes:[I
      52: invokestatic  #163                // Method org/bouncycastle/util/Arrays.areEqual:([I[I)Z
      55: ifne          60
      58: iconst_0
      59: ireturn
      60: aload_0
      61: getfield      #138                // Field ones:[I
      64: aload_2
      65: getfield      #138                // Field ones:[I
      68: invokestatic  #163                // Method org/bouncycastle/util/Arrays.areEqual:([I[I)Z
      71: ifne          76
      74: iconst_0
      75: ireturn
      76: iconst_1
      77: ireturn
}
