public class org.bouncycastle.crypto.engines.TEAEngine implements org.bouncycastle.crypto.BlockCipher {
  private static final int rounds;

  private static final int block_size;

  private static final int delta;

  private static final int d_sum;

  private int _a;

  private int _b;

  private int _c;

  private int _d;

  private boolean _initialised;

  private boolean _forEncryption;

  public org.bouncycastle.crypto.engines.TEAEngine();
    Code:
       0: aload_0
       1: invokespecial #106                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #102                // Field _initialised:Z
       9: return

  public java.lang.String getAlgorithmName();
    Code:
       0: ldc           #5                  // String TEA
       2: areturn

  public int getBlockSize();
    Code:
       0: bipush        8
       2: ireturn

  public void init(boolean, org.bouncycastle.crypto.CipherParameters);
    Code:
       0: aload_2
       1: instanceof    #72                 // class org/bouncycastle/crypto/params/KeyParameter
       4: ifne          40
       7: new           #64                 // class java/lang/IllegalArgumentException
      10: dup
      11: new           #67                 // class java/lang/StringBuilder
      14: dup
      15: invokespecial #108                // Method java/lang/StringBuilder."<init>":()V
      18: ldc           #7                  // String invalid parameter passed to TEA init -
      20: invokevirtual #110                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      23: aload_2
      24: invokevirtual #107                // Method java/lang/Object.getClass:()Ljava/lang/Class;
      27: invokevirtual #103                // Method java/lang/Class.getName:()Ljava/lang/String;
      30: invokevirtual #110                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: invokevirtual #109                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      36: invokespecial #104                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      39: athrow
      40: aload_0
      41: iload_1
      42: putfield      #101                // Field _forEncryption:Z
      45: aload_0
      46: iconst_1
      47: putfield      #102                // Field _initialised:Z
      50: aload_2
      51: checkcast     #72                 // class org/bouncycastle/crypto/params/KeyParameter
      54: astore_3
      55: aload_0
      56: aload_3
      57: invokevirtual #119                // Method org/bouncycastle/crypto/params/KeyParameter.getKey:()[B
      60: invokespecial #114                // Method setKey:([B)V
      63: return

  public int processBlock(byte[], int, byte[], int);
    Code:
       0: aload_0
       1: getfield      #102                // Field _initialised:Z
       4: ifne          37
       7: new           #65                 // class java/lang/IllegalStateException
      10: dup
      11: new           #67                 // class java/lang/StringBuilder
      14: dup
      15: invokespecial #108                // Method java/lang/StringBuilder."<init>":()V
      18: aload_0
      19: invokevirtual #118                // Method getAlgorithmName:()Ljava/lang/String;
      22: invokevirtual #110                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      25: ldc           #3                  // String  not initialised
      27: invokevirtual #110                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: invokevirtual #109                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      33: invokespecial #105                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      36: athrow
      37: iload_2
      38: bipush        8
      40: iadd
      41: aload_1
      42: arraylength
      43: if_icmple     56
      46: new           #69                 // class org/bouncycastle/crypto/DataLengthException
      49: dup
      50: ldc           #6                  // String input buffer too short
      52: invokespecial #111                // Method org/bouncycastle/crypto/DataLengthException."<init>":(Ljava/lang/String;)V
      55: athrow
      56: iload         4
      58: bipush        8
      60: iadd
      61: aload_3
      62: arraylength
      63: if_icmple     76
      66: new           #70                 // class org/bouncycastle/crypto/OutputLengthException
      69: dup
      70: ldc           #8                  // String output buffer too short
      72: invokespecial #112                // Method org/bouncycastle/crypto/OutputLengthException."<init>":(Ljava/lang/String;)V
      75: athrow
      76: aload_0
      77: getfield      #101                // Field _forEncryption:Z
      80: ifeq          95
      83: aload_0
      84: aload_1
      85: iload_2
      86: aload_3
      87: iload         4
      89: invokespecial #117                // Method encryptBlock:([BI[BI)I
      92: goto          104
      95: aload_0
      96: aload_1
      97: iload_2
      98: aload_3
      99: iload         4
     101: invokespecial #116                // Method decryptBlock:([BI[BI)I
     104: ireturn

  public void reset();
    Code:
       0: return

  private void setKey(byte[]);
    Code:
       0: aload_1
       1: arraylength
       2: bipush        16
       4: if_icmpeq     17
       7: new           #64                 // class java/lang/IllegalArgumentException
      10: dup
      11: ldc           #4                  // String Key size must be 128 bits.
      13: invokespecial #104                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: aload_0
      19: aload_1
      20: iconst_0
      21: invokespecial #115                // Method bytesToInt:([BI)I
      24: putfield      #97                 // Field _a:I
      27: aload_0
      28: aload_0
      29: aload_1
      30: iconst_4
      31: invokespecial #115                // Method bytesToInt:([BI)I
      34: putfield      #98                 // Field _b:I
      37: aload_0
      38: aload_0
      39: aload_1
      40: bipush        8
      42: invokespecial #115                // Method bytesToInt:([BI)I
      45: putfield      #99                 // Field _c:I
      48: aload_0
      49: aload_0
      50: aload_1
      51: bipush        12
      53: invokespecial #115                // Method bytesToInt:([BI)I
      56: putfield      #100                // Field _d:I
      59: return

  private int encryptBlock(byte[], int, byte[], int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokespecial #115                // Method bytesToInt:([BI)I
       6: istore        5
       8: aload_0
       9: aload_1
      10: iload_2
      11: iconst_4
      12: iadd
      13: invokespecial #115                // Method bytesToInt:([BI)I
      16: istore        6
      18: iconst_0
      19: istore        7
      21: iconst_0
      22: istore        8
      24: iload         8
      26: bipush        32
      28: if_icmpeq     104
      31: iload         7
      33: ldc           #2                  // int 1640531527
      35: isub
      36: istore        7
      38: iload         5
      40: iload         6
      42: iconst_4
      43: ishl
      44: aload_0
      45: getfield      #97                 // Field _a:I
      48: iadd
      49: iload         6
      51: iload         7
      53: iadd
      54: ixor
      55: iload         6
      57: iconst_5
      58: iushr
      59: aload_0
      60: getfield      #98                 // Field _b:I
      63: iadd
      64: ixor
      65: iadd
      66: istore        5
      68: iload         6
      70: iload         5
      72: iconst_4
      73: ishl
      74: aload_0
      75: getfield      #99                 // Field _c:I
      78: iadd
      79: iload         5
      81: iload         7
      83: iadd
      84: ixor
      85: iload         5
      87: iconst_5
      88: iushr
      89: aload_0
      90: getfield      #100                // Field _d:I
      93: iadd
      94: ixor
      95: iadd
      96: istore        6
      98: iinc          8, 1
     101: goto          24
     104: aload_0
     105: iload         5
     107: aload_3
     108: iload         4
     110: invokespecial #113                // Method unpackInt:(I[BI)V
     113: aload_0
     114: iload         6
     116: aload_3
     117: iload         4
     119: iconst_4
     120: iadd
     121: invokespecial #113                // Method unpackInt:(I[BI)V
     124: bipush        8
     126: ireturn

  private int decryptBlock(byte[], int, byte[], int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokespecial #115                // Method bytesToInt:([BI)I
       6: istore        5
       8: aload_0
       9: aload_1
      10: iload_2
      11: iconst_4
      12: iadd
      13: invokespecial #115                // Method bytesToInt:([BI)I
      16: istore        6
      18: ldc           #1                  // int -957401312
      20: istore        7
      22: iconst_0
      23: istore        8
      25: iload         8
      27: bipush        32
      29: if_icmpeq     105
      32: iload         6
      34: iload         5
      36: iconst_4
      37: ishl
      38: aload_0
      39: getfield      #99                 // Field _c:I
      42: iadd
      43: iload         5
      45: iload         7
      47: iadd
      48: ixor
      49: iload         5
      51: iconst_5
      52: iushr
      53: aload_0
      54: getfield      #100                // Field _d:I
      57: iadd
      58: ixor
      59: isub
      60: istore        6
      62: iload         5
      64: iload         6
      66: iconst_4
      67: ishl
      68: aload_0
      69: getfield      #97                 // Field _a:I
      72: iadd
      73: iload         6
      75: iload         7
      77: iadd
      78: ixor
      79: iload         6
      81: iconst_5
      82: iushr
      83: aload_0
      84: getfield      #98                 // Field _b:I
      87: iadd
      88: ixor
      89: isub
      90: istore        5
      92: iload         7
      94: ldc           #2                  // int 1640531527
      96: iadd
      97: istore        7
      99: iinc          8, 1
     102: goto          25
     105: aload_0
     106: iload         5
     108: aload_3
     109: iload         4
     111: invokespecial #113                // Method unpackInt:(I[BI)V
     114: aload_0
     115: iload         6
     117: aload_3
     118: iload         4
     120: iconst_4
     121: iadd
     122: invokespecial #113                // Method unpackInt:(I[BI)V
     125: bipush        8
     127: ireturn

  private int bytesToInt(byte[], int);
    Code:
       0: aload_1
       1: iload_2
       2: iinc          2, 1
       5: baload
       6: bipush        24
       8: ishl
       9: aload_1
      10: iload_2
      11: iinc          2, 1
      14: baload
      15: sipush        255
      18: iand
      19: bipush        16
      21: ishl
      22: ior
      23: aload_1
      24: iload_2
      25: iinc          2, 1
      28: baload
      29: sipush        255
      32: iand
      33: bipush        8
      35: ishl
      36: ior
      37: aload_1
      38: iload_2
      39: baload
      40: sipush        255
      43: iand
      44: ior
      45: ireturn

  private void unpackInt(int, byte[], int);
    Code:
       0: aload_2
       1: iload_3
       2: iinc          3, 1
       5: iload_1
       6: bipush        24
       8: iushr
       9: i2b
      10: bastore
      11: aload_2
      12: iload_3
      13: iinc          3, 1
      16: iload_1
      17: bipush        16
      19: iushr
      20: i2b
      21: bastore
      22: aload_2
      23: iload_3
      24: iinc          3, 1
      27: iload_1
      28: bipush        8
      30: iushr
      31: i2b
      32: bastore
      33: aload_2
      34: iload_3
      35: iload_1
      36: i2b
      37: bastore
      38: return
}
