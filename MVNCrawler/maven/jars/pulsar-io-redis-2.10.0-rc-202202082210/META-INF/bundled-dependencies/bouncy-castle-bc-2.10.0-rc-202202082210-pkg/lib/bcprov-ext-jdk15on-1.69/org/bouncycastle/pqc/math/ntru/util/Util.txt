public class org.bouncycastle.pqc.math.ntru.util.Util {
  private static volatile boolean IS_64_BITNESS_KNOWN;

  private static volatile boolean IS_64_BIT_JVM;

  public org.bouncycastle.pqc.math.ntru.util.Util();
    Code:
       0: aload_0
       1: invokespecial #107                // Method java/lang/Object."<init>":()V
       4: return

  public static int invert(int, int);
    Code:
       0: iload_0
       1: iload_1
       2: irem
       3: istore_0
       4: iload_0
       5: ifge          12
       8: iload_0
       9: iload_1
      10: iadd
      11: istore_0
      12: iload_0
      13: iload_1
      14: invokestatic  #112                // Method org/bouncycastle/pqc/math/ntru/euclid/IntEuclidean.calculate:(II)Lorg/bouncycastle/pqc/math/ntru/euclid/IntEuclidean;
      17: getfield      #101                // Field org/bouncycastle/pqc/math/ntru/euclid/IntEuclidean.x:I
      20: ireturn

  public static int pow(int, int, int);
    Code:
       0: iconst_1
       1: istore_3
       2: iconst_0
       3: istore        4
       5: iload         4
       7: iload_1
       8: if_icmpge     23
      11: iload_3
      12: iload_0
      13: imul
      14: iload_2
      15: irem
      16: istore_3
      17: iinc          4, 1
      20: goto          5
      23: iload_3
      24: ireturn

  public static long pow(long, int, long);
    Code:
       0: lconst_1
       1: lstore        5
       3: iconst_0
       4: istore        7
       6: iload         7
       8: iload_2
       9: if_icmpge     26
      12: lload         5
      14: lload_0
      15: lmul
      16: lload_3
      17: lrem
      18: lstore        5
      20: iinc          7, 1
      23: goto          6
      26: lload         5
      28: lreturn

  public static org.bouncycastle.pqc.math.ntru.polynomial.TernaryPolynomial generateRandomTernary(int, int, int, boolean, java.security.SecureRandom);
    Code:
       0: iload_3
       1: ifeq          13
       4: iload_0
       5: iload_1
       6: iload_2
       7: aload         4
       9: invokestatic  #114                // Method org/bouncycastle/pqc/math/ntru/polynomial/SparseTernaryPolynomial.generateRandom:(IIILjava/security/SecureRandom;)Lorg/bouncycastle/pqc/math/ntru/polynomial/SparseTernaryPolynomial;
      12: areturn
      13: iload_0
      14: iload_1
      15: iload_2
      16: aload         4
      18: invokestatic  #113                // Method org/bouncycastle/pqc/math/ntru/polynomial/DenseTernaryPolynomial.generateRandom:(IIILjava/security/SecureRandom;)Lorg/bouncycastle/pqc/math/ntru/polynomial/DenseTernaryPolynomial;
      21: areturn

  public static int[] generateRandomTernary(int, int, int, java.security.SecureRandom);
    Code:
       0: iconst_1
       1: invokestatic  #115                // Method org/bouncycastle/util/Integers.valueOf:(I)Ljava/lang/Integer;
       4: astore        4
       6: iconst_m1
       7: invokestatic  #115                // Method org/bouncycastle/util/Integers.valueOf:(I)Ljava/lang/Integer;
      10: astore        5
      12: iconst_0
      13: invokestatic  #115                // Method org/bouncycastle/util/Integers.valueOf:(I)Ljava/lang/Integer;
      16: astore        6
      18: new           #64                 // class java/util/ArrayList
      21: dup
      22: invokespecial #110                // Method java/util/ArrayList."<init>":()V
      25: astore        7
      27: iconst_0
      28: istore        8
      30: iload         8
      32: iload_1
      33: if_icmpge     52
      36: aload         7
      38: aload         4
      40: invokeinterface #118,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      45: pop
      46: iinc          8, 1
      49: goto          30
      52: iconst_0
      53: istore        8
      55: iload         8
      57: iload_2
      58: if_icmpge     77
      61: aload         7
      63: aload         5
      65: invokeinterface #118,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      70: pop
      71: iinc          8, 1
      74: goto          55
      77: aload         7
      79: invokeinterface #116,  1          // InterfaceMethod java/util/List.size:()I
      84: iload_0
      85: if_icmpge     101
      88: aload         7
      90: aload         6
      92: invokeinterface #118,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      97: pop
      98: goto          77
     101: aload         7
     103: aload_3
     104: invokestatic  #111                // Method java/util/Collections.shuffle:(Ljava/util/List;Ljava/util/Random;)V
     107: iload_0
     108: newarray       int
     110: astore        8
     112: iconst_0
     113: istore        9
     115: iload         9
     117: iload_0
     118: if_icmpge     147
     121: aload         8
     123: iload         9
     125: aload         7
     127: iload         9
     129: invokeinterface #117,  2          // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
     134: checkcast     #60                 // class java/lang/Integer
     137: invokevirtual #106                // Method java/lang/Integer.intValue:()I
     140: iastore
     141: iinc          9, 1
     144: goto          115
     147: aload         8
     149: areturn

  public static boolean is64BitJVM();
    Code:
       0: getstatic     #102                // Field IS_64_BITNESS_KNOWN:Z
       3: ifne          66
       6: ldc           #4                  // String os.arch
       8: invokestatic  #109                // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
      11: astore_0
      12: ldc           #6                  // String sun.arch.data.model
      14: invokestatic  #109                // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
      17: astore_1
      18: ldc           #3                  // String amd64
      20: aload_0
      21: invokevirtual #108                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      24: ifne          54
      27: ldc           #7                  // String x86_64
      29: aload_0
      30: invokevirtual #108                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      33: ifne          54
      36: ldc           #5                  // String ppc64
      38: aload_0
      39: invokevirtual #108                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      42: ifne          54
      45: ldc           #1                  // String 64
      47: aload_1
      48: invokevirtual #108                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      51: ifeq          58
      54: iconst_1
      55: goto          59
      58: iconst_0
      59: putstatic     #103                // Field IS_64_BIT_JVM:Z
      62: iconst_1
      63: putstatic     #102                // Field IS_64_BITNESS_KNOWN:Z
      66: getstatic     #103                // Field IS_64_BIT_JVM:Z
      69: ireturn

  public static byte[] readFullLength(java.io.InputStream, int) throws java.io.IOException;
    Code:
       0: iload_1
       1: newarray       byte
       3: astore_2
       4: aload_0
       5: aload_2
       6: invokevirtual #105                // Method java/io/InputStream.read:([B)I
       9: aload_2
      10: arraylength
      11: if_icmpeq     24
      14: new           #58                 // class java/io/IOException
      17: dup
      18: ldc           #2                  // String Not enough bytes to read.
      20: invokespecial #104                // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      23: athrow
      24: aload_2
      25: areturn
}
