Compiled from "SegmentPool.kt"
public final class okio.SegmentPool {
  private static final int MAX_SIZE;

  private static final okio.Segment LOCK;

  private static final int HASH_BUCKET_COUNT;

  private static final java.util.concurrent.atomic.AtomicReference<okio.Segment>[] hashBuckets;

  public static final okio.SegmentPool INSTANCE;

  public final int getMAX_SIZE();
    Code:
       0: getstatic     #10                 // Field MAX_SIZE:I
       3: ireturn

  public final int getByteCount();
    Code:
       0: aload_0
       1: invokespecial #23                 // Method firstRef:()Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #29                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #31                 // class okio/Segment
      10: dup
      11: ifnull        17
      14: goto          20
      17: pop
      18: iconst_0
      19: ireturn
      20: astore_1
      21: aload_1
      22: getfield      #34                 // Field okio/Segment.limit:I
      25: ireturn

  public static final okio.Segment take();
    Code:
       0: getstatic     #42                 // Field INSTANCE:Lokio/SegmentPool;
       3: invokespecial #23                 // Method firstRef:()Ljava/util/concurrent/atomic/AtomicReference;
       6: astore_0
       7: aload_0
       8: getstatic     #44                 // Field LOCK:Lokio/Segment;
      11: invokevirtual #48                 // Method java/util/concurrent/atomic/AtomicReference.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;
      14: checkcast     #31                 // class okio/Segment
      17: astore_1
      18: nop
      19: aload_1
      20: getstatic     #44                 // Field LOCK:Lokio/Segment;
      23: if_acmpne     34
      26: new           #31                 // class okio/Segment
      29: dup
      30: invokespecial #52                 // Method okio/Segment."<init>":()V
      33: areturn
      34: aload_1
      35: ifnonnull     51
      38: aload_0
      39: aconst_null
      40: invokevirtual #56                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      43: new           #31                 // class okio/Segment
      46: dup
      47: invokespecial #52                 // Method okio/Segment."<init>":()V
      50: areturn
      51: aload_0
      52: aload_1
      53: getfield      #59                 // Field okio/Segment.next:Lokio/Segment;
      56: invokevirtual #56                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      59: aload_1
      60: aconst_null
      61: checkcast     #31                 // class okio/Segment
      64: putfield      #59                 // Field okio/Segment.next:Lokio/Segment;
      67: aload_1
      68: iconst_0
      69: putfield      #34                 // Field okio/Segment.limit:I
      72: aload_1
      73: areturn

  public static final void recycle(okio.Segment);
    Code:
       0: aload_0
       1: ldc           #64                 // String segment
       3: invokestatic  #70                 // Method kotlin/jvm/internal/Intrinsics.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: getfield      #59                 // Field okio/Segment.next:Lokio/Segment;
      10: ifnonnull     24
      13: aload_0
      14: getfield      #73                 // Field okio/Segment.prev:Lokio/Segment;
      17: ifnonnull     24
      20: iconst_1
      21: goto          25
      24: iconst_0
      25: istore_1
      26: iconst_0
      27: istore_2
      28: iconst_0
      29: istore_3
      30: iconst_0
      31: istore_3
      32: iconst_0
      33: istore        4
      35: iload_1
      36: ifne          62
      39: iconst_0
      40: istore        5
      42: ldc           #75                 // String Failed requirement.
      44: astore        4
      46: new           #77                 // class java/lang/IllegalArgumentException
      49: dup
      50: aload         4
      52: invokevirtual #81                 // Method java/lang/Object.toString:()Ljava/lang/String;
      55: invokespecial #84                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      58: checkcast     #86                 // class java/lang/Throwable
      61: athrow
      62: aload_0
      63: getfield      #90                 // Field okio/Segment.shared:Z
      66: ifeq          70
      69: return
      70: getstatic     #42                 // Field INSTANCE:Lokio/SegmentPool;
      73: invokespecial #23                 // Method firstRef:()Ljava/util/concurrent/atomic/AtomicReference;
      76: astore_1
      77: aload_1
      78: invokevirtual #29                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      81: checkcast     #31                 // class okio/Segment
      84: astore_2
      85: aload_2
      86: getstatic     #44                 // Field LOCK:Lokio/Segment;
      89: if_acmpne     93
      92: return
      93: aload_2
      94: dup
      95: ifnull        104
      98: getfield      #34                 // Field okio/Segment.limit:I
     101: goto          106
     104: pop
     105: iconst_0
     106: istore_3
     107: iload_3
     108: getstatic     #10                 // Field MAX_SIZE:I
     111: if_icmplt     115
     114: return
     115: aload_0
     116: aload_2
     117: putfield      #59                 // Field okio/Segment.next:Lokio/Segment;
     120: aload_0
     121: iconst_0
     122: putfield      #93                 // Field okio/Segment.pos:I
     125: aload_0
     126: iload_3
     127: sipush        8192
     130: iadd
     131: putfield      #34                 // Field okio/Segment.limit:I
     134: aload_1
     135: aload_2
     136: aload_0
     137: invokevirtual #97                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
     140: ifne          151
     143: aload_0
     144: aconst_null
     145: checkcast     #31                 // class okio/Segment
     148: putfield      #59                 // Field okio/Segment.next:Lokio/Segment;
     151: return

  private final java.util.concurrent.atomic.AtomicReference<okio.Segment> firstRef();
    Code:
       0: invokestatic  #105                // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       3: dup
       4: ldc           #107                // String Thread.currentThread()
       6: invokestatic  #110                // Method kotlin/jvm/internal/Intrinsics.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V
       9: invokevirtual #114                // Method java/lang/Thread.getId:()J
      12: getstatic     #116                // Field HASH_BUCKET_COUNT:I
      15: i2l
      16: lconst_1
      17: lsub
      18: land
      19: l2i
      20: istore_1
      21: getstatic     #118                // Field hashBuckets:[Ljava/util/concurrent/atomic/AtomicReference;
      24: iload_1
      25: aaload
      26: areturn

  private okio.SegmentPool();
    Code:
       0: aload_0
       1: invokespecial #120                // Method java/lang/Object."<init>":()V
       4: return

  static {};
    Code:
       0: new           #2                  // class okio/SegmentPool
       3: dup
       4: invokespecial #136                // Method "<init>":()V
       7: astore_0
       8: aload_0
       9: putstatic     #42                 // Field INSTANCE:Lokio/SegmentPool;
      12: ldc           #137                // int 65536
      14: putstatic     #10                 // Field MAX_SIZE:I
      17: new           #31                 // class okio/Segment
      20: dup
      21: iconst_0
      22: newarray       byte
      24: iconst_0
      25: iconst_0
      26: iconst_0
      27: iconst_0
      28: invokespecial #140                // Method okio/Segment."<init>":([BIIZZ)V
      31: putstatic     #44                 // Field LOCK:Lokio/Segment;
      34: invokestatic  #146                // Method java/lang/Runtime.getRuntime:()Ljava/lang/Runtime;
      37: invokevirtual #149                // Method java/lang/Runtime.availableProcessors:()I
      40: iconst_2
      41: imul
      42: iconst_1
      43: isub
      44: invokestatic  #155                // Method java/lang/Integer.highestOneBit:(I)I
      47: putstatic     #116                // Field HASH_BUCKET_COUNT:I
      50: getstatic     #116                // Field HASH_BUCKET_COUNT:I
      53: istore_1
      54: iload_1
      55: anewarray     #25                 // class java/util/concurrent/atomic/AtomicReference
      58: astore_2
      59: iconst_0
      60: istore_3
      61: iload_3
      62: iload_1
      63: if_icmpge     100
      66: aload_2
      67: iload_3
      68: iload_3
      69: istore        4
      71: istore        7
      73: astore        6
      75: iconst_0
      76: istore        5
      78: new           #25                 // class java/util/concurrent/atomic/AtomicReference
      81: dup
      82: invokespecial #156                // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
      85: astore        8
      87: aload         6
      89: iload         7
      91: aload         8
      93: aastore
      94: iinc          3, 1
      97: goto          61
     100: aload_2
     101: putstatic     #118                // Field hashBuckets:[Ljava/util/concurrent/atomic/AtomicReference;
     104: return
}
