Compiled from "Pipe.kt"
public final class okio.Pipe {
  private final okio.Buffer buffer;

  private boolean canceled;

  private boolean sinkClosed;

  private boolean sourceClosed;

  private okio.Sink foldedSink;

  private final okio.Sink sink;

  private final okio.Source source;

  private final long maxBufferSize;

  public final okio.Buffer getBuffer$okio();
    Code:
       0: aload_0
       1: getfield      #11                 // Field buffer:Lokio/Buffer;
       4: areturn

  public final boolean getCanceled$okio();
    Code:
       0: aload_0
       1: getfield      #19                 // Field canceled:Z
       4: ireturn

  public final void setCanceled$okio(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #19                 // Field canceled:Z
       5: return

  public final boolean getSinkClosed$okio();
    Code:
       0: aload_0
       1: getfield      #26                 // Field sinkClosed:Z
       4: ireturn

  public final void setSinkClosed$okio(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #26                 // Field sinkClosed:Z
       5: return

  public final boolean getSourceClosed$okio();
    Code:
       0: aload_0
       1: getfield      #31                 // Field sourceClosed:Z
       4: ireturn

  public final void setSourceClosed$okio(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #31                 // Field sourceClosed:Z
       5: return

  public final okio.Sink getFoldedSink$okio();
    Code:
       0: aload_0
       1: getfield      #39                 // Field foldedSink:Lokio/Sink;
       4: areturn

  public final void setFoldedSink$okio(okio.Sink);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #39                 // Field foldedSink:Lokio/Sink;
       5: return

  public final okio.Sink sink();
    Code:
       0: aload_0
       1: getfield      #46                 // Field sink:Lokio/Sink;
       4: areturn

  public final okio.Source source();
    Code:
       0: aload_0
       1: getfield      #51                 // Field source:Lokio/Source;
       4: areturn

  public final void fold(okio.Sink) throws java.io.IOException;
    Code:
       0: aload_1
       1: ldc           #55                 // String sink
       3: invokestatic  #61                 // Method kotlin/jvm/internal/Intrinsics.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V
       6: nop
       7: iconst_0
       8: istore_2
       9: aconst_null
      10: astore_3
      11: aload_0
      12: getfield      #11                 // Field buffer:Lokio/Buffer;
      15: astore        4
      17: iconst_0
      18: istore        5
      20: iconst_0
      21: istore        6
      23: iconst_0
      24: istore        7
      26: aload         4
      28: monitorenter
      29: nop
      30: iconst_0
      31: istore        8
      33: aload_0
      34: getfield      #39                 // Field foldedSink:Lokio/Sink;
      37: ifnonnull     44
      40: iconst_1
      41: goto          45
      44: iconst_0
      45: istore        9
      47: iconst_0
      48: istore        10
      50: iconst_0
      51: istore        11
      53: iload         9
      55: ifne          81
      58: iconst_0
      59: istore        12
      61: ldc           #63                 // String sink already folded
      63: astore        11
      65: new           #65                 // class java/lang/IllegalStateException
      68: dup
      69: aload         11
      71: invokevirtual #69                 // Method java/lang/Object.toString:()Ljava/lang/String;
      74: invokespecial #73                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      77: checkcast     #75                 // class java/lang/Throwable
      80: athrow
      81: aload_0
      82: getfield      #19                 // Field canceled:Z
      85: ifeq          106
      88: aload_0
      89: aload_1
      90: putfield      #39                 // Field foldedSink:Lokio/Sink;
      93: new           #54                 // class java/io/IOException
      96: dup
      97: ldc           #76                 // String canceled
      99: invokespecial #77                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     102: checkcast     #75                 // class java/lang/Throwable
     105: athrow
     106: aload_0
     107: getfield      #11                 // Field buffer:Lokio/Buffer;
     110: invokevirtual #82                 // Method okio/Buffer.exhausted:()Z
     113: ifeq          130
     116: aload_0
     117: iconst_1
     118: putfield      #31                 // Field sourceClosed:Z
     121: aload_0
     122: aload_1
     123: putfield      #39                 // Field foldedSink:Lokio/Sink;
     126: aload         4
     128: monitorexit
     129: return
     130: aload_0
     131: getfield      #26                 // Field sinkClosed:Z
     134: istore_2
     135: new           #79                 // class okio/Buffer
     138: dup
     139: invokespecial #85                 // Method okio/Buffer."<init>":()V
     142: astore_3
     143: aload_3
     144: aload_0
     145: getfield      #11                 // Field buffer:Lokio/Buffer;
     148: aload_0
     149: getfield      #11                 // Field buffer:Lokio/Buffer;
     152: invokevirtual #89                 // Method okio/Buffer.size:()J
     155: invokevirtual #93                 // Method okio/Buffer.write:(Lokio/Buffer;J)V
     158: aload_0
     159: getfield      #11                 // Field buffer:Lokio/Buffer;
     162: dup
     163: ifnonnull     176
     166: new           #95                 // class java/lang/NullPointerException
     169: dup
     170: ldc           #97                 // String null cannot be cast to non-null type java.lang.Object
     172: invokespecial #98                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
     175: athrow
     176: checkcast     #4                  // class java/lang/Object
     179: invokevirtual #101                // Method java/lang/Object.notifyAll:()V
     182: getstatic     #107                // Field kotlin/Unit.INSTANCE:Lkotlin/Unit;
     185: astore        7
     187: aload         4
     189: monitorexit
     190: goto          201
     193: astore        7
     195: aload         4
     197: monitorexit
     198: aload         7
     200: athrow
     201: nop
     202: iconst_0
     203: istore        4
     205: nop
     206: aload_1
     207: aload_3
     208: aload_3
     209: invokevirtual #89                 // Method okio/Buffer.size:()J
     212: invokeinterface #110,  4          // InterfaceMethod okio/Sink.write:(Lokio/Buffer;J)V
     217: iload_2
     218: ifeq          230
     221: aload_1
     222: invokeinterface #113,  1          // InterfaceMethod okio/Sink.close:()V
     227: goto          236
     230: aload_1
     231: invokeinterface #116,  1          // InterfaceMethod okio/Sink.flush:()V
     236: iconst_1
     237: istore        4
     239: nop
     240: goto          319
     243: astore        5
     245: nop
     246: aload_0
     247: getfield      #11                 // Field buffer:Lokio/Buffer;
     250: astore        6
     252: iconst_0
     253: istore        7
     255: iconst_0
     256: istore        8
     258: iconst_0
     259: istore        9
     261: aload         6
     263: monitorenter
     264: nop
     265: iconst_0
     266: istore        10
     268: aload_0
     269: iconst_1
     270: putfield      #31                 // Field sourceClosed:Z
     273: aload_0
     274: getfield      #11                 // Field buffer:Lokio/Buffer;
     277: dup
     278: ifnonnull     291
     281: new           #95                 // class java/lang/NullPointerException
     284: dup
     285: ldc           #97                 // String null cannot be cast to non-null type java.lang.Object
     287: invokespecial #98                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
     290: athrow
     291: checkcast     #4                  // class java/lang/Object
     294: invokevirtual #101                // Method java/lang/Object.notifyAll:()V
     297: getstatic     #107                // Field kotlin/Unit.INSTANCE:Lkotlin/Unit;
     300: astore        9
     302: aload         6
     304: monitorexit
     305: goto          316
     308: astore        9
     310: aload         6
     312: monitorexit
     313: aload         9
     315: athrow
     316: aload         5
     318: athrow
     319: goto          6
    Exception table:
       from    to  target type
          29   126   193   any
         130   187   193   any
         193   195   193   any
         264   302   308   any
         308   310   308   any
         205   239   243   any
         243   245   243   any

  private final void forward(okio.Sink, kotlin.jvm.functions.Function1<? super okio.Sink, kotlin.Unit>);
    Code:
       0: ldc           #130                // int 0
       2: istore_3
       3: aload_1
       4: invokeinterface #134,  1          // InterfaceMethod okio/Sink.timeout:()Lokio/Timeout;
       9: astore        4
      11: aload_0
      12: invokevirtual #136                // Method sink:()Lokio/Sink;
      15: invokeinterface #134,  1          // InterfaceMethod okio/Sink.timeout:()Lokio/Timeout;
      20: astore        5
      22: iconst_0
      23: istore        6
      25: aload         4
      27: invokevirtual #141                // Method okio/Timeout.timeoutNanos:()J
      30: lstore        7
      32: aload         4
      34: getstatic     #145                // Field okio/Timeout.Companion:Lokio/Timeout$Companion;
      37: aload         5
      39: invokevirtual #141                // Method okio/Timeout.timeoutNanos:()J
      42: aload         4
      44: invokevirtual #141                // Method okio/Timeout.timeoutNanos:()J
      47: invokevirtual #151                // Method okio/Timeout$Companion.minTimeout:(JJ)J
      50: getstatic     #157                // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      53: invokevirtual #160                // Method okio/Timeout.timeout:(JLjava/util/concurrent/TimeUnit;)Lokio/Timeout;
      56: pop
      57: aload         4
      59: invokevirtual #163                // Method okio/Timeout.hasDeadline:()Z
      62: ifeq          189
      65: aload         4
      67: invokevirtual #166                // Method okio/Timeout.deadlineNanoTime:()J
      70: lstore        9
      72: aload         5
      74: invokevirtual #163                // Method okio/Timeout.hasDeadline:()Z
      77: ifeq          99
      80: aload         4
      82: aload         4
      84: invokevirtual #166                // Method okio/Timeout.deadlineNanoTime:()J
      87: aload         5
      89: invokevirtual #166                // Method okio/Timeout.deadlineNanoTime:()J
      92: invokestatic  #171                // Method java/lang/Math.min:(JJ)J
      95: invokevirtual #174                // Method okio/Timeout.deadlineNanoTime:(J)Lokio/Timeout;
      98: pop
      99: nop
     100: iconst_0
     101: istore        11
     103: aload_2
     104: aload_1
     105: invokeinterface #180,  2          // InterfaceMethod kotlin/jvm/functions/Function1.invoke:(Ljava/lang/Object;)Ljava/lang/Object;
     110: pop
     111: iconst_1
     112: invokestatic  #186                // Method kotlin/jvm/internal/InlineMarker.finallyStart:(I)V
     115: aload         4
     117: lload         7
     119: getstatic     #157                // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
     122: invokevirtual #160                // Method okio/Timeout.timeout:(JLjava/util/concurrent/TimeUnit;)Lokio/Timeout;
     125: pop
     126: aload         5
     128: invokevirtual #163                // Method okio/Timeout.hasDeadline:()Z
     131: ifeq          142
     134: aload         4
     136: lload         9
     138: invokevirtual #174                // Method okio/Timeout.deadlineNanoTime:(J)Lokio/Timeout;
     141: pop
     142: iconst_1
     143: invokestatic  #189                // Method kotlin/jvm/internal/InlineMarker.finallyEnd:(I)V
     146: goto          294
     149: astore        11
     151: iconst_1
     152: invokestatic  #186                // Method kotlin/jvm/internal/InlineMarker.finallyStart:(I)V
     155: aload         4
     157: lload         7
     159: getstatic     #157                // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
     162: invokevirtual #160                // Method okio/Timeout.timeout:(JLjava/util/concurrent/TimeUnit;)Lokio/Timeout;
     165: pop
     166: aload         5
     168: invokevirtual #163                // Method okio/Timeout.hasDeadline:()Z
     171: ifeq          182
     174: aload         4
     176: lload         9
     178: invokevirtual #174                // Method okio/Timeout.deadlineNanoTime:(J)Lokio/Timeout;
     181: pop
     182: iconst_1
     183: invokestatic  #189                // Method kotlin/jvm/internal/InlineMarker.finallyEnd:(I)V
     186: aload         11
     188: athrow
     189: aload         5
     191: invokevirtual #163                // Method okio/Timeout.hasDeadline:()Z
     194: ifeq          208
     197: aload         4
     199: aload         5
     201: invokevirtual #166                // Method okio/Timeout.deadlineNanoTime:()J
     204: invokevirtual #174                // Method okio/Timeout.deadlineNanoTime:(J)Lokio/Timeout;
     207: pop
     208: nop
     209: iconst_0
     210: istore        12
     212: aload_2
     213: aload_1
     214: invokeinterface #180,  2          // InterfaceMethod kotlin/jvm/functions/Function1.invoke:(Ljava/lang/Object;)Ljava/lang/Object;
     219: pop
     220: iconst_1
     221: invokestatic  #186                // Method kotlin/jvm/internal/InlineMarker.finallyStart:(I)V
     224: aload         4
     226: lload         7
     228: getstatic     #157                // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
     231: invokevirtual #160                // Method okio/Timeout.timeout:(JLjava/util/concurrent/TimeUnit;)Lokio/Timeout;
     234: pop
     235: aload         5
     237: invokevirtual #163                // Method okio/Timeout.hasDeadline:()Z
     240: ifeq          249
     243: aload         4
     245: invokevirtual #192                // Method okio/Timeout.clearDeadline:()Lokio/Timeout;
     248: pop
     249: iconst_1
     250: invokestatic  #189                // Method kotlin/jvm/internal/InlineMarker.finallyEnd:(I)V
     253: goto          294
     256: astore        13
     258: iconst_1
     259: invokestatic  #186                // Method kotlin/jvm/internal/InlineMarker.finallyStart:(I)V
     262: aload         4
     264: lload         7
     266: getstatic     #157                // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
     269: invokevirtual #160                // Method okio/Timeout.timeout:(JLjava/util/concurrent/TimeUnit;)Lokio/Timeout;
     272: pop
     273: aload         5
     275: invokevirtual #163                // Method okio/Timeout.hasDeadline:()Z
     278: ifeq          287
     281: aload         4
     283: invokevirtual #192                // Method okio/Timeout.clearDeadline:()Lokio/Timeout;
     286: pop
     287: iconst_1
     288: invokestatic  #189                // Method kotlin/jvm/internal/InlineMarker.finallyEnd:(I)V
     291: aload         13
     293: athrow
     294: nop
     295: return
    Exception table:
       from    to  target type
          99   111   149   any
         149   151   149   any
         208   220   256   any
         256   258   256   any

  public final okio.Sink -deprecated_sink();
    Code:
       0: aload_0
       1: getfield      #46                 // Field sink:Lokio/Sink;
       4: areturn

  public final okio.Source -deprecated_source();
    Code:
       0: aload_0
       1: getfield      #51                 // Field source:Lokio/Source;
       4: areturn

  public final void cancel();
    Code:
       0: aload_0
       1: getfield      #11                 // Field buffer:Lokio/Buffer;
       4: astore_1
       5: iconst_0
       6: istore_2
       7: iconst_0
       8: istore_3
       9: iconst_0
      10: istore        4
      12: aload_1
      13: monitorenter
      14: nop
      15: iconst_0
      16: istore        5
      18: aload_0
      19: iconst_1
      20: putfield      #19                 // Field canceled:Z
      23: aload_0
      24: getfield      #11                 // Field buffer:Lokio/Buffer;
      27: invokevirtual #220                // Method okio/Buffer.clear:()V
      30: aload_0
      31: getfield      #11                 // Field buffer:Lokio/Buffer;
      34: dup
      35: ifnonnull     48
      38: new           #95                 // class java/lang/NullPointerException
      41: dup
      42: ldc           #97                 // String null cannot be cast to non-null type java.lang.Object
      44: invokespecial #98                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      47: athrow
      48: checkcast     #4                  // class java/lang/Object
      51: invokevirtual #101                // Method java/lang/Object.notifyAll:()V
      54: getstatic     #107                // Field kotlin/Unit.INSTANCE:Lkotlin/Unit;
      57: astore        4
      59: aload_1
      60: monitorexit
      61: goto          71
      64: astore        4
      66: aload_1
      67: monitorexit
      68: aload         4
      70: athrow
      71: nop
      72: return
    Exception table:
       from    to  target type
          14    59    64   any
          64    66    64   any

  public final long getMaxBufferSize$okio();
    Code:
       0: aload_0
       1: getfield      #225                // Field maxBufferSize:J
       4: lreturn

  public okio.Pipe(long);
    Code:
       0: aload_0
       1: invokespecial #227                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: lload_1
       6: putfield      #225                // Field maxBufferSize:J
       9: aload_0
      10: new           #79                 // class okio/Buffer
      13: dup
      14: invokespecial #85                 // Method okio/Buffer."<init>":()V
      17: putfield      #11                 // Field buffer:Lokio/Buffer;
      20: nop
      21: aload_0
      22: getfield      #225                // Field maxBufferSize:J
      25: lconst_1
      26: lcmp
      27: iflt          34
      30: iconst_1
      31: goto          35
      34: iconst_0
      35: istore_3
      36: iconst_0
      37: istore        4
      39: iconst_0
      40: istore        5
      42: iload_3
      43: ifne          89
      46: iconst_0
      47: istore        6
      49: new           #229                // class java/lang/StringBuilder
      52: dup
      53: invokespecial #230                // Method java/lang/StringBuilder."<init>":()V
      56: ldc           #232                // String maxBufferSize < 1:
      58: invokevirtual #236                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      61: aload_0
      62: getfield      #225                // Field maxBufferSize:J
      65: invokevirtual #239                // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      68: invokevirtual #240                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      71: astore        5
      73: new           #242                // class java/lang/IllegalArgumentException
      76: dup
      77: aload         5
      79: invokevirtual #69                 // Method java/lang/Object.toString:()Ljava/lang/String;
      82: invokespecial #243                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      85: checkcast     #75                 // class java/lang/Throwable
      88: athrow
      89: nop
      90: aload_0
      91: new           #245                // class okio/Pipe$sink$1
      94: dup
      95: aload_0
      96: invokespecial #248                // Method okio/Pipe$sink$1."<init>":(Lokio/Pipe;)V
      99: checkcast     #109                // class okio/Sink
     102: putfield      #46                 // Field sink:Lokio/Sink;
     105: aload_0
     106: new           #250                // class okio/Pipe$source$1
     109: dup
     110: aload_0
     111: invokespecial #251                // Method okio/Pipe$source$1."<init>":(Lokio/Pipe;)V
     114: checkcast     #253                // class okio/Source
     117: putfield      #51                 // Field source:Lokio/Source;
     120: return

  public static final void access$forward(okio.Pipe, okio.Sink, kotlin.jvm.functions.Function1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #258                // Method forward:(Lokio/Sink;Lkotlin/jvm/functions/Function1;)V
       6: return
}
