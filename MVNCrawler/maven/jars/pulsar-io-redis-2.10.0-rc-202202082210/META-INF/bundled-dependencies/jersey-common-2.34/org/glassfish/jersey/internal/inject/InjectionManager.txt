Compiled from "InjectionManager.java"
public interface org.glassfish.jersey.internal.inject.InjectionManager {
  public abstract void completeRegistration();

  public abstract void shutdown();

  public abstract void register(org.glassfish.jersey.internal.inject.Binding);

  public abstract void register(java.lang.Iterable<org.glassfish.jersey.internal.inject.Binding>);

  public abstract void register(org.glassfish.jersey.internal.inject.Binder);

  public abstract void register(java.lang.Object) throws java.lang.IllegalArgumentException;

  public abstract boolean isRegistrable(java.lang.Class<?>);

  public abstract <T> T createAndInitialize(java.lang.Class<T>);

  public abstract <T> java.util.List<org.glassfish.jersey.internal.inject.ServiceHolder<T>> getAllServiceHolders(java.lang.Class<T>, java.lang.annotation.Annotation...);

  public abstract <T> T getInstance(java.lang.Class<T>, java.lang.annotation.Annotation...);

  public abstract <T> T getInstance(java.lang.Class<T>, java.lang.String);

  public abstract <T> T getInstance(java.lang.Class<T>);

  public abstract <T> T getInstance(java.lang.reflect.Type);

  public abstract java.lang.Object getInstance(org.glassfish.jersey.internal.inject.ForeignDescriptor);

  public abstract org.glassfish.jersey.internal.inject.ForeignDescriptor createForeignDescriptor(org.glassfish.jersey.internal.inject.Binding);

  public abstract <T> java.util.List<T> getAllInstances(java.lang.reflect.Type);

  public abstract void inject(java.lang.Object);

  public abstract void inject(java.lang.Object, java.lang.String);

  public abstract void preDestroy(java.lang.Object);
}
