Compiled from "RenderedImageProvider.java"
public final class org.glassfish.jersey.message.internal.RenderedImageProvider extends org.glassfish.jersey.message.internal.AbstractMessageReaderWriterProvider<java.awt.image.RenderedImage> {
  private static final javax.ws.rs.core.MediaType IMAGE_MEDIA_TYPE;

  public org.glassfish.jersey.message.internal.RenderedImageProvider();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/glassfish/jersey/message/internal/AbstractMessageReaderWriterProvider."<init>":()V
       4: return

  public boolean isReadable(java.lang.Class<?>, java.lang.reflect.Type, java.lang.annotation.Annotation[], javax.ws.rs.core.MediaType);
    Code:
       0: ldc           #2                  // class java/awt/image/RenderedImage
       2: aload_1
       3: if_acmpeq     12
       6: ldc           #3                  // class java/awt/image/BufferedImage
       8: aload_1
       9: if_acmpne     16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: ireturn

  public java.awt.image.RenderedImage readFrom(java.lang.Class<java.awt.image.RenderedImage>, java.lang.reflect.Type, java.lang.annotation.Annotation[], javax.ws.rs.core.MediaType, javax.ws.rs.core.MultivaluedMap<java.lang.String, java.lang.String>, java.io.InputStream) throws java.io.IOException;
    Code:
       0: getstatic     #4                  // Field IMAGE_MEDIA_TYPE:Ljavax/ws/rs/core/MediaType;
       3: aload         4
       5: invokevirtual #5                  // Method javax/ws/rs/core/MediaType.isCompatible:(Ljavax/ws/rs/core/MediaType;)Z
       8: ifeq          120
      11: aload         4
      13: invokevirtual #6                  // Method javax/ws/rs/core/MediaType.toString:()Ljava/lang/String;
      16: invokestatic  #7                  // Method javax/imageio/ImageIO.getImageReadersByMIMEType:(Ljava/lang/String;)Ljava/util/Iterator;
      19: astore        7
      21: aload         7
      23: invokeinterface #8,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      28: ifne          64
      31: new           #9                  // class java/io/IOException
      34: dup
      35: new           #10                 // class java/lang/StringBuilder
      38: dup
      39: invokespecial #11                 // Method java/lang/StringBuilder."<init>":()V
      42: ldc           #12                 // String The image-based media type
      44: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      47: aload         4
      49: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      52: ldc           #15                 // String is not supported for reading
      54: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      57: invokevirtual #16                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      60: invokespecial #17                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      63: athrow
      64: aload         7
      66: invokeinterface #18,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      71: checkcast     #19                 // class javax/imageio/ImageReader
      74: astore        8
      76: aload         6
      78: invokestatic  #20                 // Method javax/imageio/ImageIO.createImageInputStream:(Ljava/lang/Object;)Ljavax/imageio/stream/ImageInputStream;
      81: astore        9
      83: aload         8
      85: aload         9
      87: iconst_1
      88: iconst_1
      89: invokevirtual #21                 // Method javax/imageio/ImageReader.setInput:(Ljava/lang/Object;ZZ)V
      92: aload         8
      94: iconst_0
      95: aload         8
      97: invokevirtual #22                 // Method javax/imageio/ImageReader.getDefaultReadParam:()Ljavax/imageio/ImageReadParam;
     100: invokevirtual #23                 // Method javax/imageio/ImageReader.read:(ILjavax/imageio/ImageReadParam;)Ljava/awt/image/BufferedImage;
     103: astore        10
     105: aload         9
     107: invokeinterface #24,  1           // InterfaceMethod javax/imageio/stream/ImageInputStream.close:()V
     112: aload         8
     114: invokevirtual #25                 // Method javax/imageio/ImageReader.dispose:()V
     117: aload         10
     119: areturn
     120: aload         6
     122: invokestatic  #26                 // Method javax/imageio/ImageIO.read:(Ljava/io/InputStream;)Ljava/awt/image/BufferedImage;
     125: areturn

  public boolean isWriteable(java.lang.Class<?>, java.lang.reflect.Type, java.lang.annotation.Annotation[], javax.ws.rs.core.MediaType);
    Code:
       0: ldc           #2                  // class java/awt/image/RenderedImage
       2: aload_1
       3: invokevirtual #27                 // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
       6: ireturn

  public void writeTo(java.awt.image.RenderedImage, java.lang.Class<?>, java.lang.reflect.Type, java.lang.annotation.Annotation[], javax.ws.rs.core.MediaType, javax.ws.rs.core.MultivaluedMap<java.lang.String, java.lang.Object>, java.io.OutputStream) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload         5
       3: invokespecial #28                 // Method getWriterFormatName:(Ljavax/ws/rs/core/MediaType;)Ljava/lang/String;
       6: astore        8
       8: aload         8
      10: ifnonnull     46
      13: new           #9                  // class java/io/IOException
      16: dup
      17: new           #10                 // class java/lang/StringBuilder
      20: dup
      21: invokespecial #11                 // Method java/lang/StringBuilder."<init>":()V
      24: ldc           #12                 // String The image-based media type
      26: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: aload         5
      31: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      34: ldc           #29                 // String  is not supported for writing
      36: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: invokevirtual #16                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      42: invokespecial #17                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      45: athrow
      46: aload_1
      47: aload         8
      49: aload         7
      51: invokestatic  #30                 // Method javax/imageio/ImageIO.write:(Ljava/awt/image/RenderedImage;Ljava/lang/String;Ljava/io/OutputStream;)Z
      54: pop
      55: return

  private java.lang.String getWriterFormatName(javax.ws.rs.core.MediaType);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #6                  // Method javax/ws/rs/core/MediaType.toString:()Ljava/lang/String;
       5: invokespecial #31                 // Method getWriterFormatName:(Ljava/lang/String;)Ljava/lang/String;
       8: areturn

  private java.lang.String getWriterFormatName(java.lang.String);
    Code:
       0: aload_1
       1: invokestatic  #32                 // Method javax/imageio/ImageIO.getImageWritersByMIMEType:(Ljava/lang/String;)Ljava/util/Iterator;
       4: astore_2
       5: aload_2
       6: invokeinterface #8,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      11: ifne          16
      14: aconst_null
      15: areturn
      16: aload_2
      17: invokeinterface #18,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      22: checkcast     #33                 // class javax/imageio/ImageWriter
      25: invokevirtual #34                 // Method javax/imageio/ImageWriter.getOriginatingProvider:()Ljavax/imageio/spi/ImageWriterSpi;
      28: invokevirtual #35                 // Method javax/imageio/spi/ImageWriterSpi.getFormatNames:()[Ljava/lang/String;
      31: iconst_0
      32: aaload
      33: areturn

  public java.lang.Object readFrom(java.lang.Class, java.lang.reflect.Type, java.lang.annotation.Annotation[], javax.ws.rs.core.MediaType, javax.ws.rs.core.MultivaluedMap, java.io.InputStream) throws java.io.IOException, javax.ws.rs.WebApplicationException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: aload         6
      10: invokevirtual #36                 // Method readFrom:(Ljava/lang/Class;Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;Ljavax/ws/rs/core/MediaType;Ljavax/ws/rs/core/MultivaluedMap;Ljava/io/InputStream;)Ljava/awt/image/RenderedImage;
      13: areturn

  public void writeTo(java.lang.Object, java.lang.Class, java.lang.reflect.Type, java.lang.annotation.Annotation[], javax.ws.rs.core.MediaType, javax.ws.rs.core.MultivaluedMap, java.io.OutputStream) throws java.io.IOException, javax.ws.rs.WebApplicationException;
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #2                  // class java/awt/image/RenderedImage
       5: aload_2
       6: aload_3
       7: aload         4
       9: aload         5
      11: aload         6
      13: aload         7
      15: invokevirtual #37                 // Method writeTo:(Ljava/awt/image/RenderedImage;Ljava/lang/Class;Ljava/lang/reflect/Type;[Ljava/lang/annotation/Annotation;Ljavax/ws/rs/core/MediaType;Ljavax/ws/rs/core/MultivaluedMap;Ljava/io/OutputStream;)V
      18: return

  static {};
    Code:
       0: new           #38                 // class javax/ws/rs/core/MediaType
       3: dup
       4: ldc           #39                 // String image
       6: ldc           #40                 // String *
       8: invokespecial #41                 // Method javax/ws/rs/core/MediaType."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      11: putstatic     #4                  // Field IMAGE_MEDIA_TYPE:Ljavax/ws/rs/core/MediaType;
      14: return
}
