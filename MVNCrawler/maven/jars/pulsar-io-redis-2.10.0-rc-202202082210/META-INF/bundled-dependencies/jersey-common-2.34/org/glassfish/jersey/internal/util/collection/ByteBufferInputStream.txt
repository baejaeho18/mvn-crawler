Compiled from "ByteBufferInputStream.java"
public final class org.glassfish.jersey.internal.util.collection.ByteBufferInputStream extends org.glassfish.jersey.internal.util.collection.NonBlockingInputStream {
  private static final java.nio.ByteBuffer EOF;

  private boolean eof;

  private java.nio.ByteBuffer current;

  private final java.util.concurrent.BlockingQueue<java.nio.ByteBuffer> buffers;

  private final java.util.concurrent.atomic.AtomicReference<java.lang.Object> queueStatus;

  private final java.util.concurrent.atomic.AtomicBoolean closed;

  public org.glassfish.jersey.internal.util.collection.ByteBufferInputStream();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/glassfish/jersey/internal/util/collection/NonBlockingInputStream."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field eof:Z
       9: aload_0
      10: new           #3                  // class java/util/concurrent/atomic/AtomicReference
      13: dup
      14: aconst_null
      15: invokespecial #4                  // Method java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
      18: putfield      #5                  // Field queueStatus:Ljava/util/concurrent/atomic/AtomicReference;
      21: aload_0
      22: new           #6                  // class java/util/concurrent/atomic/AtomicBoolean
      25: dup
      26: iconst_0
      27: invokespecial #7                  // Method java/util/concurrent/atomic/AtomicBoolean."<init>":(Z)V
      30: putfield      #8                  // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;
      33: aload_0
      34: new           #9                  // class java/util/concurrent/LinkedTransferQueue
      37: dup
      38: invokespecial #10                 // Method java/util/concurrent/LinkedTransferQueue."<init>":()V
      41: putfield      #11                 // Field buffers:Ljava/util/concurrent/BlockingQueue;
      44: aload_0
      45: aconst_null
      46: putfield      #12                 // Field current:Ljava/nio/ByteBuffer;
      49: return

  private boolean fetchChunk(boolean) throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field eof:Z
       4: ifeq          9
       7: iconst_0
       8: ireturn
       9: aload_0
      10: getfield      #8                  // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;
      13: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
      16: ifeq          29
      19: aload_0
      20: getstatic     #14                 // Field EOF:Ljava/nio/ByteBuffer;
      23: putfield      #12                 // Field current:Ljava/nio/ByteBuffer;
      26: goto          91
      29: aload_0
      30: iload_1
      31: ifeq          49
      34: aload_0
      35: getfield      #11                 // Field buffers:Ljava/util/concurrent/BlockingQueue;
      38: invokeinterface #15,  1           // InterfaceMethod java/util/concurrent/BlockingQueue.take:()Ljava/lang/Object;
      43: checkcast     #16                 // class java/nio/ByteBuffer
      46: goto          61
      49: aload_0
      50: getfield      #11                 // Field buffers:Ljava/util/concurrent/BlockingQueue;
      53: invokeinterface #17,  1           // InterfaceMethod java/util/concurrent/BlockingQueue.poll:()Ljava/lang/Object;
      58: checkcast     #16                 // class java/nio/ByteBuffer
      61: putfield      #12                 // Field current:Ljava/nio/ByteBuffer;
      64: aload_0
      65: getfield      #12                 // Field current:Ljava/nio/ByteBuffer;
      68: ifnull        91
      71: aload_0
      72: getfield      #12                 // Field current:Ljava/nio/ByteBuffer;
      75: getstatic     #14                 // Field EOF:Ljava/nio/ByteBuffer;
      78: if_acmpeq     91
      81: aload_0
      82: getfield      #12                 // Field current:Ljava/nio/ByteBuffer;
      85: invokevirtual #18                 // Method java/nio/ByteBuffer.hasRemaining:()Z
      88: ifeq          9
      91: aload_0
      92: aload_0
      93: getfield      #12                 // Field current:Ljava/nio/ByteBuffer;
      96: getstatic     #14                 // Field EOF:Ljava/nio/ByteBuffer;
      99: if_acmpne     106
     102: iconst_1
     103: goto          107
     106: iconst_0
     107: putfield      #2                  // Field eof:Z
     110: aload_0
     111: getfield      #2                  // Field eof:Z
     114: ifne          121
     117: iconst_1
     118: goto          122
     121: iconst_0
     122: ireturn

  private void checkNotClosed() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #8                  // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       7: ifeq          21
      10: new           #19                 // class java/io/IOException
      13: dup
      14: invokestatic  #20                 // Method org/glassfish/jersey/internal/LocalizationMessages.INPUT_STREAM_CLOSED:()Ljava/lang/String;
      17: invokespecial #21                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      20: athrow
      21: return

  private void checkThrowable() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #5                  // Field queueStatus:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: astore_1
       8: aload_1
       9: ifnull        52
      12: aload_1
      13: getstatic     #14                 // Field EOF:Ljava/nio/ByteBuffer;
      16: if_acmpeq     52
      19: aload_0
      20: getfield      #5                  // Field queueStatus:Ljava/util/concurrent/atomic/AtomicReference;
      23: aload_1
      24: getstatic     #14                 // Field EOF:Ljava/nio/ByteBuffer;
      27: invokevirtual #23                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
      30: ifeq          52
      33: new           #19                 // class java/io/IOException
      36: dup
      37: aload_1
      38: checkcast     #24                 // class java/lang/Throwable
      41: invokespecial #25                 // Method java/io/IOException."<init>":(Ljava/lang/Throwable;)V
      44: athrow
      45: astore_2
      46: aload_0
      47: invokevirtual #26                 // Method close:()V
      50: aload_2
      51: athrow
      52: return
    Exception table:
       from    to  target type
          33    46    45   any

  public int available() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field eof:Z
       4: ifne          17
       7: aload_0
       8: getfield      #8                  // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;
      11: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
      14: ifeq          23
      17: aload_0
      18: invokespecial #27                 // Method checkThrowable:()V
      21: iconst_0
      22: ireturn
      23: iconst_0
      24: istore_1
      25: aload_0
      26: getfield      #12                 // Field current:Ljava/nio/ByteBuffer;
      29: ifnull        50
      32: aload_0
      33: getfield      #12                 // Field current:Ljava/nio/ByteBuffer;
      36: invokevirtual #18                 // Method java/nio/ByteBuffer.hasRemaining:()Z
      39: ifeq          50
      42: aload_0
      43: getfield      #12                 // Field current:Ljava/nio/ByteBuffer;
      46: invokevirtual #28                 // Method java/nio/ByteBuffer.remaining:()I
      49: istore_1
      50: aload_0
      51: getfield      #11                 // Field buffers:Ljava/util/concurrent/BlockingQueue;
      54: invokeinterface #29,  1           // InterfaceMethod java/util/concurrent/BlockingQueue.iterator:()Ljava/util/Iterator;
      59: astore_2
      60: aload_2
      61: invokeinterface #30,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      66: ifeq          99
      69: aload_2
      70: invokeinterface #31,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      75: checkcast     #16                 // class java/nio/ByteBuffer
      78: astore_3
      79: aload_3
      80: getstatic     #14                 // Field EOF:Ljava/nio/ByteBuffer;
      83: if_acmpne     89
      86: goto          99
      89: iload_1
      90: aload_3
      91: invokevirtual #28                 // Method java/nio/ByteBuffer.remaining:()I
      94: iadd
      95: istore_1
      96: goto          60
      99: aload_0
     100: invokespecial #27                 // Method checkThrowable:()V
     103: aload_0
     104: getfield      #8                  // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;
     107: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
     110: ifeq          117
     113: iconst_0
     114: goto          118
     117: iload_1
     118: ireturn

  public int read() throws java.io.IOException;
    Code:
       0: aload_0
       1: iconst_1
       2: invokespecial #32                 // Method tryRead:(Z)I
       5: ireturn

  public int read(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: iconst_1
       5: invokespecial #33                 // Method tryRead:([BIIZ)I
       8: ireturn

  public int tryRead() throws java.io.IOException;
    Code:
       0: aload_0
       1: iconst_0
       2: invokespecial #32                 // Method tryRead:(Z)I
       5: ireturn

  public int tryRead(byte[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_1
       4: arraylength
       5: invokevirtual #34                 // Method tryRead:([BII)I
       8: ireturn

  public int tryRead(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: iconst_0
       5: invokespecial #33                 // Method tryRead:([BIIZ)I
       8: ireturn

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #8                  // Field closed:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_0
       5: iconst_1
       6: invokevirtual #35                 // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
       9: ifeq          25
      12: aload_0
      13: invokevirtual #36                 // Method closeQueue:()V
      16: aload_0
      17: getfield      #11                 // Field buffers:Ljava/util/concurrent/BlockingQueue;
      20: invokeinterface #37,  1           // InterfaceMethod java/util/concurrent/BlockingQueue.clear:()V
      25: aload_0
      26: invokespecial #27                 // Method checkThrowable:()V
      29: return

  public boolean put(java.nio.ByteBuffer) throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: getfield      #5                  // Field queueStatus:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: ifnonnull     22
      10: aload_0
      11: getfield      #11                 // Field buffers:Ljava/util/concurrent/BlockingQueue;
      14: aload_1
      15: invokeinterface #38,  2           // InterfaceMethod java/util/concurrent/BlockingQueue.put:(Ljava/lang/Object;)V
      20: iconst_1
      21: ireturn
      22: iconst_0
      23: ireturn

  public void closeQueue();
    Code:
       0: aload_0
       1: getfield      #5                  // Field queueStatus:Ljava/util/concurrent/atomic/AtomicReference;
       4: aconst_null
       5: getstatic     #14                 // Field EOF:Ljava/nio/ByteBuffer;
       8: invokevirtual #23                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
      11: ifeq          36
      14: aload_0
      15: getfield      #11                 // Field buffers:Ljava/util/concurrent/BlockingQueue;
      18: getstatic     #14                 // Field EOF:Ljava/nio/ByteBuffer;
      21: invokeinterface #38,  2           // InterfaceMethod java/util/concurrent/BlockingQueue.put:(Ljava/lang/Object;)V
      26: goto          36
      29: astore_1
      30: invokestatic  #40                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      33: invokevirtual #41                 // Method java/lang/Thread.interrupt:()V
      36: return
    Exception table:
       from    to  target type
          14    26    29   Class java/lang/InterruptedException

  public void closeQueue(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #5                  // Field queueStatus:Ljava/util/concurrent/atomic/AtomicReference;
       4: aconst_null
       5: aload_1
       6: invokevirtual #23                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
       9: ifeq          34
      12: aload_0
      13: getfield      #11                 // Field buffers:Ljava/util/concurrent/BlockingQueue;
      16: getstatic     #14                 // Field EOF:Ljava/nio/ByteBuffer;
      19: invokeinterface #38,  2           // InterfaceMethod java/util/concurrent/BlockingQueue.put:(Ljava/lang/Object;)V
      24: goto          34
      27: astore_2
      28: invokestatic  #40                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      31: invokevirtual #41                 // Method java/lang/Thread.interrupt:()V
      34: return
    Exception table:
       from    to  target type
          12    24    27   Class java/lang/InterruptedException

  private int tryRead(byte[], int, int, boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #27                 // Method checkThrowable:()V
       4: aload_0
       5: invokespecial #42                 // Method checkNotClosed:()V
       8: aload_1
       9: ifnonnull     20
      12: new           #43                 // class java/lang/NullPointerException
      15: dup
      16: invokespecial #44                 // Method java/lang/NullPointerException."<init>":()V
      19: athrow
      20: iload_2
      21: iflt          36
      24: iload_3
      25: iflt          36
      28: iload_3
      29: aload_1
      30: arraylength
      31: iload_2
      32: isub
      33: if_icmple     44
      36: new           #45                 // class java/lang/IndexOutOfBoundsException
      39: dup
      40: invokespecial #46                 // Method java/lang/IndexOutOfBoundsException."<init>":()V
      43: athrow
      44: iload_3
      45: ifne          50
      48: iconst_0
      49: ireturn
      50: aload_0
      51: getfield      #2                  // Field eof:Z
      54: ifeq          59
      57: iconst_m1
      58: ireturn
      59: iconst_0
      60: istore        5
      62: iload         5
      64: iload_3
      65: if_icmpge     198
      68: aload_0
      69: getfield      #12                 // Field current:Ljava/nio/ByteBuffer;
      72: ifnull        150
      75: aload_0
      76: getfield      #12                 // Field current:Ljava/nio/ByteBuffer;
      79: invokevirtual #18                 // Method java/nio/ByteBuffer.hasRemaining:()Z
      82: ifeq          150
      85: aload_0
      86: getfield      #12                 // Field current:Ljava/nio/ByteBuffer;
      89: invokevirtual #28                 // Method java/nio/ByteBuffer.remaining:()I
      92: istore        6
      94: iload         6
      96: iload_3
      97: iload         5
      99: isub
     100: if_icmpge     128
     103: aload_0
     104: getfield      #12                 // Field current:Ljava/nio/ByteBuffer;
     107: aload_1
     108: iload_2
     109: iload         5
     111: iadd
     112: iload         6
     114: invokevirtual #47                 // Method java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;
     117: pop
     118: iload         5
     120: iload         6
     122: iadd
     123: istore        5
     125: goto          147
     128: aload_0
     129: getfield      #12                 // Field current:Ljava/nio/ByteBuffer;
     132: aload_1
     133: iload_2
     134: iload         5
     136: iadd
     137: iload_3
     138: iload         5
     140: isub
     141: invokevirtual #47                 // Method java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;
     144: pop
     145: iload_3
     146: ireturn
     147: goto          62
     150: aload_0
     151: iload         4
     153: invokespecial #48                 // Method fetchChunk:(Z)Z
     156: ifeq          166
     159: aload_0
     160: getfield      #12                 // Field current:Ljava/nio/ByteBuffer;
     163: ifnonnull     169
     166: goto          198
     169: goto          62
     172: astore        6
     174: invokestatic  #40                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
     177: invokevirtual #41                 // Method java/lang/Thread.interrupt:()V
     180: iload         4
     182: ifeq          195
     185: new           #19                 // class java/io/IOException
     188: dup
     189: aload         6
     191: invokespecial #25                 // Method java/io/IOException."<init>":(Ljava/lang/Throwable;)V
     194: athrow
     195: goto          62
     198: iload         5
     200: ifne          214
     203: aload_0
     204: getfield      #2                  // Field eof:Z
     207: ifeq          214
     210: iconst_m1
     211: goto          216
     214: iload         5
     216: ireturn
    Exception table:
       from    to  target type
         150   166   172   Class java/lang/InterruptedException

  private int tryRead(boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #27                 // Method checkThrowable:()V
       4: aload_0
       5: invokespecial #42                 // Method checkNotClosed:()V
       8: aload_0
       9: getfield      #2                  // Field eof:Z
      12: ifeq          17
      15: iconst_m1
      16: ireturn
      17: aload_0
      18: getfield      #12                 // Field current:Ljava/nio/ByteBuffer;
      21: ifnull        46
      24: aload_0
      25: getfield      #12                 // Field current:Ljava/nio/ByteBuffer;
      28: invokevirtual #18                 // Method java/nio/ByteBuffer.hasRemaining:()Z
      31: ifeq          46
      34: aload_0
      35: getfield      #12                 // Field current:Ljava/nio/ByteBuffer;
      38: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
      41: sipush        255
      44: iand
      45: ireturn
      46: aload_0
      47: iload_1
      48: invokespecial #48                 // Method fetchChunk:(Z)Z
      51: ifeq          73
      54: aload_0
      55: getfield      #12                 // Field current:Ljava/nio/ByteBuffer;
      58: ifnull        73
      61: aload_0
      62: getfield      #12                 // Field current:Ljava/nio/ByteBuffer;
      65: invokevirtual #49                 // Method java/nio/ByteBuffer.get:()B
      68: sipush        255
      71: iand
      72: ireturn
      73: iload_1
      74: ifeq          79
      77: iconst_m1
      78: ireturn
      79: goto          102
      82: astore_2
      83: invokestatic  #40                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      86: invokevirtual #41                 // Method java/lang/Thread.interrupt:()V
      89: iload_1
      90: ifeq          102
      93: new           #19                 // class java/io/IOException
      96: dup
      97: aload_2
      98: invokespecial #25                 // Method java/io/IOException."<init>":(Ljava/lang/Throwable;)V
     101: athrow
     102: aload_0
     103: getfield      #2                  // Field eof:Z
     106: ifeq          113
     109: iconst_m1
     110: goto          115
     113: ldc           #51                 // int -2147483648
     115: ireturn
    Exception table:
       from    to  target type
          46    72    82   Class java/lang/InterruptedException
          73    78    82   Class java/lang/InterruptedException

  static {};
    Code:
       0: iconst_0
       1: newarray       byte
       3: invokestatic  #52                 // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;
       6: putstatic     #14                 // Field EOF:Ljava/nio/ByteBuffer;
       9: return
}
