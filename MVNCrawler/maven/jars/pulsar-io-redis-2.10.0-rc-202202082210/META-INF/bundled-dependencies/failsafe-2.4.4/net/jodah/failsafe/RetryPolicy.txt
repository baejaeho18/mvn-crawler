Compiled from "RetryPolicy.java"
public class net.jodah.failsafe.RetryPolicy<R> extends net.jodah.failsafe.DelayablePolicy<net.jodah.failsafe.RetryPolicy<R>, R> {
  private static final int DEFAULT_MAX_RETRIES;

  private java.time.Duration delay;

  private java.time.Duration delayMin;

  private java.time.Duration delayMax;

  private double delayFactor;

  private java.time.Duration maxDelay;

  private java.time.Duration jitter;

  private double jitterFactor;

  private java.time.Duration maxDuration;

  private int maxRetries;

  private java.util.List<java.util.function.BiPredicate<R, java.lang.Throwable>> abortConditions;

  private net.jodah.failsafe.internal.EventListener abortListener;

  private net.jodah.failsafe.internal.EventListener failedAttemptListener;

  private net.jodah.failsafe.internal.EventListener retriesExceededListener;

  private net.jodah.failsafe.internal.EventListener retryListener;

  private net.jodah.failsafe.internal.EventListener retryScheduledListener;

  public net.jodah.failsafe.RetryPolicy();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method net/jodah/failsafe/DelayablePolicy."<init>":()V
       4: aload_0
       5: getstatic     #2                  // Field java/time/Duration.ZERO:Ljava/time/Duration;
       8: putfield      #3                  // Field delay:Ljava/time/Duration;
      11: aload_0
      12: iconst_2
      13: putfield      #5                  // Field maxRetries:I
      16: aload_0
      17: new           #6                  // class java/util/ArrayList
      20: dup
      21: invokespecial #7                  // Method java/util/ArrayList."<init>":()V
      24: putfield      #8                  // Field abortConditions:Ljava/util/List;
      27: return

  private net.jodah.failsafe.RetryPolicy(net.jodah.failsafe.RetryPolicy<R>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method net/jodah/failsafe/DelayablePolicy."<init>":()V
       4: aload_0
       5: aload_1
       6: getfield      #3                  // Field delay:Ljava/time/Duration;
       9: putfield      #3                  // Field delay:Ljava/time/Duration;
      12: aload_0
      13: aload_1
      14: getfield      #9                  // Field delayMin:Ljava/time/Duration;
      17: putfield      #9                  // Field delayMin:Ljava/time/Duration;
      20: aload_0
      21: aload_1
      22: getfield      #10                 // Field delayMax:Ljava/time/Duration;
      25: putfield      #10                 // Field delayMax:Ljava/time/Duration;
      28: aload_0
      29: aload_1
      30: getfield      #11                 // Field delayFactor:D
      33: putfield      #11                 // Field delayFactor:D
      36: aload_0
      37: aload_1
      38: getfield      #12                 // Field maxDelay:Ljava/time/Duration;
      41: putfield      #12                 // Field maxDelay:Ljava/time/Duration;
      44: aload_0
      45: aload_1
      46: getfield      #13                 // Field delayFn:Lnet/jodah/failsafe/function/DelayFunction;
      49: putfield      #13                 // Field delayFn:Lnet/jodah/failsafe/function/DelayFunction;
      52: aload_0
      53: aload_1
      54: getfield      #14                 // Field delayResult:Ljava/lang/Object;
      57: putfield      #14                 // Field delayResult:Ljava/lang/Object;
      60: aload_0
      61: aload_1
      62: getfield      #15                 // Field delayFailure:Ljava/lang/Class;
      65: putfield      #15                 // Field delayFailure:Ljava/lang/Class;
      68: aload_0
      69: aload_1
      70: getfield      #16                 // Field maxDuration:Ljava/time/Duration;
      73: putfield      #16                 // Field maxDuration:Ljava/time/Duration;
      76: aload_0
      77: aload_1
      78: getfield      #5                  // Field maxRetries:I
      81: putfield      #5                  // Field maxRetries:I
      84: aload_0
      85: aload_1
      86: getfield      #17                 // Field jitter:Ljava/time/Duration;
      89: putfield      #17                 // Field jitter:Ljava/time/Duration;
      92: aload_0
      93: aload_1
      94: getfield      #18                 // Field jitterFactor:D
      97: putfield      #18                 // Field jitterFactor:D
     100: aload_0
     101: aload_1
     102: getfield      #19                 // Field failuresChecked:Z
     105: putfield      #19                 // Field failuresChecked:Z
     108: aload_0
     109: new           #6                  // class java/util/ArrayList
     112: dup
     113: aload_1
     114: getfield      #20                 // Field failureConditions:Ljava/util/List;
     117: invokespecial #21                 // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
     120: putfield      #20                 // Field failureConditions:Ljava/util/List;
     123: aload_0
     124: new           #6                  // class java/util/ArrayList
     127: dup
     128: aload_1
     129: getfield      #8                  // Field abortConditions:Ljava/util/List;
     132: invokespecial #21                 // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
     135: putfield      #8                  // Field abortConditions:Ljava/util/List;
     138: aload_0
     139: aload_1
     140: getfield      #22                 // Field abortListener:Lnet/jodah/failsafe/internal/EventListener;
     143: putfield      #22                 // Field abortListener:Lnet/jodah/failsafe/internal/EventListener;
     146: aload_0
     147: aload_1
     148: getfield      #23                 // Field failedAttemptListener:Lnet/jodah/failsafe/internal/EventListener;
     151: putfield      #23                 // Field failedAttemptListener:Lnet/jodah/failsafe/internal/EventListener;
     154: aload_0
     155: aload_1
     156: getfield      #24                 // Field retriesExceededListener:Lnet/jodah/failsafe/internal/EventListener;
     159: putfield      #24                 // Field retriesExceededListener:Lnet/jodah/failsafe/internal/EventListener;
     162: aload_0
     163: aload_1
     164: getfield      #25                 // Field retryListener:Lnet/jodah/failsafe/internal/EventListener;
     167: putfield      #25                 // Field retryListener:Lnet/jodah/failsafe/internal/EventListener;
     170: aload_0
     171: aload_1
     172: getfield      #26                 // Field retryScheduledListener:Lnet/jodah/failsafe/internal/EventListener;
     175: putfield      #26                 // Field retryScheduledListener:Lnet/jodah/failsafe/internal/EventListener;
     178: aload_0
     179: aload_1
     180: getfield      #27                 // Field failureListener:Lnet/jodah/failsafe/internal/EventListener;
     183: putfield      #27                 // Field failureListener:Lnet/jodah/failsafe/internal/EventListener;
     186: aload_0
     187: aload_1
     188: getfield      #28                 // Field successListener:Lnet/jodah/failsafe/internal/EventListener;
     191: putfield      #28                 // Field successListener:Lnet/jodah/failsafe/internal/EventListener;
     194: return

  public net.jodah.failsafe.RetryPolicy<R> abortIf(java.util.function.BiPredicate<R, ? extends java.lang.Throwable>);
    Code:
       0: aload_1
       1: ldc           #29                 // String completionPredicate
       3: invokestatic  #30                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: getfield      #8                  // Field abortConditions:Ljava/util/List;
      11: aload_1
      12: invokeinterface #31,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      17: pop
      18: aload_0
      19: areturn

  public net.jodah.failsafe.RetryPolicy<R> abortIf(java.util.function.Predicate<R>);
    Code:
       0: aload_1
       1: ldc           #32                 // String resultPredicate
       3: invokestatic  #30                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: getfield      #8                  // Field abortConditions:Ljava/util/List;
      11: aload_1
      12: invokestatic  #33                 // Method resultPredicateFor:(Ljava/util/function/Predicate;)Ljava/util/function/BiPredicate;
      15: invokeinterface #31,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      20: pop
      21: aload_0
      22: areturn

  public net.jodah.failsafe.RetryPolicy<R> abortOn(java.lang.Class<? extends java.lang.Throwable>);
    Code:
       0: aload_1
       1: ldc           #34                 // String failure
       3: invokestatic  #30                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: iconst_1
       9: anewarray     #35                 // class java/lang/Class
      12: dup
      13: iconst_0
      14: aload_1
      15: aastore
      16: invokestatic  #36                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      19: invokevirtual #37                 // Method abortOn:(Ljava/util/List;)Lnet/jodah/failsafe/RetryPolicy;
      22: areturn

  public final net.jodah.failsafe.RetryPolicy<R> abortOn(java.lang.Class<? extends java.lang.Throwable>...);
    Code:
       0: aload_1
       1: ldc           #38                 // String failures
       3: invokestatic  #30                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_1
       8: arraylength
       9: ifle          16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: ldc           #39                 // String Failures cannot be empty
      19: iconst_0
      20: anewarray     #40                 // class java/lang/Object
      23: invokestatic  #41                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      26: aload_0
      27: aload_1
      28: invokestatic  #36                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      31: invokevirtual #37                 // Method abortOn:(Ljava/util/List;)Lnet/jodah/failsafe/RetryPolicy;
      34: areturn

  public net.jodah.failsafe.RetryPolicy<R> abortOn(java.util.List<java.lang.Class<? extends java.lang.Throwable>>);
    Code:
       0: aload_1
       1: ldc           #38                 // String failures
       3: invokestatic  #30                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_1
       8: invokeinterface #42,  1           // InterfaceMethod java/util/List.isEmpty:()Z
      13: ifne          20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: ldc           #43                 // String failures cannot be empty
      23: iconst_0
      24: anewarray     #40                 // class java/lang/Object
      27: invokestatic  #41                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      30: aload_0
      31: getfield      #8                  // Field abortConditions:Ljava/util/List;
      34: aload_1
      35: invokestatic  #44                 // Method failurePredicateFor:(Ljava/util/List;)Ljava/util/function/BiPredicate;
      38: invokeinterface #31,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      43: pop
      44: aload_0
      45: areturn

  public net.jodah.failsafe.RetryPolicy<R> abortOn(java.util.function.Predicate<? extends java.lang.Throwable>);
    Code:
       0: aload_1
       1: ldc           #45                 // String failurePredicate
       3: invokestatic  #30                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: getfield      #8                  // Field abortConditions:Ljava/util/List;
      11: aload_1
      12: invokestatic  #46                 // Method failurePredicateFor:(Ljava/util/function/Predicate;)Ljava/util/function/BiPredicate;
      15: invokeinterface #31,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      20: pop
      21: aload_0
      22: areturn

  public net.jodah.failsafe.RetryPolicy<R> abortWhen(R);
    Code:
       0: aload_0
       1: getfield      #8                  // Field abortConditions:Ljava/util/List;
       4: aload_1
       5: invokestatic  #47                 // Method resultPredicateFor:(Ljava/lang/Object;)Ljava/util/function/BiPredicate;
       8: invokeinterface #31,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      13: pop
      14: aload_0
      15: areturn

  public boolean allowsRetries();
    Code:
       0: aload_0
       1: getfield      #5                  // Field maxRetries:I
       4: iconst_m1
       5: if_icmpeq     15
       8: aload_0
       9: getfield      #5                  // Field maxRetries:I
      12: ifle          38
      15: aload_0
      16: getfield      #16                 // Field maxDuration:Ljava/time/Duration;
      19: ifnull        34
      22: aload_0
      23: getfield      #16                 // Field maxDuration:Ljava/time/Duration;
      26: invokevirtual #48                 // Method java/time/Duration.toNanos:()J
      29: lconst_0
      30: lcmp
      31: ifle          38
      34: iconst_1
      35: goto          39
      38: iconst_0
      39: ireturn

  public boolean isAbortable(R, java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #8                  // Field abortConditions:Ljava/util/List;
       4: invokeinterface #49,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       9: astore_3
      10: aload_3
      11: invokeinterface #50,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          52
      19: aload_3
      20: invokeinterface #51,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #52                 // class java/util/function/BiPredicate
      28: astore        4
      30: aload         4
      32: aload_1
      33: aload_2
      34: invokeinterface #53,  3           // InterfaceMethod java/util/function/BiPredicate.test:(Ljava/lang/Object;Ljava/lang/Object;)Z
      39: ifeq          44
      42: iconst_1
      43: ireturn
      44: goto          49
      47: astore        5
      49: goto          10
      52: iconst_0
      53: ireturn
    Exception table:
       from    to  target type
          30    43    47   Class java/lang/Exception

  public net.jodah.failsafe.RetryPolicy<R> onAbort(net.jodah.failsafe.function.CheckedConsumer<? extends net.jodah.failsafe.event.ExecutionCompletedEvent<R>>);
    Code:
       0: aload_0
       1: aload_1
       2: ldc           #55                 // String listener
       4: invokestatic  #30                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: checkcast     #56                 // class net/jodah/failsafe/function/CheckedConsumer
      10: invokestatic  #57                 // InterfaceMethod net/jodah/failsafe/internal/EventListener.of:(Lnet/jodah/failsafe/function/CheckedConsumer;)Lnet/jodah/failsafe/internal/EventListener;
      13: putfield      #22                 // Field abortListener:Lnet/jodah/failsafe/internal/EventListener;
      16: aload_0
      17: areturn

  public net.jodah.failsafe.RetryPolicy<R> onFailedAttempt(net.jodah.failsafe.function.CheckedConsumer<? extends net.jodah.failsafe.event.ExecutionAttemptedEvent<R>>);
    Code:
       0: aload_0
       1: aload_1
       2: ldc           #55                 // String listener
       4: invokestatic  #30                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: checkcast     #56                 // class net/jodah/failsafe/function/CheckedConsumer
      10: invokestatic  #58                 // InterfaceMethod net/jodah/failsafe/internal/EventListener.ofAttempt:(Lnet/jodah/failsafe/function/CheckedConsumer;)Lnet/jodah/failsafe/internal/EventListener;
      13: putfield      #23                 // Field failedAttemptListener:Lnet/jodah/failsafe/internal/EventListener;
      16: aload_0
      17: areturn

  public net.jodah.failsafe.RetryPolicy<R> onRetriesExceeded(net.jodah.failsafe.function.CheckedConsumer<? extends net.jodah.failsafe.event.ExecutionCompletedEvent<R>>);
    Code:
       0: aload_0
       1: aload_1
       2: ldc           #55                 // String listener
       4: invokestatic  #30                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: checkcast     #56                 // class net/jodah/failsafe/function/CheckedConsumer
      10: invokestatic  #57                 // InterfaceMethod net/jodah/failsafe/internal/EventListener.of:(Lnet/jodah/failsafe/function/CheckedConsumer;)Lnet/jodah/failsafe/internal/EventListener;
      13: putfield      #24                 // Field retriesExceededListener:Lnet/jodah/failsafe/internal/EventListener;
      16: aload_0
      17: areturn

  public net.jodah.failsafe.RetryPolicy<R> onRetry(net.jodah.failsafe.function.CheckedConsumer<? extends net.jodah.failsafe.event.ExecutionAttemptedEvent<R>>);
    Code:
       0: aload_0
       1: aload_1
       2: ldc           #55                 // String listener
       4: invokestatic  #30                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: checkcast     #56                 // class net/jodah/failsafe/function/CheckedConsumer
      10: invokestatic  #58                 // InterfaceMethod net/jodah/failsafe/internal/EventListener.ofAttempt:(Lnet/jodah/failsafe/function/CheckedConsumer;)Lnet/jodah/failsafe/internal/EventListener;
      13: putfield      #25                 // Field retryListener:Lnet/jodah/failsafe/internal/EventListener;
      16: aload_0
      17: areturn

  public net.jodah.failsafe.RetryPolicy<R> onRetryScheduled(net.jodah.failsafe.function.CheckedConsumer<? extends net.jodah.failsafe.event.ExecutionScheduledEvent<R>>);
    Code:
       0: aload_0
       1: aload_1
       2: ldc           #55                 // String listener
       4: invokestatic  #30                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: checkcast     #56                 // class net/jodah/failsafe/function/CheckedConsumer
      10: invokestatic  #59                 // InterfaceMethod net/jodah/failsafe/internal/EventListener.ofScheduled:(Lnet/jodah/failsafe/function/CheckedConsumer;)Lnet/jodah/failsafe/internal/EventListener;
      13: putfield      #26                 // Field retryScheduledListener:Lnet/jodah/failsafe/internal/EventListener;
      16: aload_0
      17: areturn

  public net.jodah.failsafe.RetryPolicy<R> copy();
    Code:
       0: new           #4                  // class net/jodah/failsafe/RetryPolicy
       3: dup
       4: aload_0
       5: invokespecial #60                 // Method "<init>":(Lnet/jodah/failsafe/RetryPolicy;)V
       8: areturn

  public java.time.Duration getDelay();
    Code:
       0: aload_0
       1: getfield      #3                  // Field delay:Ljava/time/Duration;
       4: areturn

  public java.time.Duration getDelayMin();
    Code:
       0: aload_0
       1: getfield      #9                  // Field delayMin:Ljava/time/Duration;
       4: areturn

  public java.time.Duration getDelayMax();
    Code:
       0: aload_0
       1: getfield      #10                 // Field delayMax:Ljava/time/Duration;
       4: areturn

  public double getDelayFactor();
    Code:
       0: aload_0
       1: getfield      #11                 // Field delayFactor:D
       4: dreturn

  public java.time.Duration getJitter();
    Code:
       0: aload_0
       1: getfield      #17                 // Field jitter:Ljava/time/Duration;
       4: areturn

  public double getJitterFactor();
    Code:
       0: aload_0
       1: getfield      #18                 // Field jitterFactor:D
       4: dreturn

  public int getMaxAttempts();
    Code:
       0: aload_0
       1: getfield      #5                  // Field maxRetries:I
       4: iconst_m1
       5: if_icmpne     12
       8: iconst_m1
       9: goto          18
      12: aload_0
      13: getfield      #5                  // Field maxRetries:I
      16: iconst_1
      17: iadd
      18: ireturn

  public java.time.Duration getMaxDelay();
    Code:
       0: aload_0
       1: getfield      #12                 // Field maxDelay:Ljava/time/Duration;
       4: areturn

  public java.time.Duration getMaxDuration();
    Code:
       0: aload_0
       1: getfield      #16                 // Field maxDuration:Ljava/time/Duration;
       4: areturn

  public int getMaxRetries();
    Code:
       0: aload_0
       1: getfield      #5                  // Field maxRetries:I
       4: ireturn

  public net.jodah.failsafe.RetryPolicy<R> withBackoff(long, long, java.time.temporal.ChronoUnit);
    Code:
       0: aload_0
       1: lload_1
       2: lload_3
       3: aload         5
       5: ldc2_w        #61                 // double 2.0d
       8: invokevirtual #63                 // Method withBackoff:(JJLjava/time/temporal/ChronoUnit;D)Lnet/jodah/failsafe/RetryPolicy;
      11: areturn

  public net.jodah.failsafe.RetryPolicy<R> withBackoff(long, long, java.time.temporal.ChronoUnit, double);
    Code:
       0: aload         5
       2: ldc           #64                 // String chronoUnit
       4: invokestatic  #30                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: pop
       8: lload_1
       9: lconst_0
      10: lcmp
      11: ifle          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ldc           #65                 // String The delay must be greater than 0
      21: iconst_0
      22: anewarray     #40                 // class java/lang/Object
      25: invokestatic  #41                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      28: lload_1
      29: aload         5
      31: invokestatic  #66                 // Method java/time/Duration.of:(JLjava/time/temporal/TemporalUnit;)Ljava/time/Duration;
      34: astore        8
      36: lload_3
      37: aload         5
      39: invokestatic  #66                 // Method java/time/Duration.of:(JLjava/time/temporal/TemporalUnit;)Ljava/time/Duration;
      42: astore        9
      44: aload_0
      45: getfield      #16                 // Field maxDuration:Ljava/time/Duration;
      48: ifnull        67
      51: aload         8
      53: invokevirtual #48                 // Method java/time/Duration.toNanos:()J
      56: aload_0
      57: getfield      #16                 // Field maxDuration:Ljava/time/Duration;
      60: invokevirtual #48                 // Method java/time/Duration.toNanos:()J
      63: lcmp
      64: ifge          71
      67: iconst_1
      68: goto          72
      71: iconst_0
      72: ldc           #67                 // String delay must be less than the maxDuration
      74: iconst_0
      75: anewarray     #40                 // class java/lang/Object
      78: invokestatic  #68                 // Method net/jodah/failsafe/internal/util/Assert.state:(ZLjava/lang/String;[Ljava/lang/Object;)V
      81: aload         8
      83: invokevirtual #48                 // Method java/time/Duration.toNanos:()J
      86: aload         9
      88: invokevirtual #48                 // Method java/time/Duration.toNanos:()J
      91: lcmp
      92: ifge          99
      95: iconst_1
      96: goto          100
      99: iconst_0
     100: ldc           #69                 // String delay must be less than the maxDelay
     102: iconst_0
     103: anewarray     #40                 // class java/lang/Object
     106: invokestatic  #41                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
     109: dload         6
     111: dconst_1
     112: dcmpl
     113: ifle          120
     116: iconst_1
     117: goto          121
     120: iconst_0
     121: ldc           #70                 // String delayFactor must be greater than 1
     123: iconst_0
     124: anewarray     #40                 // class java/lang/Object
     127: invokestatic  #41                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
     130: aload_0
     131: getfield      #3                  // Field delay:Ljava/time/Duration;
     134: ifnull        150
     137: aload_0
     138: getfield      #3                  // Field delay:Ljava/time/Duration;
     141: getstatic     #2                  // Field java/time/Duration.ZERO:Ljava/time/Duration;
     144: invokevirtual #71                 // Method java/time/Duration.equals:(Ljava/lang/Object;)Z
     147: ifeq          154
     150: iconst_1
     151: goto          155
     154: iconst_0
     155: ldc           #72                 // String Delays have already been set
     157: iconst_0
     158: anewarray     #40                 // class java/lang/Object
     161: invokestatic  #68                 // Method net/jodah/failsafe/internal/util/Assert.state:(ZLjava/lang/String;[Ljava/lang/Object;)V
     164: aload_0
     165: getfield      #9                  // Field delayMin:Ljava/time/Duration;
     168: ifnonnull     175
     171: iconst_1
     172: goto          176
     175: iconst_0
     176: ldc           #73                 // String Random delays have already been set
     178: iconst_0
     179: anewarray     #40                 // class java/lang/Object
     182: invokestatic  #68                 // Method net/jodah/failsafe/internal/util/Assert.state:(ZLjava/lang/String;[Ljava/lang/Object;)V
     185: aload_0
     186: aload         8
     188: putfield      #3                  // Field delay:Ljava/time/Duration;
     191: aload_0
     192: aload         9
     194: putfield      #12                 // Field maxDelay:Ljava/time/Duration;
     197: aload_0
     198: dload         6
     200: putfield      #11                 // Field delayFactor:D
     203: aload_0
     204: areturn

  public net.jodah.failsafe.RetryPolicy<R> withDelay(java.time.Duration);
    Code:
       0: aload_1
       1: ldc           #74                 // String delay
       3: invokestatic  #30                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_1
       8: invokevirtual #48                 // Method java/time/Duration.toNanos:()J
      11: lconst_0
      12: lcmp
      13: ifle          20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: ldc           #75                 // String delay must be greater than 0
      23: iconst_0
      24: anewarray     #40                 // class java/lang/Object
      27: invokestatic  #41                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      30: aload_0
      31: getfield      #16                 // Field maxDuration:Ljava/time/Duration;
      34: ifnull        52
      37: aload_1
      38: invokevirtual #48                 // Method java/time/Duration.toNanos:()J
      41: aload_0
      42: getfield      #16                 // Field maxDuration:Ljava/time/Duration;
      45: invokevirtual #48                 // Method java/time/Duration.toNanos:()J
      48: lcmp
      49: ifge          56
      52: iconst_1
      53: goto          57
      56: iconst_0
      57: ldc           #67                 // String delay must be less than the maxDuration
      59: iconst_0
      60: anewarray     #40                 // class java/lang/Object
      63: invokestatic  #68                 // Method net/jodah/failsafe/internal/util/Assert.state:(ZLjava/lang/String;[Ljava/lang/Object;)V
      66: aload_0
      67: getfield      #9                  // Field delayMin:Ljava/time/Duration;
      70: ifnonnull     77
      73: iconst_1
      74: goto          78
      77: iconst_0
      78: ldc           #73                 // String Random delays have already been set
      80: iconst_0
      81: anewarray     #40                 // class java/lang/Object
      84: invokestatic  #68                 // Method net/jodah/failsafe/internal/util/Assert.state:(ZLjava/lang/String;[Ljava/lang/Object;)V
      87: aload_0
      88: getfield      #12                 // Field maxDelay:Ljava/time/Duration;
      91: ifnonnull     98
      94: iconst_1
      95: goto          99
      98: iconst_0
      99: ldc           #76                 // String Backoff delays have already been set
     101: iconst_0
     102: anewarray     #40                 // class java/lang/Object
     105: invokestatic  #68                 // Method net/jodah/failsafe/internal/util/Assert.state:(ZLjava/lang/String;[Ljava/lang/Object;)V
     108: aload_0
     109: aload_1
     110: putfield      #3                  // Field delay:Ljava/time/Duration;
     113: aload_0
     114: areturn

  public net.jodah.failsafe.RetryPolicy<R> withDelay(long, long, java.time.temporal.ChronoUnit);
    Code:
       0: aload         5
       2: ldc           #64                 // String chronoUnit
       4: invokestatic  #30                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: pop
       8: lload_1
       9: lconst_0
      10: lcmp
      11: ifle          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ldc           #77                 // String delayMin must be greater than 0
      21: iconst_0
      22: anewarray     #40                 // class java/lang/Object
      25: invokestatic  #41                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      28: lload_3
      29: lconst_0
      30: lcmp
      31: ifle          38
      34: iconst_1
      35: goto          39
      38: iconst_0
      39: ldc           #78                 // String delayMax must be greater than 0
      41: iconst_0
      42: anewarray     #40                 // class java/lang/Object
      45: invokestatic  #41                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      48: lload_1
      49: aload         5
      51: invokestatic  #66                 // Method java/time/Duration.of:(JLjava/time/temporal/TemporalUnit;)Ljava/time/Duration;
      54: astore        6
      56: lload_3
      57: aload         5
      59: invokestatic  #66                 // Method java/time/Duration.of:(JLjava/time/temporal/TemporalUnit;)Ljava/time/Duration;
      62: astore        7
      64: aload         6
      66: invokevirtual #48                 // Method java/time/Duration.toNanos:()J
      69: aload         7
      71: invokevirtual #48                 // Method java/time/Duration.toNanos:()J
      74: lcmp
      75: ifge          82
      78: iconst_1
      79: goto          83
      82: iconst_0
      83: ldc           #79                 // String delayMin must be less than delayMax
      85: iconst_0
      86: anewarray     #40                 // class java/lang/Object
      89: invokestatic  #41                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      92: aload_0
      93: getfield      #16                 // Field maxDuration:Ljava/time/Duration;
      96: ifnull        115
      99: aload         7
     101: invokevirtual #48                 // Method java/time/Duration.toNanos:()J
     104: aload_0
     105: getfield      #16                 // Field maxDuration:Ljava/time/Duration;
     108: invokevirtual #48                 // Method java/time/Duration.toNanos:()J
     111: lcmp
     112: ifge          119
     115: iconst_1
     116: goto          120
     119: iconst_0
     120: ldc           #80                 // String delayMax must be less than the maxDuration
     122: iconst_0
     123: anewarray     #40                 // class java/lang/Object
     126: invokestatic  #68                 // Method net/jodah/failsafe/internal/util/Assert.state:(ZLjava/lang/String;[Ljava/lang/Object;)V
     129: aload_0
     130: getfield      #3                  // Field delay:Ljava/time/Duration;
     133: ifnull        149
     136: aload_0
     137: getfield      #3                  // Field delay:Ljava/time/Duration;
     140: getstatic     #2                  // Field java/time/Duration.ZERO:Ljava/time/Duration;
     143: invokevirtual #71                 // Method java/time/Duration.equals:(Ljava/lang/Object;)Z
     146: ifeq          153
     149: iconst_1
     150: goto          154
     153: iconst_0
     154: ldc           #72                 // String Delays have already been set
     156: iconst_0
     157: anewarray     #40                 // class java/lang/Object
     160: invokestatic  #68                 // Method net/jodah/failsafe/internal/util/Assert.state:(ZLjava/lang/String;[Ljava/lang/Object;)V
     163: aload_0
     164: getfield      #12                 // Field maxDelay:Ljava/time/Duration;
     167: ifnonnull     174
     170: iconst_1
     171: goto          175
     174: iconst_0
     175: ldc           #76                 // String Backoff delays have already been set
     177: iconst_0
     178: anewarray     #40                 // class java/lang/Object
     181: invokestatic  #68                 // Method net/jodah/failsafe/internal/util/Assert.state:(ZLjava/lang/String;[Ljava/lang/Object;)V
     184: aload_0
     185: aload         6
     187: putfield      #9                  // Field delayMin:Ljava/time/Duration;
     190: aload_0
     191: aload         7
     193: putfield      #10                 // Field delayMax:Ljava/time/Duration;
     196: aload_0
     197: areturn

  public net.jodah.failsafe.RetryPolicy<R> withJitter(double);
    Code:
       0: dload_1
       1: dconst_0
       2: dcmpl
       3: iflt          16
       6: dload_1
       7: dconst_1
       8: dcmpg
       9: ifgt          16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: ldc           #81                 // String jitterFactor must be >= 0 and <= 1
      19: iconst_0
      20: anewarray     #40                 // class java/lang/Object
      23: invokestatic  #41                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      26: aload_0
      27: getfield      #17                 // Field jitter:Ljava/time/Duration;
      30: ifnonnull     37
      33: iconst_1
      34: goto          38
      37: iconst_0
      38: ldc           #82                 // String withJitter(Duration) has already been called
      40: iconst_0
      41: anewarray     #40                 // class java/lang/Object
      44: invokestatic  #68                 // Method net/jodah/failsafe/internal/util/Assert.state:(ZLjava/lang/String;[Ljava/lang/Object;)V
      47: aload_0
      48: dload_1
      49: putfield      #18                 // Field jitterFactor:D
      52: aload_0
      53: areturn

  public net.jodah.failsafe.RetryPolicy<R> withJitter(java.time.Duration);
    Code:
       0: aload_1
       1: ldc           #83                 // String jitter
       3: invokestatic  #30                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_1
       8: invokevirtual #48                 // Method java/time/Duration.toNanos:()J
      11: lconst_0
      12: lcmp
      13: ifle          20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: ldc           #84                 // String jitter must be > 0
      23: iconst_0
      24: anewarray     #40                 // class java/lang/Object
      27: invokestatic  #41                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      30: aload_0
      31: getfield      #18                 // Field jitterFactor:D
      34: dconst_0
      35: dcmpl
      36: ifne          43
      39: iconst_1
      40: goto          44
      43: iconst_0
      44: ldc           #85                 // String withJitter(double) has already been called
      46: iconst_0
      47: anewarray     #40                 // class java/lang/Object
      50: invokestatic  #68                 // Method net/jodah/failsafe/internal/util/Assert.state:(ZLjava/lang/String;[Ljava/lang/Object;)V
      53: aload_1
      54: invokevirtual #48                 // Method java/time/Duration.toNanos:()J
      57: aload_0
      58: getfield      #9                  // Field delayMin:Ljava/time/Duration;
      61: ifnull        74
      64: aload_0
      65: getfield      #9                  // Field delayMin:Ljava/time/Duration;
      68: invokevirtual #48                 // Method java/time/Duration.toNanos:()J
      71: goto          81
      74: aload_0
      75: getfield      #3                  // Field delay:Ljava/time/Duration;
      78: invokevirtual #48                 // Method java/time/Duration.toNanos:()J
      81: lcmp
      82: ifgt          89
      85: iconst_1
      86: goto          90
      89: iconst_0
      90: ldc           #86                 // String jitter must be less than the minimum configured delay
      92: iconst_0
      93: anewarray     #40                 // class java/lang/Object
      96: invokestatic  #68                 // Method net/jodah/failsafe/internal/util/Assert.state:(ZLjava/lang/String;[Ljava/lang/Object;)V
      99: aload_0
     100: aload_1
     101: putfield      #17                 // Field jitter:Ljava/time/Duration;
     104: aload_0
     105: areturn

  public net.jodah.failsafe.RetryPolicy<R> withMaxAttempts(int);
    Code:
       0: iload_1
       1: ifeq          8
       4: iconst_1
       5: goto          9
       8: iconst_0
       9: ldc           #87                 // String maxAttempts cannot be 0
      11: iconst_0
      12: anewarray     #40                 // class java/lang/Object
      15: invokestatic  #41                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      18: iload_1
      19: iconst_m1
      20: if_icmplt     27
      23: iconst_1
      24: goto          28
      27: iconst_0
      28: ldc           #88                 // String maxAttempts cannot be less than -1
      30: iconst_0
      31: anewarray     #40                 // class java/lang/Object
      34: invokestatic  #41                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      37: aload_0
      38: iload_1
      39: iconst_m1
      40: if_icmpne     47
      43: iconst_m1
      44: goto          50
      47: iload_1
      48: iconst_1
      49: isub
      50: putfield      #5                  // Field maxRetries:I
      53: aload_0
      54: areturn

  public net.jodah.failsafe.RetryPolicy<R> withMaxDuration(java.time.Duration);
    Code:
       0: aload_1
       1: ldc           #89                 // String maxDuration
       3: invokestatic  #30                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_1
       8: invokevirtual #48                 // Method java/time/Duration.toNanos:()J
      11: aload_0
      12: getfield      #3                  // Field delay:Ljava/time/Duration;
      15: invokevirtual #48                 // Method java/time/Duration.toNanos:()J
      18: lcmp
      19: ifle          26
      22: iconst_1
      23: goto          27
      26: iconst_0
      27: ldc           #90                 // String maxDuration must be greater than the delay
      29: iconst_0
      30: anewarray     #40                 // class java/lang/Object
      33: invokestatic  #68                 // Method net/jodah/failsafe/internal/util/Assert.state:(ZLjava/lang/String;[Ljava/lang/Object;)V
      36: aload_0
      37: aload_1
      38: putfield      #16                 // Field maxDuration:Ljava/time/Duration;
      41: aload_0
      42: areturn

  public net.jodah.failsafe.RetryPolicy<R> withMaxRetries(int);
    Code:
       0: iload_1
       1: iconst_m1
       2: if_icmplt     9
       5: iconst_1
       6: goto          10
       9: iconst_0
      10: ldc           #91                 // String maxRetries must be greater than or equal to -1
      12: iconst_0
      13: anewarray     #40                 // class java/lang/Object
      16: invokestatic  #41                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      19: aload_0
      20: iload_1
      21: putfield      #5                  // Field maxRetries:I
      24: aload_0
      25: areturn

  public net.jodah.failsafe.PolicyExecutor toExecutor(net.jodah.failsafe.AbstractExecution);
    Code:
       0: new           #92                 // class net/jodah/failsafe/RetryPolicyExecutor
       3: dup
       4: aload_0
       5: aload_1
       6: aload_0
       7: getfield      #22                 // Field abortListener:Lnet/jodah/failsafe/internal/EventListener;
      10: aload_0
      11: getfield      #23                 // Field failedAttemptListener:Lnet/jodah/failsafe/internal/EventListener;
      14: aload_0
      15: getfield      #24                 // Field retriesExceededListener:Lnet/jodah/failsafe/internal/EventListener;
      18: aload_0
      19: getfield      #25                 // Field retryListener:Lnet/jodah/failsafe/internal/EventListener;
      22: aload_0
      23: getfield      #26                 // Field retryScheduledListener:Lnet/jodah/failsafe/internal/EventListener;
      26: invokespecial #93                 // Method net/jodah/failsafe/RetryPolicyExecutor."<init>":(Lnet/jodah/failsafe/RetryPolicy;Lnet/jodah/failsafe/AbstractExecution;Lnet/jodah/failsafe/internal/EventListener;Lnet/jodah/failsafe/internal/EventListener;Lnet/jodah/failsafe/internal/EventListener;Lnet/jodah/failsafe/internal/EventListener;Lnet/jodah/failsafe/internal/EventListener;)V
      29: areturn
}
