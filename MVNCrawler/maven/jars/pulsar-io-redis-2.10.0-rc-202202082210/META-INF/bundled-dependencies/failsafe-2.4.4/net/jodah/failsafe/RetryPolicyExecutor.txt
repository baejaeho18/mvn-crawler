Compiled from "RetryPolicyExecutor.java"
class net.jodah.failsafe.RetryPolicyExecutor<R> extends net.jodah.failsafe.PolicyExecutor<R, net.jodah.failsafe.RetryPolicy<R>> {
  private volatile int failedAttempts;

  private volatile boolean retriesExceeded;

  private volatile long delayNanos;

  private final net.jodah.failsafe.internal.EventListener abortListener;

  private final net.jodah.failsafe.internal.EventListener failedAttemptListener;

  private final net.jodah.failsafe.internal.EventListener retriesExceededListener;

  private final net.jodah.failsafe.internal.EventListener retryListener;

  private final net.jodah.failsafe.internal.EventListener retryScheduledListener;

  net.jodah.failsafe.RetryPolicyExecutor(net.jodah.failsafe.RetryPolicy<R>, net.jodah.failsafe.AbstractExecution<R>, net.jodah.failsafe.internal.EventListener, net.jodah.failsafe.internal.EventListener, net.jodah.failsafe.internal.EventListener, net.jodah.failsafe.internal.EventListener, net.jodah.failsafe.internal.EventListener);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #4                  // Method net/jodah/failsafe/PolicyExecutor."<init>":(Lnet/jodah/failsafe/Policy;Lnet/jodah/failsafe/AbstractExecution;)V
       6: aload_0
       7: aload_3
       8: putfield      #5                  // Field abortListener:Lnet/jodah/failsafe/internal/EventListener;
      11: aload_0
      12: aload         4
      14: putfield      #6                  // Field failedAttemptListener:Lnet/jodah/failsafe/internal/EventListener;
      17: aload_0
      18: aload         5
      20: putfield      #7                  // Field retriesExceededListener:Lnet/jodah/failsafe/internal/EventListener;
      23: aload_0
      24: aload         6
      26: putfield      #3                  // Field retryListener:Lnet/jodah/failsafe/internal/EventListener;
      29: aload_0
      30: aload         7
      32: putfield      #1                  // Field retryScheduledListener:Lnet/jodah/failsafe/internal/EventListener;
      35: return

  protected java.util.function.Supplier<net.jodah.failsafe.ExecutionResult> supply(java.util.function.Supplier<net.jodah.failsafe.ExecutionResult>, net.jodah.failsafe.util.concurrent.Scheduler);
    Code:
       0: aload_0
       1: aload_1
       2: invokedynamic #8,  0              // InvokeDynamic #0:get:(Lnet/jodah/failsafe/RetryPolicyExecutor;Ljava/util/function/Supplier;)Ljava/util/function/Supplier;
       7: areturn

  protected java.util.function.Supplier<java.util.concurrent.CompletableFuture<net.jodah.failsafe.ExecutionResult>> supplyAsync(java.util.function.Supplier<java.util.concurrent.CompletableFuture<net.jodah.failsafe.ExecutionResult>>, net.jodah.failsafe.util.concurrent.Scheduler, net.jodah.failsafe.FailsafeFuture<R>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokedynamic #9,  0              // InvokeDynamic #1:get:(Lnet/jodah/failsafe/RetryPolicyExecutor;Ljava/util/function/Supplier;Lnet/jodah/failsafe/util/concurrent/Scheduler;Lnet/jodah/failsafe/FailsafeFuture;)Ljava/util/function/Supplier;
       9: areturn

  protected net.jodah.failsafe.ExecutionResult onFailure(net.jodah.failsafe.ExecutionResult);
    Code:
       0: aload_0
       1: getfield      #6                  // Field failedAttemptListener:Lnet/jodah/failsafe/internal/EventListener;
       4: ifnull        21
       7: aload_0
       8: getfield      #6                  // Field failedAttemptListener:Lnet/jodah/failsafe/internal/EventListener;
      11: aload_1
      12: aload_0
      13: getfield      #10                 // Field execution:Lnet/jodah/failsafe/AbstractExecution;
      16: invokeinterface #11,  3           // InterfaceMethod net/jodah/failsafe/internal/EventListener.handle:(Lnet/jodah/failsafe/ExecutionResult;Lnet/jodah/failsafe/ExecutionContext;)V
      21: aload_0
      22: dup
      23: getfield      #12                 // Field failedAttempts:I
      26: iconst_1
      27: iadd
      28: putfield      #12                 // Field failedAttempts:I
      31: aload_0
      32: getfield      #13                 // Field delayNanos:J
      35: lstore_2
      36: aload_0
      37: getfield      #14                 // Field policy:Lnet/jodah/failsafe/Policy;
      40: checkcast     #15                 // class net/jodah/failsafe/RetryPolicy
      43: aload_0
      44: getfield      #10                 // Field execution:Lnet/jodah/failsafe/AbstractExecution;
      47: invokevirtual #16                 // Method net/jodah/failsafe/RetryPolicy.computeDelay:(Lnet/jodah/failsafe/ExecutionContext;)Ljava/time/Duration;
      50: astore        4
      52: aload         4
      54: ifnull        66
      57: aload         4
      59: invokevirtual #17                 // Method java/time/Duration.toNanos:()J
      62: lstore_2
      63: goto          83
      66: aload_0
      67: lload_2
      68: invokespecial #18                 // Method getFixedOrRandomDelayNanos:(J)J
      71: lstore_2
      72: aload_0
      73: lload_2
      74: invokespecial #19                 // Method adjustForBackoff:(J)J
      77: lstore_2
      78: aload_0
      79: lload_2
      80: putfield      #13                 // Field delayNanos:J
      83: aload_0
      84: lload_2
      85: invokespecial #20                 // Method adjustForJitter:(J)J
      88: lstore_2
      89: aload_0
      90: getfield      #10                 // Field execution:Lnet/jodah/failsafe/AbstractExecution;
      93: invokevirtual #21                 // Method net/jodah/failsafe/AbstractExecution.getElapsedTime:()Ljava/time/Duration;
      96: invokevirtual #17                 // Method java/time/Duration.toNanos:()J
      99: lstore        5
     101: aload_0
     102: lload_2
     103: lload         5
     105: invokespecial #22                 // Method adjustForMaxDuration:(JJ)J
     108: lstore_2
     109: aload_0
     110: getfield      #14                 // Field policy:Lnet/jodah/failsafe/Policy;
     113: checkcast     #15                 // class net/jodah/failsafe/RetryPolicy
     116: invokevirtual #23                 // Method net/jodah/failsafe/RetryPolicy.getMaxRetries:()I
     119: iconst_m1
     120: if_icmpeq     144
     123: aload_0
     124: getfield      #12                 // Field failedAttempts:I
     127: aload_0
     128: getfield      #14                 // Field policy:Lnet/jodah/failsafe/Policy;
     131: checkcast     #15                 // class net/jodah/failsafe/RetryPolicy
     134: invokevirtual #23                 // Method net/jodah/failsafe/RetryPolicy.getMaxRetries:()I
     137: if_icmple     144
     140: iconst_1
     141: goto          145
     144: iconst_0
     145: istore        7
     147: aload_0
     148: getfield      #14                 // Field policy:Lnet/jodah/failsafe/Policy;
     151: checkcast     #15                 // class net/jodah/failsafe/RetryPolicy
     154: invokevirtual #24                 // Method net/jodah/failsafe/RetryPolicy.getMaxDuration:()Ljava/time/Duration;
     157: ifnull        183
     160: lload         5
     162: aload_0
     163: getfield      #14                 // Field policy:Lnet/jodah/failsafe/Policy;
     166: checkcast     #15                 // class net/jodah/failsafe/RetryPolicy
     169: invokevirtual #24                 // Method net/jodah/failsafe/RetryPolicy.getMaxDuration:()Ljava/time/Duration;
     172: invokevirtual #17                 // Method java/time/Duration.toNanos:()J
     175: lcmp
     176: ifle          183
     179: iconst_1
     180: goto          184
     183: iconst_0
     184: istore        8
     186: aload_0
     187: iload         7
     189: ifne          197
     192: iload         8
     194: ifeq          201
     197: iconst_1
     198: goto          202
     201: iconst_0
     202: putfield      #2                  // Field retriesExceeded:Z
     205: aload_0
     206: getfield      #14                 // Field policy:Lnet/jodah/failsafe/Policy;
     209: checkcast     #15                 // class net/jodah/failsafe/RetryPolicy
     212: aload_1
     213: invokevirtual #25                 // Method net/jodah/failsafe/ExecutionResult.getResult:()Ljava/lang/Object;
     216: aload_1
     217: invokevirtual #26                 // Method net/jodah/failsafe/ExecutionResult.getFailure:()Ljava/lang/Throwable;
     220: invokevirtual #27                 // Method net/jodah/failsafe/RetryPolicy.isAbortable:(Ljava/lang/Object;Ljava/lang/Throwable;)Z
     223: istore        9
     225: aload_1
     226: invokevirtual #28                 // Method net/jodah/failsafe/ExecutionResult.isSuccess:()Z
     229: ifne          261
     232: iload         9
     234: ifne          261
     237: aload_0
     238: getfield      #2                  // Field retriesExceeded:Z
     241: ifne          261
     244: aload_0
     245: getfield      #14                 // Field policy:Lnet/jodah/failsafe/Policy;
     248: checkcast     #15                 // class net/jodah/failsafe/RetryPolicy
     251: invokevirtual #29                 // Method net/jodah/failsafe/RetryPolicy.allowsRetries:()Z
     254: ifeq          261
     257: iconst_1
     258: goto          262
     261: iconst_0
     262: istore        10
     264: iload         9
     266: ifne          274
     269: iload         10
     271: ifne          278
     274: iconst_1
     275: goto          279
     278: iconst_0
     279: istore        11
     281: iload         11
     283: ifeq          302
     286: aload_1
     287: invokevirtual #28                 // Method net/jodah/failsafe/ExecutionResult.isSuccess:()Z
     290: ifeq          302
     293: iload         9
     295: ifne          302
     298: iconst_1
     299: goto          303
     302: iconst_0
     303: istore        12
     305: aload_0
     306: getfield      #5                  // Field abortListener:Lnet/jodah/failsafe/internal/EventListener;
     309: ifnull        334
     312: iload         9
     314: ifeq          334
     317: aload_0
     318: getfield      #5                  // Field abortListener:Lnet/jodah/failsafe/internal/EventListener;
     321: aload_1
     322: aload_0
     323: getfield      #10                 // Field execution:Lnet/jodah/failsafe/AbstractExecution;
     326: invokeinterface #11,  3           // InterfaceMethod net/jodah/failsafe/internal/EventListener.handle:(Lnet/jodah/failsafe/ExecutionResult;Lnet/jodah/failsafe/ExecutionContext;)V
     331: goto          367
     334: aload_0
     335: getfield      #7                  // Field retriesExceededListener:Lnet/jodah/failsafe/internal/EventListener;
     338: ifnull        367
     341: iload         12
     343: ifne          367
     346: aload_0
     347: getfield      #2                  // Field retriesExceeded:Z
     350: ifeq          367
     353: aload_0
     354: getfield      #7                  // Field retriesExceededListener:Lnet/jodah/failsafe/internal/EventListener;
     357: aload_1
     358: aload_0
     359: getfield      #10                 // Field execution:Lnet/jodah/failsafe/AbstractExecution;
     362: invokeinterface #11,  3           // InterfaceMethod net/jodah/failsafe/internal/EventListener.handle:(Lnet/jodah/failsafe/ExecutionResult;Lnet/jodah/failsafe/ExecutionContext;)V
     367: aload_1
     368: lload_2
     369: iload         11
     371: iload         12
     373: invokevirtual #30                 // Method net/jodah/failsafe/ExecutionResult.with:(JZZ)Lnet/jodah/failsafe/ExecutionResult;
     376: areturn

  protected java.util.concurrent.CompletableFuture<net.jodah.failsafe.ExecutionResult> onFailureAsync(net.jodah.failsafe.ExecutionResult, net.jodah.failsafe.util.concurrent.Scheduler, net.jodah.failsafe.FailsafeFuture<R>);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #31                 // Method net/jodah/failsafe/ExecutionResult.withNotComplete:()Lnet/jodah/failsafe/ExecutionResult;
       5: aload_2
       6: aload_3
       7: invokespecial #32                 // Method net/jodah/failsafe/PolicyExecutor.onFailureAsync:(Lnet/jodah/failsafe/ExecutionResult;Lnet/jodah/failsafe/util/concurrent/Scheduler;Lnet/jodah/failsafe/FailsafeFuture;)Ljava/util/concurrent/CompletableFuture;
      10: areturn

  private long getFixedOrRandomDelayNanos(long);
    Code:
       0: aload_0
       1: getfield      #14                 // Field policy:Lnet/jodah/failsafe/Policy;
       4: checkcast     #15                 // class net/jodah/failsafe/RetryPolicy
       7: invokevirtual #33                 // Method net/jodah/failsafe/RetryPolicy.getDelay:()Ljava/time/Duration;
      10: astore_3
      11: aload_0
      12: getfield      #14                 // Field policy:Lnet/jodah/failsafe/Policy;
      15: checkcast     #15                 // class net/jodah/failsafe/RetryPolicy
      18: invokevirtual #34                 // Method net/jodah/failsafe/RetryPolicy.getDelayMin:()Ljava/time/Duration;
      21: astore        4
      23: aload_0
      24: getfield      #14                 // Field policy:Lnet/jodah/failsafe/Policy;
      27: checkcast     #15                 // class net/jodah/failsafe/RetryPolicy
      30: invokevirtual #35                 // Method net/jodah/failsafe/RetryPolicy.getDelayMax:()Ljava/time/Duration;
      33: astore        5
      35: lload_1
      36: lconst_0
      37: lcmp
      38: ifne          63
      41: aload_3
      42: ifnull        63
      45: aload_3
      46: getstatic     #36                 // Field java/time/Duration.ZERO:Ljava/time/Duration;
      49: invokevirtual #37                 // Method java/time/Duration.equals:(Ljava/lang/Object;)Z
      52: ifne          63
      55: aload_3
      56: invokevirtual #17                 // Method java/time/Duration.toNanos:()J
      59: lstore_1
      60: goto          90
      63: aload         4
      65: ifnull        90
      68: aload         5
      70: ifnull        90
      73: aload         4
      75: invokevirtual #17                 // Method java/time/Duration.toNanos:()J
      78: aload         5
      80: invokevirtual #17                 // Method java/time/Duration.toNanos:()J
      83: invokestatic  #38                 // Method java/lang/Math.random:()D
      86: invokestatic  #39                 // Method net/jodah/failsafe/internal/util/RandomDelay.randomDelayInRange:(JJD)J
      89: lstore_1
      90: lload_1
      91: lreturn

  private long adjustForBackoff(long);
    Code:
       0: aload_0
       1: getfield      #10                 // Field execution:Lnet/jodah/failsafe/AbstractExecution;
       4: invokevirtual #40                 // Method net/jodah/failsafe/AbstractExecution.getAttemptCount:()I
       7: iconst_1
       8: if_icmpeq     56
      11: aload_0
      12: getfield      #14                 // Field policy:Lnet/jodah/failsafe/Policy;
      15: checkcast     #15                 // class net/jodah/failsafe/RetryPolicy
      18: invokevirtual #41                 // Method net/jodah/failsafe/RetryPolicy.getMaxDelay:()Ljava/time/Duration;
      21: ifnull        56
      24: lload_1
      25: l2d
      26: aload_0
      27: getfield      #14                 // Field policy:Lnet/jodah/failsafe/Policy;
      30: checkcast     #15                 // class net/jodah/failsafe/RetryPolicy
      33: invokevirtual #42                 // Method net/jodah/failsafe/RetryPolicy.getDelayFactor:()D
      36: dmul
      37: aload_0
      38: getfield      #14                 // Field policy:Lnet/jodah/failsafe/Policy;
      41: checkcast     #15                 // class net/jodah/failsafe/RetryPolicy
      44: invokevirtual #41                 // Method net/jodah/failsafe/RetryPolicy.getMaxDelay:()Ljava/time/Duration;
      47: invokevirtual #17                 // Method java/time/Duration.toNanos:()J
      50: l2d
      51: invokestatic  #43                 // Method java/lang/Math.min:(DD)D
      54: d2l
      55: lstore_1
      56: lload_1
      57: lreturn

  private long adjustForJitter(long);
    Code:
       0: aload_0
       1: getfield      #14                 // Field policy:Lnet/jodah/failsafe/Policy;
       4: checkcast     #15                 // class net/jodah/failsafe/RetryPolicy
       7: invokevirtual #44                 // Method net/jodah/failsafe/RetryPolicy.getJitter:()Ljava/time/Duration;
      10: ifnull        37
      13: lload_1
      14: aload_0
      15: getfield      #14                 // Field policy:Lnet/jodah/failsafe/Policy;
      18: checkcast     #15                 // class net/jodah/failsafe/RetryPolicy
      21: invokevirtual #44                 // Method net/jodah/failsafe/RetryPolicy.getJitter:()Ljava/time/Duration;
      24: invokevirtual #17                 // Method java/time/Duration.toNanos:()J
      27: invokestatic  #38                 // Method java/lang/Math.random:()D
      30: invokestatic  #45                 // Method net/jodah/failsafe/internal/util/RandomDelay.randomDelay:(JJD)J
      33: lstore_1
      34: goto          70
      37: aload_0
      38: getfield      #14                 // Field policy:Lnet/jodah/failsafe/Policy;
      41: checkcast     #15                 // class net/jodah/failsafe/RetryPolicy
      44: invokevirtual #46                 // Method net/jodah/failsafe/RetryPolicy.getJitterFactor:()D
      47: dconst_0
      48: dcmpl
      49: ifle          70
      52: lload_1
      53: aload_0
      54: getfield      #14                 // Field policy:Lnet/jodah/failsafe/Policy;
      57: checkcast     #15                 // class net/jodah/failsafe/RetryPolicy
      60: invokevirtual #46                 // Method net/jodah/failsafe/RetryPolicy.getJitterFactor:()D
      63: invokestatic  #38                 // Method java/lang/Math.random:()D
      66: invokestatic  #47                 // Method net/jodah/failsafe/internal/util/RandomDelay.randomDelay:(JDD)J
      69: lstore_1
      70: lload_1
      71: lreturn

  private long adjustForMaxDuration(long, long);
    Code:
       0: aload_0
       1: getfield      #14                 // Field policy:Lnet/jodah/failsafe/Policy;
       4: checkcast     #15                 // class net/jodah/failsafe/RetryPolicy
       7: invokevirtual #24                 // Method net/jodah/failsafe/RetryPolicy.getMaxDuration:()Ljava/time/Duration;
      10: ifnull        56
      13: aload_0
      14: getfield      #14                 // Field policy:Lnet/jodah/failsafe/Policy;
      17: checkcast     #15                 // class net/jodah/failsafe/RetryPolicy
      20: invokevirtual #24                 // Method net/jodah/failsafe/RetryPolicy.getMaxDuration:()Ljava/time/Duration;
      23: invokevirtual #17                 // Method java/time/Duration.toNanos:()J
      26: lload_3
      27: lsub
      28: lstore        5
      30: lload_1
      31: lload         5
      33: lconst_0
      34: lcmp
      35: ifge          42
      38: lconst_0
      39: goto          44
      42: lload         5
      44: invokestatic  #48                 // Method java/lang/Math.min:(JJ)J
      47: lstore_1
      48: lload_1
      49: lconst_0
      50: lcmp
      51: ifge          56
      54: lconst_0
      55: lstore_1
      56: lload_1
      57: lreturn

  private java.util.concurrent.CompletableFuture lambda$supplyAsync$1(java.util.function.Supplier, net.jodah.failsafe.util.concurrent.Scheduler, net.jodah.failsafe.FailsafeFuture);
    Code:
       0: new           #49                 // class java/util/concurrent/CompletableFuture
       3: dup
       4: invokespecial #50                 // Method java/util/concurrent/CompletableFuture."<init>":()V
       7: astore        4
       9: new           #51                 // class net/jodah/failsafe/RetryPolicyExecutor$1
      12: dup
      13: aload_0
      14: aload_1
      15: aload         4
      17: aload_2
      18: aload_3
      19: invokespecial #52                 // Method net/jodah/failsafe/RetryPolicyExecutor$1."<init>":(Lnet/jodah/failsafe/RetryPolicyExecutor;Ljava/util/function/Supplier;Ljava/util/concurrent/CompletableFuture;Lnet/jodah/failsafe/util/concurrent/Scheduler;Lnet/jodah/failsafe/FailsafeFuture;)V
      22: astore        5
      24: aload         5
      26: invokeinterface #53,  1           // InterfaceMethod java/util/concurrent/Callable.call:()Ljava/lang/Object;
      31: pop
      32: goto          45
      35: astore        6
      37: aload         4
      39: aload         6
      41: invokevirtual #55                 // Method java/util/concurrent/CompletableFuture.completeExceptionally:(Ljava/lang/Throwable;)Z
      44: pop
      45: aload         4
      47: areturn
    Exception table:
       from    to  target type
          24    32    35   Class java/lang/Throwable

  private net.jodah.failsafe.ExecutionResult lambda$supply$0(java.util.function.Supplier);
    Code:
       0: aload_1
       1: invokeinterface #56,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
       6: checkcast     #57                 // class net/jodah/failsafe/ExecutionResult
       9: astore_2
      10: aload_0
      11: getfield      #2                  // Field retriesExceeded:Z
      14: ifne          24
      17: aload_0
      18: invokevirtual #58                 // Method executionCancelled:()Z
      21: ifeq          26
      24: aload_2
      25: areturn
      26: aload_0
      27: aload_2
      28: invokevirtual #59                 // Method postExecute:(Lnet/jodah/failsafe/ExecutionResult;)Lnet/jodah/failsafe/ExecutionResult;
      31: astore_2
      32: aload_2
      33: invokevirtual #60                 // Method net/jodah/failsafe/ExecutionResult.isComplete:()Z
      36: ifne          46
      39: aload_0
      40: invokevirtual #58                 // Method executionCancelled:()Z
      43: ifeq          48
      46: aload_2
      47: areturn
      48: aload_0
      49: getfield      #1                  // Field retryScheduledListener:Lnet/jodah/failsafe/internal/EventListener;
      52: ifnull        69
      55: aload_0
      56: getfield      #1                  // Field retryScheduledListener:Lnet/jodah/failsafe/internal/EventListener;
      59: aload_2
      60: aload_0
      61: getfield      #10                 // Field execution:Lnet/jodah/failsafe/AbstractExecution;
      64: invokeinterface #11,  3           // InterfaceMethod net/jodah/failsafe/internal/EventListener.handle:(Lnet/jodah/failsafe/ExecutionResult;Lnet/jodah/failsafe/ExecutionContext;)V
      69: aload_0
      70: getfield      #10                 // Field execution:Lnet/jodah/failsafe/AbstractExecution;
      73: iconst_1
      74: putfield      #61                 // Field net/jodah/failsafe/AbstractExecution.canInterrupt:Z
      77: getstatic     #62                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      80: aload_2
      81: invokevirtual #63                 // Method net/jodah/failsafe/ExecutionResult.getWaitNanos:()J
      84: invokevirtual #64                 // Method java/util/concurrent/TimeUnit.toMillis:(J)J
      87: invokestatic  #65                 // Method java/lang/Thread.sleep:(J)V
      90: aload_0
      91: getfield      #10                 // Field execution:Lnet/jodah/failsafe/AbstractExecution;
      94: iconst_0
      95: putfield      #61                 // Field net/jodah/failsafe/AbstractExecution.canInterrupt:Z
      98: goto          155
     101: astore_3
     102: aload_0
     103: getfield      #10                 // Field execution:Lnet/jodah/failsafe/AbstractExecution;
     106: getfield      #67                 // Field net/jodah/failsafe/AbstractExecution.interrupted:Z
     109: ifne          118
     112: invokestatic  #68                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
     115: invokevirtual #69                 // Method java/lang/Thread.interrupt:()V
     118: new           #70                 // class net/jodah/failsafe/FailsafeException
     121: dup
     122: aload_3
     123: invokespecial #71                 // Method net/jodah/failsafe/FailsafeException."<init>":(Ljava/lang/Throwable;)V
     126: invokestatic  #72                 // Method net/jodah/failsafe/ExecutionResult.failure:(Ljava/lang/Throwable;)Lnet/jodah/failsafe/ExecutionResult;
     129: astore        4
     131: aload_0
     132: getfield      #10                 // Field execution:Lnet/jodah/failsafe/AbstractExecution;
     135: iconst_0
     136: putfield      #61                 // Field net/jodah/failsafe/AbstractExecution.canInterrupt:Z
     139: aload         4
     141: areturn
     142: astore        5
     144: aload_0
     145: getfield      #10                 // Field execution:Lnet/jodah/failsafe/AbstractExecution;
     148: iconst_0
     149: putfield      #61                 // Field net/jodah/failsafe/AbstractExecution.canInterrupt:Z
     152: aload         5
     154: athrow
     155: aload_0
     156: invokevirtual #58                 // Method executionCancelled:()Z
     159: ifeq          164
     162: aload_2
     163: areturn
     164: aload_0
     165: getfield      #3                  // Field retryListener:Lnet/jodah/failsafe/internal/EventListener;
     168: ifnull        185
     171: aload_0
     172: getfield      #3                  // Field retryListener:Lnet/jodah/failsafe/internal/EventListener;
     175: aload_2
     176: aload_0
     177: getfield      #10                 // Field execution:Lnet/jodah/failsafe/AbstractExecution;
     180: invokeinterface #11,  3           // InterfaceMethod net/jodah/failsafe/internal/EventListener.handle:(Lnet/jodah/failsafe/ExecutionResult;Lnet/jodah/failsafe/ExecutionContext;)V
     185: goto          0
    Exception table:
       from    to  target type
          48    90   101   Class java/lang/InterruptedException
          48    90   142   any
         101   131   142   any
         142   144   142   any

  static net.jodah.failsafe.internal.EventListener access$000(net.jodah.failsafe.RetryPolicyExecutor);
    Code:
       0: aload_0
       1: getfield      #3                  // Field retryListener:Lnet/jodah/failsafe/internal/EventListener;
       4: areturn

  static boolean access$100(net.jodah.failsafe.RetryPolicyExecutor);
    Code:
       0: aload_0
       1: getfield      #2                  // Field retriesExceeded:Z
       4: ireturn

  static net.jodah.failsafe.internal.EventListener access$200(net.jodah.failsafe.RetryPolicyExecutor);
    Code:
       0: aload_0
       1: getfield      #1                  // Field retryScheduledListener:Lnet/jodah/failsafe/internal/EventListener;
       4: areturn
}
