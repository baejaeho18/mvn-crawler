Compiled from "CircuitBreaker.java"
public class net.jodah.failsafe.CircuitBreaker<R> extends net.jodah.failsafe.DelayablePolicy<net.jodah.failsafe.CircuitBreaker<R>, R> {
  private final java.util.concurrent.atomic.AtomicReference<net.jodah.failsafe.internal.CircuitState> state;

  private final java.util.concurrent.atomic.AtomicInteger currentExecutions;

  private java.time.Duration delay;

  private int failureThreshold;

  private int failureRateThreshold;

  private int failureThresholdingCapacity;

  private int failureExecutionThreshold;

  private java.time.Duration failureThresholdingPeriod;

  private int successThreshold;

  private int successThresholdingCapacity;

  net.jodah.failsafe.function.CheckedRunnable onOpen;

  net.jodah.failsafe.function.CheckedRunnable onHalfOpen;

  net.jodah.failsafe.function.CheckedRunnable onClose;

  final net.jodah.failsafe.internal.CircuitBreakerInternals internals;

  public net.jodah.failsafe.CircuitBreaker();
    Code:
       0: aload_0
       1: invokespecial #3                  // Method net/jodah/failsafe/DelayablePolicy."<init>":()V
       4: aload_0
       5: new           #4                  // class java/util/concurrent/atomic/AtomicReference
       8: dup
       9: invokespecial #5                  // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
      12: putfield      #6                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      15: aload_0
      16: new           #7                  // class java/util/concurrent/atomic/AtomicInteger
      19: dup
      20: invokespecial #8                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      23: putfield      #2                  // Field currentExecutions:Ljava/util/concurrent/atomic/AtomicInteger;
      26: aload_0
      27: lconst_1
      28: invokestatic  #9                  // Method java/time/Duration.ofMinutes:(J)Ljava/time/Duration;
      31: putfield      #10                 // Field delay:Ljava/time/Duration;
      34: aload_0
      35: iconst_1
      36: putfield      #11                 // Field failureThreshold:I
      39: aload_0
      40: iconst_1
      41: putfield      #12                 // Field failureThresholdingCapacity:I
      44: aload_0
      45: new           #13                 // class net/jodah/failsafe/CircuitBreaker$1
      48: dup
      49: aload_0
      50: invokespecial #14                 // Method net/jodah/failsafe/CircuitBreaker$1."<init>":(Lnet/jodah/failsafe/CircuitBreaker;)V
      53: putfield      #15                 // Field internals:Lnet/jodah/failsafe/internal/CircuitBreakerInternals;
      56: aload_0
      57: new           #16                 // class java/util/ArrayList
      60: dup
      61: invokespecial #17                 // Method java/util/ArrayList."<init>":()V
      64: putfield      #18                 // Field failureConditions:Ljava/util/List;
      67: aload_0
      68: getfield      #6                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      71: new           #19                 // class net/jodah/failsafe/internal/ClosedState
      74: dup
      75: aload_0
      76: aload_0
      77: getfield      #15                 // Field internals:Lnet/jodah/failsafe/internal/CircuitBreakerInternals;
      80: invokespecial #20                 // Method net/jodah/failsafe/internal/ClosedState."<init>":(Lnet/jodah/failsafe/CircuitBreaker;Lnet/jodah/failsafe/internal/CircuitBreakerInternals;)V
      83: invokevirtual #21                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      86: return

  public boolean allowsExecution();
    Code:
       0: aload_0
       1: getfield      #6                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #23                 // class net/jodah/failsafe/internal/CircuitState
      10: invokevirtual #24                 // Method net/jodah/failsafe/internal/CircuitState.allowsExecution:()Z
      13: ireturn

  public void close();
    Code:
       0: aload_0
       1: getstatic     #25                 // Field net/jodah/failsafe/CircuitBreaker$State.CLOSED:Lnet/jodah/failsafe/CircuitBreaker$State;
       4: aload_0
       5: getfield      #26                 // Field onClose:Lnet/jodah/failsafe/function/CheckedRunnable;
       8: aconst_null
       9: invokespecial #1                  // Method transitionTo:(Lnet/jodah/failsafe/CircuitBreaker$State;Lnet/jodah/failsafe/function/CheckedRunnable;Lnet/jodah/failsafe/ExecutionContext;)V
      12: return

  public net.jodah.failsafe.CircuitBreaker$State getState();
    Code:
       0: aload_0
       1: getfield      #6                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #23                 // class net/jodah/failsafe/internal/CircuitState
      10: invokevirtual #27                 // Method net/jodah/failsafe/internal/CircuitState.getState:()Lnet/jodah/failsafe/CircuitBreaker$State;
      13: areturn

  public java.time.Duration getDelay();
    Code:
       0: aload_0
       1: getfield      #10                 // Field delay:Ljava/time/Duration;
       4: areturn

  public int getExecutionCount();
    Code:
       0: aload_0
       1: getfield      #6                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #23                 // class net/jodah/failsafe/internal/CircuitState
      10: invokevirtual #28                 // Method net/jodah/failsafe/internal/CircuitState.getStats:()Lnet/jodah/failsafe/internal/CircuitStats;
      13: invokeinterface #29,  1           // InterfaceMethod net/jodah/failsafe/internal/CircuitStats.getExecutionCount:()I
      18: ireturn

  public java.time.Duration getRemainingDelay();
    Code:
       0: aload_0
       1: getfield      #6                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #23                 // class net/jodah/failsafe/internal/CircuitState
      10: invokevirtual #30                 // Method net/jodah/failsafe/internal/CircuitState.getRemainingDelay:()Ljava/time/Duration;
      13: areturn

  public long getFailureCount();
    Code:
       0: aload_0
       1: getfield      #6                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #23                 // class net/jodah/failsafe/internal/CircuitState
      10: invokevirtual #28                 // Method net/jodah/failsafe/internal/CircuitState.getStats:()Lnet/jodah/failsafe/internal/CircuitStats;
      13: invokeinterface #31,  1           // InterfaceMethod net/jodah/failsafe/internal/CircuitStats.getFailureCount:()I
      18: i2l
      19: lreturn

  public int getFailureThresholdingCapacity();
    Code:
       0: aload_0
       1: getfield      #12                 // Field failureThresholdingCapacity:I
       4: ireturn

  public java.time.Duration getFailureThresholdingPeriod();
    Code:
       0: aload_0
       1: getfield      #32                 // Field failureThresholdingPeriod:Ljava/time/Duration;
       4: areturn

  public int getFailureExecutionThreshold();
    Code:
       0: aload_0
       1: getfield      #33                 // Field failureExecutionThreshold:I
       4: ireturn

  public int getFailureRate();
    Code:
       0: aload_0
       1: getfield      #6                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #23                 // class net/jodah/failsafe/internal/CircuitState
      10: invokevirtual #28                 // Method net/jodah/failsafe/internal/CircuitState.getStats:()Lnet/jodah/failsafe/internal/CircuitStats;
      13: invokeinterface #34,  1           // InterfaceMethod net/jodah/failsafe/internal/CircuitStats.getFailureRate:()I
      18: ireturn

  public int getFailureRateThreshold();
    Code:
       0: aload_0
       1: getfield      #35                 // Field failureRateThreshold:I
       4: ireturn

  public int getFailureThreshold();
    Code:
       0: aload_0
       1: getfield      #11                 // Field failureThreshold:I
       4: ireturn

  public int getSuccessCount();
    Code:
       0: aload_0
       1: getfield      #6                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #23                 // class net/jodah/failsafe/internal/CircuitState
      10: invokevirtual #28                 // Method net/jodah/failsafe/internal/CircuitState.getStats:()Lnet/jodah/failsafe/internal/CircuitStats;
      13: invokeinterface #36,  1           // InterfaceMethod net/jodah/failsafe/internal/CircuitStats.getSuccessCount:()I
      18: ireturn

  public int getSuccessThresholdingCapacity();
    Code:
       0: aload_0
       1: getfield      #37                 // Field successThresholdingCapacity:I
       4: ireturn

  public int getSuccessRate();
    Code:
       0: aload_0
       1: getfield      #6                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #23                 // class net/jodah/failsafe/internal/CircuitState
      10: invokevirtual #28                 // Method net/jodah/failsafe/internal/CircuitState.getStats:()Lnet/jodah/failsafe/internal/CircuitStats;
      13: invokeinterface #38,  1           // InterfaceMethod net/jodah/failsafe/internal/CircuitStats.getSuccessRate:()I
      18: ireturn

  public int getSuccessThreshold();
    Code:
       0: aload_0
       1: getfield      #39                 // Field successThreshold:I
       4: ireturn

  public void halfOpen();
    Code:
       0: aload_0
       1: getstatic     #40                 // Field net/jodah/failsafe/CircuitBreaker$State.HALF_OPEN:Lnet/jodah/failsafe/CircuitBreaker$State;
       4: aload_0
       5: getfield      #41                 // Field onHalfOpen:Lnet/jodah/failsafe/function/CheckedRunnable;
       8: aconst_null
       9: invokespecial #1                  // Method transitionTo:(Lnet/jodah/failsafe/CircuitBreaker$State;Lnet/jodah/failsafe/function/CheckedRunnable;Lnet/jodah/failsafe/ExecutionContext;)V
      12: return

  public boolean isClosed();
    Code:
       0: getstatic     #25                 // Field net/jodah/failsafe/CircuitBreaker$State.CLOSED:Lnet/jodah/failsafe/CircuitBreaker$State;
       3: aload_0
       4: invokevirtual #42                 // Method getState:()Lnet/jodah/failsafe/CircuitBreaker$State;
       7: invokevirtual #43                 // Method net/jodah/failsafe/CircuitBreaker$State.equals:(Ljava/lang/Object;)Z
      10: ireturn

  public boolean isHalfOpen();
    Code:
       0: getstatic     #40                 // Field net/jodah/failsafe/CircuitBreaker$State.HALF_OPEN:Lnet/jodah/failsafe/CircuitBreaker$State;
       3: aload_0
       4: invokevirtual #42                 // Method getState:()Lnet/jodah/failsafe/CircuitBreaker$State;
       7: invokevirtual #43                 // Method net/jodah/failsafe/CircuitBreaker$State.equals:(Ljava/lang/Object;)Z
      10: ireturn

  public boolean isOpen();
    Code:
       0: getstatic     #44                 // Field net/jodah/failsafe/CircuitBreaker$State.OPEN:Lnet/jodah/failsafe/CircuitBreaker$State;
       3: aload_0
       4: invokevirtual #42                 // Method getState:()Lnet/jodah/failsafe/CircuitBreaker$State;
       7: invokevirtual #43                 // Method net/jodah/failsafe/CircuitBreaker$State.equals:(Ljava/lang/Object;)Z
      10: ireturn

  public net.jodah.failsafe.CircuitBreaker<R> onClose(net.jodah.failsafe.function.CheckedRunnable);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #26                 // Field onClose:Lnet/jodah/failsafe/function/CheckedRunnable;
       5: aload_0
       6: areturn

  public net.jodah.failsafe.CircuitBreaker<R> onHalfOpen(net.jodah.failsafe.function.CheckedRunnable);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #41                 // Field onHalfOpen:Lnet/jodah/failsafe/function/CheckedRunnable;
       5: aload_0
       6: areturn

  public net.jodah.failsafe.CircuitBreaker<R> onOpen(net.jodah.failsafe.function.CheckedRunnable);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #45                 // Field onOpen:Lnet/jodah/failsafe/function/CheckedRunnable;
       5: aload_0
       6: areturn

  public void open();
    Code:
       0: aload_0
       1: getstatic     #44                 // Field net/jodah/failsafe/CircuitBreaker$State.OPEN:Lnet/jodah/failsafe/CircuitBreaker$State;
       4: aload_0
       5: getfield      #45                 // Field onOpen:Lnet/jodah/failsafe/function/CheckedRunnable;
       8: aconst_null
       9: invokespecial #1                  // Method transitionTo:(Lnet/jodah/failsafe/CircuitBreaker$State;Lnet/jodah/failsafe/function/CheckedRunnable;Lnet/jodah/failsafe/ExecutionContext;)V
      12: return

  public void preExecute();
    Code:
       0: aload_0
       1: getfield      #2                  // Field currentExecutions:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #46                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
       7: pop
       8: return

  public void recordFailure();
    Code:
       0: aload_0
       1: aconst_null
       2: invokevirtual #47                 // Method recordExecutionFailure:(Lnet/jodah/failsafe/ExecutionContext;)V
       5: return

  public void recordFailure(java.lang.Throwable);
    Code:
       0: aload_0
       1: aconst_null
       2: aload_1
       3: invokevirtual #48                 // Method recordResult:(Ljava/lang/Object;Ljava/lang/Throwable;)V
       6: return

  public void recordResult(R);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: invokevirtual #48                 // Method recordResult:(Ljava/lang/Object;Ljava/lang/Throwable;)V
       6: return

  public void recordSuccess();
    Code:
       0: aload_0
       1: getfield      #6                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #23                 // class net/jodah/failsafe/internal/CircuitState
      10: invokevirtual #49                 // Method net/jodah/failsafe/internal/CircuitState.recordSuccess:()V
      13: aload_0
      14: getfield      #2                  // Field currentExecutions:Ljava/util/concurrent/atomic/AtomicInteger;
      17: invokevirtual #50                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
      20: pop
      21: goto          35
      24: astore_1
      25: aload_0
      26: getfield      #2                  // Field currentExecutions:Ljava/util/concurrent/atomic/AtomicInteger;
      29: invokevirtual #50                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
      32: pop
      33: aload_1
      34: athrow
      35: return
    Exception table:
       from    to  target type
           0    13    24   any

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokevirtual #42                 // Method getState:()Lnet/jodah/failsafe/CircuitBreaker$State;
       4: invokevirtual #51                 // Method net/jodah/failsafe/CircuitBreaker$State.toString:()Ljava/lang/String;
       7: areturn

  public net.jodah.failsafe.CircuitBreaker<R> withDelay(java.time.Duration);
    Code:
       0: aload_1
       1: ldc           #52                 // String delay
       3: invokestatic  #53                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_1
       8: invokevirtual #54                 // Method java/time/Duration.toNanos:()J
      11: lconst_0
      12: lcmp
      13: iflt          20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: ldc           #55                 // String delay must be positive
      23: iconst_0
      24: anewarray     #56                 // class java/lang/Object
      27: invokestatic  #57                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      30: aload_0
      31: aload_1
      32: putfield      #10                 // Field delay:Ljava/time/Duration;
      35: aload_0
      36: areturn

  public net.jodah.failsafe.CircuitBreaker<R> withFailureThreshold(int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_1
       3: invokevirtual #58                 // Method withFailureThreshold:(II)Lnet/jodah/failsafe/CircuitBreaker;
       6: areturn

  public synchronized net.jodah.failsafe.CircuitBreaker<R> withFailureThreshold(int, int);
    Code:
       0: iload_1
       1: iconst_1
       2: if_icmplt     9
       5: iconst_1
       6: goto          10
       9: iconst_0
      10: ldc           #59                 // String failureThreshold must be >= 1
      12: iconst_0
      13: anewarray     #56                 // class java/lang/Object
      16: invokestatic  #57                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      19: iload_2
      20: iconst_1
      21: if_icmplt     28
      24: iconst_1
      25: goto          29
      28: iconst_0
      29: ldc           #60                 // String failureThresholdingCapacity must be >= 1
      31: iconst_0
      32: anewarray     #56                 // class java/lang/Object
      35: invokestatic  #57                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      38: iload_2
      39: iload_1
      40: if_icmplt     47
      43: iconst_1
      44: goto          48
      47: iconst_0
      48: ldc           #61                 // String failureThresholdingCapacity must be >= failureThreshold
      50: iconst_0
      51: anewarray     #56                 // class java/lang/Object
      54: invokestatic  #57                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      57: aload_0
      58: iload_1
      59: putfield      #11                 // Field failureThreshold:I
      62: aload_0
      63: iload_2
      64: putfield      #12                 // Field failureThresholdingCapacity:I
      67: aload_0
      68: getfield      #6                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      71: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      74: checkcast     #23                 // class net/jodah/failsafe/internal/CircuitState
      77: invokevirtual #62                 // Method net/jodah/failsafe/internal/CircuitState.handleConfigChange:()V
      80: aload_0
      81: areturn

  public synchronized net.jodah.failsafe.CircuitBreaker<R> withFailureThreshold(int, java.time.Duration);
    Code:
       0: aload_0
       1: iload_1
       2: iload_1
       3: aload_2
       4: invokevirtual #63                 // Method withFailureThreshold:(IILjava/time/Duration;)Lnet/jodah/failsafe/CircuitBreaker;
       7: areturn

  public synchronized net.jodah.failsafe.CircuitBreaker<R> withFailureThreshold(int, int, java.time.Duration);
    Code:
       0: iload_1
       1: iconst_1
       2: if_icmplt     9
       5: iconst_1
       6: goto          10
       9: iconst_0
      10: ldc           #59                 // String failureThreshold must be >= 1
      12: iconst_0
      13: anewarray     #56                 // class java/lang/Object
      16: invokestatic  #57                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      19: iload_2
      20: iload_1
      21: if_icmplt     28
      24: iconst_1
      25: goto          29
      28: iconst_0
      29: ldc           #64                 // String failureExecutionThreshold must be >= failureThreshold
      31: iconst_0
      32: anewarray     #56                 // class java/lang/Object
      35: invokestatic  #57                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      38: aload_0
      39: iload_2
      40: invokespecial #65                 // Method assertFailureExecutionThreshold:(I)V
      43: aload_0
      44: aload_3
      45: invokespecial #66                 // Method assertFailureThresholdingPeriod:(Ljava/time/Duration;)V
      48: aload_0
      49: iload_1
      50: putfield      #11                 // Field failureThreshold:I
      53: aload_0
      54: iload_1
      55: putfield      #12                 // Field failureThresholdingCapacity:I
      58: aload_0
      59: iload_2
      60: putfield      #33                 // Field failureExecutionThreshold:I
      63: aload_0
      64: aload_3
      65: putfield      #32                 // Field failureThresholdingPeriod:Ljava/time/Duration;
      68: aload_0
      69: getfield      #6                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      72: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      75: checkcast     #23                 // class net/jodah/failsafe/internal/CircuitState
      78: invokevirtual #62                 // Method net/jodah/failsafe/internal/CircuitState.handleConfigChange:()V
      81: aload_0
      82: areturn

  public synchronized net.jodah.failsafe.CircuitBreaker<R> withFailureRateThreshold(int, int, java.time.Duration);
    Code:
       0: iload_1
       1: iconst_1
       2: if_icmplt     15
       5: iload_1
       6: bipush        100
       8: if_icmpgt     15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ldc           #67                 // String failureRateThreshold must be between 1 and 100
      18: iconst_0
      19: anewarray     #56                 // class java/lang/Object
      22: invokestatic  #57                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      25: aload_0
      26: iload_2
      27: invokespecial #65                 // Method assertFailureExecutionThreshold:(I)V
      30: aload_0
      31: aload_3
      32: invokespecial #66                 // Method assertFailureThresholdingPeriod:(Ljava/time/Duration;)V
      35: aload_0
      36: iload_1
      37: putfield      #35                 // Field failureRateThreshold:I
      40: aload_0
      41: iload_2
      42: putfield      #33                 // Field failureExecutionThreshold:I
      45: aload_0
      46: aload_3
      47: putfield      #32                 // Field failureThresholdingPeriod:Ljava/time/Duration;
      50: aload_0
      51: getfield      #6                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      54: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      57: checkcast     #23                 // class net/jodah/failsafe/internal/CircuitState
      60: invokevirtual #62                 // Method net/jodah/failsafe/internal/CircuitState.handleConfigChange:()V
      63: aload_0
      64: areturn

  private void assertFailureExecutionThreshold(int);
    Code:
       0: iload_1
       1: iconst_1
       2: if_icmplt     9
       5: iconst_1
       6: goto          10
       9: iconst_0
      10: ldc           #68                 // String failureExecutionThreshold must be >= 1
      12: iconst_0
      13: anewarray     #56                 // class java/lang/Object
      16: invokestatic  #57                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      19: return

  private void assertFailureThresholdingPeriod(java.time.Duration);
    Code:
       0: aload_1
       1: ldc           #69                 // String failureThresholdingPeriod
       3: invokestatic  #53                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_1
       8: invokevirtual #70                 // Method java/time/Duration.toMillis:()J
      11: ldc2_w        #71                 // long 10l
      14: lcmp
      15: iflt          22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: ldc           #73                 // String failureThresholdingPeriod must be >= 10 ms
      25: iconst_0
      26: anewarray     #56                 // class java/lang/Object
      29: invokestatic  #57                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      32: return

  public net.jodah.failsafe.CircuitBreaker<R> withSuccessThreshold(int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_1
       3: invokevirtual #74                 // Method withSuccessThreshold:(II)Lnet/jodah/failsafe/CircuitBreaker;
       6: areturn

  public synchronized net.jodah.failsafe.CircuitBreaker<R> withSuccessThreshold(int, int);
    Code:
       0: iload_1
       1: iconst_1
       2: if_icmplt     9
       5: iconst_1
       6: goto          10
       9: iconst_0
      10: ldc           #75                 // String successThreshold must be >= 1
      12: iconst_0
      13: anewarray     #56                 // class java/lang/Object
      16: invokestatic  #57                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      19: iload_2
      20: iconst_1
      21: if_icmplt     28
      24: iconst_1
      25: goto          29
      28: iconst_0
      29: ldc           #76                 // String successThresholdingCapacity must be >= 1
      31: iconst_0
      32: anewarray     #56                 // class java/lang/Object
      35: invokestatic  #57                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      38: iload_2
      39: iload_1
      40: if_icmplt     47
      43: iconst_1
      44: goto          48
      47: iconst_0
      48: ldc           #77                 // String successThresholdingCapacity must be >= successThreshold
      50: iconst_0
      51: anewarray     #56                 // class java/lang/Object
      54: invokestatic  #57                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      57: aload_0
      58: iload_1
      59: putfield      #39                 // Field successThreshold:I
      62: aload_0
      63: iload_2
      64: putfield      #37                 // Field successThresholdingCapacity:I
      67: aload_0
      68: getfield      #6                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      71: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      74: checkcast     #23                 // class net/jodah/failsafe/internal/CircuitState
      77: invokevirtual #62                 // Method net/jodah/failsafe/internal/CircuitState.handleConfigChange:()V
      80: aload_0
      81: areturn

  void recordResult(R, java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #78                 // Method isFailure:(Ljava/lang/Object;Ljava/lang/Throwable;)Z
       6: ifeq          26
       9: aload_0
      10: getfield      #6                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      13: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      16: checkcast     #23                 // class net/jodah/failsafe/internal/CircuitState
      19: aconst_null
      20: invokevirtual #79                 // Method net/jodah/failsafe/internal/CircuitState.recordFailure:(Lnet/jodah/failsafe/ExecutionContext;)V
      23: goto          39
      26: aload_0
      27: getfield      #6                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      30: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      33: checkcast     #23                 // class net/jodah/failsafe/internal/CircuitState
      36: invokevirtual #49                 // Method net/jodah/failsafe/internal/CircuitState.recordSuccess:()V
      39: aload_0
      40: getfield      #2                  // Field currentExecutions:Ljava/util/concurrent/atomic/AtomicInteger;
      43: invokevirtual #50                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
      46: pop
      47: goto          61
      50: astore_3
      51: aload_0
      52: getfield      #2                  // Field currentExecutions:Ljava/util/concurrent/atomic/AtomicInteger;
      55: invokevirtual #50                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
      58: pop
      59: aload_3
      60: athrow
      61: return
    Exception table:
       from    to  target type
           0    39    50   any

  private void transitionTo(net.jodah.failsafe.CircuitBreaker$State, net.jodah.failsafe.function.CheckedRunnable, net.jodah.failsafe.ExecutionContext);
    Code:
       0: iconst_0
       1: istore        4
       3: aload_0
       4: dup
       5: astore        5
       7: monitorenter
       8: aload_0
       9: invokevirtual #42                 // Method getState:()Lnet/jodah/failsafe/CircuitBreaker$State;
      12: aload_1
      13: invokevirtual #43                 // Method net/jodah/failsafe/CircuitBreaker$State.equals:(Ljava/lang/Object;)Z
      16: ifne          145
      19: getstatic     #80                 // Field net/jodah/failsafe/CircuitBreaker$2.$SwitchMap$net$jodah$failsafe$CircuitBreaker$State:[I
      22: aload_1
      23: invokevirtual #81                 // Method net/jodah/failsafe/CircuitBreaker$State.ordinal:()I
      26: iaload
      27: tableswitch   { // 1 to 3
                     1: 52
                     2: 74
                     3: 123
               default: 142
          }
      52: aload_0
      53: getfield      #6                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      56: new           #19                 // class net/jodah/failsafe/internal/ClosedState
      59: dup
      60: aload_0
      61: aload_0
      62: getfield      #15                 // Field internals:Lnet/jodah/failsafe/internal/CircuitBreakerInternals;
      65: invokespecial #20                 // Method net/jodah/failsafe/internal/ClosedState."<init>":(Lnet/jodah/failsafe/CircuitBreaker;Lnet/jodah/failsafe/internal/CircuitBreakerInternals;)V
      68: invokevirtual #21                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      71: goto          142
      74: aload_0
      75: aload_3
      76: invokevirtual #82                 // Method computeDelay:(Lnet/jodah/failsafe/ExecutionContext;)Ljava/time/Duration;
      79: astore        6
      81: aload_0
      82: getfield      #6                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      85: new           #83                 // class net/jodah/failsafe/internal/OpenState
      88: dup
      89: aload_0
      90: aload_0
      91: getfield      #6                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      94: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      97: checkcast     #23                 // class net/jodah/failsafe/internal/CircuitState
     100: aload         6
     102: ifnull        110
     105: aload         6
     107: goto          114
     110: aload_0
     111: getfield      #10                 // Field delay:Ljava/time/Duration;
     114: invokespecial #84                 // Method net/jodah/failsafe/internal/OpenState."<init>":(Lnet/jodah/failsafe/CircuitBreaker;Lnet/jodah/failsafe/internal/CircuitState;Ljava/time/Duration;)V
     117: invokevirtual #21                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
     120: goto          142
     123: aload_0
     124: getfield      #6                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
     127: new           #85                 // class net/jodah/failsafe/internal/HalfOpenState
     130: dup
     131: aload_0
     132: aload_0
     133: getfield      #15                 // Field internals:Lnet/jodah/failsafe/internal/CircuitBreakerInternals;
     136: invokespecial #86                 // Method net/jodah/failsafe/internal/HalfOpenState."<init>":(Lnet/jodah/failsafe/CircuitBreaker;Lnet/jodah/failsafe/internal/CircuitBreakerInternals;)V
     139: invokevirtual #21                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
     142: iconst_1
     143: istore        4
     145: aload         5
     147: monitorexit
     148: goto          159
     151: astore        7
     153: aload         5
     155: monitorexit
     156: aload         7
     158: athrow
     159: iload         4
     161: ifeq          179
     164: aload_2
     165: ifnull        179
     168: aload_2
     169: invokeinterface #87,  1           // InterfaceMethod net/jodah/failsafe/function/CheckedRunnable.run:()V
     174: goto          179
     177: astore        5
     179: return
    Exception table:
       from    to  target type
           8   148   151   any
         151   156   151   any
         168   174   177   Class java/lang/Throwable

  void recordExecutionFailure(net.jodah.failsafe.ExecutionContext);
    Code:
       0: aload_0
       1: getfield      #6                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #23                 // class net/jodah/failsafe/internal/CircuitState
      10: aload_1
      11: invokevirtual #79                 // Method net/jodah/failsafe/internal/CircuitState.recordFailure:(Lnet/jodah/failsafe/ExecutionContext;)V
      14: aload_0
      15: getfield      #2                  // Field currentExecutions:Ljava/util/concurrent/atomic/AtomicInteger;
      18: invokevirtual #50                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
      21: pop
      22: goto          36
      25: astore_2
      26: aload_0
      27: getfield      #2                  // Field currentExecutions:Ljava/util/concurrent/atomic/AtomicInteger;
      30: invokevirtual #50                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
      33: pop
      34: aload_2
      35: athrow
      36: return
    Exception table:
       from    to  target type
           0    14    25   any

  public net.jodah.failsafe.PolicyExecutor toExecutor(net.jodah.failsafe.AbstractExecution);
    Code:
       0: new           #89                 // class net/jodah/failsafe/CircuitBreakerExecutor
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #90                 // Method net/jodah/failsafe/CircuitBreakerExecutor."<init>":(Lnet/jodah/failsafe/CircuitBreaker;Lnet/jodah/failsafe/AbstractExecution;)V
       9: areturn

  static java.util.concurrent.atomic.AtomicInteger access$000(net.jodah.failsafe.CircuitBreaker);
    Code:
       0: aload_0
       1: getfield      #2                  // Field currentExecutions:Ljava/util/concurrent/atomic/AtomicInteger;
       4: areturn

  static void access$100(net.jodah.failsafe.CircuitBreaker, net.jodah.failsafe.CircuitBreaker$State, net.jodah.failsafe.function.CheckedRunnable, net.jodah.failsafe.ExecutionContext);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokespecial #1                  // Method transitionTo:(Lnet/jodah/failsafe/CircuitBreaker$State;Lnet/jodah/failsafe/function/CheckedRunnable;Lnet/jodah/failsafe/ExecutionContext;)V
       7: return
}
