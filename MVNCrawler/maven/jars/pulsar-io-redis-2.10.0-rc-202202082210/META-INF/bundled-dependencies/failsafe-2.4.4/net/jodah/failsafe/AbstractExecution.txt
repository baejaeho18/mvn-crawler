Compiled from "AbstractExecution.java"
public abstract class net.jodah.failsafe.AbstractExecution<R> extends net.jodah.failsafe.ExecutionContext<R> {
  final net.jodah.failsafe.util.concurrent.Scheduler scheduler;

  final net.jodah.failsafe.FailsafeExecutor<R> executor;

  final java.util.List<net.jodah.failsafe.PolicyExecutor<R, net.jodah.failsafe.Policy<R>>> policyExecutors;

  volatile boolean inProgress;

  volatile boolean attemptRecorded;

  volatile boolean resultHandled;

  volatile boolean canInterrupt;

  volatile boolean interrupted;

  volatile long waitNanos;

  volatile boolean completed;

  net.jodah.failsafe.AbstractExecution(net.jodah.failsafe.util.concurrent.Scheduler, net.jodah.failsafe.FailsafeExecutor<R>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method net/jodah/failsafe/ExecutionContext."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field scheduler:Lnet/jodah/failsafe/util/concurrent/Scheduler;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field executor:Lnet/jodah/failsafe/FailsafeExecutor;
      14: aload_0
      15: new           #4                  // class java/util/ArrayList
      18: dup
      19: aload_2
      20: getfield      #5                  // Field net/jodah/failsafe/FailsafeExecutor.policies:Ljava/util/List;
      23: invokeinterface #6,  1            // InterfaceMethod java/util/List.size:()I
      28: invokespecial #7                  // Method java/util/ArrayList."<init>":(I)V
      31: putfield      #8                  // Field policyExecutors:Ljava/util/List;
      34: aload_2
      35: getfield      #5                  // Field net/jodah/failsafe/FailsafeExecutor.policies:Ljava/util/List;
      38: aload_2
      39: getfield      #5                  // Field net/jodah/failsafe/FailsafeExecutor.policies:Ljava/util/List;
      42: invokeinterface #6,  1            // InterfaceMethod java/util/List.size:()I
      47: invokeinterface #9,  2            // InterfaceMethod java/util/List.listIterator:(I)Ljava/util/ListIterator;
      52: astore_3
      53: iconst_1
      54: istore        4
      56: aload_3
      57: invokeinterface #10,  1           // InterfaceMethod java/util/ListIterator.hasPrevious:()Z
      62: ifeq          107
      65: aload_3
      66: invokeinterface #11,  1           // InterfaceMethod java/util/ListIterator.previous:()Ljava/lang/Object;
      71: checkcast     #12                 // class net/jodah/failsafe/Policy
      74: aload_0
      75: invokeinterface #13,  2           // InterfaceMethod net/jodah/failsafe/Policy.toExecutor:(Lnet/jodah/failsafe/AbstractExecution;)Lnet/jodah/failsafe/PolicyExecutor;
      80: astore        5
      82: aload         5
      84: iload         4
      86: putfield      #14                 // Field net/jodah/failsafe/PolicyExecutor.policyIndex:I
      89: aload_0
      90: getfield      #8                  // Field policyExecutors:Ljava/util/List;
      93: aload         5
      95: invokeinterface #15,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     100: pop
     101: iinc          4, 1
     104: goto          56
     107: return

  void record(net.jodah.failsafe.ExecutionResult);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: invokevirtual #16                 // Method record:(Lnet/jodah/failsafe/ExecutionResult;Z)V
       6: return

  void record(net.jodah.failsafe.ExecutionResult, boolean);
    Code:
       0: aload_0
       1: getfield      #17                 // Field completed:Z
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ldc           #18                 // String Execution has already been completed
      14: iconst_0
      15: anewarray     #19                 // class java/lang/Object
      18: invokestatic  #20                 // Method net/jodah/failsafe/internal/util/Assert.state:(ZLjava/lang/String;[Ljava/lang/Object;)V
      21: aload_0
      22: getfield      #21                 // Field interrupted:Z
      25: ifne          72
      28: aload_0
      29: invokevirtual #22                 // Method recordAttempt:()V
      32: aload_0
      33: getfield      #23                 // Field inProgress:Z
      36: ifeq          72
      39: aload_0
      40: aload_1
      41: invokevirtual #24                 // Method net/jodah/failsafe/ExecutionResult.getResult:()Ljava/lang/Object;
      44: putfield      #25                 // Field lastResult:Ljava/lang/Object;
      47: aload_0
      48: aload_1
      49: invokevirtual #26                 // Method net/jodah/failsafe/ExecutionResult.getFailure:()Ljava/lang/Throwable;
      52: putfield      #27                 // Field lastFailure:Ljava/lang/Throwable;
      55: aload_0
      56: getfield      #28                 // Field executions:Ljava/util/concurrent/atomic/AtomicInteger;
      59: invokevirtual #29                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
      62: pop
      63: iload_2
      64: ifne          72
      67: aload_0
      68: iconst_0
      69: putfield      #23                 // Field inProgress:Z
      72: return

  void recordAttempt();
    Code:
       0: aload_0
       1: getfield      #30                 // Field attemptRecorded:Z
       4: ifne          20
       7: aload_0
       8: getfield      #31                 // Field attempts:Ljava/util/concurrent/atomic/AtomicInteger;
      11: invokevirtual #29                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
      14: pop
      15: aload_0
      16: iconst_1
      17: putfield      #30                 // Field attemptRecorded:Z
      20: return

  synchronized void preExecute();
    Code:
       0: aload_0
       1: invokestatic  #32                 // Method java/lang/System.nanoTime:()J
       4: invokestatic  #33                 // Method java/time/Duration.ofNanos:(J)Ljava/time/Duration;
       7: putfield      #34                 // Field attemptStartTime:Ljava/time/Duration;
      10: aload_0
      11: getfield      #35                 // Field startTime:Ljava/time/Duration;
      14: getstatic     #36                 // Field java/time/Duration.ZERO:Ljava/time/Duration;
      17: if_acmpne     28
      20: aload_0
      21: aload_0
      22: getfield      #34                 // Field attemptStartTime:Ljava/time/Duration;
      25: putfield      #35                 // Field startTime:Ljava/time/Duration;
      28: aload_0
      29: iconst_1
      30: putfield      #23                 // Field inProgress:Z
      33: aload_0
      34: iconst_0
      35: putfield      #30                 // Field attemptRecorded:Z
      38: aload_0
      39: iconst_0
      40: putfield      #37                 // Field resultHandled:Z
      43: aload_0
      44: iconst_0
      45: putfield      #38                 // Field cancelledIndex:I
      48: aload_0
      49: iconst_1
      50: putfield      #39                 // Field canInterrupt:Z
      53: aload_0
      54: iconst_0
      55: putfield      #21                 // Field interrupted:Z
      58: return

  boolean isAsyncExecution();
    Code:
       0: iconst_0
       1: ireturn

  synchronized net.jodah.failsafe.ExecutionResult postExecute(net.jodah.failsafe.ExecutionResult);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #40                 // Method record:(Lnet/jodah/failsafe/ExecutionResult;)V
       5: iconst_1
       6: istore_2
       7: aload_0
       8: getfield      #8                  // Field policyExecutors:Ljava/util/List;
      11: invokeinterface #41,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      16: astore_3
      17: aload_3
      18: invokeinterface #42,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      23: ifeq          64
      26: aload_3
      27: invokeinterface #43,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      32: checkcast     #44                 // class net/jodah/failsafe/PolicyExecutor
      35: astore        4
      37: aload         4
      39: aload_1
      40: invokevirtual #45                 // Method net/jodah/failsafe/PolicyExecutor.postExecute:(Lnet/jodah/failsafe/ExecutionResult;)Lnet/jodah/failsafe/ExecutionResult;
      43: astore_1
      44: iload_2
      45: ifeq          59
      48: aload_1
      49: invokevirtual #46                 // Method net/jodah/failsafe/ExecutionResult.isComplete:()Z
      52: ifeq          59
      55: iconst_1
      56: goto          60
      59: iconst_0
      60: istore_2
      61: goto          17
      64: aload_0
      65: aload_1
      66: invokevirtual #47                 // Method net/jodah/failsafe/ExecutionResult.getWaitNanos:()J
      69: putfield      #48                 // Field waitNanos:J
      72: aload_0
      73: iload_2
      74: putfield      #17                 // Field completed:Z
      77: aload_1
      78: areturn

  public java.time.Duration getWaitTime();
    Code:
       0: aload_0
       1: getfield      #48                 // Field waitNanos:J
       4: invokestatic  #33                 // Method java/time/Duration.ofNanos:(J)Ljava/time/Duration;
       7: areturn

  public boolean isComplete();
    Code:
       0: aload_0
       1: getfield      #17                 // Field completed:Z
       4: ireturn
}
