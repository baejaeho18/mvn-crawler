public class org.bouncycastle.crypto.engines.RC532Engine implements org.bouncycastle.crypto.BlockCipher {
  private int _noRounds;

  private int[] _S;

  private static final int P32;

  private static final int Q32;

  private boolean forEncryption;

  public org.bouncycastle.crypto.engines.RC532Engine();
    Code:
       0: aload_0
       1: invokespecial #86                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: bipush        12
       7: putfield      #81                 // Field _noRounds:I
      10: aload_0
      11: aconst_null
      12: putfield      #83                 // Field _S:[I
      15: return

  public java.lang.String getAlgorithmName();
    Code:
       0: ldc           #3                  // String RC5-32
       2: areturn

  public int getBlockSize();
    Code:
       0: bipush        8
       2: ireturn

  public void init(boolean, org.bouncycastle.crypto.CipherParameters);
    Code:
       0: aload_2
       1: instanceof    #57                 // class org/bouncycastle/crypto/params/RC5Parameters
       4: ifeq          31
       7: aload_2
       8: checkcast     #57                 // class org/bouncycastle/crypto/params/RC5Parameters
      11: astore_3
      12: aload_0
      13: aload_3
      14: invokevirtual #99                 // Method org/bouncycastle/crypto/params/RC5Parameters.getRounds:()I
      17: putfield      #81                 // Field _noRounds:I
      20: aload_0
      21: aload_3
      22: invokevirtual #100                // Method org/bouncycastle/crypto/params/RC5Parameters.getKey:()[B
      25: invokespecial #94                 // Method setKey:([B)V
      28: goto          87
      31: aload_2
      32: instanceof    #56                 // class org/bouncycastle/crypto/params/KeyParameter
      35: ifeq          54
      38: aload_2
      39: checkcast     #56                 // class org/bouncycastle/crypto/params/KeyParameter
      42: astore_3
      43: aload_0
      44: aload_3
      45: invokevirtual #98                 // Method org/bouncycastle/crypto/params/KeyParameter.getKey:()[B
      48: invokespecial #94                 // Method setKey:([B)V
      51: goto          87
      54: new           #51                 // class java/lang/IllegalArgumentException
      57: dup
      58: new           #53                 // class java/lang/StringBuilder
      61: dup
      62: invokespecial #88                 // Method java/lang/StringBuilder."<init>":()V
      65: ldc           #4                  // String invalid parameter passed to RC532 init -
      67: invokevirtual #90                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      70: aload_2
      71: invokevirtual #87                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      74: invokevirtual #84                 // Method java/lang/Class.getName:()Ljava/lang/String;
      77: invokevirtual #90                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      80: invokevirtual #89                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      83: invokespecial #85                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      86: athrow
      87: aload_0
      88: iload_1
      89: putfield      #82                 // Field forEncryption:Z
      92: return

  public int processBlock(byte[], int, byte[], int);
    Code:
       0: aload_0
       1: getfield      #82                 // Field forEncryption:Z
       4: ifeq          19
       7: aload_0
       8: aload_1
       9: iload_2
      10: aload_3
      11: iload         4
      13: invokespecial #97                 // Method encryptBlock:([BI[BI)I
      16: goto          28
      19: aload_0
      20: aload_1
      21: iload_2
      22: aload_3
      23: iload         4
      25: invokespecial #96                 // Method decryptBlock:([BI[BI)I
      28: ireturn

  public void reset();
    Code:
       0: return

  private void setKey(byte[]);
    Code:
       0: aload_1
       1: arraylength
       2: iconst_3
       3: iadd
       4: iconst_4
       5: idiv
       6: newarray       int
       8: astore_2
       9: iconst_0
      10: istore_3
      11: iload_3
      12: aload_1
      13: arraylength
      14: if_icmpeq     45
      17: aload_2
      18: iload_3
      19: iconst_4
      20: idiv
      21: dup2
      22: iaload
      23: aload_1
      24: iload_3
      25: baload
      26: sipush        255
      29: iand
      30: bipush        8
      32: iload_3
      33: iconst_4
      34: irem
      35: imul
      36: ishl
      37: iadd
      38: iastore
      39: iinc          3, 1
      42: goto          11
      45: aload_0
      46: iconst_2
      47: aload_0
      48: getfield      #81                 // Field _noRounds:I
      51: iconst_1
      52: iadd
      53: imul
      54: newarray       int
      56: putfield      #83                 // Field _S:[I
      59: aload_0
      60: getfield      #83                 // Field _S:[I
      63: iconst_0
      64: ldc           #2                  // int -1209970333
      66: iastore
      67: iconst_1
      68: istore_3
      69: iload_3
      70: aload_0
      71: getfield      #83                 // Field _S:[I
      74: arraylength
      75: if_icmpge     101
      78: aload_0
      79: getfield      #83                 // Field _S:[I
      82: iload_3
      83: aload_0
      84: getfield      #83                 // Field _S:[I
      87: iload_3
      88: iconst_1
      89: isub
      90: iaload
      91: ldc           #1                  // int -1640531527
      93: iadd
      94: iastore
      95: iinc          3, 1
      98: goto          69
     101: aload_2
     102: arraylength
     103: aload_0
     104: getfield      #83                 // Field _S:[I
     107: arraylength
     108: if_icmple     119
     111: iconst_3
     112: aload_2
     113: arraylength
     114: imul
     115: istore_3
     116: goto          127
     119: iconst_3
     120: aload_0
     121: getfield      #83                 // Field _S:[I
     124: arraylength
     125: imul
     126: istore_3
     127: iconst_0
     128: istore        4
     130: iconst_0
     131: istore        5
     133: iconst_0
     134: istore        6
     136: iconst_0
     137: istore        7
     139: iconst_0
     140: istore        8
     142: iload         8
     144: iload_3
     145: if_icmpge     229
     148: aload_0
     149: getfield      #83                 // Field _S:[I
     152: iload         6
     154: aload_0
     155: aload_0
     156: getfield      #83                 // Field _S:[I
     159: iload         6
     161: iaload
     162: iload         4
     164: iadd
     165: iload         5
     167: iadd
     168: iconst_3
     169: invokespecial #91                 // Method rotateLeft:(II)I
     172: dup_x2
     173: iastore
     174: istore        4
     176: aload_2
     177: iload         7
     179: aload_0
     180: aload_2
     181: iload         7
     183: iaload
     184: iload         4
     186: iadd
     187: iload         5
     189: iadd
     190: iload         4
     192: iload         5
     194: iadd
     195: invokespecial #91                 // Method rotateLeft:(II)I
     198: dup_x2
     199: iastore
     200: istore        5
     202: iload         6
     204: iconst_1
     205: iadd
     206: aload_0
     207: getfield      #83                 // Field _S:[I
     210: arraylength
     211: irem
     212: istore        6
     214: iload         7
     216: iconst_1
     217: iadd
     218: aload_2
     219: arraylength
     220: irem
     221: istore        7
     223: iinc          8, 1
     226: goto          142
     229: return

  private int encryptBlock(byte[], int, byte[], int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokespecial #95                 // Method bytesToWord:([BI)I
       6: aload_0
       7: getfield      #83                 // Field _S:[I
      10: iconst_0
      11: iaload
      12: iadd
      13: istore        5
      15: aload_0
      16: aload_1
      17: iload_2
      18: iconst_4
      19: iadd
      20: invokespecial #95                 // Method bytesToWord:([BI)I
      23: aload_0
      24: getfield      #83                 // Field _S:[I
      27: iconst_1
      28: iaload
      29: iadd
      30: istore        6
      32: iconst_1
      33: istore        7
      35: iload         7
      37: aload_0
      38: getfield      #81                 // Field _noRounds:I
      41: if_icmpgt     98
      44: aload_0
      45: iload         5
      47: iload         6
      49: ixor
      50: iload         6
      52: invokespecial #91                 // Method rotateLeft:(II)I
      55: aload_0
      56: getfield      #83                 // Field _S:[I
      59: iconst_2
      60: iload         7
      62: imul
      63: iaload
      64: iadd
      65: istore        5
      67: aload_0
      68: iload         6
      70: iload         5
      72: ixor
      73: iload         5
      75: invokespecial #91                 // Method rotateLeft:(II)I
      78: aload_0
      79: getfield      #83                 // Field _S:[I
      82: iconst_2
      83: iload         7
      85: imul
      86: iconst_1
      87: iadd
      88: iaload
      89: iadd
      90: istore        6
      92: iinc          7, 1
      95: goto          35
      98: aload_0
      99: iload         5
     101: aload_3
     102: iload         4
     104: invokespecial #93                 // Method wordToBytes:(I[BI)V
     107: aload_0
     108: iload         6
     110: aload_3
     111: iload         4
     113: iconst_4
     114: iadd
     115: invokespecial #93                 // Method wordToBytes:(I[BI)V
     118: bipush        8
     120: ireturn

  private int decryptBlock(byte[], int, byte[], int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokespecial #95                 // Method bytesToWord:([BI)I
       6: istore        5
       8: aload_0
       9: aload_1
      10: iload_2
      11: iconst_4
      12: iadd
      13: invokespecial #95                 // Method bytesToWord:([BI)I
      16: istore        6
      18: aload_0
      19: getfield      #81                 // Field _noRounds:I
      22: istore        7
      24: iload         7
      26: iconst_1
      27: if_icmplt     84
      30: aload_0
      31: iload         6
      33: aload_0
      34: getfield      #83                 // Field _S:[I
      37: iconst_2
      38: iload         7
      40: imul
      41: iconst_1
      42: iadd
      43: iaload
      44: isub
      45: iload         5
      47: invokespecial #92                 // Method rotateRight:(II)I
      50: iload         5
      52: ixor
      53: istore        6
      55: aload_0
      56: iload         5
      58: aload_0
      59: getfield      #83                 // Field _S:[I
      62: iconst_2
      63: iload         7
      65: imul
      66: iaload
      67: isub
      68: iload         6
      70: invokespecial #92                 // Method rotateRight:(II)I
      73: iload         6
      75: ixor
      76: istore        5
      78: iinc          7, -1
      81: goto          24
      84: aload_0
      85: iload         5
      87: aload_0
      88: getfield      #83                 // Field _S:[I
      91: iconst_0
      92: iaload
      93: isub
      94: aload_3
      95: iload         4
      97: invokespecial #93                 // Method wordToBytes:(I[BI)V
     100: aload_0
     101: iload         6
     103: aload_0
     104: getfield      #83                 // Field _S:[I
     107: iconst_1
     108: iaload
     109: isub
     110: aload_3
     111: iload         4
     113: iconst_4
     114: iadd
     115: invokespecial #93                 // Method wordToBytes:(I[BI)V
     118: bipush        8
     120: ireturn

  private int rotateLeft(int, int);
    Code:
       0: iload_1
       1: iload_2
       2: bipush        31
       4: iand
       5: ishl
       6: iload_1
       7: bipush        32
       9: iload_2
      10: bipush        31
      12: iand
      13: isub
      14: iushr
      15: ior
      16: ireturn

  private int rotateRight(int, int);
    Code:
       0: iload_1
       1: iload_2
       2: bipush        31
       4: iand
       5: iushr
       6: iload_1
       7: bipush        32
       9: iload_2
      10: bipush        31
      12: iand
      13: isub
      14: ishl
      15: ior
      16: ireturn

  private int bytesToWord(byte[], int);
    Code:
       0: aload_1
       1: iload_2
       2: baload
       3: sipush        255
       6: iand
       7: aload_1
       8: iload_2
       9: iconst_1
      10: iadd
      11: baload
      12: sipush        255
      15: iand
      16: bipush        8
      18: ishl
      19: ior
      20: aload_1
      21: iload_2
      22: iconst_2
      23: iadd
      24: baload
      25: sipush        255
      28: iand
      29: bipush        16
      31: ishl
      32: ior
      33: aload_1
      34: iload_2
      35: iconst_3
      36: iadd
      37: baload
      38: sipush        255
      41: iand
      42: bipush        24
      44: ishl
      45: ior
      46: ireturn

  private void wordToBytes(int, byte[], int);
    Code:
       0: aload_2
       1: iload_3
       2: iload_1
       3: i2b
       4: bastore
       5: aload_2
       6: iload_3
       7: iconst_1
       8: iadd
       9: iload_1
      10: bipush        8
      12: ishr
      13: i2b
      14: bastore
      15: aload_2
      16: iload_3
      17: iconst_2
      18: iadd
      19: iload_1
      20: bipush        16
      22: ishr
      23: i2b
      24: bastore
      25: aload_2
      26: iload_3
      27: iconst_3
      28: iadd
      29: iload_1
      30: bipush        24
      32: ishr
      33: i2b
      34: bastore
      35: return
}
