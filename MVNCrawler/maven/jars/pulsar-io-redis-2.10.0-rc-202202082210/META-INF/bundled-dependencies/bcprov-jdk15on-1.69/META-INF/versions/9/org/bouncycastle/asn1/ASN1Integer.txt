Compiled from "ASN1Integer.java"
public class org.bouncycastle.asn1.ASN1Integer extends org.bouncycastle.asn1.ASN1Primitive {
  static final int SIGN_EXT_SIGNED;

  static final int SIGN_EXT_UNSIGNED;

  private final byte[] bytes;

  private final int start;

  public static org.bouncycastle.asn1.ASN1Integer getInstance(java.lang.Object);
    Code:
       0: aload_0
       1: ifnull        11
       4: aload_0
       5: instanceof    #1                  // class org/bouncycastle/asn1/ASN1Integer
       8: ifeq          16
      11: aload_0
      12: checkcast     #1                  // class org/bouncycastle/asn1/ASN1Integer
      15: areturn
      16: aload_0
      17: instanceof    #2                  // class "[B"
      20: ifeq          52
      23: aload_0
      24: checkcast     #2                  // class "[B"
      27: invokestatic  #3                  // Method fromByteArray:([B)Lorg/bouncycastle/asn1/ASN1Primitive;
      30: checkcast     #1                  // class org/bouncycastle/asn1/ASN1Integer
      33: areturn
      34: astore_1
      35: new           #5                  // class java/lang/IllegalArgumentException
      38: dup
      39: aload_1
      40: invokevirtual #6                  // Method java/lang/Exception.toString:()Ljava/lang/String;
      43: invokedynamic #7,  0              // InvokeDynamic #0:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;
      48: invokespecial #8                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      51: athrow
      52: new           #5                  // class java/lang/IllegalArgumentException
      55: dup
      56: aload_0
      57: invokevirtual #9                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
      60: invokevirtual #10                 // Method java/lang/Class.getName:()Ljava/lang/String;
      63: invokedynamic #11,  0             // InvokeDynamic #1:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;
      68: invokespecial #8                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      71: athrow
    Exception table:
       from    to  target type
          23    33    34   Class java/lang/Exception

  public static org.bouncycastle.asn1.ASN1Integer getInstance(org.bouncycastle.asn1.ASN1TaggedObject, boolean);
    Code:
       0: aload_0
       1: invokevirtual #12                 // Method org/bouncycastle/asn1/ASN1TaggedObject.getObject:()Lorg/bouncycastle/asn1/ASN1Primitive;
       4: astore_2
       5: iload_1
       6: ifne          16
       9: aload_2
      10: instanceof    #1                  // class org/bouncycastle/asn1/ASN1Integer
      13: ifeq          21
      16: aload_2
      17: invokestatic  #13                 // Method getInstance:(Ljava/lang/Object;)Lorg/bouncycastle/asn1/ASN1Integer;
      20: areturn
      21: new           #1                  // class org/bouncycastle/asn1/ASN1Integer
      24: dup
      25: aload_2
      26: invokestatic  #14                 // Method org/bouncycastle/asn1/ASN1OctetString.getInstance:(Ljava/lang/Object;)Lorg/bouncycastle/asn1/ASN1OctetString;
      29: invokevirtual #15                 // Method org/bouncycastle/asn1/ASN1OctetString.getOctets:()[B
      32: invokespecial #16                 // Method "<init>":([B)V
      35: areturn

  public org.bouncycastle.asn1.ASN1Integer(long);
    Code:
       0: aload_0
       1: invokespecial #17                 // Method org/bouncycastle/asn1/ASN1Primitive."<init>":()V
       4: aload_0
       5: lload_1
       6: invokestatic  #18                 // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;
       9: invokevirtual #19                 // Method java/math/BigInteger.toByteArray:()[B
      12: putfield      #20                 // Field bytes:[B
      15: aload_0
      16: iconst_0
      17: putfield      #21                 // Field start:I
      20: return

  public org.bouncycastle.asn1.ASN1Integer(java.math.BigInteger);
    Code:
       0: aload_0
       1: invokespecial #17                 // Method org/bouncycastle/asn1/ASN1Primitive."<init>":()V
       4: aload_0
       5: aload_1
       6: invokevirtual #19                 // Method java/math/BigInteger.toByteArray:()[B
       9: putfield      #20                 // Field bytes:[B
      12: aload_0
      13: iconst_0
      14: putfield      #21                 // Field start:I
      17: return

  public org.bouncycastle.asn1.ASN1Integer(byte[]);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_1
       3: invokespecial #22                 // Method "<init>":([BZ)V
       6: return

  org.bouncycastle.asn1.ASN1Integer(byte[], boolean);
    Code:
       0: aload_0
       1: invokespecial #17                 // Method org/bouncycastle/asn1/ASN1Primitive."<init>":()V
       4: aload_1
       5: invokestatic  #23                 // Method isMalformed:([B)Z
       8: ifeq          21
      11: new           #5                  // class java/lang/IllegalArgumentException
      14: dup
      15: ldc           #24                 // String malformed integer
      17: invokespecial #8                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      20: athrow
      21: aload_0
      22: iload_2
      23: ifeq          33
      26: aload_1
      27: invokestatic  #25                 // Method org/bouncycastle/util/Arrays.clone:([B)[B
      30: goto          34
      33: aload_1
      34: putfield      #20                 // Field bytes:[B
      37: aload_0
      38: aload_1
      39: invokestatic  #26                 // Method signBytesToSkip:([B)I
      42: putfield      #21                 // Field start:I
      45: return

  public java.math.BigInteger getPositiveValue();
    Code:
       0: new           #27                 // class java/math/BigInteger
       3: dup
       4: iconst_1
       5: aload_0
       6: getfield      #20                 // Field bytes:[B
       9: invokespecial #28                 // Method java/math/BigInteger."<init>":(I[B)V
      12: areturn

  public java.math.BigInteger getValue();
    Code:
       0: new           #27                 // class java/math/BigInteger
       3: dup
       4: aload_0
       5: getfield      #20                 // Field bytes:[B
       8: invokespecial #29                 // Method java/math/BigInteger."<init>":([B)V
      11: areturn

  public boolean hasValue(int);
    Code:
       0: aload_0
       1: getfield      #20                 // Field bytes:[B
       4: arraylength
       5: aload_0
       6: getfield      #21                 // Field start:I
       9: isub
      10: iconst_4
      11: if_icmpgt     34
      14: aload_0
      15: getfield      #20                 // Field bytes:[B
      18: aload_0
      19: getfield      #21                 // Field start:I
      22: iconst_m1
      23: invokestatic  #30                 // Method intValue:([BII)I
      26: iload_1
      27: if_icmpne     34
      30: iconst_1
      31: goto          35
      34: iconst_0
      35: ireturn

  public boolean hasValue(long);
    Code:
       0: aload_0
       1: getfield      #20                 // Field bytes:[B
       4: arraylength
       5: aload_0
       6: getfield      #21                 // Field start:I
       9: isub
      10: bipush        8
      12: if_icmpgt     36
      15: aload_0
      16: getfield      #20                 // Field bytes:[B
      19: aload_0
      20: getfield      #21                 // Field start:I
      23: iconst_m1
      24: invokestatic  #31                 // Method longValue:([BII)J
      27: lload_1
      28: lcmp
      29: ifne          36
      32: iconst_1
      33: goto          37
      36: iconst_0
      37: ireturn

  public boolean hasValue(java.math.BigInteger);
    Code:
       0: aconst_null
       1: aload_1
       2: if_acmpeq     39
       5: aload_0
       6: getfield      #20                 // Field bytes:[B
       9: aload_0
      10: getfield      #21                 // Field start:I
      13: iconst_m1
      14: invokestatic  #30                 // Method intValue:([BII)I
      17: aload_1
      18: invokevirtual #32                 // Method java/math/BigInteger.intValue:()I
      21: if_icmpne     39
      24: aload_0
      25: invokevirtual #33                 // Method getValue:()Ljava/math/BigInteger;
      28: aload_1
      29: invokevirtual #34                 // Method java/math/BigInteger.equals:(Ljava/lang/Object;)Z
      32: ifeq          39
      35: iconst_1
      36: goto          40
      39: iconst_0
      40: ireturn

  public int intPositiveValueExact();
    Code:
       0: aload_0
       1: getfield      #20                 // Field bytes:[B
       4: arraylength
       5: aload_0
       6: getfield      #21                 // Field start:I
       9: isub
      10: istore_1
      11: iload_1
      12: iconst_4
      13: if_icmpgt     38
      16: iload_1
      17: iconst_4
      18: if_icmpne     48
      21: iconst_0
      22: aload_0
      23: getfield      #20                 // Field bytes:[B
      26: aload_0
      27: getfield      #21                 // Field start:I
      30: baload
      31: sipush        128
      34: iand
      35: if_icmpeq     48
      38: new           #35                 // class java/lang/ArithmeticException
      41: dup
      42: ldc           #36                 // String ASN.1 Integer out of positive int range
      44: invokespecial #37                 // Method java/lang/ArithmeticException."<init>":(Ljava/lang/String;)V
      47: athrow
      48: aload_0
      49: getfield      #20                 // Field bytes:[B
      52: aload_0
      53: getfield      #21                 // Field start:I
      56: sipush        255
      59: invokestatic  #30                 // Method intValue:([BII)I
      62: ireturn

  public int intValueExact();
    Code:
       0: aload_0
       1: getfield      #20                 // Field bytes:[B
       4: arraylength
       5: aload_0
       6: getfield      #21                 // Field start:I
       9: isub
      10: istore_1
      11: iload_1
      12: iconst_4
      13: if_icmple     26
      16: new           #35                 // class java/lang/ArithmeticException
      19: dup
      20: ldc           #38                 // String ASN.1 Integer out of int range
      22: invokespecial #37                 // Method java/lang/ArithmeticException."<init>":(Ljava/lang/String;)V
      25: athrow
      26: aload_0
      27: getfield      #20                 // Field bytes:[B
      30: aload_0
      31: getfield      #21                 // Field start:I
      34: iconst_m1
      35: invokestatic  #30                 // Method intValue:([BII)I
      38: ireturn

  public long longValueExact();
    Code:
       0: aload_0
       1: getfield      #20                 // Field bytes:[B
       4: arraylength
       5: aload_0
       6: getfield      #21                 // Field start:I
       9: isub
      10: istore_1
      11: iload_1
      12: bipush        8
      14: if_icmple     27
      17: new           #35                 // class java/lang/ArithmeticException
      20: dup
      21: ldc           #39                 // String ASN.1 Integer out of long range
      23: invokespecial #37                 // Method java/lang/ArithmeticException."<init>":(Ljava/lang/String;)V
      26: athrow
      27: aload_0
      28: getfield      #20                 // Field bytes:[B
      31: aload_0
      32: getfield      #21                 // Field start:I
      35: iconst_m1
      36: invokestatic  #31                 // Method longValue:([BII)J
      39: lreturn

  boolean isConstructed();
    Code:
       0: iconst_0
       1: ireturn

  int encodedLength();
    Code:
       0: iconst_1
       1: aload_0
       2: getfield      #20                 // Field bytes:[B
       5: arraylength
       6: invokestatic  #40                 // Method org/bouncycastle/asn1/StreamUtil.calculateBodyLength:(I)I
       9: iadd
      10: aload_0
      11: getfield      #20                 // Field bytes:[B
      14: arraylength
      15: iadd
      16: ireturn

  void encode(org.bouncycastle.asn1.ASN1OutputStream, boolean) throws java.io.IOException;
    Code:
       0: aload_1
       1: iload_2
       2: iconst_2
       3: aload_0
       4: getfield      #20                 // Field bytes:[B
       7: invokevirtual #42                 // Method org/bouncycastle/asn1/ASN1OutputStream.writeEncoded:(ZI[B)V
      10: return

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #20                 // Field bytes:[B
       4: invokestatic  #43                 // Method org/bouncycastle/util/Arrays.hashCode:([B)I
       7: ireturn

  boolean asn1Equals(org.bouncycastle.asn1.ASN1Primitive);
    Code:
       0: aload_1
       1: instanceof    #1                  // class org/bouncycastle/asn1/ASN1Integer
       4: ifne          9
       7: iconst_0
       8: ireturn
       9: aload_1
      10: checkcast     #1                  // class org/bouncycastle/asn1/ASN1Integer
      13: astore_2
      14: aload_0
      15: getfield      #20                 // Field bytes:[B
      18: aload_2
      19: getfield      #20                 // Field bytes:[B
      22: invokestatic  #44                 // Method org/bouncycastle/util/Arrays.areEqual:([B[B)Z
      25: ireturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokevirtual #33                 // Method getValue:()Ljava/math/BigInteger;
       4: invokevirtual #45                 // Method java/math/BigInteger.toString:()Ljava/lang/String;
       7: areturn

  static int intValue(byte[], int, int);
    Code:
       0: aload_0
       1: arraylength
       2: istore_3
       3: iload_1
       4: iload_3
       5: iconst_4
       6: isub
       7: invokestatic  #46                 // Method java/lang/Math.max:(II)I
      10: istore        4
      12: aload_0
      13: iload         4
      15: baload
      16: iload_2
      17: iand
      18: istore        5
      20: iinc          4, 1
      23: iload         4
      25: iload_3
      26: if_icmpge     48
      29: iload         5
      31: bipush        8
      33: ishl
      34: aload_0
      35: iload         4
      37: baload
      38: sipush        255
      41: iand
      42: ior
      43: istore        5
      45: goto          20
      48: iload         5
      50: ireturn

  static long longValue(byte[], int, int);
    Code:
       0: aload_0
       1: arraylength
       2: istore_3
       3: iload_1
       4: iload_3
       5: bipush        8
       7: isub
       8: invokestatic  #46                 // Method java/lang/Math.max:(II)I
      11: istore        4
      13: aload_0
      14: iload         4
      16: baload
      17: iload_2
      18: iand
      19: i2l
      20: lstore        5
      22: iinc          4, 1
      25: iload         4
      27: iload_3
      28: if_icmpge     51
      31: lload         5
      33: bipush        8
      35: lshl
      36: aload_0
      37: iload         4
      39: baload
      40: sipush        255
      43: iand
      44: i2l
      45: lor
      46: lstore        5
      48: goto          22
      51: lload         5
      53: lreturn

  static boolean isMalformed(byte[]);
    Code:
       0: aload_0
       1: arraylength
       2: lookupswitch  { // 2
                     0: 28
                     1: 30
               default: 32
          }
      28: iconst_1
      29: ireturn
      30: iconst_0
      31: ireturn
      32: aload_0
      33: iconst_0
      34: baload
      35: aload_0
      36: iconst_1
      37: baload
      38: bipush        7
      40: ishr
      41: if_icmpne     56
      44: ldc           #47                 // String org.bouncycastle.asn1.allow_unsafe_integer
      46: invokestatic  #48                 // Method org/bouncycastle/util/Properties.isOverrideSet:(Ljava/lang/String;)Z
      49: ifne          56
      52: iconst_1
      53: goto          57
      56: iconst_0
      57: ireturn

  static int signBytesToSkip(byte[]);
    Code:
       0: iconst_0
       1: istore_1
       2: aload_0
       3: arraylength
       4: iconst_1
       5: isub
       6: istore_2
       7: iload_1
       8: iload_2
       9: if_icmpge     32
      12: aload_0
      13: iload_1
      14: baload
      15: aload_0
      16: iload_1
      17: iconst_1
      18: iadd
      19: baload
      20: bipush        7
      22: ishr
      23: if_icmpne     32
      26: iinc          1, 1
      29: goto          7
      32: iload_1
      33: ireturn
}
