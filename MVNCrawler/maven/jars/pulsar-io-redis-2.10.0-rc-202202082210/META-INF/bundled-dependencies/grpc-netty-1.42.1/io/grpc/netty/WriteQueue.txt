Compiled from "WriteQueue.java"
class io.grpc.netty.WriteQueue {
  static final int DEQUE_CHUNK_SIZE;

  private final java.lang.Runnable later;

  private final io.netty.channel.Channel channel;

  private final java.util.Queue<io.grpc.netty.WriteQueue$QueuedCommand> queue;

  private final java.util.concurrent.atomic.AtomicBoolean scheduled;

  public io.grpc.netty.WriteQueue(io.netty.channel.Channel);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #3                  // class io/grpc/netty/WriteQueue$1
       8: dup
       9: aload_0
      10: invokespecial #4                  // Method io/grpc/netty/WriteQueue$1."<init>":(Lio/grpc/netty/WriteQueue;)V
      13: putfield      #5                  // Field later:Ljava/lang/Runnable;
      16: aload_0
      17: new           #6                  // class java/util/concurrent/atomic/AtomicBoolean
      20: dup
      21: invokespecial #7                  // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
      24: putfield      #8                  // Field scheduled:Ljava/util/concurrent/atomic/AtomicBoolean;
      27: aload_0
      28: aload_1
      29: ldc           #9                  // String channel
      31: invokestatic  #10                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      34: checkcast     #11                 // class io/netty/channel/Channel
      37: putfield      #12                 // Field channel:Lio/netty/channel/Channel;
      40: aload_0
      41: new           #13                 // class java/util/concurrent/ConcurrentLinkedQueue
      44: dup
      45: invokespecial #14                 // Method java/util/concurrent/ConcurrentLinkedQueue."<init>":()V
      48: putfield      #15                 // Field queue:Ljava/util/Queue;
      51: return

  void scheduleFlush();
    Code:
       0: aload_0
       1: getfield      #8                  // Field scheduled:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_0
       5: iconst_1
       6: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
       9: ifeq          30
      12: aload_0
      13: getfield      #12                 // Field channel:Lio/netty/channel/Channel;
      16: invokeinterface #17,  1           // InterfaceMethod io/netty/channel/Channel.eventLoop:()Lio/netty/channel/EventLoop;
      21: aload_0
      22: getfield      #5                  // Field later:Ljava/lang/Runnable;
      25: invokeinterface #18,  2           // InterfaceMethod io/netty/channel/EventLoop.execute:(Ljava/lang/Runnable;)V
      30: return

  io.netty.channel.ChannelFuture enqueue(io.grpc.netty.WriteQueue$QueuedCommand, boolean);
    Code:
       0: aload_1
       1: invokeinterface #19,  1           // InterfaceMethod io/grpc/netty/WriteQueue$QueuedCommand.promise:()Lio/netty/channel/ChannelPromise;
       6: ifnonnull     13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ldc           #20                 // String promise must not be set on command
      16: invokestatic  #21                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/Object;)V
      19: aload_0
      20: getfield      #12                 // Field channel:Lio/netty/channel/Channel;
      23: invokeinterface #22,  1           // InterfaceMethod io/netty/channel/Channel.newPromise:()Lio/netty/channel/ChannelPromise;
      28: astore_3
      29: aload_1
      30: aload_3
      31: invokeinterface #23,  2           // InterfaceMethod io/grpc/netty/WriteQueue$QueuedCommand.promise:(Lio/netty/channel/ChannelPromise;)V
      36: aload_0
      37: getfield      #15                 // Field queue:Ljava/util/Queue;
      40: aload_1
      41: invokeinterface #24,  2           // InterfaceMethod java/util/Queue.add:(Ljava/lang/Object;)Z
      46: pop
      47: iload_2
      48: ifeq          55
      51: aload_0
      52: invokevirtual #25                 // Method scheduleFlush:()V
      55: aload_3
      56: areturn

  void enqueue(java.lang.Runnable, boolean);
    Code:
       0: aload_0
       1: getfield      #15                 // Field queue:Ljava/util/Queue;
       4: new           #26                 // class io/grpc/netty/WriteQueue$RunnableCommand
       7: dup
       8: aload_1
       9: invokespecial #27                 // Method io/grpc/netty/WriteQueue$RunnableCommand."<init>":(Ljava/lang/Runnable;)V
      12: invokeinterface #24,  2           // InterfaceMethod java/util/Queue.add:(Ljava/lang/Object;)Z
      17: pop
      18: iload_2
      19: ifeq          26
      22: aload_0
      23: invokevirtual #25                 // Method scheduleFlush:()V
      26: return

  void drainNow();
    Code:
       0: aload_0
       1: getfield      #12                 // Field channel:Lio/netty/channel/Channel;
       4: invokeinterface #17,  1           // InterfaceMethod io/netty/channel/Channel.eventLoop:()Lio/netty/channel/EventLoop;
       9: invokeinterface #28,  1           // InterfaceMethod io/netty/channel/EventLoop.inEventLoop:()Z
      14: ldc           #29                 // String must be on the event loop
      16: invokestatic  #30                 // Method com/google/common/base/Preconditions.checkState:(ZLjava/lang/Object;)V
      19: aload_0
      20: getfield      #15                 // Field queue:Ljava/util/Queue;
      23: invokeinterface #31,  1           // InterfaceMethod java/util/Queue.peek:()Ljava/lang/Object;
      28: ifnonnull     32
      31: return
      32: aload_0
      33: invokespecial #1                  // Method flush:()V
      36: return

  private void flush();
    Code:
       0: ldc           #32                 // String WriteQueue.periodicFlush
       2: invokestatic  #33                 // Method io/perfmark/PerfMark.startTask:(Ljava/lang/String;)V
       5: iconst_0
       6: istore_2
       7: iconst_0
       8: istore_3
       9: aload_0
      10: getfield      #15                 // Field queue:Ljava/util/Queue;
      13: invokeinterface #34,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
      18: checkcast     #35                 // class io/grpc/netty/WriteQueue$QueuedCommand
      21: dup
      22: astore_1
      23: ifnull        86
      26: aload_1
      27: aload_0
      28: getfield      #12                 // Field channel:Lio/netty/channel/Channel;
      31: invokeinterface #36,  2           // InterfaceMethod io/grpc/netty/WriteQueue$QueuedCommand.run:(Lio/netty/channel/Channel;)V
      36: iinc          2, 1
      39: iload_2
      40: sipush        128
      43: if_icmpne     9
      46: iconst_0
      47: istore_2
      48: ldc           #38                 // String WriteQueue.flush0
      50: invokestatic  #33                 // Method io/perfmark/PerfMark.startTask:(Ljava/lang/String;)V
      53: aload_0
      54: getfield      #12                 // Field channel:Lio/netty/channel/Channel;
      57: invokeinterface #39,  1           // InterfaceMethod io/netty/channel/Channel.flush:()Lio/netty/channel/Channel;
      62: pop
      63: ldc           #38                 // String WriteQueue.flush0
      65: invokestatic  #40                 // Method io/perfmark/PerfMark.stopTask:(Ljava/lang/String;)V
      68: goto          81
      71: astore        4
      73: ldc           #38                 // String WriteQueue.flush0
      75: invokestatic  #40                 // Method io/perfmark/PerfMark.stopTask:(Ljava/lang/String;)V
      78: aload         4
      80: athrow
      81: iconst_1
      82: istore_3
      83: goto          9
      86: iload_2
      87: ifne          94
      90: iload_3
      91: ifne          127
      94: ldc           #41                 // String WriteQueue.flush1
      96: invokestatic  #33                 // Method io/perfmark/PerfMark.startTask:(Ljava/lang/String;)V
      99: aload_0
     100: getfield      #12                 // Field channel:Lio/netty/channel/Channel;
     103: invokeinterface #39,  1           // InterfaceMethod io/netty/channel/Channel.flush:()Lio/netty/channel/Channel;
     108: pop
     109: ldc           #41                 // String WriteQueue.flush1
     111: invokestatic  #40                 // Method io/perfmark/PerfMark.stopTask:(Ljava/lang/String;)V
     114: goto          127
     117: astore        5
     119: ldc           #41                 // String WriteQueue.flush1
     121: invokestatic  #40                 // Method io/perfmark/PerfMark.stopTask:(Ljava/lang/String;)V
     124: aload         5
     126: athrow
     127: ldc           #32                 // String WriteQueue.periodicFlush
     129: invokestatic  #40                 // Method io/perfmark/PerfMark.stopTask:(Ljava/lang/String;)V
     132: aload_0
     133: getfield      #8                  // Field scheduled:Ljava/util/concurrent/atomic/AtomicBoolean;
     136: iconst_0
     137: invokevirtual #42                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
     140: aload_0
     141: getfield      #15                 // Field queue:Ljava/util/Queue;
     144: invokeinterface #43,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
     149: ifne          193
     152: aload_0
     153: invokevirtual #25                 // Method scheduleFlush:()V
     156: goto          193
     159: astore        6
     161: ldc           #32                 // String WriteQueue.periodicFlush
     163: invokestatic  #40                 // Method io/perfmark/PerfMark.stopTask:(Ljava/lang/String;)V
     166: aload_0
     167: getfield      #8                  // Field scheduled:Ljava/util/concurrent/atomic/AtomicBoolean;
     170: iconst_0
     171: invokevirtual #42                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
     174: aload_0
     175: getfield      #15                 // Field queue:Ljava/util/Queue;
     178: invokeinterface #43,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
     183: ifne          190
     186: aload_0
     187: invokevirtual #25                 // Method scheduleFlush:()V
     190: aload         6
     192: athrow
     193: return
    Exception table:
       from    to  target type
          53    63    71   any
          71    73    71   any
          99   109   117   any
         117   119   117   any
           5   127   159   any
         159   161   159   any

  static void access$000(io.grpc.netty.WriteQueue);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method flush:()V
       4: return
}
