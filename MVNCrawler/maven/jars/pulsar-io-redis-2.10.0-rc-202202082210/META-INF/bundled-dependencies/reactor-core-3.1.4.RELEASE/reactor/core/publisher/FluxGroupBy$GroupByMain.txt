Compiled from "FluxGroupBy.java"
final class reactor.core.publisher.FluxGroupBy$GroupByMain<T, K, V> implements reactor.core.Fuseable$QueueSubscription<reactor.core.publisher.GroupedFlux<K, V>>, reactor.core.publisher.InnerOperator<T, reactor.core.publisher.GroupedFlux<K, V>> {
  final java.util.function.Function<? super T, ? extends K> keySelector;

  final java.util.function.Function<? super T, ? extends V> valueSelector;

  final java.util.Queue<reactor.core.publisher.GroupedFlux<K, V>> queue;

  final java.util.function.Supplier<? extends java.util.Queue<V>> groupQueueSupplier;

  final int prefetch;

  final java.util.Map<K, reactor.core.publisher.FluxGroupBy$UnicastGroupedFlux<K, V>> groupMap;

  final reactor.core.CoreSubscriber<? super reactor.core.publisher.GroupedFlux<K, V>> actual;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxGroupBy$GroupByMain> WIP;

  volatile long requested;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.FluxGroupBy$GroupByMain> REQUESTED;

  volatile boolean done;

  volatile java.lang.Throwable error;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxGroupBy$GroupByMain, java.lang.Throwable> ERROR;

  volatile int cancelled;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxGroupBy$GroupByMain> CANCELLED;

  volatile int groupCount;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxGroupBy$GroupByMain> GROUP_COUNT;

  org.reactivestreams.Subscription s;

  volatile boolean enableAsyncFusion;

  reactor.core.publisher.FluxGroupBy$GroupByMain(reactor.core.CoreSubscriber<? super reactor.core.publisher.GroupedFlux<K, V>>, java.util.Queue<reactor.core.publisher.GroupedFlux<K, V>>, java.util.function.Supplier<? extends java.util.Queue<V>>, int, java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends V>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field queue:Ljava/util/Queue;
      14: aload_0
      15: aload_3
      16: putfield      #4                  // Field groupQueueSupplier:Ljava/util/function/Supplier;
      19: aload_0
      20: iload         4
      22: putfield      #5                  // Field prefetch:I
      25: aload_0
      26: new           #6                  // class java/util/concurrent/ConcurrentHashMap
      29: dup
      30: invokespecial #7                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      33: putfield      #8                  // Field groupMap:Ljava/util/Map;
      36: aload_0
      37: aload         5
      39: putfield      #9                  // Field keySelector:Ljava/util/function/Function;
      42: aload_0
      43: aload         6
      45: putfield      #10                 // Field valueSelector:Ljava/util/function/Function;
      48: getstatic     #11                 // Field GROUP_COUNT:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      51: aload_0
      52: iconst_1
      53: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.lazySet:(Ljava/lang/Object;I)V
      56: return

  public final reactor.core.CoreSubscriber<? super reactor.core.publisher.GroupedFlux<K, V>> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #14                 // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          39
      11: aload_0
      12: aload_1
      13: putfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
      16: aload_0
      17: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      20: aload_0
      21: invokeinterface #15,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      26: aload_1
      27: aload_0
      28: getfield      #5                  // Field prefetch:I
      31: invokestatic  #16                 // Method reactor/core/publisher/Operators.unboundedOrPrefetch:(I)J
      34: invokeinterface #17,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      39: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #18                 // Field done:Z
       4: ifeq          21
       7: aload_1
       8: aload_0
       9: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      12: invokeinterface #19,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #20                 // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      20: return
      21: aload_0
      22: getfield      #9                  // Field keySelector:Ljava/util/function/Function;
      25: aload_1
      26: invokeinterface #21,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      31: ldc           #22                 // String The keySelector returned a null value
      33: invokestatic  #23                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      36: astore_2
      37: aload_0
      38: getfield      #10                 // Field valueSelector:Ljava/util/function/Function;
      41: aload_1
      42: invokeinterface #21,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      47: ldc           #24                 // String The valueSelector returned a null value
      49: invokestatic  #23                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      52: astore_3
      53: goto          82
      56: astore        4
      58: aload_0
      59: aload_0
      60: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
      63: aload         4
      65: aload_1
      66: aload_0
      67: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      70: invokeinterface #19,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      75: invokestatic  #26                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      78: invokevirtual #27                 // Method onError:(Ljava/lang/Throwable;)V
      81: return
      82: aload_0
      83: getfield      #8                  // Field groupMap:Ljava/util/Map;
      86: aload_2
      87: invokeinterface #28,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      92: checkcast     #29                 // class reactor/core/publisher/FluxGroupBy$UnicastGroupedFlux
      95: astore        4
      97: aload         4
      99: ifnonnull     186
     102: aload_0
     103: getfield      #30                 // Field cancelled:I
     106: ifne          192
     109: aload_0
     110: getfield      #4                  // Field groupQueueSupplier:Ljava/util/function/Supplier;
     113: invokeinterface #31,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
     118: checkcast     #32                 // class java/util/Queue
     121: astore        5
     123: getstatic     #11                 // Field GROUP_COUNT:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     126: aload_0
     127: invokevirtual #33                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
     130: pop
     131: new           #29                 // class reactor/core/publisher/FluxGroupBy$UnicastGroupedFlux
     134: dup
     135: aload_2
     136: aload         5
     138: aload_0
     139: aload_0
     140: getfield      #5                  // Field prefetch:I
     143: invokespecial #34                 // Method reactor/core/publisher/FluxGroupBy$UnicastGroupedFlux."<init>":(Ljava/lang/Object;Ljava/util/Queue;Lreactor/core/publisher/FluxGroupBy$GroupByMain;I)V
     146: astore        4
     148: aload         4
     150: aload_3
     151: invokevirtual #35                 // Method reactor/core/publisher/FluxGroupBy$UnicastGroupedFlux.onNext:(Ljava/lang/Object;)V
     154: aload_0
     155: getfield      #8                  // Field groupMap:Ljava/util/Map;
     158: aload_2
     159: aload         4
     161: invokeinterface #36,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     166: pop
     167: aload_0
     168: getfield      #3                  // Field queue:Ljava/util/Queue;
     171: aload         4
     173: invokeinterface #37,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
     178: pop
     179: aload_0
     180: invokevirtual #38                 // Method drain:()V
     183: goto          192
     186: aload         4
     188: aload_3
     189: invokevirtual #35                 // Method reactor/core/publisher/FluxGroupBy$UnicastGroupedFlux.onNext:(Ljava/lang/Object;)V
     192: return
    Exception table:
       from    to  target type
          21    53    56   Class java/lang/Throwable

  public void onError(java.lang.Throwable);
    Code:
       0: getstatic     #39                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #40                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
       8: ifeq          23
      11: aload_0
      12: iconst_1
      13: putfield      #18                 // Field done:Z
      16: aload_0
      17: invokevirtual #38                 // Method drain:()V
      20: goto          36
      23: aload_1
      24: aload_0
      25: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      28: invokeinterface #19,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      33: invokestatic  #41                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      36: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #18                 // Field done:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: getfield      #8                  // Field groupMap:Ljava/util/Map;
      12: invokeinterface #42,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
      17: invokeinterface #43,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      22: astore_1
      23: aload_1
      24: invokeinterface #44,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      29: ifeq          49
      32: aload_1
      33: invokeinterface #45,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      38: checkcast     #29                 // class reactor/core/publisher/FluxGroupBy$UnicastGroupedFlux
      41: astore_2
      42: aload_2
      43: invokevirtual #46                 // Method reactor/core/publisher/FluxGroupBy$UnicastGroupedFlux.onComplete:()V
      46: goto          23
      49: aload_0
      50: getfield      #8                  // Field groupMap:Ljava/util/Map;
      53: invokeinterface #47,  1           // InterfaceMethod java/util/Map.clear:()V
      58: getstatic     #11                 // Field GROUP_COUNT:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      61: aload_0
      62: invokevirtual #48                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
      65: pop
      66: aload_0
      67: iconst_1
      68: putfield      #18                 // Field done:Z
      71: aload_0
      72: invokevirtual #38                 // Method drain:()V
      75: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #49                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #50                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      16: if_acmpne     27
      19: aload_0
      20: getfield      #18                 // Field done:Z
      23: invokestatic  #51                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      26: areturn
      27: aload_1
      28: getstatic     #52                 // Field reactor/core/Scannable$Attr.REQUESTED_FROM_DOWNSTREAM:Lreactor/core/Scannable$Attr;
      31: if_acmpne     42
      34: aload_0
      35: getfield      #53                 // Field requested:J
      38: invokestatic  #54                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      41: areturn
      42: aload_1
      43: getstatic     #55                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      46: if_acmpne     57
      49: aload_0
      50: getfield      #5                  // Field prefetch:I
      53: invokestatic  #56                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      56: areturn
      57: aload_1
      58: getstatic     #57                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      61: if_acmpne     77
      64: aload_0
      65: getfield      #3                  // Field queue:Ljava/util/Queue;
      68: invokeinterface #58,  1           // InterfaceMethod java/util/Queue.size:()I
      73: invokestatic  #56                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      76: areturn
      77: aload_1
      78: getstatic     #59                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      81: if_acmpne     101
      84: aload_0
      85: getfield      #30                 // Field cancelled:I
      88: iconst_1
      89: if_icmpne     96
      92: iconst_1
      93: goto          97
      96: iconst_0
      97: invokestatic  #51                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     100: areturn
     101: aload_1
     102: getstatic     #60                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
     105: if_acmpne     113
     108: aload_0
     109: getfield      #61                 // Field error:Ljava/lang/Throwable;
     112: areturn
     113: aload_0
     114: aload_1
     115: invokespecial #62                 // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
     118: areturn

  public java.util.stream.Stream<? extends reactor.core.Scannable> inners();
    Code:
       0: aload_0
       1: getfield      #8                  // Field groupMap:Ljava/util/Map;
       4: invokeinterface #42,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
       9: invokeinterface #63,  1           // InterfaceMethod java/util/Collection.stream:()Ljava/util/stream/Stream;
      14: areturn

  void signalAsyncError();
    Code:
       0: getstatic     #39                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokestatic  #64                 // Method reactor/core/Exceptions.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Ljava/lang/Throwable;
       7: astore_1
       8: aload_1
       9: ifnonnull     22
      12: new           #65                 // class java/lang/IllegalStateException
      15: dup
      16: ldc           #66                 // String FluxGroupBy.signalAsyncError called without error push
      18: invokespecial #67                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      21: astore_1
      22: aload_0
      23: iconst_0
      24: putfield      #68                 // Field groupCount:I
      27: aload_0
      28: getfield      #8                  // Field groupMap:Ljava/util/Map;
      31: invokeinterface #42,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
      36: invokeinterface #43,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      41: astore_2
      42: aload_2
      43: invokeinterface #44,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      48: ifeq          69
      51: aload_2
      52: invokeinterface #45,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      57: checkcast     #29                 // class reactor/core/publisher/FluxGroupBy$UnicastGroupedFlux
      60: astore_3
      61: aload_3
      62: aload_1
      63: invokevirtual #69                 // Method reactor/core/publisher/FluxGroupBy$UnicastGroupedFlux.onError:(Ljava/lang/Throwable;)V
      66: goto          42
      69: aload_0
      70: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      73: aload_1
      74: invokeinterface #70,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      79: aload_0
      80: getfield      #8                  // Field groupMap:Ljava/util/Map;
      83: invokeinterface #47,  1           // InterfaceMethod java/util/Map.clear:()V
      88: return

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #71                 // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          20
       7: getstatic     #72                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      10: aload_0
      11: lload_1
      12: invokestatic  #73                 // Method reactor/core/publisher/Operators.addCap:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
      15: pop2
      16: aload_0
      17: invokevirtual #38                 // Method drain:()V
      20: return

  public void cancel();
    Code:
       0: getstatic     #74                 // Field CANCELLED:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: iconst_0
       5: iconst_1
       6: invokevirtual #75                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
       9: ifeq          93
      12: getstatic     #11                 // Field GROUP_COUNT:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      15: aload_0
      16: invokevirtual #48                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
      19: ifne          34
      22: aload_0
      23: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
      26: invokeinterface #76,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      31: goto          93
      34: aload_0
      35: getfield      #77                 // Field enableAsyncFusion:Z
      38: ifne          93
      41: getstatic     #78                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      44: aload_0
      45: invokevirtual #33                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
      48: ifne          93
      51: aload_0
      52: getfield      #3                  // Field queue:Ljava/util/Queue;
      55: invokeinterface #79,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
      60: checkcast     #80                 // class reactor/core/publisher/GroupedFlux
      63: dup
      64: astore_1
      65: ifnull        78
      68: aload_1
      69: checkcast     #29                 // class reactor/core/publisher/FluxGroupBy$UnicastGroupedFlux
      72: invokevirtual #81                 // Method reactor/core/publisher/FluxGroupBy$UnicastGroupedFlux.cancel:()V
      75: goto          51
      78: getstatic     #78                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      81: aload_0
      82: invokevirtual #48                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
      85: ifne          89
      88: return
      89: aload_0
      90: invokevirtual #82                 // Method drainLoop:()V
      93: return

  void groupTerminated(K);
    Code:
       0: aload_0
       1: getfield      #68                 // Field groupCount:I
       4: ifne          8
       7: return
       8: aload_0
       9: getfield      #8                  // Field groupMap:Ljava/util/Map;
      12: aload_1
      13: invokeinterface #83,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      18: pop
      19: getstatic     #11                 // Field GROUP_COUNT:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      22: aload_0
      23: invokevirtual #48                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
      26: ifne          38
      29: aload_0
      30: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
      33: invokeinterface #76,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      38: return

  void drain();
    Code:
       0: getstatic     #78                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #33                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifeq          11
      10: return
      11: aload_0
      12: getfield      #77                 // Field enableAsyncFusion:Z
      15: ifeq          25
      18: aload_0
      19: invokevirtual #84                 // Method drainFused:()V
      22: goto          29
      25: aload_0
      26: invokevirtual #82                 // Method drainLoop:()V
      29: return

  void drainFused();
    Code:
       0: iconst_1
       1: istore_1
       2: aload_0
       3: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       6: astore_2
       7: aload_0
       8: getfield      #3                  // Field queue:Ljava/util/Queue;
      11: astore_3
      12: aload_0
      13: getfield      #30                 // Field cancelled:I
      16: ifeq          26
      19: aload_3
      20: invokeinterface #85,  1           // InterfaceMethod java/util/Queue.clear:()V
      25: return
      26: aload_0
      27: getfield      #18                 // Field done:Z
      30: istore        4
      32: aload_2
      33: aconst_null
      34: invokeinterface #86,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
      39: iload         4
      41: ifeq          69
      44: aload_0
      45: getfield      #61                 // Field error:Ljava/lang/Throwable;
      48: astore        5
      50: aload         5
      52: ifnull        62
      55: aload_0
      56: invokevirtual #87                 // Method signalAsyncError:()V
      59: goto          68
      62: aload_2
      63: invokeinterface #88,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      68: return
      69: getstatic     #78                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      72: aload_0
      73: iload_1
      74: ineg
      75: invokevirtual #89                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
      78: istore_1
      79: iload_1
      80: ifne          86
      83: goto          89
      86: goto          12
      89: return

  void drainLoop();
    Code:
       0: iconst_1
       1: istore_1
       2: aload_0
       3: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       6: astore_2
       7: aload_0
       8: getfield      #3                  // Field queue:Ljava/util/Queue;
      11: astore_3
      12: aload_0
      13: getfield      #53                 // Field requested:J
      16: lstore        4
      18: lconst_0
      19: lstore        6
      21: lload         6
      23: lload         4
      25: lcmp
      26: ifeq          97
      29: aload_0
      30: getfield      #18                 // Field done:Z
      33: istore        8
      35: aload_3
      36: invokeinterface #79,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
      41: checkcast     #80                 // class reactor/core/publisher/GroupedFlux
      44: astore        9
      46: aload         9
      48: ifnonnull     55
      51: iconst_1
      52: goto          56
      55: iconst_0
      56: istore        10
      58: aload_0
      59: iload         8
      61: iload         10
      63: aload_2
      64: aload_3
      65: invokevirtual #90                 // Method checkTerminated:(ZZLorg/reactivestreams/Subscriber;Ljava/util/Queue;)Z
      68: ifeq          72
      71: return
      72: iload         10
      74: ifeq          80
      77: goto          97
      80: aload_2
      81: aload         9
      83: invokeinterface #86,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
      88: lload         6
      90: lconst_1
      91: ladd
      92: lstore        6
      94: goto          21
      97: lload         6
      99: lload         4
     101: lcmp
     102: ifne          125
     105: aload_0
     106: aload_0
     107: getfield      #18                 // Field done:Z
     110: aload_3
     111: invokeinterface #91,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
     116: aload_2
     117: aload_3
     118: invokevirtual #90                 // Method checkTerminated:(ZZLorg/reactivestreams/Subscriber;Ljava/util/Queue;)Z
     121: ifeq          125
     124: return
     125: lload         6
     127: lconst_0
     128: lcmp
     129: ifeq          163
     132: aload_0
     133: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
     136: lload         6
     138: invokeinterface #17,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     143: lload         4
     145: ldc2_w        #93                 // long 9223372036854775807l
     148: lcmp
     149: ifeq          163
     152: getstatic     #72                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
     155: aload_0
     156: lload         6
     158: lneg
     159: invokevirtual #95                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.addAndGet:(Ljava/lang/Object;J)J
     162: pop2
     163: getstatic     #78                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     166: aload_0
     167: iload_1
     168: ineg
     169: invokevirtual #89                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
     172: istore_1
     173: iload_1
     174: ifne          180
     177: goto          183
     180: goto          12
     183: return

  boolean checkTerminated(boolean, boolean, org.reactivestreams.Subscriber<?>, java.util.Queue<reactor.core.publisher.GroupedFlux<K, V>>);
    Code:
       0: iload_1
       1: ifeq          50
       4: aload_0
       5: getfield      #61                 // Field error:Ljava/lang/Throwable;
       8: astore        5
      10: aload         5
      12: ifnull        38
      15: aload         5
      17: getstatic     #96                 // Field reactor/core/Exceptions.TERMINATED:Ljava/lang/Throwable;
      20: if_acmpeq     38
      23: aload_0
      24: getfield      #3                  // Field queue:Ljava/util/Queue;
      27: invokeinterface #85,  1           // InterfaceMethod java/util/Queue.clear:()V
      32: aload_0
      33: invokevirtual #87                 // Method signalAsyncError:()V
      36: iconst_1
      37: ireturn
      38: iload_2
      39: ifeq          50
      42: aload_3
      43: invokeinterface #88,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      48: iconst_1
      49: ireturn
      50: iconst_0
      51: ireturn

  public reactor.core.publisher.GroupedFlux<K, V> poll();
    Code:
       0: aload_0
       1: getfield      #3                  // Field queue:Ljava/util/Queue;
       4: invokeinterface #79,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
       9: checkcast     #80                 // class reactor/core/publisher/GroupedFlux
      12: areturn

  public int size();
    Code:
       0: aload_0
       1: getfield      #3                  // Field queue:Ljava/util/Queue;
       4: invokeinterface #58,  1           // InterfaceMethod java/util/Queue.size:()I
       9: ireturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #3                  // Field queue:Ljava/util/Queue;
       4: invokeinterface #91,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
       9: ireturn

  public void clear();
    Code:
       0: aload_0
       1: getfield      #3                  // Field queue:Ljava/util/Queue;
       4: invokeinterface #85,  1           // InterfaceMethod java/util/Queue.clear:()V
       9: return

  public int requestFusion(int);
    Code:
       0: iload_1
       1: iconst_2
       2: iand
       3: ifeq          13
       6: aload_0
       7: iconst_1
       8: putfield      #77                 // Field enableAsyncFusion:Z
      11: iconst_2
      12: ireturn
      13: iconst_0
      14: ireturn

  public java.lang.Object poll();
    Code:
       0: aload_0
       1: invokevirtual #98                 // Method poll:()Lreactor/core/publisher/GroupedFlux;
       4: areturn

  static {};
    Code:
       0: ldc           #99                 // class reactor/core/publisher/FluxGroupBy$GroupByMain
       2: ldc           #100                // String wip
       4: invokestatic  #101                // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #78                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: ldc           #99                 // class reactor/core/publisher/FluxGroupBy$GroupByMain
      12: ldc           #102                // String requested
      14: invokestatic  #103                // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      17: putstatic     #72                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      20: ldc           #99                 // class reactor/core/publisher/FluxGroupBy$GroupByMain
      22: ldc           #25                 // class java/lang/Throwable
      24: ldc           #104                // String error
      26: invokestatic  #105                // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      29: putstatic     #39                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      32: ldc           #99                 // class reactor/core/publisher/FluxGroupBy$GroupByMain
      34: ldc           #106                // String cancelled
      36: invokestatic  #101                // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      39: putstatic     #74                 // Field CANCELLED:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      42: ldc           #99                 // class reactor/core/publisher/FluxGroupBy$GroupByMain
      44: ldc           #107                // String groupCount
      46: invokestatic  #101                // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      49: putstatic     #11                 // Field GROUP_COUNT:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      52: return
}
