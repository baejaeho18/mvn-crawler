Compiled from "FluxRefCount.java"
final class reactor.core.publisher.FluxRefCount$RefCountInner<T> implements reactor.core.Fuseable$QueueSubscription<T>, reactor.core.publisher.InnerOperator<T, T> {
  final reactor.core.CoreSubscriber<? super T> actual;

  final reactor.core.publisher.FluxRefCount$RefCountMonitor<T> parent;

  org.reactivestreams.Subscription s;

  reactor.core.Fuseable$QueueSubscription<T> qs;

  reactor.core.publisher.FluxRefCount$RefCountInner(reactor.core.CoreSubscriber<? super T>, reactor.core.publisher.FluxRefCount$RefCountMonitor<T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field parent:Lreactor/core/publisher/FluxRefCount$RefCountMonitor;
      14: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #4                  // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #5                  // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_0
      13: aload_1
      14: invokespecial #6                  // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      17: areturn

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #5                  // Field s:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #7                  // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          26
      11: aload_0
      12: aload_1
      13: putfield      #5                  // Field s:Lorg/reactivestreams/Subscription;
      16: aload_0
      17: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      20: aload_0
      21: invokeinterface #8,  2            // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      26: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: aload_1
       5: invokeinterface #9,  2            // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      10: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: aload_1
       5: invokeinterface #10,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      10: aload_0
      11: getfield      #3                  // Field parent:Lreactor/core/publisher/FluxRefCount$RefCountMonitor;
      14: invokevirtual #11                 // Method reactor/core/publisher/FluxRefCount$RefCountMonitor.upstreamFinished:()V
      17: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: invokeinterface #12,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
       9: aload_0
      10: getfield      #3                  // Field parent:Lreactor/core/publisher/FluxRefCount$RefCountMonitor;
      13: invokevirtual #11                 // Method reactor/core/publisher/FluxRefCount$RefCountMonitor.upstreamFinished:()V
      16: return

  public void request(long);
    Code:
       0: aload_0
       1: getfield      #5                  // Field s:Lorg/reactivestreams/Subscription;
       4: lload_1
       5: invokeinterface #13,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      10: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #5                  // Field s:Lorg/reactivestreams/Subscription;
       4: invokeinterface #14,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
       9: aload_0
      10: getfield      #3                  // Field parent:Lreactor/core/publisher/FluxRefCount$RefCountMonitor;
      13: invokevirtual #15                 // Method reactor/core/publisher/FluxRefCount$RefCountMonitor.innerCancelled:()V
      16: return

  public reactor.core.CoreSubscriber<? super T> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public int requestFusion(int);
    Code:
       0: aload_0
       1: getfield      #5                  // Field s:Lorg/reactivestreams/Subscription;
       4: instanceof    #16                 // class reactor/core/Fuseable$QueueSubscription
       7: ifeq          32
      10: aload_0
      11: aload_0
      12: getfield      #5                  // Field s:Lorg/reactivestreams/Subscription;
      15: checkcast     #16                 // class reactor/core/Fuseable$QueueSubscription
      18: putfield      #17                 // Field qs:Lreactor/core/Fuseable$QueueSubscription;
      21: aload_0
      22: getfield      #17                 // Field qs:Lreactor/core/Fuseable$QueueSubscription;
      25: iload_1
      26: invokeinterface #18,  2           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.requestFusion:(I)I
      31: ireturn
      32: iconst_0
      33: ireturn

  public T poll();
    Code:
       0: aload_0
       1: getfield      #17                 // Field qs:Lreactor/core/Fuseable$QueueSubscription;
       4: invokeinterface #20,  1           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.poll:()Ljava/lang/Object;
       9: areturn

  public int size();
    Code:
       0: aload_0
       1: getfield      #17                 // Field qs:Lreactor/core/Fuseable$QueueSubscription;
       4: invokeinterface #21,  1           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.size:()I
       9: ireturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #17                 // Field qs:Lreactor/core/Fuseable$QueueSubscription;
       4: invokeinterface #22,  1           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.isEmpty:()Z
       9: ireturn

  public void clear();
    Code:
       0: aload_0
       1: getfield      #17                 // Field qs:Lreactor/core/Fuseable$QueueSubscription;
       4: invokeinterface #23,  1           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.clear:()V
       9: return
}
