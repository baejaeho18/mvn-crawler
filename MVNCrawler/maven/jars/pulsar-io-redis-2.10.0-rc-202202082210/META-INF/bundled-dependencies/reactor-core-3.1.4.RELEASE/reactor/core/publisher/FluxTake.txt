Compiled from "FluxTake.java"
final class reactor.core.publisher.FluxTake<T> extends reactor.core.publisher.FluxOperator<T, T> {
  final long n;

  reactor.core.publisher.FluxTake(reactor.core.publisher.Flux<? extends T>, long);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxOperator."<init>":(Lreactor/core/publisher/Flux;)V
       5: lload_2
       6: lconst_0
       7: lcmp
       8: ifge          38
      11: new           #2                  // class java/lang/IllegalArgumentException
      14: dup
      15: new           #3                  // class java/lang/StringBuilder
      18: dup
      19: invokespecial #4                  // Method java/lang/StringBuilder."<init>":()V
      22: ldc           #5                  // String n >= 0 required but it was
      24: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      27: lload_2
      28: invokevirtual #7                  // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      31: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      34: invokespecial #9                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      37: athrow
      38: aload_0
      39: lload_2
      40: putfield      #10                 // Field n:J
      43: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_1
       1: instanceof    #11                 // class reactor/core/Fuseable$ConditionalSubscriber
       4: ifeq          32
       7: aload_0
       8: getfield      #12                 // Field source:Lreactor/core/publisher/Flux;
      11: new           #13                 // class reactor/core/publisher/FluxTake$TakeConditionalSubscriber
      14: dup
      15: aload_1
      16: checkcast     #11                 // class reactor/core/Fuseable$ConditionalSubscriber
      19: aload_0
      20: getfield      #10                 // Field n:J
      23: invokespecial #14                 // Method reactor/core/publisher/FluxTake$TakeConditionalSubscriber."<init>":(Lreactor/core/Fuseable$ConditionalSubscriber;J)V
      26: invokevirtual #15                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      29: goto          51
      32: aload_0
      33: getfield      #12                 // Field source:Lreactor/core/publisher/Flux;
      36: new           #16                 // class reactor/core/publisher/FluxTake$TakeSubscriber
      39: dup
      40: aload_1
      41: aload_0
      42: getfield      #10                 // Field n:J
      45: invokespecial #17                 // Method reactor/core/publisher/FluxTake$TakeSubscriber."<init>":(Lreactor/core/CoreSubscriber;J)V
      48: invokevirtual #15                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      51: return

  public int getPrefetch();
    Code:
       0: ldc           #19                 // int 2147483647
       2: ireturn
}
