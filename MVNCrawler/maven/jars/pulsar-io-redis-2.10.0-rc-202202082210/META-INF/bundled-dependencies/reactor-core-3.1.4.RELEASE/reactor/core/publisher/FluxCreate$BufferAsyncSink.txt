Compiled from "FluxCreate.java"
final class reactor.core.publisher.FluxCreate$BufferAsyncSink<T> extends reactor.core.publisher.FluxCreate$BaseSink<T> {
  final java.util.Queue<T> queue;

  java.lang.Throwable error;

  volatile boolean done;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxCreate$BufferAsyncSink> WIP;

  reactor.core.publisher.FluxCreate$BufferAsyncSink(reactor.core.CoreSubscriber<? super T>, int);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxCreate$BaseSink."<init>":(Lreactor/core/CoreSubscriber;)V
       5: aload_0
       6: iload_2
       7: invokestatic  #2                  // Method reactor/util/concurrent/Queues.unbounded:(I)Ljava/util/function/Supplier;
      10: invokeinterface #3,  1            // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      15: checkcast     #4                  // class java/util/Queue
      18: putfield      #5                  // Field queue:Ljava/util/Queue;
      21: return

  public reactor.core.publisher.FluxSink<T> next(T);
    Code:
       0: aload_0
       1: getfield      #5                  // Field queue:Ljava/util/Queue;
       4: aload_1
       5: invokeinterface #6,  2            // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
      10: pop
      11: aload_0
      12: invokevirtual #7                  // Method drain:()V
      15: aload_0
      16: areturn

  public void error(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #8                  // Field error:Ljava/lang/Throwable;
       5: aload_0
       6: iconst_1
       7: putfield      #9                  // Field done:Z
      10: aload_0
      11: invokevirtual #7                  // Method drain:()V
      14: return

  public void complete();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #9                  // Field done:Z
       5: aload_0
       6: invokevirtual #7                  // Method drain:()V
       9: return

  void onRequestedFromDownstream();
    Code:
       0: aload_0
       1: invokevirtual #7                  // Method drain:()V
       4: return

  void onCancel();
    Code:
       0: getstatic     #10                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifne          19
      10: aload_0
      11: getfield      #5                  // Field queue:Ljava/util/Queue;
      14: invokeinterface #12,  1           // InterfaceMethod java/util/Queue.clear:()V
      19: return

  void drain();
    Code:
       0: getstatic     #10                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifeq          11
      10: return
      11: iconst_1
      12: istore_1
      13: aload_0
      14: getfield      #13                 // Field actual:Lreactor/core/CoreSubscriber;
      17: astore_2
      18: aload_0
      19: getfield      #5                  // Field queue:Ljava/util/Queue;
      22: astore_3
      23: aload_0
      24: getfield      #14                 // Field requested:J
      27: lstore        4
      29: lconst_0
      30: lstore        6
      32: lload         6
      34: lload         4
      36: lcmp
      37: ifeq          140
      40: aload_0
      41: invokevirtual #15                 // Method isCancelled:()Z
      44: ifeq          54
      47: aload_3
      48: invokeinterface #12,  1           // InterfaceMethod java/util/Queue.clear:()V
      53: return
      54: aload_0
      55: getfield      #9                  // Field done:Z
      58: istore        8
      60: aload_3
      61: invokeinterface #16,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
      66: astore        9
      68: aload         9
      70: ifnonnull     77
      73: iconst_1
      74: goto          78
      77: iconst_0
      78: istore        10
      80: iload         8
      82: ifeq          115
      85: iload         10
      87: ifeq          115
      90: aload_0
      91: getfield      #8                  // Field error:Ljava/lang/Throwable;
      94: astore        11
      96: aload         11
      98: ifnull        110
     101: aload_0
     102: aload         11
     104: invokespecial #17                 // Method reactor/core/publisher/FluxCreate$BaseSink.error:(Ljava/lang/Throwable;)V
     107: goto          114
     110: aload_0
     111: invokespecial #18                 // Method reactor/core/publisher/FluxCreate$BaseSink.complete:()V
     114: return
     115: iload         10
     117: ifeq          123
     120: goto          140
     123: aload_2
     124: aload         9
     126: invokeinterface #19,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
     131: lload         6
     133: lconst_1
     134: ladd
     135: lstore        6
     137: goto          32
     140: lload         6
     142: lload         4
     144: lcmp
     145: ifne          211
     148: aload_0
     149: invokevirtual #15                 // Method isCancelled:()Z
     152: ifeq          162
     155: aload_3
     156: invokeinterface #12,  1           // InterfaceMethod java/util/Queue.clear:()V
     161: return
     162: aload_0
     163: getfield      #9                  // Field done:Z
     166: istore        8
     168: aload_3
     169: invokeinterface #20,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
     174: istore        9
     176: iload         8
     178: ifeq          211
     181: iload         9
     183: ifeq          211
     186: aload_0
     187: getfield      #8                  // Field error:Ljava/lang/Throwable;
     190: astore        10
     192: aload         10
     194: ifnull        206
     197: aload_0
     198: aload         10
     200: invokespecial #17                 // Method reactor/core/publisher/FluxCreate$BaseSink.error:(Ljava/lang/Throwable;)V
     203: goto          210
     206: aload_0
     207: invokespecial #18                 // Method reactor/core/publisher/FluxCreate$BaseSink.complete:()V
     210: return
     211: lload         6
     213: lconst_0
     214: lcmp
     215: ifeq          228
     218: getstatic     #21                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
     221: aload_0
     222: lload         6
     224: invokestatic  #22                 // Method reactor/core/publisher/Operators.produced:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
     227: pop2
     228: getstatic     #10                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     231: aload_0
     232: iload_1
     233: ineg
     234: invokevirtual #23                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
     237: istore_1
     238: iload_1
     239: ifne          245
     242: goto          248
     245: goto          23
     248: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #24                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
       4: if_acmpne     20
       7: aload_0
       8: getfield      #5                  // Field queue:Ljava/util/Queue;
      11: invokeinterface #25,  1           // InterfaceMethod java/util/Queue.size:()I
      16: invokestatic  #26                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      19: areturn
      20: aload_1
      21: getstatic     #27                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      24: if_acmpne     35
      27: aload_0
      28: getfield      #9                  // Field done:Z
      31: invokestatic  #28                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      34: areturn
      35: aload_1
      36: getstatic     #29                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
      39: if_acmpne     47
      42: aload_0
      43: getfield      #8                  // Field error:Ljava/lang/Throwable;
      46: areturn
      47: aload_0
      48: aload_1
      49: invokespecial #30                 // Method reactor/core/publisher/FluxCreate$BaseSink.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      52: areturn

  static {};
    Code:
       0: ldc           #31                 // class reactor/core/publisher/FluxCreate$BufferAsyncSink
       2: ldc           #32                 // String wip
       4: invokestatic  #33                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #10                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: return
}
