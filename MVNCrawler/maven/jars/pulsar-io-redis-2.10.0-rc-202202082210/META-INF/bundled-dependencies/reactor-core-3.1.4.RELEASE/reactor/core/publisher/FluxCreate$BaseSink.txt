Compiled from "FluxCreate.java"
abstract class reactor.core.publisher.FluxCreate$BaseSink<T> extends java.util.concurrent.atomic.AtomicBoolean implements reactor.core.publisher.FluxSink<T>, reactor.core.publisher.InnerProducer<T> {
  final reactor.core.CoreSubscriber<? super T> actual;

  volatile reactor.core.Disposable disposable;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxCreate$BaseSink, reactor.core.Disposable> DISPOSABLE;

  volatile long requested;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.FluxCreate$BaseSink> REQUESTED;

  volatile java.util.function.LongConsumer requestConsumer;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxCreate$BaseSink, java.util.function.LongConsumer> REQUEST_CONSUMER;

  reactor.core.publisher.FluxCreate$BaseSink(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: return

  public reactor.util.context.Context currentContext();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: invokeinterface #3,  1            // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
       9: areturn

  public void complete();
    Code:
       0: aload_0
       1: invokevirtual #4                  // Method isCancelled:()Z
       4: ifeq          8
       7: return
       8: aload_0
       9: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      12: invokeinterface #5,  1            // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      17: aload_0
      18: iconst_0
      19: invokevirtual #6                  // Method disposeResource:(Z)V
      22: goto          33
      25: astore_1
      26: aload_0
      27: iconst_0
      28: invokevirtual #6                  // Method disposeResource:(Z)V
      31: aload_1
      32: athrow
      33: return
    Exception table:
       from    to  target type
           8    17    25   any

  public void error(java.lang.Throwable);
    Code:
       0: aload_0
       1: invokevirtual #4                  // Method isCancelled:()Z
       4: ifeq          21
       7: aload_1
       8: aload_0
       9: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      12: invokeinterface #3,  1            // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #7                  // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      20: return
      21: aload_0
      22: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      25: aload_1
      26: invokeinterface #8,  2            // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      31: aload_0
      32: iconst_0
      33: invokevirtual #6                  // Method disposeResource:(Z)V
      36: goto          47
      39: astore_2
      40: aload_0
      41: iconst_0
      42: invokevirtual #6                  // Method disposeResource:(Z)V
      45: aload_2
      46: athrow
      47: return
    Exception table:
       from    to  target type
          21    31    39   any

  public final void cancel();
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #6                  // Method disposeResource:(Z)V
       5: aload_0
       6: invokevirtual #9                  // Method onCancel:()V
       9: return

  void disposeResource(boolean);
    Code:
       0: aload_0
       1: getfield      #10                 // Field disposable:Lreactor/core/Disposable;
       4: astore_2
       5: aload_2
       6: getstatic     #11                 // Field reactor/core/publisher/OperatorDisposables.DISPOSED:Lreactor/core/Disposable;
       9: if_acmpeq     61
      12: getstatic     #12                 // Field DISPOSABLE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      15: aload_0
      16: getstatic     #11                 // Field reactor/core/publisher/OperatorDisposables.DISPOSED:Lreactor/core/Disposable;
      19: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      22: checkcast     #14                 // class reactor/core/Disposable
      25: astore_2
      26: aload_2
      27: ifnull        61
      30: aload_2
      31: getstatic     #11                 // Field reactor/core/publisher/OperatorDisposables.DISPOSED:Lreactor/core/Disposable;
      34: if_acmpeq     61
      37: iload_1
      38: ifeq          55
      41: aload_2
      42: instanceof    #15                 // class reactor/core/publisher/FluxCreate$SinkDisposable
      45: ifeq          55
      48: aload_2
      49: checkcast     #15                 // class reactor/core/publisher/FluxCreate$SinkDisposable
      52: invokevirtual #16                 // Method reactor/core/publisher/FluxCreate$SinkDisposable.cancel:()V
      55: aload_2
      56: invokeinterface #17,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
      61: return

  public long requestedFromDownstream();
    Code:
       0: aload_0
       1: getfield      #18                 // Field requested:J
       4: lreturn

  void onCancel();
    Code:
       0: return

  public final boolean isCancelled();
    Code:
       0: aload_0
       1: getfield      #10                 // Field disposable:Lreactor/core/Disposable;
       4: invokestatic  #19                 // Method reactor/core/publisher/OperatorDisposables.isDisposed:(Lreactor/core/Disposable;)Z
       7: ireturn

  public final void request(long);
    Code:
       0: lload_1
       1: invokestatic  #20                 // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          49
       7: getstatic     #21                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      10: aload_0
      11: lload_1
      12: invokestatic  #22                 // Method reactor/core/publisher/Operators.addCap:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
      15: pop2
      16: aload_0
      17: getfield      #23                 // Field requestConsumer:Ljava/util/function/LongConsumer;
      20: astore_3
      21: lload_1
      22: lconst_0
      23: lcmp
      24: ifle          45
      27: aload_3
      28: ifnull        45
      31: aload_0
      32: invokevirtual #4                  // Method isCancelled:()Z
      35: ifne          45
      38: aload_3
      39: lload_1
      40: invokeinterface #24,  3           // InterfaceMethod java/util/function/LongConsumer.accept:(J)V
      45: aload_0
      46: invokevirtual #25                 // Method onRequestedFromDownstream:()V
      49: return

  void onRequestedFromDownstream();
    Code:
       0: return

  public reactor.core.CoreSubscriber<? super T> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public reactor.core.publisher.FluxSink<T> onRequest(java.util.function.LongConsumer);
    Code:
       0: aload_1
       1: ldc           #26                 // String onRequest
       3: invokestatic  #27                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: aload_1
       9: invokedynamic #28,  0             // InvokeDynamic #0:accept:()Ljava/util/function/LongConsumer;
      14: ldc2_w        #30                 // long 9223372036854775807l
      17: invokevirtual #32                 // Method onRequest:(Ljava/util/function/LongConsumer;Ljava/util/function/LongConsumer;J)V
      20: aload_0
      21: areturn

  protected void onRequest(java.util.function.LongConsumer, java.util.function.LongConsumer, long);
    Code:
       0: getstatic     #33                 // Field REQUEST_CONSUMER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aconst_null
       5: aload_2
       6: invokevirtual #34                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
       9: ifne          22
      12: new           #35                 // class java/lang/IllegalStateException
      15: dup
      16: ldc           #36                 // String A consumer has already been assigned to consume requests
      18: invokespecial #37                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      21: athrow
      22: lload_3
      23: lconst_0
      24: lcmp
      25: ifle          35
      28: aload_1
      29: lload_3
      30: invokeinterface #24,  3           // InterfaceMethod java/util/function/LongConsumer.accept:(J)V
      35: return

  public final reactor.core.publisher.FluxSink<T> onCancel(reactor.core.Disposable);
    Code:
       0: aload_1
       1: ldc           #38                 // String onCancel
       3: invokestatic  #27                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: new           #15                 // class reactor/core/publisher/FluxCreate$SinkDisposable
      10: dup
      11: aconst_null
      12: aload_1
      13: invokespecial #39                 // Method reactor/core/publisher/FluxCreate$SinkDisposable."<init>":(Lreactor/core/Disposable;Lreactor/core/Disposable;)V
      16: astore_2
      17: getstatic     #12                 // Field DISPOSABLE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      20: aload_0
      21: aconst_null
      22: aload_2
      23: invokevirtual #34                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      26: ifne          70
      29: aload_0
      30: getfield      #10                 // Field disposable:Lreactor/core/Disposable;
      33: astore_3
      34: aload_3
      35: instanceof    #15                 // class reactor/core/publisher/FluxCreate$SinkDisposable
      38: ifeq          70
      41: aload_3
      42: checkcast     #15                 // class reactor/core/publisher/FluxCreate$SinkDisposable
      45: astore        4
      47: aload         4
      49: getfield      #40                 // Field reactor/core/publisher/FluxCreate$SinkDisposable.onCancel:Lreactor/core/Disposable;
      52: ifnonnull     64
      55: aload         4
      57: aload_1
      58: putfield      #40                 // Field reactor/core/publisher/FluxCreate$SinkDisposable.onCancel:Lreactor/core/Disposable;
      61: goto          70
      64: aload_1
      65: invokeinterface #17,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
      70: aload_0
      71: areturn

  public final reactor.core.publisher.FluxSink<T> onDispose(reactor.core.Disposable);
    Code:
       0: aload_1
       1: ldc           #41                 // String onDispose
       3: invokestatic  #27                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: new           #15                 // class reactor/core/publisher/FluxCreate$SinkDisposable
      10: dup
      11: aload_1
      12: aconst_null
      13: invokespecial #39                 // Method reactor/core/publisher/FluxCreate$SinkDisposable."<init>":(Lreactor/core/Disposable;Lreactor/core/Disposable;)V
      16: astore_2
      17: getstatic     #12                 // Field DISPOSABLE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      20: aload_0
      21: aconst_null
      22: aload_2
      23: invokevirtual #34                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      26: ifne          86
      29: aload_0
      30: getfield      #10                 // Field disposable:Lreactor/core/Disposable;
      33: astore_3
      34: aload_3
      35: getstatic     #11                 // Field reactor/core/publisher/OperatorDisposables.DISPOSED:Lreactor/core/Disposable;
      38: if_acmpne     50
      41: aload_1
      42: invokeinterface #17,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
      47: goto          86
      50: aload_3
      51: instanceof    #15                 // class reactor/core/publisher/FluxCreate$SinkDisposable
      54: ifeq          86
      57: aload_3
      58: checkcast     #15                 // class reactor/core/publisher/FluxCreate$SinkDisposable
      61: astore        4
      63: aload         4
      65: getfield      #42                 // Field reactor/core/publisher/FluxCreate$SinkDisposable.disposable:Lreactor/core/Disposable;
      68: ifnonnull     80
      71: aload         4
      73: aload_1
      74: putfield      #42                 // Field reactor/core/publisher/FluxCreate$SinkDisposable.disposable:Lreactor/core/Disposable;
      77: goto          86
      80: aload_1
      81: invokeinterface #17,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
      86: aload_0
      87: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #43                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
       4: if_acmpeq     14
       7: aload_1
       8: getstatic     #44                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      11: if_acmpne     25
      14: aload_0
      15: getfield      #10                 // Field disposable:Lreactor/core/Disposable;
      18: invokestatic  #19                 // Method reactor/core/publisher/OperatorDisposables.isDisposed:(Lreactor/core/Disposable;)Z
      21: invokestatic  #45                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      24: areturn
      25: aload_1
      26: getstatic     #46                 // Field reactor/core/Scannable$Attr.REQUESTED_FROM_DOWNSTREAM:Lreactor/core/Scannable$Attr;
      29: if_acmpne     40
      32: aload_0
      33: getfield      #18                 // Field requested:J
      36: invokestatic  #47                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      39: areturn
      40: aload_0
      41: aload_1
      42: invokespecial #48                 // InterfaceMethod reactor/core/publisher/InnerProducer.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      45: areturn

  private static void lambda$onRequest$0(long);
    Code:
       0: return

  static {};
    Code:
       0: ldc           #49                 // class reactor/core/publisher/FluxCreate$BaseSink
       2: ldc           #14                 // class reactor/core/Disposable
       4: ldc           #50                 // String disposable
       6: invokestatic  #51                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #12                 // Field DISPOSABLE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: ldc           #49                 // class reactor/core/publisher/FluxCreate$BaseSink
      14: ldc           #52                 // String requested
      16: invokestatic  #53                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      19: putstatic     #21                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      22: ldc           #49                 // class reactor/core/publisher/FluxCreate$BaseSink
      24: ldc           #54                 // class java/util/function/LongConsumer
      26: ldc           #55                 // String requestConsumer
      28: invokestatic  #51                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      31: putstatic     #33                 // Field REQUEST_CONSUMER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      34: return
}
