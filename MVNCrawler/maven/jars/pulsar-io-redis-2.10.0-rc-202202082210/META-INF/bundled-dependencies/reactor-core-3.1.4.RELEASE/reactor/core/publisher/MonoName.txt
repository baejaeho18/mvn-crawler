Compiled from "MonoName.java"
final class reactor.core.publisher.MonoName<T> extends reactor.core.publisher.MonoOperator<T, T> {
  final java.lang.String name;

  final java.util.Set<reactor.util.function.Tuple2<java.lang.String, java.lang.String>> tags;

  static <T> reactor.core.publisher.Mono<T> createOrAppend(reactor.core.publisher.Mono<T>, java.lang.String);
    Code:
       0: aload_1
       1: ldc           #1                  // String name
       3: invokestatic  #2                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: instanceof    #3                  // class reactor/core/publisher/MonoName
      11: ifeq          36
      14: aload_0
      15: checkcast     #3                  // class reactor/core/publisher/MonoName
      18: astore_2
      19: new           #3                  // class reactor/core/publisher/MonoName
      22: dup
      23: aload_2
      24: getfield      #4                  // Field source:Lreactor/core/publisher/Mono;
      27: aload_1
      28: aload_2
      29: getfield      #5                  // Field tags:Ljava/util/Set;
      32: invokespecial #6                  // Method "<init>":(Lreactor/core/publisher/Mono;Ljava/lang/String;Ljava/util/Set;)V
      35: areturn
      36: aload_0
      37: instanceof    #7                  // class reactor/core/publisher/MonoNameFuseable
      40: ifeq          65
      43: aload_0
      44: checkcast     #7                  // class reactor/core/publisher/MonoNameFuseable
      47: astore_2
      48: new           #7                  // class reactor/core/publisher/MonoNameFuseable
      51: dup
      52: aload_2
      53: getfield      #8                  // Field reactor/core/publisher/MonoNameFuseable.source:Lreactor/core/publisher/Mono;
      56: aload_1
      57: aload_2
      58: getfield      #9                  // Field reactor/core/publisher/MonoNameFuseable.tags:Ljava/util/Set;
      61: invokespecial #10                 // Method reactor/core/publisher/MonoNameFuseable."<init>":(Lreactor/core/publisher/Mono;Ljava/lang/String;Ljava/util/Set;)V
      64: areturn
      65: aload_0
      66: instanceof    #11                 // class reactor/core/Fuseable
      69: ifeq          83
      72: new           #7                  // class reactor/core/publisher/MonoNameFuseable
      75: dup
      76: aload_0
      77: aload_1
      78: aconst_null
      79: invokespecial #10                 // Method reactor/core/publisher/MonoNameFuseable."<init>":(Lreactor/core/publisher/Mono;Ljava/lang/String;Ljava/util/Set;)V
      82: areturn
      83: new           #3                  // class reactor/core/publisher/MonoName
      86: dup
      87: aload_0
      88: aload_1
      89: aconst_null
      90: invokespecial #6                  // Method "<init>":(Lreactor/core/publisher/Mono;Ljava/lang/String;Ljava/util/Set;)V
      93: areturn

  static <T> reactor.core.publisher.Mono<T> createOrAppend(reactor.core.publisher.Mono<T>, java.lang.String, java.lang.String);
    Code:
       0: aload_1
       1: ldc           #12                 // String tagName
       3: invokestatic  #2                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_2
       8: ldc           #13                 // String tagValue
      10: invokestatic  #2                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      13: pop
      14: aload_1
      15: aload_2
      16: invokestatic  #14                 // Method reactor/util/function/Tuples.of:(Ljava/lang/Object;Ljava/lang/Object;)Lreactor/util/function/Tuple2;
      19: invokestatic  #15                 // Method java/util/Collections.singleton:(Ljava/lang/Object;)Ljava/util/Set;
      22: astore_3
      23: aload_0
      24: instanceof    #3                  // class reactor/core/publisher/MonoName
      27: ifeq          84
      30: aload_0
      31: checkcast     #3                  // class reactor/core/publisher/MonoName
      34: astore        4
      36: aload         4
      38: getfield      #5                  // Field tags:Ljava/util/Set;
      41: ifnull        65
      44: new           #16                 // class java/util/HashSet
      47: dup
      48: aload_3
      49: invokespecial #17                 // Method java/util/HashSet."<init>":(Ljava/util/Collection;)V
      52: astore_3
      53: aload_3
      54: aload         4
      56: getfield      #5                  // Field tags:Ljava/util/Set;
      59: invokeinterface #18,  2           // InterfaceMethod java/util/Set.addAll:(Ljava/util/Collection;)Z
      64: pop
      65: new           #3                  // class reactor/core/publisher/MonoName
      68: dup
      69: aload         4
      71: getfield      #4                  // Field source:Lreactor/core/publisher/Mono;
      74: aload         4
      76: getfield      #19                 // Field name:Ljava/lang/String;
      79: aload_3
      80: invokespecial #6                  // Method "<init>":(Lreactor/core/publisher/Mono;Ljava/lang/String;Ljava/util/Set;)V
      83: areturn
      84: aload_0
      85: instanceof    #7                  // class reactor/core/publisher/MonoNameFuseable
      88: ifeq          145
      91: aload_0
      92: checkcast     #7                  // class reactor/core/publisher/MonoNameFuseable
      95: astore        4
      97: aload         4
      99: getfield      #9                  // Field reactor/core/publisher/MonoNameFuseable.tags:Ljava/util/Set;
     102: ifnull        126
     105: new           #16                 // class java/util/HashSet
     108: dup
     109: aload_3
     110: invokespecial #17                 // Method java/util/HashSet."<init>":(Ljava/util/Collection;)V
     113: astore_3
     114: aload_3
     115: aload         4
     117: getfield      #9                  // Field reactor/core/publisher/MonoNameFuseable.tags:Ljava/util/Set;
     120: invokeinterface #18,  2           // InterfaceMethod java/util/Set.addAll:(Ljava/util/Collection;)Z
     125: pop
     126: new           #7                  // class reactor/core/publisher/MonoNameFuseable
     129: dup
     130: aload         4
     132: getfield      #8                  // Field reactor/core/publisher/MonoNameFuseable.source:Lreactor/core/publisher/Mono;
     135: aload         4
     137: getfield      #20                 // Field reactor/core/publisher/MonoNameFuseable.name:Ljava/lang/String;
     140: aload_3
     141: invokespecial #10                 // Method reactor/core/publisher/MonoNameFuseable."<init>":(Lreactor/core/publisher/Mono;Ljava/lang/String;Ljava/util/Set;)V
     144: areturn
     145: aload_0
     146: instanceof    #11                 // class reactor/core/Fuseable
     149: ifeq          163
     152: new           #7                  // class reactor/core/publisher/MonoNameFuseable
     155: dup
     156: aload_0
     157: aconst_null
     158: aload_3
     159: invokespecial #10                 // Method reactor/core/publisher/MonoNameFuseable."<init>":(Lreactor/core/publisher/Mono;Ljava/lang/String;Ljava/util/Set;)V
     162: areturn
     163: new           #3                  // class reactor/core/publisher/MonoName
     166: dup
     167: aload_0
     168: aconst_null
     169: aload_3
     170: invokespecial #6                  // Method "<init>":(Lreactor/core/publisher/Mono;Ljava/lang/String;Ljava/util/Set;)V
     173: areturn

  reactor.core.publisher.MonoName(reactor.core.publisher.Mono<? extends T>, java.lang.String, java.util.Set<reactor.util.function.Tuple2<java.lang.String, java.lang.String>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #21                 // Method reactor/core/publisher/MonoOperator."<init>":(Lreactor/core/publisher/Mono;)V
       5: aload_0
       6: aload_2
       7: putfield      #19                 // Field name:Ljava/lang/String;
      10: aload_0
      11: aload_3
      12: putfield      #5                  // Field tags:Ljava/util/Set;
      15: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: getfield      #4                  // Field source:Lreactor/core/publisher/Mono;
       4: aload_1
       5: invokevirtual #22                 // Method reactor/core/publisher/Mono.subscribe:(Lreactor/core/CoreSubscriber;)V
       8: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #23                 // Field reactor/core/Scannable$Attr.NAME:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #19                 // Field name:Ljava/lang/String;
      11: areturn
      12: aload_1
      13: getstatic     #24                 // Field reactor/core/Scannable$Attr.TAGS:Lreactor/core/Scannable$Attr;
      16: if_acmpne     36
      19: aload_0
      20: getfield      #5                  // Field tags:Ljava/util/Set;
      23: ifnull        36
      26: aload_0
      27: getfield      #5                  // Field tags:Ljava/util/Set;
      30: invokeinterface #25,  1           // InterfaceMethod java/util/Set.stream:()Ljava/util/stream/Stream;
      35: areturn
      36: aload_0
      37: aload_1
      38: invokespecial #26                 // Method reactor/core/publisher/MonoOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      41: areturn
}
