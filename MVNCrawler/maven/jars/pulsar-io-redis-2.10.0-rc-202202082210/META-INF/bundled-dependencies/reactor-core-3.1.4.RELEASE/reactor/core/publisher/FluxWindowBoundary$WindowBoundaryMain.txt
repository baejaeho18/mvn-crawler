Compiled from "FluxWindowBoundary.java"
final class reactor.core.publisher.FluxWindowBoundary$WindowBoundaryMain<T, U> implements reactor.core.publisher.InnerOperator<T, reactor.core.publisher.Flux<T>>, reactor.core.Disposable {
  final java.util.function.Supplier<? extends java.util.Queue<T>> processorQueueSupplier;

  final reactor.core.publisher.FluxWindowBoundary$WindowBoundaryOther<U> boundary;

  final java.util.Queue<java.lang.Object> queue;

  final reactor.core.CoreSubscriber<? super reactor.core.publisher.Flux<T>> actual;

  reactor.core.publisher.UnicastProcessor<T> window;

  volatile org.reactivestreams.Subscription s;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxWindowBoundary$WindowBoundaryMain, org.reactivestreams.Subscription> S;

  volatile long requested;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.FluxWindowBoundary$WindowBoundaryMain> REQUESTED;

  volatile java.lang.Throwable error;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxWindowBoundary$WindowBoundaryMain, java.lang.Throwable> ERROR;

  volatile int cancelled;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxWindowBoundary$WindowBoundaryMain> CANCELLED;

  volatile int windowCount;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxWindowBoundary$WindowBoundaryMain> WINDOW_COUNT;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxWindowBoundary$WindowBoundaryMain> WIP;

  boolean done;

  static final java.lang.Object BOUNDARY_MARKER;

  static final java.lang.Object DONE;

  reactor.core.publisher.FluxWindowBoundary$WindowBoundaryMain(reactor.core.CoreSubscriber<? super reactor.core.publisher.Flux<T>>, java.util.function.Supplier<? extends java.util.Queue<T>>, java.util.Queue<T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field processorQueueSupplier:Ljava/util/function/Supplier;
      14: aload_0
      15: new           #4                  // class reactor/core/publisher/UnicastProcessor
      18: dup
      19: aload_3
      20: aload_0
      21: invokespecial #5                  // Method reactor/core/publisher/UnicastProcessor."<init>":(Ljava/util/Queue;Lreactor/core/Disposable;)V
      24: putfield      #6                  // Field window:Lreactor/core/publisher/UnicastProcessor;
      27: getstatic     #7                  // Field WINDOW_COUNT:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      30: aload_0
      31: iconst_2
      32: invokevirtual #8                  // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.lazySet:(Ljava/lang/Object;I)V
      35: aload_0
      36: new           #9                  // class reactor/core/publisher/FluxWindowBoundary$WindowBoundaryOther
      39: dup
      40: aload_0
      41: invokespecial #10                 // Method reactor/core/publisher/FluxWindowBoundary$WindowBoundaryOther."<init>":(Lreactor/core/publisher/FluxWindowBoundary$WindowBoundaryMain;)V
      44: putfield      #11                 // Field boundary:Lreactor/core/publisher/FluxWindowBoundary$WindowBoundaryOther;
      47: aload_0
      48: invokestatic  #12                 // Method reactor/util/concurrent/Queues.unboundedMultiproducer:()Ljava/util/function/Supplier;
      51: invokeinterface #13,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      56: checkcast     #14                 // class java/util/Queue
      59: putfield      #15                 // Field queue:Ljava/util/Queue;
      62: return

  public final reactor.core.CoreSubscriber<? super reactor.core.publisher.Flux<T>> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #16                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #17                 // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #18                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
      16: if_acmpne     24
      19: aload_0
      20: getfield      #19                 // Field error:Ljava/lang/Throwable;
      23: areturn
      24: aload_1
      25: getstatic     #20                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      28: if_acmpne     48
      31: aload_0
      32: getfield      #21                 // Field cancelled:I
      35: iconst_1
      36: if_icmpne     43
      39: iconst_1
      40: goto          44
      43: iconst_0
      44: invokestatic  #22                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      47: areturn
      48: aload_1
      49: getstatic     #23                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      52: if_acmpne     63
      55: aload_0
      56: getfield      #24                 // Field done:Z
      59: invokestatic  #22                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      62: areturn
      63: aload_1
      64: getstatic     #25                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      67: if_acmpne     76
      70: ldc           #27                 // int 2147483647
      72: invokestatic  #28                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      75: areturn
      76: aload_1
      77: getstatic     #29                 // Field reactor/core/Scannable$Attr.REQUESTED_FROM_DOWNSTREAM:Lreactor/core/Scannable$Attr;
      80: if_acmpne     91
      83: aload_0
      84: getfield      #30                 // Field requested:J
      87: invokestatic  #31                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      90: areturn
      91: aload_1
      92: getstatic     #32                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      95: if_acmpne     111
      98: aload_0
      99: getfield      #15                 // Field queue:Ljava/util/Queue;
     102: invokeinterface #33,  1           // InterfaceMethod java/util/Queue.size:()I
     107: invokestatic  #28                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     110: areturn
     111: aload_0
     112: aload_1
     113: invokespecial #34                 // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
     116: areturn

  public java.util.stream.Stream<? extends reactor.core.Scannable> inners();
    Code:
       0: iconst_2
       1: anewarray     #35                 // class reactor/core/publisher/InnerConsumer
       4: dup
       5: iconst_0
       6: aload_0
       7: getfield      #11                 // Field boundary:Lreactor/core/publisher/FluxWindowBoundary$WindowBoundaryOther;
      10: aastore
      11: dup
      12: iconst_1
      13: aload_0
      14: getfield      #6                  // Field window:Lreactor/core/publisher/UnicastProcessor;
      17: aastore
      18: invokestatic  #36                 // InterfaceMethod java/util/stream/Stream.of:([Ljava/lang/Object;)Ljava/util/stream/Stream;
      21: areturn

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: getstatic     #37                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #38                 // Method reactor/core/publisher/Operators.setOnce:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          20
      11: aload_1
      12: ldc2_w        #40                 // long 9223372036854775807l
      15: invokeinterface #42,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      20: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #24                 // Field done:Z
       4: ifeq          21
       7: aload_1
       8: aload_0
       9: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      12: invokeinterface #43,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #44                 // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      20: return
      21: aload_0
      22: dup
      23: astore_2
      24: monitorenter
      25: aload_0
      26: getfield      #15                 // Field queue:Ljava/util/Queue;
      29: aload_1
      30: invokeinterface #45,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
      35: pop
      36: aload_2
      37: monitorexit
      38: goto          46
      41: astore_3
      42: aload_2
      43: monitorexit
      44: aload_3
      45: athrow
      46: aload_0
      47: invokevirtual #46                 // Method drain:()V
      50: return
    Exception table:
       from    to  target type
          25    38    41   any
          41    44    41   any

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #24                 // Field done:Z
       4: ifeq          21
       7: aload_1
       8: aload_0
       9: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      12: invokeinterface #43,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #47                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      20: return
      21: aload_0
      22: iconst_1
      23: putfield      #24                 // Field done:Z
      26: aload_0
      27: getfield      #11                 // Field boundary:Lreactor/core/publisher/FluxWindowBoundary$WindowBoundaryOther;
      30: invokevirtual #48                 // Method reactor/core/publisher/FluxWindowBoundary$WindowBoundaryOther.cancel:()V
      33: getstatic     #49                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      36: aload_0
      37: aload_1
      38: invokestatic  #50                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
      41: ifeq          48
      44: aload_0
      45: invokevirtual #46                 // Method drain:()V
      48: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #24                 // Field done:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #24                 // Field done:Z
      13: aload_0
      14: getfield      #11                 // Field boundary:Lreactor/core/publisher/FluxWindowBoundary$WindowBoundaryOther;
      17: invokevirtual #48                 // Method reactor/core/publisher/FluxWindowBoundary$WindowBoundaryOther.cancel:()V
      20: aload_0
      21: dup
      22: astore_1
      23: monitorenter
      24: aload_0
      25: getfield      #15                 // Field queue:Ljava/util/Queue;
      28: getstatic     #51                 // Field DONE:Ljava/lang/Object;
      31: invokeinterface #45,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
      36: pop
      37: aload_1
      38: monitorexit
      39: goto          47
      42: astore_2
      43: aload_1
      44: monitorexit
      45: aload_2
      46: athrow
      47: aload_0
      48: invokevirtual #46                 // Method drain:()V
      51: return
    Exception table:
       from    to  target type
          24    39    42   any
          42    45    42   any

  public void dispose();
    Code:
       0: getstatic     #7                  // Field WINDOW_COUNT:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #52                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
       7: ifne          21
      10: aload_0
      11: invokevirtual #53                 // Method cancelMain:()V
      14: aload_0
      15: getfield      #11                 // Field boundary:Lreactor/core/publisher/FluxWindowBoundary$WindowBoundaryOther;
      18: invokevirtual #48                 // Method reactor/core/publisher/FluxWindowBoundary$WindowBoundaryOther.cancel:()V
      21: return

  public boolean isDisposed();
    Code:
       0: aload_0
       1: getfield      #21                 // Field cancelled:I
       4: iconst_1
       5: if_icmpeq     15
       8: aload_0
       9: getfield      #24                 // Field done:Z
      12: ifeq          19
      15: iconst_1
      16: goto          20
      19: iconst_0
      20: ireturn

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #54                 // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          16
       7: getstatic     #55                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      10: aload_0
      11: lload_1
      12: invokestatic  #56                 // Method reactor/core/publisher/Operators.addCap:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
      15: pop2
      16: return

  void cancelMain();
    Code:
       0: getstatic     #37                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokestatic  #57                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
       7: pop
       8: return

  public void cancel();
    Code:
       0: getstatic     #58                 // Field CANCELLED:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: iconst_0
       5: iconst_1
       6: invokevirtual #59                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
       9: ifeq          16
      12: aload_0
      13: invokevirtual #60                 // Method dispose:()V
      16: return

  void boundaryNext();
    Code:
       0: aload_0
       1: dup
       2: astore_1
       3: monitorenter
       4: aload_0
       5: getfield      #15                 // Field queue:Ljava/util/Queue;
       8: getstatic     #61                 // Field BOUNDARY_MARKER:Ljava/lang/Object;
      11: invokeinterface #45,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
      16: pop
      17: aload_1
      18: monitorexit
      19: goto          27
      22: astore_2
      23: aload_1
      24: monitorexit
      25: aload_2
      26: athrow
      27: aload_0
      28: getfield      #21                 // Field cancelled:I
      31: ifeq          41
      34: aload_0
      35: getfield      #11                 // Field boundary:Lreactor/core/publisher/FluxWindowBoundary$WindowBoundaryOther;
      38: invokevirtual #48                 // Method reactor/core/publisher/FluxWindowBoundary$WindowBoundaryOther.cancel:()V
      41: aload_0
      42: invokevirtual #46                 // Method drain:()V
      45: return
    Exception table:
       from    to  target type
           4    19    22   any
          22    25    22   any

  void boundaryError(java.lang.Throwable);
    Code:
       0: aload_0
       1: invokevirtual #53                 // Method cancelMain:()V
       4: getstatic     #49                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       7: aload_0
       8: aload_1
       9: invokestatic  #50                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
      12: ifeq          22
      15: aload_0
      16: invokevirtual #46                 // Method drain:()V
      19: goto          35
      22: aload_1
      23: aload_0
      24: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      27: invokeinterface #43,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      32: invokestatic  #47                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      35: return

  void boundaryComplete();
    Code:
       0: aload_0
       1: invokevirtual #53                 // Method cancelMain:()V
       4: aload_0
       5: dup
       6: astore_1
       7: monitorenter
       8: aload_0
       9: getfield      #15                 // Field queue:Ljava/util/Queue;
      12: getstatic     #51                 // Field DONE:Ljava/lang/Object;
      15: invokeinterface #45,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
      20: pop
      21: aload_1
      22: monitorexit
      23: goto          31
      26: astore_2
      27: aload_1
      28: monitorexit
      29: aload_2
      30: athrow
      31: aload_0
      32: invokevirtual #46                 // Method drain:()V
      35: return
    Exception table:
       from    to  target type
           8    23    26   any
          26    29    26   any

  void drain();
    Code:
       0: getstatic     #62                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #63                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifeq          11
      10: return
      11: aload_0
      12: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      15: astore_1
      16: aload_0
      17: getfield      #15                 // Field queue:Ljava/util/Queue;
      20: astore_2
      21: aload_0
      22: getfield      #6                  // Field window:Lreactor/core/publisher/UnicastProcessor;
      25: astore_3
      26: iconst_1
      27: istore        4
      29: aload_0
      30: getfield      #19                 // Field error:Ljava/lang/Throwable;
      33: ifnull        74
      36: aload_2
      37: invokeinterface #64,  1           // InterfaceMethod java/util/Queue.clear:()V
      42: getstatic     #49                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      45: aload_0
      46: invokestatic  #65                 // Method reactor/core/Exceptions.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Ljava/lang/Throwable;
      49: astore        5
      51: aload         5
      53: getstatic     #66                 // Field reactor/core/Exceptions.TERMINATED:Ljava/lang/Throwable;
      56: if_acmpeq     73
      59: aload_3
      60: aload         5
      62: invokevirtual #67                 // Method reactor/core/publisher/UnicastProcessor.onError:(Ljava/lang/Throwable;)V
      65: aload_1
      66: aload         5
      68: invokeinterface #68,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      73: return
      74: aload_2
      75: invokeinterface #69,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
      80: astore        5
      82: aload         5
      84: ifnonnull     90
      87: goto          260
      90: aload         5
      92: getstatic     #51                 // Field DONE:Ljava/lang/Object;
      95: if_acmpne     115
      98: aload_2
      99: invokeinterface #64,  1           // InterfaceMethod java/util/Queue.clear:()V
     104: aload_3
     105: invokevirtual #70                 // Method reactor/core/publisher/UnicastProcessor.onComplete:()V
     108: aload_1
     109: invokeinterface #71,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
     114: return
     115: aload         5
     117: getstatic     #61                 // Field BOUNDARY_MARKER:Ljava/lang/Object;
     120: if_acmpeq     133
     123: aload         5
     125: astore        6
     127: aload_3
     128: aload         6
     130: invokevirtual #72                 // Method reactor/core/publisher/UnicastProcessor.onNext:(Ljava/lang/Object;)V
     133: aload         5
     135: getstatic     #61                 // Field BOUNDARY_MARKER:Ljava/lang/Object;
     138: if_acmpne     257
     141: aload_3
     142: invokevirtual #70                 // Method reactor/core/publisher/UnicastProcessor.onComplete:()V
     145: aload_0
     146: getfield      #21                 // Field cancelled:I
     149: ifne          257
     152: aload_0
     153: getfield      #30                 // Field requested:J
     156: lconst_0
     157: lcmp
     158: ifeq          228
     161: aload_0
     162: getfield      #3                  // Field processorQueueSupplier:Ljava/util/function/Supplier;
     165: invokeinterface #13,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
     170: checkcast     #14                 // class java/util/Queue
     173: astore        6
     175: getstatic     #7                  // Field WINDOW_COUNT:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     178: aload_0
     179: invokevirtual #63                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
     182: pop
     183: new           #4                  // class reactor/core/publisher/UnicastProcessor
     186: dup
     187: aload         6
     189: aload_0
     190: invokespecial #5                  // Method reactor/core/publisher/UnicastProcessor."<init>":(Ljava/util/Queue;Lreactor/core/Disposable;)V
     193: astore_3
     194: aload_0
     195: aload_3
     196: putfield      #6                  // Field window:Lreactor/core/publisher/UnicastProcessor;
     199: aload_1
     200: aload_3
     201: invokeinterface #73,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
     206: aload_0
     207: getfield      #30                 // Field requested:J
     210: ldc2_w        #40                 // long 9223372036854775807l
     213: lcmp
     214: ifeq          225
     217: getstatic     #55                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
     220: aload_0
     221: invokevirtual #74                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.decrementAndGet:(Ljava/lang/Object;)J
     224: pop2
     225: goto          257
     228: aload_2
     229: invokeinterface #64,  1           // InterfaceMethod java/util/Queue.clear:()V
     234: aload_0
     235: invokevirtual #53                 // Method cancelMain:()V
     238: aload_0
     239: getfield      #11                 // Field boundary:Lreactor/core/publisher/FluxWindowBoundary$WindowBoundaryOther;
     242: invokevirtual #48                 // Method reactor/core/publisher/FluxWindowBoundary$WindowBoundaryOther.cancel:()V
     245: aload_1
     246: ldc           #75                 // String Could not create new window due to lack of requests
     248: invokestatic  #76                 // Method reactor/core/Exceptions.failWithOverflow:(Ljava/lang/String;)Ljava/lang/IllegalStateException;
     251: invokeinterface #68,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
     256: return
     257: goto          29
     260: getstatic     #62                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     263: aload_0
     264: iload         4
     266: ineg
     267: invokevirtual #77                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
     270: istore        4
     272: iload         4
     274: ifne          29
     277: goto          280
     280: return

  boolean emit(reactor.core.publisher.UnicastProcessor<T>);
    Code:
       0: aload_0
       1: getfield      #30                 // Field requested:J
       4: lstore_2
       5: lload_2
       6: lconst_0
       7: lcmp
       8: ifeq          39
      11: aload_0
      12: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      15: aload_1
      16: invokeinterface #78,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      21: lload_2
      22: ldc2_w        #40                 // long 9223372036854775807l
      25: lcmp
      26: ifeq          37
      29: getstatic     #55                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      32: aload_0
      33: invokevirtual #74                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.decrementAndGet:(Ljava/lang/Object;)J
      36: pop2
      37: iconst_1
      38: ireturn
      39: aload_0
      40: invokevirtual #79                 // Method cancel:()V
      43: aload_0
      44: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      47: ldc           #80                 // String Could not emit buffer due to lack of requests
      49: invokestatic  #76                 // Method reactor/core/Exceptions.failWithOverflow:(Ljava/lang/String;)Ljava/lang/IllegalStateException;
      52: invokeinterface #81,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      57: iconst_0
      58: ireturn

  static {};
    Code:
       0: ldc           #82                 // class reactor/core/publisher/FluxWindowBoundary$WindowBoundaryMain
       2: ldc           #83                 // class org/reactivestreams/Subscription
       4: ldc           #84                 // String s
       6: invokestatic  #85                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #37                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: ldc           #82                 // class reactor/core/publisher/FluxWindowBoundary$WindowBoundaryMain
      14: ldc           #86                 // String requested
      16: invokestatic  #87                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      19: putstatic     #55                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      22: ldc           #82                 // class reactor/core/publisher/FluxWindowBoundary$WindowBoundaryMain
      24: ldc           #88                 // class java/lang/Throwable
      26: ldc           #89                 // String error
      28: invokestatic  #85                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      31: putstatic     #49                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      34: ldc           #82                 // class reactor/core/publisher/FluxWindowBoundary$WindowBoundaryMain
      36: ldc           #90                 // String cancelled
      38: invokestatic  #91                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      41: putstatic     #58                 // Field CANCELLED:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      44: ldc           #82                 // class reactor/core/publisher/FluxWindowBoundary$WindowBoundaryMain
      46: ldc           #92                 // String windowCount
      48: invokestatic  #91                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      51: putstatic     #7                  // Field WINDOW_COUNT:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      54: ldc           #82                 // class reactor/core/publisher/FluxWindowBoundary$WindowBoundaryMain
      56: ldc           #93                 // String wip
      58: invokestatic  #91                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      61: putstatic     #62                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      64: new           #94                 // class java/lang/Object
      67: dup
      68: invokespecial #1                  // Method java/lang/Object."<init>":()V
      71: putstatic     #61                 // Field BOUNDARY_MARKER:Ljava/lang/Object;
      74: new           #94                 // class java/lang/Object
      77: dup
      78: invokespecial #1                  // Method java/lang/Object."<init>":()V
      81: putstatic     #51                 // Field DONE:Ljava/lang/Object;
      84: return
}
