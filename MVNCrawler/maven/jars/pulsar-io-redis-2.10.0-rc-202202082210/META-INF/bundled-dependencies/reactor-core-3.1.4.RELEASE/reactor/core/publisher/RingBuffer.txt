Compiled from "RingBuffer.java"
abstract class reactor.core.publisher.RingBuffer<E> implements java.util.function.LongSupplier {
  static final long INITIAL_CURSOR_VALUE;

  private static final boolean HAS_UNSAFE;

  reactor.core.publisher.RingBuffer();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  static <T> void addSequence(T, java.util.concurrent.atomic.AtomicReferenceFieldUpdater<T, reactor.core.publisher.RingBuffer$Sequence[]>, reactor.core.publisher.RingBuffer$Sequence);
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #2                  // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.get:(Ljava/lang/Object;)Ljava/lang/Object;
       5: checkcast     #3                  // class "[Lreactor/core/publisher/RingBuffer$Sequence;"
       8: astore        4
      10: aload         4
      12: aload         4
      14: arraylength
      15: iconst_1
      16: iadd
      17: invokestatic  #4                  // Method java/util/Arrays.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;
      20: checkcast     #3                  // class "[Lreactor/core/publisher/RingBuffer$Sequence;"
      23: astore_3
      24: aload_3
      25: aload         4
      27: arraylength
      28: aload_2
      29: aastore
      30: aload_1
      31: aload_0
      32: aload         4
      34: aload_3
      35: invokevirtual #5                  // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      38: ifeq          0
      41: return

  private static <T> int countMatching(T[], T);
    Code:
       0: iconst_0
       1: istore_2
       2: aload_0
       3: astore_3
       4: aload_3
       5: arraylength
       6: istore        4
       8: iconst_0
       9: istore        5
      11: iload         5
      13: iload         4
      15: if_icmpge     39
      18: aload_3
      19: iload         5
      21: aaload
      22: astore        6
      24: aload         6
      26: aload_1
      27: if_acmpne     33
      30: iinc          2, 1
      33: iinc          5, 1
      36: goto          11
      39: iload_2
      40: ireturn

  static <T> boolean removeSequence(T, java.util.concurrent.atomic.AtomicReferenceFieldUpdater<T, reactor.core.publisher.RingBuffer$Sequence[]>, reactor.core.publisher.RingBuffer$Sequence);
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #2                  // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.get:(Ljava/lang/Object;)Ljava/lang/Object;
       5: checkcast     #3                  // class "[Lreactor/core/publisher/RingBuffer$Sequence;"
       8: astore        4
      10: aload         4
      12: aload_2
      13: invokestatic  #6                  // Method countMatching:([Ljava/lang/Object;Ljava/lang/Object;)I
      16: istore_3
      17: iconst_0
      18: iload_3
      19: if_icmpne     25
      22: goto          93
      25: aload         4
      27: arraylength
      28: istore        6
      30: iload         6
      32: iload_3
      33: isub
      34: anewarray     #7                  // class reactor/core/publisher/RingBuffer$Sequence
      37: astore        5
      39: iconst_0
      40: istore        7
      42: iconst_0
      43: istore        8
      45: iload         7
      47: iload         6
      49: if_icmpge     81
      52: aload         4
      54: iload         7
      56: aaload
      57: astore        9
      59: aload_2
      60: aload         9
      62: if_acmpeq     75
      65: aload         5
      67: iload         8
      69: iinc          8, 1
      72: aload         9
      74: aastore
      75: iinc          7, 1
      78: goto          45
      81: aload_1
      82: aload_0
      83: aload         4
      85: aload         5
      87: invokevirtual #5                  // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      90: ifeq          0
      93: iload_3
      94: ifeq          101
      97: iconst_1
      98: goto          102
     101: iconst_0
     102: ireturn

  static <E> reactor.core.publisher.RingBuffer<E> createMultiProducer(java.util.function.Supplier<E>, int, reactor.util.concurrent.WaitStrategy, java.lang.Runnable);
    Code:
       0: invokestatic  #8                  // Method hasUnsafe:()Z
       3: ifeq          29
       6: new           #9                  // class reactor/core/publisher/MultiProducerRingBuffer
       9: dup
      10: iload_1
      11: aload_2
      12: aload_3
      13: invokespecial #10                 // Method reactor/core/publisher/MultiProducerRingBuffer."<init>":(ILreactor/util/concurrent/WaitStrategy;Ljava/lang/Runnable;)V
      16: astore        4
      18: new           #11                 // class reactor/core/publisher/UnsafeRingBuffer
      21: dup
      22: aload_0
      23: aload         4
      25: invokespecial #12                 // Method reactor/core/publisher/UnsafeRingBuffer."<init>":(Ljava/util/function/Supplier;Lreactor/core/publisher/RingBufferProducer;)V
      28: areturn
      29: new           #13                 // class java/lang/IllegalStateException
      32: dup
      33: ldc           #14                 // String This JVM does not support sun.misc.Unsafe
      35: invokespecial #15                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      38: athrow

  static <E> reactor.core.publisher.RingBuffer<E> createSingleProducer(java.util.function.Supplier<E>, int, reactor.util.concurrent.WaitStrategy);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: aconst_null
       4: invokestatic  #16                 // Method createSingleProducer:(Ljava/util/function/Supplier;ILreactor/util/concurrent/WaitStrategy;Ljava/lang/Runnable;)Lreactor/core/publisher/RingBuffer;
       7: areturn

  static <E> reactor.core.publisher.RingBuffer<E> createSingleProducer(java.util.function.Supplier<E>, int, reactor.util.concurrent.WaitStrategy, java.lang.Runnable);
    Code:
       0: new           #17                 // class reactor/core/publisher/SingleProducerSequencer
       3: dup
       4: iload_1
       5: aload_2
       6: aload_3
       7: invokespecial #18                 // Method reactor/core/publisher/SingleProducerSequencer."<init>":(ILreactor/util/concurrent/WaitStrategy;Ljava/lang/Runnable;)V
      10: astore        4
      12: invokestatic  #8                  // Method hasUnsafe:()Z
      15: ifeq          36
      18: iload_1
      19: invokestatic  #19                 // Method reactor/util/concurrent/Queues.isPowerOfTwo:(I)Z
      22: ifeq          36
      25: new           #11                 // class reactor/core/publisher/UnsafeRingBuffer
      28: dup
      29: aload_0
      30: aload         4
      32: invokespecial #12                 // Method reactor/core/publisher/UnsafeRingBuffer."<init>":(Ljava/util/function/Supplier;Lreactor/core/publisher/RingBufferProducer;)V
      35: areturn
      36: new           #20                 // class reactor/core/publisher/NotFunRingBuffer
      39: dup
      40: aload_0
      41: aload         4
      43: invokespecial #21                 // Method reactor/core/publisher/NotFunRingBuffer."<init>":(Ljava/util/function/Supplier;Lreactor/core/publisher/RingBufferProducer;)V
      46: areturn

  static long getMinimumSequence(reactor.core.publisher.RingBuffer$Sequence[], long);
    Code:
       0: iconst_0
       1: istore_3
       2: aload_0
       3: arraylength
       4: istore        4
       6: iload_3
       7: iload         4
       9: if_icmpge     35
      12: aload_0
      13: iload_3
      14: aaload
      15: invokeinterface #22,  1           // InterfaceMethod reactor/core/publisher/RingBuffer$Sequence.getAsLong:()J
      20: lstore        5
      22: lload_1
      23: lload         5
      25: invokestatic  #23                 // Method java/lang/Math.min:(JJ)J
      28: lstore_1
      29: iinc          3, 1
      32: goto          6
      35: lload_1
      36: lreturn

  static long getMinimumSequence(reactor.core.publisher.RingBuffer$Sequence, reactor.core.publisher.RingBuffer$Sequence[], long);
    Code:
       0: iconst_0
       1: istore        4
       3: aload_1
       4: arraylength
       5: istore        5
       7: iload         4
       9: iload         5
      11: if_icmpge     50
      14: aload_0
      15: ifnull        26
      18: aload_1
      19: iload         4
      21: aaload
      22: aload_0
      23: if_acmpeq     44
      26: aload_1
      27: iload         4
      29: aaload
      30: invokeinterface #22,  1           // InterfaceMethod reactor/core/publisher/RingBuffer$Sequence.getAsLong:()J
      35: lstore        6
      37: lload_2
      38: lload         6
      40: invokestatic  #23                 // Method java/lang/Math.min:(JJ)J
      43: lstore_2
      44: iinc          4, 1
      47: goto          7
      50: lload_2
      51: lreturn

  static <T> T getUnsafe();
    Code:
       0: invokestatic  #24                 // Method reactor/core/publisher/UnsafeSupport.getUnsafe:()Lsun/misc/Unsafe;
       3: areturn

  static int log2(int);
    Code:
       0: iconst_0
       1: istore_1
       2: iload_0
       3: iconst_1
       4: ishr
       5: dup
       6: istore_0
       7: ifeq          16
      10: iinc          1, 1
      13: goto          2
      16: iload_1
      17: ireturn

  static reactor.core.publisher.RingBuffer$Sequence newSequence(long);
    Code:
       0: invokestatic  #8                  // Method hasUnsafe:()Z
       3: ifeq          15
       6: new           #25                 // class reactor/core/publisher/UnsafeSequence
       9: dup
      10: lload_0
      11: invokespecial #26                 // Method reactor/core/publisher/UnsafeSequence."<init>":(J)V
      14: areturn
      15: new           #27                 // class reactor/core/publisher/AtomicSequence
      18: dup
      19: lload_0
      20: invokespecial #28                 // Method reactor/core/publisher/AtomicSequence."<init>":(J)V
      23: areturn

  abstract void addGatingSequence(reactor.core.publisher.RingBuffer$Sequence);

  abstract int bufferSize();

  abstract E get(long);

  public long getAsLong();
    Code:
       0: aload_0
       1: invokevirtual #29                 // Method getCursor:()J
       4: lreturn

  abstract long getCursor();

  abstract long getMinimumGatingSequence();

  abstract long getMinimumGatingSequence(reactor.core.publisher.RingBuffer$Sequence);

  abstract int getPending();

  reactor.core.publisher.RingBuffer$Sequence[] getSequenceReceivers();
    Code:
       0: aload_0
       1: invokevirtual #30                 // Method getSequencer:()Lreactor/core/publisher/RingBufferProducer;
       4: invokevirtual #31                 // Method reactor/core/publisher/RingBufferProducer.getGatingSequences:()[Lreactor/core/publisher/RingBuffer$Sequence;
       7: areturn

  abstract reactor.core.publisher.RingBuffer$Reader newReader();

  abstract long next();

  abstract long next(int);

  abstract void publish(long);

  abstract boolean removeGatingSequence(reactor.core.publisher.RingBuffer$Sequence);

  abstract reactor.core.publisher.RingBufferProducer getSequencer();

  static boolean hasUnsafe();
    Code:
       0: getstatic     #32                 // Field HAS_UNSAFE:Z
       3: ireturn

  static boolean hasUnsafe0();
    Code:
       0: invokestatic  #33                 // Method reactor/core/publisher/UnsafeSupport.hasUnsafe:()Z
       3: ireturn

  static {};
    Code:
       0: invokestatic  #34                 // Method hasUnsafe0:()Z
       3: putstatic     #32                 // Field HAS_UNSAFE:Z
       6: return
}
