Compiled from "ParallelPeek.java"
final class reactor.core.publisher.ParallelPeek<T> extends reactor.core.publisher.ParallelFlux<T> implements reactor.core.publisher.SignalPeek<T> {
  final reactor.core.publisher.ParallelFlux<T> source;

  final java.util.function.Consumer<? super T> onNext;

  final java.util.function.Consumer<? super T> onAfterNext;

  final java.util.function.Consumer<? super java.lang.Throwable> onError;

  final java.lang.Runnable onComplete;

  final java.lang.Runnable onAfterTerminated;

  final java.util.function.Consumer<? super org.reactivestreams.Subscription> onSubscribe;

  final java.util.function.LongConsumer onRequest;

  final java.lang.Runnable onCancel;

  reactor.core.publisher.ParallelPeek(reactor.core.publisher.ParallelFlux<T>, java.util.function.Consumer<? super T>, java.util.function.Consumer<? super T>, java.util.function.Consumer<? super java.lang.Throwable>, java.lang.Runnable, java.lang.Runnable, java.util.function.Consumer<? super org.reactivestreams.Subscription>, java.util.function.LongConsumer, java.lang.Runnable);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/ParallelFlux."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field source:Lreactor/core/publisher/ParallelFlux;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field onNext:Ljava/util/function/Consumer;
      14: aload_0
      15: aload_3
      16: putfield      #4                  // Field onAfterNext:Ljava/util/function/Consumer;
      19: aload_0
      20: aload         4
      22: putfield      #5                  // Field onError:Ljava/util/function/Consumer;
      25: aload_0
      26: aload         5
      28: putfield      #6                  // Field onComplete:Ljava/lang/Runnable;
      31: aload_0
      32: aload         6
      34: putfield      #7                  // Field onAfterTerminated:Ljava/lang/Runnable;
      37: aload_0
      38: aload         7
      40: putfield      #8                  // Field onSubscribe:Ljava/util/function/Consumer;
      43: aload_0
      44: aload         8
      46: putfield      #9                  // Field onRequest:Ljava/util/function/LongConsumer;
      49: aload_0
      50: aload         9
      52: putfield      #10                 // Field onCancel:Ljava/lang/Runnable;
      55: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #11                 // Method validate:([Lorg/reactivestreams/Subscriber;)Z
       5: ifne          9
       8: return
       9: aload_1
      10: arraylength
      11: istore_2
      12: iload_2
      13: anewarray     #12                 // class reactor/core/CoreSubscriber
      16: astore_3
      17: aload_1
      18: iconst_0
      19: aaload
      20: instanceof    #13                 // class reactor/core/Fuseable$ConditionalSubscriber
      23: istore        4
      25: iconst_0
      26: istore        5
      28: iload         5
      30: iload_2
      31: if_icmpge     83
      34: iload         4
      36: ifeq          61
      39: aload_3
      40: iload         5
      42: new           #14                 // class reactor/core/publisher/FluxPeekFuseable$PeekConditionalSubscriber
      45: dup
      46: aload_1
      47: iload         5
      49: aaload
      50: checkcast     #13                 // class reactor/core/Fuseable$ConditionalSubscriber
      53: aload_0
      54: invokespecial #15                 // Method reactor/core/publisher/FluxPeekFuseable$PeekConditionalSubscriber."<init>":(Lreactor/core/Fuseable$ConditionalSubscriber;Lreactor/core/publisher/SignalPeek;)V
      57: aastore
      58: goto          77
      61: aload_3
      62: iload         5
      64: new           #16                 // class reactor/core/publisher/FluxPeek$PeekSubscriber
      67: dup
      68: aload_1
      69: iload         5
      71: aaload
      72: aload_0
      73: invokespecial #17                 // Method reactor/core/publisher/FluxPeek$PeekSubscriber."<init>":(Lreactor/core/CoreSubscriber;Lreactor/core/publisher/SignalPeek;)V
      76: aastore
      77: iinc          5, 1
      80: goto          28
      83: aload_0
      84: getfield      #2                  // Field source:Lreactor/core/publisher/ParallelFlux;
      87: aload_3
      88: invokevirtual #18                 // Method reactor/core/publisher/ParallelFlux.subscribe:([Lreactor/core/CoreSubscriber;)V
      91: return

  public int parallelism();
    Code:
       0: aload_0
       1: getfield      #2                  // Field source:Lreactor/core/publisher/ParallelFlux;
       4: invokevirtual #19                 // Method reactor/core/publisher/ParallelFlux.parallelism:()I
       7: ireturn

  public int getPrefetch();
    Code:
       0: aload_0
       1: getfield      #2                  // Field source:Lreactor/core/publisher/ParallelFlux;
       4: invokevirtual #20                 // Method reactor/core/publisher/ParallelFlux.getPrefetch:()I
       7: ireturn

  public java.util.function.Consumer<? super org.reactivestreams.Subscription> onSubscribeCall();
    Code:
       0: aload_0
       1: getfield      #8                  // Field onSubscribe:Ljava/util/function/Consumer;
       4: areturn

  public java.util.function.Consumer<? super T> onNextCall();
    Code:
       0: aload_0
       1: getfield      #3                  // Field onNext:Ljava/util/function/Consumer;
       4: areturn

  public java.util.function.Consumer<? super java.lang.Throwable> onErrorCall();
    Code:
       0: aload_0
       1: getfield      #5                  // Field onError:Ljava/util/function/Consumer;
       4: areturn

  public java.lang.Runnable onCompleteCall();
    Code:
       0: aload_0
       1: getfield      #6                  // Field onComplete:Ljava/lang/Runnable;
       4: areturn

  public java.lang.Runnable onAfterTerminateCall();
    Code:
       0: aload_0
       1: getfield      #7                  // Field onAfterTerminated:Ljava/lang/Runnable;
       4: areturn

  public java.util.function.LongConsumer onRequestCall();
    Code:
       0: aload_0
       1: getfield      #9                  // Field onRequest:Ljava/util/function/LongConsumer;
       4: areturn

  public java.lang.Runnable onCancelCall();
    Code:
       0: aload_0
       1: getfield      #10                 // Field onCancel:Ljava/lang/Runnable;
       4: areturn

  public java.util.function.Consumer<? super T> onAfterNextCall();
    Code:
       0: aload_0
       1: getfield      #4                  // Field onAfterNext:Ljava/util/function/Consumer;
       4: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #21                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #2                  // Field source:Lreactor/core/publisher/ParallelFlux;
      11: areturn
      12: aload_1
      13: getstatic     #22                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      16: if_acmpne     27
      19: aload_0
      20: invokevirtual #23                 // Method getPrefetch:()I
      23: invokestatic  #24                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      26: areturn
      27: aconst_null
      28: areturn
}
