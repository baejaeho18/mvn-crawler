Compiled from "FluxRefCountGrace.java"
final class reactor.core.publisher.FluxRefCountGrace<T> extends reactor.core.publisher.Flux<T> implements reactor.core.Scannable, reactor.core.Fuseable {
  final reactor.core.publisher.ConnectableFlux<T> source;

  final int n;

  final java.time.Duration gracePeriod;

  final reactor.core.scheduler.Scheduler scheduler;

  reactor.core.publisher.FluxRefCountGrace$RefConnection connection;

  reactor.core.publisher.FluxRefCountGrace(reactor.core.publisher.ConnectableFlux<T>, int, java.time.Duration, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/Flux."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field source:Lreactor/core/publisher/ConnectableFlux;
       9: aload_0
      10: iload_2
      11: putfield      #3                  // Field n:I
      14: aload_0
      15: aload_3
      16: putfield      #4                  // Field gracePeriod:Ljava/time/Duration;
      19: aload_0
      20: aload         4
      22: putfield      #5                  // Field scheduler:Lreactor/core/scheduler/Scheduler;
      25: return

  public int getPrefetch();
    Code:
       0: aload_0
       1: getfield      #2                  // Field source:Lreactor/core/publisher/ConnectableFlux;
       4: invokevirtual #6                  // Method reactor/core/publisher/ConnectableFlux.getPrefetch:()I
       7: ireturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #7                  // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
       4: if_acmpne     15
       7: aload_0
       8: invokevirtual #8                  // Method getPrefetch:()I
      11: invokestatic  #9                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      14: areturn
      15: aload_1
      16: getstatic     #10                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
      19: if_acmpne     27
      22: aload_0
      23: getfield      #2                  // Field source:Lreactor/core/publisher/ConnectableFlux;
      26: areturn
      27: aconst_null
      28: areturn

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: iconst_0
       1: istore_3
       2: aload_0
       3: dup
       4: astore        4
       6: monitorenter
       7: aload_0
       8: getfield      #11                 // Field connection:Lreactor/core/publisher/FluxRefCountGrace$RefConnection;
      11: astore_2
      12: aload_2
      13: ifnull        23
      16: aload_2
      17: getfield      #12                 // Field reactor/core/publisher/FluxRefCountGrace$RefConnection.terminated:Z
      20: ifeq          37
      23: new           #13                 // class reactor/core/publisher/FluxRefCountGrace$RefConnection
      26: dup
      27: aload_0
      28: invokespecial #14                 // Method reactor/core/publisher/FluxRefCountGrace$RefConnection."<init>":(Lreactor/core/publisher/FluxRefCountGrace;)V
      31: astore_2
      32: aload_0
      33: aload_2
      34: putfield      #11                 // Field connection:Lreactor/core/publisher/FluxRefCountGrace$RefConnection;
      37: aload_2
      38: getfield      #15                 // Field reactor/core/publisher/FluxRefCountGrace$RefConnection.subscriberCount:J
      41: lstore        5
      43: lload         5
      45: lconst_0
      46: lcmp
      47: ifne          66
      50: aload_2
      51: getfield      #16                 // Field reactor/core/publisher/FluxRefCountGrace$RefConnection.timer:Lreactor/core/Disposable;
      54: ifnull        66
      57: aload_2
      58: getfield      #16                 // Field reactor/core/publisher/FluxRefCountGrace$RefConnection.timer:Lreactor/core/Disposable;
      61: invokeinterface #17,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
      66: aload_2
      67: lload         5
      69: lconst_1
      70: ladd
      71: putfield      #15                 // Field reactor/core/publisher/FluxRefCountGrace$RefConnection.subscriberCount:J
      74: aload_2
      75: getfield      #18                 // Field reactor/core/publisher/FluxRefCountGrace$RefConnection.connected:Z
      78: ifne          101
      81: lload         5
      83: lconst_1
      84: ladd
      85: aload_0
      86: getfield      #3                  // Field n:I
      89: i2l
      90: lcmp
      91: ifne          101
      94: iconst_1
      95: istore_3
      96: aload_2
      97: iconst_1
      98: putfield      #18                 // Field reactor/core/publisher/FluxRefCountGrace$RefConnection.connected:Z
     101: aload         4
     103: monitorexit
     104: goto          115
     107: astore        7
     109: aload         4
     111: monitorexit
     112: aload         7
     114: athrow
     115: aload_0
     116: getfield      #2                  // Field source:Lreactor/core/publisher/ConnectableFlux;
     119: new           #19                 // class reactor/core/publisher/FluxRefCountGrace$RefCountInner
     122: dup
     123: aload_1
     124: aload_0
     125: aload_2
     126: invokespecial #20                 // Method reactor/core/publisher/FluxRefCountGrace$RefCountInner."<init>":(Lreactor/core/CoreSubscriber;Lreactor/core/publisher/FluxRefCountGrace;Lreactor/core/publisher/FluxRefCountGrace$RefConnection;)V
     129: invokevirtual #21                 // Method reactor/core/publisher/ConnectableFlux.subscribe:(Lreactor/core/CoreSubscriber;)V
     132: iload_3
     133: ifeq          147
     136: aload_0
     137: getfield      #2                  // Field source:Lreactor/core/publisher/ConnectableFlux;
     140: aload_2
     141: invokevirtual #22                 // Method reactor/core/publisher/ConnectableFlux.connect:(Ljava/util/function/Consumer;)V
     144: goto          147
     147: return
    Exception table:
       from    to  target type
           7   104   107   any
         107   112   107   any

  void cancel(reactor.core.publisher.FluxRefCountGrace$RefConnection);
    Code:
       0: aload_0
       1: dup
       2: astore_3
       3: monitorenter
       4: aload_1
       5: getfield      #12                 // Field reactor/core/publisher/FluxRefCountGrace$RefConnection.terminated:Z
       8: ifeq          14
      11: aload_3
      12: monitorexit
      13: return
      14: aload_1
      15: getfield      #15                 // Field reactor/core/publisher/FluxRefCountGrace$RefConnection.subscriberCount:J
      18: lconst_1
      19: lsub
      20: lstore        4
      22: aload_1
      23: lload         4
      25: putfield      #15                 // Field reactor/core/publisher/FluxRefCountGrace$RefConnection.subscriberCount:J
      28: lload         4
      30: lconst_0
      31: lcmp
      32: ifne          42
      35: aload_1
      36: getfield      #18                 // Field reactor/core/publisher/FluxRefCountGrace$RefConnection.connected:Z
      39: ifne          45
      42: aload_3
      43: monitorexit
      44: return
      45: aload_0
      46: getfield      #4                  // Field gracePeriod:Ljava/time/Duration;
      49: invokevirtual #23                 // Method java/time/Duration.isZero:()Z
      52: ifeq          63
      55: aload_0
      56: aload_1
      57: invokevirtual #24                 // Method timeout:(Lreactor/core/publisher/FluxRefCountGrace$RefConnection;)V
      60: aload_3
      61: monitorexit
      62: return
      63: invokestatic  #25                 // Method reactor/core/Disposables.swap:()Lreactor/core/Disposable$Swap;
      66: astore_2
      67: aload_1
      68: aload_2
      69: putfield      #16                 // Field reactor/core/publisher/FluxRefCountGrace$RefConnection.timer:Lreactor/core/Disposable;
      72: aload_3
      73: monitorexit
      74: goto          84
      77: astore        6
      79: aload_3
      80: monitorexit
      81: aload         6
      83: athrow
      84: aload_2
      85: aload_0
      86: getfield      #5                  // Field scheduler:Lreactor/core/scheduler/Scheduler;
      89: aload_1
      90: aload_0
      91: getfield      #4                  // Field gracePeriod:Ljava/time/Duration;
      94: invokevirtual #26                 // Method java/time/Duration.toMillis:()J
      97: getstatic     #27                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
     100: invokeinterface #28,  5           // InterfaceMethod reactor/core/scheduler/Scheduler.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lreactor/core/Disposable;
     105: invokeinterface #29,  2           // InterfaceMethod reactor/core/Disposable$Swap.replace:(Lreactor/core/Disposable;)Z
     110: pop
     111: return
    Exception table:
       from    to  target type
           4    13    77   any
          14    44    77   any
          45    62    77   any
          63    74    77   any
          77    81    77   any

  void terminated(reactor.core.publisher.FluxRefCountGrace$RefConnection);
    Code:
       0: aload_0
       1: dup
       2: astore_2
       3: monitorenter
       4: aload_1
       5: getfield      #12                 // Field reactor/core/publisher/FluxRefCountGrace$RefConnection.terminated:Z
       8: ifne          21
      11: aload_1
      12: iconst_1
      13: putfield      #12                 // Field reactor/core/publisher/FluxRefCountGrace$RefConnection.terminated:Z
      16: aload_0
      17: aconst_null
      18: putfield      #11                 // Field connection:Lreactor/core/publisher/FluxRefCountGrace$RefConnection;
      21: aload_2
      22: monitorexit
      23: goto          31
      26: astore_3
      27: aload_2
      28: monitorexit
      29: aload_3
      30: athrow
      31: return
    Exception table:
       from    to  target type
           4    23    26   any
          26    29    26   any

  void timeout(reactor.core.publisher.FluxRefCountGrace$RefConnection);
    Code:
       0: aload_0
       1: dup
       2: astore_2
       3: monitorenter
       4: aload_1
       5: getfield      #15                 // Field reactor/core/publisher/FluxRefCountGrace$RefConnection.subscriberCount:J
       8: lconst_0
       9: lcmp
      10: ifne          56
      13: aload_1
      14: aload_0
      15: getfield      #11                 // Field connection:Lreactor/core/publisher/FluxRefCountGrace$RefConnection;
      18: if_acmpne     56
      21: getstatic     #30                 // Field reactor/core/publisher/FluxRefCountGrace$RefConnection.SOURCE_DISCONNECTOR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      24: aload_1
      25: invokestatic  #31                 // Method reactor/core/publisher/OperatorDisposables.dispose:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
      28: pop
      29: aload_0
      30: getfield      #2                  // Field source:Lreactor/core/publisher/ConnectableFlux;
      33: instanceof    #32                 // class reactor/core/Disposable
      36: ifeq          51
      39: aload_0
      40: getfield      #2                  // Field source:Lreactor/core/publisher/ConnectableFlux;
      43: checkcast     #32                 // class reactor/core/Disposable
      46: invokeinterface #17,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
      51: aload_0
      52: aconst_null
      53: putfield      #11                 // Field connection:Lreactor/core/publisher/FluxRefCountGrace$RefConnection;
      56: aload_2
      57: monitorexit
      58: goto          66
      61: astore_3
      62: aload_2
      63: monitorexit
      64: aload_3
      65: athrow
      66: return
    Exception table:
       from    to  target type
           4    58    61   any
          61    64    61   any
}
