Compiled from "FluxSwitchMap.java"
final class reactor.core.publisher.FluxSwitchMap$SwitchMapInner<R> implements reactor.core.publisher.InnerConsumer<R>, org.reactivestreams.Subscription {
  final reactor.core.publisher.FluxSwitchMap$SwitchMapMain<?, R> parent;

  final int prefetch;

  final int limit;

  final long index;

  volatile int once;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxSwitchMap$SwitchMapInner> ONCE;

  volatile org.reactivestreams.Subscription s;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxSwitchMap$SwitchMapInner, org.reactivestreams.Subscription> S;

  int produced;

  reactor.core.publisher.FluxSwitchMap$SwitchMapInner(reactor.core.publisher.FluxSwitchMap$SwitchMapMain<?, R>, int, long);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field parent:Lreactor/core/publisher/FluxSwitchMap$SwitchMapMain;
       9: aload_0
      10: iload_2
      11: putfield      #3                  // Field prefetch:I
      14: aload_0
      15: iload_2
      16: invokestatic  #4                  // Method reactor/core/publisher/Operators.unboundedOrLimit:(I)I
      19: putfield      #5                  // Field limit:I
      22: aload_0
      23: lload_3
      24: putfield      #6                  // Field index:J
      27: return

  public reactor.util.context.Context currentContext();
    Code:
       0: aload_0
       1: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxSwitchMap$SwitchMapMain;
       4: invokevirtual #7                  // Method reactor/core/publisher/FluxSwitchMap$SwitchMapMain.currentContext:()Lreactor/util/context/Context;
       7: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #8                  // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
       4: if_acmpne     26
       7: aload_0
       8: getfield      #9                  // Field s:Lorg/reactivestreams/Subscription;
      11: invokestatic  #10                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      14: if_acmpne     21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: invokestatic  #11                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      25: areturn
      26: aload_1
      27: getstatic     #12                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
      30: if_acmpne     38
      33: aload_0
      34: getfield      #9                  // Field s:Lorg/reactivestreams/Subscription;
      37: areturn
      38: aload_1
      39: getstatic     #13                 // Field reactor/core/Scannable$Attr.ACTUAL:Lreactor/core/Scannable$Attr;
      42: if_acmpne     50
      45: aload_0
      46: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxSwitchMap$SwitchMapMain;
      49: areturn
      50: aload_1
      51: getstatic     #14                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      54: if_acmpne     65
      57: aload_0
      58: getfield      #3                  // Field prefetch:I
      61: invokestatic  #15                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      64: areturn
      65: aconst_null
      66: areturn

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #9                  // Field s:Lorg/reactivestreams/Subscription;
       4: astore_2
       5: aload_2
       6: invokestatic  #10                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
       9: if_acmpne     18
      12: aload_1
      13: invokeinterface #16,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      18: aload_2
      19: ifnull        32
      22: aload_1
      23: invokeinterface #16,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      28: invokestatic  #17                 // Method reactor/core/publisher/Operators.reportSubscriptionSet:()V
      31: return
      32: getstatic     #18                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      35: aload_0
      36: aconst_null
      37: aload_1
      38: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      41: ifeq          58
      44: aload_1
      45: aload_0
      46: getfield      #3                  // Field prefetch:I
      49: invokestatic  #20                 // Method reactor/core/publisher/Operators.unboundedOrPrefetch:(I)J
      52: invokeinterface #21,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      57: return
      58: aload_0
      59: getfield      #9                  // Field s:Lorg/reactivestreams/Subscription;
      62: astore_2
      63: aload_2
      64: invokestatic  #10                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      67: if_acmpeq     79
      70: aload_1
      71: invokeinterface #16,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      76: invokestatic  #17                 // Method reactor/core/publisher/Operators.reportSubscriptionSet:()V
      79: return

  public void onNext(R);
    Code:
       0: aload_0
       1: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxSwitchMap$SwitchMapMain;
       4: aload_0
       5: aload_1
       6: invokevirtual #22                 // Method reactor/core/publisher/FluxSwitchMap$SwitchMapMain.innerNext:(Lreactor/core/publisher/FluxSwitchMap$SwitchMapInner;Ljava/lang/Object;)V
       9: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxSwitchMap$SwitchMapMain;
       4: aload_0
       5: aload_1
       6: invokevirtual #23                 // Method reactor/core/publisher/FluxSwitchMap$SwitchMapMain.innerError:(Lreactor/core/publisher/FluxSwitchMap$SwitchMapInner;Ljava/lang/Throwable;)V
       9: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxSwitchMap$SwitchMapMain;
       4: aload_0
       5: invokevirtual #24                 // Method reactor/core/publisher/FluxSwitchMap$SwitchMapMain.innerComplete:(Lreactor/core/publisher/FluxSwitchMap$SwitchMapInner;)V
       8: return

  void deactivate();
    Code:
       0: getstatic     #25                 // Field ONCE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: iconst_0
       5: iconst_1
       6: invokevirtual #26                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
       9: ifeq          19
      12: aload_0
      13: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxSwitchMap$SwitchMapMain;
      16: invokevirtual #27                 // Method reactor/core/publisher/FluxSwitchMap$SwitchMapMain.deactivate:()V
      19: return

  void requestOne();
    Code:
       0: aload_0
       1: getfield      #28                 // Field produced:I
       4: iconst_1
       5: iadd
       6: istore_1
       7: iload_1
       8: aload_0
       9: getfield      #5                  // Field limit:I
      12: if_icmpne     34
      15: aload_0
      16: iconst_0
      17: putfield      #28                 // Field produced:I
      20: aload_0
      21: getfield      #9                  // Field s:Lorg/reactivestreams/Subscription;
      24: iload_1
      25: i2l
      26: invokeinterface #21,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      31: goto          39
      34: aload_0
      35: iload_1
      36: putfield      #28                 // Field produced:I
      39: return

  public void request(long);
    Code:
       0: aload_0
       1: getfield      #28                 // Field produced:I
       4: i2l
       5: lload_1
       6: ladd
       7: lstore_3
       8: lload_3
       9: aload_0
      10: getfield      #5                  // Field limit:I
      13: i2l
      14: lcmp
      15: iflt          36
      18: aload_0
      19: iconst_0
      20: putfield      #28                 // Field produced:I
      23: aload_0
      24: getfield      #9                  // Field s:Lorg/reactivestreams/Subscription;
      27: lload_3
      28: invokeinterface #21,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      33: goto          42
      36: aload_0
      37: lload_3
      38: l2i
      39: putfield      #28                 // Field produced:I
      42: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #9                  // Field s:Lorg/reactivestreams/Subscription;
       4: astore_1
       5: aload_1
       6: invokestatic  #10                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
       9: if_acmpeq     43
      12: getstatic     #18                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      15: aload_0
      16: invokestatic  #10                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      19: invokevirtual #29                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      22: checkcast     #30                 // class org/reactivestreams/Subscription
      25: astore_1
      26: aload_1
      27: ifnull        43
      30: aload_1
      31: invokestatic  #10                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      34: if_acmpeq     43
      37: aload_1
      38: invokeinterface #16,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      43: return

  static {};
    Code:
       0: ldc           #31                 // class reactor/core/publisher/FluxSwitchMap$SwitchMapInner
       2: ldc           #32                 // String once
       4: invokestatic  #33                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #25                 // Field ONCE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: ldc           #31                 // class reactor/core/publisher/FluxSwitchMap$SwitchMapInner
      12: ldc           #30                 // class org/reactivestreams/Subscription
      14: ldc           #34                 // String s
      16: invokestatic  #35                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      19: putstatic     #18                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      22: return
}
