Compiled from "MonoFlatMapMany.java"
final class reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain<T, R> implements reactor.core.publisher.InnerOperator<T, R> {
  final reactor.core.CoreSubscriber<? super R> actual;

  final java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>> mapper;

  org.reactivestreams.Subscription main;

  volatile org.reactivestreams.Subscription inner;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain, org.reactivestreams.Subscription> INNER;

  volatile long requested;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain> REQUESTED;

  boolean hasValue;

  reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain(reactor.core.CoreSubscriber<? super R>, java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field mapper:Ljava/util/function/Function;
      14: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #4                  // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #5                  // Field main:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_0
      13: aload_1
      14: invokespecial #6                  // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      17: areturn

  public java.util.stream.Stream<? extends reactor.core.Scannable> inners();
    Code:
       0: aload_0
       1: getfield      #7                  // Field inner:Lorg/reactivestreams/Subscription;
       4: invokestatic  #8                  // InterfaceMethod reactor/core/Scannable.from:(Ljava/lang/Object;)Lreactor/core/Scannable;
       7: invokestatic  #9                  // InterfaceMethod java/util/stream/Stream.of:(Ljava/lang/Object;)Ljava/util/stream/Stream;
      10: areturn

  public reactor.core.CoreSubscriber<? super R> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public void request(long);
    Code:
       0: aload_0
       1: getfield      #7                  // Field inner:Lorg/reactivestreams/Subscription;
       4: astore_3
       5: aload_3
       6: ifnull        19
       9: aload_3
      10: lload_1
      11: invokeinterface #10,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      16: goto          66
      19: lload_1
      20: invokestatic  #11                 // Method reactor/core/publisher/Operators.validate:(J)Z
      23: ifeq          66
      26: getstatic     #12                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      29: aload_0
      30: lload_1
      31: invokestatic  #13                 // Method reactor/core/publisher/Operators.addCap:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
      34: pop2
      35: aload_0
      36: getfield      #7                  // Field inner:Lorg/reactivestreams/Subscription;
      39: astore_3
      40: aload_3
      41: ifnull        66
      44: getstatic     #12                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      47: aload_0
      48: lconst_0
      49: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.getAndSet:(Ljava/lang/Object;J)J
      52: lstore_1
      53: lload_1
      54: lconst_0
      55: lcmp
      56: ifeq          66
      59: aload_3
      60: lload_1
      61: invokeinterface #10,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      66: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #5                  // Field main:Lorg/reactivestreams/Subscription;
       4: invokeinterface #15,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
       9: getstatic     #16                 // Field INNER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: aload_0
      13: invokestatic  #17                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
      16: pop
      17: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #5                  // Field main:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #18                 // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          35
      11: aload_0
      12: aload_1
      13: putfield      #5                  // Field main:Lorg/reactivestreams/Subscription;
      16: aload_0
      17: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      20: aload_0
      21: invokeinterface #19,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      26: aload_1
      27: ldc2_w        #21                 // long 9223372036854775807l
      30: invokeinterface #10,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      35: return

  void onSubscribeInner(org.reactivestreams.Subscription);
    Code:
       0: getstatic     #16                 // Field INNER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #23                 // Method reactor/core/publisher/Operators.setOnce:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          33
      11: getstatic     #12                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      14: aload_0
      15: lconst_0
      16: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.getAndSet:(Ljava/lang/Object;J)J
      19: lstore_2
      20: lload_2
      21: lconst_0
      22: lcmp
      23: ifeq          33
      26: aload_1
      27: lload_2
      28: invokeinterface #10,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      33: return

  public void onNext(T);
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #24                 // Field hasValue:Z
       5: aload_0
       6: getfield      #3                  // Field mapper:Ljava/util/function/Function;
       9: aload_1
      10: invokeinterface #25,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      15: ldc           #26                 // String The mapper returned a null Publisher.
      17: invokestatic  #27                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      20: checkcast     #28                 // class org/reactivestreams/Publisher
      23: astore_2
      24: goto          53
      27: astore_3
      28: aload_0
      29: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      32: aload_0
      33: aload_3
      34: aload_1
      35: aload_0
      36: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      39: invokeinterface #30,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      44: invokestatic  #31                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      47: invokeinterface #32,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      52: return
      53: aload_2
      54: instanceof    #33                 // class java/util/concurrent/Callable
      57: ifeq          130
      60: aload_2
      61: checkcast     #33                 // class java/util/concurrent/Callable
      64: invokeinterface #34,  1           // InterfaceMethod java/util/concurrent/Callable.call:()Ljava/lang/Object;
      69: astore_3
      70: goto          101
      73: astore        4
      75: aload_0
      76: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      79: aload_0
      80: aload         4
      82: aload_1
      83: aload_0
      84: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      87: invokeinterface #30,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      92: invokestatic  #31                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      95: invokeinterface #32,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
     100: return
     101: aload_3
     102: ifnonnull     117
     105: aload_0
     106: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     109: invokeinterface #35,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
     114: goto          129
     117: aload_0
     118: aload_0
     119: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     122: aload_3
     123: invokestatic  #36                 // Method reactor/core/publisher/Operators.scalarSubscription:(Lreactor/core/CoreSubscriber;Ljava/lang/Object;)Lorg/reactivestreams/Subscription;
     126: invokevirtual #37                 // Method onSubscribeInner:(Lorg/reactivestreams/Subscription;)V
     129: return
     130: aload_2
     131: new           #38                 // class reactor/core/publisher/MonoFlatMapMany$FlatMapManyInner
     134: dup
     135: aload_0
     136: aload_0
     137: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     140: invokespecial #39                 // Method reactor/core/publisher/MonoFlatMapMany$FlatMapManyInner."<init>":(Lreactor/core/publisher/MonoFlatMapMany$FlatMapManyMain;Lreactor/core/CoreSubscriber;)V
     143: invokeinterface #40,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
     148: return
    Exception table:
       from    to  target type
           5    24    27   Class java/lang/Throwable
          60    70    73   Class java/lang/Throwable

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #24                 // Field hasValue:Z
       4: ifeq          21
       7: aload_1
       8: aload_0
       9: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      12: invokeinterface #30,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #41                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      20: return
      21: aload_0
      22: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      25: aload_1
      26: invokeinterface #32,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      31: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #24                 // Field hasValue:Z
       4: ifne          16
       7: aload_0
       8: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      11: invokeinterface #35,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      16: return

  static {};
    Code:
       0: ldc           #42                 // class reactor/core/publisher/MonoFlatMapMany$FlatMapManyMain
       2: ldc           #43                 // class org/reactivestreams/Subscription
       4: ldc           #44                 // String inner
       6: invokestatic  #45                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #16                 // Field INNER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: ldc           #42                 // class reactor/core/publisher/MonoFlatMapMany$FlatMapManyMain
      14: ldc           #46                 // String requested
      16: invokestatic  #47                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      19: putstatic     #12                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      22: return
}
