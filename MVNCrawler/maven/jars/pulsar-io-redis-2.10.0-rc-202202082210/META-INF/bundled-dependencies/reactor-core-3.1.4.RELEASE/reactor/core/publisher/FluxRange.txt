Compiled from "FluxRange.java"
final class reactor.core.publisher.FluxRange extends reactor.core.publisher.Flux<java.lang.Integer> implements reactor.core.Fuseable {
  final long start;

  final long end;

  reactor.core.publisher.FluxRange(int, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/Flux."<init>":()V
       4: iload_2
       5: ifge          35
       8: new           #2                  // class java/lang/IllegalArgumentException
      11: dup
      12: new           #3                  // class java/lang/StringBuilder
      15: dup
      16: invokespecial #4                  // Method java/lang/StringBuilder."<init>":()V
      19: ldc           #5                  // String count >= required but it was
      21: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: iload_2
      25: invokevirtual #7                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      28: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      31: invokespecial #9                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      34: athrow
      35: iload_1
      36: i2l
      37: iload_2
      38: i2l
      39: ladd
      40: lstore_3
      41: lload_3
      42: lconst_1
      43: lsub
      44: ldc2_w        #11                 // long 2147483647l
      47: lcmp
      48: ifle          61
      51: new           #2                  // class java/lang/IllegalArgumentException
      54: dup
      55: ldc           #13                 // String start + count must be less than Integer.MAX_VALUE + 1
      57: invokespecial #9                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      60: athrow
      61: aload_0
      62: iload_1
      63: i2l
      64: putfield      #14                 // Field start:J
      67: aload_0
      68: lload_3
      69: putfield      #15                 // Field end:J
      72: return

  public void subscribe(reactor.core.CoreSubscriber<? super java.lang.Integer>);
    Code:
       0: aload_0
       1: getfield      #14                 // Field start:J
       4: lstore_2
       5: aload_0
       6: getfield      #15                 // Field end:J
       9: lstore        4
      11: lload_2
      12: lload         4
      14: lcmp
      15: ifne          23
      18: aload_1
      19: invokestatic  #16                 // Method reactor/core/publisher/Operators.complete:(Lorg/reactivestreams/Subscriber;)V
      22: return
      23: lload_2
      24: lconst_1
      25: ladd
      26: lload         4
      28: lcmp
      29: ifne          48
      32: aload_1
      33: aload_1
      34: lload_2
      35: l2i
      36: invokestatic  #17                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      39: invokestatic  #18                 // Method reactor/core/publisher/Operators.scalarSubscription:(Lreactor/core/CoreSubscriber;Ljava/lang/Object;)Lorg/reactivestreams/Subscription;
      42: invokeinterface #19,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      47: return
      48: aload_1
      49: instanceof    #20                 // class reactor/core/Fuseable$ConditionalSubscriber
      52: ifeq          76
      55: aload_1
      56: new           #21                 // class reactor/core/publisher/FluxRange$RangeSubscriptionConditional
      59: dup
      60: aload_1
      61: checkcast     #20                 // class reactor/core/Fuseable$ConditionalSubscriber
      64: lload_2
      65: lload         4
      67: invokespecial #22                 // Method reactor/core/publisher/FluxRange$RangeSubscriptionConditional."<init>":(Lreactor/core/Fuseable$ConditionalSubscriber;JJ)V
      70: invokeinterface #19,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      75: return
      76: aload_1
      77: new           #23                 // class reactor/core/publisher/FluxRange$RangeSubscription
      80: dup
      81: aload_1
      82: lload_2
      83: lload         4
      85: invokespecial #24                 // Method reactor/core/publisher/FluxRange$RangeSubscription."<init>":(Lreactor/core/CoreSubscriber;JJ)V
      88: invokeinterface #19,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      93: return
}
