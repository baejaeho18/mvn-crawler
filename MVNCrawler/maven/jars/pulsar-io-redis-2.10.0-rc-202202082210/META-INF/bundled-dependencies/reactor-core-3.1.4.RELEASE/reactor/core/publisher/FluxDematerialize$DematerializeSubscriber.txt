Compiled from "FluxDematerialize.java"
final class reactor.core.publisher.FluxDematerialize$DematerializeSubscriber<T> extends java.util.AbstractQueue<T> implements reactor.core.publisher.InnerOperator<reactor.core.publisher.Signal<T>, T>, java.util.function.BooleanSupplier {
  final reactor.core.CoreSubscriber<? super T> actual;

  org.reactivestreams.Subscription s;

  T value;

  boolean done;

  long produced;

  volatile long requested;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.FluxDematerialize$DematerializeSubscriber> REQUESTED;

  volatile boolean cancelled;

  java.lang.Throwable error;

  reactor.core.publisher.FluxDematerialize$DematerializeSubscriber(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/util/AbstractQueue."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #3                  // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #4                  // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #5                  // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      16: if_acmpne     27
      19: aload_0
      20: getfield      #6                  // Field done:Z
      23: invokestatic  #7                  // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      26: areturn
      27: aload_1
      28: getstatic     #8                  // Field reactor/core/Scannable$Attr.REQUESTED_FROM_DOWNSTREAM:Lreactor/core/Scannable$Attr;
      31: if_acmpne     42
      34: aload_0
      35: getfield      #9                  // Field requested:J
      38: invokestatic  #10                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      41: areturn
      42: aload_1
      43: getstatic     #11                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
      46: if_acmpne     54
      49: aload_0
      50: getfield      #12                 // Field error:Ljava/lang/Throwable;
      53: areturn
      54: aload_1
      55: getstatic     #13                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      58: if_acmpne     69
      61: aload_0
      62: getfield      #14                 // Field cancelled:Z
      65: invokestatic  #7                  // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      68: areturn
      69: aload_1
      70: getstatic     #15                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      73: if_acmpne     84
      76: aload_0
      77: invokevirtual #16                 // Method size:()I
      80: invokestatic  #17                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      83: areturn
      84: aload_0
      85: aload_1
      86: invokespecial #18                 // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      89: areturn

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #4                  // Field s:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #19                 // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          33
      11: aload_0
      12: aload_1
      13: putfield      #4                  // Field s:Lorg/reactivestreams/Subscription;
      16: aload_0
      17: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      20: aload_0
      21: invokeinterface #20,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      26: aload_1
      27: lconst_1
      28: invokeinterface #21,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      33: return

  public void onNext(reactor.core.publisher.Signal<T>);
    Code:
       0: aload_0
       1: getfield      #6                  // Field done:Z
       4: ifeq          21
       7: aload_1
       8: aload_0
       9: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      12: invokeinterface #22,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #23                 // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      20: return
      21: aload_1
      22: invokeinterface #24,  1           // InterfaceMethod reactor/core/publisher/Signal.isOnComplete:()Z
      27: ifeq          46
      30: aload_0
      31: getfield      #4                  // Field s:Lorg/reactivestreams/Subscription;
      34: invokeinterface #25,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      39: aload_0
      40: invokevirtual #26                 // Method onComplete:()V
      43: goto          125
      46: aload_1
      47: invokeinterface #27,  1           // InterfaceMethod reactor/core/publisher/Signal.isOnError:()Z
      52: ifeq          77
      55: aload_0
      56: getfield      #4                  // Field s:Lorg/reactivestreams/Subscription;
      59: invokeinterface #25,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      64: aload_0
      65: aload_1
      66: invokeinterface #28,  1           // InterfaceMethod reactor/core/publisher/Signal.getThrowable:()Ljava/lang/Throwable;
      71: invokevirtual #29                 // Method onError:(Ljava/lang/Throwable;)V
      74: goto          125
      77: aload_1
      78: invokeinterface #30,  1           // InterfaceMethod reactor/core/publisher/Signal.isOnNext:()Z
      83: ifeq          125
      86: aload_0
      87: getfield      #31                 // Field value:Ljava/lang/Object;
      90: astore_2
      91: aload_0
      92: aload_1
      93: invokeinterface #32,  1           // InterfaceMethod reactor/core/publisher/Signal.get:()Ljava/lang/Object;
      98: putfield      #31                 // Field value:Ljava/lang/Object;
     101: aload_2
     102: ifnull        125
     105: aload_0
     106: dup
     107: getfield      #33                 // Field produced:J
     110: lconst_1
     111: ladd
     112: putfield      #33                 // Field produced:J
     115: aload_0
     116: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     119: aload_2
     120: invokeinterface #34,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
     125: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #6                  // Field done:Z
       4: ifeq          21
       7: aload_1
       8: aload_0
       9: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      12: invokeinterface #22,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #35                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      20: return
      21: aload_0
      22: iconst_1
      23: putfield      #6                  // Field done:Z
      26: aload_0
      27: aload_1
      28: putfield      #12                 // Field error:Ljava/lang/Throwable;
      31: aload_0
      32: getfield      #33                 // Field produced:J
      35: lstore_2
      36: lload_2
      37: lconst_0
      38: lcmp
      39: ifeq          52
      42: getstatic     #36                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      45: aload_0
      46: lload_2
      47: lneg
      48: invokestatic  #37                 // Method reactor/core/publisher/Operators.addCap:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
      51: pop2
      52: aload_0
      53: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      56: aload_0
      57: getstatic     #36                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      60: aload_0
      61: aload_0
      62: aload_0
      63: getfield      #12                 // Field error:Ljava/lang/Throwable;
      66: invokestatic  #38                 // Method reactor/core/publisher/DrainUtils.postCompleteDelayError:(Lreactor/core/CoreSubscriber;Ljava/util/Queue;Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;Ljava/util/function/BooleanSupplier;Ljava/lang/Throwable;)V
      69: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #6                  // Field done:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #6                  // Field done:Z
      13: aload_0
      14: getfield      #33                 // Field produced:J
      17: lstore_1
      18: lload_1
      19: lconst_0
      20: lcmp
      21: ifeq          34
      24: getstatic     #36                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      27: aload_0
      28: lload_1
      29: lneg
      30: invokestatic  #37                 // Method reactor/core/publisher/Operators.addCap:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
      33: pop2
      34: aload_0
      35: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      38: aload_0
      39: getstatic     #36                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      42: aload_0
      43: aload_0
      44: aload_0
      45: getfield      #12                 // Field error:Ljava/lang/Throwable;
      48: invokestatic  #38                 // Method reactor/core/publisher/DrainUtils.postCompleteDelayError:(Lreactor/core/CoreSubscriber;Ljava/util/Queue;Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;Ljava/util/function/BooleanSupplier;Ljava/lang/Throwable;)V
      51: return

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #39                 // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          38
       7: lload_1
       8: aload_0
       9: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      12: aload_0
      13: getstatic     #36                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      16: aload_0
      17: aload_0
      18: aload_0
      19: getfield      #12                 // Field error:Ljava/lang/Throwable;
      22: invokestatic  #40                 // Method reactor/core/publisher/DrainUtils.postCompleteRequestDelayError:(JLorg/reactivestreams/Subscriber;Ljava/util/Queue;Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;Ljava/util/function/BooleanSupplier;Ljava/lang/Throwable;)Z
      25: ifne          38
      28: aload_0
      29: getfield      #4                  // Field s:Lorg/reactivestreams/Subscription;
      32: lload_1
      33: invokeinterface #21,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      38: return

  public void cancel();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #14                 // Field cancelled:Z
       5: aload_0
       6: getfield      #4                  // Field s:Lorg/reactivestreams/Subscription;
       9: invokeinterface #25,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      14: return

  public reactor.core.CoreSubscriber<? super T> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public boolean getAsBoolean();
    Code:
       0: aload_0
       1: getfield      #14                 // Field cancelled:Z
       4: ireturn

  public int size();
    Code:
       0: aload_0
       1: getfield      #31                 // Field value:Ljava/lang/Object;
       4: ifnonnull     11
       7: iconst_0
       8: goto          12
      11: iconst_1
      12: ireturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #31                 // Field value:Ljava/lang/Object;
       4: ifnonnull     11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public boolean offer(T);
    Code:
       0: new           #41                 // class java/lang/UnsupportedOperationException
       3: dup
       4: invokespecial #42                 // Method java/lang/UnsupportedOperationException."<init>":()V
       7: athrow

  public T peek();
    Code:
       0: aload_0
       1: getfield      #31                 // Field value:Ljava/lang/Object;
       4: areturn

  public T poll();
    Code:
       0: aload_0
       1: getfield      #31                 // Field value:Ljava/lang/Object;
       4: astore_1
       5: aload_1
       6: ifnull        16
       9: aload_0
      10: aconst_null
      11: putfield      #31                 // Field value:Ljava/lang/Object;
      14: aload_1
      15: areturn
      16: aconst_null
      17: areturn

  public java.util.Iterator<T> iterator();
    Code:
       0: new           #41                 // class java/lang/UnsupportedOperationException
       3: dup
       4: invokespecial #42                 // Method java/lang/UnsupportedOperationException."<init>":()V
       7: athrow

  public void onNext(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #43                 // class reactor/core/publisher/Signal
       5: invokevirtual #44                 // Method onNext:(Lreactor/core/publisher/Signal;)V
       8: return

  static {};
    Code:
       0: ldc           #45                 // class reactor/core/publisher/FluxDematerialize$DematerializeSubscriber
       2: ldc           #46                 // String requested
       4: invokestatic  #47                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
       7: putstatic     #36                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      10: return
}
