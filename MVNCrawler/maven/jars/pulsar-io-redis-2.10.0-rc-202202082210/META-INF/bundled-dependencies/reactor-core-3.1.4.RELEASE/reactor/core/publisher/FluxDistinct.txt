Compiled from "FluxDistinct.java"
final class reactor.core.publisher.FluxDistinct<T, K, C> extends reactor.core.publisher.FluxOperator<T, T> {
  final java.util.function.Function<? super T, ? extends K> keyExtractor;

  final java.util.function.Supplier<C> collectionSupplier;

  final java.util.function.BiPredicate<C, K> distinctPredicate;

  final java.util.function.Consumer<C> cleanupCallback;

  reactor.core.publisher.FluxDistinct(reactor.core.publisher.Flux<? extends T>, java.util.function.Function<? super T, ? extends K>, java.util.function.Supplier<C>, java.util.function.BiPredicate<C, K>, java.util.function.Consumer<C>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxOperator."<init>":(Lreactor/core/publisher/Flux;)V
       5: aload_0
       6: aload_2
       7: ldc           #2                  // String keyExtractor
       9: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      12: checkcast     #4                  // class java/util/function/Function
      15: putfield      #5                  // Field keyExtractor:Ljava/util/function/Function;
      18: aload_0
      19: aload_3
      20: ldc           #6                  // String collectionSupplier
      22: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      25: checkcast     #7                  // class java/util/function/Supplier
      28: putfield      #8                  // Field collectionSupplier:Ljava/util/function/Supplier;
      31: aload_0
      32: aload         4
      34: ldc           #9                  // String distinctPredicate
      36: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      39: checkcast     #10                 // class java/util/function/BiPredicate
      42: putfield      #11                 // Field distinctPredicate:Ljava/util/function/BiPredicate;
      45: aload_0
      46: aload         5
      48: ldc           #12                 // String cleanupCallback
      50: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      53: checkcast     #13                 // class java/util/function/Consumer
      56: putfield      #14                 // Field cleanupCallback:Ljava/util/function/Consumer;
      59: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: getfield      #8                  // Field collectionSupplier:Ljava/util/function/Supplier;
       4: invokeinterface #15,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
       9: ldc           #16                 // String The collectionSupplier returned a null collection
      11: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      14: astore_2
      15: goto          34
      18: astore_3
      19: aload_1
      20: aload_3
      21: aload_1
      22: invokeinterface #18,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      27: invokestatic  #19                 // Method reactor/core/publisher/Operators.onOperatorError:(Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      30: invokestatic  #20                 // Method reactor/core/publisher/Operators.error:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
      33: return
      34: aload_1
      35: instanceof    #21                 // class reactor/core/Fuseable$ConditionalSubscriber
      38: ifeq          75
      41: aload_0
      42: getfield      #22                 // Field source:Lreactor/core/publisher/Flux;
      45: new           #23                 // class reactor/core/publisher/FluxDistinct$DistinctConditionalSubscriber
      48: dup
      49: aload_1
      50: checkcast     #21                 // class reactor/core/Fuseable$ConditionalSubscriber
      53: aload_2
      54: aload_0
      55: getfield      #5                  // Field keyExtractor:Ljava/util/function/Function;
      58: aload_0
      59: getfield      #11                 // Field distinctPredicate:Ljava/util/function/BiPredicate;
      62: aload_0
      63: getfield      #14                 // Field cleanupCallback:Ljava/util/function/Consumer;
      66: invokespecial #24                 // Method reactor/core/publisher/FluxDistinct$DistinctConditionalSubscriber."<init>":(Lreactor/core/Fuseable$ConditionalSubscriber;Ljava/lang/Object;Ljava/util/function/Function;Ljava/util/function/BiPredicate;Ljava/util/function/Consumer;)V
      69: invokevirtual #25                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      72: goto          103
      75: aload_0
      76: getfield      #22                 // Field source:Lreactor/core/publisher/Flux;
      79: new           #26                 // class reactor/core/publisher/FluxDistinct$DistinctSubscriber
      82: dup
      83: aload_1
      84: aload_2
      85: aload_0
      86: getfield      #5                  // Field keyExtractor:Ljava/util/function/Function;
      89: aload_0
      90: getfield      #11                 // Field distinctPredicate:Ljava/util/function/BiPredicate;
      93: aload_0
      94: getfield      #14                 // Field cleanupCallback:Ljava/util/function/Consumer;
      97: invokespecial #27                 // Method reactor/core/publisher/FluxDistinct$DistinctSubscriber."<init>":(Lreactor/core/CoreSubscriber;Ljava/lang/Object;Ljava/util/function/Function;Ljava/util/function/BiPredicate;Ljava/util/function/Consumer;)V
     100: invokevirtual #25                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
     103: return
    Exception table:
       from    to  target type
           0    15    18   Class java/lang/Throwable
}
