Compiled from "FluxBufferWhen.java"
final class reactor.core.publisher.FluxBufferWhen<T, OPEN, CLOSE, BUFFER extends java.util.Collection<? super T>> extends reactor.core.publisher.FluxOperator<T, BUFFER> {
  final org.reactivestreams.Publisher<OPEN> start;

  final java.util.function.Function<? super OPEN, ? extends org.reactivestreams.Publisher<CLOSE>> end;

  final java.util.function.Supplier<BUFFER> bufferSupplier;

  final java.util.function.Supplier<? extends java.util.Queue<BUFFER>> queueSupplier;

  reactor.core.publisher.FluxBufferWhen(reactor.core.publisher.Flux<? extends T>, org.reactivestreams.Publisher<OPEN>, java.util.function.Function<? super OPEN, ? extends org.reactivestreams.Publisher<CLOSE>>, java.util.function.Supplier<BUFFER>, java.util.function.Supplier<? extends java.util.Queue<BUFFER>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxOperator."<init>":(Lreactor/core/publisher/Flux;)V
       5: aload_0
       6: aload_2
       7: ldc           #2                  // String start
       9: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      12: checkcast     #4                  // class org/reactivestreams/Publisher
      15: putfield      #5                  // Field start:Lorg/reactivestreams/Publisher;
      18: aload_0
      19: aload_3
      20: ldc           #6                  // String end
      22: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      25: checkcast     #7                  // class java/util/function/Function
      28: putfield      #8                  // Field end:Ljava/util/function/Function;
      31: aload_0
      32: aload         4
      34: ldc           #9                  // String bufferSupplier
      36: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      39: checkcast     #10                 // class java/util/function/Supplier
      42: putfield      #11                 // Field bufferSupplier:Ljava/util/function/Supplier;
      45: aload_0
      46: aload         5
      48: ldc           #12                 // String queueSupplier
      50: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      53: checkcast     #10                 // class java/util/function/Supplier
      56: putfield      #13                 // Field queueSupplier:Ljava/util/function/Supplier;
      59: return

  public int getPrefetch();
    Code:
       0: ldc           #15                 // int 2147483647
       2: ireturn

  public void subscribe(reactor.core.CoreSubscriber<? super BUFFER>);
    Code:
       0: new           #16                 // class reactor/core/publisher/FluxBufferWhen$BufferWhenMainSubscriber
       3: dup
       4: aload_1
       5: aload_0
       6: getfield      #11                 // Field bufferSupplier:Ljava/util/function/Supplier;
       9: aload_0
      10: getfield      #13                 // Field queueSupplier:Ljava/util/function/Supplier;
      13: aload_0
      14: getfield      #5                  // Field start:Lorg/reactivestreams/Publisher;
      17: aload_0
      18: getfield      #8                  // Field end:Ljava/util/function/Function;
      21: invokespecial #17                 // Method reactor/core/publisher/FluxBufferWhen$BufferWhenMainSubscriber."<init>":(Lreactor/core/CoreSubscriber;Ljava/util/function/Supplier;Ljava/util/function/Supplier;Lorg/reactivestreams/Publisher;Ljava/util/function/Function;)V
      24: astore_2
      25: aload_1
      26: aload_2
      27: invokeinterface #18,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      32: new           #19                 // class reactor/core/publisher/FluxBufferWhen$BufferWhenOpenSubscriber
      35: dup
      36: aload_2
      37: invokespecial #20                 // Method reactor/core/publisher/FluxBufferWhen$BufferWhenOpenSubscriber."<init>":(Lreactor/core/publisher/FluxBufferWhen$BufferWhenMainSubscriber;)V
      40: astore_3
      41: aload_2
      42: getfield      #21                 // Field reactor/core/publisher/FluxBufferWhen$BufferWhenMainSubscriber.subscribers:Lreactor/core/Disposable$Composite;
      45: aload_3
      46: invokeinterface #22,  2           // InterfaceMethod reactor/core/Disposable$Composite.add:(Lreactor/core/Disposable;)Z
      51: ifeq          72
      54: aload_0
      55: getfield      #23                 // Field source:Lreactor/core/publisher/Flux;
      58: aload_2
      59: invokevirtual #24                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      62: aload_0
      63: getfield      #5                  // Field start:Lorg/reactivestreams/Publisher;
      66: aload_3
      67: invokeinterface #25,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
      72: return
}
