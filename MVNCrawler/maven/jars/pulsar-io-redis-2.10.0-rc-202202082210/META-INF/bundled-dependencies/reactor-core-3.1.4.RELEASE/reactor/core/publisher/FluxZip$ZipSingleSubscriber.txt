Compiled from "FluxZip.java"
final class reactor.core.publisher.FluxZip$ZipSingleSubscriber<T> implements reactor.core.publisher.InnerConsumer<T>, reactor.core.Disposable {
  final reactor.core.publisher.FluxZip$ZipSingleCoordinator<T, ?> parent;

  final int index;

  volatile org.reactivestreams.Subscription s;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxZip$ZipSingleSubscriber, org.reactivestreams.Subscription> S;

  boolean done;

  reactor.core.publisher.FluxZip$ZipSingleSubscriber(reactor.core.publisher.FluxZip$ZipSingleCoordinator<T, ?>, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field parent:Lreactor/core/publisher/FluxZip$ZipSingleCoordinator;
       9: aload_0
      10: iload_2
      11: putfield      #3                  // Field index:I
      14: return

  public reactor.util.context.Context currentContext();
    Code:
       0: aload_0
       1: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxZip$ZipSingleCoordinator;
       4: invokevirtual #4                  // Method reactor/core/publisher/FluxZip$ZipSingleCoordinator.currentContext:()Lreactor/util/context/Context;
       7: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #5                  // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #6                  // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #7                  // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      16: if_acmpne     27
      19: aload_0
      20: getfield      #8                  // Field done:Z
      23: invokestatic  #9                  // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      26: areturn
      27: aload_1
      28: getstatic     #10                 // Field reactor/core/Scannable$Attr.ACTUAL:Lreactor/core/Scannable$Attr;
      31: if_acmpne     39
      34: aload_0
      35: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxZip$ZipSingleCoordinator;
      38: areturn
      39: aload_1
      40: getstatic     #11                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      43: if_acmpne     65
      46: aload_0
      47: getfield      #6                  // Field s:Lorg/reactivestreams/Subscription;
      50: invokestatic  #12                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      53: if_acmpne     60
      56: iconst_1
      57: goto          61
      60: iconst_0
      61: invokestatic  #9                  // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      64: areturn
      65: aload_1
      66: getstatic     #13                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      69: if_acmpne     96
      72: aload_0
      73: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxZip$ZipSingleCoordinator;
      76: getfield      #14                 // Field reactor/core/publisher/FluxZip$ZipSingleCoordinator.scalars:[Ljava/lang/Object;
      79: aload_0
      80: getfield      #3                  // Field index:I
      83: aaload
      84: ifnonnull     91
      87: iconst_0
      88: goto          92
      91: iconst_1
      92: invokestatic  #15                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      95: areturn
      96: aconst_null
      97: areturn

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: getstatic     #16                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #17                 // Method reactor/core/publisher/Operators.setOnce:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          25
      11: aload_0
      12: aload_1
      13: putfield      #6                  // Field s:Lorg/reactivestreams/Subscription;
      16: aload_1
      17: ldc2_w        #19                 // long 9223372036854775807l
      20: invokeinterface #21,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      25: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #8                  // Field done:Z
       4: ifeq          19
       7: aload_1
       8: aload_0
       9: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxZip$ZipSingleCoordinator;
      12: invokevirtual #4                  // Method reactor/core/publisher/FluxZip$ZipSingleCoordinator.currentContext:()Lreactor/util/context/Context;
      15: invokestatic  #22                 // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      18: return
      19: aload_0
      20: iconst_1
      21: putfield      #8                  // Field done:Z
      24: getstatic     #16                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      27: aload_0
      28: invokestatic  #23                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
      31: pop
      32: aload_0
      33: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxZip$ZipSingleCoordinator;
      36: aload_1
      37: aload_0
      38: getfield      #3                  // Field index:I
      41: invokevirtual #24                 // Method reactor/core/publisher/FluxZip$ZipSingleCoordinator.next:(Ljava/lang/Object;I)V
      44: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #8                  // Field done:Z
       4: ifeq          19
       7: aload_1
       8: aload_0
       9: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxZip$ZipSingleCoordinator;
      12: invokevirtual #4                  // Method reactor/core/publisher/FluxZip$ZipSingleCoordinator.currentContext:()Lreactor/util/context/Context;
      15: invokestatic  #25                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      18: return
      19: aload_0
      20: iconst_1
      21: putfield      #8                  // Field done:Z
      24: aload_0
      25: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxZip$ZipSingleCoordinator;
      28: aload_1
      29: aload_0
      30: getfield      #3                  // Field index:I
      33: invokevirtual #26                 // Method reactor/core/publisher/FluxZip$ZipSingleCoordinator.error:(Ljava/lang/Throwable;I)V
      36: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #8                  // Field done:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #8                  // Field done:Z
      13: aload_0
      14: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxZip$ZipSingleCoordinator;
      17: aload_0
      18: getfield      #3                  // Field index:I
      21: invokevirtual #27                 // Method reactor/core/publisher/FluxZip$ZipSingleCoordinator.complete:(I)V
      24: return

  public void dispose();
    Code:
       0: getstatic     #16                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokestatic  #23                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
       7: pop
       8: return

  static {};
    Code:
       0: ldc           #28                 // class reactor/core/publisher/FluxZip$ZipSingleSubscriber
       2: ldc           #29                 // class org/reactivestreams/Subscription
       4: ldc           #30                 // String s
       6: invokestatic  #31                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #16                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: return
}
