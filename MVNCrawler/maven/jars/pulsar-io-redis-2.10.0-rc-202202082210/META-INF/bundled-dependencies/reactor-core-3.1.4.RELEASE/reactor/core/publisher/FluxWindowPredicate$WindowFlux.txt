Compiled from "FluxWindowPredicate.java"
final class reactor.core.publisher.FluxWindowPredicate$WindowFlux<T> extends reactor.core.publisher.Flux<T> implements reactor.core.Fuseable, reactor.core.Fuseable$QueueSubscription<T>, reactor.core.publisher.InnerOperator<T, T> {
  final java.util.Queue<T> queue;

  volatile reactor.core.publisher.FluxWindowPredicate$WindowPredicateMain<T> parent;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxWindowPredicate$WindowFlux, reactor.core.publisher.FluxWindowPredicate$WindowPredicateMain> PARENT;

  volatile boolean done;

  java.lang.Throwable error;

  volatile reactor.core.CoreSubscriber<? super T> actual;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxWindowPredicate$WindowFlux, reactor.core.CoreSubscriber> ACTUAL;

  volatile boolean cancelled;

  volatile int once;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxWindowPredicate$WindowFlux> ONCE;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxWindowPredicate$WindowFlux> WIP;

  volatile long requested;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.FluxWindowPredicate$WindowFlux> REQUESTED;

  volatile boolean enableOperatorFusion;

  int produced;

  reactor.core.publisher.FluxWindowPredicate$WindowFlux(java.util.Queue<T>, reactor.core.publisher.FluxWindowPredicate$WindowPredicateMain<T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/Flux."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field queue:Ljava/util/Queue;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field parent:Lreactor/core/publisher/FluxWindowPredicate$WindowPredicateMain;
      14: return

  public reactor.core.CoreSubscriber<? super T> actual();
    Code:
       0: aload_0
       1: getfield      #4                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  void propagateTerminate();
    Code:
       0: aload_0
       1: getfield      #3                  // Field parent:Lreactor/core/publisher/FluxWindowPredicate$WindowPredicateMain;
       4: astore_1
       5: aload_1
       6: ifnull        25
       9: getstatic     #5                  // Field PARENT:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: aload_0
      13: aload_1
      14: aconst_null
      15: invokevirtual #6                  // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      18: ifeq          25
      21: aload_1
      22: invokevirtual #7                  // Method reactor/core/publisher/FluxWindowPredicate$WindowPredicateMain.groupTerminated:()V
      25: return

  void drainRegular(org.reactivestreams.Subscriber<? super T>);
    Code:
       0: iconst_1
       1: istore_2
       2: aload_0
       3: getfield      #2                  // Field queue:Ljava/util/Queue;
       6: astore_3
       7: aload_0
       8: getfield      #8                  // Field requested:J
      11: lstore        4
      13: lconst_0
      14: lstore        6
      16: lload         4
      18: lload         6
      20: lcmp
      21: ifeq          89
      24: aload_0
      25: getfield      #9                  // Field done:Z
      28: istore        8
      30: aload_3
      31: invokeinterface #10,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
      36: astore        9
      38: aload         9
      40: ifnonnull     47
      43: iconst_1
      44: goto          48
      47: iconst_0
      48: istore        10
      50: aload_0
      51: iload         8
      53: iload         10
      55: aload_1
      56: aload_3
      57: invokevirtual #11                 // Method checkTerminated:(ZZLorg/reactivestreams/Subscriber;Ljava/util/Queue;)Z
      60: ifeq          64
      63: return
      64: iload         10
      66: ifeq          72
      69: goto          89
      72: aload_1
      73: aload         9
      75: invokeinterface #12,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
      80: lload         6
      82: lconst_1
      83: ladd
      84: lstore        6
      86: goto          16
      89: lload         4
      91: lload         6
      93: lcmp
      94: ifne          117
      97: aload_0
      98: aload_0
      99: getfield      #9                  // Field done:Z
     102: aload_3
     103: invokeinterface #13,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
     108: aload_1
     109: aload_3
     110: invokevirtual #11                 // Method checkTerminated:(ZZLorg/reactivestreams/Subscriber;Ljava/util/Queue;)Z
     113: ifeq          117
     116: return
     117: lload         6
     119: lconst_0
     120: lcmp
     121: ifeq          167
     124: aload_0
     125: getfield      #3                  // Field parent:Lreactor/core/publisher/FluxWindowPredicate$WindowPredicateMain;
     128: astore        8
     130: aload         8
     132: ifnull        147
     135: aload         8
     137: getfield      #14                 // Field reactor/core/publisher/FluxWindowPredicate$WindowPredicateMain.s:Lorg/reactivestreams/Subscription;
     140: lload         6
     142: invokeinterface #15,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     147: lload         4
     149: ldc2_w        #17                 // long 9223372036854775807l
     152: lcmp
     153: ifeq          167
     156: getstatic     #19                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
     159: aload_0
     160: lload         6
     162: lneg
     163: invokevirtual #20                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.addAndGet:(Ljava/lang/Object;J)J
     166: pop2
     167: getstatic     #21                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     170: aload_0
     171: iload_2
     172: ineg
     173: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
     176: istore_2
     177: iload_2
     178: ifne          184
     181: goto          187
     184: goto          7
     187: return

  void drainFused(org.reactivestreams.Subscriber<? super T>);
    Code:
       0: iconst_1
       1: istore_2
       2: aload_0
       3: getfield      #2                  // Field queue:Ljava/util/Queue;
       6: astore_3
       7: aload_0
       8: getfield      #23                 // Field cancelled:Z
      11: ifeq          26
      14: aload_3
      15: invokeinterface #24,  1           // InterfaceMethod java/util/Queue.clear:()V
      20: aload_0
      21: aconst_null
      22: putfield      #4                  // Field actual:Lreactor/core/CoreSubscriber;
      25: return
      26: aload_0
      27: getfield      #9                  // Field done:Z
      30: istore        4
      32: aload_1
      33: aconst_null
      34: invokeinterface #12,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
      39: iload         4
      41: ifeq          78
      44: aload_0
      45: aconst_null
      46: putfield      #4                  // Field actual:Lreactor/core/CoreSubscriber;
      49: aload_0
      50: getfield      #25                 // Field error:Ljava/lang/Throwable;
      53: astore        5
      55: aload         5
      57: ifnull        71
      60: aload_1
      61: aload         5
      63: invokeinterface #26,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      68: goto          77
      71: aload_1
      72: invokeinterface #27,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      77: return
      78: getstatic     #21                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      81: aload_0
      82: iload_2
      83: ineg
      84: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
      87: istore_2
      88: iload_2
      89: ifne          95
      92: goto          98
      95: goto          7
      98: return

  void drain();
    Code:
       0: aload_0
       1: getfield      #4                  // Field actual:Lreactor/core/CoreSubscriber;
       4: astore_1
       5: aload_1
       6: ifnull        40
       9: getstatic     #21                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      12: aload_0
      13: invokevirtual #28                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
      16: ifeq          20
      19: return
      20: aload_0
      21: getfield      #29                 // Field enableOperatorFusion:Z
      24: ifeq          35
      27: aload_0
      28: aload_1
      29: invokevirtual #30                 // Method drainFused:(Lorg/reactivestreams/Subscriber;)V
      32: goto          40
      35: aload_0
      36: aload_1
      37: invokevirtual #31                 // Method drainRegular:(Lorg/reactivestreams/Subscriber;)V
      40: return

  boolean checkTerminated(boolean, boolean, org.reactivestreams.Subscriber<?>, java.util.Queue<?>);
    Code:
       0: aload_0
       1: getfield      #23                 // Field cancelled:Z
       4: ifeq          21
       7: aload         4
       9: invokeinterface #24,  1           // InterfaceMethod java/util/Queue.clear:()V
      14: aload_0
      15: aconst_null
      16: putfield      #4                  // Field actual:Lreactor/core/CoreSubscriber;
      19: iconst_1
      20: ireturn
      21: iload_1
      22: ifeq          64
      25: iload_2
      26: ifeq          64
      29: aload_0
      30: getfield      #25                 // Field error:Ljava/lang/Throwable;
      33: astore        5
      35: aload_0
      36: aconst_null
      37: putfield      #4                  // Field actual:Lreactor/core/CoreSubscriber;
      40: aload         5
      42: ifnull        56
      45: aload_3
      46: aload         5
      48: invokeinterface #26,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      53: goto          62
      56: aload_3
      57: invokeinterface #27,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      62: iconst_1
      63: ireturn
      64: iconst_0
      65: ireturn

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #4                  // Field actual:Lreactor/core/CoreSubscriber;
       4: astore_2
       5: aload_0
       6: getfield      #2                  // Field queue:Ljava/util/Queue;
       9: aload_1
      10: invokeinterface #32,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
      15: ifne          42
      18: aload_0
      19: aload_0
      20: ldc           #34                 // String Queue is full: Reactive Streams source doesn\'t respect backpressure
      22: invokestatic  #35                 // Method reactor/core/Exceptions.failWithOverflow:(Ljava/lang/String;)Ljava/lang/IllegalStateException;
      25: aload_1
      26: aload_0
      27: getfield      #4                  // Field actual:Lreactor/core/CoreSubscriber;
      30: invokeinterface #36,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      35: invokestatic  #37                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      38: invokevirtual #38                 // Method onError:(Ljava/lang/Throwable;)V
      41: return
      42: aload_0
      43: getfield      #29                 // Field enableOperatorFusion:Z
      46: ifeq          63
      49: aload_2
      50: ifnull        67
      53: aload_2
      54: aconst_null
      55: invokeinterface #12,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
      60: goto          67
      63: aload_0
      64: invokevirtual #39                 // Method drain:()V
      67: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #25                 // Field error:Ljava/lang/Throwable;
       5: aload_0
       6: iconst_1
       7: putfield      #9                  // Field done:Z
      10: aload_0
      11: invokevirtual #40                 // Method propagateTerminate:()V
      14: aload_0
      15: invokevirtual #39                 // Method drain:()V
      18: return

  public void onComplete();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #9                  // Field done:Z
       5: aload_0
       6: invokevirtual #40                 // Method propagateTerminate:()V
       9: aload_0
      10: invokevirtual #39                 // Method drain:()V
      13: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: getfield      #41                 // Field once:I
       4: ifne          41
       7: getstatic     #42                 // Field ONCE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: aload_0
      11: iconst_0
      12: iconst_1
      13: invokevirtual #43                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      16: ifeq          41
      19: aload_1
      20: aload_0
      21: invokeinterface #44,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      26: getstatic     #45                 // Field ACTUAL:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      29: aload_0
      30: aload_1
      31: invokevirtual #46                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V
      34: aload_0
      35: invokevirtual #39                 // Method drain:()V
      38: goto          56
      41: aload_1
      42: new           #47                 // class java/lang/IllegalStateException
      45: dup
      46: ldc           #48                 // String This processor allows only a single Subscriber
      48: invokespecial #49                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      51: invokeinterface #50,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      56: return

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #51                 // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          20
       7: getstatic     #19                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      10: aload_0
      11: lload_1
      12: invokestatic  #52                 // Method reactor/core/publisher/Operators.addCap:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
      15: pop2
      16: aload_0
      17: invokevirtual #39                 // Method drain:()V
      20: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #23                 // Field cancelled:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #23                 // Field cancelled:Z
      13: aload_0
      14: getfield      #3                  // Field parent:Lreactor/core/publisher/FluxWindowPredicate$WindowPredicateMain;
      17: astore_1
      18: aload_1
      19: ifnull        61
      22: getstatic     #5                  // Field PARENT:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      25: aload_0
      26: aload_1
      27: aconst_null
      28: invokevirtual #6                  // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      31: ifeq          61
      34: getstatic     #53                 // Field reactor/core/publisher/FluxWindowPredicate$WindowPredicateMain.WINDOW_COUNT:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      37: aload_1
      38: invokevirtual #54                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
      41: ifne          51
      44: aload_1
      45: invokevirtual #55                 // Method reactor/core/publisher/FluxWindowPredicate$WindowPredicateMain.cancel:()V
      48: goto          61
      51: aload_1
      52: getfield      #14                 // Field reactor/core/publisher/FluxWindowPredicate$WindowPredicateMain.s:Lorg/reactivestreams/Subscription;
      55: lconst_1
      56: invokeinterface #15,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      61: aload_0
      62: getfield      #29                 // Field enableOperatorFusion:Z
      65: ifne          87
      68: getstatic     #21                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      71: aload_0
      72: invokevirtual #28                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
      75: ifne          87
      78: aload_0
      79: getfield      #2                  // Field queue:Ljava/util/Queue;
      82: invokeinterface #24,  1           // InterfaceMethod java/util/Queue.clear:()V
      87: return

  public T poll();
    Code:
       0: aload_0
       1: getfield      #2                  // Field queue:Ljava/util/Queue;
       4: invokeinterface #10,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
       9: astore_1
      10: aload_1
      11: ifnull        27
      14: aload_0
      15: dup
      16: getfield      #56                 // Field produced:I
      19: iconst_1
      20: iadd
      21: putfield      #56                 // Field produced:I
      24: goto          61
      27: aload_0
      28: getfield      #56                 // Field produced:I
      31: istore_2
      32: iload_2
      33: ifeq          61
      36: aload_0
      37: iconst_0
      38: putfield      #56                 // Field produced:I
      41: aload_0
      42: getfield      #3                  // Field parent:Lreactor/core/publisher/FluxWindowPredicate$WindowPredicateMain;
      45: astore_3
      46: aload_3
      47: ifnull        61
      50: aload_3
      51: getfield      #14                 // Field reactor/core/publisher/FluxWindowPredicate$WindowPredicateMain.s:Lorg/reactivestreams/Subscription;
      54: iload_2
      55: i2l
      56: invokeinterface #15,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      61: aload_1
      62: areturn

  public int size();
    Code:
       0: aload_0
       1: getfield      #2                  // Field queue:Ljava/util/Queue;
       4: invokeinterface #57,  1           // InterfaceMethod java/util/Queue.size:()I
       9: ireturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #2                  // Field queue:Ljava/util/Queue;
       4: invokeinterface #13,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
       9: ireturn

  public void clear();
    Code:
       0: aload_0
       1: getfield      #2                  // Field queue:Ljava/util/Queue;
       4: invokeinterface #24,  1           // InterfaceMethod java/util/Queue.clear:()V
       9: return

  public int requestFusion(int);
    Code:
       0: iload_1
       1: iconst_2
       2: iand
       3: ifeq          13
       6: aload_0
       7: iconst_1
       8: putfield      #29                 // Field enableOperatorFusion:Z
      11: iconst_2
      12: ireturn
      13: iconst_0
      14: ireturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #59                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #3                  // Field parent:Lreactor/core/publisher/FluxWindowPredicate$WindowPredicateMain;
      11: areturn
      12: aload_1
      13: getstatic     #60                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      16: if_acmpne     27
      19: aload_0
      20: getfield      #23                 // Field cancelled:Z
      23: invokestatic  #61                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      26: areturn
      27: aload_1
      28: getstatic     #62                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      31: if_acmpne     42
      34: aload_0
      35: getfield      #9                  // Field done:Z
      38: invokestatic  #61                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      41: areturn
      42: aload_1
      43: getstatic     #63                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      46: if_acmpne     73
      49: aload_0
      50: getfield      #2                  // Field queue:Ljava/util/Queue;
      53: ifnonnull     60
      56: iconst_0
      57: goto          69
      60: aload_0
      61: getfield      #2                  // Field queue:Ljava/util/Queue;
      64: invokeinterface #57,  1           // InterfaceMethod java/util/Queue.size:()I
      69: invokestatic  #64                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      72: areturn
      73: aload_1
      74: getstatic     #65                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
      77: if_acmpne     85
      80: aload_0
      81: getfield      #25                 // Field error:Ljava/lang/Throwable;
      84: areturn
      85: aload_1
      86: getstatic     #66                 // Field reactor/core/Scannable$Attr.REQUESTED_FROM_DOWNSTREAM:Lreactor/core/Scannable$Attr;
      89: if_acmpne     100
      92: aload_0
      93: getfield      #8                  // Field requested:J
      96: invokestatic  #67                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      99: areturn
     100: aload_0
     101: aload_1
     102: invokespecial #68                 // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
     105: areturn

  static {};
    Code:
       0: ldc           #69                 // class reactor/core/publisher/FluxWindowPredicate$WindowFlux
       2: ldc           #70                 // class reactor/core/publisher/FluxWindowPredicate$WindowPredicateMain
       4: ldc           #71                 // String parent
       6: invokestatic  #72                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #5                  // Field PARENT:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: ldc           #69                 // class reactor/core/publisher/FluxWindowPredicate$WindowFlux
      14: ldc           #73                 // class reactor/core/CoreSubscriber
      16: ldc           #74                 // String actual
      18: invokestatic  #72                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      21: putstatic     #45                 // Field ACTUAL:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      24: ldc           #69                 // class reactor/core/publisher/FluxWindowPredicate$WindowFlux
      26: ldc           #75                 // String once
      28: invokestatic  #76                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      31: putstatic     #42                 // Field ONCE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      34: ldc           #69                 // class reactor/core/publisher/FluxWindowPredicate$WindowFlux
      36: ldc           #77                 // String wip
      38: invokestatic  #76                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      41: putstatic     #21                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      44: ldc           #69                 // class reactor/core/publisher/FluxWindowPredicate$WindowFlux
      46: ldc           #78                 // String requested
      48: invokestatic  #79                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      51: putstatic     #19                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      54: return
}
