Compiled from "FluxCreate.java"
class reactor.core.publisher.FluxCreate$SerializeOnRequestSink<T> implements reactor.core.publisher.FluxSink<T>, reactor.core.Scannable {
  final reactor.core.publisher.FluxCreate$BaseSink<T> baseSink;

  reactor.core.publisher.FluxCreate$SerializedSink<T> serializedSink;

  reactor.core.publisher.FluxSink<T> sink;

  reactor.core.publisher.FluxCreate$SerializeOnRequestSink(reactor.core.publisher.FluxCreate$BaseSink<T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field baseSink:Lreactor/core/publisher/FluxCreate$BaseSink;
       9: aload_0
      10: aload_1
      11: putfield      #3                  // Field sink:Lreactor/core/publisher/FluxSink;
      14: return

  public reactor.util.context.Context currentContext();
    Code:
       0: aload_0
       1: getfield      #3                  // Field sink:Lreactor/core/publisher/FluxSink;
       4: invokeinterface #4,  1            // InterfaceMethod reactor/core/publisher/FluxSink.currentContext:()Lreactor/util/context/Context;
       9: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_0
       1: getfield      #5                  // Field serializedSink:Lreactor/core/publisher/FluxCreate$SerializedSink;
       4: ifnull        18
       7: aload_0
       8: getfield      #5                  // Field serializedSink:Lreactor/core/publisher/FluxCreate$SerializedSink;
      11: aload_1
      12: invokevirtual #6                  // Method reactor/core/publisher/FluxCreate$SerializedSink.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      15: goto          26
      18: aload_0
      19: getfield      #2                  // Field baseSink:Lreactor/core/publisher/FluxCreate$BaseSink;
      22: aload_1
      23: invokevirtual #7                  // Method reactor/core/publisher/FluxCreate$BaseSink.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      26: areturn

  public void complete();
    Code:
       0: aload_0
       1: getfield      #3                  // Field sink:Lreactor/core/publisher/FluxSink;
       4: invokeinterface #8,  1            // InterfaceMethod reactor/core/publisher/FluxSink.complete:()V
       9: return

  public void error(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #3                  // Field sink:Lreactor/core/publisher/FluxSink;
       4: aload_1
       5: invokeinterface #9,  2            // InterfaceMethod reactor/core/publisher/FluxSink.error:(Ljava/lang/Throwable;)V
      10: return

  public reactor.core.publisher.FluxSink<T> next(T);
    Code:
       0: aload_0
       1: getfield      #3                  // Field sink:Lreactor/core/publisher/FluxSink;
       4: aload_1
       5: invokeinterface #10,  2           // InterfaceMethod reactor/core/publisher/FluxSink.next:(Ljava/lang/Object;)Lreactor/core/publisher/FluxSink;
      10: pop
      11: aload_0
      12: getfield      #5                  // Field serializedSink:Lreactor/core/publisher/FluxCreate$SerializedSink;
      15: ifnonnull     22
      18: aload_0
      19: goto          26
      22: aload_0
      23: getfield      #5                  // Field serializedSink:Lreactor/core/publisher/FluxCreate$SerializedSink;
      26: areturn

  public long requestedFromDownstream();
    Code:
       0: aload_0
       1: getfield      #3                  // Field sink:Lreactor/core/publisher/FluxSink;
       4: invokeinterface #11,  1           // InterfaceMethod reactor/core/publisher/FluxSink.requestedFromDownstream:()J
       9: lreturn

  public boolean isCancelled();
    Code:
       0: aload_0
       1: getfield      #3                  // Field sink:Lreactor/core/publisher/FluxSink;
       4: invokeinterface #12,  1           // InterfaceMethod reactor/core/publisher/FluxSink.isCancelled:()Z
       9: ireturn

  public reactor.core.publisher.FluxSink<T> onRequest(java.util.function.LongConsumer);
    Code:
       0: aload_0
       1: getfield      #5                  // Field serializedSink:Lreactor/core/publisher/FluxCreate$SerializedSink;
       4: ifnonnull     30
       7: aload_0
       8: new           #13                 // class reactor/core/publisher/FluxCreate$SerializedSink
      11: dup
      12: aload_0
      13: getfield      #2                  // Field baseSink:Lreactor/core/publisher/FluxCreate$BaseSink;
      16: invokespecial #14                 // Method reactor/core/publisher/FluxCreate$SerializedSink."<init>":(Lreactor/core/publisher/FluxCreate$BaseSink;)V
      19: putfield      #5                  // Field serializedSink:Lreactor/core/publisher/FluxCreate$SerializedSink;
      22: aload_0
      23: aload_0
      24: getfield      #5                  // Field serializedSink:Lreactor/core/publisher/FluxCreate$SerializedSink;
      27: putfield      #3                  // Field sink:Lreactor/core/publisher/FluxSink;
      30: aload_0
      31: getfield      #3                  // Field sink:Lreactor/core/publisher/FluxSink;
      34: aload_1
      35: invokeinterface #15,  2           // InterfaceMethod reactor/core/publisher/FluxSink.onRequest:(Ljava/util/function/LongConsumer;)Lreactor/core/publisher/FluxSink;
      40: areturn

  public reactor.core.publisher.FluxSink<T> onCancel(reactor.core.Disposable);
    Code:
       0: aload_0
       1: getfield      #3                  // Field sink:Lreactor/core/publisher/FluxSink;
       4: aload_1
       5: invokeinterface #16,  2           // InterfaceMethod reactor/core/publisher/FluxSink.onCancel:(Lreactor/core/Disposable;)Lreactor/core/publisher/FluxSink;
      10: pop
      11: aload_0
      12: getfield      #3                  // Field sink:Lreactor/core/publisher/FluxSink;
      15: areturn

  public reactor.core.publisher.FluxSink<T> onDispose(reactor.core.Disposable);
    Code:
       0: aload_0
       1: getfield      #3                  // Field sink:Lreactor/core/publisher/FluxSink;
       4: aload_1
       5: invokeinterface #17,  2           // InterfaceMethod reactor/core/publisher/FluxSink.onDispose:(Lreactor/core/Disposable;)Lreactor/core/publisher/FluxSink;
      10: pop
      11: aload_0
      12: areturn
}
