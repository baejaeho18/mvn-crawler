Compiled from "MonoCreate.java"
final class reactor.core.publisher.MonoCreate$DefaultMonoSink<T> extends java.util.concurrent.atomic.AtomicBoolean implements reactor.core.publisher.MonoSink<T>, reactor.core.publisher.InnerProducer<T> {
  final reactor.core.CoreSubscriber<? super T> actual;

  volatile reactor.core.Disposable disposable;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.MonoCreate$DefaultMonoSink, reactor.core.Disposable> DISPOSABLE;

  volatile int state;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.MonoCreate$DefaultMonoSink> STATE;

  volatile java.util.function.LongConsumer requestConsumer;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.MonoCreate$DefaultMonoSink, java.util.function.LongConsumer> REQUEST_CONSUMER;

  T value;

  static final int NO_REQUEST_HAS_VALUE;

  static final int HAS_REQUEST_NO_VALUE;

  static final int HAS_REQUEST_HAS_VALUE;

  reactor.core.publisher.MonoCreate$DefaultMonoSink(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: return

  public reactor.util.context.Context currentContext();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: invokeinterface #3,  1            // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
       9: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #4                  // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
       4: if_acmpne     32
       7: aload_0
       8: getfield      #5                  // Field state:I
      11: iconst_3
      12: if_icmpeq     23
      15: aload_0
      16: getfield      #5                  // Field state:I
      19: iconst_1
      20: if_icmpne     27
      23: iconst_1
      24: goto          28
      27: iconst_0
      28: invokestatic  #7                  // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      31: areturn
      32: aload_1
      33: getstatic     #8                  // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      36: if_acmpne     50
      39: aload_0
      40: getfield      #9                  // Field disposable:Lreactor/core/Disposable;
      43: invokestatic  #10                 // Method reactor/core/publisher/OperatorDisposables.isDisposed:(Lreactor/core/Disposable;)Z
      46: invokestatic  #7                  // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      49: areturn
      50: aload_0
      51: aload_1
      52: invokespecial #11                 // InterfaceMethod reactor/core/publisher/InnerProducer.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      55: areturn

  public void success();
    Code:
       0: getstatic     #12                 // Field STATE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: iconst_3
       5: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndSet:(Ljava/lang/Object;I)I
       8: iconst_3
       9: if_icmpeq     37
      12: aload_0
      13: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      16: invokeinterface #14,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      21: aload_0
      22: iconst_0
      23: invokevirtual #15                 // Method disposeResource:(Z)V
      26: goto          37
      29: astore_1
      30: aload_0
      31: iconst_0
      32: invokevirtual #15                 // Method disposeResource:(Z)V
      35: aload_1
      36: athrow
      37: return
    Exception table:
       from    to  target type
          12    21    29   any

  public void success(T);
    Code:
       0: aload_1
       1: ifnonnull     9
       4: aload_0
       5: invokevirtual #16                 // Method success:()V
       8: return
       9: aload_0
      10: getfield      #5                  // Field state:I
      13: istore_2
      14: iload_2
      15: iconst_3
      16: if_icmpeq     24
      19: iload_2
      20: iconst_1
      21: if_icmpne     25
      24: return
      25: iload_2
      26: iconst_2
      27: if_icmpne     78
      30: getstatic     #12                 // Field STATE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      33: aload_0
      34: iload_2
      35: iconst_3
      36: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      39: ifeq          77
      42: aload_0
      43: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      46: aload_1
      47: invokeinterface #18,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      52: aload_0
      53: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      56: invokeinterface #14,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      61: aload_0
      62: iconst_0
      63: invokevirtual #15                 // Method disposeResource:(Z)V
      66: goto          77
      69: astore_3
      70: aload_0
      71: iconst_0
      72: invokevirtual #15                 // Method disposeResource:(Z)V
      75: aload_3
      76: athrow
      77: return
      78: aload_0
      79: aload_1
      80: putfield      #19                 // Field value:Ljava/lang/Object;
      83: getstatic     #12                 // Field STATE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      86: aload_0
      87: iload_2
      88: iconst_1
      89: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      92: ifeq          96
      95: return
      96: goto          9
    Exception table:
       from    to  target type
          42    61    69   any

  public void error(java.lang.Throwable);
    Code:
       0: getstatic     #12                 // Field STATE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: iconst_3
       5: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndSet:(Ljava/lang/Object;I)I
       8: iconst_3
       9: if_icmpeq     41
      12: aload_0
      13: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      16: aload_1
      17: invokeinterface #20,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      22: aload_0
      23: iconst_0
      24: invokevirtual #15                 // Method disposeResource:(Z)V
      27: goto          38
      30: astore_2
      31: aload_0
      32: iconst_0
      33: invokevirtual #15                 // Method disposeResource:(Z)V
      36: aload_2
      37: athrow
      38: goto          54
      41: aload_1
      42: aload_0
      43: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      46: invokeinterface #3,  1            // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      51: invokestatic  #21                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      54: return
    Exception table:
       from    to  target type
          12    22    30   any

  public reactor.core.publisher.MonoSink<T> onRequest(java.util.function.LongConsumer);
    Code:
       0: aload_1
       1: ldc           #22                 // String onRequest
       3: invokestatic  #23                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: getstatic     #24                 // Field REQUEST_CONSUMER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      10: aload_0
      11: aconst_null
      12: aload_1
      13: invokevirtual #25                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      16: ifne          29
      19: new           #26                 // class java/lang/IllegalStateException
      22: dup
      23: ldc           #27                 // String A consumer has already been assigned to consume requests
      25: invokespecial #28                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      28: athrow
      29: aload_0
      30: areturn

  public reactor.core.CoreSubscriber<? super T> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public reactor.core.publisher.MonoSink<T> onCancel(reactor.core.Disposable);
    Code:
       0: aload_1
       1: ldc           #29                 // String onCancel
       3: invokestatic  #23                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: new           #30                 // class reactor/core/publisher/FluxCreate$SinkDisposable
      10: dup
      11: aconst_null
      12: aload_1
      13: invokespecial #31                 // Method reactor/core/publisher/FluxCreate$SinkDisposable."<init>":(Lreactor/core/Disposable;Lreactor/core/Disposable;)V
      16: astore_2
      17: getstatic     #32                 // Field DISPOSABLE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      20: aload_0
      21: aconst_null
      22: aload_2
      23: invokevirtual #25                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      26: ifne          70
      29: aload_0
      30: getfield      #9                  // Field disposable:Lreactor/core/Disposable;
      33: astore_3
      34: aload_3
      35: instanceof    #30                 // class reactor/core/publisher/FluxCreate$SinkDisposable
      38: ifeq          70
      41: aload_3
      42: checkcast     #30                 // class reactor/core/publisher/FluxCreate$SinkDisposable
      45: astore        4
      47: aload         4
      49: getfield      #33                 // Field reactor/core/publisher/FluxCreate$SinkDisposable.onCancel:Lreactor/core/Disposable;
      52: ifnonnull     64
      55: aload         4
      57: aload_1
      58: putfield      #33                 // Field reactor/core/publisher/FluxCreate$SinkDisposable.onCancel:Lreactor/core/Disposable;
      61: goto          70
      64: aload_1
      65: invokeinterface #34,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
      70: aload_0
      71: areturn

  public reactor.core.publisher.MonoSink<T> onDispose(reactor.core.Disposable);
    Code:
       0: aload_1
       1: ldc           #35                 // String onDispose
       3: invokestatic  #23                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: new           #30                 // class reactor/core/publisher/FluxCreate$SinkDisposable
      10: dup
      11: aload_1
      12: aconst_null
      13: invokespecial #31                 // Method reactor/core/publisher/FluxCreate$SinkDisposable."<init>":(Lreactor/core/Disposable;Lreactor/core/Disposable;)V
      16: astore_2
      17: getstatic     #32                 // Field DISPOSABLE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      20: aload_0
      21: aconst_null
      22: aload_2
      23: invokevirtual #25                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      26: ifne          70
      29: aload_0
      30: getfield      #9                  // Field disposable:Lreactor/core/Disposable;
      33: astore_3
      34: aload_3
      35: instanceof    #30                 // class reactor/core/publisher/FluxCreate$SinkDisposable
      38: ifeq          70
      41: aload_3
      42: checkcast     #30                 // class reactor/core/publisher/FluxCreate$SinkDisposable
      45: astore        4
      47: aload         4
      49: getfield      #36                 // Field reactor/core/publisher/FluxCreate$SinkDisposable.disposable:Lreactor/core/Disposable;
      52: ifnonnull     64
      55: aload         4
      57: aload_1
      58: putfield      #36                 // Field reactor/core/publisher/FluxCreate$SinkDisposable.disposable:Lreactor/core/Disposable;
      61: goto          70
      64: aload_1
      65: invokeinterface #34,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
      70: aload_0
      71: areturn

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #37                 // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          119
       7: aload_0
       8: getfield      #38                 // Field requestConsumer:Ljava/util/function/LongConsumer;
      11: astore_3
      12: aload_3
      13: ifnull        23
      16: aload_3
      17: lload_1
      18: invokeinterface #39,  3           // InterfaceMethod java/util/function/LongConsumer.accept:(J)V
      23: aload_0
      24: getfield      #5                  // Field state:I
      27: istore        4
      29: iload         4
      31: iconst_2
      32: if_icmpeq     41
      35: iload         4
      37: iconst_3
      38: if_icmpne     42
      41: return
      42: iload         4
      44: iconst_1
      45: if_icmpne     102
      48: getstatic     #12                 // Field STATE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      51: aload_0
      52: iload         4
      54: iconst_3
      55: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      58: ifeq          101
      61: aload_0
      62: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      65: aload_0
      66: getfield      #19                 // Field value:Ljava/lang/Object;
      69: invokeinterface #18,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      74: aload_0
      75: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      78: invokeinterface #14,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      83: aload_0
      84: iconst_0
      85: invokevirtual #15                 // Method disposeResource:(Z)V
      88: goto          101
      91: astore        5
      93: aload_0
      94: iconst_0
      95: invokevirtual #15                 // Method disposeResource:(Z)V
      98: aload         5
     100: athrow
     101: return
     102: getstatic     #12                 // Field STATE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     105: aload_0
     106: iload         4
     108: iconst_2
     109: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
     112: ifeq          116
     115: return
     116: goto          23
     119: return
    Exception table:
       from    to  target type
          61    83    91   any
          91    93    91   any

  public void cancel();
    Code:
       0: getstatic     #12                 // Field STATE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: iconst_3
       5: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndSet:(Ljava/lang/Object;I)I
       8: iconst_3
       9: if_icmpeq     22
      12: aload_0
      13: aconst_null
      14: putfield      #19                 // Field value:Ljava/lang/Object;
      17: aload_0
      18: iconst_1
      19: invokevirtual #15                 // Method disposeResource:(Z)V
      22: return

  void disposeResource(boolean);
    Code:
       0: aload_0
       1: getfield      #9                  // Field disposable:Lreactor/core/Disposable;
       4: astore_2
       5: aload_2
       6: getstatic     #40                 // Field reactor/core/publisher/OperatorDisposables.DISPOSED:Lreactor/core/Disposable;
       9: if_acmpeq     61
      12: getstatic     #32                 // Field DISPOSABLE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      15: aload_0
      16: getstatic     #40                 // Field reactor/core/publisher/OperatorDisposables.DISPOSED:Lreactor/core/Disposable;
      19: invokevirtual #41                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      22: checkcast     #42                 // class reactor/core/Disposable
      25: astore_2
      26: aload_2
      27: ifnull        61
      30: aload_2
      31: getstatic     #40                 // Field reactor/core/publisher/OperatorDisposables.DISPOSED:Lreactor/core/Disposable;
      34: if_acmpeq     61
      37: iload_1
      38: ifeq          55
      41: aload_2
      42: instanceof    #30                 // class reactor/core/publisher/FluxCreate$SinkDisposable
      45: ifeq          55
      48: aload_2
      49: checkcast     #30                 // class reactor/core/publisher/FluxCreate$SinkDisposable
      52: invokevirtual #43                 // Method reactor/core/publisher/FluxCreate$SinkDisposable.cancel:()V
      55: aload_2
      56: invokeinterface #34,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
      61: return

  static {};
    Code:
       0: ldc           #6                  // class reactor/core/publisher/MonoCreate$DefaultMonoSink
       2: ldc           #42                 // class reactor/core/Disposable
       4: ldc           #44                 // String disposable
       6: invokestatic  #45                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #32                 // Field DISPOSABLE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: ldc           #6                  // class reactor/core/publisher/MonoCreate$DefaultMonoSink
      14: ldc           #46                 // String state
      16: invokestatic  #47                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      19: putstatic     #12                 // Field STATE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      22: ldc           #6                  // class reactor/core/publisher/MonoCreate$DefaultMonoSink
      24: ldc           #48                 // class java/util/function/LongConsumer
      26: ldc           #49                 // String requestConsumer
      28: invokestatic  #45                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      31: putstatic     #24                 // Field REQUEST_CONSUMER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      34: return
}
