Compiled from "ParallelFlux.java"
public abstract class reactor.core.publisher.ParallelFlux<T> implements org.reactivestreams.Publisher<T> {
  public reactor.core.publisher.ParallelFlux();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static <T> reactor.core.publisher.ParallelFlux<T> from(org.reactivestreams.Publisher<? extends T>);
    Code:
       0: aload_0
       1: invokestatic  #2                  // Method java/lang/Runtime.getRuntime:()Ljava/lang/Runtime;
       4: invokevirtual #3                  // Method java/lang/Runtime.availableProcessors:()I
       7: getstatic     #4                  // Field reactor/util/concurrent/Queues.SMALL_BUFFER_SIZE:I
      10: invokestatic  #5                  // Method reactor/util/concurrent/Queues.small:()Ljava/util/function/Supplier;
      13: invokestatic  #6                  // Method from:(Lorg/reactivestreams/Publisher;IILjava/util/function/Supplier;)Lreactor/core/publisher/ParallelFlux;
      16: areturn

  public static <T> reactor.core.publisher.ParallelFlux<T> from(org.reactivestreams.Publisher<? extends T>, int);
    Code:
       0: aload_0
       1: iload_1
       2: getstatic     #4                  // Field reactor/util/concurrent/Queues.SMALL_BUFFER_SIZE:I
       5: invokestatic  #5                  // Method reactor/util/concurrent/Queues.small:()Ljava/util/function/Supplier;
       8: invokestatic  #6                  // Method from:(Lorg/reactivestreams/Publisher;IILjava/util/function/Supplier;)Lreactor/core/publisher/ParallelFlux;
      11: areturn

  public static <T> reactor.core.publisher.ParallelFlux<T> from(org.reactivestreams.Publisher<? extends T>, int, int, java.util.function.Supplier<java.util.Queue<T>>);
    Code:
       0: aload_3
       1: ldc           #7                  // String queueSupplier
       3: invokestatic  #8                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: ldc           #9                  // String source
      10: invokestatic  #8                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      13: pop
      14: new           #10                 // class reactor/core/publisher/ParallelSource
      17: dup
      18: aload_0
      19: iload_1
      20: iload_2
      21: aload_3
      22: invokespecial #11                 // Method reactor/core/publisher/ParallelSource."<init>":(Lorg/reactivestreams/Publisher;IILjava/util/function/Supplier;)V
      25: invokestatic  #12                 // Method onAssembly:(Lreactor/core/publisher/ParallelFlux;)Lreactor/core/publisher/ParallelFlux;
      28: areturn

  public static <T> reactor.core.publisher.ParallelFlux<T> from(org.reactivestreams.Publisher<T>...);
    Code:
       0: new           #13                 // class reactor/core/publisher/ParallelArraySource
       3: dup
       4: aload_0
       5: invokespecial #14                 // Method reactor/core/publisher/ParallelArraySource."<init>":([Lorg/reactivestreams/Publisher;)V
       8: invokestatic  #12                 // Method onAssembly:(Lreactor/core/publisher/ParallelFlux;)Lreactor/core/publisher/ParallelFlux;
      11: areturn

  public final <U> U as(java.util.function.Function<? super reactor.core.publisher.ParallelFlux<T>, U>);
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #15,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       7: areturn

  public final reactor.core.publisher.ParallelFlux<T> checkpoint();
    Code:
       0: new           #16                 // class reactor/core/publisher/ParallelFluxOnAssembly
       3: dup
       4: aload_0
       5: aconst_null
       6: invokespecial #17                 // Method reactor/core/publisher/ParallelFluxOnAssembly."<init>":(Lreactor/core/publisher/ParallelFlux;Ljava/lang/String;)V
       9: areturn

  public final reactor.core.publisher.ParallelFlux<T> checkpoint(java.lang.String);
    Code:
       0: new           #16                 // class reactor/core/publisher/ParallelFluxOnAssembly
       3: dup
       4: aload_0
       5: aload_1
       6: iconst_1
       7: invokespecial #18                 // Method reactor/core/publisher/ParallelFluxOnAssembly."<init>":(Lreactor/core/publisher/ParallelFlux;Ljava/lang/String;Z)V
      10: areturn

  public final reactor.core.publisher.ParallelFlux<T> checkpoint(java.lang.String, boolean);
    Code:
       0: new           #16                 // class reactor/core/publisher/ParallelFluxOnAssembly
       3: dup
       4: aload_0
       5: aload_1
       6: iload_2
       7: ifne          14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: invokespecial #18                 // Method reactor/core/publisher/ParallelFluxOnAssembly."<init>":(Lreactor/core/publisher/ParallelFlux;Ljava/lang/String;Z)V
      18: areturn

  public final <C> reactor.core.publisher.ParallelFlux<C> collect(java.util.function.Supplier<? extends C>, java.util.function.BiConsumer<? super C, ? super T>);
    Code:
       0: new           #19                 // class reactor/core/publisher/ParallelCollect
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: invokespecial #20                 // Method reactor/core/publisher/ParallelCollect."<init>":(Lreactor/core/publisher/ParallelFlux;Ljava/util/function/Supplier;Ljava/util/function/BiConsumer;)V
      10: invokestatic  #12                 // Method onAssembly:(Lreactor/core/publisher/ParallelFlux;)Lreactor/core/publisher/ParallelFlux;
      13: areturn

  public final reactor.core.publisher.Mono<java.util.List<T>> collectSortedList(java.util.Comparator<? super T>);
    Code:
       0: aload_0
       1: aload_1
       2: bipush        16
       4: invokevirtual #21                 // Method collectSortedList:(Ljava/util/Comparator;I)Lreactor/core/publisher/Mono;
       7: areturn

  public final reactor.core.publisher.Mono<java.util.List<T>> collectSortedList(java.util.Comparator<? super T>, int);
    Code:
       0: iload_2
       1: aload_0
       2: invokevirtual #22                 // Method parallelism:()I
       5: idiv
       6: iconst_1
       7: iadd
       8: istore_3
       9: aload_0
      10: iload_3
      11: invokedynamic #23,  0             // InvokeDynamic #0:get:(I)Ljava/util/function/Supplier;
      16: invokedynamic #24,  0             // InvokeDynamic #1:apply:()Ljava/util/function/BiFunction;
      21: invokevirtual #25                 // Method reduce:(Ljava/util/function/Supplier;Ljava/util/function/BiFunction;)Lreactor/core/publisher/ParallelFlux;
      24: astore        4
      26: aload         4
      28: aload_1
      29: invokedynamic #26,  0             // InvokeDynamic #2:apply:(Ljava/util/Comparator;)Ljava/util/function/Function;
      34: invokevirtual #27                 // Method map:(Ljava/util/function/Function;)Lreactor/core/publisher/ParallelFlux;
      37: astore        5
      39: aload         5
      41: aload_1
      42: invokedynamic #28,  0             // InvokeDynamic #3:apply:(Ljava/util/Comparator;)Ljava/util/function/BiFunction;
      47: invokevirtual #29                 // Method reduce:(Ljava/util/function/BiFunction;)Lreactor/core/publisher/Mono;
      50: astore        6
      52: aload         6
      54: areturn

  public final <U> reactor.core.publisher.ParallelFlux<U> composeGroup(java.util.function.Function<? super reactor.core.publisher.GroupedFlux<java.lang.Integer, T>, ? extends org.reactivestreams.Publisher<? extends U>>);
    Code:
       0: aload_0
       1: invokevirtual #30                 // Method getPrefetch:()I
       4: iconst_m1
       5: if_icmple     41
       8: aload_0
       9: invokevirtual #31                 // Method groups:()Lreactor/core/publisher/Flux;
      12: aload_1
      13: dup
      14: invokevirtual #32                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      17: pop
      18: invokedynamic #33,  0             // InvokeDynamic #4:apply:(Ljava/util/function/Function;)Ljava/util/function/Function;
      23: invokevirtual #34                 // Method reactor/core/publisher/Flux.flatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      26: aload_0
      27: invokevirtual #22                 // Method parallelism:()I
      30: aload_0
      31: invokevirtual #30                 // Method getPrefetch:()I
      34: invokestatic  #5                  // Method reactor/util/concurrent/Queues.small:()Ljava/util/function/Supplier;
      37: invokestatic  #6                  // Method from:(Lorg/reactivestreams/Publisher;IILjava/util/function/Supplier;)Lreactor/core/publisher/ParallelFlux;
      40: areturn
      41: aload_0
      42: invokevirtual #31                 // Method groups:()Lreactor/core/publisher/Flux;
      45: aload_1
      46: dup
      47: invokevirtual #32                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      50: pop
      51: invokedynamic #33,  0             // InvokeDynamic #4:apply:(Ljava/util/function/Function;)Ljava/util/function/Function;
      56: invokevirtual #34                 // Method reactor/core/publisher/Flux.flatMap:(Ljava/util/function/Function;)Lreactor/core/publisher/Flux;
      59: aload_0
      60: invokevirtual #22                 // Method parallelism:()I
      63: invokestatic  #35                 // Method from:(Lorg/reactivestreams/Publisher;I)Lreactor/core/publisher/ParallelFlux;
      66: areturn

  public final <R> reactor.core.publisher.ParallelFlux<R> concatMap(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>>);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_2
       3: getstatic     #36                 // Field reactor/core/publisher/FluxConcatMap$ErrorMode.IMMEDIATE:Lreactor/core/publisher/FluxConcatMap$ErrorMode;
       6: invokevirtual #37                 // Method concatMap:(Ljava/util/function/Function;ILreactor/core/publisher/FluxConcatMap$ErrorMode;)Lreactor/core/publisher/ParallelFlux;
       9: areturn

  public final <R> reactor.core.publisher.ParallelFlux<R> concatMap(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>>, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: getstatic     #36                 // Field reactor/core/publisher/FluxConcatMap$ErrorMode.IMMEDIATE:Lreactor/core/publisher/FluxConcatMap$ErrorMode;
       6: invokevirtual #37                 // Method concatMap:(Ljava/util/function/Function;ILreactor/core/publisher/FluxConcatMap$ErrorMode;)Lreactor/core/publisher/ParallelFlux;
       9: areturn

  public final <R> reactor.core.publisher.ParallelFlux<R> concatMapDelayError(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>>);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_2
       3: getstatic     #38                 // Field reactor/core/publisher/FluxConcatMap$ErrorMode.END:Lreactor/core/publisher/FluxConcatMap$ErrorMode;
       6: invokevirtual #37                 // Method concatMap:(Ljava/util/function/Function;ILreactor/core/publisher/FluxConcatMap$ErrorMode;)Lreactor/core/publisher/ParallelFlux;
       9: areturn

  public final reactor.core.publisher.ParallelFlux<T> doAfterTerminate(java.lang.Runnable);
    Code:
       0: aload_1
       1: ldc           #39                 // String afterTerminate
       3: invokestatic  #8                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: aconst_null
       9: aconst_null
      10: aconst_null
      11: aconst_null
      12: aload_1
      13: aconst_null
      14: aconst_null
      15: aconst_null
      16: invokestatic  #40                 // Method doOnSignal:(Lreactor/core/publisher/ParallelFlux;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;Ljava/lang/Runnable;Ljava/util/function/Consumer;Ljava/util/function/LongConsumer;Ljava/lang/Runnable;)Lreactor/core/publisher/ParallelFlux;
      19: areturn

  public final reactor.core.publisher.ParallelFlux<T> doOnCancel(java.lang.Runnable);
    Code:
       0: aload_1
       1: ldc           #41                 // String onCancel
       3: invokestatic  #8                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: aconst_null
       9: aconst_null
      10: aconst_null
      11: aconst_null
      12: aconst_null
      13: aconst_null
      14: aconst_null
      15: aload_1
      16: invokestatic  #40                 // Method doOnSignal:(Lreactor/core/publisher/ParallelFlux;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;Ljava/lang/Runnable;Ljava/util/function/Consumer;Ljava/util/function/LongConsumer;Ljava/lang/Runnable;)Lreactor/core/publisher/ParallelFlux;
      19: areturn

  public final reactor.core.publisher.ParallelFlux<T> doOnComplete(java.lang.Runnable);
    Code:
       0: aload_1
       1: ldc           #42                 // String onComplete
       3: invokestatic  #8                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: aconst_null
       9: aconst_null
      10: aconst_null
      11: aload_1
      12: aconst_null
      13: aconst_null
      14: aconst_null
      15: aconst_null
      16: invokestatic  #40                 // Method doOnSignal:(Lreactor/core/publisher/ParallelFlux;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;Ljava/lang/Runnable;Ljava/util/function/Consumer;Ljava/util/function/LongConsumer;Ljava/lang/Runnable;)Lreactor/core/publisher/ParallelFlux;
      19: areturn

  public final reactor.core.publisher.ParallelFlux<T> doOnEach(java.util.function.Consumer<? super reactor.core.publisher.Signal<T>>);
    Code:
       0: aload_1
       1: ldc           #43                 // String signalConsumer
       3: invokestatic  #8                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: aload_1
       9: invokedynamic #44,  0             // InvokeDynamic #5:accept:(Ljava/util/function/Consumer;)Ljava/util/function/Consumer;
      14: aconst_null
      15: aload_1
      16: invokedynamic #45,  0             // InvokeDynamic #6:accept:(Ljava/util/function/Consumer;)Ljava/util/function/Consumer;
      21: aload_1
      22: invokedynamic #46,  0             // InvokeDynamic #7:run:(Ljava/util/function/Consumer;)Ljava/lang/Runnable;
      27: aconst_null
      28: aconst_null
      29: aconst_null
      30: aconst_null
      31: invokestatic  #40                 // Method doOnSignal:(Lreactor/core/publisher/ParallelFlux;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;Ljava/lang/Runnable;Ljava/util/function/Consumer;Ljava/util/function/LongConsumer;Ljava/lang/Runnable;)Lreactor/core/publisher/ParallelFlux;
      34: areturn

  public final reactor.core.publisher.ParallelFlux<T> doOnError(java.util.function.Consumer<? super java.lang.Throwable>);
    Code:
       0: aload_1
       1: ldc           #47                 // String onError
       3: invokestatic  #8                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: aconst_null
       9: aconst_null
      10: aload_1
      11: aconst_null
      12: aconst_null
      13: aconst_null
      14: aconst_null
      15: aconst_null
      16: invokestatic  #40                 // Method doOnSignal:(Lreactor/core/publisher/ParallelFlux;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;Ljava/lang/Runnable;Ljava/util/function/Consumer;Ljava/util/function/LongConsumer;Ljava/lang/Runnable;)Lreactor/core/publisher/ParallelFlux;
      19: areturn

  public final reactor.core.publisher.ParallelFlux<T> doOnSubscribe(java.util.function.Consumer<? super org.reactivestreams.Subscription>);
    Code:
       0: aload_1
       1: ldc           #48                 // String onSubscribe
       3: invokestatic  #8                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: aconst_null
       9: aconst_null
      10: aconst_null
      11: aconst_null
      12: aconst_null
      13: aload_1
      14: aconst_null
      15: aconst_null
      16: invokestatic  #40                 // Method doOnSignal:(Lreactor/core/publisher/ParallelFlux;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;Ljava/lang/Runnable;Ljava/util/function/Consumer;Ljava/util/function/LongConsumer;Ljava/lang/Runnable;)Lreactor/core/publisher/ParallelFlux;
      19: areturn

  public final reactor.core.publisher.ParallelFlux<T> doOnNext(java.util.function.Consumer<? super T>);
    Code:
       0: aload_1
       1: ldc           #49                 // String onNext
       3: invokestatic  #8                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: aload_1
       9: aconst_null
      10: aconst_null
      11: aconst_null
      12: aconst_null
      13: aconst_null
      14: aconst_null
      15: aconst_null
      16: invokestatic  #40                 // Method doOnSignal:(Lreactor/core/publisher/ParallelFlux;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;Ljava/lang/Runnable;Ljava/util/function/Consumer;Ljava/util/function/LongConsumer;Ljava/lang/Runnable;)Lreactor/core/publisher/ParallelFlux;
      19: areturn

  public final reactor.core.publisher.ParallelFlux<T> doOnRequest(java.util.function.LongConsumer);
    Code:
       0: aload_1
       1: ldc           #50                 // String onRequest
       3: invokestatic  #8                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: aconst_null
       9: aconst_null
      10: aconst_null
      11: aconst_null
      12: aconst_null
      13: aconst_null
      14: aload_1
      15: aconst_null
      16: invokestatic  #40                 // Method doOnSignal:(Lreactor/core/publisher/ParallelFlux;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;Ljava/lang/Runnable;Ljava/util/function/Consumer;Ljava/util/function/LongConsumer;Ljava/lang/Runnable;)Lreactor/core/publisher/ParallelFlux;
      19: areturn

  public final reactor.core.publisher.ParallelFlux<T> doOnTerminate(java.lang.Runnable);
    Code:
       0: aload_1
       1: ldc           #51                 // String onTerminate
       3: invokestatic  #8                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: aconst_null
       9: aconst_null
      10: aload_1
      11: invokedynamic #52,  0             // InvokeDynamic #8:accept:(Ljava/lang/Runnable;)Ljava/util/function/Consumer;
      16: aload_1
      17: aconst_null
      18: aconst_null
      19: aconst_null
      20: aconst_null
      21: invokestatic  #40                 // Method doOnSignal:(Lreactor/core/publisher/ParallelFlux;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;Ljava/lang/Runnable;Ljava/util/function/Consumer;Ljava/util/function/LongConsumer;Ljava/lang/Runnable;)Lreactor/core/publisher/ParallelFlux;
      24: areturn

  public final reactor.core.publisher.ParallelFlux<T> filter(java.util.function.Predicate<? super T>);
    Code:
       0: aload_1
       1: ldc           #53                 // String predicate
       3: invokestatic  #8                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: new           #54                 // class reactor/core/publisher/ParallelFilter
      10: dup
      11: aload_0
      12: aload_1
      13: invokespecial #55                 // Method reactor/core/publisher/ParallelFilter."<init>":(Lreactor/core/publisher/ParallelFlux;Ljava/util/function/Predicate;)V
      16: invokestatic  #12                 // Method onAssembly:(Lreactor/core/publisher/ParallelFlux;)Lreactor/core/publisher/ParallelFlux;
      19: areturn

  public final <R> reactor.core.publisher.ParallelFlux<R> flatMap(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>>);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: ldc           #57                 // int 2147483647
       5: getstatic     #4                  // Field reactor/util/concurrent/Queues.SMALL_BUFFER_SIZE:I
       8: invokevirtual #58                 // Method flatMap:(Ljava/util/function/Function;ZII)Lreactor/core/publisher/ParallelFlux;
      11: areturn

  public final <R> reactor.core.publisher.ParallelFlux<R> flatMap(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>>, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: ldc           #57                 // int 2147483647
       5: getstatic     #4                  // Field reactor/util/concurrent/Queues.SMALL_BUFFER_SIZE:I
       8: invokevirtual #58                 // Method flatMap:(Ljava/util/function/Function;ZII)Lreactor/core/publisher/ParallelFlux;
      11: areturn

  public final <R> reactor.core.publisher.ParallelFlux<R> flatMap(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>>, boolean, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: getstatic     #4                  // Field reactor/util/concurrent/Queues.SMALL_BUFFER_SIZE:I
       7: invokevirtual #58                 // Method flatMap:(Ljava/util/function/Function;ZII)Lreactor/core/publisher/ParallelFlux;
      10: areturn

  public final <R> reactor.core.publisher.ParallelFlux<R> flatMap(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>>, boolean, int, int);
    Code:
       0: new           #59                 // class reactor/core/publisher/ParallelFlatMap
       3: dup
       4: aload_0
       5: aload_1
       6: iload_2
       7: iload_3
       8: iload_3
       9: invokestatic  #60                 // Method reactor/util/concurrent/Queues.get:(I)Ljava/util/function/Supplier;
      12: iload         4
      14: iload         4
      16: invokestatic  #60                 // Method reactor/util/concurrent/Queues.get:(I)Ljava/util/function/Supplier;
      19: invokespecial #61                 // Method reactor/core/publisher/ParallelFlatMap."<init>":(Lreactor/core/publisher/ParallelFlux;Ljava/util/function/Function;ZILjava/util/function/Supplier;ILjava/util/function/Supplier;)V
      22: invokestatic  #12                 // Method onAssembly:(Lreactor/core/publisher/ParallelFlux;)Lreactor/core/publisher/ParallelFlux;
      25: areturn

  public final reactor.core.publisher.Flux<reactor.core.publisher.GroupedFlux<java.lang.Integer, T>> groups();
    Code:
       0: new           #62                 // class reactor/core/publisher/ParallelGroup
       3: dup
       4: aload_0
       5: invokespecial #63                 // Method reactor/core/publisher/ParallelGroup."<init>":(Lreactor/core/publisher/ParallelFlux;)V
       8: invokestatic  #64                 // Method reactor/core/publisher/Flux.onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      11: areturn

  public final reactor.core.publisher.ParallelFlux<T> hide();
    Code:
       0: new           #65                 // class reactor/core/publisher/ParallelFluxHide
       3: dup
       4: aload_0
       5: invokespecial #66                 // Method reactor/core/publisher/ParallelFluxHide."<init>":(Lreactor/core/publisher/ParallelFlux;)V
       8: areturn

  public final reactor.core.publisher.ParallelFlux<T> log();
    Code:
       0: aload_0
       1: aconst_null
       2: getstatic     #67                 // Field java/util/logging/Level.INFO:Ljava/util/logging/Level;
       5: iconst_0
       6: anewarray     #68                 // class reactor/core/publisher/SignalType
       9: invokevirtual #69                 // Method log:(Ljava/lang/String;Ljava/util/logging/Level;[Lreactor/core/publisher/SignalType;)Lreactor/core/publisher/ParallelFlux;
      12: areturn

  public final reactor.core.publisher.ParallelFlux<T> log(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #67                 // Field java/util/logging/Level.INFO:Ljava/util/logging/Level;
       5: iconst_0
       6: anewarray     #68                 // class reactor/core/publisher/SignalType
       9: invokevirtual #69                 // Method log:(Ljava/lang/String;Ljava/util/logging/Level;[Lreactor/core/publisher/SignalType;)Lreactor/core/publisher/ParallelFlux;
      12: areturn

  public final reactor.core.publisher.ParallelFlux<T> log(java.lang.String, java.util.logging.Level, reactor.core.publisher.SignalType...);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iconst_0
       4: aload_3
       5: invokevirtual #70                 // Method log:(Ljava/lang/String;Ljava/util/logging/Level;Z[Lreactor/core/publisher/SignalType;)Lreactor/core/publisher/ParallelFlux;
       8: areturn

  public final reactor.core.publisher.ParallelFlux<T> log(java.lang.String, java.util.logging.Level, boolean, reactor.core.publisher.SignalType...);
    Code:
       0: new           #71                 // class reactor/core/publisher/ParallelLog
       3: dup
       4: aload_0
       5: new           #72                 // class reactor/core/publisher/SignalLogger
       8: dup
       9: aload_0
      10: aload_1
      11: aload_2
      12: iload_3
      13: aload         4
      15: invokespecial #73                 // Method reactor/core/publisher/SignalLogger."<init>":(Lorg/reactivestreams/Publisher;Ljava/lang/String;Ljava/util/logging/Level;Z[Lreactor/core/publisher/SignalType;)V
      18: invokespecial #74                 // Method reactor/core/publisher/ParallelLog."<init>":(Lreactor/core/publisher/ParallelFlux;Lreactor/core/publisher/SignalPeek;)V
      21: invokestatic  #12                 // Method onAssembly:(Lreactor/core/publisher/ParallelFlux;)Lreactor/core/publisher/ParallelFlux;
      24: areturn

  public final <U> reactor.core.publisher.ParallelFlux<U> map(java.util.function.Function<? super T, ? extends U>);
    Code:
       0: aload_1
       1: ldc           #75                 // String mapper
       3: invokestatic  #8                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: new           #76                 // class reactor/core/publisher/ParallelMap
      10: dup
      11: aload_0
      12: aload_1
      13: invokespecial #77                 // Method reactor/core/publisher/ParallelMap."<init>":(Lreactor/core/publisher/ParallelFlux;Ljava/util/function/Function;)V
      16: invokestatic  #12                 // Method onAssembly:(Lreactor/core/publisher/ParallelFlux;)Lreactor/core/publisher/ParallelFlux;
      19: areturn

  public final reactor.core.publisher.ParallelFlux<T> name(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #78                 // Method reactor/core/publisher/ParallelFluxName.createOrAppend:(Lreactor/core/publisher/ParallelFlux;Ljava/lang/String;)Lreactor/core/publisher/ParallelFlux;
       5: areturn

  public final reactor.core.publisher.Flux<T> ordered(java.util.Comparator<? super T>);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #4                  // Field reactor/util/concurrent/Queues.SMALL_BUFFER_SIZE:I
       5: invokevirtual #79                 // Method ordered:(Ljava/util/Comparator;I)Lreactor/core/publisher/Flux;
       8: areturn

  public final reactor.core.publisher.Flux<T> ordered(java.util.Comparator<? super T>, int);
    Code:
       0: new           #80                 // class reactor/core/publisher/ParallelMergeOrdered
       3: dup
       4: aload_0
       5: iload_2
       6: iload_2
       7: invokestatic  #60                 // Method reactor/util/concurrent/Queues.get:(I)Ljava/util/function/Supplier;
      10: aload_1
      11: invokespecial #81                 // Method reactor/core/publisher/ParallelMergeOrdered."<init>":(Lreactor/core/publisher/ParallelFlux;ILjava/util/function/Supplier;Ljava/util/Comparator;)V
      14: areturn

  public abstract int parallelism();

  public final reactor.core.publisher.Mono<T> reduce(java.util.function.BiFunction<T, T, T>);
    Code:
       0: aload_1
       1: ldc           #82                 // String reducer
       3: invokestatic  #8                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: new           #83                 // class reactor/core/publisher/ParallelMergeReduce
      10: dup
      11: aload_0
      12: aload_1
      13: invokespecial #84                 // Method reactor/core/publisher/ParallelMergeReduce."<init>":(Lreactor/core/publisher/ParallelFlux;Ljava/util/function/BiFunction;)V
      16: invokestatic  #85                 // Method reactor/core/publisher/Mono.onAssembly:(Lreactor/core/publisher/Mono;)Lreactor/core/publisher/Mono;
      19: areturn

  public final <R> reactor.core.publisher.ParallelFlux<R> reduce(java.util.function.Supplier<R>, java.util.function.BiFunction<R, ? super T, R>);
    Code:
       0: aload_1
       1: ldc           #86                 // String initialSupplier
       3: invokestatic  #8                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_2
       8: ldc           #82                 // String reducer
      10: invokestatic  #8                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      13: pop
      14: new           #87                 // class reactor/core/publisher/ParallelReduceSeed
      17: dup
      18: aload_0
      19: aload_1
      20: aload_2
      21: invokespecial #88                 // Method reactor/core/publisher/ParallelReduceSeed."<init>":(Lreactor/core/publisher/ParallelFlux;Ljava/util/function/Supplier;Ljava/util/function/BiFunction;)V
      24: invokestatic  #12                 // Method onAssembly:(Lreactor/core/publisher/ParallelFlux;)Lreactor/core/publisher/ParallelFlux;
      27: areturn

  public final reactor.core.publisher.ParallelFlux<T> runOn(reactor.core.scheduler.Scheduler);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #4                  // Field reactor/util/concurrent/Queues.SMALL_BUFFER_SIZE:I
       5: invokevirtual #89                 // Method runOn:(Lreactor/core/scheduler/Scheduler;I)Lreactor/core/publisher/ParallelFlux;
       8: areturn

  public final reactor.core.publisher.ParallelFlux<T> runOn(reactor.core.scheduler.Scheduler, int);
    Code:
       0: aload_1
       1: ldc           #90                 // String scheduler
       3: invokestatic  #8                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: new           #91                 // class reactor/core/publisher/ParallelRunOn
      10: dup
      11: aload_0
      12: aload_1
      13: iload_2
      14: iload_2
      15: invokestatic  #60                 // Method reactor/util/concurrent/Queues.get:(I)Ljava/util/function/Supplier;
      18: invokespecial #92                 // Method reactor/core/publisher/ParallelRunOn."<init>":(Lreactor/core/publisher/ParallelFlux;Lreactor/core/scheduler/Scheduler;ILjava/util/function/Supplier;)V
      21: invokestatic  #12                 // Method onAssembly:(Lreactor/core/publisher/ParallelFlux;)Lreactor/core/publisher/ParallelFlux;
      24: areturn

  public final reactor.core.publisher.Flux<T> sequential();
    Code:
       0: aload_0
       1: getstatic     #4                  // Field reactor/util/concurrent/Queues.SMALL_BUFFER_SIZE:I
       4: invokevirtual #93                 // Method sequential:(I)Lreactor/core/publisher/Flux;
       7: areturn

  public final reactor.core.publisher.Flux<T> sequential(int);
    Code:
       0: new           #94                 // class reactor/core/publisher/ParallelMergeSequential
       3: dup
       4: aload_0
       5: iload_1
       6: iload_1
       7: invokestatic  #60                 // Method reactor/util/concurrent/Queues.get:(I)Ljava/util/function/Supplier;
      10: invokespecial #95                 // Method reactor/core/publisher/ParallelMergeSequential."<init>":(Lreactor/core/publisher/ParallelFlux;ILjava/util/function/Supplier;)V
      13: invokestatic  #64                 // Method reactor/core/publisher/Flux.onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      16: areturn

  public final reactor.core.publisher.Flux<T> sorted(java.util.Comparator<? super T>);
    Code:
       0: aload_0
       1: aload_1
       2: bipush        16
       4: invokevirtual #96                 // Method sorted:(Ljava/util/Comparator;I)Lreactor/core/publisher/Flux;
       7: areturn

  public final reactor.core.publisher.Flux<T> sorted(java.util.Comparator<? super T>, int);
    Code:
       0: iload_2
       1: aload_0
       2: invokevirtual #22                 // Method parallelism:()I
       5: idiv
       6: iconst_1
       7: iadd
       8: istore_3
       9: aload_0
      10: iload_3
      11: invokedynamic #97,  0             // InvokeDynamic #9:get:(I)Ljava/util/function/Supplier;
      16: invokedynamic #98,  0             // InvokeDynamic #10:apply:()Ljava/util/function/BiFunction;
      21: invokevirtual #25                 // Method reduce:(Ljava/util/function/Supplier;Ljava/util/function/BiFunction;)Lreactor/core/publisher/ParallelFlux;
      24: astore        4
      26: aload         4
      28: aload_1
      29: invokedynamic #99,  0             // InvokeDynamic #11:apply:(Ljava/util/Comparator;)Ljava/util/function/Function;
      34: invokevirtual #27                 // Method map:(Ljava/util/function/Function;)Lreactor/core/publisher/ParallelFlux;
      37: astore        5
      39: new           #100                // class reactor/core/publisher/ParallelMergeSort
      42: dup
      43: aload         5
      45: aload_1
      46: invokespecial #101                // Method reactor/core/publisher/ParallelMergeSort."<init>":(Lreactor/core/publisher/ParallelFlux;Ljava/util/Comparator;)V
      49: invokestatic  #64                 // Method reactor/core/publisher/Flux.onAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
      52: areturn

  protected abstract void subscribe(reactor.core.CoreSubscriber<? super T>[]);

  public final reactor.core.Disposable subscribe();
    Code:
       0: aload_0
       1: aconst_null
       2: aconst_null
       3: aconst_null
       4: invokevirtual #102                // Method subscribe:(Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;)Lreactor/core/Disposable;
       7: areturn

  public final reactor.core.Disposable subscribe(java.util.function.Consumer<? super T>);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: aconst_null
       4: invokevirtual #102                // Method subscribe:(Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;)Lreactor/core/Disposable;
       7: areturn

  public final reactor.core.Disposable subscribe(java.util.function.Consumer<? super T>, java.util.function.Consumer<? super java.lang.Throwable>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aconst_null
       4: invokevirtual #102                // Method subscribe:(Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;)Lreactor/core/Disposable;
       7: areturn

  public final reactor.core.Disposable subscribe(java.util.function.Consumer<? super T>, java.util.function.Consumer<? super java.lang.Throwable>, java.lang.Runnable);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aconst_null
       5: invokevirtual #103                // Method subscribe:(Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;Ljava/util/function/Consumer;)Lreactor/core/Disposable;
       8: areturn

  public final reactor.core.Disposable subscribe(java.util.function.Consumer<? super T>, java.util.function.Consumer<? super java.lang.Throwable>, java.lang.Runnable, java.util.function.Consumer<? super org.reactivestreams.Subscription>);
    Code:
       0: aload_0
       1: invokevirtual #22                 // Method parallelism:()I
       4: anewarray     #104                // class reactor/core/publisher/LambdaSubscriber
       7: astore        5
       9: iconst_0
      10: istore        6
      12: iload         6
      14: aload         5
      16: arraylength
      17: if_icmpge     43
      20: aload         5
      22: iload         6
      24: iinc          6, 1
      27: new           #104                // class reactor/core/publisher/LambdaSubscriber
      30: dup
      31: aload_1
      32: aload_2
      33: aload_3
      34: aload         4
      36: invokespecial #105                // Method reactor/core/publisher/LambdaSubscriber."<init>":(Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;Ljava/util/function/Consumer;)V
      39: aastore
      40: goto          12
      43: aload_0
      44: invokestatic  #106                // Method onLastAssembly:(Lreactor/core/publisher/ParallelFlux;)Lreactor/core/publisher/ParallelFlux;
      47: aload         5
      49: invokevirtual #107                // Method subscribe:([Lreactor/core/CoreSubscriber;)V
      52: aload         5
      54: invokestatic  #108                // Method reactor/core/Disposables.composite:([Lreactor/core/Disposable;)Lreactor/core/Disposable$Composite;
      57: areturn

  public final void subscribe(org.reactivestreams.Subscriber<? super T>);
    Code:
       0: aload_0
       1: invokevirtual #109                // Method sequential:()Lreactor/core/publisher/Flux;
       4: invokestatic  #110                // Method reactor/core/publisher/Flux.onLastAssembly:(Lreactor/core/publisher/Flux;)Lreactor/core/publisher/Flux;
       7: new           #111                // class reactor/core/publisher/FluxHide$SuppressFuseableSubscriber
      10: dup
      11: aload_1
      12: invokestatic  #112                // Method reactor/core/publisher/Operators.toCoreSubscriber:(Lorg/reactivestreams/Subscriber;)Lreactor/core/CoreSubscriber;
      15: invokespecial #113                // Method reactor/core/publisher/FluxHide$SuppressFuseableSubscriber."<init>":(Lreactor/core/CoreSubscriber;)V
      18: invokevirtual #114                // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      21: return

  public final reactor.core.publisher.ParallelFlux<T> tag(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #115                // Method reactor/core/publisher/ParallelFluxName.createOrAppend:(Lreactor/core/publisher/ParallelFlux;Ljava/lang/String;Ljava/lang/String;)Lreactor/core/publisher/ParallelFlux;
       6: areturn

  public final <U> reactor.core.publisher.ParallelFlux<U> transform(java.util.function.Function<? super reactor.core.publisher.ParallelFlux<T>, reactor.core.publisher.ParallelFlux<U>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #116                // Method as:(Ljava/util/function/Function;)Ljava/lang/Object;
       5: checkcast     #117                // class reactor/core/publisher/ParallelFlux
       8: invokestatic  #12                 // Method onAssembly:(Lreactor/core/publisher/ParallelFlux;)Lreactor/core/publisher/ParallelFlux;
      11: areturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokevirtual #32                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
       4: invokevirtual #118                // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
       7: areturn

  protected final boolean validate(org.reactivestreams.Subscriber<?>[]);
    Code:
       0: aload_0
       1: invokevirtual #22                 // Method parallelism:()I
       4: istore_2
       5: aload_1
       6: arraylength
       7: iload_2
       8: if_icmpeq     87
      11: new           #119                // class java/lang/IllegalArgumentException
      14: dup
      15: new           #120                // class java/lang/StringBuilder
      18: dup
      19: invokespecial #121                // Method java/lang/StringBuilder."<init>":()V
      22: ldc           #122                // String parallelism =
      24: invokevirtual #123                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      27: iload_2
      28: invokevirtual #124                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      31: ldc           #125                // String , subscribers =
      33: invokevirtual #123                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: aload_1
      37: arraylength
      38: invokevirtual #124                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      41: invokevirtual #126                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      44: invokespecial #127                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      47: astore_3
      48: aload_1
      49: astore        4
      51: aload         4
      53: arraylength
      54: istore        5
      56: iconst_0
      57: istore        6
      59: iload         6
      61: iload         5
      63: if_icmpge     85
      66: aload         4
      68: iload         6
      70: aaload
      71: astore        7
      73: aload         7
      75: aload_3
      76: invokestatic  #128                // Method reactor/core/publisher/Operators.error:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
      79: iinc          6, 1
      82: goto          59
      85: iconst_0
      86: ireturn
      87: iconst_1
      88: ireturn

  final <R> reactor.core.publisher.ParallelFlux<R> concatMap(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>>, int, reactor.core.publisher.FluxConcatMap$ErrorMode);
    Code:
       0: new           #129                // class reactor/core/publisher/ParallelConcatMap
       3: dup
       4: aload_0
       5: aload_1
       6: iload_2
       7: invokestatic  #60                 // Method reactor/util/concurrent/Queues.get:(I)Ljava/util/function/Supplier;
      10: iload_2
      11: aload_3
      12: invokespecial #130                // Method reactor/core/publisher/ParallelConcatMap."<init>":(Lreactor/core/publisher/ParallelFlux;Ljava/util/function/Function;Ljava/util/function/Supplier;ILreactor/core/publisher/FluxConcatMap$ErrorMode;)V
      15: invokestatic  #12                 // Method onAssembly:(Lreactor/core/publisher/ParallelFlux;)Lreactor/core/publisher/ParallelFlux;
      18: areturn

  final <R> reactor.core.publisher.ParallelFlux<R> concatMapDelayError(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>>, boolean, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_3
       3: iload_2
       4: ifeq          13
       7: getstatic     #38                 // Field reactor/core/publisher/FluxConcatMap$ErrorMode.END:Lreactor/core/publisher/FluxConcatMap$ErrorMode;
      10: goto          16
      13: getstatic     #131                // Field reactor/core/publisher/FluxConcatMap$ErrorMode.BOUNDARY:Lreactor/core/publisher/FluxConcatMap$ErrorMode;
      16: invokevirtual #37                 // Method concatMap:(Ljava/util/function/Function;ILreactor/core/publisher/FluxConcatMap$ErrorMode;)Lreactor/core/publisher/ParallelFlux;
      19: areturn

  final <R> reactor.core.publisher.ParallelFlux<R> concatMapDelayError(java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>>, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: getstatic     #38                 // Field reactor/core/publisher/FluxConcatMap$ErrorMode.END:Lreactor/core/publisher/FluxConcatMap$ErrorMode;
       6: invokevirtual #37                 // Method concatMap:(Ljava/util/function/Function;ILreactor/core/publisher/FluxConcatMap$ErrorMode;)Lreactor/core/publisher/ParallelFlux;
       9: areturn

  public int getPrefetch();
    Code:
       0: iconst_m1
       1: ireturn

  protected static <T> reactor.core.publisher.ParallelFlux<T> onAssembly(reactor.core.publisher.ParallelFlux<T>);
    Code:
       0: getstatic     #132                // Field reactor/core/publisher/Hooks.onEachOperatorHook:Ljava/util/function/Function;
       3: astore_1
       4: aload_1
       5: ifnonnull     10
       8: aload_0
       9: areturn
      10: aload_1
      11: aload_0
      12: invokeinterface #15,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      17: checkcast     #117                // class reactor/core/publisher/ParallelFlux
      20: areturn

  protected static <T> reactor.core.publisher.ParallelFlux<T> onLastAssembly(reactor.core.publisher.ParallelFlux<T>);
    Code:
       0: getstatic     #133                // Field reactor/core/publisher/Hooks.onLastOperatorHook:Ljava/util/function/Function;
       3: astore_1
       4: aload_1
       5: ifnonnull     10
       8: aload_0
       9: areturn
      10: aload_1
      11: aload_0
      12: invokeinterface #15,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      17: ldc           #134                // String LastOperator hook returned null
      19: invokestatic  #8                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      22: checkcast     #117                // class reactor/core/publisher/ParallelFlux
      25: areturn

  static <T> reactor.core.publisher.ParallelFlux<T> doOnSignal(reactor.core.publisher.ParallelFlux<T>, java.util.function.Consumer<? super T>, java.util.function.Consumer<? super T>, java.util.function.Consumer<? super java.lang.Throwable>, java.lang.Runnable, java.lang.Runnable, java.util.function.Consumer<? super org.reactivestreams.Subscription>, java.util.function.LongConsumer, java.lang.Runnable);
    Code:
       0: new           #135                // class reactor/core/publisher/ParallelPeek
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: aload_3
       8: aload         4
      10: aload         5
      12: aload         6
      14: aload         7
      16: aload         8
      18: invokespecial #136                // Method reactor/core/publisher/ParallelPeek."<init>":(Lreactor/core/publisher/ParallelFlux;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/util/function/Consumer;Ljava/lang/Runnable;Ljava/lang/Runnable;Ljava/util/function/Consumer;Ljava/util/function/LongConsumer;Ljava/lang/Runnable;)V
      21: invokestatic  #12                 // Method onAssembly:(Lreactor/core/publisher/ParallelFlux;)Lreactor/core/publisher/ParallelFlux;
      24: areturn

  static final <T> java.util.List<T> sortedMerger(java.util.List<T>, java.util.List<T>, java.util.Comparator<? super T>);
    Code:
       0: aload_0
       1: invokeinterface #137,  1          // InterfaceMethod java/util/List.size:()I
       6: aload_1
       7: invokeinterface #137,  1          // InterfaceMethod java/util/List.size:()I
      12: iadd
      13: istore_3
      14: iload_3
      15: ifne          26
      18: new           #138                // class java/util/ArrayList
      21: dup
      22: invokespecial #139                // Method java/util/ArrayList."<init>":()V
      25: areturn
      26: new           #138                // class java/util/ArrayList
      29: dup
      30: iload_3
      31: invokespecial #140                // Method java/util/ArrayList."<init>":(I)V
      34: astore        4
      36: aload_0
      37: invokeinterface #141,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      42: astore        5
      44: aload_1
      45: invokeinterface #141,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      50: astore        6
      52: aload         5
      54: invokeinterface #142,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      59: ifeq          72
      62: aload         5
      64: invokeinterface #143,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      69: goto          73
      72: aconst_null
      73: astore        7
      75: aload         6
      77: invokeinterface #142,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      82: ifeq          95
      85: aload         6
      87: invokeinterface #143,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      92: goto          96
      95: aconst_null
      96: astore        8
      98: aload         7
     100: ifnull        193
     103: aload         8
     105: ifnull        193
     108: aload_2
     109: aload         7
     111: aload         8
     113: invokeinterface #144,  3          // InterfaceMethod java/util/Comparator.compare:(Ljava/lang/Object;Ljava/lang/Object;)I
     118: ifge          157
     121: aload         4
     123: aload         7
     125: invokeinterface #145,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     130: pop
     131: aload         5
     133: invokeinterface #142,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
     138: ifeq          151
     141: aload         5
     143: invokeinterface #143,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     148: goto          152
     151: aconst_null
     152: astore        7
     154: goto          98
     157: aload         4
     159: aload         8
     161: invokeinterface #145,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     166: pop
     167: aload         6
     169: invokeinterface #142,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
     174: ifeq          187
     177: aload         6
     179: invokeinterface #143,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     184: goto          188
     187: aconst_null
     188: astore        8
     190: goto          98
     193: aload         7
     195: ifnull        236
     198: aload         4
     200: aload         7
     202: invokeinterface #145,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     207: pop
     208: aload         5
     210: invokeinterface #142,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
     215: ifeq          279
     218: aload         4
     220: aload         5
     222: invokeinterface #143,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     227: invokeinterface #145,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     232: pop
     233: goto          208
     236: aload         8
     238: ifnull        279
     241: aload         4
     243: aload         8
     245: invokeinterface #145,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     250: pop
     251: aload         6
     253: invokeinterface #142,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
     258: ifeq          279
     261: aload         4
     263: aload         6
     265: invokeinterface #143,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     270: invokeinterface #145,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     275: pop
     276: goto          251
     279: aload         4
     281: areturn

  private static java.util.List lambda$sorted$10(java.util.Comparator, java.util.List);
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #146,  2          // InterfaceMethod java/util/List.sort:(Ljava/util/Comparator;)V
       7: aload_1
       8: areturn

  private static java.util.List lambda$sorted$9(java.util.List, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #145,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
       7: pop
       8: aload_0
       9: areturn

  private static java.util.List lambda$sorted$8(int);
    Code:
       0: new           #138                // class java/util/ArrayList
       3: dup
       4: iload_0
       5: invokespecial #140                // Method java/util/ArrayList."<init>":(I)V
       8: areturn

  private static void lambda$doOnTerminate$7(java.lang.Runnable, java.lang.Throwable);
    Code:
       0: aload_0
       1: invokeinterface #147,  1          // InterfaceMethod java/lang/Runnable.run:()V
       6: return

  private static void lambda$doOnEach$6(java.util.function.Consumer);
    Code:
       0: aload_0
       1: invokestatic  #148                // InterfaceMethod reactor/core/publisher/Signal.complete:()Lreactor/core/publisher/Signal;
       4: invokeinterface #149,  2          // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
       9: return

  private static void lambda$doOnEach$5(java.util.function.Consumer, java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #150                // InterfaceMethod reactor/core/publisher/Signal.error:(Ljava/lang/Throwable;)Lreactor/core/publisher/Signal;
       5: invokeinterface #149,  2          // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
      10: return

  private static void lambda$doOnEach$4(java.util.function.Consumer, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #151                // InterfaceMethod reactor/core/publisher/Signal.next:(Ljava/lang/Object;)Lreactor/core/publisher/Signal;
       5: invokeinterface #149,  2          // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
      10: return

  private static java.util.List lambda$collectSortedList$3(java.util.Comparator, java.util.List, java.util.List);
    Code:
       0: aload_1
       1: aload_2
       2: aload_0
       3: invokestatic  #152                // Method sortedMerger:(Ljava/util/List;Ljava/util/List;Ljava/util/Comparator;)Ljava/util/List;
       6: areturn

  private static java.util.List lambda$collectSortedList$2(java.util.Comparator, java.util.List);
    Code:
       0: aload_1
       1: aload_0
       2: invokeinterface #146,  2          // InterfaceMethod java/util/List.sort:(Ljava/util/Comparator;)V
       7: aload_1
       8: areturn

  private static java.util.List lambda$collectSortedList$1(java.util.List, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #145,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
       7: pop
       8: aload_0
       9: areturn

  private static java.util.List lambda$collectSortedList$0(int);
    Code:
       0: new           #138                // class java/util/ArrayList
       3: dup
       4: iload_0
       5: invokespecial #140                // Method java/util/ArrayList."<init>":(I)V
       8: areturn
}
