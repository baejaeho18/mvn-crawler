Compiled from "FluxCreate.java"
final class reactor.core.publisher.FluxCreate$IgnoreSink<T> extends reactor.core.publisher.FluxCreate$BaseSink<T> {
  reactor.core.publisher.FluxCreate$IgnoreSink(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxCreate$BaseSink."<init>":(Lreactor/core/CoreSubscriber;)V
       5: return

  public reactor.core.publisher.FluxSink<T> next(T);
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method isCancelled:()Z
       4: ifeq          22
       7: aload_1
       8: aload_0
       9: getfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
      12: invokeinterface #4,  1            // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #5                  // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      20: aload_0
      21: areturn
      22: aload_0
      23: getfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
      26: aload_1
      27: invokeinterface #6,  2            // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      32: aload_0
      33: getfield      #7                  // Field requested:J
      36: lstore_2
      37: lload_2
      38: lconst_0
      39: lcmp
      40: ifeq          57
      43: getstatic     #8                  // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      46: aload_0
      47: lload_2
      48: lload_2
      49: lconst_1
      50: lsub
      51: invokevirtual #9                  // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.compareAndSet:(Ljava/lang/Object;JJ)Z
      54: ifeq          59
      57: aload_0
      58: areturn
      59: goto          32
}
