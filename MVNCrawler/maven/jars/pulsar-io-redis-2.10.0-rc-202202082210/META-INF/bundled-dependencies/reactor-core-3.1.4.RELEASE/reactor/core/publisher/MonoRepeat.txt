Compiled from "MonoRepeat.java"
final class reactor.core.publisher.MonoRepeat<T> extends reactor.core.publisher.FluxFromMonoOperator<T, T> {
  final long times;

  reactor.core.publisher.MonoRepeat(reactor.core.publisher.Mono<? extends T>, long);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxFromMonoOperator."<init>":(Lreactor/core/publisher/Mono;)V
       5: lload_2
       6: lconst_0
       7: lcmp
       8: ifgt          21
      11: new           #2                  // class java/lang/IllegalArgumentException
      14: dup
      15: ldc           #3                  // String times > 0 required
      17: invokespecial #4                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      20: athrow
      21: aload_0
      22: lload_2
      23: putfield      #5                  // Field times:J
      26: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: new           #6                  // class reactor/core/publisher/FluxRepeat$RepeatSubscriber
       3: dup
       4: aload_0
       5: getfield      #7                  // Field source:Lreactor/core/publisher/Mono;
       8: aload_1
       9: aload_0
      10: getfield      #5                  // Field times:J
      13: invokespecial #8                  // Method reactor/core/publisher/FluxRepeat$RepeatSubscriber."<init>":(Lorg/reactivestreams/Publisher;Lreactor/core/CoreSubscriber;J)V
      16: astore_2
      17: aload_1
      18: aload_2
      19: invokeinterface #9,  2            // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      24: aload_2
      25: invokevirtual #10                 // Method reactor/core/publisher/FluxRepeat$RepeatSubscriber.isCancelled:()Z
      28: ifne          35
      31: aload_2
      32: invokevirtual #11                 // Method reactor/core/publisher/FluxRepeat$RepeatSubscriber.onComplete:()V
      35: return
}
