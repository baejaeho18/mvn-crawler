Compiled from "Operators.java"
final class reactor.core.publisher.Operators$LiftFunction<I, O> implements java.util.function.Function<org.reactivestreams.Publisher<I>, org.reactivestreams.Publisher<O>> {
  final java.util.function.Predicate<reactor.core.Scannable> filter;

  final java.util.function.BiFunction<reactor.core.Scannable, ? super reactor.core.CoreSubscriber<? super O>, ? extends reactor.core.CoreSubscriber<? super I>> lifter;

  reactor.core.publisher.Operators$LiftFunction(java.util.function.Predicate<reactor.core.Scannable>, java.util.function.BiFunction<reactor.core.Scannable, ? super reactor.core.CoreSubscriber<? super O>, ? extends reactor.core.CoreSubscriber<? super I>>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field filter:Ljava/util/function/Predicate;
       9: aload_0
      10: aload_2
      11: ldc           #3                  // String lifter
      13: invokestatic  #4                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      16: checkcast     #5                  // class java/util/function/BiFunction
      19: putfield      #6                  // Field lifter:Ljava/util/function/BiFunction;
      22: return

  public org.reactivestreams.Publisher<O> apply(org.reactivestreams.Publisher<I>);
    Code:
       0: aload_0
       1: getfield      #2                  // Field filter:Ljava/util/function/Predicate;
       4: ifnull        25
       7: aload_0
       8: getfield      #2                  // Field filter:Ljava/util/function/Predicate;
      11: aload_1
      12: invokestatic  #7                  // InterfaceMethod reactor/core/Scannable.from:(Ljava/lang/Object;)Lreactor/core/Scannable;
      15: invokeinterface #8,  2            // InterfaceMethod java/util/function/Predicate.test:(Ljava/lang/Object;)Z
      20: ifne          25
      23: aload_1
      24: areturn
      25: aload_1
      26: instanceof    #9                  // class reactor/core/publisher/Mono
      29: ifeq          45
      32: new           #10                 // class reactor/core/publisher/MonoLift
      35: dup
      36: aload_1
      37: aload_0
      38: getfield      #6                  // Field lifter:Ljava/util/function/BiFunction;
      41: invokespecial #11                 // Method reactor/core/publisher/MonoLift."<init>":(Lorg/reactivestreams/Publisher;Ljava/util/function/BiFunction;)V
      44: areturn
      45: aload_1
      46: instanceof    #12                 // class reactor/core/publisher/ParallelFlux
      49: ifeq          68
      52: new           #13                 // class reactor/core/publisher/ParallelLift
      55: dup
      56: aload_1
      57: checkcast     #12                 // class reactor/core/publisher/ParallelFlux
      60: aload_0
      61: getfield      #6                  // Field lifter:Ljava/util/function/BiFunction;
      64: invokespecial #14                 // Method reactor/core/publisher/ParallelLift."<init>":(Lreactor/core/publisher/ParallelFlux;Ljava/util/function/BiFunction;)V
      67: areturn
      68: new           #15                 // class reactor/core/publisher/FluxLift
      71: dup
      72: aload_1
      73: aload_0
      74: getfield      #6                  // Field lifter:Ljava/util/function/BiFunction;
      77: invokespecial #16                 // Method reactor/core/publisher/FluxLift."<init>":(Lorg/reactivestreams/Publisher;Ljava/util/function/BiFunction;)V
      80: areturn

  public java.lang.Object apply(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #17                 // class org/reactivestreams/Publisher
       5: invokevirtual #18                 // Method apply:(Lorg/reactivestreams/Publisher;)Lorg/reactivestreams/Publisher;
       8: areturn
}
