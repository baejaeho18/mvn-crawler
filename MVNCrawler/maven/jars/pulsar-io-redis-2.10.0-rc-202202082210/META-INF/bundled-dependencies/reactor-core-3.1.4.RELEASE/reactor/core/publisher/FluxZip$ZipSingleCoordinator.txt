Compiled from "FluxZip.java"
final class reactor.core.publisher.FluxZip$ZipSingleCoordinator<T, R> extends reactor.core.publisher.Operators$MonoSubscriber<R, R> {
  final java.util.function.Function<? super java.lang.Object[], ? extends R> zipper;

  final java.lang.Object[] scalars;

  final reactor.core.publisher.FluxZip$ZipSingleSubscriber<T>[] subscribers;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxZip$ZipSingleCoordinator> WIP;

  reactor.core.publisher.FluxZip$ZipSingleCoordinator(reactor.core.CoreSubscriber<? super R>, java.lang.Object[], int, java.util.function.Function<? super java.lang.Object[], ? extends R>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/Operators$MonoSubscriber."<init>":(Lreactor/core/CoreSubscriber;)V
       5: aload_0
       6: aload         4
       8: putfield      #2                  // Field zipper:Ljava/util/function/Function;
      11: aload_0
      12: aload_2
      13: putfield      #3                  // Field scalars:[Ljava/lang/Object;
      16: iload_3
      17: anewarray     #4                  // class reactor/core/publisher/FluxZip$ZipSingleSubscriber
      20: astore        5
      22: iconst_0
      23: istore        6
      25: iload         6
      27: iload_3
      28: if_icmpge     59
      31: aload_2
      32: iload         6
      34: aaload
      35: ifnonnull     53
      38: aload         5
      40: iload         6
      42: new           #4                  // class reactor/core/publisher/FluxZip$ZipSingleSubscriber
      45: dup
      46: aload_0
      47: iload         6
      49: invokespecial #5                  // Method reactor/core/publisher/FluxZip$ZipSingleSubscriber."<init>":(Lreactor/core/publisher/FluxZip$ZipSingleCoordinator;I)V
      52: aastore
      53: iinc          6, 1
      56: goto          25
      59: aload_0
      60: aload         5
      62: putfield      #6                  // Field subscribers:[Lreactor/core/publisher/FluxZip$ZipSingleSubscriber;
      65: return

  void subscribe(int, int, org.reactivestreams.Publisher<? extends T>[]);
    Code:
       0: getstatic     #7                  // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: iload_1
       5: iload_2
       6: isub
       7: invokevirtual #8                  // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.lazySet:(Ljava/lang/Object;I)V
      10: aload_0
      11: getfield      #6                  // Field subscribers:[Lreactor/core/publisher/FluxZip$ZipSingleSubscriber;
      14: astore        4
      16: iconst_0
      17: istore        5
      19: iload         5
      21: iload_1
      22: if_icmpge     71
      25: aload_0
      26: getfield      #9                  // Field wip:I
      29: ifle          71
      32: aload_0
      33: invokevirtual #10                 // Method isCancelled:()Z
      36: ifeq          42
      39: goto          71
      42: aload         4
      44: iload         5
      46: aaload
      47: astore        6
      49: aload         6
      51: ifnull        65
      54: aload_3
      55: iload         5
      57: aaload
      58: aload         6
      60: invokeinterface #11,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
      65: iinc          5, 1
      68: goto          19
      71: return

  void next(T, int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field scalars:[Ljava/lang/Object;
       4: astore_3
       5: aload_3
       6: iload_2
       7: aload_1
       8: aastore
       9: getstatic     #7                  // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      12: aload_0
      13: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
      16: ifne          73
      19: aload_0
      20: getfield      #2                  // Field zipper:Ljava/util/function/Function;
      23: aload_3
      24: invokeinterface #13,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      29: ldc           #14                 // String The zipper returned a null value
      31: invokestatic  #15                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      34: astore        4
      36: goto          67
      39: astore        5
      41: aload_0
      42: getfield      #17                 // Field actual:Lreactor/core/CoreSubscriber;
      45: aload_0
      46: aload         5
      48: aload_1
      49: aload_0
      50: getfield      #17                 // Field actual:Lreactor/core/CoreSubscriber;
      53: invokeinterface #18,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      58: invokestatic  #19                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      61: invokeinterface #20,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      66: return
      67: aload_0
      68: aload         4
      70: invokevirtual #21                 // Method complete:(Ljava/lang/Object;)V
      73: return
    Exception table:
       from    to  target type
          19    36    39   Class java/lang/Throwable

  void error(java.lang.Throwable, int);
    Code:
       0: getstatic     #7                  // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: iconst_0
       5: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndSet:(Ljava/lang/Object;I)I
       8: ifle          28
      11: aload_0
      12: invokevirtual #23                 // Method cancelAll:()V
      15: aload_0
      16: getfield      #17                 // Field actual:Lreactor/core/CoreSubscriber;
      19: aload_1
      20: invokeinterface #20,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      25: goto          41
      28: aload_1
      29: aload_0
      30: getfield      #17                 // Field actual:Lreactor/core/CoreSubscriber;
      33: invokeinterface #18,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      38: invokestatic  #24                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      41: return

  void complete(int);
    Code:
       0: getstatic     #7                  // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: iconst_0
       5: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndSet:(Ljava/lang/Object;I)I
       8: ifle          24
      11: aload_0
      12: invokevirtual #23                 // Method cancelAll:()V
      15: aload_0
      16: getfield      #17                 // Field actual:Lreactor/core/CoreSubscriber;
      19: invokeinterface #25,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      24: return

  public void cancel();
    Code:
       0: aload_0
       1: invokespecial #26                 // Method reactor/core/publisher/Operators$MonoSubscriber.cancel:()V
       4: aload_0
       5: invokevirtual #23                 // Method cancelAll:()V
       8: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #27                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
       4: if_acmpne     23
       7: aload_0
       8: getfield      #9                  // Field wip:I
      11: ifne          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: invokestatic  #28                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      22: areturn
      23: aload_1
      24: getstatic     #29                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      27: if_acmpne     50
      30: aload_0
      31: getfield      #9                  // Field wip:I
      34: ifle          45
      37: aload_0
      38: getfield      #3                  // Field scalars:[Ljava/lang/Object;
      41: arraylength
      42: goto          46
      45: iconst_0
      46: invokestatic  #30                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      49: areturn
      50: aload_0
      51: aload_1
      52: invokespecial #31                 // Method reactor/core/publisher/Operators$MonoSubscriber.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      55: areturn

  public java.util.stream.Stream<? extends reactor.core.Scannable> inners();
    Code:
       0: aload_0
       1: getfield      #6                  // Field subscribers:[Lreactor/core/publisher/FluxZip$ZipSingleSubscriber;
       4: invokestatic  #32                 // InterfaceMethod java/util/stream/Stream.of:([Ljava/lang/Object;)Ljava/util/stream/Stream;
       7: areturn

  void cancelAll();
    Code:
       0: aload_0
       1: getfield      #6                  // Field subscribers:[Lreactor/core/publisher/FluxZip$ZipSingleSubscriber;
       4: astore_1
       5: aload_1
       6: arraylength
       7: istore_2
       8: iconst_0
       9: istore_3
      10: iload_3
      11: iload_2
      12: if_icmpge     36
      15: aload_1
      16: iload_3
      17: aaload
      18: astore        4
      20: aload         4
      22: ifnull        30
      25: aload         4
      27: invokevirtual #33                 // Method reactor/core/publisher/FluxZip$ZipSingleSubscriber.dispose:()V
      30: iinc          3, 1
      33: goto          10
      36: return

  static {};
    Code:
       0: ldc           #34                 // class reactor/core/publisher/FluxZip$ZipSingleCoordinator
       2: ldc           #35                 // String wip
       4: invokestatic  #36                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #7                  // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: return
}
