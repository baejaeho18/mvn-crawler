Compiled from "MonoFilterWhen.java"
final class reactor.core.publisher.MonoFilterWhen$FilterWhenInner implements reactor.core.publisher.InnerConsumer<java.lang.Boolean> {
  final reactor.core.publisher.MonoFilterWhen$MonoFilterWhenMain<?> main;

  final boolean cancelOnNext;

  boolean done;

  volatile org.reactivestreams.Subscription sub;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.MonoFilterWhen$FilterWhenInner, org.reactivestreams.Subscription> SUB;

  reactor.core.publisher.MonoFilterWhen$FilterWhenInner(reactor.core.publisher.MonoFilterWhen$MonoFilterWhenMain<?>, boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field main:Lreactor/core/publisher/MonoFilterWhen$MonoFilterWhenMain;
       9: aload_0
      10: iload_2
      11: putfield      #3                  // Field cancelOnNext:Z
      14: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: getstatic     #4                  // Field SUB:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #5                  // Method reactor/core/publisher/Operators.setOnce:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          20
      11: aload_1
      12: ldc2_w        #7                  // long 9223372036854775807l
      15: invokeinterface #9,  3            // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      20: return

  public void onNext(java.lang.Boolean);
    Code:
       0: aload_0
       1: getfield      #10                 // Field done:Z
       4: ifne          36
       7: aload_0
       8: getfield      #3                  // Field cancelOnNext:Z
      11: ifeq          23
      14: aload_0
      15: getfield      #11                 // Field sub:Lorg/reactivestreams/Subscription;
      18: invokeinterface #12,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      23: aload_0
      24: iconst_1
      25: putfield      #10                 // Field done:Z
      28: aload_0
      29: getfield      #2                  // Field main:Lreactor/core/publisher/MonoFilterWhen$MonoFilterWhenMain;
      32: aload_1
      33: invokevirtual #13                 // Method reactor/core/publisher/MonoFilterWhen$MonoFilterWhenMain.innerResult:(Ljava/lang/Boolean;)V
      36: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #10                 // Field done:Z
       4: ifne          23
       7: aload_0
       8: iconst_1
       9: putfield      #10                 // Field done:Z
      12: aload_0
      13: getfield      #2                  // Field main:Lreactor/core/publisher/MonoFilterWhen$MonoFilterWhenMain;
      16: aload_1
      17: invokevirtual #14                 // Method reactor/core/publisher/MonoFilterWhen$MonoFilterWhenMain.innerError:(Ljava/lang/Throwable;)V
      20: goto          34
      23: aload_1
      24: aload_0
      25: getfield      #2                  // Field main:Lreactor/core/publisher/MonoFilterWhen$MonoFilterWhenMain;
      28: invokevirtual #15                 // Method reactor/core/publisher/MonoFilterWhen$MonoFilterWhenMain.currentContext:()Lreactor/util/context/Context;
      31: invokestatic  #16                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      34: return

  public reactor.util.context.Context currentContext();
    Code:
       0: aload_0
       1: getfield      #2                  // Field main:Lreactor/core/publisher/MonoFilterWhen$MonoFilterWhenMain;
       4: invokevirtual #15                 // Method reactor/core/publisher/MonoFilterWhen$MonoFilterWhenMain.currentContext:()Lreactor/util/context/Context;
       7: areturn

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #10                 // Field done:Z
       4: ifne          20
       7: aload_0
       8: iconst_1
       9: putfield      #10                 // Field done:Z
      12: aload_0
      13: getfield      #2                  // Field main:Lreactor/core/publisher/MonoFilterWhen$MonoFilterWhenMain;
      16: aconst_null
      17: invokevirtual #13                 // Method reactor/core/publisher/MonoFilterWhen$MonoFilterWhenMain.innerResult:(Ljava/lang/Boolean;)V
      20: return

  void cancel();
    Code:
       0: getstatic     #4                  // Field SUB:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokestatic  #17                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
       7: pop
       8: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #18                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #11                 // Field sub:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #19                 // Field reactor/core/Scannable$Attr.ACTUAL:Lreactor/core/Scannable$Attr;
      16: if_acmpne     24
      19: aload_0
      20: getfield      #2                  // Field main:Lreactor/core/publisher/MonoFilterWhen$MonoFilterWhenMain;
      23: areturn
      24: aload_1
      25: getstatic     #20                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      28: if_acmpne     50
      31: aload_0
      32: getfield      #11                 // Field sub:Lorg/reactivestreams/Subscription;
      35: invokestatic  #21                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      38: if_acmpne     45
      41: iconst_1
      42: goto          46
      45: iconst_0
      46: invokestatic  #22                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      49: areturn
      50: aload_1
      51: getstatic     #23                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      54: if_acmpne     65
      57: aload_0
      58: getfield      #10                 // Field done:Z
      61: invokestatic  #22                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      64: areturn
      65: aload_1
      66: getstatic     #24                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      69: if_acmpne     78
      72: ldc           #26                 // int 2147483647
      74: invokestatic  #27                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      77: areturn
      78: aload_1
      79: getstatic     #28                 // Field reactor/core/Scannable$Attr.REQUESTED_FROM_DOWNSTREAM:Lreactor/core/Scannable$Attr;
      82: if_acmpne     101
      85: aload_0
      86: getfield      #10                 // Field done:Z
      89: ifeq          96
      92: lconst_0
      93: goto          97
      96: lconst_1
      97: invokestatic  #29                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     100: areturn
     101: aconst_null
     102: areturn

  public void onNext(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #30                 // class java/lang/Boolean
       5: invokevirtual #31                 // Method onNext:(Ljava/lang/Boolean;)V
       8: return

  static {};
    Code:
       0: ldc           #32                 // class reactor/core/publisher/MonoFilterWhen$FilterWhenInner
       2: ldc           #33                 // class org/reactivestreams/Subscription
       4: ldc           #34                 // String sub
       6: invokestatic  #35                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #4                  // Field SUB:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: return
}
