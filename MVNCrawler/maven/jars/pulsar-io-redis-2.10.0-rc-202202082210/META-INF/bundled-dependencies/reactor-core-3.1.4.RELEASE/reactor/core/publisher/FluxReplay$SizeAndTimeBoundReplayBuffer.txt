Compiled from "FluxReplay.java"
final class reactor.core.publisher.FluxReplay$SizeAndTimeBoundReplayBuffer<T> implements reactor.core.publisher.FluxReplay$ReplayBuffer<T> {
  final int limit;

  final long maxAge;

  final reactor.core.scheduler.Scheduler scheduler;

  int size;

  volatile reactor.core.publisher.FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode<T> head;

  reactor.core.publisher.FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode<T> tail;

  java.lang.Throwable error;

  static final long NOT_DONE;

  volatile long done;

  reactor.core.publisher.FluxReplay$SizeAndTimeBoundReplayBuffer(int, long, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: ldc2_w        #5                  // long -9223372036854775808l
       8: putfield      #7                  // Field done:J
      11: aload_0
      12: iload_1
      13: putfield      #8                  // Field limit:I
      16: aload_0
      17: lload_2
      18: putfield      #9                  // Field maxAge:J
      21: aload_0
      22: aload         4
      24: putfield      #10                 // Field scheduler:Lreactor/core/scheduler/Scheduler;
      27: new           #11                 // class reactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode
      30: dup
      31: aconst_null
      32: lconst_0
      33: invokespecial #12                 // Method reactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode."<init>":(Ljava/lang/Object;J)V
      36: astore        5
      38: aload_0
      39: aload         5
      41: putfield      #13                 // Field tail:Lreactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode;
      44: aload_0
      45: aload         5
      47: putfield      #14                 // Field head:Lreactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode;
      50: return

  public boolean isExpired();
    Code:
       0: aload_0
       1: getfield      #7                  // Field done:J
       4: lstore_1
       5: lload_1
       6: ldc2_w        #5                  // long -9223372036854775808l
       9: lcmp
      10: ifeq          39
      13: aload_0
      14: getfield      #10                 // Field scheduler:Lreactor/core/scheduler/Scheduler;
      17: getstatic     #15                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      20: invokeinterface #16,  2           // InterfaceMethod reactor/core/scheduler/Scheduler.now:(Ljava/util/concurrent/TimeUnit;)J
      25: aload_0
      26: getfield      #9                  // Field maxAge:J
      29: lsub
      30: lload_1
      31: lcmp
      32: ifle          39
      35: iconst_1
      36: goto          40
      39: iconst_0
      40: ireturn

  void replayNormal(reactor.core.publisher.FluxReplay$ReplaySubscription<T>);
    Code:
       0: iconst_1
       1: istore_2
       2: aload_1
       3: invokeinterface #17,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.actual:()Lreactor/core/CoreSubscriber;
       8: astore_3
       9: aload_1
      10: invokeinterface #18,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.node:()Ljava/lang/Object;
      15: checkcast     #11                 // class reactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode
      18: astore        4
      20: aload         4
      22: ifnonnull     105
      25: aload_0
      26: getfield      #14                 // Field head:Lreactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode;
      29: astore        4
      31: aload_0
      32: getfield      #7                  // Field done:J
      35: ldc2_w        #5                  // long -9223372036854775808l
      38: lcmp
      39: ifne          105
      42: aload_0
      43: getfield      #10                 // Field scheduler:Lreactor/core/scheduler/Scheduler;
      46: getstatic     #15                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      49: invokeinterface #16,  2           // InterfaceMethod reactor/core/scheduler/Scheduler.now:(Ljava/util/concurrent/TimeUnit;)J
      54: aload_0
      55: getfield      #9                  // Field maxAge:J
      58: lsub
      59: lstore        5
      61: aload         4
      63: astore        7
      65: aload         7
      67: ifnull        105
      70: aload         7
      72: getfield      #19                 // Field reactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode.time:J
      75: lstore        8
      77: lload         8
      79: lload         5
      81: lcmp
      82: ifle          88
      85: goto          105
      88: aload         7
      90: astore        4
      92: aload         4
      94: invokevirtual #20                 // Method reactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode.get:()Ljava/lang/Object;
      97: checkcast     #11                 // class reactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode
     100: astore        7
     102: goto          65
     105: aload_1
     106: invokeinterface #21,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.requested:()J
     111: lstore        5
     113: lconst_0
     114: lstore        7
     116: lload         7
     118: lload         5
     120: lcmp
     121: ifeq          259
     124: aload_1
     125: invokeinterface #22,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.isCancelled:()Z
     130: ifeq          141
     133: aload_1
     134: aconst_null
     135: invokeinterface #23,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.node:(Ljava/lang/Object;)V
     140: return
     141: aload_0
     142: getfield      #7                  // Field done:J
     145: ldc2_w        #5                  // long -9223372036854775808l
     148: lcmp
     149: ifeq          156
     152: iconst_1
     153: goto          157
     156: iconst_0
     157: istore        9
     159: aload         4
     161: invokevirtual #20                 // Method reactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode.get:()Ljava/lang/Object;
     164: checkcast     #11                 // class reactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode
     167: astore        10
     169: aload         10
     171: ifnonnull     178
     174: iconst_1
     175: goto          179
     178: iconst_0
     179: istore        11
     181: iload         9
     183: ifeq          227
     186: iload         11
     188: ifeq          227
     191: aload_1
     192: aconst_null
     193: invokeinterface #23,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.node:(Ljava/lang/Object;)V
     198: aload_0
     199: getfield      #24                 // Field error:Ljava/lang/Throwable;
     202: astore        12
     204: aload         12
     206: ifnull        220
     209: aload_3
     210: aload         12
     212: invokeinterface #25,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
     217: goto          226
     220: aload_3
     221: invokeinterface #26,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
     226: return
     227: iload         11
     229: ifeq          235
     232: goto          259
     235: aload_3
     236: aload         10
     238: getfield      #27                 // Field reactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode.value:Ljava/lang/Object;
     241: invokeinterface #28,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
     246: lload         7
     248: lconst_1
     249: ladd
     250: lstore        7
     252: aload         10
     254: astore        4
     256: goto          116
     259: lload         7
     261: lload         5
     263: lcmp
     264: ifne          363
     267: aload_1
     268: invokeinterface #22,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.isCancelled:()Z
     273: ifeq          284
     276: aload_1
     277: aconst_null
     278: invokeinterface #23,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.node:(Ljava/lang/Object;)V
     283: return
     284: aload_0
     285: getfield      #7                  // Field done:J
     288: ldc2_w        #5                  // long -9223372036854775808l
     291: lcmp
     292: ifeq          299
     295: iconst_1
     296: goto          300
     299: iconst_0
     300: istore        9
     302: aload         4
     304: invokevirtual #20                 // Method reactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode.get:()Ljava/lang/Object;
     307: ifnonnull     314
     310: iconst_1
     311: goto          315
     314: iconst_0
     315: istore        10
     317: iload         9
     319: ifeq          363
     322: iload         10
     324: ifeq          363
     327: aload_1
     328: aconst_null
     329: invokeinterface #23,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.node:(Ljava/lang/Object;)V
     334: aload_0
     335: getfield      #24                 // Field error:Ljava/lang/Throwable;
     338: astore        11
     340: aload         11
     342: ifnull        356
     345: aload_3
     346: aload         11
     348: invokeinterface #25,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
     353: goto          362
     356: aload_3
     357: invokeinterface #26,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
     362: return
     363: lload         7
     365: lconst_0
     366: lcmp
     367: ifeq          387
     370: lload         5
     372: ldc2_w        #29                 // long 9223372036854775807l
     375: lcmp
     376: ifeq          387
     379: aload_1
     380: lload         7
     382: invokeinterface #31,  3           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.produced:(J)V
     387: aload_1
     388: aload         4
     390: invokeinterface #23,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.node:(Ljava/lang/Object;)V
     395: aload_1
     396: iload_2
     397: invokeinterface #32,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.leave:(I)I
     402: istore_2
     403: iload_2
     404: ifne          410
     407: goto          413
     410: goto          9
     413: return

  void replayFused(reactor.core.publisher.FluxReplay$ReplaySubscription<T>);
    Code:
       0: iconst_1
       1: istore_2
       2: aload_1
       3: invokeinterface #17,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.actual:()Lreactor/core/CoreSubscriber;
       8: astore_3
       9: aload_1
      10: invokeinterface #22,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.isCancelled:()Z
      15: ifeq          26
      18: aload_1
      19: aconst_null
      20: invokeinterface #23,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.node:(Ljava/lang/Object;)V
      25: return
      26: aload_0
      27: getfield      #7                  // Field done:J
      30: ldc2_w        #5                  // long -9223372036854775808l
      33: lcmp
      34: ifeq          41
      37: iconst_1
      38: goto          42
      41: iconst_0
      42: istore        4
      44: aload_3
      45: aconst_null
      46: invokeinterface #28,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
      51: iload         4
      53: ifeq          85
      56: aload_0
      57: getfield      #24                 // Field error:Ljava/lang/Throwable;
      60: astore        5
      62: aload         5
      64: ifnull        78
      67: aload_3
      68: aload         5
      70: invokeinterface #25,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      75: goto          84
      78: aload_3
      79: invokeinterface #26,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      84: return
      85: aload_1
      86: iload_2
      87: invokeinterface #32,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.leave:(I)I
      92: istore_2
      93: iload_2
      94: ifne          100
      97: goto          103
     100: goto          9
     103: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #10                 // Field scheduler:Lreactor/core/scheduler/Scheduler;
       5: getstatic     #15                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
       8: invokeinterface #16,  2           // InterfaceMethod reactor/core/scheduler/Scheduler.now:(Ljava/util/concurrent/TimeUnit;)J
      13: putfield      #7                  // Field done:J
      16: aload_0
      17: aload_1
      18: putfield      #24                 // Field error:Ljava/lang/Throwable;
      21: return

  public java.lang.Throwable getError();
    Code:
       0: aload_0
       1: getfield      #24                 // Field error:Ljava/lang/Throwable;
       4: areturn

  public void onComplete();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #10                 // Field scheduler:Lreactor/core/scheduler/Scheduler;
       5: getstatic     #15                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
       8: invokeinterface #16,  2           // InterfaceMethod reactor/core/scheduler/Scheduler.now:(Ljava/util/concurrent/TimeUnit;)J
      13: putfield      #7                  // Field done:J
      16: return

  public boolean isDone();
    Code:
       0: aload_0
       1: getfield      #7                  // Field done:J
       4: ldc2_w        #5                  // long -9223372036854775808l
       7: lcmp
       8: ifeq          15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  reactor.core.publisher.FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode<T> latestHead(reactor.core.publisher.FluxReplay$ReplaySubscription<T>);
    Code:
       0: aload_0
       1: getfield      #10                 // Field scheduler:Lreactor/core/scheduler/Scheduler;
       4: getstatic     #15                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
       7: invokeinterface #16,  2           // InterfaceMethod reactor/core/scheduler/Scheduler.now:(Ljava/util/concurrent/TimeUnit;)J
      12: aload_0
      13: getfield      #9                  // Field maxAge:J
      16: lsub
      17: lstore_2
      18: aload_1
      19: invokeinterface #18,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.node:()Ljava/lang/Object;
      24: checkcast     #11                 // class reactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode
      27: astore        4
      29: aload         4
      31: ifnonnull     40
      34: aload_0
      35: getfield      #14                 // Field head:Lreactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode;
      38: astore        4
      40: aload         4
      42: invokevirtual #20                 // Method reactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode.get:()Ljava/lang/Object;
      45: checkcast     #11                 // class reactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode
      48: dup
      49: astore        5
      51: ifnull        74
      54: aload         5
      56: getfield      #19                 // Field reactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode.time:J
      59: lload_2
      60: lcmp
      61: ifle          67
      64: goto          74
      67: aload         5
      69: astore        4
      71: goto          40
      74: aload         4
      76: areturn

  public T poll(reactor.core.publisher.FluxReplay$ReplaySubscription<T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #33                 // Method latestHead:(Lreactor/core/publisher/FluxReplay$ReplaySubscription;)Lreactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode;
       5: astore_2
       6: aload_0
       7: getfield      #10                 // Field scheduler:Lreactor/core/scheduler/Scheduler;
      10: getstatic     #15                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      13: invokeinterface #16,  2           // InterfaceMethod reactor/core/scheduler/Scheduler.now:(Ljava/util/concurrent/TimeUnit;)J
      18: aload_0
      19: getfield      #9                  // Field maxAge:J
      22: lsub
      23: lstore        4
      25: aload_2
      26: invokevirtual #20                 // Method reactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode.get:()Ljava/lang/Object;
      29: checkcast     #11                 // class reactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode
      32: dup
      33: astore_3
      34: ifnull        57
      37: aload_3
      38: getfield      #19                 // Field reactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode.time:J
      41: lload         4
      43: lcmp
      44: ifle          52
      47: aload_3
      48: astore_2
      49: goto          57
      52: aload_3
      53: astore_2
      54: goto          25
      57: aload_3
      58: ifnonnull     63
      61: aconst_null
      62: areturn
      63: aload_1
      64: aload_3
      65: invokeinterface #23,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.node:(Ljava/lang/Object;)V
      70: aload_2
      71: getfield      #27                 // Field reactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode.value:Ljava/lang/Object;
      74: areturn

  public void clear(reactor.core.publisher.FluxReplay$ReplaySubscription<T>);
    Code:
       0: aload_1
       1: aconst_null
       2: invokeinterface #23,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.node:(Ljava/lang/Object;)V
       7: return

  public boolean isEmpty(reactor.core.publisher.FluxReplay$ReplaySubscription<T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #33                 // Method latestHead:(Lreactor/core/publisher/FluxReplay$ReplaySubscription;)Lreactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode;
       5: astore_2
       6: aload_2
       7: invokevirtual #20                 // Method reactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode.get:()Ljava/lang/Object;
      10: ifnonnull     17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ireturn

  public int size(reactor.core.publisher.FluxReplay$ReplaySubscription<T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #33                 // Method latestHead:(Lreactor/core/publisher/FluxReplay$ReplaySubscription;)Lreactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode;
       5: astore_2
       6: iconst_0
       7: istore_3
       8: aload_2
       9: invokevirtual #20                 // Method reactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode.get:()Ljava/lang/Object;
      12: checkcast     #11                 // class reactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode
      15: dup
      16: astore        4
      18: ifnull        36
      21: iload_3
      22: ldc           #35                 // int 2147483647
      24: if_icmpeq     36
      27: iinc          3, 1
      30: aload         4
      32: astore_2
      33: goto          8
      36: iload_3
      37: ireturn

  public int size();
    Code:
       0: aload_0
       1: getfield      #14                 // Field head:Lreactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode;
       4: astore_1
       5: iconst_0
       6: istore_2
       7: aload_1
       8: invokevirtual #20                 // Method reactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode.get:()Ljava/lang/Object;
      11: checkcast     #11                 // class reactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode
      14: dup
      15: astore_3
      16: ifnull        33
      19: iload_2
      20: ldc           #35                 // int 2147483647
      22: if_icmpeq     33
      25: iinc          2, 1
      28: aload_3
      29: astore_1
      30: goto          7
      33: iload_2
      34: ireturn

  public int capacity();
    Code:
       0: aload_0
       1: getfield      #8                  // Field limit:I
       4: ireturn

  public void add(T);
    Code:
       0: new           #11                 // class reactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode
       3: dup
       4: aload_1
       5: aload_0
       6: getfield      #10                 // Field scheduler:Lreactor/core/scheduler/Scheduler;
       9: getstatic     #15                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      12: invokeinterface #16,  2           // InterfaceMethod reactor/core/scheduler/Scheduler.now:(Ljava/util/concurrent/TimeUnit;)J
      17: invokespecial #12                 // Method reactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode."<init>":(Ljava/lang/Object;J)V
      20: astore_2
      21: aload_0
      22: getfield      #13                 // Field tail:Lreactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode;
      25: aload_2
      26: invokevirtual #36                 // Method reactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode.set:(Ljava/lang/Object;)V
      29: aload_0
      30: aload_2
      31: putfield      #13                 // Field tail:Lreactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode;
      34: aload_0
      35: getfield      #37                 // Field size:I
      38: istore_3
      39: iload_3
      40: aload_0
      41: getfield      #8                  // Field limit:I
      44: if_icmpne     64
      47: aload_0
      48: aload_0
      49: getfield      #14                 // Field head:Lreactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode;
      52: invokevirtual #20                 // Method reactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode.get:()Ljava/lang/Object;
      55: checkcast     #11                 // class reactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode
      58: putfield      #14                 // Field head:Lreactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode;
      61: goto          71
      64: aload_0
      65: iload_3
      66: iconst_1
      67: iadd
      68: putfield      #37                 // Field size:I
      71: aload_0
      72: getfield      #10                 // Field scheduler:Lreactor/core/scheduler/Scheduler;
      75: getstatic     #15                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      78: invokeinterface #16,  2           // InterfaceMethod reactor/core/scheduler/Scheduler.now:(Ljava/util/concurrent/TimeUnit;)J
      83: aload_0
      84: getfield      #9                  // Field maxAge:J
      87: lsub
      88: lstore        4
      90: aload_0
      91: getfield      #14                 // Field head:Lreactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode;
      94: astore        6
      96: iconst_0
      97: istore        8
      99: aload         6
     101: invokevirtual #20                 // Method reactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode.get:()Ljava/lang/Object;
     104: checkcast     #11                 // class reactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode
     107: astore        7
     109: aload         7
     111: ifnonnull     117
     114: goto          163
     117: aload         7
     119: getfield      #19                 // Field reactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode.time:J
     122: lload         4
     124: lcmp
     125: ifle          153
     128: iload         8
     130: ifeq          163
     133: aload_0
     134: aload_0
     135: getfield      #37                 // Field size:I
     138: iload         8
     140: isub
     141: putfield      #37                 // Field size:I
     144: aload_0
     145: aload         6
     147: putfield      #14                 // Field head:Lreactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer$TimedNode;
     150: goto          163
     153: aload         7
     155: astore        6
     157: iinc          8, 1
     160: goto          99
     163: return

  public void replay(reactor.core.publisher.FluxReplay$ReplaySubscription<T>);
    Code:
       0: aload_1
       1: invokeinterface #38,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.enter:()Z
       6: ifne          10
       9: return
      10: aload_1
      11: invokeinterface #39,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.fusionMode:()I
      16: ifne          27
      19: aload_0
      20: aload_1
      21: invokevirtual #40                 // Method replayNormal:(Lreactor/core/publisher/FluxReplay$ReplaySubscription;)V
      24: goto          32
      27: aload_0
      28: aload_1
      29: invokevirtual #41                 // Method replayFused:(Lreactor/core/publisher/FluxReplay$ReplaySubscription;)V
      32: return
}
