Compiled from "FluxConcatMap.java"
final class reactor.core.publisher.FluxConcatMap$ConcatMapImmediate<T, R> implements reactor.core.publisher.FluxConcatMap$FluxConcatMapSupport<T, R> {
  final reactor.core.CoreSubscriber<? super R> actual;

  final reactor.core.publisher.FluxConcatMap$ConcatMapInner<R> inner;

  final java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>> mapper;

  final java.util.function.Supplier<? extends java.util.Queue<T>> queueSupplier;

  final int prefetch;

  final int limit;

  org.reactivestreams.Subscription s;

  int consumed;

  volatile java.util.Queue<T> queue;

  volatile boolean done;

  volatile boolean cancelled;

  volatile java.lang.Throwable error;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxConcatMap$ConcatMapImmediate, java.lang.Throwable> ERROR;

  volatile boolean active;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxConcatMap$ConcatMapImmediate> WIP;

  volatile int guard;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxConcatMap$ConcatMapImmediate> GUARD;

  int sourceMode;

  reactor.core.publisher.FluxConcatMap$ConcatMapImmediate(reactor.core.CoreSubscriber<? super R>, java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>>, java.util.function.Supplier<? extends java.util.Queue<T>>, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field mapper:Ljava/util/function/Function;
      14: aload_0
      15: aload_3
      16: putfield      #4                  // Field queueSupplier:Ljava/util/function/Supplier;
      19: aload_0
      20: iload         4
      22: putfield      #5                  // Field prefetch:I
      25: aload_0
      26: iload         4
      28: invokestatic  #6                  // Method reactor/core/publisher/Operators.unboundedOrLimit:(I)I
      31: putfield      #7                  // Field limit:I
      34: aload_0
      35: new           #8                  // class reactor/core/publisher/FluxConcatMap$ConcatMapInner
      38: dup
      39: aload_0
      40: invokespecial #9                  // Method reactor/core/publisher/FluxConcatMap$ConcatMapInner."<init>":(Lreactor/core/publisher/FluxConcatMap$FluxConcatMapSupport;)V
      43: putfield      #10                 // Field inner:Lreactor/core/publisher/FluxConcatMap$ConcatMapInner;
      46: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #11                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #12                 // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #13                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      16: if_acmpne     45
      19: aload_0
      20: getfield      #14                 // Field done:Z
      23: ifne          36
      26: aload_0
      27: getfield      #15                 // Field error:Ljava/lang/Throwable;
      30: getstatic     #16                 // Field reactor/core/Exceptions.TERMINATED:Ljava/lang/Throwable;
      33: if_acmpne     40
      36: iconst_1
      37: goto          41
      40: iconst_0
      41: invokestatic  #17                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      44: areturn
      45: aload_1
      46: getstatic     #18                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      49: if_acmpne     60
      52: aload_0
      53: getfield      #19                 // Field cancelled:Z
      56: invokestatic  #17                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      59: areturn
      60: aload_1
      61: getstatic     #20                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      64: if_acmpne     75
      67: aload_0
      68: getfield      #5                  // Field prefetch:I
      71: invokestatic  #21                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      74: areturn
      75: aload_1
      76: getstatic     #22                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      79: if_acmpne     106
      82: aload_0
      83: getfield      #23                 // Field queue:Ljava/util/Queue;
      86: ifnull        101
      89: aload_0
      90: getfield      #23                 // Field queue:Ljava/util/Queue;
      93: invokeinterface #24,  1           // InterfaceMethod java/util/Queue.size:()I
      98: goto          102
     101: iconst_0
     102: invokestatic  #21                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     105: areturn
     106: aload_1
     107: getstatic     #25                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
     110: if_acmpne     118
     113: aload_0
     114: getfield      #15                 // Field error:Ljava/lang/Throwable;
     117: areturn
     118: aload_0
     119: aload_1
     120: invokespecial #26                 // InterfaceMethod reactor/core/publisher/FluxConcatMap$FluxConcatMapSupport.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
     123: areturn

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #12                 // Field s:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #27                 // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          147
      11: aload_0
      12: aload_1
      13: putfield      #12                 // Field s:Lorg/reactivestreams/Subscription;
      16: aload_1
      17: instanceof    #28                 // class reactor/core/Fuseable$QueueSubscription
      20: ifeq          108
      23: aload_1
      24: checkcast     #28                 // class reactor/core/Fuseable$QueueSubscription
      27: astore_2
      28: aload_2
      29: iconst_3
      30: invokeinterface #30,  2           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.requestFusion:(I)I
      35: istore_3
      36: iload_3
      37: iconst_1
      38: if_icmpne     71
      41: aload_0
      42: iconst_1
      43: putfield      #31                 // Field sourceMode:I
      46: aload_0
      47: aload_2
      48: putfield      #23                 // Field queue:Ljava/util/Queue;
      51: aload_0
      52: iconst_1
      53: putfield      #14                 // Field done:Z
      56: aload_0
      57: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      60: aload_0
      61: invokeinterface #32,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      66: aload_0
      67: invokevirtual #33                 // Method drain:()V
      70: return
      71: iload_3
      72: iconst_2
      73: if_icmpne     89
      76: aload_0
      77: iconst_2
      78: putfield      #31                 // Field sourceMode:I
      81: aload_0
      82: aload_2
      83: putfield      #23                 // Field queue:Ljava/util/Queue;
      86: goto          105
      89: aload_0
      90: aload_0
      91: getfield      #4                  // Field queueSupplier:Ljava/util/function/Supplier;
      94: invokeinterface #34,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      99: checkcast     #35                 // class java/util/Queue
     102: putfield      #23                 // Field queue:Ljava/util/Queue;
     105: goto          124
     108: aload_0
     109: aload_0
     110: getfield      #4                  // Field queueSupplier:Ljava/util/function/Supplier;
     113: invokeinterface #34,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
     118: checkcast     #35                 // class java/util/Queue
     121: putfield      #23                 // Field queue:Ljava/util/Queue;
     124: aload_0
     125: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     128: aload_0
     129: invokeinterface #32,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
     134: aload_1
     135: aload_0
     136: getfield      #5                  // Field prefetch:I
     139: invokestatic  #36                 // Method reactor/core/publisher/Operators.unboundedOrPrefetch:(I)J
     142: invokeinterface #37,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     147: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #31                 // Field sourceMode:I
       4: iconst_2
       5: if_icmpne     15
       8: aload_0
       9: invokevirtual #33                 // Method drain:()V
      12: goto          61
      15: aload_0
      16: getfield      #23                 // Field queue:Ljava/util/Queue;
      19: aload_1
      20: invokeinterface #38,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
      25: ifne          57
      28: aload_0
      29: aload_0
      30: getfield      #12                 // Field s:Lorg/reactivestreams/Subscription;
      33: ldc           #40                 // String Queue is full: Reactive Streams source doesn\'t respect backpressure
      35: invokestatic  #41                 // Method reactor/core/Exceptions.failWithOverflow:(Ljava/lang/String;)Ljava/lang/IllegalStateException;
      38: aload_1
      39: aload_0
      40: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      43: invokeinterface #42,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      48: invokestatic  #43                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      51: invokevirtual #44                 // Method onError:(Ljava/lang/Throwable;)V
      54: goto          61
      57: aload_0
      58: invokevirtual #33                 // Method drain:()V
      61: return

  public void onError(java.lang.Throwable);
    Code:
       0: getstatic     #45                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #46                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
       8: ifeq          56
      11: aload_0
      12: getfield      #10                 // Field inner:Lreactor/core/publisher/FluxConcatMap$ConcatMapInner;
      15: invokevirtual #47                 // Method reactor/core/publisher/FluxConcatMap$ConcatMapInner.cancel:()V
      18: getstatic     #48                 // Field GUARD:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      21: aload_0
      22: invokevirtual #49                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
      25: ifne          69
      28: getstatic     #45                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      31: aload_0
      32: invokestatic  #50                 // Method reactor/core/Exceptions.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Ljava/lang/Throwable;
      35: astore_1
      36: aload_1
      37: getstatic     #16                 // Field reactor/core/Exceptions.TERMINATED:Ljava/lang/Throwable;
      40: if_acmpeq     69
      43: aload_0
      44: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      47: aload_1
      48: invokeinterface #51,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      53: goto          69
      56: aload_1
      57: aload_0
      58: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      61: invokeinterface #42,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      66: invokestatic  #52                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      69: return

  public void onComplete();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #14                 // Field done:Z
       5: aload_0
       6: invokevirtual #33                 // Method drain:()V
       9: return

  public void innerNext(R);
    Code:
       0: aload_0
       1: getfield      #53                 // Field guard:I
       4: ifne          67
       7: getstatic     #48                 // Field GUARD:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: aload_0
      11: iconst_0
      12: iconst_1
      13: invokevirtual #54                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      16: ifeq          67
      19: aload_0
      20: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      23: aload_1
      24: invokeinterface #55,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      29: getstatic     #48                 // Field GUARD:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      32: aload_0
      33: iconst_1
      34: iconst_0
      35: invokevirtual #54                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      38: ifeq          42
      41: return
      42: getstatic     #45                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      45: aload_0
      46: invokestatic  #50                 // Method reactor/core/Exceptions.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Ljava/lang/Throwable;
      49: astore_2
      50: aload_2
      51: getstatic     #16                 // Field reactor/core/Exceptions.TERMINATED:Ljava/lang/Throwable;
      54: if_acmpeq     67
      57: aload_0
      58: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      61: aload_2
      62: invokeinterface #51,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      67: return

  public void innerComplete();
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #56                 // Field active:Z
       5: aload_0
       6: invokevirtual #33                 // Method drain:()V
       9: return

  public void innerError(java.lang.Throwable);
    Code:
       0: getstatic     #45                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #46                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
       8: ifeq          58
      11: aload_0
      12: getfield      #12                 // Field s:Lorg/reactivestreams/Subscription;
      15: invokeinterface #57,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      20: getstatic     #48                 // Field GUARD:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      23: aload_0
      24: invokevirtual #49                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
      27: ifne          71
      30: getstatic     #45                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      33: aload_0
      34: invokestatic  #50                 // Method reactor/core/Exceptions.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Ljava/lang/Throwable;
      37: astore_1
      38: aload_1
      39: getstatic     #16                 // Field reactor/core/Exceptions.TERMINATED:Ljava/lang/Throwable;
      42: if_acmpeq     71
      45: aload_0
      46: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      49: aload_1
      50: invokeinterface #51,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      55: goto          71
      58: aload_1
      59: aload_0
      60: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      63: invokeinterface #42,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      68: invokestatic  #52                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      71: return

  public reactor.core.CoreSubscriber<? super R> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public void request(long);
    Code:
       0: aload_0
       1: getfield      #10                 // Field inner:Lreactor/core/publisher/FluxConcatMap$ConcatMapInner;
       4: lload_1
       5: invokevirtual #58                 // Method reactor/core/publisher/FluxConcatMap$ConcatMapInner.request:(J)V
       8: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #19                 // Field cancelled:Z
       4: ifne          28
       7: aload_0
       8: iconst_1
       9: putfield      #19                 // Field cancelled:Z
      12: aload_0
      13: getfield      #10                 // Field inner:Lreactor/core/publisher/FluxConcatMap$ConcatMapInner;
      16: invokevirtual #47                 // Method reactor/core/publisher/FluxConcatMap$ConcatMapInner.cancel:()V
      19: aload_0
      20: getfield      #12                 // Field s:Lorg/reactivestreams/Subscription;
      23: invokeinterface #57,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      28: return

  void drain();
    Code:
       0: getstatic     #59                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #49                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifne          412
      10: aload_0
      11: getfield      #19                 // Field cancelled:Z
      14: ifeq          18
      17: return
      18: aload_0
      19: getfield      #56                 // Field active:Z
      22: ifne          399
      25: aload_0
      26: getfield      #14                 // Field done:Z
      29: istore_1
      30: aload_0
      31: getfield      #23                 // Field queue:Ljava/util/Queue;
      34: invokeinterface #60,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
      39: astore_2
      40: goto          71
      43: astore_3
      44: aload_0
      45: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      48: aload_0
      49: getfield      #12                 // Field s:Lorg/reactivestreams/Subscription;
      52: aload_3
      53: aload_0
      54: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      57: invokeinterface #42,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      62: invokestatic  #62                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      65: invokeinterface #51,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      70: return
      71: aload_2
      72: ifnonnull     79
      75: iconst_1
      76: goto          80
      79: iconst_0
      80: istore_3
      81: iload_1
      82: ifeq          99
      85: iload_3
      86: ifeq          99
      89: aload_0
      90: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      93: invokeinterface #63,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      98: return
      99: iload_3
     100: ifne          399
     103: aload_0
     104: getfield      #3                  // Field mapper:Ljava/util/function/Function;
     107: aload_2
     108: invokeinterface #64,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
     113: ldc           #65                 // String The mapper returned a null Publisher
     115: invokestatic  #66                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
     118: checkcast     #67                 // class org/reactivestreams/Publisher
     121: astore        4
     123: goto          157
     126: astore        5
     128: aload_0
     129: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     132: aload_0
     133: getfield      #12                 // Field s:Lorg/reactivestreams/Subscription;
     136: aload         5
     138: aload_2
     139: aload_0
     140: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     143: invokeinterface #42,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
     148: invokestatic  #43                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
     151: invokeinterface #51,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
     156: return
     157: aload_0
     158: getfield      #31                 // Field sourceMode:I
     161: iconst_1
     162: if_icmpeq     208
     165: aload_0
     166: getfield      #68                 // Field consumed:I
     169: iconst_1
     170: iadd
     171: istore        5
     173: iload         5
     175: aload_0
     176: getfield      #7                  // Field limit:I
     179: if_icmpne     202
     182: aload_0
     183: iconst_0
     184: putfield      #68                 // Field consumed:I
     187: aload_0
     188: getfield      #12                 // Field s:Lorg/reactivestreams/Subscription;
     191: iload         5
     193: i2l
     194: invokeinterface #37,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     199: goto          208
     202: aload_0
     203: iload         5
     205: putfield      #68                 // Field consumed:I
     208: aload         4
     210: instanceof    #69                 // class java/util/concurrent/Callable
     213: ifeq          383
     216: aload         4
     218: checkcast     #69                 // class java/util/concurrent/Callable
     221: astore        5
     223: aload         5
     225: invokeinterface #70,  1           // InterfaceMethod java/util/concurrent/Callable.call:()Ljava/lang/Object;
     230: astore        6
     232: goto          266
     235: astore        7
     237: aload_0
     238: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     241: aload_0
     242: getfield      #12                 // Field s:Lorg/reactivestreams/Subscription;
     245: aload         7
     247: aload_2
     248: aload_0
     249: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     252: invokeinterface #42,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
     257: invokestatic  #43                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
     260: invokeinterface #51,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
     265: return
     266: aload         6
     268: ifnonnull     274
     271: goto          10
     274: aload_0
     275: getfield      #10                 // Field inner:Lreactor/core/publisher/FluxConcatMap$ConcatMapInner;
     278: invokevirtual #71                 // Method reactor/core/publisher/FluxConcatMap$ConcatMapInner.isUnbounded:()Z
     281: ifeq          355
     284: aload_0
     285: getfield      #53                 // Field guard:I
     288: ifne          10
     291: getstatic     #48                 // Field GUARD:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     294: aload_0
     295: iconst_0
     296: iconst_1
     297: invokevirtual #54                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
     300: ifeq          10
     303: aload_0
     304: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     307: aload         6
     309: invokeinterface #55,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
     314: getstatic     #48                 // Field GUARD:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     317: aload_0
     318: iconst_1
     319: iconst_0
     320: invokevirtual #54                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
     323: ifne          10
     326: getstatic     #45                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     329: aload_0
     330: invokestatic  #50                 // Method reactor/core/Exceptions.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Ljava/lang/Throwable;
     333: astore        7
     335: aload         7
     337: getstatic     #16                 // Field reactor/core/Exceptions.TERMINATED:Ljava/lang/Throwable;
     340: if_acmpeq     354
     343: aload_0
     344: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     347: aload         7
     349: invokeinterface #51,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
     354: return
     355: aload_0
     356: iconst_1
     357: putfield      #56                 // Field active:Z
     360: aload_0
     361: getfield      #10                 // Field inner:Lreactor/core/publisher/FluxConcatMap$ConcatMapInner;
     364: new           #72                 // class reactor/core/publisher/FluxConcatMap$WeakScalarSubscription
     367: dup
     368: aload         6
     370: aload_0
     371: getfield      #10                 // Field inner:Lreactor/core/publisher/FluxConcatMap$ConcatMapInner;
     374: invokespecial #73                 // Method reactor/core/publisher/FluxConcatMap$WeakScalarSubscription."<init>":(Ljava/lang/Object;Lreactor/core/CoreSubscriber;)V
     377: invokevirtual #74                 // Method reactor/core/publisher/FluxConcatMap$ConcatMapInner.set:(Lorg/reactivestreams/Subscription;)V
     380: goto          399
     383: aload_0
     384: iconst_1
     385: putfield      #56                 // Field active:Z
     388: aload         4
     390: aload_0
     391: getfield      #10                 // Field inner:Lreactor/core/publisher/FluxConcatMap$ConcatMapInner;
     394: invokeinterface #75,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
     399: getstatic     #59                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     402: aload_0
     403: invokevirtual #76                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
     406: ifne          10
     409: goto          412
     412: return
    Exception table:
       from    to  target type
          30    40    43   Class java/lang/Throwable
         103   123   126   Class java/lang/Throwable
         223   232   235   Class java/lang/Throwable

  static {};
    Code:
       0: ldc           #77                 // class reactor/core/publisher/FluxConcatMap$ConcatMapImmediate
       2: ldc           #61                 // class java/lang/Throwable
       4: ldc           #78                 // String error
       6: invokestatic  #79                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #45                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: ldc           #77                 // class reactor/core/publisher/FluxConcatMap$ConcatMapImmediate
      14: ldc           #80                 // String wip
      16: invokestatic  #81                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      19: putstatic     #59                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      22: ldc           #77                 // class reactor/core/publisher/FluxConcatMap$ConcatMapImmediate
      24: ldc           #82                 // String guard
      26: invokestatic  #81                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      29: putstatic     #48                 // Field GUARD:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      32: return
}
