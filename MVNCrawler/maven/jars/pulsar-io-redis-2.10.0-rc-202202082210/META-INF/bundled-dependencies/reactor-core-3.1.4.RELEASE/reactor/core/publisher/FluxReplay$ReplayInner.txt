Compiled from "FluxReplay.java"
final class reactor.core.publisher.FluxReplay$ReplayInner<T> implements reactor.core.publisher.FluxReplay$ReplaySubscription<T> {
  final reactor.core.CoreSubscriber<? super T> actual;

  reactor.core.publisher.FluxReplay$ReplaySubscriber<T> parent;

  int index;

  int tailIndex;

  java.lang.Object node;

  int fusionMode;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxReplay$ReplayInner> WIP;

  volatile long requested;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.FluxReplay$ReplayInner> REQUESTED;

  reactor.core.publisher.FluxReplay$ReplayInner(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
       9: return

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #4                  // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          42
       7: aload_0
       8: invokevirtual #5                  // Method fusionMode:()I
      11: ifne          23
      14: getstatic     #6                  // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      17: aload_0
      18: lload_1
      19: invokestatic  #7                  // Method reactor/core/publisher/Operators.addCapCancellable:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
      22: pop2
      23: aload_0
      24: getfield      #8                  // Field parent:Lreactor/core/publisher/FluxReplay$ReplaySubscriber;
      27: astore_3
      28: aload_3
      29: ifnull        42
      32: aload_3
      33: getfield      #9                  // Field reactor/core/publisher/FluxReplay$ReplaySubscriber.buffer:Lreactor/core/publisher/FluxReplay$ReplayBuffer;
      36: aload_0
      37: invokeinterface #10,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplayBuffer.replay:(Lreactor/core/publisher/FluxReplay$ReplaySubscription;)V
      42: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #11                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #8                  // Field parent:Lreactor/core/publisher/FluxReplay$ReplaySubscriber;
      11: areturn
      12: aload_1
      13: getstatic     #12                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      16: if_acmpne     45
      19: aload_0
      20: getfield      #8                  // Field parent:Lreactor/core/publisher/FluxReplay$ReplaySubscriber;
      23: ifnull        40
      26: aload_0
      27: getfield      #8                  // Field parent:Lreactor/core/publisher/FluxReplay$ReplaySubscriber;
      30: invokevirtual #13                 // Method reactor/core/publisher/FluxReplay$ReplaySubscriber.isTerminated:()Z
      33: ifeq          40
      36: iconst_1
      37: goto          41
      40: iconst_0
      41: invokestatic  #14                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      44: areturn
      45: aload_1
      46: getstatic     #15                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      49: if_acmpne     60
      52: aload_0
      53: invokevirtual #16                 // Method size:()I
      56: invokestatic  #17                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      59: areturn
      60: aload_1
      61: getstatic     #18                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      64: if_acmpne     75
      67: aload_0
      68: invokevirtual #19                 // Method isCancelled:()Z
      71: invokestatic  #14                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      74: areturn
      75: aload_1
      76: getstatic     #20                 // Field reactor/core/Scannable$Attr.REQUESTED_FROM_DOWNSTREAM:Lreactor/core/Scannable$Attr;
      79: if_acmpne     94
      82: lconst_0
      83: aload_0
      84: getfield      #21                 // Field requested:J
      87: invokestatic  #22                 // Method java/lang/Math.max:(JJ)J
      90: invokestatic  #23                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      93: areturn
      94: aload_1
      95: getstatic     #24                 // Field reactor/core/Scannable$Attr.RUN_ON:Lreactor/core/Scannable$Attr;
      98: if_acmpne     112
     101: aload_0
     102: getfield      #8                  // Field parent:Lreactor/core/publisher/FluxReplay$ReplaySubscriber;
     105: getfield      #25                 // Field reactor/core/publisher/FluxReplay$ReplaySubscriber.parent:Lreactor/core/publisher/FluxReplay;
     108: getfield      #26                 // Field reactor/core/publisher/FluxReplay.scheduler:Lreactor/core/scheduler/Scheduler;
     111: areturn
     112: aload_0
     113: aload_1
     114: invokespecial #27                 // InterfaceMethod reactor/core/publisher/FluxReplay$ReplaySubscription.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
     117: areturn

  public void cancel();
    Code:
       0: getstatic     #6                  // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
       3: aload_0
       4: ldc2_w        #29                 // long -9223372036854775808l
       7: invokevirtual #31                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.getAndSet:(Ljava/lang/Object;J)J
      10: ldc2_w        #29                 // long -9223372036854775808l
      13: lcmp
      14: ifeq          43
      17: aload_0
      18: getfield      #8                  // Field parent:Lreactor/core/publisher/FluxReplay$ReplaySubscriber;
      21: astore_1
      22: aload_1
      23: ifnull        31
      26: aload_1
      27: aload_0
      28: invokevirtual #32                 // Method reactor/core/publisher/FluxReplay$ReplaySubscriber.remove:(Lreactor/core/publisher/FluxReplay$ReplaySubscription;)V
      31: aload_0
      32: invokevirtual #33                 // Method enter:()Z
      35: ifeq          43
      38: aload_0
      39: aconst_null
      40: putfield      #34                 // Field node:Ljava/lang/Object;
      43: return

  public long requested();
    Code:
       0: aload_0
       1: getfield      #21                 // Field requested:J
       4: lreturn

  public boolean isCancelled();
    Code:
       0: aload_0
       1: getfield      #21                 // Field requested:J
       4: ldc2_w        #29                 // long -9223372036854775808l
       7: lcmp
       8: ifne          15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  public reactor.core.CoreSubscriber<? super T> actual();
    Code:
       0: aload_0
       1: getfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public int requestFusion(int);
    Code:
       0: iload_1
       1: iconst_2
       2: iand
       3: ifeq          13
       6: aload_0
       7: iconst_2
       8: putfield      #35                 // Field fusionMode:I
      11: iconst_2
      12: ireturn
      13: iconst_0
      14: ireturn

  public T poll();
    Code:
       0: aload_0
       1: getfield      #8                  // Field parent:Lreactor/core/publisher/FluxReplay$ReplaySubscriber;
       4: astore_1
       5: aload_1
       6: ifnull        20
       9: aload_1
      10: getfield      #9                  // Field reactor/core/publisher/FluxReplay$ReplaySubscriber.buffer:Lreactor/core/publisher/FluxReplay$ReplayBuffer;
      13: aload_0
      14: invokeinterface #36,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplayBuffer.poll:(Lreactor/core/publisher/FluxReplay$ReplaySubscription;)Ljava/lang/Object;
      19: areturn
      20: aconst_null
      21: areturn

  public void clear();
    Code:
       0: aload_0
       1: getfield      #8                  // Field parent:Lreactor/core/publisher/FluxReplay$ReplaySubscriber;
       4: astore_1
       5: aload_1
       6: ifnull        19
       9: aload_1
      10: getfield      #9                  // Field reactor/core/publisher/FluxReplay$ReplaySubscriber.buffer:Lreactor/core/publisher/FluxReplay$ReplayBuffer;
      13: aload_0
      14: invokeinterface #37,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplayBuffer.clear:(Lreactor/core/publisher/FluxReplay$ReplaySubscription;)V
      19: return

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #8                  // Field parent:Lreactor/core/publisher/FluxReplay$ReplaySubscriber;
       4: astore_1
       5: aload_1
       6: ifnull        22
       9: aload_1
      10: getfield      #9                  // Field reactor/core/publisher/FluxReplay$ReplaySubscriber.buffer:Lreactor/core/publisher/FluxReplay$ReplayBuffer;
      13: aload_0
      14: invokeinterface #38,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplayBuffer.isEmpty:(Lreactor/core/publisher/FluxReplay$ReplaySubscription;)Z
      19: ifeq          26
      22: iconst_1
      23: goto          27
      26: iconst_0
      27: ireturn

  public int size();
    Code:
       0: aload_0
       1: getfield      #8                  // Field parent:Lreactor/core/publisher/FluxReplay$ReplaySubscriber;
       4: astore_1
       5: aload_1
       6: ifnull        20
       9: aload_1
      10: getfield      #9                  // Field reactor/core/publisher/FluxReplay$ReplaySubscriber.buffer:Lreactor/core/publisher/FluxReplay$ReplayBuffer;
      13: aload_0
      14: invokeinterface #39,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplayBuffer.size:(Lreactor/core/publisher/FluxReplay$ReplaySubscription;)I
      19: ireturn
      20: iconst_0
      21: ireturn

  public void node(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #34                 // Field node:Ljava/lang/Object;
       5: return

  public int fusionMode();
    Code:
       0: aload_0
       1: getfield      #35                 // Field fusionMode:I
       4: ireturn

  public java.lang.Object node();
    Code:
       0: aload_0
       1: getfield      #34                 // Field node:Ljava/lang/Object;
       4: areturn

  public int index();
    Code:
       0: aload_0
       1: getfield      #40                 // Field index:I
       4: ireturn

  public void index(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #40                 // Field index:I
       5: return

  public int tailIndex();
    Code:
       0: aload_0
       1: getfield      #41                 // Field tailIndex:I
       4: ireturn

  public void tailIndex(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #41                 // Field tailIndex:I
       5: return

  public boolean enter();
    Code:
       0: getstatic     #42                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #43                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifne          14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public int leave(int);
    Code:
       0: getstatic     #42                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: iload_1
       5: ineg
       6: invokevirtual #44                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
       9: ireturn

  public void produced(long);
    Code:
       0: getstatic     #6                  // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
       3: aload_0
       4: lload_1
       5: lneg
       6: invokevirtual #45                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.addAndGet:(Ljava/lang/Object;J)J
       9: pop2
      10: return

  static {};
    Code:
       0: ldc           #46                 // class reactor/core/publisher/FluxReplay$ReplayInner
       2: ldc           #47                 // String wip
       4: invokestatic  #48                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #42                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: ldc           #46                 // class reactor/core/publisher/FluxReplay$ReplayInner
      12: ldc           #49                 // String requested
      14: invokestatic  #50                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      17: putstatic     #6                  // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      20: return
}
