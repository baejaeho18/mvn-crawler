Compiled from "FluxWindow.java"
final class reactor.core.publisher.FluxWindow$WindowSkipSubscriber<T> implements reactor.core.Disposable, reactor.core.publisher.InnerOperator<T, reactor.core.publisher.Flux<T>> {
  final reactor.core.CoreSubscriber<? super reactor.core.publisher.Flux<T>> actual;

  final java.util.function.Supplier<? extends java.util.Queue<T>> processorQueueSupplier;

  final int size;

  final int skip;

  volatile int cancelled;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxWindow$WindowSkipSubscriber> CANCELLED;

  volatile int windowCount;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxWindow$WindowSkipSubscriber> WINDOW_COUNT;

  volatile int firstRequest;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxWindow$WindowSkipSubscriber> FIRST_REQUEST;

  int index;

  org.reactivestreams.Subscription s;

  reactor.core.publisher.UnicastProcessor<T> window;

  boolean done;

  reactor.core.publisher.FluxWindow$WindowSkipSubscriber(reactor.core.CoreSubscriber<? super reactor.core.publisher.Flux<T>>, int, int, java.util.function.Supplier<? extends java.util.Queue<T>>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: iload_2
      11: putfield      #3                  // Field size:I
      14: aload_0
      15: iload_3
      16: putfield      #4                  // Field skip:I
      19: aload_0
      20: aload         4
      22: putfield      #5                  // Field processorQueueSupplier:Ljava/util/function/Supplier;
      25: getstatic     #6                  // Field WINDOW_COUNT:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      28: aload_0
      29: iconst_1
      30: invokevirtual #7                  // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.lazySet:(Ljava/lang/Object;I)V
      33: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #8                  // Field s:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #9                  // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          26
      11: aload_0
      12: aload_1
      13: putfield      #8                  // Field s:Lorg/reactivestreams/Subscription;
      16: aload_0
      17: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      20: aload_0
      21: invokeinterface #10,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      26: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #11                 // Field done:Z
       4: ifeq          21
       7: aload_1
       8: aload_0
       9: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      12: invokeinterface #12,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #13                 // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      20: return
      21: aload_0
      22: getfield      #14                 // Field index:I
      25: istore_2
      26: aload_0
      27: getfield      #15                 // Field window:Lreactor/core/publisher/UnicastProcessor;
      30: astore_3
      31: iload_2
      32: ifne          79
      35: getstatic     #6                  // Field WINDOW_COUNT:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      38: aload_0
      39: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
      42: pop
      43: new           #17                 // class reactor/core/publisher/UnicastProcessor
      46: dup
      47: aload_0
      48: getfield      #5                  // Field processorQueueSupplier:Ljava/util/function/Supplier;
      51: invokeinterface #18,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      56: checkcast     #19                 // class java/util/Queue
      59: aload_0
      60: invokespecial #20                 // Method reactor/core/publisher/UnicastProcessor."<init>":(Ljava/util/Queue;Lreactor/core/Disposable;)V
      63: astore_3
      64: aload_0
      65: aload_3
      66: putfield      #15                 // Field window:Lreactor/core/publisher/UnicastProcessor;
      69: aload_0
      70: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      73: aload_3
      74: invokeinterface #21,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      79: iinc          2, 1
      82: aload_3
      83: ifnull        91
      86: aload_3
      87: aload_1
      88: invokevirtual #22                 // Method reactor/core/publisher/UnicastProcessor.onNext:(Ljava/lang/Object;)V
      91: iload_2
      92: aload_0
      93: getfield      #3                  // Field size:I
      96: if_icmpne     112
      99: aload_0
     100: aconst_null
     101: putfield      #15                 // Field window:Lreactor/core/publisher/UnicastProcessor;
     104: aload_3
     105: ifnull        112
     108: aload_3
     109: invokevirtual #23                 // Method reactor/core/publisher/UnicastProcessor.onComplete:()V
     112: iload_2
     113: aload_0
     114: getfield      #4                  // Field skip:I
     117: if_icmpne     128
     120: aload_0
     121: iconst_0
     122: putfield      #14                 // Field index:I
     125: goto          133
     128: aload_0
     129: iload_2
     130: putfield      #14                 // Field index:I
     133: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #11                 // Field done:Z
       4: ifeq          21
       7: aload_1
       8: aload_0
       9: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      12: invokeinterface #12,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #24                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      20: return
      21: aload_0
      22: iconst_1
      23: putfield      #11                 // Field done:Z
      26: aload_0
      27: getfield      #15                 // Field window:Lreactor/core/publisher/UnicastProcessor;
      30: astore_2
      31: aload_2
      32: ifnull        47
      35: aload_0
      36: aconst_null
      37: putfield      #15                 // Field window:Lreactor/core/publisher/UnicastProcessor;
      40: aload_2
      41: aload_1
      42: invokeinterface #25,  2           // InterfaceMethod org/reactivestreams/Processor.onError:(Ljava/lang/Throwable;)V
      47: aload_0
      48: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      51: aload_1
      52: invokeinterface #26,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      57: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #11                 // Field done:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #11                 // Field done:Z
      13: aload_0
      14: getfield      #15                 // Field window:Lreactor/core/publisher/UnicastProcessor;
      17: astore_1
      18: aload_1
      19: ifnull        33
      22: aload_0
      23: aconst_null
      24: putfield      #15                 // Field window:Lreactor/core/publisher/UnicastProcessor;
      27: aload_1
      28: invokeinterface #27,  1           // InterfaceMethod org/reactivestreams/Processor.onComplete:()V
      33: aload_0
      34: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      37: invokeinterface #28,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      42: return

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #29                 // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          96
       7: aload_0
       8: getfield      #30                 // Field firstRequest:I
      11: ifne          76
      14: getstatic     #31                 // Field FIRST_REQUEST:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      17: aload_0
      18: iconst_0
      19: iconst_1
      20: invokevirtual #32                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      23: ifeq          76
      26: aload_0
      27: getfield      #3                  // Field size:I
      30: i2l
      31: lload_1
      32: invokestatic  #33                 // Method reactor/core/publisher/Operators.multiplyCap:(JJ)J
      35: lstore_3
      36: aload_0
      37: getfield      #4                  // Field skip:I
      40: aload_0
      41: getfield      #3                  // Field size:I
      44: isub
      45: i2l
      46: lload_1
      47: lconst_1
      48: lsub
      49: invokestatic  #33                 // Method reactor/core/publisher/Operators.multiplyCap:(JJ)J
      52: lstore        5
      54: lload_3
      55: lload         5
      57: invokestatic  #34                 // Method reactor/core/publisher/Operators.addCap:(JJ)J
      60: lstore        7
      62: aload_0
      63: getfield      #8                  // Field s:Lorg/reactivestreams/Subscription;
      66: lload         7
      68: invokeinterface #35,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      73: goto          96
      76: aload_0
      77: getfield      #4                  // Field skip:I
      80: i2l
      81: lload_1
      82: invokestatic  #33                 // Method reactor/core/publisher/Operators.multiplyCap:(JJ)J
      85: lstore_3
      86: aload_0
      87: getfield      #8                  // Field s:Lorg/reactivestreams/Subscription;
      90: lload_3
      91: invokeinterface #35,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      96: return

  public void cancel();
    Code:
       0: getstatic     #36                 // Field CANCELLED:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: iconst_0
       5: iconst_1
       6: invokevirtual #32                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
       9: ifeq          16
      12: aload_0
      13: invokevirtual #37                 // Method dispose:()V
      16: return

  public boolean isDisposed();
    Code:
       0: aload_0
       1: getfield      #38                 // Field cancelled:I
       4: iconst_1
       5: if_icmpeq     15
       8: aload_0
       9: getfield      #11                 // Field done:Z
      12: ifeq          19
      15: iconst_1
      16: goto          20
      19: iconst_0
      20: ireturn

  public void dispose();
    Code:
       0: getstatic     #6                  // Field WINDOW_COUNT:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #39                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
       7: ifne          19
      10: aload_0
      11: getfield      #8                  // Field s:Lorg/reactivestreams/Subscription;
      14: invokeinterface #40,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      19: return

  public reactor.core.CoreSubscriber<? super reactor.core.publisher.Flux<T>> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #41                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #8                  // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #42                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      16: if_acmpne     36
      19: aload_0
      20: getfield      #38                 // Field cancelled:I
      23: iconst_1
      24: if_icmpne     31
      27: iconst_1
      28: goto          32
      31: iconst_0
      32: invokestatic  #43                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      35: areturn
      36: aload_1
      37: getstatic     #44                 // Field reactor/core/Scannable$Attr.CAPACITY:Lreactor/core/Scannable$Attr;
      40: if_acmpne     51
      43: aload_0
      44: getfield      #3                  // Field size:I
      47: invokestatic  #45                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      50: areturn
      51: aload_1
      52: getstatic     #46                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      55: if_acmpne     66
      58: aload_0
      59: getfield      #11                 // Field done:Z
      62: invokestatic  #43                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      65: areturn
      66: aload_0
      67: aload_1
      68: invokespecial #47                 // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      71: areturn

  public java.util.stream.Stream<? extends reactor.core.Scannable> inners();
    Code:
       0: aload_0
       1: getfield      #15                 // Field window:Lreactor/core/publisher/UnicastProcessor;
       4: invokestatic  #48                 // InterfaceMethod java/util/stream/Stream.of:(Ljava/lang/Object;)Ljava/util/stream/Stream;
       7: areturn

  static {};
    Code:
       0: ldc           #49                 // class reactor/core/publisher/FluxWindow$WindowSkipSubscriber
       2: ldc           #50                 // String cancelled
       4: invokestatic  #51                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #36                 // Field CANCELLED:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: ldc           #49                 // class reactor/core/publisher/FluxWindow$WindowSkipSubscriber
      12: ldc           #52                 // String windowCount
      14: invokestatic  #51                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      17: putstatic     #6                  // Field WINDOW_COUNT:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      20: ldc           #49                 // class reactor/core/publisher/FluxWindow$WindowSkipSubscriber
      22: ldc           #53                 // String firstRequest
      24: invokestatic  #51                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      27: putstatic     #31                 // Field FIRST_REQUEST:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      30: return
}
