Compiled from "FluxCreate.java"
abstract class reactor.core.publisher.FluxCreate$NoOverflowBaseAsyncSink<T> extends reactor.core.publisher.FluxCreate$BaseSink<T> {
  reactor.core.publisher.FluxCreate$NoOverflowBaseAsyncSink(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxCreate$BaseSink."<init>":(Lreactor/core/CoreSubscriber;)V
       5: return

  public final reactor.core.publisher.FluxSink<T> next(T);
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method isCancelled:()Z
       4: ifeq          22
       7: aload_1
       8: aload_0
       9: getfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
      12: invokeinterface #4,  1            // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #5                  // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      20: aload_0
      21: areturn
      22: aload_0
      23: getfield      #6                  // Field requested:J
      26: lconst_0
      27: lcmp
      28: ifeq          53
      31: aload_0
      32: getfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
      35: aload_1
      36: invokeinterface #7,  2            // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      41: getstatic     #8                  // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      44: aload_0
      45: lconst_1
      46: invokestatic  #9                  // Method reactor/core/publisher/Operators.produced:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
      49: pop2
      50: goto          57
      53: aload_0
      54: invokevirtual #10                 // Method onOverflow:()V
      57: aload_0
      58: areturn

  abstract void onOverflow();
}
