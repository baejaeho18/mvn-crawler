Compiled from "FluxSubscribeOnValue.java"
final class reactor.core.publisher.FluxSubscribeOnValue<T> extends reactor.core.publisher.Flux<T> implements reactor.core.Fuseable, reactor.core.Scannable {
  final T value;

  final reactor.core.scheduler.Scheduler scheduler;

  reactor.core.publisher.FluxSubscribeOnValue(T, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/Flux."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field value:Ljava/lang/Object;
       9: aload_0
      10: aload_2
      11: ldc           #3                  // String scheduler
      13: invokestatic  #4                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      16: checkcast     #5                  // class reactor/core/scheduler/Scheduler
      19: putfield      #6                  // Field scheduler:Lreactor/core/scheduler/Scheduler;
      22: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: getfield      #2                  // Field value:Ljava/lang/Object;
       4: astore_2
       5: aload_2
       6: ifnonnull     74
       9: new           #7                  // class reactor/core/publisher/FluxSubscribeOnValue$ScheduledEmpty
      12: dup
      13: aload_1
      14: invokespecial #8                  // Method reactor/core/publisher/FluxSubscribeOnValue$ScheduledEmpty."<init>":(Lorg/reactivestreams/Subscriber;)V
      17: astore_3
      18: aload_1
      19: aload_3
      20: invokeinterface #9,  2            // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      25: aload_3
      26: aload_0
      27: getfield      #6                  // Field scheduler:Lreactor/core/scheduler/Scheduler;
      30: aload_3
      31: invokeinterface #10,  2           // InterfaceMethod reactor/core/scheduler/Scheduler.schedule:(Ljava/lang/Runnable;)Lreactor/core/Disposable;
      36: invokevirtual #11                 // Method reactor/core/publisher/FluxSubscribeOnValue$ScheduledEmpty.setFuture:(Lreactor/core/Disposable;)V
      39: goto          71
      42: astore        4
      44: aload_3
      45: getfield      #13                 // Field reactor/core/publisher/FluxSubscribeOnValue$ScheduledEmpty.future:Lreactor/core/Disposable;
      48: getstatic     #14                 // Field reactor/core/publisher/OperatorDisposables.DISPOSED:Lreactor/core/Disposable;
      51: if_acmpeq     71
      54: aload_1
      55: aload         4
      57: aload_1
      58: invokeinterface #15,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      63: invokestatic  #16                 // Method reactor/core/publisher/Operators.onRejectedExecution:(Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/RuntimeException;
      66: invokeinterface #17,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      71: goto          93
      74: aload_1
      75: new           #18                 // class reactor/core/publisher/FluxSubscribeOnValue$ScheduledScalar
      78: dup
      79: aload_1
      80: aload_2
      81: aload_0
      82: getfield      #6                  // Field scheduler:Lreactor/core/scheduler/Scheduler;
      85: invokespecial #19                 // Method reactor/core/publisher/FluxSubscribeOnValue$ScheduledScalar."<init>":(Lreactor/core/CoreSubscriber;Ljava/lang/Object;Lreactor/core/scheduler/Scheduler;)V
      88: invokeinterface #9,  2            // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      93: return
    Exception table:
       from    to  target type
          25    39    42   Class java/util/concurrent/RejectedExecutionException

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #20                 // Field reactor/core/Scannable$Attr.RUN_ON:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #6                  // Field scheduler:Lreactor/core/scheduler/Scheduler;
      11: areturn
      12: aconst_null
      13: areturn
}
