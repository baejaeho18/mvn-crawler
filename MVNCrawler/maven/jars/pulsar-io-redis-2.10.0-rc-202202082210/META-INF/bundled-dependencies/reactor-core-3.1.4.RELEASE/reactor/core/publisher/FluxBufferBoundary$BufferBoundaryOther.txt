Compiled from "FluxBufferBoundary.java"
final class reactor.core.publisher.FluxBufferBoundary$BufferBoundaryOther<U> extends reactor.core.publisher.Operators$DeferredSubscription implements reactor.core.publisher.InnerConsumer<U> {
  final reactor.core.publisher.FluxBufferBoundary$BufferBoundaryMain<?, U, ?> main;

  reactor.core.publisher.FluxBufferBoundary$BufferBoundaryOther(reactor.core.publisher.FluxBufferBoundary$BufferBoundaryMain<?, U, ?>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/Operators$DeferredSubscription."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field main:Lreactor/core/publisher/FluxBufferBoundary$BufferBoundaryMain;
       9: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #3                  // Method set:(Lorg/reactivestreams/Subscription;)Z
       5: ifeq          17
       8: aload_1
       9: ldc2_w        #5                  // long 9223372036854775807l
      12: invokeinterface #7,  3            // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      17: return

  public reactor.util.context.Context currentContext();
    Code:
       0: aload_0
       1: getfield      #2                  // Field main:Lreactor/core/publisher/FluxBufferBoundary$BufferBoundaryMain;
       4: invokevirtual #8                  // Method reactor/core/publisher/FluxBufferBoundary$BufferBoundaryMain.currentContext:()Lreactor/util/context/Context;
       7: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #9                  // Field reactor/core/Scannable$Attr.ACTUAL:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #2                  // Field main:Lreactor/core/publisher/FluxBufferBoundary$BufferBoundaryMain;
      11: areturn
      12: aload_0
      13: aload_1
      14: invokespecial #10                 // Method reactor/core/publisher/Operators$DeferredSubscription.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      17: areturn

  public void onNext(U);
    Code:
       0: aload_0
       1: getfield      #2                  // Field main:Lreactor/core/publisher/FluxBufferBoundary$BufferBoundaryMain;
       4: invokevirtual #11                 // Method reactor/core/publisher/FluxBufferBoundary$BufferBoundaryMain.otherNext:()V
       7: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #2                  // Field main:Lreactor/core/publisher/FluxBufferBoundary$BufferBoundaryMain;
       4: aload_1
       5: invokevirtual #12                 // Method reactor/core/publisher/FluxBufferBoundary$BufferBoundaryMain.otherError:(Ljava/lang/Throwable;)V
       8: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #2                  // Field main:Lreactor/core/publisher/FluxBufferBoundary$BufferBoundaryMain;
       4: invokevirtual #13                 // Method reactor/core/publisher/FluxBufferBoundary$BufferBoundaryMain.otherComplete:()V
       7: return
}
