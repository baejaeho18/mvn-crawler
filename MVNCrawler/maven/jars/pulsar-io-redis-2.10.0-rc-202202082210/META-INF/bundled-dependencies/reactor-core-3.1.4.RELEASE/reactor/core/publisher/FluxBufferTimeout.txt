Compiled from "FluxBufferTimeout.java"
final class reactor.core.publisher.FluxBufferTimeout<T, C extends java.util.Collection<? super T>> extends reactor.core.publisher.FluxOperator<T, C> {
  final int batchSize;

  final java.util.function.Supplier<C> bufferSupplier;

  final reactor.core.scheduler.Scheduler timer;

  final long timespan;

  reactor.core.publisher.FluxBufferTimeout(reactor.core.publisher.Flux<T>, int, long, reactor.core.scheduler.Scheduler, java.util.function.Supplier<C>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxOperator."<init>":(Lreactor/core/publisher/Flux;)V
       5: lload_3
       6: lconst_0
       7: lcmp
       8: ifgt          21
      11: new           #2                  // class java/lang/IllegalArgumentException
      14: dup
      15: ldc           #3                  // String Timeout period must be strictly positive
      17: invokespecial #4                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      20: athrow
      21: iload_2
      22: ifgt          35
      25: new           #2                  // class java/lang/IllegalArgumentException
      28: dup
      29: ldc           #5                  // String maxSize must be strictly positive
      31: invokespecial #4                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      34: athrow
      35: aload_0
      36: aload         5
      38: ldc           #6                  // String Timer
      40: invokestatic  #7                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      43: checkcast     #8                  // class reactor/core/scheduler/Scheduler
      46: putfield      #9                  // Field timer:Lreactor/core/scheduler/Scheduler;
      49: aload_0
      50: lload_3
      51: putfield      #10                 // Field timespan:J
      54: aload_0
      55: iload_2
      56: putfield      #11                 // Field batchSize:I
      59: aload_0
      60: aload         6
      62: ldc           #12                 // String bufferSupplier
      64: invokestatic  #7                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      67: checkcast     #13                 // class java/util/function/Supplier
      70: putfield      #14                 // Field bufferSupplier:Ljava/util/function/Supplier;
      73: return

  public void subscribe(reactor.core.CoreSubscriber<? super C>);
    Code:
       0: aload_0
       1: getfield      #15                 // Field source:Lreactor/core/publisher/Flux;
       4: new           #16                 // class reactor/core/publisher/FluxBufferTimeout$BufferTimeoutSubscriber
       7: dup
       8: aload_1
       9: invokestatic  #17                 // Method reactor/core/publisher/Operators.serialize:(Lreactor/core/CoreSubscriber;)Lreactor/core/CoreSubscriber;
      12: aload_0
      13: getfield      #11                 // Field batchSize:I
      16: aload_0
      17: getfield      #10                 // Field timespan:J
      20: aload_0
      21: getfield      #9                  // Field timer:Lreactor/core/scheduler/Scheduler;
      24: invokeinterface #18,  1           // InterfaceMethod reactor/core/scheduler/Scheduler.createWorker:()Lreactor/core/scheduler/Scheduler$Worker;
      29: aload_0
      30: getfield      #14                 // Field bufferSupplier:Ljava/util/function/Supplier;
      33: invokespecial #19                 // Method reactor/core/publisher/FluxBufferTimeout$BufferTimeoutSubscriber."<init>":(Lreactor/core/CoreSubscriber;IJLreactor/core/scheduler/Scheduler$Worker;Ljava/util/function/Supplier;)V
      36: invokevirtual #20                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      39: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #21                 // Field reactor/core/Scannable$Attr.RUN_ON:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #9                  // Field timer:Lreactor/core/scheduler/Scheduler;
      11: areturn
      12: aload_0
      13: aload_1
      14: invokespecial #22                 // Method reactor/core/publisher/FluxOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      17: areturn
}
