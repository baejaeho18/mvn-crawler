Compiled from "WaitStrategy.java"
public abstract class reactor.util.concurrent.WaitStrategy {
  public static final java.lang.Runnable NOOP_SPIN_OBSERVER;

  public reactor.util.concurrent.WaitStrategy();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static reactor.util.concurrent.WaitStrategy blocking();
    Code:
       0: new           #2                  // class reactor/util/concurrent/WaitStrategy$Blocking
       3: dup
       4: invokespecial #3                  // Method reactor/util/concurrent/WaitStrategy$Blocking."<init>":()V
       7: areturn

  public static reactor.util.concurrent.WaitStrategy busySpin();
    Code:
       0: getstatic     #4                  // Field reactor/util/concurrent/WaitStrategy$BusySpin.INSTANCE:Lreactor/util/concurrent/WaitStrategy$BusySpin;
       3: areturn

  public static boolean isAlert(java.lang.Throwable);
    Code:
       0: aload_0
       1: getstatic     #5                  // Field reactor/util/concurrent/WaitStrategy$AlertException.INSTANCE:Lreactor/util/concurrent/WaitStrategy$AlertException;
       4: if_acmpne     11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public static reactor.util.concurrent.WaitStrategy liteBlocking();
    Code:
       0: new           #6                  // class reactor/util/concurrent/WaitStrategy$LiteBlocking
       3: dup
       4: invokespecial #7                  // Method reactor/util/concurrent/WaitStrategy$LiteBlocking."<init>":()V
       7: areturn

  public static reactor.util.concurrent.WaitStrategy parking();
    Code:
       0: getstatic     #8                  // Field reactor/util/concurrent/WaitStrategy$Parking.INSTANCE:Lreactor/util/concurrent/WaitStrategy$Parking;
       3: areturn

  public static reactor.util.concurrent.WaitStrategy parking(int);
    Code:
       0: new           #9                  // class reactor/util/concurrent/WaitStrategy$Parking
       3: dup
       4: iload_0
       5: invokespecial #10                 // Method reactor/util/concurrent/WaitStrategy$Parking."<init>":(I)V
       8: areturn

  public static reactor.util.concurrent.WaitStrategy phasedOff(long, long, java.util.concurrent.TimeUnit, reactor.util.concurrent.WaitStrategy);
    Code:
       0: new           #11                 // class reactor/util/concurrent/WaitStrategy$PhasedOff
       3: dup
       4: lload_0
       5: lload_2
       6: aload         4
       8: aload         5
      10: invokespecial #12                 // Method reactor/util/concurrent/WaitStrategy$PhasedOff."<init>":(JJLjava/util/concurrent/TimeUnit;Lreactor/util/concurrent/WaitStrategy;)V
      13: areturn

  public static reactor.util.concurrent.WaitStrategy phasedOffLiteLock(long, long, java.util.concurrent.TimeUnit);
    Code:
       0: lload_0
       1: lload_2
       2: aload         4
       4: invokestatic  #13                 // Method liteBlocking:()Lreactor/util/concurrent/WaitStrategy;
       7: invokestatic  #14                 // Method phasedOff:(JJLjava/util/concurrent/TimeUnit;Lreactor/util/concurrent/WaitStrategy;)Lreactor/util/concurrent/WaitStrategy;
      10: areturn

  public static reactor.util.concurrent.WaitStrategy phasedOffLock(long, long, java.util.concurrent.TimeUnit);
    Code:
       0: lload_0
       1: lload_2
       2: aload         4
       4: invokestatic  #15                 // Method blocking:()Lreactor/util/concurrent/WaitStrategy;
       7: invokestatic  #14                 // Method phasedOff:(JJLjava/util/concurrent/TimeUnit;Lreactor/util/concurrent/WaitStrategy;)Lreactor/util/concurrent/WaitStrategy;
      10: areturn

  public static reactor.util.concurrent.WaitStrategy phasedOffSleep(long, long, java.util.concurrent.TimeUnit);
    Code:
       0: lload_0
       1: lload_2
       2: aload         4
       4: iconst_0
       5: invokestatic  #16                 // Method parking:(I)Lreactor/util/concurrent/WaitStrategy;
       8: invokestatic  #14                 // Method phasedOff:(JJLjava/util/concurrent/TimeUnit;Lreactor/util/concurrent/WaitStrategy;)Lreactor/util/concurrent/WaitStrategy;
      11: areturn

  public static reactor.util.concurrent.WaitStrategy sleeping();
    Code:
       0: getstatic     #17                 // Field reactor/util/concurrent/WaitStrategy$Sleeping.INSTANCE:Lreactor/util/concurrent/WaitStrategy$Sleeping;
       3: areturn

  public static reactor.util.concurrent.WaitStrategy yielding();
    Code:
       0: getstatic     #18                 // Field reactor/util/concurrent/WaitStrategy$Yielding.INSTANCE:Lreactor/util/concurrent/WaitStrategy$Yielding;
       3: areturn

  public void signalAllWhenBlocking();
    Code:
       0: return

  public abstract long waitFor(long, java.util.function.LongSupplier, java.lang.Runnable) throws java.lang.InterruptedException;

  public static void alert();
    Code:
       0: getstatic     #5                  // Field reactor/util/concurrent/WaitStrategy$AlertException.INSTANCE:Lreactor/util/concurrent/WaitStrategy$AlertException;
       3: athrow

  private static void lambda$static$0();
    Code:
       0: return

  static {};
    Code:
       0: invokedynamic #19,  0             // InvokeDynamic #0:run:()Ljava/lang/Runnable;
       5: putstatic     #20                 // Field NOOP_SPIN_OBSERVER:Ljava/lang/Runnable;
       8: return
}
