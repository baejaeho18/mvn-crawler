Compiled from "MonoTakeLastOne.java"
final class reactor.core.publisher.MonoTakeLastOne<T> extends reactor.core.publisher.MonoFromFluxOperator<T, T> implements reactor.core.Fuseable {
  final T defaultValue;

  reactor.core.publisher.MonoTakeLastOne(reactor.core.publisher.Flux<? extends T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/MonoFromFluxOperator."<init>":(Lreactor/core/publisher/Flux;)V
       5: aload_0
       6: aconst_null
       7: putfield      #2                  // Field defaultValue:Ljava/lang/Object;
      10: return

  reactor.core.publisher.MonoTakeLastOne(reactor.core.publisher.Flux<? extends T>, T);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/MonoFromFluxOperator."<init>":(Lreactor/core/publisher/Flux;)V
       5: aload_0
       6: aload_2
       7: ldc           #3                  // String defaultValue
       9: invokestatic  #4                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      12: putfield      #2                  // Field defaultValue:Ljava/lang/Object;
      15: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: getfield      #5                  // Field source:Lreactor/core/publisher/Flux;
       4: new           #6                  // class reactor/core/publisher/MonoTakeLastOne$TakeLastOneSubscriber
       7: dup
       8: aload_1
       9: aload_0
      10: getfield      #2                  // Field defaultValue:Ljava/lang/Object;
      13: iconst_1
      14: invokespecial #7                  // Method reactor/core/publisher/MonoTakeLastOne$TakeLastOneSubscriber."<init>":(Lreactor/core/CoreSubscriber;Ljava/lang/Object;Z)V
      17: invokevirtual #8                  // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      20: return
}
