Compiled from "FluxReplay.java"
final class reactor.core.publisher.FluxReplay<T> extends reactor.core.publisher.ConnectableFlux<T> implements reactor.core.Scannable, reactor.core.Fuseable {
  final org.reactivestreams.Publisher<T> source;

  final int history;

  final long ttl;

  final reactor.core.scheduler.Scheduler scheduler;

  volatile reactor.core.publisher.FluxReplay$ReplaySubscriber<T> connection;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxReplay, reactor.core.publisher.FluxReplay$ReplaySubscriber> CONNECTION;

  reactor.core.publisher.FluxReplay(org.reactivestreams.Publisher<T>, int, long, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/ConnectableFlux."<init>":()V
       4: aload_0
       5: aload_1
       6: ldc           #2                  // String source
       8: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      11: checkcast     #4                  // class org/reactivestreams/Publisher
      14: putfield      #5                  // Field source:Lorg/reactivestreams/Publisher;
      17: aload_0
      18: iload_2
      19: putfield      #6                  // Field history:I
      22: iload_2
      23: ifge          53
      26: new           #7                  // class java/lang/IllegalArgumentException
      29: dup
      30: new           #8                  // class java/lang/StringBuilder
      33: dup
      34: invokespecial #9                  // Method java/lang/StringBuilder."<init>":()V
      37: ldc           #10                 // String History cannot be negative :
      39: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      42: iload_2
      43: invokevirtual #12                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      46: invokevirtual #13                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      49: invokespecial #14                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      52: athrow
      53: aload         5
      55: ifnull        91
      58: lload_3
      59: lconst_0
      60: lcmp
      61: ifge          91
      64: new           #7                  // class java/lang/IllegalArgumentException
      67: dup
      68: new           #8                  // class java/lang/StringBuilder
      71: dup
      72: invokespecial #9                  // Method java/lang/StringBuilder."<init>":()V
      75: ldc           #15                 // String TTL cannot be negative :
      77: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      80: lload_3
      81: invokevirtual #16                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      84: invokevirtual #13                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      87: invokespecial #14                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      90: athrow
      91: aload_0
      92: lload_3
      93: putfield      #17                 // Field ttl:J
      96: aload_0
      97: aload         5
      99: putfield      #18                 // Field scheduler:Lreactor/core/scheduler/Scheduler;
     102: return

  public int getPrefetch();
    Code:
       0: aload_0
       1: getfield      #6                  // Field history:I
       4: ireturn

  reactor.core.publisher.FluxReplay$ReplaySubscriber<T> newState();
    Code:
       0: aload_0
       1: getfield      #18                 // Field scheduler:Lreactor/core/scheduler/Scheduler;
       4: ifnull        35
       7: new           #19                 // class reactor/core/publisher/FluxReplay$ReplaySubscriber
      10: dup
      11: new           #20                 // class reactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer
      14: dup
      15: aload_0
      16: getfield      #6                  // Field history:I
      19: aload_0
      20: getfield      #17                 // Field ttl:J
      23: aload_0
      24: getfield      #18                 // Field scheduler:Lreactor/core/scheduler/Scheduler;
      27: invokespecial #21                 // Method reactor/core/publisher/FluxReplay$SizeAndTimeBoundReplayBuffer."<init>":(IJLreactor/core/scheduler/Scheduler;)V
      30: aload_0
      31: invokespecial #22                 // Method reactor/core/publisher/FluxReplay$ReplaySubscriber."<init>":(Lreactor/core/publisher/FluxReplay$ReplayBuffer;Lreactor/core/publisher/FluxReplay;)V
      34: areturn
      35: aload_0
      36: getfield      #6                  // Field history:I
      39: ldc           #24                 // int 2147483647
      41: if_icmpeq     64
      44: new           #19                 // class reactor/core/publisher/FluxReplay$ReplaySubscriber
      47: dup
      48: new           #25                 // class reactor/core/publisher/FluxReplay$SizeBoundReplayBuffer
      51: dup
      52: aload_0
      53: getfield      #6                  // Field history:I
      56: invokespecial #26                 // Method reactor/core/publisher/FluxReplay$SizeBoundReplayBuffer."<init>":(I)V
      59: aload_0
      60: invokespecial #22                 // Method reactor/core/publisher/FluxReplay$ReplaySubscriber."<init>":(Lreactor/core/publisher/FluxReplay$ReplayBuffer;Lreactor/core/publisher/FluxReplay;)V
      63: areturn
      64: new           #19                 // class reactor/core/publisher/FluxReplay$ReplaySubscriber
      67: dup
      68: new           #27                 // class reactor/core/publisher/FluxReplay$UnboundedReplayBuffer
      71: dup
      72: getstatic     #28                 // Field reactor/util/concurrent/Queues.SMALL_BUFFER_SIZE:I
      75: invokespecial #29                 // Method reactor/core/publisher/FluxReplay$UnboundedReplayBuffer."<init>":(I)V
      78: aload_0
      79: invokespecial #22                 // Method reactor/core/publisher/FluxReplay$ReplaySubscriber."<init>":(Lreactor/core/publisher/FluxReplay$ReplayBuffer;Lreactor/core/publisher/FluxReplay;)V
      82: areturn

  public void connect(java.util.function.Consumer<? super reactor.core.Disposable>);
    Code:
       0: aload_0
       1: getfield      #30                 // Field connection:Lreactor/core/publisher/FluxReplay$ReplaySubscriber;
       4: astore_3
       5: aload_3
       6: ifnonnull     34
       9: aload_0
      10: invokevirtual #31                 // Method newState:()Lreactor/core/publisher/FluxReplay$ReplaySubscriber;
      13: astore        4
      15: getstatic     #32                 // Field CONNECTION:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      18: aload_0
      19: aconst_null
      20: aload         4
      22: invokevirtual #33                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      25: ifne          31
      28: goto          0
      31: aload         4
      33: astore_3
      34: aload_3
      35: invokevirtual #34                 // Method reactor/core/publisher/FluxReplay$ReplaySubscriber.tryConnect:()Z
      38: istore_2
      39: goto          42
      42: aload_1
      43: aload_3
      44: invokeinterface #35,  2           // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
      49: iload_2
      50: ifeq          63
      53: aload_0
      54: getfield      #5                  // Field source:Lorg/reactivestreams/Publisher;
      57: aload_3
      58: invokeinterface #36,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
      63: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: new           #37                 // class reactor/core/publisher/FluxReplay$ReplayInner
       3: dup
       4: aload_1
       5: invokespecial #38                 // Method reactor/core/publisher/FluxReplay$ReplayInner."<init>":(Lreactor/core/CoreSubscriber;)V
       8: astore_2
       9: aload_0
      10: getfield      #30                 // Field connection:Lreactor/core/publisher/FluxReplay$ReplaySubscriber;
      13: astore_3
      14: aload_0
      15: getfield      #18                 // Field scheduler:Lreactor/core/scheduler/Scheduler;
      18: ifnull        76
      21: aload_3
      22: ifnull        76
      25: aload_3
      26: getfield      #39                 // Field reactor/core/publisher/FluxReplay$ReplaySubscriber.buffer:Lreactor/core/publisher/FluxReplay$ReplayBuffer;
      29: invokeinterface #40,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplayBuffer.isExpired:()Z
      34: ifeq          76
      37: aload_0
      38: invokevirtual #31                 // Method newState:()Lreactor/core/publisher/FluxReplay$ReplaySubscriber;
      41: astore        4
      43: getstatic     #32                 // Field CONNECTION:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      46: aload_0
      47: aload_3
      48: aload         4
      50: invokevirtual #33                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      53: ifne          59
      56: goto          9
      59: aload         4
      61: astore_3
      62: aload_0
      63: getfield      #5                  // Field source:Lorg/reactivestreams/Publisher;
      66: aload         4
      68: invokeinterface #36,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
      73: goto          105
      76: aload_3
      77: ifnonnull     105
      80: aload_0
      81: invokevirtual #31                 // Method newState:()Lreactor/core/publisher/FluxReplay$ReplaySubscriber;
      84: astore        4
      86: getstatic     #32                 // Field CONNECTION:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      89: aload_0
      90: aconst_null
      91: aload         4
      93: invokevirtual #33                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      96: ifne          102
      99: goto          9
     102: aload         4
     104: astore_3
     105: aload_3
     106: aload_2
     107: invokevirtual #41                 // Method reactor/core/publisher/FluxReplay$ReplaySubscriber.add:(Lreactor/core/publisher/FluxReplay$ReplayInner;)Z
     110: pop
     111: aload_1
     112: aload_2
     113: invokeinterface #42,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
     118: aload_2
     119: invokevirtual #43                 // Method reactor/core/publisher/FluxReplay$ReplayInner.isCancelled:()Z
     122: ifeq          130
     125: aload_3
     126: aload_2
     127: invokevirtual #44                 // Method reactor/core/publisher/FluxReplay$ReplaySubscriber.remove:(Lreactor/core/publisher/FluxReplay$ReplaySubscription;)V
     130: aload_2
     131: aload_3
     132: putfield      #45                 // Field reactor/core/publisher/FluxReplay$ReplayInner.parent:Lreactor/core/publisher/FluxReplay$ReplaySubscriber;
     135: aload_3
     136: getfield      #39                 // Field reactor/core/publisher/FluxReplay$ReplaySubscriber.buffer:Lreactor/core/publisher/FluxReplay$ReplayBuffer;
     139: aload_2
     140: invokeinterface #46,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplayBuffer.replay:(Lreactor/core/publisher/FluxReplay$ReplaySubscription;)V
     145: goto          148
     148: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #47                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
       4: if_acmpne     15
       7: aload_0
       8: invokevirtual #48                 // Method getPrefetch:()I
      11: invokestatic  #49                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      14: areturn
      15: aload_1
      16: getstatic     #50                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
      19: if_acmpne     27
      22: aload_0
      23: getfield      #5                  // Field source:Lorg/reactivestreams/Publisher;
      26: areturn
      27: aload_1
      28: getstatic     #51                 // Field reactor/core/Scannable$Attr.RUN_ON:Lreactor/core/Scannable$Attr;
      31: if_acmpne     39
      34: aload_0
      35: getfield      #18                 // Field scheduler:Lreactor/core/scheduler/Scheduler;
      38: areturn
      39: aconst_null
      40: areturn

  static {};
    Code:
       0: ldc           #52                 // class reactor/core/publisher/FluxReplay
       2: ldc           #19                 // class reactor/core/publisher/FluxReplay$ReplaySubscriber
       4: ldc           #53                 // String connection
       6: invokestatic  #54                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #32                 // Field CONNECTION:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: return
}
