Compiled from "FluxBuffer.java"
final class reactor.core.publisher.FluxBuffer$BufferOverlappingSubscriber<T, C extends java.util.Collection<? super T>> extends java.util.ArrayDeque<C> implements java.util.function.BooleanSupplier, reactor.core.publisher.InnerOperator<T, C> {
  final reactor.core.CoreSubscriber<? super C> actual;

  final java.util.function.Supplier<C> bufferSupplier;

  final int size;

  final int skip;

  org.reactivestreams.Subscription s;

  boolean done;

  long index;

  volatile boolean cancelled;

  long produced;

  volatile int once;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxBuffer$BufferOverlappingSubscriber> ONCE;

  volatile long requested;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.FluxBuffer$BufferOverlappingSubscriber> REQUESTED;

  reactor.core.publisher.FluxBuffer$BufferOverlappingSubscriber(reactor.core.CoreSubscriber<? super C>, int, int, java.util.function.Supplier<C>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/util/ArrayDeque."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: iload_2
      11: putfield      #3                  // Field size:I
      14: aload_0
      15: iload_3
      16: putfield      #4                  // Field skip:I
      19: aload_0
      20: aload         4
      22: putfield      #5                  // Field bufferSupplier:Ljava/util/function/Supplier;
      25: return

  public boolean getAsBoolean();
    Code:
       0: aload_0
       1: getfield      #6                  // Field cancelled:Z
       4: ireturn

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #7                  // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifne          8
       7: return
       8: lload_1
       9: aload_0
      10: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      13: aload_0
      14: getstatic     #8                  // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      17: aload_0
      18: aload_0
      19: invokestatic  #9                  // Method reactor/core/publisher/DrainUtils.postCompleteRequest:(JLorg/reactivestreams/Subscriber;Ljava/util/Queue;Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;Ljava/util/function/BooleanSupplier;)Z
      22: ifeq          26
      25: return
      26: aload_0
      27: getfield      #10                 // Field once:I
      30: ifne          82
      33: getstatic     #11                 // Field ONCE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      36: aload_0
      37: iconst_0
      38: iconst_1
      39: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      42: ifeq          82
      45: aload_0
      46: getfield      #4                  // Field skip:I
      49: i2l
      50: lload_1
      51: lconst_1
      52: lsub
      53: invokestatic  #13                 // Method reactor/core/publisher/Operators.multiplyCap:(JJ)J
      56: lstore_3
      57: aload_0
      58: getfield      #3                  // Field size:I
      61: i2l
      62: lload_3
      63: invokestatic  #14                 // Method reactor/core/publisher/Operators.addCap:(JJ)J
      66: lstore        5
      68: aload_0
      69: getfield      #15                 // Field s:Lorg/reactivestreams/Subscription;
      72: lload         5
      74: invokeinterface #16,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      79: goto          102
      82: aload_0
      83: getfield      #4                  // Field skip:I
      86: i2l
      87: lload_1
      88: invokestatic  #13                 // Method reactor/core/publisher/Operators.multiplyCap:(JJ)J
      91: lstore_3
      92: aload_0
      93: getfield      #15                 // Field s:Lorg/reactivestreams/Subscription;
      96: lload_3
      97: invokeinterface #16,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     102: return

  public void cancel();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #6                  // Field cancelled:Z
       5: aload_0
       6: getfield      #15                 // Field s:Lorg/reactivestreams/Subscription;
       9: invokeinterface #17,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      14: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #15                 // Field s:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #18                 // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          26
      11: aload_0
      12: aload_1
      13: putfield      #15                 // Field s:Lorg/reactivestreams/Subscription;
      16: aload_0
      17: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      20: aload_0
      21: invokeinterface #19,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      26: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #20                 // Field done:Z
       4: ifeq          21
       7: aload_1
       8: aload_0
       9: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      12: invokeinterface #21,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #22                 // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      20: return
      21: aload_0
      22: getfield      #23                 // Field index:J
      25: lstore_2
      26: lload_2
      27: aload_0
      28: getfield      #4                  // Field skip:I
      31: i2l
      32: lrem
      33: lconst_0
      34: lcmp
      35: ifne          93
      38: aload_0
      39: getfield      #5                  // Field bufferSupplier:Ljava/util/function/Supplier;
      42: invokeinterface #24,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      47: ldc           #25                 // String The bufferSupplier returned a null buffer
      49: invokestatic  #26                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      52: checkcast     #27                 // class java/util/Collection
      55: astore        4
      57: goto          86
      60: astore        5
      62: aload_0
      63: aload_0
      64: getfield      #15                 // Field s:Lorg/reactivestreams/Subscription;
      67: aload         5
      69: aload_1
      70: aload_0
      71: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      74: invokeinterface #21,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      79: invokestatic  #29                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      82: invokevirtual #30                 // Method onError:(Ljava/lang/Throwable;)V
      85: return
      86: aload_0
      87: aload         4
      89: invokevirtual #31                 // Method offer:(Ljava/lang/Object;)Z
      92: pop
      93: aload_0
      94: invokevirtual #32                 // Method peek:()Ljava/lang/Object;
      97: checkcast     #27                 // class java/util/Collection
     100: astore        4
     102: aload         4
     104: ifnull        158
     107: aload         4
     109: invokeinterface #33,  1           // InterfaceMethod java/util/Collection.size:()I
     114: iconst_1
     115: iadd
     116: aload_0
     117: getfield      #3                  // Field size:I
     120: if_icmpne     158
     123: aload_0
     124: invokevirtual #34                 // Method poll:()Ljava/lang/Object;
     127: pop
     128: aload         4
     130: aload_1
     131: invokeinterface #35,  2           // InterfaceMethod java/util/Collection.add:(Ljava/lang/Object;)Z
     136: pop
     137: aload_0
     138: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     141: aload         4
     143: invokeinterface #36,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
     148: aload_0
     149: dup
     150: getfield      #37                 // Field produced:J
     153: lconst_1
     154: ladd
     155: putfield      #37                 // Field produced:J
     158: aload_0
     159: invokevirtual #38                 // Method iterator:()Ljava/util/Iterator;
     162: astore        5
     164: aload         5
     166: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     171: ifeq          198
     174: aload         5
     176: invokeinterface #40,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     181: checkcast     #27                 // class java/util/Collection
     184: astore        6
     186: aload         6
     188: aload_1
     189: invokeinterface #35,  2           // InterfaceMethod java/util/Collection.add:(Ljava/lang/Object;)Z
     194: pop
     195: goto          164
     198: aload_0
     199: lload_2
     200: lconst_1
     201: ladd
     202: putfield      #23                 // Field index:J
     205: return
    Exception table:
       from    to  target type
          38    57    60   Class java/lang/Throwable

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #20                 // Field done:Z
       4: ifeq          21
       7: aload_1
       8: aload_0
       9: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      12: invokeinterface #21,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #41                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      20: return
      21: aload_0
      22: iconst_1
      23: putfield      #20                 // Field done:Z
      26: aload_0
      27: invokevirtual #42                 // Method clear:()V
      30: aload_0
      31: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      34: aload_1
      35: invokeinterface #43,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      40: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #20                 // Field done:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #20                 // Field done:Z
      13: aload_0
      14: getfield      #37                 // Field produced:J
      17: lstore_1
      18: lload_1
      19: lconst_0
      20: lcmp
      21: ifeq          33
      24: getstatic     #8                  // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      27: aload_0
      28: lload_1
      29: invokestatic  #44                 // Method reactor/core/publisher/Operators.produced:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
      32: pop2
      33: aload_0
      34: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      37: aload_0
      38: getstatic     #8                  // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      41: aload_0
      42: aload_0
      43: invokestatic  #45                 // Method reactor/core/publisher/DrainUtils.postComplete:(Lreactor/core/CoreSubscriber;Ljava/util/Queue;Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;Ljava/util/function/BooleanSupplier;)V
      46: return

  public reactor.core.CoreSubscriber<? super C> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #46                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #15                 // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #47                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      16: if_acmpne     27
      19: aload_0
      20: getfield      #20                 // Field done:Z
      23: invokestatic  #48                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      26: areturn
      27: aload_1
      28: getstatic     #49                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      31: if_acmpne     42
      34: aload_0
      35: getfield      #6                  // Field cancelled:Z
      38: invokestatic  #48                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      41: areturn
      42: aload_1
      43: getstatic     #50                 // Field reactor/core/Scannable$Attr.CAPACITY:Lreactor/core/Scannable$Attr;
      46: if_acmpne     62
      49: aload_0
      50: invokevirtual #51                 // Method size:()I
      53: aload_0
      54: getfield      #3                  // Field size:I
      57: imul
      58: invokestatic  #52                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      61: areturn
      62: aload_1
      63: getstatic     #53                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      66: if_acmpne     92
      69: aload_0
      70: invokevirtual #54                 // Method stream:()Ljava/util/stream/Stream;
      73: invokedynamic #55,  0             // InvokeDynamic #0:applyAsInt:()Ljava/util/function/ToIntFunction;
      78: invokeinterface #56,  2           // InterfaceMethod java/util/stream/Stream.mapToInt:(Ljava/util/function/ToIntFunction;)Ljava/util/stream/IntStream;
      83: invokeinterface #57,  1           // InterfaceMethod java/util/stream/IntStream.sum:()I
      88: invokestatic  #52                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      91: areturn
      92: aload_1
      93: getstatic     #58                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      96: if_acmpne     105
      99: ldc           #60                 // int 2147483647
     101: invokestatic  #52                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     104: areturn
     105: aload_1
     106: getstatic     #61                 // Field reactor/core/Scannable$Attr.REQUESTED_FROM_DOWNSTREAM:Lreactor/core/Scannable$Attr;
     109: if_acmpne     120
     112: aload_0
     113: getfield      #62                 // Field requested:J
     116: invokestatic  #63                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     119: areturn
     120: aload_0
     121: aload_1
     122: invokespecial #64                 // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
     125: areturn

  static {};
    Code:
       0: ldc           #65                 // class reactor/core/publisher/FluxBuffer$BufferOverlappingSubscriber
       2: ldc           #66                 // String once
       4: invokestatic  #67                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #11                 // Field ONCE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: ldc           #65                 // class reactor/core/publisher/FluxBuffer$BufferOverlappingSubscriber
      12: ldc           #68                 // String requested
      14: invokestatic  #69                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      17: putstatic     #8                  // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      20: return
}
