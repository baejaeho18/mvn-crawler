Compiled from "FluxWindowTimeout.java"
final class reactor.core.publisher.FluxWindowTimeout$WindowTimeoutSubscriber<T> implements reactor.core.publisher.InnerOperator<T, reactor.core.publisher.Flux<T>> {
  final reactor.core.CoreSubscriber<? super reactor.core.publisher.Flux<T>> actual;

  final long timespan;

  final reactor.core.scheduler.Scheduler scheduler;

  final int maxSize;

  final reactor.core.scheduler.Scheduler$Worker worker;

  final java.util.Queue<java.lang.Object> queue;

  java.lang.Throwable error;

  volatile boolean done;

  volatile boolean cancelled;

  volatile long requested;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.FluxWindowTimeout$WindowTimeoutSubscriber> REQUESTED;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxWindowTimeout$WindowTimeoutSubscriber> WIP;

  int count;

  long producerIndex;

  org.reactivestreams.Subscription s;

  reactor.core.publisher.UnicastProcessor<T> window;

  volatile boolean terminated;

  volatile reactor.core.Disposable timer;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxWindowTimeout$WindowTimeoutSubscriber, reactor.core.Disposable> TIMER;

  reactor.core.publisher.FluxWindowTimeout$WindowTimeoutSubscriber(reactor.core.CoreSubscriber<? super reactor.core.publisher.Flux<T>>, int, long, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: invokestatic  #3                  // Method reactor/util/concurrent/Queues.unboundedMultiproducer:()Ljava/util/function/Supplier;
      13: invokeinterface #4,  1            // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      18: checkcast     #5                  // class java/util/Queue
      21: putfield      #6                  // Field queue:Ljava/util/Queue;
      24: aload_0
      25: lload_3
      26: putfield      #7                  // Field timespan:J
      29: aload_0
      30: aload         5
      32: putfield      #8                  // Field scheduler:Lreactor/core/scheduler/Scheduler;
      35: aload_0
      36: iload_2
      37: putfield      #9                  // Field maxSize:I
      40: aload_0
      41: aload         5
      43: invokeinterface #10,  1           // InterfaceMethod reactor/core/scheduler/Scheduler.createWorker:()Lreactor/core/scheduler/Scheduler$Worker;
      48: putfield      #11                 // Field worker:Lreactor/core/scheduler/Scheduler$Worker;
      51: return

  public reactor.core.CoreSubscriber<? super reactor.core.publisher.Flux<T>> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public java.util.stream.Stream<? extends reactor.core.Scannable> inners();
    Code:
       0: aload_0
       1: getfield      #12                 // Field window:Lreactor/core/publisher/UnicastProcessor;
       4: astore_1
       5: aload_1
       6: ifnonnull     15
       9: invokestatic  #13                 // InterfaceMethod java/util/stream/Stream.empty:()Ljava/util/stream/Stream;
      12: goto          19
      15: aload_1
      16: invokestatic  #14                 // InterfaceMethod java/util/stream/Stream.of:(Ljava/lang/Object;)Ljava/util/stream/Stream;
      19: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #15                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #16                 // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #17                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      16: if_acmpne     27
      19: aload_0
      20: getfield      #18                 // Field cancelled:Z
      23: invokestatic  #19                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      26: areturn
      27: aload_1
      28: getstatic     #20                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      31: if_acmpne     42
      34: aload_0
      35: getfield      #21                 // Field done:Z
      38: invokestatic  #19                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      41: areturn
      42: aload_1
      43: getstatic     #22                 // Field reactor/core/Scannable$Attr.REQUESTED_FROM_DOWNSTREAM:Lreactor/core/Scannable$Attr;
      46: if_acmpne     57
      49: aload_0
      50: getfield      #23                 // Field requested:J
      53: invokestatic  #24                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      56: areturn
      57: aload_1
      58: getstatic     #25                 // Field reactor/core/Scannable$Attr.CAPACITY:Lreactor/core/Scannable$Attr;
      61: if_acmpne     72
      64: aload_0
      65: getfield      #9                  // Field maxSize:I
      68: invokestatic  #26                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      71: areturn
      72: aload_1
      73: getstatic     #27                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      76: if_acmpne     92
      79: aload_0
      80: getfield      #6                  // Field queue:Ljava/util/Queue;
      83: invokeinterface #28,  1           // InterfaceMethod java/util/Queue.size:()I
      88: invokestatic  #26                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      91: areturn
      92: aload_1
      93: getstatic     #29                 // Field reactor/core/Scannable$Attr.RUN_ON:Lreactor/core/Scannable$Attr;
      96: if_acmpne     104
      99: aload_0
     100: getfield      #11                 // Field worker:Lreactor/core/scheduler/Scheduler$Worker;
     103: areturn
     104: aload_0
     105: aload_1
     106: invokespecial #30                 // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
     109: areturn

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #16                 // Field s:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #31                 // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          131
      11: aload_0
      12: aload_1
      13: putfield      #16                 // Field s:Lorg/reactivestreams/Subscription;
      16: aload_0
      17: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      20: astore_2
      21: aload_2
      22: aload_0
      23: invokeinterface #32,  2           // InterfaceMethod org/reactivestreams/Subscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      28: aload_0
      29: getfield      #18                 // Field cancelled:Z
      32: ifeq          36
      35: return
      36: invokestatic  #33                 // Method reactor/core/publisher/UnicastProcessor.create:()Lreactor/core/publisher/UnicastProcessor;
      39: astore_3
      40: aload_0
      41: aload_3
      42: putfield      #12                 // Field window:Lreactor/core/publisher/UnicastProcessor;
      45: aload_0
      46: getfield      #23                 // Field requested:J
      49: lstore        4
      51: lload         4
      53: lconst_0
      54: lcmp
      55: ifeq          85
      58: aload_2
      59: aload_3
      60: invokeinterface #34,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
      65: lload         4
      67: ldc2_w        #36                 // long 9223372036854775807l
      70: lcmp
      71: ifeq          108
      74: getstatic     #38                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      77: aload_0
      78: invokevirtual #39                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.decrementAndGet:(Ljava/lang/Object;)J
      81: pop2
      82: goto          108
      85: aload_2
      86: aload_1
      87: invokestatic  #40                 // Method reactor/core/Exceptions.failWithOverflow:()Ljava/lang/IllegalStateException;
      90: aload_0
      91: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      94: invokeinterface #41,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      99: invokestatic  #42                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
     102: invokeinterface #43,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
     107: return
     108: getstatic     #44                 // Field TIMER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     111: aload_0
     112: aload_0
     113: invokevirtual #45                 // Method newPeriod:()Lreactor/core/Disposable;
     116: invokestatic  #46                 // Method reactor/core/publisher/OperatorDisposables.replace:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Lreactor/core/Disposable;)Z
     119: ifeq          131
     122: aload_1
     123: ldc2_w        #36                 // long 9223372036854775807l
     126: invokeinterface #47,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     131: return

  reactor.core.Disposable newPeriod();
    Code:
       0: aload_0
       1: getfield      #11                 // Field worker:Lreactor/core/scheduler/Scheduler$Worker;
       4: new           #48                 // class reactor/core/publisher/FluxWindowTimeout$WindowTimeoutSubscriber$ConsumerIndexHolder
       7: dup
       8: aload_0
       9: getfield      #49                 // Field producerIndex:J
      12: aload_0
      13: invokespecial #50                 // Method reactor/core/publisher/FluxWindowTimeout$WindowTimeoutSubscriber$ConsumerIndexHolder."<init>":(JLreactor/core/publisher/FluxWindowTimeout$WindowTimeoutSubscriber;)V
      16: aload_0
      17: getfield      #7                  // Field timespan:J
      20: aload_0
      21: getfield      #7                  // Field timespan:J
      24: getstatic     #51                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      27: invokeinterface #52,  7           // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lreactor/core/Disposable;
      32: areturn
      33: astore_1
      34: aload_0
      35: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      38: aload_1
      39: aload_0
      40: getfield      #16                 // Field s:Lorg/reactivestreams/Subscription;
      43: aconst_null
      44: aconst_null
      45: aload_0
      46: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      49: invokeinterface #41,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      54: invokestatic  #54                 // Method reactor/core/publisher/Operators.onRejectedExecution:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/RuntimeException;
      57: invokeinterface #55,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      62: invokestatic  #56                 // Method reactor/core/Disposables.disposed:()Lreactor/core/Disposable;
      65: areturn
    Exception table:
       from    to  target type
           0    32    33   Class java/lang/Exception

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #57                 // Field terminated:Z
       4: ifeq          8
       7: return
       8: getstatic     #58                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      11: aload_0
      12: invokevirtual #59                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.get:(Ljava/lang/Object;)I
      15: ifne          241
      18: getstatic     #58                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      21: aload_0
      22: iconst_0
      23: iconst_1
      24: invokevirtual #60                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      27: ifeq          241
      30: aload_0
      31: getfield      #12                 // Field window:Lreactor/core/publisher/UnicastProcessor;
      34: astore_2
      35: aload_2
      36: aload_1
      37: invokevirtual #61                 // Method reactor/core/publisher/UnicastProcessor.onNext:(Ljava/lang/Object;)V
      40: aload_0
      41: getfield      #62                 // Field count:I
      44: iconst_1
      45: iadd
      46: istore_3
      47: iload_3
      48: aload_0
      49: getfield      #9                  // Field maxSize:I
      52: if_icmplt     222
      55: aload_0
      56: dup
      57: getfield      #49                 // Field producerIndex:J
      60: lconst_1
      61: ladd
      62: putfield      #49                 // Field producerIndex:J
      65: aload_0
      66: iconst_0
      67: putfield      #62                 // Field count:I
      70: aload_2
      71: invokevirtual #63                 // Method reactor/core/publisher/UnicastProcessor.onComplete:()V
      74: aload_0
      75: getfield      #23                 // Field requested:J
      78: lstore        4
      80: lload         4
      82: lconst_0
      83: lcmp
      84: ifeq          166
      87: invokestatic  #33                 // Method reactor/core/publisher/UnicastProcessor.create:()Lreactor/core/publisher/UnicastProcessor;
      90: astore_2
      91: aload_0
      92: aload_2
      93: putfield      #12                 // Field window:Lreactor/core/publisher/UnicastProcessor;
      96: aload_0
      97: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     100: aload_2
     101: invokeinterface #64,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
     106: lload         4
     108: ldc2_w        #36                 // long 9223372036854775807l
     111: lcmp
     112: ifeq          123
     115: getstatic     #38                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
     118: aload_0
     119: invokevirtual #39                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.decrementAndGet:(Ljava/lang/Object;)J
     122: pop2
     123: aload_0
     124: getfield      #65                 // Field timer:Lreactor/core/Disposable;
     127: astore        6
     129: aload         6
     131: invokeinterface #66,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
     136: aload_0
     137: invokevirtual #45                 // Method newPeriod:()Lreactor/core/Disposable;
     140: astore        7
     142: getstatic     #44                 // Field TIMER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     145: aload_0
     146: aload         6
     148: aload         7
     150: invokevirtual #67                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
     153: ifne          163
     156: aload         7
     158: invokeinterface #66,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
     163: goto          219
     166: aload_0
     167: aconst_null
     168: putfield      #12                 // Field window:Lreactor/core/publisher/UnicastProcessor;
     171: aload_0
     172: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     175: aload_0
     176: getfield      #16                 // Field s:Lorg/reactivestreams/Subscription;
     179: invokestatic  #40                 // Method reactor/core/Exceptions.failWithOverflow:()Ljava/lang/IllegalStateException;
     182: aload_1
     183: aload_0
     184: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     187: invokeinterface #41,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
     192: invokestatic  #68                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
     195: invokeinterface #55,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
     200: aload_0
     201: getfield      #65                 // Field timer:Lreactor/core/Disposable;
     204: invokeinterface #66,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
     209: aload_0
     210: getfield      #11                 // Field worker:Lreactor/core/scheduler/Scheduler$Worker;
     213: invokeinterface #69,  1           // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.dispose:()V
     218: return
     219: goto          227
     222: aload_0
     223: iload_3
     224: putfield      #62                 // Field count:I
     227: getstatic     #58                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     230: aload_0
     231: invokevirtual #70                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
     234: ifne          238
     237: return
     238: goto          260
     241: aload_0
     242: getfield      #6                  // Field queue:Ljava/util/Queue;
     245: aload_1
     246: invokeinterface #71,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
     251: pop
     252: aload_0
     253: invokevirtual #72                 // Method enter:()Z
     256: ifne          260
     259: return
     260: aload_0
     261: invokevirtual #73                 // Method drainLoop:()V
     264: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #74                 // Field error:Ljava/lang/Throwable;
       5: aload_0
       6: iconst_1
       7: putfield      #21                 // Field done:Z
      10: aload_0
      11: invokevirtual #72                 // Method enter:()Z
      14: ifeq          21
      17: aload_0
      18: invokevirtual #73                 // Method drainLoop:()V
      21: aload_0
      22: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      25: aload_1
      26: invokeinterface #55,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      31: aload_0
      32: getfield      #65                 // Field timer:Lreactor/core/Disposable;
      35: invokeinterface #66,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
      40: aload_0
      41: getfield      #11                 // Field worker:Lreactor/core/scheduler/Scheduler$Worker;
      44: invokeinterface #69,  1           // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.dispose:()V
      49: return

  public void onComplete();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #21                 // Field done:Z
       5: aload_0
       6: invokevirtual #72                 // Method enter:()Z
       9: ifeq          16
      12: aload_0
      13: invokevirtual #73                 // Method drainLoop:()V
      16: aload_0
      17: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      20: invokeinterface #75,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      25: aload_0
      26: getfield      #65                 // Field timer:Lreactor/core/Disposable;
      29: invokeinterface #66,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
      34: aload_0
      35: getfield      #11                 // Field worker:Lreactor/core/scheduler/Scheduler$Worker;
      38: invokeinterface #69,  1           // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.dispose:()V
      43: return

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #76                 // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          16
       7: getstatic     #38                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      10: aload_0
      11: lload_1
      12: invokestatic  #77                 // Method reactor/core/publisher/Operators.addCap:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
      15: pop2
      16: return

  public void cancel();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #18                 // Field cancelled:Z
       5: return

  void drainLoop();
    Code:
       0: aload_0
       1: getfield      #6                  // Field queue:Ljava/util/Queue;
       4: astore_1
       5: aload_0
       6: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: astore_2
      10: aload_0
      11: getfield      #12                 // Field window:Lreactor/core/publisher/UnicastProcessor;
      14: astore_3
      15: iconst_1
      16: istore        4
      18: aload_0
      19: getfield      #57                 // Field terminated:Z
      22: ifeq          59
      25: aload_0
      26: getfield      #16                 // Field s:Lorg/reactivestreams/Subscription;
      29: invokeinterface #78,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      34: aload_1
      35: invokeinterface #79,  1           // InterfaceMethod java/util/Queue.clear:()V
      40: aload_0
      41: getfield      #65                 // Field timer:Lreactor/core/Disposable;
      44: invokeinterface #66,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
      49: aload_0
      50: getfield      #11                 // Field worker:Lreactor/core/scheduler/Scheduler$Worker;
      53: invokeinterface #69,  1           // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.dispose:()V
      58: return
      59: aload_0
      60: getfield      #21                 // Field done:Z
      63: istore        5
      65: aload_1
      66: invokeinterface #80,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
      71: astore        6
      73: aload         6
      75: ifnonnull     82
      78: iconst_1
      79: goto          83
      82: iconst_0
      83: istore        7
      85: aload         6
      87: instanceof    #48                 // class reactor/core/publisher/FluxWindowTimeout$WindowTimeoutSubscriber$ConsumerIndexHolder
      90: istore        8
      92: iload         5
      94: ifeq          161
      97: iload         7
      99: ifne          107
     102: iload         8
     104: ifeq          161
     107: aload_0
     108: aconst_null
     109: putfield      #12                 // Field window:Lreactor/core/publisher/UnicastProcessor;
     112: aload_1
     113: invokeinterface #79,  1           // InterfaceMethod java/util/Queue.clear:()V
     118: aload_0
     119: getfield      #74                 // Field error:Ljava/lang/Throwable;
     122: astore        9
     124: aload         9
     126: ifnull        138
     129: aload_3
     130: aload         9
     132: invokevirtual #81                 // Method reactor/core/publisher/UnicastProcessor.onError:(Ljava/lang/Throwable;)V
     135: goto          142
     138: aload_3
     139: invokevirtual #63                 // Method reactor/core/publisher/UnicastProcessor.onComplete:()V
     142: aload_0
     143: getfield      #65                 // Field timer:Lreactor/core/Disposable;
     146: invokeinterface #66,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
     151: aload_0
     152: getfield      #11                 // Field worker:Lreactor/core/scheduler/Scheduler$Worker;
     155: invokeinterface #69,  1           // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.dispose:()V
     160: return
     161: iload         7
     163: ifeq          169
     166: goto          487
     169: iload         8
     171: ifeq          290
     174: aload_3
     175: invokevirtual #63                 // Method reactor/core/publisher/UnicastProcessor.onComplete:()V
     178: aload_0
     179: iconst_0
     180: putfield      #62                 // Field count:I
     183: invokestatic  #33                 // Method reactor/core/publisher/UnicastProcessor.create:()Lreactor/core/publisher/UnicastProcessor;
     186: astore_3
     187: aload_0
     188: aload_3
     189: putfield      #12                 // Field window:Lreactor/core/publisher/UnicastProcessor;
     192: aload_0
     193: getfield      #23                 // Field requested:J
     196: lstore        9
     198: lload         9
     200: lconst_0
     201: lcmp
     202: ifeq          232
     205: aload_2
     206: aload_3
     207: invokeinterface #34,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
     212: lload         9
     214: ldc2_w        #36                 // long 9223372036854775807l
     217: lcmp
     218: ifeq          18
     221: getstatic     #38                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
     224: aload_0
     225: invokevirtual #39                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.decrementAndGet:(Ljava/lang/Object;)J
     228: pop2
     229: goto          18
     232: aload_0
     233: aconst_null
     234: putfield      #12                 // Field window:Lreactor/core/publisher/UnicastProcessor;
     237: aload_0
     238: getfield      #6                  // Field queue:Ljava/util/Queue;
     241: invokeinterface #79,  1           // InterfaceMethod java/util/Queue.clear:()V
     246: aload_2
     247: aload_0
     248: getfield      #16                 // Field s:Lorg/reactivestreams/Subscription;
     251: invokestatic  #40                 // Method reactor/core/Exceptions.failWithOverflow:()Ljava/lang/IllegalStateException;
     254: aload_0
     255: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     258: invokeinterface #41,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
     263: invokestatic  #42                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
     266: invokeinterface #43,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
     271: aload_0
     272: getfield      #65                 // Field timer:Lreactor/core/Disposable;
     275: invokeinterface #66,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
     280: aload_0
     281: getfield      #11                 // Field worker:Lreactor/core/scheduler/Scheduler$Worker;
     284: invokeinterface #69,  1           // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.dispose:()V
     289: return
     290: aload_3
     291: aload         6
     293: invokevirtual #61                 // Method reactor/core/publisher/UnicastProcessor.onNext:(Ljava/lang/Object;)V
     296: aload_0
     297: getfield      #62                 // Field count:I
     300: iconst_1
     301: iadd
     302: istore        9
     304: iload         9
     306: aload_0
     307: getfield      #9                  // Field maxSize:I
     310: if_icmplt     478
     313: aload_0
     314: dup
     315: getfield      #49                 // Field producerIndex:J
     318: lconst_1
     319: ladd
     320: putfield      #49                 // Field producerIndex:J
     323: aload_0
     324: iconst_0
     325: putfield      #62                 // Field count:I
     328: aload_3
     329: invokevirtual #63                 // Method reactor/core/publisher/UnicastProcessor.onComplete:()V
     332: aload_0
     333: getfield      #23                 // Field requested:J
     336: lstore        10
     338: lload         10
     340: lconst_0
     341: lcmp
     342: ifeq          424
     345: invokestatic  #33                 // Method reactor/core/publisher/UnicastProcessor.create:()Lreactor/core/publisher/UnicastProcessor;
     348: astore_3
     349: aload_0
     350: aload_3
     351: putfield      #12                 // Field window:Lreactor/core/publisher/UnicastProcessor;
     354: aload_0
     355: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     358: aload_3
     359: invokeinterface #64,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
     364: lload         10
     366: ldc2_w        #36                 // long 9223372036854775807l
     369: lcmp
     370: ifeq          381
     373: getstatic     #38                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
     376: aload_0
     377: invokevirtual #39                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.decrementAndGet:(Ljava/lang/Object;)J
     380: pop2
     381: aload_0
     382: getfield      #65                 // Field timer:Lreactor/core/Disposable;
     385: astore        12
     387: aload         12
     389: invokeinterface #66,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
     394: aload_0
     395: invokevirtual #45                 // Method newPeriod:()Lreactor/core/Disposable;
     398: astore        13
     400: getstatic     #44                 // Field TIMER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     403: aload_0
     404: aload         12
     406: aload         13
     408: invokevirtual #67                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
     411: ifne          421
     414: aload         13
     416: invokeinterface #66,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
     421: goto          475
     424: aload_0
     425: aconst_null
     426: putfield      #12                 // Field window:Lreactor/core/publisher/UnicastProcessor;
     429: aload_2
     430: aload_0
     431: getfield      #16                 // Field s:Lorg/reactivestreams/Subscription;
     434: invokestatic  #40                 // Method reactor/core/Exceptions.failWithOverflow:()Ljava/lang/IllegalStateException;
     437: aload         6
     439: aload_0
     440: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     443: invokeinterface #41,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
     448: invokestatic  #68                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
     451: invokeinterface #43,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
     456: aload_0
     457: getfield      #65                 // Field timer:Lreactor/core/Disposable;
     460: invokeinterface #66,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
     465: aload_0
     466: getfield      #11                 // Field worker:Lreactor/core/scheduler/Scheduler$Worker;
     469: invokeinterface #69,  1           // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.dispose:()V
     474: return
     475: goto          484
     478: aload_0
     479: iload         9
     481: putfield      #62                 // Field count:I
     484: goto          18
     487: getstatic     #58                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     490: aload_0
     491: iload         4
     493: ineg
     494: invokevirtual #82                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
     497: istore        4
     499: iload         4
     501: ifne          18
     504: goto          507
     507: return

  boolean enter();
    Code:
       0: getstatic     #58                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #83                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifne          14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  static {};
    Code:
       0: ldc           #84                 // class reactor/core/publisher/FluxWindowTimeout$WindowTimeoutSubscriber
       2: ldc           #85                 // String requested
       4: invokestatic  #86                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
       7: putstatic     #38                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      10: ldc           #84                 // class reactor/core/publisher/FluxWindowTimeout$WindowTimeoutSubscriber
      12: ldc           #87                 // String wip
      14: invokestatic  #88                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      17: putstatic     #58                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      20: ldc           #84                 // class reactor/core/publisher/FluxWindowTimeout$WindowTimeoutSubscriber
      22: ldc           #89                 // class reactor/core/Disposable
      24: ldc           #90                 // String timer
      26: invokestatic  #91                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      29: putstatic     #44                 // Field TIMER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      32: return
}
