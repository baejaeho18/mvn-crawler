Compiled from "MonoOnErrorResume.java"
final class reactor.core.publisher.MonoOnErrorResume<T> extends reactor.core.publisher.MonoOperator<T, T> {
  final java.util.function.Function<? super java.lang.Throwable, ? extends org.reactivestreams.Publisher<? extends T>> nextFactory;

  reactor.core.publisher.MonoOnErrorResume(reactor.core.publisher.Mono<? extends T>, java.util.function.Function<? super java.lang.Throwable, ? extends reactor.core.publisher.Mono<? extends T>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/MonoOperator."<init>":(Lreactor/core/publisher/Mono;)V
       5: aload_0
       6: aload_2
       7: ldc           #2                  // String nextFactory
       9: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      12: checkcast     #4                  // class java/util/function/Function
      15: putfield      #5                  // Field nextFactory:Ljava/util/function/Function;
      18: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: getfield      #6                  // Field source:Lreactor/core/publisher/Mono;
       4: new           #7                  // class reactor/core/publisher/FluxOnErrorResume$ResumeSubscriber
       7: dup
       8: aload_1
       9: aload_0
      10: getfield      #5                  // Field nextFactory:Ljava/util/function/Function;
      13: invokespecial #8                  // Method reactor/core/publisher/FluxOnErrorResume$ResumeSubscriber."<init>":(Lreactor/core/CoreSubscriber;Ljava/util/function/Function;)V
      16: invokevirtual #9                  // Method reactor/core/publisher/Mono.subscribe:(Lreactor/core/CoreSubscriber;)V
      19: return
}
