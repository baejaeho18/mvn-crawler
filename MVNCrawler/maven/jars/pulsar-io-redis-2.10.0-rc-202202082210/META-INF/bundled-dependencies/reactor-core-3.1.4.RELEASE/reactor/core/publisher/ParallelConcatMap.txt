Compiled from "ParallelConcatMap.java"
final class reactor.core.publisher.ParallelConcatMap<T, R> extends reactor.core.publisher.ParallelFlux<R> implements reactor.core.Scannable {
  final reactor.core.publisher.ParallelFlux<T> source;

  final java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>> mapper;

  final java.util.function.Supplier<? extends java.util.Queue<T>> queueSupplier;

  final int prefetch;

  final reactor.core.publisher.FluxConcatMap$ErrorMode errorMode;

  reactor.core.publisher.ParallelConcatMap(reactor.core.publisher.ParallelFlux<T>, java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>>, java.util.function.Supplier<? extends java.util.Queue<T>>, int, reactor.core.publisher.FluxConcatMap$ErrorMode);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/ParallelFlux."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field source:Lreactor/core/publisher/ParallelFlux;
       9: aload_0
      10: aload_2
      11: ldc           #3                  // String mapper
      13: invokestatic  #4                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      16: checkcast     #5                  // class java/util/function/Function
      19: putfield      #6                  // Field mapper:Ljava/util/function/Function;
      22: aload_0
      23: aload_3
      24: ldc           #7                  // String queueSupplier
      26: invokestatic  #4                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      29: checkcast     #8                  // class java/util/function/Supplier
      32: putfield      #9                  // Field queueSupplier:Ljava/util/function/Supplier;
      35: aload_0
      36: iload         4
      38: putfield      #10                 // Field prefetch:I
      41: aload_0
      42: aload         5
      44: ldc           #11                 // String errorMode
      46: invokestatic  #4                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      49: checkcast     #12                 // class reactor/core/publisher/FluxConcatMap$ErrorMode
      52: putfield      #13                 // Field errorMode:Lreactor/core/publisher/FluxConcatMap$ErrorMode;
      55: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #14                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #2                  // Field source:Lreactor/core/publisher/ParallelFlux;
      11: areturn
      12: aload_1
      13: getstatic     #15                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      16: if_acmpne     27
      19: aload_0
      20: invokevirtual #16                 // Method getPrefetch:()I
      23: invokestatic  #17                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      26: areturn
      27: aload_1
      28: getstatic     #18                 // Field reactor/core/Scannable$Attr.DELAY_ERROR:Lreactor/core/Scannable$Attr;
      31: if_acmpne     53
      34: aload_0
      35: getfield      #13                 // Field errorMode:Lreactor/core/publisher/FluxConcatMap$ErrorMode;
      38: getstatic     #19                 // Field reactor/core/publisher/FluxConcatMap$ErrorMode.IMMEDIATE:Lreactor/core/publisher/FluxConcatMap$ErrorMode;
      41: if_acmpeq     48
      44: iconst_1
      45: goto          49
      48: iconst_0
      49: invokestatic  #20                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      52: areturn
      53: aconst_null
      54: areturn

  public int getPrefetch();
    Code:
       0: aload_0
       1: getfield      #10                 // Field prefetch:I
       4: ireturn

  public int parallelism();
    Code:
       0: aload_0
       1: getfield      #2                  // Field source:Lreactor/core/publisher/ParallelFlux;
       4: invokevirtual #21                 // Method reactor/core/publisher/ParallelFlux.parallelism:()I
       7: ireturn

  public void subscribe(reactor.core.CoreSubscriber<? super R>[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #22                 // Method validate:([Lorg/reactivestreams/Subscriber;)Z
       5: ifne          9
       8: return
       9: aload_1
      10: arraylength
      11: istore_2
      12: iload_2
      13: anewarray     #23                 // class reactor/core/CoreSubscriber
      16: astore_3
      17: iconst_0
      18: istore        4
      20: iload         4
      22: iload_2
      23: if_icmpge     59
      26: aload_3
      27: iload         4
      29: aload_1
      30: iload         4
      32: aaload
      33: aload_0
      34: getfield      #6                  // Field mapper:Ljava/util/function/Function;
      37: aload_0
      38: getfield      #9                  // Field queueSupplier:Ljava/util/function/Supplier;
      41: aload_0
      42: getfield      #10                 // Field prefetch:I
      45: aload_0
      46: getfield      #13                 // Field errorMode:Lreactor/core/publisher/FluxConcatMap$ErrorMode;
      49: invokestatic  #24                 // Method reactor/core/publisher/FluxConcatMap.subscriber:(Lreactor/core/CoreSubscriber;Ljava/util/function/Function;Ljava/util/function/Supplier;ILreactor/core/publisher/FluxConcatMap$ErrorMode;)Lreactor/core/CoreSubscriber;
      52: aastore
      53: iinc          4, 1
      56: goto          20
      59: aload_0
      60: getfield      #2                  // Field source:Lreactor/core/publisher/ParallelFlux;
      63: aload_3
      64: invokevirtual #25                 // Method reactor/core/publisher/ParallelFlux.subscribe:([Lreactor/core/CoreSubscriber;)V
      67: return
}
