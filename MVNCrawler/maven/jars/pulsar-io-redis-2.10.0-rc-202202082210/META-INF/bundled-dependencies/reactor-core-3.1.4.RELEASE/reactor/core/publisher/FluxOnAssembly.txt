Compiled from "FluxOnAssembly.java"
final class reactor.core.publisher.FluxOnAssembly<T> extends reactor.core.publisher.FluxOperator<T, T> implements reactor.core.Fuseable, reactor.core.publisher.AssemblyOp {
  final reactor.core.publisher.FluxOnAssembly$AssemblySnapshotException snapshotStack;

  static final boolean fullStackTrace;

  reactor.core.publisher.FluxOnAssembly(reactor.core.publisher.Flux<? extends T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxOperator."<init>":(Lreactor/core/publisher/Flux;)V
       5: aload_0
       6: new           #2                  // class reactor/core/publisher/FluxOnAssembly$AssemblySnapshotException
       9: dup
      10: invokespecial #3                  // Method reactor/core/publisher/FluxOnAssembly$AssemblySnapshotException."<init>":()V
      13: putfield      #4                  // Field snapshotStack:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshotException;
      16: return

  reactor.core.publisher.FluxOnAssembly(reactor.core.publisher.Flux<? extends T>, java.lang.String, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxOperator."<init>":(Lreactor/core/publisher/Flux;)V
       5: iload_3
       6: ifeq          24
       9: aload_0
      10: new           #5                  // class reactor/core/publisher/FluxOnAssembly$AssemblyLightSnapshotException
      13: dup
      14: aload_2
      15: invokespecial #6                  // Method reactor/core/publisher/FluxOnAssembly$AssemblyLightSnapshotException."<init>":(Ljava/lang/String;)V
      18: putfield      #4                  // Field snapshotStack:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshotException;
      21: goto          36
      24: aload_0
      25: new           #2                  // class reactor/core/publisher/FluxOnAssembly$AssemblySnapshotException
      28: dup
      29: aload_2
      30: invokespecial #7                  // Method reactor/core/publisher/FluxOnAssembly$AssemblySnapshotException."<init>":(Ljava/lang/String;)V
      33: putfield      #4                  // Field snapshotStack:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshotException;
      36: return

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #4                  // Field snapshotStack:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshotException;
       4: invokevirtual #8                  // Method reactor/core/publisher/FluxOnAssembly$AssemblySnapshotException.stackFirst:()Ljava/lang/String;
       7: areturn

  static java.lang.String getStacktrace(reactor.core.publisher.FluxOnAssembly$AssemblySnapshotException);
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method reactor/core/publisher/FluxOnAssembly$AssemblySnapshotException.getStackTrace:()[Ljava/lang/StackTraceElement;
       4: astore_1
       5: new           #10                 // class java/lang/StringBuilder
       8: dup
       9: invokespecial #11                 // Method java/lang/StringBuilder."<init>":()V
      12: astore_2
      13: aload_1
      14: astore_3
      15: aload_3
      16: arraylength
      17: istore        4
      19: iconst_0
      20: istore        5
      22: iload         5
      24: iload         4
      26: if_icmpge     369
      29: aload_3
      30: iload         5
      32: aaload
      33: astore        6
      35: aload         6
      37: invokevirtual #12                 // Method java/lang/StackTraceElement.toString:()Ljava/lang/String;
      40: astore        7
      42: getstatic     #13                 // Field fullStackTrace:Z
      45: ifne          346
      48: aload         6
      50: invokevirtual #14                 // Method java/lang/StackTraceElement.getLineNumber:()I
      53: iconst_1
      54: if_icmpgt     60
      57: goto          363
      60: aload         7
      62: ldc           #15                 // String java.util.function
      64: invokevirtual #16                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
      67: ifeq          73
      70: goto          363
      73: aload         7
      75: ldc           #17                 // String reactor.core.publisher.Mono.onAssembly
      77: invokevirtual #16                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
      80: ifeq          86
      83: goto          363
      86: aload         7
      88: ldc           #18                 // String reactor.core.publisher.Flux.onAssembly
      90: invokevirtual #16                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
      93: ifeq          99
      96: goto          363
      99: aload         7
     101: ldc           #19                 // String reactor.core.publisher.ParallelFlux.onAssembly
     103: invokevirtual #16                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
     106: ifeq          112
     109: goto          363
     112: aload         7
     114: ldc           #20                 // String reactor.core.publisher.SignalLogger
     116: invokevirtual #16                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
     119: ifeq          125
     122: goto          363
     125: aload         7
     127: ldc           #21                 // String FluxOnAssembly.
     129: invokevirtual #16                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
     132: ifeq          138
     135: goto          363
     138: aload         7
     140: ldc           #22                 // String MonoOnAssembly.
     142: invokevirtual #16                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
     145: ifeq          151
     148: goto          363
     151: aload         7
     153: ldc           #23                 // String MonoCallableOnAssembly.
     155: invokevirtual #16                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
     158: ifeq          164
     161: goto          363
     164: aload         7
     166: ldc           #24                 // String FluxCallableOnAssembly.
     168: invokevirtual #16                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
     171: ifeq          177
     174: goto          363
     177: aload         7
     179: ldc           #25                 // String OnOperatorDebug
     181: invokevirtual #16                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
     184: ifeq          190
     187: goto          363
     190: aload         7
     192: ldc           #26                 // String reactor.core.publisher.Hooks
     194: invokevirtual #16                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
     197: ifeq          203
     200: goto          363
     203: aload         7
     205: ldc           #27                 // String .junit.runner
     207: invokevirtual #16                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
     210: ifeq          216
     213: goto          363
     216: aload         7
     218: ldc           #28                 // String .junit4.runner
     220: invokevirtual #16                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
     223: ifeq          229
     226: goto          363
     229: aload         7
     231: ldc           #29                 // String .junit.internal
     233: invokevirtual #16                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
     236: ifeq          242
     239: goto          363
     242: aload         7
     244: ldc           #30                 // String sun.reflect
     246: invokevirtual #16                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
     249: ifeq          255
     252: goto          363
     255: aload         7
     257: ldc           #31                 // String useTraceAssembly
     259: invokevirtual #16                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
     262: ifeq          268
     265: goto          363
     268: aload         7
     270: ldc           #32                 // String java.lang.Thread.
     272: invokevirtual #16                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
     275: ifeq          281
     278: goto          363
     281: aload         7
     283: ldc           #33                 // String ThreadPoolExecutor
     285: invokevirtual #16                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
     288: ifeq          294
     291: goto          363
     294: aload         7
     296: ldc           #34                 // String org.apache.catalina.
     298: invokevirtual #16                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
     301: ifeq          307
     304: goto          363
     307: aload         7
     309: ldc           #35                 // String org.apache.tomcat.
     311: invokevirtual #16                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
     314: ifeq          320
     317: goto          363
     320: aload         7
     322: ldc           #36                 // String com.intellij.
     324: invokevirtual #16                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
     327: ifeq          333
     330: goto          363
     333: aload         7
     335: ldc           #37                 // String java.lang.reflect
     337: invokevirtual #16                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
     340: ifeq          346
     343: goto          363
     346: aload_2
     347: ldc           #38                 // String \t
     349: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     352: aload         7
     354: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     357: ldc           #40                 // String \n
     359: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     362: pop
     363: iinc          5, 1
     366: goto          22
     369: aload_2
     370: invokevirtual #41                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     373: areturn

  static void fillStacktraceHeader(java.lang.StringBuilder, java.lang.Class<?>, reactor.core.publisher.FluxOnAssembly$AssemblySnapshotException);
    Code:
       0: aload_2
       1: invokevirtual #42                 // Method reactor/core/publisher/FluxOnAssembly$AssemblySnapshotException.isLight:()Z
       4: ifeq          39
       7: aload_0
       8: ldc           #43                 // String \nAssembly site of producer [
      10: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      13: aload_1
      14: invokevirtual #44                 // Method java/lang/Class.getName:()Ljava/lang/String;
      17: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      20: ldc           #45                 // String ] is identified by light checkpoint [
      22: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      25: aload_2
      26: invokevirtual #46                 // Method reactor/core/publisher/FluxOnAssembly$AssemblySnapshotException.getMessage:()Ljava/lang/String;
      29: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      32: ldc           #47                 // String ].
      34: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      37: pop
      38: return
      39: aload_0
      40: ldc           #48                 // String \nAssembly trace from producer [
      42: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      45: aload_1
      46: invokevirtual #44                 // Method java/lang/Class.getName:()Ljava/lang/String;
      49: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      52: ldc           #49                 // String ]
      54: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      57: pop
      58: aload_2
      59: invokevirtual #46                 // Method reactor/core/publisher/FluxOnAssembly$AssemblySnapshotException.getMessage:()Ljava/lang/String;
      62: ifnull        84
      65: aload_0
      66: ldc           #50                 // String , described as [
      68: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      71: aload_2
      72: invokevirtual #46                 // Method reactor/core/publisher/FluxOnAssembly$AssemblySnapshotException.getMessage:()Ljava/lang/String;
      75: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      78: ldc           #49                 // String ]
      80: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      83: pop
      84: aload_0
      85: ldc           #51                 // String  :\n
      87: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      90: pop
      91: return

  static <T> void subscribe(reactor.core.CoreSubscriber<? super T>, reactor.core.publisher.Flux<? extends T>, reactor.core.publisher.FluxOnAssembly$AssemblySnapshotException);
    Code:
       0: aload_2
       1: ifnull        47
       4: aload_0
       5: instanceof    #52                 // class reactor/core/Fuseable$ConditionalSubscriber
       8: ifeq          33
      11: aload_0
      12: checkcast     #52                 // class reactor/core/Fuseable$ConditionalSubscriber
      15: astore_3
      16: aload_1
      17: new           #53                 // class reactor/core/publisher/FluxOnAssembly$OnAssemblyConditionalSubscriber
      20: dup
      21: aload_3
      22: aload_2
      23: aload_1
      24: invokespecial #54                 // Method reactor/core/publisher/FluxOnAssembly$OnAssemblyConditionalSubscriber."<init>":(Lreactor/core/Fuseable$ConditionalSubscriber;Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshotException;Lorg/reactivestreams/Publisher;)V
      27: invokevirtual #55                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      30: goto          47
      33: aload_1
      34: new           #56                 // class reactor/core/publisher/FluxOnAssembly$OnAssemblySubscriber
      37: dup
      38: aload_0
      39: aload_2
      40: aload_1
      41: invokespecial #57                 // Method reactor/core/publisher/FluxOnAssembly$OnAssemblySubscriber."<init>":(Lreactor/core/CoreSubscriber;Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshotException;Lorg/reactivestreams/Publisher;)V
      44: invokevirtual #55                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      47: return

  static java.lang.String extract(java.lang.String, boolean);
    Code:
       0: aconst_null
       1: astore_2
       2: aconst_null
       3: astore_3
       4: iload_1
       5: istore        4
       7: aload_0
       8: ldc           #40                 // String \n
      10: invokevirtual #58                 // Method java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;
      13: astore        5
      15: aload         5
      17: arraylength
      18: istore        6
      20: iconst_0
      21: istore        7
      23: iload         7
      25: iload         6
      27: if_icmpge     113
      30: aload         5
      32: iload         7
      34: aaload
      35: astore        8
      37: aload         8
      39: invokevirtual #59                 // Method java/lang/String.isEmpty:()Z
      42: ifeq          48
      45: goto          107
      48: iload         4
      50: ifeq          59
      53: iconst_0
      54: istore        4
      56: goto          107
      59: aload         8
      61: ldc           #60                 // String reactor.core.publisher
      63: invokevirtual #16                 // Method java/lang/String.contains:(Ljava/lang/CharSequence;)Z
      66: ifne          85
      69: aload         8
      71: aload         8
      73: bipush        40
      75: invokevirtual #61                 // Method java/lang/String.indexOf:(I)I
      78: invokevirtual #62                 // Method java/lang/String.substring:(I)Ljava/lang/String;
      81: astore_2
      82: goto          113
      85: aload         8
      87: ldc           #63                 // String reactor.core.publisher.
      89: ldc           #64                 // String
      91: invokevirtual #65                 // Method java/lang/String.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;
      94: astore_3
      95: aload_3
      96: iconst_0
      97: aload_3
      98: ldc           #66                 // String (
     100: invokevirtual #67                 // Method java/lang/String.indexOf:(Ljava/lang/String;)I
     103: invokevirtual #68                 // Method java/lang/String.substring:(II)Ljava/lang/String;
     106: astore_3
     107: iinc          7, 1
     110: goto          23
     113: new           #10                 // class java/lang/StringBuilder
     116: dup
     117: invokespecial #11                 // Method java/lang/StringBuilder."<init>":()V
     120: aload_3
     121: ifnull        128
     124: aload_3
     125: goto          130
     128: ldc           #64                 // String
     130: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     133: aload_2
     134: invokevirtual #39                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     137: invokevirtual #41                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     140: areturn

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: getfield      #4                  // Field snapshotStack:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshotException;
       4: ifnull        68
       7: aload_1
       8: instanceof    #52                 // class reactor/core/Fuseable$ConditionalSubscriber
      11: ifeq          45
      14: aload_1
      15: checkcast     #52                 // class reactor/core/Fuseable$ConditionalSubscriber
      18: astore_2
      19: aload_0
      20: getfield      #69                 // Field source:Lreactor/core/publisher/Flux;
      23: new           #53                 // class reactor/core/publisher/FluxOnAssembly$OnAssemblyConditionalSubscriber
      26: dup
      27: aload_2
      28: aload_0
      29: getfield      #4                  // Field snapshotStack:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshotException;
      32: aload_0
      33: getfield      #69                 // Field source:Lreactor/core/publisher/Flux;
      36: invokespecial #54                 // Method reactor/core/publisher/FluxOnAssembly$OnAssemblyConditionalSubscriber."<init>":(Lreactor/core/Fuseable$ConditionalSubscriber;Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshotException;Lorg/reactivestreams/Publisher;)V
      39: invokevirtual #55                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      42: goto          68
      45: aload_0
      46: getfield      #69                 // Field source:Lreactor/core/publisher/Flux;
      49: new           #56                 // class reactor/core/publisher/FluxOnAssembly$OnAssemblySubscriber
      52: dup
      53: aload_1
      54: aload_0
      55: getfield      #4                  // Field snapshotStack:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshotException;
      58: aload_0
      59: getfield      #69                 // Field source:Lreactor/core/publisher/Flux;
      62: invokespecial #57                 // Method reactor/core/publisher/FluxOnAssembly$OnAssemblySubscriber."<init>":(Lreactor/core/CoreSubscriber;Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshotException;Lorg/reactivestreams/Publisher;)V
      65: invokevirtual #55                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      68: return

  static int getParentOrThis(reactor.core.Scannable);
    Code:
       0: aload_0
       1: invokeinterface #70,  1           // InterfaceMethod reactor/core/Scannable.parents:()Ljava/util/stream/Stream;
       6: invokedynamic #71,  0             // InvokeDynamic #0:test:()Ljava/util/function/Predicate;
      11: invokeinterface #72,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      16: invokeinterface #73,  1           // InterfaceMethod java/util/stream/Stream.findFirst:()Ljava/util/Optional;
      21: invokedynamic #74,  0             // InvokeDynamic #1:apply:()Ljava/util/function/Function;
      26: invokevirtual #75                 // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
      29: aload_0
      30: invokevirtual #76                 // Method java/lang/Object.hashCode:()I
      33: invokestatic  #77                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      36: invokevirtual #78                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      39: checkcast     #79                 // class java/lang/Integer
      42: invokevirtual #80                 // Method java/lang/Integer.intValue:()I
      45: ireturn

  private static boolean lambda$getParentOrThis$0(reactor.core.Scannable);
    Code:
       0: aload_0
       1: instanceof    #81                 // class reactor/core/publisher/AssemblyOp
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  static {};
    Code:
       0: ldc           #82                 // String reactor.trace.assembly.fullstacktrace
       2: ldc           #83                 // String false
       4: invokestatic  #84                 // Method java/lang/System.getProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
       7: invokestatic  #85                 // Method java/lang/Boolean.parseBoolean:(Ljava/lang/String;)Z
      10: putstatic     #13                 // Field fullStackTrace:Z
      13: return
}
