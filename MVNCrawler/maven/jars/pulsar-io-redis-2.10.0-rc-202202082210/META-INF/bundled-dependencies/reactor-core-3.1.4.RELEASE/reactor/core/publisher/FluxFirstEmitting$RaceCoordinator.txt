Compiled from "FluxFirstEmitting.java"
final class reactor.core.publisher.FluxFirstEmitting$RaceCoordinator<T> implements org.reactivestreams.Subscription, reactor.core.Scannable {
  final reactor.core.publisher.FluxFirstEmitting$FirstEmittingSubscriber<T>[] subscribers;

  volatile boolean cancelled;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxFirstEmitting$RaceCoordinator> WIP;

  reactor.core.publisher.FluxFirstEmitting$RaceCoordinator(int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iload_1
       6: anewarray     #2                  // class reactor/core/publisher/FluxFirstEmitting$FirstEmittingSubscriber
       9: putfield      #3                  // Field subscribers:[Lreactor/core/publisher/FluxFirstEmitting$FirstEmittingSubscriber;
      12: aload_0
      13: ldc           #5                  // int -2147483648
      15: putfield      #6                  // Field wip:I
      18: return

  public java.util.stream.Stream<? extends reactor.core.Scannable> inners();
    Code:
       0: aload_0
       1: getfield      #3                  // Field subscribers:[Lreactor/core/publisher/FluxFirstEmitting$FirstEmittingSubscriber;
       4: invokestatic  #7                  // InterfaceMethod java/util/stream/Stream.of:([Ljava/lang/Object;)Ljava/util/stream/Stream;
       7: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #8                  // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
       4: if_acmpne     15
       7: aload_0
       8: getfield      #9                  // Field cancelled:Z
      11: invokestatic  #10                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      14: areturn
      15: aconst_null
      16: areturn

  void subscribe(org.reactivestreams.Publisher<? extends T>[], int, reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field subscribers:[Lreactor/core/publisher/FluxFirstEmitting$FirstEmittingSubscriber;
       4: astore        4
       6: iconst_0
       7: istore        5
       9: iload         5
      11: iload_2
      12: if_icmpge     37
      15: aload         4
      17: iload         5
      19: new           #2                  // class reactor/core/publisher/FluxFirstEmitting$FirstEmittingSubscriber
      22: dup
      23: aload_3
      24: aload_0
      25: iload         5
      27: invokespecial #11                 // Method reactor/core/publisher/FluxFirstEmitting$FirstEmittingSubscriber."<init>":(Lreactor/core/CoreSubscriber;Lreactor/core/publisher/FluxFirstEmitting$RaceCoordinator;I)V
      30: aastore
      31: iinc          5, 1
      34: goto          9
      37: aload_3
      38: aload_0
      39: invokeinterface #12,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      44: iconst_0
      45: istore        5
      47: iload         5
      49: iload_2
      50: if_icmpge     151
      53: aload_0
      54: getfield      #9                  // Field cancelled:Z
      57: ifne          69
      60: aload_0
      61: getfield      #6                  // Field wip:I
      64: ldc           #5                  // int -2147483648
      66: if_icmpeq     70
      69: return
      70: aload_1
      71: iload         5
      73: aaload
      74: astore        6
      76: aload         6
      78: ifnonnull     133
      81: getstatic     #13                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      84: aload_0
      85: ldc           #5                  // int -2147483648
      87: iconst_m1
      88: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      91: ifeq          132
      94: aload_3
      95: new           #15                 // class java/lang/NullPointerException
      98: dup
      99: new           #16                 // class java/lang/StringBuilder
     102: dup
     103: invokespecial #17                 // Method java/lang/StringBuilder."<init>":()V
     106: ldc           #18                 // String The
     108: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     111: iload         5
     113: invokevirtual #20                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     116: ldc           #21                 // String  th Publisher source is null
     118: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     121: invokevirtual #22                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     124: invokespecial #23                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
     127: invokeinterface #24,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
     132: return
     133: aload         6
     135: aload         4
     137: iload         5
     139: aaload
     140: invokeinterface #25,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
     145: iinc          5, 1
     148: goto          47
     151: return

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #26                 // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          69
       7: aload_0
       8: getfield      #6                  // Field wip:I
      11: istore_3
      12: iload_3
      13: iflt          29
      16: aload_0
      17: getfield      #3                  // Field subscribers:[Lreactor/core/publisher/FluxFirstEmitting$FirstEmittingSubscriber;
      20: iload_3
      21: aaload
      22: lload_1
      23: invokevirtual #27                 // Method reactor/core/publisher/FluxFirstEmitting$FirstEmittingSubscriber.request:(J)V
      26: goto          69
      29: aload_0
      30: getfield      #3                  // Field subscribers:[Lreactor/core/publisher/FluxFirstEmitting$FirstEmittingSubscriber;
      33: astore        4
      35: aload         4
      37: arraylength
      38: istore        5
      40: iconst_0
      41: istore        6
      43: iload         6
      45: iload         5
      47: if_icmpge     69
      50: aload         4
      52: iload         6
      54: aaload
      55: astore        7
      57: aload         7
      59: lload_1
      60: invokevirtual #27                 // Method reactor/core/publisher/FluxFirstEmitting$FirstEmittingSubscriber.request:(J)V
      63: iinc          6, 1
      66: goto          43
      69: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #9                  // Field cancelled:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #9                  // Field cancelled:Z
      13: aload_0
      14: getfield      #6                  // Field wip:I
      17: istore_1
      18: iload_1
      19: iflt          34
      22: aload_0
      23: getfield      #3                  // Field subscribers:[Lreactor/core/publisher/FluxFirstEmitting$FirstEmittingSubscriber;
      26: iload_1
      27: aaload
      28: invokevirtual #28                 // Method reactor/core/publisher/FluxFirstEmitting$FirstEmittingSubscriber.cancel:()V
      31: goto          68
      34: aload_0
      35: getfield      #3                  // Field subscribers:[Lreactor/core/publisher/FluxFirstEmitting$FirstEmittingSubscriber;
      38: astore_2
      39: aload_2
      40: arraylength
      41: istore_3
      42: iconst_0
      43: istore        4
      45: iload         4
      47: iload_3
      48: if_icmpge     68
      51: aload_2
      52: iload         4
      54: aaload
      55: astore        5
      57: aload         5
      59: invokevirtual #28                 // Method reactor/core/publisher/FluxFirstEmitting$FirstEmittingSubscriber.cancel:()V
      62: iinc          4, 1
      65: goto          45
      68: return

  boolean tryWin(int);
    Code:
       0: aload_0
       1: getfield      #6                  // Field wip:I
       4: ldc           #5                  // int -2147483648
       6: if_icmpne     60
       9: getstatic     #13                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      12: aload_0
      13: ldc           #5                  // int -2147483648
      15: iload_1
      16: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      19: ifeq          60
      22: aload_0
      23: getfield      #3                  // Field subscribers:[Lreactor/core/publisher/FluxFirstEmitting$FirstEmittingSubscriber;
      26: astore_2
      27: aload_2
      28: arraylength
      29: istore_3
      30: iconst_0
      31: istore        4
      33: iload         4
      35: iload_3
      36: if_icmpge     58
      39: iload         4
      41: iload_1
      42: if_icmpeq     52
      45: aload_2
      46: iload         4
      48: aaload
      49: invokevirtual #28                 // Method reactor/core/publisher/FluxFirstEmitting$FirstEmittingSubscriber.cancel:()V
      52: iinc          4, 1
      55: goto          33
      58: iconst_1
      59: ireturn
      60: iconst_0
      61: ireturn

  static {};
    Code:
       0: ldc           #29                 // class reactor/core/publisher/FluxFirstEmitting$RaceCoordinator
       2: ldc           #30                 // String wip
       4: invokestatic  #31                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #13                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: return
}
