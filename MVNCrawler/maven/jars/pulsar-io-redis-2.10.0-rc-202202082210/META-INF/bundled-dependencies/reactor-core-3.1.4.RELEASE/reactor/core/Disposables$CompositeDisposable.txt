Compiled from "Disposables.java"
final class reactor.core.Disposables$CompositeDisposable implements reactor.core.Disposable$Composite,reactor.core.Scannable {
  static final int DEFAULT_CAPACITY;

  static final float DEFAULT_LOAD_FACTOR;

  final float loadFactor;

  int mask;

  int size;

  int maxSize;

  reactor.core.Disposable[] disposables;

  volatile boolean disposed;

  static final int INT_PHI;

  reactor.core.Disposables$CompositeDisposable();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: ldc           #3                  // float 0.75f
       7: putfield      #4                  // Field loadFactor:F
      10: bipush        16
      12: istore_1
      13: aload_0
      14: iload_1
      15: iconst_1
      16: isub
      17: putfield      #5                  // Field mask:I
      20: aload_0
      21: aload_0
      22: getfield      #4                  // Field loadFactor:F
      25: iload_1
      26: i2f
      27: fmul
      28: f2i
      29: putfield      #6                  // Field maxSize:I
      32: aload_0
      33: iload_1
      34: anewarray     #7                  // class reactor/core/Disposable
      37: putfield      #8                  // Field disposables:[Lreactor/core/Disposable;
      40: return

  reactor.core.Disposables$CompositeDisposable(reactor.core.Disposable...);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_1
       5: ldc           #9                  // String disposables is null
       7: invokestatic  #10                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      10: pop
      11: aload_1
      12: arraylength
      13: iconst_1
      14: iadd
      15: istore_2
      16: aload_0
      17: ldc           #3                  // float 0.75f
      19: putfield      #4                  // Field loadFactor:F
      22: iload_2
      23: invokestatic  #11                 // Method reactor/util/concurrent/Queues.ceilingNextPowerOfTwo:(I)I
      26: istore_3
      27: aload_0
      28: iload_3
      29: iconst_1
      30: isub
      31: putfield      #5                  // Field mask:I
      34: aload_0
      35: aload_0
      36: getfield      #4                  // Field loadFactor:F
      39: iload_3
      40: i2f
      41: fmul
      42: f2i
      43: putfield      #6                  // Field maxSize:I
      46: aload_0
      47: iload_3
      48: anewarray     #7                  // class reactor/core/Disposable
      51: putfield      #8                  // Field disposables:[Lreactor/core/Disposable;
      54: aload_1
      55: astore        4
      57: aload         4
      59: arraylength
      60: istore        5
      62: iconst_0
      63: istore        6
      65: iload         6
      67: iload         5
      69: if_icmpge     100
      72: aload         4
      74: iload         6
      76: aaload
      77: astore        7
      79: aload         7
      81: ldc           #12                 // String Disposable item is null
      83: invokestatic  #10                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      86: pop
      87: aload_0
      88: aload         7
      90: invokevirtual #13                 // Method addEntry:(Lreactor/core/Disposable;)Z
      93: pop
      94: iinc          6, 1
      97: goto          65
     100: return

  reactor.core.Disposables$CompositeDisposable(java.lang.Iterable<? extends reactor.core.Disposable>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_1
       5: ldc           #9                  // String disposables is null
       7: invokestatic  #10                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      10: pop
      11: aload_0
      12: ldc           #3                  // float 0.75f
      14: putfield      #4                  // Field loadFactor:F
      17: bipush        16
      19: istore_2
      20: aload_0
      21: iload_2
      22: iconst_1
      23: isub
      24: putfield      #5                  // Field mask:I
      27: aload_0
      28: aload_0
      29: getfield      #4                  // Field loadFactor:F
      32: iload_2
      33: i2f
      34: fmul
      35: f2i
      36: putfield      #6                  // Field maxSize:I
      39: aload_0
      40: iload_2
      41: anewarray     #7                  // class reactor/core/Disposable
      44: putfield      #8                  // Field disposables:[Lreactor/core/Disposable;
      47: aload_1
      48: invokeinterface #14,  1           // InterfaceMethod java/lang/Iterable.iterator:()Ljava/util/Iterator;
      53: astore_3
      54: aload_3
      55: invokeinterface #15,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      60: ifeq          92
      63: aload_3
      64: invokeinterface #16,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      69: checkcast     #7                  // class reactor/core/Disposable
      72: astore        4
      74: aload         4
      76: ldc           #12                 // String Disposable item is null
      78: invokestatic  #10                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      81: pop
      82: aload_0
      83: aload         4
      85: invokevirtual #13                 // Method addEntry:(Lreactor/core/Disposable;)Z
      88: pop
      89: goto          54
      92: return

  public void dispose();
    Code:
       0: aload_0
       1: getfield      #17                 // Field disposed:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: dup
      10: astore_2
      11: monitorenter
      12: aload_0
      13: getfield      #17                 // Field disposed:Z
      16: ifeq          22
      19: aload_2
      20: monitorexit
      21: return
      22: aload_0
      23: iconst_1
      24: putfield      #17                 // Field disposed:Z
      27: aload_0
      28: getfield      #8                  // Field disposables:[Lreactor/core/Disposable;
      31: astore_1
      32: aload_0
      33: aconst_null
      34: putfield      #8                  // Field disposables:[Lreactor/core/Disposable;
      37: aload_0
      38: iconst_0
      39: putfield      #18                 // Field size:I
      42: aload_2
      43: monitorexit
      44: goto          52
      47: astore_3
      48: aload_2
      49: monitorexit
      50: aload_3
      51: athrow
      52: aconst_null
      53: astore_2
      54: aload_1
      55: astore_3
      56: aload_3
      57: arraylength
      58: istore        4
      60: iconst_0
      61: istore        5
      63: iload         5
      65: iload         4
      67: if_icmpge     131
      70: aload_3
      71: iload         5
      73: aaload
      74: astore        6
      76: aload         6
      78: instanceof    #7                  // class reactor/core/Disposable
      81: ifeq          125
      84: aload         6
      86: checkcast     #7                  // class reactor/core/Disposable
      89: invokeinterface #19,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
      94: goto          125
      97: astore        7
      99: aload         7
     101: invokestatic  #21                 // Method reactor/core/Exceptions.throwIfFatal:(Ljava/lang/Throwable;)V
     104: aload_2
     105: ifnonnull     116
     108: new           #22                 // class java/util/ArrayList
     111: dup
     112: invokespecial #23                 // Method java/util/ArrayList."<init>":()V
     115: astore_2
     116: aload_2
     117: aload         7
     119: invokeinterface #24,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     124: pop
     125: iinc          5, 1
     128: goto          63
     131: aload_2
     132: ifnull        164
     135: aload_2
     136: invokeinterface #25,  1           // InterfaceMethod java/util/List.size:()I
     141: iconst_1
     142: if_icmpne     159
     145: aload_2
     146: iconst_0
     147: invokeinterface #26,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
     152: checkcast     #20                 // class java/lang/Throwable
     155: invokestatic  #27                 // Method reactor/core/Exceptions.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
     158: athrow
     159: aload_2
     160: invokestatic  #28                 // Method reactor/core/Exceptions.multiple:(Ljava/lang/Iterable;)Ljava/lang/RuntimeException;
     163: athrow
     164: return
    Exception table:
       from    to  target type
          12    21    47   any
          22    44    47   any
          47    50    47   any
          84    94    97   Class java/lang/Throwable

  public boolean isDisposed();
    Code:
       0: aload_0
       1: getfield      #17                 // Field disposed:Z
       4: ireturn

  public boolean add(reactor.core.Disposable);
    Code:
       0: aload_1
       1: ldc           #29                 // String d is null
       3: invokestatic  #10                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: getfield      #17                 // Field disposed:Z
      11: ifne          45
      14: aload_0
      15: dup
      16: astore_2
      17: monitorenter
      18: aload_0
      19: getfield      #17                 // Field disposed:Z
      22: ifne          35
      25: aload_0
      26: aload_1
      27: invokevirtual #13                 // Method addEntry:(Lreactor/core/Disposable;)Z
      30: pop
      31: iconst_1
      32: aload_2
      33: monitorexit
      34: ireturn
      35: aload_2
      36: monitorexit
      37: goto          45
      40: astore_3
      41: aload_2
      42: monitorexit
      43: aload_3
      44: athrow
      45: aload_1
      46: invokeinterface #19,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
      51: iconst_0
      52: ireturn
    Exception table:
       from    to  target type
          18    34    40   any
          35    37    40   any
          40    43    40   any

  public boolean addAll(java.util.Collection<? extends reactor.core.Disposable>);
    Code:
       0: aload_1
       1: ldc           #30                 // String ds is null
       3: invokestatic  #10                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: getfield      #17                 // Field disposed:Z
      11: ifne          86
      14: aload_0
      15: dup
      16: astore_2
      17: monitorenter
      18: aload_0
      19: getfield      #17                 // Field disposed:Z
      22: ifne          74
      25: aload_1
      26: invokeinterface #31,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      31: astore_3
      32: aload_3
      33: invokeinterface #15,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      38: ifeq          70
      41: aload_3
      42: invokeinterface #16,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      47: checkcast     #7                  // class reactor/core/Disposable
      50: astore        4
      52: aload         4
      54: ldc           #29                 // String d is null
      56: invokestatic  #10                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      59: pop
      60: aload_0
      61: aload         4
      63: invokevirtual #13                 // Method addEntry:(Lreactor/core/Disposable;)Z
      66: pop
      67: goto          32
      70: iconst_1
      71: aload_2
      72: monitorexit
      73: ireturn
      74: aload_2
      75: monitorexit
      76: goto          86
      79: astore        5
      81: aload_2
      82: monitorexit
      83: aload         5
      85: athrow
      86: aload_1
      87: invokeinterface #31,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      92: astore_2
      93: aload_2
      94: invokeinterface #15,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      99: ifeq          121
     102: aload_2
     103: invokeinterface #16,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     108: checkcast     #7                  // class reactor/core/Disposable
     111: astore_3
     112: aload_3
     113: invokeinterface #19,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
     118: goto          93
     121: iconst_0
     122: ireturn
    Exception table:
       from    to  target type
          18    73    79   any
          74    76    79   any
          79    83    79   any

  public boolean remove(reactor.core.Disposable);
    Code:
       0: aload_1
       1: ldc           #12                 // String Disposable item is null
       3: invokestatic  #10                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: getfield      #17                 // Field disposed:Z
      11: ifeq          16
      14: iconst_0
      15: ireturn
      16: aload_0
      17: dup
      18: astore_2
      19: monitorenter
      20: aload_0
      21: getfield      #17                 // Field disposed:Z
      24: ifeq          31
      27: iconst_0
      28: aload_2
      29: monitorexit
      30: ireturn
      31: aload_0
      32: aload_1
      33: invokevirtual #32                 // Method removeEntry:(Lreactor/core/Disposable;)Z
      36: ifne          43
      39: iconst_0
      40: aload_2
      41: monitorexit
      42: ireturn
      43: aload_2
      44: monitorexit
      45: goto          53
      48: astore_3
      49: aload_2
      50: monitorexit
      51: aload_3
      52: athrow
      53: iconst_1
      54: ireturn
    Exception table:
       from    to  target type
          20    30    48   any
          31    42    48   any
          43    45    48   any
          48    51    48   any

  public int size();
    Code:
       0: aload_0
       1: getfield      #17                 // Field disposed:Z
       4: ifeq          9
       7: iconst_0
       8: ireturn
       9: aload_0
      10: dup
      11: astore_1
      12: monitorenter
      13: aload_0
      14: getfield      #17                 // Field disposed:Z
      17: ifeq          24
      20: iconst_0
      21: aload_1
      22: monitorexit
      23: ireturn
      24: aload_0
      25: getfield      #18                 // Field size:I
      28: aload_1
      29: monitorexit
      30: ireturn
      31: astore_2
      32: aload_1
      33: monitorexit
      34: aload_2
      35: athrow
    Exception table:
       from    to  target type
          13    23    31   any
          24    30    31   any
          31    34    31   any

  public java.util.stream.Stream<? extends reactor.core.Scannable> inners();
    Code:
       0: aload_0
       1: getfield      #8                  // Field disposables:[Lreactor/core/Disposable;
       4: invokestatic  #33                 // InterfaceMethod java/util/stream/Stream.of:([Ljava/lang/Object;)Ljava/util/stream/Stream;
       7: invokedynamic #34,  0             // InvokeDynamic #0:test:()Ljava/util/function/Predicate;
      12: invokeinterface #35,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      17: invokedynamic #36,  0             // InvokeDynamic #1:apply:()Ljava/util/function/Function;
      22: invokeinterface #37,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      27: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #38                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
       4: if_acmpne     15
       7: aload_0
       8: invokevirtual #39                 // Method isDisposed:()Z
      11: invokestatic  #40                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      14: areturn
      15: aconst_null
      16: areturn

  boolean addEntry(reactor.core.Disposable);
    Code:
       0: aload_0
       1: getfield      #8                  // Field disposables:[Lreactor/core/Disposable;
       4: astore_2
       5: aload_0
       6: getfield      #5                  // Field mask:I
       9: istore_3
      10: aload_1
      11: invokevirtual #41                 // Method java/lang/Object.hashCode:()I
      14: invokestatic  #42                 // Method mix:(I)I
      17: iload_3
      18: iand
      19: istore        4
      21: aload_2
      22: iload         4
      24: aaload
      25: astore        5
      27: aload         5
      29: ifnull        76
      32: aload         5
      34: aload_1
      35: invokevirtual #43                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      38: ifeq          43
      41: iconst_0
      42: ireturn
      43: iload         4
      45: iconst_1
      46: iadd
      47: iload_3
      48: iand
      49: istore        4
      51: aload_2
      52: iload         4
      54: aaload
      55: astore        5
      57: aload         5
      59: ifnonnull     65
      62: goto          76
      65: aload         5
      67: aload_1
      68: invokevirtual #43                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      71: ifeq          43
      74: iconst_0
      75: ireturn
      76: aload_2
      77: iload         4
      79: aload_1
      80: aastore
      81: aload_0
      82: dup
      83: getfield      #18                 // Field size:I
      86: iconst_1
      87: iadd
      88: dup_x1
      89: putfield      #18                 // Field size:I
      92: aload_0
      93: getfield      #6                  // Field maxSize:I
      96: if_icmplt     103
      99: aload_0
     100: invokevirtual #44                 // Method rehash:()V
     103: iconst_1
     104: ireturn

  boolean removeEntry(reactor.core.Disposable);
    Code:
       0: aload_0
       1: getfield      #8                  // Field disposables:[Lreactor/core/Disposable;
       4: astore_2
       5: aload_0
       6: getfield      #5                  // Field mask:I
       9: istore_3
      10: aload_1
      11: invokevirtual #41                 // Method java/lang/Object.hashCode:()I
      14: invokestatic  #42                 // Method mix:(I)I
      17: iload_3
      18: iand
      19: istore        4
      21: aload_2
      22: iload         4
      24: aaload
      25: astore        5
      27: aload         5
      29: ifnonnull     34
      32: iconst_0
      33: ireturn
      34: aload         5
      36: aload_1
      37: invokevirtual #43                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      40: ifeq          52
      43: aload_0
      44: iload         4
      46: aload_2
      47: iload_3
      48: invokevirtual #45                 // Method removeEntry:(I[Lreactor/core/Disposable;I)Z
      51: ireturn
      52: iload         4
      54: iconst_1
      55: iadd
      56: iload_3
      57: iand
      58: istore        4
      60: aload_2
      61: iload         4
      63: aaload
      64: astore        5
      66: aload         5
      68: ifnonnull     73
      71: iconst_0
      72: ireturn
      73: aload         5
      75: aload_1
      76: invokevirtual #43                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      79: ifeq          52
      82: aload_0
      83: iload         4
      85: aload_2
      86: iload_3
      87: invokevirtual #45                 // Method removeEntry:(I[Lreactor/core/Disposable;I)Z
      90: ireturn

  boolean removeEntry(int, reactor.core.Disposable[], int);
    Code:
       0: aload_0
       1: dup
       2: getfield      #18                 // Field size:I
       5: iconst_1
       6: isub
       7: putfield      #18                 // Field size:I
      10: iload_1
      11: istore        4
      13: iload_1
      14: iconst_1
      15: iadd
      16: iload_3
      17: iand
      18: istore_1
      19: aload_2
      20: iload_1
      21: aaload
      22: astore        6
      24: aload         6
      26: ifnonnull     36
      29: aload_2
      30: iload         4
      32: aconst_null
      33: aastore
      34: iconst_1
      35: ireturn
      36: aload         6
      38: invokevirtual #41                 // Method java/lang/Object.hashCode:()I
      41: invokestatic  #42                 // Method mix:(I)I
      44: iload_3
      45: iand
      46: istore        5
      48: iload         4
      50: iload_1
      51: if_icmpgt     70
      54: iload         4
      56: iload         5
      58: if_icmpge     95
      61: iload         5
      63: iload_1
      64: if_icmple     86
      67: goto          95
      70: iload         4
      72: iload         5
      74: if_icmplt     86
      77: iload         5
      79: iload_1
      80: if_icmple     86
      83: goto          95
      86: iload_1
      87: iconst_1
      88: iadd
      89: iload_3
      90: iand
      91: istore_1
      92: goto          19
      95: aload_2
      96: iload         4
      98: aload         6
     100: aastore
     101: goto          10

  void rehash();
    Code:
       0: aload_0
       1: getfield      #8                  // Field disposables:[Lreactor/core/Disposable;
       4: astore_1
       5: aload_1
       6: arraylength
       7: istore_2
       8: iload_2
       9: iconst_1
      10: ishl
      11: istore_3
      12: iload_3
      13: iconst_1
      14: isub
      15: istore        4
      17: iload_3
      18: anewarray     #7                  // class reactor/core/Disposable
      21: astore        5
      23: aload_0
      24: getfield      #18                 // Field size:I
      27: istore        6
      29: iload         6
      31: iinc          6, -1
      34: ifeq          102
      37: aload_1
      38: iinc          2, -1
      41: iload_2
      42: aaload
      43: ifnonnull     49
      46: goto          37
      49: aload_1
      50: iload_2
      51: aaload
      52: invokevirtual #41                 // Method java/lang/Object.hashCode:()I
      55: invokestatic  #42                 // Method mix:(I)I
      58: iload         4
      60: iand
      61: istore        7
      63: aload         5
      65: iload         7
      67: aaload
      68: ifnull        91
      71: iload         7
      73: iconst_1
      74: iadd
      75: iload         4
      77: iand
      78: istore        7
      80: aload         5
      82: iload         7
      84: aaload
      85: ifnonnull     71
      88: goto          91
      91: aload         5
      93: iload         7
      95: aload_1
      96: iload_2
      97: aaload
      98: aastore
      99: goto          29
     102: aload_0
     103: iload         4
     105: putfield      #5                  // Field mask:I
     108: aload_0
     109: iload_3
     110: i2f
     111: aload_0
     112: getfield      #4                  // Field loadFactor:F
     115: fmul
     116: f2i
     117: putfield      #6                  // Field maxSize:I
     120: aload_0
     121: aload         5
     123: putfield      #8                  // Field disposables:[Lreactor/core/Disposable;
     126: return

  static int mix(int);
    Code:
       0: iload_0
       1: ldc           #46                 // int -1640531527
       3: imul
       4: istore_1
       5: iload_1
       6: iload_1
       7: bipush        16
       9: iushr
      10: ixor
      11: ireturn
}
