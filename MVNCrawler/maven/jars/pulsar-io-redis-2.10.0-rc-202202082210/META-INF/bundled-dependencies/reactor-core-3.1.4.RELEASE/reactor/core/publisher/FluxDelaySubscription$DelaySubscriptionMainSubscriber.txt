Compiled from "FluxDelaySubscription.java"
final class reactor.core.publisher.FluxDelaySubscription$DelaySubscriptionMainSubscriber<T> implements reactor.core.publisher.InnerConsumer<T> {
  final reactor.core.CoreSubscriber<? super T> actual;

  final reactor.core.publisher.FluxDelaySubscription$DelaySubscriptionOtherSubscriber<?, ?> arbiter;

  reactor.core.publisher.FluxDelaySubscription$DelaySubscriptionMainSubscriber(reactor.core.CoreSubscriber<? super T>, reactor.core.publisher.FluxDelaySubscription$DelaySubscriptionOtherSubscriber<?, ?>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field arbiter:Lreactor/core/publisher/FluxDelaySubscription$DelaySubscriptionOtherSubscriber;
      14: return

  public reactor.util.context.Context currentContext();
    Code:
       0: aload_0
       1: getfield      #3                  // Field arbiter:Lreactor/core/publisher/FluxDelaySubscription$DelaySubscriptionOtherSubscriber;
       4: invokevirtual #4                  // Method reactor/core/publisher/FluxDelaySubscription$DelaySubscriptionOtherSubscriber.currentContext:()Lreactor/util/context/Context;
       7: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #5                  // Field reactor/core/Scannable$Attr.ACTUAL:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      11: areturn
      12: aconst_null
      13: areturn

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #3                  // Field arbiter:Lreactor/core/publisher/FluxDelaySubscription$DelaySubscriptionOtherSubscriber;
       4: aload_1
       5: invokevirtual #6                  // Method reactor/core/publisher/FluxDelaySubscription$DelaySubscriptionOtherSubscriber.set:(Lorg/reactivestreams/Subscription;)Z
       8: pop
       9: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: aload_1
       5: invokeinterface #7,  2            // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      10: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: aload_1
       5: invokeinterface #8,  2            // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      10: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: invokeinterface #9,  1            // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
       9: return
}
