Compiled from "LambdaSubscriber.java"
final class reactor.core.publisher.LambdaSubscriber<T> implements reactor.core.publisher.InnerConsumer<T>, reactor.core.Disposable {
  final java.util.function.Consumer<? super T> consumer;

  final java.util.function.Consumer<? super java.lang.Throwable> errorConsumer;

  final java.lang.Runnable completeConsumer;

  final java.util.function.Consumer<? super org.reactivestreams.Subscription> subscriptionConsumer;

  volatile org.reactivestreams.Subscription subscription;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.LambdaSubscriber, org.reactivestreams.Subscription> S;

  reactor.core.publisher.LambdaSubscriber(java.util.function.Consumer<? super T>, java.util.function.Consumer<? super java.lang.Throwable>, java.lang.Runnable, java.util.function.Consumer<? super org.reactivestreams.Subscription>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field consumer:Ljava/util/function/Consumer;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field errorConsumer:Ljava/util/function/Consumer;
      14: aload_0
      15: aload_3
      16: putfield      #4                  // Field completeConsumer:Ljava/lang/Runnable;
      19: aload_0
      20: aload         4
      22: putfield      #5                  // Field subscriptionConsumer:Ljava/util/function/Consumer;
      25: return

  public final void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #6                  // Field subscription:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #7                  // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          64
      11: aload_0
      12: aload_1
      13: putfield      #6                  // Field subscription:Lorg/reactivestreams/Subscription;
      16: aload_0
      17: getfield      #5                  // Field subscriptionConsumer:Ljava/util/function/Consumer;
      20: ifnull        55
      23: aload_0
      24: getfield      #5                  // Field subscriptionConsumer:Ljava/util/function/Consumer;
      27: aload_1
      28: invokeinterface #8,  2            // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
      33: goto          64
      36: astore_2
      37: aload_2
      38: invokestatic  #10                 // Method reactor/core/Exceptions.throwIfFatal:(Ljava/lang/Throwable;)V
      41: aload_1
      42: invokeinterface #11,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      47: aload_0
      48: aload_2
      49: invokevirtual #12                 // Method onError:(Ljava/lang/Throwable;)V
      52: goto          64
      55: aload_1
      56: ldc2_w        #14                 // long 9223372036854775807l
      59: invokeinterface #16,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      64: return
    Exception table:
       from    to  target type
          23    33    36   Class java/lang/Throwable

  public final void onComplete();
    Code:
       0: getstatic     #17                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokestatic  #18                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
       7: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #20                 // class org/reactivestreams/Subscription
      13: astore_1
      14: aload_1
      15: invokestatic  #18                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      18: if_acmpne     22
      21: return
      22: aload_0
      23: getfield      #4                  // Field completeConsumer:Ljava/lang/Runnable;
      26: ifnull        51
      29: aload_0
      30: getfield      #4                  // Field completeConsumer:Ljava/lang/Runnable;
      33: invokeinterface #21,  1           // InterfaceMethod java/lang/Runnable.run:()V
      38: goto          51
      41: astore_2
      42: aload_2
      43: invokestatic  #10                 // Method reactor/core/Exceptions.throwIfFatal:(Ljava/lang/Throwable;)V
      46: aload_0
      47: aload_2
      48: invokevirtual #12                 // Method onError:(Ljava/lang/Throwable;)V
      51: return
    Exception table:
       from    to  target type
          29    38    41   Class java/lang/Throwable

  public final void onError(java.lang.Throwable);
    Code:
       0: getstatic     #17                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokestatic  #18                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
       7: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #20                 // class org/reactivestreams/Subscription
      13: astore_2
      14: aload_2
      15: invokestatic  #18                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      18: if_acmpne     29
      21: aload_1
      22: invokestatic  #22                 // InterfaceMethod reactor/util/context/Context.empty:()Lreactor/util/context/Context;
      25: invokestatic  #23                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      28: return
      29: aload_0
      30: getfield      #3                  // Field errorConsumer:Ljava/util/function/Consumer;
      33: ifnull        49
      36: aload_0
      37: getfield      #3                  // Field errorConsumer:Ljava/util/function/Consumer;
      40: aload_1
      41: invokeinterface #8,  2            // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
      46: goto          54
      49: aload_1
      50: invokestatic  #24                 // Method reactor/core/Exceptions.errorCallbackNotImplemented:(Ljava/lang/Throwable;)Ljava/lang/UnsupportedOperationException;
      53: athrow
      54: return

  public final void onNext(T);
    Code:
       0: aload_0
       1: getfield      #2                  // Field consumer:Ljava/util/function/Consumer;
       4: ifnull        17
       7: aload_0
       8: getfield      #2                  // Field consumer:Ljava/util/function/Consumer;
      11: aload_1
      12: invokeinterface #8,  2            // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
      17: goto          39
      20: astore_2
      21: aload_2
      22: invokestatic  #10                 // Method reactor/core/Exceptions.throwIfFatal:(Ljava/lang/Throwable;)V
      25: aload_0
      26: getfield      #6                  // Field subscription:Lorg/reactivestreams/Subscription;
      29: invokeinterface #11,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      34: aload_0
      35: aload_2
      36: invokevirtual #12                 // Method onError:(Ljava/lang/Throwable;)V
      39: return
    Exception table:
       from    to  target type
           0    17    20   Class java/lang/Throwable

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #25                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #6                  // Field subscription:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #26                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      16: if_acmpne     25
      19: ldc           #28                 // int 2147483647
      21: invokestatic  #29                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      24: areturn
      25: aload_1
      26: getstatic     #30                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      29: if_acmpeq     39
      32: aload_1
      33: getstatic     #31                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      36: if_acmpne     47
      39: aload_0
      40: invokevirtual #32                 // Method isDisposed:()Z
      43: invokestatic  #33                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      46: areturn
      47: aconst_null
      48: areturn

  public boolean isDisposed();
    Code:
       0: aload_0
       1: getfield      #6                  // Field subscription:Lorg/reactivestreams/Subscription;
       4: invokestatic  #18                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
       7: if_acmpne     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public void dispose();
    Code:
       0: getstatic     #17                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokestatic  #18                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
       7: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #20                 // class org/reactivestreams/Subscription
      13: astore_1
      14: aload_1
      15: ifnull        31
      18: aload_1
      19: invokestatic  #18                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      22: if_acmpeq     31
      25: aload_1
      26: invokeinterface #11,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      31: return

  static {};
    Code:
       0: ldc           #34                 // class reactor/core/publisher/LambdaSubscriber
       2: ldc           #20                 // class org/reactivestreams/Subscription
       4: ldc           #35                 // String subscription
       6: invokestatic  #36                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #17                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: return
}
