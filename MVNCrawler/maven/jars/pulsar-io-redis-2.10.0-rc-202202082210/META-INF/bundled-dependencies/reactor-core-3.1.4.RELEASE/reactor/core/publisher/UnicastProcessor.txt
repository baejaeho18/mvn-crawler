Compiled from "UnicastProcessor.java"
public final class reactor.core.publisher.UnicastProcessor<T> extends reactor.core.publisher.FluxProcessor<T, T> implements reactor.core.Fuseable$QueueSubscription<T>, reactor.core.Fuseable, reactor.core.publisher.InnerOperator<T, T> {
  final java.util.Queue<T> queue;

  final java.util.function.Consumer<? super T> onOverflow;

  volatile reactor.core.Disposable onTerminate;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.UnicastProcessor, reactor.core.Disposable> ON_TERMINATE;

  volatile boolean done;

  java.lang.Throwable error;

  volatile reactor.core.CoreSubscriber<? super T> actual;

  volatile boolean cancelled;

  volatile int once;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.UnicastProcessor> ONCE;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.UnicastProcessor> WIP;

  volatile long requested;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.UnicastProcessor> REQUESTED;

  volatile boolean outputFused;

  public static <E> reactor.core.publisher.UnicastProcessor<E> create();
    Code:
       0: new           #1                  // class reactor/core/publisher/UnicastProcessor
       3: dup
       4: invokestatic  #2                  // Method reactor/util/concurrent/Queues.unbounded:()Ljava/util/function/Supplier;
       7: invokeinterface #3,  1            // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      12: checkcast     #4                  // class java/util/Queue
      15: invokespecial #5                  // Method "<init>":(Ljava/util/Queue;)V
      18: areturn

  public static <E> reactor.core.publisher.UnicastProcessor<E> create(java.util.Queue<E>);
    Code:
       0: new           #1                  // class reactor/core/publisher/UnicastProcessor
       3: dup
       4: aload_0
       5: invokespecial #5                  // Method "<init>":(Ljava/util/Queue;)V
       8: areturn

  public static <E> reactor.core.publisher.UnicastProcessor<E> create(java.util.Queue<E>, reactor.core.Disposable);
    Code:
       0: new           #1                  // class reactor/core/publisher/UnicastProcessor
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #6                  // Method "<init>":(Ljava/util/Queue;Lreactor/core/Disposable;)V
       9: areturn

  public static <E> reactor.core.publisher.UnicastProcessor<E> create(java.util.Queue<E>, java.util.function.Consumer<? super E>, reactor.core.Disposable);
    Code:
       0: new           #1                  // class reactor/core/publisher/UnicastProcessor
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: invokespecial #7                  // Method "<init>":(Ljava/util/Queue;Ljava/util/function/Consumer;Lreactor/core/Disposable;)V
      10: areturn

  public reactor.core.publisher.UnicastProcessor(java.util.Queue<T>);
    Code:
       0: aload_0
       1: invokespecial #8                  // Method reactor/core/publisher/FluxProcessor."<init>":()V
       4: aload_0
       5: aload_1
       6: ldc           #9                  // String queue
       8: invokestatic  #10                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      11: checkcast     #4                  // class java/util/Queue
      14: putfield      #11                 // Field queue:Ljava/util/Queue;
      17: aload_0
      18: aconst_null
      19: putfield      #12                 // Field onTerminate:Lreactor/core/Disposable;
      22: aload_0
      23: aconst_null
      24: putfield      #13                 // Field onOverflow:Ljava/util/function/Consumer;
      27: return

  public reactor.core.publisher.UnicastProcessor(java.util.Queue<T>, reactor.core.Disposable);
    Code:
       0: aload_0
       1: invokespecial #8                  // Method reactor/core/publisher/FluxProcessor."<init>":()V
       4: aload_0
       5: aload_1
       6: ldc           #9                  // String queue
       8: invokestatic  #10                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      11: checkcast     #4                  // class java/util/Queue
      14: putfield      #11                 // Field queue:Ljava/util/Queue;
      17: aload_0
      18: aload_2
      19: ldc           #14                 // String onTerminate
      21: invokestatic  #10                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      24: checkcast     #15                 // class reactor/core/Disposable
      27: putfield      #12                 // Field onTerminate:Lreactor/core/Disposable;
      30: aload_0
      31: aconst_null
      32: putfield      #13                 // Field onOverflow:Ljava/util/function/Consumer;
      35: return

  public reactor.core.publisher.UnicastProcessor(java.util.Queue<T>, java.util.function.Consumer<? super T>, reactor.core.Disposable);
    Code:
       0: aload_0
       1: invokespecial #8                  // Method reactor/core/publisher/FluxProcessor."<init>":()V
       4: aload_0
       5: aload_1
       6: ldc           #9                  // String queue
       8: invokestatic  #10                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      11: checkcast     #4                  // class java/util/Queue
      14: putfield      #11                 // Field queue:Ljava/util/Queue;
      17: aload_0
      18: aload_2
      19: ldc           #16                 // String onOverflow
      21: invokestatic  #10                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      24: checkcast     #17                 // class java/util/function/Consumer
      27: putfield      #13                 // Field onOverflow:Ljava/util/function/Consumer;
      30: aload_0
      31: aload_3
      32: ldc           #14                 // String onTerminate
      34: invokestatic  #10                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      37: checkcast     #15                 // class reactor/core/Disposable
      40: putfield      #12                 // Field onTerminate:Lreactor/core/Disposable;
      43: return

  public int getBufferSize();
    Code:
       0: aload_0
       1: getfield      #11                 // Field queue:Ljava/util/Queue;
       4: invokestatic  #18                 // Method reactor/util/concurrent/Queues.capacity:(Ljava/util/Queue;)I
       7: ireturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: getstatic     #19                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
       3: aload_1
       4: if_acmpne     20
       7: aload_0
       8: getfield      #11                 // Field queue:Ljava/util/Queue;
      11: invokeinterface #20,  1           // InterfaceMethod java/util/Queue.size:()I
      16: invokestatic  #21                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      19: areturn
      20: aload_0
      21: aload_1
      22: invokespecial #22                 // Method reactor/core/publisher/FluxProcessor.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      25: areturn

  void doTerminate();
    Code:
       0: aload_0
       1: getfield      #12                 // Field onTerminate:Lreactor/core/Disposable;
       4: astore_1
       5: aload_1
       6: ifnull        27
       9: getstatic     #23                 // Field ON_TERMINATE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: aload_0
      13: aload_1
      14: aconst_null
      15: invokevirtual #24                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      18: ifeq          27
      21: aload_1
      22: invokeinterface #25,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
      27: return

  void drainRegular(org.reactivestreams.Subscriber<? super T>);
    Code:
       0: iconst_1
       1: istore_2
       2: aload_0
       3: getfield      #11                 // Field queue:Ljava/util/Queue;
       6: astore_3
       7: aload_0
       8: getfield      #26                 // Field requested:J
      11: lstore        4
      13: lconst_0
      14: lstore        6
      16: lload         4
      18: lload         6
      20: lcmp
      21: ifeq          89
      24: aload_0
      25: getfield      #27                 // Field done:Z
      28: istore        8
      30: aload_3
      31: invokeinterface #28,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
      36: astore        9
      38: aload         9
      40: ifnonnull     47
      43: iconst_1
      44: goto          48
      47: iconst_0
      48: istore        10
      50: aload_0
      51: iload         8
      53: iload         10
      55: aload_1
      56: aload_3
      57: invokevirtual #29                 // Method checkTerminated:(ZZLorg/reactivestreams/Subscriber;Ljava/util/Queue;)Z
      60: ifeq          64
      63: return
      64: iload         10
      66: ifeq          72
      69: goto          89
      72: aload_1
      73: aload         9
      75: invokeinterface #30,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
      80: lload         6
      82: lconst_1
      83: ladd
      84: lstore        6
      86: goto          16
      89: lload         4
      91: lload         6
      93: lcmp
      94: ifne          117
      97: aload_0
      98: aload_0
      99: getfield      #27                 // Field done:Z
     102: aload_3
     103: invokeinterface #31,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
     108: aload_1
     109: aload_3
     110: invokevirtual #29                 // Method checkTerminated:(ZZLorg/reactivestreams/Subscriber;Ljava/util/Queue;)Z
     113: ifeq          117
     116: return
     117: lload         6
     119: lconst_0
     120: lcmp
     121: ifeq          144
     124: lload         4
     126: ldc2_w        #33                 // long 9223372036854775807l
     129: lcmp
     130: ifeq          144
     133: getstatic     #35                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
     136: aload_0
     137: lload         6
     139: lneg
     140: invokevirtual #36                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.addAndGet:(Ljava/lang/Object;J)J
     143: pop2
     144: getstatic     #37                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     147: aload_0
     148: iload_2
     149: ineg
     150: invokevirtual #38                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
     153: istore_2
     154: iload_2
     155: ifne          161
     158: goto          164
     161: goto          7
     164: return

  void drainFused(org.reactivestreams.Subscriber<? super T>);
    Code:
       0: iconst_1
       1: istore_2
       2: aload_0
       3: getfield      #11                 // Field queue:Ljava/util/Queue;
       6: astore_3
       7: aload_0
       8: getfield      #39                 // Field cancelled:Z
      11: ifeq          26
      14: aload_3
      15: invokeinterface #40,  1           // InterfaceMethod java/util/Queue.clear:()V
      20: aload_0
      21: aconst_null
      22: putfield      #41                 // Field actual:Lreactor/core/CoreSubscriber;
      25: return
      26: aload_0
      27: getfield      #27                 // Field done:Z
      30: istore        4
      32: aload_1
      33: aconst_null
      34: invokeinterface #30,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
      39: iload         4
      41: ifeq          78
      44: aload_0
      45: aconst_null
      46: putfield      #41                 // Field actual:Lreactor/core/CoreSubscriber;
      49: aload_0
      50: getfield      #42                 // Field error:Ljava/lang/Throwable;
      53: astore        5
      55: aload         5
      57: ifnull        71
      60: aload_1
      61: aload         5
      63: invokeinterface #43,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      68: goto          77
      71: aload_1
      72: invokeinterface #44,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      77: return
      78: getstatic     #37                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      81: aload_0
      82: iload_2
      83: ineg
      84: invokevirtual #38                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
      87: istore_2
      88: iload_2
      89: ifne          95
      92: goto          98
      95: goto          7
      98: return

  void drain();
    Code:
       0: getstatic     #37                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #45                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifeq          11
      10: return
      11: iconst_1
      12: istore_1
      13: aload_0
      14: getfield      #41                 // Field actual:Lreactor/core/CoreSubscriber;
      17: astore_2
      18: aload_2
      19: ifnull        43
      22: aload_0
      23: getfield      #46                 // Field outputFused:Z
      26: ifeq          37
      29: aload_0
      30: aload_2
      31: invokevirtual #47                 // Method drainFused:(Lorg/reactivestreams/Subscriber;)V
      34: goto          42
      37: aload_0
      38: aload_2
      39: invokevirtual #48                 // Method drainRegular:(Lorg/reactivestreams/Subscriber;)V
      42: return
      43: getstatic     #37                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      46: aload_0
      47: iload_1
      48: ineg
      49: invokevirtual #38                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
      52: istore_1
      53: iload_1
      54: ifne          60
      57: goto          63
      60: goto          13
      63: return

  boolean checkTerminated(boolean, boolean, org.reactivestreams.Subscriber<? super T>, java.util.Queue<T>);
    Code:
       0: aload_0
       1: getfield      #39                 // Field cancelled:Z
       4: ifeq          21
       7: aload         4
       9: invokeinterface #40,  1           // InterfaceMethod java/util/Queue.clear:()V
      14: aload_0
      15: aconst_null
      16: putfield      #41                 // Field actual:Lreactor/core/CoreSubscriber;
      19: iconst_1
      20: ireturn
      21: iload_1
      22: ifeq          64
      25: iload_2
      26: ifeq          64
      29: aload_0
      30: getfield      #42                 // Field error:Ljava/lang/Throwable;
      33: astore        5
      35: aload_0
      36: aconst_null
      37: putfield      #41                 // Field actual:Lreactor/core/CoreSubscriber;
      40: aload         5
      42: ifnull        56
      45: aload_3
      46: aload         5
      48: invokeinterface #43,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      53: goto          62
      56: aload_3
      57: invokeinterface #44,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      62: iconst_1
      63: ireturn
      64: iconst_0
      65: ireturn

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #27                 // Field done:Z
       4: ifne          14
       7: aload_0
       8: getfield      #39                 // Field cancelled:Z
      11: ifeq          23
      14: aload_1
      15: invokeinterface #49,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      20: goto          32
      23: aload_1
      24: ldc2_w        #33                 // long 9223372036854775807l
      27: invokeinterface #50,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      32: return

  public int getPrefetch();
    Code:
       0: ldc           #52                 // int 2147483647
       2: ireturn

  public reactor.util.context.Context currentContext();
    Code:
       0: aload_0
       1: getfield      #41                 // Field actual:Lreactor/core/CoreSubscriber;
       4: astore_1
       5: aload_1
       6: ifnull        18
       9: aload_1
      10: invokeinterface #53,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      15: goto          21
      18: invokestatic  #54                 // InterfaceMethod reactor/util/context/Context.empty:()Lreactor/util/context/Context;
      21: areturn

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #27                 // Field done:Z
       4: ifne          14
       7: aload_0
       8: getfield      #39                 // Field cancelled:Z
      11: ifeq          23
      14: aload_1
      15: aload_0
      16: invokevirtual #55                 // Method currentContext:()Lreactor/util/context/Context;
      19: invokestatic  #56                 // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      22: return
      23: aload_0
      24: getfield      #11                 // Field queue:Ljava/util/Queue;
      27: aload_1
      28: invokeinterface #57,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
      33: ifne          95
      36: aconst_null
      37: invokestatic  #58                 // Method reactor/core/Exceptions.failWithOverflow:()Ljava/lang/IllegalStateException;
      40: aload_1
      41: aload_0
      42: invokevirtual #55                 // Method currentContext:()Lreactor/util/context/Context;
      45: invokestatic  #59                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      48: astore_2
      49: aload_0
      50: getfield      #13                 // Field onOverflow:Ljava/util/function/Consumer;
      53: ifnull        80
      56: aload_0
      57: getfield      #13                 // Field onOverflow:Ljava/util/function/Consumer;
      60: aload_1
      61: invokeinterface #60,  2           // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
      66: goto          80
      69: astore_3
      70: aload_3
      71: invokestatic  #62                 // Method reactor/core/Exceptions.throwIfFatal:(Ljava/lang/Throwable;)V
      74: aload_2
      75: aload_3
      76: invokevirtual #63                 // Method java/lang/Throwable.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;
      79: pop
      80: aload_0
      81: aconst_null
      82: aload_2
      83: aload_1
      84: aload_0
      85: invokevirtual #55                 // Method currentContext:()Lreactor/util/context/Context;
      88: invokestatic  #59                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      91: invokevirtual #64                 // Method onError:(Ljava/lang/Throwable;)V
      94: return
      95: aload_0
      96: invokevirtual #65                 // Method drain:()V
      99: return
    Exception table:
       from    to  target type
          56    66    69   Class java/lang/Throwable

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #27                 // Field done:Z
       4: ifne          14
       7: aload_0
       8: getfield      #39                 // Field cancelled:Z
      11: ifeq          23
      14: aload_1
      15: aload_0
      16: invokevirtual #55                 // Method currentContext:()Lreactor/util/context/Context;
      19: invokestatic  #66                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      22: return
      23: aload_0
      24: aload_1
      25: putfield      #42                 // Field error:Ljava/lang/Throwable;
      28: aload_0
      29: iconst_1
      30: putfield      #27                 // Field done:Z
      33: aload_0
      34: invokevirtual #67                 // Method doTerminate:()V
      37: aload_0
      38: invokevirtual #65                 // Method drain:()V
      41: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #27                 // Field done:Z
       4: ifne          14
       7: aload_0
       8: getfield      #39                 // Field cancelled:Z
      11: ifeq          15
      14: return
      15: aload_0
      16: iconst_1
      17: putfield      #27                 // Field done:Z
      20: aload_0
      21: invokevirtual #67                 // Method doTerminate:()V
      24: aload_0
      25: invokevirtual #65                 // Method drain:()V
      28: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_1
       1: ldc           #68                 // String subscribe
       3: invokestatic  #10                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: getfield      #69                 // Field once:I
      11: ifne          60
      14: getstatic     #70                 // Field ONCE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      17: aload_0
      18: iconst_0
      19: iconst_1
      20: invokevirtual #71                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      23: ifeq          60
      26: aload_1
      27: aload_0
      28: invokeinterface #72,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      33: aload_0
      34: aload_1
      35: putfield      #41                 // Field actual:Lreactor/core/CoreSubscriber;
      38: aload_0
      39: getfield      #39                 // Field cancelled:Z
      42: ifeq          53
      45: aload_0
      46: aconst_null
      47: putfield      #41                 // Field actual:Lreactor/core/CoreSubscriber;
      50: goto          73
      53: aload_0
      54: invokevirtual #65                 // Method drain:()V
      57: goto          73
      60: aload_1
      61: new           #73                 // class java/lang/IllegalStateException
      64: dup
      65: ldc           #74                 // String UnicastProcessor allows only a single Subscriber
      67: invokespecial #75                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      70: invokestatic  #76                 // Method reactor/core/publisher/Operators.error:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
      73: return

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #77                 // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          20
       7: getstatic     #35                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      10: aload_0
      11: lload_1
      12: invokestatic  #78                 // Method reactor/core/publisher/Operators.addCap:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
      15: pop2
      16: aload_0
      17: invokevirtual #65                 // Method drain:()V
      20: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #39                 // Field cancelled:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #39                 // Field cancelled:Z
      13: aload_0
      14: invokevirtual #67                 // Method doTerminate:()V
      17: aload_0
      18: getfield      #46                 // Field outputFused:Z
      21: ifne          48
      24: getstatic     #37                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      27: aload_0
      28: invokevirtual #45                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
      31: ifne          48
      34: aload_0
      35: getfield      #11                 // Field queue:Ljava/util/Queue;
      38: invokeinterface #40,  1           // InterfaceMethod java/util/Queue.clear:()V
      43: aload_0
      44: aconst_null
      45: putfield      #41                 // Field actual:Lreactor/core/CoreSubscriber;
      48: return

  public T poll();
    Code:
       0: aload_0
       1: getfield      #11                 // Field queue:Ljava/util/Queue;
       4: invokeinterface #28,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
       9: areturn

  public int size();
    Code:
       0: aload_0
       1: getfield      #11                 // Field queue:Ljava/util/Queue;
       4: invokeinterface #20,  1           // InterfaceMethod java/util/Queue.size:()I
       9: ireturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #11                 // Field queue:Ljava/util/Queue;
       4: invokeinterface #31,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
       9: ireturn

  public void clear();
    Code:
       0: aload_0
       1: getfield      #11                 // Field queue:Ljava/util/Queue;
       4: invokeinterface #40,  1           // InterfaceMethod java/util/Queue.clear:()V
       9: return

  public int requestFusion(int);
    Code:
       0: iload_1
       1: iconst_2
       2: iand
       3: ifeq          13
       6: aload_0
       7: iconst_1
       8: putfield      #46                 // Field outputFused:Z
      11: iconst_2
      12: ireturn
      13: iconst_0
      14: ireturn

  public boolean isDisposed();
    Code:
       0: aload_0
       1: getfield      #39                 // Field cancelled:Z
       4: ifne          14
       7: aload_0
       8: getfield      #27                 // Field done:Z
      11: ifeq          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn

  public boolean isTerminated();
    Code:
       0: aload_0
       1: getfield      #27                 // Field done:Z
       4: ireturn

  public java.lang.Throwable getError();
    Code:
       0: aload_0
       1: getfield      #42                 // Field error:Ljava/lang/Throwable;
       4: areturn

  public reactor.core.CoreSubscriber<? super T> actual();
    Code:
       0: aload_0
       1: getfield      #41                 // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public long downstreamCount();
    Code:
       0: aload_0
       1: invokevirtual #80                 // Method hasDownstreams:()Z
       4: ifeq          11
       7: lconst_1
       8: goto          12
      11: lconst_0
      12: lreturn

  public boolean hasDownstreams();
    Code:
       0: aload_0
       1: getfield      #41                 // Field actual:Lreactor/core/CoreSubscriber;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  static {};
    Code:
       0: ldc           #1                  // class reactor/core/publisher/UnicastProcessor
       2: ldc           #15                 // class reactor/core/Disposable
       4: ldc           #14                 // String onTerminate
       6: invokestatic  #81                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #23                 // Field ON_TERMINATE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: ldc           #1                  // class reactor/core/publisher/UnicastProcessor
      14: ldc           #82                 // String once
      16: invokestatic  #83                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      19: putstatic     #70                 // Field ONCE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      22: ldc           #1                  // class reactor/core/publisher/UnicastProcessor
      24: ldc           #84                 // String wip
      26: invokestatic  #83                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      29: putstatic     #37                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      32: ldc           #1                  // class reactor/core/publisher/UnicastProcessor
      34: ldc           #85                 // String requested
      36: invokestatic  #86                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      39: putstatic     #35                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      42: return
}
