Compiled from "FluxUsing.java"
final class reactor.core.publisher.FluxUsing<T, S> extends reactor.core.publisher.Flux<T> implements reactor.core.Fuseable {
  final java.util.concurrent.Callable<S> resourceSupplier;

  final java.util.function.Function<? super S, ? extends org.reactivestreams.Publisher<? extends T>> sourceFactory;

  final java.util.function.Consumer<? super S> resourceCleanup;

  final boolean eager;

  reactor.core.publisher.FluxUsing(java.util.concurrent.Callable<S>, java.util.function.Function<? super S, ? extends org.reactivestreams.Publisher<? extends T>>, java.util.function.Consumer<? super S>, boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/Flux."<init>":()V
       4: aload_0
       5: aload_1
       6: ldc           #2                  // String resourceSupplier
       8: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      11: checkcast     #4                  // class java/util/concurrent/Callable
      14: putfield      #5                  // Field resourceSupplier:Ljava/util/concurrent/Callable;
      17: aload_0
      18: aload_2
      19: ldc           #6                  // String sourceFactory
      21: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      24: checkcast     #7                  // class java/util/function/Function
      27: putfield      #8                  // Field sourceFactory:Ljava/util/function/Function;
      30: aload_0
      31: aload_3
      32: ldc           #9                  // String resourceCleanup
      34: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      37: checkcast     #10                 // class java/util/function/Consumer
      40: putfield      #11                 // Field resourceCleanup:Ljava/util/function/Consumer;
      43: aload_0
      44: iload         4
      46: putfield      #12                 // Field eager:Z
      49: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: getfield      #5                  // Field resourceSupplier:Ljava/util/concurrent/Callable;
       4: invokeinterface #13,  1           // InterfaceMethod java/util/concurrent/Callable.call:()Ljava/lang/Object;
       9: astore_2
      10: goto          29
      13: astore_3
      14: aload_1
      15: aload_3
      16: aload_1
      17: invokeinterface #15,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      22: invokestatic  #16                 // Method reactor/core/publisher/Operators.onOperatorError:(Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      25: invokestatic  #17                 // Method reactor/core/publisher/Operators.error:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
      28: return
      29: aload_0
      30: getfield      #8                  // Field sourceFactory:Ljava/util/function/Function;
      33: aload_2
      34: invokeinterface #18,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      39: ldc           #19                 // String The sourceFactory returned a null value
      41: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      44: checkcast     #20                 // class org/reactivestreams/Publisher
      47: astore_3
      48: goto          97
      51: astore        4
      53: aload         4
      55: aload_1
      56: invokeinterface #15,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      61: invokestatic  #16                 // Method reactor/core/publisher/Operators.onOperatorError:(Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      64: astore        5
      66: aload_0
      67: getfield      #11                 // Field resourceCleanup:Ljava/util/function/Consumer;
      70: aload_2
      71: invokeinterface #21,  2           // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
      76: goto          90
      79: astore        6
      81: aload         6
      83: aload         5
      85: invokestatic  #22                 // Method reactor/core/Exceptions.addSuppressed:(Ljava/lang/Throwable;Ljava/lang/Throwable;)Ljava/lang/Throwable;
      88: astore        5
      90: aload_1
      91: aload         5
      93: invokestatic  #17                 // Method reactor/core/publisher/Operators.error:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
      96: return
      97: aload_3
      98: instanceof    #23                 // class reactor/core/Fuseable
     101: ifeq          131
     104: aload_3
     105: invokestatic  #24                 // Method from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
     108: new           #25                 // class reactor/core/publisher/FluxUsing$UsingFuseableSubscriber
     111: dup
     112: aload_1
     113: aload_0
     114: getfield      #11                 // Field resourceCleanup:Ljava/util/function/Consumer;
     117: aload_2
     118: aload_0
     119: getfield      #12                 // Field eager:Z
     122: invokespecial #26                 // Method reactor/core/publisher/FluxUsing$UsingFuseableSubscriber."<init>":(Lreactor/core/CoreSubscriber;Ljava/util/function/Consumer;Ljava/lang/Object;Z)V
     125: invokevirtual #27                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
     128: goto          192
     131: aload_1
     132: instanceof    #28                 // class reactor/core/Fuseable$ConditionalSubscriber
     135: ifeq          168
     138: aload_3
     139: invokestatic  #24                 // Method from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
     142: new           #29                 // class reactor/core/publisher/FluxUsing$UsingConditionalSubscriber
     145: dup
     146: aload_1
     147: checkcast     #28                 // class reactor/core/Fuseable$ConditionalSubscriber
     150: aload_0
     151: getfield      #11                 // Field resourceCleanup:Ljava/util/function/Consumer;
     154: aload_2
     155: aload_0
     156: getfield      #12                 // Field eager:Z
     159: invokespecial #30                 // Method reactor/core/publisher/FluxUsing$UsingConditionalSubscriber."<init>":(Lreactor/core/Fuseable$ConditionalSubscriber;Ljava/util/function/Consumer;Ljava/lang/Object;Z)V
     162: invokevirtual #27                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
     165: goto          192
     168: aload_3
     169: invokestatic  #24                 // Method from:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
     172: new           #31                 // class reactor/core/publisher/FluxUsing$UsingSubscriber
     175: dup
     176: aload_1
     177: aload_0
     178: getfield      #11                 // Field resourceCleanup:Ljava/util/function/Consumer;
     181: aload_2
     182: aload_0
     183: getfield      #12                 // Field eager:Z
     186: invokespecial #32                 // Method reactor/core/publisher/FluxUsing$UsingSubscriber."<init>":(Lreactor/core/CoreSubscriber;Ljava/util/function/Consumer;Ljava/lang/Object;Z)V
     189: invokevirtual #27                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
     192: return
    Exception table:
       from    to  target type
           0    10    13   Class java/lang/Throwable
          29    48    51   Class java/lang/Throwable
          66    76    79   Class java/lang/Throwable
}
