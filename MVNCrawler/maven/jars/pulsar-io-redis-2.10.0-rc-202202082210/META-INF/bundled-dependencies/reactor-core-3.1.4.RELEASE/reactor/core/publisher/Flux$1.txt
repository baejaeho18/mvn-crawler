Compiled from "Flux.java"
final class reactor.core.publisher.Flux$1 implements java.util.function.Function<java.util.List<? extends org.reactivestreams.Publisher<?>>, org.reactivestreams.Publisher<V>> {
  final java.util.function.Function val$combinator;

  reactor.core.publisher.Flux$1(java.util.function.Function);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field val$combinator:Ljava/util/function/Function;
       5: aload_0
       6: invokespecial #2                  // Method java/lang/Object."<init>":()V
       9: return

  public org.reactivestreams.Publisher<V> apply(java.util.List<? extends org.reactivestreams.Publisher<?>>);
    Code:
       0: aload_0
       1: getfield      #1                  // Field val$combinator:Ljava/util/function/Function;
       4: invokestatic  #3                  // Method reactor/util/function/Tuples.fnAny:(Ljava/util/function/Function;)Ljava/util/function/Function;
       7: aload_1
       8: aload_1
       9: invokeinterface #4,  1            // InterfaceMethod java/util/List.size:()I
      14: anewarray     #5                  // class org/reactivestreams/Publisher
      17: invokeinterface #6,  2            // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      22: checkcast     #7                  // class "[Lorg/reactivestreams/Publisher;"
      25: invokestatic  #8                  // Method reactor/core/publisher/Flux.zip:(Ljava/util/function/Function;[Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
      28: areturn

  public java.lang.Object apply(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #9                  // class java/util/List
       5: invokevirtual #10                 // Method apply:(Ljava/util/List;)Lorg/reactivestreams/Publisher;
       8: areturn
}
