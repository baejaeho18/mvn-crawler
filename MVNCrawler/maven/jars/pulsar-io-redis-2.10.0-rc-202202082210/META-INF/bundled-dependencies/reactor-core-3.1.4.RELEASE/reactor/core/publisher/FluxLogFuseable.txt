Compiled from "FluxLogFuseable.java"
final class reactor.core.publisher.FluxLogFuseable<T> extends reactor.core.publisher.FluxOperator<T, T> implements reactor.core.Fuseable {
  final reactor.core.publisher.SignalPeek<T> log;

  reactor.core.publisher.FluxLogFuseable(reactor.core.publisher.Flux<? extends T>, reactor.core.publisher.SignalPeek<T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxOperator."<init>":(Lreactor/core/publisher/Flux;)V
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field log:Lreactor/core/publisher/SignalPeek;
      10: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_1
       1: instanceof    #3                  // class reactor/core/Fuseable$ConditionalSubscriber
       4: ifeq          30
       7: aload_0
       8: getfield      #4                  // Field source:Lreactor/core/publisher/Flux;
      11: new           #5                  // class reactor/core/publisher/FluxPeekFuseable$PeekFuseableConditionalSubscriber
      14: dup
      15: aload_1
      16: checkcast     #3                  // class reactor/core/Fuseable$ConditionalSubscriber
      19: aload_0
      20: getfield      #2                  // Field log:Lreactor/core/publisher/SignalPeek;
      23: invokespecial #6                  // Method reactor/core/publisher/FluxPeekFuseable$PeekFuseableConditionalSubscriber."<init>":(Lreactor/core/Fuseable$ConditionalSubscriber;Lreactor/core/publisher/SignalPeek;)V
      26: invokevirtual #7                  // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      29: return
      30: aload_0
      31: getfield      #4                  // Field source:Lreactor/core/publisher/Flux;
      34: new           #8                  // class reactor/core/publisher/FluxPeekFuseable$PeekFuseableSubscriber
      37: dup
      38: aload_1
      39: aload_0
      40: getfield      #2                  // Field log:Lreactor/core/publisher/SignalPeek;
      43: invokespecial #9                  // Method reactor/core/publisher/FluxPeekFuseable$PeekFuseableSubscriber."<init>":(Lreactor/core/CoreSubscriber;Lreactor/core/publisher/SignalPeek;)V
      46: invokevirtual #7                  // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      49: return
}
