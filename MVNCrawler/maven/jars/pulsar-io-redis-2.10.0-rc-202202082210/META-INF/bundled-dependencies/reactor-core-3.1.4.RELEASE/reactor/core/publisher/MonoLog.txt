Compiled from "MonoLog.java"
final class reactor.core.publisher.MonoLog<T> extends reactor.core.publisher.MonoOperator<T, T> {
  final reactor.core.publisher.SignalPeek<T> log;

  reactor.core.publisher.MonoLog(reactor.core.publisher.Mono<? extends T>, reactor.core.publisher.SignalPeek<T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/MonoOperator."<init>":(Lreactor/core/publisher/Mono;)V
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field log:Lreactor/core/publisher/SignalPeek;
      10: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_1
       1: instanceof    #3                  // class reactor/core/Fuseable$ConditionalSubscriber
       4: ifeq          32
       7: aload_1
       8: checkcast     #3                  // class reactor/core/Fuseable$ConditionalSubscriber
      11: astore_2
      12: aload_0
      13: getfield      #4                  // Field source:Lreactor/core/publisher/Mono;
      16: new           #5                  // class reactor/core/publisher/FluxPeekFuseable$PeekConditionalSubscriber
      19: dup
      20: aload_2
      21: aload_0
      22: getfield      #2                  // Field log:Lreactor/core/publisher/SignalPeek;
      25: invokespecial #6                  // Method reactor/core/publisher/FluxPeekFuseable$PeekConditionalSubscriber."<init>":(Lreactor/core/Fuseable$ConditionalSubscriber;Lreactor/core/publisher/SignalPeek;)V
      28: invokevirtual #7                  // Method reactor/core/publisher/Mono.subscribe:(Lreactor/core/CoreSubscriber;)V
      31: return
      32: aload_0
      33: getfield      #4                  // Field source:Lreactor/core/publisher/Mono;
      36: new           #8                  // class reactor/core/publisher/FluxPeek$PeekSubscriber
      39: dup
      40: aload_1
      41: aload_0
      42: getfield      #2                  // Field log:Lreactor/core/publisher/SignalPeek;
      45: invokespecial #9                  // Method reactor/core/publisher/FluxPeek$PeekSubscriber."<init>":(Lreactor/core/CoreSubscriber;Lreactor/core/publisher/SignalPeek;)V
      48: invokevirtual #7                  // Method reactor/core/publisher/Mono.subscribe:(Lreactor/core/CoreSubscriber;)V
      51: return
}
