Compiled from "ParallelFlatMap.java"
final class reactor.core.publisher.ParallelFlatMap<T, R> extends reactor.core.publisher.ParallelFlux<R> implements reactor.core.Scannable {
  final reactor.core.publisher.ParallelFlux<T> source;

  final java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>> mapper;

  final boolean delayError;

  final int maxConcurrency;

  final java.util.function.Supplier<? extends java.util.Queue<R>> mainQueueSupplier;

  final int prefetch;

  final java.util.function.Supplier<? extends java.util.Queue<R>> innerQueueSupplier;

  reactor.core.publisher.ParallelFlatMap(reactor.core.publisher.ParallelFlux<T>, java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>>, boolean, int, java.util.function.Supplier<? extends java.util.Queue<R>>, int, java.util.function.Supplier<? extends java.util.Queue<R>>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/ParallelFlux."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field source:Lreactor/core/publisher/ParallelFlux;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field mapper:Ljava/util/function/Function;
      14: aload_0
      15: iload_3
      16: putfield      #4                  // Field delayError:Z
      19: aload_0
      20: iload         4
      22: putfield      #5                  // Field maxConcurrency:I
      25: aload_0
      26: aload         5
      28: putfield      #6                  // Field mainQueueSupplier:Ljava/util/function/Supplier;
      31: aload_0
      32: iload         6
      34: putfield      #7                  // Field prefetch:I
      37: aload_0
      38: aload         7
      40: putfield      #8                  // Field innerQueueSupplier:Ljava/util/function/Supplier;
      43: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #9                  // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #2                  // Field source:Lreactor/core/publisher/ParallelFlux;
      11: areturn
      12: aload_1
      13: getstatic     #10                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      16: if_acmpne     27
      19: aload_0
      20: invokevirtual #11                 // Method getPrefetch:()I
      23: invokestatic  #12                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      26: areturn
      27: aload_1
      28: getstatic     #13                 // Field reactor/core/Scannable$Attr.DELAY_ERROR:Lreactor/core/Scannable$Attr;
      31: if_acmpne     42
      34: aload_0
      35: getfield      #4                  // Field delayError:Z
      38: invokestatic  #14                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      41: areturn
      42: aconst_null
      43: areturn

  public int getPrefetch();
    Code:
       0: aload_0
       1: getfield      #7                  // Field prefetch:I
       4: ireturn

  public int parallelism();
    Code:
       0: aload_0
       1: getfield      #2                  // Field source:Lreactor/core/publisher/ParallelFlux;
       4: invokevirtual #15                 // Method reactor/core/publisher/ParallelFlux.parallelism:()I
       7: ireturn

  public void subscribe(reactor.core.CoreSubscriber<? super R>[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #16                 // Method validate:([Lorg/reactivestreams/Subscriber;)Z
       5: ifne          9
       8: return
       9: aload_1
      10: arraylength
      11: istore_2
      12: iload_2
      13: anewarray     #17                 // class reactor/core/CoreSubscriber
      16: astore_3
      17: iconst_0
      18: istore        4
      20: iload         4
      22: iload_2
      23: if_icmpge     71
      26: aload_3
      27: iload         4
      29: new           #18                 // class reactor/core/publisher/FluxFlatMap$FlatMapMain
      32: dup
      33: aload_1
      34: iload         4
      36: aaload
      37: aload_0
      38: getfield      #3                  // Field mapper:Ljava/util/function/Function;
      41: aload_0
      42: getfield      #4                  // Field delayError:Z
      45: aload_0
      46: getfield      #5                  // Field maxConcurrency:I
      49: aload_0
      50: getfield      #6                  // Field mainQueueSupplier:Ljava/util/function/Supplier;
      53: aload_0
      54: getfield      #7                  // Field prefetch:I
      57: aload_0
      58: getfield      #8                  // Field innerQueueSupplier:Ljava/util/function/Supplier;
      61: invokespecial #19                 // Method reactor/core/publisher/FluxFlatMap$FlatMapMain."<init>":(Lreactor/core/CoreSubscriber;Ljava/util/function/Function;ZILjava/util/function/Supplier;ILjava/util/function/Supplier;)V
      64: aastore
      65: iinc          4, 1
      68: goto          20
      71: aload_0
      72: getfield      #2                  // Field source:Lreactor/core/publisher/ParallelFlux;
      75: aload_3
      76: invokevirtual #20                 // Method reactor/core/publisher/ParallelFlux.subscribe:([Lreactor/core/CoreSubscriber;)V
      79: return
}
