Compiled from "FluxMapFuseable.java"
final class reactor.core.publisher.FluxMapFuseable<T, R> extends reactor.core.publisher.FluxOperator<T, R> implements reactor.core.Fuseable {
  final java.util.function.Function<? super T, ? extends R> mapper;

  reactor.core.publisher.FluxMapFuseable(reactor.core.publisher.Flux<? extends T>, java.util.function.Function<? super T, ? extends R>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxOperator."<init>":(Lreactor/core/publisher/Flux;)V
       5: aload_0
       6: aload_2
       7: ldc           #2                  // String mapper
       9: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      12: checkcast     #4                  // class java/util/function/Function
      15: putfield      #5                  // Field mapper:Ljava/util/function/Function;
      18: return

  public void subscribe(reactor.core.CoreSubscriber<? super R>);
    Code:
       0: aload_1
       1: instanceof    #6                  // class reactor/core/Fuseable$ConditionalSubscriber
       4: ifeq          32
       7: aload_1
       8: checkcast     #6                  // class reactor/core/Fuseable$ConditionalSubscriber
      11: astore_2
      12: aload_0
      13: getfield      #7                  // Field source:Lreactor/core/publisher/Flux;
      16: new           #8                  // class reactor/core/publisher/FluxMapFuseable$MapFuseableConditionalSubscriber
      19: dup
      20: aload_2
      21: aload_0
      22: getfield      #5                  // Field mapper:Ljava/util/function/Function;
      25: invokespecial #9                  // Method reactor/core/publisher/FluxMapFuseable$MapFuseableConditionalSubscriber."<init>":(Lreactor/core/Fuseable$ConditionalSubscriber;Ljava/util/function/Function;)V
      28: invokevirtual #10                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      31: return
      32: aload_0
      33: getfield      #7                  // Field source:Lreactor/core/publisher/Flux;
      36: new           #11                 // class reactor/core/publisher/FluxMapFuseable$MapFuseableSubscriber
      39: dup
      40: aload_1
      41: aload_0
      42: getfield      #5                  // Field mapper:Ljava/util/function/Function;
      45: invokespecial #12                 // Method reactor/core/publisher/FluxMapFuseable$MapFuseableSubscriber."<init>":(Lreactor/core/CoreSubscriber;Ljava/util/function/Function;)V
      48: invokevirtual #10                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      51: return
}
