Compiled from "FluxFlatMap.java"
final class reactor.core.publisher.FluxFlatMap$FlatMapInner<R> implements reactor.core.publisher.InnerConsumer<R>, org.reactivestreams.Subscription {
  final reactor.core.publisher.FluxFlatMap$FlatMapMain<?, R> parent;

  final int prefetch;

  final int limit;

  volatile org.reactivestreams.Subscription s;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxFlatMap$FlatMapInner, org.reactivestreams.Subscription> S;

  long produced;

  volatile java.util.Queue<R> queue;

  volatile boolean done;

  int sourceMode;

  int index;

  reactor.core.publisher.FluxFlatMap$FlatMapInner(reactor.core.publisher.FluxFlatMap$FlatMapMain<?, R>, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field parent:Lreactor/core/publisher/FluxFlatMap$FlatMapMain;
       9: aload_0
      10: iload_2
      11: putfield      #3                  // Field prefetch:I
      14: aload_0
      15: iload_2
      16: invokestatic  #4                  // Method reactor/core/publisher/Operators.unboundedOrLimit:(I)I
      19: putfield      #5                  // Field limit:I
      22: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: getstatic     #6                  // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #7                  // Method reactor/core/publisher/Operators.setOnce:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          88
      11: aload_1
      12: instanceof    #8                  // class reactor/core/Fuseable$QueueSubscription
      15: ifeq          75
      18: aload_1
      19: checkcast     #8                  // class reactor/core/Fuseable$QueueSubscription
      22: astore_2
      23: aload_2
      24: bipush        7
      26: invokeinterface #10,  2           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.requestFusion:(I)I
      31: istore_3
      32: iload_3
      33: iconst_1
      34: if_icmpne     60
      37: aload_0
      38: iconst_1
      39: putfield      #11                 // Field sourceMode:I
      42: aload_0
      43: aload_2
      44: putfield      #12                 // Field queue:Ljava/util/Queue;
      47: aload_0
      48: iconst_1
      49: putfield      #13                 // Field done:Z
      52: aload_0
      53: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxFlatMap$FlatMapMain;
      56: invokevirtual #14                 // Method reactor/core/publisher/FluxFlatMap$FlatMapMain.drain:()V
      59: return
      60: iload_3
      61: iconst_2
      62: if_icmpne     75
      65: aload_0
      66: iconst_2
      67: putfield      #11                 // Field sourceMode:I
      70: aload_0
      71: aload_2
      72: putfield      #12                 // Field queue:Ljava/util/Queue;
      75: aload_1
      76: aload_0
      77: getfield      #3                  // Field prefetch:I
      80: invokestatic  #15                 // Method reactor/core/publisher/Operators.unboundedOrPrefetch:(I)J
      83: invokeinterface #16,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      88: return

  public void onNext(R);
    Code:
       0: aload_0
       1: getfield      #11                 // Field sourceMode:I
       4: iconst_2
       5: if_icmpne     18
       8: aload_0
       9: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxFlatMap$FlatMapMain;
      12: invokevirtual #14                 // Method reactor/core/publisher/FluxFlatMap$FlatMapMain.drain:()V
      15: goto          27
      18: aload_0
      19: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxFlatMap$FlatMapMain;
      22: aload_0
      23: aload_1
      24: invokevirtual #17                 // Method reactor/core/publisher/FluxFlatMap$FlatMapMain.tryEmit:(Lreactor/core/publisher/FluxFlatMap$FlatMapInner;Ljava/lang/Object;)V
      27: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #13                 // Field done:Z
       5: aload_0
       6: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxFlatMap$FlatMapMain;
       9: aload_0
      10: aload_1
      11: invokevirtual #18                 // Method reactor/core/publisher/FluxFlatMap$FlatMapMain.innerError:(Lreactor/core/publisher/FluxFlatMap$FlatMapInner;Ljava/lang/Throwable;)V
      14: return

  public void onComplete();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #13                 // Field done:Z
       5: aload_0
       6: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxFlatMap$FlatMapMain;
       9: aload_0
      10: invokevirtual #19                 // Method reactor/core/publisher/FluxFlatMap$FlatMapMain.innerComplete:(Lreactor/core/publisher/FluxFlatMap$FlatMapInner;)V
      13: return

  public void request(long);
    Code:
       0: aload_0
       1: getfield      #20                 // Field produced:J
       4: lload_1
       5: ladd
       6: lstore_3
       7: lload_3
       8: aload_0
       9: getfield      #5                  // Field limit:I
      12: i2l
      13: lcmp
      14: iflt          35
      17: aload_0
      18: lconst_0
      19: putfield      #20                 // Field produced:J
      22: aload_0
      23: getfield      #21                 // Field s:Lorg/reactivestreams/Subscription;
      26: lload_3
      27: invokeinterface #16,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      32: goto          40
      35: aload_0
      36: lload_3
      37: putfield      #20                 // Field produced:J
      40: return

  public reactor.util.context.Context currentContext();
    Code:
       0: aload_0
       1: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxFlatMap$FlatMapMain;
       4: invokevirtual #22                 // Method reactor/core/publisher/FluxFlatMap$FlatMapMain.currentContext:()Lreactor/util/context/Context;
       7: areturn

  public void cancel();
    Code:
       0: getstatic     #6                  // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokestatic  #23                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
       7: pop
       8: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #24                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #21                 // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #25                 // Field reactor/core/Scannable$Attr.ACTUAL:Lreactor/core/Scannable$Attr;
      16: if_acmpne     24
      19: aload_0
      20: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxFlatMap$FlatMapMain;
      23: areturn
      24: aload_1
      25: getstatic     #26                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      28: if_acmpne     66
      31: aload_0
      32: getfield      #13                 // Field done:Z
      35: ifeq          61
      38: aload_0
      39: getfield      #12                 // Field queue:Ljava/util/Queue;
      42: ifnull        57
      45: aload_0
      46: getfield      #12                 // Field queue:Ljava/util/Queue;
      49: invokeinterface #27,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
      54: ifeq          61
      57: iconst_1
      58: goto          62
      61: iconst_0
      62: invokestatic  #28                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      65: areturn
      66: aload_1
      67: getstatic     #29                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      70: if_acmpne     92
      73: aload_0
      74: getfield      #21                 // Field s:Lorg/reactivestreams/Subscription;
      77: invokestatic  #30                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      80: if_acmpne     87
      83: iconst_1
      84: goto          88
      87: iconst_0
      88: invokestatic  #28                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      91: areturn
      92: aload_1
      93: getstatic     #31                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      96: if_acmpne     123
      99: aload_0
     100: getfield      #12                 // Field queue:Ljava/util/Queue;
     103: ifnonnull     110
     106: iconst_0
     107: goto          119
     110: aload_0
     111: getfield      #12                 // Field queue:Ljava/util/Queue;
     114: invokeinterface #32,  1           // InterfaceMethod java/util/Queue.size:()I
     119: invokestatic  #33                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     122: areturn
     123: aload_1
     124: getstatic     #34                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
     127: if_acmpne     138
     130: aload_0
     131: getfield      #3                  // Field prefetch:I
     134: invokestatic  #33                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     137: areturn
     138: aconst_null
     139: areturn

  static {};
    Code:
       0: ldc           #35                 // class reactor/core/publisher/FluxFlatMap$FlatMapInner
       2: ldc           #36                 // class org/reactivestreams/Subscription
       4: ldc           #37                 // String s
       6: invokestatic  #38                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #6                  // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: return
}
