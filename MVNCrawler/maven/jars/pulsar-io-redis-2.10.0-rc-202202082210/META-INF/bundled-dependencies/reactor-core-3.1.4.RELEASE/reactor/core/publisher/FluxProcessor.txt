Compiled from "FluxProcessor.java"
public abstract class reactor.core.publisher.FluxProcessor<IN, OUT> extends reactor.core.publisher.Flux<OUT> implements org.reactivestreams.Processor<IN, OUT>, reactor.core.CoreSubscriber<IN>, reactor.core.Scannable, reactor.core.Disposable {
  public reactor.core.publisher.FluxProcessor();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/Flux."<init>":()V
       4: return

  public static <T> reactor.core.publisher.FluxProcessor<org.reactivestreams.Publisher<? extends T>, T> switchOnNext();
    Code:
       0: invokestatic  #2                  // Method reactor/core/publisher/UnicastProcessor.create:()Lreactor/core/publisher/UnicastProcessor;
       3: astore_0
       4: aload_0
       5: aload_0
       6: invokestatic  #3                  // Method switchOnNext:(Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/Flux;
       9: invokestatic  #4                  // Method wrap:(Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Publisher;)Lreactor/core/publisher/FluxProcessor;
      12: astore_1
      13: aload_1
      14: areturn

  public static <IN, OUT> reactor.core.publisher.FluxProcessor<IN, OUT> wrap(org.reactivestreams.Subscriber<IN>, org.reactivestreams.Publisher<OUT>);
    Code:
       0: new           #5                  // class reactor/core/publisher/DelegateProcessor
       3: dup
       4: aload_1
       5: aload_0
       6: invokespecial #6                  // Method reactor/core/publisher/DelegateProcessor."<init>":(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Subscriber;)V
       9: areturn

  public void dispose();
    Code:
       0: aload_0
       1: new           #7                  // class java/util/concurrent/CancellationException
       4: dup
       5: ldc           #8                  // String Disposed
       7: invokespecial #9                  // Method java/util/concurrent/CancellationException."<init>":(Ljava/lang/String;)V
      10: invokevirtual #10                 // Method onError:(Ljava/lang/Throwable;)V
      13: return

  public long downstreamCount();
    Code:
       0: aload_0
       1: invokevirtual #11                 // Method inners:()Ljava/util/stream/Stream;
       4: invokeinterface #12,  1           // InterfaceMethod java/util/stream/Stream.count:()J
       9: lreturn

  public int getBufferSize();
    Code:
       0: ldc           #14                 // int 2147483647
       2: ireturn

  public java.lang.Throwable getError();
    Code:
       0: aconst_null
       1: areturn

  public boolean hasDownstreams();
    Code:
       0: aload_0
       1: invokevirtual #15                 // Method downstreamCount:()J
       4: lconst_0
       5: lcmp
       6: ifeq          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  public final boolean hasCompleted();
    Code:
       0: aload_0
       1: invokevirtual #16                 // Method isTerminated:()Z
       4: ifeq          18
       7: aload_0
       8: invokevirtual #17                 // Method getError:()Ljava/lang/Throwable;
      11: ifnonnull     18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn

  public final boolean hasError();
    Code:
       0: aload_0
       1: invokevirtual #16                 // Method isTerminated:()Z
       4: ifeq          18
       7: aload_0
       8: invokevirtual #17                 // Method getError:()Ljava/lang/Throwable;
      11: ifnull        18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn

  public java.util.stream.Stream<? extends reactor.core.Scannable> inners();
    Code:
       0: invokestatic  #18                 // InterfaceMethod java/util/stream/Stream.empty:()Ljava/util/stream/Stream;
       3: areturn

  public boolean isTerminated();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isSerialized();
    Code:
       0: iconst_0
       1: ireturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #19                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
       4: if_acmpne     15
       7: aload_0
       8: invokevirtual #16                 // Method isTerminated:()Z
      11: invokestatic  #20                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      14: areturn
      15: aload_1
      16: getstatic     #21                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
      19: if_acmpne     27
      22: aload_0
      23: invokevirtual #17                 // Method getError:()Ljava/lang/Throwable;
      26: areturn
      27: aload_1
      28: getstatic     #22                 // Field reactor/core/Scannable$Attr.CAPACITY:Lreactor/core/Scannable$Attr;
      31: if_acmpne     42
      34: aload_0
      35: invokevirtual #23                 // Method getBufferSize:()I
      38: invokestatic  #24                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      41: areturn
      42: aconst_null
      43: areturn

  public final reactor.core.publisher.FluxProcessor<IN, OUT> serialize();
    Code:
       0: new           #5                  // class reactor/core/publisher/DelegateProcessor
       3: dup
       4: aload_0
       5: aload_0
       6: invokestatic  #25                 // Method reactor/core/publisher/Operators.serialize:(Lreactor/core/CoreSubscriber;)Lreactor/core/CoreSubscriber;
       9: invokespecial #6                  // Method reactor/core/publisher/DelegateProcessor."<init>":(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Subscriber;)V
      12: areturn

  public final reactor.core.publisher.FluxSink<IN> sink();
    Code:
       0: aload_0
       1: getstatic     #26                 // Field reactor/core/publisher/FluxSink$OverflowStrategy.IGNORE:Lreactor/core/publisher/FluxSink$OverflowStrategy;
       4: invokevirtual #27                 // Method sink:(Lreactor/core/publisher/FluxSink$OverflowStrategy;)Lreactor/core/publisher/FluxSink;
       7: areturn

  public final reactor.core.publisher.FluxSink<IN> sink(reactor.core.publisher.FluxSink$OverflowStrategy);
    Code:
       0: aload_1
       1: ldc           #28                 // String strategy
       3: invokestatic  #29                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: invokevirtual #23                 // Method getBufferSize:()I
      11: ldc           #14                 // int 2147483647
      13: if_icmpne     20
      16: getstatic     #26                 // Field reactor/core/publisher/FluxSink$OverflowStrategy.IGNORE:Lreactor/core/publisher/FluxSink$OverflowStrategy;
      19: astore_1
      20: aload_0
      21: aload_1
      22: invokestatic  #30                 // Method reactor/core/publisher/FluxCreate.createSink:(Lreactor/core/CoreSubscriber;Lreactor/core/publisher/FluxSink$OverflowStrategy;)Lreactor/core/publisher/FluxCreate$BaseSink;
      25: astore_2
      26: aload_0
      27: aload_2
      28: invokevirtual #31                 // Method onSubscribe:(Lorg/reactivestreams/Subscription;)V
      31: aload_2
      32: invokevirtual #32                 // Method reactor/core/publisher/FluxCreate$BaseSink.isCancelled:()Z
      35: ifne          54
      38: aload_0
      39: invokevirtual #33                 // Method isSerialized:()Z
      42: ifeq          56
      45: aload_0
      46: invokevirtual #23                 // Method getBufferSize:()I
      49: ldc           #14                 // int 2147483647
      51: if_icmpne     56
      54: aload_2
      55: areturn
      56: aload_0
      57: invokevirtual #34                 // Method serializeAlways:()Z
      60: ifeq          72
      63: new           #35                 // class reactor/core/publisher/FluxCreate$SerializedSink
      66: dup
      67: aload_2
      68: invokespecial #36                 // Method reactor/core/publisher/FluxCreate$SerializedSink."<init>":(Lreactor/core/publisher/FluxCreate$BaseSink;)V
      71: areturn
      72: new           #37                 // class reactor/core/publisher/FluxCreate$SerializeOnRequestSink
      75: dup
      76: aload_2
      77: invokespecial #38                 // Method reactor/core/publisher/FluxCreate$SerializeOnRequestSink."<init>":(Lreactor/core/publisher/FluxCreate$BaseSink;)V
      80: areturn

  protected boolean serializeAlways();
    Code:
       0: iconst_1
       1: ireturn
}
