Compiled from "FluxHandle.java"
final class reactor.core.publisher.FluxHandle$HandleConditionalSubscriber<T, R> implements reactor.core.Fuseable$ConditionalSubscriber<T>, reactor.core.publisher.InnerOperator<T, R>, reactor.core.publisher.SynchronousSink<R> {
  final reactor.core.Fuseable$ConditionalSubscriber<? super R> actual;

  final java.util.function.BiConsumer<? super T, reactor.core.publisher.SynchronousSink<R>> handler;

  boolean done;

  boolean stop;

  java.lang.Throwable error;

  R data;

  org.reactivestreams.Subscription s;

  reactor.core.publisher.FluxHandle$HandleConditionalSubscriber(reactor.core.Fuseable$ConditionalSubscriber<? super R>, java.util.function.BiConsumer<? super T, reactor.core.publisher.SynchronousSink<R>>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field handler:Ljava/util/function/BiConsumer;
      14: return

  public reactor.util.context.Context currentContext();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
       4: invokeinterface #4,  1            // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.currentContext:()Lreactor/util/context/Context;
       9: areturn

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #5                  // Field s:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #6                  // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          26
      11: aload_0
      12: aload_1
      13: putfield      #5                  // Field s:Lorg/reactivestreams/Subscription;
      16: aload_0
      17: getfield      #2                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      20: aload_0
      21: invokeinterface #7,  2            // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      26: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #8                  // Field done:Z
       4: ifeq          21
       7: aload_1
       8: aload_0
       9: getfield      #2                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      12: invokeinterface #4,  1            // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #9                  // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      20: return
      21: aload_0
      22: getfield      #3                  // Field handler:Ljava/util/function/BiConsumer;
      25: aload_1
      26: aload_0
      27: invokeinterface #10,  3           // InterfaceMethod java/util/function/BiConsumer.accept:(Ljava/lang/Object;Ljava/lang/Object;)V
      32: goto          59
      35: astore_2
      36: aload_0
      37: aload_0
      38: getfield      #5                  // Field s:Lorg/reactivestreams/Subscription;
      41: aload_2
      42: aload_1
      43: aload_0
      44: getfield      #2                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      47: invokeinterface #4,  1            // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.currentContext:()Lreactor/util/context/Context;
      52: invokestatic  #12                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      55: invokevirtual #13                 // Method onError:(Ljava/lang/Throwable;)V
      58: return
      59: aload_0
      60: getfield      #14                 // Field data:Ljava/lang/Object;
      63: astore_2
      64: aload_0
      65: aconst_null
      66: putfield      #14                 // Field data:Ljava/lang/Object;
      69: aload_2
      70: ifnull        83
      73: aload_0
      74: getfield      #2                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      77: aload_2
      78: invokeinterface #15,  2           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.onNext:(Ljava/lang/Object;)V
      83: aload_0
      84: getfield      #16                 // Field stop:Z
      87: ifeq          151
      90: aload_0
      91: iconst_1
      92: putfield      #8                  // Field done:Z
      95: aload_0
      96: getfield      #5                  // Field s:Lorg/reactivestreams/Subscription;
      99: invokeinterface #17,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
     104: aload_0
     105: getfield      #18                 // Field error:Ljava/lang/Throwable;
     108: ifnull        139
     111: aload_0
     112: getfield      #2                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
     115: aconst_null
     116: aload_0
     117: getfield      #18                 // Field error:Ljava/lang/Throwable;
     120: aload_1
     121: aload_0
     122: getfield      #2                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
     125: invokeinterface #4,  1            // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.currentContext:()Lreactor/util/context/Context;
     130: invokestatic  #12                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
     133: invokeinterface #19,  2           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.onError:(Ljava/lang/Throwable;)V
     138: return
     139: aload_0
     140: getfield      #2                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
     143: invokeinterface #20,  1           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.onComplete:()V
     148: goto          165
     151: aload_2
     152: ifnonnull     165
     155: aload_0
     156: getfield      #5                  // Field s:Lorg/reactivestreams/Subscription;
     159: lconst_1
     160: invokeinterface #21,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     165: return
    Exception table:
       from    to  target type
          21    32    35   Class java/lang/Throwable

  public boolean tryOnNext(T);
    Code:
       0: aload_0
       1: getfield      #8                  // Field done:Z
       4: ifeq          22
       7: aload_1
       8: aload_0
       9: getfield      #2                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      12: invokeinterface #4,  1            // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #9                  // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      20: iconst_0
      21: ireturn
      22: aload_0
      23: getfield      #3                  // Field handler:Ljava/util/function/BiConsumer;
      26: aload_1
      27: aload_0
      28: invokeinterface #10,  3           // InterfaceMethod java/util/function/BiConsumer.accept:(Ljava/lang/Object;Ljava/lang/Object;)V
      33: goto          61
      36: astore_2
      37: aload_0
      38: aload_0
      39: getfield      #5                  // Field s:Lorg/reactivestreams/Subscription;
      42: aload_2
      43: aload_1
      44: aload_0
      45: getfield      #2                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      48: invokeinterface #4,  1            // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.currentContext:()Lreactor/util/context/Context;
      53: invokestatic  #12                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      56: invokevirtual #13                 // Method onError:(Ljava/lang/Throwable;)V
      59: iconst_0
      60: ireturn
      61: aload_0
      62: getfield      #14                 // Field data:Ljava/lang/Object;
      65: astore_2
      66: iconst_0
      67: istore_3
      68: aload_0
      69: aconst_null
      70: putfield      #14                 // Field data:Ljava/lang/Object;
      73: aload_2
      74: ifnull        88
      77: aload_0
      78: getfield      #2                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      81: aload_2
      82: invokeinterface #22,  2           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.tryOnNext:(Ljava/lang/Object;)Z
      87: istore_3
      88: aload_0
      89: getfield      #16                 // Field stop:Z
      92: ifeq          157
      95: aload_0
      96: iconst_1
      97: putfield      #8                  // Field done:Z
     100: aload_0
     101: getfield      #5                  // Field s:Lorg/reactivestreams/Subscription;
     104: invokeinterface #17,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
     109: aload_0
     110: getfield      #18                 // Field error:Ljava/lang/Throwable;
     113: ifnull        146
     116: aload_0
     117: getfield      #2                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
     120: aconst_null
     121: aload_0
     122: getfield      #18                 // Field error:Ljava/lang/Throwable;
     125: aload_1
     126: aload_0
     127: getfield      #2                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
     130: invokeinterface #4,  1            // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.currentContext:()Lreactor/util/context/Context;
     135: invokestatic  #12                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
     138: invokeinterface #19,  2           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.onError:(Ljava/lang/Throwable;)V
     143: goto          155
     146: aload_0
     147: getfield      #2                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
     150: invokeinterface #20,  1           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.onComplete:()V
     155: iconst_1
     156: ireturn
     157: iload_3
     158: ireturn
    Exception table:
       from    to  target type
          22    33    36   Class java/lang/Throwable

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #8                  // Field done:Z
       4: ifeq          21
       7: aload_1
       8: aload_0
       9: getfield      #2                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      12: invokeinterface #4,  1            // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #23                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      20: return
      21: aload_0
      22: iconst_1
      23: putfield      #8                  // Field done:Z
      26: aload_0
      27: getfield      #2                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      30: aload_1
      31: invokeinterface #19,  2           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.onError:(Ljava/lang/Throwable;)V
      36: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #8                  // Field done:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #8                  // Field done:Z
      13: aload_0
      14: getfield      #2                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      17: invokeinterface #20,  1           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.onComplete:()V
      22: return

  public reactor.core.CoreSubscriber<? super R> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
       4: areturn

  public void complete();
    Code:
       0: aload_0
       1: getfield      #16                 // Field stop:Z
       4: ifeq          17
       7: new           #24                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #25                 // String Cannot complete after a complete or error
      13: invokespecial #26                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: iconst_1
      19: putfield      #16                 // Field stop:Z
      22: return

  public void error(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #16                 // Field stop:Z
       4: ifeq          17
       7: new           #24                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #27                 // String Cannot error after a complete or error
      13: invokespecial #26                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: aload_1
      19: ldc           #28                 // String error
      21: invokestatic  #29                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      24: checkcast     #11                 // class java/lang/Throwable
      27: putfield      #18                 // Field error:Ljava/lang/Throwable;
      30: aload_0
      31: iconst_1
      32: putfield      #16                 // Field stop:Z
      35: return

  public void next(R);
    Code:
       0: aload_0
       1: getfield      #14                 // Field data:Ljava/lang/Object;
       4: ifnull        17
       7: new           #24                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #30                 // String Cannot emit more than one data
      13: invokespecial #26                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #16                 // Field stop:Z
      21: ifeq          34
      24: new           #24                 // class java/lang/IllegalStateException
      27: dup
      28: ldc           #31                 // String Cannot emit after a complete or error
      30: invokespecial #26                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      33: athrow
      34: aload_0
      35: aload_1
      36: ldc           #32                 // String data
      38: invokestatic  #29                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      41: putfield      #14                 // Field data:Ljava/lang/Object;
      44: return

  public void request(long);
    Code:
       0: aload_0
       1: getfield      #5                  // Field s:Lorg/reactivestreams/Subscription;
       4: lload_1
       5: invokeinterface #21,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      10: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #5                  // Field s:Lorg/reactivestreams/Subscription;
       4: invokeinterface #17,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
       9: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #33                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #5                  // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #34                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      16: if_acmpne     27
      19: aload_0
      20: getfield      #8                  // Field done:Z
      23: invokestatic  #35                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      26: areturn
      27: aload_1
      28: getstatic     #36                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
      31: if_acmpne     39
      34: aload_0
      35: getfield      #18                 // Field error:Ljava/lang/Throwable;
      38: areturn
      39: aload_0
      40: aload_1
      41: invokespecial #37                 // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      44: areturn
}
