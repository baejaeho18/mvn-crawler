Compiled from "FluxPublishOn.java"
final class reactor.core.publisher.FluxPublishOn$PublishOnConditionalSubscriber<T> implements reactor.core.Fuseable$QueueSubscription<T>, java.lang.Runnable, reactor.core.publisher.InnerOperator<T, T> {
  final reactor.core.Fuseable$ConditionalSubscriber<? super T> actual;

  final reactor.core.scheduler.Scheduler$Worker worker;

  final reactor.core.scheduler.Scheduler scheduler;

  final boolean delayError;

  final int prefetch;

  final int limit;

  final java.util.function.Supplier<? extends java.util.Queue<T>> queueSupplier;

  org.reactivestreams.Subscription s;

  java.util.Queue<T> queue;

  volatile boolean cancelled;

  volatile boolean done;

  java.lang.Throwable error;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxPublishOn$PublishOnConditionalSubscriber> WIP;

  volatile long requested;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.FluxPublishOn$PublishOnConditionalSubscriber> REQUESTED;

  int sourceMode;

  long produced;

  long consumed;

  boolean outputFused;

  reactor.core.publisher.FluxPublishOn$PublishOnConditionalSubscriber(reactor.core.Fuseable$ConditionalSubscriber<? super T>, reactor.core.scheduler.Scheduler, reactor.core.scheduler.Scheduler$Worker, boolean, int, int, java.util.function.Supplier<? extends java.util.Queue<T>>);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
       9: aload_0
      10: aload_3
      11: putfield      #4                  // Field worker:Lreactor/core/scheduler/Scheduler$Worker;
      14: aload_0
      15: aload_2
      16: putfield      #5                  // Field scheduler:Lreactor/core/scheduler/Scheduler;
      19: aload_0
      20: iload         4
      22: putfield      #6                  // Field delayError:Z
      25: aload_0
      26: iload         5
      28: putfield      #7                  // Field prefetch:I
      31: aload_0
      32: aload         7
      34: putfield      #8                  // Field queueSupplier:Ljava/util/function/Supplier;
      37: aload_0
      38: iload         5
      40: iload         6
      42: invokestatic  #9                  // Method reactor/core/publisher/Operators.unboundedOrLimit:(II)I
      45: putfield      #10                 // Field limit:I
      48: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #11                 // Field s:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #12                 // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          146
      11: aload_0
      12: aload_1
      13: putfield      #11                 // Field s:Lorg/reactivestreams/Subscription;
      16: aload_1
      17: instanceof    #13                 // class reactor/core/Fuseable$QueueSubscription
      20: ifeq          107
      23: aload_1
      24: checkcast     #13                 // class reactor/core/Fuseable$QueueSubscription
      27: astore_2
      28: aload_2
      29: bipush        7
      31: invokeinterface #14,  2           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.requestFusion:(I)I
      36: istore_3
      37: iload_3
      38: iconst_1
      39: if_icmpne     68
      42: aload_0
      43: iconst_1
      44: putfield      #15                 // Field sourceMode:I
      47: aload_0
      48: aload_2
      49: putfield      #16                 // Field queue:Ljava/util/Queue;
      52: aload_0
      53: iconst_1
      54: putfield      #17                 // Field done:Z
      57: aload_0
      58: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      61: aload_0
      62: invokeinterface #18,  2           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      67: return
      68: iload_3
      69: iconst_2
      70: if_icmpne     107
      73: aload_0
      74: iconst_2
      75: putfield      #15                 // Field sourceMode:I
      78: aload_0
      79: aload_2
      80: putfield      #16                 // Field queue:Ljava/util/Queue;
      83: aload_0
      84: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      87: aload_0
      88: invokeinterface #18,  2           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      93: aload_1
      94: aload_0
      95: getfield      #7                  // Field prefetch:I
      98: invokestatic  #19                 // Method reactor/core/publisher/Operators.unboundedOrPrefetch:(I)J
     101: invokeinterface #20,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     106: return
     107: aload_0
     108: aload_0
     109: getfield      #8                  // Field queueSupplier:Ljava/util/function/Supplier;
     112: invokeinterface #21,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
     117: checkcast     #22                 // class java/util/Queue
     120: putfield      #16                 // Field queue:Ljava/util/Queue;
     123: aload_0
     124: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
     127: aload_0
     128: invokeinterface #18,  2           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
     133: aload_1
     134: aload_0
     135: getfield      #7                  // Field prefetch:I
     138: invokestatic  #19                 // Method reactor/core/publisher/Operators.unboundedOrPrefetch:(I)J
     141: invokeinterface #20,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     146: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #15                 // Field sourceMode:I
       4: iconst_2
       5: if_icmpne     16
       8: aload_0
       9: aload_0
      10: aconst_null
      11: aconst_null
      12: invokevirtual #23                 // Method trySchedule:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;)V
      15: return
      16: aload_0
      17: getfield      #17                 // Field done:Z
      20: ifeq          37
      23: aload_1
      24: aload_0
      25: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      28: invokeinterface #24,  1           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.currentContext:()Lreactor/util/context/Context;
      33: invokestatic  #25                 // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      36: return
      37: aload_0
      38: getfield      #16                 // Field queue:Ljava/util/Queue;
      41: aload_1
      42: invokeinterface #26,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
      47: ifne          81
      50: aload_0
      51: aload_0
      52: getfield      #11                 // Field s:Lorg/reactivestreams/Subscription;
      55: ldc           #28                 // String Queue is full: Reactive Streams source doesn\'t respect backpressure
      57: invokestatic  #29                 // Method reactor/core/Exceptions.failWithOverflow:(Ljava/lang/String;)Ljava/lang/IllegalStateException;
      60: aload_1
      61: aload_0
      62: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      65: invokeinterface #24,  1           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.currentContext:()Lreactor/util/context/Context;
      70: invokestatic  #30                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      73: putfield      #31                 // Field error:Ljava/lang/Throwable;
      76: aload_0
      77: iconst_1
      78: putfield      #17                 // Field done:Z
      81: aload_0
      82: aload_0
      83: aconst_null
      84: aload_1
      85: invokevirtual #23                 // Method trySchedule:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;)V
      88: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #17                 // Field done:Z
       4: ifeq          21
       7: aload_1
       8: aload_0
       9: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      12: invokeinterface #24,  1           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #32                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      20: return
      21: aload_0
      22: aload_1
      23: putfield      #31                 // Field error:Ljava/lang/Throwable;
      26: aload_0
      27: iconst_1
      28: putfield      #17                 // Field done:Z
      31: aload_0
      32: aconst_null
      33: aload_1
      34: aconst_null
      35: invokevirtual #23                 // Method trySchedule:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;)V
      38: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #17                 // Field done:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #17                 // Field done:Z
      13: aload_0
      14: aconst_null
      15: aconst_null
      16: aconst_null
      17: invokevirtual #23                 // Method trySchedule:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;)V
      20: return

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #33                 // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          23
       7: getstatic     #34                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      10: aload_0
      11: lload_1
      12: invokestatic  #35                 // Method reactor/core/publisher/Operators.addCap:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
      15: pop2
      16: aload_0
      17: aload_0
      18: aconst_null
      19: aconst_null
      20: invokevirtual #23                 // Method trySchedule:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;)V
      23: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #36                 // Field cancelled:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #36                 // Field cancelled:Z
      13: aload_0
      14: getfield      #11                 // Field s:Lorg/reactivestreams/Subscription;
      17: invokeinterface #37,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      22: aload_0
      23: getfield      #4                  // Field worker:Lreactor/core/scheduler/Scheduler$Worker;
      26: invokeinterface #38,  1           // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.dispose:()V
      31: getstatic     #39                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      34: aload_0
      35: invokevirtual #40                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
      38: ifne          50
      41: aload_0
      42: getfield      #16                 // Field queue:Ljava/util/Queue;
      45: invokeinterface #41,  1           // InterfaceMethod java/util/Queue.clear:()V
      50: return

  void trySchedule(org.reactivestreams.Subscription, java.lang.Throwable, java.lang.Object);
    Code:
       0: getstatic     #39                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #40                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifeq          11
      10: return
      11: aload_0
      12: getfield      #4                  // Field worker:Lreactor/core/scheduler/Scheduler$Worker;
      15: aload_0
      16: invokeinterface #42,  2           // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.schedule:(Ljava/lang/Runnable;)Lreactor/core/Disposable;
      21: pop
      22: goto          62
      25: astore        4
      27: aload_0
      28: getfield      #16                 // Field queue:Ljava/util/Queue;
      31: invokeinterface #41,  1           // InterfaceMethod java/util/Queue.clear:()V
      36: aload_0
      37: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      40: aload         4
      42: aload_1
      43: aload_2
      44: aload_3
      45: aload_0
      46: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      49: invokeinterface #24,  1           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.currentContext:()Lreactor/util/context/Context;
      54: invokestatic  #44                 // Method reactor/core/publisher/Operators.onRejectedExecution:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/RuntimeException;
      57: invokeinterface #45,  2           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.onError:(Ljava/lang/Throwable;)V
      62: return
    Exception table:
       from    to  target type
          11    22    25   Class java/util/concurrent/RejectedExecutionException

  void runSync();
    Code:
       0: iconst_1
       1: istore_1
       2: aload_0
       3: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
       6: astore_2
       7: aload_0
       8: getfield      #16                 // Field queue:Ljava/util/Queue;
      11: astore_3
      12: aload_0
      13: getfield      #46                 // Field produced:J
      16: lstore        4
      18: aload_0
      19: getfield      #47                 // Field requested:J
      22: lstore        6
      24: lload         4
      26: lload         6
      28: lcmp
      29: ifeq          108
      32: aload_3
      33: invokeinterface #48,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
      38: astore        8
      40: goto          69
      43: astore        9
      45: aload_0
      46: aload_2
      47: aload_0
      48: getfield      #11                 // Field s:Lorg/reactivestreams/Subscription;
      51: aload         9
      53: aload_0
      54: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      57: invokeinterface #24,  1           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.currentContext:()Lreactor/util/context/Context;
      62: invokestatic  #50                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      65: invokevirtual #51                 // Method doError:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
      68: return
      69: aload_0
      70: getfield      #36                 // Field cancelled:Z
      73: ifeq          77
      76: return
      77: aload         8
      79: ifnonnull     88
      82: aload_0
      83: aload_2
      84: invokevirtual #52                 // Method doComplete:(Lorg/reactivestreams/Subscriber;)V
      87: return
      88: aload_2
      89: aload         8
      91: invokeinterface #53,  2           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.tryOnNext:(Ljava/lang/Object;)Z
      96: ifeq          105
      99: lload         4
     101: lconst_1
     102: ladd
     103: lstore        4
     105: goto          24
     108: aload_0
     109: getfield      #36                 // Field cancelled:Z
     112: ifeq          116
     115: return
     116: aload_3
     117: invokeinterface #54,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
     122: ifeq          131
     125: aload_0
     126: aload_2
     127: invokevirtual #52                 // Method doComplete:(Lorg/reactivestreams/Subscriber;)V
     130: return
     131: aload_0
     132: getfield      #55                 // Field wip:I
     135: istore        8
     137: iload_1
     138: iload         8
     140: if_icmpne     166
     143: aload_0
     144: lload         4
     146: putfield      #46                 // Field produced:J
     149: getstatic     #39                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     152: aload_0
     153: iload_1
     154: ineg
     155: invokevirtual #56                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
     158: istore_1
     159: iload_1
     160: ifne          169
     163: goto          172
     166: iload         8
     168: istore_1
     169: goto          18
     172: return
    Exception table:
       from    to  target type
          32    40    43   Class java/lang/Throwable

  void runAsync();
    Code:
       0: iconst_1
       1: istore_1
       2: aload_0
       3: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
       6: astore_2
       7: aload_0
       8: getfield      #16                 // Field queue:Ljava/util/Queue;
      11: astore_3
      12: aload_0
      13: getfield      #46                 // Field produced:J
      16: lstore        4
      18: aload_0
      19: getfield      #57                 // Field consumed:J
      22: lstore        6
      24: aload_0
      25: getfield      #47                 // Field requested:J
      28: lstore        8
      30: lload         4
      32: lload         8
      34: lcmp
      35: ifeq          181
      38: aload_0
      39: getfield      #17                 // Field done:Z
      42: istore        10
      44: aload_3
      45: invokeinterface #48,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
      50: astore        11
      52: goto          97
      55: astore        12
      57: aload         12
      59: invokestatic  #58                 // Method reactor/core/Exceptions.throwIfFatal:(Ljava/lang/Throwable;)V
      62: aload_0
      63: getfield      #11                 // Field s:Lorg/reactivestreams/Subscription;
      66: invokeinterface #37,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      71: aload_3
      72: invokeinterface #41,  1           // InterfaceMethod java/util/Queue.clear:()V
      77: aload_0
      78: aload_2
      79: aload         12
      81: aload_0
      82: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      85: invokeinterface #24,  1           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.currentContext:()Lreactor/util/context/Context;
      90: invokestatic  #59                 // Method reactor/core/publisher/Operators.onOperatorError:(Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      93: invokevirtual #51                 // Method doError:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
      96: return
      97: aload         11
      99: ifnonnull     106
     102: iconst_1
     103: goto          107
     106: iconst_0
     107: istore        12
     109: aload_0
     110: iload         10
     112: iload         12
     114: aload_2
     115: invokevirtual #60                 // Method checkTerminated:(ZZLorg/reactivestreams/Subscriber;)Z
     118: ifeq          122
     121: return
     122: iload         12
     124: ifeq          130
     127: goto          181
     130: aload_2
     131: aload         11
     133: invokeinterface #53,  2           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.tryOnNext:(Ljava/lang/Object;)Z
     138: ifeq          147
     141: lload         4
     143: lconst_1
     144: ladd
     145: lstore        4
     147: lload         6
     149: lconst_1
     150: ladd
     151: lstore        6
     153: lload         6
     155: aload_0
     156: getfield      #10                 // Field limit:I
     159: i2l
     160: lcmp
     161: ifne          178
     164: aload_0
     165: getfield      #11                 // Field s:Lorg/reactivestreams/Subscription;
     168: lload         6
     170: invokeinterface #20,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     175: lconst_0
     176: lstore        6
     178: goto          30
     181: lload         4
     183: lload         8
     185: lcmp
     186: ifne          208
     189: aload_0
     190: aload_0
     191: getfield      #17                 // Field done:Z
     194: aload_3
     195: invokeinterface #54,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
     200: aload_2
     201: invokevirtual #60                 // Method checkTerminated:(ZZLorg/reactivestreams/Subscriber;)Z
     204: ifeq          208
     207: return
     208: aload_0
     209: getfield      #55                 // Field wip:I
     212: istore        10
     214: iload_1
     215: iload         10
     217: if_icmpne     249
     220: aload_0
     221: lload         4
     223: putfield      #46                 // Field produced:J
     226: aload_0
     227: lload         6
     229: putfield      #57                 // Field consumed:J
     232: getstatic     #39                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     235: aload_0
     236: iload_1
     237: ineg
     238: invokevirtual #56                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
     241: istore_1
     242: iload_1
     243: ifne          252
     246: goto          255
     249: iload         10
     251: istore_1
     252: goto          24
     255: return
    Exception table:
       from    to  target type
          44    52    55   Class java/lang/Throwable

  void runBackfused();
    Code:
       0: iconst_1
       1: istore_1
       2: aload_0
       3: getfield      #36                 // Field cancelled:Z
       6: ifeq          10
       9: return
      10: aload_0
      11: getfield      #17                 // Field done:Z
      14: istore_2
      15: aload_0
      16: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      19: aconst_null
      20: invokeinterface #61,  2           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.onNext:(Ljava/lang/Object;)V
      25: iload_2
      26: ifeq          59
      29: aload_0
      30: getfield      #31                 // Field error:Ljava/lang/Throwable;
      33: astore_3
      34: aload_3
      35: ifnull        50
      38: aload_0
      39: aload_0
      40: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      43: aload_3
      44: invokevirtual #51                 // Method doError:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
      47: goto          58
      50: aload_0
      51: aload_0
      52: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      55: invokevirtual #52                 // Method doComplete:(Lorg/reactivestreams/Subscriber;)V
      58: return
      59: getstatic     #39                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      62: aload_0
      63: iload_1
      64: ineg
      65: invokevirtual #56                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
      68: istore_1
      69: iload_1
      70: ifne          76
      73: goto          79
      76: goto          2
      79: return

  public void run();
    Code:
       0: aload_0
       1: getfield      #62                 // Field outputFused:Z
       4: ifeq          14
       7: aload_0
       8: invokevirtual #63                 // Method runBackfused:()V
      11: goto          33
      14: aload_0
      15: getfield      #15                 // Field sourceMode:I
      18: iconst_1
      19: if_icmpne     29
      22: aload_0
      23: invokevirtual #64                 // Method runSync:()V
      26: goto          33
      29: aload_0
      30: invokevirtual #65                 // Method runAsync:()V
      33: return

  public reactor.core.CoreSubscriber<? super T> actual();
    Code:
       0: aload_0
       1: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
       4: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #66                 // Field reactor/core/Scannable$Attr.REQUESTED_FROM_DOWNSTREAM:Lreactor/core/Scannable$Attr;
       4: if_acmpne     15
       7: aload_0
       8: getfield      #47                 // Field requested:J
      11: invokestatic  #67                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      14: areturn
      15: aload_1
      16: getstatic     #68                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
      19: if_acmpne     27
      22: aload_0
      23: getfield      #11                 // Field s:Lorg/reactivestreams/Subscription;
      26: areturn
      27: aload_1
      28: getstatic     #69                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      31: if_acmpne     42
      34: aload_0
      35: getfield      #36                 // Field cancelled:Z
      38: invokestatic  #70                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      41: areturn
      42: aload_1
      43: getstatic     #71                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      46: if_acmpne     57
      49: aload_0
      50: getfield      #17                 // Field done:Z
      53: invokestatic  #70                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      56: areturn
      57: aload_1
      58: getstatic     #72                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      61: if_acmpne     88
      64: aload_0
      65: getfield      #16                 // Field queue:Ljava/util/Queue;
      68: ifnull        83
      71: aload_0
      72: getfield      #16                 // Field queue:Ljava/util/Queue;
      75: invokeinterface #73,  1           // InterfaceMethod java/util/Queue.size:()I
      80: goto          84
      83: iconst_0
      84: invokestatic  #74                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      87: areturn
      88: aload_1
      89: getstatic     #75                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
      92: if_acmpne     100
      95: aload_0
      96: getfield      #31                 // Field error:Ljava/lang/Throwable;
      99: areturn
     100: aload_1
     101: getstatic     #76                 // Field reactor/core/Scannable$Attr.DELAY_ERROR:Lreactor/core/Scannable$Attr;
     104: if_acmpne     115
     107: aload_0
     108: getfield      #6                  // Field delayError:Z
     111: invokestatic  #70                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     114: areturn
     115: aload_1
     116: getstatic     #77                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
     119: if_acmpne     130
     122: aload_0
     123: getfield      #7                  // Field prefetch:I
     126: invokestatic  #74                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     129: areturn
     130: aload_1
     131: getstatic     #78                 // Field reactor/core/Scannable$Attr.RUN_ON:Lreactor/core/Scannable$Attr;
     134: if_acmpne     142
     137: aload_0
     138: getfield      #4                  // Field worker:Lreactor/core/scheduler/Scheduler$Worker;
     141: areturn
     142: aload_0
     143: aload_1
     144: invokespecial #79                 // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
     147: areturn

  void doComplete(org.reactivestreams.Subscriber<?>);
    Code:
       0: aload_1
       1: invokeinterface #80,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
       6: aload_0
       7: getfield      #4                  // Field worker:Lreactor/core/scheduler/Scheduler$Worker;
      10: invokeinterface #38,  1           // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.dispose:()V
      15: return

  void doError(org.reactivestreams.Subscriber<?>, java.lang.Throwable);
    Code:
       0: aload_1
       1: aload_2
       2: invokeinterface #81,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
       7: aload_0
       8: getfield      #4                  // Field worker:Lreactor/core/scheduler/Scheduler$Worker;
      11: invokeinterface #38,  1           // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.dispose:()V
      16: goto          31
      19: astore_3
      20: aload_0
      21: getfield      #4                  // Field worker:Lreactor/core/scheduler/Scheduler$Worker;
      24: invokeinterface #38,  1           // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.dispose:()V
      29: aload_3
      30: athrow
      31: return
    Exception table:
       from    to  target type
           0     7    19   any

  boolean checkTerminated(boolean, boolean, org.reactivestreams.Subscriber<?>);
    Code:
       0: aload_0
       1: getfield      #36                 // Field cancelled:Z
       4: ifeq          18
       7: aload_0
       8: getfield      #16                 // Field queue:Ljava/util/Queue;
      11: invokeinterface #41,  1           // InterfaceMethod java/util/Queue.clear:()V
      16: iconst_1
      17: ireturn
      18: iload_1
      19: ifeq          101
      22: aload_0
      23: getfield      #6                  // Field delayError:Z
      26: ifeq          61
      29: iload_2
      30: ifeq          101
      33: aload_0
      34: getfield      #31                 // Field error:Ljava/lang/Throwable;
      37: astore        4
      39: aload         4
      41: ifnull        54
      44: aload_0
      45: aload_3
      46: aload         4
      48: invokevirtual #51                 // Method doError:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
      51: goto          59
      54: aload_0
      55: aload_3
      56: invokevirtual #52                 // Method doComplete:(Lorg/reactivestreams/Subscriber;)V
      59: iconst_1
      60: ireturn
      61: aload_0
      62: getfield      #31                 // Field error:Ljava/lang/Throwable;
      65: astore        4
      67: aload         4
      69: ifnull        90
      72: aload_0
      73: getfield      #16                 // Field queue:Ljava/util/Queue;
      76: invokeinterface #41,  1           // InterfaceMethod java/util/Queue.clear:()V
      81: aload_0
      82: aload_3
      83: aload         4
      85: invokevirtual #51                 // Method doError:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
      88: iconst_1
      89: ireturn
      90: iload_2
      91: ifeq          101
      94: aload_0
      95: aload_3
      96: invokevirtual #52                 // Method doComplete:(Lorg/reactivestreams/Subscriber;)V
      99: iconst_1
     100: ireturn
     101: iconst_0
     102: ireturn

  public void clear();
    Code:
       0: aload_0
       1: getfield      #16                 // Field queue:Ljava/util/Queue;
       4: invokeinterface #41,  1           // InterfaceMethod java/util/Queue.clear:()V
       9: return

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #16                 // Field queue:Ljava/util/Queue;
       4: invokeinterface #54,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
       9: ireturn

  public T poll();
    Code:
       0: aload_0
       1: getfield      #16                 // Field queue:Ljava/util/Queue;
       4: invokeinterface #48,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
       9: astore_1
      10: aload_1
      11: ifnull        62
      14: aload_0
      15: getfield      #15                 // Field sourceMode:I
      18: iconst_1
      19: if_icmpeq     62
      22: aload_0
      23: getfield      #57                 // Field consumed:J
      26: lconst_1
      27: ladd
      28: lstore_2
      29: lload_2
      30: aload_0
      31: getfield      #10                 // Field limit:I
      34: i2l
      35: lcmp
      36: ifne          57
      39: aload_0
      40: lconst_0
      41: putfield      #57                 // Field consumed:J
      44: aload_0
      45: getfield      #11                 // Field s:Lorg/reactivestreams/Subscription;
      48: lload_2
      49: invokeinterface #20,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      54: goto          62
      57: aload_0
      58: lload_2
      59: putfield      #57                 // Field consumed:J
      62: aload_1
      63: areturn

  public int requestFusion(int);
    Code:
       0: iload_1
       1: iconst_2
       2: iand
       3: ifeq          13
       6: aload_0
       7: iconst_1
       8: putfield      #62                 // Field outputFused:Z
      11: iconst_2
      12: ireturn
      13: iconst_0
      14: ireturn

  public int size();
    Code:
       0: aload_0
       1: getfield      #16                 // Field queue:Ljava/util/Queue;
       4: invokeinterface #73,  1           // InterfaceMethod java/util/Queue.size:()I
       9: ireturn

  static {};
    Code:
       0: ldc           #82                 // class reactor/core/publisher/FluxPublishOn$PublishOnConditionalSubscriber
       2: ldc           #83                 // String wip
       4: invokestatic  #84                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #39                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: ldc           #82                 // class reactor/core/publisher/FluxPublishOn$PublishOnConditionalSubscriber
      12: ldc           #85                 // String requested
      14: invokestatic  #86                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      17: putstatic     #34                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      20: return
}
