Compiled from "Operators.java"
public class reactor.core.publisher.Operators$DeferredSubscription implements org.reactivestreams.Subscription,reactor.core.Scannable {
  volatile org.reactivestreams.Subscription s;

  volatile long requested;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.Operators$DeferredSubscription, org.reactivestreams.Subscription> S;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.Operators$DeferredSubscription> REQUESTED;

  public reactor.core.publisher.Operators$DeferredSubscription();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  protected boolean isCancelled();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:Lorg/reactivestreams/Subscription;
       4: invokestatic  #3                  // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
       7: if_acmpne     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:Lorg/reactivestreams/Subscription;
       4: astore_1
       5: aload_1
       6: invokestatic  #3                  // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
       9: if_acmpeq     43
      12: getstatic     #4                  // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      15: aload_0
      16: invokestatic  #3                  // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      19: invokevirtual #5                  // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      22: checkcast     #6                  // class org/reactivestreams/Subscription
      25: astore_1
      26: aload_1
      27: ifnull        43
      30: aload_1
      31: invokestatic  #3                  // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      34: if_acmpeq     43
      37: aload_1
      38: invokeinterface #7,  1            // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      43: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #8                  // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #2                  // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #9                  // Field reactor/core/Scannable$Attr.REQUESTED_FROM_DOWNSTREAM:Lreactor/core/Scannable$Attr;
      16: if_acmpne     27
      19: aload_0
      20: getfield      #10                 // Field requested:J
      23: invokestatic  #11                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      26: areturn
      27: aload_1
      28: getstatic     #12                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      31: if_acmpne     42
      34: aload_0
      35: invokevirtual #13                 // Method isCancelled:()Z
      38: invokestatic  #14                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      41: areturn
      42: aconst_null
      43: areturn

  public void request(long);
    Code:
       0: aload_0
       1: getfield      #2                  // Field s:Lorg/reactivestreams/Subscription;
       4: astore_3
       5: aload_3
       6: ifnull        19
       9: aload_3
      10: lload_1
      11: invokeinterface #15,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      16: goto          62
      19: getstatic     #16                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      22: aload_0
      23: lload_1
      24: invokestatic  #17                 // Method reactor/core/publisher/Operators.addCap:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
      27: pop2
      28: aload_0
      29: getfield      #2                  // Field s:Lorg/reactivestreams/Subscription;
      32: astore_3
      33: aload_3
      34: ifnull        62
      37: getstatic     #16                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      40: aload_0
      41: lconst_0
      42: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.getAndSet:(Ljava/lang/Object;J)J
      45: lstore        4
      47: lload         4
      49: lconst_0
      50: lcmp
      51: ifeq          62
      54: aload_3
      55: lload         4
      57: invokeinterface #15,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      62: return

  public final boolean set(org.reactivestreams.Subscription);
    Code:
       0: aload_1
       1: ldc           #19                 // String s
       3: invokestatic  #20                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: getfield      #2                  // Field s:Lorg/reactivestreams/Subscription;
      11: astore_2
      12: aload_2
      13: invokestatic  #3                  // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      16: if_acmpne     27
      19: aload_1
      20: invokeinterface #7,  1            // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      25: iconst_0
      26: ireturn
      27: aload_2
      28: ifnull        42
      31: aload_1
      32: invokeinterface #7,  1            // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      37: invokestatic  #21                 // Method reactor/core/publisher/Operators.reportSubscriptionSet:()V
      40: iconst_0
      41: ireturn
      42: getstatic     #4                  // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      45: aload_0
      46: aconst_null
      47: aload_1
      48: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      51: ifeq          78
      54: getstatic     #16                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      57: aload_0
      58: lconst_0
      59: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.getAndSet:(Ljava/lang/Object;J)J
      62: lstore_3
      63: lload_3
      64: lconst_0
      65: lcmp
      66: ifeq          76
      69: aload_1
      70: lload_3
      71: invokeinterface #15,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      76: iconst_1
      77: ireturn
      78: aload_0
      79: getfield      #2                  // Field s:Lorg/reactivestreams/Subscription;
      82: astore_2
      83: aload_2
      84: invokestatic  #3                  // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      87: if_acmpeq     101
      90: aload_1
      91: invokeinterface #7,  1            // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      96: invokestatic  #21                 // Method reactor/core/publisher/Operators.reportSubscriptionSet:()V
      99: iconst_0
     100: ireturn
     101: iconst_0
     102: ireturn

  static {};
    Code:
       0: ldc           #23                 // class reactor/core/publisher/Operators$DeferredSubscription
       2: ldc           #6                  // class org/reactivestreams/Subscription
       4: ldc           #19                 // String s
       6: invokestatic  #24                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #4                  // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: ldc           #23                 // class reactor/core/publisher/Operators$DeferredSubscription
      14: ldc           #25                 // String requested
      16: invokestatic  #26                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      19: putstatic     #16                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      22: return
}
