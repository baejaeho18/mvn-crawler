Compiled from "DelegateProcessor.java"
final class reactor.core.publisher.DelegateProcessor<IN, OUT> extends reactor.core.publisher.FluxProcessor<IN, OUT> {
  final org.reactivestreams.Publisher<OUT> downstream;

  final org.reactivestreams.Subscriber<IN> upstream;

  reactor.core.publisher.DelegateProcessor(org.reactivestreams.Publisher<OUT>, org.reactivestreams.Subscriber<IN>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/FluxProcessor."<init>":()V
       4: aload_0
       5: aload_1
       6: ldc           #2                  // String Downstream must not be null
       8: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      11: checkcast     #4                  // class org/reactivestreams/Publisher
      14: putfield      #5                  // Field downstream:Lorg/reactivestreams/Publisher;
      17: aload_0
      18: aload_2
      19: ldc           #6                  // String Upstream must not be null
      21: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      24: checkcast     #7                  // class org/reactivestreams/Subscriber
      27: putfield      #8                  // Field upstream:Lorg/reactivestreams/Subscriber;
      30: return

  public reactor.util.context.Context currentContext();
    Code:
       0: aload_0
       1: getfield      #8                  // Field upstream:Lorg/reactivestreams/Subscriber;
       4: instanceof    #9                  // class reactor/core/CoreSubscriber
       7: ifeq          23
      10: aload_0
      11: getfield      #8                  // Field upstream:Lorg/reactivestreams/Subscriber;
      14: checkcast     #9                  // class reactor/core/CoreSubscriber
      17: invokeinterface #10,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      22: areturn
      23: invokestatic  #11                 // InterfaceMethod reactor/util/context/Context.empty:()Lreactor/util/context/Context;
      26: areturn

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #8                  // Field upstream:Lorg/reactivestreams/Subscriber;
       4: invokeinterface #12,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
       9: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #8                  // Field upstream:Lorg/reactivestreams/Subscriber;
       4: aload_1
       5: invokeinterface #13,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      10: return

  public void onNext(IN);
    Code:
       0: aload_0
       1: getfield      #8                  // Field upstream:Lorg/reactivestreams/Subscriber;
       4: aload_1
       5: invokeinterface #14,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
      10: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #8                  // Field upstream:Lorg/reactivestreams/Subscriber;
       4: aload_1
       5: invokeinterface #15,  2           // InterfaceMethod org/reactivestreams/Subscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      10: return

  public void subscribe(reactor.core.CoreSubscriber<? super OUT>);
    Code:
       0: aload_1
       1: ldc           #16                 // String subscribe
       3: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: getfield      #5                  // Field downstream:Lorg/reactivestreams/Publisher;
      11: aload_1
      12: invokeinterface #17,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
      17: return

  public boolean isSerialized();
    Code:
       0: aload_0
       1: getfield      #8                  // Field upstream:Lorg/reactivestreams/Subscriber;
       4: instanceof    #18                 // class reactor/core/publisher/SerializedSubscriber
       7: ifne          33
      10: aload_0
      11: getfield      #8                  // Field upstream:Lorg/reactivestreams/Subscriber;
      14: instanceof    #19                 // class reactor/core/publisher/FluxProcessor
      17: ifeq          37
      20: aload_0
      21: getfield      #8                  // Field upstream:Lorg/reactivestreams/Subscriber;
      24: checkcast     #19                 // class reactor/core/publisher/FluxProcessor
      27: invokevirtual #20                 // Method reactor/core/publisher/FluxProcessor.isSerialized:()Z
      30: ifeq          37
      33: iconst_1
      34: goto          38
      37: iconst_0
      38: ireturn

  public java.util.stream.Stream<? extends reactor.core.Scannable> inners();
    Code:
       0: aload_0
       1: getfield      #8                  // Field upstream:Lorg/reactivestreams/Subscriber;
       4: invokestatic  #21                 // InterfaceMethod reactor/core/Scannable.from:(Ljava/lang/Object;)Lreactor/core/Scannable;
       7: invokeinterface #22,  1           // InterfaceMethod reactor/core/Scannable.inners:()Ljava/util/stream/Stream;
      12: areturn

  public int getBufferSize();
    Code:
       0: aload_0
       1: getfield      #8                  // Field upstream:Lorg/reactivestreams/Subscriber;
       4: invokestatic  #21                 // InterfaceMethod reactor/core/Scannable.from:(Ljava/lang/Object;)Lreactor/core/Scannable;
       7: getstatic     #23                 // Field reactor/core/Scannable$Attr.CAPACITY:Lreactor/core/Scannable$Attr;
      10: aload_0
      11: invokespecial #24                 // Method reactor/core/publisher/FluxProcessor.getBufferSize:()I
      14: invokestatic  #25                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      17: invokeinterface #26,  3           // InterfaceMethod reactor/core/Scannable.scanOrDefault:(Lreactor/core/Scannable$Attr;Ljava/lang/Object;)Ljava/lang/Object;
      22: checkcast     #27                 // class java/lang/Integer
      25: invokevirtual #28                 // Method java/lang/Integer.intValue:()I
      28: ireturn

  public java.lang.Throwable getError();
    Code:
       0: aload_0
       1: getfield      #8                  // Field upstream:Lorg/reactivestreams/Subscriber;
       4: invokestatic  #21                 // InterfaceMethod reactor/core/Scannable.from:(Ljava/lang/Object;)Lreactor/core/Scannable;
       7: getstatic     #29                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
      10: aload_0
      11: invokespecial #30                 // Method reactor/core/publisher/FluxProcessor.getError:()Ljava/lang/Throwable;
      14: invokeinterface #26,  3           // InterfaceMethod reactor/core/Scannable.scanOrDefault:(Lreactor/core/Scannable$Attr;Ljava/lang/Object;)Ljava/lang/Object;
      19: checkcast     #31                 // class java/lang/Throwable
      22: areturn

  public boolean isTerminated();
    Code:
       0: aload_0
       1: getfield      #8                  // Field upstream:Lorg/reactivestreams/Subscriber;
       4: invokestatic  #21                 // InterfaceMethod reactor/core/Scannable.from:(Ljava/lang/Object;)Lreactor/core/Scannable;
       7: getstatic     #32                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      10: aload_0
      11: invokespecial #33                 // Method reactor/core/publisher/FluxProcessor.isTerminated:()Z
      14: invokestatic  #34                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      17: invokeinterface #26,  3           // InterfaceMethod reactor/core/Scannable.scanOrDefault:(Lreactor/core/Scannable$Attr;Ljava/lang/Object;)Ljava/lang/Object;
      22: checkcast     #35                 // class java/lang/Boolean
      25: invokevirtual #36                 // Method java/lang/Boolean.booleanValue:()Z
      28: ireturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #37                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #5                  // Field downstream:Lorg/reactivestreams/Publisher;
      11: areturn
      12: aload_0
      13: getfield      #8                  // Field upstream:Lorg/reactivestreams/Subscriber;
      16: invokestatic  #21                 // InterfaceMethod reactor/core/Scannable.from:(Ljava/lang/Object;)Lreactor/core/Scannable;
      19: aload_1
      20: invokeinterface #38,  2           // InterfaceMethod reactor/core/Scannable.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      25: areturn
}
