Compiled from "MonoSubscribeOn.java"
final class reactor.core.publisher.MonoSubscribeOn$SubscribeOnSubscriber<T> implements reactor.core.publisher.InnerOperator<T, T>, java.lang.Runnable {
  final reactor.core.CoreSubscriber<? super T> actual;

  final org.reactivestreams.Publisher<? extends T> parent;

  final reactor.core.scheduler.Scheduler$Worker worker;

  volatile org.reactivestreams.Subscription s;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.MonoSubscribeOn$SubscribeOnSubscriber, org.reactivestreams.Subscription> S;

  volatile long requested;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.MonoSubscribeOn$SubscribeOnSubscriber> REQUESTED;

  volatile java.lang.Thread thread;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.MonoSubscribeOn$SubscribeOnSubscriber, java.lang.Thread> THREAD;

  reactor.core.publisher.MonoSubscribeOn$SubscribeOnSubscriber(org.reactivestreams.Publisher<? extends T>, reactor.core.CoreSubscriber<? super T>, reactor.core.scheduler.Scheduler$Worker);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_2
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: aload_1
      11: putfield      #3                  // Field parent:Lorg/reactivestreams/Publisher;
      14: aload_0
      15: aload_3
      16: putfield      #4                  // Field worker:Lreactor/core/scheduler/Scheduler$Worker;
      19: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #5                  // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
       4: if_acmpne     26
       7: aload_0
       8: getfield      #6                  // Field s:Lorg/reactivestreams/Subscription;
      11: invokestatic  #7                  // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      14: if_acmpne     21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: invokestatic  #8                  // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      25: areturn
      26: aload_1
      27: getstatic     #9                  // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
      30: if_acmpne     38
      33: aload_0
      34: getfield      #6                  // Field s:Lorg/reactivestreams/Subscription;
      37: areturn
      38: aload_1
      39: getstatic     #10                 // Field reactor/core/Scannable$Attr.REQUESTED_FROM_DOWNSTREAM:Lreactor/core/Scannable$Attr;
      42: if_acmpne     53
      45: aload_0
      46: getfield      #11                 // Field requested:J
      49: invokestatic  #12                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      52: areturn
      53: aload_1
      54: getstatic     #13                 // Field reactor/core/Scannable$Attr.RUN_ON:Lreactor/core/Scannable$Attr;
      57: if_acmpne     65
      60: aload_0
      61: getfield      #4                  // Field worker:Lreactor/core/scheduler/Scheduler$Worker;
      64: areturn
      65: aload_0
      66: aload_1
      67: invokespecial #14                 // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      70: areturn

  public void run();
    Code:
       0: getstatic     #15                 // Field THREAD:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokestatic  #16                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       7: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V
      10: aload_0
      11: getfield      #3                  // Field parent:Lorg/reactivestreams/Publisher;
      14: aload_0
      15: invokeinterface #18,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
      20: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: getstatic     #19                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #20                 // Method reactor/core/publisher/Operators.setOnce:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          32
      11: getstatic     #21                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      14: aload_0
      15: lconst_0
      16: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.getAndSet:(Ljava/lang/Object;J)J
      19: lstore_2
      20: lload_2
      21: lconst_0
      22: lcmp
      23: ifeq          32
      26: aload_0
      27: lload_2
      28: aload_1
      29: invokevirtual #23                 // Method trySchedule:(JLorg/reactivestreams/Subscription;)V
      32: return

  public reactor.core.CoreSubscriber<? super T> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: aload_1
       5: invokeinterface #24,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      10: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: aload_1
       5: invokeinterface #25,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      10: aload_0
      11: getfield      #4                  // Field worker:Lreactor/core/scheduler/Scheduler$Worker;
      14: invokeinterface #26,  1           // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.dispose:()V
      19: getstatic     #15                 // Field THREAD:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      22: aload_0
      23: aconst_null
      24: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V
      27: goto          50
      30: astore_2
      31: aload_0
      32: getfield      #4                  // Field worker:Lreactor/core/scheduler/Scheduler$Worker;
      35: invokeinterface #26,  1           // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.dispose:()V
      40: getstatic     #15                 // Field THREAD:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      43: aload_0
      44: aconst_null
      45: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V
      48: aload_2
      49: athrow
      50: return
    Exception table:
       from    to  target type
           0    10    30   any

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: invokeinterface #27,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
       9: aload_0
      10: getfield      #4                  // Field worker:Lreactor/core/scheduler/Scheduler$Worker;
      13: invokeinterface #26,  1           // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.dispose:()V
      18: getstatic     #15                 // Field THREAD:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      21: aload_0
      22: aconst_null
      23: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V
      26: return

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #28                 // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          66
       7: aload_0
       8: getfield      #6                  // Field s:Lorg/reactivestreams/Subscription;
      11: astore_3
      12: aload_3
      13: ifnull        25
      16: aload_0
      17: lload_1
      18: aload_3
      19: invokevirtual #23                 // Method trySchedule:(JLorg/reactivestreams/Subscription;)V
      22: goto          66
      25: getstatic     #21                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      28: aload_0
      29: lload_1
      30: invokestatic  #29                 // Method reactor/core/publisher/Operators.addCap:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
      33: pop2
      34: aload_0
      35: getfield      #6                  // Field s:Lorg/reactivestreams/Subscription;
      38: astore_3
      39: aload_3
      40: ifnull        66
      43: getstatic     #21                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      46: aload_0
      47: lconst_0
      48: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.getAndSet:(Ljava/lang/Object;J)J
      51: lstore        4
      53: lload         4
      55: lconst_0
      56: lcmp
      57: ifeq          66
      60: aload_0
      61: lload_1
      62: aload_3
      63: invokevirtual #23                 // Method trySchedule:(JLorg/reactivestreams/Subscription;)V
      66: return

  void trySchedule(long, org.reactivestreams.Subscription);
    Code:
       0: invokestatic  #16                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       3: getstatic     #15                 // Field THREAD:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       6: aload_0
       7: invokevirtual #30                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: if_acmpne     23
      13: aload_3
      14: lload_1
      15: invokeinterface #31,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      20: goto          83
      23: aload_0
      24: getfield      #4                  // Field worker:Lreactor/core/scheduler/Scheduler$Worker;
      27: aload_3
      28: lload_1
      29: invokedynamic #32,  0             // InvokeDynamic #0:run:(Lorg/reactivestreams/Subscription;J)Ljava/lang/Runnable;
      34: invokeinterface #33,  2           // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.schedule:(Ljava/lang/Runnable;)Lreactor/core/Disposable;
      39: pop
      40: goto          83
      43: astore        4
      45: aload_0
      46: getfield      #4                  // Field worker:Lreactor/core/scheduler/Scheduler$Worker;
      49: invokeinterface #35,  1           // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.isDisposed:()Z
      54: ifne          83
      57: aload_0
      58: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      61: aload         4
      63: aload_0
      64: aconst_null
      65: aconst_null
      66: aload_0
      67: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      70: invokeinterface #36,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      75: invokestatic  #37                 // Method reactor/core/publisher/Operators.onRejectedExecution:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/RuntimeException;
      78: invokeinterface #25,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      83: return
    Exception table:
       from    to  target type
          23    40    43   Class java/util/concurrent/RejectedExecutionException

  public void cancel();
    Code:
       0: getstatic     #19                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokestatic  #38                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
       7: ifeq          19
      10: aload_0
      11: getfield      #4                  // Field worker:Lreactor/core/scheduler/Scheduler$Worker;
      14: invokeinterface #26,  1           // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.dispose:()V
      19: return

  private static void lambda$trySchedule$0(org.reactivestreams.Subscription, long);
    Code:
       0: aload_0
       1: lload_1
       2: invokeinterface #31,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
       7: return

  static {};
    Code:
       0: ldc           #39                 // class reactor/core/publisher/MonoSubscribeOn$SubscribeOnSubscriber
       2: ldc           #40                 // class org/reactivestreams/Subscription
       4: ldc           #41                 // String s
       6: invokestatic  #42                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #19                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: ldc           #39                 // class reactor/core/publisher/MonoSubscribeOn$SubscribeOnSubscriber
      14: ldc           #43                 // String requested
      16: invokestatic  #44                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      19: putstatic     #21                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      22: ldc           #39                 // class reactor/core/publisher/MonoSubscribeOn$SubscribeOnSubscriber
      24: ldc           #45                 // class java/lang/Thread
      26: ldc           #46                 // String thread
      28: invokestatic  #42                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      31: putstatic     #15                 // Field THREAD:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      34: return
}
