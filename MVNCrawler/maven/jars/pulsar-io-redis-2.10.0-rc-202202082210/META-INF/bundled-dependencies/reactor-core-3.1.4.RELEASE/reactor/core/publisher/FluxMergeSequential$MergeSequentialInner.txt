Compiled from "FluxMergeSequential.java"
final class reactor.core.publisher.FluxMergeSequential$MergeSequentialInner<R> implements reactor.core.publisher.InnerConsumer<R> {
  final reactor.core.publisher.FluxMergeSequential$MergeSequentialMain<?, R> parent;

  final int prefetch;

  final int limit;

  volatile java.util.Queue<R> queue;

  volatile org.reactivestreams.Subscription subscription;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxMergeSequential$MergeSequentialInner, org.reactivestreams.Subscription> SUBSCRIPTION;

  volatile boolean done;

  long produced;

  int fusionMode;

  reactor.core.publisher.FluxMergeSequential$MergeSequentialInner(reactor.core.publisher.FluxMergeSequential$MergeSequentialMain<?, R>, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field parent:Lreactor/core/publisher/FluxMergeSequential$MergeSequentialMain;
       9: aload_0
      10: iload_2
      11: putfield      #3                  // Field prefetch:I
      14: aload_0
      15: iload_2
      16: invokestatic  #4                  // Method reactor/core/publisher/Operators.unboundedOrLimit:(I)I
      19: putfield      #5                  // Field limit:I
      22: return

  public reactor.util.context.Context currentContext();
    Code:
       0: aload_0
       1: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxMergeSequential$MergeSequentialMain;
       4: invokevirtual #6                  // Method reactor/core/publisher/FluxMergeSequential$MergeSequentialMain.currentContext:()Lreactor/util/context/Context;
       7: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #7                  // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #8                  // Field subscription:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #9                  // Field reactor/core/Scannable$Attr.ACTUAL:Lreactor/core/Scannable$Attr;
      16: if_acmpne     24
      19: aload_0
      20: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxMergeSequential$MergeSequentialMain;
      23: areturn
      24: aload_1
      25: getstatic     #10                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      28: if_acmpne     66
      31: aload_0
      32: getfield      #11                 // Field done:Z
      35: ifeq          61
      38: aload_0
      39: getfield      #12                 // Field queue:Ljava/util/Queue;
      42: ifnull        57
      45: aload_0
      46: getfield      #12                 // Field queue:Ljava/util/Queue;
      49: invokeinterface #13,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
      54: ifeq          61
      57: iconst_1
      58: goto          62
      61: iconst_0
      62: invokestatic  #14                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      65: areturn
      66: aload_1
      67: getstatic     #15                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      70: if_acmpne     92
      73: aload_0
      74: getfield      #8                  // Field subscription:Lorg/reactivestreams/Subscription;
      77: invokestatic  #16                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      80: if_acmpne     87
      83: iconst_1
      84: goto          88
      87: iconst_0
      88: invokestatic  #14                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      91: areturn
      92: aload_1
      93: getstatic     #17                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      96: if_acmpne     123
      99: aload_0
     100: getfield      #12                 // Field queue:Ljava/util/Queue;
     103: ifnonnull     110
     106: iconst_0
     107: goto          119
     110: aload_0
     111: getfield      #12                 // Field queue:Ljava/util/Queue;
     114: invokeinterface #18,  1           // InterfaceMethod java/util/Queue.size:()I
     119: invokestatic  #19                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     122: areturn
     123: aload_1
     124: getstatic     #20                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
     127: if_acmpne     138
     130: aload_0
     131: getfield      #3                  // Field prefetch:I
     134: invokestatic  #19                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     137: areturn
     138: aconst_null
     139: areturn

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: getstatic     #21                 // Field SUBSCRIPTION:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #22                 // Method reactor/core/publisher/Operators.setOnce:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          122
      11: aload_1
      12: instanceof    #23                 // class reactor/core/Fuseable$QueueSubscription
      15: ifeq          90
      18: aload_1
      19: checkcast     #23                 // class reactor/core/Fuseable$QueueSubscription
      22: astore_2
      23: aload_2
      24: bipush        7
      26: invokeinterface #25,  2           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.requestFusion:(I)I
      31: istore_3
      32: iload_3
      33: iconst_1
      34: if_icmpne     61
      37: aload_0
      38: iload_3
      39: putfield      #26                 // Field fusionMode:I
      42: aload_0
      43: aload_2
      44: putfield      #12                 // Field queue:Ljava/util/Queue;
      47: aload_0
      48: iconst_1
      49: putfield      #11                 // Field done:Z
      52: aload_0
      53: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxMergeSequential$MergeSequentialMain;
      56: aload_0
      57: invokevirtual #27                 // Method reactor/core/publisher/FluxMergeSequential$MergeSequentialMain.innerComplete:(Lreactor/core/publisher/FluxMergeSequential$MergeSequentialInner;)V
      60: return
      61: iload_3
      62: iconst_2
      63: if_icmpne     90
      66: aload_0
      67: iload_3
      68: putfield      #26                 // Field fusionMode:I
      71: aload_0
      72: aload_2
      73: putfield      #12                 // Field queue:Ljava/util/Queue;
      76: aload_1
      77: aload_0
      78: getfield      #3                  // Field prefetch:I
      81: invokestatic  #28                 // Method reactor/core/publisher/Operators.unboundedOrPrefetch:(I)J
      84: invokeinterface #29,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      89: return
      90: aload_0
      91: aload_0
      92: getfield      #3                  // Field prefetch:I
      95: invokestatic  #30                 // Method reactor/util/concurrent/Queues.get:(I)Ljava/util/function/Supplier;
      98: invokeinterface #31,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
     103: checkcast     #32                 // class java/util/Queue
     106: putfield      #12                 // Field queue:Ljava/util/Queue;
     109: aload_1
     110: aload_0
     111: getfield      #3                  // Field prefetch:I
     114: invokestatic  #28                 // Method reactor/core/publisher/Operators.unboundedOrPrefetch:(I)J
     117: invokeinterface #29,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     122: return

  public void onNext(R);
    Code:
       0: aload_0
       1: getfield      #26                 // Field fusionMode:I
       4: ifne          19
       7: aload_0
       8: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxMergeSequential$MergeSequentialMain;
      11: aload_0
      12: aload_1
      13: invokevirtual #33                 // Method reactor/core/publisher/FluxMergeSequential$MergeSequentialMain.innerNext:(Lreactor/core/publisher/FluxMergeSequential$MergeSequentialInner;Ljava/lang/Object;)V
      16: goto          26
      19: aload_0
      20: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxMergeSequential$MergeSequentialMain;
      23: invokevirtual #34                 // Method reactor/core/publisher/FluxMergeSequential$MergeSequentialMain.drain:()V
      26: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxMergeSequential$MergeSequentialMain;
       4: aload_0
       5: aload_1
       6: invokevirtual #35                 // Method reactor/core/publisher/FluxMergeSequential$MergeSequentialMain.innerError:(Lreactor/core/publisher/FluxMergeSequential$MergeSequentialInner;Ljava/lang/Throwable;)V
       9: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxMergeSequential$MergeSequentialMain;
       4: aload_0
       5: invokevirtual #27                 // Method reactor/core/publisher/FluxMergeSequential$MergeSequentialMain.innerComplete:(Lreactor/core/publisher/FluxMergeSequential$MergeSequentialInner;)V
       8: return

  void requestOne();
    Code:
       0: aload_0
       1: getfield      #26                 // Field fusionMode:I
       4: iconst_1
       5: if_icmpeq     48
       8: aload_0
       9: getfield      #36                 // Field produced:J
      12: lconst_1
      13: ladd
      14: lstore_1
      15: lload_1
      16: aload_0
      17: getfield      #5                  // Field limit:I
      20: i2l
      21: lcmp
      22: ifne          43
      25: aload_0
      26: lconst_0
      27: putfield      #36                 // Field produced:J
      30: aload_0
      31: getfield      #8                  // Field subscription:Lorg/reactivestreams/Subscription;
      34: lload_1
      35: invokeinterface #29,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      40: goto          48
      43: aload_0
      44: lload_1
      45: putfield      #36                 // Field produced:J
      48: return

  void cancel();
    Code:
       0: getstatic     #21                 // Field SUBSCRIPTION:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokestatic  #16                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
       7: invokestatic  #37                 // Method reactor/core/publisher/Operators.set:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
      10: pop
      11: return

  boolean isDone();
    Code:
       0: aload_0
       1: getfield      #11                 // Field done:Z
       4: ireturn

  void setDone();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #11                 // Field done:Z
       5: return

  java.util.Queue<R> queue();
    Code:
       0: aload_0
       1: getfield      #12                 // Field queue:Ljava/util/Queue;
       4: areturn

  static {};
    Code:
       0: ldc           #38                 // class reactor/core/publisher/FluxMergeSequential$MergeSequentialInner
       2: ldc           #39                 // class org/reactivestreams/Subscription
       4: ldc           #40                 // String subscription
       6: invokestatic  #41                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #21                 // Field SUBSCRIPTION:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: return
}
