Compiled from "FluxFlatMap.java"
final class reactor.core.publisher.FluxFlatMap$FlatMapMain<T, R> extends reactor.core.publisher.FlatMapTracker<reactor.core.publisher.FluxFlatMap$FlatMapInner<R>> implements reactor.core.publisher.InnerOperator<T, R> {
  final boolean delayError;

  final int maxConcurrency;

  final int prefetch;

  final int limit;

  final java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>> mapper;

  final java.util.function.Supplier<? extends java.util.Queue<R>> mainQueueSupplier;

  final java.util.function.Supplier<? extends java.util.Queue<R>> innerQueueSupplier;

  final reactor.core.CoreSubscriber<? super R> actual;

  volatile java.util.Queue<R> scalarQueue;

  volatile java.lang.Throwable error;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxFlatMap$FlatMapMain, java.lang.Throwable> ERROR;

  volatile boolean done;

  volatile boolean cancelled;

  org.reactivestreams.Subscription s;

  volatile long requested;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.FluxFlatMap$FlatMapMain> REQUESTED;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxFlatMap$FlatMapMain> WIP;

  static final reactor.core.publisher.FluxFlatMap$FlatMapInner[] EMPTY;

  static final reactor.core.publisher.FluxFlatMap$FlatMapInner[] TERMINATED;

  int lastIndex;

  int produced;

  reactor.core.publisher.FluxFlatMap$FlatMapMain(reactor.core.CoreSubscriber<? super R>, java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>>, boolean, int, java.util.function.Supplier<? extends java.util.Queue<R>>, int, java.util.function.Supplier<? extends java.util.Queue<R>>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/FlatMapTracker."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field mapper:Ljava/util/function/Function;
      14: aload_0
      15: iload_3
      16: putfield      #4                  // Field delayError:Z
      19: aload_0
      20: iload         4
      22: putfield      #5                  // Field maxConcurrency:I
      25: aload_0
      26: aload         5
      28: putfield      #6                  // Field mainQueueSupplier:Ljava/util/function/Supplier;
      31: aload_0
      32: iload         6
      34: putfield      #7                  // Field prefetch:I
      37: aload_0
      38: aload         7
      40: putfield      #8                  // Field innerQueueSupplier:Ljava/util/function/Supplier;
      43: aload_0
      44: iload         4
      46: invokestatic  #9                  // Method reactor/core/publisher/Operators.unboundedOrLimit:(I)I
      49: putfield      #10                 // Field limit:I
      52: return

  public final reactor.core.CoreSubscriber<? super R> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public java.util.stream.Stream<? extends reactor.core.Scannable> inners();
    Code:
       0: aload_0
       1: getfield      #11                 // Field array:[Ljava/lang/Object;
       4: invokestatic  #12                 // InterfaceMethod java/util/stream/Stream.of:([Ljava/lang/Object;)Ljava/util/stream/Stream;
       7: invokedynamic #13,  0             // InvokeDynamic #0:test:()Ljava/util/function/Predicate;
      12: invokeinterface #14,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      17: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #15                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #16                 // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #17                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      16: if_acmpne     27
      19: aload_0
      20: getfield      #18                 // Field cancelled:Z
      23: invokestatic  #19                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      26: areturn
      27: aload_1
      28: getstatic     #20                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
      31: if_acmpne     39
      34: aload_0
      35: getfield      #21                 // Field error:Ljava/lang/Throwable;
      38: areturn
      39: aload_1
      40: getstatic     #22                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      43: if_acmpne     81
      46: aload_0
      47: getfield      #23                 // Field done:Z
      50: ifeq          76
      53: aload_0
      54: getfield      #24                 // Field scalarQueue:Ljava/util/Queue;
      57: ifnull        72
      60: aload_0
      61: getfield      #24                 // Field scalarQueue:Ljava/util/Queue;
      64: invokeinterface #25,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
      69: ifeq          76
      72: iconst_1
      73: goto          77
      76: iconst_0
      77: invokestatic  #19                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      80: areturn
      81: aload_1
      82: getstatic     #26                 // Field reactor/core/Scannable$Attr.DELAY_ERROR:Lreactor/core/Scannable$Attr;
      85: if_acmpne     96
      88: aload_0
      89: getfield      #4                  // Field delayError:Z
      92: invokestatic  #19                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      95: areturn
      96: aload_1
      97: getstatic     #27                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
     100: if_acmpne     111
     103: aload_0
     104: getfield      #5                  // Field maxConcurrency:I
     107: invokestatic  #28                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     110: areturn
     111: aload_1
     112: getstatic     #29                 // Field reactor/core/Scannable$Attr.REQUESTED_FROM_DOWNSTREAM:Lreactor/core/Scannable$Attr;
     115: if_acmpne     126
     118: aload_0
     119: getfield      #30                 // Field requested:J
     122: invokestatic  #31                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     125: areturn
     126: aload_1
     127: getstatic     #32                 // Field reactor/core/Scannable$Attr.LARGE_BUFFERED:Lreactor/core/Scannable$Attr;
     130: if_acmpne     164
     133: aload_0
     134: getfield      #24                 // Field scalarQueue:Ljava/util/Queue;
     137: ifnull        153
     140: aload_0
     141: getfield      #24                 // Field scalarQueue:Ljava/util/Queue;
     144: invokeinterface #33,  1           // InterfaceMethod java/util/Queue.size:()I
     149: i2l
     150: goto          154
     153: lconst_0
     154: aload_0
     155: getfield      #34                 // Field size:I
     158: i2l
     159: ladd
     160: invokestatic  #31                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     163: areturn
     164: aload_1
     165: getstatic     #35                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
     168: if_acmpne     219
     171: aload_0
     172: getfield      #24                 // Field scalarQueue:Ljava/util/Queue;
     175: ifnull        191
     178: aload_0
     179: getfield      #24                 // Field scalarQueue:Ljava/util/Queue;
     182: invokeinterface #33,  1           // InterfaceMethod java/util/Queue.size:()I
     187: i2l
     188: goto          192
     191: lconst_0
     192: aload_0
     193: getfield      #34                 // Field size:I
     196: i2l
     197: ladd
     198: lstore_2
     199: lload_2
     200: ldc2_w        #37                 // long 2147483647l
     203: lcmp
     204: ifgt          213
     207: lload_2
     208: l2i
     209: invokestatic  #28                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     212: areturn
     213: ldc           #39                 // int -2147483648
     215: invokestatic  #28                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     218: areturn
     219: aload_0
     220: aload_1
     221: invokespecial #40                 // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
     224: areturn

  reactor.core.publisher.FluxFlatMap$FlatMapInner<R>[] empty();
    Code:
       0: getstatic     #41                 // Field EMPTY:[Lreactor/core/publisher/FluxFlatMap$FlatMapInner;
       3: areturn

  reactor.core.publisher.FluxFlatMap$FlatMapInner<R>[] terminated();
    Code:
       0: getstatic     #42                 // Field TERMINATED:[Lreactor/core/publisher/FluxFlatMap$FlatMapInner;
       3: areturn

  reactor.core.publisher.FluxFlatMap$FlatMapInner<R>[] newArray(int);
    Code:
       0: iload_1
       1: anewarray     #43                 // class reactor/core/publisher/FluxFlatMap$FlatMapInner
       4: areturn

  void setIndex(reactor.core.publisher.FluxFlatMap$FlatMapInner<R>, int);
    Code:
       0: aload_1
       1: iload_2
       2: putfield      #44                 // Field reactor/core/publisher/FluxFlatMap$FlatMapInner.index:I
       5: return

  void unsubscribeEntry(reactor.core.publisher.FluxFlatMap$FlatMapInner<R>);
    Code:
       0: aload_1
       1: invokevirtual #45                 // Method reactor/core/publisher/FluxFlatMap$FlatMapInner.cancel:()V
       4: return

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #46                 // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          20
       7: getstatic     #47                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      10: aload_0
      11: lload_1
      12: invokestatic  #48                 // Method reactor/core/publisher/Operators.addCap:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
      15: pop2
      16: aload_0
      17: invokevirtual #49                 // Method drain:()V
      20: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #18                 // Field cancelled:Z
       4: ifne          40
       7: aload_0
       8: iconst_1
       9: putfield      #18                 // Field cancelled:Z
      12: getstatic     #50                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      15: aload_0
      16: invokevirtual #51                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
      19: ifne          40
      22: aload_0
      23: aconst_null
      24: putfield      #24                 // Field scalarQueue:Ljava/util/Queue;
      27: aload_0
      28: getfield      #16                 // Field s:Lorg/reactivestreams/Subscription;
      31: invokeinterface #52,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      36: aload_0
      37: invokevirtual #53                 // Method unsubscribe:()V
      40: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #16                 // Field s:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #54                 // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          39
      11: aload_0
      12: aload_1
      13: putfield      #16                 // Field s:Lorg/reactivestreams/Subscription;
      16: aload_0
      17: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      20: aload_0
      21: invokeinterface #55,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      26: aload_1
      27: aload_0
      28: getfield      #5                  // Field maxConcurrency:I
      31: invokestatic  #56                 // Method reactor/core/publisher/Operators.unboundedOrPrefetch:(I)J
      34: invokeinterface #57,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      39: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #23                 // Field done:Z
       4: ifeq          21
       7: aload_1
       8: aload_0
       9: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      12: invokeinterface #58,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #59                 // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      20: return
      21: aload_0
      22: getfield      #3                  // Field mapper:Ljava/util/function/Function;
      25: aload_1
      26: invokeinterface #60,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      31: ldc           #61                 // String The mapper returned a null Publisher
      33: invokestatic  #62                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      36: checkcast     #63                 // class org/reactivestreams/Publisher
      39: astore_2
      40: goto          67
      43: astore_3
      44: aload_0
      45: aload_0
      46: getfield      #16                 // Field s:Lorg/reactivestreams/Subscription;
      49: aload_3
      50: aload_1
      51: aload_0
      52: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      55: invokeinterface #58,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      60: invokestatic  #65                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      63: invokevirtual #66                 // Method onError:(Ljava/lang/Throwable;)V
      66: return
      67: aload_2
      68: instanceof    #67                 // class java/util/concurrent/Callable
      71: ifeq          140
      74: aload_2
      75: checkcast     #67                 // class java/util/concurrent/Callable
      78: invokeinterface #68,  1           // InterfaceMethod java/util/concurrent/Callable.call:()Ljava/lang/Object;
      83: astore_3
      84: goto          132
      87: astore        4
      89: aload_0
      90: getfield      #4                  // Field delayError:Z
      93: ifeq          108
      96: getstatic     #69                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      99: aload_0
     100: aload         4
     102: invokestatic  #70                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
     105: ifne          131
     108: aload_0
     109: aload_0
     110: getfield      #16                 // Field s:Lorg/reactivestreams/Subscription;
     113: aload         4
     115: aload_1
     116: aload_0
     117: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     120: invokeinterface #58,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
     125: invokestatic  #65                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
     128: invokevirtual #66                 // Method onError:(Ljava/lang/Throwable;)V
     131: return
     132: aload_0
     133: aload_3
     134: invokevirtual #71                 // Method tryEmitScalar:(Ljava/lang/Object;)V
     137: goto          168
     140: new           #43                 // class reactor/core/publisher/FluxFlatMap$FlatMapInner
     143: dup
     144: aload_0
     145: aload_0
     146: getfield      #7                  // Field prefetch:I
     149: invokespecial #72                 // Method reactor/core/publisher/FluxFlatMap$FlatMapInner."<init>":(Lreactor/core/publisher/FluxFlatMap$FlatMapMain;I)V
     152: astore_3
     153: aload_0
     154: aload_3
     155: invokevirtual #73                 // Method add:(Ljava/lang/Object;)Z
     158: ifeq          168
     161: aload_2
     162: aload_3
     163: invokeinterface #74,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
     168: return
    Exception table:
       from    to  target type
          21    40    43   Class java/lang/Throwable
          74    84    87   Class java/lang/Throwable

  java.util.Queue<R> getOrCreateScalarQueue();
    Code:
       0: aload_0
       1: getfield      #24                 // Field scalarQueue:Ljava/util/Queue;
       4: astore_1
       5: aload_1
       6: ifnonnull     27
       9: aload_0
      10: getfield      #6                  // Field mainQueueSupplier:Ljava/util/function/Supplier;
      13: invokeinterface #75,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      18: checkcast     #76                 // class java/util/Queue
      21: astore_1
      22: aload_0
      23: aload_1
      24: putfield      #24                 // Field scalarQueue:Ljava/util/Queue;
      27: aload_1
      28: areturn

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #23                 // Field done:Z
       4: ifeq          21
       7: aload_1
       8: aload_0
       9: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      12: invokeinterface #58,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #77                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      20: return
      21: getstatic     #69                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      24: aload_0
      25: aload_1
      26: invokestatic  #70                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
      29: ifeq          44
      32: aload_0
      33: iconst_1
      34: putfield      #23                 // Field done:Z
      37: aload_0
      38: invokevirtual #49                 // Method drain:()V
      41: goto          57
      44: aload_1
      45: aload_0
      46: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      49: invokeinterface #58,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      54: invokestatic  #77                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      57: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #23                 // Field done:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #23                 // Field done:Z
      13: aload_0
      14: invokevirtual #49                 // Method drain:()V
      17: return

  void tryEmitScalar(R);
    Code:
       0: aload_1
       1: ifnonnull     53
       4: aload_0
       5: getfield      #5                  // Field maxConcurrency:I
       8: ldc           #78                 // int 2147483647
      10: if_icmpeq     52
      13: aload_0
      14: getfield      #79                 // Field produced:I
      17: iconst_1
      18: iadd
      19: istore_2
      20: iload_2
      21: aload_0
      22: getfield      #10                 // Field limit:I
      25: if_icmpne     47
      28: aload_0
      29: iconst_0
      30: putfield      #79                 // Field produced:I
      33: aload_0
      34: getfield      #16                 // Field s:Lorg/reactivestreams/Subscription;
      37: iload_2
      38: i2l
      39: invokeinterface #57,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      44: goto          52
      47: aload_0
      48: iload_2
      49: putfield      #79                 // Field produced:I
      52: return
      53: aload_0
      54: getfield      #80                 // Field wip:I
      57: ifne          247
      60: getstatic     #50                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      63: aload_0
      64: iconst_0
      65: iconst_1
      66: invokevirtual #81                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      69: ifeq          247
      72: aload_0
      73: getfield      #30                 // Field requested:J
      76: lstore_2
      77: aload_0
      78: getfield      #24                 // Field scalarQueue:Ljava/util/Queue;
      81: astore        4
      83: lload_2
      84: lconst_0
      85: lcmp
      86: ifeq          185
      89: aload         4
      91: ifnull        104
      94: aload         4
      96: invokeinterface #25,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
     101: ifeq          185
     104: aload_0
     105: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     108: aload_1
     109: invokeinterface #82,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
     114: lload_2
     115: ldc2_w        #84                 // long 9223372036854775807l
     118: lcmp
     119: ifeq          130
     122: getstatic     #47                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
     125: aload_0
     126: invokevirtual #86                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.decrementAndGet:(Ljava/lang/Object;)J
     129: pop2
     130: aload_0
     131: getfield      #5                  // Field maxConcurrency:I
     134: ldc           #78                 // int 2147483647
     136: if_icmpeq     229
     139: aload_0
     140: getfield      #79                 // Field produced:I
     143: iconst_1
     144: iadd
     145: istore        5
     147: iload         5
     149: aload_0
     150: getfield      #10                 // Field limit:I
     153: if_icmpne     176
     156: aload_0
     157: iconst_0
     158: putfield      #79                 // Field produced:I
     161: aload_0
     162: getfield      #16                 // Field s:Lorg/reactivestreams/Subscription;
     165: iload         5
     167: i2l
     168: invokeinterface #57,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     173: goto          182
     176: aload_0
     177: iload         5
     179: putfield      #79                 // Field produced:I
     182: goto          229
     185: aload         4
     187: ifnonnull     196
     190: aload_0
     191: invokevirtual #87                 // Method getOrCreateScalarQueue:()Ljava/util/Queue;
     194: astore        4
     196: aload         4
     198: aload_1
     199: invokeinterface #88,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
     204: ifne          229
     207: aload_0
     208: aload_1
     209: aload_0
     210: getfield      #16                 // Field s:Lorg/reactivestreams/Subscription;
     213: invokevirtual #89                 // Method failOverflow:(Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
     216: ifeq          229
     219: aload_0
     220: iconst_1
     221: putfield      #23                 // Field done:Z
     224: aload_0
     225: invokevirtual #90                 // Method drainLoop:()V
     228: return
     229: getstatic     #50                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     232: aload_0
     233: invokevirtual #91                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
     236: ifne          240
     239: return
     240: aload_0
     241: invokevirtual #90                 // Method drainLoop:()V
     244: goto          283
     247: aload_0
     248: invokevirtual #87                 // Method getOrCreateScalarQueue:()Ljava/util/Queue;
     251: astore_2
     252: aload_2
     253: aload_1
     254: invokeinterface #88,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
     259: ifne          279
     262: aload_0
     263: aload_1
     264: aload_0
     265: getfield      #16                 // Field s:Lorg/reactivestreams/Subscription;
     268: invokevirtual #89                 // Method failOverflow:(Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
     271: ifeq          279
     274: aload_0
     275: iconst_1
     276: putfield      #23                 // Field done:Z
     279: aload_0
     280: invokevirtual #49                 // Method drain:()V
     283: return

  void tryEmit(reactor.core.publisher.FluxFlatMap$FlatMapInner<R>, R);
    Code:
       0: aload_0
       1: getfield      #80                 // Field wip:I
       4: ifne          145
       7: getstatic     #50                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: aload_0
      11: iconst_0
      12: iconst_1
      13: invokevirtual #81                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      16: ifeq          145
      19: aload_0
      20: getfield      #30                 // Field requested:J
      23: lstore_3
      24: aload_1
      25: getfield      #92                 // Field reactor/core/publisher/FluxFlatMap$FlatMapInner.queue:Ljava/util/Queue;
      28: astore        5
      30: lload_3
      31: lconst_0
      32: lcmp
      33: ifeq          85
      36: aload         5
      38: ifnull        51
      41: aload         5
      43: invokeinterface #25,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
      48: ifeq          85
      51: aload_0
      52: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      55: aload_2
      56: invokeinterface #82,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      61: lload_3
      62: ldc2_w        #84                 // long 9223372036854775807l
      65: lcmp
      66: ifeq          77
      69: getstatic     #47                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      72: aload_0
      73: invokevirtual #86                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.decrementAndGet:(Ljava/lang/Object;)J
      76: pop2
      77: aload_1
      78: lconst_1
      79: invokevirtual #93                 // Method reactor/core/publisher/FluxFlatMap$FlatMapInner.request:(J)V
      82: goto          127
      85: aload         5
      87: ifnonnull     97
      90: aload_0
      91: aload_1
      92: invokevirtual #94                 // Method getOrCreateInnerQueue:(Lreactor/core/publisher/FluxFlatMap$FlatMapInner;)Ljava/util/Queue;
      95: astore        5
      97: aload         5
      99: aload_2
     100: invokeinterface #88,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
     105: ifne          127
     108: aload_0
     109: aload_2
     110: aload_1
     111: invokevirtual #89                 // Method failOverflow:(Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
     114: ifeq          127
     117: aload_1
     118: iconst_1
     119: putfield      #95                 // Field reactor/core/publisher/FluxFlatMap$FlatMapInner.done:Z
     122: aload_0
     123: invokevirtual #90                 // Method drainLoop:()V
     126: return
     127: getstatic     #50                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     130: aload_0
     131: invokevirtual #91                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
     134: ifne          138
     137: return
     138: aload_0
     139: invokevirtual #90                 // Method drainLoop:()V
     142: goto          179
     145: aload_0
     146: aload_1
     147: invokevirtual #94                 // Method getOrCreateInnerQueue:(Lreactor/core/publisher/FluxFlatMap$FlatMapInner;)Ljava/util/Queue;
     150: astore_3
     151: aload_3
     152: aload_2
     153: invokeinterface #88,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
     158: ifne          175
     161: aload_0
     162: aload_2
     163: aload_1
     164: invokevirtual #89                 // Method failOverflow:(Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
     167: ifeq          175
     170: aload_1
     171: iconst_1
     172: putfield      #95                 // Field reactor/core/publisher/FluxFlatMap$FlatMapInner.done:Z
     175: aload_0
     176: invokevirtual #49                 // Method drain:()V
     179: return

  void drain();
    Code:
       0: getstatic     #50                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #51                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifeq          11
      10: return
      11: aload_0
      12: invokevirtual #90                 // Method drainLoop:()V
      15: return

  void drainLoop();
    Code:
       0: iconst_1
       1: istore_1
       2: aload_0
       3: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       6: astore_2
       7: aload_0
       8: getfield      #23                 // Field done:Z
      11: istore_3
      12: aload_0
      13: invokevirtual #96                 // Method get:()[Ljava/lang/Object;
      16: checkcast     #97                 // class "[Lreactor/core/publisher/FluxFlatMap$FlatMapInner;"
      19: astore        4
      21: aload         4
      23: arraylength
      24: istore        5
      26: aload_0
      27: getfield      #24                 // Field scalarQueue:Ljava/util/Queue;
      30: astore        6
      32: aload_0
      33: invokevirtual #98                 // Method isEmpty:()Z
      36: istore        7
      38: aload_0
      39: iload_3
      40: iload         7
      42: ifeq          64
      45: aload         6
      47: ifnull        60
      50: aload         6
      52: invokeinterface #25,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
      57: ifeq          64
      60: iconst_1
      61: goto          65
      64: iconst_0
      65: aload_2
      66: invokevirtual #99                 // Method checkTerminated:(ZZLorg/reactivestreams/Subscriber;)Z
      69: ifeq          73
      72: return
      73: iconst_0
      74: istore        8
      76: aload_0
      77: getfield      #30                 // Field requested:J
      80: lstore        9
      82: lconst_0
      83: lstore        11
      85: lconst_0
      86: lstore        13
      88: lload         9
      90: lconst_0
      91: lcmp
      92: ifeq          211
      95: aload         6
      97: ifnull        211
     100: lload         11
     102: lload         9
     104: lcmp
     105: ifeq          170
     108: aload_0
     109: getfield      #23                 // Field done:Z
     112: istore_3
     113: aload         6
     115: invokeinterface #100,  1          // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
     120: astore        15
     122: aload         15
     124: ifnonnull     131
     127: iconst_1
     128: goto          132
     131: iconst_0
     132: istore        16
     134: aload_0
     135: iload_3
     136: iconst_0
     137: aload_2
     138: invokevirtual #99                 // Method checkTerminated:(ZZLorg/reactivestreams/Subscriber;)Z
     141: ifeq          145
     144: return
     145: iload         16
     147: ifeq          153
     150: goto          170
     153: aload_2
     154: aload         15
     156: invokeinterface #101,  2          // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
     161: lload         11
     163: lconst_1
     164: ladd
     165: lstore        11
     167: goto          100
     170: lload         11
     172: lconst_0
     173: lcmp
     174: ifeq          211
     177: lload         13
     179: lload         11
     181: ladd
     182: lstore        13
     184: lload         9
     186: ldc2_w        #84                 // long 9223372036854775807l
     189: lcmp
     190: ifeq          205
     193: getstatic     #47                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
     196: aload_0
     197: lload         11
     199: lneg
     200: invokevirtual #102                // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.addAndGet:(Ljava/lang/Object;J)J
     203: lstore        9
     205: lconst_0
     206: lstore        11
     208: iconst_1
     209: istore        8
     211: lload         9
     213: lconst_0
     214: lcmp
     215: ifeq          621
     218: iload         7
     220: ifne          621
     223: aload_0
     224: getfield      #103                // Field lastIndex:I
     227: istore        15
     229: iconst_0
     230: istore        16
     232: iload         16
     234: iload         5
     236: if_icmpge     615
     239: aload_0
     240: getfield      #18                 // Field cancelled:Z
     243: ifeq          265
     246: aload_0
     247: aconst_null
     248: putfield      #24                 // Field scalarQueue:Ljava/util/Queue;
     251: aload_0
     252: getfield      #16                 // Field s:Lorg/reactivestreams/Subscription;
     255: invokeinterface #52,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
     260: aload_0
     261: invokevirtual #53                 // Method unsubscribe:()V
     264: return
     265: aload         4
     267: iload         15
     269: aaload
     270: astore        17
     272: aload         17
     274: ifnull        586
     277: aload         17
     279: getfield      #95                 // Field reactor/core/publisher/FluxFlatMap$FlatMapInner.done:Z
     282: istore_3
     283: aload         17
     285: getfield      #92                 // Field reactor/core/publisher/FluxFlatMap$FlatMapInner.queue:Ljava/util/Queue;
     288: astore        18
     290: iload_3
     291: ifeq          320
     294: aload         18
     296: ifnonnull     320
     299: aload_0
     300: aload         17
     302: getfield      #44                 // Field reactor/core/publisher/FluxFlatMap$FlatMapInner.index:I
     305: invokevirtual #104                // Method remove:(I)V
     308: iconst_1
     309: istore        8
     311: lload         13
     313: lconst_1
     314: ladd
     315: lstore        13
     317: goto          586
     320: aload         18
     322: ifnull        586
     325: lload         11
     327: lload         9
     329: lcmp
     330: ifeq          480
     333: aload         17
     335: getfield      #95                 // Field reactor/core/publisher/FluxFlatMap$FlatMapInner.done:Z
     338: istore_3
     339: aload         18
     341: invokeinterface #100,  1          // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
     346: astore        19
     348: goto          402
     351: astore        20
     353: aload         17
     355: aload         20
     357: aload_0
     358: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     361: invokeinterface #58,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
     366: invokestatic  #105                // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
     369: astore        20
     371: getstatic     #69                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     374: aload_0
     375: aload         20
     377: invokestatic  #70                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
     380: ifne          397
     383: aload         20
     385: aload_0
     386: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     389: invokeinterface #58,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
     394: invokestatic  #77                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
     397: aconst_null
     398: astore        19
     400: iconst_1
     401: istore_3
     402: aload         19
     404: ifnonnull     411
     407: iconst_1
     408: goto          412
     411: iconst_0
     412: istore        20
     414: aload_0
     415: iload_3
     416: iconst_0
     417: aload_2
     418: invokevirtual #99                 // Method checkTerminated:(ZZLorg/reactivestreams/Subscriber;)Z
     421: ifeq          425
     424: return
     425: iload_3
     426: ifeq          455
     429: iload         20
     431: ifeq          455
     434: aload_0
     435: aload         17
     437: getfield      #44                 // Field reactor/core/publisher/FluxFlatMap$FlatMapInner.index:I
     440: invokevirtual #104                // Method remove:(I)V
     443: iconst_1
     444: istore        8
     446: lload         13
     448: lconst_1
     449: ladd
     450: lstore        13
     452: goto          480
     455: iload         20
     457: ifeq          463
     460: goto          480
     463: aload_2
     464: aload         19
     466: invokeinterface #101,  2          // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
     471: lload         11
     473: lconst_1
     474: ladd
     475: lstore        11
     477: goto          325
     480: lload         11
     482: lload         9
     484: lcmp
     485: ifne          530
     488: aload         17
     490: getfield      #95                 // Field reactor/core/publisher/FluxFlatMap$FlatMapInner.done:Z
     493: istore_3
     494: aload         18
     496: invokeinterface #25,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
     501: istore        19
     503: iload_3
     504: ifeq          530
     507: iload         19
     509: ifeq          530
     512: aload_0
     513: aload         17
     515: getfield      #44                 // Field reactor/core/publisher/FluxFlatMap$FlatMapInner.index:I
     518: invokevirtual #104                // Method remove:(I)V
     521: iconst_1
     522: istore        8
     524: lload         13
     526: lconst_1
     527: ladd
     528: lstore        13
     530: lload         11
     532: lconst_0
     533: lcmp
     534: ifeq          586
     537: aload         17
     539: getfield      #95                 // Field reactor/core/publisher/FluxFlatMap$FlatMapInner.done:Z
     542: ifne          552
     545: aload         17
     547: lload         11
     549: invokevirtual #93                 // Method reactor/core/publisher/FluxFlatMap$FlatMapInner.request:(J)V
     552: lload         9
     554: ldc2_w        #84                 // long 9223372036854775807l
     557: lcmp
     558: ifeq          583
     561: getstatic     #47                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
     564: aload_0
     565: lload         11
     567: lneg
     568: invokevirtual #102                // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.addAndGet:(Ljava/lang/Object;J)J
     571: lstore        9
     573: lload         9
     575: lconst_0
     576: lcmp
     577: ifne          583
     580: goto          615
     583: lconst_0
     584: lstore        11
     586: lload         9
     588: lconst_0
     589: lcmp
     590: ifne          596
     593: goto          615
     596: iinc          15, 1
     599: iload         15
     601: iload         5
     603: if_icmpne     609
     606: iconst_0
     607: istore        15
     609: iinc          16, 1
     612: goto          232
     615: aload_0
     616: iload         15
     618: putfield      #103                // Field lastIndex:I
     621: lload         9
     623: lconst_0
     624: lcmp
     625: ifne          774
     628: iload         7
     630: ifne          774
     633: aload_0
     634: invokevirtual #96                 // Method get:()[Ljava/lang/Object;
     637: checkcast     #97                 // class "[Lreactor/core/publisher/FluxFlatMap$FlatMapInner;"
     640: astore        4
     642: aload         4
     644: arraylength
     645: istore        5
     647: iconst_0
     648: istore        15
     650: iload         15
     652: iload         5
     654: if_icmpge     774
     657: aload_0
     658: getfield      #18                 // Field cancelled:Z
     661: ifeq          683
     664: aload_0
     665: aconst_null
     666: putfield      #24                 // Field scalarQueue:Ljava/util/Queue;
     669: aload_0
     670: getfield      #16                 // Field s:Lorg/reactivestreams/Subscription;
     673: invokeinterface #52,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
     678: aload_0
     679: invokevirtual #53                 // Method unsubscribe:()V
     682: return
     683: aload         4
     685: iload         15
     687: aaload
     688: astore        16
     690: aload         16
     692: ifnonnull     698
     695: goto          768
     698: aload         16
     700: getfield      #95                 // Field reactor/core/publisher/FluxFlatMap$FlatMapInner.done:Z
     703: istore_3
     704: aload         16
     706: getfield      #92                 // Field reactor/core/publisher/FluxFlatMap$FlatMapInner.queue:Ljava/util/Queue;
     709: astore        17
     711: aload         17
     713: ifnull        726
     716: aload         17
     718: invokeinterface #25,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
     723: ifeq          730
     726: iconst_1
     727: goto          731
     730: iconst_0
     731: istore        18
     733: iload         18
     735: ifne          741
     738: goto          774
     741: iload_3
     742: ifeq          768
     745: iload         18
     747: ifeq          768
     750: aload_0
     751: aload         16
     753: getfield      #44                 // Field reactor/core/publisher/FluxFlatMap$FlatMapInner.index:I
     756: invokevirtual #104                // Method remove:(I)V
     759: iconst_1
     760: istore        8
     762: lload         13
     764: lconst_1
     765: ladd
     766: lstore        13
     768: iinc          15, 1
     771: goto          650
     774: lload         13
     776: lconst_0
     777: lcmp
     778: ifeq          806
     781: aload_0
     782: getfield      #23                 // Field done:Z
     785: ifne          806
     788: aload_0
     789: getfield      #18                 // Field cancelled:Z
     792: ifne          806
     795: aload_0
     796: getfield      #16                 // Field s:Lorg/reactivestreams/Subscription;
     799: lload         13
     801: invokeinterface #57,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     806: iload         8
     808: ifeq          814
     811: goto          7
     814: getstatic     #50                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     817: aload_0
     818: iload_1
     819: ineg
     820: invokevirtual #106                // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
     823: istore_1
     824: iload_1
     825: ifne          831
     828: goto          834
     831: goto          7
     834: return
    Exception table:
       from    to  target type
         339   348   351   Class java/lang/Throwable

  boolean checkTerminated(boolean, boolean, org.reactivestreams.Subscriber<?>);
    Code:
       0: aload_0
       1: getfield      #18                 // Field cancelled:Z
       4: ifeq          27
       7: aload_0
       8: aconst_null
       9: putfield      #24                 // Field scalarQueue:Ljava/util/Queue;
      12: aload_0
      13: getfield      #16                 // Field s:Lorg/reactivestreams/Subscription;
      16: invokeinterface #52,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      21: aload_0
      22: invokevirtual #53                 // Method unsubscribe:()V
      25: iconst_1
      26: ireturn
      27: aload_0
      28: getfield      #4                  // Field delayError:Z
      31: ifeq          89
      34: iload_1
      35: ifeq          161
      38: iload_2
      39: ifeq          161
      42: aload_0
      43: getfield      #21                 // Field error:Ljava/lang/Throwable;
      46: astore        4
      48: aload         4
      50: ifnull        81
      53: aload         4
      55: getstatic     #107                // Field reactor/core/Exceptions.TERMINATED:Ljava/lang/Throwable;
      58: if_acmpeq     81
      61: getstatic     #69                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      64: aload_0
      65: invokestatic  #108                // Method reactor/core/Exceptions.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Ljava/lang/Throwable;
      68: astore        4
      70: aload_3
      71: aload         4
      73: invokeinterface #109,  2          // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      78: goto          87
      81: aload_3
      82: invokeinterface #110,  1          // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      87: iconst_1
      88: ireturn
      89: iload_1
      90: ifeq          161
      93: aload_0
      94: getfield      #21                 // Field error:Ljava/lang/Throwable;
      97: astore        4
      99: aload         4
     101: ifnull        149
     104: aload         4
     106: getstatic     #107                // Field reactor/core/Exceptions.TERMINATED:Ljava/lang/Throwable;
     109: if_acmpeq     149
     112: getstatic     #69                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     115: aload_0
     116: invokestatic  #108                // Method reactor/core/Exceptions.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Ljava/lang/Throwable;
     119: astore        4
     121: aload_0
     122: aconst_null
     123: putfield      #24                 // Field scalarQueue:Ljava/util/Queue;
     126: aload_0
     127: getfield      #16                 // Field s:Lorg/reactivestreams/Subscription;
     130: invokeinterface #52,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
     135: aload_0
     136: invokevirtual #53                 // Method unsubscribe:()V
     139: aload_3
     140: aload         4
     142: invokeinterface #109,  2          // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
     147: iconst_1
     148: ireturn
     149: iload_2
     150: ifeq          161
     153: aload_3
     154: invokeinterface #110,  1          // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
     159: iconst_1
     160: ireturn
     161: iconst_0
     162: ireturn

  void innerError(reactor.core.publisher.FluxFlatMap$FlatMapInner<R>, java.lang.Throwable);
    Code:
       0: getstatic     #69                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_2
       5: invokestatic  #70                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
       8: ifeq          35
      11: aload_1
      12: iconst_1
      13: putfield      #95                 // Field reactor/core/publisher/FluxFlatMap$FlatMapInner.done:Z
      16: aload_0
      17: getfield      #4                  // Field delayError:Z
      20: ifne          28
      23: aload_0
      24: iconst_1
      25: putfield      #23                 // Field done:Z
      28: aload_0
      29: invokevirtual #49                 // Method drain:()V
      32: goto          48
      35: aload_2
      36: aload_0
      37: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      40: invokeinterface #58,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      45: invokestatic  #77                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      48: return

  boolean failOverflow(R, org.reactivestreams.Subscription);
    Code:
       0: aload_2
       1: ldc           #112                // String Queue is full: Reactive Streams source doesn\'t respect backpressure
       3: invokestatic  #113                // Method reactor/core/Exceptions.failWithOverflow:(Ljava/lang/String;)Ljava/lang/IllegalStateException;
       6: aload_1
       7: aload_0
       8: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      11: invokeinterface #58,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      16: invokestatic  #65                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      19: astore_3
      20: getstatic     #69                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      23: aload_0
      24: aload_3
      25: invokestatic  #70                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
      28: ifne          46
      31: aload_3
      32: aload_0
      33: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      36: invokeinterface #58,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      41: invokestatic  #77                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      44: iconst_0
      45: ireturn
      46: iconst_1
      47: ireturn

  void innerComplete(reactor.core.publisher.FluxFlatMap$FlatMapInner<R>);
    Code:
       0: getstatic     #50                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #51                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifeq          11
      10: return
      11: aload_0
      12: invokevirtual #90                 // Method drainLoop:()V
      15: return

  java.util.Queue<R> getOrCreateInnerQueue(reactor.core.publisher.FluxFlatMap$FlatMapInner<R>);
    Code:
       0: aload_1
       1: getfield      #92                 // Field reactor/core/publisher/FluxFlatMap$FlatMapInner.queue:Ljava/util/Queue;
       4: astore_2
       5: aload_2
       6: ifnonnull     27
       9: aload_0
      10: getfield      #8                  // Field innerQueueSupplier:Ljava/util/function/Supplier;
      13: invokeinterface #75,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      18: checkcast     #76                 // class java/util/Queue
      21: astore_2
      22: aload_1
      23: aload_2
      24: putfield      #92                 // Field reactor/core/publisher/FluxFlatMap$FlatMapInner.queue:Ljava/util/Queue;
      27: aload_2
      28: areturn

  void setIndex(java.lang.Object, int);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #43                 // class reactor/core/publisher/FluxFlatMap$FlatMapInner
       5: iload_2
       6: invokevirtual #114                // Method setIndex:(Lreactor/core/publisher/FluxFlatMap$FlatMapInner;I)V
       9: return

  void unsubscribeEntry(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #43                 // class reactor/core/publisher/FluxFlatMap$FlatMapInner
       5: invokevirtual #115                // Method unsubscribeEntry:(Lreactor/core/publisher/FluxFlatMap$FlatMapInner;)V
       8: return

  java.lang.Object[] newArray(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #116                // Method newArray:(I)[Lreactor/core/publisher/FluxFlatMap$FlatMapInner;
       5: areturn

  java.lang.Object[] terminated();
    Code:
       0: aload_0
       1: invokevirtual #117                // Method terminated:()[Lreactor/core/publisher/FluxFlatMap$FlatMapInner;
       4: areturn

  java.lang.Object[] empty();
    Code:
       0: aload_0
       1: invokevirtual #118                // Method empty:()[Lreactor/core/publisher/FluxFlatMap$FlatMapInner;
       4: areturn

  static {};
    Code:
       0: ldc           #119                // class reactor/core/publisher/FluxFlatMap$FlatMapMain
       2: ldc           #64                 // class java/lang/Throwable
       4: ldc           #120                // String error
       6: invokestatic  #121                // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #69                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: ldc           #119                // class reactor/core/publisher/FluxFlatMap$FlatMapMain
      14: ldc           #122                // String requested
      16: invokestatic  #123                // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      19: putstatic     #47                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      22: ldc           #119                // class reactor/core/publisher/FluxFlatMap$FlatMapMain
      24: ldc           #124                // String wip
      26: invokestatic  #125                // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      29: putstatic     #50                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      32: iconst_0
      33: anewarray     #43                 // class reactor/core/publisher/FluxFlatMap$FlatMapInner
      36: putstatic     #41                 // Field EMPTY:[Lreactor/core/publisher/FluxFlatMap$FlatMapInner;
      39: iconst_0
      40: anewarray     #43                 // class reactor/core/publisher/FluxFlatMap$FlatMapInner
      43: putstatic     #42                 // Field TERMINATED:[Lreactor/core/publisher/FluxFlatMap$FlatMapInner;
      46: return
}
