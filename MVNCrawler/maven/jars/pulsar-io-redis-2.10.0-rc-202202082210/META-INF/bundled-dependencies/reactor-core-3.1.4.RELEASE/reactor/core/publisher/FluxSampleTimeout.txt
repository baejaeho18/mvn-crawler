Compiled from "FluxSampleTimeout.java"
final class reactor.core.publisher.FluxSampleTimeout<T, U> extends reactor.core.publisher.FluxOperator<T, T> {
  final java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<U>> throttler;

  final java.util.function.Supplier<java.util.Queue<java.lang.Object>> queueSupplier;

  reactor.core.publisher.FluxSampleTimeout(reactor.core.publisher.Flux<? extends T>, java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<U>>, java.util.function.Supplier<java.util.Queue<java.lang.Object>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxOperator."<init>":(Lreactor/core/publisher/Flux;)V
       5: aload_0
       6: aload_2
       7: ldc           #2                  // String throttler
       9: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      12: checkcast     #4                  // class java/util/function/Function
      15: putfield      #5                  // Field throttler:Ljava/util/function/Function;
      18: aload_0
      19: aload_3
      20: ldc           #6                  // String queueSupplier
      22: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      25: checkcast     #7                  // class java/util/function/Supplier
      28: putfield      #8                  // Field queueSupplier:Ljava/util/function/Supplier;
      31: return

  public int getPrefetch();
    Code:
       0: ldc           #10                 // int 2147483647
       2: ireturn

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: getfield      #8                  // Field queueSupplier:Ljava/util/function/Supplier;
       4: invokeinterface #11,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
       9: checkcast     #12                 // class java/util/Queue
      12: astore_2
      13: new           #13                 // class reactor/core/publisher/FluxSampleTimeout$SampleTimeoutMain
      16: dup
      17: aload_1
      18: aload_0
      19: getfield      #5                  // Field throttler:Ljava/util/function/Function;
      22: aload_2
      23: invokespecial #14                 // Method reactor/core/publisher/FluxSampleTimeout$SampleTimeoutMain."<init>":(Lreactor/core/CoreSubscriber;Ljava/util/function/Function;Ljava/util/Queue;)V
      26: astore_3
      27: aload_1
      28: aload_3
      29: invokeinterface #15,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      34: aload_0
      35: getfield      #16                 // Field source:Lreactor/core/publisher/Flux;
      38: aload_3
      39: invokevirtual #17                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      42: return
}
