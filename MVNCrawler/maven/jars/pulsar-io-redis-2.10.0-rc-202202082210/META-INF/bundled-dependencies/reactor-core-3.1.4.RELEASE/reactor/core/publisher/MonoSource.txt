Compiled from "MonoSource.java"
final class reactor.core.publisher.MonoSource<I> extends reactor.core.publisher.Mono<I> implements reactor.core.Scannable {
  final org.reactivestreams.Publisher<? extends I> source;

  reactor.core.publisher.MonoSource(org.reactivestreams.Publisher<? extends I>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/Mono."<init>":()V
       4: aload_0
       5: aload_1
       6: invokestatic  #2                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
       9: checkcast     #3                  // class org/reactivestreams/Publisher
      12: putfield      #4                  // Field source:Lorg/reactivestreams/Publisher;
      15: return

  public void subscribe(reactor.core.CoreSubscriber<? super I>);
    Code:
       0: aload_0
       1: getfield      #4                  // Field source:Lorg/reactivestreams/Publisher;
       4: aload_1
       5: invokeinterface #5,  2            // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
      10: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #6                  // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #4                  // Field source:Lorg/reactivestreams/Publisher;
      11: areturn
      12: aconst_null
      13: areturn
}
