Compiled from "JdkFlowAdapter.java"
class reactor.adapter.JdkFlowAdapter$PublisherAsFlowPublisher<T> implements java.util.concurrent.Flow$Publisher<T> {
  private final org.reactivestreams.Publisher<T> pub;

  private reactor.adapter.JdkFlowAdapter$PublisherAsFlowPublisher(org.reactivestreams.Publisher<T>);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #3                  // Field pub:Lorg/reactivestreams/Publisher;
       9: return

  public void subscribe(java.util.concurrent.Flow$Subscriber<? super T>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field pub:Lorg/reactivestreams/Publisher;
       4: new           #4                  // class reactor/adapter/JdkFlowAdapter$FlowSubscriber
       7: dup
       8: aload_1
       9: invokespecial #5                  // Method reactor/adapter/JdkFlowAdapter$FlowSubscriber."<init>":(Ljava/util/concurrent/Flow$Subscriber;)V
      12: invokeinterface #6,  2            // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
      17: return

  reactor.adapter.JdkFlowAdapter$PublisherAsFlowPublisher(org.reactivestreams.Publisher, reactor.adapter.JdkFlowAdapter$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method "<init>":(Lorg/reactivestreams/Publisher;)V
       5: return
}
