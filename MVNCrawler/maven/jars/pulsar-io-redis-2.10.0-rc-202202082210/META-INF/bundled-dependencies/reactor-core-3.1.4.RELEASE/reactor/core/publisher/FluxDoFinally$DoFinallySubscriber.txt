Compiled from "FluxDoFinally.java"
class reactor.core.publisher.FluxDoFinally$DoFinallySubscriber<T> implements reactor.core.publisher.InnerOperator<T, T> {
  final reactor.core.CoreSubscriber<? super T> actual;

  final java.util.function.Consumer<reactor.core.publisher.SignalType> onFinally;

  volatile int once;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxDoFinally$DoFinallySubscriber> ONCE;

  reactor.core.Fuseable$QueueSubscription<T> qs;

  org.reactivestreams.Subscription s;

  boolean syncFused;

  reactor.core.publisher.FluxDoFinally$DoFinallySubscriber(reactor.core.CoreSubscriber<? super T>, java.util.function.Consumer<reactor.core.publisher.SignalType>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field onFinally:Ljava/util/function/Consumer;
      14: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #4                  // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #5                  // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #6                  // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      16: if_acmpeq     26
      19: aload_1
      20: getstatic     #7                  // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      23: if_acmpne     43
      26: aload_0
      27: getfield      #8                  // Field once:I
      30: iconst_1
      31: if_icmpne     38
      34: iconst_1
      35: goto          39
      38: iconst_0
      39: invokestatic  #9                  // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      42: areturn
      43: aload_0
      44: aload_1
      45: invokespecial #10                 // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      48: areturn

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #5                  // Field s:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #11                 // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          41
      11: aload_0
      12: aload_1
      13: putfield      #5                  // Field s:Lorg/reactivestreams/Subscription;
      16: aload_1
      17: instanceof    #12                 // class reactor/core/Fuseable$QueueSubscription
      20: ifeq          31
      23: aload_0
      24: aload_1
      25: checkcast     #12                 // class reactor/core/Fuseable$QueueSubscription
      28: putfield      #13                 // Field qs:Lreactor/core/Fuseable$QueueSubscription;
      31: aload_0
      32: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      35: aload_0
      36: invokeinterface #14,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      41: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: aload_1
       5: invokeinterface #15,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      10: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: aload_1
       5: invokeinterface #16,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      10: aload_0
      11: getstatic     #17                 // Field reactor/core/publisher/SignalType.ON_ERROR:Lreactor/core/publisher/SignalType;
      14: invokevirtual #18                 // Method runFinally:(Lreactor/core/publisher/SignalType;)V
      17: goto          30
      20: astore_2
      21: aload_0
      22: getstatic     #17                 // Field reactor/core/publisher/SignalType.ON_ERROR:Lreactor/core/publisher/SignalType;
      25: invokevirtual #18                 // Method runFinally:(Lreactor/core/publisher/SignalType;)V
      28: aload_2
      29: athrow
      30: return
    Exception table:
       from    to  target type
           0    10    20   any

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: invokeinterface #19,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
       9: aload_0
      10: getstatic     #20                 // Field reactor/core/publisher/SignalType.ON_COMPLETE:Lreactor/core/publisher/SignalType;
      13: invokevirtual #18                 // Method runFinally:(Lreactor/core/publisher/SignalType;)V
      16: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #5                  // Field s:Lorg/reactivestreams/Subscription;
       4: invokeinterface #21,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
       9: aload_0
      10: getstatic     #22                 // Field reactor/core/publisher/SignalType.CANCEL:Lreactor/core/publisher/SignalType;
      13: invokevirtual #18                 // Method runFinally:(Lreactor/core/publisher/SignalType;)V
      16: return

  public void request(long);
    Code:
       0: aload_0
       1: getfield      #5                  // Field s:Lorg/reactivestreams/Subscription;
       4: lload_1
       5: invokeinterface #23,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      10: return

  void runFinally(reactor.core.publisher.SignalType);
    Code:
       0: getstatic     #24                 // Field ONCE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: iconst_0
       5: iconst_1
       6: invokevirtual #25                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
       9: ifeq          43
      12: aload_0
      13: getfield      #3                  // Field onFinally:Ljava/util/function/Consumer;
      16: aload_1
      17: invokeinterface #26,  2           // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
      22: goto          43
      25: astore_2
      26: aload_2
      27: invokestatic  #28                 // Method reactor/core/Exceptions.throwIfFatal:(Ljava/lang/Throwable;)V
      30: aload_2
      31: aload_0
      32: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      35: invokeinterface #29,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      40: invokestatic  #30                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      43: return
    Exception table:
       from    to  target type
          12    22    25   Class java/lang/Throwable

  public reactor.core.CoreSubscriber<? super T> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  static {};
    Code:
       0: ldc           #31                 // class reactor/core/publisher/FluxDoFinally$DoFinallySubscriber
       2: ldc           #32                 // String once
       4: invokestatic  #33                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #24                 // Field ONCE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: return
}
