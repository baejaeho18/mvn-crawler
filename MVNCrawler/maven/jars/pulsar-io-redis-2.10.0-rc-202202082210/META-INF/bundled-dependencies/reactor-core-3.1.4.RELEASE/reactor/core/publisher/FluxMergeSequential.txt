Compiled from "FluxMergeSequential.java"
final class reactor.core.publisher.FluxMergeSequential<T, R> extends reactor.core.publisher.FluxOperator<T, R> {
  final reactor.core.publisher.FluxConcatMap$ErrorMode errorMode;

  final java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>> mapper;

  final int maxConcurrency;

  final int prefetch;

  final java.util.function.Supplier<java.util.Queue<reactor.core.publisher.FluxMergeSequential$MergeSequentialInner<R>>> queueSupplier;

  reactor.core.publisher.FluxMergeSequential(reactor.core.publisher.Flux<? extends T>, java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>>, int, int, reactor.core.publisher.FluxConcatMap$ErrorMode);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iload_3
       4: iload         4
       6: aload         5
       8: iload         4
      10: iload_3
      11: invokestatic  #1                  // Method java/lang/Math.max:(II)I
      14: invokestatic  #2                  // Method reactor/util/concurrent/Queues.get:(I)Ljava/util/function/Supplier;
      17: invokespecial #3                  // Method "<init>":(Lreactor/core/publisher/Flux;Ljava/util/function/Function;IILreactor/core/publisher/FluxConcatMap$ErrorMode;Ljava/util/function/Supplier;)V
      20: return

  reactor.core.publisher.FluxMergeSequential(reactor.core.publisher.Flux<? extends T>, java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>>, int, int, reactor.core.publisher.FluxConcatMap$ErrorMode, java.util.function.Supplier<java.util.Queue<reactor.core.publisher.FluxMergeSequential$MergeSequentialInner<R>>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #4                  // Method reactor/core/publisher/FluxOperator."<init>":(Lreactor/core/publisher/Flux;)V
       5: iload         4
       7: ifgt          38
      10: new           #5                  // class java/lang/IllegalArgumentException
      13: dup
      14: new           #6                  // class java/lang/StringBuilder
      17: dup
      18: invokespecial #7                  // Method java/lang/StringBuilder."<init>":()V
      21: ldc           #8                  // String prefetch > 0 required but it was
      23: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: iload         4
      28: invokevirtual #10                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      31: invokevirtual #11                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      34: invokespecial #12                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      37: athrow
      38: iload_3
      39: ifgt          69
      42: new           #5                  // class java/lang/IllegalArgumentException
      45: dup
      46: new           #6                  // class java/lang/StringBuilder
      49: dup
      50: invokespecial #7                  // Method java/lang/StringBuilder."<init>":()V
      53: ldc           #13                 // String maxConcurrency > 0 required but it was
      55: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      58: iload_3
      59: invokevirtual #10                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      62: invokevirtual #11                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      65: invokespecial #12                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      68: athrow
      69: aload_0
      70: aload_2
      71: ldc           #14                 // String mapper
      73: invokestatic  #15                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      76: checkcast     #16                 // class java/util/function/Function
      79: putfield      #17                 // Field mapper:Ljava/util/function/Function;
      82: aload_0
      83: iload_3
      84: putfield      #18                 // Field maxConcurrency:I
      87: aload_0
      88: iload         4
      90: putfield      #19                 // Field prefetch:I
      93: aload_0
      94: aload         5
      96: putfield      #20                 // Field errorMode:Lreactor/core/publisher/FluxConcatMap$ErrorMode;
      99: aload_0
     100: aload         6
     102: putfield      #21                 // Field queueSupplier:Ljava/util/function/Supplier;
     105: return

  public void subscribe(reactor.core.CoreSubscriber<? super R>);
    Code:
       0: aload_0
       1: getfield      #22                 // Field source:Lreactor/core/publisher/Flux;
       4: aload_1
       5: aload_0
       6: getfield      #17                 // Field mapper:Ljava/util/function/Function;
       9: iconst_0
      10: invokestatic  #23                 // Method reactor/core/publisher/FluxFlatMap.trySubscribeScalarMap:(Lorg/reactivestreams/Publisher;Lreactor/core/CoreSubscriber;Ljava/util/function/Function;Z)Z
      13: ifeq          17
      16: return
      17: new           #24                 // class reactor/core/publisher/FluxMergeSequential$MergeSequentialMain
      20: dup
      21: aload_1
      22: aload_0
      23: getfield      #17                 // Field mapper:Ljava/util/function/Function;
      26: aload_0
      27: getfield      #18                 // Field maxConcurrency:I
      30: aload_0
      31: getfield      #19                 // Field prefetch:I
      34: aload_0
      35: getfield      #20                 // Field errorMode:Lreactor/core/publisher/FluxConcatMap$ErrorMode;
      38: aload_0
      39: getfield      #21                 // Field queueSupplier:Ljava/util/function/Supplier;
      42: invokespecial #25                 // Method reactor/core/publisher/FluxMergeSequential$MergeSequentialMain."<init>":(Lreactor/core/CoreSubscriber;Ljava/util/function/Function;IILreactor/core/publisher/FluxConcatMap$ErrorMode;Ljava/util/function/Supplier;)V
      45: astore_2
      46: aload_0
      47: getfield      #22                 // Field source:Lreactor/core/publisher/Flux;
      50: aload_2
      51: invokevirtual #26                 // Method reactor/core/publisher/Flux.subscribe:(Lorg/reactivestreams/Subscriber;)V
      54: return
}
