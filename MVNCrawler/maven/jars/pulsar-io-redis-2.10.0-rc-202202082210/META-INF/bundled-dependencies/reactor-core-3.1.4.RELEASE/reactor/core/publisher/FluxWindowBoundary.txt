Compiled from "FluxWindowBoundary.java"
final class reactor.core.publisher.FluxWindowBoundary<T, U> extends reactor.core.publisher.FluxOperator<T, reactor.core.publisher.Flux<T>> {
  final org.reactivestreams.Publisher<U> other;

  final java.util.function.Supplier<? extends java.util.Queue<T>> processorQueueSupplier;

  reactor.core.publisher.FluxWindowBoundary(reactor.core.publisher.Flux<? extends T>, org.reactivestreams.Publisher<U>, java.util.function.Supplier<? extends java.util.Queue<T>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxOperator."<init>":(Lreactor/core/publisher/Flux;)V
       5: aload_0
       6: aload_2
       7: ldc           #2                  // String other
       9: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      12: checkcast     #4                  // class org/reactivestreams/Publisher
      15: putfield      #5                  // Field other:Lorg/reactivestreams/Publisher;
      18: aload_0
      19: aload_3
      20: ldc           #6                  // String processorQueueSupplier
      22: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      25: checkcast     #7                  // class java/util/function/Supplier
      28: putfield      #8                  // Field processorQueueSupplier:Ljava/util/function/Supplier;
      31: return

  public int getPrefetch();
    Code:
       0: ldc           #10                 // int 2147483647
       2: ireturn

  public void subscribe(reactor.core.CoreSubscriber<? super reactor.core.publisher.Flux<T>>);
    Code:
       0: new           #11                 // class reactor/core/publisher/FluxWindowBoundary$WindowBoundaryMain
       3: dup
       4: aload_1
       5: aload_0
       6: getfield      #8                  // Field processorQueueSupplier:Ljava/util/function/Supplier;
       9: aload_0
      10: getfield      #8                  // Field processorQueueSupplier:Ljava/util/function/Supplier;
      13: invokeinterface #12,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      18: checkcast     #13                 // class java/util/Queue
      21: invokespecial #14                 // Method reactor/core/publisher/FluxWindowBoundary$WindowBoundaryMain."<init>":(Lreactor/core/CoreSubscriber;Ljava/util/function/Supplier;Ljava/util/Queue;)V
      24: astore_2
      25: aload_1
      26: aload_2
      27: invokeinterface #15,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      32: aload_2
      33: aload_2
      34: getfield      #16                 // Field reactor/core/publisher/FluxWindowBoundary$WindowBoundaryMain.window:Lreactor/core/publisher/UnicastProcessor;
      37: invokevirtual #17                 // Method reactor/core/publisher/FluxWindowBoundary$WindowBoundaryMain.emit:(Lreactor/core/publisher/UnicastProcessor;)Z
      40: ifeq          64
      43: aload_0
      44: getfield      #5                  // Field other:Lorg/reactivestreams/Publisher;
      47: aload_2
      48: getfield      #18                 // Field reactor/core/publisher/FluxWindowBoundary$WindowBoundaryMain.boundary:Lreactor/core/publisher/FluxWindowBoundary$WindowBoundaryOther;
      51: invokeinterface #19,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
      56: aload_0
      57: getfield      #20                 // Field source:Lreactor/core/publisher/Flux;
      60: aload_2
      61: invokevirtual #21                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      64: return
}
