Compiled from "FluxPublishMulticast.java"
final class reactor.core.publisher.FluxPublishMulticast$FluxPublishMulticaster<T> extends reactor.core.publisher.Flux<T> implements reactor.core.publisher.InnerConsumer<T> {
  final int limit;

  final int prefetch;

  final java.util.function.Supplier<? extends java.util.Queue<T>> queueSupplier;

  java.util.Queue<T> queue;

  volatile org.reactivestreams.Subscription s;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxPublishMulticast$FluxPublishMulticaster, org.reactivestreams.Subscription> S;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxPublishMulticast$FluxPublishMulticaster> WIP;

  volatile reactor.core.publisher.FluxPublishMulticast$PublishMulticastInner<T>[] subscribers;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxPublishMulticast$FluxPublishMulticaster, reactor.core.publisher.FluxPublishMulticast$PublishMulticastInner[]> SUBSCRIBERS;

  static final reactor.core.publisher.FluxPublishMulticast$PublishMulticastInner[] EMPTY;

  static final reactor.core.publisher.FluxPublishMulticast$PublishMulticastInner[] TERMINATED;

  volatile boolean done;

  volatile boolean connected;

  java.lang.Throwable error;

  final reactor.util.context.Context context;

  int produced;

  int sourceMode;

  reactor.core.publisher.FluxPublishMulticast$FluxPublishMulticaster(int, java.util.function.Supplier<? extends java.util.Queue<T>>, reactor.util.context.Context);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/Flux."<init>":()V
       4: aload_0
       5: iload_1
       6: putfield      #2                  // Field prefetch:I
       9: aload_0
      10: iload_1
      11: invokestatic  #3                  // Method reactor/core/publisher/Operators.unboundedOrLimit:(I)I
      14: putfield      #4                  // Field limit:I
      17: aload_0
      18: aload_2
      19: putfield      #5                  // Field queueSupplier:Ljava/util/function/Supplier;
      22: getstatic     #6                  // Field SUBSCRIBERS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      25: aload_0
      26: getstatic     #7                  // Field EMPTY:[Lreactor/core/publisher/FluxPublishMulticast$PublishMulticastInner;
      29: invokevirtual #8                  // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V
      32: aload_0
      33: aload_3
      34: putfield      #9                  // Field context:Lreactor/util/context/Context;
      37: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #10                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #11                 // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #12                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
      16: if_acmpne     24
      19: aload_0
      20: getfield      #13                 // Field error:Ljava/lang/Throwable;
      23: areturn
      24: aload_1
      25: getstatic     #14                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      28: if_acmpne     50
      31: aload_0
      32: getfield      #11                 // Field s:Lorg/reactivestreams/Subscription;
      35: invokestatic  #15                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      38: if_acmpne     45
      41: iconst_1
      42: goto          46
      45: iconst_0
      46: invokestatic  #16                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      49: areturn
      50: aload_1
      51: getstatic     #17                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      54: if_acmpne     65
      57: aload_0
      58: getfield      #18                 // Field done:Z
      61: invokestatic  #16                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      64: areturn
      65: aload_1
      66: getstatic     #19                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      69: if_acmpne     80
      72: aload_0
      73: getfield      #2                  // Field prefetch:I
      76: invokestatic  #20                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      79: areturn
      80: aload_1
      81: getstatic     #21                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      84: if_acmpne     111
      87: aload_0
      88: getfield      #22                 // Field queue:Ljava/util/Queue;
      91: ifnull        106
      94: aload_0
      95: getfield      #22                 // Field queue:Ljava/util/Queue;
      98: invokeinterface #23,  1           // InterfaceMethod java/util/Queue.size:()I
     103: goto          107
     106: iconst_0
     107: invokestatic  #20                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     110: areturn
     111: aconst_null
     112: areturn

  public java.util.stream.Stream<? extends reactor.core.Scannable> inners();
    Code:
       0: aload_0
       1: getfield      #24                 // Field subscribers:[Lreactor/core/publisher/FluxPublishMulticast$PublishMulticastInner;
       4: invokestatic  #25                 // InterfaceMethod java/util/stream/Stream.of:([Ljava/lang/Object;)Ljava/util/stream/Stream;
       7: areturn

  public reactor.util.context.Context currentContext();
    Code:
       0: aload_0
       1: getfield      #9                  // Field context:Lreactor/util/context/Context;
       4: areturn

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: new           #26                 // class reactor/core/publisher/FluxPublishMulticast$PublishMulticastInner
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #27                 // Method reactor/core/publisher/FluxPublishMulticast$PublishMulticastInner."<init>":(Lreactor/core/publisher/FluxPublishMulticast$FluxPublishMulticaster;Lreactor/core/CoreSubscriber;)V
       9: astore_2
      10: aload_1
      11: aload_2
      12: invokeinterface #28,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      17: aload_0
      18: aload_2
      19: invokevirtual #29                 // Method add:(Lreactor/core/publisher/FluxPublishMulticast$PublishMulticastInner;)Z
      22: ifeq          49
      25: aload_2
      26: getfield      #30                 // Field reactor/core/publisher/FluxPublishMulticast$PublishMulticastInner.requested:J
      29: ldc2_w        #32                 // long -9223372036854775808l
      32: lcmp
      33: ifne          42
      36: aload_0
      37: aload_2
      38: invokevirtual #34                 // Method remove:(Lreactor/core/publisher/FluxPublishMulticast$PublishMulticastInner;)V
      41: return
      42: aload_0
      43: invokevirtual #35                 // Method drain:()V
      46: goto          74
      49: aload_0
      50: getfield      #13                 // Field error:Ljava/lang/Throwable;
      53: astore_3
      54: aload_3
      55: ifnull        68
      58: aload_1
      59: aload_3
      60: invokeinterface #36,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      65: goto          74
      68: aload_1
      69: invokeinterface #37,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      74: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: getstatic     #38                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #39                 // Method reactor/core/publisher/Operators.setOnce:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          129
      11: aload_1
      12: instanceof    #40                 // class reactor/core/Fuseable$QueueSubscription
      15: ifeq          95
      18: aload_1
      19: checkcast     #40                 // class reactor/core/Fuseable$QueueSubscription
      22: astore_2
      23: aload_2
      24: iconst_3
      25: invokeinterface #42,  2           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.requestFusion:(I)I
      30: istore_3
      31: iload_3
      32: iconst_1
      33: if_icmpne     61
      36: aload_0
      37: iload_3
      38: putfield      #43                 // Field sourceMode:I
      41: aload_0
      42: aload_2
      43: putfield      #22                 // Field queue:Ljava/util/Queue;
      46: aload_0
      47: iconst_1
      48: putfield      #18                 // Field done:Z
      51: aload_0
      52: iconst_1
      53: putfield      #44                 // Field connected:Z
      56: aload_0
      57: invokevirtual #35                 // Method drain:()V
      60: return
      61: iload_3
      62: iconst_2
      63: if_icmpne     95
      66: aload_0
      67: iload_3
      68: putfield      #43                 // Field sourceMode:I
      71: aload_0
      72: aload_2
      73: putfield      #22                 // Field queue:Ljava/util/Queue;
      76: aload_0
      77: iconst_1
      78: putfield      #44                 // Field connected:Z
      81: aload_1
      82: aload_0
      83: getfield      #2                  // Field prefetch:I
      86: invokestatic  #45                 // Method reactor/core/publisher/Operators.unboundedOrPrefetch:(I)J
      89: invokeinterface #46,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      94: return
      95: aload_0
      96: aload_0
      97: getfield      #5                  // Field queueSupplier:Ljava/util/function/Supplier;
     100: invokeinterface #47,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
     105: checkcast     #48                 // class java/util/Queue
     108: putfield      #22                 // Field queue:Ljava/util/Queue;
     111: aload_0
     112: iconst_1
     113: putfield      #44                 // Field connected:Z
     116: aload_1
     117: aload_0
     118: getfield      #2                  // Field prefetch:I
     121: invokestatic  #45                 // Method reactor/core/publisher/Operators.unboundedOrPrefetch:(I)J
     124: invokeinterface #46,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     129: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #18                 // Field done:Z
       4: ifeq          16
       7: aload_1
       8: aload_0
       9: getfield      #9                  // Field context:Lreactor/util/context/Context;
      12: invokestatic  #49                 // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      15: return
      16: aload_0
      17: getfield      #43                 // Field sourceMode:I
      20: iconst_2
      21: if_icmpeq     59
      24: aload_0
      25: getfield      #22                 // Field queue:Ljava/util/Queue;
      28: aload_1
      29: invokeinterface #50,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
      34: ifne          59
      37: aload_0
      38: aload_0
      39: getfield      #11                 // Field s:Lorg/reactivestreams/Subscription;
      42: ldc           #52                 // String Queue is full: Reactive Streams source doesn\'t respect backpressure
      44: invokestatic  #53                 // Method reactor/core/Exceptions.failWithOverflow:(Ljava/lang/String;)Ljava/lang/IllegalStateException;
      47: aload_1
      48: aload_0
      49: getfield      #9                  // Field context:Lreactor/util/context/Context;
      52: invokestatic  #54                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      55: invokevirtual #55                 // Method onError:(Ljava/lang/Throwable;)V
      58: return
      59: aload_0
      60: invokevirtual #35                 // Method drain:()V
      63: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #18                 // Field done:Z
       4: ifeq          16
       7: aload_1
       8: aload_0
       9: getfield      #9                  // Field context:Lreactor/util/context/Context;
      12: invokestatic  #56                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      15: return
      16: aload_0
      17: aload_1
      18: putfield      #13                 // Field error:Ljava/lang/Throwable;
      21: aload_0
      22: iconst_1
      23: putfield      #18                 // Field done:Z
      26: aload_0
      27: invokevirtual #35                 // Method drain:()V
      30: return

  public void onComplete();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #18                 // Field done:Z
       5: aload_0
       6: invokevirtual #35                 // Method drain:()V
       9: return

  void drain();
    Code:
       0: getstatic     #57                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #58                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifeq          11
      10: return
      11: aload_0
      12: getfield      #43                 // Field sourceMode:I
      15: iconst_1
      16: if_icmpne     26
      19: aload_0
      20: invokevirtual #59                 // Method drainSync:()V
      23: goto          30
      26: aload_0
      27: invokevirtual #60                 // Method drainAsync:()V
      30: return

  void drainSync();
    Code:
       0: iconst_1
       1: istore_1
       2: aload_0
       3: getfield      #44                 // Field connected:Z
       6: ifeq          405
       9: aload_0
      10: getfield      #11                 // Field s:Lorg/reactivestreams/Subscription;
      13: invokestatic  #15                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      16: if_acmpne     29
      19: aload_0
      20: getfield      #22                 // Field queue:Ljava/util/Queue;
      23: invokeinterface #61,  1           // InterfaceMethod java/util/Queue.clear:()V
      28: return
      29: aload_0
      30: getfield      #22                 // Field queue:Ljava/util/Queue;
      33: astore_2
      34: aload_0
      35: getfield      #24                 // Field subscribers:[Lreactor/core/publisher/FluxPublishMulticast$PublishMulticastInner;
      38: astore_3
      39: aload_3
      40: arraylength
      41: istore        4
      43: iload         4
      45: ifeq          405
      48: ldc2_w        #62                 // long 9223372036854775807l
      51: lstore        5
      53: iconst_0
      54: istore        9
      56: iload         9
      58: iload         4
      60: if_icmpge     96
      63: aload_3
      64: iload         9
      66: aaload
      67: getfield      #30                 // Field reactor/core/publisher/FluxPublishMulticast$PublishMulticastInner.requested:J
      70: lstore        7
      72: lload         7
      74: ldc2_w        #32                 // long -9223372036854775808l
      77: lcmp
      78: ifeq          90
      81: lload         5
      83: lload         7
      85: invokestatic  #64                 // Method java/lang/Math.min:(JJ)J
      88: lstore        5
      90: iinc          9, 1
      93: goto          56
      96: lconst_0
      97: lstore        9
      99: lload         9
     101: lload         5
     103: lcmp
     104: ifeq          300
     107: aload_0
     108: getfield      #11                 // Field s:Lorg/reactivestreams/Subscription;
     111: invokestatic  #15                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
     114: if_acmpne     124
     117: aload_2
     118: invokeinterface #61,  1           // InterfaceMethod java/util/Queue.clear:()V
     123: return
     124: aload_2
     125: invokeinterface #65,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
     130: astore        11
     132: goto          209
     135: astore        12
     137: aload_0
     138: aload_0
     139: getfield      #11                 // Field s:Lorg/reactivestreams/Subscription;
     142: aload         12
     144: aload_0
     145: getfield      #9                  // Field context:Lreactor/util/context/Context;
     148: invokestatic  #67                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
     151: putfield      #13                 // Field error:Ljava/lang/Throwable;
     154: aload_2
     155: invokeinterface #61,  1           // InterfaceMethod java/util/Queue.clear:()V
     160: getstatic     #6                  // Field SUBSCRIBERS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     163: aload_0
     164: getstatic     #68                 // Field TERMINATED:[Lreactor/core/publisher/FluxPublishMulticast$PublishMulticastInner;
     167: invokevirtual #69                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     170: checkcast     #70                 // class "[Lreactor/core/publisher/FluxPublishMulticast$PublishMulticastInner;"
     173: astore_3
     174: aload_3
     175: arraylength
     176: istore        4
     178: iconst_0
     179: istore        13
     181: iload         13
     183: iload         4
     185: if_icmpge     208
     188: aload_3
     189: iload         13
     191: aaload
     192: getfield      #71                 // Field reactor/core/publisher/FluxPublishMulticast$PublishMulticastInner.actual:Lreactor/core/CoreSubscriber;
     195: aload         12
     197: invokeinterface #36,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
     202: iinc          13, 1
     205: goto          181
     208: return
     209: aload         11
     211: ifnonnull     261
     214: getstatic     #6                  // Field SUBSCRIBERS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     217: aload_0
     218: getstatic     #68                 // Field TERMINATED:[Lreactor/core/publisher/FluxPublishMulticast$PublishMulticastInner;
     221: invokevirtual #69                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     224: checkcast     #70                 // class "[Lreactor/core/publisher/FluxPublishMulticast$PublishMulticastInner;"
     227: astore_3
     228: aload_3
     229: arraylength
     230: istore        4
     232: iconst_0
     233: istore        12
     235: iload         12
     237: iload         4
     239: if_icmpge     260
     242: aload_3
     243: iload         12
     245: aaload
     246: getfield      #71                 // Field reactor/core/publisher/FluxPublishMulticast$PublishMulticastInner.actual:Lreactor/core/CoreSubscriber;
     249: invokeinterface #37,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
     254: iinc          12, 1
     257: goto          235
     260: return
     261: iconst_0
     262: istore        12
     264: iload         12
     266: iload         4
     268: if_icmpge     291
     271: aload_3
     272: iload         12
     274: aaload
     275: getfield      #71                 // Field reactor/core/publisher/FluxPublishMulticast$PublishMulticastInner.actual:Lreactor/core/CoreSubscriber;
     278: aload         11
     280: invokeinterface #72,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
     285: iinc          12, 1
     288: goto          264
     291: lload         9
     293: lconst_1
     294: ladd
     295: lstore        9
     297: goto          99
     300: aload_0
     301: getfield      #11                 // Field s:Lorg/reactivestreams/Subscription;
     304: invokestatic  #15                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
     307: if_acmpne     317
     310: aload_2
     311: invokeinterface #61,  1           // InterfaceMethod java/util/Queue.clear:()V
     316: return
     317: aload_2
     318: invokeinterface #73,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
     323: ifeq          373
     326: getstatic     #6                  // Field SUBSCRIBERS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     329: aload_0
     330: getstatic     #68                 // Field TERMINATED:[Lreactor/core/publisher/FluxPublishMulticast$PublishMulticastInner;
     333: invokevirtual #69                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     336: checkcast     #70                 // class "[Lreactor/core/publisher/FluxPublishMulticast$PublishMulticastInner;"
     339: astore_3
     340: aload_3
     341: arraylength
     342: istore        4
     344: iconst_0
     345: istore        11
     347: iload         11
     349: iload         4
     351: if_icmpge     372
     354: aload_3
     355: iload         11
     357: aaload
     358: getfield      #71                 // Field reactor/core/publisher/FluxPublishMulticast$PublishMulticastInner.actual:Lreactor/core/CoreSubscriber;
     361: invokeinterface #37,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
     366: iinc          11, 1
     369: goto          347
     372: return
     373: lload         9
     375: lconst_0
     376: lcmp
     377: ifeq          405
     380: iconst_0
     381: istore        11
     383: iload         11
     385: iload         4
     387: if_icmpge     405
     390: aload_3
     391: iload         11
     393: aaload
     394: lload         9
     396: invokevirtual #74                 // Method reactor/core/publisher/FluxPublishMulticast$PublishMulticastInner.produced:(J)V
     399: iinc          11, 1
     402: goto          383
     405: getstatic     #57                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     408: aload_0
     409: iload_1
     410: ineg
     411: invokevirtual #75                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
     414: istore_1
     415: iload_1
     416: ifne          2
     419: goto          422
     422: return
    Exception table:
       from    to  target type
         124   132   135   Class java/lang/Throwable

  void drainAsync();
    Code:
       0: iconst_1
       1: istore_1
       2: aload_0
       3: getfield      #76                 // Field produced:I
       6: istore_2
       7: aload_0
       8: getfield      #44                 // Field connected:Z
      11: ifeq          636
      14: aload_0
      15: getfield      #11                 // Field s:Lorg/reactivestreams/Subscription;
      18: invokestatic  #15                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      21: if_acmpne     34
      24: aload_0
      25: getfield      #22                 // Field queue:Ljava/util/Queue;
      28: invokeinterface #61,  1           // InterfaceMethod java/util/Queue.clear:()V
      33: return
      34: aload_0
      35: getfield      #22                 // Field queue:Ljava/util/Queue;
      38: astore_3
      39: aload_0
      40: getfield      #24                 // Field subscribers:[Lreactor/core/publisher/FluxPublishMulticast$PublishMulticastInner;
      43: astore        4
      45: aload         4
      47: arraylength
      48: istore        5
      50: iload         5
      52: ifeq          636
      55: ldc2_w        #62                 // long 9223372036854775807l
      58: lstore        6
      60: iconst_0
      61: istore        10
      63: iload         10
      65: iload         5
      67: if_icmpge     104
      70: aload         4
      72: iload         10
      74: aaload
      75: getfield      #30                 // Field reactor/core/publisher/FluxPublishMulticast$PublishMulticastInner.requested:J
      78: lstore        8
      80: lload         8
      82: ldc2_w        #32                 // long -9223372036854775808l
      85: lcmp
      86: ifeq          98
      89: lload         6
      91: lload         8
      93: invokestatic  #64                 // Method java/lang/Math.min:(JJ)J
      96: lstore        6
      98: iinc          10, 1
     101: goto          63
     104: lconst_0
     105: lstore        10
     107: lload         10
     109: lload         6
     111: lcmp
     112: ifeq          439
     115: aload_0
     116: getfield      #11                 // Field s:Lorg/reactivestreams/Subscription;
     119: invokestatic  #15                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
     122: if_acmpne     132
     125: aload_3
     126: invokeinterface #61,  1           // InterfaceMethod java/util/Queue.clear:()V
     131: return
     132: aload_0
     133: getfield      #18                 // Field done:Z
     136: istore        12
     138: aload_3
     139: invokeinterface #65,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
     144: astore        13
     146: goto          226
     149: astore        14
     151: aload_3
     152: invokeinterface #61,  1           // InterfaceMethod java/util/Queue.clear:()V
     157: aload_0
     158: aload_0
     159: getfield      #11                 // Field s:Lorg/reactivestreams/Subscription;
     162: aload         14
     164: aload_0
     165: getfield      #9                  // Field context:Lreactor/util/context/Context;
     168: invokestatic  #67                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
     171: putfield      #13                 // Field error:Ljava/lang/Throwable;
     174: getstatic     #6                  // Field SUBSCRIBERS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     177: aload_0
     178: getstatic     #68                 // Field TERMINATED:[Lreactor/core/publisher/FluxPublishMulticast$PublishMulticastInner;
     181: invokevirtual #69                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     184: checkcast     #70                 // class "[Lreactor/core/publisher/FluxPublishMulticast$PublishMulticastInner;"
     187: astore        4
     189: aload         4
     191: arraylength
     192: istore        5
     194: iconst_0
     195: istore        15
     197: iload         15
     199: iload         5
     201: if_icmpge     225
     204: aload         4
     206: iload         15
     208: aaload
     209: getfield      #71                 // Field reactor/core/publisher/FluxPublishMulticast$PublishMulticastInner.actual:Lreactor/core/CoreSubscriber;
     212: aload         14
     214: invokeinterface #36,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
     219: iinc          15, 1
     222: goto          197
     225: return
     226: aload         13
     228: ifnonnull     235
     231: iconst_1
     232: goto          236
     235: iconst_0
     236: istore        14
     238: iload         12
     240: ifeq          367
     243: aload_0
     244: getfield      #13                 // Field error:Ljava/lang/Throwable;
     247: astore        15
     249: aload         15
     251: ifnull        312
     254: aload_3
     255: invokeinterface #61,  1           // InterfaceMethod java/util/Queue.clear:()V
     260: getstatic     #6                  // Field SUBSCRIBERS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     263: aload_0
     264: getstatic     #68                 // Field TERMINATED:[Lreactor/core/publisher/FluxPublishMulticast$PublishMulticastInner;
     267: invokevirtual #69                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     270: checkcast     #70                 // class "[Lreactor/core/publisher/FluxPublishMulticast$PublishMulticastInner;"
     273: astore        4
     275: aload         4
     277: arraylength
     278: istore        5
     280: iconst_0
     281: istore        16
     283: iload         16
     285: iload         5
     287: if_icmpge     311
     290: aload         4
     292: iload         16
     294: aaload
     295: getfield      #71                 // Field reactor/core/publisher/FluxPublishMulticast$PublishMulticastInner.actual:Lreactor/core/CoreSubscriber;
     298: aload         15
     300: invokeinterface #36,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
     305: iinc          16, 1
     308: goto          283
     311: return
     312: iload         14
     314: ifeq          367
     317: getstatic     #6                  // Field SUBSCRIBERS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     320: aload_0
     321: getstatic     #68                 // Field TERMINATED:[Lreactor/core/publisher/FluxPublishMulticast$PublishMulticastInner;
     324: invokevirtual #69                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     327: checkcast     #70                 // class "[Lreactor/core/publisher/FluxPublishMulticast$PublishMulticastInner;"
     330: astore        4
     332: aload         4
     334: arraylength
     335: istore        5
     337: iconst_0
     338: istore        16
     340: iload         16
     342: iload         5
     344: if_icmpge     366
     347: aload         4
     349: iload         16
     351: aaload
     352: getfield      #71                 // Field reactor/core/publisher/FluxPublishMulticast$PublishMulticastInner.actual:Lreactor/core/CoreSubscriber;
     355: invokeinterface #37,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
     360: iinc          16, 1
     363: goto          340
     366: return
     367: iload         14
     369: ifeq          375
     372: goto          439
     375: iconst_0
     376: istore        15
     378: iload         15
     380: iload         5
     382: if_icmpge     406
     385: aload         4
     387: iload         15
     389: aaload
     390: getfield      #71                 // Field reactor/core/publisher/FluxPublishMulticast$PublishMulticastInner.actual:Lreactor/core/CoreSubscriber;
     393: aload         13
     395: invokeinterface #72,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
     400: iinc          15, 1
     403: goto          378
     406: lload         10
     408: lconst_1
     409: ladd
     410: lstore        10
     412: iinc          2, 1
     415: iload_2
     416: aload_0
     417: getfield      #4                  // Field limit:I
     420: if_icmpne     436
     423: aload_0
     424: getfield      #11                 // Field s:Lorg/reactivestreams/Subscription;
     427: iload_2
     428: i2l
     429: invokeinterface #46,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     434: iconst_0
     435: istore_2
     436: goto          107
     439: lload         10
     441: lload         6
     443: lcmp
     444: ifne          603
     447: aload_0
     448: getfield      #11                 // Field s:Lorg/reactivestreams/Subscription;
     451: invokestatic  #15                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
     454: if_acmpne     464
     457: aload_3
     458: invokeinterface #61,  1           // InterfaceMethod java/util/Queue.clear:()V
     463: return
     464: aload_0
     465: getfield      #18                 // Field done:Z
     468: istore        12
     470: iload         12
     472: ifeq          603
     475: aload_0
     476: getfield      #13                 // Field error:Ljava/lang/Throwable;
     479: astore        13
     481: aload         13
     483: ifnull        544
     486: aload_3
     487: invokeinterface #61,  1           // InterfaceMethod java/util/Queue.clear:()V
     492: getstatic     #6                  // Field SUBSCRIBERS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     495: aload_0
     496: getstatic     #68                 // Field TERMINATED:[Lreactor/core/publisher/FluxPublishMulticast$PublishMulticastInner;
     499: invokevirtual #69                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     502: checkcast     #70                 // class "[Lreactor/core/publisher/FluxPublishMulticast$PublishMulticastInner;"
     505: astore        4
     507: aload         4
     509: arraylength
     510: istore        5
     512: iconst_0
     513: istore        14
     515: iload         14
     517: iload         5
     519: if_icmpge     543
     522: aload         4
     524: iload         14
     526: aaload
     527: getfield      #71                 // Field reactor/core/publisher/FluxPublishMulticast$PublishMulticastInner.actual:Lreactor/core/CoreSubscriber;
     530: aload         13
     532: invokeinterface #36,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
     537: iinc          14, 1
     540: goto          515
     543: return
     544: aload_3
     545: invokeinterface #73,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
     550: ifeq          603
     553: getstatic     #6                  // Field SUBSCRIBERS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     556: aload_0
     557: getstatic     #68                 // Field TERMINATED:[Lreactor/core/publisher/FluxPublishMulticast$PublishMulticastInner;
     560: invokevirtual #69                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     563: checkcast     #70                 // class "[Lreactor/core/publisher/FluxPublishMulticast$PublishMulticastInner;"
     566: astore        4
     568: aload         4
     570: arraylength
     571: istore        5
     573: iconst_0
     574: istore        14
     576: iload         14
     578: iload         5
     580: if_icmpge     602
     583: aload         4
     585: iload         14
     587: aaload
     588: getfield      #71                 // Field reactor/core/publisher/FluxPublishMulticast$PublishMulticastInner.actual:Lreactor/core/CoreSubscriber;
     591: invokeinterface #37,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
     596: iinc          14, 1
     599: goto          576
     602: return
     603: lload         10
     605: lconst_0
     606: lcmp
     607: ifeq          636
     610: iconst_0
     611: istore        12
     613: iload         12
     615: iload         5
     617: if_icmpge     636
     620: aload         4
     622: iload         12
     624: aaload
     625: lload         10
     627: invokevirtual #74                 // Method reactor/core/publisher/FluxPublishMulticast$PublishMulticastInner.produced:(J)V
     630: iinc          12, 1
     633: goto          613
     636: aload_0
     637: iload_2
     638: putfield      #76                 // Field produced:I
     641: getstatic     #57                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     644: aload_0
     645: iload_1
     646: ineg
     647: invokevirtual #75                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
     650: istore_1
     651: iload_1
     652: ifne          7
     655: goto          658
     658: return
    Exception table:
       from    to  target type
         138   146   149   Class java/lang/Throwable

  boolean add(reactor.core.publisher.FluxPublishMulticast$PublishMulticastInner<T>);
    Code:
       0: aload_0
       1: getfield      #24                 // Field subscribers:[Lreactor/core/publisher/FluxPublishMulticast$PublishMulticastInner;
       4: astore_2
       5: aload_2
       6: getstatic     #68                 // Field TERMINATED:[Lreactor/core/publisher/FluxPublishMulticast$PublishMulticastInner;
       9: if_acmpne     14
      12: iconst_0
      13: ireturn
      14: aload_2
      15: arraylength
      16: istore_3
      17: iload_3
      18: iconst_1
      19: iadd
      20: anewarray     #26                 // class reactor/core/publisher/FluxPublishMulticast$PublishMulticastInner
      23: astore        4
      25: aload_2
      26: iconst_0
      27: aload         4
      29: iconst_0
      30: iload_3
      31: invokestatic  #77                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      34: aload         4
      36: iload_3
      37: aload_1
      38: aastore
      39: getstatic     #6                  // Field SUBSCRIBERS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      42: aload_0
      43: aload_2
      44: aload         4
      46: invokevirtual #78                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      49: ifeq          54
      52: iconst_1
      53: ireturn
      54: goto          0

  void remove(reactor.core.publisher.FluxPublishMulticast$PublishMulticastInner<T>);
    Code:
       0: aload_0
       1: getfield      #24                 // Field subscribers:[Lreactor/core/publisher/FluxPublishMulticast$PublishMulticastInner;
       4: astore_2
       5: aload_2
       6: getstatic     #68                 // Field TERMINATED:[Lreactor/core/publisher/FluxPublishMulticast$PublishMulticastInner;
       9: if_acmpeq     19
      12: aload_2
      13: getstatic     #7                  // Field EMPTY:[Lreactor/core/publisher/FluxPublishMulticast$PublishMulticastInner;
      16: if_acmpne     20
      19: return
      20: aload_2
      21: arraylength
      22: istore_3
      23: iconst_m1
      24: istore        4
      26: iconst_0
      27: istore        5
      29: iload         5
      31: iload_3
      32: if_icmpge     56
      35: aload_2
      36: iload         5
      38: aaload
      39: aload_1
      40: if_acmpne     50
      43: iload         5
      45: istore        4
      47: goto          56
      50: iinc          5, 1
      53: goto          29
      56: iload         4
      58: ifge          62
      61: return
      62: iload_3
      63: iconst_1
      64: if_icmpne     75
      67: getstatic     #7                  // Field EMPTY:[Lreactor/core/publisher/FluxPublishMulticast$PublishMulticastInner;
      70: astore        5
      72: goto          111
      75: iload_3
      76: iconst_1
      77: isub
      78: anewarray     #26                 // class reactor/core/publisher/FluxPublishMulticast$PublishMulticastInner
      81: astore        5
      83: aload_2
      84: iconst_0
      85: aload         5
      87: iconst_0
      88: iload         4
      90: invokestatic  #77                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      93: aload_2
      94: iload         4
      96: iconst_1
      97: iadd
      98: aload         5
     100: iload         4
     102: iload_3
     103: iload         4
     105: isub
     106: iconst_1
     107: isub
     108: invokestatic  #77                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     111: getstatic     #6                  // Field SUBSCRIBERS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     114: aload_0
     115: aload_2
     116: aload         5
     118: invokevirtual #78                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
     121: ifeq          125
     124: return
     125: goto          0

  void terminate();
    Code:
       0: getstatic     #38                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokestatic  #79                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
       7: pop
       8: getstatic     #57                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      11: aload_0
      12: invokevirtual #58                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
      15: ifne          34
      18: aload_0
      19: getfield      #44                 // Field connected:Z
      22: ifeq          34
      25: aload_0
      26: getfield      #22                 // Field queue:Ljava/util/Queue;
      29: invokeinterface #61,  1           // InterfaceMethod java/util/Queue.clear:()V
      34: return

  static {};
    Code:
       0: ldc           #80                 // class reactor/core/publisher/FluxPublishMulticast$FluxPublishMulticaster
       2: ldc           #81                 // class org/reactivestreams/Subscription
       4: ldc           #82                 // String s
       6: invokestatic  #83                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #38                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: ldc           #80                 // class reactor/core/publisher/FluxPublishMulticast$FluxPublishMulticaster
      14: ldc           #84                 // String wip
      16: invokestatic  #85                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      19: putstatic     #57                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      22: ldc           #80                 // class reactor/core/publisher/FluxPublishMulticast$FluxPublishMulticaster
      24: ldc           #70                 // class "[Lreactor/core/publisher/FluxPublishMulticast$PublishMulticastInner;"
      26: ldc           #86                 // String subscribers
      28: invokestatic  #83                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      31: putstatic     #6                  // Field SUBSCRIBERS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      34: iconst_0
      35: anewarray     #26                 // class reactor/core/publisher/FluxPublishMulticast$PublishMulticastInner
      38: putstatic     #7                  // Field EMPTY:[Lreactor/core/publisher/FluxPublishMulticast$PublishMulticastInner;
      41: iconst_0
      42: anewarray     #26                 // class reactor/core/publisher/FluxPublishMulticast$PublishMulticastInner
      45: putstatic     #68                 // Field TERMINATED:[Lreactor/core/publisher/FluxPublishMulticast$PublishMulticastInner;
      48: return
}
