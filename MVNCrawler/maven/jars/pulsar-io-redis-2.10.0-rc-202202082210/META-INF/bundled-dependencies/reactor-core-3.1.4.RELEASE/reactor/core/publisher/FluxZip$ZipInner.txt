Compiled from "FluxZip.java"
final class reactor.core.publisher.FluxZip$ZipInner<T> implements reactor.core.publisher.InnerConsumer<T> {
  final reactor.core.publisher.FluxZip$ZipCoordinator<T, ?> parent;

  final int prefetch;

  final int limit;

  final int index;

  final java.util.function.Supplier<? extends java.util.Queue<T>> queueSupplier;

  volatile java.util.Queue<T> queue;

  volatile org.reactivestreams.Subscription s;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxZip$ZipInner, org.reactivestreams.Subscription> S;

  long produced;

  volatile boolean done;

  int sourceMode;

  reactor.core.publisher.FluxZip$ZipInner(reactor.core.publisher.FluxZip$ZipCoordinator<T, ?>, int, int, java.util.function.Supplier<? extends java.util.Queue<T>>);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #3                  // Field parent:Lreactor/core/publisher/FluxZip$ZipCoordinator;
       9: aload_0
      10: iload_2
      11: putfield      #4                  // Field prefetch:I
      14: aload_0
      15: iload_3
      16: putfield      #5                  // Field index:I
      19: aload_0
      20: aload         4
      22: putfield      #6                  // Field queueSupplier:Ljava/util/function/Supplier;
      25: aload_0
      26: iload_2
      27: invokestatic  #7                  // Method reactor/core/publisher/Operators.unboundedOrLimit:(I)I
      30: putfield      #8                  // Field limit:I
      33: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: getstatic     #9                  // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #10                 // Method reactor/core/publisher/Operators.setOnce:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          126
      11: aload_1
      12: instanceof    #11                 // class reactor/core/Fuseable$QueueSubscription
      15: ifeq          97
      18: aload_1
      19: checkcast     #11                 // class reactor/core/Fuseable$QueueSubscription
      22: astore_2
      23: aload_2
      24: bipush        7
      26: invokeinterface #12,  2           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.requestFusion:(I)I
      31: istore_3
      32: iload_3
      33: iconst_1
      34: if_icmpne     60
      37: aload_0
      38: iconst_1
      39: putfield      #13                 // Field sourceMode:I
      42: aload_0
      43: aload_2
      44: putfield      #14                 // Field queue:Ljava/util/Queue;
      47: aload_0
      48: iconst_1
      49: putfield      #15                 // Field done:Z
      52: aload_0
      53: getfield      #3                  // Field parent:Lreactor/core/publisher/FluxZip$ZipCoordinator;
      56: invokevirtual #16                 // Method reactor/core/publisher/FluxZip$ZipCoordinator.drain:()V
      59: return
      60: iload_3
      61: iconst_2
      62: if_icmpne     78
      65: aload_0
      66: iconst_2
      67: putfield      #13                 // Field sourceMode:I
      70: aload_0
      71: aload_2
      72: putfield      #14                 // Field queue:Ljava/util/Queue;
      75: goto          94
      78: aload_0
      79: aload_0
      80: getfield      #6                  // Field queueSupplier:Ljava/util/function/Supplier;
      83: invokeinterface #17,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      88: checkcast     #18                 // class java/util/Queue
      91: putfield      #14                 // Field queue:Ljava/util/Queue;
      94: goto          113
      97: aload_0
      98: aload_0
      99: getfield      #6                  // Field queueSupplier:Ljava/util/function/Supplier;
     102: invokeinterface #17,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
     107: checkcast     #18                 // class java/util/Queue
     110: putfield      #14                 // Field queue:Ljava/util/Queue;
     113: aload_1
     114: aload_0
     115: getfield      #4                  // Field prefetch:I
     118: invokestatic  #19                 // Method reactor/core/publisher/Operators.unboundedOrPrefetch:(I)J
     121: invokeinterface #20,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     126: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #13                 // Field sourceMode:I
       4: iconst_2
       5: if_icmpeq     42
       8: aload_0
       9: getfield      #14                 // Field queue:Ljava/util/Queue;
      12: aload_1
      13: invokeinterface #21,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
      18: ifne          42
      21: aload_0
      22: aload_0
      23: getfield      #22                 // Field s:Lorg/reactivestreams/Subscription;
      26: ldc           #24                 // String Queue is full: Reactive Streams source doesn\'t respect backpressure
      28: invokestatic  #25                 // Method reactor/core/Exceptions.failWithOverflow:(Ljava/lang/String;)Ljava/lang/IllegalStateException;
      31: aload_0
      32: invokevirtual #26                 // Method currentContext:()Lreactor/util/context/Context;
      35: invokestatic  #27                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      38: invokevirtual #28                 // Method onError:(Ljava/lang/Throwable;)V
      41: return
      42: aload_0
      43: getfield      #3                  // Field parent:Lreactor/core/publisher/FluxZip$ZipCoordinator;
      46: invokevirtual #16                 // Method reactor/core/publisher/FluxZip$ZipCoordinator.drain:()V
      49: return

  public reactor.util.context.Context currentContext();
    Code:
       0: aload_0
       1: getfield      #3                  // Field parent:Lreactor/core/publisher/FluxZip$ZipCoordinator;
       4: getfield      #29                 // Field reactor/core/publisher/FluxZip$ZipCoordinator.actual:Lreactor/core/CoreSubscriber;
       7: invokeinterface #30,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      12: areturn

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #15                 // Field done:Z
       4: ifeq          16
       7: aload_1
       8: aload_0
       9: invokevirtual #26                 // Method currentContext:()Lreactor/util/context/Context;
      12: invokestatic  #31                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      15: return
      16: aload_0
      17: iconst_1
      18: putfield      #15                 // Field done:Z
      21: aload_0
      22: getfield      #3                  // Field parent:Lreactor/core/publisher/FluxZip$ZipCoordinator;
      25: aload_1
      26: aload_0
      27: getfield      #5                  // Field index:I
      30: invokevirtual #32                 // Method reactor/core/publisher/FluxZip$ZipCoordinator.error:(Ljava/lang/Throwable;I)V
      33: return

  public void onComplete();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #15                 // Field done:Z
       5: aload_0
       6: getfield      #3                  // Field parent:Lreactor/core/publisher/FluxZip$ZipCoordinator;
       9: invokevirtual #16                 // Method reactor/core/publisher/FluxZip$ZipCoordinator.drain:()V
      12: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #33                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #22                 // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #34                 // Field reactor/core/Scannable$Attr.ACTUAL:Lreactor/core/Scannable$Attr;
      16: if_acmpne     24
      19: aload_0
      20: getfield      #3                  // Field parent:Lreactor/core/publisher/FluxZip$ZipCoordinator;
      23: areturn
      24: aload_1
      25: getstatic     #35                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      28: if_acmpne     50
      31: aload_0
      32: getfield      #22                 // Field s:Lorg/reactivestreams/Subscription;
      35: invokestatic  #36                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      38: if_acmpne     45
      41: iconst_1
      42: goto          46
      45: iconst_0
      46: invokestatic  #37                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      49: areturn
      50: aload_1
      51: getstatic     #38                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      54: if_acmpne     81
      57: aload_0
      58: getfield      #14                 // Field queue:Ljava/util/Queue;
      61: ifnull        76
      64: aload_0
      65: getfield      #14                 // Field queue:Ljava/util/Queue;
      68: invokeinterface #39,  1           // InterfaceMethod java/util/Queue.size:()I
      73: goto          77
      76: iconst_0
      77: invokestatic  #40                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      80: areturn
      81: aload_1
      82: getstatic     #41                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      85: if_acmpne     123
      88: aload_0
      89: getfield      #15                 // Field done:Z
      92: ifeq          118
      95: aload_0
      96: getfield      #14                 // Field queue:Ljava/util/Queue;
      99: ifnull        114
     102: aload_0
     103: getfield      #14                 // Field queue:Ljava/util/Queue;
     106: invokeinterface #42,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
     111: ifeq          118
     114: iconst_1
     115: goto          119
     118: iconst_0
     119: invokestatic  #37                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     122: areturn
     123: aload_1
     124: getstatic     #43                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
     127: if_acmpne     138
     130: aload_0
     131: getfield      #4                  // Field prefetch:I
     134: invokestatic  #40                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     137: areturn
     138: aconst_null
     139: areturn

  void cancel();
    Code:
       0: getstatic     #9                  // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokestatic  #44                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
       7: pop
       8: return

  void request(long);
    Code:
       0: aload_0
       1: getfield      #13                 // Field sourceMode:I
       4: iconst_1
       5: if_icmpeq     48
       8: aload_0
       9: getfield      #45                 // Field produced:J
      12: lload_1
      13: ladd
      14: lstore_3
      15: lload_3
      16: aload_0
      17: getfield      #8                  // Field limit:I
      20: i2l
      21: lcmp
      22: iflt          43
      25: aload_0
      26: lconst_0
      27: putfield      #45                 // Field produced:J
      30: aload_0
      31: getfield      #22                 // Field s:Lorg/reactivestreams/Subscription;
      34: lload_3
      35: invokeinterface #20,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      40: goto          48
      43: aload_0
      44: lload_3
      45: putfield      #45                 // Field produced:J
      48: return

  static {};
    Code:
       0: ldc           #46                 // class reactor/core/publisher/FluxZip$ZipInner
       2: ldc           #47                 // class org/reactivestreams/Subscription
       4: ldc           #48                 // String s
       6: invokestatic  #49                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #9                  // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: return
}
