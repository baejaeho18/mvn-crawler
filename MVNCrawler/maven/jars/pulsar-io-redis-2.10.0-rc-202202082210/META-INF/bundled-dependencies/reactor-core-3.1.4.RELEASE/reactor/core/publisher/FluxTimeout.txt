Compiled from "FluxTimeout.java"
final class reactor.core.publisher.FluxTimeout<T, U, V> extends reactor.core.publisher.FluxOperator<T, T> {
  final org.reactivestreams.Publisher<U> firstTimeout;

  final java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<V>> itemTimeout;

  final org.reactivestreams.Publisher<? extends T> other;

  final java.lang.String timeoutDescription;

  reactor.core.publisher.FluxTimeout(reactor.core.publisher.Flux<? extends T>, org.reactivestreams.Publisher<U>, java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<V>>, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxOperator."<init>":(Lreactor/core/publisher/Flux;)V
       5: aload_0
       6: aload_2
       7: ldc           #2                  // String firstTimeout
       9: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      12: checkcast     #4                  // class org/reactivestreams/Publisher
      15: putfield      #5                  // Field firstTimeout:Lorg/reactivestreams/Publisher;
      18: aload_0
      19: aload_3
      20: ldc           #6                  // String itemTimeout
      22: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      25: checkcast     #7                  // class java/util/function/Function
      28: putfield      #8                  // Field itemTimeout:Ljava/util/function/Function;
      31: aload_0
      32: aconst_null
      33: putfield      #9                  // Field other:Lorg/reactivestreams/Publisher;
      36: aload_0
      37: aload         4
      39: ldc           #10                 // String timeoutDescription is needed when no fallback
      41: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      44: checkcast     #11                 // class java/lang/String
      47: putfield      #12                 // Field timeoutDescription:Ljava/lang/String;
      50: return

  reactor.core.publisher.FluxTimeout(reactor.core.publisher.Flux<? extends T>, org.reactivestreams.Publisher<U>, java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<V>>, org.reactivestreams.Publisher<? extends T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxOperator."<init>":(Lreactor/core/publisher/Flux;)V
       5: aload_0
       6: aload_2
       7: ldc           #2                  // String firstTimeout
       9: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      12: checkcast     #4                  // class org/reactivestreams/Publisher
      15: putfield      #5                  // Field firstTimeout:Lorg/reactivestreams/Publisher;
      18: aload_0
      19: aload_3
      20: ldc           #6                  // String itemTimeout
      22: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      25: checkcast     #7                  // class java/util/function/Function
      28: putfield      #8                  // Field itemTimeout:Ljava/util/function/Function;
      31: aload_0
      32: aload         4
      34: ldc           #13                 // String other
      36: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      39: checkcast     #4                  // class org/reactivestreams/Publisher
      42: putfield      #9                  // Field other:Lorg/reactivestreams/Publisher;
      45: aload_0
      46: aconst_null
      47: putfield      #12                 // Field timeoutDescription:Ljava/lang/String;
      50: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_1
       1: invokestatic  #14                 // Method reactor/core/publisher/Operators.serialize:(Lreactor/core/CoreSubscriber;)Lreactor/core/CoreSubscriber;
       4: astore_2
       5: new           #15                 // class reactor/core/publisher/FluxTimeout$TimeoutMainSubscriber
       8: dup
       9: aload_2
      10: aload_0
      11: getfield      #8                  // Field itemTimeout:Ljava/util/function/Function;
      14: aload_0
      15: getfield      #9                  // Field other:Lorg/reactivestreams/Publisher;
      18: aload_0
      19: getfield      #12                 // Field timeoutDescription:Ljava/lang/String;
      22: invokespecial #16                 // Method reactor/core/publisher/FluxTimeout$TimeoutMainSubscriber."<init>":(Lreactor/core/CoreSubscriber;Ljava/util/function/Function;Lorg/reactivestreams/Publisher;Ljava/lang/String;)V
      25: astore_3
      26: aload_2
      27: aload_3
      28: invokeinterface #17,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      33: new           #18                 // class reactor/core/publisher/FluxTimeout$TimeoutTimeoutSubscriber
      36: dup
      37: aload_3
      38: lconst_0
      39: invokespecial #19                 // Method reactor/core/publisher/FluxTimeout$TimeoutTimeoutSubscriber."<init>":(Lreactor/core/publisher/FluxTimeout$TimeoutMainSubscriber;J)V
      42: astore        4
      44: aload_3
      45: aload         4
      47: invokevirtual #20                 // Method reactor/core/publisher/FluxTimeout$TimeoutMainSubscriber.setTimeout:(Lreactor/core/publisher/FluxTimeout$IndexedCancellable;)Z
      50: pop
      51: aload_0
      52: getfield      #5                  // Field firstTimeout:Lorg/reactivestreams/Publisher;
      55: aload         4
      57: invokeinterface #21,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
      62: aload_0
      63: getfield      #22                 // Field source:Lreactor/core/publisher/Flux;
      66: aload_3
      67: invokevirtual #23                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      70: return
}
