Compiled from "FluxRefCountGrace.java"
final class reactor.core.publisher.FluxRefCountGrace$RefCountInner<T> implements reactor.core.Fuseable$QueueSubscription<T>, reactor.core.publisher.InnerOperator<T, T> {
  final reactor.core.CoreSubscriber<? super T> actual;

  final reactor.core.publisher.FluxRefCountGrace<T> parent;

  final reactor.core.publisher.FluxRefCountGrace$RefConnection connection;

  org.reactivestreams.Subscription s;

  reactor.core.Fuseable$QueueSubscription<T> qs;

  volatile int parentDone;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxRefCountGrace$RefCountInner> PARENT_DONE;

  reactor.core.publisher.FluxRefCountGrace$RefCountInner(reactor.core.CoreSubscriber<? super T>, reactor.core.publisher.FluxRefCountGrace<T>, reactor.core.publisher.FluxRefCountGrace$RefConnection);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field parent:Lreactor/core/publisher/FluxRefCountGrace;
      14: aload_0
      15: aload_3
      16: putfield      #4                  // Field connection:Lreactor/core/publisher/FluxRefCountGrace$RefConnection;
      19: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: aload_1
       5: invokeinterface #5,  2            // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      10: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: aload_1
       5: invokeinterface #6,  2            // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      10: getstatic     #7                  // Field PARENT_DONE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      13: aload_0
      14: iconst_0
      15: iconst_1
      16: invokevirtual #8                  // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      19: ifeq          33
      22: aload_0
      23: getfield      #3                  // Field parent:Lreactor/core/publisher/FluxRefCountGrace;
      26: aload_0
      27: getfield      #4                  // Field connection:Lreactor/core/publisher/FluxRefCountGrace$RefConnection;
      30: invokevirtual #9                  // Method reactor/core/publisher/FluxRefCountGrace.terminated:(Lreactor/core/publisher/FluxRefCountGrace$RefConnection;)V
      33: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: invokeinterface #10,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
       9: getstatic     #7                  // Field PARENT_DONE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      12: aload_0
      13: iconst_0
      14: iconst_1
      15: invokevirtual #8                  // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      18: ifeq          32
      21: aload_0
      22: getfield      #3                  // Field parent:Lreactor/core/publisher/FluxRefCountGrace;
      25: aload_0
      26: getfield      #4                  // Field connection:Lreactor/core/publisher/FluxRefCountGrace$RefConnection;
      29: invokevirtual #9                  // Method reactor/core/publisher/FluxRefCountGrace.terminated:(Lreactor/core/publisher/FluxRefCountGrace$RefConnection;)V
      32: return

  public void request(long);
    Code:
       0: aload_0
       1: getfield      #11                 // Field s:Lorg/reactivestreams/Subscription;
       4: lload_1
       5: invokeinterface #12,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      10: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #11                 // Field s:Lorg/reactivestreams/Subscription;
       4: invokeinterface #13,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
       9: getstatic     #7                  // Field PARENT_DONE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      12: aload_0
      13: iconst_0
      14: iconst_1
      15: invokevirtual #8                  // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      18: ifeq          32
      21: aload_0
      22: getfield      #3                  // Field parent:Lreactor/core/publisher/FluxRefCountGrace;
      25: aload_0
      26: getfield      #4                  // Field connection:Lreactor/core/publisher/FluxRefCountGrace$RefConnection;
      29: invokevirtual #14                 // Method reactor/core/publisher/FluxRefCountGrace.cancel:(Lreactor/core/publisher/FluxRefCountGrace$RefConnection;)V
      32: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #11                 // Field s:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #15                 // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          26
      11: aload_0
      12: aload_1
      13: putfield      #11                 // Field s:Lorg/reactivestreams/Subscription;
      16: aload_0
      17: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      20: aload_0
      21: invokeinterface #16,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      26: return

  public int requestFusion(int);
    Code:
       0: aload_0
       1: getfield      #11                 // Field s:Lorg/reactivestreams/Subscription;
       4: instanceof    #17                 // class reactor/core/Fuseable$QueueSubscription
       7: ifeq          32
      10: aload_0
      11: aload_0
      12: getfield      #11                 // Field s:Lorg/reactivestreams/Subscription;
      15: checkcast     #17                 // class reactor/core/Fuseable$QueueSubscription
      18: putfield      #18                 // Field qs:Lreactor/core/Fuseable$QueueSubscription;
      21: aload_0
      22: getfield      #18                 // Field qs:Lreactor/core/Fuseable$QueueSubscription;
      25: iload_1
      26: invokeinterface #19,  2           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.requestFusion:(I)I
      31: ireturn
      32: iconst_0
      33: ireturn

  public T poll();
    Code:
       0: aload_0
       1: getfield      #18                 // Field qs:Lreactor/core/Fuseable$QueueSubscription;
       4: invokeinterface #21,  1           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.poll:()Ljava/lang/Object;
       9: areturn

  public int size();
    Code:
       0: aload_0
       1: getfield      #18                 // Field qs:Lreactor/core/Fuseable$QueueSubscription;
       4: invokeinterface #22,  1           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.size:()I
       9: ireturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #18                 // Field qs:Lreactor/core/Fuseable$QueueSubscription;
       4: invokeinterface #23,  1           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.isEmpty:()Z
       9: ireturn

  public void clear();
    Code:
       0: aload_0
       1: getfield      #18                 // Field qs:Lreactor/core/Fuseable$QueueSubscription;
       4: invokeinterface #24,  1           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.clear:()V
       9: return

  public reactor.core.CoreSubscriber<? super T> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  static {};
    Code:
       0: ldc           #25                 // class reactor/core/publisher/FluxRefCountGrace$RefCountInner
       2: ldc           #26                 // String parentDone
       4: invokestatic  #27                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #7                  // Field PARENT_DONE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: return
}
