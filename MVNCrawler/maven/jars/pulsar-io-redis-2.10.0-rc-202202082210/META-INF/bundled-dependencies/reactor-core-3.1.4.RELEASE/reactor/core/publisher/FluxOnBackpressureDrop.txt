Compiled from "FluxOnBackpressureDrop.java"
final class reactor.core.publisher.FluxOnBackpressureDrop<T> extends reactor.core.publisher.FluxOperator<T, T> {
  static final java.util.function.Consumer<java.lang.Object> NOOP;

  final java.util.function.Consumer<? super T> onDrop;

  reactor.core.publisher.FluxOnBackpressureDrop(reactor.core.publisher.Flux<? extends T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxOperator."<init>":(Lreactor/core/publisher/Flux;)V
       5: aload_0
       6: getstatic     #2                  // Field NOOP:Ljava/util/function/Consumer;
       9: putfield      #3                  // Field onDrop:Ljava/util/function/Consumer;
      12: return

  reactor.core.publisher.FluxOnBackpressureDrop(reactor.core.publisher.Flux<? extends T>, java.util.function.Consumer<? super T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxOperator."<init>":(Lreactor/core/publisher/Flux;)V
       5: aload_0
       6: aload_2
       7: ldc           #4                  // String onDrop
       9: invokestatic  #5                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      12: checkcast     #6                  // class java/util/function/Consumer
      15: putfield      #3                  // Field onDrop:Ljava/util/function/Consumer;
      18: return

  public int getPrefetch();
    Code:
       0: ldc           #8                  // int 2147483647
       2: ireturn

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: getfield      #9                  // Field source:Lreactor/core/publisher/Flux;
       4: new           #10                 // class reactor/core/publisher/FluxOnBackpressureDrop$DropSubscriber
       7: dup
       8: aload_1
       9: aload_0
      10: getfield      #3                  // Field onDrop:Ljava/util/function/Consumer;
      13: invokespecial #11                 // Method reactor/core/publisher/FluxOnBackpressureDrop$DropSubscriber."<init>":(Lreactor/core/CoreSubscriber;Ljava/util/function/Consumer;)V
      16: invokevirtual #12                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      19: return

  private static void lambda$static$0(java.lang.Object);
    Code:
       0: return

  static {};
    Code:
       0: invokedynamic #13,  0             // InvokeDynamic #0:accept:()Ljava/util/function/Consumer;
       5: putstatic     #2                  // Field NOOP:Ljava/util/function/Consumer;
       8: return
}
