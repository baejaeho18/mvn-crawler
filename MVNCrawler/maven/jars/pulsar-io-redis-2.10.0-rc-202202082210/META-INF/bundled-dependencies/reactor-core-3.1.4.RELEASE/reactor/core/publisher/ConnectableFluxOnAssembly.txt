Compiled from "ConnectableFluxOnAssembly.java"
final class reactor.core.publisher.ConnectableFluxOnAssembly<T> extends reactor.core.publisher.ConnectableFlux<T> implements reactor.core.Fuseable, reactor.core.publisher.AssemblyOp, reactor.core.Scannable {
  final reactor.core.publisher.ConnectableFlux<T> source;

  final reactor.core.publisher.FluxOnAssembly$AssemblySnapshotException stacktrace;

  reactor.core.publisher.ConnectableFluxOnAssembly(reactor.core.publisher.ConnectableFlux<T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/ConnectableFlux."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field source:Lreactor/core/publisher/ConnectableFlux;
       9: aload_0
      10: new           #3                  // class reactor/core/publisher/FluxOnAssembly$AssemblySnapshotException
      13: dup
      14: invokespecial #4                  // Method reactor/core/publisher/FluxOnAssembly$AssemblySnapshotException."<init>":()V
      17: putfield      #5                  // Field stacktrace:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshotException;
      20: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #2                  // Field source:Lreactor/core/publisher/ConnectableFlux;
       5: aload_0
       6: getfield      #5                  // Field stacktrace:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshotException;
       9: invokestatic  #6                  // Method reactor/core/publisher/FluxOnAssembly.subscribe:(Lreactor/core/CoreSubscriber;Lreactor/core/publisher/Flux;Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshotException;)V
      12: return

  public void connect(java.util.function.Consumer<? super reactor.core.Disposable>);
    Code:
       0: aload_0
       1: getfield      #2                  // Field source:Lreactor/core/publisher/ConnectableFlux;
       4: aload_1
       5: invokevirtual #7                  // Method reactor/core/publisher/ConnectableFlux.connect:(Ljava/util/function/Consumer;)V
       8: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #8                  // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
       4: if_acmpne     15
       7: aload_0
       8: invokevirtual #9                  // Method getPrefetch:()I
      11: invokestatic  #10                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      14: areturn
      15: aload_1
      16: getstatic     #11                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
      19: if_acmpne     27
      22: aload_0
      23: getfield      #2                  // Field source:Lreactor/core/publisher/ConnectableFlux;
      26: areturn
      27: aconst_null
      28: areturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #5                  // Field stacktrace:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshotException;
       4: invokevirtual #12                 // Method reactor/core/publisher/FluxOnAssembly$AssemblySnapshotException.stackFirst:()Ljava/lang/String;
       7: areturn
}
