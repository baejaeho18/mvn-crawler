Compiled from "MonoFlatMapMany.java"
final class reactor.core.publisher.MonoFlatMapMany<T, R> extends reactor.core.publisher.FluxFromMonoOperator<T, R> {
  final java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>> mapper;

  reactor.core.publisher.MonoFlatMapMany(reactor.core.publisher.Mono<? extends T>, java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxFromMonoOperator."<init>":(Lreactor/core/publisher/Mono;)V
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field mapper:Ljava/util/function/Function;
      10: return

  public void subscribe(reactor.core.CoreSubscriber<? super R>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field source:Lreactor/core/publisher/Mono;
       4: aload_1
       5: aload_0
       6: getfield      #2                  // Field mapper:Ljava/util/function/Function;
       9: iconst_0
      10: invokestatic  #4                  // Method reactor/core/publisher/FluxFlatMap.trySubscribeScalarMap:(Lorg/reactivestreams/Publisher;Lreactor/core/CoreSubscriber;Ljava/util/function/Function;Z)Z
      13: ifeq          17
      16: return
      17: aload_0
      18: getfield      #3                  // Field source:Lreactor/core/publisher/Mono;
      21: new           #5                  // class reactor/core/publisher/MonoFlatMapMany$FlatMapManyMain
      24: dup
      25: aload_1
      26: aload_0
      27: getfield      #2                  // Field mapper:Ljava/util/function/Function;
      30: invokespecial #6                  // Method reactor/core/publisher/MonoFlatMapMany$FlatMapManyMain."<init>":(Lreactor/core/CoreSubscriber;Ljava/util/function/Function;)V
      33: invokevirtual #7                  // Method reactor/core/publisher/Mono.subscribe:(Lreactor/core/CoreSubscriber;)V
      36: return
}
