Compiled from "FluxCreate.java"
final class reactor.core.publisher.FluxCreate$LatestAsyncSink<T> extends reactor.core.publisher.FluxCreate$BaseSink<T> {
  final java.util.concurrent.atomic.AtomicReference<T> queue;

  java.lang.Throwable error;

  volatile boolean done;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxCreate$LatestAsyncSink> WIP;

  reactor.core.publisher.FluxCreate$LatestAsyncSink(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxCreate$BaseSink."<init>":(Lreactor/core/CoreSubscriber;)V
       5: aload_0
       6: new           #2                  // class java/util/concurrent/atomic/AtomicReference
       9: dup
      10: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
      13: putfield      #4                  // Field queue:Ljava/util/concurrent/atomic/AtomicReference;
      16: return

  public reactor.core.publisher.FluxSink<T> next(T);
    Code:
       0: aload_0
       1: getfield      #4                  // Field queue:Ljava/util/concurrent/atomic/AtomicReference;
       4: aload_1
       5: invokevirtual #5                  // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
       8: aload_0
       9: invokevirtual #6                  // Method drain:()V
      12: aload_0
      13: areturn

  public void error(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #7                  // Field error:Ljava/lang/Throwable;
       5: aload_0
       6: iconst_1
       7: putfield      #8                  // Field done:Z
      10: aload_0
      11: invokevirtual #6                  // Method drain:()V
      14: return

  public void complete();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #8                  // Field done:Z
       5: aload_0
       6: invokevirtual #6                  // Method drain:()V
       9: return

  void onRequestedFromDownstream();
    Code:
       0: aload_0
       1: invokevirtual #6                  // Method drain:()V
       4: return

  void onCancel();
    Code:
       0: getstatic     #9                  // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #10                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifne          18
      10: aload_0
      11: getfield      #4                  // Field queue:Ljava/util/concurrent/atomic/AtomicReference;
      14: aconst_null
      15: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicReference.lazySet:(Ljava/lang/Object;)V
      18: return

  void drain();
    Code:
       0: getstatic     #9                  // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #10                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifeq          11
      10: return
      11: iconst_1
      12: istore_1
      13: aload_0
      14: getfield      #12                 // Field actual:Lreactor/core/CoreSubscriber;
      17: astore_2
      18: aload_0
      19: getfield      #4                  // Field queue:Ljava/util/concurrent/atomic/AtomicReference;
      22: astore_3
      23: aload_0
      24: getfield      #13                 // Field requested:J
      27: lstore        4
      29: lconst_0
      30: lstore        6
      32: lload         6
      34: lload         4
      36: lcmp
      37: ifeq          138
      40: aload_0
      41: invokevirtual #14                 // Method isCancelled:()Z
      44: ifeq          53
      47: aload_3
      48: aconst_null
      49: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicReference.lazySet:(Ljava/lang/Object;)V
      52: return
      53: aload_0
      54: getfield      #8                  // Field done:Z
      57: istore        8
      59: aload_3
      60: aconst_null
      61: invokevirtual #15                 // Method java/util/concurrent/atomic/AtomicReference.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;
      64: astore        9
      66: aload         9
      68: ifnonnull     75
      71: iconst_1
      72: goto          76
      75: iconst_0
      76: istore        10
      78: iload         8
      80: ifeq          113
      83: iload         10
      85: ifeq          113
      88: aload_0
      89: getfield      #7                  // Field error:Ljava/lang/Throwable;
      92: astore        11
      94: aload         11
      96: ifnull        108
      99: aload_0
     100: aload         11
     102: invokespecial #16                 // Method reactor/core/publisher/FluxCreate$BaseSink.error:(Ljava/lang/Throwable;)V
     105: goto          112
     108: aload_0
     109: invokespecial #17                 // Method reactor/core/publisher/FluxCreate$BaseSink.complete:()V
     112: return
     113: iload         10
     115: ifeq          121
     118: goto          138
     121: aload_2
     122: aload         9
     124: invokeinterface #18,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
     129: lload         6
     131: lconst_1
     132: ladd
     133: lstore        6
     135: goto          32
     138: lload         6
     140: lload         4
     142: lcmp
     143: ifne          214
     146: aload_0
     147: invokevirtual #14                 // Method isCancelled:()Z
     150: ifeq          159
     153: aload_3
     154: aconst_null
     155: invokevirtual #11                 // Method java/util/concurrent/atomic/AtomicReference.lazySet:(Ljava/lang/Object;)V
     158: return
     159: aload_0
     160: getfield      #8                  // Field done:Z
     163: istore        8
     165: aload_3
     166: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
     169: ifnonnull     176
     172: iconst_1
     173: goto          177
     176: iconst_0
     177: istore        9
     179: iload         8
     181: ifeq          214
     184: iload         9
     186: ifeq          214
     189: aload_0
     190: getfield      #7                  // Field error:Ljava/lang/Throwable;
     193: astore        10
     195: aload         10
     197: ifnull        209
     200: aload_0
     201: aload         10
     203: invokespecial #16                 // Method reactor/core/publisher/FluxCreate$BaseSink.error:(Ljava/lang/Throwable;)V
     206: goto          213
     209: aload_0
     210: invokespecial #17                 // Method reactor/core/publisher/FluxCreate$BaseSink.complete:()V
     213: return
     214: lload         6
     216: lconst_0
     217: lcmp
     218: ifeq          231
     221: getstatic     #20                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
     224: aload_0
     225: lload         6
     227: invokestatic  #21                 // Method reactor/core/publisher/Operators.produced:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
     230: pop2
     231: getstatic     #9                  // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     234: aload_0
     235: iload_1
     236: ineg
     237: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
     240: istore_1
     241: iload_1
     242: ifne          248
     245: goto          251
     248: goto          23
     251: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #23                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
       4: if_acmpne     26
       7: aload_0
       8: getfield      #4                  // Field queue:Ljava/util/concurrent/atomic/AtomicReference;
      11: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      14: ifnonnull     21
      17: iconst_0
      18: goto          22
      21: iconst_1
      22: invokestatic  #24                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      25: areturn
      26: aload_1
      27: getstatic     #25                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      30: if_acmpne     41
      33: aload_0
      34: getfield      #8                  // Field done:Z
      37: invokestatic  #26                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      40: areturn
      41: aload_1
      42: getstatic     #27                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
      45: if_acmpne     53
      48: aload_0
      49: getfield      #7                  // Field error:Ljava/lang/Throwable;
      52: areturn
      53: aload_0
      54: aload_1
      55: invokespecial #28                 // Method reactor/core/publisher/FluxCreate$BaseSink.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      58: areturn

  static {};
    Code:
       0: ldc           #29                 // class reactor/core/publisher/FluxCreate$LatestAsyncSink
       2: ldc           #30                 // String wip
       4: invokestatic  #31                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #9                  // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: return
}
