Compiled from "FluxLimitRequest.java"
final class reactor.core.publisher.FluxLimitRequest<T> extends reactor.core.publisher.FluxOperator<T, T> {
  final long cap;

  reactor.core.publisher.FluxLimitRequest(reactor.core.publisher.Flux<T>, long);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxOperator."<init>":(Lreactor/core/publisher/Flux;)V
       5: aload_0
       6: lload_2
       7: putfield      #2                  // Field cap:J
      10: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field source:Lreactor/core/publisher/Flux;
       4: new           #4                  // class reactor/core/publisher/FluxLimitRequest$FluxLimitRequestSubscriber
       7: dup
       8: aload_1
       9: aload_0
      10: getfield      #2                  // Field cap:J
      13: invokespecial #5                  // Method reactor/core/publisher/FluxLimitRequest$FluxLimitRequestSubscriber."<init>":(Lreactor/core/CoreSubscriber;J)V
      16: invokevirtual #6                  // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      19: return

  public int getPrefetch();
    Code:
       0: iconst_0
       1: ireturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #7                  // Field reactor/core/Scannable$Attr.REQUESTED_FROM_DOWNSTREAM:Lreactor/core/Scannable$Attr;
       4: if_acmpne     15
       7: aload_0
       8: getfield      #2                  // Field cap:J
      11: invokestatic  #8                  // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      14: areturn
      15: aload_0
      16: aload_1
      17: invokespecial #9                  // Method reactor/core/publisher/FluxOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      20: areturn
}
