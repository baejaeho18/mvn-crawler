Compiled from "Schedulers.java"
public abstract class reactor.core.scheduler.Schedulers {
  public static final int DEFAULT_POOL_SIZE;

  static volatile java.util.function.BiConsumer<java.lang.Thread, ? super java.lang.Throwable> onHandleErrorHook;

  static final java.lang.String ELASTIC;

  static final java.lang.String PARALLEL;

  static final java.lang.String SINGLE;

  static final java.lang.String IMMEDIATE;

  static final java.lang.String FROM_EXECUTOR;

  static final java.lang.String FROM_EXECUTOR_SERVICE;

  static java.util.concurrent.atomic.AtomicReference<reactor.core.scheduler.Schedulers$CachedScheduler> CACHED_ELASTIC;

  static java.util.concurrent.atomic.AtomicReference<reactor.core.scheduler.Schedulers$CachedScheduler> CACHED_PARALLEL;

  static java.util.concurrent.atomic.AtomicReference<reactor.core.scheduler.Schedulers$CachedScheduler> CACHED_SINGLE;

  static final java.util.function.Supplier<reactor.core.scheduler.Scheduler> ELASTIC_SUPPLIER;

  static final java.util.function.Supplier<reactor.core.scheduler.Scheduler> PARALLEL_SUPPLIER;

  static final java.util.function.Supplier<reactor.core.scheduler.Scheduler> SINGLE_SUPPLIER;

  static final reactor.core.scheduler.Schedulers$Factory DEFAULT;

  static volatile reactor.core.scheduler.Schedulers$Factory factory;

  static final reactor.util.Logger log;

  public reactor.core.scheduler.Schedulers();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static reactor.core.scheduler.Scheduler fromExecutor(java.util.concurrent.Executor);
    Code:
       0: aload_0
       1: iconst_0
       2: invokestatic  #2                  // Method fromExecutor:(Ljava/util/concurrent/Executor;Z)Lreactor/core/scheduler/Scheduler;
       5: areturn

  public static reactor.core.scheduler.Scheduler fromExecutor(java.util.concurrent.Executor, boolean);
    Code:
       0: iload_1
       1: ifne          19
       4: aload_0
       5: instanceof    #3                  // class java/util/concurrent/ExecutorService
       8: ifeq          19
      11: aload_0
      12: checkcast     #3                  // class java/util/concurrent/ExecutorService
      15: invokestatic  #4                  // Method fromExecutorService:(Ljava/util/concurrent/ExecutorService;)Lreactor/core/scheduler/Scheduler;
      18: areturn
      19: new           #5                  // class reactor/core/scheduler/ExecutorScheduler
      22: dup
      23: aload_0
      24: iload_1
      25: invokespecial #6                  // Method reactor/core/scheduler/ExecutorScheduler."<init>":(Ljava/util/concurrent/Executor;Z)V
      28: areturn

  public static reactor.core.scheduler.Scheduler fromExecutorService(java.util.concurrent.ExecutorService);
    Code:
       0: new           #7                  // class reactor/core/scheduler/DelegateServiceScheduler
       3: dup
       4: aload_0
       5: invokespecial #8                  // Method reactor/core/scheduler/DelegateServiceScheduler."<init>":(Ljava/util/concurrent/ExecutorService;)V
       8: areturn

  public static reactor.core.scheduler.Scheduler elastic();
    Code:
       0: getstatic     #9                  // Field CACHED_ELASTIC:Ljava/util/concurrent/atomic/AtomicReference;
       3: ldc           #11                 // String elastic
       5: getstatic     #12                 // Field ELASTIC_SUPPLIER:Ljava/util/function/Supplier;
       8: invokestatic  #13                 // Method cache:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/String;Ljava/util/function/Supplier;)Lreactor/core/scheduler/Schedulers$CachedScheduler;
      11: areturn

  public static reactor.core.scheduler.Scheduler immediate();
    Code:
       0: invokestatic  #14                 // Method reactor/core/scheduler/ImmediateScheduler.instance:()Lreactor/core/scheduler/Scheduler;
       3: areturn

  public static reactor.core.scheduler.Scheduler newElastic(java.lang.String);
    Code:
       0: aload_0
       1: bipush        60
       3: invokestatic  #16                 // Method newElastic:(Ljava/lang/String;I)Lreactor/core/scheduler/Scheduler;
       6: areturn

  public static reactor.core.scheduler.Scheduler newElastic(java.lang.String, int);
    Code:
       0: aload_0
       1: iload_1
       2: iconst_0
       3: invokestatic  #17                 // Method newElastic:(Ljava/lang/String;IZ)Lreactor/core/scheduler/Scheduler;
       6: areturn

  public static reactor.core.scheduler.Scheduler newElastic(java.lang.String, int, boolean);
    Code:
       0: iload_1
       1: new           #18                 // class reactor/core/scheduler/Schedulers$SchedulerThreadFactory
       4: dup
       5: aload_0
       6: iload_2
       7: getstatic     #19                 // Field reactor/core/scheduler/ElasticScheduler.COUNTER:Ljava/util/concurrent/atomic/AtomicLong;
      10: invokespecial #20                 // Method reactor/core/scheduler/Schedulers$SchedulerThreadFactory."<init>":(Ljava/lang/String;ZLjava/util/concurrent/atomic/AtomicLong;)V
      13: invokestatic  #21                 // Method newElastic:(ILjava/util/concurrent/ThreadFactory;)Lreactor/core/scheduler/Scheduler;
      16: areturn

  public static reactor.core.scheduler.Scheduler newElastic(int, java.util.concurrent.ThreadFactory);
    Code:
       0: getstatic     #22                 // Field factory:Lreactor/core/scheduler/Schedulers$Factory;
       3: iload_0
       4: aload_1
       5: invokeinterface #23,  3           // InterfaceMethod reactor/core/scheduler/Schedulers$Factory.newElastic:(ILjava/util/concurrent/ThreadFactory;)Lreactor/core/scheduler/Scheduler;
      10: areturn

  public static reactor.core.scheduler.Scheduler newParallel(java.lang.String);
    Code:
       0: aload_0
       1: invokestatic  #24                 // Method java/lang/Runtime.getRuntime:()Ljava/lang/Runtime;
       4: invokevirtual #25                 // Method java/lang/Runtime.availableProcessors:()I
       7: invokestatic  #26                 // Method newParallel:(Ljava/lang/String;I)Lreactor/core/scheduler/Scheduler;
      10: areturn

  public static reactor.core.scheduler.Scheduler newParallel(java.lang.String, int);
    Code:
       0: aload_0
       1: iload_1
       2: iconst_0
       3: invokestatic  #27                 // Method newParallel:(Ljava/lang/String;IZ)Lreactor/core/scheduler/Scheduler;
       6: areturn

  public static reactor.core.scheduler.Scheduler newParallel(java.lang.String, int, boolean);
    Code:
       0: iload_1
       1: new           #18                 // class reactor/core/scheduler/Schedulers$SchedulerThreadFactory
       4: dup
       5: aload_0
       6: iload_2
       7: getstatic     #28                 // Field reactor/core/scheduler/ParallelScheduler.COUNTER:Ljava/util/concurrent/atomic/AtomicLong;
      10: invokespecial #20                 // Method reactor/core/scheduler/Schedulers$SchedulerThreadFactory."<init>":(Ljava/lang/String;ZLjava/util/concurrent/atomic/AtomicLong;)V
      13: invokestatic  #29                 // Method newParallel:(ILjava/util/concurrent/ThreadFactory;)Lreactor/core/scheduler/Scheduler;
      16: areturn

  public static reactor.core.scheduler.Scheduler newParallel(int, java.util.concurrent.ThreadFactory);
    Code:
       0: getstatic     #22                 // Field factory:Lreactor/core/scheduler/Schedulers$Factory;
       3: iload_0
       4: aload_1
       5: invokeinterface #30,  3           // InterfaceMethod reactor/core/scheduler/Schedulers$Factory.newParallel:(ILjava/util/concurrent/ThreadFactory;)Lreactor/core/scheduler/Scheduler;
      10: areturn

  public static reactor.core.scheduler.Scheduler newSingle(java.lang.String);
    Code:
       0: aload_0
       1: iconst_0
       2: invokestatic  #31                 // Method newSingle:(Ljava/lang/String;Z)Lreactor/core/scheduler/Scheduler;
       5: areturn

  public static reactor.core.scheduler.Scheduler newSingle(java.lang.String, boolean);
    Code:
       0: new           #18                 // class reactor/core/scheduler/Schedulers$SchedulerThreadFactory
       3: dup
       4: aload_0
       5: iload_1
       6: getstatic     #32                 // Field reactor/core/scheduler/SingleScheduler.COUNTER:Ljava/util/concurrent/atomic/AtomicLong;
       9: invokespecial #20                 // Method reactor/core/scheduler/Schedulers$SchedulerThreadFactory."<init>":(Ljava/lang/String;ZLjava/util/concurrent/atomic/AtomicLong;)V
      12: invokestatic  #33                 // Method newSingle:(Ljava/util/concurrent/ThreadFactory;)Lreactor/core/scheduler/Scheduler;
      15: areturn

  public static reactor.core.scheduler.Scheduler newSingle(java.util.concurrent.ThreadFactory);
    Code:
       0: getstatic     #22                 // Field factory:Lreactor/core/scheduler/Schedulers$Factory;
       3: aload_0
       4: invokeinterface #34,  2           // InterfaceMethod reactor/core/scheduler/Schedulers$Factory.newSingle:(Ljava/util/concurrent/ThreadFactory;)Lreactor/core/scheduler/Scheduler;
       9: areturn

  public static void onHandleError(java.util.function.BiConsumer<java.lang.Thread, ? super java.lang.Throwable>);
    Code:
       0: getstatic     #35                 // Field log:Lreactor/util/Logger;
       3: invokeinterface #36,  1           // InterfaceMethod reactor/util/Logger.isDebugEnabled:()Z
       8: ifeq          21
      11: getstatic     #35                 // Field log:Lreactor/util/Logger;
      14: ldc           #37                 // String Hooking new default: onHandleError
      16: invokeinterface #38,  2           // InterfaceMethod reactor/util/Logger.debug:(Ljava/lang/String;)V
      21: aload_0
      22: ldc           #39                 // String onHandleError
      24: invokestatic  #40                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      27: checkcast     #41                 // class java/util/function/BiConsumer
      30: putstatic     #42                 // Field onHandleErrorHook:Ljava/util/function/BiConsumer;
      33: return

  public static reactor.core.scheduler.Scheduler parallel();
    Code:
       0: getstatic     #43                 // Field CACHED_PARALLEL:Ljava/util/concurrent/atomic/AtomicReference;
       3: ldc           #44                 // String parallel
       5: getstatic     #45                 // Field PARALLEL_SUPPLIER:Ljava/util/function/Supplier;
       8: invokestatic  #13                 // Method cache:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/String;Ljava/util/function/Supplier;)Lreactor/core/scheduler/Schedulers$CachedScheduler;
      11: areturn

  public static void resetFactory();
    Code:
       0: getstatic     #46                 // Field DEFAULT:Lreactor/core/scheduler/Schedulers$Factory;
       3: invokestatic  #47                 // Method setFactory:(Lreactor/core/scheduler/Schedulers$Factory;)V
       6: return

  public static void resetOnHandleError();
    Code:
       0: getstatic     #35                 // Field log:Lreactor/util/Logger;
       3: invokeinterface #36,  1           // InterfaceMethod reactor/util/Logger.isDebugEnabled:()Z
       8: ifeq          21
      11: getstatic     #35                 // Field log:Lreactor/util/Logger;
      14: ldc           #48                 // String Reset to factory defaults: onHandleError
      16: invokeinterface #38,  2           // InterfaceMethod reactor/util/Logger.debug:(Ljava/lang/String;)V
      21: aconst_null
      22: putstatic     #42                 // Field onHandleErrorHook:Ljava/util/function/BiConsumer;
      25: return

  public static void setFactory(reactor.core.scheduler.Schedulers$Factory);
    Code:
       0: aload_0
       1: ldc           #49                 // String factoryInstance
       3: invokestatic  #40                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: invokestatic  #50                 // Method shutdownNow:()V
      10: aload_0
      11: putstatic     #22                 // Field factory:Lreactor/core/scheduler/Schedulers$Factory;
      14: return

  public static void shutdownNow();
    Code:
       0: getstatic     #9                  // Field CACHED_ELASTIC:Ljava/util/concurrent/atomic/AtomicReference;
       3: aconst_null
       4: invokevirtual #51                 // Method java/util/concurrent/atomic/AtomicReference.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;
       7: checkcast     #52                 // class reactor/core/scheduler/Schedulers$CachedScheduler
      10: astore_0
      11: getstatic     #43                 // Field CACHED_PARALLEL:Ljava/util/concurrent/atomic/AtomicReference;
      14: aconst_null
      15: invokevirtual #51                 // Method java/util/concurrent/atomic/AtomicReference.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;
      18: checkcast     #52                 // class reactor/core/scheduler/Schedulers$CachedScheduler
      21: astore_1
      22: getstatic     #53                 // Field CACHED_SINGLE:Ljava/util/concurrent/atomic/AtomicReference;
      25: aconst_null
      26: invokevirtual #51                 // Method java/util/concurrent/atomic/AtomicReference.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;
      29: checkcast     #52                 // class reactor/core/scheduler/Schedulers$CachedScheduler
      32: astore_2
      33: aload_0
      34: ifnull        41
      37: aload_0
      38: invokevirtual #54                 // Method reactor/core/scheduler/Schedulers$CachedScheduler._dispose:()V
      41: aload_1
      42: ifnull        49
      45: aload_1
      46: invokevirtual #54                 // Method reactor/core/scheduler/Schedulers$CachedScheduler._dispose:()V
      49: aload_2
      50: ifnull        57
      53: aload_2
      54: invokevirtual #54                 // Method reactor/core/scheduler/Schedulers$CachedScheduler._dispose:()V
      57: return

  public static reactor.core.scheduler.Scheduler single();
    Code:
       0: getstatic     #53                 // Field CACHED_SINGLE:Ljava/util/concurrent/atomic/AtomicReference;
       3: ldc           #55                 // String single
       5: getstatic     #56                 // Field SINGLE_SUPPLIER:Ljava/util/function/Supplier;
       8: invokestatic  #13                 // Method cache:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/String;Ljava/util/function/Supplier;)Lreactor/core/scheduler/Schedulers$CachedScheduler;
      11: areturn

  public static reactor.core.scheduler.Scheduler single(reactor.core.scheduler.Scheduler);
    Code:
       0: new           #57                 // class reactor/core/scheduler/SingleWorkerScheduler
       3: dup
       4: aload_0
       5: invokespecial #58                 // Method reactor/core/scheduler/SingleWorkerScheduler."<init>":(Lreactor/core/scheduler/Scheduler;)V
       8: areturn

  static reactor.core.scheduler.Schedulers$CachedScheduler cache(java.util.concurrent.atomic.AtomicReference<reactor.core.scheduler.Schedulers$CachedScheduler>, java.lang.String, java.util.function.Supplier<reactor.core.scheduler.Scheduler>);
    Code:
       0: aload_0
       1: invokevirtual #59                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       4: checkcast     #52                 // class reactor/core/scheduler/Schedulers$CachedScheduler
       7: astore_3
       8: aload_3
       9: ifnull        14
      12: aload_3
      13: areturn
      14: new           #52                 // class reactor/core/scheduler/Schedulers$CachedScheduler
      17: dup
      18: aload_1
      19: aload_2
      20: invokeinterface #60,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      25: checkcast     #61                 // class reactor/core/scheduler/Scheduler
      28: invokespecial #62                 // Method reactor/core/scheduler/Schedulers$CachedScheduler."<init>":(Ljava/lang/String;Lreactor/core/scheduler/Scheduler;)V
      31: astore_3
      32: aload_0
      33: aconst_null
      34: aload_3
      35: invokevirtual #63                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
      38: ifeq          43
      41: aload_3
      42: areturn
      43: aload_3
      44: invokevirtual #54                 // Method reactor/core/scheduler/Schedulers$CachedScheduler._dispose:()V
      47: aload_0
      48: invokevirtual #59                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      51: checkcast     #52                 // class reactor/core/scheduler/Schedulers$CachedScheduler
      54: areturn

  static void handleError(java.lang.Throwable);
    Code:
       0: invokestatic  #64                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       3: astore_1
       4: aload_0
       5: invokestatic  #65                 // Method reactor/core/Exceptions.unwrap:(Ljava/lang/Throwable;)Ljava/lang/Throwable;
       8: astore_2
       9: aload_1
      10: invokevirtual #66                 // Method java/lang/Thread.getUncaughtExceptionHandler:()Ljava/lang/Thread$UncaughtExceptionHandler;
      13: astore_3
      14: aload_3
      15: ifnull        29
      18: aload_3
      19: aload_1
      20: aload_2
      21: invokeinterface #67,  3           // InterfaceMethod java/lang/Thread$UncaughtExceptionHandler.uncaughtException:(Ljava/lang/Thread;Ljava/lang/Throwable;)V
      26: goto          40
      29: getstatic     #35                 // Field log:Lreactor/util/Logger;
      32: ldc           #68                 // String Scheduler worker failed with an uncaught exception
      34: aload_2
      35: invokeinterface #69,  3           // InterfaceMethod reactor/util/Logger.error:(Ljava/lang/String;Ljava/lang/Throwable;)V
      40: getstatic     #42                 // Field onHandleErrorHook:Ljava/util/function/BiConsumer;
      43: ifnull        56
      46: getstatic     #42                 // Field onHandleErrorHook:Ljava/util/function/BiConsumer;
      49: aload_1
      50: aload_2
      51: invokeinterface #70,  3           // InterfaceMethod java/util/function/BiConsumer.accept:(Ljava/lang/Object;Ljava/lang/Object;)V
      56: return

  static reactor.core.Disposable directSchedule(java.util.concurrent.ScheduledExecutorService, java.lang.Runnable, long, java.util.concurrent.TimeUnit);
    Code:
       0: new           #71                 // class reactor/core/scheduler/SchedulerTask
       3: dup
       4: aload_1
       5: invokespecial #72                 // Method reactor/core/scheduler/SchedulerTask."<init>":(Ljava/lang/Runnable;)V
       8: astore        5
      10: lload_2
      11: lconst_0
      12: lcmp
      13: ifgt          29
      16: aload_0
      17: aload         5
      19: invokeinterface #73,  2           // InterfaceMethod java/util/concurrent/ScheduledExecutorService.submit:(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;
      24: astore        6
      26: goto          42
      29: aload_0
      30: aload         5
      32: lload_2
      33: aload         4
      35: invokeinterface #74,  5           // InterfaceMethod java/util/concurrent/ScheduledExecutorService.schedule:(Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;
      40: astore        6
      42: aload         5
      44: aload         6
      46: invokevirtual #75                 // Method reactor/core/scheduler/SchedulerTask.setFuture:(Ljava/util/concurrent/Future;)V
      49: aload         5
      51: areturn

  static reactor.core.Disposable directSchedulePeriodically(java.util.concurrent.ScheduledExecutorService, java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);
    Code:
       0: new           #76                 // class reactor/core/scheduler/PeriodicSchedulerTask
       3: dup
       4: aload_1
       5: invokespecial #77                 // Method reactor/core/scheduler/PeriodicSchedulerTask."<init>":(Ljava/lang/Runnable;)V
       8: astore        7
      10: aload_0
      11: aload         7
      13: lload_2
      14: lload         4
      16: aload         6
      18: invokeinterface #78,  7           // InterfaceMethod java/util/concurrent/ScheduledExecutorService.scheduleAtFixedRate:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;
      23: astore        8
      25: aload         7
      27: aload         8
      29: invokevirtual #79                 // Method reactor/core/scheduler/PeriodicSchedulerTask.setFuture:(Ljava/util/concurrent/Future;)V
      32: aload         7
      34: areturn

  static reactor.core.Disposable workerSchedule(java.util.concurrent.ScheduledExecutorService, reactor.core.Disposable$Composite, java.lang.Runnable, long, java.util.concurrent.TimeUnit);
    Code:
       0: new           #80                 // class reactor/core/scheduler/WorkerTask
       3: dup
       4: aload_2
       5: aload_1
       6: invokespecial #81                 // Method reactor/core/scheduler/WorkerTask."<init>":(Ljava/lang/Runnable;Lreactor/core/Disposable$Composite;)V
       9: astore        6
      11: aload_1
      12: aload         6
      14: invokeinterface #82,  2           // InterfaceMethod reactor/core/Disposable$Composite.add:(Lreactor/core/Disposable;)Z
      19: ifne          26
      22: invokestatic  #83                 // Method reactor/core/Exceptions.failWithRejected:()Ljava/util/concurrent/RejectedExecutionException;
      25: athrow
      26: lload_3
      27: lconst_0
      28: lcmp
      29: ifgt          45
      32: aload_0
      33: aload         6
      35: invokeinterface #73,  2           // InterfaceMethod java/util/concurrent/ScheduledExecutorService.submit:(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;
      40: astore        7
      42: goto          58
      45: aload_0
      46: aload         6
      48: lload_3
      49: aload         5
      51: invokeinterface #74,  5           // InterfaceMethod java/util/concurrent/ScheduledExecutorService.schedule:(Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;
      56: astore        7
      58: aload         6
      60: aload         7
      62: invokevirtual #84                 // Method reactor/core/scheduler/WorkerTask.setFuture:(Ljava/util/concurrent/Future;)V
      65: goto          78
      68: astore        7
      70: aload         6
      72: invokevirtual #86                 // Method reactor/core/scheduler/WorkerTask.dispose:()V
      75: aload         7
      77: athrow
      78: aload         6
      80: areturn
    Exception table:
       from    to  target type
          26    65    68   Class java/util/concurrent/RejectedExecutionException

  static reactor.core.Disposable workerSchedulePeriodically(java.util.concurrent.ScheduledExecutorService, reactor.core.Disposable$Composite, java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);
    Code:
       0: new           #87                 // class reactor/core/scheduler/PeriodicWorkerTask
       3: dup
       4: aload_2
       5: aload_1
       6: invokespecial #88                 // Method reactor/core/scheduler/PeriodicWorkerTask."<init>":(Ljava/lang/Runnable;Lreactor/core/Disposable$Composite;)V
       9: astore        8
      11: aload_1
      12: aload         8
      14: invokeinterface #82,  2           // InterfaceMethod reactor/core/Disposable$Composite.add:(Lreactor/core/Disposable;)Z
      19: ifne          26
      22: invokestatic  #83                 // Method reactor/core/Exceptions.failWithRejected:()Ljava/util/concurrent/RejectedExecutionException;
      25: athrow
      26: aload_0
      27: aload         8
      29: lload_3
      30: lload         5
      32: aload         7
      34: invokeinterface #78,  7           // InterfaceMethod java/util/concurrent/ScheduledExecutorService.scheduleAtFixedRate:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;
      39: astore        9
      41: aload         8
      43: aload         9
      45: invokevirtual #89                 // Method reactor/core/scheduler/PeriodicWorkerTask.setFuture:(Ljava/util/concurrent/Future;)V
      48: goto          61
      51: astore        9
      53: aload         8
      55: invokevirtual #90                 // Method reactor/core/scheduler/PeriodicWorkerTask.dispose:()V
      58: aload         9
      60: athrow
      61: aload         8
      63: areturn
    Exception table:
       from    to  target type
          26    48    51   Class java/util/concurrent/RejectedExecutionException

  static java.util.concurrent.ScheduledExecutorService decorateExecutorService(java.lang.String, java.util.function.Supplier<? extends java.util.concurrent.ScheduledExecutorService>);
    Code:
       0: getstatic     #22                 // Field factory:Lreactor/core/scheduler/Schedulers$Factory;
       3: aload_0
       4: aload_1
       5: invokeinterface #91,  3           // InterfaceMethod reactor/core/scheduler/Schedulers$Factory.decorateExecutorService:(Ljava/lang/String;Ljava/util/function/Supplier;)Ljava/util/concurrent/ScheduledExecutorService;
      10: areturn

  static final java.lang.Object scanExecutor(java.util.concurrent.Executor, reactor.core.Scannable$Attr);
    Code:
       0: aload_0
       1: instanceof    #92                 // class reactor/core/scheduler/DelegateServiceScheduler$UnsupportedScheduledExecutorService
       4: ifeq          15
       7: aload_0
       8: checkcast     #92                 // class reactor/core/scheduler/DelegateServiceScheduler$UnsupportedScheduledExecutorService
      11: invokevirtual #93                 // Method reactor/core/scheduler/DelegateServiceScheduler$UnsupportedScheduledExecutorService.get:()Ljava/util/concurrent/ExecutorService;
      14: astore_0
      15: aload_0
      16: instanceof    #94                 // class reactor/core/Scannable
      19: ifeq          33
      22: aload_0
      23: checkcast     #94                 // class reactor/core/Scannable
      26: aload_1
      27: invokeinterface #95,  2           // InterfaceMethod reactor/core/Scannable.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      32: areturn
      33: aload_0
      34: instanceof    #3                  // class java/util/concurrent/ExecutorService
      37: ifeq          79
      40: aload_0
      41: checkcast     #3                  // class java/util/concurrent/ExecutorService
      44: astore_2
      45: aload_1
      46: getstatic     #96                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      49: if_acmpne     62
      52: aload_2
      53: invokeinterface #97,  1           // InterfaceMethod java/util/concurrent/ExecutorService.isTerminated:()Z
      58: invokestatic  #98                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      61: areturn
      62: aload_1
      63: getstatic     #99                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      66: if_acmpne     79
      69: aload_2
      70: invokeinterface #100,  1          // InterfaceMethod java/util/concurrent/ExecutorService.isShutdown:()Z
      75: invokestatic  #98                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      78: areturn
      79: aload_0
      80: instanceof    #101                // class java/util/concurrent/ThreadPoolExecutor
      83: ifeq          152
      86: aload_0
      87: checkcast     #101                // class java/util/concurrent/ThreadPoolExecutor
      90: astore_2
      91: aload_1
      92: getstatic     #102                // Field reactor/core/Scannable$Attr.CAPACITY:Lreactor/core/Scannable$Attr;
      95: if_acmpne     106
      98: aload_2
      99: invokevirtual #103                // Method java/util/concurrent/ThreadPoolExecutor.getMaximumPoolSize:()I
     102: invokestatic  #104                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     105: areturn
     106: aload_1
     107: getstatic     #105                // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
     110: if_acmpne     132
     113: aload_2
     114: invokevirtual #106                // Method java/util/concurrent/ThreadPoolExecutor.getTaskCount:()J
     117: aload_2
     118: invokevirtual #107                // Method java/util/concurrent/ThreadPoolExecutor.getCompletedTaskCount:()J
     121: lsub
     122: invokestatic  #108                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     125: invokevirtual #109                // Method java/lang/Long.intValue:()I
     128: invokestatic  #104                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     131: areturn
     132: aload_1
     133: getstatic     #110                // Field reactor/core/Scannable$Attr.LARGE_BUFFERED:Lreactor/core/Scannable$Attr;
     136: if_acmpne     152
     139: aload_2
     140: invokevirtual #106                // Method java/util/concurrent/ThreadPoolExecutor.getTaskCount:()J
     143: aload_2
     144: invokevirtual #107                // Method java/util/concurrent/ThreadPoolExecutor.getCompletedTaskCount:()J
     147: lsub
     148: invokestatic  #108                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     151: areturn
     152: aconst_null
     153: areturn

  private static reactor.core.scheduler.Scheduler lambda$static$2();
    Code:
       0: ldc           #55                 // String single
       2: iconst_1
       3: invokestatic  #31                 // Method newSingle:(Ljava/lang/String;Z)Lreactor/core/scheduler/Scheduler;
       6: areturn

  private static reactor.core.scheduler.Scheduler lambda$static$1();
    Code:
       0: ldc           #44                 // String parallel
       2: invokestatic  #24                 // Method java/lang/Runtime.getRuntime:()Ljava/lang/Runtime;
       5: invokevirtual #25                 // Method java/lang/Runtime.availableProcessors:()I
       8: iconst_1
       9: invokestatic  #27                 // Method newParallel:(Ljava/lang/String;IZ)Lreactor/core/scheduler/Scheduler;
      12: areturn

  private static reactor.core.scheduler.Scheduler lambda$static$0();
    Code:
       0: ldc           #11                 // String elastic
       2: bipush        60
       4: iconst_1
       5: invokestatic  #17                 // Method newElastic:(Ljava/lang/String;IZ)Lreactor/core/scheduler/Scheduler;
       8: areturn

  static {};
    Code:
       0: invokestatic  #24                 // Method java/lang/Runtime.getRuntime:()Ljava/lang/Runtime;
       3: invokevirtual #25                 // Method java/lang/Runtime.availableProcessors:()I
       6: iconst_4
       7: invokestatic  #111                // Method java/lang/Math.max:(II)I
      10: putstatic     #112                // Field DEFAULT_POOL_SIZE:I
      13: new           #113                // class java/util/concurrent/atomic/AtomicReference
      16: dup
      17: invokespecial #114                // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
      20: putstatic     #9                  // Field CACHED_ELASTIC:Ljava/util/concurrent/atomic/AtomicReference;
      23: new           #113                // class java/util/concurrent/atomic/AtomicReference
      26: dup
      27: invokespecial #114                // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
      30: putstatic     #43                 // Field CACHED_PARALLEL:Ljava/util/concurrent/atomic/AtomicReference;
      33: new           #113                // class java/util/concurrent/atomic/AtomicReference
      36: dup
      37: invokespecial #114                // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
      40: putstatic     #53                 // Field CACHED_SINGLE:Ljava/util/concurrent/atomic/AtomicReference;
      43: invokedynamic #115,  0            // InvokeDynamic #0:get:()Ljava/util/function/Supplier;
      48: putstatic     #12                 // Field ELASTIC_SUPPLIER:Ljava/util/function/Supplier;
      51: invokedynamic #116,  0            // InvokeDynamic #1:get:()Ljava/util/function/Supplier;
      56: putstatic     #45                 // Field PARALLEL_SUPPLIER:Ljava/util/function/Supplier;
      59: invokedynamic #117,  0            // InvokeDynamic #2:get:()Ljava/util/function/Supplier;
      64: putstatic     #56                 // Field SINGLE_SUPPLIER:Ljava/util/function/Supplier;
      67: new           #118                // class reactor/core/scheduler/Schedulers$1
      70: dup
      71: invokespecial #119                // Method reactor/core/scheduler/Schedulers$1."<init>":()V
      74: putstatic     #46                 // Field DEFAULT:Lreactor/core/scheduler/Schedulers$Factory;
      77: getstatic     #46                 // Field DEFAULT:Lreactor/core/scheduler/Schedulers$Factory;
      80: putstatic     #22                 // Field factory:Lreactor/core/scheduler/Schedulers$Factory;
      83: ldc           #10                 // class reactor/core/scheduler/Schedulers
      85: invokestatic  #120                // Method reactor/util/Loggers.getLogger:(Ljava/lang/Class;)Lreactor/util/Logger;
      88: putstatic     #35                 // Field log:Lreactor/util/Logger;
      91: return
}
