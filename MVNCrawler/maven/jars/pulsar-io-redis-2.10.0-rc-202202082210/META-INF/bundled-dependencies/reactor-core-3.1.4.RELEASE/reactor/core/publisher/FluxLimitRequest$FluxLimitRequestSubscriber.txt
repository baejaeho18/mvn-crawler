Compiled from "FluxLimitRequest.java"
class reactor.core.publisher.FluxLimitRequest$FluxLimitRequestSubscriber<T> implements reactor.core.publisher.InnerOperator<T, T> {
  final reactor.core.CoreSubscriber<? super T> actual;

  org.reactivestreams.Subscription parent;

  long toProduce;

  volatile long requestRemaining;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.FluxLimitRequest$FluxLimitRequestSubscriber> REQUEST_REMAINING;

  reactor.core.publisher.FluxLimitRequest$FluxLimitRequestSubscriber(reactor.core.CoreSubscriber<? super T>, long);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: lload_2
      11: putfield      #3                  // Field toProduce:J
      14: aload_0
      15: lload_2
      16: putfield      #4                  // Field requestRemaining:J
      19: return

  public reactor.core.CoreSubscriber<? super T> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #3                  // Field toProduce:J
       4: lstore_2
       5: lload_2
       6: lconst_0
       7: lcmp
       8: ifle          54
      11: aload_0
      12: lload_2
      13: lconst_1
      14: lsub
      15: dup2
      16: lstore_2
      17: putfield      #3                  // Field toProduce:J
      20: aload_0
      21: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      24: aload_1
      25: invokeinterface #5,  2            // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      30: lload_2
      31: lconst_0
      32: lcmp
      33: ifne          54
      36: aload_0
      37: getfield      #6                  // Field parent:Lorg/reactivestreams/Subscription;
      40: invokeinterface #7,  1            // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      45: aload_0
      46: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      49: invokeinterface #8,  1            // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      54: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #3                  // Field toProduce:J
       4: lconst_0
       5: lcmp
       6: ifeq          24
       9: aload_0
      10: lconst_0
      11: putfield      #3                  // Field toProduce:J
      14: aload_0
      15: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      18: aload_1
      19: invokeinterface #9,  2            // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      24: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #3                  // Field toProduce:J
       4: lconst_0
       5: lcmp
       6: ifeq          23
       9: aload_0
      10: lconst_0
      11: putfield      #3                  // Field toProduce:J
      14: aload_0
      15: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      18: invokeinterface #8,  1            // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      23: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field parent:Lorg/reactivestreams/Subscription;
       5: aload_0
       6: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: invokeinterface #10,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      15: return

  public void request(long);
    Code:
       0: aload_0
       1: getfield      #4                  // Field requestRemaining:J
       4: lstore_3
       5: lload_3
       6: lload_1
       7: lcmp
       8: ifgt          17
      11: lload_3
      12: lstore        5
      14: goto          20
      17: lload_1
      18: lstore        5
      20: lload_3
      21: lload         5
      23: lsub
      24: lstore        7
      26: getstatic     #11                 // Field REQUEST_REMAINING:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      29: aload_0
      30: lload_3
      31: lload         7
      33: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.compareAndSet:(Ljava/lang/Object;JJ)Z
      36: ifeq          60
      39: lload         5
      41: lconst_0
      42: lcmp
      43: ifeq          63
      46: aload_0
      47: getfield      #6                  // Field parent:Lorg/reactivestreams/Subscription;
      50: lload         5
      52: invokeinterface #13,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      57: goto          63
      60: goto          0
      63: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #6                  // Field parent:Lorg/reactivestreams/Subscription;
       4: invokeinterface #7,  1            // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
       9: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #14                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #6                  // Field parent:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #15                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      16: if_acmpne     37
      19: aload_0
      20: getfield      #3                  // Field toProduce:J
      23: lconst_0
      24: lcmp
      25: ifne          32
      28: iconst_1
      29: goto          33
      32: iconst_0
      33: invokestatic  #16                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      36: areturn
      37: aload_0
      38: aload_1
      39: invokespecial #17                 // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      42: areturn

  static {};
    Code:
       0: ldc           #18                 // class reactor/core/publisher/FluxLimitRequest$FluxLimitRequestSubscriber
       2: ldc           #19                 // String requestRemaining
       4: invokestatic  #20                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
       7: putstatic     #11                 // Field REQUEST_REMAINING:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      10: return
}
