Compiled from "FluxReplay.java"
final class reactor.core.publisher.FluxReplay$ReplaySubscriber<T> implements reactor.core.publisher.InnerConsumer<T>, reactor.core.Disposable {
  final reactor.core.publisher.FluxReplay<T> parent;

  final reactor.core.publisher.FluxReplay$ReplayBuffer<T> buffer;

  volatile org.reactivestreams.Subscription s;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxReplay$ReplaySubscriber, org.reactivestreams.Subscription> S;

  volatile reactor.core.publisher.FluxReplay$ReplaySubscription<T>[] subscribers;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxReplay$ReplaySubscriber> WIP;

  volatile int connected;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxReplay$ReplaySubscriber> CONNECTED;

  static final reactor.core.publisher.FluxReplay$ReplaySubscription[] EMPTY;

  static final reactor.core.publisher.FluxReplay$ReplaySubscription[] TERMINATED;

  volatile boolean cancelled;

  reactor.core.publisher.FluxReplay$ReplaySubscriber(reactor.core.publisher.FluxReplay$ReplayBuffer<T>, reactor.core.publisher.FluxReplay<T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field buffer:Lreactor/core/publisher/FluxReplay$ReplayBuffer;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field parent:Lreactor/core/publisher/FluxReplay;
      14: aload_0
      15: getstatic     #4                  // Field EMPTY:[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
      18: putfield      #5                  // Field subscribers:[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
      21: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #2                  // Field buffer:Lreactor/core/publisher/FluxReplay$ReplayBuffer;
       4: invokeinterface #6,  1            // InterfaceMethod reactor/core/publisher/FluxReplay$ReplayBuffer.isDone:()Z
       9: ifeq          21
      12: aload_1
      13: invokeinterface #7,  1            // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      18: goto          41
      21: getstatic     #8                  // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      24: aload_0
      25: aload_1
      26: invokestatic  #9                  // Method reactor/core/publisher/Operators.setOnce:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
      29: ifeq          41
      32: aload_1
      33: ldc2_w        #11                 // long 9223372036854775807l
      36: invokeinterface #13,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      41: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #2                  // Field buffer:Lreactor/core/publisher/FluxReplay$ReplayBuffer;
       4: astore_2
       5: aload_2
       6: invokeinterface #6,  1            // InterfaceMethod reactor/core/publisher/FluxReplay$ReplayBuffer.isDone:()Z
      11: ifeq          25
      14: aload_1
      15: aload_0
      16: invokevirtual #14                 // Method currentContext:()Lreactor/util/context/Context;
      19: invokestatic  #15                 // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      22: goto          71
      25: aload_2
      26: aload_1
      27: invokeinterface #16,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplayBuffer.add:(Ljava/lang/Object;)V
      32: aload_0
      33: getfield      #5                  // Field subscribers:[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
      36: astore_3
      37: aload_3
      38: arraylength
      39: istore        4
      41: iconst_0
      42: istore        5
      44: iload         5
      46: iload         4
      48: if_icmpge     71
      51: aload_3
      52: iload         5
      54: aaload
      55: astore        6
      57: aload_2
      58: aload         6
      60: invokeinterface #17,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplayBuffer.replay:(Lreactor/core/publisher/FluxReplay$ReplaySubscription;)V
      65: iinc          5, 1
      68: goto          44
      71: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #2                  // Field buffer:Lreactor/core/publisher/FluxReplay$ReplayBuffer;
       4: astore_2
       5: aload_2
       6: invokeinterface #6,  1            // InterfaceMethod reactor/core/publisher/FluxReplay$ReplayBuffer.isDone:()Z
      11: ifeq          25
      14: aload_1
      15: aload_0
      16: invokevirtual #14                 // Method currentContext:()Lreactor/util/context/Context;
      19: invokestatic  #18                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      22: goto          71
      25: aload_2
      26: aload_1
      27: invokeinterface #19,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplayBuffer.onError:(Ljava/lang/Throwable;)V
      32: aload_0
      33: invokevirtual #20                 // Method terminate:()[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
      36: astore_3
      37: aload_3
      38: arraylength
      39: istore        4
      41: iconst_0
      42: istore        5
      44: iload         5
      46: iload         4
      48: if_icmpge     71
      51: aload_3
      52: iload         5
      54: aaload
      55: astore        6
      57: aload_2
      58: aload         6
      60: invokeinterface #17,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplayBuffer.replay:(Lreactor/core/publisher/FluxReplay$ReplaySubscription;)V
      65: iinc          5, 1
      68: goto          44
      71: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #2                  // Field buffer:Lreactor/core/publisher/FluxReplay$ReplayBuffer;
       4: astore_1
       5: aload_1
       6: invokeinterface #6,  1            // InterfaceMethod reactor/core/publisher/FluxReplay$ReplayBuffer.isDone:()Z
      11: ifne          57
      14: aload_1
      15: invokeinterface #21,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplayBuffer.onComplete:()V
      20: aload_0
      21: invokevirtual #20                 // Method terminate:()[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
      24: astore_2
      25: aload_2
      26: arraylength
      27: istore_3
      28: iconst_0
      29: istore        4
      31: iload         4
      33: iload_3
      34: if_icmpge     57
      37: aload_2
      38: iload         4
      40: aaload
      41: astore        5
      43: aload_1
      44: aload         5
      46: invokeinterface #17,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplayBuffer.replay:(Lreactor/core/publisher/FluxReplay$ReplaySubscription;)V
      51: iinc          4, 1
      54: goto          31
      57: return

  public void dispose();
    Code:
       0: aload_0
       1: getfield      #22                 // Field cancelled:Z
       4: ifeq          8
       7: return
       8: getstatic     #8                  // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      11: aload_0
      12: invokestatic  #23                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
      15: ifeq          94
      18: aload_0
      19: iconst_1
      20: putfield      #22                 // Field cancelled:Z
      23: getstatic     #24                 // Field reactor/core/publisher/FluxReplay.CONNECTION:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      26: aload_0
      27: getfield      #3                  // Field parent:Lreactor/core/publisher/FluxReplay;
      30: aconst_null
      31: invokevirtual #25                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V
      34: new           #26                 // class java/util/concurrent/CancellationException
      37: dup
      38: ldc           #27                 // String Disconnected
      40: invokespecial #28                 // Method java/util/concurrent/CancellationException."<init>":(Ljava/lang/String;)V
      43: astore_1
      44: aload_0
      45: getfield      #2                  // Field buffer:Lreactor/core/publisher/FluxReplay$ReplayBuffer;
      48: aload_1
      49: invokeinterface #19,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplayBuffer.onError:(Ljava/lang/Throwable;)V
      54: aload_0
      55: invokevirtual #20                 // Method terminate:()[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
      58: astore_2
      59: aload_2
      60: arraylength
      61: istore_3
      62: iconst_0
      63: istore        4
      65: iload         4
      67: iload_3
      68: if_icmpge     94
      71: aload_2
      72: iload         4
      74: aaload
      75: astore        5
      77: aload_0
      78: getfield      #2                  // Field buffer:Lreactor/core/publisher/FluxReplay$ReplayBuffer;
      81: aload         5
      83: invokeinterface #17,  2           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplayBuffer.replay:(Lreactor/core/publisher/FluxReplay$ReplaySubscription;)V
      88: iinc          4, 1
      91: goto          65
      94: return

  boolean add(reactor.core.publisher.FluxReplay$ReplayInner<T>);
    Code:
       0: aload_0
       1: getfield      #5                  // Field subscribers:[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
       4: getstatic     #29                 // Field TERMINATED:[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
       7: if_acmpne     12
      10: iconst_0
      11: ireturn
      12: aload_0
      13: dup
      14: astore_2
      15: monitorenter
      16: aload_0
      17: getfield      #5                  // Field subscribers:[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
      20: astore_3
      21: aload_3
      22: getstatic     #29                 // Field TERMINATED:[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
      25: if_acmpne     32
      28: iconst_0
      29: aload_2
      30: monitorexit
      31: ireturn
      32: aload_3
      33: arraylength
      34: istore        4
      36: iload         4
      38: iconst_1
      39: iadd
      40: anewarray     #30                 // class reactor/core/publisher/FluxReplay$ReplayInner
      43: astore        5
      45: aload_3
      46: iconst_0
      47: aload         5
      49: iconst_0
      50: iload         4
      52: invokestatic  #31                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      55: aload         5
      57: iload         4
      59: aload_1
      60: aastore
      61: aload_0
      62: aload         5
      64: putfield      #5                  // Field subscribers:[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
      67: iconst_1
      68: aload_2
      69: monitorexit
      70: ireturn
      71: astore        6
      73: aload_2
      74: monitorexit
      75: aload         6
      77: athrow
    Exception table:
       from    to  target type
          16    31    71   any
          32    70    71   any
          71    75    71   any

  void remove(reactor.core.publisher.FluxReplay$ReplaySubscription<T>);
    Code:
       0: aload_0
       1: getfield      #5                  // Field subscribers:[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
       4: astore_2
       5: aload_2
       6: getstatic     #29                 // Field TERMINATED:[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
       9: if_acmpeq     19
      12: aload_2
      13: getstatic     #4                  // Field EMPTY:[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
      16: if_acmpne     20
      19: return
      20: aload_0
      21: dup
      22: astore_3
      23: monitorenter
      24: aload_0
      25: getfield      #5                  // Field subscribers:[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
      28: astore_2
      29: aload_2
      30: getstatic     #29                 // Field TERMINATED:[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
      33: if_acmpeq     43
      36: aload_2
      37: getstatic     #4                  // Field EMPTY:[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
      40: if_acmpne     46
      43: aload_3
      44: monitorexit
      45: return
      46: iconst_m1
      47: istore        4
      49: aload_2
      50: arraylength
      51: istore        5
      53: iconst_0
      54: istore        6
      56: iload         6
      58: iload         5
      60: if_icmpge     84
      63: aload_2
      64: iload         6
      66: aaload
      67: aload_1
      68: if_acmpne     78
      71: iload         6
      73: istore        4
      75: goto          84
      78: iinc          6, 1
      81: goto          56
      84: iload         4
      86: ifge          92
      89: aload_3
      90: monitorexit
      91: return
      92: iload         5
      94: iconst_1
      95: if_icmpne     106
      98: getstatic     #4                  // Field EMPTY:[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
     101: astore        6
     103: goto          144
     106: iload         5
     108: iconst_1
     109: isub
     110: anewarray     #30                 // class reactor/core/publisher/FluxReplay$ReplayInner
     113: astore        6
     115: aload_2
     116: iconst_0
     117: aload         6
     119: iconst_0
     120: iload         4
     122: invokestatic  #31                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     125: aload_2
     126: iload         4
     128: iconst_1
     129: iadd
     130: aload         6
     132: iload         4
     134: iload         5
     136: iload         4
     138: isub
     139: iconst_1
     140: isub
     141: invokestatic  #31                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     144: aload_0
     145: aload         6
     147: putfield      #5                  // Field subscribers:[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
     150: aload_3
     151: monitorexit
     152: goto          162
     155: astore        7
     157: aload_3
     158: monitorexit
     159: aload         7
     161: athrow
     162: return
    Exception table:
       from    to  target type
          24    45   155   any
          46    91   155   any
          92   152   155   any
         155   159   155   any

  reactor.core.publisher.FluxReplay$ReplaySubscription<T>[] terminate();
    Code:
       0: aload_0
       1: getfield      #5                  // Field subscribers:[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
       4: astore_1
       5: aload_1
       6: getstatic     #29                 // Field TERMINATED:[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
       9: if_acmpne     14
      12: aload_1
      13: areturn
      14: aload_0
      15: dup
      16: astore_2
      17: monitorenter
      18: aload_0
      19: getfield      #5                  // Field subscribers:[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
      22: astore_1
      23: aload_1
      24: getstatic     #29                 // Field TERMINATED:[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
      27: if_acmpeq     37
      30: aload_0
      31: getstatic     #29                 // Field TERMINATED:[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
      34: putfield      #5                  // Field subscribers:[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
      37: aload_1
      38: aload_2
      39: monitorexit
      40: areturn
      41: astore_3
      42: aload_2
      43: monitorexit
      44: aload_3
      45: athrow
    Exception table:
       from    to  target type
          18    40    41   any
          41    44    41   any

  boolean isTerminated();
    Code:
       0: aload_0
       1: getfield      #5                  // Field subscribers:[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
       4: getstatic     #29                 // Field TERMINATED:[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
       7: if_acmpne     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  boolean tryConnect();
    Code:
       0: aload_0
       1: getfield      #32                 // Field connected:I
       4: ifne          23
       7: getstatic     #33                 // Field CONNECTED:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: aload_0
      11: iconst_0
      12: iconst_1
      13: invokevirtual #34                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      16: ifeq          23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: ireturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #35                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #36                 // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #37                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      16: if_acmpne     25
      19: ldc           #39                 // int 2147483647
      21: invokestatic  #40                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      24: areturn
      25: aload_1
      26: getstatic     #41                 // Field reactor/core/Scannable$Attr.CAPACITY:Lreactor/core/Scannable$Attr;
      29: if_acmpne     45
      32: aload_0
      33: getfield      #2                  // Field buffer:Lreactor/core/publisher/FluxReplay$ReplayBuffer;
      36: invokeinterface #42,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplayBuffer.capacity:()I
      41: invokestatic  #40                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      44: areturn
      45: aload_1
      46: getstatic     #43                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
      49: if_acmpne     62
      52: aload_0
      53: getfield      #2                  // Field buffer:Lreactor/core/publisher/FluxReplay$ReplayBuffer;
      56: invokeinterface #44,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplayBuffer.getError:()Ljava/lang/Throwable;
      61: areturn
      62: aload_1
      63: getstatic     #45                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      66: if_acmpne     82
      69: aload_0
      70: getfield      #2                  // Field buffer:Lreactor/core/publisher/FluxReplay$ReplayBuffer;
      73: invokeinterface #46,  1           // InterfaceMethod reactor/core/publisher/FluxReplay$ReplayBuffer.size:()I
      78: invokestatic  #40                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      81: areturn
      82: aload_1
      83: getstatic     #47                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      86: if_acmpne     97
      89: aload_0
      90: invokevirtual #48                 // Method isTerminated:()Z
      93: invokestatic  #49                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      96: areturn
      97: aload_1
      98: getstatic     #50                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
     101: if_acmpne     112
     104: aload_0
     105: getfield      #22                 // Field cancelled:Z
     108: invokestatic  #49                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     111: areturn
     112: aconst_null
     113: areturn

  public java.util.stream.Stream<? extends reactor.core.Scannable> inners();
    Code:
       0: aload_0
       1: getfield      #5                  // Field subscribers:[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
       4: invokestatic  #51                 // InterfaceMethod java/util/stream/Stream.of:([Ljava/lang/Object;)Ljava/util/stream/Stream;
       7: areturn

  public boolean isDisposed();
    Code:
       0: aload_0
       1: getfield      #22                 // Field cancelled:Z
       4: ireturn

  static {};
    Code:
       0: ldc           #52                 // class reactor/core/publisher/FluxReplay$ReplaySubscriber
       2: ldc           #53                 // class org/reactivestreams/Subscription
       4: ldc           #54                 // String s
       6: invokestatic  #55                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #8                  // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: ldc           #52                 // class reactor/core/publisher/FluxReplay$ReplaySubscriber
      14: ldc           #56                 // String wip
      16: invokestatic  #57                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      19: putstatic     #58                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      22: ldc           #52                 // class reactor/core/publisher/FluxReplay$ReplaySubscriber
      24: ldc           #59                 // String connected
      26: invokestatic  #57                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      29: putstatic     #33                 // Field CONNECTED:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      32: iconst_0
      33: anewarray     #60                 // class reactor/core/publisher/FluxReplay$ReplaySubscription
      36: putstatic     #4                  // Field EMPTY:[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
      39: iconst_0
      40: anewarray     #60                 // class reactor/core/publisher/FluxReplay$ReplaySubscription
      43: putstatic     #29                 // Field TERMINATED:[Lreactor/core/publisher/FluxReplay$ReplaySubscription;
      46: return
}
