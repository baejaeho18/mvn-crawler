Compiled from "Operators.java"
final class reactor.core.publisher.Operators$ScalarSubscription<T> implements reactor.core.Fuseable$SynchronousSubscription<T>, reactor.core.publisher.InnerProducer<T> {
  final reactor.core.CoreSubscriber<? super T> actual;

  final T value;

  volatile int once;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.Operators$ScalarSubscription> ONCE;

  reactor.core.publisher.Operators$ScalarSubscription(reactor.core.CoreSubscriber<? super T>, T);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_2
       6: ldc           #2                  // String value
       8: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      11: putfield      #4                  // Field value:Ljava/lang/Object;
      14: aload_0
      15: aload_1
      16: ldc           #5                  // String actual
      18: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      21: checkcast     #6                  // class reactor/core/CoreSubscriber
      24: putfield      #7                  // Field actual:Lreactor/core/CoreSubscriber;
      27: return

  public void cancel();
    Code:
       0: getstatic     #8                  // Field ONCE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: iconst_2
       5: invokevirtual #9                  // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.lazySet:(Ljava/lang/Object;I)V
       8: return

  public void clear();
    Code:
       0: getstatic     #8                  // Field ONCE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: iconst_1
       5: invokevirtual #9                  // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.lazySet:(Ljava/lang/Object;I)V
       8: return

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #10                 // Field once:I
       4: ifeq          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public reactor.core.CoreSubscriber<? super T> actual();
    Code:
       0: aload_0
       1: getfield      #7                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public T poll();
    Code:
       0: aload_0
       1: getfield      #10                 // Field once:I
       4: ifne          20
       7: getstatic     #8                  // Field ONCE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: aload_0
      11: iconst_1
      12: invokevirtual #9                  // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.lazySet:(Ljava/lang/Object;I)V
      15: aload_0
      16: getfield      #4                  // Field value:Ljava/lang/Object;
      19: areturn
      20: aconst_null
      21: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #11                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
       4: if_acmpeq     14
       7: aload_1
       8: getstatic     #12                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      11: if_acmpne     31
      14: aload_0
      15: getfield      #10                 // Field once:I
      18: iconst_1
      19: if_icmpne     26
      22: iconst_1
      23: goto          27
      26: iconst_0
      27: invokestatic  #13                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      30: areturn
      31: aload_0
      32: aload_1
      33: invokespecial #14                 // InterfaceMethod reactor/core/publisher/InnerProducer.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      36: areturn

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #15                 // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          48
       7: getstatic     #8                  // Field ONCE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: aload_0
      11: iconst_0
      12: iconst_1
      13: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      16: ifeq          48
      19: aload_0
      20: getfield      #7                  // Field actual:Lreactor/core/CoreSubscriber;
      23: astore_3
      24: aload_3
      25: aload_0
      26: getfield      #4                  // Field value:Ljava/lang/Object;
      29: invokeinterface #17,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
      34: aload_0
      35: getfield      #10                 // Field once:I
      38: iconst_2
      39: if_icmpeq     48
      42: aload_3
      43: invokeinterface #18,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      48: return

  public int requestFusion(int);
    Code:
       0: iload_1
       1: iconst_1
       2: iand
       3: ifeq          8
       6: iconst_1
       7: ireturn
       8: iconst_0
       9: ireturn

  public int size();
    Code:
       0: aload_0
       1: invokevirtual #20                 // Method isEmpty:()Z
       4: ifeq          11
       7: iconst_0
       8: goto          12
      11: iconst_1
      12: ireturn

  static {};
    Code:
       0: ldc           #21                 // class reactor/core/publisher/Operators$ScalarSubscription
       2: ldc           #22                 // String once
       4: invokestatic  #23                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #8                  // Field ONCE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: return
}
