Compiled from "FluxPublishMulticast.java"
final class reactor.core.publisher.FluxPublishMulticast<T, R> extends reactor.core.publisher.FluxOperator<T, R> implements reactor.core.Fuseable {
  final java.util.function.Function<? super reactor.core.publisher.Flux<T>, ? extends org.reactivestreams.Publisher<? extends R>> transform;

  final java.util.function.Supplier<? extends java.util.Queue<T>> queueSupplier;

  final int prefetch;

  reactor.core.publisher.FluxPublishMulticast(reactor.core.publisher.Flux<? extends T>, java.util.function.Function<? super reactor.core.publisher.Flux<T>, ? extends org.reactivestreams.Publisher<? extends R>>, int, java.util.function.Supplier<? extends java.util.Queue<T>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxOperator."<init>":(Lreactor/core/publisher/Flux;)V
       5: iload_3
       6: iconst_1
       7: if_icmpge     37
      10: new           #2                  // class java/lang/IllegalArgumentException
      13: dup
      14: new           #3                  // class java/lang/StringBuilder
      17: dup
      18: invokespecial #4                  // Method java/lang/StringBuilder."<init>":()V
      21: ldc           #5                  // String prefetch > 0 required but it was
      23: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: iload_3
      27: invokevirtual #7                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      30: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      33: invokespecial #9                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      36: athrow
      37: aload_0
      38: iload_3
      39: putfield      #10                 // Field prefetch:I
      42: aload_0
      43: aload_2
      44: ldc           #11                 // String transform
      46: invokestatic  #12                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      49: checkcast     #13                 // class java/util/function/Function
      52: putfield      #14                 // Field transform:Ljava/util/function/Function;
      55: aload_0
      56: aload         4
      58: ldc           #15                 // String queueSupplier
      60: invokestatic  #12                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      63: checkcast     #16                 // class java/util/function/Supplier
      66: putfield      #17                 // Field queueSupplier:Ljava/util/function/Supplier;
      69: return

  public int getPrefetch();
    Code:
       0: aload_0
       1: getfield      #10                 // Field prefetch:I
       4: ireturn

  public void subscribe(reactor.core.CoreSubscriber<? super R>);
    Code:
       0: new           #18                 // class reactor/core/publisher/FluxPublishMulticast$FluxPublishMulticaster
       3: dup
       4: aload_0
       5: getfield      #10                 // Field prefetch:I
       8: aload_0
       9: getfield      #17                 // Field queueSupplier:Ljava/util/function/Supplier;
      12: aload_1
      13: invokeinterface #19,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      18: invokespecial #20                 // Method reactor/core/publisher/FluxPublishMulticast$FluxPublishMulticaster."<init>":(ILjava/util/function/Supplier;Lreactor/util/context/Context;)V
      21: astore_2
      22: aload_0
      23: getfield      #14                 // Field transform:Ljava/util/function/Function;
      26: aload_2
      27: invokeinterface #21,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      32: ldc           #22                 // String The transform returned a null Publisher
      34: invokestatic  #12                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      37: checkcast     #23                 // class org/reactivestreams/Publisher
      40: astore_3
      41: goto          62
      44: astore        4
      46: aload_1
      47: aload         4
      49: aload_1
      50: invokeinterface #19,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      55: invokestatic  #25                 // Method reactor/core/publisher/Operators.onOperatorError:(Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      58: invokestatic  #26                 // Method reactor/core/publisher/Operators.error:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
      61: return
      62: aload_3
      63: instanceof    #27                 // class reactor/core/Fuseable
      66: ifeq          87
      69: aload_3
      70: new           #28                 // class reactor/core/publisher/FluxPublishMulticast$CancelFuseableMulticaster
      73: dup
      74: aload_1
      75: aload_2
      76: invokespecial #29                 // Method reactor/core/publisher/FluxPublishMulticast$CancelFuseableMulticaster."<init>":(Lreactor/core/CoreSubscriber;Lreactor/core/publisher/FluxPublishMulticast$FluxPublishMulticaster;)V
      79: invokeinterface #30,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
      84: goto          102
      87: aload_3
      88: new           #31                 // class reactor/core/publisher/FluxPublishMulticast$CancelMulticaster
      91: dup
      92: aload_1
      93: aload_2
      94: invokespecial #32                 // Method reactor/core/publisher/FluxPublishMulticast$CancelMulticaster."<init>":(Lreactor/core/CoreSubscriber;Lreactor/core/publisher/FluxPublishMulticast$FluxPublishMulticaster;)V
      97: invokeinterface #30,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
     102: aload_0
     103: getfield      #33                 // Field source:Lreactor/core/publisher/Flux;
     106: aload_2
     107: invokevirtual #34                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
     110: return
    Exception table:
       from    to  target type
          22    41    44   Class java/lang/Throwable
}
