Compiled from "FluxFilterFuseable.java"
final class reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber<T> implements reactor.core.publisher.InnerOperator<T, T>, reactor.core.Fuseable$ConditionalSubscriber<T>, reactor.core.Fuseable$QueueSubscription<T> {
  final reactor.core.Fuseable$ConditionalSubscriber<? super T> actual;

  final java.util.function.Predicate<? super T> predicate;

  reactor.core.Fuseable$QueueSubscription<T> s;

  boolean done;

  int sourceMode;

  reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber(reactor.core.Fuseable$ConditionalSubscriber<? super T>, java.util.function.Predicate<? super T>);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
       9: aload_0
      10: aload_2
      11: putfield      #4                  // Field predicate:Ljava/util/function/Predicate;
      14: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #5                  // Field s:Lreactor/core/Fuseable$QueueSubscription;
       4: aload_1
       5: invokestatic  #6                  // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          29
      11: aload_0
      12: aload_1
      13: checkcast     #7                  // class reactor/core/Fuseable$QueueSubscription
      16: putfield      #5                  // Field s:Lreactor/core/Fuseable$QueueSubscription;
      19: aload_0
      20: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      23: aload_0
      24: invokeinterface #8,  2            // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      29: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #9                  // Field sourceMode:I
       4: iconst_2
       5: if_icmpne     21
       8: aload_0
       9: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      12: aconst_null
      13: invokeinterface #10,  2           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.onNext:(Ljava/lang/Object;)V
      18: goto          107
      21: aload_0
      22: getfield      #11                 // Field done:Z
      25: ifeq          42
      28: aload_1
      29: aload_0
      30: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      33: invokeinterface #12,  1           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.currentContext:()Lreactor/util/context/Context;
      38: invokestatic  #13                 // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      41: return
      42: aload_0
      43: getfield      #4                  // Field predicate:Ljava/util/function/Predicate;
      46: aload_1
      47: invokeinterface #14,  2           // InterfaceMethod java/util/function/Predicate.test:(Ljava/lang/Object;)Z
      52: istore_2
      53: goto          80
      56: astore_3
      57: aload_0
      58: aload_0
      59: getfield      #5                  // Field s:Lreactor/core/Fuseable$QueueSubscription;
      62: aload_3
      63: aload_1
      64: aload_0
      65: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      68: invokeinterface #12,  1           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.currentContext:()Lreactor/util/context/Context;
      73: invokestatic  #16                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      76: invokevirtual #17                 // Method onError:(Ljava/lang/Throwable;)V
      79: return
      80: iload_2
      81: ifeq          97
      84: aload_0
      85: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      88: aload_1
      89: invokeinterface #10,  2           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.onNext:(Ljava/lang/Object;)V
      94: goto          107
      97: aload_0
      98: getfield      #5                  // Field s:Lreactor/core/Fuseable$QueueSubscription;
     101: lconst_1
     102: invokeinterface #18,  3           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.request:(J)V
     107: return
    Exception table:
       from    to  target type
          42    53    56   Class java/lang/Throwable

  public boolean tryOnNext(T);
    Code:
       0: aload_0
       1: getfield      #11                 // Field done:Z
       4: ifeq          22
       7: aload_1
       8: aload_0
       9: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      12: invokeinterface #12,  1           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #13                 // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      20: iconst_0
      21: ireturn
      22: aload_0
      23: getfield      #4                  // Field predicate:Ljava/util/function/Predicate;
      26: aload_1
      27: invokeinterface #14,  2           // InterfaceMethod java/util/function/Predicate.test:(Ljava/lang/Object;)Z
      32: istore_2
      33: goto          61
      36: astore_3
      37: aload_0
      38: aload_0
      39: getfield      #5                  // Field s:Lreactor/core/Fuseable$QueueSubscription;
      42: aload_3
      43: aload_1
      44: aload_0
      45: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      48: invokeinterface #12,  1           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.currentContext:()Lreactor/util/context/Context;
      53: invokestatic  #16                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      56: invokevirtual #17                 // Method onError:(Ljava/lang/Throwable;)V
      59: iconst_0
      60: ireturn
      61: iload_2
      62: ifeq          82
      65: aload_0
      66: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      69: aload_1
      70: invokeinterface #19,  2           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.tryOnNext:(Ljava/lang/Object;)Z
      75: ifeq          82
      78: iconst_1
      79: goto          83
      82: iconst_0
      83: ireturn
    Exception table:
       from    to  target type
          22    33    36   Class java/lang/Throwable

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #11                 // Field done:Z
       4: ifeq          21
       7: aload_1
       8: aload_0
       9: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      12: invokeinterface #12,  1           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #20                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      20: return
      21: aload_0
      22: iconst_1
      23: putfield      #11                 // Field done:Z
      26: aload_0
      27: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      30: aload_1
      31: invokeinterface #21,  2           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.onError:(Ljava/lang/Throwable;)V
      36: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #11                 // Field done:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #11                 // Field done:Z
      13: aload_0
      14: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
      17: invokeinterface #22,  1           // InterfaceMethod reactor/core/Fuseable$ConditionalSubscriber.onComplete:()V
      22: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #23                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #5                  // Field s:Lreactor/core/Fuseable$QueueSubscription;
      11: areturn
      12: aload_1
      13: getstatic     #24                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      16: if_acmpne     27
      19: aload_0
      20: getfield      #11                 // Field done:Z
      23: invokestatic  #25                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      26: areturn
      27: aload_0
      28: aload_1
      29: invokespecial #26                 // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      32: areturn

  public reactor.core.CoreSubscriber<? super T> actual();
    Code:
       0: aload_0
       1: getfield      #3                  // Field actual:Lreactor/core/Fuseable$ConditionalSubscriber;
       4: areturn

  public void request(long);
    Code:
       0: aload_0
       1: getfield      #5                  // Field s:Lreactor/core/Fuseable$QueueSubscription;
       4: lload_1
       5: invokeinterface #18,  3           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.request:(J)V
      10: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #5                  // Field s:Lreactor/core/Fuseable$QueueSubscription;
       4: invokeinterface #27,  1           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.cancel:()V
       9: return

  public T poll();
    Code:
       0: aload_0
       1: getfield      #9                  // Field sourceMode:I
       4: iconst_2
       5: if_icmpne     57
       8: lconst_0
       9: lstore_1
      10: aload_0
      11: getfield      #5                  // Field s:Lreactor/core/Fuseable$QueueSubscription;
      14: invokeinterface #28,  1           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.poll:()Ljava/lang/Object;
      19: astore_3
      20: aload_3
      21: ifnull        37
      24: aload_0
      25: getfield      #4                  // Field predicate:Ljava/util/function/Predicate;
      28: aload_3
      29: invokeinterface #14,  2           // InterfaceMethod java/util/function/Predicate.test:(Ljava/lang/Object;)Z
      34: ifeq          50
      37: lload_1
      38: lconst_0
      39: lcmp
      40: ifeq          48
      43: aload_0
      44: lload_1
      45: invokevirtual #29                 // Method request:(J)V
      48: aload_3
      49: areturn
      50: lload_1
      51: lconst_1
      52: ladd
      53: lstore_1
      54: goto          10
      57: aload_0
      58: getfield      #5                  // Field s:Lreactor/core/Fuseable$QueueSubscription;
      61: invokeinterface #28,  1           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.poll:()Ljava/lang/Object;
      66: astore_1
      67: aload_1
      68: ifnull        84
      71: aload_0
      72: getfield      #4                  // Field predicate:Ljava/util/function/Predicate;
      75: aload_1
      76: invokeinterface #14,  2           // InterfaceMethod java/util/function/Predicate.test:(Ljava/lang/Object;)Z
      81: ifeq          86
      84: aload_1
      85: areturn
      86: goto          57

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #5                  // Field s:Lreactor/core/Fuseable$QueueSubscription;
       4: invokeinterface #30,  1           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.isEmpty:()Z
       9: ireturn

  public void clear();
    Code:
       0: aload_0
       1: getfield      #5                  // Field s:Lreactor/core/Fuseable$QueueSubscription;
       4: invokeinterface #31,  1           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.clear:()V
       9: return

  public int size();
    Code:
       0: aload_0
       1: getfield      #5                  // Field s:Lreactor/core/Fuseable$QueueSubscription;
       4: invokeinterface #32,  1           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.size:()I
       9: ireturn

  public int requestFusion(int);
    Code:
       0: iload_1
       1: iconst_4
       2: iand
       3: ifeq          8
       6: iconst_0
       7: ireturn
       8: aload_0
       9: getfield      #5                  // Field s:Lreactor/core/Fuseable$QueueSubscription;
      12: iload_1
      13: invokeinterface #33,  2           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.requestFusion:(I)I
      18: istore_2
      19: aload_0
      20: iload_2
      21: putfield      #9                  // Field sourceMode:I
      24: iload_2
      25: ireturn
}
