Compiled from "MonoFromFluxOperator.java"
abstract class reactor.core.publisher.MonoFromFluxOperator<I, O> extends reactor.core.publisher.Mono<O> implements reactor.core.Scannable {
  protected final reactor.core.publisher.Flux<? extends I> source;

  protected reactor.core.publisher.MonoFromFluxOperator(reactor.core.publisher.Flux<? extends I>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/Mono."<init>":()V
       4: aload_0
       5: aload_1
       6: invokestatic  #2                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
       9: checkcast     #3                  // class reactor/core/publisher/Flux
      12: putfield      #4                  // Field source:Lreactor/core/publisher/Flux;
      15: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #5                  // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
       4: if_acmpne     13
       7: ldc           #7                  // int 2147483647
       9: invokestatic  #8                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      12: areturn
      13: aload_1
      14: getstatic     #9                  // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
      17: if_acmpne     25
      20: aload_0
      21: getfield      #4                  // Field source:Lreactor/core/publisher/Flux;
      24: areturn
      25: aconst_null
      26: areturn
}
