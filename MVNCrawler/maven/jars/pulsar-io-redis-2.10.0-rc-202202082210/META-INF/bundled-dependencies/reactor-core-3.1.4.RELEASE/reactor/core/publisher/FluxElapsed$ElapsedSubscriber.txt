Compiled from "FluxElapsed.java"
final class reactor.core.publisher.FluxElapsed$ElapsedSubscriber<T> implements reactor.core.publisher.InnerOperator<T, reactor.util.function.Tuple2<java.lang.Long, T>>, reactor.core.Fuseable$QueueSubscription<reactor.util.function.Tuple2<java.lang.Long, T>> {
  final reactor.core.CoreSubscriber<? super reactor.util.function.Tuple2<java.lang.Long, T>> actual;

  final reactor.core.scheduler.Scheduler scheduler;

  org.reactivestreams.Subscription s;

  reactor.core.Fuseable$QueueSubscription<T> qs;

  long lastTime;

  reactor.core.publisher.FluxElapsed$ElapsedSubscriber(reactor.core.CoreSubscriber<? super reactor.util.function.Tuple2<java.lang.Long, T>>, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field scheduler:Lreactor/core/scheduler/Scheduler;
      14: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #4                  // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #5                  // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #6                  // Field reactor/core/Scannable$Attr.RUN_ON:Lreactor/core/Scannable$Attr;
      16: if_acmpne     24
      19: aload_0
      20: getfield      #3                  // Field scheduler:Lreactor/core/scheduler/Scheduler;
      23: areturn
      24: aload_0
      25: aload_1
      26: invokespecial #7                  // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      29: areturn

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #5                  // Field s:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #8                  // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          42
      11: aload_0
      12: aload_0
      13: getfield      #3                  // Field scheduler:Lreactor/core/scheduler/Scheduler;
      16: getstatic     #9                  // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      19: invokeinterface #10,  2           // InterfaceMethod reactor/core/scheduler/Scheduler.now:(Ljava/util/concurrent/TimeUnit;)J
      24: putfield      #11                 // Field lastTime:J
      27: aload_0
      28: aload_1
      29: putfield      #5                  // Field s:Lorg/reactivestreams/Subscription;
      32: aload_0
      33: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      36: aload_0
      37: invokeinterface #12,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      42: return

  public reactor.core.CoreSubscriber<? super reactor.util.function.Tuple2<java.lang.Long, T>> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public void onNext(T);
    Code:
       0: aload_1
       1: ifnonnull     15
       4: aload_0
       5: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       8: aconst_null
       9: invokeinterface #13,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      14: return
      15: aload_0
      16: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      19: aload_0
      20: aload_1
      21: invokevirtual #14                 // Method snapshot:(Ljava/lang/Object;)Lreactor/util/function/Tuple2;
      24: invokeinterface #13,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      29: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: aload_1
       5: invokeinterface #15,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      10: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: invokeinterface #16,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
       9: return

  public void request(long);
    Code:
       0: aload_0
       1: getfield      #5                  // Field s:Lorg/reactivestreams/Subscription;
       4: lload_1
       5: invokeinterface #17,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      10: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #5                  // Field s:Lorg/reactivestreams/Subscription;
       4: invokeinterface #18,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
       9: return

  public int requestFusion(int);
    Code:
       0: aload_0
       1: getfield      #5                  // Field s:Lorg/reactivestreams/Subscription;
       4: invokestatic  #19                 // Method reactor/core/publisher/Operators.as:(Lorg/reactivestreams/Subscription;)Lreactor/core/Fuseable$QueueSubscription;
       7: astore_2
       8: aload_2
       9: ifnull        25
      12: aload_0
      13: aload_2
      14: putfield      #20                 // Field qs:Lreactor/core/Fuseable$QueueSubscription;
      17: aload_2
      18: iload_1
      19: invokeinterface #21,  2           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.requestFusion:(I)I
      24: ireturn
      25: iconst_0
      26: ireturn

  reactor.util.function.Tuple2<java.lang.Long, T> snapshot(T);
    Code:
       0: aload_0
       1: getfield      #3                  // Field scheduler:Lreactor/core/scheduler/Scheduler;
       4: getstatic     #9                  // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
       7: invokeinterface #10,  2           // InterfaceMethod reactor/core/scheduler/Scheduler.now:(Ljava/util/concurrent/TimeUnit;)J
      12: lstore_2
      13: aload_0
      14: getfield      #11                 // Field lastTime:J
      17: lstore        4
      19: aload_0
      20: lload_2
      21: putfield      #11                 // Field lastTime:J
      24: lload_2
      25: lload         4
      27: lsub
      28: lstore        6
      30: lload         6
      32: invokestatic  #23                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      35: aload_1
      36: invokestatic  #24                 // Method reactor/util/function/Tuples.of:(Ljava/lang/Object;Ljava/lang/Object;)Lreactor/util/function/Tuple2;
      39: areturn

  public reactor.util.function.Tuple2<java.lang.Long, T> poll();
    Code:
       0: aload_0
       1: getfield      #20                 // Field qs:Lreactor/core/Fuseable$QueueSubscription;
       4: invokeinterface #25,  1           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.poll:()Ljava/lang/Object;
       9: astore_1
      10: aload_1
      11: ifnull        20
      14: aload_0
      15: aload_1
      16: invokevirtual #14                 // Method snapshot:(Ljava/lang/Object;)Lreactor/util/function/Tuple2;
      19: areturn
      20: aconst_null
      21: areturn

  public int size();
    Code:
       0: aload_0
       1: getfield      #20                 // Field qs:Lreactor/core/Fuseable$QueueSubscription;
       4: invokeinterface #26,  1           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.size:()I
       9: ireturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #20                 // Field qs:Lreactor/core/Fuseable$QueueSubscription;
       4: invokeinterface #27,  1           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.isEmpty:()Z
       9: ireturn

  public void clear();
    Code:
       0: aload_0
       1: getfield      #20                 // Field qs:Lreactor/core/Fuseable$QueueSubscription;
       4: invokeinterface #28,  1           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.clear:()V
       9: return

  public java.lang.Object poll();
    Code:
       0: aload_0
       1: invokevirtual #29                 // Method poll:()Lreactor/util/function/Tuple2;
       4: areturn
}
