Compiled from "ParallelFluxName.java"
final class reactor.core.publisher.ParallelFluxName<T> extends reactor.core.publisher.ParallelFlux<T> implements reactor.core.Scannable {
  final reactor.core.publisher.ParallelFlux<T> source;

  final java.lang.String name;

  final java.util.Set<reactor.util.function.Tuple2<java.lang.String, java.lang.String>> tags;

  static <T> reactor.core.publisher.ParallelFlux<T> createOrAppend(reactor.core.publisher.ParallelFlux<T>, java.lang.String);
    Code:
       0: aload_1
       1: ldc           #1                  // String name
       3: invokestatic  #2                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: instanceof    #3                  // class reactor/core/publisher/ParallelFluxName
      11: ifeq          36
      14: aload_0
      15: checkcast     #3                  // class reactor/core/publisher/ParallelFluxName
      18: astore_2
      19: new           #3                  // class reactor/core/publisher/ParallelFluxName
      22: dup
      23: aload_2
      24: getfield      #4                  // Field source:Lreactor/core/publisher/ParallelFlux;
      27: aload_1
      28: aload_2
      29: getfield      #5                  // Field tags:Ljava/util/Set;
      32: invokespecial #6                  // Method "<init>":(Lreactor/core/publisher/ParallelFlux;Ljava/lang/String;Ljava/util/Set;)V
      35: areturn
      36: new           #3                  // class reactor/core/publisher/ParallelFluxName
      39: dup
      40: aload_0
      41: aload_1
      42: aconst_null
      43: invokespecial #6                  // Method "<init>":(Lreactor/core/publisher/ParallelFlux;Ljava/lang/String;Ljava/util/Set;)V
      46: areturn

  static <T> reactor.core.publisher.ParallelFlux<T> createOrAppend(reactor.core.publisher.ParallelFlux<T>, java.lang.String, java.lang.String);
    Code:
       0: aload_1
       1: ldc           #7                  // String tagName
       3: invokestatic  #2                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_2
       8: ldc           #8                  // String tagValue
      10: invokestatic  #2                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      13: pop
      14: aload_1
      15: aload_2
      16: invokestatic  #9                  // Method reactor/util/function/Tuples.of:(Ljava/lang/Object;Ljava/lang/Object;)Lreactor/util/function/Tuple2;
      19: invokestatic  #10                 // Method java/util/Collections.singleton:(Ljava/lang/Object;)Ljava/util/Set;
      22: astore_3
      23: aload_0
      24: instanceof    #3                  // class reactor/core/publisher/ParallelFluxName
      27: ifeq          84
      30: aload_0
      31: checkcast     #3                  // class reactor/core/publisher/ParallelFluxName
      34: astore        4
      36: aload         4
      38: getfield      #5                  // Field tags:Ljava/util/Set;
      41: ifnull        65
      44: new           #11                 // class java/util/HashSet
      47: dup
      48: aload_3
      49: invokespecial #12                 // Method java/util/HashSet."<init>":(Ljava/util/Collection;)V
      52: astore_3
      53: aload_3
      54: aload         4
      56: getfield      #5                  // Field tags:Ljava/util/Set;
      59: invokeinterface #13,  2           // InterfaceMethod java/util/Set.addAll:(Ljava/util/Collection;)Z
      64: pop
      65: new           #3                  // class reactor/core/publisher/ParallelFluxName
      68: dup
      69: aload         4
      71: getfield      #4                  // Field source:Lreactor/core/publisher/ParallelFlux;
      74: aload         4
      76: getfield      #14                 // Field name:Ljava/lang/String;
      79: aload_3
      80: invokespecial #6                  // Method "<init>":(Lreactor/core/publisher/ParallelFlux;Ljava/lang/String;Ljava/util/Set;)V
      83: areturn
      84: new           #3                  // class reactor/core/publisher/ParallelFluxName
      87: dup
      88: aload_0
      89: aconst_null
      90: aload_3
      91: invokespecial #6                  // Method "<init>":(Lreactor/core/publisher/ParallelFlux;Ljava/lang/String;Ljava/util/Set;)V
      94: areturn

  reactor.core.publisher.ParallelFluxName(reactor.core.publisher.ParallelFlux<T>, java.lang.String, java.util.Set<reactor.util.function.Tuple2<java.lang.String, java.lang.String>>);
    Code:
       0: aload_0
       1: invokespecial #15                 // Method reactor/core/publisher/ParallelFlux."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #4                  // Field source:Lreactor/core/publisher/ParallelFlux;
       9: aload_0
      10: aload_2
      11: putfield      #14                 // Field name:Ljava/lang/String;
      14: aload_0
      15: aload_3
      16: putfield      #5                  // Field tags:Ljava/util/Set;
      19: return

  public int getPrefetch();
    Code:
       0: aload_0
       1: getfield      #4                  // Field source:Lreactor/core/publisher/ParallelFlux;
       4: invokevirtual #16                 // Method reactor/core/publisher/ParallelFlux.getPrefetch:()I
       7: ireturn

  public int parallelism();
    Code:
       0: aload_0
       1: getfield      #4                  // Field source:Lreactor/core/publisher/ParallelFlux;
       4: invokevirtual #17                 // Method reactor/core/publisher/ParallelFlux.parallelism:()I
       7: ireturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #18                 // Field reactor/core/Scannable$Attr.NAME:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #14                 // Field name:Ljava/lang/String;
      11: areturn
      12: aload_1
      13: getstatic     #19                 // Field reactor/core/Scannable$Attr.TAGS:Lreactor/core/Scannable$Attr;
      16: if_acmpne     36
      19: aload_0
      20: getfield      #5                  // Field tags:Ljava/util/Set;
      23: ifnull        36
      26: aload_0
      27: getfield      #5                  // Field tags:Ljava/util/Set;
      30: invokeinterface #20,  1           // InterfaceMethod java/util/Set.stream:()Ljava/util/stream/Stream;
      35: areturn
      36: aload_1
      37: getstatic     #21                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
      40: if_acmpne     48
      43: aload_0
      44: getfield      #4                  // Field source:Lreactor/core/publisher/ParallelFlux;
      47: areturn
      48: aload_1
      49: getstatic     #22                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      52: if_acmpne     63
      55: aload_0
      56: invokevirtual #23                 // Method getPrefetch:()I
      59: invokestatic  #24                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      62: areturn
      63: aconst_null
      64: areturn

  public void subscribe(reactor.core.CoreSubscriber<? super T>[]);
    Code:
       0: aload_0
       1: getfield      #4                  // Field source:Lreactor/core/publisher/ParallelFlux;
       4: aload_1
       5: invokevirtual #25                 // Method reactor/core/publisher/ParallelFlux.subscribe:([Lreactor/core/CoreSubscriber;)V
       8: return
}
