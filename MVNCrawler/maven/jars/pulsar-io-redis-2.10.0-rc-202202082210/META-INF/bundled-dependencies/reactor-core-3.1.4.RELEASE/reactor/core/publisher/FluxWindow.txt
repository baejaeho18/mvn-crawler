Compiled from "FluxWindow.java"
final class reactor.core.publisher.FluxWindow<T> extends reactor.core.publisher.FluxOperator<T, reactor.core.publisher.Flux<T>> {
  final int size;

  final int skip;

  final java.util.function.Supplier<? extends java.util.Queue<T>> processorQueueSupplier;

  final java.util.function.Supplier<? extends java.util.Queue<reactor.core.publisher.UnicastProcessor<T>>> overflowQueueSupplier;

  reactor.core.publisher.FluxWindow(reactor.core.publisher.Flux<? extends T>, int, java.util.function.Supplier<? extends java.util.Queue<T>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxOperator."<init>":(Lreactor/core/publisher/Flux;)V
       5: iload_2
       6: ifgt          36
       9: new           #2                  // class java/lang/IllegalArgumentException
      12: dup
      13: new           #3                  // class java/lang/StringBuilder
      16: dup
      17: invokespecial #4                  // Method java/lang/StringBuilder."<init>":()V
      20: ldc           #5                  // String size > 0 required but it was
      22: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      25: iload_2
      26: invokevirtual #7                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      29: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      32: invokespecial #9                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      35: athrow
      36: aload_0
      37: iload_2
      38: putfield      #10                 // Field size:I
      41: aload_0
      42: iload_2
      43: putfield      #11                 // Field skip:I
      46: aload_0
      47: aload_3
      48: ldc           #12                 // String processorQueueSupplier
      50: invokestatic  #13                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      53: checkcast     #14                 // class java/util/function/Supplier
      56: putfield      #15                 // Field processorQueueSupplier:Ljava/util/function/Supplier;
      59: aload_0
      60: aconst_null
      61: putfield      #16                 // Field overflowQueueSupplier:Ljava/util/function/Supplier;
      64: return

  reactor.core.publisher.FluxWindow(reactor.core.publisher.Flux<? extends T>, int, int, java.util.function.Supplier<? extends java.util.Queue<T>>, java.util.function.Supplier<? extends java.util.Queue<reactor.core.publisher.UnicastProcessor<T>>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxOperator."<init>":(Lreactor/core/publisher/Flux;)V
       5: iload_2
       6: ifgt          36
       9: new           #2                  // class java/lang/IllegalArgumentException
      12: dup
      13: new           #3                  // class java/lang/StringBuilder
      16: dup
      17: invokespecial #4                  // Method java/lang/StringBuilder."<init>":()V
      20: ldc           #5                  // String size > 0 required but it was
      22: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      25: iload_2
      26: invokevirtual #7                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      29: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      32: invokespecial #9                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      35: athrow
      36: iload_3
      37: ifgt          67
      40: new           #2                  // class java/lang/IllegalArgumentException
      43: dup
      44: new           #3                  // class java/lang/StringBuilder
      47: dup
      48: invokespecial #4                  // Method java/lang/StringBuilder."<init>":()V
      51: ldc           #17                 // String skip > 0 required but it was
      53: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      56: iload_3
      57: invokevirtual #7                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      60: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      63: invokespecial #9                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      66: athrow
      67: aload_0
      68: iload_2
      69: putfield      #10                 // Field size:I
      72: aload_0
      73: iload_3
      74: putfield      #11                 // Field skip:I
      77: aload_0
      78: aload         4
      80: ldc           #12                 // String processorQueueSupplier
      82: invokestatic  #13                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      85: checkcast     #14                 // class java/util/function/Supplier
      88: putfield      #15                 // Field processorQueueSupplier:Ljava/util/function/Supplier;
      91: aload_0
      92: aload         5
      94: ldc           #18                 // String overflowQueueSupplier
      96: invokestatic  #13                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      99: checkcast     #14                 // class java/util/function/Supplier
     102: putfield      #16                 // Field overflowQueueSupplier:Ljava/util/function/Supplier;
     105: return

  public void subscribe(reactor.core.CoreSubscriber<? super reactor.core.publisher.Flux<T>>);
    Code:
       0: aload_0
       1: getfield      #11                 // Field skip:I
       4: aload_0
       5: getfield      #10                 // Field size:I
       8: if_icmpne     37
      11: aload_0
      12: getfield      #19                 // Field source:Lreactor/core/publisher/Flux;
      15: new           #20                 // class reactor/core/publisher/FluxWindow$WindowExactSubscriber
      18: dup
      19: aload_1
      20: aload_0
      21: getfield      #10                 // Field size:I
      24: aload_0
      25: getfield      #15                 // Field processorQueueSupplier:Ljava/util/function/Supplier;
      28: invokespecial #21                 // Method reactor/core/publisher/FluxWindow$WindowExactSubscriber."<init>":(Lreactor/core/CoreSubscriber;ILjava/util/function/Supplier;)V
      31: invokevirtual #22                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      34: goto          117
      37: aload_0
      38: getfield      #11                 // Field skip:I
      41: aload_0
      42: getfield      #10                 // Field size:I
      45: if_icmple     78
      48: aload_0
      49: getfield      #19                 // Field source:Lreactor/core/publisher/Flux;
      52: new           #23                 // class reactor/core/publisher/FluxWindow$WindowSkipSubscriber
      55: dup
      56: aload_1
      57: aload_0
      58: getfield      #10                 // Field size:I
      61: aload_0
      62: getfield      #11                 // Field skip:I
      65: aload_0
      66: getfield      #15                 // Field processorQueueSupplier:Ljava/util/function/Supplier;
      69: invokespecial #24                 // Method reactor/core/publisher/FluxWindow$WindowSkipSubscriber."<init>":(Lreactor/core/CoreSubscriber;IILjava/util/function/Supplier;)V
      72: invokevirtual #22                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      75: goto          117
      78: aload_0
      79: getfield      #19                 // Field source:Lreactor/core/publisher/Flux;
      82: new           #25                 // class reactor/core/publisher/FluxWindow$WindowOverlapSubscriber
      85: dup
      86: aload_1
      87: aload_0
      88: getfield      #10                 // Field size:I
      91: aload_0
      92: getfield      #11                 // Field skip:I
      95: aload_0
      96: getfield      #15                 // Field processorQueueSupplier:Ljava/util/function/Supplier;
      99: aload_0
     100: getfield      #16                 // Field overflowQueueSupplier:Ljava/util/function/Supplier;
     103: invokeinterface #26,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
     108: checkcast     #27                 // class java/util/Queue
     111: invokespecial #28                 // Method reactor/core/publisher/FluxWindow$WindowOverlapSubscriber."<init>":(Lreactor/core/CoreSubscriber;IILjava/util/function/Supplier;Ljava/util/Queue;)V
     114: invokevirtual #22                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
     117: return
}
