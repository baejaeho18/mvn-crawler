Compiled from "FluxWindowWhen.java"
final class reactor.core.publisher.FluxWindowWhen$WindowWhenCloseSubscriber<T, V> implements reactor.core.Disposable, org.reactivestreams.Subscriber<V> {
  volatile org.reactivestreams.Subscription subscription;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxWindowWhen$WindowWhenCloseSubscriber, org.reactivestreams.Subscription> SUBSCRIPTION;

  final reactor.core.publisher.FluxWindowWhen$WindowWhenMainSubscriber<T, ?, V> parent;

  final reactor.core.publisher.UnicastProcessor<T> w;

  boolean done;

  reactor.core.publisher.FluxWindowWhen$WindowWhenCloseSubscriber(reactor.core.publisher.FluxWindowWhen$WindowWhenMainSubscriber<T, ?, V>, reactor.core.publisher.UnicastProcessor<T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field parent:Lreactor/core/publisher/FluxWindowWhen$WindowWhenMainSubscriber;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field w:Lreactor/core/publisher/UnicastProcessor;
      14: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: getstatic     #4                  // Field SUBSCRIPTION:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #5                  // Method reactor/core/publisher/Operators.setOnce:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          23
      11: aload_0
      12: getfield      #6                  // Field subscription:Lorg/reactivestreams/Subscription;
      15: ldc2_w        #8                  // long 9223372036854775807l
      18: invokeinterface #10,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      23: return

  public void dispose();
    Code:
       0: getstatic     #4                  // Field SUBSCRIPTION:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokestatic  #11                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
       7: pop
       8: return

  public boolean isDisposed();
    Code:
       0: aload_0
       1: getfield      #6                  // Field subscription:Lorg/reactivestreams/Subscription;
       4: invokestatic  #12                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
       7: if_acmpne     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public void onNext(V);
    Code:
       0: aload_0
       1: getfield      #13                 // Field done:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #13                 // Field done:Z
      13: aload_0
      14: invokevirtual #14                 // Method dispose:()V
      17: aload_0
      18: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxWindowWhen$WindowWhenMainSubscriber;
      21: aload_0
      22: invokevirtual #15                 // Method reactor/core/publisher/FluxWindowWhen$WindowWhenMainSubscriber.close:(Lreactor/core/publisher/FluxWindowWhen$WindowWhenCloseSubscriber;)V
      25: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #13                 // Field done:Z
       4: ifeq          24
       7: aload_1
       8: aload_0
       9: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxWindowWhen$WindowWhenMainSubscriber;
      12: getfield      #16                 // Field reactor/core/publisher/FluxWindowWhen$WindowWhenMainSubscriber.actual:Lreactor/core/CoreSubscriber;
      15: invokeinterface #17,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      20: invokestatic  #18                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      23: return
      24: aload_0
      25: iconst_1
      26: putfield      #13                 // Field done:Z
      29: aload_0
      30: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxWindowWhen$WindowWhenMainSubscriber;
      33: aload_1
      34: invokevirtual #19                 // Method reactor/core/publisher/FluxWindowWhen$WindowWhenMainSubscriber.error:(Ljava/lang/Throwable;)V
      37: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #13                 // Field done:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #13                 // Field done:Z
      13: aload_0
      14: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxWindowWhen$WindowWhenMainSubscriber;
      17: aload_0
      18: invokevirtual #15                 // Method reactor/core/publisher/FluxWindowWhen$WindowWhenMainSubscriber.close:(Lreactor/core/publisher/FluxWindowWhen$WindowWhenCloseSubscriber;)V
      21: return

  static {};
    Code:
       0: ldc           #20                 // class reactor/core/publisher/FluxWindowWhen$WindowWhenCloseSubscriber
       2: ldc           #21                 // class org/reactivestreams/Subscription
       4: ldc           #22                 // String subscription
       6: invokestatic  #23                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #4                  // Field SUBSCRIPTION:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: return
}
