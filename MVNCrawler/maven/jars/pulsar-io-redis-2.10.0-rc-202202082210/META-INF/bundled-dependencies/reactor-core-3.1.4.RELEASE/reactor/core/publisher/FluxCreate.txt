Compiled from "FluxCreate.java"
final class reactor.core.publisher.FluxCreate<T> extends reactor.core.publisher.Flux<T> {
  final java.util.function.Consumer<? super reactor.core.publisher.FluxSink<T>> source;

  final reactor.core.publisher.FluxSink$OverflowStrategy backpressure;

  final reactor.core.publisher.FluxCreate$CreateMode createMode;

  reactor.core.publisher.FluxCreate(java.util.function.Consumer<? super reactor.core.publisher.FluxSink<T>>, reactor.core.publisher.FluxSink$OverflowStrategy, reactor.core.publisher.FluxCreate$CreateMode);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/Flux."<init>":()V
       4: aload_0
       5: aload_1
       6: ldc           #2                  // String source
       8: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      11: checkcast     #4                  // class java/util/function/Consumer
      14: putfield      #5                  // Field source:Ljava/util/function/Consumer;
      17: aload_0
      18: aload_2
      19: ldc           #6                  // String backpressure
      21: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      24: checkcast     #7                  // class reactor/core/publisher/FluxSink$OverflowStrategy
      27: putfield      #8                  // Field backpressure:Lreactor/core/publisher/FluxSink$OverflowStrategy;
      30: aload_0
      31: aload_3
      32: putfield      #9                  // Field createMode:Lreactor/core/publisher/FluxCreate$CreateMode;
      35: return

  static <T> reactor.core.publisher.FluxCreate$BaseSink<T> createSink(reactor.core.CoreSubscriber<? super T>, reactor.core.publisher.FluxSink$OverflowStrategy);
    Code:
       0: getstatic     #10                 // Field reactor/core/publisher/FluxCreate$1.$SwitchMap$reactor$core$publisher$FluxSink$OverflowStrategy:[I
       3: aload_1
       4: invokevirtual #11                 // Method reactor/core/publisher/FluxSink$OverflowStrategy.ordinal:()I
       7: iaload
       8: tableswitch   { // 1 to 4
                     1: 40
                     2: 49
                     3: 58
                     4: 67
               default: 76
          }
      40: new           #12                 // class reactor/core/publisher/FluxCreate$IgnoreSink
      43: dup
      44: aload_0
      45: invokespecial #13                 // Method reactor/core/publisher/FluxCreate$IgnoreSink."<init>":(Lreactor/core/CoreSubscriber;)V
      48: areturn
      49: new           #14                 // class reactor/core/publisher/FluxCreate$ErrorAsyncSink
      52: dup
      53: aload_0
      54: invokespecial #15                 // Method reactor/core/publisher/FluxCreate$ErrorAsyncSink."<init>":(Lreactor/core/CoreSubscriber;)V
      57: areturn
      58: new           #16                 // class reactor/core/publisher/FluxCreate$DropAsyncSink
      61: dup
      62: aload_0
      63: invokespecial #17                 // Method reactor/core/publisher/FluxCreate$DropAsyncSink."<init>":(Lreactor/core/CoreSubscriber;)V
      66: areturn
      67: new           #18                 // class reactor/core/publisher/FluxCreate$LatestAsyncSink
      70: dup
      71: aload_0
      72: invokespecial #19                 // Method reactor/core/publisher/FluxCreate$LatestAsyncSink."<init>":(Lreactor/core/CoreSubscriber;)V
      75: areturn
      76: new           #20                 // class reactor/core/publisher/FluxCreate$BufferAsyncSink
      79: dup
      80: aload_0
      81: getstatic     #21                 // Field reactor/util/concurrent/Queues.SMALL_BUFFER_SIZE:I
      84: invokespecial #22                 // Method reactor/core/publisher/FluxCreate$BufferAsyncSink."<init>":(Lreactor/core/CoreSubscriber;I)V
      87: areturn

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #8                  // Field backpressure:Lreactor/core/publisher/FluxSink$OverflowStrategy;
       5: invokestatic  #23                 // Method createSink:(Lreactor/core/CoreSubscriber;Lreactor/core/publisher/FluxSink$OverflowStrategy;)Lreactor/core/publisher/FluxCreate$BaseSink;
       8: astore_2
       9: aload_1
      10: aload_2
      11: invokeinterface #24,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      16: aload_0
      17: getfield      #5                  // Field source:Ljava/util/function/Consumer;
      20: aload_0
      21: getfield      #9                  // Field createMode:Lreactor/core/publisher/FluxCreate$CreateMode;
      24: getstatic     #25                 // Field reactor/core/publisher/FluxCreate$CreateMode.PUSH_PULL:Lreactor/core/publisher/FluxCreate$CreateMode;
      27: if_acmpne     41
      30: new           #26                 // class reactor/core/publisher/FluxCreate$SerializedSink
      33: dup
      34: aload_2
      35: invokespecial #27                 // Method reactor/core/publisher/FluxCreate$SerializedSink."<init>":(Lreactor/core/publisher/FluxCreate$BaseSink;)V
      38: goto          42
      41: aload_2
      42: invokeinterface #28,  2           // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
      47: goto          69
      50: astore_3
      51: aload_3
      52: invokestatic  #30                 // Method reactor/core/Exceptions.throwIfFatal:(Ljava/lang/Throwable;)V
      55: aload_2
      56: aload_3
      57: aload_1
      58: invokeinterface #31,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      63: invokestatic  #32                 // Method reactor/core/publisher/Operators.onOperatorError:(Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      66: invokevirtual #33                 // Method reactor/core/publisher/FluxCreate$BaseSink.error:(Ljava/lang/Throwable;)V
      69: return
    Exception table:
       from    to  target type
          16    47    50   Class java/lang/Throwable
}
