Compiled from "FluxSubscribeOnCallable.java"
final class reactor.core.publisher.FluxSubscribeOnCallable$CallableSubscribeOnSubscription<T> implements reactor.core.Fuseable$QueueSubscription<T>, reactor.core.publisher.InnerProducer<T>, java.lang.Runnable {
  final reactor.core.CoreSubscriber<? super T> actual;

  final java.util.concurrent.Callable<? extends T> callable;

  final reactor.core.scheduler.Scheduler scheduler;

  volatile int state;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxSubscribeOnCallable$CallableSubscribeOnSubscription> STATE;

  T value;

  static final int NO_REQUEST_HAS_VALUE;

  static final int HAS_REQUEST_NO_VALUE;

  static final int HAS_REQUEST_HAS_VALUE;

  static final int HAS_CANCELLED;

  int fusionState;

  static final int NO_VALUE;

  static final int HAS_VALUE;

  static final int COMPLETE;

  volatile reactor.core.Disposable mainFuture;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxSubscribeOnCallable$CallableSubscribeOnSubscription, reactor.core.Disposable> MAIN_FUTURE;

  volatile reactor.core.Disposable requestFuture;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxSubscribeOnCallable$CallableSubscribeOnSubscription, reactor.core.Disposable> REQUEST_FUTURE;

  reactor.core.publisher.FluxSubscribeOnCallable$CallableSubscribeOnSubscription(reactor.core.CoreSubscriber<? super T>, java.util.concurrent.Callable<? extends T>, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: aload_2
      11: putfield      #4                  // Field callable:Ljava/util/concurrent/Callable;
      14: aload_0
      15: aload_3
      16: putfield      #5                  // Field scheduler:Lreactor/core/scheduler/Scheduler;
      19: return

  public reactor.core.CoreSubscriber<? super T> actual();
    Code:
       0: aload_0
       1: getfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #6                  // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
       4: if_acmpne     24
       7: aload_0
       8: getfield      #7                  // Field state:I
      11: iconst_4
      12: if_icmpne     19
      15: iconst_1
      16: goto          20
      19: iconst_0
      20: invokestatic  #9                  // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      23: areturn
      24: aload_1
      25: getstatic     #10                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      28: if_acmpne     47
      31: aload_0
      32: getfield      #11                 // Field value:Ljava/lang/Object;
      35: ifnull        42
      38: iconst_1
      39: goto          43
      42: iconst_0
      43: invokestatic  #12                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      46: areturn
      47: aload_1
      48: getstatic     #13                 // Field reactor/core/Scannable$Attr.RUN_ON:Lreactor/core/Scannable$Attr;
      51: if_acmpne     59
      54: aload_0
      55: getfield      #5                  // Field scheduler:Lreactor/core/scheduler/Scheduler;
      58: areturn
      59: aload_0
      60: aload_1
      61: invokespecial #14                 // InterfaceMethod reactor/core/publisher/InnerProducer.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      64: areturn

  public void cancel();
    Code:
       0: aload_0
       1: iconst_4
       2: putfield      #7                  // Field state:I
       5: aload_0
       6: iconst_3
       7: putfield      #15                 // Field fusionState:I
      10: aload_0
      11: getfield      #16                 // Field mainFuture:Lreactor/core/Disposable;
      14: astore_1
      15: aload_1
      16: getstatic     #17                 // Field reactor/core/publisher/OperatorDisposables.DISPOSED:Lreactor/core/Disposable;
      19: if_acmpeq     53
      22: getstatic     #18                 // Field MAIN_FUTURE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      25: aload_0
      26: getstatic     #17                 // Field reactor/core/publisher/OperatorDisposables.DISPOSED:Lreactor/core/Disposable;
      29: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      32: checkcast     #20                 // class reactor/core/Disposable
      35: astore_1
      36: aload_1
      37: ifnull        53
      40: aload_1
      41: getstatic     #17                 // Field reactor/core/publisher/OperatorDisposables.DISPOSED:Lreactor/core/Disposable;
      44: if_acmpeq     53
      47: aload_1
      48: invokeinterface #21,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
      53: aload_0
      54: getfield      #22                 // Field requestFuture:Lreactor/core/Disposable;
      57: astore_1
      58: aload_1
      59: getstatic     #17                 // Field reactor/core/publisher/OperatorDisposables.DISPOSED:Lreactor/core/Disposable;
      62: if_acmpeq     96
      65: getstatic     #23                 // Field REQUEST_FUTURE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      68: aload_0
      69: getstatic     #17                 // Field reactor/core/publisher/OperatorDisposables.DISPOSED:Lreactor/core/Disposable;
      72: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      75: checkcast     #20                 // class reactor/core/Disposable
      78: astore_1
      79: aload_1
      80: ifnull        96
      83: aload_1
      84: getstatic     #17                 // Field reactor/core/publisher/OperatorDisposables.DISPOSED:Lreactor/core/Disposable;
      87: if_acmpeq     96
      90: aload_1
      91: invokeinterface #21,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
      96: return

  public void clear();
    Code:
       0: aload_0
       1: aconst_null
       2: putfield      #11                 // Field value:Ljava/lang/Object;
       5: aload_0
       6: iconst_3
       7: putfield      #15                 // Field fusionState:I
      10: return

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #15                 // Field fusionState:I
       4: iconst_3
       5: if_icmpne     12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  public T poll();
    Code:
       0: aload_0
       1: getfield      #15                 // Field fusionState:I
       4: iconst_2
       5: if_icmpne     18
       8: aload_0
       9: iconst_3
      10: putfield      #15                 // Field fusionState:I
      13: aload_0
      14: getfield      #11                 // Field value:Ljava/lang/Object;
      17: areturn
      18: aconst_null
      19: areturn

  public int requestFusion(int);
    Code:
       0: iload_1
       1: iconst_2
       2: iand
       3: ifeq          19
       6: iload_1
       7: iconst_4
       8: iand
       9: ifne          19
      12: aload_0
      13: iconst_1
      14: putfield      #15                 // Field fusionState:I
      17: iconst_2
      18: ireturn
      19: iconst_0
      20: ireturn

  public int size();
    Code:
       0: aload_0
       1: invokevirtual #24                 // Method isEmpty:()Z
       4: ifeq          11
       7: iconst_0
       8: goto          12
      11: iconst_1
      12: ireturn

  void setMainFuture(reactor.core.Disposable);
    Code:
       0: aload_0
       1: getfield      #16                 // Field mainFuture:Lreactor/core/Disposable;
       4: astore_2
       5: aload_2
       6: getstatic     #17                 // Field reactor/core/publisher/OperatorDisposables.DISPOSED:Lreactor/core/Disposable;
       9: if_acmpne     19
      12: aload_1
      13: invokeinterface #21,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
      18: return
      19: getstatic     #18                 // Field MAIN_FUTURE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      22: aload_0
      23: aload_2
      24: aload_1
      25: invokevirtual #25                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      28: ifeq          32
      31: return
      32: goto          0

  void setRequestFuture(reactor.core.Disposable);
    Code:
       0: aload_0
       1: getfield      #22                 // Field requestFuture:Lreactor/core/Disposable;
       4: astore_2
       5: aload_2
       6: getstatic     #17                 // Field reactor/core/publisher/OperatorDisposables.DISPOSED:Lreactor/core/Disposable;
       9: if_acmpne     19
      12: aload_1
      13: invokeinterface #21,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
      18: return
      19: getstatic     #23                 // Field REQUEST_FUTURE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      22: aload_0
      23: aload_2
      24: aload_1
      25: invokevirtual #25                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      28: ifeq          32
      31: return
      32: goto          0

  public void run();
    Code:
       0: aload_0
       1: getfield      #4                  // Field callable:Ljava/util/concurrent/Callable;
       4: invokeinterface #26,  1           // InterfaceMethod java/util/concurrent/Callable.call:()Ljava/lang/Object;
       9: astore_1
      10: goto          38
      13: astore_2
      14: aload_0
      15: getfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
      18: aload_0
      19: aload_2
      20: aload_0
      21: getfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
      24: invokeinterface #28,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      29: invokestatic  #29                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      32: invokeinterface #30,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      37: return
      38: aload_1
      39: ifnonnull     57
      42: aload_0
      43: iconst_3
      44: putfield      #15                 // Field fusionState:I
      47: aload_0
      48: getfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
      51: invokeinterface #31,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      56: return
      57: aload_0
      58: getfield      #7                  // Field state:I
      61: istore_2
      62: iload_2
      63: iconst_4
      64: if_icmpeq     77
      67: iload_2
      68: iconst_3
      69: if_icmpeq     77
      72: iload_2
      73: iconst_1
      74: if_icmpne     78
      77: return
      78: iload_2
      79: iconst_2
      80: if_icmpne     129
      83: aload_0
      84: getfield      #15                 // Field fusionState:I
      87: iconst_1
      88: if_icmpne     101
      91: aload_0
      92: aload_1
      93: putfield      #11                 // Field value:Ljava/lang/Object;
      96: aload_0
      97: iconst_2
      98: putfield      #15                 // Field fusionState:I
     101: aload_0
     102: getfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
     105: aload_1
     106: invokeinterface #32,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
     111: aload_0
     112: getfield      #7                  // Field state:I
     115: iconst_4
     116: if_icmpeq     128
     119: aload_0
     120: getfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
     123: invokeinterface #31,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
     128: return
     129: aload_0
     130: aload_1
     131: putfield      #11                 // Field value:Ljava/lang/Object;
     134: getstatic     #33                 // Field STATE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     137: aload_0
     138: iload_2
     139: iconst_1
     140: invokevirtual #34                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
     143: ifeq          147
     146: return
     147: goto          57
    Exception table:
       from    to  target type
           0    10    13   Class java/lang/Throwable

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #35                 // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          113
       7: aload_0
       8: getfield      #7                  // Field state:I
      11: istore_3
      12: iload_3
      13: iconst_4
      14: if_icmpeq     27
      17: iload_3
      18: iconst_2
      19: if_icmpeq     27
      22: iload_3
      23: iconst_3
      24: if_icmpne     28
      27: return
      28: iload_3
      29: iconst_1
      30: if_icmpne     97
      33: getstatic     #33                 // Field STATE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      36: aload_0
      37: iload_3
      38: iconst_3
      39: invokevirtual #34                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      42: ifeq          96
      45: aload_0
      46: getfield      #5                  // Field scheduler:Lreactor/core/scheduler/Scheduler;
      49: aload_0
      50: invokedynamic #36,  0             // InvokeDynamic #0:run:(Lreactor/core/publisher/FluxSubscribeOnCallable$CallableSubscribeOnSubscription;)Ljava/lang/Runnable;
      55: invokeinterface #37,  2           // InterfaceMethod reactor/core/scheduler/Scheduler.schedule:(Ljava/lang/Runnable;)Lreactor/core/Disposable;
      60: astore        4
      62: aload_0
      63: aload         4
      65: invokevirtual #38                 // Method setRequestFuture:(Lreactor/core/Disposable;)V
      68: goto          96
      71: astore        4
      73: aload_0
      74: getfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
      77: aload         4
      79: aload_0
      80: getfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
      83: invokeinterface #28,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      88: invokestatic  #40                 // Method reactor/core/publisher/Operators.onRejectedExecution:(Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/RuntimeException;
      91: invokeinterface #30,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      96: return
      97: getstatic     #33                 // Field STATE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     100: aload_0
     101: iload_3
     102: iconst_2
     103: invokevirtual #34                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
     106: ifeq          110
     109: return
     110: goto          7
     113: return
    Exception table:
       from    to  target type
          45    68    71   Class java/util/concurrent/RejectedExecutionException

  void emitValue();
    Code:
       0: aload_0
       1: getfield      #15                 // Field fusionState:I
       4: iconst_1
       5: if_icmpne     13
       8: aload_0
       9: iconst_2
      10: putfield      #15                 // Field fusionState:I
      13: aload_0
      14: getfield      #11                 // Field value:Ljava/lang/Object;
      17: astore_1
      18: aload_0
      19: invokevirtual #41                 // Method clear:()V
      22: aload_1
      23: ifnull        36
      26: aload_0
      27: getfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
      30: aload_1
      31: invokeinterface #32,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      36: aload_0
      37: getfield      #7                  // Field state:I
      40: iconst_4
      41: if_icmpeq     53
      44: aload_0
      45: getfield      #3                  // Field actual:Lreactor/core/CoreSubscriber;
      48: invokeinterface #31,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      53: return

  static {};
    Code:
       0: ldc           #8                  // class reactor/core/publisher/FluxSubscribeOnCallable$CallableSubscribeOnSubscription
       2: ldc           #42                 // String state
       4: invokestatic  #43                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #33                 // Field STATE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: ldc           #8                  // class reactor/core/publisher/FluxSubscribeOnCallable$CallableSubscribeOnSubscription
      12: ldc           #20                 // class reactor/core/Disposable
      14: ldc           #44                 // String mainFuture
      16: invokestatic  #45                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      19: putstatic     #18                 // Field MAIN_FUTURE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      22: ldc           #8                  // class reactor/core/publisher/FluxSubscribeOnCallable$CallableSubscribeOnSubscription
      24: ldc           #20                 // class reactor/core/Disposable
      26: ldc           #46                 // String requestFuture
      28: invokestatic  #45                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      31: putstatic     #23                 // Field REQUEST_FUTURE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      34: return
}
