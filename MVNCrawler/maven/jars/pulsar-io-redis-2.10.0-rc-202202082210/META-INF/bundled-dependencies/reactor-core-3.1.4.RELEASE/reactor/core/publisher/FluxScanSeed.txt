Compiled from "FluxScanSeed.java"
final class reactor.core.publisher.FluxScanSeed<T, R> extends reactor.core.publisher.FluxOperator<T, R> {
  final java.util.function.BiFunction<R, ? super T, R> accumulator;

  final java.util.function.Supplier<R> initialSupplier;

  reactor.core.publisher.FluxScanSeed(reactor.core.publisher.Flux<? extends T>, java.util.function.Supplier<R>, java.util.function.BiFunction<R, ? super T, R>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxOperator."<init>":(Lreactor/core/publisher/Flux;)V
       5: aload_0
       6: aload_3
       7: ldc           #2                  // String accumulator
       9: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      12: checkcast     #4                  // class java/util/function/BiFunction
      15: putfield      #5                  // Field accumulator:Ljava/util/function/BiFunction;
      18: aload_0
      19: aload_2
      20: ldc           #6                  // String initialSupplier
      22: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      25: checkcast     #7                  // class java/util/function/Supplier
      28: putfield      #8                  // Field initialSupplier:Ljava/util/function/Supplier;
      31: return

  public void subscribe(reactor.core.CoreSubscriber<? super R>);
    Code:
       0: new           #9                  // class reactor/core/publisher/FluxScanSeed$ScanSeedCoordinator
       3: dup
       4: aload_1
       5: aload_0
       6: getfield      #10                 // Field source:Lreactor/core/publisher/Flux;
       9: aload_0
      10: getfield      #5                  // Field accumulator:Ljava/util/function/BiFunction;
      13: aload_0
      14: getfield      #8                  // Field initialSupplier:Ljava/util/function/Supplier;
      17: invokespecial #11                 // Method reactor/core/publisher/FluxScanSeed$ScanSeedCoordinator."<init>":(Lreactor/core/CoreSubscriber;Lreactor/core/publisher/Flux;Ljava/util/function/BiFunction;Ljava/util/function/Supplier;)V
      20: astore_2
      21: aload_1
      22: aload_2
      23: invokeinterface #12,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      28: aload_2
      29: invokevirtual #13                 // Method reactor/core/publisher/FluxScanSeed$ScanSeedCoordinator.isCancelled:()Z
      32: ifne          39
      35: aload_2
      36: invokevirtual #14                 // Method reactor/core/publisher/FluxScanSeed$ScanSeedCoordinator.onComplete:()V
      39: return
}
