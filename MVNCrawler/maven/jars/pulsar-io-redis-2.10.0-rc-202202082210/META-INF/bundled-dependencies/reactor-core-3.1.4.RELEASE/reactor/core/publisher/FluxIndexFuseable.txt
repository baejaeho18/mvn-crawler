Compiled from "FluxIndexFuseable.java"
final class reactor.core.publisher.FluxIndexFuseable<T, I> extends reactor.core.publisher.FluxOperator<T, I> implements reactor.core.Fuseable {
  private final java.util.function.BiFunction<? super java.lang.Long, ? super T, ? extends I> indexMapper;

  reactor.core.publisher.FluxIndexFuseable(reactor.core.publisher.Flux<T>, java.util.function.BiFunction<? super java.lang.Long, ? super T, ? extends I>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxOperator."<init>":(Lreactor/core/publisher/Flux;)V
       5: aload_0
       6: aload_2
       7: ldc           #2                  // String indexMapper must be non null
       9: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      12: checkcast     #4                  // class java/util/function/BiFunction
      15: putfield      #5                  // Field indexMapper:Ljava/util/function/BiFunction;
      18: return

  public void subscribe(reactor.core.CoreSubscriber<? super I>);
    Code:
       0: aload_1
       1: instanceof    #6                  // class reactor/core/Fuseable$ConditionalSubscriber
       4: ifeq          34
       7: aload_1
       8: checkcast     #6                  // class reactor/core/Fuseable$ConditionalSubscriber
      11: astore_2
      12: aload_0
      13: getfield      #7                  // Field source:Lreactor/core/publisher/Flux;
      16: new           #8                  // class reactor/core/publisher/FluxIndexFuseable$IndexFuseableConditionalSubscriber
      19: dup
      20: aload_2
      21: aload_0
      22: getfield      #5                  // Field indexMapper:Ljava/util/function/BiFunction;
      25: invokespecial #9                  // Method reactor/core/publisher/FluxIndexFuseable$IndexFuseableConditionalSubscriber."<init>":(Lreactor/core/Fuseable$ConditionalSubscriber;Ljava/util/function/BiFunction;)V
      28: invokevirtual #10                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      31: goto          53
      34: aload_0
      35: getfield      #7                  // Field source:Lreactor/core/publisher/Flux;
      38: new           #11                 // class reactor/core/publisher/FluxIndexFuseable$IndexFuseableSubscriber
      41: dup
      42: aload_1
      43: aload_0
      44: getfield      #5                  // Field indexMapper:Ljava/util/function/BiFunction;
      47: invokespecial #12                 // Method reactor/core/publisher/FluxIndexFuseable$IndexFuseableSubscriber."<init>":(Lreactor/core/CoreSubscriber;Ljava/util/function/BiFunction;)V
      50: invokevirtual #10                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      53: return
}
