Compiled from "FluxPublish.java"
final class reactor.core.publisher.FluxPublish$PublishSubscriber<T> implements reactor.core.publisher.InnerConsumer<T>, reactor.core.Disposable {
  final int prefetch;

  final reactor.core.publisher.FluxPublish<T> parent;

  volatile org.reactivestreams.Subscription s;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxPublish$PublishSubscriber, org.reactivestreams.Subscription> S;

  volatile reactor.core.publisher.FluxPublish$PubSubInner<T>[] subscribers;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxPublish$PublishSubscriber, reactor.core.publisher.FluxPublish$PubSubInner[]> SUBSCRIBERS;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxPublish$PublishSubscriber> WIP;

  volatile int connected;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxPublish$PublishSubscriber> CONNECTED;

  static final reactor.core.publisher.FluxPublish$PubSubInner[] EMPTY;

  static final reactor.core.publisher.FluxPublish$PubSubInner[] TERMINATED;

  volatile java.util.Queue<T> queue;

  int sourceMode;

  volatile boolean done;

  volatile java.lang.Throwable error;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxPublish$PublishSubscriber, java.lang.Throwable> ERROR;

  reactor.core.publisher.FluxPublish$PublishSubscriber(int, reactor.core.publisher.FluxPublish<T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iload_1
       6: putfield      #2                  // Field prefetch:I
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field parent:Lreactor/core/publisher/FluxPublish;
      14: getstatic     #4                  // Field SUBSCRIBERS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      17: aload_0
      18: getstatic     #5                  // Field EMPTY:[Lreactor/core/publisher/FluxPublish$PubSubInner;
      21: invokevirtual #6                  // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V
      24: return

  boolean isTerminated();
    Code:
       0: aload_0
       1: getfield      #7                  // Field subscribers:[Lreactor/core/publisher/FluxPublish$PubSubInner;
       4: getstatic     #8                  // Field TERMINATED:[Lreactor/core/publisher/FluxPublish$PubSubInner;
       7: if_acmpne     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: getstatic     #9                  // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #10                 // Method reactor/core/publisher/Operators.setOnce:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          117
      11: aload_1
      12: instanceof    #11                 // class reactor/core/Fuseable$QueueSubscription
      15: ifeq          85
      18: aload_1
      19: checkcast     #11                 // class reactor/core/Fuseable$QueueSubscription
      22: astore_2
      23: aload_2
      24: iconst_3
      25: invokeinterface #13,  2           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.requestFusion:(I)I
      30: istore_3
      31: iload_3
      32: iconst_1
      33: if_icmpne     56
      36: aload_0
      37: iload_3
      38: putfield      #14                 // Field sourceMode:I
      41: aload_0
      42: aload_2
      43: putfield      #15                 // Field queue:Ljava/util/Queue;
      46: aload_0
      47: iconst_1
      48: putfield      #16                 // Field done:Z
      51: aload_0
      52: invokevirtual #17                 // Method drain:()V
      55: return
      56: iload_3
      57: iconst_2
      58: if_icmpne     85
      61: aload_0
      62: iload_3
      63: putfield      #14                 // Field sourceMode:I
      66: aload_0
      67: aload_2
      68: putfield      #15                 // Field queue:Ljava/util/Queue;
      71: aload_1
      72: aload_0
      73: getfield      #2                  // Field prefetch:I
      76: invokestatic  #18                 // Method reactor/core/publisher/Operators.unboundedOrPrefetch:(I)J
      79: invokeinterface #19,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      84: return
      85: aload_0
      86: aload_0
      87: getfield      #3                  // Field parent:Lreactor/core/publisher/FluxPublish;
      90: getfield      #20                 // Field reactor/core/publisher/FluxPublish.queueSupplier:Ljava/util/function/Supplier;
      93: invokeinterface #21,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      98: checkcast     #22                 // class java/util/Queue
     101: putfield      #15                 // Field queue:Ljava/util/Queue;
     104: aload_1
     105: aload_0
     106: getfield      #2                  // Field prefetch:I
     109: invokestatic  #18                 // Method reactor/core/publisher/Operators.unboundedOrPrefetch:(I)J
     112: invokeinterface #19,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     117: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #16                 // Field done:Z
       4: ifeq          20
       7: aload_1
       8: ifnull        19
      11: aload_1
      12: aload_0
      13: invokevirtual #23                 // Method currentContext:()Lreactor/util/context/Context;
      16: invokestatic  #24                 // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      19: return
      20: aload_0
      21: getfield      #14                 // Field sourceMode:I
      24: iconst_2
      25: if_icmpne     33
      28: aload_0
      29: invokevirtual #17                 // Method drain:()V
      32: return
      33: aload_0
      34: getfield      #15                 // Field queue:Ljava/util/Queue;
      37: aload_1
      38: invokeinterface #25,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
      43: ifne          85
      46: aload_0
      47: getfield      #26                 // Field s:Lorg/reactivestreams/Subscription;
      50: ldc           #28                 // String Queue is full: Reactive Streams source doesn\'t respect backpressure
      52: invokestatic  #29                 // Method reactor/core/Exceptions.failWithOverflow:(Ljava/lang/String;)Ljava/lang/IllegalStateException;
      55: aload_1
      56: aload_0
      57: invokevirtual #23                 // Method currentContext:()Lreactor/util/context/Context;
      60: invokestatic  #30                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      63: astore_2
      64: getstatic     #31                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      67: aload_0
      68: aload_2
      69: invokestatic  #32                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
      72: ifne          80
      75: aload_2
      76: invokestatic  #33                 // Method reactor/core/publisher/Operators.onErrorDroppedMulticast:(Ljava/lang/Throwable;)V
      79: return
      80: aload_0
      81: iconst_1
      82: putfield      #16                 // Field done:Z
      85: aload_0
      86: invokevirtual #17                 // Method drain:()V
      89: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #16                 // Field done:Z
       4: ifeq          12
       7: aload_1
       8: invokestatic  #33                 // Method reactor/core/publisher/Operators.onErrorDroppedMulticast:(Ljava/lang/Throwable;)V
      11: return
      12: getstatic     #31                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      15: aload_0
      16: aload_1
      17: invokestatic  #32                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
      20: ifeq          35
      23: aload_0
      24: iconst_1
      25: putfield      #16                 // Field done:Z
      28: aload_0
      29: invokevirtual #17                 // Method drain:()V
      32: goto          39
      35: aload_1
      36: invokestatic  #33                 // Method reactor/core/publisher/Operators.onErrorDroppedMulticast:(Ljava/lang/Throwable;)V
      39: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #16                 // Field done:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #16                 // Field done:Z
      13: aload_0
      14: invokevirtual #17                 // Method drain:()V
      17: return

  public void dispose();
    Code:
       0: getstatic     #4                  // Field SUBSCRIBERS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokevirtual #34                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.get:(Ljava/lang/Object;)Ljava/lang/Object;
       7: getstatic     #8                  // Field TERMINATED:[Lreactor/core/publisher/FluxPublish$PubSubInner;
      10: if_acmpne     14
      13: return
      14: getstatic     #9                  // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      17: aload_0
      18: invokestatic  #35                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
      21: ifeq          39
      24: getstatic     #36                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      27: aload_0
      28: invokevirtual #37                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
      31: ifeq          35
      34: return
      35: aload_0
      36: invokevirtual #38                 // Method disconnectAction:()V
      39: return

  void disconnectAction();
    Code:
       0: aload_0
       1: getfield      #15                 // Field queue:Ljava/util/Queue;
       4: invokeinterface #39,  1           // InterfaceMethod java/util/Queue.clear:()V
       9: new           #40                 // class java/util/concurrent/CancellationException
      12: dup
      13: ldc           #41                 // String Disconnected
      15: invokespecial #42                 // Method java/util/concurrent/CancellationException."<init>":(Ljava/lang/String;)V
      18: astore_1
      19: aload_0
      20: invokevirtual #43                 // Method terminate:()[Lreactor/core/publisher/FluxPublish$PubSubInner;
      23: astore_2
      24: aload_2
      25: arraylength
      26: istore_3
      27: iconst_0
      28: istore        4
      30: iload         4
      32: iload_3
      33: if_icmpge     59
      36: aload_2
      37: iload         4
      39: aaload
      40: astore        5
      42: aload         5
      44: getfield      #44                 // Field reactor/core/publisher/FluxPublish$PubSubInner.actual:Lreactor/core/CoreSubscriber;
      47: aload_1
      48: invokeinterface #45,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      53: iinc          4, 1
      56: goto          30
      59: return

  boolean add(reactor.core.publisher.FluxPublish$PublishInner<T>);
    Code:
       0: aload_0
       1: getfield      #7                  // Field subscribers:[Lreactor/core/publisher/FluxPublish$PubSubInner;
       4: astore_2
       5: aload_2
       6: getstatic     #8                  // Field TERMINATED:[Lreactor/core/publisher/FluxPublish$PubSubInner;
       9: if_acmpne     14
      12: iconst_0
      13: ireturn
      14: aload_2
      15: arraylength
      16: istore_3
      17: iload_3
      18: iconst_1
      19: iadd
      20: anewarray     #46                 // class reactor/core/publisher/FluxPublish$PubSubInner
      23: astore        4
      25: aload_2
      26: iconst_0
      27: aload         4
      29: iconst_0
      30: iload_3
      31: invokestatic  #47                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      34: aload         4
      36: iload_3
      37: aload_1
      38: aastore
      39: getstatic     #4                  // Field SUBSCRIBERS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      42: aload_0
      43: aload_2
      44: aload         4
      46: invokevirtual #48                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      49: ifeq          54
      52: iconst_1
      53: ireturn
      54: goto          0

  public void remove(reactor.core.publisher.FluxPublish$PubSubInner<T>);
    Code:
       0: aload_0
       1: getfield      #7                  // Field subscribers:[Lreactor/core/publisher/FluxPublish$PubSubInner;
       4: astore_2
       5: aload_2
       6: getstatic     #8                  // Field TERMINATED:[Lreactor/core/publisher/FluxPublish$PubSubInner;
       9: if_acmpeq     19
      12: aload_2
      13: getstatic     #5                  // Field EMPTY:[Lreactor/core/publisher/FluxPublish$PubSubInner;
      16: if_acmpne     20
      19: return
      20: aload_2
      21: arraylength
      22: istore_3
      23: iconst_0
      24: istore        4
      26: iconst_0
      27: istore        5
      29: iload         5
      31: iload_3
      32: if_icmpge     56
      35: aload_2
      36: iload         5
      38: aaload
      39: aload_1
      40: if_acmpne     50
      43: iload         5
      45: istore        4
      47: goto          56
      50: iinc          5, 1
      53: goto          29
      56: iload         4
      58: ifge          62
      61: return
      62: iload_3
      63: iconst_1
      64: if_icmpne     75
      67: getstatic     #5                  // Field EMPTY:[Lreactor/core/publisher/FluxPublish$PubSubInner;
      70: astore        5
      72: goto          111
      75: iload_3
      76: iconst_1
      77: isub
      78: anewarray     #46                 // class reactor/core/publisher/FluxPublish$PubSubInner
      81: astore        5
      83: aload_2
      84: iconst_0
      85: aload         5
      87: iconst_0
      88: iload         4
      90: invokestatic  #47                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      93: aload_2
      94: iload         4
      96: iconst_1
      97: iadd
      98: aload         5
     100: iload         4
     102: iload_3
     103: iload         4
     105: isub
     106: iconst_1
     107: isub
     108: invokestatic  #47                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     111: getstatic     #4                  // Field SUBSCRIBERS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     114: aload_0
     115: aload_2
     116: aload         5
     118: invokevirtual #48                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
     121: ifeq          125
     124: return
     125: goto          0

  reactor.core.publisher.FluxPublish$PubSubInner<T>[] terminate();
    Code:
       0: getstatic     #4                  // Field SUBSCRIBERS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: getstatic     #8                  // Field TERMINATED:[Lreactor/core/publisher/FluxPublish$PubSubInner;
       7: invokevirtual #49                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #50                 // class "[Lreactor/core/publisher/FluxPublish$PubSubInner;"
      13: areturn

  boolean tryConnect();
    Code:
       0: aload_0
       1: getfield      #51                 // Field connected:I
       4: ifne          23
       7: getstatic     #52                 // Field CONNECTED:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: aload_0
      11: iconst_0
      12: iconst_1
      13: invokevirtual #53                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      16: ifeq          23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: ireturn

  final void drain();
    Code:
       0: getstatic     #36                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #37                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifeq          11
      10: return
      11: iconst_1
      12: istore_1
      13: aload_0
      14: getfield      #16                 // Field done:Z
      17: istore_2
      18: aload_0
      19: getfield      #15                 // Field queue:Ljava/util/Queue;
      22: astore_3
      23: aload_3
      24: ifnull        36
      27: aload_3
      28: invokeinterface #54,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
      33: ifeq          40
      36: iconst_1
      37: goto          41
      40: iconst_0
      41: istore        4
      43: aload_0
      44: iload_2
      45: iload         4
      47: invokevirtual #55                 // Method checkTerminated:(ZZ)Z
      50: ifeq          54
      53: return
      54: iload         4
      56: ifne          429
      59: aload_0
      60: getfield      #7                  // Field subscribers:[Lreactor/core/publisher/FluxPublish$PubSubInner;
      63: astore        5
      65: ldc2_w        #57                 // long 9223372036854775807l
      68: lstore        6
      70: aload         5
      72: arraylength
      73: istore        8
      75: iconst_0
      76: istore        9
      78: aload         5
      80: astore        10
      82: aload         10
      84: arraylength
      85: istore        11
      87: iconst_0
      88: istore        12
      90: iload         12
      92: iload         11
      94: if_icmpge     139
      97: aload         10
      99: iload         12
     101: aaload
     102: astore        13
     104: aload         13
     106: getfield      #59                 // Field reactor/core/publisher/FluxPublish$PubSubInner.requested:J
     109: lstore        14
     111: lload         14
     113: lconst_0
     114: lcmp
     115: iflt          130
     118: lload         6
     120: lload         14
     122: invokestatic  #60                 // Method java/lang/Math.min:(JJ)J
     125: lstore        6
     127: goto          133
     130: iinc          9, 1
     133: iinc          12, 1
     136: goto          90
     139: iload         8
     141: iload         9
     143: if_icmpne     225
     146: aload_3
     147: invokeinterface #61,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
     152: astore        10
     154: goto          185
     157: astore        11
     159: getstatic     #31                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     162: aload_0
     163: aload_0
     164: getfield      #26                 // Field s:Lorg/reactivestreams/Subscription;
     167: aload         11
     169: aload_0
     170: invokevirtual #23                 // Method currentContext:()Lreactor/util/context/Context;
     173: invokestatic  #63                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
     176: invokestatic  #32                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
     179: pop
     180: iconst_1
     181: istore_2
     182: aconst_null
     183: astore        10
     185: aload_0
     186: iload_2
     187: aload         10
     189: ifnonnull     196
     192: iconst_1
     193: goto          197
     196: iconst_0
     197: invokevirtual #55                 // Method checkTerminated:(ZZ)Z
     200: ifeq          204
     203: return
     204: aload_0
     205: getfield      #14                 // Field sourceMode:I
     208: iconst_1
     209: if_icmpeq     13
     212: aload_0
     213: getfield      #26                 // Field s:Lorg/reactivestreams/Subscription;
     216: lconst_1
     217: invokeinterface #19,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     222: goto          13
     225: iconst_0
     226: istore        10
     228: iload         10
     230: i2l
     231: lload         6
     233: lcmp
     234: ifge          389
     237: iload         9
     239: ldc           #65                 // int -2147483648
     241: if_icmpeq     389
     244: aload_0
     245: getfield      #16                 // Field done:Z
     248: istore_2
     249: aload_3
     250: invokeinterface #61,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
     255: astore        11
     257: goto          288
     260: astore        12
     262: getstatic     #31                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     265: aload_0
     266: aload_0
     267: getfield      #26                 // Field s:Lorg/reactivestreams/Subscription;
     270: aload         12
     272: aload_0
     273: invokevirtual #23                 // Method currentContext:()Lreactor/util/context/Context;
     276: invokestatic  #63                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
     279: invokestatic  #32                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
     282: pop
     283: iconst_1
     284: istore_2
     285: aconst_null
     286: astore        11
     288: aload         11
     290: ifnonnull     297
     293: iconst_1
     294: goto          298
     297: iconst_0
     298: istore        4
     300: aload_0
     301: iload_2
     302: iload         4
     304: invokevirtual #55                 // Method checkTerminated:(ZZ)Z
     307: ifeq          311
     310: return
     311: iload         4
     313: ifeq          319
     316: goto          389
     319: aload         5
     321: astore        12
     323: aload         12
     325: arraylength
     326: istore        13
     328: iconst_0
     329: istore        14
     331: iload         14
     333: iload         13
     335: if_icmpge     383
     338: aload         12
     340: iload         14
     342: aaload
     343: astore        15
     345: aload         15
     347: getfield      #44                 // Field reactor/core/publisher/FluxPublish$PubSubInner.actual:Lreactor/core/CoreSubscriber;
     350: aload         11
     352: invokeinterface #66,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
     357: getstatic     #67                 // Field reactor/core/publisher/FluxPublish$PubSubInner.REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
     360: aload         15
     362: lconst_1
     363: invokestatic  #68                 // Method reactor/core/publisher/Operators.producedCancellable:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
     366: ldc2_w        #69                 // long -9223372036854775808l
     369: lcmp
     370: ifne          377
     373: ldc           #65                 // int -2147483648
     375: istore        9
     377: iinc          14, 1
     380: goto          331
     383: iinc          10, 1
     386: goto          228
     389: iload         10
     391: ifeq          414
     394: aload_0
     395: getfield      #14                 // Field sourceMode:I
     398: iconst_1
     399: if_icmpeq     414
     402: aload_0
     403: getfield      #26                 // Field s:Lorg/reactivestreams/Subscription;
     406: iload         10
     408: i2l
     409: invokeinterface #19,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     414: lload         6
     416: lconst_0
     417: lcmp
     418: ifeq          429
     421: iload         4
     423: ifne          429
     426: goto          13
     429: getstatic     #36                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     432: aload_0
     433: iload_1
     434: ineg
     435: invokevirtual #71                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
     438: istore_1
     439: iload_1
     440: ifne          446
     443: goto          449
     446: goto          13
     449: return
    Exception table:
       from    to  target type
         146   154   157   Class java/lang/Throwable
         249   257   260   Class java/lang/Throwable

  boolean checkTerminated(boolean, boolean);
    Code:
       0: aload_0
       1: getfield      #26                 // Field s:Lorg/reactivestreams/Subscription;
       4: invokestatic  #72                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
       7: if_acmpne     16
      10: aload_0
      11: invokevirtual #38                 // Method disconnectAction:()V
      14: iconst_1
      15: ireturn
      16: iload_1
      17: ifeq          176
      20: aload_0
      21: getfield      #73                 // Field error:Ljava/lang/Throwable;
      24: astore_3
      25: aload_3
      26: ifnull        113
      29: aload_3
      30: getstatic     #74                 // Field reactor/core/Exceptions.TERMINATED:Ljava/lang/Throwable;
      33: if_acmpeq     113
      36: getstatic     #75                 // Field reactor/core/publisher/FluxPublish.CONNECTION:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      39: aload_0
      40: getfield      #3                  // Field parent:Lreactor/core/publisher/FluxPublish;
      43: aload_0
      44: aconst_null
      45: invokevirtual #48                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      48: pop
      49: getstatic     #31                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      52: aload_0
      53: invokestatic  #76                 // Method reactor/core/Exceptions.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Ljava/lang/Throwable;
      56: astore_3
      57: aload_0
      58: getfield      #15                 // Field queue:Ljava/util/Queue;
      61: invokeinterface #39,  1           // InterfaceMethod java/util/Queue.clear:()V
      66: aload_0
      67: invokevirtual #43                 // Method terminate:()[Lreactor/core/publisher/FluxPublish$PubSubInner;
      70: astore        4
      72: aload         4
      74: arraylength
      75: istore        5
      77: iconst_0
      78: istore        6
      80: iload         6
      82: iload         5
      84: if_icmpge     111
      87: aload         4
      89: iload         6
      91: aaload
      92: astore        7
      94: aload         7
      96: getfield      #44                 // Field reactor/core/publisher/FluxPublish$PubSubInner.actual:Lreactor/core/CoreSubscriber;
      99: aload_3
     100: invokeinterface #45,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
     105: iinc          6, 1
     108: goto          80
     111: iconst_1
     112: ireturn
     113: iload_2
     114: ifeq          176
     117: getstatic     #75                 // Field reactor/core/publisher/FluxPublish.CONNECTION:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     120: aload_0
     121: getfield      #3                  // Field parent:Lreactor/core/publisher/FluxPublish;
     124: aload_0
     125: aconst_null
     126: invokevirtual #48                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
     129: pop
     130: aload_0
     131: invokevirtual #43                 // Method terminate:()[Lreactor/core/publisher/FluxPublish$PubSubInner;
     134: astore        4
     136: aload         4
     138: arraylength
     139: istore        5
     141: iconst_0
     142: istore        6
     144: iload         6
     146: iload         5
     148: if_icmpge     174
     151: aload         4
     153: iload         6
     155: aaload
     156: astore        7
     158: aload         7
     160: getfield      #44                 // Field reactor/core/publisher/FluxPublish$PubSubInner.actual:Lreactor/core/CoreSubscriber;
     163: invokeinterface #77,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
     168: iinc          6, 1
     171: goto          144
     174: iconst_1
     175: ireturn
     176: iconst_0
     177: ireturn

  public java.util.stream.Stream<? extends reactor.core.Scannable> inners();
    Code:
       0: aload_0
       1: getfield      #7                  // Field subscribers:[Lreactor/core/publisher/FluxPublish$PubSubInner;
       4: invokestatic  #78                 // InterfaceMethod java/util/stream/Stream.of:([Ljava/lang/Object;)Ljava/util/stream/Stream;
       7: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #79                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #26                 // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #80                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      16: if_acmpne     27
      19: aload_0
      20: getfield      #2                  // Field prefetch:I
      23: invokestatic  #81                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      26: areturn
      27: aload_1
      28: getstatic     #82                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
      31: if_acmpne     39
      34: aload_0
      35: getfield      #73                 // Field error:Ljava/lang/Throwable;
      38: areturn
      39: aload_1
      40: getstatic     #83                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      43: if_acmpne     70
      46: aload_0
      47: getfield      #15                 // Field queue:Ljava/util/Queue;
      50: ifnull        65
      53: aload_0
      54: getfield      #15                 // Field queue:Ljava/util/Queue;
      57: invokeinterface #84,  1           // InterfaceMethod java/util/Queue.size:()I
      62: goto          66
      65: iconst_0
      66: invokestatic  #81                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      69: areturn
      70: aload_1
      71: getstatic     #85                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      74: if_acmpne     85
      77: aload_0
      78: invokevirtual #86                 // Method isTerminated:()Z
      81: invokestatic  #87                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      84: areturn
      85: aload_1
      86: getstatic     #88                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      89: if_acmpne     111
      92: aload_0
      93: getfield      #26                 // Field s:Lorg/reactivestreams/Subscription;
      96: invokestatic  #72                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      99: if_acmpne     106
     102: iconst_1
     103: goto          107
     106: iconst_0
     107: invokestatic  #87                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     110: areturn
     111: aconst_null
     112: areturn

  public boolean isDisposed();
    Code:
       0: aload_0
       1: getfield      #26                 // Field s:Lorg/reactivestreams/Subscription;
       4: invokestatic  #72                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
       7: if_acmpeq     17
      10: aload_0
      11: getfield      #16                 // Field done:Z
      14: ifeq          21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: ireturn

  static {};
    Code:
       0: ldc           #89                 // class reactor/core/publisher/FluxPublish$PublishSubscriber
       2: ldc           #90                 // class org/reactivestreams/Subscription
       4: ldc           #91                 // String s
       6: invokestatic  #92                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #9                  // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: ldc           #89                 // class reactor/core/publisher/FluxPublish$PublishSubscriber
      14: ldc           #50                 // class "[Lreactor/core/publisher/FluxPublish$PubSubInner;"
      16: ldc           #93                 // String subscribers
      18: invokestatic  #92                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      21: putstatic     #4                  // Field SUBSCRIBERS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      24: ldc           #89                 // class reactor/core/publisher/FluxPublish$PublishSubscriber
      26: ldc           #94                 // String wip
      28: invokestatic  #95                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      31: putstatic     #36                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      34: ldc           #89                 // class reactor/core/publisher/FluxPublish$PublishSubscriber
      36: ldc           #96                 // String connected
      38: invokestatic  #95                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      41: putstatic     #52                 // Field CONNECTED:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      44: iconst_0
      45: anewarray     #97                 // class reactor/core/publisher/FluxPublish$PublishInner
      48: putstatic     #5                  // Field EMPTY:[Lreactor/core/publisher/FluxPublish$PubSubInner;
      51: iconst_0
      52: anewarray     #97                 // class reactor/core/publisher/FluxPublish$PublishInner
      55: putstatic     #8                  // Field TERMINATED:[Lreactor/core/publisher/FluxPublish$PubSubInner;
      58: ldc           #89                 // class reactor/core/publisher/FluxPublish$PublishSubscriber
      60: ldc           #62                 // class java/lang/Throwable
      62: ldc           #98                 // String error
      64: invokestatic  #92                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      67: putstatic     #31                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      70: return
}
