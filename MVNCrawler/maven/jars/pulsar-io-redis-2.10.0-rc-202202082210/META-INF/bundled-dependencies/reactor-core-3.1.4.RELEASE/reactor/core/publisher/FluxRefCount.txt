Compiled from "FluxRefCount.java"
final class reactor.core.publisher.FluxRefCount<T> extends reactor.core.publisher.Flux<T> implements reactor.core.Scannable, reactor.core.Fuseable {
  final reactor.core.publisher.ConnectableFlux<? extends T> source;

  final int n;

  volatile reactor.core.publisher.FluxRefCount$RefCountMonitor<T> connection;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxRefCount, reactor.core.publisher.FluxRefCount$RefCountMonitor> CONNECTION;

  reactor.core.publisher.FluxRefCount(reactor.core.publisher.ConnectableFlux<? extends T>, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/Flux."<init>":()V
       4: iload_2
       5: ifgt          35
       8: new           #2                  // class java/lang/IllegalArgumentException
      11: dup
      12: new           #3                  // class java/lang/StringBuilder
      15: dup
      16: invokespecial #4                  // Method java/lang/StringBuilder."<init>":()V
      19: ldc           #5                  // String n > 0 required but it was
      21: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: iload_2
      25: invokevirtual #7                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      28: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      31: invokespecial #9                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      34: athrow
      35: aload_0
      36: aload_1
      37: ldc           #10                 // String source
      39: invokestatic  #11                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      42: checkcast     #12                 // class reactor/core/publisher/ConnectableFlux
      45: putfield      #13                 // Field source:Lreactor/core/publisher/ConnectableFlux;
      48: aload_0
      49: iload_2
      50: putfield      #14                 // Field n:I
      53: return

  public int getPrefetch();
    Code:
       0: aload_0
       1: getfield      #13                 // Field source:Lreactor/core/publisher/ConnectableFlux;
       4: invokevirtual #15                 // Method reactor/core/publisher/ConnectableFlux.getPrefetch:()I
       7: ireturn

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: getfield      #16                 // Field connection:Lreactor/core/publisher/FluxRefCount$RefCountMonitor;
       4: astore_2
       5: aload_2
       6: ifnull        19
       9: aload_2
      10: getfield      #17                 // Field reactor/core/publisher/FluxRefCount$RefCountMonitor.disconnect:Lreactor/core/Disposable;
      13: invokestatic  #18                 // Method reactor/core/publisher/OperatorDisposables.isDisposed:(Lreactor/core/Disposable;)Z
      16: ifeq          49
      19: new           #19                 // class reactor/core/publisher/FluxRefCount$RefCountMonitor
      22: dup
      23: aload_0
      24: getfield      #14                 // Field n:I
      27: aload_0
      28: invokespecial #20                 // Method reactor/core/publisher/FluxRefCount$RefCountMonitor."<init>":(ILreactor/core/publisher/FluxRefCount;)V
      31: astore_3
      32: getstatic     #21                 // Field CONNECTION:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      35: aload_0
      36: aload_2
      37: aload_3
      38: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      41: ifne          47
      44: goto          0
      47: aload_3
      48: astore_2
      49: aload_2
      50: aload_1
      51: invokevirtual #23                 // Method reactor/core/publisher/FluxRefCount$RefCountMonitor.subscribe:(Lreactor/core/CoreSubscriber;)V
      54: goto          57
      57: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #24                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
       4: if_acmpne     15
       7: aload_0
       8: invokevirtual #25                 // Method getPrefetch:()I
      11: invokestatic  #26                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      14: areturn
      15: aload_1
      16: getstatic     #27                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
      19: if_acmpne     27
      22: aload_0
      23: getfield      #13                 // Field source:Lreactor/core/publisher/ConnectableFlux;
      26: areturn
      27: aconst_null
      28: areturn

  static {};
    Code:
       0: ldc           #28                 // class reactor/core/publisher/FluxRefCount
       2: ldc           #19                 // class reactor/core/publisher/FluxRefCount$RefCountMonitor
       4: ldc           #29                 // String connection
       6: invokestatic  #30                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #21                 // Field CONNECTION:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: return
}
