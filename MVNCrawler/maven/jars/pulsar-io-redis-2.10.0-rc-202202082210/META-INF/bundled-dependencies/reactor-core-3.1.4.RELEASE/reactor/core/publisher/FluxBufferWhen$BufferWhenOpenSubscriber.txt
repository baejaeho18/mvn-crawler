Compiled from "FluxBufferWhen.java"
final class reactor.core.publisher.FluxBufferWhen$BufferWhenOpenSubscriber<OPEN> implements reactor.core.Disposable, reactor.core.publisher.InnerConsumer<OPEN> {
  volatile org.reactivestreams.Subscription subscription;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxBufferWhen$BufferWhenOpenSubscriber, org.reactivestreams.Subscription> SUBSCRIPTION;

  final reactor.core.publisher.FluxBufferWhen$BufferWhenMainSubscriber<?, OPEN, ?, ?> parent;

  reactor.core.publisher.FluxBufferWhen$BufferWhenOpenSubscriber(reactor.core.publisher.FluxBufferWhen$BufferWhenMainSubscriber<?, OPEN, ?, ?>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field parent:Lreactor/core/publisher/FluxBufferWhen$BufferWhenMainSubscriber;
       9: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: getstatic     #3                  // Field SUBSCRIPTION:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #4                  // Method reactor/core/publisher/Operators.setOnce:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          23
      11: aload_0
      12: getfield      #5                  // Field subscription:Lorg/reactivestreams/Subscription;
      15: ldc2_w        #7                  // long 9223372036854775807l
      18: invokeinterface #9,  3            // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      23: return

  public void dispose();
    Code:
       0: getstatic     #3                  // Field SUBSCRIPTION:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokestatic  #10                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
       7: pop
       8: return

  public boolean isDisposed();
    Code:
       0: aload_0
       1: getfield      #5                  // Field subscription:Lorg/reactivestreams/Subscription;
       4: invokestatic  #11                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
       7: if_acmpne     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public void onNext(OPEN);
    Code:
       0: aload_0
       1: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxBufferWhen$BufferWhenMainSubscriber;
       4: aload_1
       5: invokevirtual #12                 // Method reactor/core/publisher/FluxBufferWhen$BufferWhenMainSubscriber.open:(Ljava/lang/Object;)V
       8: return

  public void onError(java.lang.Throwable);
    Code:
       0: getstatic     #3                  // Field SUBSCRIPTION:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokestatic  #11                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
       7: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V
      10: aload_0
      11: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxBufferWhen$BufferWhenMainSubscriber;
      14: aload_0
      15: aload_1
      16: invokevirtual #14                 // Method reactor/core/publisher/FluxBufferWhen$BufferWhenMainSubscriber.boundaryError:(Lreactor/core/Disposable;Ljava/lang/Throwable;)V
      19: return

  public void onComplete();
    Code:
       0: getstatic     #3                  // Field SUBSCRIPTION:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokestatic  #11                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
       7: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.lazySet:(Ljava/lang/Object;Ljava/lang/Object;)V
      10: aload_0
      11: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxBufferWhen$BufferWhenMainSubscriber;
      14: aload_0
      15: invokevirtual #15                 // Method reactor/core/publisher/FluxBufferWhen$BufferWhenMainSubscriber.openComplete:(Lreactor/core/publisher/FluxBufferWhen$BufferWhenOpenSubscriber;)V
      18: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #16                 // Field reactor/core/Scannable$Attr.ACTUAL:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #2                  // Field parent:Lreactor/core/publisher/FluxBufferWhen$BufferWhenMainSubscriber;
      11: areturn
      12: aload_1
      13: getstatic     #17                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
      16: if_acmpne     24
      19: aload_0
      20: getfield      #5                  // Field subscription:Lorg/reactivestreams/Subscription;
      23: areturn
      24: aload_1
      25: getstatic     #18                 // Field reactor/core/Scannable$Attr.REQUESTED_FROM_DOWNSTREAM:Lreactor/core/Scannable$Attr;
      28: if_acmpne     38
      31: ldc2_w        #7                  // long 9223372036854775807l
      34: invokestatic  #19                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      37: areturn
      38: aload_1
      39: getstatic     #20                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      42: if_acmpne     53
      45: aload_0
      46: invokevirtual #21                 // Method isDisposed:()Z
      49: invokestatic  #22                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      52: areturn
      53: aconst_null
      54: areturn

  static {};
    Code:
       0: ldc           #23                 // class reactor/core/publisher/FluxBufferWhen$BufferWhenOpenSubscriber
       2: ldc           #24                 // class org/reactivestreams/Subscription
       4: ldc           #25                 // String subscription
       6: invokestatic  #26                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #3                  // Field SUBSCRIPTION:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: return
}
