Compiled from "FluxDelaySequence.java"
final class reactor.core.publisher.FluxDelaySequence<T> extends reactor.core.publisher.FluxOperator<T, T> {
  final java.time.Duration delay;

  final reactor.core.scheduler.Scheduler scheduler;

  reactor.core.publisher.FluxDelaySequence(reactor.core.publisher.Flux<T>, java.time.Duration, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxOperator."<init>":(Lreactor/core/publisher/Flux;)V
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field delay:Ljava/time/Duration;
      10: aload_0
      11: aload_3
      12: putfield      #3                  // Field scheduler:Lreactor/core/scheduler/Scheduler;
      15: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field scheduler:Lreactor/core/scheduler/Scheduler;
       4: invokeinterface #4,  1            // InterfaceMethod reactor/core/scheduler/Scheduler.createWorker:()Lreactor/core/scheduler/Scheduler$Worker;
       9: astore_2
      10: aload_0
      11: getfield      #5                  // Field source:Lreactor/core/publisher/Flux;
      14: new           #6                  // class reactor/core/publisher/FluxDelaySequence$DelaySubscriber
      17: dup
      18: aload_1
      19: aload_0
      20: getfield      #2                  // Field delay:Ljava/time/Duration;
      23: aload_2
      24: invokespecial #7                  // Method reactor/core/publisher/FluxDelaySequence$DelaySubscriber."<init>":(Lreactor/core/CoreSubscriber;Ljava/time/Duration;Lreactor/core/scheduler/Scheduler$Worker;)V
      27: invokevirtual #8                  // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      30: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #9                  // Field reactor/core/Scannable$Attr.RUN_ON:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #3                  // Field scheduler:Lreactor/core/scheduler/Scheduler;
      11: areturn
      12: aload_0
      13: aload_1
      14: invokespecial #10                 // Method reactor/core/publisher/FluxOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      17: areturn
}
