Compiled from "MonoCallableOnAssembly.java"
final class reactor.core.publisher.MonoCallableOnAssembly<T> extends reactor.core.publisher.MonoOperator<T, T> implements java.util.concurrent.Callable<T>, reactor.core.publisher.AssemblyOp {
  final reactor.core.publisher.FluxOnAssembly$AssemblySnapshotException stacktrace;

  reactor.core.publisher.MonoCallableOnAssembly(reactor.core.publisher.Mono<? extends T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/MonoOperator."<init>":(Lreactor/core/publisher/Mono;)V
       5: aload_0
       6: new           #2                  // class reactor/core/publisher/FluxOnAssembly$AssemblySnapshotException
       9: dup
      10: invokespecial #3                  // Method reactor/core/publisher/FluxOnAssembly$AssemblySnapshotException."<init>":()V
      13: putfield      #4                  // Field stacktrace:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshotException;
      16: return

  public T block();
    Code:
       0: aload_0
       1: getstatic     #5                  // Field java/time/Duration.ZERO:Ljava/time/Duration;
       4: invokevirtual #6                  // Method block:(Ljava/time/Duration;)Ljava/lang/Object;
       7: areturn

  public T block(java.time.Duration);
    Code:
       0: aload_0
       1: getfield      #7                  // Field source:Lreactor/core/publisher/Mono;
       4: checkcast     #8                  // class java/util/concurrent/Callable
       7: invokeinterface #9,  1            // InterfaceMethod java/util/concurrent/Callable.call:()Ljava/lang/Object;
      12: areturn
      13: astore_2
      14: aload_2
      15: invokestatic  #11                 // Method reactor/core/Exceptions.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
      18: athrow
    Exception table:
       from    to  target type
           0    12    13   Class java/lang/Throwable

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_1
       1: instanceof    #12                 // class reactor/core/Fuseable$ConditionalSubscriber
       4: ifeq          38
       7: aload_1
       8: checkcast     #12                 // class reactor/core/Fuseable$ConditionalSubscriber
      11: astore_2
      12: aload_0
      13: getfield      #7                  // Field source:Lreactor/core/publisher/Mono;
      16: new           #13                 // class reactor/core/publisher/FluxOnAssembly$OnAssemblyConditionalSubscriber
      19: dup
      20: aload_2
      21: aload_0
      22: getfield      #4                  // Field stacktrace:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshotException;
      25: aload_0
      26: getfield      #7                  // Field source:Lreactor/core/publisher/Mono;
      29: invokespecial #14                 // Method reactor/core/publisher/FluxOnAssembly$OnAssemblyConditionalSubscriber."<init>":(Lreactor/core/Fuseable$ConditionalSubscriber;Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshotException;Lorg/reactivestreams/Publisher;)V
      32: invokevirtual #15                 // Method reactor/core/publisher/Mono.subscribe:(Lreactor/core/CoreSubscriber;)V
      35: goto          61
      38: aload_0
      39: getfield      #7                  // Field source:Lreactor/core/publisher/Mono;
      42: new           #16                 // class reactor/core/publisher/FluxOnAssembly$OnAssemblySubscriber
      45: dup
      46: aload_1
      47: aload_0
      48: getfield      #4                  // Field stacktrace:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshotException;
      51: aload_0
      52: getfield      #7                  // Field source:Lreactor/core/publisher/Mono;
      55: invokespecial #17                 // Method reactor/core/publisher/FluxOnAssembly$OnAssemblySubscriber."<init>":(Lreactor/core/CoreSubscriber;Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshotException;Lorg/reactivestreams/Publisher;)V
      58: invokevirtual #15                 // Method reactor/core/publisher/Mono.subscribe:(Lreactor/core/CoreSubscriber;)V
      61: return

  public T call() throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #7                  // Field source:Lreactor/core/publisher/Mono;
       4: checkcast     #8                  // class java/util/concurrent/Callable
       7: invokeinterface #9,  1            // InterfaceMethod java/util/concurrent/Callable.call:()Ljava/lang/Object;
      12: areturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #4                  // Field stacktrace:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshotException;
       4: invokevirtual #18                 // Method reactor/core/publisher/FluxOnAssembly$AssemblySnapshotException.stackFirst:()Ljava/lang/String;
       7: areturn
}
