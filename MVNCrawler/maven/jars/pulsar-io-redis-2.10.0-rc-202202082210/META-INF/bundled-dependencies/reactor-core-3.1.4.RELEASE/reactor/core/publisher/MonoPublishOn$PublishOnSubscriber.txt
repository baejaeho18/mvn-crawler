Compiled from "MonoPublishOn.java"
final class reactor.core.publisher.MonoPublishOn$PublishOnSubscriber<T> implements reactor.core.publisher.InnerOperator<T, T>, java.lang.Runnable {
  final reactor.core.CoreSubscriber<? super T> actual;

  final reactor.core.scheduler.Scheduler scheduler;

  org.reactivestreams.Subscription s;

  volatile reactor.core.Disposable future;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.MonoPublishOn$PublishOnSubscriber, reactor.core.Disposable> FUTURE;

  volatile T value;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.MonoPublishOn$PublishOnSubscriber, java.lang.Object> VALUE;

  volatile java.lang.Throwable error;

  reactor.core.publisher.MonoPublishOn$PublishOnSubscriber(reactor.core.CoreSubscriber<? super T>, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field scheduler:Lreactor/core/scheduler/Scheduler;
      14: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #4                  // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
       4: if_acmpne     26
       7: aload_0
       8: getfield      #5                  // Field future:Lreactor/core/Disposable;
      11: getstatic     #6                  // Field reactor/core/publisher/OperatorDisposables.DISPOSED:Lreactor/core/Disposable;
      14: if_acmpne     21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: invokestatic  #7                  // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      25: areturn
      26: aload_1
      27: getstatic     #8                  // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
      30: if_acmpne     38
      33: aload_0
      34: getfield      #9                  // Field s:Lorg/reactivestreams/Subscription;
      37: areturn
      38: aload_1
      39: getstatic     #10                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
      42: if_acmpne     50
      45: aload_0
      46: getfield      #11                 // Field error:Ljava/lang/Throwable;
      49: areturn
      50: aload_1
      51: getstatic     #12                 // Field reactor/core/Scannable$Attr.RUN_ON:Lreactor/core/Scannable$Attr;
      54: if_acmpne     62
      57: aload_0
      58: getfield      #3                  // Field scheduler:Lreactor/core/scheduler/Scheduler;
      61: areturn
      62: aload_0
      63: aload_1
      64: invokespecial #13                 // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      67: areturn

  public reactor.core.CoreSubscriber<? super T> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #9                  // Field s:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #14                 // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          26
      11: aload_0
      12: aload_1
      13: putfield      #9                  // Field s:Lorg/reactivestreams/Subscription;
      16: aload_0
      17: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      20: aload_0
      21: invokeinterface #15,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      26: return

  public void onNext(T);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #16                 // Field value:Ljava/lang/Object;
       5: aload_0
       6: aload_0
       7: aconst_null
       8: aload_1
       9: invokevirtual #17                 // Method trySchedule:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;)V
      12: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #11                 // Field error:Ljava/lang/Throwable;
       5: aload_0
       6: aconst_null
       7: aload_1
       8: aconst_null
       9: invokevirtual #17                 // Method trySchedule:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;)V
      12: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #16                 // Field value:Ljava/lang/Object;
       4: ifnonnull     14
       7: aload_0
       8: aconst_null
       9: aconst_null
      10: aconst_null
      11: invokevirtual #17                 // Method trySchedule:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;)V
      14: return

  void trySchedule(org.reactivestreams.Subscription, java.lang.Throwable, java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #5                  // Field future:Lreactor/core/Disposable;
       4: ifnull        8
       7: return
       8: aload_0
       9: aload_0
      10: getfield      #3                  // Field scheduler:Lreactor/core/scheduler/Scheduler;
      13: aload_0
      14: invokeinterface #18,  2           // InterfaceMethod reactor/core/scheduler/Scheduler.schedule:(Ljava/lang/Runnable;)Lreactor/core/Disposable;
      19: putfield      #5                  // Field future:Lreactor/core/Disposable;
      22: goto          53
      25: astore        4
      27: aload_0
      28: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      31: aload         4
      33: aload_1
      34: aload_2
      35: aload_3
      36: aload_0
      37: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      40: invokeinterface #20,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      45: invokestatic  #21                 // Method reactor/core/publisher/Operators.onRejectedExecution:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/RuntimeException;
      48: invokeinterface #22,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      53: return
    Exception table:
       from    to  target type
           8    22    25   Class java/util/concurrent/RejectedExecutionException

  public void request(long);
    Code:
       0: aload_0
       1: getfield      #9                  // Field s:Lorg/reactivestreams/Subscription;
       4: lload_1
       5: invokeinterface #23,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      10: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #5                  // Field future:Lreactor/core/Disposable;
       4: astore_1
       5: aload_1
       6: getstatic     #6                  // Field reactor/core/publisher/OperatorDisposables.DISPOSED:Lreactor/core/Disposable;
       9: if_acmpeq     48
      12: getstatic     #24                 // Field FUTURE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      15: aload_0
      16: getstatic     #6                  // Field reactor/core/publisher/OperatorDisposables.DISPOSED:Lreactor/core/Disposable;
      19: invokevirtual #25                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      22: checkcast     #26                 // class reactor/core/Disposable
      25: astore_1
      26: aload_1
      27: ifnull        43
      30: aload_1
      31: invokestatic  #27                 // Method reactor/core/publisher/OperatorDisposables.isDisposed:(Lreactor/core/Disposable;)Z
      34: ifne          43
      37: aload_1
      38: invokeinterface #28,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
      43: aload_0
      44: aconst_null
      45: putfield      #16                 // Field value:Ljava/lang/Object;
      48: aload_0
      49: getfield      #9                  // Field s:Lorg/reactivestreams/Subscription;
      52: invokeinterface #29,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      57: return

  public void run();
    Code:
       0: aload_0
       1: getfield      #5                  // Field future:Lreactor/core/Disposable;
       4: invokestatic  #27                 // Method reactor/core/publisher/OperatorDisposables.isDisposed:(Lreactor/core/Disposable;)Z
       7: ifeq          11
      10: return
      11: getstatic     #30                 // Field VALUE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      14: aload_0
      15: aconst_null
      16: invokevirtual #25                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      19: astore_1
      20: aload_1
      21: ifnull        46
      24: aload_0
      25: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      28: aload_1
      29: invokeinterface #31,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      34: aload_0
      35: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      38: invokeinterface #32,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      43: goto          77
      46: aload_0
      47: getfield      #11                 // Field error:Ljava/lang/Throwable;
      50: astore_2
      51: aload_2
      52: ifnull        68
      55: aload_0
      56: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      59: aload_2
      60: invokeinterface #22,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      65: goto          77
      68: aload_0
      69: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      72: invokeinterface #32,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
      77: return

  static {};
    Code:
       0: ldc           #33                 // class reactor/core/publisher/MonoPublishOn$PublishOnSubscriber
       2: ldc           #26                 // class reactor/core/Disposable
       4: ldc           #34                 // String future
       6: invokestatic  #35                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #24                 // Field FUTURE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: ldc           #33                 // class reactor/core/publisher/MonoPublishOn$PublishOnSubscriber
      14: ldc           #36                 // class java/lang/Object
      16: ldc           #37                 // String value
      18: invokestatic  #35                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      21: putstatic     #30                 // Field VALUE:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      24: return
}
