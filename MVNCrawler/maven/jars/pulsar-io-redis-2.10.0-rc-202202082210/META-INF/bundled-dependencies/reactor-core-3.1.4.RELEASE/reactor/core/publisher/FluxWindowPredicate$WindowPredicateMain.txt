Compiled from "FluxWindowPredicate.java"
final class reactor.core.publisher.FluxWindowPredicate$WindowPredicateMain<T> implements reactor.core.Fuseable$QueueSubscription<reactor.core.publisher.Flux<T>>, reactor.core.publisher.InnerOperator<T, reactor.core.publisher.Flux<T>> {
  final reactor.core.CoreSubscriber<? super reactor.core.publisher.Flux<T>> actual;

  final java.util.function.Supplier<? extends java.util.Queue<T>> groupQueueSupplier;

  final reactor.core.publisher.FluxBufferPredicate$Mode mode;

  final java.util.function.Predicate<? super T> predicate;

  final int prefetch;

  final java.util.Queue<reactor.core.publisher.Flux<T>> queue;

  reactor.core.publisher.FluxWindowPredicate$WindowFlux<T> window;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxWindowPredicate$WindowPredicateMain> WIP;

  volatile long requested;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.FluxWindowPredicate$WindowPredicateMain> REQUESTED;

  volatile boolean done;

  volatile java.lang.Throwable error;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxWindowPredicate$WindowPredicateMain, java.lang.Throwable> ERROR;

  volatile int cancelled;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxWindowPredicate$WindowPredicateMain> CANCELLED;

  volatile int windowCount;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxWindowPredicate$WindowPredicateMain> WINDOW_COUNT;

  org.reactivestreams.Subscription s;

  volatile boolean outputFused;

  reactor.core.publisher.FluxWindowPredicate$WindowPredicateMain(reactor.core.CoreSubscriber<? super reactor.core.publisher.Flux<T>>, java.util.Queue<reactor.core.publisher.Flux<T>>, java.util.function.Supplier<? extends java.util.Queue<T>>, int, java.util.function.Predicate<? super T>, reactor.core.publisher.FluxBufferPredicate$Mode);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field queue:Ljava/util/Queue;
      14: aload_0
      15: aload_3
      16: putfield      #4                  // Field groupQueueSupplier:Ljava/util/function/Supplier;
      19: aload_0
      20: iload         4
      22: putfield      #5                  // Field prefetch:I
      25: aload_0
      26: aload         5
      28: putfield      #6                  // Field predicate:Ljava/util/function/Predicate;
      31: aload_0
      32: aload         6
      34: putfield      #7                  // Field mode:Lreactor/core/publisher/FluxBufferPredicate$Mode;
      37: getstatic     #8                  // Field WINDOW_COUNT:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      40: aload_0
      41: iconst_2
      42: invokevirtual #9                  // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.lazySet:(Ljava/lang/Object;I)V
      45: aload_0
      46: invokevirtual #10                 // Method initializeWindow:()V
      49: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #11                 // Field s:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #12                 // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          46
      11: aload_0
      12: aload_1
      13: putfield      #11                 // Field s:Lorg/reactivestreams/Subscription;
      16: aload_0
      17: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      20: aload_0
      21: invokeinterface #13,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      26: aload_0
      27: getfield      #14                 // Field cancelled:I
      30: ifne          46
      33: aload_1
      34: aload_0
      35: getfield      #5                  // Field prefetch:I
      38: invokestatic  #15                 // Method reactor/core/publisher/Operators.unboundedOrPrefetch:(I)J
      41: invokeinterface #16,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      46: return

  void initializeWindow();
    Code:
       0: new           #17                 // class reactor/core/publisher/FluxWindowPredicate$WindowFlux
       3: dup
       4: aload_0
       5: getfield      #4                  // Field groupQueueSupplier:Ljava/util/function/Supplier;
       8: invokeinterface #18,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      13: checkcast     #19                 // class java/util/Queue
      16: aload_0
      17: invokespecial #20                 // Method reactor/core/publisher/FluxWindowPredicate$WindowFlux."<init>":(Ljava/util/Queue;Lreactor/core/publisher/FluxWindowPredicate$WindowPredicateMain;)V
      20: astore_1
      21: aload_0
      22: aload_1
      23: putfield      #21                 // Field window:Lreactor/core/publisher/FluxWindowPredicate$WindowFlux;
      26: aload_0
      27: getfield      #3                  // Field queue:Ljava/util/Queue;
      30: aload_1
      31: invokeinterface #22,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
      36: pop
      37: return

  void offerNewWindow(T);
    Code:
       0: aload_0
       1: getfield      #14                 // Field cancelled:I
       4: ifne          91
       7: getstatic     #8                  // Field WINDOW_COUNT:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: aload_0
      11: invokevirtual #23                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
      14: pop
      15: new           #17                 // class reactor/core/publisher/FluxWindowPredicate$WindowFlux
      18: dup
      19: aload_0
      20: getfield      #4                  // Field groupQueueSupplier:Ljava/util/function/Supplier;
      23: invokeinterface #18,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      28: checkcast     #19                 // class java/util/Queue
      31: aload_0
      32: invokespecial #20                 // Method reactor/core/publisher/FluxWindowPredicate$WindowFlux."<init>":(Ljava/util/Queue;Lreactor/core/publisher/FluxWindowPredicate$WindowPredicateMain;)V
      35: astore_2
      36: aload_1
      37: ifnull        45
      40: aload_2
      41: aload_1
      42: invokevirtual #24                 // Method reactor/core/publisher/FluxWindowPredicate$WindowFlux.onNext:(Ljava/lang/Object;)V
      45: aload_0
      46: aload_2
      47: putfield      #21                 // Field window:Lreactor/core/publisher/FluxWindowPredicate$WindowFlux;
      50: aload_0
      51: getfield      #3                  // Field queue:Ljava/util/Queue;
      54: aload_2
      55: invokeinterface #22,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
      60: ifne          87
      63: aload_0
      64: aload_0
      65: ldc           #26                 // String Queue is full: Reactive Streams source doesn\'t respect backpressure
      67: invokestatic  #27                 // Method reactor/core/Exceptions.failWithOverflow:(Ljava/lang/String;)Ljava/lang/IllegalStateException;
      70: aload_1
      71: aload_0
      72: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      75: invokeinterface #28,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      80: invokestatic  #29                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      83: invokevirtual #30                 // Method onError:(Ljava/lang/Throwable;)V
      86: return
      87: aload_0
      88: invokevirtual #31                 // Method drain:()V
      91: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #32                 // Field done:Z
       4: ifeq          21
       7: aload_1
       8: aload_0
       9: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      12: invokeinterface #28,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #33                 // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      20: return
      21: aload_0
      22: getfield      #21                 // Field window:Lreactor/core/publisher/FluxWindowPredicate$WindowFlux;
      25: astore_2
      26: aload_0
      27: getfield      #6                  // Field predicate:Ljava/util/function/Predicate;
      30: aload_1
      31: invokeinterface #34,  2           // InterfaceMethod java/util/function/Predicate.test:(Ljava/lang/Object;)Z
      36: istore_3
      37: goto          66
      40: astore        4
      42: aload_0
      43: aload_0
      44: getfield      #11                 // Field s:Lorg/reactivestreams/Subscription;
      47: aload         4
      49: aload_1
      50: aload_0
      51: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      54: invokeinterface #28,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      59: invokestatic  #29                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      62: invokevirtual #30                 // Method onError:(Ljava/lang/Throwable;)V
      65: return
      66: aload_0
      67: getfield      #7                  // Field mode:Lreactor/core/publisher/FluxBufferPredicate$Mode;
      70: getstatic     #36                 // Field reactor/core/publisher/FluxBufferPredicate$Mode.UNTIL:Lreactor/core/publisher/FluxBufferPredicate$Mode;
      73: if_acmpne     97
      76: iload_3
      77: ifeq          97
      80: aload_2
      81: aload_1
      82: invokevirtual #24                 // Method reactor/core/publisher/FluxWindowPredicate$WindowFlux.onNext:(Ljava/lang/Object;)V
      85: aload_2
      86: invokevirtual #37                 // Method reactor/core/publisher/FluxWindowPredicate$WindowFlux.onComplete:()V
      89: aload_0
      90: aconst_null
      91: invokevirtual #38                 // Method offerNewWindow:(Ljava/lang/Object;)V
      94: goto          164
      97: aload_0
      98: getfield      #7                  // Field mode:Lreactor/core/publisher/FluxBufferPredicate$Mode;
     101: getstatic     #39                 // Field reactor/core/publisher/FluxBufferPredicate$Mode.UNTIL_CUT_BEFORE:Lreactor/core/publisher/FluxBufferPredicate$Mode;
     104: if_acmpne     123
     107: iload_3
     108: ifeq          123
     111: aload_2
     112: invokevirtual #37                 // Method reactor/core/publisher/FluxWindowPredicate$WindowFlux.onComplete:()V
     115: aload_0
     116: aload_1
     117: invokevirtual #38                 // Method offerNewWindow:(Ljava/lang/Object;)V
     120: goto          164
     123: aload_0
     124: getfield      #7                  // Field mode:Lreactor/core/publisher/FluxBufferPredicate$Mode;
     127: getstatic     #40                 // Field reactor/core/publisher/FluxBufferPredicate$Mode.WHILE:Lreactor/core/publisher/FluxBufferPredicate$Mode;
     130: if_acmpne     159
     133: iload_3
     134: ifne          159
     137: aload_2
     138: invokevirtual #37                 // Method reactor/core/publisher/FluxWindowPredicate$WindowFlux.onComplete:()V
     141: aload_0
     142: aconst_null
     143: invokevirtual #38                 // Method offerNewWindow:(Ljava/lang/Object;)V
     146: aload_0
     147: getfield      #11                 // Field s:Lorg/reactivestreams/Subscription;
     150: lconst_1
     151: invokeinterface #16,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     156: goto          164
     159: aload_2
     160: aload_1
     161: invokevirtual #24                 // Method reactor/core/publisher/FluxWindowPredicate$WindowFlux.onNext:(Ljava/lang/Object;)V
     164: return
    Exception table:
       from    to  target type
          26    37    40   Class java/lang/Throwable

  public void onError(java.lang.Throwable);
    Code:
       0: getstatic     #41                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #42                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
       8: ifeq          23
      11: aload_0
      12: iconst_1
      13: putfield      #32                 // Field done:Z
      16: aload_0
      17: invokevirtual #31                 // Method drain:()V
      20: goto          36
      23: aload_1
      24: aload_0
      25: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      28: invokeinterface #28,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      33: invokestatic  #43                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      36: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #32                 // Field done:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: getfield      #21                 // Field window:Lreactor/core/publisher/FluxWindowPredicate$WindowFlux;
      12: astore_1
      13: aload_1
      14: ifnull        21
      17: aload_1
      18: invokevirtual #37                 // Method reactor/core/publisher/FluxWindowPredicate$WindowFlux.onComplete:()V
      21: aload_0
      22: aconst_null
      23: putfield      #21                 // Field window:Lreactor/core/publisher/FluxWindowPredicate$WindowFlux;
      26: aload_0
      27: iconst_1
      28: putfield      #32                 // Field done:Z
      31: getstatic     #8                  // Field WINDOW_COUNT:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      34: aload_0
      35: invokevirtual #44                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
      38: pop
      39: aload_0
      40: invokevirtual #31                 // Method drain:()V
      43: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #45                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #11                 // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #46                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      16: if_acmpne     36
      19: aload_0
      20: getfield      #14                 // Field cancelled:I
      23: iconst_1
      24: if_icmpne     31
      27: iconst_1
      28: goto          32
      31: iconst_0
      32: invokestatic  #47                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      35: areturn
      36: aload_1
      37: getstatic     #48                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      40: if_acmpne     51
      43: aload_0
      44: getfield      #5                  // Field prefetch:I
      47: invokestatic  #49                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      50: areturn
      51: aload_1
      52: getstatic     #50                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      55: if_acmpne     66
      58: aload_0
      59: getfield      #32                 // Field done:Z
      62: invokestatic  #47                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      65: areturn
      66: aload_1
      67: getstatic     #51                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      70: if_acmpne     86
      73: aload_0
      74: getfield      #3                  // Field queue:Ljava/util/Queue;
      77: invokeinterface #52,  1           // InterfaceMethod java/util/Queue.size:()I
      82: invokestatic  #49                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      85: areturn
      86: aload_1
      87: getstatic     #53                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
      90: if_acmpne     98
      93: aload_0
      94: getfield      #54                 // Field error:Ljava/lang/Throwable;
      97: areturn
      98: aload_1
      99: getstatic     #55                 // Field reactor/core/Scannable$Attr.REQUESTED_FROM_DOWNSTREAM:Lreactor/core/Scannable$Attr;
     102: if_acmpne     113
     105: aload_0
     106: getfield      #56                 // Field requested:J
     109: invokestatic  #57                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     112: areturn
     113: aload_0
     114: aload_1
     115: invokespecial #58                 // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
     118: areturn

  public java.util.stream.Stream<? extends reactor.core.Scannable> inners();
    Code:
       0: aload_0
       1: getfield      #21                 // Field window:Lreactor/core/publisher/FluxWindowPredicate$WindowFlux;
       4: ifnonnull     13
       7: invokestatic  #59                 // InterfaceMethod java/util/stream/Stream.empty:()Ljava/util/stream/Stream;
      10: goto          20
      13: aload_0
      14: getfield      #21                 // Field window:Lreactor/core/publisher/FluxWindowPredicate$WindowFlux;
      17: invokestatic  #60                 // InterfaceMethod java/util/stream/Stream.of:(Ljava/lang/Object;)Ljava/util/stream/Stream;
      20: areturn

  public reactor.core.CoreSubscriber<? super reactor.core.publisher.Flux<T>> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  void signalAsyncError();
    Code:
       0: getstatic     #41                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokestatic  #61                 // Method reactor/core/Exceptions.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Ljava/lang/Throwable;
       7: astore_1
       8: aload_0
       9: iconst_0
      10: putfield      #62                 // Field windowCount:I
      13: aload_0
      14: getfield      #21                 // Field window:Lreactor/core/publisher/FluxWindowPredicate$WindowFlux;
      17: astore_2
      18: aload_2
      19: ifnull        27
      22: aload_2
      23: aload_1
      24: invokevirtual #63                 // Method reactor/core/publisher/FluxWindowPredicate$WindowFlux.onError:(Ljava/lang/Throwable;)V
      27: aload_0
      28: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      31: aload_1
      32: invokeinterface #64,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      37: aload_0
      38: aconst_null
      39: putfield      #21                 // Field window:Lreactor/core/publisher/FluxWindowPredicate$WindowFlux;
      42: return

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #65                 // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          20
       7: getstatic     #66                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      10: aload_0
      11: lload_1
      12: invokestatic  #67                 // Method reactor/core/publisher/Operators.addCap:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
      15: pop2
      16: aload_0
      17: invokevirtual #31                 // Method drain:()V
      20: return

  public void cancel();
    Code:
       0: getstatic     #68                 // Field CANCELLED:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: iconst_0
       5: iconst_1
       6: invokevirtual #69                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
       9: ifeq          93
      12: getstatic     #8                  // Field WINDOW_COUNT:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      15: aload_0
      16: invokevirtual #44                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
      19: ifne          34
      22: aload_0
      23: getfield      #11                 // Field s:Lorg/reactivestreams/Subscription;
      26: invokeinterface #70,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      31: goto          93
      34: aload_0
      35: getfield      #71                 // Field outputFused:Z
      38: ifne          93
      41: getstatic     #72                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      44: aload_0
      45: invokevirtual #23                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
      48: ifne          93
      51: aload_0
      52: getfield      #3                  // Field queue:Ljava/util/Queue;
      55: invokeinterface #73,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
      60: checkcast     #74                 // class reactor/core/publisher/Flux
      63: dup
      64: astore_1
      65: ifnull        78
      68: aload_1
      69: checkcast     #17                 // class reactor/core/publisher/FluxWindowPredicate$WindowFlux
      72: invokevirtual #75                 // Method reactor/core/publisher/FluxWindowPredicate$WindowFlux.cancel:()V
      75: goto          51
      78: getstatic     #72                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      81: aload_0
      82: invokevirtual #44                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
      85: ifne          89
      88: return
      89: aload_0
      90: invokevirtual #76                 // Method drainLoop:()V
      93: return

  void groupTerminated();
    Code:
       0: aload_0
       1: getfield      #62                 // Field windowCount:I
       4: ifne          8
       7: return
       8: aload_0
       9: aconst_null
      10: putfield      #21                 // Field window:Lreactor/core/publisher/FluxWindowPredicate$WindowFlux;
      13: getstatic     #8                  // Field WINDOW_COUNT:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      16: aload_0
      17: invokevirtual #44                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
      20: ifne          32
      23: aload_0
      24: getfield      #11                 // Field s:Lorg/reactivestreams/Subscription;
      27: invokeinterface #70,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      32: return

  void drain();
    Code:
       0: getstatic     #72                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #23                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifeq          11
      10: return
      11: aload_0
      12: getfield      #71                 // Field outputFused:Z
      15: ifeq          25
      18: aload_0
      19: invokevirtual #77                 // Method drainFused:()V
      22: goto          29
      25: aload_0
      26: invokevirtual #76                 // Method drainLoop:()V
      29: return

  void drainFused();
    Code:
       0: iconst_1
       1: istore_1
       2: aload_0
       3: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       6: astore_2
       7: aload_0
       8: getfield      #3                  // Field queue:Ljava/util/Queue;
      11: astore_3
      12: aload_0
      13: getfield      #14                 // Field cancelled:I
      16: ifeq          26
      19: aload_3
      20: invokeinterface #78,  1           // InterfaceMethod java/util/Queue.clear:()V
      25: return
      26: aload_0
      27: getfield      #32                 // Field done:Z
      30: istore        4
      32: aload_2
      33: aconst_null
      34: invokeinterface #79,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
      39: iload         4
      41: ifeq          69
      44: aload_0
      45: getfield      #54                 // Field error:Ljava/lang/Throwable;
      48: astore        5
      50: aload         5
      52: ifnull        62
      55: aload_0
      56: invokevirtual #80                 // Method signalAsyncError:()V
      59: goto          68
      62: aload_2
      63: invokeinterface #81,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      68: return
      69: getstatic     #72                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      72: aload_0
      73: iload_1
      74: ineg
      75: invokevirtual #82                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
      78: istore_1
      79: iload_1
      80: ifne          86
      83: goto          89
      86: goto          12
      89: return

  void drainLoop();
    Code:
       0: iconst_1
       1: istore_1
       2: aload_0
       3: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       6: astore_2
       7: aload_0
       8: getfield      #3                  // Field queue:Ljava/util/Queue;
      11: astore_3
      12: aload_0
      13: getfield      #56                 // Field requested:J
      16: lstore        4
      18: lconst_0
      19: lstore        6
      21: lload         6
      23: lload         4
      25: lcmp
      26: ifeq          97
      29: aload_0
      30: getfield      #32                 // Field done:Z
      33: istore        8
      35: aload_3
      36: invokeinterface #73,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
      41: checkcast     #74                 // class reactor/core/publisher/Flux
      44: astore        9
      46: aload         9
      48: ifnonnull     55
      51: iconst_1
      52: goto          56
      55: iconst_0
      56: istore        10
      58: aload_0
      59: iload         8
      61: iload         10
      63: aload_2
      64: aload_3
      65: invokevirtual #83                 // Method checkTerminated:(ZZLorg/reactivestreams/Subscriber;Ljava/util/Queue;)Z
      68: ifeq          72
      71: return
      72: iload         10
      74: ifeq          80
      77: goto          97
      80: aload_2
      81: aload         9
      83: invokeinterface #79,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
      88: lload         6
      90: lconst_1
      91: ladd
      92: lstore        6
      94: goto          21
      97: lload         6
      99: lload         4
     101: lcmp
     102: ifne          125
     105: aload_0
     106: aload_0
     107: getfield      #32                 // Field done:Z
     110: aload_3
     111: invokeinterface #84,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
     116: aload_2
     117: aload_3
     118: invokevirtual #83                 // Method checkTerminated:(ZZLorg/reactivestreams/Subscriber;Ljava/util/Queue;)Z
     121: ifeq          125
     124: return
     125: lload         6
     127: lconst_0
     128: lcmp
     129: ifeq          163
     132: aload_0
     133: getfield      #11                 // Field s:Lorg/reactivestreams/Subscription;
     136: lload         6
     138: invokeinterface #16,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     143: lload         4
     145: ldc2_w        #86                 // long 9223372036854775807l
     148: lcmp
     149: ifeq          163
     152: getstatic     #66                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
     155: aload_0
     156: lload         6
     158: lneg
     159: invokevirtual #88                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.addAndGet:(Ljava/lang/Object;J)J
     162: pop2
     163: getstatic     #72                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     166: aload_0
     167: iload_1
     168: ineg
     169: invokevirtual #82                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
     172: istore_1
     173: iload_1
     174: ifne          180
     177: goto          183
     180: goto          12
     183: return

  boolean checkTerminated(boolean, boolean, org.reactivestreams.Subscriber<?>, java.util.Queue<reactor.core.publisher.Flux<T>>);
    Code:
       0: aload_0
       1: getfield      #14                 // Field cancelled:I
       4: ifeq          16
       7: aload         4
       9: invokeinterface #78,  1           // InterfaceMethod java/util/Queue.clear:()V
      14: iconst_1
      15: ireturn
      16: iload_1
      17: ifeq          66
      20: aload_0
      21: getfield      #54                 // Field error:Ljava/lang/Throwable;
      24: astore        5
      26: aload         5
      28: ifnull        54
      31: aload         5
      33: getstatic     #89                 // Field reactor/core/Exceptions.TERMINATED:Ljava/lang/Throwable;
      36: if_acmpeq     54
      39: aload_0
      40: getfield      #3                  // Field queue:Ljava/util/Queue;
      43: invokeinterface #78,  1           // InterfaceMethod java/util/Queue.clear:()V
      48: aload_0
      49: invokevirtual #80                 // Method signalAsyncError:()V
      52: iconst_1
      53: ireturn
      54: iload_2
      55: ifeq          66
      58: aload_3
      59: invokeinterface #81,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      64: iconst_1
      65: ireturn
      66: iconst_0
      67: ireturn

  public reactor.core.publisher.Flux<T> poll();
    Code:
       0: aload_0
       1: getfield      #3                  // Field queue:Ljava/util/Queue;
       4: invokeinterface #73,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
       9: checkcast     #74                 // class reactor/core/publisher/Flux
      12: areturn

  public int size();
    Code:
       0: aload_0
       1: getfield      #3                  // Field queue:Ljava/util/Queue;
       4: invokeinterface #52,  1           // InterfaceMethod java/util/Queue.size:()I
       9: ireturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #3                  // Field queue:Ljava/util/Queue;
       4: invokeinterface #84,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
       9: ireturn

  public void clear();
    Code:
       0: aload_0
       1: getfield      #3                  // Field queue:Ljava/util/Queue;
       4: invokeinterface #78,  1           // InterfaceMethod java/util/Queue.clear:()V
       9: return

  public int requestFusion(int);
    Code:
       0: iload_1
       1: iconst_2
       2: iand
       3: ifeq          13
       6: aload_0
       7: iconst_1
       8: putfield      #71                 // Field outputFused:Z
      11: iconst_2
      12: ireturn
      13: iconst_0
      14: ireturn

  public java.lang.Object poll();
    Code:
       0: aload_0
       1: invokevirtual #91                 // Method poll:()Lreactor/core/publisher/Flux;
       4: areturn

  static {};
    Code:
       0: ldc           #92                 // class reactor/core/publisher/FluxWindowPredicate$WindowPredicateMain
       2: ldc           #93                 // String wip
       4: invokestatic  #94                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #72                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: ldc           #92                 // class reactor/core/publisher/FluxWindowPredicate$WindowPredicateMain
      12: ldc           #95                 // String requested
      14: invokestatic  #96                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      17: putstatic     #66                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      20: ldc           #92                 // class reactor/core/publisher/FluxWindowPredicate$WindowPredicateMain
      22: ldc           #35                 // class java/lang/Throwable
      24: ldc           #97                 // String error
      26: invokestatic  #98                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      29: putstatic     #41                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      32: ldc           #92                 // class reactor/core/publisher/FluxWindowPredicate$WindowPredicateMain
      34: ldc           #99                 // String cancelled
      36: invokestatic  #94                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      39: putstatic     #68                 // Field CANCELLED:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      42: ldc           #92                 // class reactor/core/publisher/FluxWindowPredicate$WindowPredicateMain
      44: ldc           #100                // String windowCount
      46: invokestatic  #94                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      49: putstatic     #8                  // Field WINDOW_COUNT:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      52: return
}
