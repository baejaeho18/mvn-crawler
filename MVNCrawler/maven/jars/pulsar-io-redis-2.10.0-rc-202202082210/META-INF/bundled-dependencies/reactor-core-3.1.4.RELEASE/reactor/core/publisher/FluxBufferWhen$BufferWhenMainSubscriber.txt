Compiled from "FluxBufferWhen.java"
final class reactor.core.publisher.FluxBufferWhen$BufferWhenMainSubscriber<T, OPEN, CLOSE, BUFFER extends java.util.Collection<? super T>> implements reactor.core.publisher.InnerOperator<T, BUFFER> {
  final reactor.core.CoreSubscriber<? super BUFFER> actual;

  final org.reactivestreams.Publisher<? extends OPEN> bufferOpen;

  final java.util.function.Function<? super OPEN, ? extends org.reactivestreams.Publisher<? extends CLOSE>> bufferClose;

  final java.util.function.Supplier<BUFFER> bufferSupplier;

  final reactor.core.Disposable$Composite subscribers;

  final java.util.Queue<BUFFER> queue;

  volatile long requested;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.FluxBufferWhen$BufferWhenMainSubscriber> REQUESTED;

  volatile org.reactivestreams.Subscription s;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxBufferWhen$BufferWhenMainSubscriber, org.reactivestreams.Subscription> S;

  volatile java.lang.Throwable errors;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxBufferWhen$BufferWhenMainSubscriber, java.lang.Throwable> ERRORS;

  volatile int windows;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxBufferWhen$BufferWhenMainSubscriber> WINDOWS;

  volatile boolean done;

  volatile boolean cancelled;

  long index;

  java.util.LinkedHashMap<java.lang.Long, BUFFER> buffers;

  long emitted;

  reactor.core.publisher.FluxBufferWhen$BufferWhenMainSubscriber(reactor.core.CoreSubscriber<? super BUFFER>, java.util.function.Supplier<BUFFER>, java.util.function.Supplier<? extends java.util.Queue<BUFFER>>, org.reactivestreams.Publisher<? extends OPEN>, java.util.function.Function<? super OPEN, ? extends org.reactivestreams.Publisher<? extends CLOSE>>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: aload         4
      12: putfield      #3                  // Field bufferOpen:Lorg/reactivestreams/Publisher;
      15: aload_0
      16: aload         5
      18: putfield      #4                  // Field bufferClose:Ljava/util/function/Function;
      21: aload_0
      22: aload_2
      23: putfield      #5                  // Field bufferSupplier:Ljava/util/function/Supplier;
      26: aload_0
      27: aload_3
      28: invokeinterface #6,  1            // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      33: checkcast     #7                  // class java/util/Queue
      36: putfield      #8                  // Field queue:Ljava/util/Queue;
      39: aload_0
      40: new           #9                  // class java/util/LinkedHashMap
      43: dup
      44: invokespecial #10                 // Method java/util/LinkedHashMap."<init>":()V
      47: putfield      #11                 // Field buffers:Ljava/util/LinkedHashMap;
      50: aload_0
      51: invokestatic  #12                 // Method reactor/core/Disposables.composite:()Lreactor/core/Disposable$Composite;
      54: putfield      #13                 // Field subscribers:Lreactor/core/Disposable$Composite;
      57: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: getstatic     #14                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #15                 // Method reactor/core/publisher/Operators.setOnce:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          20
      11: aload_1
      12: ldc2_w        #17                 // long 9223372036854775807l
      15: invokeinterface #19,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      20: return

  public reactor.core.CoreSubscriber<? super BUFFER> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public void onNext(T);
    Code:
       0: aload_0
       1: dup
       2: astore_2
       3: monitorenter
       4: aload_0
       5: getfield      #11                 // Field buffers:Ljava/util/LinkedHashMap;
       8: astore_3
       9: aload_3
      10: ifnonnull     16
      13: aload_2
      14: monitorexit
      15: return
      16: aload_3
      17: invokeinterface #20,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
      22: invokeinterface #21,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      27: astore        4
      29: aload         4
      31: invokeinterface #22,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      36: ifeq          63
      39: aload         4
      41: invokeinterface #23,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      46: checkcast     #24                 // class java/util/Collection
      49: astore        5
      51: aload         5
      53: aload_1
      54: invokeinterface #25,  2           // InterfaceMethod java/util/Collection.add:(Ljava/lang/Object;)Z
      59: pop
      60: goto          29
      63: aload_2
      64: monitorexit
      65: goto          75
      68: astore        6
      70: aload_2
      71: monitorexit
      72: aload         6
      74: athrow
      75: return
    Exception table:
       from    to  target type
           4    15    68   any
          16    65    68   any
          68    72    68   any

  public void onError(java.lang.Throwable);
    Code:
       0: getstatic     #26                 // Field ERRORS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #27                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
       8: ifeq          51
      11: aload_0
      12: getfield      #13                 // Field subscribers:Lreactor/core/Disposable$Composite;
      15: invokeinterface #28,  1           // InterfaceMethod reactor/core/Disposable$Composite.dispose:()V
      20: aload_0
      21: dup
      22: astore_2
      23: monitorenter
      24: aload_0
      25: aconst_null
      26: putfield      #11                 // Field buffers:Ljava/util/LinkedHashMap;
      29: aload_2
      30: monitorexit
      31: goto          39
      34: astore_3
      35: aload_2
      36: monitorexit
      37: aload_3
      38: athrow
      39: aload_0
      40: iconst_1
      41: putfield      #29                 // Field done:Z
      44: aload_0
      45: invokevirtual #30                 // Method drain:()V
      48: goto          64
      51: aload_1
      52: aload_0
      53: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      56: invokeinterface #31,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      61: invokestatic  #32                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      64: return
    Exception table:
       from    to  target type
          24    31    34   any
          34    37    34   any

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #13                 // Field subscribers:Lreactor/core/Disposable$Composite;
       4: invokeinterface #28,  1           // InterfaceMethod reactor/core/Disposable$Composite.dispose:()V
       9: aload_0
      10: dup
      11: astore_1
      12: monitorenter
      13: aload_0
      14: getfield      #11                 // Field buffers:Ljava/util/LinkedHashMap;
      17: astore_2
      18: aload_2
      19: ifnonnull     25
      22: aload_1
      23: monitorexit
      24: return
      25: aload_2
      26: invokeinterface #20,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
      31: invokeinterface #21,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      36: astore_3
      37: aload_3
      38: invokeinterface #22,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      43: ifeq          72
      46: aload_3
      47: invokeinterface #23,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      52: checkcast     #24                 // class java/util/Collection
      55: astore        4
      57: aload_0
      58: getfield      #8                  // Field queue:Ljava/util/Queue;
      61: aload         4
      63: invokeinterface #33,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
      68: pop
      69: goto          37
      72: aload_0
      73: aconst_null
      74: putfield      #11                 // Field buffers:Ljava/util/LinkedHashMap;
      77: aload_1
      78: monitorexit
      79: goto          89
      82: astore        5
      84: aload_1
      85: monitorexit
      86: aload         5
      88: athrow
      89: aload_0
      90: iconst_1
      91: putfield      #29                 // Field done:Z
      94: aload_0
      95: invokevirtual #30                 // Method drain:()V
      98: return
    Exception table:
       from    to  target type
          13    24    82   any
          25    79    82   any
          82    86    82   any

  public void request(long);
    Code:
       0: getstatic     #34                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
       3: aload_0
       4: lload_1
       5: invokestatic  #35                 // Method reactor/core/publisher/Operators.addCap:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
       8: pop2
       9: aload_0
      10: invokevirtual #30                 // Method drain:()V
      13: return

  public void cancel();
    Code:
       0: getstatic     #14                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokestatic  #36                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
       7: ifeq          62
      10: aload_0
      11: iconst_1
      12: putfield      #37                 // Field cancelled:Z
      15: aload_0
      16: getfield      #13                 // Field subscribers:Lreactor/core/Disposable$Composite;
      19: invokeinterface #28,  1           // InterfaceMethod reactor/core/Disposable$Composite.dispose:()V
      24: aload_0
      25: dup
      26: astore_1
      27: monitorenter
      28: aload_0
      29: aconst_null
      30: putfield      #11                 // Field buffers:Ljava/util/LinkedHashMap;
      33: aload_1
      34: monitorexit
      35: goto          43
      38: astore_2
      39: aload_1
      40: monitorexit
      41: aload_2
      42: athrow
      43: getstatic     #38                 // Field WINDOWS:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      46: aload_0
      47: invokevirtual #39                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
      50: ifeq          62
      53: aload_0
      54: getfield      #8                  // Field queue:Ljava/util/Queue;
      57: invokeinterface #40,  1           // InterfaceMethod java/util/Queue.clear:()V
      62: return
    Exception table:
       from    to  target type
          28    35    38   any
          38    41    38   any

  void drain();
    Code:
       0: getstatic     #38                 // Field WINDOWS:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #39                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifeq          11
      10: return
      11: iconst_1
      12: istore_1
      13: aload_0
      14: getfield      #41                 // Field emitted:J
      17: lstore_2
      18: aload_0
      19: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      22: astore        4
      24: aload_0
      25: getfield      #8                  // Field queue:Ljava/util/Queue;
      28: astore        5
      30: aload_0
      31: getfield      #42                 // Field requested:J
      34: lstore        6
      36: lload_2
      37: lload         6
      39: lcmp
      40: ifeq          168
      43: aload_0
      44: getfield      #37                 // Field cancelled:Z
      47: ifeq          58
      50: aload         5
      52: invokeinterface #40,  1           // InterfaceMethod java/util/Queue.clear:()V
      57: return
      58: aload_0
      59: getfield      #29                 // Field done:Z
      62: istore        8
      64: iload         8
      66: ifeq          102
      69: aload_0
      70: getfield      #43                 // Field errors:Ljava/lang/Throwable;
      73: ifnull        102
      76: aload         5
      78: invokeinterface #40,  1           // InterfaceMethod java/util/Queue.clear:()V
      83: getstatic     #26                 // Field ERRORS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      86: aload_0
      87: invokestatic  #44                 // Method reactor/core/Exceptions.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Ljava/lang/Throwable;
      90: astore        9
      92: aload         4
      94: aload         9
      96: invokeinterface #45,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
     101: return
     102: aload         5
     104: invokeinterface #46,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
     109: checkcast     #24                 // class java/util/Collection
     112: astore        9
     114: aload         9
     116: ifnonnull     123
     119: iconst_1
     120: goto          124
     123: iconst_0
     124: istore        10
     126: iload         8
     128: ifeq          144
     131: iload         10
     133: ifeq          144
     136: aload         4
     138: invokeinterface #47,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
     143: return
     144: iload         10
     146: ifeq          152
     149: goto          168
     152: aload         4
     154: aload         9
     156: invokeinterface #48,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
     161: lload_2
     162: lconst_1
     163: ladd
     164: lstore_2
     165: goto          36
     168: lload_2
     169: lload         6
     171: lcmp
     172: ifne          248
     175: aload_0
     176: getfield      #37                 // Field cancelled:Z
     179: ifeq          190
     182: aload         5
     184: invokeinterface #40,  1           // InterfaceMethod java/util/Queue.clear:()V
     189: return
     190: aload_0
     191: getfield      #29                 // Field done:Z
     194: ifeq          248
     197: aload_0
     198: getfield      #43                 // Field errors:Ljava/lang/Throwable;
     201: ifnull        230
     204: aload         5
     206: invokeinterface #40,  1           // InterfaceMethod java/util/Queue.clear:()V
     211: getstatic     #26                 // Field ERRORS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     214: aload_0
     215: invokestatic  #44                 // Method reactor/core/Exceptions.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Ljava/lang/Throwable;
     218: astore        8
     220: aload         4
     222: aload         8
     224: invokeinterface #45,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
     229: return
     230: aload         5
     232: invokeinterface #49,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
     237: ifeq          248
     240: aload         4
     242: invokeinterface #47,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
     247: return
     248: aload_0
     249: lload_2
     250: putfield      #41                 // Field emitted:J
     253: getstatic     #38                 // Field WINDOWS:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     256: aload_0
     257: iload_1
     258: ineg
     259: invokevirtual #50                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
     262: istore_1
     263: iload_1
     264: ifne          270
     267: goto          273
     270: goto          30
     273: return

  void open(OPEN);
    Code:
       0: aload_0
       1: getfield      #5                  // Field bufferSupplier:Ljava/util/function/Supplier;
       4: invokeinterface #6,  1            // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
       9: ldc           #51                 // String The bufferSupplier returned a null Collection
      11: invokestatic  #52                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      14: checkcast     #24                 // class java/util/Collection
      17: astore_3
      18: aload_0
      19: getfield      #4                  // Field bufferClose:Ljava/util/function/Function;
      22: aload_1
      23: invokeinterface #53,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      28: ldc           #54                 // String The bufferClose returned a null Publisher
      30: invokestatic  #52                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      33: checkcast     #55                 // class org/reactivestreams/Publisher
      36: astore_2
      37: goto          127
      40: astore        4
      42: aload         4
      44: invokestatic  #57                 // Method reactor/core/Exceptions.throwIfFatal:(Ljava/lang/Throwable;)V
      47: getstatic     #14                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      50: aload_0
      51: invokestatic  #36                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
      54: pop
      55: getstatic     #26                 // Field ERRORS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      58: aload_0
      59: aload         4
      61: invokestatic  #27                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
      64: ifeq          112
      67: aload_0
      68: getfield      #13                 // Field subscribers:Lreactor/core/Disposable$Composite;
      71: invokeinterface #28,  1           // InterfaceMethod reactor/core/Disposable$Composite.dispose:()V
      76: aload_0
      77: dup
      78: astore        5
      80: monitorenter
      81: aload_0
      82: aconst_null
      83: putfield      #11                 // Field buffers:Ljava/util/LinkedHashMap;
      86: aload         5
      88: monitorexit
      89: goto          100
      92: astore        6
      94: aload         5
      96: monitorexit
      97: aload         6
      99: athrow
     100: aload_0
     101: iconst_1
     102: putfield      #29                 // Field done:Z
     105: aload_0
     106: invokevirtual #30                 // Method drain:()V
     109: goto          126
     112: aload         4
     114: aload_0
     115: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     118: invokeinterface #31,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
     123: invokestatic  #32                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
     126: return
     127: aload_0
     128: getfield      #58                 // Field index:J
     131: lstore        4
     133: aload_0
     134: lload         4
     136: lconst_1
     137: ladd
     138: putfield      #58                 // Field index:J
     141: aload_0
     142: dup
     143: astore        6
     145: monitorenter
     146: aload_0
     147: getfield      #11                 // Field buffers:Ljava/util/LinkedHashMap;
     150: astore        7
     152: aload         7
     154: ifnonnull     161
     157: aload         6
     159: monitorexit
     160: return
     161: aload         7
     163: lload         4
     165: invokestatic  #59                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     168: aload_3
     169: invokeinterface #60,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     174: pop
     175: aload         6
     177: monitorexit
     178: goto          189
     181: astore        8
     183: aload         6
     185: monitorexit
     186: aload         8
     188: athrow
     189: new           #61                 // class reactor/core/publisher/FluxBufferWhen$BufferWhenCloseSubscriber
     192: dup
     193: aload_0
     194: lload         4
     196: invokespecial #62                 // Method reactor/core/publisher/FluxBufferWhen$BufferWhenCloseSubscriber."<init>":(Lreactor/core/publisher/FluxBufferWhen$BufferWhenMainSubscriber;J)V
     199: astore        6
     201: aload_0
     202: getfield      #13                 // Field subscribers:Lreactor/core/Disposable$Composite;
     205: aload         6
     207: invokeinterface #63,  2           // InterfaceMethod reactor/core/Disposable$Composite.add:(Lreactor/core/Disposable;)Z
     212: pop
     213: aload_2
     214: aload         6
     216: invokeinterface #64,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
     221: return
    Exception table:
       from    to  target type
           0    37    40   Class java/lang/Throwable
          81    89    92   any
          92    97    92   any
         146   160   181   any
         161   178   181   any
         181   186   181   any

  void openComplete(reactor.core.publisher.FluxBufferWhen$BufferWhenOpenSubscriber<OPEN>);
    Code:
       0: aload_0
       1: getfield      #13                 // Field subscribers:Lreactor/core/Disposable$Composite;
       4: aload_1
       5: invokeinterface #65,  2           // InterfaceMethod reactor/core/Disposable$Composite.remove:(Lreactor/core/Disposable;)Z
      10: pop
      11: aload_0
      12: getfield      #13                 // Field subscribers:Lreactor/core/Disposable$Composite;
      15: invokeinterface #66,  1           // InterfaceMethod reactor/core/Disposable$Composite.size:()I
      20: ifne          40
      23: getstatic     #14                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      26: aload_0
      27: invokestatic  #36                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
      30: pop
      31: aload_0
      32: iconst_1
      33: putfield      #29                 // Field done:Z
      36: aload_0
      37: invokevirtual #30                 // Method drain:()V
      40: return

  void close(reactor.core.publisher.FluxBufferWhen$BufferWhenCloseSubscriber<T, BUFFER>, long);
    Code:
       0: aload_0
       1: getfield      #13                 // Field subscribers:Lreactor/core/Disposable$Composite;
       4: aload_1
       5: invokeinterface #65,  2           // InterfaceMethod reactor/core/Disposable$Composite.remove:(Lreactor/core/Disposable;)Z
      10: pop
      11: iconst_0
      12: istore        4
      14: aload_0
      15: getfield      #13                 // Field subscribers:Lreactor/core/Disposable$Composite;
      18: invokeinterface #66,  1           // InterfaceMethod reactor/core/Disposable$Composite.size:()I
      23: ifne          37
      26: iconst_1
      27: istore        4
      29: getstatic     #14                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      32: aload_0
      33: invokestatic  #36                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
      36: pop
      37: aload_0
      38: dup
      39: astore        5
      41: monitorenter
      42: aload_0
      43: getfield      #11                 // Field buffers:Ljava/util/LinkedHashMap;
      46: astore        6
      48: aload         6
      50: ifnonnull     57
      53: aload         5
      55: monitorexit
      56: return
      57: aload_0
      58: getfield      #8                  // Field queue:Ljava/util/Queue;
      61: aload_0
      62: getfield      #11                 // Field buffers:Ljava/util/LinkedHashMap;
      65: lload_2
      66: invokestatic  #59                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      69: invokevirtual #67                 // Method java/util/LinkedHashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      72: invokeinterface #33,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
      77: pop
      78: aload         5
      80: monitorexit
      81: goto          92
      84: astore        7
      86: aload         5
      88: monitorexit
      89: aload         7
      91: athrow
      92: iload         4
      94: ifeq          102
      97: aload_0
      98: iconst_1
      99: putfield      #29                 // Field done:Z
     102: aload_0
     103: invokevirtual #30                 // Method drain:()V
     106: return
    Exception table:
       from    to  target type
          42    56    84   any
          57    81    84   any
          84    89    84   any

  void boundaryError(reactor.core.Disposable, java.lang.Throwable);
    Code:
       0: getstatic     #14                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokestatic  #36                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
       7: pop
       8: aload_0
       9: getfield      #13                 // Field subscribers:Lreactor/core/Disposable$Composite;
      12: aload_1
      13: invokeinterface #65,  2           // InterfaceMethod reactor/core/Disposable$Composite.remove:(Lreactor/core/Disposable;)Z
      18: pop
      19: getstatic     #26                 // Field ERRORS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      22: aload_0
      23: aload_2
      24: invokestatic  #27                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
      27: ifeq          72
      30: aload_0
      31: getfield      #13                 // Field subscribers:Lreactor/core/Disposable$Composite;
      34: invokeinterface #28,  1           // InterfaceMethod reactor/core/Disposable$Composite.dispose:()V
      39: aload_0
      40: dup
      41: astore_3
      42: monitorenter
      43: aload_0
      44: aconst_null
      45: putfield      #11                 // Field buffers:Ljava/util/LinkedHashMap;
      48: aload_3
      49: monitorexit
      50: goto          60
      53: astore        4
      55: aload_3
      56: monitorexit
      57: aload         4
      59: athrow
      60: aload_0
      61: iconst_1
      62: putfield      #29                 // Field done:Z
      65: aload_0
      66: invokevirtual #30                 // Method drain:()V
      69: goto          85
      72: aload_2
      73: aload_0
      74: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      77: invokeinterface #31,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      82: invokestatic  #32                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      85: return
    Exception table:
       from    to  target type
          43    50    53   any
          53    57    53   any

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #68                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #69                 // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #70                 // Field reactor/core/Scannable$Attr.ACTUAL:Lreactor/core/Scannable$Attr;
      16: if_acmpne     24
      19: aload_0
      20: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      23: areturn
      24: aload_1
      25: getstatic     #71                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      28: if_acmpne     37
      31: ldc           #73                 // int 2147483647
      33: invokestatic  #74                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      36: areturn
      37: aload_1
      38: getstatic     #75                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      41: if_acmpne     75
      44: aload_0
      45: getfield      #11                 // Field buffers:Ljava/util/LinkedHashMap;
      48: invokevirtual #76                 // Method java/util/LinkedHashMap.values:()Ljava/util/Collection;
      51: invokeinterface #77,  1           // InterfaceMethod java/util/Collection.stream:()Ljava/util/stream/Stream;
      56: invokedynamic #78,  0             // InvokeDynamic #0:applyAsInt:()Ljava/util/function/ToIntFunction;
      61: invokeinterface #79,  2           // InterfaceMethod java/util/stream/Stream.mapToInt:(Ljava/util/function/ToIntFunction;)Ljava/util/stream/IntStream;
      66: invokeinterface #80,  1           // InterfaceMethod java/util/stream/IntStream.sum:()I
      71: invokestatic  #74                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      74: areturn
      75: aload_1
      76: getstatic     #81                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      79: if_acmpne     90
      82: aload_0
      83: getfield      #37                 // Field cancelled:Z
      86: invokestatic  #82                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      89: areturn
      90: aload_1
      91: getstatic     #83                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      94: if_acmpne     105
      97: aload_0
      98: getfield      #29                 // Field done:Z
     101: invokestatic  #82                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     104: areturn
     105: aload_1
     106: getstatic     #84                 // Field reactor/core/Scannable$Attr.REQUESTED_FROM_DOWNSTREAM:Lreactor/core/Scannable$Attr;
     109: if_acmpne     120
     112: aload_0
     113: getfield      #42                 // Field requested:J
     116: invokestatic  #59                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     119: areturn
     120: aload_1
     121: getstatic     #85                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
     124: if_acmpne     132
     127: aload_0
     128: getfield      #43                 // Field errors:Ljava/lang/Throwable;
     131: areturn
     132: aconst_null
     133: areturn

  static {};
    Code:
       0: ldc           #86                 // class reactor/core/publisher/FluxBufferWhen$BufferWhenMainSubscriber
       2: ldc           #87                 // String requested
       4: invokestatic  #88                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
       7: putstatic     #34                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      10: ldc           #86                 // class reactor/core/publisher/FluxBufferWhen$BufferWhenMainSubscriber
      12: ldc           #89                 // class org/reactivestreams/Subscription
      14: ldc           #90                 // String s
      16: invokestatic  #91                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      19: putstatic     #14                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      22: ldc           #86                 // class reactor/core/publisher/FluxBufferWhen$BufferWhenMainSubscriber
      24: ldc           #56                 // class java/lang/Throwable
      26: ldc           #92                 // String errors
      28: invokestatic  #91                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      31: putstatic     #26                 // Field ERRORS:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      34: ldc           #86                 // class reactor/core/publisher/FluxBufferWhen$BufferWhenMainSubscriber
      36: ldc           #93                 // String windows
      38: invokestatic  #94                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      41: putstatic     #38                 // Field WINDOWS:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      44: return
}
