Compiled from "FluxOnBackpressureBufferStrategy.java"
final class reactor.core.publisher.FluxOnBackpressureBufferStrategy$BackpressureBufferDropOldestSubscriber<T> extends java.util.ArrayDeque<T> implements reactor.core.publisher.InnerOperator<T, T> {
  final reactor.core.CoreSubscriber<? super T> actual;

  final int bufferSize;

  final java.util.function.Consumer<? super T> onOverflow;

  final boolean delayError;

  final reactor.core.publisher.BufferOverflowStrategy overflowStrategy;

  org.reactivestreams.Subscription s;

  volatile boolean cancelled;

  volatile boolean done;

  java.lang.Throwable error;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxOnBackpressureBufferStrategy$BackpressureBufferDropOldestSubscriber> WIP;

  volatile long requested;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.FluxOnBackpressureBufferStrategy$BackpressureBufferDropOldestSubscriber> REQUESTED;

  reactor.core.publisher.FluxOnBackpressureBufferStrategy$BackpressureBufferDropOldestSubscriber(reactor.core.CoreSubscriber<? super T>, int, boolean, java.util.function.Consumer<? super T>, reactor.core.publisher.BufferOverflowStrategy);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/util/ArrayDeque."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: iload_3
      11: putfield      #3                  // Field delayError:Z
      14: aload_0
      15: aload         4
      17: putfield      #4                  // Field onOverflow:Ljava/util/function/Consumer;
      20: aload_0
      21: aload         5
      23: putfield      #5                  // Field overflowStrategy:Lreactor/core/publisher/BufferOverflowStrategy;
      26: aload_0
      27: iload_2
      28: putfield      #6                  // Field bufferSize:I
      31: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #7                  // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #8                  // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #9                  // Field reactor/core/Scannable$Attr.REQUESTED_FROM_DOWNSTREAM:Lreactor/core/Scannable$Attr;
      16: if_acmpne     27
      19: aload_0
      20: getfield      #10                 // Field requested:J
      23: invokestatic  #11                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      26: areturn
      27: aload_1
      28: getstatic     #12                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      31: if_acmpne     57
      34: aload_0
      35: getfield      #13                 // Field done:Z
      38: ifeq          52
      41: aload_0
      42: invokevirtual #14                 // Method isEmpty:()Z
      45: ifeq          52
      48: iconst_1
      49: goto          53
      52: iconst_0
      53: invokestatic  #15                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      56: areturn
      57: aload_1
      58: getstatic     #16                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      61: if_acmpne     72
      64: aload_0
      65: getfield      #17                 // Field cancelled:Z
      68: invokestatic  #15                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      71: areturn
      72: aload_1
      73: getstatic     #18                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      76: if_acmpne     87
      79: aload_0
      80: invokevirtual #19                 // Method size:()I
      83: invokestatic  #20                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      86: areturn
      87: aload_1
      88: getstatic     #21                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
      91: if_acmpne     99
      94: aload_0
      95: getfield      #22                 // Field error:Ljava/lang/Throwable;
      98: areturn
      99: aload_1
     100: getstatic     #23                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
     103: if_acmpne     112
     106: ldc           #25                 // int 2147483647
     108: invokestatic  #20                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     111: areturn
     112: aload_1
     113: getstatic     #26                 // Field reactor/core/Scannable$Attr.DELAY_ERROR:Lreactor/core/Scannable$Attr;
     116: if_acmpne     127
     119: aload_0
     120: getfield      #3                  // Field delayError:Z
     123: invokestatic  #15                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     126: areturn
     127: aload_0
     128: aload_1
     129: invokespecial #27                 // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
     132: areturn

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #8                  // Field s:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #28                 // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          35
      11: aload_0
      12: aload_1
      13: putfield      #8                  // Field s:Lorg/reactivestreams/Subscription;
      16: aload_0
      17: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      20: aload_0
      21: invokeinterface #29,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      26: aload_1
      27: ldc2_w        #31                 // long 9223372036854775807l
      30: invokeinterface #33,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      35: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #13                 // Field done:Z
       4: ifeq          21
       7: aload_1
       8: aload_0
       9: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      12: invokeinterface #34,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #35                 // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      20: return
      21: iconst_0
      22: istore_2
      23: iconst_0
      24: istore_3
      25: aload_1
      26: astore        4
      28: aload_0
      29: dup
      30: astore        5
      32: monitorenter
      33: aload_0
      34: invokevirtual #19                 // Method size:()I
      37: aload_0
      38: getfield      #6                  // Field bufferSize:I
      41: if_icmpne     107
      44: iconst_1
      45: istore_2
      46: getstatic     #36                 // Field reactor/core/publisher/FluxOnBackpressureBufferStrategy$1.$SwitchMap$reactor$core$publisher$BufferOverflowStrategy:[I
      49: aload_0
      50: getfield      #5                  // Field overflowStrategy:Lreactor/core/publisher/BufferOverflowStrategy;
      53: invokevirtual #37                 // Method reactor/core/publisher/BufferOverflowStrategy.ordinal:()I
      56: iaload
      57: tableswitch   { // 1 to 3
                     1: 84
                     2: 99
                     3: 102
               default: 102
          }
      84: aload_0
      85: invokevirtual #38                 // Method pollFirst:()Ljava/lang/Object;
      88: astore        4
      90: aload_0
      91: aload_1
      92: invokevirtual #39                 // Method offer:(Ljava/lang/Object;)Z
      95: pop
      96: goto          113
      99: goto          113
     102: iconst_1
     103: istore_3
     104: goto          113
     107: aload_0
     108: aload_1
     109: invokevirtual #39                 // Method offer:(Ljava/lang/Object;)Z
     112: pop
     113: aload         5
     115: monitorexit
     116: goto          127
     119: astore        6
     121: aload         5
     123: monitorexit
     124: aload         6
     126: athrow
     127: iload_2
     128: ifeq          183
     131: aload_0
     132: getfield      #4                  // Field onOverflow:Ljava/util/function/Consumer;
     135: ifnull        183
     138: aload_0
     139: getfield      #4                  // Field onOverflow:Ljava/util/function/Consumer;
     142: aload         4
     144: invokeinterface #40,  2           // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
     149: goto          183
     152: astore        5
     154: aload_0
     155: getfield      #8                  // Field s:Lorg/reactivestreams/Subscription;
     158: aload         5
     160: aload         4
     162: aload_0
     163: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     166: invokeinterface #34,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
     171: invokestatic  #42                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
     174: astore        6
     176: aload_0
     177: aload         6
     179: invokevirtual #43                 // Method onError:(Ljava/lang/Throwable;)V
     182: return
     183: iload_3
     184: ifeq          216
     187: aload_0
     188: getfield      #8                  // Field s:Lorg/reactivestreams/Subscription;
     191: invokestatic  #44                 // Method reactor/core/Exceptions.failWithOverflow:()Ljava/lang/IllegalStateException;
     194: aload         4
     196: aload_0
     197: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     200: invokeinterface #34,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
     205: invokestatic  #42                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
     208: astore        5
     210: aload_0
     211: aload         5
     213: invokevirtual #43                 // Method onError:(Ljava/lang/Throwable;)V
     216: iload_3
     217: ifne          228
     220: iload_2
     221: ifne          228
     224: aload_0
     225: invokevirtual #45                 // Method drain:()V
     228: return
    Exception table:
       from    to  target type
          33   116   119   any
         119   124   119   any
         138   149   152   Class java/lang/Throwable

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #13                 // Field done:Z
       4: ifeq          21
       7: aload_1
       8: aload_0
       9: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      12: invokeinterface #34,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #46                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      20: return
      21: aload_0
      22: aload_1
      23: putfield      #22                 // Field error:Ljava/lang/Throwable;
      26: aload_0
      27: iconst_1
      28: putfield      #13                 // Field done:Z
      31: aload_0
      32: invokevirtual #45                 // Method drain:()V
      35: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #13                 // Field done:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #13                 // Field done:Z
      13: aload_0
      14: invokevirtual #45                 // Method drain:()V
      17: return

  void drain();
    Code:
       0: getstatic     #47                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #48                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifeq          11
      10: return
      11: iconst_1
      12: istore_1
      13: aload_0
      14: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      17: astore_2
      18: aload_2
      19: ifnull        28
      22: aload_0
      23: aload_2
      24: invokevirtual #49                 // Method innerDrain:(Lorg/reactivestreams/Subscriber;)V
      27: return
      28: getstatic     #47                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      31: aload_0
      32: iload_1
      33: ineg
      34: invokevirtual #50                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
      37: istore_1
      38: iload_1
      39: ifne          45
      42: goto          48
      45: goto          13
      48: return

  void innerDrain(org.reactivestreams.Subscriber<? super T>);
    Code:
       0: iconst_1
       1: istore_2
       2: aload_0
       3: getfield      #10                 // Field requested:J
       6: lstore_3
       7: lconst_0
       8: lstore        5
      10: lload_3
      11: lload         5
      13: lcmp
      14: ifeq          98
      17: aload_0
      18: getfield      #13                 // Field done:Z
      21: istore        7
      23: aload_0
      24: dup
      25: astore        9
      27: monitorenter
      28: aload_0
      29: invokevirtual #51                 // Method poll:()Ljava/lang/Object;
      32: astore        8
      34: aload         9
      36: monitorexit
      37: goto          48
      40: astore        10
      42: aload         9
      44: monitorexit
      45: aload         10
      47: athrow
      48: aload         8
      50: ifnonnull     57
      53: iconst_1
      54: goto          58
      57: iconst_0
      58: istore        9
      60: aload_0
      61: iload         7
      63: iload         9
      65: aload_1
      66: invokevirtual #52                 // Method checkTerminated:(ZZLorg/reactivestreams/Subscriber;)Z
      69: ifeq          73
      72: return
      73: iload         9
      75: ifeq          81
      78: goto          98
      81: aload_1
      82: aload         8
      84: invokeinterface #53,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
      89: lload         5
      91: lconst_1
      92: ladd
      93: lstore        5
      95: goto          10
      98: lload_3
      99: lload         5
     101: lcmp
     102: ifne          145
     105: aload_0
     106: dup
     107: astore        8
     109: monitorenter
     110: aload_0
     111: invokevirtual #14                 // Method isEmpty:()Z
     114: istore        7
     116: aload         8
     118: monitorexit
     119: goto          130
     122: astore        11
     124: aload         8
     126: monitorexit
     127: aload         11
     129: athrow
     130: aload_0
     131: aload_0
     132: getfield      #13                 // Field done:Z
     135: iload         7
     137: aload_1
     138: invokevirtual #52                 // Method checkTerminated:(ZZLorg/reactivestreams/Subscriber;)Z
     141: ifeq          145
     144: return
     145: lload         5
     147: lconst_0
     148: lcmp
     149: ifeq          170
     152: lload_3
     153: ldc2_w        #31                 // long 9223372036854775807l
     156: lcmp
     157: ifeq          170
     160: getstatic     #54                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
     163: aload_0
     164: lload         5
     166: invokestatic  #55                 // Method reactor/core/publisher/Operators.produced:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
     169: pop2
     170: getstatic     #47                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     173: aload_0
     174: iload_2
     175: ineg
     176: invokevirtual #50                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
     179: istore_2
     180: iload_2
     181: ifne          187
     184: goto          190
     187: goto          2
     190: return
    Exception table:
       from    to  target type
          28    37    40   any
          40    45    40   any
         110   119   122   any
         122   127   122   any

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #56                 // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          20
       7: getstatic     #54                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      10: aload_0
      11: lload_1
      12: invokestatic  #57                 // Method reactor/core/publisher/Operators.addCap:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
      15: pop2
      16: aload_0
      17: invokevirtual #45                 // Method drain:()V
      20: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #17                 // Field cancelled:Z
       4: ifne          49
       7: aload_0
       8: iconst_1
       9: putfield      #17                 // Field cancelled:Z
      12: aload_0
      13: getfield      #8                  // Field s:Lorg/reactivestreams/Subscription;
      16: invokeinterface #58,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      21: getstatic     #47                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      24: aload_0
      25: invokevirtual #48                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
      28: ifne          49
      31: aload_0
      32: dup
      33: astore_1
      34: monitorenter
      35: aload_0
      36: invokevirtual #59                 // Method clear:()V
      39: aload_1
      40: monitorexit
      41: goto          49
      44: astore_2
      45: aload_1
      46: monitorexit
      47: aload_2
      48: athrow
      49: return
    Exception table:
       from    to  target type
          35    41    44   any
          44    47    44   any

  public reactor.core.CoreSubscriber<? super T> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  boolean checkTerminated(boolean, boolean, org.reactivestreams.Subscriber<? super T>);
    Code:
       0: aload_0
       1: getfield      #17                 // Field cancelled:Z
       4: ifeq          41
       7: aload_0
       8: getfield      #8                  // Field s:Lorg/reactivestreams/Subscription;
      11: invokeinterface #58,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      16: aload_0
      17: dup
      18: astore        4
      20: monitorenter
      21: aload_0
      22: invokevirtual #59                 // Method clear:()V
      25: aload         4
      27: monitorexit
      28: goto          39
      31: astore        5
      33: aload         4
      35: monitorexit
      36: aload         5
      38: athrow
      39: iconst_1
      40: ireturn
      41: iload_1
      42: ifeq          142
      45: aload_0
      46: getfield      #3                  // Field delayError:Z
      49: ifeq          86
      52: iload_2
      53: ifeq          142
      56: aload_0
      57: getfield      #22                 // Field error:Ljava/lang/Throwable;
      60: astore        4
      62: aload         4
      64: ifnull        78
      67: aload_3
      68: aload         4
      70: invokeinterface #60,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      75: goto          84
      78: aload_3
      79: invokeinterface #61,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      84: iconst_1
      85: ireturn
      86: aload_0
      87: getfield      #22                 // Field error:Ljava/lang/Throwable;
      90: astore        4
      92: aload         4
      94: ifnull        130
      97: aload_0
      98: dup
      99: astore        5
     101: monitorenter
     102: aload_0
     103: invokevirtual #59                 // Method clear:()V
     106: aload         5
     108: monitorexit
     109: goto          120
     112: astore        6
     114: aload         5
     116: monitorexit
     117: aload         6
     119: athrow
     120: aload_3
     121: aload         4
     123: invokeinterface #60,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
     128: iconst_1
     129: ireturn
     130: iload_2
     131: ifeq          142
     134: aload_3
     135: invokeinterface #61,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
     140: iconst_1
     141: ireturn
     142: iconst_0
     143: ireturn
    Exception table:
       from    to  target type
          21    28    31   any
          31    36    31   any
         102   109   112   any
         112   117   112   any

  static {};
    Code:
       0: ldc           #62                 // class reactor/core/publisher/FluxOnBackpressureBufferStrategy$BackpressureBufferDropOldestSubscriber
       2: ldc           #63                 // String wip
       4: invokestatic  #64                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #47                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: ldc           #62                 // class reactor/core/publisher/FluxOnBackpressureBufferStrategy$BackpressureBufferDropOldestSubscriber
      12: ldc           #65                 // String requested
      14: invokestatic  #66                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      17: putstatic     #54                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      20: return
}
