Compiled from "FluxMergeOrdered.java"
final class reactor.core.publisher.FluxMergeOrdered<T> extends reactor.core.publisher.Flux<T> implements reactor.core.Scannable {
  final int prefetch;

  final java.util.function.Supplier<java.util.Queue<T>> queueSupplier;

  final java.util.Comparator<? super T> valueComparator;

  final org.reactivestreams.Publisher<? extends T>[] sources;

  reactor.core.publisher.FluxMergeOrdered(int, java.util.function.Supplier<java.util.Queue<T>>, java.util.Comparator<? super T>, org.reactivestreams.Publisher<? extends T>...);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/Flux."<init>":()V
       4: iload_1
       5: ifgt          35
       8: new           #2                  // class java/lang/IllegalArgumentException
      11: dup
      12: new           #3                  // class java/lang/StringBuilder
      15: dup
      16: invokespecial #4                  // Method java/lang/StringBuilder."<init>":()V
      19: ldc           #5                  // String prefetch > 0 required but it was
      21: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: iload_1
      25: invokevirtual #7                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      28: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      31: invokespecial #9                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      34: athrow
      35: aload_0
      36: aload         4
      38: ldc           #10                 // String sources must be non-null
      40: invokestatic  #11                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      43: checkcast     #12                 // class "[Lorg/reactivestreams/Publisher;"
      46: putfield      #13                 // Field sources:[Lorg/reactivestreams/Publisher;
      49: aload_0
      50: iload_1
      51: putfield      #14                 // Field prefetch:I
      54: aload_0
      55: aload_2
      56: putfield      #15                 // Field queueSupplier:Ljava/util/function/Supplier;
      59: aload_0
      60: aload_3
      61: putfield      #16                 // Field valueComparator:Ljava/util/Comparator;
      64: return

  reactor.core.publisher.FluxMergeOrdered<T> mergeAdditionalSource(org.reactivestreams.Publisher<? extends T>, java.util.Comparator<? super T>);
    Code:
       0: aload_0
       1: getfield      #13                 // Field sources:[Lorg/reactivestreams/Publisher;
       4: arraylength
       5: istore_3
       6: iload_3
       7: iconst_1
       8: iadd
       9: anewarray     #17                 // class org/reactivestreams/Publisher
      12: astore        4
      14: aload_0
      15: getfield      #13                 // Field sources:[Lorg/reactivestreams/Publisher;
      18: iconst_0
      19: aload         4
      21: iconst_0
      22: iload_3
      23: invokestatic  #18                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      26: aload         4
      28: iload_3
      29: aload_1
      30: aastore
      31: aload_0
      32: getfield      #16                 // Field valueComparator:Ljava/util/Comparator;
      35: aload_2
      36: invokeinterface #19,  2           // InterfaceMethod java/util/Comparator.equals:(Ljava/lang/Object;)Z
      41: ifne          80
      44: aload_0
      45: getfield      #16                 // Field valueComparator:Ljava/util/Comparator;
      48: astore        5
      50: aload         5
      52: aload_2
      53: invokeinterface #20,  2           // InterfaceMethod java/util/Comparator.thenComparing:(Ljava/util/Comparator;)Ljava/util/Comparator;
      58: astore        6
      60: new           #21                 // class reactor/core/publisher/FluxMergeOrdered
      63: dup
      64: aload_0
      65: getfield      #14                 // Field prefetch:I
      68: aload_0
      69: getfield      #15                 // Field queueSupplier:Ljava/util/function/Supplier;
      72: aload         6
      74: aload         4
      76: invokespecial #22                 // Method "<init>":(ILjava/util/function/Supplier;Ljava/util/Comparator;[Lorg/reactivestreams/Publisher;)V
      79: areturn
      80: new           #21                 // class reactor/core/publisher/FluxMergeOrdered
      83: dup
      84: aload_0
      85: getfield      #14                 // Field prefetch:I
      88: aload_0
      89: getfield      #15                 // Field queueSupplier:Ljava/util/function/Supplier;
      92: aload_0
      93: getfield      #16                 // Field valueComparator:Ljava/util/Comparator;
      96: aload         4
      98: invokespecial #22                 // Method "<init>":(ILjava/util/function/Supplier;Ljava/util/Comparator;[Lorg/reactivestreams/Publisher;)V
     101: areturn

  public int getPrefetch();
    Code:
       0: aload_0
       1: getfield      #14                 // Field prefetch:I
       4: ireturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #23                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     26
       7: aload_0
       8: getfield      #13                 // Field sources:[Lorg/reactivestreams/Publisher;
      11: arraylength
      12: ifle          24
      15: aload_0
      16: getfield      #13                 // Field sources:[Lorg/reactivestreams/Publisher;
      19: iconst_0
      20: aaload
      21: goto          25
      24: aconst_null
      25: areturn
      26: aload_1
      27: getstatic     #24                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      30: if_acmpne     41
      33: aload_0
      34: getfield      #14                 // Field prefetch:I
      37: invokestatic  #25                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      40: areturn
      41: aload_1
      42: getstatic     #26                 // Field reactor/core/Scannable$Attr.DELAY_ERROR:Lreactor/core/Scannable$Attr;
      45: if_acmpne     53
      48: iconst_1
      49: invokestatic  #27                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      52: areturn
      53: aconst_null
      54: areturn

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: new           #28                 // class reactor/core/publisher/FluxMergeOrdered$MergeOrderedMainProducer
       3: dup
       4: aload_1
       5: aload_0
       6: getfield      #16                 // Field valueComparator:Ljava/util/Comparator;
       9: aload_0
      10: getfield      #14                 // Field prefetch:I
      13: aload_0
      14: getfield      #13                 // Field sources:[Lorg/reactivestreams/Publisher;
      17: arraylength
      18: invokespecial #29                 // Method reactor/core/publisher/FluxMergeOrdered$MergeOrderedMainProducer."<init>":(Lreactor/core/CoreSubscriber;Ljava/util/Comparator;II)V
      21: astore_2
      22: aload_1
      23: aload_2
      24: invokeinterface #30,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      29: aload_2
      30: aload_0
      31: getfield      #13                 // Field sources:[Lorg/reactivestreams/Publisher;
      34: invokevirtual #31                 // Method reactor/core/publisher/FluxMergeOrdered$MergeOrderedMainProducer.subscribe:([Lorg/reactivestreams/Publisher;)V
      37: return
}
