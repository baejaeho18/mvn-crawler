Compiled from "FluxSampleTimeout.java"
final class reactor.core.publisher.FluxSampleTimeout$SampleTimeoutMain<T, U> implements reactor.core.publisher.InnerOperator<T, T> {
  final java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<U>> throttler;

  final java.util.Queue<reactor.core.publisher.FluxSampleTimeout$SampleTimeoutOther<T, U>> queue;

  final reactor.core.CoreSubscriber<? super T> actual;

  volatile org.reactivestreams.Subscription s;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxSampleTimeout$SampleTimeoutMain, org.reactivestreams.Subscription> S;

  volatile org.reactivestreams.Subscription other;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxSampleTimeout$SampleTimeoutMain, org.reactivestreams.Subscription> OTHER;

  volatile long requested;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.FluxSampleTimeout$SampleTimeoutMain> REQUESTED;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxSampleTimeout$SampleTimeoutMain> WIP;

  volatile java.lang.Throwable error;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxSampleTimeout$SampleTimeoutMain, java.lang.Throwable> ERROR;

  volatile boolean done;

  volatile boolean cancelled;

  volatile long index;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.FluxSampleTimeout$SampleTimeoutMain> INDEX;

  reactor.core.publisher.FluxSampleTimeout$SampleTimeoutMain(reactor.core.CoreSubscriber<? super T>, java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<U>>, java.util.Queue<reactor.core.publisher.FluxSampleTimeout$SampleTimeoutOther<T, U>>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field throttler:Ljava/util/function/Function;
      14: aload_0
      15: aload_3
      16: putfield      #4                  // Field queue:Ljava/util/Queue;
      19: return

  public java.util.stream.Stream<? extends reactor.core.Scannable> inners();
    Code:
       0: aload_0
       1: getfield      #5                  // Field other:Lorg/reactivestreams/Subscription;
       4: invokestatic  #6                  // InterfaceMethod reactor/core/Scannable.from:(Ljava/lang/Object;)Lreactor/core/Scannable;
       7: invokestatic  #7                  // InterfaceMethod java/util/stream/Stream.of:(Ljava/lang/Object;)Ljava/util/stream/Stream;
      10: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #8                  // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
       4: if_acmpne     15
       7: aload_0
       8: getfield      #9                  // Field done:Z
      11: invokestatic  #10                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      14: areturn
      15: aload_1
      16: getstatic     #11                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      19: if_acmpne     30
      22: aload_0
      23: getfield      #12                 // Field cancelled:Z
      26: invokestatic  #10                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      29: areturn
      30: aload_1
      31: getstatic     #13                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
      34: if_acmpne     42
      37: aload_0
      38: getfield      #14                 // Field s:Lorg/reactivestreams/Subscription;
      41: areturn
      42: aload_1
      43: getstatic     #15                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
      46: if_acmpne     54
      49: aload_0
      50: getfield      #16                 // Field error:Ljava/lang/Throwable;
      53: areturn
      54: aload_1
      55: getstatic     #17                 // Field reactor/core/Scannable$Attr.REQUESTED_FROM_DOWNSTREAM:Lreactor/core/Scannable$Attr;
      58: if_acmpne     69
      61: aload_0
      62: getfield      #18                 // Field requested:J
      65: invokestatic  #19                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      68: areturn
      69: aload_1
      70: getstatic     #20                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      73: if_acmpne     89
      76: aload_0
      77: getfield      #4                  // Field queue:Ljava/util/Queue;
      80: invokeinterface #21,  1           // InterfaceMethod java/util/Queue.size:()I
      85: invokestatic  #22                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      88: areturn
      89: aload_0
      90: aload_1
      91: invokespecial #23                 // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      94: areturn

  public final reactor.core.CoreSubscriber<? super T> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #24                 // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          16
       7: getstatic     #25                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      10: aload_0
      11: lload_1
      12: invokestatic  #26                 // Method reactor/core/publisher/Operators.addCap:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
      15: pop2
      16: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #12                 // Field cancelled:Z
       4: ifne          28
       7: aload_0
       8: iconst_1
       9: putfield      #12                 // Field cancelled:Z
      12: getstatic     #27                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      15: aload_0
      16: invokestatic  #28                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
      19: pop
      20: getstatic     #29                 // Field OTHER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      23: aload_0
      24: invokestatic  #28                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
      27: pop
      28: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: getstatic     #27                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #30                 // Method reactor/core/publisher/Operators.setOnce:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          20
      11: aload_1
      12: ldc2_w        #32                 // long 9223372036854775807l
      15: invokeinterface #34,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      20: return

  public void onNext(T);
    Code:
       0: getstatic     #35                 // Field INDEX:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
       3: aload_0
       4: invokevirtual #36                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.incrementAndGet:(Ljava/lang/Object;)J
       7: lstore_2
       8: getstatic     #29                 // Field OTHER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      11: aload_0
      12: invokestatic  #37                 // Method reactor/core/publisher/Operators.emptySubscription:()Lorg/reactivestreams/Subscription;
      15: invokestatic  #38                 // Method reactor/core/publisher/Operators.set:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
      18: ifne          22
      21: return
      22: aload_0
      23: getfield      #3                  // Field throttler:Ljava/util/function/Function;
      26: aload_1
      27: invokeinterface #39,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      32: ldc           #40                 // String throttler returned a null publisher
      34: invokestatic  #41                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      37: checkcast     #42                 // class org/reactivestreams/Publisher
      40: astore        4
      42: goto          71
      45: astore        5
      47: aload_0
      48: aload_0
      49: getfield      #14                 // Field s:Lorg/reactivestreams/Subscription;
      52: aload         5
      54: aload_1
      55: aload_0
      56: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      59: invokeinterface #44,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      64: invokestatic  #45                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      67: invokevirtual #46                 // Method onError:(Ljava/lang/Throwable;)V
      70: return
      71: new           #47                 // class reactor/core/publisher/FluxSampleTimeout$SampleTimeoutOther
      74: dup
      75: aload_0
      76: aload_1
      77: lload_2
      78: invokespecial #48                 // Method reactor/core/publisher/FluxSampleTimeout$SampleTimeoutOther."<init>":(Lreactor/core/publisher/FluxSampleTimeout$SampleTimeoutMain;Ljava/lang/Object;J)V
      81: astore        5
      83: getstatic     #29                 // Field OTHER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      86: aload_0
      87: aload         5
      89: invokestatic  #49                 // Method reactor/core/publisher/Operators.replace:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
      92: ifeq          104
      95: aload         4
      97: aload         5
      99: invokeinterface #50,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
     104: return
    Exception table:
       from    to  target type
          22    42    45   Class java/lang/Throwable

  void error(java.lang.Throwable);
    Code:
       0: getstatic     #51                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #52                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
       8: ifeq          23
      11: aload_0
      12: iconst_1
      13: putfield      #9                  // Field done:Z
      16: aload_0
      17: invokevirtual #53                 // Method drain:()V
      20: goto          36
      23: aload_1
      24: aload_0
      25: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      28: invokeinterface #44,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      33: invokestatic  #54                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      36: return

  public void onError(java.lang.Throwable);
    Code:
       0: getstatic     #29                 // Field OTHER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokestatic  #28                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
       7: pop
       8: aload_0
       9: aload_1
      10: invokevirtual #55                 // Method error:(Ljava/lang/Throwable;)V
      13: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #5                  // Field other:Lorg/reactivestreams/Subscription;
       4: astore_1
       5: aload_1
       6: instanceof    #47                 // class reactor/core/publisher/FluxSampleTimeout$SampleTimeoutOther
       9: ifeq          25
      12: aload_1
      13: checkcast     #47                 // class reactor/core/publisher/FluxSampleTimeout$SampleTimeoutOther
      16: astore_2
      17: aload_2
      18: invokevirtual #56                 // Method reactor/core/publisher/FluxSampleTimeout$SampleTimeoutOther.cancel:()V
      21: aload_2
      22: invokevirtual #57                 // Method reactor/core/publisher/FluxSampleTimeout$SampleTimeoutOther.onComplete:()V
      25: aload_0
      26: iconst_1
      27: putfield      #9                  // Field done:Z
      30: aload_0
      31: invokevirtual #53                 // Method drain:()V
      34: return

  void otherNext(reactor.core.publisher.FluxSampleTimeout$SampleTimeoutOther<T, U>);
    Code:
       0: aload_0
       1: getfield      #4                  // Field queue:Ljava/util/Queue;
       4: aload_1
       5: invokeinterface #58,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
      10: pop
      11: aload_0
      12: invokevirtual #53                 // Method drain:()V
      15: return

  void otherError(long, java.lang.Throwable);
    Code:
       0: lload_1
       1: aload_0
       2: getfield      #59                 // Field index:J
       5: lcmp
       6: ifne          25
       9: getstatic     #27                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: aload_0
      13: invokestatic  #28                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
      16: pop
      17: aload_0
      18: aload_3
      19: invokevirtual #55                 // Method error:(Ljava/lang/Throwable;)V
      22: goto          38
      25: aload_3
      26: aload_0
      27: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      30: invokeinterface #44,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      35: invokestatic  #54                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      38: return

  void drain();
    Code:
       0: getstatic     #60                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #61                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifeq          11
      10: return
      11: aload_0
      12: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      15: astore_1
      16: aload_0
      17: getfield      #4                  // Field queue:Ljava/util/Queue;
      20: astore_2
      21: iconst_1
      22: istore_3
      23: aload_0
      24: getfield      #9                  // Field done:Z
      27: istore        4
      29: aload_2
      30: invokeinterface #62,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
      35: checkcast     #47                 // class reactor/core/publisher/FluxSampleTimeout$SampleTimeoutOther
      38: astore        5
      40: aload         5
      42: ifnonnull     49
      45: iconst_1
      46: goto          50
      49: iconst_0
      50: istore        6
      52: aload_0
      53: iload         4
      55: iload         6
      57: aload_1
      58: aload_2
      59: invokevirtual #63                 // Method checkTerminated:(ZZLorg/reactivestreams/Subscriber;Ljava/util/Queue;)Z
      62: ifeq          66
      65: return
      66: iload         6
      68: ifeq          74
      71: goto          179
      74: aload         5
      76: getfield      #64                 // Field reactor/core/publisher/FluxSampleTimeout$SampleTimeoutOther.index:J
      79: aload_0
      80: getfield      #59                 // Field index:J
      83: lcmp
      84: ifne          176
      87: aload_0
      88: getfield      #18                 // Field requested:J
      91: lstore        7
      93: lload         7
      95: lconst_0
      96: lcmp
      97: ifeq          131
     100: aload_1
     101: aload         5
     103: getfield      #65                 // Field reactor/core/publisher/FluxSampleTimeout$SampleTimeoutOther.value:Ljava/lang/Object;
     106: invokeinterface #66,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
     111: lload         7
     113: ldc2_w        #32                 // long 9223372036854775807l
     116: lcmp
     117: ifeq          176
     120: getstatic     #25                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
     123: aload_0
     124: invokevirtual #67                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.decrementAndGet:(Ljava/lang/Object;)J
     127: pop2
     128: goto          176
     131: aload_0
     132: invokevirtual #68                 // Method cancel:()V
     135: aload_2
     136: invokeinterface #69,  1           // InterfaceMethod java/util/Queue.clear:()V
     141: ldc           #70                 // String Could not emit value due to lack of requests
     143: invokestatic  #71                 // Method reactor/core/Exceptions.failWithOverflow:(Ljava/lang/String;)Ljava/lang/IllegalStateException;
     146: astore        9
     148: getstatic     #51                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     151: aload_0
     152: aload         9
     154: invokestatic  #52                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
     157: pop
     158: getstatic     #51                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     161: aload_0
     162: invokestatic  #72                 // Method reactor/core/Exceptions.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Ljava/lang/Throwable;
     165: astore        9
     167: aload_1
     168: aload         9
     170: invokeinterface #73,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
     175: return
     176: goto          23
     179: getstatic     #60                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     182: aload_0
     183: iload_3
     184: ineg
     185: invokevirtual #74                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
     188: istore_3
     189: iload_3
     190: ifne          23
     193: goto          196
     196: return

  boolean checkTerminated(boolean, boolean, org.reactivestreams.Subscriber<?>, java.util.Queue<?>);
    Code:
       0: aload_0
       1: getfield      #12                 // Field cancelled:Z
       4: ifeq          16
       7: aload         4
       9: invokeinterface #69,  1           // InterfaceMethod java/util/Queue.clear:()V
      14: iconst_1
      15: ireturn
      16: iload_1
      17: ifeq          75
      20: getstatic     #51                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      23: aload_0
      24: invokestatic  #72                 // Method reactor/core/Exceptions.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Ljava/lang/Throwable;
      27: astore        5
      29: aload         5
      31: ifnull        63
      34: aload         5
      36: getstatic     #75                 // Field reactor/core/Exceptions.TERMINATED:Ljava/lang/Throwable;
      39: if_acmpeq     63
      42: aload_0
      43: invokevirtual #68                 // Method cancel:()V
      46: aload         4
      48: invokeinterface #69,  1           // InterfaceMethod java/util/Queue.clear:()V
      53: aload_3
      54: aload         5
      56: invokeinterface #73,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      61: iconst_1
      62: ireturn
      63: iload_2
      64: ifeq          75
      67: aload_3
      68: invokeinterface #76,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      73: iconst_1
      74: ireturn
      75: iconst_0
      76: ireturn

  static {};
    Code:
       0: ldc           #77                 // class reactor/core/publisher/FluxSampleTimeout$SampleTimeoutMain
       2: ldc           #78                 // class org/reactivestreams/Subscription
       4: ldc           #79                 // String s
       6: invokestatic  #80                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #27                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: ldc           #77                 // class reactor/core/publisher/FluxSampleTimeout$SampleTimeoutMain
      14: ldc           #78                 // class org/reactivestreams/Subscription
      16: ldc           #81                 // String other
      18: invokestatic  #80                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      21: putstatic     #29                 // Field OTHER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      24: ldc           #77                 // class reactor/core/publisher/FluxSampleTimeout$SampleTimeoutMain
      26: ldc           #82                 // String requested
      28: invokestatic  #83                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      31: putstatic     #25                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      34: ldc           #77                 // class reactor/core/publisher/FluxSampleTimeout$SampleTimeoutMain
      36: ldc           #84                 // String wip
      38: invokestatic  #85                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      41: putstatic     #60                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      44: ldc           #77                 // class reactor/core/publisher/FluxSampleTimeout$SampleTimeoutMain
      46: ldc           #43                 // class java/lang/Throwable
      48: ldc           #86                 // String error
      50: invokestatic  #80                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      53: putstatic     #51                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      56: ldc           #77                 // class reactor/core/publisher/FluxSampleTimeout$SampleTimeoutMain
      58: ldc           #87                 // String index
      60: invokestatic  #83                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      63: putstatic     #35                 // Field INDEX:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      66: return
}
