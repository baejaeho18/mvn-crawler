Compiled from "FluxBufferPredicate.java"
final class reactor.core.publisher.FluxBufferPredicate$BufferPredicateSubscriber<T, C extends java.util.Collection<? super T>> extends java.util.AbstractQueue<C> implements reactor.core.Fuseable$ConditionalSubscriber<T>, reactor.core.publisher.InnerOperator<T, C>, java.util.function.BooleanSupplier {
  final reactor.core.CoreSubscriber<? super C> actual;

  final java.util.function.Supplier<C> bufferSupplier;

  final reactor.core.publisher.FluxBufferPredicate$Mode mode;

  final java.util.function.Predicate<? super T> predicate;

  C buffer;

  boolean done;

  volatile boolean fastpath;

  volatile long requested;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.FluxBufferPredicate$BufferPredicateSubscriber> REQUESTED;

  volatile org.reactivestreams.Subscription s;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxBufferPredicate$BufferPredicateSubscriber, org.reactivestreams.Subscription> S;

  reactor.core.publisher.FluxBufferPredicate$BufferPredicateSubscriber(reactor.core.CoreSubscriber<? super C>, C, java.util.function.Supplier<C>, java.util.function.Predicate<? super T>, reactor.core.publisher.FluxBufferPredicate$Mode);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/util/AbstractQueue."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field buffer:Ljava/util/Collection;
      14: aload_0
      15: aload_3
      16: putfield      #4                  // Field bufferSupplier:Ljava/util/function/Supplier;
      19: aload_0
      20: aload         4
      22: putfield      #5                  // Field predicate:Ljava/util/function/Predicate;
      25: aload_0
      26: aload         5
      28: putfield      #6                  // Field mode:Lreactor/core/publisher/FluxBufferPredicate$Mode;
      31: return

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #7                  // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          69
       7: lload_1
       8: ldc2_w        #9                  // long 9223372036854775807l
      11: lcmp
      12: ifne          42
      15: aload_0
      16: iconst_1
      17: putfield      #11                 // Field fastpath:Z
      20: aload_0
      21: ldc2_w        #9                  // long 9223372036854775807l
      24: putfield      #12                 // Field requested:J
      27: aload_0
      28: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
      31: ldc2_w        #9                  // long 9223372036854775807l
      34: invokeinterface #14,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      39: goto          69
      42: lload_1
      43: aload_0
      44: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      47: aload_0
      48: getstatic     #15                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      51: aload_0
      52: aload_0
      53: invokestatic  #16                 // Method reactor/core/publisher/DrainUtils.postCompleteRequest:(JLorg/reactivestreams/Subscriber;Ljava/util/Queue;Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;Ljava/util/function/BooleanSupplier;)Z
      56: ifne          69
      59: aload_0
      60: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
      63: lconst_1
      64: invokeinterface #14,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      69: return

  public void cancel();
    Code:
       0: getstatic     #17                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokestatic  #18                 // Method reactor/core/publisher/Operators.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
       7: pop
       8: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: getstatic     #17                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #19                 // Method reactor/core/publisher/Operators.setOnce:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          21
      11: aload_0
      12: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      15: aload_0
      16: invokeinterface #20,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      21: return

  public void onNext(T);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #21                 // Method tryOnNext:(Ljava/lang/Object;)Z
       5: ifne          18
       8: aload_0
       9: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
      12: lconst_1
      13: invokeinterface #14,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      18: return

  public boolean tryOnNext(T);
    Code:
       0: aload_0
       1: getfield      #22                 // Field done:Z
       4: ifeq          22
       7: aload_1
       8: aload_0
       9: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      12: invokeinterface #23,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #24                 // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      20: iconst_1
      21: ireturn
      22: aload_0
      23: getfield      #3                  // Field buffer:Ljava/util/Collection;
      26: astore_2
      27: aload_0
      28: getfield      #5                  // Field predicate:Ljava/util/function/Predicate;
      31: aload_1
      32: invokeinterface #25,  2           // InterfaceMethod java/util/function/Predicate.test:(Ljava/lang/Object;)Z
      37: istore_3
      38: goto          68
      41: astore        4
      43: aload_0
      44: aload_0
      45: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
      48: aload         4
      50: aload_1
      51: aload_0
      52: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      55: invokeinterface #23,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      60: invokestatic  #27                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      63: invokevirtual #28                 // Method onError:(Ljava/lang/Throwable;)V
      66: iconst_1
      67: ireturn
      68: aload_0
      69: getfield      #6                  // Field mode:Lreactor/core/publisher/FluxBufferPredicate$Mode;
      72: getstatic     #29                 // Field reactor/core/publisher/FluxBufferPredicate$Mode.UNTIL:Lreactor/core/publisher/FluxBufferPredicate$Mode;
      75: if_acmpne     99
      78: iload_3
      79: ifeq          99
      82: aload_2
      83: aload_1
      84: invokeinterface #30,  2           // InterfaceMethod java/util/Collection.add:(Ljava/lang/Object;)Z
      89: pop
      90: aload_0
      91: invokespecial #31                 // Method onNextNewBuffer:()Z
      94: istore        4
      96: goto          188
      99: aload_0
     100: getfield      #6                  // Field mode:Lreactor/core/publisher/FluxBufferPredicate$Mode;
     103: getstatic     #32                 // Field reactor/core/publisher/FluxBufferPredicate$Mode.UNTIL_CUT_BEFORE:Lreactor/core/publisher/FluxBufferPredicate$Mode;
     106: if_acmpne     135
     109: iload_3
     110: ifeq          135
     113: aload_0
     114: invokespecial #31                 // Method onNextNewBuffer:()Z
     117: istore        4
     119: aload_0
     120: getfield      #3                  // Field buffer:Ljava/util/Collection;
     123: astore_2
     124: aload_2
     125: aload_1
     126: invokeinterface #30,  2           // InterfaceMethod java/util/Collection.add:(Ljava/lang/Object;)Z
     131: pop
     132: goto          188
     135: aload_0
     136: getfield      #6                  // Field mode:Lreactor/core/publisher/FluxBufferPredicate$Mode;
     139: getstatic     #33                 // Field reactor/core/publisher/FluxBufferPredicate$Mode.WHILE:Lreactor/core/publisher/FluxBufferPredicate$Mode;
     142: if_acmpne     158
     145: iload_3
     146: ifne          158
     149: aload_0
     150: invokespecial #31                 // Method onNextNewBuffer:()Z
     153: istore        4
     155: goto          188
     158: aload_2
     159: aload_1
     160: invokeinterface #30,  2           // InterfaceMethod java/util/Collection.add:(Ljava/lang/Object;)Z
     165: pop
     166: aload_0
     167: getfield      #11                 // Field fastpath:Z
     170: ifne          182
     173: aload_0
     174: getfield      #12                 // Field requested:J
     177: lconst_0
     178: lcmp
     179: ifne          186
     182: iconst_1
     183: goto          187
     186: iconst_0
     187: ireturn
     188: iload         4
     190: ifne          197
     193: iconst_1
     194: goto          198
     197: iconst_0
     198: ireturn
    Exception table:
       from    to  target type
          27    38    41   Class java/lang/Throwable

  private C triggerNewBuffer();
    Code:
       0: aload_0
       1: getfield      #3                  // Field buffer:Ljava/util/Collection;
       4: astore_1
       5: aload_1
       6: invokeinterface #34,  1           // InterfaceMethod java/util/Collection.isEmpty:()Z
      11: ifeq          16
      14: aconst_null
      15: areturn
      16: aload_0
      17: getfield      #4                  // Field bufferSupplier:Ljava/util/function/Supplier;
      20: invokeinterface #35,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      25: ldc           #36                 // String The bufferSupplier returned a null buffer
      27: invokestatic  #37                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      30: checkcast     #38                 // class java/util/Collection
      33: astore_2
      34: goto          61
      37: astore_3
      38: aload_0
      39: aload_0
      40: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
      43: aload_3
      44: aload_0
      45: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      48: invokeinterface #23,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      53: invokestatic  #39                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      56: invokevirtual #28                 // Method onError:(Ljava/lang/Throwable;)V
      59: aconst_null
      60: areturn
      61: aload_0
      62: aload_2
      63: putfield      #3                  // Field buffer:Ljava/util/Collection;
      66: aload_1
      67: areturn
    Exception table:
       from    to  target type
          16    34    37   Class java/lang/Throwable

  private boolean onNextNewBuffer();
    Code:
       0: aload_0
       1: invokespecial #40                 // Method triggerNewBuffer:()Ljava/util/Collection;
       4: astore_1
       5: aload_1
       6: ifnull        15
       9: aload_0
      10: aload_1
      11: invokevirtual #41                 // Method emit:(Ljava/util/Collection;)Z
      14: ireturn
      15: iconst_1
      16: ireturn

  public reactor.core.CoreSubscriber<? super C> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #22                 // Field done:Z
       4: ifeq          21
       7: aload_1
       8: aload_0
       9: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      12: invokeinterface #23,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #42                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      20: return
      21: aload_0
      22: iconst_1
      23: putfield      #22                 // Field done:Z
      26: aload_0
      27: aconst_null
      28: putfield      #3                  // Field buffer:Ljava/util/Collection;
      31: aload_0
      32: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      35: aload_1
      36: invokeinterface #43,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      41: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #22                 // Field done:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #22                 // Field done:Z
      13: aload_0
      14: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      17: aload_0
      18: getstatic     #15                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      21: aload_0
      22: aload_0
      23: invokestatic  #44                 // Method reactor/core/publisher/DrainUtils.postComplete:(Lreactor/core/CoreSubscriber;Ljava/util/Queue;Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;Ljava/util/function/BooleanSupplier;)V
      26: return

  boolean emit(C);
    Code:
       0: aload_0
       1: getfield      #11                 // Field fastpath:Z
       4: ifeq          19
       7: aload_0
       8: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      11: aload_1
      12: invokeinterface #45,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      17: iconst_0
      18: ireturn
      19: getstatic     #15                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      22: aload_0
      23: invokevirtual #46                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.getAndDecrement:(Ljava/lang/Object;)J
      26: lstore_2
      27: lload_2
      28: lconst_0
      29: lcmp
      30: ifle          58
      33: aload_0
      34: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      37: aload_1
      38: invokeinterface #45,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      43: aload_0
      44: getfield      #12                 // Field requested:J
      47: lconst_0
      48: lcmp
      49: ifle          56
      52: iconst_1
      53: goto          57
      56: iconst_0
      57: ireturn
      58: aload_0
      59: invokevirtual #47                 // Method cancel:()V
      62: aload_0
      63: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      66: ldc           #48                 // String Could not emit buffer due to lack of requests
      68: invokestatic  #49                 // Method reactor/core/Exceptions.failWithOverflow:(Ljava/lang/String;)Ljava/lang/IllegalStateException;
      71: invokeinterface #43,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      76: iconst_0
      77: ireturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #50                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #51                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      16: if_acmpne     27
      19: aload_0
      20: getfield      #22                 // Field done:Z
      23: invokestatic  #52                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      26: areturn
      27: aload_1
      28: getstatic     #53                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      31: if_acmpne     42
      34: aload_0
      35: invokevirtual #54                 // Method getAsBoolean:()Z
      38: invokestatic  #52                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      41: areturn
      42: aload_1
      43: getstatic     #55                 // Field reactor/core/Scannable$Attr.CAPACITY:Lreactor/core/Scannable$Attr;
      46: if_acmpne     72
      49: aload_0
      50: getfield      #3                  // Field buffer:Ljava/util/Collection;
      53: astore_2
      54: aload_2
      55: ifnull        67
      58: aload_2
      59: invokeinterface #56,  1           // InterfaceMethod java/util/Collection.size:()I
      64: goto          68
      67: iconst_0
      68: invokestatic  #57                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      71: areturn
      72: aload_1
      73: getstatic     #58                 // Field reactor/core/Scannable$Attr.REQUESTED_FROM_DOWNSTREAM:Lreactor/core/Scannable$Attr;
      76: if_acmpne     87
      79: aload_0
      80: getfield      #12                 // Field requested:J
      83: invokestatic  #59                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      86: areturn
      87: aload_0
      88: aload_1
      89: invokespecial #60                 // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      92: areturn

  public boolean getAsBoolean();
    Code:
       0: aload_0
       1: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
       4: invokestatic  #61                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
       7: if_acmpne     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public java.util.Iterator<C> iterator();
    Code:
       0: aload_0
       1: invokevirtual #62                 // Method isEmpty:()Z
       4: ifeq          11
       7: invokestatic  #63                 // Method java/util/Collections.emptyIterator:()Ljava/util/Iterator;
      10: areturn
      11: aload_0
      12: getfield      #3                  // Field buffer:Ljava/util/Collection;
      15: invokestatic  #64                 // Method java/util/Collections.singleton:(Ljava/lang/Object;)Ljava/util/Set;
      18: invokeinterface #65,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      23: areturn

  public boolean offer(C);
    Code:
       0: new           #66                 // class java/lang/IllegalArgumentException
       3: dup
       4: invokespecial #67                 // Method java/lang/IllegalArgumentException."<init>":()V
       7: athrow

  public C poll();
    Code:
       0: aload_0
       1: getfield      #3                  // Field buffer:Ljava/util/Collection;
       4: astore_1
       5: aload_1
       6: ifnull        25
       9: aload_1
      10: invokeinterface #34,  1           // InterfaceMethod java/util/Collection.isEmpty:()Z
      15: ifne          25
      18: aload_0
      19: aconst_null
      20: putfield      #3                  // Field buffer:Ljava/util/Collection;
      23: aload_1
      24: areturn
      25: aconst_null
      26: areturn

  public C peek();
    Code:
       0: aload_0
       1: getfield      #3                  // Field buffer:Ljava/util/Collection;
       4: areturn

  public int size();
    Code:
       0: aload_0
       1: getfield      #3                  // Field buffer:Ljava/util/Collection;
       4: ifnull        19
       7: aload_0
       8: getfield      #3                  // Field buffer:Ljava/util/Collection;
      11: invokeinterface #34,  1           // InterfaceMethod java/util/Collection.isEmpty:()Z
      16: ifeq          23
      19: iconst_0
      20: goto          24
      23: iconst_1
      24: ireturn

  public java.lang.String toString();
    Code:
       0: ldc           #68                 // String FluxBufferPredicate
       2: areturn

  public java.lang.Object peek();
    Code:
       0: aload_0
       1: invokevirtual #69                 // Method peek:()Ljava/util/Collection;
       4: areturn

  public java.lang.Object poll();
    Code:
       0: aload_0
       1: invokevirtual #70                 // Method poll:()Ljava/util/Collection;
       4: areturn

  public boolean offer(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #38                 // class java/util/Collection
       5: invokevirtual #71                 // Method offer:(Ljava/util/Collection;)Z
       8: ireturn

  static {};
    Code:
       0: ldc           #72                 // class reactor/core/publisher/FluxBufferPredicate$BufferPredicateSubscriber
       2: ldc           #73                 // String requested
       4: invokestatic  #74                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
       7: putstatic     #15                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      10: ldc           #72                 // class reactor/core/publisher/FluxBufferPredicate$BufferPredicateSubscriber
      12: ldc           #75                 // class org/reactivestreams/Subscription
      14: ldc           #76                 // String s
      16: invokestatic  #77                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      19: putstatic     #17                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      22: return
}
