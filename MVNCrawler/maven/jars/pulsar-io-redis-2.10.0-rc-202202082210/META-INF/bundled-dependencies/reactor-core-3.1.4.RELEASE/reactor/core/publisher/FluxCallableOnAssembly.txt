Compiled from "FluxCallableOnAssembly.java"
final class reactor.core.publisher.FluxCallableOnAssembly<T> extends reactor.core.publisher.FluxOperator<T, T> implements reactor.core.Fuseable, java.util.concurrent.Callable<T>, reactor.core.publisher.AssemblyOp {
  final reactor.core.publisher.FluxOnAssembly$AssemblySnapshotException stacktrace;

  reactor.core.publisher.FluxCallableOnAssembly(reactor.core.publisher.Flux<? extends T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxOperator."<init>":(Lreactor/core/publisher/Flux;)V
       5: aload_0
       6: new           #2                  // class reactor/core/publisher/FluxOnAssembly$AssemblySnapshotException
       9: dup
      10: invokespecial #3                  // Method reactor/core/publisher/FluxOnAssembly$AssemblySnapshotException."<init>":()V
      13: putfield      #4                  // Field stacktrace:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshotException;
      16: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #5                  // Field source:Lreactor/core/publisher/Flux;
       5: aload_0
       6: getfield      #4                  // Field stacktrace:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshotException;
       9: invokestatic  #6                  // Method reactor/core/publisher/FluxOnAssembly.subscribe:(Lreactor/core/CoreSubscriber;Lreactor/core/publisher/Flux;Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshotException;)V
      12: return

  public T call() throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #5                  // Field source:Lreactor/core/publisher/Flux;
       4: checkcast     #7                  // class java/util/concurrent/Callable
       7: invokeinterface #8,  1            // InterfaceMethod java/util/concurrent/Callable.call:()Ljava/lang/Object;
      12: areturn
}
