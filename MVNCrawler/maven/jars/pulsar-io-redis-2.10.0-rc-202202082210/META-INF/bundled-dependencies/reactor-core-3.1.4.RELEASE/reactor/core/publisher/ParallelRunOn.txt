Compiled from "ParallelRunOn.java"
final class reactor.core.publisher.ParallelRunOn<T> extends reactor.core.publisher.ParallelFlux<T> implements reactor.core.Scannable {
  final reactor.core.publisher.ParallelFlux<? extends T> source;

  final reactor.core.scheduler.Scheduler scheduler;

  final int prefetch;

  final java.util.function.Supplier<java.util.Queue<T>> queueSupplier;

  reactor.core.publisher.ParallelRunOn(reactor.core.publisher.ParallelFlux<? extends T>, reactor.core.scheduler.Scheduler, int, java.util.function.Supplier<java.util.Queue<T>>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/ParallelFlux."<init>":()V
       4: iload_3
       5: ifgt          35
       8: new           #2                  // class java/lang/IllegalArgumentException
      11: dup
      12: new           #3                  // class java/lang/StringBuilder
      15: dup
      16: invokespecial #4                  // Method java/lang/StringBuilder."<init>":()V
      19: ldc           #5                  // String prefetch > 0 required but it was
      21: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: iload_3
      25: invokevirtual #7                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      28: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      31: invokespecial #9                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      34: athrow
      35: aload_0
      36: aload_1
      37: putfield      #10                 // Field source:Lreactor/core/publisher/ParallelFlux;
      40: aload_0
      41: aload_2
      42: putfield      #11                 // Field scheduler:Lreactor/core/scheduler/Scheduler;
      45: aload_0
      46: iload_3
      47: putfield      #12                 // Field prefetch:I
      50: aload_0
      51: aload         4
      53: putfield      #13                 // Field queueSupplier:Ljava/util/function/Supplier;
      56: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #14                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #10                 // Field source:Lreactor/core/publisher/ParallelFlux;
      11: areturn
      12: aload_1
      13: getstatic     #15                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      16: if_acmpne     27
      19: aload_0
      20: invokevirtual #16                 // Method getPrefetch:()I
      23: invokestatic  #17                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      26: areturn
      27: aconst_null
      28: areturn

  public void subscribe(reactor.core.CoreSubscriber<? super T>[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #18                 // Method validate:([Lorg/reactivestreams/Subscriber;)Z
       5: ifne          9
       8: return
       9: aload_1
      10: arraylength
      11: istore_2
      12: iload_2
      13: anewarray     #19                 // class reactor/core/CoreSubscriber
      16: astore_3
      17: aload_1
      18: iconst_0
      19: aaload
      20: instanceof    #20                 // class reactor/core/Fuseable$ConditionalSubscriber
      23: istore        4
      25: iconst_0
      26: istore        5
      28: iload         5
      30: iload_2
      31: if_icmpge     130
      34: aload_0
      35: getfield      #11                 // Field scheduler:Lreactor/core/scheduler/Scheduler;
      38: invokeinterface #21,  1           // InterfaceMethod reactor/core/scheduler/Scheduler.createWorker:()Lreactor/core/scheduler/Scheduler$Worker;
      43: astore        6
      45: iload         4
      47: ifeq          90
      50: aload_3
      51: iload         5
      53: new           #22                 // class reactor/core/publisher/FluxPublishOn$PublishOnConditionalSubscriber
      56: dup
      57: aload_1
      58: iload         5
      60: aaload
      61: checkcast     #20                 // class reactor/core/Fuseable$ConditionalSubscriber
      64: aload_0
      65: getfield      #11                 // Field scheduler:Lreactor/core/scheduler/Scheduler;
      68: aload         6
      70: iconst_1
      71: aload_0
      72: getfield      #12                 // Field prefetch:I
      75: aload_0
      76: getfield      #12                 // Field prefetch:I
      79: aload_0
      80: getfield      #13                 // Field queueSupplier:Ljava/util/function/Supplier;
      83: invokespecial #23                 // Method reactor/core/publisher/FluxPublishOn$PublishOnConditionalSubscriber."<init>":(Lreactor/core/Fuseable$ConditionalSubscriber;Lreactor/core/scheduler/Scheduler;Lreactor/core/scheduler/Scheduler$Worker;ZIILjava/util/function/Supplier;)V
      86: aastore
      87: goto          124
      90: aload_3
      91: iload         5
      93: new           #24                 // class reactor/core/publisher/FluxPublishOn$PublishOnSubscriber
      96: dup
      97: aload_1
      98: iload         5
     100: aaload
     101: aload_0
     102: getfield      #11                 // Field scheduler:Lreactor/core/scheduler/Scheduler;
     105: aload         6
     107: iconst_1
     108: aload_0
     109: getfield      #12                 // Field prefetch:I
     112: aload_0
     113: getfield      #12                 // Field prefetch:I
     116: aload_0
     117: getfield      #13                 // Field queueSupplier:Ljava/util/function/Supplier;
     120: invokespecial #25                 // Method reactor/core/publisher/FluxPublishOn$PublishOnSubscriber."<init>":(Lreactor/core/CoreSubscriber;Lreactor/core/scheduler/Scheduler;Lreactor/core/scheduler/Scheduler$Worker;ZIILjava/util/function/Supplier;)V
     123: aastore
     124: iinc          5, 1
     127: goto          28
     130: aload_0
     131: getfield      #10                 // Field source:Lreactor/core/publisher/ParallelFlux;
     134: aload_3
     135: invokevirtual #26                 // Method reactor/core/publisher/ParallelFlux.subscribe:([Lreactor/core/CoreSubscriber;)V
     138: return

  public int getPrefetch();
    Code:
       0: aload_0
       1: getfield      #12                 // Field prefetch:I
       4: ireturn

  public int parallelism();
    Code:
       0: aload_0
       1: getfield      #10                 // Field source:Lreactor/core/publisher/ParallelFlux;
       4: invokevirtual #27                 // Method reactor/core/publisher/ParallelFlux.parallelism:()I
       7: ireturn
}
