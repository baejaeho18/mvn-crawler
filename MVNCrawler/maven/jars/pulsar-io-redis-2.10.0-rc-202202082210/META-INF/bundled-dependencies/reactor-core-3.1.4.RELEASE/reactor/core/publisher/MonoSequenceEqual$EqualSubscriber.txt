Compiled from "MonoSequenceEqual.java"
final class reactor.core.publisher.MonoSequenceEqual$EqualSubscriber<T> implements reactor.core.publisher.InnerConsumer<T> {
  final reactor.core.publisher.MonoSequenceEqual$EqualCoordinator<T> parent;

  final java.util.Queue<T> queue;

  final int prefetch;

  volatile boolean done;

  java.lang.Throwable error;

  org.reactivestreams.Subscription cachedSubscription;

  volatile org.reactivestreams.Subscription subscription;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.MonoSequenceEqual$EqualSubscriber, org.reactivestreams.Subscription> S;

  reactor.core.publisher.MonoSequenceEqual$EqualSubscriber(reactor.core.publisher.MonoSequenceEqual$EqualCoordinator<T>, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field parent:Lreactor/core/publisher/MonoSequenceEqual$EqualCoordinator;
       9: aload_0
      10: iload_2
      11: putfield      #3                  // Field prefetch:I
      14: aload_0
      15: iload_2
      16: invokestatic  #4                  // Method reactor/util/concurrent/Queues.get:(I)Ljava/util/function/Supplier;
      19: invokeinterface #5,  1            // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      24: checkcast     #6                  // class java/util/Queue
      27: putfield      #7                  // Field queue:Ljava/util/Queue;
      30: return

  public reactor.util.context.Context currentContext();
    Code:
       0: aload_0
       1: getfield      #2                  // Field parent:Lreactor/core/publisher/MonoSequenceEqual$EqualCoordinator;
       4: getfield      #8                  // Field reactor/core/publisher/MonoSequenceEqual$EqualCoordinator.actual:Lreactor/core/CoreSubscriber;
       7: invokeinterface #9,  1            // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      12: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #10                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
       4: if_acmpne     15
       7: aload_0
       8: getfield      #11                 // Field done:Z
      11: invokestatic  #12                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      14: areturn
      15: aload_1
      16: getstatic     #13                 // Field reactor/core/Scannable$Attr.ACTUAL:Lreactor/core/Scannable$Attr;
      19: if_acmpne     27
      22: aload_0
      23: getfield      #2                  // Field parent:Lreactor/core/publisher/MonoSequenceEqual$EqualCoordinator;
      26: areturn
      27: aload_1
      28: getstatic     #14                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
      31: if_acmpne     39
      34: aload_0
      35: getfield      #15                 // Field error:Ljava/lang/Throwable;
      38: areturn
      39: aload_1
      40: getstatic     #16                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      43: if_acmpne     65
      46: aload_0
      47: getfield      #17                 // Field subscription:Lorg/reactivestreams/Subscription;
      50: invokestatic  #18                 // Method reactor/core/publisher/Operators.cancelledSubscription:()Lorg/reactivestreams/Subscription;
      53: if_acmpne     60
      56: iconst_1
      57: goto          61
      60: iconst_0
      61: invokestatic  #12                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      64: areturn
      65: aload_1
      66: getstatic     #19                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
      69: if_acmpne     77
      72: aload_0
      73: getfield      #17                 // Field subscription:Lorg/reactivestreams/Subscription;
      76: areturn
      77: aload_1
      78: getstatic     #20                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      81: if_acmpne     92
      84: aload_0
      85: getfield      #3                  // Field prefetch:I
      88: invokestatic  #21                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      91: areturn
      92: aload_1
      93: getstatic     #22                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      96: if_acmpne     112
      99: aload_0
     100: getfield      #7                  // Field queue:Ljava/util/Queue;
     103: invokeinterface #23,  1           // InterfaceMethod java/util/Queue.size:()I
     108: invokestatic  #21                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     111: areturn
     112: aconst_null
     113: areturn

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: getstatic     #24                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #25                 // Method reactor/core/publisher/Operators.setOnce:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          29
      11: aload_0
      12: aload_1
      13: putfield      #26                 // Field cachedSubscription:Lorg/reactivestreams/Subscription;
      16: aload_1
      17: aload_0
      18: getfield      #3                  // Field prefetch:I
      21: invokestatic  #27                 // Method reactor/core/publisher/Operators.unboundedOrPrefetch:(I)J
      24: invokeinterface #28,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      29: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #7                  // Field queue:Ljava/util/Queue;
       4: aload_1
       5: invokeinterface #29,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
      10: ifne          35
      13: aload_0
      14: aload_0
      15: getfield      #26                 // Field cachedSubscription:Lorg/reactivestreams/Subscription;
      18: ldc           #31                 // String Queue is full: Reactive Streams source doesn\'t respect backpressure
      20: invokestatic  #32                 // Method reactor/core/Exceptions.failWithOverflow:(Ljava/lang/String;)Ljava/lang/IllegalStateException;
      23: aload_1
      24: aload_0
      25: invokevirtual #33                 // Method currentContext:()Lreactor/util/context/Context;
      28: invokestatic  #34                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      31: invokevirtual #35                 // Method onError:(Ljava/lang/Throwable;)V
      34: return
      35: aload_0
      36: getfield      #2                  // Field parent:Lreactor/core/publisher/MonoSequenceEqual$EqualCoordinator;
      39: invokevirtual #36                 // Method reactor/core/publisher/MonoSequenceEqual$EqualCoordinator.drain:()V
      42: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #15                 // Field error:Ljava/lang/Throwable;
       5: aload_0
       6: iconst_1
       7: putfield      #11                 // Field done:Z
      10: aload_0
      11: getfield      #2                  // Field parent:Lreactor/core/publisher/MonoSequenceEqual$EqualCoordinator;
      14: invokevirtual #36                 // Method reactor/core/publisher/MonoSequenceEqual$EqualCoordinator.drain:()V
      17: return

  public void onComplete();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #11                 // Field done:Z
       5: aload_0
       6: getfield      #2                  // Field parent:Lreactor/core/publisher/MonoSequenceEqual$EqualCoordinator;
       9: invokevirtual #36                 // Method reactor/core/publisher/MonoSequenceEqual$EqualCoordinator.drain:()V
      12: return

  static {};
    Code:
       0: ldc           #37                 // class reactor/core/publisher/MonoSequenceEqual$EqualSubscriber
       2: ldc           #38                 // class org/reactivestreams/Subscription
       4: ldc           #39                 // String subscription
       6: invokestatic  #40                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #24                 // Field S:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: return
}
