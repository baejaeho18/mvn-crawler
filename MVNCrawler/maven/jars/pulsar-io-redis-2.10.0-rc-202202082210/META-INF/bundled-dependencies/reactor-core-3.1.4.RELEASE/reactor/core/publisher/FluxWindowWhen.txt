Compiled from "FluxWindowWhen.java"
final class reactor.core.publisher.FluxWindowWhen<T, U, V> extends reactor.core.publisher.FluxOperator<T, reactor.core.publisher.Flux<T>> {
  final org.reactivestreams.Publisher<U> start;

  final java.util.function.Function<? super U, ? extends org.reactivestreams.Publisher<V>> end;

  final java.util.function.Supplier<? extends java.util.Queue<T>> processorQueueSupplier;

  reactor.core.publisher.FluxWindowWhen(reactor.core.publisher.Flux<? extends T>, org.reactivestreams.Publisher<U>, java.util.function.Function<? super U, ? extends org.reactivestreams.Publisher<V>>, java.util.function.Supplier<? extends java.util.Queue<T>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxOperator."<init>":(Lreactor/core/publisher/Flux;)V
       5: aload_0
       6: aload_2
       7: ldc           #2                  // String start
       9: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      12: checkcast     #4                  // class org/reactivestreams/Publisher
      15: putfield      #5                  // Field start:Lorg/reactivestreams/Publisher;
      18: aload_0
      19: aload_3
      20: ldc           #6                  // String end
      22: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      25: checkcast     #7                  // class java/util/function/Function
      28: putfield      #8                  // Field end:Ljava/util/function/Function;
      31: aload_0
      32: aload         4
      34: ldc           #9                  // String processorQueueSupplier
      36: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      39: checkcast     #10                 // class java/util/function/Supplier
      42: putfield      #11                 // Field processorQueueSupplier:Ljava/util/function/Supplier;
      45: return

  public int getPrefetch();
    Code:
       0: ldc           #13                 // int 2147483647
       2: ireturn

  public void subscribe(reactor.core.CoreSubscriber<? super reactor.core.publisher.Flux<T>>);
    Code:
       0: new           #14                 // class reactor/core/publisher/FluxWindowWhen$WindowWhenMainSubscriber
       3: dup
       4: aload_1
       5: aload_0
       6: getfield      #5                  // Field start:Lorg/reactivestreams/Publisher;
       9: aload_0
      10: getfield      #8                  // Field end:Ljava/util/function/Function;
      13: aload_0
      14: getfield      #11                 // Field processorQueueSupplier:Ljava/util/function/Supplier;
      17: invokespecial #15                 // Method reactor/core/publisher/FluxWindowWhen$WindowWhenMainSubscriber."<init>":(Lreactor/core/CoreSubscriber;Lorg/reactivestreams/Publisher;Ljava/util/function/Function;Ljava/util/function/Supplier;)V
      20: astore_2
      21: aload_1
      22: aload_2
      23: invokeinterface #16,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      28: aload_2
      29: getfield      #17                 // Field reactor/core/publisher/FluxWindowWhen$WindowWhenMainSubscriber.cancelled:Z
      32: ifeq          36
      35: return
      36: new           #18                 // class reactor/core/publisher/FluxWindowWhen$WindowWhenOpenSubscriber
      39: dup
      40: aload_2
      41: invokespecial #19                 // Method reactor/core/publisher/FluxWindowWhen$WindowWhenOpenSubscriber."<init>":(Lreactor/core/publisher/FluxWindowWhen$WindowWhenMainSubscriber;)V
      44: astore_3
      45: getstatic     #20                 // Field reactor/core/publisher/FluxWindowWhen$WindowWhenMainSubscriber.BOUNDARY:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      48: aload_2
      49: aconst_null
      50: aload_3
      51: invokevirtual #21                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      54: ifeq          83
      57: getstatic     #22                 // Field reactor/core/publisher/FluxWindowWhen$WindowWhenMainSubscriber.OPEN_WINDOW_COUNT:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      60: aload_2
      61: invokevirtual #23                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.incrementAndGet:(Ljava/lang/Object;)J
      64: pop2
      65: aload_0
      66: getfield      #5                  // Field start:Lorg/reactivestreams/Publisher;
      69: aload_3
      70: invokeinterface #24,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
      75: aload_0
      76: getfield      #25                 // Field source:Lreactor/core/publisher/Flux;
      79: aload_2
      80: invokevirtual #26                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      83: return
}
