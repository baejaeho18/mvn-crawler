Compiled from "ParallelLift.java"
final class reactor.core.publisher.ParallelLift<I, O> extends reactor.core.publisher.ParallelFlux<O> implements reactor.core.Scannable {
  final java.util.function.BiFunction<reactor.core.Scannable, ? super reactor.core.CoreSubscriber<? super O>, ? extends reactor.core.CoreSubscriber<? super I>> lifter;

  final reactor.core.publisher.ParallelFlux<I> source;

  reactor.core.publisher.ParallelLift(reactor.core.publisher.ParallelFlux<I>, java.util.function.BiFunction<reactor.core.Scannable, ? super reactor.core.CoreSubscriber<? super O>, ? extends reactor.core.CoreSubscriber<? super I>>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/ParallelFlux."<init>":()V
       4: aload_0
       5: aload_1
       6: ldc           #2                  // String source
       8: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      11: checkcast     #4                  // class reactor/core/publisher/ParallelFlux
      14: putfield      #5                  // Field source:Lreactor/core/publisher/ParallelFlux;
      17: aload_0
      18: aload_2
      19: putfield      #6                  // Field lifter:Ljava/util/function/BiFunction;
      22: return

  public int getPrefetch();
    Code:
       0: aload_0
       1: getfield      #5                  // Field source:Lreactor/core/publisher/ParallelFlux;
       4: invokevirtual #7                  // Method reactor/core/publisher/ParallelFlux.getPrefetch:()I
       7: ireturn

  public int parallelism();
    Code:
       0: aload_0
       1: getfield      #5                  // Field source:Lreactor/core/publisher/ParallelFlux;
       4: invokevirtual #8                  // Method reactor/core/publisher/ParallelFlux.parallelism:()I
       7: ireturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #9                  // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #5                  // Field source:Lreactor/core/publisher/ParallelFlux;
      11: areturn
      12: aload_1
      13: getstatic     #10                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      16: if_acmpne     27
      19: aload_0
      20: invokevirtual #11                 // Method getPrefetch:()I
      23: invokestatic  #12                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      26: areturn
      27: aconst_null
      28: areturn

  protected void subscribe(reactor.core.CoreSubscriber<? super O>[]);
    Code:
       0: aload_0
       1: invokevirtual #13                 // Method parallelism:()I
       4: anewarray     #14                 // class reactor/core/CoreSubscriber
       7: astore_2
       8: iconst_0
       9: istore_3
      10: iload_3
      11: aload_2
      12: arraylength
      13: if_icmpge     54
      16: aload_2
      17: iload_3
      18: iinc          3, 1
      21: aload_0
      22: getfield      #6                  // Field lifter:Ljava/util/function/BiFunction;
      25: aload_0
      26: getfield      #5                  // Field source:Lreactor/core/publisher/ParallelFlux;
      29: invokestatic  #15                 // InterfaceMethod reactor/core/Scannable.from:(Ljava/lang/Object;)Lreactor/core/Scannable;
      32: aload_1
      33: iload_3
      34: iconst_1
      35: isub
      36: aaload
      37: invokeinterface #16,  3           // InterfaceMethod java/util/function/BiFunction.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      42: ldc           #17                 // String Lifted subscriber MUST NOT be null
      44: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      47: checkcast     #14                 // class reactor/core/CoreSubscriber
      50: aastore
      51: goto          10
      54: aload_0
      55: getfield      #5                  // Field source:Lreactor/core/publisher/ParallelFlux;
      58: aload_2
      59: invokevirtual #18                 // Method reactor/core/publisher/ParallelFlux.subscribe:([Lreactor/core/CoreSubscriber;)V
      62: return
}
