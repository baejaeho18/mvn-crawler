Compiled from "MonoProcessor.java"
public final class reactor.core.publisher.MonoProcessor<O> extends reactor.core.publisher.Mono<O> implements org.reactivestreams.Processor<O, O>, reactor.core.CoreSubscriber<O>, reactor.core.Disposable, org.reactivestreams.Subscription, reactor.core.Scannable, java.util.function.LongSupplier {
  final reactor.util.concurrent.WaitStrategy waitStrategy;

  org.reactivestreams.Publisher<? extends O> source;

  org.reactivestreams.Subscription subscription;

  volatile reactor.core.publisher.FluxProcessor<O, O> processor;

  volatile O value;

  volatile java.lang.Throwable error;

  volatile int state;

  volatile int wip;

  volatile int connected;

  static final reactor.core.publisher.MonoProcessor$NoopProcessor NOOP_PROCESSOR;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.MonoProcessor> STATE;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.MonoProcessor> WIP;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.MonoProcessor> CONNECTED;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.MonoProcessor, reactor.core.publisher.FluxProcessor> PROCESSOR;

  static final int STATE_CANCELLED;

  static final int STATE_READY;

  static final int STATE_SUBSCRIBED;

  static final int STATE_POST_SUBSCRIBED;

  static final int STATE_SUCCESS_VALUE;

  static final int STATE_COMPLETE_NO_VALUE;

  static final int STATE_ERROR;

  public static <T> reactor.core.publisher.MonoProcessor<T> create();
    Code:
       0: new           #1                  // class reactor/core/publisher/MonoProcessor
       3: dup
       4: aconst_null
       5: invokespecial #2                  // Method "<init>":(Lorg/reactivestreams/Publisher;)V
       8: areturn

  public static <T> reactor.core.publisher.MonoProcessor<T> create(reactor.util.concurrent.WaitStrategy);
    Code:
       0: new           #1                  // class reactor/core/publisher/MonoProcessor
       3: dup
       4: aconst_null
       5: aload_0
       6: invokespecial #3                  // Method "<init>":(Lorg/reactivestreams/Publisher;Lreactor/util/concurrent/WaitStrategy;)V
       9: areturn

  reactor.core.publisher.MonoProcessor(org.reactivestreams.Publisher<? extends O>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #4                  // Method reactor/util/concurrent/WaitStrategy.sleeping:()Lreactor/util/concurrent/WaitStrategy;
       5: invokespecial #3                  // Method "<init>":(Lorg/reactivestreams/Publisher;Lreactor/util/concurrent/WaitStrategy;)V
       8: return

  reactor.core.publisher.MonoProcessor(org.reactivestreams.Publisher<? extends O>, reactor.util.concurrent.WaitStrategy);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method reactor/core/publisher/Mono."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #6                  // Field source:Lorg/reactivestreams/Publisher;
       9: aload_0
      10: aload_2
      11: ldc           #7                  // String waitStrategy
      13: invokestatic  #8                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      16: checkcast     #9                  // class reactor/util/concurrent/WaitStrategy
      19: putfield      #10                 // Field waitStrategy:Lreactor/util/concurrent/WaitStrategy;
      22: return

  public final void cancel();
    Code:
       0: aload_0
       1: getfield      #11                 // Field state:I
       4: istore_1
       5: iload_1
       6: ifeq          20
       9: iload_1
      10: iconst_1
      11: if_icmpeq     20
      14: iload_1
      15: iconst_2
      16: if_icmpeq     20
      19: return
      20: getstatic     #12                 // Field STATE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      23: aload_0
      24: iload_1
      25: iconst_m1
      26: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      29: ifeq          35
      32: goto          43
      35: aload_0
      36: getfield      #11                 // Field state:I
      39: istore_1
      40: goto          5
      43: getstatic     #14                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      46: aload_0
      47: invokevirtual #15                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
      50: ifne          57
      53: aload_0
      54: invokevirtual #16                 // Method drainLoop:()V
      57: return

  public void dispose();
    Code:
       0: aload_0
       1: invokevirtual #17                 // Method cancel:()V
       4: return

  public O block();
    Code:
       0: aload_0
       1: getstatic     #18                 // Field reactor/util/concurrent/WaitStrategy.NOOP_SPIN_OBSERVER:Ljava/lang/Runnable;
       4: invokevirtual #19                 // Method block:(Ljava/lang/Runnable;)Ljava/lang/Object;
       7: areturn

  public O block(java.time.Duration);
    Code:
       0: invokestatic  #20                 // Method java/lang/System.nanoTime:()J
       3: aload_1
       4: invokevirtual #21                 // Method java/time/Duration.toNanos:()J
       7: ladd
       8: lstore_2
       9: lload_2
      10: invokedynamic #22,  0             // InvokeDynamic #0:run:(J)Ljava/lang/Runnable;
      15: astore        4
      17: aload_0
      18: aload         4
      20: invokevirtual #19                 // Method block:(Ljava/lang/Runnable;)Ljava/lang/Object;
      23: areturn

  O block(java.lang.Runnable);
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method isPending:()Z
       4: ifne          12
       7: aload_0
       8: invokevirtual #24                 // Method peek:()Ljava/lang/Object;
      11: areturn
      12: aload_0
      13: getfield      #25                 // Field subscription:Lorg/reactivestreams/Subscription;
      16: ifnonnull     24
      19: aload_0
      20: invokevirtual #26                 // Method getOrStart:()Lreactor/core/publisher/FluxProcessor;
      23: pop
      24: aload_0
      25: getfield      #10                 // Field waitStrategy:Lreactor/util/concurrent/WaitStrategy;
      28: ldc2_w        #27                 // long 3l
      31: aload_0
      32: aload_1
      33: invokevirtual #29                 // Method reactor/util/concurrent/WaitStrategy.waitFor:(JLjava/util/function/LongSupplier;Ljava/lang/Runnable;)J
      36: lstore_2
      37: lload_2
      38: l2i
      39: tableswitch   { // 3 to 5
                     3: 64
                     4: 97
                     5: 69
               default: 99
          }
      64: aload_0
      65: getfield      #30                 // Field value:Ljava/lang/Object;
      68: areturn
      69: aload_0
      70: getfield      #31                 // Field error:Ljava/lang/Throwable;
      73: invokestatic  #32                 // Method reactor/core/Exceptions.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
      76: astore        4
      78: aload         4
      80: new           #33                 // class java/lang/Exception
      83: dup
      84: ldc           #34                 // String Mono#block terminated with an error
      86: invokespecial #35                 // Method java/lang/Exception."<init>":(Ljava/lang/String;)V
      89: invokestatic  #36                 // Method reactor/core/Exceptions.addSuppressed:(Ljava/lang/RuntimeException;Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
      92: astore        4
      94: aload         4
      96: athrow
      97: aconst_null
      98: areturn
      99: new           #37                 // class java/lang/IllegalStateException
     102: dup
     103: ldc           #38                 // String Mono has been cancelled
     105: invokespecial #39                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     108: athrow
     109: astore_2
     110: aload_2
     111: invokestatic  #41                 // Method reactor/util/concurrent/WaitStrategy.isAlert:(Ljava/lang/Throwable;)Z
     114: ifeq          131
     117: aload_0
     118: invokevirtual #17                 // Method cancel:()V
     121: new           #37                 // class java/lang/IllegalStateException
     124: dup
     125: ldc           #42                 // String Timeout on Mono blocking read
     127: invokespecial #39                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     130: athrow
     131: aload_2
     132: athrow
     133: astore_2
     134: invokestatic  #44                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
     137: invokevirtual #45                 // Method java/lang/Thread.interrupt:()V
     140: new           #37                 // class java/lang/IllegalStateException
     143: dup
     144: ldc           #46                 // String Thread Interruption on Mono blocking read
     146: invokespecial #39                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     149: athrow
    Exception table:
       from    to  target type
          24    68   109   Class java/lang/RuntimeException
          69    98   109   Class java/lang/RuntimeException
          99   109   109   Class java/lang/RuntimeException
           0    11   133   Class java/lang/InterruptedException
          12    68   133   Class java/lang/InterruptedException
          69    98   133   Class java/lang/InterruptedException
          99   133   133   Class java/lang/InterruptedException

  public final java.lang.Throwable getError();
    Code:
       0: aload_0
       1: getfield      #31                 // Field error:Ljava/lang/Throwable;
       4: areturn

  public boolean isCancelled();
    Code:
       0: aload_0
       1: getfield      #11                 // Field state:I
       4: iconst_m1
       5: if_icmpne     12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  public final boolean isError();
    Code:
       0: aload_0
       1: getfield      #11                 // Field state:I
       4: iconst_5
       5: if_icmpne     12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  public final boolean isSuccess();
    Code:
       0: aload_0
       1: getfield      #11                 // Field state:I
       4: iconst_4
       5: if_icmpeq     16
       8: aload_0
       9: getfield      #11                 // Field state:I
      12: iconst_3
      13: if_icmpne     20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: ireturn

  public final boolean isTerminated();
    Code:
       0: aload_0
       1: getfield      #11                 // Field state:I
       4: iconst_2
       5: if_icmple     12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn

  public boolean isDisposed();
    Code:
       0: aload_0
       1: invokevirtual #47                 // Method isTerminated:()Z
       4: ifne          14
       7: aload_0
       8: invokevirtual #48                 // Method isCancelled:()Z
      11: ifeq          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn

  public final void onComplete();
    Code:
       0: aload_0
       1: getfield      #25                 // Field subscription:Lorg/reactivestreams/Subscription;
       4: astore_1
       5: aload_0
       6: getfield      #11                 // Field state:I
       9: istore_2
      10: aload_0
      11: getfield      #6                  // Field source:Lorg/reactivestreams/Publisher;
      14: ifnull        21
      17: aload_1
      18: ifnull        26
      21: iload_2
      22: iconst_3
      23: if_icmplt     27
      26: return
      27: aload_0
      28: aconst_null
      29: putfield      #25                 // Field subscription:Lorg/reactivestreams/Subscription;
      32: aload_0
      33: aconst_null
      34: putfield      #6                  // Field source:Lorg/reactivestreams/Publisher;
      37: iconst_4
      38: istore_3
      39: getstatic     #12                 // Field STATE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      42: aload_0
      43: iload_2
      44: iconst_4
      45: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      48: ifeq          61
      51: aload_0
      52: getfield      #10                 // Field waitStrategy:Lreactor/util/concurrent/WaitStrategy;
      55: invokevirtual #49                 // Method reactor/util/concurrent/WaitStrategy.signalAllWhenBlocking:()V
      58: goto          69
      61: aload_0
      62: getfield      #11                 // Field state:I
      65: istore_2
      66: goto          39
      69: getstatic     #14                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      72: aload_0
      73: invokevirtual #15                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
      76: ifne          83
      79: aload_0
      80: invokevirtual #16                 // Method drainLoop:()V
      83: return

  public final void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #25                 // Field subscription:Lorg/reactivestreams/Subscription;
       4: astore_2
       5: aload_0
       6: getfield      #6                  // Field source:Lorg/reactivestreams/Publisher;
       9: ifnull        16
      12: aload_2
      13: ifnull        23
      16: aload_0
      17: getfield      #31                 // Field error:Ljava/lang/Throwable;
      20: ifnull        28
      23: aload_1
      24: invokestatic  #50                 // Method reactor/core/publisher/Operators.onErrorDroppedMulticast:(Ljava/lang/Throwable;)V
      27: return
      28: aload_0
      29: aload_1
      30: putfield      #31                 // Field error:Ljava/lang/Throwable;
      33: aload_0
      34: aconst_null
      35: putfield      #25                 // Field subscription:Lorg/reactivestreams/Subscription;
      38: aload_0
      39: aconst_null
      40: putfield      #6                  // Field source:Lorg/reactivestreams/Publisher;
      43: aload_0
      44: getfield      #11                 // Field state:I
      47: istore_3
      48: iload_3
      49: ifeq          67
      52: iload_3
      53: iconst_1
      54: if_icmpeq     67
      57: iload_3
      58: iconst_2
      59: if_icmpeq     67
      62: aload_1
      63: invokestatic  #50                 // Method reactor/core/publisher/Operators.onErrorDroppedMulticast:(Ljava/lang/Throwable;)V
      66: return
      67: getstatic     #12                 // Field STATE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      70: aload_0
      71: iload_3
      72: iconst_5
      73: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      76: ifeq          89
      79: aload_0
      80: getfield      #10                 // Field waitStrategy:Lreactor/util/concurrent/WaitStrategy;
      83: invokevirtual #49                 // Method reactor/util/concurrent/WaitStrategy.signalAllWhenBlocking:()V
      86: goto          97
      89: aload_0
      90: getfield      #11                 // Field state:I
      93: istore_3
      94: goto          48
      97: getstatic     #14                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     100: aload_0
     101: invokevirtual #15                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
     104: ifne          111
     107: aload_0
     108: invokevirtual #16                 // Method drainLoop:()V
     111: return

  public final void onNext(O);
    Code:
       0: aload_0
       1: getfield      #25                 // Field subscription:Lorg/reactivestreams/Subscription;
       4: astore_2
       5: aload_1
       6: ifnull        32
       9: aload_0
      10: getfield      #6                  // Field source:Lorg/reactivestreams/Publisher;
      13: ifnull        20
      16: aload_2
      17: ifnull        27
      20: aload_0
      21: getfield      #30                 // Field value:Ljava/lang/Object;
      24: ifnull        32
      27: aload_1
      28: invokestatic  #51                 // Method reactor/core/publisher/Operators.onNextDroppedMulticast:(Ljava/lang/Object;)V
      31: return
      32: aload_0
      33: aconst_null
      34: putfield      #25                 // Field subscription:Lorg/reactivestreams/Subscription;
      37: aload_1
      38: ifnull        71
      41: iconst_3
      42: istore_3
      43: aload_0
      44: aload_1
      45: putfield      #30                 // Field value:Ljava/lang/Object;
      48: aload_2
      49: ifnull        73
      52: aload_0
      53: getfield      #6                  // Field source:Lorg/reactivestreams/Publisher;
      56: instanceof    #52                 // class reactor/core/publisher/Mono
      59: ifne          73
      62: aload_2
      63: invokeinterface #53,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      68: goto          73
      71: iconst_4
      72: istore_3
      73: aload_0
      74: aconst_null
      75: putfield      #6                  // Field source:Lorg/reactivestreams/Publisher;
      78: aload_0
      79: getfield      #11                 // Field state:I
      82: istore        4
      84: iload         4
      86: ifeq          110
      89: iload         4
      91: iconst_1
      92: if_icmpeq     110
      95: iload         4
      97: iconst_2
      98: if_icmpeq     110
     101: aload_1
     102: ifnull        109
     105: aload_1
     106: invokestatic  #51                 // Method reactor/core/publisher/Operators.onNextDroppedMulticast:(Ljava/lang/Object;)V
     109: return
     110: getstatic     #12                 // Field STATE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     113: aload_0
     114: iload         4
     116: iload_3
     117: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
     120: ifeq          133
     123: aload_0
     124: getfield      #10                 // Field waitStrategy:Lreactor/util/concurrent/WaitStrategy;
     127: invokevirtual #49                 // Method reactor/util/concurrent/WaitStrategy.signalAllWhenBlocking:()V
     130: goto          142
     133: aload_0
     134: getfield      #11                 // Field state:I
     137: istore        4
     139: goto          84
     142: getstatic     #14                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     145: aload_0
     146: invokevirtual #15                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
     149: ifne          156
     152: aload_0
     153: invokevirtual #16                 // Method drainLoop:()V
     156: return

  public final void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #25                 // Field subscription:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #54                 // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          51
      11: aload_0
      12: aload_1
      13: putfield      #25                 // Field subscription:Lorg/reactivestreams/Subscription;
      16: getstatic     #12                 // Field STATE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      19: aload_0
      20: iconst_0
      21: iconst_1
      22: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      25: ifeq          37
      28: aload_1
      29: ldc2_w        #56                 // long 9223372036854775807l
      32: invokeinterface #58,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      37: getstatic     #14                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      40: aload_0
      41: invokevirtual #15                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
      44: ifne          51
      47: aload_0
      48: invokevirtual #16                 // Method drainLoop:()V
      51: return

  public long getAsLong();
    Code:
       0: aload_0
       1: getfield      #11                 // Field state:I
       4: i2l
       5: lreturn

  public O peek();
    Code:
       0: aload_0
       1: getfield      #11                 // Field state:I
       4: istore_1
       5: iload_1
       6: iconst_3
       7: if_icmpne     15
      10: aload_0
      11: getfield      #30                 // Field value:Ljava/lang/Object;
      14: areturn
      15: iload_1
      16: iconst_5
      17: if_icmpne     44
      20: aload_0
      21: getfield      #31                 // Field error:Ljava/lang/Throwable;
      24: invokestatic  #32                 // Method reactor/core/Exceptions.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
      27: astore_2
      28: aload_2
      29: new           #33                 // class java/lang/Exception
      32: dup
      33: ldc           #59                 // String Mono#peek terminated with an error
      35: invokespecial #35                 // Method java/lang/Exception."<init>":(Ljava/lang/String;)V
      38: invokestatic  #36                 // Method reactor/core/Exceptions.addSuppressed:(Ljava/lang/RuntimeException;Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
      41: astore_2
      42: aload_2
      43: athrow
      44: aconst_null
      45: areturn

  public final void request(long);
    Code:
       0: lload_1
       1: invokestatic  #60                 // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          21
       7: getstatic     #14                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: aload_0
      11: invokevirtual #15                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
      14: ifne          21
      17: aload_0
      18: invokevirtual #16                 // Method drainLoop:()V
      21: return

  public void subscribe(reactor.core.CoreSubscriber<? super O>);
    Code:
       0: aload_0
       1: getfield      #11                 // Field state:I
       4: istore_2
       5: iload_2
       6: iconst_4
       7: if_icmpne     15
      10: aload_1
      11: invokestatic  #61                 // Method reactor/core/publisher/Operators.complete:(Lorg/reactivestreams/Subscriber;)V
      14: return
      15: iload_2
      16: iconst_3
      17: if_icmpne     35
      20: aload_1
      21: aload_1
      22: aload_0
      23: getfield      #30                 // Field value:Ljava/lang/Object;
      26: invokestatic  #62                 // Method reactor/core/publisher/Operators.scalarSubscription:(Lreactor/core/CoreSubscriber;Ljava/lang/Object;)Lorg/reactivestreams/Subscription;
      29: invokeinterface #63,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      34: return
      35: iload_2
      36: iconst_5
      37: if_icmpne     49
      40: aload_1
      41: aload_0
      42: getfield      #31                 // Field error:Ljava/lang/Throwable;
      45: invokestatic  #64                 // Method reactor/core/publisher/Operators.error:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
      48: return
      49: iload_2
      50: iconst_m1
      51: if_icmpne     68
      54: aload_1
      55: new           #65                 // class java/util/concurrent/CancellationException
      58: dup
      59: ldc           #66                 // String Mono has previously been cancelled
      61: invokespecial #67                 // Method java/util/concurrent/CancellationException."<init>":(Ljava/lang/String;)V
      64: invokestatic  #64                 // Method reactor/core/publisher/Operators.error:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
      67: return
      68: aload_0
      69: invokevirtual #26                 // Method getOrStart:()Lreactor/core/publisher/FluxProcessor;
      72: astore_3
      73: aload_3
      74: getstatic     #68                 // Field NOOP_PROCESSOR:Lreactor/core/publisher/MonoProcessor$NoopProcessor;
      77: if_acmpne     83
      80: goto          0
      83: aload_3
      84: aload_1
      85: invokeinterface #69,  2           // InterfaceMethod org/reactivestreams/Processor.subscribe:(Lorg/reactivestreams/Subscriber;)V
      90: goto          93
      93: getstatic     #14                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      96: aload_0
      97: invokevirtual #15                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
     100: ifne          107
     103: aload_0
     104: invokevirtual #16                 // Method drainLoop:()V
     107: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #70                 // Field reactor/core/Scannable$Attr.ACTUAL:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #71                 // Field processor:Lreactor/core/publisher/FluxProcessor;
      11: areturn
      12: aload_1
      13: getstatic     #72                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
      16: if_acmpne     24
      19: aload_0
      20: getfield      #25                 // Field subscription:Lorg/reactivestreams/Subscription;
      23: areturn
      24: aload_1
      25: getstatic     #73                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
      28: if_acmpne     36
      31: aload_0
      32: getfield      #31                 // Field error:Ljava/lang/Throwable;
      35: areturn
      36: aload_1
      37: getstatic     #74                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      40: if_acmpne     49
      43: ldc           #76                 // int 2147483647
      45: invokestatic  #77                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      48: areturn
      49: aload_1
      50: getstatic     #78                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      53: if_acmpne     64
      56: aload_0
      57: invokevirtual #48                 // Method isCancelled:()Z
      60: invokestatic  #79                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      63: areturn
      64: aload_1
      65: getstatic     #80                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      68: if_acmpne     79
      71: aload_0
      72: invokevirtual #47                 // Method isTerminated:()Z
      75: invokestatic  #79                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      78: areturn
      79: aconst_null
      80: areturn

  final boolean isPending();
    Code:
       0: aload_0
       1: invokevirtual #47                 // Method isTerminated:()Z
       4: ifne          18
       7: aload_0
       8: invokevirtual #48                 // Method isCancelled:()Z
      11: ifne          18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn

  final void connect();
    Code:
       0: getstatic     #81                 // Field CONNECTED:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: iconst_0
       5: iconst_1
       6: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
       9: ifeq          39
      12: aload_0
      13: getfield      #6                  // Field source:Lorg/reactivestreams/Publisher;
      16: ifnonnull     29
      19: aload_0
      20: invokestatic  #82                 // Method reactor/core/publisher/Operators.emptySubscription:()Lorg/reactivestreams/Subscription;
      23: invokevirtual #83                 // Method onSubscribe:(Lorg/reactivestreams/Subscription;)V
      26: goto          39
      29: aload_0
      30: getfield      #6                  // Field source:Lorg/reactivestreams/Publisher;
      33: aload_0
      34: invokeinterface #84,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
      39: return

  public final long downstreamCount();
    Code:
       0: aload_0
       1: getfield      #71                 // Field processor:Lreactor/core/publisher/FluxProcessor;
       4: invokestatic  #85                 // InterfaceMethod reactor/core/Scannable.from:(Ljava/lang/Object;)Lreactor/core/Scannable;
       7: invokeinterface #86,  1           // InterfaceMethod reactor/core/Scannable.inners:()Ljava/util/stream/Stream;
      12: invokeinterface #87,  1           // InterfaceMethod java/util/stream/Stream.count:()J
      17: lreturn

  public final boolean hasDownstreams();
    Code:
       0: aload_0
       1: invokevirtual #88                 // Method downstreamCount:()J
       4: lconst_0
       5: lcmp
       6: ifeq          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  final void drainLoop();
    Code:
       0: iconst_1
       1: istore_1
       2: aload_0
       3: getfield      #11                 // Field state:I
       6: istore_2
       7: iload_2
       8: iconst_2
       9: if_icmple     103
      12: getstatic     #89                 // Field PROCESSOR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      15: aload_0
      16: getstatic     #68                 // Field NOOP_PROCESSOR:Lreactor/core/publisher/MonoProcessor$NoopProcessor;
      19: invokevirtual #90                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      22: checkcast     #91                 // class org/reactivestreams/Processor
      25: astore_3
      26: aload_3
      27: getstatic     #68                 // Field NOOP_PROCESSOR:Lreactor/core/publisher/MonoProcessor$NoopProcessor;
      30: if_acmpeq     103
      33: aload_3
      34: ifnull        103
      37: iload_2
      38: tableswitch   { // 3 to 5
                     3: 73
                     4: 64
                     5: 92
               default: 102
          }
      64: aload_3
      65: invokeinterface #92,  1           // InterfaceMethod org/reactivestreams/Processor.onComplete:()V
      70: goto          102
      73: aload_3
      74: aload_0
      75: getfield      #30                 // Field value:Ljava/lang/Object;
      78: invokeinterface #93,  2           // InterfaceMethod org/reactivestreams/Processor.onNext:(Ljava/lang/Object;)V
      83: aload_3
      84: invokeinterface #92,  1           // InterfaceMethod org/reactivestreams/Processor.onComplete:()V
      89: goto          102
      92: aload_3
      93: aload_0
      94: getfield      #31                 // Field error:Ljava/lang/Throwable;
      97: invokeinterface #94,  2           // InterfaceMethod org/reactivestreams/Processor.onError:(Ljava/lang/Throwable;)V
     102: return
     103: aload_0
     104: getfield      #25                 // Field subscription:Lorg/reactivestreams/Subscription;
     107: astore_3
     108: aload_3
     109: ifnull        167
     112: iload_2
     113: iconst_m1
     114: if_icmpne     167
     117: getstatic     #89                 // Field PROCESSOR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     120: aload_0
     121: getstatic     #68                 // Field NOOP_PROCESSOR:Lreactor/core/publisher/MonoProcessor$NoopProcessor;
     124: invokevirtual #90                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     127: checkcast     #95                 // class reactor/core/publisher/FluxProcessor
     130: astore        4
     132: aload         4
     134: getstatic     #68                 // Field NOOP_PROCESSOR:Lreactor/core/publisher/MonoProcessor$NoopProcessor;
     137: if_acmpeq     167
     140: aload_0
     141: aconst_null
     142: putfield      #25                 // Field subscription:Lorg/reactivestreams/Subscription;
     145: aload_0
     146: aconst_null
     147: putfield      #6                  // Field source:Lorg/reactivestreams/Publisher;
     150: aload_3
     151: invokeinterface #53,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
     156: aload         4
     158: ifnull        166
     161: aload         4
     163: invokevirtual #96                 // Method reactor/core/publisher/FluxProcessor.dispose:()V
     166: return
     167: iload_2
     168: iconst_1
     169: if_icmpne     217
     172: getstatic     #12                 // Field STATE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     175: aload_0
     176: iconst_1
     177: iconst_2
     178: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
     181: ifeq          217
     184: getstatic     #89                 // Field PROCESSOR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     187: aload_0
     188: invokevirtual #97                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.get:(Ljava/lang/Object;)Ljava/lang/Object;
     191: checkcast     #91                 // class org/reactivestreams/Processor
     194: astore        4
     196: aload         4
     198: ifnull        217
     201: aload         4
     203: getstatic     #68                 // Field NOOP_PROCESSOR:Lreactor/core/publisher/MonoProcessor$NoopProcessor;
     206: if_acmpeq     217
     209: aload         4
     211: aload_0
     212: invokeinterface #98,  2           // InterfaceMethod org/reactivestreams/Processor.onSubscribe:(Lorg/reactivestreams/Subscription;)V
     217: getstatic     #14                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     220: aload_0
     221: iload_1
     222: ineg
     223: invokevirtual #99                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
     226: istore_1
     227: iload_1
     228: ifne          234
     231: goto          237
     234: goto          2
     237: return

  reactor.core.publisher.FluxProcessor<O, O> getOrStart();
    Code:
       0: aload_0
       1: getfield      #71                 // Field processor:Lreactor/core/publisher/FluxProcessor;
       4: astore_1
       5: aload_1
       6: ifnonnull     47
       9: aload_0
      10: getfield      #30                 // Field value:Ljava/lang/Object;
      13: invokestatic  #100                // Method reactor/core/publisher/ReplayProcessor.cacheLastOrDefault:(Ljava/lang/Object;)Lreactor/core/publisher/ReplayProcessor;
      16: astore_1
      17: getstatic     #89                 // Field PROCESSOR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      20: aload_0
      21: aconst_null
      22: aload_1
      23: invokevirtual #101                // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      26: ifeq          36
      29: aload_0
      30: invokevirtual #102                // Method connect:()V
      33: goto          47
      36: getstatic     #89                 // Field PROCESSOR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      39: aload_0
      40: invokevirtual #97                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.get:(Ljava/lang/Object;)Ljava/lang/Object;
      43: checkcast     #95                 // class reactor/core/publisher/FluxProcessor
      46: astore_1
      47: aload_1
      48: areturn

  private static void lambda$block$0(long);
    Code:
       0: lload_0
       1: invokestatic  #20                 // Method java/lang/System.nanoTime:()J
       4: lcmp
       5: ifge          11
       8: invokestatic  #103                // Method reactor/util/concurrent/WaitStrategy.alert:()V
      11: return

  static {};
    Code:
       0: new           #104                // class reactor/core/publisher/MonoProcessor$NoopProcessor
       3: dup
       4: invokespecial #105                // Method reactor/core/publisher/MonoProcessor$NoopProcessor."<init>":()V
       7: putstatic     #68                 // Field NOOP_PROCESSOR:Lreactor/core/publisher/MonoProcessor$NoopProcessor;
      10: ldc           #1                  // class reactor/core/publisher/MonoProcessor
      12: ldc           #106                // String state
      14: invokestatic  #107                // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      17: putstatic     #12                 // Field STATE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      20: ldc           #1                  // class reactor/core/publisher/MonoProcessor
      22: ldc           #108                // String wip
      24: invokestatic  #107                // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      27: putstatic     #14                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      30: ldc           #1                  // class reactor/core/publisher/MonoProcessor
      32: ldc           #109                // String connected
      34: invokestatic  #107                // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      37: putstatic     #81                 // Field CONNECTED:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      40: ldc           #1                  // class reactor/core/publisher/MonoProcessor
      42: ldc           #95                 // class reactor/core/publisher/FluxProcessor
      44: ldc           #110                // String processor
      46: invokestatic  #111                // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      49: putstatic     #89                 // Field PROCESSOR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      52: return
}
