Compiled from "ParallelFilter.java"
final class reactor.core.publisher.ParallelFilter<T> extends reactor.core.publisher.ParallelFlux<T> implements reactor.core.Scannable {
  final reactor.core.publisher.ParallelFlux<T> source;

  final java.util.function.Predicate<? super T> predicate;

  reactor.core.publisher.ParallelFilter(reactor.core.publisher.ParallelFlux<T>, java.util.function.Predicate<? super T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/ParallelFlux."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field source:Lreactor/core/publisher/ParallelFlux;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field predicate:Ljava/util/function/Predicate;
      14: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #4                  // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #2                  // Field source:Lreactor/core/publisher/ParallelFlux;
      11: areturn
      12: aload_1
      13: getstatic     #5                  // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      16: if_acmpne     27
      19: aload_0
      20: invokevirtual #6                  // Method getPrefetch:()I
      23: invokestatic  #7                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      26: areturn
      27: aconst_null
      28: areturn

  public void subscribe(reactor.core.CoreSubscriber<? super T>[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #8                  // Method validate:([Lorg/reactivestreams/Subscriber;)Z
       5: ifne          9
       8: return
       9: aload_1
      10: arraylength
      11: istore_2
      12: iload_2
      13: anewarray     #9                  // class reactor/core/CoreSubscriber
      16: astore_3
      17: aload_1
      18: iconst_0
      19: aaload
      20: instanceof    #10                 // class reactor/core/Fuseable$ConditionalSubscriber
      23: istore        4
      25: iconst_0
      26: istore        5
      28: iload         5
      30: iload_2
      31: if_icmpge     89
      34: iload         4
      36: ifeq          64
      39: aload_3
      40: iload         5
      42: new           #11                 // class reactor/core/publisher/FluxFilter$FilterConditionalSubscriber
      45: dup
      46: aload_1
      47: iload         5
      49: aaload
      50: checkcast     #10                 // class reactor/core/Fuseable$ConditionalSubscriber
      53: aload_0
      54: getfield      #3                  // Field predicate:Ljava/util/function/Predicate;
      57: invokespecial #12                 // Method reactor/core/publisher/FluxFilter$FilterConditionalSubscriber."<init>":(Lreactor/core/Fuseable$ConditionalSubscriber;Ljava/util/function/Predicate;)V
      60: aastore
      61: goto          83
      64: aload_3
      65: iload         5
      67: new           #13                 // class reactor/core/publisher/FluxFilter$FilterSubscriber
      70: dup
      71: aload_1
      72: iload         5
      74: aaload
      75: aload_0
      76: getfield      #3                  // Field predicate:Ljava/util/function/Predicate;
      79: invokespecial #14                 // Method reactor/core/publisher/FluxFilter$FilterSubscriber."<init>":(Lreactor/core/CoreSubscriber;Ljava/util/function/Predicate;)V
      82: aastore
      83: iinc          5, 1
      86: goto          28
      89: aload_0
      90: getfield      #2                  // Field source:Lreactor/core/publisher/ParallelFlux;
      93: aload_3
      94: invokevirtual #15                 // Method reactor/core/publisher/ParallelFlux.subscribe:([Lreactor/core/CoreSubscriber;)V
      97: return

  public int parallelism();
    Code:
       0: aload_0
       1: getfield      #2                  // Field source:Lreactor/core/publisher/ParallelFlux;
       4: invokevirtual #16                 // Method reactor/core/publisher/ParallelFlux.parallelism:()I
       7: ireturn
}
