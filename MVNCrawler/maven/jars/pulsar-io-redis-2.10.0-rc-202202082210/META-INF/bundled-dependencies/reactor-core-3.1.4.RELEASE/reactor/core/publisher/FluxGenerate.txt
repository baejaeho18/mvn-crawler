Compiled from "FluxGenerate.java"
final class reactor.core.publisher.FluxGenerate<T, S> extends reactor.core.publisher.Flux<T> implements reactor.core.Fuseable {
  static final java.util.concurrent.Callable EMPTY_CALLABLE;

  final java.util.concurrent.Callable<S> stateSupplier;

  final java.util.function.BiFunction<S, reactor.core.publisher.SynchronousSink<T>, S> generator;

  final java.util.function.Consumer<? super S> stateConsumer;

  reactor.core.publisher.FluxGenerate(java.util.function.Consumer<reactor.core.publisher.SynchronousSink<T>>);
    Code:
       0: aload_0
       1: getstatic     #1                  // Field EMPTY_CALLABLE:Ljava/util/concurrent/Callable;
       4: aload_1
       5: invokedynamic #2,  0              // InvokeDynamic #0:apply:(Ljava/util/function/Consumer;)Ljava/util/function/BiFunction;
      10: invokespecial #3                  // Method "<init>":(Ljava/util/concurrent/Callable;Ljava/util/function/BiFunction;)V
      13: return

  reactor.core.publisher.FluxGenerate(java.util.concurrent.Callable<S>, java.util.function.BiFunction<S, reactor.core.publisher.SynchronousSink<T>, S>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokedynamic #4,  0              // InvokeDynamic #1:accept:()Ljava/util/function/Consumer;
       8: invokespecial #5                  // Method "<init>":(Ljava/util/concurrent/Callable;Ljava/util/function/BiFunction;Ljava/util/function/Consumer;)V
      11: return

  reactor.core.publisher.FluxGenerate(java.util.concurrent.Callable<S>, java.util.function.BiFunction<S, reactor.core.publisher.SynchronousSink<T>, S>, java.util.function.Consumer<? super S>);
    Code:
       0: aload_0
       1: invokespecial #6                  // Method reactor/core/publisher/Flux."<init>":()V
       4: aload_0
       5: aload_1
       6: ldc           #7                  // String stateSupplier
       8: invokestatic  #8                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      11: checkcast     #9                  // class java/util/concurrent/Callable
      14: putfield      #10                 // Field stateSupplier:Ljava/util/concurrent/Callable;
      17: aload_0
      18: aload_2
      19: ldc           #11                 // String generator
      21: invokestatic  #8                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      24: checkcast     #12                 // class java/util/function/BiFunction
      27: putfield      #13                 // Field generator:Ljava/util/function/BiFunction;
      30: aload_0
      31: aload_3
      32: ldc           #14                 // String stateConsumer
      34: invokestatic  #8                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      37: checkcast     #15                 // class java/util/function/Consumer
      40: putfield      #16                 // Field stateConsumer:Ljava/util/function/Consumer;
      43: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: getfield      #10                 // Field stateSupplier:Ljava/util/concurrent/Callable;
       4: invokeinterface #17,  1           // InterfaceMethod java/util/concurrent/Callable.call:()Ljava/lang/Object;
       9: astore_2
      10: goto          29
      13: astore_3
      14: aload_1
      15: aload_3
      16: aload_1
      17: invokeinterface #19,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      22: invokestatic  #20                 // Method reactor/core/publisher/Operators.onOperatorError:(Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      25: invokestatic  #21                 // Method reactor/core/publisher/Operators.error:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
      28: return
      29: aload_1
      30: new           #22                 // class reactor/core/publisher/FluxGenerate$GenerateSubscription
      33: dup
      34: aload_1
      35: aload_2
      36: aload_0
      37: getfield      #13                 // Field generator:Ljava/util/function/BiFunction;
      40: aload_0
      41: getfield      #16                 // Field stateConsumer:Ljava/util/function/Consumer;
      44: invokespecial #23                 // Method reactor/core/publisher/FluxGenerate$GenerateSubscription."<init>":(Lreactor/core/CoreSubscriber;Ljava/lang/Object;Ljava/util/function/BiFunction;Ljava/util/function/Consumer;)V
      47: invokeinterface #24,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      52: return
    Exception table:
       from    to  target type
           0    10    13   Class java/lang/Throwable

  private static void lambda$new$2(java.lang.Object);
    Code:
       0: return

  private static java.lang.Object lambda$new$1(java.util.function.Consumer, java.lang.Object, reactor.core.publisher.SynchronousSink);
    Code:
       0: aload_0
       1: aload_2
       2: invokeinterface #25,  2           // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
       7: aconst_null
       8: areturn

  private static java.lang.Object lambda$static$0() throws java.lang.Exception;
    Code:
       0: aconst_null
       1: areturn

  static {};
    Code:
       0: invokedynamic #26,  0             // InvokeDynamic #2:call:()Ljava/util/concurrent/Callable;
       5: putstatic     #1                  // Field EMPTY_CALLABLE:Ljava/util/concurrent/Callable;
       8: return
}
