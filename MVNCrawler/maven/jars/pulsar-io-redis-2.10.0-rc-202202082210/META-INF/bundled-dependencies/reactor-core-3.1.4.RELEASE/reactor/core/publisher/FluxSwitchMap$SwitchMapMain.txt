Compiled from "FluxSwitchMap.java"
final class reactor.core.publisher.FluxSwitchMap$SwitchMapMain<T, R> implements reactor.core.publisher.InnerOperator<T, R> {
  final java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>> mapper;

  final java.util.Queue<java.lang.Object> queue;

  final java.util.function.BiPredicate<java.lang.Object, java.lang.Object> queueBiAtomic;

  final int prefetch;

  final reactor.core.CoreSubscriber<? super R> actual;

  org.reactivestreams.Subscription s;

  volatile boolean done;

  volatile java.lang.Throwable error;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxSwitchMap$SwitchMapMain, java.lang.Throwable> ERROR;

  volatile boolean cancelled;

  volatile int once;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxSwitchMap$SwitchMapMain> ONCE;

  volatile long requested;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.FluxSwitchMap$SwitchMapMain> REQUESTED;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxSwitchMap$SwitchMapMain> WIP;

  volatile reactor.core.publisher.FluxSwitchMap$SwitchMapInner<R> inner;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxSwitchMap$SwitchMapMain, reactor.core.publisher.FluxSwitchMap$SwitchMapInner> INNER;

  volatile long index;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.FluxSwitchMap$SwitchMapMain> INDEX;

  volatile int active;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxSwitchMap$SwitchMapMain> ACTIVE;

  reactor.core.publisher.FluxSwitchMap$SwitchMapMain(reactor.core.CoreSubscriber<? super R>, java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>>, java.util.Queue<java.lang.Object>, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field mapper:Ljava/util/function/Function;
      14: aload_0
      15: aload_3
      16: putfield      #4                  // Field queue:Ljava/util/Queue;
      19: aload_0
      20: iload         4
      22: putfield      #5                  // Field prefetch:I
      25: aload_0
      26: iconst_1
      27: putfield      #6                  // Field active:I
      30: aload_3
      31: instanceof    #7                  // class java/util/function/BiPredicate
      34: ifeq          48
      37: aload_0
      38: aload_3
      39: checkcast     #7                  // class java/util/function/BiPredicate
      42: putfield      #8                  // Field queueBiAtomic:Ljava/util/function/BiPredicate;
      45: goto          53
      48: aload_0
      49: aconst_null
      50: putfield      #8                  // Field queueBiAtomic:Ljava/util/function/BiPredicate;
      53: return

  public final reactor.core.CoreSubscriber<? super R> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #9                  // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
       4: if_acmpne     15
       7: aload_0
       8: getfield      #10                 // Field cancelled:Z
      11: invokestatic  #11                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      14: areturn
      15: aload_1
      16: getstatic     #12                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
      19: if_acmpne     27
      22: aload_0
      23: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
      26: areturn
      27: aload_1
      28: getstatic     #14                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      31: if_acmpne     42
      34: aload_0
      35: getfield      #15                 // Field done:Z
      38: invokestatic  #11                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      41: areturn
      42: aload_1
      43: getstatic     #16                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
      46: if_acmpne     54
      49: aload_0
      50: getfield      #17                 // Field error:Ljava/lang/Throwable;
      53: areturn
      54: aload_1
      55: getstatic     #18                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      58: if_acmpne     69
      61: aload_0
      62: getfield      #5                  // Field prefetch:I
      65: invokestatic  #19                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      68: areturn
      69: aload_1
      70: getstatic     #20                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      73: if_acmpne     89
      76: aload_0
      77: getfield      #4                  // Field queue:Ljava/util/Queue;
      80: invokeinterface #21,  1           // InterfaceMethod java/util/Queue.size:()I
      85: invokestatic  #19                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      88: areturn
      89: aload_1
      90: getstatic     #22                 // Field reactor/core/Scannable$Attr.REQUESTED_FROM_DOWNSTREAM:Lreactor/core/Scannable$Attr;
      93: if_acmpne     104
      96: aload_0
      97: getfield      #23                 // Field requested:J
     100: invokestatic  #24                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     103: areturn
     104: aload_0
     105: aload_1
     106: invokespecial #25                 // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
     109: areturn

  public java.util.stream.Stream<? extends reactor.core.Scannable> inners();
    Code:
       0: aload_0
       1: getfield      #26                 // Field inner:Lreactor/core/publisher/FluxSwitchMap$SwitchMapInner;
       4: invokestatic  #27                 // InterfaceMethod java/util/stream/Stream.of:(Ljava/lang/Object;)Ljava/util/stream/Stream;
       7: areturn

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #28                 // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          35
      11: aload_0
      12: aload_1
      13: putfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
      16: aload_0
      17: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      20: aload_0
      21: invokeinterface #29,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      26: aload_1
      27: ldc2_w        #31                 // long 9223372036854775807l
      30: invokeinterface #33,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      35: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #15                 // Field done:Z
       4: ifeq          21
       7: aload_1
       8: aload_0
       9: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      12: invokeinterface #34,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #35                 // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      20: return
      21: getstatic     #36                 // Field INDEX:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      24: aload_0
      25: invokevirtual #37                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.incrementAndGet:(Ljava/lang/Object;)J
      28: lstore_2
      29: aload_0
      30: getfield      #26                 // Field inner:Lreactor/core/publisher/FluxSwitchMap$SwitchMapInner;
      33: astore        4
      35: aload         4
      37: ifnull        50
      40: aload         4
      42: invokevirtual #38                 // Method reactor/core/publisher/FluxSwitchMap$SwitchMapInner.deactivate:()V
      45: aload         4
      47: invokevirtual #39                 // Method reactor/core/publisher/FluxSwitchMap$SwitchMapInner.cancel:()V
      50: aload_0
      51: getfield      #3                  // Field mapper:Ljava/util/function/Function;
      54: aload_1
      55: invokeinterface #40,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      60: ldc           #41                 // String The mapper returned a null publisher
      62: invokestatic  #42                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      65: checkcast     #43                 // class org/reactivestreams/Publisher
      68: astore        5
      70: goto          99
      73: astore        6
      75: aload_0
      76: aload_0
      77: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
      80: aload         6
      82: aload_1
      83: aload_0
      84: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      87: invokeinterface #34,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      92: invokestatic  #45                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      95: invokevirtual #46                 // Method onError:(Ljava/lang/Throwable;)V
      98: return
      99: new           #47                 // class reactor/core/publisher/FluxSwitchMap$SwitchMapInner
     102: dup
     103: aload_0
     104: aload_0
     105: getfield      #5                  // Field prefetch:I
     108: lload_2
     109: invokespecial #48                 // Method reactor/core/publisher/FluxSwitchMap$SwitchMapInner."<init>":(Lreactor/core/publisher/FluxSwitchMap$SwitchMapMain;IJ)V
     112: astore        6
     114: getstatic     #49                 // Field INNER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     117: aload_0
     118: aload         4
     120: aload         6
     122: invokevirtual #50                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
     125: ifeq          145
     128: getstatic     #51                 // Field ACTIVE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     131: aload_0
     132: invokevirtual #52                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
     135: pop
     136: aload         5
     138: aload         6
     140: invokeinterface #53,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
     145: return
    Exception table:
       from    to  target type
          50    70    73   Class java/lang/Throwable

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #15                 // Field done:Z
       4: ifeq          21
       7: aload_1
       8: aload_0
       9: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      12: invokeinterface #34,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #54                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      20: return
      21: getstatic     #55                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      24: aload_0
      25: aload_1
      26: invokestatic  #56                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
      29: ifeq          64
      32: getstatic     #57                 // Field ONCE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      35: aload_0
      36: iconst_0
      37: iconst_1
      38: invokevirtual #58                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      41: ifeq          48
      44: aload_0
      45: invokevirtual #59                 // Method deactivate:()V
      48: aload_0
      49: invokevirtual #60                 // Method cancelInner:()V
      52: aload_0
      53: iconst_1
      54: putfield      #15                 // Field done:Z
      57: aload_0
      58: invokevirtual #61                 // Method drain:()V
      61: goto          77
      64: aload_1
      65: aload_0
      66: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      69: invokeinterface #34,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      74: invokestatic  #54                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      77: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #15                 // Field done:Z
       4: ifeq          8
       7: return
       8: getstatic     #57                 // Field ONCE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      11: aload_0
      12: iconst_0
      13: iconst_1
      14: invokevirtual #58                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      17: ifeq          24
      20: aload_0
      21: invokevirtual #59                 // Method deactivate:()V
      24: aload_0
      25: iconst_1
      26: putfield      #15                 // Field done:Z
      29: aload_0
      30: invokevirtual #61                 // Method drain:()V
      33: return

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #62                 // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          20
       7: getstatic     #63                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      10: aload_0
      11: lload_1
      12: invokestatic  #64                 // Method reactor/core/publisher/Operators.addCap:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
      15: pop2
      16: aload_0
      17: invokevirtual #61                 // Method drain:()V
      20: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #10                 // Field cancelled:Z
       4: ifne          30
       7: aload_0
       8: iconst_1
       9: putfield      #10                 // Field cancelled:Z
      12: getstatic     #65                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      15: aload_0
      16: invokevirtual #52                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
      19: ifne          30
      22: aload_0
      23: aload_0
      24: getfield      #4                  // Field queue:Ljava/util/Queue;
      27: invokevirtual #66                 // Method cancelAndCleanup:(Ljava/util/Queue;)V
      30: return

  void deactivate();
    Code:
       0: getstatic     #51                 // Field ACTIVE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #67                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
       7: pop
       8: return

  void cancelInner();
    Code:
       0: getstatic     #49                 // Field INNER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: getstatic     #68                 // Field reactor/core/publisher/FluxSwitchMap.CANCELLED_INNER:Lreactor/core/publisher/FluxSwitchMap$SwitchMapInner;
       7: invokevirtual #69                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #47                 // class reactor/core/publisher/FluxSwitchMap$SwitchMapInner
      13: astore_1
      14: aload_1
      15: ifnull        33
      18: aload_1
      19: getstatic     #68                 // Field reactor/core/publisher/FluxSwitchMap.CANCELLED_INNER:Lreactor/core/publisher/FluxSwitchMap$SwitchMapInner;
      22: if_acmpeq     33
      25: aload_1
      26: invokevirtual #39                 // Method reactor/core/publisher/FluxSwitchMap$SwitchMapInner.cancel:()V
      29: aload_1
      30: invokevirtual #38                 // Method reactor/core/publisher/FluxSwitchMap$SwitchMapInner.deactivate:()V
      33: return

  void cancelAndCleanup(java.util.Queue<?>);
    Code:
       0: aload_0
       1: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
       4: invokeinterface #70,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
       9: aload_0
      10: invokevirtual #60                 // Method cancelInner:()V
      13: aload_1
      14: invokeinterface #71,  1           // InterfaceMethod java/util/Queue.clear:()V
      19: return

  void drain();
    Code:
       0: getstatic     #65                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #52                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifeq          11
      10: return
      11: aload_0
      12: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      15: astore_1
      16: aload_0
      17: getfield      #4                  // Field queue:Ljava/util/Queue;
      20: astore_2
      21: iconst_1
      22: istore_3
      23: aload_0
      24: getfield      #23                 // Field requested:J
      27: lstore        4
      29: lconst_0
      30: lstore        6
      32: lload         4
      34: lload         6
      36: lcmp
      37: ifeq          153
      40: aload_0
      41: getfield      #6                  // Field active:I
      44: ifne          51
      47: iconst_1
      48: goto          52
      51: iconst_0
      52: istore        8
      54: aload_2
      55: invokeinterface #72,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
      60: checkcast     #47                 // class reactor/core/publisher/FluxSwitchMap$SwitchMapInner
      63: astore        9
      65: aload         9
      67: ifnonnull     74
      70: iconst_1
      71: goto          75
      74: iconst_0
      75: istore        10
      77: aload_0
      78: iload         8
      80: iload         10
      82: aload_1
      83: aload_2
      84: invokevirtual #73                 // Method checkTerminated:(ZZLorg/reactivestreams/Subscriber;Ljava/util/Queue;)Z
      87: ifeq          91
      90: return
      91: iload         10
      93: ifeq          99
      96: goto          153
      99: aload_2
     100: invokeinterface #72,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
     105: dup
     106: astore        11
     108: ifnonnull     114
     111: goto          99
     114: aload_0
     115: getfield      #74                 // Field index:J
     118: aload         9
     120: getfield      #75                 // Field reactor/core/publisher/FluxSwitchMap$SwitchMapInner.index:J
     123: lcmp
     124: ifne          150
     127: aload         11
     129: astore        12
     131: aload_1
     132: aload         12
     134: invokeinterface #76,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
     139: aload         9
     141: invokevirtual #77                 // Method reactor/core/publisher/FluxSwitchMap$SwitchMapInner.requestOne:()V
     144: lload         6
     146: lconst_1
     147: ladd
     148: lstore        6
     150: goto          32
     153: lload         4
     155: lload         6
     157: lcmp
     158: ifne          189
     161: aload_0
     162: aload_0
     163: getfield      #6                  // Field active:I
     166: ifne          173
     169: iconst_1
     170: goto          174
     173: iconst_0
     174: aload_2
     175: invokeinterface #78,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
     180: aload_1
     181: aload_2
     182: invokevirtual #73                 // Method checkTerminated:(ZZLorg/reactivestreams/Subscriber;Ljava/util/Queue;)Z
     185: ifeq          189
     188: return
     189: lload         6
     191: lconst_0
     192: lcmp
     193: ifeq          216
     196: lload         4
     198: ldc2_w        #31                 // long 9223372036854775807l
     201: lcmp
     202: ifeq          216
     205: getstatic     #63                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
     208: aload_0
     209: lload         6
     211: lneg
     212: invokevirtual #79                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.addAndGet:(Ljava/lang/Object;J)J
     215: pop2
     216: getstatic     #65                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     219: aload_0
     220: iload_3
     221: ineg
     222: invokevirtual #80                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
     225: istore_3
     226: iload_3
     227: ifne          233
     230: goto          236
     233: goto          23
     236: return

  boolean checkTerminated(boolean, boolean, org.reactivestreams.Subscriber<?>, java.util.Queue<?>);
    Code:
       0: aload_0
       1: getfield      #10                 // Field cancelled:Z
       4: ifeq          15
       7: aload_0
       8: aload         4
      10: invokevirtual #66                 // Method cancelAndCleanup:(Ljava/util/Queue;)V
      13: iconst_1
      14: ireturn
      15: iload_1
      16: ifeq          69
      19: getstatic     #55                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      22: aload_0
      23: invokestatic  #81                 // Method reactor/core/Exceptions.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Ljava/lang/Throwable;
      26: astore        5
      28: aload         5
      30: ifnull        57
      33: aload         5
      35: getstatic     #82                 // Field reactor/core/Exceptions.TERMINATED:Ljava/lang/Throwable;
      38: if_acmpeq     57
      41: aload_0
      42: aload         4
      44: invokevirtual #66                 // Method cancelAndCleanup:(Ljava/util/Queue;)V
      47: aload_3
      48: aload         5
      50: invokeinterface #83,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      55: iconst_1
      56: ireturn
      57: iload_2
      58: ifeq          69
      61: aload_3
      62: invokeinterface #84,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      67: iconst_1
      68: ireturn
      69: iconst_0
      70: ireturn

  void innerNext(reactor.core.publisher.FluxSwitchMap$SwitchMapInner<R>, R);
    Code:
       0: aload_0
       1: getfield      #8                  // Field queueBiAtomic:Ljava/util/function/BiPredicate;
       4: ifnull        22
       7: aload_0
       8: getfield      #8                  // Field queueBiAtomic:Ljava/util/function/BiPredicate;
      11: aload_1
      12: aload_2
      13: invokeinterface #85,  3           // InterfaceMethod java/util/function/BiPredicate.test:(Ljava/lang/Object;Ljava/lang/Object;)Z
      18: pop
      19: goto          44
      22: aload_0
      23: getfield      #4                  // Field queue:Ljava/util/Queue;
      26: aload_1
      27: invokeinterface #86,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
      32: pop
      33: aload_0
      34: getfield      #4                  // Field queue:Ljava/util/Queue;
      37: aload_2
      38: invokeinterface #86,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
      43: pop
      44: aload_0
      45: invokevirtual #61                 // Method drain:()V
      48: return

  void innerError(reactor.core.publisher.FluxSwitchMap$SwitchMapInner<R>, java.lang.Throwable);
    Code:
       0: getstatic     #55                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_2
       5: invokestatic  #56                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
       8: ifeq          47
      11: aload_0
      12: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
      15: invokeinterface #70,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      20: getstatic     #57                 // Field ONCE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      23: aload_0
      24: iconst_0
      25: iconst_1
      26: invokevirtual #58                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      29: ifeq          36
      32: aload_0
      33: invokevirtual #59                 // Method deactivate:()V
      36: aload_1
      37: invokevirtual #38                 // Method reactor/core/publisher/FluxSwitchMap$SwitchMapInner.deactivate:()V
      40: aload_0
      41: invokevirtual #61                 // Method drain:()V
      44: goto          60
      47: aload_2
      48: aload_0
      49: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      52: invokeinterface #34,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      57: invokestatic  #54                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      60: return

  void innerComplete(reactor.core.publisher.FluxSwitchMap$SwitchMapInner<R>);
    Code:
       0: aload_1
       1: invokevirtual #38                 // Method reactor/core/publisher/FluxSwitchMap$SwitchMapInner.deactivate:()V
       4: aload_0
       5: invokevirtual #61                 // Method drain:()V
       8: return

  static {};
    Code:
       0: ldc           #87                 // class reactor/core/publisher/FluxSwitchMap$SwitchMapMain
       2: ldc           #44                 // class java/lang/Throwable
       4: ldc           #88                 // String error
       6: invokestatic  #89                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #55                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: ldc           #87                 // class reactor/core/publisher/FluxSwitchMap$SwitchMapMain
      14: ldc           #90                 // String once
      16: invokestatic  #91                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      19: putstatic     #57                 // Field ONCE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      22: ldc           #87                 // class reactor/core/publisher/FluxSwitchMap$SwitchMapMain
      24: ldc           #92                 // String requested
      26: invokestatic  #93                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      29: putstatic     #63                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      32: ldc           #87                 // class reactor/core/publisher/FluxSwitchMap$SwitchMapMain
      34: ldc           #94                 // String wip
      36: invokestatic  #91                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      39: putstatic     #65                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      42: ldc           #87                 // class reactor/core/publisher/FluxSwitchMap$SwitchMapMain
      44: ldc           #47                 // class reactor/core/publisher/FluxSwitchMap$SwitchMapInner
      46: ldc           #95                 // String inner
      48: invokestatic  #89                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      51: putstatic     #49                 // Field INNER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      54: ldc           #87                 // class reactor/core/publisher/FluxSwitchMap$SwitchMapMain
      56: ldc           #96                 // String index
      58: invokestatic  #93                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      61: putstatic     #36                 // Field INDEX:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      64: ldc           #87                 // class reactor/core/publisher/FluxSwitchMap$SwitchMapMain
      66: ldc           #97                 // String active
      68: invokestatic  #91                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      71: putstatic     #51                 // Field ACTIVE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      74: return
}
