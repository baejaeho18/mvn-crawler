Compiled from "FluxExpand.java"
final class reactor.core.publisher.FluxExpand$ExpandDepthSubscription<T> implements reactor.core.publisher.InnerProducer<T> {
  final reactor.core.CoreSubscriber<? super T> actual;

  final java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends T>> expander;

  volatile java.lang.Throwable error;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxExpand$ExpandDepthSubscription, java.lang.Throwable> ERROR;

  volatile int active;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxExpand$ExpandDepthSubscription> ACTIVE;

  volatile long requested;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.FluxExpand$ExpandDepthSubscription> REQUESTED;

  volatile java.lang.Object current;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxExpand$ExpandDepthSubscription, java.lang.Object> CURRENT;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxExpand$ExpandDepthSubscription> WIP;

  java.util.Deque<reactor.core.publisher.FluxExpand$ExpandDepthSubscriber<T>> subscriptionStack;

  volatile boolean cancelled;

  org.reactivestreams.Publisher<? extends T> source;

  long consumed;

  reactor.core.publisher.FluxExpand$ExpandDepthSubscription(reactor.core.CoreSubscriber<? super T>, java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends T>>, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field expander:Ljava/util/function/Function;
      14: aload_0
      15: new           #4                  // class java/util/ArrayDeque
      18: dup
      19: iload_3
      20: invokespecial #5                  // Method java/util/ArrayDeque."<init>":(I)V
      23: putfield      #6                  // Field subscriptionStack:Ljava/util/Deque;
      26: return

  public reactor.core.CoreSubscriber<? super T> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #7                  // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          20
       7: getstatic     #8                  // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      10: aload_0
      11: lload_1
      12: invokestatic  #9                  // Method reactor/core/publisher/Operators.addCap:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
      15: pop2
      16: aload_0
      17: invokevirtual #10                 // Method drainQueue:()V
      20: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #11                 // Field cancelled:Z
       4: ifne          89
       7: aload_0
       8: iconst_1
       9: putfield      #11                 // Field cancelled:Z
      12: aload_0
      13: dup
      14: astore_2
      15: monitorenter
      16: aload_0
      17: getfield      #6                  // Field subscriptionStack:Ljava/util/Deque;
      20: astore_1
      21: aload_0
      22: aconst_null
      23: putfield      #6                  // Field subscriptionStack:Ljava/util/Deque;
      26: aload_2
      27: monitorexit
      28: goto          36
      31: astore_3
      32: aload_2
      33: monitorexit
      34: aload_3
      35: athrow
      36: aload_1
      37: ifnull        64
      40: aload_1
      41: invokeinterface #12,  1           // InterfaceMethod java/util/Deque.isEmpty:()Z
      46: ifne          64
      49: aload_1
      50: invokeinterface #13,  1           // InterfaceMethod java/util/Deque.poll:()Ljava/lang/Object;
      55: checkcast     #14                 // class reactor/core/publisher/FluxExpand$ExpandDepthSubscriber
      58: invokevirtual #15                 // Method reactor/core/publisher/FluxExpand$ExpandDepthSubscriber.dispose:()V
      61: goto          40
      64: getstatic     #16                 // Field CURRENT:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      67: aload_0
      68: aload_0
      69: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      72: astore_2
      73: aload_2
      74: aload_0
      75: if_acmpeq     89
      78: aload_2
      79: ifnull        89
      82: aload_2
      83: checkcast     #14                 // class reactor/core/publisher/FluxExpand$ExpandDepthSubscriber
      86: invokevirtual #15                 // Method reactor/core/publisher/FluxExpand$ExpandDepthSubscriber.dispose:()V
      89: return
    Exception table:
       from    to  target type
          16    28    31   any
          31    34    31   any

  reactor.core.publisher.FluxExpand$ExpandDepthSubscriber<T> pop();
    Code:
       0: aload_0
       1: dup
       2: astore_1
       3: monitorenter
       4: aload_0
       5: getfield      #6                  // Field subscriptionStack:Ljava/util/Deque;
       8: astore_2
       9: aload_2
      10: ifnull        25
      13: aload_2
      14: invokeinterface #18,  1           // InterfaceMethod java/util/Deque.pollFirst:()Ljava/lang/Object;
      19: checkcast     #14                 // class reactor/core/publisher/FluxExpand$ExpandDepthSubscriber
      22: goto          26
      25: aconst_null
      26: aload_1
      27: monitorexit
      28: areturn
      29: astore_3
      30: aload_1
      31: monitorexit
      32: aload_3
      33: athrow
    Exception table:
       from    to  target type
           4    28    29   any
          29    32    29   any

  boolean push(reactor.core.publisher.FluxExpand$ExpandDepthSubscriber<T>);
    Code:
       0: aload_0
       1: dup
       2: astore_2
       3: monitorenter
       4: aload_0
       5: getfield      #6                  // Field subscriptionStack:Ljava/util/Deque;
       8: astore_3
       9: aload_3
      10: ifnull        25
      13: aload_3
      14: aload_1
      15: invokeinterface #19,  2           // InterfaceMethod java/util/Deque.offerFirst:(Ljava/lang/Object;)Z
      20: pop
      21: iconst_1
      22: aload_2
      23: monitorexit
      24: ireturn
      25: iconst_0
      26: aload_2
      27: monitorexit
      28: ireturn
      29: astore        4
      31: aload_2
      32: monitorexit
      33: aload         4
      35: athrow
    Exception table:
       from    to  target type
           4    24    29   any
          25    28    29   any
          29    33    29   any

  boolean setCurrent(reactor.core.publisher.FluxExpand$ExpandDepthSubscriber<T>);
    Code:
       0: getstatic     #16                 // Field CURRENT:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokevirtual #20                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.get:(Ljava/lang/Object;)Ljava/lang/Object;
       7: astore_2
       8: aload_2
       9: aload_0
      10: if_acmpne     19
      13: aload_1
      14: invokevirtual #15                 // Method reactor/core/publisher/FluxExpand$ExpandDepthSubscriber.dispose:()V
      17: iconst_0
      18: ireturn
      19: getstatic     #16                 // Field CURRENT:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      22: aload_0
      23: aload_2
      24: aload_1
      25: invokevirtual #21                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      28: ifeq          33
      31: iconst_1
      32: ireturn
      33: goto          0

  void drainQueue();
    Code:
       0: getstatic     #22                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #23                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifeq          11
      10: return
      11: iconst_1
      12: istore_1
      13: aload_0
      14: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      17: astore_2
      18: aload_0
      19: getfield      #24                 // Field consumed:J
      22: lstore_3
      23: aload_0
      24: getfield      #25                 // Field current:Ljava/lang/Object;
      27: astore        5
      29: aload_0
      30: getfield      #11                 // Field cancelled:Z
      33: ifne          42
      36: aload         5
      38: aload_0
      39: if_acmpne     48
      42: aload_0
      43: aconst_null
      44: putfield      #26                 // Field source:Lorg/reactivestreams/Publisher;
      47: return
      48: aload         5
      50: checkcast     #14                 // class reactor/core/publisher/FluxExpand$ExpandDepthSubscriber
      53: astore        6
      55: aload_0
      56: getfield      #26                 // Field source:Lorg/reactivestreams/Publisher;
      59: astore        7
      61: aload         6
      63: ifnonnull     119
      66: aload         7
      68: ifnull        119
      71: aload_0
      72: aconst_null
      73: putfield      #26                 // Field source:Lorg/reactivestreams/Publisher;
      76: getstatic     #27                 // Field ACTIVE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      79: aload_0
      80: invokevirtual #23                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
      83: pop
      84: new           #14                 // class reactor/core/publisher/FluxExpand$ExpandDepthSubscriber
      87: dup
      88: aload_0
      89: invokespecial #28                 // Method reactor/core/publisher/FluxExpand$ExpandDepthSubscriber."<init>":(Lreactor/core/publisher/FluxExpand$ExpandDepthSubscription;)V
      92: astore        8
      94: aload_0
      95: aload         8
      97: invokevirtual #29                 // Method setCurrent:(Lreactor/core/publisher/FluxExpand$ExpandDepthSubscriber;)Z
     100: ifeq          115
     103: aload         7
     105: aload         8
     107: invokeinterface #30,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
     112: goto          116
     115: return
     116: goto          378
     119: aload         6
     121: ifnonnull     125
     124: return
     125: aload         6
     127: getfield      #31                 // Field reactor/core/publisher/FluxExpand$ExpandDepthSubscriber.done:Z
     130: istore        8
     132: aload         6
     134: getfield      #32                 // Field reactor/core/publisher/FluxExpand$ExpandDepthSubscriber.value:Ljava/lang/Object;
     137: astore        9
     139: iconst_0
     140: istore        10
     142: aload         9
     144: ifnull        292
     147: lload_3
     148: aload_0
     149: getfield      #33                 // Field requested:J
     152: lcmp
     153: ifeq          292
     156: aload         6
     158: aconst_null
     159: putfield      #32                 // Field reactor/core/publisher/FluxExpand$ExpandDepthSubscriber.value:Ljava/lang/Object;
     162: aload_2
     163: aload         9
     165: invokeinterface #34,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
     170: lload_3
     171: lconst_1
     172: ladd
     173: lstore_3
     174: aload_0
     175: getfield      #3                  // Field expander:Ljava/util/function/Function;
     178: aload         9
     180: invokeinterface #35,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
     185: ldc           #36                 // String The expander returned a null Publisher
     187: invokestatic  #37                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
     190: checkcast     #38                 // class org/reactivestreams/Publisher
     193: astore        7
     195: goto          235
     198: astore        11
     200: aload         11
     202: invokestatic  #40                 // Method reactor/core/Exceptions.throwIfFatal:(Ljava/lang/Throwable;)V
     205: aconst_null
     206: astore        7
     208: aload         6
     210: invokevirtual #15                 // Method reactor/core/publisher/FluxExpand$ExpandDepthSubscriber.dispose:()V
     213: aload         6
     215: iconst_1
     216: putfield      #31                 // Field reactor/core/publisher/FluxExpand$ExpandDepthSubscriber.done:Z
     219: iconst_1
     220: istore        8
     222: aconst_null
     223: astore        9
     225: getstatic     #41                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     228: aload_0
     229: aload         11
     231: invokestatic  #42                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
     234: pop
     235: aload         7
     237: ifnull        292
     240: aload_0
     241: aload         6
     243: invokevirtual #43                 // Method push:(Lreactor/core/publisher/FluxExpand$ExpandDepthSubscriber;)Z
     246: ifeq          292
     249: getstatic     #27                 // Field ACTIVE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     252: aload_0
     253: invokevirtual #23                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
     256: pop
     257: new           #14                 // class reactor/core/publisher/FluxExpand$ExpandDepthSubscriber
     260: dup
     261: aload_0
     262: invokespecial #28                 // Method reactor/core/publisher/FluxExpand$ExpandDepthSubscriber."<init>":(Lreactor/core/publisher/FluxExpand$ExpandDepthSubscription;)V
     265: astore        6
     267: aload_0
     268: aload         6
     270: invokevirtual #29                 // Method setCurrent:(Lreactor/core/publisher/FluxExpand$ExpandDepthSubscriber;)Z
     273: ifeq          291
     276: aload         7
     278: aload         6
     280: invokeinterface #30,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
     285: iconst_1
     286: istore        10
     288: goto          292
     291: return
     292: iload         10
     294: ifne          378
     297: iload         8
     299: ifeq          378
     302: aload         9
     304: ifnonnull     378
     307: getstatic     #27                 // Field ACTIVE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     310: aload_0
     311: invokevirtual #44                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
     314: ifne          349
     317: getstatic     #41                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     320: aload_0
     321: invokestatic  #45                 // Method reactor/core/Exceptions.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Ljava/lang/Throwable;
     324: astore        11
     326: aload         11
     328: ifnull        342
     331: aload_2
     332: aload         11
     334: invokeinterface #46,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
     339: goto          348
     342: aload_2
     343: invokeinterface #47,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
     348: return
     349: aload_0
     350: invokevirtual #48                 // Method pop:()Lreactor/core/publisher/FluxExpand$ExpandDepthSubscriber;
     353: astore        6
     355: aload         6
     357: ifnull        377
     360: aload_0
     361: aload         6
     363: invokevirtual #29                 // Method setCurrent:(Lreactor/core/publisher/FluxExpand$ExpandDepthSubscriber;)Z
     366: ifeq          377
     369: aload         6
     371: invokevirtual #49                 // Method reactor/core/publisher/FluxExpand$ExpandDepthSubscriber.requestOne:()V
     374: goto          23
     377: return
     378: aload_0
     379: getfield      #50                 // Field wip:I
     382: istore        8
     384: iload_1
     385: iload         8
     387: if_icmpne     412
     390: aload_0
     391: lload_3
     392: putfield      #24                 // Field consumed:J
     395: getstatic     #22                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     398: aload_0
     399: iload_1
     400: ineg
     401: invokevirtual #51                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
     404: istore_1
     405: iload_1
     406: ifne          415
     409: goto          418
     412: iload         8
     414: istore_1
     415: goto          23
     418: return
    Exception table:
       from    to  target type
         174   195   198   Class java/lang/Throwable

  void innerNext();
    Code:
       0: aload_0
       1: invokevirtual #10                 // Method drainQueue:()V
       4: return

  void innerError(reactor.core.publisher.FluxExpand$ExpandDepthSubscriber, java.lang.Throwable);
    Code:
       0: getstatic     #41                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_2
       5: invokestatic  #42                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
       8: pop
       9: aload_1
      10: iconst_1
      11: putfield      #31                 // Field reactor/core/publisher/FluxExpand$ExpandDepthSubscriber.done:Z
      14: aload_0
      15: invokevirtual #10                 // Method drainQueue:()V
      18: return

  void innerComplete(reactor.core.publisher.FluxExpand$ExpandDepthSubscriber);
    Code:
       0: aload_1
       1: iconst_1
       2: putfield      #31                 // Field reactor/core/publisher/FluxExpand$ExpandDepthSubscriber.done:Z
       5: aload_0
       6: invokevirtual #10                 // Method drainQueue:()V
       9: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #52                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
       4: if_acmpne     15
       7: aload_0
       8: getfield      #11                 // Field cancelled:Z
      11: invokestatic  #53                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      14: areturn
      15: aload_1
      16: getstatic     #54                 // Field reactor/core/Scannable$Attr.REQUESTED_FROM_DOWNSTREAM:Lreactor/core/Scannable$Attr;
      19: if_acmpne     30
      22: aload_0
      23: getfield      #33                 // Field requested:J
      26: invokestatic  #55                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      29: areturn
      30: aload_1
      31: getstatic     #56                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
      34: if_acmpne     42
      37: aload_0
      38: getfield      #57                 // Field error:Ljava/lang/Throwable;
      41: areturn
      42: aload_0
      43: aload_1
      44: invokespecial #58                 // InterfaceMethod reactor/core/publisher/InnerProducer.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      47: areturn

  static {};
    Code:
       0: ldc           #59                 // class reactor/core/publisher/FluxExpand$ExpandDepthSubscription
       2: ldc           #39                 // class java/lang/Throwable
       4: ldc           #60                 // String error
       6: invokestatic  #61                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #41                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: ldc           #59                 // class reactor/core/publisher/FluxExpand$ExpandDepthSubscription
      14: ldc           #62                 // String active
      16: invokestatic  #63                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      19: putstatic     #27                 // Field ACTIVE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      22: ldc           #59                 // class reactor/core/publisher/FluxExpand$ExpandDepthSubscription
      24: ldc           #64                 // String requested
      26: invokestatic  #65                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      29: putstatic     #8                  // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      32: ldc           #59                 // class reactor/core/publisher/FluxExpand$ExpandDepthSubscription
      34: ldc           #66                 // class java/lang/Object
      36: ldc           #67                 // String current
      38: invokestatic  #61                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      41: putstatic     #16                 // Field CURRENT:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      44: ldc           #59                 // class reactor/core/publisher/FluxExpand$ExpandDepthSubscription
      46: ldc           #68                 // String wip
      48: invokestatic  #63                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      51: putstatic     #22                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      54: return
}
