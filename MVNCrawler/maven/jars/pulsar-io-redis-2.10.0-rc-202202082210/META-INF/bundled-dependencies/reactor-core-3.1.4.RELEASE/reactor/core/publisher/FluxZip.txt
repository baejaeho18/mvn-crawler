Compiled from "FluxZip.java"
final class reactor.core.publisher.FluxZip<T, R> extends reactor.core.publisher.Flux<R> {
  final org.reactivestreams.Publisher<? extends T>[] sources;

  final java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends T>> sourcesIterable;

  final java.util.function.Function<? super java.lang.Object[], ? extends R> zipper;

  final java.util.function.Supplier<? extends java.util.Queue<T>> queueSupplier;

  final int prefetch;

  <U> reactor.core.publisher.FluxZip(org.reactivestreams.Publisher<? extends T>, org.reactivestreams.Publisher<? extends U>, java.util.function.BiFunction<? super T, ? super U, ? extends R>, java.util.function.Supplier<? extends java.util.Queue<T>>, int);
    Code:
       0: aload_0
       1: iconst_2
       2: anewarray     #1                  // class org/reactivestreams/Publisher
       5: dup
       6: iconst_0
       7: aload_1
       8: ldc           #2                  // String p1
      10: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      13: checkcast     #1                  // class org/reactivestreams/Publisher
      16: aastore
      17: dup
      18: iconst_1
      19: aload_2
      20: ldc           #4                  // String p2
      22: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      25: checkcast     #1                  // class org/reactivestreams/Publisher
      28: aastore
      29: new           #5                  // class reactor/core/publisher/FluxZip$PairwiseZipper
      32: dup
      33: iconst_1
      34: anewarray     #6                  // class java/util/function/BiFunction
      37: dup
      38: iconst_0
      39: aload_3
      40: ldc           #7                  // String zipper2
      42: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      45: checkcast     #6                  // class java/util/function/BiFunction
      48: aastore
      49: invokespecial #8                  // Method reactor/core/publisher/FluxZip$PairwiseZipper."<init>":([Ljava/util/function/BiFunction;)V
      52: aload         4
      54: iload         5
      56: invokespecial #9                  // Method "<init>":([Lorg/reactivestreams/Publisher;Ljava/util/function/Function;Ljava/util/function/Supplier;I)V
      59: return

  reactor.core.publisher.FluxZip(org.reactivestreams.Publisher<? extends T>[], java.util.function.Function<? super java.lang.Object[], ? extends R>, java.util.function.Supplier<? extends java.util.Queue<T>>, int);
    Code:
       0: aload_0
       1: invokespecial #10                 // Method reactor/core/publisher/Flux."<init>":()V
       4: iload         4
       6: ifgt          37
       9: new           #11                 // class java/lang/IllegalArgumentException
      12: dup
      13: new           #12                 // class java/lang/StringBuilder
      16: dup
      17: invokespecial #13                 // Method java/lang/StringBuilder."<init>":()V
      20: ldc           #14                 // String prefetch > 0 required but it was
      22: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      25: iload         4
      27: invokevirtual #16                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      30: invokevirtual #17                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      33: invokespecial #18                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      36: athrow
      37: aload_0
      38: aload_1
      39: ldc           #19                 // String sources
      41: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      44: checkcast     #20                 // class "[Lorg/reactivestreams/Publisher;"
      47: putfield      #21                 // Field sources:[Lorg/reactivestreams/Publisher;
      50: aload_1
      51: arraylength
      52: ifne          65
      55: new           #11                 // class java/lang/IllegalArgumentException
      58: dup
      59: ldc           #22                 // String at least one source is required
      61: invokespecial #18                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      64: athrow
      65: aload_0
      66: aconst_null
      67: putfield      #23                 // Field sourcesIterable:Ljava/lang/Iterable;
      70: aload_0
      71: aload_2
      72: ldc           #24                 // String zipper
      74: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      77: checkcast     #25                 // class java/util/function/Function
      80: putfield      #26                 // Field zipper:Ljava/util/function/Function;
      83: aload_0
      84: aload_3
      85: ldc           #27                 // String queueSupplier
      87: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      90: checkcast     #28                 // class java/util/function/Supplier
      93: putfield      #29                 // Field queueSupplier:Ljava/util/function/Supplier;
      96: aload_0
      97: iload         4
      99: putfield      #30                 // Field prefetch:I
     102: return

  reactor.core.publisher.FluxZip(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends T>>, java.util.function.Function<? super java.lang.Object[], ? extends R>, java.util.function.Supplier<? extends java.util.Queue<T>>, int);
    Code:
       0: aload_0
       1: invokespecial #10                 // Method reactor/core/publisher/Flux."<init>":()V
       4: iload         4
       6: ifgt          37
       9: new           #11                 // class java/lang/IllegalArgumentException
      12: dup
      13: new           #12                 // class java/lang/StringBuilder
      16: dup
      17: invokespecial #13                 // Method java/lang/StringBuilder."<init>":()V
      20: ldc           #14                 // String prefetch > 0 required but it was
      22: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      25: iload         4
      27: invokevirtual #16                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      30: invokevirtual #17                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      33: invokespecial #18                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      36: athrow
      37: aload_0
      38: aconst_null
      39: putfield      #21                 // Field sources:[Lorg/reactivestreams/Publisher;
      42: aload_0
      43: aload_1
      44: ldc           #31                 // String sourcesIterable
      46: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      49: checkcast     #32                 // class java/lang/Iterable
      52: putfield      #23                 // Field sourcesIterable:Ljava/lang/Iterable;
      55: aload_0
      56: aload_2
      57: ldc           #24                 // String zipper
      59: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      62: checkcast     #25                 // class java/util/function/Function
      65: putfield      #26                 // Field zipper:Ljava/util/function/Function;
      68: aload_0
      69: aload_3
      70: ldc           #27                 // String queueSupplier
      72: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      75: checkcast     #28                 // class java/util/function/Supplier
      78: putfield      #29                 // Field queueSupplier:Ljava/util/function/Supplier;
      81: aload_0
      82: iload         4
      84: putfield      #30                 // Field prefetch:I
      87: return

  public int getPrefetch();
    Code:
       0: aload_0
       1: getfield      #30                 // Field prefetch:I
       4: ireturn

  reactor.core.publisher.FluxZip<T, R> zipAdditionalSource(org.reactivestreams.Publisher, java.util.function.BiFunction);
    Code:
       0: aload_0
       1: getfield      #21                 // Field sources:[Lorg/reactivestreams/Publisher;
       4: astore_3
       5: aload_3
       6: ifnull        81
       9: aload_0
      10: getfield      #26                 // Field zipper:Ljava/util/function/Function;
      13: instanceof    #5                  // class reactor/core/publisher/FluxZip$PairwiseZipper
      16: ifeq          81
      19: aload_3
      20: arraylength
      21: istore        4
      23: iload         4
      25: iconst_1
      26: iadd
      27: anewarray     #1                  // class org/reactivestreams/Publisher
      30: astore        5
      32: aload_3
      33: iconst_0
      34: aload         5
      36: iconst_0
      37: iload         4
      39: invokestatic  #33                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      42: aload         5
      44: iload         4
      46: aload_1
      47: aastore
      48: aload_0
      49: getfield      #26                 // Field zipper:Ljava/util/function/Function;
      52: checkcast     #5                  // class reactor/core/publisher/FluxZip$PairwiseZipper
      55: aload_2
      56: invokevirtual #34                 // Method reactor/core/publisher/FluxZip$PairwiseZipper.then:(Ljava/util/function/BiFunction;)Lreactor/core/publisher/FluxZip$PairwiseZipper;
      59: astore        6
      61: new           #35                 // class reactor/core/publisher/FluxZip
      64: dup
      65: aload         5
      67: aload         6
      69: aload_0
      70: getfield      #29                 // Field queueSupplier:Ljava/util/function/Supplier;
      73: aload_0
      74: getfield      #30                 // Field prefetch:I
      77: invokespecial #9                  // Method "<init>":([Lorg/reactivestreams/Publisher;Ljava/util/function/Function;Ljava/util/function/Supplier;I)V
      80: areturn
      81: aconst_null
      82: areturn

  public void subscribe(reactor.core.CoreSubscriber<? super R>);
    Code:
       0: aload_0
       1: getfield      #21                 // Field sources:[Lorg/reactivestreams/Publisher;
       4: astore_2
       5: aload_2
       6: ifnull        18
       9: aload_0
      10: aload_1
      11: aload_2
      12: invokevirtual #36                 // Method handleArrayMode:(Lreactor/core/CoreSubscriber;[Lorg/reactivestreams/Publisher;)V
      15: goto          27
      18: aload_0
      19: aload_1
      20: aload_0
      21: getfield      #23                 // Field sourcesIterable:Ljava/lang/Iterable;
      24: invokevirtual #37                 // Method handleIterableMode:(Lreactor/core/CoreSubscriber;Ljava/lang/Iterable;)V
      27: return

  void handleIterableMode(reactor.core.CoreSubscriber<? super R>, java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends T>>);
    Code:
       0: bipush        8
       2: anewarray     #38                 // class java/lang/Object
       5: astore_3
       6: bipush        8
       8: anewarray     #1                  // class org/reactivestreams/Publisher
      11: astore        4
      13: iconst_0
      14: istore        5
      16: iconst_0
      17: istore        6
      19: aload_2
      20: invokeinterface #39,  1           // InterfaceMethod java/lang/Iterable.iterator:()Ljava/util/Iterator;
      25: astore        7
      27: aload         7
      29: invokeinterface #40,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      34: ifeq          268
      37: aload         7
      39: invokeinterface #41,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      44: checkcast     #1                  // class org/reactivestreams/Publisher
      47: astore        8
      49: aload         8
      51: ifnonnull     77
      54: aload_1
      55: new           #42                 // class java/lang/NullPointerException
      58: dup
      59: ldc           #43                 // String The sourcesIterable returned a null Publisher
      61: invokespecial #44                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      64: aload_1
      65: invokeinterface #45,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      70: invokestatic  #46                 // Method reactor/core/publisher/Operators.onOperatorError:(Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      73: invokestatic  #47                 // Method reactor/core/publisher/Operators.error:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
      76: return
      77: aload         8
      79: instanceof    #48                 // class java/util/concurrent/Callable
      82: ifeq          199
      85: aload         8
      87: checkcast     #48                 // class java/util/concurrent/Callable
      90: astore        9
      92: aload         9
      94: invokeinterface #49,  1           // InterfaceMethod java/util/concurrent/Callable.call:()Ljava/lang/Object;
      99: astore        10
     101: goto          122
     104: astore        11
     106: aload_1
     107: aload         11
     109: aload_1
     110: invokeinterface #45,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
     115: invokestatic  #46                 // Method reactor/core/publisher/Operators.onOperatorError:(Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
     118: invokestatic  #47                 // Method reactor/core/publisher/Operators.error:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
     121: return
     122: aload         10
     124: ifnonnull     132
     127: aload_1
     128: invokestatic  #51                 // Method reactor/core/publisher/Operators.complete:(Lorg/reactivestreams/Subscriber;)V
     131: return
     132: iload         5
     134: aload_3
     135: arraylength
     136: if_icmpne     187
     139: iload         5
     141: iload         5
     143: iconst_1
     144: ishr
     145: iadd
     146: anewarray     #38                 // class java/lang/Object
     149: astore        11
     151: aload_3
     152: iconst_0
     153: aload         11
     155: iconst_0
     156: iload         5
     158: invokestatic  #33                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     161: aload         11
     163: arraylength
     164: anewarray     #1                  // class org/reactivestreams/Publisher
     167: astore        12
     169: aload         4
     171: iconst_0
     172: aload         12
     174: iconst_0
     175: iload         5
     177: invokestatic  #33                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     180: aload         11
     182: astore_3
     183: aload         12
     185: astore        4
     187: aload_3
     188: iload         5
     190: aload         10
     192: aastore
     193: iinc          6, 1
     196: goto          262
     199: iload         5
     201: aload         4
     203: arraylength
     204: if_icmpne     255
     207: iload         5
     209: iload         5
     211: iconst_1
     212: ishr
     213: iadd
     214: anewarray     #38                 // class java/lang/Object
     217: astore        9
     219: aload_3
     220: iconst_0
     221: aload         9
     223: iconst_0
     224: iload         5
     226: invokestatic  #33                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     229: aload         9
     231: arraylength
     232: anewarray     #1                  // class org/reactivestreams/Publisher
     235: astore        10
     237: aload         4
     239: iconst_0
     240: aload         10
     242: iconst_0
     243: iload         5
     245: invokestatic  #33                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     248: aload         9
     250: astore_3
     251: aload         10
     253: astore        4
     255: aload         4
     257: iload         5
     259: aload         8
     261: aastore
     262: iinc          5, 1
     265: goto          27
     268: iload         5
     270: ifne          278
     273: aload_1
     274: invokestatic  #51                 // Method reactor/core/publisher/Operators.complete:(Lorg/reactivestreams/Subscriber;)V
     277: return
     278: iload         5
     280: aload_3
     281: arraylength
     282: if_icmpge     297
     285: aload_3
     286: iconst_0
     287: iload         5
     289: aload_3
     290: invokevirtual #52                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
     293: invokestatic  #53                 // Method java/util/Arrays.copyOfRange:([Ljava/lang/Object;IILjava/lang/Class;)[Ljava/lang/Object;
     296: astore_3
     297: aload_0
     298: aload_1
     299: aload         4
     301: aload_3
     302: iload         5
     304: iload         6
     306: invokevirtual #54                 // Method handleBoth:(Lreactor/core/CoreSubscriber;[Lorg/reactivestreams/Publisher;[Ljava/lang/Object;II)V
     309: return
    Exception table:
       from    to  target type
          92   101   104   Class java/lang/Throwable

  void handleArrayMode(reactor.core.CoreSubscriber<? super R>, org.reactivestreams.Publisher<? extends T>[]);
    Code:
       0: aconst_null
       1: astore_3
       2: aload_2
       3: arraylength
       4: istore        4
       6: iconst_0
       7: istore        5
       9: iconst_0
      10: istore        6
      12: iload         6
      14: iload         4
      16: if_icmpge     120
      19: aload_2
      20: iload         6
      22: aaload
      23: astore        7
      25: aload         7
      27: ifnonnull     44
      30: aload_1
      31: new           #42                 // class java/lang/NullPointerException
      34: dup
      35: ldc           #55                 // String The sources contained a null Publisher
      37: invokespecial #44                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      40: invokestatic  #47                 // Method reactor/core/publisher/Operators.error:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
      43: return
      44: aload         7
      46: instanceof    #48                 // class java/util/concurrent/Callable
      49: ifeq          114
      52: aload         7
      54: checkcast     #48                 // class java/util/concurrent/Callable
      57: invokeinterface #49,  1           // InterfaceMethod java/util/concurrent/Callable.call:()Ljava/lang/Object;
      62: astore        8
      64: goto          85
      67: astore        9
      69: aload_1
      70: aload         9
      72: aload_1
      73: invokeinterface #45,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      78: invokestatic  #46                 // Method reactor/core/publisher/Operators.onOperatorError:(Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      81: invokestatic  #47                 // Method reactor/core/publisher/Operators.error:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V
      84: return
      85: aload         8
      87: ifnonnull     95
      90: aload_1
      91: invokestatic  #51                 // Method reactor/core/publisher/Operators.complete:(Lorg/reactivestreams/Subscriber;)V
      94: return
      95: aload_3
      96: ifnonnull     105
      99: iload         4
     101: anewarray     #38                 // class java/lang/Object
     104: astore_3
     105: aload_3
     106: iload         6
     108: aload         8
     110: aastore
     111: iinc          5, 1
     114: iinc          6, 1
     117: goto          12
     120: aload_0
     121: aload_1
     122: aload_2
     123: aload_3
     124: iload         4
     126: iload         5
     128: invokevirtual #54                 // Method handleBoth:(Lreactor/core/CoreSubscriber;[Lorg/reactivestreams/Publisher;[Ljava/lang/Object;II)V
     131: return
    Exception table:
       from    to  target type
          52    64    67   Class java/lang/Throwable

  void handleBoth(reactor.core.CoreSubscriber<? super R>, org.reactivestreams.Publisher<? extends T>[], java.lang.Object[], int, int);
    Code:
       0: iload         5
       2: ifeq          122
       5: aload_3
       6: ifnull        122
       9: iload         4
      11: iload         5
      13: if_icmpeq     54
      16: new           #56                 // class reactor/core/publisher/FluxZip$ZipSingleCoordinator
      19: dup
      20: aload_1
      21: aload_3
      22: iload         4
      24: aload_0
      25: getfield      #26                 // Field zipper:Ljava/util/function/Function;
      28: invokespecial #57                 // Method reactor/core/publisher/FluxZip$ZipSingleCoordinator."<init>":(Lreactor/core/CoreSubscriber;[Ljava/lang/Object;ILjava/util/function/Function;)V
      31: astore        6
      33: aload_1
      34: aload         6
      36: invokeinterface #58,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      41: aload         6
      43: iload         4
      45: iload         5
      47: aload_2
      48: invokevirtual #59                 // Method reactor/core/publisher/FluxZip$ZipSingleCoordinator.subscribe:(II[Lorg/reactivestreams/Publisher;)V
      51: goto          162
      54: new           #60                 // class reactor/core/publisher/Operators$MonoSubscriber
      57: dup
      58: aload_1
      59: invokespecial #61                 // Method reactor/core/publisher/Operators$MonoSubscriber."<init>":(Lreactor/core/CoreSubscriber;)V
      62: astore        6
      64: aload_1
      65: aload         6
      67: invokeinterface #58,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      72: aload_0
      73: getfield      #26                 // Field zipper:Ljava/util/function/Function;
      76: aload_3
      77: invokeinterface #62,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      82: ldc           #63                 // String The zipper returned a null value
      84: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      87: astore        7
      89: goto          112
      92: astore        8
      94: aload_1
      95: aload         8
      97: aload_1
      98: invokeinterface #45,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
     103: invokestatic  #46                 // Method reactor/core/publisher/Operators.onOperatorError:(Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
     106: invokeinterface #64,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
     111: return
     112: aload         6
     114: aload         7
     116: invokevirtual #65                 // Method reactor/core/publisher/Operators$MonoSubscriber.complete:(Ljava/lang/Object;)V
     119: goto          162
     122: new           #66                 // class reactor/core/publisher/FluxZip$ZipCoordinator
     125: dup
     126: aload_1
     127: aload_0
     128: getfield      #26                 // Field zipper:Ljava/util/function/Function;
     131: iload         4
     133: aload_0
     134: getfield      #29                 // Field queueSupplier:Ljava/util/function/Supplier;
     137: aload_0
     138: getfield      #30                 // Field prefetch:I
     141: invokespecial #67                 // Method reactor/core/publisher/FluxZip$ZipCoordinator."<init>":(Lreactor/core/CoreSubscriber;Ljava/util/function/Function;ILjava/util/function/Supplier;I)V
     144: astore        6
     146: aload_1
     147: aload         6
     149: invokeinterface #58,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
     154: aload         6
     156: aload_2
     157: iload         4
     159: invokevirtual #68                 // Method reactor/core/publisher/FluxZip$ZipCoordinator.subscribe:([Lorg/reactivestreams/Publisher;I)V
     162: return
    Exception table:
       from    to  target type
          72    89    92   Class java/lang/Throwable
}
