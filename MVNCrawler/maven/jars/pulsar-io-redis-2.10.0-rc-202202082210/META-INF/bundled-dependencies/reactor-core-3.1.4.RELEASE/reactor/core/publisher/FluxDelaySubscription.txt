Compiled from "FluxDelaySubscription.java"
final class reactor.core.publisher.FluxDelaySubscription<T, U> extends reactor.core.publisher.FluxOperator<T, T> implements java.util.function.Consumer<reactor.core.publisher.FluxDelaySubscription$DelaySubscriptionOtherSubscriber<T, U>> {
  final org.reactivestreams.Publisher<U> other;

  reactor.core.publisher.FluxDelaySubscription(reactor.core.publisher.Flux<? extends T>, org.reactivestreams.Publisher<U>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxOperator."<init>":(Lreactor/core/publisher/Flux;)V
       5: aload_0
       6: aload_2
       7: ldc           #2                  // String other
       9: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      12: checkcast     #4                  // class org/reactivestreams/Publisher
      15: putfield      #5                  // Field other:Lorg/reactivestreams/Publisher;
      18: return

  public int getPrefetch();
    Code:
       0: ldc           #7                  // int 2147483647
       2: ireturn

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: getfield      #5                  // Field other:Lorg/reactivestreams/Publisher;
       4: new           #8                  // class reactor/core/publisher/FluxDelaySubscription$DelaySubscriptionOtherSubscriber
       7: dup
       8: aload_1
       9: aload_0
      10: invokespecial #9                  // Method reactor/core/publisher/FluxDelaySubscription$DelaySubscriptionOtherSubscriber."<init>":(Lreactor/core/CoreSubscriber;Ljava/util/function/Consumer;)V
      13: invokeinterface #10,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
      18: return

  public void accept(reactor.core.publisher.FluxDelaySubscription$DelaySubscriptionOtherSubscriber<T, U>);
    Code:
       0: aload_0
       1: getfield      #11                 // Field source:Lreactor/core/publisher/Flux;
       4: new           #12                 // class reactor/core/publisher/FluxDelaySubscription$DelaySubscriptionMainSubscriber
       7: dup
       8: aload_1
       9: getfield      #13                 // Field reactor/core/publisher/FluxDelaySubscription$DelaySubscriptionOtherSubscriber.actual:Lreactor/core/CoreSubscriber;
      12: aload_1
      13: invokespecial #14                 // Method reactor/core/publisher/FluxDelaySubscription$DelaySubscriptionMainSubscriber."<init>":(Lreactor/core/CoreSubscriber;Lreactor/core/publisher/FluxDelaySubscription$DelaySubscriptionOtherSubscriber;)V
      16: invokevirtual #15                 // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      19: return

  public void accept(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #8                  // class reactor/core/publisher/FluxDelaySubscription$DelaySubscriptionOtherSubscriber
       5: invokevirtual #16                 // Method accept:(Lreactor/core/publisher/FluxDelaySubscription$DelaySubscriptionOtherSubscriber;)V
       8: return
}
