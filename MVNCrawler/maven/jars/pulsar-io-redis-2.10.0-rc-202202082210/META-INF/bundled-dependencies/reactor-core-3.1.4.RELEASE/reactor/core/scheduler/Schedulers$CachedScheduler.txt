Compiled from "Schedulers.java"
class reactor.core.scheduler.Schedulers$CachedScheduler implements reactor.core.scheduler.Scheduler, java.util.function.Supplier<reactor.core.scheduler.Scheduler>, reactor.core.Scannable {
  final reactor.core.scheduler.Scheduler cached;

  final java.lang.String key;

  reactor.core.scheduler.Schedulers$CachedScheduler(java.lang.String, reactor.core.scheduler.Scheduler);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_2
       6: putfield      #2                  // Field cached:Lreactor/core/scheduler/Scheduler;
       9: aload_0
      10: aload_1
      11: putfield      #3                  // Field key:Ljava/lang/String;
      14: return

  public reactor.core.Disposable schedule(java.lang.Runnable);
    Code:
       0: aload_0
       1: getfield      #2                  // Field cached:Lreactor/core/scheduler/Scheduler;
       4: aload_1
       5: invokeinterface #4,  2            // InterfaceMethod reactor/core/scheduler/Scheduler.schedule:(Ljava/lang/Runnable;)Lreactor/core/Disposable;
      10: areturn

  public reactor.core.Disposable schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: getfield      #2                  // Field cached:Lreactor/core/scheduler/Scheduler;
       4: aload_1
       5: lload_2
       6: aload         4
       8: invokeinterface #5,  5            // InterfaceMethod reactor/core/scheduler/Scheduler.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lreactor/core/Disposable;
      13: areturn

  public reactor.core.Disposable schedulePeriodically(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: getfield      #2                  // Field cached:Lreactor/core/scheduler/Scheduler;
       4: aload_1
       5: lload_2
       6: lload         4
       8: aload         6
      10: invokeinterface #6,  7            // InterfaceMethod reactor/core/scheduler/Scheduler.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lreactor/core/Disposable;
      15: areturn

  public reactor.core.scheduler.Scheduler$Worker createWorker();
    Code:
       0: aload_0
       1: getfield      #2                  // Field cached:Lreactor/core/scheduler/Scheduler;
       4: invokeinterface #7,  1            // InterfaceMethod reactor/core/scheduler/Scheduler.createWorker:()Lreactor/core/scheduler/Scheduler$Worker;
       9: areturn

  public long now(java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: getfield      #2                  // Field cached:Lreactor/core/scheduler/Scheduler;
       4: aload_1
       5: invokeinterface #8,  2            // InterfaceMethod reactor/core/scheduler/Scheduler.now:(Ljava/util/concurrent/TimeUnit;)J
      10: lreturn

  public void start();
    Code:
       0: aload_0
       1: getfield      #2                  // Field cached:Lreactor/core/scheduler/Scheduler;
       4: invokeinterface #9,  1            // InterfaceMethod reactor/core/scheduler/Scheduler.start:()V
       9: return

  public void dispose();
    Code:
       0: return

  public boolean isDisposed();
    Code:
       0: aload_0
       1: getfield      #2                  // Field cached:Lreactor/core/scheduler/Scheduler;
       4: invokeinterface #10,  1           // InterfaceMethod reactor/core/scheduler/Scheduler.isDisposed:()Z
       9: ireturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #2                  // Field cached:Lreactor/core/scheduler/Scheduler;
       4: invokevirtual #11                 // Method java/lang/Object.toString:()Ljava/lang/String;
       7: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_0
       1: getfield      #2                  // Field cached:Lreactor/core/scheduler/Scheduler;
       4: invokestatic  #12                 // InterfaceMethod reactor/core/Scannable.from:(Ljava/lang/Object;)Lreactor/core/Scannable;
       7: aload_1
       8: invokeinterface #13,  2           // InterfaceMethod reactor/core/Scannable.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      13: areturn

  public reactor.core.scheduler.Scheduler get();
    Code:
       0: aload_0
       1: getfield      #2                  // Field cached:Lreactor/core/scheduler/Scheduler;
       4: areturn

  void _dispose();
    Code:
       0: aload_0
       1: getfield      #2                  // Field cached:Lreactor/core/scheduler/Scheduler;
       4: invokeinterface #14,  1           // InterfaceMethod reactor/core/scheduler/Scheduler.dispose:()V
       9: return

  public java.lang.Object get();
    Code:
       0: aload_0
       1: invokevirtual #15                 // Method get:()Lreactor/core/scheduler/Scheduler;
       4: areturn
}
