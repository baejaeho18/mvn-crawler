Compiled from "MonoRetryWhen.java"
final class reactor.core.publisher.MonoRetryWhen<T> extends reactor.core.publisher.MonoOperator<T, T> {
  final java.util.function.Function<? super reactor.core.publisher.Flux<java.lang.Throwable>, ? extends org.reactivestreams.Publisher<?>> whenSourceFactory;

  reactor.core.publisher.MonoRetryWhen(reactor.core.publisher.Mono<? extends T>, java.util.function.Function<? super reactor.core.publisher.Flux<java.lang.Throwable>, ? extends org.reactivestreams.Publisher<?>>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/MonoOperator."<init>":(Lreactor/core/publisher/Mono;)V
       5: aload_0
       6: aload_2
       7: ldc           #2                  // String whenSourceFactory
       9: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      12: checkcast     #4                  // class java/util/function/Function
      15: putfield      #5                  // Field whenSourceFactory:Ljava/util/function/Function;
      18: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #5                  // Field whenSourceFactory:Ljava/util/function/Function;
       5: aload_0
       6: getfield      #6                  // Field source:Lreactor/core/publisher/Mono;
       9: invokestatic  #7                  // Method reactor/core/publisher/FluxRetryWhen.subscribe:(Lreactor/core/CoreSubscriber;Ljava/util/function/Function;Lorg/reactivestreams/Publisher;)V
      12: return
}
