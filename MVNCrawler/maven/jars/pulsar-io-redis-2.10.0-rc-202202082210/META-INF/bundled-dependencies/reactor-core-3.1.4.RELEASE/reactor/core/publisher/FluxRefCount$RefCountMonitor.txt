Compiled from "FluxRefCount.java"
final class reactor.core.publisher.FluxRefCount$RefCountMonitor<T> implements java.util.function.Consumer<reactor.core.Disposable> {
  final int n;

  final reactor.core.publisher.FluxRefCount<? extends T> parent;

  volatile int subscribers;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxRefCount$RefCountMonitor> SUBSCRIBERS;

  volatile reactor.core.Disposable disconnect;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxRefCount$RefCountMonitor, reactor.core.Disposable> DISCONNECT;

  reactor.core.publisher.FluxRefCount$RefCountMonitor(int, reactor.core.publisher.FluxRefCount<? extends T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iload_1
       6: putfield      #2                  // Field n:I
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field parent:Lreactor/core/publisher/FluxRefCount;
      14: return

  void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: new           #4                  // class reactor/core/publisher/FluxRefCount$RefCountInner
       3: dup
       4: aload_1
       5: aload_0
       6: invokespecial #5                  // Method reactor/core/publisher/FluxRefCount$RefCountInner."<init>":(Lreactor/core/CoreSubscriber;Lreactor/core/publisher/FluxRefCount$RefCountMonitor;)V
       9: astore_2
      10: aload_0
      11: getfield      #3                  // Field parent:Lreactor/core/publisher/FluxRefCount;
      14: getfield      #6                  // Field reactor/core/publisher/FluxRefCount.source:Lreactor/core/publisher/ConnectableFlux;
      17: aload_2
      18: invokevirtual #7                  // Method reactor/core/publisher/ConnectableFlux.subscribe:(Lreactor/core/CoreSubscriber;)V
      21: getstatic     #8                  // Field SUBSCRIBERS:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      24: aload_0
      25: invokevirtual #9                  // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.incrementAndGet:(Ljava/lang/Object;)I
      28: aload_0
      29: getfield      #2                  // Field n:I
      32: if_icmpne     46
      35: aload_0
      36: getfield      #3                  // Field parent:Lreactor/core/publisher/FluxRefCount;
      39: getfield      #6                  // Field reactor/core/publisher/FluxRefCount.source:Lreactor/core/publisher/ConnectableFlux;
      42: aload_0
      43: invokevirtual #10                 // Method reactor/core/publisher/ConnectableFlux.connect:(Ljava/util/function/Consumer;)V
      46: return

  public void accept(reactor.core.Disposable);
    Code:
       0: getstatic     #11                 // Field DISCONNECT:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aconst_null
       5: aload_1
       6: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
       9: ifne          18
      12: aload_1
      13: invokeinterface #13,  1           // InterfaceMethod reactor/core/Disposable.dispose:()V
      18: return

  void innerCancelled();
    Code:
       0: getstatic     #8                  // Field SUBSCRIBERS:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
       7: ifne          18
      10: getstatic     #11                 // Field DISCONNECT:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      13: aload_0
      14: invokestatic  #15                 // Method reactor/core/publisher/OperatorDisposables.dispose:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Z
      17: pop
      18: return

  void upstreamFinished();
    Code:
       0: aload_0
       1: getfield      #16                 // Field disconnect:Lreactor/core/Disposable;
       4: astore_1
       5: aload_1
       6: getstatic     #17                 // Field reactor/core/publisher/OperatorDisposables.DISPOSED:Lreactor/core/Disposable;
       9: if_acmpeq     23
      12: getstatic     #11                 // Field DISCONNECT:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      15: aload_0
      16: getstatic     #17                 // Field reactor/core/publisher/OperatorDisposables.DISPOSED:Lreactor/core/Disposable;
      19: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      22: pop
      23: return

  public void accept(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #19                 // class reactor/core/Disposable
       5: invokevirtual #20                 // Method accept:(Lreactor/core/Disposable;)V
       8: return

  static {};
    Code:
       0: ldc           #21                 // class reactor/core/publisher/FluxRefCount$RefCountMonitor
       2: ldc           #22                 // String subscribers
       4: invokestatic  #23                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #8                  // Field SUBSCRIBERS:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: ldc           #21                 // class reactor/core/publisher/FluxRefCount$RefCountMonitor
      12: ldc           #19                 // class reactor/core/Disposable
      14: ldc           #24                 // String disconnect
      16: invokestatic  #25                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      19: putstatic     #11                 // Field DISCONNECT:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      22: return
}
