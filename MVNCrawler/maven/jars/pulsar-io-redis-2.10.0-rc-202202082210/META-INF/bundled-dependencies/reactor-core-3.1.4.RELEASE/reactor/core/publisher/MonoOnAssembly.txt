Compiled from "MonoOnAssembly.java"
final class reactor.core.publisher.MonoOnAssembly<T> extends reactor.core.publisher.MonoOperator<T, T> implements reactor.core.Fuseable, reactor.core.publisher.AssemblyOp {
  final reactor.core.publisher.FluxOnAssembly$AssemblySnapshotException stacktrace;

  reactor.core.publisher.MonoOnAssembly(reactor.core.publisher.Mono<? extends T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/MonoOperator."<init>":(Lreactor/core/publisher/Mono;)V
       5: aload_0
       6: new           #2                  // class reactor/core/publisher/FluxOnAssembly$AssemblySnapshotException
       9: dup
      10: invokespecial #3                  // Method reactor/core/publisher/FluxOnAssembly$AssemblySnapshotException."<init>":()V
      13: putfield      #4                  // Field stacktrace:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshotException;
      16: return

  reactor.core.publisher.MonoOnAssembly(reactor.core.publisher.Mono<? extends T>, java.lang.String, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/MonoOperator."<init>":(Lreactor/core/publisher/Mono;)V
       5: iload_3
       6: ifeq          24
       9: aload_0
      10: new           #5                  // class reactor/core/publisher/FluxOnAssembly$AssemblyLightSnapshotException
      13: dup
      14: aload_2
      15: invokespecial #6                  // Method reactor/core/publisher/FluxOnAssembly$AssemblyLightSnapshotException."<init>":(Ljava/lang/String;)V
      18: putfield      #4                  // Field stacktrace:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshotException;
      21: goto          36
      24: aload_0
      25: new           #2                  // class reactor/core/publisher/FluxOnAssembly$AssemblySnapshotException
      28: dup
      29: aload_2
      30: invokespecial #7                  // Method reactor/core/publisher/FluxOnAssembly$AssemblySnapshotException."<init>":(Ljava/lang/String;)V
      33: putfield      #4                  // Field stacktrace:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshotException;
      36: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_1
       1: instanceof    #8                  // class reactor/core/Fuseable$ConditionalSubscriber
       4: ifeq          38
       7: aload_1
       8: checkcast     #8                  // class reactor/core/Fuseable$ConditionalSubscriber
      11: astore_2
      12: aload_0
      13: getfield      #9                  // Field source:Lreactor/core/publisher/Mono;
      16: new           #10                 // class reactor/core/publisher/FluxOnAssembly$OnAssemblyConditionalSubscriber
      19: dup
      20: aload_2
      21: aload_0
      22: getfield      #4                  // Field stacktrace:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshotException;
      25: aload_0
      26: getfield      #9                  // Field source:Lreactor/core/publisher/Mono;
      29: invokespecial #11                 // Method reactor/core/publisher/FluxOnAssembly$OnAssemblyConditionalSubscriber."<init>":(Lreactor/core/Fuseable$ConditionalSubscriber;Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshotException;Lorg/reactivestreams/Publisher;)V
      32: invokevirtual #12                 // Method reactor/core/publisher/Mono.subscribe:(Lreactor/core/CoreSubscriber;)V
      35: goto          61
      38: aload_0
      39: getfield      #9                  // Field source:Lreactor/core/publisher/Mono;
      42: new           #13                 // class reactor/core/publisher/FluxOnAssembly$OnAssemblySubscriber
      45: dup
      46: aload_1
      47: aload_0
      48: getfield      #4                  // Field stacktrace:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshotException;
      51: aload_0
      52: getfield      #9                  // Field source:Lreactor/core/publisher/Mono;
      55: invokespecial #14                 // Method reactor/core/publisher/FluxOnAssembly$OnAssemblySubscriber."<init>":(Lreactor/core/CoreSubscriber;Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshotException;Lorg/reactivestreams/Publisher;)V
      58: invokevirtual #12                 // Method reactor/core/publisher/Mono.subscribe:(Lreactor/core/CoreSubscriber;)V
      61: return

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #4                  // Field stacktrace:Lreactor/core/publisher/FluxOnAssembly$AssemblySnapshotException;
       4: invokevirtual #15                 // Method reactor/core/publisher/FluxOnAssembly$AssemblySnapshotException.stackFirst:()Ljava/lang/String;
       7: areturn
}
