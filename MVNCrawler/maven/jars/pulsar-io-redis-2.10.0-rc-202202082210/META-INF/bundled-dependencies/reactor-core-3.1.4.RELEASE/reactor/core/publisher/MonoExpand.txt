Compiled from "MonoExpand.java"
final class reactor.core.publisher.MonoExpand<T> extends reactor.core.publisher.FluxFromMonoOperator<T, T> {
  final boolean breadthFirst;

  final java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends T>> expander;

  final int capacityHint;

  reactor.core.publisher.MonoExpand(reactor.core.publisher.Mono<T>, java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends T>>, boolean, int);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method reactor/core/publisher/FluxFromMonoOperator."<init>":(Lreactor/core/publisher/Mono;)V
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field expander:Ljava/util/function/Function;
      10: aload_0
      11: iload_3
      12: putfield      #3                  // Field breadthFirst:Z
      15: aload_0
      16: iload         4
      18: putfield      #4                  // Field capacityHint:I
      21: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field breadthFirst:Z
       4: ifeq          52
       7: new           #5                  // class reactor/core/publisher/FluxExpand$ExpandBreathSubscriber
      10: dup
      11: aload_1
      12: aload_0
      13: getfield      #2                  // Field expander:Ljava/util/function/Function;
      16: aload_0
      17: getfield      #4                  // Field capacityHint:I
      20: invokespecial #6                  // Method reactor/core/publisher/FluxExpand$ExpandBreathSubscriber."<init>":(Lreactor/core/CoreSubscriber;Ljava/util/function/Function;I)V
      23: astore_2
      24: aload_2
      25: getfield      #7                  // Field reactor/core/publisher/FluxExpand$ExpandBreathSubscriber.queue:Ljava/util/Queue;
      28: aload_0
      29: getfield      #8                  // Field source:Lreactor/core/publisher/Mono;
      32: invokeinterface #9,  2            // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
      37: pop
      38: aload_1
      39: aload_2
      40: invokeinterface #10,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      45: aload_2
      46: invokevirtual #11                 // Method reactor/core/publisher/FluxExpand$ExpandBreathSubscriber.drainQueue:()V
      49: goto          84
      52: new           #12                 // class reactor/core/publisher/FluxExpand$ExpandDepthSubscription
      55: dup
      56: aload_1
      57: aload_0
      58: getfield      #2                  // Field expander:Ljava/util/function/Function;
      61: aload_0
      62: getfield      #4                  // Field capacityHint:I
      65: invokespecial #13                 // Method reactor/core/publisher/FluxExpand$ExpandDepthSubscription."<init>":(Lreactor/core/CoreSubscriber;Ljava/util/function/Function;I)V
      68: astore_2
      69: aload_2
      70: aload_0
      71: getfield      #8                  // Field source:Lreactor/core/publisher/Mono;
      74: putfield      #14                 // Field reactor/core/publisher/FluxExpand$ExpandDepthSubscription.source:Lorg/reactivestreams/Publisher;
      77: aload_1
      78: aload_2
      79: invokeinterface #10,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      84: return
}
