Compiled from "FluxErrorOnRequest.java"
final class reactor.core.publisher.FluxErrorOnRequest$ErrorSubscription implements reactor.core.publisher.InnerProducer {
  final reactor.core.CoreSubscriber<?> actual;

  final java.lang.Throwable error;

  volatile int once;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxErrorOnRequest$ErrorSubscription> ONCE;

  reactor.core.publisher.FluxErrorOnRequest$ErrorSubscription(reactor.core.CoreSubscriber<?>, java.lang.Throwable);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field error:Ljava/lang/Throwable;
      14: return

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #4                  // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          32
       7: getstatic     #5                  // Field ONCE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: aload_0
      11: iconst_0
      12: iconst_1
      13: invokevirtual #6                  // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.compareAndSet:(Ljava/lang/Object;II)Z
      16: ifeq          32
      19: aload_0
      20: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      23: aload_0
      24: getfield      #3                  // Field error:Ljava/lang/Throwable;
      27: invokeinterface #7,  2            // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      32: return

  public void cancel();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #8                  // Field once:I
       5: return

  public reactor.core.CoreSubscriber actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #9                  // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #3                  // Field error:Ljava/lang/Throwable;
      11: areturn
      12: aload_1
      13: getstatic     #10                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      16: if_acmpeq     26
      19: aload_1
      20: getstatic     #11                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      23: if_acmpne     43
      26: aload_0
      27: getfield      #8                  // Field once:I
      30: iconst_1
      31: if_icmpne     38
      34: iconst_1
      35: goto          39
      38: iconst_0
      39: invokestatic  #12                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      42: areturn
      43: aload_0
      44: aload_1
      45: invokespecial #13                 // InterfaceMethod reactor/core/publisher/InnerProducer.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      48: areturn

  static {};
    Code:
       0: ldc           #14                 // class reactor/core/publisher/FluxErrorOnRequest$ErrorSubscription
       2: ldc           #15                 // String once
       4: invokestatic  #16                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #5                  // Field ONCE:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: return
}
