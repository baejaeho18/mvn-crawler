Compiled from "ElasticScheduler.java"
final class reactor.core.scheduler.ElasticScheduler$CachedService implements reactor.core.Disposable,reactor.core.Scannable {
  final reactor.core.scheduler.ElasticScheduler parent;

  final java.util.concurrent.ScheduledExecutorService exec;

  reactor.core.scheduler.ElasticScheduler$CachedService(reactor.core.scheduler.ElasticScheduler);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field parent:Lreactor/core/scheduler/ElasticScheduler;
       9: aload_1
      10: ifnull        26
      13: aload_0
      14: ldc           #4                  // String elastic
      16: aload_1
      17: invokestatic  #5                  // Method reactor/core/scheduler/Schedulers.decorateExecutorService:(Ljava/lang/String;Ljava/util/function/Supplier;)Ljava/util/concurrent/ScheduledExecutorService;
      20: putfield      #6                  // Field exec:Ljava/util/concurrent/ScheduledExecutorService;
      23: goto          43
      26: aload_0
      27: invokestatic  #7                  // Method java/util/concurrent/Executors.newSingleThreadScheduledExecutor:()Ljava/util/concurrent/ScheduledExecutorService;
      30: putfield      #6                  // Field exec:Ljava/util/concurrent/ScheduledExecutorService;
      33: aload_0
      34: getfield      #6                  // Field exec:Ljava/util/concurrent/ScheduledExecutorService;
      37: invokeinterface #8,  1            // InterfaceMethod java/util/concurrent/ScheduledExecutorService.shutdownNow:()Ljava/util/List;
      42: pop
      43: return

  public void dispose();
    Code:
       0: aload_0
       1: getfield      #6                  // Field exec:Ljava/util/concurrent/ScheduledExecutorService;
       4: ifnull        99
       7: aload_0
       8: getstatic     #9                  // Field reactor/core/scheduler/ElasticScheduler.SHUTDOWN:Lreactor/core/scheduler/ElasticScheduler$CachedService;
      11: if_acmpeq     99
      14: aload_0
      15: getfield      #2                  // Field parent:Lreactor/core/scheduler/ElasticScheduler;
      18: getfield      #10                 // Field reactor/core/scheduler/ElasticScheduler.shutdown:Z
      21: ifne          99
      24: new           #11                 // class reactor/core/scheduler/ElasticScheduler$ScheduledExecutorServiceExpiry
      27: dup
      28: aload_0
      29: invokestatic  #12                 // Method java/lang/System.currentTimeMillis:()J
      32: aload_0
      33: getfield      #2                  // Field parent:Lreactor/core/scheduler/ElasticScheduler;
      36: getfield      #13                 // Field reactor/core/scheduler/ElasticScheduler.ttlSeconds:I
      39: i2l
      40: ldc2_w        #14                 // long 1000l
      43: lmul
      44: ladd
      45: invokespecial #16                 // Method reactor/core/scheduler/ElasticScheduler$ScheduledExecutorServiceExpiry."<init>":(Lreactor/core/scheduler/ElasticScheduler$CachedService;J)V
      48: astore_1
      49: aload_0
      50: getfield      #2                  // Field parent:Lreactor/core/scheduler/ElasticScheduler;
      53: getfield      #17                 // Field reactor/core/scheduler/ElasticScheduler.cache:Ljava/util/Queue;
      56: aload_1
      57: invokeinterface #18,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
      62: pop
      63: aload_0
      64: getfield      #2                  // Field parent:Lreactor/core/scheduler/ElasticScheduler;
      67: getfield      #10                 // Field reactor/core/scheduler/ElasticScheduler.shutdown:Z
      70: ifeq          99
      73: aload_0
      74: getfield      #2                  // Field parent:Lreactor/core/scheduler/ElasticScheduler;
      77: getfield      #17                 // Field reactor/core/scheduler/ElasticScheduler.cache:Ljava/util/Queue;
      80: aload_1
      81: invokeinterface #19,  2           // InterfaceMethod java/util/Queue.remove:(Ljava/lang/Object;)Z
      86: ifeq          99
      89: aload_0
      90: getfield      #6                  // Field exec:Ljava/util/concurrent/ScheduledExecutorService;
      93: invokeinterface #8,  1            // InterfaceMethod java/util/concurrent/ScheduledExecutorService.shutdownNow:()Ljava/util/List;
      98: pop
      99: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #20                 // Field reactor/core/Scannable$Attr.NAME:Lreactor/core/Scannable$Attr;
       4: if_acmpne     16
       7: aload_0
       8: getfield      #2                  // Field parent:Lreactor/core/scheduler/ElasticScheduler;
      11: aload_1
      12: invokevirtual #21                 // Method reactor/core/scheduler/ElasticScheduler.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      15: areturn
      16: aload_1
      17: getstatic     #22                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
      20: if_acmpne     28
      23: aload_0
      24: getfield      #2                  // Field parent:Lreactor/core/scheduler/ElasticScheduler;
      27: areturn
      28: aload_1
      29: getstatic     #23                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      32: if_acmpeq     42
      35: aload_1
      36: getstatic     #24                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      39: if_acmpne     50
      42: aload_0
      43: invokevirtual #25                 // Method isDisposed:()Z
      46: invokestatic  #26                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      49: areturn
      50: aload_1
      51: getstatic     #27                 // Field reactor/core/Scannable$Attr.CAPACITY:Lreactor/core/Scannable$Attr;
      54: if_acmpne     86
      57: aload_0
      58: getfield      #6                  // Field exec:Ljava/util/concurrent/ScheduledExecutorService;
      61: aload_1
      62: invokestatic  #28                 // Method reactor/core/scheduler/Schedulers.scanExecutor:(Ljava/util/concurrent/Executor;Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      65: checkcast     #29                 // class java/lang/Integer
      68: astore_2
      69: aload_2
      70: ifnull        81
      73: aload_2
      74: invokevirtual #30                 // Method java/lang/Integer.intValue:()I
      77: iconst_m1
      78: if_icmpne     86
      81: iconst_1
      82: invokestatic  #31                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      85: areturn
      86: aload_0
      87: getfield      #6                  // Field exec:Ljava/util/concurrent/ScheduledExecutorService;
      90: aload_1
      91: invokestatic  #28                 // Method reactor/core/scheduler/Schedulers.scanExecutor:(Ljava/util/concurrent/Executor;Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      94: areturn
}
