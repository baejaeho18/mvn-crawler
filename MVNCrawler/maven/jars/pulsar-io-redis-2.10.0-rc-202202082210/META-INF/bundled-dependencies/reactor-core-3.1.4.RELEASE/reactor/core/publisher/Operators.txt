Compiled from "Operators.java"
public abstract class reactor.core.publisher.Operators {
  static final reactor.core.CoreSubscriber<?> EMPTY_SUBSCRIBER;

  static final reactor.util.Logger log;

  public static long addCap(long, long);
    Code:
       0: lload_0
       1: lload_2
       2: ladd
       3: lstore        4
       5: lload         4
       7: lconst_0
       8: lcmp
       9: ifge          16
      12: ldc2_w        #2                  // long 9223372036854775807l
      15: lreturn
      16: lload         4
      18: lreturn

  public static <T> long addCap(java.util.concurrent.atomic.AtomicLongFieldUpdater<T>, T, long);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #4                  // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.get:(Ljava/lang/Object;)J
       5: lstore        4
       7: lload         4
       9: ldc2_w        #2                  // long 9223372036854775807l
      12: lcmp
      13: ifne          20
      16: ldc2_w        #2                  // long 9223372036854775807l
      19: lreturn
      20: lload         4
      22: lload_2
      23: invokestatic  #5                  // Method addCap:(JJ)J
      26: lstore        6
      28: aload_0
      29: aload_1
      30: lload         4
      32: lload         6
      34: invokevirtual #6                  // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.compareAndSet:(Ljava/lang/Object;JJ)Z
      37: ifeq          0
      40: lload         4
      42: lreturn

  public static <T> reactor.core.Fuseable$QueueSubscription<T> as(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: instanceof    #7                  // class reactor/core/Fuseable$QueueSubscription
       4: ifeq          12
       7: aload_0
       8: checkcast     #7                  // class reactor/core/Fuseable$QueueSubscription
      11: areturn
      12: aconst_null
      13: areturn

  public static org.reactivestreams.Subscription cancelledSubscription();
    Code:
       0: getstatic     #8                  // Field reactor/core/publisher/Operators$CancelledSubscription.INSTANCE:Lreactor/core/publisher/Operators$CancelledSubscription;
       3: areturn

  public static void complete(org.reactivestreams.Subscriber<?>);
    Code:
       0: aload_0
       1: getstatic     #9                  // Field reactor/core/publisher/Operators$EmptySubscription.INSTANCE:Lreactor/core/publisher/Operators$EmptySubscription;
       4: invokeinterface #10,  2           // InterfaceMethod org/reactivestreams/Subscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
       9: aload_0
      10: invokeinterface #11,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      15: return

  public static <T> reactor.core.CoreSubscriber<T> drainSubscriber();
    Code:
       0: getstatic     #12                 // Field reactor/core/publisher/Operators$DrainSubscriber.INSTANCE:Lreactor/core/publisher/Operators$DrainSubscriber;
       3: areturn

  public static <T> reactor.core.CoreSubscriber<T> emptySubscriber();
    Code:
       0: getstatic     #13                 // Field EMPTY_SUBSCRIBER:Lreactor/core/CoreSubscriber;
       3: areturn

  public static org.reactivestreams.Subscription emptySubscription();
    Code:
       0: getstatic     #9                  // Field reactor/core/publisher/Operators$EmptySubscription.INSTANCE:Lreactor/core/publisher/Operators$EmptySubscription;
       3: areturn

  public static void error(org.reactivestreams.Subscriber<?>, java.lang.Throwable);
    Code:
       0: aload_0
       1: getstatic     #9                  // Field reactor/core/publisher/Operators$EmptySubscription.INSTANCE:Lreactor/core/publisher/Operators$EmptySubscription;
       4: invokeinterface #10,  2           // InterfaceMethod org/reactivestreams/Subscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
       9: aload_0
      10: aload_1
      11: invokeinterface #14,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      16: return

  public static <I, O> java.util.function.Function<? super org.reactivestreams.Publisher<I>, ? extends org.reactivestreams.Publisher<O>> lift(java.util.function.BiFunction<reactor.core.Scannable, ? super reactor.core.CoreSubscriber<? super O>, ? extends reactor.core.CoreSubscriber<? super I>>);
    Code:
       0: new           #15                 // class reactor/core/publisher/Operators$LiftFunction
       3: dup
       4: aconst_null
       5: aload_0
       6: invokespecial #16                 // Method reactor/core/publisher/Operators$LiftFunction."<init>":(Ljava/util/function/Predicate;Ljava/util/function/BiFunction;)V
       9: areturn

  public static <O> java.util.function.Function<? super org.reactivestreams.Publisher<O>, ? extends org.reactivestreams.Publisher<O>> lift(java.util.function.Predicate<reactor.core.Scannable>, java.util.function.BiFunction<reactor.core.Scannable, ? super reactor.core.CoreSubscriber<? super O>, ? extends reactor.core.CoreSubscriber<? super O>>);
    Code:
       0: new           #15                 // class reactor/core/publisher/Operators$LiftFunction
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #16                 // Method reactor/core/publisher/Operators$LiftFunction."<init>":(Ljava/util/function/Predicate;Ljava/util/function/BiFunction;)V
       9: areturn

  public static long multiplyCap(long, long);
    Code:
       0: lload_0
       1: lload_2
       2: lmul
       3: lstore        4
       5: lload_0
       6: lload_2
       7: lor
       8: bipush        31
      10: lushr
      11: lconst_0
      12: lcmp
      13: ifeq          29
      16: lload         4
      18: lload_0
      19: ldiv
      20: lload_2
      21: lcmp
      22: ifeq          29
      25: ldc2_w        #2                  // long 9223372036854775807l
      28: lreturn
      29: lload         4
      31: lreturn

  public static void onErrorDropped(java.lang.Throwable, reactor.util.context.Context);
    Code:
       0: aload_1
       1: ldc           #18                 // String reactor.onErrorDropped.local
       3: aconst_null
       4: invokeinterface #19,  3           // InterfaceMethod reactor/util/context/Context.getOrDefault:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       9: checkcast     #20                 // class java/util/function/Consumer
      12: astore_2
      13: aload_2
      14: ifnonnull     21
      17: getstatic     #21                 // Field reactor/core/publisher/Hooks.onErrorDroppedHook:Ljava/util/function/Consumer;
      20: astore_2
      21: aload_2
      22: ifnonnull     30
      25: aload_0
      26: invokestatic  #22                 // Method reactor/core/Exceptions.bubble:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
      29: athrow
      30: aload_2
      31: aload_0
      32: invokeinterface #23,  2           // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
      37: return

  public static <T> void onNextDropped(T, reactor.util.context.Context);
    Code:
       0: aload_0
       1: ldc           #24                 // String onNext
       3: invokestatic  #25                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_1
       8: ldc           #26                 // String context
      10: invokestatic  #25                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      13: pop
      14: aload_1
      15: ldc           #27                 // String reactor.onNextDropped.local
      17: aconst_null
      18: invokeinterface #19,  3           // InterfaceMethod reactor/util/context/Context.getOrDefault:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      23: checkcast     #20                 // class java/util/function/Consumer
      26: astore_2
      27: aload_2
      28: ifnonnull     35
      31: getstatic     #28                 // Field reactor/core/publisher/Hooks.onNextDroppedHook:Ljava/util/function/Consumer;
      34: astore_2
      35: aload_2
      36: ifnull        49
      39: aload_2
      40: aload_0
      41: invokeinterface #23,  2           // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
      46: goto          87
      49: getstatic     #29                 // Field log:Lreactor/util/Logger;
      52: invokeinterface #30,  1           // InterfaceMethod reactor/util/Logger.isDebugEnabled:()Z
      57: ifeq          87
      60: getstatic     #29                 // Field log:Lreactor/util/Logger;
      63: new           #31                 // class java/lang/StringBuilder
      66: dup
      67: invokespecial #32                 // Method java/lang/StringBuilder."<init>":()V
      70: ldc           #33                 // String onNextDropped:
      72: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      75: aload_0
      76: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      79: invokevirtual #36                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      82: invokeinterface #37,  2           // InterfaceMethod reactor/util/Logger.debug:(Ljava/lang/String;)V
      87: return

  public static java.lang.Throwable onOperatorError(java.lang.Throwable, reactor.util.context.Context);
    Code:
       0: aconst_null
       1: aload_0
       2: aload_1
       3: invokestatic  #38                 // Method onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
       6: areturn

  public static java.lang.Throwable onOperatorError(org.reactivestreams.Subscription, java.lang.Throwable, reactor.util.context.Context);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: aload_2
       4: invokestatic  #39                 // Method onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
       7: areturn

  public static java.lang.Throwable onOperatorError(org.reactivestreams.Subscription, java.lang.Throwable, java.lang.Object, reactor.util.context.Context);
    Code:
       0: aload_1
       1: invokestatic  #40                 // Method reactor/core/Exceptions.throwIfFatal:(Ljava/lang/Throwable;)V
       4: aload_0
       5: ifnull        14
       8: aload_0
       9: invokeinterface #41,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      14: aload_1
      15: invokestatic  #42                 // Method reactor/core/Exceptions.unwrap:(Ljava/lang/Throwable;)Ljava/lang/Throwable;
      18: astore        4
      20: aload_3
      21: ldc           #43                 // String reactor.onOperatorError.local
      23: aconst_null
      24: invokeinterface #19,  3           // InterfaceMethod reactor/util/context/Context.getOrDefault:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      29: checkcast     #44                 // class java/util/function/BiFunction
      32: astore        5
      34: aload         5
      36: ifnonnull     44
      39: getstatic     #45                 // Field reactor/core/publisher/Hooks.onOperatorErrorHook:Ljava/util/function/BiFunction;
      42: astore        5
      44: aload         5
      46: ifnonnull     80
      49: aload_2
      50: ifnull        77
      53: aload_2
      54: aload         4
      56: if_acmpeq     77
      59: aload_2
      60: instanceof    #46                 // class java/lang/Throwable
      63: ifeq          77
      66: aload         4
      68: aload_2
      69: checkcast     #46                 // class java/lang/Throwable
      72: invokestatic  #47                 // Method reactor/core/Exceptions.addSuppressed:(Ljava/lang/Throwable;Ljava/lang/Throwable;)Ljava/lang/Throwable;
      75: astore        4
      77: aload         4
      79: areturn
      80: aload         5
      82: aload_1
      83: aload_2
      84: invokeinterface #48,  3           // InterfaceMethod java/util/function/BiFunction.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      89: checkcast     #46                 // class java/lang/Throwable
      92: areturn

  public static java.lang.RuntimeException onRejectedExecution(java.lang.Throwable, reactor.util.context.Context);
    Code:
       0: aload_0
       1: aconst_null
       2: aconst_null
       3: aconst_null
       4: aload_1
       5: invokestatic  #49                 // Method onRejectedExecution:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/RuntimeException;
       8: areturn

  public static java.lang.RuntimeException onRejectedExecution(java.lang.Throwable, org.reactivestreams.Subscription, java.lang.Throwable, java.lang.Object, reactor.util.context.Context);
    Code:
       0: aload         4
       2: ldc           #50                 // String reactor.onRejectedExecution.local
       4: invokeinterface #51,  2           // InterfaceMethod reactor/util/context/Context.hasKey:(Ljava/lang/Object;)Z
       9: ifeq          32
      12: aload         4
      14: ldc           #43                 // String reactor.onOperatorError.local
      16: aload         4
      18: ldc           #50                 // String reactor.onRejectedExecution.local
      20: invokeinterface #52,  2           // InterfaceMethod reactor/util/context/Context.get:(Ljava/lang/Object;)Ljava/lang/Object;
      25: invokeinterface #53,  3           // InterfaceMethod reactor/util/context/Context.put:(Ljava/lang/Object;Ljava/lang/Object;)Lreactor/util/context/Context;
      30: astore        4
      32: aload_0
      33: invokestatic  #54                 // Method reactor/core/Exceptions.failWithRejected:(Ljava/lang/Throwable;)Ljava/util/concurrent/RejectedExecutionException;
      36: astore        5
      38: aload_2
      39: ifnull        48
      42: aload         5
      44: aload_2
      45: invokevirtual #55                 // Method java/util/concurrent/RejectedExecutionException.addSuppressed:(Ljava/lang/Throwable;)V
      48: aload_3
      49: ifnull        65
      52: aload_1
      53: aload         5
      55: aload_3
      56: aload         4
      58: invokestatic  #39                 // Method onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      61: invokestatic  #56                 // Method reactor/core/Exceptions.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
      64: areturn
      65: aload_1
      66: aload         5
      68: aload         4
      70: invokestatic  #38                 // Method onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      73: invokestatic  #56                 // Method reactor/core/Exceptions.propagate:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;
      76: areturn

  public static <T> long produced(java.util.concurrent.atomic.AtomicLongFieldUpdater<T>, T, long);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #4                  // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.get:(Ljava/lang/Object;)J
       5: lstore        4
       7: lload         4
       9: lconst_0
      10: lcmp
      11: ifeq          23
      14: lload         4
      16: ldc2_w        #2                  // long 9223372036854775807l
      19: lcmp
      20: ifne          26
      23: lload         4
      25: lreturn
      26: lload         4
      28: lload_2
      29: invokestatic  #57                 // Method subOrZero:(JJ)J
      32: lstore        6
      34: aload_0
      35: aload_1
      36: lload         4
      38: lload         6
      40: invokevirtual #6                  // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.compareAndSet:(Ljava/lang/Object;JJ)Z
      43: ifeq          0
      46: lload         6
      48: lreturn

  public static <F> boolean replace(java.util.concurrent.atomic.AtomicReferenceFieldUpdater<F, org.reactivestreams.Subscription>, F, org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #58                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.get:(Ljava/lang/Object;)Ljava/lang/Object;
       5: checkcast     #59                 // class org/reactivestreams/Subscription
       8: astore_3
       9: aload_3
      10: getstatic     #8                  // Field reactor/core/publisher/Operators$CancelledSubscription.INSTANCE:Lreactor/core/publisher/Operators$CancelledSubscription;
      13: if_acmpne     24
      16: aload_2
      17: invokeinterface #41,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      22: iconst_0
      23: ireturn
      24: aload_0
      25: aload_1
      26: aload_3
      27: aload_2
      28: invokevirtual #60                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      31: ifeq          36
      34: iconst_1
      35: ireturn
      36: goto          0

  public static void reportBadRequest(long);
    Code:
       0: getstatic     #29                 // Field log:Lreactor/util/Logger;
       3: invokeinterface #30,  1           // InterfaceMethod reactor/util/Logger.isDebugEnabled:()Z
       8: ifeq          25
      11: getstatic     #29                 // Field log:Lreactor/util/Logger;
      14: ldc           #61                 // String Negative request
      16: lload_0
      17: invokestatic  #62                 // Method reactor/core/Exceptions.nullOrNegativeRequestException:(J)Ljava/lang/IllegalArgumentException;
      20: invokeinterface #63,  3           // InterfaceMethod reactor/util/Logger.debug:(Ljava/lang/String;Ljava/lang/Throwable;)V
      25: return

  public static void reportMoreProduced();
    Code:
       0: getstatic     #29                 // Field log:Lreactor/util/Logger;
       3: invokeinterface #30,  1           // InterfaceMethod reactor/util/Logger.isDebugEnabled:()Z
       8: ifeq          24
      11: getstatic     #29                 // Field log:Lreactor/util/Logger;
      14: ldc           #64                 // String More data produced than requested
      16: invokestatic  #65                 // Method reactor/core/Exceptions.failWithOverflow:()Ljava/lang/IllegalStateException;
      19: invokeinterface #63,  3           // InterfaceMethod reactor/util/Logger.debug:(Ljava/lang/String;Ljava/lang/Throwable;)V
      24: return

  public static void reportSubscriptionSet();
    Code:
       0: getstatic     #29                 // Field log:Lreactor/util/Logger;
       3: invokeinterface #30,  1           // InterfaceMethod reactor/util/Logger.isDebugEnabled:()Z
       8: ifeq          24
      11: getstatic     #29                 // Field log:Lreactor/util/Logger;
      14: ldc           #66                 // String Duplicate Subscription has been detected
      16: invokestatic  #67                 // Method reactor/core/Exceptions.duplicateOnSubscribeException:()Ljava/lang/IllegalStateException;
      19: invokeinterface #63,  3           // InterfaceMethod reactor/util/Logger.debug:(Ljava/lang/String;Ljava/lang/Throwable;)V
      24: return

  public static <T> org.reactivestreams.Subscription scalarSubscription(reactor.core.CoreSubscriber<? super T>, T);
    Code:
       0: new           #68                 // class reactor/core/publisher/Operators$ScalarSubscription
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #69                 // Method reactor/core/publisher/Operators$ScalarSubscription."<init>":(Lreactor/core/CoreSubscriber;Ljava/lang/Object;)V
       9: areturn

  public static <T> reactor.core.CoreSubscriber<T> serialize(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: new           #70                 // class reactor/core/publisher/SerializedSubscriber
       3: dup
       4: aload_0
       5: invokespecial #71                 // Method reactor/core/publisher/SerializedSubscriber."<init>":(Lreactor/core/CoreSubscriber;)V
       8: areturn

  public static <F> boolean set(java.util.concurrent.atomic.AtomicReferenceFieldUpdater<F, org.reactivestreams.Subscription>, F, org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #58                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.get:(Ljava/lang/Object;)Ljava/lang/Object;
       5: checkcast     #59                 // class org/reactivestreams/Subscription
       8: astore_3
       9: aload_3
      10: getstatic     #8                  // Field reactor/core/publisher/Operators$CancelledSubscription.INSTANCE:Lreactor/core/publisher/Operators$CancelledSubscription;
      13: if_acmpne     24
      16: aload_2
      17: invokeinterface #41,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      22: iconst_0
      23: ireturn
      24: aload_0
      25: aload_1
      26: aload_3
      27: aload_2
      28: invokevirtual #60                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      31: ifeq          46
      34: aload_3
      35: ifnull        44
      38: aload_3
      39: invokeinterface #41,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      44: iconst_1
      45: ireturn
      46: goto          0

  public static <F> boolean setOnce(java.util.concurrent.atomic.AtomicReferenceFieldUpdater<F, org.reactivestreams.Subscription>, F, org.reactivestreams.Subscription);
    Code:
       0: aload_2
       1: ldc           #72                 // String subscription
       3: invokestatic  #25                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: aload_1
       9: invokevirtual #58                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.get:(Ljava/lang/Object;)Ljava/lang/Object;
      12: checkcast     #59                 // class org/reactivestreams/Subscription
      15: astore_3
      16: aload_3
      17: getstatic     #8                  // Field reactor/core/publisher/Operators$CancelledSubscription.INSTANCE:Lreactor/core/publisher/Operators$CancelledSubscription;
      20: if_acmpne     31
      23: aload_2
      24: invokeinterface #41,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      29: iconst_0
      30: ireturn
      31: aload_3
      32: ifnull        46
      35: aload_2
      36: invokeinterface #41,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      41: invokestatic  #73                 // Method reportSubscriptionSet:()V
      44: iconst_0
      45: ireturn
      46: aload_0
      47: aload_1
      48: aconst_null
      49: aload_2
      50: invokevirtual #60                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
      53: ifeq          58
      56: iconst_1
      57: ireturn
      58: aload_0
      59: aload_1
      60: invokevirtual #58                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.get:(Ljava/lang/Object;)Ljava/lang/Object;
      63: checkcast     #59                 // class org/reactivestreams/Subscription
      66: astore_3
      67: aload_3
      68: getstatic     #8                  // Field reactor/core/publisher/Operators$CancelledSubscription.INSTANCE:Lreactor/core/publisher/Operators$CancelledSubscription;
      71: if_acmpne     82
      74: aload_2
      75: invokeinterface #41,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      80: iconst_0
      81: ireturn
      82: aload_2
      83: invokeinterface #41,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      88: invokestatic  #73                 // Method reportSubscriptionSet:()V
      91: iconst_0
      92: ireturn

  public static long subOrZero(long, long);
    Code:
       0: lload_0
       1: lload_2
       2: lsub
       3: lstore        4
       5: lload         4
       7: lconst_0
       8: lcmp
       9: ifge          14
      12: lconst_0
      13: lreturn
      14: lload         4
      16: lreturn

  public static <F> boolean terminate(java.util.concurrent.atomic.AtomicReferenceFieldUpdater<F, org.reactivestreams.Subscription>, F);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #58                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.get:(Ljava/lang/Object;)Ljava/lang/Object;
       5: checkcast     #59                 // class org/reactivestreams/Subscription
       8: astore_2
       9: aload_2
      10: getstatic     #8                  // Field reactor/core/publisher/Operators$CancelledSubscription.INSTANCE:Lreactor/core/publisher/Operators$CancelledSubscription;
      13: if_acmpeq     47
      16: aload_0
      17: aload_1
      18: getstatic     #8                  // Field reactor/core/publisher/Operators$CancelledSubscription.INSTANCE:Lreactor/core/publisher/Operators$CancelledSubscription;
      21: invokevirtual #74                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      24: checkcast     #59                 // class org/reactivestreams/Subscription
      27: astore_2
      28: aload_2
      29: ifnull        47
      32: aload_2
      33: getstatic     #8                  // Field reactor/core/publisher/Operators$CancelledSubscription.INSTANCE:Lreactor/core/publisher/Operators$CancelledSubscription;
      36: if_acmpeq     47
      39: aload_2
      40: invokeinterface #41,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      45: iconst_1
      46: ireturn
      47: iconst_0
      48: ireturn

  public static boolean validate(org.reactivestreams.Subscription, org.reactivestreams.Subscription);
    Code:
       0: aload_1
       1: ldc           #75                 // String Subscription cannot be null
       3: invokestatic  #25                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: ifnull        19
      11: aload_1
      12: invokeinterface #41,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      17: iconst_0
      18: ireturn
      19: iconst_1
      20: ireturn

  public static boolean validate(long);
    Code:
       0: lload_0
       1: lconst_0
       2: lcmp
       3: ifgt          12
       6: lload_0
       7: invokestatic  #76                 // Method reportBadRequest:(J)V
      10: iconst_0
      11: ireturn
      12: iconst_1
      13: ireturn

  public static <T> reactor.core.CoreSubscriber<? super T> toCoreSubscriber(org.reactivestreams.Subscriber<? super T>);
    Code:
       0: aload_0
       1: ldc           #77                 // String actual
       3: invokestatic  #25                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: instanceof    #78                 // class reactor/core/CoreSubscriber
      11: ifeq          22
      14: aload_0
      15: checkcast     #78                 // class reactor/core/CoreSubscriber
      18: astore_1
      19: goto          31
      22: new           #79                 // class reactor/core/publisher/StrictSubscriber
      25: dup
      26: aload_0
      27: invokespecial #80                 // Method reactor/core/publisher/StrictSubscriber."<init>":(Lorg/reactivestreams/Subscriber;)V
      30: astore_1
      31: aload_1
      32: areturn

  static <T> long addCapCancellable(java.util.concurrent.atomic.AtomicLongFieldUpdater<T>, T, long);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #4                  // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.get:(Ljava/lang/Object;)J
       5: lstore        4
       7: lload         4
       9: ldc2_w        #81                 // long -9223372036854775808l
      12: lcmp
      13: ifeq          25
      16: lload         4
      18: ldc2_w        #2                  // long 9223372036854775807l
      21: lcmp
      22: ifne          28
      25: lload         4
      27: lreturn
      28: lload         4
      30: lload_2
      31: invokestatic  #5                  // Method addCap:(JJ)J
      34: lstore        6
      36: aload_0
      37: aload_1
      38: lload         4
      40: lload         6
      42: invokevirtual #6                  // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.compareAndSet:(Ljava/lang/Object;JJ)Z
      45: ifeq          51
      48: lload         4
      50: lreturn
      51: goto          0

  static void onErrorDroppedMulticast(java.lang.Throwable);
    Code:
       0: aload_0
       1: invokestatic  #83                 // InterfaceMethod reactor/util/context/Context.empty:()Lreactor/util/context/Context;
       4: invokestatic  #84                 // Method onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
       7: return

  static <T> void onNextDroppedMulticast(T);
    Code:
       0: aload_0
       1: invokestatic  #83                 // InterfaceMethod reactor/util/context/Context.empty:()Lreactor/util/context/Context;
       4: invokestatic  #85                 // Method onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
       7: return

  static <T> long producedCancellable(java.util.concurrent.atomic.AtomicLongFieldUpdater<T>, T, long);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #4                  // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.get:(Ljava/lang/Object;)J
       5: lstore        4
       7: lload         4
       9: ldc2_w        #81                 // long -9223372036854775808l
      12: lcmp
      13: ifne          20
      16: ldc2_w        #81                 // long -9223372036854775808l
      19: lreturn
      20: lload         4
      22: ldc2_w        #2                  // long 9223372036854775807l
      25: lcmp
      26: ifne          33
      29: ldc2_w        #2                  // long 9223372036854775807l
      32: lreturn
      33: lload         4
      35: lload_2
      36: lsub
      37: lstore        6
      39: lload         6
      41: lconst_0
      42: lcmp
      43: ifge          54
      46: lload         6
      48: invokestatic  #76                 // Method reportBadRequest:(J)V
      51: lconst_0
      52: lstore        6
      54: aload_0
      55: aload_1
      56: lload         4
      58: lload         6
      60: invokevirtual #6                  // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.compareAndSet:(Ljava/lang/Object;JJ)Z
      63: ifeq          69
      66: lload         6
      68: lreturn
      69: goto          0

  static long unboundedOrPrefetch(int);
    Code:
       0: iload_0
       1: ldc           #87                 // int 2147483647
       3: if_icmpne     12
       6: ldc2_w        #2                  // long 9223372036854775807l
       9: goto          14
      12: iload_0
      13: i2l
      14: lreturn

  static int unboundedOrLimit(int);
    Code:
       0: iload_0
       1: ldc           #87                 // int 2147483647
       3: if_icmpne     11
       6: ldc           #87                 // int 2147483647
       8: goto          16
      11: iload_0
      12: iload_0
      13: iconst_2
      14: ishr
      15: isub
      16: ireturn

  static int unboundedOrLimit(int, int);
    Code:
       0: iload_1
       1: iload_0
       2: if_icmplt     10
       5: iload_0
       6: invokestatic  #88                 // Method unboundedOrLimit:(I)I
       9: ireturn
      10: iload_0
      11: ldc           #87                 // int 2147483647
      13: if_icmpne     21
      16: ldc           #87                 // int 2147483647
      18: goto          22
      21: iload_1
      22: ireturn

  reactor.core.publisher.Operators();
    Code:
       0: aload_0
       1: invokespecial #89                 // Method java/lang/Object."<init>":()V
       4: return

  static {};
    Code:
       0: new           #90                 // class reactor/core/publisher/Operators$1
       3: dup
       4: invokespecial #91                 // Method reactor/core/publisher/Operators$1."<init>":()V
       7: putstatic     #13                 // Field EMPTY_SUBSCRIBER:Lreactor/core/CoreSubscriber;
      10: ldc           #92                 // class reactor/core/publisher/Operators
      12: invokestatic  #93                 // Method reactor/util/Loggers.getLogger:(Ljava/lang/Class;)Lreactor/util/Logger;
      15: putstatic     #29                 // Field log:Lreactor/util/Logger;
      18: return
}
