Compiled from "FluxOnBackpressureBuffer.java"
final class reactor.core.publisher.FluxOnBackpressureBuffer$BackpressureBufferSubscriber<T> implements reactor.core.Fuseable$QueueSubscription<T>, reactor.core.publisher.InnerOperator<T, T> {
  final reactor.core.CoreSubscriber<? super T> actual;

  final java.util.Queue<T> queue;

  final java.util.function.Consumer<? super T> onOverflow;

  final boolean delayError;

  org.reactivestreams.Subscription s;

  volatile boolean cancelled;

  volatile boolean enabledFusion;

  volatile boolean done;

  java.lang.Throwable error;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxOnBackpressureBuffer$BackpressureBufferSubscriber> WIP;

  volatile long requested;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.FluxOnBackpressureBuffer$BackpressureBufferSubscriber> REQUESTED;

  reactor.core.publisher.FluxOnBackpressureBuffer$BackpressureBufferSubscriber(reactor.core.CoreSubscriber<? super T>, int, boolean, boolean, java.util.function.Consumer<? super T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: iload         4
      12: putfield      #3                  // Field delayError:Z
      15: aload_0
      16: aload         5
      18: putfield      #4                  // Field onOverflow:Ljava/util/function/Consumer;
      21: iload_3
      22: ifeq          42
      25: iload_2
      26: invokestatic  #5                  // Method reactor/util/concurrent/Queues.unbounded:(I)Ljava/util/function/Supplier;
      29: invokeinterface #6,  1            // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      34: checkcast     #7                  // class java/util/Queue
      37: astore        6
      39: goto          56
      42: iload_2
      43: invokestatic  #8                  // Method reactor/util/concurrent/Queues.get:(I)Ljava/util/function/Supplier;
      46: invokeinterface #6,  1            // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      51: checkcast     #7                  // class java/util/Queue
      54: astore        6
      56: aload_0
      57: aload         6
      59: putfield      #9                  // Field queue:Ljava/util/Queue;
      62: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #10                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #11                 // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #12                 // Field reactor/core/Scannable$Attr.REQUESTED_FROM_DOWNSTREAM:Lreactor/core/Scannable$Attr;
      16: if_acmpne     27
      19: aload_0
      20: getfield      #13                 // Field requested:J
      23: invokestatic  #14                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      26: areturn
      27: aload_1
      28: getstatic     #15                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      31: if_acmpne     62
      34: aload_0
      35: getfield      #16                 // Field done:Z
      38: ifeq          57
      41: aload_0
      42: getfield      #9                  // Field queue:Ljava/util/Queue;
      45: invokeinterface #17,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
      50: ifeq          57
      53: iconst_1
      54: goto          58
      57: iconst_0
      58: invokestatic  #18                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      61: areturn
      62: aload_1
      63: getstatic     #19                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      66: if_acmpne     77
      69: aload_0
      70: getfield      #20                 // Field cancelled:Z
      73: invokestatic  #18                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      76: areturn
      77: aload_1
      78: getstatic     #21                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      81: if_acmpne     97
      84: aload_0
      85: getfield      #9                  // Field queue:Ljava/util/Queue;
      88: invokeinterface #22,  1           // InterfaceMethod java/util/Queue.size:()I
      93: invokestatic  #23                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      96: areturn
      97: aload_1
      98: getstatic     #24                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
     101: if_acmpne     109
     104: aload_0
     105: getfield      #25                 // Field error:Ljava/lang/Throwable;
     108: areturn
     109: aload_1
     110: getstatic     #26                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
     113: if_acmpne     122
     116: ldc           #28                 // int 2147483647
     118: invokestatic  #23                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     121: areturn
     122: aload_1
     123: getstatic     #29                 // Field reactor/core/Scannable$Attr.DELAY_ERROR:Lreactor/core/Scannable$Attr;
     126: if_acmpne     137
     129: aload_0
     130: getfield      #3                  // Field delayError:Z
     133: invokestatic  #18                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     136: areturn
     137: aload_0
     138: aload_1
     139: invokespecial #30                 // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
     142: areturn

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #11                 // Field s:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #31                 // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          35
      11: aload_0
      12: aload_1
      13: putfield      #11                 // Field s:Lorg/reactivestreams/Subscription;
      16: aload_0
      17: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      20: aload_0
      21: invokeinterface #32,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      26: aload_1
      27: ldc2_w        #34                 // long 9223372036854775807l
      30: invokeinterface #36,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      35: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #16                 // Field done:Z
       4: ifeq          21
       7: aload_1
       8: aload_0
       9: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      12: invokeinterface #37,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #38                 // Method reactor/core/publisher/Operators.onNextDropped:(Ljava/lang/Object;Lreactor/util/context/Context;)V
      20: return
      21: aload_0
      22: getfield      #9                  // Field queue:Ljava/util/Queue;
      25: aload_1
      26: invokeinterface #39,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
      31: ifne          92
      34: aload_0
      35: getfield      #11                 // Field s:Lorg/reactivestreams/Subscription;
      38: invokestatic  #40                 // Method reactor/core/Exceptions.failWithOverflow:()Ljava/lang/IllegalStateException;
      41: aload_1
      42: aload_0
      43: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      46: invokeinterface #37,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      51: invokestatic  #41                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      54: astore_2
      55: aload_0
      56: getfield      #4                  // Field onOverflow:Ljava/util/function/Consumer;
      59: ifnull        86
      62: aload_0
      63: getfield      #4                  // Field onOverflow:Ljava/util/function/Consumer;
      66: aload_1
      67: invokeinterface #42,  2           // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
      72: goto          86
      75: astore_3
      76: aload_3
      77: invokestatic  #44                 // Method reactor/core/Exceptions.throwIfFatal:(Ljava/lang/Throwable;)V
      80: aload_2
      81: aload_3
      82: invokevirtual #45                 // Method java/lang/Throwable.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;
      85: pop
      86: aload_0
      87: aload_2
      88: invokevirtual #46                 // Method onError:(Ljava/lang/Throwable;)V
      91: return
      92: aload_0
      93: invokevirtual #47                 // Method drain:()V
      96: return
    Exception table:
       from    to  target type
          62    72    75   Class java/lang/Throwable

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #16                 // Field done:Z
       4: ifeq          21
       7: aload_1
       8: aload_0
       9: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      12: invokeinterface #37,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      17: invokestatic  #48                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      20: return
      21: aload_0
      22: aload_1
      23: putfield      #25                 // Field error:Ljava/lang/Throwable;
      26: aload_0
      27: iconst_1
      28: putfield      #16                 // Field done:Z
      31: aload_0
      32: invokevirtual #47                 // Method drain:()V
      35: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #16                 // Field done:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #16                 // Field done:Z
      13: aload_0
      14: invokevirtual #47                 // Method drain:()V
      17: return

  void drain();
    Code:
       0: getstatic     #49                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #50                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifeq          11
      10: return
      11: iconst_1
      12: istore_1
      13: aload_0
      14: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      17: astore_2
      18: aload_2
      19: ifnull        43
      22: aload_0
      23: getfield      #51                 // Field enabledFusion:Z
      26: ifeq          37
      29: aload_0
      30: aload_2
      31: invokevirtual #52                 // Method drainFused:(Lorg/reactivestreams/Subscriber;)V
      34: goto          42
      37: aload_0
      38: aload_2
      39: invokevirtual #53                 // Method drainRegular:(Lorg/reactivestreams/Subscriber;)V
      42: return
      43: getstatic     #49                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      46: aload_0
      47: iload_1
      48: ineg
      49: invokevirtual #54                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
      52: istore_1
      53: iload_1
      54: ifne          60
      57: goto          63
      60: goto          13
      63: return

  void drainRegular(org.reactivestreams.Subscriber<? super T>);
    Code:
       0: iconst_1
       1: istore_2
       2: aload_0
       3: getfield      #9                  // Field queue:Ljava/util/Queue;
       6: astore_3
       7: aload_0
       8: getfield      #13                 // Field requested:J
      11: lstore        4
      13: lconst_0
      14: lstore        6
      16: lload         4
      18: lload         6
      20: lcmp
      21: ifeq          88
      24: aload_0
      25: getfield      #16                 // Field done:Z
      28: istore        8
      30: aload_3
      31: invokeinterface #55,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
      36: astore        9
      38: aload         9
      40: ifnonnull     47
      43: iconst_1
      44: goto          48
      47: iconst_0
      48: istore        10
      50: aload_0
      51: iload         8
      53: iload         10
      55: aload_1
      56: invokevirtual #56                 // Method checkTerminated:(ZZLorg/reactivestreams/Subscriber;)Z
      59: ifeq          63
      62: return
      63: iload         10
      65: ifeq          71
      68: goto          88
      71: aload_1
      72: aload         9
      74: invokeinterface #57,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
      79: lload         6
      81: lconst_1
      82: ladd
      83: lstore        6
      85: goto          16
      88: lload         4
      90: lload         6
      92: lcmp
      93: ifne          115
      96: aload_0
      97: aload_0
      98: getfield      #16                 // Field done:Z
     101: aload_3
     102: invokeinterface #17,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
     107: aload_1
     108: invokevirtual #56                 // Method checkTerminated:(ZZLorg/reactivestreams/Subscriber;)Z
     111: ifeq          115
     114: return
     115: lload         6
     117: lconst_0
     118: lcmp
     119: ifeq          142
     122: lload         4
     124: ldc2_w        #34                 // long 9223372036854775807l
     127: lcmp
     128: ifeq          142
     131: getstatic     #58                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
     134: aload_0
     135: lload         6
     137: lneg
     138: invokevirtual #59                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.addAndGet:(Ljava/lang/Object;J)J
     141: pop2
     142: getstatic     #49                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     145: aload_0
     146: iload_2
     147: ineg
     148: invokevirtual #54                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
     151: istore_2
     152: iload_2
     153: ifne          159
     156: goto          162
     159: goto          7
     162: return

  void drainFused(org.reactivestreams.Subscriber<? super T>);
    Code:
       0: iconst_1
       1: istore_2
       2: aload_0
       3: getfield      #9                  // Field queue:Ljava/util/Queue;
       6: astore_3
       7: aload_0
       8: getfield      #20                 // Field cancelled:Z
      11: ifeq          30
      14: aload_0
      15: getfield      #11                 // Field s:Lorg/reactivestreams/Subscription;
      18: invokeinterface #60,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      23: aload_3
      24: invokeinterface #61,  1           // InterfaceMethod java/util/Queue.clear:()V
      29: return
      30: aload_0
      31: getfield      #16                 // Field done:Z
      34: istore        4
      36: aload_1
      37: aconst_null
      38: invokeinterface #57,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
      43: iload         4
      45: ifeq          77
      48: aload_0
      49: getfield      #25                 // Field error:Ljava/lang/Throwable;
      52: astore        5
      54: aload         5
      56: ifnull        70
      59: aload_1
      60: aload         5
      62: invokeinterface #62,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      67: goto          76
      70: aload_1
      71: invokeinterface #63,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      76: return
      77: getstatic     #49                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      80: aload_0
      81: iload_2
      82: ineg
      83: invokevirtual #54                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
      86: istore_2
      87: iload_2
      88: ifne          94
      91: goto          97
      94: goto          7
      97: return

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #64                 // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          20
       7: getstatic     #58                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      10: aload_0
      11: lload_1
      12: invokestatic  #65                 // Method reactor/core/publisher/Operators.addCap:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
      15: pop2
      16: aload_0
      17: invokevirtual #47                 // Method drain:()V
      20: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #20                 // Field cancelled:Z
       4: ifne          47
       7: aload_0
       8: iconst_1
       9: putfield      #20                 // Field cancelled:Z
      12: aload_0
      13: getfield      #11                 // Field s:Lorg/reactivestreams/Subscription;
      16: invokeinterface #60,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      21: aload_0
      22: getfield      #51                 // Field enabledFusion:Z
      25: ifne          47
      28: getstatic     #49                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      31: aload_0
      32: invokevirtual #50                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
      35: ifne          47
      38: aload_0
      39: getfield      #9                  // Field queue:Ljava/util/Queue;
      42: invokeinterface #61,  1           // InterfaceMethod java/util/Queue.clear:()V
      47: return

  public T poll();
    Code:
       0: aload_0
       1: getfield      #9                  // Field queue:Ljava/util/Queue;
       4: invokeinterface #55,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
       9: areturn

  public int size();
    Code:
       0: aload_0
       1: getfield      #9                  // Field queue:Ljava/util/Queue;
       4: invokeinterface #22,  1           // InterfaceMethod java/util/Queue.size:()I
       9: ireturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #9                  // Field queue:Ljava/util/Queue;
       4: invokeinterface #17,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
       9: ireturn

  public void clear();
    Code:
       0: aload_0
       1: getfield      #9                  // Field queue:Ljava/util/Queue;
       4: invokeinterface #61,  1           // InterfaceMethod java/util/Queue.clear:()V
       9: return

  public int requestFusion(int);
    Code:
       0: iload_1
       1: iconst_2
       2: iand
       3: ifeq          13
       6: aload_0
       7: iconst_1
       8: putfield      #51                 // Field enabledFusion:Z
      11: iconst_2
      12: ireturn
      13: iconst_0
      14: ireturn

  public reactor.core.CoreSubscriber<? super T> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  boolean checkTerminated(boolean, boolean, org.reactivestreams.Subscriber<? super T>);
    Code:
       0: aload_0
       1: getfield      #20                 // Field cancelled:Z
       4: ifeq          27
       7: aload_0
       8: getfield      #11                 // Field s:Lorg/reactivestreams/Subscription;
      11: invokeinterface #60,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      16: aload_0
      17: getfield      #9                  // Field queue:Ljava/util/Queue;
      20: invokeinterface #61,  1           // InterfaceMethod java/util/Queue.clear:()V
      25: iconst_1
      26: ireturn
      27: iload_1
      28: ifeq          114
      31: aload_0
      32: getfield      #3                  // Field delayError:Z
      35: ifeq          72
      38: iload_2
      39: ifeq          114
      42: aload_0
      43: getfield      #25                 // Field error:Ljava/lang/Throwable;
      46: astore        4
      48: aload         4
      50: ifnull        64
      53: aload_3
      54: aload         4
      56: invokeinterface #62,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      61: goto          70
      64: aload_3
      65: invokeinterface #63,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      70: iconst_1
      71: ireturn
      72: aload_0
      73: getfield      #25                 // Field error:Ljava/lang/Throwable;
      76: astore        4
      78: aload         4
      80: ifnull        102
      83: aload_0
      84: getfield      #9                  // Field queue:Ljava/util/Queue;
      87: invokeinterface #61,  1           // InterfaceMethod java/util/Queue.clear:()V
      92: aload_3
      93: aload         4
      95: invokeinterface #62,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
     100: iconst_1
     101: ireturn
     102: iload_2
     103: ifeq          114
     106: aload_3
     107: invokeinterface #63,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
     112: iconst_1
     113: ireturn
     114: iconst_0
     115: ireturn

  static {};
    Code:
       0: ldc           #67                 // class reactor/core/publisher/FluxOnBackpressureBuffer$BackpressureBufferSubscriber
       2: ldc           #68                 // String wip
       4: invokestatic  #69                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #49                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: ldc           #67                 // class reactor/core/publisher/FluxOnBackpressureBuffer$BackpressureBufferSubscriber
      12: ldc           #70                 // String requested
      14: invokestatic  #71                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      17: putstatic     #58                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      20: return
}
