Compiled from "FluxOnBackpressureBufferTimeout.java"
final class reactor.core.publisher.FluxOnBackpressureBufferTimeout$BackpressureBufferTimeoutSubscriber<T> extends java.util.ArrayDeque<java.lang.Object> implements reactor.core.publisher.InnerOperator<T, T>, java.lang.Runnable {
  final reactor.core.CoreSubscriber<? super T> actual;

  final java.time.Duration ttl;

  final reactor.core.scheduler.Scheduler ttlScheduler;

  final reactor.core.scheduler.Scheduler$Worker worker;

  final int bufferSizeDouble;

  final java.util.function.Consumer<? super T> onBufferEviction;

  org.reactivestreams.Subscription s;

  volatile boolean cancelled;

  volatile boolean done;

  java.lang.Throwable error;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxOnBackpressureBufferTimeout$BackpressureBufferTimeoutSubscriber> WIP;

  volatile long requested;

  static final java.util.concurrent.atomic.AtomicLongFieldUpdater<reactor.core.publisher.FluxOnBackpressureBufferTimeout$BackpressureBufferTimeoutSubscriber> REQUESTED;

  reactor.core.publisher.FluxOnBackpressureBufferTimeout$BackpressureBufferTimeoutSubscriber(reactor.core.CoreSubscriber<? super T>, java.time.Duration, reactor.core.scheduler.Scheduler, int, java.util.function.Consumer<? super T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/util/ArrayDeque."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: aload         5
      12: ldc           #3                  // String buffer eviction callback must not be null
      14: invokestatic  #4                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      17: checkcast     #5                  // class java/util/function/Consumer
      20: putfield      #6                  // Field onBufferEviction:Ljava/util/function/Consumer;
      23: aload_0
      24: iload         4
      26: iconst_1
      27: ishl
      28: putfield      #7                  // Field bufferSizeDouble:I
      31: aload_0
      32: aload_2
      33: putfield      #8                  // Field ttl:Ljava/time/Duration;
      36: aload_0
      37: aload_3
      38: ldc           #9                  // String ttl Scheduler must not be null
      40: invokestatic  #4                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      43: checkcast     #10                 // class reactor/core/scheduler/Scheduler
      46: putfield      #11                 // Field ttlScheduler:Lreactor/core/scheduler/Scheduler;
      49: aload_0
      50: aload_3
      51: invokeinterface #12,  1           // InterfaceMethod reactor/core/scheduler/Scheduler.createWorker:()Lreactor/core/scheduler/Scheduler$Worker;
      56: putfield      #13                 // Field worker:Lreactor/core/scheduler/Scheduler$Worker;
      59: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #14                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #15                 // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #16                 // Field reactor/core/Scannable$Attr.REQUESTED_FROM_DOWNSTREAM:Lreactor/core/Scannable$Attr;
      16: if_acmpne     27
      19: aload_0
      20: getfield      #17                 // Field requested:J
      23: invokestatic  #18                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      26: areturn
      27: aload_1
      28: getstatic     #19                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      31: if_acmpne     57
      34: aload_0
      35: getfield      #20                 // Field done:Z
      38: ifeq          52
      41: aload_0
      42: invokevirtual #21                 // Method isEmpty:()Z
      45: ifeq          52
      48: iconst_1
      49: goto          53
      52: iconst_0
      53: invokestatic  #22                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      56: areturn
      57: aload_1
      58: getstatic     #23                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      61: if_acmpne     72
      64: aload_0
      65: getfield      #24                 // Field cancelled:Z
      68: invokestatic  #22                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      71: areturn
      72: aload_1
      73: getstatic     #25                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      76: if_acmpne     87
      79: aload_0
      80: invokevirtual #26                 // Method size:()I
      83: invokestatic  #27                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      86: areturn
      87: aload_1
      88: getstatic     #28                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
      91: if_acmpne     99
      94: aload_0
      95: getfield      #29                 // Field error:Ljava/lang/Throwable;
      98: areturn
      99: aload_1
     100: getstatic     #30                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
     103: if_acmpne     112
     106: ldc           #32                 // int 2147483647
     108: invokestatic  #27                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     111: areturn
     112: aload_1
     113: getstatic     #33                 // Field reactor/core/Scannable$Attr.DELAY_ERROR:Lreactor/core/Scannable$Attr;
     116: if_acmpne     124
     119: iconst_0
     120: invokestatic  #22                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     123: areturn
     124: aload_1
     125: getstatic     #34                 // Field reactor/core/Scannable$Attr.RUN_ON:Lreactor/core/Scannable$Attr;
     128: if_acmpne     136
     131: aload_0
     132: getfield      #11                 // Field ttlScheduler:Lreactor/core/scheduler/Scheduler;
     135: areturn
     136: aload_0
     137: aload_1
     138: invokespecial #35                 // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
     141: areturn

  public reactor.core.CoreSubscriber<? super T> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public void request(long);
    Code:
       0: lload_1
       1: invokestatic  #36                 // Method reactor/core/publisher/Operators.validate:(J)Z
       4: ifeq          20
       7: getstatic     #37                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      10: aload_0
      11: lload_1
      12: invokestatic  #38                 // Method reactor/core/publisher/Operators.addCap:(Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;Ljava/lang/Object;J)J
      15: pop2
      16: aload_0
      17: invokevirtual #39                 // Method drain:()V
      20: return

  public void cancel();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #24                 // Field cancelled:Z
       5: aload_0
       6: getfield      #15                 // Field s:Lorg/reactivestreams/Subscription;
       9: invokeinterface #40,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      14: aload_0
      15: getfield      #13                 // Field worker:Lreactor/core/scheduler/Scheduler$Worker;
      18: invokeinterface #41,  1           // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.dispose:()V
      23: getstatic     #42                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      26: aload_0
      27: invokevirtual #43                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
      30: ifne          37
      33: aload_0
      34: invokevirtual #44                 // Method clearQueue:()V
      37: return

  void clearQueue();
    Code:
       0: aload_0
       1: dup
       2: astore_2
       3: monitorenter
       4: aload_0
       5: invokevirtual #21                 // Method isEmpty:()Z
       8: ifeq          16
      11: aload_2
      12: monitorexit
      13: goto          44
      16: aload_0
      17: invokevirtual #45                 // Method poll:()Ljava/lang/Object;
      20: pop
      21: aload_0
      22: invokevirtual #45                 // Method poll:()Ljava/lang/Object;
      25: astore_1
      26: aload_2
      27: monitorexit
      28: goto          36
      31: astore_3
      32: aload_2
      33: monitorexit
      34: aload_3
      35: athrow
      36: aload_0
      37: aload_1
      38: invokevirtual #46                 // Method evict:(Ljava/lang/Object;)V
      41: goto          0
      44: return
    Exception table:
       from    to  target type
           4    13    31   any
          16    28    31   any
          31    34    31   any

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #15                 // Field s:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #47                 // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          35
      11: aload_0
      12: aload_1
      13: putfield      #15                 // Field s:Lorg/reactivestreams/Subscription;
      16: aload_0
      17: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      20: aload_0
      21: invokeinterface #48,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      26: aload_1
      27: ldc2_w        #50                 // long 9223372036854775807l
      30: invokeinterface #52,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      35: return

  public void onNext(T);
    Code:
       0: aconst_null
       1: astore_2
       2: aload_0
       3: dup
       4: astore_3
       5: monitorenter
       6: aload_0
       7: invokevirtual #26                 // Method size:()I
      10: aload_0
      11: getfield      #7                  // Field bufferSizeDouble:I
      14: if_icmpne     27
      17: aload_0
      18: invokevirtual #45                 // Method poll:()Ljava/lang/Object;
      21: pop
      22: aload_0
      23: invokevirtual #45                 // Method poll:()Ljava/lang/Object;
      26: astore_2
      27: aload_0
      28: aload_0
      29: getfield      #11                 // Field ttlScheduler:Lreactor/core/scheduler/Scheduler;
      32: getstatic     #53                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      35: invokeinterface #54,  2           // InterfaceMethod reactor/core/scheduler/Scheduler.now:(Ljava/util/concurrent/TimeUnit;)J
      40: invokestatic  #18                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      43: invokevirtual #55                 // Method offer:(Ljava/lang/Object;)Z
      46: pop
      47: aload_0
      48: aload_1
      49: invokevirtual #55                 // Method offer:(Ljava/lang/Object;)Z
      52: pop
      53: aload_3
      54: monitorexit
      55: goto          65
      58: astore        4
      60: aload_3
      61: monitorexit
      62: aload         4
      64: athrow
      65: aload_0
      66: aload_2
      67: invokevirtual #46                 // Method evict:(Ljava/lang/Object;)V
      70: aload_0
      71: getfield      #13                 // Field worker:Lreactor/core/scheduler/Scheduler$Worker;
      74: aload_0
      75: aload_0
      76: getfield      #8                  // Field ttl:Ljava/time/Duration;
      79: invokevirtual #56                 // Method java/time/Duration.toMillis:()J
      82: getstatic     #53                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      85: invokeinterface #57,  5           // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lreactor/core/Disposable;
      90: pop
      91: goto          120
      94: astore_3
      95: aload_0
      96: iconst_1
      97: putfield      #20                 // Field done:Z
     100: aload_0
     101: aload_3
     102: aload_0
     103: aconst_null
     104: aload_1
     105: aload_0
     106: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     109: invokeinterface #59,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
     114: invokestatic  #60                 // Method reactor/core/publisher/Operators.onRejectedExecution:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/RuntimeException;
     117: putfield      #29                 // Field error:Ljava/lang/Throwable;
     120: aload_0
     121: invokevirtual #39                 // Method drain:()V
     124: return
    Exception table:
       from    to  target type
           6    55    58   any
          58    62    58   any
          70    91    94   Class java/util/concurrent/RejectedExecutionException

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #29                 // Field error:Ljava/lang/Throwable;
       5: aload_0
       6: iconst_1
       7: putfield      #20                 // Field done:Z
      10: aload_0
      11: invokevirtual #39                 // Method drain:()V
      14: return

  public void onComplete();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #20                 // Field done:Z
       5: aload_0
       6: invokevirtual #39                 // Method drain:()V
       9: return

  public void run();
    Code:
       0: aload_0
       1: getfield      #24                 // Field cancelled:Z
       4: ifeq          10
       7: goto          131
      10: aload_0
      11: getfield      #20                 // Field done:Z
      14: istore_1
      15: aconst_null
      16: astore_3
      17: aload_0
      18: dup
      19: astore        4
      21: monitorenter
      22: aload_0
      23: invokevirtual #61                 // Method peek:()Ljava/lang/Object;
      26: checkcast     #49                 // class java/lang/Long
      29: astore        5
      31: aload         5
      33: ifnonnull     40
      36: iconst_1
      37: goto          41
      40: iconst_0
      41: istore_2
      42: iload_2
      43: ifne          94
      46: aload         5
      48: invokevirtual #62                 // Method java/lang/Long.longValue:()J
      51: aload_0
      52: getfield      #11                 // Field ttlScheduler:Lreactor/core/scheduler/Scheduler;
      55: getstatic     #53                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      58: invokeinterface #54,  2           // InterfaceMethod reactor/core/scheduler/Scheduler.now:(Ljava/util/concurrent/TimeUnit;)J
      63: aload_0
      64: getfield      #8                  // Field ttl:Ljava/time/Duration;
      67: invokevirtual #56                 // Method java/time/Duration.toMillis:()J
      70: lsub
      71: lcmp
      72: ifgt          88
      75: aload_0
      76: invokevirtual #45                 // Method poll:()Ljava/lang/Object;
      79: pop
      80: aload_0
      81: invokevirtual #45                 // Method poll:()Ljava/lang/Object;
      84: astore_3
      85: goto          94
      88: aload         4
      90: monitorexit
      91: goto          131
      94: aload         4
      96: monitorexit
      97: goto          108
     100: astore        6
     102: aload         4
     104: monitorexit
     105: aload         6
     107: athrow
     108: aload_0
     109: aload_3
     110: invokevirtual #46                 // Method evict:(Ljava/lang/Object;)V
     113: iload_2
     114: ifeq          128
     117: iload_1
     118: ifeq          131
     121: aload_0
     122: invokevirtual #39                 // Method drain:()V
     125: goto          131
     128: goto          0
     131: return
    Exception table:
       from    to  target type
          22    91   100   any
          94    97   100   any
         100   105   100   any

  void evict(T);
    Code:
       0: aload_1
       1: ifnull        64
       4: aload_0
       5: getfield      #6                  // Field onBufferEviction:Ljava/util/function/Consumer;
       8: aload_1
       9: invokeinterface #63,  2           // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
      14: goto          64
      17: astore_2
      18: invokestatic  #65                 // Method reactor/core/publisher/FluxOnBackpressureBufferTimeout.access$000:()Lreactor/util/Logger;
      21: invokeinterface #66,  1           // InterfaceMethod reactor/util/Logger.isDebugEnabled:()Z
      26: ifeq          51
      29: invokestatic  #65                 // Method reactor/core/publisher/FluxOnBackpressureBufferTimeout.access$000:()Lreactor/util/Logger;
      32: ldc           #67                 // String value [{}] couldn\'t be evicted due to a callback error. This error will be dropped: {}
      34: iconst_2
      35: anewarray     #68                 // class java/lang/Object
      38: dup
      39: iconst_0
      40: aload_1
      41: aastore
      42: dup
      43: iconst_1
      44: aload_2
      45: aastore
      46: invokeinterface #69,  3           // InterfaceMethod reactor/util/Logger.debug:(Ljava/lang/String;[Ljava/lang/Object;)V
      51: aload_2
      52: aload_0
      53: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      56: invokeinterface #59,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      61: invokestatic  #70                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      64: return
    Exception table:
       from    to  target type
           4    14    17   Class java/lang/Throwable

  void drain();
    Code:
       0: getstatic     #42                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #43                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifeq          11
      10: return
      11: iconst_1
      12: istore_1
      13: aload_0
      14: getfield      #17                 // Field requested:J
      17: lstore_2
      18: lconst_0
      19: lstore        4
      21: lload         4
      23: lload_2
      24: lcmp
      25: ifeq          178
      28: aload_0
      29: getfield      #24                 // Field cancelled:Z
      32: ifeq          40
      35: aload_0
      36: invokevirtual #44                 // Method clearQueue:()V
      39: return
      40: aload_0
      41: getfield      #20                 // Field done:Z
      44: istore        6
      46: aload_0
      47: dup
      48: astore        8
      50: monitorenter
      51: aload_0
      52: invokevirtual #45                 // Method poll:()Ljava/lang/Object;
      55: ifnull        67
      58: aload_0
      59: invokevirtual #45                 // Method poll:()Ljava/lang/Object;
      62: astore        7
      64: goto          70
      67: aconst_null
      68: astore        7
      70: aload         8
      72: monitorexit
      73: goto          84
      76: astore        9
      78: aload         8
      80: monitorexit
      81: aload         9
      83: athrow
      84: aload         7
      86: ifnonnull     93
      89: iconst_1
      90: goto          94
      93: iconst_0
      94: istore        8
      96: iload         6
      98: ifeq          150
     101: iload         8
     103: ifeq          150
     106: aload_0
     107: getfield      #29                 // Field error:Ljava/lang/Throwable;
     110: astore        9
     112: aload         9
     114: ifnull        131
     117: aload_0
     118: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     121: aload         9
     123: invokeinterface #71,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
     128: goto          140
     131: aload_0
     132: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     135: invokeinterface #72,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
     140: aload_0
     141: getfield      #13                 // Field worker:Lreactor/core/scheduler/Scheduler$Worker;
     144: invokeinterface #41,  1           // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.dispose:()V
     149: return
     150: iload         8
     152: ifeq          158
     155: goto          178
     158: aload_0
     159: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     162: aload         7
     164: invokeinterface #73,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
     169: lload         4
     171: lconst_1
     172: ladd
     173: lstore        4
     175: goto          21
     178: lload         4
     180: lload_2
     181: lcmp
     182: ifne          282
     185: aload_0
     186: getfield      #24                 // Field cancelled:Z
     189: ifeq          197
     192: aload_0
     193: invokevirtual #44                 // Method clearQueue:()V
     196: return
     197: aload_0
     198: getfield      #20                 // Field done:Z
     201: istore        6
     203: aload_0
     204: dup
     205: astore        8
     207: monitorenter
     208: aload_0
     209: invokevirtual #21                 // Method isEmpty:()Z
     212: istore        7
     214: aload         8
     216: monitorexit
     217: goto          228
     220: astore        10
     222: aload         8
     224: monitorexit
     225: aload         10
     227: athrow
     228: iload         6
     230: ifeq          282
     233: iload         7
     235: ifeq          282
     238: aload_0
     239: getfield      #29                 // Field error:Ljava/lang/Throwable;
     242: astore        8
     244: aload         8
     246: ifnull        263
     249: aload_0
     250: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     253: aload         8
     255: invokeinterface #71,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
     260: goto          272
     263: aload_0
     264: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     267: invokeinterface #72,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
     272: aload_0
     273: getfield      #13                 // Field worker:Lreactor/core/scheduler/Scheduler$Worker;
     276: invokeinterface #41,  1           // InterfaceMethod reactor/core/scheduler/Scheduler$Worker.dispose:()V
     281: return
     282: getstatic     #42                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     285: aload_0
     286: iload_1
     287: ineg
     288: invokevirtual #74                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.addAndGet:(Ljava/lang/Object;I)I
     291: istore_1
     292: iload_1
     293: ifne          299
     296: goto          302
     299: goto          13
     302: return
    Exception table:
       from    to  target type
          51    73    76   any
          76    81    76   any
         208   217   220   any
         220   225   220   any

  static {};
    Code:
       0: ldc           #75                 // class reactor/core/publisher/FluxOnBackpressureBufferTimeout$BackpressureBufferTimeoutSubscriber
       2: ldc           #76                 // String wip
       4: invokestatic  #77                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       7: putstatic     #42                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: ldc           #75                 // class reactor/core/publisher/FluxOnBackpressureBufferTimeout$BackpressureBufferTimeoutSubscriber
      12: ldc           #78                 // String requested
      14: invokestatic  #79                 // Method java/util/concurrent/atomic/AtomicLongFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      17: putstatic     #37                 // Field REQUESTED:Ljava/util/concurrent/atomic/AtomicLongFieldUpdater;
      20: return
}
