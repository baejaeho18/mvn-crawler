Compiled from "FluxConcatMap.java"
final class reactor.core.publisher.FluxConcatMap$ConcatMapDelayed<T, R> implements reactor.core.publisher.FluxConcatMap$FluxConcatMapSupport<T, R> {
  final reactor.core.CoreSubscriber<? super R> actual;

  final reactor.core.publisher.FluxConcatMap$ConcatMapInner<R> inner;

  final java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>> mapper;

  final java.util.function.Supplier<? extends java.util.Queue<T>> queueSupplier;

  final int prefetch;

  final int limit;

  final boolean veryEnd;

  org.reactivestreams.Subscription s;

  int consumed;

  volatile java.util.Queue<T> queue;

  volatile boolean done;

  volatile boolean cancelled;

  volatile java.lang.Throwable error;

  static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<reactor.core.publisher.FluxConcatMap$ConcatMapDelayed, java.lang.Throwable> ERROR;

  volatile boolean active;

  volatile int wip;

  static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<reactor.core.publisher.FluxConcatMap$ConcatMapDelayed> WIP;

  int sourceMode;

  reactor.core.publisher.FluxConcatMap$ConcatMapDelayed(reactor.core.CoreSubscriber<? super R>, java.util.function.Function<? super T, ? extends org.reactivestreams.Publisher<? extends R>>, java.util.function.Supplier<? extends java.util.Queue<T>>, int, boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field mapper:Ljava/util/function/Function;
      14: aload_0
      15: aload_3
      16: putfield      #4                  // Field queueSupplier:Ljava/util/function/Supplier;
      19: aload_0
      20: iload         4
      22: putfield      #5                  // Field prefetch:I
      25: aload_0
      26: iload         4
      28: invokestatic  #6                  // Method reactor/core/publisher/Operators.unboundedOrLimit:(I)I
      31: putfield      #7                  // Field limit:I
      34: aload_0
      35: iload         5
      37: putfield      #8                  // Field veryEnd:Z
      40: aload_0
      41: new           #9                  // class reactor/core/publisher/FluxConcatMap$ConcatMapInner
      44: dup
      45: aload_0
      46: invokespecial #10                 // Method reactor/core/publisher/FluxConcatMap$ConcatMapInner."<init>":(Lreactor/core/publisher/FluxConcatMap$FluxConcatMapSupport;)V
      49: putfield      #11                 // Field inner:Lreactor/core/publisher/FluxConcatMap$ConcatMapInner;
      52: return

  public reactor.core.CoreSubscriber<? super R> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #12                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #14                 // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      16: if_acmpne     27
      19: aload_0
      20: getfield      #15                 // Field done:Z
      23: invokestatic  #16                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      26: areturn
      27: aload_1
      28: getstatic     #17                 // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      31: if_acmpne     42
      34: aload_0
      35: getfield      #18                 // Field cancelled:Z
      38: invokestatic  #16                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      41: areturn
      42: aload_1
      43: getstatic     #19                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      46: if_acmpne     57
      49: aload_0
      50: getfield      #5                  // Field prefetch:I
      53: invokestatic  #20                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      56: areturn
      57: aload_1
      58: getstatic     #21                 // Field reactor/core/Scannable$Attr.BUFFERED:Lreactor/core/Scannable$Attr;
      61: if_acmpne     88
      64: aload_0
      65: getfield      #22                 // Field queue:Ljava/util/Queue;
      68: ifnull        83
      71: aload_0
      72: getfield      #22                 // Field queue:Ljava/util/Queue;
      75: invokeinterface #23,  1           // InterfaceMethod java/util/Queue.size:()I
      80: goto          84
      83: iconst_0
      84: invokestatic  #20                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      87: areturn
      88: aload_1
      89: getstatic     #24                 // Field reactor/core/Scannable$Attr.ERROR:Lreactor/core/Scannable$Attr;
      92: if_acmpne     100
      95: aload_0
      96: getfield      #25                 // Field error:Ljava/lang/Throwable;
      99: areturn
     100: aload_1
     101: getstatic     #26                 // Field reactor/core/Scannable$Attr.DELAY_ERROR:Lreactor/core/Scannable$Attr;
     104: if_acmpne     112
     107: iconst_1
     108: invokestatic  #16                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     111: areturn
     112: aload_0
     113: aload_1
     114: invokespecial #27                 // InterfaceMethod reactor/core/publisher/FluxConcatMap$FluxConcatMapSupport.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
     117: areturn

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #28                 // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          147
      11: aload_0
      12: aload_1
      13: putfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
      16: aload_1
      17: instanceof    #29                 // class reactor/core/Fuseable$QueueSubscription
      20: ifeq          108
      23: aload_1
      24: checkcast     #29                 // class reactor/core/Fuseable$QueueSubscription
      27: astore_2
      28: aload_2
      29: iconst_3
      30: invokeinterface #31,  2           // InterfaceMethod reactor/core/Fuseable$QueueSubscription.requestFusion:(I)I
      35: istore_3
      36: iload_3
      37: iconst_1
      38: if_icmpne     71
      41: aload_0
      42: iconst_1
      43: putfield      #32                 // Field sourceMode:I
      46: aload_0
      47: aload_2
      48: putfield      #22                 // Field queue:Ljava/util/Queue;
      51: aload_0
      52: iconst_1
      53: putfield      #15                 // Field done:Z
      56: aload_0
      57: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      60: aload_0
      61: invokeinterface #33,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      66: aload_0
      67: invokevirtual #34                 // Method drain:()V
      70: return
      71: iload_3
      72: iconst_2
      73: if_icmpne     89
      76: aload_0
      77: iconst_2
      78: putfield      #32                 // Field sourceMode:I
      81: aload_0
      82: aload_2
      83: putfield      #22                 // Field queue:Ljava/util/Queue;
      86: goto          105
      89: aload_0
      90: aload_0
      91: getfield      #4                  // Field queueSupplier:Ljava/util/function/Supplier;
      94: invokeinterface #35,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      99: checkcast     #36                 // class java/util/Queue
     102: putfield      #22                 // Field queue:Ljava/util/Queue;
     105: goto          124
     108: aload_0
     109: aload_0
     110: getfield      #4                  // Field queueSupplier:Ljava/util/function/Supplier;
     113: invokeinterface #35,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
     118: checkcast     #36                 // class java/util/Queue
     121: putfield      #22                 // Field queue:Ljava/util/Queue;
     124: aload_0
     125: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     128: aload_0
     129: invokeinterface #33,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
     134: aload_1
     135: aload_0
     136: getfield      #5                  // Field prefetch:I
     139: invokestatic  #37                 // Method reactor/core/publisher/Operators.unboundedOrPrefetch:(I)J
     142: invokeinterface #38,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     147: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #32                 // Field sourceMode:I
       4: iconst_2
       5: if_icmpne     15
       8: aload_0
       9: invokevirtual #34                 // Method drain:()V
      12: goto          61
      15: aload_0
      16: getfield      #22                 // Field queue:Ljava/util/Queue;
      19: aload_1
      20: invokeinterface #39,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
      25: ifne          57
      28: aload_0
      29: aload_0
      30: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
      33: ldc           #41                 // String Queue is full: Reactive Streams source doesn\'t respect backpressure
      35: invokestatic  #42                 // Method reactor/core/Exceptions.failWithOverflow:(Ljava/lang/String;)Ljava/lang/IllegalStateException;
      38: aload_1
      39: aload_0
      40: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      43: invokeinterface #43,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      48: invokestatic  #44                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
      51: invokevirtual #45                 // Method onError:(Ljava/lang/Throwable;)V
      54: goto          61
      57: aload_0
      58: invokevirtual #34                 // Method drain:()V
      61: return

  public void onError(java.lang.Throwable);
    Code:
       0: getstatic     #46                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #47                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
       8: ifeq          23
      11: aload_0
      12: iconst_1
      13: putfield      #15                 // Field done:Z
      16: aload_0
      17: invokevirtual #34                 // Method drain:()V
      20: goto          36
      23: aload_1
      24: aload_0
      25: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      28: invokeinterface #43,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      33: invokestatic  #48                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      36: return

  public void onComplete();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #15                 // Field done:Z
       5: aload_0
       6: invokevirtual #34                 // Method drain:()V
       9: return

  public void innerNext(R);
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: aload_1
       5: invokeinterface #49,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
      10: return

  public void innerComplete();
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #50                 // Field active:Z
       5: aload_0
       6: invokevirtual #34                 // Method drain:()V
       9: return

  public void innerError(java.lang.Throwable);
    Code:
       0: getstatic     #46                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aload_1
       5: invokestatic  #47                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
       8: ifeq          44
      11: aload_0
      12: getfield      #8                  // Field veryEnd:Z
      15: ifne          32
      18: aload_0
      19: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
      22: invokeinterface #51,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      27: aload_0
      28: iconst_1
      29: putfield      #15                 // Field done:Z
      32: aload_0
      33: iconst_0
      34: putfield      #50                 // Field active:Z
      37: aload_0
      38: invokevirtual #34                 // Method drain:()V
      41: goto          57
      44: aload_1
      45: aload_0
      46: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      49: invokeinterface #43,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
      54: invokestatic  #48                 // Method reactor/core/publisher/Operators.onErrorDropped:(Ljava/lang/Throwable;Lreactor/util/context/Context;)V
      57: return

  public void request(long);
    Code:
       0: aload_0
       1: getfield      #11                 // Field inner:Lreactor/core/publisher/FluxConcatMap$ConcatMapInner;
       4: lload_1
       5: invokevirtual #52                 // Method reactor/core/publisher/FluxConcatMap$ConcatMapInner.request:(J)V
       8: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #18                 // Field cancelled:Z
       4: ifne          28
       7: aload_0
       8: iconst_1
       9: putfield      #18                 // Field cancelled:Z
      12: aload_0
      13: getfield      #11                 // Field inner:Lreactor/core/publisher/FluxConcatMap$ConcatMapInner;
      16: invokevirtual #53                 // Method reactor/core/publisher/FluxConcatMap$ConcatMapInner.cancel:()V
      19: aload_0
      20: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
      23: invokeinterface #51,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      28: return

  void drain();
    Code:
       0: getstatic     #54                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
       3: aload_0
       4: invokevirtual #55                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.getAndIncrement:(Ljava/lang/Object;)I
       7: ifne          459
      10: aload_0
      11: getfield      #18                 // Field cancelled:Z
      14: ifeq          18
      17: return
      18: aload_0
      19: getfield      #50                 // Field active:Z
      22: ifne          446
      25: aload_0
      26: getfield      #15                 // Field done:Z
      29: istore_1
      30: iload_1
      31: ifeq          76
      34: aload_0
      35: getfield      #8                  // Field veryEnd:Z
      38: ifne          76
      41: aload_0
      42: getfield      #25                 // Field error:Ljava/lang/Throwable;
      45: astore_2
      46: aload_2
      47: ifnull        76
      50: getstatic     #46                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      53: aload_0
      54: invokestatic  #56                 // Method reactor/core/Exceptions.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Ljava/lang/Throwable;
      57: astore_2
      58: aload_2
      59: getstatic     #57                 // Field reactor/core/Exceptions.TERMINATED:Ljava/lang/Throwable;
      62: if_acmpeq     75
      65: aload_0
      66: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      69: aload_2
      70: invokeinterface #58,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
      75: return
      76: aload_0
      77: getfield      #22                 // Field queue:Ljava/util/Queue;
      80: invokeinterface #59,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
      85: astore_2
      86: goto          117
      89: astore_3
      90: aload_0
      91: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      94: aload_0
      95: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
      98: aload_3
      99: aload_0
     100: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     103: invokeinterface #43,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
     108: invokestatic  #61                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Lreactor/util/context/Context;)Ljava/lang/Throwable;
     111: invokeinterface #58,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
     116: return
     117: aload_2
     118: ifnonnull     125
     121: iconst_1
     122: goto          126
     125: iconst_0
     126: istore_3
     127: iload_1
     128: ifeq          181
     131: iload_3
     132: ifeq          181
     135: getstatic     #46                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     138: aload_0
     139: invokestatic  #56                 // Method reactor/core/Exceptions.terminate:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;)Ljava/lang/Throwable;
     142: astore        4
     144: aload         4
     146: ifnull        171
     149: aload         4
     151: getstatic     #57                 // Field reactor/core/Exceptions.TERMINATED:Ljava/lang/Throwable;
     154: if_acmpeq     171
     157: aload_0
     158: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     161: aload         4
     163: invokeinterface #58,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
     168: goto          180
     171: aload_0
     172: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     175: invokeinterface #62,  1           // InterfaceMethod reactor/core/CoreSubscriber.onComplete:()V
     180: return
     181: iload_3
     182: ifne          446
     185: aload_0
     186: getfield      #3                  // Field mapper:Ljava/util/function/Function;
     189: aload_2
     190: invokeinterface #63,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
     195: ldc           #64                 // String The mapper returned a null Publisher
     197: invokestatic  #65                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
     200: checkcast     #66                 // class org/reactivestreams/Publisher
     203: astore        4
     205: goto          239
     208: astore        5
     210: aload_0
     211: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     214: aload_0
     215: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
     218: aload         5
     220: aload_2
     221: aload_0
     222: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     225: invokeinterface #43,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
     230: invokestatic  #44                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
     233: invokeinterface #58,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
     238: return
     239: aload_0
     240: getfield      #32                 // Field sourceMode:I
     243: iconst_1
     244: if_icmpeq     290
     247: aload_0
     248: getfield      #67                 // Field consumed:I
     251: iconst_1
     252: iadd
     253: istore        5
     255: iload         5
     257: aload_0
     258: getfield      #7                  // Field limit:I
     261: if_icmpne     284
     264: aload_0
     265: iconst_0
     266: putfield      #67                 // Field consumed:I
     269: aload_0
     270: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
     273: iload         5
     275: i2l
     276: invokeinterface #38,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
     281: goto          290
     284: aload_0
     285: iload         5
     287: putfield      #67                 // Field consumed:I
     290: aload         4
     292: instanceof    #68                 // class java/util/concurrent/Callable
     295: ifeq          430
     298: aload         4
     300: checkcast     #68                 // class java/util/concurrent/Callable
     303: astore        5
     305: aload         5
     307: invokeinterface #69,  1           // InterfaceMethod java/util/concurrent/Callable.call:()Ljava/lang/Object;
     312: astore        6
     314: goto          370
     317: astore        7
     319: aload_0
     320: getfield      #8                  // Field veryEnd:Z
     323: ifeq          341
     326: getstatic     #46                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     329: aload_0
     330: aload         7
     332: invokestatic  #47                 // Method reactor/core/Exceptions.addThrowable:(Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;Ljava/lang/Object;Ljava/lang/Throwable;)Z
     335: ifeq          341
     338: goto          10
     341: aload_0
     342: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     345: aload_0
     346: getfield      #13                 // Field s:Lorg/reactivestreams/Subscription;
     349: aload         7
     351: aload_2
     352: aload_0
     353: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     356: invokeinterface #43,  1           // InterfaceMethod reactor/core/CoreSubscriber.currentContext:()Lreactor/util/context/Context;
     361: invokestatic  #44                 // Method reactor/core/publisher/Operators.onOperatorError:(Lorg/reactivestreams/Subscription;Ljava/lang/Throwable;Ljava/lang/Object;Lreactor/util/context/Context;)Ljava/lang/Throwable;
     364: invokeinterface #58,  2           // InterfaceMethod reactor/core/CoreSubscriber.onError:(Ljava/lang/Throwable;)V
     369: return
     370: aload         6
     372: ifnonnull     378
     375: goto          10
     378: aload_0
     379: getfield      #11                 // Field inner:Lreactor/core/publisher/FluxConcatMap$ConcatMapInner;
     382: invokevirtual #70                 // Method reactor/core/publisher/FluxConcatMap$ConcatMapInner.isUnbounded:()Z
     385: ifeq          402
     388: aload_0
     389: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
     392: aload         6
     394: invokeinterface #49,  2           // InterfaceMethod reactor/core/CoreSubscriber.onNext:(Ljava/lang/Object;)V
     399: goto          10
     402: aload_0
     403: iconst_1
     404: putfield      #50                 // Field active:Z
     407: aload_0
     408: getfield      #11                 // Field inner:Lreactor/core/publisher/FluxConcatMap$ConcatMapInner;
     411: new           #71                 // class reactor/core/publisher/FluxConcatMap$WeakScalarSubscription
     414: dup
     415: aload         6
     417: aload_0
     418: getfield      #11                 // Field inner:Lreactor/core/publisher/FluxConcatMap$ConcatMapInner;
     421: invokespecial #72                 // Method reactor/core/publisher/FluxConcatMap$WeakScalarSubscription."<init>":(Ljava/lang/Object;Lreactor/core/CoreSubscriber;)V
     424: invokevirtual #73                 // Method reactor/core/publisher/FluxConcatMap$ConcatMapInner.set:(Lorg/reactivestreams/Subscription;)V
     427: goto          446
     430: aload_0
     431: iconst_1
     432: putfield      #50                 // Field active:Z
     435: aload         4
     437: aload_0
     438: getfield      #11                 // Field inner:Lreactor/core/publisher/FluxConcatMap$ConcatMapInner;
     441: invokeinterface #74,  2           // InterfaceMethod org/reactivestreams/Publisher.subscribe:(Lorg/reactivestreams/Subscriber;)V
     446: getstatic     #54                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     449: aload_0
     450: invokevirtual #75                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.decrementAndGet:(Ljava/lang/Object;)I
     453: ifne          10
     456: goto          459
     459: return
    Exception table:
       from    to  target type
          76    86    89   Class java/lang/Throwable
         185   205   208   Class java/lang/Throwable
         305   314   317   Class java/lang/Throwable

  static {};
    Code:
       0: ldc           #76                 // class reactor/core/publisher/FluxConcatMap$ConcatMapDelayed
       2: ldc           #60                 // class java/lang/Throwable
       4: ldc           #77                 // String error
       6: invokestatic  #78                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #46                 // Field ERROR:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: ldc           #76                 // class reactor/core/publisher/FluxConcatMap$ConcatMapDelayed
      14: ldc           #79                 // String wip
      16: invokestatic  #80                 // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      19: putstatic     #54                 // Field WIP:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      22: return
}
