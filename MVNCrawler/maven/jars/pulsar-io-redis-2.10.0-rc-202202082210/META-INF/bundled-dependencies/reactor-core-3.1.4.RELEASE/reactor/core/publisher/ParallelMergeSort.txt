Compiled from "ParallelMergeSort.java"
final class reactor.core.publisher.ParallelMergeSort<T> extends reactor.core.publisher.Flux<T> implements reactor.core.Scannable {
  final reactor.core.publisher.ParallelFlux<java.util.List<T>> source;

  final java.util.Comparator<? super T> comparator;

  reactor.core.publisher.ParallelMergeSort(reactor.core.publisher.ParallelFlux<java.util.List<T>>, java.util.Comparator<? super T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method reactor/core/publisher/Flux."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field source:Lreactor/core/publisher/ParallelFlux;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field comparator:Ljava/util/Comparator;
      14: return

  public int getPrefetch();
    Code:
       0: ldc           #5                  // int 2147483647
       2: ireturn

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: new           #6                  // class reactor/core/publisher/ParallelMergeSort$MergeSortMain
       3: dup
       4: aload_1
       5: aload_0
       6: getfield      #2                  // Field source:Lreactor/core/publisher/ParallelFlux;
       9: invokevirtual #7                  // Method reactor/core/publisher/ParallelFlux.parallelism:()I
      12: aload_0
      13: getfield      #3                  // Field comparator:Ljava/util/Comparator;
      16: invokespecial #8                  // Method reactor/core/publisher/ParallelMergeSort$MergeSortMain."<init>":(Lreactor/core/CoreSubscriber;ILjava/util/Comparator;)V
      19: astore_2
      20: aload_1
      21: aload_2
      22: invokeinterface #9,  2            // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      27: aload_0
      28: getfield      #2                  // Field source:Lreactor/core/publisher/ParallelFlux;
      31: aload_2
      32: getfield      #10                 // Field reactor/core/publisher/ParallelMergeSort$MergeSortMain.subscribers:[Lreactor/core/publisher/ParallelMergeSort$MergeSortInner;
      35: invokevirtual #11                 // Method reactor/core/publisher/ParallelFlux.subscribe:([Lreactor/core/CoreSubscriber;)V
      38: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #12                 // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #2                  // Field source:Lreactor/core/publisher/ParallelFlux;
      11: areturn
      12: aload_1
      13: getstatic     #13                 // Field reactor/core/Scannable$Attr.PREFETCH:Lreactor/core/Scannable$Attr;
      16: if_acmpne     27
      19: aload_0
      20: invokevirtual #14                 // Method getPrefetch:()I
      23: invokestatic  #15                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      26: areturn
      27: aconst_null
      28: areturn
}
