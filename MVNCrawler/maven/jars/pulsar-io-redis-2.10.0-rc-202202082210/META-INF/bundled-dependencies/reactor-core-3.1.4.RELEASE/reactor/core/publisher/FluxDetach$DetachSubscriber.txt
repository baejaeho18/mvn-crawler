Compiled from "FluxDetach.java"
final class reactor.core.publisher.FluxDetach$DetachSubscriber<T> implements reactor.core.publisher.InnerOperator<T, T> {
  reactor.core.CoreSubscriber<? super T> actual;

  org.reactivestreams.Subscription s;

  reactor.core.publisher.FluxDetach$DetachSubscriber(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       9: return

  public java.lang.Object scanUnsafe(reactor.core.Scannable$Attr);
    Code:
       0: aload_1
       1: getstatic     #3                  // Field reactor/core/Scannable$Attr.PARENT:Lreactor/core/Scannable$Attr;
       4: if_acmpne     12
       7: aload_0
       8: getfield      #4                  // Field s:Lorg/reactivestreams/Subscription;
      11: areturn
      12: aload_1
      13: getstatic     #5                  // Field reactor/core/Scannable$Attr.TERMINATED:Lreactor/core/Scannable$Attr;
      16: if_acmpne     35
      19: aload_0
      20: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      23: ifnonnull     30
      26: iconst_1
      27: goto          31
      30: iconst_0
      31: invokestatic  #6                  // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      34: areturn
      35: aload_1
      36: getstatic     #7                  // Field reactor/core/Scannable$Attr.CANCELLED:Lreactor/core/Scannable$Attr;
      39: if_acmpne     65
      42: aload_0
      43: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      46: ifnonnull     60
      49: aload_0
      50: getfield      #4                  // Field s:Lorg/reactivestreams/Subscription;
      53: ifnonnull     60
      56: iconst_1
      57: goto          61
      60: iconst_0
      61: invokestatic  #6                  // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      64: areturn
      65: aload_0
      66: aload_1
      67: invokespecial #8                  // InterfaceMethod reactor/core/publisher/InnerOperator.scanUnsafe:(Lreactor/core/Scannable$Attr;)Ljava/lang/Object;
      70: areturn

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_0
       1: getfield      #4                  // Field s:Lorg/reactivestreams/Subscription;
       4: aload_1
       5: invokestatic  #9                  // Method reactor/core/publisher/Operators.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z
       8: ifeq          26
      11: aload_0
      12: aload_1
      13: putfield      #4                  // Field s:Lorg/reactivestreams/Subscription;
      16: aload_0
      17: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      20: aload_0
      21: invokeinterface #10,  2           // InterfaceMethod reactor/core/CoreSubscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      26: return

  public void onNext(T);
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: astore_2
       5: aload_2
       6: ifnull        16
       9: aload_2
      10: aload_1
      11: invokeinterface #11,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
      16: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: astore_2
       5: aload_2
       6: ifnull        26
       9: aload_0
      10: aconst_null
      11: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      14: aload_0
      15: aconst_null
      16: putfield      #4                  // Field s:Lorg/reactivestreams/Subscription;
      19: aload_2
      20: aload_1
      21: invokeinterface #12,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      26: return

  public reactor.core.CoreSubscriber<? super T> actual();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: areturn

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
       4: astore_1
       5: aload_1
       6: ifnull        25
       9: aload_0
      10: aconst_null
      11: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      14: aload_0
      15: aconst_null
      16: putfield      #4                  // Field s:Lorg/reactivestreams/Subscription;
      19: aload_1
      20: invokeinterface #13,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      25: return

  public void request(long);
    Code:
       0: aload_0
       1: getfield      #4                  // Field s:Lorg/reactivestreams/Subscription;
       4: astore_3
       5: aload_3
       6: ifnull        16
       9: aload_3
      10: lload_1
      11: invokeinterface #14,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      16: return

  public void cancel();
    Code:
       0: aload_0
       1: getfield      #4                  // Field s:Lorg/reactivestreams/Subscription;
       4: astore_1
       5: aload_1
       6: ifnull        25
       9: aload_0
      10: aconst_null
      11: putfield      #2                  // Field actual:Lreactor/core/CoreSubscriber;
      14: aload_0
      15: aconst_null
      16: putfield      #4                  // Field s:Lorg/reactivestreams/Subscription;
      19: aload_1
      20: invokeinterface #15,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      25: return
}
