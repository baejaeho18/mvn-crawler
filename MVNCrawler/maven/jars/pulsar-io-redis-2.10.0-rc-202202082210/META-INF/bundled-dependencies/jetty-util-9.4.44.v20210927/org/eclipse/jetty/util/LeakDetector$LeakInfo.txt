Compiled from "LeakDetector.java"
public class org.eclipse.jetty.util.LeakDetector$LeakInfo extends java.lang.ref.PhantomReference<T> {
  private final java.lang.String id;

  private final java.lang.String description;

  private final java.lang.Throwable stackFrames;

  final org.eclipse.jetty.util.LeakDetector this$0;

  private org.eclipse.jetty.util.LeakDetector$LeakInfo(T, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field this$0:Lorg/eclipse/jetty/util/LeakDetector;
       5: aload_0
       6: aload_2
       7: aload_1
       8: invokestatic  #6                  // Method org/eclipse/jetty/util/LeakDetector.access$400:(Lorg/eclipse/jetty/util/LeakDetector;)Ljava/lang/ref/ReferenceQueue;
      11: invokespecial #7                  // Method java/lang/ref/PhantomReference."<init>":(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V
      14: aload_0
      15: aload_3
      16: putfield      #3                  // Field id:Ljava/lang/String;
      19: aload_0
      20: aload_2
      21: invokevirtual #8                  // Method java/lang/Object.toString:()Ljava/lang/String;
      24: putfield      #2                  // Field description:Ljava/lang/String;
      27: aload_0
      28: new           #9                  // class java/lang/Throwable
      31: dup
      32: invokespecial #10                 // Method java/lang/Throwable."<init>":()V
      35: putfield      #1                  // Field stackFrames:Ljava/lang/Throwable;
      38: return

  public java.lang.String getResourceDescription();
    Code:
       0: aload_0
       1: getfield      #2                  // Field description:Ljava/lang/String;
       4: areturn

  public java.lang.Throwable getStackFrames();
    Code:
       0: aload_0
       1: getfield      #1                  // Field stackFrames:Ljava/lang/Throwable;
       4: areturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #2                  // Field description:Ljava/lang/String;
       4: areturn

  org.eclipse.jetty.util.LeakDetector$LeakInfo(org.eclipse.jetty.util.LeakDetector, java.lang.Object, java.lang.String, org.eclipse.jetty.util.LeakDetector$1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokespecial #4                  // Method "<init>":(Lorg/eclipse/jetty/util/LeakDetector;Ljava/lang/Object;Ljava/lang/String;)V
       7: return

  static java.lang.String access$100(org.eclipse.jetty.util.LeakDetector$LeakInfo);
    Code:
       0: aload_0
       1: getfield      #3                  // Field id:Ljava/lang/String;
       4: areturn

  static java.lang.String access$200(org.eclipse.jetty.util.LeakDetector$LeakInfo);
    Code:
       0: aload_0
       1: getfield      #2                  // Field description:Ljava/lang/String;
       4: areturn

  static java.lang.Throwable access$300(org.eclipse.jetty.util.LeakDetector$LeakInfo);
    Code:
       0: aload_0
       1: getfield      #1                  // Field stackFrames:Ljava/lang/Throwable;
       4: areturn
}
