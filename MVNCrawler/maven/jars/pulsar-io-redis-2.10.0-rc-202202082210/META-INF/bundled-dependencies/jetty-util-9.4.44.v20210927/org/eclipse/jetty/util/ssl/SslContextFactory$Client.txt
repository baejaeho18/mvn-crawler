Compiled from "SslContextFactory.java"
public class org.eclipse.jetty.util.ssl.SslContextFactory$Client extends org.eclipse.jetty.util.ssl.SslContextFactory {
  private org.eclipse.jetty.util.ssl.SslContextFactory$Client$SniProvider sniProvider;

  public org.eclipse.jetty.util.ssl.SslContextFactory$Client();
    Code:
       0: aload_0
       1: iconst_0
       2: invokespecial #2                  // Method "<init>":(Z)V
       5: return

  public org.eclipse.jetty.util.ssl.SslContextFactory$Client(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #3                  // Method org/eclipse/jetty/util/ssl/SslContextFactory."<init>":(Z)V
       5: aload_0
       6: invokedynamic #4,  0              // InvokeDynamic #0:apply:()Lorg/eclipse/jetty/util/ssl/SslContextFactory$Client$SniProvider;
      11: putfield      #5                  // Field sniProvider:Lorg/eclipse/jetty/util/ssl/SslContextFactory$Client$SniProvider;
      14: return

  protected void checkConfiguration();
    Code:
       0: aload_0
       1: invokevirtual #6                  // Method checkTrustAll:()V
       4: aload_0
       5: invokevirtual #7                  // Method checkEndPointIdentificationAlgorithm:()V
       8: aload_0
       9: invokespecial #8                  // Method org/eclipse/jetty/util/ssl/SslContextFactory.checkConfiguration:()V
      12: return

  protected javax.net.ssl.X509ExtendedKeyManager newSniX509ExtendedKeyManager(javax.net.ssl.X509ExtendedKeyManager);
    Code:
       0: aload_1
       1: areturn

  public void customize(javax.net.ssl.SSLEngine);
    Code:
       0: aload_1
       1: invokevirtual #9                  // Method javax/net/ssl/SSLEngine.getSSLParameters:()Ljavax/net/ssl/SSLParameters;
       4: astore_2
       5: aload_2
       6: invokevirtual #10                 // Method javax/net/ssl/SSLParameters.getServerNames:()Ljava/util/List;
       9: astore_3
      10: aload_3
      11: ifnonnull     18
      14: invokestatic  #11                 // Method java/util/Collections.emptyList:()Ljava/util/List;
      17: astore_3
      18: aload_0
      19: invokevirtual #12                 // Method getSNIProvider:()Lorg/eclipse/jetty/util/ssl/SslContextFactory$Client$SniProvider;
      22: aload_1
      23: aload_3
      24: invokeinterface #13,  3           // InterfaceMethod org/eclipse/jetty/util/ssl/SslContextFactory$Client$SniProvider.apply:(Ljavax/net/ssl/SSLEngine;Ljava/util/List;)Ljava/util/List;
      29: astore        4
      31: aload         4
      33: ifnull        53
      36: aload         4
      38: aload_3
      39: if_acmpeq     53
      42: aload_2
      43: aload         4
      45: invokevirtual #14                 // Method javax/net/ssl/SSLParameters.setServerNames:(Ljava/util/List;)V
      48: aload_1
      49: aload_2
      50: invokevirtual #15                 // Method javax/net/ssl/SSLEngine.setSSLParameters:(Ljavax/net/ssl/SSLParameters;)V
      53: aload_0
      54: aload_1
      55: invokespecial #16                 // Method org/eclipse/jetty/util/ssl/SslContextFactory.customize:(Ljavax/net/ssl/SSLEngine;)V
      58: return

  public org.eclipse.jetty.util.ssl.SslContextFactory$Client$SniProvider getSNIProvider();
    Code:
       0: aload_0
       1: getfield      #5                  // Field sniProvider:Lorg/eclipse/jetty/util/ssl/SslContextFactory$Client$SniProvider;
       4: areturn

  public void setSNIProvider(org.eclipse.jetty.util.ssl.SslContextFactory$Client$SniProvider);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #17                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
       5: checkcast     #18                 // class org/eclipse/jetty/util/ssl/SslContextFactory$Client$SniProvider
       8: putfield      #5                  // Field sniProvider:Lorg/eclipse/jetty/util/ssl/SslContextFactory$Client$SniProvider;
      11: return

  private static java.util.List<javax.net.ssl.SNIServerName> getSniServerNames(javax.net.ssl.SSLEngine, java.util.List<javax.net.ssl.SNIServerName>);
    Code:
       0: aload_1
       1: invokeinterface #19,  1           // InterfaceMethod java/util/List.isEmpty:()Z
       6: ifeq          36
       9: aload_0
      10: invokevirtual #20                 // Method javax/net/ssl/SSLEngine.getPeerHost:()Ljava/lang/String;
      13: astore_2
      14: aload_2
      15: ifnull        36
      18: new           #21                 // class javax/net/ssl/SNIHostName
      21: dup
      22: aload_2
      23: getstatic     #22                 // Field java/nio/charset/StandardCharsets.US_ASCII:Ljava/nio/charset/Charset;
      26: invokevirtual #23                 // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B
      29: invokespecial #24                 // Method javax/net/ssl/SNIHostName."<init>":([B)V
      32: invokestatic  #25                 // Method java/util/Collections.singletonList:(Ljava/lang/Object;)Ljava/util/List;
      35: areturn
      36: aload_1
      37: areturn

  private static java.util.List lambda$new$0(javax.net.ssl.SSLEngine, java.util.List);
    Code:
       0: aload_1
       1: areturn

  static java.util.List access$400(javax.net.ssl.SSLEngine, java.util.List);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #1                  // Method getSniServerNames:(Ljavax/net/ssl/SSLEngine;Ljava/util/List;)Ljava/util/List;
       5: areturn
}
