Compiled from "Pool.java"
class org.eclipse.jetty.util.Pool$MonoEntry extends org.eclipse.jetty.util.Pool<T>.Entry {
  private final java.util.concurrent.atomic.AtomicInteger state;

  final org.eclipse.jetty.util.Pool this$0;

  private org.eclipse.jetty.util.Pool$MonoEntry(org.eclipse.jetty.util.Pool);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2                  // Field this$0:Lorg/eclipse/jetty/util/Pool;
       5: aload_0
       6: aload_1
       7: invokespecial #3                  // Method org/eclipse/jetty/util/Pool$Entry."<init>":(Lorg/eclipse/jetty/util/Pool;)V
      10: aload_0
      11: new           #4                  // class java/util/concurrent/atomic/AtomicInteger
      14: dup
      15: ldc           #6                  // int -2147483648
      17: invokespecial #7                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      20: putfield      #8                  // Field state:Ljava/util/concurrent/atomic/AtomicInteger;
      23: return

  protected boolean tryEnable(boolean);
    Code:
       0: aload_0
       1: getfield      #8                  // Field state:Ljava/util/concurrent/atomic/AtomicInteger;
       4: ldc           #6                  // int -2147483648
       6: iload_1
       7: ifeq          14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: invokevirtual #9                  // Method java/util/concurrent/atomic/AtomicInteger.compareAndSet:(II)Z
      18: ireturn

  boolean tryAcquire();
    Code:
       0: aload_0
       1: getfield      #8                  // Field state:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #10                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       7: istore_1
       8: iload_1
       9: ifeq          14
      12: iconst_0
      13: ireturn
      14: aload_0
      15: getfield      #8                  // Field state:Ljava/util/concurrent/atomic/AtomicInteger;
      18: iload_1
      19: iconst_1
      20: invokevirtual #9                  // Method java/util/concurrent/atomic/AtomicInteger.compareAndSet:(II)Z
      23: ifeq          28
      26: iconst_1
      27: ireturn
      28: goto          0

  boolean tryRelease();
    Code:
       0: aload_0
       1: getfield      #8                  // Field state:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #10                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       7: istore_1
       8: iload_1
       9: ifge          14
      12: iconst_0
      13: ireturn
      14: iload_1
      15: ifne          28
      18: new           #11                 // class java/lang/IllegalStateException
      21: dup
      22: ldc           #12                 // String Cannot release an already released entry
      24: invokespecial #13                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      27: athrow
      28: aload_0
      29: getfield      #8                  // Field state:Ljava/util/concurrent/atomic/AtomicInteger;
      32: iload_1
      33: iconst_0
      34: invokevirtual #9                  // Method java/util/concurrent/atomic/AtomicInteger.compareAndSet:(II)Z
      37: ifeq          42
      40: iconst_1
      41: ireturn
      42: goto          0

  boolean tryRemove();
    Code:
       0: aload_0
       1: getfield      #8                  // Field state:Ljava/util/concurrent/atomic/AtomicInteger;
       4: iconst_m1
       5: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicInteger.set:(I)V
       8: iconst_1
       9: ireturn

  public boolean isClosed();
    Code:
       0: aload_0
       1: getfield      #8                  // Field state:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #10                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       7: ifge          14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public boolean isReserved();
    Code:
       0: aload_0
       1: getfield      #8                  // Field state:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #10                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       7: ldc           #6                  // int -2147483648
       9: if_icmpne     16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: ireturn

  public boolean isIdle();
    Code:
       0: aload_0
       1: getfield      #8                  // Field state:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #10                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       7: ifne          14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public boolean isInUse();
    Code:
       0: aload_0
       1: getfield      #8                  // Field state:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #10                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       7: iconst_1
       8: if_icmpne     15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #8                  // Field state:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #10                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       7: lookupswitch  { // 3
           -2147483648: 40
                    -1: 46
                     0: 52
               default: 58
          }
      40: ldc           #15                 // String PENDING
      42: astore_1
      43: goto          61
      46: ldc           #16                 // String CLOSED
      48: astore_1
      49: goto          61
      52: ldc           #17                 // String IDLE
      54: astore_1
      55: goto          61
      58: ldc           #18                 // String ACTIVE
      60: astore_1
      61: ldc           #19                 // String %s@%x{%s,pooled=%s}
      63: iconst_4
      64: anewarray     #20                 // class java/lang/Object
      67: dup
      68: iconst_0
      69: aload_0
      70: invokevirtual #21                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      73: invokevirtual #22                 // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
      76: aastore
      77: dup
      78: iconst_1
      79: aload_0
      80: invokevirtual #23                 // Method java/lang/Object.hashCode:()I
      83: invokestatic  #24                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      86: aastore
      87: dup
      88: iconst_2
      89: aload_1
      90: aastore
      91: dup
      92: iconst_3
      93: aload_0
      94: invokevirtual #25                 // Method getPooled:()Ljava/lang/Object;
      97: aastore
      98: invokestatic  #26                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     101: areturn

  org.eclipse.jetty.util.Pool$MonoEntry(org.eclipse.jetty.util.Pool, org.eclipse.jetty.util.Pool$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method "<init>":(Lorg/eclipse/jetty/util/Pool;)V
       5: return
}
