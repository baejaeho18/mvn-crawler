Compiled from "HadoopLz4OutputStream.java"
class io.airlift.compress.lz4.HadoopLz4OutputStream extends org.apache.hadoop.io.compress.CompressionOutputStream {
  private final io.airlift.compress.lz4.Lz4Compressor compressor;

  private final byte[] inputBuffer;

  private final int inputMaxSize;

  private int inputOffset;

  private final byte[] outputBuffer;

  public io.airlift.compress.lz4.HadoopLz4OutputStream(java.io.OutputStream, int);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #3                  // Method org/apache/hadoop/io/compress/CompressionOutputStream."<init>":(Ljava/io/OutputStream;)V
       5: aload_0
       6: new           #9                  // class io/airlift/compress/lz4/Lz4Compressor
       9: dup
      10: invokespecial #11                 // Method io/airlift/compress/lz4/Lz4Compressor."<init>":()V
      13: putfield      #14                 // Field compressor:Lio/airlift/compress/lz4/Lz4Compressor;
      16: aload_0
      17: iload_2
      18: newarray       byte
      20: putfield      #20                 // Field inputBuffer:[B
      23: aload_0
      24: aload_0
      25: getfield      #20                 // Field inputBuffer:[B
      28: arraylength
      29: iload_2
      30: invokestatic  #24                 // Method compressionOverhead:(I)I
      33: isub
      34: putfield      #28                 // Field inputMaxSize:I
      37: aload_0
      38: aload_0
      39: getfield      #14                 // Field compressor:Lio/airlift/compress/lz4/Lz4Compressor;
      42: aload_0
      43: getfield      #28                 // Field inputMaxSize:I
      46: invokevirtual #32                 // Method io/airlift/compress/lz4/Lz4Compressor.maxCompressedLength:(I)I
      49: bipush        8
      51: iadd
      52: newarray       byte
      54: putfield      #35                 // Field outputBuffer:[B
      57: return

  public void write(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #20                 // Field inputBuffer:[B
       4: aload_0
       5: dup
       6: getfield      #38                 // Field inputOffset:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #38                 // Field inputOffset:I
      15: iload_1
      16: i2b
      17: bastore
      18: aload_0
      19: getfield      #38                 // Field inputOffset:I
      22: aload_0
      23: getfield      #28                 // Field inputMaxSize:I
      26: if_icmplt     42
      29: aload_0
      30: aload_0
      31: getfield      #20                 // Field inputBuffer:[B
      34: iconst_0
      35: aload_0
      36: getfield      #38                 // Field inputOffset:I
      39: invokespecial #41                 // Method writeNextChunk:([BII)V
      42: return

  public void write(byte[], int, int) throws java.io.IOException;
    Code:
       0: iload_3
       1: ifle          108
       4: iload_3
       5: aload_0
       6: getfield      #28                 // Field inputMaxSize:I
       9: aload_0
      10: getfield      #38                 // Field inputOffset:I
      13: isub
      14: invokestatic  #45                 // Method java/lang/Math.min:(II)I
      17: istore        4
      19: aload_0
      20: getfield      #38                 // Field inputOffset:I
      23: ifne          45
      26: iload_3
      27: aload_0
      28: getfield      #28                 // Field inputMaxSize:I
      31: if_icmple     45
      34: aload_0
      35: aload_1
      36: iload_2
      37: iload         4
      39: invokespecial #41                 // Method writeNextChunk:([BII)V
      42: goto          95
      45: aload_1
      46: iload_2
      47: aload_0
      48: getfield      #20                 // Field inputBuffer:[B
      51: aload_0
      52: getfield      #38                 // Field inputOffset:I
      55: iload         4
      57: invokestatic  #51                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      60: aload_0
      61: dup
      62: getfield      #38                 // Field inputOffset:I
      65: iload         4
      67: iadd
      68: putfield      #38                 // Field inputOffset:I
      71: aload_0
      72: getfield      #38                 // Field inputOffset:I
      75: aload_0
      76: getfield      #28                 // Field inputMaxSize:I
      79: if_icmplt     95
      82: aload_0
      83: aload_0
      84: getfield      #20                 // Field inputBuffer:[B
      87: iconst_0
      88: aload_0
      89: getfield      #38                 // Field inputOffset:I
      92: invokespecial #41                 // Method writeNextChunk:([BII)V
      95: iload_3
      96: iload         4
      98: isub
      99: istore_3
     100: iload_2
     101: iload         4
     103: iadd
     104: istore_2
     105: goto          0
     108: return

  public void finish() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #38                 // Field inputOffset:I
       4: ifle          20
       7: aload_0
       8: aload_0
       9: getfield      #20                 // Field inputBuffer:[B
      12: iconst_0
      13: aload_0
      14: getfield      #38                 // Field inputOffset:I
      17: invokespecial #41                 // Method writeNextChunk:([BII)V
      20: return

  public void resetState() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #57                 // Method finish:()V
       4: return

  private void writeNextChunk(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #14                 // Field compressor:Lio/airlift/compress/lz4/Lz4Compressor;
       4: aload_1
       5: iload_2
       6: iload_3
       7: aload_0
       8: getfield      #35                 // Field outputBuffer:[B
      11: iconst_0
      12: aload_0
      13: getfield      #35                 // Field outputBuffer:[B
      16: arraylength
      17: invokevirtual #60                 // Method io/airlift/compress/lz4/Lz4Compressor.compress:([BII[BII)I
      20: istore        4
      22: aload_0
      23: iload_3
      24: invokespecial #64                 // Method writeBigEndianInt:(I)V
      27: aload_0
      28: iload         4
      30: invokespecial #64                 // Method writeBigEndianInt:(I)V
      33: aload_0
      34: getfield      #68                 // Field out:Ljava/io/OutputStream;
      37: aload_0
      38: getfield      #35                 // Field outputBuffer:[B
      41: iconst_0
      42: iload         4
      44: invokevirtual #72                 // Method java/io/OutputStream.write:([BII)V
      47: aload_0
      48: iconst_0
      49: putfield      #38                 // Field inputOffset:I
      52: return

  private void writeBigEndianInt(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #68                 // Field out:Ljava/io/OutputStream;
       4: iload_1
       5: bipush        24
       7: iushr
       8: invokevirtual #77                 // Method java/io/OutputStream.write:(I)V
      11: aload_0
      12: getfield      #68                 // Field out:Ljava/io/OutputStream;
      15: iload_1
      16: bipush        16
      18: iushr
      19: invokevirtual #77                 // Method java/io/OutputStream.write:(I)V
      22: aload_0
      23: getfield      #68                 // Field out:Ljava/io/OutputStream;
      26: iload_1
      27: bipush        8
      29: iushr
      30: invokevirtual #77                 // Method java/io/OutputStream.write:(I)V
      33: aload_0
      34: getfield      #68                 // Field out:Ljava/io/OutputStream;
      37: iload_1
      38: invokevirtual #77                 // Method java/io/OutputStream.write:(I)V
      41: return

  private static int compressionOverhead(int);
    Code:
       0: iload_0
       1: i2d
       2: ldc2_w        #79                 // double 0.01d
       5: dmul
       6: d2i
       7: bipush        10
       9: invokestatic  #81                 // Method java/lang/Math.max:(II)I
      12: ireturn
}
