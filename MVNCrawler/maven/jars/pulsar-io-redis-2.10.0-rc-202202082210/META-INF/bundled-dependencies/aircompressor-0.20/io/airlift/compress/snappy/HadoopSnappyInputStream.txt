Compiled from "HadoopSnappyInputStream.java"
class io.airlift.compress.snappy.HadoopSnappyInputStream extends org.apache.hadoop.io.compress.CompressionInputStream {
  private final io.airlift.compress.snappy.SnappyDecompressor decompressor;

  private final java.io.InputStream in;

  private int uncompressedBlockLength;

  private byte[] uncompressedChunk;

  private int uncompressedChunkOffset;

  private int uncompressedChunkLength;

  private byte[] compressed;

  public io.airlift.compress.snappy.HadoopSnappyInputStream(java.io.InputStream) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #3                  // Method org/apache/hadoop/io/compress/CompressionInputStream."<init>":(Ljava/io/InputStream;)V
       5: aload_0
       6: new           #9                  // class io/airlift/compress/snappy/SnappyDecompressor
       9: dup
      10: invokespecial #11                 // Method io/airlift/compress/snappy/SnappyDecompressor."<init>":()V
      13: putfield      #14                 // Field decompressor:Lio/airlift/compress/snappy/SnappyDecompressor;
      16: aload_0
      17: iconst_0
      18: newarray       byte
      20: putfield      #20                 // Field uncompressedChunk:[B
      23: aload_0
      24: iconst_0
      25: newarray       byte
      27: putfield      #24                 // Field compressed:[B
      30: aload_0
      31: aload_1
      32: putfield      #27                 // Field in:Ljava/io/InputStream;
      35: return

  public int read() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #31                 // Field uncompressedChunkOffset:I
       4: aload_0
       5: getfield      #35                 // Field uncompressedChunkLength:I
       8: if_icmplt     35
      11: aload_0
      12: aload_0
      13: getfield      #20                 // Field uncompressedChunk:[B
      16: iconst_0
      17: aload_0
      18: getfield      #20                 // Field uncompressedChunk:[B
      21: arraylength
      22: invokespecial #38                 // Method readNextChunk:([BII)Z
      25: pop
      26: aload_0
      27: getfield      #35                 // Field uncompressedChunkLength:I
      30: ifne          35
      33: iconst_m1
      34: ireturn
      35: aload_0
      36: getfield      #20                 // Field uncompressedChunk:[B
      39: aload_0
      40: dup
      41: getfield      #31                 // Field uncompressedChunkOffset:I
      44: dup_x1
      45: iconst_1
      46: iadd
      47: putfield      #31                 // Field uncompressedChunkOffset:I
      50: baload
      51: sipush        255
      54: iand
      55: ireturn

  public int read(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #31                 // Field uncompressedChunkOffset:I
       4: aload_0
       5: getfield      #35                 // Field uncompressedChunkLength:I
       8: if_icmplt     52
      11: aload_0
      12: aload_1
      13: iload_2
      14: iload_3
      15: invokespecial #38                 // Method readNextChunk:([BII)Z
      18: istore        4
      20: aload_0
      21: getfield      #35                 // Field uncompressedChunkLength:I
      24: ifne          29
      27: iconst_m1
      28: ireturn
      29: iload         4
      31: ifeq          52
      34: aload_0
      35: dup
      36: getfield      #31                 // Field uncompressedChunkOffset:I
      39: aload_0
      40: getfield      #35                 // Field uncompressedChunkLength:I
      43: iadd
      44: putfield      #31                 // Field uncompressedChunkOffset:I
      47: aload_0
      48: getfield      #35                 // Field uncompressedChunkLength:I
      51: ireturn
      52: iload_3
      53: aload_0
      54: getfield      #35                 // Field uncompressedChunkLength:I
      57: aload_0
      58: getfield      #31                 // Field uncompressedChunkOffset:I
      61: isub
      62: invokestatic  #42                 // Method java/lang/Math.min:(II)I
      65: istore        4
      67: aload_0
      68: getfield      #20                 // Field uncompressedChunk:[B
      71: aload_0
      72: getfield      #31                 // Field uncompressedChunkOffset:I
      75: aload_1
      76: iload_2
      77: iload         4
      79: invokestatic  #48                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      82: aload_0
      83: dup
      84: getfield      #31                 // Field uncompressedChunkOffset:I
      87: iload         4
      89: iadd
      90: putfield      #31                 // Field uncompressedChunkOffset:I
      93: iload         4
      95: ireturn

  public void resetState() throws java.io.IOException;
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #54                 // Field uncompressedBlockLength:I
       5: aload_0
       6: iconst_0
       7: putfield      #31                 // Field uncompressedChunkOffset:I
      10: aload_0
      11: iconst_0
      12: putfield      #35                 // Field uncompressedChunkLength:I
      15: return

  private boolean readNextChunk(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: dup
       2: getfield      #54                 // Field uncompressedBlockLength:I
       5: aload_0
       6: getfield      #31                 // Field uncompressedChunkOffset:I
       9: isub
      10: putfield      #54                 // Field uncompressedBlockLength:I
      13: aload_0
      14: iconst_0
      15: putfield      #31                 // Field uncompressedChunkOffset:I
      18: aload_0
      19: iconst_0
      20: putfield      #35                 // Field uncompressedChunkLength:I
      23: aload_0
      24: getfield      #54                 // Field uncompressedBlockLength:I
      27: ifne          53
      30: aload_0
      31: aload_0
      32: invokespecial #57                 // Method readBigEndianInt:()I
      35: putfield      #54                 // Field uncompressedBlockLength:I
      38: aload_0
      39: getfield      #54                 // Field uncompressedBlockLength:I
      42: iconst_m1
      43: if_icmpne     23
      46: aload_0
      47: iconst_0
      48: putfield      #54                 // Field uncompressedBlockLength:I
      51: iconst_0
      52: ireturn
      53: aload_0
      54: invokespecial #57                 // Method readBigEndianInt:()I
      57: istore        4
      59: iload         4
      61: iconst_m1
      62: if_icmpne     67
      65: iconst_0
      66: ireturn
      67: aload_0
      68: getfield      #24                 // Field compressed:[B
      71: arraylength
      72: iload         4
      74: if_icmpge     88
      77: aload_0
      78: iload         4
      80: bipush        8
      82: iadd
      83: newarray       byte
      85: putfield      #24                 // Field compressed:[B
      88: aload_0
      89: iload         4
      91: aload_0
      92: getfield      #24                 // Field compressed:[B
      95: invokespecial #61                 // Method readInput:(I[B)V
      98: aload_0
      99: aload_0
     100: getfield      #24                 // Field compressed:[B
     103: iconst_0
     104: invokestatic  #65                 // Method io/airlift/compress/snappy/SnappyDecompressor.getUncompressedLength:([BI)I
     107: putfield      #35                 // Field uncompressedChunkLength:I
     110: aload_0
     111: getfield      #35                 // Field uncompressedChunkLength:I
     114: aload_0
     115: getfield      #54                 // Field uncompressedBlockLength:I
     118: if_icmple     131
     121: new           #69                 // class java/io/IOException
     124: dup
     125: ldc           #71                 // String Chunk uncompressed size is greater than block size
     127: invokespecial #73                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     130: athrow
     131: iconst_1
     132: istore        5
     134: aload_0
     135: getfield      #35                 // Field uncompressedChunkLength:I
     138: iload_3
     139: if_icmple     183
     142: aload_0
     143: getfield      #20                 // Field uncompressedChunk:[B
     146: arraylength
     147: aload_0
     148: getfield      #35                 // Field uncompressedChunkLength:I
     151: if_icmpge     167
     154: aload_0
     155: aload_0
     156: getfield      #35                 // Field uncompressedChunkLength:I
     159: bipush        8
     161: iadd
     162: newarray       byte
     164: putfield      #20                 // Field uncompressedChunk:[B
     167: iconst_0
     168: istore        5
     170: aload_0
     171: getfield      #20                 // Field uncompressedChunk:[B
     174: astore_1
     175: iconst_0
     176: istore_2
     177: aload_0
     178: getfield      #20                 // Field uncompressedChunk:[B
     181: arraylength
     182: istore_3
     183: aload_0
     184: getfield      #14                 // Field decompressor:Lio/airlift/compress/snappy/SnappyDecompressor;
     187: aload_0
     188: getfield      #24                 // Field compressed:[B
     191: iconst_0
     192: iload         4
     194: aload_1
     195: iload_2
     196: iload_3
     197: invokevirtual #76                 // Method io/airlift/compress/snappy/SnappyDecompressor.decompress:([BII[BII)I
     200: istore        6
     202: aload_0
     203: getfield      #35                 // Field uncompressedChunkLength:I
     206: iload         6
     208: if_icmpeq     256
     211: new           #69                 // class java/io/IOException
     214: dup
     215: new           #80                 // class java/lang/StringBuilder
     218: dup
     219: invokespecial #82                 // Method java/lang/StringBuilder."<init>":()V
     222: ldc           #83                 // String Expected to read
     224: invokevirtual #85                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     227: aload_0
     228: getfield      #35                 // Field uncompressedChunkLength:I
     231: invokevirtual #89                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     234: ldc           #92                 // String  bytes, but data only contained
     236: invokevirtual #85                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     239: iload         6
     241: invokevirtual #89                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     244: ldc           #94                 // String  bytes
     246: invokevirtual #85                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     249: invokevirtual #96                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     252: invokespecial #73                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     255: athrow
     256: iload         5
     258: ireturn

  private void readInput(int, byte[]) throws java.io.IOException;
    Code:
       0: iconst_0
       1: istore_3
       2: iload_3
       3: iload_1
       4: if_icmpge     45
       7: aload_0
       8: getfield      #27                 // Field in:Ljava/io/InputStream;
      11: aload_2
      12: iload_3
      13: iload_1
      14: iload_3
      15: isub
      16: invokevirtual #100                // Method java/io/InputStream.read:([BII)I
      19: istore        4
      21: iload         4
      23: iconst_m1
      24: if_icmpne     37
      27: new           #106                // class java/io/EOFException
      30: dup
      31: ldc           #108                // String encountered EOF while reading block data
      33: invokespecial #110                // Method java/io/EOFException."<init>":(Ljava/lang/String;)V
      36: athrow
      37: iload_3
      38: iload         4
      40: iadd
      41: istore_3
      42: goto          2
      45: return

  private int readBigEndianInt() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #27                 // Field in:Ljava/io/InputStream;
       4: invokevirtual #111                // Method java/io/InputStream.read:()I
       7: istore_1
       8: iload_1
       9: ifge          14
      12: iconst_m1
      13: ireturn
      14: aload_0
      15: getfield      #27                 // Field in:Ljava/io/InputStream;
      18: invokevirtual #111                // Method java/io/InputStream.read:()I
      21: istore_2
      22: aload_0
      23: getfield      #27                 // Field in:Ljava/io/InputStream;
      26: invokevirtual #111                // Method java/io/InputStream.read:()I
      29: istore_3
      30: aload_0
      31: getfield      #27                 // Field in:Ljava/io/InputStream;
      34: invokevirtual #111                // Method java/io/InputStream.read:()I
      37: istore        4
      39: iload_2
      40: iload_3
      41: ior
      42: iload         4
      44: ior
      45: ifge          58
      48: new           #69                 // class java/io/IOException
      51: dup
      52: ldc           #113                // String Stream is truncated
      54: invokespecial #73                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      57: athrow
      58: iload_1
      59: bipush        24
      61: ishl
      62: iload_2
      63: bipush        16
      65: ishl
      66: iadd
      67: iload_3
      68: bipush        8
      70: ishl
      71: iadd
      72: iload         4
      74: iadd
      75: ireturn
}
