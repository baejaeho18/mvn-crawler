Compiled from "WatcherModeManager.java"
class org.apache.zookeeper.server.watch.WatcherModeManager {
  private final java.util.Map<org.apache.zookeeper.server.watch.WatcherModeManager$Key, org.apache.zookeeper.server.watch.WatcherMode> watcherModes;

  private final java.util.concurrent.atomic.AtomicInteger recursiveQty;

  org.apache.zookeeper.server.watch.WatcherModeManager();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/ConcurrentHashMap
       8: dup
       9: invokespecial #3                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      12: putfield      #4                  // Field watcherModes:Ljava/util/Map;
      15: aload_0
      16: new           #5                  // class java/util/concurrent/atomic/AtomicInteger
      19: dup
      20: iconst_0
      21: invokespecial #6                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":(I)V
      24: putfield      #7                  // Field recursiveQty:Ljava/util/concurrent/atomic/AtomicInteger;
      27: return

  java.util.Map<org.apache.zookeeper.server.watch.WatcherModeManager$Key, org.apache.zookeeper.server.watch.WatcherMode> getWatcherModes();
    Code:
       0: aload_0
       1: getfield      #4                  // Field watcherModes:Ljava/util/Map;
       4: areturn

  void setWatcherMode(org.apache.zookeeper.Watcher, java.lang.String, org.apache.zookeeper.server.watch.WatcherMode);
    Code:
       0: aload_3
       1: getstatic     #8                  // Field org/apache/zookeeper/server/watch/WatcherMode.DEFAULT_WATCHER_MODE:Lorg/apache/zookeeper/server/watch/WatcherMode;
       4: if_acmpne     16
       7: aload_0
       8: aload_1
       9: aload_2
      10: invokevirtual #9                  // Method removeWatcher:(Lorg/apache/zookeeper/Watcher;Ljava/lang/String;)V
      13: goto          43
      16: aload_0
      17: aload_0
      18: getfield      #4                  // Field watcherModes:Ljava/util/Map;
      21: new           #10                 // class org/apache/zookeeper/server/watch/WatcherModeManager$Key
      24: dup
      25: aload_1
      26: aload_2
      27: invokespecial #11                 // Method org/apache/zookeeper/server/watch/WatcherModeManager$Key."<init>":(Lorg/apache/zookeeper/Watcher;Ljava/lang/String;)V
      30: aload_3
      31: invokeinterface #12,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      36: checkcast     #13                 // class org/apache/zookeeper/server/watch/WatcherMode
      39: aload_3
      40: invokespecial #14                 // Method adjustRecursiveQty:(Lorg/apache/zookeeper/server/watch/WatcherMode;Lorg/apache/zookeeper/server/watch/WatcherMode;)V
      43: return

  org.apache.zookeeper.server.watch.WatcherMode getWatcherMode(org.apache.zookeeper.Watcher, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #4                  // Field watcherModes:Ljava/util/Map;
       4: new           #10                 // class org/apache/zookeeper/server/watch/WatcherModeManager$Key
       7: dup
       8: aload_1
       9: aload_2
      10: invokespecial #11                 // Method org/apache/zookeeper/server/watch/WatcherModeManager$Key."<init>":(Lorg/apache/zookeeper/Watcher;Ljava/lang/String;)V
      13: getstatic     #8                  // Field org/apache/zookeeper/server/watch/WatcherMode.DEFAULT_WATCHER_MODE:Lorg/apache/zookeeper/server/watch/WatcherMode;
      16: invokeinterface #15,  3           // InterfaceMethod java/util/Map.getOrDefault:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      21: checkcast     #13                 // class org/apache/zookeeper/server/watch/WatcherMode
      24: areturn

  void removeWatcher(org.apache.zookeeper.Watcher, java.lang.String);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #4                  // Field watcherModes:Ljava/util/Map;
       5: new           #10                 // class org/apache/zookeeper/server/watch/WatcherModeManager$Key
       8: dup
       9: aload_1
      10: aload_2
      11: invokespecial #11                 // Method org/apache/zookeeper/server/watch/WatcherModeManager$Key."<init>":(Lorg/apache/zookeeper/Watcher;Ljava/lang/String;)V
      14: invokeinterface #16,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      19: checkcast     #13                 // class org/apache/zookeeper/server/watch/WatcherMode
      22: getstatic     #8                  // Field org/apache/zookeeper/server/watch/WatcherMode.DEFAULT_WATCHER_MODE:Lorg/apache/zookeeper/server/watch/WatcherMode;
      25: invokespecial #14                 // Method adjustRecursiveQty:(Lorg/apache/zookeeper/server/watch/WatcherMode;Lorg/apache/zookeeper/server/watch/WatcherMode;)V
      28: return

  int getRecursiveQty();
    Code:
       0: aload_0
       1: getfield      #7                  // Field recursiveQty:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       7: ireturn

  private void adjustRecursiveQty(org.apache.zookeeper.server.watch.WatcherMode, org.apache.zookeeper.server.watch.WatcherMode);
    Code:
       0: aload_1
       1: ifnonnull     8
       4: getstatic     #8                  // Field org/apache/zookeeper/server/watch/WatcherMode.DEFAULT_WATCHER_MODE:Lorg/apache/zookeeper/server/watch/WatcherMode;
       7: astore_1
       8: aload_1
       9: invokevirtual #18                 // Method org/apache/zookeeper/server/watch/WatcherMode.isRecursive:()Z
      12: aload_2
      13: invokevirtual #18                 // Method org/apache/zookeeper/server/watch/WatcherMode.isRecursive:()Z
      16: if_icmpeq     45
      19: aload_2
      20: invokevirtual #18                 // Method org/apache/zookeeper/server/watch/WatcherMode.isRecursive:()Z
      23: ifeq          37
      26: aload_0
      27: getfield      #7                  // Field recursiveQty:Ljava/util/concurrent/atomic/AtomicInteger;
      30: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
      33: pop
      34: goto          45
      37: aload_0
      38: getfield      #7                  // Field recursiveQty:Ljava/util/concurrent/atomic/AtomicInteger;
      41: invokevirtual #20                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
      44: pop
      45: return
}
