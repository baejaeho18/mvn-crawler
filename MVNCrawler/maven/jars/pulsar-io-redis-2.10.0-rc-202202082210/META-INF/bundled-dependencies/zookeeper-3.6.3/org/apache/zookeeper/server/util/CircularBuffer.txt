Compiled from "CircularBuffer.java"
public class org.apache.zookeeper.server.util.CircularBuffer<T> {
  private final T[] buffer;

  private final int capacity;

  private int oldest;

  private java.util.concurrent.atomic.AtomicInteger numberOfElements;

  public org.apache.zookeeper.server.util.CircularBuffer(java.lang.Class<T>, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/atomic/AtomicInteger
       8: dup
       9: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      12: putfield      #4                  // Field numberOfElements:Ljava/util/concurrent/atomic/AtomicInteger;
      15: iload_2
      16: ifgt          29
      19: new           #5                  // class java/lang/IllegalArgumentException
      22: dup
      23: ldc           #6                  // String CircularBuffer capacity should be greater than 0
      25: invokespecial #7                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      28: athrow
      29: aload_0
      30: aload_1
      31: iload_2
      32: invokestatic  #8                  // Method java/lang/reflect/Array.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;
      35: checkcast     #9                  // class "[Ljava/lang/Object;"
      38: checkcast     #9                  // class "[Ljava/lang/Object;"
      41: putfield      #10                 // Field buffer:[Ljava/lang/Object;
      44: aload_0
      45: iload_2
      46: putfield      #11                 // Field capacity:I
      49: return

  public synchronized void write(T);
    Code:
       0: aload_0
       1: getfield      #4                  // Field numberOfElements:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
       7: istore_2
       8: iload_2
       9: aload_0
      10: getfield      #11                 // Field capacity:I
      13: if_icmple     57
      16: aload_0
      17: getfield      #10                 // Field buffer:[Ljava/lang/Object;
      20: aload_0
      21: getfield      #13                 // Field oldest:I
      24: aload_1
      25: aastore
      26: aload_0
      27: aload_0
      28: dup
      29: getfield      #13                 // Field oldest:I
      32: iconst_1
      33: iadd
      34: dup_x1
      35: putfield      #13                 // Field oldest:I
      38: aload_0
      39: getfield      #11                 // Field capacity:I
      42: irem
      43: putfield      #13                 // Field oldest:I
      46: aload_0
      47: getfield      #4                  // Field numberOfElements:Ljava/util/concurrent/atomic/AtomicInteger;
      50: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
      53: pop
      54: goto          84
      57: aload_0
      58: getfield      #13                 // Field oldest:I
      61: aload_0
      62: getfield      #4                  // Field numberOfElements:Ljava/util/concurrent/atomic/AtomicInteger;
      65: invokevirtual #15                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      68: iadd
      69: iconst_1
      70: isub
      71: aload_0
      72: getfield      #11                 // Field capacity:I
      75: irem
      76: istore_3
      77: aload_0
      78: getfield      #10                 // Field buffer:[Ljava/lang/Object;
      81: iload_3
      82: aload_1
      83: aastore
      84: return

  public synchronized T take();
    Code:
       0: aload_0
       1: getfield      #4                  // Field numberOfElements:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
       7: istore_1
       8: iload_1
       9: ifge          22
      12: aload_0
      13: getfield      #4                  // Field numberOfElements:Ljava/util/concurrent/atomic/AtomicInteger;
      16: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
      19: pop
      20: aconst_null
      21: areturn
      22: aload_0
      23: getfield      #10                 // Field buffer:[Ljava/lang/Object;
      26: aload_0
      27: getfield      #13                 // Field oldest:I
      30: aaload
      31: astore_2
      32: aload_0
      33: aload_0
      34: dup
      35: getfield      #13                 // Field oldest:I
      38: iconst_1
      39: iadd
      40: dup_x1
      41: putfield      #13                 // Field oldest:I
      44: aload_0
      45: getfield      #11                 // Field capacity:I
      48: irem
      49: putfield      #13                 // Field oldest:I
      52: aload_2
      53: areturn

  public synchronized T peek();
    Code:
       0: aload_0
       1: getfield      #4                  // Field numberOfElements:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #15                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       7: ifgt          12
      10: aconst_null
      11: areturn
      12: aload_0
      13: getfield      #10                 // Field buffer:[Ljava/lang/Object;
      16: aload_0
      17: getfield      #13                 // Field oldest:I
      20: aaload
      21: areturn

  public int size();
    Code:
       0: aload_0
       1: getfield      #4                  // Field numberOfElements:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #15                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       7: ireturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #4                  // Field numberOfElements:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #15                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       7: ifgt          14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public boolean isFull();
    Code:
       0: aload_0
       1: getfield      #4                  // Field numberOfElements:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #15                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       7: aload_0
       8: getfield      #11                 // Field capacity:I
      11: if_icmplt     18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn

  public synchronized void reset();
    Code:
       0: aload_0
       1: getfield      #4                  // Field numberOfElements:Ljava/util/concurrent/atomic/AtomicInteger;
       4: iconst_0
       5: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicInteger.set:(I)V
       8: return
}
