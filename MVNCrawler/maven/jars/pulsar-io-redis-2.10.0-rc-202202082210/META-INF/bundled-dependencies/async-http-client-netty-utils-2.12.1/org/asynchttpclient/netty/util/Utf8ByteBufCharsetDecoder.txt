Compiled from "Utf8ByteBufCharsetDecoder.java"
public class org.asynchttpclient.netty.util.Utf8ByteBufCharsetDecoder {
  private static final int INITIAL_CHAR_BUFFER_SIZE;

  private static final int UTF_8_MAX_BYTES_PER_CHAR;

  private static final char INVALID_CHAR_REPLACEMENT;

  private static final java.lang.ThreadLocal<org.asynchttpclient.netty.util.Utf8ByteBufCharsetDecoder> POOL;

  private final java.nio.charset.CharsetDecoder decoder;

  protected java.nio.CharBuffer charBuffer;

  private java.nio.ByteBuffer splitCharBuffer;

  private int totalSize;

  private int totalNioBuffers;

  private boolean withoutArray;

  public org.asynchttpclient.netty.util.Utf8ByteBufCharsetDecoder();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: getstatic     #2                  // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
       8: invokevirtual #3                  // Method java/nio/charset/Charset.newDecoder:()Ljava/nio/charset/CharsetDecoder;
      11: invokestatic  #4                  // Method configureReplaceCodingErrorActions:(Ljava/nio/charset/CharsetDecoder;)Ljava/nio/charset/CharsetDecoder;
      14: putfield      #5                  // Field decoder:Ljava/nio/charset/CharsetDecoder;
      17: aload_0
      18: aload_0
      19: sipush        1024
      22: invokevirtual #7                  // Method allocateCharBuffer:(I)Ljava/nio/CharBuffer;
      25: putfield      #8                  // Field charBuffer:Ljava/nio/CharBuffer;
      28: aload_0
      29: iconst_4
      30: invokestatic  #9                  // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;
      33: putfield      #10                 // Field splitCharBuffer:Ljava/nio/ByteBuffer;
      36: aload_0
      37: iconst_0
      38: putfield      #11                 // Field totalSize:I
      41: aload_0
      42: iconst_0
      43: putfield      #12                 // Field totalNioBuffers:I
      46: aload_0
      47: iconst_0
      48: putfield      #13                 // Field withoutArray:Z
      51: return

  private static org.asynchttpclient.netty.util.Utf8ByteBufCharsetDecoder pooledDecoder();
    Code:
       0: getstatic     #14                 // Field POOL:Ljava/lang/ThreadLocal;
       3: invokevirtual #15                 // Method java/lang/ThreadLocal.get:()Ljava/lang/Object;
       6: checkcast     #6                  // class org/asynchttpclient/netty/util/Utf8ByteBufCharsetDecoder
       9: astore_0
      10: aload_0
      11: invokevirtual #16                 // Method reset:()V
      14: aload_0
      15: areturn

  public static java.lang.String decodeUtf8(io.netty.buffer.ByteBuf);
    Code:
       0: invokestatic  #17                 // Method pooledDecoder:()Lorg/asynchttpclient/netty/util/Utf8ByteBufCharsetDecoder;
       3: aload_0
       4: invokevirtual #18                 // Method decode:(Lio/netty/buffer/ByteBuf;)Ljava/lang/String;
       7: areturn

  public static java.lang.String decodeUtf8(io.netty.buffer.ByteBuf...);
    Code:
       0: invokestatic  #17                 // Method pooledDecoder:()Lorg/asynchttpclient/netty/util/Utf8ByteBufCharsetDecoder;
       3: aload_0
       4: invokevirtual #19                 // Method decode:([Lio/netty/buffer/ByteBuf;)Ljava/lang/String;
       7: areturn

  public static char[] decodeUtf8Chars(io.netty.buffer.ByteBuf);
    Code:
       0: invokestatic  #17                 // Method pooledDecoder:()Lorg/asynchttpclient/netty/util/Utf8ByteBufCharsetDecoder;
       3: aload_0
       4: invokevirtual #20                 // Method decodeChars:(Lio/netty/buffer/ByteBuf;)[C
       7: areturn

  public static char[] decodeUtf8Chars(io.netty.buffer.ByteBuf...);
    Code:
       0: invokestatic  #17                 // Method pooledDecoder:()Lorg/asynchttpclient/netty/util/Utf8ByteBufCharsetDecoder;
       3: aload_0
       4: invokevirtual #21                 // Method decodeChars:([Lio/netty/buffer/ByteBuf;)[C
       7: areturn

  private static java.nio.charset.CharsetDecoder configureReplaceCodingErrorActions(java.nio.charset.CharsetDecoder);
    Code:
       0: aload_0
       1: getstatic     #22                 // Field java/nio/charset/CodingErrorAction.REPLACE:Ljava/nio/charset/CodingErrorAction;
       4: invokevirtual #23                 // Method java/nio/charset/CharsetDecoder.onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;
       7: getstatic     #22                 // Field java/nio/charset/CodingErrorAction.REPLACE:Ljava/nio/charset/CodingErrorAction;
      10: invokevirtual #24                 // Method java/nio/charset/CharsetDecoder.onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetDecoder;
      13: areturn

  private static int moreThanOneByteCharSize(byte);
    Code:
       0: iload_0
       1: iconst_5
       2: ishr
       3: bipush        -2
       5: if_icmpne     17
       8: iload_0
       9: bipush        30
      11: iand
      12: ifeq          17
      15: iconst_2
      16: ireturn
      17: iload_0
      18: iconst_4
      19: ishr
      20: bipush        -2
      22: if_icmpne     27
      25: iconst_3
      26: ireturn
      27: iload_0
      28: iconst_3
      29: ishr
      30: bipush        -2
      32: if_icmpne     37
      35: iconst_4
      36: ireturn
      37: iconst_m1
      38: ireturn

  private static boolean isContinuation(byte);
    Code:
       0: iload_0
       1: bipush        6
       3: ishr
       4: bipush        -2
       6: if_icmpne     13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  protected java.nio.CharBuffer allocateCharBuffer(int);
    Code:
       0: iload_1
       1: invokestatic  #25                 // Method java/nio/CharBuffer.allocate:(I)Ljava/nio/CharBuffer;
       4: areturn

  protected void ensureCapacity(int);
    Code:
       0: aload_0
       1: getfield      #8                  // Field charBuffer:Ljava/nio/CharBuffer;
       4: invokevirtual #26                 // Method java/nio/CharBuffer.position:()I
       7: ifne          33
      10: aload_0
      11: getfield      #8                  // Field charBuffer:Ljava/nio/CharBuffer;
      14: invokevirtual #27                 // Method java/nio/CharBuffer.capacity:()I
      17: iload_1
      18: if_icmpge     80
      21: aload_0
      22: aload_0
      23: iload_1
      24: invokevirtual #7                  // Method allocateCharBuffer:(I)Ljava/nio/CharBuffer;
      27: putfield      #8                  // Field charBuffer:Ljava/nio/CharBuffer;
      30: goto          80
      33: aload_0
      34: getfield      #8                  // Field charBuffer:Ljava/nio/CharBuffer;
      37: invokevirtual #28                 // Method java/nio/CharBuffer.remaining:()I
      40: iload_1
      41: if_icmpge     80
      44: aload_0
      45: aload_0
      46: getfield      #8                  // Field charBuffer:Ljava/nio/CharBuffer;
      49: invokevirtual #26                 // Method java/nio/CharBuffer.position:()I
      52: iload_1
      53: iadd
      54: invokevirtual #7                  // Method allocateCharBuffer:(I)Ljava/nio/CharBuffer;
      57: astore_2
      58: aload_0
      59: getfield      #8                  // Field charBuffer:Ljava/nio/CharBuffer;
      62: invokevirtual #29                 // Method java/nio/CharBuffer.flip:()Ljava/nio/Buffer;
      65: pop
      66: aload_2
      67: aload_0
      68: getfield      #8                  // Field charBuffer:Ljava/nio/CharBuffer;
      71: invokevirtual #30                 // Method java/nio/CharBuffer.put:(Ljava/nio/CharBuffer;)Ljava/nio/CharBuffer;
      74: pop
      75: aload_0
      76: aload_2
      77: putfield      #8                  // Field charBuffer:Ljava/nio/CharBuffer;
      80: return

  public void reset();
    Code:
       0: aload_0
       1: getfield      #5                  // Field decoder:Ljava/nio/charset/CharsetDecoder;
       4: invokevirtual #31                 // Method java/nio/charset/CharsetDecoder.reset:()Ljava/nio/charset/CharsetDecoder;
       7: invokestatic  #4                  // Method configureReplaceCodingErrorActions:(Ljava/nio/charset/CharsetDecoder;)Ljava/nio/charset/CharsetDecoder;
      10: pop
      11: aload_0
      12: getfield      #8                  // Field charBuffer:Ljava/nio/CharBuffer;
      15: invokevirtual #32                 // Method java/nio/CharBuffer.clear:()Ljava/nio/Buffer;
      18: pop
      19: aload_0
      20: getfield      #10                 // Field splitCharBuffer:Ljava/nio/ByteBuffer;
      23: invokevirtual #33                 // Method java/nio/ByteBuffer.clear:()Ljava/nio/Buffer;
      26: pop
      27: aload_0
      28: iconst_0
      29: putfield      #11                 // Field totalSize:I
      32: aload_0
      33: iconst_0
      34: putfield      #12                 // Field totalNioBuffers:I
      37: aload_0
      38: iconst_0
      39: putfield      #13                 // Field withoutArray:Z
      42: return

  private boolean stashContinuationBytes(java.nio.ByteBuffer, int);
    Code:
       0: iconst_0
       1: istore_3
       2: iload_3
       3: iload_2
       4: if_icmpge     71
       7: aload_1
       8: invokevirtual #34                 // Method java/nio/ByteBuffer.get:()B
      11: istore        4
      13: iload         4
      15: invokestatic  #35                 // Method isContinuation:(B)Z
      18: ifeq          34
      21: aload_0
      22: getfield      #10                 // Field splitCharBuffer:Ljava/nio/ByteBuffer;
      25: iload         4
      27: invokevirtual #36                 // Method java/nio/ByteBuffer.put:(B)Ljava/nio/ByteBuffer;
      30: pop
      31: goto          65
      34: aload_1
      35: aload_1
      36: invokevirtual #37                 // Method java/nio/ByteBuffer.position:()I
      39: iconst_1
      40: isub
      41: invokevirtual #38                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      44: pop
      45: aload_0
      46: getfield      #8                  // Field charBuffer:Ljava/nio/CharBuffer;
      49: ldc           #39                 // int 65533
      51: invokevirtual #40                 // Method java/nio/CharBuffer.append:(C)Ljava/nio/CharBuffer;
      54: pop
      55: aload_0
      56: getfield      #10                 // Field splitCharBuffer:Ljava/nio/ByteBuffer;
      59: invokevirtual #33                 // Method java/nio/ByteBuffer.clear:()Ljava/nio/Buffer;
      62: pop
      63: iconst_0
      64: ireturn
      65: iinc          3, 1
      68: goto          2
      71: iconst_1
      72: ireturn

  private void handlePendingSplitCharBuffer(java.nio.ByteBuffer, boolean);
    Code:
       0: aload_0
       1: getfield      #10                 // Field splitCharBuffer:Ljava/nio/ByteBuffer;
       4: iconst_0
       5: invokevirtual #41                 // Method java/nio/ByteBuffer.get:(I)B
       8: invokestatic  #42                 // Method moreThanOneByteCharSize:(B)I
      11: istore_3
      12: iload_3
      13: ifle          127
      16: iload_3
      17: aload_0
      18: getfield      #10                 // Field splitCharBuffer:Ljava/nio/ByteBuffer;
      21: invokevirtual #37                 // Method java/nio/ByteBuffer.position:()I
      24: isub
      25: istore        4
      27: aload_1
      28: invokevirtual #43                 // Method java/nio/ByteBuffer.remaining:()I
      31: iload         4
      33: if_icmpge     66
      36: iload_2
      37: ifeq          53
      40: aload_0
      41: getfield      #8                  // Field charBuffer:Ljava/nio/CharBuffer;
      44: ldc           #39                 // int 65533
      46: invokevirtual #40                 // Method java/nio/CharBuffer.append:(C)Ljava/nio/CharBuffer;
      49: pop
      50: goto          124
      53: aload_0
      54: aload_1
      55: aload_1
      56: invokevirtual #43                 // Method java/nio/ByteBuffer.remaining:()I
      59: invokespecial #44                 // Method stashContinuationBytes:(Ljava/nio/ByteBuffer;I)Z
      62: pop
      63: goto          124
      66: aload_0
      67: aload_1
      68: iload         4
      70: invokespecial #44                 // Method stashContinuationBytes:(Ljava/nio/ByteBuffer;I)Z
      73: ifeq          124
      76: aload_0
      77: getfield      #10                 // Field splitCharBuffer:Ljava/nio/ByteBuffer;
      80: invokevirtual #45                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;
      83: pop
      84: aload_0
      85: getfield      #5                  // Field decoder:Ljava/nio/charset/CharsetDecoder;
      88: aload_0
      89: getfield      #10                 // Field splitCharBuffer:Ljava/nio/ByteBuffer;
      92: aload_0
      93: getfield      #8                  // Field charBuffer:Ljava/nio/CharBuffer;
      96: iload_2
      97: ifeq          111
     100: aload_1
     101: invokevirtual #46                 // Method java/nio/ByteBuffer.hasRemaining:()Z
     104: ifne          111
     107: iconst_1
     108: goto          112
     111: iconst_0
     112: invokevirtual #47                 // Method java/nio/charset/CharsetDecoder.decode:(Ljava/nio/ByteBuffer;Ljava/nio/CharBuffer;Z)Ljava/nio/charset/CoderResult;
     115: pop
     116: aload_0
     117: getfield      #10                 // Field splitCharBuffer:Ljava/nio/ByteBuffer;
     120: invokevirtual #33                 // Method java/nio/ByteBuffer.clear:()Ljava/nio/Buffer;
     123: pop
     124: goto          145
     127: aload_0
     128: getfield      #8                  // Field charBuffer:Ljava/nio/CharBuffer;
     131: ldc           #39                 // int 65533
     133: invokevirtual #40                 // Method java/nio/CharBuffer.append:(C)Ljava/nio/CharBuffer;
     136: pop
     137: aload_0
     138: getfield      #10                 // Field splitCharBuffer:Ljava/nio/ByteBuffer;
     141: invokevirtual #33                 // Method java/nio/ByteBuffer.clear:()Ljava/nio/Buffer;
     144: pop
     145: return

  protected void decodePartial(java.nio.ByteBuffer, boolean);
    Code:
       0: aload_0
       1: getfield      #10                 // Field splitCharBuffer:Ljava/nio/ByteBuffer;
       4: invokevirtual #37                 // Method java/nio/ByteBuffer.position:()I
       7: ifle          23
      10: aload_1
      11: invokevirtual #46                 // Method java/nio/ByteBuffer.hasRemaining:()Z
      14: ifeq          23
      17: aload_0
      18: aload_1
      19: iload_2
      20: invokespecial #48                 // Method handlePendingSplitCharBuffer:(Ljava/nio/ByteBuffer;Z)V
      23: aload_1
      24: invokevirtual #46                 // Method java/nio/ByteBuffer.hasRemaining:()Z
      27: ifeq          67
      30: aload_0
      31: getfield      #5                  // Field decoder:Ljava/nio/charset/CharsetDecoder;
      34: aload_1
      35: aload_0
      36: getfield      #8                  // Field charBuffer:Ljava/nio/CharBuffer;
      39: iload_2
      40: invokevirtual #47                 // Method java/nio/charset/CharsetDecoder.decode:(Ljava/nio/ByteBuffer;Ljava/nio/CharBuffer;Z)Ljava/nio/charset/CoderResult;
      43: astore_3
      44: aload_3
      45: invokevirtual #49                 // Method java/nio/charset/CoderResult.isUnderflow:()Z
      48: ifeq          67
      51: aload_1
      52: invokevirtual #43                 // Method java/nio/ByteBuffer.remaining:()I
      55: ifle          67
      58: aload_0
      59: getfield      #10                 // Field splitCharBuffer:Ljava/nio/ByteBuffer;
      62: aload_1
      63: invokevirtual #50                 // Method java/nio/ByteBuffer.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;
      66: pop
      67: return

  private void decode(java.nio.ByteBuffer[]);
    Code:
       0: aload_1
       1: arraylength
       2: istore_2
       3: iconst_0
       4: istore_3
       5: iload_3
       6: iload_2
       7: if_icmpge     38
      10: aload_0
      11: aload_1
      12: iload_3
      13: aaload
      14: invokevirtual #51                 // Method java/nio/ByteBuffer.duplicate:()Ljava/nio/ByteBuffer;
      17: iload_3
      18: iload_2
      19: iconst_1
      20: isub
      21: if_icmpne     28
      24: iconst_1
      25: goto          29
      28: iconst_0
      29: invokevirtual #52                 // Method decodePartial:(Ljava/nio/ByteBuffer;Z)V
      32: iinc          3, 1
      35: goto          5
      38: return

  private void decodeSingleNioBuffer(java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: getfield      #5                  // Field decoder:Ljava/nio/charset/CharsetDecoder;
       4: aload_1
       5: aload_0
       6: getfield      #8                  // Field charBuffer:Ljava/nio/CharBuffer;
       9: iconst_1
      10: invokevirtual #47                 // Method java/nio/charset/CharsetDecoder.decode:(Ljava/nio/ByteBuffer;Ljava/nio/CharBuffer;Z)Ljava/nio/charset/CoderResult;
      13: pop
      14: return

  public java.lang.String decode(io.netty.buffer.ByteBuf);
    Code:
       0: aload_1
       1: invokevirtual #53                 // Method io/netty/buffer/ByteBuf.isDirect:()Z
       4: ifeq          15
       7: aload_1
       8: getstatic     #2                  // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
      11: invokevirtual #54                 // Method io/netty/buffer/ByteBuf.toString:(Ljava/nio/charset/Charset;)Ljava/lang/String;
      14: areturn
      15: aload_0
      16: aload_1
      17: invokespecial #55                 // Method decodeHeap0:(Lio/netty/buffer/ByteBuf;)V
      20: aload_0
      21: getfield      #8                  // Field charBuffer:Ljava/nio/CharBuffer;
      24: invokevirtual #56                 // Method java/nio/CharBuffer.toString:()Ljava/lang/String;
      27: areturn

  public char[] decodeChars(io.netty.buffer.ByteBuf);
    Code:
       0: aload_1
       1: invokevirtual #53                 // Method io/netty/buffer/ByteBuf.isDirect:()Z
       4: ifeq          18
       7: aload_1
       8: getstatic     #2                  // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
      11: invokevirtual #54                 // Method io/netty/buffer/ByteBuf.toString:(Ljava/nio/charset/Charset;)Ljava/lang/String;
      14: invokevirtual #57                 // Method java/lang/String.toCharArray:()[C
      17: areturn
      18: aload_0
      19: aload_1
      20: invokespecial #55                 // Method decodeHeap0:(Lio/netty/buffer/ByteBuf;)V
      23: aload_0
      24: getfield      #8                  // Field charBuffer:Ljava/nio/CharBuffer;
      27: invokestatic  #58                 // Method org/asynchttpclient/netty/util/ByteBufUtils.toCharArray:(Ljava/nio/CharBuffer;)[C
      30: areturn

  public java.lang.String decode(io.netty.buffer.ByteBuf...);
    Code:
       0: aload_1
       1: arraylength
       2: iconst_1
       3: if_icmpne     14
       6: aload_0
       7: aload_1
       8: iconst_0
       9: aaload
      10: invokevirtual #18                 // Method decode:(Lio/netty/buffer/ByteBuf;)Ljava/lang/String;
      13: areturn
      14: aload_0
      15: aload_1
      16: invokespecial #59                 // Method inspectByteBufs:([Lio/netty/buffer/ByteBuf;)V
      19: aload_0
      20: getfield      #13                 // Field withoutArray:Z
      23: ifeq          34
      26: getstatic     #2                  // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
      29: aload_1
      30: invokestatic  #60                 // Method org/asynchttpclient/netty/util/ByteBufUtils.byteBuf2String0:(Ljava/nio/charset/Charset;[Lio/netty/buffer/ByteBuf;)Ljava/lang/String;
      33: areturn
      34: aload_0
      35: aload_1
      36: invokespecial #61                 // Method decodeHeap0:([Lio/netty/buffer/ByteBuf;)V
      39: aload_0
      40: getfield      #8                  // Field charBuffer:Ljava/nio/CharBuffer;
      43: invokevirtual #56                 // Method java/nio/CharBuffer.toString:()Ljava/lang/String;
      46: areturn

  public char[] decodeChars(io.netty.buffer.ByteBuf...);
    Code:
       0: aload_1
       1: arraylength
       2: iconst_1
       3: if_icmpne     14
       6: aload_0
       7: aload_1
       8: iconst_0
       9: aaload
      10: invokevirtual #20                 // Method decodeChars:(Lio/netty/buffer/ByteBuf;)[C
      13: areturn
      14: aload_0
      15: aload_1
      16: invokespecial #59                 // Method inspectByteBufs:([Lio/netty/buffer/ByteBuf;)V
      19: aload_0
      20: getfield      #13                 // Field withoutArray:Z
      23: ifeq          34
      26: getstatic     #2                  // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
      29: aload_1
      30: invokestatic  #62                 // Method org/asynchttpclient/netty/util/ByteBufUtils.byteBuf2Chars0:(Ljava/nio/charset/Charset;[Lio/netty/buffer/ByteBuf;)[C
      33: areturn
      34: aload_0
      35: aload_1
      36: invokespecial #61                 // Method decodeHeap0:([Lio/netty/buffer/ByteBuf;)V
      39: aload_0
      40: getfield      #8                  // Field charBuffer:Ljava/nio/CharBuffer;
      43: invokestatic  #58                 // Method org/asynchttpclient/netty/util/ByteBufUtils.toCharArray:(Ljava/nio/CharBuffer;)[C
      46: areturn

  private void decodeHeap0(io.netty.buffer.ByteBuf);
    Code:
       0: aload_1
       1: invokevirtual #63                 // Method io/netty/buffer/ByteBuf.readableBytes:()I
       4: istore_2
       5: aload_0
       6: iload_2
       7: invokevirtual #64                 // Method ensureCapacity:(I)V
      10: aload_1
      11: invokevirtual #65                 // Method io/netty/buffer/ByteBuf.nioBufferCount:()I
      14: iconst_1
      15: if_icmpne     37
      18: aload_0
      19: aload_1
      20: aload_1
      21: invokevirtual #66                 // Method io/netty/buffer/ByteBuf.readerIndex:()I
      24: iload_2
      25: invokevirtual #67                 // Method io/netty/buffer/ByteBuf.internalNioBuffer:(II)Ljava/nio/ByteBuffer;
      28: invokevirtual #51                 // Method java/nio/ByteBuffer.duplicate:()Ljava/nio/ByteBuffer;
      31: invokespecial #68                 // Method decodeSingleNioBuffer:(Ljava/nio/ByteBuffer;)V
      34: goto          45
      37: aload_0
      38: aload_1
      39: invokevirtual #69                 // Method io/netty/buffer/ByteBuf.nioBuffers:()[Ljava/nio/ByteBuffer;
      42: invokespecial #70                 // Method decode:([Ljava/nio/ByteBuffer;)V
      45: aload_0
      46: getfield      #8                  // Field charBuffer:Ljava/nio/CharBuffer;
      49: invokevirtual #29                 // Method java/nio/CharBuffer.flip:()Ljava/nio/Buffer;
      52: pop
      53: return

  private void decodeHeap0(io.netty.buffer.ByteBuf[]);
    Code:
       0: aload_0
       1: getfield      #12                 // Field totalNioBuffers:I
       4: anewarray     #71                 // class java/nio/ByteBuffer
       7: astore_2
       8: iconst_0
       9: istore_3
      10: aload_1
      11: astore        4
      13: aload         4
      15: arraylength
      16: istore        5
      18: iconst_0
      19: istore        6
      21: iload         6
      23: iload         5
      25: if_icmpge     84
      28: aload         4
      30: iload         6
      32: aaload
      33: astore        7
      35: aload         7
      37: invokevirtual #69                 // Method io/netty/buffer/ByteBuf.nioBuffers:()[Ljava/nio/ByteBuffer;
      40: astore        8
      42: aload         8
      44: arraylength
      45: istore        9
      47: iconst_0
      48: istore        10
      50: iload         10
      52: iload         9
      54: if_icmpge     78
      57: aload         8
      59: iload         10
      61: aaload
      62: astore        11
      64: aload_2
      65: iload_3
      66: iinc          3, 1
      69: aload         11
      71: aastore
      72: iinc          10, 1
      75: goto          50
      78: iinc          6, 1
      81: goto          21
      84: aload_0
      85: aload_0
      86: getfield      #11                 // Field totalSize:I
      89: invokevirtual #64                 // Method ensureCapacity:(I)V
      92: aload_0
      93: aload_2
      94: invokespecial #70                 // Method decode:([Ljava/nio/ByteBuffer;)V
      97: aload_0
      98: getfield      #8                  // Field charBuffer:Ljava/nio/CharBuffer;
     101: invokevirtual #29                 // Method java/nio/CharBuffer.flip:()Ljava/nio/Buffer;
     104: pop
     105: return

  private void inspectByteBufs(io.netty.buffer.ByteBuf[]);
    Code:
       0: aload_1
       1: astore_2
       2: aload_2
       3: arraylength
       4: istore_3
       5: iconst_0
       6: istore        4
       8: iload         4
      10: iload_3
      11: if_icmpge     70
      14: aload_2
      15: iload         4
      17: aaload
      18: astore        5
      20: aload         5
      22: invokevirtual #72                 // Method io/netty/buffer/ByteBuf.hasArray:()Z
      25: ifne          36
      28: aload_0
      29: iconst_1
      30: putfield      #13                 // Field withoutArray:Z
      33: goto          70
      36: aload_0
      37: dup
      38: getfield      #11                 // Field totalSize:I
      41: aload         5
      43: invokevirtual #63                 // Method io/netty/buffer/ByteBuf.readableBytes:()I
      46: iadd
      47: putfield      #11                 // Field totalSize:I
      50: aload_0
      51: dup
      52: getfield      #12                 // Field totalNioBuffers:I
      55: aload         5
      57: invokevirtual #65                 // Method io/netty/buffer/ByteBuf.nioBufferCount:()I
      60: iadd
      61: putfield      #12                 // Field totalNioBuffers:I
      64: iinc          4, 1
      67: goto          8
      70: return

  static {};
    Code:
       0: invokedynamic #73,  0             // InvokeDynamic #0:get:()Ljava/util/function/Supplier;
       5: invokestatic  #74                 // Method java/lang/ThreadLocal.withInitial:(Ljava/util/function/Supplier;)Ljava/lang/ThreadLocal;
       8: putstatic     #14                 // Field POOL:Ljava/lang/ThreadLocal;
      11: return
}
