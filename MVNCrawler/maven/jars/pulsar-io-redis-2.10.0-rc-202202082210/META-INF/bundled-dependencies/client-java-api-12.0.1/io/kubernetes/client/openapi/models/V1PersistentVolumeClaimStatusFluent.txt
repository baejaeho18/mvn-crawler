Compiled from "V1PersistentVolumeClaimStatusFluent.java"
public interface io.kubernetes.client.openapi.models.V1PersistentVolumeClaimStatusFluent<A extends io.kubernetes.client.openapi.models.V1PersistentVolumeClaimStatusFluent<A>> extends io.kubernetes.client.fluent.Fluent<A> {
  public abstract A addToAccessModes(int, java.lang.String);

  public abstract A setToAccessModes(int, java.lang.String);

  public abstract A addToAccessModes(java.lang.String...);

  public abstract A addAllToAccessModes(java.util.Collection<java.lang.String>);

  public abstract A removeFromAccessModes(java.lang.String...);

  public abstract A removeAllFromAccessModes(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getAccessModes();

  public abstract java.lang.String getAccessMode(int);

  public abstract java.lang.String getFirstAccessMode();

  public abstract java.lang.String getLastAccessMode();

  public abstract java.lang.String getMatchingAccessMode(io.kubernetes.client.fluent.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingAccessMode(io.kubernetes.client.fluent.Predicate<java.lang.String>);

  public abstract A withAccessModes(java.util.List<java.lang.String>);

  public abstract A withAccessModes(java.lang.String...);

  public abstract java.lang.Boolean hasAccessModes();

  public abstract A addNewAccessMode(java.lang.String);

  public abstract A addNewAccessMode(java.lang.StringBuilder);

  public abstract A addNewAccessMode(java.lang.StringBuffer);

  public abstract A addToCapacity(java.lang.String, io.kubernetes.client.custom.Quantity);

  public abstract A addToCapacity(java.util.Map<java.lang.String, io.kubernetes.client.custom.Quantity>);

  public abstract A removeFromCapacity(java.lang.String);

  public abstract A removeFromCapacity(java.util.Map<java.lang.String, io.kubernetes.client.custom.Quantity>);

  public abstract java.util.Map<java.lang.String, io.kubernetes.client.custom.Quantity> getCapacity();

  public abstract A withCapacity(java.util.Map<java.lang.String, io.kubernetes.client.custom.Quantity>);

  public abstract java.lang.Boolean hasCapacity();

  public abstract A addToConditions(int, io.kubernetes.client.openapi.models.V1PersistentVolumeClaimCondition);

  public abstract A setToConditions(int, io.kubernetes.client.openapi.models.V1PersistentVolumeClaimCondition);

  public abstract A addToConditions(io.kubernetes.client.openapi.models.V1PersistentVolumeClaimCondition...);

  public abstract A addAllToConditions(java.util.Collection<io.kubernetes.client.openapi.models.V1PersistentVolumeClaimCondition>);

  public abstract A removeFromConditions(io.kubernetes.client.openapi.models.V1PersistentVolumeClaimCondition...);

  public abstract A removeAllFromConditions(java.util.Collection<io.kubernetes.client.openapi.models.V1PersistentVolumeClaimCondition>);

  public abstract A removeMatchingFromConditions(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1PersistentVolumeClaimConditionBuilder>);

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1PersistentVolumeClaimCondition> getConditions();

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1PersistentVolumeClaimCondition> buildConditions();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeClaimCondition buildCondition(int);

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeClaimCondition buildFirstCondition();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeClaimCondition buildLastCondition();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeClaimCondition buildMatchingCondition(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1PersistentVolumeClaimConditionBuilder>);

  public abstract java.lang.Boolean hasMatchingCondition(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1PersistentVolumeClaimConditionBuilder>);

  public abstract A withConditions(java.util.List<io.kubernetes.client.openapi.models.V1PersistentVolumeClaimCondition>);

  public abstract A withConditions(io.kubernetes.client.openapi.models.V1PersistentVolumeClaimCondition...);

  public abstract java.lang.Boolean hasConditions();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeClaimStatusFluent$ConditionsNested<A> addNewCondition();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeClaimStatusFluent$ConditionsNested<A> addNewConditionLike(io.kubernetes.client.openapi.models.V1PersistentVolumeClaimCondition);

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeClaimStatusFluent$ConditionsNested<A> setNewConditionLike(int, io.kubernetes.client.openapi.models.V1PersistentVolumeClaimCondition);

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeClaimStatusFluent$ConditionsNested<A> editCondition(int);

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeClaimStatusFluent$ConditionsNested<A> editFirstCondition();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeClaimStatusFluent$ConditionsNested<A> editLastCondition();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeClaimStatusFluent$ConditionsNested<A> editMatchingCondition(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1PersistentVolumeClaimConditionBuilder>);

  public abstract java.lang.String getPhase();

  public abstract A withPhase(java.lang.String);

  public abstract java.lang.Boolean hasPhase();

  public abstract A withNewPhase(java.lang.String);

  public abstract A withNewPhase(java.lang.StringBuilder);

  public abstract A withNewPhase(java.lang.StringBuffer);
}
