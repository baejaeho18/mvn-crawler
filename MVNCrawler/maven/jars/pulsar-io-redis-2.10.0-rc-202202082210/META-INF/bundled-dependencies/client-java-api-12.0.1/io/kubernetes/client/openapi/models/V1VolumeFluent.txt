Compiled from "V1VolumeFluent.java"
public interface io.kubernetes.client.openapi.models.V1VolumeFluent<A extends io.kubernetes.client.openapi.models.V1VolumeFluent<A>> extends io.kubernetes.client.fluent.Fluent<A> {
  public abstract io.kubernetes.client.openapi.models.V1AWSElasticBlockStoreVolumeSource getAwsElasticBlockStore();

  public abstract io.kubernetes.client.openapi.models.V1AWSElasticBlockStoreVolumeSource buildAwsElasticBlockStore();

  public abstract A withAwsElasticBlockStore(io.kubernetes.client.openapi.models.V1AWSElasticBlockStoreVolumeSource);

  public abstract java.lang.Boolean hasAwsElasticBlockStore();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$AwsElasticBlockStoreNested<A> withNewAwsElasticBlockStore();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$AwsElasticBlockStoreNested<A> withNewAwsElasticBlockStoreLike(io.kubernetes.client.openapi.models.V1AWSElasticBlockStoreVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$AwsElasticBlockStoreNested<A> editAwsElasticBlockStore();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$AwsElasticBlockStoreNested<A> editOrNewAwsElasticBlockStore();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$AwsElasticBlockStoreNested<A> editOrNewAwsElasticBlockStoreLike(io.kubernetes.client.openapi.models.V1AWSElasticBlockStoreVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1AzureDiskVolumeSource getAzureDisk();

  public abstract io.kubernetes.client.openapi.models.V1AzureDiskVolumeSource buildAzureDisk();

  public abstract A withAzureDisk(io.kubernetes.client.openapi.models.V1AzureDiskVolumeSource);

  public abstract java.lang.Boolean hasAzureDisk();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$AzureDiskNested<A> withNewAzureDisk();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$AzureDiskNested<A> withNewAzureDiskLike(io.kubernetes.client.openapi.models.V1AzureDiskVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$AzureDiskNested<A> editAzureDisk();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$AzureDiskNested<A> editOrNewAzureDisk();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$AzureDiskNested<A> editOrNewAzureDiskLike(io.kubernetes.client.openapi.models.V1AzureDiskVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1AzureFileVolumeSource getAzureFile();

  public abstract io.kubernetes.client.openapi.models.V1AzureFileVolumeSource buildAzureFile();

  public abstract A withAzureFile(io.kubernetes.client.openapi.models.V1AzureFileVolumeSource);

  public abstract java.lang.Boolean hasAzureFile();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$AzureFileNested<A> withNewAzureFile();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$AzureFileNested<A> withNewAzureFileLike(io.kubernetes.client.openapi.models.V1AzureFileVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$AzureFileNested<A> editAzureFile();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$AzureFileNested<A> editOrNewAzureFile();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$AzureFileNested<A> editOrNewAzureFileLike(io.kubernetes.client.openapi.models.V1AzureFileVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1CephFSVolumeSource getCephfs();

  public abstract io.kubernetes.client.openapi.models.V1CephFSVolumeSource buildCephfs();

  public abstract A withCephfs(io.kubernetes.client.openapi.models.V1CephFSVolumeSource);

  public abstract java.lang.Boolean hasCephfs();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$CephfsNested<A> withNewCephfs();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$CephfsNested<A> withNewCephfsLike(io.kubernetes.client.openapi.models.V1CephFSVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$CephfsNested<A> editCephfs();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$CephfsNested<A> editOrNewCephfs();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$CephfsNested<A> editOrNewCephfsLike(io.kubernetes.client.openapi.models.V1CephFSVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1CinderVolumeSource getCinder();

  public abstract io.kubernetes.client.openapi.models.V1CinderVolumeSource buildCinder();

  public abstract A withCinder(io.kubernetes.client.openapi.models.V1CinderVolumeSource);

  public abstract java.lang.Boolean hasCinder();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$CinderNested<A> withNewCinder();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$CinderNested<A> withNewCinderLike(io.kubernetes.client.openapi.models.V1CinderVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$CinderNested<A> editCinder();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$CinderNested<A> editOrNewCinder();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$CinderNested<A> editOrNewCinderLike(io.kubernetes.client.openapi.models.V1CinderVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1ConfigMapVolumeSource getConfigMap();

  public abstract io.kubernetes.client.openapi.models.V1ConfigMapVolumeSource buildConfigMap();

  public abstract A withConfigMap(io.kubernetes.client.openapi.models.V1ConfigMapVolumeSource);

  public abstract java.lang.Boolean hasConfigMap();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$ConfigMapNested<A> withNewConfigMap();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$ConfigMapNested<A> withNewConfigMapLike(io.kubernetes.client.openapi.models.V1ConfigMapVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$ConfigMapNested<A> editConfigMap();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$ConfigMapNested<A> editOrNewConfigMap();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$ConfigMapNested<A> editOrNewConfigMapLike(io.kubernetes.client.openapi.models.V1ConfigMapVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1CSIVolumeSource getCsi();

  public abstract io.kubernetes.client.openapi.models.V1CSIVolumeSource buildCsi();

  public abstract A withCsi(io.kubernetes.client.openapi.models.V1CSIVolumeSource);

  public abstract java.lang.Boolean hasCsi();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$CsiNested<A> withNewCsi();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$CsiNested<A> withNewCsiLike(io.kubernetes.client.openapi.models.V1CSIVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$CsiNested<A> editCsi();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$CsiNested<A> editOrNewCsi();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$CsiNested<A> editOrNewCsiLike(io.kubernetes.client.openapi.models.V1CSIVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1DownwardAPIVolumeSource getDownwardAPI();

  public abstract io.kubernetes.client.openapi.models.V1DownwardAPIVolumeSource buildDownwardAPI();

  public abstract A withDownwardAPI(io.kubernetes.client.openapi.models.V1DownwardAPIVolumeSource);

  public abstract java.lang.Boolean hasDownwardAPI();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$DownwardAPINested<A> withNewDownwardAPI();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$DownwardAPINested<A> withNewDownwardAPILike(io.kubernetes.client.openapi.models.V1DownwardAPIVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$DownwardAPINested<A> editDownwardAPI();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$DownwardAPINested<A> editOrNewDownwardAPI();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$DownwardAPINested<A> editOrNewDownwardAPILike(io.kubernetes.client.openapi.models.V1DownwardAPIVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1EmptyDirVolumeSource getEmptyDir();

  public abstract io.kubernetes.client.openapi.models.V1EmptyDirVolumeSource buildEmptyDir();

  public abstract A withEmptyDir(io.kubernetes.client.openapi.models.V1EmptyDirVolumeSource);

  public abstract java.lang.Boolean hasEmptyDir();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$EmptyDirNested<A> withNewEmptyDir();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$EmptyDirNested<A> withNewEmptyDirLike(io.kubernetes.client.openapi.models.V1EmptyDirVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$EmptyDirNested<A> editEmptyDir();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$EmptyDirNested<A> editOrNewEmptyDir();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$EmptyDirNested<A> editOrNewEmptyDirLike(io.kubernetes.client.openapi.models.V1EmptyDirVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1EphemeralVolumeSource getEphemeral();

  public abstract io.kubernetes.client.openapi.models.V1EphemeralVolumeSource buildEphemeral();

  public abstract A withEphemeral(io.kubernetes.client.openapi.models.V1EphemeralVolumeSource);

  public abstract java.lang.Boolean hasEphemeral();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$EphemeralNested<A> withNewEphemeral();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$EphemeralNested<A> withNewEphemeralLike(io.kubernetes.client.openapi.models.V1EphemeralVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$EphemeralNested<A> editEphemeral();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$EphemeralNested<A> editOrNewEphemeral();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$EphemeralNested<A> editOrNewEphemeralLike(io.kubernetes.client.openapi.models.V1EphemeralVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1FCVolumeSource getFc();

  public abstract io.kubernetes.client.openapi.models.V1FCVolumeSource buildFc();

  public abstract A withFc(io.kubernetes.client.openapi.models.V1FCVolumeSource);

  public abstract java.lang.Boolean hasFc();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$FcNested<A> withNewFc();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$FcNested<A> withNewFcLike(io.kubernetes.client.openapi.models.V1FCVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$FcNested<A> editFc();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$FcNested<A> editOrNewFc();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$FcNested<A> editOrNewFcLike(io.kubernetes.client.openapi.models.V1FCVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1FlexVolumeSource getFlexVolume();

  public abstract io.kubernetes.client.openapi.models.V1FlexVolumeSource buildFlexVolume();

  public abstract A withFlexVolume(io.kubernetes.client.openapi.models.V1FlexVolumeSource);

  public abstract java.lang.Boolean hasFlexVolume();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$FlexVolumeNested<A> withNewFlexVolume();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$FlexVolumeNested<A> withNewFlexVolumeLike(io.kubernetes.client.openapi.models.V1FlexVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$FlexVolumeNested<A> editFlexVolume();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$FlexVolumeNested<A> editOrNewFlexVolume();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$FlexVolumeNested<A> editOrNewFlexVolumeLike(io.kubernetes.client.openapi.models.V1FlexVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1FlockerVolumeSource getFlocker();

  public abstract io.kubernetes.client.openapi.models.V1FlockerVolumeSource buildFlocker();

  public abstract A withFlocker(io.kubernetes.client.openapi.models.V1FlockerVolumeSource);

  public abstract java.lang.Boolean hasFlocker();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$FlockerNested<A> withNewFlocker();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$FlockerNested<A> withNewFlockerLike(io.kubernetes.client.openapi.models.V1FlockerVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$FlockerNested<A> editFlocker();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$FlockerNested<A> editOrNewFlocker();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$FlockerNested<A> editOrNewFlockerLike(io.kubernetes.client.openapi.models.V1FlockerVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1GCEPersistentDiskVolumeSource getGcePersistentDisk();

  public abstract io.kubernetes.client.openapi.models.V1GCEPersistentDiskVolumeSource buildGcePersistentDisk();

  public abstract A withGcePersistentDisk(io.kubernetes.client.openapi.models.V1GCEPersistentDiskVolumeSource);

  public abstract java.lang.Boolean hasGcePersistentDisk();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$GcePersistentDiskNested<A> withNewGcePersistentDisk();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$GcePersistentDiskNested<A> withNewGcePersistentDiskLike(io.kubernetes.client.openapi.models.V1GCEPersistentDiskVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$GcePersistentDiskNested<A> editGcePersistentDisk();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$GcePersistentDiskNested<A> editOrNewGcePersistentDisk();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$GcePersistentDiskNested<A> editOrNewGcePersistentDiskLike(io.kubernetes.client.openapi.models.V1GCEPersistentDiskVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1GitRepoVolumeSource getGitRepo();

  public abstract io.kubernetes.client.openapi.models.V1GitRepoVolumeSource buildGitRepo();

  public abstract A withGitRepo(io.kubernetes.client.openapi.models.V1GitRepoVolumeSource);

  public abstract java.lang.Boolean hasGitRepo();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$GitRepoNested<A> withNewGitRepo();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$GitRepoNested<A> withNewGitRepoLike(io.kubernetes.client.openapi.models.V1GitRepoVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$GitRepoNested<A> editGitRepo();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$GitRepoNested<A> editOrNewGitRepo();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$GitRepoNested<A> editOrNewGitRepoLike(io.kubernetes.client.openapi.models.V1GitRepoVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1GlusterfsVolumeSource getGlusterfs();

  public abstract io.kubernetes.client.openapi.models.V1GlusterfsVolumeSource buildGlusterfs();

  public abstract A withGlusterfs(io.kubernetes.client.openapi.models.V1GlusterfsVolumeSource);

  public abstract java.lang.Boolean hasGlusterfs();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$GlusterfsNested<A> withNewGlusterfs();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$GlusterfsNested<A> withNewGlusterfsLike(io.kubernetes.client.openapi.models.V1GlusterfsVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$GlusterfsNested<A> editGlusterfs();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$GlusterfsNested<A> editOrNewGlusterfs();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$GlusterfsNested<A> editOrNewGlusterfsLike(io.kubernetes.client.openapi.models.V1GlusterfsVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1HostPathVolumeSource getHostPath();

  public abstract io.kubernetes.client.openapi.models.V1HostPathVolumeSource buildHostPath();

  public abstract A withHostPath(io.kubernetes.client.openapi.models.V1HostPathVolumeSource);

  public abstract java.lang.Boolean hasHostPath();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$HostPathNested<A> withNewHostPath();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$HostPathNested<A> withNewHostPathLike(io.kubernetes.client.openapi.models.V1HostPathVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$HostPathNested<A> editHostPath();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$HostPathNested<A> editOrNewHostPath();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$HostPathNested<A> editOrNewHostPathLike(io.kubernetes.client.openapi.models.V1HostPathVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1ISCSIVolumeSource getIscsi();

  public abstract io.kubernetes.client.openapi.models.V1ISCSIVolumeSource buildIscsi();

  public abstract A withIscsi(io.kubernetes.client.openapi.models.V1ISCSIVolumeSource);

  public abstract java.lang.Boolean hasIscsi();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$IscsiNested<A> withNewIscsi();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$IscsiNested<A> withNewIscsiLike(io.kubernetes.client.openapi.models.V1ISCSIVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$IscsiNested<A> editIscsi();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$IscsiNested<A> editOrNewIscsi();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$IscsiNested<A> editOrNewIscsiLike(io.kubernetes.client.openapi.models.V1ISCSIVolumeSource);

  public abstract java.lang.String getName();

  public abstract A withName(java.lang.String);

  public abstract java.lang.Boolean hasName();

  public abstract A withNewName(java.lang.String);

  public abstract A withNewName(java.lang.StringBuilder);

  public abstract A withNewName(java.lang.StringBuffer);

  public abstract io.kubernetes.client.openapi.models.V1NFSVolumeSource getNfs();

  public abstract io.kubernetes.client.openapi.models.V1NFSVolumeSource buildNfs();

  public abstract A withNfs(io.kubernetes.client.openapi.models.V1NFSVolumeSource);

  public abstract java.lang.Boolean hasNfs();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$NfsNested<A> withNewNfs();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$NfsNested<A> withNewNfsLike(io.kubernetes.client.openapi.models.V1NFSVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$NfsNested<A> editNfs();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$NfsNested<A> editOrNewNfs();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$NfsNested<A> editOrNewNfsLike(io.kubernetes.client.openapi.models.V1NFSVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeClaimVolumeSource getPersistentVolumeClaim();

  public abstract io.kubernetes.client.openapi.models.V1PersistentVolumeClaimVolumeSource buildPersistentVolumeClaim();

  public abstract A withPersistentVolumeClaim(io.kubernetes.client.openapi.models.V1PersistentVolumeClaimVolumeSource);

  public abstract java.lang.Boolean hasPersistentVolumeClaim();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$PersistentVolumeClaimNested<A> withNewPersistentVolumeClaim();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$PersistentVolumeClaimNested<A> withNewPersistentVolumeClaimLike(io.kubernetes.client.openapi.models.V1PersistentVolumeClaimVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$PersistentVolumeClaimNested<A> editPersistentVolumeClaim();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$PersistentVolumeClaimNested<A> editOrNewPersistentVolumeClaim();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$PersistentVolumeClaimNested<A> editOrNewPersistentVolumeClaimLike(io.kubernetes.client.openapi.models.V1PersistentVolumeClaimVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1PhotonPersistentDiskVolumeSource getPhotonPersistentDisk();

  public abstract io.kubernetes.client.openapi.models.V1PhotonPersistentDiskVolumeSource buildPhotonPersistentDisk();

  public abstract A withPhotonPersistentDisk(io.kubernetes.client.openapi.models.V1PhotonPersistentDiskVolumeSource);

  public abstract java.lang.Boolean hasPhotonPersistentDisk();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$PhotonPersistentDiskNested<A> withNewPhotonPersistentDisk();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$PhotonPersistentDiskNested<A> withNewPhotonPersistentDiskLike(io.kubernetes.client.openapi.models.V1PhotonPersistentDiskVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$PhotonPersistentDiskNested<A> editPhotonPersistentDisk();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$PhotonPersistentDiskNested<A> editOrNewPhotonPersistentDisk();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$PhotonPersistentDiskNested<A> editOrNewPhotonPersistentDiskLike(io.kubernetes.client.openapi.models.V1PhotonPersistentDiskVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1PortworxVolumeSource getPortworxVolume();

  public abstract io.kubernetes.client.openapi.models.V1PortworxVolumeSource buildPortworxVolume();

  public abstract A withPortworxVolume(io.kubernetes.client.openapi.models.V1PortworxVolumeSource);

  public abstract java.lang.Boolean hasPortworxVolume();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$PortworxVolumeNested<A> withNewPortworxVolume();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$PortworxVolumeNested<A> withNewPortworxVolumeLike(io.kubernetes.client.openapi.models.V1PortworxVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$PortworxVolumeNested<A> editPortworxVolume();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$PortworxVolumeNested<A> editOrNewPortworxVolume();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$PortworxVolumeNested<A> editOrNewPortworxVolumeLike(io.kubernetes.client.openapi.models.V1PortworxVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1ProjectedVolumeSource getProjected();

  public abstract io.kubernetes.client.openapi.models.V1ProjectedVolumeSource buildProjected();

  public abstract A withProjected(io.kubernetes.client.openapi.models.V1ProjectedVolumeSource);

  public abstract java.lang.Boolean hasProjected();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$ProjectedNested<A> withNewProjected();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$ProjectedNested<A> withNewProjectedLike(io.kubernetes.client.openapi.models.V1ProjectedVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$ProjectedNested<A> editProjected();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$ProjectedNested<A> editOrNewProjected();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$ProjectedNested<A> editOrNewProjectedLike(io.kubernetes.client.openapi.models.V1ProjectedVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1QuobyteVolumeSource getQuobyte();

  public abstract io.kubernetes.client.openapi.models.V1QuobyteVolumeSource buildQuobyte();

  public abstract A withQuobyte(io.kubernetes.client.openapi.models.V1QuobyteVolumeSource);

  public abstract java.lang.Boolean hasQuobyte();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$QuobyteNested<A> withNewQuobyte();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$QuobyteNested<A> withNewQuobyteLike(io.kubernetes.client.openapi.models.V1QuobyteVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$QuobyteNested<A> editQuobyte();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$QuobyteNested<A> editOrNewQuobyte();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$QuobyteNested<A> editOrNewQuobyteLike(io.kubernetes.client.openapi.models.V1QuobyteVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1RBDVolumeSource getRbd();

  public abstract io.kubernetes.client.openapi.models.V1RBDVolumeSource buildRbd();

  public abstract A withRbd(io.kubernetes.client.openapi.models.V1RBDVolumeSource);

  public abstract java.lang.Boolean hasRbd();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$RbdNested<A> withNewRbd();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$RbdNested<A> withNewRbdLike(io.kubernetes.client.openapi.models.V1RBDVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$RbdNested<A> editRbd();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$RbdNested<A> editOrNewRbd();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$RbdNested<A> editOrNewRbdLike(io.kubernetes.client.openapi.models.V1RBDVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1ScaleIOVolumeSource getScaleIO();

  public abstract io.kubernetes.client.openapi.models.V1ScaleIOVolumeSource buildScaleIO();

  public abstract A withScaleIO(io.kubernetes.client.openapi.models.V1ScaleIOVolumeSource);

  public abstract java.lang.Boolean hasScaleIO();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$ScaleIONested<A> withNewScaleIO();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$ScaleIONested<A> withNewScaleIOLike(io.kubernetes.client.openapi.models.V1ScaleIOVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$ScaleIONested<A> editScaleIO();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$ScaleIONested<A> editOrNewScaleIO();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$ScaleIONested<A> editOrNewScaleIOLike(io.kubernetes.client.openapi.models.V1ScaleIOVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1SecretVolumeSource getSecret();

  public abstract io.kubernetes.client.openapi.models.V1SecretVolumeSource buildSecret();

  public abstract A withSecret(io.kubernetes.client.openapi.models.V1SecretVolumeSource);

  public abstract java.lang.Boolean hasSecret();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$SecretNested<A> withNewSecret();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$SecretNested<A> withNewSecretLike(io.kubernetes.client.openapi.models.V1SecretVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$SecretNested<A> editSecret();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$SecretNested<A> editOrNewSecret();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$SecretNested<A> editOrNewSecretLike(io.kubernetes.client.openapi.models.V1SecretVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1StorageOSVolumeSource getStorageos();

  public abstract io.kubernetes.client.openapi.models.V1StorageOSVolumeSource buildStorageos();

  public abstract A withStorageos(io.kubernetes.client.openapi.models.V1StorageOSVolumeSource);

  public abstract java.lang.Boolean hasStorageos();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$StorageosNested<A> withNewStorageos();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$StorageosNested<A> withNewStorageosLike(io.kubernetes.client.openapi.models.V1StorageOSVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$StorageosNested<A> editStorageos();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$StorageosNested<A> editOrNewStorageos();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$StorageosNested<A> editOrNewStorageosLike(io.kubernetes.client.openapi.models.V1StorageOSVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1VsphereVirtualDiskVolumeSource getVsphereVolume();

  public abstract io.kubernetes.client.openapi.models.V1VsphereVirtualDiskVolumeSource buildVsphereVolume();

  public abstract A withVsphereVolume(io.kubernetes.client.openapi.models.V1VsphereVirtualDiskVolumeSource);

  public abstract java.lang.Boolean hasVsphereVolume();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$VsphereVolumeNested<A> withNewVsphereVolume();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$VsphereVolumeNested<A> withNewVsphereVolumeLike(io.kubernetes.client.openapi.models.V1VsphereVirtualDiskVolumeSource);

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$VsphereVolumeNested<A> editVsphereVolume();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$VsphereVolumeNested<A> editOrNewVsphereVolume();

  public abstract io.kubernetes.client.openapi.models.V1VolumeFluent$VsphereVolumeNested<A> editOrNewVsphereVolumeLike(io.kubernetes.client.openapi.models.V1VsphereVirtualDiskVolumeSource);
}
