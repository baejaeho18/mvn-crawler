Compiled from "V1APIResourceFluent.java"
public interface io.kubernetes.client.openapi.models.V1APIResourceFluent<A extends io.kubernetes.client.openapi.models.V1APIResourceFluent<A>> extends io.kubernetes.client.fluent.Fluent<A> {
  public abstract A addToCategories(int, java.lang.String);

  public abstract A setToCategories(int, java.lang.String);

  public abstract A addToCategories(java.lang.String...);

  public abstract A addAllToCategories(java.util.Collection<java.lang.String>);

  public abstract A removeFromCategories(java.lang.String...);

  public abstract A removeAllFromCategories(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getCategories();

  public abstract java.lang.String getCategory(int);

  public abstract java.lang.String getFirstCategory();

  public abstract java.lang.String getLastCategory();

  public abstract java.lang.String getMatchingCategory(io.kubernetes.client.fluent.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingCategory(io.kubernetes.client.fluent.Predicate<java.lang.String>);

  public abstract A withCategories(java.util.List<java.lang.String>);

  public abstract A withCategories(java.lang.String...);

  public abstract java.lang.Boolean hasCategories();

  public abstract A addNewCategory(java.lang.String);

  public abstract A addNewCategory(java.lang.StringBuilder);

  public abstract A addNewCategory(java.lang.StringBuffer);

  public abstract java.lang.String getGroup();

  public abstract A withGroup(java.lang.String);

  public abstract java.lang.Boolean hasGroup();

  public abstract A withNewGroup(java.lang.String);

  public abstract A withNewGroup(java.lang.StringBuilder);

  public abstract A withNewGroup(java.lang.StringBuffer);

  public abstract java.lang.String getKind();

  public abstract A withKind(java.lang.String);

  public abstract java.lang.Boolean hasKind();

  public abstract A withNewKind(java.lang.String);

  public abstract A withNewKind(java.lang.StringBuilder);

  public abstract A withNewKind(java.lang.StringBuffer);

  public abstract java.lang.String getName();

  public abstract A withName(java.lang.String);

  public abstract java.lang.Boolean hasName();

  public abstract A withNewName(java.lang.String);

  public abstract A withNewName(java.lang.StringBuilder);

  public abstract A withNewName(java.lang.StringBuffer);

  public abstract java.lang.Boolean isNamespaced();

  public abstract A withNamespaced(java.lang.Boolean);

  public abstract java.lang.Boolean hasNamespaced();

  public abstract A withNewNamespaced(java.lang.String);

  public abstract A withNewNamespaced(boolean);

  public abstract A addToShortNames(int, java.lang.String);

  public abstract A setToShortNames(int, java.lang.String);

  public abstract A addToShortNames(java.lang.String...);

  public abstract A addAllToShortNames(java.util.Collection<java.lang.String>);

  public abstract A removeFromShortNames(java.lang.String...);

  public abstract A removeAllFromShortNames(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getShortNames();

  public abstract java.lang.String getShortName(int);

  public abstract java.lang.String getFirstShortName();

  public abstract java.lang.String getLastShortName();

  public abstract java.lang.String getMatchingShortName(io.kubernetes.client.fluent.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingShortName(io.kubernetes.client.fluent.Predicate<java.lang.String>);

  public abstract A withShortNames(java.util.List<java.lang.String>);

  public abstract A withShortNames(java.lang.String...);

  public abstract java.lang.Boolean hasShortNames();

  public abstract A addNewShortName(java.lang.String);

  public abstract A addNewShortName(java.lang.StringBuilder);

  public abstract A addNewShortName(java.lang.StringBuffer);

  public abstract java.lang.String getSingularName();

  public abstract A withSingularName(java.lang.String);

  public abstract java.lang.Boolean hasSingularName();

  public abstract A withNewSingularName(java.lang.String);

  public abstract A withNewSingularName(java.lang.StringBuilder);

  public abstract A withNewSingularName(java.lang.StringBuffer);

  public abstract java.lang.String getStorageVersionHash();

  public abstract A withStorageVersionHash(java.lang.String);

  public abstract java.lang.Boolean hasStorageVersionHash();

  public abstract A withNewStorageVersionHash(java.lang.String);

  public abstract A withNewStorageVersionHash(java.lang.StringBuilder);

  public abstract A withNewStorageVersionHash(java.lang.StringBuffer);

  public abstract A addToVerbs(int, java.lang.String);

  public abstract A setToVerbs(int, java.lang.String);

  public abstract A addToVerbs(java.lang.String...);

  public abstract A addAllToVerbs(java.util.Collection<java.lang.String>);

  public abstract A removeFromVerbs(java.lang.String...);

  public abstract A removeAllFromVerbs(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getVerbs();

  public abstract java.lang.String getVerb(int);

  public abstract java.lang.String getFirstVerb();

  public abstract java.lang.String getLastVerb();

  public abstract java.lang.String getMatchingVerb(io.kubernetes.client.fluent.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingVerb(io.kubernetes.client.fluent.Predicate<java.lang.String>);

  public abstract A withVerbs(java.util.List<java.lang.String>);

  public abstract A withVerbs(java.lang.String...);

  public abstract java.lang.Boolean hasVerbs();

  public abstract A addNewVerb(java.lang.String);

  public abstract A addNewVerb(java.lang.StringBuilder);

  public abstract A addNewVerb(java.lang.StringBuffer);

  public abstract java.lang.String getVersion();

  public abstract A withVersion(java.lang.String);

  public abstract java.lang.Boolean hasVersion();

  public abstract A withNewVersion(java.lang.String);

  public abstract A withNewVersion(java.lang.StringBuilder);

  public abstract A withNewVersion(java.lang.StringBuffer);
}
