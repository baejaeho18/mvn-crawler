Compiled from "V1PodSpecFluent.java"
public interface io.kubernetes.client.openapi.models.V1PodSpecFluent<A extends io.kubernetes.client.openapi.models.V1PodSpecFluent<A>> extends io.kubernetes.client.fluent.Fluent<A> {
  public abstract java.lang.Long getActiveDeadlineSeconds();

  public abstract A withActiveDeadlineSeconds(java.lang.Long);

  public abstract java.lang.Boolean hasActiveDeadlineSeconds();

  public abstract io.kubernetes.client.openapi.models.V1Affinity getAffinity();

  public abstract io.kubernetes.client.openapi.models.V1Affinity buildAffinity();

  public abstract A withAffinity(io.kubernetes.client.openapi.models.V1Affinity);

  public abstract java.lang.Boolean hasAffinity();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$AffinityNested<A> withNewAffinity();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$AffinityNested<A> withNewAffinityLike(io.kubernetes.client.openapi.models.V1Affinity);

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$AffinityNested<A> editAffinity();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$AffinityNested<A> editOrNewAffinity();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$AffinityNested<A> editOrNewAffinityLike(io.kubernetes.client.openapi.models.V1Affinity);

  public abstract java.lang.Boolean isAutomountServiceAccountToken();

  public abstract A withAutomountServiceAccountToken(java.lang.Boolean);

  public abstract java.lang.Boolean hasAutomountServiceAccountToken();

  public abstract A withNewAutomountServiceAccountToken(java.lang.String);

  public abstract A withNewAutomountServiceAccountToken(boolean);

  public abstract A addToContainers(int, io.kubernetes.client.openapi.models.V1Container);

  public abstract A setToContainers(int, io.kubernetes.client.openapi.models.V1Container);

  public abstract A addToContainers(io.kubernetes.client.openapi.models.V1Container...);

  public abstract A addAllToContainers(java.util.Collection<io.kubernetes.client.openapi.models.V1Container>);

  public abstract A removeFromContainers(io.kubernetes.client.openapi.models.V1Container...);

  public abstract A removeAllFromContainers(java.util.Collection<io.kubernetes.client.openapi.models.V1Container>);

  public abstract A removeMatchingFromContainers(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1ContainerBuilder>);

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1Container> getContainers();

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1Container> buildContainers();

  public abstract io.kubernetes.client.openapi.models.V1Container buildContainer(int);

  public abstract io.kubernetes.client.openapi.models.V1Container buildFirstContainer();

  public abstract io.kubernetes.client.openapi.models.V1Container buildLastContainer();

  public abstract io.kubernetes.client.openapi.models.V1Container buildMatchingContainer(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1ContainerBuilder>);

  public abstract java.lang.Boolean hasMatchingContainer(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1ContainerBuilder>);

  public abstract A withContainers(java.util.List<io.kubernetes.client.openapi.models.V1Container>);

  public abstract A withContainers(io.kubernetes.client.openapi.models.V1Container...);

  public abstract java.lang.Boolean hasContainers();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$ContainersNested<A> addNewContainer();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$ContainersNested<A> addNewContainerLike(io.kubernetes.client.openapi.models.V1Container);

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$ContainersNested<A> setNewContainerLike(int, io.kubernetes.client.openapi.models.V1Container);

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$ContainersNested<A> editContainer(int);

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$ContainersNested<A> editFirstContainer();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$ContainersNested<A> editLastContainer();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$ContainersNested<A> editMatchingContainer(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1ContainerBuilder>);

  public abstract io.kubernetes.client.openapi.models.V1PodDNSConfig getDnsConfig();

  public abstract io.kubernetes.client.openapi.models.V1PodDNSConfig buildDnsConfig();

  public abstract A withDnsConfig(io.kubernetes.client.openapi.models.V1PodDNSConfig);

  public abstract java.lang.Boolean hasDnsConfig();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$DnsConfigNested<A> withNewDnsConfig();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$DnsConfigNested<A> withNewDnsConfigLike(io.kubernetes.client.openapi.models.V1PodDNSConfig);

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$DnsConfigNested<A> editDnsConfig();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$DnsConfigNested<A> editOrNewDnsConfig();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$DnsConfigNested<A> editOrNewDnsConfigLike(io.kubernetes.client.openapi.models.V1PodDNSConfig);

  public abstract java.lang.String getDnsPolicy();

  public abstract A withDnsPolicy(java.lang.String);

  public abstract java.lang.Boolean hasDnsPolicy();

  public abstract A withNewDnsPolicy(java.lang.String);

  public abstract A withNewDnsPolicy(java.lang.StringBuilder);

  public abstract A withNewDnsPolicy(java.lang.StringBuffer);

  public abstract java.lang.Boolean isEnableServiceLinks();

  public abstract A withEnableServiceLinks(java.lang.Boolean);

  public abstract java.lang.Boolean hasEnableServiceLinks();

  public abstract A withNewEnableServiceLinks(java.lang.String);

  public abstract A withNewEnableServiceLinks(boolean);

  public abstract A addToEphemeralContainers(int, io.kubernetes.client.openapi.models.V1EphemeralContainer);

  public abstract A setToEphemeralContainers(int, io.kubernetes.client.openapi.models.V1EphemeralContainer);

  public abstract A addToEphemeralContainers(io.kubernetes.client.openapi.models.V1EphemeralContainer...);

  public abstract A addAllToEphemeralContainers(java.util.Collection<io.kubernetes.client.openapi.models.V1EphemeralContainer>);

  public abstract A removeFromEphemeralContainers(io.kubernetes.client.openapi.models.V1EphemeralContainer...);

  public abstract A removeAllFromEphemeralContainers(java.util.Collection<io.kubernetes.client.openapi.models.V1EphemeralContainer>);

  public abstract A removeMatchingFromEphemeralContainers(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1EphemeralContainerBuilder>);

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1EphemeralContainer> getEphemeralContainers();

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1EphemeralContainer> buildEphemeralContainers();

  public abstract io.kubernetes.client.openapi.models.V1EphemeralContainer buildEphemeralContainer(int);

  public abstract io.kubernetes.client.openapi.models.V1EphemeralContainer buildFirstEphemeralContainer();

  public abstract io.kubernetes.client.openapi.models.V1EphemeralContainer buildLastEphemeralContainer();

  public abstract io.kubernetes.client.openapi.models.V1EphemeralContainer buildMatchingEphemeralContainer(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1EphemeralContainerBuilder>);

  public abstract java.lang.Boolean hasMatchingEphemeralContainer(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1EphemeralContainerBuilder>);

  public abstract A withEphemeralContainers(java.util.List<io.kubernetes.client.openapi.models.V1EphemeralContainer>);

  public abstract A withEphemeralContainers(io.kubernetes.client.openapi.models.V1EphemeralContainer...);

  public abstract java.lang.Boolean hasEphemeralContainers();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$EphemeralContainersNested<A> addNewEphemeralContainer();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$EphemeralContainersNested<A> addNewEphemeralContainerLike(io.kubernetes.client.openapi.models.V1EphemeralContainer);

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$EphemeralContainersNested<A> setNewEphemeralContainerLike(int, io.kubernetes.client.openapi.models.V1EphemeralContainer);

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$EphemeralContainersNested<A> editEphemeralContainer(int);

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$EphemeralContainersNested<A> editFirstEphemeralContainer();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$EphemeralContainersNested<A> editLastEphemeralContainer();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$EphemeralContainersNested<A> editMatchingEphemeralContainer(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1EphemeralContainerBuilder>);

  public abstract A addToHostAliases(int, io.kubernetes.client.openapi.models.V1HostAlias);

  public abstract A setToHostAliases(int, io.kubernetes.client.openapi.models.V1HostAlias);

  public abstract A addToHostAliases(io.kubernetes.client.openapi.models.V1HostAlias...);

  public abstract A addAllToHostAliases(java.util.Collection<io.kubernetes.client.openapi.models.V1HostAlias>);

  public abstract A removeFromHostAliases(io.kubernetes.client.openapi.models.V1HostAlias...);

  public abstract A removeAllFromHostAliases(java.util.Collection<io.kubernetes.client.openapi.models.V1HostAlias>);

  public abstract A removeMatchingFromHostAliases(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1HostAliasBuilder>);

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1HostAlias> getHostAliases();

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1HostAlias> buildHostAliases();

  public abstract io.kubernetes.client.openapi.models.V1HostAlias buildHostAlias(int);

  public abstract io.kubernetes.client.openapi.models.V1HostAlias buildFirstHostAlias();

  public abstract io.kubernetes.client.openapi.models.V1HostAlias buildLastHostAlias();

  public abstract io.kubernetes.client.openapi.models.V1HostAlias buildMatchingHostAlias(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1HostAliasBuilder>);

  public abstract java.lang.Boolean hasMatchingHostAlias(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1HostAliasBuilder>);

  public abstract A withHostAliases(java.util.List<io.kubernetes.client.openapi.models.V1HostAlias>);

  public abstract A withHostAliases(io.kubernetes.client.openapi.models.V1HostAlias...);

  public abstract java.lang.Boolean hasHostAliases();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$HostAliasesNested<A> addNewHostAlias();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$HostAliasesNested<A> addNewHostAliasLike(io.kubernetes.client.openapi.models.V1HostAlias);

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$HostAliasesNested<A> setNewHostAliasLike(int, io.kubernetes.client.openapi.models.V1HostAlias);

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$HostAliasesNested<A> editHostAlias(int);

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$HostAliasesNested<A> editFirstHostAlias();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$HostAliasesNested<A> editLastHostAlias();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$HostAliasesNested<A> editMatchingHostAlias(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1HostAliasBuilder>);

  public abstract java.lang.Boolean isHostIPC();

  public abstract A withHostIPC(java.lang.Boolean);

  public abstract java.lang.Boolean hasHostIPC();

  public abstract A withNewHostIPC(java.lang.String);

  public abstract A withNewHostIPC(boolean);

  public abstract java.lang.Boolean isHostNetwork();

  public abstract A withHostNetwork(java.lang.Boolean);

  public abstract java.lang.Boolean hasHostNetwork();

  public abstract A withNewHostNetwork(java.lang.String);

  public abstract A withNewHostNetwork(boolean);

  public abstract java.lang.Boolean isHostPID();

  public abstract A withHostPID(java.lang.Boolean);

  public abstract java.lang.Boolean hasHostPID();

  public abstract A withNewHostPID(java.lang.String);

  public abstract A withNewHostPID(boolean);

  public abstract java.lang.String getHostname();

  public abstract A withHostname(java.lang.String);

  public abstract java.lang.Boolean hasHostname();

  public abstract A withNewHostname(java.lang.String);

  public abstract A withNewHostname(java.lang.StringBuilder);

  public abstract A withNewHostname(java.lang.StringBuffer);

  public abstract A addToImagePullSecrets(int, io.kubernetes.client.openapi.models.V1LocalObjectReference);

  public abstract A setToImagePullSecrets(int, io.kubernetes.client.openapi.models.V1LocalObjectReference);

  public abstract A addToImagePullSecrets(io.kubernetes.client.openapi.models.V1LocalObjectReference...);

  public abstract A addAllToImagePullSecrets(java.util.Collection<io.kubernetes.client.openapi.models.V1LocalObjectReference>);

  public abstract A removeFromImagePullSecrets(io.kubernetes.client.openapi.models.V1LocalObjectReference...);

  public abstract A removeAllFromImagePullSecrets(java.util.Collection<io.kubernetes.client.openapi.models.V1LocalObjectReference>);

  public abstract A removeMatchingFromImagePullSecrets(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1LocalObjectReferenceBuilder>);

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1LocalObjectReference> getImagePullSecrets();

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1LocalObjectReference> buildImagePullSecrets();

  public abstract io.kubernetes.client.openapi.models.V1LocalObjectReference buildImagePullSecret(int);

  public abstract io.kubernetes.client.openapi.models.V1LocalObjectReference buildFirstImagePullSecret();

  public abstract io.kubernetes.client.openapi.models.V1LocalObjectReference buildLastImagePullSecret();

  public abstract io.kubernetes.client.openapi.models.V1LocalObjectReference buildMatchingImagePullSecret(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1LocalObjectReferenceBuilder>);

  public abstract java.lang.Boolean hasMatchingImagePullSecret(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1LocalObjectReferenceBuilder>);

  public abstract A withImagePullSecrets(java.util.List<io.kubernetes.client.openapi.models.V1LocalObjectReference>);

  public abstract A withImagePullSecrets(io.kubernetes.client.openapi.models.V1LocalObjectReference...);

  public abstract java.lang.Boolean hasImagePullSecrets();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$ImagePullSecretsNested<A> addNewImagePullSecret();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$ImagePullSecretsNested<A> addNewImagePullSecretLike(io.kubernetes.client.openapi.models.V1LocalObjectReference);

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$ImagePullSecretsNested<A> setNewImagePullSecretLike(int, io.kubernetes.client.openapi.models.V1LocalObjectReference);

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$ImagePullSecretsNested<A> editImagePullSecret(int);

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$ImagePullSecretsNested<A> editFirstImagePullSecret();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$ImagePullSecretsNested<A> editLastImagePullSecret();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$ImagePullSecretsNested<A> editMatchingImagePullSecret(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1LocalObjectReferenceBuilder>);

  public abstract A addToInitContainers(int, io.kubernetes.client.openapi.models.V1Container);

  public abstract A setToInitContainers(int, io.kubernetes.client.openapi.models.V1Container);

  public abstract A addToInitContainers(io.kubernetes.client.openapi.models.V1Container...);

  public abstract A addAllToInitContainers(java.util.Collection<io.kubernetes.client.openapi.models.V1Container>);

  public abstract A removeFromInitContainers(io.kubernetes.client.openapi.models.V1Container...);

  public abstract A removeAllFromInitContainers(java.util.Collection<io.kubernetes.client.openapi.models.V1Container>);

  public abstract A removeMatchingFromInitContainers(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1ContainerBuilder>);

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1Container> getInitContainers();

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1Container> buildInitContainers();

  public abstract io.kubernetes.client.openapi.models.V1Container buildInitContainer(int);

  public abstract io.kubernetes.client.openapi.models.V1Container buildFirstInitContainer();

  public abstract io.kubernetes.client.openapi.models.V1Container buildLastInitContainer();

  public abstract io.kubernetes.client.openapi.models.V1Container buildMatchingInitContainer(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1ContainerBuilder>);

  public abstract java.lang.Boolean hasMatchingInitContainer(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1ContainerBuilder>);

  public abstract A withInitContainers(java.util.List<io.kubernetes.client.openapi.models.V1Container>);

  public abstract A withInitContainers(io.kubernetes.client.openapi.models.V1Container...);

  public abstract java.lang.Boolean hasInitContainers();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$InitContainersNested<A> addNewInitContainer();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$InitContainersNested<A> addNewInitContainerLike(io.kubernetes.client.openapi.models.V1Container);

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$InitContainersNested<A> setNewInitContainerLike(int, io.kubernetes.client.openapi.models.V1Container);

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$InitContainersNested<A> editInitContainer(int);

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$InitContainersNested<A> editFirstInitContainer();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$InitContainersNested<A> editLastInitContainer();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$InitContainersNested<A> editMatchingInitContainer(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1ContainerBuilder>);

  public abstract java.lang.String getNodeName();

  public abstract A withNodeName(java.lang.String);

  public abstract java.lang.Boolean hasNodeName();

  public abstract A withNewNodeName(java.lang.String);

  public abstract A withNewNodeName(java.lang.StringBuilder);

  public abstract A withNewNodeName(java.lang.StringBuffer);

  public abstract A addToNodeSelector(java.lang.String, java.lang.String);

  public abstract A addToNodeSelector(java.util.Map<java.lang.String, java.lang.String>);

  public abstract A removeFromNodeSelector(java.lang.String);

  public abstract A removeFromNodeSelector(java.util.Map<java.lang.String, java.lang.String>);

  public abstract java.util.Map<java.lang.String, java.lang.String> getNodeSelector();

  public abstract A withNodeSelector(java.util.Map<java.lang.String, java.lang.String>);

  public abstract java.lang.Boolean hasNodeSelector();

  public abstract A addToOverhead(java.lang.String, io.kubernetes.client.custom.Quantity);

  public abstract A addToOverhead(java.util.Map<java.lang.String, io.kubernetes.client.custom.Quantity>);

  public abstract A removeFromOverhead(java.lang.String);

  public abstract A removeFromOverhead(java.util.Map<java.lang.String, io.kubernetes.client.custom.Quantity>);

  public abstract java.util.Map<java.lang.String, io.kubernetes.client.custom.Quantity> getOverhead();

  public abstract A withOverhead(java.util.Map<java.lang.String, io.kubernetes.client.custom.Quantity>);

  public abstract java.lang.Boolean hasOverhead();

  public abstract java.lang.String getPreemptionPolicy();

  public abstract A withPreemptionPolicy(java.lang.String);

  public abstract java.lang.Boolean hasPreemptionPolicy();

  public abstract A withNewPreemptionPolicy(java.lang.String);

  public abstract A withNewPreemptionPolicy(java.lang.StringBuilder);

  public abstract A withNewPreemptionPolicy(java.lang.StringBuffer);

  public abstract java.lang.Integer getPriority();

  public abstract A withPriority(java.lang.Integer);

  public abstract java.lang.Boolean hasPriority();

  public abstract java.lang.String getPriorityClassName();

  public abstract A withPriorityClassName(java.lang.String);

  public abstract java.lang.Boolean hasPriorityClassName();

  public abstract A withNewPriorityClassName(java.lang.String);

  public abstract A withNewPriorityClassName(java.lang.StringBuilder);

  public abstract A withNewPriorityClassName(java.lang.StringBuffer);

  public abstract A addToReadinessGates(int, io.kubernetes.client.openapi.models.V1PodReadinessGate);

  public abstract A setToReadinessGates(int, io.kubernetes.client.openapi.models.V1PodReadinessGate);

  public abstract A addToReadinessGates(io.kubernetes.client.openapi.models.V1PodReadinessGate...);

  public abstract A addAllToReadinessGates(java.util.Collection<io.kubernetes.client.openapi.models.V1PodReadinessGate>);

  public abstract A removeFromReadinessGates(io.kubernetes.client.openapi.models.V1PodReadinessGate...);

  public abstract A removeAllFromReadinessGates(java.util.Collection<io.kubernetes.client.openapi.models.V1PodReadinessGate>);

  public abstract A removeMatchingFromReadinessGates(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1PodReadinessGateBuilder>);

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1PodReadinessGate> getReadinessGates();

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1PodReadinessGate> buildReadinessGates();

  public abstract io.kubernetes.client.openapi.models.V1PodReadinessGate buildReadinessGate(int);

  public abstract io.kubernetes.client.openapi.models.V1PodReadinessGate buildFirstReadinessGate();

  public abstract io.kubernetes.client.openapi.models.V1PodReadinessGate buildLastReadinessGate();

  public abstract io.kubernetes.client.openapi.models.V1PodReadinessGate buildMatchingReadinessGate(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1PodReadinessGateBuilder>);

  public abstract java.lang.Boolean hasMatchingReadinessGate(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1PodReadinessGateBuilder>);

  public abstract A withReadinessGates(java.util.List<io.kubernetes.client.openapi.models.V1PodReadinessGate>);

  public abstract A withReadinessGates(io.kubernetes.client.openapi.models.V1PodReadinessGate...);

  public abstract java.lang.Boolean hasReadinessGates();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$ReadinessGatesNested<A> addNewReadinessGate();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$ReadinessGatesNested<A> addNewReadinessGateLike(io.kubernetes.client.openapi.models.V1PodReadinessGate);

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$ReadinessGatesNested<A> setNewReadinessGateLike(int, io.kubernetes.client.openapi.models.V1PodReadinessGate);

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$ReadinessGatesNested<A> editReadinessGate(int);

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$ReadinessGatesNested<A> editFirstReadinessGate();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$ReadinessGatesNested<A> editLastReadinessGate();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$ReadinessGatesNested<A> editMatchingReadinessGate(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1PodReadinessGateBuilder>);

  public abstract java.lang.String getRestartPolicy();

  public abstract A withRestartPolicy(java.lang.String);

  public abstract java.lang.Boolean hasRestartPolicy();

  public abstract A withNewRestartPolicy(java.lang.String);

  public abstract A withNewRestartPolicy(java.lang.StringBuilder);

  public abstract A withNewRestartPolicy(java.lang.StringBuffer);

  public abstract java.lang.String getRuntimeClassName();

  public abstract A withRuntimeClassName(java.lang.String);

  public abstract java.lang.Boolean hasRuntimeClassName();

  public abstract A withNewRuntimeClassName(java.lang.String);

  public abstract A withNewRuntimeClassName(java.lang.StringBuilder);

  public abstract A withNewRuntimeClassName(java.lang.StringBuffer);

  public abstract java.lang.String getSchedulerName();

  public abstract A withSchedulerName(java.lang.String);

  public abstract java.lang.Boolean hasSchedulerName();

  public abstract A withNewSchedulerName(java.lang.String);

  public abstract A withNewSchedulerName(java.lang.StringBuilder);

  public abstract A withNewSchedulerName(java.lang.StringBuffer);

  public abstract io.kubernetes.client.openapi.models.V1PodSecurityContext getSecurityContext();

  public abstract io.kubernetes.client.openapi.models.V1PodSecurityContext buildSecurityContext();

  public abstract A withSecurityContext(io.kubernetes.client.openapi.models.V1PodSecurityContext);

  public abstract java.lang.Boolean hasSecurityContext();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$SecurityContextNested<A> withNewSecurityContext();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$SecurityContextNested<A> withNewSecurityContextLike(io.kubernetes.client.openapi.models.V1PodSecurityContext);

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$SecurityContextNested<A> editSecurityContext();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$SecurityContextNested<A> editOrNewSecurityContext();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$SecurityContextNested<A> editOrNewSecurityContextLike(io.kubernetes.client.openapi.models.V1PodSecurityContext);

  public abstract java.lang.String getServiceAccount();

  public abstract A withServiceAccount(java.lang.String);

  public abstract java.lang.Boolean hasServiceAccount();

  public abstract A withNewServiceAccount(java.lang.String);

  public abstract A withNewServiceAccount(java.lang.StringBuilder);

  public abstract A withNewServiceAccount(java.lang.StringBuffer);

  public abstract java.lang.String getServiceAccountName();

  public abstract A withServiceAccountName(java.lang.String);

  public abstract java.lang.Boolean hasServiceAccountName();

  public abstract A withNewServiceAccountName(java.lang.String);

  public abstract A withNewServiceAccountName(java.lang.StringBuilder);

  public abstract A withNewServiceAccountName(java.lang.StringBuffer);

  public abstract java.lang.Boolean isSetHostnameAsFQDN();

  public abstract A withSetHostnameAsFQDN(java.lang.Boolean);

  public abstract java.lang.Boolean hasSetHostnameAsFQDN();

  public abstract A withNewSetHostnameAsFQDN(java.lang.String);

  public abstract A withNewSetHostnameAsFQDN(boolean);

  public abstract java.lang.Boolean isShareProcessNamespace();

  public abstract A withShareProcessNamespace(java.lang.Boolean);

  public abstract java.lang.Boolean hasShareProcessNamespace();

  public abstract A withNewShareProcessNamespace(java.lang.String);

  public abstract A withNewShareProcessNamespace(boolean);

  public abstract java.lang.String getSubdomain();

  public abstract A withSubdomain(java.lang.String);

  public abstract java.lang.Boolean hasSubdomain();

  public abstract A withNewSubdomain(java.lang.String);

  public abstract A withNewSubdomain(java.lang.StringBuilder);

  public abstract A withNewSubdomain(java.lang.StringBuffer);

  public abstract java.lang.Long getTerminationGracePeriodSeconds();

  public abstract A withTerminationGracePeriodSeconds(java.lang.Long);

  public abstract java.lang.Boolean hasTerminationGracePeriodSeconds();

  public abstract A addToTolerations(int, io.kubernetes.client.openapi.models.V1Toleration);

  public abstract A setToTolerations(int, io.kubernetes.client.openapi.models.V1Toleration);

  public abstract A addToTolerations(io.kubernetes.client.openapi.models.V1Toleration...);

  public abstract A addAllToTolerations(java.util.Collection<io.kubernetes.client.openapi.models.V1Toleration>);

  public abstract A removeFromTolerations(io.kubernetes.client.openapi.models.V1Toleration...);

  public abstract A removeAllFromTolerations(java.util.Collection<io.kubernetes.client.openapi.models.V1Toleration>);

  public abstract A removeMatchingFromTolerations(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1TolerationBuilder>);

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1Toleration> getTolerations();

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1Toleration> buildTolerations();

  public abstract io.kubernetes.client.openapi.models.V1Toleration buildToleration(int);

  public abstract io.kubernetes.client.openapi.models.V1Toleration buildFirstToleration();

  public abstract io.kubernetes.client.openapi.models.V1Toleration buildLastToleration();

  public abstract io.kubernetes.client.openapi.models.V1Toleration buildMatchingToleration(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1TolerationBuilder>);

  public abstract java.lang.Boolean hasMatchingToleration(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1TolerationBuilder>);

  public abstract A withTolerations(java.util.List<io.kubernetes.client.openapi.models.V1Toleration>);

  public abstract A withTolerations(io.kubernetes.client.openapi.models.V1Toleration...);

  public abstract java.lang.Boolean hasTolerations();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$TolerationsNested<A> addNewToleration();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$TolerationsNested<A> addNewTolerationLike(io.kubernetes.client.openapi.models.V1Toleration);

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$TolerationsNested<A> setNewTolerationLike(int, io.kubernetes.client.openapi.models.V1Toleration);

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$TolerationsNested<A> editToleration(int);

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$TolerationsNested<A> editFirstToleration();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$TolerationsNested<A> editLastToleration();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$TolerationsNested<A> editMatchingToleration(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1TolerationBuilder>);

  public abstract A addToTopologySpreadConstraints(int, io.kubernetes.client.openapi.models.V1TopologySpreadConstraint);

  public abstract A setToTopologySpreadConstraints(int, io.kubernetes.client.openapi.models.V1TopologySpreadConstraint);

  public abstract A addToTopologySpreadConstraints(io.kubernetes.client.openapi.models.V1TopologySpreadConstraint...);

  public abstract A addAllToTopologySpreadConstraints(java.util.Collection<io.kubernetes.client.openapi.models.V1TopologySpreadConstraint>);

  public abstract A removeFromTopologySpreadConstraints(io.kubernetes.client.openapi.models.V1TopologySpreadConstraint...);

  public abstract A removeAllFromTopologySpreadConstraints(java.util.Collection<io.kubernetes.client.openapi.models.V1TopologySpreadConstraint>);

  public abstract A removeMatchingFromTopologySpreadConstraints(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1TopologySpreadConstraintBuilder>);

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1TopologySpreadConstraint> getTopologySpreadConstraints();

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1TopologySpreadConstraint> buildTopologySpreadConstraints();

  public abstract io.kubernetes.client.openapi.models.V1TopologySpreadConstraint buildTopologySpreadConstraint(int);

  public abstract io.kubernetes.client.openapi.models.V1TopologySpreadConstraint buildFirstTopologySpreadConstraint();

  public abstract io.kubernetes.client.openapi.models.V1TopologySpreadConstraint buildLastTopologySpreadConstraint();

  public abstract io.kubernetes.client.openapi.models.V1TopologySpreadConstraint buildMatchingTopologySpreadConstraint(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1TopologySpreadConstraintBuilder>);

  public abstract java.lang.Boolean hasMatchingTopologySpreadConstraint(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1TopologySpreadConstraintBuilder>);

  public abstract A withTopologySpreadConstraints(java.util.List<io.kubernetes.client.openapi.models.V1TopologySpreadConstraint>);

  public abstract A withTopologySpreadConstraints(io.kubernetes.client.openapi.models.V1TopologySpreadConstraint...);

  public abstract java.lang.Boolean hasTopologySpreadConstraints();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$TopologySpreadConstraintsNested<A> addNewTopologySpreadConstraint();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$TopologySpreadConstraintsNested<A> addNewTopologySpreadConstraintLike(io.kubernetes.client.openapi.models.V1TopologySpreadConstraint);

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$TopologySpreadConstraintsNested<A> setNewTopologySpreadConstraintLike(int, io.kubernetes.client.openapi.models.V1TopologySpreadConstraint);

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$TopologySpreadConstraintsNested<A> editTopologySpreadConstraint(int);

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$TopologySpreadConstraintsNested<A> editFirstTopologySpreadConstraint();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$TopologySpreadConstraintsNested<A> editLastTopologySpreadConstraint();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$TopologySpreadConstraintsNested<A> editMatchingTopologySpreadConstraint(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1TopologySpreadConstraintBuilder>);

  public abstract A addToVolumes(int, io.kubernetes.client.openapi.models.V1Volume);

  public abstract A setToVolumes(int, io.kubernetes.client.openapi.models.V1Volume);

  public abstract A addToVolumes(io.kubernetes.client.openapi.models.V1Volume...);

  public abstract A addAllToVolumes(java.util.Collection<io.kubernetes.client.openapi.models.V1Volume>);

  public abstract A removeFromVolumes(io.kubernetes.client.openapi.models.V1Volume...);

  public abstract A removeAllFromVolumes(java.util.Collection<io.kubernetes.client.openapi.models.V1Volume>);

  public abstract A removeMatchingFromVolumes(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1VolumeBuilder>);

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1Volume> getVolumes();

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1Volume> buildVolumes();

  public abstract io.kubernetes.client.openapi.models.V1Volume buildVolume(int);

  public abstract io.kubernetes.client.openapi.models.V1Volume buildFirstVolume();

  public abstract io.kubernetes.client.openapi.models.V1Volume buildLastVolume();

  public abstract io.kubernetes.client.openapi.models.V1Volume buildMatchingVolume(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1VolumeBuilder>);

  public abstract java.lang.Boolean hasMatchingVolume(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1VolumeBuilder>);

  public abstract A withVolumes(java.util.List<io.kubernetes.client.openapi.models.V1Volume>);

  public abstract A withVolumes(io.kubernetes.client.openapi.models.V1Volume...);

  public abstract java.lang.Boolean hasVolumes();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$VolumesNested<A> addNewVolume();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$VolumesNested<A> addNewVolumeLike(io.kubernetes.client.openapi.models.V1Volume);

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$VolumesNested<A> setNewVolumeLike(int, io.kubernetes.client.openapi.models.V1Volume);

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$VolumesNested<A> editVolume(int);

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$VolumesNested<A> editFirstVolume();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$VolumesNested<A> editLastVolume();

  public abstract io.kubernetes.client.openapi.models.V1PodSpecFluent$VolumesNested<A> editMatchingVolume(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1VolumeBuilder>);
}
