Compiled from "V1LoadBalancerIngressFluent.java"
public interface io.kubernetes.client.openapi.models.V1LoadBalancerIngressFluent<A extends io.kubernetes.client.openapi.models.V1LoadBalancerIngressFluent<A>> extends io.kubernetes.client.fluent.Fluent<A> {
  public abstract java.lang.String getHostname();

  public abstract A withHostname(java.lang.String);

  public abstract java.lang.Boolean hasHostname();

  public abstract A withNewHostname(java.lang.String);

  public abstract A withNewHostname(java.lang.StringBuilder);

  public abstract A withNewHostname(java.lang.StringBuffer);

  public abstract java.lang.String getIp();

  public abstract A withIp(java.lang.String);

  public abstract java.lang.Boolean hasIp();

  public abstract A withNewIp(java.lang.String);

  public abstract A withNewIp(java.lang.StringBuilder);

  public abstract A withNewIp(java.lang.StringBuffer);

  public abstract A addToPorts(int, io.kubernetes.client.openapi.models.V1PortStatus);

  public abstract A setToPorts(int, io.kubernetes.client.openapi.models.V1PortStatus);

  public abstract A addToPorts(io.kubernetes.client.openapi.models.V1PortStatus...);

  public abstract A addAllToPorts(java.util.Collection<io.kubernetes.client.openapi.models.V1PortStatus>);

  public abstract A removeFromPorts(io.kubernetes.client.openapi.models.V1PortStatus...);

  public abstract A removeAllFromPorts(java.util.Collection<io.kubernetes.client.openapi.models.V1PortStatus>);

  public abstract A removeMatchingFromPorts(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1PortStatusBuilder>);

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1PortStatus> getPorts();

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1PortStatus> buildPorts();

  public abstract io.kubernetes.client.openapi.models.V1PortStatus buildPort(int);

  public abstract io.kubernetes.client.openapi.models.V1PortStatus buildFirstPort();

  public abstract io.kubernetes.client.openapi.models.V1PortStatus buildLastPort();

  public abstract io.kubernetes.client.openapi.models.V1PortStatus buildMatchingPort(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1PortStatusBuilder>);

  public abstract java.lang.Boolean hasMatchingPort(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1PortStatusBuilder>);

  public abstract A withPorts(java.util.List<io.kubernetes.client.openapi.models.V1PortStatus>);

  public abstract A withPorts(io.kubernetes.client.openapi.models.V1PortStatus...);

  public abstract java.lang.Boolean hasPorts();

  public abstract io.kubernetes.client.openapi.models.V1LoadBalancerIngressFluent$PortsNested<A> addNewPort();

  public abstract io.kubernetes.client.openapi.models.V1LoadBalancerIngressFluent$PortsNested<A> addNewPortLike(io.kubernetes.client.openapi.models.V1PortStatus);

  public abstract io.kubernetes.client.openapi.models.V1LoadBalancerIngressFluent$PortsNested<A> setNewPortLike(int, io.kubernetes.client.openapi.models.V1PortStatus);

  public abstract io.kubernetes.client.openapi.models.V1LoadBalancerIngressFluent$PortsNested<A> editPort(int);

  public abstract io.kubernetes.client.openapi.models.V1LoadBalancerIngressFluent$PortsNested<A> editFirstPort();

  public abstract io.kubernetes.client.openapi.models.V1LoadBalancerIngressFluent$PortsNested<A> editLastPort();

  public abstract io.kubernetes.client.openapi.models.V1LoadBalancerIngressFluent$PortsNested<A> editMatchingPort(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1PortStatusBuilder>);
}
