Compiled from "V1ContainerFluent.java"
public interface io.kubernetes.client.openapi.models.V1ContainerFluent<A extends io.kubernetes.client.openapi.models.V1ContainerFluent<A>> extends io.kubernetes.client.fluent.Fluent<A> {
  public abstract A addToArgs(int, java.lang.String);

  public abstract A setToArgs(int, java.lang.String);

  public abstract A addToArgs(java.lang.String...);

  public abstract A addAllToArgs(java.util.Collection<java.lang.String>);

  public abstract A removeFromArgs(java.lang.String...);

  public abstract A removeAllFromArgs(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getArgs();

  public abstract java.lang.String getArg(int);

  public abstract java.lang.String getFirstArg();

  public abstract java.lang.String getLastArg();

  public abstract java.lang.String getMatchingArg(io.kubernetes.client.fluent.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingArg(io.kubernetes.client.fluent.Predicate<java.lang.String>);

  public abstract A withArgs(java.util.List<java.lang.String>);

  public abstract A withArgs(java.lang.String...);

  public abstract java.lang.Boolean hasArgs();

  public abstract A addNewArg(java.lang.String);

  public abstract A addNewArg(java.lang.StringBuilder);

  public abstract A addNewArg(java.lang.StringBuffer);

  public abstract A addToCommand(int, java.lang.String);

  public abstract A setToCommand(int, java.lang.String);

  public abstract A addToCommand(java.lang.String...);

  public abstract A addAllToCommand(java.util.Collection<java.lang.String>);

  public abstract A removeFromCommand(java.lang.String...);

  public abstract A removeAllFromCommand(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getCommand();

  public abstract java.lang.String getCommand(int);

  public abstract java.lang.String getFirstCommand();

  public abstract java.lang.String getLastCommand();

  public abstract java.lang.String getMatchingCommand(io.kubernetes.client.fluent.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingCommand(io.kubernetes.client.fluent.Predicate<java.lang.String>);

  public abstract A withCommand(java.util.List<java.lang.String>);

  public abstract A withCommand(java.lang.String...);

  public abstract java.lang.Boolean hasCommand();

  public abstract A addNewCommand(java.lang.String);

  public abstract A addNewCommand(java.lang.StringBuilder);

  public abstract A addNewCommand(java.lang.StringBuffer);

  public abstract A addToEnv(int, io.kubernetes.client.openapi.models.V1EnvVar);

  public abstract A setToEnv(int, io.kubernetes.client.openapi.models.V1EnvVar);

  public abstract A addToEnv(io.kubernetes.client.openapi.models.V1EnvVar...);

  public abstract A addAllToEnv(java.util.Collection<io.kubernetes.client.openapi.models.V1EnvVar>);

  public abstract A removeFromEnv(io.kubernetes.client.openapi.models.V1EnvVar...);

  public abstract A removeAllFromEnv(java.util.Collection<io.kubernetes.client.openapi.models.V1EnvVar>);

  public abstract A removeMatchingFromEnv(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1EnvVarBuilder>);

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1EnvVar> getEnv();

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1EnvVar> buildEnv();

  public abstract io.kubernetes.client.openapi.models.V1EnvVar buildEnv(int);

  public abstract io.kubernetes.client.openapi.models.V1EnvVar buildFirstEnv();

  public abstract io.kubernetes.client.openapi.models.V1EnvVar buildLastEnv();

  public abstract io.kubernetes.client.openapi.models.V1EnvVar buildMatchingEnv(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1EnvVarBuilder>);

  public abstract java.lang.Boolean hasMatchingEnv(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1EnvVarBuilder>);

  public abstract A withEnv(java.util.List<io.kubernetes.client.openapi.models.V1EnvVar>);

  public abstract A withEnv(io.kubernetes.client.openapi.models.V1EnvVar...);

  public abstract java.lang.Boolean hasEnv();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$EnvNested<A> addNewEnv();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$EnvNested<A> addNewEnvLike(io.kubernetes.client.openapi.models.V1EnvVar);

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$EnvNested<A> setNewEnvLike(int, io.kubernetes.client.openapi.models.V1EnvVar);

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$EnvNested<A> editEnv(int);

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$EnvNested<A> editFirstEnv();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$EnvNested<A> editLastEnv();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$EnvNested<A> editMatchingEnv(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1EnvVarBuilder>);

  public abstract A addToEnvFrom(int, io.kubernetes.client.openapi.models.V1EnvFromSource);

  public abstract A setToEnvFrom(int, io.kubernetes.client.openapi.models.V1EnvFromSource);

  public abstract A addToEnvFrom(io.kubernetes.client.openapi.models.V1EnvFromSource...);

  public abstract A addAllToEnvFrom(java.util.Collection<io.kubernetes.client.openapi.models.V1EnvFromSource>);

  public abstract A removeFromEnvFrom(io.kubernetes.client.openapi.models.V1EnvFromSource...);

  public abstract A removeAllFromEnvFrom(java.util.Collection<io.kubernetes.client.openapi.models.V1EnvFromSource>);

  public abstract A removeMatchingFromEnvFrom(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1EnvFromSourceBuilder>);

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1EnvFromSource> getEnvFrom();

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1EnvFromSource> buildEnvFrom();

  public abstract io.kubernetes.client.openapi.models.V1EnvFromSource buildEnvFrom(int);

  public abstract io.kubernetes.client.openapi.models.V1EnvFromSource buildFirstEnvFrom();

  public abstract io.kubernetes.client.openapi.models.V1EnvFromSource buildLastEnvFrom();

  public abstract io.kubernetes.client.openapi.models.V1EnvFromSource buildMatchingEnvFrom(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1EnvFromSourceBuilder>);

  public abstract java.lang.Boolean hasMatchingEnvFrom(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1EnvFromSourceBuilder>);

  public abstract A withEnvFrom(java.util.List<io.kubernetes.client.openapi.models.V1EnvFromSource>);

  public abstract A withEnvFrom(io.kubernetes.client.openapi.models.V1EnvFromSource...);

  public abstract java.lang.Boolean hasEnvFrom();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$EnvFromNested<A> addNewEnvFrom();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$EnvFromNested<A> addNewEnvFromLike(io.kubernetes.client.openapi.models.V1EnvFromSource);

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$EnvFromNested<A> setNewEnvFromLike(int, io.kubernetes.client.openapi.models.V1EnvFromSource);

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$EnvFromNested<A> editEnvFrom(int);

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$EnvFromNested<A> editFirstEnvFrom();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$EnvFromNested<A> editLastEnvFrom();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$EnvFromNested<A> editMatchingEnvFrom(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1EnvFromSourceBuilder>);

  public abstract java.lang.String getImage();

  public abstract A withImage(java.lang.String);

  public abstract java.lang.Boolean hasImage();

  public abstract A withNewImage(java.lang.String);

  public abstract A withNewImage(java.lang.StringBuilder);

  public abstract A withNewImage(java.lang.StringBuffer);

  public abstract java.lang.String getImagePullPolicy();

  public abstract A withImagePullPolicy(java.lang.String);

  public abstract java.lang.Boolean hasImagePullPolicy();

  public abstract A withNewImagePullPolicy(java.lang.String);

  public abstract A withNewImagePullPolicy(java.lang.StringBuilder);

  public abstract A withNewImagePullPolicy(java.lang.StringBuffer);

  public abstract io.kubernetes.client.openapi.models.V1Lifecycle getLifecycle();

  public abstract io.kubernetes.client.openapi.models.V1Lifecycle buildLifecycle();

  public abstract A withLifecycle(io.kubernetes.client.openapi.models.V1Lifecycle);

  public abstract java.lang.Boolean hasLifecycle();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$LifecycleNested<A> withNewLifecycle();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$LifecycleNested<A> withNewLifecycleLike(io.kubernetes.client.openapi.models.V1Lifecycle);

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$LifecycleNested<A> editLifecycle();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$LifecycleNested<A> editOrNewLifecycle();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$LifecycleNested<A> editOrNewLifecycleLike(io.kubernetes.client.openapi.models.V1Lifecycle);

  public abstract io.kubernetes.client.openapi.models.V1Probe getLivenessProbe();

  public abstract io.kubernetes.client.openapi.models.V1Probe buildLivenessProbe();

  public abstract A withLivenessProbe(io.kubernetes.client.openapi.models.V1Probe);

  public abstract java.lang.Boolean hasLivenessProbe();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$LivenessProbeNested<A> withNewLivenessProbe();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$LivenessProbeNested<A> withNewLivenessProbeLike(io.kubernetes.client.openapi.models.V1Probe);

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$LivenessProbeNested<A> editLivenessProbe();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$LivenessProbeNested<A> editOrNewLivenessProbe();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$LivenessProbeNested<A> editOrNewLivenessProbeLike(io.kubernetes.client.openapi.models.V1Probe);

  public abstract java.lang.String getName();

  public abstract A withName(java.lang.String);

  public abstract java.lang.Boolean hasName();

  public abstract A withNewName(java.lang.String);

  public abstract A withNewName(java.lang.StringBuilder);

  public abstract A withNewName(java.lang.StringBuffer);

  public abstract A addToPorts(int, io.kubernetes.client.openapi.models.V1ContainerPort);

  public abstract A setToPorts(int, io.kubernetes.client.openapi.models.V1ContainerPort);

  public abstract A addToPorts(io.kubernetes.client.openapi.models.V1ContainerPort...);

  public abstract A addAllToPorts(java.util.Collection<io.kubernetes.client.openapi.models.V1ContainerPort>);

  public abstract A removeFromPorts(io.kubernetes.client.openapi.models.V1ContainerPort...);

  public abstract A removeAllFromPorts(java.util.Collection<io.kubernetes.client.openapi.models.V1ContainerPort>);

  public abstract A removeMatchingFromPorts(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1ContainerPortBuilder>);

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1ContainerPort> getPorts();

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1ContainerPort> buildPorts();

  public abstract io.kubernetes.client.openapi.models.V1ContainerPort buildPort(int);

  public abstract io.kubernetes.client.openapi.models.V1ContainerPort buildFirstPort();

  public abstract io.kubernetes.client.openapi.models.V1ContainerPort buildLastPort();

  public abstract io.kubernetes.client.openapi.models.V1ContainerPort buildMatchingPort(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1ContainerPortBuilder>);

  public abstract java.lang.Boolean hasMatchingPort(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1ContainerPortBuilder>);

  public abstract A withPorts(java.util.List<io.kubernetes.client.openapi.models.V1ContainerPort>);

  public abstract A withPorts(io.kubernetes.client.openapi.models.V1ContainerPort...);

  public abstract java.lang.Boolean hasPorts();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$PortsNested<A> addNewPort();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$PortsNested<A> addNewPortLike(io.kubernetes.client.openapi.models.V1ContainerPort);

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$PortsNested<A> setNewPortLike(int, io.kubernetes.client.openapi.models.V1ContainerPort);

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$PortsNested<A> editPort(int);

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$PortsNested<A> editFirstPort();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$PortsNested<A> editLastPort();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$PortsNested<A> editMatchingPort(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1ContainerPortBuilder>);

  public abstract io.kubernetes.client.openapi.models.V1Probe getReadinessProbe();

  public abstract io.kubernetes.client.openapi.models.V1Probe buildReadinessProbe();

  public abstract A withReadinessProbe(io.kubernetes.client.openapi.models.V1Probe);

  public abstract java.lang.Boolean hasReadinessProbe();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$ReadinessProbeNested<A> withNewReadinessProbe();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$ReadinessProbeNested<A> withNewReadinessProbeLike(io.kubernetes.client.openapi.models.V1Probe);

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$ReadinessProbeNested<A> editReadinessProbe();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$ReadinessProbeNested<A> editOrNewReadinessProbe();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$ReadinessProbeNested<A> editOrNewReadinessProbeLike(io.kubernetes.client.openapi.models.V1Probe);

  public abstract io.kubernetes.client.openapi.models.V1ResourceRequirements getResources();

  public abstract io.kubernetes.client.openapi.models.V1ResourceRequirements buildResources();

  public abstract A withResources(io.kubernetes.client.openapi.models.V1ResourceRequirements);

  public abstract java.lang.Boolean hasResources();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$ResourcesNested<A> withNewResources();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$ResourcesNested<A> withNewResourcesLike(io.kubernetes.client.openapi.models.V1ResourceRequirements);

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$ResourcesNested<A> editResources();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$ResourcesNested<A> editOrNewResources();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$ResourcesNested<A> editOrNewResourcesLike(io.kubernetes.client.openapi.models.V1ResourceRequirements);

  public abstract io.kubernetes.client.openapi.models.V1SecurityContext getSecurityContext();

  public abstract io.kubernetes.client.openapi.models.V1SecurityContext buildSecurityContext();

  public abstract A withSecurityContext(io.kubernetes.client.openapi.models.V1SecurityContext);

  public abstract java.lang.Boolean hasSecurityContext();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$SecurityContextNested<A> withNewSecurityContext();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$SecurityContextNested<A> withNewSecurityContextLike(io.kubernetes.client.openapi.models.V1SecurityContext);

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$SecurityContextNested<A> editSecurityContext();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$SecurityContextNested<A> editOrNewSecurityContext();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$SecurityContextNested<A> editOrNewSecurityContextLike(io.kubernetes.client.openapi.models.V1SecurityContext);

  public abstract io.kubernetes.client.openapi.models.V1Probe getStartupProbe();

  public abstract io.kubernetes.client.openapi.models.V1Probe buildStartupProbe();

  public abstract A withStartupProbe(io.kubernetes.client.openapi.models.V1Probe);

  public abstract java.lang.Boolean hasStartupProbe();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$StartupProbeNested<A> withNewStartupProbe();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$StartupProbeNested<A> withNewStartupProbeLike(io.kubernetes.client.openapi.models.V1Probe);

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$StartupProbeNested<A> editStartupProbe();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$StartupProbeNested<A> editOrNewStartupProbe();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$StartupProbeNested<A> editOrNewStartupProbeLike(io.kubernetes.client.openapi.models.V1Probe);

  public abstract java.lang.Boolean isStdin();

  public abstract A withStdin(java.lang.Boolean);

  public abstract java.lang.Boolean hasStdin();

  public abstract A withNewStdin(java.lang.String);

  public abstract A withNewStdin(boolean);

  public abstract java.lang.Boolean isStdinOnce();

  public abstract A withStdinOnce(java.lang.Boolean);

  public abstract java.lang.Boolean hasStdinOnce();

  public abstract A withNewStdinOnce(java.lang.String);

  public abstract A withNewStdinOnce(boolean);

  public abstract java.lang.String getTerminationMessagePath();

  public abstract A withTerminationMessagePath(java.lang.String);

  public abstract java.lang.Boolean hasTerminationMessagePath();

  public abstract A withNewTerminationMessagePath(java.lang.String);

  public abstract A withNewTerminationMessagePath(java.lang.StringBuilder);

  public abstract A withNewTerminationMessagePath(java.lang.StringBuffer);

  public abstract java.lang.String getTerminationMessagePolicy();

  public abstract A withTerminationMessagePolicy(java.lang.String);

  public abstract java.lang.Boolean hasTerminationMessagePolicy();

  public abstract A withNewTerminationMessagePolicy(java.lang.String);

  public abstract A withNewTerminationMessagePolicy(java.lang.StringBuilder);

  public abstract A withNewTerminationMessagePolicy(java.lang.StringBuffer);

  public abstract java.lang.Boolean isTty();

  public abstract A withTty(java.lang.Boolean);

  public abstract java.lang.Boolean hasTty();

  public abstract A withNewTty(java.lang.String);

  public abstract A withNewTty(boolean);

  public abstract A addToVolumeDevices(int, io.kubernetes.client.openapi.models.V1VolumeDevice);

  public abstract A setToVolumeDevices(int, io.kubernetes.client.openapi.models.V1VolumeDevice);

  public abstract A addToVolumeDevices(io.kubernetes.client.openapi.models.V1VolumeDevice...);

  public abstract A addAllToVolumeDevices(java.util.Collection<io.kubernetes.client.openapi.models.V1VolumeDevice>);

  public abstract A removeFromVolumeDevices(io.kubernetes.client.openapi.models.V1VolumeDevice...);

  public abstract A removeAllFromVolumeDevices(java.util.Collection<io.kubernetes.client.openapi.models.V1VolumeDevice>);

  public abstract A removeMatchingFromVolumeDevices(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1VolumeDeviceBuilder>);

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1VolumeDevice> getVolumeDevices();

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1VolumeDevice> buildVolumeDevices();

  public abstract io.kubernetes.client.openapi.models.V1VolumeDevice buildVolumeDevice(int);

  public abstract io.kubernetes.client.openapi.models.V1VolumeDevice buildFirstVolumeDevice();

  public abstract io.kubernetes.client.openapi.models.V1VolumeDevice buildLastVolumeDevice();

  public abstract io.kubernetes.client.openapi.models.V1VolumeDevice buildMatchingVolumeDevice(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1VolumeDeviceBuilder>);

  public abstract java.lang.Boolean hasMatchingVolumeDevice(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1VolumeDeviceBuilder>);

  public abstract A withVolumeDevices(java.util.List<io.kubernetes.client.openapi.models.V1VolumeDevice>);

  public abstract A withVolumeDevices(io.kubernetes.client.openapi.models.V1VolumeDevice...);

  public abstract java.lang.Boolean hasVolumeDevices();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$VolumeDevicesNested<A> addNewVolumeDevice();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$VolumeDevicesNested<A> addNewVolumeDeviceLike(io.kubernetes.client.openapi.models.V1VolumeDevice);

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$VolumeDevicesNested<A> setNewVolumeDeviceLike(int, io.kubernetes.client.openapi.models.V1VolumeDevice);

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$VolumeDevicesNested<A> editVolumeDevice(int);

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$VolumeDevicesNested<A> editFirstVolumeDevice();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$VolumeDevicesNested<A> editLastVolumeDevice();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$VolumeDevicesNested<A> editMatchingVolumeDevice(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1VolumeDeviceBuilder>);

  public abstract A addToVolumeMounts(int, io.kubernetes.client.openapi.models.V1VolumeMount);

  public abstract A setToVolumeMounts(int, io.kubernetes.client.openapi.models.V1VolumeMount);

  public abstract A addToVolumeMounts(io.kubernetes.client.openapi.models.V1VolumeMount...);

  public abstract A addAllToVolumeMounts(java.util.Collection<io.kubernetes.client.openapi.models.V1VolumeMount>);

  public abstract A removeFromVolumeMounts(io.kubernetes.client.openapi.models.V1VolumeMount...);

  public abstract A removeAllFromVolumeMounts(java.util.Collection<io.kubernetes.client.openapi.models.V1VolumeMount>);

  public abstract A removeMatchingFromVolumeMounts(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1VolumeMountBuilder>);

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1VolumeMount> getVolumeMounts();

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1VolumeMount> buildVolumeMounts();

  public abstract io.kubernetes.client.openapi.models.V1VolumeMount buildVolumeMount(int);

  public abstract io.kubernetes.client.openapi.models.V1VolumeMount buildFirstVolumeMount();

  public abstract io.kubernetes.client.openapi.models.V1VolumeMount buildLastVolumeMount();

  public abstract io.kubernetes.client.openapi.models.V1VolumeMount buildMatchingVolumeMount(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1VolumeMountBuilder>);

  public abstract java.lang.Boolean hasMatchingVolumeMount(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1VolumeMountBuilder>);

  public abstract A withVolumeMounts(java.util.List<io.kubernetes.client.openapi.models.V1VolumeMount>);

  public abstract A withVolumeMounts(io.kubernetes.client.openapi.models.V1VolumeMount...);

  public abstract java.lang.Boolean hasVolumeMounts();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$VolumeMountsNested<A> addNewVolumeMount();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$VolumeMountsNested<A> addNewVolumeMountLike(io.kubernetes.client.openapi.models.V1VolumeMount);

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$VolumeMountsNested<A> setNewVolumeMountLike(int, io.kubernetes.client.openapi.models.V1VolumeMount);

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$VolumeMountsNested<A> editVolumeMount(int);

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$VolumeMountsNested<A> editFirstVolumeMount();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$VolumeMountsNested<A> editLastVolumeMount();

  public abstract io.kubernetes.client.openapi.models.V1ContainerFluent$VolumeMountsNested<A> editMatchingVolumeMount(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1VolumeMountBuilder>);

  public abstract java.lang.String getWorkingDir();

  public abstract A withWorkingDir(java.lang.String);

  public abstract java.lang.Boolean hasWorkingDir();

  public abstract A withNewWorkingDir(java.lang.String);

  public abstract A withNewWorkingDir(java.lang.StringBuilder);

  public abstract A withNewWorkingDir(java.lang.StringBuffer);
}
