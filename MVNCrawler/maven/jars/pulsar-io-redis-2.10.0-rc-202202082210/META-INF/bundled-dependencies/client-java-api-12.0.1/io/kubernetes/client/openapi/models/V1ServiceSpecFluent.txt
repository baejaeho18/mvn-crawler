Compiled from "V1ServiceSpecFluent.java"
public interface io.kubernetes.client.openapi.models.V1ServiceSpecFluent<A extends io.kubernetes.client.openapi.models.V1ServiceSpecFluent<A>> extends io.kubernetes.client.fluent.Fluent<A> {
  public abstract java.lang.Boolean isAllocateLoadBalancerNodePorts();

  public abstract A withAllocateLoadBalancerNodePorts(java.lang.Boolean);

  public abstract java.lang.Boolean hasAllocateLoadBalancerNodePorts();

  public abstract A withNewAllocateLoadBalancerNodePorts(java.lang.String);

  public abstract A withNewAllocateLoadBalancerNodePorts(boolean);

  public abstract java.lang.String getClusterIP();

  public abstract A withClusterIP(java.lang.String);

  public abstract java.lang.Boolean hasClusterIP();

  public abstract A withNewClusterIP(java.lang.String);

  public abstract A withNewClusterIP(java.lang.StringBuilder);

  public abstract A withNewClusterIP(java.lang.StringBuffer);

  public abstract A addToClusterIPs(int, java.lang.String);

  public abstract A setToClusterIPs(int, java.lang.String);

  public abstract A addToClusterIPs(java.lang.String...);

  public abstract A addAllToClusterIPs(java.util.Collection<java.lang.String>);

  public abstract A removeFromClusterIPs(java.lang.String...);

  public abstract A removeAllFromClusterIPs(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getClusterIPs();

  public abstract java.lang.String getClusterIP(int);

  public abstract java.lang.String getFirstClusterIP();

  public abstract java.lang.String getLastClusterIP();

  public abstract java.lang.String getMatchingClusterIP(io.kubernetes.client.fluent.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingClusterIP(io.kubernetes.client.fluent.Predicate<java.lang.String>);

  public abstract A withClusterIPs(java.util.List<java.lang.String>);

  public abstract A withClusterIPs(java.lang.String...);

  public abstract java.lang.Boolean hasClusterIPs();

  public abstract A addNewClusterIP(java.lang.String);

  public abstract A addNewClusterIP(java.lang.StringBuilder);

  public abstract A addNewClusterIP(java.lang.StringBuffer);

  public abstract A addToExternalIPs(int, java.lang.String);

  public abstract A setToExternalIPs(int, java.lang.String);

  public abstract A addToExternalIPs(java.lang.String...);

  public abstract A addAllToExternalIPs(java.util.Collection<java.lang.String>);

  public abstract A removeFromExternalIPs(java.lang.String...);

  public abstract A removeAllFromExternalIPs(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getExternalIPs();

  public abstract java.lang.String getExternalIP(int);

  public abstract java.lang.String getFirstExternalIP();

  public abstract java.lang.String getLastExternalIP();

  public abstract java.lang.String getMatchingExternalIP(io.kubernetes.client.fluent.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingExternalIP(io.kubernetes.client.fluent.Predicate<java.lang.String>);

  public abstract A withExternalIPs(java.util.List<java.lang.String>);

  public abstract A withExternalIPs(java.lang.String...);

  public abstract java.lang.Boolean hasExternalIPs();

  public abstract A addNewExternalIP(java.lang.String);

  public abstract A addNewExternalIP(java.lang.StringBuilder);

  public abstract A addNewExternalIP(java.lang.StringBuffer);

  public abstract java.lang.String getExternalName();

  public abstract A withExternalName(java.lang.String);

  public abstract java.lang.Boolean hasExternalName();

  public abstract A withNewExternalName(java.lang.String);

  public abstract A withNewExternalName(java.lang.StringBuilder);

  public abstract A withNewExternalName(java.lang.StringBuffer);

  public abstract java.lang.String getExternalTrafficPolicy();

  public abstract A withExternalTrafficPolicy(java.lang.String);

  public abstract java.lang.Boolean hasExternalTrafficPolicy();

  public abstract A withNewExternalTrafficPolicy(java.lang.String);

  public abstract A withNewExternalTrafficPolicy(java.lang.StringBuilder);

  public abstract A withNewExternalTrafficPolicy(java.lang.StringBuffer);

  public abstract java.lang.Integer getHealthCheckNodePort();

  public abstract A withHealthCheckNodePort(java.lang.Integer);

  public abstract java.lang.Boolean hasHealthCheckNodePort();

  public abstract A addToIpFamilies(int, java.lang.String);

  public abstract A setToIpFamilies(int, java.lang.String);

  public abstract A addToIpFamilies(java.lang.String...);

  public abstract A addAllToIpFamilies(java.util.Collection<java.lang.String>);

  public abstract A removeFromIpFamilies(java.lang.String...);

  public abstract A removeAllFromIpFamilies(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getIpFamilies();

  public abstract java.lang.String getIpFamily(int);

  public abstract java.lang.String getFirstIpFamily();

  public abstract java.lang.String getLastIpFamily();

  public abstract java.lang.String getMatchingIpFamily(io.kubernetes.client.fluent.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingIpFamily(io.kubernetes.client.fluent.Predicate<java.lang.String>);

  public abstract A withIpFamilies(java.util.List<java.lang.String>);

  public abstract A withIpFamilies(java.lang.String...);

  public abstract java.lang.Boolean hasIpFamilies();

  public abstract A addNewIpFamily(java.lang.String);

  public abstract A addNewIpFamily(java.lang.StringBuilder);

  public abstract A addNewIpFamily(java.lang.StringBuffer);

  public abstract java.lang.String getIpFamilyPolicy();

  public abstract A withIpFamilyPolicy(java.lang.String);

  public abstract java.lang.Boolean hasIpFamilyPolicy();

  public abstract A withNewIpFamilyPolicy(java.lang.String);

  public abstract A withNewIpFamilyPolicy(java.lang.StringBuilder);

  public abstract A withNewIpFamilyPolicy(java.lang.StringBuffer);

  public abstract java.lang.String getLoadBalancerIP();

  public abstract A withLoadBalancerIP(java.lang.String);

  public abstract java.lang.Boolean hasLoadBalancerIP();

  public abstract A withNewLoadBalancerIP(java.lang.String);

  public abstract A withNewLoadBalancerIP(java.lang.StringBuilder);

  public abstract A withNewLoadBalancerIP(java.lang.StringBuffer);

  public abstract A addToLoadBalancerSourceRanges(int, java.lang.String);

  public abstract A setToLoadBalancerSourceRanges(int, java.lang.String);

  public abstract A addToLoadBalancerSourceRanges(java.lang.String...);

  public abstract A addAllToLoadBalancerSourceRanges(java.util.Collection<java.lang.String>);

  public abstract A removeFromLoadBalancerSourceRanges(java.lang.String...);

  public abstract A removeAllFromLoadBalancerSourceRanges(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getLoadBalancerSourceRanges();

  public abstract java.lang.String getLoadBalancerSourceRange(int);

  public abstract java.lang.String getFirstLoadBalancerSourceRange();

  public abstract java.lang.String getLastLoadBalancerSourceRange();

  public abstract java.lang.String getMatchingLoadBalancerSourceRange(io.kubernetes.client.fluent.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingLoadBalancerSourceRange(io.kubernetes.client.fluent.Predicate<java.lang.String>);

  public abstract A withLoadBalancerSourceRanges(java.util.List<java.lang.String>);

  public abstract A withLoadBalancerSourceRanges(java.lang.String...);

  public abstract java.lang.Boolean hasLoadBalancerSourceRanges();

  public abstract A addNewLoadBalancerSourceRange(java.lang.String);

  public abstract A addNewLoadBalancerSourceRange(java.lang.StringBuilder);

  public abstract A addNewLoadBalancerSourceRange(java.lang.StringBuffer);

  public abstract A addToPorts(int, io.kubernetes.client.openapi.models.V1ServicePort);

  public abstract A setToPorts(int, io.kubernetes.client.openapi.models.V1ServicePort);

  public abstract A addToPorts(io.kubernetes.client.openapi.models.V1ServicePort...);

  public abstract A addAllToPorts(java.util.Collection<io.kubernetes.client.openapi.models.V1ServicePort>);

  public abstract A removeFromPorts(io.kubernetes.client.openapi.models.V1ServicePort...);

  public abstract A removeAllFromPorts(java.util.Collection<io.kubernetes.client.openapi.models.V1ServicePort>);

  public abstract A removeMatchingFromPorts(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1ServicePortBuilder>);

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1ServicePort> getPorts();

  public abstract java.util.List<io.kubernetes.client.openapi.models.V1ServicePort> buildPorts();

  public abstract io.kubernetes.client.openapi.models.V1ServicePort buildPort(int);

  public abstract io.kubernetes.client.openapi.models.V1ServicePort buildFirstPort();

  public abstract io.kubernetes.client.openapi.models.V1ServicePort buildLastPort();

  public abstract io.kubernetes.client.openapi.models.V1ServicePort buildMatchingPort(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1ServicePortBuilder>);

  public abstract java.lang.Boolean hasMatchingPort(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1ServicePortBuilder>);

  public abstract A withPorts(java.util.List<io.kubernetes.client.openapi.models.V1ServicePort>);

  public abstract A withPorts(io.kubernetes.client.openapi.models.V1ServicePort...);

  public abstract java.lang.Boolean hasPorts();

  public abstract io.kubernetes.client.openapi.models.V1ServiceSpecFluent$PortsNested<A> addNewPort();

  public abstract io.kubernetes.client.openapi.models.V1ServiceSpecFluent$PortsNested<A> addNewPortLike(io.kubernetes.client.openapi.models.V1ServicePort);

  public abstract io.kubernetes.client.openapi.models.V1ServiceSpecFluent$PortsNested<A> setNewPortLike(int, io.kubernetes.client.openapi.models.V1ServicePort);

  public abstract io.kubernetes.client.openapi.models.V1ServiceSpecFluent$PortsNested<A> editPort(int);

  public abstract io.kubernetes.client.openapi.models.V1ServiceSpecFluent$PortsNested<A> editFirstPort();

  public abstract io.kubernetes.client.openapi.models.V1ServiceSpecFluent$PortsNested<A> editLastPort();

  public abstract io.kubernetes.client.openapi.models.V1ServiceSpecFluent$PortsNested<A> editMatchingPort(io.kubernetes.client.fluent.Predicate<io.kubernetes.client.openapi.models.V1ServicePortBuilder>);

  public abstract java.lang.Boolean isPublishNotReadyAddresses();

  public abstract A withPublishNotReadyAddresses(java.lang.Boolean);

  public abstract java.lang.Boolean hasPublishNotReadyAddresses();

  public abstract A withNewPublishNotReadyAddresses(java.lang.String);

  public abstract A withNewPublishNotReadyAddresses(boolean);

  public abstract A addToSelector(java.lang.String, java.lang.String);

  public abstract A addToSelector(java.util.Map<java.lang.String, java.lang.String>);

  public abstract A removeFromSelector(java.lang.String);

  public abstract A removeFromSelector(java.util.Map<java.lang.String, java.lang.String>);

  public abstract java.util.Map<java.lang.String, java.lang.String> getSelector();

  public abstract A withSelector(java.util.Map<java.lang.String, java.lang.String>);

  public abstract java.lang.Boolean hasSelector();

  public abstract java.lang.String getSessionAffinity();

  public abstract A withSessionAffinity(java.lang.String);

  public abstract java.lang.Boolean hasSessionAffinity();

  public abstract A withNewSessionAffinity(java.lang.String);

  public abstract A withNewSessionAffinity(java.lang.StringBuilder);

  public abstract A withNewSessionAffinity(java.lang.StringBuffer);

  public abstract io.kubernetes.client.openapi.models.V1SessionAffinityConfig getSessionAffinityConfig();

  public abstract io.kubernetes.client.openapi.models.V1SessionAffinityConfig buildSessionAffinityConfig();

  public abstract A withSessionAffinityConfig(io.kubernetes.client.openapi.models.V1SessionAffinityConfig);

  public abstract java.lang.Boolean hasSessionAffinityConfig();

  public abstract io.kubernetes.client.openapi.models.V1ServiceSpecFluent$SessionAffinityConfigNested<A> withNewSessionAffinityConfig();

  public abstract io.kubernetes.client.openapi.models.V1ServiceSpecFluent$SessionAffinityConfigNested<A> withNewSessionAffinityConfigLike(io.kubernetes.client.openapi.models.V1SessionAffinityConfig);

  public abstract io.kubernetes.client.openapi.models.V1ServiceSpecFluent$SessionAffinityConfigNested<A> editSessionAffinityConfig();

  public abstract io.kubernetes.client.openapi.models.V1ServiceSpecFluent$SessionAffinityConfigNested<A> editOrNewSessionAffinityConfig();

  public abstract io.kubernetes.client.openapi.models.V1ServiceSpecFluent$SessionAffinityConfigNested<A> editOrNewSessionAffinityConfigLike(io.kubernetes.client.openapi.models.V1SessionAffinityConfig);

  public abstract A addToTopologyKeys(int, java.lang.String);

  public abstract A setToTopologyKeys(int, java.lang.String);

  public abstract A addToTopologyKeys(java.lang.String...);

  public abstract A addAllToTopologyKeys(java.util.Collection<java.lang.String>);

  public abstract A removeFromTopologyKeys(java.lang.String...);

  public abstract A removeAllFromTopologyKeys(java.util.Collection<java.lang.String>);

  public abstract java.util.List<java.lang.String> getTopologyKeys();

  public abstract java.lang.String getTopologyKey(int);

  public abstract java.lang.String getFirstTopologyKey();

  public abstract java.lang.String getLastTopologyKey();

  public abstract java.lang.String getMatchingTopologyKey(io.kubernetes.client.fluent.Predicate<java.lang.String>);

  public abstract java.lang.Boolean hasMatchingTopologyKey(io.kubernetes.client.fluent.Predicate<java.lang.String>);

  public abstract A withTopologyKeys(java.util.List<java.lang.String>);

  public abstract A withTopologyKeys(java.lang.String...);

  public abstract java.lang.Boolean hasTopologyKeys();

  public abstract A addNewTopologyKey(java.lang.String);

  public abstract A addNewTopologyKey(java.lang.StringBuilder);

  public abstract A addNewTopologyKey(java.lang.StringBuffer);

  public abstract java.lang.String getType();

  public abstract A withType(java.lang.String);

  public abstract java.lang.Boolean hasType();

  public abstract A withNewType(java.lang.String);

  public abstract A withNewType(java.lang.StringBuilder);

  public abstract A withNewType(java.lang.StringBuffer);
}
