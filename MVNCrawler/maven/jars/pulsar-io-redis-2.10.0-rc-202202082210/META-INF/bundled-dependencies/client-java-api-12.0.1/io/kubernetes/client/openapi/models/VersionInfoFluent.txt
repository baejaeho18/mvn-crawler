Compiled from "VersionInfoFluent.java"
public interface io.kubernetes.client.openapi.models.VersionInfoFluent<A extends io.kubernetes.client.openapi.models.VersionInfoFluent<A>> extends io.kubernetes.client.fluent.Fluent<A> {
  public abstract java.lang.String getBuildDate();

  public abstract A withBuildDate(java.lang.String);

  public abstract java.lang.Boolean hasBuildDate();

  public abstract A withNewBuildDate(java.lang.String);

  public abstract A withNewBuildDate(java.lang.StringBuilder);

  public abstract A withNewBuildDate(java.lang.StringBuffer);

  public abstract java.lang.String getCompiler();

  public abstract A withCompiler(java.lang.String);

  public abstract java.lang.Boolean hasCompiler();

  public abstract A withNewCompiler(java.lang.String);

  public abstract A withNewCompiler(java.lang.StringBuilder);

  public abstract A withNewCompiler(java.lang.StringBuffer);

  public abstract java.lang.String getGitCommit();

  public abstract A withGitCommit(java.lang.String);

  public abstract java.lang.Boolean hasGitCommit();

  public abstract A withNewGitCommit(java.lang.String);

  public abstract A withNewGitCommit(java.lang.StringBuilder);

  public abstract A withNewGitCommit(java.lang.StringBuffer);

  public abstract java.lang.String getGitTreeState();

  public abstract A withGitTreeState(java.lang.String);

  public abstract java.lang.Boolean hasGitTreeState();

  public abstract A withNewGitTreeState(java.lang.String);

  public abstract A withNewGitTreeState(java.lang.StringBuilder);

  public abstract A withNewGitTreeState(java.lang.StringBuffer);

  public abstract java.lang.String getGitVersion();

  public abstract A withGitVersion(java.lang.String);

  public abstract java.lang.Boolean hasGitVersion();

  public abstract A withNewGitVersion(java.lang.String);

  public abstract A withNewGitVersion(java.lang.StringBuilder);

  public abstract A withNewGitVersion(java.lang.StringBuffer);

  public abstract java.lang.String getGoVersion();

  public abstract A withGoVersion(java.lang.String);

  public abstract java.lang.Boolean hasGoVersion();

  public abstract A withNewGoVersion(java.lang.String);

  public abstract A withNewGoVersion(java.lang.StringBuilder);

  public abstract A withNewGoVersion(java.lang.StringBuffer);

  public abstract java.lang.String getMajor();

  public abstract A withMajor(java.lang.String);

  public abstract java.lang.Boolean hasMajor();

  public abstract A withNewMajor(java.lang.String);

  public abstract A withNewMajor(java.lang.StringBuilder);

  public abstract A withNewMajor(java.lang.StringBuffer);

  public abstract java.lang.String getMinor();

  public abstract A withMinor(java.lang.String);

  public abstract java.lang.Boolean hasMinor();

  public abstract A withNewMinor(java.lang.String);

  public abstract A withNewMinor(java.lang.StringBuilder);

  public abstract A withNewMinor(java.lang.StringBuffer);

  public abstract java.lang.String getPlatform();

  public abstract A withPlatform(java.lang.String);

  public abstract java.lang.Boolean hasPlatform();

  public abstract A withNewPlatform(java.lang.String);

  public abstract A withNewPlatform(java.lang.StringBuilder);

  public abstract A withNewPlatform(java.lang.StringBuffer);
}
