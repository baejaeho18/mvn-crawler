Compiled from "AsyncInvoker.java"
public interface javax.ws.rs.client.AsyncInvoker {
  public abstract java.util.concurrent.Future<javax.ws.rs.core.Response> get();

  public abstract <T> java.util.concurrent.Future<T> get(java.lang.Class<T>);

  public abstract <T> java.util.concurrent.Future<T> get(javax.ws.rs.core.GenericType<T>);

  public abstract <T> java.util.concurrent.Future<T> get(javax.ws.rs.client.InvocationCallback<T>);

  public abstract java.util.concurrent.Future<javax.ws.rs.core.Response> put(javax.ws.rs.client.Entity<?>);

  public abstract <T> java.util.concurrent.Future<T> put(javax.ws.rs.client.Entity<?>, java.lang.Class<T>);

  public abstract <T> java.util.concurrent.Future<T> put(javax.ws.rs.client.Entity<?>, javax.ws.rs.core.GenericType<T>);

  public abstract <T> java.util.concurrent.Future<T> put(javax.ws.rs.client.Entity<?>, javax.ws.rs.client.InvocationCallback<T>);

  public abstract java.util.concurrent.Future<javax.ws.rs.core.Response> post(javax.ws.rs.client.Entity<?>);

  public abstract <T> java.util.concurrent.Future<T> post(javax.ws.rs.client.Entity<?>, java.lang.Class<T>);

  public abstract <T> java.util.concurrent.Future<T> post(javax.ws.rs.client.Entity<?>, javax.ws.rs.core.GenericType<T>);

  public abstract <T> java.util.concurrent.Future<T> post(javax.ws.rs.client.Entity<?>, javax.ws.rs.client.InvocationCallback<T>);

  public abstract java.util.concurrent.Future<javax.ws.rs.core.Response> delete();

  public abstract <T> java.util.concurrent.Future<T> delete(java.lang.Class<T>);

  public abstract <T> java.util.concurrent.Future<T> delete(javax.ws.rs.core.GenericType<T>);

  public abstract <T> java.util.concurrent.Future<T> delete(javax.ws.rs.client.InvocationCallback<T>);

  public abstract java.util.concurrent.Future<javax.ws.rs.core.Response> head();

  public abstract java.util.concurrent.Future<javax.ws.rs.core.Response> head(javax.ws.rs.client.InvocationCallback<javax.ws.rs.core.Response>);

  public abstract java.util.concurrent.Future<javax.ws.rs.core.Response> options();

  public abstract <T> java.util.concurrent.Future<T> options(java.lang.Class<T>);

  public abstract <T> java.util.concurrent.Future<T> options(javax.ws.rs.core.GenericType<T>);

  public abstract <T> java.util.concurrent.Future<T> options(javax.ws.rs.client.InvocationCallback<T>);

  public abstract java.util.concurrent.Future<javax.ws.rs.core.Response> trace();

  public abstract <T> java.util.concurrent.Future<T> trace(java.lang.Class<T>);

  public abstract <T> java.util.concurrent.Future<T> trace(javax.ws.rs.core.GenericType<T>);

  public abstract <T> java.util.concurrent.Future<T> trace(javax.ws.rs.client.InvocationCallback<T>);

  public abstract java.util.concurrent.Future<javax.ws.rs.core.Response> method(java.lang.String);

  public abstract <T> java.util.concurrent.Future<T> method(java.lang.String, java.lang.Class<T>);

  public abstract <T> java.util.concurrent.Future<T> method(java.lang.String, javax.ws.rs.core.GenericType<T>);

  public abstract <T> java.util.concurrent.Future<T> method(java.lang.String, javax.ws.rs.client.InvocationCallback<T>);

  public abstract java.util.concurrent.Future<javax.ws.rs.core.Response> method(java.lang.String, javax.ws.rs.client.Entity<?>);

  public abstract <T> java.util.concurrent.Future<T> method(java.lang.String, javax.ws.rs.client.Entity<?>, java.lang.Class<T>);

  public abstract <T> java.util.concurrent.Future<T> method(java.lang.String, javax.ws.rs.client.Entity<?>, javax.ws.rs.core.GenericType<T>);

  public abstract <T> java.util.concurrent.Future<T> method(java.lang.String, javax.ws.rs.client.Entity<?>, javax.ws.rs.client.InvocationCallback<T>);
}
