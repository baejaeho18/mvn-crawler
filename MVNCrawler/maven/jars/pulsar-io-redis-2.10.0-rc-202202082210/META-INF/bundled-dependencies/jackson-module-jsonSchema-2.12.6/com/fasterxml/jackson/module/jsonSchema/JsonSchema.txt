Compiled from "JsonSchema.java"
public abstract class com.fasterxml.jackson.module.jsonSchema.JsonSchema {
  private java.lang.String id;

  private java.lang.String $ref;

  private java.lang.String $schema;

  private com.fasterxml.jackson.module.jsonSchema.JsonSchema[] disallow;

  private com.fasterxml.jackson.module.jsonSchema.JsonSchema[] extendsextends;

  private java.lang.Boolean required;

  private java.lang.Boolean readonly;

  private java.lang.String description;

  protected com.fasterxml.jackson.module.jsonSchema.JsonSchema();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #2                  // Field required:Ljava/lang/Boolean;
       9: aload_0
      10: aconst_null
      11: putfield      #3                  // Field readonly:Ljava/lang/Boolean;
      14: return

  public com.fasterxml.jackson.module.jsonSchema.types.AnySchema asAnySchema();
    Code:
       0: aconst_null
       1: areturn

  public com.fasterxml.jackson.module.jsonSchema.types.ArraySchema asArraySchema();
    Code:
       0: aconst_null
       1: areturn

  public com.fasterxml.jackson.module.jsonSchema.types.BooleanSchema asBooleanSchema();
    Code:
       0: aconst_null
       1: areturn

  public com.fasterxml.jackson.module.jsonSchema.types.ContainerTypeSchema asContainerSchema();
    Code:
       0: aload_0
       1: invokevirtual #4                  // Method asContainerTypeSchema:()Lcom/fasterxml/jackson/module/jsonSchema/types/ContainerTypeSchema;
       4: areturn

  public com.fasterxml.jackson.module.jsonSchema.types.ContainerTypeSchema asContainerTypeSchema();
    Code:
       0: aconst_null
       1: areturn

  public com.fasterxml.jackson.module.jsonSchema.types.IntegerSchema asIntegerSchema();
    Code:
       0: aconst_null
       1: areturn

  public com.fasterxml.jackson.module.jsonSchema.types.NullSchema asNullSchema();
    Code:
       0: aconst_null
       1: areturn

  public com.fasterxml.jackson.module.jsonSchema.types.NumberSchema asNumberSchema();
    Code:
       0: aconst_null
       1: areturn

  public com.fasterxml.jackson.module.jsonSchema.types.ObjectSchema asObjectSchema();
    Code:
       0: aconst_null
       1: areturn

  public com.fasterxml.jackson.module.jsonSchema.types.SimpleTypeSchema asSimpleTypeSchema();
    Code:
       0: aconst_null
       1: areturn

  public com.fasterxml.jackson.module.jsonSchema.types.StringSchema asStringSchema();
    Code:
       0: aconst_null
       1: areturn

  public com.fasterxml.jackson.module.jsonSchema.types.UnionTypeSchema asUnionTypeSchema();
    Code:
       0: aconst_null
       1: areturn

  public com.fasterxml.jackson.module.jsonSchema.types.ValueTypeSchema asValueSchemaSchema();
    Code:
       0: aload_0
       1: invokevirtual #5                  // Method asValueTypeSchema:()Lcom/fasterxml/jackson/module/jsonSchema/types/ValueTypeSchema;
       4: areturn

  public com.fasterxml.jackson.module.jsonSchema.types.ValueTypeSchema asValueTypeSchema();
    Code:
       0: aconst_null
       1: areturn

  public java.lang.String getId();
    Code:
       0: aload_0
       1: getfield      #6                  // Field id:Ljava/lang/String;
       4: areturn

  public java.lang.String get$ref();
    Code:
       0: aload_0
       1: getfield      #7                  // Field $ref:Ljava/lang/String;
       4: areturn

  public java.lang.String get$schema();
    Code:
       0: aload_0
       1: getfield      #8                  // Field $schema:Ljava/lang/String;
       4: areturn

  public com.fasterxml.jackson.module.jsonSchema.JsonSchema[] getDisallow();
    Code:
       0: aload_0
       1: getfield      #9                  // Field disallow:[Lcom/fasterxml/jackson/module/jsonSchema/JsonSchema;
       4: areturn

  public com.fasterxml.jackson.module.jsonSchema.JsonSchema[] getExtends();
    Code:
       0: aload_0
       1: getfield      #10                 // Field extendsextends:[Lcom/fasterxml/jackson/module/jsonSchema/JsonSchema;
       4: areturn

  public java.lang.Boolean getRequired();
    Code:
       0: aload_0
       1: getfield      #2                  // Field required:Ljava/lang/Boolean;
       4: areturn

  public java.lang.Boolean getReadonly();
    Code:
       0: aload_0
       1: getfield      #3                  // Field readonly:Ljava/lang/Boolean;
       4: areturn

  public java.lang.String getDescription();
    Code:
       0: aload_0
       1: getfield      #11                 // Field description:Ljava/lang/String;
       4: areturn

  public abstract com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes getType();

  public boolean isAnySchema();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isArraySchema();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isBooleanSchema();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isContainerTypeSchema();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isIntegerSchema();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isNullSchema();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isNumberSchema();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isObjectSchema();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isSimpleTypeSchema();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isStringSchema();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isUnionTypeSchema();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isValueTypeSchema();
    Code:
       0: iconst_0
       1: ireturn

  public void set$ref(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #7                  // Field $ref:Ljava/lang/String;
       5: return

  public void set$schema(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #8                  // Field $schema:Ljava/lang/String;
       5: return

  public void setDisallow(com.fasterxml.jackson.module.jsonSchema.JsonSchema[]);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #9                  // Field disallow:[Lcom/fasterxml/jackson/module/jsonSchema/JsonSchema;
       5: return

  public void setExtends(com.fasterxml.jackson.module.jsonSchema.JsonSchema[]);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #10                 // Field extendsextends:[Lcom/fasterxml/jackson/module/jsonSchema/JsonSchema;
       5: return

  public void setId(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field id:Ljava/lang/String;
       5: return

  public void setRequired(java.lang.Boolean);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2                  // Field required:Ljava/lang/Boolean;
       5: return

  public void setReadonly(java.lang.Boolean);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #3                  // Field readonly:Ljava/lang/Boolean;
       5: return

  public void setDescription(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #11                 // Field description:Ljava/lang/String;
       5: return

  public void enrichWithBeanProperty(com.fasterxml.jackson.databind.BeanProperty);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #12,  1           // InterfaceMethod com/fasterxml/jackson/databind/BeanProperty.getMetadata:()Lcom/fasterxml/jackson/databind/PropertyMetadata;
       7: invokevirtual #13                 // Method com/fasterxml/jackson/databind/PropertyMetadata.getDescription:()Ljava/lang/String;
      10: invokevirtual #14                 // Method setDescription:(Ljava/lang/String;)V
      13: return

  public static com.fasterxml.jackson.module.jsonSchema.JsonSchema minimalForFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes);
    Code:
       0: aload_0
       1: ifnull        116
       4: getstatic     #15                 // Field com/fasterxml/jackson/module/jsonSchema/JsonSchema$1.$SwitchMap$com$fasterxml$jackson$databind$jsonFormatVisitors$JsonFormatTypes:[I
       7: aload_0
       8: invokevirtual #16                 // Method com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatTypes.ordinal:()I
      11: iaload
      12: tableswitch   { // 1 to 8
                     1: 60
                     2: 68
                     3: 76
                     4: 84
                     5: 92
                     6: 100
                     7: 108
                     8: 116
               default: 116
          }
      60: new           #17                 // class com/fasterxml/jackson/module/jsonSchema/types/ArraySchema
      63: dup
      64: invokespecial #18                 // Method com/fasterxml/jackson/module/jsonSchema/types/ArraySchema."<init>":()V
      67: areturn
      68: new           #19                 // class com/fasterxml/jackson/module/jsonSchema/types/ObjectSchema
      71: dup
      72: invokespecial #20                 // Method com/fasterxml/jackson/module/jsonSchema/types/ObjectSchema."<init>":()V
      75: areturn
      76: new           #21                 // class com/fasterxml/jackson/module/jsonSchema/types/BooleanSchema
      79: dup
      80: invokespecial #22                 // Method com/fasterxml/jackson/module/jsonSchema/types/BooleanSchema."<init>":()V
      83: areturn
      84: new           #23                 // class com/fasterxml/jackson/module/jsonSchema/types/IntegerSchema
      87: dup
      88: invokespecial #24                 // Method com/fasterxml/jackson/module/jsonSchema/types/IntegerSchema."<init>":()V
      91: areturn
      92: new           #25                 // class com/fasterxml/jackson/module/jsonSchema/types/NumberSchema
      95: dup
      96: invokespecial #26                 // Method com/fasterxml/jackson/module/jsonSchema/types/NumberSchema."<init>":()V
      99: areturn
     100: new           #27                 // class com/fasterxml/jackson/module/jsonSchema/types/StringSchema
     103: dup
     104: invokespecial #28                 // Method com/fasterxml/jackson/module/jsonSchema/types/StringSchema."<init>":()V
     107: areturn
     108: new           #29                 // class com/fasterxml/jackson/module/jsonSchema/types/NullSchema
     111: dup
     112: invokespecial #30                 // Method com/fasterxml/jackson/module/jsonSchema/types/NullSchema."<init>":()V
     115: areturn
     116: new           #31                 // class com/fasterxml/jackson/module/jsonSchema/types/AnySchema
     119: dup
     120: invokespecial #32                 // Method com/fasterxml/jackson/module/jsonSchema/types/AnySchema."<init>":()V
     123: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: aload_0
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: ifnonnull     13
      11: iconst_0
      12: ireturn
      13: aload_1
      14: instanceof    #33                 // class com/fasterxml/jackson/module/jsonSchema/JsonSchema
      17: ifne          22
      20: iconst_0
      21: ireturn
      22: aload_0
      23: aload_1
      24: checkcast     #33                 // class com/fasterxml/jackson/module/jsonSchema/JsonSchema
      27: invokevirtual #34                 // Method _equals:(Lcom/fasterxml/jackson/module/jsonSchema/JsonSchema;)Z
      30: ireturn

  protected boolean _equals(com.fasterxml.jackson.module.jsonSchema.JsonSchema);
    Code:
       0: aload_0
       1: invokevirtual #35                 // Method getId:()Ljava/lang/String;
       4: aload_0
       5: invokevirtual #35                 // Method getId:()Ljava/lang/String;
       8: invokestatic  #36                 // Method equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
      11: ifeq          102
      14: aload_0
      15: invokevirtual #37                 // Method getRequired:()Ljava/lang/Boolean;
      18: aload_1
      19: invokevirtual #37                 // Method getRequired:()Ljava/lang/Boolean;
      22: invokestatic  #36                 // Method equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
      25: ifeq          102
      28: aload_0
      29: invokevirtual #38                 // Method getReadonly:()Ljava/lang/Boolean;
      32: aload_1
      33: invokevirtual #38                 // Method getReadonly:()Ljava/lang/Boolean;
      36: invokestatic  #36                 // Method equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
      39: ifeq          102
      42: aload_0
      43: invokevirtual #39                 // Method get$ref:()Ljava/lang/String;
      46: aload_1
      47: invokevirtual #39                 // Method get$ref:()Ljava/lang/String;
      50: invokestatic  #36                 // Method equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
      53: ifeq          102
      56: aload_0
      57: invokevirtual #40                 // Method get$schema:()Ljava/lang/String;
      60: aload_1
      61: invokevirtual #40                 // Method get$schema:()Ljava/lang/String;
      64: invokestatic  #36                 // Method equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
      67: ifeq          102
      70: aload_0
      71: invokevirtual #41                 // Method getDisallow:()[Lcom/fasterxml/jackson/module/jsonSchema/JsonSchema;
      74: aload_1
      75: invokevirtual #41                 // Method getDisallow:()[Lcom/fasterxml/jackson/module/jsonSchema/JsonSchema;
      78: invokestatic  #42                 // Method arraysEqual:([Ljava/lang/Object;[Ljava/lang/Object;)Z
      81: ifeq          102
      84: aload_0
      85: invokevirtual #43                 // Method getExtends:()[Lcom/fasterxml/jackson/module/jsonSchema/JsonSchema;
      88: aload_1
      89: invokevirtual #43                 // Method getExtends:()[Lcom/fasterxml/jackson/module/jsonSchema/JsonSchema;
      92: invokestatic  #42                 // Method arraysEqual:([Ljava/lang/Object;[Ljava/lang/Object;)Z
      95: ifeq          102
      98: iconst_1
      99: goto          103
     102: iconst_0
     103: ireturn

  protected static boolean equals(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: ifnonnull     14
       4: aload_1
       5: ifnonnull     12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn
      14: aload_0
      15: aload_1
      16: invokevirtual #44                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      19: ireturn

  protected static <T> boolean arraysEqual(T[], T[]);
    Code:
       0: aload_0
       1: ifnonnull     14
       4: aload_1
       5: ifnonnull     12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: ireturn
      14: aload_1
      15: ifnonnull     20
      18: iconst_0
      19: ireturn
      20: aload_0
      21: arraylength
      22: istore_2
      23: iload_2
      24: aload_1
      25: arraylength
      26: if_icmpeq     31
      29: iconst_0
      30: ireturn
      31: iconst_0
      32: istore_3
      33: iload_3
      34: iload_2
      35: if_icmpge     58
      38: aload_0
      39: iload_3
      40: aaload
      41: aload_1
      42: iload_3
      43: aaload
      44: invokestatic  #36                 // Method equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
      47: ifne          52
      50: iconst_0
      51: ireturn
      52: iinc          3, 1
      55: goto          33
      58: iconst_1
      59: ireturn
}
