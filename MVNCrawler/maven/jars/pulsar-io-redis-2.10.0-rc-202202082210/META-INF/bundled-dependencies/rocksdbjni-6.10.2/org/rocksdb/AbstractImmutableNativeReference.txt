Compiled from "AbstractImmutableNativeReference.java"
public abstract class org.rocksdb.AbstractImmutableNativeReference extends org.rocksdb.AbstractNativeReference {
  protected final java.util.concurrent.atomic.AtomicBoolean owningHandle_;

  protected org.rocksdb.AbstractImmutableNativeReference(boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/rocksdb/AbstractNativeReference."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/atomic/AtomicBoolean
       8: dup
       9: iload_1
      10: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicBoolean."<init>":(Z)V
      13: putfield      #4                  // Field owningHandle_:Ljava/util/concurrent/atomic/AtomicBoolean;
      16: return

  public boolean isOwningHandle();
    Code:
       0: aload_0
       1: getfield      #4                  // Field owningHandle_:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: invokevirtual #5                  // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       7: ireturn

  protected final void disOwnNativeHandle();
    Code:
       0: aload_0
       1: getfield      #4                  // Field owningHandle_:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_0
       5: invokevirtual #6                  // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
       8: return

  public void close();
    Code:
       0: aload_0
       1: getfield      #4                  // Field owningHandle_:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_1
       5: iconst_0
       6: invokevirtual #7                  // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
       9: ifeq          16
      12: aload_0
      13: invokevirtual #8                  // Method disposeInternal:()V
      16: return

  protected abstract void disposeInternal();
}
