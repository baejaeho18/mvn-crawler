Compiled from "BlockBasedTableConfig.java"
public class org.rocksdb.BlockBasedTableConfig extends org.rocksdb.TableFormatConfig {
  private boolean cacheIndexAndFilterBlocks;

  private boolean cacheIndexAndFilterBlocksWithHighPriority;

  private boolean pinL0FilterAndIndexBlocksInCache;

  private boolean pinTopLevelIndexAndFilter;

  private org.rocksdb.IndexType indexType;

  private org.rocksdb.DataBlockIndexType dataBlockIndexType;

  private double dataBlockHashTableUtilRatio;

  private org.rocksdb.ChecksumType checksumType;

  private boolean noBlockCache;

  private org.rocksdb.Cache blockCache;

  private org.rocksdb.PersistentCache persistentCache;

  private org.rocksdb.Cache blockCacheCompressed;

  private long blockSize;

  private int blockSizeDeviation;

  private int blockRestartInterval;

  private int indexBlockRestartInterval;

  private long metadataBlockSize;

  private boolean partitionFilters;

  private boolean useDeltaEncoding;

  private org.rocksdb.Filter filterPolicy;

  private boolean wholeKeyFiltering;

  private boolean verifyCompression;

  private int readAmpBytesPerBit;

  private int formatVersion;

  private boolean enableIndexCompression;

  private boolean blockAlign;

  private long blockCacheSize;

  private int blockCacheNumShardBits;

  private long blockCacheCompressedSize;

  private int blockCacheCompressedNumShardBits;

  static final boolean $assertionsDisabled;

  public org.rocksdb.BlockBasedTableConfig();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/rocksdb/TableFormatConfig."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field cacheIndexAndFilterBlocks:Z
       9: aload_0
      10: iconst_0
      11: putfield      #3                  // Field cacheIndexAndFilterBlocksWithHighPriority:Z
      14: aload_0
      15: iconst_0
      16: putfield      #4                  // Field pinL0FilterAndIndexBlocksInCache:Z
      19: aload_0
      20: iconst_1
      21: putfield      #5                  // Field pinTopLevelIndexAndFilter:Z
      24: aload_0
      25: getstatic     #6                  // Field org/rocksdb/IndexType.kBinarySearch:Lorg/rocksdb/IndexType;
      28: putfield      #7                  // Field indexType:Lorg/rocksdb/IndexType;
      31: aload_0
      32: getstatic     #8                  // Field org/rocksdb/DataBlockIndexType.kDataBlockBinarySearch:Lorg/rocksdb/DataBlockIndexType;
      35: putfield      #9                  // Field dataBlockIndexType:Lorg/rocksdb/DataBlockIndexType;
      38: aload_0
      39: ldc2_w        #10                 // double 0.75d
      42: putfield      #12                 // Field dataBlockHashTableUtilRatio:D
      45: aload_0
      46: getstatic     #13                 // Field org/rocksdb/ChecksumType.kCRC32c:Lorg/rocksdb/ChecksumType;
      49: putfield      #14                 // Field checksumType:Lorg/rocksdb/ChecksumType;
      52: aload_0
      53: iconst_0
      54: putfield      #15                 // Field noBlockCache:Z
      57: aload_0
      58: aconst_null
      59: putfield      #16                 // Field blockCache:Lorg/rocksdb/Cache;
      62: aload_0
      63: aconst_null
      64: putfield      #17                 // Field persistentCache:Lorg/rocksdb/PersistentCache;
      67: aload_0
      68: aconst_null
      69: putfield      #18                 // Field blockCacheCompressed:Lorg/rocksdb/Cache;
      72: aload_0
      73: ldc2_w        #19                 // long 4096l
      76: putfield      #21                 // Field blockSize:J
      79: aload_0
      80: bipush        10
      82: putfield      #22                 // Field blockSizeDeviation:I
      85: aload_0
      86: bipush        16
      88: putfield      #23                 // Field blockRestartInterval:I
      91: aload_0
      92: iconst_1
      93: putfield      #24                 // Field indexBlockRestartInterval:I
      96: aload_0
      97: ldc2_w        #19                 // long 4096l
     100: putfield      #25                 // Field metadataBlockSize:J
     103: aload_0
     104: iconst_0
     105: putfield      #26                 // Field partitionFilters:Z
     108: aload_0
     109: iconst_1
     110: putfield      #27                 // Field useDeltaEncoding:Z
     113: aload_0
     114: aconst_null
     115: putfield      #28                 // Field filterPolicy:Lorg/rocksdb/Filter;
     118: aload_0
     119: iconst_1
     120: putfield      #29                 // Field wholeKeyFiltering:Z
     123: aload_0
     124: iconst_1
     125: putfield      #30                 // Field verifyCompression:Z
     128: aload_0
     129: iconst_0
     130: putfield      #31                 // Field readAmpBytesPerBit:I
     133: aload_0
     134: iconst_2
     135: putfield      #32                 // Field formatVersion:I
     138: aload_0
     139: iconst_1
     140: putfield      #33                 // Field enableIndexCompression:Z
     143: aload_0
     144: iconst_0
     145: putfield      #34                 // Field blockAlign:Z
     148: aload_0
     149: ldc2_w        #35                 // long 8388608l
     152: putfield      #37                 // Field blockCacheSize:J
     155: aload_0
     156: iconst_0
     157: putfield      #38                 // Field blockCacheNumShardBits:I
     160: aload_0
     161: lconst_0
     162: putfield      #39                 // Field blockCacheCompressedSize:J
     165: aload_0
     166: iconst_0
     167: putfield      #40                 // Field blockCacheCompressedNumShardBits:I
     170: return

  public boolean cacheIndexAndFilterBlocks();
    Code:
       0: aload_0
       1: getfield      #2                  // Field cacheIndexAndFilterBlocks:Z
       4: ireturn

  public org.rocksdb.BlockBasedTableConfig setCacheIndexAndFilterBlocks(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field cacheIndexAndFilterBlocks:Z
       5: aload_0
       6: areturn

  public boolean cacheIndexAndFilterBlocksWithHighPriority();
    Code:
       0: aload_0
       1: getfield      #3                  // Field cacheIndexAndFilterBlocksWithHighPriority:Z
       4: ireturn

  public org.rocksdb.BlockBasedTableConfig setCacheIndexAndFilterBlocksWithHighPriority(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #3                  // Field cacheIndexAndFilterBlocksWithHighPriority:Z
       5: aload_0
       6: areturn

  public boolean pinL0FilterAndIndexBlocksInCache();
    Code:
       0: aload_0
       1: getfield      #4                  // Field pinL0FilterAndIndexBlocksInCache:Z
       4: ireturn

  public org.rocksdb.BlockBasedTableConfig setPinL0FilterAndIndexBlocksInCache(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #4                  // Field pinL0FilterAndIndexBlocksInCache:Z
       5: aload_0
       6: areturn

  public boolean pinTopLevelIndexAndFilter();
    Code:
       0: aload_0
       1: getfield      #5                  // Field pinTopLevelIndexAndFilter:Z
       4: ireturn

  public org.rocksdb.BlockBasedTableConfig setPinTopLevelIndexAndFilter(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #5                  // Field pinTopLevelIndexAndFilter:Z
       5: aload_0
       6: areturn

  public org.rocksdb.IndexType indexType();
    Code:
       0: aload_0
       1: getfield      #7                  // Field indexType:Lorg/rocksdb/IndexType;
       4: areturn

  public org.rocksdb.BlockBasedTableConfig setIndexType(org.rocksdb.IndexType);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #7                  // Field indexType:Lorg/rocksdb/IndexType;
       5: aload_0
       6: areturn

  public org.rocksdb.DataBlockIndexType dataBlockIndexType();
    Code:
       0: aload_0
       1: getfield      #9                  // Field dataBlockIndexType:Lorg/rocksdb/DataBlockIndexType;
       4: areturn

  public org.rocksdb.BlockBasedTableConfig setDataBlockIndexType(org.rocksdb.DataBlockIndexType);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #9                  // Field dataBlockIndexType:Lorg/rocksdb/DataBlockIndexType;
       5: aload_0
       6: areturn

  public double dataBlockHashTableUtilRatio();
    Code:
       0: aload_0
       1: getfield      #12                 // Field dataBlockHashTableUtilRatio:D
       4: dreturn

  public org.rocksdb.BlockBasedTableConfig setDataBlockHashTableUtilRatio(double);
    Code:
       0: aload_0
       1: dload_1
       2: putfield      #12                 // Field dataBlockHashTableUtilRatio:D
       5: aload_0
       6: areturn

  public org.rocksdb.ChecksumType checksumType();
    Code:
       0: aload_0
       1: getfield      #14                 // Field checksumType:Lorg/rocksdb/ChecksumType;
       4: areturn

  public org.rocksdb.BlockBasedTableConfig setChecksumType(org.rocksdb.ChecksumType);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #14                 // Field checksumType:Lorg/rocksdb/ChecksumType;
       5: aload_0
       6: areturn

  public boolean noBlockCache();
    Code:
       0: aload_0
       1: getfield      #15                 // Field noBlockCache:Z
       4: ireturn

  public org.rocksdb.BlockBasedTableConfig setNoBlockCache(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #15                 // Field noBlockCache:Z
       5: aload_0
       6: areturn

  public org.rocksdb.BlockBasedTableConfig setBlockCache(org.rocksdb.Cache);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #16                 // Field blockCache:Lorg/rocksdb/Cache;
       5: aload_0
       6: areturn

  public org.rocksdb.BlockBasedTableConfig setPersistentCache(org.rocksdb.PersistentCache);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #17                 // Field persistentCache:Lorg/rocksdb/PersistentCache;
       5: aload_0
       6: areturn

  public org.rocksdb.BlockBasedTableConfig setBlockCacheCompressed(org.rocksdb.Cache);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #18                 // Field blockCacheCompressed:Lorg/rocksdb/Cache;
       5: aload_0
       6: areturn

  public long blockSize();
    Code:
       0: aload_0
       1: getfield      #21                 // Field blockSize:J
       4: lreturn

  public org.rocksdb.BlockBasedTableConfig setBlockSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #21                 // Field blockSize:J
       5: aload_0
       6: areturn

  public int blockSizeDeviation();
    Code:
       0: aload_0
       1: getfield      #22                 // Field blockSizeDeviation:I
       4: ireturn

  public org.rocksdb.BlockBasedTableConfig setBlockSizeDeviation(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #22                 // Field blockSizeDeviation:I
       5: aload_0
       6: areturn

  public int blockRestartInterval();
    Code:
       0: aload_0
       1: getfield      #23                 // Field blockRestartInterval:I
       4: ireturn

  public org.rocksdb.BlockBasedTableConfig setBlockRestartInterval(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #23                 // Field blockRestartInterval:I
       5: aload_0
       6: areturn

  public int indexBlockRestartInterval();
    Code:
       0: aload_0
       1: getfield      #24                 // Field indexBlockRestartInterval:I
       4: ireturn

  public org.rocksdb.BlockBasedTableConfig setIndexBlockRestartInterval(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #24                 // Field indexBlockRestartInterval:I
       5: aload_0
       6: areturn

  public long metadataBlockSize();
    Code:
       0: aload_0
       1: getfield      #25                 // Field metadataBlockSize:J
       4: lreturn

  public org.rocksdb.BlockBasedTableConfig setMetadataBlockSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #25                 // Field metadataBlockSize:J
       5: aload_0
       6: areturn

  public boolean partitionFilters();
    Code:
       0: aload_0
       1: getfield      #26                 // Field partitionFilters:Z
       4: ireturn

  public org.rocksdb.BlockBasedTableConfig setPartitionFilters(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #26                 // Field partitionFilters:Z
       5: aload_0
       6: areturn

  public boolean useDeltaEncoding();
    Code:
       0: aload_0
       1: getfield      #27                 // Field useDeltaEncoding:Z
       4: ireturn

  public org.rocksdb.BlockBasedTableConfig setUseDeltaEncoding(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #27                 // Field useDeltaEncoding:Z
       5: aload_0
       6: areturn

  public org.rocksdb.Filter filterPolicy();
    Code:
       0: aload_0
       1: getfield      #28                 // Field filterPolicy:Lorg/rocksdb/Filter;
       4: areturn

  public org.rocksdb.BlockBasedTableConfig setFilterPolicy(org.rocksdb.Filter);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #28                 // Field filterPolicy:Lorg/rocksdb/Filter;
       5: aload_0
       6: areturn

  public org.rocksdb.BlockBasedTableConfig setFilter(org.rocksdb.Filter);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #41                 // Method setFilterPolicy:(Lorg/rocksdb/Filter;)Lorg/rocksdb/BlockBasedTableConfig;
       5: areturn

  public boolean wholeKeyFiltering();
    Code:
       0: aload_0
       1: getfield      #29                 // Field wholeKeyFiltering:Z
       4: ireturn

  public org.rocksdb.BlockBasedTableConfig setWholeKeyFiltering(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #29                 // Field wholeKeyFiltering:Z
       5: aload_0
       6: areturn

  public boolean verifyCompression();
    Code:
       0: aload_0
       1: getfield      #30                 // Field verifyCompression:Z
       4: ireturn

  public org.rocksdb.BlockBasedTableConfig setVerifyCompression(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #30                 // Field verifyCompression:Z
       5: aload_0
       6: areturn

  public int readAmpBytesPerBit();
    Code:
       0: aload_0
       1: getfield      #31                 // Field readAmpBytesPerBit:I
       4: ireturn

  public org.rocksdb.BlockBasedTableConfig setReadAmpBytesPerBit(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #31                 // Field readAmpBytesPerBit:I
       5: aload_0
       6: areturn

  public int formatVersion();
    Code:
       0: aload_0
       1: getfield      #32                 // Field formatVersion:I
       4: ireturn

  public org.rocksdb.BlockBasedTableConfig setFormatVersion(int);
    Code:
       0: getstatic     #42                 // Field $assertionsDisabled:Z
       3: ifne          23
       6: iload_1
       7: iflt          15
      10: iload_1
      11: iconst_4
      12: if_icmple     23
      15: new           #43                 // class java/lang/AssertionError
      18: dup
      19: invokespecial #44                 // Method java/lang/AssertionError."<init>":()V
      22: athrow
      23: aload_0
      24: iload_1
      25: putfield      #32                 // Field formatVersion:I
      28: aload_0
      29: areturn

  public boolean enableIndexCompression();
    Code:
       0: aload_0
       1: getfield      #33                 // Field enableIndexCompression:Z
       4: ireturn

  public org.rocksdb.BlockBasedTableConfig setEnableIndexCompression(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #33                 // Field enableIndexCompression:Z
       5: aload_0
       6: areturn

  public boolean blockAlign();
    Code:
       0: aload_0
       1: getfield      #34                 // Field blockAlign:Z
       4: ireturn

  public org.rocksdb.BlockBasedTableConfig setBlockAlign(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #34                 // Field blockAlign:Z
       5: aload_0
       6: areturn

  public long blockCacheSize();
    Code:
       0: aload_0
       1: getfield      #37                 // Field blockCacheSize:J
       4: lreturn

  public org.rocksdb.BlockBasedTableConfig setBlockCacheSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #37                 // Field blockCacheSize:J
       5: aload_0
       6: areturn

  public int cacheNumShardBits();
    Code:
       0: aload_0
       1: getfield      #38                 // Field blockCacheNumShardBits:I
       4: ireturn

  public org.rocksdb.BlockBasedTableConfig setCacheNumShardBits(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #38                 // Field blockCacheNumShardBits:I
       5: aload_0
       6: areturn

  public long blockCacheCompressedSize();
    Code:
       0: aload_0
       1: getfield      #39                 // Field blockCacheCompressedSize:J
       4: lreturn

  public org.rocksdb.BlockBasedTableConfig setBlockCacheCompressedSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #39                 // Field blockCacheCompressedSize:J
       5: aload_0
       6: areturn

  public int blockCacheCompressedNumShardBits();
    Code:
       0: aload_0
       1: getfield      #40                 // Field blockCacheCompressedNumShardBits:I
       4: ireturn

  public org.rocksdb.BlockBasedTableConfig setBlockCacheCompressedNumShardBits(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #40                 // Field blockCacheCompressedNumShardBits:I
       5: aload_0
       6: areturn

  public boolean hashIndexAllowCollision();
    Code:
       0: iconst_1
       1: ireturn

  public org.rocksdb.BlockBasedTableConfig setHashIndexAllowCollision(boolean);
    Code:
       0: aload_0
       1: areturn

  protected long newTableFactoryHandle();
    Code:
       0: aload_0
       1: getfield      #28                 // Field filterPolicy:Lorg/rocksdb/Filter;
       4: ifnull        18
       7: aload_0
       8: getfield      #28                 // Field filterPolicy:Lorg/rocksdb/Filter;
      11: getfield      #45                 // Field org/rocksdb/Filter.nativeHandle_:J
      14: lstore_1
      15: goto          20
      18: lconst_0
      19: lstore_1
      20: aload_0
      21: getfield      #16                 // Field blockCache:Lorg/rocksdb/Cache;
      24: ifnull        38
      27: aload_0
      28: getfield      #16                 // Field blockCache:Lorg/rocksdb/Cache;
      31: getfield      #46                 // Field org/rocksdb/Cache.nativeHandle_:J
      34: lstore_3
      35: goto          40
      38: lconst_0
      39: lstore_3
      40: aload_0
      41: getfield      #17                 // Field persistentCache:Lorg/rocksdb/PersistentCache;
      44: ifnull        59
      47: aload_0
      48: getfield      #17                 // Field persistentCache:Lorg/rocksdb/PersistentCache;
      51: getfield      #47                 // Field org/rocksdb/PersistentCache.nativeHandle_:J
      54: lstore        5
      56: goto          62
      59: lconst_0
      60: lstore        5
      62: aload_0
      63: getfield      #18                 // Field blockCacheCompressed:Lorg/rocksdb/Cache;
      66: ifnull        81
      69: aload_0
      70: getfield      #18                 // Field blockCacheCompressed:Lorg/rocksdb/Cache;
      73: getfield      #46                 // Field org/rocksdb/Cache.nativeHandle_:J
      76: lstore        7
      78: goto          84
      81: lconst_0
      82: lstore        7
      84: aload_0
      85: aload_0
      86: getfield      #2                  // Field cacheIndexAndFilterBlocks:Z
      89: aload_0
      90: getfield      #3                  // Field cacheIndexAndFilterBlocksWithHighPriority:Z
      93: aload_0
      94: getfield      #4                  // Field pinL0FilterAndIndexBlocksInCache:Z
      97: aload_0
      98: getfield      #5                  // Field pinTopLevelIndexAndFilter:Z
     101: aload_0
     102: getfield      #7                  // Field indexType:Lorg/rocksdb/IndexType;
     105: invokevirtual #48                 // Method org/rocksdb/IndexType.getValue:()B
     108: aload_0
     109: getfield      #9                  // Field dataBlockIndexType:Lorg/rocksdb/DataBlockIndexType;
     112: invokevirtual #49                 // Method org/rocksdb/DataBlockIndexType.getValue:()B
     115: aload_0
     116: getfield      #12                 // Field dataBlockHashTableUtilRatio:D
     119: aload_0
     120: getfield      #14                 // Field checksumType:Lorg/rocksdb/ChecksumType;
     123: invokevirtual #50                 // Method org/rocksdb/ChecksumType.getValue:()B
     126: aload_0
     127: getfield      #15                 // Field noBlockCache:Z
     130: lload_3
     131: lload         5
     133: lload         7
     135: aload_0
     136: getfield      #21                 // Field blockSize:J
     139: aload_0
     140: getfield      #22                 // Field blockSizeDeviation:I
     143: aload_0
     144: getfield      #23                 // Field blockRestartInterval:I
     147: aload_0
     148: getfield      #24                 // Field indexBlockRestartInterval:I
     151: aload_0
     152: getfield      #25                 // Field metadataBlockSize:J
     155: aload_0
     156: getfield      #26                 // Field partitionFilters:Z
     159: aload_0
     160: getfield      #27                 // Field useDeltaEncoding:Z
     163: lload_1
     164: aload_0
     165: getfield      #29                 // Field wholeKeyFiltering:Z
     168: aload_0
     169: getfield      #30                 // Field verifyCompression:Z
     172: aload_0
     173: getfield      #31                 // Field readAmpBytesPerBit:I
     176: aload_0
     177: getfield      #32                 // Field formatVersion:I
     180: aload_0
     181: getfield      #33                 // Field enableIndexCompression:Z
     184: aload_0
     185: getfield      #34                 // Field blockAlign:Z
     188: aload_0
     189: getfield      #37                 // Field blockCacheSize:J
     192: aload_0
     193: getfield      #38                 // Field blockCacheNumShardBits:I
     196: aload_0
     197: getfield      #39                 // Field blockCacheCompressedSize:J
     200: aload_0
     201: getfield      #40                 // Field blockCacheCompressedNumShardBits:I
     204: invokespecial #51                 // Method newTableFactoryHandle:(ZZZZBBDBZJJJJIIIJZZJZZIIZZJIJI)J
     207: lreturn

  private native long newTableFactoryHandle(boolean, boolean, boolean, boolean, byte, byte, double, byte, boolean, long, long, long, long, int, int, int, long, boolean, boolean, long, boolean, boolean, int, int, boolean, boolean, long, int, long, int);

  static {};
    Code:
       0: ldc_w         #52                 // class org/rocksdb/BlockBasedTableConfig
       3: invokevirtual #53                 // Method java/lang/Class.desiredAssertionStatus:()Z
       6: ifne          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: putstatic     #42                 // Field $assertionsDisabled:Z
      17: return
}
