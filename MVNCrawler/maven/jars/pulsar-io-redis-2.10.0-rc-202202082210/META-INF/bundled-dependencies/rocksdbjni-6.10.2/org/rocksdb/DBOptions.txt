Compiled from "DBOptions.java"
public class org.rocksdb.DBOptions extends org.rocksdb.RocksObject implements org.rocksdb.DBOptionsInterface<org.rocksdb.DBOptions>, org.rocksdb.MutableDBOptionsInterface<org.rocksdb.DBOptions> {
  static final int DEFAULT_NUM_SHARD_BITS;

  private org.rocksdb.Env env_;

  private int numShardBits_;

  private org.rocksdb.RateLimiter rateLimiter_;

  private org.rocksdb.Cache rowCache_;

  private org.rocksdb.WalFilter walFilter_;

  private org.rocksdb.WriteBufferManager writeBufferManager_;

  static final boolean $assertionsDisabled;

  public org.rocksdb.DBOptions();
    Code:
       0: aload_0
       1: invokestatic  #1                  // Method newDBOptions:()J
       4: invokespecial #2                  // Method org/rocksdb/RocksObject."<init>":(J)V
       7: aload_0
       8: iconst_m1
       9: putfield      #3                  // Field numShardBits_:I
      12: return

  public org.rocksdb.DBOptions(org.rocksdb.DBOptions);
    Code:
       0: aload_0
       1: aload_1
       2: getfield      #4                  // Field nativeHandle_:J
       5: invokestatic  #5                  // Method copyDBOptions:(J)J
       8: invokespecial #2                  // Method org/rocksdb/RocksObject."<init>":(J)V
      11: aload_0
      12: aload_1
      13: getfield      #6                  // Field env_:Lorg/rocksdb/Env;
      16: putfield      #6                  // Field env_:Lorg/rocksdb/Env;
      19: aload_0
      20: aload_1
      21: getfield      #3                  // Field numShardBits_:I
      24: putfield      #3                  // Field numShardBits_:I
      27: aload_0
      28: aload_1
      29: getfield      #7                  // Field rateLimiter_:Lorg/rocksdb/RateLimiter;
      32: putfield      #7                  // Field rateLimiter_:Lorg/rocksdb/RateLimiter;
      35: aload_0
      36: aload_1
      37: getfield      #8                  // Field rowCache_:Lorg/rocksdb/Cache;
      40: putfield      #8                  // Field rowCache_:Lorg/rocksdb/Cache;
      43: aload_0
      44: aload_1
      45: getfield      #9                  // Field walFilter_:Lorg/rocksdb/WalFilter;
      48: putfield      #9                  // Field walFilter_:Lorg/rocksdb/WalFilter;
      51: aload_0
      52: aload_1
      53: getfield      #10                 // Field writeBufferManager_:Lorg/rocksdb/WriteBufferManager;
      56: putfield      #10                 // Field writeBufferManager_:Lorg/rocksdb/WriteBufferManager;
      59: return

  public org.rocksdb.DBOptions(org.rocksdb.Options);
    Code:
       0: aload_0
       1: aload_1
       2: getfield      #11                 // Field org/rocksdb/Options.nativeHandle_:J
       5: invokestatic  #12                 // Method newDBOptionsFromOptions:(J)J
       8: invokespecial #2                  // Method org/rocksdb/RocksObject."<init>":(J)V
      11: return

  public static org.rocksdb.DBOptions getDBOptionsFromProps(org.rocksdb.ConfigOptions, java.util.Properties);
    Code:
       0: aconst_null
       1: astore_2
       2: aload_1
       3: invokestatic  #13                 // Method org/rocksdb/Options.getOptionStringFromProps:(Ljava/util/Properties;)Ljava/lang/String;
       6: astore_3
       7: aload_0
       8: getfield      #14                 // Field org/rocksdb/ConfigOptions.nativeHandle_:J
      11: aload_3
      12: invokestatic  #15                 // Method getDBOptionsFromProps:(JLjava/lang/String;)J
      15: lstore        4
      17: lload         4
      19: lconst_0
      20: lcmp
      21: ifeq          34
      24: new           #16                 // class org/rocksdb/DBOptions
      27: dup
      28: lload         4
      30: invokespecial #17                 // Method "<init>":(J)V
      33: astore_2
      34: aload_2
      35: areturn

  public static org.rocksdb.DBOptions getDBOptionsFromProps(java.util.Properties);
    Code:
       0: aconst_null
       1: astore_1
       2: aload_0
       3: invokestatic  #13                 // Method org/rocksdb/Options.getOptionStringFromProps:(Ljava/util/Properties;)Ljava/lang/String;
       6: astore_2
       7: aload_2
       8: invokestatic  #18                 // Method getDBOptionsFromProps:(Ljava/lang/String;)J
      11: lstore_3
      12: lload_3
      13: lconst_0
      14: lcmp
      15: ifeq          27
      18: new           #16                 // class org/rocksdb/DBOptions
      21: dup
      22: lload_3
      23: invokespecial #17                 // Method "<init>":(J)V
      26: astore_1
      27: aload_1
      28: areturn

  public org.rocksdb.DBOptions optimizeForSmallDb();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #4                  // Field nativeHandle_:J
       5: invokespecial #19                 // Method optimizeForSmallDb:(J)V
       8: aload_0
       9: areturn

  public org.rocksdb.DBOptions setIncreaseParallelism(int);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #24                 // Method setIncreaseParallelism:(JI)V
      30: aload_0
      31: areturn

  public org.rocksdb.DBOptions setCreateIfMissing(boolean);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #25                 // Method setCreateIfMissing:(JZ)V
      30: aload_0
      31: areturn

  public boolean createIfMissing();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #26                 // Method createIfMissing:(J)Z
      29: ireturn

  public org.rocksdb.DBOptions setCreateMissingColumnFamilies(boolean);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #27                 // Method setCreateMissingColumnFamilies:(JZ)V
      30: aload_0
      31: areturn

  public boolean createMissingColumnFamilies();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #28                 // Method createMissingColumnFamilies:(J)Z
      29: ireturn

  public org.rocksdb.DBOptions setErrorIfExists(boolean);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #29                 // Method setErrorIfExists:(JZ)V
      30: aload_0
      31: areturn

  public boolean errorIfExists();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #30                 // Method errorIfExists:(J)Z
      29: ireturn

  public org.rocksdb.DBOptions setParanoidChecks(boolean);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #31                 // Method setParanoidChecks:(JZ)V
      30: aload_0
      31: areturn

  public boolean paranoidChecks();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #32                 // Method paranoidChecks:(J)Z
      29: ireturn

  public org.rocksdb.DBOptions setEnv(org.rocksdb.Env);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #4                  // Field nativeHandle_:J
       5: aload_1
       6: getfield      #33                 // Field org/rocksdb/Env.nativeHandle_:J
       9: invokespecial #34                 // Method setEnv:(JJ)V
      12: aload_0
      13: aload_1
      14: putfield      #6                  // Field env_:Lorg/rocksdb/Env;
      17: aload_0
      18: areturn

  public org.rocksdb.Env getEnv();
    Code:
       0: aload_0
       1: getfield      #6                  // Field env_:Lorg/rocksdb/Env;
       4: areturn

  public org.rocksdb.DBOptions setRateLimiter(org.rocksdb.RateLimiter);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_1
      23: putfield      #7                  // Field rateLimiter_:Lorg/rocksdb/RateLimiter;
      26: aload_0
      27: aload_0
      28: getfield      #4                  // Field nativeHandle_:J
      31: aload_1
      32: getfield      #35                 // Field org/rocksdb/RateLimiter.nativeHandle_:J
      35: invokespecial #36                 // Method setRateLimiter:(JJ)V
      38: aload_0
      39: areturn

  public org.rocksdb.DBOptions setSstFileManager(org.rocksdb.SstFileManager);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: aload_1
      27: getfield      #37                 // Field org/rocksdb/SstFileManager.nativeHandle_:J
      30: invokespecial #38                 // Method setSstFileManager:(JJ)V
      33: aload_0
      34: areturn

  public org.rocksdb.DBOptions setLogger(org.rocksdb.Logger);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: aload_1
      27: getfield      #39                 // Field org/rocksdb/Logger.nativeHandle_:J
      30: invokespecial #40                 // Method setLogger:(JJ)V
      33: aload_0
      34: areturn

  public org.rocksdb.DBOptions setInfoLogLevel(org.rocksdb.InfoLogLevel);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: aload_1
      27: invokevirtual #41                 // Method org/rocksdb/InfoLogLevel.getValue:()B
      30: invokespecial #42                 // Method setInfoLogLevel:(JB)V
      33: aload_0
      34: areturn

  public org.rocksdb.InfoLogLevel infoLogLevel();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #43                 // Method infoLogLevel:(J)B
      29: invokestatic  #44                 // Method org/rocksdb/InfoLogLevel.getInfoLogLevel:(B)Lorg/rocksdb/InfoLogLevel;
      32: areturn

  public org.rocksdb.DBOptions setMaxOpenFiles(int);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #45                 // Method setMaxOpenFiles:(JI)V
      30: aload_0
      31: areturn

  public int maxOpenFiles();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #46                 // Method maxOpenFiles:(J)I
      29: ireturn

  public org.rocksdb.DBOptions setMaxFileOpeningThreads(int);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #47                 // Method setMaxFileOpeningThreads:(JI)V
      30: aload_0
      31: areturn

  public int maxFileOpeningThreads();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #48                 // Method maxFileOpeningThreads:(J)I
      29: ireturn

  public org.rocksdb.DBOptions setMaxTotalWalSize(long);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #49                 // Method setMaxTotalWalSize:(JJ)V
      30: aload_0
      31: areturn

  public long maxTotalWalSize();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #50                 // Method maxTotalWalSize:(J)J
      29: lreturn

  public org.rocksdb.DBOptions setStatistics(org.rocksdb.Statistics);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: aload_1
      27: getfield      #51                 // Field org/rocksdb/Statistics.nativeHandle_:J
      30: invokespecial #52                 // Method setStatistics:(JJ)V
      33: aload_0
      34: areturn

  public org.rocksdb.Statistics statistics();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #53                 // Method statistics:(J)J
      29: lstore_1
      30: lload_1
      31: lconst_0
      32: lcmp
      33: ifne          38
      36: aconst_null
      37: areturn
      38: new           #54                 // class org/rocksdb/Statistics
      41: dup
      42: lload_1
      43: invokespecial #55                 // Method org/rocksdb/Statistics."<init>":(J)V
      46: areturn

  public org.rocksdb.DBOptions setUseFsync(boolean);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #56                 // Method setUseFsync:(JZ)V
      30: aload_0
      31: areturn

  public boolean useFsync();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #57                 // Method useFsync:(J)Z
      29: ireturn

  public org.rocksdb.DBOptions setDbPaths(java.util.Collection<org.rocksdb.DbPath>);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_1
      22: invokeinterface #58,  1           // InterfaceMethod java/util/Collection.size:()I
      27: istore_2
      28: iload_2
      29: anewarray     #59                 // class java/lang/String
      32: astore_3
      33: iload_2
      34: newarray       long
      36: astore        4
      38: iconst_0
      39: istore        5
      41: aload_1
      42: invokeinterface #60,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      47: astore        6
      49: aload         6
      51: invokeinterface #61,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      56: ifeq          101
      59: aload         6
      61: invokeinterface #62,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      66: checkcast     #63                 // class org/rocksdb/DbPath
      69: astore        7
      71: aload_3
      72: iload         5
      74: aload         7
      76: getfield      #64                 // Field org/rocksdb/DbPath.path:Ljava/nio/file/Path;
      79: invokeinterface #65,  1           // InterfaceMethod java/nio/file/Path.toString:()Ljava/lang/String;
      84: aastore
      85: aload         4
      87: iload         5
      89: aload         7
      91: getfield      #66                 // Field org/rocksdb/DbPath.targetSize:J
      94: lastore
      95: iinc          5, 1
      98: goto          49
     101: aload_0
     102: aload_0
     103: getfield      #4                  // Field nativeHandle_:J
     106: aload_3
     107: aload         4
     109: invokespecial #67                 // Method setDbPaths:(J[Ljava/lang/String;[J)V
     112: aload_0
     113: areturn

  public java.util.List<org.rocksdb.DbPath> dbPaths();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #4                  // Field nativeHandle_:J
       5: invokespecial #68                 // Method dbPathsLen:(J)J
       8: l2i
       9: istore_1
      10: iload_1
      11: ifne          18
      14: invokestatic  #69                 // Method java/util/Collections.emptyList:()Ljava/util/List;
      17: areturn
      18: iload_1
      19: anewarray     #59                 // class java/lang/String
      22: astore_2
      23: iload_1
      24: newarray       long
      26: astore_3
      27: aload_0
      28: aload_0
      29: getfield      #4                  // Field nativeHandle_:J
      32: aload_2
      33: aload_3
      34: invokespecial #70                 // Method dbPaths:(J[Ljava/lang/String;[J)V
      37: new           #71                 // class java/util/ArrayList
      40: dup
      41: invokespecial #72                 // Method java/util/ArrayList."<init>":()V
      44: astore        4
      46: iconst_0
      47: istore        5
      49: iload         5
      51: iload_1
      52: if_icmpge     91
      55: aload         4
      57: new           #63                 // class org/rocksdb/DbPath
      60: dup
      61: aload_2
      62: iload         5
      64: aaload
      65: iconst_0
      66: anewarray     #59                 // class java/lang/String
      69: invokestatic  #73                 // Method java/nio/file/Paths.get:(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;
      72: aload_3
      73: iload         5
      75: laload
      76: invokespecial #74                 // Method org/rocksdb/DbPath."<init>":(Ljava/nio/file/Path;J)V
      79: invokeinterface #75,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      84: pop
      85: iinc          5, 1
      88: goto          49
      91: aload         4
      93: areturn

  public org.rocksdb.DBOptions setDbLogDir(java.lang.String);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: aload_1
      27: invokespecial #76                 // Method setDbLogDir:(JLjava/lang/String;)V
      30: aload_0
      31: areturn

  public java.lang.String dbLogDir();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #77                 // Method dbLogDir:(J)Ljava/lang/String;
      29: areturn

  public org.rocksdb.DBOptions setWalDir(java.lang.String);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: aload_1
      27: invokespecial #78                 // Method setWalDir:(JLjava/lang/String;)V
      30: aload_0
      31: areturn

  public java.lang.String walDir();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #79                 // Method walDir:(J)Ljava/lang/String;
      29: areturn

  public org.rocksdb.DBOptions setDeleteObsoleteFilesPeriodMicros(long);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #80                 // Method setDeleteObsoleteFilesPeriodMicros:(JJ)V
      30: aload_0
      31: areturn

  public long deleteObsoleteFilesPeriodMicros();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #81                 // Method deleteObsoleteFilesPeriodMicros:(J)J
      29: lreturn

  public org.rocksdb.DBOptions setMaxBackgroundJobs(int);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #82                 // Method setMaxBackgroundJobs:(JI)V
      30: aload_0
      31: areturn

  public int maxBackgroundJobs();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #83                 // Method maxBackgroundJobs:(J)I
      29: ireturn

  public void setBaseBackgroundCompactions(int);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #84                 // Method setBaseBackgroundCompactions:(JI)V
      30: return

  public int baseBackgroundCompactions();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #85                 // Method baseBackgroundCompactions:(J)I
      29: ireturn

  public org.rocksdb.DBOptions setMaxBackgroundCompactions(int);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #86                 // Method setMaxBackgroundCompactions:(JI)V
      30: aload_0
      31: areturn

  public int maxBackgroundCompactions();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #87                 // Method maxBackgroundCompactions:(J)I
      29: ireturn

  public org.rocksdb.DBOptions setMaxSubcompactions(int);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #88                 // Method setMaxSubcompactions:(JI)V
      30: aload_0
      31: areturn

  public int maxSubcompactions();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #89                 // Method maxSubcompactions:(J)I
      29: ireturn

  public org.rocksdb.DBOptions setMaxBackgroundFlushes(int);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #90                 // Method setMaxBackgroundFlushes:(JI)V
      30: aload_0
      31: areturn

  public int maxBackgroundFlushes();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #91                 // Method maxBackgroundFlushes:(J)I
      29: ireturn

  public org.rocksdb.DBOptions setMaxLogFileSize(long);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #92                 // Method setMaxLogFileSize:(JJ)V
      30: aload_0
      31: areturn

  public long maxLogFileSize();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #93                 // Method maxLogFileSize:(J)J
      29: lreturn

  public org.rocksdb.DBOptions setLogFileTimeToRoll(long);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #94                 // Method setLogFileTimeToRoll:(JJ)V
      30: aload_0
      31: areturn

  public long logFileTimeToRoll();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #95                 // Method logFileTimeToRoll:(J)J
      29: lreturn

  public org.rocksdb.DBOptions setKeepLogFileNum(long);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #96                 // Method setKeepLogFileNum:(JJ)V
      30: aload_0
      31: areturn

  public long keepLogFileNum();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #97                 // Method keepLogFileNum:(J)J
      29: lreturn

  public org.rocksdb.DBOptions setRecycleLogFileNum(long);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #98                 // Method setRecycleLogFileNum:(JJ)V
      30: aload_0
      31: areturn

  public long recycleLogFileNum();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #99                 // Method recycleLogFileNum:(J)J
      29: lreturn

  public org.rocksdb.DBOptions setMaxManifestFileSize(long);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #100                // Method setMaxManifestFileSize:(JJ)V
      30: aload_0
      31: areturn

  public long maxManifestFileSize();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #101                // Method maxManifestFileSize:(J)J
      29: lreturn

  public org.rocksdb.DBOptions setTableCacheNumshardbits(int);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #102                // Method setTableCacheNumshardbits:(JI)V
      30: aload_0
      31: areturn

  public int tableCacheNumshardbits();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #103                // Method tableCacheNumshardbits:(J)I
      29: ireturn

  public org.rocksdb.DBOptions setWalTtlSeconds(long);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #104                // Method setWalTtlSeconds:(JJ)V
      30: aload_0
      31: areturn

  public long walTtlSeconds();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #105                // Method walTtlSeconds:(J)J
      29: lreturn

  public org.rocksdb.DBOptions setWalSizeLimitMB(long);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #106                // Method setWalSizeLimitMB:(JJ)V
      30: aload_0
      31: areturn

  public long walSizeLimitMB();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #107                // Method walSizeLimitMB:(J)J
      29: lreturn

  public org.rocksdb.DBOptions setManifestPreallocationSize(long);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #108                // Method setManifestPreallocationSize:(JJ)V
      30: aload_0
      31: areturn

  public long manifestPreallocationSize();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #109                // Method manifestPreallocationSize:(J)J
      29: lreturn

  public org.rocksdb.DBOptions setAllowMmapReads(boolean);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #110                // Method setAllowMmapReads:(JZ)V
      30: aload_0
      31: areturn

  public boolean allowMmapReads();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #111                // Method allowMmapReads:(J)Z
      29: ireturn

  public org.rocksdb.DBOptions setAllowMmapWrites(boolean);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #112                // Method setAllowMmapWrites:(JZ)V
      30: aload_0
      31: areturn

  public boolean allowMmapWrites();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #113                // Method allowMmapWrites:(J)Z
      29: ireturn

  public org.rocksdb.DBOptions setUseDirectReads(boolean);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #114                // Method setUseDirectReads:(JZ)V
      30: aload_0
      31: areturn

  public boolean useDirectReads();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #115                // Method useDirectReads:(J)Z
      29: ireturn

  public org.rocksdb.DBOptions setUseDirectIoForFlushAndCompaction(boolean);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #116                // Method setUseDirectIoForFlushAndCompaction:(JZ)V
      30: aload_0
      31: areturn

  public boolean useDirectIoForFlushAndCompaction();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #117                // Method useDirectIoForFlushAndCompaction:(J)Z
      29: ireturn

  public org.rocksdb.DBOptions setAllowFAllocate(boolean);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #118                // Method setAllowFAllocate:(JZ)V
      30: aload_0
      31: areturn

  public boolean allowFAllocate();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #119                // Method allowFAllocate:(J)Z
      29: ireturn

  public org.rocksdb.DBOptions setIsFdCloseOnExec(boolean);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #120                // Method setIsFdCloseOnExec:(JZ)V
      30: aload_0
      31: areturn

  public boolean isFdCloseOnExec();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #121                // Method isFdCloseOnExec:(J)Z
      29: ireturn

  public org.rocksdb.DBOptions setStatsDumpPeriodSec(int);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #122                // Method setStatsDumpPeriodSec:(JI)V
      30: aload_0
      31: areturn

  public int statsDumpPeriodSec();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #123                // Method statsDumpPeriodSec:(J)I
      29: ireturn

  public org.rocksdb.DBOptions setStatsPersistPeriodSec(int);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #124                // Method setStatsPersistPeriodSec:(JI)V
      30: aload_0
      31: areturn

  public int statsPersistPeriodSec();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #125                // Method statsPersistPeriodSec:(J)I
      29: ireturn

  public org.rocksdb.DBOptions setStatsHistoryBufferSize(long);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #126                // Method setStatsHistoryBufferSize:(JJ)V
      30: aload_0
      31: areturn

  public long statsHistoryBufferSize();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #127                // Method statsHistoryBufferSize:(J)J
      29: lreturn

  public org.rocksdb.DBOptions setAdviseRandomOnOpen(boolean);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #128                // Method setAdviseRandomOnOpen:(JZ)V
      30: aload_0
      31: areturn

  public boolean adviseRandomOnOpen();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #4                  // Field nativeHandle_:J
       5: invokespecial #129                // Method adviseRandomOnOpen:(J)Z
       8: ireturn

  public org.rocksdb.DBOptions setDbWriteBufferSize(long);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #130                // Method setDbWriteBufferSize:(JJ)V
      30: aload_0
      31: areturn

  public org.rocksdb.DBOptions setWriteBufferManager(org.rocksdb.WriteBufferManager);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: aload_1
      27: getfield      #131                // Field org/rocksdb/WriteBufferManager.nativeHandle_:J
      30: invokespecial #132                // Method setWriteBufferManager:(JJ)V
      33: aload_0
      34: aload_1
      35: putfield      #10                 // Field writeBufferManager_:Lorg/rocksdb/WriteBufferManager;
      38: aload_0
      39: areturn

  public org.rocksdb.WriteBufferManager writeBufferManager();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: getfield      #10                 // Field writeBufferManager_:Lorg/rocksdb/WriteBufferManager;
      25: areturn

  public long dbWriteBufferSize();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #133                // Method dbWriteBufferSize:(J)J
      29: lreturn

  public org.rocksdb.DBOptions setAccessHintOnCompactionStart(org.rocksdb.AccessHint);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: aload_1
      27: invokevirtual #134                // Method org/rocksdb/AccessHint.getValue:()B
      30: invokespecial #135                // Method setAccessHintOnCompactionStart:(JB)V
      33: aload_0
      34: areturn

  public org.rocksdb.AccessHint accessHintOnCompactionStart();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #136                // Method accessHintOnCompactionStart:(J)B
      29: invokestatic  #137                // Method org/rocksdb/AccessHint.getAccessHint:(B)Lorg/rocksdb/AccessHint;
      32: areturn

  public org.rocksdb.DBOptions setNewTableReaderForCompactionInputs(boolean);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #138                // Method setNewTableReaderForCompactionInputs:(JZ)V
      30: aload_0
      31: areturn

  public boolean newTableReaderForCompactionInputs();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #139                // Method newTableReaderForCompactionInputs:(J)Z
      29: ireturn

  public org.rocksdb.DBOptions setCompactionReadaheadSize(long);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #140                // Method setCompactionReadaheadSize:(JJ)V
      30: aload_0
      31: areturn

  public long compactionReadaheadSize();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #141                // Method compactionReadaheadSize:(J)J
      29: lreturn

  public org.rocksdb.DBOptions setRandomAccessMaxBufferSize(long);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #142                // Method setRandomAccessMaxBufferSize:(JJ)V
      30: aload_0
      31: areturn

  public long randomAccessMaxBufferSize();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #143                // Method randomAccessMaxBufferSize:(J)J
      29: lreturn

  public org.rocksdb.DBOptions setWritableFileMaxBufferSize(long);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #144                // Method setWritableFileMaxBufferSize:(JJ)V
      30: aload_0
      31: areturn

  public long writableFileMaxBufferSize();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #145                // Method writableFileMaxBufferSize:(J)J
      29: lreturn

  public org.rocksdb.DBOptions setUseAdaptiveMutex(boolean);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #146                // Method setUseAdaptiveMutex:(JZ)V
      30: aload_0
      31: areturn

  public boolean useAdaptiveMutex();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #147                // Method useAdaptiveMutex:(J)Z
      29: ireturn

  public org.rocksdb.DBOptions setBytesPerSync(long);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #148                // Method setBytesPerSync:(JJ)V
      30: aload_0
      31: areturn

  public long bytesPerSync();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #4                  // Field nativeHandle_:J
       5: invokespecial #149                // Method bytesPerSync:(J)J
       8: lreturn

  public org.rocksdb.DBOptions setWalBytesPerSync(long);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #150                // Method setWalBytesPerSync:(JJ)V
      30: aload_0
      31: areturn

  public long walBytesPerSync();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #151                // Method walBytesPerSync:(J)J
      29: lreturn

  public org.rocksdb.DBOptions setStrictBytesPerSync(boolean);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #152                // Method setStrictBytesPerSync:(JZ)V
      30: aload_0
      31: areturn

  public boolean strictBytesPerSync();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #153                // Method strictBytesPerSync:(J)Z
      29: ireturn

  public org.rocksdb.DBOptions setEnableThreadTracking(boolean);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #154                // Method setEnableThreadTracking:(JZ)V
      30: aload_0
      31: areturn

  public boolean enableThreadTracking();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #155                // Method enableThreadTracking:(J)Z
      29: ireturn

  public org.rocksdb.DBOptions setDelayedWriteRate(long);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: lload_1
      27: invokespecial #156                // Method setDelayedWriteRate:(JJ)V
      30: aload_0
      31: areturn

  public long delayedWriteRate();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #4                  // Field nativeHandle_:J
       5: invokespecial #157                // Method delayedWriteRate:(J)J
       8: lreturn

  public org.rocksdb.DBOptions setEnablePipelinedWrite(boolean);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #158                // Method setEnablePipelinedWrite:(JZ)V
      30: aload_0
      31: areturn

  public boolean enablePipelinedWrite();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #159                // Method enablePipelinedWrite:(J)Z
      29: ireturn

  public org.rocksdb.DBOptions setUnorderedWrite(boolean);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #4                  // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #160                // Method setUnorderedWrite:(JZ)V
       9: aload_0
      10: areturn

  public boolean unorderedWrite();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #4                  // Field nativeHandle_:J
       5: invokespecial #161                // Method unorderedWrite:(J)Z
       8: ireturn

  public org.rocksdb.DBOptions setAllowConcurrentMemtableWrite(boolean);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #4                  // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #162                // Method setAllowConcurrentMemtableWrite:(JZ)V
       9: aload_0
      10: areturn

  public boolean allowConcurrentMemtableWrite();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #4                  // Field nativeHandle_:J
       5: invokespecial #163                // Method allowConcurrentMemtableWrite:(J)Z
       8: ireturn

  public org.rocksdb.DBOptions setEnableWriteThreadAdaptiveYield(boolean);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #4                  // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #164                // Method setEnableWriteThreadAdaptiveYield:(JZ)V
       9: aload_0
      10: areturn

  public boolean enableWriteThreadAdaptiveYield();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #4                  // Field nativeHandle_:J
       5: invokespecial #165                // Method enableWriteThreadAdaptiveYield:(J)Z
       8: ireturn

  public org.rocksdb.DBOptions setWriteThreadMaxYieldUsec(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #4                  // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #166                // Method setWriteThreadMaxYieldUsec:(JJ)V
       9: aload_0
      10: areturn

  public long writeThreadMaxYieldUsec();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #4                  // Field nativeHandle_:J
       5: invokespecial #167                // Method writeThreadMaxYieldUsec:(J)J
       8: lreturn

  public org.rocksdb.DBOptions setWriteThreadSlowYieldUsec(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #4                  // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #168                // Method setWriteThreadSlowYieldUsec:(JJ)V
       9: aload_0
      10: areturn

  public long writeThreadSlowYieldUsec();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #4                  // Field nativeHandle_:J
       5: invokespecial #169                // Method writeThreadSlowYieldUsec:(J)J
       8: lreturn

  public org.rocksdb.DBOptions setSkipStatsUpdateOnDbOpen(boolean);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #170                // Method setSkipStatsUpdateOnDbOpen:(JZ)V
      30: aload_0
      31: areturn

  public boolean skipStatsUpdateOnDbOpen();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #171                // Method skipStatsUpdateOnDbOpen:(J)Z
      29: ireturn

  public org.rocksdb.DBOptions setWalRecoveryMode(org.rocksdb.WALRecoveryMode);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: aload_1
      27: invokevirtual #172                // Method org/rocksdb/WALRecoveryMode.getValue:()B
      30: invokespecial #173                // Method setWalRecoveryMode:(JB)V
      33: aload_0
      34: areturn

  public org.rocksdb.WALRecoveryMode walRecoveryMode();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #174                // Method walRecoveryMode:(J)B
      29: invokestatic  #175                // Method org/rocksdb/WALRecoveryMode.getWALRecoveryMode:(B)Lorg/rocksdb/WALRecoveryMode;
      32: areturn

  public org.rocksdb.DBOptions setAllow2pc(boolean);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #176                // Method setAllow2pc:(JZ)V
      30: aload_0
      31: areturn

  public boolean allow2pc();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #177                // Method allow2pc:(J)Z
      29: ireturn

  public org.rocksdb.DBOptions setRowCache(org.rocksdb.Cache);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: aload_1
      27: getfield      #178                // Field org/rocksdb/Cache.nativeHandle_:J
      30: invokespecial #179                // Method setRowCache:(JJ)V
      33: aload_0
      34: aload_1
      35: putfield      #8                  // Field rowCache_:Lorg/rocksdb/Cache;
      38: aload_0
      39: areturn

  public org.rocksdb.Cache rowCache();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: getfield      #8                  // Field rowCache_:Lorg/rocksdb/Cache;
      25: areturn

  public org.rocksdb.DBOptions setWalFilter(org.rocksdb.AbstractWalFilter);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: aload_1
      27: getfield      #180                // Field org/rocksdb/AbstractWalFilter.nativeHandle_:J
      30: invokespecial #181                // Method setWalFilter:(JJ)V
      33: aload_0
      34: aload_1
      35: putfield      #9                  // Field walFilter_:Lorg/rocksdb/WalFilter;
      38: aload_0
      39: areturn

  public org.rocksdb.WalFilter walFilter();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: getfield      #9                  // Field walFilter_:Lorg/rocksdb/WalFilter;
      25: areturn

  public org.rocksdb.DBOptions setFailIfOptionsFileError(boolean);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #182                // Method setFailIfOptionsFileError:(JZ)V
      30: aload_0
      31: areturn

  public boolean failIfOptionsFileError();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #183                // Method failIfOptionsFileError:(J)Z
      29: ireturn

  public org.rocksdb.DBOptions setDumpMallocStats(boolean);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #184                // Method setDumpMallocStats:(JZ)V
      30: aload_0
      31: areturn

  public boolean dumpMallocStats();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #185                // Method dumpMallocStats:(J)Z
      29: ireturn

  public org.rocksdb.DBOptions setAvoidFlushDuringRecovery(boolean);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #186                // Method setAvoidFlushDuringRecovery:(JZ)V
      30: aload_0
      31: areturn

  public boolean avoidFlushDuringRecovery();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #187                // Method avoidFlushDuringRecovery:(J)Z
      29: ireturn

  public org.rocksdb.DBOptions setAvoidFlushDuringShutdown(boolean);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #188                // Method setAvoidFlushDuringShutdown:(JZ)V
      30: aload_0
      31: areturn

  public boolean avoidFlushDuringShutdown();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #189                // Method avoidFlushDuringShutdown:(J)Z
      29: ireturn

  public org.rocksdb.DBOptions setAllowIngestBehind(boolean);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #190                // Method setAllowIngestBehind:(JZ)V
      30: aload_0
      31: areturn

  public boolean allowIngestBehind();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #191                // Method allowIngestBehind:(J)Z
      29: ireturn

  public org.rocksdb.DBOptions setPreserveDeletes(boolean);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #192                // Method setPreserveDeletes:(JZ)V
      30: aload_0
      31: areturn

  public boolean preserveDeletes();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #193                // Method preserveDeletes:(J)Z
      29: ireturn

  public org.rocksdb.DBOptions setTwoWriteQueues(boolean);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #194                // Method setTwoWriteQueues:(JZ)V
      30: aload_0
      31: areturn

  public boolean twoWriteQueues();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #195                // Method twoWriteQueues:(J)Z
      29: ireturn

  public org.rocksdb.DBOptions setManualWalFlush(boolean);
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: iload_1
      27: invokespecial #196                // Method setManualWalFlush:(JZ)V
      30: aload_0
      31: areturn

  public boolean manualWalFlush();
    Code:
       0: getstatic     #20                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #21                 // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #22                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #23                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #4                  // Field nativeHandle_:J
      26: invokespecial #197                // Method manualWalFlush:(J)Z
      29: ireturn

  public org.rocksdb.DBOptions setAtomicFlush(boolean);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #4                  // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #198                // Method setAtomicFlush:(JZ)V
       9: aload_0
      10: areturn

  public boolean atomicFlush();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #4                  // Field nativeHandle_:J
       5: invokespecial #199                // Method atomicFlush:(J)Z
       8: ireturn

  private org.rocksdb.DBOptions(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokespecial #2                  // Method org/rocksdb/RocksObject."<init>":(J)V
       5: return

  private static native long getDBOptionsFromProps(long, java.lang.String);

  private static native long getDBOptionsFromProps(java.lang.String);

  private static native long newDBOptions();

  private static native long copyDBOptions(long);

  private static native long newDBOptionsFromOptions(long);

  protected final native void disposeInternal(long);

  private native void optimizeForSmallDb(long);

  private native void setIncreaseParallelism(long, int);

  private native void setCreateIfMissing(long, boolean);

  private native boolean createIfMissing(long);

  private native void setCreateMissingColumnFamilies(long, boolean);

  private native boolean createMissingColumnFamilies(long);

  private native void setEnv(long, long);

  private native void setErrorIfExists(long, boolean);

  private native boolean errorIfExists(long);

  private native void setParanoidChecks(long, boolean);

  private native boolean paranoidChecks(long);

  private native void setRateLimiter(long, long);

  private native void setSstFileManager(long, long);

  private native void setLogger(long, long);

  private native void setInfoLogLevel(long, byte);

  private native byte infoLogLevel(long);

  private native void setMaxOpenFiles(long, int);

  private native int maxOpenFiles(long);

  private native void setMaxFileOpeningThreads(long, int);

  private native int maxFileOpeningThreads(long);

  private native void setMaxTotalWalSize(long, long);

  private native long maxTotalWalSize(long);

  private native void setStatistics(long, long);

  private native long statistics(long);

  private native boolean useFsync(long);

  private native void setUseFsync(long, boolean);

  private native void setDbPaths(long, java.lang.String[], long[]);

  private native long dbPathsLen(long);

  private native void dbPaths(long, java.lang.String[], long[]);

  private native void setDbLogDir(long, java.lang.String);

  private native java.lang.String dbLogDir(long);

  private native void setWalDir(long, java.lang.String);

  private native java.lang.String walDir(long);

  private native void setDeleteObsoleteFilesPeriodMicros(long, long);

  private native long deleteObsoleteFilesPeriodMicros(long);

  private native void setBaseBackgroundCompactions(long, int);

  private native int baseBackgroundCompactions(long);

  private native void setMaxBackgroundCompactions(long, int);

  private native int maxBackgroundCompactions(long);

  private native void setMaxSubcompactions(long, int);

  private native int maxSubcompactions(long);

  private native void setMaxBackgroundFlushes(long, int);

  private native int maxBackgroundFlushes(long);

  private native void setMaxBackgroundJobs(long, int);

  private native int maxBackgroundJobs(long);

  private native void setMaxLogFileSize(long, long) throws java.lang.IllegalArgumentException;

  private native long maxLogFileSize(long);

  private native void setLogFileTimeToRoll(long, long) throws java.lang.IllegalArgumentException;

  private native long logFileTimeToRoll(long);

  private native void setKeepLogFileNum(long, long) throws java.lang.IllegalArgumentException;

  private native long keepLogFileNum(long);

  private native void setRecycleLogFileNum(long, long);

  private native long recycleLogFileNum(long);

  private native void setMaxManifestFileSize(long, long);

  private native long maxManifestFileSize(long);

  private native void setTableCacheNumshardbits(long, int);

  private native int tableCacheNumshardbits(long);

  private native void setWalTtlSeconds(long, long);

  private native long walTtlSeconds(long);

  private native void setWalSizeLimitMB(long, long);

  private native long walSizeLimitMB(long);

  private native void setManifestPreallocationSize(long, long) throws java.lang.IllegalArgumentException;

  private native long manifestPreallocationSize(long);

  private native void setUseDirectReads(long, boolean);

  private native boolean useDirectReads(long);

  private native void setUseDirectIoForFlushAndCompaction(long, boolean);

  private native boolean useDirectIoForFlushAndCompaction(long);

  private native void setAllowFAllocate(long, boolean);

  private native boolean allowFAllocate(long);

  private native void setAllowMmapReads(long, boolean);

  private native boolean allowMmapReads(long);

  private native void setAllowMmapWrites(long, boolean);

  private native boolean allowMmapWrites(long);

  private native void setIsFdCloseOnExec(long, boolean);

  private native boolean isFdCloseOnExec(long);

  private native void setStatsDumpPeriodSec(long, int);

  private native int statsDumpPeriodSec(long);

  private native void setStatsPersistPeriodSec(long, int);

  private native int statsPersistPeriodSec(long);

  private native void setStatsHistoryBufferSize(long, long);

  private native long statsHistoryBufferSize(long);

  private native void setAdviseRandomOnOpen(long, boolean);

  private native boolean adviseRandomOnOpen(long);

  private native void setDbWriteBufferSize(long, long);

  private native void setWriteBufferManager(long, long);

  private native long dbWriteBufferSize(long);

  private native void setAccessHintOnCompactionStart(long, byte);

  private native byte accessHintOnCompactionStart(long);

  private native void setNewTableReaderForCompactionInputs(long, boolean);

  private native boolean newTableReaderForCompactionInputs(long);

  private native void setCompactionReadaheadSize(long, long);

  private native long compactionReadaheadSize(long);

  private native void setRandomAccessMaxBufferSize(long, long);

  private native long randomAccessMaxBufferSize(long);

  private native void setWritableFileMaxBufferSize(long, long);

  private native long writableFileMaxBufferSize(long);

  private native void setUseAdaptiveMutex(long, boolean);

  private native boolean useAdaptiveMutex(long);

  private native void setBytesPerSync(long, long);

  private native long bytesPerSync(long);

  private native void setWalBytesPerSync(long, long);

  private native long walBytesPerSync(long);

  private native void setStrictBytesPerSync(long, boolean);

  private native boolean strictBytesPerSync(long);

  private native void setEnableThreadTracking(long, boolean);

  private native boolean enableThreadTracking(long);

  private native void setDelayedWriteRate(long, long);

  private native long delayedWriteRate(long);

  private native void setEnablePipelinedWrite(long, boolean);

  private native boolean enablePipelinedWrite(long);

  private native void setUnorderedWrite(long, boolean);

  private native boolean unorderedWrite(long);

  private native void setAllowConcurrentMemtableWrite(long, boolean);

  private native boolean allowConcurrentMemtableWrite(long);

  private native void setEnableWriteThreadAdaptiveYield(long, boolean);

  private native boolean enableWriteThreadAdaptiveYield(long);

  private native void setWriteThreadMaxYieldUsec(long, long);

  private native long writeThreadMaxYieldUsec(long);

  private native void setWriteThreadSlowYieldUsec(long, long);

  private native long writeThreadSlowYieldUsec(long);

  private native void setSkipStatsUpdateOnDbOpen(long, boolean);

  private native boolean skipStatsUpdateOnDbOpen(long);

  private native void setWalRecoveryMode(long, byte);

  private native byte walRecoveryMode(long);

  private native void setAllow2pc(long, boolean);

  private native boolean allow2pc(long);

  private native void setRowCache(long, long);

  private native void setWalFilter(long, long);

  private native void setFailIfOptionsFileError(long, boolean);

  private native boolean failIfOptionsFileError(long);

  private native void setDumpMallocStats(long, boolean);

  private native boolean dumpMallocStats(long);

  private native void setAvoidFlushDuringRecovery(long, boolean);

  private native boolean avoidFlushDuringRecovery(long);

  private native void setAvoidFlushDuringShutdown(long, boolean);

  private native boolean avoidFlushDuringShutdown(long);

  private native void setAllowIngestBehind(long, boolean);

  private native boolean allowIngestBehind(long);

  private native void setPreserveDeletes(long, boolean);

  private native boolean preserveDeletes(long);

  private native void setTwoWriteQueues(long, boolean);

  private native boolean twoWriteQueues(long);

  private native void setManualWalFlush(long, boolean);

  private native boolean manualWalFlush(long);

  private native void setAtomicFlush(long, boolean);

  private native boolean atomicFlush(long);

  public org.rocksdb.DBOptionsInterface setAtomicFlush(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #200                // Method setAtomicFlush:(Z)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setManualWalFlush(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #201                // Method setManualWalFlush:(Z)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setTwoWriteQueues(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #202                // Method setTwoWriteQueues:(Z)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setPreserveDeletes(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #203                // Method setPreserveDeletes:(Z)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setAllowIngestBehind(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #204                // Method setAllowIngestBehind:(Z)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setAvoidFlushDuringRecovery(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #205                // Method setAvoidFlushDuringRecovery:(Z)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setDumpMallocStats(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #206                // Method setDumpMallocStats:(Z)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setFailIfOptionsFileError(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #207                // Method setFailIfOptionsFileError:(Z)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setWalFilter(org.rocksdb.AbstractWalFilter);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #208                // Method setWalFilter:(Lorg/rocksdb/AbstractWalFilter;)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setRowCache(org.rocksdb.Cache);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #209                // Method setRowCache:(Lorg/rocksdb/Cache;)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setAllow2pc(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #210                // Method setAllow2pc:(Z)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setWalRecoveryMode(org.rocksdb.WALRecoveryMode);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #211                // Method setWalRecoveryMode:(Lorg/rocksdb/WALRecoveryMode;)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setSkipStatsUpdateOnDbOpen(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #212                // Method setSkipStatsUpdateOnDbOpen:(Z)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setWriteThreadSlowYieldUsec(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #213                // Method setWriteThreadSlowYieldUsec:(J)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setWriteThreadMaxYieldUsec(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #214                // Method setWriteThreadMaxYieldUsec:(J)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setEnableWriteThreadAdaptiveYield(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #215                // Method setEnableWriteThreadAdaptiveYield:(Z)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setAllowConcurrentMemtableWrite(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #216                // Method setAllowConcurrentMemtableWrite:(Z)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setUnorderedWrite(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #217                // Method setUnorderedWrite:(Z)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setEnablePipelinedWrite(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #218                // Method setEnablePipelinedWrite:(Z)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setEnableThreadTracking(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #219                // Method setEnableThreadTracking:(Z)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setUseAdaptiveMutex(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #220                // Method setUseAdaptiveMutex:(Z)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setRandomAccessMaxBufferSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #221                // Method setRandomAccessMaxBufferSize:(J)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setNewTableReaderForCompactionInputs(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #222                // Method setNewTableReaderForCompactionInputs:(Z)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setAccessHintOnCompactionStart(org.rocksdb.AccessHint);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #223                // Method setAccessHintOnCompactionStart:(Lorg/rocksdb/AccessHint;)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setWriteBufferManager(org.rocksdb.WriteBufferManager);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #224                // Method setWriteBufferManager:(Lorg/rocksdb/WriteBufferManager;)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setDbWriteBufferSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #225                // Method setDbWriteBufferSize:(J)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setAdviseRandomOnOpen(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #226                // Method setAdviseRandomOnOpen:(Z)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setIsFdCloseOnExec(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #227                // Method setIsFdCloseOnExec:(Z)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setAllowMmapWrites(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #228                // Method setAllowMmapWrites:(Z)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setAllowMmapReads(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #229                // Method setAllowMmapReads:(Z)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setAllowFAllocate(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #230                // Method setAllowFAllocate:(Z)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setUseDirectIoForFlushAndCompaction(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #231                // Method setUseDirectIoForFlushAndCompaction:(Z)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setUseDirectReads(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #232                // Method setUseDirectReads:(Z)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setManifestPreallocationSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #233                // Method setManifestPreallocationSize:(J)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setWalSizeLimitMB(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #234                // Method setWalSizeLimitMB:(J)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setWalTtlSeconds(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #235                // Method setWalTtlSeconds:(J)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setTableCacheNumshardbits(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #236                // Method setTableCacheNumshardbits:(I)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setMaxManifestFileSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #237                // Method setMaxManifestFileSize:(J)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setRecycleLogFileNum(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #238                // Method setRecycleLogFileNum:(J)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setKeepLogFileNum(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #239                // Method setKeepLogFileNum:(J)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setLogFileTimeToRoll(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #240                // Method setLogFileTimeToRoll:(J)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setMaxLogFileSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #241                // Method setMaxLogFileSize:(J)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setMaxBackgroundFlushes(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #242                // Method setMaxBackgroundFlushes:(I)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setMaxSubcompactions(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #243                // Method setMaxSubcompactions:(I)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setDeleteObsoleteFilesPeriodMicros(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #244                // Method setDeleteObsoleteFilesPeriodMicros:(J)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setWalDir(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #245                // Method setWalDir:(Ljava/lang/String;)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setDbLogDir(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #246                // Method setDbLogDir:(Ljava/lang/String;)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setDbPaths(java.util.Collection);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #247                // Method setDbPaths:(Ljava/util/Collection;)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setUseFsync(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #248                // Method setUseFsync:(Z)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setStatistics(org.rocksdb.Statistics);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #249                // Method setStatistics:(Lorg/rocksdb/Statistics;)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setMaxFileOpeningThreads(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #250                // Method setMaxFileOpeningThreads:(I)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setInfoLogLevel(org.rocksdb.InfoLogLevel);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #251                // Method setInfoLogLevel:(Lorg/rocksdb/InfoLogLevel;)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setLogger(org.rocksdb.Logger);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #252                // Method setLogger:(Lorg/rocksdb/Logger;)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setSstFileManager(org.rocksdb.SstFileManager);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #253                // Method setSstFileManager:(Lorg/rocksdb/SstFileManager;)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setRateLimiter(org.rocksdb.RateLimiter);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #254                // Method setRateLimiter:(Lorg/rocksdb/RateLimiter;)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setParanoidChecks(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #255                // Method setParanoidChecks:(Z)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setErrorIfExists(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #256                // Method setErrorIfExists:(Z)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setCreateMissingColumnFamilies(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #257                // Method setCreateMissingColumnFamilies:(Z)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setCreateIfMissing(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #258                // Method setCreateIfMissing:(Z)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setIncreaseParallelism(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #259                // Method setIncreaseParallelism:(I)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface setEnv(org.rocksdb.Env);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #260                // Method setEnv:(Lorg/rocksdb/Env;)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.DBOptionsInterface optimizeForSmallDb();
    Code:
       0: aload_0
       1: invokevirtual #261                // Method optimizeForSmallDb:()Lorg/rocksdb/DBOptions;
       4: areturn

  public org.rocksdb.MutableDBOptionsInterface setCompactionReadaheadSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #262                // Method setCompactionReadaheadSize:(J)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.MutableDBOptionsInterface setStrictBytesPerSync(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #263                // Method setStrictBytesPerSync:(Z)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.MutableDBOptionsInterface setWalBytesPerSync(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #264                // Method setWalBytesPerSync:(J)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.MutableDBOptionsInterface setBytesPerSync(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #265                // Method setBytesPerSync:(J)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.MutableDBOptionsInterface setMaxOpenFiles(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #266                // Method setMaxOpenFiles:(I)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.MutableDBOptionsInterface setStatsHistoryBufferSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #267                // Method setStatsHistoryBufferSize:(J)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.MutableDBOptionsInterface setStatsPersistPeriodSec(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #268                // Method setStatsPersistPeriodSec:(I)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.MutableDBOptionsInterface setStatsDumpPeriodSec(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #269                // Method setStatsDumpPeriodSec:(I)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.MutableDBOptionsInterface setDeleteObsoleteFilesPeriodMicros(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #244                // Method setDeleteObsoleteFilesPeriodMicros:(J)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.MutableDBOptionsInterface setMaxTotalWalSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #270                // Method setMaxTotalWalSize:(J)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.MutableDBOptionsInterface setDelayedWriteRate(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #271                // Method setDelayedWriteRate:(J)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.MutableDBOptionsInterface setWritableFileMaxBufferSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokevirtual #272                // Method setWritableFileMaxBufferSize:(J)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.MutableDBOptionsInterface setAvoidFlushDuringShutdown(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #273                // Method setAvoidFlushDuringShutdown:(Z)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.MutableDBOptionsInterface setMaxBackgroundCompactions(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #274                // Method setMaxBackgroundCompactions:(I)Lorg/rocksdb/DBOptions;
       5: areturn

  public org.rocksdb.MutableDBOptionsInterface setMaxBackgroundJobs(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #275                // Method setMaxBackgroundJobs:(I)Lorg/rocksdb/DBOptions;
       5: areturn

  static {};
    Code:
       0: ldc_w         #16                 // class org/rocksdb/DBOptions
       3: invokevirtual #276                // Method java/lang/Class.desiredAssertionStatus:()Z
       6: ifne          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: putstatic     #20                 // Field $assertionsDisabled:Z
      17: invokestatic  #277                // Method org/rocksdb/RocksDB.loadLibrary:()V
      20: return
}
