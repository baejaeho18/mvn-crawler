Compiled from "RocksDB.java"
public class org.rocksdb.RocksDB extends org.rocksdb.RocksObject {
  public static final byte[] DEFAULT_COLUMN_FAMILY;

  public static final int NOT_FOUND;

  private static java.util.concurrent.atomic.AtomicReference<org.rocksdb.RocksDB$LibraryState> libraryLoaded;

  protected org.rocksdb.DBOptionsInterface options_;

  static final boolean $assertionsDisabled;

  public static void loadLibrary();
    Code:
       0: getstatic     #1                  // Field libraryLoaded:Ljava/util/concurrent/atomic/AtomicReference;
       3: invokevirtual #2                  // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       6: getstatic     #3                  // Field org/rocksdb/RocksDB$LibraryState.LOADED:Lorg/rocksdb/RocksDB$LibraryState;
       9: if_acmpne     13
      12: return
      13: getstatic     #1                  // Field libraryLoaded:Ljava/util/concurrent/atomic/AtomicReference;
      16: getstatic     #4                  // Field org/rocksdb/RocksDB$LibraryState.NOT_LOADED:Lorg/rocksdb/RocksDB$LibraryState;
      19: getstatic     #5                  // Field org/rocksdb/RocksDB$LibraryState.LOADING:Lorg/rocksdb/RocksDB$LibraryState;
      22: invokevirtual #6                  // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
      25: ifeq          121
      28: ldc           #7                  // String ROCKSDB_SHAREDLIB_DIR
      30: invokestatic  #8                  // Method java/lang/System.getenv:(Ljava/lang/String;)Ljava/lang/String;
      33: astore_0
      34: invokestatic  #9                  // Method org/rocksdb/CompressionType.values:()[Lorg/rocksdb/CompressionType;
      37: astore_1
      38: aload_1
      39: arraylength
      40: istore_2
      41: iconst_0
      42: istore_3
      43: iload_3
      44: iload_2
      45: if_icmpge     80
      48: aload_1
      49: iload_3
      50: aaload
      51: astore        4
      53: aload         4
      55: invokevirtual #10                 // Method org/rocksdb/CompressionType.getLibraryName:()Ljava/lang/String;
      58: ifnull        69
      61: aload         4
      63: invokevirtual #10                 // Method org/rocksdb/CompressionType.getLibraryName:()Ljava/lang/String;
      66: invokestatic  #11                 // Method java/lang/System.loadLibrary:(Ljava/lang/String;)V
      69: goto          74
      72: astore        5
      74: iinc          3, 1
      77: goto          43
      80: invokestatic  #13                 // Method org/rocksdb/NativeLibraryLoader.getInstance:()Lorg/rocksdb/NativeLibraryLoader;
      83: aload_0
      84: invokevirtual #14                 // Method org/rocksdb/NativeLibraryLoader.loadLibrary:(Ljava/lang/String;)V
      87: goto          111
      90: astore_1
      91: getstatic     #1                  // Field libraryLoaded:Ljava/util/concurrent/atomic/AtomicReference;
      94: getstatic     #4                  // Field org/rocksdb/RocksDB$LibraryState.NOT_LOADED:Lorg/rocksdb/RocksDB$LibraryState;
      97: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
     100: new           #17                 // class java/lang/RuntimeException
     103: dup
     104: ldc           #18                 // String Unable to load the RocksDB shared library
     106: aload_1
     107: invokespecial #19                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
     110: athrow
     111: getstatic     #1                  // Field libraryLoaded:Ljava/util/concurrent/atomic/AtomicReference;
     114: getstatic     #3                  // Field org/rocksdb/RocksDB$LibraryState.LOADED:Lorg/rocksdb/RocksDB$LibraryState;
     117: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
     120: return
     121: getstatic     #1                  // Field libraryLoaded:Ljava/util/concurrent/atomic/AtomicReference;
     124: invokevirtual #2                  // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
     127: getstatic     #5                  // Field org/rocksdb/RocksDB$LibraryState.LOADING:Lorg/rocksdb/RocksDB$LibraryState;
     130: if_acmpne     146
     133: ldc2_w        #20                 // long 10l
     136: invokestatic  #22                 // Method java/lang/Thread.sleep:(J)V
     139: goto          121
     142: astore_0
     143: goto          121
     146: return
    Exception table:
       from    to  target type
          53    69    72   Class java/lang/UnsatisfiedLinkError
          80    87    90   Class java/io/IOException
         133   139   142   Class java/lang/InterruptedException

  public static void loadLibrary(java.util.List<java.lang.String>);
    Code:
       0: getstatic     #1                  // Field libraryLoaded:Ljava/util/concurrent/atomic/AtomicReference;
       3: invokevirtual #2                  // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       6: getstatic     #3                  // Field org/rocksdb/RocksDB$LibraryState.LOADED:Lorg/rocksdb/RocksDB$LibraryState;
       9: if_acmpne     13
      12: return
      13: getstatic     #1                  // Field libraryLoaded:Ljava/util/concurrent/atomic/AtomicReference;
      16: getstatic     #4                  // Field org/rocksdb/RocksDB$LibraryState.NOT_LOADED:Lorg/rocksdb/RocksDB$LibraryState;
      19: getstatic     #5                  // Field org/rocksdb/RocksDB$LibraryState.LOADING:Lorg/rocksdb/RocksDB$LibraryState;
      22: invokevirtual #6                  // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
      25: ifeq          239
      28: invokestatic  #9                  // Method org/rocksdb/CompressionType.values:()[Lorg/rocksdb/CompressionType;
      31: astore_1
      32: aload_1
      33: arraylength
      34: istore_2
      35: iconst_0
      36: istore_3
      37: iload_3
      38: iload_2
      39: if_icmpge     139
      42: aload_1
      43: iload_3
      44: aaload
      45: astore        4
      47: aload         4
      49: getstatic     #24                 // Field org/rocksdb/CompressionType.NO_COMPRESSION:Lorg/rocksdb/CompressionType;
      52: invokevirtual #25                 // Method org/rocksdb/CompressionType.equals:(Ljava/lang/Object;)Z
      55: ifeq          61
      58: goto          133
      61: aload_0
      62: invokeinterface #26,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      67: astore        5
      69: aload         5
      71: invokeinterface #27,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      76: ifeq          133
      79: aload         5
      81: invokeinterface #28,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      86: checkcast     #29                 // class java/lang/String
      89: astore        6
      91: new           #30                 // class java/lang/StringBuilder
      94: dup
      95: invokespecial #31                 // Method java/lang/StringBuilder."<init>":()V
      98: aload         6
     100: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     103: ldc           #33                 // String /
     105: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     108: aload         4
     110: invokevirtual #10                 // Method org/rocksdb/CompressionType.getLibraryName:()Ljava/lang/String;
     113: invokestatic  #34                 // Method org/rocksdb/util/Environment.getSharedLibraryFileName:(Ljava/lang/String;)Ljava/lang/String;
     116: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     119: invokevirtual #35                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     122: invokestatic  #36                 // Method java/lang/System.load:(Ljava/lang/String;)V
     125: goto          133
     128: astore        7
     130: goto          69
     133: iinc          3, 1
     136: goto          37
     139: iconst_0
     140: istore_1
     141: aconst_null
     142: astore_2
     143: aload_0
     144: invokeinterface #26,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     149: astore_3
     150: aload_3
     151: invokeinterface #27,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     156: ifeq          214
     159: aload_3
     160: invokeinterface #28,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     165: checkcast     #29                 // class java/lang/String
     168: astore        4
     170: new           #30                 // class java/lang/StringBuilder
     173: dup
     174: invokespecial #31                 // Method java/lang/StringBuilder."<init>":()V
     177: aload         4
     179: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     182: ldc           #33                 // String /
     184: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     187: ldc           #37                 // String rocksdbjni
     189: invokestatic  #38                 // Method org/rocksdb/util/Environment.getJniLibraryFileName:(Ljava/lang/String;)Ljava/lang/String;
     192: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     195: invokevirtual #35                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     198: invokestatic  #36                 // Method java/lang/System.load:(Ljava/lang/String;)V
     201: iconst_1
     202: istore_1
     203: goto          214
     206: astore        5
     208: aload         5
     210: astore_2
     211: goto          150
     214: iload_1
     215: ifne          229
     218: getstatic     #1                  // Field libraryLoaded:Ljava/util/concurrent/atomic/AtomicReference;
     221: getstatic     #4                  // Field org/rocksdb/RocksDB$LibraryState.NOT_LOADED:Lorg/rocksdb/RocksDB$LibraryState;
     224: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
     227: aload_2
     228: athrow
     229: getstatic     #1                  // Field libraryLoaded:Ljava/util/concurrent/atomic/AtomicReference;
     232: getstatic     #3                  // Field org/rocksdb/RocksDB$LibraryState.LOADED:Lorg/rocksdb/RocksDB$LibraryState;
     235: invokevirtual #16                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
     238: return
     239: getstatic     #1                  // Field libraryLoaded:Ljava/util/concurrent/atomic/AtomicReference;
     242: invokevirtual #2                  // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
     245: getstatic     #5                  // Field org/rocksdb/RocksDB$LibraryState.LOADING:Lorg/rocksdb/RocksDB$LibraryState;
     248: if_acmpne     264
     251: ldc2_w        #20                 // long 10l
     254: invokestatic  #22                 // Method java/lang/Thread.sleep:(J)V
     257: goto          239
     260: astore_1
     261: goto          239
     264: return
    Exception table:
       from    to  target type
          91   125   128   Class java/lang/UnsatisfiedLinkError
         170   203   206   Class java/lang/UnsatisfiedLinkError
         251   257   260   Class java/lang/InterruptedException

  protected org.rocksdb.RocksDB(long);
    Code:
       0: aload_0
       1: lload_1
       2: invokespecial #39                 // Method org/rocksdb/RocksObject."<init>":(J)V
       5: return

  public static org.rocksdb.RocksDB open(java.lang.String) throws org.rocksdb.RocksDBException;
    Code:
       0: new           #40                 // class org/rocksdb/Options
       3: dup
       4: invokespecial #41                 // Method org/rocksdb/Options."<init>":()V
       7: astore_1
       8: aload_1
       9: iconst_1
      10: invokevirtual #42                 // Method org/rocksdb/Options.setCreateIfMissing:(Z)Lorg/rocksdb/Options;
      13: pop
      14: aload_1
      15: aload_0
      16: invokestatic  #43                 // Method open:(Lorg/rocksdb/Options;Ljava/lang/String;)Lorg/rocksdb/RocksDB;
      19: areturn

  public static org.rocksdb.RocksDB open(java.lang.String, java.util.List<org.rocksdb.ColumnFamilyDescriptor>, java.util.List<org.rocksdb.ColumnFamilyHandle>) throws org.rocksdb.RocksDBException;
    Code:
       0: new           #44                 // class org/rocksdb/DBOptions
       3: dup
       4: invokespecial #45                 // Method org/rocksdb/DBOptions."<init>":()V
       7: astore_3
       8: aload_3
       9: aload_0
      10: aload_1
      11: aload_2
      12: invokestatic  #46                 // Method open:(Lorg/rocksdb/DBOptions;Ljava/lang/String;Ljava/util/List;Ljava/util/List;)Lorg/rocksdb/RocksDB;
      15: areturn

  public static org.rocksdb.RocksDB open(org.rocksdb.Options, java.lang.String) throws org.rocksdb.RocksDBException;
    Code:
       0: new           #47                 // class org/rocksdb/RocksDB
       3: dup
       4: aload_0
       5: getfield      #48                 // Field org/rocksdb/Options.nativeHandle_:J
       8: aload_1
       9: invokestatic  #49                 // Method open:(JLjava/lang/String;)J
      12: invokespecial #50                 // Method "<init>":(J)V
      15: astore_2
      16: aload_2
      17: aload_0
      18: invokevirtual #51                 // Method storeOptionsInstance:(Lorg/rocksdb/DBOptionsInterface;)V
      21: aload_2
      22: areturn

  public static org.rocksdb.RocksDB open(org.rocksdb.DBOptions, java.lang.String, java.util.List<org.rocksdb.ColumnFamilyDescriptor>, java.util.List<org.rocksdb.ColumnFamilyHandle>) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_2
       1: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
       6: anewarray     #53                 // class "[B"
       9: astore        4
      11: aload_2
      12: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      17: newarray       long
      19: astore        5
      21: iconst_0
      22: istore        6
      24: iload         6
      26: aload_2
      27: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      32: if_icmpge     77
      35: aload_2
      36: iload         6
      38: invokeinterface #54,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      43: checkcast     #55                 // class org/rocksdb/ColumnFamilyDescriptor
      46: astore        7
      48: aload         4
      50: iload         6
      52: aload         7
      54: invokevirtual #56                 // Method org/rocksdb/ColumnFamilyDescriptor.getName:()[B
      57: aastore
      58: aload         5
      60: iload         6
      62: aload         7
      64: invokevirtual #57                 // Method org/rocksdb/ColumnFamilyDescriptor.getOptions:()Lorg/rocksdb/ColumnFamilyOptions;
      67: getfield      #58                 // Field org/rocksdb/ColumnFamilyOptions.nativeHandle_:J
      70: lastore
      71: iinc          6, 1
      74: goto          24
      77: aload_0
      78: getfield      #59                 // Field org/rocksdb/DBOptions.nativeHandle_:J
      81: aload_1
      82: aload         4
      84: aload         5
      86: invokestatic  #60                 // Method open:(JLjava/lang/String;[[B[J)[J
      89: astore        6
      91: new           #47                 // class org/rocksdb/RocksDB
      94: dup
      95: aload         6
      97: iconst_0
      98: laload
      99: invokespecial #50                 // Method "<init>":(J)V
     102: astore        7
     104: aload         7
     106: aload_0
     107: invokevirtual #51                 // Method storeOptionsInstance:(Lorg/rocksdb/DBOptionsInterface;)V
     110: iconst_1
     111: istore        8
     113: iload         8
     115: aload         6
     117: arraylength
     118: if_icmpge     148
     121: aload_3
     122: new           #61                 // class org/rocksdb/ColumnFamilyHandle
     125: dup
     126: aload         7
     128: aload         6
     130: iload         8
     132: laload
     133: invokespecial #62                 // Method org/rocksdb/ColumnFamilyHandle."<init>":(Lorg/rocksdb/RocksDB;J)V
     136: invokeinterface #63,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     141: pop
     142: iinc          8, 1
     145: goto          113
     148: aload         7
     150: areturn

  public static org.rocksdb.RocksDB openReadOnly(java.lang.String) throws org.rocksdb.RocksDBException;
    Code:
       0: new           #40                 // class org/rocksdb/Options
       3: dup
       4: invokespecial #41                 // Method org/rocksdb/Options."<init>":()V
       7: astore_1
       8: aload_1
       9: aload_0
      10: invokestatic  #64                 // Method openReadOnly:(Lorg/rocksdb/Options;Ljava/lang/String;)Lorg/rocksdb/RocksDB;
      13: areturn

  public static org.rocksdb.RocksDB openReadOnly(java.lang.String, java.util.List<org.rocksdb.ColumnFamilyDescriptor>, java.util.List<org.rocksdb.ColumnFamilyHandle>) throws org.rocksdb.RocksDBException;
    Code:
       0: new           #44                 // class org/rocksdb/DBOptions
       3: dup
       4: invokespecial #45                 // Method org/rocksdb/DBOptions."<init>":()V
       7: astore_3
       8: aload_3
       9: aload_0
      10: aload_1
      11: aload_2
      12: invokestatic  #65                 // Method openReadOnly:(Lorg/rocksdb/DBOptions;Ljava/lang/String;Ljava/util/List;Ljava/util/List;)Lorg/rocksdb/RocksDB;
      15: areturn

  public static org.rocksdb.RocksDB openReadOnly(org.rocksdb.Options, java.lang.String) throws org.rocksdb.RocksDBException;
    Code:
       0: new           #47                 // class org/rocksdb/RocksDB
       3: dup
       4: aload_0
       5: getfield      #48                 // Field org/rocksdb/Options.nativeHandle_:J
       8: aload_1
       9: invokestatic  #66                 // Method openROnly:(JLjava/lang/String;)J
      12: invokespecial #50                 // Method "<init>":(J)V
      15: astore_2
      16: aload_2
      17: aload_0
      18: invokevirtual #51                 // Method storeOptionsInstance:(Lorg/rocksdb/DBOptionsInterface;)V
      21: aload_2
      22: areturn

  public static org.rocksdb.RocksDB openReadOnly(org.rocksdb.DBOptions, java.lang.String, java.util.List<org.rocksdb.ColumnFamilyDescriptor>, java.util.List<org.rocksdb.ColumnFamilyHandle>) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_2
       1: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
       6: anewarray     #53                 // class "[B"
       9: astore        4
      11: aload_2
      12: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      17: newarray       long
      19: astore        5
      21: iconst_0
      22: istore        6
      24: iload         6
      26: aload_2
      27: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      32: if_icmpge     77
      35: aload_2
      36: iload         6
      38: invokeinterface #54,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      43: checkcast     #55                 // class org/rocksdb/ColumnFamilyDescriptor
      46: astore        7
      48: aload         4
      50: iload         6
      52: aload         7
      54: invokevirtual #56                 // Method org/rocksdb/ColumnFamilyDescriptor.getName:()[B
      57: aastore
      58: aload         5
      60: iload         6
      62: aload         7
      64: invokevirtual #57                 // Method org/rocksdb/ColumnFamilyDescriptor.getOptions:()Lorg/rocksdb/ColumnFamilyOptions;
      67: getfield      #58                 // Field org/rocksdb/ColumnFamilyOptions.nativeHandle_:J
      70: lastore
      71: iinc          6, 1
      74: goto          24
      77: aload_0
      78: getfield      #59                 // Field org/rocksdb/DBOptions.nativeHandle_:J
      81: aload_1
      82: aload         4
      84: aload         5
      86: invokestatic  #67                 // Method openROnly:(JLjava/lang/String;[[B[J)[J
      89: astore        6
      91: new           #47                 // class org/rocksdb/RocksDB
      94: dup
      95: aload         6
      97: iconst_0
      98: laload
      99: invokespecial #50                 // Method "<init>":(J)V
     102: astore        7
     104: aload         7
     106: aload_0
     107: invokevirtual #51                 // Method storeOptionsInstance:(Lorg/rocksdb/DBOptionsInterface;)V
     110: iconst_1
     111: istore        8
     113: iload         8
     115: aload         6
     117: arraylength
     118: if_icmpge     148
     121: aload_3
     122: new           #61                 // class org/rocksdb/ColumnFamilyHandle
     125: dup
     126: aload         7
     128: aload         6
     130: iload         8
     132: laload
     133: invokespecial #62                 // Method org/rocksdb/ColumnFamilyHandle."<init>":(Lorg/rocksdb/RocksDB;J)V
     136: invokeinterface #63,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     141: pop
     142: iinc          8, 1
     145: goto          113
     148: aload         7
     150: areturn

  public void closeE() throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: getfield      #68                 // Field owningHandle_:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_1
       5: iconst_0
       6: invokevirtual #69                 // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
       9: ifeq          33
      12: aload_0
      13: getfield      #70                 // Field nativeHandle_:J
      16: invokestatic  #71                 // Method closeDatabase:(J)V
      19: aload_0
      20: invokevirtual #72                 // Method disposeInternal:()V
      23: goto          33
      26: astore_1
      27: aload_0
      28: invokevirtual #72                 // Method disposeInternal:()V
      31: aload_1
      32: athrow
      33: return
    Exception table:
       from    to  target type
          12    19    26   any
          26    27    26   any

  public void close();
    Code:
       0: aload_0
       1: getfield      #68                 // Field owningHandle_:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_1
       5: iconst_0
       6: invokevirtual #69                 // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
       9: ifeq          41
      12: aload_0
      13: getfield      #70                 // Field nativeHandle_:J
      16: invokestatic  #71                 // Method closeDatabase:(J)V
      19: aload_0
      20: invokevirtual #72                 // Method disposeInternal:()V
      23: goto          41
      26: astore_1
      27: aload_0
      28: invokevirtual #72                 // Method disposeInternal:()V
      31: goto          41
      34: astore_2
      35: aload_0
      36: invokevirtual #72                 // Method disposeInternal:()V
      39: aload_2
      40: athrow
      41: return
    Exception table:
       from    to  target type
          12    19    26   Class org/rocksdb/RocksDBException
          12    19    34   any
          26    27    34   any
          34    35    34   any

  public static java.util.List<byte[]> listColumnFamilies(org.rocksdb.Options, java.lang.String) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: getfield      #48                 // Field org/rocksdb/Options.nativeHandle_:J
       4: aload_1
       5: invokestatic  #74                 // Method listColumnFamilies:(JLjava/lang/String;)[[B
       8: invokestatic  #75                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      11: areturn

  public org.rocksdb.ColumnFamilyHandle createColumnFamily(org.rocksdb.ColumnFamilyDescriptor) throws org.rocksdb.RocksDBException;
    Code:
       0: new           #61                 // class org/rocksdb/ColumnFamilyHandle
       3: dup
       4: aload_0
       5: aload_0
       6: aload_0
       7: getfield      #70                 // Field nativeHandle_:J
      10: aload_1
      11: invokevirtual #56                 // Method org/rocksdb/ColumnFamilyDescriptor.getName:()[B
      14: aload_1
      15: invokevirtual #56                 // Method org/rocksdb/ColumnFamilyDescriptor.getName:()[B
      18: arraylength
      19: aload_1
      20: invokevirtual #57                 // Method org/rocksdb/ColumnFamilyDescriptor.getOptions:()Lorg/rocksdb/ColumnFamilyOptions;
      23: getfield      #58                 // Field org/rocksdb/ColumnFamilyOptions.nativeHandle_:J
      26: invokespecial #76                 // Method createColumnFamily:(J[BIJ)J
      29: invokespecial #62                 // Method org/rocksdb/ColumnFamilyHandle."<init>":(Lorg/rocksdb/RocksDB;J)V
      32: areturn

  public java.util.List<org.rocksdb.ColumnFamilyHandle> createColumnFamilies(org.rocksdb.ColumnFamilyOptions, java.util.List<byte[]>) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_2
       1: iconst_0
       2: anewarray     #53                 // class "[B"
       5: invokeinterface #77,  2           // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      10: checkcast     #78                 // class "[[B"
      13: astore_3
      14: aload_0
      15: aload_0
      16: getfield      #70                 // Field nativeHandle_:J
      19: aload_1
      20: getfield      #58                 // Field org/rocksdb/ColumnFamilyOptions.nativeHandle_:J
      23: aload_3
      24: invokespecial #79                 // Method createColumnFamilies:(JJ[[B)[J
      27: astore        4
      29: new           #80                 // class java/util/ArrayList
      32: dup
      33: aload         4
      35: arraylength
      36: invokespecial #81                 // Method java/util/ArrayList."<init>":(I)V
      39: astore        5
      41: iconst_0
      42: istore        6
      44: iload         6
      46: aload         4
      48: arraylength
      49: if_icmpge     79
      52: aload         5
      54: new           #61                 // class org/rocksdb/ColumnFamilyHandle
      57: dup
      58: aload_0
      59: aload         4
      61: iload         6
      63: laload
      64: invokespecial #62                 // Method org/rocksdb/ColumnFamilyHandle."<init>":(Lorg/rocksdb/RocksDB;J)V
      67: invokeinterface #63,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      72: pop
      73: iinc          6, 1
      76: goto          44
      79: aload         5
      81: areturn

  public java.util.List<org.rocksdb.ColumnFamilyHandle> createColumnFamilies(java.util.List<org.rocksdb.ColumnFamilyDescriptor>) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_1
       1: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
       6: newarray       long
       8: astore_2
       9: aload_1
      10: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      15: anewarray     #53                 // class "[B"
      18: astore_3
      19: iconst_0
      20: istore        4
      22: iload         4
      24: aload_1
      25: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      30: if_icmpge     73
      33: aload_1
      34: iload         4
      36: invokeinterface #54,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      41: checkcast     #55                 // class org/rocksdb/ColumnFamilyDescriptor
      44: astore        5
      46: aload_2
      47: iload         4
      49: aload         5
      51: invokevirtual #57                 // Method org/rocksdb/ColumnFamilyDescriptor.getOptions:()Lorg/rocksdb/ColumnFamilyOptions;
      54: getfield      #58                 // Field org/rocksdb/ColumnFamilyOptions.nativeHandle_:J
      57: lastore
      58: aload_3
      59: iload         4
      61: aload         5
      63: invokevirtual #56                 // Method org/rocksdb/ColumnFamilyDescriptor.getName:()[B
      66: aastore
      67: iinc          4, 1
      70: goto          22
      73: aload_0
      74: aload_0
      75: getfield      #70                 // Field nativeHandle_:J
      78: aload_2
      79: aload_3
      80: invokespecial #82                 // Method createColumnFamilies:(J[J[[B)[J
      83: astore        4
      85: new           #80                 // class java/util/ArrayList
      88: dup
      89: aload         4
      91: arraylength
      92: invokespecial #81                 // Method java/util/ArrayList."<init>":(I)V
      95: astore        5
      97: iconst_0
      98: istore        6
     100: iload         6
     102: aload         4
     104: arraylength
     105: if_icmpge     135
     108: aload         5
     110: new           #61                 // class org/rocksdb/ColumnFamilyHandle
     113: dup
     114: aload_0
     115: aload         4
     117: iload         6
     119: laload
     120: invokespecial #62                 // Method org/rocksdb/ColumnFamilyHandle."<init>":(Lorg/rocksdb/RocksDB;J)V
     123: invokeinterface #63,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     128: pop
     129: iinc          6, 1
     132: goto          100
     135: aload         5
     137: areturn

  public void dropColumnFamily(org.rocksdb.ColumnFamilyHandle) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_1
       6: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
       9: invokespecial #84                 // Method dropColumnFamily:(JJ)V
      12: return

  public void dropColumnFamilies(java.util.List<org.rocksdb.ColumnFamilyHandle>) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_1
       1: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
       6: newarray       long
       8: astore_2
       9: iconst_0
      10: istore_3
      11: iload_3
      12: aload_1
      13: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      18: if_icmpge     43
      21: aload_2
      22: iload_3
      23: aload_1
      24: iload_3
      25: invokeinterface #54,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      30: checkcast     #61                 // class org/rocksdb/ColumnFamilyHandle
      33: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      36: lastore
      37: iinc          3, 1
      40: goto          11
      43: aload_0
      44: aload_0
      45: getfield      #70                 // Field nativeHandle_:J
      48: aload_2
      49: invokespecial #85                 // Method dropColumnFamilies:(J[J)V
      52: return

  public void put(byte[], byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_1
       6: iconst_0
       7: aload_1
       8: arraylength
       9: aload_2
      10: iconst_0
      11: aload_2
      12: arraylength
      13: invokespecial #86                 // Method put:(J[BII[BII)V
      16: return

  public void put(byte[], int, int, byte[], int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: iload_2
       1: iload_3
       2: aload_1
       3: arraylength
       4: invokestatic  #87                 // Method checkBounds:(III)V
       7: iload         5
       9: iload         6
      11: aload         4
      13: arraylength
      14: invokestatic  #87                 // Method checkBounds:(III)V
      17: aload_0
      18: aload_0
      19: getfield      #70                 // Field nativeHandle_:J
      22: aload_1
      23: iload_2
      24: iload_3
      25: aload         4
      27: iload         5
      29: iload         6
      31: invokespecial #86                 // Method put:(J[BII[BII)V
      34: return

  public void put(org.rocksdb.ColumnFamilyHandle, byte[], byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_2
       6: iconst_0
       7: aload_2
       8: arraylength
       9: aload_3
      10: iconst_0
      11: aload_3
      12: arraylength
      13: aload_1
      14: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      17: invokespecial #88                 // Method put:(J[BII[BIIJ)V
      20: return

  public void put(org.rocksdb.ColumnFamilyHandle, byte[], int, int, byte[], int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: iload_3
       1: iload         4
       3: aload_2
       4: arraylength
       5: invokestatic  #87                 // Method checkBounds:(III)V
       8: iload         6
      10: iload         7
      12: aload         5
      14: arraylength
      15: invokestatic  #87                 // Method checkBounds:(III)V
      18: aload_0
      19: aload_0
      20: getfield      #70                 // Field nativeHandle_:J
      23: aload_2
      24: iload_3
      25: iload         4
      27: aload         5
      29: iload         6
      31: iload         7
      33: aload_1
      34: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      37: invokespecial #88                 // Method put:(J[BII[BIIJ)V
      40: return

  public void put(org.rocksdb.WriteOptions, byte[], byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_1
       6: getfield      #89                 // Field org/rocksdb/WriteOptions.nativeHandle_:J
       9: aload_2
      10: iconst_0
      11: aload_2
      12: arraylength
      13: aload_3
      14: iconst_0
      15: aload_3
      16: arraylength
      17: invokespecial #90                 // Method put:(JJ[BII[BII)V
      20: return

  public void put(org.rocksdb.WriteOptions, byte[], int, int, byte[], int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: iload_3
       1: iload         4
       3: aload_2
       4: arraylength
       5: invokestatic  #87                 // Method checkBounds:(III)V
       8: iload         6
      10: iload         7
      12: aload         5
      14: arraylength
      15: invokestatic  #87                 // Method checkBounds:(III)V
      18: aload_0
      19: aload_0
      20: getfield      #70                 // Field nativeHandle_:J
      23: aload_1
      24: getfield      #89                 // Field org/rocksdb/WriteOptions.nativeHandle_:J
      27: aload_2
      28: iload_3
      29: iload         4
      31: aload         5
      33: iload         6
      35: iload         7
      37: invokespecial #90                 // Method put:(JJ[BII[BII)V
      40: return

  public void put(org.rocksdb.ColumnFamilyHandle, org.rocksdb.WriteOptions, byte[], byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_2
       6: getfield      #89                 // Field org/rocksdb/WriteOptions.nativeHandle_:J
       9: aload_3
      10: iconst_0
      11: aload_3
      12: arraylength
      13: aload         4
      15: iconst_0
      16: aload         4
      18: arraylength
      19: aload_1
      20: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      23: invokespecial #91                 // Method put:(JJ[BII[BIIJ)V
      26: return

  public void put(org.rocksdb.ColumnFamilyHandle, org.rocksdb.WriteOptions, java.nio.ByteBuffer, java.nio.ByteBuffer) throws org.rocksdb.RocksDBException;
    Code:
       0: getstatic     #92                 // Field $assertionsDisabled:Z
       3: ifne          29
       6: aload_3
       7: invokevirtual #93                 // Method java/nio/ByteBuffer.isDirect:()Z
      10: ifeq          21
      13: aload         4
      15: invokevirtual #93                 // Method java/nio/ByteBuffer.isDirect:()Z
      18: ifne          29
      21: new           #94                 // class java/lang/AssertionError
      24: dup
      25: invokespecial #95                 // Method java/lang/AssertionError."<init>":()V
      28: athrow
      29: aload_0
      30: aload_0
      31: getfield      #70                 // Field nativeHandle_:J
      34: aload_2
      35: getfield      #89                 // Field org/rocksdb/WriteOptions.nativeHandle_:J
      38: aload_3
      39: aload_3
      40: invokevirtual #96                 // Method java/nio/ByteBuffer.position:()I
      43: aload_3
      44: invokevirtual #97                 // Method java/nio/ByteBuffer.remaining:()I
      47: aload         4
      49: aload         4
      51: invokevirtual #96                 // Method java/nio/ByteBuffer.position:()I
      54: aload         4
      56: invokevirtual #97                 // Method java/nio/ByteBuffer.remaining:()I
      59: aload_1
      60: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      63: invokespecial #98                 // Method putDirect:(JJLjava/nio/ByteBuffer;IILjava/nio/ByteBuffer;IIJ)V
      66: aload_3
      67: aload_3
      68: invokevirtual #99                 // Method java/nio/ByteBuffer.limit:()I
      71: invokevirtual #100                // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      74: pop
      75: aload         4
      77: aload         4
      79: invokevirtual #99                 // Method java/nio/ByteBuffer.limit:()I
      82: invokevirtual #100                // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      85: pop
      86: return

  public void put(org.rocksdb.WriteOptions, java.nio.ByteBuffer, java.nio.ByteBuffer) throws org.rocksdb.RocksDBException;
    Code:
       0: getstatic     #92                 // Field $assertionsDisabled:Z
       3: ifne          28
       6: aload_2
       7: invokevirtual #93                 // Method java/nio/ByteBuffer.isDirect:()Z
      10: ifeq          20
      13: aload_3
      14: invokevirtual #93                 // Method java/nio/ByteBuffer.isDirect:()Z
      17: ifne          28
      20: new           #94                 // class java/lang/AssertionError
      23: dup
      24: invokespecial #95                 // Method java/lang/AssertionError."<init>":()V
      27: athrow
      28: aload_0
      29: aload_0
      30: getfield      #70                 // Field nativeHandle_:J
      33: aload_1
      34: getfield      #89                 // Field org/rocksdb/WriteOptions.nativeHandle_:J
      37: aload_2
      38: aload_2
      39: invokevirtual #96                 // Method java/nio/ByteBuffer.position:()I
      42: aload_2
      43: invokevirtual #97                 // Method java/nio/ByteBuffer.remaining:()I
      46: aload_3
      47: aload_3
      48: invokevirtual #96                 // Method java/nio/ByteBuffer.position:()I
      51: aload_3
      52: invokevirtual #97                 // Method java/nio/ByteBuffer.remaining:()I
      55: lconst_0
      56: invokespecial #98                 // Method putDirect:(JJLjava/nio/ByteBuffer;IILjava/nio/ByteBuffer;IIJ)V
      59: aload_2
      60: aload_2
      61: invokevirtual #99                 // Method java/nio/ByteBuffer.limit:()I
      64: invokevirtual #100                // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      67: pop
      68: aload_3
      69: aload_3
      70: invokevirtual #99                 // Method java/nio/ByteBuffer.limit:()I
      73: invokevirtual #100                // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      76: pop
      77: return

  public void put(org.rocksdb.ColumnFamilyHandle, org.rocksdb.WriteOptions, byte[], int, int, byte[], int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: iload         4
       2: iload         5
       4: aload_3
       5: arraylength
       6: invokestatic  #87                 // Method checkBounds:(III)V
       9: iload         7
      11: iload         8
      13: aload         6
      15: arraylength
      16: invokestatic  #87                 // Method checkBounds:(III)V
      19: aload_0
      20: aload_0
      21: getfield      #70                 // Field nativeHandle_:J
      24: aload_2
      25: getfield      #89                 // Field org/rocksdb/WriteOptions.nativeHandle_:J
      28: aload_3
      29: iload         4
      31: iload         5
      33: aload         6
      35: iload         7
      37: iload         8
      39: aload_1
      40: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      43: invokespecial #91                 // Method put:(JJ[BII[BIIJ)V
      46: return

  public void remove(byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #101                // Method delete:([B)V
       5: return

  public void delete(byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_1
       6: iconst_0
       7: aload_1
       8: arraylength
       9: invokespecial #102                // Method delete:(J[BII)V
      12: return

  public void delete(byte[], int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_1
       6: iload_2
       7: iload_3
       8: invokespecial #102                // Method delete:(J[BII)V
      11: return

  public void remove(org.rocksdb.ColumnFamilyHandle, byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #103                // Method delete:(Lorg/rocksdb/ColumnFamilyHandle;[B)V
       6: return

  public void delete(org.rocksdb.ColumnFamilyHandle, byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_2
       6: iconst_0
       7: aload_2
       8: arraylength
       9: aload_1
      10: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      13: invokespecial #104                // Method delete:(J[BIIJ)V
      16: return

  public void delete(org.rocksdb.ColumnFamilyHandle, byte[], int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_2
       6: iload_3
       7: iload         4
       9: aload_1
      10: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      13: invokespecial #104                // Method delete:(J[BIIJ)V
      16: return

  public void remove(org.rocksdb.WriteOptions, byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #105                // Method delete:(Lorg/rocksdb/WriteOptions;[B)V
       6: return

  public void delete(org.rocksdb.WriteOptions, byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_1
       6: getfield      #89                 // Field org/rocksdb/WriteOptions.nativeHandle_:J
       9: aload_2
      10: iconst_0
      11: aload_2
      12: arraylength
      13: invokespecial #106                // Method delete:(JJ[BII)V
      16: return

  public void delete(org.rocksdb.WriteOptions, byte[], int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_1
       6: getfield      #89                 // Field org/rocksdb/WriteOptions.nativeHandle_:J
       9: aload_2
      10: iload_3
      11: iload         4
      13: invokespecial #106                // Method delete:(JJ[BII)V
      16: return

  public void remove(org.rocksdb.ColumnFamilyHandle, org.rocksdb.WriteOptions, byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokevirtual #107                // Method delete:(Lorg/rocksdb/ColumnFamilyHandle;Lorg/rocksdb/WriteOptions;[B)V
       7: return

  public void delete(org.rocksdb.ColumnFamilyHandle, org.rocksdb.WriteOptions, byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_2
       6: getfield      #89                 // Field org/rocksdb/WriteOptions.nativeHandle_:J
       9: aload_3
      10: iconst_0
      11: aload_3
      12: arraylength
      13: aload_1
      14: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      17: invokespecial #108                // Method delete:(JJ[BIIJ)V
      20: return

  public void delete(org.rocksdb.ColumnFamilyHandle, org.rocksdb.WriteOptions, byte[], int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_2
       6: getfield      #89                 // Field org/rocksdb/WriteOptions.nativeHandle_:J
       9: aload_3
      10: iload         4
      12: iload         5
      14: aload_1
      15: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      18: invokespecial #108                // Method delete:(JJ[BIIJ)V
      21: return

  public int get(org.rocksdb.ReadOptions, java.nio.ByteBuffer, java.nio.ByteBuffer) throws org.rocksdb.RocksDBException;
    Code:
       0: getstatic     #92                 // Field $assertionsDisabled:Z
       3: ifne          28
       6: aload_2
       7: invokevirtual #93                 // Method java/nio/ByteBuffer.isDirect:()Z
      10: ifeq          20
      13: aload_3
      14: invokevirtual #93                 // Method java/nio/ByteBuffer.isDirect:()Z
      17: ifne          28
      20: new           #94                 // class java/lang/AssertionError
      23: dup
      24: invokespecial #95                 // Method java/lang/AssertionError."<init>":()V
      27: athrow
      28: aload_0
      29: aload_0
      30: getfield      #70                 // Field nativeHandle_:J
      33: aload_1
      34: getfield      #109                // Field org/rocksdb/ReadOptions.nativeHandle_:J
      37: aload_2
      38: aload_2
      39: invokevirtual #96                 // Method java/nio/ByteBuffer.position:()I
      42: aload_2
      43: invokevirtual #97                 // Method java/nio/ByteBuffer.remaining:()I
      46: aload_3
      47: aload_3
      48: invokevirtual #96                 // Method java/nio/ByteBuffer.position:()I
      51: aload_3
      52: invokevirtual #97                 // Method java/nio/ByteBuffer.remaining:()I
      55: lconst_0
      56: invokespecial #110                // Method getDirect:(JJLjava/nio/ByteBuffer;IILjava/nio/ByteBuffer;IIJ)I
      59: istore        4
      61: iload         4
      63: iconst_m1
      64: if_icmpeq     86
      67: aload_3
      68: aload_3
      69: invokevirtual #99                 // Method java/nio/ByteBuffer.limit:()I
      72: aload_3
      73: invokevirtual #96                 // Method java/nio/ByteBuffer.position:()I
      76: iload         4
      78: iadd
      79: invokestatic  #111                // Method java/lang/Math.min:(II)I
      82: invokevirtual #112                // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
      85: pop
      86: aload_2
      87: aload_2
      88: invokevirtual #99                 // Method java/nio/ByteBuffer.limit:()I
      91: invokevirtual #100                // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      94: pop
      95: iload         4
      97: ireturn

  public int get(org.rocksdb.ColumnFamilyHandle, org.rocksdb.ReadOptions, java.nio.ByteBuffer, java.nio.ByteBuffer) throws org.rocksdb.RocksDBException;
    Code:
       0: getstatic     #92                 // Field $assertionsDisabled:Z
       3: ifne          29
       6: aload_3
       7: invokevirtual #93                 // Method java/nio/ByteBuffer.isDirect:()Z
      10: ifeq          21
      13: aload         4
      15: invokevirtual #93                 // Method java/nio/ByteBuffer.isDirect:()Z
      18: ifne          29
      21: new           #94                 // class java/lang/AssertionError
      24: dup
      25: invokespecial #95                 // Method java/lang/AssertionError."<init>":()V
      28: athrow
      29: aload_0
      30: aload_0
      31: getfield      #70                 // Field nativeHandle_:J
      34: aload_2
      35: getfield      #109                // Field org/rocksdb/ReadOptions.nativeHandle_:J
      38: aload_3
      39: aload_3
      40: invokevirtual #96                 // Method java/nio/ByteBuffer.position:()I
      43: aload_3
      44: invokevirtual #97                 // Method java/nio/ByteBuffer.remaining:()I
      47: aload         4
      49: aload         4
      51: invokevirtual #96                 // Method java/nio/ByteBuffer.position:()I
      54: aload         4
      56: invokevirtual #97                 // Method java/nio/ByteBuffer.remaining:()I
      59: aload_1
      60: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      63: invokespecial #110                // Method getDirect:(JJLjava/nio/ByteBuffer;IILjava/nio/ByteBuffer;IIJ)I
      66: istore        5
      68: iload         5
      70: iconst_m1
      71: if_icmpeq     96
      74: aload         4
      76: aload         4
      78: invokevirtual #99                 // Method java/nio/ByteBuffer.limit:()I
      81: aload         4
      83: invokevirtual #96                 // Method java/nio/ByteBuffer.position:()I
      86: iload         5
      88: iadd
      89: invokestatic  #111                // Method java/lang/Math.min:(II)I
      92: invokevirtual #112                // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
      95: pop
      96: aload_3
      97: aload_3
      98: invokevirtual #99                 // Method java/nio/ByteBuffer.limit:()I
     101: invokevirtual #100                // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
     104: pop
     105: iload         5
     107: ireturn

  public void singleDelete(byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_1
       6: aload_1
       7: arraylength
       8: invokespecial #113                // Method singleDelete:(J[BI)V
      11: return

  public void singleDelete(org.rocksdb.ColumnFamilyHandle, byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_2
       6: aload_2
       7: arraylength
       8: aload_1
       9: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      12: invokespecial #114                // Method singleDelete:(J[BIJ)V
      15: return

  public void singleDelete(org.rocksdb.WriteOptions, byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_1
       6: getfield      #89                 // Field org/rocksdb/WriteOptions.nativeHandle_:J
       9: aload_2
      10: aload_2
      11: arraylength
      12: invokespecial #115                // Method singleDelete:(JJ[BI)V
      15: return

  public void singleDelete(org.rocksdb.ColumnFamilyHandle, org.rocksdb.WriteOptions, byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_2
       6: getfield      #89                 // Field org/rocksdb/WriteOptions.nativeHandle_:J
       9: aload_3
      10: aload_3
      11: arraylength
      12: aload_1
      13: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      16: invokespecial #116                // Method singleDelete:(JJ[BIJ)V
      19: return

  public void deleteRange(byte[], byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_1
       6: iconst_0
       7: aload_1
       8: arraylength
       9: aload_2
      10: iconst_0
      11: aload_2
      12: arraylength
      13: invokespecial #117                // Method deleteRange:(J[BII[BII)V
      16: return

  public void deleteRange(org.rocksdb.ColumnFamilyHandle, byte[], byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_2
       6: iconst_0
       7: aload_2
       8: arraylength
       9: aload_3
      10: iconst_0
      11: aload_3
      12: arraylength
      13: aload_1
      14: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      17: invokespecial #118                // Method deleteRange:(J[BII[BIIJ)V
      20: return

  public void deleteRange(org.rocksdb.WriteOptions, byte[], byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_1
       6: getfield      #89                 // Field org/rocksdb/WriteOptions.nativeHandle_:J
       9: aload_2
      10: iconst_0
      11: aload_2
      12: arraylength
      13: aload_3
      14: iconst_0
      15: aload_3
      16: arraylength
      17: invokespecial #119                // Method deleteRange:(JJ[BII[BII)V
      20: return

  public void deleteRange(org.rocksdb.ColumnFamilyHandle, org.rocksdb.WriteOptions, byte[], byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_2
       6: getfield      #89                 // Field org/rocksdb/WriteOptions.nativeHandle_:J
       9: aload_3
      10: iconst_0
      11: aload_3
      12: arraylength
      13: aload         4
      15: iconst_0
      16: aload         4
      18: arraylength
      19: aload_1
      20: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      23: invokespecial #120                // Method deleteRange:(JJ[BII[BIIJ)V
      26: return

  public void merge(byte[], byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_1
       6: iconst_0
       7: aload_1
       8: arraylength
       9: aload_2
      10: iconst_0
      11: aload_2
      12: arraylength
      13: invokespecial #121                // Method merge:(J[BII[BII)V
      16: return

  public void merge(byte[], int, int, byte[], int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: iload_2
       1: iload_3
       2: aload_1
       3: arraylength
       4: invokestatic  #87                 // Method checkBounds:(III)V
       7: iload         5
       9: iload         6
      11: aload         4
      13: arraylength
      14: invokestatic  #87                 // Method checkBounds:(III)V
      17: aload_0
      18: aload_0
      19: getfield      #70                 // Field nativeHandle_:J
      22: aload_1
      23: iload_2
      24: iload_3
      25: aload         4
      27: iload         5
      29: iload         6
      31: invokespecial #121                // Method merge:(J[BII[BII)V
      34: return

  public void merge(org.rocksdb.ColumnFamilyHandle, byte[], byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_2
       6: iconst_0
       7: aload_2
       8: arraylength
       9: aload_3
      10: iconst_0
      11: aload_3
      12: arraylength
      13: aload_1
      14: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      17: invokespecial #122                // Method merge:(J[BII[BIIJ)V
      20: return

  public void merge(org.rocksdb.ColumnFamilyHandle, byte[], int, int, byte[], int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: iload_3
       1: iload         4
       3: aload_2
       4: arraylength
       5: invokestatic  #87                 // Method checkBounds:(III)V
       8: iload         6
      10: iload         7
      12: aload         5
      14: arraylength
      15: invokestatic  #87                 // Method checkBounds:(III)V
      18: aload_0
      19: aload_0
      20: getfield      #70                 // Field nativeHandle_:J
      23: aload_2
      24: iload_3
      25: iload         4
      27: aload         5
      29: iload         6
      31: iload         7
      33: aload_1
      34: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      37: invokespecial #122                // Method merge:(J[BII[BIIJ)V
      40: return

  public void merge(org.rocksdb.WriteOptions, byte[], byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_1
       6: getfield      #89                 // Field org/rocksdb/WriteOptions.nativeHandle_:J
       9: aload_2
      10: iconst_0
      11: aload_2
      12: arraylength
      13: aload_3
      14: iconst_0
      15: aload_3
      16: arraylength
      17: invokespecial #123                // Method merge:(JJ[BII[BII)V
      20: return

  public void merge(org.rocksdb.WriteOptions, byte[], int, int, byte[], int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: iload_3
       1: iload         4
       3: aload_2
       4: arraylength
       5: invokestatic  #87                 // Method checkBounds:(III)V
       8: iload         6
      10: iload         7
      12: aload         5
      14: arraylength
      15: invokestatic  #87                 // Method checkBounds:(III)V
      18: aload_0
      19: aload_0
      20: getfield      #70                 // Field nativeHandle_:J
      23: aload_1
      24: getfield      #89                 // Field org/rocksdb/WriteOptions.nativeHandle_:J
      27: aload_2
      28: iload_3
      29: iload         4
      31: aload         5
      33: iload         6
      35: iload         7
      37: invokespecial #123                // Method merge:(JJ[BII[BII)V
      40: return

  public void delete(org.rocksdb.WriteOptions, java.nio.ByteBuffer) throws org.rocksdb.RocksDBException;
    Code:
       0: getstatic     #92                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_2
       7: invokevirtual #93                 // Method java/nio/ByteBuffer.isDirect:()Z
      10: ifne          21
      13: new           #94                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #95                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #70                 // Field nativeHandle_:J
      26: aload_1
      27: getfield      #89                 // Field org/rocksdb/WriteOptions.nativeHandle_:J
      30: aload_2
      31: aload_2
      32: invokevirtual #96                 // Method java/nio/ByteBuffer.position:()I
      35: aload_2
      36: invokevirtual #97                 // Method java/nio/ByteBuffer.remaining:()I
      39: lconst_0
      40: invokespecial #124                // Method deleteDirect:(JJLjava/nio/ByteBuffer;IIJ)V
      43: aload_2
      44: aload_2
      45: invokevirtual #99                 // Method java/nio/ByteBuffer.limit:()I
      48: invokevirtual #100                // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      51: pop
      52: return

  public void delete(org.rocksdb.ColumnFamilyHandle, org.rocksdb.WriteOptions, java.nio.ByteBuffer) throws org.rocksdb.RocksDBException;
    Code:
       0: getstatic     #92                 // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_3
       7: invokevirtual #93                 // Method java/nio/ByteBuffer.isDirect:()Z
      10: ifne          21
      13: new           #94                 // class java/lang/AssertionError
      16: dup
      17: invokespecial #95                 // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #70                 // Field nativeHandle_:J
      26: aload_2
      27: getfield      #89                 // Field org/rocksdb/WriteOptions.nativeHandle_:J
      30: aload_3
      31: aload_3
      32: invokevirtual #96                 // Method java/nio/ByteBuffer.position:()I
      35: aload_3
      36: invokevirtual #97                 // Method java/nio/ByteBuffer.remaining:()I
      39: aload_1
      40: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      43: invokespecial #124                // Method deleteDirect:(JJLjava/nio/ByteBuffer;IIJ)V
      46: aload_3
      47: aload_3
      48: invokevirtual #99                 // Method java/nio/ByteBuffer.limit:()I
      51: invokevirtual #100                // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      54: pop
      55: return

  public void merge(org.rocksdb.ColumnFamilyHandle, org.rocksdb.WriteOptions, byte[], byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_2
       6: getfield      #89                 // Field org/rocksdb/WriteOptions.nativeHandle_:J
       9: aload_3
      10: iconst_0
      11: aload_3
      12: arraylength
      13: aload         4
      15: iconst_0
      16: aload         4
      18: arraylength
      19: aload_1
      20: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      23: invokespecial #125                // Method merge:(JJ[BII[BIIJ)V
      26: return

  public void merge(org.rocksdb.ColumnFamilyHandle, org.rocksdb.WriteOptions, byte[], int, int, byte[], int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: iload         4
       2: iload         5
       4: aload_3
       5: arraylength
       6: invokestatic  #87                 // Method checkBounds:(III)V
       9: iload         7
      11: iload         8
      13: aload         6
      15: arraylength
      16: invokestatic  #87                 // Method checkBounds:(III)V
      19: aload_0
      20: aload_0
      21: getfield      #70                 // Field nativeHandle_:J
      24: aload_2
      25: getfield      #89                 // Field org/rocksdb/WriteOptions.nativeHandle_:J
      28: aload_3
      29: iload         4
      31: iload         5
      33: aload         6
      35: iload         7
      37: iload         8
      39: aload_1
      40: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      43: invokespecial #125                // Method merge:(JJ[BII[BIIJ)V
      46: return

  public void write(org.rocksdb.WriteOptions, org.rocksdb.WriteBatch) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_1
       6: getfield      #89                 // Field org/rocksdb/WriteOptions.nativeHandle_:J
       9: aload_2
      10: getfield      #126                // Field org/rocksdb/WriteBatch.nativeHandle_:J
      13: invokespecial #127                // Method write0:(JJJ)V
      16: return

  public void write(org.rocksdb.WriteOptions, org.rocksdb.WriteBatchWithIndex) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_1
       6: getfield      #89                 // Field org/rocksdb/WriteOptions.nativeHandle_:J
       9: aload_2
      10: getfield      #128                // Field org/rocksdb/WriteBatchWithIndex.nativeHandle_:J
      13: invokespecial #129                // Method write1:(JJJ)V
      16: return

  public int get(byte[], byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_1
       6: iconst_0
       7: aload_1
       8: arraylength
       9: aload_2
      10: iconst_0
      11: aload_2
      12: arraylength
      13: invokespecial #130                // Method get:(J[BII[BII)I
      16: ireturn

  public int get(byte[], int, int, byte[], int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: iload_2
       1: iload_3
       2: aload_1
       3: arraylength
       4: invokestatic  #87                 // Method checkBounds:(III)V
       7: iload         5
       9: iload         6
      11: aload         4
      13: arraylength
      14: invokestatic  #87                 // Method checkBounds:(III)V
      17: aload_0
      18: aload_0
      19: getfield      #70                 // Field nativeHandle_:J
      22: aload_1
      23: iload_2
      24: iload_3
      25: aload         4
      27: iload         5
      29: iload         6
      31: invokespecial #130                // Method get:(J[BII[BII)I
      34: ireturn

  public int get(org.rocksdb.ColumnFamilyHandle, byte[], byte[]) throws org.rocksdb.RocksDBException, java.lang.IllegalArgumentException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_2
       6: iconst_0
       7: aload_2
       8: arraylength
       9: aload_3
      10: iconst_0
      11: aload_3
      12: arraylength
      13: aload_1
      14: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      17: invokespecial #131                // Method get:(J[BII[BIIJ)I
      20: ireturn

  public int get(org.rocksdb.ColumnFamilyHandle, byte[], int, int, byte[], int, int) throws org.rocksdb.RocksDBException, java.lang.IllegalArgumentException;
    Code:
       0: iload_3
       1: iload         4
       3: aload_2
       4: arraylength
       5: invokestatic  #87                 // Method checkBounds:(III)V
       8: iload         6
      10: iload         7
      12: aload         5
      14: arraylength
      15: invokestatic  #87                 // Method checkBounds:(III)V
      18: aload_0
      19: aload_0
      20: getfield      #70                 // Field nativeHandle_:J
      23: aload_2
      24: iload_3
      25: iload         4
      27: aload         5
      29: iload         6
      31: iload         7
      33: aload_1
      34: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      37: invokespecial #131                // Method get:(J[BII[BIIJ)I
      40: ireturn

  public int get(org.rocksdb.ReadOptions, byte[], byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_1
       6: getfield      #109                // Field org/rocksdb/ReadOptions.nativeHandle_:J
       9: aload_2
      10: iconst_0
      11: aload_2
      12: arraylength
      13: aload_3
      14: iconst_0
      15: aload_3
      16: arraylength
      17: invokespecial #132                // Method get:(JJ[BII[BII)I
      20: ireturn

  public int get(org.rocksdb.ReadOptions, byte[], int, int, byte[], int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: iload_3
       1: iload         4
       3: aload_2
       4: arraylength
       5: invokestatic  #87                 // Method checkBounds:(III)V
       8: iload         6
      10: iload         7
      12: aload         5
      14: arraylength
      15: invokestatic  #87                 // Method checkBounds:(III)V
      18: aload_0
      19: aload_0
      20: getfield      #70                 // Field nativeHandle_:J
      23: aload_1
      24: getfield      #109                // Field org/rocksdb/ReadOptions.nativeHandle_:J
      27: aload_2
      28: iload_3
      29: iload         4
      31: aload         5
      33: iload         6
      35: iload         7
      37: invokespecial #132                // Method get:(JJ[BII[BII)I
      40: ireturn

  public int get(org.rocksdb.ColumnFamilyHandle, org.rocksdb.ReadOptions, byte[], byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_2
       6: getfield      #109                // Field org/rocksdb/ReadOptions.nativeHandle_:J
       9: aload_3
      10: iconst_0
      11: aload_3
      12: arraylength
      13: aload         4
      15: iconst_0
      16: aload         4
      18: arraylength
      19: aload_1
      20: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      23: invokespecial #133                // Method get:(JJ[BII[BIIJ)I
      26: ireturn

  public int get(org.rocksdb.ColumnFamilyHandle, org.rocksdb.ReadOptions, byte[], int, int, byte[], int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: iload         4
       2: iload         5
       4: aload_3
       5: arraylength
       6: invokestatic  #87                 // Method checkBounds:(III)V
       9: iload         7
      11: iload         8
      13: aload         6
      15: arraylength
      16: invokestatic  #87                 // Method checkBounds:(III)V
      19: aload_0
      20: aload_0
      21: getfield      #70                 // Field nativeHandle_:J
      24: aload_2
      25: getfield      #109                // Field org/rocksdb/ReadOptions.nativeHandle_:J
      28: aload_3
      29: iload         4
      31: iload         5
      33: aload         6
      35: iload         7
      37: iload         8
      39: aload_1
      40: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      43: invokespecial #133                // Method get:(JJ[BII[BIIJ)I
      46: ireturn

  public byte[] get(byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_1
       6: iconst_0
       7: aload_1
       8: arraylength
       9: invokespecial #134                // Method get:(J[BII)[B
      12: areturn

  public byte[] get(byte[], int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: iload_2
       1: iload_3
       2: aload_1
       3: arraylength
       4: invokestatic  #87                 // Method checkBounds:(III)V
       7: aload_0
       8: aload_0
       9: getfield      #70                 // Field nativeHandle_:J
      12: aload_1
      13: iload_2
      14: iload_3
      15: invokespecial #134                // Method get:(J[BII)[B
      18: areturn

  public byte[] get(org.rocksdb.ColumnFamilyHandle, byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_2
       6: iconst_0
       7: aload_2
       8: arraylength
       9: aload_1
      10: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      13: invokespecial #135                // Method get:(J[BIIJ)[B
      16: areturn

  public byte[] get(org.rocksdb.ColumnFamilyHandle, byte[], int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: iload_3
       1: iload         4
       3: aload_2
       4: arraylength
       5: invokestatic  #87                 // Method checkBounds:(III)V
       8: aload_0
       9: aload_0
      10: getfield      #70                 // Field nativeHandle_:J
      13: aload_2
      14: iload_3
      15: iload         4
      17: aload_1
      18: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      21: invokespecial #135                // Method get:(J[BIIJ)[B
      24: areturn

  public byte[] get(org.rocksdb.ReadOptions, byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_1
       6: getfield      #109                // Field org/rocksdb/ReadOptions.nativeHandle_:J
       9: aload_2
      10: iconst_0
      11: aload_2
      12: arraylength
      13: invokespecial #136                // Method get:(JJ[BII)[B
      16: areturn

  public byte[] get(org.rocksdb.ReadOptions, byte[], int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: iload_3
       1: iload         4
       3: aload_2
       4: arraylength
       5: invokestatic  #87                 // Method checkBounds:(III)V
       8: aload_0
       9: aload_0
      10: getfield      #70                 // Field nativeHandle_:J
      13: aload_1
      14: getfield      #109                // Field org/rocksdb/ReadOptions.nativeHandle_:J
      17: aload_2
      18: iload_3
      19: iload         4
      21: invokespecial #136                // Method get:(JJ[BII)[B
      24: areturn

  public byte[] get(org.rocksdb.ColumnFamilyHandle, org.rocksdb.ReadOptions, byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_2
       6: getfield      #109                // Field org/rocksdb/ReadOptions.nativeHandle_:J
       9: aload_3
      10: iconst_0
      11: aload_3
      12: arraylength
      13: aload_1
      14: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      17: invokespecial #137                // Method get:(JJ[BIIJ)[B
      20: areturn

  public byte[] get(org.rocksdb.ColumnFamilyHandle, org.rocksdb.ReadOptions, byte[], int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: iload         4
       2: iload         5
       4: aload_3
       5: arraylength
       6: invokestatic  #87                 // Method checkBounds:(III)V
       9: aload_0
      10: aload_0
      11: getfield      #70                 // Field nativeHandle_:J
      14: aload_2
      15: getfield      #109                // Field org/rocksdb/ReadOptions.nativeHandle_:J
      18: aload_3
      19: iload         4
      21: iload         5
      23: aload_1
      24: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      27: invokespecial #137                // Method get:(JJ[BIIJ)[B
      30: areturn

  public java.util.Map<byte[], byte[]> multiGet(java.util.List<byte[]>) throws org.rocksdb.RocksDBException;
    Code:
       0: getstatic     #92                 // Field $assertionsDisabled:Z
       3: ifne          23
       6: aload_1
       7: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      12: ifne          23
      15: new           #94                 // class java/lang/AssertionError
      18: dup
      19: invokespecial #95                 // Method java/lang/AssertionError."<init>":()V
      22: athrow
      23: aload_1
      24: iconst_0
      25: anewarray     #53                 // class "[B"
      28: invokeinterface #77,  2           // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      33: checkcast     #78                 // class "[[B"
      36: astore_2
      37: aload_2
      38: arraylength
      39: newarray       int
      41: astore_3
      42: aload_2
      43: arraylength
      44: newarray       int
      46: astore        4
      48: iconst_0
      49: istore        5
      51: iload         5
      53: aload         4
      55: arraylength
      56: if_icmpge     75
      59: aload         4
      61: iload         5
      63: aload_2
      64: iload         5
      66: aaload
      67: arraylength
      68: iastore
      69: iinc          5, 1
      72: goto          51
      75: aload_0
      76: aload_0
      77: getfield      #70                 // Field nativeHandle_:J
      80: aload_2
      81: aload_3
      82: aload         4
      84: invokespecial #138                // Method multiGet:(J[[B[I[I)[[B
      87: astore        5
      89: new           #139                // class java/util/HashMap
      92: dup
      93: aload         5
      95: arraylength
      96: invokestatic  #140                // Method computeCapacityHint:(I)I
      99: invokespecial #141                // Method java/util/HashMap."<init>":(I)V
     102: astore        6
     104: iconst_0
     105: istore        7
     107: iload         7
     109: aload         5
     111: arraylength
     112: if_icmpge     153
     115: aload         5
     117: iload         7
     119: aaload
     120: ifnonnull     126
     123: goto          147
     126: aload         6
     128: aload_1
     129: iload         7
     131: invokeinterface #54,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
     136: aload         5
     138: iload         7
     140: aaload
     141: invokeinterface #142,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     146: pop
     147: iinc          7, 1
     150: goto          107
     153: aload         6
     155: areturn

  public java.util.Map<byte[], byte[]> multiGet(java.util.List<org.rocksdb.ColumnFamilyHandle>, java.util.List<byte[]>) throws org.rocksdb.RocksDBException, java.lang.IllegalArgumentException;
    Code:
       0: getstatic     #92                 // Field $assertionsDisabled:Z
       3: ifne          23
       6: aload_2
       7: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      12: ifne          23
      15: new           #94                 // class java/lang/AssertionError
      18: dup
      19: invokespecial #95                 // Method java/lang/AssertionError."<init>":()V
      22: athrow
      23: aload_2
      24: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      29: aload_1
      30: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      35: if_icmpeq     48
      38: new           #143                // class java/lang/IllegalArgumentException
      41: dup
      42: ldc           #144                // String For each key there must be a ColumnFamilyHandle.
      44: invokespecial #145                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      47: athrow
      48: aload_1
      49: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      54: newarray       long
      56: astore_3
      57: iconst_0
      58: istore        4
      60: iload         4
      62: aload_1
      63: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      68: if_icmpge     95
      71: aload_3
      72: iload         4
      74: aload_1
      75: iload         4
      77: invokeinterface #54,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      82: checkcast     #61                 // class org/rocksdb/ColumnFamilyHandle
      85: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      88: lastore
      89: iinc          4, 1
      92: goto          60
      95: aload_2
      96: iconst_0
      97: anewarray     #53                 // class "[B"
     100: invokeinterface #77,  2           // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
     105: checkcast     #78                 // class "[[B"
     108: astore        4
     110: aload         4
     112: arraylength
     113: newarray       int
     115: astore        5
     117: aload         4
     119: arraylength
     120: newarray       int
     122: astore        6
     124: iconst_0
     125: istore        7
     127: iload         7
     129: aload         6
     131: arraylength
     132: if_icmpge     152
     135: aload         6
     137: iload         7
     139: aload         4
     141: iload         7
     143: aaload
     144: arraylength
     145: iastore
     146: iinc          7, 1
     149: goto          127
     152: aload_0
     153: aload_0
     154: getfield      #70                 // Field nativeHandle_:J
     157: aload         4
     159: aload         5
     161: aload         6
     163: aload_3
     164: invokespecial #146                // Method multiGet:(J[[B[I[I[J)[[B
     167: astore        7
     169: new           #139                // class java/util/HashMap
     172: dup
     173: aload         7
     175: arraylength
     176: invokestatic  #140                // Method computeCapacityHint:(I)I
     179: invokespecial #141                // Method java/util/HashMap."<init>":(I)V
     182: astore        8
     184: iconst_0
     185: istore        9
     187: iload         9
     189: aload         7
     191: arraylength
     192: if_icmpge     233
     195: aload         7
     197: iload         9
     199: aaload
     200: ifnonnull     206
     203: goto          227
     206: aload         8
     208: aload_2
     209: iload         9
     211: invokeinterface #54,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
     216: aload         7
     218: iload         9
     220: aaload
     221: invokeinterface #142,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     226: pop
     227: iinc          9, 1
     230: goto          187
     233: aload         8
     235: areturn

  public java.util.Map<byte[], byte[]> multiGet(org.rocksdb.ReadOptions, java.util.List<byte[]>) throws org.rocksdb.RocksDBException;
    Code:
       0: getstatic     #92                 // Field $assertionsDisabled:Z
       3: ifne          23
       6: aload_2
       7: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      12: ifne          23
      15: new           #94                 // class java/lang/AssertionError
      18: dup
      19: invokespecial #95                 // Method java/lang/AssertionError."<init>":()V
      22: athrow
      23: aload_2
      24: iconst_0
      25: anewarray     #53                 // class "[B"
      28: invokeinterface #77,  2           // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      33: checkcast     #78                 // class "[[B"
      36: astore_3
      37: aload_3
      38: arraylength
      39: newarray       int
      41: astore        4
      43: aload_3
      44: arraylength
      45: newarray       int
      47: astore        5
      49: iconst_0
      50: istore        6
      52: iload         6
      54: aload         5
      56: arraylength
      57: if_icmpge     76
      60: aload         5
      62: iload         6
      64: aload_3
      65: iload         6
      67: aaload
      68: arraylength
      69: iastore
      70: iinc          6, 1
      73: goto          52
      76: aload_0
      77: aload_0
      78: getfield      #70                 // Field nativeHandle_:J
      81: aload_1
      82: getfield      #109                // Field org/rocksdb/ReadOptions.nativeHandle_:J
      85: aload_3
      86: aload         4
      88: aload         5
      90: invokespecial #147                // Method multiGet:(JJ[[B[I[I)[[B
      93: astore        6
      95: new           #139                // class java/util/HashMap
      98: dup
      99: aload         6
     101: arraylength
     102: invokestatic  #140                // Method computeCapacityHint:(I)I
     105: invokespecial #141                // Method java/util/HashMap."<init>":(I)V
     108: astore        7
     110: iconst_0
     111: istore        8
     113: iload         8
     115: aload         6
     117: arraylength
     118: if_icmpge     159
     121: aload         6
     123: iload         8
     125: aaload
     126: ifnonnull     132
     129: goto          153
     132: aload         7
     134: aload_2
     135: iload         8
     137: invokeinterface #54,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
     142: aload         6
     144: iload         8
     146: aaload
     147: invokeinterface #142,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     152: pop
     153: iinc          8, 1
     156: goto          113
     159: aload         7
     161: areturn

  public java.util.Map<byte[], byte[]> multiGet(org.rocksdb.ReadOptions, java.util.List<org.rocksdb.ColumnFamilyHandle>, java.util.List<byte[]>) throws org.rocksdb.RocksDBException;
    Code:
       0: getstatic     #92                 // Field $assertionsDisabled:Z
       3: ifne          23
       6: aload_3
       7: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      12: ifne          23
      15: new           #94                 // class java/lang/AssertionError
      18: dup
      19: invokespecial #95                 // Method java/lang/AssertionError."<init>":()V
      22: athrow
      23: aload_3
      24: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      29: aload_2
      30: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      35: if_icmpeq     48
      38: new           #143                // class java/lang/IllegalArgumentException
      41: dup
      42: ldc           #144                // String For each key there must be a ColumnFamilyHandle.
      44: invokespecial #145                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      47: athrow
      48: aload_2
      49: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      54: newarray       long
      56: astore        4
      58: iconst_0
      59: istore        5
      61: iload         5
      63: aload_2
      64: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      69: if_icmpge     97
      72: aload         4
      74: iload         5
      76: aload_2
      77: iload         5
      79: invokeinterface #54,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      84: checkcast     #61                 // class org/rocksdb/ColumnFamilyHandle
      87: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      90: lastore
      91: iinc          5, 1
      94: goto          61
      97: aload_3
      98: iconst_0
      99: anewarray     #53                 // class "[B"
     102: invokeinterface #77,  2           // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
     107: checkcast     #78                 // class "[[B"
     110: astore        5
     112: aload         5
     114: arraylength
     115: newarray       int
     117: astore        6
     119: aload         5
     121: arraylength
     122: newarray       int
     124: astore        7
     126: iconst_0
     127: istore        8
     129: iload         8
     131: aload         7
     133: arraylength
     134: if_icmpge     154
     137: aload         7
     139: iload         8
     141: aload         5
     143: iload         8
     145: aaload
     146: arraylength
     147: iastore
     148: iinc          8, 1
     151: goto          129
     154: aload_0
     155: aload_0
     156: getfield      #70                 // Field nativeHandle_:J
     159: aload_1
     160: getfield      #109                // Field org/rocksdb/ReadOptions.nativeHandle_:J
     163: aload         5
     165: aload         6
     167: aload         7
     169: aload         4
     171: invokespecial #148                // Method multiGet:(JJ[[B[I[I[J)[[B
     174: astore        8
     176: new           #139                // class java/util/HashMap
     179: dup
     180: aload         8
     182: arraylength
     183: invokestatic  #140                // Method computeCapacityHint:(I)I
     186: invokespecial #141                // Method java/util/HashMap."<init>":(I)V
     189: astore        9
     191: iconst_0
     192: istore        10
     194: iload         10
     196: aload         8
     198: arraylength
     199: if_icmpge     240
     202: aload         8
     204: iload         10
     206: aaload
     207: ifnonnull     213
     210: goto          234
     213: aload         9
     215: aload_3
     216: iload         10
     218: invokeinterface #54,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
     223: aload         8
     225: iload         10
     227: aaload
     228: invokeinterface #142,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     233: pop
     234: iinc          10, 1
     237: goto          194
     240: aload         9
     242: areturn

  public java.util.List<byte[]> multiGetAsList(java.util.List<byte[]>) throws org.rocksdb.RocksDBException;
    Code:
       0: getstatic     #92                 // Field $assertionsDisabled:Z
       3: ifne          23
       6: aload_1
       7: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      12: ifne          23
      15: new           #94                 // class java/lang/AssertionError
      18: dup
      19: invokespecial #95                 // Method java/lang/AssertionError."<init>":()V
      22: athrow
      23: aload_1
      24: aload_1
      25: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      30: anewarray     #53                 // class "[B"
      33: invokeinterface #77,  2           // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      38: checkcast     #78                 // class "[[B"
      41: astore_2
      42: aload_2
      43: arraylength
      44: newarray       int
      46: astore_3
      47: aload_2
      48: arraylength
      49: newarray       int
      51: astore        4
      53: iconst_0
      54: istore        5
      56: iload         5
      58: aload         4
      60: arraylength
      61: if_icmpge     80
      64: aload         4
      66: iload         5
      68: aload_2
      69: iload         5
      71: aaload
      72: arraylength
      73: iastore
      74: iinc          5, 1
      77: goto          56
      80: aload_0
      81: aload_0
      82: getfield      #70                 // Field nativeHandle_:J
      85: aload_2
      86: aload_3
      87: aload         4
      89: invokespecial #138                // Method multiGet:(J[[B[I[I)[[B
      92: invokestatic  #75                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      95: areturn

  public java.util.List<byte[]> multiGetAsList(java.util.List<org.rocksdb.ColumnFamilyHandle>, java.util.List<byte[]>) throws org.rocksdb.RocksDBException, java.lang.IllegalArgumentException;
    Code:
       0: getstatic     #92                 // Field $assertionsDisabled:Z
       3: ifne          23
       6: aload_2
       7: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      12: ifne          23
      15: new           #94                 // class java/lang/AssertionError
      18: dup
      19: invokespecial #95                 // Method java/lang/AssertionError."<init>":()V
      22: athrow
      23: aload_2
      24: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      29: aload_1
      30: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      35: if_icmpeq     48
      38: new           #143                // class java/lang/IllegalArgumentException
      41: dup
      42: ldc           #144                // String For each key there must be a ColumnFamilyHandle.
      44: invokespecial #145                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      47: athrow
      48: aload_1
      49: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      54: newarray       long
      56: astore_3
      57: iconst_0
      58: istore        4
      60: iload         4
      62: aload_1
      63: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      68: if_icmpge     95
      71: aload_3
      72: iload         4
      74: aload_1
      75: iload         4
      77: invokeinterface #54,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      82: checkcast     #61                 // class org/rocksdb/ColumnFamilyHandle
      85: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      88: lastore
      89: iinc          4, 1
      92: goto          60
      95: aload_2
      96: aload_2
      97: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
     102: anewarray     #53                 // class "[B"
     105: invokeinterface #77,  2           // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
     110: checkcast     #78                 // class "[[B"
     113: astore        4
     115: aload         4
     117: arraylength
     118: newarray       int
     120: astore        5
     122: aload         4
     124: arraylength
     125: newarray       int
     127: astore        6
     129: iconst_0
     130: istore        7
     132: iload         7
     134: aload         6
     136: arraylength
     137: if_icmpge     157
     140: aload         6
     142: iload         7
     144: aload         4
     146: iload         7
     148: aaload
     149: arraylength
     150: iastore
     151: iinc          7, 1
     154: goto          132
     157: aload_0
     158: aload_0
     159: getfield      #70                 // Field nativeHandle_:J
     162: aload         4
     164: aload         5
     166: aload         6
     168: aload_3
     169: invokespecial #146                // Method multiGet:(J[[B[I[I[J)[[B
     172: invokestatic  #75                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
     175: areturn

  public java.util.List<byte[]> multiGetAsList(org.rocksdb.ReadOptions, java.util.List<byte[]>) throws org.rocksdb.RocksDBException;
    Code:
       0: getstatic     #92                 // Field $assertionsDisabled:Z
       3: ifne          23
       6: aload_2
       7: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      12: ifne          23
      15: new           #94                 // class java/lang/AssertionError
      18: dup
      19: invokespecial #95                 // Method java/lang/AssertionError."<init>":()V
      22: athrow
      23: aload_2
      24: aload_2
      25: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      30: anewarray     #53                 // class "[B"
      33: invokeinterface #77,  2           // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      38: checkcast     #78                 // class "[[B"
      41: astore_3
      42: aload_3
      43: arraylength
      44: newarray       int
      46: astore        4
      48: aload_3
      49: arraylength
      50: newarray       int
      52: astore        5
      54: iconst_0
      55: istore        6
      57: iload         6
      59: aload         5
      61: arraylength
      62: if_icmpge     81
      65: aload         5
      67: iload         6
      69: aload_3
      70: iload         6
      72: aaload
      73: arraylength
      74: iastore
      75: iinc          6, 1
      78: goto          57
      81: aload_0
      82: aload_0
      83: getfield      #70                 // Field nativeHandle_:J
      86: aload_1
      87: getfield      #109                // Field org/rocksdb/ReadOptions.nativeHandle_:J
      90: aload_3
      91: aload         4
      93: aload         5
      95: invokespecial #147                // Method multiGet:(JJ[[B[I[I)[[B
      98: invokestatic  #75                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
     101: areturn

  public java.util.List<byte[]> multiGetAsList(org.rocksdb.ReadOptions, java.util.List<org.rocksdb.ColumnFamilyHandle>, java.util.List<byte[]>) throws org.rocksdb.RocksDBException;
    Code:
       0: getstatic     #92                 // Field $assertionsDisabled:Z
       3: ifne          23
       6: aload_3
       7: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      12: ifne          23
      15: new           #94                 // class java/lang/AssertionError
      18: dup
      19: invokespecial #95                 // Method java/lang/AssertionError."<init>":()V
      22: athrow
      23: aload_3
      24: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      29: aload_2
      30: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      35: if_icmpeq     48
      38: new           #143                // class java/lang/IllegalArgumentException
      41: dup
      42: ldc           #144                // String For each key there must be a ColumnFamilyHandle.
      44: invokespecial #145                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      47: athrow
      48: aload_2
      49: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      54: newarray       long
      56: astore        4
      58: iconst_0
      59: istore        5
      61: iload         5
      63: aload_2
      64: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      69: if_icmpge     97
      72: aload         4
      74: iload         5
      76: aload_2
      77: iload         5
      79: invokeinterface #54,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      84: checkcast     #61                 // class org/rocksdb/ColumnFamilyHandle
      87: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      90: lastore
      91: iinc          5, 1
      94: goto          61
      97: aload_3
      98: aload_3
      99: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
     104: anewarray     #53                 // class "[B"
     107: invokeinterface #77,  2           // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
     112: checkcast     #78                 // class "[[B"
     115: astore        5
     117: aload         5
     119: arraylength
     120: newarray       int
     122: astore        6
     124: aload         5
     126: arraylength
     127: newarray       int
     129: astore        7
     131: iconst_0
     132: istore        8
     134: iload         8
     136: aload         7
     138: arraylength
     139: if_icmpge     159
     142: aload         7
     144: iload         8
     146: aload         5
     148: iload         8
     150: aaload
     151: arraylength
     152: iastore
     153: iinc          8, 1
     156: goto          134
     159: aload_0
     160: aload_0
     161: getfield      #70                 // Field nativeHandle_:J
     164: aload_1
     165: getfield      #109                // Field org/rocksdb/ReadOptions.nativeHandle_:J
     168: aload         5
     170: aload         6
     172: aload         7
     174: aload         4
     176: invokespecial #148                // Method multiGet:(JJ[[B[I[I[J)[[B
     179: invokestatic  #75                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
     182: areturn

  public boolean keyMayExist(byte[], org.rocksdb.Holder<byte[]>);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_1
       4: arraylength
       5: aload_2
       6: invokevirtual #149                // Method keyMayExist:([BIILorg/rocksdb/Holder;)Z
       9: ireturn

  public boolean keyMayExist(byte[], int, int, org.rocksdb.Holder<byte[]>);
    Code:
       0: aload_0
       1: aconst_null
       2: checkcast     #61                 // class org/rocksdb/ColumnFamilyHandle
       5: aload_1
       6: iload_2
       7: iload_3
       8: aload         4
      10: invokevirtual #150                // Method keyMayExist:(Lorg/rocksdb/ColumnFamilyHandle;[BIILorg/rocksdb/Holder;)Z
      13: ireturn

  public boolean keyMayExist(org.rocksdb.ColumnFamilyHandle, byte[], org.rocksdb.Holder<byte[]>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iconst_0
       4: aload_2
       5: arraylength
       6: aload_3
       7: invokevirtual #150                // Method keyMayExist:(Lorg/rocksdb/ColumnFamilyHandle;[BIILorg/rocksdb/Holder;)Z
      10: ireturn

  public boolean keyMayExist(org.rocksdb.ColumnFamilyHandle, byte[], int, int, org.rocksdb.Holder<byte[]>);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: aload_2
       4: iload_3
       5: iload         4
       7: aload         5
       9: invokevirtual #151                // Method keyMayExist:(Lorg/rocksdb/ColumnFamilyHandle;Lorg/rocksdb/ReadOptions;[BIILorg/rocksdb/Holder;)Z
      12: ireturn

  public boolean keyMayExist(org.rocksdb.ReadOptions, byte[], org.rocksdb.Holder<byte[]>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iconst_0
       4: aload_2
       5: arraylength
       6: aload_3
       7: invokevirtual #152                // Method keyMayExist:(Lorg/rocksdb/ReadOptions;[BIILorg/rocksdb/Holder;)Z
      10: ireturn

  public boolean keyMayExist(org.rocksdb.ReadOptions, byte[], int, int, org.rocksdb.Holder<byte[]>);
    Code:
       0: aload_0
       1: aconst_null
       2: aload_1
       3: aload_2
       4: iload_3
       5: iload         4
       7: aload         5
       9: invokevirtual #151                // Method keyMayExist:(Lorg/rocksdb/ColumnFamilyHandle;Lorg/rocksdb/ReadOptions;[BIILorg/rocksdb/Holder;)Z
      12: ireturn

  public boolean keyMayExist(org.rocksdb.ColumnFamilyHandle, org.rocksdb.ReadOptions, byte[], org.rocksdb.Holder<byte[]>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: iconst_0
       5: aload_3
       6: arraylength
       7: aload         4
       9: invokevirtual #151                // Method keyMayExist:(Lorg/rocksdb/ColumnFamilyHandle;Lorg/rocksdb/ReadOptions;[BIILorg/rocksdb/Holder;)Z
      12: ireturn

  public boolean keyMayExist(org.rocksdb.ColumnFamilyHandle, org.rocksdb.ReadOptions, byte[], int, int, org.rocksdb.Holder<byte[]>);
    Code:
       0: iload         4
       2: iload         5
       4: aload_3
       5: arraylength
       6: invokestatic  #87                 // Method checkBounds:(III)V
       9: aload         6
      11: ifnonnull     52
      14: aload_0
      15: aload_0
      16: getfield      #70                 // Field nativeHandle_:J
      19: aload_1
      20: ifnonnull     27
      23: lconst_0
      24: goto          31
      27: aload_1
      28: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      31: aload_2
      32: ifnonnull     39
      35: lconst_0
      36: goto          43
      39: aload_2
      40: getfield      #109                // Field org/rocksdb/ReadOptions.nativeHandle_:J
      43: aload_3
      44: iload         4
      46: iload         5
      48: invokespecial #153                // Method keyMayExist:(JJJ[BII)Z
      51: ireturn
      52: aload_0
      53: aload_0
      54: getfield      #70                 // Field nativeHandle_:J
      57: aload_1
      58: ifnonnull     65
      61: lconst_0
      62: goto          69
      65: aload_1
      66: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      69: aload_2
      70: ifnonnull     77
      73: lconst_0
      74: goto          81
      77: aload_2
      78: getfield      #109                // Field org/rocksdb/ReadOptions.nativeHandle_:J
      81: aload_3
      82: iload         4
      84: iload         5
      86: invokespecial #154                // Method keyMayExistFoundValue:(JJJ[BII)[[B
      89: astore        7
      91: aload         7
      93: iconst_0
      94: aaload
      95: iconst_0
      96: baload
      97: ifne          108
     100: aload         6
     102: aconst_null
     103: invokevirtual #155                // Method org/rocksdb/Holder.setValue:(Ljava/lang/Object;)V
     106: iconst_0
     107: ireturn
     108: aload         7
     110: iconst_0
     111: aaload
     112: iconst_0
     113: baload
     114: iconst_1
     115: if_icmpne     126
     118: aload         6
     120: aconst_null
     121: invokevirtual #155                // Method org/rocksdb/Holder.setValue:(Ljava/lang/Object;)V
     124: iconst_1
     125: ireturn
     126: aload         6
     128: aload         7
     130: iconst_1
     131: aaload
     132: invokevirtual #155                // Method org/rocksdb/Holder.setValue:(Ljava/lang/Object;)V
     135: iconst_1
     136: ireturn

  public org.rocksdb.RocksIterator newIterator();
    Code:
       0: new           #156                // class org/rocksdb/RocksIterator
       3: dup
       4: aload_0
       5: aload_0
       6: aload_0
       7: getfield      #70                 // Field nativeHandle_:J
      10: invokespecial #157                // Method iterator:(J)J
      13: invokespecial #158                // Method org/rocksdb/RocksIterator."<init>":(Lorg/rocksdb/RocksDB;J)V
      16: areturn

  public org.rocksdb.RocksIterator newIterator(org.rocksdb.ReadOptions);
    Code:
       0: new           #156                // class org/rocksdb/RocksIterator
       3: dup
       4: aload_0
       5: aload_0
       6: aload_0
       7: getfield      #70                 // Field nativeHandle_:J
      10: aload_1
      11: getfield      #109                // Field org/rocksdb/ReadOptions.nativeHandle_:J
      14: invokespecial #159                // Method iterator:(JJ)J
      17: invokespecial #158                // Method org/rocksdb/RocksIterator."<init>":(Lorg/rocksdb/RocksDB;J)V
      20: areturn

  public org.rocksdb.RocksIterator newIterator(org.rocksdb.ColumnFamilyHandle);
    Code:
       0: new           #156                // class org/rocksdb/RocksIterator
       3: dup
       4: aload_0
       5: aload_0
       6: aload_0
       7: getfield      #70                 // Field nativeHandle_:J
      10: aload_1
      11: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      14: invokespecial #160                // Method iteratorCF:(JJ)J
      17: invokespecial #158                // Method org/rocksdb/RocksIterator."<init>":(Lorg/rocksdb/RocksDB;J)V
      20: areturn

  public org.rocksdb.RocksIterator newIterator(org.rocksdb.ColumnFamilyHandle, org.rocksdb.ReadOptions);
    Code:
       0: new           #156                // class org/rocksdb/RocksIterator
       3: dup
       4: aload_0
       5: aload_0
       6: aload_0
       7: getfield      #70                 // Field nativeHandle_:J
      10: aload_1
      11: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      14: aload_2
      15: getfield      #109                // Field org/rocksdb/ReadOptions.nativeHandle_:J
      18: invokespecial #161                // Method iteratorCF:(JJJ)J
      21: invokespecial #158                // Method org/rocksdb/RocksIterator."<init>":(Lorg/rocksdb/RocksDB;J)V
      24: areturn

  public java.util.List<org.rocksdb.RocksIterator> newIterators(java.util.List<org.rocksdb.ColumnFamilyHandle>) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_1
       2: new           #162                // class org/rocksdb/ReadOptions
       5: dup
       6: invokespecial #163                // Method org/rocksdb/ReadOptions."<init>":()V
       9: invokevirtual #164                // Method newIterators:(Ljava/util/List;Lorg/rocksdb/ReadOptions;)Ljava/util/List;
      12: areturn

  public java.util.List<org.rocksdb.RocksIterator> newIterators(java.util.List<org.rocksdb.ColumnFamilyHandle>, org.rocksdb.ReadOptions) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_1
       1: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
       6: newarray       long
       8: astore_3
       9: iconst_0
      10: istore        4
      12: iload         4
      14: aload_1
      15: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      20: if_icmpge     47
      23: aload_3
      24: iload         4
      26: aload_1
      27: iload         4
      29: invokeinterface #54,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      34: checkcast     #61                 // class org/rocksdb/ColumnFamilyHandle
      37: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      40: lastore
      41: iinc          4, 1
      44: goto          12
      47: aload_0
      48: aload_0
      49: getfield      #70                 // Field nativeHandle_:J
      52: aload_3
      53: aload_2
      54: getfield      #109                // Field org/rocksdb/ReadOptions.nativeHandle_:J
      57: invokespecial #165                // Method iterators:(J[JJ)[J
      60: astore        4
      62: new           #80                 // class java/util/ArrayList
      65: dup
      66: aload_1
      67: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      72: invokespecial #81                 // Method java/util/ArrayList."<init>":(I)V
      75: astore        5
      77: iconst_0
      78: istore        6
      80: iload         6
      82: aload_1
      83: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      88: if_icmpge     118
      91: aload         5
      93: new           #156                // class org/rocksdb/RocksIterator
      96: dup
      97: aload_0
      98: aload         4
     100: iload         6
     102: laload
     103: invokespecial #158                // Method org/rocksdb/RocksIterator."<init>":(Lorg/rocksdb/RocksDB;J)V
     106: invokeinterface #63,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     111: pop
     112: iinc          6, 1
     115: goto          80
     118: aload         5
     120: areturn

  public org.rocksdb.Snapshot getSnapshot();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: invokespecial #166                // Method getSnapshot:(J)J
       8: lstore_1
       9: lload_1
      10: lconst_0
      11: lcmp
      12: ifeq          24
      15: new           #167                // class org/rocksdb/Snapshot
      18: dup
      19: lload_1
      20: invokespecial #168                // Method org/rocksdb/Snapshot."<init>":(J)V
      23: areturn
      24: aconst_null
      25: areturn

  public void releaseSnapshot(org.rocksdb.Snapshot);
    Code:
       0: aload_1
       1: ifnull        16
       4: aload_0
       5: aload_0
       6: getfield      #70                 // Field nativeHandle_:J
       9: aload_1
      10: getfield      #169                // Field org/rocksdb/Snapshot.nativeHandle_:J
      13: invokespecial #170                // Method releaseSnapshot:(JJ)V
      16: return

  public java.lang.String getProperty(org.rocksdb.ColumnFamilyHandle, java.lang.String) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_1
       6: ifnonnull     13
       9: lconst_0
      10: goto          17
      13: aload_1
      14: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      17: aload_2
      18: aload_2
      19: invokevirtual #171                // Method java/lang/String.length:()I
      22: invokespecial #172                // Method getProperty:(JJLjava/lang/String;I)Ljava/lang/String;
      25: areturn

  public java.lang.String getProperty(java.lang.String) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aconst_null
       2: aload_1
       3: invokevirtual #173                // Method getProperty:(Lorg/rocksdb/ColumnFamilyHandle;Ljava/lang/String;)Ljava/lang/String;
       6: areturn

  public java.util.Map<java.lang.String, java.lang.String> getMapProperty(java.lang.String) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aconst_null
       2: aload_1
       3: invokevirtual #174                // Method getMapProperty:(Lorg/rocksdb/ColumnFamilyHandle;Ljava/lang/String;)Ljava/util/Map;
       6: areturn

  public java.util.Map<java.lang.String, java.lang.String> getMapProperty(org.rocksdb.ColumnFamilyHandle, java.lang.String) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_1
       6: ifnonnull     13
       9: lconst_0
      10: goto          17
      13: aload_1
      14: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      17: aload_2
      18: aload_2
      19: invokevirtual #171                // Method java/lang/String.length:()I
      22: invokespecial #175                // Method getMapProperty:(JJLjava/lang/String;I)Ljava/util/Map;
      25: areturn

  public long getLongProperty(java.lang.String) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aconst_null
       2: aload_1
       3: invokevirtual #176                // Method getLongProperty:(Lorg/rocksdb/ColumnFamilyHandle;Ljava/lang/String;)J
       6: lreturn

  public long getLongProperty(org.rocksdb.ColumnFamilyHandle, java.lang.String) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_1
       6: ifnonnull     13
       9: lconst_0
      10: goto          17
      13: aload_1
      14: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      17: aload_2
      18: aload_2
      19: invokevirtual #171                // Method java/lang/String.length:()I
      22: invokespecial #177                // Method getLongProperty:(JJLjava/lang/String;I)J
      25: lreturn

  public void resetStats() throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: invokespecial #178                // Method resetStats:(J)V
       8: return

  public long getAggregatedLongProperty(java.lang.String) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_1
       6: aload_1
       7: invokevirtual #171                // Method java/lang/String.length:()I
      10: invokespecial #179                // Method getAggregatedLongProperty:(JLjava/lang/String;I)J
      13: lreturn

  public long[] getApproximateSizes(org.rocksdb.ColumnFamilyHandle, java.util.List<org.rocksdb.Range>, org.rocksdb.SizeApproximationFlag...);
    Code:
       0: iconst_0
       1: istore        4
       3: aload_3
       4: astore        5
       6: aload         5
       8: arraylength
       9: istore        6
      11: iconst_0
      12: istore        7
      14: iload         7
      16: iload         6
      18: if_icmpge     45
      21: aload         5
      23: iload         7
      25: aaload
      26: astore        8
      28: iload         4
      30: aload         8
      32: invokevirtual #180                // Method org/rocksdb/SizeApproximationFlag.getValue:()B
      35: ior
      36: i2b
      37: istore        4
      39: iinc          7, 1
      42: goto          14
      45: aload_0
      46: aload_0
      47: getfield      #70                 // Field nativeHandle_:J
      50: aload_1
      51: ifnonnull     58
      54: lconst_0
      55: goto          62
      58: aload_1
      59: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      62: aload_2
      63: invokestatic  #181                // Method toRangeSliceHandles:(Ljava/util/List;)[J
      66: iload         4
      68: invokespecial #182                // Method getApproximateSizes:(JJ[JB)[J
      71: areturn

  public long[] getApproximateSizes(java.util.List<org.rocksdb.Range>, org.rocksdb.SizeApproximationFlag...);
    Code:
       0: aload_0
       1: aconst_null
       2: aload_1
       3: aload_2
       4: invokevirtual #183                // Method getApproximateSizes:(Lorg/rocksdb/ColumnFamilyHandle;Ljava/util/List;[Lorg/rocksdb/SizeApproximationFlag;)[J
       7: areturn

  public org.rocksdb.RocksDB$CountAndSize getApproximateMemTableStats(org.rocksdb.ColumnFamilyHandle, org.rocksdb.Range);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_1
       6: ifnonnull     13
       9: lconst_0
      10: goto          17
      13: aload_1
      14: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      17: aload_2
      18: getfield      #184                // Field org/rocksdb/Range.start:Lorg/rocksdb/Slice;
      21: invokevirtual #185                // Method org/rocksdb/Slice.getNativeHandle:()J
      24: aload_2
      25: getfield      #186                // Field org/rocksdb/Range.limit:Lorg/rocksdb/Slice;
      28: invokevirtual #185                // Method org/rocksdb/Slice.getNativeHandle:()J
      31: invokespecial #187                // Method getApproximateMemTableStats:(JJJJ)[J
      34: astore_3
      35: new           #188                // class org/rocksdb/RocksDB$CountAndSize
      38: dup
      39: aload_3
      40: iconst_0
      41: laload
      42: aload_3
      43: iconst_1
      44: laload
      45: invokespecial #189                // Method org/rocksdb/RocksDB$CountAndSize."<init>":(JJ)V
      48: areturn

  public org.rocksdb.RocksDB$CountAndSize getApproximateMemTableStats(org.rocksdb.Range);
    Code:
       0: aload_0
       1: aconst_null
       2: aload_1
       3: invokevirtual #190                // Method getApproximateMemTableStats:(Lorg/rocksdb/ColumnFamilyHandle;Lorg/rocksdb/Range;)Lorg/rocksdb/RocksDB$CountAndSize;
       6: areturn

  public void compactRange() throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aconst_null
       2: invokevirtual #191                // Method compactRange:(Lorg/rocksdb/ColumnFamilyHandle;)V
       5: return

  public void compactRange(org.rocksdb.ColumnFamilyHandle) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aconst_null
       6: iconst_m1
       7: aconst_null
       8: iconst_m1
       9: lconst_0
      10: aload_1
      11: ifnonnull     18
      14: lconst_0
      15: goto          22
      18: aload_1
      19: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      22: invokespecial #192                // Method compactRange:(J[BI[BIJJ)V
      25: return

  public void compactRange(byte[], byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aconst_null
       2: aload_1
       3: aload_2
       4: invokevirtual #193                // Method compactRange:(Lorg/rocksdb/ColumnFamilyHandle;[B[B)V
       7: return

  public void compactRange(org.rocksdb.ColumnFamilyHandle, byte[], byte[]) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_2
       6: aload_2
       7: ifnonnull     14
      10: iconst_m1
      11: goto          16
      14: aload_2
      15: arraylength
      16: aload_3
      17: aload_3
      18: ifnonnull     25
      21: iconst_m1
      22: goto          27
      25: aload_3
      26: arraylength
      27: lconst_0
      28: aload_1
      29: ifnonnull     36
      32: lconst_0
      33: goto          40
      36: aload_1
      37: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      40: invokespecial #192                // Method compactRange:(J[BI[BIJJ)V
      43: return

  public void compactRange(boolean, int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aconst_null
       2: iload_1
       3: iload_2
       4: iload_3
       5: invokevirtual #194                // Method compactRange:(Lorg/rocksdb/ColumnFamilyHandle;ZII)V
       8: return

  public void compactRange(org.rocksdb.ColumnFamilyHandle, boolean, int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: new           #195                // class org/rocksdb/CompactRangeOptions
       3: dup
       4: invokespecial #196                // Method org/rocksdb/CompactRangeOptions."<init>":()V
       7: astore        5
       9: aload         5
      11: iload_2
      12: invokevirtual #197                // Method org/rocksdb/CompactRangeOptions.setChangeLevel:(Z)Lorg/rocksdb/CompactRangeOptions;
      15: pop
      16: aload         5
      18: iload_3
      19: invokevirtual #198                // Method org/rocksdb/CompactRangeOptions.setTargetLevel:(I)Lorg/rocksdb/CompactRangeOptions;
      22: pop
      23: aload         5
      25: iload         4
      27: invokevirtual #199                // Method org/rocksdb/CompactRangeOptions.setTargetPathId:(I)Lorg/rocksdb/CompactRangeOptions;
      30: pop
      31: aload_0
      32: aload_0
      33: getfield      #70                 // Field nativeHandle_:J
      36: aconst_null
      37: iconst_m1
      38: aconst_null
      39: iconst_m1
      40: aload         5
      42: getfield      #200                // Field org/rocksdb/CompactRangeOptions.nativeHandle_:J
      45: aload_1
      46: ifnonnull     53
      49: lconst_0
      50: goto          57
      53: aload_1
      54: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      57: invokespecial #192                // Method compactRange:(J[BI[BIJJ)V
      60: return

  public void compactRange(byte[], byte[], boolean, int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aconst_null
       2: aload_1
       3: aload_2
       4: iload_3
       5: iload         4
       7: iload         5
       9: invokevirtual #201                // Method compactRange:(Lorg/rocksdb/ColumnFamilyHandle;[B[BZII)V
      12: return

  public void compactRange(org.rocksdb.ColumnFamilyHandle, byte[], byte[], boolean, int, int) throws org.rocksdb.RocksDBException;
    Code:
       0: new           #195                // class org/rocksdb/CompactRangeOptions
       3: dup
       4: invokespecial #196                // Method org/rocksdb/CompactRangeOptions."<init>":()V
       7: astore        7
       9: aload         7
      11: iload         4
      13: invokevirtual #197                // Method org/rocksdb/CompactRangeOptions.setChangeLevel:(Z)Lorg/rocksdb/CompactRangeOptions;
      16: pop
      17: aload         7
      19: iload         5
      21: invokevirtual #198                // Method org/rocksdb/CompactRangeOptions.setTargetLevel:(I)Lorg/rocksdb/CompactRangeOptions;
      24: pop
      25: aload         7
      27: iload         6
      29: invokevirtual #199                // Method org/rocksdb/CompactRangeOptions.setTargetPathId:(I)Lorg/rocksdb/CompactRangeOptions;
      32: pop
      33: aload_0
      34: aload_0
      35: getfield      #70                 // Field nativeHandle_:J
      38: aload_2
      39: aload_2
      40: ifnonnull     47
      43: iconst_m1
      44: goto          49
      47: aload_2
      48: arraylength
      49: aload_3
      50: aload_3
      51: ifnonnull     58
      54: iconst_m1
      55: goto          60
      58: aload_3
      59: arraylength
      60: aload         7
      62: getfield      #200                // Field org/rocksdb/CompactRangeOptions.nativeHandle_:J
      65: aload_1
      66: ifnonnull     73
      69: lconst_0
      70: goto          77
      73: aload_1
      74: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      77: invokespecial #192                // Method compactRange:(J[BI[BIJJ)V
      80: return

  public void compactRange(org.rocksdb.ColumnFamilyHandle, byte[], byte[], org.rocksdb.CompactRangeOptions) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_2
       6: aload_2
       7: ifnonnull     14
      10: iconst_m1
      11: goto          16
      14: aload_2
      15: arraylength
      16: aload_3
      17: aload_3
      18: ifnonnull     25
      21: iconst_m1
      22: goto          27
      25: aload_3
      26: arraylength
      27: aload         4
      29: getfield      #200                // Field org/rocksdb/CompactRangeOptions.nativeHandle_:J
      32: aload_1
      33: ifnonnull     40
      36: lconst_0
      37: goto          44
      40: aload_1
      41: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      44: invokespecial #192                // Method compactRange:(J[BI[BIJJ)V
      47: return

  public void setOptions(org.rocksdb.ColumnFamilyHandle, org.rocksdb.MutableColumnFamilyOptions) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_1
       6: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
       9: aload_2
      10: invokevirtual #202                // Method org/rocksdb/MutableColumnFamilyOptions.getKeys:()[Ljava/lang/String;
      13: aload_2
      14: invokevirtual #203                // Method org/rocksdb/MutableColumnFamilyOptions.getValues:()[Ljava/lang/String;
      17: invokespecial #204                // Method setOptions:(JJ[Ljava/lang/String;[Ljava/lang/String;)V
      20: return

  public void setOptions(org.rocksdb.MutableColumnFamilyOptions) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aconst_null
       2: aload_1
       3: invokevirtual #205                // Method setOptions:(Lorg/rocksdb/ColumnFamilyHandle;Lorg/rocksdb/MutableColumnFamilyOptions;)V
       6: return

  public void setDBOptions(org.rocksdb.MutableDBOptions) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_1
       6: invokevirtual #206                // Method org/rocksdb/MutableDBOptions.getKeys:()[Ljava/lang/String;
       9: aload_1
      10: invokevirtual #207                // Method org/rocksdb/MutableDBOptions.getValues:()[Ljava/lang/String;
      13: invokespecial #208                // Method setDBOptions:(J[Ljava/lang/String;[Ljava/lang/String;)V
      16: return

  public java.util.List<java.lang.String> compactFiles(org.rocksdb.CompactionOptions, java.util.List<java.lang.String>, int, int, org.rocksdb.CompactionJobInfo) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: aload_2
       4: iload_3
       5: iload         4
       7: aload         5
       9: invokevirtual #209                // Method compactFiles:(Lorg/rocksdb/CompactionOptions;Lorg/rocksdb/ColumnFamilyHandle;Ljava/util/List;IILorg/rocksdb/CompactionJobInfo;)Ljava/util/List;
      12: areturn

  public java.util.List<java.lang.String> compactFiles(org.rocksdb.CompactionOptions, org.rocksdb.ColumnFamilyHandle, java.util.List<java.lang.String>, int, int, org.rocksdb.CompactionJobInfo) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_1
       6: getfield      #210                // Field org/rocksdb/CompactionOptions.nativeHandle_:J
       9: aload_2
      10: ifnonnull     17
      13: lconst_0
      14: goto          21
      17: aload_2
      18: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      21: aload_3
      22: iconst_0
      23: anewarray     #29                 // class java/lang/String
      26: invokeinterface #77,  2           // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      31: checkcast     #211                // class "[Ljava/lang/String;"
      34: iload         4
      36: iload         5
      38: aload         6
      40: ifnonnull     47
      43: lconst_0
      44: goto          52
      47: aload         6
      49: getfield      #212                // Field org/rocksdb/CompactionJobInfo.nativeHandle_:J
      52: invokespecial #213                // Method compactFiles:(JJJ[Ljava/lang/String;IIJ)[Ljava/lang/String;
      55: invokestatic  #75                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      58: areturn

  public void cancelAllBackgroundWork(boolean);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #214                // Method cancelAllBackgroundWork:(JZ)V
       9: return

  public void pauseBackgroundWork() throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: invokespecial #215                // Method pauseBackgroundWork:(J)V
       8: return

  public void continueBackgroundWork() throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: invokespecial #216                // Method continueBackgroundWork:(J)V
       8: return

  public void enableAutoCompaction(java.util.List<org.rocksdb.ColumnFamilyHandle>) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_0
       6: aload_1
       7: invokespecial #217                // Method toNativeHandleList:(Ljava/util/List;)[J
      10: invokespecial #218                // Method enableAutoCompaction:(J[J)V
      13: return

  public int numberLevels();
    Code:
       0: aload_0
       1: aconst_null
       2: invokevirtual #219                // Method numberLevels:(Lorg/rocksdb/ColumnFamilyHandle;)I
       5: ireturn

  public int numberLevels(org.rocksdb.ColumnFamilyHandle);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_1
       6: ifnonnull     13
       9: lconst_0
      10: goto          17
      13: aload_1
      14: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      17: invokespecial #220                // Method numberLevels:(JJ)I
      20: ireturn

  public int maxMemCompactionLevel();
    Code:
       0: aload_0
       1: aconst_null
       2: invokevirtual #221                // Method maxMemCompactionLevel:(Lorg/rocksdb/ColumnFamilyHandle;)I
       5: ireturn

  public int maxMemCompactionLevel(org.rocksdb.ColumnFamilyHandle);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_1
       6: ifnonnull     13
       9: lconst_0
      10: goto          17
      13: aload_1
      14: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      17: invokespecial #222                // Method maxMemCompactionLevel:(JJ)I
      20: ireturn

  public int level0StopWriteTrigger();
    Code:
       0: aload_0
       1: aconst_null
       2: invokevirtual #223                // Method level0StopWriteTrigger:(Lorg/rocksdb/ColumnFamilyHandle;)I
       5: ireturn

  public int level0StopWriteTrigger(org.rocksdb.ColumnFamilyHandle);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_1
       6: ifnonnull     13
       9: lconst_0
      10: goto          17
      13: aload_1
      14: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      17: invokespecial #224                // Method level0StopWriteTrigger:(JJ)I
      20: ireturn

  public java.lang.String getName();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: invokespecial #225                // Method getName:(J)Ljava/lang/String;
       8: areturn

  public org.rocksdb.Env getEnv();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: invokespecial #226                // Method getEnv:(J)J
       8: lstore_1
       9: lload_1
      10: invokestatic  #227                // Method org/rocksdb/Env.getDefault:()Lorg/rocksdb/Env;
      13: getfield      #228                // Field org/rocksdb/Env.nativeHandle_:J
      16: lcmp
      17: ifne          24
      20: invokestatic  #227                // Method org/rocksdb/Env.getDefault:()Lorg/rocksdb/Env;
      23: areturn
      24: new           #229                // class org/rocksdb/RocksEnv
      27: dup
      28: lload_1
      29: invokespecial #230                // Method org/rocksdb/RocksEnv."<init>":(J)V
      32: astore_3
      33: aload_3
      34: invokevirtual #231                // Method org/rocksdb/Env.disOwnNativeHandle:()V
      37: aload_3
      38: areturn

  public void flush(org.rocksdb.FlushOptions) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: checkcast     #232                // class java/util/List
       6: invokevirtual #233                // Method flush:(Lorg/rocksdb/FlushOptions;Ljava/util/List;)V
       9: return

  public void flush(org.rocksdb.FlushOptions, org.rocksdb.ColumnFamilyHandle) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: ifnonnull     10
       6: aconst_null
       7: goto          21
      10: iconst_1
      11: anewarray     #61                 // class org/rocksdb/ColumnFamilyHandle
      14: dup
      15: iconst_0
      16: aload_2
      17: aastore
      18: invokestatic  #75                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      21: invokevirtual #233                // Method flush:(Lorg/rocksdb/FlushOptions;Ljava/util/List;)V
      24: return

  public void flush(org.rocksdb.FlushOptions, java.util.List<org.rocksdb.ColumnFamilyHandle>) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_1
       6: getfield      #234                // Field org/rocksdb/FlushOptions.nativeHandle_:J
       9: aload_0
      10: aload_2
      11: invokespecial #217                // Method toNativeHandleList:(Ljava/util/List;)[J
      14: invokespecial #235                // Method flush:(JJ[J)V
      17: return

  public void flushWal(boolean) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #236                // Method flushWal:(JZ)V
       9: return

  public void syncWal() throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: invokespecial #237                // Method syncWal:(J)V
       8: return

  public long getLatestSequenceNumber();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: invokespecial #238                // Method getLatestSequenceNumber:(J)J
       8: lreturn

  public boolean setPreserveDeletesSequenceNumber(long);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: lload_1
       6: invokespecial #239                // Method setPreserveDeletesSequenceNumber:(JJ)Z
       9: ireturn

  public void disableFileDeletions() throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: invokespecial #240                // Method disableFileDeletions:(J)V
       8: return

  public void enableFileDeletions(boolean) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #241                // Method enableFileDeletions:(JZ)V
       9: return

  public org.rocksdb.RocksDB$LiveFiles getLiveFiles() throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #242                // Method getLiveFiles:(Z)Lorg/rocksdb/RocksDB$LiveFiles;
       5: areturn

  public org.rocksdb.RocksDB$LiveFiles getLiveFiles(boolean) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: iload_1
       6: invokespecial #243                // Method getLiveFiles:(JZ)[Ljava/lang/String;
       9: astore_2
      10: aload_2
      11: ifnonnull     16
      14: aconst_null
      15: areturn
      16: aload_2
      17: aload_2
      18: arraylength
      19: iconst_1
      20: isub
      21: invokestatic  #244                // Method java/util/Arrays.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;
      24: checkcast     #211                // class "[Ljava/lang/String;"
      27: astore_3
      28: aload_2
      29: aload_2
      30: arraylength
      31: iconst_1
      32: isub
      33: aaload
      34: invokestatic  #245                // Method java/lang/Long.parseLong:(Ljava/lang/String;)J
      37: lstore        4
      39: new           #246                // class org/rocksdb/RocksDB$LiveFiles
      42: dup
      43: lload         4
      45: aload_3
      46: invokestatic  #75                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      49: invokespecial #247                // Method org/rocksdb/RocksDB$LiveFiles."<init>":(JLjava/util/List;)V
      52: areturn

  public java.util.List<org.rocksdb.LogFile> getSortedWalFiles() throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: invokespecial #248                // Method getSortedWalFiles:(J)[Lorg/rocksdb/LogFile;
       8: astore_1
       9: aload_1
      10: invokestatic  #75                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      13: areturn

  public org.rocksdb.TransactionLogIterator getUpdatesSince(long) throws org.rocksdb.RocksDBException;
    Code:
       0: new           #249                // class org/rocksdb/TransactionLogIterator
       3: dup
       4: aload_0
       5: aload_0
       6: getfield      #70                 // Field nativeHandle_:J
       9: lload_1
      10: invokespecial #250                // Method getUpdatesSince:(JJ)J
      13: invokespecial #251                // Method org/rocksdb/TransactionLogIterator."<init>":(J)V
      16: areturn

  public void deleteFile(java.lang.String) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_1
       6: invokespecial #252                // Method deleteFile:(JLjava/lang/String;)V
       9: return

  public java.util.List<org.rocksdb.LiveFileMetaData> getLiveFilesMetaData();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: invokespecial #253                // Method getLiveFilesMetaData:(J)[Lorg/rocksdb/LiveFileMetaData;
       8: invokestatic  #75                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      11: areturn

  public org.rocksdb.ColumnFamilyMetaData getColumnFamilyMetaData(org.rocksdb.ColumnFamilyHandle);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_1
       6: ifnonnull     13
       9: lconst_0
      10: goto          17
      13: aload_1
      14: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      17: invokespecial #254                // Method getColumnFamilyMetaData:(JJ)Lorg/rocksdb/ColumnFamilyMetaData;
      20: areturn

  public org.rocksdb.ColumnFamilyMetaData GetColumnFamilyMetaData();
    Code:
       0: aload_0
       1: aconst_null
       2: invokevirtual #255                // Method getColumnFamilyMetaData:(Lorg/rocksdb/ColumnFamilyHandle;)Lorg/rocksdb/ColumnFamilyMetaData;
       5: areturn

  public void ingestExternalFile(java.util.List<java.lang.String>, org.rocksdb.IngestExternalFileOptions) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_0
       6: invokevirtual #256                // Method getDefaultColumnFamily:()Lorg/rocksdb/ColumnFamilyHandle;
       9: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      12: aload_1
      13: iconst_0
      14: anewarray     #29                 // class java/lang/String
      17: invokeinterface #77,  2           // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      22: checkcast     #211                // class "[Ljava/lang/String;"
      25: aload_1
      26: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      31: aload_2
      32: getfield      #257                // Field org/rocksdb/IngestExternalFileOptions.nativeHandle_:J
      35: invokespecial #258                // Method ingestExternalFile:(JJ[Ljava/lang/String;IJ)V
      38: return

  public void ingestExternalFile(org.rocksdb.ColumnFamilyHandle, java.util.List<java.lang.String>, org.rocksdb.IngestExternalFileOptions) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_1
       6: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
       9: aload_2
      10: iconst_0
      11: anewarray     #29                 // class java/lang/String
      14: invokeinterface #77,  2           // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      19: checkcast     #211                // class "[Ljava/lang/String;"
      22: aload_2
      23: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      28: aload_3
      29: getfield      #257                // Field org/rocksdb/IngestExternalFileOptions.nativeHandle_:J
      32: invokespecial #258                // Method ingestExternalFile:(JJ[Ljava/lang/String;IJ)V
      35: return

  public void verifyChecksum() throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: invokespecial #259                // Method verifyChecksum:(J)V
       8: return

  public org.rocksdb.ColumnFamilyHandle getDefaultColumnFamily();
    Code:
       0: new           #61                 // class org/rocksdb/ColumnFamilyHandle
       3: dup
       4: aload_0
       5: aload_0
       6: aload_0
       7: getfield      #70                 // Field nativeHandle_:J
      10: invokespecial #260                // Method getDefaultColumnFamily:(J)J
      13: invokespecial #62                 // Method org/rocksdb/ColumnFamilyHandle."<init>":(Lorg/rocksdb/RocksDB;J)V
      16: astore_1
      17: aload_1
      18: invokevirtual #261                // Method org/rocksdb/ColumnFamilyHandle.disOwnNativeHandle:()V
      21: aload_1
      22: areturn

  public java.util.Map<java.lang.String, org.rocksdb.TableProperties> getPropertiesOfAllTables(org.rocksdb.ColumnFamilyHandle) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_1
       6: ifnonnull     13
       9: lconst_0
      10: goto          17
      13: aload_1
      14: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      17: invokespecial #262                // Method getPropertiesOfAllTables:(JJ)Ljava/util/Map;
      20: areturn

  public java.util.Map<java.lang.String, org.rocksdb.TableProperties> getPropertiesOfAllTables() throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aconst_null
       2: invokevirtual #263                // Method getPropertiesOfAllTables:(Lorg/rocksdb/ColumnFamilyHandle;)Ljava/util/Map;
       5: areturn

  public java.util.Map<java.lang.String, org.rocksdb.TableProperties> getPropertiesOfTablesInRange(org.rocksdb.ColumnFamilyHandle, java.util.List<org.rocksdb.Range>) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_1
       6: ifnonnull     13
       9: lconst_0
      10: goto          17
      13: aload_1
      14: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      17: aload_2
      18: invokestatic  #181                // Method toRangeSliceHandles:(Ljava/util/List;)[J
      21: invokespecial #264                // Method getPropertiesOfTablesInRange:(JJ[J)Ljava/util/Map;
      24: areturn

  public java.util.Map<java.lang.String, org.rocksdb.TableProperties> getPropertiesOfTablesInRange(java.util.List<org.rocksdb.Range>) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aconst_null
       2: aload_1
       3: invokevirtual #265                // Method getPropertiesOfTablesInRange:(Lorg/rocksdb/ColumnFamilyHandle;Ljava/util/List;)Ljava/util/Map;
       6: areturn

  public org.rocksdb.Range suggestCompactRange(org.rocksdb.ColumnFamilyHandle) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_1
       6: ifnonnull     13
       9: lconst_0
      10: goto          17
      13: aload_1
      14: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      17: invokespecial #266                // Method suggestCompactRange:(JJ)[J
      20: astore_2
      21: new           #267                // class org/rocksdb/Range
      24: dup
      25: new           #268                // class org/rocksdb/Slice
      28: dup
      29: aload_2
      30: iconst_0
      31: laload
      32: invokespecial #269                // Method org/rocksdb/Slice."<init>":(J)V
      35: new           #268                // class org/rocksdb/Slice
      38: dup
      39: aload_2
      40: iconst_1
      41: laload
      42: invokespecial #269                // Method org/rocksdb/Slice."<init>":(J)V
      45: invokespecial #270                // Method org/rocksdb/Range."<init>":(Lorg/rocksdb/Slice;Lorg/rocksdb/Slice;)V
      48: areturn

  public org.rocksdb.Range suggestCompactRange() throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aconst_null
       2: invokevirtual #271                // Method suggestCompactRange:(Lorg/rocksdb/ColumnFamilyHandle;)Lorg/rocksdb/Range;
       5: areturn

  public void promoteL0(org.rocksdb.ColumnFamilyHandle, int) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_1
       6: ifnonnull     13
       9: lconst_0
      10: goto          17
      13: aload_1
      14: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      17: iload_2
      18: invokespecial #272                // Method promoteL0:(JJI)V
      21: return

  public void promoteL0(int) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aconst_null
       2: iload_1
       3: invokevirtual #273                // Method promoteL0:(Lorg/rocksdb/ColumnFamilyHandle;I)V
       6: return

  public void startTrace(org.rocksdb.TraceOptions, org.rocksdb.AbstractTraceWriter) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: aload_1
       6: invokevirtual #274                // Method org/rocksdb/TraceOptions.getMaxTraceFileSize:()J
       9: aload_2
      10: getfield      #275                // Field org/rocksdb/AbstractTraceWriter.nativeHandle_:J
      13: invokespecial #276                // Method startTrace:(JJJ)V
      16: aload_2
      17: invokevirtual #277                // Method org/rocksdb/AbstractTraceWriter.disOwnNativeHandle:()V
      20: return

  public void endTrace() throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #70                 // Field nativeHandle_:J
       5: invokespecial #278                // Method endTrace:(J)V
       8: return

  public void deleteFilesInRanges(org.rocksdb.ColumnFamilyHandle, java.util.List<byte[]>, boolean) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_2
       1: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
       6: ifne          10
       9: return
      10: aload_2
      11: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      16: iconst_2
      17: irem
      18: ifeq          54
      21: new           #143                // class java/lang/IllegalArgumentException
      24: dup
      25: new           #30                 // class java/lang/StringBuilder
      28: dup
      29: invokespecial #31                 // Method java/lang/StringBuilder."<init>":()V
      32: ldc_w         #279                // String Ranges size needs to be multiple of 2 (from1, to1, from2, to2, ...), but is
      35: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      38: aload_2
      39: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      44: invokevirtual #280                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      47: invokevirtual #35                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      50: invokespecial #145                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      53: athrow
      54: aload_2
      55: aload_2
      56: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      61: anewarray     #53                 // class "[B"
      64: invokeinterface #77,  2           // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      69: checkcast     #78                 // class "[[B"
      72: astore        4
      74: aload_0
      75: aload_0
      76: getfield      #70                 // Field nativeHandle_:J
      79: aload_1
      80: ifnonnull     87
      83: lconst_0
      84: goto          91
      87: aload_1
      88: getfield      #83                 // Field org/rocksdb/ColumnFamilyHandle.nativeHandle_:J
      91: aload         4
      93: iload_3
      94: invokespecial #281                // Method deleteFilesInRanges:(JJ[[BZ)V
      97: return

  public static void destroyDB(java.lang.String, org.rocksdb.Options) throws org.rocksdb.RocksDBException;
    Code:
       0: aload_0
       1: aload_1
       2: getfield      #48                 // Field org/rocksdb/Options.nativeHandle_:J
       5: invokestatic  #282                // Method destroyDB:(Ljava/lang/String;J)V
       8: return

  private long[] toNativeHandleList(java.util.List<? extends org.rocksdb.RocksObject>);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: aconst_null
       5: areturn
       6: aload_1
       7: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      12: istore_2
      13: iload_2
      14: newarray       long
      16: astore_3
      17: iconst_0
      18: istore        4
      20: iload         4
      22: iload_2
      23: if_icmpge     50
      26: aload_3
      27: iload         4
      29: aload_1
      30: iload         4
      32: invokeinterface #54,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      37: checkcast     #283                // class org/rocksdb/RocksObject
      40: getfield      #284                // Field org/rocksdb/RocksObject.nativeHandle_:J
      43: lastore
      44: iinc          4, 1
      47: goto          20
      50: aload_3
      51: areturn

  private static long[] toRangeSliceHandles(java.util.List<org.rocksdb.Range>);
    Code:
       0: aload_0
       1: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
       6: iconst_2
       7: imul
       8: newarray       long
      10: astore_1
      11: iconst_0
      12: istore_2
      13: iconst_0
      14: istore_3
      15: iload_2
      16: aload_0
      17: invokeinterface #52,  1           // InterfaceMethod java/util/List.size:()I
      22: if_icmpge     71
      25: aload_0
      26: iload_2
      27: invokeinterface #54,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      32: checkcast     #267                // class org/rocksdb/Range
      35: astore        4
      37: aload_1
      38: iload_3
      39: iinc          3, 1
      42: aload         4
      44: getfield      #184                // Field org/rocksdb/Range.start:Lorg/rocksdb/Slice;
      47: invokevirtual #185                // Method org/rocksdb/Slice.getNativeHandle:()J
      50: lastore
      51: aload_1
      52: iload_3
      53: iinc          3, 1
      56: aload         4
      58: getfield      #186                // Field org/rocksdb/Range.limit:Lorg/rocksdb/Slice;
      61: invokevirtual #185                // Method org/rocksdb/Slice.getNativeHandle:()J
      64: lastore
      65: iinc          2, 1
      68: goto          15
      71: aload_1
      72: areturn

  protected void storeOptionsInstance(org.rocksdb.DBOptionsInterface);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #285                // Field options_:Lorg/rocksdb/DBOptionsInterface;
       5: return

  private static void checkBounds(int, int, int);
    Code:
       0: iload_0
       1: iload_1
       2: ior
       3: iload_0
       4: iload_1
       5: iadd
       6: ior
       7: iload_2
       8: iload_0
       9: iload_1
      10: iadd
      11: isub
      12: ior
      13: ifge          55
      16: new           #286                // class java/lang/IndexOutOfBoundsException
      19: dup
      20: ldc_w         #287                // String offset(%d), len(%d), size(%d)
      23: iconst_3
      24: anewarray     #288                // class java/lang/Object
      27: dup
      28: iconst_0
      29: iload_0
      30: invokestatic  #289                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      33: aastore
      34: dup
      35: iconst_1
      36: iload_1
      37: invokestatic  #289                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      40: aastore
      41: dup
      42: iconst_2
      43: iload_2
      44: invokestatic  #289                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      47: aastore
      48: invokestatic  #290                // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      51: invokespecial #291                // Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
      54: athrow
      55: return

  private static int computeCapacityHint(int);
    Code:
       0: iload_0
       1: i2d
       2: ldc2_w        #292                // double 1.5d
       5: dmul
       6: dconst_1
       7: dadd
       8: invokestatic  #294                // Method java/lang/Math.ceil:(D)D
      11: d2i
      12: ireturn

  private static native long open(long, java.lang.String) throws org.rocksdb.RocksDBException;

  private static native long[] open(long, java.lang.String, byte[][], long[]) throws org.rocksdb.RocksDBException;

  private static native long openROnly(long, java.lang.String) throws org.rocksdb.RocksDBException;

  private static native long[] openROnly(long, java.lang.String, byte[][], long[]) throws org.rocksdb.RocksDBException;

  protected native void disposeInternal(long);

  private static native void closeDatabase(long) throws org.rocksdb.RocksDBException;

  private static native byte[][] listColumnFamilies(long, java.lang.String) throws org.rocksdb.RocksDBException;

  private native long createColumnFamily(long, byte[], int, long) throws org.rocksdb.RocksDBException;

  private native long[] createColumnFamilies(long, long, byte[][]) throws org.rocksdb.RocksDBException;

  private native long[] createColumnFamilies(long, long[], byte[][]) throws org.rocksdb.RocksDBException;

  private native void dropColumnFamily(long, long) throws org.rocksdb.RocksDBException;

  private native void dropColumnFamilies(long, long[]) throws org.rocksdb.RocksDBException;

  private native void put(long, byte[], int, int, byte[], int, int) throws org.rocksdb.RocksDBException;

  private native void put(long, byte[], int, int, byte[], int, int, long) throws org.rocksdb.RocksDBException;

  private native void put(long, long, byte[], int, int, byte[], int, int) throws org.rocksdb.RocksDBException;

  private native void put(long, long, byte[], int, int, byte[], int, int, long) throws org.rocksdb.RocksDBException;

  private native void delete(long, byte[], int, int) throws org.rocksdb.RocksDBException;

  private native void delete(long, byte[], int, int, long) throws org.rocksdb.RocksDBException;

  private native void delete(long, long, byte[], int, int) throws org.rocksdb.RocksDBException;

  private native void delete(long, long, byte[], int, int, long) throws org.rocksdb.RocksDBException;

  private native void singleDelete(long, byte[], int) throws org.rocksdb.RocksDBException;

  private native void singleDelete(long, byte[], int, long) throws org.rocksdb.RocksDBException;

  private native void singleDelete(long, long, byte[], int) throws org.rocksdb.RocksDBException;

  private native void singleDelete(long, long, byte[], int, long) throws org.rocksdb.RocksDBException;

  private native void deleteRange(long, byte[], int, int, byte[], int, int) throws org.rocksdb.RocksDBException;

  private native void deleteRange(long, byte[], int, int, byte[], int, int, long) throws org.rocksdb.RocksDBException;

  private native void deleteRange(long, long, byte[], int, int, byte[], int, int) throws org.rocksdb.RocksDBException;

  private native void deleteRange(long, long, byte[], int, int, byte[], int, int, long) throws org.rocksdb.RocksDBException;

  private native void merge(long, byte[], int, int, byte[], int, int) throws org.rocksdb.RocksDBException;

  private native void merge(long, byte[], int, int, byte[], int, int, long) throws org.rocksdb.RocksDBException;

  private native void merge(long, long, byte[], int, int, byte[], int, int) throws org.rocksdb.RocksDBException;

  private native void merge(long, long, byte[], int, int, byte[], int, int, long) throws org.rocksdb.RocksDBException;

  private native void write0(long, long, long) throws org.rocksdb.RocksDBException;

  private native void write1(long, long, long) throws org.rocksdb.RocksDBException;

  private native int get(long, byte[], int, int, byte[], int, int) throws org.rocksdb.RocksDBException;

  private native int get(long, byte[], int, int, byte[], int, int, long) throws org.rocksdb.RocksDBException;

  private native int get(long, long, byte[], int, int, byte[], int, int) throws org.rocksdb.RocksDBException;

  private native int get(long, long, byte[], int, int, byte[], int, int, long) throws org.rocksdb.RocksDBException;

  private native byte[] get(long, byte[], int, int) throws org.rocksdb.RocksDBException;

  private native byte[] get(long, byte[], int, int, long) throws org.rocksdb.RocksDBException;

  private native byte[] get(long, long, byte[], int, int) throws org.rocksdb.RocksDBException;

  private native byte[] get(long, long, byte[], int, int, long) throws org.rocksdb.RocksDBException;

  private native byte[][] multiGet(long, byte[][], int[], int[]);

  private native byte[][] multiGet(long, byte[][], int[], int[], long[]);

  private native byte[][] multiGet(long, long, byte[][], int[], int[]);

  private native byte[][] multiGet(long, long, byte[][], int[], int[], long[]);

  private native boolean keyMayExist(long, long, long, byte[], int, int);

  private native byte[][] keyMayExistFoundValue(long, long, long, byte[], int, int);

  private native void putDirect(long, long, java.nio.ByteBuffer, int, int, java.nio.ByteBuffer, int, int, long) throws org.rocksdb.RocksDBException;

  private native long iterator(long);

  private native long iterator(long, long);

  private native long iteratorCF(long, long);

  private native long iteratorCF(long, long, long);

  private native long[] iterators(long, long[], long) throws org.rocksdb.RocksDBException;

  private native long getSnapshot(long);

  private native void releaseSnapshot(long, long);

  private native java.lang.String getProperty(long, long, java.lang.String, int) throws org.rocksdb.RocksDBException;

  private native java.util.Map<java.lang.String, java.lang.String> getMapProperty(long, long, java.lang.String, int) throws org.rocksdb.RocksDBException;

  private native int getDirect(long, long, java.nio.ByteBuffer, int, int, java.nio.ByteBuffer, int, int, long) throws org.rocksdb.RocksDBException;

  private native void deleteDirect(long, long, java.nio.ByteBuffer, int, int, long) throws org.rocksdb.RocksDBException;

  private native long getLongProperty(long, long, java.lang.String, int) throws org.rocksdb.RocksDBException;

  private native void resetStats(long) throws org.rocksdb.RocksDBException;

  private native long getAggregatedLongProperty(long, java.lang.String, int) throws org.rocksdb.RocksDBException;

  private native long[] getApproximateSizes(long, long, long[], byte);

  private final native long[] getApproximateMemTableStats(long, long, long, long);

  private native void compactRange(long, byte[], int, byte[], int, long, long) throws org.rocksdb.RocksDBException;

  private native void setOptions(long, long, java.lang.String[], java.lang.String[]) throws org.rocksdb.RocksDBException;

  private native void setDBOptions(long, java.lang.String[], java.lang.String[]) throws org.rocksdb.RocksDBException;

  private native java.lang.String[] compactFiles(long, long, long, java.lang.String[], int, int, long) throws org.rocksdb.RocksDBException;

  private native void cancelAllBackgroundWork(long, boolean);

  private native void pauseBackgroundWork(long) throws org.rocksdb.RocksDBException;

  private native void continueBackgroundWork(long) throws org.rocksdb.RocksDBException;

  private native void enableAutoCompaction(long, long[]) throws org.rocksdb.RocksDBException;

  private native int numberLevels(long, long);

  private native int maxMemCompactionLevel(long, long);

  private native int level0StopWriteTrigger(long, long);

  private native java.lang.String getName(long);

  private native long getEnv(long);

  private native void flush(long, long, long[]) throws org.rocksdb.RocksDBException;

  private native void flushWal(long, boolean) throws org.rocksdb.RocksDBException;

  private native void syncWal(long) throws org.rocksdb.RocksDBException;

  private native long getLatestSequenceNumber(long);

  private native boolean setPreserveDeletesSequenceNumber(long, long);

  private native void disableFileDeletions(long) throws org.rocksdb.RocksDBException;

  private native void enableFileDeletions(long, boolean) throws org.rocksdb.RocksDBException;

  private native java.lang.String[] getLiveFiles(long, boolean) throws org.rocksdb.RocksDBException;

  private native org.rocksdb.LogFile[] getSortedWalFiles(long) throws org.rocksdb.RocksDBException;

  private native long getUpdatesSince(long, long) throws org.rocksdb.RocksDBException;

  private native void deleteFile(long, java.lang.String) throws org.rocksdb.RocksDBException;

  private native org.rocksdb.LiveFileMetaData[] getLiveFilesMetaData(long);

  private native org.rocksdb.ColumnFamilyMetaData getColumnFamilyMetaData(long, long);

  private native void ingestExternalFile(long, long, java.lang.String[], int, long) throws org.rocksdb.RocksDBException;

  private native void verifyChecksum(long) throws org.rocksdb.RocksDBException;

  private native long getDefaultColumnFamily(long);

  private native java.util.Map<java.lang.String, org.rocksdb.TableProperties> getPropertiesOfAllTables(long, long) throws org.rocksdb.RocksDBException;

  private native java.util.Map<java.lang.String, org.rocksdb.TableProperties> getPropertiesOfTablesInRange(long, long, long[]);

  private native long[] suggestCompactRange(long, long) throws org.rocksdb.RocksDBException;

  private native void promoteL0(long, long, int) throws org.rocksdb.RocksDBException;

  private native void startTrace(long, long, long) throws org.rocksdb.RocksDBException;

  private native void endTrace(long) throws org.rocksdb.RocksDBException;

  private native void deleteFilesInRanges(long, long, byte[][], boolean) throws org.rocksdb.RocksDBException;

  private static native void destroyDB(java.lang.String, long) throws org.rocksdb.RocksDBException;

  static {};
    Code:
       0: ldc_w         #47                 // class org/rocksdb/RocksDB
       3: invokevirtual #295                // Method java/lang/Class.desiredAssertionStatus:()Z
       6: ifne          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: putstatic     #92                 // Field $assertionsDisabled:Z
      17: ldc_w         #296                // String default
      20: invokevirtual #297                // Method java/lang/String.getBytes:()[B
      23: putstatic     #298                // Field DEFAULT_COLUMN_FAMILY:[B
      26: new           #299                // class java/util/concurrent/atomic/AtomicReference
      29: dup
      30: getstatic     #4                  // Field org/rocksdb/RocksDB$LibraryState.NOT_LOADED:Lorg/rocksdb/RocksDB$LibraryState;
      33: invokespecial #300                // Method java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
      36: putstatic     #1                  // Field libraryLoaded:Ljava/util/concurrent/atomic/AtomicReference;
      39: invokestatic  #301                // Method loadLibrary:()V
      42: return
}
