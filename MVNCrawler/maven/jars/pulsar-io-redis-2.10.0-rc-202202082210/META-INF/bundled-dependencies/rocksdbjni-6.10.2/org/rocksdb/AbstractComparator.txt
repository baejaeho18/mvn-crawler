Compiled from "AbstractComparator.java"
public abstract class org.rocksdb.AbstractComparator extends org.rocksdb.RocksCallbackObject {
  org.rocksdb.AbstractComparator();
    Code:
       0: aload_0
       1: iconst_0
       2: newarray       long
       4: invokespecial #1                  // Method org/rocksdb/RocksCallbackObject."<init>":([J)V
       7: return

  protected org.rocksdb.AbstractComparator(org.rocksdb.ComparatorOptions);
    Code:
       0: aload_0
       1: iconst_1
       2: newarray       long
       4: dup
       5: iconst_0
       6: aload_1
       7: getfield      #2                  // Field org/rocksdb/ComparatorOptions.nativeHandle_:J
      10: lastore
      11: invokespecial #1                  // Method org/rocksdb/RocksCallbackObject."<init>":([J)V
      14: return

  protected long initializeNative(long...);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: laload
       4: invokespecial #3                  // Method createNewComparator:(J)J
       7: lreturn

  org.rocksdb.ComparatorType getComparatorType();
    Code:
       0: getstatic     #4                  // Field org/rocksdb/ComparatorType.JAVA_COMPARATOR:Lorg/rocksdb/ComparatorType;
       3: areturn

  public abstract java.lang.String name();

  public abstract int compare(java.nio.ByteBuffer, java.nio.ByteBuffer);

  public void findShortestSeparator(java.nio.ByteBuffer, java.nio.ByteBuffer);
    Code:
       0: return

  public void findShortSuccessor(java.nio.ByteBuffer);
    Code:
       0: return

  public final boolean usingDirectBuffers();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #5                  // Field nativeHandle_:J
       5: invokespecial #6                  // Method usingDirectBuffers:(J)Z
       8: ireturn

  private native boolean usingDirectBuffers(long);

  private native long createNewComparator(long);
}
