Compiled from "RocksIterator.java"
public class org.rocksdb.RocksIterator extends org.rocksdb.AbstractRocksIterator<org.rocksdb.RocksDB> {
  static final boolean $assertionsDisabled;

  protected org.rocksdb.RocksIterator(org.rocksdb.RocksDB, long);
    Code:
       0: aload_0
       1: aload_1
       2: lload_2
       3: invokespecial #1                  // Method org/rocksdb/AbstractRocksIterator."<init>":(Lorg/rocksdb/RocksObject;J)V
       6: return

  public byte[] key();
    Code:
       0: getstatic     #2                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #3                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #4                  // class java/lang/AssertionError
      16: dup
      17: invokespecial #5                  // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #6                  // Field nativeHandle_:J
      26: invokespecial #7                  // Method key0:(J)[B
      29: areturn

  public int key(java.nio.ByteBuffer);
    Code:
       0: getstatic     #2                  // Field $assertionsDisabled:Z
       3: ifne          28
       6: aload_0
       7: invokevirtual #3                  // Method isOwningHandle:()Z
      10: ifeq          20
      13: aload_1
      14: invokevirtual #8                  // Method java/nio/ByteBuffer.isDirect:()Z
      17: ifne          28
      20: new           #4                  // class java/lang/AssertionError
      23: dup
      24: invokespecial #5                  // Method java/lang/AssertionError."<init>":()V
      27: athrow
      28: aload_0
      29: aload_0
      30: getfield      #6                  // Field nativeHandle_:J
      33: aload_1
      34: aload_1
      35: invokevirtual #9                  // Method java/nio/ByteBuffer.position:()I
      38: aload_1
      39: invokevirtual #10                 // Method java/nio/ByteBuffer.remaining:()I
      42: invokespecial #11                 // Method keyDirect0:(JLjava/nio/ByteBuffer;II)I
      45: istore_2
      46: aload_1
      47: aload_1
      48: invokevirtual #9                  // Method java/nio/ByteBuffer.position:()I
      51: iload_2
      52: iadd
      53: aload_1
      54: invokevirtual #12                 // Method java/nio/ByteBuffer.limit:()I
      57: invokestatic  #13                 // Method java/lang/Math.min:(II)I
      60: invokevirtual #14                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
      63: pop
      64: iload_2
      65: ireturn

  public byte[] value();
    Code:
       0: getstatic     #2                  // Field $assertionsDisabled:Z
       3: ifne          21
       6: aload_0
       7: invokevirtual #3                  // Method isOwningHandle:()Z
      10: ifne          21
      13: new           #4                  // class java/lang/AssertionError
      16: dup
      17: invokespecial #5                  // Method java/lang/AssertionError."<init>":()V
      20: athrow
      21: aload_0
      22: aload_0
      23: getfield      #6                  // Field nativeHandle_:J
      26: invokespecial #15                 // Method value0:(J)[B
      29: areturn

  public int value(java.nio.ByteBuffer);
    Code:
       0: getstatic     #2                  // Field $assertionsDisabled:Z
       3: ifne          28
       6: aload_0
       7: invokevirtual #3                  // Method isOwningHandle:()Z
      10: ifeq          20
      13: aload_1
      14: invokevirtual #8                  // Method java/nio/ByteBuffer.isDirect:()Z
      17: ifne          28
      20: new           #4                  // class java/lang/AssertionError
      23: dup
      24: invokespecial #5                  // Method java/lang/AssertionError."<init>":()V
      27: athrow
      28: aload_0
      29: aload_0
      30: getfield      #6                  // Field nativeHandle_:J
      33: aload_1
      34: aload_1
      35: invokevirtual #9                  // Method java/nio/ByteBuffer.position:()I
      38: aload_1
      39: invokevirtual #10                 // Method java/nio/ByteBuffer.remaining:()I
      42: invokespecial #16                 // Method valueDirect0:(JLjava/nio/ByteBuffer;II)I
      45: istore_2
      46: aload_1
      47: aload_1
      48: invokevirtual #9                  // Method java/nio/ByteBuffer.position:()I
      51: iload_2
      52: iadd
      53: aload_1
      54: invokevirtual #12                 // Method java/nio/ByteBuffer.limit:()I
      57: invokestatic  #13                 // Method java/lang/Math.min:(II)I
      60: invokevirtual #14                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
      63: pop
      64: iload_2
      65: ireturn

  protected final native void disposeInternal(long);

  final native boolean isValid0(long);

  final native void seekToFirst0(long);

  final native void seekToLast0(long);

  final native void next0(long);

  final native void prev0(long);

  final native void refresh0(long);

  final native void seek0(long, byte[], int);

  final native void seekForPrev0(long, byte[], int);

  final native void seekDirect0(long, java.nio.ByteBuffer, int, int);

  final native void seekForPrevDirect0(long, java.nio.ByteBuffer, int, int);

  final native void status0(long) throws org.rocksdb.RocksDBException;

  private native byte[] key0(long);

  private native byte[] value0(long);

  private native int keyDirect0(long, java.nio.ByteBuffer, int, int);

  private native int valueDirect0(long, java.nio.ByteBuffer, int, int);

  static {};
    Code:
       0: ldc_w         #17                 // class org/rocksdb/RocksIterator
       3: invokevirtual #18                 // Method java/lang/Class.desiredAssertionStatus:()Z
       6: ifne          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: putstatic     #2                  // Field $assertionsDisabled:Z
      17: return
}
