Compiled from "LRUCacheCheapRead.java"
public class org.glassfish.hk2.utilities.cache.internal.LRUCacheCheapRead<K, V> extends org.glassfish.hk2.utilities.cache.LRUCache<K, V> {
  final java.lang.Object prunningLock;

  final int maxCacheSize;

  java.util.Map<K, org.glassfish.hk2.utilities.cache.internal.LRUCacheCheapRead$CacheEntryImpl<K, V>> cache;

  private static final org.glassfish.hk2.utilities.cache.internal.LRUCacheCheapRead$CacheEntryImplComparator COMPARATOR;

  public org.glassfish.hk2.utilities.cache.internal.LRUCacheCheapRead(int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/glassfish/hk2/utilities/cache/LRUCache."<init>":()V
       4: aload_0
       5: new           #2                  // class java/lang/Object
       8: dup
       9: invokespecial #3                  // Method java/lang/Object."<init>":()V
      12: putfield      #4                  // Field prunningLock:Ljava/lang/Object;
      15: aload_0
      16: new           #5                  // class java/util/concurrent/ConcurrentHashMap
      19: dup
      20: invokespecial #6                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      23: putfield      #7                  // Field cache:Ljava/util/Map;
      26: aload_0
      27: iload_1
      28: putfield      #8                  // Field maxCacheSize:I
      31: return

  public V get(K);
    Code:
       0: aload_0
       1: getfield      #7                  // Field cache:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #9,  2            // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #10                 // class org/glassfish/hk2/utilities/cache/internal/LRUCacheCheapRead$CacheEntryImpl
      13: astore_2
      14: aload_2
      15: ifnull        28
      18: aload_2
      19: invokevirtual #11                 // Method org/glassfish/hk2/utilities/cache/internal/LRUCacheCheapRead$CacheEntryImpl.hit:()Lorg/glassfish/hk2/utilities/cache/internal/LRUCacheCheapRead$CacheEntryImpl;
      22: getfield      #12                 // Field org/glassfish/hk2/utilities/cache/internal/LRUCacheCheapRead$CacheEntryImpl.value:Ljava/lang/Object;
      25: goto          29
      28: aconst_null
      29: areturn

  public org.glassfish.hk2.utilities.cache.CacheEntry put(K, V);
    Code:
       0: new           #10                 // class org/glassfish/hk2/utilities/cache/internal/LRUCacheCheapRead$CacheEntryImpl
       3: dup
       4: aload_1
       5: aload_2
       6: aload_0
       7: invokespecial #13                 // Method org/glassfish/hk2/utilities/cache/internal/LRUCacheCheapRead$CacheEntryImpl."<init>":(Ljava/lang/Object;Ljava/lang/Object;Lorg/glassfish/hk2/utilities/cache/internal/LRUCacheCheapRead;)V
      10: astore_3
      11: aload_0
      12: getfield      #4                  // Field prunningLock:Ljava/lang/Object;
      15: dup
      16: astore        4
      18: monitorenter
      19: aload_0
      20: getfield      #7                  // Field cache:Ljava/util/Map;
      23: invokeinterface #14,  1           // InterfaceMethod java/util/Map.size:()I
      28: iconst_1
      29: iadd
      30: aload_0
      31: getfield      #8                  // Field maxCacheSize:I
      34: if_icmple     41
      37: aload_0
      38: invokespecial #15                 // Method removeLRUItem:()V
      41: aload_0
      42: getfield      #7                  // Field cache:Ljava/util/Map;
      45: aload_1
      46: aload_3
      47: invokeinterface #16,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      52: pop
      53: aload_3
      54: aload         4
      56: monitorexit
      57: areturn
      58: astore        5
      60: aload         4
      62: monitorexit
      63: aload         5
      65: athrow
    Exception table:
       from    to  target type
          19    57    58   any
          58    63    58   any

  public void releaseCache();
    Code:
       0: aload_0
       1: getfield      #7                  // Field cache:Ljava/util/Map;
       4: invokeinterface #17,  1           // InterfaceMethod java/util/Map.clear:()V
       9: return

  public int getMaxCacheSize();
    Code:
       0: aload_0
       1: getfield      #8                  // Field maxCacheSize:I
       4: ireturn

  public void releaseMatching(org.glassfish.hk2.utilities.cache.CacheKeyFilter<K>);
    Code:
       0: aload_1
       1: ifnonnull     5
       4: return
       5: new           #18                 // class java/util/HashMap
       8: dup
       9: aload_0
      10: getfield      #7                  // Field cache:Ljava/util/Map;
      13: invokespecial #19                 // Method java/util/HashMap."<init>":(Ljava/util/Map;)V
      16: invokevirtual #20                 // Method java/util/HashMap.entrySet:()Ljava/util/Set;
      19: invokeinterface #21,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      24: astore_2
      25: aload_2
      26: invokeinterface #22,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      31: ifeq          74
      34: aload_2
      35: invokeinterface #23,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      40: checkcast     #24                 // class java/util/Map$Entry
      43: astore_3
      44: aload_1
      45: aload_3
      46: invokeinterface #25,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      51: invokeinterface #26,  2           // InterfaceMethod org/glassfish/hk2/utilities/cache/CacheKeyFilter.matches:(Ljava/lang/Object;)Z
      56: ifeq          71
      59: aload_3
      60: invokeinterface #27,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      65: checkcast     #10                 // class org/glassfish/hk2/utilities/cache/internal/LRUCacheCheapRead$CacheEntryImpl
      68: invokevirtual #28                 // Method org/glassfish/hk2/utilities/cache/internal/LRUCacheCheapRead$CacheEntryImpl.removeFromCache:()V
      71: goto          25
      74: return

  private void removeLRUItem();
    Code:
       0: aload_0
       1: getfield      #7                  // Field cache:Ljava/util/Map;
       4: invokeinterface #29,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
       9: astore_1
      10: aload_1
      11: getstatic     #30                 // Field COMPARATOR:Lorg/glassfish/hk2/utilities/cache/internal/LRUCacheCheapRead$CacheEntryImplComparator;
      14: invokestatic  #31                 // Method java/util/Collections.min:(Ljava/util/Collection;Ljava/util/Comparator;)Ljava/lang/Object;
      17: checkcast     #10                 // class org/glassfish/hk2/utilities/cache/internal/LRUCacheCheapRead$CacheEntryImpl
      20: invokevirtual #28                 // Method org/glassfish/hk2/utilities/cache/internal/LRUCacheCheapRead$CacheEntryImpl.removeFromCache:()V
      23: return

  static {};
    Code:
       0: new           #32                 // class org/glassfish/hk2/utilities/cache/internal/LRUCacheCheapRead$CacheEntryImplComparator
       3: dup
       4: aconst_null
       5: invokespecial #33                 // Method org/glassfish/hk2/utilities/cache/internal/LRUCacheCheapRead$CacheEntryImplComparator."<init>":(Lorg/glassfish/hk2/utilities/cache/internal/LRUCacheCheapRead$1;)V
       8: putstatic     #30                 // Field COMPARATOR:Lorg/glassfish/hk2/utilities/cache/internal/LRUCacheCheapRead$CacheEntryImplComparator;
      11: return
}
