Compiled from "WeakHashLRUImpl.java"
public class org.glassfish.hk2.utilities.general.internal.WeakHashLRUImpl<K> implements org.glassfish.hk2.utilities.general.WeakHashLRU<K> {
  private static final java.lang.Object VALUE;

  private final boolean isWeak;

  private final java.util.WeakHashMap<K, org.glassfish.hk2.utilities.general.internal.DoubleNode<K, java.lang.Object>> byKey;

  private final java.util.concurrent.ConcurrentHashMap<K, org.glassfish.hk2.utilities.general.internal.DoubleNode<K, java.lang.Object>> byKeyNotWeak;

  private final java.lang.ref.ReferenceQueue<? super K> myQueue;

  private org.glassfish.hk2.utilities.general.internal.DoubleNode<K, java.lang.Object> mru;

  private org.glassfish.hk2.utilities.general.internal.DoubleNode<K, java.lang.Object> lru;

  public org.glassfish.hk2.utilities.general.internal.WeakHashLRUImpl(boolean);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/lang/ref/ReferenceQueue
       8: dup
       9: invokespecial #3                  // Method java/lang/ref/ReferenceQueue."<init>":()V
      12: putfield      #4                  // Field myQueue:Ljava/lang/ref/ReferenceQueue;
      15: aload_0
      16: iload_1
      17: putfield      #5                  // Field isWeak:Z
      20: iload_1
      21: ifeq          43
      24: aload_0
      25: new           #6                  // class java/util/WeakHashMap
      28: dup
      29: invokespecial #7                  // Method java/util/WeakHashMap."<init>":()V
      32: putfield      #8                  // Field byKey:Ljava/util/WeakHashMap;
      35: aload_0
      36: aconst_null
      37: putfield      #9                  // Field byKeyNotWeak:Ljava/util/concurrent/ConcurrentHashMap;
      40: goto          59
      43: aload_0
      44: aconst_null
      45: putfield      #8                  // Field byKey:Ljava/util/WeakHashMap;
      48: aload_0
      49: new           #10                 // class java/util/concurrent/ConcurrentHashMap
      52: dup
      53: invokespecial #11                 // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      56: putfield      #9                  // Field byKeyNotWeak:Ljava/util/concurrent/ConcurrentHashMap;
      59: return

  private org.glassfish.hk2.utilities.general.internal.DoubleNode<K, java.lang.Object> addToHead(K);
    Code:
       0: new           #12                 // class org/glassfish/hk2/utilities/general/internal/DoubleNode
       3: dup
       4: aload_1
       5: getstatic     #13                 // Field VALUE:Ljava/lang/Object;
       8: aload_0
       9: getfield      #4                  // Field myQueue:Ljava/lang/ref/ReferenceQueue;
      12: invokespecial #14                 // Method org/glassfish/hk2/utilities/general/internal/DoubleNode."<init>":(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V
      15: astore_2
      16: aload_0
      17: getfield      #15                 // Field mru:Lorg/glassfish/hk2/utilities/general/internal/DoubleNode;
      20: ifnonnull     35
      23: aload_0
      24: aload_2
      25: putfield      #15                 // Field mru:Lorg/glassfish/hk2/utilities/general/internal/DoubleNode;
      28: aload_0
      29: aload_2
      30: putfield      #16                 // Field lru:Lorg/glassfish/hk2/utilities/general/internal/DoubleNode;
      33: aload_2
      34: areturn
      35: aload_2
      36: aload_0
      37: getfield      #15                 // Field mru:Lorg/glassfish/hk2/utilities/general/internal/DoubleNode;
      40: invokevirtual #17                 // Method org/glassfish/hk2/utilities/general/internal/DoubleNode.setNext:(Lorg/glassfish/hk2/utilities/general/internal/DoubleNode;)V
      43: aload_0
      44: getfield      #15                 // Field mru:Lorg/glassfish/hk2/utilities/general/internal/DoubleNode;
      47: aload_2
      48: invokevirtual #18                 // Method org/glassfish/hk2/utilities/general/internal/DoubleNode.setPrevious:(Lorg/glassfish/hk2/utilities/general/internal/DoubleNode;)V
      51: aload_0
      52: aload_2
      53: putfield      #15                 // Field mru:Lorg/glassfish/hk2/utilities/general/internal/DoubleNode;
      56: aload_2
      57: areturn

  private K remove(org.glassfish.hk2.utilities.general.internal.DoubleNode<K, java.lang.Object>);
    Code:
       0: aload_1
       1: invokevirtual #19                 // Method org/glassfish/hk2/utilities/general/internal/DoubleNode.getWeakKey:()Ljava/lang/ref/WeakReference;
       4: invokevirtual #20                 // Method java/lang/ref/WeakReference.get:()Ljava/lang/Object;
       7: astore_2
       8: aload_1
       9: invokevirtual #21                 // Method org/glassfish/hk2/utilities/general/internal/DoubleNode.getNext:()Lorg/glassfish/hk2/utilities/general/internal/DoubleNode;
      12: ifnull        26
      15: aload_1
      16: invokevirtual #21                 // Method org/glassfish/hk2/utilities/general/internal/DoubleNode.getNext:()Lorg/glassfish/hk2/utilities/general/internal/DoubleNode;
      19: aload_1
      20: invokevirtual #22                 // Method org/glassfish/hk2/utilities/general/internal/DoubleNode.getPrevious:()Lorg/glassfish/hk2/utilities/general/internal/DoubleNode;
      23: invokevirtual #18                 // Method org/glassfish/hk2/utilities/general/internal/DoubleNode.setPrevious:(Lorg/glassfish/hk2/utilities/general/internal/DoubleNode;)V
      26: aload_1
      27: invokevirtual #22                 // Method org/glassfish/hk2/utilities/general/internal/DoubleNode.getPrevious:()Lorg/glassfish/hk2/utilities/general/internal/DoubleNode;
      30: ifnull        44
      33: aload_1
      34: invokevirtual #22                 // Method org/glassfish/hk2/utilities/general/internal/DoubleNode.getPrevious:()Lorg/glassfish/hk2/utilities/general/internal/DoubleNode;
      37: aload_1
      38: invokevirtual #21                 // Method org/glassfish/hk2/utilities/general/internal/DoubleNode.getNext:()Lorg/glassfish/hk2/utilities/general/internal/DoubleNode;
      41: invokevirtual #17                 // Method org/glassfish/hk2/utilities/general/internal/DoubleNode.setNext:(Lorg/glassfish/hk2/utilities/general/internal/DoubleNode;)V
      44: aload_1
      45: aload_0
      46: getfield      #15                 // Field mru:Lorg/glassfish/hk2/utilities/general/internal/DoubleNode;
      49: if_acmpne     60
      52: aload_0
      53: aload_1
      54: invokevirtual #21                 // Method org/glassfish/hk2/utilities/general/internal/DoubleNode.getNext:()Lorg/glassfish/hk2/utilities/general/internal/DoubleNode;
      57: putfield      #15                 // Field mru:Lorg/glassfish/hk2/utilities/general/internal/DoubleNode;
      60: aload_1
      61: aload_0
      62: getfield      #16                 // Field lru:Lorg/glassfish/hk2/utilities/general/internal/DoubleNode;
      65: if_acmpne     76
      68: aload_0
      69: aload_1
      70: invokevirtual #22                 // Method org/glassfish/hk2/utilities/general/internal/DoubleNode.getPrevious:()Lorg/glassfish/hk2/utilities/general/internal/DoubleNode;
      73: putfield      #16                 // Field lru:Lorg/glassfish/hk2/utilities/general/internal/DoubleNode;
      76: aload_1
      77: aconst_null
      78: invokevirtual #17                 // Method org/glassfish/hk2/utilities/general/internal/DoubleNode.setNext:(Lorg/glassfish/hk2/utilities/general/internal/DoubleNode;)V
      81: aload_1
      82: aconst_null
      83: invokevirtual #18                 // Method org/glassfish/hk2/utilities/general/internal/DoubleNode.setPrevious:(Lorg/glassfish/hk2/utilities/general/internal/DoubleNode;)V
      86: aload_2
      87: areturn

  public synchronized void add(K);
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #23                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #24                 // String key may not be null
      10: invokespecial #25                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_0
      15: getfield      #5                  // Field isWeak:Z
      18: ifeq          40
      21: aload_0
      22: invokespecial #26                 // Method clearStale:()V
      25: aload_0
      26: getfield      #8                  // Field byKey:Ljava/util/WeakHashMap;
      29: aload_1
      30: invokevirtual #27                 // Method java/util/WeakHashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      33: checkcast     #12                 // class org/glassfish/hk2/utilities/general/internal/DoubleNode
      36: astore_2
      37: goto          52
      40: aload_0
      41: getfield      #9                  // Field byKeyNotWeak:Ljava/util/concurrent/ConcurrentHashMap;
      44: aload_1
      45: invokevirtual #28                 // Method java/util/concurrent/ConcurrentHashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      48: checkcast     #12                 // class org/glassfish/hk2/utilities/general/internal/DoubleNode
      51: astore_2
      52: aload_2
      53: ifnull        62
      56: aload_0
      57: aload_2
      58: invokespecial #29                 // Method remove:(Lorg/glassfish/hk2/utilities/general/internal/DoubleNode;)Ljava/lang/Object;
      61: pop
      62: aload_0
      63: aload_1
      64: invokespecial #30                 // Method addToHead:(Ljava/lang/Object;)Lorg/glassfish/hk2/utilities/general/internal/DoubleNode;
      67: astore_3
      68: aload_0
      69: getfield      #5                  // Field isWeak:Z
      72: ifeq          88
      75: aload_0
      76: getfield      #8                  // Field byKey:Ljava/util/WeakHashMap;
      79: aload_1
      80: aload_3
      81: invokevirtual #31                 // Method java/util/WeakHashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      84: pop
      85: goto          98
      88: aload_0
      89: getfield      #9                  // Field byKeyNotWeak:Ljava/util/concurrent/ConcurrentHashMap;
      92: aload_1
      93: aload_3
      94: invokevirtual #32                 // Method java/util/concurrent/ConcurrentHashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      97: pop
      98: return

  public boolean contains(K);
    Code:
       0: aload_0
       1: getfield      #5                  // Field isWeak:Z
       4: ifeq          31
       7: aload_0
       8: dup
       9: astore_2
      10: monitorenter
      11: aload_0
      12: invokespecial #26                 // Method clearStale:()V
      15: aload_0
      16: getfield      #8                  // Field byKey:Ljava/util/WeakHashMap;
      19: aload_1
      20: invokevirtual #33                 // Method java/util/WeakHashMap.containsKey:(Ljava/lang/Object;)Z
      23: aload_2
      24: monitorexit
      25: ireturn
      26: astore_3
      27: aload_2
      28: monitorexit
      29: aload_3
      30: athrow
      31: aload_0
      32: getfield      #9                  // Field byKeyNotWeak:Ljava/util/concurrent/ConcurrentHashMap;
      35: aload_1
      36: invokevirtual #34                 // Method java/util/concurrent/ConcurrentHashMap.containsKey:(Ljava/lang/Object;)Z
      39: ireturn
    Exception table:
       from    to  target type
          11    25    26   any
          26    29    26   any

  public synchronized boolean remove(K);
    Code:
       0: aload_0
       1: getfield      #5                  // Field isWeak:Z
       4: ifeq          11
       7: aload_0
       8: invokespecial #26                 // Method clearStale:()V
      11: aload_0
      12: aload_1
      13: invokespecial #35                 // Method removeNoClear:(Ljava/lang/Object;)Z
      16: ireturn

  private boolean removeNoClear(K);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: iconst_0
       5: ireturn
       6: aload_0
       7: getfield      #5                  // Field isWeak:Z
      10: ifeq          28
      13: aload_0
      14: getfield      #8                  // Field byKey:Ljava/util/WeakHashMap;
      17: aload_1
      18: invokevirtual #36                 // Method java/util/WeakHashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      21: checkcast     #12                 // class org/glassfish/hk2/utilities/general/internal/DoubleNode
      24: astore_2
      25: goto          40
      28: aload_0
      29: getfield      #9                  // Field byKeyNotWeak:Ljava/util/concurrent/ConcurrentHashMap;
      32: aload_1
      33: invokevirtual #37                 // Method java/util/concurrent/ConcurrentHashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      36: checkcast     #12                 // class org/glassfish/hk2/utilities/general/internal/DoubleNode
      39: astore_2
      40: aload_2
      41: ifnonnull     46
      44: iconst_0
      45: ireturn
      46: aload_0
      47: aload_2
      48: invokespecial #29                 // Method remove:(Lorg/glassfish/hk2/utilities/general/internal/DoubleNode;)Ljava/lang/Object;
      51: pop
      52: iconst_1
      53: ireturn

  public int size();
    Code:
       0: aload_0
       1: getfield      #5                  // Field isWeak:Z
       4: ifeq          30
       7: aload_0
       8: dup
       9: astore_1
      10: monitorenter
      11: aload_0
      12: invokespecial #26                 // Method clearStale:()V
      15: aload_0
      16: getfield      #8                  // Field byKey:Ljava/util/WeakHashMap;
      19: invokevirtual #38                 // Method java/util/WeakHashMap.size:()I
      22: aload_1
      23: monitorexit
      24: ireturn
      25: astore_2
      26: aload_1
      27: monitorexit
      28: aload_2
      29: athrow
      30: aload_0
      31: getfield      #9                  // Field byKeyNotWeak:Ljava/util/concurrent/ConcurrentHashMap;
      34: invokevirtual #39                 // Method java/util/concurrent/ConcurrentHashMap.size:()I
      37: ireturn
    Exception table:
       from    to  target type
          11    24    25   any
          25    28    25   any

  public synchronized K remove();
    Code:
       0: aload_0
       1: getfield      #16                 // Field lru:Lorg/glassfish/hk2/utilities/general/internal/DoubleNode;
       4: ifnonnull     15
       7: aconst_null
       8: astore_1
       9: aload_0
      10: invokespecial #26                 // Method clearStale:()V
      13: aload_1
      14: areturn
      15: aload_0
      16: getfield      #16                 // Field lru:Lorg/glassfish/hk2/utilities/general/internal/DoubleNode;
      19: astore_1
      20: aload_1
      21: ifnull        68
      24: aload_1
      25: invokevirtual #22                 // Method org/glassfish/hk2/utilities/general/internal/DoubleNode.getPrevious:()Lorg/glassfish/hk2/utilities/general/internal/DoubleNode;
      28: astore_2
      29: aload_1
      30: invokevirtual #19                 // Method org/glassfish/hk2/utilities/general/internal/DoubleNode.getWeakKey:()Ljava/lang/ref/WeakReference;
      33: invokevirtual #20                 // Method java/lang/ref/WeakReference.get:()Ljava/lang/Object;
      36: astore_3
      37: aload_3
      38: ifnull        57
      41: aload_0
      42: aload_3
      43: invokespecial #35                 // Method removeNoClear:(Ljava/lang/Object;)Z
      46: pop
      47: aload_3
      48: astore        4
      50: aload_0
      51: invokespecial #26                 // Method clearStale:()V
      54: aload         4
      56: areturn
      57: aload_0
      58: aload_1
      59: invokespecial #29                 // Method remove:(Lorg/glassfish/hk2/utilities/general/internal/DoubleNode;)Ljava/lang/Object;
      62: pop
      63: aload_2
      64: astore_1
      65: goto          20
      68: aconst_null
      69: astore_2
      70: aload_0
      71: invokespecial #26                 // Method clearStale:()V
      74: aload_2
      75: areturn
      76: astore        5
      78: aload_0
      79: invokespecial #26                 // Method clearStale:()V
      82: aload         5
      84: athrow
    Exception table:
       from    to  target type
           0     9    76   any
          15    50    76   any
          57    70    76   any
          76    78    76   any

  public synchronized void releaseMatching(org.glassfish.hk2.utilities.cache.CacheKeyFilter<K>);
    Code:
       0: aload_1
       1: ifnonnull     5
       4: return
       5: aload_0
       6: getfield      #5                  // Field isWeak:Z
       9: ifeq          16
      12: aload_0
      13: invokespecial #26                 // Method clearStale:()V
      16: new           #40                 // class java/util/LinkedList
      19: dup
      20: invokespecial #41                 // Method java/util/LinkedList."<init>":()V
      23: astore_2
      24: aload_0
      25: getfield      #15                 // Field mru:Lorg/glassfish/hk2/utilities/general/internal/DoubleNode;
      28: astore_3
      29: aload_3
      30: ifnull        73
      33: aload_3
      34: invokevirtual #19                 // Method org/glassfish/hk2/utilities/general/internal/DoubleNode.getWeakKey:()Ljava/lang/ref/WeakReference;
      37: invokevirtual #20                 // Method java/lang/ref/WeakReference.get:()Ljava/lang/Object;
      40: astore        4
      42: aload         4
      44: ifnull        65
      47: aload_1
      48: aload         4
      50: invokeinterface #42,  2           // InterfaceMethod org/glassfish/hk2/utilities/cache/CacheKeyFilter.matches:(Ljava/lang/Object;)Z
      55: ifeq          65
      58: aload_2
      59: aload         4
      61: invokevirtual #43                 // Method java/util/LinkedList.add:(Ljava/lang/Object;)Z
      64: pop
      65: aload_3
      66: invokevirtual #21                 // Method org/glassfish/hk2/utilities/general/internal/DoubleNode.getNext:()Lorg/glassfish/hk2/utilities/general/internal/DoubleNode;
      69: astore_3
      70: goto          29
      73: aload_2
      74: invokevirtual #44                 // Method java/util/LinkedList.iterator:()Ljava/util/Iterator;
      77: astore        4
      79: aload         4
      81: invokeinterface #45,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      86: ifeq          108
      89: aload         4
      91: invokeinterface #46,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      96: astore        5
      98: aload_0
      99: aload         5
     101: invokespecial #35                 // Method removeNoClear:(Ljava/lang/Object;)Z
     104: pop
     105: goto          79
     108: return

  public synchronized void clear();
    Code:
       0: aload_0
       1: getfield      #5                  // Field isWeak:Z
       4: ifeq          21
       7: aload_0
       8: invokespecial #26                 // Method clearStale:()V
      11: aload_0
      12: getfield      #8                  // Field byKey:Ljava/util/WeakHashMap;
      15: invokevirtual #47                 // Method java/util/WeakHashMap.clear:()V
      18: goto          28
      21: aload_0
      22: getfield      #9                  // Field byKeyNotWeak:Ljava/util/concurrent/ConcurrentHashMap;
      25: invokevirtual #48                 // Method java/util/concurrent/ConcurrentHashMap.clear:()V
      28: aload_0
      29: aconst_null
      30: putfield      #15                 // Field mru:Lorg/glassfish/hk2/utilities/general/internal/DoubleNode;
      33: aload_0
      34: aconst_null
      35: putfield      #16                 // Field lru:Lorg/glassfish/hk2/utilities/general/internal/DoubleNode;
      38: return

  public synchronized void clearStaleReferences();
    Code:
       0: aload_0
       1: invokespecial #26                 // Method clearStale:()V
       4: return

  private void clearStale();
    Code:
       0: iconst_0
       1: istore_1
       2: aload_0
       3: getfield      #4                  // Field myQueue:Ljava/lang/ref/ReferenceQueue;
       6: invokevirtual #49                 // Method java/lang/ref/ReferenceQueue.poll:()Ljava/lang/ref/Reference;
       9: ifnull        17
      12: iconst_1
      13: istore_1
      14: goto          2
      17: iload_1
      18: ifne          22
      21: return
      22: aload_0
      23: getfield      #15                 // Field mru:Lorg/glassfish/hk2/utilities/general/internal/DoubleNode;
      26: astore_2
      27: aload_2
      28: ifnull        57
      31: aload_2
      32: invokevirtual #21                 // Method org/glassfish/hk2/utilities/general/internal/DoubleNode.getNext:()Lorg/glassfish/hk2/utilities/general/internal/DoubleNode;
      35: astore_3
      36: aload_2
      37: invokevirtual #19                 // Method org/glassfish/hk2/utilities/general/internal/DoubleNode.getWeakKey:()Ljava/lang/ref/WeakReference;
      40: invokevirtual #20                 // Method java/lang/ref/WeakReference.get:()Ljava/lang/Object;
      43: ifnonnull     52
      46: aload_0
      47: aload_2
      48: invokespecial #29                 // Method remove:(Lorg/glassfish/hk2/utilities/general/internal/DoubleNode;)Ljava/lang/Object;
      51: pop
      52: aload_3
      53: astore_2
      54: goto          27
      57: return

  public synchronized java.lang.String toString();
    Code:
       0: new           #50                 // class java/lang/StringBuffer
       3: dup
       4: ldc           #51                 // String WeakHashLRUImpl({
       6: invokespecial #52                 // Method java/lang/StringBuffer."<init>":(Ljava/lang/String;)V
       9: astore_1
      10: iconst_1
      11: istore_2
      12: aload_0
      13: getfield      #15                 // Field mru:Lorg/glassfish/hk2/utilities/general/internal/DoubleNode;
      16: astore_3
      17: aload_3
      18: ifnull        96
      21: aload_3
      22: invokevirtual #19                 // Method org/glassfish/hk2/utilities/general/internal/DoubleNode.getWeakKey:()Ljava/lang/ref/WeakReference;
      25: invokevirtual #20                 // Method java/lang/ref/WeakReference.get:()Ljava/lang/Object;
      28: astore        4
      30: aload         4
      32: ifnonnull     40
      35: ldc           #53                 // String null
      37: goto          45
      40: aload         4
      42: invokevirtual #54                 // Method java/lang/Object.toString:()Ljava/lang/String;
      45: astore        5
      47: iload_2
      48: ifeq          63
      51: iconst_0
      52: istore_2
      53: aload_1
      54: aload         5
      56: invokevirtual #55                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      59: pop
      60: goto          88
      63: aload_1
      64: new           #56                 // class java/lang/StringBuilder
      67: dup
      68: invokespecial #57                 // Method java/lang/StringBuilder."<init>":()V
      71: ldc           #58                 // String ,
      73: invokevirtual #59                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      76: aload         5
      78: invokevirtual #59                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      81: invokevirtual #60                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      84: invokevirtual #55                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      87: pop
      88: aload_3
      89: invokevirtual #21                 // Method org/glassfish/hk2/utilities/general/internal/DoubleNode.getNext:()Lorg/glassfish/hk2/utilities/general/internal/DoubleNode;
      92: astore_3
      93: goto          17
      96: aload_1
      97: new           #56                 // class java/lang/StringBuilder
     100: dup
     101: invokespecial #57                 // Method java/lang/StringBuilder."<init>":()V
     104: ldc           #61                 // String },
     106: invokevirtual #59                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     109: aload_0
     110: invokestatic  #62                 // Method java/lang/System.identityHashCode:(Ljava/lang/Object;)I
     113: invokevirtual #63                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     116: ldc           #64                 // String )
     118: invokevirtual #59                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     121: invokevirtual #60                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     124: invokevirtual #55                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     127: pop
     128: aload_1
     129: invokevirtual #65                 // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
     132: areturn

  static {};
    Code:
       0: new           #66                 // class java/lang/Object
       3: dup
       4: invokespecial #1                  // Method java/lang/Object."<init>":()V
       7: putstatic     #13                 // Field VALUE:Ljava/lang/Object;
      10: return
}
