Compiled from "LRUHybridCache.java"
public class org.glassfish.hk2.utilities.cache.LRUHybridCache<K, V> implements org.glassfish.hk2.utilities.cache.Computable<K, org.glassfish.hk2.utilities.cache.HybridCacheEntry<V>> {
  private final org.glassfish.hk2.utilities.cache.LRUHybridCache$CycleHandler<K> cycleHandler;

  private static final org.glassfish.hk2.utilities.cache.LRUHybridCache$CycleHandler<java.lang.Object> EMPTY_CYCLE_HANDLER;

  private final java.util.concurrent.ConcurrentHashMap<K, org.glassfish.hk2.utilities.cache.LRUHybridCache<K, V>.OriginThreadAwareFuture> cache;

  private final org.glassfish.hk2.utilities.cache.Computable<K, org.glassfish.hk2.utilities.cache.HybridCacheEntry<V>> computable;

  private final java.lang.Object prunningLock;

  private final int maxCacheSize;

  private static final java.util.Comparator<org.glassfish.hk2.utilities.cache.LRUHybridCache$OriginThreadAwareFuture> COMPARATOR;

  public org.glassfish.hk2.utilities.cache.LRUHybridCache(int, org.glassfish.hk2.utilities.cache.Computable<K, org.glassfish.hk2.utilities.cache.HybridCacheEntry<V>>);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: getstatic     #2                  // Field EMPTY_CYCLE_HANDLER:Lorg/glassfish/hk2/utilities/cache/LRUHybridCache$CycleHandler;
       6: invokespecial #3                  // Method "<init>":(ILorg/glassfish/hk2/utilities/cache/Computable;Lorg/glassfish/hk2/utilities/cache/LRUHybridCache$CycleHandler;)V
       9: return

  public org.glassfish.hk2.utilities.cache.LRUHybridCache(int, org.glassfish.hk2.utilities.cache.Computable<K, org.glassfish.hk2.utilities.cache.HybridCacheEntry<V>>, org.glassfish.hk2.utilities.cache.LRUHybridCache$CycleHandler<K>);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #5                  // class java/util/concurrent/ConcurrentHashMap
       8: dup
       9: invokespecial #6                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      12: putfield      #7                  // Field cache:Ljava/util/concurrent/ConcurrentHashMap;
      15: aload_0
      16: new           #8                  // class java/lang/Object
      19: dup
      20: invokespecial #4                  // Method java/lang/Object."<init>":()V
      23: putfield      #9                  // Field prunningLock:Ljava/lang/Object;
      26: aload_0
      27: iload_1
      28: putfield      #10                 // Field maxCacheSize:I
      31: aload_0
      32: aload_2
      33: putfield      #1                  // Field computable:Lorg/glassfish/hk2/utilities/cache/Computable;
      36: aload_0
      37: aload_3
      38: putfield      #11                 // Field cycleHandler:Lorg/glassfish/hk2/utilities/cache/LRUHybridCache$CycleHandler;
      41: return

  public org.glassfish.hk2.utilities.cache.HybridCacheEntry<V> createCacheEntry(K, V, boolean);
    Code:
       0: new           #12                 // class org/glassfish/hk2/utilities/cache/LRUHybridCache$HybridCacheEntryImpl
       3: dup
       4: aload_0
       5: aload_1
       6: aload_2
       7: iload_3
       8: invokespecial #13                 // Method org/glassfish/hk2/utilities/cache/LRUHybridCache$HybridCacheEntryImpl."<init>":(Lorg/glassfish/hk2/utilities/cache/LRUHybridCache;Ljava/lang/Object;Ljava/lang/Object;Z)V
      11: areturn

  public org.glassfish.hk2.utilities.cache.HybridCacheEntry<V> compute(K);
    Code:
       0: aload_0
       1: getfield      #7                  // Field cache:Ljava/util/concurrent/ConcurrentHashMap;
       4: aload_1
       5: invokevirtual #14                 // Method java/util/concurrent/ConcurrentHashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
       8: checkcast     #15                 // class org/glassfish/hk2/utilities/cache/LRUHybridCache$OriginThreadAwareFuture
      11: astore_2
      12: aload_2
      13: ifnonnull     95
      16: new           #15                 // class org/glassfish/hk2/utilities/cache/LRUHybridCache$OriginThreadAwareFuture
      19: dup
      20: aload_0
      21: aload_0
      22: aload_1
      23: invokespecial #16                 // Method org/glassfish/hk2/utilities/cache/LRUHybridCache$OriginThreadAwareFuture."<init>":(Lorg/glassfish/hk2/utilities/cache/LRUHybridCache;Lorg/glassfish/hk2/utilities/cache/LRUHybridCache;Ljava/lang/Object;)V
      26: astore_3
      27: aload_0
      28: getfield      #9                  // Field prunningLock:Ljava/lang/Object;
      31: dup
      32: astore        4
      34: monitorenter
      35: aload_0
      36: getfield      #7                  // Field cache:Ljava/util/concurrent/ConcurrentHashMap;
      39: invokevirtual #17                 // Method java/util/concurrent/ConcurrentHashMap.size:()I
      42: iconst_1
      43: iadd
      44: aload_0
      45: getfield      #10                 // Field maxCacheSize:I
      48: if_icmple     55
      51: aload_0
      52: invokespecial #18                 // Method removeLRUItem:()V
      55: aload_0
      56: getfield      #7                  // Field cache:Ljava/util/concurrent/ConcurrentHashMap;
      59: aload_1
      60: aload_3
      61: invokevirtual #19                 // Method java/util/concurrent/ConcurrentHashMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      64: checkcast     #15                 // class org/glassfish/hk2/utilities/cache/LRUHybridCache$OriginThreadAwareFuture
      67: astore_2
      68: aload         4
      70: monitorexit
      71: goto          82
      74: astore        5
      76: aload         4
      78: monitorexit
      79: aload         5
      81: athrow
      82: aload_2
      83: ifnonnull     92
      86: aload_3
      87: astore_2
      88: aload_3
      89: invokevirtual #20                 // Method org/glassfish/hk2/utilities/cache/LRUHybridCache$OriginThreadAwareFuture.run:()V
      92: goto          140
      95: aload_2
      96: invokestatic  #21                 // Method org/glassfish/hk2/utilities/cache/LRUHybridCache$OriginThreadAwareFuture.access$100:(Lorg/glassfish/hk2/utilities/cache/LRUHybridCache$OriginThreadAwareFuture;)J
      99: lstore_3
     100: lload_3
     101: ldc2_w        #22                 // long -1l
     104: lcmp
     105: ifeq          132
     108: invokestatic  #24                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
     111: invokevirtual #25                 // Method java/lang/Thread.getId:()J
     114: aload_2
     115: invokestatic  #21                 // Method org/glassfish/hk2/utilities/cache/LRUHybridCache$OriginThreadAwareFuture.access$100:(Lorg/glassfish/hk2/utilities/cache/LRUHybridCache$OriginThreadAwareFuture;)J
     118: lcmp
     119: ifne          132
     122: aload_0
     123: getfield      #11                 // Field cycleHandler:Lorg/glassfish/hk2/utilities/cache/LRUHybridCache$CycleHandler;
     126: aload_1
     127: invokeinterface #26,  2           // InterfaceMethod org/glassfish/hk2/utilities/cache/LRUHybridCache$CycleHandler.handleCycle:(Ljava/lang/Object;)V
     132: aload_2
     133: invokestatic  #27                 // Method java/lang/System.nanoTime:()J
     136: invokestatic  #28                 // Method org/glassfish/hk2/utilities/cache/LRUHybridCache$OriginThreadAwareFuture.access$202:(Lorg/glassfish/hk2/utilities/cache/LRUHybridCache$OriginThreadAwareFuture;J)J
     139: pop2
     140: aload_2
     141: invokevirtual #29                 // Method org/glassfish/hk2/utilities/cache/LRUHybridCache$OriginThreadAwareFuture.get:()Lorg/glassfish/hk2/utilities/cache/HybridCacheEntry;
     144: astore_3
     145: aload_3
     146: invokeinterface #30,  1           // InterfaceMethod org/glassfish/hk2/utilities/cache/HybridCacheEntry.dropMe:()Z
     151: ifeq          163
     154: aload_0
     155: getfield      #7                  // Field cache:Ljava/util/concurrent/ConcurrentHashMap;
     158: aload_1
     159: invokevirtual #31                 // Method java/util/concurrent/ConcurrentHashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
     162: pop
     163: aload_3
     164: areturn
     165: astore_3
     166: new           #33                 // class java/lang/RuntimeException
     169: dup
     170: aload_3
     171: invokespecial #34                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/Throwable;)V
     174: athrow
     175: astore_3
     176: aload_0
     177: getfield      #7                  // Field cache:Ljava/util/concurrent/ConcurrentHashMap;
     180: aload_1
     181: invokevirtual #31                 // Method java/util/concurrent/ConcurrentHashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
     184: pop
     185: aload_3
     186: invokevirtual #36                 // Method java/util/concurrent/ExecutionException.getCause:()Ljava/lang/Throwable;
     189: instanceof    #33                 // class java/lang/RuntimeException
     192: ifeq          203
     195: aload_3
     196: invokevirtual #36                 // Method java/util/concurrent/ExecutionException.getCause:()Ljava/lang/Throwable;
     199: checkcast     #33                 // class java/lang/RuntimeException
     202: athrow
     203: new           #33                 // class java/lang/RuntimeException
     206: dup
     207: aload_3
     208: invokespecial #34                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/Throwable;)V
     211: athrow
    Exception table:
       from    to  target type
          35    71    74   any
          74    79    74   any
         140   164   165   Class java/lang/InterruptedException
         140   164   175   Class java/util/concurrent/ExecutionException

  public void clear();
    Code:
       0: aload_0
       1: getfield      #7                  // Field cache:Ljava/util/concurrent/ConcurrentHashMap;
       4: invokevirtual #37                 // Method java/util/concurrent/ConcurrentHashMap.clear:()V
       7: return

  public int size();
    Code:
       0: aload_0
       1: getfield      #7                  // Field cache:Ljava/util/concurrent/ConcurrentHashMap;
       4: invokevirtual #17                 // Method java/util/concurrent/ConcurrentHashMap.size:()I
       7: ireturn

  public int getMaximumCacheSize();
    Code:
       0: aload_0
       1: getfield      #10                 // Field maxCacheSize:I
       4: ireturn

  public boolean containsKey(K);
    Code:
       0: aload_0
       1: getfield      #7                  // Field cache:Ljava/util/concurrent/ConcurrentHashMap;
       4: aload_1
       5: invokevirtual #38                 // Method java/util/concurrent/ConcurrentHashMap.containsKey:(Ljava/lang/Object;)Z
       8: ireturn

  public void remove(K);
    Code:
       0: aload_0
       1: getfield      #7                  // Field cache:Ljava/util/concurrent/ConcurrentHashMap;
       4: aload_1
       5: invokevirtual #31                 // Method java/util/concurrent/ConcurrentHashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
       8: pop
       9: return

  private void removeLRUItem();
    Code:
       0: aload_0
       1: getfield      #7                  // Field cache:Ljava/util/concurrent/ConcurrentHashMap;
       4: invokevirtual #39                 // Method java/util/concurrent/ConcurrentHashMap.values:()Ljava/util/Collection;
       7: astore_1
       8: aload_0
       9: getfield      #7                  // Field cache:Ljava/util/concurrent/ConcurrentHashMap;
      12: aload_1
      13: getstatic     #40                 // Field COMPARATOR:Ljava/util/Comparator;
      16: invokestatic  #41                 // Method java/util/Collections.min:(Ljava/util/Collection;Ljava/util/Comparator;)Ljava/lang/Object;
      19: checkcast     #15                 // class org/glassfish/hk2/utilities/cache/LRUHybridCache$OriginThreadAwareFuture
      22: invokestatic  #42                 // Method org/glassfish/hk2/utilities/cache/LRUHybridCache$OriginThreadAwareFuture.access$300:(Lorg/glassfish/hk2/utilities/cache/LRUHybridCache$OriginThreadAwareFuture;)Ljava/lang/Object;
      25: invokevirtual #31                 // Method java/util/concurrent/ConcurrentHashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      28: pop
      29: return

  public void releaseMatching(org.glassfish.hk2.utilities.cache.CacheKeyFilter<K>);
    Code:
       0: aload_1
       1: ifnonnull     5
       4: return
       5: aload_0
       6: getfield      #7                  // Field cache:Ljava/util/concurrent/ConcurrentHashMap;
       9: invokevirtual #43                 // Method java/util/concurrent/ConcurrentHashMap.keySet:()Ljava/util/concurrent/ConcurrentHashMap$KeySetView;
      12: invokevirtual #44                 // Method java/util/concurrent/ConcurrentHashMap$KeySetView.iterator:()Ljava/util/Iterator;
      15: astore_2
      16: aload_2
      17: invokeinterface #45,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      22: ifeq          54
      25: aload_2
      26: invokeinterface #46,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      31: astore_3
      32: aload_1
      33: aload_3
      34: invokeinterface #47,  2           // InterfaceMethod org/glassfish/hk2/utilities/cache/CacheKeyFilter.matches:(Ljava/lang/Object;)Z
      39: ifeq          51
      42: aload_0
      43: getfield      #7                  // Field cache:Ljava/util/concurrent/ConcurrentHashMap;
      46: aload_3
      47: invokevirtual #31                 // Method java/util/concurrent/ConcurrentHashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      50: pop
      51: goto          16
      54: return

  public java.lang.Object compute(java.lang.Object) throws org.glassfish.hk2.utilities.cache.ComputationErrorException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #48                 // Method compute:(Ljava/lang/Object;)Lorg/glassfish/hk2/utilities/cache/HybridCacheEntry;
       5: areturn

  static org.glassfish.hk2.utilities.cache.Computable access$000(org.glassfish.hk2.utilities.cache.LRUHybridCache);
    Code:
       0: aload_0
       1: getfield      #1                  // Field computable:Lorg/glassfish/hk2/utilities/cache/Computable;
       4: areturn

  static {};
    Code:
       0: new           #49                 // class org/glassfish/hk2/utilities/cache/LRUHybridCache$1
       3: dup
       4: invokespecial #50                 // Method org/glassfish/hk2/utilities/cache/LRUHybridCache$1."<init>":()V
       7: putstatic     #2                  // Field EMPTY_CYCLE_HANDLER:Lorg/glassfish/hk2/utilities/cache/LRUHybridCache$CycleHandler;
      10: new           #51                 // class org/glassfish/hk2/utilities/cache/LRUHybridCache$CacheEntryImplComparator
      13: dup
      14: aconst_null
      15: invokespecial #52                 // Method org/glassfish/hk2/utilities/cache/LRUHybridCache$CacheEntryImplComparator."<init>":(Lorg/glassfish/hk2/utilities/cache/LRUHybridCache$1;)V
      18: putstatic     #40                 // Field COMPARATOR:Ljava/util/Comparator;
      21: return
}
