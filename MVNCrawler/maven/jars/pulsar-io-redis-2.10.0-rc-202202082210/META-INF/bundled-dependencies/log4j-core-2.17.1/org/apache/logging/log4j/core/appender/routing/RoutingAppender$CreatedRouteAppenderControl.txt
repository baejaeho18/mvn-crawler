Compiled from "RoutingAppender.java"
final class org.apache.logging.log4j.core.appender.routing.RoutingAppender$CreatedRouteAppenderControl extends org.apache.logging.log4j.core.appender.routing.RoutingAppender$RouteAppenderControl {
  private volatile boolean pendingDeletion;

  private final java.util.concurrent.atomic.AtomicInteger depth;

  org.apache.logging.log4j.core.appender.routing.RoutingAppender$CreatedRouteAppenderControl(org.apache.logging.log4j.core.Appender);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #2                  // Method org/apache/logging/log4j/core/appender/routing/RoutingAppender$RouteAppenderControl."<init>":(Lorg/apache/logging/log4j/core/Appender;)V
       5: aload_0
       6: new           #3                  // class java/util/concurrent/atomic/AtomicInteger
       9: dup
      10: invokespecial #4                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      13: putfield      #5                  // Field depth:Ljava/util/concurrent/atomic/AtomicInteger;
      16: return

  void checkout();
    Code:
       0: aload_0
       1: getfield      #1                  // Field pendingDeletion:Z
       4: ifeq          17
       7: getstatic     #6                  // Field LOGGER:Lorg/apache/logging/log4j/Logger;
      10: ldc           #7                  // String CreatedRouteAppenderControl.checkout invoked on a RouteAppenderControl that is pending deletion
      12: invokeinterface #8,  2            // InterfaceMethod org/apache/logging/log4j/Logger.warn:(Ljava/lang/String;)V
      17: aload_0
      18: getfield      #5                  // Field depth:Ljava/util/concurrent/atomic/AtomicInteger;
      21: invokevirtual #9                  // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
      24: pop
      25: return

  void release();
    Code:
       0: aload_0
       1: getfield      #5                  // Field depth:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #10                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
       7: pop
       8: aload_0
       9: invokevirtual #11                 // Method tryStopAppender:()V
      12: return

  void tryStopAppender();
    Code:
       0: aload_0
       1: getfield      #1                  // Field pendingDeletion:Z
       4: ifeq          42
       7: aload_0
       8: getfield      #5                  // Field depth:Ljava/util/concurrent/atomic/AtomicInteger;
      11: iconst_0
      12: ldc           #12                 // int -100000
      14: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicInteger.compareAndSet:(II)Z
      17: ifeq          42
      20: aload_0
      21: invokevirtual #14                 // Method getAppender:()Lorg/apache/logging/log4j/core/Appender;
      24: astore_1
      25: getstatic     #6                  // Field LOGGER:Lorg/apache/logging/log4j/Logger;
      28: ldc           #15                 // String Stopping appender {}
      30: aload_1
      31: invokeinterface #16,  3           // InterfaceMethod org/apache/logging/log4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;)V
      36: aload_1
      37: invokeinterface #17,  1           // InterfaceMethod org/apache/logging/log4j/core/Appender.stop:()V
      42: return

  static boolean access$302(org.apache.logging.log4j.core.appender.routing.RoutingAppender$CreatedRouteAppenderControl, boolean);
    Code:
       0: aload_0
       1: iload_1
       2: dup_x1
       3: putfield      #1                  // Field pendingDeletion:Z
       6: ireturn
}
