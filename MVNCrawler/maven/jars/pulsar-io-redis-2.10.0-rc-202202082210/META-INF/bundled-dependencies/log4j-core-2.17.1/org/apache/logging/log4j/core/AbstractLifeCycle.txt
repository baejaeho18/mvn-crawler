Compiled from "AbstractLifeCycle.java"
public class org.apache.logging.log4j.core.AbstractLifeCycle implements org.apache.logging.log4j.core.LifeCycle2 {
  public static final int DEFAULT_STOP_TIMEOUT;

  public static final java.util.concurrent.TimeUnit DEFAULT_STOP_TIMEUNIT;

  protected static final org.apache.logging.log4j.Logger LOGGER;

  private volatile org.apache.logging.log4j.core.LifeCycle$State state;

  public org.apache.logging.log4j.core.AbstractLifeCycle();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: getstatic     #2                  // Field org/apache/logging/log4j/core/LifeCycle$State.INITIALIZED:Lorg/apache/logging/log4j/core/LifeCycle$State;
       8: putfield      #3                  // Field state:Lorg/apache/logging/log4j/core/LifeCycle$State;
      11: return

  protected static org.apache.logging.log4j.Logger getStatusLogger();
    Code:
       0: getstatic     #4                  // Field LOGGER:Lorg/apache/logging/log4j/Logger;
       3: areturn

  protected boolean equalsImpl(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: ifnonnull     13
      11: iconst_0
      12: ireturn
      13: aload_0
      14: invokevirtual #5                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
      17: aload_1
      18: invokevirtual #5                  // Method java/lang/Object.getClass:()Ljava/lang/Class;
      21: if_acmpeq     26
      24: iconst_0
      25: ireturn
      26: aload_1
      27: checkcast     #6                  // class org/apache/logging/log4j/core/LifeCycle
      30: astore_2
      31: aload_0
      32: getfield      #3                  // Field state:Lorg/apache/logging/log4j/core/LifeCycle$State;
      35: aload_2
      36: invokeinterface #7,  1            // InterfaceMethod org/apache/logging/log4j/core/LifeCycle.getState:()Lorg/apache/logging/log4j/core/LifeCycle$State;
      41: if_acmpeq     46
      44: iconst_0
      45: ireturn
      46: iconst_1
      47: ireturn

  public org.apache.logging.log4j.core.LifeCycle$State getState();
    Code:
       0: aload_0
       1: getfield      #3                  // Field state:Lorg/apache/logging/log4j/core/LifeCycle$State;
       4: areturn

  protected int hashCodeImpl();
    Code:
       0: bipush        31
       2: istore_1
       3: iconst_1
       4: istore_2
       5: bipush        31
       7: iload_2
       8: imul
       9: aload_0
      10: getfield      #3                  // Field state:Lorg/apache/logging/log4j/core/LifeCycle$State;
      13: ifnonnull     20
      16: iconst_0
      17: goto          27
      20: aload_0
      21: getfield      #3                  // Field state:Lorg/apache/logging/log4j/core/LifeCycle$State;
      24: invokevirtual #8                  // Method org/apache/logging/log4j/core/LifeCycle$State.hashCode:()I
      27: iadd
      28: istore_2
      29: iload_2
      30: ireturn

  public boolean isInitialized();
    Code:
       0: aload_0
       1: getfield      #3                  // Field state:Lorg/apache/logging/log4j/core/LifeCycle$State;
       4: getstatic     #2                  // Field org/apache/logging/log4j/core/LifeCycle$State.INITIALIZED:Lorg/apache/logging/log4j/core/LifeCycle$State;
       7: if_acmpne     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public boolean isStarted();
    Code:
       0: aload_0
       1: getfield      #3                  // Field state:Lorg/apache/logging/log4j/core/LifeCycle$State;
       4: getstatic     #9                  // Field org/apache/logging/log4j/core/LifeCycle$State.STARTED:Lorg/apache/logging/log4j/core/LifeCycle$State;
       7: if_acmpne     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public boolean isStarting();
    Code:
       0: aload_0
       1: getfield      #3                  // Field state:Lorg/apache/logging/log4j/core/LifeCycle$State;
       4: getstatic     #10                 // Field org/apache/logging/log4j/core/LifeCycle$State.STARTING:Lorg/apache/logging/log4j/core/LifeCycle$State;
       7: if_acmpne     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public boolean isStopped();
    Code:
       0: aload_0
       1: getfield      #3                  // Field state:Lorg/apache/logging/log4j/core/LifeCycle$State;
       4: getstatic     #11                 // Field org/apache/logging/log4j/core/LifeCycle$State.STOPPED:Lorg/apache/logging/log4j/core/LifeCycle$State;
       7: if_acmpne     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public boolean isStopping();
    Code:
       0: aload_0
       1: getfield      #3                  // Field state:Lorg/apache/logging/log4j/core/LifeCycle$State;
       4: getstatic     #12                 // Field org/apache/logging/log4j/core/LifeCycle$State.STOPPING:Lorg/apache/logging/log4j/core/LifeCycle$State;
       7: if_acmpne     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  protected void setStarted();
    Code:
       0: aload_0
       1: getstatic     #9                  // Field org/apache/logging/log4j/core/LifeCycle$State.STARTED:Lorg/apache/logging/log4j/core/LifeCycle$State;
       4: invokevirtual #13                 // Method setState:(Lorg/apache/logging/log4j/core/LifeCycle$State;)V
       7: return

  protected void setStarting();
    Code:
       0: aload_0
       1: getstatic     #10                 // Field org/apache/logging/log4j/core/LifeCycle$State.STARTING:Lorg/apache/logging/log4j/core/LifeCycle$State;
       4: invokevirtual #13                 // Method setState:(Lorg/apache/logging/log4j/core/LifeCycle$State;)V
       7: return

  protected void setState(org.apache.logging.log4j.core.LifeCycle$State);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #3                  // Field state:Lorg/apache/logging/log4j/core/LifeCycle$State;
       5: return

  protected void setStopped();
    Code:
       0: aload_0
       1: getstatic     #11                 // Field org/apache/logging/log4j/core/LifeCycle$State.STOPPED:Lorg/apache/logging/log4j/core/LifeCycle$State;
       4: invokevirtual #13                 // Method setState:(Lorg/apache/logging/log4j/core/LifeCycle$State;)V
       7: return

  protected void setStopping();
    Code:
       0: aload_0
       1: getstatic     #12                 // Field org/apache/logging/log4j/core/LifeCycle$State.STOPPING:Lorg/apache/logging/log4j/core/LifeCycle$State;
       4: invokevirtual #13                 // Method setState:(Lorg/apache/logging/log4j/core/LifeCycle$State;)V
       7: return

  public void initialize();
    Code:
       0: aload_0
       1: getstatic     #2                  // Field org/apache/logging/log4j/core/LifeCycle$State.INITIALIZED:Lorg/apache/logging/log4j/core/LifeCycle$State;
       4: putfield      #3                  // Field state:Lorg/apache/logging/log4j/core/LifeCycle$State;
       7: return

  public void start();
    Code:
       0: aload_0
       1: invokevirtual #14                 // Method setStarted:()V
       4: return

  public void stop();
    Code:
       0: aload_0
       1: lconst_0
       2: getstatic     #16                 // Field DEFAULT_STOP_TIMEUNIT:Ljava/util/concurrent/TimeUnit;
       5: invokevirtual #17                 // Method stop:(JLjava/util/concurrent/TimeUnit;)Z
       8: pop
       9: return

  protected boolean stop(java.util.concurrent.Future<?>);
    Code:
       0: iconst_1
       1: istore_2
       2: aload_1
       3: ifnull        34
       6: aload_1
       7: invokeinterface #18,  1           // InterfaceMethod java/util/concurrent/Future.isCancelled:()Z
      12: ifne          24
      15: aload_1
      16: invokeinterface #19,  1           // InterfaceMethod java/util/concurrent/Future.isDone:()Z
      21: ifeq          26
      24: iconst_1
      25: ireturn
      26: aload_1
      27: iconst_1
      28: invokeinterface #20,  2           // InterfaceMethod java/util/concurrent/Future.cancel:(Z)Z
      33: istore_2
      34: iload_2
      35: ireturn

  public boolean stop(long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: getstatic     #11                 // Field org/apache/logging/log4j/core/LifeCycle$State.STOPPED:Lorg/apache/logging/log4j/core/LifeCycle$State;
       4: putfield      #3                  // Field state:Lorg/apache/logging/log4j/core/LifeCycle$State;
       7: iconst_1
       8: ireturn

  static {};
    Code:
       0: getstatic     #21                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
       3: putstatic     #16                 // Field DEFAULT_STOP_TIMEUNIT:Ljava/util/concurrent/TimeUnit;
       6: invokestatic  #22                 // Method org/apache/logging/log4j/status/StatusLogger.getLogger:()Lorg/apache/logging/log4j/status/StatusLogger;
       9: putstatic     #4                  // Field LOGGER:Lorg/apache/logging/log4j/Logger;
      12: return
}
