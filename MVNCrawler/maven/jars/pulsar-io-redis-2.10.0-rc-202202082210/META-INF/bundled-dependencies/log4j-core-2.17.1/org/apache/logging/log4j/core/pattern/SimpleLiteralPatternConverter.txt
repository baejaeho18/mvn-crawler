Compiled from "SimpleLiteralPatternConverter.java"
abstract class org.apache.logging.log4j.core.pattern.SimpleLiteralPatternConverter extends org.apache.logging.log4j.core.pattern.LogEventPatternConverter implements org.apache.logging.log4j.core.pattern.ArrayPatternConverter {
  private org.apache.logging.log4j.core.pattern.SimpleLiteralPatternConverter();
    Code:
       0: aload_0
       1: ldc           #2                  // String SimpleLiteral
       3: ldc           #3                  // String literal
       5: invokespecial #4                  // Method org/apache/logging/log4j/core/pattern/LogEventPatternConverter."<init>":(Ljava/lang/String;Ljava/lang/String;)V
       8: return

  static org.apache.logging.log4j.core.pattern.LogEventPatternConverter of(java.lang.String, boolean);
    Code:
       0: iload_1
       1: ifeq          11
       4: aload_0
       5: invokestatic  #5                  // Method org/apache/logging/log4j/core/util/OptionConverter.convertSpecialChars:(Ljava/lang/String;)Ljava/lang/String;
       8: goto          12
      11: aload_0
      12: astore_2
      13: aload_2
      14: invokestatic  #6                  // Method of:(Ljava/lang/String;)Lorg/apache/logging/log4j/core/pattern/LogEventPatternConverter;
      17: areturn

  static org.apache.logging.log4j.core.pattern.LogEventPatternConverter of(java.lang.String);
    Code:
       0: aload_0
       1: ifnull        11
       4: aload_0
       5: invokevirtual #7                  // Method java/lang/String.isEmpty:()Z
       8: ifeq          15
      11: invokestatic  #8                  // Method org/apache/logging/log4j/core/pattern/SimpleLiteralPatternConverter$Noop.access$000:()Lorg/apache/logging/log4j/core/pattern/SimpleLiteralPatternConverter$Noop;
      14: areturn
      15: ldc           #9                  // String
      17: aload_0
      18: invokevirtual #10                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      21: ifeq          28
      24: invokestatic  #11                 // Method org/apache/logging/log4j/core/pattern/SimpleLiteralPatternConverter$Space.access$100:()Lorg/apache/logging/log4j/core/pattern/SimpleLiteralPatternConverter$Space;
      27: areturn
      28: new           #12                 // class org/apache/logging/log4j/core/pattern/SimpleLiteralPatternConverter$StringValue
      31: dup
      32: aload_0
      33: invokespecial #13                 // Method org/apache/logging/log4j/core/pattern/SimpleLiteralPatternConverter$StringValue."<init>":(Ljava/lang/String;)V
      36: areturn

  public final void format(org.apache.logging.log4j.core.LogEvent, java.lang.StringBuilder);
    Code:
       0: aload_0
       1: aload_2
       2: invokevirtual #14                 // Method format:(Ljava/lang/StringBuilder;)V
       5: return

  public final void format(java.lang.Object, java.lang.StringBuilder);
    Code:
       0: aload_0
       1: aload_2
       2: invokevirtual #14                 // Method format:(Ljava/lang/StringBuilder;)V
       5: return

  public final void format(java.lang.StringBuilder, java.lang.Object...);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #14                 // Method format:(Ljava/lang/StringBuilder;)V
       5: return

  abstract void format(java.lang.StringBuilder);

  public final boolean isVariable();
    Code:
       0: iconst_0
       1: ireturn

  public final boolean handlesThrowable();
    Code:
       0: iconst_0
       1: ireturn

  org.apache.logging.log4j.core.pattern.SimpleLiteralPatternConverter(org.apache.logging.log4j.core.pattern.SimpleLiteralPatternConverter$1);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method "<init>":()V
       4: return
}
