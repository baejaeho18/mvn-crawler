Compiled from "DefaultShutdownCallbackRegistry.java"
public class org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry implements org.apache.logging.log4j.core.util.ShutdownCallbackRegistry,org.apache.logging.log4j.core.LifeCycle2,java.lang.Runnable {
  protected static final org.apache.logging.log4j.Logger LOGGER;

  private final java.util.concurrent.atomic.AtomicReference<org.apache.logging.log4j.core.LifeCycle$State> state;

  private final java.util.concurrent.ThreadFactory threadFactory;

  private final java.util.Collection<java.lang.ref.Reference<org.apache.logging.log4j.core.util.Cancellable>> hooks;

  private java.lang.ref.Reference<java.lang.Thread> shutdownHookRef;

  public org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry();
    Code:
       0: aload_0
       1: invokestatic  #1                  // Method java/util/concurrent/Executors.defaultThreadFactory:()Ljava/util/concurrent/ThreadFactory;
       4: invokespecial #2                  // Method "<init>":(Ljava/util/concurrent/ThreadFactory;)V
       7: return

  protected org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry(java.util.concurrent.ThreadFactory);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #4                  // class java/util/concurrent/atomic/AtomicReference
       8: dup
       9: getstatic     #5                  // Field org/apache/logging/log4j/core/LifeCycle$State.INITIALIZED:Lorg/apache/logging/log4j/core/LifeCycle$State;
      12: invokespecial #6                  // Method java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
      15: putfield      #7                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      18: aload_0
      19: new           #8                  // class java/util/concurrent/CopyOnWriteArrayList
      22: dup
      23: invokespecial #9                  // Method java/util/concurrent/CopyOnWriteArrayList."<init>":()V
      26: putfield      #10                 // Field hooks:Ljava/util/Collection;
      29: aload_0
      30: aload_1
      31: putfield      #11                 // Field threadFactory:Ljava/util/concurrent/ThreadFactory;
      34: return

  public void run();
    Code:
       0: aload_0
       1: getfield      #7                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: getstatic     #12                 // Field org/apache/logging/log4j/core/LifeCycle$State.STARTED:Lorg/apache/logging/log4j/core/LifeCycle$State;
       7: getstatic     #13                 // Field org/apache/logging/log4j/core/LifeCycle$State.STOPPING:Lorg/apache/logging/log4j/core/LifeCycle$State;
      10: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
      13: ifeq          149
      16: aload_0
      17: getfield      #10                 // Field hooks:Ljava/util/Collection;
      20: invokeinterface #15,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      25: astore_1
      26: aload_1
      27: invokeinterface #16,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      32: ifeq          139
      35: aload_1
      36: invokeinterface #17,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      41: checkcast     #18                 // class java/lang/ref/Reference
      44: astore_2
      45: aload_2
      46: invokevirtual #19                 // Method java/lang/ref/Reference.get:()Ljava/lang/Object;
      49: checkcast     #20                 // class org/apache/logging/log4j/core/util/Cancellable
      52: astore_3
      53: aload_3
      54: ifnull        136
      57: aload_3
      58: invokeinterface #21,  1           // InterfaceMethod org/apache/logging/log4j/core/util/Cancellable.run:()V
      63: goto          136
      66: astore        4
      68: getstatic     #23                 // Field LOGGER:Lorg/apache/logging/log4j/Logger;
      71: getstatic     #24                 // Field SHUTDOWN_HOOK_MARKER:Lorg/apache/logging/log4j/Marker;
      74: ldc           #25                 // String Caught exception executing shutdown hook {}
      76: aload_3
      77: aload         4
      79: invokeinterface #26,  5           // InterfaceMethod org/apache/logging/log4j/Logger.error:(Lorg/apache/logging/log4j/Marker;Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      84: goto          136
      87: astore        5
      89: getstatic     #27                 // Field java/lang/System.err:Ljava/io/PrintStream;
      92: new           #28                 // class java/lang/StringBuilder
      95: dup
      96: invokespecial #29                 // Method java/lang/StringBuilder."<init>":()V
      99: ldc           #30                 // String Caught exception
     101: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     104: aload         5
     106: invokevirtual #32                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
     109: invokevirtual #33                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     112: ldc           #34                 // String  logging exception
     114: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     117: aload         4
     119: invokevirtual #32                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
     122: invokevirtual #33                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     125: invokevirtual #35                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     128: invokevirtual #36                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
     131: aload         4
     133: invokevirtual #37                 // Method java/lang/Throwable.printStackTrace:()V
     136: goto          26
     139: aload_0
     140: getfield      #7                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
     143: getstatic     #38                 // Field org/apache/logging/log4j/core/LifeCycle$State.STOPPED:Lorg/apache/logging/log4j/core/LifeCycle$State;
     146: invokevirtual #39                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
     149: return
    Exception table:
       from    to  target type
          57    63    66   Class java/lang/Throwable
          68    84    87   Class java/lang/Throwable

  public org.apache.logging.log4j.core.util.Cancellable addShutdownCallback(java.lang.Runnable);
    Code:
       0: aload_0
       1: invokevirtual #40                 // Method isStarted:()Z
       4: ifeq          40
       7: new           #41                 // class org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry$RegisteredCancellable
      10: dup
      11: aload_1
      12: aload_0
      13: getfield      #10                 // Field hooks:Ljava/util/Collection;
      16: invokespecial #42                 // Method org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry$RegisteredCancellable."<init>":(Ljava/lang/Runnable;Ljava/util/Collection;)V
      19: astore_2
      20: aload_0
      21: getfield      #10                 // Field hooks:Ljava/util/Collection;
      24: new           #43                 // class java/lang/ref/SoftReference
      27: dup
      28: aload_2
      29: invokespecial #44                 // Method java/lang/ref/SoftReference."<init>":(Ljava/lang/Object;)V
      32: invokeinterface #45,  2           // InterfaceMethod java/util/Collection.add:(Ljava/lang/Object;)Z
      37: pop
      38: aload_2
      39: areturn
      40: new           #46                 // class java/lang/IllegalStateException
      43: dup
      44: new           #28                 // class java/lang/StringBuilder
      47: dup
      48: invokespecial #29                 // Method java/lang/StringBuilder."<init>":()V
      51: ldc           #47                 // String Cannot add new shutdown hook as this is not started. Current state:
      53: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      56: aload_0
      57: getfield      #7                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      60: invokevirtual #48                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      63: checkcast     #49                 // class org/apache/logging/log4j/core/LifeCycle$State
      66: invokevirtual #50                 // Method org/apache/logging/log4j/core/LifeCycle$State.name:()Ljava/lang/String;
      69: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      72: invokevirtual #35                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      75: invokespecial #51                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      78: athrow

  public void initialize();
    Code:
       0: return

  public void start();
    Code:
       0: aload_0
       1: getfield      #7                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: getstatic     #5                  // Field org/apache/logging/log4j/core/LifeCycle$State.INITIALIZED:Lorg/apache/logging/log4j/core/LifeCycle$State;
       7: getstatic     #52                 // Field org/apache/logging/log4j/core/LifeCycle$State.STARTING:Lorg/apache/logging/log4j/core/LifeCycle$State;
      10: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
      13: ifeq          76
      16: aload_0
      17: aload_0
      18: getfield      #11                 // Field threadFactory:Ljava/util/concurrent/ThreadFactory;
      21: aload_0
      22: invokeinterface #53,  2           // InterfaceMethod java/util/concurrent/ThreadFactory.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;
      27: invokespecial #54                 // Method addShutdownHook:(Ljava/lang/Thread;)V
      30: aload_0
      31: getfield      #7                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      34: getstatic     #12                 // Field org/apache/logging/log4j/core/LifeCycle$State.STARTED:Lorg/apache/logging/log4j/core/LifeCycle$State;
      37: invokevirtual #39                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      40: goto          76
      43: astore_1
      44: aload_0
      45: getfield      #7                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      48: getstatic     #38                 // Field org/apache/logging/log4j/core/LifeCycle$State.STOPPED:Lorg/apache/logging/log4j/core/LifeCycle$State;
      51: invokevirtual #39                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      54: aload_1
      55: athrow
      56: astore_1
      57: getstatic     #23                 // Field LOGGER:Lorg/apache/logging/log4j/Logger;
      60: aload_1
      61: invokeinterface #56,  2           // InterfaceMethod org/apache/logging/log4j/Logger.catching:(Ljava/lang/Throwable;)V
      66: aload_0
      67: getfield      #7                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      70: getstatic     #38                 // Field org/apache/logging/log4j/core/LifeCycle$State.STOPPED:Lorg/apache/logging/log4j/core/LifeCycle$State;
      73: invokevirtual #39                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      76: return
    Exception table:
       from    to  target type
          16    40    43   Class java/lang/IllegalStateException
          16    40    56   Class java/lang/Exception

  private void addShutdownHook(java.lang.Thread);
    Code:
       0: aload_0
       1: new           #57                 // class java/lang/ref/WeakReference
       4: dup
       5: aload_1
       6: invokespecial #58                 // Method java/lang/ref/WeakReference."<init>":(Ljava/lang/Object;)V
       9: putfield      #59                 // Field shutdownHookRef:Ljava/lang/ref/Reference;
      12: invokestatic  #60                 // Method java/lang/Runtime.getRuntime:()Ljava/lang/Runtime;
      15: aload_1
      16: invokevirtual #61                 // Method java/lang/Runtime.addShutdownHook:(Ljava/lang/Thread;)V
      19: return

  public void stop();
    Code:
       0: aload_0
       1: lconst_0
       2: getstatic     #63                 // Field org/apache/logging/log4j/core/AbstractLifeCycle.DEFAULT_STOP_TIMEUNIT:Ljava/util/concurrent/TimeUnit;
       5: invokevirtual #64                 // Method stop:(JLjava/util/concurrent/TimeUnit;)Z
       8: pop
       9: return

  public boolean stop(long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: getfield      #7                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: getstatic     #12                 // Field org/apache/logging/log4j/core/LifeCycle$State.STARTED:Lorg/apache/logging/log4j/core/LifeCycle$State;
       7: getstatic     #13                 // Field org/apache/logging/log4j/core/LifeCycle$State.STOPPING:Lorg/apache/logging/log4j/core/LifeCycle$State;
      10: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
      13: ifeq          48
      16: aload_0
      17: invokespecial #65                 // Method removeShutdownHook:()V
      20: aload_0
      21: getfield      #7                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      24: getstatic     #38                 // Field org/apache/logging/log4j/core/LifeCycle$State.STOPPED:Lorg/apache/logging/log4j/core/LifeCycle$State;
      27: invokevirtual #39                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      30: goto          48
      33: astore        4
      35: aload_0
      36: getfield      #7                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      39: getstatic     #38                 // Field org/apache/logging/log4j/core/LifeCycle$State.STOPPED:Lorg/apache/logging/log4j/core/LifeCycle$State;
      42: invokevirtual #39                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      45: aload         4
      47: athrow
      48: iconst_1
      49: ireturn
    Exception table:
       from    to  target type
          16    20    33   any
          33    35    33   any

  private void removeShutdownHook();
    Code:
       0: aload_0
       1: getfield      #59                 // Field shutdownHookRef:Ljava/lang/ref/Reference;
       4: invokevirtual #19                 // Method java/lang/ref/Reference.get:()Ljava/lang/Object;
       7: checkcast     #66                 // class java/lang/Thread
      10: astore_1
      11: aload_1
      12: ifnull        31
      15: invokestatic  #60                 // Method java/lang/Runtime.getRuntime:()Ljava/lang/Runtime;
      18: aload_1
      19: invokevirtual #67                 // Method java/lang/Runtime.removeShutdownHook:(Ljava/lang/Thread;)Z
      22: pop
      23: aload_0
      24: getfield      #59                 // Field shutdownHookRef:Ljava/lang/ref/Reference;
      27: invokevirtual #68                 // Method java/lang/ref/Reference.enqueue:()Z
      30: pop
      31: return

  public org.apache.logging.log4j.core.LifeCycle$State getState();
    Code:
       0: aload_0
       1: getfield      #7                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #48                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #49                 // class org/apache/logging/log4j/core/LifeCycle$State
      10: areturn

  public boolean isStarted();
    Code:
       0: aload_0
       1: getfield      #7                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #48                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: getstatic     #12                 // Field org/apache/logging/log4j/core/LifeCycle$State.STARTED:Lorg/apache/logging/log4j/core/LifeCycle$State;
      10: if_acmpne     17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ireturn

  public boolean isStopped();
    Code:
       0: aload_0
       1: getfield      #7                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #48                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: getstatic     #38                 // Field org/apache/logging/log4j/core/LifeCycle$State.STOPPED:Lorg/apache/logging/log4j/core/LifeCycle$State;
      10: if_acmpne     17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ireturn

  static {};
    Code:
       0: invokestatic  #69                 // Method org/apache/logging/log4j/status/StatusLogger.getLogger:()Lorg/apache/logging/log4j/status/StatusLogger;
       3: putstatic     #23                 // Field LOGGER:Lorg/apache/logging/log4j/Logger;
       6: return
}
