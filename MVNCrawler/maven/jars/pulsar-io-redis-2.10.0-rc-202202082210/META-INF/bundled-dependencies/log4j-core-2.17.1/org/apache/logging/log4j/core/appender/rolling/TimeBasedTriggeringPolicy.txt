Compiled from "TimeBasedTriggeringPolicy.java"
public final class org.apache.logging.log4j.core.appender.rolling.TimeBasedTriggeringPolicy extends org.apache.logging.log4j.core.appender.rolling.AbstractTriggeringPolicy {
  private long nextRolloverMillis;

  private final int interval;

  private final boolean modulate;

  private final long maxRandomDelayMillis;

  private org.apache.logging.log4j.core.appender.rolling.RollingFileManager manager;

  private org.apache.logging.log4j.core.appender.rolling.TimeBasedTriggeringPolicy(int, boolean, long);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method org/apache/logging/log4j/core/appender/rolling/AbstractTriggeringPolicy."<init>":()V
       4: aload_0
       5: iload_1
       6: putfield      #3                  // Field interval:I
       9: aload_0
      10: iload_2
      11: putfield      #4                  // Field modulate:Z
      14: aload_0
      15: lload_3
      16: putfield      #5                  // Field maxRandomDelayMillis:J
      19: return

  public int getInterval();
    Code:
       0: aload_0
       1: getfield      #3                  // Field interval:I
       4: ireturn

  public long getNextRolloverMillis();
    Code:
       0: aload_0
       1: getfield      #6                  // Field nextRolloverMillis:J
       4: lreturn

  public void initialize(org.apache.logging.log4j.core.appender.rolling.RollingFileManager);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #7                  // Field manager:Lorg/apache/logging/log4j/core/appender/rolling/RollingFileManager;
       5: aload_1
       6: invokevirtual #8                  // Method org/apache/logging/log4j/core/appender/rolling/RollingFileManager.getFileTime:()J
       9: lstore_2
      10: lload_2
      11: lconst_0
      12: lcmp
      13: ifne          20
      16: invokestatic  #9                  // Method java/lang/System.currentTimeMillis:()J
      19: lstore_2
      20: aload_1
      21: invokevirtual #10                 // Method org/apache/logging/log4j/core/appender/rolling/RollingFileManager.getPatternProcessor:()Lorg/apache/logging/log4j/core/appender/rolling/PatternProcessor;
      24: lload_2
      25: aload_0
      26: getfield      #3                  // Field interval:I
      29: aload_0
      30: getfield      #4                  // Field modulate:Z
      33: invokevirtual #11                 // Method org/apache/logging/log4j/core/appender/rolling/PatternProcessor.getNextTime:(JIZ)J
      36: pop2
      37: aload_1
      38: invokevirtual #10                 // Method org/apache/logging/log4j/core/appender/rolling/RollingFileManager.getPatternProcessor:()Lorg/apache/logging/log4j/core/appender/rolling/PatternProcessor;
      41: iconst_1
      42: invokevirtual #12                 // Method org/apache/logging/log4j/core/appender/rolling/PatternProcessor.setTimeBased:(Z)V
      45: aload_0
      46: invokestatic  #13                 // Method java/util/concurrent/ThreadLocalRandom.current:()Ljava/util/concurrent/ThreadLocalRandom;
      49: lconst_0
      50: lconst_1
      51: aload_0
      52: getfield      #5                  // Field maxRandomDelayMillis:J
      55: ladd
      56: invokevirtual #14                 // Method java/util/concurrent/ThreadLocalRandom.nextLong:(JJ)J
      59: aload_1
      60: invokevirtual #10                 // Method org/apache/logging/log4j/core/appender/rolling/RollingFileManager.getPatternProcessor:()Lorg/apache/logging/log4j/core/appender/rolling/PatternProcessor;
      63: lload_2
      64: aload_0
      65: getfield      #3                  // Field interval:I
      68: aload_0
      69: getfield      #4                  // Field modulate:Z
      72: invokevirtual #11                 // Method org/apache/logging/log4j/core/appender/rolling/PatternProcessor.getNextTime:(JIZ)J
      75: ladd
      76: putfield      #6                  // Field nextRolloverMillis:J
      79: return

  public boolean isTriggeringEvent(org.apache.logging.log4j.core.LogEvent);
    Code:
       0: aload_1
       1: invokeinterface #15,  1           // InterfaceMethod org/apache/logging/log4j/core/LogEvent.getTimeMillis:()J
       6: lstore_2
       7: lload_2
       8: aload_0
       9: getfield      #6                  // Field nextRolloverMillis:J
      12: lcmp
      13: iflt          68
      16: aload_0
      17: invokestatic  #13                 // Method java/util/concurrent/ThreadLocalRandom.current:()Ljava/util/concurrent/ThreadLocalRandom;
      20: lconst_0
      21: lconst_1
      22: aload_0
      23: getfield      #5                  // Field maxRandomDelayMillis:J
      26: ladd
      27: invokevirtual #14                 // Method java/util/concurrent/ThreadLocalRandom.nextLong:(JJ)J
      30: aload_0
      31: getfield      #7                  // Field manager:Lorg/apache/logging/log4j/core/appender/rolling/RollingFileManager;
      34: invokevirtual #10                 // Method org/apache/logging/log4j/core/appender/rolling/RollingFileManager.getPatternProcessor:()Lorg/apache/logging/log4j/core/appender/rolling/PatternProcessor;
      37: lload_2
      38: aload_0
      39: getfield      #3                  // Field interval:I
      42: aload_0
      43: getfield      #4                  // Field modulate:Z
      46: invokevirtual #11                 // Method org/apache/logging/log4j/core/appender/rolling/PatternProcessor.getNextTime:(JIZ)J
      49: ladd
      50: putfield      #6                  // Field nextRolloverMillis:J
      53: aload_0
      54: getfield      #7                  // Field manager:Lorg/apache/logging/log4j/core/appender/rolling/RollingFileManager;
      57: invokevirtual #10                 // Method org/apache/logging/log4j/core/appender/rolling/RollingFileManager.getPatternProcessor:()Lorg/apache/logging/log4j/core/appender/rolling/PatternProcessor;
      60: invokestatic  #9                  // Method java/lang/System.currentTimeMillis:()J
      63: invokevirtual #16                 // Method org/apache/logging/log4j/core/appender/rolling/PatternProcessor.setCurrentFileTime:(J)V
      66: iconst_1
      67: ireturn
      68: iconst_0
      69: ireturn

  public static org.apache.logging.log4j.core.appender.rolling.TimeBasedTriggeringPolicy createPolicy(java.lang.String, java.lang.String);
    Code:
       0: invokestatic  #17                 // Method newBuilder:()Lorg/apache/logging/log4j/core/appender/rolling/TimeBasedTriggeringPolicy$Builder;
       3: aload_0
       4: iconst_1
       5: invokestatic  #18                 // Method org/apache/logging/log4j/core/util/Integers.parseInt:(Ljava/lang/String;I)I
       8: invokevirtual #19                 // Method org/apache/logging/log4j/core/appender/rolling/TimeBasedTriggeringPolicy$Builder.withInterval:(I)Lorg/apache/logging/log4j/core/appender/rolling/TimeBasedTriggeringPolicy$Builder;
      11: aload_1
      12: invokestatic  #20                 // Method java/lang/Boolean.parseBoolean:(Ljava/lang/String;)Z
      15: invokevirtual #21                 // Method org/apache/logging/log4j/core/appender/rolling/TimeBasedTriggeringPolicy$Builder.withModulate:(Z)Lorg/apache/logging/log4j/core/appender/rolling/TimeBasedTriggeringPolicy$Builder;
      18: invokevirtual #22                 // Method org/apache/logging/log4j/core/appender/rolling/TimeBasedTriggeringPolicy$Builder.build:()Lorg/apache/logging/log4j/core/appender/rolling/TimeBasedTriggeringPolicy;
      21: areturn

  public static org.apache.logging.log4j.core.appender.rolling.TimeBasedTriggeringPolicy$Builder newBuilder();
    Code:
       0: new           #23                 // class org/apache/logging/log4j/core/appender/rolling/TimeBasedTriggeringPolicy$Builder
       3: dup
       4: invokespecial #24                 // Method org/apache/logging/log4j/core/appender/rolling/TimeBasedTriggeringPolicy$Builder."<init>":()V
       7: areturn

  public java.lang.String toString();
    Code:
       0: new           #25                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #26                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #27                 // String TimeBasedTriggeringPolicy(nextRolloverMillis=
       9: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #6                  // Field nextRolloverMillis:J
      16: invokevirtual #29                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      19: ldc           #30                 // String , interval=
      21: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: aload_0
      25: getfield      #3                  // Field interval:I
      28: invokevirtual #31                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      31: ldc           #32                 // String , modulate=
      33: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: aload_0
      37: getfield      #4                  // Field modulate:Z
      40: invokevirtual #33                 // Method java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;
      43: ldc           #34                 // String )
      45: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      48: invokevirtual #35                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      51: areturn

  org.apache.logging.log4j.core.appender.rolling.TimeBasedTriggeringPolicy(int, boolean, long, org.apache.logging.log4j.core.appender.rolling.TimeBasedTriggeringPolicy$1);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: lload_3
       4: invokespecial #1                  // Method "<init>":(IZJ)V
       7: return
}
