Compiled from "AsyncLoggerConfigDisruptor.java"
public class org.apache.logging.log4j.core.async.AsyncLoggerConfigDisruptor extends org.apache.logging.log4j.core.AbstractLifeCycle implements org.apache.logging.log4j.core.async.AsyncLoggerConfigDelegate {
  private static final int MAX_DRAIN_ATTEMPTS_BEFORE_SHUTDOWN;

  private static final int SLEEP_MILLIS_BETWEEN_DRAIN_ATTEMPTS;

  private static final com.lmax.disruptor.EventFactory<org.apache.logging.log4j.core.async.AsyncLoggerConfigDisruptor$Log4jEventWrapper> FACTORY;

  private static final com.lmax.disruptor.EventFactory<org.apache.logging.log4j.core.async.AsyncLoggerConfigDisruptor$Log4jEventWrapper> MUTABLE_FACTORY;

  private static final com.lmax.disruptor.EventTranslatorTwoArg<org.apache.logging.log4j.core.async.AsyncLoggerConfigDisruptor$Log4jEventWrapper, org.apache.logging.log4j.core.LogEvent, org.apache.logging.log4j.core.async.AsyncLoggerConfig> TRANSLATOR;

  private static final com.lmax.disruptor.EventTranslatorTwoArg<org.apache.logging.log4j.core.async.AsyncLoggerConfigDisruptor$Log4jEventWrapper, org.apache.logging.log4j.core.LogEvent, org.apache.logging.log4j.core.async.AsyncLoggerConfig> MUTABLE_TRANSLATOR;

  private int ringBufferSize;

  private org.apache.logging.log4j.core.async.AsyncQueueFullPolicy asyncQueueFullPolicy;

  private java.lang.Boolean mutable;

  private volatile com.lmax.disruptor.dsl.Disruptor<org.apache.logging.log4j.core.async.AsyncLoggerConfigDisruptor$Log4jEventWrapper> disruptor;

  private long backgroundThreadId;

  private com.lmax.disruptor.EventFactory<org.apache.logging.log4j.core.async.AsyncLoggerConfigDisruptor$Log4jEventWrapper> factory;

  private com.lmax.disruptor.EventTranslatorTwoArg<org.apache.logging.log4j.core.async.AsyncLoggerConfigDisruptor$Log4jEventWrapper, org.apache.logging.log4j.core.LogEvent, org.apache.logging.log4j.core.async.AsyncLoggerConfig> translator;

  private volatile boolean alreadyLoggedWarning;

  private final java.lang.Object queueFullEnqueueLock;

  public org.apache.logging.log4j.core.async.AsyncLoggerConfigDisruptor();
    Code:
       0: aload_0
       1: invokespecial #2                  // Method org/apache/logging/log4j/core/AbstractLifeCycle."<init>":()V
       4: aload_0
       5: getstatic     #3                  // Field java/lang/Boolean.FALSE:Ljava/lang/Boolean;
       8: putfield      #4                  // Field mutable:Ljava/lang/Boolean;
      11: aload_0
      12: new           #5                  // class java/lang/Object
      15: dup
      16: invokespecial #6                  // Method java/lang/Object."<init>":()V
      19: putfield      #7                  // Field queueFullEnqueueLock:Ljava/lang/Object;
      22: return

  public void setLogEventFactory(org.apache.logging.log4j.core.impl.LogEventFactory);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #4                  // Field mutable:Ljava/lang/Boolean;
       5: invokevirtual #8                  // Method java/lang/Boolean.booleanValue:()Z
       8: ifne          18
      11: aload_1
      12: instanceof    #9                  // class org/apache/logging/log4j/core/impl/ReusableLogEventFactory
      15: ifeq          22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: invokestatic  #10                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      26: putfield      #4                  // Field mutable:Ljava/lang/Boolean;
      29: return

  public synchronized void start();
    Code:
       0: aload_0
       1: getfield      #11                 // Field disruptor:Lcom/lmax/disruptor/dsl/Disruptor;
       4: ifnull        18
       7: getstatic     #12                 // Field LOGGER:Lorg/apache/logging/log4j/Logger;
      10: ldc           #13                 // String AsyncLoggerConfigDisruptor not starting new disruptor for this configuration, using existing object.
      12: invokeinterface #14,  2           // InterfaceMethod org/apache/logging/log4j/Logger.trace:(Ljava/lang/String;)V
      17: return
      18: getstatic     #12                 // Field LOGGER:Lorg/apache/logging/log4j/Logger;
      21: ldc           #15                 // String AsyncLoggerConfigDisruptor creating new disruptor for this configuration.
      23: invokeinterface #14,  2           // InterfaceMethod org/apache/logging/log4j/Logger.trace:(Ljava/lang/String;)V
      28: aload_0
      29: ldc           #16                 // String AsyncLoggerConfig.RingBufferSize
      31: invokestatic  #17                 // Method org/apache/logging/log4j/core/async/DisruptorUtil.calculateRingBufferSize:(Ljava/lang/String;)I
      34: putfield      #18                 // Field ringBufferSize:I
      37: ldc           #19                 // String AsyncLoggerConfig.WaitStrategy
      39: invokestatic  #20                 // Method org/apache/logging/log4j/core/async/DisruptorUtil.createWaitStrategy:(Ljava/lang/String;)Lcom/lmax/disruptor/WaitStrategy;
      42: astore_1
      43: new           #21                 // class org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor$1
      46: dup
      47: aload_0
      48: ldc           #22                 // String AsyncLoggerConfig
      50: iconst_1
      51: iconst_5
      52: invokespecial #24                 // Method org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor$1."<init>":(Lorg/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor;Ljava/lang/String;ZI)V
      55: astore_2
      56: aload_0
      57: invokestatic  #25                 // Method org/apache/logging/log4j/core/async/AsyncQueueFullPolicyFactory.create:()Lorg/apache/logging/log4j/core/async/AsyncQueueFullPolicy;
      60: putfield      #26                 // Field asyncQueueFullPolicy:Lorg/apache/logging/log4j/core/async/AsyncQueueFullPolicy;
      63: aload_0
      64: aload_0
      65: getfield      #4                  // Field mutable:Ljava/lang/Boolean;
      68: invokevirtual #8                  // Method java/lang/Boolean.booleanValue:()Z
      71: ifeq          80
      74: getstatic     #27                 // Field MUTABLE_TRANSLATOR:Lcom/lmax/disruptor/EventTranslatorTwoArg;
      77: goto          83
      80: getstatic     #28                 // Field TRANSLATOR:Lcom/lmax/disruptor/EventTranslatorTwoArg;
      83: putfield      #29                 // Field translator:Lcom/lmax/disruptor/EventTranslatorTwoArg;
      86: aload_0
      87: aload_0
      88: getfield      #4                  // Field mutable:Ljava/lang/Boolean;
      91: invokevirtual #8                  // Method java/lang/Boolean.booleanValue:()Z
      94: ifeq          103
      97: getstatic     #30                 // Field MUTABLE_FACTORY:Lcom/lmax/disruptor/EventFactory;
     100: goto          106
     103: getstatic     #31                 // Field FACTORY:Lcom/lmax/disruptor/EventFactory;
     106: putfield      #32                 // Field factory:Lcom/lmax/disruptor/EventFactory;
     109: aload_0
     110: new           #33                 // class com/lmax/disruptor/dsl/Disruptor
     113: dup
     114: aload_0
     115: getfield      #32                 // Field factory:Lcom/lmax/disruptor/EventFactory;
     118: aload_0
     119: getfield      #18                 // Field ringBufferSize:I
     122: aload_2
     123: getstatic     #34                 // Field com/lmax/disruptor/dsl/ProducerType.MULTI:Lcom/lmax/disruptor/dsl/ProducerType;
     126: aload_1
     127: invokespecial #35                 // Method com/lmax/disruptor/dsl/Disruptor."<init>":(Lcom/lmax/disruptor/EventFactory;ILjava/util/concurrent/ThreadFactory;Lcom/lmax/disruptor/dsl/ProducerType;Lcom/lmax/disruptor/WaitStrategy;)V
     130: putfield      #11                 // Field disruptor:Lcom/lmax/disruptor/dsl/Disruptor;
     133: invokestatic  #36                 // Method org/apache/logging/log4j/core/async/DisruptorUtil.getAsyncLoggerConfigExceptionHandler:()Lcom/lmax/disruptor/ExceptionHandler;
     136: astore_3
     137: aload_0
     138: getfield      #11                 // Field disruptor:Lcom/lmax/disruptor/dsl/Disruptor;
     141: aload_3
     142: invokevirtual #37                 // Method com/lmax/disruptor/dsl/Disruptor.setDefaultExceptionHandler:(Lcom/lmax/disruptor/ExceptionHandler;)V
     145: iconst_1
     146: anewarray     #38                 // class org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor$Log4jEventWrapperHandler
     149: dup
     150: iconst_0
     151: new           #38                 // class org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor$Log4jEventWrapperHandler
     154: dup
     155: aconst_null
     156: invokespecial #39                 // Method org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor$Log4jEventWrapperHandler."<init>":(Lorg/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor$1;)V
     159: aastore
     160: astore        4
     162: aload_0
     163: getfield      #11                 // Field disruptor:Lcom/lmax/disruptor/dsl/Disruptor;
     166: aload         4
     168: invokevirtual #40                 // Method com/lmax/disruptor/dsl/Disruptor.handleEventsWith:([Lcom/lmax/disruptor/EventHandler;)Lcom/lmax/disruptor/dsl/EventHandlerGroup;
     171: pop
     172: getstatic     #12                 // Field LOGGER:Lorg/apache/logging/log4j/Logger;
     175: ldc           #41                 // String Starting AsyncLoggerConfig disruptor for this configuration with ringbufferSize={}, waitStrategy={}, exceptionHandler={}...
     177: aload_0
     178: getfield      #11                 // Field disruptor:Lcom/lmax/disruptor/dsl/Disruptor;
     181: invokevirtual #42                 // Method com/lmax/disruptor/dsl/Disruptor.getRingBuffer:()Lcom/lmax/disruptor/RingBuffer;
     184: invokevirtual #43                 // Method com/lmax/disruptor/RingBuffer.getBufferSize:()I
     187: invokestatic  #44                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     190: aload_1
     191: invokevirtual #45                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
     194: invokevirtual #46                 // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
     197: aload_3
     198: invokeinterface #47,  5           // InterfaceMethod org/apache/logging/log4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
     203: aload_0
     204: getfield      #11                 // Field disruptor:Lcom/lmax/disruptor/dsl/Disruptor;
     207: invokevirtual #48                 // Method com/lmax/disruptor/dsl/Disruptor.start:()Lcom/lmax/disruptor/RingBuffer;
     210: pop
     211: aload_0
     212: invokespecial #49                 // Method org/apache/logging/log4j/core/AbstractLifeCycle.start:()V
     215: return

  public boolean stop(long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: getfield      #11                 // Field disruptor:Lcom/lmax/disruptor/dsl/Disruptor;
       4: astore        4
       6: aload         4
       8: ifnonnull     23
      11: getstatic     #12                 // Field LOGGER:Lorg/apache/logging/log4j/Logger;
      14: ldc           #50                 // String AsyncLoggerConfigDisruptor: disruptor for this configuration already shut down.
      16: invokeinterface #14,  2           // InterfaceMethod org/apache/logging/log4j/Logger.trace:(Ljava/lang/String;)V
      21: iconst_1
      22: ireturn
      23: aload_0
      24: invokevirtual #51                 // Method setStopping:()V
      27: getstatic     #12                 // Field LOGGER:Lorg/apache/logging/log4j/Logger;
      30: ldc           #52                 // String AsyncLoggerConfigDisruptor: shutting down disruptor for this configuration.
      32: invokeinterface #14,  2           // InterfaceMethod org/apache/logging/log4j/Logger.trace:(Ljava/lang/String;)V
      37: aload_0
      38: aconst_null
      39: putfield      #11                 // Field disruptor:Lcom/lmax/disruptor/dsl/Disruptor;
      42: iconst_0
      43: istore        5
      45: aload         4
      47: invokestatic  #53                 // Method hasBacklog:(Lcom/lmax/disruptor/dsl/Disruptor;)Z
      50: ifeq          78
      53: iload         5
      55: sipush        200
      58: if_icmpge     78
      61: ldc2_w        #55                 // long 50l
      64: invokestatic  #57                 // Method java/lang/Thread.sleep:(J)V
      67: goto          72
      70: astore        6
      72: iinc          5, 1
      75: goto          45
      78: aload         4
      80: lload_1
      81: aload_3
      82: invokevirtual #59                 // Method com/lmax/disruptor/dsl/Disruptor.shutdown:(JLjava/util/concurrent/TimeUnit;)V
      85: goto          110
      88: astore        5
      90: getstatic     #12                 // Field LOGGER:Lorg/apache/logging/log4j/Logger;
      93: ldc           #61                 // String AsyncLoggerConfigDisruptor: shutdown timed out after {} {}
      95: lload_1
      96: invokestatic  #62                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      99: aload_3
     100: invokeinterface #63,  4           // InterfaceMethod org/apache/logging/log4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
     105: aload         4
     107: invokevirtual #64                 // Method com/lmax/disruptor/dsl/Disruptor.halt:()V
     110: getstatic     #12                 // Field LOGGER:Lorg/apache/logging/log4j/Logger;
     113: ldc           #65                 // String AsyncLoggerConfigDisruptor: disruptor has been shut down.
     115: invokeinterface #14,  2           // InterfaceMethod org/apache/logging/log4j/Logger.trace:(Ljava/lang/String;)V
     120: aload_0
     121: getfield      #26                 // Field asyncQueueFullPolicy:Lorg/apache/logging/log4j/core/async/AsyncQueueFullPolicy;
     124: invokestatic  #66                 // Method org/apache/logging/log4j/core/async/DiscardingAsyncQueueFullPolicy.getDiscardCount:(Lorg/apache/logging/log4j/core/async/AsyncQueueFullPolicy;)J
     127: lconst_0
     128: lcmp
     129: ifle          156
     132: getstatic     #12                 // Field LOGGER:Lorg/apache/logging/log4j/Logger;
     135: ldc           #67                 // String AsyncLoggerConfigDisruptor: {} discarded {} events.
     137: aload_0
     138: getfield      #26                 // Field asyncQueueFullPolicy:Lorg/apache/logging/log4j/core/async/AsyncQueueFullPolicy;
     141: aload_0
     142: getfield      #26                 // Field asyncQueueFullPolicy:Lorg/apache/logging/log4j/core/async/AsyncQueueFullPolicy;
     145: invokestatic  #66                 // Method org/apache/logging/log4j/core/async/DiscardingAsyncQueueFullPolicy.getDiscardCount:(Lorg/apache/logging/log4j/core/async/AsyncQueueFullPolicy;)J
     148: invokestatic  #62                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     151: invokeinterface #68,  4           // InterfaceMethod org/apache/logging/log4j/Logger.trace:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
     156: aload_0
     157: invokevirtual #69                 // Method setStopped:()V
     160: iconst_1
     161: ireturn
    Exception table:
       from    to  target type
          61    67    70   Class java/lang/InterruptedException
          78    85    88   Class com/lmax/disruptor/TimeoutException

  private static boolean hasBacklog(com.lmax.disruptor.dsl.Disruptor<?>);
    Code:
       0: aload_0
       1: invokevirtual #42                 // Method com/lmax/disruptor/dsl/Disruptor.getRingBuffer:()Lcom/lmax/disruptor/RingBuffer;
       4: astore_1
       5: aload_1
       6: aload_1
       7: invokevirtual #43                 // Method com/lmax/disruptor/RingBuffer.getBufferSize:()I
      10: invokevirtual #70                 // Method com/lmax/disruptor/RingBuffer.hasAvailableCapacity:(I)Z
      13: ifne          20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: ireturn

  public org.apache.logging.log4j.core.async.EventRoute getEventRoute(org.apache.logging.log4j.Level);
    Code:
       0: aload_0
       1: invokespecial #71                 // Method remainingDisruptorCapacity:()I
       4: istore_2
       5: iload_2
       6: ifge          13
       9: getstatic     #72                 // Field org/apache/logging/log4j/core/async/EventRoute.DISCARD:Lorg/apache/logging/log4j/core/async/EventRoute;
      12: areturn
      13: aload_0
      14: getfield      #26                 // Field asyncQueueFullPolicy:Lorg/apache/logging/log4j/core/async/AsyncQueueFullPolicy;
      17: aload_0
      18: getfield      #1                  // Field backgroundThreadId:J
      21: aload_1
      22: invokeinterface #73,  4           // InterfaceMethod org/apache/logging/log4j/core/async/AsyncQueueFullPolicy.getRoute:(JLorg/apache/logging/log4j/Level;)Lorg/apache/logging/log4j/core/async/EventRoute;
      27: areturn

  private int remainingDisruptorCapacity();
    Code:
       0: aload_0
       1: getfield      #11                 // Field disruptor:Lcom/lmax/disruptor/dsl/Disruptor;
       4: astore_1
       5: aload_0
       6: aload_1
       7: invokespecial #74                 // Method hasLog4jBeenShutDown:(Lcom/lmax/disruptor/dsl/Disruptor;)Z
      10: ifeq          15
      13: iconst_m1
      14: ireturn
      15: aload_1
      16: invokevirtual #42                 // Method com/lmax/disruptor/dsl/Disruptor.getRingBuffer:()Lcom/lmax/disruptor/RingBuffer;
      19: invokevirtual #75                 // Method com/lmax/disruptor/RingBuffer.remainingCapacity:()J
      22: l2i
      23: ireturn

  private boolean hasLog4jBeenShutDown(com.lmax.disruptor.dsl.Disruptor<org.apache.logging.log4j.core.async.AsyncLoggerConfigDisruptor$Log4jEventWrapper>);
    Code:
       0: aload_1
       1: ifnonnull     16
       4: getstatic     #12                 // Field LOGGER:Lorg/apache/logging/log4j/Logger;
       7: ldc           #76                 // String Ignoring log event after log4j was shut down
       9: invokeinterface #77,  2           // InterfaceMethod org/apache/logging/log4j/Logger.warn:(Ljava/lang/String;)V
      14: iconst_1
      15: ireturn
      16: iconst_0
      17: ireturn

  public void enqueueEvent(org.apache.logging.log4j.core.LogEvent, org.apache.logging.log4j.core.async.AsyncLoggerConfig);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #78                 // Method prepareEvent:(Lorg/apache/logging/log4j/core/LogEvent;)Lorg/apache/logging/log4j/core/LogEvent;
       5: astore_3
       6: aload_0
       7: aload_3
       8: aload_2
       9: invokespecial #79                 // Method enqueue:(Lorg/apache/logging/log4j/core/LogEvent;Lorg/apache/logging/log4j/core/async/AsyncLoggerConfig;)V
      12: goto          88
      15: astore_3
      16: getstatic     #12                 // Field LOGGER:Lorg/apache/logging/log4j/Logger;
      19: ldc           #81                 // String Ignoring log event after log4j was shut down: {} [{}] {}
      21: aload_1
      22: invokeinterface #82,  1           // InterfaceMethod org/apache/logging/log4j/core/LogEvent.getLevel:()Lorg/apache/logging/log4j/Level;
      27: aload_1
      28: invokeinterface #83,  1           // InterfaceMethod org/apache/logging/log4j/core/LogEvent.getLoggerName:()Ljava/lang/String;
      33: new           #84                 // class java/lang/StringBuilder
      36: dup
      37: invokespecial #85                 // Method java/lang/StringBuilder."<init>":()V
      40: aload_1
      41: invokeinterface #86,  1           // InterfaceMethod org/apache/logging/log4j/core/LogEvent.getMessage:()Lorg/apache/logging/log4j/message/Message;
      46: invokeinterface #87,  1           // InterfaceMethod org/apache/logging/log4j/message/Message.getFormattedMessage:()Ljava/lang/String;
      51: invokevirtual #88                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      54: aload_1
      55: invokeinterface #89,  1           // InterfaceMethod org/apache/logging/log4j/core/LogEvent.getThrown:()Ljava/lang/Throwable;
      60: ifnonnull     68
      63: ldc           #90                 // String
      65: goto          77
      68: aload_1
      69: invokeinterface #89,  1           // InterfaceMethod org/apache/logging/log4j/core/LogEvent.getThrown:()Ljava/lang/Throwable;
      74: invokestatic  #91                 // Method org/apache/logging/log4j/core/util/Throwables.toStringList:(Ljava/lang/Throwable;)Ljava/util/List;
      77: invokevirtual #92                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      80: invokevirtual #93                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      83: invokeinterface #94,  5           // InterfaceMethod org/apache/logging/log4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
      88: return
    Exception table:
       from    to  target type
           0    12    15   Class java/lang/NullPointerException

  private org.apache.logging.log4j.core.LogEvent prepareEvent(org.apache.logging.log4j.core.LogEvent);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #95                 // Method ensureImmutable:(Lorg/apache/logging/log4j/core/LogEvent;)Lorg/apache/logging/log4j/core/LogEvent;
       5: astore_2
       6: aload_2
       7: invokeinterface #86,  1           // InterfaceMethod org/apache/logging/log4j/core/LogEvent.getMessage:()Lorg/apache/logging/log4j/message/Message;
      12: instanceof    #96                 // class org/apache/logging/log4j/message/ReusableMessage
      15: ifeq          71
      18: aload_2
      19: instanceof    #97                 // class org/apache/logging/log4j/core/impl/Log4jLogEvent
      22: ifeq          35
      25: aload_2
      26: checkcast     #97                 // class org/apache/logging/log4j/core/impl/Log4jLogEvent
      29: invokevirtual #98                 // Method org/apache/logging/log4j/core/impl/Log4jLogEvent.makeMessageImmutable:()V
      32: goto          81
      35: aload_2
      36: instanceof    #99                 // class org/apache/logging/log4j/core/impl/MutableLogEvent
      39: ifeq          63
      42: aload_0
      43: getfield      #29                 // Field translator:Lcom/lmax/disruptor/EventTranslatorTwoArg;
      46: getstatic     #27                 // Field MUTABLE_TRANSLATOR:Lcom/lmax/disruptor/EventTranslatorTwoArg;
      49: if_acmpeq     81
      52: aload_2
      53: checkcast     #99                 // class org/apache/logging/log4j/core/impl/MutableLogEvent
      56: invokevirtual #100                // Method org/apache/logging/log4j/core/impl/MutableLogEvent.createMemento:()Lorg/apache/logging/log4j/core/impl/Log4jLogEvent;
      59: astore_2
      60: goto          81
      63: aload_0
      64: aload_2
      65: invokespecial #101                // Method showWarningAboutCustomLogEventWithReusableMessage:(Lorg/apache/logging/log4j/core/LogEvent;)V
      68: goto          81
      71: aload_2
      72: invokeinterface #86,  1           // InterfaceMethod org/apache/logging/log4j/core/LogEvent.getMessage:()Lorg/apache/logging/log4j/message/Message;
      77: invokestatic  #102                // Method org/apache/logging/log4j/core/async/InternalAsyncUtil.makeMessageImmutable:(Lorg/apache/logging/log4j/message/Message;)Lorg/apache/logging/log4j/message/Message;
      80: pop
      81: aload_2
      82: areturn

  private void showWarningAboutCustomLogEventWithReusableMessage(org.apache.logging.log4j.core.LogEvent);
    Code:
       0: aload_0
       1: getfield      #103                // Field alreadyLoggedWarning:Z
       4: ifne          41
       7: getstatic     #12                 // Field LOGGER:Lorg/apache/logging/log4j/Logger;
      10: ldc           #104                // String Custom log event of type {} contains a mutable message of type {}. AsyncLoggerConfig does not know how to make an immutable copy of this message. This may result in ConcurrentModificationExceptions or incorrect log messages if the application modifies objects in the message while the background thread is writing it to the appenders.
      12: aload_1
      13: invokevirtual #45                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      16: invokevirtual #105                // Method java/lang/Class.getName:()Ljava/lang/String;
      19: aload_1
      20: invokeinterface #86,  1           // InterfaceMethod org/apache/logging/log4j/core/LogEvent.getMessage:()Lorg/apache/logging/log4j/message/Message;
      25: invokevirtual #45                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      28: invokevirtual #105                // Method java/lang/Class.getName:()Ljava/lang/String;
      31: invokeinterface #63,  4           // InterfaceMethod org/apache/logging/log4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      36: aload_0
      37: iconst_1
      38: putfield      #103                // Field alreadyLoggedWarning:Z
      41: return

  private void enqueue(org.apache.logging.log4j.core.LogEvent, org.apache.logging.log4j.core.async.AsyncLoggerConfig);
    Code:
       0: aload_0
       1: invokespecial #106                // Method synchronizeEnqueueWhenQueueFull:()Z
       4: ifeq          45
       7: aload_0
       8: getfield      #7                  // Field queueFullEnqueueLock:Ljava/lang/Object;
      11: dup
      12: astore_3
      13: monitorenter
      14: aload_0
      15: getfield      #11                 // Field disruptor:Lcom/lmax/disruptor/dsl/Disruptor;
      18: invokevirtual #42                 // Method com/lmax/disruptor/dsl/Disruptor.getRingBuffer:()Lcom/lmax/disruptor/RingBuffer;
      21: aload_0
      22: getfield      #29                 // Field translator:Lcom/lmax/disruptor/EventTranslatorTwoArg;
      25: aload_1
      26: aload_2
      27: invokevirtual #107                // Method com/lmax/disruptor/RingBuffer.publishEvent:(Lcom/lmax/disruptor/EventTranslatorTwoArg;Ljava/lang/Object;Ljava/lang/Object;)V
      30: aload_3
      31: monitorexit
      32: goto          42
      35: astore        4
      37: aload_3
      38: monitorexit
      39: aload         4
      41: athrow
      42: goto          61
      45: aload_0
      46: getfield      #11                 // Field disruptor:Lcom/lmax/disruptor/dsl/Disruptor;
      49: invokevirtual #42                 // Method com/lmax/disruptor/dsl/Disruptor.getRingBuffer:()Lcom/lmax/disruptor/RingBuffer;
      52: aload_0
      53: getfield      #29                 // Field translator:Lcom/lmax/disruptor/EventTranslatorTwoArg;
      56: aload_1
      57: aload_2
      58: invokevirtual #107                // Method com/lmax/disruptor/RingBuffer.publishEvent:(Lcom/lmax/disruptor/EventTranslatorTwoArg;Ljava/lang/Object;Ljava/lang/Object;)V
      61: return
    Exception table:
       from    to  target type
          14    32    35   any
          35    39    35   any

  private boolean synchronizeEnqueueWhenQueueFull();
    Code:
       0: getstatic     #108                // Field org/apache/logging/log4j/core/async/DisruptorUtil.ASYNC_CONFIG_SYNCHRONIZE_ENQUEUE_WHEN_QUEUE_FULL:Z
       3: ifeq          33
       6: aload_0
       7: getfield      #1                  // Field backgroundThreadId:J
      10: invokestatic  #109                // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      13: invokevirtual #110                // Method java/lang/Thread.getId:()J
      16: lcmp
      17: ifeq          33
      20: invokestatic  #109                // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      23: instanceof    #111                // class org/apache/logging/log4j/core/util/Log4jThread
      26: ifne          33
      29: iconst_1
      30: goto          34
      33: iconst_0
      34: ireturn

  public boolean tryEnqueue(org.apache.logging.log4j.core.LogEvent, org.apache.logging.log4j.core.async.AsyncLoggerConfig);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #78                 // Method prepareEvent:(Lorg/apache/logging/log4j/core/LogEvent;)Lorg/apache/logging/log4j/core/LogEvent;
       5: astore_3
       6: aload_0
       7: getfield      #11                 // Field disruptor:Lcom/lmax/disruptor/dsl/Disruptor;
      10: invokevirtual #42                 // Method com/lmax/disruptor/dsl/Disruptor.getRingBuffer:()Lcom/lmax/disruptor/RingBuffer;
      13: aload_0
      14: getfield      #29                 // Field translator:Lcom/lmax/disruptor/EventTranslatorTwoArg;
      17: aload_3
      18: aload_2
      19: invokevirtual #112                // Method com/lmax/disruptor/RingBuffer.tryPublishEvent:(Lcom/lmax/disruptor/EventTranslatorTwoArg;Ljava/lang/Object;Ljava/lang/Object;)Z
      22: ireturn

  private org.apache.logging.log4j.core.LogEvent ensureImmutable(org.apache.logging.log4j.core.LogEvent);
    Code:
       0: aload_1
       1: astore_2
       2: aload_1
       3: instanceof    #113                // class org/apache/logging/log4j/core/async/RingBufferLogEvent
       6: ifeq          17
       9: aload_1
      10: checkcast     #113                // class org/apache/logging/log4j/core/async/RingBufferLogEvent
      13: invokevirtual #114                // Method org/apache/logging/log4j/core/async/RingBufferLogEvent.createMemento:()Lorg/apache/logging/log4j/core/LogEvent;
      16: astore_2
      17: aload_2
      18: areturn

  public org.apache.logging.log4j.core.jmx.RingBufferAdmin createRingBufferAdmin(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #11                 // Field disruptor:Lcom/lmax/disruptor/dsl/Disruptor;
       4: invokevirtual #42                 // Method com/lmax/disruptor/dsl/Disruptor.getRingBuffer:()Lcom/lmax/disruptor/RingBuffer;
       7: aload_1
       8: aload_2
       9: invokestatic  #115                // Method org/apache/logging/log4j/core/jmx/RingBufferAdmin.forAsyncLoggerConfig:(Lcom/lmax/disruptor/RingBuffer;Ljava/lang/String;Ljava/lang/String;)Lorg/apache/logging/log4j/core/jmx/RingBufferAdmin;
      12: areturn

  private static void lambda$static$2(org.apache.logging.log4j.core.async.AsyncLoggerConfigDisruptor$Log4jEventWrapper, long, org.apache.logging.log4j.core.LogEvent, org.apache.logging.log4j.core.async.AsyncLoggerConfig);
    Code:
       0: aload_0
       1: invokestatic  #116                // Method org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor$Log4jEventWrapper.access$000:(Lorg/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor$Log4jEventWrapper;)Lorg/apache/logging/log4j/core/LogEvent;
       4: checkcast     #99                 // class org/apache/logging/log4j/core/impl/MutableLogEvent
       7: aload_3
       8: invokevirtual #117                // Method org/apache/logging/log4j/core/impl/MutableLogEvent.initFrom:(Lorg/apache/logging/log4j/core/LogEvent;)V
      11: aload_0
      12: aload         4
      14: invokestatic  #118                // Method org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor$Log4jEventWrapper.access$102:(Lorg/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor$Log4jEventWrapper;Lorg/apache/logging/log4j/core/async/AsyncLoggerConfig;)Lorg/apache/logging/log4j/core/async/AsyncLoggerConfig;
      17: pop
      18: return

  private static void lambda$static$1(org.apache.logging.log4j.core.async.AsyncLoggerConfigDisruptor$Log4jEventWrapper, long, org.apache.logging.log4j.core.LogEvent, org.apache.logging.log4j.core.async.AsyncLoggerConfig);
    Code:
       0: aload_0
       1: aload_3
       2: invokestatic  #119                // Method org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor$Log4jEventWrapper.access$002:(Lorg/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor$Log4jEventWrapper;Lorg/apache/logging/log4j/core/LogEvent;)Lorg/apache/logging/log4j/core/LogEvent;
       5: pop
       6: aload_0
       7: aload         4
       9: invokestatic  #118                // Method org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor$Log4jEventWrapper.access$102:(Lorg/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor$Log4jEventWrapper;Lorg/apache/logging/log4j/core/async/AsyncLoggerConfig;)Lorg/apache/logging/log4j/core/async/AsyncLoggerConfig;
      12: pop
      13: return

  private static org.apache.logging.log4j.core.async.AsyncLoggerConfigDisruptor$Log4jEventWrapper lambda$static$0();
    Code:
       0: new           #120                // class org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor$Log4jEventWrapper
       3: dup
       4: new           #99                 // class org/apache/logging/log4j/core/impl/MutableLogEvent
       7: dup
       8: invokespecial #121                // Method org/apache/logging/log4j/core/impl/MutableLogEvent."<init>":()V
      11: invokespecial #122                // Method org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor$Log4jEventWrapper."<init>":(Lorg/apache/logging/log4j/core/impl/MutableLogEvent;)V
      14: areturn

  static long access$202(org.apache.logging.log4j.core.async.AsyncLoggerConfigDisruptor, long);
    Code:
       0: aload_0
       1: lload_1
       2: dup2_x1
       3: putfield      #1                  // Field backgroundThreadId:J
       6: lreturn

  static {};
    Code:
       0: invokedynamic #123,  0            // InvokeDynamic #0:newInstance:()Lcom/lmax/disruptor/EventFactory;
       5: putstatic     #31                 // Field FACTORY:Lcom/lmax/disruptor/EventFactory;
       8: invokedynamic #124,  0            // InvokeDynamic #1:newInstance:()Lcom/lmax/disruptor/EventFactory;
      13: putstatic     #30                 // Field MUTABLE_FACTORY:Lcom/lmax/disruptor/EventFactory;
      16: invokedynamic #125,  0            // InvokeDynamic #2:translateTo:()Lcom/lmax/disruptor/EventTranslatorTwoArg;
      21: putstatic     #28                 // Field TRANSLATOR:Lcom/lmax/disruptor/EventTranslatorTwoArg;
      24: invokedynamic #126,  0            // InvokeDynamic #3:translateTo:()Lcom/lmax/disruptor/EventTranslatorTwoArg;
      29: putstatic     #27                 // Field MUTABLE_TRANSLATOR:Lcom/lmax/disruptor/EventTranslatorTwoArg;
      32: return
}
