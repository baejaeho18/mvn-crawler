Compiled from "MemoryMappedFileManager.java"
public class org.apache.logging.log4j.core.appender.MemoryMappedFileManager extends org.apache.logging.log4j.core.appender.OutputStreamManager {
  static final int DEFAULT_REGION_LENGTH;

  private static final int MAX_REMAP_COUNT;

  private static final org.apache.logging.log4j.core.appender.MemoryMappedFileManager$MemoryMappedFileManagerFactory FACTORY;

  private static final double NANOS_PER_MILLISEC;

  private final boolean immediateFlush;

  private final int regionLength;

  private final java.lang.String advertiseURI;

  private final java.io.RandomAccessFile randomAccessFile;

  private java.nio.MappedByteBuffer mappedBuffer;

  private long mappingOffset;

  protected org.apache.logging.log4j.core.appender.MemoryMappedFileManager(java.io.RandomAccessFile, java.lang.String, java.io.OutputStream, boolean, long, int, java.lang.String, org.apache.logging.log4j.core.Layout<? extends java.io.Serializable>, boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_3
       2: aload_2
       3: aload         9
       5: iload         10
       7: getstatic     #1                  // Field org/apache/logging/log4j/util/Constants.EMPTY_BYTE_ARRAY:[B
      10: invokestatic  #2                  // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;
      13: invokespecial #3                  // Method org/apache/logging/log4j/core/appender/OutputStreamManager."<init>":(Ljava/io/OutputStream;Ljava/lang/String;Lorg/apache/logging/log4j/core/Layout;ZLjava/nio/ByteBuffer;)V
      16: aload_0
      17: iload         4
      19: putfield      #4                  // Field immediateFlush:Z
      22: aload_0
      23: aload_1
      24: ldc           #5                  // String RandomAccessFile
      26: invokestatic  #6                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      29: checkcast     #7                  // class java/io/RandomAccessFile
      32: putfield      #8                  // Field randomAccessFile:Ljava/io/RandomAccessFile;
      35: aload_0
      36: iload         7
      38: putfield      #9                  // Field regionLength:I
      41: aload_0
      42: aload         8
      44: putfield      #10                 // Field advertiseURI:Ljava/lang/String;
      47: aload_0
      48: aload_0
      49: getfield      #8                  // Field randomAccessFile:Ljava/io/RandomAccessFile;
      52: invokevirtual #11                 // Method java/io/RandomAccessFile.getChannel:()Ljava/nio/channels/FileChannel;
      55: aload_0
      56: invokevirtual #12                 // Method getFileName:()Ljava/lang/String;
      59: lload         5
      61: iload         7
      63: invokestatic  #13                 // Method mmap:(Ljava/nio/channels/FileChannel;Ljava/lang/String;JI)Ljava/nio/MappedByteBuffer;
      66: putfield      #14                 // Field mappedBuffer:Ljava/nio/MappedByteBuffer;
      69: aload_0
      70: aload_0
      71: getfield      #14                 // Field mappedBuffer:Ljava/nio/MappedByteBuffer;
      74: putfield      #15                 // Field byteBuffer:Ljava/nio/ByteBuffer;
      77: aload_0
      78: lload         5
      80: putfield      #16                 // Field mappingOffset:J
      83: return

  public static org.apache.logging.log4j.core.appender.MemoryMappedFileManager getFileManager(java.lang.String, boolean, boolean, int, java.lang.String, org.apache.logging.log4j.core.Layout<? extends java.io.Serializable>);
    Code:
       0: ldc           #17                 // class org/apache/logging/log4j/core/appender/MemoryMappedFileManager
       2: aload_0
       3: new           #18                 // class org/apache/logging/log4j/core/appender/MemoryMappedFileManager$FactoryData
       6: dup
       7: iload_1
       8: iload_2
       9: iload_3
      10: aload         4
      12: aload         5
      14: invokespecial #19                 // Method org/apache/logging/log4j/core/appender/MemoryMappedFileManager$FactoryData."<init>":(ZZILjava/lang/String;Lorg/apache/logging/log4j/core/Layout;)V
      17: getstatic     #20                 // Field FACTORY:Lorg/apache/logging/log4j/core/appender/MemoryMappedFileManager$MemoryMappedFileManagerFactory;
      20: invokestatic  #21                 // Method getManager:(Ljava/lang/String;Ljava/lang/Object;Lorg/apache/logging/log4j/core/appender/ManagerFactory;)Lorg/apache/logging/log4j/core/appender/OutputStreamManager;
      23: invokestatic  #22                 // Method narrow:(Ljava/lang/Class;Lorg/apache/logging/log4j/core/appender/AbstractManager;)Lorg/apache/logging/log4j/core/appender/AbstractManager;
      26: checkcast     #17                 // class org/apache/logging/log4j/core/appender/MemoryMappedFileManager
      29: areturn

  public java.lang.Boolean isEndOfBatch();
    Code:
       0: getstatic     #23                 // Field java/lang/Boolean.FALSE:Ljava/lang/Boolean;
       3: areturn

  public void setEndOfBatch(boolean);
    Code:
       0: return

  protected synchronized void write(byte[], int, int, boolean);
    Code:
       0: iload_3
       1: aload_0
       2: getfield      #14                 // Field mappedBuffer:Ljava/nio/MappedByteBuffer;
       5: invokevirtual #24                 // Method java/nio/MappedByteBuffer.remaining:()I
       8: if_icmple     49
      11: aload_0
      12: getfield      #14                 // Field mappedBuffer:Ljava/nio/MappedByteBuffer;
      15: invokevirtual #24                 // Method java/nio/MappedByteBuffer.remaining:()I
      18: istore        5
      20: aload_0
      21: getfield      #14                 // Field mappedBuffer:Ljava/nio/MappedByteBuffer;
      24: aload_1
      25: iload_2
      26: iload         5
      28: invokevirtual #25                 // Method java/nio/MappedByteBuffer.put:([BII)Ljava/nio/ByteBuffer;
      31: pop
      32: iload_2
      33: iload         5
      35: iadd
      36: istore_2
      37: iload_3
      38: iload         5
      40: isub
      41: istore_3
      42: aload_0
      43: invokespecial #26                 // Method remap:()V
      46: goto          0
      49: aload_0
      50: getfield      #14                 // Field mappedBuffer:Ljava/nio/MappedByteBuffer;
      53: aload_1
      54: iload_2
      55: iload_3
      56: invokevirtual #25                 // Method java/nio/MappedByteBuffer.put:([BII)Ljava/nio/ByteBuffer;
      59: pop
      60: return

  private synchronized void remap();
    Code:
       0: aload_0
       1: getfield      #16                 // Field mappingOffset:J
       4: aload_0
       5: getfield      #14                 // Field mappedBuffer:Ljava/nio/MappedByteBuffer;
       8: invokevirtual #27                 // Method java/nio/MappedByteBuffer.position:()I
      11: i2l
      12: ladd
      13: lstore_1
      14: aload_0
      15: getfield      #14                 // Field mappedBuffer:Ljava/nio/MappedByteBuffer;
      18: invokevirtual #24                 // Method java/nio/MappedByteBuffer.remaining:()I
      21: aload_0
      22: getfield      #9                  // Field regionLength:I
      25: iadd
      26: istore_3
      27: aload_0
      28: getfield      #14                 // Field mappedBuffer:Ljava/nio/MappedByteBuffer;
      31: invokestatic  #28                 // Method unsafeUnmap:(Ljava/nio/MappedByteBuffer;)V
      34: aload_0
      35: getfield      #8                  // Field randomAccessFile:Ljava/io/RandomAccessFile;
      38: invokevirtual #29                 // Method java/io/RandomAccessFile.length:()J
      41: aload_0
      42: getfield      #9                  // Field regionLength:I
      45: i2l
      46: ladd
      47: lstore        4
      49: getstatic     #30                 // Field LOGGER:Lorg/apache/logging/log4j/Logger;
      52: ldc           #31                 // String {} {} extending {} by {} bytes to {}
      54: aload_0
      55: invokevirtual #32                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      58: invokevirtual #33                 // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
      61: aload_0
      62: invokevirtual #34                 // Method getName:()Ljava/lang/String;
      65: aload_0
      66: invokevirtual #12                 // Method getFileName:()Ljava/lang/String;
      69: aload_0
      70: getfield      #9                  // Field regionLength:I
      73: invokestatic  #35                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      76: lload         4
      78: invokestatic  #36                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      81: invokeinterface #37,  7           // InterfaceMethod org/apache/logging/log4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
      86: invokestatic  #38                 // Method java/lang/System.nanoTime:()J
      89: lstore        6
      91: aload_0
      92: getfield      #8                  // Field randomAccessFile:Ljava/io/RandomAccessFile;
      95: lload         4
      97: invokevirtual #39                 // Method java/io/RandomAccessFile.setLength:(J)V
     100: invokestatic  #38                 // Method java/lang/System.nanoTime:()J
     103: lload         6
     105: lsub
     106: l2d
     107: ldc2_w        #40                 // double 1000000.0d
     110: ddiv
     111: d2f
     112: fstore        8
     114: getstatic     #30                 // Field LOGGER:Lorg/apache/logging/log4j/Logger;
     117: ldc           #42                 // String {} {} extended {} OK in {} millis
     119: aload_0
     120: invokevirtual #32                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
     123: invokevirtual #33                 // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
     126: aload_0
     127: invokevirtual #34                 // Method getName:()Ljava/lang/String;
     130: aload_0
     131: invokevirtual #12                 // Method getFileName:()Ljava/lang/String;
     134: fload         8
     136: invokestatic  #43                 // Method java/lang/Float.valueOf:(F)Ljava/lang/Float;
     139: invokeinterface #44,  6           // InterfaceMethod org/apache/logging/log4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
     144: aload_0
     145: aload_0
     146: getfield      #8                  // Field randomAccessFile:Ljava/io/RandomAccessFile;
     149: invokevirtual #11                 // Method java/io/RandomAccessFile.getChannel:()Ljava/nio/channels/FileChannel;
     152: aload_0
     153: invokevirtual #12                 // Method getFileName:()Ljava/lang/String;
     156: lload_1
     157: iload_3
     158: invokestatic  #13                 // Method mmap:(Ljava/nio/channels/FileChannel;Ljava/lang/String;JI)Ljava/nio/MappedByteBuffer;
     161: putfield      #14                 // Field mappedBuffer:Ljava/nio/MappedByteBuffer;
     164: aload_0
     165: aload_0
     166: getfield      #14                 // Field mappedBuffer:Ljava/nio/MappedByteBuffer;
     169: putfield      #15                 // Field byteBuffer:Ljava/nio/ByteBuffer;
     172: aload_0
     173: lload_1
     174: putfield      #16                 // Field mappingOffset:J
     177: goto          190
     180: astore        4
     182: aload_0
     183: ldc           #46                 // String Unable to remap
     185: aload         4
     187: invokevirtual #47                 // Method logError:(Ljava/lang/String;Ljava/lang/Throwable;)V
     190: return
    Exception table:
       from    to  target type
          27   177   180   Class java/lang/Exception

  public synchronized void flush();
    Code:
       0: aload_0
       1: getfield      #14                 // Field mappedBuffer:Ljava/nio/MappedByteBuffer;
       4: invokevirtual #48                 // Method java/nio/MappedByteBuffer.force:()Ljava/nio/MappedByteBuffer;
       7: pop
       8: return

  public synchronized boolean closeOutputStream();
    Code:
       0: aload_0
       1: getfield      #14                 // Field mappedBuffer:Ljava/nio/MappedByteBuffer;
       4: invokevirtual #27                 // Method java/nio/MappedByteBuffer.position:()I
       7: i2l
       8: lstore_1
       9: aload_0
      10: getfield      #16                 // Field mappingOffset:J
      13: lload_1
      14: ladd
      15: lstore_3
      16: aload_0
      17: getfield      #14                 // Field mappedBuffer:Ljava/nio/MappedByteBuffer;
      20: invokestatic  #28                 // Method unsafeUnmap:(Ljava/nio/MappedByteBuffer;)V
      23: goto          36
      26: astore        5
      28: aload_0
      29: ldc           #49                 // String Unable to unmap MappedBuffer
      31: aload         5
      33: invokevirtual #47                 // Method logError:(Ljava/lang/String;Ljava/lang/Throwable;)V
      36: getstatic     #30                 // Field LOGGER:Lorg/apache/logging/log4j/Logger;
      39: ldc           #50                 // String MMapAppender closing. Setting {} length to {} (offset {} + position {})
      41: aload_0
      42: invokevirtual #12                 // Method getFileName:()Ljava/lang/String;
      45: lload_3
      46: invokestatic  #36                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      49: aload_0
      50: getfield      #16                 // Field mappingOffset:J
      53: invokestatic  #36                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      56: lload_1
      57: invokestatic  #36                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      60: invokeinterface #44,  6           // InterfaceMethod org/apache/logging/log4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
      65: aload_0
      66: getfield      #8                  // Field randomAccessFile:Ljava/io/RandomAccessFile;
      69: lload_3
      70: invokevirtual #39                 // Method java/io/RandomAccessFile.setLength:(J)V
      73: aload_0
      74: getfield      #8                  // Field randomAccessFile:Ljava/io/RandomAccessFile;
      77: invokevirtual #51                 // Method java/io/RandomAccessFile.close:()V
      80: iconst_1
      81: ireturn
      82: astore        5
      84: aload_0
      85: ldc           #53                 // String Unable to close MemoryMappedFile
      87: aload         5
      89: invokevirtual #47                 // Method logError:(Ljava/lang/String;Ljava/lang/Throwable;)V
      92: iconst_0
      93: ireturn
    Exception table:
       from    to  target type
          16    23    26   Class java/lang/Exception
          36    81    82   Class java/io/IOException

  public static java.nio.MappedByteBuffer mmap(java.nio.channels.FileChannel, java.lang.String, long, int) throws java.io.IOException;
    Code:
       0: iconst_1
       1: istore        5
       3: getstatic     #30                 // Field LOGGER:Lorg/apache/logging/log4j/Logger;
       6: ldc           #54                 // String MMapAppender remapping {} start={}, size={}
       8: aload_1
       9: lload_2
      10: invokestatic  #36                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      13: iload         4
      15: invokestatic  #35                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      18: invokeinterface #55,  5           // InterfaceMethod org/apache/logging/log4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
      23: invokestatic  #38                 // Method java/lang/System.nanoTime:()J
      26: lstore        6
      28: aload_0
      29: getstatic     #56                 // Field java/nio/channels/FileChannel$MapMode.READ_WRITE:Ljava/nio/channels/FileChannel$MapMode;
      32: lload_2
      33: iload         4
      35: i2l
      36: invokevirtual #57                 // Method java/nio/channels/FileChannel.map:(Ljava/nio/channels/FileChannel$MapMode;JJ)Ljava/nio/MappedByteBuffer;
      39: astore        8
      41: aload         8
      43: invokestatic  #58                 // Method java/nio/ByteOrder.nativeOrder:()Ljava/nio/ByteOrder;
      46: invokevirtual #59                 // Method java/nio/MappedByteBuffer.order:(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;
      49: pop
      50: invokestatic  #38                 // Method java/lang/System.nanoTime:()J
      53: lload         6
      55: lsub
      56: l2d
      57: ldc2_w        #40                 // double 1000000.0d
      60: ddiv
      61: d2f
      62: fstore        9
      64: getstatic     #30                 // Field LOGGER:Lorg/apache/logging/log4j/Logger;
      67: ldc           #60                 // String MMapAppender remapped {} OK in {} millis
      69: aload_1
      70: fload         9
      72: invokestatic  #43                 // Method java/lang/Float.valueOf:(F)Ljava/lang/Float;
      75: invokeinterface #61,  4           // InterfaceMethod org/apache/logging/log4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      80: aload         8
      82: areturn
      83: astore        6
      85: aload         6
      87: invokevirtual #62                 // Method java/io/IOException.getMessage:()Ljava/lang/String;
      90: ifnull        106
      93: aload         6
      95: invokevirtual #62                 // Method java/io/IOException.getMessage:()Ljava/lang/String;
      98: ldc           #63                 // String user-mapped section open
     100: invokevirtual #64                 // Method java/lang/String.endsWith:(Ljava/lang/String;)Z
     103: ifne          109
     106: aload         6
     108: athrow
     109: getstatic     #30                 // Field LOGGER:Lorg/apache/logging/log4j/Logger;
     112: ldc           #65                 // String Remap attempt {}/{} failed. Retrying...
     114: iload         5
     116: invokestatic  #35                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     119: bipush        10
     121: invokestatic  #35                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     124: aload         6
     126: invokeinterface #55,  5           // InterfaceMethod org/apache/logging/log4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
     131: iload         5
     133: bipush        10
     135: if_icmpge     144
     138: invokestatic  #66                 // Method java/lang/Thread.yield:()V
     141: goto          162
     144: lconst_1
     145: invokestatic  #67                 // Method java/lang/Thread.sleep:(J)V
     148: goto          162
     151: astore        7
     153: invokestatic  #69                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
     156: invokevirtual #70                 // Method java/lang/Thread.interrupt:()V
     159: aload         6
     161: athrow
     162: iinc          5, 1
     165: goto          3
    Exception table:
       from    to  target type
           3    82    83   Class java/io/IOException
         144   148   151   Class java/lang/InterruptedException

  private static void unsafeUnmap(java.nio.MappedByteBuffer) throws java.security.PrivilegedActionException;
    Code:
       0: getstatic     #30                 // Field LOGGER:Lorg/apache/logging/log4j/Logger;
       3: ldc           #71                 // String MMapAppender unmapping old buffer...
       5: invokeinterface #72,  2           // InterfaceMethod org/apache/logging/log4j/Logger.debug:(Ljava/lang/String;)V
      10: invokestatic  #38                 // Method java/lang/System.nanoTime:()J
      13: lstore_1
      14: aload_0
      15: invokedynamic #73,  0             // InvokeDynamic #0:run:(Ljava/nio/MappedByteBuffer;)Ljava/security/PrivilegedExceptionAction;
      20: invokestatic  #74                 // Method java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedExceptionAction;)Ljava/lang/Object;
      23: pop
      24: invokestatic  #38                 // Method java/lang/System.nanoTime:()J
      27: lload_1
      28: lsub
      29: l2d
      30: ldc2_w        #40                 // double 1000000.0d
      33: ddiv
      34: d2f
      35: fstore_3
      36: getstatic     #30                 // Field LOGGER:Lorg/apache/logging/log4j/Logger;
      39: ldc           #75                 // String MMapAppender unmapped buffer OK in {} millis
      41: fload_3
      42: invokestatic  #43                 // Method java/lang/Float.valueOf:(F)Ljava/lang/Float;
      45: invokeinterface #76,  3           // InterfaceMethod org/apache/logging/log4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;)V
      50: return

  public java.lang.String getFileName();
    Code:
       0: aload_0
       1: invokevirtual #34                 // Method getName:()Ljava/lang/String;
       4: areturn

  public int getRegionLength();
    Code:
       0: aload_0
       1: getfield      #9                  // Field regionLength:I
       4: ireturn

  public boolean isImmediateFlush();
    Code:
       0: aload_0
       1: getfield      #4                  // Field immediateFlush:Z
       4: ireturn

  public java.util.Map<java.lang.String, java.lang.String> getContentFormat();
    Code:
       0: new           #77                 // class java/util/HashMap
       3: dup
       4: aload_0
       5: invokespecial #78                 // Method org/apache/logging/log4j/core/appender/OutputStreamManager.getContentFormat:()Ljava/util/Map;
       8: invokespecial #79                 // Method java/util/HashMap."<init>":(Ljava/util/Map;)V
      11: astore_1
      12: aload_1
      13: ldc           #80                 // String fileURI
      15: aload_0
      16: getfield      #10                 // Field advertiseURI:Ljava/lang/String;
      19: invokeinterface #81,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      24: pop
      25: aload_1
      26: areturn

  protected void flushBuffer(java.nio.ByteBuffer);
    Code:
       0: return

  public java.nio.ByteBuffer getByteBuffer();
    Code:
       0: aload_0
       1: getfield      #14                 // Field mappedBuffer:Ljava/nio/MappedByteBuffer;
       4: areturn

  public java.nio.ByteBuffer drain(java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: invokespecial #26                 // Method remap:()V
       4: aload_0
       5: getfield      #14                 // Field mappedBuffer:Ljava/nio/MappedByteBuffer;
       8: areturn

  private static java.lang.Object lambda$unsafeUnmap$0(java.nio.MappedByteBuffer) throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokevirtual #32                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
       4: ldc           #82                 // String cleaner
       6: iconst_0
       7: anewarray     #83                 // class java/lang/Class
      10: invokevirtual #84                 // Method java/lang/Class.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
      13: astore_1
      14: aload_1
      15: iconst_1
      16: invokevirtual #85                 // Method java/lang/reflect/Method.setAccessible:(Z)V
      19: aload_1
      20: aload_0
      21: iconst_0
      22: anewarray     #86                 // class java/lang/Object
      25: invokevirtual #87                 // Method java/lang/reflect/Method.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;
      28: astore_2
      29: aload_2
      30: invokevirtual #32                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      33: ldc           #88                 // String clean
      35: iconst_0
      36: anewarray     #83                 // class java/lang/Class
      39: invokevirtual #84                 // Method java/lang/Class.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;
      42: astore_3
      43: aload_3
      44: aload_2
      45: iconst_0
      46: anewarray     #86                 // class java/lang/Object
      49: invokevirtual #87                 // Method java/lang/reflect/Method.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;
      52: pop
      53: aconst_null
      54: areturn

  static {};
    Code:
       0: new           #89                 // class org/apache/logging/log4j/core/appender/MemoryMappedFileManager$MemoryMappedFileManagerFactory
       3: dup
       4: aconst_null
       5: invokespecial #90                 // Method org/apache/logging/log4j/core/appender/MemoryMappedFileManager$MemoryMappedFileManagerFactory."<init>":(Lorg/apache/logging/log4j/core/appender/MemoryMappedFileManager$1;)V
       8: putstatic     #20                 // Field FACTORY:Lorg/apache/logging/log4j/core/appender/MemoryMappedFileManager$MemoryMappedFileManagerFactory;
      11: return
}
