Compiled from "NumberRange.java"
public final class org.apache.commons.lang.math.NumberRange extends org.apache.commons.lang.math.Range implements java.io.Serializable {
  private static final long serialVersionUID;

  private final java.lang.Number min;

  private final java.lang.Number max;

  private transient int hashCode;

  private transient java.lang.String toString;

  public org.apache.commons.lang.math.NumberRange(java.lang.Number);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/commons/lang/math/Range."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field hashCode:I
       9: aload_0
      10: aconst_null
      11: putfield      #3                  // Field toString:Ljava/lang/String;
      14: aload_1
      15: ifnonnull     28
      18: new           #4                  // class java/lang/IllegalArgumentException
      21: dup
      22: ldc           #5                  // String The number must not be null
      24: invokespecial #6                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      27: athrow
      28: aload_1
      29: instanceof    #7                  // class java/lang/Comparable
      32: ifne          45
      35: new           #4                  // class java/lang/IllegalArgumentException
      38: dup
      39: ldc           #8                  // String The number must implement Comparable
      41: invokespecial #6                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      44: athrow
      45: aload_1
      46: instanceof    #9                  // class java/lang/Double
      49: ifeq          72
      52: aload_1
      53: checkcast     #9                  // class java/lang/Double
      56: invokevirtual #10                 // Method java/lang/Double.isNaN:()Z
      59: ifeq          72
      62: new           #4                  // class java/lang/IllegalArgumentException
      65: dup
      66: ldc           #11                 // String The number must not be NaN
      68: invokespecial #6                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      71: athrow
      72: aload_1
      73: instanceof    #12                 // class java/lang/Float
      76: ifeq          99
      79: aload_1
      80: checkcast     #12                 // class java/lang/Float
      83: invokevirtual #13                 // Method java/lang/Float.isNaN:()Z
      86: ifeq          99
      89: new           #4                  // class java/lang/IllegalArgumentException
      92: dup
      93: ldc           #11                 // String The number must not be NaN
      95: invokespecial #6                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      98: athrow
      99: aload_0
     100: aload_1
     101: putfield      #14                 // Field min:Ljava/lang/Number;
     104: aload_0
     105: aload_1
     106: putfield      #15                 // Field max:Ljava/lang/Number;
     109: return

  public org.apache.commons.lang.math.NumberRange(java.lang.Number, java.lang.Number);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/commons/lang/math/Range."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field hashCode:I
       9: aload_0
      10: aconst_null
      11: putfield      #3                  // Field toString:Ljava/lang/String;
      14: aload_1
      15: ifnull        22
      18: aload_2
      19: ifnonnull     32
      22: new           #4                  // class java/lang/IllegalArgumentException
      25: dup
      26: ldc           #16                 // String The numbers must not be null
      28: invokespecial #6                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      31: athrow
      32: aload_1
      33: invokevirtual #17                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      36: aload_2
      37: invokevirtual #17                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      40: if_acmpeq     53
      43: new           #4                  // class java/lang/IllegalArgumentException
      46: dup
      47: ldc           #18                 // String The numbers must be of the same type
      49: invokespecial #6                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      52: athrow
      53: aload_1
      54: instanceof    #7                  // class java/lang/Comparable
      57: ifne          70
      60: new           #4                  // class java/lang/IllegalArgumentException
      63: dup
      64: ldc           #19                 // String The numbers must implement Comparable
      66: invokespecial #6                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      69: athrow
      70: aload_1
      71: instanceof    #9                  // class java/lang/Double
      74: ifeq          107
      77: aload_1
      78: checkcast     #9                  // class java/lang/Double
      81: invokevirtual #10                 // Method java/lang/Double.isNaN:()Z
      84: ifne          97
      87: aload_2
      88: checkcast     #9                  // class java/lang/Double
      91: invokevirtual #10                 // Method java/lang/Double.isNaN:()Z
      94: ifeq          144
      97: new           #4                  // class java/lang/IllegalArgumentException
     100: dup
     101: ldc           #11                 // String The number must not be NaN
     103: invokespecial #6                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     106: athrow
     107: aload_1
     108: instanceof    #12                 // class java/lang/Float
     111: ifeq          144
     114: aload_1
     115: checkcast     #12                 // class java/lang/Float
     118: invokevirtual #13                 // Method java/lang/Float.isNaN:()Z
     121: ifne          134
     124: aload_2
     125: checkcast     #12                 // class java/lang/Float
     128: invokevirtual #13                 // Method java/lang/Float.isNaN:()Z
     131: ifeq          144
     134: new           #4                  // class java/lang/IllegalArgumentException
     137: dup
     138: ldc           #11                 // String The number must not be NaN
     140: invokespecial #6                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     143: athrow
     144: aload_1
     145: checkcast     #7                  // class java/lang/Comparable
     148: aload_2
     149: invokeinterface #20,  2           // InterfaceMethod java/lang/Comparable.compareTo:(Ljava/lang/Object;)I
     154: istore_3
     155: iload_3
     156: ifne          172
     159: aload_0
     160: aload_1
     161: putfield      #14                 // Field min:Ljava/lang/Number;
     164: aload_0
     165: aload_1
     166: putfield      #15                 // Field max:Ljava/lang/Number;
     169: goto          199
     172: iload_3
     173: ifle          189
     176: aload_0
     177: aload_2
     178: putfield      #14                 // Field min:Ljava/lang/Number;
     181: aload_0
     182: aload_1
     183: putfield      #15                 // Field max:Ljava/lang/Number;
     186: goto          199
     189: aload_0
     190: aload_1
     191: putfield      #14                 // Field min:Ljava/lang/Number;
     194: aload_0
     195: aload_2
     196: putfield      #15                 // Field max:Ljava/lang/Number;
     199: return

  public java.lang.Number getMinimumNumber();
    Code:
       0: aload_0
       1: getfield      #14                 // Field min:Ljava/lang/Number;
       4: areturn

  public java.lang.Number getMaximumNumber();
    Code:
       0: aload_0
       1: getfield      #15                 // Field max:Ljava/lang/Number;
       4: areturn

  public boolean containsNumber(java.lang.Number);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: iconst_0
       5: ireturn
       6: aload_1
       7: invokevirtual #17                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      10: aload_0
      11: getfield      #14                 // Field min:Ljava/lang/Number;
      14: invokevirtual #17                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      17: if_acmpeq     30
      20: new           #4                  // class java/lang/IllegalArgumentException
      23: dup
      24: ldc           #21                 // String The number must be of the same type as the range numbers
      26: invokespecial #6                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      29: athrow
      30: aload_0
      31: getfield      #14                 // Field min:Ljava/lang/Number;
      34: checkcast     #7                  // class java/lang/Comparable
      37: aload_1
      38: invokeinterface #20,  2           // InterfaceMethod java/lang/Comparable.compareTo:(Ljava/lang/Object;)I
      43: istore_2
      44: aload_0
      45: getfield      #15                 // Field max:Ljava/lang/Number;
      48: checkcast     #7                  // class java/lang/Comparable
      51: aload_1
      52: invokeinterface #20,  2           // InterfaceMethod java/lang/Comparable.compareTo:(Ljava/lang/Object;)I
      57: istore_3
      58: iload_2
      59: ifgt          70
      62: iload_3
      63: iflt          70
      66: iconst_1
      67: goto          71
      70: iconst_0
      71: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: aload_0
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: instanceof    #22                 // class org/apache/commons/lang/math/NumberRange
      11: ifne          16
      14: iconst_0
      15: ireturn
      16: aload_1
      17: checkcast     #22                 // class org/apache/commons/lang/math/NumberRange
      20: astore_2
      21: aload_0
      22: getfield      #14                 // Field min:Ljava/lang/Number;
      25: aload_2
      26: getfield      #14                 // Field min:Ljava/lang/Number;
      29: invokevirtual #23                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      32: ifeq          53
      35: aload_0
      36: getfield      #15                 // Field max:Ljava/lang/Number;
      39: aload_2
      40: getfield      #15                 // Field max:Ljava/lang/Number;
      43: invokevirtual #23                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      46: ifeq          53
      49: iconst_1
      50: goto          54
      53: iconst_0
      54: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #2                  // Field hashCode:I
       4: ifne          70
       7: aload_0
       8: bipush        17
      10: putfield      #2                  // Field hashCode:I
      13: aload_0
      14: bipush        37
      16: aload_0
      17: getfield      #2                  // Field hashCode:I
      20: imul
      21: aload_0
      22: invokevirtual #17                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      25: invokevirtual #24                 // Method java/lang/Object.hashCode:()I
      28: iadd
      29: putfield      #2                  // Field hashCode:I
      32: aload_0
      33: bipush        37
      35: aload_0
      36: getfield      #2                  // Field hashCode:I
      39: imul
      40: aload_0
      41: getfield      #14                 // Field min:Ljava/lang/Number;
      44: invokevirtual #24                 // Method java/lang/Object.hashCode:()I
      47: iadd
      48: putfield      #2                  // Field hashCode:I
      51: aload_0
      52: bipush        37
      54: aload_0
      55: getfield      #2                  // Field hashCode:I
      58: imul
      59: aload_0
      60: getfield      #15                 // Field max:Ljava/lang/Number;
      63: invokevirtual #24                 // Method java/lang/Object.hashCode:()I
      66: iadd
      67: putfield      #2                  // Field hashCode:I
      70: aload_0
      71: getfield      #2                  // Field hashCode:I
      74: ireturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #3                  // Field toString:Ljava/lang/String;
       4: ifnonnull     64
       7: new           #25                 // class org/apache/commons/lang/text/StrBuilder
      10: dup
      11: bipush        32
      13: invokespecial #26                 // Method org/apache/commons/lang/text/StrBuilder."<init>":(I)V
      16: astore_1
      17: aload_1
      18: ldc           #27                 // String Range[
      20: invokevirtual #28                 // Method org/apache/commons/lang/text/StrBuilder.append:(Ljava/lang/String;)Lorg/apache/commons/lang/text/StrBuilder;
      23: pop
      24: aload_1
      25: aload_0
      26: getfield      #14                 // Field min:Ljava/lang/Number;
      29: invokevirtual #29                 // Method org/apache/commons/lang/text/StrBuilder.append:(Ljava/lang/Object;)Lorg/apache/commons/lang/text/StrBuilder;
      32: pop
      33: aload_1
      34: bipush        44
      36: invokevirtual #30                 // Method org/apache/commons/lang/text/StrBuilder.append:(C)Lorg/apache/commons/lang/text/StrBuilder;
      39: pop
      40: aload_1
      41: aload_0
      42: getfield      #15                 // Field max:Ljava/lang/Number;
      45: invokevirtual #29                 // Method org/apache/commons/lang/text/StrBuilder.append:(Ljava/lang/Object;)Lorg/apache/commons/lang/text/StrBuilder;
      48: pop
      49: aload_1
      50: bipush        93
      52: invokevirtual #30                 // Method org/apache/commons/lang/text/StrBuilder.append:(C)Lorg/apache/commons/lang/text/StrBuilder;
      55: pop
      56: aload_0
      57: aload_1
      58: invokevirtual #31                 // Method org/apache/commons/lang/text/StrBuilder.toString:()Ljava/lang/String;
      61: putfield      #3                  // Field toString:Ljava/lang/String;
      64: aload_0
      65: getfield      #3                  // Field toString:Ljava/lang/String;
      68: areturn
}
