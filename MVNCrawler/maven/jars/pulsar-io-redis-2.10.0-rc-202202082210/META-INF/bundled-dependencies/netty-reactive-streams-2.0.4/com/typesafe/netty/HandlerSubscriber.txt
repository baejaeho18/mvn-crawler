Compiled from "HandlerSubscriber.java"
public class com.typesafe.netty.HandlerSubscriber<T> extends io.netty.channel.ChannelDuplexHandler implements org.reactivestreams.Subscriber<T> {
  static final long DEFAULT_LOW_WATERMARK;

  static final long DEFAULT_HIGH_WATERMARK;

  private final io.netty.util.concurrent.EventExecutor executor;

  private final long demandLowWatermark;

  private final long demandHighWatermark;

  private final java.util.concurrent.atomic.AtomicBoolean hasSubscription;

  private volatile org.reactivestreams.Subscription subscription;

  private volatile io.netty.channel.ChannelHandlerContext ctx;

  private com.typesafe.netty.HandlerSubscriber$State state;

  private long outstandingDemand;

  private io.netty.channel.ChannelFuture lastWriteFuture;

  public com.typesafe.netty.HandlerSubscriber(io.netty.util.concurrent.EventExecutor, long, long);
    Code:
       0: aload_0
       1: invokespecial #6                  // Method io/netty/channel/ChannelDuplexHandler."<init>":()V
       4: aload_0
       5: new           #7                  // class java/util/concurrent/atomic/AtomicBoolean
       8: dup
       9: invokespecial #8                  // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
      12: putfield      #9                  // Field hasSubscription:Ljava/util/concurrent/atomic/AtomicBoolean;
      15: aload_0
      16: getstatic     #10                 // Field com/typesafe/netty/HandlerSubscriber$State.NO_SUBSCRIPTION_OR_CONTEXT:Lcom/typesafe/netty/HandlerSubscriber$State;
      19: putfield      #2                  // Field state:Lcom/typesafe/netty/HandlerSubscriber$State;
      22: aload_0
      23: lconst_0
      24: putfield      #4                  // Field outstandingDemand:J
      27: aload_0
      28: aload_1
      29: putfield      #11                 // Field executor:Lio/netty/util/concurrent/EventExecutor;
      32: aload_0
      33: lload_2
      34: putfield      #12                 // Field demandLowWatermark:J
      37: aload_0
      38: lload         4
      40: putfield      #13                 // Field demandHighWatermark:J
      43: return

  public com.typesafe.netty.HandlerSubscriber(io.netty.util.concurrent.EventExecutor);
    Code:
       0: aload_0
       1: aload_1
       2: ldc2_w        #15                 // long 4l
       5: ldc2_w        #17                 // long 16l
       8: invokespecial #19                 // Method "<init>":(Lio/netty/util/concurrent/EventExecutor;JJ)V
      11: return

  protected void error(java.lang.Throwable);
    Code:
       0: aload_0
       1: invokespecial #20                 // Method doClose:()V
       4: return

  protected void complete();
    Code:
       0: aload_0
       1: invokespecial #20                 // Method doClose:()V
       4: return

  public void handlerAdded(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #21                 // Method verifyRegisteredWithRightExecutor:(Lio/netty/channel/ChannelHandlerContext;)V
       5: getstatic     #22                 // Field com/typesafe/netty/HandlerSubscriber$5.$SwitchMap$com$typesafe$netty$HandlerSubscriber$State:[I
       8: aload_0
       9: getfield      #2                  // Field state:Lcom/typesafe/netty/HandlerSubscriber$State;
      12: invokevirtual #23                 // Method com/typesafe/netty/HandlerSubscriber$State.ordinal:()I
      15: iaload
      16: tableswitch   { // 1 to 3
                     1: 44
                     2: 59
                     3: 71
               default: 88
          }
      44: aload_0
      45: aload_1
      46: putfield      #1                  // Field ctx:Lio/netty/channel/ChannelHandlerContext;
      49: aload_0
      50: getstatic     #24                 // Field com/typesafe/netty/HandlerSubscriber$State.NO_SUBSCRIPTION:Lcom/typesafe/netty/HandlerSubscriber$State;
      53: putfield      #2                  // Field state:Lcom/typesafe/netty/HandlerSubscriber$State;
      56: goto          118
      59: aload_0
      60: aload_1
      61: putfield      #1                  // Field ctx:Lio/netty/channel/ChannelHandlerContext;
      64: aload_0
      65: invokespecial #25                 // Method maybeStart:()V
      68: goto          118
      71: aload_0
      72: getstatic     #26                 // Field com/typesafe/netty/HandlerSubscriber$State.COMPLETE:Lcom/typesafe/netty/HandlerSubscriber$State;
      75: putfield      #2                  // Field state:Lcom/typesafe/netty/HandlerSubscriber$State;
      78: aload_1
      79: invokeinterface #27,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.close:()Lio/netty/channel/ChannelFuture;
      84: pop
      85: goto          118
      88: new           #28                 // class java/lang/IllegalStateException
      91: dup
      92: new           #29                 // class java/lang/StringBuilder
      95: dup
      96: invokespecial #30                 // Method java/lang/StringBuilder."<init>":()V
      99: ldc           #31                 // String This handler must only be added to a pipeline once
     101: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     104: aload_0
     105: getfield      #2                  // Field state:Lcom/typesafe/netty/HandlerSubscriber$State;
     108: invokevirtual #33                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     111: invokevirtual #34                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     114: invokespecial #35                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     117: athrow
     118: return

  public void channelRegistered(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #21                 // Method verifyRegisteredWithRightExecutor:(Lio/netty/channel/ChannelHandlerContext;)V
       5: aload_1
       6: invokeinterface #36,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.fireChannelRegistered:()Lio/netty/channel/ChannelHandlerContext;
      11: pop
      12: return

  private void verifyRegisteredWithRightExecutor(io.netty.channel.ChannelHandlerContext);
    Code:
       0: aload_1
       1: invokeinterface #37,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.channel:()Lio/netty/channel/Channel;
       6: invokeinterface #38,  1           // InterfaceMethod io/netty/channel/Channel.isRegistered:()Z
      11: ifeq          36
      14: aload_0
      15: getfield      #11                 // Field executor:Lio/netty/util/concurrent/EventExecutor;
      18: invokeinterface #39,  1           // InterfaceMethod io/netty/util/concurrent/EventExecutor.inEventLoop:()Z
      23: ifne          36
      26: new           #40                 // class java/lang/IllegalArgumentException
      29: dup
      30: ldc           #41                 // String Channel handler MUST be registered with the same EventExecutor that it is created with.
      32: invokespecial #42                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      35: athrow
      36: return

  public void channelWritabilityChanged(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokespecial #3                  // Method maybeRequestMore:()V
       4: aload_1
       5: invokeinterface #43,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.fireChannelWritabilityChanged:()Lio/netty/channel/ChannelHandlerContext;
      10: pop
      11: return

  public void channelActive(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #2                  // Field state:Lcom/typesafe/netty/HandlerSubscriber$State;
       4: getstatic     #44                 // Field com/typesafe/netty/HandlerSubscriber$State.INACTIVE:Lcom/typesafe/netty/HandlerSubscriber$State;
       7: if_acmpne     21
      10: aload_0
      11: getstatic     #45                 // Field com/typesafe/netty/HandlerSubscriber$State.RUNNING:Lcom/typesafe/netty/HandlerSubscriber$State;
      14: putfield      #2                  // Field state:Lcom/typesafe/netty/HandlerSubscriber$State;
      17: aload_0
      18: invokespecial #3                  // Method maybeRequestMore:()V
      21: aload_1
      22: invokeinterface #46,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.fireChannelActive:()Lio/netty/channel/ChannelHandlerContext;
      27: pop
      28: return

  public void channelInactive(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokespecial #47                 // Method cancel:()V
       4: aload_1
       5: invokeinterface #48,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.fireChannelInactive:()Lio/netty/channel/ChannelHandlerContext;
      10: pop
      11: return

  public void handlerRemoved(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokespecial #47                 // Method cancel:()V
       4: return

  public void exceptionCaught(io.netty.channel.ChannelHandlerContext, java.lang.Throwable) throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokespecial #47                 // Method cancel:()V
       4: aload_1
       5: aload_2
       6: invokeinterface #49,  2           // InterfaceMethod io/netty/channel/ChannelHandlerContext.fireExceptionCaught:(Ljava/lang/Throwable;)Lio/netty/channel/ChannelHandlerContext;
      11: pop
      12: return

  private void cancel();
    Code:
       0: getstatic     #22                 // Field com/typesafe/netty/HandlerSubscriber$5.$SwitchMap$com$typesafe$netty$HandlerSubscriber$State:[I
       3: aload_0
       4: getfield      #2                  // Field state:Lcom/typesafe/netty/HandlerSubscriber$State;
       7: invokevirtual #23                 // Method com/typesafe/netty/HandlerSubscriber$State.ordinal:()I
      10: iaload
      11: tableswitch   { // 4 to 6
                     4: 36
                     5: 46
                     6: 46
               default: 62
          }
      36: aload_0
      37: getstatic     #50                 // Field com/typesafe/netty/HandlerSubscriber$State.CANCELLED:Lcom/typesafe/netty/HandlerSubscriber$State;
      40: putfield      #2                  // Field state:Lcom/typesafe/netty/HandlerSubscriber$State;
      43: goto          62
      46: aload_0
      47: getfield      #51                 // Field subscription:Lorg/reactivestreams/Subscription;
      50: invokeinterface #52,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      55: aload_0
      56: getstatic     #50                 // Field com/typesafe/netty/HandlerSubscriber$State.CANCELLED:Lcom/typesafe/netty/HandlerSubscriber$State;
      59: putfield      #2                  // Field state:Lcom/typesafe/netty/HandlerSubscriber$State;
      62: return

  public void onSubscribe(org.reactivestreams.Subscription);
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #53                 // class java/lang/NullPointerException
       7: dup
       8: ldc           #54                 // String Null subscription
      10: invokespecial #55                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_0
      15: getfield      #9                  // Field hasSubscription:Ljava/util/concurrent/atomic/AtomicBoolean;
      18: iconst_0
      19: iconst_1
      20: invokevirtual #56                 // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
      23: ifne          35
      26: aload_1
      27: invokeinterface #52,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      32: goto          57
      35: aload_0
      36: aload_1
      37: putfield      #51                 // Field subscription:Lorg/reactivestreams/Subscription;
      40: aload_0
      41: getfield      #11                 // Field executor:Lio/netty/util/concurrent/EventExecutor;
      44: new           #57                 // class com/typesafe/netty/HandlerSubscriber$1
      47: dup
      48: aload_0
      49: invokespecial #58                 // Method com/typesafe/netty/HandlerSubscriber$1."<init>":(Lcom/typesafe/netty/HandlerSubscriber;)V
      52: invokeinterface #59,  2           // InterfaceMethod io/netty/util/concurrent/EventExecutor.execute:(Ljava/lang/Runnable;)V
      57: return

  private void provideSubscription();
    Code:
       0: getstatic     #22                 // Field com/typesafe/netty/HandlerSubscriber$5.$SwitchMap$com$typesafe$netty$HandlerSubscriber$State:[I
       3: aload_0
       4: getfield      #2                  // Field state:Lcom/typesafe/netty/HandlerSubscriber$State;
       7: invokevirtual #23                 // Method com/typesafe/netty/HandlerSubscriber$State.ordinal:()I
      10: iaload
      11: lookupswitch  { // 3
                     1: 44
                     4: 54
                     7: 61
               default: 70
          }
      44: aload_0
      45: getstatic     #60                 // Field com/typesafe/netty/HandlerSubscriber$State.NO_CONTEXT:Lcom/typesafe/netty/HandlerSubscriber$State;
      48: putfield      #2                  // Field state:Lcom/typesafe/netty/HandlerSubscriber$State;
      51: goto          70
      54: aload_0
      55: invokespecial #25                 // Method maybeStart:()V
      58: goto          70
      61: aload_0
      62: getfield      #51                 // Field subscription:Lorg/reactivestreams/Subscription;
      65: invokeinterface #52,  1           // InterfaceMethod org/reactivestreams/Subscription.cancel:()V
      70: return

  private void maybeStart();
    Code:
       0: aload_0
       1: getfield      #1                  // Field ctx:Lio/netty/channel/ChannelHandlerContext;
       4: invokeinterface #37,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.channel:()Lio/netty/channel/Channel;
       9: invokeinterface #61,  1           // InterfaceMethod io/netty/channel/Channel.isActive:()Z
      14: ifeq          31
      17: aload_0
      18: getstatic     #45                 // Field com/typesafe/netty/HandlerSubscriber$State.RUNNING:Lcom/typesafe/netty/HandlerSubscriber$State;
      21: putfield      #2                  // Field state:Lcom/typesafe/netty/HandlerSubscriber$State;
      24: aload_0
      25: invokespecial #3                  // Method maybeRequestMore:()V
      28: goto          38
      31: aload_0
      32: getstatic     #44                 // Field com/typesafe/netty/HandlerSubscriber$State.INACTIVE:Lcom/typesafe/netty/HandlerSubscriber$State;
      35: putfield      #2                  // Field state:Lcom/typesafe/netty/HandlerSubscriber$State;
      38: return

  public void onNext(T);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #1                  // Field ctx:Lio/netty/channel/ChannelHandlerContext;
       5: aload_1
       6: invokeinterface #62,  2           // InterfaceMethod io/netty/channel/ChannelHandlerContext.writeAndFlush:(Ljava/lang/Object;)Lio/netty/channel/ChannelFuture;
      11: putfield      #63                 // Field lastWriteFuture:Lio/netty/channel/ChannelFuture;
      14: aload_0
      15: getfield      #63                 // Field lastWriteFuture:Lio/netty/channel/ChannelFuture;
      18: new           #64                 // class com/typesafe/netty/HandlerSubscriber$2
      21: dup
      22: aload_0
      23: invokespecial #65                 // Method com/typesafe/netty/HandlerSubscriber$2."<init>":(Lcom/typesafe/netty/HandlerSubscriber;)V
      26: invokeinterface #66,  2           // InterfaceMethod io/netty/channel/ChannelFuture.addListener:(Lio/netty/util/concurrent/GenericFutureListener;)Lio/netty/channel/ChannelFuture;
      31: pop
      32: return

  public void onError(java.lang.Throwable);
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #53                 // class java/lang/NullPointerException
       7: dup
       8: ldc           #67                 // String Null error published
      10: invokespecial #55                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_0
      15: aload_1
      16: invokevirtual #68                 // Method error:(Ljava/lang/Throwable;)V
      19: return

  public void onComplete();
    Code:
       0: aload_0
       1: getfield      #63                 // Field lastWriteFuture:Lio/netty/channel/ChannelFuture;
       4: ifnonnull     14
       7: aload_0
       8: invokevirtual #69                 // Method complete:()V
      11: goto          32
      14: aload_0
      15: getfield      #63                 // Field lastWriteFuture:Lio/netty/channel/ChannelFuture;
      18: new           #70                 // class com/typesafe/netty/HandlerSubscriber$3
      21: dup
      22: aload_0
      23: invokespecial #71                 // Method com/typesafe/netty/HandlerSubscriber$3."<init>":(Lcom/typesafe/netty/HandlerSubscriber;)V
      26: invokeinterface #66,  2           // InterfaceMethod io/netty/channel/ChannelFuture.addListener:(Lio/netty/util/concurrent/GenericFutureListener;)Lio/netty/channel/ChannelFuture;
      31: pop
      32: return

  private void doClose();
    Code:
       0: aload_0
       1: getfield      #11                 // Field executor:Lio/netty/util/concurrent/EventExecutor;
       4: new           #72                 // class com/typesafe/netty/HandlerSubscriber$4
       7: dup
       8: aload_0
       9: invokespecial #73                 // Method com/typesafe/netty/HandlerSubscriber$4."<init>":(Lcom/typesafe/netty/HandlerSubscriber;)V
      12: invokeinterface #59,  2           // InterfaceMethod io/netty/util/concurrent/EventExecutor.execute:(Ljava/lang/Runnable;)V
      17: return

  private void maybeRequestMore();
    Code:
       0: aload_0
       1: getfield      #4                  // Field outstandingDemand:J
       4: aload_0
       5: getfield      #12                 // Field demandLowWatermark:J
       8: lcmp
       9: ifgt          57
      12: aload_0
      13: getfield      #1                  // Field ctx:Lio/netty/channel/ChannelHandlerContext;
      16: invokeinterface #37,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.channel:()Lio/netty/channel/Channel;
      21: invokeinterface #74,  1           // InterfaceMethod io/netty/channel/Channel.isWritable:()Z
      26: ifeq          57
      29: aload_0
      30: getfield      #13                 // Field demandHighWatermark:J
      33: aload_0
      34: getfield      #4                  // Field outstandingDemand:J
      37: lsub
      38: lstore_1
      39: aload_0
      40: aload_0
      41: getfield      #13                 // Field demandHighWatermark:J
      44: putfield      #4                  // Field outstandingDemand:J
      47: aload_0
      48: getfield      #51                 // Field subscription:Lorg/reactivestreams/Subscription;
      51: lload_1
      52: invokeinterface #75,  3           // InterfaceMethod org/reactivestreams/Subscription.request:(J)V
      57: return

  static void access$000(com.typesafe.netty.HandlerSubscriber);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method provideSubscription:()V
       4: return

  static long access$110(com.typesafe.netty.HandlerSubscriber);
    Code:
       0: aload_0
       1: dup
       2: getfield      #4                  // Field outstandingDemand:J
       5: dup2_x1
       6: lconst_1
       7: lsub
       8: putfield      #4                  // Field outstandingDemand:J
      11: lreturn

  static void access$200(com.typesafe.netty.HandlerSubscriber);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method maybeRequestMore:()V
       4: return

  static com.typesafe.netty.HandlerSubscriber$State access$300(com.typesafe.netty.HandlerSubscriber);
    Code:
       0: aload_0
       1: getfield      #2                  // Field state:Lcom/typesafe/netty/HandlerSubscriber$State;
       4: areturn

  static io.netty.channel.ChannelHandlerContext access$400(com.typesafe.netty.HandlerSubscriber);
    Code:
       0: aload_0
       1: getfield      #1                  // Field ctx:Lio/netty/channel/ChannelHandlerContext;
       4: areturn

  static com.typesafe.netty.HandlerSubscriber$State access$302(com.typesafe.netty.HandlerSubscriber, com.typesafe.netty.HandlerSubscriber$State);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #2                  // Field state:Lcom/typesafe/netty/HandlerSubscriber$State;
       6: areturn
}
