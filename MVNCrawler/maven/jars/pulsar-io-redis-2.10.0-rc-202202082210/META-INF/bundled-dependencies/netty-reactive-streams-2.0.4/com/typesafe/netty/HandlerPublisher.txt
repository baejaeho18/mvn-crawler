Compiled from "HandlerPublisher.java"
public class com.typesafe.netty.HandlerPublisher<T> extends io.netty.channel.ChannelDuplexHandler implements org.reactivestreams.Publisher<T> {
  private final io.netty.util.concurrent.EventExecutor executor;

  private final io.netty.util.internal.TypeParameterMatcher matcher;

  private final java.util.Queue<java.lang.Object> buffer;

  private final java.util.concurrent.atomic.AtomicBoolean hasSubscriber;

  private com.typesafe.netty.HandlerPublisher$State state;

  private volatile org.reactivestreams.Subscriber<? super T> subscriber;

  private io.netty.channel.ChannelHandlerContext ctx;

  private long outstandingDemand;

  private java.lang.Throwable noSubscriberError;

  private static final java.lang.Object COMPLETE;

  public com.typesafe.netty.HandlerPublisher(io.netty.util.concurrent.EventExecutor, java.lang.Class<? extends T>);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method io/netty/channel/ChannelDuplexHandler."<init>":()V
       4: aload_0
       5: new           #6                  // class java/util/LinkedList
       8: dup
       9: invokespecial #7                  // Method java/util/LinkedList."<init>":()V
      12: putfield      #8                  // Field buffer:Ljava/util/Queue;
      15: aload_0
      16: new           #9                  // class java/util/concurrent/atomic/AtomicBoolean
      19: dup
      20: invokespecial #10                 // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
      23: putfield      #11                 // Field hasSubscriber:Ljava/util/concurrent/atomic/AtomicBoolean;
      26: aload_0
      27: getstatic     #12                 // Field com/typesafe/netty/HandlerPublisher$State.NO_SUBSCRIBER_OR_CONTEXT:Lcom/typesafe/netty/HandlerPublisher$State;
      30: putfield      #13                 // Field state:Lcom/typesafe/netty/HandlerPublisher$State;
      33: aload_0
      34: lconst_0
      35: putfield      #14                 // Field outstandingDemand:J
      38: aload_0
      39: aload_1
      40: putfield      #2                  // Field executor:Lio/netty/util/concurrent/EventExecutor;
      43: aload_0
      44: aload_2
      45: invokestatic  #15                 // Method io/netty/util/internal/TypeParameterMatcher.get:(Ljava/lang/Class;)Lio/netty/util/internal/TypeParameterMatcher;
      48: putfield      #16                 // Field matcher:Lio/netty/util/internal/TypeParameterMatcher;
      51: return

  protected boolean acceptInboundMessage(java.lang.Object) throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #16                 // Field matcher:Lio/netty/util/internal/TypeParameterMatcher;
       4: aload_1
       5: invokevirtual #17                 // Method io/netty/util/internal/TypeParameterMatcher.match:(Ljava/lang/Object;)Z
       8: ireturn

  protected void cancelled();
    Code:
       0: aload_0
       1: getfield      #18                 // Field ctx:Lio/netty/channel/ChannelHandlerContext;
       4: invokeinterface #19,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.close:()Lio/netty/channel/ChannelFuture;
       9: pop
      10: return

  protected void requestDemand();
    Code:
       0: aload_0
       1: getfield      #18                 // Field ctx:Lio/netty/channel/ChannelHandlerContext;
       4: invokeinterface #20,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.read:()Lio/netty/channel/ChannelHandlerContext;
       9: pop
      10: return

  public void subscribe(org.reactivestreams.Subscriber<? super T>);
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #21                 // class java/lang/NullPointerException
       7: dup
       8: ldc           #22                 // String Null subscriber
      10: invokespecial #23                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_0
      15: getfield      #11                 // Field hasSubscriber:Ljava/util/concurrent/atomic/AtomicBoolean;
      18: iconst_0
      19: iconst_1
      20: invokevirtual #24                 // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
      23: ifne          58
      26: aload_1
      27: new           #25                 // class com/typesafe/netty/HandlerPublisher$1
      30: dup
      31: aload_0
      32: invokespecial #26                 // Method com/typesafe/netty/HandlerPublisher$1."<init>":(Lcom/typesafe/netty/HandlerPublisher;)V
      35: invokeinterface #27,  2           // InterfaceMethod org/reactivestreams/Subscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      40: aload_1
      41: new           #28                 // class java/lang/IllegalStateException
      44: dup
      45: ldc           #29                 // String This publisher only supports one subscriber
      47: invokespecial #30                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      50: invokeinterface #31,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      55: goto          76
      58: aload_0
      59: getfield      #2                  // Field executor:Lio/netty/util/concurrent/EventExecutor;
      62: new           #32                 // class com/typesafe/netty/HandlerPublisher$2
      65: dup
      66: aload_0
      67: aload_1
      68: invokespecial #33                 // Method com/typesafe/netty/HandlerPublisher$2."<init>":(Lcom/typesafe/netty/HandlerPublisher;Lorg/reactivestreams/Subscriber;)V
      71: invokeinterface #34,  2           // InterfaceMethod io/netty/util/concurrent/EventExecutor.execute:(Ljava/lang/Runnable;)V
      76: return

  private void provideSubscriber(org.reactivestreams.Subscriber<? super T>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #35                 // Field subscriber:Lorg/reactivestreams/Subscriber;
       5: getstatic     #36                 // Field com/typesafe/netty/HandlerPublisher$4.$SwitchMap$com$typesafe$netty$HandlerPublisher$State:[I
       8: aload_0
       9: getfield      #13                 // Field state:Lcom/typesafe/netty/HandlerPublisher$State;
      12: invokevirtual #37                 // Method com/typesafe/netty/HandlerPublisher$State.ordinal:()I
      15: iaload
      16: tableswitch   { // 1 to 4
                     1: 48
                     2: 58
                     3: 105
                     4: 123
               default: 159
          }
      48: aload_0
      49: getstatic     #38                 // Field com/typesafe/netty/HandlerPublisher$State.NO_CONTEXT:Lcom/typesafe/netty/HandlerPublisher$State;
      52: putfield      #13                 // Field state:Lcom/typesafe/netty/HandlerPublisher$State;
      55: goto          159
      58: aload_0
      59: getfield      #8                  // Field buffer:Ljava/util/Queue;
      62: invokeinterface #39,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
      67: ifeq          80
      70: aload_0
      71: getstatic     #40                 // Field com/typesafe/netty/HandlerPublisher$State.IDLE:Lcom/typesafe/netty/HandlerPublisher$State;
      74: putfield      #13                 // Field state:Lcom/typesafe/netty/HandlerPublisher$State;
      77: goto          87
      80: aload_0
      81: getstatic     #41                 // Field com/typesafe/netty/HandlerPublisher$State.BUFFERING:Lcom/typesafe/netty/HandlerPublisher$State;
      84: putfield      #13                 // Field state:Lcom/typesafe/netty/HandlerPublisher$State;
      87: aload_1
      88: new           #42                 // class com/typesafe/netty/HandlerPublisher$ChannelSubscription
      91: dup
      92: aload_0
      93: aconst_null
      94: invokespecial #43                 // Method com/typesafe/netty/HandlerPublisher$ChannelSubscription."<init>":(Lcom/typesafe/netty/HandlerPublisher;Lcom/typesafe/netty/HandlerPublisher$1;)V
      97: invokeinterface #27,  2           // InterfaceMethod org/reactivestreams/Subscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
     102: goto          159
     105: aload_1
     106: new           #42                 // class com/typesafe/netty/HandlerPublisher$ChannelSubscription
     109: dup
     110: aload_0
     111: aconst_null
     112: invokespecial #43                 // Method com/typesafe/netty/HandlerPublisher$ChannelSubscription."<init>":(Lcom/typesafe/netty/HandlerPublisher;Lcom/typesafe/netty/HandlerPublisher$1;)V
     115: invokeinterface #27,  2           // InterfaceMethod org/reactivestreams/Subscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
     120: goto          159
     123: aload_0
     124: invokespecial #44                 // Method cleanup:()V
     127: aload_0
     128: getstatic     #45                 // Field com/typesafe/netty/HandlerPublisher$State.DONE:Lcom/typesafe/netty/HandlerPublisher$State;
     131: putfield      #13                 // Field state:Lcom/typesafe/netty/HandlerPublisher$State;
     134: aload_1
     135: new           #42                 // class com/typesafe/netty/HandlerPublisher$ChannelSubscription
     138: dup
     139: aload_0
     140: aconst_null
     141: invokespecial #43                 // Method com/typesafe/netty/HandlerPublisher$ChannelSubscription."<init>":(Lcom/typesafe/netty/HandlerPublisher;Lcom/typesafe/netty/HandlerPublisher$1;)V
     144: invokeinterface #27,  2           // InterfaceMethod org/reactivestreams/Subscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
     149: aload_1
     150: aload_0
     151: getfield      #46                 // Field noSubscriberError:Ljava/lang/Throwable;
     154: invokeinterface #31,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
     159: return

  public void handlerAdded(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception;
    Code:
       0: aload_1
       1: invokeinterface #47,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.channel:()Lio/netty/channel/Channel;
       6: invokeinterface #48,  1           // InterfaceMethod io/netty/channel/Channel.isRegistered:()Z
      11: ifeq          19
      14: aload_0
      15: aload_1
      16: invokespecial #49                 // Method provideChannelContext:(Lio/netty/channel/ChannelHandlerContext;)V
      19: return

  public void channelRegistered(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #49                 // Method provideChannelContext:(Lio/netty/channel/ChannelHandlerContext;)V
       5: aload_1
       6: invokeinterface #50,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.fireChannelRegistered:()Lio/netty/channel/ChannelHandlerContext;
      11: pop
      12: return

  private void provideChannelContext(io.netty.channel.ChannelHandlerContext);
    Code:
       0: getstatic     #36                 // Field com/typesafe/netty/HandlerPublisher$4.$SwitchMap$com$typesafe$netty$HandlerPublisher$State:[I
       3: aload_0
       4: getfield      #13                 // Field state:Lcom/typesafe/netty/HandlerPublisher$State;
       7: invokevirtual #37                 // Method com/typesafe/netty/HandlerPublisher$State.ordinal:()I
      10: iaload
      11: lookupswitch  { // 2
                     1: 36
                     5: 56
               default: 94
          }
      36: aload_0
      37: aload_1
      38: invokespecial #51                 // Method verifyRegisteredWithRightExecutor:(Lio/netty/channel/ChannelHandlerContext;)V
      41: aload_0
      42: aload_1
      43: putfield      #18                 // Field ctx:Lio/netty/channel/ChannelHandlerContext;
      46: aload_0
      47: getstatic     #52                 // Field com/typesafe/netty/HandlerPublisher$State.NO_SUBSCRIBER:Lcom/typesafe/netty/HandlerPublisher$State;
      50: putfield      #13                 // Field state:Lcom/typesafe/netty/HandlerPublisher$State;
      53: goto          94
      56: aload_0
      57: aload_1
      58: invokespecial #51                 // Method verifyRegisteredWithRightExecutor:(Lio/netty/channel/ChannelHandlerContext;)V
      61: aload_0
      62: aload_1
      63: putfield      #18                 // Field ctx:Lio/netty/channel/ChannelHandlerContext;
      66: aload_0
      67: getstatic     #40                 // Field com/typesafe/netty/HandlerPublisher$State.IDLE:Lcom/typesafe/netty/HandlerPublisher$State;
      70: putfield      #13                 // Field state:Lcom/typesafe/netty/HandlerPublisher$State;
      73: aload_0
      74: getfield      #35                 // Field subscriber:Lorg/reactivestreams/Subscriber;
      77: new           #42                 // class com/typesafe/netty/HandlerPublisher$ChannelSubscription
      80: dup
      81: aload_0
      82: aconst_null
      83: invokespecial #43                 // Method com/typesafe/netty/HandlerPublisher$ChannelSubscription."<init>":(Lcom/typesafe/netty/HandlerPublisher;Lcom/typesafe/netty/HandlerPublisher$1;)V
      86: invokeinterface #27,  2           // InterfaceMethod org/reactivestreams/Subscriber.onSubscribe:(Lorg/reactivestreams/Subscription;)V
      91: goto          94
      94: return

  private void verifyRegisteredWithRightExecutor(io.netty.channel.ChannelHandlerContext);
    Code:
       0: aload_0
       1: getfield      #2                  // Field executor:Lio/netty/util/concurrent/EventExecutor;
       4: invokeinterface #53,  1           // InterfaceMethod io/netty/util/concurrent/EventExecutor.inEventLoop:()Z
       9: ifne          22
      12: new           #54                 // class java/lang/IllegalArgumentException
      15: dup
      16: ldc           #55                 // String Channel handler MUST be registered with the same EventExecutor that it is created with.
      18: invokespecial #56                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      21: athrow
      22: return

  public void channelActive(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #13                 // Field state:Lcom/typesafe/netty/HandlerPublisher$State;
       4: getstatic     #57                 // Field com/typesafe/netty/HandlerPublisher$State.DEMANDING:Lcom/typesafe/netty/HandlerPublisher$State;
       7: if_acmpne     14
      10: aload_0
      11: invokevirtual #58                 // Method requestDemand:()V
      14: aload_1
      15: invokeinterface #59,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.fireChannelActive:()Lio/netty/channel/ChannelHandlerContext;
      20: pop
      21: return

  private void receivedDemand(long);
    Code:
       0: getstatic     #36                 // Field com/typesafe/netty/HandlerPublisher$4.$SwitchMap$com$typesafe$netty$HandlerPublisher$State:[I
       3: aload_0
       4: getfield      #13                 // Field state:Lcom/typesafe/netty/HandlerPublisher$State;
       7: invokevirtual #37                 // Method com/typesafe/netty/HandlerPublisher$State.ordinal:()I
      10: iaload
      11: tableswitch   { // 3 to 8
                     3: 48
                     4: 94
                     5: 94
                     6: 48
                     7: 63
                     8: 72
               default: 94
          }
      48: aload_0
      49: lload_1
      50: invokespecial #60                 // Method addDemand:(J)Z
      53: ifeq          94
      56: aload_0
      57: invokespecial #61                 // Method flushBuffer:()V
      60: goto          94
      63: aload_0
      64: lload_1
      65: invokespecial #60                 // Method addDemand:(J)Z
      68: pop
      69: goto          94
      72: aload_0
      73: lload_1
      74: invokespecial #60                 // Method addDemand:(J)Z
      77: ifeq          94
      80: aload_0
      81: getstatic     #57                 // Field com/typesafe/netty/HandlerPublisher$State.DEMANDING:Lcom/typesafe/netty/HandlerPublisher$State;
      84: putfield      #13                 // Field state:Lcom/typesafe/netty/HandlerPublisher$State;
      87: aload_0
      88: invokevirtual #58                 // Method requestDemand:()V
      91: goto          94
      94: return

  private boolean addDemand(long);
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: ifgt          12
       6: aload_0
       7: invokespecial #62                 // Method illegalDemand:()V
      10: iconst_0
      11: ireturn
      12: aload_0
      13: getfield      #14                 // Field outstandingDemand:J
      16: ldc2_w        #64                 // long 9223372036854775807l
      19: lcmp
      20: ifge          49
      23: aload_0
      24: dup
      25: getfield      #14                 // Field outstandingDemand:J
      28: lload_1
      29: ladd
      30: putfield      #14                 // Field outstandingDemand:J
      33: aload_0
      34: getfield      #14                 // Field outstandingDemand:J
      37: lconst_0
      38: lcmp
      39: ifge          49
      42: aload_0
      43: ldc2_w        #64                 // long 9223372036854775807l
      46: putfield      #14                 // Field outstandingDemand:J
      49: iconst_1
      50: ireturn

  private void illegalDemand();
    Code:
       0: aload_0
       1: invokespecial #44                 // Method cleanup:()V
       4: aload_0
       5: getfield      #35                 // Field subscriber:Lorg/reactivestreams/Subscriber;
       8: new           #54                 // class java/lang/IllegalArgumentException
      11: dup
      12: ldc           #66                 // String Request for 0 or negative elements in violation of Section 3.9 of the Reactive Streams specification
      14: invokespecial #56                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      17: invokeinterface #31,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      22: aload_0
      23: getfield      #18                 // Field ctx:Lio/netty/channel/ChannelHandlerContext;
      26: invokeinterface #19,  1           // InterfaceMethod io/netty/channel/ChannelHandlerContext.close:()Lio/netty/channel/ChannelFuture;
      31: pop
      32: aload_0
      33: getstatic     #45                 // Field com/typesafe/netty/HandlerPublisher$State.DONE:Lcom/typesafe/netty/HandlerPublisher$State;
      36: putfield      #13                 // Field state:Lcom/typesafe/netty/HandlerPublisher$State;
      39: return

  private void flushBuffer();
    Code:
       0: aload_0
       1: getfield      #8                  // Field buffer:Ljava/util/Queue;
       4: invokeinterface #39,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
       9: ifne          48
      12: aload_0
      13: getfield      #14                 // Field outstandingDemand:J
      16: lconst_0
      17: lcmp
      18: ifgt          32
      21: aload_0
      22: getfield      #14                 // Field outstandingDemand:J
      25: ldc2_w        #64                 // long 9223372036854775807l
      28: lcmp
      29: ifne          48
      32: aload_0
      33: aload_0
      34: getfield      #8                  // Field buffer:Ljava/util/Queue;
      37: invokeinterface #67,  1           // InterfaceMethod java/util/Queue.remove:()Ljava/lang/Object;
      42: invokespecial #68                 // Method publishMessage:(Ljava/lang/Object;)V
      45: goto          0
      48: aload_0
      49: getfield      #8                  // Field buffer:Ljava/util/Queue;
      52: invokeinterface #39,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
      57: ifeq          110
      60: aload_0
      61: getfield      #14                 // Field outstandingDemand:J
      64: lconst_0
      65: lcmp
      66: ifle          93
      69: aload_0
      70: getfield      #13                 // Field state:Lcom/typesafe/netty/HandlerPublisher$State;
      73: getstatic     #41                 // Field com/typesafe/netty/HandlerPublisher$State.BUFFERING:Lcom/typesafe/netty/HandlerPublisher$State;
      76: if_acmpne     86
      79: aload_0
      80: getstatic     #57                 // Field com/typesafe/netty/HandlerPublisher$State.DEMANDING:Lcom/typesafe/netty/HandlerPublisher$State;
      83: putfield      #13                 // Field state:Lcom/typesafe/netty/HandlerPublisher$State;
      86: aload_0
      87: invokevirtual #58                 // Method requestDemand:()V
      90: goto          110
      93: aload_0
      94: getfield      #13                 // Field state:Lcom/typesafe/netty/HandlerPublisher$State;
      97: getstatic     #41                 // Field com/typesafe/netty/HandlerPublisher$State.BUFFERING:Lcom/typesafe/netty/HandlerPublisher$State;
     100: if_acmpne     110
     103: aload_0
     104: getstatic     #40                 // Field com/typesafe/netty/HandlerPublisher$State.IDLE:Lcom/typesafe/netty/HandlerPublisher$State;
     107: putfield      #13                 // Field state:Lcom/typesafe/netty/HandlerPublisher$State;
     110: return

  private void receivedCancel();
    Code:
       0: getstatic     #36                 // Field com/typesafe/netty/HandlerPublisher$4.$SwitchMap$com$typesafe$netty$HandlerPublisher$State:[I
       3: aload_0
       4: getfield      #13                 // Field state:Lcom/typesafe/netty/HandlerPublisher$State;
       7: invokevirtual #37                 // Method com/typesafe/netty/HandlerPublisher$State.ordinal:()I
      10: iaload
      11: tableswitch   { // 3 to 8
                     3: 52
                     4: 59
                     5: 59
                     6: 48
                     7: 48
                     8: 48
               default: 59
          }
      48: aload_0
      49: invokevirtual #69                 // Method cancelled:()V
      52: aload_0
      53: getstatic     #45                 // Field com/typesafe/netty/HandlerPublisher$State.DONE:Lcom/typesafe/netty/HandlerPublisher$State;
      56: putfield      #13                 // Field state:Lcom/typesafe/netty/HandlerPublisher$State;
      59: aload_0
      60: invokespecial #44                 // Method cleanup:()V
      63: aload_0
      64: aconst_null
      65: putfield      #35                 // Field subscriber:Lorg/reactivestreams/Subscriber;
      68: return

  public void channelRead(io.netty.channel.ChannelHandlerContext, java.lang.Object) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_2
       2: invokevirtual #70                 // Method acceptInboundMessage:(Ljava/lang/Object;)Z
       5: ifeq          132
       8: getstatic     #36                 // Field com/typesafe/netty/HandlerPublisher$4.$SwitchMap$com$typesafe$netty$HandlerPublisher$State:[I
      11: aload_0
      12: getfield      #13                 // Field state:Lcom/typesafe/netty/HandlerPublisher$State;
      15: invokevirtual #37                 // Method com/typesafe/netty/HandlerPublisher$State.ordinal:()I
      18: iaload
      19: tableswitch   { // 1 to 9
                     1: 119
                     2: 89
                     3: 111
                     4: 129
                     5: 119
                     6: 89
                     7: 103
                     8: 68
                     9: 111
               default: 129
          }
      68: aload_0
      69: getfield      #8                  // Field buffer:Ljava/util/Queue;
      72: aload_2
      73: invokeinterface #71,  2           // InterfaceMethod java/util/Queue.add:(Ljava/lang/Object;)Z
      78: pop
      79: aload_0
      80: getstatic     #41                 // Field com/typesafe/netty/HandlerPublisher$State.BUFFERING:Lcom/typesafe/netty/HandlerPublisher$State;
      83: putfield      #13                 // Field state:Lcom/typesafe/netty/HandlerPublisher$State;
      86: goto          129
      89: aload_0
      90: getfield      #8                  // Field buffer:Ljava/util/Queue;
      93: aload_2
      94: invokeinterface #71,  2           // InterfaceMethod java/util/Queue.add:(Ljava/lang/Object;)Z
      99: pop
     100: goto          129
     103: aload_0
     104: aload_2
     105: invokespecial #68                 // Method publishMessage:(Ljava/lang/Object;)V
     108: goto          129
     111: aload_2
     112: invokestatic  #72                 // Method io/netty/util/ReferenceCountUtil.release:(Ljava/lang/Object;)Z
     115: pop
     116: goto          129
     119: new           #28                 // class java/lang/IllegalStateException
     122: dup
     123: ldc           #73                 // String Message received before added to the channel context
     125: invokespecial #30                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     128: athrow
     129: goto          140
     132: aload_1
     133: aload_2
     134: invokeinterface #74,  2           // InterfaceMethod io/netty/channel/ChannelHandlerContext.fireChannelRead:(Ljava/lang/Object;)Lio/netty/channel/ChannelHandlerContext;
     139: pop
     140: return

  private void publishMessage(java.lang.Object);
    Code:
       0: getstatic     #75                 // Field COMPLETE:Ljava/lang/Object;
       3: aload_1
       4: invokevirtual #76                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
       7: ifeq          29
      10: aload_0
      11: getfield      #35                 // Field subscriber:Lorg/reactivestreams/Subscriber;
      14: invokeinterface #77,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      19: aload_0
      20: getstatic     #45                 // Field com/typesafe/netty/HandlerPublisher$State.DONE:Lcom/typesafe/netty/HandlerPublisher$State;
      23: putfield      #13                 // Field state:Lcom/typesafe/netty/HandlerPublisher$State;
      26: goto          110
      29: aload_1
      30: astore_2
      31: aload_0
      32: getfield      #35                 // Field subscriber:Lorg/reactivestreams/Subscriber;
      35: aload_2
      36: invokeinterface #78,  2           // InterfaceMethod org/reactivestreams/Subscriber.onNext:(Ljava/lang/Object;)V
      41: aload_0
      42: getfield      #14                 // Field outstandingDemand:J
      45: ldc2_w        #64                 // long 9223372036854775807l
      48: lcmp
      49: ifge          110
      52: aload_0
      53: dup
      54: getfield      #14                 // Field outstandingDemand:J
      57: lconst_1
      58: lsub
      59: putfield      #14                 // Field outstandingDemand:J
      62: aload_0
      63: getfield      #14                 // Field outstandingDemand:J
      66: lconst_0
      67: lcmp
      68: ifne          110
      71: aload_0
      72: getfield      #13                 // Field state:Lcom/typesafe/netty/HandlerPublisher$State;
      75: getstatic     #79                 // Field com/typesafe/netty/HandlerPublisher$State.DRAINING:Lcom/typesafe/netty/HandlerPublisher$State;
      78: if_acmpeq     110
      81: aload_0
      82: getfield      #8                  // Field buffer:Ljava/util/Queue;
      85: invokeinterface #39,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
      90: ifeq          103
      93: aload_0
      94: getstatic     #40                 // Field com/typesafe/netty/HandlerPublisher$State.IDLE:Lcom/typesafe/netty/HandlerPublisher$State;
      97: putfield      #13                 // Field state:Lcom/typesafe/netty/HandlerPublisher$State;
     100: goto          110
     103: aload_0
     104: getstatic     #41                 // Field com/typesafe/netty/HandlerPublisher$State.BUFFERING:Lcom/typesafe/netty/HandlerPublisher$State;
     107: putfield      #13                 // Field state:Lcom/typesafe/netty/HandlerPublisher$State;
     110: return

  public void channelReadComplete(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #13                 // Field state:Lcom/typesafe/netty/HandlerPublisher$State;
       4: getstatic     #57                 // Field com/typesafe/netty/HandlerPublisher$State.DEMANDING:Lcom/typesafe/netty/HandlerPublisher$State;
       7: if_acmpne     14
      10: aload_0
      11: invokevirtual #58                 // Method requestDemand:()V
      14: return

  public void channelInactive(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokespecial #80                 // Method complete:()V
       4: return

  public void handlerRemoved(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokespecial #80                 // Method complete:()V
       4: return

  private void complete();
    Code:
       0: getstatic     #36                 // Field com/typesafe/netty/HandlerPublisher$4.$SwitchMap$com$typesafe$netty$HandlerPublisher$State:[I
       3: aload_0
       4: getfield      #13                 // Field state:Lcom/typesafe/netty/HandlerPublisher$State;
       7: invokevirtual #37                 // Method com/typesafe/netty/HandlerPublisher$State.ordinal:()I
      10: iaload
      11: tableswitch   { // 2 to 8
                     2: 52
                     3: 94
                     4: 94
                     5: 94
                     6: 52
                     7: 75
                     8: 75
               default: 94
          }
      52: aload_0
      53: getfield      #8                  // Field buffer:Ljava/util/Queue;
      56: getstatic     #75                 // Field COMPLETE:Ljava/lang/Object;
      59: invokeinterface #71,  2           // InterfaceMethod java/util/Queue.add:(Ljava/lang/Object;)Z
      64: pop
      65: aload_0
      66: getstatic     #79                 // Field com/typesafe/netty/HandlerPublisher$State.DRAINING:Lcom/typesafe/netty/HandlerPublisher$State;
      69: putfield      #13                 // Field state:Lcom/typesafe/netty/HandlerPublisher$State;
      72: goto          94
      75: aload_0
      76: getfield      #35                 // Field subscriber:Lorg/reactivestreams/Subscriber;
      79: invokeinterface #77,  1           // InterfaceMethod org/reactivestreams/Subscriber.onComplete:()V
      84: aload_0
      85: getstatic     #45                 // Field com/typesafe/netty/HandlerPublisher$State.DONE:Lcom/typesafe/netty/HandlerPublisher$State;
      88: putfield      #13                 // Field state:Lcom/typesafe/netty/HandlerPublisher$State;
      91: goto          94
      94: return

  public void exceptionCaught(io.netty.channel.ChannelHandlerContext, java.lang.Throwable) throws java.lang.Exception;
    Code:
       0: getstatic     #36                 // Field com/typesafe/netty/HandlerPublisher$4.$SwitchMap$com$typesafe$netty$HandlerPublisher$State:[I
       3: aload_0
       4: getfield      #13                 // Field state:Lcom/typesafe/netty/HandlerPublisher$State;
       7: invokevirtual #37                 // Method com/typesafe/netty/HandlerPublisher$State.ordinal:()I
      10: iaload
      11: tableswitch   { // 2 to 8
                     2: 52
                     3: 71
                     4: 92
                     5: 92
                     6: 71
                     7: 71
                     8: 71
               default: 92
          }
      52: aload_0
      53: aload_2
      54: putfield      #46                 // Field noSubscriberError:Ljava/lang/Throwable;
      57: aload_0
      58: getstatic     #81                 // Field com/typesafe/netty/HandlerPublisher$State.NO_SUBSCRIBER_ERROR:Lcom/typesafe/netty/HandlerPublisher$State;
      61: putfield      #13                 // Field state:Lcom/typesafe/netty/HandlerPublisher$State;
      64: aload_0
      65: invokespecial #44                 // Method cleanup:()V
      68: goto          92
      71: aload_0
      72: getstatic     #45                 // Field com/typesafe/netty/HandlerPublisher$State.DONE:Lcom/typesafe/netty/HandlerPublisher$State;
      75: putfield      #13                 // Field state:Lcom/typesafe/netty/HandlerPublisher$State;
      78: aload_0
      79: invokespecial #44                 // Method cleanup:()V
      82: aload_0
      83: getfield      #35                 // Field subscriber:Lorg/reactivestreams/Subscriber;
      86: aload_2
      87: invokeinterface #31,  2           // InterfaceMethod org/reactivestreams/Subscriber.onError:(Ljava/lang/Throwable;)V
      92: return

  private void cleanup();
    Code:
       0: aload_0
       1: getfield      #8                  // Field buffer:Ljava/util/Queue;
       4: invokeinterface #39,  1           // InterfaceMethod java/util/Queue.isEmpty:()Z
       9: ifne          28
      12: aload_0
      13: getfield      #8                  // Field buffer:Ljava/util/Queue;
      16: invokeinterface #67,  1           // InterfaceMethod java/util/Queue.remove:()Ljava/lang/Object;
      21: invokestatic  #72                 // Method io/netty/util/ReferenceCountUtil.release:(Ljava/lang/Object;)Z
      24: pop
      25: goto          0
      28: return

  static void access$000(com.typesafe.netty.HandlerPublisher, org.reactivestreams.Subscriber);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #4                  // Method provideSubscriber:(Lorg/reactivestreams/Subscriber;)V
       5: return

  static void access$200(com.typesafe.netty.HandlerPublisher, long);
    Code:
       0: aload_0
       1: lload_1
       2: invokespecial #3                  // Method receivedDemand:(J)V
       5: return

  static io.netty.util.concurrent.EventExecutor access$300(com.typesafe.netty.HandlerPublisher);
    Code:
       0: aload_0
       1: getfield      #2                  // Field executor:Lio/netty/util/concurrent/EventExecutor;
       4: areturn

  static void access$400(com.typesafe.netty.HandlerPublisher);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method receivedCancel:()V
       4: return

  static {};
    Code:
       0: new           #82                 // class com/typesafe/netty/HandlerPublisher$3
       3: dup
       4: invokespecial #83                 // Method com/typesafe/netty/HandlerPublisher$3."<init>":()V
       7: putstatic     #75                 // Field COMPLETE:Ljava/lang/Object;
      10: return
}
