Compiled from "ByteBufAllocatorBuilderImpl.java"
public class org.apache.bookkeeper.common.allocator.impl.ByteBufAllocatorBuilderImpl implements org.apache.bookkeeper.common.allocator.ByteBufAllocatorBuilder {
  io.netty.buffer.ByteBufAllocator pooledAllocator;

  io.netty.buffer.ByteBufAllocator unpooledAllocator;

  org.apache.bookkeeper.common.allocator.PoolingPolicy poolingPolicy;

  int poolingConcurrency;

  org.apache.bookkeeper.common.allocator.OutOfMemoryPolicy outOfMemoryPolicy;

  java.util.function.Consumer<java.lang.OutOfMemoryError> outOfMemoryListener;

  org.apache.bookkeeper.common.allocator.LeakDetectionPolicy leakDetectionPolicy;

  public org.apache.bookkeeper.common.allocator.impl.ByteBufAllocatorBuilderImpl();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #2                  // Field pooledAllocator:Lio/netty/buffer/ByteBufAllocator;
       9: aload_0
      10: aconst_null
      11: putfield      #3                  // Field unpooledAllocator:Lio/netty/buffer/ByteBufAllocator;
      14: aload_0
      15: getstatic     #4                  // Field org/apache/bookkeeper/common/allocator/PoolingPolicy.PooledDirect:Lorg/apache/bookkeeper/common/allocator/PoolingPolicy;
      18: putfield      #5                  // Field poolingPolicy:Lorg/apache/bookkeeper/common/allocator/PoolingPolicy;
      21: aload_0
      22: iconst_2
      23: invokestatic  #6                  // Method java/lang/Runtime.getRuntime:()Ljava/lang/Runtime;
      26: invokevirtual #7                  // Method java/lang/Runtime.availableProcessors:()I
      29: imul
      30: putfield      #8                  // Field poolingConcurrency:I
      33: aload_0
      34: getstatic     #9                  // Field org/apache/bookkeeper/common/allocator/OutOfMemoryPolicy.FallbackToHeap:Lorg/apache/bookkeeper/common/allocator/OutOfMemoryPolicy;
      37: putfield      #10                 // Field outOfMemoryPolicy:Lorg/apache/bookkeeper/common/allocator/OutOfMemoryPolicy;
      40: aload_0
      41: aconst_null
      42: putfield      #11                 // Field outOfMemoryListener:Ljava/util/function/Consumer;
      45: aload_0
      46: getstatic     #12                 // Field org/apache/bookkeeper/common/allocator/LeakDetectionPolicy.Disabled:Lorg/apache/bookkeeper/common/allocator/LeakDetectionPolicy;
      49: putfield      #13                 // Field leakDetectionPolicy:Lorg/apache/bookkeeper/common/allocator/LeakDetectionPolicy;
      52: return

  public io.netty.buffer.ByteBufAllocator build();
    Code:
       0: new           #14                 // class org/apache/bookkeeper/common/allocator/impl/ByteBufAllocatorImpl
       3: dup
       4: aload_0
       5: getfield      #2                  // Field pooledAllocator:Lio/netty/buffer/ByteBufAllocator;
       8: aload_0
       9: getfield      #3                  // Field unpooledAllocator:Lio/netty/buffer/ByteBufAllocator;
      12: aload_0
      13: getfield      #5                  // Field poolingPolicy:Lorg/apache/bookkeeper/common/allocator/PoolingPolicy;
      16: aload_0
      17: getfield      #8                  // Field poolingConcurrency:I
      20: aload_0
      21: getfield      #10                 // Field outOfMemoryPolicy:Lorg/apache/bookkeeper/common/allocator/OutOfMemoryPolicy;
      24: aload_0
      25: getfield      #11                 // Field outOfMemoryListener:Ljava/util/function/Consumer;
      28: aload_0
      29: getfield      #13                 // Field leakDetectionPolicy:Lorg/apache/bookkeeper/common/allocator/LeakDetectionPolicy;
      32: invokespecial #15                 // Method org/apache/bookkeeper/common/allocator/impl/ByteBufAllocatorImpl."<init>":(Lio/netty/buffer/ByteBufAllocator;Lio/netty/buffer/ByteBufAllocator;Lorg/apache/bookkeeper/common/allocator/PoolingPolicy;ILorg/apache/bookkeeper/common/allocator/OutOfMemoryPolicy;Ljava/util/function/Consumer;Lorg/apache/bookkeeper/common/allocator/LeakDetectionPolicy;)V
      35: areturn

  public org.apache.bookkeeper.common.allocator.ByteBufAllocatorBuilder pooledAllocator(io.netty.buffer.ByteBufAllocator);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2                  // Field pooledAllocator:Lio/netty/buffer/ByteBufAllocator;
       5: aload_0
       6: areturn

  public org.apache.bookkeeper.common.allocator.ByteBufAllocatorBuilder unpooledAllocator(io.netty.buffer.ByteBufAllocator);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #3                  // Field unpooledAllocator:Lio/netty/buffer/ByteBufAllocator;
       5: aload_0
       6: areturn

  public org.apache.bookkeeper.common.allocator.ByteBufAllocatorBuilder poolingPolicy(org.apache.bookkeeper.common.allocator.PoolingPolicy);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field poolingPolicy:Lorg/apache/bookkeeper/common/allocator/PoolingPolicy;
       5: aload_0
       6: areturn

  public org.apache.bookkeeper.common.allocator.ByteBufAllocatorBuilder poolingConcurrency(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #8                  // Field poolingConcurrency:I
       5: aload_0
       6: areturn

  public org.apache.bookkeeper.common.allocator.ByteBufAllocatorBuilder outOfMemoryPolicy(org.apache.bookkeeper.common.allocator.OutOfMemoryPolicy);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #10                 // Field outOfMemoryPolicy:Lorg/apache/bookkeeper/common/allocator/OutOfMemoryPolicy;
       5: aload_0
       6: areturn

  public org.apache.bookkeeper.common.allocator.ByteBufAllocatorBuilder outOfMemoryListener(java.util.function.Consumer<java.lang.OutOfMemoryError>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #11                 // Field outOfMemoryListener:Ljava/util/function/Consumer;
       5: aload_0
       6: areturn

  public org.apache.bookkeeper.common.allocator.ByteBufAllocatorBuilder leakDetectionPolicy(org.apache.bookkeeper.common.allocator.LeakDetectionPolicy);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #13                 // Field leakDetectionPolicy:Lorg/apache/bookkeeper/common/allocator/LeakDetectionPolicy;
       5: aload_0
       6: areturn
}
