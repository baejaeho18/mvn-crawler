Compiled from "Hpack.kt"
public final class okhttp3.internal.http2.Hpack$Reader {
  private final java.util.List<okhttp3.internal.http2.Header> headerList;

  private final okio.BufferedSource source;

  public okhttp3.internal.http2.Header[] dynamicTable;

  private int nextHeaderIndex;

  public int headerCount;

  public int dynamicTableByteCount;

  private final int headerTableSizeSetting;

  private int maxDynamicTableByteCount;

  public final java.util.List<okhttp3.internal.http2.Header> getAndResetHeaderList();
    Code:
       0: aload_0
       1: getfield      #22                 // Field headerList:Ljava/util/List;
       4: checkcast     #24                 // class java/lang/Iterable
       7: invokestatic  #30                 // Method kotlin/collections/CollectionsKt.toList:(Ljava/lang/Iterable;)Ljava/util/List;
      10: astore_1
      11: aload_0
      12: getfield      #22                 // Field headerList:Ljava/util/List;
      15: invokeinterface #36,  1           // InterfaceMethod java/util/List.clear:()V
      20: aload_1
      21: areturn

  public final int maxDynamicTableByteCount();
    Code:
       0: aload_0
       1: getfield      #43                 // Field maxDynamicTableByteCount:I
       4: ireturn

  private final void adjustDynamicTableByteCount();
    Code:
       0: aload_0
       1: getfield      #43                 // Field maxDynamicTableByteCount:I
       4: aload_0
       5: getfield      #46                 // Field dynamicTableByteCount:I
       8: if_icmpge     39
      11: aload_0
      12: getfield      #43                 // Field maxDynamicTableByteCount:I
      15: ifne          25
      18: aload_0
      19: invokespecial #49                 // Method clearDynamicTable:()V
      22: goto          39
      25: aload_0
      26: aload_0
      27: getfield      #46                 // Field dynamicTableByteCount:I
      30: aload_0
      31: getfield      #43                 // Field maxDynamicTableByteCount:I
      34: isub
      35: invokespecial #53                 // Method evictToRecoverBytes:(I)I
      38: pop
      39: return

  private final void clearDynamicTable();
    Code:
       0: aload_0
       1: getfield      #55                 // Field dynamicTable:[Lokhttp3/internal/http2/Header;
       4: aconst_null
       5: iconst_0
       6: iconst_0
       7: bipush        6
       9: aconst_null
      10: invokestatic  #61                 // Method kotlin/collections/ArraysKt.fill$default:([Ljava/lang/Object;Ljava/lang/Object;IIILjava/lang/Object;)V
      13: aload_0
      14: aload_0
      15: getfield      #55                 // Field dynamicTable:[Lokhttp3/internal/http2/Header;
      18: arraylength
      19: iconst_1
      20: isub
      21: putfield      #63                 // Field nextHeaderIndex:I
      24: aload_0
      25: iconst_0
      26: putfield      #65                 // Field headerCount:I
      29: aload_0
      30: iconst_0
      31: putfield      #46                 // Field dynamicTableByteCount:I
      34: return

  private final int evictToRecoverBytes(int);
    Code:
       0: iload_1
       1: istore_2
       2: iconst_0
       3: istore_3
       4: iload_2
       5: ifle          126
       8: aload_0
       9: getfield      #55                 // Field dynamicTable:[Lokhttp3/internal/http2/Header;
      12: arraylength
      13: iconst_1
      14: isub
      15: istore        4
      17: iload         4
      19: aload_0
      20: getfield      #63                 // Field nextHeaderIndex:I
      23: if_icmplt     87
      26: iload_2
      27: ifle          87
      30: aload_0
      31: getfield      #55                 // Field dynamicTable:[Lokhttp3/internal/http2/Header;
      34: iload         4
      36: aaload
      37: dup
      38: invokestatic  #71                 // Method kotlin/jvm/internal/Intrinsics.checkNotNull:(Ljava/lang/Object;)V
      41: astore        5
      43: iload_2
      44: aload         5
      46: getfield      #76                 // Field okhttp3/internal/http2/Header.hpackSize:I
      49: isub
      50: istore_2
      51: aload_0
      52: dup
      53: getfield      #46                 // Field dynamicTableByteCount:I
      56: aload         5
      58: getfield      #76                 // Field okhttp3/internal/http2/Header.hpackSize:I
      61: isub
      62: putfield      #46                 // Field dynamicTableByteCount:I
      65: aload_0
      66: dup
      67: getfield      #65                 // Field headerCount:I
      70: dup
      71: istore        6
      73: iconst_m1
      74: iadd
      75: putfield      #65                 // Field headerCount:I
      78: iinc          3, 1
      81: iinc          4, -1
      84: goto          17
      87: aload_0
      88: getfield      #55                 // Field dynamicTable:[Lokhttp3/internal/http2/Header;
      91: aload_0
      92: getfield      #63                 // Field nextHeaderIndex:I
      95: iconst_1
      96: iadd
      97: aload_0
      98: getfield      #55                 // Field dynamicTable:[Lokhttp3/internal/http2/Header;
     101: aload_0
     102: getfield      #63                 // Field nextHeaderIndex:I
     105: iconst_1
     106: iadd
     107: iload_3
     108: iadd
     109: aload_0
     110: getfield      #65                 // Field headerCount:I
     113: invokestatic  #82                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     116: aload_0
     117: dup
     118: getfield      #63                 // Field nextHeaderIndex:I
     121: iload_3
     122: iadd
     123: putfield      #63                 // Field nextHeaderIndex:I
     126: iload_3
     127: ireturn

  public final void readHeaders() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #92                 // Field source:Lokio/BufferedSource;
       4: invokeinterface #98,  1           // InterfaceMethod okio/BufferedSource.exhausted:()Z
       9: ifne          231
      12: aload_0
      13: getfield      #92                 // Field source:Lokio/BufferedSource;
      16: invokeinterface #102,  1          // InterfaceMethod okio/BufferedSource.readByte:()B
      21: sipush        255
      24: invokestatic  #108                // Method okhttp3/internal/Util.and:(BI)I
      27: istore_1
      28: nop
      29: iload_1
      30: sipush        128
      33: if_icmpne     49
      36: new           #90                 // class java/io/IOException
      39: dup
      40: ldc           #110                // String index == 0
      42: invokespecial #114                // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      45: checkcast     #116                // class java/lang/Throwable
      48: athrow
      49: iload_1
      50: sipush        128
      53: iand
      54: sipush        128
      57: if_icmpne     78
      60: aload_0
      61: iload_1
      62: bipush        127
      64: invokevirtual #120                // Method readInt:(II)I
      67: istore_2
      68: aload_0
      69: iload_2
      70: iconst_1
      71: isub
      72: invokespecial #124                // Method readIndexedHeader:(I)V
      75: goto          228
      78: iload_1
      79: bipush        64
      81: if_icmpne     91
      84: aload_0
      85: invokespecial #127                // Method readLiteralHeaderWithIncrementalIndexingNewName:()V
      88: goto          228
      91: iload_1
      92: bipush        64
      94: iand
      95: bipush        64
      97: if_icmpne     118
     100: aload_0
     101: iload_1
     102: bipush        63
     104: invokevirtual #120                // Method readInt:(II)I
     107: istore_2
     108: aload_0
     109: iload_2
     110: iconst_1
     111: isub
     112: invokespecial #130                // Method readLiteralHeaderWithIncrementalIndexingIndexedName:(I)V
     115: goto          228
     118: iload_1
     119: bipush        32
     121: iand
     122: bipush        32
     124: if_icmpne     196
     127: aload_0
     128: aload_0
     129: iload_1
     130: bipush        31
     132: invokevirtual #120                // Method readInt:(II)I
     135: putfield      #43                 // Field maxDynamicTableByteCount:I
     138: aload_0
     139: getfield      #43                 // Field maxDynamicTableByteCount:I
     142: iflt          156
     145: aload_0
     146: getfield      #43                 // Field maxDynamicTableByteCount:I
     149: aload_0
     150: getfield      #133                // Field headerTableSizeSetting:I
     153: if_icmple     189
     156: new           #90                 // class java/io/IOException
     159: dup
     160: new           #135                // class java/lang/StringBuilder
     163: dup
     164: invokespecial #137                // Method java/lang/StringBuilder."<init>":()V
     167: ldc           #139                // String Invalid dynamic table size update
     169: invokevirtual #143                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     172: aload_0
     173: getfield      #43                 // Field maxDynamicTableByteCount:I
     176: invokevirtual #146                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     179: invokevirtual #150                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     182: invokespecial #114                // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     185: checkcast     #116                // class java/lang/Throwable
     188: athrow
     189: aload_0
     190: invokespecial #152                // Method adjustDynamicTableByteCount:()V
     193: goto          228
     196: iload_1
     197: bipush        16
     199: if_icmpeq     206
     202: iload_1
     203: ifne          213
     206: aload_0
     207: invokespecial #155                // Method readLiteralHeaderWithoutIndexingNewName:()V
     210: goto          228
     213: aload_0
     214: iload_1
     215: bipush        15
     217: invokevirtual #120                // Method readInt:(II)I
     220: istore_2
     221: aload_0
     222: iload_2
     223: iconst_1
     224: isub
     225: invokespecial #158                // Method readLiteralHeaderWithoutIndexingIndexedName:(I)V
     228: goto          0
     231: return

  private final void readIndexedHeader(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #164                // Method isStaticHeader:(I)Z
       5: ifeq          31
       8: getstatic     #170                // Field okhttp3/internal/http2/Hpack.INSTANCE:Lokhttp3/internal/http2/Hpack;
      11: invokevirtual #174                // Method okhttp3/internal/http2/Hpack.getSTATIC_HEADER_TABLE:()[Lokhttp3/internal/http2/Header;
      14: iload_1
      15: aaload
      16: astore_2
      17: aload_0
      18: getfield      #22                 // Field headerList:Ljava/util/List;
      21: aload_2
      22: invokeinterface #178,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      27: pop
      28: goto          122
      31: aload_0
      32: iload_1
      33: getstatic     #170                // Field okhttp3/internal/http2/Hpack.INSTANCE:Lokhttp3/internal/http2/Hpack;
      36: invokevirtual #174                // Method okhttp3/internal/http2/Hpack.getSTATIC_HEADER_TABLE:()[Lokhttp3/internal/http2/Header;
      39: arraylength
      40: isub
      41: invokespecial #181                // Method dynamicTableIndex:(I)I
      44: istore_2
      45: iload_2
      46: iflt          58
      49: iload_2
      50: aload_0
      51: getfield      #55                 // Field dynamicTable:[Lokhttp3/internal/http2/Header;
      54: arraylength
      55: if_icmplt     90
      58: new           #90                 // class java/io/IOException
      61: dup
      62: new           #135                // class java/lang/StringBuilder
      65: dup
      66: invokespecial #137                // Method java/lang/StringBuilder."<init>":()V
      69: ldc           #183                // String Header index too large
      71: invokevirtual #143                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      74: iload_1
      75: iconst_1
      76: iadd
      77: invokevirtual #146                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      80: invokevirtual #150                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      83: invokespecial #114                // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      86: checkcast     #116                // class java/lang/Throwable
      89: athrow
      90: aload_0
      91: getfield      #22                 // Field headerList:Ljava/util/List;
      94: checkcast     #185                // class java/util/Collection
      97: astore_3
      98: aload_0
      99: getfield      #55                 // Field dynamicTable:[Lokhttp3/internal/http2/Header;
     102: iload_2
     103: aaload
     104: dup
     105: invokestatic  #71                 // Method kotlin/jvm/internal/Intrinsics.checkNotNull:(Ljava/lang/Object;)V
     108: astore        4
     110: iconst_0
     111: istore        5
     113: aload_3
     114: aload         4
     116: invokeinterface #186,  2          // InterfaceMethod java/util/Collection.add:(Ljava/lang/Object;)Z
     121: pop
     122: return

  private final int dynamicTableIndex(int);
    Code:
       0: aload_0
       1: getfield      #63                 // Field nextHeaderIndex:I
       4: iconst_1
       5: iadd
       6: iload_1
       7: iadd
       8: ireturn

  private final void readLiteralHeaderWithoutIndexingIndexedName(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #191                // Method getName:(I)Lokio/ByteString;
       5: astore_2
       6: aload_0
       7: invokevirtual #195                // Method readByteString:()Lokio/ByteString;
      10: astore_3
      11: aload_0
      12: getfield      #22                 // Field headerList:Ljava/util/List;
      15: new           #73                 // class okhttp3/internal/http2/Header
      18: dup
      19: aload_2
      20: aload_3
      21: invokespecial #198                // Method okhttp3/internal/http2/Header."<init>":(Lokio/ByteString;Lokio/ByteString;)V
      24: invokeinterface #178,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      29: pop
      30: return

  private final void readLiteralHeaderWithoutIndexingNewName() throws java.io.IOException;
    Code:
       0: getstatic     #170                // Field okhttp3/internal/http2/Hpack.INSTANCE:Lokhttp3/internal/http2/Hpack;
       3: aload_0
       4: invokevirtual #195                // Method readByteString:()Lokio/ByteString;
       7: invokevirtual #205                // Method okhttp3/internal/http2/Hpack.checkLowercase:(Lokio/ByteString;)Lokio/ByteString;
      10: astore_1
      11: aload_0
      12: invokevirtual #195                // Method readByteString:()Lokio/ByteString;
      15: astore_2
      16: aload_0
      17: getfield      #22                 // Field headerList:Ljava/util/List;
      20: new           #73                 // class okhttp3/internal/http2/Header
      23: dup
      24: aload_1
      25: aload_2
      26: invokespecial #198                // Method okhttp3/internal/http2/Header."<init>":(Lokio/ByteString;Lokio/ByteString;)V
      29: invokeinterface #178,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      34: pop
      35: return

  private final void readLiteralHeaderWithIncrementalIndexingIndexedName(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #191                // Method getName:(I)Lokio/ByteString;
       5: astore_2
       6: aload_0
       7: invokevirtual #195                // Method readByteString:()Lokio/ByteString;
      10: astore_3
      11: aload_0
      12: iconst_m1
      13: new           #73                 // class okhttp3/internal/http2/Header
      16: dup
      17: aload_2
      18: aload_3
      19: invokespecial #198                // Method okhttp3/internal/http2/Header."<init>":(Lokio/ByteString;Lokio/ByteString;)V
      22: invokespecial #209                // Method insertIntoDynamicTable:(ILokhttp3/internal/http2/Header;)V
      25: return

  private final void readLiteralHeaderWithIncrementalIndexingNewName() throws java.io.IOException;
    Code:
       0: getstatic     #170                // Field okhttp3/internal/http2/Hpack.INSTANCE:Lokhttp3/internal/http2/Hpack;
       3: aload_0
       4: invokevirtual #195                // Method readByteString:()Lokio/ByteString;
       7: invokevirtual #205                // Method okhttp3/internal/http2/Hpack.checkLowercase:(Lokio/ByteString;)Lokio/ByteString;
      10: astore_1
      11: aload_0
      12: invokevirtual #195                // Method readByteString:()Lokio/ByteString;
      15: astore_2
      16: aload_0
      17: iconst_m1
      18: new           #73                 // class okhttp3/internal/http2/Header
      21: dup
      22: aload_1
      23: aload_2
      24: invokespecial #198                // Method okhttp3/internal/http2/Header."<init>":(Lokio/ByteString;Lokio/ByteString;)V
      27: invokespecial #209                // Method insertIntoDynamicTable:(ILokhttp3/internal/http2/Header;)V
      30: return

  private final okio.ByteString getName(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #164                // Method isStaticHeader:(I)Z
       5: ifeq          22
       8: getstatic     #170                // Field okhttp3/internal/http2/Hpack.INSTANCE:Lokhttp3/internal/http2/Hpack;
      11: invokevirtual #174                // Method okhttp3/internal/http2/Hpack.getSTATIC_HEADER_TABLE:()[Lokhttp3/internal/http2/Header;
      14: iload_1
      15: aaload
      16: getfield      #212                // Field okhttp3/internal/http2/Header.name:Lokio/ByteString;
      19: goto          94
      22: aload_0
      23: iload_1
      24: getstatic     #170                // Field okhttp3/internal/http2/Hpack.INSTANCE:Lokhttp3/internal/http2/Hpack;
      27: invokevirtual #174                // Method okhttp3/internal/http2/Hpack.getSTATIC_HEADER_TABLE:()[Lokhttp3/internal/http2/Header;
      30: arraylength
      31: isub
      32: invokespecial #181                // Method dynamicTableIndex:(I)I
      35: istore_2
      36: iload_2
      37: iflt          49
      40: iload_2
      41: aload_0
      42: getfield      #55                 // Field dynamicTable:[Lokhttp3/internal/http2/Header;
      45: arraylength
      46: if_icmplt     81
      49: new           #90                 // class java/io/IOException
      52: dup
      53: new           #135                // class java/lang/StringBuilder
      56: dup
      57: invokespecial #137                // Method java/lang/StringBuilder."<init>":()V
      60: ldc           #183                // String Header index too large
      62: invokevirtual #143                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      65: iload_1
      66: iconst_1
      67: iadd
      68: invokevirtual #146                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      71: invokevirtual #150                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      74: invokespecial #114                // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      77: checkcast     #116                // class java/lang/Throwable
      80: athrow
      81: aload_0
      82: getfield      #55                 // Field dynamicTable:[Lokhttp3/internal/http2/Header;
      85: iload_2
      86: aaload
      87: dup
      88: invokestatic  #71                 // Method kotlin/jvm/internal/Intrinsics.checkNotNull:(Ljava/lang/Object;)V
      91: getfield      #212                // Field okhttp3/internal/http2/Header.name:Lokio/ByteString;
      94: areturn

  private final boolean isStaticHeader(int);
    Code:
       0: iload_1
       1: iflt          21
       4: iload_1
       5: getstatic     #170                // Field okhttp3/internal/http2/Hpack.INSTANCE:Lokhttp3/internal/http2/Hpack;
       8: invokevirtual #174                // Method okhttp3/internal/http2/Hpack.getSTATIC_HEADER_TABLE:()[Lokhttp3/internal/http2/Header;
      11: arraylength
      12: iconst_1
      13: isub
      14: if_icmpgt     21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: ireturn

  private final void insertIntoDynamicTable(int, okhttp3.internal.http2.Header);
    Code:
       0: iload_1
       1: istore_3
       2: aload_0
       3: getfield      #22                 // Field headerList:Ljava/util/List;
       6: aload_2
       7: invokeinterface #178,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      12: pop
      13: aload_2
      14: getfield      #76                 // Field okhttp3/internal/http2/Header.hpackSize:I
      17: istore        4
      19: iload_3
      20: iconst_m1
      21: if_icmpeq     46
      24: iload         4
      26: aload_0
      27: getfield      #55                 // Field dynamicTable:[Lokhttp3/internal/http2/Header;
      30: aload_0
      31: iload_3
      32: invokespecial #181                // Method dynamicTableIndex:(I)I
      35: aaload
      36: dup
      37: invokestatic  #71                 // Method kotlin/jvm/internal/Intrinsics.checkNotNull:(Ljava/lang/Object;)V
      40: getfield      #76                 // Field okhttp3/internal/http2/Header.hpackSize:I
      43: isub
      44: istore        4
      46: iload         4
      48: aload_0
      49: getfield      #43                 // Field maxDynamicTableByteCount:I
      52: if_icmple     60
      55: aload_0
      56: invokespecial #49                 // Method clearDynamicTable:()V
      59: return
      60: aload_0
      61: getfield      #46                 // Field dynamicTableByteCount:I
      64: iload         4
      66: iadd
      67: aload_0
      68: getfield      #43                 // Field maxDynamicTableByteCount:I
      71: isub
      72: istore        5
      74: aload_0
      75: iload         5
      77: invokespecial #53                 // Method evictToRecoverBytes:(I)I
      80: istore        6
      82: iload_3
      83: iconst_m1
      84: if_icmpne     189
      87: aload_0
      88: getfield      #65                 // Field headerCount:I
      91: iconst_1
      92: iadd
      93: aload_0
      94: getfield      #55                 // Field dynamicTable:[Lokhttp3/internal/http2/Header;
      97: arraylength
      98: if_icmple     150
     101: aload_0
     102: getfield      #55                 // Field dynamicTable:[Lokhttp3/internal/http2/Header;
     105: arraylength
     106: iconst_2
     107: imul
     108: anewarray     #73                 // class okhttp3/internal/http2/Header
     111: astore        7
     113: aload_0
     114: getfield      #55                 // Field dynamicTable:[Lokhttp3/internal/http2/Header;
     117: iconst_0
     118: aload         7
     120: aload_0
     121: getfield      #55                 // Field dynamicTable:[Lokhttp3/internal/http2/Header;
     124: arraylength
     125: aload_0
     126: getfield      #55                 // Field dynamicTable:[Lokhttp3/internal/http2/Header;
     129: arraylength
     130: invokestatic  #82                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     133: aload_0
     134: aload_0
     135: getfield      #55                 // Field dynamicTable:[Lokhttp3/internal/http2/Header;
     138: arraylength
     139: iconst_1
     140: isub
     141: putfield      #63                 // Field nextHeaderIndex:I
     144: aload_0
     145: aload         7
     147: putfield      #55                 // Field dynamicTable:[Lokhttp3/internal/http2/Header;
     150: aload_0
     151: dup
     152: getfield      #63                 // Field nextHeaderIndex:I
     155: dup
     156: istore        7
     158: iconst_m1
     159: iadd
     160: putfield      #63                 // Field nextHeaderIndex:I
     163: iload         7
     165: istore_3
     166: aload_0
     167: getfield      #55                 // Field dynamicTable:[Lokhttp3/internal/http2/Header;
     170: iload_3
     171: aload_2
     172: aastore
     173: aload_0
     174: dup
     175: getfield      #65                 // Field headerCount:I
     178: dup
     179: istore        7
     181: iconst_1
     182: iadd
     183: putfield      #65                 // Field headerCount:I
     186: goto          207
     189: iload_3
     190: aload_0
     191: iload_3
     192: invokespecial #181                // Method dynamicTableIndex:(I)I
     195: iload         6
     197: iadd
     198: iadd
     199: istore_3
     200: aload_0
     201: getfield      #55                 // Field dynamicTable:[Lokhttp3/internal/http2/Header;
     204: iload_3
     205: aload_2
     206: aastore
     207: aload_0
     208: dup
     209: getfield      #46                 // Field dynamicTableByteCount:I
     212: iload         4
     214: iadd
     215: putfield      #46                 // Field dynamicTableByteCount:I
     218: return

  private final int readByte() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #92                 // Field source:Lokio/BufferedSource;
       4: invokeinterface #102,  1          // InterfaceMethod okio/BufferedSource.readByte:()B
       9: sipush        255
      12: invokestatic  #108                // Method okhttp3/internal/Util.and:(BI)I
      15: ireturn

  public final int readInt(int, int) throws java.io.IOException;
    Code:
       0: iload_1
       1: iload_2
       2: iand
       3: istore_3
       4: iload_3
       5: iload_2
       6: if_icmpge     11
       9: iload_3
      10: ireturn
      11: iload_2
      12: istore        4
      14: iconst_0
      15: istore        5
      17: nop
      18: aload_0
      19: invokespecial #220                // Method readByte:()I
      22: istore        6
      24: iload         6
      26: sipush        128
      29: iand
      30: ifeq          56
      33: iload         4
      35: iload         6
      37: bipush        127
      39: iand
      40: iload         5
      42: ishl
      43: iadd
      44: istore        4
      46: iload         5
      48: bipush        7
      50: iadd
      51: istore        5
      53: goto          69
      56: iload         4
      58: iload         6
      60: iload         5
      62: ishl
      63: iadd
      64: istore        4
      66: goto          72
      69: goto          17
      72: iload         4
      74: ireturn

  public final okio.ByteString readByteString() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #220                // Method readByte:()I
       4: istore_1
       5: iload_1
       6: sipush        128
       9: iand
      10: sipush        128
      13: if_icmpne     20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: istore_2
      22: aload_0
      23: iload_1
      24: bipush        127
      26: invokevirtual #120                // Method readInt:(II)I
      29: i2l
      30: lstore_3
      31: iload_2
      32: ifeq          68
      35: new           #226                // class okio/Buffer
      38: dup
      39: invokespecial #227                // Method okio/Buffer."<init>":()V
      42: astore        5
      44: getstatic     #232                // Field okhttp3/internal/http2/Huffman.INSTANCE:Lokhttp3/internal/http2/Huffman;
      47: aload_0
      48: getfield      #92                 // Field source:Lokio/BufferedSource;
      51: lload_3
      52: aload         5
      54: checkcast     #234                // class okio/BufferedSink
      57: invokevirtual #238                // Method okhttp3/internal/http2/Huffman.decode:(Lokio/BufferedSource;JLokio/BufferedSink;)V
      60: aload         5
      62: invokevirtual #239                // Method okio/Buffer.readByteString:()Lokio/ByteString;
      65: goto          78
      68: aload_0
      69: getfield      #92                 // Field source:Lokio/BufferedSource;
      72: lload_3
      73: invokeinterface #242,  3          // InterfaceMethod okio/BufferedSource.readByteString:(J)Lokio/ByteString;
      78: areturn

  public okhttp3.internal.http2.Hpack$Reader(okio.Source, int, int);
    Code:
       0: aload_1
       1: ldc           #251                // String source
       3: invokestatic  #255                // Method kotlin/jvm/internal/Intrinsics.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: invokespecial #256                // Method java/lang/Object."<init>":()V
      10: aload_0
      11: iload_2
      12: putfield      #133                // Field headerTableSizeSetting:I
      15: aload_0
      16: iload_3
      17: putfield      #43                 // Field maxDynamicTableByteCount:I
      20: aload_0
      21: iconst_0
      22: istore        4
      24: new           #258                // class java/util/ArrayList
      27: dup
      28: invokespecial #259                // Method java/util/ArrayList."<init>":()V
      31: checkcast     #32                 // class java/util/List
      34: putfield      #22                 // Field headerList:Ljava/util/List;
      37: aload_0
      38: aload_1
      39: invokestatic  #265                // Method okio/Okio.buffer:(Lokio/Source;)Lokio/BufferedSource;
      42: putfield      #92                 // Field source:Lokio/BufferedSource;
      45: aload_0
      46: bipush        8
      48: anewarray     #73                 // class okhttp3/internal/http2/Header
      51: putfield      #55                 // Field dynamicTable:[Lokhttp3/internal/http2/Header;
      54: aload_0
      55: aload_0
      56: getfield      #55                 // Field dynamicTable:[Lokhttp3/internal/http2/Header;
      59: arraylength
      60: iconst_1
      61: isub
      62: putfield      #63                 // Field nextHeaderIndex:I
      65: return

  public okhttp3.internal.http2.Hpack$Reader(okio.Source, int, int, int, kotlin.jvm.internal.DefaultConstructorMarker);
    Code:
       0: iload         4
       2: iconst_4
       3: iand
       4: ifeq          9
       7: iload_2
       8: istore_3
       9: aload_0
      10: aload_1
      11: iload_2
      12: iload_3
      13: invokespecial #269                // Method "<init>":(Lokio/Source;II)V
      16: return

  public okhttp3.internal.http2.Hpack$Reader(okio.Source, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iconst_0
       4: iconst_4
       5: aconst_null
       6: invokespecial #272                // Method "<init>":(Lokio/Source;IIILkotlin/jvm/internal/DefaultConstructorMarker;)V
       9: return
}
