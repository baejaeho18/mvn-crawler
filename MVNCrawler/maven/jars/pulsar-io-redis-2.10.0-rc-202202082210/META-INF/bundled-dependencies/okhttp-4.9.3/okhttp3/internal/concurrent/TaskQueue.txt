Compiled from "TaskQueue.kt"
public final class okhttp3.internal.concurrent.TaskQueue {
  private boolean shutdown;

  private okhttp3.internal.concurrent.Task activeTask;

  private final java.util.List<okhttp3.internal.concurrent.Task> futureTasks;

  private boolean cancelActiveTask;

  private final okhttp3.internal.concurrent.TaskRunner taskRunner;

  private final java.lang.String name;

  public final boolean getShutdown$okhttp();
    Code:
       0: aload_0
       1: getfield      #10                 // Field shutdown:Z
       4: ireturn

  public final void setShutdown$okhttp(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #10                 // Field shutdown:Z
       5: return

  public final okhttp3.internal.concurrent.Task getActiveTask$okhttp();
    Code:
       0: aload_0
       1: getfield      #22                 // Field activeTask:Lokhttp3/internal/concurrent/Task;
       4: areturn

  public final void setActiveTask$okhttp(okhttp3.internal.concurrent.Task);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #22                 // Field activeTask:Lokhttp3/internal/concurrent/Task;
       5: return

  public final java.util.List<okhttp3.internal.concurrent.Task> getFutureTasks$okhttp();
    Code:
       0: aload_0
       1: getfield      #33                 // Field futureTasks:Ljava/util/List;
       4: areturn

  public final boolean getCancelActiveTask$okhttp();
    Code:
       0: aload_0
       1: getfield      #37                 // Field cancelActiveTask:Z
       4: ireturn

  public final void setCancelActiveTask$okhttp(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #37                 // Field cancelActiveTask:Z
       5: return

  public final java.util.List<okhttp3.internal.concurrent.Task> getScheduledTasks();
    Code:
       0: aload_0
       1: getfield      #43                 // Field taskRunner:Lokhttp3/internal/concurrent/TaskRunner;
       4: astore_1
       5: iconst_0
       6: istore_2
       7: iconst_0
       8: istore_3
       9: aload_1
      10: monitorenter
      11: nop
      12: iconst_0
      13: istore        4
      15: aload_0
      16: getfield      #33                 // Field futureTasks:Ljava/util/List;
      19: checkcast     #45                 // class java/lang/Iterable
      22: invokestatic  #51                 // Method kotlin/collections/CollectionsKt.toList:(Ljava/lang/Iterable;)Ljava/util/List;
      25: astore_3
      26: aload_1
      27: monitorexit
      28: aload_3
      29: goto          37
      32: astore_3
      33: aload_1
      34: monitorexit
      35: aload_3
      36: athrow
      37: areturn
    Exception table:
       from    to  target type
          11    26    32   any
          32    33    32   any

  public final void schedule(okhttp3.internal.concurrent.Task, long);
    Code:
       0: aload_1
       1: ldc           #63                 // String task
       3: invokestatic  #69                 // Method kotlin/jvm/internal/Intrinsics.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: getfield      #43                 // Field taskRunner:Lokhttp3/internal/concurrent/TaskRunner;
      10: astore        4
      12: iconst_0
      13: istore        5
      15: iconst_0
      16: istore        6
      18: aload         4
      20: monitorenter
      21: nop
      22: iconst_0
      23: istore        7
      25: aload_0
      26: getfield      #10                 // Field shutdown:Z
      29: ifeq          152
      32: aload_1
      33: invokevirtual #74                 // Method okhttp3/internal/concurrent/Task.getCancelable:()Z
      36: ifeq          92
      39: aload_1
      40: astore        8
      42: aload_0
      43: astore        9
      45: iconst_0
      46: istore        10
      48: getstatic     #78                 // Field okhttp3/internal/concurrent/TaskRunner.Companion:Lokhttp3/internal/concurrent/TaskRunner$Companion;
      51: invokevirtual #84                 // Method okhttp3/internal/concurrent/TaskRunner$Companion.getLogger:()Ljava/util/logging/Logger;
      54: getstatic     #90                 // Field java/util/logging/Level.FINE:Ljava/util/logging/Level;
      57: invokevirtual #96                 // Method java/util/logging/Logger.isLoggable:(Ljava/util/logging/Level;)Z
      60: ifeq          87
      63: aload         8
      65: aload         9
      67: astore        11
      69: astore        12
      71: iconst_0
      72: istore        13
      74: ldc           #98                 // String schedule canceled (queue is shutdown)
      76: astore        14
      78: aload         12
      80: aload         11
      82: aload         14
      84: invokestatic  #104                // Method okhttp3/internal/concurrent/TaskLoggerKt.access$log:(Lokhttp3/internal/concurrent/Task;Lokhttp3/internal/concurrent/TaskQueue;Ljava/lang/String;)V
      87: nop
      88: aload         4
      90: monitorexit
      91: return
      92: aload_1
      93: astore        8
      95: aload_0
      96: astore        9
      98: iconst_0
      99: istore        10
     101: getstatic     #78                 // Field okhttp3/internal/concurrent/TaskRunner.Companion:Lokhttp3/internal/concurrent/TaskRunner$Companion;
     104: invokevirtual #84                 // Method okhttp3/internal/concurrent/TaskRunner$Companion.getLogger:()Ljava/util/logging/Logger;
     107: getstatic     #90                 // Field java/util/logging/Level.FINE:Ljava/util/logging/Level;
     110: invokevirtual #96                 // Method java/util/logging/Logger.isLoggable:(Ljava/util/logging/Level;)Z
     113: ifeq          140
     116: aload         8
     118: aload         9
     120: astore        11
     122: astore        12
     124: iconst_0
     125: istore        13
     127: ldc           #106                // String schedule failed (queue is shutdown)
     129: astore        14
     131: aload         12
     133: aload         11
     135: aload         14
     137: invokestatic  #104                // Method okhttp3/internal/concurrent/TaskLoggerKt.access$log:(Lokhttp3/internal/concurrent/Task;Lokhttp3/internal/concurrent/TaskQueue;Ljava/lang/String;)V
     140: nop
     141: new           #108                // class java/util/concurrent/RejectedExecutionException
     144: dup
     145: invokespecial #112                // Method java/util/concurrent/RejectedExecutionException."<init>":()V
     148: checkcast     #57                 // class java/lang/Throwable
     151: athrow
     152: aload_0
     153: aload_1
     154: lload_2
     155: iconst_0
     156: invokevirtual #116                // Method scheduleAndDecide$okhttp:(Lokhttp3/internal/concurrent/Task;JZ)Z
     159: ifeq          170
     162: aload_0
     163: getfield      #43                 // Field taskRunner:Lokhttp3/internal/concurrent/TaskRunner;
     166: aload_0
     167: invokevirtual #120                // Method okhttp3/internal/concurrent/TaskRunner.kickCoordinator$okhttp:(Lokhttp3/internal/concurrent/TaskQueue;)V
     170: getstatic     #126                // Field kotlin/Unit.INSTANCE:Lkotlin/Unit;
     173: astore        6
     175: aload         4
     177: monitorexit
     178: goto          189
     181: astore        6
     183: aload         4
     185: monitorexit
     186: aload         6
     188: athrow
     189: return
    Exception table:
       from    to  target type
          21    88   181   any
          92   175   181   any
         181   183   181   any

  public static void schedule$default(okhttp3.internal.concurrent.TaskQueue, okhttp3.internal.concurrent.Task, long, int, java.lang.Object);
    Code:
       0: iload         4
       2: iconst_2
       3: iand
       4: ifeq          9
       7: lconst_0
       8: lstore_2
       9: aload_0
      10: aload_1
      11: lload_2
      12: invokevirtual #138                // Method schedule:(Lokhttp3/internal/concurrent/Task;J)V
      15: return

  public final void schedule(java.lang.String, long, kotlin.jvm.functions.Function0<java.lang.Long>);
    Code:
       0: ldc           #141                // int 0
       2: istore        5
       4: aload_1
       5: ldc           #143                // String name
       7: invokestatic  #69                 // Method kotlin/jvm/internal/Intrinsics.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V
      10: aload         4
      12: ldc           #145                // String block
      14: invokestatic  #69                 // Method kotlin/jvm/internal/Intrinsics.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V
      17: aload_0
      18: new           #147                // class okhttp3/internal/concurrent/TaskQueue$schedule$2
      21: dup
      22: aload         4
      24: aload_1
      25: aload_1
      26: invokespecial #150                // Method okhttp3/internal/concurrent/TaskQueue$schedule$2."<init>":(Lkotlin/jvm/functions/Function0;Ljava/lang/String;Ljava/lang/String;)V
      29: checkcast     #71                 // class okhttp3/internal/concurrent/Task
      32: lload_2
      33: invokevirtual #138                // Method schedule:(Lokhttp3/internal/concurrent/Task;J)V
      36: return

  public static void schedule$default(okhttp3.internal.concurrent.TaskQueue, java.lang.String, long, kotlin.jvm.functions.Function0, int, java.lang.Object);
    Code:
       0: iload         5
       2: iconst_2
       3: iand
       4: ifeq          9
       7: lconst_0
       8: lstore_2
       9: iconst_0
      10: istore        5
      12: aload_1
      13: ldc           #143                // String name
      15: invokestatic  #69                 // Method kotlin/jvm/internal/Intrinsics.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V
      18: aload         4
      20: ldc           #145                // String block
      22: invokestatic  #69                 // Method kotlin/jvm/internal/Intrinsics.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V
      25: aload_0
      26: new           #147                // class okhttp3/internal/concurrent/TaskQueue$schedule$2
      29: dup
      30: aload         4
      32: aload_1
      33: aload_1
      34: invokespecial #150                // Method okhttp3/internal/concurrent/TaskQueue$schedule$2."<init>":(Lkotlin/jvm/functions/Function0;Ljava/lang/String;Ljava/lang/String;)V
      37: checkcast     #71                 // class okhttp3/internal/concurrent/Task
      40: lload_2
      41: invokevirtual #138                // Method schedule:(Lokhttp3/internal/concurrent/Task;J)V
      44: return

  public final void execute(java.lang.String, long, boolean, kotlin.jvm.functions.Function0<kotlin.Unit>);
    Code:
       0: ldc           #141                // int 0
       2: istore        6
       4: aload_1
       5: ldc           #143                // String name
       7: invokestatic  #69                 // Method kotlin/jvm/internal/Intrinsics.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V
      10: aload         5
      12: ldc           #145                // String block
      14: invokestatic  #69                 // Method kotlin/jvm/internal/Intrinsics.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V
      17: aload_0
      18: new           #159                // class okhttp3/internal/concurrent/TaskQueue$execute$1
      21: dup
      22: aload         5
      24: aload_1
      25: iload         4
      27: aload_1
      28: iload         4
      30: invokespecial #162                // Method okhttp3/internal/concurrent/TaskQueue$execute$1."<init>":(Lkotlin/jvm/functions/Function0;Ljava/lang/String;ZLjava/lang/String;Z)V
      33: checkcast     #71                 // class okhttp3/internal/concurrent/Task
      36: lload_2
      37: invokevirtual #138                // Method schedule:(Lokhttp3/internal/concurrent/Task;J)V
      40: return

  public static void execute$default(okhttp3.internal.concurrent.TaskQueue, java.lang.String, long, boolean, kotlin.jvm.functions.Function0, int, java.lang.Object);
    Code:
       0: iload         6
       2: iconst_2
       3: iand
       4: ifeq          9
       7: lconst_0
       8: lstore_2
       9: iload         6
      11: iconst_4
      12: iand
      13: ifeq          19
      16: iconst_1
      17: istore        4
      19: iconst_0
      20: istore        6
      22: aload_1
      23: ldc           #143                // String name
      25: invokestatic  #69                 // Method kotlin/jvm/internal/Intrinsics.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V
      28: aload         5
      30: ldc           #145                // String block
      32: invokestatic  #69                 // Method kotlin/jvm/internal/Intrinsics.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V
      35: aload_0
      36: new           #159                // class okhttp3/internal/concurrent/TaskQueue$execute$1
      39: dup
      40: aload         5
      42: aload_1
      43: iload         4
      45: aload_1
      46: iload         4
      48: invokespecial #162                // Method okhttp3/internal/concurrent/TaskQueue$execute$1."<init>":(Lkotlin/jvm/functions/Function0;Ljava/lang/String;ZLjava/lang/String;Z)V
      51: checkcast     #71                 // class okhttp3/internal/concurrent/Task
      54: lload_2
      55: invokevirtual #138                // Method schedule:(Lokhttp3/internal/concurrent/Task;J)V
      58: return

  public final java.util.concurrent.CountDownLatch idleLatch();
    Code:
       0: aload_0
       1: getfield      #43                 // Field taskRunner:Lokhttp3/internal/concurrent/TaskRunner;
       4: astore_1
       5: iconst_0
       6: istore_2
       7: iconst_0
       8: istore_3
       9: aload_1
      10: monitorenter
      11: nop
      12: iconst_0
      13: istore        4
      15: aload_0
      16: getfield      #22                 // Field activeTask:Lokhttp3/internal/concurrent/Task;
      19: ifnonnull     49
      22: aload_0
      23: getfield      #33                 // Field futureTasks:Ljava/util/List;
      26: invokeinterface #171,  1          // InterfaceMethod java/util/List.isEmpty:()Z
      31: ifeq          49
      34: new           #173                // class java/util/concurrent/CountDownLatch
      37: dup
      38: iconst_0
      39: invokespecial #176                // Method java/util/concurrent/CountDownLatch."<init>":(I)V
      42: astore        11
      44: aload_1
      45: monitorexit
      46: aload         11
      48: areturn
      49: aload_0
      50: getfield      #22                 // Field activeTask:Lokhttp3/internal/concurrent/Task;
      53: astore        5
      55: aload         5
      57: instanceof    #178                // class okhttp3/internal/concurrent/TaskQueue$AwaitIdleTask
      60: ifeq          78
      63: aload         5
      65: checkcast     #178                // class okhttp3/internal/concurrent/TaskQueue$AwaitIdleTask
      68: invokevirtual #181                // Method okhttp3/internal/concurrent/TaskQueue$AwaitIdleTask.getLatch:()Ljava/util/concurrent/CountDownLatch;
      71: astore        10
      73: aload_1
      74: monitorexit
      75: aload         10
      77: areturn
      78: aload_0
      79: getfield      #33                 // Field futureTasks:Ljava/util/List;
      82: invokeinterface #185,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      87: astore        6
      89: aload         6
      91: invokeinterface #190,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      96: ifeq          137
      99: aload         6
     101: invokeinterface #194,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     106: checkcast     #71                 // class okhttp3/internal/concurrent/Task
     109: astore        7
     111: aload         7
     113: instanceof    #178                // class okhttp3/internal/concurrent/TaskQueue$AwaitIdleTask
     116: ifeq          134
     119: aload         7
     121: checkcast     #178                // class okhttp3/internal/concurrent/TaskQueue$AwaitIdleTask
     124: invokevirtual #181                // Method okhttp3/internal/concurrent/TaskQueue$AwaitIdleTask.getLatch:()Ljava/util/concurrent/CountDownLatch;
     127: astore        9
     129: aload_1
     130: monitorexit
     131: aload         9
     133: areturn
     134: goto          89
     137: new           #178                // class okhttp3/internal/concurrent/TaskQueue$AwaitIdleTask
     140: dup
     141: invokespecial #195                // Method okhttp3/internal/concurrent/TaskQueue$AwaitIdleTask."<init>":()V
     144: astore        7
     146: aload_0
     147: aload         7
     149: checkcast     #71                 // class okhttp3/internal/concurrent/Task
     152: lconst_0
     153: iconst_0
     154: invokevirtual #116                // Method scheduleAndDecide$okhttp:(Lokhttp3/internal/concurrent/Task;JZ)Z
     157: ifeq          168
     160: aload_0
     161: getfield      #43                 // Field taskRunner:Lokhttp3/internal/concurrent/TaskRunner;
     164: aload_0
     165: invokevirtual #120                // Method okhttp3/internal/concurrent/TaskRunner.kickCoordinator$okhttp:(Lokhttp3/internal/concurrent/TaskQueue;)V
     168: aload         7
     170: invokevirtual #181                // Method okhttp3/internal/concurrent/TaskQueue$AwaitIdleTask.getLatch:()Ljava/util/concurrent/CountDownLatch;
     173: astore        8
     175: aload_1
     176: monitorexit
     177: aload         8
     179: areturn
     180: astore_3
     181: aload_1
     182: monitorexit
     183: aload_3
     184: athrow
    Exception table:
       from    to  target type
          11    44   180   any
          49    73   180   any
          78   129   180   any
         134   175   180   any
         180   181   180   any

  public final boolean scheduleAndDecide$okhttp(okhttp3.internal.concurrent.Task, long, boolean);
    Code:
       0: aload_1
       1: ldc           #63                 // String task
       3: invokestatic  #69                 // Method kotlin/jvm/internal/Intrinsics.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_1
       7: aload_0
       8: invokevirtual #203                // Method okhttp3/internal/concurrent/Task.initQueue$okhttp:(Lokhttp3/internal/concurrent/TaskQueue;)V
      11: aload_0
      12: getfield      #43                 // Field taskRunner:Lokhttp3/internal/concurrent/TaskRunner;
      15: invokevirtual #207                // Method okhttp3/internal/concurrent/TaskRunner.getBackend:()Lokhttp3/internal/concurrent/TaskRunner$Backend;
      18: invokeinterface #213,  1          // InterfaceMethod okhttp3/internal/concurrent/TaskRunner$Backend.nanoTime:()J
      23: lstore        5
      25: lload         5
      27: lload_2
      28: ladd
      29: lstore        7
      31: aload_0
      32: getfield      #33                 // Field futureTasks:Ljava/util/List;
      35: aload_1
      36: invokeinterface #217,  2          // InterfaceMethod java/util/List.indexOf:(Ljava/lang/Object;)I
      41: istore        9
      43: iload         9
      45: iconst_m1
      46: if_icmpeq     118
      49: aload_1
      50: invokevirtual #220                // Method okhttp3/internal/concurrent/Task.getNextExecuteNanoTime$okhttp:()J
      53: lload         7
      55: lcmp
      56: ifgt          106
      59: aload_0
      60: astore        10
      62: iconst_0
      63: istore        11
      65: getstatic     #78                 // Field okhttp3/internal/concurrent/TaskRunner.Companion:Lokhttp3/internal/concurrent/TaskRunner$Companion;
      68: invokevirtual #84                 // Method okhttp3/internal/concurrent/TaskRunner$Companion.getLogger:()Ljava/util/logging/Logger;
      71: getstatic     #90                 // Field java/util/logging/Level.FINE:Ljava/util/logging/Level;
      74: invokevirtual #96                 // Method java/util/logging/Logger.isLoggable:(Ljava/util/logging/Level;)Z
      77: ifeq          103
      80: aload_1
      81: aload         10
      83: astore        19
      85: astore        18
      87: iconst_0
      88: istore        12
      90: ldc           #222                // String already scheduled
      92: astore        20
      94: aload         18
      96: aload         19
      98: aload         20
     100: invokestatic  #104                // Method okhttp3/internal/concurrent/TaskLoggerKt.access$log:(Lokhttp3/internal/concurrent/Task;Lokhttp3/internal/concurrent/TaskQueue;Ljava/lang/String;)V
     103: nop
     104: iconst_0
     105: ireturn
     106: aload_0
     107: getfield      #33                 // Field futureTasks:Ljava/util/List;
     110: iload         9
     112: invokeinterface #226,  2          // InterfaceMethod java/util/List.remove:(I)Ljava/lang/Object;
     117: pop
     118: aload_1
     119: lload         7
     121: invokevirtual #230                // Method okhttp3/internal/concurrent/Task.setNextExecuteNanoTime$okhttp:(J)V
     124: aload_0
     125: astore        10
     127: iconst_0
     128: istore        11
     130: getstatic     #78                 // Field okhttp3/internal/concurrent/TaskRunner.Companion:Lokhttp3/internal/concurrent/TaskRunner$Companion;
     133: invokevirtual #84                 // Method okhttp3/internal/concurrent/TaskRunner$Companion.getLogger:()Ljava/util/logging/Logger;
     136: getstatic     #90                 // Field java/util/logging/Level.FINE:Ljava/util/logging/Level;
     139: invokevirtual #96                 // Method java/util/logging/Logger.isLoggable:(Ljava/util/logging/Level;)Z
     142: ifeq          226
     145: aload_1
     146: aload         10
     148: astore        19
     150: astore        18
     152: iconst_0
     153: istore        12
     155: iload         4
     157: ifeq          189
     160: new           #232                // class java/lang/StringBuilder
     163: dup
     164: invokespecial #233                // Method java/lang/StringBuilder."<init>":()V
     167: ldc           #235                // String run again after
     169: invokevirtual #239                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     172: lload         7
     174: lload         5
     176: lsub
     177: invokestatic  #243                // Method okhttp3/internal/concurrent/TaskLoggerKt.formatDuration:(J)Ljava/lang/String;
     180: invokevirtual #239                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     183: invokevirtual #247                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     186: goto          215
     189: new           #232                // class java/lang/StringBuilder
     192: dup
     193: invokespecial #233                // Method java/lang/StringBuilder."<init>":()V
     196: ldc           #249                // String scheduled after
     198: invokevirtual #239                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     201: lload         7
     203: lload         5
     205: lsub
     206: invokestatic  #243                // Method okhttp3/internal/concurrent/TaskLoggerKt.formatDuration:(J)Ljava/lang/String;
     209: invokevirtual #239                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     212: invokevirtual #247                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     215: astore        20
     217: aload         18
     219: aload         19
     221: aload         20
     223: invokestatic  #104                // Method okhttp3/internal/concurrent/TaskLoggerKt.access$log:(Lokhttp3/internal/concurrent/Task;Lokhttp3/internal/concurrent/TaskQueue;Ljava/lang/String;)V
     226: nop
     227: aload_0
     228: getfield      #33                 // Field futureTasks:Ljava/util/List;
     231: astore        11
     233: iconst_0
     234: istore        12
     236: iconst_0
     237: istore        13
     239: aload         11
     241: invokeinterface #185,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     246: astore        14
     248: aload         14
     250: invokeinterface #190,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
     255: ifeq          309
     258: aload         14
     260: invokeinterface #194,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     265: astore        15
     267: aload         15
     269: checkcast     #71                 // class okhttp3/internal/concurrent/Task
     272: astore        16
     274: iconst_0
     275: istore        17
     277: aload         16
     279: invokevirtual #220                // Method okhttp3/internal/concurrent/Task.getNextExecuteNanoTime$okhttp:()J
     282: lload         5
     284: lsub
     285: lload_2
     286: lcmp
     287: ifle          294
     290: iconst_1
     291: goto          295
     294: iconst_0
     295: ifeq          303
     298: iload         13
     300: goto          310
     303: iinc          13, 1
     306: goto          248
     309: iconst_m1
     310: istore        10
     312: iload         10
     314: iconst_m1
     315: if_icmpne     329
     318: aload_0
     319: getfield      #33                 // Field futureTasks:Ljava/util/List;
     322: invokeinterface #253,  1          // InterfaceMethod java/util/List.size:()I
     327: istore        10
     329: aload_0
     330: getfield      #33                 // Field futureTasks:Ljava/util/List;
     333: iload         10
     335: aload_1
     336: invokeinterface #257,  3          // InterfaceMethod java/util/List.add:(ILjava/lang/Object;)V
     341: iload         10
     343: ifne          350
     346: iconst_1
     347: goto          351
     350: iconst_0
     351: ireturn

  public final void cancelAll();
    Code:
       0: aload_0
       1: astore_1
       2: iconst_0
       3: istore_2
       4: getstatic     #279                // Field okhttp3/internal/Util.assertionsEnabled:Z
       7: ifeq          70
      10: aload_1
      11: invokestatic  #285                // Method java/lang/Thread.holdsLock:(Ljava/lang/Object;)Z
      14: ifeq          70
      17: new           #287                // class java/lang/AssertionError
      20: dup
      21: new           #232                // class java/lang/StringBuilder
      24: dup
      25: invokespecial #233                // Method java/lang/StringBuilder."<init>":()V
      28: ldc_w         #289                // String Thread
      31: invokevirtual #239                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      34: invokestatic  #293                // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      37: dup
      38: ldc_w         #295                // String Thread.currentThread()
      41: invokestatic  #298                // Method kotlin/jvm/internal/Intrinsics.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V
      44: invokevirtual #301                // Method java/lang/Thread.getName:()Ljava/lang/String;
      47: invokevirtual #239                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      50: ldc_w         #303                // String  MUST NOT hold lock on
      53: invokevirtual #239                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      56: aload_1
      57: invokevirtual #306                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      60: invokevirtual #247                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      63: invokespecial #309                // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
      66: checkcast     #57                 // class java/lang/Throwable
      69: athrow
      70: nop
      71: aload_0
      72: getfield      #43                 // Field taskRunner:Lokhttp3/internal/concurrent/TaskRunner;
      75: astore_1
      76: iconst_0
      77: istore_2
      78: iconst_0
      79: istore_3
      80: aload_1
      81: monitorenter
      82: nop
      83: iconst_0
      84: istore        4
      86: aload_0
      87: invokevirtual #312                // Method cancelAllAndDecide$okhttp:()Z
      90: ifeq          101
      93: aload_0
      94: getfield      #43                 // Field taskRunner:Lokhttp3/internal/concurrent/TaskRunner;
      97: aload_0
      98: invokevirtual #120                // Method okhttp3/internal/concurrent/TaskRunner.kickCoordinator$okhttp:(Lokhttp3/internal/concurrent/TaskQueue;)V
     101: getstatic     #126                // Field kotlin/Unit.INSTANCE:Lkotlin/Unit;
     104: astore_3
     105: aload_1
     106: monitorexit
     107: goto          115
     110: astore_3
     111: aload_1
     112: monitorexit
     113: aload_3
     114: athrow
     115: return
    Exception table:
       from    to  target type
          82   105   110   any
         110   111   110   any

  public final void shutdown();
    Code:
       0: aload_0
       1: astore_1
       2: iconst_0
       3: istore_2
       4: getstatic     #279                // Field okhttp3/internal/Util.assertionsEnabled:Z
       7: ifeq          70
      10: aload_1
      11: invokestatic  #285                // Method java/lang/Thread.holdsLock:(Ljava/lang/Object;)Z
      14: ifeq          70
      17: new           #287                // class java/lang/AssertionError
      20: dup
      21: new           #232                // class java/lang/StringBuilder
      24: dup
      25: invokespecial #233                // Method java/lang/StringBuilder."<init>":()V
      28: ldc_w         #289                // String Thread
      31: invokevirtual #239                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      34: invokestatic  #293                // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      37: dup
      38: ldc_w         #295                // String Thread.currentThread()
      41: invokestatic  #298                // Method kotlin/jvm/internal/Intrinsics.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V
      44: invokevirtual #301                // Method java/lang/Thread.getName:()Ljava/lang/String;
      47: invokevirtual #239                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      50: ldc_w         #303                // String  MUST NOT hold lock on
      53: invokevirtual #239                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      56: aload_1
      57: invokevirtual #306                // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      60: invokevirtual #247                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      63: invokespecial #309                // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
      66: checkcast     #57                 // class java/lang/Throwable
      69: athrow
      70: nop
      71: aload_0
      72: getfield      #43                 // Field taskRunner:Lokhttp3/internal/concurrent/TaskRunner;
      75: astore_1
      76: iconst_0
      77: istore_2
      78: iconst_0
      79: istore_3
      80: aload_1
      81: monitorenter
      82: nop
      83: iconst_0
      84: istore        4
      86: aload_0
      87: iconst_1
      88: putfield      #10                 // Field shutdown:Z
      91: aload_0
      92: invokevirtual #312                // Method cancelAllAndDecide$okhttp:()Z
      95: ifeq          106
      98: aload_0
      99: getfield      #43                 // Field taskRunner:Lokhttp3/internal/concurrent/TaskRunner;
     102: aload_0
     103: invokevirtual #120                // Method okhttp3/internal/concurrent/TaskRunner.kickCoordinator$okhttp:(Lokhttp3/internal/concurrent/TaskQueue;)V
     106: getstatic     #126                // Field kotlin/Unit.INSTANCE:Lkotlin/Unit;
     109: astore_3
     110: aload_1
     111: monitorexit
     112: goto          120
     115: astore_3
     116: aload_1
     117: monitorexit
     118: aload_3
     119: athrow
     120: return
    Exception table:
       from    to  target type
          82   110   115   any
         115   116   115   any

  public final boolean cancelAllAndDecide$okhttp();
    Code:
       0: aload_0
       1: getfield      #22                 // Field activeTask:Lokhttp3/internal/concurrent/Task;
       4: ifnull        26
       7: aload_0
       8: getfield      #22                 // Field activeTask:Lokhttp3/internal/concurrent/Task;
      11: dup
      12: invokestatic  #319                // Method kotlin/jvm/internal/Intrinsics.checkNotNull:(Ljava/lang/Object;)V
      15: invokevirtual #74                 // Method okhttp3/internal/concurrent/Task.getCancelable:()Z
      18: ifeq          26
      21: aload_0
      22: iconst_1
      23: putfield      #37                 // Field cancelActiveTask:Z
      26: iconst_0
      27: istore_1
      28: aload_0
      29: getfield      #33                 // Field futureTasks:Ljava/util/List;
      32: invokeinterface #253,  1          // InterfaceMethod java/util/List.size:()I
      37: iconst_1
      38: isub
      39: istore_2
      40: iconst_0
      41: istore_3
      42: iload_2
      43: iflt          146
      46: aload_0
      47: getfield      #33                 // Field futureTasks:Ljava/util/List;
      50: iload_2
      51: invokeinterface #322,  2          // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      56: checkcast     #71                 // class okhttp3/internal/concurrent/Task
      59: invokevirtual #74                 // Method okhttp3/internal/concurrent/Task.getCancelable:()Z
      62: ifeq          140
      65: aload_0
      66: getfield      #33                 // Field futureTasks:Ljava/util/List;
      69: iload_2
      70: invokeinterface #322,  2          // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      75: checkcast     #71                 // class okhttp3/internal/concurrent/Task
      78: astore        4
      80: aload_0
      81: astore        5
      83: iconst_0
      84: istore        6
      86: getstatic     #78                 // Field okhttp3/internal/concurrent/TaskRunner.Companion:Lokhttp3/internal/concurrent/TaskRunner$Companion;
      89: invokevirtual #84                 // Method okhttp3/internal/concurrent/TaskRunner$Companion.getLogger:()Ljava/util/logging/Logger;
      92: getstatic     #90                 // Field java/util/logging/Level.FINE:Ljava/util/logging/Level;
      95: invokevirtual #96                 // Method java/util/logging/Logger.isLoggable:(Ljava/util/logging/Level;)Z
      98: ifeq          126
     101: aload         4
     103: aload         5
     105: astore        9
     107: astore        8
     109: iconst_0
     110: istore        7
     112: ldc_w         #324                // String canceled
     115: astore        10
     117: aload         8
     119: aload         9
     121: aload         10
     123: invokestatic  #104                // Method okhttp3/internal/concurrent/TaskLoggerKt.access$log:(Lokhttp3/internal/concurrent/Task;Lokhttp3/internal/concurrent/TaskQueue;Ljava/lang/String;)V
     126: nop
     127: iconst_1
     128: istore_1
     129: aload_0
     130: getfield      #33                 // Field futureTasks:Ljava/util/List;
     133: iload_2
     134: invokeinterface #226,  2          // InterfaceMethod java/util/List.remove:(I)Ljava/lang/Object;
     139: pop
     140: iinc          2, -1
     143: goto          42
     146: iload_1
     147: ireturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #329                // Field name:Ljava/lang/String;
       4: areturn

  public final okhttp3.internal.concurrent.TaskRunner getTaskRunner$okhttp();
    Code:
       0: aload_0
       1: getfield      #43                 // Field taskRunner:Lokhttp3/internal/concurrent/TaskRunner;
       4: areturn

  public final java.lang.String getName$okhttp();
    Code:
       0: aload_0
       1: getfield      #329                // Field name:Ljava/lang/String;
       4: areturn

  public okhttp3.internal.concurrent.TaskQueue(okhttp3.internal.concurrent.TaskRunner, java.lang.String);
    Code:
       0: aload_1
       1: ldc_w         #334                // String taskRunner
       4: invokestatic  #69                 // Method kotlin/jvm/internal/Intrinsics.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V
       7: aload_2
       8: ldc           #143                // String name
      10: invokestatic  #69                 // Method kotlin/jvm/internal/Intrinsics.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V
      13: aload_0
      14: invokespecial #335                // Method java/lang/Object."<init>":()V
      17: aload_0
      18: aload_1
      19: putfield      #43                 // Field taskRunner:Lokhttp3/internal/concurrent/TaskRunner;
      22: aload_0
      23: aload_2
      24: putfield      #329                // Field name:Ljava/lang/String;
      27: aload_0
      28: iconst_0
      29: istore_3
      30: new           #337                // class java/util/ArrayList
      33: dup
      34: invokespecial #338                // Method java/util/ArrayList."<init>":()V
      37: checkcast     #59                 // class java/util/List
      40: putfield      #33                 // Field futureTasks:Ljava/util/List;
      43: return
}
