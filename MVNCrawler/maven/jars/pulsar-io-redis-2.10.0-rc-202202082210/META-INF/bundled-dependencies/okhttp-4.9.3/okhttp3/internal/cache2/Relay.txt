Compiled from "Relay.kt"
public final class okhttp3.internal.cache2.Relay {
  private java.lang.Thread upstreamReader;

  private final okio.Buffer upstreamBuffer;

  private boolean complete;

  private final okio.Buffer buffer;

  private int sourceCount;

  private java.io.RandomAccessFile file;

  private okio.Source upstream;

  private long upstreamPos;

  private final okio.ByteString metadata;

  private final long bufferMaxSize;

  private static final int SOURCE_UPSTREAM;

  private static final int SOURCE_FILE;

  public static final okio.ByteString PREFIX_CLEAN;

  public static final okio.ByteString PREFIX_DIRTY;

  private static final long FILE_HEADER_SIZE;

  public static final okhttp3.internal.cache2.Relay$Companion Companion;

  public final java.lang.Thread getUpstreamReader();
    Code:
       0: aload_0
       1: getfield      #11                 // Field upstreamReader:Ljava/lang/Thread;
       4: areturn

  public final void setUpstreamReader(java.lang.Thread);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #11                 // Field upstreamReader:Ljava/lang/Thread;
       5: return

  public final okio.Buffer getUpstreamBuffer();
    Code:
       0: aload_0
       1: getfield      #23                 // Field upstreamBuffer:Lokio/Buffer;
       4: areturn

  public final boolean getComplete();
    Code:
       0: aload_0
       1: getfield      #29                 // Field complete:Z
       4: ireturn

  public final void setComplete(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #29                 // Field complete:Z
       5: return

  public final okio.Buffer getBuffer();
    Code:
       0: aload_0
       1: getfield      #35                 // Field buffer:Lokio/Buffer;
       4: areturn

  public final int getSourceCount();
    Code:
       0: aload_0
       1: getfield      #41                 // Field sourceCount:I
       4: ireturn

  public final void setSourceCount(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #41                 // Field sourceCount:I
       5: return

  public final boolean isClosed();
    Code:
       0: aload_0
       1: getfield      #48                 // Field file:Ljava/io/RandomAccessFile;
       4: ifnonnull     11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  private final void writeHeader(okio.ByteString, long, long) throws java.io.IOException;
    Code:
       0: new           #54                 // class okio/Buffer
       3: dup
       4: invokespecial #58                 // Method okio/Buffer."<init>":()V
       7: astore        7
       9: iconst_0
      10: istore        8
      12: iconst_0
      13: istore        9
      15: aload         7
      17: astore        10
      19: iconst_0
      20: istore        11
      22: aload         10
      24: aload_1
      25: invokevirtual #62                 // Method okio/Buffer.write:(Lokio/ByteString;)Lokio/Buffer;
      28: pop
      29: aload         10
      31: lload_2
      32: invokevirtual #66                 // Method okio/Buffer.writeLong:(J)Lokio/Buffer;
      35: pop
      36: aload         10
      38: lload         4
      40: invokevirtual #66                 // Method okio/Buffer.writeLong:(J)Lokio/Buffer;
      43: pop
      44: aload         10
      46: invokevirtual #70                 // Method okio/Buffer.size:()J
      49: ldc2_w        #71                 // long 32l
      52: lcmp
      53: ifne          60
      56: iconst_1
      57: goto          61
      60: iconst_0
      61: istore        12
      63: iconst_0
      64: istore        13
      66: iconst_0
      67: istore        14
      69: iconst_0
      70: istore        14
      72: iconst_0
      73: istore        15
      75: iload         12
      77: ifne          103
      80: iconst_0
      81: istore        16
      83: ldc           #74                 // String Failed requirement.
      85: astore        15
      87: new           #76                 // class java/lang/IllegalArgumentException
      90: dup
      91: aload         15
      93: invokevirtual #80                 // Method java/lang/Object.toString:()Ljava/lang/String;
      96: invokespecial #83                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      99: checkcast     #85                 // class java/lang/Throwable
     102: athrow
     103: nop
     104: aload         7
     106: astore        6
     108: new           #87                 // class okhttp3/internal/cache2/FileOperator
     111: dup
     112: aload_0
     113: getfield      #48                 // Field file:Ljava/io/RandomAccessFile;
     116: dup
     117: invokestatic  #93                 // Method kotlin/jvm/internal/Intrinsics.checkNotNull:(Ljava/lang/Object;)V
     120: invokevirtual #99                 // Method java/io/RandomAccessFile.getChannel:()Ljava/nio/channels/FileChannel;
     123: dup
     124: ldc           #101                // String file!!.channel
     126: invokestatic  #105                // Method kotlin/jvm/internal/Intrinsics.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V
     129: invokespecial #108                // Method okhttp3/internal/cache2/FileOperator."<init>":(Ljava/nio/channels/FileChannel;)V
     132: astore        7
     134: aload         7
     136: lconst_0
     137: aload         6
     139: ldc2_w        #71                 // long 32l
     142: invokevirtual #111                // Method okhttp3/internal/cache2/FileOperator.write:(JLokio/Buffer;J)V
     145: return

  private final void writeMetadata(long) throws java.io.IOException;
    Code:
       0: new           #54                 // class okio/Buffer
       3: dup
       4: invokespecial #58                 // Method okio/Buffer."<init>":()V
       7: astore_3
       8: aload_3
       9: aload_0
      10: getfield      #128                // Field metadata:Lokio/ByteString;
      13: invokevirtual #62                 // Method okio/Buffer.write:(Lokio/ByteString;)Lokio/Buffer;
      16: pop
      17: new           #87                 // class okhttp3/internal/cache2/FileOperator
      20: dup
      21: aload_0
      22: getfield      #48                 // Field file:Ljava/io/RandomAccessFile;
      25: dup
      26: invokestatic  #93                 // Method kotlin/jvm/internal/Intrinsics.checkNotNull:(Ljava/lang/Object;)V
      29: invokevirtual #99                 // Method java/io/RandomAccessFile.getChannel:()Ljava/nio/channels/FileChannel;
      32: dup
      33: ldc           #101                // String file!!.channel
      35: invokestatic  #105                // Method kotlin/jvm/internal/Intrinsics.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V
      38: invokespecial #108                // Method okhttp3/internal/cache2/FileOperator."<init>":(Ljava/nio/channels/FileChannel;)V
      41: astore        4
      43: aload         4
      45: ldc2_w        #71                 // long 32l
      48: lload_1
      49: ladd
      50: aload_3
      51: aload_0
      52: getfield      #128                // Field metadata:Lokio/ByteString;
      55: invokevirtual #130                // Method okio/ByteString.size:()I
      58: i2l
      59: invokevirtual #111                // Method okhttp3/internal/cache2/FileOperator.write:(JLokio/Buffer;J)V
      62: return

  public final void commit(long) throws java.io.IOException;
    Code:
       0: aload_0
       1: lload_1
       2: invokespecial #134                // Method writeMetadata:(J)V
       5: aload_0
       6: getfield      #48                 // Field file:Ljava/io/RandomAccessFile;
       9: dup
      10: invokestatic  #93                 // Method kotlin/jvm/internal/Intrinsics.checkNotNull:(Ljava/lang/Object;)V
      13: invokevirtual #99                 // Method java/io/RandomAccessFile.getChannel:()Ljava/nio/channels/FileChannel;
      16: iconst_0
      17: invokevirtual #139                // Method java/nio/channels/FileChannel.force:(Z)V
      20: aload_0
      21: getstatic     #142                // Field PREFIX_CLEAN:Lokio/ByteString;
      24: lload_1
      25: aload_0
      26: getfield      #128                // Field metadata:Lokio/ByteString;
      29: invokevirtual #130                // Method okio/ByteString.size:()I
      32: i2l
      33: invokespecial #144                // Method writeHeader:(Lokio/ByteString;JJ)V
      36: aload_0
      37: getfield      #48                 // Field file:Ljava/io/RandomAccessFile;
      40: dup
      41: invokestatic  #93                 // Method kotlin/jvm/internal/Intrinsics.checkNotNull:(Ljava/lang/Object;)V
      44: invokevirtual #99                 // Method java/io/RandomAccessFile.getChannel:()Ljava/nio/channels/FileChannel;
      47: iconst_0
      48: invokevirtual #139                // Method java/nio/channels/FileChannel.force:(Z)V
      51: aload_0
      52: astore_3
      53: iconst_0
      54: istore        4
      56: iconst_0
      57: istore        5
      59: aload_3
      60: monitorenter
      61: nop
      62: iconst_0
      63: istore        6
      65: aload_0
      66: iconst_1
      67: putfield      #29                 // Field complete:Z
      70: getstatic     #150                // Field kotlin/Unit.INSTANCE:Lkotlin/Unit;
      73: astore        5
      75: aload_3
      76: monitorexit
      77: goto          87
      80: astore        5
      82: aload_3
      83: monitorexit
      84: aload         5
      86: athrow
      87: aload_0
      88: getfield      #154                // Field upstream:Lokio/Source;
      91: dup
      92: ifnull        104
      95: checkcast     #156                // class java/io/Closeable
      98: invokestatic  #162                // Method okhttp3/internal/Util.closeQuietly:(Ljava/io/Closeable;)V
     101: goto          105
     104: pop
     105: aload_0
     106: aconst_null
     107: checkcast     #164                // class okio/Source
     110: putfield      #154                // Field upstream:Lokio/Source;
     113: return
    Exception table:
       from    to  target type
          61    75    80   any
          80    82    80   any

  public final okio.ByteString metadata();
    Code:
       0: aload_0
       1: getfield      #128                // Field metadata:Lokio/ByteString;
       4: areturn

  public final okio.Source newSource();
    Code:
       0: aload_0
       1: astore_1
       2: iconst_0
       3: istore_2
       4: iconst_0
       5: istore_3
       6: aload_1
       7: monitorenter
       8: nop
       9: iconst_0
      10: istore        4
      12: aload_0
      13: getfield      #48                 // Field file:Ljava/io/RandomAccessFile;
      16: ifnonnull     27
      19: aconst_null
      20: astore        6
      22: aload_1
      23: monitorexit
      24: aload         6
      26: areturn
      27: aload_0
      28: dup
      29: getfield      #41                 // Field sourceCount:I
      32: dup
      33: istore        5
      35: iconst_1
      36: iadd
      37: putfield      #41                 // Field sourceCount:I
      40: iload         5
      42: istore_3
      43: aload_1
      44: monitorexit
      45: goto          53
      48: astore_3
      49: aload_1
      50: monitorexit
      51: aload_3
      52: athrow
      53: new           #170                // class okhttp3/internal/cache2/Relay$RelaySource
      56: dup
      57: aload_0
      58: invokespecial #173                // Method okhttp3/internal/cache2/Relay$RelaySource."<init>":(Lokhttp3/internal/cache2/Relay;)V
      61: checkcast     #164                // class okio/Source
      64: areturn
    Exception table:
       from    to  target type
           8    22    48   any
          27    43    48   any
          48    49    48   any

  public final java.io.RandomAccessFile getFile();
    Code:
       0: aload_0
       1: getfield      #48                 // Field file:Ljava/io/RandomAccessFile;
       4: areturn

  public final void setFile(java.io.RandomAccessFile);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #48                 // Field file:Ljava/io/RandomAccessFile;
       5: return

  public final okio.Source getUpstream();
    Code:
       0: aload_0
       1: getfield      #154                // Field upstream:Lokio/Source;
       4: areturn

  public final void setUpstream(okio.Source);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #154                // Field upstream:Lokio/Source;
       5: return

  public final long getUpstreamPos();
    Code:
       0: aload_0
       1: getfield      #185                // Field upstreamPos:J
       4: lreturn

  public final void setUpstreamPos(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #185                // Field upstreamPos:J
       5: return

  public final long getBufferMaxSize();
    Code:
       0: aload_0
       1: getfield      #190                // Field bufferMaxSize:J
       4: lreturn

  private okhttp3.internal.cache2.Relay(java.io.RandomAccessFile, okio.Source, long, okio.ByteString, long);
    Code:
       0: aload_0
       1: invokespecial #192                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #48                 // Field file:Ljava/io/RandomAccessFile;
       9: aload_0
      10: aload_2
      11: putfield      #154                // Field upstream:Lokio/Source;
      14: aload_0
      15: lload_3
      16: putfield      #185                // Field upstreamPos:J
      19: aload_0
      20: aload         5
      22: putfield      #128                // Field metadata:Lokio/ByteString;
      25: aload_0
      26: lload         6
      28: putfield      #190                // Field bufferMaxSize:J
      31: aload_0
      32: new           #54                 // class okio/Buffer
      35: dup
      36: invokespecial #58                 // Method okio/Buffer."<init>":()V
      39: putfield      #23                 // Field upstreamBuffer:Lokio/Buffer;
      42: aload_0
      43: aload_0
      44: getfield      #154                // Field upstream:Lokio/Source;
      47: ifnonnull     54
      50: iconst_1
      51: goto          55
      54: iconst_0
      55: putfield      #29                 // Field complete:Z
      58: aload_0
      59: new           #54                 // class okio/Buffer
      62: dup
      63: invokespecial #58                 // Method okio/Buffer."<init>":()V
      66: putfield      #35                 // Field buffer:Lokio/Buffer;
      69: return

  static {};
    Code:
       0: new           #225                // class okhttp3/internal/cache2/Relay$Companion
       3: dup
       4: aconst_null
       5: invokespecial #228                // Method okhttp3/internal/cache2/Relay$Companion."<init>":(Lkotlin/jvm/internal/DefaultConstructorMarker;)V
       8: putstatic     #230                // Field Companion:Lokhttp3/internal/cache2/Relay$Companion;
      11: getstatic     #233                // Field okio/ByteString.Companion:Lokio/ByteString$Companion;
      14: ldc           #235                // String OkHttp cache v1\n
      16: invokevirtual #241                // Method okio/ByteString$Companion.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;
      19: putstatic     #142                // Field PREFIX_CLEAN:Lokio/ByteString;
      22: getstatic     #233                // Field okio/ByteString.Companion:Lokio/ByteString$Companion;
      25: ldc           #243                // String OkHttp DIRTY :(\n
      27: invokevirtual #241                // Method okio/ByteString$Companion.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;
      30: putstatic     #245                // Field PREFIX_DIRTY:Lokio/ByteString;
      33: return

  public okhttp3.internal.cache2.Relay(java.io.RandomAccessFile, okio.Source, long, okio.ByteString, long, kotlin.jvm.internal.DefaultConstructorMarker);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: lload_3
       4: aload         5
       6: lload         6
       8: invokespecial #205                // Method "<init>":(Ljava/io/RandomAccessFile;Lokio/Source;JLokio/ByteString;J)V
      11: return

  public static final void access$writeHeader(okhttp3.internal.cache2.Relay, okio.ByteString, long, long);
    Code:
       0: aload_0
       1: aload_1
       2: lload_2
       3: lload         4
       5: invokespecial #144                // Method writeHeader:(Lokio/ByteString;JJ)V
       8: return
}
