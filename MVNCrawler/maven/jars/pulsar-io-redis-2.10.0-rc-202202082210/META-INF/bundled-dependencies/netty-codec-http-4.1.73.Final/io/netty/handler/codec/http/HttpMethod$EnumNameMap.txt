Compiled from "HttpMethod.java"
final class io.netty.handler.codec.http.HttpMethod$EnumNameMap<T> {
  private final io.netty.handler.codec.http.HttpMethod$EnumNameMap$Node<T>[] values;

  private final int valuesMask;

  io.netty.handler.codec.http.HttpMethod$EnumNameMap(io.netty.handler.codec.http.HttpMethod$EnumNameMap$Node<T>...);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: arraylength
       7: invokestatic  #2                  // Method io/netty/util/internal/MathUtil.findNextPositivePowerOfTwo:(I)I
      10: anewarray     #3                  // class io/netty/handler/codec/http/HttpMethod$EnumNameMap$Node
      13: checkcast     #4                  // class "[Lio/netty/handler/codec/http/HttpMethod$EnumNameMap$Node;"
      16: putfield      #5                  // Field values:[Lio/netty/handler/codec/http/HttpMethod$EnumNameMap$Node;
      19: aload_0
      20: aload_0
      21: getfield      #5                  // Field values:[Lio/netty/handler/codec/http/HttpMethod$EnumNameMap$Node;
      24: arraylength
      25: iconst_1
      26: isub
      27: putfield      #6                  // Field valuesMask:I
      30: aload_1
      31: astore_2
      32: aload_2
      33: arraylength
      34: istore_3
      35: iconst_0
      36: istore        4
      38: iload         4
      40: iload_3
      41: if_icmpge     154
      44: aload_2
      45: iload         4
      47: aaload
      48: astore        5
      50: aload         5
      52: getfield      #7                  // Field io/netty/handler/codec/http/HttpMethod$EnumNameMap$Node.key:Ljava/lang/String;
      55: invokestatic  #8                  // Method hashCode:(Ljava/lang/String;)I
      58: aload_0
      59: getfield      #6                  // Field valuesMask:I
      62: iand
      63: istore        6
      65: aload_0
      66: getfield      #5                  // Field values:[Lio/netty/handler/codec/http/HttpMethod$EnumNameMap$Node;
      69: iload         6
      71: aaload
      72: ifnull        139
      75: new           #9                  // class java/lang/IllegalArgumentException
      78: dup
      79: new           #10                 // class java/lang/StringBuilder
      82: dup
      83: invokespecial #11                 // Method java/lang/StringBuilder."<init>":()V
      86: ldc           #12                 // String index
      88: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      91: iload         6
      93: invokevirtual #14                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      96: ldc           #15                 // String  collision between values: [
      98: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     101: aload_0
     102: getfield      #5                  // Field values:[Lio/netty/handler/codec/http/HttpMethod$EnumNameMap$Node;
     105: iload         6
     107: aaload
     108: getfield      #7                  // Field io/netty/handler/codec/http/HttpMethod$EnumNameMap$Node.key:Ljava/lang/String;
     111: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     114: ldc           #16                 // String ,
     116: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     119: aload         5
     121: getfield      #7                  // Field io/netty/handler/codec/http/HttpMethod$EnumNameMap$Node.key:Ljava/lang/String;
     124: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     127: bipush        93
     129: invokevirtual #17                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
     132: invokevirtual #18                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     135: invokespecial #19                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     138: athrow
     139: aload_0
     140: getfield      #5                  // Field values:[Lio/netty/handler/codec/http/HttpMethod$EnumNameMap$Node;
     143: iload         6
     145: aload         5
     147: aastore
     148: iinc          4, 1
     151: goto          38
     154: return

  T get(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #5                  // Field values:[Lio/netty/handler/codec/http/HttpMethod$EnumNameMap$Node;
       4: aload_1
       5: invokestatic  #8                  // Method hashCode:(Ljava/lang/String;)I
       8: aload_0
       9: getfield      #6                  // Field valuesMask:I
      12: iand
      13: aaload
      14: astore_2
      15: aload_2
      16: ifnull        30
      19: aload_2
      20: getfield      #7                  // Field io/netty/handler/codec/http/HttpMethod$EnumNameMap$Node.key:Ljava/lang/String;
      23: aload_1
      24: invokevirtual #20                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      27: ifne          34
      30: aconst_null
      31: goto          38
      34: aload_2
      35: getfield      #21                 // Field io/netty/handler/codec/http/HttpMethod$EnumNameMap$Node.value:Ljava/lang/Object;
      38: areturn

  private static int hashCode(java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #22                 // Method java/lang/String.hashCode:()I
       4: bipush        6
       6: iushr
       7: ireturn
}
