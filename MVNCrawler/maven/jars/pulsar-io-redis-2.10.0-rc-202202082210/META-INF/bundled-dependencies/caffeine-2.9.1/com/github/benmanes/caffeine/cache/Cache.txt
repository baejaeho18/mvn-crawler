Compiled from "Cache.java"
public interface com.github.benmanes.caffeine.cache.Cache<K, V> {
  public abstract V getIfPresent(java.lang.Object);

  public abstract V get(K, java.util.function.Function<? super K, ? extends V>);

  public abstract java.util.Map<K, V> getAllPresent(java.lang.Iterable<?>);

  public default java.util.Map<K, V> getAll(java.lang.Iterable<? extends K>, java.util.function.Function<java.lang.Iterable<? extends K>, java.util.Map<K, V>>);
    Code:
       0: new           #1                  // class java/lang/UnsupportedOperationException
       3: dup
       4: invokespecial #2                  // Method java/lang/UnsupportedOperationException."<init>":()V
       7: athrow

  public abstract void put(K, V);

  public abstract void putAll(java.util.Map<? extends K, ? extends V>);

  public abstract void invalidate(java.lang.Object);

  public abstract void invalidateAll(java.lang.Iterable<?>);

  public abstract void invalidateAll();

  public abstract long estimatedSize();

  public abstract com.github.benmanes.caffeine.cache.stats.CacheStats stats();

  public abstract java.util.concurrent.ConcurrentMap<K, V> asMap();

  public abstract void cleanUp();

  public abstract com.github.benmanes.caffeine.cache.Policy<K, V> policy();
}
