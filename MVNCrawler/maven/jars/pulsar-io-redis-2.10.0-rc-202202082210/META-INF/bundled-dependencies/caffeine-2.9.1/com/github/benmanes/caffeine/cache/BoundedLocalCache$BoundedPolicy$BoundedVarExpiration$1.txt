Compiled from "BoundedLocalCache.java"
class com.github.benmanes.caffeine.cache.BoundedLocalCache$BoundedPolicy$BoundedVarExpiration$1 implements com.github.benmanes.caffeine.cache.Expiry<K, V> {
  final java.util.concurrent.TimeUnit val$unit;

  final long val$duration;

  final com.github.benmanes.caffeine.cache.BoundedLocalCache$BoundedPolicy$BoundedVarExpiration this$1;

  com.github.benmanes.caffeine.cache.BoundedLocalCache$BoundedPolicy$BoundedVarExpiration$1(com.github.benmanes.caffeine.cache.BoundedLocalCache$BoundedPolicy$BoundedVarExpiration, java.util.concurrent.TimeUnit, long);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$1:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy$BoundedVarExpiration;
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field val$unit:Ljava/util/concurrent/TimeUnit;
      10: aload_0
      11: lload_3
      12: putfield      #3                  // Field val$duration:J
      15: aload_0
      16: invokespecial #4                  // Method java/lang/Object."<init>":()V
      19: return

  public long expireAfterCreate(K, V, long);
    Code:
       0: aload_0
       1: getfield      #2                  // Field val$unit:Ljava/util/concurrent/TimeUnit;
       4: aload_0
       5: getfield      #3                  // Field val$duration:J
       8: invokevirtual #5                  // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      11: lreturn

  public long expireAfterUpdate(K, V, long, long);
    Code:
       0: aload_0
       1: getfield      #2                  // Field val$unit:Ljava/util/concurrent/TimeUnit;
       4: aload_0
       5: getfield      #3                  // Field val$duration:J
       8: invokevirtual #5                  // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      11: lreturn

  public long expireAfterRead(K, V, long, long);
    Code:
       0: lload         5
       2: lreturn
}
