Compiled from "PWAWR.java"
class com.github.benmanes.caffeine.cache.PWAWR<K, V> extends com.github.benmanes.caffeine.cache.PWAW<K, V> {
  com.github.benmanes.caffeine.cache.PWAWR();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/github/benmanes/caffeine/cache/PWAW."<init>":()V
       4: return

  com.github.benmanes.caffeine.cache.PWAWR(K, java.lang.ref.ReferenceQueue<K>, V, java.lang.ref.ReferenceQueue<V>, int, long);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: iload         5
       8: lload         6
      10: invokespecial #2                  // Method com/github/benmanes/caffeine/cache/PWAW."<init>":(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;IJ)V
      13: return

  com.github.benmanes.caffeine.cache.PWAWR(java.lang.Object, V, java.lang.ref.ReferenceQueue<V>, int, long);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: iload         4
       6: lload         5
       8: invokespecial #3                  // Method com/github/benmanes/caffeine/cache/PWAW."<init>":(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;IJ)V
      11: return

  public com.github.benmanes.caffeine.cache.Node<K, V> getPreviousInVariableOrder();
    Code:
       0: aload_0
       1: getfield      #4                  // Field previousInWriteOrder:Lcom/github/benmanes/caffeine/cache/Node;
       4: areturn

  public void setPreviousInVariableOrder(com.github.benmanes.caffeine.cache.Node<K, V>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field previousInWriteOrder:Lcom/github/benmanes/caffeine/cache/Node;
       5: return

  public com.github.benmanes.caffeine.cache.Node<K, V> getNextInVariableOrder();
    Code:
       0: aload_0
       1: getfield      #5                  // Field nextInWriteOrder:Lcom/github/benmanes/caffeine/cache/Node;
       4: areturn

  public void setNextInVariableOrder(com.github.benmanes.caffeine.cache.Node<K, V>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field nextInWriteOrder:Lcom/github/benmanes/caffeine/cache/Node;
       5: return

  public long getVariableTime();
    Code:
       0: getstatic     #6                  // Field com/github/benmanes/caffeine/cache/UnsafeAccess.UNSAFE:Lsun/misc/Unsafe;
       3: aload_0
       4: getstatic     #7                  // Field ACCESS_TIME_OFFSET:J
       7: invokevirtual #8                  // Method sun/misc/Unsafe.getLong:(Ljava/lang/Object;J)J
      10: lreturn

  public void setVariableTime(long);
    Code:
       0: getstatic     #6                  // Field com/github/benmanes/caffeine/cache/UnsafeAccess.UNSAFE:Lsun/misc/Unsafe;
       3: aload_0
       4: getstatic     #7                  // Field ACCESS_TIME_OFFSET:J
       7: lload_1
       8: invokevirtual #9                  // Method sun/misc/Unsafe.putLong:(Ljava/lang/Object;JJ)V
      11: return

  public boolean casVariableTime(long, long);
    Code:
       0: aload_0
       1: getfield      #10                 // Field accessTime:J
       4: lload_1
       5: lcmp
       6: ifne          28
       9: getstatic     #6                  // Field com/github/benmanes/caffeine/cache/UnsafeAccess.UNSAFE:Lsun/misc/Unsafe;
      12: aload_0
      13: getstatic     #7                  // Field ACCESS_TIME_OFFSET:J
      16: lload_1
      17: lload_3
      18: invokevirtual #11                 // Method sun/misc/Unsafe.compareAndSwapLong:(Ljava/lang/Object;JJJ)Z
      21: ifeq          28
      24: iconst_1
      25: goto          29
      28: iconst_0
      29: ireturn

  public final boolean casWriteTime(long, long);
    Code:
       0: aload_0
       1: getfield      #12                 // Field writeTime:J
       4: lload_1
       5: lcmp
       6: ifne          28
       9: getstatic     #6                  // Field com/github/benmanes/caffeine/cache/UnsafeAccess.UNSAFE:Lsun/misc/Unsafe;
      12: aload_0
      13: getstatic     #13                 // Field WRITE_TIME_OFFSET:J
      16: lload_1
      17: lload_3
      18: invokevirtual #11                 // Method sun/misc/Unsafe.compareAndSwapLong:(Ljava/lang/Object;JJJ)Z
      21: ifeq          28
      24: iconst_1
      25: goto          29
      28: iconst_0
      29: ireturn

  public com.github.benmanes.caffeine.cache.Node<K, V> newNode(K, java.lang.ref.ReferenceQueue<K>, V, java.lang.ref.ReferenceQueue<V>, int, long);
    Code:
       0: new           #14                 // class com/github/benmanes/caffeine/cache/PWAWR
       3: dup
       4: aload_1
       5: aload_2
       6: aload_3
       7: aload         4
       9: iload         5
      11: lload         6
      13: invokespecial #15                 // Method "<init>":(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;IJ)V
      16: areturn

  public com.github.benmanes.caffeine.cache.Node<K, V> newNode(java.lang.Object, V, java.lang.ref.ReferenceQueue<V>, int, long);
    Code:
       0: new           #14                 // class com/github/benmanes/caffeine/cache/PWAWR
       3: dup
       4: aload_1
       5: aload_2
       6: aload_3
       7: iload         4
       9: lload         5
      11: invokespecial #16                 // Method "<init>":(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;IJ)V
      14: areturn
}
