Compiled from "FSR.java"
class com.github.benmanes.caffeine.cache.FSR<K, V> extends com.github.benmanes.caffeine.cache.FS<K, V> {
  protected static final long WRITE_TIME_OFFSET;

  volatile long writeTime;

  com.github.benmanes.caffeine.cache.FSR();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method com/github/benmanes/caffeine/cache/FS."<init>":()V
       4: return

  com.github.benmanes.caffeine.cache.FSR(K, java.lang.ref.ReferenceQueue<K>, V, java.lang.ref.ReferenceQueue<V>, int, long);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: iload         5
       8: lload         6
      10: invokespecial #2                  // Method com/github/benmanes/caffeine/cache/FS."<init>":(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;IJ)V
      13: getstatic     #3                  // Field com/github/benmanes/caffeine/cache/UnsafeAccess.UNSAFE:Lsun/misc/Unsafe;
      16: aload_0
      17: getstatic     #4                  // Field WRITE_TIME_OFFSET:J
      20: lload         6
      22: invokevirtual #5                  // Method sun/misc/Unsafe.putLong:(Ljava/lang/Object;JJ)V
      25: return

  com.github.benmanes.caffeine.cache.FSR(java.lang.Object, V, java.lang.ref.ReferenceQueue<V>, int, long);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: iload         4
       6: lload         5
       8: invokespecial #6                  // Method com/github/benmanes/caffeine/cache/FS."<init>":(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;IJ)V
      11: getstatic     #3                  // Field com/github/benmanes/caffeine/cache/UnsafeAccess.UNSAFE:Lsun/misc/Unsafe;
      14: aload_0
      15: getstatic     #4                  // Field WRITE_TIME_OFFSET:J
      18: lload         5
      20: invokevirtual #5                  // Method sun/misc/Unsafe.putLong:(Ljava/lang/Object;JJ)V
      23: return

  public final long getWriteTime();
    Code:
       0: getstatic     #3                  // Field com/github/benmanes/caffeine/cache/UnsafeAccess.UNSAFE:Lsun/misc/Unsafe;
       3: aload_0
       4: getstatic     #4                  // Field WRITE_TIME_OFFSET:J
       7: invokevirtual #7                  // Method sun/misc/Unsafe.getLong:(Ljava/lang/Object;J)J
      10: lreturn

  public final void setWriteTime(long);
    Code:
       0: getstatic     #3                  // Field com/github/benmanes/caffeine/cache/UnsafeAccess.UNSAFE:Lsun/misc/Unsafe;
       3: aload_0
       4: getstatic     #4                  // Field WRITE_TIME_OFFSET:J
       7: lload_1
       8: invokevirtual #5                  // Method sun/misc/Unsafe.putLong:(Ljava/lang/Object;JJ)V
      11: return

  public final boolean casWriteTime(long, long);
    Code:
       0: aload_0
       1: getfield      #8                  // Field writeTime:J
       4: lload_1
       5: lcmp
       6: ifne          28
       9: getstatic     #3                  // Field com/github/benmanes/caffeine/cache/UnsafeAccess.UNSAFE:Lsun/misc/Unsafe;
      12: aload_0
      13: getstatic     #4                  // Field WRITE_TIME_OFFSET:J
      16: lload_1
      17: lload_3
      18: invokevirtual #9                  // Method sun/misc/Unsafe.compareAndSwapLong:(Ljava/lang/Object;JJJ)Z
      21: ifeq          28
      24: iconst_1
      25: goto          29
      28: iconst_0
      29: ireturn

  public com.github.benmanes.caffeine.cache.Node<K, V> newNode(K, java.lang.ref.ReferenceQueue<K>, V, java.lang.ref.ReferenceQueue<V>, int, long);
    Code:
       0: new           #10                 // class com/github/benmanes/caffeine/cache/FSR
       3: dup
       4: aload_1
       5: aload_2
       6: aload_3
       7: aload         4
       9: iload         5
      11: lload         6
      13: invokespecial #11                 // Method "<init>":(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;IJ)V
      16: areturn

  public com.github.benmanes.caffeine.cache.Node<K, V> newNode(java.lang.Object, V, java.lang.ref.ReferenceQueue<V>, int, long);
    Code:
       0: new           #10                 // class com/github/benmanes/caffeine/cache/FSR
       3: dup
       4: aload_1
       5: aload_2
       6: aload_3
       7: iload         4
       9: lload         5
      11: invokespecial #12                 // Method "<init>":(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;IJ)V
      14: areturn

  static {};
    Code:
       0: ldc           #10                 // class com/github/benmanes/caffeine/cache/FSR
       2: ldc           #14                 // String writeTime
       4: invokestatic  #15                 // Method com/github/benmanes/caffeine/cache/UnsafeAccess.objectFieldOffset:(Ljava/lang/Class;Ljava/lang/String;)J
       7: putstatic     #4                  // Field WRITE_TIME_OFFSET:J
      10: return
}
