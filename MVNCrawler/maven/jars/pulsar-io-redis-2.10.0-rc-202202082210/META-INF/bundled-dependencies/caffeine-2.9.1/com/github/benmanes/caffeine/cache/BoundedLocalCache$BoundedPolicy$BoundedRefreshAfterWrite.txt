Compiled from "BoundedLocalCache.java"
final class com.github.benmanes.caffeine.cache.BoundedLocalCache$BoundedPolicy$BoundedRefreshAfterWrite implements com.github.benmanes.caffeine.cache.Policy$Expiration<K, V> {
  final com.github.benmanes.caffeine.cache.BoundedLocalCache$BoundedPolicy this$0;

  com.github.benmanes.caffeine.cache.BoundedLocalCache$BoundedPolicy$BoundedRefreshAfterWrite(com.github.benmanes.caffeine.cache.BoundedLocalCache$BoundedPolicy);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy;
       5: aload_0
       6: invokespecial #2                  // Method java/lang/Object."<init>":()V
       9: return

  public java.util.OptionalLong ageOf(K, java.util.concurrent.TimeUnit);
    Code:
       0: aload_1
       1: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_2
       6: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
       9: pop
      10: aload_0
      11: getfield      #1                  // Field this$0:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy;
      14: getfield      #4                  // Field com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy.cache:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache;
      17: getfield      #5                  // Field com/github/benmanes/caffeine/cache/BoundedLocalCache.nodeFactory:Lcom/github/benmanes/caffeine/cache/NodeFactory;
      20: aload_1
      21: invokeinterface #6,  2            // InterfaceMethod com/github/benmanes/caffeine/cache/NodeFactory.newLookupKey:(Ljava/lang/Object;)Ljava/lang/Object;
      26: astore_3
      27: aload_0
      28: getfield      #1                  // Field this$0:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy;
      31: getfield      #4                  // Field com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy.cache:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache;
      34: getfield      #7                  // Field com/github/benmanes/caffeine/cache/BoundedLocalCache.data:Ljava/util/concurrent/ConcurrentHashMap;
      37: aload_3
      38: invokevirtual #8                  // Method java/util/concurrent/ConcurrentHashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      41: checkcast     #9                  // class com/github/benmanes/caffeine/cache/Node
      44: astore        4
      46: aload         4
      48: ifnonnull     55
      51: invokestatic  #10                 // Method java/util/OptionalLong.empty:()Ljava/util/OptionalLong;
      54: areturn
      55: aload_0
      56: getfield      #1                  // Field this$0:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy;
      59: getfield      #4                  // Field com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy.cache:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache;
      62: invokevirtual #11                 // Method com/github/benmanes/caffeine/cache/BoundedLocalCache.expirationTicker:()Lcom/github/benmanes/caffeine/cache/Ticker;
      65: invokeinterface #12,  1           // InterfaceMethod com/github/benmanes/caffeine/cache/Ticker.read:()J
      70: aload         4
      72: invokevirtual #13                 // Method com/github/benmanes/caffeine/cache/Node.getWriteTime:()J
      75: lsub
      76: lstore        5
      78: lload         5
      80: aload_0
      81: getfield      #1                  // Field this$0:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy;
      84: getfield      #4                  // Field com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy.cache:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache;
      87: invokevirtual #14                 // Method com/github/benmanes/caffeine/cache/BoundedLocalCache.refreshAfterWriteNanos:()J
      90: lcmp
      91: ifle          100
      94: invokestatic  #10                 // Method java/util/OptionalLong.empty:()Ljava/util/OptionalLong;
      97: goto          112
     100: aload_2
     101: lload         5
     103: getstatic     #15                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
     106: invokevirtual #16                 // Method java/util/concurrent/TimeUnit.convert:(JLjava/util/concurrent/TimeUnit;)J
     109: invokestatic  #17                 // Method java/util/OptionalLong.of:(J)Ljava/util/OptionalLong;
     112: areturn

  public long getExpiresAfter(java.util.concurrent.TimeUnit);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #1                  // Field this$0:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy;
       5: getfield      #4                  // Field com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy.cache:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache;
       8: invokevirtual #14                 // Method com/github/benmanes/caffeine/cache/BoundedLocalCache.refreshAfterWriteNanos:()J
      11: getstatic     #15                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
      14: invokevirtual #16                 // Method java/util/concurrent/TimeUnit.convert:(JLjava/util/concurrent/TimeUnit;)J
      17: lreturn

  public void setExpiresAfter(long, java.util.concurrent.TimeUnit);
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: iflt          10
       6: iconst_1
       7: goto          11
      10: iconst_0
      11: invokestatic  #18                 // Method com/github/benmanes/caffeine/cache/Caffeine.requireArgument:(Z)V
      14: aload_0
      15: getfield      #1                  // Field this$0:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy;
      18: getfield      #4                  // Field com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy.cache:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache;
      21: aload_3
      22: lload_1
      23: invokevirtual #19                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      26: invokevirtual #20                 // Method com/github/benmanes/caffeine/cache/BoundedLocalCache.setRefreshAfterWriteNanos:(J)V
      29: aload_0
      30: getfield      #1                  // Field this$0:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy;
      33: getfield      #4                  // Field com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy.cache:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache;
      36: invokevirtual #21                 // Method com/github/benmanes/caffeine/cache/BoundedLocalCache.scheduleAfterWrite:()V
      39: return

  public java.util.Map<K, V> oldest(int);
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy;
       4: getfield      #4                  // Field com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy.cache:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache;
       7: invokevirtual #22                 // Method com/github/benmanes/caffeine/cache/BoundedLocalCache.expiresAfterWrite:()Z
      10: ifeq          35
      13: aload_0
      14: getfield      #1                  // Field this$0:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy;
      17: invokevirtual #23                 // Method com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy.expireAfterWrite:()Ljava/util/Optional;
      20: invokevirtual #24                 // Method java/util/Optional.get:()Ljava/lang/Object;
      23: checkcast     #25                 // class com/github/benmanes/caffeine/cache/Policy$Expiration
      26: iload_1
      27: invokeinterface #26,  2           // InterfaceMethod com/github/benmanes/caffeine/cache/Policy$Expiration.oldest:(I)Ljava/util/Map;
      32: goto          41
      35: aload_0
      36: iload_1
      37: iconst_1
      38: invokevirtual #27                 // Method sortedByWriteTime:(IZ)Ljava/util/Map;
      41: areturn

  public java.util.Map<K, V> youngest(int);
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy;
       4: getfield      #4                  // Field com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy.cache:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache;
       7: invokevirtual #22                 // Method com/github/benmanes/caffeine/cache/BoundedLocalCache.expiresAfterWrite:()Z
      10: ifeq          35
      13: aload_0
      14: getfield      #1                  // Field this$0:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy;
      17: invokevirtual #23                 // Method com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy.expireAfterWrite:()Ljava/util/Optional;
      20: invokevirtual #24                 // Method java/util/Optional.get:()Ljava/lang/Object;
      23: checkcast     #25                 // class com/github/benmanes/caffeine/cache/Policy$Expiration
      26: iload_1
      27: invokeinterface #28,  2           // InterfaceMethod com/github/benmanes/caffeine/cache/Policy$Expiration.youngest:(I)Ljava/util/Map;
      32: goto          41
      35: aload_0
      36: iload_1
      37: iconst_0
      38: invokevirtual #27                 // Method sortedByWriteTime:(IZ)Ljava/util/Map;
      41: areturn

  java.util.Map<K, V> sortedByWriteTime(int, boolean);
    Code:
       0: invokedynamic #29,  0             // InvokeDynamic #0:applyAsLong:()Ljava/util/function/ToLongFunction;
       5: invokestatic  #30                 // InterfaceMethod java/util/Comparator.comparingLong:(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;
       8: astore_3
       9: aload_0
      10: getfield      #1                  // Field this$0:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy;
      13: getfield      #4                  // Field com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy.cache:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache;
      16: getfield      #7                  // Field com/github/benmanes/caffeine/cache/BoundedLocalCache.data:Ljava/util/concurrent/ConcurrentHashMap;
      19: invokevirtual #31                 // Method java/util/concurrent/ConcurrentHashMap.values:()Ljava/util/Collection;
      22: invokeinterface #32,  1           // InterfaceMethod java/util/Collection.stream:()Ljava/util/stream/Stream;
      27: invokeinterface #33,  1           // InterfaceMethod java/util/stream/Stream.parallel:()Ljava/util/stream/BaseStream;
      32: checkcast     #34                 // class java/util/stream/Stream
      35: iload_2
      36: ifeq          43
      39: aload_3
      40: goto          49
      43: aload_3
      44: invokeinterface #35,  1           // InterfaceMethod java/util/Comparator.reversed:()Ljava/util/Comparator;
      49: invokeinterface #36,  2           // InterfaceMethod java/util/stream/Stream.sorted:(Ljava/util/Comparator;)Ljava/util/stream/Stream;
      54: iload_1
      55: i2l
      56: invokeinterface #37,  3           // InterfaceMethod java/util/stream/Stream.limit:(J)Ljava/util/stream/Stream;
      61: invokeinterface #38,  1           // InterfaceMethod java/util/stream/Stream.iterator:()Ljava/util/Iterator;
      66: astore        4
      68: aload_0
      69: getfield      #1                  // Field this$0:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy;
      72: getfield      #4                  // Field com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy.cache:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache;
      75: aload         4
      77: invokedynamic #39,  0             // InvokeDynamic #1:get:(Ljava/util/Iterator;)Ljava/util/function/Supplier;
      82: iload_1
      83: aload_0
      84: getfield      #1                  // Field this$0:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy;
      87: getfield      #40                 // Field com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy.transformer:Ljava/util/function/Function;
      90: invokevirtual #41                 // Method com/github/benmanes/caffeine/cache/BoundedLocalCache.fixedSnapshot:(Ljava/util/function/Supplier;ILjava/util/function/Function;)Ljava/util/Map;
      93: areturn

  private static java.util.Iterator lambda$sortedByWriteTime$0(java.util.Iterator);
    Code:
       0: aload_0
       1: areturn
}
