Compiled from "SISMS.java"
class com.github.benmanes.caffeine.cache.SISMS<K, V> extends com.github.benmanes.caffeine.cache.SIS<K, V> {
  long maximum;

  long weightedSize;

  long windowMaximum;

  long windowWeightedSize;

  long mainProtectedMaximum;

  long mainProtectedWeightedSize;

  double stepSize;

  long adjustment;

  int hitsInSample;

  int missesInSample;

  double previousSampleHitRate;

  final com.github.benmanes.caffeine.cache.FrequencySketch<K> sketch;

  final com.github.benmanes.caffeine.cache.AccessOrderDeque<com.github.benmanes.caffeine.cache.Node<K, V>> accessOrderWindowDeque;

  final com.github.benmanes.caffeine.cache.AccessOrderDeque<com.github.benmanes.caffeine.cache.Node<K, V>> accessOrderProbationDeque;

  final com.github.benmanes.caffeine.cache.AccessOrderDeque<com.github.benmanes.caffeine.cache.Node<K, V>> accessOrderProtectedDeque;

  final com.github.benmanes.caffeine.cache.MpscGrowableArrayQueue<java.lang.Runnable> writeBuffer;

  com.github.benmanes.caffeine.cache.SISMS(com.github.benmanes.caffeine.cache.Caffeine<K, V>, com.github.benmanes.caffeine.cache.CacheLoader<? super K, V>, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iload_3
       4: invokespecial #1                  // Method com/github/benmanes/caffeine/cache/SIS."<init>":(Lcom/github/benmanes/caffeine/cache/Caffeine;Lcom/github/benmanes/caffeine/cache/CacheLoader;Z)V
       7: aload_0
       8: new           #2                  // class com/github/benmanes/caffeine/cache/FrequencySketch
      11: dup
      12: invokespecial #3                  // Method com/github/benmanes/caffeine/cache/FrequencySketch."<init>":()V
      15: putfield      #4                  // Field sketch:Lcom/github/benmanes/caffeine/cache/FrequencySketch;
      18: aload_1
      19: invokevirtual #5                  // Method com/github/benmanes/caffeine/cache/Caffeine.hasInitialCapacity:()Z
      22: ifeq          48
      25: aload_1
      26: invokevirtual #6                  // Method com/github/benmanes/caffeine/cache/Caffeine.getMaximum:()J
      29: aload_1
      30: invokevirtual #7                  // Method com/github/benmanes/caffeine/cache/Caffeine.getInitialCapacity:()I
      33: i2l
      34: invokestatic  #8                  // Method java/lang/Math.min:(JJ)J
      37: lstore        4
      39: aload_0
      40: getfield      #4                  // Field sketch:Lcom/github/benmanes/caffeine/cache/FrequencySketch;
      43: lload         4
      45: invokevirtual #9                  // Method com/github/benmanes/caffeine/cache/FrequencySketch.ensureCapacity:(J)V
      48: aload_0
      49: aload_1
      50: invokevirtual #10                 // Method com/github/benmanes/caffeine/cache/Caffeine.evicts:()Z
      53: ifne          63
      56: aload_1
      57: invokevirtual #11                 // Method com/github/benmanes/caffeine/cache/Caffeine.expiresAfterAccess:()Z
      60: ifeq          73
      63: new           #12                 // class com/github/benmanes/caffeine/cache/AccessOrderDeque
      66: dup
      67: invokespecial #13                 // Method com/github/benmanes/caffeine/cache/AccessOrderDeque."<init>":()V
      70: goto          74
      73: aconst_null
      74: putfield      #14                 // Field accessOrderWindowDeque:Lcom/github/benmanes/caffeine/cache/AccessOrderDeque;
      77: aload_0
      78: new           #12                 // class com/github/benmanes/caffeine/cache/AccessOrderDeque
      81: dup
      82: invokespecial #13                 // Method com/github/benmanes/caffeine/cache/AccessOrderDeque."<init>":()V
      85: putfield      #15                 // Field accessOrderProbationDeque:Lcom/github/benmanes/caffeine/cache/AccessOrderDeque;
      88: aload_0
      89: new           #12                 // class com/github/benmanes/caffeine/cache/AccessOrderDeque
      92: dup
      93: invokespecial #13                 // Method com/github/benmanes/caffeine/cache/AccessOrderDeque."<init>":()V
      96: putfield      #16                 // Field accessOrderProtectedDeque:Lcom/github/benmanes/caffeine/cache/AccessOrderDeque;
      99: aload_0
     100: new           #17                 // class com/github/benmanes/caffeine/cache/MpscGrowableArrayQueue
     103: dup
     104: iconst_4
     105: getstatic     #19                 // Field WRITE_BUFFER_MAX:I
     108: invokespecial #20                 // Method com/github/benmanes/caffeine/cache/MpscGrowableArrayQueue."<init>":(II)V
     111: putfield      #21                 // Field writeBuffer:Lcom/github/benmanes/caffeine/cache/MpscGrowableArrayQueue;
     114: return

  protected final boolean evicts();
    Code:
       0: iconst_1
       1: ireturn

  protected final long maximum();
    Code:
       0: aload_0
       1: getfield      #22                 // Field maximum:J
       4: lreturn

  protected final void setMaximum(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #22                 // Field maximum:J
       5: return

  protected final long weightedSize();
    Code:
       0: aload_0
       1: getfield      #23                 // Field weightedSize:J
       4: lreturn

  protected final void setWeightedSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #23                 // Field weightedSize:J
       5: return

  protected final long windowMaximum();
    Code:
       0: aload_0
       1: getfield      #24                 // Field windowMaximum:J
       4: lreturn

  protected final void setWindowMaximum(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #24                 // Field windowMaximum:J
       5: return

  protected final long windowWeightedSize();
    Code:
       0: aload_0
       1: getfield      #25                 // Field windowWeightedSize:J
       4: lreturn

  protected final void setWindowWeightedSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #25                 // Field windowWeightedSize:J
       5: return

  protected final long mainProtectedMaximum();
    Code:
       0: aload_0
       1: getfield      #26                 // Field mainProtectedMaximum:J
       4: lreturn

  protected final void setMainProtectedMaximum(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #26                 // Field mainProtectedMaximum:J
       5: return

  protected final long mainProtectedWeightedSize();
    Code:
       0: aload_0
       1: getfield      #27                 // Field mainProtectedWeightedSize:J
       4: lreturn

  protected final void setMainProtectedWeightedSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #27                 // Field mainProtectedWeightedSize:J
       5: return

  protected final double stepSize();
    Code:
       0: aload_0
       1: getfield      #28                 // Field stepSize:D
       4: dreturn

  protected final void setStepSize(double);
    Code:
       0: aload_0
       1: dload_1
       2: putfield      #28                 // Field stepSize:D
       5: return

  protected final long adjustment();
    Code:
       0: aload_0
       1: getfield      #29                 // Field adjustment:J
       4: lreturn

  protected final void setAdjustment(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #29                 // Field adjustment:J
       5: return

  protected final int hitsInSample();
    Code:
       0: aload_0
       1: getfield      #30                 // Field hitsInSample:I
       4: ireturn

  protected final void setHitsInSample(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #30                 // Field hitsInSample:I
       5: return

  protected final int missesInSample();
    Code:
       0: aload_0
       1: getfield      #31                 // Field missesInSample:I
       4: ireturn

  protected final void setMissesInSample(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #31                 // Field missesInSample:I
       5: return

  protected final double previousSampleHitRate();
    Code:
       0: aload_0
       1: getfield      #32                 // Field previousSampleHitRate:D
       4: dreturn

  protected final void setPreviousSampleHitRate(double);
    Code:
       0: aload_0
       1: dload_1
       2: putfield      #32                 // Field previousSampleHitRate:D
       5: return

  protected final com.github.benmanes.caffeine.cache.FrequencySketch<K> frequencySketch();
    Code:
       0: aload_0
       1: getfield      #4                  // Field sketch:Lcom/github/benmanes/caffeine/cache/FrequencySketch;
       4: areturn

  protected final com.github.benmanes.caffeine.cache.AccessOrderDeque<com.github.benmanes.caffeine.cache.Node<K, V>> accessOrderWindowDeque();
    Code:
       0: aload_0
       1: getfield      #14                 // Field accessOrderWindowDeque:Lcom/github/benmanes/caffeine/cache/AccessOrderDeque;
       4: areturn

  protected final com.github.benmanes.caffeine.cache.AccessOrderDeque<com.github.benmanes.caffeine.cache.Node<K, V>> accessOrderProbationDeque();
    Code:
       0: aload_0
       1: getfield      #15                 // Field accessOrderProbationDeque:Lcom/github/benmanes/caffeine/cache/AccessOrderDeque;
       4: areturn

  protected final com.github.benmanes.caffeine.cache.AccessOrderDeque<com.github.benmanes.caffeine.cache.Node<K, V>> accessOrderProtectedDeque();
    Code:
       0: aload_0
       1: getfield      #16                 // Field accessOrderProtectedDeque:Lcom/github/benmanes/caffeine/cache/AccessOrderDeque;
       4: areturn

  protected final com.github.benmanes.caffeine.cache.MpscGrowableArrayQueue<java.lang.Runnable> writeBuffer();
    Code:
       0: aload_0
       1: getfield      #21                 // Field writeBuffer:Lcom/github/benmanes/caffeine/cache/MpscGrowableArrayQueue;
       4: areturn

  protected final boolean buffersWrites();
    Code:
       0: iconst_1
       1: ireturn
}
