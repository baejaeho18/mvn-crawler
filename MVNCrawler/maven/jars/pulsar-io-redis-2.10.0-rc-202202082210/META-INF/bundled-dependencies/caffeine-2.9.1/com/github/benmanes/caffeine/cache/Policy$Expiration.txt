Compiled from "Policy.java"
public interface com.github.benmanes.caffeine.cache.Policy$Expiration<K, V> {
  public abstract java.util.OptionalLong ageOf(K, java.util.concurrent.TimeUnit);

  public default java.util.Optional<java.time.Duration> ageOf(K);
    Code:
       0: aload_0
       1: aload_1
       2: getstatic     #1                  // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
       5: invokeinterface #2,  3            // InterfaceMethod ageOf:(Ljava/lang/Object;Ljava/util/concurrent/TimeUnit;)Ljava/util/OptionalLong;
      10: astore_2
      11: aload_2
      12: invokevirtual #3                  // Method java/util/OptionalLong.isPresent:()Z
      15: ifeq          31
      18: aload_2
      19: invokevirtual #4                  // Method java/util/OptionalLong.getAsLong:()J
      22: invokestatic  #5                  // Method java/time/Duration.ofNanos:(J)Ljava/time/Duration;
      25: invokestatic  #6                  // Method java/util/Optional.of:(Ljava/lang/Object;)Ljava/util/Optional;
      28: goto          34
      31: invokestatic  #7                  // Method java/util/Optional.empty:()Ljava/util/Optional;
      34: areturn

  public abstract long getExpiresAfter(java.util.concurrent.TimeUnit);

  public default java.time.Duration getExpiresAfter();
    Code:
       0: aload_0
       1: getstatic     #1                  // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
       4: invokeinterface #8,  2            // InterfaceMethod getExpiresAfter:(Ljava/util/concurrent/TimeUnit;)J
       9: invokestatic  #5                  // Method java/time/Duration.ofNanos:(J)Ljava/time/Duration;
      12: areturn

  public abstract void setExpiresAfter(long, java.util.concurrent.TimeUnit);

  public default void setExpiresAfter(java.time.Duration);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #9                  // Method java/time/Duration.toNanos:()J
       5: getstatic     #1                  // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
       8: invokeinterface #10,  4           // InterfaceMethod setExpiresAfter:(JLjava/util/concurrent/TimeUnit;)V
      13: return

  public abstract java.util.Map<K, V> oldest(int);

  public abstract java.util.Map<K, V> youngest(int);
}
