Compiled from "BoundedLocalCache.java"
final class com.github.benmanes.caffeine.cache.BoundedLocalCache$BoundedPolicy$BoundedEviction implements com.github.benmanes.caffeine.cache.Policy$Eviction<K, V> {
  final com.github.benmanes.caffeine.cache.BoundedLocalCache$BoundedPolicy this$0;

  com.github.benmanes.caffeine.cache.BoundedLocalCache$BoundedPolicy$BoundedEviction(com.github.benmanes.caffeine.cache.BoundedLocalCache$BoundedPolicy);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy;
       5: aload_0
       6: invokespecial #2                  // Method java/lang/Object."<init>":()V
       9: return

  public boolean isWeighted();
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy;
       4: getfield      #3                  // Field com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy.isWeighted:Z
       7: ireturn

  public java.util.OptionalInt weightOf(K);
    Code:
       0: aload_1
       1: invokestatic  #4                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_0
       6: getfield      #1                  // Field this$0:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy;
       9: getfield      #3                  // Field com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy.isWeighted:Z
      12: ifne          19
      15: invokestatic  #5                  // Method java/util/OptionalInt.empty:()Ljava/util/OptionalInt;
      18: areturn
      19: aload_0
      20: getfield      #1                  // Field this$0:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy;
      23: getfield      #6                  // Field com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy.cache:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache;
      26: getfield      #7                  // Field com/github/benmanes/caffeine/cache/BoundedLocalCache.data:Ljava/util/concurrent/ConcurrentHashMap;
      29: aload_0
      30: getfield      #1                  // Field this$0:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy;
      33: getfield      #6                  // Field com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy.cache:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache;
      36: getfield      #8                  // Field com/github/benmanes/caffeine/cache/BoundedLocalCache.nodeFactory:Lcom/github/benmanes/caffeine/cache/NodeFactory;
      39: aload_1
      40: invokeinterface #9,  2            // InterfaceMethod com/github/benmanes/caffeine/cache/NodeFactory.newLookupKey:(Ljava/lang/Object;)Ljava/lang/Object;
      45: invokevirtual #10                 // Method java/util/concurrent/ConcurrentHashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      48: checkcast     #11                 // class com/github/benmanes/caffeine/cache/Node
      51: astore_2
      52: aload_2
      53: ifnonnull     60
      56: invokestatic  #5                  // Method java/util/OptionalInt.empty:()Ljava/util/OptionalInt;
      59: areturn
      60: aload_2
      61: dup
      62: astore_3
      63: monitorenter
      64: aload_2
      65: invokevirtual #12                 // Method com/github/benmanes/caffeine/cache/Node.getWeight:()I
      68: invokestatic  #13                 // Method java/util/OptionalInt.of:(I)Ljava/util/OptionalInt;
      71: aload_3
      72: monitorexit
      73: areturn
      74: astore        4
      76: aload_3
      77: monitorexit
      78: aload         4
      80: athrow
    Exception table:
       from    to  target type
          64    73    74   any
          74    78    74   any

  public java.util.OptionalLong weightedSize();
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy;
       4: getfield      #6                  // Field com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy.cache:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache;
       7: invokevirtual #14                 // Method com/github/benmanes/caffeine/cache/BoundedLocalCache.evicts:()Z
      10: ifeq          82
      13: aload_0
      14: invokevirtual #15                 // Method isWeighted:()Z
      17: ifeq          82
      20: aload_0
      21: getfield      #1                  // Field this$0:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy;
      24: getfield      #6                  // Field com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy.cache:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache;
      27: getfield      #16                 // Field com/github/benmanes/caffeine/cache/BoundedLocalCache.evictionLock:Ljava/util/concurrent/locks/ReentrantLock;
      30: invokevirtual #17                 // Method java/util/concurrent/locks/ReentrantLock.lock:()V
      33: lconst_0
      34: aload_0
      35: getfield      #1                  // Field this$0:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy;
      38: getfield      #6                  // Field com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy.cache:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache;
      41: invokevirtual #18                 // Method com/github/benmanes/caffeine/cache/BoundedLocalCache.weightedSize:()J
      44: invokestatic  #19                 // Method java/lang/Math.max:(JJ)J
      47: invokestatic  #20                 // Method java/util/OptionalLong.of:(J)Ljava/util/OptionalLong;
      50: astore_1
      51: aload_0
      52: getfield      #1                  // Field this$0:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy;
      55: getfield      #6                  // Field com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy.cache:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache;
      58: getfield      #16                 // Field com/github/benmanes/caffeine/cache/BoundedLocalCache.evictionLock:Ljava/util/concurrent/locks/ReentrantLock;
      61: invokevirtual #21                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      64: aload_1
      65: areturn
      66: astore_2
      67: aload_0
      68: getfield      #1                  // Field this$0:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy;
      71: getfield      #6                  // Field com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy.cache:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache;
      74: getfield      #16                 // Field com/github/benmanes/caffeine/cache/BoundedLocalCache.evictionLock:Ljava/util/concurrent/locks/ReentrantLock;
      77: invokevirtual #21                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      80: aload_2
      81: athrow
      82: invokestatic  #22                 // Method java/util/OptionalLong.empty:()Ljava/util/OptionalLong;
      85: areturn
    Exception table:
       from    to  target type
          33    51    66   any

  public long getMaximum();
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy;
       4: getfield      #6                  // Field com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy.cache:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache;
       7: getfield      #16                 // Field com/github/benmanes/caffeine/cache/BoundedLocalCache.evictionLock:Ljava/util/concurrent/locks/ReentrantLock;
      10: invokevirtual #17                 // Method java/util/concurrent/locks/ReentrantLock.lock:()V
      13: aload_0
      14: getfield      #1                  // Field this$0:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy;
      17: getfield      #6                  // Field com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy.cache:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache;
      20: invokevirtual #23                 // Method com/github/benmanes/caffeine/cache/BoundedLocalCache.maximum:()J
      23: lstore_1
      24: aload_0
      25: getfield      #1                  // Field this$0:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy;
      28: getfield      #6                  // Field com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy.cache:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache;
      31: getfield      #16                 // Field com/github/benmanes/caffeine/cache/BoundedLocalCache.evictionLock:Ljava/util/concurrent/locks/ReentrantLock;
      34: invokevirtual #21                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      37: lload_1
      38: lreturn
      39: astore_3
      40: aload_0
      41: getfield      #1                  // Field this$0:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy;
      44: getfield      #6                  // Field com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy.cache:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache;
      47: getfield      #16                 // Field com/github/benmanes/caffeine/cache/BoundedLocalCache.evictionLock:Ljava/util/concurrent/locks/ReentrantLock;
      50: invokevirtual #21                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      53: aload_3
      54: athrow
    Exception table:
       from    to  target type
          13    24    39   any

  public void setMaximum(long);
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy;
       4: getfield      #6                  // Field com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy.cache:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache;
       7: getfield      #16                 // Field com/github/benmanes/caffeine/cache/BoundedLocalCache.evictionLock:Ljava/util/concurrent/locks/ReentrantLock;
      10: invokevirtual #17                 // Method java/util/concurrent/locks/ReentrantLock.lock:()V
      13: aload_0
      14: getfield      #1                  // Field this$0:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy;
      17: getfield      #6                  // Field com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy.cache:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache;
      20: lload_1
      21: invokevirtual #24                 // Method com/github/benmanes/caffeine/cache/BoundedLocalCache.setMaximumSize:(J)V
      24: aload_0
      25: getfield      #1                  // Field this$0:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy;
      28: getfield      #6                  // Field com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy.cache:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache;
      31: aconst_null
      32: invokevirtual #25                 // Method com/github/benmanes/caffeine/cache/BoundedLocalCache.maintenance:(Ljava/lang/Runnable;)V
      35: aload_0
      36: getfield      #1                  // Field this$0:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy;
      39: getfield      #6                  // Field com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy.cache:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache;
      42: getfield      #16                 // Field com/github/benmanes/caffeine/cache/BoundedLocalCache.evictionLock:Ljava/util/concurrent/locks/ReentrantLock;
      45: invokevirtual #21                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      48: goto          67
      51: astore_3
      52: aload_0
      53: getfield      #1                  // Field this$0:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy;
      56: getfield      #6                  // Field com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy.cache:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache;
      59: getfield      #16                 // Field com/github/benmanes/caffeine/cache/BoundedLocalCache.evictionLock:Ljava/util/concurrent/locks/ReentrantLock;
      62: invokevirtual #21                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      65: aload_3
      66: athrow
      67: return
    Exception table:
       from    to  target type
          13    35    51   any

  public java.util.Map<K, V> coldest(int);
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy;
       4: getfield      #6                  // Field com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy.cache:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache;
       7: iload_1
       8: aload_0
       9: getfield      #1                  // Field this$0:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy;
      12: getfield      #26                 // Field com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy.transformer:Ljava/util/function/Function;
      15: iconst_0
      16: invokevirtual #27                 // Method com/github/benmanes/caffeine/cache/BoundedLocalCache.evictionOrder:(ILjava/util/function/Function;Z)Ljava/util/Map;
      19: areturn

  public java.util.Map<K, V> hottest(int);
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy;
       4: getfield      #6                  // Field com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy.cache:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache;
       7: iload_1
       8: aload_0
       9: getfield      #1                  // Field this$0:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy;
      12: getfield      #26                 // Field com/github/benmanes/caffeine/cache/BoundedLocalCache$BoundedPolicy.transformer:Ljava/util/function/Function;
      15: iconst_1
      16: invokevirtual #27                 // Method com/github/benmanes/caffeine/cache/BoundedLocalCache.evictionOrder:(ILjava/util/function/Function;Z)Ljava/util/Map;
      19: areturn
}
