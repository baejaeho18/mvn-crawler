Compiled from "BoundedLocalCache.java"
final class com.github.benmanes.caffeine.cache.BoundedLocalCache$KeySpliterator<K, V> implements java.util.Spliterator<K> {
  final java.util.Spliterator<com.github.benmanes.caffeine.cache.Node<K, V>> spliterator;

  final com.github.benmanes.caffeine.cache.BoundedLocalCache<K, V> cache;

  com.github.benmanes.caffeine.cache.BoundedLocalCache$KeySpliterator(com.github.benmanes.caffeine.cache.BoundedLocalCache<K, V>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_1
       3: getfield      #1                  // Field com/github/benmanes/caffeine/cache/BoundedLocalCache.data:Ljava/util/concurrent/ConcurrentHashMap;
       6: invokevirtual #2                  // Method java/util/concurrent/ConcurrentHashMap.values:()Ljava/util/Collection;
       9: invokeinterface #3,  1            // InterfaceMethod java/util/Collection.spliterator:()Ljava/util/Spliterator;
      14: invokespecial #4                  // Method "<init>":(Lcom/github/benmanes/caffeine/cache/BoundedLocalCache;Ljava/util/Spliterator;)V
      17: return

  com.github.benmanes.caffeine.cache.BoundedLocalCache$KeySpliterator(com.github.benmanes.caffeine.cache.BoundedLocalCache<K, V>, java.util.Spliterator<com.github.benmanes.caffeine.cache.Node<K, V>>);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_2
       6: invokestatic  #6                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
       9: checkcast     #7                  // class java/util/Spliterator
      12: putfield      #8                  // Field spliterator:Ljava/util/Spliterator;
      15: aload_0
      16: aload_1
      17: invokestatic  #6                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
      20: checkcast     #9                  // class com/github/benmanes/caffeine/cache/BoundedLocalCache
      23: putfield      #10                 // Field cache:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache;
      26: return

  public void forEachRemaining(java.util.function.Consumer<? super K>);
    Code:
       0: aload_1
       1: invokestatic  #6                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_0
       6: aload_1
       7: invokedynamic #11,  0             // InvokeDynamic #0:accept:(Lcom/github/benmanes/caffeine/cache/BoundedLocalCache$KeySpliterator;Ljava/util/function/Consumer;)Ljava/util/function/Consumer;
      12: astore_2
      13: aload_0
      14: getfield      #8                  // Field spliterator:Ljava/util/Spliterator;
      17: aload_2
      18: invokeinterface #12,  2           // InterfaceMethod java/util/Spliterator.forEachRemaining:(Ljava/util/function/Consumer;)V
      23: return

  public boolean tryAdvance(java.util.function.Consumer<? super K>);
    Code:
       0: aload_1
       1: invokestatic  #6                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: iconst_1
       6: newarray       boolean
       8: dup
       9: iconst_0
      10: iconst_0
      11: bastore
      12: astore_2
      13: aload_0
      14: aload_1
      15: aload_2
      16: invokedynamic #13,  0             // InvokeDynamic #1:accept:(Lcom/github/benmanes/caffeine/cache/BoundedLocalCache$KeySpliterator;Ljava/util/function/Consumer;[Z)Ljava/util/function/Consumer;
      21: astore_3
      22: aload_0
      23: getfield      #8                  // Field spliterator:Ljava/util/Spliterator;
      26: aload_3
      27: invokeinterface #14,  2           // InterfaceMethod java/util/Spliterator.tryAdvance:(Ljava/util/function/Consumer;)Z
      32: ifeq          43
      35: aload_2
      36: iconst_0
      37: baload
      38: ifeq          22
      41: iconst_1
      42: ireturn
      43: iconst_0
      44: ireturn

  public java.util.Spliterator<K> trySplit();
    Code:
       0: aload_0
       1: getfield      #8                  // Field spliterator:Ljava/util/Spliterator;
       4: invokeinterface #15,  1           // InterfaceMethod java/util/Spliterator.trySplit:()Ljava/util/Spliterator;
       9: astore_1
      10: aload_1
      11: ifnonnull     18
      14: aconst_null
      15: goto          30
      18: new           #16                 // class com/github/benmanes/caffeine/cache/BoundedLocalCache$KeySpliterator
      21: dup
      22: aload_0
      23: getfield      #10                 // Field cache:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache;
      26: aload_1
      27: invokespecial #4                  // Method "<init>":(Lcom/github/benmanes/caffeine/cache/BoundedLocalCache;Ljava/util/Spliterator;)V
      30: areturn

  public long estimateSize();
    Code:
       0: aload_0
       1: getfield      #8                  // Field spliterator:Ljava/util/Spliterator;
       4: invokeinterface #17,  1           // InterfaceMethod java/util/Spliterator.estimateSize:()J
       9: lreturn

  public int characteristics();
    Code:
       0: sipush        4353
       3: ireturn

  private void lambda$tryAdvance$1(java.util.function.Consumer, boolean[], com.github.benmanes.caffeine.cache.Node);
    Code:
       0: aload_3
       1: invokevirtual #18                 // Method com/github/benmanes/caffeine/cache/Node.getKey:()Ljava/lang/Object;
       4: astore        4
       6: aload_3
       7: invokevirtual #19                 // Method com/github/benmanes/caffeine/cache/Node.getValue:()Ljava/lang/Object;
      10: astore        5
      12: aload_0
      13: getfield      #10                 // Field cache:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache;
      16: invokevirtual #20                 // Method com/github/benmanes/caffeine/cache/BoundedLocalCache.expirationTicker:()Lcom/github/benmanes/caffeine/cache/Ticker;
      19: invokeinterface #21,  1           // InterfaceMethod com/github/benmanes/caffeine/cache/Ticker.read:()J
      24: lstore        6
      26: aload         4
      28: ifnull        68
      31: aload         5
      33: ifnull        68
      36: aload_3
      37: invokevirtual #22                 // Method com/github/benmanes/caffeine/cache/Node.isAlive:()Z
      40: ifeq          68
      43: aload_0
      44: getfield      #10                 // Field cache:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache;
      47: aload_3
      48: lload         6
      50: invokevirtual #23                 // Method com/github/benmanes/caffeine/cache/BoundedLocalCache.hasExpired:(Lcom/github/benmanes/caffeine/cache/Node;J)Z
      53: ifne          68
      56: aload_1
      57: aload         4
      59: invokeinterface #24,  2           // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
      64: aload_2
      65: iconst_0
      66: iconst_1
      67: bastore
      68: return

  private void lambda$forEachRemaining$0(java.util.function.Consumer, com.github.benmanes.caffeine.cache.Node);
    Code:
       0: aload_2
       1: invokevirtual #18                 // Method com/github/benmanes/caffeine/cache/Node.getKey:()Ljava/lang/Object;
       4: astore_3
       5: aload_2
       6: invokevirtual #19                 // Method com/github/benmanes/caffeine/cache/Node.getValue:()Ljava/lang/Object;
       9: astore        4
      11: aload_0
      12: getfield      #10                 // Field cache:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache;
      15: invokevirtual #20                 // Method com/github/benmanes/caffeine/cache/BoundedLocalCache.expirationTicker:()Lcom/github/benmanes/caffeine/cache/Ticker;
      18: invokeinterface #21,  1           // InterfaceMethod com/github/benmanes/caffeine/cache/Ticker.read:()J
      23: lstore        5
      25: aload_3
      26: ifnull        61
      29: aload         4
      31: ifnull        61
      34: aload_2
      35: invokevirtual #22                 // Method com/github/benmanes/caffeine/cache/Node.isAlive:()Z
      38: ifeq          61
      41: aload_0
      42: getfield      #10                 // Field cache:Lcom/github/benmanes/caffeine/cache/BoundedLocalCache;
      45: aload_2
      46: lload         5
      48: invokevirtual #23                 // Method com/github/benmanes/caffeine/cache/BoundedLocalCache.hasExpired:(Lcom/github/benmanes/caffeine/cache/Node;J)Z
      51: ifne          61
      54: aload_1
      55: aload_3
      56: invokeinterface #24,  2           // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
      61: return
}
