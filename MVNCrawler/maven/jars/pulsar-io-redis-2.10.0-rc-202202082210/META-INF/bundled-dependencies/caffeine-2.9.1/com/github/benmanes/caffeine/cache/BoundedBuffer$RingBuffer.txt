Compiled from "BoundedBuffer.java"
final class com.github.benmanes.caffeine.cache.BoundedBuffer$RingBuffer<E> extends com.github.benmanes.caffeine.cache.BBHeader$ReadAndWriteCounterRef implements com.github.benmanes.caffeine.cache.Buffer<E> {
  final java.util.concurrent.atomic.AtomicReferenceArray<E> buffer;

  public com.github.benmanes.caffeine.cache.BoundedBuffer$RingBuffer(E);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method com/github/benmanes/caffeine/cache/BBHeader$ReadAndWriteCounterRef."<init>":()V
       4: aload_0
       5: new           #3                  // class java/util/concurrent/atomic/AtomicReferenceArray
       8: dup
       9: bipush        16
      11: invokespecial #4                  // Method java/util/concurrent/atomic/AtomicReferenceArray."<init>":(I)V
      14: putfield      #5                  // Field buffer:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      17: aload_0
      18: getfield      #5                  // Field buffer:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      21: iconst_0
      22: aload_1
      23: invokevirtual #6                  // Method java/util/concurrent/atomic/AtomicReferenceArray.lazySet:(ILjava/lang/Object;)V
      26: return

  public int offer(E);
    Code:
       0: aload_0
       1: getfield      #7                  // Field readCounter:J
       4: lstore_2
       5: aload_0
       6: invokevirtual #8                  // Method relaxedWriteCounter:()J
       9: lstore        4
      11: lload         4
      13: lload_2
      14: lsub
      15: lstore        6
      17: lload         6
      19: ldc2_w        #9                  // long 16l
      22: lcmp
      23: iflt          28
      26: iconst_1
      27: ireturn
      28: aload_0
      29: lload         4
      31: lload         4
      33: lconst_1
      34: ladd
      35: invokevirtual #12                 // Method casWriteCounter:(JJ)Z
      38: ifeq          62
      41: lload         4
      43: ldc2_w        #13                 // long 15l
      46: land
      47: l2i
      48: istore        8
      50: aload_0
      51: getfield      #5                  // Field buffer:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      54: iload         8
      56: aload_1
      57: invokevirtual #6                  // Method java/util/concurrent/atomic/AtomicReferenceArray.lazySet:(ILjava/lang/Object;)V
      60: iconst_0
      61: ireturn
      62: iconst_m1
      63: ireturn

  public void drainTo(java.util.function.Consumer<E>);
    Code:
       0: aload_0
       1: getfield      #7                  // Field readCounter:J
       4: lstore_2
       5: aload_0
       6: invokevirtual #8                  // Method relaxedWriteCounter:()J
       9: lstore        4
      11: lload         4
      13: lload_2
      14: lsub
      15: lstore        6
      17: lload         6
      19: lconst_0
      20: lcmp
      21: ifne          25
      24: return
      25: lload_2
      26: ldc2_w        #13                 // long 15l
      29: land
      30: l2i
      31: istore        8
      33: aload_0
      34: getfield      #5                  // Field buffer:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      37: iload         8
      39: invokevirtual #15                 // Method java/util/concurrent/atomic/AtomicReferenceArray.get:(I)Ljava/lang/Object;
      42: astore        9
      44: aload         9
      46: ifnonnull     52
      49: goto          81
      52: aload_0
      53: getfield      #5                  // Field buffer:Ljava/util/concurrent/atomic/AtomicReferenceArray;
      56: iload         8
      58: aconst_null
      59: invokevirtual #6                  // Method java/util/concurrent/atomic/AtomicReferenceArray.lazySet:(ILjava/lang/Object;)V
      62: aload_1
      63: aload         9
      65: invokeinterface #16,  2           // InterfaceMethod java/util/function/Consumer.accept:(Ljava/lang/Object;)V
      70: lload_2
      71: lconst_1
      72: ladd
      73: lstore_2
      74: lload_2
      75: lload         4
      77: lcmp
      78: ifne          25
      81: aload_0
      82: lload_2
      83: invokevirtual #17                 // Method lazySetReadCounter:(J)V
      86: return

  public int reads();
    Code:
       0: aload_0
       1: getfield      #7                  // Field readCounter:J
       4: l2i
       5: ireturn

  public int writes();
    Code:
       0: aload_0
       1: getfield      #18                 // Field writeCounter:J
       4: l2i
       5: ireturn
}
