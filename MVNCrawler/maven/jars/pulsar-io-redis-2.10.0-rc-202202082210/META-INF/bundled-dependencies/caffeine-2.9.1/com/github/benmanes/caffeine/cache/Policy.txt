Compiled from "Policy.java"
public interface com.github.benmanes.caffeine.cache.Policy<K, V> {
  public abstract boolean isRecordingStats();

  public default V getIfPresentQuietly(java.lang.Object);
    Code:
       0: new           #1                  // class java/lang/UnsupportedOperationException
       3: dup
       4: invokespecial #2                  // Method java/lang/UnsupportedOperationException."<init>":()V
       7: athrow

  public abstract java.util.Optional<com.github.benmanes.caffeine.cache.Policy$Eviction<K, V>> eviction();

  public abstract java.util.Optional<com.github.benmanes.caffeine.cache.Policy$Expiration<K, V>> expireAfterAccess();

  public abstract java.util.Optional<com.github.benmanes.caffeine.cache.Policy$Expiration<K, V>> expireAfterWrite();

  public default java.util.Optional<com.github.benmanes.caffeine.cache.Policy$VarExpiration<K, V>> expireVariably();
    Code:
       0: invokestatic  #3                  // Method java/util/Optional.empty:()Ljava/util/Optional;
       3: areturn

  public abstract java.util.Optional<com.github.benmanes.caffeine.cache.Policy$Expiration<K, V>> refreshAfterWrite();
}
