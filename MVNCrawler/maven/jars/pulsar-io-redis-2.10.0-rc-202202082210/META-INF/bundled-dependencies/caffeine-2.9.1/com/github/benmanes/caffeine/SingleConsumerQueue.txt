Compiled from "SingleConsumerQueue.java"
public final class com.github.benmanes.caffeine.SingleConsumerQueue<E> extends com.github.benmanes.caffeine.SCQHeader$HeadAndTailRef<E> implements java.util.Queue<E>, java.io.Serializable {
  static final int NCPU;

  static final int ARENA_LENGTH;

  static final int ARENA_MASK;

  static final java.util.function.Function<?, ?> OPTIMISIC;

  static final int SPINS;

  static final long PROBE;

  final java.util.concurrent.atomic.AtomicReference<com.github.benmanes.caffeine.SingleConsumerQueue$Node<E>>[] arena;

  final java.util.function.Function<E, com.github.benmanes.caffeine.SingleConsumerQueue$Node<E>> factory;

  static final long serialVersionUID;

  static int ceilingPowerOfTwo(int);
    Code:
       0: iconst_1
       1: iload_0
       2: iconst_1
       3: isub
       4: invokestatic  #1                  // Method java/lang/Integer.numberOfLeadingZeros:(I)I
       7: ineg
       8: ishl
       9: ireturn

  private com.github.benmanes.caffeine.SingleConsumerQueue(java.util.function.Function<E, com.github.benmanes.caffeine.SingleConsumerQueue$Node<E>>);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method com/github/benmanes/caffeine/SCQHeader$HeadAndTailRef."<init>":()V
       4: aload_0
       5: getstatic     #3                  // Field ARENA_LENGTH:I
       8: anewarray     #4                  // class java/util/concurrent/atomic/AtomicReference
      11: putfield      #5                  // Field arena:[Ljava/util/concurrent/atomic/AtomicReference;
      14: iconst_0
      15: istore_2
      16: iload_2
      17: getstatic     #3                  // Field ARENA_LENGTH:I
      20: if_icmpge     42
      23: aload_0
      24: getfield      #5                  // Field arena:[Ljava/util/concurrent/atomic/AtomicReference;
      27: iload_2
      28: new           #4                  // class java/util/concurrent/atomic/AtomicReference
      31: dup
      32: invokespecial #6                  // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
      35: aastore
      36: iinc          2, 1
      39: goto          16
      42: new           #7                  // class com/github/benmanes/caffeine/SingleConsumerQueue$Node
      45: dup
      46: aconst_null
      47: invokespecial #8                  // Method com/github/benmanes/caffeine/SingleConsumerQueue$Node."<init>":(Ljava/lang/Object;)V
      50: astore_2
      51: aload_0
      52: aload_1
      53: putfield      #9                  // Field factory:Ljava/util/function/Function;
      56: aload_0
      57: aload_2
      58: invokevirtual #10                 // Method lazySetTail:(Lcom/github/benmanes/caffeine/SingleConsumerQueue$Node;)V
      61: aload_0
      62: aload_2
      63: putfield      #11                 // Field head:Lcom/github/benmanes/caffeine/SingleConsumerQueue$Node;
      66: return

  public static <E> com.github.benmanes.caffeine.SingleConsumerQueue<E> optimistic();
    Code:
       0: getstatic     #12                 // Field OPTIMISIC:Ljava/util/function/Function;
       3: astore_0
       4: new           #13                 // class com/github/benmanes/caffeine/SingleConsumerQueue
       7: dup
       8: aload_0
       9: invokespecial #14                 // Method "<init>":(Ljava/util/function/Function;)V
      12: areturn

  public static <E> com.github.benmanes.caffeine.SingleConsumerQueue<E> linearizable();
    Code:
       0: new           #13                 // class com/github/benmanes/caffeine/SingleConsumerQueue
       3: dup
       4: invokedynamic #15,  0             // InvokeDynamic #0:apply:()Ljava/util/function/Function;
       9: invokespecial #14                 // Method "<init>":(Ljava/util/function/Function;)V
      12: areturn

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #11                 // Field head:Lcom/github/benmanes/caffeine/SingleConsumerQueue$Node;
       4: aload_0
       5: getfield      #16                 // Field tail:Lcom/github/benmanes/caffeine/SingleConsumerQueue$Node;
       8: if_acmpne     15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  public int size();
    Code:
       0: aload_0
       1: getfield      #11                 // Field head:Lcom/github/benmanes/caffeine/SingleConsumerQueue$Node;
       4: astore_1
       5: aload_0
       6: getfield      #16                 // Field tail:Lcom/github/benmanes/caffeine/SingleConsumerQueue$Node;
       9: astore_2
      10: iconst_0
      11: istore_3
      12: aload_1
      13: aload_2
      14: if_acmpeq     56
      17: iload_3
      18: ldc           #18                 // int 2147483647
      20: if_icmpeq     56
      23: aload_1
      24: invokevirtual #19                 // Method com/github/benmanes/caffeine/SingleConsumerQueue$Node.getNextRelaxed:()Lcom/github/benmanes/caffeine/SingleConsumerQueue$Node;
      27: astore        4
      29: aload         4
      31: ifnonnull     47
      34: aload_1
      35: getfield      #20                 // Field com/github/benmanes/caffeine/SingleConsumerQueue$Node.next:Lcom/github/benmanes/caffeine/SingleConsumerQueue$Node;
      38: dup
      39: astore        4
      41: ifnonnull     47
      44: goto          34
      47: aload         4
      49: astore_1
      50: iinc          3, 1
      53: goto          12
      56: iload_3
      57: ireturn

  public boolean contains(java.lang.Object);
    Code:
       0: aload_1
       1: ifnonnull     6
       4: iconst_0
       5: ireturn
       6: aload_0
       7: invokevirtual #21                 // Method iterator:()Ljava/util/Iterator;
      10: astore_2
      11: aload_2
      12: invokeinterface #22,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      17: ifeq          35
      20: aload_1
      21: aload_2
      22: invokeinterface #23,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      27: invokevirtual #24                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      30: ifeq          11
      33: iconst_1
      34: ireturn
      35: iconst_0
      36: ireturn

  public E peek();
    Code:
       0: aload_0
       1: getfield      #11                 // Field head:Lcom/github/benmanes/caffeine/SingleConsumerQueue$Node;
       4: astore_1
       5: aload_0
       6: getfield      #16                 // Field tail:Lcom/github/benmanes/caffeine/SingleConsumerQueue$Node;
       9: astore_2
      10: aload_1
      11: aload_2
      12: if_acmpne     17
      15: aconst_null
      16: areturn
      17: aload_1
      18: invokevirtual #19                 // Method com/github/benmanes/caffeine/SingleConsumerQueue$Node.getNextRelaxed:()Lcom/github/benmanes/caffeine/SingleConsumerQueue$Node;
      21: astore_3
      22: aload_3
      23: ifnonnull     38
      26: aload_1
      27: getfield      #20                 // Field com/github/benmanes/caffeine/SingleConsumerQueue$Node.next:Lcom/github/benmanes/caffeine/SingleConsumerQueue$Node;
      30: dup
      31: astore_3
      32: ifnonnull     38
      35: goto          26
      38: aload_3
      39: getfield      #25                 // Field com/github/benmanes/caffeine/SingleConsumerQueue$Node.value:Ljava/lang/Object;
      42: areturn

  public boolean offer(E);
    Code:
       0: aload_1
       1: invokestatic  #26                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_0
       6: getfield      #9                  // Field factory:Ljava/util/function/Function;
       9: aload_1
      10: invokeinterface #27,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      15: checkcast     #7                  // class com/github/benmanes/caffeine/SingleConsumerQueue$Node
      18: astore_2
      19: aload_0
      20: aload_2
      21: aload_2
      22: invokevirtual #28                 // Method append:(Lcom/github/benmanes/caffeine/SingleConsumerQueue$Node;Lcom/github/benmanes/caffeine/SingleConsumerQueue$Node;)V
      25: iconst_1
      26: ireturn

  public E poll();
    Code:
       0: aload_0
       1: getfield      #11                 // Field head:Lcom/github/benmanes/caffeine/SingleConsumerQueue$Node;
       4: astore_1
       5: aload_1
       6: invokevirtual #19                 // Method com/github/benmanes/caffeine/SingleConsumerQueue$Node.getNextRelaxed:()Lcom/github/benmanes/caffeine/SingleConsumerQueue$Node;
       9: astore_2
      10: aload_2
      11: ifnonnull     36
      14: aload_1
      15: aload_0
      16: getfield      #16                 // Field tail:Lcom/github/benmanes/caffeine/SingleConsumerQueue$Node;
      19: if_acmpne     24
      22: aconst_null
      23: areturn
      24: aload_1
      25: getfield      #20                 // Field com/github/benmanes/caffeine/SingleConsumerQueue$Node.next:Lcom/github/benmanes/caffeine/SingleConsumerQueue$Node;
      28: dup
      29: astore_2
      30: ifnonnull     36
      33: goto          24
      36: aload_2
      37: getfield      #25                 // Field com/github/benmanes/caffeine/SingleConsumerQueue$Node.value:Ljava/lang/Object;
      40: astore_3
      41: aload_2
      42: aconst_null
      43: putfield      #25                 // Field com/github/benmanes/caffeine/SingleConsumerQueue$Node.value:Ljava/lang/Object;
      46: aload_0
      47: aload_2
      48: putfield      #11                 // Field head:Lcom/github/benmanes/caffeine/SingleConsumerQueue$Node;
      51: aload_0
      52: getfield      #9                  // Field factory:Ljava/util/function/Function;
      55: getstatic     #12                 // Field OPTIMISIC:Ljava/util/function/Function;
      58: if_acmpne     66
      61: aload_1
      62: aconst_null
      63: putfield      #20                 // Field com/github/benmanes/caffeine/SingleConsumerQueue$Node.next:Lcom/github/benmanes/caffeine/SingleConsumerQueue$Node;
      66: aload_3
      67: areturn

  public boolean add(E);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #29                 // Method offer:(Ljava/lang/Object;)Z
       5: ireturn

  public boolean addAll(java.util.Collection<? extends E>);
    Code:
       0: aload_1
       1: invokestatic  #26                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aconst_null
       6: astore_2
       7: aconst_null
       8: astore_3
       9: aload_1
      10: invokeinterface #30,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      15: astore        4
      17: aload         4
      19: invokeinterface #22,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      24: ifeq          89
      27: aload         4
      29: invokeinterface #23,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      34: astore        5
      36: aload         5
      38: invokestatic  #26                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
      41: pop
      42: aload_2
      43: ifnonnull     66
      46: aload_0
      47: getfield      #9                  // Field factory:Ljava/util/function/Function;
      50: aload         5
      52: invokeinterface #27,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      57: checkcast     #7                  // class com/github/benmanes/caffeine/SingleConsumerQueue$Node
      60: astore_2
      61: aload_2
      62: astore_3
      63: goto          86
      66: new           #7                  // class com/github/benmanes/caffeine/SingleConsumerQueue$Node
      69: dup
      70: aload         5
      72: invokespecial #8                  // Method com/github/benmanes/caffeine/SingleConsumerQueue$Node."<init>":(Ljava/lang/Object;)V
      75: astore        6
      77: aload_3
      78: aload         6
      80: invokevirtual #31                 // Method com/github/benmanes/caffeine/SingleConsumerQueue$Node.lazySetNext:(Lcom/github/benmanes/caffeine/SingleConsumerQueue$Node;)V
      83: aload         6
      85: astore_3
      86: goto          17
      89: aload_2
      90: ifnonnull     95
      93: iconst_0
      94: ireturn
      95: aload_0
      96: aload_2
      97: aload_3
      98: invokevirtual #28                 // Method append:(Lcom/github/benmanes/caffeine/SingleConsumerQueue$Node;Lcom/github/benmanes/caffeine/SingleConsumerQueue$Node;)V
     101: iconst_1
     102: ireturn

  void append(com.github.benmanes.caffeine.SingleConsumerQueue$Node<E>, com.github.benmanes.caffeine.SingleConsumerQueue$Node<E>);
    Code:
       0: aload_0
       1: getfield      #16                 // Field tail:Lcom/github/benmanes/caffeine/SingleConsumerQueue$Node;
       4: astore_3
       5: aload_0
       6: aload_3
       7: aload_2
       8: invokevirtual #32                 // Method casTail:(Lcom/github/benmanes/caffeine/SingleConsumerQueue$Node;Lcom/github/benmanes/caffeine/SingleConsumerQueue$Node;)Z
      11: ifeq          71
      14: aload_3
      15: aload_1
      16: invokevirtual #31                 // Method com/github/benmanes/caffeine/SingleConsumerQueue$Node.lazySetNext:(Lcom/github/benmanes/caffeine/SingleConsumerQueue$Node;)V
      19: aload_0
      20: getfield      #9                  // Field factory:Ljava/util/function/Function;
      23: getstatic     #12                 // Field OPTIMISIC:Ljava/util/function/Function;
      26: if_acmpne     30
      29: return
      30: aload_1
      31: invokevirtual #33                 // Method com/github/benmanes/caffeine/SingleConsumerQueue$Node.complete:()V
      34: aload_1
      35: aload_2
      36: if_acmpne     40
      39: return
      40: aload_1
      41: invokevirtual #19                 // Method com/github/benmanes/caffeine/SingleConsumerQueue$Node.getNextRelaxed:()Lcom/github/benmanes/caffeine/SingleConsumerQueue$Node;
      44: astore        4
      46: aload         4
      48: ifnonnull     52
      51: return
      52: aload         4
      54: getfield      #25                 // Field com/github/benmanes/caffeine/SingleConsumerQueue$Node.value:Ljava/lang/Object;
      57: ifnonnull     65
      60: aload_1
      61: aconst_null
      62: putfield      #20                 // Field com/github/benmanes/caffeine/SingleConsumerQueue$Node.next:Lcom/github/benmanes/caffeine/SingleConsumerQueue$Node;
      65: aload         4
      67: astore_1
      68: goto          30
      71: aload_0
      72: aload_1
      73: aload_2
      74: invokevirtual #34                 // Method transferOrCombine:(Lcom/github/benmanes/caffeine/SingleConsumerQueue$Node;Lcom/github/benmanes/caffeine/SingleConsumerQueue$Node;)Lcom/github/benmanes/caffeine/SingleConsumerQueue$Node;
      77: astore        4
      79: aload         4
      81: ifnonnull     89
      84: aload_1
      85: invokevirtual #35                 // Method com/github/benmanes/caffeine/SingleConsumerQueue$Node.await:()V
      88: return
      89: aload         4
      91: aload_1
      92: if_acmpeq     98
      95: aload         4
      97: astore_2
      98: goto          0

  com.github.benmanes.caffeine.SingleConsumerQueue$Node<E> transferOrCombine(com.github.benmanes.caffeine.SingleConsumerQueue$Node<E>, com.github.benmanes.caffeine.SingleConsumerQueue$Node<E>);
    Code:
       0: invokestatic  #36                 // Method index:()I
       3: istore_3
       4: aload_0
       5: getfield      #5                  // Field arena:[Ljava/util/concurrent/atomic/AtomicReference;
       8: iload_3
       9: aaload
      10: astore        4
      12: aload         4
      14: invokevirtual #37                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      17: checkcast     #7                  // class com/github/benmanes/caffeine/SingleConsumerQueue$Node
      20: astore        5
      22: aload         5
      24: ifnonnull     81
      27: aload         4
      29: aconst_null
      30: aload_1
      31: invokevirtual #38                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
      34: ifeq          176
      37: iconst_0
      38: istore        6
      40: iload         6
      42: getstatic     #39                 // Field SPINS:I
      45: if_icmpge     65
      48: aload         4
      50: invokevirtual #37                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      53: aload_1
      54: if_acmpeq     59
      57: aconst_null
      58: areturn
      59: iinc          6, 1
      62: goto          40
      65: aload         4
      67: aload_1
      68: aconst_null
      69: invokevirtual #38                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
      72: ifeq          79
      75: aload_1
      76: goto          80
      79: aconst_null
      80: areturn
      81: aload         4
      83: aload         5
      85: aconst_null
      86: invokevirtual #38                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
      89: ifeq          176
      92: aload_2
      93: aload         5
      95: invokevirtual #31                 // Method com/github/benmanes/caffeine/SingleConsumerQueue$Node.lazySetNext:(Lcom/github/benmanes/caffeine/SingleConsumerQueue$Node;)V
      98: aload         5
     100: invokestatic  #40                 // Method findLast:(Lcom/github/benmanes/caffeine/SingleConsumerQueue$Node;)Lcom/github/benmanes/caffeine/SingleConsumerQueue$Node;
     103: astore_2
     104: iconst_1
     105: istore        6
     107: iload         6
     109: getstatic     #3                  // Field ARENA_LENGTH:I
     112: if_icmpge     174
     115: aload_0
     116: getfield      #5                  // Field arena:[Ljava/util/concurrent/atomic/AtomicReference;
     119: iload         6
     121: iload_3
     122: iadd
     123: getstatic     #41                 // Field ARENA_MASK:I
     126: iand
     127: aaload
     128: astore        4
     130: aload         4
     132: invokevirtual #37                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
     135: checkcast     #7                  // class com/github/benmanes/caffeine/SingleConsumerQueue$Node
     138: astore        5
     140: aload         5
     142: ifnull        168
     145: aload         4
     147: aload         5
     149: aconst_null
     150: invokevirtual #38                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
     153: ifeq          168
     156: aload_2
     157: aload         5
     159: invokevirtual #31                 // Method com/github/benmanes/caffeine/SingleConsumerQueue$Node.lazySetNext:(Lcom/github/benmanes/caffeine/SingleConsumerQueue$Node;)V
     162: aload         5
     164: invokestatic  #40                 // Method findLast:(Lcom/github/benmanes/caffeine/SingleConsumerQueue$Node;)Lcom/github/benmanes/caffeine/SingleConsumerQueue$Node;
     167: astore_2
     168: iinc          6, 1
     171: goto          107
     174: aload_2
     175: areturn
     176: goto          12

  static int index();
    Code:
       0: getstatic     #42                 // Field com/github/benmanes/caffeine/base/UnsafeAccess.UNSAFE:Lsun/misc/Unsafe;
       3: invokestatic  #43                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       6: getstatic     #44                 // Field PROBE:J
       9: invokevirtual #45                 // Method sun/misc/Unsafe.getInt:(Ljava/lang/Object;J)I
      12: istore_0
      13: iload_0
      14: ifne          34
      17: invokestatic  #46                 // Method java/util/concurrent/ThreadLocalRandom.current:()Ljava/util/concurrent/ThreadLocalRandom;
      20: pop
      21: getstatic     #42                 // Field com/github/benmanes/caffeine/base/UnsafeAccess.UNSAFE:Lsun/misc/Unsafe;
      24: invokestatic  #43                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      27: getstatic     #44                 // Field PROBE:J
      30: invokevirtual #45                 // Method sun/misc/Unsafe.getInt:(Ljava/lang/Object;J)I
      33: istore_0
      34: iload_0
      35: getstatic     #41                 // Field ARENA_MASK:I
      38: iand
      39: ireturn

  static <E> com.github.benmanes.caffeine.SingleConsumerQueue$Node<E> findLast(com.github.benmanes.caffeine.SingleConsumerQueue$Node<E>);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method com/github/benmanes/caffeine/SingleConsumerQueue$Node.getNextRelaxed:()Lcom/github/benmanes/caffeine/SingleConsumerQueue$Node;
       4: dup
       5: astore_1
       6: ifnull        14
       9: aload_1
      10: astore_0
      11: goto          0
      14: aload_0
      15: areturn

  public java.util.Iterator<E> iterator();
    Code:
       0: new           #47                 // class com/github/benmanes/caffeine/SingleConsumerQueue$1
       3: dup
       4: aload_0
       5: invokespecial #48                 // Method com/github/benmanes/caffeine/SingleConsumerQueue$1."<init>":(Lcom/github/benmanes/caffeine/SingleConsumerQueue;)V
       8: areturn

  java.lang.Object writeReplace();
    Code:
       0: new           #49                 // class com/github/benmanes/caffeine/SingleConsumerQueue$SerializationProxy
       3: dup
       4: aload_0
       5: invokespecial #50                 // Method com/github/benmanes/caffeine/SingleConsumerQueue$SerializationProxy."<init>":(Lcom/github/benmanes/caffeine/SingleConsumerQueue;)V
       8: areturn

  private void readObject(java.io.ObjectInputStream) throws java.io.InvalidObjectException;
    Code:
       0: new           #51                 // class java/io/InvalidObjectException
       3: dup
       4: ldc           #52                 // String Proxy required
       6: invokespecial #53                 // Method java/io/InvalidObjectException."<init>":(Ljava/lang/String;)V
       9: athrow

  static {};
    Code:
       0: invokestatic  #54                 // Method java/lang/Runtime.getRuntime:()Ljava/lang/Runtime;
       3: invokevirtual #55                 // Method java/lang/Runtime.availableProcessors:()I
       6: putstatic     #56                 // Field NCPU:I
       9: getstatic     #56                 // Field NCPU:I
      12: iconst_1
      13: iadd
      14: iconst_2
      15: idiv
      16: invokestatic  #57                 // Method ceilingPowerOfTwo:(I)I
      19: putstatic     #3                  // Field ARENA_LENGTH:I
      22: getstatic     #3                  // Field ARENA_LENGTH:I
      25: iconst_1
      26: isub
      27: putstatic     #41                 // Field ARENA_MASK:I
      30: invokedynamic #58,  0             // InvokeDynamic #1:apply:()Ljava/util/function/Function;
      35: putstatic     #12                 // Field OPTIMISIC:Ljava/util/function/Function;
      38: getstatic     #56                 // Field NCPU:I
      41: iconst_1
      42: if_icmpne     49
      45: iconst_0
      46: goto          52
      49: sipush        2000
      52: putstatic     #39                 // Field SPINS:I
      55: ldc           #59                 // class java/lang/Thread
      57: ldc           #60                 // String threadLocalRandomProbe
      59: invokestatic  #61                 // Method com/github/benmanes/caffeine/base/UnsafeAccess.objectFieldOffset:(Ljava/lang/Class;Ljava/lang/String;)J
      62: putstatic     #44                 // Field PROBE:J
      65: return
}
