Compiled from "Cache.java"
abstract class io.netty.resolver.dns.Cache<E> {
  private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<io.netty.resolver.dns.Cache$Entries, java.util.concurrent.ScheduledFuture> FUTURE_UPDATER;

  private static final java.util.concurrent.ScheduledFuture<?> CANCELLED;

  static final int MAX_SUPPORTED_TTL_SECS;

  private final java.util.concurrent.ConcurrentMap<java.lang.String, io.netty.resolver.dns.Cache<E>.Entries> resolveCache;

  io.netty.resolver.dns.Cache();
    Code:
       0: aload_0
       1: invokespecial #4                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #5                  // Method io/netty/util/internal/PlatformDependent.newConcurrentHashMap:()Ljava/util/concurrent/ConcurrentMap;
       8: putfield      #1                  // Field resolveCache:Ljava/util/concurrent/ConcurrentMap;
      11: return

  final void clear();
    Code:
       0: aload_0
       1: getfield      #1                  // Field resolveCache:Ljava/util/concurrent/ConcurrentMap;
       4: invokeinterface #6,  1            // InterfaceMethod java/util/concurrent/ConcurrentMap.isEmpty:()Z
       9: ifne          71
      12: aload_0
      13: getfield      #1                  // Field resolveCache:Ljava/util/concurrent/ConcurrentMap;
      16: invokeinterface #7,  1            // InterfaceMethod java/util/concurrent/ConcurrentMap.entrySet:()Ljava/util/Set;
      21: invokeinterface #8,  1            // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      26: astore_1
      27: aload_1
      28: invokeinterface #9,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z
      33: ifeq          68
      36: aload_1
      37: invokeinterface #10,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      42: checkcast     #11                 // class java/util/Map$Entry
      45: astore_2
      46: aload_1
      47: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.remove:()V
      52: aload_2
      53: invokeinterface #13,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      58: checkcast     #14                 // class io/netty/resolver/dns/Cache$Entries
      61: invokevirtual #15                 // Method io/netty/resolver/dns/Cache$Entries.clearAndCancel:()Z
      64: pop
      65: goto          27
      68: goto          0
      71: return

  final boolean clear(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #1                  // Field resolveCache:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: invokeinterface #16,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #14                 // class io/netty/resolver/dns/Cache$Entries
      13: astore_2
      14: aload_2
      15: ifnull        29
      18: aload_2
      19: invokevirtual #15                 // Method io/netty/resolver/dns/Cache$Entries.clearAndCancel:()Z
      22: ifeq          29
      25: iconst_1
      26: goto          30
      29: iconst_0
      30: ireturn

  final java.util.List<? extends E> get(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #1                  // Field resolveCache:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: invokeinterface #17,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #14                 // class io/netty/resolver/dns/Cache$Entries
      13: astore_2
      14: aload_2
      15: ifnonnull     22
      18: aconst_null
      19: goto          29
      22: aload_2
      23: invokevirtual #18                 // Method io/netty/resolver/dns/Cache$Entries.get:()Ljava/lang/Object;
      26: checkcast     #19                 // class java/util/List
      29: areturn

  final void cache(java.lang.String, E, int, io.netty.channel.EventLoop);
    Code:
       0: aload_0
       1: getfield      #1                  // Field resolveCache:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: invokeinterface #17,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #14                 // class io/netty/resolver/dns/Cache$Entries
      13: astore        5
      15: aload         5
      17: ifnonnull     57
      20: new           #14                 // class io/netty/resolver/dns/Cache$Entries
      23: dup
      24: aload_0
      25: aload_1
      26: invokespecial #20                 // Method io/netty/resolver/dns/Cache$Entries."<init>":(Lio/netty/resolver/dns/Cache;Ljava/lang/String;)V
      29: astore        5
      31: aload_0
      32: getfield      #1                  // Field resolveCache:Ljava/util/concurrent/ConcurrentMap;
      35: aload_1
      36: aload         5
      38: invokeinterface #21,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      43: checkcast     #14                 // class io/netty/resolver/dns/Cache$Entries
      46: astore        6
      48: aload         6
      50: ifnull        57
      53: aload         6
      55: astore        5
      57: aload         5
      59: aload_2
      60: iload_3
      61: aload         4
      63: invokevirtual #22                 // Method io/netty/resolver/dns/Cache$Entries.add:(Ljava/lang/Object;ILio/netty/channel/EventLoop;)V
      66: return

  final int size();
    Code:
       0: aload_0
       1: getfield      #1                  // Field resolveCache:Ljava/util/concurrent/ConcurrentMap;
       4: invokeinterface #23,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.size:()I
       9: ireturn

  protected abstract boolean shouldReplaceAll(E);

  protected void sortEntries(java.lang.String, java.util.List<E>);
    Code:
       0: return

  protected abstract boolean equals(E, E);

  static java.util.concurrent.atomic.AtomicReferenceFieldUpdater access$000();
    Code:
       0: getstatic     #3                  // Field FUTURE_UPDATER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: areturn

  static java.util.concurrent.ScheduledFuture access$100();
    Code:
       0: getstatic     #2                  // Field CANCELLED:Ljava/util/concurrent/ScheduledFuture;
       3: areturn

  static java.util.concurrent.ConcurrentMap access$200(io.netty.resolver.dns.Cache);
    Code:
       0: aload_0
       1: getfield      #1                  // Field resolveCache:Ljava/util/concurrent/ConcurrentMap;
       4: areturn

  static {};
    Code:
       0: ldc           #14                 // class io/netty/resolver/dns/Cache$Entries
       2: ldc           #24                 // class java/util/concurrent/ScheduledFuture
       4: ldc           #25                 // String expirationFuture
       6: invokestatic  #26                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: putstatic     #3                  // Field FUTURE_UPDATER:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      12: new           #27                 // class io/netty/resolver/dns/Cache$1
      15: dup
      16: invokespecial #28                 // Method io/netty/resolver/dns/Cache$1."<init>":()V
      19: putstatic     #2                  // Field CANCELLED:Ljava/util/concurrent/ScheduledFuture;
      22: getstatic     #29                 // Field java/util/concurrent/TimeUnit.DAYS:Ljava/util/concurrent/TimeUnit;
      25: ldc2_w        #30                 // long 730l
      28: invokevirtual #32                 // Method java/util/concurrent/TimeUnit.toSeconds:(J)J
      31: l2i
      32: putstatic     #33                 // Field MAX_SUPPORTED_TTL_SECS:I
      35: return
}
