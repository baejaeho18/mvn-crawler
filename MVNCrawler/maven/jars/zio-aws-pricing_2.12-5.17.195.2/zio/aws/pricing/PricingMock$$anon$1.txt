Compiled from "PricingMock.scala"
public final class zio.aws.pricing.PricingMock$$anon$1 implements zio.aws.pricing.Pricing {
  private final software.amazon.awssdk.services.pricing.PricingAsyncClient api;

  private final zio.mock.Proxy proxy$1;

  private final zio.Runtime rts$1;

  public software.amazon.awssdk.services.pricing.PricingAsyncClient api();
    Code:
       0: aload_0
       1: getfield      #64                 // Field api:Lsoftware/amazon/awssdk/services/pricing/PricingAsyncClient;
       4: areturn

  public <R1> zio.aws.pricing.Pricing withAspect(zio.ZIOAspect<scala.runtime.Nothing$, R1, zio.aws.core.AwsError, zio.aws.core.AwsError, scala.runtime.Nothing$, zio.aws.core.aspects.package$Described<?>>, zio.ZEnvironment<R1>);
    Code:
       0: aload_0
       1: areturn

  public zio.ZIO<java.lang.Object, zio.aws.core.AwsError, zio.aws.core.StreamingOutputResult<java.lang.Object, zio.aws.pricing.model.DescribeServicesResponse$ReadOnly, zio.aws.pricing.model.Service$ReadOnly>> describeServices(zio.aws.pricing.model.DescribeServicesRequest);
    Code:
       0: aload_0
       1: getfield      #79                 // Field proxy$1:Lzio/mock/Proxy;
       4: getstatic     #83                 // Field zio/aws/pricing/PricingMock$DescribeServices$.MODULE$:Lzio/aws/pricing/PricingMock$DescribeServices$;
       7: aload_1
       8: invokevirtual #89                 // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public zio.ZIO<java.lang.Object, zio.aws.core.AwsError, zio.aws.pricing.model.DescribeServicesResponse$ReadOnly> describeServicesPaginated(zio.aws.pricing.model.DescribeServicesRequest);
    Code:
       0: aload_0
       1: getfield      #79                 // Field proxy$1:Lzio/mock/Proxy;
       4: getstatic     #95                 // Field zio/aws/pricing/PricingMock$DescribeServicesPaginated$.MODULE$:Lzio/aws/pricing/PricingMock$DescribeServicesPaginated$;
       7: aload_1
       8: invokevirtual #89                 // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public zio.stream.ZStream<java.lang.Object, zio.aws.core.AwsError, zio.aws.pricing.model.AttributeValue$ReadOnly> getAttributeValues(zio.aws.pricing.model.GetAttributeValuesRequest);
    Code:
       0: aload_0
       1: getfield      #100                // Field rts$1:Lzio/Runtime;
       4: aload_0
       5: getfield      #79                 // Field proxy$1:Lzio/mock/Proxy;
       8: getstatic     #103                // Field zio/aws/pricing/PricingMock$GetAttributeValues$.MODULE$:Lzio/aws/pricing/PricingMock$GetAttributeValues$;
      11: aload_1
      12: invokevirtual #89                 // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      15: ldc           #105                // String zio.aws.pricing.PricingMock.compose.$anon.getAttributeValues(PricingMock.scala:77)
      17: invokeinterface #111,  3          // InterfaceMethod zio/Runtime.unsafeRun:(Lzio/ZIO;Ljava/lang/Object;)Ljava/lang/Object;
      22: checkcast     #113                // class zio/stream/ZStream
      25: areturn

  public zio.ZIO<java.lang.Object, zio.aws.core.AwsError, zio.aws.pricing.model.GetAttributeValuesResponse$ReadOnly> getAttributeValuesPaginated(zio.aws.pricing.model.GetAttributeValuesRequest);
    Code:
       0: aload_0
       1: getfield      #79                 // Field proxy$1:Lzio/mock/Proxy;
       4: getstatic     #120                // Field zio/aws/pricing/PricingMock$GetAttributeValuesPaginated$.MODULE$:Lzio/aws/pricing/PricingMock$GetAttributeValuesPaginated$;
       7: aload_1
       8: invokevirtual #89                 // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public zio.ZIO<java.lang.Object, zio.aws.core.AwsError, zio.aws.core.StreamingOutputResult<java.lang.Object, zio.aws.pricing.model.GetProductsResponse$ReadOnly, java.lang.String>> getProducts(zio.aws.pricing.model.GetProductsRequest);
    Code:
       0: aload_0
       1: getfield      #79                 // Field proxy$1:Lzio/mock/Proxy;
       4: getstatic     #126                // Field zio/aws/pricing/PricingMock$GetProducts$.MODULE$:Lzio/aws/pricing/PricingMock$GetProducts$;
       7: aload_1
       8: invokevirtual #89                 // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public zio.ZIO<java.lang.Object, zio.aws.core.AwsError, zio.aws.pricing.model.GetProductsResponse$ReadOnly> getProductsPaginated(zio.aws.pricing.model.GetProductsRequest);
    Code:
       0: aload_0
       1: getfield      #79                 // Field proxy$1:Lzio/mock/Proxy;
       4: getstatic     #132                // Field zio/aws/pricing/PricingMock$GetProductsPaginated$.MODULE$:Lzio/aws/pricing/PricingMock$GetProductsPaginated$;
       7: aload_1
       8: invokevirtual #89                 // Method zio/mock/Proxy.apply:(Lzio/mock/Capability;Ljava/lang/Object;)Lzio/ZIO;
      11: areturn

  public java.lang.Object withAspect(zio.ZIOAspect, zio.ZEnvironment);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #135                // Method withAspect:(Lzio/ZIOAspect;Lzio/ZEnvironment;)Lzio/aws/pricing/Pricing;
       6: areturn

  public zio.aws.pricing.PricingMock$$anon$1(zio.mock.Proxy, zio.Runtime);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #79                 // Field proxy$1:Lzio/mock/Proxy;
       5: aload_0
       6: aload_2
       7: putfield      #100                // Field rts$1:Lzio/Runtime;
      10: aload_0
      11: invokespecial #140                // Method java/lang/Object."<init>":()V
      14: aload_0
      15: aconst_null
      16: putfield      #64                 // Field api:Lsoftware/amazon/awssdk/services/pricing/PricingAsyncClient;
      19: return
}
