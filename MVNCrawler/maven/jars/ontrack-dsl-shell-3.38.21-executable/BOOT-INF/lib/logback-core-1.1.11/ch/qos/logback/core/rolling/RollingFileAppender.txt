Compiled from "RollingFileAppender.java"
public class ch.qos.logback.core.rolling.RollingFileAppender<E> extends ch.qos.logback.core.FileAppender<E> {
  java.io.File currentlyActiveFile;

  ch.qos.logback.core.rolling.TriggeringPolicy<E> triggeringPolicy;

  ch.qos.logback.core.rolling.RollingPolicy rollingPolicy;

  private static java.lang.String RFA_NO_TP_URL;

  private static java.lang.String RFA_NO_RP_URL;

  private static java.lang.String COLLISION_URL;

  private static java.lang.String RFA_LATE_FILE_URL;

  public ch.qos.logback.core.rolling.RollingFileAppender();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method ch/qos/logback/core/FileAppender."<init>":()V
       4: return

  public void start();
    Code:
       0: aload_0
       1: getfield      #2                  // Field triggeringPolicy:Lch/qos/logback/core/rolling/TriggeringPolicy;
       4: ifnonnull     59
       7: aload_0
       8: new           #3                  // class java/lang/StringBuilder
      11: dup
      12: invokespecial #4                  // Method java/lang/StringBuilder."<init>":()V
      15: ldc           #5                  // String No TriggeringPolicy was set for the RollingFileAppender named
      17: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      20: aload_0
      21: invokevirtual #7                  // Method getName:()Ljava/lang/String;
      24: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      27: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      30: invokevirtual #9                  // Method addWarn:(Ljava/lang/String;)V
      33: aload_0
      34: new           #3                  // class java/lang/StringBuilder
      37: dup
      38: invokespecial #4                  // Method java/lang/StringBuilder."<init>":()V
      41: ldc           #10                 // String For more information, please visit
      43: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      46: getstatic     #11                 // Field RFA_NO_TP_URL:Ljava/lang/String;
      49: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      52: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      55: invokevirtual #9                  // Method addWarn:(Ljava/lang/String;)V
      58: return
      59: aload_0
      60: getfield      #2                  // Field triggeringPolicy:Lch/qos/logback/core/rolling/TriggeringPolicy;
      63: invokeinterface #12,  1           // InterfaceMethod ch/qos/logback/core/rolling/TriggeringPolicy.isStarted:()Z
      68: ifne          78
      71: aload_0
      72: ldc           #13                 // String TriggeringPolicy has not started. RollingFileAppender will not start
      74: invokevirtual #9                  // Method addWarn:(Ljava/lang/String;)V
      77: return
      78: aload_0
      79: invokespecial #14                 // Method checkForCollisionsInPreviousRollingFileAppenders:()Z
      82: ifeq          117
      85: aload_0
      86: ldc           #15                 // String Collisions detected with FileAppender/RollingAppender instances defined earlier. Aborting.
      88: invokevirtual #16                 // Method addError:(Ljava/lang/String;)V
      91: aload_0
      92: new           #3                  // class java/lang/StringBuilder
      95: dup
      96: invokespecial #4                  // Method java/lang/StringBuilder."<init>":()V
      99: ldc           #10                 // String For more information, please visit
     101: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     104: getstatic     #17                 // Field COLLISION_WITH_EARLIER_APPENDER_URL:Ljava/lang/String;
     107: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     110: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     113: invokevirtual #16                 // Method addError:(Ljava/lang/String;)V
     116: return
     117: aload_0
     118: getfield      #18                 // Field append:Z
     121: ifne          135
     124: aload_0
     125: ldc           #19                 // String Append mode is mandatory for RollingFileAppender. Defaulting to append=true.
     127: invokevirtual #9                  // Method addWarn:(Ljava/lang/String;)V
     130: aload_0
     131: iconst_1
     132: putfield      #18                 // Field append:Z
     135: aload_0
     136: getfield      #20                 // Field rollingPolicy:Lch/qos/logback/core/rolling/RollingPolicy;
     139: ifnonnull     194
     142: aload_0
     143: new           #3                  // class java/lang/StringBuilder
     146: dup
     147: invokespecial #4                  // Method java/lang/StringBuilder."<init>":()V
     150: ldc           #21                 // String No RollingPolicy was set for the RollingFileAppender named
     152: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     155: aload_0
     156: invokevirtual #7                  // Method getName:()Ljava/lang/String;
     159: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     162: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     165: invokevirtual #16                 // Method addError:(Ljava/lang/String;)V
     168: aload_0
     169: new           #3                  // class java/lang/StringBuilder
     172: dup
     173: invokespecial #4                  // Method java/lang/StringBuilder."<init>":()V
     176: ldc           #10                 // String For more information, please visit
     178: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     181: getstatic     #22                 // Field RFA_NO_RP_URL:Ljava/lang/String;
     184: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     187: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     190: invokevirtual #16                 // Method addError:(Ljava/lang/String;)V
     193: return
     194: aload_0
     195: invokespecial #23                 // Method checkForFileAndPatternCollisions:()Z
     198: ifeq          233
     201: aload_0
     202: ldc           #24                 // String File property collides with fileNamePattern. Aborting.
     204: invokevirtual #16                 // Method addError:(Ljava/lang/String;)V
     207: aload_0
     208: new           #3                  // class java/lang/StringBuilder
     211: dup
     212: invokespecial #4                  // Method java/lang/StringBuilder."<init>":()V
     215: ldc           #10                 // String For more information, please visit
     217: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     220: getstatic     #25                 // Field COLLISION_URL:Ljava/lang/String;
     223: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     226: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     229: invokevirtual #16                 // Method addError:(Ljava/lang/String;)V
     232: return
     233: aload_0
     234: invokevirtual #26                 // Method isPrudent:()Z
     237: ifeq          280
     240: aload_0
     241: invokevirtual #27                 // Method rawFileProperty:()Ljava/lang/String;
     244: ifnull        258
     247: aload_0
     248: ldc           #28                 // String Setting \"File\" property to null on account of prudent mode
     250: invokevirtual #9                  // Method addWarn:(Ljava/lang/String;)V
     253: aload_0
     254: aconst_null
     255: invokevirtual #29                 // Method setFile:(Ljava/lang/String;)V
     258: aload_0
     259: getfield      #20                 // Field rollingPolicy:Lch/qos/logback/core/rolling/RollingPolicy;
     262: invokeinterface #30,  1           // InterfaceMethod ch/qos/logback/core/rolling/RollingPolicy.getCompressionMode:()Lch/qos/logback/core/rolling/helper/CompressionMode;
     267: getstatic     #31                 // Field ch/qos/logback/core/rolling/helper/CompressionMode.NONE:Lch/qos/logback/core/rolling/helper/CompressionMode;
     270: if_acmpeq     280
     273: aload_0
     274: ldc           #32                 // String Compression is not supported in prudent mode. Aborting
     276: invokevirtual #16                 // Method addError:(Ljava/lang/String;)V
     279: return
     280: aload_0
     281: new           #33                 // class java/io/File
     284: dup
     285: aload_0
     286: invokevirtual #34                 // Method getFile:()Ljava/lang/String;
     289: invokespecial #35                 // Method java/io/File."<init>":(Ljava/lang/String;)V
     292: putfield      #36                 // Field currentlyActiveFile:Ljava/io/File;
     295: aload_0
     296: new           #3                  // class java/lang/StringBuilder
     299: dup
     300: invokespecial #4                  // Method java/lang/StringBuilder."<init>":()V
     303: ldc           #37                 // String Active log file name:
     305: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     308: aload_0
     309: invokevirtual #34                 // Method getFile:()Ljava/lang/String;
     312: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     315: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     318: invokevirtual #38                 // Method addInfo:(Ljava/lang/String;)V
     321: aload_0
     322: invokespecial #39                 // Method ch/qos/logback/core/FileAppender.start:()V
     325: return

  private boolean checkForFileAndPatternCollisions();
    Code:
       0: aload_0
       1: getfield      #2                  // Field triggeringPolicy:Lch/qos/logback/core/rolling/TriggeringPolicy;
       4: instanceof    #40                 // class ch/qos/logback/core/rolling/RollingPolicyBase
       7: ifeq          48
      10: aload_0
      11: getfield      #2                  // Field triggeringPolicy:Lch/qos/logback/core/rolling/TriggeringPolicy;
      14: checkcast     #40                 // class ch/qos/logback/core/rolling/RollingPolicyBase
      17: astore_1
      18: aload_1
      19: getfield      #41                 // Field ch/qos/logback/core/rolling/RollingPolicyBase.fileNamePattern:Lch/qos/logback/core/rolling/helper/FileNamePattern;
      22: astore_2
      23: aload_2
      24: ifnull        48
      27: aload_0
      28: getfield      #42                 // Field fileName:Ljava/lang/String;
      31: ifnull        48
      34: aload_2
      35: invokevirtual #43                 // Method ch/qos/logback/core/rolling/helper/FileNamePattern.toRegex:()Ljava/lang/String;
      38: astore_3
      39: aload_0
      40: getfield      #42                 // Field fileName:Ljava/lang/String;
      43: aload_3
      44: invokevirtual #44                 // Method java/lang/String.matches:(Ljava/lang/String;)Z
      47: ireturn
      48: iconst_0
      49: ireturn

  private boolean checkForCollisionsInPreviousRollingFileAppenders();
    Code:
       0: iconst_0
       1: istore_1
       2: aload_0
       3: getfield      #2                  // Field triggeringPolicy:Lch/qos/logback/core/rolling/TriggeringPolicy;
       6: instanceof    #40                 // class ch/qos/logback/core/rolling/RollingPolicyBase
       9: ifeq          39
      12: aload_0
      13: getfield      #2                  // Field triggeringPolicy:Lch/qos/logback/core/rolling/TriggeringPolicy;
      16: checkcast     #40                 // class ch/qos/logback/core/rolling/RollingPolicyBase
      19: astore_2
      20: aload_2
      21: getfield      #41                 // Field ch/qos/logback/core/rolling/RollingPolicyBase.fileNamePattern:Lch/qos/logback/core/rolling/helper/FileNamePattern;
      24: astore_3
      25: aload_0
      26: aload_3
      27: invokespecial #45                 // Method innerCheckForFileNamePatternCollisionInPreviousRFA:(Lch/qos/logback/core/rolling/helper/FileNamePattern;)Z
      30: istore        4
      32: iload         4
      34: ifeq          39
      37: iconst_1
      38: istore_1
      39: iload_1
      40: ireturn

  private boolean innerCheckForFileNamePatternCollisionInPreviousRFA(ch.qos.logback.core.rolling.helper.FileNamePattern);
    Code:
       0: iconst_0
       1: istore_2
       2: aload_0
       3: getfield      #46                 // Field context:Lch/qos/logback/core/Context;
       6: ldc           #47                 // String RFA_FILENAME_PATTERN_COLLISION_MAP
       8: invokeinterface #48,  2           // InterfaceMethod ch/qos/logback/core/Context.getObject:(Ljava/lang/String;)Ljava/lang/Object;
      13: checkcast     #49                 // class java/util/Map
      16: astore_3
      17: aload_3
      18: ifnonnull     23
      21: iload_2
      22: ireturn
      23: aload_3
      24: invokeinterface #50,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      29: invokeinterface #51,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      34: astore        4
      36: aload         4
      38: invokeinterface #52,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      43: ifeq          106
      46: aload         4
      48: invokeinterface #53,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      53: checkcast     #54                 // class java/util/Map$Entry
      56: astore        5
      58: aload_1
      59: aload         5
      61: invokeinterface #55,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      66: invokevirtual #56                 // Method ch/qos/logback/core/rolling/helper/FileNamePattern.equals:(Ljava/lang/Object;)Z
      69: ifeq          103
      72: aload_0
      73: ldc           #57                 // String FileNamePattern
      75: aload         5
      77: invokeinterface #55,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      82: checkcast     #58                 // class ch/qos/logback/core/rolling/helper/FileNamePattern
      85: invokevirtual #59                 // Method ch/qos/logback/core/rolling/helper/FileNamePattern.toString:()Ljava/lang/String;
      88: aload         5
      90: invokeinterface #60,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      95: checkcast     #61                 // class java/lang/String
      98: invokevirtual #62                 // Method addErrorForCollision:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     101: iconst_1
     102: istore_2
     103: goto          36
     106: aload_0
     107: getfield      #63                 // Field name:Ljava/lang/String;
     110: ifnull        125
     113: aload_3
     114: aload_0
     115: invokevirtual #7                  // Method getName:()Ljava/lang/String;
     118: aload_1
     119: invokeinterface #64,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     124: pop
     125: iload_2
     126: ireturn

  public void stop();
    Code:
       0: aload_0
       1: invokespecial #65                 // Method ch/qos/logback/core/FileAppender.stop:()V
       4: aload_0
       5: getfield      #20                 // Field rollingPolicy:Lch/qos/logback/core/rolling/RollingPolicy;
       8: ifnull        20
      11: aload_0
      12: getfield      #20                 // Field rollingPolicy:Lch/qos/logback/core/rolling/RollingPolicy;
      15: invokeinterface #66,  1           // InterfaceMethod ch/qos/logback/core/rolling/RollingPolicy.stop:()V
      20: aload_0
      21: getfield      #2                  // Field triggeringPolicy:Lch/qos/logback/core/rolling/TriggeringPolicy;
      24: ifnull        36
      27: aload_0
      28: getfield      #2                  // Field triggeringPolicy:Lch/qos/logback/core/rolling/TriggeringPolicy;
      31: invokeinterface #67,  1           // InterfaceMethod ch/qos/logback/core/rolling/TriggeringPolicy.stop:()V
      36: aload_0
      37: getfield      #46                 // Field context:Lch/qos/logback/core/Context;
      40: invokestatic  #68                 // Method ch/qos/logback/core/util/ContextUtil.getFilenamePatternCollisionMap:(Lch/qos/logback/core/Context;)Ljava/util/Map;
      43: astore_1
      44: aload_1
      45: ifnull        66
      48: aload_0
      49: invokevirtual #7                  // Method getName:()Ljava/lang/String;
      52: ifnull        66
      55: aload_1
      56: aload_0
      57: invokevirtual #7                  // Method getName:()Ljava/lang/String;
      60: invokeinterface #69,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      65: pop
      66: return

  public void setFile(java.lang.String);
    Code:
       0: aload_1
       1: ifnull        49
       4: aload_0
       5: getfield      #2                  // Field triggeringPolicy:Lch/qos/logback/core/rolling/TriggeringPolicy;
       8: ifnonnull     18
      11: aload_0
      12: getfield      #20                 // Field rollingPolicy:Lch/qos/logback/core/rolling/RollingPolicy;
      15: ifnull        49
      18: aload_0
      19: ldc           #70                 // String File property must be set before any triggeringPolicy or rollingPolicy properties
      21: invokevirtual #16                 // Method addError:(Ljava/lang/String;)V
      24: aload_0
      25: new           #3                  // class java/lang/StringBuilder
      28: dup
      29: invokespecial #4                  // Method java/lang/StringBuilder."<init>":()V
      32: ldc           #10                 // String For more information, please visit
      34: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      37: getstatic     #71                 // Field RFA_LATE_FILE_URL:Ljava/lang/String;
      40: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      43: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      46: invokevirtual #16                 // Method addError:(Ljava/lang/String;)V
      49: aload_0
      50: aload_1
      51: invokespecial #72                 // Method ch/qos/logback/core/FileAppender.setFile:(Ljava/lang/String;)V
      54: return

  public java.lang.String getFile();
    Code:
       0: aload_0
       1: getfield      #20                 // Field rollingPolicy:Lch/qos/logback/core/rolling/RollingPolicy;
       4: invokeinterface #73,  1           // InterfaceMethod ch/qos/logback/core/rolling/RollingPolicy.getActiveFileName:()Ljava/lang/String;
       9: areturn

  public void rollover();
    Code:
       0: aload_0
       1: getfield      #74                 // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #75                 // Method java/util/concurrent/locks/ReentrantLock.lock:()V
       7: aload_0
       8: invokevirtual #76                 // Method closeOutputStream:()V
      11: aload_0
      12: invokespecial #77                 // Method attemptRollover:()V
      15: aload_0
      16: invokespecial #78                 // Method attemptOpenFile:()V
      19: aload_0
      20: getfield      #74                 // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      23: invokevirtual #79                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      26: goto          39
      29: astore_1
      30: aload_0
      31: getfield      #74                 // Field lock:Ljava/util/concurrent/locks/ReentrantLock;
      34: invokevirtual #79                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      37: aload_1
      38: athrow
      39: return
    Exception table:
       from    to  target type
           7    19    29   any
          29    30    29   any

  private void attemptOpenFile();
    Code:
       0: aload_0
       1: new           #33                 // class java/io/File
       4: dup
       5: aload_0
       6: getfield      #20                 // Field rollingPolicy:Lch/qos/logback/core/rolling/RollingPolicy;
       9: invokeinterface #73,  1           // InterfaceMethod ch/qos/logback/core/rolling/RollingPolicy.getActiveFileName:()Ljava/lang/String;
      14: invokespecial #35                 // Method java/io/File."<init>":(Ljava/lang/String;)V
      17: putfield      #36                 // Field currentlyActiveFile:Ljava/io/File;
      20: aload_0
      21: aload_0
      22: getfield      #20                 // Field rollingPolicy:Lch/qos/logback/core/rolling/RollingPolicy;
      25: invokeinterface #73,  1           // InterfaceMethod ch/qos/logback/core/rolling/RollingPolicy.getActiveFileName:()Ljava/lang/String;
      30: invokevirtual #80                 // Method openFile:(Ljava/lang/String;)V
      33: goto          69
      36: astore_1
      37: aload_0
      38: new           #3                  // class java/lang/StringBuilder
      41: dup
      42: invokespecial #4                  // Method java/lang/StringBuilder."<init>":()V
      45: ldc           #82                 // String setFile(
      47: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      50: aload_0
      51: getfield      #42                 // Field fileName:Ljava/lang/String;
      54: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      57: ldc           #83                 // String , false) call failed.
      59: invokevirtual #6                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      62: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      65: aload_1
      66: invokevirtual #84                 // Method addError:(Ljava/lang/String;Ljava/lang/Throwable;)V
      69: return
    Exception table:
       from    to  target type
           0    33    36   Class java/io/IOException

  private void attemptRollover();
    Code:
       0: aload_0
       1: getfield      #20                 // Field rollingPolicy:Lch/qos/logback/core/rolling/RollingPolicy;
       4: invokeinterface #85,  1           // InterfaceMethod ch/qos/logback/core/rolling/RollingPolicy.rollover:()V
       9: goto          24
      12: astore_1
      13: aload_0
      14: ldc           #87                 // String RolloverFailure occurred. Deferring roll-over.
      16: invokevirtual #9                  // Method addWarn:(Ljava/lang/String;)V
      19: aload_0
      20: iconst_1
      21: putfield      #18                 // Field append:Z
      24: return
    Exception table:
       from    to  target type
           0     9    12   Class ch/qos/logback/core/rolling/RolloverFailure

  protected void subAppend(E);
    Code:
       0: aload_0
       1: getfield      #2                  // Field triggeringPolicy:Lch/qos/logback/core/rolling/TriggeringPolicy;
       4: dup
       5: astore_2
       6: monitorenter
       7: aload_0
       8: getfield      #2                  // Field triggeringPolicy:Lch/qos/logback/core/rolling/TriggeringPolicy;
      11: aload_0
      12: getfield      #36                 // Field currentlyActiveFile:Ljava/io/File;
      15: aload_1
      16: invokeinterface #88,  3           // InterfaceMethod ch/qos/logback/core/rolling/TriggeringPolicy.isTriggeringEvent:(Ljava/io/File;Ljava/lang/Object;)Z
      21: ifeq          28
      24: aload_0
      25: invokevirtual #89                 // Method rollover:()V
      28: aload_2
      29: monitorexit
      30: goto          38
      33: astore_3
      34: aload_2
      35: monitorexit
      36: aload_3
      37: athrow
      38: aload_0
      39: aload_1
      40: invokespecial #90                 // Method ch/qos/logback/core/FileAppender.subAppend:(Ljava/lang/Object;)V
      43: return
    Exception table:
       from    to  target type
           7    30    33   any
          33    36    33   any

  public ch.qos.logback.core.rolling.RollingPolicy getRollingPolicy();
    Code:
       0: aload_0
       1: getfield      #20                 // Field rollingPolicy:Lch/qos/logback/core/rolling/RollingPolicy;
       4: areturn

  public ch.qos.logback.core.rolling.TriggeringPolicy<E> getTriggeringPolicy();
    Code:
       0: aload_0
       1: getfield      #2                  // Field triggeringPolicy:Lch/qos/logback/core/rolling/TriggeringPolicy;
       4: areturn

  public void setRollingPolicy(ch.qos.logback.core.rolling.RollingPolicy);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #20                 // Field rollingPolicy:Lch/qos/logback/core/rolling/RollingPolicy;
       5: aload_0
       6: getfield      #20                 // Field rollingPolicy:Lch/qos/logback/core/rolling/RollingPolicy;
       9: instanceof    #91                 // class ch/qos/logback/core/rolling/TriggeringPolicy
      12: ifeq          23
      15: aload_0
      16: aload_1
      17: checkcast     #91                 // class ch/qos/logback/core/rolling/TriggeringPolicy
      20: putfield      #2                  // Field triggeringPolicy:Lch/qos/logback/core/rolling/TriggeringPolicy;
      23: return

  public void setTriggeringPolicy(ch.qos.logback.core.rolling.TriggeringPolicy<E>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2                  // Field triggeringPolicy:Lch/qos/logback/core/rolling/TriggeringPolicy;
       5: aload_1
       6: instanceof    #92                 // class ch/qos/logback/core/rolling/RollingPolicy
       9: ifeq          20
      12: aload_0
      13: aload_1
      14: checkcast     #92                 // class ch/qos/logback/core/rolling/RollingPolicy
      17: putfield      #20                 // Field rollingPolicy:Lch/qos/logback/core/rolling/RollingPolicy;
      20: return

  static {};
    Code:
       0: ldc           #93                 // String http://logback.qos.ch/codes.html#rfa_no_tp
       2: putstatic     #11                 // Field RFA_NO_TP_URL:Ljava/lang/String;
       5: ldc           #94                 // String http://logback.qos.ch/codes.html#rfa_no_rp
       7: putstatic     #22                 // Field RFA_NO_RP_URL:Ljava/lang/String;
      10: ldc           #95                 // String http://logback.qos.ch/codes.html#rfa_collision
      12: putstatic     #25                 // Field COLLISION_URL:Ljava/lang/String;
      15: ldc           #96                 // String http://logback.qos.ch/codes.html#rfa_file_after
      17: putstatic     #71                 // Field RFA_LATE_FILE_URL:Ljava/lang/String;
      20: return
}
