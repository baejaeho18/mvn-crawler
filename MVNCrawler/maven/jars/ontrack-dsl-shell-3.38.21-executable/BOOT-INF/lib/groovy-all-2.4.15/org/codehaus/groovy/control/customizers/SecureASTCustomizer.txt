Compiled from "SecureASTCustomizer.java"
public class org.codehaus.groovy.control.customizers.SecureASTCustomizer extends org.codehaus.groovy.control.customizers.CompilationCustomizer {
  private boolean isPackageAllowed;

  private boolean isMethodDefinitionAllowed;

  private boolean isClosuresAllowed;

  private java.util.List<java.lang.String> importsWhitelist;

  private java.util.List<java.lang.String> importsBlacklist;

  private java.util.List<java.lang.String> staticImportsWhitelist;

  private java.util.List<java.lang.String> staticImportsBlacklist;

  private java.util.List<java.lang.String> starImportsWhitelist;

  private java.util.List<java.lang.String> starImportsBlacklist;

  private java.util.List<java.lang.String> staticStarImportsWhitelist;

  private java.util.List<java.lang.String> staticStarImportsBlacklist;

  private boolean isIndirectImportCheckEnabled;

  private java.util.List<java.lang.Class<? extends org.codehaus.groovy.ast.stmt.Statement>> statementsWhitelist;

  private java.util.List<java.lang.Class<? extends org.codehaus.groovy.ast.stmt.Statement>> statementsBlacklist;

  private final java.util.List<org.codehaus.groovy.control.customizers.SecureASTCustomizer$StatementChecker> statementCheckers;

  private java.util.List<java.lang.Class<? extends org.codehaus.groovy.ast.expr.Expression>> expressionsWhitelist;

  private java.util.List<java.lang.Class<? extends org.codehaus.groovy.ast.expr.Expression>> expressionsBlacklist;

  private final java.util.List<org.codehaus.groovy.control.customizers.SecureASTCustomizer$ExpressionChecker> expressionCheckers;

  private java.util.List<java.lang.Integer> tokensWhitelist;

  private java.util.List<java.lang.Integer> tokensBlacklist;

  private java.util.List<java.lang.String> constantTypesWhiteList;

  private java.util.List<java.lang.String> constantTypesBlackList;

  private java.util.List<java.lang.String> receiversWhiteList;

  private java.util.List<java.lang.String> receiversBlackList;

  public org.codehaus.groovy.control.customizers.SecureASTCustomizer();
    Code:
       0: aload_0
       1: getstatic     #61                 // Field org/codehaus/groovy/control/CompilePhase.CANONICALIZATION:Lorg/codehaus/groovy/control/CompilePhase;
       4: invokespecial #64                 // Method org/codehaus/groovy/control/customizers/CompilationCustomizer."<init>":(Lorg/codehaus/groovy/control/CompilePhase;)V
       7: aload_0
       8: iconst_1
       9: putfield      #66                 // Field isPackageAllowed:Z
      12: aload_0
      13: iconst_1
      14: putfield      #68                 // Field isMethodDefinitionAllowed:Z
      17: aload_0
      18: iconst_1
      19: putfield      #70                 // Field isClosuresAllowed:Z
      22: aload_0
      23: new           #72                 // class java/util/LinkedList
      26: dup
      27: invokespecial #74                 // Method java/util/LinkedList."<init>":()V
      30: putfield      #76                 // Field statementCheckers:Ljava/util/List;
      33: aload_0
      34: new           #72                 // class java/util/LinkedList
      37: dup
      38: invokespecial #74                 // Method java/util/LinkedList."<init>":()V
      41: putfield      #78                 // Field expressionCheckers:Ljava/util/List;
      44: return

  public boolean isMethodDefinitionAllowed();
    Code:
       0: aload_0
       1: getfield      #68                 // Field isMethodDefinitionAllowed:Z
       4: ireturn

  public void setMethodDefinitionAllowed(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #68                 // Field isMethodDefinitionAllowed:Z
       5: return

  public boolean isPackageAllowed();
    Code:
       0: aload_0
       1: getfield      #66                 // Field isPackageAllowed:Z
       4: ireturn

  public boolean isClosuresAllowed();
    Code:
       0: aload_0
       1: getfield      #70                 // Field isClosuresAllowed:Z
       4: ireturn

  public void setClosuresAllowed(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #70                 // Field isClosuresAllowed:Z
       5: return

  public void setPackageAllowed(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #66                 // Field isPackageAllowed:Z
       5: return

  public java.util.List<java.lang.String> getImportsBlacklist();
    Code:
       0: aload_0
       1: getfield      #92                 // Field importsBlacklist:Ljava/util/List;
       4: areturn

  public void setImportsBlacklist(java.util.List<java.lang.String>);
    Code:
       0: aload_0
       1: getfield      #96                 // Field importsWhitelist:Ljava/util/List;
       4: ifnonnull     14
       7: aload_0
       8: getfield      #98                 // Field starImportsWhitelist:Ljava/util/List;
      11: ifnull        24
      14: new           #100                // class java/lang/IllegalArgumentException
      17: dup
      18: ldc           #102                // String You are not allowed to set both whitelist and blacklist
      20: invokespecial #105                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      23: athrow
      24: aload_0
      25: aload_1
      26: putfield      #92                 // Field importsBlacklist:Ljava/util/List;
      29: return

  public java.util.List<java.lang.String> getImportsWhitelist();
    Code:
       0: aload_0
       1: getfield      #96                 // Field importsWhitelist:Ljava/util/List;
       4: areturn

  public void setImportsWhitelist(java.util.List<java.lang.String>);
    Code:
       0: aload_0
       1: getfield      #92                 // Field importsBlacklist:Ljava/util/List;
       4: ifnonnull     14
       7: aload_0
       8: getfield      #109                // Field starImportsBlacklist:Ljava/util/List;
      11: ifnull        24
      14: new           #100                // class java/lang/IllegalArgumentException
      17: dup
      18: ldc           #102                // String You are not allowed to set both whitelist and blacklist
      20: invokespecial #105                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      23: athrow
      24: aload_0
      25: aload_1
      26: putfield      #96                 // Field importsWhitelist:Ljava/util/List;
      29: return

  public java.util.List<java.lang.String> getStarImportsBlacklist();
    Code:
       0: aload_0
       1: getfield      #109                // Field starImportsBlacklist:Ljava/util/List;
       4: areturn

  public void setStarImportsBlacklist(java.util.List<java.lang.String>);
    Code:
       0: aload_0
       1: getfield      #96                 // Field importsWhitelist:Ljava/util/List;
       4: ifnonnull     14
       7: aload_0
       8: getfield      #98                 // Field starImportsWhitelist:Ljava/util/List;
      11: ifnull        24
      14: new           #100                // class java/lang/IllegalArgumentException
      17: dup
      18: ldc           #102                // String You are not allowed to set both whitelist and blacklist
      20: invokespecial #105                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      23: athrow
      24: aload_0
      25: aload_1
      26: invokestatic  #115                // Method normalizeStarImports:(Ljava/util/List;)Ljava/util/List;
      29: putfield      #109                // Field starImportsBlacklist:Ljava/util/List;
      32: aload_0
      33: getfield      #92                 // Field importsBlacklist:Ljava/util/List;
      36: ifnonnull     46
      39: aload_0
      40: invokestatic  #120                // Method java/util/Collections.emptyList:()Ljava/util/List;
      43: putfield      #92                 // Field importsBlacklist:Ljava/util/List;
      46: return

  public java.util.List<java.lang.String> getStarImportsWhitelist();
    Code:
       0: aload_0
       1: getfield      #98                 // Field starImportsWhitelist:Ljava/util/List;
       4: areturn

  public void setStarImportsWhitelist(java.util.List<java.lang.String>);
    Code:
       0: aload_0
       1: getfield      #92                 // Field importsBlacklist:Ljava/util/List;
       4: ifnonnull     14
       7: aload_0
       8: getfield      #109                // Field starImportsBlacklist:Ljava/util/List;
      11: ifnull        24
      14: new           #100                // class java/lang/IllegalArgumentException
      17: dup
      18: ldc           #102                // String You are not allowed to set both whitelist and blacklist
      20: invokespecial #105                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      23: athrow
      24: aload_0
      25: aload_1
      26: invokestatic  #115                // Method normalizeStarImports:(Ljava/util/List;)Ljava/util/List;
      29: putfield      #98                 // Field starImportsWhitelist:Ljava/util/List;
      32: aload_0
      33: getfield      #96                 // Field importsWhitelist:Ljava/util/List;
      36: ifnonnull     46
      39: aload_0
      40: invokestatic  #120                // Method java/util/Collections.emptyList:()Ljava/util/List;
      43: putfield      #96                 // Field importsWhitelist:Ljava/util/List;
      46: return

  private static java.util.List<java.lang.String> normalizeStarImports(java.util.List<java.lang.String>);
    Code:
       0: new           #124                // class java/util/ArrayList
       3: dup
       4: aload_0
       5: invokeinterface #130,  1          // InterfaceMethod java/util/List.size:()I
      10: invokespecial #133                // Method java/util/ArrayList."<init>":(I)V
      13: astore_1
      14: aload_0
      15: invokeinterface #137,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      20: astore_2
      21: aload_2
      22: invokeinterface #142,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      27: ifeq          127
      30: aload_2
      31: invokeinterface #146,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      36: checkcast     #148                // class java/lang/String
      39: astore_3
      40: aload_3
      41: ldc           #150                // String .*
      43: invokevirtual #154                // Method java/lang/String.endsWith:(Ljava/lang/String;)Z
      46: ifeq          60
      49: aload_1
      50: aload_3
      51: invokeinterface #158,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      56: pop
      57: goto          124
      60: aload_3
      61: ldc           #160                // String .
      63: invokevirtual #154                // Method java/lang/String.endsWith:(Ljava/lang/String;)Z
      66: ifeq          98
      69: aload_1
      70: new           #162                // class java/lang/StringBuilder
      73: dup
      74: invokespecial #163                // Method java/lang/StringBuilder."<init>":()V
      77: aload_3
      78: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      81: ldc           #169                // String *
      83: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      86: invokevirtual #173                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      89: invokeinterface #158,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      94: pop
      95: goto          124
      98: aload_1
      99: new           #162                // class java/lang/StringBuilder
     102: dup
     103: invokespecial #163                // Method java/lang/StringBuilder."<init>":()V
     106: aload_3
     107: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     110: ldc           #150                // String .*
     112: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     115: invokevirtual #173                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     118: invokeinterface #158,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     123: pop
     124: goto          21
     127: aload_1
     128: invokestatic  #176                // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;
     131: areturn

  public java.util.List<java.lang.String> getStaticImportsBlacklist();
    Code:
       0: aload_0
       1: getfield      #183                // Field staticImportsBlacklist:Ljava/util/List;
       4: areturn

  public void setStaticImportsBlacklist(java.util.List<java.lang.String>);
    Code:
       0: aload_0
       1: getfield      #186                // Field staticImportsWhitelist:Ljava/util/List;
       4: ifnonnull     14
       7: aload_0
       8: getfield      #188                // Field staticStarImportsWhitelist:Ljava/util/List;
      11: ifnull        24
      14: new           #100                // class java/lang/IllegalArgumentException
      17: dup
      18: ldc           #102                // String You are not allowed to set both whitelist and blacklist
      20: invokespecial #105                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      23: athrow
      24: aload_0
      25: aload_1
      26: putfield      #183                // Field staticImportsBlacklist:Ljava/util/List;
      29: return

  public java.util.List<java.lang.String> getStaticImportsWhitelist();
    Code:
       0: aload_0
       1: getfield      #186                // Field staticImportsWhitelist:Ljava/util/List;
       4: areturn

  public void setStaticImportsWhitelist(java.util.List<java.lang.String>);
    Code:
       0: aload_0
       1: getfield      #183                // Field staticImportsBlacklist:Ljava/util/List;
       4: ifnonnull     14
       7: aload_0
       8: getfield      #192                // Field staticStarImportsBlacklist:Ljava/util/List;
      11: ifnull        24
      14: new           #100                // class java/lang/IllegalArgumentException
      17: dup
      18: ldc           #102                // String You are not allowed to set both whitelist and blacklist
      20: invokespecial #105                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      23: athrow
      24: aload_0
      25: aload_1
      26: putfield      #186                // Field staticImportsWhitelist:Ljava/util/List;
      29: return

  public java.util.List<java.lang.String> getStaticStarImportsBlacklist();
    Code:
       0: aload_0
       1: getfield      #192                // Field staticStarImportsBlacklist:Ljava/util/List;
       4: areturn

  public void setStaticStarImportsBlacklist(java.util.List<java.lang.String>);
    Code:
       0: aload_0
       1: getfield      #186                // Field staticImportsWhitelist:Ljava/util/List;
       4: ifnonnull     14
       7: aload_0
       8: getfield      #188                // Field staticStarImportsWhitelist:Ljava/util/List;
      11: ifnull        24
      14: new           #100                // class java/lang/IllegalArgumentException
      17: dup
      18: ldc           #102                // String You are not allowed to set both whitelist and blacklist
      20: invokespecial #105                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      23: athrow
      24: aload_0
      25: aload_1
      26: invokestatic  #115                // Method normalizeStarImports:(Ljava/util/List;)Ljava/util/List;
      29: putfield      #192                // Field staticStarImportsBlacklist:Ljava/util/List;
      32: aload_0
      33: getfield      #183                // Field staticImportsBlacklist:Ljava/util/List;
      36: ifnonnull     46
      39: aload_0
      40: invokestatic  #120                // Method java/util/Collections.emptyList:()Ljava/util/List;
      43: putfield      #183                // Field staticImportsBlacklist:Ljava/util/List;
      46: return

  public java.util.List<java.lang.String> getStaticStarImportsWhitelist();
    Code:
       0: aload_0
       1: getfield      #188                // Field staticStarImportsWhitelist:Ljava/util/List;
       4: areturn

  public void setStaticStarImportsWhitelist(java.util.List<java.lang.String>);
    Code:
       0: aload_0
       1: getfield      #183                // Field staticImportsBlacklist:Ljava/util/List;
       4: ifnonnull     14
       7: aload_0
       8: getfield      #192                // Field staticStarImportsBlacklist:Ljava/util/List;
      11: ifnull        24
      14: new           #100                // class java/lang/IllegalArgumentException
      17: dup
      18: ldc           #102                // String You are not allowed to set both whitelist and blacklist
      20: invokespecial #105                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      23: athrow
      24: aload_0
      25: aload_1
      26: invokestatic  #115                // Method normalizeStarImports:(Ljava/util/List;)Ljava/util/List;
      29: putfield      #188                // Field staticStarImportsWhitelist:Ljava/util/List;
      32: aload_0
      33: getfield      #186                // Field staticImportsWhitelist:Ljava/util/List;
      36: ifnonnull     46
      39: aload_0
      40: invokestatic  #120                // Method java/util/Collections.emptyList:()Ljava/util/List;
      43: putfield      #186                // Field staticImportsWhitelist:Ljava/util/List;
      46: return

  public java.util.List<java.lang.Class<? extends org.codehaus.groovy.ast.expr.Expression>> getExpressionsBlacklist();
    Code:
       0: aload_0
       1: getfield      #199                // Field expressionsBlacklist:Ljava/util/List;
       4: areturn

  public void setExpressionsBlacklist(java.util.List<java.lang.Class<? extends org.codehaus.groovy.ast.expr.Expression>>);
    Code:
       0: aload_0
       1: getfield      #202                // Field expressionsWhitelist:Ljava/util/List;
       4: ifnull        17
       7: new           #100                // class java/lang/IllegalArgumentException
      10: dup
      11: ldc           #102                // String You are not allowed to set both whitelist and blacklist
      13: invokespecial #105                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: aload_1
      19: putfield      #199                // Field expressionsBlacklist:Ljava/util/List;
      22: return

  public java.util.List<java.lang.Class<? extends org.codehaus.groovy.ast.expr.Expression>> getExpressionsWhitelist();
    Code:
       0: aload_0
       1: getfield      #202                // Field expressionsWhitelist:Ljava/util/List;
       4: areturn

  public void setExpressionsWhitelist(java.util.List<java.lang.Class<? extends org.codehaus.groovy.ast.expr.Expression>>);
    Code:
       0: aload_0
       1: getfield      #199                // Field expressionsBlacklist:Ljava/util/List;
       4: ifnull        17
       7: new           #100                // class java/lang/IllegalArgumentException
      10: dup
      11: ldc           #102                // String You are not allowed to set both whitelist and blacklist
      13: invokespecial #105                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: aload_1
      19: putfield      #202                // Field expressionsWhitelist:Ljava/util/List;
      22: return

  public java.util.List<java.lang.Class<? extends org.codehaus.groovy.ast.stmt.Statement>> getStatementsBlacklist();
    Code:
       0: aload_0
       1: getfield      #207                // Field statementsBlacklist:Ljava/util/List;
       4: areturn

  public void setStatementsBlacklist(java.util.List<java.lang.Class<? extends org.codehaus.groovy.ast.stmt.Statement>>);
    Code:
       0: aload_0
       1: getfield      #210                // Field statementsWhitelist:Ljava/util/List;
       4: ifnull        17
       7: new           #100                // class java/lang/IllegalArgumentException
      10: dup
      11: ldc           #102                // String You are not allowed to set both whitelist and blacklist
      13: invokespecial #105                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: aload_1
      19: putfield      #207                // Field statementsBlacklist:Ljava/util/List;
      22: return

  public java.util.List<java.lang.Class<? extends org.codehaus.groovy.ast.stmt.Statement>> getStatementsWhitelist();
    Code:
       0: aload_0
       1: getfield      #210                // Field statementsWhitelist:Ljava/util/List;
       4: areturn

  public void setStatementsWhitelist(java.util.List<java.lang.Class<? extends org.codehaus.groovy.ast.stmt.Statement>>);
    Code:
       0: aload_0
       1: getfield      #207                // Field statementsBlacklist:Ljava/util/List;
       4: ifnull        17
       7: new           #100                // class java/lang/IllegalArgumentException
      10: dup
      11: ldc           #102                // String You are not allowed to set both whitelist and blacklist
      13: invokespecial #105                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: aload_1
      19: putfield      #210                // Field statementsWhitelist:Ljava/util/List;
      22: return

  public java.util.List<java.lang.Integer> getTokensBlacklist();
    Code:
       0: aload_0
       1: getfield      #215                // Field tokensBlacklist:Ljava/util/List;
       4: areturn

  public boolean isIndirectImportCheckEnabled();
    Code:
       0: aload_0
       1: getfield      #217                // Field isIndirectImportCheckEnabled:Z
       4: ireturn

  public void setIndirectImportCheckEnabled(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #217                // Field isIndirectImportCheckEnabled:Z
       5: return

  public void setTokensBlacklist(java.util.List<java.lang.Integer>);
    Code:
       0: aload_0
       1: getfield      #222                // Field tokensWhitelist:Ljava/util/List;
       4: ifnull        17
       7: new           #100                // class java/lang/IllegalArgumentException
      10: dup
      11: ldc           #102                // String You are not allowed to set both whitelist and blacklist
      13: invokespecial #105                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: aload_1
      19: putfield      #215                // Field tokensBlacklist:Ljava/util/List;
      22: return

  public java.util.List<java.lang.Integer> getTokensWhitelist();
    Code:
       0: aload_0
       1: getfield      #222                // Field tokensWhitelist:Ljava/util/List;
       4: areturn

  public void setTokensWhitelist(java.util.List<java.lang.Integer>);
    Code:
       0: aload_0
       1: getfield      #215                // Field tokensBlacklist:Ljava/util/List;
       4: ifnull        17
       7: new           #100                // class java/lang/IllegalArgumentException
      10: dup
      11: ldc           #102                // String You are not allowed to set both whitelist and blacklist
      13: invokespecial #105                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: aload_1
      19: putfield      #222                // Field tokensWhitelist:Ljava/util/List;
      22: return

  public void addStatementCheckers(org.codehaus.groovy.control.customizers.SecureASTCustomizer$StatementChecker...);
    Code:
       0: aload_0
       1: getfield      #76                 // Field statementCheckers:Ljava/util/List;
       4: aload_1
       5: invokestatic  #232                // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
       8: invokeinterface #236,  2          // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
      13: pop
      14: return

  public void addExpressionCheckers(org.codehaus.groovy.control.customizers.SecureASTCustomizer$ExpressionChecker...);
    Code:
       0: aload_0
       1: getfield      #78                 // Field expressionCheckers:Ljava/util/List;
       4: aload_1
       5: invokestatic  #232                // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
       8: invokeinterface #236,  2          // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
      13: pop
      14: return

  public java.util.List<java.lang.String> getConstantTypesBlackList();
    Code:
       0: aload_0
       1: getfield      #244                // Field constantTypesBlackList:Ljava/util/List;
       4: areturn

  public void setConstantTypesBlackList(java.util.List<java.lang.String>);
    Code:
       0: aload_0
       1: getfield      #247                // Field constantTypesWhiteList:Ljava/util/List;
       4: ifnull        17
       7: new           #100                // class java/lang/IllegalArgumentException
      10: dup
      11: ldc           #102                // String You are not allowed to set both whitelist and blacklist
      13: invokespecial #105                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: aload_1
      19: putfield      #244                // Field constantTypesBlackList:Ljava/util/List;
      22: return

  public java.util.List<java.lang.String> getConstantTypesWhiteList();
    Code:
       0: aload_0
       1: getfield      #247                // Field constantTypesWhiteList:Ljava/util/List;
       4: areturn

  public void setConstantTypesWhiteList(java.util.List<java.lang.String>);
    Code:
       0: aload_0
       1: getfield      #244                // Field constantTypesBlackList:Ljava/util/List;
       4: ifnull        17
       7: new           #100                // class java/lang/IllegalArgumentException
      10: dup
      11: ldc           #102                // String You are not allowed to set both whitelist and blacklist
      13: invokespecial #105                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: aload_1
      19: putfield      #247                // Field constantTypesWhiteList:Ljava/util/List;
      22: return

  public void setConstantTypesClassesWhiteList(java.util.List<java.lang.Class>);
    Code:
       0: new           #72                 // class java/util/LinkedList
       3: dup
       4: invokespecial #74                 // Method java/util/LinkedList."<init>":()V
       7: astore_2
       8: aload_1
       9: invokeinterface #137,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      14: astore_3
      15: aload_3
      16: invokeinterface #142,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          50
      24: aload_3
      25: invokeinterface #146,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #252                // class java/lang/Class
      33: astore        4
      35: aload_2
      36: aload         4
      38: invokevirtual #255                // Method java/lang/Class.getName:()Ljava/lang/String;
      41: invokeinterface #158,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      46: pop
      47: goto          15
      50: aload_0
      51: aload_2
      52: invokevirtual #257                // Method setConstantTypesWhiteList:(Ljava/util/List;)V
      55: return

  public void setConstantTypesClassesBlackList(java.util.List<java.lang.Class>);
    Code:
       0: new           #72                 // class java/util/LinkedList
       3: dup
       4: invokespecial #74                 // Method java/util/LinkedList."<init>":()V
       7: astore_2
       8: aload_1
       9: invokeinterface #137,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      14: astore_3
      15: aload_3
      16: invokeinterface #142,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          50
      24: aload_3
      25: invokeinterface #146,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #252                // class java/lang/Class
      33: astore        4
      35: aload_2
      36: aload         4
      38: invokevirtual #255                // Method java/lang/Class.getName:()Ljava/lang/String;
      41: invokeinterface #158,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      46: pop
      47: goto          15
      50: aload_0
      51: aload_2
      52: invokevirtual #264                // Method setConstantTypesBlackList:(Ljava/util/List;)V
      55: return

  public java.util.List<java.lang.String> getReceiversBlackList();
    Code:
       0: aload_0
       1: getfield      #267                // Field receiversBlackList:Ljava/util/List;
       4: areturn

  public void setReceiversBlackList(java.util.List<java.lang.String>);
    Code:
       0: aload_0
       1: getfield      #270                // Field receiversWhiteList:Ljava/util/List;
       4: ifnull        17
       7: new           #100                // class java/lang/IllegalArgumentException
      10: dup
      11: ldc           #102                // String You are not allowed to set both whitelist and blacklist
      13: invokespecial #105                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: aload_1
      19: putfield      #267                // Field receiversBlackList:Ljava/util/List;
      22: return

  public void setReceiversClassesBlackList(java.util.List<java.lang.Class>);
    Code:
       0: new           #72                 // class java/util/LinkedList
       3: dup
       4: invokespecial #74                 // Method java/util/LinkedList."<init>":()V
       7: astore_2
       8: aload_1
       9: invokeinterface #137,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      14: astore_3
      15: aload_3
      16: invokeinterface #142,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          50
      24: aload_3
      25: invokeinterface #146,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #252                // class java/lang/Class
      33: astore        4
      35: aload_2
      36: aload         4
      38: invokevirtual #255                // Method java/lang/Class.getName:()Ljava/lang/String;
      41: invokeinterface #158,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      46: pop
      47: goto          15
      50: aload_0
      51: aload_2
      52: invokevirtual #273                // Method setReceiversBlackList:(Ljava/util/List;)V
      55: return

  public java.util.List<java.lang.String> getReceiversWhiteList();
    Code:
       0: aload_0
       1: getfield      #270                // Field receiversWhiteList:Ljava/util/List;
       4: areturn

  public void setReceiversWhiteList(java.util.List<java.lang.String>);
    Code:
       0: aload_0
       1: getfield      #267                // Field receiversBlackList:Ljava/util/List;
       4: ifnull        17
       7: new           #100                // class java/lang/IllegalArgumentException
      10: dup
      11: ldc           #102                // String You are not allowed to set both whitelist and blacklist
      13: invokespecial #105                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: aload_1
      19: putfield      #270                // Field receiversWhiteList:Ljava/util/List;
      22: return

  public void setReceiversClassesWhiteList(java.util.List<java.lang.Class>);
    Code:
       0: new           #72                 // class java/util/LinkedList
       3: dup
       4: invokespecial #74                 // Method java/util/LinkedList."<init>":()V
       7: astore_2
       8: aload_1
       9: invokeinterface #137,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      14: astore_3
      15: aload_3
      16: invokeinterface #142,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          50
      24: aload_3
      25: invokeinterface #146,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #252                // class java/lang/Class
      33: astore        4
      35: aload_2
      36: aload         4
      38: invokevirtual #255                // Method java/lang/Class.getName:()Ljava/lang/String;
      41: invokeinterface #158,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      46: pop
      47: goto          15
      50: aload_0
      51: aload_2
      52: invokevirtual #279                // Method setReceiversWhiteList:(Ljava/util/List;)V
      55: return

  public void call(org.codehaus.groovy.control.SourceUnit, org.codehaus.groovy.classgen.GeneratorContext, org.codehaus.groovy.ast.ClassNode) throws org.codehaus.groovy.control.CompilationFailedException;
    Code:
       0: aload_1
       1: invokevirtual #290                // Method org/codehaus/groovy/control/SourceUnit.getAST:()Lorg/codehaus/groovy/ast/ModuleNode;
       4: astore        4
       6: aload_0
       7: getfield      #66                 // Field isPackageAllowed:Z
      10: ifne          32
      13: aload         4
      15: invokevirtual #296                // Method org/codehaus/groovy/ast/ModuleNode.getPackage:()Lorg/codehaus/groovy/ast/PackageNode;
      18: ifnull        32
      21: new           #298                // class java/lang/SecurityException
      24: dup
      25: ldc_w         #300                // String Package definitions are not allowed
      28: invokespecial #301                // Method java/lang/SecurityException."<init>":(Ljava/lang/String;)V
      31: athrow
      32: aload_0
      33: aload_3
      34: invokespecial #305                // Method checkMethodDefinitionAllowed:(Lorg/codehaus/groovy/ast/ClassNode;)V
      37: aload_0
      38: getfield      #92                 // Field importsBlacklist:Ljava/util/List;
      41: ifnonnull     65
      44: aload_0
      45: getfield      #96                 // Field importsWhitelist:Ljava/util/List;
      48: ifnonnull     65
      51: aload_0
      52: getfield      #109                // Field starImportsBlacklist:Ljava/util/List;
      55: ifnonnull     65
      58: aload_0
      59: getfield      #98                 // Field starImportsWhitelist:Ljava/util/List;
      62: ifnull        183
      65: aload         4
      67: invokevirtual #308                // Method org/codehaus/groovy/ast/ModuleNode.getImports:()Ljava/util/List;
      70: invokeinterface #137,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      75: astore        5
      77: aload         5
      79: invokeinterface #142,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      84: ifeq          115
      87: aload         5
      89: invokeinterface #146,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      94: checkcast     #310                // class org/codehaus/groovy/ast/ImportNode
      97: astore        6
      99: aload         6
     101: invokevirtual #313                // Method org/codehaus/groovy/ast/ImportNode.getClassName:()Ljava/lang/String;
     104: astore        7
     106: aload_0
     107: aload         7
     109: invokespecial #316                // Method assertImportIsAllowed:(Ljava/lang/String;)V
     112: goto          77
     115: aload         4
     117: invokevirtual #319                // Method org/codehaus/groovy/ast/ModuleNode.getStarImports:()Ljava/util/List;
     120: invokeinterface #137,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     125: astore        5
     127: aload         5
     129: invokeinterface #142,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
     134: ifeq          183
     137: aload         5
     139: invokeinterface #146,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     144: checkcast     #310                // class org/codehaus/groovy/ast/ImportNode
     147: astore        6
     149: aload         6
     151: invokevirtual #322                // Method org/codehaus/groovy/ast/ImportNode.getPackageName:()Ljava/lang/String;
     154: astore        7
     156: aload_0
     157: new           #162                // class java/lang/StringBuilder
     160: dup
     161: invokespecial #163                // Method java/lang/StringBuilder."<init>":()V
     164: aload         7
     166: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     169: ldc           #169                // String *
     171: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     174: invokevirtual #173                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     177: invokespecial #325                // Method assertStarImportIsAllowed:(Ljava/lang/String;)V
     180: goto          127
     183: aload_0
     184: getfield      #183                // Field staticImportsBlacklist:Ljava/util/List;
     187: ifnonnull     211
     190: aload_0
     191: getfield      #186                // Field staticImportsWhitelist:Ljava/util/List;
     194: ifnonnull     211
     197: aload_0
     198: getfield      #192                // Field staticStarImportsBlacklist:Ljava/util/List;
     201: ifnonnull     211
     204: aload_0
     205: getfield      #188                // Field staticStarImportsWhitelist:Ljava/util/List;
     208: ifnull        357
     211: aload         4
     213: invokevirtual #329                // Method org/codehaus/groovy/ast/ModuleNode.getStaticImports:()Ljava/util/Map;
     216: invokeinterface #333,  1          // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
     221: invokeinterface #336,  1          // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
     226: astore        5
     228: aload         5
     230: invokeinterface #142,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
     235: ifeq          284
     238: aload         5
     240: invokeinterface #146,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     245: checkcast     #18                 // class java/util/Map$Entry
     248: astore        6
     250: aload         6
     252: invokeinterface #339,  1          // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
     257: checkcast     #310                // class org/codehaus/groovy/ast/ImportNode
     260: invokevirtual #313                // Method org/codehaus/groovy/ast/ImportNode.getClassName:()Ljava/lang/String;
     263: astore        7
     265: aload_0
     266: aload         6
     268: invokeinterface #342,  1          // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
     273: checkcast     #148                // class java/lang/String
     276: aload         7
     278: invokespecial #346                // Method assertStaticImportIsAllowed:(Ljava/lang/String;Ljava/lang/String;)V
     281: goto          228
     284: aload         4
     286: invokevirtual #349                // Method org/codehaus/groovy/ast/ModuleNode.getStaticStarImports:()Ljava/util/Map;
     289: invokeinterface #333,  1          // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
     294: invokeinterface #336,  1          // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
     299: astore        5
     301: aload         5
     303: invokeinterface #142,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
     308: ifeq          357
     311: aload         5
     313: invokeinterface #146,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     318: checkcast     #18                 // class java/util/Map$Entry
     321: astore        6
     323: aload         6
     325: invokeinterface #339,  1          // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
     330: checkcast     #310                // class org/codehaus/groovy/ast/ImportNode
     333: invokevirtual #313                // Method org/codehaus/groovy/ast/ImportNode.getClassName:()Ljava/lang/String;
     336: astore        7
     338: aload_0
     339: aload         6
     341: invokeinterface #342,  1          // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
     346: checkcast     #148                // class java/lang/String
     349: aload         7
     351: invokespecial #346                // Method assertStaticImportIsAllowed:(Ljava/lang/String;Ljava/lang/String;)V
     354: goto          301
     357: new           #15                 // class org/codehaus/groovy/control/customizers/SecureASTCustomizer$SecuringCodeVisitor
     360: dup
     361: aload_0
     362: aconst_null
     363: invokespecial #352                // Method org/codehaus/groovy/control/customizers/SecureASTCustomizer$SecuringCodeVisitor."<init>":(Lorg/codehaus/groovy/control/customizers/SecureASTCustomizer;Lorg/codehaus/groovy/control/customizers/SecureASTCustomizer$1;)V
     366: astore        5
     368: aload         4
     370: invokevirtual #356                // Method org/codehaus/groovy/ast/ModuleNode.getStatementBlock:()Lorg/codehaus/groovy/ast/stmt/BlockStatement;
     373: aload         5
     375: invokevirtual #362                // Method org/codehaus/groovy/ast/stmt/BlockStatement.visit:(Lorg/codehaus/groovy/ast/GroovyCodeVisitor;)V
     378: aload         4
     380: invokevirtual #365                // Method org/codehaus/groovy/ast/ModuleNode.getClasses:()Ljava/util/List;
     383: invokeinterface #137,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     388: astore        6
     390: aload         6
     392: invokeinterface #142,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
     397: ifeq          490
     400: aload         6
     402: invokeinterface #146,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     407: checkcast     #367                // class org/codehaus/groovy/ast/ClassNode
     410: astore        7
     412: aload         7
     414: aload_3
     415: if_acmpeq     487
     418: aload_0
     419: aload         7
     421: invokespecial #305                // Method checkMethodDefinitionAllowed:(Lorg/codehaus/groovy/ast/ClassNode;)V
     424: aload         7
     426: invokevirtual #370                // Method org/codehaus/groovy/ast/ClassNode.getMethods:()Ljava/util/List;
     429: invokeinterface #137,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     434: astore        8
     436: aload         8
     438: invokeinterface #142,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
     443: ifeq          487
     446: aload         8
     448: invokeinterface #146,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     453: checkcast     #372                // class org/codehaus/groovy/ast/MethodNode
     456: astore        9
     458: aload         9
     460: invokevirtual #375                // Method org/codehaus/groovy/ast/MethodNode.isSynthetic:()Z
     463: ifne          484
     466: aload         9
     468: invokevirtual #379                // Method org/codehaus/groovy/ast/MethodNode.getCode:()Lorg/codehaus/groovy/ast/stmt/Statement;
     471: ifnull        484
     474: aload         9
     476: invokevirtual #379                // Method org/codehaus/groovy/ast/MethodNode.getCode:()Lorg/codehaus/groovy/ast/stmt/Statement;
     479: aload         5
     481: invokevirtual #382                // Method org/codehaus/groovy/ast/stmt/Statement.visit:(Lorg/codehaus/groovy/ast/GroovyCodeVisitor;)V
     484: goto          436
     487: goto          390
     490: aload_3
     491: invokestatic  #386                // Method filterMethods:(Lorg/codehaus/groovy/ast/ClassNode;)Ljava/util/List;
     494: astore        6
     496: aload_0
     497: getfield      #68                 // Field isMethodDefinitionAllowed:Z
     500: ifeq          564
     503: aload         6
     505: invokeinterface #137,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     510: astore        7
     512: aload         7
     514: invokeinterface #142,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
     519: ifeq          564
     522: aload         7
     524: invokeinterface #146,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     529: checkcast     #372                // class org/codehaus/groovy/ast/MethodNode
     532: astore        8
     534: aload         8
     536: invokevirtual #390                // Method org/codehaus/groovy/ast/MethodNode.getDeclaringClass:()Lorg/codehaus/groovy/ast/ClassNode;
     539: aload_3
     540: if_acmpne     561
     543: aload         8
     545: invokevirtual #379                // Method org/codehaus/groovy/ast/MethodNode.getCode:()Lorg/codehaus/groovy/ast/stmt/Statement;
     548: ifnull        561
     551: aload         8
     553: invokevirtual #379                // Method org/codehaus/groovy/ast/MethodNode.getCode:()Lorg/codehaus/groovy/ast/stmt/Statement;
     556: aload         5
     558: invokevirtual #382                // Method org/codehaus/groovy/ast/stmt/Statement.visit:(Lorg/codehaus/groovy/ast/GroovyCodeVisitor;)V
     561: goto          512
     564: return

  private void checkMethodDefinitionAllowed(org.codehaus.groovy.ast.ClassNode);
    Code:
       0: aload_0
       1: getfield      #68                 // Field isMethodDefinitionAllowed:Z
       4: ifeq          8
       7: return
       8: aload_1
       9: invokestatic  #386                // Method filterMethods:(Lorg/codehaus/groovy/ast/ClassNode;)Ljava/util/List;
      12: astore_2
      13: aload_2
      14: invokeinterface #415,  1          // InterfaceMethod java/util/List.isEmpty:()Z
      19: ifne          33
      22: new           #298                // class java/lang/SecurityException
      25: dup
      26: ldc_w         #417                // String Method definitions are not allowed
      29: invokespecial #301                // Method java/lang/SecurityException."<init>":(Ljava/lang/String;)V
      32: athrow
      33: return

  private static java.util.List<org.codehaus.groovy.ast.MethodNode> filterMethods(org.codehaus.groovy.ast.ClassNode);
    Code:
       0: new           #72                 // class java/util/LinkedList
       3: dup
       4: invokespecial #74                 // Method java/util/LinkedList."<init>":()V
       7: astore_1
       8: aload_0
       9: invokevirtual #370                // Method org/codehaus/groovy/ast/ClassNode.getMethods:()Ljava/util/List;
      12: astore_2
      13: aload_2
      14: invokeinterface #137,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      19: astore_3
      20: aload_3
      21: invokeinterface #142,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      26: ifeq          107
      29: aload_3
      30: invokeinterface #146,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      35: checkcast     #372                // class org/codehaus/groovy/ast/MethodNode
      38: astore        4
      40: aload         4
      42: invokevirtual #390                // Method org/codehaus/groovy/ast/MethodNode.getDeclaringClass:()Lorg/codehaus/groovy/ast/ClassNode;
      45: aload_0
      46: if_acmpne     104
      49: aload         4
      51: invokevirtual #375                // Method org/codehaus/groovy/ast/MethodNode.isSynthetic:()Z
      54: ifne          104
      57: ldc_w         #420                // String main
      60: aload         4
      62: invokevirtual #421                // Method org/codehaus/groovy/ast/MethodNode.getName:()Ljava/lang/String;
      65: invokevirtual #424                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      68: ifne          20
      71: ldc_w         #426                // String run
      74: aload         4
      76: invokevirtual #421                // Method org/codehaus/groovy/ast/MethodNode.getName:()Ljava/lang/String;
      79: invokevirtual #424                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      82: ifeq          95
      85: aload_0
      86: invokevirtual #429                // Method org/codehaus/groovy/ast/ClassNode.isScriptBody:()Z
      89: ifeq          95
      92: goto          20
      95: aload_1
      96: aload         4
      98: invokeinterface #158,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     103: pop
     104: goto          20
     107: aload_1
     108: areturn

  private void assertStarImportIsAllowed(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #98                 // Field starImportsWhitelist:Ljava/util/List;
       4: ifnull        54
       7: aload_0
       8: getfield      #98                 // Field starImportsWhitelist:Ljava/util/List;
      11: aload_1
      12: invokeinterface #432,  2          // InterfaceMethod java/util/List.contains:(Ljava/lang/Object;)Z
      17: ifne          54
      20: new           #298                // class java/lang/SecurityException
      23: dup
      24: new           #162                // class java/lang/StringBuilder
      27: dup
      28: invokespecial #163                // Method java/lang/StringBuilder."<init>":()V
      31: ldc_w         #434                // String Importing [
      34: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      37: aload_1
      38: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      41: ldc_w         #436                // String ] is not allowed
      44: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      47: invokevirtual #173                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      50: invokespecial #301                // Method java/lang/SecurityException."<init>":(Ljava/lang/String;)V
      53: athrow
      54: aload_0
      55: getfield      #109                // Field starImportsBlacklist:Ljava/util/List;
      58: ifnull        108
      61: aload_0
      62: getfield      #109                // Field starImportsBlacklist:Ljava/util/List;
      65: aload_1
      66: invokeinterface #432,  2          // InterfaceMethod java/util/List.contains:(Ljava/lang/Object;)Z
      71: ifeq          108
      74: new           #298                // class java/lang/SecurityException
      77: dup
      78: new           #162                // class java/lang/StringBuilder
      81: dup
      82: invokespecial #163                // Method java/lang/StringBuilder."<init>":()V
      85: ldc_w         #434                // String Importing [
      88: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      91: aload_1
      92: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      95: ldc_w         #436                // String ] is not allowed
      98: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     101: invokevirtual #173                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     104: invokespecial #301                // Method java/lang/SecurityException."<init>":(Ljava/lang/String;)V
     107: athrow
     108: return

  private void assertImportIsAllowed(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #96                 // Field importsWhitelist:Ljava/util/List;
       4: ifnull        139
       7: aload_0
       8: getfield      #96                 // Field importsWhitelist:Ljava/util/List;
      11: aload_1
      12: invokeinterface #432,  2          // InterfaceMethod java/util/List.contains:(Ljava/lang/Object;)Z
      17: ifne          139
      20: aload_0
      21: getfield      #98                 // Field starImportsWhitelist:Ljava/util/List;
      24: ifnull        105
      27: aload_1
      28: invokestatic  #443                // Method org/codehaus/groovy/ast/ClassHelper.make:(Ljava/lang/String;)Lorg/codehaus/groovy/ast/ClassNode;
      31: astore_2
      32: aload_2
      33: invokevirtual #444                // Method org/codehaus/groovy/ast/ClassNode.getPackageName:()Ljava/lang/String;
      36: astore_3
      37: aload_0
      38: getfield      #98                 // Field starImportsWhitelist:Ljava/util/List;
      41: new           #162                // class java/lang/StringBuilder
      44: dup
      45: invokespecial #163                // Method java/lang/StringBuilder."<init>":()V
      48: aload_3
      49: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      52: ldc           #150                // String .*
      54: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      57: invokevirtual #173                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      60: invokeinterface #432,  2          // InterfaceMethod java/util/List.contains:(Ljava/lang/Object;)Z
      65: ifne          102
      68: new           #298                // class java/lang/SecurityException
      71: dup
      72: new           #162                // class java/lang/StringBuilder
      75: dup
      76: invokespecial #163                // Method java/lang/StringBuilder."<init>":()V
      79: ldc_w         #434                // String Importing [
      82: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      85: aload_1
      86: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      89: ldc_w         #436                // String ] is not allowed
      92: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      95: invokevirtual #173                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      98: invokespecial #301                // Method java/lang/SecurityException."<init>":(Ljava/lang/String;)V
     101: athrow
     102: goto          139
     105: new           #298                // class java/lang/SecurityException
     108: dup
     109: new           #162                // class java/lang/StringBuilder
     112: dup
     113: invokespecial #163                // Method java/lang/StringBuilder."<init>":()V
     116: ldc_w         #434                // String Importing [
     119: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     122: aload_1
     123: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     126: ldc_w         #436                // String ] is not allowed
     129: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     132: invokevirtual #173                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     135: invokespecial #301                // Method java/lang/SecurityException."<init>":(Ljava/lang/String;)V
     138: athrow
     139: aload_0
     140: getfield      #92                 // Field importsBlacklist:Ljava/util/List;
     143: ifnull        193
     146: aload_0
     147: getfield      #92                 // Field importsBlacklist:Ljava/util/List;
     150: aload_1
     151: invokeinterface #432,  2          // InterfaceMethod java/util/List.contains:(Ljava/lang/Object;)Z
     156: ifeq          193
     159: new           #298                // class java/lang/SecurityException
     162: dup
     163: new           #162                // class java/lang/StringBuilder
     166: dup
     167: invokespecial #163                // Method java/lang/StringBuilder."<init>":()V
     170: ldc_w         #434                // String Importing [
     173: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     176: aload_1
     177: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     180: ldc_w         #436                // String ] is not allowed
     183: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     186: invokevirtual #173                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     189: invokespecial #301                // Method java/lang/SecurityException."<init>":(Ljava/lang/String;)V
     192: athrow
     193: aload_0
     194: getfield      #109                // Field starImportsBlacklist:Ljava/util/List;
     197: ifnull        275
     200: aload_1
     201: invokestatic  #443                // Method org/codehaus/groovy/ast/ClassHelper.make:(Ljava/lang/String;)Lorg/codehaus/groovy/ast/ClassNode;
     204: astore_2
     205: aload_2
     206: invokevirtual #444                // Method org/codehaus/groovy/ast/ClassNode.getPackageName:()Ljava/lang/String;
     209: astore_3
     210: aload_0
     211: getfield      #109                // Field starImportsBlacklist:Ljava/util/List;
     214: new           #162                // class java/lang/StringBuilder
     217: dup
     218: invokespecial #163                // Method java/lang/StringBuilder."<init>":()V
     221: aload_3
     222: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     225: ldc           #150                // String .*
     227: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     230: invokevirtual #173                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     233: invokeinterface #432,  2          // InterfaceMethod java/util/List.contains:(Ljava/lang/Object;)Z
     238: ifeq          275
     241: new           #298                // class java/lang/SecurityException
     244: dup
     245: new           #162                // class java/lang/StringBuilder
     248: dup
     249: invokespecial #163                // Method java/lang/StringBuilder."<init>":()V
     252: ldc_w         #434                // String Importing [
     255: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     258: aload_1
     259: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     262: ldc_w         #436                // String ] is not allowed
     265: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     268: invokevirtual #173                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     271: invokespecial #301                // Method java/lang/SecurityException."<init>":(Ljava/lang/String;)V
     274: athrow
     275: return

  private void assertStaticImportIsAllowed(java.lang.String, java.lang.String);
    Code:
       0: aload_1
       1: aload_2
       2: invokevirtual #424                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
       5: ifeq          12
       8: aload_1
       9: goto          35
      12: new           #162                // class java/lang/StringBuilder
      15: dup
      16: invokespecial #163                // Method java/lang/StringBuilder."<init>":()V
      19: aload_2
      20: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      23: ldc           #160                // String .
      25: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: aload_1
      29: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      32: invokevirtual #173                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      35: astore_3
      36: aload_0
      37: getfield      #186                // Field staticImportsWhitelist:Ljava/util/List;
      40: ifnull        162
      43: aload_0
      44: getfield      #186                // Field staticImportsWhitelist:Ljava/util/List;
      47: aload_3
      48: invokeinterface #432,  2          // InterfaceMethod java/util/List.contains:(Ljava/lang/Object;)Z
      53: ifne          162
      56: aload_0
      57: getfield      #188                // Field staticStarImportsWhitelist:Ljava/util/List;
      60: ifnull        128
      63: aload_0
      64: getfield      #188                // Field staticStarImportsWhitelist:Ljava/util/List;
      67: new           #162                // class java/lang/StringBuilder
      70: dup
      71: invokespecial #163                // Method java/lang/StringBuilder."<init>":()V
      74: aload_2
      75: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      78: ldc           #150                // String .*
      80: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      83: invokevirtual #173                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      86: invokeinterface #432,  2          // InterfaceMethod java/util/List.contains:(Ljava/lang/Object;)Z
      91: ifne          162
      94: new           #298                // class java/lang/SecurityException
      97: dup
      98: new           #162                // class java/lang/StringBuilder
     101: dup
     102: invokespecial #163                // Method java/lang/StringBuilder."<init>":()V
     105: ldc_w         #434                // String Importing [
     108: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     111: aload_3
     112: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     115: ldc_w         #436                // String ] is not allowed
     118: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     121: invokevirtual #173                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     124: invokespecial #301                // Method java/lang/SecurityException."<init>":(Ljava/lang/String;)V
     127: athrow
     128: new           #298                // class java/lang/SecurityException
     131: dup
     132: new           #162                // class java/lang/StringBuilder
     135: dup
     136: invokespecial #163                // Method java/lang/StringBuilder."<init>":()V
     139: ldc_w         #434                // String Importing [
     142: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     145: aload_3
     146: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     149: ldc_w         #436                // String ] is not allowed
     152: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     155: invokevirtual #173                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     158: invokespecial #301                // Method java/lang/SecurityException."<init>":(Ljava/lang/String;)V
     161: athrow
     162: aload_0
     163: getfield      #183                // Field staticImportsBlacklist:Ljava/util/List;
     166: ifnull        216
     169: aload_0
     170: getfield      #183                // Field staticImportsBlacklist:Ljava/util/List;
     173: aload_3
     174: invokeinterface #432,  2          // InterfaceMethod java/util/List.contains:(Ljava/lang/Object;)Z
     179: ifeq          216
     182: new           #298                // class java/lang/SecurityException
     185: dup
     186: new           #162                // class java/lang/StringBuilder
     189: dup
     190: invokespecial #163                // Method java/lang/StringBuilder."<init>":()V
     193: ldc_w         #434                // String Importing [
     196: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     199: aload_3
     200: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     203: ldc_w         #436                // String ] is not allowed
     206: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     209: invokevirtual #173                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     212: invokespecial #301                // Method java/lang/SecurityException."<init>":(Ljava/lang/String;)V
     215: athrow
     216: aload_0
     217: getfield      #192                // Field staticStarImportsBlacklist:Ljava/util/List;
     220: ifnull        288
     223: aload_0
     224: getfield      #192                // Field staticStarImportsBlacklist:Ljava/util/List;
     227: new           #162                // class java/lang/StringBuilder
     230: dup
     231: invokespecial #163                // Method java/lang/StringBuilder."<init>":()V
     234: aload_2
     235: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     238: ldc           #150                // String .*
     240: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     243: invokevirtual #173                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     246: invokeinterface #432,  2          // InterfaceMethod java/util/List.contains:(Ljava/lang/Object;)Z
     251: ifeq          288
     254: new           #298                // class java/lang/SecurityException
     257: dup
     258: new           #162                // class java/lang/StringBuilder
     261: dup
     262: invokespecial #163                // Method java/lang/StringBuilder."<init>":()V
     265: ldc_w         #434                // String Importing [
     268: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     271: aload_3
     272: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     275: ldc_w         #436                // String ] is not allowed
     278: invokevirtual #167                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     281: invokevirtual #173                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     284: invokespecial #301                // Method java/lang/SecurityException."<init>":(Ljava/lang/String;)V
     287: athrow
     288: return

  static java.util.List access$100(org.codehaus.groovy.control.customizers.SecureASTCustomizer);
    Code:
       0: aload_0
       1: getfield      #207                // Field statementsBlacklist:Ljava/util/List;
       4: areturn

  static java.util.List access$200(org.codehaus.groovy.control.customizers.SecureASTCustomizer);
    Code:
       0: aload_0
       1: getfield      #210                // Field statementsWhitelist:Ljava/util/List;
       4: areturn

  static java.util.List access$300(org.codehaus.groovy.control.customizers.SecureASTCustomizer);
    Code:
       0: aload_0
       1: getfield      #76                 // Field statementCheckers:Ljava/util/List;
       4: areturn

  static java.util.List access$400(org.codehaus.groovy.control.customizers.SecureASTCustomizer);
    Code:
       0: aload_0
       1: getfield      #199                // Field expressionsBlacklist:Ljava/util/List;
       4: areturn

  static java.util.List access$500(org.codehaus.groovy.control.customizers.SecureASTCustomizer);
    Code:
       0: aload_0
       1: getfield      #202                // Field expressionsWhitelist:Ljava/util/List;
       4: areturn

  static java.util.List access$600(org.codehaus.groovy.control.customizers.SecureASTCustomizer);
    Code:
       0: aload_0
       1: getfield      #78                 // Field expressionCheckers:Ljava/util/List;
       4: areturn

  static boolean access$700(org.codehaus.groovy.control.customizers.SecureASTCustomizer);
    Code:
       0: aload_0
       1: getfield      #217                // Field isIndirectImportCheckEnabled:Z
       4: ireturn

  static void access$800(org.codehaus.groovy.control.customizers.SecureASTCustomizer, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #316                // Method assertImportIsAllowed:(Ljava/lang/String;)V
       5: return

  static void access$900(org.codehaus.groovy.control.customizers.SecureASTCustomizer, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #346                // Method assertStaticImportIsAllowed:(Ljava/lang/String;Ljava/lang/String;)V
       6: return

  static java.util.List access$1000(org.codehaus.groovy.control.customizers.SecureASTCustomizer);
    Code:
       0: aload_0
       1: getfield      #215                // Field tokensBlacklist:Ljava/util/List;
       4: areturn

  static java.util.List access$1100(org.codehaus.groovy.control.customizers.SecureASTCustomizer);
    Code:
       0: aload_0
       1: getfield      #222                // Field tokensWhitelist:Ljava/util/List;
       4: areturn

  static java.util.List access$1200(org.codehaus.groovy.control.customizers.SecureASTCustomizer);
    Code:
       0: aload_0
       1: getfield      #270                // Field receiversWhiteList:Ljava/util/List;
       4: areturn

  static java.util.List access$1300(org.codehaus.groovy.control.customizers.SecureASTCustomizer);
    Code:
       0: aload_0
       1: getfield      #267                // Field receiversBlackList:Ljava/util/List;
       4: areturn

  static boolean access$1400(org.codehaus.groovy.control.customizers.SecureASTCustomizer);
    Code:
       0: aload_0
       1: getfield      #70                 // Field isClosuresAllowed:Z
       4: ireturn

  static java.util.List access$1500(org.codehaus.groovy.control.customizers.SecureASTCustomizer);
    Code:
       0: aload_0
       1: getfield      #247                // Field constantTypesWhiteList:Ljava/util/List;
       4: areturn

  static java.util.List access$1600(org.codehaus.groovy.control.customizers.SecureASTCustomizer);
    Code:
       0: aload_0
       1: getfield      #244                // Field constantTypesBlackList:Ljava/util/List;
       4: areturn
}
