Compiled from "UnlimitedConcurrentCache.java"
public final class org.codehaus.groovy.runtime.memoize.UnlimitedConcurrentCache implements org.codehaus.groovy.runtime.memoize.MemoizeCache<java.lang.Object, java.lang.Object> {
  private final java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> cache;

  public org.codehaus.groovy.runtime.memoize.UnlimitedConcurrentCache();
    Code:
       0: aload_0
       1: invokespecial #20                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #22                 // class java/util/concurrent/ConcurrentHashMap
       8: dup
       9: invokespecial #23                 // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      12: putfield      #25                 // Field cache:Ljava/util/concurrent/ConcurrentHashMap;
      15: return

  public java.lang.Object put(java.lang.Object, java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #25                 // Field cache:Ljava/util/concurrent/ConcurrentHashMap;
       4: aload_1
       5: aload_2
       6: invokevirtual #31                 // Method java/util/concurrent/ConcurrentHashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       9: areturn

  public java.lang.Object get(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #25                 // Field cache:Ljava/util/concurrent/ConcurrentHashMap;
       4: aload_1
       5: invokevirtual #38                 // Method java/util/concurrent/ConcurrentHashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
       8: areturn

  public void cleanUpNullReferences();
    Code:
       0: aload_0
       1: getfield      #25                 // Field cache:Ljava/util/concurrent/ConcurrentHashMap;
       4: invokevirtual #43                 // Method java/util/concurrent/ConcurrentHashMap.entrySet:()Ljava/util/Set;
       7: invokeinterface #49,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      12: astore_1
      13: aload_1
      14: invokeinterface #55,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      19: ifeq          71
      22: aload_1
      23: invokeinterface #59,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      28: checkcast     #10                 // class java/util/Map$Entry
      31: astore_2
      32: aload_2
      33: invokeinterface #62,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      38: astore_3
      39: aload_3
      40: ifnull        68
      43: aload_3
      44: checkcast     #64                 // class java/lang/ref/SoftReference
      47: invokevirtual #66                 // Method java/lang/ref/SoftReference.get:()Ljava/lang/Object;
      50: ifnonnull     68
      53: aload_0
      54: getfield      #25                 // Field cache:Ljava/util/concurrent/ConcurrentHashMap;
      57: aload_2
      58: invokeinterface #69,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      63: aload_3
      64: invokevirtual #73                 // Method java/util/concurrent/ConcurrentHashMap.remove:(Ljava/lang/Object;Ljava/lang/Object;)Z
      67: pop
      68: goto          13
      71: return
}
