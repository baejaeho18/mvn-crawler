Compiled from "LockableObject.java"
public class org.codehaus.groovy.util.LockableObject extends java.util.concurrent.locks.AbstractQueuedSynchronizer {
  private static final long serialVersionUID;

  transient java.lang.Thread owner;

  public org.codehaus.groovy.util.LockableObject();
    Code:
       0: aload_0
       1: invokespecial #15                 // Method java/util/concurrent/locks/AbstractQueuedSynchronizer."<init>":()V
       4: return

  protected final boolean isHeldExclusively();
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method getState:()I
       4: ifeq          21
       7: aload_0
       8: getfield      #25                 // Field owner:Ljava/lang/Thread;
      11: invokestatic  #31                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      14: if_acmpne     21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: ireturn

  public final void lock();
    Code:
       0: aload_0
       1: iconst_0
       2: iconst_1
       3: invokevirtual #36                 // Method compareAndSetState:(II)Z
       6: ifeq          19
       9: aload_0
      10: invokestatic  #31                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      13: putfield      #25                 // Field owner:Ljava/lang/Thread;
      16: goto          24
      19: aload_0
      20: iconst_1
      21: invokevirtual #40                 // Method acquire:(I)V
      24: return

  public final void unlock();
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #45                 // Method release:(I)Z
       5: pop
       6: return

  protected final boolean tryAcquire(int);
    Code:
       0: invokestatic  #31                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
       3: astore_2
       4: aload_0
       5: invokevirtual #23                 // Method getState:()I
       8: istore_3
       9: iload_3
      10: ifne          29
      13: aload_0
      14: iconst_0
      15: iload_1
      16: invokevirtual #36                 // Method compareAndSetState:(II)Z
      19: ifeq          46
      22: aload_0
      23: aload_2
      24: putfield      #25                 // Field owner:Ljava/lang/Thread;
      27: iconst_1
      28: ireturn
      29: aload_2
      30: aload_0
      31: getfield      #25                 // Field owner:Ljava/lang/Thread;
      34: if_acmpne     46
      37: aload_0
      38: iload_3
      39: iload_1
      40: iadd
      41: invokevirtual #49                 // Method setState:(I)V
      44: iconst_1
      45: ireturn
      46: iconst_0
      47: ireturn

  protected final boolean tryRelease(int);
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method getState:()I
       4: iload_1
       5: isub
       6: istore_2
       7: invokestatic  #31                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      10: aload_0
      11: getfield      #25                 // Field owner:Ljava/lang/Thread;
      14: if_acmpeq     25
      17: new           #56                 // class java/lang/IllegalMonitorStateException
      20: dup
      21: invokespecial #57                 // Method java/lang/IllegalMonitorStateException."<init>":()V
      24: athrow
      25: iconst_0
      26: istore_3
      27: iload_2
      28: ifne          38
      31: iconst_1
      32: istore_3
      33: aload_0
      34: aconst_null
      35: putfield      #25                 // Field owner:Ljava/lang/Thread;
      38: aload_0
      39: iload_2
      40: invokevirtual #49                 // Method setState:(I)V
      43: iload_3
      44: ireturn
}
