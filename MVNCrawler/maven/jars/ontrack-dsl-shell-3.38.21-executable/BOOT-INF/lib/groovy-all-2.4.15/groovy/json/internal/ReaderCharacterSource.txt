Compiled from "ReaderCharacterSource.java"
public class groovy.json.internal.ReaderCharacterSource implements groovy.json.internal.CharacterSource {
  private static final int MAX_TOKEN_SIZE;

  private final java.io.Reader reader;

  private int readAheadSize;

  private int ch;

  private boolean foundEscape;

  private char[] readBuf;

  private int index;

  private int length;

  boolean more;

  private boolean done;

  private static final char[] EMPTY_CHARS;

  public groovy.json.internal.ReaderCharacterSource(java.io.Reader, int);
    Code:
       0: aload_0
       1: invokespecial #28                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: bipush        -2
       7: putfield      #30                 // Field ch:I
      10: aload_0
      11: iconst_1
      12: putfield      #32                 // Field more:Z
      15: aload_0
      16: iconst_0
      17: putfield      #34                 // Field done:Z
      20: aload_0
      21: aload_1
      22: putfield      #36                 // Field reader:Ljava/io/Reader;
      25: aload_0
      26: iload_2
      27: iconst_5
      28: iadd
      29: newarray       char
      31: putfield      #38                 // Field readBuf:[C
      34: aload_0
      35: iload_2
      36: putfield      #40                 // Field readAheadSize:I
      39: return

  public groovy.json.internal.ReaderCharacterSource(java.io.Reader);
    Code:
       0: aload_0
       1: invokespecial #28                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: bipush        -2
       7: putfield      #30                 // Field ch:I
      10: aload_0
      11: iconst_1
      12: putfield      #32                 // Field more:Z
      15: aload_0
      16: iconst_0
      17: putfield      #34                 // Field done:Z
      20: aload_0
      21: aload_1
      22: putfield      #36                 // Field reader:Ljava/io/Reader;
      25: aload_0
      26: sipush        10000
      29: putfield      #40                 // Field readAheadSize:I
      32: aload_0
      33: aload_0
      34: getfield      #40                 // Field readAheadSize:I
      37: iconst_5
      38: iadd
      39: newarray       char
      41: putfield      #38                 // Field readBuf:[C
      44: return

  public groovy.json.internal.ReaderCharacterSource(java.lang.String);
    Code:
       0: aload_0
       1: new           #46                 // class java/io/StringReader
       4: dup
       5: aload_1
       6: invokespecial #48                 // Method java/io/StringReader."<init>":(Ljava/lang/String;)V
       9: invokespecial #50                 // Method "<init>":(Ljava/io/Reader;)V
      12: return

  private void readForToken();
    Code:
       0: aload_0
       1: dup
       2: getfield      #57                 // Field length:I
       5: aload_0
       6: getfield      #36                 // Field reader:Ljava/io/Reader;
       9: aload_0
      10: getfield      #38                 // Field readBuf:[C
      13: aload_0
      14: getfield      #38                 // Field readBuf:[C
      17: arraylength
      18: iconst_5
      19: isub
      20: iconst_5
      21: invokevirtual #63                 // Method java/io/Reader.read:([CII)I
      24: iadd
      25: putfield      #57                 // Field length:I
      28: goto          36
      31: astore_1
      32: aload_1
      33: invokestatic  #69                 // Method groovy/json/internal/Exceptions.handle:(Ljava/lang/Exception;)V
      36: return
    Exception table:
       from    to  target type
           0    28    31   Class java/io/IOException

  private void ensureBuffer();
    Code:
       0: aload_0
       1: getfield      #76                 // Field index:I
       4: aload_0
       5: getfield      #57                 // Field length:I
       8: if_icmplt     25
      11: aload_0
      12: getfield      #34                 // Field done:Z
      15: ifne          25
      18: aload_0
      19: invokespecial #79                 // Method readNextBuffer:()V
      22: goto          52
      25: aload_0
      26: aload_0
      27: getfield      #34                 // Field done:Z
      30: ifeq          44
      33: aload_0
      34: getfield      #76                 // Field index:I
      37: aload_0
      38: getfield      #57                 // Field length:I
      41: if_icmpge     48
      44: iconst_1
      45: goto          49
      48: iconst_0
      49: putfield      #32                 // Field more:Z
      52: goto          79
      55: astore_1
      56: ldc           #81                 // String ensureBuffer issue
      58: aload_0
      59: getfield      #38                 // Field readBuf:[C
      62: aload_0
      63: getfield      #76                 // Field index:I
      66: aload_0
      67: getfield      #30                 // Field ch:I
      70: invokestatic  #87                 // Method groovy/json/internal/CharScanner.errorDetails:(Ljava/lang/String;[CII)Ljava/lang/String;
      73: astore_2
      74: aload_2
      75: aload_1
      76: invokestatic  #90                 // Method groovy/json/internal/Exceptions.handle:(Ljava/lang/String;Ljava/lang/Throwable;)V
      79: return
    Exception table:
       from    to  target type
           0    52    55   Class java/lang/Exception

  private void readNextBuffer() throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #36                 // Field reader:Ljava/io/Reader;
       5: aload_0
       6: getfield      #38                 // Field readBuf:[C
       9: iconst_0
      10: aload_0
      11: getfield      #40                 // Field readAheadSize:I
      14: invokevirtual #63                 // Method java/io/Reader.read:([CII)I
      17: putfield      #57                 // Field length:I
      20: aload_0
      21: iconst_0
      22: putfield      #76                 // Field index:I
      25: aload_0
      26: getfield      #57                 // Field length:I
      29: iconst_m1
      30: if_icmpne     56
      33: aload_0
      34: iconst_m1
      35: putfield      #30                 // Field ch:I
      38: aload_0
      39: iconst_0
      40: putfield      #57                 // Field length:I
      43: aload_0
      44: iconst_0
      45: putfield      #32                 // Field more:Z
      48: aload_0
      49: iconst_1
      50: putfield      #34                 // Field done:Z
      53: goto          61
      56: aload_0
      57: iconst_1
      58: putfield      #32                 // Field more:Z
      61: return

  public final int nextChar();
    Code:
       0: aload_0
       1: invokespecial #97                 // Method ensureBuffer:()V
       4: aload_0
       5: aload_0
       6: getfield      #38                 // Field readBuf:[C
       9: aload_0
      10: dup
      11: getfield      #76                 // Field index:I
      14: dup_x1
      15: iconst_1
      16: iadd
      17: putfield      #76                 // Field index:I
      20: caload
      21: dup_x1
      22: putfield      #30                 // Field ch:I
      25: ireturn

  public final int currentChar();
    Code:
       0: aload_0
       1: invokespecial #97                 // Method ensureBuffer:()V
       4: aload_0
       5: getfield      #38                 // Field readBuf:[C
       8: aload_0
       9: getfield      #76                 // Field index:I
      12: caload
      13: ireturn

  public final boolean hasChar();
    Code:
       0: aload_0
       1: invokespecial #97                 // Method ensureBuffer:()V
       4: aload_0
       5: getfield      #32                 // Field more:Z
       8: ireturn

  public final boolean consumeIfMatch(char[]);
    Code:
       0: aload_0
       1: getfield      #38                 // Field readBuf:[C
       4: astore_2
       5: iconst_0
       6: istore_3
       7: aload_0
       8: getfield      #76                 // Field index:I
      11: istore        4
      13: iconst_1
      14: istore        5
      16: iload         4
      18: aload_1
      19: arraylength
      20: iadd
      21: aload_0
      22: getfield      #57                 // Field length:I
      25: if_icmple     32
      28: aload_0
      29: invokespecial #104                // Method readForToken:()V
      32: iload_3
      33: aload_1
      34: arraylength
      35: if_icmpge     75
      38: iload         5
      40: aload_1
      41: iload_3
      42: caload
      43: aload_2
      44: iload         4
      46: caload
      47: if_icmpne     54
      50: iconst_1
      51: goto          55
      54: iconst_0
      55: iand
      56: istore        5
      58: iload         5
      60: ifne          66
      63: goto          75
      66: iinc          3, 1
      69: iinc          4, 1
      72: goto          32
      75: iload         5
      77: ifeq          88
      80: aload_0
      81: iload         4
      83: putfield      #76                 // Field index:I
      86: iconst_1
      87: ireturn
      88: iconst_0
      89: ireturn
      90: astore_2
      91: ldc           #107                // String consumeIfMatch issue
      93: aload_0
      94: getfield      #38                 // Field readBuf:[C
      97: aload_0
      98: getfield      #76                 // Field index:I
     101: aload_0
     102: getfield      #30                 // Field ch:I
     105: invokestatic  #87                 // Method groovy/json/internal/CharScanner.errorDetails:(Ljava/lang/String;[CII)Ljava/lang/String;
     108: astore_3
     109: getstatic     #113                // Field java/lang/Boolean.TYPE:Ljava/lang/Class;
     112: aload_3
     113: aload_2
     114: invokestatic  #116                // Method groovy/json/internal/Exceptions.handle:(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Throwable;)Ljava/lang/Object;
     117: checkcast     #109                // class java/lang/Boolean
     120: invokevirtual #119                // Method java/lang/Boolean.booleanValue:()Z
     123: ireturn
    Exception table:
       from    to  target type
           0    87    90   Class java/lang/Exception
          88    89    90   Class java/lang/Exception

  public final int location();
    Code:
       0: aload_0
       1: getfield      #76                 // Field index:I
       4: ireturn

  public final int safeNextChar();
    Code:
       0: aload_0
       1: invokespecial #97                 // Method ensureBuffer:()V
       4: aload_0
       5: getfield      #76                 // Field index:I
       8: iconst_1
       9: iadd
      10: aload_0
      11: getfield      #38                 // Field readBuf:[C
      14: arraylength
      15: if_icmpge     37
      18: aload_0
      19: getfield      #38                 // Field readBuf:[C
      22: aload_0
      23: dup
      24: getfield      #76                 // Field index:I
      27: dup_x1
      28: iconst_1
      29: iadd
      30: putfield      #76                 // Field index:I
      33: caload
      34: goto          38
      37: iconst_m1
      38: ireturn
      39: astore_1
      40: ldc           #128                // String safeNextChar issue
      42: aload_0
      43: getfield      #38                 // Field readBuf:[C
      46: aload_0
      47: getfield      #76                 // Field index:I
      50: aload_0
      51: getfield      #30                 // Field ch:I
      54: invokestatic  #87                 // Method groovy/json/internal/CharScanner.errorDetails:(Ljava/lang/String;[CII)Ljava/lang/String;
      57: astore_2
      58: getstatic     #131                // Field java/lang/Integer.TYPE:Ljava/lang/Class;
      61: aload_2
      62: aload_1
      63: invokestatic  #116                // Method groovy/json/internal/Exceptions.handle:(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Throwable;)Ljava/lang/Object;
      66: checkcast     #130                // class java/lang/Integer
      69: invokevirtual #134                // Method java/lang/Integer.intValue:()I
      72: ireturn
    Exception table:
       from    to  target type
           0    38    39   Class java/lang/Exception

  public char[] findNextChar(int, int);
    Code:
       0: aload_0
       1: invokespecial #97                 // Method ensureBuffer:()V
       4: aload_0
       5: iconst_0
       6: putfield      #138                // Field foundEscape:Z
       9: aload_0
      10: getfield      #38                 // Field readBuf:[C
      13: aload_0
      14: getfield      #76                 // Field index:I
      17: caload
      18: bipush        34
      20: if_icmpne     37
      23: aload_0
      24: dup
      25: getfield      #76                 // Field index:I
      28: iconst_1
      29: iadd
      30: putfield      #76                 // Field index:I
      33: getstatic     #140                // Field EMPTY_CHARS:[C
      36: areturn
      37: aload_0
      38: getfield      #76                 // Field index:I
      41: istore_3
      42: aconst_null
      43: astore        4
      45: iconst_0
      46: istore        5
      48: iconst_0
      49: istore        6
      51: iload         5
      53: ifne          198
      56: aload_0
      57: getfield      #76                 // Field index:I
      60: aload_0
      61: getfield      #57                 // Field length:I
      64: if_icmpge     134
      67: aload_0
      68: aload_0
      69: getfield      #38                 // Field readBuf:[C
      72: aload_0
      73: getfield      #76                 // Field index:I
      76: caload
      77: putfield      #30                 // Field ch:I
      80: iload         6
      82: ifeq          91
      85: iconst_0
      86: istore        6
      88: goto          121
      91: aload_0
      92: getfield      #30                 // Field ch:I
      95: iload_1
      96: if_icmpne     105
      99: iconst_1
     100: istore        5
     102: goto          134
     105: aload_0
     106: getfield      #30                 // Field ch:I
     109: iload_2
     110: if_icmpne     121
     113: aload_0
     114: iconst_1
     115: putfield      #138                // Field foundEscape:Z
     118: iconst_1
     119: istore        6
     121: aload_0
     122: dup
     123: getfield      #76                 // Field index:I
     126: iconst_1
     127: iadd
     128: putfield      #76                 // Field index:I
     131: goto          56
     134: aload         4
     136: ifnull        161
     139: aload         4
     141: aload_0
     142: getfield      #38                 // Field readBuf:[C
     145: iload_3
     146: aload_0
     147: getfield      #76                 // Field index:I
     150: invokestatic  #146                // Method groovy/json/internal/ArrayUtils.copyRange:([CII)[C
     153: invokestatic  #152                // Method groovy/json/internal/Chr.add:([C[C)[C
     156: astore        4
     158: goto          175
     161: aload_0
     162: getfield      #38                 // Field readBuf:[C
     165: iload_3
     166: aload_0
     167: getfield      #76                 // Field index:I
     170: invokestatic  #146                // Method groovy/json/internal/ArrayUtils.copyRange:([CII)[C
     173: astore        4
     175: aload_0
     176: invokespecial #97                 // Method ensureBuffer:()V
     179: aload_0
     180: getfield      #76                 // Field index:I
     183: ifne          188
     186: iconst_0
     187: istore_3
     188: aload_0
     189: getfield      #34                 // Field done:Z
     192: ifeq          51
     195: goto          198
     198: aload_0
     199: getfield      #34                 // Field done:Z
     202: ifeq          251
     205: ldc           #105                // class "[C"
     207: new           #154                // class java/lang/StringBuilder
     210: dup
     211: invokespecial #155                // Method java/lang/StringBuilder."<init>":()V
     214: ldc           #157                // String Unable to find close char
     216: invokevirtual #161                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     219: iload_1
     220: i2c
     221: invokevirtual #164                // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
     224: ldc           #166                // String :
     226: invokevirtual #161                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     229: new           #168                // class java/lang/String
     232: dup
     233: aload         4
     235: invokespecial #171                // Method java/lang/String."<init>":([C)V
     238: invokevirtual #161                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     241: invokevirtual #175                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     244: invokestatic  #179                // Method groovy/json/internal/Exceptions.die:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Object;
     247: checkcast     #105                // class "[C"
     250: areturn
     251: aload_0
     252: dup
     253: getfield      #76                 // Field index:I
     256: iconst_1
     257: iadd
     258: putfield      #76                 // Field index:I
     261: aload         4
     263: areturn
     264: astore_3
     265: ldc           #181                // String findNextChar issue
     267: aload_0
     268: getfield      #38                 // Field readBuf:[C
     271: aload_0
     272: getfield      #76                 // Field index:I
     275: aload_0
     276: getfield      #30                 // Field ch:I
     279: invokestatic  #87                 // Method groovy/json/internal/CharScanner.errorDetails:(Ljava/lang/String;[CII)Ljava/lang/String;
     282: astore        4
     284: ldc           #105                // class "[C"
     286: aload         4
     288: aload_3
     289: invokestatic  #116                // Method groovy/json/internal/Exceptions.handle:(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Throwable;)Ljava/lang/Object;
     292: checkcast     #105                // class "[C"
     295: areturn
    Exception table:
       from    to  target type
           0    36   264   Class java/lang/Exception
          37   250   264   Class java/lang/Exception
         251   263   264   Class java/lang/Exception

  public boolean hadEscape();
    Code:
       0: aload_0
       1: getfield      #138                // Field foundEscape:Z
       4: ireturn

  public void skipWhiteSpace();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #38                 // Field readBuf:[C
       5: aload_0
       6: getfield      #76                 // Field index:I
       9: aload_0
      10: getfield      #57                 // Field length:I
      13: invokestatic  #190                // Method groovy/json/internal/CharScanner.skipWhiteSpace:([CII)I
      16: putfield      #76                 // Field index:I
      19: aload_0
      20: getfield      #76                 // Field index:I
      23: aload_0
      24: getfield      #57                 // Field length:I
      27: if_icmplt     45
      30: aload_0
      31: getfield      #32                 // Field more:Z
      34: ifeq          45
      37: aload_0
      38: invokespecial #97                 // Method ensureBuffer:()V
      41: aload_0
      42: invokevirtual #192                // Method skipWhiteSpace:()V
      45: goto          72
      48: astore_1
      49: ldc           #194                // String skipWhiteSpace issue
      51: aload_0
      52: getfield      #38                 // Field readBuf:[C
      55: aload_0
      56: getfield      #76                 // Field index:I
      59: aload_0
      60: getfield      #30                 // Field ch:I
      63: invokestatic  #87                 // Method groovy/json/internal/CharScanner.errorDetails:(Ljava/lang/String;[CII)Ljava/lang/String;
      66: astore_2
      67: aload_2
      68: aload_1
      69: invokestatic  #90                 // Method groovy/json/internal/Exceptions.handle:(Ljava/lang/String;Ljava/lang/Throwable;)V
      72: return
    Exception table:
       from    to  target type
           0    45    48   Class java/lang/Exception

  public char[] readNumber();
    Code:
       0: aload_0
       1: invokespecial #97                 // Method ensureBuffer:()V
       4: aload_0
       5: getfield      #38                 // Field readBuf:[C
       8: aload_0
       9: getfield      #76                 // Field index:I
      12: aload_0
      13: getfield      #57                 // Field length:I
      16: invokestatic  #198                // Method groovy/json/internal/CharScanner.readNumber:([CII)[C
      19: astore_1
      20: aload_0
      21: dup
      22: getfield      #76                 // Field index:I
      25: aload_1
      26: arraylength
      27: iadd
      28: putfield      #76                 // Field index:I
      31: aload_0
      32: getfield      #76                 // Field index:I
      35: aload_0
      36: getfield      #57                 // Field length:I
      39: if_icmplt     73
      42: aload_0
      43: getfield      #32                 // Field more:Z
      46: ifeq          73
      49: aload_0
      50: invokespecial #97                 // Method ensureBuffer:()V
      53: aload_0
      54: getfield      #57                 // Field length:I
      57: ifeq          71
      60: aload_0
      61: invokevirtual #200                // Method readNumber:()[C
      64: astore_2
      65: aload_1
      66: aload_2
      67: invokestatic  #152                // Method groovy/json/internal/Chr.add:([C[C)[C
      70: areturn
      71: aload_1
      72: areturn
      73: aload_1
      74: areturn
      75: astore_1
      76: ldc           #202                // String readNumber issue
      78: aload_0
      79: getfield      #38                 // Field readBuf:[C
      82: aload_0
      83: getfield      #76                 // Field index:I
      86: aload_0
      87: getfield      #30                 // Field ch:I
      90: invokestatic  #87                 // Method groovy/json/internal/CharScanner.errorDetails:(Ljava/lang/String;[CII)Ljava/lang/String;
      93: astore_2
      94: ldc           #105                // class "[C"
      96: aload_2
      97: aload_1
      98: invokestatic  #116                // Method groovy/json/internal/Exceptions.handle:(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/Throwable;)Ljava/lang/Object;
     101: checkcast     #105                // class "[C"
     104: areturn
    Exception table:
       from    to  target type
           0    70    75   Class java/lang/Exception
          71    72    75   Class java/lang/Exception
          73    74    75   Class java/lang/Exception

  public java.lang.String errorDetails(java.lang.String);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #38                 // Field readBuf:[C
       5: aload_0
       6: getfield      #76                 // Field index:I
       9: aload_0
      10: getfield      #30                 // Field ch:I
      13: invokestatic  #87                 // Method groovy/json/internal/CharScanner.errorDetails:(Ljava/lang/String;[CII)Ljava/lang/String;
      16: areturn

  static {};
    Code:
       0: iconst_0
       1: newarray       char
       3: putstatic     #140                // Field EMPTY_CHARS:[C
       6: return
}
