Compiled from "LockBasedStorageManager.java"
class kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$CacheWithNullableValuesBasedOnMemoizedFunction<K, V> extends kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$MapBasedMemoizedFunction<kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$KeyWithComputation<K, V>, V> {
  private kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$CacheWithNullableValuesBasedOnMemoizedFunction(kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager, java.util.concurrent.ConcurrentMap<kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$KeyWithComputation<K, V>, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: new           #4                  // class kotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager$CacheWithNullableValuesBasedOnMemoizedFunction$1
       6: dup
       7: invokespecial #9                  // Method kotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager$CacheWithNullableValuesBasedOnMemoizedFunction$1."<init>":()V
      10: invokespecial #11                 // Method kotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager$MapBasedMemoizedFunction."<init>":(Lkotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager;Ljava/util/concurrent/ConcurrentMap;Lkotlin/jvm/functions/Function1;)V
      13: return

  public V computeIfAbsent(K, kotlin.jvm.functions.Function0<? extends V>);
    Code:
       0: aload_0
       1: new           #5                  // class kotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager$KeyWithComputation
       4: dup
       5: aload_1
       6: aload_2
       7: invokespecial #10                 // Method kotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager$KeyWithComputation."<init>":(Ljava/lang/Object;Lkotlin/jvm/functions/Function0;)V
      10: invokevirtual #8                  // Method invoke:(Ljava/lang/Object;)Ljava/lang/Object;
      13: areturn

  kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$CacheWithNullableValuesBasedOnMemoizedFunction(kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager, java.util.concurrent.ConcurrentMap, kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #7                  // Method "<init>":(Lkotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager;Ljava/util/concurrent/ConcurrentMap;)V
       6: return
}
