Compiled from "LockBasedStorageManager.java"
public class kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager implements kotlin.reflect.jvm.internal.impl.storage.StorageManager {
  private static final java.lang.String PACKAGE_NAME;

  public static final kotlin.reflect.jvm.internal.impl.storage.StorageManager NO_LOCKS;

  protected final java.util.concurrent.locks.Lock lock;

  private final kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$ExceptionHandlingStrategy exceptionHandlingStrategy;

  private final java.lang.String debugText;

  static final boolean $assertionsDisabled;

  private kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager(java.lang.String, kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$ExceptionHandlingStrategy, java.util.concurrent.locks.Lock);
    Code:
       0: aload_0
       1: invokespecial #55                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_3
       6: putfield      #46                 // Field lock:Ljava/util/concurrent/locks/Lock;
       9: aload_0
      10: aload_2
      11: putfield      #45                 // Field exceptionHandlingStrategy:Lkotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager$ExceptionHandlingStrategy;
      14: aload_0
      15: aload_1
      16: putfield      #44                 // Field debugText:Ljava/lang/String;
      19: return

  public kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager();
    Code:
       0: aload_0
       1: invokestatic  #73                 // Method defaultDebugName:()Ljava/lang/String;
       4: getstatic     #47                 // Field kotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager$ExceptionHandlingStrategy.THROW:Lkotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager$ExceptionHandlingStrategy;
       7: new           #23                 // class java/util/concurrent/locks/ReentrantLock
      10: dup
      11: invokespecial #68                 // Method java/util/concurrent/locks/ReentrantLock."<init>":()V
      14: invokespecial #69                 // Method "<init>":(Ljava/lang/String;Lkotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager$ExceptionHandlingStrategy;Ljava/util/concurrent/locks/Lock;)V
      17: return

  private static java.lang.String defaultDebugName();
    Code:
       0: ldc           #5                  // String <unknown creating class>
       2: areturn

  public java.lang.String toString();
    Code:
       0: new           #18                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #60                 // Method java/lang/StringBuilder."<init>":()V
       7: aload_0
       8: invokevirtual #56                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      11: invokevirtual #52                 // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
      14: invokevirtual #62                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      17: ldc           #6                  // String @
      19: invokevirtual #62                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: aload_0
      23: invokevirtual #57                 // Method java/lang/Object.hashCode:()I
      26: invokestatic  #54                 // Method java/lang/Integer.toHexString:(I)Ljava/lang/String;
      29: invokevirtual #62                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      32: ldc           #2                  // String  (
      34: invokevirtual #62                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      37: aload_0
      38: getfield      #44                 // Field debugText:Ljava/lang/String;
      41: invokevirtual #62                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      44: ldc           #3                  // String )
      46: invokevirtual #62                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      49: invokevirtual #63                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      52: areturn

  public <K, V> kotlin.reflect.jvm.internal.impl.storage.MemoizedFunctionToNotNull<K, V> createMemoizedFunction(kotlin.jvm.functions.Function1<? super K, ? extends V>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #70                 // Method createConcurrentHashMap:()Ljava/util/concurrent/ConcurrentMap;
       5: invokevirtual #71                 // Method createMemoizedFunction:(Lkotlin/jvm/functions/Function1;Ljava/util/concurrent/ConcurrentMap;)Lkotlin/reflect/jvm/internal/impl/storage/MemoizedFunctionToNotNull;
       8: areturn

  public <K, V> kotlin.reflect.jvm.internal.impl.storage.MemoizedFunctionToNotNull<K, V> createMemoizedFunction(kotlin.jvm.functions.Function1<? super K, ? extends V>, java.util.concurrent.ConcurrentMap<K, java.lang.Object>);
    Code:
       0: new           #35                 // class kotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager$MapBasedMemoizedFunctionToNotNull
       3: dup
       4: aload_0
       5: aload_2
       6: aload_1
       7: invokespecial #82                 // Method kotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager$MapBasedMemoizedFunctionToNotNull."<init>":(Lkotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager;Ljava/util/concurrent/ConcurrentMap;Lkotlin/jvm/functions/Function1;)V
      10: areturn

  public <K, V> kotlin.reflect.jvm.internal.impl.storage.MemoizedFunctionToNullable<K, V> createMemoizedFunctionWithNullableValues(kotlin.jvm.functions.Function1<? super K, ? extends V>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #70                 // Method createConcurrentHashMap:()Ljava/util/concurrent/ConcurrentMap;
       5: invokevirtual #72                 // Method createMemoizedFunctionWithNullableValues:(Lkotlin/jvm/functions/Function1;Ljava/util/concurrent/ConcurrentMap;)Lkotlin/reflect/jvm/internal/impl/storage/MemoizedFunctionToNullable;
       8: areturn

  public <K, V> kotlin.reflect.jvm.internal.impl.storage.MemoizedFunctionToNullable<K, V> createMemoizedFunctionWithNullableValues(kotlin.jvm.functions.Function1<? super K, ? extends V>, java.util.concurrent.ConcurrentMap<K, java.lang.Object>);
    Code:
       0: new           #34                 // class kotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager$MapBasedMemoizedFunction
       3: dup
       4: aload_0
       5: aload_2
       6: aload_1
       7: invokespecial #81                 // Method kotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager$MapBasedMemoizedFunction."<init>":(Lkotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager;Ljava/util/concurrent/ConcurrentMap;Lkotlin/jvm/functions/Function1;)V
      10: areturn

  public <T> kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue<T> createLazyValue(kotlin.jvm.functions.Function0<? extends T>);
    Code:
       0: new           #33                 // class kotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager$LockBasedNotNullLazyValue
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #80                 // Method kotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager$LockBasedNotNullLazyValue."<init>":(Lkotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager;Lkotlin/jvm/functions/Function0;)V
       9: areturn

  public <T> kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue<T> createRecursionTolerantLazyValue(kotlin.jvm.functions.Function0<? extends T>, T);
    Code:
       0: new           #26                 // class kotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager$2
       3: dup
       4: aload_0
       5: aload_0
       6: aload_1
       7: aload_2
       8: invokespecial #76                 // Method kotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager$2."<init>":(Lkotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager;Lkotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager;Lkotlin/jvm/functions/Function0;Ljava/lang/Object;)V
      11: areturn

  public <T> kotlin.reflect.jvm.internal.impl.storage.NotNullLazyValue<T> createLazyValueWithPostCompute(kotlin.jvm.functions.Function0<? extends T>, kotlin.jvm.functions.Function1<? super java.lang.Boolean, ? extends T>, kotlin.jvm.functions.Function1<? super T, kotlin.Unit>);
    Code:
       0: new           #27                 // class kotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager$3
       3: dup
       4: aload_0
       5: aload_0
       6: aload_1
       7: aload_2
       8: aload_3
       9: invokespecial #77                 // Method kotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager$3."<init>":(Lkotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager;Lkotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager;Lkotlin/jvm/functions/Function0;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)V
      12: areturn

  public <T> kotlin.reflect.jvm.internal.impl.storage.NullableLazyValue<T> createNullableLazyValue(kotlin.jvm.functions.Function0<? extends T>);
    Code:
       0: new           #32                 // class kotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager$LockBasedLazyValue
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #79                 // Method kotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager$LockBasedLazyValue."<init>":(Lkotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager;Lkotlin/jvm/functions/Function0;)V
       9: areturn

  private static <K> java.util.concurrent.ConcurrentMap<K, java.lang.Object> createConcurrentHashMap();
    Code:
       0: new           #22                 // class java/util/concurrent/ConcurrentHashMap
       3: dup
       4: iconst_3
       5: fconst_1
       6: iconst_2
       7: invokespecial #67                 // Method java/util/concurrent/ConcurrentHashMap."<init>":(IFI)V
      10: areturn

  protected <T> kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$RecursionDetectedResult<T> recursionDetectedDefault();
    Code:
       0: new           #13                 // class java/lang/IllegalStateException
       3: dup
       4: new           #18                 // class java/lang/StringBuilder
       7: dup
       8: invokespecial #60                 // Method java/lang/StringBuilder."<init>":()V
      11: ldc           #8                  // String Recursive call in a lazy value under
      13: invokevirtual #62                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      16: aload_0
      17: invokevirtual #61                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      20: invokevirtual #63                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      23: invokespecial #53                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      26: invokestatic  #74                 // Method sanitizeStackTrace:(Ljava/lang/Throwable;)Ljava/lang/Throwable;
      29: checkcast     #13                 // class java/lang/IllegalStateException
      32: athrow

  private static <T extends java.lang.Throwable> T sanitizeStackTrace(T);
    Code:
       0: aload_0
       1: invokevirtual #64                 // Method java/lang/Throwable.getStackTrace:()[Ljava/lang/StackTraceElement;
       4: astore_1
       5: aload_1
       6: arraylength
       7: istore_2
       8: iconst_m1
       9: istore_3
      10: iconst_0
      11: istore        4
      13: iload         4
      15: iload_2
      16: if_icmpge     47
      19: aload_1
      20: iload         4
      22: aaload
      23: invokevirtual #58                 // Method java/lang/StackTraceElement.getClassName:()Ljava/lang/String;
      26: getstatic     #43                 // Field PACKAGE_NAME:Ljava/lang/String;
      29: invokevirtual #59                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      32: ifne          41
      35: iload         4
      37: istore_3
      38: goto          47
      41: iinc          4, 1
      44: goto          13
      47: getstatic     #41                 // Field $assertionsDisabled:Z
      50: ifne          67
      53: iload_3
      54: ifge          67
      57: new           #11                 // class java/lang/AssertionError
      60: dup
      61: ldc           #9                  // String This method should only be called on exceptions created in LockBasedStorageManager
      63: invokespecial #49                 // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
      66: athrow
      67: aload_1
      68: invokestatic  #66                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      71: iload_3
      72: iload_2
      73: invokeinterface #85,  3           // InterfaceMethod java/util/List.subList:(II)Ljava/util/List;
      78: astore        4
      80: aload_0
      81: aload         4
      83: aload         4
      85: invokeinterface #84,  1           // InterfaceMethod java/util/List.size:()I
      90: anewarray     #16                 // class java/lang/StackTraceElement
      93: invokeinterface #86,  2           // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      98: checkcast     #10                 // class "[Ljava/lang/StackTraceElement;"
     101: invokevirtual #65                 // Method java/lang/Throwable.setStackTrace:([Ljava/lang/StackTraceElement;)V
     104: aload_0
     105: areturn

  public <K, V> kotlin.reflect.jvm.internal.impl.storage.CacheWithNotNullValues<K, V> createCacheWithNotNullValues();
    Code:
       0: new           #28                 // class kotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager$CacheWithNotNullValuesBasedOnMemoizedFunction
       3: dup
       4: aload_0
       5: invokestatic  #70                 // Method createConcurrentHashMap:()Ljava/util/concurrent/ConcurrentMap;
       8: aconst_null
       9: invokespecial #78                 // Method kotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager$CacheWithNotNullValuesBasedOnMemoizedFunction."<init>":(Lkotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager;Ljava/util/concurrent/ConcurrentMap;Lkotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager$1;)V
      12: areturn

  kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager(java.lang.String, kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$ExceptionHandlingStrategy, java.util.concurrent.locks.Lock, kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$1);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokespecial #69                 // Method "<init>":(Ljava/lang/String;Lkotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager$ExceptionHandlingStrategy;Ljava/util/concurrent/locks/Lock;)V
       7: return

  static kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$ExceptionHandlingStrategy access$100(kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager);
    Code:
       0: aload_0
       1: getfield      #45                 // Field exceptionHandlingStrategy:Lkotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager$ExceptionHandlingStrategy;
       4: areturn

  static java.lang.Throwable access$200(java.lang.Throwable);
    Code:
       0: aload_0
       1: invokestatic  #74                 // Method sanitizeStackTrace:(Ljava/lang/Throwable;)Ljava/lang/Throwable;
       4: areturn

  static {};
    Code:
       0: ldc           #24                 // class kotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager
       2: invokevirtual #50                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #41                 // Field $assertionsDisabled:Z
      16: ldc           #24                 // class kotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager
      18: invokevirtual #51                 // Method java/lang/Class.getCanonicalName:()Ljava/lang/String;
      21: ldc           #4                  // String .
      23: ldc           #1                  // String
      25: invokestatic  #83                 // Method kotlin/text/StringsKt.substringBeforeLast:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      28: putstatic     #43                 // Field PACKAGE_NAME:Ljava/lang/String;
      31: new           #25                 // class kotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager$1
      34: dup
      35: ldc           #7                  // String NO_LOCKS
      37: getstatic     #47                 // Field kotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager$ExceptionHandlingStrategy.THROW:Lkotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager$ExceptionHandlingStrategy;
      40: getstatic     #48                 // Field kotlin/reflect/jvm/internal/impl/storage/NoLock.INSTANCE:Ljava/util/concurrent/locks/Lock;
      43: invokespecial #75                 // Method kotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager$1."<init>":(Ljava/lang/String;Lkotlin/reflect/jvm/internal/impl/storage/LockBasedStorageManager$ExceptionHandlingStrategy;Ljava/util/concurrent/locks/Lock;)V
      46: putstatic     #42                 // Field NO_LOCKS:Lkotlin/reflect/jvm/internal/impl/storage/StorageManager;
      49: return
}
