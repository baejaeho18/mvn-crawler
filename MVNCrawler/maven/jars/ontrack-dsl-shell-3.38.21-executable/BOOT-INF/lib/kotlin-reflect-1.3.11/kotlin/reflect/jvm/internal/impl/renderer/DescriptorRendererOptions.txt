Compiled from "DescriptorRenderer.kt"
public interface kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererOptions {
  public abstract void setClassifierNamePolicy(kotlin.reflect.jvm.internal.impl.renderer.ClassifierNamePolicy);

  public abstract void setWithDefinedIn(boolean);

  public abstract void setModifiers(java.util.Set<? extends kotlin.reflect.jvm.internal.impl.renderer.DescriptorRendererModifier>);

  public abstract void setStartFromName(boolean);

  public abstract boolean getDebugMode();

  public abstract void setDebugMode(boolean);

  public abstract void setVerbose(boolean);

  public abstract boolean getEnhancedTypes();

  public abstract void setTextFormat(kotlin.reflect.jvm.internal.impl.renderer.RenderingFormat);

  public abstract java.util.Set<kotlin.reflect.jvm.internal.impl.name.FqName> getExcludedTypeAnnotationClasses();

  public abstract void setExcludedTypeAnnotationClasses(java.util.Set<kotlin.reflect.jvm.internal.impl.name.FqName>);

  public abstract kotlin.reflect.jvm.internal.impl.renderer.AnnotationArgumentsRenderingPolicy getAnnotationArgumentsRenderingPolicy();

  public abstract void setAnnotationArgumentsRenderingPolicy(kotlin.reflect.jvm.internal.impl.renderer.AnnotationArgumentsRenderingPolicy);

  public abstract void setParameterNameRenderingPolicy(kotlin.reflect.jvm.internal.impl.renderer.ParameterNameRenderingPolicy);

  public abstract void setWithoutTypeParameters(boolean);

  public abstract void setReceiverAfterName(boolean);

  public abstract void setRenderCompanionObjectName(boolean);

  public abstract void setWithoutSuperTypes(boolean);
}
