Compiled from "SequencesJVM.kt"
public final class kotlin.sequences.ConstrainedOnceSequence<T> implements kotlin.sequences.Sequence<T> {
  private final java.util.concurrent.atomic.AtomicReference<kotlin.sequences.Sequence<T>> sequenceRef;

  public java.util.Iterator<T> iterator();
    Code:
       0: aload_0
       1: getfield      #15                 // Field sequenceRef:Ljava/util/concurrent/atomic/AtomicReference;
       4: aconst_null
       5: invokevirtual #21                 // Method java/util/concurrent/atomic/AtomicReference.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;
       8: checkcast     #7                  // class kotlin/sequences/Sequence
      11: dup
      12: ifnull        18
      15: goto          32
      18: pop
      19: new           #23                 // class java/lang/IllegalStateException
      22: dup
      23: ldc           #25                 // String This sequence can be consumed only once.
      25: invokespecial #29                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      28: checkcast     #31                 // class java/lang/Throwable
      31: athrow
      32: astore_1
      33: aload_1
      34: invokeinterface #33,  1           // InterfaceMethod kotlin/sequences/Sequence.iterator:()Ljava/util/Iterator;
      39: areturn

  public kotlin.sequences.ConstrainedOnceSequence(kotlin.sequences.Sequence<? extends T>);
    Code:
       0: aload_1
       1: ldc           #39                 // String sequence
       3: invokestatic  #45                 // Method kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: invokespecial #48                 // Method java/lang/Object."<init>":()V
      10: aload_0
      11: new           #17                 // class java/util/concurrent/atomic/AtomicReference
      14: dup
      15: aload_1
      16: invokespecial #51                 // Method java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
      19: putfield      #15                 // Field sequenceRef:Ljava/util/concurrent/atomic/AtomicReference;
      22: return
}
