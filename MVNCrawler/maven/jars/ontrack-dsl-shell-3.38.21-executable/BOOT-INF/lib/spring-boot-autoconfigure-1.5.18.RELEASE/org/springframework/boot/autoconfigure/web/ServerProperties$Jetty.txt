Compiled from "ServerProperties.java"
public class org.springframework.boot.autoconfigure.web.ServerProperties$Jetty {
  private int maxHttpPostSize;

  private java.lang.Integer acceptors;

  private java.lang.Integer selectors;

  public org.springframework.boot.autoconfigure.web.ServerProperties$Jetty();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: ldc           #2                  // int 200000
       7: putfield      #3                  // Field maxHttpPostSize:I
      10: aload_0
      11: iconst_m1
      12: invokestatic  #4                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      15: putfield      #5                  // Field acceptors:Ljava/lang/Integer;
      18: aload_0
      19: iconst_m1
      20: invokestatic  #4                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      23: putfield      #6                  // Field selectors:Ljava/lang/Integer;
      26: return

  public int getMaxHttpPostSize();
    Code:
       0: aload_0
       1: getfield      #3                  // Field maxHttpPostSize:I
       4: ireturn

  public void setMaxHttpPostSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #3                  // Field maxHttpPostSize:I
       5: return

  public java.lang.Integer getAcceptors();
    Code:
       0: aload_0
       1: getfield      #5                  // Field acceptors:Ljava/lang/Integer;
       4: areturn

  public void setAcceptors(java.lang.Integer);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field acceptors:Ljava/lang/Integer;
       5: return

  public java.lang.Integer getSelectors();
    Code:
       0: aload_0
       1: getfield      #6                  // Field selectors:Ljava/lang/Integer;
       4: areturn

  public void setSelectors(java.lang.Integer);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field selectors:Ljava/lang/Integer;
       5: return

  void customizeJetty(org.springframework.boot.autoconfigure.web.ServerProperties, org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainerFactory);
    Code:
       0: aload_2
       1: aload_1
       2: invokevirtual #7                  // Method org/springframework/boot/autoconfigure/web/ServerProperties.getOrDeduceUseForwardHeaders:()Z
       5: invokevirtual #8                  // Method org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.setUseForwardHeaders:(Z)V
       8: aload_0
       9: getfield      #5                  // Field acceptors:Ljava/lang/Integer;
      12: ifnull        26
      15: aload_2
      16: aload_0
      17: getfield      #5                  // Field acceptors:Ljava/lang/Integer;
      20: invokevirtual #9                  // Method java/lang/Integer.intValue:()I
      23: invokevirtual #10                 // Method org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.setAcceptors:(I)V
      26: aload_0
      27: getfield      #6                  // Field selectors:Ljava/lang/Integer;
      30: ifnull        44
      33: aload_2
      34: aload_0
      35: getfield      #6                  // Field selectors:Ljava/lang/Integer;
      38: invokevirtual #9                  // Method java/lang/Integer.intValue:()I
      41: invokevirtual #11                 // Method org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.setSelectors:(I)V
      44: aload_1
      45: invokevirtual #12                 // Method org/springframework/boot/autoconfigure/web/ServerProperties.getMaxHttpHeaderSize:()I
      48: ifle          60
      51: aload_0
      52: aload_2
      53: aload_1
      54: invokevirtual #12                 // Method org/springframework/boot/autoconfigure/web/ServerProperties.getMaxHttpHeaderSize:()I
      57: invokespecial #13                 // Method customizeMaxHttpHeaderSize:(Lorg/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory;I)V
      60: aload_0
      61: getfield      #3                  // Field maxHttpPostSize:I
      64: ifle          76
      67: aload_0
      68: aload_2
      69: aload_0
      70: getfield      #3                  // Field maxHttpPostSize:I
      73: invokespecial #14                 // Method customizeMaxHttpPostSize:(Lorg/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory;I)V
      76: aload_1
      77: invokevirtual #15                 // Method org/springframework/boot/autoconfigure/web/ServerProperties.getConnectionTimeout:()Ljava/lang/Integer;
      80: ifnull        95
      83: aload_0
      84: aload_2
      85: aload_1
      86: invokevirtual #15                 // Method org/springframework/boot/autoconfigure/web/ServerProperties.getConnectionTimeout:()Ljava/lang/Integer;
      89: invokevirtual #9                  // Method java/lang/Integer.intValue:()I
      92: invokespecial #16                 // Method customizeConnectionTimeout:(Lorg/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory;I)V
      95: return

  private void customizeConnectionTimeout(org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainerFactory, int);
    Code:
       0: aload_1
       1: iconst_1
       2: anewarray     #17                 // class org/springframework/boot/context/embedded/jetty/JettyServerCustomizer
       5: dup
       6: iconst_0
       7: new           #18                 // class org/springframework/boot/autoconfigure/web/ServerProperties$Jetty$1
      10: dup
      11: aload_0
      12: iload_2
      13: invokespecial #19                 // Method org/springframework/boot/autoconfigure/web/ServerProperties$Jetty$1."<init>":(Lorg/springframework/boot/autoconfigure/web/ServerProperties$Jetty;I)V
      16: aastore
      17: invokevirtual #20                 // Method org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.addServerCustomizers:([Lorg/springframework/boot/context/embedded/jetty/JettyServerCustomizer;)V
      20: return

  private void customizeMaxHttpHeaderSize(org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainerFactory, int);
    Code:
       0: aload_1
       1: iconst_1
       2: anewarray     #17                 // class org/springframework/boot/context/embedded/jetty/JettyServerCustomizer
       5: dup
       6: iconst_0
       7: new           #21                 // class org/springframework/boot/autoconfigure/web/ServerProperties$Jetty$2
      10: dup
      11: aload_0
      12: iload_2
      13: invokespecial #22                 // Method org/springframework/boot/autoconfigure/web/ServerProperties$Jetty$2."<init>":(Lorg/springframework/boot/autoconfigure/web/ServerProperties$Jetty;I)V
      16: aastore
      17: invokevirtual #20                 // Method org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.addServerCustomizers:([Lorg/springframework/boot/context/embedded/jetty/JettyServerCustomizer;)V
      20: return

  private void customizeMaxHttpPostSize(org.springframework.boot.context.embedded.jetty.JettyEmbeddedServletContainerFactory, int);
    Code:
       0: aload_1
       1: iconst_1
       2: anewarray     #17                 // class org/springframework/boot/context/embedded/jetty/JettyServerCustomizer
       5: dup
       6: iconst_0
       7: new           #23                 // class org/springframework/boot/autoconfigure/web/ServerProperties$Jetty$3
      10: dup
      11: aload_0
      12: iload_2
      13: invokespecial #24                 // Method org/springframework/boot/autoconfigure/web/ServerProperties$Jetty$3."<init>":(Lorg/springframework/boot/autoconfigure/web/ServerProperties$Jetty;I)V
      16: aastore
      17: invokevirtual #20                 // Method org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.addServerCustomizers:([Lorg/springframework/boot/context/embedded/jetty/JettyServerCustomizer;)V
      20: return
}
