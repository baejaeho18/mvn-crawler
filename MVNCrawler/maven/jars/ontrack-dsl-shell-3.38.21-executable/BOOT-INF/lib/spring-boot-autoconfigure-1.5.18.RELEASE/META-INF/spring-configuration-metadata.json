{
  "hints": [
    {
      "name": "liquibase.change-log",
      "providers": [
        {
          "name": "handle-as",
          "parameters": {
            "target": "org.springframework.core.io.Resource"
          }
        }
      ]
    },
    {
      "name": "server.jsp-servlet.class-name",
      "providers": [
        {
          "name": "class-reference",
          "parameters": {
            "target": "javax.servlet.http.HttpServlet"
          }
        }
      ]
    },
    {
      "name": "spring.cache.jcache.provider",
      "providers": [
        {
          "name": "class-reference",
          "parameters": {
            "target": "javax.cache.spi.CachingProvider"
          }
        }
      ]
    },
    {
      "name": "spring.data.cassandra.schema-action",
      "providers": [
        {
          "name": "handle-as",
          "parameters": {
            "target": "org.springframework.data.cassandra.config.SchemaAction"
          }
        }
      ]
    },
    {
      "name": "spring.data.mongodb.field-naming-strategy",
      "providers": [
        {
          "name": "class-reference",
          "parameters": {
            "target": "org.springframework.data.mapping.model.FieldNamingStrategy"
          }
        }
      ]
    },
    {
      "name": "spring.data.neo4j.compiler",
      "providers": [
        {
          "name": "class-reference",
          "parameters": {
            "target": "org.neo4j.ogm.compiler.Compiler"
          }
        }
      ]
    },
    {
      "name": "spring.datasource.data",
      "providers": [
        {
          "name": "handle-as",
          "parameters": {
            "target": "java.util.List<org.springframework.core.io.Resource>"
          }
        }
      ]
    },
    {
      "name": "spring.datasource.driver-class-name",
      "providers": [
        {
          "name": "class-reference",
          "parameters": {
            "target": "java.sql.Driver"
          }
        }
      ]
    },
    {
      "name": "spring.datasource.schema",
      "providers": [
        {
          "name": "handle-as",
          "parameters": {
            "target": "java.util.List<org.springframework.core.io.Resource>"
          }
        }
      ]
    },
    {
      "name": "spring.datasource.xa.data-source-class-name",
      "providers": [
        {
          "name": "class-reference",
          "parameters": {
            "target": "javax.sql.XADataSource"
          }
        }
      ]
    },
    {
      "values": [
        {
          "value": "gson"
        },
        {
          "value": "jackson"
        }
      ],
      "name": "spring.http.converters.preferred-json-mapper",
      "providers": [
        {
          "name": "any"
        }
      ]
    },
    {
      "name": "spring.jmx.server",
      "providers": [
        {
          "name": "spring-bean-reference",
          "parameters": {
            "target": "javax.management.MBeanServer"
          }
        }
      ]
    },
    {
      "values": [
        {
          "description": "Disable DDL handling.",
          "value": "none"
        },
        {
          "description": "Validate the schema, make no changes to the database.",
          "value": "validate"
        },
        {
          "description": "Update the schema if necessary.",
          "value": "update"
        },
        {
          "description": "Create the schema and destroy previous data.",
          "value": "create"
        },
        {
          "description": "Create and then destroy the schema at the end of the session.",
          "value": "create-drop"
        }
      ],
      "name": "spring.jpa.hibernate.ddl-auto"
    },
    {
      "name": "spring.jpa.hibernate.naming.implicit-strategy",
      "providers": [
        {
          "name": "class-reference",
          "parameters": {
            "target": "org.hibernate.boot.model.naming.ImplicitNamingStrategy"
          }
        }
      ]
    },
    {
      "name": "spring.jpa.hibernate.naming.physical-strategy",
      "providers": [
        {
          "name": "class-reference",
          "parameters": {
            "target": "org.hibernate.boot.model.naming.PhysicalNamingStrategy"
          }
        }
      ]
    },
    {
      "name": "spring.jpa.hibernate.naming.strategy",
      "providers": [
        {
          "name": "class-reference",
          "parameters": {
            "target": "org.hibernate.cfg.NamingStrategy"
          }
        }
      ]
    },
    {
      "values": [
        {
          "description": "Automatically reset the offset to the earliest offset.",
          "value": "earliest"
        },
        {
          "description": "Automatically reset the offset to the latest offset.",
          "value": "latest"
        },
        {
          "description": "Throw exception to the consumer if no previous offset is found for the consumer's group.",
          "value": "none"
        },
        {
          "description": "Throw exception to the consumer.",
          "value": "exception"
        }
      ],
      "name": "spring.kafka.consumer.auto-offset-reset",
      "providers": [
        {
          "name": "any"
        }
      ]
    },
    {
      "name": "spring.kafka.consumer.key-deserializer",
      "providers": [
        {
          "name": "handle-as",
          "parameters": {
            "target": "org.apache.kafka.common.serialization.Deserializer"
          }
        }
      ]
    },
    {
      "name": "spring.kafka.consumer.value-deserializer",
      "providers": [
        {
          "name": "handle-as",
          "parameters": {
            "target": "org.apache.kafka.common.serialization.Deserializer"
          }
        }
      ]
    },
    {
      "name": "spring.kafka.producer.key-serializer",
      "providers": [
        {
          "name": "handle-as",
          "parameters": {
            "target": "org.apache.kafka.common.serialization.Serializer"
          }
        }
      ]
    },
    {
      "name": "spring.kafka.producer.value-serializer",
      "providers": [
        {
          "name": "handle-as",
          "parameters": {
            "target": "org.apache.kafka.common.serialization.Serializer"
          }
        }
      ]
    }
  ],
  "groups": [
    {
      "sourceType": "org.springframework.boot.autoconfigure.flyway.FlywayProperties",
      "name": "flyway",
      "type": "org.springframework.boot.autoconfigure.flyway.FlywayProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration$FlywayConfiguration",
      "name": "flyway",
      "sourceMethod": "flyway()",
      "type": "org.flywaydb.core.Flyway"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties",
      "name": "liquibase",
      "type": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties",
      "name": "security",
      "type": "org.springframework.boot.autoconfigure.security.SecurityProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties",
      "name": "security.basic",
      "sourceMethod": "getBasic()",
      "type": "org.springframework.boot.autoconfigure.security.SecurityProperties$Basic"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties",
      "name": "security.headers",
      "sourceMethod": "getHeaders()",
      "type": "org.springframework.boot.autoconfigure.security.SecurityProperties$Headers"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.authserver.AuthorizationServerProperties",
      "name": "security.oauth2.authorization",
      "type": "org.springframework.boot.autoconfigure.security.oauth2.authserver.AuthorizationServerProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.authserver.OAuth2AuthorizationServerConfiguration$BaseClientDetailsConfiguration",
      "name": "security.oauth2.client",
      "sourceMethod": "oauth2ClientDetails()",
      "type": "org.springframework.security.oauth2.provider.client.BaseClientDetails"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2ProtectedResourceDetailsConfiguration",
      "name": "security.oauth2.client",
      "sourceMethod": "oauth2RemoteResource()",
      "type": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2RestOperationsConfiguration$SingletonScopedConfiguration",
      "name": "security.oauth2.client",
      "sourceMethod": "oauth2RemoteResource()",
      "type": "org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.OAuth2ClientProperties",
      "name": "security.oauth2.client",
      "type": "org.springframework.boot.autoconfigure.security.oauth2.OAuth2ClientProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties",
      "name": "security.oauth2.resource",
      "type": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties",
      "name": "security.oauth2.resource.jwk",
      "sourceMethod": "getJwk()",
      "type": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties$Jwk"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties",
      "name": "security.oauth2.resource.jwt",
      "sourceMethod": "getJwt()",
      "type": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties$Jwt"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2SsoProperties",
      "name": "security.oauth2.sso",
      "type": "org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2SsoProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties",
      "name": "security.user",
      "sourceMethod": "getUser()",
      "type": "org.springframework.boot.autoconfigure.security.SecurityProperties$User"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "name": "server",
      "type": "org.springframework.boot.autoconfigure.web.ServerProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "name": "server.compression",
      "sourceMethod": "getCompression()",
      "type": "org.springframework.boot.context.embedded.Compression"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "name": "server.error",
      "sourceMethod": "getError()",
      "type": "org.springframework.boot.autoconfigure.web.ErrorProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "name": "server.jetty",
      "sourceMethod": "getJetty()",
      "type": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "name": "server.jsp-servlet",
      "sourceMethod": "getJspServlet()",
      "type": "org.springframework.boot.context.embedded.JspServlet"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "name": "server.session",
      "sourceMethod": "getSession()",
      "type": "org.springframework.boot.autoconfigure.web.ServerProperties$Session"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Session",
      "name": "server.session.cookie",
      "sourceMethod": "getCookie()",
      "type": "org.springframework.boot.autoconfigure.web.ServerProperties$Session$Cookie"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "name": "server.ssl",
      "sourceMethod": "getSsl()",
      "type": "org.springframework.boot.context.embedded.Ssl"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "name": "server.tomcat",
      "sourceMethod": "getTomcat()",
      "type": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "name": "server.tomcat.accesslog",
      "sourceMethod": "getAccesslog()",
      "type": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "name": "server.undertow",
      "sourceMethod": "getUndertow()",
      "type": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow",
      "name": "server.undertow.accesslog",
      "sourceMethod": "getAccesslog()",
      "type": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow$Accesslog"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties",
      "name": "spring.activemq",
      "type": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties",
      "name": "spring.activemq.packages",
      "sourceMethod": "getPackages()",
      "type": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Packages"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties",
      "name": "spring.activemq.pool",
      "sourceMethod": "getPool()",
      "type": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQConnectionFactoryConfiguration$PooledConnectionFactoryConfiguration",
      "name": "spring.activemq.pool.configuration",
      "sourceMethod": "pooledJmsConnectionFactory(org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties,org.springframework.beans.factory.ObjectProvider<java.util.List<org.springframework.boot.autoconfigure.jms.activemq.ActiveMQConnectionFactoryCustomizer>>)",
      "type": "org.apache.activemq.pool.PooledConnectionFactory"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties",
      "name": "spring.artemis",
      "type": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties",
      "name": "spring.artemis.embedded",
      "sourceMethod": "getEmbedded()",
      "type": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties$Embedded"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.batch.BatchProperties",
      "name": "spring.batch",
      "type": "org.springframework.boot.autoconfigure.batch.BatchProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.batch.BatchProperties",
      "name": "spring.batch.initializer",
      "sourceMethod": "getInitializer()",
      "type": "org.springframework.boot.autoconfigure.batch.BatchProperties$Initializer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.batch.BatchProperties",
      "name": "spring.batch.job",
      "sourceMethod": "getJob()",
      "type": "org.springframework.boot.autoconfigure.batch.BatchProperties$Job"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties",
      "name": "spring.cache",
      "type": "org.springframework.boot.autoconfigure.cache.CacheProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties",
      "name": "spring.cache.caffeine",
      "sourceMethod": "getCaffeine()",
      "type": "org.springframework.boot.autoconfigure.cache.CacheProperties$Caffeine"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties",
      "name": "spring.cache.couchbase",
      "sourceMethod": "getCouchbase()",
      "type": "org.springframework.boot.autoconfigure.cache.CacheProperties$Couchbase"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties",
      "name": "spring.cache.ehcache",
      "sourceMethod": "getEhcache()",
      "type": "org.springframework.boot.autoconfigure.cache.CacheProperties$EhCache"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties",
      "name": "spring.cache.guava",
      "sourceMethod": "getGuava()",
      "type": "org.springframework.boot.autoconfigure.cache.CacheProperties$Guava"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties",
      "name": "spring.cache.hazelcast",
      "sourceMethod": "getHazelcast()",
      "type": "org.springframework.boot.autoconfigure.cache.CacheProperties$Hazelcast"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties",
      "name": "spring.cache.infinispan",
      "sourceMethod": "getInfinispan()",
      "type": "org.springframework.boot.autoconfigure.cache.CacheProperties$Infinispan"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties",
      "name": "spring.cache.jcache",
      "sourceMethod": "getJcache()",
      "type": "org.springframework.boot.autoconfigure.cache.CacheProperties$JCache"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties",
      "name": "spring.couchbase",
      "type": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties",
      "name": "spring.couchbase.bucket",
      "sourceMethod": "getBucket()",
      "type": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Bucket"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties",
      "name": "spring.couchbase.env",
      "sourceMethod": "getEnv()",
      "type": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Env"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Env",
      "name": "spring.couchbase.env.endpoints",
      "sourceMethod": "getEndpoints()",
      "type": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Endpoints"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Env",
      "name": "spring.couchbase.env.ssl",
      "sourceMethod": "getSsl()",
      "type": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Ssl"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Env",
      "name": "spring.couchbase.env.timeouts",
      "sourceMethod": "getTimeouts()",
      "type": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Timeouts"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "name": "spring.data.cassandra",
      "type": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataProperties",
      "name": "spring.data.couchbase",
      "type": "org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchProperties",
      "name": "spring.data.elasticsearch",
      "type": "org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties",
      "name": "spring.data.mongodb",
      "type": "org.springframework.boot.autoconfigure.mongo.MongoProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties",
      "name": "spring.data.neo4j",
      "type": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties",
      "name": "spring.data.neo4j.embedded",
      "sourceMethod": "getEmbedded()",
      "type": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties$Embedded"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties",
      "name": "spring.data.rest",
      "type": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.solr.SolrProperties",
      "name": "spring.data.solr",
      "type": "org.springframework.boot.autoconfigure.solr.SolrProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "name": "spring.datasource",
      "type": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Dbcp",
      "name": "spring.datasource.dbcp",
      "sourceMethod": "dataSource(org.springframework.boot.autoconfigure.jdbc.DataSourceProperties)",
      "type": "org.apache.commons.dbcp.BasicDataSource"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Dbcp2",
      "name": "spring.datasource.dbcp2",
      "sourceMethod": "dataSource(org.springframework.boot.autoconfigure.jdbc.DataSourceProperties)",
      "type": "org.apache.commons.dbcp2.BasicDataSource"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Hikari",
      "name": "spring.datasource.hikari",
      "sourceMethod": "dataSource(org.springframework.boot.autoconfigure.jdbc.DataSourceProperties)",
      "type": "com.zaxxer.hikari.HikariDataSource"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceConfiguration$Tomcat",
      "name": "spring.datasource.tomcat",
      "sourceMethod": "dataSource(org.springframework.boot.autoconfigure.jdbc.DataSourceProperties)",
      "type": "org.apache.tomcat.jdbc.pool.DataSource"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "name": "spring.datasource.xa",
      "sourceMethod": "getXa()",
      "type": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties$Xa"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties",
      "name": "spring.elasticsearch.jest",
      "type": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties",
      "name": "spring.elasticsearch.jest.proxy",
      "sourceMethod": "getProxy()",
      "type": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties$Proxy"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "name": "spring.freemarker",
      "type": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "name": "spring.groovy.template",
      "type": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration$GroovyMarkupConfiguration",
      "name": "spring.groovy.template.configuration",
      "sourceMethod": "groovyMarkupConfigurer()",
      "type": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.h2.H2ConsoleProperties",
      "name": "spring.h2.console",
      "type": "org.springframework.boot.autoconfigure.h2.H2ConsoleProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.h2.H2ConsoleProperties",
      "name": "spring.h2.console.settings",
      "sourceMethod": "getSettings()",
      "type": "org.springframework.boot.autoconfigure.h2.H2ConsoleProperties$Settings"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.hateoas.HateoasProperties",
      "name": "spring.hateoas",
      "type": "org.springframework.boot.autoconfigure.hateoas.HateoasProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.hazelcast.HazelcastProperties",
      "name": "spring.hazelcast",
      "type": "org.springframework.boot.autoconfigure.hazelcast.HazelcastProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.HttpEncodingProperties",
      "name": "spring.http.encoding",
      "type": "org.springframework.boot.autoconfigure.web.HttpEncodingProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.MultipartProperties",
      "name": "spring.http.multipart",
      "type": "org.springframework.boot.autoconfigure.web.MultipartProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties",
      "name": "spring.info",
      "type": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties",
      "name": "spring.info.build",
      "sourceMethod": "getBuild()",
      "type": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties$Build"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties",
      "name": "spring.info.git",
      "sourceMethod": "getGit()",
      "type": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties$Git"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties",
      "name": "spring.jackson",
      "type": "org.springframework.boot.autoconfigure.jackson.JacksonProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jersey.JerseyProperties",
      "name": "spring.jersey",
      "type": "org.springframework.boot.autoconfigure.jersey.JerseyProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jersey.JerseyProperties",
      "name": "spring.jersey.filter",
      "sourceMethod": "getFilter()",
      "type": "org.springframework.boot.autoconfigure.jersey.JerseyProperties$Filter"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jersey.JerseyProperties",
      "name": "spring.jersey.servlet",
      "sourceMethod": "getServlet()",
      "type": "org.springframework.boot.autoconfigure.jersey.JerseyProperties$Servlet"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties",
      "name": "spring.jms",
      "type": "org.springframework.boot.autoconfigure.jms.JmsProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties",
      "name": "spring.jms.listener",
      "sourceMethod": "getListener()",
      "type": "org.springframework.boot.autoconfigure.jms.JmsProperties$Listener"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties",
      "name": "spring.jms.template",
      "sourceMethod": "getTemplate()",
      "type": "org.springframework.boot.autoconfigure.jms.JmsProperties$Template"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jooq.JooqProperties",
      "name": "spring.jooq",
      "type": "org.springframework.boot.autoconfigure.jooq.JooqProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties",
      "name": "spring.jpa",
      "type": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties",
      "name": "spring.jpa.hibernate",
      "sourceMethod": "getHibernate()",
      "type": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Hibernate"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Hibernate",
      "name": "spring.jpa.hibernate.naming",
      "sourceMethod": "getNaming()",
      "type": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Naming"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.transaction.jta.JtaProperties",
      "name": "spring.jta",
      "type": "org.springframework.boot.autoconfigure.transaction.jta.JtaProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.transaction.jta.BitronixJtaConfiguration",
      "name": "spring.jta.bitronix.properties",
      "sourceMethod": "bitronixConfiguration()",
      "type": "bitronix.tm.Configuration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties",
      "name": "spring.kafka",
      "type": "org.springframework.boot.autoconfigure.kafka.KafkaProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties",
      "name": "spring.kafka.consumer",
      "sourceMethod": "getConsumer()",
      "type": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties",
      "name": "spring.kafka.listener",
      "sourceMethod": "getListener()",
      "type": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Listener"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties",
      "name": "spring.kafka.producer",
      "sourceMethod": "getProducer()",
      "type": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties",
      "name": "spring.kafka.ssl",
      "sourceMethod": "getSsl()",
      "type": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties",
      "name": "spring.kafka.template",
      "sourceMethod": "getTemplate()",
      "type": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Template"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.ldap.LdapProperties",
      "name": "spring.ldap",
      "type": "org.springframework.boot.autoconfigure.ldap.LdapProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties",
      "name": "spring.ldap.embedded",
      "type": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties",
      "name": "spring.ldap.embedded.credential",
      "sourceMethod": "getCredential()",
      "type": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties$Credential"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties",
      "name": "spring.ldap.embedded.validation",
      "sourceMethod": "getValidation()",
      "type": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties$Validation"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties",
      "name": "spring.mail",
      "type": "org.springframework.boot.autoconfigure.mail.MailProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration",
      "name": "spring.messages",
      "type": "org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverProperties",
      "name": "spring.mobile.devicedelegatingviewresolver",
      "type": "org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties",
      "name": "spring.mongodb.embedded",
      "type": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties",
      "name": "spring.mongodb.embedded.storage",
      "sourceMethod": "getStorage()",
      "type": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties$Storage"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "name": "spring.mustache",
      "type": "org.springframework.boot.autoconfigure.mustache.MustacheProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties",
      "name": "spring.mvc",
      "type": "org.springframework.boot.autoconfigure.web.WebMvcProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties",
      "name": "spring.mvc.async",
      "sourceMethod": "getAsync()",
      "type": "org.springframework.boot.autoconfigure.web.WebMvcProperties$Async"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties",
      "name": "spring.mvc.servlet",
      "sourceMethod": "getServlet()",
      "type": "org.springframework.boot.autoconfigure.web.WebMvcProperties$Servlet"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties",
      "name": "spring.mvc.view",
      "sourceMethod": "getView()",
      "type": "org.springframework.boot.autoconfigure.web.WebMvcProperties$View"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "name": "spring.rabbitmq",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "name": "spring.rabbitmq.cache",
      "sourceMethod": "getCache()",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache",
      "name": "spring.rabbitmq.cache.channel",
      "sourceMethod": "getChannel()",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache$Channel"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache",
      "name": "spring.rabbitmq.cache.connection",
      "sourceMethod": "getConnection()",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache$Connection"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "name": "spring.rabbitmq.listener",
      "sourceMethod": "getListener()",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Listener"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Listener",
      "name": "spring.rabbitmq.listener.simple",
      "sourceMethod": "getSimple()",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$AmqpContainer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$AmqpContainer",
      "name": "spring.rabbitmq.listener.simple.retry",
      "sourceMethod": "getRetry()",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "name": "spring.rabbitmq.ssl",
      "sourceMethod": "getSsl()",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "name": "spring.rabbitmq.template",
      "sourceMethod": "getTemplate()",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Template"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Template",
      "name": "spring.rabbitmq.template.retry",
      "sourceMethod": "getRetry()",
      "type": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Retry"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "name": "spring.redis",
      "type": "org.springframework.boot.autoconfigure.data.redis.RedisProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "name": "spring.redis.cluster",
      "sourceMethod": "getCluster()",
      "type": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Cluster"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "name": "spring.redis.pool",
      "sourceMethod": "getPool()",
      "type": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "name": "spring.redis.sentinel",
      "sourceMethod": "getSentinel()",
      "type": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Sentinel"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties",
      "name": "spring.resources",
      "type": "org.springframework.boot.autoconfigure.web.ResourceProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties",
      "name": "spring.resources.chain",
      "sourceMethod": "getChain()",
      "type": "org.springframework.boot.autoconfigure.web.ResourceProperties$Chain"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Chain",
      "name": "spring.resources.chain.strategy",
      "sourceMethod": "getStrategy()",
      "type": "org.springframework.boot.autoconfigure.web.ResourceProperties$Strategy"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Strategy",
      "name": "spring.resources.chain.strategy.content",
      "sourceMethod": "getContent()",
      "type": "org.springframework.boot.autoconfigure.web.ResourceProperties$Content"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Strategy",
      "name": "spring.resources.chain.strategy.fixed",
      "sourceMethod": "getFixed()",
      "type": "org.springframework.boot.autoconfigure.web.ResourceProperties$Fixed"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.sendgrid.SendGridProperties",
      "name": "spring.sendgrid",
      "type": "org.springframework.boot.autoconfigure.sendgrid.SendGridProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.sendgrid.SendGridProperties",
      "name": "spring.sendgrid.proxy",
      "sourceMethod": "getProxy()",
      "type": "org.springframework.boot.autoconfigure.sendgrid.SendGridProperties$Proxy"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties",
      "name": "spring.session",
      "type": "org.springframework.boot.autoconfigure.session.SessionProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties",
      "name": "spring.session.hazelcast",
      "sourceMethod": "getHazelcast()",
      "type": "org.springframework.boot.autoconfigure.session.SessionProperties$Hazelcast"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties",
      "name": "spring.session.jdbc",
      "sourceMethod": "getJdbc()",
      "type": "org.springframework.boot.autoconfigure.session.SessionProperties$Jdbc"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties$Jdbc",
      "name": "spring.session.jdbc.initializer",
      "sourceMethod": "getInitializer()",
      "type": "org.springframework.boot.autoconfigure.session.SessionProperties$Jdbc$Initializer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties",
      "name": "spring.session.mongo",
      "sourceMethod": "getMongo()",
      "type": "org.springframework.boot.autoconfigure.session.SessionProperties$Mongo"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties",
      "name": "spring.session.redis",
      "sourceMethod": "getRedis()",
      "type": "org.springframework.boot.autoconfigure.session.SessionProperties$Redis"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.social.FacebookProperties",
      "name": "spring.social.facebook",
      "type": "org.springframework.boot.autoconfigure.social.FacebookProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.social.LinkedInProperties",
      "name": "spring.social.linkedin",
      "type": "org.springframework.boot.autoconfigure.social.LinkedInProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.social.TwitterProperties",
      "name": "spring.social.twitter",
      "type": "org.springframework.boot.autoconfigure.social.TwitterProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "name": "spring.thymeleaf",
      "type": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.transaction.TransactionProperties",
      "name": "spring.transaction",
      "type": "org.springframework.boot.autoconfigure.transaction.TransactionProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.webservices.WebServicesProperties",
      "name": "spring.webservices",
      "type": "org.springframework.boot.autoconfigure.webservices.WebServicesProperties"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.webservices.WebServicesProperties",
      "name": "spring.webservices.servlet",
      "sourceMethod": "getServlet()",
      "type": "org.springframework.boot.autoconfigure.webservices.WebServicesProperties$Servlet"
    }
  ],
  "properties": [
    {
      "deprecated": true,
      "name": "error.path",
      "description": "Path of the error controller.",
      "type": "java.lang.String",
      "deprecation": {
        "replacement": "server.error.path"
      }
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "flyway.baseline-description",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "flyway.baseline-on-migrate",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "flyway.baseline-version",
      "type": "org.flywaydb.core.api.MigrationVersion"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.flyway.FlywayProperties",
      "defaultValue": false,
      "name": "flyway.check-location",
      "description": "Check that migration scripts location exists.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "flyway.clean-on-validation-error",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.flyway.FlywayProperties",
      "defaultValue": true,
      "name": "flyway.enabled",
      "description": "Enable flyway.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "flyway.encoding",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "flyway.ignore-failed-future-migration",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "deprecated": true,
      "name": "flyway.init-description",
      "type": "java.lang.String",
      "deprecation": {}
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "deprecated": true,
      "name": "flyway.init-on-migrate",
      "type": "java.lang.Boolean",
      "deprecation": {}
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.flyway.FlywayProperties",
      "name": "flyway.init-sqls",
      "description": "SQL statements to execute to initialize a connection immediately after obtaining it.",
      "type": "java.util.List<java.lang.String>"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "deprecated": true,
      "name": "flyway.init-version",
      "type": "org.flywaydb.core.api.MigrationVersion",
      "deprecation": {}
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.flyway.FlywayProperties",
      "name": "flyway.locations",
      "description": "Locations of migrations scripts. Can contain the special \"{vendor}\" placeholder to use vendor-specific locations.",
      "type": "java.util.List<java.lang.String>"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "flyway.locations",
      "type": "java.lang.String[]"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "flyway.out-of-order",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.flyway.FlywayProperties",
      "name": "flyway.password",
      "description": "Login password of the database to migrate.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "flyway.placeholder-prefix",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "flyway.placeholder-replacement",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "flyway.placeholder-suffix",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "flyway.placeholders",
      "type": "java.util.Map<java.lang.String,java.lang.String>"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "flyway.schemas",
      "type": "java.lang.String[]"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "flyway.sql-migration-prefix",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "flyway.sql-migration-separator",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "flyway.sql-migration-suffix",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "flyway.table",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "flyway.target",
      "type": "org.flywaydb.core.api.MigrationVersion"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.flyway.FlywayProperties",
      "name": "flyway.url",
      "description": "JDBC url of the database to migrate. If not set, the primary configured data source is used.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.flyway.FlywayProperties",
      "name": "flyway.user",
      "description": "Login user of the database to migrate.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.flywaydb.core.Flyway",
      "name": "flyway.validate-on-migrate",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties",
      "defaultValue": "classpath:\/db\/changelog\/db.changelog-master.yaml",
      "name": "liquibase.change-log",
      "description": "Change log configuration path.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties",
      "defaultValue": true,
      "name": "liquibase.check-change-log-location",
      "description": "Check the change log location exists.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties",
      "name": "liquibase.contexts",
      "description": "Comma-separated list of runtime contexts to use.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties",
      "name": "liquibase.default-schema",
      "description": "Default database schema.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties",
      "defaultValue": false,
      "name": "liquibase.drop-first",
      "description": "Drop the database schema first.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties",
      "defaultValue": true,
      "name": "liquibase.enabled",
      "description": "Enable liquibase support.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties",
      "name": "liquibase.labels",
      "description": "Comma-separated list of runtime labels to use.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties",
      "name": "liquibase.parameters",
      "description": "Change log parameters.",
      "type": "java.util.Map<java.lang.String,java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties",
      "name": "liquibase.password",
      "description": "Login password of the database to migrate.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties",
      "name": "liquibase.rollback-file",
      "description": "File to which rollback SQL will be written when an update is performed.",
      "type": "java.io.File"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties",
      "name": "liquibase.url",
      "description": "JDBC url of the database to migrate. If not set, the primary configured data source is used.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties",
      "name": "liquibase.user",
      "description": "Login user of the database to migrate.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$Basic",
      "defaultValue": "role",
      "name": "security.basic.authorize-mode",
      "description": "Security authorize mode to apply.",
      "type": "org.springframework.boot.autoconfigure.security.SecurityAuthorizeMode"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$Basic",
      "defaultValue": true,
      "name": "security.basic.enabled",
      "description": "Enable basic authentication.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$Basic",
      "defaultValue": [
        "\/**"
      ],
      "name": "security.basic.path",
      "description": "Comma-separated list of paths to secure.",
      "type": "java.lang.String[]"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$Basic",
      "defaultValue": "Spring",
      "name": "security.basic.realm",
      "description": "HTTP basic realm name.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties",
      "defaultValue": false,
      "name": "security.enable-csrf",
      "description": "Enable Cross Site Request Forgery support.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties",
      "name": "security.filter-dispatcher-types",
      "description": "Security filter chain dispatcher types.",
      "type": "java.util.Set<java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties",
      "defaultValue": 0,
      "name": "security.filter-order",
      "description": "Security filter chain order.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$Headers",
      "defaultValue": true,
      "name": "security.headers.cache",
      "description": "Enable cache control HTTP headers.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$Headers",
      "name": "security.headers.content-security-policy",
      "description": "Value for content security policy header.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$Headers",
      "defaultValue": "default",
      "name": "security.headers.content-security-policy-mode",
      "description": "Content security policy mode.",
      "type": "org.springframework.boot.autoconfigure.security.SecurityProperties$Headers$ContentSecurityPolicyMode"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$Headers",
      "defaultValue": true,
      "name": "security.headers.content-type",
      "description": "Enable \"X-Content-Type-Options\" header.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$Headers",
      "defaultValue": true,
      "name": "security.headers.frame",
      "description": "Enable \"X-Frame-Options\" header.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$Headers",
      "defaultValue": "all",
      "name": "security.headers.hsts",
      "description": "HTTP Strict Transport Security (HSTS) mode (none, domain, all).",
      "type": "org.springframework.boot.autoconfigure.security.SecurityProperties$Headers$HSTS"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$Headers",
      "defaultValue": true,
      "name": "security.headers.xss",
      "description": "Enable cross site scripting (XSS) protection.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties",
      "name": "security.ignored",
      "description": "Comma-separated list of paths to exclude from the default secured paths.",
      "type": "java.util.List<java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.authserver.AuthorizationServerProperties",
      "name": "security.oauth2.authorization.check-token-access",
      "description": "Spring Security access rule for the check token endpoint (e.g. a SpEL expression like \"isAuthenticated()\") . Default is empty, which is interpreted as \"denyAll()\" (no access).",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.authserver.AuthorizationServerProperties",
      "name": "security.oauth2.authorization.realm",
      "description": "Realm name for client authentication. If an unauthenticated request comes in to the token endpoint, it will respond with a challenge including this name.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.authserver.AuthorizationServerProperties",
      "name": "security.oauth2.authorization.token-key-access",
      "description": "Spring Security access rule for the token key endpoint (e.g. a SpEL expression like \"isAuthenticated()\"). Default is empty, which is interpreted as \"denyAll()\" (no access).",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails",
      "name": "security.oauth2.client.access-token-uri",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails",
      "name": "security.oauth2.client.access-token-uri",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.security.oauth2.provider.client.BaseClientDetails",
      "name": "security.oauth2.client.access-token-validity-seconds",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.security.oauth2.provider.client.BaseClientDetails",
      "name": "security.oauth2.client.additional-information",
      "type": "java.util.Map<java.lang.String,java.lang.Object>"
    },
    {
      "sourceType": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails",
      "name": "security.oauth2.client.authentication-scheme",
      "type": "org.springframework.security.oauth2.common.AuthenticationScheme"
    },
    {
      "sourceType": "org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails",
      "name": "security.oauth2.client.authentication-scheme",
      "type": "org.springframework.security.oauth2.common.AuthenticationScheme"
    },
    {
      "sourceType": "org.springframework.security.oauth2.provider.client.BaseClientDetails",
      "name": "security.oauth2.client.authorities",
      "type": "java.util.Collection<org.springframework.security.core.GrantedAuthority>"
    },
    {
      "sourceType": "org.springframework.security.oauth2.provider.client.BaseClientDetails",
      "name": "security.oauth2.client.authorized-grant-types",
      "type": "java.util.Set<java.lang.String>"
    },
    {
      "sourceType": "org.springframework.security.oauth2.provider.client.BaseClientDetails",
      "name": "security.oauth2.client.auto-approve-scopes",
      "type": "java.util.Set<java.lang.String>"
    },
    {
      "sourceType": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails",
      "name": "security.oauth2.client.client-authentication-scheme",
      "type": "org.springframework.security.oauth2.common.AuthenticationScheme"
    },
    {
      "sourceType": "org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails",
      "name": "security.oauth2.client.client-authentication-scheme",
      "type": "org.springframework.security.oauth2.common.AuthenticationScheme"
    },
    {
      "sourceType": "org.springframework.security.oauth2.provider.client.BaseClientDetails",
      "name": "security.oauth2.client.client-id",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails",
      "name": "security.oauth2.client.client-id",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails",
      "name": "security.oauth2.client.client-id",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.OAuth2ClientProperties",
      "name": "security.oauth2.client.client-id",
      "description": "OAuth2 client id.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.security.oauth2.provider.client.BaseClientDetails",
      "name": "security.oauth2.client.client-secret",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails",
      "name": "security.oauth2.client.client-secret",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails",
      "name": "security.oauth2.client.client-secret",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.OAuth2ClientProperties",
      "name": "security.oauth2.client.client-secret",
      "description": "OAuth2 client secret. A random secret is generated by default.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails",
      "name": "security.oauth2.client.grant-type",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails",
      "name": "security.oauth2.client.grant-type",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails",
      "name": "security.oauth2.client.id",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails",
      "name": "security.oauth2.client.id",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails",
      "name": "security.oauth2.client.pre-established-redirect-uri",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.security.oauth2.provider.client.BaseClientDetails",
      "name": "security.oauth2.client.refresh-token-validity-seconds",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.security.oauth2.provider.client.BaseClientDetails",
      "name": "security.oauth2.client.registered-redirect-uri",
      "type": "java.util.Set<java.lang.String>"
    },
    {
      "sourceType": "org.springframework.security.oauth2.provider.client.BaseClientDetails",
      "name": "security.oauth2.client.resource-ids",
      "type": "java.util.Set<java.lang.String>"
    },
    {
      "sourceType": "org.springframework.security.oauth2.provider.client.BaseClientDetails",
      "name": "security.oauth2.client.scope",
      "type": "java.util.Set<java.lang.String>"
    },
    {
      "sourceType": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails",
      "name": "security.oauth2.client.scope",
      "type": "java.util.List<java.lang.String>"
    },
    {
      "sourceType": "org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails",
      "name": "security.oauth2.client.scope",
      "type": "java.util.List<java.lang.String>"
    },
    {
      "sourceType": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails",
      "name": "security.oauth2.client.token-name",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails",
      "name": "security.oauth2.client.token-name",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails",
      "name": "security.oauth2.client.use-current-uri",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails",
      "name": "security.oauth2.client.user-authorization-uri",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties",
      "defaultValue": 0,
      "name": "security.oauth2.resource.filter-order",
      "description": "The order of the filter chain used to authenticate tokens. Default puts it after the actuator endpoints and before the default HTTP basic filter chain (catchall).",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties",
      "name": "security.oauth2.resource.id",
      "description": "Identifier of the resource.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties$Jwk",
      "name": "security.oauth2.resource.jwk.key-set-uri",
      "description": "The URI to get verification keys to verify the JWT token. This can be set when the authorization server returns a set of verification keys.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties$Jwt",
      "name": "security.oauth2.resource.jwt.key-uri",
      "description": "The URI of the JWT token. Can be set if the value is not available and the key is public.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties$Jwt",
      "name": "security.oauth2.resource.jwt.key-value",
      "description": "The verification key of the JWT token. Can either be a symmetric secret or PEM-encoded RSA public key. If the value is not available, you can set the URI instead.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties",
      "defaultValue": true,
      "name": "security.oauth2.resource.prefer-token-info",
      "description": "Use the token info, can be set to false to use the user info.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties",
      "defaultValue": "resource",
      "name": "security.oauth2.resource.service-id",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties",
      "name": "security.oauth2.resource.token-info-uri",
      "description": "URI of the token decoding endpoint.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties",
      "name": "security.oauth2.resource.token-type",
      "description": "The token type to send when using the userInfoUri.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties",
      "name": "security.oauth2.resource.user-info-uri",
      "description": "URI of the user endpoint.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2SsoProperties",
      "name": "security.oauth2.sso.filter-order",
      "description": "Filter order to apply if not providing an explicit WebSecurityConfigurerAdapter (in which case the order can be provided there instead).",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2SsoProperties",
      "defaultValue": "\/login",
      "name": "security.oauth2.sso.login-path",
      "description": "Path to the login page, i.e. the one that triggers the redirect to the OAuth2 Authorization Server.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties",
      "defaultValue": false,
      "name": "security.require-ssl",
      "description": "Enable secure channel for all requests.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties",
      "defaultValue": "stateless",
      "name": "security.sessions",
      "description": "Session creation policy (always, never, if_required, stateless).",
      "type": "org.springframework.security.config.http.SessionCreationPolicy"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$User",
      "defaultValue": "user",
      "name": "security.user.name",
      "description": "Default user name.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$User",
      "name": "security.user.password",
      "description": "Password for the default user name.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.security.SecurityProperties$User",
      "name": "security.user.role",
      "description": "Granted roles for the default user name.",
      "type": "java.util.List<java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "name": "server.address",
      "description": "Network address to which the server should bind to.",
      "type": "java.net.InetAddress"
    },
    {
      "sourceType": "org.springframework.boot.context.embedded.Compression",
      "name": "server.compression.enabled",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.context.embedded.Compression",
      "name": "server.compression.excluded-user-agents",
      "type": "java.lang.String[]"
    },
    {
      "sourceType": "org.springframework.boot.context.embedded.Compression",
      "name": "server.compression.mime-types",
      "type": "java.lang.String[]"
    },
    {
      "sourceType": "org.springframework.boot.context.embedded.Compression",
      "name": "server.compression.min-response-size",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "name": "server.connection-timeout",
      "description": "Time in milliseconds that connectors will wait for another HTTP request before closing the connection. When not set, the connector's container-specific default will be used. Use a value of -1 to indicate no (i.e. infinite) timeout.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "name": "server.context-parameters",
      "description": "ServletContext parameters.",
      "type": "java.util.Map<java.lang.String,java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "name": "server.context-path",
      "description": "Context path of the application.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "defaultValue": "application",
      "name": "server.display-name",
      "description": "Display name of the application.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ErrorProperties",
      "defaultValue": "never",
      "name": "server.error.include-stacktrace",
      "description": "When to include a \"stacktrace\" attribute.",
      "type": "org.springframework.boot.autoconfigure.web.ErrorProperties$IncludeStacktrace"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ErrorProperties",
      "defaultValue": "\/error",
      "name": "server.error.path",
      "description": "Path of the error controller.",
      "type": "java.lang.String"
    },
    {
      "defaultValue": true,
      "name": "server.error.whitelabel.enabled",
      "description": "Enable the default error page displayed in browsers in case of a server error.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty",
      "defaultValue": -1,
      "name": "server.jetty.acceptors",
      "description": "Number of acceptor threads to use. When the value is -1, the default, the number of acceptors is derived from the operating environment.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty",
      "defaultValue": 200000,
      "name": "server.jetty.max-http-post-size",
      "description": "Maximum size in bytes of the HTTP post or put content.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Jetty",
      "defaultValue": -1,
      "name": "server.jetty.selectors",
      "description": "Number of selector threads to use. When the value is -1, the default, the number of selectors is derived from the operating environment.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.context.embedded.JspServlet",
      "name": "server.jsp-servlet.class-name",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.context.embedded.JspServlet",
      "name": "server.jsp-servlet.init-parameters",
      "type": "java.util.Map<java.lang.String,java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.context.embedded.JspServlet",
      "name": "server.jsp-servlet.registered",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "defaultValue": 0,
      "name": "server.max-http-header-size",
      "description": "Maximum size in bytes of the HTTP message header.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "defaultValue": 0,
      "deprecated": true,
      "name": "server.max-http-post-size",
      "description": "Maximum size in bytes of the HTTP post content.",
      "type": "java.lang.Integer",
      "deprecation": {
        "reason": "Use dedicated property for each container."
      }
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "name": "server.port",
      "description": "Server HTTP port.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "name": "server.server-header",
      "description": "Value to use for the Server response header (no header is sent if empty).",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "defaultValue": "\/",
      "name": "server.servlet-path",
      "description": "Path of the main dispatcher servlet.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Session$Cookie",
      "name": "server.session.cookie.comment",
      "description": "Comment for the session cookie.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Session$Cookie",
      "name": "server.session.cookie.domain",
      "description": "Domain for the session cookie.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Session$Cookie",
      "name": "server.session.cookie.http-only",
      "description": "\"HttpOnly\" flag for the session cookie.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Session$Cookie",
      "name": "server.session.cookie.max-age",
      "description": "Maximum age of the session cookie in seconds.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Session$Cookie",
      "name": "server.session.cookie.name",
      "description": "Session cookie name.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Session$Cookie",
      "name": "server.session.cookie.path",
      "description": "Path of the session cookie.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Session$Cookie",
      "name": "server.session.cookie.secure",
      "description": "\"Secure\" flag for the session cookie.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Session",
      "defaultValue": false,
      "name": "server.session.persistent",
      "description": "Persist session data between restarts.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Session",
      "name": "server.session.store-dir",
      "description": "Directory used to store session data.",
      "type": "java.io.File"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Session",
      "name": "server.session.timeout",
      "description": "Session timeout in seconds.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Session",
      "name": "server.session.tracking-modes",
      "description": "Session tracking modes (one or more of the following: \"cookie\", \"url\", \"ssl\").",
      "type": "java.util.Set<javax.servlet.SessionTrackingMode>"
    },
    {
      "sourceType": "org.springframework.boot.context.embedded.Ssl",
      "name": "server.ssl.ciphers",
      "type": "java.lang.String[]"
    },
    {
      "sourceType": "org.springframework.boot.context.embedded.Ssl",
      "name": "server.ssl.client-auth",
      "type": "org.springframework.boot.context.embedded.Ssl$ClientAuth"
    },
    {
      "sourceType": "org.springframework.boot.context.embedded.Ssl",
      "name": "server.ssl.enabled",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.context.embedded.Ssl",
      "name": "server.ssl.enabled-protocols",
      "type": "java.lang.String[]"
    },
    {
      "sourceType": "org.springframework.boot.context.embedded.Ssl",
      "name": "server.ssl.key-alias",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.context.embedded.Ssl",
      "name": "server.ssl.key-password",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.context.embedded.Ssl",
      "name": "server.ssl.key-store",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.context.embedded.Ssl",
      "name": "server.ssl.key-store-password",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.context.embedded.Ssl",
      "name": "server.ssl.key-store-provider",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.context.embedded.Ssl",
      "name": "server.ssl.key-store-type",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.context.embedded.Ssl",
      "name": "server.ssl.protocol",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.context.embedded.Ssl",
      "name": "server.ssl.trust-store",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.context.embedded.Ssl",
      "name": "server.ssl.trust-store-password",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.context.embedded.Ssl",
      "name": "server.ssl.trust-store-provider",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.context.embedded.Ssl",
      "name": "server.ssl.trust-store-type",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": 100,
      "name": "server.tomcat.accept-count",
      "description": "Maximum queue length for incoming connection requests when all possible request processing threads are in use.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": true,
      "name": "server.tomcat.accesslog.buffered",
      "description": "Buffer output such that it is only flushed periodically.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": "logs",
      "name": "server.tomcat.accesslog.directory",
      "description": "Directory in which log files are created. Can be relative to the tomcat base dir or absolute.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": false,
      "name": "server.tomcat.accesslog.enabled",
      "description": "Enable access log.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": ".yyyy-MM-dd",
      "name": "server.tomcat.accesslog.file-date-format",
      "description": "Date format to place in log file name.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": "common",
      "name": "server.tomcat.accesslog.pattern",
      "description": "Format pattern for access logs.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": "access_log",
      "name": "server.tomcat.accesslog.prefix",
      "description": "Log file name prefix.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": false,
      "name": "server.tomcat.accesslog.rename-on-rotate",
      "description": "Defer inclusion of the date stamp in the file name until rotate time.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": false,
      "name": "server.tomcat.accesslog.request-attributes-enabled",
      "description": "Set request attributes for IP address, Hostname, protocol and port used for the request.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": true,
      "name": "server.tomcat.accesslog.rotate",
      "description": "Enable access log rotation.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat$Accesslog",
      "defaultValue": ".log",
      "name": "server.tomcat.accesslog.suffix",
      "description": "Log file name suffix.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "name": "server.tomcat.additional-tld-skip-patterns",
      "description": "Comma-separated list of additional patterns that match jars to ignore for TLD scanning. The special '?' and '*' characters can be used in the pattern to match one and only one character and zero or more characters respectively.",
      "type": "java.util.List<java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": 10,
      "name": "server.tomcat.background-processor-delay",
      "description": "Delay in seconds between the invocation of backgroundProcess methods.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "name": "server.tomcat.basedir",
      "description": "Tomcat base directory. If not specified a temporary directory will be used.",
      "type": "java.io.File"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": "10\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|192\\.168\\.\\d{1,3}\\.\\d{1,3}|169\\.254\\.\\d{1,3}\\.\\d{1,3}|127\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|172\\.1[6-9]{1}\\.\\d{1,3}\\.\\d{1,3}|172\\.2[0-9]{1}\\.\\d{1,3}\\.\\d{1,3}|172\\.3[0-1]{1}\\.\\d{1,3}\\.\\d{1,3}|0:0:0:0:0:0:0:1|::1",
      "name": "server.tomcat.internal-proxies",
      "description": "Regular expression that matches proxies that are to be trusted.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": 10000,
      "name": "server.tomcat.max-connections",
      "description": "Maximum number of connections that the server will accept and process at any given time. Once the limit has been reached, the operating system may still accept connections based on the \"acceptCount\" property.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": 2097152,
      "name": "server.tomcat.max-http-post-size",
      "description": "Maximum size in bytes of the HTTP post content.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": 200,
      "name": "server.tomcat.max-threads",
      "description": "Maximum amount of worker threads.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": 10,
      "name": "server.tomcat.min-spare-threads",
      "description": "Minimum amount of worker threads.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": "X-Forwarded-Port",
      "name": "server.tomcat.port-header",
      "description": "Name of the HTTP header used to override the original port value.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "name": "server.tomcat.protocol-header",
      "description": "Header that holds the incoming protocol, usually named \"X-Forwarded-Proto\".",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": "https",
      "name": "server.tomcat.protocol-header-https-value",
      "description": "Value of the protocol header that indicates that the incoming request uses SSL.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": true,
      "name": "server.tomcat.redirect-context-root",
      "description": "Whether requests to the context root should be redirected by appending a \/ to the path.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "name": "server.tomcat.remote-ip-header",
      "description": "Name of the http header from which the remote ip is extracted..",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Tomcat",
      "defaultValue": "UTF-8",
      "name": "server.tomcat.uri-encoding",
      "description": "Character encoding to use to decode the URI.",
      "type": "java.nio.charset.Charset"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow$Accesslog",
      "name": "server.undertow.accesslog.dir",
      "description": "Undertow access log directory.",
      "type": "java.io.File"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow$Accesslog",
      "name": "server.undertow.accesslog.enabled",
      "description": "Enable access log.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow$Accesslog",
      "defaultValue": "common",
      "name": "server.undertow.accesslog.pattern",
      "description": "Format pattern for access logs.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow$Accesslog",
      "defaultValue": "access_log.",
      "name": "server.undertow.accesslog.prefix",
      "description": "Log file name prefix.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow$Accesslog",
      "defaultValue": true,
      "name": "server.undertow.accesslog.rotate",
      "description": "Enable access log rotation.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow$Accesslog",
      "defaultValue": "log",
      "name": "server.undertow.accesslog.suffix",
      "description": "Log file name suffix.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow",
      "name": "server.undertow.buffer-size",
      "description": "Size of each buffer in bytes. The default is derived from the maximum amount of memory that is available to the JVM.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow",
      "deprecated": true,
      "name": "server.undertow.buffers-per-region",
      "description": "Number of buffer per region.",
      "type": "java.lang.Integer",
      "deprecation": {
        "reason": "The property is not used by Undertow. See https:\/\/issues.jboss.org\/browse\/UNDERTOW-587 for details"
      }
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow",
      "name": "server.undertow.direct-buffers",
      "description": "Allocate buffers outside the Java heap. The default is derived from the maximum amount of memory that is available to the JVM.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow",
      "name": "server.undertow.io-threads",
      "description": "Number of I\/O threads to create for the worker. The default is derived from the number of available processors.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow",
      "defaultValue": -1,
      "name": "server.undertow.max-http-post-size",
      "description": "Maximum size in bytes of the HTTP post content. When the value is -1, the default, the size is unlimited.",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties$Undertow",
      "name": "server.undertow.worker-threads",
      "description": "Number of worker threads. The default is 8 times the number of I\/O threads.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ServerProperties",
      "name": "server.use-forward-headers",
      "description": "If X-Forwarded-* headers should be applied to the HttpRequest.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties",
      "name": "spring.activemq.broker-url",
      "description": "URL of the ActiveMQ broker. Auto-generated by default.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties",
      "defaultValue": 15000,
      "name": "spring.activemq.close-timeout",
      "description": "Time to wait, in milliseconds, before considering a close complete.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties",
      "defaultValue": true,
      "name": "spring.activemq.in-memory",
      "description": "Specify if the default broker URL should be in memory. Ignored if an explicit broker has been specified.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties",
      "defaultValue": false,
      "name": "spring.activemq.non-blocking-redelivery",
      "description": "Do not stop message delivery before re-delivering messages from a rolled back transaction. This implies that message order will not be preserved when this is enabled.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Packages",
      "name": "spring.activemq.packages.trust-all",
      "description": "Trust all packages.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Packages",
      "name": "spring.activemq.packages.trusted",
      "description": "Comma-separated list of specific packages to trust (when not trusting all packages).",
      "type": "java.util.List<java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties",
      "name": "spring.activemq.password",
      "description": "Login password of the broker.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "defaultValue": true,
      "name": "spring.activemq.pool.block-if-full",
      "description": "Block when a connection is requested and the pool is full. Set it to false to throw a \"JMSException\" instead.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "defaultValue": -1,
      "name": "spring.activemq.pool.block-if-full-timeout",
      "description": "Blocking period, in milliseconds, before throwing an exception if the pool is still full.",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "org.apache.activemq.pool.PooledConnectionFactory",
      "deprecated": true,
      "name": "spring.activemq.pool.configuration.block-if-session-pool-is-full",
      "type": "java.lang.Boolean",
      "deprecation": {
        "replacement": "spring.activemq.pool.block-if-full"
      }
    },
    {
      "sourceType": "org.apache.activemq.pool.PooledConnectionFactory",
      "deprecated": true,
      "name": "spring.activemq.pool.configuration.block-if-session-pool-is-full-timeout",
      "type": "java.lang.Long",
      "deprecation": {
        "replacement": "spring.activemq.pool.block-if-full-timeout"
      }
    },
    {
      "sourceType": "org.apache.activemq.pool.PooledConnectionFactory",
      "deprecated": true,
      "name": "spring.activemq.pool.configuration.connection-factory",
      "type": "java.lang.Object",
      "deprecation": {
        "reason": "This third party property cannot be set via the Environment."
      }
    },
    {
      "sourceType": "org.apache.activemq.pool.PooledConnectionFactory",
      "deprecated": true,
      "name": "spring.activemq.pool.configuration.create-connection-on-startup",
      "type": "java.lang.Boolean",
      "deprecation": {
        "replacement": "spring.activemq.pool.create-connection-on-startup"
      }
    },
    {
      "sourceType": "org.apache.activemq.pool.PooledConnectionFactory",
      "deprecated": true,
      "name": "spring.activemq.pool.configuration.expiry-timeout",
      "type": "java.lang.Long",
      "deprecation": {
        "replacement": "spring.activemq.pool.expiry-timeout"
      }
    },
    {
      "sourceType": "org.apache.activemq.pool.PooledConnectionFactory",
      "deprecated": true,
      "name": "spring.activemq.pool.configuration.idle-timeout",
      "type": "java.lang.Integer",
      "deprecation": {
        "replacement": "spring.activemq.pool.idle-timeout"
      }
    },
    {
      "sourceType": "org.apache.activemq.pool.PooledConnectionFactory",
      "deprecated": true,
      "name": "spring.activemq.pool.configuration.max-connections",
      "type": "java.lang.Integer",
      "deprecation": {
        "replacement": "spring.activemq.pool.max-connections"
      }
    },
    {
      "sourceType": "org.apache.activemq.pool.PooledConnectionFactory",
      "deprecated": true,
      "name": "spring.activemq.pool.configuration.maximum-active-session-per-connection",
      "type": "java.lang.Integer",
      "deprecation": {
        "replacement": "spring.activemq.pool.maximum-active-session-per-connection"
      }
    },
    {
      "sourceType": "org.apache.activemq.pool.PooledConnectionFactory",
      "deprecated": true,
      "name": "spring.activemq.pool.configuration.properties",
      "type": "java.util.Properties",
      "deprecation": {
        "reason": "This third party property cannot be set via the Environment."
      }
    },
    {
      "sourceType": "org.apache.activemq.pool.PooledConnectionFactory",
      "deprecated": true,
      "name": "spring.activemq.pool.configuration.reconnect-on-exception",
      "type": "java.lang.Boolean",
      "deprecation": {
        "replacement": "spring.activemq.pool.reconnect-on-exception"
      }
    },
    {
      "sourceType": "org.apache.activemq.pool.PooledConnectionFactory",
      "deprecated": true,
      "name": "spring.activemq.pool.configuration.time-between-expiration-check-millis",
      "type": "java.lang.Long",
      "deprecation": {
        "replacement": "spring.activemq.pool.time-between-expiration-check"
      }
    },
    {
      "sourceType": "org.apache.activemq.pool.PooledConnectionFactory",
      "deprecated": true,
      "name": "spring.activemq.pool.configuration.use-anonymous-producers",
      "type": "java.lang.Boolean",
      "deprecation": {
        "replacement": "spring.activemq.pool.use-anonymous-producers"
      }
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "defaultValue": true,
      "name": "spring.activemq.pool.create-connection-on-startup",
      "description": "Create a connection on startup. Can be used to warm-up the pool on startup.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "defaultValue": false,
      "name": "spring.activemq.pool.enabled",
      "description": "Whether a PooledConnectionFactory should be created instead of a regular ConnectionFactory.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "defaultValue": 0,
      "name": "spring.activemq.pool.expiry-timeout",
      "description": "Connection expiration timeout in milliseconds.",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "defaultValue": 30000,
      "name": "spring.activemq.pool.idle-timeout",
      "description": "Connection idle timeout in milliseconds.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "defaultValue": 1,
      "name": "spring.activemq.pool.max-connections",
      "description": "Maximum number of pooled connections.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "defaultValue": 500,
      "name": "spring.activemq.pool.maximum-active-session-per-connection",
      "description": "Maximum number of active sessions per connection.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "defaultValue": true,
      "name": "spring.activemq.pool.reconnect-on-exception",
      "description": "Reset the connection when a \"JMXException\" occurs.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "defaultValue": -1,
      "name": "spring.activemq.pool.time-between-expiration-check",
      "description": "Time to sleep, in milliseconds, between runs of the idle connection eviction thread. When negative, no idle connection eviction thread runs.",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties$Pool",
      "defaultValue": true,
      "name": "spring.activemq.pool.use-anonymous-producers",
      "description": "Use only one anonymous \"MessageProducer\" instance. Set it to false to create one \"MessageProducer\" every time one is required.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties",
      "defaultValue": 0,
      "name": "spring.activemq.send-timeout",
      "description": "Time to wait, in milliseconds, on Message sends for a response. Set it to 0 to indicate to wait forever.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.activemq.ActiveMQProperties",
      "name": "spring.activemq.user",
      "description": "Login user of the broker.",
      "type": "java.lang.String"
    },
    {
      "defaultValue": true,
      "name": "spring.aop.auto",
      "description": "Add @EnableAspectJAutoProxy.",
      "type": "java.lang.Boolean"
    },
    {
      "name": "spring.aop.proxy-target-class",
      "description": "Whether subclass-based (CGLIB) proxies are to be created (true) as opposed to standard Java interface-based proxies (false). Defaults to \"true\" when using Spring Transaction Management, otherwise \"false\".",
      "type": "java.lang.Boolean"
    },
    {
      "defaultValue": false,
      "name": "spring.application.admin.enabled",
      "description": "Enable admin features for the application.",
      "type": "java.lang.Boolean"
    },
    {
      "defaultValue": "org.springframework.boot:type=Admin,name=SpringApplication",
      "name": "spring.application.admin.jmx-name",
      "description": "JMX name of the application admin MBean.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties$Embedded",
      "name": "spring.artemis.embedded.cluster-password",
      "description": "Cluster password. Randomly generated on startup by default.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties$Embedded",
      "name": "spring.artemis.embedded.data-directory",
      "description": "Journal file directory. Not necessary if persistence is turned off.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties$Embedded",
      "defaultValue": true,
      "name": "spring.artemis.embedded.enabled",
      "description": "Enable embedded mode if the Artemis server APIs are available.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties$Embedded",
      "defaultValue": false,
      "name": "spring.artemis.embedded.persistent",
      "description": "Enable persistent store.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties$Embedded",
      "defaultValue": [],
      "name": "spring.artemis.embedded.queues",
      "description": "Comma-separated list of queues to create on startup.",
      "type": "java.lang.String[]"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties$Embedded",
      "defaultValue": 0,
      "name": "spring.artemis.embedded.server-id",
      "description": "Server id. By default, an auto-incremented counter is used.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties$Embedded",
      "defaultValue": [],
      "name": "spring.artemis.embedded.topics",
      "description": "Comma-separated list of topics to create on startup.",
      "type": "java.lang.String[]"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties",
      "defaultValue": "localhost",
      "name": "spring.artemis.host",
      "description": "Artemis broker host.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties",
      "name": "spring.artemis.mode",
      "description": "Artemis deployment mode, auto-detected by default.",
      "type": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisMode"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties",
      "name": "spring.artemis.password",
      "description": "Login password of the broker.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties",
      "defaultValue": 61616,
      "name": "spring.artemis.port",
      "description": "Artemis broker port.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.artemis.ArtemisProperties",
      "name": "spring.artemis.user",
      "description": "Login user of the broker.",
      "type": "java.lang.String"
    },
    {
      "name": "spring.autoconfigure.exclude",
      "description": "Auto-configuration classes to exclude.",
      "type": "java.util.List<java.lang.Class>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.batch.BatchProperties$Initializer",
      "name": "spring.batch.initializer.enabled",
      "description": "Create the required batch tables on startup if necessary. Enabled automatically if no custom table prefix is set or if a custom schema is configured.",
      "type": "java.lang.Boolean"
    },
    {
      "defaultValue": true,
      "name": "spring.batch.job.enabled",
      "description": "Execute all Spring Batch jobs in the context on startup.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.batch.BatchProperties$Job",
      "defaultValue": "",
      "name": "spring.batch.job.names",
      "description": "Comma-separated list of job names to execute on startup. By default, all Jobs found in the context are executed.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.batch.BatchProperties",
      "defaultValue": "classpath:org\/springframework\/batch\/core\/schema-@@platform@@.sql",
      "name": "spring.batch.schema",
      "description": "Path to the SQL file to use to initialize the database schema.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.batch.BatchProperties",
      "name": "spring.batch.table-prefix",
      "description": "Table prefix for all the batch meta-data tables.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties",
      "name": "spring.cache.cache-names",
      "description": "Comma-separated list of cache names to create if supported by the underlying cache manager. Usually, this disables the ability to create additional caches on-the-fly.",
      "type": "java.util.List<java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$Caffeine",
      "name": "spring.cache.caffeine.spec",
      "description": "The spec to use to create caches. Check CaffeineSpec for more details on the spec format.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$Couchbase",
      "defaultValue": 0,
      "name": "spring.cache.couchbase.expiration",
      "description": "Entry expiration in milliseconds. By default the entries never expire. Note that this value is ultimately converted to seconds.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$EhCache",
      "name": "spring.cache.ehcache.config",
      "description": "The location of the configuration file to use to initialize EhCache.",
      "type": "org.springframework.core.io.Resource"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$Guava",
      "deprecated": true,
      "name": "spring.cache.guava.spec",
      "description": "The spec to use to create caches. Check CacheBuilderSpec for more details on the spec format.",
      "type": "java.lang.String",
      "deprecation": {
        "reason": "Caffeine will supersede the Guava support in Spring Boot 2.0",
        "replacement": "spring.cache.caffeine.spec"
      }
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$Hazelcast",
      "deprecated": true,
      "name": "spring.cache.hazelcast.config",
      "description": "The location of the configuration file to use to initialize Hazelcast.",
      "type": "org.springframework.core.io.Resource",
      "deprecation": {
        "reason": "Use general hazelcast auto-configuration instead.",
        "replacement": "spring.hazelcast.config"
      }
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$Infinispan",
      "name": "spring.cache.infinispan.config",
      "description": "The location of the configuration file to use to initialize Infinispan.",
      "type": "org.springframework.core.io.Resource"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$JCache",
      "name": "spring.cache.jcache.config",
      "description": "The location of the configuration file to use to initialize the cache manager. The configuration file is dependent of the underlying cache implementation.",
      "type": "org.springframework.core.io.Resource"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties$JCache",
      "name": "spring.cache.jcache.provider",
      "description": "Fully qualified name of the CachingProvider implementation to use to retrieve the JSR-107 compliant cache manager. Only needed if more than one JSR-107 implementation is available on the classpath.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cache.CacheProperties",
      "name": "spring.cache.type",
      "description": "Cache type, auto-detected according to the environment by default.",
      "type": "org.springframework.boot.autoconfigure.cache.CacheType"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties",
      "name": "spring.couchbase.bootstrap-hosts",
      "description": "Couchbase nodes (host or IP address) to bootstrap from.",
      "type": "java.util.List<java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Bucket",
      "defaultValue": "default",
      "name": "spring.couchbase.bucket.name",
      "description": "Name of the bucket to connect to.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Bucket",
      "defaultValue": "",
      "name": "spring.couchbase.bucket.password",
      "description": "Password of the bucket.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Endpoints",
      "defaultValue": 1,
      "name": "spring.couchbase.env.endpoints.key-value",
      "description": "Number of sockets per node against the key\/value service.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Endpoints",
      "defaultValue": 1,
      "name": "spring.couchbase.env.endpoints.query",
      "description": "Number of sockets per node against the query (N1QL) service.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Endpoints",
      "defaultValue": 1,
      "name": "spring.couchbase.env.endpoints.view",
      "description": "Number of sockets per node against the view service.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Ssl",
      "name": "spring.couchbase.env.ssl.enabled",
      "description": "Enable SSL support. Enabled automatically if a \"keyStore\" is provided unless specified otherwise.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Ssl",
      "name": "spring.couchbase.env.ssl.key-store",
      "description": "Path to the JVM key store that holds the certificates.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Ssl",
      "name": "spring.couchbase.env.ssl.key-store-password",
      "description": "Password used to access the key store.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Timeouts",
      "defaultValue": 5000,
      "name": "spring.couchbase.env.timeouts.connect",
      "description": "Bucket connections timeout in milliseconds.",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Timeouts",
      "defaultValue": 2500,
      "name": "spring.couchbase.env.timeouts.key-value",
      "description": "Blocking operations performed on a specific key timeout in milliseconds.",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Timeouts",
      "defaultValue": 7500,
      "name": "spring.couchbase.env.timeouts.query",
      "description": "N1QL query operations timeout in milliseconds.",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Timeouts",
      "defaultValue": 1000,
      "name": "spring.couchbase.env.timeouts.socket-connect",
      "description": "Socket connect connections timeout in milliseconds.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.couchbase.CouchbaseProperties$Timeouts",
      "defaultValue": 7500,
      "name": "spring.couchbase.env.timeouts.view",
      "description": "Regular and geospatial view operations timeout in milliseconds.",
      "type": "java.lang.Long"
    },
    {
      "defaultValue": true,
      "name": "spring.dao.exceptiontranslation.enabled",
      "description": "Enable the PersistenceExceptionTranslationPostProcessor.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "name": "spring.data.cassandra.cluster-name",
      "description": "Name of the Cassandra cluster.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "defaultValue": "none",
      "name": "spring.data.cassandra.compression",
      "description": "Compression supported by the Cassandra binary protocol.",
      "type": "com.datastax.driver.core.ProtocolOptions$Compression"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "name": "spring.data.cassandra.connect-timeout-millis",
      "description": "Socket option: connection time out.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "name": "spring.data.cassandra.consistency-level",
      "description": "Queries consistency level.",
      "type": "com.datastax.driver.core.ConsistencyLevel"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "defaultValue": "localhost",
      "name": "spring.data.cassandra.contact-points",
      "description": "Comma-separated list of cluster node addresses.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "name": "spring.data.cassandra.fetch-size",
      "description": "Queries default fetch size.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "name": "spring.data.cassandra.keyspace-name",
      "description": "Keyspace name to use.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "name": "spring.data.cassandra.load-balancing-policy",
      "description": "Class name of the load balancing policy. The class must have a default constructor.",
      "type": "java.lang.Class<? extends com.datastax.driver.core.policies.LoadBalancingPolicy>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "name": "spring.data.cassandra.password",
      "description": "Login password of the server.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "name": "spring.data.cassandra.port",
      "description": "Port of the Cassandra server.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "name": "spring.data.cassandra.read-timeout-millis",
      "description": "Socket option: read time out.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "name": "spring.data.cassandra.reconnection-policy",
      "description": "Class name of the reconnection policy. The class must have a default constructor.",
      "type": "java.lang.Class<? extends com.datastax.driver.core.policies.ReconnectionPolicy>"
    },
    {
      "defaultValue": true,
      "name": "spring.data.cassandra.repositories.enabled",
      "description": "Enable Cassandra repositories.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "name": "spring.data.cassandra.retry-policy",
      "description": "Class name of the retry policy. The class must have a default constructor.",
      "type": "java.lang.Class<? extends com.datastax.driver.core.policies.RetryPolicy>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "defaultValue": "none",
      "name": "spring.data.cassandra.schema-action",
      "description": "Schema action to take at startup.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "name": "spring.data.cassandra.serial-consistency-level",
      "description": "Queries serial consistency level.",
      "type": "com.datastax.driver.core.ConsistencyLevel"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "defaultValue": false,
      "name": "spring.data.cassandra.ssl",
      "description": "Enable SSL support.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.cassandra.CassandraProperties",
      "name": "spring.data.cassandra.username",
      "description": "Login user of the server.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataProperties",
      "defaultValue": false,
      "name": "spring.data.couchbase.auto-index",
      "description": "Automatically create views and indexes. Use the meta-data provided by \"@ViewIndexed\", \"@N1qlPrimaryIndexed\" and \"@N1qlSecondaryIndexed\".",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataProperties",
      "defaultValue": "read-your-own-writes",
      "name": "spring.data.couchbase.consistency",
      "description": "Consistency to apply by default on generated queries.",
      "type": "org.springframework.data.couchbase.core.query.Consistency"
    },
    {
      "defaultValue": true,
      "name": "spring.data.couchbase.repositories.enabled",
      "description": "Enable Couchbase repositories.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchProperties",
      "defaultValue": "elasticsearch",
      "name": "spring.data.elasticsearch.cluster-name",
      "description": "Elasticsearch cluster name.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchProperties",
      "name": "spring.data.elasticsearch.cluster-nodes",
      "description": "Comma-separated list of cluster node addresses. If not specified, starts a client node.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchProperties",
      "name": "spring.data.elasticsearch.properties",
      "description": "Additional properties used to configure the client.",
      "type": "java.util.Map<java.lang.String,java.lang.String>"
    },
    {
      "defaultValue": true,
      "name": "spring.data.elasticsearch.repositories.enabled",
      "description": "Enable Elasticsearch repositories.",
      "type": "java.lang.Boolean"
    },
    {
      "defaultValue": true,
      "name": "spring.data.jpa.repositories.enabled",
      "description": "Enable JPA repositories.",
      "type": "java.lang.Boolean"
    },
    {
      "defaultValue": true,
      "name": "spring.data.ldap.repositories.enabled",
      "description": "Enable LDAP repositories.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties",
      "name": "spring.data.mongodb.authentication-database",
      "description": "Authentication database name.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties",
      "name": "spring.data.mongodb.database",
      "description": "Database name.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties",
      "name": "spring.data.mongodb.field-naming-strategy",
      "description": "Fully qualified name of the FieldNamingStrategy to use.",
      "type": "java.lang.Class<?>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties",
      "name": "spring.data.mongodb.grid-fs-database",
      "description": "GridFS database name.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties",
      "name": "spring.data.mongodb.host",
      "description": "Mongo server host. Cannot be set with uri.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties",
      "name": "spring.data.mongodb.password",
      "description": "Login password of the mongo server. Cannot be set with uri.",
      "type": "java.lang.Character[]"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties",
      "name": "spring.data.mongodb.port",
      "description": "Mongo server port. Cannot be set with uri.",
      "type": "java.lang.Integer"
    },
    {
      "defaultValue": true,
      "name": "spring.data.mongodb.repositories.enabled",
      "description": "Enable Mongo repositories.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties",
      "name": "spring.data.mongodb.uri",
      "description": "Mongo database URI. Cannot be set with host, port and credentials.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mongo.MongoProperties",
      "name": "spring.data.mongodb.username",
      "description": "Login user of the mongo server. Cannot be set with uri.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties",
      "name": "spring.data.neo4j.compiler",
      "description": "Compiler to use.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties$Embedded",
      "defaultValue": true,
      "name": "spring.data.neo4j.embedded.enabled",
      "description": "Enable embedded mode if the embedded driver is available.",
      "type": "java.lang.Boolean"
    },
    {
      "defaultValue": true,
      "name": "spring.data.neo4j.open-in-view",
      "description": "Register OpenSessionInViewInterceptor. Binds a Neo4j Session to the thread for the entire processing of the request.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties",
      "name": "spring.data.neo4j.password",
      "description": "Login password of the server.",
      "type": "java.lang.String"
    },
    {
      "defaultValue": true,
      "name": "spring.data.neo4j.repositories.enabled",
      "description": "Enable Neo4j repositories.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties",
      "name": "spring.data.neo4j.uri",
      "description": "URI used by the driver. Auto-detected by default.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties",
      "name": "spring.data.neo4j.username",
      "description": "Login user of the server.",
      "type": "java.lang.String"
    },
    {
      "defaultValue": true,
      "name": "spring.data.redis.repositories.enabled",
      "description": "Enable Redis repositories.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties",
      "name": "spring.data.rest.base-path",
      "description": "Base path to be used by Spring Data REST to expose repository resources.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties",
      "name": "spring.data.rest.default-media-type",
      "description": "Content type to use as a default when none is specified.",
      "type": "org.springframework.http.MediaType"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties",
      "name": "spring.data.rest.default-page-size",
      "description": "Default size of pages.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties",
      "defaultValue": "default",
      "name": "spring.data.rest.detection-strategy",
      "description": "Strategy to use to determine which repositories get exposed.",
      "type": "org.springframework.data.rest.core.mapping.RepositoryDetectionStrategy$RepositoryDetectionStrategies"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties",
      "name": "spring.data.rest.enable-enum-translation",
      "description": "Enable enum value translation via the Spring Data REST default resource bundle. Will use the fully qualified enum name as key.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties",
      "name": "spring.data.rest.limit-param-name",
      "description": "Name of the URL query string parameter that indicates how many results to return at once.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties",
      "name": "spring.data.rest.max-page-size",
      "description": "Maximum size of pages.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties",
      "name": "spring.data.rest.page-param-name",
      "description": "Name of the URL query string parameter that indicates what page to return.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties",
      "name": "spring.data.rest.return-body-on-create",
      "description": "Return a response body after creating an entity.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties",
      "name": "spring.data.rest.return-body-on-update",
      "description": "Return a response body after updating an entity.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.rest.RepositoryRestProperties",
      "name": "spring.data.rest.sort-param-name",
      "description": "Name of the URL query string parameter that indicates what direction to sort results.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.solr.SolrProperties",
      "defaultValue": "http:\/\/127.0.0.1:8983\/solr",
      "name": "spring.data.solr.host",
      "description": "Solr host. Ignored if \"zk-host\" is set.",
      "type": "java.lang.String"
    },
    {
      "defaultValue": true,
      "name": "spring.data.solr.repositories.enabled",
      "description": "Enable Solr repositories.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.solr.SolrProperties",
      "name": "spring.data.solr.zk-host",
      "description": "ZooKeeper host address in the form HOST:PORT.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "defaultValue": false,
      "name": "spring.datasource.continue-on-error",
      "description": "Do not stop if an error occurs while initializing the database.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "name": "spring.datasource.data",
      "description": "Data (DML) script resource references.",
      "type": "java.util.List<java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "name": "spring.datasource.data-password",
      "description": "Password of the database to execute DML scripts.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "name": "spring.datasource.data-username",
      "description": "User of the database to execute DML scripts.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "name": "spring.datasource.dbcp.access-to-underlying-connection-allowed",
      "type": "java.lang.Boolean",
      "deprecation": {}
    },
    {
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "name": "spring.datasource.dbcp.connection-init-sqls",
      "type": "java.util.Collection",
      "deprecation": {}
    },
    {
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "name": "spring.datasource.dbcp.default-auto-commit",
      "type": "java.lang.Boolean",
      "deprecation": {}
    },
    {
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "name": "spring.datasource.dbcp.default-catalog",
      "type": "java.lang.String",
      "deprecation": {}
    },
    {
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "name": "spring.datasource.dbcp.default-read-only",
      "type": "java.lang.Boolean",
      "deprecation": {}
    },
    {
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "name": "spring.datasource.dbcp.default-transaction-isolation",
      "type": "java.lang.Integer",
      "deprecation": {}
    },
    {
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "name": "spring.datasource.dbcp.driver-class-name",
      "type": "java.lang.String",
      "deprecation": {}
    },
    {
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "name": "spring.datasource.dbcp.initial-size",
      "type": "java.lang.Integer",
      "deprecation": {}
    },
    {
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "name": "spring.datasource.dbcp.log-abandoned",
      "type": "java.lang.Boolean",
      "deprecation": {}
    },
    {
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "name": "spring.datasource.dbcp.login-timeout",
      "type": "java.lang.Integer",
      "deprecation": {}
    },
    {
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "name": "spring.datasource.dbcp.max-active",
      "type": "java.lang.Integer",
      "deprecation": {}
    },
    {
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "name": "spring.datasource.dbcp.max-idle",
      "type": "java.lang.Integer",
      "deprecation": {}
    },
    {
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "name": "spring.datasource.dbcp.max-open-prepared-statements",
      "type": "java.lang.Integer",
      "deprecation": {}
    },
    {
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "name": "spring.datasource.dbcp.max-wait",
      "type": "java.lang.Long",
      "deprecation": {}
    },
    {
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "name": "spring.datasource.dbcp.min-evictable-idle-time-millis",
      "type": "java.lang.Long",
      "deprecation": {}
    },
    {
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "name": "spring.datasource.dbcp.min-idle",
      "type": "java.lang.Integer",
      "deprecation": {}
    },
    {
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "name": "spring.datasource.dbcp.num-tests-per-eviction-run",
      "type": "java.lang.Integer",
      "deprecation": {}
    },
    {
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "name": "spring.datasource.dbcp.password",
      "type": "java.lang.String",
      "deprecation": {}
    },
    {
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "name": "spring.datasource.dbcp.pool-prepared-statements",
      "type": "java.lang.Boolean",
      "deprecation": {}
    },
    {
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "name": "spring.datasource.dbcp.remove-abandoned",
      "type": "java.lang.Boolean",
      "deprecation": {}
    },
    {
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "name": "spring.datasource.dbcp.remove-abandoned-timeout",
      "type": "java.lang.Integer",
      "deprecation": {}
    },
    {
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "name": "spring.datasource.dbcp.test-on-borrow",
      "type": "java.lang.Boolean",
      "deprecation": {}
    },
    {
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "name": "spring.datasource.dbcp.test-on-return",
      "type": "java.lang.Boolean",
      "deprecation": {}
    },
    {
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "name": "spring.datasource.dbcp.test-while-idle",
      "type": "java.lang.Boolean",
      "deprecation": {}
    },
    {
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "name": "spring.datasource.dbcp.time-between-eviction-runs-millis",
      "type": "java.lang.Long",
      "deprecation": {}
    },
    {
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "name": "spring.datasource.dbcp.url",
      "type": "java.lang.String",
      "deprecation": {}
    },
    {
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "name": "spring.datasource.dbcp.username",
      "type": "java.lang.String",
      "deprecation": {}
    },
    {
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "name": "spring.datasource.dbcp.validation-query",
      "type": "java.lang.String",
      "deprecation": {}
    },
    {
      "sourceType": "org.apache.commons.dbcp.BasicDataSource",
      "deprecated": true,
      "name": "spring.datasource.dbcp.validation-query-timeout",
      "type": "java.lang.Integer",
      "deprecation": {}
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.abandoned-usage-tracking",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.access-to-underlying-connection-allowed",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.cache-state",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.connection-init-sqls",
      "type": "java.util.List<java.lang.String>"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.default-auto-commit",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.default-catalog",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.default-query-timeout",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.default-read-only",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.default-transaction-isolation",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.disconnection-sql-codes",
      "type": "java.util.Set<java.lang.String>"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.driver",
      "type": "java.sql.Driver"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.driver-class-name",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.enable-auto-commit-on-return",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.eviction-policy-class-name",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.fast-fail-validation",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.initial-size",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.jmx-name",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.lifo",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.log-abandoned",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.log-expired-connections",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.login-timeout",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.max-conn-lifetime-millis",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.max-idle",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.max-open-prepared-statements",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.max-total",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.max-wait-millis",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.min-evictable-idle-time-millis",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.min-idle",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.num-tests-per-eviction-run",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.password",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.pool-prepared-statements",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.remove-abandoned-on-borrow",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.remove-abandoned-on-maintenance",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.remove-abandoned-timeout",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.rollback-on-return",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.soft-min-evictable-idle-time-millis",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.test-on-borrow",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.test-on-create",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.test-on-return",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.test-while-idle",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.time-between-eviction-runs-millis",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.url",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.username",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.validation-query",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.apache.commons.dbcp2.BasicDataSource",
      "name": "spring.datasource.dbcp2.validation-query-timeout",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "name": "spring.datasource.driver-class-name",
      "description": "Fully qualified name of the JDBC driver. Auto-detected based on the URL by default.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "defaultValue": false,
      "name": "spring.datasource.generate-unique-name",
      "description": "Generate a random datasource name.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.allow-pool-suspension",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.auto-commit",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.catalog",
      "type": "java.lang.String"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "deprecated": true,
      "name": "spring.datasource.hikari.connection-customizer-class-name",
      "type": "java.lang.String",
      "deprecation": {}
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.connection-init-sql",
      "type": "java.lang.String"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.connection-test-query",
      "type": "java.lang.String"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.connection-timeout",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.data-source-class-name",
      "type": "java.lang.String"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.data-source-j-n-d-i",
      "type": "java.lang.String"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.data-source-properties",
      "type": "java.util.Properties"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.driver-class-name",
      "type": "java.lang.String"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.health-check-properties",
      "type": "java.util.Properties"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.health-check-registry",
      "type": "java.lang.Object"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.idle-timeout",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.initialization-fail-fast",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.isolate-internal-queries",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.jdbc-url",
      "type": "java.lang.String"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "deprecated": true,
      "name": "spring.datasource.hikari.jdbc4-connection-test",
      "type": "java.lang.Boolean",
      "deprecation": {}
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.leak-detection-threshold",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.login-timeout",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.max-lifetime",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.maximum-pool-size",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.metric-registry",
      "type": "java.lang.Object"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.minimum-idle",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.password",
      "type": "java.lang.String"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.pool-name",
      "type": "java.lang.String"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.read-only",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.register-mbeans",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.transaction-isolation",
      "type": "java.lang.String"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.username",
      "type": "java.lang.String"
    },
    {
      "sourceType": "com.zaxxer.hikari.HikariDataSource",
      "name": "spring.datasource.hikari.validation-timeout",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "defaultValue": true,
      "name": "spring.datasource.initialize",
      "description": "Populate the database using 'data.sql'.",
      "type": "java.lang.Boolean"
    },
    {
      "defaultValue": false,
      "name": "spring.datasource.jmx-enabled",
      "description": "Enable JMX support (if provided by the underlying pool).",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "name": "spring.datasource.jndi-name",
      "description": "JNDI location of the datasource. Class, url, username & password are ignored when set.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "defaultValue": "testdb",
      "name": "spring.datasource.name",
      "description": "Name of the datasource.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "name": "spring.datasource.password",
      "description": "Login password of the database.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "defaultValue": "all",
      "name": "spring.datasource.platform",
      "description": "Platform to use in the DDL or DML scripts (e.g. schema-${platform}.sql or data-${platform}.sql).",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "name": "spring.datasource.schema",
      "description": "Schema (DDL) script resource references.",
      "type": "java.util.List<java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "name": "spring.datasource.schema-password",
      "description": "Password of the database to execute DDL scripts (if different).",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "name": "spring.datasource.schema-username",
      "description": "User of the database to execute DDL scripts (if different).",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "defaultValue": ";",
      "name": "spring.datasource.separator",
      "description": "Statement separator in SQL initialization scripts.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "name": "spring.datasource.sql-script-encoding",
      "description": "SQL scripts encoding.",
      "type": "java.nio.charset.Charset"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.abandon-when-percentage-full",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.access-to-underlying-connection-allowed",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.alternate-username-allowed",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.commit-on-return",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.connection-properties",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.data-source",
      "type": "java.lang.Object"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.data-source-j-n-d-i",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.db-properties",
      "type": "java.util.Properties"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.default-auto-commit",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.default-catalog",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.default-read-only",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.default-transaction-isolation",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.driver-class-name",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.fair-queue",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.ignore-exception-on-pre-load",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.init-s-q-l",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.initial-size",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.jdbc-interceptors",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.jmx-enabled",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.log-abandoned",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.log-validation-errors",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.login-timeout",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.max-active",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.max-age",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.max-idle",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.max-wait",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.min-evictable-idle-time-millis",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.min-idle",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.name",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.num-tests-per-eviction-run",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.password",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.propagate-interrupt-state",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.remove-abandoned",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.remove-abandoned-timeout",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.rollback-on-return",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.suspect-timeout",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.test-on-borrow",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.test-on-connect",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.test-on-return",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.test-while-idle",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.time-between-eviction-runs-millis",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.url",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.use-disposable-connection-facade",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.use-equals",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.use-lock",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.use-statement-facade",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.username",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.validation-interval",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.validation-query",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.validation-query-timeout",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.apache.tomcat.jdbc.pool.DataSource",
      "name": "spring.datasource.tomcat.validator-class-name",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "name": "spring.datasource.type",
      "description": "Fully qualified name of the connection pool implementation to use. By default, it is auto-detected from the classpath.",
      "type": "java.lang.Class<? extends javax.sql.DataSource>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "name": "spring.datasource.url",
      "description": "JDBC url of the database.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties",
      "name": "spring.datasource.username",
      "description": "Login user of the database.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties$Xa",
      "name": "spring.datasource.xa.data-source-class-name",
      "description": "XA datasource fully qualified name.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jdbc.DataSourceProperties$Xa",
      "name": "spring.datasource.xa.properties",
      "description": "Properties to pass to the XA data source.",
      "type": "java.util.Map<java.lang.String,java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties",
      "defaultValue": 3000,
      "name": "spring.elasticsearch.jest.connection-timeout",
      "description": "Connection timeout in milliseconds.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties",
      "defaultValue": true,
      "name": "spring.elasticsearch.jest.multi-threaded",
      "description": "Enable connection requests from multiple execution threads.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties",
      "name": "spring.elasticsearch.jest.password",
      "description": "Login password.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties$Proxy",
      "name": "spring.elasticsearch.jest.proxy.host",
      "description": "Proxy host the HTTP client should use.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties$Proxy",
      "name": "spring.elasticsearch.jest.proxy.port",
      "description": "Proxy port the HTTP client should use.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties",
      "defaultValue": 3000,
      "name": "spring.elasticsearch.jest.read-timeout",
      "description": "Read timeout in milliseconds.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties",
      "defaultValue": [
        "http:\/\/localhost:9200"
      ],
      "name": "spring.elasticsearch.jest.uris",
      "description": "Comma-separated list of the Elasticsearch instances to use.",
      "type": "java.util.List<java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.elasticsearch.jest.JestProperties",
      "name": "spring.elasticsearch.jest.username",
      "description": "Login user.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": false,
      "name": "spring.freemarker.allow-request-override",
      "description": "Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": false,
      "name": "spring.freemarker.allow-session-override",
      "description": "Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": false,
      "name": "spring.freemarker.cache",
      "description": "Enable template caching.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": "UTF-8",
      "name": "spring.freemarker.charset",
      "description": "Template encoding.",
      "type": "java.nio.charset.Charset"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": true,
      "name": "spring.freemarker.check-template-location",
      "description": "Check that the templates location exists.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": "text\/html",
      "name": "spring.freemarker.content-type",
      "description": "Content-Type value.",
      "type": "org.springframework.util.MimeType"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": true,
      "name": "spring.freemarker.enabled",
      "description": "Enable MVC view resolution for this technology.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": false,
      "name": "spring.freemarker.expose-request-attributes",
      "description": "Set whether all request attributes should be added to the model prior to merging with the template.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": false,
      "name": "spring.freemarker.expose-session-attributes",
      "description": "Set whether all HttpSession attributes should be added to the model prior to merging with the template.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": true,
      "name": "spring.freemarker.expose-spring-macro-helpers",
      "description": "Set whether to expose a RequestContext for use by Spring's macro library, under the name \"springMacroRequestContext\".",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": true,
      "name": "spring.freemarker.prefer-file-system-access",
      "description": "Prefer file system access for template loading. File system access enables hot detection of template changes.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": "",
      "name": "spring.freemarker.prefix",
      "description": "Prefix that gets prepended to view names when building a URL.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "name": "spring.freemarker.request-context-attribute",
      "description": "Name of the RequestContext attribute for all views.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "name": "spring.freemarker.settings",
      "description": "Well-known FreeMarker keys which will be passed to FreeMarker's Configuration.",
      "type": "java.util.Map<java.lang.String,java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": ".ftl",
      "name": "spring.freemarker.suffix",
      "description": "Suffix that gets appended to view names when building a URL.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "defaultValue": [
        "classpath:\/templates\/"
      ],
      "name": "spring.freemarker.template-loader-path",
      "description": "Comma-separated list of template paths.",
      "type": "java.lang.String[]"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties",
      "name": "spring.freemarker.view-names",
      "description": "White list of view names that can be resolved.",
      "type": "java.lang.String[]"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": false,
      "name": "spring.groovy.template.allow-request-override",
      "description": "Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": false,
      "name": "spring.groovy.template.allow-session-override",
      "description": "Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": false,
      "name": "spring.groovy.template.cache",
      "description": "Enable template caching.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": "UTF-8",
      "name": "spring.groovy.template.charset",
      "description": "Template encoding.",
      "type": "java.nio.charset.Charset"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": true,
      "name": "spring.groovy.template.check-template-location",
      "description": "Check that the templates location exists.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer",
      "name": "spring.groovy.template.configuration.auto-escape",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer",
      "name": "spring.groovy.template.configuration.auto-indent",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer",
      "name": "spring.groovy.template.configuration.auto-indent-string",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer",
      "name": "spring.groovy.template.configuration.auto-new-line",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer",
      "name": "spring.groovy.template.configuration.base-template-class",
      "type": "java.lang.Class<? extends groovy.text.markup.BaseTemplate>"
    },
    {
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer",
      "name": "spring.groovy.template.configuration.cache-templates",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer",
      "name": "spring.groovy.template.configuration.declaration-encoding",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer",
      "name": "spring.groovy.template.configuration.expand-empty-elements",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer",
      "name": "spring.groovy.template.configuration.locale",
      "type": "java.util.Locale"
    },
    {
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer",
      "name": "spring.groovy.template.configuration.new-line-string",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer",
      "name": "spring.groovy.template.configuration.resource-loader-path",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.web.servlet.view.groovy.GroovyMarkupConfigurer",
      "name": "spring.groovy.template.configuration.use-double-quotes",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": "text\/html",
      "name": "spring.groovy.template.content-type",
      "description": "Content-Type value.",
      "type": "org.springframework.util.MimeType"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": true,
      "name": "spring.groovy.template.enabled",
      "description": "Enable MVC view resolution for this technology.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": false,
      "name": "spring.groovy.template.expose-request-attributes",
      "description": "Set whether all request attributes should be added to the model prior to merging with the template.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": false,
      "name": "spring.groovy.template.expose-session-attributes",
      "description": "Set whether all HttpSession attributes should be added to the model prior to merging with the template.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": true,
      "name": "spring.groovy.template.expose-spring-macro-helpers",
      "description": "Set whether to expose a RequestContext for use by Spring's macro library, under the name \"springMacroRequestContext\".",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": "",
      "name": "spring.groovy.template.prefix",
      "description": "Prefix that gets prepended to view names when building a URL.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "name": "spring.groovy.template.request-context-attribute",
      "description": "Name of the RequestContext attribute for all views.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": "classpath:\/templates\/",
      "name": "spring.groovy.template.resource-loader-path",
      "description": "Template path.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "defaultValue": ".tpl",
      "name": "spring.groovy.template.suffix",
      "description": "Suffix that gets appended to view names when building a URL.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateProperties",
      "name": "spring.groovy.template.view-names",
      "description": "White list of view names that can be resolved.",
      "type": "java.lang.String[]"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.h2.H2ConsoleProperties",
      "defaultValue": false,
      "name": "spring.h2.console.enabled",
      "description": "Enable the console.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.h2.H2ConsoleProperties",
      "defaultValue": "\/h2-console",
      "name": "spring.h2.console.path",
      "description": "Path at which the console will be available.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.h2.H2ConsoleProperties$Settings",
      "defaultValue": false,
      "name": "spring.h2.console.settings.trace",
      "description": "Enable trace output.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.h2.H2ConsoleProperties$Settings",
      "defaultValue": false,
      "name": "spring.h2.console.settings.web-allow-others",
      "description": "Enable remote access.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.hateoas.HateoasProperties",
      "defaultValue": true,
      "name": "spring.hateoas.use-hal-as-default-json-media-type",
      "description": "Specify if application\/hal+json responses should be sent to requests that accept application\/json.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.hazelcast.HazelcastProperties",
      "name": "spring.hazelcast.config",
      "description": "The location of the configuration file to use to initialize Hazelcast.",
      "type": "org.springframework.core.io.Resource"
    },
    {
      "name": "spring.http.converters.preferred-json-mapper",
      "description": "Preferred JSON mapper to use for HTTP message conversion. Set to \"gson\" to force the use of Gson when both it and Jackson are on the classpath.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.HttpEncodingProperties",
      "defaultValue": "UTF-8",
      "name": "spring.http.encoding.charset",
      "description": "Charset of HTTP requests and responses. Added to the \"Content-Type\" header if not set explicitly.",
      "type": "java.nio.charset.Charset"
    },
    {
      "defaultValue": true,
      "name": "spring.http.encoding.enabled",
      "description": "Enable http encoding support.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.HttpEncodingProperties",
      "name": "spring.http.encoding.force",
      "description": "Force the encoding to the configured charset on HTTP requests and responses.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.HttpEncodingProperties",
      "name": "spring.http.encoding.force-request",
      "description": "Force the encoding to the configured charset on HTTP requests. Defaults to true when \"force\" has not been specified.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.HttpEncodingProperties",
      "name": "spring.http.encoding.force-response",
      "description": "Force the encoding to the configured charset on HTTP responses.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.HttpEncodingProperties",
      "name": "spring.http.encoding.mapping",
      "description": "Locale to Encoding mapping.",
      "type": "java.util.Map<java.util.Locale,java.nio.charset.Charset>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.MultipartProperties",
      "defaultValue": true,
      "name": "spring.http.multipart.enabled",
      "description": "Enable support of multipart uploads.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.MultipartProperties",
      "defaultValue": "0",
      "name": "spring.http.multipart.file-size-threshold",
      "description": "Threshold after which files will be written to disk. Values can use the suffixes \"MB\" or \"KB\" to indicate megabytes or kilobytes respectively.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.MultipartProperties",
      "name": "spring.http.multipart.location",
      "description": "Intermediate location of uploaded files.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.MultipartProperties",
      "defaultValue": "1MB",
      "name": "spring.http.multipart.max-file-size",
      "description": "Max file size. Values can use the suffixes \"MB\" or \"KB\" to indicate megabytes or kilobytes respectively.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.MultipartProperties",
      "defaultValue": "10MB",
      "name": "spring.http.multipart.max-request-size",
      "description": "Max request size. Values can use the suffixes \"MB\" or \"KB\" to indicate megabytes or kilobytes respectively.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.MultipartProperties",
      "defaultValue": false,
      "name": "spring.http.multipart.resolve-lazily",
      "description": "Whether to resolve the multipart request lazily at the time of file or parameter access.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties$Build",
      "name": "spring.info.build.location",
      "description": "Location of the generated build-info.properties file.",
      "type": "org.springframework.core.io.Resource"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.info.ProjectInfoProperties$Git",
      "name": "spring.info.git.location",
      "description": "Location of the generated git.properties file.",
      "type": "org.springframework.core.io.Resource"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties",
      "name": "spring.jackson.date-format",
      "description": "Date format string (yyyy-MM-dd HH:mm:ss), or a fully-qualified date format class name.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties",
      "name": "spring.jackson.default-property-inclusion",
      "description": "Controls the inclusion of properties during serialization. Configured with one of the values in Jackson's JsonInclude.Include enumeration.",
      "type": "com.fasterxml.jackson.annotation.JsonInclude$Include"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties",
      "name": "spring.jackson.deserialization",
      "description": "Jackson on\/off features that affect the way Java objects are deserialized.",
      "type": "java.util.Map<com.fasterxml.jackson.databind.DeserializationFeature,java.lang.Boolean>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties",
      "name": "spring.jackson.generator",
      "description": "Jackson on\/off features for generators.",
      "type": "java.util.Map<com.fasterxml.jackson.core.JsonGenerator.Feature,java.lang.Boolean>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties",
      "name": "spring.jackson.joda-date-time-format",
      "description": "Joda date time format string (yyyy-MM-dd HH:mm:ss). If not configured, \"date-format\" will be used as a fallback if it is configured with a format string.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties",
      "name": "spring.jackson.locale",
      "description": "Locale used for formatting.",
      "type": "java.util.Locale"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties",
      "name": "spring.jackson.mapper",
      "description": "Jackson general purpose on\/off features.",
      "type": "java.util.Map<com.fasterxml.jackson.databind.MapperFeature,java.lang.Boolean>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties",
      "name": "spring.jackson.parser",
      "description": "Jackson on\/off features for parsers.",
      "type": "java.util.Map<com.fasterxml.jackson.core.JsonParser.Feature,java.lang.Boolean>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties",
      "name": "spring.jackson.property-naming-strategy",
      "description": "One of the constants on Jackson's PropertyNamingStrategy (CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES). Can also be a fully-qualified class name of a PropertyNamingStrategy subclass.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties",
      "name": "spring.jackson.serialization",
      "description": "Jackson on\/off features that affect the way Java objects are serialized.",
      "type": "java.util.Map<com.fasterxml.jackson.databind.SerializationFeature,java.lang.Boolean>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jackson.JacksonProperties",
      "name": "spring.jackson.time-zone",
      "description": "Time zone used when formatting dates. Configured using any recognized time zone identifier, for example \"America\/Los_Angeles\" or \"GMT+10\".",
      "type": "java.util.TimeZone"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jersey.JerseyProperties",
      "name": "spring.jersey.application-path",
      "description": "Path that serves as the base URI for the application. Overrides the value of \"@ApplicationPath\" if specified.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jersey.JerseyProperties$Filter",
      "defaultValue": 0,
      "name": "spring.jersey.filter.order",
      "description": "Jersey filter chain order.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jersey.JerseyProperties",
      "name": "spring.jersey.init",
      "description": "Init parameters to pass to Jersey via the servlet or filter.",
      "type": "java.util.Map<java.lang.String,java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jersey.JerseyProperties$Servlet",
      "defaultValue": -1,
      "name": "spring.jersey.servlet.load-on-startup",
      "description": "Load on startup priority of the Jersey servlet.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jersey.JerseyProperties",
      "defaultValue": "servlet",
      "name": "spring.jersey.type",
      "description": "Jersey integration type.",
      "type": "org.springframework.boot.autoconfigure.jersey.JerseyProperties$Type"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties",
      "name": "spring.jms.jndi-name",
      "description": "Connection factory JNDI name. When set, takes precedence to others connection factory auto-configurations.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Listener",
      "name": "spring.jms.listener.acknowledge-mode",
      "description": "Acknowledge mode of the container. By default, the listener is transacted with automatic acknowledgment.",
      "type": "org.springframework.boot.autoconfigure.jms.JmsProperties$AcknowledgeMode"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Listener",
      "defaultValue": true,
      "name": "spring.jms.listener.auto-startup",
      "description": "Start the container automatically on startup.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Listener",
      "name": "spring.jms.listener.concurrency",
      "description": "Minimum number of concurrent consumers.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Listener",
      "name": "spring.jms.listener.max-concurrency",
      "description": "Maximum number of concurrent consumers.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties",
      "defaultValue": false,
      "name": "spring.jms.pub-sub-domain",
      "description": "Specify if the default destination type is topic.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Template",
      "name": "spring.jms.template.default-destination",
      "description": "Default destination to use on send\/receive operations that do not have a destination parameter.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Template",
      "name": "spring.jms.template.delivery-delay",
      "description": "Delivery delay to use for send calls in milliseconds.",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Template",
      "name": "spring.jms.template.delivery-mode",
      "description": "Delivery mode. Enable QoS when set.",
      "type": "org.springframework.boot.autoconfigure.jms.JmsProperties$DeliveryMode"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Template",
      "name": "spring.jms.template.priority",
      "description": "Priority of a message when sending. Enable QoS when set.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Template",
      "name": "spring.jms.template.qos-enabled",
      "description": "Enable explicit QoS when sending a message. When enabled, the delivery mode, priority and time-to-live properties will be used when sending a message. QoS is automatically enabled when at least one of those settings is customized.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Template",
      "name": "spring.jms.template.receive-timeout",
      "description": "Timeout to use for receive calls in milliseconds.",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jms.JmsProperties$Template",
      "name": "spring.jms.template.time-to-live",
      "description": "Time-to-live of a message when sending in milliseconds. Enable QoS when set.",
      "type": "java.lang.Long"
    },
    {
      "name": "spring.jmx.default-domain",
      "description": "JMX domain name.",
      "type": "java.lang.String"
    },
    {
      "defaultValue": true,
      "name": "spring.jmx.enabled",
      "description": "Expose management beans to the JMX domain.",
      "type": "java.lang.Boolean"
    },
    {
      "defaultValue": "mbeanServer",
      "name": "spring.jmx.server",
      "description": "MBeanServer bean name.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.jooq.JooqProperties",
      "name": "spring.jooq.sql-dialect",
      "description": "SQLDialect JOOQ used when communicating with the configured datasource, for instance \"POSTGRES\".",
      "type": "org.jooq.SQLDialect"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties",
      "name": "spring.jpa.database",
      "description": "Target database to operate on, auto-detected by default. Can be alternatively set using the \"databasePlatform\" property.",
      "type": "org.springframework.orm.jpa.vendor.Database"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties",
      "name": "spring.jpa.database-platform",
      "description": "Name of the target database to operate on, auto-detected by default. Can be alternatively set using the \"Database\" enum.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties",
      "defaultValue": false,
      "name": "spring.jpa.generate-ddl",
      "description": "Initialize the schema on startup.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Hibernate",
      "name": "spring.jpa.hibernate.ddl-auto",
      "description": "DDL mode. This is actually a shortcut for the \"hibernate.hbm2ddl.auto\" property. Default to \"create-drop\" when using an embedded database, \"none\" otherwise.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Naming",
      "name": "spring.jpa.hibernate.naming.implicit-strategy",
      "description": "Hibernate 5 implicit naming strategy fully qualified name.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Naming",
      "name": "spring.jpa.hibernate.naming.physical-strategy",
      "description": "Hibernate 5 physical naming strategy fully qualified name.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Naming",
      "name": "spring.jpa.hibernate.naming.strategy",
      "description": "Hibernate 4 naming strategy fully qualified name. Not supported with Hibernate 5.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Hibernate",
      "name": "spring.jpa.hibernate.use-new-id-generator-mappings",
      "description": "Use Hibernate's newer IdentifierGenerator for AUTO, TABLE and SEQUENCE. This is actually a shortcut for the \"hibernate.id.new_generator_mappings\" property. When not specified will default to \"false\" with Hibernate 5 for back compatibility.",
      "type": "java.lang.Boolean"
    },
    {
      "defaultValue": true,
      "name": "spring.jpa.open-in-view",
      "description": "Register OpenEntityManagerInViewInterceptor. Binds a JPA EntityManager to the thread for the entire processing of the request.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties",
      "name": "spring.jpa.properties",
      "description": "Additional native properties to set on the JPA provider.",
      "type": "java.util.Map<java.lang.String,java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.orm.jpa.JpaProperties",
      "defaultValue": false,
      "name": "spring.jpa.show-sql",
      "description": "Enable logging of SQL statements.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": false,
      "name": "spring.jta.bitronix.properties.allow-multiple-lrc",
      "description": "Allow multiple LRC resources to be enlisted into the same transaction.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": false,
      "name": "spring.jta.bitronix.properties.asynchronous2-pc",
      "description": "Enable asynchronously execution of two phase commit.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": 1,
      "deprecated": true,
      "name": "spring.jta.bitronix.properties.background-recovery-interval",
      "description": "Interval in minutes at which to run the recovery process in the background.",
      "type": "java.lang.Integer",
      "deprecation": {
        "replacement": "spring.jta.bitronix.properties.background-recovery-interval-seconds"
      }
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": 60,
      "name": "spring.jta.bitronix.properties.background-recovery-interval-seconds",
      "description": "Interval in seconds at which to run the recovery process in the background.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": true,
      "name": "spring.jta.bitronix.properties.current-node-only-recovery",
      "description": "Recover only the current node. Should be enabled if you run multiple instances of the transaction manager on the same JMS and JDBC resources.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": false,
      "name": "spring.jta.bitronix.properties.debug-zero-resource-transaction",
      "description": "Log the creation and commit call stacks of transactions executed without a single enlisted resource.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": 60,
      "name": "spring.jta.bitronix.properties.default-transaction-timeout",
      "description": "Default transaction timeout in seconds.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": false,
      "name": "spring.jta.bitronix.properties.disable-jmx",
      "description": "Enable JMX support.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "name": "spring.jta.bitronix.properties.exception-analyzer",
      "description": "Set the fully qualified name of the exception analyzer implementation to use.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": false,
      "name": "spring.jta.bitronix.properties.filter-log-status",
      "description": "Enable filtering of logs so that only mandatory logs are written.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": true,
      "name": "spring.jta.bitronix.properties.force-batching-enabled",
      "description": " Set if disk forces are batched.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": true,
      "name": "spring.jta.bitronix.properties.forced-write-enabled",
      "description": "Set if logs are forced to disk.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": 60,
      "name": "spring.jta.bitronix.properties.graceful-shutdown-interval",
      "description": "Maximum amount of seconds the TM will wait for transactions to get done before aborting them at shutdown time.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "name": "spring.jta.bitronix.properties.jndi-transaction-synchronization-registry-name",
      "description": "JNDI name of the TransactionSynchronizationRegistry.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "name": "spring.jta.bitronix.properties.jndi-user-transaction-name",
      "description": "JNDI name of the UserTransaction.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": "disk",
      "name": "spring.jta.bitronix.properties.journal",
      "description": "Name of the journal. Can be 'disk', 'null' or a class name.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": "btm1.tlog",
      "name": "spring.jta.bitronix.properties.log-part1-filename",
      "description": "Name of the first fragment of the journal.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": "btm2.tlog",
      "name": "spring.jta.bitronix.properties.log-part2-filename",
      "description": "Name of the second fragment of the journal.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": 2,
      "name": "spring.jta.bitronix.properties.max-log-size-in-mb",
      "description": "Maximum size in megabytes of the journal fragments.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "name": "spring.jta.bitronix.properties.resource-configuration-filename",
      "description": "ResourceLoader configuration file name.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "name": "spring.jta.bitronix.properties.server-id",
      "description": "ASCII ID that must uniquely identify this TM instance. Default to the machine's IP address.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": false,
      "name": "spring.jta.bitronix.properties.skip-corrupted-logs",
      "description": "Skip corrupted transactions log entries. Use only at last resort when all you have to recover is a pair of corrupted files.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "bitronix.tm.Configuration",
      "defaultValue": true,
      "name": "spring.jta.bitronix.properties.warn-about-zero-resource-transaction",
      "description": "Log a warning for transactions executed without a single enlisted resource.",
      "type": "java.lang.Boolean"
    },
    {
      "defaultValue": true,
      "name": "spring.jta.enabled",
      "description": "Enable JTA support.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.transaction.jta.JtaProperties",
      "name": "spring.jta.log-dir",
      "description": "Transaction logs directory.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.transaction.jta.JtaProperties",
      "name": "spring.jta.transaction-manager-id",
      "description": "Transaction manager unique identifier.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties",
      "name": "spring.kafka.bootstrap-servers",
      "description": "Comma-delimited list of host:port pairs to use for establishing the initial connection to the Kafka cluster.",
      "type": "java.util.List<java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties",
      "name": "spring.kafka.client-id",
      "description": "Id to pass to the server when making requests; used for server-side logging.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer",
      "name": "spring.kafka.consumer.auto-commit-interval",
      "description": "Frequency in milliseconds that the consumer offsets are auto-committed to Kafka if 'enable.auto.commit' true.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer",
      "name": "spring.kafka.consumer.auto-offset-reset",
      "description": "What to do when there is no initial offset in Kafka or if the current offset does not exist any more on the server.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer",
      "name": "spring.kafka.consumer.bootstrap-servers",
      "description": "Comma-delimited list of host:port pairs to use for establishing the initial connection to the Kafka cluster.",
      "type": "java.util.List<java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer",
      "name": "spring.kafka.consumer.client-id",
      "description": "Id to pass to the server when making requests; used for server-side logging.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer",
      "name": "spring.kafka.consumer.enable-auto-commit",
      "description": "If true the consumer's offset will be periodically committed in the background.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer",
      "name": "spring.kafka.consumer.fetch-max-wait",
      "description": "Maximum amount of time in milliseconds the server will block before answering the fetch request if there isn't sufficient data to immediately satisfy the requirement given by \"fetch.min.bytes\".",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer",
      "name": "spring.kafka.consumer.fetch-min-size",
      "description": "Minimum amount of data the server should return for a fetch request in bytes.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer",
      "name": "spring.kafka.consumer.group-id",
      "description": "Unique string that identifies the consumer group this consumer belongs to.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer",
      "name": "spring.kafka.consumer.heartbeat-interval",
      "description": "Expected time in milliseconds between heartbeats to the consumer coordinator.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer",
      "name": "spring.kafka.consumer.key-deserializer",
      "description": "Deserializer class for keys.",
      "type": "java.lang.Class<?>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer",
      "name": "spring.kafka.consumer.max-poll-records",
      "description": "Maximum number of records returned in a single call to poll().",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Consumer",
      "name": "spring.kafka.consumer.value-deserializer",
      "description": "Deserializer class for values.",
      "type": "java.lang.Class<?>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Listener",
      "name": "spring.kafka.listener.ack-count",
      "description": "Number of records between offset commits when ackMode is \"COUNT\" or \"COUNT_TIME\".",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Listener",
      "name": "spring.kafka.listener.ack-mode",
      "description": "Listener AckMode; see the spring-kafka documentation.",
      "type": "org.springframework.kafka.listener.AbstractMessageListenerContainer$AckMode"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Listener",
      "name": "spring.kafka.listener.ack-time",
      "description": "Time in milliseconds between offset commits when ackMode is \"TIME\" or \"COUNT_TIME\".",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Listener",
      "name": "spring.kafka.listener.concurrency",
      "description": "Number of threads to run in the listener containers.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Listener",
      "name": "spring.kafka.listener.poll-timeout",
      "description": "Timeout in milliseconds to use when polling the consumer.",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer",
      "name": "spring.kafka.producer.acks",
      "description": "Number of acknowledgments the producer requires the leader to have received before considering a request complete.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer",
      "name": "spring.kafka.producer.batch-size",
      "description": "Default batch size in bytes. A small batch size will make batching less common and may reduce throughput (a batch size of zero disables batching entirely).",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer",
      "name": "spring.kafka.producer.bootstrap-servers",
      "description": "Comma-delimited list of host:port pairs to use for establishing the initial connection to the Kafka cluster.",
      "type": "java.util.List<java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer",
      "name": "spring.kafka.producer.buffer-memory",
      "description": "Total bytes of memory the producer can use to buffer records waiting to be sent to the server.",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer",
      "name": "spring.kafka.producer.client-id",
      "description": "Id to pass to the server when making requests; used for server-side logging.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer",
      "name": "spring.kafka.producer.compression-type",
      "description": "Compression type for all data generated by the producer.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer",
      "name": "spring.kafka.producer.key-serializer",
      "description": "Serializer class for keys.",
      "type": "java.lang.Class<?>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer",
      "name": "spring.kafka.producer.retries",
      "description": "When greater than zero, enables retrying of failed sends.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Producer",
      "name": "spring.kafka.producer.value-serializer",
      "description": "Serializer class for values.",
      "type": "java.lang.Class<?>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties",
      "name": "spring.kafka.properties",
      "description": "Additional properties used to configure the client.",
      "type": "java.util.Map<java.lang.String,java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl",
      "name": "spring.kafka.ssl.key-password",
      "description": "Password of the private key in the key store file.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl",
      "name": "spring.kafka.ssl.keystore-location",
      "description": "Location of the key store file.",
      "type": "org.springframework.core.io.Resource"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl",
      "name": "spring.kafka.ssl.keystore-password",
      "description": "Store password for the key store file.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl",
      "name": "spring.kafka.ssl.truststore-location",
      "description": "Location of the trust store file.",
      "type": "org.springframework.core.io.Resource"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Ssl",
      "name": "spring.kafka.ssl.truststore-password",
      "description": "Store password for the trust store file.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.kafka.KafkaProperties$Template",
      "name": "spring.kafka.template.default-topic",
      "description": "Default topic to which messages will be sent.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.ldap.LdapProperties",
      "name": "spring.ldap.base",
      "description": "Base suffix from which all operations should originate.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.ldap.LdapProperties",
      "name": "spring.ldap.base-environment",
      "description": "LDAP specification settings.",
      "type": "java.util.Map<java.lang.String,java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties",
      "name": "spring.ldap.embedded.base-dn",
      "description": "Base DNs.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties$Credential",
      "name": "spring.ldap.embedded.credential.password",
      "description": "Embedded LDAP password.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties$Credential",
      "name": "spring.ldap.embedded.credential.username",
      "description": "Embedded LDAP username.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties",
      "defaultValue": "classpath:schema.ldif",
      "name": "spring.ldap.embedded.ldif",
      "description": "Schema (LDIF) script resource reference.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties",
      "defaultValue": 0,
      "name": "spring.ldap.embedded.port",
      "description": "Embedded LDAP port.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties$Validation",
      "defaultValue": true,
      "name": "spring.ldap.embedded.validation.enabled",
      "description": "Enable LDAP schema validation.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapProperties$Validation",
      "name": "spring.ldap.embedded.validation.schema",
      "description": "Path to the custom schema.",
      "type": "org.springframework.core.io.Resource"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.ldap.LdapProperties",
      "name": "spring.ldap.password",
      "description": "Login password of the LDAP.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.ldap.LdapProperties",
      "name": "spring.ldap.urls",
      "description": "LDAP URLs.",
      "type": "java.lang.String[]"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.ldap.LdapProperties",
      "name": "spring.ldap.username",
      "description": "Login user of the LDAP.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties",
      "defaultValue": "UTF-8",
      "name": "spring.mail.default-encoding",
      "description": "Default MimeMessage encoding.",
      "type": "java.nio.charset.Charset"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties",
      "name": "spring.mail.host",
      "description": "SMTP server host.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties",
      "name": "spring.mail.jndi-name",
      "description": "Session JNDI name. When set, takes precedence to others Session settings.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties",
      "name": "spring.mail.password",
      "description": "Login password of the SMTP server.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties",
      "name": "spring.mail.port",
      "description": "SMTP server port.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties",
      "name": "spring.mail.properties",
      "description": "Additional JavaMail Session properties.",
      "type": "java.util.Map<java.lang.String,java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties",
      "defaultValue": "smtp",
      "name": "spring.mail.protocol",
      "description": "Protocol used by the SMTP server.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties",
      "defaultValue": false,
      "name": "spring.mail.test-connection",
      "description": "Test that the mail server is available on startup.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mail.MailProperties",
      "name": "spring.mail.username",
      "description": "Login user of the SMTP server.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration",
      "defaultValue": false,
      "name": "spring.messages.always-use-message-format",
      "description": "Set whether to always apply the MessageFormat rules, parsing even messages without arguments.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration",
      "defaultValue": "messages",
      "name": "spring.messages.basename",
      "description": "Comma-separated list of basenames (essentially a fully-qualified classpath location), each following the ResourceBundle convention with relaxed support for slash based locations. If it doesn't contain a package qualifier (such as \"org.mypackage\"), it will be resolved from the classpath root.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration",
      "defaultValue": -1,
      "name": "spring.messages.cache-seconds",
      "description": "Loaded resource bundle files cache expiration, in seconds. When set to -1, bundles are cached forever.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration",
      "defaultValue": "UTF-8",
      "name": "spring.messages.encoding",
      "description": "Message bundles encoding.",
      "type": "java.nio.charset.Charset"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration",
      "defaultValue": true,
      "name": "spring.messages.fallback-to-system-locale",
      "description": "Set whether to fall back to the system Locale if no files for a specific Locale have been found. if this is turned off, the only fallback will be the default file (e.g. \"messages.properties\" for basename \"messages\").",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverProperties",
      "defaultValue": false,
      "name": "spring.mobile.devicedelegatingviewresolver.enable-fallback",
      "description": "Enable support for fallback resolution.",
      "type": "java.lang.Boolean"
    },
    {
      "defaultValue": false,
      "name": "spring.mobile.devicedelegatingviewresolver.enabled",
      "description": "Enable device view resolver.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverProperties",
      "defaultValue": "mobile\/",
      "name": "spring.mobile.devicedelegatingviewresolver.mobile-prefix",
      "description": "Prefix that gets prepended to view names for mobile devices.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverProperties",
      "defaultValue": "",
      "name": "spring.mobile.devicedelegatingviewresolver.mobile-suffix",
      "description": "Suffix that gets appended to view names for mobile devices.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverProperties",
      "defaultValue": "",
      "name": "spring.mobile.devicedelegatingviewresolver.normal-prefix",
      "description": "Prefix that gets prepended to view names for normal devices.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverProperties",
      "defaultValue": "",
      "name": "spring.mobile.devicedelegatingviewresolver.normal-suffix",
      "description": "Suffix that gets appended to view names for normal devices.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverProperties",
      "defaultValue": "tablet\/",
      "name": "spring.mobile.devicedelegatingviewresolver.tablet-prefix",
      "description": "Prefix that gets prepended to view names for tablet devices.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverProperties",
      "defaultValue": "",
      "name": "spring.mobile.devicedelegatingviewresolver.tablet-suffix",
      "description": "Suffix that gets appended to view names for tablet devices.",
      "type": "java.lang.String"
    },
    {
      "defaultValue": true,
      "name": "spring.mobile.sitepreference.enabled",
      "description": "Enable SitePreferenceHandler.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties",
      "name": "spring.mongodb.embedded.features",
      "description": "Comma-separated list of features to enable.",
      "type": "java.util.Set<de.flapdoodle.embed.mongo.distribution.Feature>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties$Storage",
      "name": "spring.mongodb.embedded.storage.database-dir",
      "description": "Directory used for data storage.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties$Storage",
      "name": "spring.mongodb.embedded.storage.oplog-size",
      "description": "Maximum size of the oplog in megabytes.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties$Storage",
      "name": "spring.mongodb.embedded.storage.repl-set-name",
      "description": "Name of the replica set.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties",
      "defaultValue": "3.2.2",
      "name": "spring.mongodb.embedded.version",
      "description": "Version of Mongo to use.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": false,
      "name": "spring.mustache.allow-request-override",
      "description": "Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": false,
      "name": "spring.mustache.allow-session-override",
      "description": "Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": false,
      "name": "spring.mustache.cache",
      "description": "Enable template caching.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": "UTF-8",
      "name": "spring.mustache.charset",
      "description": "Template encoding.",
      "type": "java.nio.charset.Charset"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": true,
      "name": "spring.mustache.check-template-location",
      "description": "Check that the templates location exists.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": "text\/html",
      "name": "spring.mustache.content-type",
      "description": "Content-Type value.",
      "type": "org.springframework.util.MimeType"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": true,
      "name": "spring.mustache.enabled",
      "description": "Enable MVC view resolution for this technology.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": false,
      "name": "spring.mustache.expose-request-attributes",
      "description": "Set whether all request attributes should be added to the model prior to merging with the template.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": false,
      "name": "spring.mustache.expose-session-attributes",
      "description": "Set whether all HttpSession attributes should be added to the model prior to merging with the template.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": true,
      "name": "spring.mustache.expose-spring-macro-helpers",
      "description": "Set whether to expose a RequestContext for use by Spring's macro library, under the name \"springMacroRequestContext\".",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": "classpath:\/templates\/",
      "name": "spring.mustache.prefix",
      "description": "Prefix to apply to template names.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "name": "spring.mustache.request-context-attribute",
      "description": "Name of the RequestContext attribute for all views.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "defaultValue": ".html",
      "name": "spring.mustache.suffix",
      "description": "Suffix to apply to template names.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.mustache.MustacheProperties",
      "name": "spring.mustache.view-names",
      "description": "White list of view names that can be resolved.",
      "type": "java.lang.String[]"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties$Async",
      "name": "spring.mvc.async.request-timeout",
      "description": "Amount of time (in milliseconds) before asynchronous request handling times out. If this value is not set, the default timeout of the underlying implementation is used, e.g. 10 seconds on Tomcat with Servlet 3.",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties",
      "name": "spring.mvc.date-format",
      "description": "Date format to use (e.g. dd\/MM\/yyyy).",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties",
      "defaultValue": true,
      "name": "spring.mvc.dispatch-options-request",
      "description": "Dispatch OPTIONS requests to the FrameworkServlet doService method.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties",
      "defaultValue": false,
      "name": "spring.mvc.dispatch-trace-request",
      "description": "Dispatch TRACE requests to the FrameworkServlet doService method.",
      "type": "java.lang.Boolean"
    },
    {
      "defaultValue": true,
      "name": "spring.mvc.favicon.enabled",
      "description": "Enable resolution of favicon.ico.",
      "type": "java.lang.Boolean"
    },
    {
      "defaultValue": true,
      "name": "spring.mvc.formcontent.putfilter.enabled",
      "description": "Enable Spring's HttpPutFormContentFilter.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties",
      "defaultValue": true,
      "name": "spring.mvc.ignore-default-model-on-redirect",
      "description": "If the content of the \"default\" model should be ignored during redirect scenarios.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties",
      "name": "spring.mvc.locale",
      "description": "Locale to use. By default, this locale is overridden by the \"Accept-Language\" header.",
      "type": "java.util.Locale"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties",
      "defaultValue": "accept-header",
      "name": "spring.mvc.locale-resolver",
      "description": "Define how the locale should be resolved.",
      "type": "org.springframework.boot.autoconfigure.web.WebMvcProperties$LocaleResolver"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties",
      "defaultValue": false,
      "name": "spring.mvc.log-resolved-exception",
      "description": "Enable warn logging of exceptions resolved by a \"HandlerExceptionResolver\".",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties",
      "name": "spring.mvc.media-types",
      "description": "Maps file extensions to media types for content negotiation, e.g. yml->text\/yaml.",
      "type": "java.util.Map<java.lang.String,org.springframework.http.MediaType>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties",
      "name": "spring.mvc.message-codes-resolver-format",
      "description": "Formatting strategy for message codes (PREFIX_ERROR_CODE, POSTFIX_ERROR_CODE).",
      "type": "org.springframework.validation.DefaultMessageCodesResolver$Format"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties$Servlet",
      "defaultValue": -1,
      "name": "spring.mvc.servlet.load-on-startup",
      "description": "Load on startup priority of the dispatcher servlet.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties",
      "defaultValue": "\/**",
      "name": "spring.mvc.static-path-pattern",
      "description": "Path pattern used for static resources.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties",
      "defaultValue": false,
      "name": "spring.mvc.throw-exception-if-no-handler-found",
      "description": "If a \"NoHandlerFoundException\" should be thrown if no Handler was found to process a request.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties$View",
      "name": "spring.mvc.view.prefix",
      "description": "Spring MVC view prefix.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.WebMvcProperties$View",
      "name": "spring.mvc.view.suffix",
      "description": "Spring MVC view suffix.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "name": "spring.rabbitmq.addresses",
      "description": "Comma-separated list of addresses to which the client should connect.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache$Channel",
      "name": "spring.rabbitmq.cache.channel.checkout-timeout",
      "description": "Number of milliseconds to wait to obtain a channel if the cache size has been reached. If 0, always create a new channel.",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache$Channel",
      "name": "spring.rabbitmq.cache.channel.size",
      "description": "Number of channels to retain in the cache. When \"check-timeout\" > 0, max channels per connection.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache$Connection",
      "defaultValue": "channel",
      "name": "spring.rabbitmq.cache.connection.mode",
      "description": "Connection factory cache mode.",
      "type": "org.springframework.amqp.rabbit.connection.CachingConnectionFactory$CacheMode"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Cache$Connection",
      "name": "spring.rabbitmq.cache.connection.size",
      "description": "Number of connections to cache. Only applies when mode is CONNECTION.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "name": "spring.rabbitmq.connection-timeout",
      "description": "Connection timeout, in milliseconds; zero for infinite.",
      "type": "java.lang.Integer"
    },
    {
      "defaultValue": true,
      "name": "spring.rabbitmq.dynamic",
      "description": "Create an AmqpAdmin bean.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "defaultValue": "localhost",
      "name": "spring.rabbitmq.host",
      "description": "RabbitMQ host.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Listener",
      "deprecated": true,
      "name": "spring.rabbitmq.listener.acknowledge-mode",
      "type": "org.springframework.amqp.core.AcknowledgeMode",
      "deprecation": {
        "replacement": "spring.rabbitmq.listener.simple.acknowledge-mode"
      }
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Listener",
      "deprecated": true,
      "name": "spring.rabbitmq.listener.auto-startup",
      "type": "java.lang.Boolean",
      "deprecation": {
        "replacement": "spring.rabbitmq.listener.simple.auto-startup"
      }
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Listener",
      "deprecated": true,
      "name": "spring.rabbitmq.listener.concurrency",
      "type": "java.lang.Integer",
      "deprecation": {
        "replacement": "spring.rabbitmq.listener.simple.concurrency"
      }
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Listener",
      "deprecated": true,
      "name": "spring.rabbitmq.listener.default-requeue-rejected",
      "type": "java.lang.Boolean",
      "deprecation": {
        "replacement": "spring.rabbitmq.listener.simple.default-requeue-rejected"
      }
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Listener",
      "deprecated": true,
      "name": "spring.rabbitmq.listener.idle-event-interval",
      "type": "java.lang.Long",
      "deprecation": {
        "replacement": "spring.rabbitmq.listener.simple.idle-event-interval"
      }
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Listener",
      "deprecated": true,
      "name": "spring.rabbitmq.listener.max-concurrency",
      "type": "java.lang.Integer",
      "deprecation": {
        "replacement": "spring.rabbitmq.listener.simple.max-concurrency"
      }
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Listener",
      "deprecated": true,
      "name": "spring.rabbitmq.listener.prefetch",
      "type": "java.lang.Integer",
      "deprecation": {
        "replacement": "spring.rabbitmq.listener.simple.prefetch"
      }
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": false,
      "deprecated": true,
      "name": "spring.rabbitmq.listener.retry.enabled",
      "description": "Whether or not publishing retries are enabled.",
      "type": "java.lang.Boolean",
      "deprecation": {
        "replacement": "spring.rabbitmq.listener.simple.retry.enabled"
      }
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": 1000,
      "deprecated": true,
      "name": "spring.rabbitmq.listener.retry.initial-interval",
      "description": "Interval between the first and second attempt to publish or deliver a message.",
      "type": "java.lang.Long",
      "deprecation": {
        "replacement": "spring.rabbitmq.listener.simple.retry.initial-interval"
      }
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": 3,
      "deprecated": true,
      "name": "spring.rabbitmq.listener.retry.max-attempts",
      "description": "Maximum number of attempts to publish or deliver a message.",
      "type": "java.lang.Integer",
      "deprecation": {
        "replacement": "spring.rabbitmq.listener.simple.retry.max-attempts"
      }
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": 10000,
      "deprecated": true,
      "name": "spring.rabbitmq.listener.retry.max-interval",
      "description": "Maximum interval between attempts.",
      "type": "java.lang.Long",
      "deprecation": {
        "replacement": "spring.rabbitmq.listener.simple.retry.max-interval"
      }
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": 1,
      "deprecated": true,
      "name": "spring.rabbitmq.listener.retry.multiplier",
      "description": "A multiplier to apply to the previous retry interval.",
      "type": "java.lang.Double",
      "deprecation": {
        "replacement": "spring.rabbitmq.listener.simple.retry.multiplier"
      }
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": true,
      "deprecated": true,
      "name": "spring.rabbitmq.listener.retry.stateless",
      "description": "Whether or not retries are stateless or stateful.",
      "type": "java.lang.Boolean",
      "deprecation": {
        "replacement": "spring.rabbitmq.listener.simple.retry.stateless"
      }
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$AmqpContainer",
      "name": "spring.rabbitmq.listener.simple.acknowledge-mode",
      "description": "Acknowledge mode of container.",
      "type": "org.springframework.amqp.core.AcknowledgeMode"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$AmqpContainer",
      "defaultValue": true,
      "name": "spring.rabbitmq.listener.simple.auto-startup",
      "description": "Start the container automatically on startup.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$AmqpContainer",
      "name": "spring.rabbitmq.listener.simple.concurrency",
      "description": "Minimum number of consumers.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$AmqpContainer",
      "name": "spring.rabbitmq.listener.simple.default-requeue-rejected",
      "description": "Whether rejected deliveries are requeued by default; default true.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$AmqpContainer",
      "name": "spring.rabbitmq.listener.simple.idle-event-interval",
      "description": "How often idle container events should be published in milliseconds.",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$AmqpContainer",
      "name": "spring.rabbitmq.listener.simple.max-concurrency",
      "description": "Maximum number of consumers.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$AmqpContainer",
      "name": "spring.rabbitmq.listener.simple.prefetch",
      "description": "Number of messages to be handled in a single request. It should be greater than or equal to the transaction size (if used).",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": false,
      "name": "spring.rabbitmq.listener.simple.retry.enabled",
      "description": "Whether or not publishing retries are enabled.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": 1000,
      "name": "spring.rabbitmq.listener.simple.retry.initial-interval",
      "description": "Interval between the first and second attempt to publish or deliver a message.",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": 3,
      "name": "spring.rabbitmq.listener.simple.retry.max-attempts",
      "description": "Maximum number of attempts to publish or deliver a message.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": 10000,
      "name": "spring.rabbitmq.listener.simple.retry.max-interval",
      "description": "Maximum interval between attempts.",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": 1,
      "name": "spring.rabbitmq.listener.simple.retry.multiplier",
      "description": "A multiplier to apply to the previous retry interval.",
      "type": "java.lang.Double"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$ListenerRetry",
      "defaultValue": true,
      "name": "spring.rabbitmq.listener.simple.retry.stateless",
      "description": "Whether or not retries are stateless or stateful.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$AmqpContainer",
      "name": "spring.rabbitmq.listener.simple.transaction-size",
      "description": "Number of messages to be processed in a transaction. For best results it should be less than or equal to the prefetch count.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Listener",
      "deprecated": true,
      "name": "spring.rabbitmq.listener.transaction-size",
      "type": "java.lang.Integer",
      "deprecation": {
        "replacement": "spring.rabbitmq.listener.simple.transaction-size"
      }
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "name": "spring.rabbitmq.password",
      "description": "Login to authenticate against the broker.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "defaultValue": 5672,
      "name": "spring.rabbitmq.port",
      "description": "RabbitMQ port.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "defaultValue": false,
      "name": "spring.rabbitmq.publisher-confirms",
      "description": "Enable publisher confirms.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "defaultValue": false,
      "name": "spring.rabbitmq.publisher-returns",
      "description": "Enable publisher returns.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "name": "spring.rabbitmq.requested-heartbeat",
      "description": "Requested heartbeat timeout, in seconds; zero for none.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl",
      "name": "spring.rabbitmq.ssl.algorithm",
      "description": "SSL algorithm to use (e.g. TLSv1.1). Default is set automatically by the rabbit client library.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl",
      "defaultValue": false,
      "name": "spring.rabbitmq.ssl.enabled",
      "description": "Enable SSL support.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl",
      "name": "spring.rabbitmq.ssl.key-store",
      "description": "Path to the key store that holds the SSL certificate.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl",
      "name": "spring.rabbitmq.ssl.key-store-password",
      "description": "Password used to access the key store.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl",
      "name": "spring.rabbitmq.ssl.trust-store",
      "description": "Trust store that holds SSL certificates.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl",
      "name": "spring.rabbitmq.ssl.trust-store-password",
      "description": "Password used to access the trust store.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl",
      "defaultValue": true,
      "name": "spring.rabbitmq.ssl.validate-server-certificate",
      "description": "Whether to enable server side certificate validation.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Ssl",
      "name": "spring.rabbitmq.ssl.verify-hostname",
      "description": "Whether to enable hostname verification. Requires AMQP client 4.8 or above and defaults to true when a suitable client version is used.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Template",
      "name": "spring.rabbitmq.template.mandatory",
      "description": "Enable mandatory messages. If a mandatory message cannot be routed to a queue by the server, it will return an unroutable message with a Return method.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Template",
      "name": "spring.rabbitmq.template.receive-timeout",
      "description": "Timeout for receive() operations.",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Template",
      "name": "spring.rabbitmq.template.reply-timeout",
      "description": "Timeout for sendAndReceive() operations.",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Retry",
      "defaultValue": false,
      "name": "spring.rabbitmq.template.retry.enabled",
      "description": "Whether or not publishing retries are enabled.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Retry",
      "defaultValue": 1000,
      "name": "spring.rabbitmq.template.retry.initial-interval",
      "description": "Interval between the first and second attempt to publish or deliver a message.",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Retry",
      "defaultValue": 3,
      "name": "spring.rabbitmq.template.retry.max-attempts",
      "description": "Maximum number of attempts to publish or deliver a message.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Retry",
      "defaultValue": 10000,
      "name": "spring.rabbitmq.template.retry.max-interval",
      "description": "Maximum interval between attempts.",
      "type": "java.lang.Long"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties$Retry",
      "defaultValue": 1,
      "name": "spring.rabbitmq.template.retry.multiplier",
      "description": "A multiplier to apply to the previous retry interval.",
      "type": "java.lang.Double"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "name": "spring.rabbitmq.username",
      "description": "Login user to authenticate to the broker.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.amqp.RabbitProperties",
      "name": "spring.rabbitmq.virtual-host",
      "description": "Virtual host to use when connecting to the broker.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Cluster",
      "name": "spring.redis.cluster.max-redirects",
      "description": "Maximum number of redirects to follow when executing commands across the cluster.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Cluster",
      "name": "spring.redis.cluster.nodes",
      "description": "Comma-separated list of \"host:port\" pairs to bootstrap from. This represents an \"initial\" list of cluster nodes and is required to have at least one entry.",
      "type": "java.util.List<java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "defaultValue": 0,
      "name": "spring.redis.database",
      "description": "Database index used by the connection factory.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "defaultValue": "localhost",
      "name": "spring.redis.host",
      "description": "Redis server host.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "name": "spring.redis.password",
      "description": "Login password of the redis server.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool",
      "defaultValue": 8,
      "name": "spring.redis.pool.max-active",
      "description": "Max number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool",
      "defaultValue": 8,
      "name": "spring.redis.pool.max-idle",
      "description": "Max number of \"idle\" connections in the pool. Use a negative value to indicate an unlimited number of idle connections.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool",
      "defaultValue": -1,
      "name": "spring.redis.pool.max-wait",
      "description": "Maximum amount of time (in milliseconds) a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool",
      "defaultValue": 0,
      "name": "spring.redis.pool.min-idle",
      "description": "Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "defaultValue": 6379,
      "name": "spring.redis.port",
      "description": "Redis server port.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Sentinel",
      "name": "spring.redis.sentinel.master",
      "description": "Name of Redis server.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Sentinel",
      "name": "spring.redis.sentinel.nodes",
      "description": "Comma-separated list of host:port pairs.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "defaultValue": false,
      "name": "spring.redis.ssl",
      "description": "Enable SSL.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "defaultValue": 0,
      "name": "spring.redis.timeout",
      "description": "Connection timeout in milliseconds.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.data.redis.RedisProperties",
      "name": "spring.redis.url",
      "description": "Redis url, which will overrule host, port and password if set.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties",
      "defaultValue": true,
      "name": "spring.resources.add-mappings",
      "description": "Enable default resource handling.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties",
      "name": "spring.resources.cache-period",
      "description": "Cache period for the resources served by the resource handler, in seconds.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Chain",
      "defaultValue": true,
      "name": "spring.resources.chain.cache",
      "description": "Enable caching in the Resource chain.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Chain",
      "name": "spring.resources.chain.enabled",
      "description": "Enable the Spring Resource Handling chain. Disabled by default unless at least one strategy has been enabled.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Chain",
      "defaultValue": false,
      "name": "spring.resources.chain.gzipped",
      "description": "Enable resolution of already gzipped resources. Checks for a resource name variant with the \"*.gz\" extension.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Chain",
      "defaultValue": false,
      "name": "spring.resources.chain.html-application-cache",
      "description": "Enable HTML5 application cache manifest rewriting.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Content",
      "defaultValue": false,
      "name": "spring.resources.chain.strategy.content.enabled",
      "description": "Enable the content Version Strategy.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Content",
      "defaultValue": [
        "\/**"
      ],
      "name": "spring.resources.chain.strategy.content.paths",
      "description": "Comma-separated list of patterns to apply to the Version Strategy.",
      "type": "java.lang.String[]"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Fixed",
      "defaultValue": false,
      "name": "spring.resources.chain.strategy.fixed.enabled",
      "description": "Enable the fixed Version Strategy.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Fixed",
      "defaultValue": [
        "\/**"
      ],
      "name": "spring.resources.chain.strategy.fixed.paths",
      "description": "Comma-separated list of patterns to apply to the Version Strategy.",
      "type": "java.lang.String[]"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties$Fixed",
      "name": "spring.resources.chain.strategy.fixed.version",
      "description": "Version string to use for the Version Strategy.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.web.ResourceProperties",
      "name": "spring.resources.static-locations",
      "description": "Locations of static resources. Defaults to classpath:[\/META-INF\/resources\/, \/resources\/, \/static\/, \/public\/] plus context:\/ (the root of the servlet context).",
      "type": "java.lang.String[]"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.sendgrid.SendGridProperties",
      "name": "spring.sendgrid.api-key",
      "description": "SendGrid api key. Alternative to username\/password.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.sendgrid.SendGridProperties",
      "name": "spring.sendgrid.password",
      "description": "SendGrid password.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.sendgrid.SendGridProperties$Proxy",
      "name": "spring.sendgrid.proxy.host",
      "description": "SendGrid proxy host.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.sendgrid.SendGridProperties$Proxy",
      "name": "spring.sendgrid.proxy.port",
      "description": "SendGrid proxy port.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.sendgrid.SendGridProperties",
      "name": "spring.sendgrid.username",
      "description": "SendGrid username. Alternative to api key.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties$Hazelcast",
      "defaultValue": "on-save",
      "name": "spring.session.hazelcast.flush-mode",
      "description": "Sessions flush mode.",
      "type": "org.springframework.session.hazelcast.HazelcastFlushMode"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties$Hazelcast",
      "defaultValue": "spring:session:sessions",
      "name": "spring.session.hazelcast.map-name",
      "description": "Name of the map used to store sessions.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties$Jdbc$Initializer",
      "name": "spring.session.jdbc.initializer.enabled",
      "description": "Create the required session tables on startup if necessary. Enabled automatically if the default table name is set or a custom schema is configured.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties$Jdbc",
      "defaultValue": "classpath:org\/springframework\/session\/jdbc\/schema-@@platform@@.sql",
      "name": "spring.session.jdbc.schema",
      "description": "Path to the SQL file to use to initialize the database schema.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties$Jdbc",
      "defaultValue": "SPRING_SESSION",
      "name": "spring.session.jdbc.table-name",
      "description": "Name of database table used to store sessions.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties$Mongo",
      "defaultValue": "sessions",
      "name": "spring.session.mongo.collection-name",
      "description": "Collection name used to store sessions.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties$Redis",
      "defaultValue": "on-save",
      "name": "spring.session.redis.flush-mode",
      "description": "Sessions flush mode.",
      "type": "org.springframework.session.data.redis.RedisFlushMode"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties$Redis",
      "defaultValue": "",
      "name": "spring.session.redis.namespace",
      "description": "Namespace for keys used to store sessions.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.session.SessionProperties",
      "name": "spring.session.store-type",
      "description": "Session store type.",
      "type": "org.springframework.boot.autoconfigure.session.StoreType"
    },
    {
      "defaultValue": false,
      "name": "spring.social.auto-connection-views",
      "description": "Enable the connection status view for supported providers.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.social.FacebookProperties",
      "name": "spring.social.facebook.app-id",
      "description": "Application id.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.social.FacebookProperties",
      "name": "spring.social.facebook.app-secret",
      "description": "Application secret.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.social.LinkedInProperties",
      "name": "spring.social.linkedin.app-id",
      "description": "Application id.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.social.LinkedInProperties",
      "name": "spring.social.linkedin.app-secret",
      "description": "Application secret.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.social.TwitterProperties",
      "name": "spring.social.twitter.app-id",
      "description": "Application id.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.social.TwitterProperties",
      "name": "spring.social.twitter.app-secret",
      "description": "Application secret.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": true,
      "name": "spring.thymeleaf.cache",
      "description": "Enable template caching.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": true,
      "name": "spring.thymeleaf.check-template",
      "description": "Check that the template exists before rendering it (Thymeleaf 3+).",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": true,
      "name": "spring.thymeleaf.check-template-location",
      "description": "Check that the templates location exists.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": "text\/html",
      "name": "spring.thymeleaf.content-type",
      "description": "Content-Type value.",
      "type": "org.springframework.util.MimeType"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": true,
      "name": "spring.thymeleaf.enabled",
      "description": "Enable MVC Thymeleaf view resolution.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": "UTF-8",
      "name": "spring.thymeleaf.encoding",
      "description": "Template encoding.",
      "type": "java.nio.charset.Charset"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "name": "spring.thymeleaf.excluded-view-names",
      "description": "Comma-separated list of view names that should be excluded from resolution.",
      "type": "java.lang.String[]"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": "HTML5",
      "name": "spring.thymeleaf.mode",
      "description": "Template mode to be applied to templates. See also StandardTemplateModeHandlers.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": "classpath:\/templates\/",
      "name": "spring.thymeleaf.prefix",
      "description": "Prefix that gets prepended to view names when building a URL.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "defaultValue": ".html",
      "name": "spring.thymeleaf.suffix",
      "description": "Suffix that gets appended to view names when building a URL.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "name": "spring.thymeleaf.template-resolver-order",
      "description": "Order of the template resolver in the chain. By default, the template resolver is first in the chain. Order start at 1 and should only be set if you have defined additional \"TemplateResolver\" beans.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties",
      "name": "spring.thymeleaf.view-names",
      "description": "Comma-separated list of view names that can be resolved.",
      "type": "java.lang.String[]"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.transaction.TransactionProperties",
      "name": "spring.transaction.default-timeout",
      "description": "Default transaction timeout in seconds.",
      "type": "java.lang.Integer"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.transaction.TransactionProperties",
      "name": "spring.transaction.rollback-on-commit-failure",
      "description": "Perform the rollback on commit failures.",
      "type": "java.lang.Boolean"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.webservices.WebServicesProperties",
      "defaultValue": "\/services",
      "name": "spring.webservices.path",
      "description": "Path that serves as the base URI for the services.",
      "type": "java.lang.String"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.webservices.WebServicesProperties$Servlet",
      "name": "spring.webservices.servlet.init",
      "description": "Servlet init parameters to pass to Spring Web Services.",
      "type": "java.util.Map<java.lang.String,java.lang.String>"
    },
    {
      "sourceType": "org.springframework.boot.autoconfigure.webservices.WebServicesProperties$Servlet",
      "defaultValue": -1,
      "name": "spring.webservices.servlet.load-on-startup",
      "description": "Load on startup priority of the Spring Web Services servlet.",
      "type": "java.lang.Integer"
    }
  ]
}