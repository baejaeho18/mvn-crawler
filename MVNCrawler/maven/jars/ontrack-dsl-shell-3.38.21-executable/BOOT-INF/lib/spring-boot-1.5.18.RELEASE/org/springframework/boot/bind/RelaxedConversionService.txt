Compiled from "RelaxedConversionService.java"
class org.springframework.boot.bind.RelaxedConversionService implements org.springframework.core.convert.ConversionService {
  private final org.springframework.core.convert.ConversionService conversionService;

  private final org.springframework.core.convert.support.GenericConversionService additionalConverters;

  org.springframework.boot.bind.RelaxedConversionService(org.springframework.core.convert.ConversionService);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field conversionService:Lorg/springframework/core/convert/ConversionService;
       9: aload_0
      10: new           #3                  // class org/springframework/core/convert/support/GenericConversionService
      13: dup
      14: invokespecial #4                  // Method org/springframework/core/convert/support/GenericConversionService."<init>":()V
      17: putfield      #5                  // Field additionalConverters:Lorg/springframework/core/convert/support/GenericConversionService;
      20: aload_0
      21: getfield      #5                  // Field additionalConverters:Lorg/springframework/core/convert/support/GenericConversionService;
      24: invokestatic  #6                  // Method org/springframework/core/convert/support/DefaultConversionService.addCollectionConverters:(Lorg/springframework/core/convert/converter/ConverterRegistry;)V
      27: aload_0
      28: getfield      #5                  // Field additionalConverters:Lorg/springframework/core/convert/support/GenericConversionService;
      31: new           #7                  // class org/springframework/boot/bind/RelaxedConversionService$StringToEnumIgnoringCaseConverterFactory
      34: dup
      35: aconst_null
      36: invokespecial #8                  // Method org/springframework/boot/bind/RelaxedConversionService$StringToEnumIgnoringCaseConverterFactory."<init>":(Lorg/springframework/boot/bind/RelaxedConversionService$1;)V
      39: invokevirtual #9                  // Method org/springframework/core/convert/support/GenericConversionService.addConverterFactory:(Lorg/springframework/core/convert/converter/ConverterFactory;)V
      42: aload_0
      43: getfield      #5                  // Field additionalConverters:Lorg/springframework/core/convert/support/GenericConversionService;
      46: new           #10                 // class org/springframework/boot/bind/StringToCharArrayConverter
      49: dup
      50: invokespecial #11                 // Method org/springframework/boot/bind/StringToCharArrayConverter."<init>":()V
      53: invokevirtual #12                 // Method org/springframework/core/convert/support/GenericConversionService.addConverter:(Lorg/springframework/core/convert/converter/Converter;)V
      56: return

  public boolean canConvert(java.lang.Class<?>, java.lang.Class<?>);
    Code:
       0: aload_0
       1: getfield      #2                  // Field conversionService:Lorg/springframework/core/convert/ConversionService;
       4: ifnull        21
       7: aload_0
       8: getfield      #2                  // Field conversionService:Lorg/springframework/core/convert/ConversionService;
      11: aload_1
      12: aload_2
      13: invokeinterface #13,  3           // InterfaceMethod org/springframework/core/convert/ConversionService.canConvert:(Ljava/lang/Class;Ljava/lang/Class;)Z
      18: ifne          33
      21: aload_0
      22: getfield      #5                  // Field additionalConverters:Lorg/springframework/core/convert/support/GenericConversionService;
      25: aload_1
      26: aload_2
      27: invokevirtual #14                 // Method org/springframework/core/convert/support/GenericConversionService.canConvert:(Ljava/lang/Class;Ljava/lang/Class;)Z
      30: ifeq          37
      33: iconst_1
      34: goto          38
      37: iconst_0
      38: ireturn

  public boolean canConvert(org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor);
    Code:
       0: aload_0
       1: getfield      #2                  // Field conversionService:Lorg/springframework/core/convert/ConversionService;
       4: ifnull        21
       7: aload_0
       8: getfield      #2                  // Field conversionService:Lorg/springframework/core/convert/ConversionService;
      11: aload_1
      12: aload_2
      13: invokeinterface #15,  3           // InterfaceMethod org/springframework/core/convert/ConversionService.canConvert:(Lorg/springframework/core/convert/TypeDescriptor;Lorg/springframework/core/convert/TypeDescriptor;)Z
      18: ifne          33
      21: aload_0
      22: getfield      #5                  // Field additionalConverters:Lorg/springframework/core/convert/support/GenericConversionService;
      25: aload_1
      26: aload_2
      27: invokevirtual #16                 // Method org/springframework/core/convert/support/GenericConversionService.canConvert:(Lorg/springframework/core/convert/TypeDescriptor;Lorg/springframework/core/convert/TypeDescriptor;)Z
      30: ifeq          37
      33: iconst_1
      34: goto          38
      37: iconst_0
      38: ireturn

  public <T> T convert(java.lang.Object, java.lang.Class<T>);
    Code:
       0: aload_2
       1: ldc           #17                 // String The targetType to convert to cannot be null
       3: invokestatic  #18                 // Method org/springframework/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: aload_1
       9: invokestatic  #19                 // Method org/springframework/core/convert/TypeDescriptor.forObject:(Ljava/lang/Object;)Lorg/springframework/core/convert/TypeDescriptor;
      12: aload_2
      13: invokestatic  #20                 // Method org/springframework/core/convert/TypeDescriptor.valueOf:(Ljava/lang/Class;)Lorg/springframework/core/convert/TypeDescriptor;
      16: invokevirtual #21                 // Method convert:(Ljava/lang/Object;Lorg/springframework/core/convert/TypeDescriptor;Lorg/springframework/core/convert/TypeDescriptor;)Ljava/lang/Object;
      19: areturn

  public java.lang.Object convert(java.lang.Object, org.springframework.core.convert.TypeDescriptor, org.springframework.core.convert.TypeDescriptor);
    Code:
       0: aload_0
       1: getfield      #2                  // Field conversionService:Lorg/springframework/core/convert/ConversionService;
       4: ifnull        22
       7: aload_0
       8: getfield      #2                  // Field conversionService:Lorg/springframework/core/convert/ConversionService;
      11: aload_1
      12: aload_2
      13: aload_3
      14: invokeinterface #22,  4           // InterfaceMethod org/springframework/core/convert/ConversionService.convert:(Ljava/lang/Object;Lorg/springframework/core/convert/TypeDescriptor;Lorg/springframework/core/convert/TypeDescriptor;)Ljava/lang/Object;
      19: areturn
      20: astore        4
      22: aload_0
      23: getfield      #5                  // Field additionalConverters:Lorg/springframework/core/convert/support/GenericConversionService;
      26: aload_1
      27: aload_2
      28: aload_3
      29: invokevirtual #24                 // Method org/springframework/core/convert/support/GenericConversionService.convert:(Ljava/lang/Object;Lorg/springframework/core/convert/TypeDescriptor;Lorg/springframework/core/convert/TypeDescriptor;)Ljava/lang/Object;
      32: areturn
    Exception table:
       from    to  target type
           7    19    20   Class org/springframework/core/convert/ConversionFailedException
}
