Compiled from "AbstractExecutionAwareRequest.java"
public abstract class org.apache.http.client.methods.AbstractExecutionAwareRequest extends org.apache.http.message.AbstractHttpMessage implements org.apache.http.client.methods.HttpExecutionAware,org.apache.http.client.methods.AbortableHttpRequest,java.lang.Cloneable,org.apache.http.HttpRequest {
  private final java.util.concurrent.atomic.AtomicBoolean aborted;

  private final java.util.concurrent.atomic.AtomicReference<org.apache.http.concurrent.Cancellable> cancellableRef;

  protected org.apache.http.client.methods.AbstractExecutionAwareRequest();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/http/message/AbstractHttpMessage."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/atomic/AtomicBoolean
       8: dup
       9: iconst_0
      10: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicBoolean."<init>":(Z)V
      13: putfield      #4                  // Field aborted:Ljava/util/concurrent/atomic/AtomicBoolean;
      16: aload_0
      17: new           #5                  // class java/util/concurrent/atomic/AtomicReference
      20: dup
      21: aconst_null
      22: invokespecial #6                  // Method java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
      25: putfield      #7                  // Field cancellableRef:Ljava/util/concurrent/atomic/AtomicReference;
      28: return

  public void setConnectionRequest(org.apache.http.conn.ClientConnectionRequest);
    Code:
       0: aload_0
       1: new           #8                  // class org/apache/http/client/methods/AbstractExecutionAwareRequest$1
       4: dup
       5: aload_0
       6: aload_1
       7: invokespecial #9                  // Method org/apache/http/client/methods/AbstractExecutionAwareRequest$1."<init>":(Lorg/apache/http/client/methods/AbstractExecutionAwareRequest;Lorg/apache/http/conn/ClientConnectionRequest;)V
      10: invokevirtual #10                 // Method setCancellable:(Lorg/apache/http/concurrent/Cancellable;)V
      13: return

  public void setReleaseTrigger(org.apache.http.conn.ConnectionReleaseTrigger);
    Code:
       0: aload_0
       1: new           #11                 // class org/apache/http/client/methods/AbstractExecutionAwareRequest$2
       4: dup
       5: aload_0
       6: aload_1
       7: invokespecial #12                 // Method org/apache/http/client/methods/AbstractExecutionAwareRequest$2."<init>":(Lorg/apache/http/client/methods/AbstractExecutionAwareRequest;Lorg/apache/http/conn/ConnectionReleaseTrigger;)V
      10: invokevirtual #10                 // Method setCancellable:(Lorg/apache/http/concurrent/Cancellable;)V
      13: return

  public void abort();
    Code:
       0: aload_0
       1: getfield      #4                  // Field aborted:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_0
       5: iconst_1
       6: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
       9: ifeq          35
      12: aload_0
      13: getfield      #7                  // Field cancellableRef:Ljava/util/concurrent/atomic/AtomicReference;
      16: aconst_null
      17: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicReference.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;
      20: checkcast     #15                 // class org/apache/http/concurrent/Cancellable
      23: astore_1
      24: aload_1
      25: ifnull        35
      28: aload_1
      29: invokeinterface #16,  1           // InterfaceMethod org/apache/http/concurrent/Cancellable.cancel:()Z
      34: pop
      35: return

  public boolean isAborted();
    Code:
       0: aload_0
       1: getfield      #4                  // Field aborted:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       7: ireturn

  public void setCancellable(org.apache.http.concurrent.Cancellable);
    Code:
       0: aload_0
       1: getfield      #4                  // Field aborted:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       7: ifne          18
      10: aload_0
      11: getfield      #7                  // Field cancellableRef:Ljava/util/concurrent/atomic/AtomicReference;
      14: aload_1
      15: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      18: return

  public java.lang.Object clone() throws java.lang.CloneNotSupportedException;
    Code:
       0: aload_0
       1: invokespecial #19                 // Method java/lang/Object.clone:()Ljava/lang/Object;
       4: checkcast     #20                 // class org/apache/http/client/methods/AbstractExecutionAwareRequest
       7: astore_1
       8: aload_1
       9: aload_0
      10: getfield      #21                 // Field headergroup:Lorg/apache/http/message/HeaderGroup;
      13: invokestatic  #22                 // Method org/apache/http/client/utils/CloneUtils.cloneObject:(Ljava/lang/Object;)Ljava/lang/Object;
      16: checkcast     #23                 // class org/apache/http/message/HeaderGroup
      19: putfield      #21                 // Field headergroup:Lorg/apache/http/message/HeaderGroup;
      22: aload_1
      23: aload_0
      24: getfield      #24                 // Field params:Lorg/apache/http/params/HttpParams;
      27: invokestatic  #22                 // Method org/apache/http/client/utils/CloneUtils.cloneObject:(Ljava/lang/Object;)Ljava/lang/Object;
      30: checkcast     #25                 // class org/apache/http/params/HttpParams
      33: putfield      #24                 // Field params:Lorg/apache/http/params/HttpParams;
      36: aload_1
      37: areturn

  public void completed();
    Code:
       0: aload_0
       1: getfield      #7                  // Field cancellableRef:Ljava/util/concurrent/atomic/AtomicReference;
       4: aconst_null
       5: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
       8: return

  public void reset();
    Code:
       0: aload_0
       1: getfield      #7                  // Field cancellableRef:Ljava/util/concurrent/atomic/AtomicReference;
       4: aconst_null
       5: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicReference.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;
       8: checkcast     #15                 // class org/apache/http/concurrent/Cancellable
      11: astore_1
      12: aload_1
      13: ifnull        23
      16: aload_1
      17: invokeinterface #16,  1           // InterfaceMethod org/apache/http/concurrent/Cancellable.cancel:()Z
      22: pop
      23: aload_0
      24: getfield      #4                  // Field aborted:Ljava/util/concurrent/atomic/AtomicBoolean;
      27: iconst_0
      28: invokevirtual #26                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
      31: return
}
