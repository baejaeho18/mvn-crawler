Compiled from "ClosedState.java"
public class net.jodah.failsafe.internal.ClosedState extends net.jodah.failsafe.internal.CircuitState {
  private final net.jodah.failsafe.CircuitBreaker circuit;

  private net.jodah.failsafe.internal.util.CircularBitSet bitSet;

  public net.jodah.failsafe.internal.ClosedState(net.jodah.failsafe.CircuitBreaker);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method net/jodah/failsafe/internal/CircuitState."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field circuit:Lnet/jodah/failsafe/CircuitBreaker;
       9: aload_0
      10: aload_1
      11: invokevirtual #3                  // Method net/jodah/failsafe/CircuitBreaker.getFailureThreshold:()Lnet/jodah/failsafe/util/Ratio;
      14: ifnull        24
      17: aload_1
      18: invokevirtual #3                  // Method net/jodah/failsafe/CircuitBreaker.getFailureThreshold:()Lnet/jodah/failsafe/util/Ratio;
      21: goto          27
      24: getstatic     #4                  // Field ONE_OF_ONE:Lnet/jodah/failsafe/util/Ratio;
      27: invokevirtual #5                  // Method setFailureThreshold:(Lnet/jodah/failsafe/util/Ratio;)V
      30: return

  public boolean allowsExecution(net.jodah.failsafe.internal.CircuitBreakerStats);
    Code:
       0: iconst_1
       1: ireturn

  public net.jodah.failsafe.CircuitBreaker$State getState();
    Code:
       0: getstatic     #6                  // Field net/jodah/failsafe/CircuitBreaker$State.CLOSED:Lnet/jodah/failsafe/CircuitBreaker$State;
       3: areturn

  public synchronized void recordFailure();
    Code:
       0: aload_0
       1: getfield      #7                  // Field bitSet:Lnet/jodah/failsafe/internal/util/CircularBitSet;
       4: iconst_0
       5: invokevirtual #8                  // Method net/jodah/failsafe/internal/util/CircularBitSet.setNext:(Z)I
       8: pop
       9: aload_0
      10: invokevirtual #9                  // Method checkThreshold:()V
      13: return

  public synchronized void recordSuccess();
    Code:
       0: aload_0
       1: getfield      #7                  // Field bitSet:Lnet/jodah/failsafe/internal/util/CircularBitSet;
       4: iconst_1
       5: invokevirtual #8                  // Method net/jodah/failsafe/internal/util/CircularBitSet.setNext:(Z)I
       8: pop
       9: aload_0
      10: invokevirtual #9                  // Method checkThreshold:()V
      13: return

  public void setFailureThreshold(net.jodah.failsafe.util.Ratio);
    Code:
       0: aload_0
       1: new           #10                 // class net/jodah/failsafe/internal/util/CircularBitSet
       4: dup
       5: aload_1
       6: getfield      #11                 // Field net/jodah/failsafe/util/Ratio.denominator:I
       9: aload_0
      10: getfield      #7                  // Field bitSet:Lnet/jodah/failsafe/internal/util/CircularBitSet;
      13: invokespecial #12                 // Method net/jodah/failsafe/internal/util/CircularBitSet."<init>":(ILnet/jodah/failsafe/internal/util/CircularBitSet;)V
      16: putfield      #7                  // Field bitSet:Lnet/jodah/failsafe/internal/util/CircularBitSet;
      19: return

  synchronized void checkThreshold();
    Code:
       0: aload_0
       1: getfield      #2                  // Field circuit:Lnet/jodah/failsafe/CircuitBreaker;
       4: invokevirtual #3                  // Method net/jodah/failsafe/CircuitBreaker.getFailureThreshold:()Lnet/jodah/failsafe/util/Ratio;
       7: astore_1
       8: aload_1
       9: ifnull        48
      12: aload_0
      13: getfield      #7                  // Field bitSet:Lnet/jodah/failsafe/internal/util/CircularBitSet;
      16: invokevirtual #13                 // Method net/jodah/failsafe/internal/util/CircularBitSet.occupiedBits:()I
      19: aload_1
      20: getfield      #11                 // Field net/jodah/failsafe/util/Ratio.denominator:I
      23: if_icmplt     48
      26: aload_0
      27: getfield      #7                  // Field bitSet:Lnet/jodah/failsafe/internal/util/CircularBitSet;
      30: invokevirtual #14                 // Method net/jodah/failsafe/internal/util/CircularBitSet.negativeRatio:()D
      33: aload_1
      34: getfield      #15                 // Field net/jodah/failsafe/util/Ratio.ratio:D
      37: dcmpl
      38: iflt          48
      41: aload_0
      42: getfield      #2                  // Field circuit:Lnet/jodah/failsafe/CircuitBreaker;
      45: invokevirtual #16                 // Method net/jodah/failsafe/CircuitBreaker.open:()V
      48: aload_1
      49: ifnonnull     71
      52: aload_0
      53: getfield      #7                  // Field bitSet:Lnet/jodah/failsafe/internal/util/CircularBitSet;
      56: invokevirtual #14                 // Method net/jodah/failsafe/internal/util/CircularBitSet.negativeRatio:()D
      59: dconst_1
      60: dcmpl
      61: ifne          71
      64: aload_0
      65: getfield      #2                  // Field circuit:Lnet/jodah/failsafe/CircuitBreaker;
      68: invokevirtual #16                 // Method net/jodah/failsafe/CircuitBreaker.open:()V
      71: return
}
