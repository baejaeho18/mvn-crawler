Compiled from "RetryPolicy.java"
public class net.jodah.failsafe.RetryPolicy {
  static final net.jodah.failsafe.RetryPolicy NEVER;

  private net.jodah.failsafe.util.Duration delay;

  private net.jodah.failsafe.util.Duration delayMin;

  private net.jodah.failsafe.util.Duration delayMax;

  private double delayFactor;

  private net.jodah.failsafe.util.Duration maxDelay;

  private net.jodah.failsafe.RetryPolicy$DelayFunction<?, ? extends java.lang.Throwable> delayFn;

  private java.lang.Object delayResult;

  private java.lang.Class<? extends java.lang.Throwable> delayFailure;

  private net.jodah.failsafe.util.Duration jitter;

  private double jitterFactor;

  private net.jodah.failsafe.util.Duration maxDuration;

  private int maxRetries;

  private boolean failuresChecked;

  private java.util.List<net.jodah.failsafe.function.BiPredicate<java.lang.Object, java.lang.Throwable>> retryConditions;

  private java.util.List<net.jodah.failsafe.function.BiPredicate<java.lang.Object, java.lang.Throwable>> abortConditions;

  public net.jodah.failsafe.RetryPolicy();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: getstatic     #2                  // Field net/jodah/failsafe/util/Duration.NONE:Lnet/jodah/failsafe/util/Duration;
       8: putfield      #3                  // Field delay:Lnet/jodah/failsafe/util/Duration;
      11: aload_0
      12: iconst_m1
      13: putfield      #4                  // Field maxRetries:I
      16: aload_0
      17: new           #5                  // class java/util/ArrayList
      20: dup
      21: invokespecial #6                  // Method java/util/ArrayList."<init>":()V
      24: putfield      #7                  // Field retryConditions:Ljava/util/List;
      27: aload_0
      28: new           #5                  // class java/util/ArrayList
      31: dup
      32: invokespecial #6                  // Method java/util/ArrayList."<init>":()V
      35: putfield      #8                  // Field abortConditions:Ljava/util/List;
      38: return

  public net.jodah.failsafe.RetryPolicy(net.jodah.failsafe.RetryPolicy);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: getfield      #3                  // Field delay:Lnet/jodah/failsafe/util/Duration;
       9: putfield      #3                  // Field delay:Lnet/jodah/failsafe/util/Duration;
      12: aload_0
      13: aload_1
      14: getfield      #9                  // Field delayFactor:D
      17: putfield      #9                  // Field delayFactor:D
      20: aload_0
      21: aload_1
      22: getfield      #10                 // Field maxDelay:Lnet/jodah/failsafe/util/Duration;
      25: putfield      #10                 // Field maxDelay:Lnet/jodah/failsafe/util/Duration;
      28: aload_0
      29: aload_1
      30: getfield      #11                 // Field maxDuration:Lnet/jodah/failsafe/util/Duration;
      33: putfield      #11                 // Field maxDuration:Lnet/jodah/failsafe/util/Duration;
      36: aload_0
      37: aload_1
      38: getfield      #4                  // Field maxRetries:I
      41: putfield      #4                  // Field maxRetries:I
      44: aload_0
      45: aload_1
      46: getfield      #12                 // Field jitter:Lnet/jodah/failsafe/util/Duration;
      49: putfield      #12                 // Field jitter:Lnet/jodah/failsafe/util/Duration;
      52: aload_0
      53: aload_1
      54: getfield      #13                 // Field jitterFactor:D
      57: putfield      #13                 // Field jitterFactor:D
      60: aload_0
      61: aload_1
      62: getfield      #14                 // Field failuresChecked:Z
      65: putfield      #14                 // Field failuresChecked:Z
      68: aload_0
      69: new           #5                  // class java/util/ArrayList
      72: dup
      73: aload_1
      74: getfield      #7                  // Field retryConditions:Ljava/util/List;
      77: invokespecial #15                 // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
      80: putfield      #7                  // Field retryConditions:Ljava/util/List;
      83: aload_0
      84: new           #5                  // class java/util/ArrayList
      87: dup
      88: aload_1
      89: getfield      #8                  // Field abortConditions:Ljava/util/List;
      92: invokespecial #15                 // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
      95: putfield      #8                  // Field abortConditions:Ljava/util/List;
      98: return

  public <T> net.jodah.failsafe.RetryPolicy abortIf(net.jodah.failsafe.function.BiPredicate<T, ? extends java.lang.Throwable>);
    Code:
       0: aload_1
       1: ldc           #16                 // String completionPredicate
       3: invokestatic  #17                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: getfield      #8                  // Field abortConditions:Ljava/util/List;
      11: aload_1
      12: invokeinterface #18,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      17: pop
      18: aload_0
      19: areturn

  public <T> net.jodah.failsafe.RetryPolicy abortIf(net.jodah.failsafe.function.Predicate<T>);
    Code:
       0: aload_1
       1: ldc           #19                 // String resultPredicate
       3: invokestatic  #17                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: getfield      #8                  // Field abortConditions:Ljava/util/List;
      11: aload_1
      12: invokestatic  #20                 // Method net/jodah/failsafe/Predicates.resultPredicateFor:(Lnet/jodah/failsafe/function/Predicate;)Lnet/jodah/failsafe/function/BiPredicate;
      15: invokeinterface #18,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      20: pop
      21: aload_0
      22: areturn

  public net.jodah.failsafe.RetryPolicy abortOn(java.lang.Class<? extends java.lang.Throwable>);
    Code:
       0: aload_1
       1: ldc           #21                 // String failure
       3: invokestatic  #17                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: iconst_1
       9: anewarray     #22                 // class java/lang/Class
      12: dup
      13: iconst_0
      14: aload_1
      15: aastore
      16: invokestatic  #23                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      19: invokevirtual #24                 // Method abortOn:(Ljava/util/List;)Lnet/jodah/failsafe/RetryPolicy;
      22: areturn

  public net.jodah.failsafe.RetryPolicy abortOn(java.lang.Class<? extends java.lang.Throwable>...);
    Code:
       0: aload_1
       1: ldc           #25                 // String failures
       3: invokestatic  #17                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_1
       8: arraylength
       9: ifle          16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: ldc           #26                 // String Failures cannot be empty
      19: iconst_0
      20: anewarray     #27                 // class java/lang/Object
      23: invokestatic  #28                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      26: aload_0
      27: aload_1
      28: invokestatic  #23                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      31: invokevirtual #24                 // Method abortOn:(Ljava/util/List;)Lnet/jodah/failsafe/RetryPolicy;
      34: areturn

  public net.jodah.failsafe.RetryPolicy abortOn(java.util.List<java.lang.Class<? extends java.lang.Throwable>>);
    Code:
       0: aload_1
       1: ldc           #25                 // String failures
       3: invokestatic  #17                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_1
       8: invokeinterface #29,  1           // InterfaceMethod java/util/List.isEmpty:()Z
      13: ifne          20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: ldc           #30                 // String failures cannot be empty
      23: iconst_0
      24: anewarray     #27                 // class java/lang/Object
      27: invokestatic  #28                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      30: aload_0
      31: getfield      #8                  // Field abortConditions:Ljava/util/List;
      34: aload_1
      35: invokestatic  #31                 // Method net/jodah/failsafe/Predicates.failurePredicateFor:(Ljava/util/List;)Lnet/jodah/failsafe/function/BiPredicate;
      38: invokeinterface #18,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      43: pop
      44: aload_0
      45: areturn

  public net.jodah.failsafe.RetryPolicy abortOn(net.jodah.failsafe.function.Predicate<? extends java.lang.Throwable>);
    Code:
       0: aload_1
       1: ldc           #32                 // String failurePredicate
       3: invokestatic  #17                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: getfield      #8                  // Field abortConditions:Ljava/util/List;
      11: aload_1
      12: invokestatic  #33                 // Method net/jodah/failsafe/Predicates.failurePredicateFor:(Lnet/jodah/failsafe/function/Predicate;)Lnet/jodah/failsafe/function/BiPredicate;
      15: invokeinterface #18,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      20: pop
      21: aload_0
      22: areturn

  public net.jodah.failsafe.RetryPolicy abortWhen(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #8                  // Field abortConditions:Ljava/util/List;
       4: aload_1
       5: invokestatic  #34                 // Method net/jodah/failsafe/Predicates.resultPredicateFor:(Ljava/lang/Object;)Lnet/jodah/failsafe/function/BiPredicate;
       8: invokeinterface #18,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      13: pop
      14: aload_0
      15: areturn

  public boolean allowsRetries();
    Code:
       0: aload_0
       1: getfield      #4                  // Field maxRetries:I
       4: iconst_m1
       5: if_icmpeq     15
       8: aload_0
       9: getfield      #4                  // Field maxRetries:I
      12: ifle          38
      15: aload_0
      16: getfield      #11                 // Field maxDuration:Lnet/jodah/failsafe/util/Duration;
      19: ifnull        34
      22: aload_0
      23: getfield      #11                 // Field maxDuration:Lnet/jodah/failsafe/util/Duration;
      26: invokevirtual #35                 // Method net/jodah/failsafe/util/Duration.toNanos:()J
      29: lconst_0
      30: lcmp
      31: ifle          38
      34: iconst_1
      35: goto          39
      38: iconst_0
      39: ireturn

  public boolean canAbortFor(java.lang.Object, java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #8                  // Field abortConditions:Ljava/util/List;
       4: invokeinterface #36,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       9: astore_3
      10: aload_3
      11: invokeinterface #37,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          52
      19: aload_3
      20: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #39                 // class net/jodah/failsafe/function/BiPredicate
      28: astore        4
      30: aload         4
      32: aload_1
      33: aload_2
      34: invokeinterface #40,  3           // InterfaceMethod net/jodah/failsafe/function/BiPredicate.test:(Ljava/lang/Object;Ljava/lang/Object;)Z
      39: ifeq          44
      42: iconst_1
      43: ireturn
      44: goto          49
      47: astore        5
      49: goto          10
      52: iconst_0
      53: ireturn
    Exception table:
       from    to  target type
          30    43    47   Class java/lang/Exception

  public boolean canRetryFor(java.lang.Object, java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #7                  // Field retryConditions:Ljava/util/List;
       4: invokeinterface #36,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       9: astore_3
      10: aload_3
      11: invokeinterface #37,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          52
      19: aload_3
      20: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #39                 // class net/jodah/failsafe/function/BiPredicate
      28: astore        4
      30: aload         4
      32: aload_1
      33: aload_2
      34: invokeinterface #40,  3           // InterfaceMethod net/jodah/failsafe/function/BiPredicate.test:(Ljava/lang/Object;Ljava/lang/Object;)Z
      39: ifeq          44
      42: iconst_1
      43: ireturn
      44: goto          49
      47: astore        5
      49: goto          10
      52: aload_2
      53: ifnull        67
      56: aload_0
      57: getfield      #14                 // Field failuresChecked:Z
      60: ifne          67
      63: iconst_1
      64: goto          68
      67: iconst_0
      68: ireturn
    Exception table:
       from    to  target type
          30    43    47   Class java/lang/Exception

  public boolean canApplyDelayFn(java.lang.Object, java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #42                 // Field delayResult:Ljava/lang/Object;
       4: ifnull        18
       7: aload_0
       8: getfield      #42                 // Field delayResult:Ljava/lang/Object;
      11: aload_1
      12: invokevirtual #43                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      15: ifeq          47
      18: aload_0
      19: getfield      #44                 // Field delayFailure:Ljava/lang/Class;
      22: ifnull        43
      25: aload_2
      26: ifnull        47
      29: aload_0
      30: getfield      #44                 // Field delayFailure:Ljava/lang/Class;
      33: aload_2
      34: invokevirtual #45                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      37: invokevirtual #46                 // Method java/lang/Class.isAssignableFrom:(Ljava/lang/Class;)Z
      40: ifeq          47
      43: iconst_1
      44: goto          48
      47: iconst_0
      48: ireturn

  public net.jodah.failsafe.RetryPolicy copy();
    Code:
       0: new           #47                 // class net/jodah/failsafe/RetryPolicy
       3: dup
       4: aload_0
       5: invokespecial #48                 // Method "<init>":(Lnet/jodah/failsafe/RetryPolicy;)V
       8: areturn

  public net.jodah.failsafe.util.Duration getDelay();
    Code:
       0: aload_0
       1: getfield      #3                  // Field delay:Lnet/jodah/failsafe/util/Duration;
       4: areturn

  public net.jodah.failsafe.util.Duration getDelayMin();
    Code:
       0: aload_0
       1: getfield      #49                 // Field delayMin:Lnet/jodah/failsafe/util/Duration;
       4: areturn

  public net.jodah.failsafe.util.Duration getDelayMax();
    Code:
       0: aload_0
       1: getfield      #50                 // Field delayMax:Lnet/jodah/failsafe/util/Duration;
       4: areturn

  public net.jodah.failsafe.RetryPolicy$DelayFunction<?, ? extends java.lang.Throwable> getDelayFn();
    Code:
       0: aload_0
       1: getfield      #51                 // Field delayFn:Lnet/jodah/failsafe/RetryPolicy$DelayFunction;
       4: areturn

  public double getDelayFactor();
    Code:
       0: aload_0
       1: getfield      #9                  // Field delayFactor:D
       4: dreturn

  public net.jodah.failsafe.util.Duration getJitter();
    Code:
       0: aload_0
       1: getfield      #12                 // Field jitter:Lnet/jodah/failsafe/util/Duration;
       4: areturn

  public double getJitterFactor();
    Code:
       0: aload_0
       1: getfield      #13                 // Field jitterFactor:D
       4: dreturn

  public net.jodah.failsafe.util.Duration getMaxDelay();
    Code:
       0: aload_0
       1: getfield      #10                 // Field maxDelay:Lnet/jodah/failsafe/util/Duration;
       4: areturn

  public net.jodah.failsafe.util.Duration getMaxDuration();
    Code:
       0: aload_0
       1: getfield      #11                 // Field maxDuration:Lnet/jodah/failsafe/util/Duration;
       4: areturn

  public int getMaxRetries();
    Code:
       0: aload_0
       1: getfield      #4                  // Field maxRetries:I
       4: ireturn

  public <T> net.jodah.failsafe.RetryPolicy retryIf(net.jodah.failsafe.function.BiPredicate<T, ? extends java.lang.Throwable>);
    Code:
       0: aload_1
       1: ldc           #16                 // String completionPredicate
       3: invokestatic  #17                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: iconst_1
       9: putfield      #14                 // Field failuresChecked:Z
      12: aload_0
      13: getfield      #7                  // Field retryConditions:Ljava/util/List;
      16: aload_1
      17: invokeinterface #18,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      22: pop
      23: aload_0
      24: areturn

  public <T> net.jodah.failsafe.RetryPolicy retryIf(net.jodah.failsafe.function.Predicate<T>);
    Code:
       0: aload_1
       1: ldc           #19                 // String resultPredicate
       3: invokestatic  #17                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: getfield      #7                  // Field retryConditions:Ljava/util/List;
      11: aload_1
      12: invokestatic  #20                 // Method net/jodah/failsafe/Predicates.resultPredicateFor:(Lnet/jodah/failsafe/function/Predicate;)Lnet/jodah/failsafe/function/BiPredicate;
      15: invokeinterface #18,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      20: pop
      21: aload_0
      22: areturn

  public net.jodah.failsafe.RetryPolicy retryOn(java.lang.Class<? extends java.lang.Throwable>);
    Code:
       0: aload_1
       1: ldc           #21                 // String failure
       3: invokestatic  #17                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: iconst_1
       9: anewarray     #22                 // class java/lang/Class
      12: dup
      13: iconst_0
      14: aload_1
      15: aastore
      16: invokestatic  #23                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      19: invokevirtual #52                 // Method retryOn:(Ljava/util/List;)Lnet/jodah/failsafe/RetryPolicy;
      22: areturn

  public net.jodah.failsafe.RetryPolicy retryOn(java.lang.Class<? extends java.lang.Throwable>...);
    Code:
       0: aload_1
       1: ldc           #25                 // String failures
       3: invokestatic  #17                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_1
       8: arraylength
       9: ifle          16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: ldc           #26                 // String Failures cannot be empty
      19: iconst_0
      20: anewarray     #27                 // class java/lang/Object
      23: invokestatic  #28                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      26: aload_0
      27: aload_1
      28: invokestatic  #23                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      31: invokevirtual #52                 // Method retryOn:(Ljava/util/List;)Lnet/jodah/failsafe/RetryPolicy;
      34: areturn

  public net.jodah.failsafe.RetryPolicy retryOn(java.util.List<java.lang.Class<? extends java.lang.Throwable>>);
    Code:
       0: aload_1
       1: ldc           #25                 // String failures
       3: invokestatic  #17                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_1
       8: invokeinterface #29,  1           // InterfaceMethod java/util/List.isEmpty:()Z
      13: ifne          20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: ldc           #30                 // String failures cannot be empty
      23: iconst_0
      24: anewarray     #27                 // class java/lang/Object
      27: invokestatic  #28                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      30: aload_0
      31: iconst_1
      32: putfield      #14                 // Field failuresChecked:Z
      35: aload_0
      36: getfield      #7                  // Field retryConditions:Ljava/util/List;
      39: aload_1
      40: invokestatic  #31                 // Method net/jodah/failsafe/Predicates.failurePredicateFor:(Ljava/util/List;)Lnet/jodah/failsafe/function/BiPredicate;
      43: invokeinterface #18,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      48: pop
      49: aload_0
      50: areturn

  public net.jodah.failsafe.RetryPolicy retryOn(net.jodah.failsafe.function.Predicate<? extends java.lang.Throwable>);
    Code:
       0: aload_1
       1: ldc           #32                 // String failurePredicate
       3: invokestatic  #17                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: iconst_1
       9: putfield      #14                 // Field failuresChecked:Z
      12: aload_0
      13: getfield      #7                  // Field retryConditions:Ljava/util/List;
      16: aload_1
      17: invokestatic  #33                 // Method net/jodah/failsafe/Predicates.failurePredicateFor:(Lnet/jodah/failsafe/function/Predicate;)Lnet/jodah/failsafe/function/BiPredicate;
      20: invokeinterface #18,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      25: pop
      26: aload_0
      27: areturn

  public net.jodah.failsafe.RetryPolicy retryWhen(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #7                  // Field retryConditions:Ljava/util/List;
       4: aload_1
       5: invokestatic  #34                 // Method net/jodah/failsafe/Predicates.resultPredicateFor:(Ljava/lang/Object;)Lnet/jodah/failsafe/function/BiPredicate;
       8: invokeinterface #18,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      13: pop
      14: aload_0
      15: areturn

  public net.jodah.failsafe.RetryPolicy withBackoff(long, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: lload_1
       2: lload_3
       3: aload         5
       5: ldc2_w        #53                 // double 2.0d
       8: invokevirtual #55                 // Method withBackoff:(JJLjava/util/concurrent/TimeUnit;D)Lnet/jodah/failsafe/RetryPolicy;
      11: areturn

  public net.jodah.failsafe.RetryPolicy withBackoff(long, long, java.util.concurrent.TimeUnit, double);
    Code:
       0: aload         5
       2: ldc           #56                 // String timeUnit
       4: invokestatic  #17                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: pop
       8: aload         5
      10: lload_1
      11: invokevirtual #57                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      14: lconst_0
      15: lcmp
      16: ifle          23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: ldc           #58                 // String The delay must be greater than 0
      26: iconst_0
      27: anewarray     #27                 // class java/lang/Object
      30: invokestatic  #28                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      33: aload_0
      34: getfield      #11                 // Field maxDuration:Lnet/jodah/failsafe/util/Duration;
      37: ifnull        57
      40: aload         5
      42: lload_1
      43: invokevirtual #57                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      46: aload_0
      47: getfield      #11                 // Field maxDuration:Lnet/jodah/failsafe/util/Duration;
      50: invokevirtual #35                 // Method net/jodah/failsafe/util/Duration.toNanos:()J
      53: lcmp
      54: ifge          61
      57: iconst_1
      58: goto          62
      61: iconst_0
      62: ldc           #59                 // String delay must be less than the maxDuration
      64: iconst_0
      65: anewarray     #27                 // class java/lang/Object
      68: invokestatic  #60                 // Method net/jodah/failsafe/internal/util/Assert.state:(ZLjava/lang/String;[Ljava/lang/Object;)V
      71: aload         5
      73: lload_1
      74: invokevirtual #57                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      77: aload         5
      79: lload_3
      80: invokevirtual #57                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      83: lcmp
      84: ifge          91
      87: iconst_1
      88: goto          92
      91: iconst_0
      92: ldc           #61                 // String delay must be less than the maxDelay
      94: iconst_0
      95: anewarray     #27                 // class java/lang/Object
      98: invokestatic  #28                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
     101: dload         6
     103: dconst_1
     104: dcmpl
     105: ifle          112
     108: iconst_1
     109: goto          113
     112: iconst_0
     113: ldc           #62                 // String delayFactor must be greater than 1
     115: iconst_0
     116: anewarray     #27                 // class java/lang/Object
     119: invokestatic  #28                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
     122: aload_0
     123: getfield      #3                  // Field delay:Lnet/jodah/failsafe/util/Duration;
     126: ifnull        142
     129: aload_0
     130: getfield      #3                  // Field delay:Lnet/jodah/failsafe/util/Duration;
     133: getstatic     #2                  // Field net/jodah/failsafe/util/Duration.NONE:Lnet/jodah/failsafe/util/Duration;
     136: invokevirtual #63                 // Method net/jodah/failsafe/util/Duration.equals:(Ljava/lang/Object;)Z
     139: ifeq          146
     142: iconst_1
     143: goto          147
     146: iconst_0
     147: ldc           #64                 // String Delays have already been set
     149: iconst_0
     150: anewarray     #27                 // class java/lang/Object
     153: invokestatic  #60                 // Method net/jodah/failsafe/internal/util/Assert.state:(ZLjava/lang/String;[Ljava/lang/Object;)V
     156: aload_0
     157: getfield      #49                 // Field delayMin:Lnet/jodah/failsafe/util/Duration;
     160: ifnonnull     167
     163: iconst_1
     164: goto          168
     167: iconst_0
     168: ldc           #65                 // String Random delays have already been set
     170: iconst_0
     171: anewarray     #27                 // class java/lang/Object
     174: invokestatic  #60                 // Method net/jodah/failsafe/internal/util/Assert.state:(ZLjava/lang/String;[Ljava/lang/Object;)V
     177: aload_0
     178: new           #66                 // class net/jodah/failsafe/util/Duration
     181: dup
     182: lload_1
     183: aload         5
     185: invokespecial #67                 // Method net/jodah/failsafe/util/Duration."<init>":(JLjava/util/concurrent/TimeUnit;)V
     188: putfield      #3                  // Field delay:Lnet/jodah/failsafe/util/Duration;
     191: aload_0
     192: new           #66                 // class net/jodah/failsafe/util/Duration
     195: dup
     196: lload_3
     197: aload         5
     199: invokespecial #67                 // Method net/jodah/failsafe/util/Duration."<init>":(JLjava/util/concurrent/TimeUnit;)V
     202: putfield      #10                 // Field maxDelay:Lnet/jodah/failsafe/util/Duration;
     205: aload_0
     206: dload         6
     208: putfield      #9                  // Field delayFactor:D
     211: aload_0
     212: areturn

  public net.jodah.failsafe.RetryPolicy withDelay(long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_3
       1: ldc           #56                 // String timeUnit
       3: invokestatic  #17                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_3
       8: lload_1
       9: invokevirtual #57                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      12: lconst_0
      13: lcmp
      14: ifle          21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: ldc           #68                 // String delay must be greater than 0
      24: iconst_0
      25: anewarray     #27                 // class java/lang/Object
      28: invokestatic  #28                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      31: aload_0
      32: getfield      #11                 // Field maxDuration:Lnet/jodah/failsafe/util/Duration;
      35: ifnull        54
      38: aload_3
      39: lload_1
      40: invokevirtual #57                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      43: aload_0
      44: getfield      #11                 // Field maxDuration:Lnet/jodah/failsafe/util/Duration;
      47: invokevirtual #35                 // Method net/jodah/failsafe/util/Duration.toNanos:()J
      50: lcmp
      51: ifge          58
      54: iconst_1
      55: goto          59
      58: iconst_0
      59: ldc           #59                 // String delay must be less than the maxDuration
      61: iconst_0
      62: anewarray     #27                 // class java/lang/Object
      65: invokestatic  #60                 // Method net/jodah/failsafe/internal/util/Assert.state:(ZLjava/lang/String;[Ljava/lang/Object;)V
      68: aload_0
      69: getfield      #49                 // Field delayMin:Lnet/jodah/failsafe/util/Duration;
      72: ifnonnull     79
      75: iconst_1
      76: goto          80
      79: iconst_0
      80: ldc           #65                 // String Random delays have already been set
      82: iconst_0
      83: anewarray     #27                 // class java/lang/Object
      86: invokestatic  #60                 // Method net/jodah/failsafe/internal/util/Assert.state:(ZLjava/lang/String;[Ljava/lang/Object;)V
      89: aload_0
      90: getfield      #10                 // Field maxDelay:Lnet/jodah/failsafe/util/Duration;
      93: ifnonnull     100
      96: iconst_1
      97: goto          101
     100: iconst_0
     101: ldc           #69                 // String Backoff delays have already been set
     103: iconst_0
     104: anewarray     #27                 // class java/lang/Object
     107: invokestatic  #60                 // Method net/jodah/failsafe/internal/util/Assert.state:(ZLjava/lang/String;[Ljava/lang/Object;)V
     110: aload_0
     111: new           #66                 // class net/jodah/failsafe/util/Duration
     114: dup
     115: lload_1
     116: aload_3
     117: invokespecial #67                 // Method net/jodah/failsafe/util/Duration."<init>":(JLjava/util/concurrent/TimeUnit;)V
     120: putfield      #3                  // Field delay:Lnet/jodah/failsafe/util/Duration;
     123: aload_0
     124: areturn

  public net.jodah.failsafe.RetryPolicy withDelay(long, long, java.util.concurrent.TimeUnit);
    Code:
       0: aload         5
       2: ldc           #56                 // String timeUnit
       4: invokestatic  #17                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: pop
       8: aload         5
      10: lload_1
      11: invokevirtual #57                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      14: lconst_0
      15: lcmp
      16: ifle          23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: ldc           #70                 // String delayMin must be greater than 0
      26: iconst_0
      27: anewarray     #27                 // class java/lang/Object
      30: invokestatic  #28                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      33: aload         5
      35: lload_3
      36: invokevirtual #57                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      39: lconst_0
      40: lcmp
      41: ifle          48
      44: iconst_1
      45: goto          49
      48: iconst_0
      49: ldc           #71                 // String delayMax must be greater than 0
      51: iconst_0
      52: anewarray     #27                 // class java/lang/Object
      55: invokestatic  #28                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      58: aload         5
      60: lload_1
      61: invokevirtual #57                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      64: aload         5
      66: lload_3
      67: invokevirtual #57                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      70: lcmp
      71: ifge          78
      74: iconst_1
      75: goto          79
      78: iconst_0
      79: ldc           #72                 // String delayMin must be less than delayMax
      81: iconst_0
      82: anewarray     #27                 // class java/lang/Object
      85: invokestatic  #28                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      88: aload_0
      89: getfield      #11                 // Field maxDuration:Lnet/jodah/failsafe/util/Duration;
      92: ifnull        112
      95: aload         5
      97: lload_3
      98: invokevirtual #57                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
     101: aload_0
     102: getfield      #11                 // Field maxDuration:Lnet/jodah/failsafe/util/Duration;
     105: invokevirtual #35                 // Method net/jodah/failsafe/util/Duration.toNanos:()J
     108: lcmp
     109: ifge          116
     112: iconst_1
     113: goto          117
     116: iconst_0
     117: ldc           #73                 // String delayMax must be less than the maxDuration
     119: iconst_0
     120: anewarray     #27                 // class java/lang/Object
     123: invokestatic  #60                 // Method net/jodah/failsafe/internal/util/Assert.state:(ZLjava/lang/String;[Ljava/lang/Object;)V
     126: aload_0
     127: getfield      #3                  // Field delay:Lnet/jodah/failsafe/util/Duration;
     130: ifnull        146
     133: aload_0
     134: getfield      #3                  // Field delay:Lnet/jodah/failsafe/util/Duration;
     137: getstatic     #2                  // Field net/jodah/failsafe/util/Duration.NONE:Lnet/jodah/failsafe/util/Duration;
     140: invokevirtual #63                 // Method net/jodah/failsafe/util/Duration.equals:(Ljava/lang/Object;)Z
     143: ifeq          150
     146: iconst_1
     147: goto          151
     150: iconst_0
     151: ldc           #64                 // String Delays have already been set
     153: iconst_0
     154: anewarray     #27                 // class java/lang/Object
     157: invokestatic  #60                 // Method net/jodah/failsafe/internal/util/Assert.state:(ZLjava/lang/String;[Ljava/lang/Object;)V
     160: aload_0
     161: getfield      #10                 // Field maxDelay:Lnet/jodah/failsafe/util/Duration;
     164: ifnonnull     171
     167: iconst_1
     168: goto          172
     171: iconst_0
     172: ldc           #69                 // String Backoff delays have already been set
     174: iconst_0
     175: anewarray     #27                 // class java/lang/Object
     178: invokestatic  #60                 // Method net/jodah/failsafe/internal/util/Assert.state:(ZLjava/lang/String;[Ljava/lang/Object;)V
     181: aload_0
     182: new           #66                 // class net/jodah/failsafe/util/Duration
     185: dup
     186: lload_1
     187: aload         5
     189: invokespecial #67                 // Method net/jodah/failsafe/util/Duration."<init>":(JLjava/util/concurrent/TimeUnit;)V
     192: putfield      #49                 // Field delayMin:Lnet/jodah/failsafe/util/Duration;
     195: aload_0
     196: new           #66                 // class net/jodah/failsafe/util/Duration
     199: dup
     200: lload_3
     201: aload         5
     203: invokespecial #67                 // Method net/jodah/failsafe/util/Duration."<init>":(JLjava/util/concurrent/TimeUnit;)V
     206: putfield      #50                 // Field delayMax:Lnet/jodah/failsafe/util/Duration;
     209: aload_0
     210: areturn

  public net.jodah.failsafe.RetryPolicy withDelay(net.jodah.failsafe.RetryPolicy$DelayFunction<?, ? extends java.lang.Throwable>);
    Code:
       0: aload_1
       1: ldc           #74                 // String delayFunction
       3: invokestatic  #17                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: aload_1
       9: putfield      #51                 // Field delayFn:Lnet/jodah/failsafe/RetryPolicy$DelayFunction;
      12: aload_0
      13: areturn

  public <F extends java.lang.Throwable> net.jodah.failsafe.RetryPolicy withDelayOn(net.jodah.failsafe.RetryPolicy$DelayFunction<java.lang.Object, F>, java.lang.Class<F>);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #75                 // Method withDelay:(Lnet/jodah/failsafe/RetryPolicy$DelayFunction;)Lnet/jodah/failsafe/RetryPolicy;
       5: pop
       6: aload_2
       7: ldc           #21                 // String failure
       9: invokestatic  #17                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      12: pop
      13: aload_0
      14: aload_2
      15: putfield      #44                 // Field delayFailure:Ljava/lang/Class;
      18: aload_0
      19: areturn

  public <R> net.jodah.failsafe.RetryPolicy withDelayWhen(net.jodah.failsafe.RetryPolicy$DelayFunction<R, ? extends java.lang.Throwable>, R);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #75                 // Method withDelay:(Lnet/jodah/failsafe/RetryPolicy$DelayFunction;)Lnet/jodah/failsafe/RetryPolicy;
       5: pop
       6: aload_2
       7: ldc           #76                 // String result
       9: invokestatic  #17                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      12: pop
      13: aload_0
      14: aload_2
      15: putfield      #42                 // Field delayResult:Ljava/lang/Object;
      18: aload_0
      19: areturn

  public net.jodah.failsafe.RetryPolicy withJitter(double);
    Code:
       0: dload_1
       1: dconst_0
       2: dcmpl
       3: iflt          16
       6: dload_1
       7: dconst_1
       8: dcmpg
       9: ifgt          16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: ldc           #77                 // String jitterFactor must be >= 0 and <= 1
      19: iconst_0
      20: anewarray     #27                 // class java/lang/Object
      23: invokestatic  #28                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      26: aload_0
      27: getfield      #3                  // Field delay:Lnet/jodah/failsafe/util/Duration;
      30: ifnonnull     40
      33: aload_0
      34: getfield      #49                 // Field delayMin:Lnet/jodah/failsafe/util/Duration;
      37: ifnull        44
      40: iconst_1
      41: goto          45
      44: iconst_0
      45: ldc           #78                 // String A delay must be configured
      47: iconst_0
      48: anewarray     #27                 // class java/lang/Object
      51: invokestatic  #60                 // Method net/jodah/failsafe/internal/util/Assert.state:(ZLjava/lang/String;[Ljava/lang/Object;)V
      54: aload_0
      55: getfield      #12                 // Field jitter:Lnet/jodah/failsafe/util/Duration;
      58: ifnonnull     65
      61: iconst_1
      62: goto          66
      65: iconst_0
      66: ldc           #79                 // String withJitter(long, timeUnit) has already been called
      68: iconst_0
      69: anewarray     #27                 // class java/lang/Object
      72: invokestatic  #60                 // Method net/jodah/failsafe/internal/util/Assert.state:(ZLjava/lang/String;[Ljava/lang/Object;)V
      75: aload_0
      76: dload_1
      77: putfield      #13                 // Field jitterFactor:D
      80: aload_0
      81: areturn

  public net.jodah.failsafe.RetryPolicy withJitter(long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_3
       1: ldc           #56                 // String timeUnit
       3: invokestatic  #17                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: lload_1
       8: lconst_0
       9: lcmp
      10: ifle          17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ldc           #80                 // String jitter must be > 0
      20: iconst_0
      21: anewarray     #27                 // class java/lang/Object
      24: invokestatic  #28                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      27: aload_0
      28: getfield      #3                  // Field delay:Lnet/jodah/failsafe/util/Duration;
      31: ifnonnull     41
      34: aload_0
      35: getfield      #49                 // Field delayMin:Lnet/jodah/failsafe/util/Duration;
      38: ifnull        45
      41: iconst_1
      42: goto          46
      45: iconst_0
      46: ldc           #78                 // String A delay must be configured
      48: iconst_0
      49: anewarray     #27                 // class java/lang/Object
      52: invokestatic  #60                 // Method net/jodah/failsafe/internal/util/Assert.state:(ZLjava/lang/String;[Ljava/lang/Object;)V
      55: aload_0
      56: getfield      #13                 // Field jitterFactor:D
      59: dconst_0
      60: dcmpl
      61: ifne          68
      64: iconst_1
      65: goto          69
      68: iconst_0
      69: ldc           #81                 // String withJitter(double) has already been called
      71: iconst_0
      72: anewarray     #27                 // class java/lang/Object
      75: invokestatic  #60                 // Method net/jodah/failsafe/internal/util/Assert.state:(ZLjava/lang/String;[Ljava/lang/Object;)V
      78: aload_3
      79: lload_1
      80: invokevirtual #57                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      83: aload_0
      84: getfield      #3                  // Field delay:Lnet/jodah/failsafe/util/Duration;
      87: invokevirtual #35                 // Method net/jodah/failsafe/util/Duration.toNanos:()J
      90: lcmp
      91: ifgt          98
      94: iconst_1
      95: goto          99
      98: iconst_0
      99: ldc           #82                 // String jitter must be less than the configured delay
     101: iconst_0
     102: anewarray     #27                 // class java/lang/Object
     105: invokestatic  #60                 // Method net/jodah/failsafe/internal/util/Assert.state:(ZLjava/lang/String;[Ljava/lang/Object;)V
     108: aload_0
     109: new           #66                 // class net/jodah/failsafe/util/Duration
     112: dup
     113: lload_1
     114: aload_3
     115: invokespecial #67                 // Method net/jodah/failsafe/util/Duration."<init>":(JLjava/util/concurrent/TimeUnit;)V
     118: putfield      #12                 // Field jitter:Lnet/jodah/failsafe/util/Duration;
     121: aload_0
     122: areturn

  public net.jodah.failsafe.RetryPolicy withMaxDuration(long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_3
       1: ldc           #56                 // String timeUnit
       3: invokestatic  #17                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_3
       8: lload_1
       9: invokevirtual #57                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
      12: aload_0
      13: getfield      #3                  // Field delay:Lnet/jodah/failsafe/util/Duration;
      16: invokevirtual #35                 // Method net/jodah/failsafe/util/Duration.toNanos:()J
      19: lcmp
      20: ifle          27
      23: iconst_1
      24: goto          28
      27: iconst_0
      28: ldc           #83                 // String maxDuration must be greater than the delay
      30: iconst_0
      31: anewarray     #27                 // class java/lang/Object
      34: invokestatic  #60                 // Method net/jodah/failsafe/internal/util/Assert.state:(ZLjava/lang/String;[Ljava/lang/Object;)V
      37: aload_0
      38: new           #66                 // class net/jodah/failsafe/util/Duration
      41: dup
      42: lload_1
      43: aload_3
      44: invokespecial #67                 // Method net/jodah/failsafe/util/Duration."<init>":(JLjava/util/concurrent/TimeUnit;)V
      47: putfield      #11                 // Field maxDuration:Lnet/jodah/failsafe/util/Duration;
      50: aload_0
      51: areturn

  public net.jodah.failsafe.RetryPolicy withMaxRetries(int);
    Code:
       0: iload_1
       1: iconst_m1
       2: if_icmplt     9
       5: iconst_1
       6: goto          10
       9: iconst_0
      10: ldc           #84                 // String maxRetries must be greater than or equal to -1
      12: iconst_0
      13: anewarray     #27                 // class java/lang/Object
      16: invokestatic  #28                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      19: aload_0
      20: iload_1
      21: putfield      #4                  // Field maxRetries:I
      24: aload_0
      25: areturn

  static {};
    Code:
       0: new           #47                 // class net/jodah/failsafe/RetryPolicy
       3: dup
       4: invokespecial #85                 // Method "<init>":()V
       7: iconst_0
       8: invokevirtual #86                 // Method withMaxRetries:(I)Lnet/jodah/failsafe/RetryPolicy;
      11: putstatic     #87                 // Field NEVER:Lnet/jodah/failsafe/RetryPolicy;
      14: return
}
