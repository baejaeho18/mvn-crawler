Compiled from "CircuitBreaker.java"
public class net.jodah.failsafe.CircuitBreaker {
  private final java.util.concurrent.atomic.AtomicReference<net.jodah.failsafe.internal.CircuitState> state;

  private final java.util.concurrent.atomic.AtomicInteger currentExecutions;

  private final net.jodah.failsafe.internal.CircuitBreakerStats stats;

  private net.jodah.failsafe.util.Duration delay;

  private net.jodah.failsafe.util.Duration timeout;

  private net.jodah.failsafe.util.Ratio failureThreshold;

  private net.jodah.failsafe.util.Ratio successThreshold;

  private boolean failuresChecked;

  private java.util.List<net.jodah.failsafe.function.BiPredicate<java.lang.Object, java.lang.Throwable>> failureConditions;

  net.jodah.failsafe.function.CheckedRunnable onOpen;

  net.jodah.failsafe.function.CheckedRunnable onHalfOpen;

  net.jodah.failsafe.function.CheckedRunnable onClose;

  public net.jodah.failsafe.CircuitBreaker();
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #3                  // class java/util/concurrent/atomic/AtomicReference
       8: dup
       9: invokespecial #4                  // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
      12: putfield      #5                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      15: aload_0
      16: new           #6                  // class java/util/concurrent/atomic/AtomicInteger
      19: dup
      20: invokespecial #7                  // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      23: putfield      #1                  // Field currentExecutions:Ljava/util/concurrent/atomic/AtomicInteger;
      26: aload_0
      27: new           #8                  // class net/jodah/failsafe/CircuitBreaker$1
      30: dup
      31: aload_0
      32: invokespecial #9                  // Method net/jodah/failsafe/CircuitBreaker$1."<init>":(Lnet/jodah/failsafe/CircuitBreaker;)V
      35: putfield      #10                 // Field stats:Lnet/jodah/failsafe/internal/CircuitBreakerStats;
      38: aload_0
      39: getstatic     #11                 // Field net/jodah/failsafe/util/Duration.NONE:Lnet/jodah/failsafe/util/Duration;
      42: putfield      #12                 // Field delay:Lnet/jodah/failsafe/util/Duration;
      45: aload_0
      46: new           #13                 // class java/util/ArrayList
      49: dup
      50: invokespecial #14                 // Method java/util/ArrayList."<init>":()V
      53: putfield      #15                 // Field failureConditions:Ljava/util/List;
      56: aload_0
      57: getfield      #5                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      60: new           #16                 // class net/jodah/failsafe/internal/ClosedState
      63: dup
      64: aload_0
      65: invokespecial #17                 // Method net/jodah/failsafe/internal/ClosedState."<init>":(Lnet/jodah/failsafe/CircuitBreaker;)V
      68: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      71: return

  public boolean allowsExecution();
    Code:
       0: aload_0
       1: getfield      #5                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #20                 // class net/jodah/failsafe/internal/CircuitState
      10: aload_0
      11: getfield      #10                 // Field stats:Lnet/jodah/failsafe/internal/CircuitBreakerStats;
      14: invokevirtual #21                 // Method net/jodah/failsafe/internal/CircuitState.allowsExecution:(Lnet/jodah/failsafe/internal/CircuitBreakerStats;)Z
      17: ireturn

  public void close();
    Code:
       0: aload_0
       1: getstatic     #22                 // Field net/jodah/failsafe/CircuitBreaker$State.CLOSED:Lnet/jodah/failsafe/CircuitBreaker$State;
       4: aload_0
       5: getfield      #23                 // Field onClose:Lnet/jodah/failsafe/function/CheckedRunnable;
       8: invokespecial #24                 // Method transitionTo:(Lnet/jodah/failsafe/CircuitBreaker$State;Lnet/jodah/failsafe/function/CheckedRunnable;)V
      11: return

  public <T> net.jodah.failsafe.CircuitBreaker failIf(net.jodah.failsafe.function.BiPredicate<T, ? extends java.lang.Throwable>);
    Code:
       0: aload_1
       1: ldc           #25                 // String completionPredicate
       3: invokestatic  #26                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: iconst_1
       9: putfield      #27                 // Field failuresChecked:Z
      12: aload_0
      13: getfield      #15                 // Field failureConditions:Ljava/util/List;
      16: aload_1
      17: invokeinterface #28,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      22: pop
      23: aload_0
      24: areturn

  public <T> net.jodah.failsafe.CircuitBreaker failIf(net.jodah.failsafe.function.Predicate<T>);
    Code:
       0: aload_1
       1: ldc           #29                 // String resultPredicate
       3: invokestatic  #26                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: getfield      #15                 // Field failureConditions:Ljava/util/List;
      11: aload_1
      12: invokestatic  #30                 // Method net/jodah/failsafe/Predicates.resultPredicateFor:(Lnet/jodah/failsafe/function/Predicate;)Lnet/jodah/failsafe/function/BiPredicate;
      15: invokeinterface #28,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      20: pop
      21: aload_0
      22: areturn

  public net.jodah.failsafe.CircuitBreaker failOn(java.lang.Class<? extends java.lang.Throwable>);
    Code:
       0: aload_1
       1: ldc           #31                 // String failure
       3: invokestatic  #26                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: iconst_1
       9: anewarray     #32                 // class java/lang/Class
      12: dup
      13: iconst_0
      14: aload_1
      15: aastore
      16: invokestatic  #33                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      19: invokevirtual #34                 // Method failOn:(Ljava/util/List;)Lnet/jodah/failsafe/CircuitBreaker;
      22: areturn

  public net.jodah.failsafe.CircuitBreaker failOn(java.lang.Class<? extends java.lang.Throwable>...);
    Code:
       0: aload_1
       1: ldc           #35                 // String failures
       3: invokestatic  #26                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_1
       8: arraylength
       9: ifle          16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: ldc           #36                 // String failures cannot be empty
      19: iconst_0
      20: anewarray     #37                 // class java/lang/Object
      23: invokestatic  #38                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      26: aload_0
      27: aload_1
      28: invokestatic  #33                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      31: invokevirtual #34                 // Method failOn:(Ljava/util/List;)Lnet/jodah/failsafe/CircuitBreaker;
      34: areturn

  public net.jodah.failsafe.CircuitBreaker failOn(java.util.List<java.lang.Class<? extends java.lang.Throwable>>);
    Code:
       0: aload_1
       1: ldc           #35                 // String failures
       3: invokestatic  #26                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_1
       8: invokeinterface #39,  1           // InterfaceMethod java/util/List.isEmpty:()Z
      13: ifne          20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: ldc           #36                 // String failures cannot be empty
      23: iconst_0
      24: anewarray     #37                 // class java/lang/Object
      27: invokestatic  #38                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      30: aload_0
      31: iconst_1
      32: putfield      #27                 // Field failuresChecked:Z
      35: aload_0
      36: getfield      #15                 // Field failureConditions:Ljava/util/List;
      39: aload_1
      40: invokestatic  #40                 // Method net/jodah/failsafe/Predicates.failurePredicateFor:(Ljava/util/List;)Lnet/jodah/failsafe/function/BiPredicate;
      43: invokeinterface #28,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      48: pop
      49: aload_0
      50: areturn

  public net.jodah.failsafe.CircuitBreaker failOn(net.jodah.failsafe.function.Predicate<? extends java.lang.Throwable>);
    Code:
       0: aload_1
       1: ldc           #41                 // String failurePredicate
       3: invokestatic  #26                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: iconst_1
       9: putfield      #27                 // Field failuresChecked:Z
      12: aload_0
      13: getfield      #15                 // Field failureConditions:Ljava/util/List;
      16: aload_1
      17: invokestatic  #42                 // Method net/jodah/failsafe/Predicates.failurePredicateFor:(Lnet/jodah/failsafe/function/Predicate;)Lnet/jodah/failsafe/function/BiPredicate;
      20: invokeinterface #28,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      25: pop
      26: aload_0
      27: areturn

  public net.jodah.failsafe.CircuitBreaker failWhen(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #15                 // Field failureConditions:Ljava/util/List;
       4: aload_1
       5: invokestatic  #43                 // Method net/jodah/failsafe/Predicates.resultPredicateFor:(Ljava/lang/Object;)Lnet/jodah/failsafe/function/BiPredicate;
       8: invokeinterface #28,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      13: pop
      14: aload_0
      15: areturn

  public net.jodah.failsafe.util.Duration getDelay();
    Code:
       0: aload_0
       1: getfield      #12                 // Field delay:Lnet/jodah/failsafe/util/Duration;
       4: areturn

  public net.jodah.failsafe.util.Ratio getFailureThreshold();
    Code:
       0: aload_0
       1: getfield      #44                 // Field failureThreshold:Lnet/jodah/failsafe/util/Ratio;
       4: areturn

  public net.jodah.failsafe.CircuitBreaker$State getState();
    Code:
       0: aload_0
       1: getfield      #5                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #20                 // class net/jodah/failsafe/internal/CircuitState
      10: invokevirtual #45                 // Method net/jodah/failsafe/internal/CircuitState.getState:()Lnet/jodah/failsafe/CircuitBreaker$State;
      13: areturn

  public net.jodah.failsafe.util.Ratio getSuccessThreshold();
    Code:
       0: aload_0
       1: getfield      #46                 // Field successThreshold:Lnet/jodah/failsafe/util/Ratio;
       4: areturn

  public net.jodah.failsafe.util.Duration getTimeout();
    Code:
       0: aload_0
       1: getfield      #47                 // Field timeout:Lnet/jodah/failsafe/util/Duration;
       4: areturn

  public void halfOpen();
    Code:
       0: aload_0
       1: getstatic     #48                 // Field net/jodah/failsafe/CircuitBreaker$State.HALF_OPEN:Lnet/jodah/failsafe/CircuitBreaker$State;
       4: aload_0
       5: getfield      #49                 // Field onHalfOpen:Lnet/jodah/failsafe/function/CheckedRunnable;
       8: invokespecial #24                 // Method transitionTo:(Lnet/jodah/failsafe/CircuitBreaker$State;Lnet/jodah/failsafe/function/CheckedRunnable;)V
      11: return

  public boolean isClosed();
    Code:
       0: getstatic     #22                 // Field net/jodah/failsafe/CircuitBreaker$State.CLOSED:Lnet/jodah/failsafe/CircuitBreaker$State;
       3: aload_0
       4: invokevirtual #50                 // Method getState:()Lnet/jodah/failsafe/CircuitBreaker$State;
       7: invokevirtual #51                 // Method net/jodah/failsafe/CircuitBreaker$State.equals:(Ljava/lang/Object;)Z
      10: ireturn

  public boolean isFailure(java.lang.Object, java.lang.Throwable);
    Code:
       0: aload_0
       1: getfield      #15                 // Field failureConditions:Ljava/util/List;
       4: invokeinterface #52,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       9: astore_3
      10: aload_3
      11: invokeinterface #53,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          52
      19: aload_3
      20: invokeinterface #54,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #55                 // class net/jodah/failsafe/function/BiPredicate
      28: astore        4
      30: aload         4
      32: aload_1
      33: aload_2
      34: invokeinterface #56,  3           // InterfaceMethod net/jodah/failsafe/function/BiPredicate.test:(Ljava/lang/Object;Ljava/lang/Object;)Z
      39: ifeq          44
      42: iconst_1
      43: ireturn
      44: goto          49
      47: astore        5
      49: goto          10
      52: aload_2
      53: ifnull        67
      56: aload_0
      57: getfield      #27                 // Field failuresChecked:Z
      60: ifne          67
      63: iconst_1
      64: goto          68
      67: iconst_0
      68: ireturn
    Exception table:
       from    to  target type
          30    43    47   Class java/lang/Exception

  public boolean isHalfOpen();
    Code:
       0: getstatic     #48                 // Field net/jodah/failsafe/CircuitBreaker$State.HALF_OPEN:Lnet/jodah/failsafe/CircuitBreaker$State;
       3: aload_0
       4: invokevirtual #50                 // Method getState:()Lnet/jodah/failsafe/CircuitBreaker$State;
       7: invokevirtual #51                 // Method net/jodah/failsafe/CircuitBreaker$State.equals:(Ljava/lang/Object;)Z
      10: ireturn

  public boolean isOpen();
    Code:
       0: getstatic     #58                 // Field net/jodah/failsafe/CircuitBreaker$State.OPEN:Lnet/jodah/failsafe/CircuitBreaker$State;
       3: aload_0
       4: invokevirtual #50                 // Method getState:()Lnet/jodah/failsafe/CircuitBreaker$State;
       7: invokevirtual #51                 // Method net/jodah/failsafe/CircuitBreaker$State.equals:(Ljava/lang/Object;)Z
      10: ireturn

  public net.jodah.failsafe.CircuitBreaker onClose(net.jodah.failsafe.function.CheckedRunnable);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #23                 // Field onClose:Lnet/jodah/failsafe/function/CheckedRunnable;
       5: aload_0
       6: areturn

  public net.jodah.failsafe.CircuitBreaker onHalfOpen(net.jodah.failsafe.function.CheckedRunnable);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #49                 // Field onHalfOpen:Lnet/jodah/failsafe/function/CheckedRunnable;
       5: aload_0
       6: areturn

  public net.jodah.failsafe.CircuitBreaker onOpen(net.jodah.failsafe.function.CheckedRunnable);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #59                 // Field onOpen:Lnet/jodah/failsafe/function/CheckedRunnable;
       5: aload_0
       6: areturn

  public void open();
    Code:
       0: aload_0
       1: getstatic     #58                 // Field net/jodah/failsafe/CircuitBreaker$State.OPEN:Lnet/jodah/failsafe/CircuitBreaker$State;
       4: aload_0
       5: getfield      #59                 // Field onOpen:Lnet/jodah/failsafe/function/CheckedRunnable;
       8: invokespecial #24                 // Method transitionTo:(Lnet/jodah/failsafe/CircuitBreaker$State;Lnet/jodah/failsafe/function/CheckedRunnable;)V
      11: return

  public void recordFailure(java.lang.Throwable);
    Code:
       0: aload_0
       1: aconst_null
       2: aload_1
       3: invokevirtual #60                 // Method recordResult:(Ljava/lang/Object;Ljava/lang/Throwable;)V
       6: return

  public void recordResult(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: invokevirtual #60                 // Method recordResult:(Ljava/lang/Object;Ljava/lang/Throwable;)V
       6: return

  public void recordSuccess();
    Code:
       0: aload_0
       1: getfield      #5                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #20                 // class net/jodah/failsafe/internal/CircuitState
      10: invokevirtual #61                 // Method net/jodah/failsafe/internal/CircuitState.recordSuccess:()V
      13: aload_0
      14: getfield      #1                  // Field currentExecutions:Ljava/util/concurrent/atomic/AtomicInteger;
      17: invokevirtual #62                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
      20: pop
      21: goto          35
      24: astore_1
      25: aload_0
      26: getfield      #1                  // Field currentExecutions:Ljava/util/concurrent/atomic/AtomicInteger;
      29: invokevirtual #62                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
      32: pop
      33: aload_1
      34: athrow
      35: return
    Exception table:
       from    to  target type
           0    13    24   any

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokevirtual #50                 // Method getState:()Lnet/jodah/failsafe/CircuitBreaker$State;
       4: invokevirtual #63                 // Method net/jodah/failsafe/CircuitBreaker$State.toString:()Ljava/lang/String;
       7: areturn

  public net.jodah.failsafe.CircuitBreaker withDelay(long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_3
       1: ldc           #64                 // String timeUnit
       3: invokestatic  #26                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: lload_1
       8: lconst_0
       9: lcmp
      10: ifle          17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ldc           #65                 // String delay must be greater than 0
      20: iconst_0
      21: anewarray     #37                 // class java/lang/Object
      24: invokestatic  #38                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      27: aload_0
      28: new           #66                 // class net/jodah/failsafe/util/Duration
      31: dup
      32: lload_1
      33: aload_3
      34: invokespecial #67                 // Method net/jodah/failsafe/util/Duration."<init>":(JLjava/util/concurrent/TimeUnit;)V
      37: putfield      #12                 // Field delay:Lnet/jodah/failsafe/util/Duration;
      40: aload_0
      41: areturn

  public net.jodah.failsafe.CircuitBreaker withFailureThreshold(int);
    Code:
       0: iload_1
       1: iconst_1
       2: if_icmplt     9
       5: iconst_1
       6: goto          10
       9: iconst_0
      10: ldc           #68                 // String failureThreshold must be greater than or equal to 1
      12: iconst_0
      13: anewarray     #37                 // class java/lang/Object
      16: invokestatic  #38                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      19: aload_0
      20: iload_1
      21: iload_1
      22: invokevirtual #69                 // Method withFailureThreshold:(II)Lnet/jodah/failsafe/CircuitBreaker;
      25: areturn

  public synchronized net.jodah.failsafe.CircuitBreaker withFailureThreshold(int, int);
    Code:
       0: iload_1
       1: iconst_1
       2: if_icmplt     9
       5: iconst_1
       6: goto          10
       9: iconst_0
      10: ldc           #70                 // String failures must be greater than or equal to 1
      12: iconst_0
      13: anewarray     #37                 // class java/lang/Object
      16: invokestatic  #38                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      19: iload_2
      20: iconst_1
      21: if_icmplt     28
      24: iconst_1
      25: goto          29
      28: iconst_0
      29: ldc           #71                 // String executions must be greater than or equal to 1
      31: iconst_0
      32: anewarray     #37                 // class java/lang/Object
      35: invokestatic  #38                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      38: iload_2
      39: iload_1
      40: if_icmplt     47
      43: iconst_1
      44: goto          48
      47: iconst_0
      48: ldc           #72                 // String executions must be greater than or equal to failures
      50: iconst_0
      51: anewarray     #37                 // class java/lang/Object
      54: invokestatic  #38                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      57: aload_0
      58: new           #73                 // class net/jodah/failsafe/util/Ratio
      61: dup
      62: iload_1
      63: iload_2
      64: invokespecial #74                 // Method net/jodah/failsafe/util/Ratio."<init>":(II)V
      67: putfield      #44                 // Field failureThreshold:Lnet/jodah/failsafe/util/Ratio;
      70: aload_0
      71: getfield      #5                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      74: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      77: checkcast     #20                 // class net/jodah/failsafe/internal/CircuitState
      80: aload_0
      81: getfield      #44                 // Field failureThreshold:Lnet/jodah/failsafe/util/Ratio;
      84: invokevirtual #75                 // Method net/jodah/failsafe/internal/CircuitState.setFailureThreshold:(Lnet/jodah/failsafe/util/Ratio;)V
      87: aload_0
      88: areturn

  public net.jodah.failsafe.CircuitBreaker withSuccessThreshold(int);
    Code:
       0: iload_1
       1: iconst_1
       2: if_icmplt     9
       5: iconst_1
       6: goto          10
       9: iconst_0
      10: ldc           #76                 // String successThreshold must be greater than or equal to 1
      12: iconst_0
      13: anewarray     #37                 // class java/lang/Object
      16: invokestatic  #38                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      19: aload_0
      20: iload_1
      21: iload_1
      22: invokevirtual #77                 // Method withSuccessThreshold:(II)Lnet/jodah/failsafe/CircuitBreaker;
      25: areturn

  public synchronized net.jodah.failsafe.CircuitBreaker withSuccessThreshold(int, int);
    Code:
       0: iload_1
       1: iconst_1
       2: if_icmplt     9
       5: iconst_1
       6: goto          10
       9: iconst_0
      10: ldc           #78                 // String successes must be greater than or equal to 1
      12: iconst_0
      13: anewarray     #37                 // class java/lang/Object
      16: invokestatic  #38                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      19: iload_2
      20: iconst_1
      21: if_icmplt     28
      24: iconst_1
      25: goto          29
      28: iconst_0
      29: ldc           #71                 // String executions must be greater than or equal to 1
      31: iconst_0
      32: anewarray     #37                 // class java/lang/Object
      35: invokestatic  #38                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      38: iload_2
      39: iload_1
      40: if_icmplt     47
      43: iconst_1
      44: goto          48
      47: iconst_0
      48: ldc           #79                 // String executions must be greater than or equal to successes
      50: iconst_0
      51: anewarray     #37                 // class java/lang/Object
      54: invokestatic  #38                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      57: aload_0
      58: new           #73                 // class net/jodah/failsafe/util/Ratio
      61: dup
      62: iload_1
      63: iload_2
      64: invokespecial #74                 // Method net/jodah/failsafe/util/Ratio."<init>":(II)V
      67: putfield      #46                 // Field successThreshold:Lnet/jodah/failsafe/util/Ratio;
      70: aload_0
      71: getfield      #5                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      74: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      77: checkcast     #20                 // class net/jodah/failsafe/internal/CircuitState
      80: aload_0
      81: getfield      #46                 // Field successThreshold:Lnet/jodah/failsafe/util/Ratio;
      84: invokevirtual #80                 // Method net/jodah/failsafe/internal/CircuitState.setSuccessThreshold:(Lnet/jodah/failsafe/util/Ratio;)V
      87: aload_0
      88: areturn

  public net.jodah.failsafe.CircuitBreaker withTimeout(long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_3
       1: ldc           #64                 // String timeUnit
       3: invokestatic  #26                 // Method net/jodah/failsafe/internal/util/Assert.notNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: lload_1
       8: lconst_0
       9: lcmp
      10: ifle          17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ldc           #81                 // String timeout must be greater than 0
      20: iconst_0
      21: anewarray     #37                 // class java/lang/Object
      24: invokestatic  #38                 // Method net/jodah/failsafe/internal/util/Assert.isTrue:(ZLjava/lang/String;[Ljava/lang/Object;)V
      27: aload_0
      28: new           #66                 // class net/jodah/failsafe/util/Duration
      31: dup
      32: lload_1
      33: aload_3
      34: invokespecial #67                 // Method net/jodah/failsafe/util/Duration."<init>":(JLjava/util/concurrent/TimeUnit;)V
      37: putfield      #47                 // Field timeout:Lnet/jodah/failsafe/util/Duration;
      40: aload_0
      41: areturn

  void before();
    Code:
       0: aload_0
       1: getfield      #1                  // Field currentExecutions:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #82                 // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
       7: pop
       8: return

  void recordFailure();
    Code:
       0: aload_0
       1: getfield      #5                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #20                 // class net/jodah/failsafe/internal/CircuitState
      10: invokevirtual #83                 // Method net/jodah/failsafe/internal/CircuitState.recordFailure:()V
      13: aload_0
      14: getfield      #1                  // Field currentExecutions:Ljava/util/concurrent/atomic/AtomicInteger;
      17: invokevirtual #62                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
      20: pop
      21: goto          35
      24: astore_1
      25: aload_0
      26: getfield      #1                  // Field currentExecutions:Ljava/util/concurrent/atomic/AtomicInteger;
      29: invokevirtual #62                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
      32: pop
      33: aload_1
      34: athrow
      35: return
    Exception table:
       from    to  target type
           0    13    24   any

  void recordResult(java.lang.Object, java.lang.Throwable);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #84                 // Method isFailure:(Ljava/lang/Object;Ljava/lang/Throwable;)Z
       6: ifeq          25
       9: aload_0
      10: getfield      #5                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      13: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      16: checkcast     #20                 // class net/jodah/failsafe/internal/CircuitState
      19: invokevirtual #83                 // Method net/jodah/failsafe/internal/CircuitState.recordFailure:()V
      22: goto          38
      25: aload_0
      26: getfield      #5                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      29: invokevirtual #19                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
      32: checkcast     #20                 // class net/jodah/failsafe/internal/CircuitState
      35: invokevirtual #61                 // Method net/jodah/failsafe/internal/CircuitState.recordSuccess:()V
      38: aload_0
      39: getfield      #1                  // Field currentExecutions:Ljava/util/concurrent/atomic/AtomicInteger;
      42: invokevirtual #62                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
      45: pop
      46: goto          60
      49: astore_3
      50: aload_0
      51: getfield      #1                  // Field currentExecutions:Ljava/util/concurrent/atomic/AtomicInteger;
      54: invokevirtual #62                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
      57: pop
      58: aload_3
      59: athrow
      60: return
    Exception table:
       from    to  target type
           0    38    49   any

  private void transitionTo(net.jodah.failsafe.CircuitBreaker$State, net.jodah.failsafe.function.CheckedRunnable);
    Code:
       0: iconst_0
       1: istore_3
       2: aload_0
       3: dup
       4: astore        4
       6: monitorenter
       7: aload_0
       8: invokevirtual #50                 // Method getState:()Lnet/jodah/failsafe/CircuitBreaker$State;
      11: aload_1
      12: invokevirtual #51                 // Method net/jodah/failsafe/CircuitBreaker$State.equals:(Ljava/lang/Object;)Z
      15: ifne          105
      18: getstatic     #85                 // Field net/jodah/failsafe/CircuitBreaker$2.$SwitchMap$net$jodah$failsafe$CircuitBreaker$State:[I
      21: aload_1
      22: invokevirtual #86                 // Method net/jodah/failsafe/CircuitBreaker$State.ordinal:()I
      25: iaload
      26: tableswitch   { // 1 to 3
                     1: 52
                     2: 70
                     3: 88
               default: 103
          }
      52: aload_0
      53: getfield      #5                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      56: new           #16                 // class net/jodah/failsafe/internal/ClosedState
      59: dup
      60: aload_0
      61: invokespecial #17                 // Method net/jodah/failsafe/internal/ClosedState."<init>":(Lnet/jodah/failsafe/CircuitBreaker;)V
      64: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      67: goto          103
      70: aload_0
      71: getfield      #5                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      74: new           #87                 // class net/jodah/failsafe/internal/OpenState
      77: dup
      78: aload_0
      79: invokespecial #88                 // Method net/jodah/failsafe/internal/OpenState."<init>":(Lnet/jodah/failsafe/CircuitBreaker;)V
      82: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      85: goto          103
      88: aload_0
      89: getfield      #5                  // Field state:Ljava/util/concurrent/atomic/AtomicReference;
      92: new           #89                 // class net/jodah/failsafe/internal/HalfOpenState
      95: dup
      96: aload_0
      97: invokespecial #90                 // Method net/jodah/failsafe/internal/HalfOpenState."<init>":(Lnet/jodah/failsafe/CircuitBreaker;)V
     100: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
     103: iconst_1
     104: istore_3
     105: aload         4
     107: monitorexit
     108: goto          119
     111: astore        5
     113: aload         4
     115: monitorexit
     116: aload         5
     118: athrow
     119: iload_3
     120: ifeq          138
     123: aload_2
     124: ifnull        138
     127: aload_2
     128: invokeinterface #91,  1           // InterfaceMethod net/jodah/failsafe/function/CheckedRunnable.run:()V
     133: goto          138
     136: astore        4
     138: return
    Exception table:
       from    to  target type
           7   108   111   any
         111   116   111   any
         127   133   136   Class java/lang/Exception

  static java.util.concurrent.atomic.AtomicInteger access$000(net.jodah.failsafe.CircuitBreaker);
    Code:
       0: aload_0
       1: getfield      #1                  // Field currentExecutions:Ljava/util/concurrent/atomic/AtomicInteger;
       4: areturn
}
