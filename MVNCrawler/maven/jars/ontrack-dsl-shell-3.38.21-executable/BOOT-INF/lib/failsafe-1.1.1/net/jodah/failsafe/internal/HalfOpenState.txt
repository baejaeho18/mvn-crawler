Compiled from "HalfOpenState.java"
public class net.jodah.failsafe.internal.HalfOpenState extends net.jodah.failsafe.internal.CircuitState {
  private final net.jodah.failsafe.CircuitBreaker circuit;

  private net.jodah.failsafe.internal.util.CircularBitSet bitSet;

  public net.jodah.failsafe.internal.HalfOpenState(net.jodah.failsafe.CircuitBreaker);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method net/jodah/failsafe/internal/CircuitState."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field circuit:Lnet/jodah/failsafe/CircuitBreaker;
       9: aload_0
      10: aload_1
      11: invokevirtual #3                  // Method net/jodah/failsafe/CircuitBreaker.getSuccessThreshold:()Lnet/jodah/failsafe/util/Ratio;
      14: ifnull        24
      17: aload_1
      18: invokevirtual #3                  // Method net/jodah/failsafe/CircuitBreaker.getSuccessThreshold:()Lnet/jodah/failsafe/util/Ratio;
      21: goto          41
      24: aload_1
      25: invokevirtual #4                  // Method net/jodah/failsafe/CircuitBreaker.getFailureThreshold:()Lnet/jodah/failsafe/util/Ratio;
      28: ifnull        38
      31: aload_1
      32: invokevirtual #4                  // Method net/jodah/failsafe/CircuitBreaker.getFailureThreshold:()Lnet/jodah/failsafe/util/Ratio;
      35: goto          41
      38: getstatic     #5                  // Field ONE_OF_ONE:Lnet/jodah/failsafe/util/Ratio;
      41: invokevirtual #6                  // Method setSuccessThreshold:(Lnet/jodah/failsafe/util/Ratio;)V
      44: return

  public boolean allowsExecution(net.jodah.failsafe.internal.CircuitBreakerStats);
    Code:
       0: aload_1
       1: invokeinterface #7,  1            // InterfaceMethod net/jodah/failsafe/internal/CircuitBreakerStats.getCurrentExecutions:()I
       6: aload_0
       7: invokevirtual #8                  // Method maxConcurrentExecutions:()I
      10: if_icmpge     17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ireturn

  public net.jodah.failsafe.CircuitBreaker$State getState();
    Code:
       0: getstatic     #9                  // Field net/jodah/failsafe/CircuitBreaker$State.HALF_OPEN:Lnet/jodah/failsafe/CircuitBreaker$State;
       3: areturn

  public synchronized void recordFailure();
    Code:
       0: aload_0
       1: getfield      #10                 // Field bitSet:Lnet/jodah/failsafe/internal/util/CircularBitSet;
       4: iconst_0
       5: invokevirtual #11                 // Method net/jodah/failsafe/internal/util/CircularBitSet.setNext:(Z)I
       8: pop
       9: aload_0
      10: invokevirtual #12                 // Method checkThreshold:()V
      13: return

  public synchronized void recordSuccess();
    Code:
       0: aload_0
       1: getfield      #10                 // Field bitSet:Lnet/jodah/failsafe/internal/util/CircularBitSet;
       4: iconst_1
       5: invokevirtual #11                 // Method net/jodah/failsafe/internal/util/CircularBitSet.setNext:(Z)I
       8: pop
       9: aload_0
      10: invokevirtual #12                 // Method checkThreshold:()V
      13: return

  public void setFailureThreshold(net.jodah.failsafe.util.Ratio);
    Code:
       0: aload_0
       1: getfield      #2                  // Field circuit:Lnet/jodah/failsafe/CircuitBreaker;
       4: invokevirtual #3                  // Method net/jodah/failsafe/CircuitBreaker.getSuccessThreshold:()Lnet/jodah/failsafe/util/Ratio;
       7: ifnonnull     29
      10: aload_0
      11: new           #13                 // class net/jodah/failsafe/internal/util/CircularBitSet
      14: dup
      15: aload_1
      16: getfield      #14                 // Field net/jodah/failsafe/util/Ratio.denominator:I
      19: aload_0
      20: getfield      #10                 // Field bitSet:Lnet/jodah/failsafe/internal/util/CircularBitSet;
      23: invokespecial #15                 // Method net/jodah/failsafe/internal/util/CircularBitSet."<init>":(ILnet/jodah/failsafe/internal/util/CircularBitSet;)V
      26: putfield      #10                 // Field bitSet:Lnet/jodah/failsafe/internal/util/CircularBitSet;
      29: return

  public void setSuccessThreshold(net.jodah.failsafe.util.Ratio);
    Code:
       0: aload_0
       1: new           #13                 // class net/jodah/failsafe/internal/util/CircularBitSet
       4: dup
       5: aload_1
       6: getfield      #14                 // Field net/jodah/failsafe/util/Ratio.denominator:I
       9: aload_0
      10: getfield      #10                 // Field bitSet:Lnet/jodah/failsafe/internal/util/CircularBitSet;
      13: invokespecial #15                 // Method net/jodah/failsafe/internal/util/CircularBitSet."<init>":(ILnet/jodah/failsafe/internal/util/CircularBitSet;)V
      16: putfield      #10                 // Field bitSet:Lnet/jodah/failsafe/internal/util/CircularBitSet;
      19: return

  synchronized void checkThreshold();
    Code:
       0: aload_0
       1: getfield      #2                  // Field circuit:Lnet/jodah/failsafe/CircuitBreaker;
       4: invokevirtual #3                  // Method net/jodah/failsafe/CircuitBreaker.getSuccessThreshold:()Lnet/jodah/failsafe/util/Ratio;
       7: astore_1
       8: aload_0
       9: getfield      #2                  // Field circuit:Lnet/jodah/failsafe/CircuitBreaker;
      12: invokevirtual #4                  // Method net/jodah/failsafe/CircuitBreaker.getFailureThreshold:()Lnet/jodah/failsafe/util/Ratio;
      15: astore_2
      16: aload_1
      17: ifnull        90
      20: aload_0
      21: getfield      #10                 // Field bitSet:Lnet/jodah/failsafe/internal/util/CircularBitSet;
      24: invokevirtual #16                 // Method net/jodah/failsafe/internal/util/CircularBitSet.occupiedBits:()I
      27: aload_1
      28: getfield      #14                 // Field net/jodah/failsafe/util/Ratio.denominator:I
      31: if_icmpeq     55
      34: aload_1
      35: getfield      #17                 // Field net/jodah/failsafe/util/Ratio.ratio:D
      38: dconst_1
      39: dcmpl
      40: ifne          193
      43: aload_0
      44: getfield      #10                 // Field bitSet:Lnet/jodah/failsafe/internal/util/CircularBitSet;
      47: invokevirtual #18                 // Method net/jodah/failsafe/internal/util/CircularBitSet.positiveRatio:()D
      50: dconst_1
      51: dcmpg
      52: ifge          193
      55: aload_0
      56: getfield      #10                 // Field bitSet:Lnet/jodah/failsafe/internal/util/CircularBitSet;
      59: invokevirtual #18                 // Method net/jodah/failsafe/internal/util/CircularBitSet.positiveRatio:()D
      62: aload_1
      63: getfield      #17                 // Field net/jodah/failsafe/util/Ratio.ratio:D
      66: dcmpl
      67: iflt          80
      70: aload_0
      71: getfield      #2                  // Field circuit:Lnet/jodah/failsafe/CircuitBreaker;
      74: invokevirtual #19                 // Method net/jodah/failsafe/CircuitBreaker.close:()V
      77: goto          193
      80: aload_0
      81: getfield      #2                  // Field circuit:Lnet/jodah/failsafe/CircuitBreaker;
      84: invokevirtual #20                 // Method net/jodah/failsafe/CircuitBreaker.open:()V
      87: goto          193
      90: aload_2
      91: ifnull        164
      94: aload_0
      95: getfield      #10                 // Field bitSet:Lnet/jodah/failsafe/internal/util/CircularBitSet;
      98: invokevirtual #16                 // Method net/jodah/failsafe/internal/util/CircularBitSet.occupiedBits:()I
     101: aload_2
     102: getfield      #14                 // Field net/jodah/failsafe/util/Ratio.denominator:I
     105: if_icmpeq     129
     108: aload_2
     109: getfield      #17                 // Field net/jodah/failsafe/util/Ratio.ratio:D
     112: dconst_1
     113: dcmpl
     114: ifne          193
     117: aload_0
     118: getfield      #10                 // Field bitSet:Lnet/jodah/failsafe/internal/util/CircularBitSet;
     121: invokevirtual #21                 // Method net/jodah/failsafe/internal/util/CircularBitSet.negativeRatio:()D
     124: dconst_1
     125: dcmpg
     126: ifge          193
     129: aload_0
     130: getfield      #10                 // Field bitSet:Lnet/jodah/failsafe/internal/util/CircularBitSet;
     133: invokevirtual #21                 // Method net/jodah/failsafe/internal/util/CircularBitSet.negativeRatio:()D
     136: aload_2
     137: getfield      #17                 // Field net/jodah/failsafe/util/Ratio.ratio:D
     140: dcmpl
     141: iflt          154
     144: aload_0
     145: getfield      #2                  // Field circuit:Lnet/jodah/failsafe/CircuitBreaker;
     148: invokevirtual #20                 // Method net/jodah/failsafe/CircuitBreaker.open:()V
     151: goto          193
     154: aload_0
     155: getfield      #2                  // Field circuit:Lnet/jodah/failsafe/CircuitBreaker;
     158: invokevirtual #19                 // Method net/jodah/failsafe/CircuitBreaker.close:()V
     161: goto          193
     164: aload_0
     165: getfield      #10                 // Field bitSet:Lnet/jodah/failsafe/internal/util/CircularBitSet;
     168: invokevirtual #18                 // Method net/jodah/failsafe/internal/util/CircularBitSet.positiveRatio:()D
     171: dconst_1
     172: dcmpl
     173: ifne          186
     176: aload_0
     177: getfield      #2                  // Field circuit:Lnet/jodah/failsafe/CircuitBreaker;
     180: invokevirtual #19                 // Method net/jodah/failsafe/CircuitBreaker.close:()V
     183: goto          193
     186: aload_0
     187: getfield      #2                  // Field circuit:Lnet/jodah/failsafe/CircuitBreaker;
     190: invokevirtual #20                 // Method net/jodah/failsafe/CircuitBreaker.open:()V
     193: return

  int maxConcurrentExecutions();
    Code:
       0: aload_0
       1: getfield      #2                  // Field circuit:Lnet/jodah/failsafe/CircuitBreaker;
       4: invokevirtual #3                  // Method net/jodah/failsafe/CircuitBreaker.getSuccessThreshold:()Lnet/jodah/failsafe/util/Ratio;
       7: ifnull        21
      10: aload_0
      11: getfield      #2                  // Field circuit:Lnet/jodah/failsafe/CircuitBreaker;
      14: invokevirtual #3                  // Method net/jodah/failsafe/CircuitBreaker.getSuccessThreshold:()Lnet/jodah/failsafe/util/Ratio;
      17: getfield      #14                 // Field net/jodah/failsafe/util/Ratio.denominator:I
      20: ireturn
      21: aload_0
      22: getfield      #2                  // Field circuit:Lnet/jodah/failsafe/CircuitBreaker;
      25: invokevirtual #4                  // Method net/jodah/failsafe/CircuitBreaker.getFailureThreshold:()Lnet/jodah/failsafe/util/Ratio;
      28: ifnull        42
      31: aload_0
      32: getfield      #2                  // Field circuit:Lnet/jodah/failsafe/CircuitBreaker;
      35: invokevirtual #4                  // Method net/jodah/failsafe/CircuitBreaker.getFailureThreshold:()Lnet/jodah/failsafe/util/Ratio;
      38: getfield      #14                 // Field net/jodah/failsafe/util/Ratio.denominator:I
      41: ireturn
      42: iconst_1
      43: ireturn
}
