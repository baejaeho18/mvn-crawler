Compiled from "ScalazArbitrary.scala"
public final class scalaz.scalacheck.ScalazArbitrary {
  public static org.scalacheck.Arbitrary<scalaz.Alpha> AlphaArbitrary();
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: invokevirtual #16                 // Method scalaz/scalacheck/ScalazArbitrary$.AlphaArbitrary:()Lorg/scalacheck/Arbitrary;
       6: areturn

  public static <A, B> org.scalacheck.Arbitrary<scalaz.$eq$eq$greater$greater<A, B>> Arbitrary_$eq$eq$greater$greater(scalaz.Order<A>, org.scalacheck.Arbitrary<A>, org.scalacheck.Arbitrary<B>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #21                 // Method scalaz/scalacheck/ScalazArbitrary$.Arbitrary_$eq$eq$greater$greater:(Lscalaz/Order;Lorg/scalacheck/Arbitrary;Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       9: areturn

  public static <A> org.scalacheck.Arbitrary<scalaz.ISet<A>> Arbitrary_ISet(scalaz.Order<A>, org.scalacheck.Arbitrary<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: aload_1
       5: invokevirtual #26                 // Method scalaz/scalacheck/ScalazArbitrary$.Arbitrary_ISet:(Lscalaz/Order;Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       8: areturn

  public static <A> org.scalacheck.Arbitrary<scalaz.Maybe<A>> Arbitrary_Maybe(org.scalacheck.Arbitrary<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #31                 // Method scalaz/scalacheck/ScalazArbitrary$.Arbitrary_Maybe:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static org.scalacheck.Arbitrary<java.lang.Object> BigIntMultiplicationArbitrary();
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: invokevirtual #35                 // Method scalaz/scalacheck/ScalazArbitrary$.BigIntMultiplicationArbitrary:()Lorg/scalacheck/Arbitrary;
       6: areturn

  public static org.scalacheck.Arbitrary<java.lang.Object> BigIntegerMultiplicationArbitrary();
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: invokevirtual #38                 // Method scalaz/scalacheck/ScalazArbitrary$.BigIntegerMultiplicationArbitrary:()Lorg/scalacheck/Arbitrary;
       6: areturn

  public static org.scalacheck.Arbitrary<java.lang.Object> BooleanConjunctionArbitrary();
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: invokevirtual #41                 // Method scalaz/scalacheck/ScalazArbitrary$.BooleanConjunctionArbitrary:()Lorg/scalacheck/Arbitrary;
       6: areturn

  public static org.scalacheck.Arbitrary<java.lang.Object> ByteMultiplicationArbitrary();
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: invokevirtual #44                 // Method scalaz/scalacheck/ScalazArbitrary$.ByteMultiplicationArbitrary:()Lorg/scalacheck/Arbitrary;
       6: areturn

  public static <A> org.scalacheck.Arbitrary<java.util.concurrent.Callable<A>> CallableArbitrary(org.scalacheck.Arbitrary<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #48                 // Method scalaz/scalacheck/ScalazArbitrary$.CallableArbitrary:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <A> org.scalacheck.Arbitrary<scalaz.CaseInsensitive<A>> CaseInsensitiveArbitrary(org.scalacheck.Arbitrary<A>, scalaz.FoldCase<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: aload_1
       5: invokevirtual #53                 // Method scalaz/scalacheck/ScalazArbitrary$.CaseInsensitiveArbitrary:(Lorg/scalacheck/Arbitrary;Lscalaz/FoldCase;)Lorg/scalacheck/Arbitrary;
       8: areturn

  public static org.scalacheck.Arbitrary<java.lang.Object> CharMultiplicationArbitrary();
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: invokevirtual #56                 // Method scalaz/scalacheck/ScalazArbitrary$.CharMultiplicationArbitrary:()Lorg/scalacheck/Arbitrary;
       6: areturn

  public static <M, A, B> org.scalacheck.Arbitrary<scalaz.Cokleisli<M, A, B>> CokleisliArbitrary(org.scalacheck.Arbitrary<scala.Function1<java.lang.Object, B>>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #60                 // Method scalaz/scalacheck/ScalazArbitrary$.CokleisliArbitrary:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <F, G, A> org.scalacheck.Arbitrary<scalaz.Coproduct<F, G, A>> CoproductArbitrary(org.scalacheck.Arbitrary<scalaz.$bslash$div<java.lang.Object, java.lang.Object>>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #64                 // Method scalaz/scalacheck/ScalazArbitrary$.CoproductArbitrary:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <A> org.scalacheck.Arbitrary<scalaz.CorecursiveList<A>> CorecursiveListArbitrary(org.scalacheck.Arbitrary<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #68                 // Method scalaz/scalacheck/ScalazArbitrary$.CorecursiveListArbitrary:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static org.scalacheck.Arbitrary<scalaz.Digit> DigitArbitrary();
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: invokevirtual #72                 // Method scalaz/scalacheck/ScalazArbitrary$.DigitArbitrary:()Lorg/scalacheck/Arbitrary;
       6: areturn

  public static <A, B> org.scalacheck.Arbitrary<scalaz.$bslash$div<A, B>> DisjunctionArbitrary(org.scalacheck.Arbitrary<A>, org.scalacheck.Arbitrary<B>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: aload_1
       5: invokevirtual #77                 // Method scalaz/scalacheck/ScalazArbitrary$.DisjunctionArbitrary:(Lorg/scalacheck/Arbitrary;Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       8: areturn

  public static org.scalacheck.Arbitrary<java.lang.Object> DoubleMultiplicationArbitrary();
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: invokevirtual #80                 // Method scalaz/scalacheck/ScalazArbitrary$.DoubleMultiplicationArbitrary:()Lorg/scalacheck/Arbitrary;
       6: areturn

  public static <A> org.scalacheck.Arbitrary<scalaz.EphemeralStream<A>> EphemeralStreamArbitrary(org.scalacheck.Arbitrary<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #84                 // Method scalaz/scalacheck/ScalazArbitrary$.EphemeralStreamArbitrary:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <V, A> org.scalacheck.Arbitrary<scalaz.FingerTree$Finger<V, A>> FingerArbitrary(scalaz.Monoid<V>, org.scalacheck.Arbitrary<A>, scalaz.Reducer<A, V>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #89                 // Method scalaz/scalacheck/ScalazArbitrary$.FingerArbitrary:(Lscalaz/Monoid;Lorg/scalacheck/Arbitrary;Lscalaz/Reducer;)Lorg/scalacheck/Arbitrary;
       9: areturn

  public static <V, A> org.scalacheck.Arbitrary<scalaz.FingerTree<V, A>> FingerTreeArbitrary(scalaz.Monoid<V>, org.scalacheck.Arbitrary<A>, scalaz.Reducer<A, V>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #93                 // Method scalaz/scalacheck/ScalazArbitrary$.FingerTreeArbitrary:(Lscalaz/Monoid;Lorg/scalacheck/Arbitrary;Lscalaz/Reducer;)Lorg/scalacheck/Arbitrary;
       9: areturn

  public static <A> org.scalacheck.Arbitrary<java.lang.Object> FirstMaybeArbitrary(org.scalacheck.Arbitrary<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #97                 // Method scalaz/scalacheck/ScalazArbitrary$.FirstMaybeArbitrary:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <A> org.scalacheck.Arbitrary<java.lang.Object> FirstOptionArbitrary(org.scalacheck.Arbitrary<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #100                // Method scalaz/scalacheck/ScalazArbitrary$.FirstOptionArbitrary:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static org.scalacheck.Arbitrary<java.lang.Object> FloatMultiplicationArbitrary();
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: invokevirtual #103                // Method scalaz/scalacheck/ScalazArbitrary$.FloatMultiplicationArbitrary:()Lorg/scalacheck/Arbitrary;
       6: areturn

  public static <A> org.scalacheck.Arbitrary<scala.Function0<A>> Function0Arbitrary(org.scalacheck.Arbitrary<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #107                // Method scalaz/scalacheck/ScalazArbitrary$.Function0Arbitrary:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <A> org.scalacheck.Arbitrary<scalaz.IStream<A>> IStreamArbitrary(org.scalacheck.Arbitrary<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #111                // Method scalaz/scalacheck/ScalazArbitrary$.IStreamArbitrary:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <A> org.scalacheck.Arbitrary<scalaz.ImmutableArray<A>> ImmutableArrayArbitrary(org.scalacheck.Arbitrary<A>, scala.reflect.ClassTag<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: aload_1
       5: invokevirtual #116                // Method scalaz/scalacheck/ScalazArbitrary$.ImmutableArrayArbitrary:(Lorg/scalacheck/Arbitrary;Lscala/reflect/ClassTag;)Lorg/scalacheck/Arbitrary;
       8: areturn

  public static <A> org.scalacheck.Arbitrary<scalaz.IndSeq<A>> IndSeqArbibrary(org.scalacheck.Arbitrary<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #120                // Method scalaz/scalacheck/ScalazArbitrary$.IndSeqArbibrary:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static org.scalacheck.Arbitrary<java.lang.Object> IntDualArbitrary();
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: invokevirtual #123                // Method scalaz/scalacheck/ScalazArbitrary$.IntDualArbitrary:()Lorg/scalacheck/Arbitrary;
       6: areturn

  public static org.scalacheck.Arbitrary<java.lang.Object> IntMultiplicationArbitrary();
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: invokevirtual #126                // Method scalaz/scalacheck/ScalazArbitrary$.IntMultiplicationArbitrary:()Lorg/scalacheck/Arbitrary;
       6: areturn

  public static <A> org.scalacheck.Arbitrary<scala.collection.Iterable<A>> IterableArbitrary(org.scalacheck.Arbitrary<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #130                // Method scalaz/scalacheck/ScalazArbitrary$.IterableArbitrary:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <M, A, B> org.scalacheck.Arbitrary<scalaz.Kleisli<M, A, B>> KleisliArbitrary(org.scalacheck.Arbitrary<scala.Function1<A, java.lang.Object>>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #134                // Method scalaz/scalacheck/ScalazArbitrary$.KleisliArbitrary:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <A> org.scalacheck.Arbitrary<java.lang.Object> LastMaybeArbitrary(org.scalacheck.Arbitrary<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #137                // Method scalaz/scalacheck/ScalazArbitrary$.LastMaybeArbitrary:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <A> org.scalacheck.Arbitrary<java.lang.Object> LastOptionArbitrary(org.scalacheck.Arbitrary<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #140                // Method scalaz/scalacheck/ScalazArbitrary$.LastOptionArbitrary:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static org.scalacheck.Arbitrary<java.lang.Object> LongMultiplicationArbitrary();
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: invokevirtual #143                // Method scalaz/scalacheck/ScalazArbitrary$.LongMultiplicationArbitrary:()Lorg/scalacheck/Arbitrary;
       6: areturn

  public static <A> org.scalacheck.Arbitrary<java.lang.Object> MaxMaybeArbitrary(org.scalacheck.Arbitrary<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #146                // Method scalaz/scalacheck/ScalazArbitrary$.MaxMaybeArbitrary:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <A> org.scalacheck.Arbitrary<java.lang.Object> MaxOptionArbitrary(org.scalacheck.Arbitrary<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #149                // Method scalaz/scalacheck/ScalazArbitrary$.MaxOptionArbitrary:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <A> org.scalacheck.Arbitrary<java.lang.Object> MinMaybeArbitrary(org.scalacheck.Arbitrary<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #152                // Method scalaz/scalacheck/ScalazArbitrary$.MinMaybeArbitrary:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <A> org.scalacheck.Arbitrary<java.lang.Object> MinOptionArbitrary(org.scalacheck.Arbitrary<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #155                // Method scalaz/scalacheck/ScalazArbitrary$.MinOptionArbitrary:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <A> org.scalacheck.Arbitrary<scalaz.Name<A>> NameArbitrary(org.scalacheck.Arbitrary<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #159                // Method scalaz/scalacheck/ScalazArbitrary$.NameArbitrary:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <A> org.scalacheck.Arbitrary<scalaz.Need<A>> NeedArbitrary(org.scalacheck.Arbitrary<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #163                // Method scalaz/scalacheck/ScalazArbitrary$.NeedArbitrary:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <V, A> org.scalacheck.Arbitrary<scalaz.FingerTree$Node<V, A>> NodeArbitrary(scalaz.Monoid<V>, org.scalacheck.Arbitrary<A>, scalaz.Reducer<A, V>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #167                // Method scalaz/scalacheck/ScalazArbitrary$.NodeArbitrary:(Lscalaz/Monoid;Lorg/scalacheck/Arbitrary;Lscalaz/Reducer;)Lorg/scalacheck/Arbitrary;
       9: areturn

  public static <A> org.scalacheck.Arbitrary<scalaz.NonEmptyList<A>> NonEmptyListArbitrary(org.scalacheck.Arbitrary<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #171                // Method scalaz/scalacheck/ScalazArbitrary$.NonEmptyListArbitrary:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <F, A> org.scalacheck.Arbitrary<scalaz.OneAnd<F, A>> OneAndArbitrary(org.scalacheck.Arbitrary<A>, org.scalacheck.Arbitrary<java.lang.Object>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: aload_1
       5: invokevirtual #175                // Method scalaz/scalacheck/ScalazArbitrary$.OneAndArbitrary:(Lorg/scalacheck/Arbitrary;Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       8: areturn

  public static <F, A> org.scalacheck.Arbitrary<scalaz.OneOr<F, A>> OneOrArbitrary(org.scalacheck.Arbitrary<A>, org.scalacheck.Arbitrary<java.lang.Object>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: aload_1
       5: invokevirtual #179                // Method scalaz/scalacheck/ScalazArbitrary$.OneOrArbitrary:(Lorg/scalacheck/Arbitrary;Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       8: areturn

  public static org.scalacheck.Arbitrary<scalaz.Ordering> OrderingArbitrary();
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: invokevirtual #183                // Method scalaz/scalacheck/ScalazArbitrary$.OrderingArbitrary:()Lorg/scalacheck/Arbitrary;
       6: areturn

  public static org.scalacheck.Arbitrary<java.lang.Object> ShortMultiplicationArbitrary();
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: invokevirtual #186                // Method scalaz/scalacheck/ScalazArbitrary$.ShortMultiplicationArbitrary:()Lorg/scalacheck/Arbitrary;
       6: areturn

  public static <A> org.scalacheck.Arbitrary<scalaz.StrictTree<A>> StrictTreeArbitrary(org.scalacheck.Arbitrary<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #190                // Method scalaz/scalacheck/ScalazArbitrary$.StrictTreeArbitrary:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <A> org.scalacheck.Arbitrary<scalaz.Tree<A>> TreeArbitrary(org.scalacheck.Arbitrary<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #194                // Method scalaz/scalacheck/ScalazArbitrary$.TreeArbitrary:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <A> org.scalacheck.Arbitrary<scalaz.TreeLoc<A>> TreeLocArbitrary(org.scalacheck.Arbitrary<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #198                // Method scalaz/scalacheck/ScalazArbitrary$.TreeLocArbitrary:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <A> org.scalacheck.Arbitrary<scala.Tuple1<A>> Tuple1Arbitrary(org.scalacheck.Arbitrary<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #202                // Method scalaz/scalacheck/ScalazArbitrary$.Tuple1Arbitrary:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static org.scalacheck.Arbitrary<scala.runtime.BoxedUnit> UnitArbitrary();
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: invokevirtual #206                // Method scalaz/scalacheck/ScalazArbitrary$.UnitArbitrary:()Lorg/scalacheck/Arbitrary;
       6: areturn

  public static <A, B> org.scalacheck.Arbitrary<scalaz.Validation<A, B>> ValidationArbitrary(org.scalacheck.Arbitrary<A>, org.scalacheck.Arbitrary<B>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: aload_1
       5: invokevirtual #210                // Method scalaz/scalacheck/ScalazArbitrary$.ValidationArbitrary:(Lorg/scalacheck/Arbitrary;Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       8: areturn

  public static <A> org.scalacheck.Arbitrary<scalaz.Value<A>> ValueArbitrary(org.scalacheck.Arbitrary<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #214                // Method scalaz/scalacheck/ScalazArbitrary$.ValueArbitrary:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <A> org.scalacheck.Arbitrary<scalaz.Zipper<A>> ZipperArbitrary(org.scalacheck.Arbitrary<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #218                // Method scalaz/scalacheck/ScalazArbitrary$.ZipperArbitrary:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <F, A> org.scalacheck.Arbitrary<scalaz.Alter<F, A>> alterArbitrary(org.scalacheck.Arbitrary<java.lang.Object>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #222                // Method scalaz/scalacheck/ScalazArbitrary$.alterArbitrary:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <F, A> org.scalacheck.Arbitrary<scalaz.Ap<F, A>> apArbitrary(org.scalacheck.Arbitrary<java.lang.Object>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #226                // Method scalaz/scalacheck/ScalazArbitrary$.apArbitrary:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static org.scalacheck.Arbitrary<scala.math.BigInt> arbBigInt();
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: invokevirtual #230                // Method scalaz/scalacheck/ScalazArbitrary$.arbBigInt:()Lorg/scalacheck/Arbitrary;
       6: areturn

  public static org.scalacheck.Arbitrary<java.math.BigInteger> arbBigInteger();
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: invokevirtual #234                // Method scalaz/scalacheck/ScalazArbitrary$.arbBigInteger:()Lorg/scalacheck/Arbitrary;
       6: areturn

  public static <F, A> org.scalacheck.Cogen<scalaz.Alter<F, A>> cogenAlter(org.scalacheck.Cogen<java.lang.Object>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #239                // Method scalaz/scalacheck/ScalazArbitrary$.cogenAlter:(Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       7: areturn

  public static <F, A> org.scalacheck.Cogen<scalaz.Ap<F, A>> cogenAp(org.scalacheck.Cogen<java.lang.Object>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #243                // Method scalaz/scalacheck/ScalazArbitrary$.cogenAp:(Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       7: areturn

  public static <F, A, B> org.scalacheck.Cogen<scalaz.Cokleisli<F, A, B>> cogenCokleisli(org.scalacheck.Cogen<scala.Function1<java.lang.Object, B>>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #247                // Method scalaz/scalacheck/ScalazArbitrary$.cogenCokleisli:(Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       7: areturn

  public static <A, B> org.scalacheck.Cogen<scalaz.Const<A, B>> cogenConst(org.scalacheck.Cogen<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #251                // Method scalaz/scalacheck/ScalazArbitrary$.cogenConst:(Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       7: areturn

  public static <F, A> org.scalacheck.Cogen<scalaz.ContravariantCoyoneda<F, A>> cogenContravariantCoyoneda(scalaz.Contravariant<F>, org.scalacheck.Cogen<java.lang.Object>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: aload_1
       5: invokevirtual #256                // Method scalaz/scalacheck/ScalazArbitrary$.cogenContravariantCoyoneda:(Lscalaz/Contravariant;Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       8: areturn

  public static <F, G, A> org.scalacheck.Cogen<scalaz.Coproduct<F, G, A>> cogenCoproduct(org.scalacheck.Cogen<scalaz.$bslash$div<java.lang.Object, java.lang.Object>>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #260                // Method scalaz/scalacheck/ScalazArbitrary$.cogenCoproduct:(Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       7: areturn

  public static <F, A> org.scalacheck.Cogen<scalaz.Coyoneda<F, A>> cogenCoyoneda(scalaz.Functor<F>, org.scalacheck.Cogen<java.lang.Object>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: aload_1
       5: invokevirtual #265                // Method scalaz/scalacheck/ScalazArbitrary$.cogenCoyoneda:(Lscalaz/Functor;Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       8: areturn

  public static <A> org.scalacheck.Cogen<scalaz.DList<A>> cogenDList(org.scalacheck.Cogen<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #269                // Method scalaz/scalacheck/ScalazArbitrary$.cogenDList:(Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       7: areturn

  public static <A> org.scalacheck.Cogen<scalaz.Dequeue<A>> cogenDequeue(org.scalacheck.Cogen<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #273                // Method scalaz/scalacheck/ScalazArbitrary$.cogenDequeue:(Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       7: areturn

  public static <A> org.scalacheck.Cogen<scalaz.Diev<A>> cogenDiev(org.scalacheck.Cogen<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #277                // Method scalaz/scalacheck/ScalazArbitrary$.cogenDiev:(Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       7: areturn

  public static <A, B> org.scalacheck.Cogen<scalaz.$bslash$div<A, B>> cogenDisjunction(org.scalacheck.Cogen<A>, org.scalacheck.Cogen<B>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: aload_1
       5: invokevirtual #282                // Method scalaz/scalacheck/ScalazArbitrary$.cogenDisjunction:(Lorg/scalacheck/Cogen;Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       8: areturn

  public static <A1, A2, A3> org.scalacheck.Cogen<scalaz.Either3<A1, A2, A3>> cogenEither3(org.scalacheck.Cogen<A1>, org.scalacheck.Cogen<A2>, org.scalacheck.Cogen<A3>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #287                // Method scalaz/scalacheck/ScalazArbitrary$.cogenEither3:(Lorg/scalacheck/Cogen;Lorg/scalacheck/Cogen;Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       9: areturn

  public static <A, F, B> org.scalacheck.Cogen<scalaz.EitherT<A, F, B>> cogenEitherT(org.scalacheck.Cogen<java.lang.Object>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #291                // Method scalaz/scalacheck/ScalazArbitrary$.cogenEitherT:(Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       7: areturn

  public static <A> org.scalacheck.Cogen<scalaz.Endo<A>> cogenEndo(org.scalacheck.Cogen<scala.Function1<A, A>>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #295                // Method scalaz/scalacheck/ScalazArbitrary$.cogenEndo:(Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       7: areturn

  public static <F, A> org.scalacheck.Cogen<scalaz.Endomorphic<F, A>> cogenEndomorphic(org.scalacheck.Cogen<java.lang.Object>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #299                // Method scalaz/scalacheck/ScalazArbitrary$.cogenEndomorphic:(Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       7: areturn

  public static <A> org.scalacheck.Cogen<scalaz.EphemeralStream<A>> cogenEphemeralStream(org.scalacheck.Cogen<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #303                // Method scalaz/scalacheck/ScalazArbitrary$.cogenEphemeralStream:(Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       7: areturn

  public static <A> org.scalacheck.Cogen<scalaz.Heap<A>> cogenHeap(org.scalacheck.Cogen<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #307                // Method scalaz/scalacheck/ScalazArbitrary$.cogenHeap:(Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       7: areturn

  public static <A> org.scalacheck.Cogen<scalaz.IList<A>> cogenIList(org.scalacheck.Cogen<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #311                // Method scalaz/scalacheck/ScalazArbitrary$.cogenIList:(Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       7: areturn

  public static <A, B> org.scalacheck.Cogen<scalaz.$eq$eq$greater$greater<A, B>> cogenIMap(org.scalacheck.Cogen<A>, org.scalacheck.Cogen<B>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: aload_1
       5: invokevirtual #315                // Method scalaz/scalacheck/ScalazArbitrary$.cogenIMap:(Lorg/scalacheck/Cogen;Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       8: areturn

  public static <A> org.scalacheck.Cogen<scalaz.ISet<A>> cogenISet(org.scalacheck.Cogen<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #319                // Method scalaz/scalacheck/ScalazArbitrary$.cogenISet:(Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       7: areturn

  public static <F, A> org.scalacheck.Cogen<scalaz.IdT<F, A>> cogenIdT(org.scalacheck.Cogen<java.lang.Object>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #323                // Method scalaz/scalacheck/ScalazArbitrary$.cogenIdT:(Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       7: areturn

  public static <A> org.scalacheck.Cogen<scalaz.ImmutableArray<A>> cogenImmutableArray(org.scalacheck.Cogen<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #327                // Method scalaz/scalacheck/ScalazArbitrary$.cogenImmutableArray:(Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       7: areturn

  public static <A> org.scalacheck.Cogen<scalaz.IndSeq<A>> cogenIndSeq(org.scalacheck.Cogen<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #331                // Method scalaz/scalacheck/ScalazArbitrary$.cogenIndSeq:(Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       7: areturn

  public static <W, R, O, M, A> org.scalacheck.Cogen<scalaz.IndexedContsT<W, R, O, M, A>> cogenIndexedContsT(org.scalacheck.Cogen<scala.Function1<java.lang.Object, java.lang.Object>>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #335                // Method scalaz/scalacheck/ScalazArbitrary$.cogenIndexedContsT:(Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       7: areturn

  public static <R, W, S1, S2, F, A> org.scalacheck.Cogen<scalaz.IndexedReaderWriterStateT<R, W, S1, S2, F, A>> cogenIndexedReaderWriterStateT(scalaz.Monad<F>, org.scalacheck.Cogen<scala.Function2<R, S1, java.lang.Object>>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: aload_1
       5: invokevirtual #340                // Method scalaz/scalacheck/ScalazArbitrary$.cogenIndexedReaderWriterStateT:(Lscalaz/Monad;Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       8: areturn

  public static <F, S1, S2, A> org.scalacheck.Cogen<scalaz.IndexedStateT<S1, S2, F, A>> cogenIndexedStateT(scalaz.Monad<F>, org.scalacheck.Cogen<scala.Function1<S1, java.lang.Object>>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: aload_1
       5: invokevirtual #344                // Method scalaz/scalacheck/ScalazArbitrary$.cogenIndexedStateT:(Lscalaz/Monad;Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       8: areturn

  public static <F, I, A, B> org.scalacheck.Cogen<scalaz.IndexedStoreT<F, I, A, B>> cogenIndexedStoreT(org.scalacheck.Cogen<I>, org.scalacheck.Cogen<java.lang.Object>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: aload_1
       5: invokevirtual #348                // Method scalaz/scalacheck/ScalazArbitrary$.cogenIndexedStoreT:(Lorg/scalacheck/Cogen;Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       8: areturn

  public static <F, A, B> org.scalacheck.Cogen<scalaz.Kleisli<F, A, B>> cogenKleisli(org.scalacheck.Cogen<scala.Function1<A, java.lang.Object>>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #352                // Method scalaz/scalacheck/ScalazArbitrary$.cogenKleisli:(Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       7: areturn

  public static <A, B> org.scalacheck.Cogen<scalaz.LazyEither<A, B>> cogenLazyEither(org.scalacheck.Cogen<A>, org.scalacheck.Cogen<B>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: aload_1
       5: invokevirtual #356                // Method scalaz/scalacheck/ScalazArbitrary$.cogenLazyEither:(Lorg/scalacheck/Cogen;Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       8: areturn

  public static <F, A, B> org.scalacheck.Cogen<scalaz.LazyEitherT<F, A, B>> cogenLazyEitherT(org.scalacheck.Cogen<java.lang.Object>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #360                // Method scalaz/scalacheck/ScalazArbitrary$.cogenLazyEitherT:(Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       7: areturn

  public static <A> org.scalacheck.Cogen<scalaz.LazyOption<A>> cogenLazyOption(org.scalacheck.Cogen<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #364                // Method scalaz/scalacheck/ScalazArbitrary$.cogenLazyOption:(Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       7: areturn

  public static <F, A> org.scalacheck.Cogen<scalaz.LazyOptionT<F, A>> cogenLazyOptionT(org.scalacheck.Cogen<java.lang.Object>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #368                // Method scalaz/scalacheck/ScalazArbitrary$.cogenLazyOptionT:(Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       7: areturn

  public static <A1, A2> org.scalacheck.Cogen<scalaz.LazyTuple2<A1, A2>> cogenLazyTuple2(org.scalacheck.Cogen<A1>, org.scalacheck.Cogen<A2>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: aload_1
       5: invokevirtual #372                // Method scalaz/scalacheck/ScalazArbitrary$.cogenLazyTuple2:(Lorg/scalacheck/Cogen;Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       8: areturn

  public static <A1, A2, A3> org.scalacheck.Cogen<scalaz.LazyTuple3<A1, A2, A3>> cogenLazyTuple3(org.scalacheck.Cogen<A1>, org.scalacheck.Cogen<A2>, org.scalacheck.Cogen<A3>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #376                // Method scalaz/scalacheck/ScalazArbitrary$.cogenLazyTuple3:(Lorg/scalacheck/Cogen;Lorg/scalacheck/Cogen;Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       9: areturn

  public static <A1, A2, A3, A4> org.scalacheck.Cogen<scalaz.LazyTuple4<A1, A2, A3, A4>> cogenLazyTuple4(org.scalacheck.Cogen<A1>, org.scalacheck.Cogen<A2>, org.scalacheck.Cogen<A3>, org.scalacheck.Cogen<A4>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokevirtual #381                // Method scalaz/scalacheck/ScalazArbitrary$.cogenLazyTuple4:(Lorg/scalacheck/Cogen;Lorg/scalacheck/Cogen;Lorg/scalacheck/Cogen;Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
      10: areturn

  public static <A> org.scalacheck.Cogen<scalaz.Maybe<A>> cogenMaybe(org.scalacheck.Cogen<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #385                // Method scalaz/scalacheck/ScalazArbitrary$.cogenMaybe:(Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       7: areturn

  public static <F, A> org.scalacheck.Cogen<scalaz.MaybeT<F, A>> cogenMaybeT(org.scalacheck.Cogen<java.lang.Object>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #389                // Method scalaz/scalacheck/ScalazArbitrary$.cogenMaybeT:(Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       7: areturn

  public static <A> org.scalacheck.Cogen<scalaz.Name<A>> cogenName(org.scalacheck.Cogen<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #393                // Method scalaz/scalacheck/ScalazArbitrary$.cogenName:(Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       7: areturn

  public static <A> org.scalacheck.Cogen<scalaz.Need<A>> cogenNeed(org.scalacheck.Cogen<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #397                // Method scalaz/scalacheck/ScalazArbitrary$.cogenNeed:(Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       7: areturn

  public static <A> org.scalacheck.Cogen<scalaz.NonEmptyList<A>> cogenNonEmptyList(org.scalacheck.Cogen<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #401                // Method scalaz/scalacheck/ScalazArbitrary$.cogenNonEmptyList:(Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       7: areturn

  public static <A, B> org.scalacheck.Cogen<scalaz.NullArgument<A, B>> cogenNullArgument(org.scalacheck.Cogen<scala.Function1<scala.Option<A>, B>>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #405                // Method scalaz/scalacheck/ScalazArbitrary$.cogenNullArgument:(Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       7: areturn

  public static <A, B> org.scalacheck.Cogen<scalaz.NullResult<A, B>> cogenNullResult(org.scalacheck.Cogen<scala.Function1<A, scala.Option<B>>>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #409                // Method scalaz/scalacheck/ScalazArbitrary$.cogenNullResult:(Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       7: areturn

  public static <F, A> org.scalacheck.Cogen<scalaz.OneAnd<F, A>> cogenOneAnd(org.scalacheck.Cogen<A>, org.scalacheck.Cogen<java.lang.Object>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: aload_1
       5: invokevirtual #413                // Method scalaz/scalacheck/ScalazArbitrary$.cogenOneAnd:(Lorg/scalacheck/Cogen;Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       8: areturn

  public static <F, A> org.scalacheck.Cogen<scalaz.OneOr<F, A>> cogenOneOr(org.scalacheck.Cogen<A>, org.scalacheck.Cogen<java.lang.Object>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: aload_1
       5: invokevirtual #417                // Method scalaz/scalacheck/ScalazArbitrary$.cogenOneOr:(Lorg/scalacheck/Cogen;Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       8: areturn

  public static <F, A> org.scalacheck.Cogen<scalaz.OptionT<F, A>> cogenOptionT(org.scalacheck.Cogen<java.lang.Object>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #421                // Method scalaz/scalacheck/ScalazArbitrary$.cogenOptionT:(Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       7: areturn

  public static org.scalacheck.Cogen<scalaz.Ordering> cogenOrdering();
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: invokevirtual #426                // Method scalaz/scalacheck/ScalazArbitrary$.cogenOrdering:()Lorg/scalacheck/Cogen;
       6: areturn

  public static <F, A> org.scalacheck.Cogen<scalaz.StreamT<F, A>> cogenStreamT(scalaz.Monad<F>, org.scalacheck.Cogen<java.lang.Object>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: aload_1
       5: invokevirtual #430                // Method scalaz/scalacheck/ScalazArbitrary$.cogenStreamT:(Lscalaz/Monad;Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       8: areturn

  public static <A> org.scalacheck.Cogen<scalaz.StrictTree<A>> cogenStrictTree(org.scalacheck.Cogen<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #434                // Method scalaz/scalacheck/ScalazArbitrary$.cogenStrictTree:(Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       7: areturn

  public static <F, G, A, B> org.scalacheck.Cogen<scalaz.Tannen<F, G, A, B>> cogenTannen(org.scalacheck.Cogen<java.lang.Object>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #438                // Method scalaz/scalacheck/ScalazArbitrary$.cogenTannen:(Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       7: areturn

  public static <A, B> org.scalacheck.Cogen<scalaz.$bslash$amp$div<A, B>> cogenThese(org.scalacheck.Cogen<A>, org.scalacheck.Cogen<B>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: aload_1
       5: invokevirtual #442                // Method scalaz/scalacheck/ScalazArbitrary$.cogenThese:(Lorg/scalacheck/Cogen;Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       8: areturn

  public static <F, A, B> org.scalacheck.Cogen<scalaz.TheseT<F, A, B>> cogenTheseT(org.scalacheck.Cogen<java.lang.Object>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #446                // Method scalaz/scalacheck/ScalazArbitrary$.cogenTheseT:(Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       7: areturn

  public static <W, A, B> org.scalacheck.Cogen<scalaz.TracedT<W, A, B>> cogenTracedT(org.scalacheck.Cogen<java.lang.Object>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #450                // Method scalaz/scalacheck/ScalazArbitrary$.cogenTracedT:(Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       7: areturn

  public static <A> org.scalacheck.Cogen<scalaz.Tree<A>> cogenTree(org.scalacheck.Cogen<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #454                // Method scalaz/scalacheck/ScalazArbitrary$.cogenTree:(Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       7: areturn

  public static <A> org.scalacheck.Cogen<scalaz.TreeLoc<A>> cogenTreeLoc(org.scalacheck.Cogen<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #458                // Method scalaz/scalacheck/ScalazArbitrary$.cogenTreeLoc:(Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       7: areturn

  public static <F, A, B> org.scalacheck.Cogen<scalaz.UnwriterT<F, A, B>> cogenUnwriterT(org.scalacheck.Cogen<java.lang.Object>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #462                // Method scalaz/scalacheck/ScalazArbitrary$.cogenUnwriterT:(Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       7: areturn

  public static <A, B> org.scalacheck.Cogen<scalaz.Validation<A, B>> cogenValidation(org.scalacheck.Cogen<A>, org.scalacheck.Cogen<B>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: aload_1
       5: invokevirtual #466                // Method scalaz/scalacheck/ScalazArbitrary$.cogenValidation:(Lorg/scalacheck/Cogen;Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       8: areturn

  public static <A> org.scalacheck.Cogen<scalaz.Value<A>> cogenValue(org.scalacheck.Cogen<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #470                // Method scalaz/scalacheck/ScalazArbitrary$.cogenValue:(Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       7: areturn

  public static <A, F, B> org.scalacheck.Cogen<scalaz.WriterT<A, F, B>> cogenWriterT(org.scalacheck.Cogen<java.lang.Object>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #474                // Method scalaz/scalacheck/ScalazArbitrary$.cogenWriterT:(Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       7: areturn

  public static <A> org.scalacheck.Cogen<scalaz.Zipper<A>> cogenZipper(org.scalacheck.Cogen<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #478                // Method scalaz/scalacheck/ScalazArbitrary$.cogenZipper:(Lorg/scalacheck/Cogen;)Lorg/scalacheck/Cogen;
       7: areturn

  public static <A, B> org.scalacheck.Arbitrary<scalaz.Const<A, B>> constArbitrary(org.scalacheck.Arbitrary<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #482                // Method scalaz/scalacheck/ScalazArbitrary$.constArbitrary:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <A> org.scalacheck.Arbitrary<scalaz.Dequeue<A>> dequeueArbitrary(org.scalacheck.Arbitrary<scala.collection.immutable.List<A>>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #486                // Method scalaz/scalacheck/ScalazArbitrary$.dequeueArbitrary:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <A> org.scalacheck.Arbitrary<scalaz.Diev<A>> dievArbitrary(org.scalacheck.Arbitrary<scala.collection.immutable.List<A>>, scalaz.Enum<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: aload_1
       5: invokevirtual #491                // Method scalaz/scalacheck/ScalazArbitrary$.dievArbitrary:(Lorg/scalacheck/Arbitrary;Lscalaz/Enum;)Lorg/scalacheck/Arbitrary;
       8: areturn

  public static <A> org.scalacheck.Arbitrary<scalaz.DList<A>> dlistArbitrary(org.scalacheck.Arbitrary<scala.collection.immutable.List<A>>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #495                // Method scalaz/scalacheck/ScalazArbitrary$.dlistArbitrary:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <A, F, B> org.scalacheck.Arbitrary<scalaz.EitherT<A, F, B>> eitherTArb(org.scalacheck.Arbitrary<java.lang.Object>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #499                // Method scalaz/scalacheck/ScalazArbitrary$.eitherTArb:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <A> org.scalacheck.Arbitrary<scalaz.Endo<A>> endoArb(org.scalacheck.Arbitrary<scala.Function1<A, A>>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #503                // Method scalaz/scalacheck/ScalazArbitrary$.endoArb:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <A> org.scalacheck.Arbitrary<scalaz.EndoByName<A>> endoByNameArb(org.scalacheck.Arbitrary<scala.Function1<A, A>>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #507                // Method scalaz/scalacheck/ScalazArbitrary$.endoByNameArb:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <F, A> org.scalacheck.Arbitrary<scalaz.Endomorphic<F, A>> endomorphicArbitrary(org.scalacheck.Arbitrary<java.lang.Object>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #511                // Method scalaz/scalacheck/ScalazArbitrary$.endomorphicArbitrary:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <A> org.scalacheck.Arbitrary<scalaz.Heap<A>> heapArbitrary(scalaz.Order<A>, org.scalacheck.Arbitrary<scala.collection.immutable.List<A>>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: aload_1
       5: invokevirtual #515                // Method scalaz/scalacheck/ScalazArbitrary$.heapArbitrary:(Lscalaz/Order;Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       8: areturn

  public static <A, F> org.scalacheck.Arbitrary<scalaz.IdT<F, A>> idTArbitrary(org.scalacheck.Arbitrary<java.lang.Object>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #519                // Method scalaz/scalacheck/ScalazArbitrary$.idTArbitrary:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <A> org.scalacheck.Arbitrary<scalaz.IList<A>> ilistArbitrary(org.scalacheck.Arbitrary<scala.collection.immutable.List<A>>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #523                // Method scalaz/scalacheck/ScalazArbitrary$.ilistArbitrary:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <W, R, O, M, A> org.scalacheck.Arbitrary<scalaz.IndexedContsT<W, R, O, M, A>> indexedContsTArb(org.scalacheck.Arbitrary<scala.Function1<java.lang.Object, java.lang.Object>>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #527                // Method scalaz/scalacheck/ScalazArbitrary$.indexedContsTArb:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <R, W, S1, S2, F, A> org.scalacheck.Arbitrary<scalaz.IndexedReaderWriterStateT<R, W, S1, S2, F, A>> indexedReaderWriterStateTArb(org.scalacheck.Arbitrary<scala.Function2<R, S1, java.lang.Object>>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #531                // Method scalaz/scalacheck/ScalazArbitrary$.indexedReaderWriterStateTArb:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <S1, S2, F, A> org.scalacheck.Arbitrary<scalaz.IndexedStateT<S1, S2, F, A>> indexedStateTArb(org.scalacheck.Arbitrary<scala.Function1<S1, java.lang.Object>>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #535                // Method scalaz/scalacheck/ScalazArbitrary$.indexedStateTArb:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <F, I, A, B> org.scalacheck.Arbitrary<scalaz.IndexedStoreT<F, I, A, B>> indexedStoreTArb(org.scalacheck.Arbitrary<scala.Tuple2<java.lang.Object, I>>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #539                // Method scalaz/scalacheck/ScalazArbitrary$.indexedStoreTArb:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <A> org.scalacheck.Arbitrary<scalaz.iteratee.Input<A>> iterateeInputArbitrary(org.scalacheck.Arbitrary<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #543                // Method scalaz/scalacheck/ScalazArbitrary$.iterateeInputArbitrary:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <F, A, B> org.scalacheck.Arbitrary<scalaz.LazyEither<A, B>> lazyEitherArb(org.scalacheck.Arbitrary<A>, org.scalacheck.Arbitrary<B>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: aload_1
       5: invokevirtual #547                // Method scalaz/scalacheck/ScalazArbitrary$.lazyEitherArb:(Lorg/scalacheck/Arbitrary;Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       8: areturn

  public static <F, A, B> org.scalacheck.Arbitrary<scalaz.LazyEitherT<F, A, B>> lazyEitherTArb(org.scalacheck.Arbitrary<java.lang.Object>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #551                // Method scalaz/scalacheck/ScalazArbitrary$.lazyEitherTArb:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <F, A> org.scalacheck.Arbitrary<scalaz.LazyOption<A>> lazyOptionArb(org.scalacheck.Arbitrary<scala.Option<A>>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #555                // Method scalaz/scalacheck/ScalazArbitrary$.lazyOptionArb:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <F, A> org.scalacheck.Arbitrary<scalaz.LazyOptionT<F, A>> lazyOptionTArb(org.scalacheck.Arbitrary<java.lang.Object>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #559                // Method scalaz/scalacheck/ScalazArbitrary$.lazyOptionTArb:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <A, B> org.scalacheck.Arbitrary<scalaz.LazyTuple2<A, B>> lazyTuple2Arbitrary(org.scalacheck.Arbitrary<A>, org.scalacheck.Arbitrary<B>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: aload_1
       5: invokevirtual #563                // Method scalaz/scalacheck/ScalazArbitrary$.lazyTuple2Arbitrary:(Lorg/scalacheck/Arbitrary;Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       8: areturn

  public static <A, B, C> org.scalacheck.Arbitrary<scalaz.LazyTuple3<A, B, C>> lazyTuple3Arbitrary(org.scalacheck.Arbitrary<A>, org.scalacheck.Arbitrary<B>, org.scalacheck.Arbitrary<C>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #568                // Method scalaz/scalacheck/ScalazArbitrary$.lazyTuple3Arbitrary:(Lorg/scalacheck/Arbitrary;Lorg/scalacheck/Arbitrary;Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       9: areturn

  public static <A, B, C, D> org.scalacheck.Arbitrary<scalaz.LazyTuple4<A, B, C, D>> lazyTuple4Arbitrary(org.scalacheck.Arbitrary<A>, org.scalacheck.Arbitrary<B>, org.scalacheck.Arbitrary<C>, org.scalacheck.Arbitrary<D>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokevirtual #573                // Method scalaz/scalacheck/ScalazArbitrary$.lazyTuple4Arbitrary:(Lorg/scalacheck/Arbitrary;Lorg/scalacheck/Arbitrary;Lorg/scalacheck/Arbitrary;Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
      10: areturn

  public static <F, A> org.scalacheck.Arbitrary<scalaz.ListT<F, A>> listTArb(scalaz.Applicative<F>, org.scalacheck.Arbitrary<java.lang.Object>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: aload_1
       5: invokevirtual #578                // Method scalaz/scalacheck/ScalazArbitrary$.listTArb:(Lscalaz/Applicative;Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       8: areturn

  public static <F, A> org.scalacheck.Arbitrary<scalaz.MaybeT<F, A>> maybeTArb(org.scalacheck.Arbitrary<java.lang.Object>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #582                // Method scalaz/scalacheck/ScalazArbitrary$.maybeTArb:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <M, N> org.scalacheck.Arbitrary<scalaz.$colon$plus$colon<M, N>> monoidCoproductArbitrary(org.scalacheck.Arbitrary<M>, org.scalacheck.Arbitrary<N>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: aload_1
       5: invokevirtual #586                // Method scalaz/scalacheck/ScalazArbitrary$.monoidCoproductArbitrary:(Lorg/scalacheck/Arbitrary;Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       8: areturn

  public static <F, A> org.scalacheck.Arbitrary<scalaz.OptionT<F, A>> optionTArb(org.scalacheck.Arbitrary<java.lang.Object>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #590                // Method scalaz/scalacheck/ScalazArbitrary$.optionTArb:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <S, F, A> org.scalacheck.Arbitrary<scalaz.IndexedStateT<S, S, F, A>> stateTArb(org.scalacheck.Arbitrary<scala.Function1<S, java.lang.Object>>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #594                // Method scalaz/scalacheck/ScalazArbitrary$.stateTArb:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <F, A, B> org.scalacheck.Arbitrary<scalaz.IndexedStoreT<F, A, A, B>> storeTArb(org.scalacheck.Arbitrary<scala.Tuple2<java.lang.Object, A>>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #598                // Method scalaz/scalacheck/ScalazArbitrary$.storeTArb:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <F, A> org.scalacheck.Arbitrary<scalaz.StreamT<F, A>> streamTArb(org.scalacheck.Arbitrary<java.lang.Object>, scalaz.Applicative<F>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: aload_1
       5: invokevirtual #603                // Method scalaz/scalacheck/ScalazArbitrary$.streamTArb:(Lorg/scalacheck/Arbitrary;Lscalaz/Applicative;)Lorg/scalacheck/Arbitrary;
       8: areturn

  public static <A> org.scalacheck.Gen<scalaz.StrictTree<A>> strictTreeGenSized(int, scalaz.NotNothing<A>, org.scalacheck.Arbitrary<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: iload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #608                // Method scalaz/scalacheck/ScalazArbitrary$.strictTreeGenSized:(ILscalaz/NotNothing;Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Gen;
       9: areturn

  public static <F, G, A, B> org.scalacheck.Arbitrary<scalaz.Tannen<F, G, A, B>> tannenArbitrary(org.scalacheck.Arbitrary<java.lang.Object>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #612                // Method scalaz/scalacheck/ScalazArbitrary$.tannenArbitrary:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <A, B> org.scalacheck.Arbitrary<scalaz.$bslash$amp$div<A, B>> theseArb(org.scalacheck.Arbitrary<A>, org.scalacheck.Arbitrary<B>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: aload_1
       5: invokevirtual #616                // Method scalaz/scalacheck/ScalazArbitrary$.theseArb:(Lorg/scalacheck/Arbitrary;Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       8: areturn

  public static <F, A, B> org.scalacheck.Arbitrary<scalaz.TheseT<F, A, B>> theseTArb(org.scalacheck.Arbitrary<java.lang.Object>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #620                // Method scalaz/scalacheck/ScalazArbitrary$.theseTArb:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <W, A, B> org.scalacheck.Arbitrary<scalaz.TracedT<W, A, B>> tracedTArb(org.scalacheck.Arbitrary<java.lang.Object>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #624                // Method scalaz/scalacheck/ScalazArbitrary$.tracedTArb:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <A> org.scalacheck.Gen<scalaz.Tree<A>> treeGenSized(int, scalaz.NotNothing<A>, org.scalacheck.Arbitrary<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: iload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #628                // Method scalaz/scalacheck/ScalazArbitrary$.treeGenSized:(ILscalaz/NotNothing;Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Gen;
       9: areturn

  public static <A> org.scalacheck.Gen<scalaz.TreeLoc<A>> treeLocGenSized(int, scalaz.NotNothing<A>, org.scalacheck.Arbitrary<A>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: iload_0
       4: aload_1
       5: aload_2
       6: invokevirtual #632                // Method scalaz/scalacheck/ScalazArbitrary$.treeLocGenSized:(ILscalaz/NotNothing;Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Gen;
       9: areturn

  public static <F, U, A> org.scalacheck.Arbitrary<scalaz.UnwriterT<F, U, A>> unwriterTArb(org.scalacheck.Arbitrary<java.lang.Object>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #636                // Method scalaz/scalacheck/ScalazArbitrary$.unwriterTArb:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn

  public static <W, F, A> org.scalacheck.Arbitrary<scalaz.WriterT<W, F, A>> writerTArb(org.scalacheck.Arbitrary<java.lang.Object>);
    Code:
       0: getstatic     #14                 // Field scalaz/scalacheck/ScalazArbitrary$.MODULE$:Lscalaz/scalacheck/ScalazArbitrary$;
       3: aload_0
       4: invokevirtual #640                // Method scalaz/scalacheck/ScalazArbitrary$.writerTArb:(Lorg/scalacheck/Arbitrary;)Lorg/scalacheck/Arbitrary;
       7: areturn
}
