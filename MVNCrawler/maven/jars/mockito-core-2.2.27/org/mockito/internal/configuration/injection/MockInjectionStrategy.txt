Compiled from "MockInjectionStrategy.java"
public abstract class org.mockito.internal.configuration.injection.MockInjectionStrategy {
  private org.mockito.internal.configuration.injection.MockInjectionStrategy nextStrategy;

  public org.mockito.internal.configuration.injection.MockInjectionStrategy();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static org.mockito.internal.configuration.injection.MockInjectionStrategy nop();
    Code:
       0: new           #2                  // class org/mockito/internal/configuration/injection/MockInjectionStrategy$1
       3: dup
       4: invokespecial #3                  // Method org/mockito/internal/configuration/injection/MockInjectionStrategy$1."<init>":()V
       7: areturn

  public org.mockito.internal.configuration.injection.MockInjectionStrategy thenTry(org.mockito.internal.configuration.injection.MockInjectionStrategy);
    Code:
       0: aload_0
       1: getfield      #4                  // Field nextStrategy:Lorg/mockito/internal/configuration/injection/MockInjectionStrategy;
       4: ifnull        19
       7: aload_0
       8: getfield      #4                  // Field nextStrategy:Lorg/mockito/internal/configuration/injection/MockInjectionStrategy;
      11: aload_1
      12: invokevirtual #5                  // Method thenTry:(Lorg/mockito/internal/configuration/injection/MockInjectionStrategy;)Lorg/mockito/internal/configuration/injection/MockInjectionStrategy;
      15: pop
      16: goto          24
      19: aload_0
      20: aload_1
      21: putfield      #4                  // Field nextStrategy:Lorg/mockito/internal/configuration/injection/MockInjectionStrategy;
      24: aload_1
      25: areturn

  public boolean process(java.lang.reflect.Field, java.lang.Object, java.util.Set<java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokevirtual #6                  // Method processInjection:(Ljava/lang/reflect/Field;Ljava/lang/Object;Ljava/util/Set;)Z
       7: ifeq          12
      10: iconst_1
      11: ireturn
      12: aload_0
      13: aload_1
      14: aload_2
      15: aload_3
      16: invokespecial #7                  // Method relayProcessToNextStrategy:(Ljava/lang/reflect/Field;Ljava/lang/Object;Ljava/util/Set;)Z
      19: ireturn

  protected abstract boolean processInjection(java.lang.reflect.Field, java.lang.Object, java.util.Set<java.lang.Object>);

  private boolean relayProcessToNextStrategy(java.lang.reflect.Field, java.lang.Object, java.util.Set<java.lang.Object>);
    Code:
       0: aload_0
       1: getfield      #4                  // Field nextStrategy:Lorg/mockito/internal/configuration/injection/MockInjectionStrategy;
       4: ifnull        24
       7: aload_0
       8: getfield      #4                  // Field nextStrategy:Lorg/mockito/internal/configuration/injection/MockInjectionStrategy;
      11: aload_1
      12: aload_2
      13: aload_3
      14: invokevirtual #8                  // Method process:(Ljava/lang/reflect/Field;Ljava/lang/Object;Ljava/util/Set;)Z
      17: ifeq          24
      20: iconst_1
      21: goto          25
      24: iconst_0
      25: ireturn
}
