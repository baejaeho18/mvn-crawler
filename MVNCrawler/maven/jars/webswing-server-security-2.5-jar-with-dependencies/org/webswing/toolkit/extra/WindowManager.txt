Compiled from "WindowManager.java"
public class org.webswing.toolkit.extra.WindowManager {
  private static org.webswing.toolkit.extra.WindowManager singleton;

  private org.webswing.toolkit.extra.WindowHierarchyTree zorder;

  private java.awt.Window activeWindow;

  private org.webswing.toolkit.extra.WindowEventHandler eventhandler;

  private java.lang.String currentCursor;

  private org.webswing.toolkit.extra.WindowManager();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class org/webswing/toolkit/extra/WindowHierarchyTree
       8: dup
       9: invokespecial #3                  // Method org/webswing/toolkit/extra/WindowHierarchyTree."<init>":()V
      12: putfield      #4                  // Field zorder:Lorg/webswing/toolkit/extra/WindowHierarchyTree;
      15: aload_0
      16: aconst_null
      17: putfield      #5                  // Field activeWindow:Ljava/awt/Window;
      20: aload_0
      21: new           #6                  // class org/webswing/toolkit/extra/WindowEventHandler
      24: dup
      25: invokespecial #7                  // Method org/webswing/toolkit/extra/WindowEventHandler."<init>":()V
      28: putfield      #8                  // Field eventhandler:Lorg/webswing/toolkit/extra/WindowEventHandler;
      31: aload_0
      32: ldc           #10                 // String default
      34: putfield      #11                 // Field currentCursor:Ljava/lang/String;
      37: return

  public static org.webswing.toolkit.extra.WindowManager getInstance();
    Code:
       0: getstatic     #12                 // Field singleton:Lorg/webswing/toolkit/extra/WindowManager;
       3: ifnonnull     16
       6: new           #13                 // class org/webswing/toolkit/extra/WindowManager
       9: dup
      10: invokespecial #14                 // Method "<init>":()V
      13: putstatic     #12                 // Field singleton:Lorg/webswing/toolkit/extra/WindowManager;
      16: getstatic     #12                 // Field singleton:Lorg/webswing/toolkit/extra/WindowManager;
      19: areturn

  public void bringToFront(java.awt.Window);
    Code:
       0: invokestatic  #15                 // Method org/webswing/toolkit/util/Util.getWebToolkit:()Lorg/webswing/toolkit/WebToolkit;
       3: invokevirtual #16                 // Method org/webswing/toolkit/WebToolkit.getTreeLock:()Ljava/lang/Object;
       6: dup
       7: astore_2
       8: monitorenter
       9: getstatic     #17                 // Field org/webswing/dispatch/WebPaintDispatcher.webPaintLock:Ljava/lang/Object;
      12: dup
      13: astore_3
      14: monitorenter
      15: aload_1
      16: ifnull        31
      19: aload_1
      20: invokevirtual #18                 // Method java/awt/Window.isEnabled:()Z
      23: ifne          31
      26: aload_3
      27: monitorexit
      28: aload_2
      29: monitorexit
      30: return
      31: aload_1
      32: ifnull        42
      35: aload_1
      36: invokevirtual #19                 // Method java/awt/Window.isFocusableWindow:()Z
      39: ifeq          160
      42: aload_0
      43: getfield      #5                  // Field activeWindow:Ljava/awt/Window;
      46: aload_1
      47: if_acmpeq     160
      50: aload_0
      51: getfield      #5                  // Field activeWindow:Ljava/awt/Window;
      54: astore        4
      56: aload_0
      57: aload_1
      58: putfield      #5                  // Field activeWindow:Ljava/awt/Window;
      61: aload_0
      62: getfield      #5                  // Field activeWindow:Ljava/awt/Window;
      65: ifnull        129
      68: new           #20                 // class java/awt/event/WindowEvent
      71: dup
      72: aload_0
      73: getfield      #5                  // Field activeWindow:Ljava/awt/Window;
      76: sipush        207
      79: aload_0
      80: getfield      #5                  // Field activeWindow:Ljava/awt/Window;
      83: iconst_0
      84: iconst_0
      85: invokespecial #21                 // Method java/awt/event/WindowEvent."<init>":(Ljava/awt/Window;ILjava/awt/Window;II)V
      88: astore        5
      90: aload_0
      91: getfield      #5                  // Field activeWindow:Ljava/awt/Window;
      94: aload         5
      96: invokestatic  #22                 // Method org/webswing/dispatch/WebEventDispatcher.dispatchEventInSwing:(Ljava/awt/Component;Ljava/awt/AWTEvent;)V
      99: aload_0
     100: getfield      #5                  // Field activeWindow:Ljava/awt/Window;
     103: invokestatic  #23                 // Method org/webswing/toolkit/WebToolkit.targetToPeer:(Ljava/lang/Object;)Ljava/lang/Object;
     106: checkcast     #24                 // class org/webswing/toolkit/WebComponentPeer
     109: astore        6
     111: aload         6
     113: invokevirtual #25                 // Method org/webswing/toolkit/WebComponentPeer.updateWindowDecorationImage:()V
     116: invokestatic  #15                 // Method org/webswing/toolkit/util/Util.getWebToolkit:()Lorg/webswing/toolkit/WebToolkit;
     119: invokevirtual #26                 // Method org/webswing/toolkit/WebToolkit.getPaintDispatcher:()Lorg/webswing/dispatch/WebPaintDispatcher;
     122: aload_0
     123: getfield      #5                  // Field activeWindow:Ljava/awt/Window;
     126: invokevirtual #27                 // Method org/webswing/dispatch/WebPaintDispatcher.notifyWindowRepaint:(Ljava/awt/Window;)V
     129: aload         4
     131: ifnull        160
     134: aload         4
     136: invokestatic  #23                 // Method org/webswing/toolkit/WebToolkit.targetToPeer:(Ljava/lang/Object;)Ljava/lang/Object;
     139: checkcast     #24                 // class org/webswing/toolkit/WebComponentPeer
     142: astore        5
     144: aload         5
     146: invokevirtual #25                 // Method org/webswing/toolkit/WebComponentPeer.updateWindowDecorationImage:()V
     149: invokestatic  #15                 // Method org/webswing/toolkit/util/Util.getWebToolkit:()Lorg/webswing/toolkit/WebToolkit;
     152: invokevirtual #26                 // Method org/webswing/toolkit/WebToolkit.getPaintDispatcher:()Lorg/webswing/dispatch/WebPaintDispatcher;
     155: aload         4
     157: invokevirtual #27                 // Method org/webswing/dispatch/WebPaintDispatcher.notifyWindowRepaint:(Ljava/awt/Window;)V
     160: aload_1
     161: ifnull        172
     164: aload_0
     165: getfield      #4                  // Field zorder:Lorg/webswing/toolkit/extra/WindowHierarchyTree;
     168: aload_1
     169: invokevirtual #28                 // Method org/webswing/toolkit/extra/WindowHierarchyTree.bringToFront:(Ljava/awt/Window;)V
     172: aload_3
     173: monitorexit
     174: goto          184
     177: astore        7
     179: aload_3
     180: monitorexit
     181: aload         7
     183: athrow
     184: aload_2
     185: monitorexit
     186: goto          196
     189: astore        8
     191: aload_2
     192: monitorexit
     193: aload         8
     195: athrow
     196: return
    Exception table:
       from    to  target type
          15    28   177   any
          31   174   177   any
         177   181   177   any
           9    30   189   any
          31   186   189   any
         189   193   189   any

  public void removeWindow(java.awt.Window);
    Code:
       0: getstatic     #17                 // Field org/webswing/dispatch/WebPaintDispatcher.webPaintLock:Ljava/lang/Object;
       3: dup
       4: astore_2
       5: monitorenter
       6: aload_0
       7: getfield      #4                  // Field zorder:Lorg/webswing/toolkit/extra/WindowHierarchyTree;
      10: aload_1
      11: invokevirtual #29                 // Method org/webswing/toolkit/extra/WindowHierarchyTree.removeWindow:(Ljava/awt/Window;)V
      14: aload_1
      15: aload_0
      16: getfield      #5                  // Field activeWindow:Ljava/awt/Window;
      19: if_acmpne     27
      22: aload_0
      23: aconst_null
      24: putfield      #5                  // Field activeWindow:Ljava/awt/Window;
      27: aload_2
      28: monitorexit
      29: goto          37
      32: astore_3
      33: aload_2
      34: monitorexit
      35: aload_3
      36: athrow
      37: return
    Exception table:
       from    to  target type
           6    29    32   any
          32    35    32   any

  public void bringToBack(java.awt.Window);
    Code:
       0: getstatic     #17                 // Field org/webswing/dispatch/WebPaintDispatcher.webPaintLock:Ljava/lang/Object;
       3: dup
       4: astore_2
       5: monitorenter
       6: aload_2
       7: monitorexit
       8: goto          16
      11: astore_3
      12: aload_2
      13: monitorexit
      14: aload_3
      15: athrow
      16: return
    Exception table:
       from    to  target type
           6     8    11   any
          11    14    11   any

  public java.awt.Window getActiveWindow();
    Code:
       0: aload_0
       1: getfield      #5                  // Field activeWindow:Ljava/awt/Window;
       4: areturn

  public boolean isWindowActive(java.awt.Window);
    Code:
       0: aload_0
       1: getfield      #5                  // Field activeWindow:Ljava/awt/Window;
       4: aload_1
       5: if_acmpne     10
       8: iconst_1
       9: ireturn
      10: iconst_0
      11: ireturn

  public void activateWindow(java.awt.Window);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: iconst_0
       4: invokevirtual #30                 // Method activateWindow:(Ljava/awt/Window;II)V
       7: return

  public boolean activateWindow(java.awt.Window, java.awt.Component, int, int, boolean, boolean, sun.awt.CausedFocusEvent$Cause);
    Code:
       0: iconst_0
       1: istore        8
       3: iconst_0
       4: istore        9
       6: aload_0
       7: getfield      #4                  // Field zorder:Lorg/webswing/toolkit/extra/WindowHierarchyTree;
      10: aload_1
      11: invokevirtual #31                 // Method org/webswing/toolkit/extra/WindowHierarchyTree.contains:(Ljava/awt/Window;)Z
      14: ifne          28
      17: aload_0
      18: getfield      #4                  // Field zorder:Lorg/webswing/toolkit/extra/WindowHierarchyTree;
      21: aload_1
      22: invokevirtual #32                 // Method org/webswing/toolkit/extra/WindowHierarchyTree.addWindow:(Ljava/awt/Window;)V
      25: iconst_1
      26: istore        9
      28: aload_0
      29: getfield      #4                  // Field zorder:Lorg/webswing/toolkit/extra/WindowHierarchyTree;
      32: aload_0
      33: getfield      #5                  // Field activeWindow:Ljava/awt/Window;
      36: invokevirtual #33                 // Method org/webswing/toolkit/extra/WindowHierarchyTree.isInModalBranch:(Ljava/awt/Window;)Z
      39: ifeq          110
      42: aload_1
      43: instanceof    #34                 // class sun/awt/ModalExclude
      46: ifne          110
      49: aload_0
      50: getfield      #4                  // Field zorder:Lorg/webswing/toolkit/extra/WindowHierarchyTree;
      53: aload_0
      54: getfield      #5                  // Field activeWindow:Ljava/awt/Window;
      57: invokevirtual #35                 // Method org/webswing/toolkit/extra/WindowHierarchyTree.isInFullModalBranch:(Ljava/awt/Window;)Z
      60: ifeq          93
      63: aload_0
      64: aload_1
      65: invokespecial #36                 // Method isModal:(Ljava/awt/Window;)Z
      68: ifeq          76
      71: iload         9
      73: ifne          110
      76: aload_0
      77: getfield      #4                  // Field zorder:Lorg/webswing/toolkit/extra/WindowHierarchyTree;
      80: aload_0
      81: getfield      #5                  // Field activeWindow:Ljava/awt/Window;
      84: aload_1
      85: invokevirtual #37                 // Method org/webswing/toolkit/extra/WindowHierarchyTree.isInSameModalBranch:(Ljava/awt/Window;Ljava/awt/Window;)Z
      88: ifne          110
      91: iconst_0
      92: ireturn
      93: aload_0
      94: getfield      #4                  // Field zorder:Lorg/webswing/toolkit/extra/WindowHierarchyTree;
      97: aload_1
      98: aload_0
      99: getfield      #5                  // Field activeWindow:Ljava/awt/Window;
     102: invokevirtual #38                 // Method org/webswing/toolkit/extra/WindowHierarchyTree.isParent:(Ljava/awt/Window;Ljava/awt/Window;)Z
     105: ifeq          110
     108: iconst_0
     109: ireturn
     110: aload_1
     111: invokevirtual #18                 // Method java/awt/Window.isEnabled:()Z
     114: ifne          119
     117: iconst_0
     118: ireturn
     119: iload         6
     121: ifne          132
     124: aload_0
     125: getfield      #5                  // Field activeWindow:Ljava/awt/Window;
     128: aload_1
     129: if_acmpne     281
     132: aload_2
     133: ifnull        233
     136: aload_2
     137: invokevirtual #39                 // Method java/awt/Component.isFocusable:()Z
     140: ifeq          233
     143: aload_1
     144: invokevirtual #19                 // Method java/awt/Window.isFocusableWindow:()Z
     147: ifeq          233
     150: aload_1
     151: aload_2
     152: iload         5
     154: iconst_1
     155: new           #40                 // class java/util/Date
     158: dup
     159: invokespecial #41                 // Method java/util/Date."<init>":()V
     162: invokevirtual #42                 // Method java/util/Date.getTime:()J
     165: aload         7
     167: invokestatic  #43                 // Method org/webswing/toolkit/WebKeyboardFocusManagerPeer.shouldNativelyFocusHeavyweight:(Ljava/awt/Window;Ljava/awt/Component;ZZJLsun/awt/CausedFocusEvent$Cause;)I
     170: istore        10
     172: iload         10
     174: lookupswitch  { // 2
                     1: 200
                     2: 206
               default: 233
          }
     200: iconst_1
     201: istore        8
     203: goto          233
     206: aload_1
     207: aload_2
     208: iload         5
     210: iconst_1
     211: new           #40                 // class java/util/Date
     214: dup
     215: invokespecial #41                 // Method java/util/Date."<init>":()V
     218: invokevirtual #42                 // Method java/util/Date.getTime:()J
     221: aload         7
     223: invokestatic  #44                 // Method org/webswing/toolkit/WebKeyboardFocusManagerPeer.deliverFocus:(Ljava/awt/Component;Ljava/awt/Component;ZZJLsun/awt/CausedFocusEvent$Cause;)Z
     226: pop
     227: iconst_1
     228: istore        8
     230: goto          233
     233: new           #45                 // class java/awt/Rectangle
     236: dup
     237: iconst_0
     238: iconst_0
     239: aload_1
     240: invokevirtual #46                 // Method java/awt/Window.getWidth:()I
     243: aload_1
     244: invokevirtual #47                 // Method java/awt/Window.getHeight:()I
     247: invokespecial #48                 // Method java/awt/Rectangle."<init>":(IIII)V
     250: new           #45                 // class java/awt/Rectangle
     253: dup
     254: iload_3
     255: iload         4
     257: iconst_0
     258: iconst_0
     259: invokespecial #48                 // Method java/awt/Rectangle."<init>":(IIII)V
     262: invokestatic  #49                 // Method javax/swing/SwingUtilities.isRectangleContainingRectangle:(Ljava/awt/Rectangle;Ljava/awt/Rectangle;)Z
     265: ifeq          276
     268: aload_0
     269: aload_1
     270: invokevirtual #50                 // Method bringToFront:(Ljava/awt/Window;)V
     273: goto          281
     276: aload_0
     277: aconst_null
     278: invokevirtual #50                 // Method bringToFront:(Ljava/awt/Window;)V
     281: iload         8
     283: ireturn

  private boolean isModal(java.awt.Window);
    Code:
       0: aload_1
       1: instanceof    #51                 // class java/awt/Dialog
       4: ifeq          21
       7: aload_1
       8: checkcast     #51                 // class java/awt/Dialog
      11: invokevirtual #52                 // Method java/awt/Dialog.isModal:()Z
      14: ifeq          21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: ireturn

  public void activateWindow(java.awt.Window, int, int);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: iload_2
       4: iload_3
       5: iconst_0
       6: iconst_1
       7: getstatic     #53                 // Field sun/awt/CausedFocusEvent$Cause.NATIVE_SYSTEM:Lsun/awt/CausedFocusEvent$Cause;
      10: invokevirtual #54                 // Method activateWindow:(Ljava/awt/Window;Ljava/awt/Component;IIZZLsun/awt/CausedFocusEvent$Cause;)Z
      13: pop
      14: return

  public java.awt.Window getVisibleWindowOnPosition(int, int);
    Code:
       0: aload_0
       1: getfield      #4                  // Field zorder:Lorg/webswing/toolkit/extra/WindowHierarchyTree;
       4: iload_1
       5: iload_2
       6: invokevirtual #55                 // Method org/webswing/toolkit/extra/WindowHierarchyTree.getVisibleWindowOnPosition:(II)Ljava/awt/Window;
       9: astore_3
      10: aload_3
      11: ifnonnull     19
      14: aload_0
      15: getfield      #5                  // Field activeWindow:Ljava/awt/Window;
      18: astore_3
      19: aload_3
      20: areturn

  public java.awt.Component getVisibleComponentOnPosition(int, int);
    Code:
       0: aload_0
       1: getfield      #5                  // Field activeWindow:Ljava/awt/Window;
       4: astore_3
       5: aload_0
       6: getfield      #4                  // Field zorder:Lorg/webswing/toolkit/extra/WindowHierarchyTree;
       9: iload_1
      10: iload_2
      11: invokevirtual #55                 // Method org/webswing/toolkit/extra/WindowHierarchyTree.getVisibleWindowOnPosition:(II)Ljava/awt/Window;
      14: astore        4
      16: aload         4
      18: ifnull        35
      21: aload         4
      23: invokevirtual #56                 // Method java/awt/Window.getPeer:()Ljava/awt/peer/ComponentPeer;
      26: checkcast     #24                 // class org/webswing/toolkit/WebComponentPeer
      29: iload_1
      30: iload_2
      31: invokevirtual #57                 // Method org/webswing/toolkit/WebComponentPeer.getHwComponentAt:(II)Ljava/awt/Component;
      34: astore_3
      35: aload_3
      36: areturn

  public java.util.Map<java.lang.String, java.util.List<java.awt.Rectangle>> extractNonVisibleAreas();
    Code:
       0: aload_0
       1: getfield      #4                  // Field zorder:Lorg/webswing/toolkit/extra/WindowHierarchyTree;
       4: invokevirtual #58                 // Method org/webswing/toolkit/extra/WindowHierarchyTree.extractNonVisibleAreas:()Ljava/util/Map;
       7: areturn

  public void requestRepaintAfterMove(java.awt.Window, java.awt.Rectangle);
    Code:
       0: aload_0
       1: getfield      #4                  // Field zorder:Lorg/webswing/toolkit/extra/WindowHierarchyTree;
       4: aload_1
       5: aload_2
       6: invokevirtual #59                 // Method org/webswing/toolkit/extra/WindowHierarchyTree.requestRepaintAfterMove:(Ljava/awt/Window;Ljava/awt/Rectangle;)V
       9: return

  public void handleWindowDecorationEvent(java.awt.Window, java.awt.event.MouseEvent);
    Code:
       0: invokestatic  #60                 // Method org/webswing/toolkit/util/Services.getImageService:()Lorg/webswing/ext/services/ImageService;
       3: invokeinterface #61,  1           // InterfaceMethod org/webswing/ext/services/ImageService.getWindowDecorationTheme:()Lorg/webswing/common/WindowDecoratorTheme;
       8: aload_1
       9: new           #62                 // class java/awt/Point
      12: dup
      13: aload_2
      14: invokevirtual #63                 // Method java/awt/event/MouseEvent.getX:()I
      17: aload_2
      18: invokevirtual #64                 // Method java/awt/event/MouseEvent.getY:()I
      21: invokespecial #65                 // Method java/awt/Point."<init>":(II)V
      24: invokeinterface #66,  3           // InterfaceMethod org/webswing/common/WindowDecoratorTheme.getAction:(Ljava/awt/Window;Ljava/awt/Point;)Lorg/webswing/common/WindowActionType;
      29: astore_3
      30: aload_0
      31: getfield      #8                  // Field eventhandler:Lorg/webswing/toolkit/extra/WindowEventHandler;
      34: aload_3
      35: aload_2
      36: invokevirtual #67                 // Method org/webswing/toolkit/extra/WindowEventHandler.handle:(Lorg/webswing/common/WindowActionType;Ljava/awt/event/MouseEvent;)V
      39: return

  public boolean isLockedToWindowDecorationHandler();
    Code:
       0: aload_0
       1: getfield      #8                  // Field eventhandler:Lorg/webswing/toolkit/extra/WindowEventHandler;
       4: invokevirtual #68                 // Method org/webswing/toolkit/extra/WindowEventHandler.isEventHandlingLocked:()Z
       7: ireturn

  public java.awt.Window getLockedToWindow();
    Code:
       0: aload_0
       1: getfield      #8                  // Field eventhandler:Lorg/webswing/toolkit/extra/WindowEventHandler;
       4: invokevirtual #69                 // Method org/webswing/toolkit/extra/WindowEventHandler.getLockedToWindow:()Ljava/awt/Window;
       7: areturn

  public java.lang.String getCurrentCursor();
    Code:
       0: aload_0
       1: getfield      #11                 // Field currentCursor:Ljava/lang/String;
       4: areturn

  public void setCurrentCursor(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #11                 // Field currentCursor:Ljava/lang/String;
       5: return

  static {};
    Code:
       0: aconst_null
       1: putstatic     #12                 // Field singleton:Lorg/webswing/toolkit/extra/WindowManager;
       4: return
}
