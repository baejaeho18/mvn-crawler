Compiled from "WeakValueHashMap.java"
public class org.webswing.toolkit.util.WeakValueHashMap<K, V> extends java.util.AbstractMap<K, V> {
  private java.util.HashMap<K, org.webswing.toolkit.util.WeakValueHashMap<K, V>.WeakValue<V>> references;

  private java.lang.ref.ReferenceQueue<V> gcQueue;

  public org.webswing.toolkit.util.WeakValueHashMap(int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/util/AbstractMap."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/HashMap
       8: dup
       9: iload_1
      10: invokespecial #3                  // Method java/util/HashMap."<init>":(I)V
      13: putfield      #4                  // Field references:Ljava/util/HashMap;
      16: aload_0
      17: new           #5                  // class java/lang/ref/ReferenceQueue
      20: dup
      21: invokespecial #6                  // Method java/lang/ref/ReferenceQueue."<init>":()V
      24: putfield      #7                  // Field gcQueue:Ljava/lang/ref/ReferenceQueue;
      27: return

  public org.webswing.toolkit.util.WeakValueHashMap();
    Code:
       0: aload_0
       1: iconst_1
       2: invokespecial #8                  // Method "<init>":(I)V
       5: return

  public org.webswing.toolkit.util.WeakValueHashMap(java.util.Map<? extends K, ? extends V>);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #9,  1            // InterfaceMethod java/util/Map.size:()I
       7: invokespecial #8                  // Method "<init>":(I)V
      10: aload_1
      11: invokeinterface #10,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      16: invokeinterface #11,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      21: astore_2
      22: aload_2
      23: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      28: ifeq          61
      31: aload_2
      32: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      37: checkcast     #14                 // class java/util/Map$Entry
      40: astore_3
      41: aload_0
      42: aload_3
      43: invokeinterface #15,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      48: aload_3
      49: invokeinterface #16,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      54: invokevirtual #17                 // Method put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      57: pop
      58: goto          22
      61: return

  public V put(K, V);
    Code:
       0: aload_0
       1: invokespecial #18                 // Method processQueue:()V
       4: new           #19                 // class org/webswing/toolkit/util/WeakValueHashMap$WeakValue
       7: dup
       8: aload_0
       9: aload_1
      10: aload_2
      11: aload_0
      12: getfield      #7                  // Field gcQueue:Ljava/lang/ref/ReferenceQueue;
      15: aconst_null
      16: invokespecial #20                 // Method org/webswing/toolkit/util/WeakValueHashMap$WeakValue."<init>":(Lorg/webswing/toolkit/util/WeakValueHashMap;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;Lorg/webswing/toolkit/util/WeakValueHashMap$1;)V
      19: astore_3
      20: aload_0
      21: aload_0
      22: getfield      #4                  // Field references:Ljava/util/HashMap;
      25: aload_1
      26: aload_3
      27: invokevirtual #21                 // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      30: checkcast     #19                 // class org/webswing/toolkit/util/WeakValueHashMap$WeakValue
      33: invokespecial #22                 // Method getReferenceValue:(Lorg/webswing/toolkit/util/WeakValueHashMap$WeakValue;)Ljava/lang/Object;
      36: areturn

  public V get(java.lang.Object);
    Code:
       0: aload_0
       1: invokespecial #18                 // Method processQueue:()V
       4: aload_0
       5: aload_0
       6: getfield      #4                  // Field references:Ljava/util/HashMap;
       9: aload_1
      10: invokevirtual #23                 // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      13: checkcast     #19                 // class org/webswing/toolkit/util/WeakValueHashMap$WeakValue
      16: invokespecial #22                 // Method getReferenceValue:(Lorg/webswing/toolkit/util/WeakValueHashMap$WeakValue;)Ljava/lang/Object;
      19: areturn

  public V remove(java.lang.Object);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #4                  // Field references:Ljava/util/HashMap;
       5: aload_1
       6: invokevirtual #23                 // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
       9: checkcast     #19                 // class org/webswing/toolkit/util/WeakValueHashMap$WeakValue
      12: invokespecial #22                 // Method getReferenceValue:(Lorg/webswing/toolkit/util/WeakValueHashMap$WeakValue;)Ljava/lang/Object;
      15: areturn

  public void clear();
    Code:
       0: aload_0
       1: getfield      #4                  // Field references:Ljava/util/HashMap;
       4: invokevirtual #24                 // Method java/util/HashMap.clear:()V
       7: return

  public boolean containsKey(java.lang.Object);
    Code:
       0: aload_0
       1: invokespecial #18                 // Method processQueue:()V
       4: aload_0
       5: getfield      #4                  // Field references:Ljava/util/HashMap;
       8: aload_1
       9: invokevirtual #25                 // Method java/util/HashMap.containsKey:(Ljava/lang/Object;)Z
      12: ireturn

  public boolean containsValue(java.lang.Object);
    Code:
       0: aload_0
       1: invokespecial #18                 // Method processQueue:()V
       4: aload_0
       5: getfield      #4                  // Field references:Ljava/util/HashMap;
       8: invokevirtual #26                 // Method java/util/HashMap.entrySet:()Ljava/util/Set;
      11: invokeinterface #11,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      16: astore_2
      17: aload_2
      18: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      23: ifeq          58
      26: aload_2
      27: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      32: checkcast     #14                 // class java/util/Map$Entry
      35: astore_3
      36: aload_1
      37: aload_0
      38: aload_3
      39: invokeinterface #16,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      44: checkcast     #19                 // class org/webswing/toolkit/util/WeakValueHashMap$WeakValue
      47: invokespecial #22                 // Method getReferenceValue:(Lorg/webswing/toolkit/util/WeakValueHashMap$WeakValue;)Ljava/lang/Object;
      50: if_acmpne     55
      53: iconst_1
      54: ireturn
      55: goto          17
      58: iconst_0
      59: ireturn

  public java.util.Set<K> keySet();
    Code:
       0: aload_0
       1: invokespecial #18                 // Method processQueue:()V
       4: aload_0
       5: getfield      #4                  // Field references:Ljava/util/HashMap;
       8: invokevirtual #27                 // Method java/util/HashMap.keySet:()Ljava/util/Set;
      11: areturn

  public int size();
    Code:
       0: aload_0
       1: invokespecial #18                 // Method processQueue:()V
       4: aload_0
       5: getfield      #4                  // Field references:Ljava/util/HashMap;
       8: invokevirtual #28                 // Method java/util/HashMap.size:()I
      11: ireturn

  public java.util.Set<java.util.Map$Entry<K, V>> entrySet();
    Code:
       0: aload_0
       1: invokespecial #18                 // Method processQueue:()V
       4: new           #29                 // class java/util/LinkedHashSet
       7: dup
       8: invokespecial #30                 // Method java/util/LinkedHashSet."<init>":()V
      11: astore_1
      12: aload_0
      13: getfield      #4                  // Field references:Ljava/util/HashMap;
      16: invokevirtual #26                 // Method java/util/HashMap.entrySet:()Ljava/util/Set;
      19: invokeinterface #11,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      24: astore_2
      25: aload_2
      26: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      31: ifeq          80
      34: aload_2
      35: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      40: checkcast     #14                 // class java/util/Map$Entry
      43: astore_3
      44: aload_1
      45: new           #31                 // class java/util/AbstractMap$SimpleEntry
      48: dup
      49: aload_3
      50: invokeinterface #15,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      55: aload_0
      56: aload_3
      57: invokeinterface #16,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      62: checkcast     #19                 // class org/webswing/toolkit/util/WeakValueHashMap$WeakValue
      65: invokespecial #22                 // Method getReferenceValue:(Lorg/webswing/toolkit/util/WeakValueHashMap$WeakValue;)Ljava/lang/Object;
      68: invokespecial #32                 // Method java/util/AbstractMap$SimpleEntry."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
      71: invokeinterface #33,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      76: pop
      77: goto          25
      80: aload_1
      81: areturn

  public java.util.Collection<V> values();
    Code:
       0: aload_0
       1: invokespecial #18                 // Method processQueue:()V
       4: new           #34                 // class java/util/ArrayList
       7: dup
       8: invokespecial #35                 // Method java/util/ArrayList."<init>":()V
      11: astore_1
      12: aload_0
      13: getfield      #4                  // Field references:Ljava/util/HashMap;
      16: invokevirtual #36                 // Method java/util/HashMap.values:()Ljava/util/Collection;
      19: invokeinterface #37,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      24: astore_2
      25: aload_2
      26: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      31: ifeq          59
      34: aload_2
      35: invokeinterface #13,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      40: checkcast     #19                 // class org/webswing/toolkit/util/WeakValueHashMap$WeakValue
      43: astore_3
      44: aload_1
      45: aload_0
      46: aload_3
      47: invokespecial #22                 // Method getReferenceValue:(Lorg/webswing/toolkit/util/WeakValueHashMap$WeakValue;)Ljava/lang/Object;
      50: invokeinterface #38,  2           // InterfaceMethod java/util/Collection.add:(Ljava/lang/Object;)Z
      55: pop
      56: goto          25
      59: aload_1
      60: areturn

  private V getReferenceValue(org.webswing.toolkit.util.WeakValueHashMap<K, V>.WeakValue<V>);
    Code:
       0: aload_1
       1: ifnonnull     8
       4: aconst_null
       5: goto          12
       8: aload_1
       9: invokevirtual #39                 // Method org/webswing/toolkit/util/WeakValueHashMap$WeakValue.get:()Ljava/lang/Object;
      12: areturn

  private void processQueue();
    Code:
       0: aload_0
       1: getfield      #7                  // Field gcQueue:Ljava/lang/ref/ReferenceQueue;
       4: invokevirtual #40                 // Method java/lang/ref/ReferenceQueue.poll:()Ljava/lang/ref/Reference;
       7: checkcast     #19                 // class org/webswing/toolkit/util/WeakValueHashMap$WeakValue
      10: dup
      11: astore_1
      12: ifnull        30
      15: aload_0
      16: getfield      #4                  // Field references:Ljava/util/HashMap;
      19: aload_1
      20: invokestatic  #41                 // Method org/webswing/toolkit/util/WeakValueHashMap$WeakValue.access$100:(Lorg/webswing/toolkit/util/WeakValueHashMap$WeakValue;)Ljava/lang/Object;
      23: invokevirtual #42                 // Method java/util/HashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      26: pop
      27: goto          0
      30: return
}
