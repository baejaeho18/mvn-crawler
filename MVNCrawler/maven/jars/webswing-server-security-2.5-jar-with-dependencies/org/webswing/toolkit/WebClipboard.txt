Compiled from "WebClipboard.java"
public class org.webswing.toolkit.WebClipboard extends java.awt.datatransfer.Clipboard {
  private static java.awt.datatransfer.DataFlavor htmlDf;

  public static final java.awt.datatransfer.DataFlavor HTML_FLAVOR;

  private final boolean isSystemClipboard;

  public final java.awt.datatransfer.ClipboardOwner owner;

  private org.webswing.toolkit.WebClipboardTransferable browserClipboard;

  public org.webswing.toolkit.WebClipboard(java.lang.String, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method java/awt/datatransfer/Clipboard."<init>":(Ljava/lang/String;)V
       5: aload_0
       6: new           #2                  // class org/webswing/toolkit/WebClipboard$1
       9: dup
      10: aload_0
      11: invokespecial #3                  // Method org/webswing/toolkit/WebClipboard$1."<init>":(Lorg/webswing/toolkit/WebClipboard;)V
      14: putfield      #4                  // Field owner:Ljava/awt/datatransfer/ClipboardOwner;
      17: aload_0
      18: iload_2
      19: putfield      #5                  // Field isSystemClipboard:Z
      22: return

  public void setContents(java.awt.datatransfer.Transferable);
    Code:
       0: aload_1
       1: instanceof    #6                  // class org/webswing/toolkit/WebClipboardTransferable
       4: ifeq          31
       7: aload_1
       8: getstatic     #7                  // Field java/awt/datatransfer/DataFlavor.imageFlavor:Ljava/awt/datatransfer/DataFlavor;
      11: invokeinterface #8,  2            // InterfaceMethod java/awt/datatransfer/Transferable.isDataFlavorSupported:(Ljava/awt/datatransfer/DataFlavor;)Z
      16: ifne          31
      19: aload_0
      20: aload_0
      21: getfield      #9                  // Field contents:Ljava/awt/datatransfer/Transferable;
      24: aload_1
      25: invokespecial #10                 // Method stringFlavorsEquals:(Ljava/awt/datatransfer/Transferable;Ljava/awt/datatransfer/Transferable;)Z
      28: ifne          40
      31: aload_0
      32: aload_1
      33: aload_0
      34: getfield      #4                  // Field owner:Ljava/awt/datatransfer/ClipboardOwner;
      37: invokespecial #11                 // Method java/awt/datatransfer/Clipboard.setContents:(Ljava/awt/datatransfer/Transferable;Ljava/awt/datatransfer/ClipboardOwner;)V
      40: return

  public synchronized void setContents(java.awt.datatransfer.Transferable, java.awt.datatransfer.ClipboardOwner);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #11                 // Method java/awt/datatransfer/Clipboard.setContents:(Ljava/awt/datatransfer/Transferable;Ljava/awt/datatransfer/ClipboardOwner;)V
       6: aload_0
       7: getfield      #5                  // Field isSystemClipboard:Z
      10: ifeq          36
      13: ldc           #13                 // String webswing.allowLocalClipboard
      15: invokestatic  #14                 // Method java/lang/Boolean.getBoolean:(Ljava/lang/String;)Z
      18: ifeq          36
      21: aload_1
      22: invokestatic  #15                 // Method toWebswingClipboardData:(Ljava/awt/datatransfer/Transferable;)Lorg/webswing/toolkit/api/clipboard/WebswingClipboardData;
      25: astore_3
      26: invokestatic  #16                 // Method org/webswing/toolkit/util/Util.getWebToolkit:()Lorg/webswing/toolkit/WebToolkit;
      29: invokevirtual #17                 // Method org/webswing/toolkit/WebToolkit.getPaintDispatcher:()Lorg/webswing/dispatch/WebPaintDispatcher;
      32: aload_3
      33: invokevirtual #18                 // Method org/webswing/dispatch/WebPaintDispatcher.notifyCopyEvent:(Lorg/webswing/toolkit/api/clipboard/WebswingClipboardData;)V
      36: return

  public static org.webswing.toolkit.api.clipboard.WebswingClipboardData toWebswingClipboardData(java.awt.datatransfer.Transferable);
    Code:
       0: new           #19                 // class org/webswing/toolkit/api/clipboard/WebswingClipboardData
       3: dup
       4: invokespecial #20                 // Method org/webswing/toolkit/api/clipboard/WebswingClipboardData."<init>":()V
       7: astore_1
       8: aload_0
       9: ifnull        393
      12: aload_0
      13: getstatic     #21                 // Field HTML_FLAVOR:Ljava/awt/datatransfer/DataFlavor;
      16: invokeinterface #8,  2            // InterfaceMethod java/awt/datatransfer/Transferable.isDataFlavorSupported:(Ljava/awt/datatransfer/DataFlavor;)Z
      21: ifeq          59
      24: aload_0
      25: getstatic     #21                 // Field HTML_FLAVOR:Ljava/awt/datatransfer/DataFlavor;
      28: invokeinterface #22,  2           // InterfaceMethod java/awt/datatransfer/Transferable.getTransferData:(Ljava/awt/datatransfer/DataFlavor;)Ljava/lang/Object;
      33: astore_2
      34: aload_1
      35: aload_2
      36: invokevirtual #23                 // Method java/lang/Object.toString:()Ljava/lang/String;
      39: invokevirtual #24                 // Method org/webswing/toolkit/api/clipboard/WebswingClipboardData.setHtml:(Ljava/lang/String;)V
      42: goto          59
      45: astore_2
      46: ldc           #26                 // String WebClipboard:setContent:HTML
      48: iconst_1
      49: anewarray     #27                 // class java/lang/Object
      52: dup
      53: iconst_0
      54: aload_2
      55: aastore
      56: invokestatic  #28                 // Method org/webswing/toolkit/util/Logger.error:(Ljava/lang/String;[Ljava/lang/Object;)V
      59: aload_0
      60: getstatic     #29                 // Field java/awt/datatransfer/DataFlavor.stringFlavor:Ljava/awt/datatransfer/DataFlavor;
      63: invokeinterface #8,  2            // InterfaceMethod java/awt/datatransfer/Transferable.isDataFlavorSupported:(Ljava/awt/datatransfer/DataFlavor;)Z
      68: ifeq          104
      71: aload_1
      72: aload_0
      73: getstatic     #29                 // Field java/awt/datatransfer/DataFlavor.stringFlavor:Ljava/awt/datatransfer/DataFlavor;
      76: invokeinterface #22,  2           // InterfaceMethod java/awt/datatransfer/Transferable.getTransferData:(Ljava/awt/datatransfer/DataFlavor;)Ljava/lang/Object;
      81: checkcast     #30                 // class java/lang/String
      84: invokevirtual #31                 // Method org/webswing/toolkit/api/clipboard/WebswingClipboardData.setText:(Ljava/lang/String;)V
      87: goto          104
      90: astore_2
      91: ldc           #32                 // String WebClipboard:setContent:Plain
      93: iconst_1
      94: anewarray     #27                 // class java/lang/Object
      97: dup
      98: iconst_0
      99: aload_2
     100: aastore
     101: invokestatic  #28                 // Method org/webswing/toolkit/util/Logger.error:(Ljava/lang/String;[Ljava/lang/Object;)V
     104: aload_0
     105: getstatic     #7                  // Field java/awt/datatransfer/DataFlavor.imageFlavor:Ljava/awt/datatransfer/DataFlavor;
     108: invokeinterface #8,  2            // InterfaceMethod java/awt/datatransfer/Transferable.isDataFlavorSupported:(Ljava/awt/datatransfer/DataFlavor;)Z
     113: ifeq          203
     116: aload_0
     117: getstatic     #7                  // Field java/awt/datatransfer/DataFlavor.imageFlavor:Ljava/awt/datatransfer/DataFlavor;
     120: invokeinterface #22,  2           // InterfaceMethod java/awt/datatransfer/Transferable.getTransferData:(Ljava/awt/datatransfer/DataFlavor;)Ljava/lang/Object;
     125: checkcast     #33                 // class java/awt/Image
     128: astore_2
     129: aload_2
     130: ifnull        186
     133: new           #34                 // class java/awt/image/BufferedImage
     136: dup
     137: aload_2
     138: aconst_null
     139: invokevirtual #35                 // Method java/awt/Image.getWidth:(Ljava/awt/image/ImageObserver;)I
     142: aload_2
     143: aconst_null
     144: invokevirtual #36                 // Method java/awt/Image.getHeight:(Ljava/awt/image/ImageObserver;)I
     147: iconst_2
     148: invokespecial #37                 // Method java/awt/image/BufferedImage."<init>":(III)V
     151: astore_3
     152: aload_3
     153: invokevirtual #38                 // Method java/awt/image/BufferedImage.getGraphics:()Ljava/awt/Graphics;
     156: astore        4
     158: aload         4
     160: aload_2
     161: iconst_0
     162: iconst_0
     163: aconst_null
     164: invokevirtual #39                 // Method java/awt/Graphics.drawImage:(Ljava/awt/Image;IILjava/awt/image/ImageObserver;)Z
     167: pop
     168: aload         4
     170: invokevirtual #40                 // Method java/awt/Graphics.dispose:()V
     173: aload_1
     174: invokestatic  #41                 // Method org/webswing/toolkit/util/Services.getImageService:()Lorg/webswing/ext/services/ImageService;
     177: aload_3
     178: invokeinterface #42,  2           // InterfaceMethod org/webswing/ext/services/ImageService.getPngImage:(Ljava/awt/image/BufferedImage;)[B
     183: invokevirtual #43                 // Method org/webswing/toolkit/api/clipboard/WebswingClipboardData.setImg:([B)V
     186: goto          203
     189: astore_2
     190: ldc           #44                 // String WebClipboard:setContent:Image
     192: iconst_1
     193: anewarray     #27                 // class java/lang/Object
     196: dup
     197: iconst_0
     198: aload_2
     199: aastore
     200: invokestatic  #28                 // Method org/webswing/toolkit/util/Logger.error:(Ljava/lang/String;[Ljava/lang/Object;)V
     203: aload_0
     204: getstatic     #45                 // Field java/awt/datatransfer/DataFlavor.javaFileListFlavor:Ljava/awt/datatransfer/DataFlavor;
     207: invokeinterface #8,  2            // InterfaceMethod java/awt/datatransfer/Transferable.isDataFlavorSupported:(Ljava/awt/datatransfer/DataFlavor;)Z
     212: ifeq          393
     215: aload_0
     216: getstatic     #45                 // Field java/awt/datatransfer/DataFlavor.javaFileListFlavor:Ljava/awt/datatransfer/DataFlavor;
     219: invokeinterface #22,  2           // InterfaceMethod java/awt/datatransfer/Transferable.getTransferData:(Ljava/awt/datatransfer/DataFlavor;)Ljava/lang/Object;
     224: checkcast     #46                 // class java/util/List
     227: astore_2
     228: aload_2
     229: ifnull        376
     232: new           #47                 // class java/util/ArrayList
     235: dup
     236: invokespecial #48                 // Method java/util/ArrayList."<init>":()V
     239: astore_3
     240: aload_2
     241: invokeinterface #49,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     246: astore        4
     248: aload         4
     250: invokeinterface #50,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     255: ifeq          371
     258: aload         4
     260: invokeinterface #51,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     265: astore        5
     267: aload         5
     269: instanceof    #52                 // class java/io/File
     272: ifeq          368
     275: aload         5
     277: checkcast     #52                 // class java/io/File
     280: astore        6
     282: ldc           #53                 // String webswing.allowDownload
     284: invokestatic  #14                 // Method java/lang/Boolean.getBoolean:(Ljava/lang/String;)Z
     287: ifeq          358
     290: aload         6
     292: invokevirtual #54                 // Method java/io/File.exists:()Z
     295: ifeq          327
     298: aload         6
     300: invokevirtual #55                 // Method java/io/File.canRead:()Z
     303: ifeq          327
     306: aload         6
     308: invokevirtual #56                 // Method java/io/File.isDirectory:()Z
     311: ifne          327
     314: aload_3
     315: aload         6
     317: invokevirtual #57                 // Method java/io/File.getAbsolutePath:()Ljava/lang/String;
     320: invokevirtual #58                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
     323: pop
     324: goto          368
     327: aload_3
     328: new           #59                 // class java/lang/StringBuilder
     331: dup
     332: invokespecial #60                 // Method java/lang/StringBuilder."<init>":()V
     335: ldc           #61                 // String #
     337: invokevirtual #62                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     340: aload         6
     342: invokevirtual #57                 // Method java/io/File.getAbsolutePath:()Ljava/lang/String;
     345: invokevirtual #62                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     348: invokevirtual #63                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     351: invokevirtual #58                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
     354: pop
     355: goto          368
     358: aload_3
     359: ldc           #64                 // String #Downloading not allowed.
     361: invokevirtual #58                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
     364: pop
     365: goto          371
     368: goto          248
     371: aload_1
     372: aload_3
     373: invokevirtual #65                 // Method org/webswing/toolkit/api/clipboard/WebswingClipboardData.setFiles:(Ljava/util/List;)V
     376: goto          393
     379: astore_2
     380: ldc           #66                 // String WebClipboard:setContent:Files
     382: iconst_1
     383: anewarray     #27                 // class java/lang/Object
     386: dup
     387: iconst_0
     388: aload_2
     389: aastore
     390: invokestatic  #28                 // Method org/webswing/toolkit/util/Logger.error:(Ljava/lang/String;[Ljava/lang/Object;)V
     393: aload_1
     394: areturn
    Exception table:
       from    to  target type
          24    42    45   Class java/lang/Exception
          71    87    90   Class java/lang/Exception
         116   186   189   Class java/lang/Exception
         215   376   379   Class java/lang/Exception

  private boolean stringFlavorsEquals(java.awt.datatransfer.Transferable, java.awt.datatransfer.Transferable);
    Code:
       0: aload_1
       1: getstatic     #29                 // Field java/awt/datatransfer/DataFlavor.stringFlavor:Ljava/awt/datatransfer/DataFlavor;
       4: invokeinterface #8,  2            // InterfaceMethod java/awt/datatransfer/Transferable.isDataFlavorSupported:(Ljava/awt/datatransfer/DataFlavor;)Z
       9: ifne          26
      12: aload_2
      13: getstatic     #29                 // Field java/awt/datatransfer/DataFlavor.stringFlavor:Ljava/awt/datatransfer/DataFlavor;
      16: invokeinterface #8,  2            // InterfaceMethod java/awt/datatransfer/Transferable.isDataFlavorSupported:(Ljava/awt/datatransfer/DataFlavor;)Z
      21: ifne          26
      24: iconst_1
      25: ireturn
      26: aload_1
      27: getstatic     #29                 // Field java/awt/datatransfer/DataFlavor.stringFlavor:Ljava/awt/datatransfer/DataFlavor;
      30: invokeinterface #8,  2            // InterfaceMethod java/awt/datatransfer/Transferable.isDataFlavorSupported:(Ljava/awt/datatransfer/DataFlavor;)Z
      35: ifeq          96
      38: aload_2
      39: getstatic     #29                 // Field java/awt/datatransfer/DataFlavor.stringFlavor:Ljava/awt/datatransfer/DataFlavor;
      42: invokeinterface #8,  2            // InterfaceMethod java/awt/datatransfer/Transferable.isDataFlavorSupported:(Ljava/awt/datatransfer/DataFlavor;)Z
      47: ifeq          96
      50: aload_1
      51: getstatic     #29                 // Field java/awt/datatransfer/DataFlavor.stringFlavor:Ljava/awt/datatransfer/DataFlavor;
      54: invokeinterface #22,  2           // InterfaceMethod java/awt/datatransfer/Transferable.getTransferData:(Ljava/awt/datatransfer/DataFlavor;)Ljava/lang/Object;
      59: checkcast     #30                 // class java/lang/String
      62: astore_3
      63: aload_2
      64: getstatic     #29                 // Field java/awt/datatransfer/DataFlavor.stringFlavor:Ljava/awt/datatransfer/DataFlavor;
      67: invokeinterface #22,  2           // InterfaceMethod java/awt/datatransfer/Transferable.getTransferData:(Ljava/awt/datatransfer/DataFlavor;)Ljava/lang/Object;
      72: checkcast     #30                 // class java/lang/String
      75: astore        4
      77: aload_3
      78: ifnull        94
      81: aload_3
      82: aload         4
      84: invokevirtual #67                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      87: ifeq          94
      90: iconst_1
      91: goto          95
      94: iconst_0
      95: ireturn
      96: iconst_0
      97: ireturn
      98: astore_3
      99: iconst_0
     100: ireturn
    Exception table:
       from    to  target type
           0    25    98   Class java/lang/Exception
          26    95    98   Class java/lang/Exception
          96    97    98   Class java/lang/Exception

  public void setBrowserClipboard(org.webswing.toolkit.WebClipboardTransferable);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #68                 // Field browserClipboard:Lorg/webswing/toolkit/WebClipboardTransferable;
       5: return

  public org.webswing.toolkit.WebClipboardTransferable getBrowserClipboard();
    Code:
       0: aload_0
       1: getfield      #68                 // Field browserClipboard:Lorg/webswing/toolkit/WebClipboardTransferable;
       4: areturn

  public org.webswing.toolkit.api.clipboard.BrowserTransferable requestClipboard(org.webswing.toolkit.api.clipboard.PasteRequestContext);
    Code:
       0: invokestatic  #69                 // Method javax/swing/SwingUtilities.isEventDispatchThread:()Z
       3: ifeq          52
       6: aload_0
       7: new           #6                  // class org/webswing/toolkit/WebClipboardTransferable
      10: dup
      11: aconst_null
      12: invokespecial #70                 // Method org/webswing/toolkit/WebClipboardTransferable."<init>":(Lorg/webswing/model/c2s/PasteEventMsgIn;)V
      15: invokevirtual #71                 // Method setBrowserClipboard:(Lorg/webswing/toolkit/WebClipboardTransferable;)V
      18: invokestatic  #16                 // Method org/webswing/toolkit/util/Util.getWebToolkit:()Lorg/webswing/toolkit/WebToolkit;
      21: invokevirtual #17                 // Method org/webswing/toolkit/WebToolkit.getPaintDispatcher:()Lorg/webswing/dispatch/WebPaintDispatcher;
      24: aload_1
      25: invokevirtual #72                 // Method org/webswing/dispatch/WebPaintDispatcher.requestBrowserClipboard:(Lorg/webswing/toolkit/api/clipboard/PasteRequestContext;)V
      28: aload_0
      29: getfield      #68                 // Field browserClipboard:Lorg/webswing/toolkit/WebClipboardTransferable;
      32: ifnull        50
      35: aload_0
      36: getfield      #68                 // Field browserClipboard:Lorg/webswing/toolkit/WebClipboardTransferable;
      39: invokevirtual #73                 // Method org/webswing/toolkit/WebClipboardTransferable.isEmpty:()Z
      42: ifne          50
      45: aload_0
      46: getfield      #68                 // Field browserClipboard:Lorg/webswing/toolkit/WebClipboardTransferable;
      49: areturn
      50: aconst_null
      51: areturn
      52: new           #74                 // class org/webswing/toolkit/WebClipboard$2
      55: dup
      56: aload_0
      57: aload_1
      58: invokespecial #75                 // Method org/webswing/toolkit/WebClipboard$2."<init>":(Lorg/webswing/toolkit/WebClipboard;Lorg/webswing/toolkit/api/clipboard/PasteRequestContext;)V
      61: invokestatic  #76                 // Method javax/swing/SwingUtilities.invokeAndWait:(Ljava/lang/Runnable;)V
      64: aload_0
      65: getfield      #68                 // Field browserClipboard:Lorg/webswing/toolkit/WebClipboardTransferable;
      68: ifnull        86
      71: aload_0
      72: getfield      #68                 // Field browserClipboard:Lorg/webswing/toolkit/WebClipboardTransferable;
      75: invokevirtual #73                 // Method org/webswing/toolkit/WebClipboardTransferable.isEmpty:()Z
      78: ifne          86
      81: aload_0
      82: getfield      #68                 // Field browserClipboard:Lorg/webswing/toolkit/WebClipboardTransferable;
      85: areturn
      86: goto          103
      89: astore_2
      90: ldc           #77                 // String Failed to process paste request.
      92: iconst_1
      93: anewarray     #27                 // class java/lang/Object
      96: dup
      97: iconst_0
      98: aload_2
      99: aastore
     100: invokestatic  #28                 // Method org/webswing/toolkit/util/Logger.error:(Ljava/lang/String;[Ljava/lang/Object;)V
     103: aconst_null
     104: areturn
    Exception table:
       from    to  target type
          52    85    89   Class java/lang/Exception

  static {};
    Code:
       0: new           #78                 // class java/awt/datatransfer/DataFlavor
       3: dup
       4: ldc           #79                 // String text/html;class=java.lang.String
       6: invokespecial #80                 // Method java/awt/datatransfer/DataFlavor."<init>":(Ljava/lang/String;)V
       9: putstatic     #81                 // Field htmlDf:Ljava/awt/datatransfer/DataFlavor;
      12: goto          29
      15: astore_0
      16: ldc           #83                 // String initialization error:
      18: iconst_1
      19: anewarray     #27                 // class java/lang/Object
      22: dup
      23: iconst_0
      24: aload_0
      25: aastore
      26: invokestatic  #28                 // Method org/webswing/toolkit/util/Logger.error:(Ljava/lang/String;[Ljava/lang/Object;)V
      29: getstatic     #81                 // Field htmlDf:Ljava/awt/datatransfer/DataFlavor;
      32: putstatic     #21                 // Field HTML_FLAVOR:Ljava/awt/datatransfer/DataFlavor;
      35: return
    Exception table:
       from    to  target type
           0    12    15   Class java/lang/ClassNotFoundException
}
