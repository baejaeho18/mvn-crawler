Compiled from "DefaultBlockCipherService.java"
public class org.apache.shiro.crypto.DefaultBlockCipherService extends org.apache.shiro.crypto.AbstractSymmetricCipherService {
  private static final int DEFAULT_BLOCK_SIZE;

  private static final java.lang.String TRANSFORMATION_STRING_DELIMITER;

  private static final int DEFAULT_STREAMING_BLOCK_SIZE;

  private java.lang.String modeName;

  private int blockSize;

  private java.lang.String paddingSchemeName;

  private java.lang.String streamingModeName;

  private int streamingBlockSize;

  private java.lang.String streamingPaddingSchemeName;

  private java.lang.String transformationString;

  private java.lang.String streamingTransformationString;

  public org.apache.shiro.crypto.DefaultBlockCipherService(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method org/apache/shiro/crypto/AbstractSymmetricCipherService."<init>":(Ljava/lang/String;)V
       5: aload_0
       6: getstatic     #2                  // Field org/apache/shiro/crypto/OperationMode.CBC:Lorg/apache/shiro/crypto/OperationMode;
       9: invokevirtual #3                  // Method org/apache/shiro/crypto/OperationMode.name:()Ljava/lang/String;
      12: putfield      #4                  // Field modeName:Ljava/lang/String;
      15: aload_0
      16: getstatic     #5                  // Field org/apache/shiro/crypto/PaddingScheme.PKCS5:Lorg/apache/shiro/crypto/PaddingScheme;
      19: invokevirtual #6                  // Method org/apache/shiro/crypto/PaddingScheme.getTransformationName:()Ljava/lang/String;
      22: putfield      #7                  // Field paddingSchemeName:Ljava/lang/String;
      25: aload_0
      26: iconst_0
      27: putfield      #8                  // Field blockSize:I
      30: aload_0
      31: getstatic     #2                  // Field org/apache/shiro/crypto/OperationMode.CBC:Lorg/apache/shiro/crypto/OperationMode;
      34: invokevirtual #3                  // Method org/apache/shiro/crypto/OperationMode.name:()Ljava/lang/String;
      37: putfield      #9                  // Field streamingModeName:Ljava/lang/String;
      40: aload_0
      41: getstatic     #5                  // Field org/apache/shiro/crypto/PaddingScheme.PKCS5:Lorg/apache/shiro/crypto/PaddingScheme;
      44: invokevirtual #6                  // Method org/apache/shiro/crypto/PaddingScheme.getTransformationName:()Ljava/lang/String;
      47: putfield      #10                 // Field streamingPaddingSchemeName:Ljava/lang/String;
      50: aload_0
      51: bipush        8
      53: putfield      #11                 // Field streamingBlockSize:I
      56: return

  public java.lang.String getModeName();
    Code:
       0: aload_0
       1: getfield      #4                  // Field modeName:Ljava/lang/String;
       4: areturn

  public void setModeName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field modeName:Ljava/lang/String;
       5: aload_0
       6: aconst_null
       7: putfield      #12                 // Field transformationString:Ljava/lang/String;
      10: return

  public void setMode(org.apache.shiro.crypto.OperationMode);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #3                  // Method org/apache/shiro/crypto/OperationMode.name:()Ljava/lang/String;
       5: invokevirtual #13                 // Method setModeName:(Ljava/lang/String;)V
       8: return

  public java.lang.String getPaddingSchemeName();
    Code:
       0: aload_0
       1: getfield      #7                  // Field paddingSchemeName:Ljava/lang/String;
       4: areturn

  public void setPaddingSchemeName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #7                  // Field paddingSchemeName:Ljava/lang/String;
       5: aload_0
       6: aconst_null
       7: putfield      #12                 // Field transformationString:Ljava/lang/String;
      10: return

  public void setPaddingScheme(org.apache.shiro.crypto.PaddingScheme);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #6                  // Method org/apache/shiro/crypto/PaddingScheme.getTransformationName:()Ljava/lang/String;
       5: invokevirtual #14                 // Method setPaddingSchemeName:(Ljava/lang/String;)V
       8: return

  public int getBlockSize();
    Code:
       0: aload_0
       1: getfield      #8                  // Field blockSize:I
       4: ireturn

  public void setBlockSize(int);
    Code:
       0: aload_0
       1: iconst_0
       2: iload_1
       3: invokestatic  #15                 // Method java/lang/Math.max:(II)I
       6: putfield      #8                  // Field blockSize:I
       9: aload_0
      10: aconst_null
      11: putfield      #12                 // Field transformationString:Ljava/lang/String;
      14: return

  public java.lang.String getStreamingModeName();
    Code:
       0: aload_0
       1: getfield      #9                  // Field streamingModeName:Ljava/lang/String;
       4: areturn

  private boolean isModeStreamingCompatible(java.lang.String);
    Code:
       0: aload_1
       1: ifnull        34
       4: aload_1
       5: getstatic     #16                 // Field org/apache/shiro/crypto/OperationMode.ECB:Lorg/apache/shiro/crypto/OperationMode;
       8: invokevirtual #3                  // Method org/apache/shiro/crypto/OperationMode.name:()Ljava/lang/String;
      11: invokevirtual #17                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      14: ifne          34
      17: aload_1
      18: getstatic     #18                 // Field org/apache/shiro/crypto/OperationMode.NONE:Lorg/apache/shiro/crypto/OperationMode;
      21: invokevirtual #3                  // Method org/apache/shiro/crypto/OperationMode.name:()Ljava/lang/String;
      24: invokevirtual #17                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      27: ifne          34
      30: iconst_1
      31: goto          35
      34: iconst_0
      35: ireturn

  public void setStreamingModeName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #19                 // Method isModeStreamingCompatible:(Ljava/lang/String;)Z
       5: ifne          42
       8: new           #20                 // class java/lang/StringBuilder
      11: dup
      12: invokespecial #21                 // Method java/lang/StringBuilder."<init>":()V
      15: ldc           #22                 // String mode [
      17: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      20: aload_1
      21: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: ldc           #24                 // String ] is not a valid operation mode for block cipher streaming.
      26: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: invokevirtual #25                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      32: astore_2
      33: new           #26                 // class java/lang/IllegalArgumentException
      36: dup
      37: aload_2
      38: invokespecial #27                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      41: athrow
      42: aload_0
      43: aload_1
      44: putfield      #9                  // Field streamingModeName:Ljava/lang/String;
      47: aload_0
      48: aconst_null
      49: putfield      #28                 // Field streamingTransformationString:Ljava/lang/String;
      52: return

  public void setStreamingMode(org.apache.shiro.crypto.OperationMode);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #3                  // Method org/apache/shiro/crypto/OperationMode.name:()Ljava/lang/String;
       5: invokevirtual #29                 // Method setStreamingModeName:(Ljava/lang/String;)V
       8: return

  public java.lang.String getStreamingPaddingSchemeName();
    Code:
       0: aload_0
       1: getfield      #10                 // Field streamingPaddingSchemeName:Ljava/lang/String;
       4: areturn

  public void setStreamingPaddingSchemeName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #10                 // Field streamingPaddingSchemeName:Ljava/lang/String;
       5: aload_0
       6: aconst_null
       7: putfield      #28                 // Field streamingTransformationString:Ljava/lang/String;
      10: return

  public void setStreamingPaddingScheme(org.apache.shiro.crypto.PaddingScheme);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #6                  // Method org/apache/shiro/crypto/PaddingScheme.getTransformationName:()Ljava/lang/String;
       5: invokevirtual #30                 // Method setStreamingPaddingSchemeName:(Ljava/lang/String;)V
       8: return

  public int getStreamingBlockSize();
    Code:
       0: aload_0
       1: getfield      #11                 // Field streamingBlockSize:I
       4: ireturn

  public void setStreamingBlockSize(int);
    Code:
       0: aload_0
       1: iconst_0
       2: iload_1
       3: invokestatic  #15                 // Method java/lang/Math.max:(II)I
       6: putfield      #11                 // Field streamingBlockSize:I
       9: aload_0
      10: aconst_null
      11: putfield      #28                 // Field streamingTransformationString:Ljava/lang/String;
      14: return

  protected java.lang.String getTransformationString(boolean);
    Code:
       0: iload_1
       1: ifeq          24
       4: aload_0
       5: getfield      #28                 // Field streamingTransformationString:Ljava/lang/String;
       8: ifnonnull     19
      11: aload_0
      12: aload_0
      13: invokespecial #31                 // Method buildStreamingTransformationString:()Ljava/lang/String;
      16: putfield      #28                 // Field streamingTransformationString:Ljava/lang/String;
      19: aload_0
      20: getfield      #28                 // Field streamingTransformationString:Ljava/lang/String;
      23: areturn
      24: aload_0
      25: getfield      #12                 // Field transformationString:Ljava/lang/String;
      28: ifnonnull     39
      31: aload_0
      32: aload_0
      33: invokespecial #32                 // Method buildTransformationString:()Ljava/lang/String;
      36: putfield      #12                 // Field transformationString:Ljava/lang/String;
      39: aload_0
      40: getfield      #12                 // Field transformationString:Ljava/lang/String;
      43: areturn

  private java.lang.String buildTransformationString();
    Code:
       0: aload_0
       1: aload_0
       2: invokevirtual #33                 // Method getModeName:()Ljava/lang/String;
       5: aload_0
       6: invokevirtual #34                 // Method getPaddingSchemeName:()Ljava/lang/String;
       9: aload_0
      10: invokevirtual #35                 // Method getBlockSize:()I
      13: invokespecial #36                 // Method buildTransformationString:(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String;
      16: areturn

  private java.lang.String buildStreamingTransformationString();
    Code:
       0: aload_0
       1: aload_0
       2: invokevirtual #37                 // Method getStreamingModeName:()Ljava/lang/String;
       5: aload_0
       6: invokevirtual #38                 // Method getStreamingPaddingSchemeName:()Ljava/lang/String;
       9: iconst_0
      10: invokespecial #36                 // Method buildTransformationString:(Ljava/lang/String;Ljava/lang/String;I)Ljava/lang/String;
      13: areturn

  private java.lang.String buildTransformationString(java.lang.String, java.lang.String, int);
    Code:
       0: new           #20                 // class java/lang/StringBuilder
       3: dup
       4: aload_0
       5: invokevirtual #39                 // Method getAlgorithmName:()Ljava/lang/String;
       8: invokespecial #40                 // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
      11: astore        4
      13: aload_1
      14: invokestatic  #41                 // Method org/apache/shiro/util/StringUtils.hasText:(Ljava/lang/String;)Z
      17: ifeq          32
      20: aload         4
      22: ldc           #42                 // String /
      24: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      27: aload_1
      28: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      31: pop
      32: iload_3
      33: ifle          43
      36: aload         4
      38: iload_3
      39: invokevirtual #43                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      42: pop
      43: aload_2
      44: invokestatic  #41                 // Method org/apache/shiro/util/StringUtils.hasText:(Ljava/lang/String;)Z
      47: ifeq          62
      50: aload         4
      52: ldc           #42                 // String /
      54: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      57: aload_2
      58: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      61: pop
      62: aload         4
      64: invokevirtual #25                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      67: areturn

  private boolean isModeInitializationVectorCompatible(java.lang.String);
    Code:
       0: aload_1
       1: ifnull        34
       4: aload_1
       5: getstatic     #16                 // Field org/apache/shiro/crypto/OperationMode.ECB:Lorg/apache/shiro/crypto/OperationMode;
       8: invokevirtual #3                  // Method org/apache/shiro/crypto/OperationMode.name:()Ljava/lang/String;
      11: invokevirtual #17                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      14: ifne          34
      17: aload_1
      18: getstatic     #18                 // Field org/apache/shiro/crypto/OperationMode.NONE:Lorg/apache/shiro/crypto/OperationMode;
      21: invokevirtual #3                  // Method org/apache/shiro/crypto/OperationMode.name:()Ljava/lang/String;
      24: invokevirtual #17                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      27: ifne          34
      30: iconst_1
      31: goto          35
      34: iconst_0
      35: ireturn

  protected boolean isGenerateInitializationVectors(boolean);
    Code:
       0: iload_1
       1: ifne          22
       4: aload_0
       5: invokespecial #44                 // Method org/apache/shiro/crypto/AbstractSymmetricCipherService.isGenerateInitializationVectors:()Z
       8: ifeq          26
      11: aload_0
      12: aload_0
      13: invokevirtual #33                 // Method getModeName:()Ljava/lang/String;
      16: invokespecial #45                 // Method isModeInitializationVectorCompatible:(Ljava/lang/String;)Z
      19: ifeq          26
      22: iconst_1
      23: goto          27
      26: iconst_0
      27: ireturn

  protected byte[] generateInitializationVector(boolean);
    Code:
       0: iload_1
       1: ifeq          64
       4: aload_0
       5: invokevirtual #37                 // Method getStreamingModeName:()Ljava/lang/String;
       8: astore_2
       9: aload_0
      10: aload_2
      11: invokespecial #45                 // Method isModeInitializationVectorCompatible:(Ljava/lang/String;)Z
      14: ifne          61
      17: new           #20                 // class java/lang/StringBuilder
      20: dup
      21: invokespecial #21                 // Method java/lang/StringBuilder."<init>":()V
      24: ldc           #46                 // String streamingMode attribute value [
      26: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: aload_2
      30: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: ldc           #47                 // String ] does not support
      35: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      38: ldc           #48                 // String Initialization Vectors.  Ensure the streamingMode value represents an operation mode
      40: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      43: ldc           #49                 // String that is compatible with initialization vectors.
      45: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      48: invokevirtual #25                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      51: astore_3
      52: new           #50                 // class java/lang/IllegalStateException
      55: dup
      56: aload_3
      57: invokespecial #51                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      60: athrow
      61: goto          121
      64: aload_0
      65: invokevirtual #33                 // Method getModeName:()Ljava/lang/String;
      68: astore_2
      69: aload_0
      70: aload_2
      71: invokespecial #45                 // Method isModeInitializationVectorCompatible:(Ljava/lang/String;)Z
      74: ifne          121
      77: new           #20                 // class java/lang/StringBuilder
      80: dup
      81: invokespecial #21                 // Method java/lang/StringBuilder."<init>":()V
      84: ldc           #52                 // String mode attribute value [
      86: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      89: aload_2
      90: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      93: ldc           #47                 // String ] does not support
      95: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      98: ldc           #53                 // String Initialization Vectors.  Ensure the mode value represents an operation mode
     100: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     103: ldc           #49                 // String that is compatible with initialization vectors.
     105: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     108: invokevirtual #25                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     111: astore_3
     112: new           #50                 // class java/lang/IllegalStateException
     115: dup
     116: aload_3
     117: invokespecial #51                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     120: athrow
     121: aload_0
     122: iload_1
     123: invokespecial #54                 // Method org/apache/shiro/crypto/AbstractSymmetricCipherService.generateInitializationVector:(Z)[B
     126: areturn
}
