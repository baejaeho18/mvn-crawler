Compiled from "ModularRealmAuthorizer.java"
public class org.apache.shiro.authz.ModularRealmAuthorizer implements org.apache.shiro.authz.Authorizer,org.apache.shiro.authz.permission.PermissionResolverAware,org.apache.shiro.authz.permission.RolePermissionResolverAware {
  protected java.util.Collection<org.apache.shiro.realm.Realm> realms;

  protected org.apache.shiro.authz.permission.PermissionResolver permissionResolver;

  protected org.apache.shiro.authz.permission.RolePermissionResolver rolePermissionResolver;

  public org.apache.shiro.authz.ModularRealmAuthorizer();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public org.apache.shiro.authz.ModularRealmAuthorizer(java.util.Collection<org.apache.shiro.realm.Realm>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: invokevirtual #2                  // Method setRealms:(Ljava/util/Collection;)V
       9: return

  public java.util.Collection<org.apache.shiro.realm.Realm> getRealms();
    Code:
       0: aload_0
       1: getfield      #3                  // Field realms:Ljava/util/Collection;
       4: areturn

  public void setRealms(java.util.Collection<org.apache.shiro.realm.Realm>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #3                  // Field realms:Ljava/util/Collection;
       5: aload_0
       6: invokevirtual #4                  // Method applyPermissionResolverToRealms:()V
       9: aload_0
      10: invokevirtual #5                  // Method applyRolePermissionResolverToRealms:()V
      13: return

  public org.apache.shiro.authz.permission.PermissionResolver getPermissionResolver();
    Code:
       0: aload_0
       1: getfield      #6                  // Field permissionResolver:Lorg/apache/shiro/authz/permission/PermissionResolver;
       4: areturn

  public void setPermissionResolver(org.apache.shiro.authz.permission.PermissionResolver);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field permissionResolver:Lorg/apache/shiro/authz/permission/PermissionResolver;
       5: aload_0
       6: invokevirtual #4                  // Method applyPermissionResolverToRealms:()V
       9: return

  protected void applyPermissionResolverToRealms();
    Code:
       0: aload_0
       1: invokevirtual #7                  // Method getPermissionResolver:()Lorg/apache/shiro/authz/permission/PermissionResolver;
       4: astore_1
       5: aload_0
       6: invokevirtual #8                  // Method getRealms:()Ljava/util/Collection;
       9: astore_2
      10: aload_1
      11: ifnull        76
      14: aload_2
      15: ifnull        76
      18: aload_2
      19: invokeinterface #9,  1            // InterfaceMethod java/util/Collection.isEmpty:()Z
      24: ifne          76
      27: aload_2
      28: invokeinterface #10,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      33: astore_3
      34: aload_3
      35: invokeinterface #11,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      40: ifeq          76
      43: aload_3
      44: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      49: checkcast     #13                 // class org/apache/shiro/realm/Realm
      52: astore        4
      54: aload         4
      56: instanceof    #14                 // class org/apache/shiro/authz/permission/PermissionResolverAware
      59: ifeq          73
      62: aload         4
      64: checkcast     #14                 // class org/apache/shiro/authz/permission/PermissionResolverAware
      67: aload_1
      68: invokeinterface #15,  2           // InterfaceMethod org/apache/shiro/authz/permission/PermissionResolverAware.setPermissionResolver:(Lorg/apache/shiro/authz/permission/PermissionResolver;)V
      73: goto          34
      76: return

  public org.apache.shiro.authz.permission.RolePermissionResolver getRolePermissionResolver();
    Code:
       0: aload_0
       1: getfield      #16                 // Field rolePermissionResolver:Lorg/apache/shiro/authz/permission/RolePermissionResolver;
       4: areturn

  public void setRolePermissionResolver(org.apache.shiro.authz.permission.RolePermissionResolver);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #16                 // Field rolePermissionResolver:Lorg/apache/shiro/authz/permission/RolePermissionResolver;
       5: aload_0
       6: invokevirtual #5                  // Method applyRolePermissionResolverToRealms:()V
       9: return

  protected void applyRolePermissionResolverToRealms();
    Code:
       0: aload_0
       1: invokevirtual #17                 // Method getRolePermissionResolver:()Lorg/apache/shiro/authz/permission/RolePermissionResolver;
       4: astore_1
       5: aload_0
       6: invokevirtual #8                  // Method getRealms:()Ljava/util/Collection;
       9: astore_2
      10: aload_1
      11: ifnull        76
      14: aload_2
      15: ifnull        76
      18: aload_2
      19: invokeinterface #9,  1            // InterfaceMethod java/util/Collection.isEmpty:()Z
      24: ifne          76
      27: aload_2
      28: invokeinterface #10,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      33: astore_3
      34: aload_3
      35: invokeinterface #11,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      40: ifeq          76
      43: aload_3
      44: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      49: checkcast     #13                 // class org/apache/shiro/realm/Realm
      52: astore        4
      54: aload         4
      56: instanceof    #18                 // class org/apache/shiro/authz/permission/RolePermissionResolverAware
      59: ifeq          73
      62: aload         4
      64: checkcast     #18                 // class org/apache/shiro/authz/permission/RolePermissionResolverAware
      67: aload_1
      68: invokeinterface #19,  2           // InterfaceMethod org/apache/shiro/authz/permission/RolePermissionResolverAware.setRolePermissionResolver:(Lorg/apache/shiro/authz/permission/RolePermissionResolver;)V
      73: goto          34
      76: return

  protected void assertRealmsConfigured() throws java.lang.IllegalStateException;
    Code:
       0: aload_0
       1: invokevirtual #8                  // Method getRealms:()Ljava/util/Collection;
       4: astore_1
       5: aload_1
       6: ifnull        18
       9: aload_1
      10: invokeinterface #9,  1            // InterfaceMethod java/util/Collection.isEmpty:()Z
      15: ifeq          30
      18: ldc           #20                 // String Configuration error:  No realms have been configured!  One or more realms must be present to execute an authorization operation.
      20: astore_2
      21: new           #21                 // class java/lang/IllegalStateException
      24: dup
      25: aload_2
      26: invokespecial #22                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      29: athrow
      30: return

  public boolean isPermitted(org.apache.shiro.subject.PrincipalCollection, java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method assertRealmsConfigured:()V
       4: aload_0
       5: invokevirtual #8                  // Method getRealms:()Ljava/util/Collection;
       8: invokeinterface #10,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      13: astore_3
      14: aload_3
      15: invokeinterface #11,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      20: ifeq          65
      23: aload_3
      24: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      29: checkcast     #13                 // class org/apache/shiro/realm/Realm
      32: astore        4
      34: aload         4
      36: instanceof    #24                 // class org/apache/shiro/authz/Authorizer
      39: ifne          45
      42: goto          14
      45: aload         4
      47: checkcast     #24                 // class org/apache/shiro/authz/Authorizer
      50: aload_1
      51: aload_2
      52: invokeinterface #25,  3           // InterfaceMethod org/apache/shiro/authz/Authorizer.isPermitted:(Lorg/apache/shiro/subject/PrincipalCollection;Ljava/lang/String;)Z
      57: ifeq          62
      60: iconst_1
      61: ireturn
      62: goto          14
      65: iconst_0
      66: ireturn

  public boolean isPermitted(org.apache.shiro.subject.PrincipalCollection, org.apache.shiro.authz.Permission);
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method assertRealmsConfigured:()V
       4: aload_0
       5: invokevirtual #8                  // Method getRealms:()Ljava/util/Collection;
       8: invokeinterface #10,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      13: astore_3
      14: aload_3
      15: invokeinterface #11,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      20: ifeq          65
      23: aload_3
      24: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      29: checkcast     #13                 // class org/apache/shiro/realm/Realm
      32: astore        4
      34: aload         4
      36: instanceof    #24                 // class org/apache/shiro/authz/Authorizer
      39: ifne          45
      42: goto          14
      45: aload         4
      47: checkcast     #24                 // class org/apache/shiro/authz/Authorizer
      50: aload_1
      51: aload_2
      52: invokeinterface #26,  3           // InterfaceMethod org/apache/shiro/authz/Authorizer.isPermitted:(Lorg/apache/shiro/subject/PrincipalCollection;Lorg/apache/shiro/authz/Permission;)Z
      57: ifeq          62
      60: iconst_1
      61: ireturn
      62: goto          14
      65: iconst_0
      66: ireturn

  public boolean[] isPermitted(org.apache.shiro.subject.PrincipalCollection, java.lang.String...);
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method assertRealmsConfigured:()V
       4: aload_2
       5: ifnull        49
       8: aload_2
       9: arraylength
      10: ifle          49
      13: aload_2
      14: arraylength
      15: newarray       boolean
      17: astore_3
      18: iconst_0
      19: istore        4
      21: iload         4
      23: aload_2
      24: arraylength
      25: if_icmpge     47
      28: aload_3
      29: iload         4
      31: aload_0
      32: aload_1
      33: aload_2
      34: iload         4
      36: aaload
      37: invokevirtual #27                 // Method isPermitted:(Lorg/apache/shiro/subject/PrincipalCollection;Ljava/lang/String;)Z
      40: bastore
      41: iinc          4, 1
      44: goto          21
      47: aload_3
      48: areturn
      49: iconst_0
      50: newarray       boolean
      52: areturn

  public boolean[] isPermitted(org.apache.shiro.subject.PrincipalCollection, java.util.List<org.apache.shiro.authz.Permission>);
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method assertRealmsConfigured:()V
       4: aload_2
       5: ifnull        78
       8: aload_2
       9: invokeinterface #28,  1           // InterfaceMethod java/util/List.isEmpty:()Z
      14: ifne          78
      17: aload_2
      18: invokeinterface #29,  1           // InterfaceMethod java/util/List.size:()I
      23: newarray       boolean
      25: astore_3
      26: iconst_0
      27: istore        4
      29: aload_2
      30: invokeinterface #30,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      35: astore        5
      37: aload         5
      39: invokeinterface #11,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      44: ifeq          76
      47: aload         5
      49: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      54: checkcast     #31                 // class org/apache/shiro/authz/Permission
      57: astore        6
      59: aload_3
      60: iload         4
      62: iinc          4, 1
      65: aload_0
      66: aload_1
      67: aload         6
      69: invokevirtual #32                 // Method isPermitted:(Lorg/apache/shiro/subject/PrincipalCollection;Lorg/apache/shiro/authz/Permission;)Z
      72: bastore
      73: goto          37
      76: aload_3
      77: areturn
      78: iconst_0
      79: newarray       boolean
      81: areturn

  public boolean isPermittedAll(org.apache.shiro.subject.PrincipalCollection, java.lang.String...);
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method assertRealmsConfigured:()V
       4: aload_2
       5: ifnull        53
       8: aload_2
       9: arraylength
      10: ifle          53
      13: aload_2
      14: astore_3
      15: aload_3
      16: arraylength
      17: istore        4
      19: iconst_0
      20: istore        5
      22: iload         5
      24: iload         4
      26: if_icmpge     53
      29: aload_3
      30: iload         5
      32: aaload
      33: astore        6
      35: aload_0
      36: aload_1
      37: aload         6
      39: invokevirtual #27                 // Method isPermitted:(Lorg/apache/shiro/subject/PrincipalCollection;Ljava/lang/String;)Z
      42: ifne          47
      45: iconst_0
      46: ireturn
      47: iinc          5, 1
      50: goto          22
      53: iconst_1
      54: ireturn

  public boolean isPermittedAll(org.apache.shiro.subject.PrincipalCollection, java.util.Collection<org.apache.shiro.authz.Permission>);
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method assertRealmsConfigured:()V
       4: aload_2
       5: ifnull        59
       8: aload_2
       9: invokeinterface #9,  1            // InterfaceMethod java/util/Collection.isEmpty:()Z
      14: ifne          59
      17: aload_2
      18: invokeinterface #10,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      23: astore_3
      24: aload_3
      25: invokeinterface #11,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      30: ifeq          59
      33: aload_3
      34: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      39: checkcast     #31                 // class org/apache/shiro/authz/Permission
      42: astore        4
      44: aload_0
      45: aload_1
      46: aload         4
      48: invokevirtual #32                 // Method isPermitted:(Lorg/apache/shiro/subject/PrincipalCollection;Lorg/apache/shiro/authz/Permission;)Z
      51: ifne          56
      54: iconst_0
      55: ireturn
      56: goto          24
      59: iconst_1
      60: ireturn

  public void checkPermission(org.apache.shiro.subject.PrincipalCollection, java.lang.String) throws org.apache.shiro.authz.AuthorizationException;
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method assertRealmsConfigured:()V
       4: aload_0
       5: aload_1
       6: aload_2
       7: invokevirtual #27                 // Method isPermitted:(Lorg/apache/shiro/subject/PrincipalCollection;Ljava/lang/String;)Z
      10: ifne          45
      13: new           #33                 // class org/apache/shiro/authz/UnauthorizedException
      16: dup
      17: new           #34                 // class java/lang/StringBuilder
      20: dup
      21: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
      24: ldc           #36                 // String Subject does not have permission [
      26: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: aload_2
      30: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: ldc           #38                 // String ]
      35: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      38: invokevirtual #39                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      41: invokespecial #40                 // Method org/apache/shiro/authz/UnauthorizedException."<init>":(Ljava/lang/String;)V
      44: athrow
      45: return

  public void checkPermission(org.apache.shiro.subject.PrincipalCollection, org.apache.shiro.authz.Permission) throws org.apache.shiro.authz.AuthorizationException;
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method assertRealmsConfigured:()V
       4: aload_0
       5: aload_1
       6: aload_2
       7: invokevirtual #32                 // Method isPermitted:(Lorg/apache/shiro/subject/PrincipalCollection;Lorg/apache/shiro/authz/Permission;)Z
      10: ifne          45
      13: new           #33                 // class org/apache/shiro/authz/UnauthorizedException
      16: dup
      17: new           #34                 // class java/lang/StringBuilder
      20: dup
      21: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
      24: ldc           #36                 // String Subject does not have permission [
      26: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: aload_2
      30: invokevirtual #41                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      33: ldc           #38                 // String ]
      35: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      38: invokevirtual #39                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      41: invokespecial #40                 // Method org/apache/shiro/authz/UnauthorizedException."<init>":(Ljava/lang/String;)V
      44: athrow
      45: return

  public void checkPermissions(org.apache.shiro.subject.PrincipalCollection, java.lang.String...) throws org.apache.shiro.authz.AuthorizationException;
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method assertRealmsConfigured:()V
       4: aload_2
       5: ifnull        48
       8: aload_2
       9: arraylength
      10: ifle          48
      13: aload_2
      14: astore_3
      15: aload_3
      16: arraylength
      17: istore        4
      19: iconst_0
      20: istore        5
      22: iload         5
      24: iload         4
      26: if_icmpge     48
      29: aload_3
      30: iload         5
      32: aaload
      33: astore        6
      35: aload_0
      36: aload_1
      37: aload         6
      39: invokevirtual #42                 // Method checkPermission:(Lorg/apache/shiro/subject/PrincipalCollection;Ljava/lang/String;)V
      42: iinc          5, 1
      45: goto          22
      48: return

  public void checkPermissions(org.apache.shiro.subject.PrincipalCollection, java.util.Collection<org.apache.shiro.authz.Permission>) throws org.apache.shiro.authz.AuthorizationException;
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method assertRealmsConfigured:()V
       4: aload_2
       5: ifnull        45
       8: aload_2
       9: invokeinterface #10,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      14: astore_3
      15: aload_3
      16: invokeinterface #11,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          45
      24: aload_3
      25: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: checkcast     #31                 // class org/apache/shiro/authz/Permission
      33: astore        4
      35: aload_0
      36: aload_1
      37: aload         4
      39: invokevirtual #43                 // Method checkPermission:(Lorg/apache/shiro/subject/PrincipalCollection;Lorg/apache/shiro/authz/Permission;)V
      42: goto          15
      45: return

  public boolean hasRole(org.apache.shiro.subject.PrincipalCollection, java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method assertRealmsConfigured:()V
       4: aload_0
       5: invokevirtual #8                  // Method getRealms:()Ljava/util/Collection;
       8: invokeinterface #10,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      13: astore_3
      14: aload_3
      15: invokeinterface #11,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      20: ifeq          65
      23: aload_3
      24: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      29: checkcast     #13                 // class org/apache/shiro/realm/Realm
      32: astore        4
      34: aload         4
      36: instanceof    #24                 // class org/apache/shiro/authz/Authorizer
      39: ifne          45
      42: goto          14
      45: aload         4
      47: checkcast     #24                 // class org/apache/shiro/authz/Authorizer
      50: aload_1
      51: aload_2
      52: invokeinterface #44,  3           // InterfaceMethod org/apache/shiro/authz/Authorizer.hasRole:(Lorg/apache/shiro/subject/PrincipalCollection;Ljava/lang/String;)Z
      57: ifeq          62
      60: iconst_1
      61: ireturn
      62: goto          14
      65: iconst_0
      66: ireturn

  public boolean[] hasRoles(org.apache.shiro.subject.PrincipalCollection, java.util.List<java.lang.String>);
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method assertRealmsConfigured:()V
       4: aload_2
       5: ifnull        78
       8: aload_2
       9: invokeinterface #28,  1           // InterfaceMethod java/util/List.isEmpty:()Z
      14: ifne          78
      17: aload_2
      18: invokeinterface #29,  1           // InterfaceMethod java/util/List.size:()I
      23: newarray       boolean
      25: astore_3
      26: iconst_0
      27: istore        4
      29: aload_2
      30: invokeinterface #30,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      35: astore        5
      37: aload         5
      39: invokeinterface #11,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      44: ifeq          76
      47: aload         5
      49: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      54: checkcast     #45                 // class java/lang/String
      57: astore        6
      59: aload_3
      60: iload         4
      62: iinc          4, 1
      65: aload_0
      66: aload_1
      67: aload         6
      69: invokevirtual #46                 // Method hasRole:(Lorg/apache/shiro/subject/PrincipalCollection;Ljava/lang/String;)Z
      72: bastore
      73: goto          37
      76: aload_3
      77: areturn
      78: iconst_0
      79: newarray       boolean
      81: areturn

  public boolean hasAllRoles(org.apache.shiro.subject.PrincipalCollection, java.util.Collection<java.lang.String>);
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method assertRealmsConfigured:()V
       4: aload_2
       5: invokeinterface #10,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      10: astore_3
      11: aload_3
      12: invokeinterface #11,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      17: ifeq          46
      20: aload_3
      21: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      26: checkcast     #45                 // class java/lang/String
      29: astore        4
      31: aload_0
      32: aload_1
      33: aload         4
      35: invokevirtual #46                 // Method hasRole:(Lorg/apache/shiro/subject/PrincipalCollection;Ljava/lang/String;)Z
      38: ifne          43
      41: iconst_0
      42: ireturn
      43: goto          11
      46: iconst_1
      47: ireturn

  public void checkRole(org.apache.shiro.subject.PrincipalCollection, java.lang.String) throws org.apache.shiro.authz.AuthorizationException;
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method assertRealmsConfigured:()V
       4: aload_0
       5: aload_1
       6: aload_2
       7: invokevirtual #46                 // Method hasRole:(Lorg/apache/shiro/subject/PrincipalCollection;Ljava/lang/String;)Z
      10: ifne          45
      13: new           #33                 // class org/apache/shiro/authz/UnauthorizedException
      16: dup
      17: new           #34                 // class java/lang/StringBuilder
      20: dup
      21: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
      24: ldc           #47                 // String Subject does not have role [
      26: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: aload_2
      30: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: ldc           #38                 // String ]
      35: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      38: invokevirtual #39                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      41: invokespecial #40                 // Method org/apache/shiro/authz/UnauthorizedException."<init>":(Ljava/lang/String;)V
      44: athrow
      45: return

  public void checkRoles(org.apache.shiro.subject.PrincipalCollection, java.util.Collection<java.lang.String>) throws org.apache.shiro.authz.AuthorizationException;
    Code:
       0: aload_2
       1: ifnull        36
       4: aload_2
       5: invokeinterface #9,  1            // InterfaceMethod java/util/Collection.isEmpty:()Z
      10: ifne          36
      13: aload_0
      14: aload_1
      15: aload_2
      16: aload_2
      17: invokeinterface #48,  1           // InterfaceMethod java/util/Collection.size:()I
      22: anewarray     #45                 // class java/lang/String
      25: invokeinterface #49,  2           // InterfaceMethod java/util/Collection.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      30: checkcast     #50                 // class "[Ljava/lang/String;"
      33: invokevirtual #51                 // Method checkRoles:(Lorg/apache/shiro/subject/PrincipalCollection;[Ljava/lang/String;)V
      36: return

  public void checkRoles(org.apache.shiro.subject.PrincipalCollection, java.lang.String...) throws org.apache.shiro.authz.AuthorizationException;
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method assertRealmsConfigured:()V
       4: aload_2
       5: ifnull        43
       8: aload_2
       9: astore_3
      10: aload_3
      11: arraylength
      12: istore        4
      14: iconst_0
      15: istore        5
      17: iload         5
      19: iload         4
      21: if_icmpge     43
      24: aload_3
      25: iload         5
      27: aaload
      28: astore        6
      30: aload_0
      31: aload_1
      32: aload         6
      34: invokevirtual #52                 // Method checkRole:(Lorg/apache/shiro/subject/PrincipalCollection;Ljava/lang/String;)V
      37: iinc          5, 1
      40: goto          17
      43: return
}
