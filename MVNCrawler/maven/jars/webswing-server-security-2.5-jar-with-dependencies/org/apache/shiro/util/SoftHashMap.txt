Compiled from "SoftHashMap.java"
public class org.apache.shiro.util.SoftHashMap<K, V> implements java.util.Map<K, V> {
  private static final int DEFAULT_RETENTION_SIZE;

  private final java.util.Map<K, org.apache.shiro.util.SoftHashMap$SoftValue<V, K>> map;

  private final int RETENTION_SIZE;

  private final java.util.Queue<V> strongReferences;

  private final java.util.concurrent.locks.ReentrantLock strongReferencesLock;

  private final java.lang.ref.ReferenceQueue<? super V> queue;

  public org.apache.shiro.util.SoftHashMap();
    Code:
       0: aload_0
       1: bipush        100
       3: invokespecial #1                  // Method "<init>":(I)V
       6: return

  public org.apache.shiro.util.SoftHashMap(int);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: iload_1
       7: invokestatic  #3                  // Method java/lang/Math.max:(II)I
      10: putfield      #4                  // Field RETENTION_SIZE:I
      13: aload_0
      14: new           #5                  // class java/lang/ref/ReferenceQueue
      17: dup
      18: invokespecial #6                  // Method java/lang/ref/ReferenceQueue."<init>":()V
      21: putfield      #7                  // Field queue:Ljava/lang/ref/ReferenceQueue;
      24: aload_0
      25: new           #8                  // class java/util/concurrent/locks/ReentrantLock
      28: dup
      29: invokespecial #9                  // Method java/util/concurrent/locks/ReentrantLock."<init>":()V
      32: putfield      #10                 // Field strongReferencesLock:Ljava/util/concurrent/locks/ReentrantLock;
      35: aload_0
      36: new           #11                 // class java/util/concurrent/ConcurrentHashMap
      39: dup
      40: invokespecial #12                 // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      43: putfield      #13                 // Field map:Ljava/util/Map;
      46: aload_0
      47: new           #14                 // class java/util/concurrent/ConcurrentLinkedQueue
      50: dup
      51: invokespecial #15                 // Method java/util/concurrent/ConcurrentLinkedQueue."<init>":()V
      54: putfield      #16                 // Field strongReferences:Ljava/util/Queue;
      57: return

  public org.apache.shiro.util.SoftHashMap(java.util.Map<K, V>);
    Code:
       0: aload_0
       1: bipush        100
       3: invokespecial #1                  // Method "<init>":(I)V
       6: aload_0
       7: aload_1
       8: invokevirtual #17                 // Method putAll:(Ljava/util/Map;)V
      11: return

  public org.apache.shiro.util.SoftHashMap(java.util.Map<K, V>, int);
    Code:
       0: aload_0
       1: iload_2
       2: invokespecial #1                  // Method "<init>":(I)V
       5: aload_0
       6: aload_1
       7: invokevirtual #17                 // Method putAll:(Ljava/util/Map;)V
      10: return

  public V get(java.lang.Object);
    Code:
       0: aload_0
       1: invokespecial #18                 // Method processQueue:()V
       4: aconst_null
       5: astore_2
       6: aload_0
       7: getfield      #13                 // Field map:Ljava/util/Map;
      10: aload_1
      11: invokeinterface #19,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      16: checkcast     #20                 // class org/apache/shiro/util/SoftHashMap$SoftValue
      19: astore_3
      20: aload_3
      21: ifnull        52
      24: aload_3
      25: invokevirtual #21                 // Method org/apache/shiro/util/SoftHashMap$SoftValue.get:()Ljava/lang/Object;
      28: astore_2
      29: aload_2
      30: ifnonnull     47
      33: aload_0
      34: getfield      #13                 // Field map:Ljava/util/Map;
      37: aload_1
      38: invokeinterface #22,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      43: pop
      44: goto          52
      47: aload_0
      48: aload_2
      49: invokespecial #23                 // Method addToStrongReferences:(Ljava/lang/Object;)V
      52: aload_2
      53: areturn

  private void addToStrongReferences(V);
    Code:
       0: aload_0
       1: getfield      #10                 // Field strongReferencesLock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.lock:()V
       7: aload_0
       8: getfield      #16                 // Field strongReferences:Ljava/util/Queue;
      11: aload_1
      12: invokeinterface #25,  2           // InterfaceMethod java/util/Queue.add:(Ljava/lang/Object;)Z
      17: pop
      18: aload_0
      19: invokespecial #26                 // Method trimStrongReferencesIfNecessary:()V
      22: aload_0
      23: getfield      #10                 // Field strongReferencesLock:Ljava/util/concurrent/locks/ReentrantLock;
      26: invokevirtual #27                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      29: goto          42
      32: astore_2
      33: aload_0
      34: getfield      #10                 // Field strongReferencesLock:Ljava/util/concurrent/locks/ReentrantLock;
      37: invokevirtual #27                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      40: aload_2
      41: athrow
      42: return
    Exception table:
       from    to  target type
           7    22    32   any
          32    33    32   any

  private void trimStrongReferencesIfNecessary();
    Code:
       0: aload_0
       1: getfield      #16                 // Field strongReferences:Ljava/util/Queue;
       4: invokeinterface #28,  1           // InterfaceMethod java/util/Queue.size:()I
       9: aload_0
      10: getfield      #4                  // Field RETENTION_SIZE:I
      13: if_icmple     29
      16: aload_0
      17: getfield      #16                 // Field strongReferences:Ljava/util/Queue;
      20: invokeinterface #29,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
      25: pop
      26: goto          0
      29: return

  private void processQueue();
    Code:
       0: aload_0
       1: getfield      #7                  // Field queue:Ljava/lang/ref/ReferenceQueue;
       4: invokevirtual #30                 // Method java/lang/ref/ReferenceQueue.poll:()Ljava/lang/ref/Reference;
       7: checkcast     #20                 // class org/apache/shiro/util/SoftHashMap$SoftValue
      10: dup
      11: astore_1
      12: ifnull        32
      15: aload_0
      16: getfield      #13                 // Field map:Ljava/util/Map;
      19: aload_1
      20: invokestatic  #31                 // Method org/apache/shiro/util/SoftHashMap$SoftValue.access$000:(Lorg/apache/shiro/util/SoftHashMap$SoftValue;)Ljava/lang/Object;
      23: invokeinterface #22,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      28: pop
      29: goto          0
      32: return

  public boolean isEmpty();
    Code:
       0: aload_0
       1: invokespecial #18                 // Method processQueue:()V
       4: aload_0
       5: getfield      #13                 // Field map:Ljava/util/Map;
       8: invokeinterface #32,  1           // InterfaceMethod java/util/Map.isEmpty:()Z
      13: ireturn

  public boolean containsKey(java.lang.Object);
    Code:
       0: aload_0
       1: invokespecial #18                 // Method processQueue:()V
       4: aload_0
       5: getfield      #13                 // Field map:Ljava/util/Map;
       8: aload_1
       9: invokeinterface #33,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      14: ireturn

  public boolean containsValue(java.lang.Object);
    Code:
       0: aload_0
       1: invokespecial #18                 // Method processQueue:()V
       4: aload_0
       5: invokevirtual #34                 // Method values:()Ljava/util/Collection;
       8: astore_2
       9: aload_2
      10: ifnull        27
      13: aload_2
      14: aload_1
      15: invokeinterface #35,  2           // InterfaceMethod java/util/Collection.contains:(Ljava/lang/Object;)Z
      20: ifeq          27
      23: iconst_1
      24: goto          28
      27: iconst_0
      28: ireturn

  public void putAll(java.util.Map<? extends K, ? extends V>);
    Code:
       0: aload_1
       1: ifnull        13
       4: aload_1
       5: invokeinterface #32,  1           // InterfaceMethod java/util/Map.isEmpty:()Z
      10: ifeq          18
      13: aload_0
      14: invokespecial #18                 // Method processQueue:()V
      17: return
      18: aload_1
      19: invokeinterface #36,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      24: invokeinterface #37,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      29: astore_2
      30: aload_2
      31: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      36: ifeq          69
      39: aload_2
      40: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      45: checkcast     #40                 // class java/util/Map$Entry
      48: astore_3
      49: aload_0
      50: aload_3
      51: invokeinterface #41,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      56: aload_3
      57: invokeinterface #42,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      62: invokevirtual #43                 // Method put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      65: pop
      66: goto          30
      69: return

  public java.util.Set<K> keySet();
    Code:
       0: aload_0
       1: invokespecial #18                 // Method processQueue:()V
       4: aload_0
       5: getfield      #13                 // Field map:Ljava/util/Map;
       8: invokeinterface #44,  1           // InterfaceMethod java/util/Map.keySet:()Ljava/util/Set;
      13: areturn

  public java.util.Collection<V> values();
    Code:
       0: aload_0
       1: invokespecial #18                 // Method processQueue:()V
       4: aload_0
       5: getfield      #13                 // Field map:Ljava/util/Map;
       8: invokeinterface #44,  1           // InterfaceMethod java/util/Map.keySet:()Ljava/util/Set;
      13: astore_1
      14: aload_1
      15: invokeinterface #45,  1           // InterfaceMethod java/util/Collection.isEmpty:()Z
      20: ifeq          27
      23: getstatic     #46                 // Field java/util/Collections.EMPTY_SET:Ljava/util/Set;
      26: areturn
      27: new           #47                 // class java/util/ArrayList
      30: dup
      31: aload_1
      32: invokeinterface #48,  1           // InterfaceMethod java/util/Collection.size:()I
      37: invokespecial #49                 // Method java/util/ArrayList."<init>":(I)V
      40: astore_2
      41: aload_1
      42: invokeinterface #50,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      47: astore_3
      48: aload_3
      49: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      54: ifeq          90
      57: aload_3
      58: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      63: astore        4
      65: aload_0
      66: aload         4
      68: invokevirtual #51                 // Method get:(Ljava/lang/Object;)Ljava/lang/Object;
      71: astore        5
      73: aload         5
      75: ifnull        87
      78: aload_2
      79: aload         5
      81: invokeinterface #52,  2           // InterfaceMethod java/util/Collection.add:(Ljava/lang/Object;)Z
      86: pop
      87: goto          48
      90: aload_2
      91: areturn

  public V put(K, V);
    Code:
       0: aload_0
       1: invokespecial #18                 // Method processQueue:()V
       4: new           #20                 // class org/apache/shiro/util/SoftHashMap$SoftValue
       7: dup
       8: aload_2
       9: aload_1
      10: aload_0
      11: getfield      #7                  // Field queue:Ljava/lang/ref/ReferenceQueue;
      14: aconst_null
      15: invokespecial #53                 // Method org/apache/shiro/util/SoftHashMap$SoftValue."<init>":(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;Lorg/apache/shiro/util/SoftHashMap$1;)V
      18: astore_3
      19: aload_0
      20: getfield      #13                 // Field map:Ljava/util/Map;
      23: aload_1
      24: aload_3
      25: invokeinterface #54,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      30: checkcast     #20                 // class org/apache/shiro/util/SoftHashMap$SoftValue
      33: astore        4
      35: aload_0
      36: aload_2
      37: invokespecial #23                 // Method addToStrongReferences:(Ljava/lang/Object;)V
      40: aload         4
      42: ifnull        53
      45: aload         4
      47: invokevirtual #21                 // Method org/apache/shiro/util/SoftHashMap$SoftValue.get:()Ljava/lang/Object;
      50: goto          54
      53: aconst_null
      54: areturn

  public V remove(java.lang.Object);
    Code:
       0: aload_0
       1: invokespecial #18                 // Method processQueue:()V
       4: aload_0
       5: getfield      #13                 // Field map:Ljava/util/Map;
       8: aload_1
       9: invokeinterface #22,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      14: checkcast     #20                 // class org/apache/shiro/util/SoftHashMap$SoftValue
      17: astore_2
      18: aload_2
      19: ifnull        29
      22: aload_2
      23: invokevirtual #21                 // Method org/apache/shiro/util/SoftHashMap$SoftValue.get:()Ljava/lang/Object;
      26: goto          30
      29: aconst_null
      30: areturn

  public void clear();
    Code:
       0: aload_0
       1: getfield      #10                 // Field strongReferencesLock:Ljava/util/concurrent/locks/ReentrantLock;
       4: invokevirtual #24                 // Method java/util/concurrent/locks/ReentrantLock.lock:()V
       7: aload_0
       8: getfield      #16                 // Field strongReferences:Ljava/util/Queue;
      11: invokeinterface #55,  1           // InterfaceMethod java/util/Queue.clear:()V
      16: aload_0
      17: getfield      #10                 // Field strongReferencesLock:Ljava/util/concurrent/locks/ReentrantLock;
      20: invokevirtual #27                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      23: goto          36
      26: astore_1
      27: aload_0
      28: getfield      #10                 // Field strongReferencesLock:Ljava/util/concurrent/locks/ReentrantLock;
      31: invokevirtual #27                 // Method java/util/concurrent/locks/ReentrantLock.unlock:()V
      34: aload_1
      35: athrow
      36: aload_0
      37: invokespecial #18                 // Method processQueue:()V
      40: aload_0
      41: getfield      #13                 // Field map:Ljava/util/Map;
      44: invokeinterface #56,  1           // InterfaceMethod java/util/Map.clear:()V
      49: return
    Exception table:
       from    to  target type
           7    16    26   any
          26    27    26   any

  public int size();
    Code:
       0: aload_0
       1: invokespecial #18                 // Method processQueue:()V
       4: aload_0
       5: getfield      #13                 // Field map:Ljava/util/Map;
       8: invokeinterface #57,  1           // InterfaceMethod java/util/Map.size:()I
      13: ireturn

  public java.util.Set<java.util.Map$Entry<K, V>> entrySet();
    Code:
       0: aload_0
       1: invokespecial #18                 // Method processQueue:()V
       4: aload_0
       5: getfield      #13                 // Field map:Ljava/util/Map;
       8: invokeinterface #44,  1           // InterfaceMethod java/util/Map.keySet:()Ljava/util/Set;
      13: astore_1
      14: aload_1
      15: invokeinterface #45,  1           // InterfaceMethod java/util/Collection.isEmpty:()Z
      20: ifeq          27
      23: getstatic     #46                 // Field java/util/Collections.EMPTY_SET:Ljava/util/Set;
      26: areturn
      27: new           #58                 // class java/util/HashMap
      30: dup
      31: aload_1
      32: invokeinterface #48,  1           // InterfaceMethod java/util/Collection.size:()I
      37: invokespecial #59                 // Method java/util/HashMap."<init>":(I)V
      40: astore_2
      41: aload_1
      42: invokeinterface #50,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      47: astore_3
      48: aload_3
      49: invokeinterface #38,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      54: ifeq          92
      57: aload_3
      58: invokeinterface #39,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      63: astore        4
      65: aload_0
      66: aload         4
      68: invokevirtual #51                 // Method get:(Ljava/lang/Object;)Ljava/lang/Object;
      71: astore        5
      73: aload         5
      75: ifnull        89
      78: aload_2
      79: aload         4
      81: aload         5
      83: invokeinterface #54,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      88: pop
      89: goto          48
      92: aload_2
      93: invokeinterface #36,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      98: areturn
}
