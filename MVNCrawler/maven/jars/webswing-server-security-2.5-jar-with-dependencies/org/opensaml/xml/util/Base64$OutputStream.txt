Compiled from "Base64.java"
public class org.opensaml.xml.util.Base64$OutputStream extends java.io.FilterOutputStream {
  private boolean encode;

  private int position;

  private byte[] buffer;

  private int bufferLength;

  private int lineLength;

  private boolean breakLines;

  private byte[] b4;

  private boolean suspendEncoding;

  public org.opensaml.xml.util.Base64$OutputStream(java.io.OutputStream);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_1
       3: invokespecial #1                  // Method "<init>":(Ljava/io/OutputStream;I)V
       6: return

  public org.opensaml.xml.util.Base64$OutputStream(java.io.OutputStream, int);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #2                  // Method java/io/FilterOutputStream."<init>":(Ljava/io/OutputStream;)V
       5: aload_0
       6: iload_2
       7: bipush        8
       9: iand
      10: bipush        8
      12: if_icmpeq     19
      15: iconst_1
      16: goto          20
      19: iconst_0
      20: putfield      #3                  // Field breakLines:Z
      23: aload_0
      24: iload_2
      25: iconst_1
      26: iand
      27: iconst_1
      28: if_icmpne     35
      31: iconst_1
      32: goto          36
      35: iconst_0
      36: putfield      #4                  // Field encode:Z
      39: aload_0
      40: aload_0
      41: getfield      #4                  // Field encode:Z
      44: ifeq          51
      47: iconst_3
      48: goto          52
      51: iconst_4
      52: putfield      #5                  // Field bufferLength:I
      55: aload_0
      56: aload_0
      57: getfield      #5                  // Field bufferLength:I
      60: newarray       byte
      62: putfield      #6                  // Field buffer:[B
      65: aload_0
      66: iconst_0
      67: putfield      #7                  // Field position:I
      70: aload_0
      71: iconst_0
      72: putfield      #8                  // Field lineLength:I
      75: aload_0
      76: iconst_0
      77: putfield      #9                  // Field suspendEncoding:Z
      80: aload_0
      81: iconst_4
      82: newarray       byte
      84: putfield      #10                 // Field b4:[B
      87: return

  public void write(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #9                  // Field suspendEncoding:Z
       4: ifeq          16
       7: aload_0
       8: getfield      #11                 // Field java/io/FilterOutputStream.out:Ljava/io/OutputStream;
      11: iload_1
      12: invokevirtual #12                 // Method java/io/OutputStream.write:(I)V
      15: return
      16: aload_0
      17: getfield      #4                  // Field encode:Z
      20: ifeq          122
      23: aload_0
      24: getfield      #6                  // Field buffer:[B
      27: aload_0
      28: dup
      29: getfield      #7                  // Field position:I
      32: dup_x1
      33: iconst_1
      34: iadd
      35: putfield      #7                  // Field position:I
      38: iload_1
      39: i2b
      40: bastore
      41: aload_0
      42: getfield      #7                  // Field position:I
      45: aload_0
      46: getfield      #5                  // Field bufferLength:I
      49: if_icmplt     222
      52: aload_0
      53: getfield      #13                 // Field out:Ljava/io/OutputStream;
      56: aload_0
      57: getfield      #10                 // Field b4:[B
      60: aload_0
      61: getfield      #6                  // Field buffer:[B
      64: aload_0
      65: getfield      #5                  // Field bufferLength:I
      68: invokestatic  #14                 // Method org/opensaml/xml/util/Base64.access$300:([B[BI)[B
      71: invokevirtual #15                 // Method java/io/OutputStream.write:([B)V
      74: aload_0
      75: dup
      76: getfield      #8                  // Field lineLength:I
      79: iconst_4
      80: iadd
      81: putfield      #8                  // Field lineLength:I
      84: aload_0
      85: getfield      #3                  // Field breakLines:Z
      88: ifeq          114
      91: aload_0
      92: getfield      #8                  // Field lineLength:I
      95: bipush        76
      97: if_icmplt     114
     100: aload_0
     101: getfield      #13                 // Field out:Ljava/io/OutputStream;
     104: bipush        10
     106: invokevirtual #12                 // Method java/io/OutputStream.write:(I)V
     109: aload_0
     110: iconst_0
     111: putfield      #8                  // Field lineLength:I
     114: aload_0
     115: iconst_0
     116: putfield      #7                  // Field position:I
     119: goto          222
     122: invokestatic  #16                 // Method org/opensaml/xml/util/Base64.access$100:()[B
     125: iload_1
     126: bipush        127
     128: iand
     129: baload
     130: bipush        -5
     132: if_icmple     199
     135: aload_0
     136: getfield      #6                  // Field buffer:[B
     139: aload_0
     140: dup
     141: getfield      #7                  // Field position:I
     144: dup_x1
     145: iconst_1
     146: iadd
     147: putfield      #7                  // Field position:I
     150: iload_1
     151: i2b
     152: bastore
     153: aload_0
     154: getfield      #7                  // Field position:I
     157: aload_0
     158: getfield      #5                  // Field bufferLength:I
     161: if_icmplt     222
     164: aload_0
     165: getfield      #6                  // Field buffer:[B
     168: iconst_0
     169: aload_0
     170: getfield      #10                 // Field b4:[B
     173: iconst_0
     174: invokestatic  #17                 // Method org/opensaml/xml/util/Base64.access$200:([BI[BI)I
     177: istore_2
     178: aload_0
     179: getfield      #13                 // Field out:Ljava/io/OutputStream;
     182: aload_0
     183: getfield      #10                 // Field b4:[B
     186: iconst_0
     187: iload_2
     188: invokevirtual #18                 // Method java/io/OutputStream.write:([BII)V
     191: aload_0
     192: iconst_0
     193: putfield      #7                  // Field position:I
     196: goto          222
     199: invokestatic  #16                 // Method org/opensaml/xml/util/Base64.access$100:()[B
     202: iload_1
     203: bipush        127
     205: iand
     206: baload
     207: bipush        -5
     209: if_icmpeq     222
     212: new           #19                 // class java/io/IOException
     215: dup
     216: ldc           #20                 // String Invalid character in Base64 data.
     218: invokespecial #21                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     221: athrow
     222: return

  public void write(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #9                  // Field suspendEncoding:Z
       4: ifeq          18
       7: aload_0
       8: getfield      #11                 // Field java/io/FilterOutputStream.out:Ljava/io/OutputStream;
      11: aload_1
      12: iload_2
      13: iload_3
      14: invokevirtual #18                 // Method java/io/OutputStream.write:([BII)V
      17: return
      18: iconst_0
      19: istore        4
      21: iload         4
      23: iload_3
      24: if_icmpge     43
      27: aload_0
      28: aload_1
      29: iload_2
      30: iload         4
      32: iadd
      33: baload
      34: invokevirtual #22                 // Method write:(I)V
      37: iinc          4, 1
      40: goto          21
      43: return

  public void flushBase64() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #7                  // Field position:I
       4: ifle          54
       7: aload_0
       8: getfield      #4                  // Field encode:Z
      11: ifeq          44
      14: aload_0
      15: getfield      #13                 // Field out:Ljava/io/OutputStream;
      18: aload_0
      19: getfield      #10                 // Field b4:[B
      22: aload_0
      23: getfield      #6                  // Field buffer:[B
      26: aload_0
      27: getfield      #7                  // Field position:I
      30: invokestatic  #14                 // Method org/opensaml/xml/util/Base64.access$300:([B[BI)[B
      33: invokevirtual #15                 // Method java/io/OutputStream.write:([B)V
      36: aload_0
      37: iconst_0
      38: putfield      #7                  // Field position:I
      41: goto          54
      44: new           #19                 // class java/io/IOException
      47: dup
      48: ldc           #23                 // String Base64 input not properly padded.
      50: invokespecial #21                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      53: athrow
      54: return

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #24                 // Method flushBase64:()V
       4: aload_0
       5: invokespecial #25                 // Method java/io/FilterOutputStream.close:()V
       8: aload_0
       9: aconst_null
      10: putfield      #6                  // Field buffer:[B
      13: aload_0
      14: aconst_null
      15: putfield      #13                 // Field out:Ljava/io/OutputStream;
      18: return

  public void suspendEncoding() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #24                 // Method flushBase64:()V
       4: aload_0
       5: iconst_1
       6: putfield      #9                  // Field suspendEncoding:Z
       9: return

  public void resumeEncoding();
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #9                  // Field suspendEncoding:Z
       5: return
}
