Compiled from "AbstractWrappedSingletonFactory.java"
public abstract class org.opensaml.xml.util.AbstractWrappedSingletonFactory<Input, Output> extends org.opensaml.xml.util.AbstractSingletonFactory<Input, Output> {
  private final org.slf4j.Logger log;

  private java.util.WeakHashMap<Input, java.lang.ref.WeakReference<Output>> map;

  private java.util.HashSet<Output> outputSet;

  private boolean explicitRelease;

  public org.opensaml.xml.util.AbstractWrappedSingletonFactory();
    Code:
       0: aload_0
       1: iconst_0
       2: invokespecial #1                  // Method "<init>":(Z)V
       5: return

  public org.opensaml.xml.util.AbstractWrappedSingletonFactory(boolean);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method org/opensaml/xml/util/AbstractSingletonFactory."<init>":()V
       4: aload_0
       5: ldc_w         #3                  // class org/opensaml/xml/util/AbstractWrappedSingletonFactory
       8: invokestatic  #4                  // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
      11: putfield      #5                  // Field log:Lorg/slf4j/Logger;
      14: aload_0
      15: new           #6                  // class java/util/WeakHashMap
      18: dup
      19: invokespecial #7                  // Method java/util/WeakHashMap."<init>":()V
      22: putfield      #8                  // Field map:Ljava/util/WeakHashMap;
      25: aload_0
      26: iload_1
      27: putfield      #9                  // Field explicitRelease:Z
      30: aload_0
      31: new           #10                 // class java/util/HashSet
      34: dup
      35: invokespecial #11                 // Method java/util/HashSet."<init>":()V
      38: putfield      #12                 // Field outputSet:Ljava/util/HashSet;
      41: return

  public synchronized Output getInstance(Input);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #13                 // Method org/opensaml/xml/util/AbstractSingletonFactory.getInstance:(Ljava/lang/Object;)Ljava/lang/Object;
       5: astore_2
       6: aload_0
       7: getfield      #9                  // Field explicitRelease:Z
      10: ifeq          33
      13: aload_2
      14: ifnull        33
      17: aload_0
      18: getfield      #5                  // Field log:Lorg/slf4j/Logger;
      21: ldc           #14                 // String Explicit release was indicated, registering output instance to inhibit garbage collection
      23: invokeinterface #15,  2           // InterfaceMethod org/slf4j/Logger.trace:(Ljava/lang/String;)V
      28: aload_0
      29: aload_2
      30: invokevirtual #16                 // Method register:(Ljava/lang/Object;)V
      33: aload_2
      34: areturn

  public boolean isRequireExplicitRelease();
    Code:
       0: aload_0
       1: getfield      #9                  // Field explicitRelease:Z
       4: ireturn

  public synchronized void release(Output);
    Code:
       0: aload_0
       1: getfield      #12                 // Field outputSet:Ljava/util/HashSet;
       4: aload_1
       5: invokevirtual #17                 // Method java/util/HashSet.remove:(Ljava/lang/Object;)Z
       8: pop
       9: return

  public synchronized void releaseAll();
    Code:
       0: aload_0
       1: getfield      #12                 // Field outputSet:Ljava/util/HashSet;
       4: invokevirtual #18                 // Method java/util/HashSet.clear:()V
       7: return

  protected synchronized void register(Output);
    Code:
       0: aload_0
       1: getfield      #12                 // Field outputSet:Ljava/util/HashSet;
       4: aload_1
       5: invokevirtual #19                 // Method java/util/HashSet.add:(Ljava/lang/Object;)Z
       8: pop
       9: return

  protected synchronized Output get(Input);
    Code:
       0: aload_0
       1: getfield      #8                  // Field map:Ljava/util/WeakHashMap;
       4: aload_1
       5: invokevirtual #20                 // Method java/util/WeakHashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
       8: checkcast     #21                 // class java/lang/ref/WeakReference
      11: astore_2
      12: aload_2
      13: ifnull        70
      16: aload_0
      17: getfield      #5                  // Field log:Lorg/slf4j/Logger;
      20: ldc           #22                 // String Input key mapped to a non-null WeakReference
      22: invokeinterface #15,  2           // InterfaceMethod org/slf4j/Logger.trace:(Ljava/lang/String;)V
      27: aload_2
      28: invokevirtual #23                 // Method java/lang/ref/WeakReference.get:()Ljava/lang/Object;
      31: ifnull        50
      34: aload_0
      35: getfield      #5                  // Field log:Lorg/slf4j/Logger;
      38: ldc           #24                 // String WeakReference referent was non-null, returning referent
      40: invokeinterface #15,  2           // InterfaceMethod org/slf4j/Logger.trace:(Ljava/lang/String;)V
      45: aload_2
      46: invokevirtual #23                 // Method java/lang/ref/WeakReference.get:()Ljava/lang/Object;
      49: areturn
      50: aload_0
      51: getfield      #5                  // Field log:Lorg/slf4j/Logger;
      54: ldc           #25                 // String WeakReference referent was null, removing WeakReference entry from map
      56: invokeinterface #15,  2           // InterfaceMethod org/slf4j/Logger.trace:(Ljava/lang/String;)V
      61: aload_0
      62: getfield      #8                  // Field map:Ljava/util/WeakHashMap;
      65: aload_1
      66: invokevirtual #26                 // Method java/util/WeakHashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      69: pop
      70: aconst_null
      71: areturn

  protected synchronized void put(Input, Output);
    Code:
       0: aload_0
       1: getfield      #8                  // Field map:Ljava/util/WeakHashMap;
       4: aload_1
       5: new           #21                 // class java/lang/ref/WeakReference
       8: dup
       9: aload_2
      10: invokespecial #27                 // Method java/lang/ref/WeakReference."<init>":(Ljava/lang/Object;)V
      13: invokevirtual #28                 // Method java/util/WeakHashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      16: pop
      17: return
}
