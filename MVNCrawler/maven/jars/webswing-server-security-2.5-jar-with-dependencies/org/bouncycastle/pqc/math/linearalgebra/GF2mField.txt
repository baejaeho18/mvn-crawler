public class org.bouncycastle.pqc.math.linearalgebra.GF2mField {
  private int degree;

  private int polynomial;

  public org.bouncycastle.pqc.math.linearalgebra.GF2mField(int);
    Code:
       0: aload_0
       1: invokespecial #114                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #111                // Field degree:I
       9: iload_1
      10: bipush        32
      12: if_icmplt     25
      15: new           #75                 // class java/lang/IllegalArgumentException
      18: dup
      19: ldc           #6                  // String  Error: the degree of field is too large
      21: invokespecial #113                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      24: athrow
      25: iload_1
      26: iconst_1
      27: if_icmpge     40
      30: new           #75                 // class java/lang/IllegalArgumentException
      33: dup
      34: ldc           #5                  // String  Error: the degree of field is non-positive
      36: invokespecial #113                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      39: athrow
      40: aload_0
      41: iload_1
      42: putfield      #111                // Field degree:I
      45: aload_0
      46: iload_1
      47: invokestatic  #128                // Method org/bouncycastle/pqc/math/linearalgebra/PolynomialRingGF2.getIrreduciblePolynomial:(I)I
      50: putfield      #112                // Field polynomial:I
      53: return

  public org.bouncycastle.pqc.math.linearalgebra.GF2mField(int, int);
    Code:
       0: aload_0
       1: invokespecial #114                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #111                // Field degree:I
       9: iload_1
      10: iload_2
      11: invokestatic  #127                // Method org/bouncycastle/pqc/math/linearalgebra/PolynomialRingGF2.degree:(I)I
      14: if_icmpeq     27
      17: new           #75                 // class java/lang/IllegalArgumentException
      20: dup
      21: ldc           #4                  // String  Error: the degree is not correct
      23: invokespecial #113                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      26: athrow
      27: iload_2
      28: invokestatic  #129                // Method org/bouncycastle/pqc/math/linearalgebra/PolynomialRingGF2.isIrreducible:(I)Z
      31: ifne          44
      34: new           #75                 // class java/lang/IllegalArgumentException
      37: dup
      38: ldc           #3                  // String  Error: given polynomial is reducible
      40: invokespecial #113                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      43: athrow
      44: aload_0
      45: iload_1
      46: putfield      #111                // Field degree:I
      49: aload_0
      50: iload_2
      51: putfield      #112                // Field polynomial:I
      54: return

  public org.bouncycastle.pqc.math.linearalgebra.GF2mField(byte[]);
    Code:
       0: aload_0
       1: invokespecial #114                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #111                // Field degree:I
       9: aload_1
      10: arraylength
      11: iconst_4
      12: if_icmpeq     25
      15: new           #75                 // class java/lang/IllegalArgumentException
      18: dup
      19: ldc           #14                 // String byte array is not an encoded finite field
      21: invokespecial #113                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      24: athrow
      25: aload_0
      26: aload_1
      27: invokestatic  #126                // Method org/bouncycastle/pqc/math/linearalgebra/LittleEndianConversions.OS2IP:([B)I
      30: putfield      #112                // Field polynomial:I
      33: aload_0
      34: getfield      #112                // Field polynomial:I
      37: invokestatic  #129                // Method org/bouncycastle/pqc/math/linearalgebra/PolynomialRingGF2.isIrreducible:(I)Z
      40: ifne          53
      43: new           #75                 // class java/lang/IllegalArgumentException
      46: dup
      47: ldc           #14                 // String byte array is not an encoded finite field
      49: invokespecial #113                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      52: athrow
      53: aload_0
      54: aload_0
      55: getfield      #112                // Field polynomial:I
      58: invokestatic  #127                // Method org/bouncycastle/pqc/math/linearalgebra/PolynomialRingGF2.degree:(I)I
      61: putfield      #111                // Field degree:I
      64: return

  public org.bouncycastle.pqc.math.linearalgebra.GF2mField(org.bouncycastle.pqc.math.linearalgebra.GF2mField);
    Code:
       0: aload_0
       1: invokespecial #114                // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #111                // Field degree:I
       9: aload_0
      10: aload_1
      11: getfield      #111                // Field degree:I
      14: putfield      #111                // Field degree:I
      17: aload_0
      18: aload_1
      19: getfield      #112                // Field polynomial:I
      22: putfield      #112                // Field polynomial:I
      25: return

  public int getDegree();
    Code:
       0: aload_0
       1: getfield      #111                // Field degree:I
       4: ireturn

  public int getPolynomial();
    Code:
       0: aload_0
       1: getfield      #112                // Field polynomial:I
       4: ireturn

  public byte[] getEncoded();
    Code:
       0: aload_0
       1: getfield      #112                // Field polynomial:I
       4: invokestatic  #125                // Method org/bouncycastle/pqc/math/linearalgebra/LittleEndianConversions.I2OSP:(I)[B
       7: areturn

  public int add(int, int);
    Code:
       0: iload_1
       1: iload_2
       2: ixor
       3: ireturn

  public int mult(int, int);
    Code:
       0: iload_1
       1: iload_2
       2: aload_0
       3: getfield      #112                // Field polynomial:I
       6: invokestatic  #130                // Method org/bouncycastle/pqc/math/linearalgebra/PolynomialRingGF2.modMultiply:(III)I
       9: ireturn

  public int exp(int, int);
    Code:
       0: iload_1
       1: ifne          6
       4: iconst_0
       5: ireturn
       6: iload_1
       7: iconst_1
       8: if_icmpne     13
      11: iconst_1
      12: ireturn
      13: iconst_1
      14: istore_3
      15: iload_2
      16: ifge          28
      19: aload_0
      20: iload_1
      21: invokevirtual #120                // Method inverse:(I)I
      24: istore_1
      25: iload_2
      26: ineg
      27: istore_2
      28: iload_2
      29: ifeq          60
      32: iload_2
      33: iconst_1
      34: iand
      35: iconst_1
      36: if_icmpne     46
      39: aload_0
      40: iload_3
      41: iload_1
      42: invokevirtual #122                // Method mult:(II)I
      45: istore_3
      46: aload_0
      47: iload_1
      48: iload_1
      49: invokevirtual #122                // Method mult:(II)I
      52: istore_1
      53: iload_2
      54: iconst_1
      55: iushr
      56: istore_2
      57: goto          28
      60: iload_3
      61: ireturn

  public int inverse(int);
    Code:
       0: iconst_1
       1: aload_0
       2: getfield      #111                // Field degree:I
       5: ishl
       6: iconst_2
       7: isub
       8: istore_2
       9: aload_0
      10: iload_1
      11: iload_2
      12: invokevirtual #121                // Method exp:(II)I
      15: ireturn

  public int sqRoot(int);
    Code:
       0: iconst_1
       1: istore_2
       2: iload_2
       3: aload_0
       4: getfield      #111                // Field degree:I
       7: if_icmpge     23
      10: aload_0
      11: iload_1
      12: iload_1
      13: invokevirtual #122                // Method mult:(II)I
      16: istore_1
      17: iinc          2, 1
      20: goto          2
      23: iload_1
      24: ireturn

  public int getRandomElement(java.security.SecureRandom);
    Code:
       0: aload_1
       1: iconst_1
       2: aload_0
       3: getfield      #111                // Field degree:I
       6: ishl
       7: invokestatic  #131                // Method org/bouncycastle/pqc/math/linearalgebra/RandUtils.nextInt:(Ljava/security/SecureRandom;I)I
      10: istore_2
      11: iload_2
      12: ireturn

  public int getRandomNonZeroElement();
    Code:
       0: aload_0
       1: new           #78                 // class java/security/SecureRandom
       4: dup
       5: invokespecial #119                // Method java/security/SecureRandom."<init>":()V
       8: invokevirtual #124                // Method getRandomNonZeroElement:(Ljava/security/SecureRandom;)I
      11: ireturn

  public int getRandomNonZeroElement(java.security.SecureRandom);
    Code:
       0: ldc           #1                  // int 1048576
       2: istore_2
       3: iconst_0
       4: istore_3
       5: aload_1
       6: iconst_1
       7: aload_0
       8: getfield      #111                // Field degree:I
      11: ishl
      12: invokestatic  #131                // Method org/bouncycastle/pqc/math/linearalgebra/RandUtils.nextInt:(Ljava/security/SecureRandom;I)I
      15: istore        4
      17: iload         4
      19: ifne          45
      22: iload_3
      23: iload_2
      24: if_icmpge     45
      27: aload_1
      28: iconst_1
      29: aload_0
      30: getfield      #111                // Field degree:I
      33: ishl
      34: invokestatic  #131                // Method org/bouncycastle/pqc/math/linearalgebra/RandUtils.nextInt:(Ljava/security/SecureRandom;I)I
      37: istore        4
      39: iinc          3, 1
      42: goto          17
      45: iload_3
      46: iload_2
      47: if_icmpne     53
      50: iconst_1
      51: istore        4
      53: iload         4
      55: ireturn

  public boolean isElementOfThisField(int);
    Code:
       0: aload_0
       1: getfield      #111                // Field degree:I
       4: bipush        31
       6: if_icmpne     19
       9: iload_1
      10: iflt          17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ireturn
      19: iload_1
      20: iflt          37
      23: iload_1
      24: iconst_1
      25: aload_0
      26: getfield      #111                // Field degree:I
      29: ishl
      30: if_icmpge     37
      33: iconst_1
      34: goto          38
      37: iconst_0
      38: ireturn

  public java.lang.String elementToStr(int);
    Code:
       0: ldc           #2                  // String
       2: astore_2
       3: iconst_0
       4: istore_3
       5: iload_3
       6: aload_0
       7: getfield      #111                // Field degree:I
      10: if_icmpge     73
      13: iload_1
      14: i2b
      15: iconst_1
      16: iand
      17: ifne          43
      20: new           #77                 // class java/lang/StringBuilder
      23: dup
      24: invokespecial #115                // Method java/lang/StringBuilder."<init>":()V
      27: ldc           #9                  // String 0
      29: invokevirtual #118                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      32: aload_2
      33: invokevirtual #118                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: invokevirtual #116                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      39: astore_2
      40: goto          63
      43: new           #77                 // class java/lang/StringBuilder
      46: dup
      47: invokespecial #115                // Method java/lang/StringBuilder."<init>":()V
      50: ldc           #10                 // String 1
      52: invokevirtual #118                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      55: aload_2
      56: invokevirtual #118                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      59: invokevirtual #116                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      62: astore_2
      63: iload_1
      64: iconst_1
      65: iushr
      66: istore_1
      67: iinc          3, 1
      70: goto          5
      73: aload_2
      74: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: ifnull        11
       4: aload_1
       5: instanceof    #79                 // class org/bouncycastle/pqc/math/linearalgebra/GF2mField
       8: ifne          13
      11: iconst_0
      12: ireturn
      13: aload_1
      14: checkcast     #79                 // class org/bouncycastle/pqc/math/linearalgebra/GF2mField
      17: astore_2
      18: aload_0
      19: getfield      #111                // Field degree:I
      22: aload_2
      23: getfield      #111                // Field degree:I
      26: if_icmpne     42
      29: aload_0
      30: getfield      #112                // Field polynomial:I
      33: aload_2
      34: getfield      #112                // Field polynomial:I
      37: if_icmpne     42
      40: iconst_1
      41: ireturn
      42: iconst_0
      43: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #112                // Field polynomial:I
       4: ireturn

  public java.lang.String toString();
    Code:
       0: new           #77                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #115                // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #12                 // String Finite Field GF(2^
       9: invokevirtual #118                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #111                // Field degree:I
      16: invokevirtual #117                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      19: ldc           #7                  // String ) =
      21: invokevirtual #118                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: ldc           #13                 // String GF(2)[X]/<
      26: invokevirtual #118                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: aload_0
      30: getfield      #112                // Field polynomial:I
      33: invokestatic  #123                // Method polyToString:(I)Ljava/lang/String;
      36: invokevirtual #118                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: ldc           #11                 // String >
      41: invokevirtual #118                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      44: invokevirtual #116                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      47: astore_1
      48: aload_1
      49: areturn

  private static java.lang.String polyToString(int);
    Code:
       0: ldc           #2                  // String
       2: astore_1
       3: iload_0
       4: ifne          13
       7: ldc           #9                  // String 0
       9: astore_1
      10: goto          80
      13: iload_0
      14: iconst_1
      15: iand
      16: i2b
      17: istore_2
      18: iload_2
      19: iconst_1
      20: if_icmpne     26
      23: ldc           #10                 // String 1
      25: astore_1
      26: iload_0
      27: iconst_1
      28: iushr
      29: istore_0
      30: iconst_1
      31: istore_3
      32: iload_0
      33: ifeq          80
      36: iload_0
      37: iconst_1
      38: iand
      39: i2b
      40: istore_2
      41: iload_2
      42: iconst_1
      43: if_icmpne     70
      46: new           #77                 // class java/lang/StringBuilder
      49: dup
      50: invokespecial #115                // Method java/lang/StringBuilder."<init>":()V
      53: aload_1
      54: invokevirtual #118                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      57: ldc           #8                  // String +x^
      59: invokevirtual #118                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      62: iload_3
      63: invokevirtual #117                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      66: invokevirtual #116                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      69: astore_1
      70: iload_0
      71: iconst_1
      72: iushr
      73: istore_0
      74: iinc          3, 1
      77: goto          32
      80: aload_1
      81: areturn
}
