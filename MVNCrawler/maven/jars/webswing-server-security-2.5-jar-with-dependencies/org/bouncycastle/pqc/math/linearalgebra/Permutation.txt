public class org.bouncycastle.pqc.math.linearalgebra.Permutation {
  private int[] perm;

  public org.bouncycastle.pqc.math.linearalgebra.Permutation(int);
    Code:
       0: aload_0
       1: invokespecial #92                 // Method java/lang/Object."<init>":()V
       4: iload_1
       5: ifgt          18
       8: new           #55                 // class java/lang/IllegalArgumentException
      11: dup
      12: ldc           #6                  // String invalid length
      14: invokespecial #90                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      17: athrow
      18: aload_0
      19: iload_1
      20: newarray       int
      22: putfield      #89                 // Field perm:[I
      25: iload_1
      26: iconst_1
      27: isub
      28: istore_2
      29: iload_2
      30: iflt          46
      33: aload_0
      34: getfield      #89                 // Field perm:[I
      37: iload_2
      38: iload_2
      39: iastore
      40: iinc          2, -1
      43: goto          29
      46: return

  public org.bouncycastle.pqc.math.linearalgebra.Permutation(int[]);
    Code:
       0: aload_0
       1: invokespecial #92                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: invokespecial #105                // Method isPermutation:([I)Z
       9: ifne          22
      12: new           #55                 // class java/lang/IllegalArgumentException
      15: dup
      16: ldc           #4                  // String array is not a permutation vector
      18: invokespecial #90                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      21: athrow
      22: aload_0
      23: aload_1
      24: invokestatic  #97                 // Method org/bouncycastle/pqc/math/linearalgebra/IntUtils.clone:([I)[I
      27: putfield      #89                 // Field perm:[I
      30: return

  public org.bouncycastle.pqc.math.linearalgebra.Permutation(byte[]);
    Code:
       0: aload_0
       1: invokespecial #92                 // Method java/lang/Object."<init>":()V
       4: aload_1
       5: arraylength
       6: iconst_4
       7: if_icmpgt     20
      10: new           #55                 // class java/lang/IllegalArgumentException
      13: dup
      14: ldc           #5                  // String invalid encoding
      16: invokespecial #90                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      19: athrow
      20: aload_1
      21: iconst_0
      22: invokestatic  #102                // Method org/bouncycastle/pqc/math/linearalgebra/LittleEndianConversions.OS2IP:([BI)I
      25: istore_2
      26: iload_2
      27: iconst_1
      28: isub
      29: invokestatic  #99                 // Method org/bouncycastle/pqc/math/linearalgebra/IntegerFunctions.ceilLog256:(I)I
      32: istore_3
      33: aload_1
      34: arraylength
      35: iconst_4
      36: iload_2
      37: iload_3
      38: imul
      39: iadd
      40: if_icmpeq     53
      43: new           #55                 // class java/lang/IllegalArgumentException
      46: dup
      47: ldc           #5                  // String invalid encoding
      49: invokespecial #90                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      52: athrow
      53: aload_0
      54: iload_2
      55: newarray       int
      57: putfield      #89                 // Field perm:[I
      60: iconst_0
      61: istore        4
      63: iload         4
      65: iload_2
      66: if_icmpge     93
      69: aload_0
      70: getfield      #89                 // Field perm:[I
      73: iload         4
      75: aload_1
      76: iconst_4
      77: iload         4
      79: iload_3
      80: imul
      81: iadd
      82: iload_3
      83: invokestatic  #103                // Method org/bouncycastle/pqc/math/linearalgebra/LittleEndianConversions.OS2IP:([BII)I
      86: iastore
      87: iinc          4, 1
      90: goto          63
      93: aload_0
      94: aload_0
      95: getfield      #89                 // Field perm:[I
      98: invokespecial #105                // Method isPermutation:([I)Z
     101: ifne          114
     104: new           #55                 // class java/lang/IllegalArgumentException
     107: dup
     108: ldc           #5                  // String invalid encoding
     110: invokespecial #90                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     113: athrow
     114: return

  public org.bouncycastle.pqc.math.linearalgebra.Permutation(int, java.security.SecureRandom);
    Code:
       0: aload_0
       1: invokespecial #92                 // Method java/lang/Object."<init>":()V
       4: iload_1
       5: ifgt          18
       8: new           #55                 // class java/lang/IllegalArgumentException
      11: dup
      12: ldc           #6                  // String invalid length
      14: invokespecial #90                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      17: athrow
      18: aload_0
      19: iload_1
      20: newarray       int
      22: putfield      #89                 // Field perm:[I
      25: iload_1
      26: newarray       int
      28: astore_3
      29: iconst_0
      30: istore        4
      32: iload         4
      34: iload_1
      35: if_icmpge     50
      38: aload_3
      39: iload         4
      41: iload         4
      43: iastore
      44: iinc          4, 1
      47: goto          32
      50: iload_1
      51: istore        4
      53: iconst_0
      54: istore        5
      56: iload         5
      58: iload_1
      59: if_icmpge     98
      62: aload_2
      63: iload         4
      65: invokestatic  #106                // Method org/bouncycastle/pqc/math/linearalgebra/RandUtils.nextInt:(Ljava/security/SecureRandom;I)I
      68: istore        6
      70: iinc          4, -1
      73: aload_0
      74: getfield      #89                 // Field perm:[I
      77: iload         5
      79: aload_3
      80: iload         6
      82: iaload
      83: iastore
      84: aload_3
      85: iload         6
      87: aload_3
      88: iload         4
      90: iaload
      91: iastore
      92: iinc          5, 1
      95: goto          56
      98: return

  public byte[] getEncoded();
    Code:
       0: aload_0
       1: getfield      #89                 // Field perm:[I
       4: arraylength
       5: istore_1
       6: iload_1
       7: iconst_1
       8: isub
       9: invokestatic  #99                 // Method org/bouncycastle/pqc/math/linearalgebra/IntegerFunctions.ceilLog256:(I)I
      12: istore_2
      13: iconst_4
      14: iload_1
      15: iload_2
      16: imul
      17: iadd
      18: newarray       byte
      20: astore_3
      21: iload_1
      22: aload_3
      23: iconst_0
      24: invokestatic  #100                // Method org/bouncycastle/pqc/math/linearalgebra/LittleEndianConversions.I2OSP:(I[BI)V
      27: iconst_0
      28: istore        4
      30: iload         4
      32: iload_1
      33: if_icmpge     60
      36: aload_0
      37: getfield      #89                 // Field perm:[I
      40: iload         4
      42: iaload
      43: aload_3
      44: iconst_4
      45: iload         4
      47: iload_2
      48: imul
      49: iadd
      50: iload_2
      51: invokestatic  #101                // Method org/bouncycastle/pqc/math/linearalgebra/LittleEndianConversions.I2OSP:(I[BII)V
      54: iinc          4, 1
      57: goto          30
      60: aload_3
      61: areturn

  public int[] getVector();
    Code:
       0: aload_0
       1: getfield      #89                 // Field perm:[I
       4: invokestatic  #97                 // Method org/bouncycastle/pqc/math/linearalgebra/IntUtils.clone:([I)[I
       7: areturn

  public org.bouncycastle.pqc.math.linearalgebra.Permutation computeInverse();
    Code:
       0: new           #61                 // class org/bouncycastle/pqc/math/linearalgebra/Permutation
       3: dup
       4: aload_0
       5: getfield      #89                 // Field perm:[I
       8: arraylength
       9: invokespecial #104                // Method "<init>":(I)V
      12: astore_1
      13: aload_0
      14: getfield      #89                 // Field perm:[I
      17: arraylength
      18: iconst_1
      19: isub
      20: istore_2
      21: iload_2
      22: iflt          43
      25: aload_1
      26: getfield      #89                 // Field perm:[I
      29: aload_0
      30: getfield      #89                 // Field perm:[I
      33: iload_2
      34: iaload
      35: iload_2
      36: iastore
      37: iinc          2, -1
      40: goto          21
      43: aload_1
      44: areturn

  public org.bouncycastle.pqc.math.linearalgebra.Permutation rightMultiply(org.bouncycastle.pqc.math.linearalgebra.Permutation);
    Code:
       0: aload_1
       1: getfield      #89                 // Field perm:[I
       4: arraylength
       5: aload_0
       6: getfield      #89                 // Field perm:[I
       9: arraylength
      10: if_icmpeq     23
      13: new           #55                 // class java/lang/IllegalArgumentException
      16: dup
      17: ldc           #7                  // String length mismatch
      19: invokespecial #90                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      22: athrow
      23: new           #61                 // class org/bouncycastle/pqc/math/linearalgebra/Permutation
      26: dup
      27: aload_0
      28: getfield      #89                 // Field perm:[I
      31: arraylength
      32: invokespecial #104                // Method "<init>":(I)V
      35: astore_2
      36: aload_0
      37: getfield      #89                 // Field perm:[I
      40: arraylength
      41: iconst_1
      42: isub
      43: istore_3
      44: iload_3
      45: iflt          71
      48: aload_2
      49: getfield      #89                 // Field perm:[I
      52: iload_3
      53: aload_0
      54: getfield      #89                 // Field perm:[I
      57: aload_1
      58: getfield      #89                 // Field perm:[I
      61: iload_3
      62: iaload
      63: iaload
      64: iastore
      65: iinc          3, -1
      68: goto          44
      71: aload_2
      72: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #61                 // class org/bouncycastle/pqc/math/linearalgebra/Permutation
       4: ifne          9
       7: iconst_0
       8: ireturn
       9: aload_1
      10: checkcast     #61                 // class org/bouncycastle/pqc/math/linearalgebra/Permutation
      13: astore_2
      14: aload_0
      15: getfield      #89                 // Field perm:[I
      18: aload_2
      19: getfield      #89                 // Field perm:[I
      22: invokestatic  #98                 // Method org/bouncycastle/pqc/math/linearalgebra/IntUtils.equals:([I[I)Z
      25: ireturn

  public java.lang.String toString();
    Code:
       0: new           #57                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #93                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #2                  // String [
       9: invokevirtual #96                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #89                 // Field perm:[I
      16: iconst_0
      17: iaload
      18: invokevirtual #95                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      21: invokevirtual #94                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      24: astore_1
      25: iconst_1
      26: istore_2
      27: iload_2
      28: aload_0
      29: getfield      #89                 // Field perm:[I
      32: arraylength
      33: if_icmpge     71
      36: new           #57                 // class java/lang/StringBuilder
      39: dup
      40: invokespecial #93                 // Method java/lang/StringBuilder."<init>":()V
      43: aload_1
      44: invokevirtual #96                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      47: ldc           #1                  // String ,
      49: invokevirtual #96                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      52: aload_0
      53: getfield      #89                 // Field perm:[I
      56: iload_2
      57: iaload
      58: invokevirtual #95                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      61: invokevirtual #94                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      64: astore_1
      65: iinc          2, 1
      68: goto          27
      71: new           #57                 // class java/lang/StringBuilder
      74: dup
      75: invokespecial #93                 // Method java/lang/StringBuilder."<init>":()V
      78: aload_1
      79: invokevirtual #96                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      82: ldc           #3                  // String ]
      84: invokevirtual #96                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      87: invokevirtual #94                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      90: astore_1
      91: aload_1
      92: areturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #89                 // Field perm:[I
       4: invokevirtual #91                 // Method java/lang/Object.hashCode:()I
       7: ireturn

  private boolean isPermutation(int[]);
    Code:
       0: aload_1
       1: arraylength
       2: istore_2
       3: iload_2
       4: newarray       boolean
       6: astore_3
       7: iconst_0
       8: istore        4
      10: iload         4
      12: iload_2
      13: if_icmpge     55
      16: aload_1
      17: iload         4
      19: iaload
      20: iflt          40
      23: aload_1
      24: iload         4
      26: iaload
      27: iload_2
      28: if_icmpge     40
      31: aload_3
      32: aload_1
      33: iload         4
      35: iaload
      36: baload
      37: ifeq          42
      40: iconst_0
      41: ireturn
      42: aload_3
      43: aload_1
      44: iload         4
      46: iaload
      47: iconst_1
      48: bastore
      49: iinc          4, 1
      52: goto          10
      55: iconst_1
      56: ireturn
}
