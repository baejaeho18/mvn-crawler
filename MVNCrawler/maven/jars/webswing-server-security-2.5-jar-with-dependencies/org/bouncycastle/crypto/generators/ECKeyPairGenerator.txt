public class org.bouncycastle.crypto.generators.ECKeyPairGenerator implements org.bouncycastle.crypto.AsymmetricCipherKeyPairGenerator,org.bouncycastle.math.ec.ECConstants {
  org.bouncycastle.crypto.params.ECDomainParameters params;

  java.security.SecureRandom random;

  public org.bouncycastle.crypto.generators.ECKeyPairGenerator();
    Code:
       0: aload_0
       1: invokespecial #82                 // Method java/lang/Object."<init>":()V
       4: return

  public void init(org.bouncycastle.crypto.KeyGenerationParameters);
    Code:
       0: aload_1
       1: checkcast     #39                 // class org/bouncycastle/crypto/params/ECKeyGenerationParameters
       4: astore_2
       5: aload_0
       6: aload_2
       7: invokevirtual #91                 // Method org/bouncycastle/crypto/params/ECKeyGenerationParameters.getRandom:()Ljava/security/SecureRandom;
      10: putfield      #80                 // Field random:Ljava/security/SecureRandom;
      13: aload_0
      14: aload_2
      15: invokevirtual #92                 // Method org/bouncycastle/crypto/params/ECKeyGenerationParameters.getDomainParameters:()Lorg/bouncycastle/crypto/params/ECDomainParameters;
      18: putfield      #81                 // Field params:Lorg/bouncycastle/crypto/params/ECDomainParameters;
      21: aload_0
      22: getfield      #80                 // Field random:Ljava/security/SecureRandom;
      25: ifnonnull     39
      28: aload_0
      29: new           #34                 // class java/security/SecureRandom
      32: dup
      33: invokespecial #86                 // Method java/security/SecureRandom."<init>":()V
      36: putfield      #80                 // Field random:Ljava/security/SecureRandom;
      39: return

  public org.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair();
    Code:
       0: aload_0
       1: getfield      #81                 // Field params:Lorg/bouncycastle/crypto/params/ECDomainParameters;
       4: invokevirtual #89                 // Method org/bouncycastle/crypto/params/ECDomainParameters.getN:()Ljava/math/BigInteger;
       7: astore_1
       8: aload_1
       9: invokevirtual #83                 // Method java/math/BigInteger.bitLength:()I
      12: istore_2
      13: iload_2
      14: iconst_2
      15: iushr
      16: istore_3
      17: new           #33                 // class java/math/BigInteger
      20: dup
      21: iload_2
      22: aload_0
      23: getfield      #80                 // Field random:Ljava/security/SecureRandom;
      26: invokespecial #85                 // Method java/math/BigInteger."<init>":(ILjava/util/Random;)V
      29: astore        4
      31: aload         4
      33: getstatic     #79                 // Field TWO:Ljava/math/BigInteger;
      36: invokevirtual #84                 // Method java/math/BigInteger.compareTo:(Ljava/math/BigInteger;)I
      39: iflt          17
      42: aload         4
      44: aload_1
      45: invokevirtual #84                 // Method java/math/BigInteger.compareTo:(Ljava/math/BigInteger;)I
      48: iflt          54
      51: goto          17
      54: aload         4
      56: invokestatic  #96                 // Method org/bouncycastle/math/ec/WNafUtil.getNafWeight:(Ljava/math/BigInteger;)I
      59: iload_3
      60: if_icmpge     66
      63: goto          17
      66: aload_0
      67: invokevirtual #88                 // Method createBasePointMultiplier:()Lorg/bouncycastle/math/ec/ECMultiplier;
      70: aload_0
      71: getfield      #81                 // Field params:Lorg/bouncycastle/crypto/params/ECDomainParameters;
      74: invokevirtual #90                 // Method org/bouncycastle/crypto/params/ECDomainParameters.getG:()Lorg/bouncycastle/math/ec/ECPoint;
      77: aload         4
      79: invokeinterface #97,  3           // InterfaceMethod org/bouncycastle/math/ec/ECMultiplier.multiply:(Lorg/bouncycastle/math/ec/ECPoint;Ljava/math/BigInteger;)Lorg/bouncycastle/math/ec/ECPoint;
      84: astore        5
      86: new           #35                 // class org/bouncycastle/crypto/AsymmetricCipherKeyPair
      89: dup
      90: new           #41                 // class org/bouncycastle/crypto/params/ECPublicKeyParameters
      93: dup
      94: aload         5
      96: aload_0
      97: getfield      #81                 // Field params:Lorg/bouncycastle/crypto/params/ECDomainParameters;
     100: invokespecial #94                 // Method org/bouncycastle/crypto/params/ECPublicKeyParameters."<init>":(Lorg/bouncycastle/math/ec/ECPoint;Lorg/bouncycastle/crypto/params/ECDomainParameters;)V
     103: new           #40                 // class org/bouncycastle/crypto/params/ECPrivateKeyParameters
     106: dup
     107: aload         4
     109: aload_0
     110: getfield      #81                 // Field params:Lorg/bouncycastle/crypto/params/ECDomainParameters;
     113: invokespecial #93                 // Method org/bouncycastle/crypto/params/ECPrivateKeyParameters."<init>":(Ljava/math/BigInteger;Lorg/bouncycastle/crypto/params/ECDomainParameters;)V
     116: invokespecial #87                 // Method org/bouncycastle/crypto/AsymmetricCipherKeyPair."<init>":(Lorg/bouncycastle/crypto/params/AsymmetricKeyParameter;Lorg/bouncycastle/crypto/params/AsymmetricKeyParameter;)V
     119: areturn

  protected org.bouncycastle.math.ec.ECMultiplier createBasePointMultiplier();
    Code:
       0: new           #44                 // class org/bouncycastle/math/ec/FixedPointCombMultiplier
       3: dup
       4: invokespecial #95                 // Method org/bouncycastle/math/ec/FixedPointCombMultiplier."<init>":()V
       7: areturn
}
